
roki-mb-firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001acf8  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001ab08  0801af98  0801af98  0002af98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08035aa0  08035aa0  00045aa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08035aa8  08035aa8  00045aa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  08035ab0  08035ab0  00045ab0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e8  24000000  08035ab8  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00003480  240001e8  08035ca0  000501e8  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24003668  08035ca0  00053668  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000501e8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0004e78a  00000000  00000000  00050216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00007547  00000000  00000000  0009e9a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000033d0  00000000  00000000  000a5ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00003120  00000000  00000000  000a92b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00045497  00000000  00000000  000ac3d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00039bfb  00000000  00000000  000f186f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0018bce9  00000000  00000000  0012b46a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  002b7153  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000ec38  00000000  00000000  002b71a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e8 	.word	0x240001e8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801af80 	.word	0x0801af80

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001ec 	.word	0x240001ec
 80002dc:	0801af80 	.word	0x0801af80

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000390:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <_ZN10BHYWrapperC1EP19__SPI_HandleTypeDef>:
 *      Author: tndrd
 */

#include "BHYWrapper.hpp"

BHYWrapper::BHYWrapper(SPI_HandleTypeDef *spiHandle) :
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
 800068c:	6039      	str	r1, [r7, #0]
		SPIHandle { spiHandle } {
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	683a      	ldr	r2, [r7, #0]
 8000692:	f8c3 2938 	str.w	r2, [r3, #2360]	; 0x938
	assert(spiHandle);
 8000696:	683b      	ldr	r3, [r7, #0]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d105      	bne.n	80006a8 <_ZN10BHYWrapperC1EP19__SPI_HandleTypeDef+0x24>
 800069c:	4b05      	ldr	r3, [pc, #20]	; (80006b4 <_ZN10BHYWrapperC1EP19__SPI_HandleTypeDef+0x30>)
 800069e:	4a06      	ldr	r2, [pc, #24]	; (80006b8 <_ZN10BHYWrapperC1EP19__SPI_HandleTypeDef+0x34>)
 80006a0:	210c      	movs	r1, #12
 80006a2:	4806      	ldr	r0, [pc, #24]	; (80006bc <_ZN10BHYWrapperC1EP19__SPI_HandleTypeDef+0x38>)
 80006a4:	f019 fc18 	bl	8019ed8 <__assert_func>
}
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	4618      	mov	r0, r3
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	0801af98 	.word	0x0801af98
 80006b8:	0801afa4 	.word	0x0801afa4
 80006bc:	0801afd0 	.word	0x0801afd0

080006c0 <_ZN10BHYWrapper4InitEfm>:

int BHYWrapper::Init(float sampleRate, uint32_t reportLatency) {
 80006c0:	b590      	push	{r4, r7, lr}
 80006c2:	b08b      	sub	sp, #44	; 0x2c
 80006c4:	af04      	add	r7, sp, #16
 80006c6:	60f8      	str	r0, [r7, #12]
 80006c8:	ed87 0a02 	vstr	s0, [r7, #8]
 80006cc:	6079      	str	r1, [r7, #4]
	uint8_t product_id = 0;
 80006ce:	2300      	movs	r3, #0
 80006d0:	75bb      	strb	r3, [r7, #22]
	uint16_t bhy2KernelVersion;

	uint8_t hintr_ctrl = BHY2_ICTL_DISABLE_STATUS_FIFO | BHY2_ICTL_DISABLE_DEBUG;
 80006d2:	230c      	movs	r3, #12
 80006d4:	74fb      	strb	r3, [r7, #19]

	uint8_t hif_ctrl = 0;
 80006d6:	2300      	movs	r3, #0
 80006d8:	75fb      	strb	r3, [r7, #23]
	uint8_t boot_status;
	uint8_t sensor_error;

	spi_init(SPIHandle);
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	f8d3 3938 	ldr.w	r3, [r3, #2360]	; 0x938
 80006e0:	4618      	mov	r0, r3
 80006e2:	f000 fa69 	bl	8000bb8 <_Z8spi_initP19__SPI_HandleTypeDef>

	if (bhy2_init(BHY2_SPI_INTERFACE, &bhy2_spi_read, &bhy2_spi_write,
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	9302      	str	r3, [sp, #8]
 80006ea:	2300      	movs	r3, #0
 80006ec:	9301      	str	r3, [sp, #4]
 80006ee:	2340      	movs	r3, #64	; 0x40
 80006f0:	9300      	str	r3, [sp, #0]
 80006f2:	4b99      	ldr	r3, [pc, #612]	; (8000958 <_ZN10BHYWrapper4InitEfm+0x298>)
 80006f4:	4a99      	ldr	r2, [pc, #612]	; (800095c <_ZN10BHYWrapper4InitEfm+0x29c>)
 80006f6:	499a      	ldr	r1, [pc, #616]	; (8000960 <_ZN10BHYWrapper4InitEfm+0x2a0>)
 80006f8:	2001      	movs	r0, #1
 80006fa:	f006 fc5a 	bl	8006fb2 <bhy2_init>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	bf14      	ite	ne
 8000704:	2301      	movne	r3, #1
 8000706:	2300      	moveq	r3, #0
 8000708:	b2db      	uxtb	r3, r3
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <_ZN10BHYWrapper4InitEfm+0x52>
			bhy2_delay_us, 64, NULL, &bhy2))
		return 1;
 800070e:	2301      	movs	r3, #1
 8000710:	e11d      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_soft_reset(&bhy2))
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	4618      	mov	r0, r3
 8000716:	f006 fc34 	bl	8006f82 <bhy2_soft_reset>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	bf14      	ite	ne
 8000720:	2301      	movne	r3, #1
 8000722:	2300      	moveq	r3, #0
 8000724:	b2db      	uxtb	r3, r3
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <_ZN10BHYWrapper4InitEfm+0x6e>
		return 2;
 800072a:	2302      	movs	r3, #2
 800072c:	e10f      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_product_id(&product_id, &bhy2))
 800072e:	68fa      	ldr	r2, [r7, #12]
 8000730:	f107 0316 	add.w	r3, r7, #22
 8000734:	4611      	mov	r1, r2
 8000736:	4618      	mov	r0, r3
 8000738:	f006 fb0f 	bl	8006d5a <bhy2_get_product_id>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	bf14      	ite	ne
 8000742:	2301      	movne	r3, #1
 8000744:	2300      	moveq	r3, #0
 8000746:	b2db      	uxtb	r3, r3
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <_ZN10BHYWrapper4InitEfm+0x90>
		return 3;
 800074c:	2303      	movs	r3, #3
 800074e:	e0fe      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (product_id != BHY2_PRODUCT_ID)
 8000750:	7dbb      	ldrb	r3, [r7, #22]
 8000752:	2b89      	cmp	r3, #137	; 0x89
 8000754:	d001      	beq.n	800075a <_ZN10BHYWrapper4InitEfm+0x9a>
		return 4;
 8000756:	2304      	movs	r3, #4
 8000758:	e0f9      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_set_host_interrupt_ctrl(hintr_ctrl, &bhy2))
 800075a:	7cfb      	ldrb	r3, [r7, #19]
 800075c:	68fa      	ldr	r2, [r7, #12]
 800075e:	4611      	mov	r1, r2
 8000760:	4618      	mov	r0, r3
 8000762:	f006 fba1 	bl	8006ea8 <bhy2_set_host_interrupt_ctrl>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	bf14      	ite	ne
 800076c:	2301      	movne	r3, #1
 800076e:	2300      	moveq	r3, #0
 8000770:	b2db      	uxtb	r3, r3
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <_ZN10BHYWrapper4InitEfm+0xba>
		return 5;
 8000776:	2305      	movs	r3, #5
 8000778:	e0e9      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_host_interrupt_ctrl(&hintr_ctrl, &bhy2))
 800077a:	68fa      	ldr	r2, [r7, #12]
 800077c:	f107 0313 	add.w	r3, r7, #19
 8000780:	4611      	mov	r1, r2
 8000782:	4618      	mov	r0, r3
 8000784:	f006 fbac 	bl	8006ee0 <bhy2_get_host_interrupt_ctrl>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	bf14      	ite	ne
 800078e:	2301      	movne	r3, #1
 8000790:	2300      	moveq	r3, #0
 8000792:	b2db      	uxtb	r3, r3
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <_ZN10BHYWrapper4InitEfm+0xdc>
		return 6;
 8000798:	2306      	movs	r3, #6
 800079a:	e0d8      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_set_host_intf_ctrl(hif_ctrl, &bhy2))
 800079c:	68fa      	ldr	r2, [r7, #12]
 800079e:	7dfb      	ldrb	r3, [r7, #23]
 80007a0:	4611      	mov	r1, r2
 80007a2:	4618      	mov	r0, r3
 80007a4:	f006 fbd1 	bl	8006f4a <bhy2_set_host_intf_ctrl>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	bf14      	ite	ne
 80007ae:	2301      	movne	r3, #1
 80007b0:	2300      	moveq	r3, #0
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <_ZN10BHYWrapper4InitEfm+0xfc>
		return 7;
 80007b8:	2307      	movs	r3, #7
 80007ba:	e0c8      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_boot_status(&boot_status, &bhy2))
 80007bc:	68fa      	ldr	r2, [r7, #12]
 80007be:	f107 0312 	add.w	r3, r7, #18
 80007c2:	4611      	mov	r1, r2
 80007c4:	4618      	mov	r0, r3
 80007c6:	f006 fafc 	bl	8006dc2 <bhy2_get_boot_status>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	bf14      	ite	ne
 80007d0:	2301      	movne	r3, #1
 80007d2:	2300      	moveq	r3, #0
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <_ZN10BHYWrapper4InitEfm+0x11e>
		return 8;
 80007da:	2308      	movs	r3, #8
 80007dc:	e0b7      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (!(boot_status & BHY2_BST_HOST_INTERFACE_READY))
 80007de:	7cbb      	ldrb	r3, [r7, #18]
 80007e0:	f003 0310 	and.w	r3, r3, #16
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d101      	bne.n	80007ec <_ZN10BHYWrapper4InitEfm+0x12c>
		return 9;
 80007e8:	2309      	movs	r3, #9
 80007ea:	e0b0      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_upload_firmware_to_ram(bhy2_firmware_image,
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	461a      	mov	r2, r3
 80007f0:	495c      	ldr	r1, [pc, #368]	; (8000964 <_ZN10BHYWrapper4InitEfm+0x2a4>)
 80007f2:	485d      	ldr	r0, [pc, #372]	; (8000968 <_ZN10BHYWrapper4InitEfm+0x2a8>)
 80007f4:	f006 fb21 	bl	8006e3a <bhy2_upload_firmware_to_ram>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	bf14      	ite	ne
 80007fe:	2301      	movne	r3, #1
 8000800:	2300      	moveq	r3, #0
 8000802:	b2db      	uxtb	r3, r3
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <_ZN10BHYWrapper4InitEfm+0x14c>
			sizeof(bhy2_firmware_image), &bhy2))
		return 9;
 8000808:	2309      	movs	r3, #9
 800080a:	e0a0      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_error_value(&sensor_error, &bhy2))
 800080c:	68fa      	ldr	r2, [r7, #12]
 800080e:	f107 0311 	add.w	r3, r7, #17
 8000812:	4611      	mov	r1, r2
 8000814:	4618      	mov	r0, r3
 8000816:	f006 fcb3 	bl	8007180 <bhy2_get_error_value>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	bf14      	ite	ne
 8000820:	2301      	movne	r3, #1
 8000822:	2300      	moveq	r3, #0
 8000824:	b2db      	uxtb	r3, r3
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <_ZN10BHYWrapper4InitEfm+0x16e>
		return 10;
 800082a:	230a      	movs	r3, #10
 800082c:	e08f      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (sensor_error)
 800082e:	7c7b      	ldrb	r3, [r7, #17]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <_ZN10BHYWrapper4InitEfm+0x178>
		return 11;
 8000834:	230b      	movs	r3, #11
 8000836:	e08a      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_boot_from_ram(&bhy2))
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	4618      	mov	r0, r3
 800083c:	f006 fb1c 	bl	8006e78 <bhy2_boot_from_ram>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	bf14      	ite	ne
 8000846:	2301      	movne	r3, #1
 8000848:	2300      	moveq	r3, #0
 800084a:	b2db      	uxtb	r3, r3
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <_ZN10BHYWrapper4InitEfm+0x194>
		return 12;
 8000850:	230c      	movs	r3, #12
 8000852:	e07c      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_error_value(&sensor_error, &bhy2))
 8000854:	68fa      	ldr	r2, [r7, #12]
 8000856:	f107 0311 	add.w	r3, r7, #17
 800085a:	4611      	mov	r1, r2
 800085c:	4618      	mov	r0, r3
 800085e:	f006 fc8f 	bl	8007180 <bhy2_get_error_value>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	bf14      	ite	ne
 8000868:	2301      	movne	r3, #1
 800086a:	2300      	moveq	r3, #0
 800086c:	b2db      	uxtb	r3, r3
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <_ZN10BHYWrapper4InitEfm+0x1b6>
		return 13;
 8000872:	230d      	movs	r3, #13
 8000874:	e06b      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (sensor_error)
 8000876:	7c7b      	ldrb	r3, [r7, #17]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <_ZN10BHYWrapper4InitEfm+0x1c0>
		return 14;
 800087c:	230e      	movs	r3, #14
 800087e:	e066      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_kernel_version(&bhy2KernelVersion, &bhy2))
 8000880:	68fa      	ldr	r2, [r7, #12]
 8000882:	f107 0314 	add.w	r3, r7, #20
 8000886:	4611      	mov	r1, r2
 8000888:	4618      	mov	r0, r3
 800088a:	f006 fa80 	bl	8006d8e <bhy2_get_kernel_version>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	bf14      	ite	ne
 8000894:	2301      	movne	r3, #1
 8000896:	2300      	moveq	r3, #0
 8000898:	b2db      	uxtb	r3, r3
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <_ZN10BHYWrapper4InitEfm+0x1e2>
		return 15;
 800089e:	230f      	movs	r3, #15
 80008a0:	e055      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2KernelVersion == 0)
 80008a2:	8abb      	ldrh	r3, [r7, #20]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d101      	bne.n	80008ac <_ZN10BHYWrapper4InitEfm+0x1ec>
		return 16;
 80008a8:	2310      	movs	r3, #16
 80008aa:	e050      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_register_fifo_parse_callback(BHY2_SENSOR_ID_GAMERV,
			BHYWrapper::ParseFrame, &CurrentFrame, &bhy2))
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	f241 123c 	movw	r2, #4412	; 0x113c
 80008b2:	441a      	add	r2, r3
	if (bhy2_register_fifo_parse_callback(BHY2_SENSOR_ID_GAMERV,
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	492d      	ldr	r1, [pc, #180]	; (800096c <_ZN10BHYWrapper4InitEfm+0x2ac>)
 80008b8:	2025      	movs	r0, #37	; 0x25
 80008ba:	f006 fba4 	bl	8007006 <bhy2_register_fifo_parse_callback>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	bf14      	ite	ne
 80008c4:	2301      	movne	r3, #1
 80008c6:	2300      	moveq	r3, #0
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <_ZN10BHYWrapper4InitEfm+0x212>
		return 17;
 80008ce:	2311      	movs	r3, #17
 80008d0:	e03d      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_and_process_fifo(WorkBuffer.data(), WorkBuffer.size(), &bhy2))
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	f603 133c 	addw	r3, r3, #2364	; 0x93c
 80008d8:	4618      	mov	r0, r3
 80008da:	f000 f949 	bl	8000b70 <_ZNSt5arrayIhLj2048EE4dataEv>
 80008de:	4604      	mov	r4, r0
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	f603 133c 	addw	r3, r3, #2364	; 0x93c
 80008e6:	4618      	mov	r0, r3
 80008e8:	f000 f94f 	bl	8000b8a <_ZNKSt5arrayIhLj2048EE4sizeEv>
 80008ec:	4601      	mov	r1, r0
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	461a      	mov	r2, r3
 80008f2:	4620      	mov	r0, r4
 80008f4:	f006 f8df 	bl	8006ab6 <bhy2_get_and_process_fifo>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	bf14      	ite	ne
 80008fe:	2301      	movne	r3, #1
 8000900:	2300      	moveq	r3, #0
 8000902:	b2db      	uxtb	r3, r3
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <_ZN10BHYWrapper4InitEfm+0x24c>
		return 18;
 8000908:	2312      	movs	r3, #18
 800090a:	e020      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_update_virtual_sensor_list(&bhy2))
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	4618      	mov	r0, r3
 8000910:	f006 fba8 	bl	8007064 <bhy2_update_virtual_sensor_list>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	bf14      	ite	ne
 800091a:	2301      	movne	r3, #1
 800091c:	2300      	moveq	r3, #0
 800091e:	b2db      	uxtb	r3, r3
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <_ZN10BHYWrapper4InitEfm+0x268>
		return 16;
 8000924:	2310      	movs	r3, #16
 8000926:	e012      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_set_virt_sensor_cfg(BHY2_SENSOR_ID_GAMERV, sampleRate,
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	461a      	mov	r2, r3
 800092c:	6879      	ldr	r1, [r7, #4]
 800092e:	ed97 0a02 	vldr	s0, [r7, #8]
 8000932:	2025      	movs	r0, #37	; 0x25
 8000934:	f006 f9f0 	bl	8006d18 <bhy2_set_virt_sensor_cfg>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	bf14      	ite	ne
 800093e:	2301      	movne	r3, #1
 8000940:	2300      	moveq	r3, #0
 8000942:	b2db      	uxtb	r3, r3
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <_ZN10BHYWrapper4InitEfm+0x28c>
			reportLatency, &bhy2))
		return 17;
 8000948:	2311      	movs	r3, #17
 800094a:	e000      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	return 0;
 800094c:	2300      	movs	r3, #0
}
 800094e:	4618      	mov	r0, r3
 8000950:	371c      	adds	r7, #28
 8000952:	46bd      	mov	sp, r7
 8000954:	bd90      	pop	{r4, r7, pc}
 8000956:	bf00      	nop
 8000958:	08000d61 	.word	0x08000d61
 800095c:	08000cdd 	.word	0x08000cdd
 8000960:	08000c51 	.word	0x08000c51
 8000964:	0001a66c 	.word	0x0001a66c
 8000968:	0801b314 	.word	0x0801b314
 800096c:	080009f1 	.word	0x080009f1

08000970 <_ZN10BHYWrapper4PollEv>:

bool BHYWrapper::Poll() {
 8000970:	b590      	push	{r4, r7, lr}
 8000972:	b085      	sub	sp, #20
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
	uint8_t interruptStatus = 0;
 8000978:	2300      	movs	r3, #0
 800097a:	73fb      	strb	r3, [r7, #15]
	bhy2_get_interrupt_status(&interruptStatus, &bhy2);
 800097c:	687a      	ldr	r2, [r7, #4]
 800097e:	f107 030f 	add.w	r3, r7, #15
 8000982:	4611      	mov	r1, r2
 8000984:	4618      	mov	r0, r3
 8000986:	f006 fac6 	bl	8006f16 <bhy2_get_interrupt_status>

	if (interruptStatus) {
 800098a:	7bfb      	ldrb	r3, [r7, #15]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d014      	beq.n	80009ba <_ZN10BHYWrapper4PollEv+0x4a>
		bhy2_get_and_process_fifo(WorkBuffer.data(), WorkBuffer.size(), &bhy2);
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	f603 133c 	addw	r3, r3, #2364	; 0x93c
 8000996:	4618      	mov	r0, r3
 8000998:	f000 f8ea 	bl	8000b70 <_ZNSt5arrayIhLj2048EE4dataEv>
 800099c:	4604      	mov	r4, r0
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	f603 133c 	addw	r3, r3, #2364	; 0x93c
 80009a4:	4618      	mov	r0, r3
 80009a6:	f000 f8f0 	bl	8000b8a <_ZNKSt5arrayIhLj2048EE4sizeEv>
 80009aa:	4601      	mov	r1, r0
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	461a      	mov	r2, r3
 80009b0:	4620      	mov	r0, r4
 80009b2:	f006 f880 	bl	8006ab6 <bhy2_get_and_process_fifo>
		return true;
 80009b6:	2301      	movs	r3, #1
 80009b8:	e000      	b.n	80009bc <_ZN10BHYWrapper4PollEv+0x4c>
	}

	return false;
 80009ba:	2300      	movs	r3, #0
}
 80009bc:	4618      	mov	r0, r3
 80009be:	3714      	adds	r7, #20
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd90      	pop	{r4, r7, pc}

080009c4 <_ZNK10BHYWrapper8GetFrameEv>:

BHYWrapper::BHYFrame BHYWrapper::GetFrame() const {
 80009c4:	b4b0      	push	{r4, r5, r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
 80009cc:	6039      	str	r1, [r7, #0]
	return CurrentFrame;
 80009ce:	687a      	ldr	r2, [r7, #4]
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80009d6:	4615      	mov	r5, r2
 80009d8:	f503 749e 	add.w	r4, r3, #316	; 0x13c
 80009dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009e0:	6823      	ldr	r3, [r4, #0]
 80009e2:	602b      	str	r3, [r5, #0]
}
 80009e4:	6878      	ldr	r0, [r7, #4]
 80009e6:	370c      	adds	r7, #12
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bcb0      	pop	{r4, r5, r7}
 80009ec:	4770      	bx	lr
	...

080009f0 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv>:

void BHYWrapper::ParseFrame(const bhy2_fifo_parse_data_info *cbInfo,
		void *cbRef) {
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b08a      	sub	sp, #40	; 0x28
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
 80009f8:	6039      	str	r1, [r7, #0]
	BHYFrame *frame = reinterpret_cast<BHYFrame*>(cbRef);
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	627b      	str	r3, [r7, #36]	; 0x24
	bhy2_data_quaternion qtData;

	assert(frame);
 80009fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d105      	bne.n	8000a10 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x20>
 8000a04:	4b26      	ldr	r3, [pc, #152]	; (8000aa0 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0xb0>)
 8000a06:	4a27      	ldr	r2, [pc, #156]	; (8000aa4 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0xb4>)
 8000a08:	2176      	movs	r1, #118	; 0x76
 8000a0a:	4827      	ldr	r0, [pc, #156]	; (8000aa8 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0xb8>)
 8000a0c:	f019 fa64 	bl	8019ed8 <__assert_func>
	auto &timestamp = frame->Timestamp;
 8000a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a12:	3308      	adds	r3, #8
 8000a14:	623b      	str	r3, [r7, #32]
	auto &quaternion = frame->Orientation;
 8000a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a18:	61fb      	str	r3, [r7, #28]

	if (cbInfo->data_size != CallbackDataSize)
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	789b      	ldrb	r3, [r3, #2]
 8000a1e:	2b0b      	cmp	r3, #11
 8000a20:	d139      	bne.n	8000a96 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0xa6>
		return;

	bhy2_parse_quaternion(cbInfo->data_ptr, &qtData);
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	685b      	ldr	r3, [r3, #4]
 8000a26:	f107 020c 	add.w	r2, r7, #12
 8000a2a:	4611      	mov	r1, r2
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f007 fd2e 	bl	800848e <bhy2_parse_quaternion>

	frame->SensorId = cbInfo->sensor_id;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	781a      	ldrb	r2, [r3, #0]
 8000a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a38:	741a      	strb	r2, [r3, #16]

	uint32_t timeData = *cbInfo->time_stamp; /* Store the last timestamp */
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	689b      	ldr	r3, [r3, #8]
 8000a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a42:	4613      	mov	r3, r2
 8000a44:	61bb      	str	r3, [r7, #24]
	timeData *= 15625;
 8000a46:	69bb      	ldr	r3, [r7, #24]
 8000a48:	f643 5209 	movw	r2, #15625	; 0x3d09
 8000a4c:	fb02 f303 	mul.w	r3, r2, r3
 8000a50:	61bb      	str	r3, [r7, #24]

	timestamp.TimeS = (timeData / UINT64_C(1000000000));
 8000a52:	69bb      	ldr	r3, [r7, #24]
 8000a54:	0a5b      	lsrs	r3, r3, #9
 8000a56:	4a15      	ldr	r2, [pc, #84]	; (8000aac <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0xbc>)
 8000a58:	fba2 2303 	umull	r2, r3, r2, r3
 8000a5c:	09da      	lsrs	r2, r3, #7
 8000a5e:	6a3b      	ldr	r3, [r7, #32]
 8000a60:	601a      	str	r2, [r3, #0]
	timestamp.TimeNS = (timeData - (timestamp.TimeS * UINT64_C(1000000000)));
 8000a62:	6a3b      	ldr	r3, [r7, #32]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4a12      	ldr	r2, [pc, #72]	; (8000ab0 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0xc0>)
 8000a68:	fb02 f303 	mul.w	r3, r2, r3
 8000a6c:	69ba      	ldr	r2, [r7, #24]
 8000a6e:	1ad2      	subs	r2, r2, r3
 8000a70:	6a3b      	ldr	r3, [r7, #32]
 8000a72:	605a      	str	r2, [r3, #4]

	quaternion.X = qtData.x;
 8000a74:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a78:	69fb      	ldr	r3, [r7, #28]
 8000a7a:	801a      	strh	r2, [r3, #0]
	quaternion.Y = qtData.y;
 8000a7c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000a80:	69fb      	ldr	r3, [r7, #28]
 8000a82:	805a      	strh	r2, [r3, #2]
	quaternion.Z = qtData.z;
 8000a84:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000a88:	69fb      	ldr	r3, [r7, #28]
 8000a8a:	809a      	strh	r2, [r3, #4]
	quaternion.W = qtData.w;
 8000a8c:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8000a90:	69fb      	ldr	r3, [r7, #28]
 8000a92:	80da      	strh	r2, [r3, #6]
 8000a94:	e000      	b.n	8000a98 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0xa8>
		return;
 8000a96:	bf00      	nop
	/*
	quaternion.Accuracy = ((qtData.accuracy * 180.0f) / 16384.0f)
			/ 3.141592653589793f; */
}
 8000a98:	3728      	adds	r7, #40	; 0x28
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	0801afec 	.word	0x0801afec
 8000aa4:	0801aff4 	.word	0x0801aff4
 8000aa8:	0801afd0 	.word	0x0801afd0
 8000aac:	00044b83 	.word	0x00044b83
 8000ab0:	3b9aca00 	.word	0x3b9aca00

08000ab4 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_>:

void BHYWrapper::BHYFrame::SerializeTo(uint8_t* dest, uint8_t* size) {
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b086      	sub	sp, #24
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	60f8      	str	r0, [r7, #12]
 8000abc:	60b9      	str	r1, [r7, #8]
 8000abe:	607a      	str	r2, [r7, #4]
	assert(dest);
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d105      	bne.n	8000ad2 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0x1e>
 8000ac6:	4b26      	ldr	r3, [pc, #152]	; (8000b60 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0xac>)
 8000ac8:	4a26      	ldr	r2, [pc, #152]	; (8000b64 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0xb0>)
 8000aca:	2191      	movs	r1, #145	; 0x91
 8000acc:	4826      	ldr	r0, [pc, #152]	; (8000b68 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0xb4>)
 8000ace:	f019 fa03 	bl	8019ed8 <__assert_func>
	assert(size);
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d105      	bne.n	8000ae4 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0x30>
 8000ad8:	4b24      	ldr	r3, [pc, #144]	; (8000b6c <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0xb8>)
 8000ada:	4a22      	ldr	r2, [pc, #136]	; (8000b64 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0xb0>)
 8000adc:	2192      	movs	r1, #146	; 0x92
 8000ade:	4822      	ldr	r0, [pc, #136]	; (8000b68 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0xb4>)
 8000ae0:	f019 f9fa 	bl	8019ed8 <__assert_func>

	uint8_t *ptr = dest;
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	617b      	str	r3, [r7, #20]

	*reinterpret_cast<int16_t*>(ptr) = Orientation.X;
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	801a      	strh	r2, [r3, #0]
	ptr += sizeof(int16_t);
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	3302      	adds	r3, #2
 8000af6:	617b      	str	r3, [r7, #20]

	*reinterpret_cast<int16_t*>(ptr) = Orientation.Y;
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8000afe:	697b      	ldr	r3, [r7, #20]
 8000b00:	801a      	strh	r2, [r3, #0]
	ptr += sizeof(int16_t);
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	3302      	adds	r3, #2
 8000b06:	617b      	str	r3, [r7, #20]

	*reinterpret_cast<int16_t*>(ptr) = Orientation.Z;
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8000b0e:	697b      	ldr	r3, [r7, #20]
 8000b10:	801a      	strh	r2, [r3, #0]
	ptr += sizeof(int16_t);
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	3302      	adds	r3, #2
 8000b16:	617b      	str	r3, [r7, #20]

	*reinterpret_cast<int16_t*>(ptr) = Orientation.W;
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	801a      	strh	r2, [r3, #0]
	ptr += sizeof(int16_t);
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	3302      	adds	r3, #2
 8000b26:	617b      	str	r3, [r7, #20]
	/*
	*reinterpret_cast<float*>(ptr) = Orientation.Accuracy;
	ptr += sizeof(float);
	*/

	*reinterpret_cast<uint32_t*>(ptr) = Timestamp.TimeS;
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	689a      	ldr	r2, [r3, #8]
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	601a      	str	r2, [r3, #0]
	ptr += sizeof(uint32_t);
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	3304      	adds	r3, #4
 8000b34:	617b      	str	r3, [r7, #20]

	*reinterpret_cast<uint32_t*>(ptr) = Timestamp.TimeNS;
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	68da      	ldr	r2, [r3, #12]
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	601a      	str	r2, [r3, #0]
	ptr += sizeof(uint32_t);
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	3304      	adds	r3, #4
 8000b42:	617b      	str	r3, [r7, #20]

	*reinterpret_cast<uint8_t*>(ptr) = SensorId;
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	7c1a      	ldrb	r2, [r3, #16]
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	701a      	strb	r2, [r3, #0]
	ptr += sizeof(uint8_t);
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	3301      	adds	r3, #1
 8000b50:	617b      	str	r3, [r7, #20]

	*size = Size;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	2211      	movs	r2, #17
 8000b56:	701a      	strb	r2, [r3, #0]
}
 8000b58:	bf00      	nop
 8000b5a:	3718      	adds	r7, #24
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	0801b040 	.word	0x0801b040
 8000b64:	0801b048 	.word	0x0801b048
 8000b68:	0801afd0 	.word	0x0801afd0
 8000b6c:	0801b084 	.word	0x0801b084

08000b70 <_ZNSt5arrayIhLj2048EE4dataEv>:
	return _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)
 	           : _AT_Type::_S_ref(_M_elems, 0);
      }

      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f000 f811 	bl	8000ba2 <_ZNSt14__array_traitsIhLj2048EE6_S_ptrERA2048_Kh>
 8000b80:	4603      	mov	r3, r0
 8000b82:	4618      	mov	r0, r3
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}

08000b8a <_ZNKSt5arrayIhLj2048EE4sizeEv>:
      size() const noexcept { return _Nm; }
 8000b8a:	b480      	push	{r7}
 8000b8c:	b083      	sub	sp, #12
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	6078      	str	r0, [r7, #4]
 8000b92:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b96:	4618      	mov	r0, r3
 8000b98:	370c      	adds	r7, #12
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr

08000ba2 <_ZNSt14__array_traitsIhLj2048EE6_S_ptrERA2048_Kh>:
      _S_ptr(const _Type& __t) noexcept
 8000ba2:	b480      	push	{r7}
 8000ba4:	b083      	sub	sp, #12
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	4618      	mov	r0, r3
 8000bae:	370c      	adds	r7, #12
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr

08000bb8 <_Z8spi_initP19__SPI_HandleTypeDef>:

  CDC_Transmit_FS( (uint8_t*)line, strlen(line) );
  }

void spi_init( SPI_HandleTypeDef *hspi)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  mSPI = hspi;
 8000bc0:	4a04      	ldr	r2, [pc, #16]	; (8000bd4 <_Z8spi_initP19__SPI_HandleTypeDef+0x1c>)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	6013      	str	r3, [r2, #0]
}
 8000bc6:	bf00      	nop
 8000bc8:	370c      	adds	r7, #12
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	24000204 	.word	0x24000204

08000bd8 <_Z11spiTransmitPht>:
//! \param data        Данные для передачи
//! \param size        Количество байт для передачи
//! \return            true - если операция выполнена успешно
//!
int8_t spiTransmit( uint8_t *data, uint16_t size )
  {
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	460b      	mov	r3, r1
 8000be2:	807b      	strh	r3, [r7, #2]
  //Инициировать передачу по DMA
  //HAL_I2C_Master_Transmit_DMA( mI2c, mDevAddress, data, size );
	HAL_SPI_Transmit(mSPI, data, size, 10);
 8000be4:	4b0a      	ldr	r3, [pc, #40]	; (8000c10 <_Z11spiTransmitPht+0x38>)
 8000be6:	6818      	ldr	r0, [r3, #0]
 8000be8:	887a      	ldrh	r2, [r7, #2]
 8000bea:	230a      	movs	r3, #10
 8000bec:	6879      	ldr	r1, [r7, #4]
 8000bee:	f010 ff6d 	bl	8011acc <HAL_SPI_Transmit>
  //Возвращает истину при успешном завершении операции
  return mSPI->ErrorCode == HAL_SPI_ERROR_NONE;
 8000bf2:	4b07      	ldr	r3, [pc, #28]	; (8000c10 <_Z11spiTransmitPht+0x38>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	bf0c      	ite	eq
 8000bfe:	2301      	moveq	r3, #1
 8000c00:	2300      	movne	r3, #0
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	b25b      	sxtb	r3, r3
  }
 8000c06:	4618      	mov	r0, r3
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	24000204 	.word	0x24000204

08000c14 <_Z9spiReceivPht>:
//! \param data      Указатель на буфер, в который размещаются принятые данные
//! \param size      Количество принимаемых байтов
//! \return            true - если операция выполнена успешно
//!
int8_t spiReceiv( uint8_t *data, uint16_t size )
  {
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
 8000c1c:	460b      	mov	r3, r1
 8000c1e:	807b      	strh	r3, [r7, #2]
  //Инициировать передачу по DMA
  //HAL_I2C_Master_Receive_DMA( mI2c, mDevAddress, data, size );
	HAL_SPI_Receive(mSPI, data, size,  10);
 8000c20:	4b0a      	ldr	r3, [pc, #40]	; (8000c4c <_Z9spiReceivPht+0x38>)
 8000c22:	6818      	ldr	r0, [r3, #0]
 8000c24:	887a      	ldrh	r2, [r7, #2]
 8000c26:	230a      	movs	r3, #10
 8000c28:	6879      	ldr	r1, [r7, #4]
 8000c2a:	f011 f941 	bl	8011eb0 <HAL_SPI_Receive>
  //HAL_Delay(10);
  //Ожидать завершения приема
  //Возвращает истину при успешном завершении операции
  return mSPI->ErrorCode == HAL_SPI_ERROR_NONE;
 8000c2e:	4b07      	ldr	r3, [pc, #28]	; (8000c4c <_Z9spiReceivPht+0x38>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	bf0c      	ite	eq
 8000c3a:	2301      	moveq	r3, #1
 8000c3c:	2300      	movne	r3, #0
 8000c3e:	b2db      	uxtb	r3, r3
 8000c40:	b25b      	sxtb	r3, r3
  }
 8000c42:	4618      	mov	r0, r3
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	24000204 	.word	0x24000204

08000c50 <_Z13bhy2_spi_readhPhmPv>:
//! \param length        Длина данных
//! \param intf_ptr      Указатель на интерфейс (не используем)
//! \return              Результат операции
//!
int8_t bhy2_spi_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr)
  {
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b084      	sub	sp, #16
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	60b9      	str	r1, [r7, #8]
 8000c58:	607a      	str	r2, [r7, #4]
 8000c5a:	603b      	str	r3, [r7, #0]
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	73fb      	strb	r3, [r7, #15]
  //I2cDmaTransfer *i2cDmaTransfer = (I2cDmaTransfer*)intf_ptr;
  //Выставляем CS в 0
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8000c60:	2200      	movs	r2, #0
 8000c62:	2110      	movs	r1, #16
 8000c64:	481c      	ldr	r0, [pc, #112]	; (8000cd8 <_Z13bhy2_spi_readhPhmPv+0x88>)
 8000c66:	f00c f929 	bl	800cebc <HAL_GPIO_WritePin>

  reg_addr = reg_addr | 0x80;//записываем в старший бит адреса 1 для чтения данных
 8000c6a:	7bfb      	ldrb	r3, [r7, #15]
 8000c6c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	73fb      	strb	r3, [r7, #15]

  //Записываем адрес регистра
  if( !spiTransmit( &reg_addr, 1 ) )
 8000c74:	f107 030f 	add.w	r3, r7, #15
 8000c78:	2101      	movs	r1, #1
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f7ff ffac 	bl	8000bd8 <_Z11spiTransmitPht>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	bf0c      	ite	eq
 8000c86:	2301      	moveq	r3, #1
 8000c88:	2300      	movne	r3, #0
 8000c8a:	b2db      	uxtb	r3, r3
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d002      	beq.n	8000c96 <_Z13bhy2_spi_readhPhmPv+0x46>
    return IMU_ERR_SPI;
 8000c90:	f06f 0301 	mvn.w	r3, #1
 8000c94:	e01b      	b.n	8000cce <_Z13bhy2_spi_readhPhmPv+0x7e>

  //Читаем содержимое регистра
  if( spiReceiv( reg_data, length ) )
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	b29b      	uxth	r3, r3
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	68b8      	ldr	r0, [r7, #8]
 8000c9e:	f7ff ffb9 	bl	8000c14 <_Z9spiReceivPht>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	bf14      	ite	ne
 8000ca8:	2301      	movne	r3, #1
 8000caa:	2300      	moveq	r3, #0
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d006      	beq.n	8000cc0 <_Z13bhy2_spi_readhPhmPv+0x70>
  {
	  //Выставляем CS в 1
	  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	2110      	movs	r1, #16
 8000cb6:	4808      	ldr	r0, [pc, #32]	; (8000cd8 <_Z13bhy2_spi_readhPhmPv+0x88>)
 8000cb8:	f00c f900 	bl	800cebc <HAL_GPIO_WritePin>
	  //Возвращаем успех операции
    return IMU_ERR_OK;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	e006      	b.n	8000cce <_Z13bhy2_spi_readhPhmPv+0x7e>
  }
  //Выставляем CS в 1
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	2110      	movs	r1, #16
 8000cc4:	4804      	ldr	r0, [pc, #16]	; (8000cd8 <_Z13bhy2_spi_readhPhmPv+0x88>)
 8000cc6:	f00c f8f9 	bl	800cebc <HAL_GPIO_WritePin>
  return IMU_ERR_SPI;
 8000cca:	f06f 0301 	mvn.w	r3, #1
  }
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3710      	adds	r7, #16
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	58020000 	.word	0x58020000

08000cdc <_Z14bhy2_spi_writehPKhmPv>:
//! \param length         Длина данных
//! \param intf_ptr       Указатель на интерфейс (не используем)
//! \return               Результат операции
//!
int8_t bhy2_spi_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, void *intf_ptr)
  {
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	60b9      	str	r1, [r7, #8]
 8000ce4:	607a      	str	r2, [r7, #4]
 8000ce6:	603b      	str	r3, [r7, #0]
 8000ce8:	4603      	mov	r3, r0
 8000cea:	73fb      	strb	r3, [r7, #15]
  //Промежуточный буфер нужен чтобы передать данные вместе с адресом регистра
  static uint8_t buffer[65];

  if( length > 64 )
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2b40      	cmp	r3, #64	; 0x40
 8000cf0:	d902      	bls.n	8000cf8 <_Z14bhy2_spi_writehPKhmPv+0x1c>
    return -4;
 8000cf2:	f06f 0303 	mvn.w	r3, #3
 8000cf6:	e029      	b.n	8000d4c <_Z14bhy2_spi_writehPKhmPv+0x70>

  //I2cDmaTransfer *i2cDmaTransfer = (I2cDmaTransfer*)intf_ptr;

  buffer[0] = reg_addr & 0x7F; //записываем в старший бит адреса 0 для записи данных
 8000cf8:	7bfb      	ldrb	r3, [r7, #15]
 8000cfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000cfe:	b2da      	uxtb	r2, r3
 8000d00:	4b14      	ldr	r3, [pc, #80]	; (8000d54 <_Z14bhy2_spi_writehPKhmPv+0x78>)
 8000d02:	701a      	strb	r2, [r3, #0]
  //Скопировать данные из исходного буфера в промежуточный, чтобы адрес регистра был частью буфера данных
  memcpy( buffer + 1, reg_data, length );
 8000d04:	4b14      	ldr	r3, [pc, #80]	; (8000d58 <_Z14bhy2_spi_writehPKhmPv+0x7c>)
 8000d06:	687a      	ldr	r2, [r7, #4]
 8000d08:	68b9      	ldr	r1, [r7, #8]
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f019 f94e 	bl	8019fac <memcpy>
  //Выставляем CS в 0
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8000d10:	2200      	movs	r2, #0
 8000d12:	2110      	movs	r1, #16
 8000d14:	4811      	ldr	r0, [pc, #68]	; (8000d5c <_Z14bhy2_spi_writehPKhmPv+0x80>)
 8000d16:	f00c f8d1 	bl	800cebc <HAL_GPIO_WritePin>
  if( spiTransmit( buffer, length + 1 ) )
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	b29b      	uxth	r3, r3
 8000d1e:	3301      	adds	r3, #1
 8000d20:	b29b      	uxth	r3, r3
 8000d22:	4619      	mov	r1, r3
 8000d24:	480b      	ldr	r0, [pc, #44]	; (8000d54 <_Z14bhy2_spi_writehPKhmPv+0x78>)
 8000d26:	f7ff ff57 	bl	8000bd8 <_Z11spiTransmitPht>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	bf14      	ite	ne
 8000d30:	2301      	movne	r3, #1
 8000d32:	2300      	moveq	r3, #0
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <_Z14bhy2_spi_writehPKhmPv+0x62>
  {
    return IMU_ERR_OK;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	e006      	b.n	8000d4c <_Z14bhy2_spi_writehPKhmPv+0x70>
	  //Выставляем CS в 1
	  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
  }
  //Выставляем CS в 1
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8000d3e:	2201      	movs	r2, #1
 8000d40:	2110      	movs	r1, #16
 8000d42:	4806      	ldr	r0, [pc, #24]	; (8000d5c <_Z14bhy2_spi_writehPKhmPv+0x80>)
 8000d44:	f00c f8ba 	bl	800cebc <HAL_GPIO_WritePin>
  return IMU_ERR_I2C;
 8000d48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3710      	adds	r7, #16
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	24000208 	.word	0x24000208
 8000d58:	24000209 	.word	0x24000209
 8000d5c:	58020000 	.word	0x58020000

08000d60 <_Z13bhy2_delay_usmPv>:
//! \brief bhy2_delay_us Сформировать задержку на заданное количество мкс
//! \param us            Количество мкс, на которое нужно сформировать задержку
//! \param private_data  Неиспользуемый указатель на устройство
//!
void bhy2_delay_us(uint32_t us, void *private_data)
  {
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	6039      	str	r1, [r7, #0]
  //Чтобы компилятор не ругался на неиспользуемую переменную
  (void)private_data;
  //Если задержка превышает 1мс, то задерживаем средствами ОС
  if( us >= 1000 )
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000d70:	d308      	bcc.n	8000d84 <_Z13bhy2_delay_usmPv+0x24>
    HAL_Delay( us / 1000 );
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4a0b      	ldr	r2, [pc, #44]	; (8000da4 <_Z13bhy2_delay_usmPv+0x44>)
 8000d76:	fba2 2303 	umull	r2, r3, r2, r3
 8000d7a:	099b      	lsrs	r3, r3, #6
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f009 f865 	bl	8009e4c <HAL_Delay>
    //Задержка менее 1мс, делаем тупым счетом
    while( us-- ) {
      __NOP();
      }
    }
  }
 8000d82:	e00b      	b.n	8000d9c <_Z13bhy2_delay_usmPv+0x3c>
    while( us-- ) {
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	1e5a      	subs	r2, r3, #1
 8000d88:	607a      	str	r2, [r7, #4]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	bf14      	ite	ne
 8000d8e:	2301      	movne	r3, #1
 8000d90:	2300      	moveq	r3, #0
 8000d92:	b2db      	uxtb	r3, r3
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <_Z13bhy2_delay_usmPv+0x3c>
      __NOP();
 8000d98:	bf00      	nop
    while( us-- ) {
 8000d9a:	e7f3      	b.n	8000d84 <_Z13bhy2_delay_usmPv+0x24>
  }
 8000d9c:	bf00      	nop
 8000d9e:	3708      	adds	r7, #8
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	10624dd3 	.word	0x10624dd3

08000da8 <_ZSt17__size_to_integerj>:

  // Used by fill_n, generate_n, etc. to convert _Size to an integral type:
  inline _GLIBCXX_CONSTEXPR int
  __size_to_integer(int __n) { return __n; }
  inline _GLIBCXX_CONSTEXPR unsigned
  __size_to_integer(unsigned __n) { return __n; }
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	4618      	mov	r0, r3
 8000db4:	370c      	adds	r7, #12
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr

08000dbe <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8000dbe:	b480      	push	{r7}
 8000dc0:	b083      	sub	sp, #12
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	6078      	str	r0, [r7, #4]
 8000dc6:	6039      	str	r1, [r7, #0]
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	4618      	mov	r0, r3
 8000dcc:	370c      	adds	r7, #12
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr

08000dd6 <_ZSt16__deque_buf_sizej>:
#define _GLIBCXX_DEQUE_BUF_SIZE 512
#endif

  _GLIBCXX_CONSTEXPR inline size_t
  __deque_buf_size(size_t __size)
  { return (__size < _GLIBCXX_DEQUE_BUF_SIZE
 8000dd6:	b480      	push	{r7}
 8000dd8:	b083      	sub	sp, #12
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	6078      	str	r0, [r7, #4]
	    ? size_t(_GLIBCXX_DEQUE_BUF_SIZE / __size) : size_t(1)); }
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000de4:	d205      	bcs.n	8000df2 <_ZSt16__deque_buf_sizej+0x1c>
 8000de6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	fbb2 f3f3 	udiv	r3, r2, r3
 8000df0:	e000      	b.n	8000df4 <_ZSt16__deque_buf_sizej+0x1e>
 8000df2:	2301      	movs	r3, #1
 8000df4:	4618      	mov	r0, r3
 8000df6:	370c      	adds	r7, #12
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr

08000e00 <_ZNSt5dequeI7RequestSaIS0_EEC1Ev>:

      /**
       *  @brief  Creates a %deque with no elements.
       */
#if __cplusplus >= 201103L
      deque() = default;
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f001 f836 	bl	8001e7c <_ZNSt11_Deque_baseI7RequestSaIS0_EEC1Ev>
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	4618      	mov	r0, r3
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEED1Ev>:
   *  Members not found in @a normal containers are @c container_type,
   *  which is a typedef for the second Sequence parameter, and @c push and
   *  @c pop, which are standard %queue/FIFO operations.
  */
  template<typename _Tp, typename _Sequence = deque<_Tp> >
    class queue
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b082      	sub	sp, #8
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	6078      	str	r0, [r7, #4]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4618      	mov	r0, r3
 8000e26:	f001 f8a2 	bl	8001f6e <_ZNSt5dequeI8ResponceSaIS0_EED1Ev>
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	3708      	adds	r7, #8
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}

08000e34 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
 8000e3c:	6878      	ldr	r0, [r7, #4]
 8000e3e:	f001 f8cb 	bl	8001fd8 <_ZNSaIhED1Ev>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4618      	mov	r0, r3
 8000e46:	3708      	adds	r7, #8
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}

08000e4c <_ZNSt12_Vector_baseIhSaIhEEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	4618      	mov	r0, r3
 8000e58:	f001 f8ae 	bl	8001fb8 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1Ev>
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3708      	adds	r7, #8
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}

08000e66 <_ZNSt6vectorIhSaIhEEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8000e66:	b580      	push	{r7, lr}
 8000e68:	b082      	sub	sp, #8
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	6078      	str	r0, [r7, #4]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff ffeb 	bl	8000e4c <_ZNSt12_Vector_baseIhSaIhEEC1Ev>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3708      	adds	r7, #8
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <_ZN11QueueSenderC1EP20__UART_HandleTypeDefj>:

	size_t TimeoutS;

	QueueSender() = default;

	QueueSender(UART_HandleTypeDef *uart, size_t timeoutS) :
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	60f8      	str	r0, [r7, #12]
 8000e88:	60b9      	str	r1, [r7, #8]
 8000e8a:	607a      	str	r2, [r7, #4]
			UartHandle { uart }, TimeoutS { timeoutS } {
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f7ff ffb6 	bl	8000e00 <_ZNSt5dequeI7RequestSaIS0_EEC1Ev>
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	3328      	adds	r3, #40	; 0x28
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f001 f854 	bl	8001f46 <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEEC1IS3_vEEv>
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	3354      	adds	r3, #84	; 0x54
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f7ff ffdb 	bl	8000e66 <_ZNSt6vectorIhSaIhEEC1Ev>
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	68ba      	ldr	r2, [r7, #8]
 8000eb4:	665a      	str	r2, [r3, #100]	; 0x64
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	687a      	ldr	r2, [r7, #4]
 8000eba:	669a      	str	r2, [r3, #104]	; 0x68
		assert(uart != NULL);
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d105      	bne.n	8000ece <_ZN11QueueSenderC1EP20__UART_HandleTypeDefj+0x4e>
 8000ec2:	4b05      	ldr	r3, [pc, #20]	; (8000ed8 <_ZN11QueueSenderC1EP20__UART_HandleTypeDefj+0x58>)
 8000ec4:	4a05      	ldr	r2, [pc, #20]	; (8000edc <_ZN11QueueSenderC1EP20__UART_HandleTypeDefj+0x5c>)
 8000ec6:	214a      	movs	r1, #74	; 0x4a
 8000ec8:	4805      	ldr	r0, [pc, #20]	; (8000ee0 <_ZN11QueueSenderC1EP20__UART_HandleTypeDefj+0x60>)
 8000eca:	f019 f805 	bl	8019ed8 <__assert_func>
	}
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3710      	adds	r7, #16
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	0801b08c 	.word	0x0801b08c
 8000edc:	0801b09c 	.word	0x0801b09c
 8000ee0:	0801b0d4 	.word	0x0801b0d4

08000ee4 <_ZN11QueueSender14GetMessageModeERK7Request>:

	MessageModeT GetMessageMode(const Request &request) {
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]
		return request.MetaInfo;
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	7c1b      	ldrb	r3, [r3, #16]
	}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	370c      	adds	r7, #12
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr

08000efe <_ZN11QueueSender14SetMessageModeER8Responceh>:

	void SetMessageMode(Responce &responce, MessageModeT mode) {
 8000efe:	b480      	push	{r7}
 8000f00:	b085      	sub	sp, #20
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	60f8      	str	r0, [r7, #12]
 8000f06:	60b9      	str	r1, [r7, #8]
 8000f08:	4613      	mov	r3, r2
 8000f0a:	71fb      	strb	r3, [r7, #7]
		responce.MetaInfo = mode;
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	79fa      	ldrb	r2, [r7, #7]
 8000f10:	735a      	strb	r2, [r3, #13]
	}
 8000f12:	bf00      	nop
 8000f14:	3714      	adds	r7, #20
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr

08000f1e <_ZN11QueueSender10AddRequestEO7Request>:

	void AddRequest(Request &&request) {
 8000f1e:	b590      	push	{r4, r7, lr}
 8000f20:	b083      	sub	sp, #12
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
 8000f26:	6039      	str	r1, [r7, #0]
		switch (GetMessageMode(request)) {
 8000f28:	6839      	ldr	r1, [r7, #0]
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f7ff ffda 	bl	8000ee4 <_ZN11QueueSender14GetMessageModeERK7Request>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b02      	cmp	r3, #2
 8000f34:	dc02      	bgt.n	8000f3c <_ZN11QueueSender10AddRequestEO7Request+0x1e>
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	da03      	bge.n	8000f42 <_ZN11QueueSender10AddRequestEO7Request+0x24>
			break;
		case MessageMode::Priority:
			Requests.emplace_front(std::move(request));
			break;
		}
	}
 8000f3a:	e016      	b.n	8000f6a <_ZN11QueueSender10AddRequestEO7Request+0x4c>
		switch (GetMessageMode(request)) {
 8000f3c:	2b03      	cmp	r3, #3
 8000f3e:	d00a      	beq.n	8000f56 <_ZN11QueueSender10AddRequestEO7Request+0x38>
	}
 8000f40:	e013      	b.n	8000f6a <_ZN11QueueSender10AddRequestEO7Request+0x4c>
			Requests.emplace_back(std::move(request));
 8000f42:	687c      	ldr	r4, [r7, #4]
 8000f44:	6838      	ldr	r0, [r7, #0]
 8000f46:	f001 f886 	bl	8002056 <_ZSt4moveIR7RequestEONSt16remove_referenceIT_E4typeEOS3_>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4620      	mov	r0, r4
 8000f50:	f001 f88c 	bl	800206c <_ZNSt5dequeI7RequestSaIS0_EE12emplace_backIJS0_EEEvDpOT_>
			break;
 8000f54:	e009      	b.n	8000f6a <_ZN11QueueSender10AddRequestEO7Request+0x4c>
			Requests.emplace_front(std::move(request));
 8000f56:	687c      	ldr	r4, [r7, #4]
 8000f58:	6838      	ldr	r0, [r7, #0]
 8000f5a:	f001 f87c 	bl	8002056 <_ZSt4moveIR7RequestEONSt16remove_referenceIT_E4typeEOS3_>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	4619      	mov	r1, r3
 8000f62:	4620      	mov	r0, r4
 8000f64:	f001 f8ad 	bl	80020c2 <_ZNSt5dequeI7RequestSaIS0_EE13emplace_frontIJS0_EEEvDpOT_>
			break;
 8000f68:	bf00      	nop
	}
 8000f6a:	bf00      	nop
 8000f6c:	370c      	adds	r7, #12
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd90      	pop	{r4, r7, pc}

08000f72 <_ZNK11QueueSender11HasResponceEv>:

	bool HasResponce() const {
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b082      	sub	sp, #8
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	6078      	str	r0, [r7, #4]
		return !Responces.empty();
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	3328      	adds	r3, #40	; 0x28
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f001 f8cb 	bl	800211a <_ZNKSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE5emptyEv>
 8000f84:	4603      	mov	r3, r0
 8000f86:	f083 0301 	eor.w	r3, r3, #1
 8000f8a:	b2db      	uxtb	r3, r3
	}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <_ZNSt12_Vector_baseIhSaIhEEC1EOS1_>:
      _Vector_base(_Vector_base&&) = default;
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	6039      	str	r1, [r7, #0]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	683a      	ldr	r2, [r7, #0]
 8000fa2:	4611      	mov	r1, r2
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f001 f8dd 	bl	8002164 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1EOS2_>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4618      	mov	r0, r3
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <_ZNSt6vectorIhSaIhEEC1EOS1_>:
       *  The newly-created %vector contains the exact contents of the
       *  moved instance.
       *  The contents of the moved instance are a valid, but unspecified
       *  %vector.
       */
      vector(vector&&) noexcept = default;
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	6039      	str	r1, [r7, #0]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	683a      	ldr	r2, [r7, #0]
 8000fc2:	4611      	mov	r1, r2
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff ffe5 	bl	8000f94 <_ZNSt12_Vector_baseIhSaIhEEC1EOS1_>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <_ZN8ResponceC1EOS_>:
struct Responce {
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	6039      	str	r1, [r7, #0]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	683a      	ldr	r2, [r7, #0]
 8000fe2:	4611      	mov	r1, r2
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff ffe5 	bl	8000fb4 <_ZNSt6vectorIhSaIhEEC1EOS1_>
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	7b1a      	ldrb	r2, [r3, #12]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	731a      	strb	r2, [r3, #12]
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	7b5a      	ldrb	r2, [r3, #13]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	735a      	strb	r2, [r3, #13]
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	7b9a      	ldrb	r2, [r3, #14]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	739a      	strb	r2, [r3, #14]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4618      	mov	r0, r3
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}

0800100c <_ZN8ResponceD1Ev>:
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	4618      	mov	r0, r3
 8001018:	f001 f802 	bl	8002020 <_ZNSt6vectorIhSaIhEED1Ev>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	4618      	mov	r0, r3
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
	...

08001028 <_ZN11QueueSender11GetResponceEv>:

	Responce GetResponce() {
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	6039      	str	r1, [r7, #0]
		assert(HasResponce());
 8001032:	6838      	ldr	r0, [r7, #0]
 8001034:	f7ff ff9d 	bl	8000f72 <_ZNK11QueueSender11HasResponceEv>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d105      	bne.n	800104a <_ZN11QueueSender11GetResponceEv+0x22>
 800103e:	4b0f      	ldr	r3, [pc, #60]	; (800107c <_ZN11QueueSender11GetResponceEv+0x54>)
 8001040:	4a0f      	ldr	r2, [pc, #60]	; (8001080 <_ZN11QueueSender11GetResponceEv+0x58>)
 8001042:	2167      	movs	r1, #103	; 0x67
 8001044:	480f      	ldr	r0, [pc, #60]	; (8001084 <_ZN11QueueSender11GetResponceEv+0x5c>)
 8001046:	f018 ff47 	bl	8019ed8 <__assert_func>
		auto responce = std::move(Responces.front());
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	3328      	adds	r3, #40	; 0x28
 800104e:	4618      	mov	r0, r3
 8001050:	f001 f870 	bl	8002134 <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE5frontEv>
 8001054:	4603      	mov	r3, r0
 8001056:	4618      	mov	r0, r3
 8001058:	f001 f879 	bl	800214e <_ZSt4moveIR8ResponceEONSt16remove_referenceIT_E4typeEOS3_>
 800105c:	4603      	mov	r3, r0
 800105e:	4619      	mov	r1, r3
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f7ff ffb7 	bl	8000fd4 <_ZN8ResponceC1EOS_>
		Responces.pop();
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	3328      	adds	r3, #40	; 0x28
 800106a:	4618      	mov	r0, r3
 800106c:	f001 f895 	bl	800219a <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE3popEv>
		return responce;
 8001070:	bf00      	nop
	}
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	0801b0f0 	.word	0x0801b0f0
 8001080:	0801b100 	.word	0x0801b100
 8001084:	0801b0d4 	.word	0x0801b0d4

08001088 <_ZN11QueueSender15ProcessRequestsEv>:

	void ProcessRequests() {
 8001088:	b5b0      	push	{r4, r5, r7, lr}
 800108a:	b08c      	sub	sp, #48	; 0x30
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
		if (!Requests.empty() && !WaitResponce) {
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	4618      	mov	r0, r3
 8001094:	f001 f88d 	bl	80021b2 <_ZNKSt5dequeI7RequestSaIS0_EE5emptyEv>
 8001098:	4603      	mov	r3, r0
 800109a:	f083 0301 	eor.w	r3, r3, #1
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d009      	beq.n	80010b8 <_ZN11QueueSender15ProcessRequestsEv+0x30>
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80010aa:	f083 0301 	eor.w	r3, r3, #1
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <_ZN11QueueSender15ProcessRequestsEv+0x30>
 80010b4:	2301      	movs	r3, #1
 80010b6:	e000      	b.n	80010ba <_ZN11QueueSender15ProcessRequestsEv+0x32>
 80010b8:	2300      	movs	r3, #0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d078      	beq.n	80011b0 <_ZN11QueueSender15ProcessRequestsEv+0x128>
			auto &request = Requests.front();
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4618      	mov	r0, r3
 80010c2:	f001 f888 	bl	80021d6 <_ZNSt5dequeI7RequestSaIS0_EE5frontEv>
 80010c6:	62f8      	str	r0, [r7, #44]	; 0x2c
			auto &data = request.Data;
 80010c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010ca:	62bb      	str	r3, [r7, #40]	; 0x28

			if (GetMessageMode(request) == MessageMode::Notify) {
 80010cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f7ff ff08 	bl	8000ee4 <_ZN11QueueSender14GetMessageModeERK7Request>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b02      	cmp	r3, #2
 80010d8:	bf0c      	ite	eq
 80010da:	2301      	moveq	r3, #1
 80010dc:	2300      	movne	r3, #0
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d026      	beq.n	8001132 <_ZN11QueueSender15ProcessRequestsEv+0xaa>
				Responces.emplace(CreateResponce( { }, MessageMode::Notify));
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f103 0428 	add.w	r4, r3, #40	; 0x28
 80010ea:	2300      	movs	r3, #0
 80010ec:	61fb      	str	r3, [r7, #28]
 80010ee:	2300      	movs	r3, #0
 80010f0:	623b      	str	r3, [r7, #32]
 80010f2:	2300      	movs	r3, #0
 80010f4:	627b      	str	r3, [r7, #36]	; 0x24
 80010f6:	f107 031c 	add.w	r3, r7, #28
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff feb3 	bl	8000e66 <_ZNSt6vectorIhSaIhEEC1Ev>
 8001100:	f107 000c 	add.w	r0, r7, #12
 8001104:	f107 021c 	add.w	r2, r7, #28
 8001108:	2302      	movs	r3, #2
 800110a:	6879      	ldr	r1, [r7, #4]
 800110c:	f000 f860 	bl	80011d0 <_ZN11QueueSender14CreateResponceERKSt6vectorIhSaIhEEh>
 8001110:	f107 030c 	add.w	r3, r7, #12
 8001114:	4619      	mov	r1, r3
 8001116:	4620      	mov	r0, r4
 8001118:	f001 f871 	bl	80021fe <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE7emplaceIJS0_EEEvDpOT_>
 800111c:	f107 030c 	add.w	r3, r7, #12
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff ff73 	bl	800100c <_ZN8ResponceD1Ev>
 8001126:	f107 031c 	add.w	r3, r7, #28
 800112a:	4618      	mov	r0, r3
 800112c:	f000 ff78 	bl	8002020 <_ZNSt6vectorIhSaIhEED1Ev>
				return;
 8001130:	e03e      	b.n	80011b0 <_ZN11QueueSender15ProcessRequestsEv+0x128>
			}

			CurrentResponceBuffer.resize(request.ResponceSize);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8001138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	4619      	mov	r1, r3
 800113e:	4610      	mov	r0, r2
 8001140:	f001 f86f 	bl	8002222 <_ZNSt6vectorIhSaIhEE6resizeEj>
			CurrentRequestMode = GetMessageMode(request);
 8001144:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f7ff fecc 	bl	8000ee4 <_ZN11QueueSender14GetMessageModeERK7Request>
 800114c:	4603      	mov	r3, r0
 800114e:	461a      	mov	r2, r3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
			WaitResponce = true;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2201      	movs	r2, #1
 800115a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			HAL_UART_Receive_IT(UartHandle, CurrentResponceBuffer.data(),
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6e5c      	ldr	r4, [r3, #100]	; 0x64
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	3354      	adds	r3, #84	; 0x54
 8001166:	4618      	mov	r0, r3
 8001168:	f001 f88f 	bl	800228a <_ZNSt6vectorIhSaIhEE4dataEv>
 800116c:	4605      	mov	r5, r0
					CurrentResponceBuffer.size());
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	3354      	adds	r3, #84	; 0x54
 8001172:	4618      	mov	r0, r3
 8001174:	f001 f898 	bl	80022a8 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8001178:	4603      	mov	r3, r0
			HAL_UART_Receive_IT(UartHandle, CurrentResponceBuffer.data(),
 800117a:	b29b      	uxth	r3, r3
 800117c:	461a      	mov	r2, r3
 800117e:	4629      	mov	r1, r5
 8001180:	4620      	mov	r0, r4
 8001182:	f012 fcff 	bl	8013b84 <HAL_UART_Receive_IT>
			HAL_UART_Transmit(UartHandle, data.data(), data.size(), TimeoutS);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6e5c      	ldr	r4, [r3, #100]	; 0x64
 800118a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800118c:	f001 f87d 	bl	800228a <_ZNSt6vectorIhSaIhEE4dataEv>
 8001190:	4605      	mov	r5, r0
 8001192:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001194:	f001 f888 	bl	80022a8 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8001198:	4603      	mov	r3, r0
 800119a:	b29a      	uxth	r2, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80011a0:	4629      	mov	r1, r5
 80011a2:	4620      	mov	r0, r4
 80011a4:	f012 fbb0 	bl	8013908 <HAL_UART_Transmit>

			Requests.pop_front();
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	4618      	mov	r0, r3
 80011ac:	f001 f88b 	bl	80022c6 <_ZNSt5dequeI7RequestSaIS0_EE9pop_frontEv>
		}
	}
 80011b0:	3730      	adds	r7, #48	; 0x30
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bdb0      	pop	{r4, r5, r7, pc}

080011b6 <_ZN8ResponceC1Ev>:
struct Responce {
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b082      	sub	sp, #8
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	6078      	str	r0, [r7, #4]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff fe50 	bl	8000e66 <_ZNSt6vectorIhSaIhEEC1Ev>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4618      	mov	r0, r3
 80011ca:	3708      	adds	r7, #8
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <_ZN11QueueSender14CreateResponceERKSt6vectorIhSaIhEEh>:

	Responce CreateResponce(const std::vector<uint8_t> &data,
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	60f8      	str	r0, [r7, #12]
 80011d8:	60b9      	str	r1, [r7, #8]
 80011da:	607a      	str	r2, [r7, #4]
 80011dc:	70fb      	strb	r3, [r7, #3]
			MessageModeT messageMode) {
		Responce responce;
 80011de:	68f8      	ldr	r0, [r7, #12]
 80011e0:	f7ff ffe9 	bl	80011b6 <_ZN8ResponceC1Ev>
		responce.Data = data;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	6879      	ldr	r1, [r7, #4]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f001 f898 	bl	800231e <_ZNSt6vectorIhSaIhEEaSERKS1_>
		responce.PeripheryID = Periphery::Body;
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	2200      	movs	r2, #0
 80011f2:	731a      	strb	r2, [r3, #12]
		responce.Error = 0;
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	2200      	movs	r2, #0
 80011f8:	739a      	strb	r2, [r3, #14]
		SetMessageMode(responce, messageMode);
 80011fa:	78fb      	ldrb	r3, [r7, #3]
 80011fc:	461a      	mov	r2, r3
 80011fe:	68f9      	ldr	r1, [r7, #12]
 8001200:	68b8      	ldr	r0, [r7, #8]
 8001202:	f7ff fe7c 	bl	8000efe <_ZN11QueueSender14SetMessageModeER8Responceh>
		return responce;
 8001206:	bf00      	nop
	}
 8001208:	68f8      	ldr	r0, [r7, #12]
 800120a:	3710      	adds	r7, #16
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}

08001210 <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEED1Ev>:
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	4618      	mov	r0, r3
 800121c:	f000 fe61 	bl	8001ee2 <_ZNSt5dequeI7RequestSaIS0_EED1Ev>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	4618      	mov	r0, r3
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}

0800122a <_ZN7RequestC1Ev>:
struct Request {
 800122a:	b580      	push	{r7, lr}
 800122c:	b082      	sub	sp, #8
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff fe16 	bl	8000e66 <_ZNSt6vectorIhSaIhEEC1Ev>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4618      	mov	r0, r3
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}

08001244 <_ZN7RequestD1Ev>:
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	4618      	mov	r0, r3
 8001250:	f000 fee6 	bl	8002020 <_ZNSt6vectorIhSaIhEED1Ev>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	4618      	mov	r0, r3
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
	...

08001260 <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj>:

	bool TransmitComplete = true;

	HeadInterface() = default;

	HeadInterface(UART_HandleTypeDef *uart, size_t timeoutS) :
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	60f8      	str	r0, [r7, #12]
 8001268:	60b9      	str	r1, [r7, #8]
 800126a:	607a      	str	r2, [r7, #4]
			UartHandle { uart }, TimeoutS { timeoutS } {
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	4618      	mov	r0, r3
 8001270:	f001 f944 	bl	80024fc <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEEC1IS3_vEEv>
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	3334      	adds	r3, #52	; 0x34
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff ffd6 	bl	800122a <_ZN7RequestC1Ev>
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	3348      	adds	r3, #72	; 0x48
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff fdef 	bl	8000e66 <_ZNSt6vectorIhSaIhEEC1Ev>
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	68ba      	ldr	r2, [r7, #8]
 800128c:	655a      	str	r2, [r3, #84]	; 0x54
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	687a      	ldr	r2, [r7, #4]
 8001292:	659a      	str	r2, [r3, #88]	; 0x58
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	2201      	movs	r2, #1
 8001298:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
		assert(uart != NULL);
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d105      	bne.n	80012ae <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj+0x4e>
 80012a2:	4b05      	ldr	r3, [pc, #20]	; (80012b8 <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj+0x58>)
 80012a4:	4a05      	ldr	r2, [pc, #20]	; (80012bc <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj+0x5c>)
 80012a6:	21b3      	movs	r1, #179	; 0xb3
 80012a8:	4805      	ldr	r0, [pc, #20]	; (80012c0 <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj+0x60>)
 80012aa:	f018 fe15 	bl	8019ed8 <__assert_func>
	}
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	4618      	mov	r0, r3
 80012b2:	3710      	adds	r7, #16
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	0801b08c 	.word	0x0801b08c
 80012bc:	0801b124 	.word	0x0801b124
 80012c0:	0801b0d4 	.word	0x0801b0d4

080012c4 <_ZN13HeadInterface14ResetReadStateEv>:

	void ResetReadState() {
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
		CurrentState = ReadState::SOM1;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2200      	movs	r2, #0
 80012d0:	631a      	str	r2, [r3, #48]	; 0x30
		HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	3328      	adds	r3, #40	; 0x28
 80012da:	2201      	movs	r2, #1
 80012dc:	4619      	mov	r1, r3
 80012de:	f012 fc51 	bl	8013b84 <HAL_UART_Receive_IT>
	}
 80012e2:	bf00      	nop
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}

080012ea <_ZNK13HeadInterface10HasRequestEv>:

	bool HasRequest() const {
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b082      	sub	sp, #8
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
		return !Requests.empty();
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4618      	mov	r0, r3
 80012f6:	f001 f915 	bl	8002524 <_ZNKSt5queueI7RequestSt5dequeIS0_SaIS0_EEE5emptyEv>
 80012fa:	4603      	mov	r3, r0
 80012fc:	f083 0301 	eor.w	r3, r3, #1
 8001300:	b2db      	uxtb	r3, r3
	}
 8001302:	4618      	mov	r0, r3
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}

0800130a <_ZN13HeadInterface4SendERK8Responce>:

	void Send(const Responce &responce) {
 800130a:	b5b0      	push	{r4, r5, r7, lr}
 800130c:	b084      	sub	sp, #16
 800130e:	af00      	add	r7, sp, #0
 8001310:	6078      	str	r0, [r7, #4]
 8001312:	6039      	str	r1, [r7, #0]

		while (!TransmitComplete) {
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800131a:	2b00      	cmp	r3, #0
 800131c:	d100      	bne.n	8001320 <_ZN13HeadInterface4SendERK8Responce+0x16>
 800131e:	e7f9      	b.n	8001314 <_ZN13HeadInterface4SendERK8Responce+0xa>
		}

		size_t size = responce.Data.size() + 3 + 3;
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	4618      	mov	r0, r3
 8001324:	f000 ffc0 	bl	80022a8 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8001328:	4603      	mov	r3, r0
 800132a:	3306      	adds	r3, #6
 800132c:	60fb      	str	r3, [r7, #12]
		CurrentResponceBuffer.resize(size);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	3348      	adds	r3, #72	; 0x48
 8001332:	68f9      	ldr	r1, [r7, #12]
 8001334:	4618      	mov	r0, r3
 8001336:	f000 ff74 	bl	8002222 <_ZNSt6vectorIhSaIhEE6resizeEj>

		uint8_t *ptr = CurrentResponceBuffer.data();
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	3348      	adds	r3, #72	; 0x48
 800133e:	4618      	mov	r0, r3
 8001340:	f000 ffa3 	bl	800228a <_ZNSt6vectorIhSaIhEE4dataEv>
 8001344:	60b8      	str	r0, [r7, #8]

		*(ptr++) = SOM1Val;
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	1c5a      	adds	r2, r3, #1
 800134a:	60ba      	str	r2, [r7, #8]
 800134c:	22ff      	movs	r2, #255	; 0xff
 800134e:	701a      	strb	r2, [r3, #0]
		*(ptr++) = SOM2Val;
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	1c5a      	adds	r2, r3, #1
 8001354:	60ba      	str	r2, [r7, #8]
 8001356:	22aa      	movs	r2, #170	; 0xaa
 8001358:	701a      	strb	r2, [r3, #0]
		*(ptr++) = responce.PeripheryID;
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	1c5a      	adds	r2, r3, #1
 800135e:	60ba      	str	r2, [r7, #8]
 8001360:	683a      	ldr	r2, [r7, #0]
 8001362:	7b12      	ldrb	r2, [r2, #12]
 8001364:	701a      	strb	r2, [r3, #0]
		*(ptr++) = responce.MetaInfo;
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	1c5a      	adds	r2, r3, #1
 800136a:	60ba      	str	r2, [r7, #8]
 800136c:	683a      	ldr	r2, [r7, #0]
 800136e:	7b52      	ldrb	r2, [r2, #13]
 8001370:	701a      	strb	r2, [r3, #0]
		*(ptr++) = responce.Error;
 8001372:	68bb      	ldr	r3, [r7, #8]
 8001374:	1c5a      	adds	r2, r3, #1
 8001376:	60ba      	str	r2, [r7, #8]
 8001378:	683a      	ldr	r2, [r7, #0]
 800137a:	7b92      	ldrb	r2, [r2, #14]
 800137c:	701a      	strb	r2, [r3, #0]

		memcpy(ptr, responce.Data.data(), responce.Data.size());
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	4618      	mov	r0, r3
 8001382:	f001 f8dc 	bl	800253e <_ZNKSt6vectorIhSaIhEE4dataEv>
 8001386:	4604      	mov	r4, r0
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	4618      	mov	r0, r3
 800138c:	f000 ff8c 	bl	80022a8 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8001390:	4603      	mov	r3, r0
 8001392:	461a      	mov	r2, r3
 8001394:	4621      	mov	r1, r4
 8001396:	68b8      	ldr	r0, [r7, #8]
 8001398:	f018 fe08 	bl	8019fac <memcpy>

		ptr += responce.Data.size();
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	4618      	mov	r0, r3
 80013a0:	f000 ff82 	bl	80022a8 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 80013a4:	4602      	mov	r2, r0
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	4413      	add	r3, r2
 80013aa:	60bb      	str	r3, [r7, #8]

		*ptr = SOM3Val;
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	22af      	movs	r2, #175	; 0xaf
 80013b0:	701a      	strb	r2, [r3, #0]

		//ResetReadState();

		TransmitComplete = false;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2200      	movs	r2, #0
 80013b6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

		HAL_UART_Transmit_IT(UartHandle, CurrentResponceBuffer.data(),
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6d5c      	ldr	r4, [r3, #84]	; 0x54
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	3348      	adds	r3, #72	; 0x48
 80013c2:	4618      	mov	r0, r3
 80013c4:	f000 ff61 	bl	800228a <_ZNSt6vectorIhSaIhEE4dataEv>
 80013c8:	4605      	mov	r5, r0
				CurrentResponceBuffer.size());
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	3348      	adds	r3, #72	; 0x48
 80013ce:	4618      	mov	r0, r3
 80013d0:	f000 ff6a 	bl	80022a8 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 80013d4:	4603      	mov	r3, r0
		HAL_UART_Transmit_IT(UartHandle, CurrentResponceBuffer.data(),
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	461a      	mov	r2, r3
 80013da:	4629      	mov	r1, r5
 80013dc:	4620      	mov	r0, r4
 80013de:	f012 fb29 	bl	8013a34 <HAL_UART_Transmit_IT>
	}
 80013e2:	bf00      	nop
 80013e4:	3710      	adds	r7, #16
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bdb0      	pop	{r4, r5, r7, pc}

080013ea <_ZN7RequestC1EOS_>:
struct Request {
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b082      	sub	sp, #8
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
 80013f2:	6039      	str	r1, [r7, #0]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	683a      	ldr	r2, [r7, #0]
 80013f8:	4611      	mov	r1, r2
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff fdda 	bl	8000fb4 <_ZNSt6vectorIhSaIhEEC1EOS1_>
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	68da      	ldr	r2, [r3, #12]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	60da      	str	r2, [r3, #12]
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	7c1a      	ldrb	r2, [r3, #16]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	741a      	strb	r2, [r3, #16]
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	7c5a      	ldrb	r2, [r3, #17]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	745a      	strb	r2, [r3, #17]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	4618      	mov	r0, r3
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
	...

08001424 <_ZN13HeadInterface10GetRequestEv>:

	Request GetRequest() {
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	6039      	str	r1, [r7, #0]
		assert(HasRequest());
 800142e:	6838      	ldr	r0, [r7, #0]
 8001430:	f7ff ff5b 	bl	80012ea <_ZNK13HeadInterface10HasRequestEv>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d105      	bne.n	8001446 <_ZN13HeadInterface10GetRequestEv+0x22>
 800143a:	4b0e      	ldr	r3, [pc, #56]	; (8001474 <_ZN13HeadInterface10GetRequestEv+0x50>)
 800143c:	4a0e      	ldr	r2, [pc, #56]	; (8001478 <_ZN13HeadInterface10GetRequestEv+0x54>)
 800143e:	21de      	movs	r1, #222	; 0xde
 8001440:	480e      	ldr	r0, [pc, #56]	; (800147c <_ZN13HeadInterface10GetRequestEv+0x58>)
 8001442:	f018 fd49 	bl	8019ed8 <__assert_func>
		auto request = std::move(Requests.front());
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	4618      	mov	r0, r3
 800144a:	f001 f887 	bl	800255c <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEE5frontEv>
 800144e:	4603      	mov	r3, r0
 8001450:	4618      	mov	r0, r3
 8001452:	f000 fe00 	bl	8002056 <_ZSt4moveIR7RequestEONSt16remove_referenceIT_E4typeEOS3_>
 8001456:	4603      	mov	r3, r0
 8001458:	4619      	mov	r1, r3
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f7ff ffc5 	bl	80013ea <_ZN7RequestC1EOS_>
		Requests.pop();
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	4618      	mov	r0, r3
 8001464:	f001 f887 	bl	8002576 <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEE3popEv>
		return request;
 8001468:	bf00      	nop
	}
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	0801b160 	.word	0x0801b160
 8001478:	0801b170 	.word	0x0801b170
 800147c:	0801b0d4 	.word	0x0801b0d4

08001480 <_ZN13HeadInterface14FinishTransmitEv>:

	void FinishTransmit() {
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
		TransmitComplete = true;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2201      	movs	r2, #1
 800148c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	}
 8001490:	bf00      	nop
 8001492:	370c      	adds	r7, #12
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <_ZN9__gnu_cxx14__alloc_traitsISaIhEhE15_S_always_equalEv>:
    { return _Base_type::propagate_on_container_move_assignment::value; }

    static constexpr bool _S_propagate_on_swap()
    { return _Base_type::propagate_on_container_swap::value; }

    static constexpr bool _S_always_equal()
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
    { return _Base_type::is_always_equal::value; }
 80014a0:	2301      	movs	r3, #1
 80014a2:	4618      	mov	r0, r3
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <_ZN7RequestaSEOS_>:
struct Request {
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	6039      	str	r1, [r7, #0]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	683a      	ldr	r2, [r7, #0]
 80014ba:	4611      	mov	r1, r2
 80014bc:	4618      	mov	r0, r3
 80014be:	f001 f878 	bl	80025b2 <_ZNSt6vectorIhSaIhEEaSEOS1_>
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	68da      	ldr	r2, [r3, #12]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	60da      	str	r2, [r3, #12]
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	7c1a      	ldrb	r2, [r3, #16]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	741a      	strb	r2, [r3, #16]
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	7c5a      	ldrb	r2, [r3, #17]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	745a      	strb	r2, [r3, #17]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4618      	mov	r0, r3
 80014de:	3708      	adds	r7, #8
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <_ZN13HeadInterface19ProcessRecievedDataEv>:

	void ProcessRecievedData() {
 80014e4:	b590      	push	{r4, r7, lr}
 80014e6:	b089      	sub	sp, #36	; 0x24
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
		switch (CurrentState) {
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f0:	2b07      	cmp	r3, #7
 80014f2:	f200 80d6 	bhi.w	80016a2 <_ZN13HeadInterface19ProcessRecievedDataEv+0x1be>
 80014f6:	a201      	add	r2, pc, #4	; (adr r2, 80014fc <_ZN13HeadInterface19ProcessRecievedDataEv+0x18>)
 80014f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014fc:	0800151d 	.word	0x0800151d
 8001500:	08001547 	.word	0x08001547
 8001504:	08001571 	.word	0x08001571
 8001508:	08001595 	.word	0x08001595
 800150c:	080015cb 	.word	0x080015cb
 8001510:	080015ef 	.word	0x080015ef
 8001514:	08001621 	.word	0x08001621
 8001518:	08001639 	.word	0x08001639
		case ReadState::SOM1: {
			if (CurrentValue == SOM1Val) {
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001522:	2bff      	cmp	r3, #255	; 0xff
 8001524:	d10b      	bne.n	800153e <_ZN13HeadInterface19ProcessRecievedDataEv+0x5a>
				CurrentState = ReadState::SOM2;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2201      	movs	r2, #1
 800152a:	631a      	str	r2, [r3, #48]	; 0x30
				HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	3328      	adds	r3, #40	; 0x28
 8001534:	2201      	movs	r2, #1
 8001536:	4619      	mov	r1, r3
 8001538:	f012 fb24 	bl	8013b84 <HAL_UART_Receive_IT>
			} else
				ResetReadState();
			break;
 800153c:	e0b5      	b.n	80016aa <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c6>
				ResetReadState();
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f7ff fec0 	bl	80012c4 <_ZN13HeadInterface14ResetReadStateEv>
			break;
 8001544:	e0b1      	b.n	80016aa <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c6>
		}
		case ReadState::SOM2: {
			if (CurrentValue == SOM2Val) {
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800154c:	2baa      	cmp	r3, #170	; 0xaa
 800154e:	d10b      	bne.n	8001568 <_ZN13HeadInterface19ProcessRecievedDataEv+0x84>
				CurrentState = ReadState::PERIPHERY_ID;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2202      	movs	r2, #2
 8001554:	631a      	str	r2, [r3, #48]	; 0x30
				HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	3328      	adds	r3, #40	; 0x28
 800155e:	2201      	movs	r2, #1
 8001560:	4619      	mov	r1, r3
 8001562:	f012 fb0f 	bl	8013b84 <HAL_UART_Receive_IT>
			} else
				ResetReadState();
			break;
 8001566:	e0a0      	b.n	80016aa <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c6>
				ResetReadState();
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f7ff feab 	bl	80012c4 <_ZN13HeadInterface14ResetReadStateEv>
			break;
 800156e:	e09c      	b.n	80016aa <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c6>
		}
		case ReadState::PERIPHERY_ID: {
			CurrentRequest.PeripheryID = CurrentValue;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			CurrentState = ReadState::REQUEST_SIZE;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2203      	movs	r2, #3
 8001580:	631a      	str	r2, [r3, #48]	; 0x30
			HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	3328      	adds	r3, #40	; 0x28
 800158a:	2201      	movs	r2, #1
 800158c:	4619      	mov	r1, r3
 800158e:	f012 faf9 	bl	8013b84 <HAL_UART_Receive_IT>
			break;
 8001592:	e08a      	b.n	80016aa <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c6>
		}
		case ReadState::REQUEST_SIZE: {
			RequestSize = CurrentValue;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800159a:	461a      	mov	r2, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	62da      	str	r2, [r3, #44]	; 0x2c
			CurrentRequest.Data.resize(RequestSize);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015aa:	4619      	mov	r1, r3
 80015ac:	4610      	mov	r0, r2
 80015ae:	f000 fe38 	bl	8002222 <_ZNSt6vectorIhSaIhEE6resizeEj>
			CurrentState = ReadState::RESPONCE_SIZE;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2204      	movs	r2, #4
 80015b6:	631a      	str	r2, [r3, #48]	; 0x30
			HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	3328      	adds	r3, #40	; 0x28
 80015c0:	2201      	movs	r2, #1
 80015c2:	4619      	mov	r1, r3
 80015c4:	f012 fade 	bl	8013b84 <HAL_UART_Receive_IT>
			break;
 80015c8:	e06f      	b.n	80016aa <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c6>
		}
		case ReadState::RESPONCE_SIZE: {
			CurrentRequest.ResponceSize = CurrentValue;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80015d0:	461a      	mov	r2, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	641a      	str	r2, [r3, #64]	; 0x40
			CurrentState = ReadState::META;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2205      	movs	r2, #5
 80015da:	631a      	str	r2, [r3, #48]	; 0x30
			HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	3328      	adds	r3, #40	; 0x28
 80015e4:	2201      	movs	r2, #1
 80015e6:	4619      	mov	r1, r3
 80015e8:	f012 facc 	bl	8013b84 <HAL_UART_Receive_IT>
			break;
 80015ec:	e05d      	b.n	80016aa <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c6>
		}
		case ReadState::META: {
			CurrentRequest.MetaInfo = CurrentValue;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			CurrentState = ReadState::DATA;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2206      	movs	r2, #6
 80015fe:	631a      	str	r2, [r3, #48]	; 0x30
			HAL_UART_Receive_IT(UartHandle, CurrentRequest.Data.data(),
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6d5c      	ldr	r4, [r3, #84]	; 0x54
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	3334      	adds	r3, #52	; 0x34
 8001608:	4618      	mov	r0, r3
 800160a:	f000 fe3e 	bl	800228a <_ZNSt6vectorIhSaIhEE4dataEv>
 800160e:	4601      	mov	r1, r0
					RequestSize);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
			HAL_UART_Receive_IT(UartHandle, CurrentRequest.Data.data(),
 8001614:	b29b      	uxth	r3, r3
 8001616:	461a      	mov	r2, r3
 8001618:	4620      	mov	r0, r4
 800161a:	f012 fab3 	bl	8013b84 <HAL_UART_Receive_IT>
			break;
 800161e:	e044      	b.n	80016aa <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c6>
		}
		case ReadState::DATA: {
			CurrentState = ReadState::SOM3;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2207      	movs	r2, #7
 8001624:	631a      	str	r2, [r3, #48]	; 0x30
			HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	3328      	adds	r3, #40	; 0x28
 800162e:	2201      	movs	r2, #1
 8001630:	4619      	mov	r1, r3
 8001632:	f012 faa7 	bl	8013b84 <HAL_UART_Receive_IT>
			break;
 8001636:	e038      	b.n	80016aa <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c6>
		}
		case ReadState::SOM3: {
			if (CurrentValue == SOM3Val) {
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800163e:	2baf      	cmp	r3, #175	; 0xaf
 8001640:	d12b      	bne.n	800169a <_ZN13HeadInterface19ProcessRecievedDataEv+0x1b6>
				Requests.push(std::move(CurrentRequest));
 8001642:	687c      	ldr	r4, [r7, #4]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	3334      	adds	r3, #52	; 0x34
 8001648:	4618      	mov	r0, r3
 800164a:	f000 fd04 	bl	8002056 <_ZSt4moveIR7RequestEONSt16remove_referenceIT_E4typeEOS3_>
 800164e:	4603      	mov	r3, r0
 8001650:	4619      	mov	r1, r3
 8001652:	4620      	mov	r0, r4
 8001654:	f000 ff9b 	bl	800258e <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEE4pushEOS0_>
				CurrentRequest = { };
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f103 0434 	add.w	r4, r3, #52	; 0x34
 800165e:	f107 030c 	add.w	r3, r7, #12
 8001662:	2200      	movs	r2, #0
 8001664:	601a      	str	r2, [r3, #0]
 8001666:	605a      	str	r2, [r3, #4]
 8001668:	609a      	str	r2, [r3, #8]
 800166a:	60da      	str	r2, [r3, #12]
 800166c:	611a      	str	r2, [r3, #16]
 800166e:	2300      	movs	r3, #0
 8001670:	60fb      	str	r3, [r7, #12]
 8001672:	2300      	movs	r3, #0
 8001674:	613b      	str	r3, [r7, #16]
 8001676:	2300      	movs	r3, #0
 8001678:	617b      	str	r3, [r7, #20]
 800167a:	f107 030c 	add.w	r3, r7, #12
 800167e:	4618      	mov	r0, r3
 8001680:	f7ff fbf1 	bl	8000e66 <_ZNSt6vectorIhSaIhEEC1Ev>
 8001684:	f107 030c 	add.w	r3, r7, #12
 8001688:	4619      	mov	r1, r3
 800168a:	4620      	mov	r0, r4
 800168c:	f7ff ff0e 	bl	80014ac <_ZN7RequestaSEOS_>
 8001690:	f107 030c 	add.w	r3, r7, #12
 8001694:	4618      	mov	r0, r3
 8001696:	f7ff fdd5 	bl	8001244 <_ZN7RequestD1Ev>
			}
			ResetReadState();
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f7ff fe12 	bl	80012c4 <_ZN13HeadInterface14ResetReadStateEv>
			break;
 80016a0:	e003      	b.n	80016aa <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c6>
		}
		default:
			ResetReadState();
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f7ff fe0e 	bl	80012c4 <_ZN13HeadInterface14ResetReadStateEv>
		}
	}
 80016a8:	bf00      	nop
 80016aa:	bf00      	nop
 80016ac:	3724      	adds	r7, #36	; 0x24
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd90      	pop	{r4, r7, pc}
 80016b2:	bf00      	nop

080016b4 <_ZN8IMUFrameC1ERKN10BHYWrapper8BHYFrameEj>:
};

struct IMUFrame: public BHYWrapper::BHYFrame {
	size_t Seq;

	IMUFrame(const BHYWrapper::BHYFrame &frame, size_t seq) :
 80016b4:	b4b0      	push	{r4, r5, r7}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	60f8      	str	r0, [r7, #12]
 80016bc:	60b9      	str	r1, [r7, #8]
 80016be:	607a      	str	r2, [r7, #4]
			BHYFrame { frame }, Seq { seq } {
 80016c0:	68fa      	ldr	r2, [r7, #12]
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	4614      	mov	r4, r2
 80016c6:	461d      	mov	r5, r3
 80016c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016cc:	682b      	ldr	r3, [r5, #0]
 80016ce:	6023      	str	r3, [r4, #0]
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	615a      	str	r2, [r3, #20]
	}
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	4618      	mov	r0, r3
 80016da:	3714      	adds	r7, #20
 80016dc:	46bd      	mov	sp, r7
 80016de:	bcb0      	pop	{r4, r5, r7}
 80016e0:	4770      	bx	lr

080016e2 <_ZN17IMUFrameContainer3AddERKN10BHYWrapper8BHYFrameE>:
	void Reset() {
		FrameQueue = { };
		LastSeq = 0;
	}

	void Add(const BHYWrapper::BHYFrame &frame) {
 80016e2:	b590      	push	{r4, r7, lr}
 80016e4:	b089      	sub	sp, #36	; 0x24
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
 80016ea:	6039      	str	r1, [r7, #0]
		FrameQueue.push_front( { frame, TestSeq++ });
 80016ec:	687c      	ldr	r4, [r7, #4]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f2:	1c59      	adds	r1, r3, #1
 80016f4:	687a      	ldr	r2, [r7, #4]
 80016f6:	62d1      	str	r1, [r2, #44]	; 0x2c
 80016f8:	f107 0008 	add.w	r0, r7, #8
 80016fc:	461a      	mov	r2, r3
 80016fe:	6839      	ldr	r1, [r7, #0]
 8001700:	f7ff ffd8 	bl	80016b4 <_ZN8IMUFrameC1ERKN10BHYWrapper8BHYFrameEj>
 8001704:	f107 0308 	add.w	r3, r7, #8
 8001708:	4619      	mov	r1, r3
 800170a:	4620      	mov	r0, r4
 800170c:	f000 ff66 	bl	80025dc <_ZNSt5dequeI8IMUFrameSaIS0_EE10push_frontEOS0_>
	}
 8001710:	bf00      	nop
 8001712:	3724      	adds	r7, #36	; 0x24
 8001714:	46bd      	mov	sp, r7
 8001716:	bd90      	pop	{r4, r7, pc}

08001718 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE>:
	void Remove() {
		FrameQueue.pop_back();
		LastSeq++;
	}

	bool Get(size_t seq, BHYWrapper::BHYFrame &frame) const {
 8001718:	b5b0      	push	{r4, r5, r7, lr}
 800171a:	b08a      	sub	sp, #40	; 0x28
 800171c:	af00      	add	r7, sp, #0
 800171e:	60f8      	str	r0, [r7, #12]
 8001720:	60b9      	str	r1, [r7, #8]
 8001722:	607a      	str	r2, [r7, #4]
		if (FrameQueue.empty())
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	4618      	mov	r0, r3
 8001728:	f000 ff69 	bl	80025fe <_ZNKSt5dequeI8IMUFrameSaIS0_EE5emptyEv>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x1e>
			return false;
 8001732:	2300      	movs	r3, #0
 8001734:	e045      	b.n	80017c2 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0xaa>

		if (seq < LastSeq || seq > FrameQueue.size() + LastSeq - 1)
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800173a:	68ba      	ldr	r2, [r7, #8]
 800173c:	429a      	cmp	r2, r3
 800173e:	d30b      	bcc.n	8001758 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x40>
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	4618      	mov	r0, r3
 8001744:	f000 ff6d 	bl	8002622 <_ZNKSt5dequeI8IMUFrameSaIS0_EE4sizeEv>
 8001748:	4602      	mov	r2, r0
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800174e:	4413      	add	r3, r2
 8001750:	3b01      	subs	r3, #1
 8001752:	68ba      	ldr	r2, [r7, #8]
 8001754:	429a      	cmp	r2, r3
 8001756:	d901      	bls.n	800175c <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x44>
 8001758:	2301      	movs	r3, #1
 800175a:	e000      	b.n	800175e <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x46>
 800175c:	2300      	movs	r3, #0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x4e>
			return false;
 8001762:	2300      	movs	r3, #0
 8001764:	e02d      	b.n	80017c2 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0xaa>

		auto imuFrame = FrameQueue[(FrameQueue.size() - 1) - (seq - LastSeq)];
 8001766:	68fc      	ldr	r4, [r7, #12]
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	4618      	mov	r0, r3
 800176c:	f000 ff59 	bl	8002622 <_ZNKSt5dequeI8IMUFrameSaIS0_EE4sizeEv>
 8001770:	4601      	mov	r1, r0
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	440b      	add	r3, r1
 800177c:	3b01      	subs	r3, #1
 800177e:	4619      	mov	r1, r3
 8001780:	4620      	mov	r0, r4
 8001782:	f000 ff60 	bl	8002646 <_ZNKSt5dequeI8IMUFrameSaIS0_EEixEj>
 8001786:	4603      	mov	r3, r0
 8001788:	f107 0410 	add.w	r4, r7, #16
 800178c:	461d      	mov	r5, r3
 800178e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001790:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001792:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001796:	e884 0003 	stmia.w	r4, {r0, r1}
		assert(imuFrame.Seq == seq);
 800179a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179c:	68ba      	ldr	r2, [r7, #8]
 800179e:	429a      	cmp	r2, r3
 80017a0:	d006      	beq.n	80017b0 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x98>
 80017a2:	4b0a      	ldr	r3, [pc, #40]	; (80017cc <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0xb4>)
 80017a4:	4a0a      	ldr	r2, [pc, #40]	; (80017d0 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0xb8>)
 80017a6:	f240 114b 	movw	r1, #331	; 0x14b
 80017aa:	480a      	ldr	r0, [pc, #40]	; (80017d4 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0xbc>)
 80017ac:	f018 fb94 	bl	8019ed8 <__assert_func>

		frame = imuFrame;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	461d      	mov	r5, r3
 80017b4:	f107 0410 	add.w	r4, r7, #16
 80017b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017bc:	6823      	ldr	r3, [r4, #0]
 80017be:	602b      	str	r3, [r5, #0]
		return true;
 80017c0:	2301      	movs	r3, #1
	}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3728      	adds	r7, #40	; 0x28
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bdb0      	pop	{r4, r5, r7, pc}
 80017ca:	bf00      	nop
 80017cc:	0801b194 	.word	0x0801b194
 80017d0:	0801b1a8 	.word	0x0801b1a8
 80017d4:	0801b0d4 	.word	0x0801b0d4

080017d8 <_ZN17IMURequestHandler6HandleERK7RequestRK17IMUFrameContainer>:
};

class IMURequestHandler {
public:
	Responce Handle(const Request &request,
 80017d8:	b580      	push	{r7, lr}
 80017da:	b08c      	sub	sp, #48	; 0x30
 80017dc:	af00      	add	r7, sp, #0
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	60b9      	str	r1, [r7, #8]
 80017e2:	607a      	str	r2, [r7, #4]
 80017e4:	603b      	str	r3, [r7, #0]
			const IMUFrameContainer &container) {
		assert(request.PeripheryID == Periphery::Imu);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	7c5b      	ldrb	r3, [r3, #17]
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d006      	beq.n	80017fc <_ZN17IMURequestHandler6HandleERK7RequestRK17IMUFrameContainer+0x24>
 80017ee:	4b29      	ldr	r3, [pc, #164]	; (8001894 <_ZN17IMURequestHandler6HandleERK7RequestRK17IMUFrameContainer+0xbc>)
 80017f0:	4a29      	ldr	r2, [pc, #164]	; (8001898 <_ZN17IMURequestHandler6HandleERK7RequestRK17IMUFrameContainer+0xc0>)
 80017f2:	f44f 71ab 	mov.w	r1, #342	; 0x156
 80017f6:	4829      	ldr	r0, [pc, #164]	; (800189c <_ZN17IMURequestHandler6HandleERK7RequestRK17IMUFrameContainer+0xc4>)
 80017f8:	f018 fb6e 	bl	8019ed8 <__assert_func>
		assert(request.Data.size() == 2);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	4618      	mov	r0, r3
 8001800:	f000 fd52 	bl	80022a8 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8001804:	4603      	mov	r3, r0
 8001806:	2b02      	cmp	r3, #2
 8001808:	d006      	beq.n	8001818 <_ZN17IMURequestHandler6HandleERK7RequestRK17IMUFrameContainer+0x40>
 800180a:	4b25      	ldr	r3, [pc, #148]	; (80018a0 <_ZN17IMURequestHandler6HandleERK7RequestRK17IMUFrameContainer+0xc8>)
 800180c:	4a22      	ldr	r2, [pc, #136]	; (8001898 <_ZN17IMURequestHandler6HandleERK7RequestRK17IMUFrameContainer+0xc0>)
 800180e:	f240 1157 	movw	r1, #343	; 0x157
 8001812:	4822      	ldr	r0, [pc, #136]	; (800189c <_ZN17IMURequestHandler6HandleERK7RequestRK17IMUFrameContainer+0xc4>)
 8001814:	f018 fb60 	bl	8019ed8 <__assert_func>
		Responce responce;
 8001818:	68f8      	ldr	r0, [r7, #12]
 800181a:	f7ff fccc 	bl	80011b6 <_ZN8ResponceC1Ev>
		responce.PeripheryID = Periphery::Imu;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	2201      	movs	r2, #1
 8001822:	731a      	strb	r2, [r3, #12]
		responce.MetaInfo = 0;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	2200      	movs	r2, #0
 8001828:	735a      	strb	r2, [r3, #13]

		uint16_t frameSeq =
				*reinterpret_cast<const uint16_t*>(request.Data.data());
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4618      	mov	r0, r3
 800182e:	f000 fe86 	bl	800253e <_ZNKSt6vectorIhSaIhEE4dataEv>
 8001832:	4603      	mov	r3, r0
 8001834:	881b      	ldrh	r3, [r3, #0]
 8001836:	85fb      	strh	r3, [r7, #46]	; 0x2e

		BHYWrapper::BHYFrame imuFrame;
		bool ok = container.Get(frameSeq, imuFrame);
 8001838:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800183a:	f107 0218 	add.w	r2, r7, #24
 800183e:	4619      	mov	r1, r3
 8001840:	6838      	ldr	r0, [r7, #0]
 8001842:	f7ff ff69 	bl	8001718 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE>
 8001846:	4603      	mov	r3, r0
 8001848:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

		responce.Data.resize(BHYWrapper::BHYFrame::Size);
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	2111      	movs	r1, #17
 8001850:	4618      	mov	r0, r3
 8001852:	f000 fce6 	bl	8002222 <_ZNSt6vectorIhSaIhEE6resizeEj>

		if (!ok) {
 8001856:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800185a:	f083 0301 	eor.w	r3, r3, #1
 800185e:	b2db      	uxtb	r3, r3
 8001860:	2b00      	cmp	r3, #0
 8001862:	d003      	beq.n	800186c <_ZN17IMURequestHandler6HandleERK7RequestRK17IMUFrameContainer+0x94>
			responce.Error = 1;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	2201      	movs	r2, #1
 8001868:	739a      	strb	r2, [r3, #14]
			return responce;
 800186a:	e00f      	b.n	800188c <_ZN17IMURequestHandler6HandleERK7RequestRK17IMUFrameContainer+0xb4>
		}

		uint8_t sz;
		imuFrame.SerializeTo(responce.Data.data(), &sz);
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	4618      	mov	r0, r3
 8001870:	f000 fd0b 	bl	800228a <_ZNSt6vectorIhSaIhEE4dataEv>
 8001874:	4601      	mov	r1, r0
 8001876:	f107 0217 	add.w	r2, r7, #23
 800187a:	f107 0318 	add.w	r3, r7, #24
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff f918 	bl	8000ab4 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_>
		responce.Error = 0;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2200      	movs	r2, #0
 8001888:	739a      	strb	r2, [r3, #14]

		return responce;
 800188a:	bf00      	nop
	}
 800188c:	68f8      	ldr	r0, [r7, #12]
 800188e:	3730      	adds	r7, #48	; 0x30
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	0801b1ec 	.word	0x0801b1ec
 8001898:	0801b214 	.word	0x0801b214
 800189c:	0801b0d4 	.word	0x0801b0d4
 80018a0:	0801b264 	.word	0x0801b264

080018a4 <_ZN13HeadInterfaceD1Ev>:
struct HeadInterface {
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	3348      	adds	r3, #72	; 0x48
 80018b0:	4618      	mov	r0, r3
 80018b2:	f000 fbb5 	bl	8002020 <_ZNSt6vectorIhSaIhEED1Ev>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	3334      	adds	r3, #52	; 0x34
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7ff fcc2 	bl	8001244 <_ZN7RequestD1Ev>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff fca4 	bl	8001210 <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEED1Ev>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	4618      	mov	r0, r3
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}

080018d2 <_ZN11QueueSenderD1Ev>:
struct QueueSender {
 80018d2:	b580      	push	{r7, lr}
 80018d4:	b082      	sub	sp, #8
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	6078      	str	r0, [r7, #4]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	3354      	adds	r3, #84	; 0x54
 80018de:	4618      	mov	r0, r3
 80018e0:	f000 fb9e 	bl	8002020 <_ZNSt6vectorIhSaIhEED1Ev>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	3328      	adds	r3, #40	; 0x28
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff fa96 	bl	8000e1a <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEED1Ev>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f000 faf6 	bl	8001ee2 <_ZNSt5dequeI7RequestSaIS0_EED1Ev>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4618      	mov	r0, r3
 80018fa:	3708      	adds	r7, #8
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}

08001900 <_ZNSt5dequeI8IMUFrameSaIS0_EEC1Ev>:
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	4618      	mov	r0, r3
 800190c:	f000 feb8 	bl	8002680 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EEC1Ev>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	4618      	mov	r0, r3
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}

0800191a <_ZN17IMUFrameContainerC1Ev>:
class IMUFrameContainer {
 800191a:	b580      	push	{r7, lr}
 800191c:	b082      	sub	sp, #8
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff ffeb 	bl	8001900 <_ZNSt5dequeI8IMUFrameSaIS0_EEC1Ev>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2200      	movs	r2, #0
 800192e:	629a      	str	r2, [r3, #40]	; 0x28
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2200      	movs	r2, #0
 8001934:	62da      	str	r2, [r3, #44]	; 0x2c
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4618      	mov	r0, r3
 800193a:	3708      	adds	r7, #8
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}

08001940 <_ZN17IMUFrameContainerD1Ev>:
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	4618      	mov	r0, r3
 800194c:	f000 fecb 	bl	80026e6 <_ZNSt5dequeI8IMUFrameSaIS0_EED1Ev>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	4618      	mov	r0, r3
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <_ZN18MotherboardContextC1E17MotherboardConfig>:
	BHYWrapper IMU;
	IMURequestHandler IMUHandler;

	bool UpdateIMU = false;

	MotherboardContext(MotherboardConfig conf) :
 800195a:	b084      	sub	sp, #16
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	f107 0014 	add.w	r0, r7, #20
 8001968:	e880 000e 	stmia.w	r0, {r1, r2, r3}
		Head{conf.HeadUart, conf.HeadTimeout},
		Body{conf.BodyUart, conf.BodyTimeout},
		FrameContainer{},
		IMU{conf.IMUSpi},
		IMUHandler{} {}
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6979      	ldr	r1, [r7, #20]
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	4618      	mov	r0, r3
 8001974:	f7ff fc74 	bl	8001260 <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	3360      	adds	r3, #96	; 0x60
 800197c:	69f9      	ldr	r1, [r7, #28]
 800197e:	6a3a      	ldr	r2, [r7, #32]
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff fa7d 	bl	8000e80 <_ZN11QueueSenderC1EP20__UART_HandleTypeDefj>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	33cc      	adds	r3, #204	; 0xcc
 800198a:	2230      	movs	r2, #48	; 0x30
 800198c:	2100      	movs	r1, #0
 800198e:	4618      	mov	r0, r3
 8001990:	f018 fb34 	bl	8019ffc <memset>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	33cc      	adds	r3, #204	; 0xcc
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff ffbe 	bl	800191a <_ZN17IMUFrameContainerC1Ev>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80019a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019a6:	4611      	mov	r1, r2
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7fe fe6b 	bl	8000684 <_ZN10BHYWrapperC1EP19__SPI_HandleTypeDef>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019b4:	2200      	movs	r2, #0
 80019b6:	f883 2251 	strb.w	r2, [r3, #593]	; 0x251
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4618      	mov	r0, r3
 80019be:	3708      	adds	r7, #8
 80019c0:	46bd      	mov	sp, r7
 80019c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80019c6:	b004      	add	sp, #16
 80019c8:	4770      	bx	lr

080019ca <_ZN13HeadInterfaceC1Ev>:
	HeadInterface() = default;
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b082      	sub	sp, #8
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4618      	mov	r0, r3
 80019d6:	f000 fd91 	bl	80024fc <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEEC1IS3_vEEv>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	3334      	adds	r3, #52	; 0x34
 80019de:	4618      	mov	r0, r3
 80019e0:	f7ff fc23 	bl	800122a <_ZN7RequestC1Ev>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	3348      	adds	r3, #72	; 0x48
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff fa3c 	bl	8000e66 <_ZNSt6vectorIhSaIhEEC1Ev>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2201      	movs	r2, #1
 80019f2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4618      	mov	r0, r3
 80019fa:	3708      	adds	r7, #8
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <_ZN11QueueSenderC1Ev>:
	QueueSender() = default;
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7ff f9f8 	bl	8000e00 <_ZNSt5dequeI7RequestSaIS0_EEC1Ev>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	3328      	adds	r3, #40	; 0x28
 8001a14:	4618      	mov	r0, r3
 8001a16:	f000 fa96 	bl	8001f46 <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEEC1IS3_vEEv>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	3354      	adds	r3, #84	; 0x54
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7ff fa1d 	bl	8000e66 <_ZNSt6vectorIhSaIhEEC1Ev>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <_ZN18MotherboardContextC1Ev>:

	MotherboardContext() = default;
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b082      	sub	sp, #8
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7ff ffc2 	bl	80019ca <_ZN13HeadInterfaceC1Ev>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	3360      	adds	r3, #96	; 0x60
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7ff ffd8 	bl	8001a00 <_ZN11QueueSenderC1Ev>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	33cc      	adds	r3, #204	; 0xcc
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff ff60 	bl	800191a <_ZN17IMUFrameContainerC1Ev>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a60:	2200      	movs	r2, #0
 8001a62:	f883 2251 	strb.w	r2, [r3, #593]	; 0x251
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3708      	adds	r7, #8
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <_ZN18MotherboardContextD1Ev>:
struct MotherboardContext {
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	33cc      	adds	r3, #204	; 0xcc
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff ff5f 	bl	8001940 <_ZN17IMUFrameContainerD1Ev>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	3360      	adds	r3, #96	; 0x60
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7ff ff23 	bl	80018d2 <_ZN11QueueSenderD1Ev>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7ff ff08 	bl	80018a4 <_ZN13HeadInterfaceD1Ev>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	4618      	mov	r0, r3
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEEaSEOS4_>:
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b082      	sub	sp, #8
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
 8001aa6:	6039      	str	r1, [r7, #0]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	683a      	ldr	r2, [r7, #0]
 8001aac:	4611      	mov	r1, r2
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f000 fe3e 	bl	8002730 <_ZNSt5dequeI7RequestSaIS0_EEaSEOS2_>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <_ZN13HeadInterfaceaSEOS_>:
struct HeadInterface {
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	b082      	sub	sp, #8
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
 8001ac6:	6039      	str	r1, [r7, #0]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	683a      	ldr	r2, [r7, #0]
 8001acc:	4611      	mov	r1, r2
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7ff ffe5 	bl	8001a9e <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEEaSEOS4_>
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	62da      	str	r2, [r3, #44]	; 0x2c
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	631a      	str	r2, [r3, #48]	; 0x30
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	3334      	adds	r3, #52	; 0x34
 8001afa:	4619      	mov	r1, r3
 8001afc:	4610      	mov	r0, r2
 8001afe:	f7ff fcd5 	bl	80014ac <_ZN7RequestaSEOS_>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	3348      	adds	r3, #72	; 0x48
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	4610      	mov	r0, r2
 8001b10:	f000 fd4f 	bl	80025b2 <_ZNSt6vectorIhSaIhEEaSEOS1_>
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	655a      	str	r2, [r3, #84]	; 0x54
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	659a      	str	r2, [r3, #88]	; 0x58
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	4618      	mov	r0, r3
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEEaSEOS4_>:
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	b082      	sub	sp, #8
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
 8001b42:	6039      	str	r1, [r7, #0]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	683a      	ldr	r2, [r7, #0]
 8001b48:	4611      	mov	r1, r2
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f000 fe03 	bl	8002756 <_ZNSt5dequeI8ResponceSaIS0_EEaSEOS2_>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	4618      	mov	r0, r3
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <_ZN11QueueSenderaSEOS_>:
struct QueueSender {
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b082      	sub	sp, #8
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
 8001b62:	6039      	str	r1, [r7, #0]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	683a      	ldr	r2, [r7, #0]
 8001b68:	4611      	mov	r1, r2
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f000 fde0 	bl	8002730 <_ZNSt5dequeI7RequestSaIS0_EEaSEOS2_>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	3328      	adds	r3, #40	; 0x28
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	4610      	mov	r0, r2
 8001b7e:	f7ff ffdc 	bl	8001b3a <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEEaSEOS4_>
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	3354      	adds	r3, #84	; 0x54
 8001b98:	4619      	mov	r1, r3
 8001b9a:	4610      	mov	r0, r2
 8001b9c:	f000 fd09 	bl	80025b2 <_ZNSt6vectorIhSaIhEEaSEOS1_>
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	665a      	str	r2, [r3, #100]	; 0x64
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	669a      	str	r2, [r3, #104]	; 0x68
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <_ZN17IMUFrameContaineraSEOS_>:
class IMUFrameContainer {
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b082      	sub	sp, #8
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
 8001bce:	6039      	str	r1, [r7, #0]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	683a      	ldr	r2, [r7, #0]
 8001bd4:	4611      	mov	r1, r2
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f000 fdd0 	bl	800277c <_ZNSt5dequeI8IMUFrameSaIS0_EEaSEOS2_>
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	629a      	str	r2, [r3, #40]	; 0x28
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	62da      	str	r2, [r3, #44]	; 0x2c
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <_ZN18MotherboardContextaSEOS_>:
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b082      	sub	sp, #8
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
 8001bfe:	6039      	str	r1, [r7, #0]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	683a      	ldr	r2, [r7, #0]
 8001c04:	4611      	mov	r1, r2
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7ff ff59 	bl	8001abe <_ZN13HeadInterfaceaSEOS_>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	3360      	adds	r3, #96	; 0x60
 8001c16:	4619      	mov	r1, r3
 8001c18:	4610      	mov	r0, r2
 8001c1a:	f7ff ff9e 	bl	8001b5a <_ZN11QueueSenderaSEOS_>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f103 02cc 	add.w	r2, r3, #204	; 0xcc
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	33cc      	adds	r3, #204	; 0xcc
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4610      	mov	r0, r2
 8001c2c:	f7ff ffcb 	bl	8001bc6 <_ZN17IMUFrameContaineraSEOS_>
 8001c30:	687a      	ldr	r2, [r7, #4]
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	f502 7080 	add.w	r0, r2, #256	; 0x100
 8001c38:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001c3c:	f241 1250 	movw	r2, #4432	; 0x1150
 8001c40:	4619      	mov	r1, r3
 8001c42:	f018 f9b3 	bl	8019fac <memcpy>
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c4c:	f893 2251 	ldrb.w	r2, [r3, #593]	; 0x251
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c56:	f883 2251 	strb.w	r2, [r3, #593]	; 0x251
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3708      	adds	r7, #8
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <MotherboardInit>:
};

static MotherboardContext mbctx;

int MotherboardInit(MotherboardConfig conf) {
 8001c64:	b084      	sub	sp, #16
 8001c66:	b590      	push	{r4, r7, lr}
 8001c68:	f5ad 5d93 	sub.w	sp, sp, #4704	; 0x1260
 8001c6c:	b081      	sub	sp, #4
 8001c6e:	af02      	add	r7, sp, #8
 8001c70:	f241 2468 	movw	r4, #4712	; 0x1268
 8001c74:	443c      	add	r4, r7
 8001c76:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	mbctx = MotherboardContext { conf };
 8001c7a:	4c1d      	ldr	r4, [pc, #116]	; (8001cf0 <MotherboardInit+0x8c>)
 8001c7c:	f241 2358 	movw	r3, #4696	; 0x1258
 8001c80:	4423      	add	r3, r4
 8001c82:	19dc      	adds	r4, r3, r7
 8001c84:	466a      	mov	r2, sp
 8001c86:	f241 2374 	movw	r3, #4724	; 0x1274
 8001c8a:	443b      	add	r3, r7
 8001c8c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001c90:	e882 0003 	stmia.w	r2, {r0, r1}
 8001c94:	f241 2368 	movw	r3, #4712	; 0x1268
 8001c98:	443b      	add	r3, r7
 8001c9a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c9c:	4620      	mov	r0, r4
 8001c9e:	f7ff fe5c 	bl	800195a <_ZN18MotherboardContextC1E17MotherboardConfig>
 8001ca2:	4b13      	ldr	r3, [pc, #76]	; (8001cf0 <MotherboardInit+0x8c>)
 8001ca4:	f503 5392 	add.w	r3, r3, #4672	; 0x1240
 8001ca8:	f103 0318 	add.w	r3, r3, #24
 8001cac:	443b      	add	r3, r7
 8001cae:	4619      	mov	r1, r3
 8001cb0:	4810      	ldr	r0, [pc, #64]	; (8001cf4 <MotherboardInit+0x90>)
 8001cb2:	f7ff ffa0 	bl	8001bf6 <_ZN18MotherboardContextaSEOS_>
 8001cb6:	4b0e      	ldr	r3, [pc, #56]	; (8001cf0 <MotherboardInit+0x8c>)
 8001cb8:	f503 5392 	add.w	r3, r3, #4672	; 0x1240
 8001cbc:	f103 0318 	add.w	r3, r3, #24
 8001cc0:	443b      	add	r3, r7
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7ff fed4 	bl	8001a70 <_ZN18MotherboardContextD1Ev>

	mbctx.Head.ResetReadState();
 8001cc8:	480a      	ldr	r0, [pc, #40]	; (8001cf4 <MotherboardInit+0x90>)
 8001cca:	f7ff fafb 	bl	80012c4 <_ZN13HeadInterface14ResetReadStateEv>
	return mbctx.IMU.Init(800, 0);
 8001cce:	2100      	movs	r1, #0
 8001cd0:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8001cf8 <MotherboardInit+0x94>
 8001cd4:	4809      	ldr	r0, [pc, #36]	; (8001cfc <MotherboardInit+0x98>)
 8001cd6:	f7fe fcf3 	bl	80006c0 <_ZN10BHYWrapper4InitEfm>
 8001cda:	4603      	mov	r3, r0
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f507 5792 	add.w	r7, r7, #4672	; 0x1240
 8001ce2:	371c      	adds	r7, #28
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001cea:	b004      	add	sp, #16
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	ffffeda8 	.word	0xffffeda8
 8001cf4:	24000250 	.word	0x24000250
 8001cf8:	44480000 	.word	0x44480000
 8001cfc:	24000350 	.word	0x24000350

08001d00 <MotherboardTick>:

int MotherboardTick() {
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b08e      	sub	sp, #56	; 0x38
 8001d04:	af00      	add	r7, sp, #0
	if (mbctx.UpdateIMU)
 8001d06:	4b30      	ldr	r3, [pc, #192]	; (8001dc8 <MotherboardTick+0xc8>)
 8001d08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d0c:	f893 3251 	ldrb.w	r3, [r3, #593]	; 0x251
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d00b      	beq.n	8001d2c <MotherboardTick+0x2c>
		mbctx.UpdateIMU = !mbctx.IMU.Poll();
 8001d14:	482d      	ldr	r0, [pc, #180]	; (8001dcc <MotherboardTick+0xcc>)
 8001d16:	f7fe fe2b 	bl	8000970 <_ZN10BHYWrapper4PollEv>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	f083 0301 	eor.w	r3, r3, #1
 8001d20:	b2da      	uxtb	r2, r3
 8001d22:	4b29      	ldr	r3, [pc, #164]	; (8001dc8 <MotherboardTick+0xc8>)
 8001d24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d28:	f883 2251 	strb.w	r2, [r3, #593]	; 0x251

	if (mbctx.Head.HasRequest()) {
 8001d2c:	4826      	ldr	r0, [pc, #152]	; (8001dc8 <MotherboardTick+0xc8>)
 8001d2e:	f7ff fadc 	bl	80012ea <_ZNK13HeadInterface10HasRequestEv>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d02b      	beq.n	8001d90 <MotherboardTick+0x90>
		auto request = mbctx.Head.GetRequest();
 8001d38:	1d3b      	adds	r3, r7, #4
 8001d3a:	4923      	ldr	r1, [pc, #140]	; (8001dc8 <MotherboardTick+0xc8>)
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7ff fb71 	bl	8001424 <_ZN13HeadInterface10GetRequestEv>

		switch (request.PeripheryID) {
 8001d42:	7d7b      	ldrb	r3, [r7, #21]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d002      	beq.n	8001d4e <MotherboardTick+0x4e>
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d00a      	beq.n	8001d62 <MotherboardTick+0x62>
 8001d4c:	e01c      	b.n	8001d88 <MotherboardTick+0x88>
		case Periphery::Body:
			mbctx.Body.AddRequest(std::move(request));
 8001d4e:	1d3b      	adds	r3, r7, #4
 8001d50:	4618      	mov	r0, r3
 8001d52:	f000 f980 	bl	8002056 <_ZSt4moveIR7RequestEONSt16remove_referenceIT_E4typeEOS3_>
 8001d56:	4603      	mov	r3, r0
 8001d58:	4619      	mov	r1, r3
 8001d5a:	481d      	ldr	r0, [pc, #116]	; (8001dd0 <MotherboardTick+0xd0>)
 8001d5c:	f7ff f8df 	bl	8000f1e <_ZN11QueueSender10AddRequestEO7Request>
			break;
 8001d60:	e012      	b.n	8001d88 <MotherboardTick+0x88>
		case Periphery::Imu:
			mbctx.Head.Send(
					mbctx.IMUHandler.Handle(request,
 8001d62:	f107 0018 	add.w	r0, r7, #24
 8001d66:	1d3a      	adds	r2, r7, #4
 8001d68:	4b1a      	ldr	r3, [pc, #104]	; (8001dd4 <MotherboardTick+0xd4>)
 8001d6a:	491b      	ldr	r1, [pc, #108]	; (8001dd8 <MotherboardTick+0xd8>)
 8001d6c:	f7ff fd34 	bl	80017d8 <_ZN17IMURequestHandler6HandleERK7RequestRK17IMUFrameContainer>
			mbctx.Head.Send(
 8001d70:	f107 0318 	add.w	r3, r7, #24
 8001d74:	4619      	mov	r1, r3
 8001d76:	4814      	ldr	r0, [pc, #80]	; (8001dc8 <MotherboardTick+0xc8>)
 8001d78:	f7ff fac7 	bl	800130a <_ZN13HeadInterface4SendERK8Responce>
					mbctx.IMUHandler.Handle(request,
 8001d7c:	f107 0318 	add.w	r3, r7, #24
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7ff f943 	bl	800100c <_ZN8ResponceD1Ev>
							mbctx.FrameContainer));
			break;
 8001d86:	bf00      	nop
		auto request = mbctx.Head.GetRequest();
 8001d88:	1d3b      	adds	r3, r7, #4
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7ff fa5a 	bl	8001244 <_ZN7RequestD1Ev>
		}
	}

	if (mbctx.Body.HasResponce()) {
 8001d90:	480f      	ldr	r0, [pc, #60]	; (8001dd0 <MotherboardTick+0xd0>)
 8001d92:	f7ff f8ee 	bl	8000f72 <_ZNK11QueueSender11HasResponceEv>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d010      	beq.n	8001dbe <MotherboardTick+0xbe>
		mbctx.Head.Send(mbctx.Body.GetResponce());
 8001d9c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001da0:	490b      	ldr	r1, [pc, #44]	; (8001dd0 <MotherboardTick+0xd0>)
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7ff f940 	bl	8001028 <_ZN11QueueSender11GetResponceEv>
 8001da8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001dac:	4619      	mov	r1, r3
 8001dae:	4806      	ldr	r0, [pc, #24]	; (8001dc8 <MotherboardTick+0xc8>)
 8001db0:	f7ff faab 	bl	800130a <_ZN13HeadInterface4SendERK8Responce>
 8001db4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7ff f927 	bl	800100c <_ZN8ResponceD1Ev>
	}

	return 0;
 8001dbe:	2300      	movs	r3, #0
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3738      	adds	r7, #56	; 0x38
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	24000250 	.word	0x24000250
 8001dcc:	24000350 	.word	0x24000350
 8001dd0:	240002b0 	.word	0x240002b0
 8001dd4:	2400031c 	.word	0x2400031c
 8001dd8:	240014a0 	.word	0x240014a0

08001ddc <MotherboardOnStrobe>:

void MotherboardOnStrobe() {
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b086      	sub	sp, #24
 8001de0:	af00      	add	r7, sp, #0
	mbctx.FrameContainer.Add(mbctx.IMU.GetFrame());
 8001de2:	1d3b      	adds	r3, r7, #4
 8001de4:	4906      	ldr	r1, [pc, #24]	; (8001e00 <MotherboardOnStrobe+0x24>)
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7fe fdec 	bl	80009c4 <_ZNK10BHYWrapper8GetFrameEv>
 8001dec:	1d3b      	adds	r3, r7, #4
 8001dee:	4619      	mov	r1, r3
 8001df0:	4804      	ldr	r0, [pc, #16]	; (8001e04 <MotherboardOnStrobe+0x28>)
 8001df2:	f7ff fc76 	bl	80016e2 <_ZN17IMUFrameContainer3AddERKN10BHYWrapper8BHYFrameE>
}
 8001df6:	bf00      	nop
 8001df8:	3718      	adds	r7, #24
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	24000350 	.word	0x24000350
 8001e04:	2400031c 	.word	0x2400031c

08001e08 <MotherboardOnHeadRecieveComplete>:

void MotherboardOnBodyTransmitComplete() {
	mbctx.Body.ProcessResponces();
}

void MotherboardOnHeadRecieveComplete() {
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
	mbctx.Head.ProcessRecievedData();
 8001e0c:	4802      	ldr	r0, [pc, #8]	; (8001e18 <MotherboardOnHeadRecieveComplete+0x10>)
 8001e0e:	f7ff fb69 	bl	80014e4 <_ZN13HeadInterface19ProcessRecievedDataEv>
}
 8001e12:	bf00      	nop
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	24000250 	.word	0x24000250

08001e1c <MotherboardOnHeadTransmitComplete>:

void MotherboardOnHeadTransmitComplete() {
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
	mbctx.Head.FinishTransmit();
 8001e20:	4802      	ldr	r0, [pc, #8]	; (8001e2c <MotherboardOnHeadTransmitComplete+0x10>)
 8001e22:	f7ff fb2d 	bl	8001480 <_ZN13HeadInterface14FinishTransmitEv>
}
 8001e26:	bf00      	nop
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	24000250 	.word	0x24000250

08001e30 <MotherboardOnBodyTimerTick>:

void MotherboardOnBodyTimerTick() {
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
	mbctx.Body.ProcessRequests();
 8001e34:	4802      	ldr	r0, [pc, #8]	; (8001e40 <MotherboardOnBodyTimerTick+0x10>)
 8001e36:	f7ff f927 	bl	8001088 <_ZN11QueueSender15ProcessRequestsEv>
}
 8001e3a:	bf00      	nop
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	240002b0 	.word	0x240002b0

08001e44 <MotherboardOnImuTimerTick>:

void MotherboardOnImuTimerTick() {
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
	mbctx.UpdateIMU = true;
 8001e48:	4b05      	ldr	r3, [pc, #20]	; (8001e60 <MotherboardOnImuTimerTick+0x1c>)
 8001e4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e4e:	2201      	movs	r2, #1
 8001e50:	f883 2251 	strb.w	r2, [r3, #593]	; 0x251
}
 8001e54:	bf00      	nop
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	24000250 	.word	0x24000250

08001e64 <_ZNSt11_Deque_baseI7RequestSaIS0_EE11_Deque_implD1Ev>:
      struct _Deque_impl
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f000 fca8 	bl	80027c2 <_ZNSaI7RequestED1Ev>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4618      	mov	r0, r3
 8001e76:	3708      	adds	r7, #8
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <_ZNSt11_Deque_baseI7RequestSaIS0_EEC1Ev>:
      _Deque_base()
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
      : _M_impl()
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f000 fc8b 	bl	80027a2 <_ZNSt11_Deque_baseI7RequestSaIS0_EE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f000 fca3 	bl	80027da <_ZNSt11_Deque_baseI7RequestSaIS0_EE17_M_initialize_mapEj>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	4618      	mov	r0, r3
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <_ZNSt11_Deque_baseI7RequestSaIS0_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b082      	sub	sp, #8
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d010      	beq.n	8001ed0 <_ZNSt11_Deque_baseI7RequestSaIS0_EED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8001eb6:	3304      	adds	r3, #4
 8001eb8:	461a      	mov	r2, r3
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f000 fcf3 	bl	80028a6 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_M_destroy_nodesEPPS0_S4_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6819      	ldr	r1, [r3, #0]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	461a      	mov	r2, r3
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f000 fd05 	bl	80028da <_ZNSt11_Deque_baseI7RequestSaIS0_EE17_M_deallocate_mapEPPS0_j>
    }
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7ff ffc6 	bl	8001e64 <_ZNSt11_Deque_baseI7RequestSaIS0_EE11_Deque_implD1Ev>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4618      	mov	r0, r3
 8001edc:	3708      	adds	r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}

08001ee2 <_ZNSt5dequeI7RequestSaIS0_EED1Ev>:
      /**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~deque()
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	b08a      	sub	sp, #40	; 0x28
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 8001eea:	f107 0308 	add.w	r3, r7, #8
 8001eee:	6879      	ldr	r1, [r7, #4]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f000 fd0e 	bl	8002912 <_ZNSt5dequeI7RequestSaIS0_EE5beginEv>
 8001ef6:	f107 0318 	add.w	r3, r7, #24
 8001efa:	6879      	ldr	r1, [r7, #4]
 8001efc:	4618      	mov	r0, r3
 8001efe:	f000 fd17 	bl	8002930 <_ZNSt5dequeI7RequestSaIS0_EE3endEv>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4618      	mov	r0, r3
 8001f06:	f000 fd22 	bl	800294e <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	f107 0218 	add.w	r2, r7, #24
 8001f10:	f107 0108 	add.w	r1, r7, #8
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f000 fd41 	bl	800299c <_ZNSt5dequeI7RequestSaIS0_EE15_M_destroy_dataESt15_Deque_iteratorIS0_RS0_PS0_ES6_RKS1_>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7ff ffbe 	bl	8001e9e <_ZNSt11_Deque_baseI7RequestSaIS0_EED1Ev>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4618      	mov	r0, r3
 8001f26:	3728      	adds	r7, #40	; 0x28
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <_ZNSt5dequeI8ResponceSaIS0_EEC1Ev>:
      deque() = default;
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f000 fd5b 	bl	80029f2 <_ZNSt11_Deque_baseI8ResponceSaIS0_EEC1Ev>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEEC1IS3_vEEv>:
      queue(const _Sequence& __c = _Sequence())
      : c(__c) { }
#else
      template<typename _Seq = _Sequence, typename _Requires = typename
	       enable_if<is_default_constructible<_Seq>::value>::type>
	queue()
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b082      	sub	sp, #8
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
	: c() { }
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4618      	mov	r0, r3
 8001f52:	2328      	movs	r3, #40	; 0x28
 8001f54:	461a      	mov	r2, r3
 8001f56:	2100      	movs	r1, #0
 8001f58:	f018 f850 	bl	8019ffc <memset>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7ff ffe4 	bl	8001f2c <_ZNSt5dequeI8ResponceSaIS0_EEC1Ev>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	4618      	mov	r0, r3
 8001f68:	3708      	adds	r7, #8
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}

08001f6e <_ZNSt5dequeI8ResponceSaIS0_EED1Ev>:
      ~deque()
 8001f6e:	b580      	push	{r7, lr}
 8001f70:	b08a      	sub	sp, #40	; 0x28
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 8001f76:	f107 0308 	add.w	r3, r7, #8
 8001f7a:	6879      	ldr	r1, [r7, #4]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f000 fd6b 	bl	8002a58 <_ZNSt5dequeI8ResponceSaIS0_EE5beginEv>
 8001f82:	f107 0318 	add.w	r3, r7, #24
 8001f86:	6879      	ldr	r1, [r7, #4]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f000 fd74 	bl	8002a76 <_ZNSt5dequeI8ResponceSaIS0_EE3endEv>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4618      	mov	r0, r3
 8001f92:	f000 fd7f 	bl	8002a94 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 8001f96:	4603      	mov	r3, r0
 8001f98:	f107 0218 	add.w	r2, r7, #24
 8001f9c:	f107 0108 	add.w	r1, r7, #8
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f000 fd9e 	bl	8002ae2 <_ZNSt5dequeI8ResponceSaIS0_EE15_M_destroy_dataESt15_Deque_iteratorIS0_RS0_PS0_ES6_RKS1_>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f000 fd33 	bl	8002a14 <_ZNSt11_Deque_baseI8ResponceSaIS0_EED1Ev>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3728      	adds	r7, #40	; 0x28
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f000 fdad 	bl	8002b20 <_ZNSaIhEC1Ev>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f000 fdb5 	bl	8002b38 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1Ev>
	{ }
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3708      	adds	r7, #8
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <_ZNSaIhED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f000 fdbd 	bl	8002b60 <_ZN9__gnu_cxx13new_allocatorIhED1Ev>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3708      	adds	r7, #8
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}

08001ff0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	689a      	ldr	r2, [r3, #8]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	1ad3      	subs	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 8002006:	461a      	mov	r2, r3
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f000 fdb4 	bl	8002b76 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>
      }
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4618      	mov	r0, r3
 8002012:	f7fe ff0f 	bl	8000e34 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implD1Ev>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4618      	mov	r0, r3
 800201a:	3708      	adds	r7, #8
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <_ZNSt6vectorIhSaIhEED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 8002020:	b5b0      	push	{r4, r5, r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681c      	ldr	r4, [r3, #0]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4618      	mov	r0, r3
 8002034:	f000 fdb2 	bl	8002b9c <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8002038:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800203a:	461a      	mov	r2, r3
 800203c:	4629      	mov	r1, r5
 800203e:	4620      	mov	r0, r4
 8002040:	f000 fdb7 	bl	8002bb2 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	4618      	mov	r0, r3
 8002048:	f7ff ffd2 	bl	8001ff0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	4618      	mov	r0, r3
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bdb0      	pop	{r4, r5, r7, pc}

08002056 <_ZSt4moveIR7RequestEONSt16remove_referenceIT_E4typeEOS3_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8002056:	b480      	push	{r7}
 8002058:	b083      	sub	sp, #12
 800205a:	af00      	add	r7, sp, #0
 800205c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4618      	mov	r0, r3
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <_ZNSt5dequeI7RequestSaIS0_EE12emplace_backIJS0_EEEvDpOT_>:
#if __cplusplus > 201402L
      typename deque<_Tp, _Alloc>::reference
#else
      void
#endif
      deque<_Tp, _Alloc>::
 800206c:	b5b0      	push	{r4, r5, r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish._M_cur
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6a1b      	ldr	r3, [r3, #32]
 800207e:	3b14      	subs	r3, #20
	if (this->_M_impl._M_finish._M_cur
 8002080:	429a      	cmp	r2, r3
 8002082:	d012      	beq.n	80020aa <_ZNSt5dequeI7RequestSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x3e>
	  {
	    _Alloc_traits::construct(this->_M_impl,
 8002084:	687c      	ldr	r4, [r7, #4]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	699d      	ldr	r5, [r3, #24]
 800208a:	6838      	ldr	r0, [r7, #0]
 800208c:	f000 fd9f 	bl	8002bce <_ZSt7forwardI7RequestEOT_RNSt16remove_referenceIS1_E4typeE>
 8002090:	4603      	mov	r3, r0
 8002092:	461a      	mov	r2, r3
 8002094:	4629      	mov	r1, r5
 8002096:	4620      	mov	r0, r4
 8002098:	f000 fda4 	bl	8002be4 <_ZNSt16allocator_traitsISaI7RequestEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
				     this->_M_impl._M_finish._M_cur,
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish._M_cur;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	699b      	ldr	r3, [r3, #24]
 80020a0:	f103 0214 	add.w	r2, r3, #20
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	619a      	str	r2, [r3, #24]
	else
	  _M_push_back_aux(std::forward<_Args>(__args)...);
#if __cplusplus > 201402L
	return back();
#endif
      }
 80020a8:	e007      	b.n	80020ba <_ZNSt5dequeI7RequestSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x4e>
	  _M_push_back_aux(std::forward<_Args>(__args)...);
 80020aa:	6838      	ldr	r0, [r7, #0]
 80020ac:	f000 fd8f 	bl	8002bce <_ZSt7forwardI7RequestEOT_RNSt16remove_referenceIS1_E4typeE>
 80020b0:	4603      	mov	r3, r0
 80020b2:	4619      	mov	r1, r3
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f000 fda9 	bl	8002c0c <_ZNSt5dequeI7RequestSaIS0_EE16_M_push_back_auxIJS0_EEEvDpOT_>
      }
 80020ba:	bf00      	nop
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bdb0      	pop	{r4, r5, r7, pc}

080020c2 <_ZNSt5dequeI7RequestSaIS0_EE13emplace_frontIJS0_EEEvDpOT_>:
      deque<_Tp, _Alloc>::
 80020c2:	b5b0      	push	{r4, r5, r7, lr}
 80020c4:	b082      	sub	sp, #8
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
 80020ca:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_start._M_cur != this->_M_impl._M_start._M_first)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	689a      	ldr	r2, [r3, #8]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d014      	beq.n	8002102 <_ZNSt5dequeI7RequestSaIS0_EE13emplace_frontIJS0_EEEvDpOT_+0x40>
	    _Alloc_traits::construct(this->_M_impl,
 80020d8:	687c      	ldr	r4, [r7, #4]
				     this->_M_impl._M_start._M_cur - 1,
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	689b      	ldr	r3, [r3, #8]
	    _Alloc_traits::construct(this->_M_impl,
 80020de:	f1a3 0514 	sub.w	r5, r3, #20
 80020e2:	6838      	ldr	r0, [r7, #0]
 80020e4:	f000 fd73 	bl	8002bce <_ZSt7forwardI7RequestEOT_RNSt16remove_referenceIS1_E4typeE>
 80020e8:	4603      	mov	r3, r0
 80020ea:	461a      	mov	r2, r3
 80020ec:	4629      	mov	r1, r5
 80020ee:	4620      	mov	r0, r4
 80020f0:	f000 fd78 	bl	8002be4 <_ZNSt16allocator_traitsISaI7RequestEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
	    --this->_M_impl._M_start._M_cur;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	f1a3 0214 	sub.w	r2, r3, #20
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	609a      	str	r2, [r3, #8]
      }
 8002100:	e007      	b.n	8002112 <_ZNSt5dequeI7RequestSaIS0_EE13emplace_frontIJS0_EEEvDpOT_+0x50>
	  _M_push_front_aux(std::forward<_Args>(__args)...);
 8002102:	6838      	ldr	r0, [r7, #0]
 8002104:	f000 fd63 	bl	8002bce <_ZSt7forwardI7RequestEOT_RNSt16remove_referenceIS1_E4typeE>
 8002108:	4603      	mov	r3, r0
 800210a:	4619      	mov	r1, r3
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f000 fdc1 	bl	8002c94 <_ZNSt5dequeI7RequestSaIS0_EE17_M_push_front_auxIJS0_EEEvDpOT_>
      }
 8002112:	bf00      	nop
 8002114:	3708      	adds	r7, #8
 8002116:	46bd      	mov	sp, r7
 8002118:	bdb0      	pop	{r4, r5, r7, pc}

0800211a <_ZNKSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE5emptyEv>:

      /**
       *  Returns true if the %queue is empty.
       */
      _GLIBCXX_NODISCARD bool
      empty() const
 800211a:	b580      	push	{r7, lr}
 800211c:	b082      	sub	sp, #8
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
      { return c.empty(); }
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4618      	mov	r0, r3
 8002126:	f000 fdfb 	bl	8002d20 <_ZNKSt5dequeI8ResponceSaIS0_EE5emptyEv>
 800212a:	4603      	mov	r3, r0
 800212c:	4618      	mov	r0, r3
 800212e:	3708      	adds	r7, #8
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE5frontEv>:
      /**
       *  Returns a read/write reference to the data at the first
       *  element of the %queue.
       */
      reference
      front()
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	return c.front();
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4618      	mov	r0, r3
 8002140:	f000 fe00 	bl	8002d44 <_ZNSt5dequeI8ResponceSaIS0_EE5frontEv>
 8002144:	4603      	mov	r3, r0
      }
 8002146:	4618      	mov	r0, r3
 8002148:	3708      	adds	r7, #8
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}

0800214e <_ZSt4moveIR8ResponceEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 800214e:	b480      	push	{r7}
 8002150:	b083      	sub	sp, #12
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4618      	mov	r0, r3
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1EOS2_>:
	_Vector_impl(_Vector_impl&& __x) noexcept
 8002164:	b590      	push	{r4, r7, lr}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(std::move(__x)), _Vector_impl_data(std::move(__x))
 800216e:	6838      	ldr	r0, [r7, #0]
 8002170:	f000 fdfc 	bl	8002d6c <_ZSt4moveIRNSt12_Vector_baseIhSaIhEE12_Vector_implEEONSt16remove_referenceIT_E4typeEOS6_>
 8002174:	4603      	mov	r3, r0
 8002176:	4619      	mov	r1, r3
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f000 fe02 	bl	8002d82 <_ZNSaIhEC1ERKS_>
 800217e:	687c      	ldr	r4, [r7, #4]
 8002180:	6838      	ldr	r0, [r7, #0]
 8002182:	f000 fdf3 	bl	8002d6c <_ZSt4moveIRNSt12_Vector_baseIhSaIhEE12_Vector_implEEONSt16remove_referenceIT_E4typeEOS6_>
 8002186:	4603      	mov	r3, r0
 8002188:	4619      	mov	r1, r3
 800218a:	4620      	mov	r0, r4
 800218c:	f000 fe07 	bl	8002d9e <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1EOS2_>
	{ }
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4618      	mov	r0, r3
 8002194:	370c      	adds	r7, #12
 8002196:	46bd      	mov	sp, r7
 8002198:	bd90      	pop	{r4, r7, pc}

0800219a <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE3popEv>:
       *  Note that no data is returned, and if the first element's
       *  data is needed, it should be retrieved before pop() is
       *  called.
       */
      void
      pop()
 800219a:	b580      	push	{r7, lr}
 800219c:	b082      	sub	sp, #8
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	c.pop_front();
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4618      	mov	r0, r3
 80021a6:	f000 fe1d 	bl	8002de4 <_ZNSt5dequeI8ResponceSaIS0_EE9pop_frontEv>
      }
 80021aa:	bf00      	nop
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <_ZNKSt5dequeI7RequestSaIS0_EE5emptyEv>:
      /**
       *  Returns true if the %deque is empty.  (Thus begin() would
       *  equal end().)
       */
      _GLIBCXX_NODISCARD bool
      empty() const _GLIBCXX_NOEXCEPT
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b082      	sub	sp, #8
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f103 0218 	add.w	r2, r3, #24
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	3308      	adds	r3, #8
 80021c4:	4619      	mov	r1, r3
 80021c6:	4610      	mov	r0, r2
 80021c8:	f000 fe30 	bl	8002e2c <_ZSteqRKSt15_Deque_iteratorI7RequestRS0_PS0_ES5_>
 80021cc:	4603      	mov	r3, r0
 80021ce:	4618      	mov	r0, r3
 80021d0:	3708      	adds	r7, #8
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <_ZNSt5dequeI7RequestSaIS0_EE5frontEv>:
      /**
       *  Returns a read/write reference to the data at the first
       *  element of the %deque.
       */
      reference
      front() _GLIBCXX_NOEXCEPT
 80021d6:	b580      	push	{r7, lr}
 80021d8:	b086      	sub	sp, #24
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	return *begin();
 80021de:	f107 0308 	add.w	r3, r7, #8
 80021e2:	6879      	ldr	r1, [r7, #4]
 80021e4:	4618      	mov	r0, r3
 80021e6:	f000 fb94 	bl	8002912 <_ZNSt5dequeI7RequestSaIS0_EE5beginEv>
 80021ea:	f107 0308 	add.w	r3, r7, #8
 80021ee:	4618      	mov	r0, r3
 80021f0:	f000 fe30 	bl	8002e54 <_ZNKSt15_Deque_iteratorI7RequestRS0_PS0_EdeEv>
 80021f4:	4603      	mov	r3, r0
      }
 80021f6:	4618      	mov	r0, r3
 80021f8:	3718      	adds	r7, #24
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}

080021fe <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE7emplaceIJS0_EEEvDpOT_>:
	emplace(_Args&&... __args)
 80021fe:	b590      	push	{r4, r7, lr}
 8002200:	b083      	sub	sp, #12
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
 8002206:	6039      	str	r1, [r7, #0]
	{ c.emplace_back(std::forward<_Args>(__args)...); }
 8002208:	687c      	ldr	r4, [r7, #4]
 800220a:	6838      	ldr	r0, [r7, #0]
 800220c:	f000 fe2e 	bl	8002e6c <_ZSt7forwardI8ResponceEOT_RNSt16remove_referenceIS1_E4typeE>
 8002210:	4603      	mov	r3, r0
 8002212:	4619      	mov	r1, r3
 8002214:	4620      	mov	r0, r4
 8002216:	f000 fe34 	bl	8002e82 <_ZNSt5dequeI8ResponceSaIS0_EE12emplace_backIJS0_EEEvDpOT_>
 800221a:	bf00      	nop
 800221c:	370c      	adds	r7, #12
 800221e:	46bd      	mov	sp, r7
 8002220:	bd90      	pop	{r4, r7, pc}

08002222 <_ZNSt6vectorIhSaIhEE6resizeEj>:
       *  number of elements.  If the number is smaller than the
       *  %vector's current size the %vector is truncated, otherwise
       *  default constructed elements are appended.
       */
      void
      resize(size_type __new_size)
 8002222:	b580      	push	{r7, lr}
 8002224:	b082      	sub	sp, #8
 8002226:	af00      	add	r7, sp, #0
 8002228:	6078      	str	r0, [r7, #4]
 800222a:	6039      	str	r1, [r7, #0]
      {
	if (__new_size > size())
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f000 f83b 	bl	80022a8 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8002232:	4602      	mov	r2, r0
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	4293      	cmp	r3, r2
 8002238:	bf8c      	ite	hi
 800223a:	2301      	movhi	r3, #1
 800223c:	2300      	movls	r3, #0
 800223e:	b2db      	uxtb	r3, r3
 8002240:	2b00      	cmp	r3, #0
 8002242:	d00a      	beq.n	800225a <_ZNSt6vectorIhSaIhEE6resizeEj+0x38>
	  _M_default_append(__new_size - size());
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f000 f82f 	bl	80022a8 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 800224a:	4602      	mov	r2, r0
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	1a9b      	subs	r3, r3, r2
 8002250:	4619      	mov	r1, r3
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f000 fe56 	bl	8002f04 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj>
	else if (__new_size < size())
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
      }
 8002258:	e013      	b.n	8002282 <_ZNSt6vectorIhSaIhEE6resizeEj+0x60>
	else if (__new_size < size())
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f000 f824 	bl	80022a8 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8002260:	4602      	mov	r2, r0
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	4293      	cmp	r3, r2
 8002266:	bf34      	ite	cc
 8002268:	2301      	movcc	r3, #1
 800226a:	2300      	movcs	r3, #0
 800226c:	b2db      	uxtb	r3, r3
 800226e:	2b00      	cmp	r3, #0
 8002270:	d007      	beq.n	8002282 <_ZNSt6vectorIhSaIhEE6resizeEj+0x60>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	4413      	add	r3, r2
 800227a:	4619      	mov	r1, r3
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f000 fef9 	bl	8003074 <_ZNSt6vectorIhSaIhEE15_M_erase_at_endEPh>
      }
 8002282:	bf00      	nop
 8002284:	3708      	adds	r7, #8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}

0800228a <_ZNSt6vectorIhSaIhEE4dataEv>:
      /**
       *   Returns a pointer such that [data(), data() + size()) is a valid
       *   range.  For a non-empty %vector, data() == &front().
       */
      _Tp*
      data() _GLIBCXX_NOEXCEPT
 800228a:	b580      	push	{r7, lr}
 800228c:	b082      	sub	sp, #8
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
      { return _M_data_ptr(this->_M_impl._M_start); }
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4619      	mov	r1, r3
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f000 ff0b 	bl	80030b4 <_ZNKSt6vectorIhSaIhEE11_M_data_ptrIhEEPT_S4_>
 800229e:	4603      	mov	r3, r0
 80022a0:	4618      	mov	r0, r3
 80022a2:	3708      	adds	r7, #8
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <_ZNKSt6vectorIhSaIhEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	685a      	ldr	r2, [r3, #4]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	4618      	mov	r0, r3
 80022bc:	370c      	adds	r7, #12
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr

080022c6 <_ZNSt5dequeI7RequestSaIS0_EE9pop_frontEv>:
       *
       *  Note that no data is returned, and if the first element's data is
       *  needed, it should be retrieved before pop_front() is called.
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b082      	sub	sp, #8
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	if (this->_M_impl._M_start._M_cur
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	689a      	ldr	r2, [r3, #8]
	    != this->_M_impl._M_start._M_last - 1)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	691b      	ldr	r3, [r3, #16]
 80022d6:	3b14      	subs	r3, #20
	if (this->_M_impl._M_start._M_cur
 80022d8:	429a      	cmp	r2, r3
 80022da:	d011      	beq.n	8002300 <_ZNSt5dequeI7RequestSaIS0_EE9pop_frontEv+0x3a>
	  {
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	4618      	mov	r0, r3
 80022e0:	f000 fb35 	bl	800294e <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 80022e4:	4602      	mov	r2, r0
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	4619      	mov	r1, r3
 80022ec:	4610      	mov	r0, r2
 80022ee:	f000 feed 	bl	80030cc <_ZNSt16allocator_traitsISaI7RequestEE7destroyIS0_EEvRS1_PT_>
				   this->_M_impl._M_start._M_cur);
	    ++this->_M_impl._M_start._M_cur;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	f103 0214 	add.w	r2, r3, #20
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	609a      	str	r2, [r3, #8]
	  }
	else
	  _M_pop_front_aux();
      }
 80022fe:	e002      	b.n	8002306 <_ZNSt5dequeI7RequestSaIS0_EE9pop_frontEv+0x40>
	  _M_pop_front_aux();
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f000 fef0 	bl	80030e6 <_ZNSt5dequeI7RequestSaIS0_EE16_M_pop_front_auxEv>
      }
 8002306:	bf00      	nop
 8002308:	3708      	adds	r7, #8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}

0800230e <_ZN9__gnu_cxx14__alloc_traitsISaIhEhE27_S_propagate_on_copy_assignEv>:
    static constexpr bool _S_propagate_on_copy_assign()
 800230e:	b480      	push	{r7}
 8002310:	af00      	add	r7, sp, #0
    { return _Base_type::propagate_on_container_copy_assignment::value; }
 8002312:	2300      	movs	r3, #0
 8002314:	4618      	mov	r0, r3
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr

0800231e <_ZNSt6vectorIhSaIhEEaSERKS1_>:
      return __first;
    }

  template<typename _Tp, typename _Alloc>
    vector<_Tp, _Alloc>&
    vector<_Tp, _Alloc>::
 800231e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002320:	b085      	sub	sp, #20
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
 8002326:	6039      	str	r1, [r7, #0]
    operator=(const vector<_Tp, _Alloc>& __x)
    {
      if (&__x != this)
 8002328:	683a      	ldr	r2, [r7, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	429a      	cmp	r2, r3
 800232e:	f000 80e0 	beq.w	80024f2 <_ZNSt6vectorIhSaIhEEaSERKS1_+0x1d4>
	{
	  _GLIBCXX_ASAN_ANNOTATE_REINIT;
#if __cplusplus >= 201103L
	  if (_Alloc_traits::_S_propagate_on_copy_assign())
 8002332:	f7ff ffec 	bl	800230e <_ZN9__gnu_cxx14__alloc_traitsISaIhEhE27_S_propagate_on_copy_assignEv>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d042      	beq.n	80023c2 <_ZNSt6vectorIhSaIhEEaSERKS1_+0xa4>
	    {
	      if (!_Alloc_traits::_S_always_equal()
 800233c:	f7ff f8ae 	bl	800149c <_ZN9__gnu_cxx14__alloc_traitsISaIhEhE15_S_always_equalEv>
 8002340:	4603      	mov	r3, r0
 8002342:	f083 0301 	eor.w	r3, r3, #1
 8002346:	b2db      	uxtb	r3, r3
	          && _M_get_Tp_allocator() != __x._M_get_Tp_allocator())
 8002348:	2b00      	cmp	r3, #0
 800234a:	d012      	beq.n	8002372 <_ZNSt6vectorIhSaIhEEaSERKS1_+0x54>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	4618      	mov	r0, r3
 8002350:	f000 fc24 	bl	8002b9c <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8002354:	4604      	mov	r4, r0
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	4618      	mov	r0, r3
 800235a:	f000 feec 	bl	8003136 <_ZNKSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 800235e:	4603      	mov	r3, r0
 8002360:	4619      	mov	r1, r3
 8002362:	4620      	mov	r0, r4
 8002364:	f000 fef2 	bl	800314c <_ZStneRKSaIhES1_>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <_ZNSt6vectorIhSaIhEEaSERKS1_+0x54>
 800236e:	2301      	movs	r3, #1
 8002370:	e000      	b.n	8002374 <_ZNSt6vectorIhSaIhEEaSERKS1_+0x56>
 8002372:	2300      	movs	r3, #0
	      if (!_Alloc_traits::_S_always_equal()
 8002374:	2b00      	cmp	r3, #0
 8002376:	d016      	beq.n	80023a6 <_ZNSt6vectorIhSaIhEEaSERKS1_+0x88>
	        {
		  // replacement allocator cannot free existing storage
		  this->clear();
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f000 fef3 	bl	8003164 <_ZNSt6vectorIhSaIhEE5clearEv>
		  _M_deallocate(this->_M_impl._M_start,
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6819      	ldr	r1, [r3, #0]
				this->_M_impl._M_end_of_storage
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	689a      	ldr	r2, [r3, #8]
				- this->_M_impl._M_start);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	1ad3      	subs	r3, r2, r3
		  _M_deallocate(this->_M_impl._M_start,
 800238e:	461a      	mov	r2, r3
 8002390:	f000 fbf1 	bl	8002b76 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>
		  this->_M_impl._M_start = nullptr;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	601a      	str	r2, [r3, #0]
		  this->_M_impl._M_finish = nullptr;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	605a      	str	r2, [r3, #4]
		  this->_M_impl._M_end_of_storage = nullptr;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2200      	movs	r2, #0
 80023a4:	609a      	str	r2, [r3, #8]
		}
	      std::__alloc_on_copy(_M_get_Tp_allocator(),
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f000 fbf7 	bl	8002b9c <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80023ae:	4604      	mov	r4, r0
				   __x._M_get_Tp_allocator());
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	4618      	mov	r0, r3
 80023b4:	f000 febf 	bl	8003136 <_ZNKSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80023b8:	4603      	mov	r3, r0
	      std::__alloc_on_copy(_M_get_Tp_allocator(),
 80023ba:	4619      	mov	r1, r3
 80023bc:	4620      	mov	r0, r4
 80023be:	f000 fedf 	bl	8003180 <_ZSt15__alloc_on_copyISaIhEEvRT_RKS1_>
	    }
#endif
	  const size_type __xlen = __x.size();
 80023c2:	6838      	ldr	r0, [r7, #0]
 80023c4:	f7ff ff70 	bl	80022a8 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 80023c8:	60f8      	str	r0, [r7, #12]
	  if (__xlen > capacity())
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f000 fee6 	bl	800319c <_ZNKSt6vectorIhSaIhEE8capacityEv>
 80023d0:	4602      	mov	r2, r0
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	4293      	cmp	r3, r2
 80023d6:	bf8c      	ite	hi
 80023d8:	2301      	movhi	r3, #1
 80023da:	2300      	movls	r3, #0
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d030      	beq.n	8002444 <_ZNSt6vectorIhSaIhEEaSERKS1_+0x126>
	    {
	      pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
 80023e2:	6838      	ldr	r0, [r7, #0]
 80023e4:	f000 fee9 	bl	80031ba <_ZNKSt6vectorIhSaIhEE5beginEv>
 80023e8:	4604      	mov	r4, r0
 80023ea:	6838      	ldr	r0, [r7, #0]
 80023ec:	f000 fef5 	bl	80031da <_ZNKSt6vectorIhSaIhEE3endEv>
 80023f0:	4603      	mov	r3, r0
 80023f2:	4622      	mov	r2, r4
 80023f4:	68f9      	ldr	r1, [r7, #12]
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f000 ff00 	bl	80031fc <_ZNSt6vectorIhSaIhEE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKhS1_EEEEPhjT_S9_>
 80023fc:	60b8      	str	r0, [r7, #8]
						   __x.end());
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681c      	ldr	r4, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685d      	ldr	r5, [r3, #4]
			    _M_get_Tp_allocator());
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4618      	mov	r0, r3
 800240a:	f000 fbc7 	bl	8002b9c <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 800240e:	4603      	mov	r3, r0
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002410:	461a      	mov	r2, r3
 8002412:	4629      	mov	r1, r5
 8002414:	4620      	mov	r0, r4
 8002416:	f000 fbcc 	bl	8002bb2 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
	      _M_deallocate(this->_M_impl._M_start,
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6819      	ldr	r1, [r3, #0]
			    this->_M_impl._M_end_of_storage
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	689a      	ldr	r2, [r3, #8]
			    - this->_M_impl._M_start);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	1ad3      	subs	r3, r2, r3
	      _M_deallocate(this->_M_impl._M_start,
 800242a:	461a      	mov	r2, r3
 800242c:	f000 fba3 	bl	8002b76 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>
	      this->_M_impl._M_start = __tmp;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	68ba      	ldr	r2, [r7, #8]
 8002434:	601a      	str	r2, [r3, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	441a      	add	r2, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	609a      	str	r2, [r3, #8]
 8002442:	e050      	b.n	80024e6 <_ZNSt6vectorIhSaIhEEaSERKS1_+0x1c8>
	    }
	  else if (size() >= __xlen)
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f7ff ff2f 	bl	80022a8 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 800244a:	4602      	mov	r2, r0
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	4293      	cmp	r3, r2
 8002450:	bf94      	ite	ls
 8002452:	2301      	movls	r3, #1
 8002454:	2300      	movhi	r3, #0
 8002456:	b2db      	uxtb	r3, r3
 8002458:	2b00      	cmp	r3, #0
 800245a:	d020      	beq.n	800249e <_ZNSt6vectorIhSaIhEEaSERKS1_+0x180>
	    {
	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 800245c:	6838      	ldr	r0, [r7, #0]
 800245e:	f000 feac 	bl	80031ba <_ZNKSt6vectorIhSaIhEE5beginEv>
 8002462:	4604      	mov	r4, r0
 8002464:	6838      	ldr	r0, [r7, #0]
 8002466:	f000 feb8 	bl	80031da <_ZNKSt6vectorIhSaIhEE3endEv>
 800246a:	4605      	mov	r5, r0
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f000 fee1 	bl	8003234 <_ZNSt6vectorIhSaIhEE5beginEv>
 8002472:	4603      	mov	r3, r0
 8002474:	461a      	mov	r2, r3
 8002476:	4629      	mov	r1, r5
 8002478:	4620      	mov	r0, r4
 800247a:	f000 feeb 	bl	8003254 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEENS1_IPhS6_EEET0_T_SB_SA_>
 800247e:	4604      	mov	r4, r0
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f000 feff 	bl	8003284 <_ZNSt6vectorIhSaIhEE3endEv>
 8002486:	4605      	mov	r5, r0
			    end(), _M_get_Tp_allocator());
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	4618      	mov	r0, r3
 800248c:	f000 fb86 	bl	8002b9c <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8002490:	4603      	mov	r3, r0
	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 8002492:	461a      	mov	r2, r3
 8002494:	4629      	mov	r1, r5
 8002496:	4620      	mov	r0, r4
 8002498:	f000 ff05 	bl	80032a6 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEhEvT_S7_RSaIT0_E>
 800249c:	e023      	b.n	80024e6 <_ZNSt6vectorIhSaIhEEaSERKS1_+0x1c8>
	    }
	  else
	    {
	      std::copy(__x._M_impl._M_start, __x._M_impl._M_start + size(),
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	681d      	ldr	r5, [r3, #0]
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	681c      	ldr	r4, [r3, #0]
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f7ff fefe 	bl	80022a8 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 80024ac:	4603      	mov	r3, r0
 80024ae:	18e1      	adds	r1, r4, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	461a      	mov	r2, r3
 80024b6:	4628      	mov	r0, r5
 80024b8:	f000 ff03 	bl	80032c2 <_ZSt4copyIPhS0_ET0_T_S2_S1_>
			this->_M_impl._M_start);
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	681c      	ldr	r4, [r3, #0]
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f7ff fef1 	bl	80022a8 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 80024c6:	4603      	mov	r3, r0
 80024c8:	441c      	add	r4, r3
					  __x._M_impl._M_finish,
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	685d      	ldr	r5, [r3, #4]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685e      	ldr	r6, [r3, #4]
					  this->_M_impl._M_finish,
					  _M_get_Tp_allocator());
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4618      	mov	r0, r3
 80024d6:	f000 fb61 	bl	8002b9c <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80024da:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 80024dc:	4632      	mov	r2, r6
 80024de:	4629      	mov	r1, r5
 80024e0:	4620      	mov	r0, r4
 80024e2:	f000 ff06 	bl	80032f2 <_ZSt22__uninitialized_copy_aIPhS0_hET0_T_S2_S1_RSaIT1_E>
	    }
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	441a      	add	r2, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	605a      	str	r2, [r3, #4]
	}
      return *this;
 80024f2:	687b      	ldr	r3, [r7, #4]
    }
 80024f4:	4618      	mov	r0, r3
 80024f6:	3714      	adds	r7, #20
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080024fc <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEEC1IS3_vEEv>:
	queue()
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
	: c() { }
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	4618      	mov	r0, r3
 8002508:	2328      	movs	r3, #40	; 0x28
 800250a:	461a      	mov	r2, r3
 800250c:	2100      	movs	r1, #0
 800250e:	f017 fd75 	bl	8019ffc <memset>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4618      	mov	r0, r3
 8002516:	f7fe fc73 	bl	8000e00 <_ZNSt5dequeI7RequestSaIS0_EEC1Ev>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4618      	mov	r0, r3
 800251e:	3708      	adds	r7, #8
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <_ZNKSt5queueI7RequestSt5dequeIS0_SaIS0_EEE5emptyEv>:
      empty() const
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
      { return c.empty(); }
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	4618      	mov	r0, r3
 8002530:	f7ff fe3f 	bl	80021b2 <_ZNKSt5dequeI7RequestSaIS0_EE5emptyEv>
 8002534:	4603      	mov	r3, r0
 8002536:	4618      	mov	r0, r3
 8002538:	3708      	adds	r7, #8
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}

0800253e <_ZNKSt6vectorIhSaIhEE4dataEv>:

      const _Tp*
      data() const _GLIBCXX_NOEXCEPT
 800253e:	b580      	push	{r7, lr}
 8002540:	b082      	sub	sp, #8
 8002542:	af00      	add	r7, sp, #0
 8002544:	6078      	str	r0, [r7, #4]
      { return _M_data_ptr(this->_M_impl._M_start); }
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4619      	mov	r1, r3
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f000 fdb1 	bl	80030b4 <_ZNKSt6vectorIhSaIhEE11_M_data_ptrIhEEPT_S4_>
 8002552:	4603      	mov	r3, r0
 8002554:	4618      	mov	r0, r3
 8002556:	3708      	adds	r7, #8
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}

0800255c <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEE5frontEv>:
      front()
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
	return c.front();
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	4618      	mov	r0, r3
 8002568:	f7ff fe35 	bl	80021d6 <_ZNSt5dequeI7RequestSaIS0_EE5frontEv>
 800256c:	4603      	mov	r3, r0
      }
 800256e:	4618      	mov	r0, r3
 8002570:	3708      	adds	r7, #8
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}

08002576 <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEE3popEv>:
      pop()
 8002576:	b580      	push	{r7, lr}
 8002578:	b082      	sub	sp, #8
 800257a:	af00      	add	r7, sp, #0
 800257c:	6078      	str	r0, [r7, #4]
	c.pop_front();
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4618      	mov	r0, r3
 8002582:	f7ff fea0 	bl	80022c6 <_ZNSt5dequeI7RequestSaIS0_EE9pop_frontEv>
      }
 8002586:	bf00      	nop
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}

0800258e <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEE4pushEOS0_>:
      push(value_type&& __x)
 800258e:	b590      	push	{r4, r7, lr}
 8002590:	b083      	sub	sp, #12
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]
 8002596:	6039      	str	r1, [r7, #0]
      { c.push_back(std::move(__x)); }
 8002598:	687c      	ldr	r4, [r7, #4]
 800259a:	6838      	ldr	r0, [r7, #0]
 800259c:	f7ff fd5b 	bl	8002056 <_ZSt4moveIR7RequestEONSt16remove_referenceIT_E4typeEOS3_>
 80025a0:	4603      	mov	r3, r0
 80025a2:	4619      	mov	r1, r3
 80025a4:	4620      	mov	r0, r4
 80025a6:	f000 feb5 	bl	8003314 <_ZNSt5dequeI7RequestSaIS0_EE9push_backEOS0_>
 80025aa:	bf00      	nop
 80025ac:	370c      	adds	r7, #12
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd90      	pop	{r4, r7, pc}

080025b2 <_ZNSt6vectorIhSaIhEEaSEOS1_>:
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 80025b2:	b590      	push	{r4, r7, lr}
 80025b4:	b085      	sub	sp, #20
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
 80025ba:	6039      	str	r1, [r7, #0]
	constexpr bool __move_storage =
 80025bc:	2301      	movs	r3, #1
 80025be:	73fb      	strb	r3, [r7, #15]
	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 80025c0:	6838      	ldr	r0, [r7, #0]
 80025c2:	f000 feb8 	bl	8003336 <_ZSt4moveIRSt6vectorIhSaIhEEEONSt16remove_referenceIT_E4typeEOS5_>
 80025c6:	4603      	mov	r3, r0
 80025c8:	4622      	mov	r2, r4
 80025ca:	4619      	mov	r1, r3
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f000 febd 	bl	800334c <_ZNSt6vectorIhSaIhEE14_M_move_assignEOS1_St17integral_constantIbLb1EE>
	return *this;
 80025d2:	687b      	ldr	r3, [r7, #4]
      }
 80025d4:	4618      	mov	r0, r3
 80025d6:	3714      	adds	r7, #20
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd90      	pop	{r4, r7, pc}

080025dc <_ZNSt5dequeI8IMUFrameSaIS0_EE10push_frontEOS0_>:
      push_front(value_type&& __x)
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	6039      	str	r1, [r7, #0]
      { emplace_front(std::move(__x)); }
 80025e6:	6838      	ldr	r0, [r7, #0]
 80025e8:	f000 feee 	bl	80033c8 <_ZSt4moveIR8IMUFrameEONSt16remove_referenceIT_E4typeEOS3_>
 80025ec:	4603      	mov	r3, r0
 80025ee:	4619      	mov	r1, r3
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f000 fef4 	bl	80033de <_ZNSt5dequeI8IMUFrameSaIS0_EE13emplace_frontIJS0_EEEvDpOT_>
 80025f6:	bf00      	nop
 80025f8:	3708      	adds	r7, #8
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <_ZNKSt5dequeI8IMUFrameSaIS0_EE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 80025fe:	b580      	push	{r7, lr}
 8002600:	b082      	sub	sp, #8
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f103 0218 	add.w	r2, r3, #24
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	3308      	adds	r3, #8
 8002610:	4619      	mov	r1, r3
 8002612:	4610      	mov	r0, r2
 8002614:	f000 ff1a 	bl	800344c <_ZSteqRKSt15_Deque_iteratorI8IMUFrameRS0_PS0_ES5_>
 8002618:	4603      	mov	r3, r0
 800261a:	4618      	mov	r0, r3
 800261c:	3708      	adds	r7, #8
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}

08002622 <_ZNKSt5dequeI8IMUFrameSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8002622:	b580      	push	{r7, lr}
 8002624:	b082      	sub	sp, #8
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	f103 0218 	add.w	r2, r3, #24
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	3308      	adds	r3, #8
 8002634:	4619      	mov	r1, r3
 8002636:	4610      	mov	r0, r2
 8002638:	f000 ff1c 	bl	8003474 <_ZStmiRKSt15_Deque_iteratorI8IMUFrameRS0_PS0_ES5_>
 800263c:	4603      	mov	r3, r0
 800263e:	4618      	mov	r0, r3
 8002640:	3708      	adds	r7, #8
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}

08002646 <_ZNKSt5dequeI8IMUFrameSaIS0_EEixEj>:
      operator[](size_type __n) const _GLIBCXX_NOEXCEPT
 8002646:	b580      	push	{r7, lr}
 8002648:	b082      	sub	sp, #8
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]
 800264e:	6039      	str	r1, [r7, #0]
	return this->_M_impl._M_start[difference_type(__n)];
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	3308      	adds	r3, #8
 8002654:	683a      	ldr	r2, [r7, #0]
 8002656:	4611      	mov	r1, r2
 8002658:	4618      	mov	r0, r3
 800265a:	f000 ff37 	bl	80034cc <_ZNKSt15_Deque_iteratorI8IMUFrameRS0_PS0_EixEi>
 800265e:	4603      	mov	r3, r0
      }
 8002660:	4618      	mov	r0, r3
 8002662:	3708      	adds	r7, #8
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE11_Deque_implD1Ev>:
      struct _Deque_impl
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f000 ff51 	bl	8003518 <_ZNSaI8IMUFrameED1Ev>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4618      	mov	r0, r3
 800267a:	3708      	adds	r7, #8
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}

08002680 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EEC1Ev>:
      _Deque_base()
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
      : _M_impl()
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	4618      	mov	r0, r3
 800268c:	f000 ff34 	bl	80034f8 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 8002690:	2100      	movs	r1, #0
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f000 ff4c 	bl	8003530 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE17_M_initialize_mapEj>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	4618      	mov	r0, r3
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}

080026a2 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 80026a2:	b580      	push	{r7, lr}
 80026a4:	b082      	sub	sp, #8
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d010      	beq.n	80026d4 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 80026ba:	3304      	adds	r3, #4
 80026bc:	461a      	mov	r2, r3
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f000 ff9c 	bl	80035fc <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_M_destroy_nodesEPPS0_S4_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6819      	ldr	r1, [r3, #0]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	461a      	mov	r2, r3
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f000 ffae 	bl	8003630 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE17_M_deallocate_mapEPPS0_j>
    }
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7ff ffc6 	bl	8002668 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE11_Deque_implD1Ev>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	4618      	mov	r0, r3
 80026e0:	3708      	adds	r7, #8
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}

080026e6 <_ZNSt5dequeI8IMUFrameSaIS0_EED1Ev>:
      ~deque()
 80026e6:	b580      	push	{r7, lr}
 80026e8:	b08a      	sub	sp, #40	; 0x28
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 80026ee:	f107 0308 	add.w	r3, r7, #8
 80026f2:	6879      	ldr	r1, [r7, #4]
 80026f4:	4618      	mov	r0, r3
 80026f6:	f000 ffb7 	bl	8003668 <_ZNSt5dequeI8IMUFrameSaIS0_EE5beginEv>
 80026fa:	f107 0318 	add.w	r3, r7, #24
 80026fe:	6879      	ldr	r1, [r7, #4]
 8002700:	4618      	mov	r0, r3
 8002702:	f000 ffc0 	bl	8003686 <_ZNSt5dequeI8IMUFrameSaIS0_EE3endEv>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4618      	mov	r0, r3
 800270a:	f000 fe94 	bl	8003436 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE19_M_get_Tp_allocatorEv>
 800270e:	4603      	mov	r3, r0
 8002710:	f107 0218 	add.w	r2, r7, #24
 8002714:	f107 0108 	add.w	r1, r7, #8
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f000 ffdf 	bl	80036dc <_ZNSt5dequeI8IMUFrameSaIS0_EE15_M_destroy_dataESt15_Deque_iteratorIS0_RS0_PS0_ES6_RKS1_>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4618      	mov	r0, r3
 8002722:	f7ff ffbe 	bl	80026a2 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EED1Ev>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4618      	mov	r0, r3
 800272a:	3728      	adds	r7, #40	; 0x28
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <_ZNSt5dequeI7RequestSaIS0_EEaSEOS2_>:
      operator=(deque&& __x) noexcept(_Alloc_traits::_S_always_equal())
 8002730:	b590      	push	{r4, r7, lr}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
	_M_move_assign1(std::move(__x), __always_equal{});
 800273a:	6838      	ldr	r0, [r7, #0]
 800273c:	f000 ffdb 	bl	80036f6 <_ZSt4moveIRSt5dequeI7RequestSaIS1_EEEONSt16remove_referenceIT_E4typeEOS6_>
 8002740:	4603      	mov	r3, r0
 8002742:	4622      	mov	r2, r4
 8002744:	4619      	mov	r1, r3
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f000 ffe0 	bl	800370c <_ZNSt5dequeI7RequestSaIS0_EE15_M_move_assign1EOS2_St17integral_constantIbLb1EE>
	return *this;
 800274c:	687b      	ldr	r3, [r7, #4]
      }
 800274e:	4618      	mov	r0, r3
 8002750:	370c      	adds	r7, #12
 8002752:	46bd      	mov	sp, r7
 8002754:	bd90      	pop	{r4, r7, pc}

08002756 <_ZNSt5dequeI8ResponceSaIS0_EEaSEOS2_>:
      operator=(deque&& __x) noexcept(_Alloc_traits::_S_always_equal())
 8002756:	b590      	push	{r4, r7, lr}
 8002758:	b083      	sub	sp, #12
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
 800275e:	6039      	str	r1, [r7, #0]
	_M_move_assign1(std::move(__x), __always_equal{});
 8002760:	6838      	ldr	r0, [r7, #0]
 8002762:	f000 fff4 	bl	800374e <_ZSt4moveIRSt5dequeI8ResponceSaIS1_EEEONSt16remove_referenceIT_E4typeEOS6_>
 8002766:	4603      	mov	r3, r0
 8002768:	4622      	mov	r2, r4
 800276a:	4619      	mov	r1, r3
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f000 fff9 	bl	8003764 <_ZNSt5dequeI8ResponceSaIS0_EE15_M_move_assign1EOS2_St17integral_constantIbLb1EE>
	return *this;
 8002772:	687b      	ldr	r3, [r7, #4]
      }
 8002774:	4618      	mov	r0, r3
 8002776:	370c      	adds	r7, #12
 8002778:	46bd      	mov	sp, r7
 800277a:	bd90      	pop	{r4, r7, pc}

0800277c <_ZNSt5dequeI8IMUFrameSaIS0_EEaSEOS2_>:
      operator=(deque&& __x) noexcept(_Alloc_traits::_S_always_equal())
 800277c:	b590      	push	{r4, r7, lr}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	6039      	str	r1, [r7, #0]
	_M_move_assign1(std::move(__x), __always_equal{});
 8002786:	6838      	ldr	r0, [r7, #0]
 8002788:	f001 f80d 	bl	80037a6 <_ZSt4moveIRSt5dequeI8IMUFrameSaIS1_EEEONSt16remove_referenceIT_E4typeEOS6_>
 800278c:	4603      	mov	r3, r0
 800278e:	4622      	mov	r2, r4
 8002790:	4619      	mov	r1, r3
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f001 f812 	bl	80037bc <_ZNSt5dequeI8IMUFrameSaIS0_EE15_M_move_assign1EOS2_St17integral_constantIbLb1EE>
	return *this;
 8002798:	687b      	ldr	r3, [r7, #4]
      }
 800279a:	4618      	mov	r0, r3
 800279c:	370c      	adds	r7, #12
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd90      	pop	{r4, r7, pc}

080027a2 <_ZNSt11_Deque_baseI7RequestSaIS0_EE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 80027a2:	b580      	push	{r7, lr}
 80027a4:	b082      	sub	sp, #8
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f001 f827 	bl	80037fe <_ZNSaI7RequestEC1Ev>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f001 f82f 	bl	8003816 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_Deque_impl_dataC1Ev>
	{ }
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	4618      	mov	r0, r3
 80027bc:	3708      	adds	r7, #8
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}

080027c2 <_ZNSaI7RequestED1Ev>:
 80027c2:	b580      	push	{r7, lr}
 80027c4:	b082      	sub	sp, #8
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f001 f83c 	bl	8003848 <_ZN9__gnu_cxx13new_allocatorI7RequestED1Ev>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	4618      	mov	r0, r3
 80027d4:	3708      	adds	r7, #8
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <_ZNSt11_Deque_baseI7RequestSaIS0_EE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 80027da:	b590      	push	{r4, r7, lr}
 80027dc:	b089      	sub	sp, #36	; 0x24
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
 80027e2:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 80027e4:	2014      	movs	r0, #20
 80027e6:	f7fe faf6 	bl	8000dd6 <_ZSt16__deque_buf_sizej>
 80027ea:	4602      	mov	r2, r0
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80027f2:	3301      	adds	r3, #1
 80027f4:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 80027f6:	2308      	movs	r3, #8
 80027f8:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	3302      	adds	r3, #2
 80027fe:	613b      	str	r3, [r7, #16]
 8002800:	f107 0210 	add.w	r2, r7, #16
 8002804:	f107 030c 	add.w	r3, r7, #12
 8002808:	4611      	mov	r1, r2
 800280a:	4618      	mov	r0, r3
 800280c:	f001 f827 	bl	800385e <_ZSt3maxIjERKT_S2_S2_>
 8002810:	4603      	mov	r3, r0
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	4619      	mov	r1, r3
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f001 f831 	bl	8003886 <_ZNSt11_Deque_baseI7RequestSaIS0_EE15_M_allocate_mapEj>
 8002824:	4602      	mov	r2, r0
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6859      	ldr	r1, [r3, #4]
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	1acb      	subs	r3, r1, r3
 8002836:	085b      	lsrs	r3, r3, #1
 8002838:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 800283a:	4413      	add	r3, r2
 800283c:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	69ba      	ldr	r2, [r7, #24]
 8002844:	4413      	add	r3, r2
 8002846:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 8002848:	697a      	ldr	r2, [r7, #20]
 800284a:	69b9      	ldr	r1, [r7, #24]
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f001 f837 	bl	80038c0 <_ZNSt11_Deque_baseI7RequestSaIS0_EE15_M_create_nodesEPPS0_S4_>
      this->_M_impl._M_start._M_set_node(__nstart);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	3308      	adds	r3, #8
 8002856:	69b9      	ldr	r1, [r7, #24]
 8002858:	4618      	mov	r0, r3
 800285a:	f001 f84b 	bl	80038f4 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f103 0218 	add.w	r2, r3, #24
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	3b04      	subs	r3, #4
 8002868:	4619      	mov	r1, r3
 800286a:	4610      	mov	r0, r2
 800286c:	f001 f842 	bl	80038f4 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	68da      	ldr	r2, [r3, #12]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 800287c:	2014      	movs	r0, #20
 800287e:	f7fe faaa 	bl	8000dd6 <_ZSt16__deque_buf_sizej>
 8002882:	4602      	mov	r2, r0
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	fbb3 f1f2 	udiv	r1, r3, r2
 800288a:	fb01 f202 	mul.w	r2, r1, r2
 800288e:	1a9a      	subs	r2, r3, r2
					+ __num_elements
 8002890:	4613      	mov	r3, r2
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	4413      	add	r3, r2
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	619a      	str	r2, [r3, #24]
    }
 800289e:	bf00      	nop
 80028a0:	3724      	adds	r7, #36	; 0x24
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd90      	pop	{r4, r7, pc}

080028a6 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_M_destroy_nodesEPPS0_S4_>:
    _Deque_base<_Tp, _Alloc>::
 80028a6:	b580      	push	{r7, lr}
 80028a8:	b086      	sub	sp, #24
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	60f8      	str	r0, [r7, #12]
 80028ae:	60b9      	str	r1, [r7, #8]
 80028b0:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	617b      	str	r3, [r7, #20]
 80028b6:	697a      	ldr	r2, [r7, #20]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d209      	bcs.n	80028d2 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_M_destroy_nodesEPPS0_S4_+0x2c>
	_M_deallocate_node(*__n);
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4619      	mov	r1, r3
 80028c4:	68f8      	ldr	r0, [r7, #12]
 80028c6:	f001 f831 	bl	800392c <_ZNSt11_Deque_baseI7RequestSaIS0_EE18_M_deallocate_nodeEPS0_>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	3304      	adds	r3, #4
 80028ce:	617b      	str	r3, [r7, #20]
 80028d0:	e7f1      	b.n	80028b6 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_M_destroy_nodesEPPS0_S4_+0x10>
    }
 80028d2:	bf00      	nop
 80028d4:	3718      	adds	r7, #24
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}

080028da <_ZNSt11_Deque_baseI7RequestSaIS0_EE17_M_deallocate_mapEPPS0_j>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 80028da:	b580      	push	{r7, lr}
 80028dc:	b086      	sub	sp, #24
 80028de:	af00      	add	r7, sp, #0
 80028e0:	60f8      	str	r0, [r7, #12]
 80028e2:	60b9      	str	r1, [r7, #8]
 80028e4:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 80028e6:	f107 0314 	add.w	r3, r7, #20
 80028ea:	68f9      	ldr	r1, [r7, #12]
 80028ec:	4618      	mov	r0, r3
 80028ee:	f001 f830 	bl	8003952 <_ZNKSt11_Deque_baseI7RequestSaIS0_EE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 80028f2:	f107 0314 	add.w	r3, r7, #20
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	68b9      	ldr	r1, [r7, #8]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f001 f846 	bl	800398c <_ZNSt16allocator_traitsISaIP7RequestEE10deallocateERS2_PS1_j>
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8002900:	f107 0314 	add.w	r3, r7, #20
 8002904:	4618      	mov	r0, r3
 8002906:	f001 f835 	bl	8003974 <_ZNSaIP7RequestED1Ev>
      }
 800290a:	bf00      	nop
 800290c:	3718      	adds	r7, #24
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}

08002912 <_ZNSt5dequeI7RequestSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8002912:	b580      	push	{r7, lr}
 8002914:	b082      	sub	sp, #8
 8002916:	af00      	add	r7, sp, #0
 8002918:	6078      	str	r0, [r7, #4]
 800291a:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	3308      	adds	r3, #8
 8002920:	4619      	mov	r1, r3
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f000 f81e 	bl	8002964 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1ERKS3_>
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	3708      	adds	r7, #8
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}

08002930 <_ZNSt5dequeI7RequestSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	3318      	adds	r3, #24
 800293e:	4619      	mov	r1, r3
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f000 f80f 	bl	8002964 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1ERKS3_>
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	3708      	adds	r7, #8
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800294e:	b480      	push	{r7}
 8002950:	b083      	sub	sp, #12
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4618      	mov	r0, r3
 800295a:	370c      	adds	r7, #12
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr

08002964 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1ERKS3_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	605a      	str	r2, [r3, #4]
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	689a      	ldr	r2, [r3, #8]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	609a      	str	r2, [r3, #8]
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	68da      	ldr	r2, [r3, #12]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	60da      	str	r2, [r3, #12]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4618      	mov	r0, r3
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <_ZNSt5dequeI7RequestSaIS0_EE15_M_destroy_dataESt15_Deque_iteratorIS0_RS0_PS0_ES6_RKS1_>:
	void
	_M_destroy_data(iterator __first, iterator __last, const _Alloc1&)
	{ _M_destroy_data_aux(__first, __last); }

      void
      _M_destroy_data(iterator __first, iterator __last,
 800299c:	b580      	push	{r7, lr}
 800299e:	b08c      	sub	sp, #48	; 0x30
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	60f8      	str	r0, [r7, #12]
 80029a4:	60b9      	str	r1, [r7, #8]
 80029a6:	607a      	str	r2, [r7, #4]
 80029a8:	603b      	str	r3, [r7, #0]
		      const std::allocator<_Tp>&)
      {
	if (!__has_trivial_destructor(value_type))
	  _M_destroy_data_aux(__first, __last);
 80029aa:	f107 0310 	add.w	r3, r7, #16
 80029ae:	68b9      	ldr	r1, [r7, #8]
 80029b0:	4618      	mov	r0, r3
 80029b2:	f7ff ffd7 	bl	8002964 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1ERKS3_>
 80029b6:	f107 0320 	add.w	r3, r7, #32
 80029ba:	6879      	ldr	r1, [r7, #4]
 80029bc:	4618      	mov	r0, r3
 80029be:	f7ff ffd1 	bl	8002964 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1ERKS3_>
 80029c2:	f107 0220 	add.w	r2, r7, #32
 80029c6:	f107 0310 	add.w	r3, r7, #16
 80029ca:	4619      	mov	r1, r3
 80029cc:	68f8      	ldr	r0, [r7, #12]
 80029ce:	f000 ffec 	bl	80039aa <_ZNSt5dequeI7RequestSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_>
      }
 80029d2:	bf00      	nop
 80029d4:	3730      	adds	r7, #48	; 0x30
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}

080029da <_ZNSt11_Deque_baseI8ResponceSaIS0_EE11_Deque_implD1Ev>:
      struct _Deque_impl
 80029da:	b580      	push	{r7, lr}
 80029dc:	b082      	sub	sp, #8
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f001 f84f 	bl	8003a86 <_ZNSaI8ResponceED1Ev>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	4618      	mov	r0, r3
 80029ec:	3708      	adds	r7, #8
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}

080029f2 <_ZNSt11_Deque_baseI8ResponceSaIS0_EEC1Ev>:
      _Deque_base()
 80029f2:	b580      	push	{r7, lr}
 80029f4:	b082      	sub	sp, #8
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
      : _M_impl()
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4618      	mov	r0, r3
 80029fe:	f001 f832 	bl	8003a66 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 8002a02:	2100      	movs	r1, #0
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f001 f84a 	bl	8003a9e <_ZNSt11_Deque_baseI8ResponceSaIS0_EE17_M_initialize_mapEj>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3708      	adds	r7, #8
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <_ZNSt11_Deque_baseI8ResponceSaIS0_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d010      	beq.n	8002a46 <_ZNSt11_Deque_baseI8ResponceSaIS0_EED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8002a2c:	3304      	adds	r3, #4
 8002a2e:	461a      	mov	r2, r3
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f001 f897 	bl	8003b64 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_M_destroy_nodesEPPS0_S4_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6819      	ldr	r1, [r3, #0]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	461a      	mov	r2, r3
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f001 f8a9 	bl	8003b98 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE17_M_deallocate_mapEPPS0_j>
    }
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7ff ffc6 	bl	80029da <_ZNSt11_Deque_baseI8ResponceSaIS0_EE11_Deque_implD1Ev>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4618      	mov	r0, r3
 8002a52:	3708      	adds	r7, #8
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <_ZNSt5dequeI8ResponceSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	3308      	adds	r3, #8
 8002a66:	4619      	mov	r1, r3
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f000 f81e 	bl	8002aaa <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1ERKS3_>
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	3708      	adds	r7, #8
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}

08002a76 <_ZNSt5dequeI8ResponceSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8002a76:	b580      	push	{r7, lr}
 8002a78:	b082      	sub	sp, #8
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	6078      	str	r0, [r7, #4]
 8002a7e:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	3318      	adds	r3, #24
 8002a84:	4619      	mov	r1, r3
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f000 f80f 	bl	8002aaa <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1ERKS3_>
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	3708      	adds	r7, #8
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	370c      	adds	r7, #12
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr

08002aaa <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1ERKS3_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 8002aaa:	b480      	push	{r7}
 8002aac:	b083      	sub	sp, #12
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
 8002ab2:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	605a      	str	r2, [r3, #4]
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	689a      	ldr	r2, [r3, #8]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	609a      	str	r2, [r3, #8]
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	68da      	ldr	r2, [r3, #12]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	60da      	str	r2, [r3, #12]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	370c      	adds	r7, #12
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr

08002ae2 <_ZNSt5dequeI8ResponceSaIS0_EE15_M_destroy_dataESt15_Deque_iteratorIS0_RS0_PS0_ES6_RKS1_>:
      _M_destroy_data(iterator __first, iterator __last,
 8002ae2:	b580      	push	{r7, lr}
 8002ae4:	b08c      	sub	sp, #48	; 0x30
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	60f8      	str	r0, [r7, #12]
 8002aea:	60b9      	str	r1, [r7, #8]
 8002aec:	607a      	str	r2, [r7, #4]
 8002aee:	603b      	str	r3, [r7, #0]
	  _M_destroy_data_aux(__first, __last);
 8002af0:	f107 0310 	add.w	r3, r7, #16
 8002af4:	68b9      	ldr	r1, [r7, #8]
 8002af6:	4618      	mov	r0, r3
 8002af8:	f7ff ffd7 	bl	8002aaa <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1ERKS3_>
 8002afc:	f107 0320 	add.w	r3, r7, #32
 8002b00:	6879      	ldr	r1, [r7, #4]
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7ff ffd1 	bl	8002aaa <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1ERKS3_>
 8002b08:	f107 0220 	add.w	r2, r7, #32
 8002b0c:	f107 0310 	add.w	r3, r7, #16
 8002b10:	4619      	mov	r1, r3
 8002b12:	68f8      	ldr	r0, [r7, #12]
 8002b14:	f001 f85c 	bl	8003bd0 <_ZNSt5dequeI8ResponceSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_>
      }
 8002b18:	bf00      	nop
 8002b1a:	3730      	adds	r7, #48	; 0x30
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <_ZNSaIhEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f001 f8ac 	bl	8003c86 <_ZN9__gnu_cxx13new_allocatorIhEC1Ev>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4618      	mov	r0, r3
 8002b32:	3708      	adds	r7, #8
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}

08002b38 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2200      	movs	r2, #0
 8002b44:	601a      	str	r2, [r3, #0]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	605a      	str	r2, [r3, #4]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	609a      	str	r2, [r3, #8]
	{ }
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4618      	mov	r0, r3
 8002b56:	370c      	adds	r7, #12
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <_ZN9__gnu_cxx13new_allocatorIhED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	370c      	adds	r7, #12
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr

08002b76 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>:
      _M_deallocate(pointer __p, size_t __n)
 8002b76:	b580      	push	{r7, lr}
 8002b78:	b084      	sub	sp, #16
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	60f8      	str	r0, [r7, #12]
 8002b7e:	60b9      	str	r1, [r7, #8]
 8002b80:	607a      	str	r2, [r7, #4]
	if (__p)
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d005      	beq.n	8002b94 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	68b9      	ldr	r1, [r7, #8]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f001 f884 	bl	8003c9c <_ZNSt16allocator_traitsISaIhEE10deallocateERS0_Phj>
      }
 8002b94:	bf00      	nop
 8002b96:	3710      	adds	r7, #16
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	370c      	adds	r7, #12
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr

08002bb2 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>:
#endif
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8002bb2:	b580      	push	{r7, lr}
 8002bb4:	b084      	sub	sp, #16
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	60f8      	str	r0, [r7, #12]
 8002bba:	60b9      	str	r1, [r7, #8]
 8002bbc:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8002bbe:	68b9      	ldr	r1, [r7, #8]
 8002bc0:	68f8      	ldr	r0, [r7, #12]
 8002bc2:	f001 f87a 	bl	8003cba <_ZSt8_DestroyIPhEvT_S1_>
    }
 8002bc6:	bf00      	nop
 8002bc8:	3710      	adds	r7, #16
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}

08002bce <_ZSt7forwardI7RequestEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002bce:	b480      	push	{r7}
 8002bd0:	b083      	sub	sp, #12
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	370c      	adds	r7, #12
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr

08002be4 <_ZNSt16allocator_traitsISaI7RequestEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f7ff ffec 	bl	8002bce <_ZSt7forwardI7RequestEOT_RNSt16remove_referenceIS1_E4typeE>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	68b9      	ldr	r1, [r7, #8]
 8002bfc:	68f8      	ldr	r0, [r7, #12]
 8002bfe:	f001 f869 	bl	8003cd4 <_ZN9__gnu_cxx13new_allocatorI7RequestE9constructIS1_JS1_EEEvPT_DpOT0_>
	}
 8002c02:	bf00      	nop
 8002c04:	3710      	adds	r7, #16
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
	...

08002c0c <_ZNSt5dequeI7RequestSaIS0_EE16_M_push_back_auxIJS0_EEEvDpOT_>:
  // Called only if _M_impl._M_finish._M_cur == _M_impl._M_finish._M_last - 1.
  template<typename _Tp, typename _Alloc>
#if __cplusplus >= 201103L
    template<typename... _Args>
      void
      deque<_Tp, _Alloc>::
 8002c0c:	b5b0      	push	{r4, r5, r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	6039      	str	r1, [r7, #0]
      void
      deque<_Tp, _Alloc>::
      _M_push_back_aux(const value_type& __t)
#endif
      {
	if (size() == max_size())
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f001 f874 	bl	8003d04 <_ZNKSt5dequeI7RequestSaIS0_EE4sizeEv>
 8002c1c:	4604      	mov	r4, r0
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f001 f882 	bl	8003d28 <_ZNKSt5dequeI7RequestSaIS0_EE8max_sizeEv>
 8002c24:	4603      	mov	r3, r0
 8002c26:	429c      	cmp	r4, r3
 8002c28:	bf0c      	ite	eq
 8002c2a:	2301      	moveq	r3, #1
 8002c2c:	2300      	movne	r3, #0
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d002      	beq.n	8002c3a <_ZNSt5dequeI7RequestSaIS0_EE16_M_push_back_auxIJS0_EEEvDpOT_+0x2e>
	  __throw_length_error(
 8002c34:	4816      	ldr	r0, [pc, #88]	; (8002c90 <_ZNSt5dequeI7RequestSaIS0_EE16_M_push_back_auxIJS0_EEEvDpOT_+0x84>)
 8002c36:	f017 f939 	bl	8019eac <_ZSt20__throw_length_errorPKc>
	      __N("cannot create std::deque larger than max_size()"));

	_M_reserve_map_at_back();
 8002c3a:	2101      	movs	r1, #1
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f001 f884 	bl	8003d4a <_ZNSt5dequeI7RequestSaIS0_EE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c48:	1d1c      	adds	r4, r3, #4
 8002c4a:	4610      	mov	r0, r2
 8002c4c:	f001 f898 	bl	8003d80 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_M_allocate_nodeEv>
 8002c50:	4603      	mov	r3, r0
 8002c52:	6023      	str	r3, [r4, #0]
	__try
	  {
#if __cplusplus >= 201103L
	    _Alloc_traits::construct(this->_M_impl,
 8002c54:	687c      	ldr	r4, [r7, #4]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	699d      	ldr	r5, [r3, #24]
 8002c5a:	6838      	ldr	r0, [r7, #0]
 8002c5c:	f7ff ffb7 	bl	8002bce <_ZSt7forwardI7RequestEOT_RNSt16remove_referenceIS1_E4typeE>
 8002c60:	4603      	mov	r3, r0
 8002c62:	461a      	mov	r2, r3
 8002c64:	4629      	mov	r1, r5
 8002c66:	4620      	mov	r0, r4
 8002c68:	f7ff ffbc 	bl	8002be4 <_ZNSt16allocator_traitsISaI7RequestEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
				     this->_M_impl._M_finish._M_cur,
				     std::forward<_Args>(__args)...);
#else
	    this->_M_impl.construct(this->_M_impl._M_finish._M_cur, __t);
#endif
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f103 0218 	add.w	r2, r3, #24
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c76:	3304      	adds	r3, #4
 8002c78:	4619      	mov	r1, r3
 8002c7a:	4610      	mov	r0, r2
 8002c7c:	f000 fe3a 	bl	80038f4 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E11_M_set_nodeEPS2_>
						+ 1);
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	69da      	ldr	r2, [r3, #28]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	619a      	str	r2, [r3, #24]
	__catch(...)
	  {
	    _M_deallocate_node(*(this->_M_impl._M_finish._M_node + 1));
	    __throw_exception_again;
	  }
      }
 8002c88:	bf00      	nop
 8002c8a:	3708      	adds	r7, #8
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bdb0      	pop	{r4, r5, r7, pc}
 8002c90:	0801b280 	.word	0x0801b280

08002c94 <_ZNSt5dequeI7RequestSaIS0_EE17_M_push_front_auxIJS0_EEEvDpOT_>:
  // Called only if _M_impl._M_start._M_cur == _M_impl._M_start._M_first.
  template<typename _Tp, typename _Alloc>
#if __cplusplus >= 201103L
    template<typename... _Args>
      void
      deque<_Tp, _Alloc>::
 8002c94:	b5b0      	push	{r4, r5, r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	6039      	str	r1, [r7, #0]
      void
      deque<_Tp, _Alloc>::
      _M_push_front_aux(const value_type& __t)
#endif
      {
	if (size() == max_size())
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f001 f830 	bl	8003d04 <_ZNKSt5dequeI7RequestSaIS0_EE4sizeEv>
 8002ca4:	4604      	mov	r4, r0
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f001 f83e 	bl	8003d28 <_ZNKSt5dequeI7RequestSaIS0_EE8max_sizeEv>
 8002cac:	4603      	mov	r3, r0
 8002cae:	429c      	cmp	r4, r3
 8002cb0:	bf0c      	ite	eq
 8002cb2:	2301      	moveq	r3, #1
 8002cb4:	2300      	movne	r3, #0
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d002      	beq.n	8002cc2 <_ZNSt5dequeI7RequestSaIS0_EE17_M_push_front_auxIJS0_EEEvDpOT_+0x2e>
	  __throw_length_error(
 8002cbc:	4817      	ldr	r0, [pc, #92]	; (8002d1c <_ZNSt5dequeI7RequestSaIS0_EE17_M_push_front_auxIJS0_EEEvDpOT_+0x88>)
 8002cbe:	f017 f8f5 	bl	8019eac <_ZSt20__throw_length_errorPKc>
	      __N("cannot create std::deque larger than max_size()"));

	_M_reserve_map_at_front();
 8002cc2:	2101      	movs	r1, #1
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	f001 f86d 	bl	8003da4 <_ZNSt5dequeI7RequestSaIS0_EE23_M_reserve_map_at_frontEj>
	*(this->_M_impl._M_start._M_node - 1) = this->_M_allocate_node();
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	695b      	ldr	r3, [r3, #20]
 8002cd0:	1f1c      	subs	r4, r3, #4
 8002cd2:	4610      	mov	r0, r2
 8002cd4:	f001 f854 	bl	8003d80 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_M_allocate_nodeEv>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	6023      	str	r3, [r4, #0]
	__try
	  {
	    this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f103 0208 	add.w	r2, r3, #8
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	695b      	ldr	r3, [r3, #20]
 8002ce6:	3b04      	subs	r3, #4
 8002ce8:	4619      	mov	r1, r3
 8002cea:	4610      	mov	r0, r2
 8002cec:	f000 fe02 	bl	80038f4 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E11_M_set_nodeEPS2_>
					       - 1);
	    this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_last - 1;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	691b      	ldr	r3, [r3, #16]
 8002cf4:	f1a3 0214 	sub.w	r2, r3, #20
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	609a      	str	r2, [r3, #8]
#if __cplusplus >= 201103L
	    _Alloc_traits::construct(this->_M_impl,
 8002cfc:	687c      	ldr	r4, [r7, #4]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	689d      	ldr	r5, [r3, #8]
 8002d02:	6838      	ldr	r0, [r7, #0]
 8002d04:	f7ff ff63 	bl	8002bce <_ZSt7forwardI7RequestEOT_RNSt16remove_referenceIS1_E4typeE>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	4629      	mov	r1, r5
 8002d0e:	4620      	mov	r0, r4
 8002d10:	f7ff ff68 	bl	8002be4 <_ZNSt16allocator_traitsISaI7RequestEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
	  {
	    ++this->_M_impl._M_start;
	    _M_deallocate_node(*(this->_M_impl._M_start._M_node - 1));
	    __throw_exception_again;
	  }
      }
 8002d14:	bf00      	nop
 8002d16:	3708      	adds	r7, #8
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bdb0      	pop	{r4, r5, r7, pc}
 8002d1c:	0801b280 	.word	0x0801b280

08002d20 <_ZNKSt5dequeI8ResponceSaIS0_EE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f103 0218 	add.w	r2, r3, #24
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	3308      	adds	r3, #8
 8002d32:	4619      	mov	r1, r3
 8002d34:	4610      	mov	r0, r2
 8002d36:	f001 f84d 	bl	8003dd4 <_ZSteqRKSt15_Deque_iteratorI8ResponceRS0_PS0_ES5_>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3708      	adds	r7, #8
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <_ZNSt5dequeI8ResponceSaIS0_EE5frontEv>:
      front() _GLIBCXX_NOEXCEPT
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b086      	sub	sp, #24
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
	return *begin();
 8002d4c:	f107 0308 	add.w	r3, r7, #8
 8002d50:	6879      	ldr	r1, [r7, #4]
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7ff fe80 	bl	8002a58 <_ZNSt5dequeI8ResponceSaIS0_EE5beginEv>
 8002d58:	f107 0308 	add.w	r3, r7, #8
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f001 f84d 	bl	8003dfc <_ZNKSt15_Deque_iteratorI8ResponceRS0_PS0_EdeEv>
 8002d62:	4603      	mov	r3, r0
      }
 8002d64:	4618      	mov	r0, r3
 8002d66:	3718      	adds	r7, #24
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <_ZSt4moveIRNSt12_Vector_baseIhSaIhEE12_Vector_implEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	4618      	mov	r0, r3
 8002d78:	370c      	adds	r7, #12
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr

08002d82 <_ZNSaIhEC1ERKS_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8002d82:	b580      	push	{r7, lr}
 8002d84:	b082      	sub	sp, #8
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
 8002d8a:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8002d8c:	6839      	ldr	r1, [r7, #0]
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f001 f840 	bl	8003e14 <_ZN9__gnu_cxx13new_allocatorIhEC1ERKS1_>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	4618      	mov	r0, r3
 8002d98:	3708      	adds	r7, #8
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1EOS2_>:
	_Vector_impl_data(_Vector_impl_data&& __x) noexcept
 8002d9e:	b480      	push	{r7}
 8002da0:	b083      	sub	sp, #12
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
 8002da6:	6039      	str	r1, [r7, #0]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	681a      	ldr	r2, [r3, #0]
	  _M_end_of_storage(__x._M_end_of_storage)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	601a      	str	r2, [r3, #0]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	685a      	ldr	r2, [r3, #4]
	  _M_end_of_storage(__x._M_end_of_storage)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	605a      	str	r2, [r3, #4]
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	689a      	ldr	r2, [r3, #8]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	609a      	str	r2, [r3, #8]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	609a      	str	r2, [r3, #8]
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	689a      	ldr	r2, [r3, #8]
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	605a      	str	r2, [r3, #4]
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	685a      	ldr	r2, [r3, #4]
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	601a      	str	r2, [r3, #0]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	370c      	adds	r7, #12
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr

08002de4 <_ZNSt5dequeI8ResponceSaIS0_EE9pop_frontEv>:
      pop_front() _GLIBCXX_NOEXCEPT
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
	if (this->_M_impl._M_start._M_cur
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	689a      	ldr	r2, [r3, #8]
	    != this->_M_impl._M_start._M_last - 1)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	691b      	ldr	r3, [r3, #16]
 8002df4:	3b10      	subs	r3, #16
	if (this->_M_impl._M_start._M_cur
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d011      	beq.n	8002e1e <_ZNSt5dequeI8ResponceSaIS0_EE9pop_frontEv+0x3a>
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f7ff fe49 	bl	8002a94 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 8002e02:	4602      	mov	r2, r0
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	4619      	mov	r1, r3
 8002e0a:	4610      	mov	r0, r2
 8002e0c:	f001 f80e 	bl	8003e2c <_ZNSt16allocator_traitsISaI8ResponceEE7destroyIS0_EEvRS1_PT_>
	    ++this->_M_impl._M_start._M_cur;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	f103 0210 	add.w	r2, r3, #16
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	609a      	str	r2, [r3, #8]
      }
 8002e1c:	e002      	b.n	8002e24 <_ZNSt5dequeI8ResponceSaIS0_EE9pop_frontEv+0x40>
	  _M_pop_front_aux();
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f001 f811 	bl	8003e46 <_ZNSt5dequeI8ResponceSaIS0_EE16_M_pop_front_auxEv>
      }
 8002e24:	bf00      	nop
 8002e26:	3708      	adds	r7, #8
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <_ZSteqRKSt15_Deque_iteratorI7RequestRS0_PS0_ES5_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	6039      	str	r1, [r7, #0]
      { return __x._M_cur == __y._M_cur; }
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	bf0c      	ite	eq
 8002e42:	2301      	moveq	r3, #1
 8002e44:	2300      	movne	r3, #0
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	4618      	mov	r0, r3
 8002e4a:	370c      	adds	r7, #12
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr

08002e54 <_ZNKSt15_Deque_iteratorI7RequestRS0_PS0_EdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4618      	mov	r0, r3
 8002e62:	370c      	adds	r7, #12
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr

08002e6c <_ZSt7forwardI8ResponceEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	4618      	mov	r0, r3
 8002e78:	370c      	adds	r7, #12
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr

08002e82 <_ZNSt5dequeI8ResponceSaIS0_EE12emplace_backIJS0_EEEvDpOT_>:
      deque<_Tp, _Alloc>::
 8002e82:	b5b0      	push	{r4, r5, r7, lr}
 8002e84:	b082      	sub	sp, #8
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
 8002e8a:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish._M_cur
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a1b      	ldr	r3, [r3, #32]
 8002e94:	3b10      	subs	r3, #16
	if (this->_M_impl._M_finish._M_cur
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d012      	beq.n	8002ec0 <_ZNSt5dequeI8ResponceSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x3e>
	    _Alloc_traits::construct(this->_M_impl,
 8002e9a:	687c      	ldr	r4, [r7, #4]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	699d      	ldr	r5, [r3, #24]
 8002ea0:	6838      	ldr	r0, [r7, #0]
 8002ea2:	f7ff ffe3 	bl	8002e6c <_ZSt7forwardI8ResponceEOT_RNSt16remove_referenceIS1_E4typeE>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	4629      	mov	r1, r5
 8002eac:	4620      	mov	r0, r4
 8002eae:	f000 fff2 	bl	8003e96 <_ZNSt16allocator_traitsISaI8ResponceEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
	    ++this->_M_impl._M_finish._M_cur;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	699b      	ldr	r3, [r3, #24]
 8002eb6:	f103 0210 	add.w	r2, r3, #16
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	619a      	str	r2, [r3, #24]
      }
 8002ebe:	e007      	b.n	8002ed0 <_ZNSt5dequeI8ResponceSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x4e>
	  _M_push_back_aux(std::forward<_Args>(__args)...);
 8002ec0:	6838      	ldr	r0, [r7, #0]
 8002ec2:	f7ff ffd3 	bl	8002e6c <_ZSt7forwardI8ResponceEOT_RNSt16remove_referenceIS1_E4typeE>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	4619      	mov	r1, r3
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f000 fff6 	bl	8003ebc <_ZNSt5dequeI8ResponceSaIS0_EE16_M_push_back_auxIJS0_EEEvDpOT_>
      }
 8002ed0:	bf00      	nop
 8002ed2:	3708      	adds	r7, #8
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bdb0      	pop	{r4, r5, r7, pc}

08002ed8 <_ZNSt6vectorIhSaIhEE15_S_use_relocateEv>:
      _S_use_relocate()
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f000 f805 	bl	8002eee <_ZNSt6vectorIhSaIhEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 8002ee4:	4603      	mov	r3, r0
      }
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3708      	adds	r7, #8
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}

08002eee <_ZNSt6vectorIhSaIhEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8002eee:	b480      	push	{r7}
 8002ef0:	b083      	sub	sp, #12
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 8002ef6:	2301      	movs	r3, #1
      }
 8002ef8:	4618      	mov	r0, r3
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj>:
    }

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
 8002f04:	b5b0      	push	{r4, r5, r7, lr}
 8002f06:	b088      	sub	sp, #32
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	6039      	str	r1, [r7, #0]
    _M_default_append(size_type __n)
    {
      if (__n != 0)
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	f000 80a8 	beq.w	8003066 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x162>
	{
	  const size_type __size = size();
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f7ff f9c6 	bl	80022a8 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8002f1c:	61f8      	str	r0, [r7, #28]
	  size_type __navail = size_type(this->_M_impl._M_end_of_storage
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	689a      	ldr	r2, [r3, #8]
					 - this->_M_impl._M_finish);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	1ad3      	subs	r3, r2, r3
	  size_type __navail = size_type(this->_M_impl._M_end_of_storage
 8002f28:	61bb      	str	r3, [r7, #24]

	  if (__size > max_size() || __navail > max_size() - __size)
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f001 f80a 	bl	8003f44 <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 8002f30:	4602      	mov	r2, r0
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d808      	bhi.n	8002f4a <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x46>
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f001 f803 	bl	8003f44 <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	69ba      	ldr	r2, [r7, #24]
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d901      	bls.n	8002f4e <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x4a>
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e000      	b.n	8002f50 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x4c>
 8002f4e:	2300      	movs	r3, #0
 8002f50:	2b00      	cmp	r3, #0
	    __builtin_unreachable();

	  if (__navail >= __n)
 8002f52:	69ba      	ldr	r2, [r7, #24]
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d30f      	bcc.n	8002f7a <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x76>
	    {
	      _GLIBCXX_ASAN_ANNOTATE_GROW(__n);
	      this->_M_impl._M_finish =
		std::__uninitialized_default_n_a(this->_M_impl._M_finish,
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685c      	ldr	r4, [r3, #4]
						 __n, _M_get_Tp_allocator());
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7ff fe1b 	bl	8002b9c <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8002f66:	4603      	mov	r3, r0
		std::__uninitialized_default_n_a(this->_M_impl._M_finish,
 8002f68:	461a      	mov	r2, r3
 8002f6a:	6839      	ldr	r1, [r7, #0]
 8002f6c:	4620      	mov	r0, r4
 8002f6e:	f000 fffa 	bl	8003f66 <_ZSt27__uninitialized_default_n_aIPhjhET_S1_T0_RSaIT1_E>
 8002f72:	4602      	mov	r2, r0
	      this->_M_impl._M_finish =
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	605a      	str	r2, [r3, #4]
	      this->_M_impl._M_start = __new_start;
	      this->_M_impl._M_finish = __new_start + __size + __n;
	      this->_M_impl._M_end_of_storage = __new_start + __len;
	    }
	}
    }
 8002f78:	e075      	b.n	8003066 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x162>
		_M_check_len(__n, "vector::_M_default_append");
 8002f7a:	4a3d      	ldr	r2, [pc, #244]	; (8003070 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x16c>)
 8002f7c:	6839      	ldr	r1, [r7, #0]
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f001 f800 	bl	8003f84 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>
 8002f84:	6178      	str	r0, [r7, #20]
	      pointer __new_start(this->_M_allocate(__len));
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6979      	ldr	r1, [r7, #20]
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f001 f841 	bl	8004012 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>
 8002f90:	6138      	str	r0, [r7, #16]
	      if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8002f92:	f7ff ffa1 	bl	8002ed8 <_ZNSt6vectorIhSaIhEE15_S_use_relocateEv>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d01b      	beq.n	8002fd4 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0xd0>
		      std::__uninitialized_default_n_a(__new_start + __size,
 8002f9c:	693a      	ldr	r2, [r7, #16]
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	18d4      	adds	r4, r2, r3
			      __n, _M_get_Tp_allocator());
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f7ff fdf9 	bl	8002b9c <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8002faa:	4603      	mov	r3, r0
		      std::__uninitialized_default_n_a(__new_start + __size,
 8002fac:	461a      	mov	r2, r3
 8002fae:	6839      	ldr	r1, [r7, #0]
 8002fb0:	4620      	mov	r0, r4
 8002fb2:	f000 ffd8 	bl	8003f66 <_ZSt27__uninitialized_default_n_aIPhjhET_S1_T0_RSaIT1_E>
		  _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681c      	ldr	r4, [r3, #0]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685d      	ldr	r5, [r3, #4]
			      __new_start, _M_get_Tp_allocator());
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f7ff fdeb 	bl	8002b9c <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8002fc6:	4603      	mov	r3, r0
		  _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002fc8:	693a      	ldr	r2, [r7, #16]
 8002fca:	4629      	mov	r1, r5
 8002fcc:	4620      	mov	r0, r4
 8002fce:	f001 f834 	bl	800403a <_ZNSt6vectorIhSaIhEE11_S_relocateEPhS2_S2_RS0_>
 8002fd2:	e02e      	b.n	8003032 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x12e>
		  pointer __destroy_from = pointer();
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	60fb      	str	r3, [r7, #12]
		      std::__uninitialized_default_n_a(__new_start + __size,
 8002fd8:	693a      	ldr	r2, [r7, #16]
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	18d4      	adds	r4, r2, r3
			      __n, _M_get_Tp_allocator());
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f7ff fddb 	bl	8002b9c <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8002fe6:	4603      	mov	r3, r0
		      std::__uninitialized_default_n_a(__new_start + __size,
 8002fe8:	461a      	mov	r2, r3
 8002fea:	6839      	ldr	r1, [r7, #0]
 8002fec:	4620      	mov	r0, r4
 8002fee:	f000 ffba 	bl	8003f66 <_ZSt27__uninitialized_default_n_aIPhjhET_S1_T0_RSaIT1_E>
		      __destroy_from = __new_start + __size;
 8002ff2:	693a      	ldr	r2, [r7, #16]
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	60fb      	str	r3, [r7, #12]
		      std::__uninitialized_move_if_noexcept_a(
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681c      	ldr	r4, [r3, #0]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685d      	ldr	r5, [r3, #4]
			      __new_start, _M_get_Tp_allocator());
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4618      	mov	r0, r3
 8003006:	f7ff fdc9 	bl	8002b9c <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 800300a:	4603      	mov	r3, r0
		      std::__uninitialized_move_if_noexcept_a(
 800300c:	693a      	ldr	r2, [r7, #16]
 800300e:	4629      	mov	r1, r5
 8003010:	4620      	mov	r0, r4
 8003012:	f001 f826 	bl	8004062 <_ZSt34__uninitialized_move_if_noexcept_aIPhS0_SaIhEET0_T_S3_S2_RT1_>
		  std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681c      	ldr	r4, [r3, #0]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685d      	ldr	r5, [r3, #4]
				_M_get_Tp_allocator());
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4618      	mov	r0, r3
 8003022:	f7ff fdbb 	bl	8002b9c <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8003026:	4603      	mov	r3, r0
		  std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8003028:	461a      	mov	r2, r3
 800302a:	4629      	mov	r1, r5
 800302c:	4620      	mov	r0, r4
 800302e:	f7ff fdc0 	bl	8002bb2 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
	      _M_deallocate(this->_M_impl._M_start,
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6819      	ldr	r1, [r3, #0]
			    this->_M_impl._M_end_of_storage
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	689a      	ldr	r2, [r3, #8]
			    - this->_M_impl._M_start);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	1ad3      	subs	r3, r2, r3
	      _M_deallocate(this->_M_impl._M_start,
 8003042:	461a      	mov	r2, r3
 8003044:	f7ff fd97 	bl	8002b76 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>
	      this->_M_impl._M_start = __new_start;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	693a      	ldr	r2, [r7, #16]
 800304c:	601a      	str	r2, [r3, #0]
	      this->_M_impl._M_finish = __new_start + __size + __n;
 800304e:	69fa      	ldr	r2, [r7, #28]
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	4413      	add	r3, r2
 8003054:	693a      	ldr	r2, [r7, #16]
 8003056:	441a      	add	r2, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	605a      	str	r2, [r3, #4]
	      this->_M_impl._M_end_of_storage = __new_start + __len;
 800305c:	693a      	ldr	r2, [r7, #16]
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	441a      	add	r2, r3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	609a      	str	r2, [r3, #8]
    }
 8003066:	bf00      	nop
 8003068:	3720      	adds	r7, #32
 800306a:	46bd      	mov	sp, r7
 800306c:	bdb0      	pop	{r4, r5, r7, pc}
 800306e:	bf00      	nop
 8003070:	0801b2b0 	.word	0x0801b2b0

08003074 <_ZNSt6vectorIhSaIhEE15_M_erase_at_endEPh>:
      // Internal erase functions follow.

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 8003074:	b590      	push	{r4, r7, lr}
 8003076:	b085      	sub	sp, #20
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	6039      	str	r1, [r7, #0]
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685a      	ldr	r2, [r3, #4]
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	60fb      	str	r3, [r7, #12]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d00e      	beq.n	80030ac <_ZNSt6vectorIhSaIhEE15_M_erase_at_endEPh+0x38>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4618      	mov	r0, r3
 8003096:	f7ff fd81 	bl	8002b9c <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 800309a:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 800309c:	461a      	mov	r2, r3
 800309e:	4621      	mov	r1, r4
 80030a0:	6838      	ldr	r0, [r7, #0]
 80030a2:	f7ff fd86 	bl	8002bb2 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	683a      	ldr	r2, [r7, #0]
 80030aa:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_SHRINK(__n);
	  }
      }
 80030ac:	bf00      	nop
 80030ae:	3714      	adds	r7, #20
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd90      	pop	{r4, r7, pc}

080030b4 <_ZNKSt6vectorIhSaIhEE11_M_data_ptrIhEEPT_S4_>:
      }
#endif

      template<typename _Up>
	_Up*
	_M_data_ptr(_Up* __ptr) const _GLIBCXX_NOEXCEPT
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
	{ return __ptr; }
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	4618      	mov	r0, r3
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr

080030cc <_ZNSt16allocator_traitsISaI7RequestEE7destroyIS0_EEvRS1_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 80030d6:	6839      	ldr	r1, [r7, #0]
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f000 ffdb 	bl	8004094 <_ZN9__gnu_cxx13new_allocatorI7RequestE7destroyIS1_EEvPT_>
	}
 80030de:	bf00      	nop
 80030e0:	3708      	adds	r7, #8
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}

080030e6 <_ZNSt5dequeI7RequestSaIS0_EE16_M_pop_front_auxEv>:
  // Note that if the deque has at least one element (a precondition for this
  // member function), and if
  //   _M_impl._M_start._M_cur == _M_impl._M_start._M_last,
  // then the deque must have at least two nodes.
  template <typename _Tp, typename _Alloc>
    void deque<_Tp, _Alloc>::
 80030e6:	b580      	push	{r7, lr}
 80030e8:	b082      	sub	sp, #8
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	6078      	str	r0, [r7, #4]
    _M_pop_front_aux()
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7ff fc2c 	bl	800294e <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 80030f6:	4602      	mov	r2, r0
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	4619      	mov	r1, r3
 80030fe:	4610      	mov	r0, r2
 8003100:	f7ff ffe4 	bl	80030cc <_ZNSt16allocator_traitsISaI7RequestEE7destroyIS0_EEvRS1_PT_>
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	4619      	mov	r1, r3
 800310c:	4610      	mov	r0, r2
 800310e:	f000 fc0d 	bl	800392c <_ZNSt11_Deque_baseI7RequestSaIS0_EE18_M_deallocate_nodeEPS0_>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f103 0208 	add.w	r2, r3, #8
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	695b      	ldr	r3, [r3, #20]
 800311c:	3304      	adds	r3, #4
 800311e:	4619      	mov	r1, r3
 8003120:	4610      	mov	r0, r2
 8003122:	f000 fbe7 	bl	80038f4 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	68da      	ldr	r2, [r3, #12]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	609a      	str	r2, [r3, #8]
    }
 800312e:	bf00      	nop
 8003130:	3708      	adds	r7, #8
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}

08003136 <_ZNKSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8003136:	b480      	push	{r7}
 8003138:	b083      	sub	sp, #12
 800313a:	af00      	add	r7, sp, #0
 800313c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4618      	mov	r0, r3
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr

0800314c <_ZStneRKSaIhES1_>:
      operator==(const allocator&, const allocator&) _GLIBCXX_NOTHROW
      { return true; }

#if __cpp_impl_three_way_comparison < 201907L
      friend _GLIBCXX20_CONSTEXPR bool
      operator!=(const allocator&, const allocator&) _GLIBCXX_NOTHROW
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	6039      	str	r1, [r7, #0]
      { return false; }
 8003156:	2300      	movs	r3, #0
 8003158:	4618      	mov	r0, r3
 800315a:	370c      	adds	r7, #12
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr

08003164 <_ZNSt6vectorIhSaIhEE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4619      	mov	r1, r3
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f7ff ff7e 	bl	8003074 <_ZNSt6vectorIhSaIhEE15_M_erase_at_endEPh>
 8003178:	bf00      	nop
 800317a:	3708      	adds	r7, #8
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <_ZSt15__alloc_on_copyISaIhEEvRT_RKS1_>:
    __alloc_on_copy(_Alloc& __one, const _Alloc& __two)
 8003180:	b580      	push	{r7, lr}
 8003182:	b082      	sub	sp, #8
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	6039      	str	r1, [r7, #0]
      __do_alloc_on_copy(__one, __two, __pocca());
 800318a:	461a      	mov	r2, r3
 800318c:	6839      	ldr	r1, [r7, #0]
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f000 ff8c 	bl	80040ac <_ZSt18__do_alloc_on_copyISaIhEEvRT_RKS1_St17integral_constantIbLb0EE>
    }
 8003194:	bf00      	nop
 8003196:	3708      	adds	r7, #8
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}

0800319c <_ZNKSt6vectorIhSaIhEE8capacityEv>:
      capacity() const _GLIBCXX_NOEXCEPT
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_end_of_storage
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	689a      	ldr	r2, [r3, #8]
			 - this->_M_impl._M_start); }
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	4618      	mov	r0, r3
 80031b0:	370c      	adds	r7, #12
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr

080031ba <_ZNKSt6vectorIhSaIhEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 80031ba:	b580      	push	{r7, lr}
 80031bc:	b084      	sub	sp, #16
 80031be:	af00      	add	r7, sp, #0
 80031c0:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	f107 030c 	add.w	r3, r7, #12
 80031c8:	4611      	mov	r1, r2
 80031ca:	4618      	mov	r0, r3
 80031cc:	f000 ff7a 	bl	80040c4 <_ZN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEC1ERKS2_>
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	4618      	mov	r0, r3
 80031d4:	3710      	adds	r7, #16
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}

080031da <_ZNKSt6vectorIhSaIhEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 80031da:	b580      	push	{r7, lr}
 80031dc:	b084      	sub	sp, #16
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	1d1a      	adds	r2, r3, #4
 80031e6:	f107 030c 	add.w	r3, r7, #12
 80031ea:	4611      	mov	r1, r2
 80031ec:	4618      	mov	r0, r3
 80031ee:	f000 ff69 	bl	80040c4 <_ZN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEC1ERKS2_>
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	4618      	mov	r0, r3
 80031f6:	3710      	adds	r7, #16
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}

080031fc <_ZNSt6vectorIhSaIhEE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKhS1_EEEEPhjT_S9_>:
	_M_allocate_and_copy(size_type __n,
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b086      	sub	sp, #24
 8003200:	af00      	add	r7, sp, #0
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	607a      	str	r2, [r7, #4]
 8003208:	603b      	str	r3, [r7, #0]
	  pointer __result = this->_M_allocate(__n);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	68b9      	ldr	r1, [r7, #8]
 800320e:	4618      	mov	r0, r3
 8003210:	f000 feff 	bl	8004012 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>
 8003214:	6178      	str	r0, [r7, #20]
					  _M_get_Tp_allocator());
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	4618      	mov	r0, r3
 800321a:	f7ff fcbf 	bl	8002b9c <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 800321e:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__first, __last, __result,
 8003220:	697a      	ldr	r2, [r7, #20]
 8003222:	6839      	ldr	r1, [r7, #0]
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f000 ff5d 	bl	80040e4 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhhET0_T_SA_S9_RSaIT1_E>
	      return __result;
 800322a:	697b      	ldr	r3, [r7, #20]
	}
 800322c:	4618      	mov	r0, r3
 800322e:	3718      	adds	r7, #24
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}

08003234 <_ZNSt6vectorIhSaIhEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8003234:	b580      	push	{r7, lr}
 8003236:	b084      	sub	sp, #16
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	f107 030c 	add.w	r3, r7, #12
 8003242:	4611      	mov	r1, r2
 8003244:	4618      	mov	r0, r3
 8003246:	f000 ff5e 	bl	8004106 <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	4618      	mov	r0, r3
 800324e:	3710      	adds	r7, #16
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}

08003254 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEENS1_IPhS6_EEET0_T_SB_SA_>:
    copy(_II __first, _II __last, _OI __result)
 8003254:	b590      	push	{r4, r7, lr}
 8003256:	b085      	sub	sp, #20
 8003258:	af00      	add	r7, sp, #0
 800325a:	60f8      	str	r0, [r7, #12]
 800325c:	60b9      	str	r1, [r7, #8]
 800325e:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8003260:	68f8      	ldr	r0, [r7, #12]
 8003262:	f000 ff60 	bl	8004126 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEET_S8_>
 8003266:	4604      	mov	r4, r0
 8003268:	68b8      	ldr	r0, [r7, #8]
 800326a:	f000 ff5c 	bl	8004126 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEET_S8_>
 800326e:	4603      	mov	r3, r0
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	4619      	mov	r1, r3
 8003274:	4620      	mov	r0, r4
 8003276:	f000 ff61 	bl	800413c <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEENS1_IPhS6_EEET1_T0_SB_SA_>
 800327a:	4603      	mov	r3, r0
    }
 800327c:	4618      	mov	r0, r3
 800327e:	3714      	adds	r7, #20
 8003280:	46bd      	mov	sp, r7
 8003282:	bd90      	pop	{r4, r7, pc}

08003284 <_ZNSt6vectorIhSaIhEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8003284:	b580      	push	{r7, lr}
 8003286:	b084      	sub	sp, #16
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	1d1a      	adds	r2, r3, #4
 8003290:	f107 030c 	add.w	r3, r7, #12
 8003294:	4611      	mov	r1, r2
 8003296:	4618      	mov	r0, r3
 8003298:	f000 ff35 	bl	8004106 <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	4618      	mov	r0, r3
 80032a0:	3710      	adds	r7, #16
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}

080032a6 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEhEvT_S7_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80032a6:	b580      	push	{r7, lr}
 80032a8:	b084      	sub	sp, #16
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	60f8      	str	r0, [r7, #12]
 80032ae:	60b9      	str	r1, [r7, #8]
 80032b0:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 80032b2:	68b9      	ldr	r1, [r7, #8]
 80032b4:	68f8      	ldr	r0, [r7, #12]
 80032b6:	f000 ff62 	bl	800417e <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEvT_S7_>
    }
 80032ba:	bf00      	nop
 80032bc:	3710      	adds	r7, #16
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <_ZSt4copyIPhS0_ET0_T_S2_S1_>:
    copy(_II __first, _II __last, _OI __result)
 80032c2:	b590      	push	{r4, r7, lr}
 80032c4:	b085      	sub	sp, #20
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	60f8      	str	r0, [r7, #12]
 80032ca:	60b9      	str	r1, [r7, #8]
 80032cc:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80032ce:	68f8      	ldr	r0, [r7, #12]
 80032d0:	f000 ff62 	bl	8004198 <_ZSt12__miter_baseIPhET_S1_>
 80032d4:	4604      	mov	r4, r0
 80032d6:	68b8      	ldr	r0, [r7, #8]
 80032d8:	f000 ff5e 	bl	8004198 <_ZSt12__miter_baseIPhET_S1_>
 80032dc:	4603      	mov	r3, r0
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	4619      	mov	r1, r3
 80032e2:	4620      	mov	r0, r4
 80032e4:	f000 ff63 	bl	80041ae <_ZSt13__copy_move_aILb0EPhS0_ET1_T0_S2_S1_>
 80032e8:	4603      	mov	r3, r0
    }
 80032ea:	4618      	mov	r0, r3
 80032ec:	3714      	adds	r7, #20
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd90      	pop	{r4, r7, pc}

080032f2 <_ZSt22__uninitialized_copy_aIPhS0_hET0_T_S2_S1_RSaIT1_E>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 80032f2:	b580      	push	{r7, lr}
 80032f4:	b084      	sub	sp, #16
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	60f8      	str	r0, [r7, #12]
 80032fa:	60b9      	str	r1, [r7, #8]
 80032fc:	607a      	str	r2, [r7, #4]
 80032fe:	603b      	str	r3, [r7, #0]
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	68b9      	ldr	r1, [r7, #8]
 8003304:	68f8      	ldr	r0, [r7, #12]
 8003306:	f000 ff75 	bl	80041f4 <_ZSt18uninitialized_copyIPhS0_ET0_T_S2_S1_>
 800330a:	4603      	mov	r3, r0
 800330c:	4618      	mov	r0, r3
 800330e:	3710      	adds	r7, #16
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}

08003314 <_ZNSt5dequeI7RequestSaIS0_EE9push_backEOS0_>:
      push_back(value_type&& __x)
 8003314:	b580      	push	{r7, lr}
 8003316:	b082      	sub	sp, #8
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 800331e:	6838      	ldr	r0, [r7, #0]
 8003320:	f7fe fe99 	bl	8002056 <_ZSt4moveIR7RequestEONSt16remove_referenceIT_E4typeEOS3_>
 8003324:	4603      	mov	r3, r0
 8003326:	4619      	mov	r1, r3
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f7fe fe9f 	bl	800206c <_ZNSt5dequeI7RequestSaIS0_EE12emplace_backIJS0_EEEvDpOT_>
 800332e:	bf00      	nop
 8003330:	3708      	adds	r7, #8
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}

08003336 <_ZSt4moveIRSt6vectorIhSaIhEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8003336:	b480      	push	{r7}
 8003338:	b083      	sub	sp, #12
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4618      	mov	r0, r3
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr

0800334c <_ZNSt6vectorIhSaIhEE14_M_move_assignEOS1_St17integral_constantIbLb1EE>:
      _M_move_assign(vector&& __x, true_type) noexcept
 800334c:	b590      	push	{r4, r7, lr}
 800334e:	b089      	sub	sp, #36	; 0x24
 8003350:	af00      	add	r7, sp, #0
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	60b9      	str	r1, [r7, #8]
 8003356:	713a      	strb	r2, [r7, #4]
	vector __tmp(get_allocator());
 8003358:	68fa      	ldr	r2, [r7, #12]
 800335a:	f107 031c 	add.w	r3, r7, #28
 800335e:	4611      	mov	r1, r2
 8003360:	4618      	mov	r0, r3
 8003362:	f000 ff59 	bl	8004218 <_ZNKSt12_Vector_baseIhSaIhEE13get_allocatorEv>
 8003366:	f107 021c 	add.w	r2, r7, #28
 800336a:	f107 0310 	add.w	r3, r7, #16
 800336e:	4611      	mov	r1, r2
 8003370:	4618      	mov	r0, r3
 8003372:	f000 ff62 	bl	800423a <_ZNSt6vectorIhSaIhEEC1ERKS0_>
 8003376:	f107 031c 	add.w	r3, r7, #28
 800337a:	4618      	mov	r0, r3
 800337c:	f7fe fe2c 	bl	8001fd8 <_ZNSaIhED1Ev>
	this->_M_impl._M_swap_data(__x._M_impl);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	68ba      	ldr	r2, [r7, #8]
 8003384:	4611      	mov	r1, r2
 8003386:	4618      	mov	r0, r3
 8003388:	f000 ff66 	bl	8004258 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_data12_M_swap_dataERS2_>
	__tmp._M_impl._M_swap_data(__x._M_impl);
 800338c:	68ba      	ldr	r2, [r7, #8]
 800338e:	f107 0310 	add.w	r3, r7, #16
 8003392:	4611      	mov	r1, r2
 8003394:	4618      	mov	r0, r3
 8003396:	f000 ff5f 	bl	8004258 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_data12_M_swap_dataERS2_>
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	4618      	mov	r0, r3
 800339e:	f7ff fbfd 	bl	8002b9c <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80033a2:	4604      	mov	r4, r0
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	4618      	mov	r0, r3
 80033a8:	f7ff fbf8 	bl	8002b9c <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80033ac:	4603      	mov	r3, r0
 80033ae:	4619      	mov	r1, r3
 80033b0:	4620      	mov	r0, r4
 80033b2:	f000 ff6f 	bl	8004294 <_ZSt15__alloc_on_moveISaIhEEvRT_S2_>
	vector __tmp(get_allocator());
 80033b6:	f107 0310 	add.w	r3, r7, #16
 80033ba:	4618      	mov	r0, r3
 80033bc:	f7fe fe30 	bl	8002020 <_ZNSt6vectorIhSaIhEED1Ev>
      }
 80033c0:	bf00      	nop
 80033c2:	3724      	adds	r7, #36	; 0x24
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd90      	pop	{r4, r7, pc}

080033c8 <_ZSt4moveIR8IMUFrameEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	4618      	mov	r0, r3
 80033d4:	370c      	adds	r7, #12
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr

080033de <_ZNSt5dequeI8IMUFrameSaIS0_EE13emplace_frontIJS0_EEEvDpOT_>:
      deque<_Tp, _Alloc>::
 80033de:	b5b0      	push	{r4, r5, r7, lr}
 80033e0:	b082      	sub	sp, #8
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]
 80033e6:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_start._M_cur != this->_M_impl._M_start._M_first)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	689a      	ldr	r2, [r3, #8]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d014      	beq.n	800341e <_ZNSt5dequeI8IMUFrameSaIS0_EE13emplace_frontIJS0_EEEvDpOT_+0x40>
	    _Alloc_traits::construct(this->_M_impl,
 80033f4:	687c      	ldr	r4, [r7, #4]
				     this->_M_impl._M_start._M_cur - 1,
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	689b      	ldr	r3, [r3, #8]
	    _Alloc_traits::construct(this->_M_impl,
 80033fa:	f1a3 0518 	sub.w	r5, r3, #24
 80033fe:	6838      	ldr	r0, [r7, #0]
 8003400:	f000 ff89 	bl	8004316 <_ZSt7forwardI8IMUFrameEOT_RNSt16remove_referenceIS1_E4typeE>
 8003404:	4603      	mov	r3, r0
 8003406:	461a      	mov	r2, r3
 8003408:	4629      	mov	r1, r5
 800340a:	4620      	mov	r0, r4
 800340c:	f000 ff8e 	bl	800432c <_ZNSt16allocator_traitsISaI8IMUFrameEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
	    --this->_M_impl._M_start._M_cur;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	f1a3 0218 	sub.w	r2, r3, #24
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	609a      	str	r2, [r3, #8]
      }
 800341c:	e007      	b.n	800342e <_ZNSt5dequeI8IMUFrameSaIS0_EE13emplace_frontIJS0_EEEvDpOT_+0x50>
	  _M_push_front_aux(std::forward<_Args>(__args)...);
 800341e:	6838      	ldr	r0, [r7, #0]
 8003420:	f000 ff79 	bl	8004316 <_ZSt7forwardI8IMUFrameEOT_RNSt16remove_referenceIS1_E4typeE>
 8003424:	4603      	mov	r3, r0
 8003426:	4619      	mov	r1, r3
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f000 ff93 	bl	8004354 <_ZNSt5dequeI8IMUFrameSaIS0_EE17_M_push_front_auxIJS0_EEEvDpOT_>
      }
 800342e:	bf00      	nop
 8003430:	3708      	adds	r7, #8
 8003432:	46bd      	mov	sp, r7
 8003434:	bdb0      	pop	{r4, r5, r7, pc}

08003436 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8003436:	b480      	push	{r7}
 8003438:	b083      	sub	sp, #12
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4618      	mov	r0, r3
 8003442:	370c      	adds	r7, #12
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr

0800344c <_ZSteqRKSt15_Deque_iteratorI8IMUFrameRS0_PS0_ES5_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	6039      	str	r1, [r7, #0]
      { return __x._M_cur == __y._M_cur; }
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	429a      	cmp	r2, r3
 8003460:	bf0c      	ite	eq
 8003462:	2301      	moveq	r3, #1
 8003464:	2300      	movne	r3, #0
 8003466:	b2db      	uxtb	r3, r3
 8003468:	4618      	mov	r0, r3
 800346a:	370c      	adds	r7, #12
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr

08003474 <_ZStmiRKSt15_Deque_iteratorI8IMUFrameRS0_PS0_ES5_>:
      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	6039      	str	r1, [r7, #0]
	return difference_type(_S_buffer_size())
 800347e:	f000 ffde 	bl	800443e <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_E14_S_buffer_sizeEv>
 8003482:	4603      	mov	r3, r0
 8003484:	4619      	mov	r1, r3
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	68da      	ldr	r2, [r3, #12]
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	109b      	asrs	r3, r3, #2
 8003492:	3b01      	subs	r3, #1
 8003494:	fb01 f303 	mul.w	r3, r1, r3
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	6811      	ldr	r1, [r2, #0]
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	6852      	ldr	r2, [r2, #4]
 80034a0:	1a8a      	subs	r2, r1, r2
 80034a2:	10d2      	asrs	r2, r2, #3
 80034a4:	4908      	ldr	r1, [pc, #32]	; (80034c8 <_ZStmiRKSt15_Deque_iteratorI8IMUFrameRS0_PS0_ES5_+0x54>)
 80034a6:	fb01 f202 	mul.w	r2, r1, r2
 80034aa:	4413      	add	r3, r2
	  + (__y._M_last - __y._M_cur);
 80034ac:	683a      	ldr	r2, [r7, #0]
 80034ae:	6891      	ldr	r1, [r2, #8]
 80034b0:	683a      	ldr	r2, [r7, #0]
 80034b2:	6812      	ldr	r2, [r2, #0]
 80034b4:	1a8a      	subs	r2, r1, r2
 80034b6:	10d2      	asrs	r2, r2, #3
 80034b8:	4903      	ldr	r1, [pc, #12]	; (80034c8 <_ZStmiRKSt15_Deque_iteratorI8IMUFrameRS0_PS0_ES5_+0x54>)
 80034ba:	fb01 f202 	mul.w	r2, r1, r2
 80034be:	4413      	add	r3, r2
      }
 80034c0:	4618      	mov	r0, r3
 80034c2:	3708      	adds	r7, #8
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	aaaaaaab 	.word	0xaaaaaaab

080034cc <_ZNKSt15_Deque_iteratorI8IMUFrameRS0_PS0_EixEi>:
      operator[](difference_type __n) const _GLIBCXX_NOEXCEPT
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b086      	sub	sp, #24
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	6039      	str	r1, [r7, #0]
      { return *(*this + __n); }
 80034d6:	f107 0308 	add.w	r3, r7, #8
 80034da:	683a      	ldr	r2, [r7, #0]
 80034dc:	6879      	ldr	r1, [r7, #4]
 80034de:	4618      	mov	r0, r3
 80034e0:	f000 ffb5 	bl	800444e <_ZStplRKSt15_Deque_iteratorI8IMUFrameRS0_PS0_Ei>
 80034e4:	f107 0308 	add.w	r3, r7, #8
 80034e8:	4618      	mov	r0, r3
 80034ea:	f000 ffc3 	bl	8004474 <_ZNKSt15_Deque_iteratorI8IMUFrameRS0_PS0_EdeEv>
 80034ee:	4603      	mov	r3, r0
 80034f0:	4618      	mov	r0, r3
 80034f2:	3718      	adds	r7, #24
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f000 ffc3 	bl	800448c <_ZNSaI8IMUFrameEC1Ev>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4618      	mov	r0, r3
 800350a:	f000 ffcb 	bl	80044a4 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_Deque_impl_dataC1Ev>
	{ }
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4618      	mov	r0, r3
 8003512:	3708      	adds	r7, #8
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}

08003518 <_ZNSaI8IMUFrameED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8003518:	b580      	push	{r7, lr}
 800351a:	b082      	sub	sp, #8
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f000 ffd8 	bl	80044d6 <_ZN9__gnu_cxx13new_allocatorI8IMUFrameED1Ev>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4618      	mov	r0, r3
 800352a:	3708      	adds	r7, #8
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}

08003530 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 8003530:	b590      	push	{r4, r7, lr}
 8003532:	b089      	sub	sp, #36	; 0x24
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 800353a:	2018      	movs	r0, #24
 800353c:	f7fd fc4b 	bl	8000dd6 <_ZSt16__deque_buf_sizej>
 8003540:	4602      	mov	r2, r0
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	fbb3 f3f2 	udiv	r3, r3, r2
 8003548:	3301      	adds	r3, #1
 800354a:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 800354c:	2308      	movs	r3, #8
 800354e:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	3302      	adds	r3, #2
 8003554:	613b      	str	r3, [r7, #16]
 8003556:	f107 0210 	add.w	r2, r7, #16
 800355a:	f107 030c 	add.w	r3, r7, #12
 800355e:	4611      	mov	r1, r2
 8003560:	4618      	mov	r0, r3
 8003562:	f000 f97c 	bl	800385e <_ZSt3maxIjERKT_S2_S2_>
 8003566:	4603      	mov	r3, r0
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	4619      	mov	r1, r3
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f000 ffb9 	bl	80044ec <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE15_M_allocate_mapEj>
 800357a:	4602      	mov	r2, r0
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6859      	ldr	r1, [r3, #4]
 8003588:	69fb      	ldr	r3, [r7, #28]
 800358a:	1acb      	subs	r3, r1, r3
 800358c:	085b      	lsrs	r3, r3, #1
 800358e:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 8003590:	4413      	add	r3, r2
 8003592:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 8003594:	69fb      	ldr	r3, [r7, #28]
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	69ba      	ldr	r2, [r7, #24]
 800359a:	4413      	add	r3, r2
 800359c:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 800359e:	697a      	ldr	r2, [r7, #20]
 80035a0:	69b9      	ldr	r1, [r7, #24]
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f000 ffbf 	bl	8004526 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE15_M_create_nodesEPPS0_S4_>
      this->_M_impl._M_start._M_set_node(__nstart);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	3308      	adds	r3, #8
 80035ac:	69b9      	ldr	r1, [r7, #24]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f000 ff29 	bl	8004406 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f103 0218 	add.w	r2, r3, #24
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	3b04      	subs	r3, #4
 80035be:	4619      	mov	r1, r3
 80035c0:	4610      	mov	r0, r2
 80035c2:	f000 ff20 	bl	8004406 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	68da      	ldr	r2, [r3, #12]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 80035d2:	2018      	movs	r0, #24
 80035d4:	f7fd fbff 	bl	8000dd6 <_ZSt16__deque_buf_sizej>
 80035d8:	4602      	mov	r2, r0
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	fbb3 f1f2 	udiv	r1, r3, r2
 80035e0:	fb01 f202 	mul.w	r2, r1, r2
 80035e4:	1a9a      	subs	r2, r3, r2
					+ __num_elements
 80035e6:	4613      	mov	r3, r2
 80035e8:	005b      	lsls	r3, r3, #1
 80035ea:	4413      	add	r3, r2
 80035ec:	00db      	lsls	r3, r3, #3
 80035ee:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	619a      	str	r2, [r3, #24]
    }
 80035f4:	bf00      	nop
 80035f6:	3724      	adds	r7, #36	; 0x24
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd90      	pop	{r4, r7, pc}

080035fc <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_M_destroy_nodesEPPS0_S4_>:
    _Deque_base<_Tp, _Alloc>::
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b086      	sub	sp, #24
 8003600:	af00      	add	r7, sp, #0
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	60b9      	str	r1, [r7, #8]
 8003606:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	617b      	str	r3, [r7, #20]
 800360c:	697a      	ldr	r2, [r7, #20]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	429a      	cmp	r2, r3
 8003612:	d209      	bcs.n	8003628 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_M_destroy_nodesEPPS0_S4_+0x2c>
	_M_deallocate_node(*__n);
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4619      	mov	r1, r3
 800361a:	68f8      	ldr	r0, [r7, #12]
 800361c:	f000 fee0 	bl	80043e0 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE18_M_deallocate_nodeEPS0_>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	3304      	adds	r3, #4
 8003624:	617b      	str	r3, [r7, #20]
 8003626:	e7f1      	b.n	800360c <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_M_destroy_nodesEPPS0_S4_+0x10>
    }
 8003628:	bf00      	nop
 800362a:	3718      	adds	r7, #24
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}

08003630 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE17_M_deallocate_mapEPPS0_j>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 8003630:	b580      	push	{r7, lr}
 8003632:	b086      	sub	sp, #24
 8003634:	af00      	add	r7, sp, #0
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 800363c:	f107 0314 	add.w	r3, r7, #20
 8003640:	68f9      	ldr	r1, [r7, #12]
 8003642:	4618      	mov	r0, r3
 8003644:	f000 ff89 	bl	800455a <_ZNKSt11_Deque_baseI8IMUFrameSaIS0_EE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 8003648:	f107 0314 	add.w	r3, r7, #20
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	68b9      	ldr	r1, [r7, #8]
 8003650:	4618      	mov	r0, r3
 8003652:	f000 ff9f 	bl	8004594 <_ZNSt16allocator_traitsISaIP8IMUFrameEE10deallocateERS2_PS1_j>
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8003656:	f107 0314 	add.w	r3, r7, #20
 800365a:	4618      	mov	r0, r3
 800365c:	f000 ff8e 	bl	800457c <_ZNSaIP8IMUFrameED1Ev>
      }
 8003660:	bf00      	nop
 8003662:	3718      	adds	r7, #24
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <_ZNSt5dequeI8IMUFrameSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	3308      	adds	r3, #8
 8003676:	4619      	mov	r1, r3
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f000 f813 	bl	80036a4 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	3708      	adds	r7, #8
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}

08003686 <_ZNSt5dequeI8IMUFrameSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8003686:	b580      	push	{r7, lr}
 8003688:	b082      	sub	sp, #8
 800368a:	af00      	add	r7, sp, #0
 800368c:	6078      	str	r0, [r7, #4]
 800368e:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	3318      	adds	r3, #24
 8003694:	4619      	mov	r1, r3
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f000 f804 	bl	80036a4 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	3708      	adds	r7, #8
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}

080036a4 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	605a      	str	r2, [r3, #4]
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	689a      	ldr	r2, [r3, #8]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	609a      	str	r2, [r3, #8]
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	68da      	ldr	r2, [r3, #12]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	60da      	str	r2, [r3, #12]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4618      	mov	r0, r3
 80036d2:	370c      	adds	r7, #12
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr

080036dc <_ZNSt5dequeI8IMUFrameSaIS0_EE15_M_destroy_dataESt15_Deque_iteratorIS0_RS0_PS0_ES6_RKS1_>:
      _M_destroy_data(iterator __first, iterator __last,
 80036dc:	b480      	push	{r7}
 80036de:	b08d      	sub	sp, #52	; 0x34
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	60b9      	str	r1, [r7, #8]
 80036e6:	607a      	str	r2, [r7, #4]
 80036e8:	603b      	str	r3, [r7, #0]
      }
 80036ea:	bf00      	nop
 80036ec:	3734      	adds	r7, #52	; 0x34
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr

080036f6 <_ZSt4moveIRSt5dequeI7RequestSaIS1_EEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 80036f6:	b480      	push	{r7}
 80036f8:	b083      	sub	sp, #12
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4618      	mov	r0, r3
 8003702:	370c      	adds	r7, #12
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr

0800370c <_ZNSt5dequeI7RequestSaIS0_EE15_M_move_assign1EOS2_St17integral_constantIbLb1EE>:

#if __cplusplus >= 201103L
      // Constant-time, nothrow move assignment when source object's memory
      // can be moved because the allocators are equal.
      void
      _M_move_assign1(deque&& __x, /* always equal: */ true_type) noexcept
 800370c:	b590      	push	{r4, r7, lr}
 800370e:	b085      	sub	sp, #20
 8003710:	af00      	add	r7, sp, #0
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	713a      	strb	r2, [r7, #4]
      {
	this->_M_impl._M_swap_data(__x._M_impl);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	68ba      	ldr	r2, [r7, #8]
 800371c:	4611      	mov	r1, r2
 800371e:	4618      	mov	r0, r3
 8003720:	f000 ff47 	bl	80045b2 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_Deque_impl_data12_M_swap_dataERS3_>
	__x.clear();
 8003724:	68b8      	ldr	r0, [r7, #8]
 8003726:	f000 ff51 	bl	80045cc <_ZNSt5dequeI7RequestSaIS0_EE5clearEv>
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	4618      	mov	r0, r3
 800372e:	f7ff f90e 	bl	800294e <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 8003732:	4604      	mov	r4, r0
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	4618      	mov	r0, r3
 8003738:	f7ff f909 	bl	800294e <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 800373c:	4603      	mov	r3, r0
 800373e:	4619      	mov	r1, r3
 8003740:	4620      	mov	r0, r4
 8003742:	f000 ff57 	bl	80045f4 <_ZSt15__alloc_on_moveISaI7RequestEEvRT_S3_>
      }
 8003746:	bf00      	nop
 8003748:	3714      	adds	r7, #20
 800374a:	46bd      	mov	sp, r7
 800374c:	bd90      	pop	{r4, r7, pc}

0800374e <_ZSt4moveIRSt5dequeI8ResponceSaIS1_EEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 800374e:	b480      	push	{r7}
 8003750:	b083      	sub	sp, #12
 8003752:	af00      	add	r7, sp, #0
 8003754:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4618      	mov	r0, r3
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <_ZNSt5dequeI8ResponceSaIS0_EE15_M_move_assign1EOS2_St17integral_constantIbLb1EE>:
      _M_move_assign1(deque&& __x, /* always equal: */ true_type) noexcept
 8003764:	b590      	push	{r4, r7, lr}
 8003766:	b085      	sub	sp, #20
 8003768:	af00      	add	r7, sp, #0
 800376a:	60f8      	str	r0, [r7, #12]
 800376c:	60b9      	str	r1, [r7, #8]
 800376e:	713a      	strb	r2, [r7, #4]
	this->_M_impl._M_swap_data(__x._M_impl);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	68ba      	ldr	r2, [r7, #8]
 8003774:	4611      	mov	r1, r2
 8003776:	4618      	mov	r0, r3
 8003778:	f000 ff4a 	bl	8004610 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_Deque_impl_data12_M_swap_dataERS3_>
	__x.clear();
 800377c:	68b8      	ldr	r0, [r7, #8]
 800377e:	f000 ff54 	bl	800462a <_ZNSt5dequeI8ResponceSaIS0_EE5clearEv>
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	4618      	mov	r0, r3
 8003786:	f7ff f985 	bl	8002a94 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 800378a:	4604      	mov	r4, r0
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	4618      	mov	r0, r3
 8003790:	f7ff f980 	bl	8002a94 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 8003794:	4603      	mov	r3, r0
 8003796:	4619      	mov	r1, r3
 8003798:	4620      	mov	r0, r4
 800379a:	f000 ff5a 	bl	8004652 <_ZSt15__alloc_on_moveISaI8ResponceEEvRT_S3_>
      }
 800379e:	bf00      	nop
 80037a0:	3714      	adds	r7, #20
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd90      	pop	{r4, r7, pc}

080037a6 <_ZSt4moveIRSt5dequeI8IMUFrameSaIS1_EEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 80037a6:	b480      	push	{r7}
 80037a8:	b083      	sub	sp, #12
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4618      	mov	r0, r3
 80037b2:	370c      	adds	r7, #12
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr

080037bc <_ZNSt5dequeI8IMUFrameSaIS0_EE15_M_move_assign1EOS2_St17integral_constantIbLb1EE>:
      _M_move_assign1(deque&& __x, /* always equal: */ true_type) noexcept
 80037bc:	b590      	push	{r4, r7, lr}
 80037be:	b085      	sub	sp, #20
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	60f8      	str	r0, [r7, #12]
 80037c4:	60b9      	str	r1, [r7, #8]
 80037c6:	713a      	strb	r2, [r7, #4]
	this->_M_impl._M_swap_data(__x._M_impl);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	68ba      	ldr	r2, [r7, #8]
 80037cc:	4611      	mov	r1, r2
 80037ce:	4618      	mov	r0, r3
 80037d0:	f000 ff4d 	bl	800466e <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_Deque_impl_data12_M_swap_dataERS3_>
	__x.clear();
 80037d4:	68b8      	ldr	r0, [r7, #8]
 80037d6:	f000 ff57 	bl	8004688 <_ZNSt5dequeI8IMUFrameSaIS0_EE5clearEv>
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	4618      	mov	r0, r3
 80037de:	f7ff fe2a 	bl	8003436 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE19_M_get_Tp_allocatorEv>
 80037e2:	4604      	mov	r4, r0
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	4618      	mov	r0, r3
 80037e8:	f7ff fe25 	bl	8003436 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE19_M_get_Tp_allocatorEv>
 80037ec:	4603      	mov	r3, r0
 80037ee:	4619      	mov	r1, r3
 80037f0:	4620      	mov	r0, r4
 80037f2:	f000 ff5d 	bl	80046b0 <_ZSt15__alloc_on_moveISaI8IMUFrameEEvRT_S3_>
      }
 80037f6:	bf00      	nop
 80037f8:	3714      	adds	r7, #20
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd90      	pop	{r4, r7, pc}

080037fe <_ZNSaI7RequestEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80037fe:	b580      	push	{r7, lr}
 8003800:	b082      	sub	sp, #8
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 ff60 	bl	80046cc <_ZN9__gnu_cxx13new_allocatorI7RequestEC1Ev>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	4618      	mov	r0, r3
 8003810:	3708      	adds	r7, #8
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}

08003816 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 8003816:	b580      	push	{r7, lr}
 8003818:	b082      	sub	sp, #8
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	601a      	str	r2, [r3, #0]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	605a      	str	r2, [r3, #4]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	3308      	adds	r3, #8
 800382e:	4618      	mov	r0, r3
 8003830:	f000 ff57 	bl	80046e2 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1Ev>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	3318      	adds	r3, #24
 8003838:	4618      	mov	r0, r3
 800383a:	f000 ff52 	bl	80046e2 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1Ev>
	{ }
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4618      	mov	r0, r3
 8003842:	3708      	adds	r7, #8
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <_ZN9__gnu_cxx13new_allocatorI7RequestED1Ev>:
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	4618      	mov	r0, r3
 8003854:	370c      	adds	r7, #12
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr

0800385e <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 800385e:	b480      	push	{r7}
 8003860:	b083      	sub	sp, #12
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
 8003866:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	429a      	cmp	r2, r3
 8003872:	d201      	bcs.n	8003878 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	e000      	b.n	800387a <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8003878:	687b      	ldr	r3, [r7, #4]
    }
 800387a:	4618      	mov	r0, r3
 800387c:	370c      	adds	r7, #12
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr

08003886 <_ZNSt11_Deque_baseI7RequestSaIS0_EE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 8003886:	b590      	push	{r4, r7, lr}
 8003888:	b085      	sub	sp, #20
 800388a:	af00      	add	r7, sp, #0
 800388c:	6078      	str	r0, [r7, #4]
 800388e:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8003890:	f107 030c 	add.w	r3, r7, #12
 8003894:	6879      	ldr	r1, [r7, #4]
 8003896:	4618      	mov	r0, r3
 8003898:	f000 f85b 	bl	8003952 <_ZNKSt11_Deque_baseI7RequestSaIS0_EE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 800389c:	f107 030c 	add.w	r3, r7, #12
 80038a0:	6839      	ldr	r1, [r7, #0]
 80038a2:	4618      	mov	r0, r3
 80038a4:	f000 ff34 	bl	8004710 <_ZNSt16allocator_traitsISaIP7RequestEE8allocateERS2_j>
 80038a8:	4604      	mov	r4, r0
 80038aa:	bf00      	nop
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 80038ac:	f107 030c 	add.w	r3, r7, #12
 80038b0:	4618      	mov	r0, r3
 80038b2:	f000 f85f 	bl	8003974 <_ZNSaIP7RequestED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 80038b6:	4623      	mov	r3, r4
      }
 80038b8:	4618      	mov	r0, r3
 80038ba:	3714      	adds	r7, #20
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd90      	pop	{r4, r7, pc}

080038c0 <_ZNSt11_Deque_baseI7RequestSaIS0_EE15_M_create_nodesEPPS0_S4_>:
    _Deque_base<_Tp, _Alloc>::
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b086      	sub	sp, #24
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	60f8      	str	r0, [r7, #12]
 80038c8:	60b9      	str	r1, [r7, #8]
 80038ca:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	617b      	str	r3, [r7, #20]
 80038d0:	697a      	ldr	r2, [r7, #20]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d209      	bcs.n	80038ec <_ZNSt11_Deque_baseI7RequestSaIS0_EE15_M_create_nodesEPPS0_S4_+0x2c>
	    *__cur = this->_M_allocate_node();
 80038d8:	68f8      	ldr	r0, [r7, #12]
 80038da:	f000 fa51 	bl	8003d80 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_M_allocate_nodeEv>
 80038de:	4602      	mov	r2, r0
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	3304      	adds	r3, #4
 80038e8:	617b      	str	r3, [r7, #20]
 80038ea:	e7f1      	b.n	80038d0 <_ZNSt11_Deque_baseI7RequestSaIS0_EE15_M_create_nodesEPPS0_S4_+0x10>
    }
 80038ec:	bf00      	nop
 80038ee:	3718      	adds	r7, #24
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E11_M_set_nodeEPS2_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 80038f4:	b590      	push	{r4, r7, lr}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	683a      	ldr	r2, [r7, #0]
 8003902:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	685c      	ldr	r4, [r3, #4]
 8003910:	f000 ff0d 	bl	800472e <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E14_S_buffer_sizeEv>
 8003914:	4602      	mov	r2, r0
 8003916:	4613      	mov	r3, r2
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	4413      	add	r3, r2
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	18e2      	adds	r2, r4, r3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	609a      	str	r2, [r3, #8]
      }
 8003924:	bf00      	nop
 8003926:	370c      	adds	r7, #12
 8003928:	46bd      	mov	sp, r7
 800392a:	bd90      	pop	{r4, r7, pc}

0800392c <_ZNSt11_Deque_baseI7RequestSaIS0_EE18_M_deallocate_nodeEPS0_>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 800392c:	b590      	push	{r4, r7, lr}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 8003936:	687c      	ldr	r4, [r7, #4]
 8003938:	2014      	movs	r0, #20
 800393a:	f7fd fa4c 	bl	8000dd6 <_ZSt16__deque_buf_sizej>
 800393e:	4603      	mov	r3, r0
 8003940:	461a      	mov	r2, r3
 8003942:	6839      	ldr	r1, [r7, #0]
 8003944:	4620      	mov	r0, r4
 8003946:	f000 fefa 	bl	800473e <_ZNSt16allocator_traitsISaI7RequestEE10deallocateERS1_PS0_j>
      }
 800394a:	bf00      	nop
 800394c:	370c      	adds	r7, #12
 800394e:	46bd      	mov	sp, r7
 8003950:	bd90      	pop	{r4, r7, pc}

08003952 <_ZNKSt11_Deque_baseI7RequestSaIS0_EE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 8003952:	b580      	push	{r7, lr}
 8003954:	b082      	sub	sp, #8
 8003956:	af00      	add	r7, sp, #0
 8003958:	6078      	str	r0, [r7, #4]
 800395a:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 800395c:	6838      	ldr	r0, [r7, #0]
 800395e:	f000 fefd 	bl	800475c <_ZNKSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 8003962:	4603      	mov	r3, r0
 8003964:	4619      	mov	r1, r3
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f000 ff03 	bl	8004772 <_ZNSaIP7RequestEC1IS_EERKSaIT_E>
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	3708      	adds	r7, #8
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}

08003974 <_ZNSaIP7RequestED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f000 ff05 	bl	800478c <_ZN9__gnu_cxx13new_allocatorIP7RequestED1Ev>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4618      	mov	r0, r3
 8003986:	3708      	adds	r7, #8
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}

0800398c <_ZNSt16allocator_traitsISaIP7RequestEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800398c:	b580      	push	{r7, lr}
 800398e:	b084      	sub	sp, #16
 8003990:	af00      	add	r7, sp, #0
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	68b9      	ldr	r1, [r7, #8]
 800399c:	68f8      	ldr	r0, [r7, #12]
 800399e:	f000 ff00 	bl	80047a2 <_ZN9__gnu_cxx13new_allocatorIP7RequestE10deallocateEPS2_j>
 80039a2:	bf00      	nop
 80039a4:	3710      	adds	r7, #16
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}

080039aa <_ZNSt5dequeI7RequestSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_>:
	}
      }

   template<typename _Tp, typename _Alloc>
     void
     deque<_Tp, _Alloc>::
 80039aa:	b5b0      	push	{r4, r5, r7, lr}
 80039ac:	b086      	sub	sp, #24
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	60f8      	str	r0, [r7, #12]
 80039b2:	60b9      	str	r1, [r7, #8]
 80039b4:	607a      	str	r2, [r7, #4]
     _M_destroy_data_aux(iterator __first, iterator __last)
     {
       for (_Map_pointer __node = __first._M_node + 1;
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	3304      	adds	r3, #4
 80039bc:	617b      	str	r3, [r7, #20]
	    __node < __last._M_node; ++__node)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	697a      	ldr	r2, [r7, #20]
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d219      	bcs.n	80039fc <_ZNSt5dequeI7RequestSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_+0x52>
	 std::_Destroy(*__node, *__node + _S_buffer_size(),
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	681d      	ldr	r5, [r3, #0]
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	681c      	ldr	r4, [r3, #0]
 80039d0:	f000 fef7 	bl	80047c2 <_ZNSt5dequeI7RequestSaIS0_EE14_S_buffer_sizeEv>
 80039d4:	4602      	mov	r2, r0
 80039d6:	4613      	mov	r3, r2
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	4413      	add	r3, r2
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	441c      	add	r4, r3
		       _M_get_Tp_allocator());
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	4618      	mov	r0, r3
 80039e4:	f7fe ffb3 	bl	800294e <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 80039e8:	4603      	mov	r3, r0
	 std::_Destroy(*__node, *__node + _S_buffer_size(),
 80039ea:	461a      	mov	r2, r3
 80039ec:	4621      	mov	r1, r4
 80039ee:	4628      	mov	r0, r5
 80039f0:	f000 feef 	bl	80047d2 <_ZSt8_DestroyIP7RequestS0_EvT_S2_RSaIT0_E>
       for (_Map_pointer __node = __first._M_node + 1;
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	3304      	adds	r3, #4
 80039f8:	617b      	str	r3, [r7, #20]
 80039fa:	e7e0      	b.n	80039be <_ZNSt5dequeI7RequestSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_+0x14>

       if (__first._M_node != __last._M_node)
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	68da      	ldr	r2, [r3, #12]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d01c      	beq.n	8003a42 <_ZNSt5dequeI7RequestSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_+0x98>
	 {
	   std::_Destroy(__first._M_cur, __first._M_last,
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	681c      	ldr	r4, [r3, #0]
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	689d      	ldr	r5, [r3, #8]
			 _M_get_Tp_allocator());
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	4618      	mov	r0, r3
 8003a14:	f7fe ff9b 	bl	800294e <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 8003a18:	4603      	mov	r3, r0
	   std::_Destroy(__first._M_cur, __first._M_last,
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	4629      	mov	r1, r5
 8003a1e:	4620      	mov	r0, r4
 8003a20:	f000 fed7 	bl	80047d2 <_ZSt8_DestroyIP7RequestS0_EvT_S2_RSaIT0_E>
	   std::_Destroy(__last._M_first, __last._M_cur,
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685c      	ldr	r4, [r3, #4]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681d      	ldr	r5, [r3, #0]
			 _M_get_Tp_allocator());
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f7fe ff8d 	bl	800294e <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 8003a34:	4603      	mov	r3, r0
	   std::_Destroy(__last._M_first, __last._M_cur,
 8003a36:	461a      	mov	r2, r3
 8003a38:	4629      	mov	r1, r5
 8003a3a:	4620      	mov	r0, r4
 8003a3c:	f000 fec9 	bl	80047d2 <_ZSt8_DestroyIP7RequestS0_EvT_S2_RSaIT0_E>
	 }
       else
	 std::_Destroy(__first._M_cur, __last._M_cur,
		       _M_get_Tp_allocator());
     }
 8003a40:	e00d      	b.n	8003a5e <_ZNSt5dequeI7RequestSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_+0xb4>
	 std::_Destroy(__first._M_cur, __last._M_cur,
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	681c      	ldr	r4, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681d      	ldr	r5, [r3, #0]
		       _M_get_Tp_allocator());
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f7fe ff7e 	bl	800294e <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 8003a52:	4603      	mov	r3, r0
	 std::_Destroy(__first._M_cur, __last._M_cur,
 8003a54:	461a      	mov	r2, r3
 8003a56:	4629      	mov	r1, r5
 8003a58:	4620      	mov	r0, r4
 8003a5a:	f000 feba 	bl	80047d2 <_ZSt8_DestroyIP7RequestS0_EvT_S2_RSaIT0_E>
     }
 8003a5e:	bf00      	nop
 8003a60:	3718      	adds	r7, #24
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bdb0      	pop	{r4, r5, r7, pc}

08003a66 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 8003a66:	b580      	push	{r7, lr}
 8003a68:	b082      	sub	sp, #8
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f000 febd 	bl	80047ee <_ZNSaI8ResponceEC1Ev>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	4618      	mov	r0, r3
 8003a78:	f000 fec5 	bl	8004806 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_Deque_impl_dataC1Ev>
	{ }
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3708      	adds	r7, #8
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}

08003a86 <_ZNSaI8ResponceED1Ev>:
 8003a86:	b580      	push	{r7, lr}
 8003a88:	b082      	sub	sp, #8
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	6078      	str	r0, [r7, #4]
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f000 fed2 	bl	8004838 <_ZN9__gnu_cxx13new_allocatorI8ResponceED1Ev>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	4618      	mov	r0, r3
 8003a98:	3708      	adds	r7, #8
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}

08003a9e <_ZNSt11_Deque_baseI8ResponceSaIS0_EE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 8003a9e:	b590      	push	{r4, r7, lr}
 8003aa0:	b089      	sub	sp, #36	; 0x24
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	6078      	str	r0, [r7, #4]
 8003aa6:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 8003aa8:	2010      	movs	r0, #16
 8003aaa:	f7fd f994 	bl	8000dd6 <_ZSt16__deque_buf_sizej>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8003aba:	2308      	movs	r3, #8
 8003abc:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	3302      	adds	r3, #2
 8003ac2:	613b      	str	r3, [r7, #16]
 8003ac4:	f107 0210 	add.w	r2, r7, #16
 8003ac8:	f107 030c 	add.w	r3, r7, #12
 8003acc:	4611      	mov	r1, r2
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f7ff fec5 	bl	800385e <_ZSt3maxIjERKT_S2_S2_>
 8003ad4:	4603      	mov	r3, r0
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f000 feb3 	bl	800484e <_ZNSt11_Deque_baseI8ResponceSaIS0_EE15_M_allocate_mapEj>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6859      	ldr	r1, [r3, #4]
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	1acb      	subs	r3, r1, r3
 8003afa:	085b      	lsrs	r3, r3, #1
 8003afc:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 8003afe:	4413      	add	r3, r2
 8003b00:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	69ba      	ldr	r2, [r7, #24]
 8003b08:	4413      	add	r3, r2
 8003b0a:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 8003b0c:	697a      	ldr	r2, [r7, #20]
 8003b0e:	69b9      	ldr	r1, [r7, #24]
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f000 feb9 	bl	8004888 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE15_M_create_nodesEPPS0_S4_>
      this->_M_impl._M_start._M_set_node(__nstart);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	3308      	adds	r3, #8
 8003b1a:	69b9      	ldr	r1, [r7, #24]
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f000 fecd 	bl	80048bc <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f103 0218 	add.w	r2, r3, #24
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	3b04      	subs	r3, #4
 8003b2c:	4619      	mov	r1, r3
 8003b2e:	4610      	mov	r0, r2
 8003b30:	f000 fec4 	bl	80048bc <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	68da      	ldr	r2, [r3, #12]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 8003b40:	2010      	movs	r0, #16
 8003b42:	f7fd f948 	bl	8000dd6 <_ZSt16__deque_buf_sizej>
 8003b46:	4602      	mov	r2, r0
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	fbb3 f1f2 	udiv	r1, r3, r2
 8003b4e:	fb01 f202 	mul.w	r2, r1, r2
 8003b52:	1a9b      	subs	r3, r3, r2
					+ __num_elements
 8003b54:	011b      	lsls	r3, r3, #4
 8003b56:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	619a      	str	r2, [r3, #24]
    }
 8003b5c:	bf00      	nop
 8003b5e:	3724      	adds	r7, #36	; 0x24
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd90      	pop	{r4, r7, pc}

08003b64 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_M_destroy_nodesEPPS0_S4_>:
    _Deque_base<_Tp, _Alloc>::
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b086      	sub	sp, #24
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	60f8      	str	r0, [r7, #12]
 8003b6c:	60b9      	str	r1, [r7, #8]
 8003b6e:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	617b      	str	r3, [r7, #20]
 8003b74:	697a      	ldr	r2, [r7, #20]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d209      	bcs.n	8003b90 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_M_destroy_nodesEPPS0_S4_+0x2c>
	_M_deallocate_node(*__n);
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4619      	mov	r1, r3
 8003b82:	68f8      	ldr	r0, [r7, #12]
 8003b84:	f000 feb3 	bl	80048ee <_ZNSt11_Deque_baseI8ResponceSaIS0_EE18_M_deallocate_nodeEPS0_>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	3304      	adds	r3, #4
 8003b8c:	617b      	str	r3, [r7, #20]
 8003b8e:	e7f1      	b.n	8003b74 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_M_destroy_nodesEPPS0_S4_+0x10>
    }
 8003b90:	bf00      	nop
 8003b92:	3718      	adds	r7, #24
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE17_M_deallocate_mapEPPS0_j>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b086      	sub	sp, #24
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	60b9      	str	r1, [r7, #8]
 8003ba2:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8003ba4:	f107 0314 	add.w	r3, r7, #20
 8003ba8:	68f9      	ldr	r1, [r7, #12]
 8003baa:	4618      	mov	r0, r3
 8003bac:	f000 feb2 	bl	8004914 <_ZNKSt11_Deque_baseI8ResponceSaIS0_EE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 8003bb0:	f107 0314 	add.w	r3, r7, #20
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	68b9      	ldr	r1, [r7, #8]
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f000 fec8 	bl	800494e <_ZNSt16allocator_traitsISaIP8ResponceEE10deallocateERS2_PS1_j>
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8003bbe:	f107 0314 	add.w	r3, r7, #20
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f000 feb7 	bl	8004936 <_ZNSaIP8ResponceED1Ev>
      }
 8003bc8:	bf00      	nop
 8003bca:	3718      	adds	r7, #24
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}

08003bd0 <_ZNSt5dequeI8ResponceSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_>:
     deque<_Tp, _Alloc>::
 8003bd0:	b5b0      	push	{r4, r5, r7, lr}
 8003bd2:	b086      	sub	sp, #24
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	60f8      	str	r0, [r7, #12]
 8003bd8:	60b9      	str	r1, [r7, #8]
 8003bda:	607a      	str	r2, [r7, #4]
       for (_Map_pointer __node = __first._M_node + 1;
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	3304      	adds	r3, #4
 8003be2:	617b      	str	r3, [r7, #20]
	    __node < __last._M_node; ++__node)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	697a      	ldr	r2, [r7, #20]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d216      	bcs.n	8003c1c <_ZNSt5dequeI8ResponceSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_+0x4c>
	 std::_Destroy(*__node, *__node + _S_buffer_size(),
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	681d      	ldr	r5, [r3, #0]
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	681c      	ldr	r4, [r3, #0]
 8003bf6:	f000 feb9 	bl	800496c <_ZNSt5dequeI8ResponceSaIS0_EE14_S_buffer_sizeEv>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	011b      	lsls	r3, r3, #4
 8003bfe:	441c      	add	r4, r3
		       _M_get_Tp_allocator());
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	4618      	mov	r0, r3
 8003c04:	f7fe ff46 	bl	8002a94 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 8003c08:	4603      	mov	r3, r0
	 std::_Destroy(*__node, *__node + _S_buffer_size(),
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	4621      	mov	r1, r4
 8003c0e:	4628      	mov	r0, r5
 8003c10:	f000 feb4 	bl	800497c <_ZSt8_DestroyIP8ResponceS0_EvT_S2_RSaIT0_E>
       for (_Map_pointer __node = __first._M_node + 1;
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	3304      	adds	r3, #4
 8003c18:	617b      	str	r3, [r7, #20]
 8003c1a:	e7e3      	b.n	8003be4 <_ZNSt5dequeI8ResponceSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_+0x14>
       if (__first._M_node != __last._M_node)
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	68da      	ldr	r2, [r3, #12]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d01c      	beq.n	8003c62 <_ZNSt5dequeI8ResponceSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_+0x92>
	   std::_Destroy(__first._M_cur, __first._M_last,
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	681c      	ldr	r4, [r3, #0]
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	689d      	ldr	r5, [r3, #8]
			 _M_get_Tp_allocator());
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	4618      	mov	r0, r3
 8003c34:	f7fe ff2e 	bl	8002a94 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 8003c38:	4603      	mov	r3, r0
	   std::_Destroy(__first._M_cur, __first._M_last,
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	4629      	mov	r1, r5
 8003c3e:	4620      	mov	r0, r4
 8003c40:	f000 fe9c 	bl	800497c <_ZSt8_DestroyIP8ResponceS0_EvT_S2_RSaIT0_E>
	   std::_Destroy(__last._M_first, __last._M_cur,
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	685c      	ldr	r4, [r3, #4]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681d      	ldr	r5, [r3, #0]
			 _M_get_Tp_allocator());
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f7fe ff20 	bl	8002a94 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 8003c54:	4603      	mov	r3, r0
	   std::_Destroy(__last._M_first, __last._M_cur,
 8003c56:	461a      	mov	r2, r3
 8003c58:	4629      	mov	r1, r5
 8003c5a:	4620      	mov	r0, r4
 8003c5c:	f000 fe8e 	bl	800497c <_ZSt8_DestroyIP8ResponceS0_EvT_S2_RSaIT0_E>
     }
 8003c60:	e00d      	b.n	8003c7e <_ZNSt5dequeI8ResponceSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_+0xae>
	 std::_Destroy(__first._M_cur, __last._M_cur,
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	681c      	ldr	r4, [r3, #0]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681d      	ldr	r5, [r3, #0]
		       _M_get_Tp_allocator());
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f7fe ff11 	bl	8002a94 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 8003c72:	4603      	mov	r3, r0
	 std::_Destroy(__first._M_cur, __last._M_cur,
 8003c74:	461a      	mov	r2, r3
 8003c76:	4629      	mov	r1, r5
 8003c78:	4620      	mov	r0, r4
 8003c7a:	f000 fe7f 	bl	800497c <_ZSt8_DestroyIP8ResponceS0_EvT_S2_RSaIT0_E>
     }
 8003c7e:	bf00      	nop
 8003c80:	3718      	adds	r7, #24
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bdb0      	pop	{r4, r5, r7, pc}

08003c86 <_ZN9__gnu_cxx13new_allocatorIhEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003c86:	b480      	push	{r7}
 8003c88:	b083      	sub	sp, #12
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4618      	mov	r0, r3
 8003c92:	370c      	adds	r7, #12
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr

08003c9c <_ZNSt16allocator_traitsISaIhEE10deallocateERS0_Phj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b084      	sub	sp, #16
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	60b9      	str	r1, [r7, #8]
 8003ca6:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	68b9      	ldr	r1, [r7, #8]
 8003cac:	68f8      	ldr	r0, [r7, #12]
 8003cae:	f000 fe73 	bl	8004998 <_ZN9__gnu_cxx13new_allocatorIhE10deallocateEPhj>
 8003cb2:	bf00      	nop
 8003cb4:	3710      	adds	r7, #16
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}

08003cba <_ZSt8_DestroyIPhEvT_S1_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8003cba:	b580      	push	{r7, lr}
 8003cbc:	b082      	sub	sp, #8
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
 8003cc2:	6039      	str	r1, [r7, #0]
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 8003cc4:	6839      	ldr	r1, [r7, #0]
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f000 fe74 	bl	80049b4 <_ZNSt12_Destroy_auxILb1EE9__destroyIPhEEvT_S3_>
    }
 8003ccc:	bf00      	nop
 8003cce:	3708      	adds	r7, #8
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}

08003cd4 <_ZN9__gnu_cxx13new_allocatorI7RequestE9constructIS1_JS1_EEEvPT_DpOT0_>:
      { return _M_max_size(); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 8003cd4:	b590      	push	{r4, r7, lr}
 8003cd6:	b085      	sub	sp, #20
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	60b9      	str	r1, [r7, #8]
 8003cde:	607a      	str	r2, [r7, #4]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f7fe ff74 	bl	8002bce <_ZSt7forwardI7RequestEOT_RNSt16remove_referenceIS1_E4typeE>
 8003ce6:	4604      	mov	r4, r0
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	4619      	mov	r1, r3
 8003cec:	2014      	movs	r0, #20
 8003cee:	f7fd f866 	bl	8000dbe <_ZnwjPv>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	4621      	mov	r1, r4
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f7fd fb77 	bl	80013ea <_ZN7RequestC1EOS_>
 8003cfc:	bf00      	nop
 8003cfe:	3714      	adds	r7, #20
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd90      	pop	{r4, r7, pc}

08003d04 <_ZNKSt5dequeI7RequestSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b082      	sub	sp, #8
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f103 0218 	add.w	r2, r3, #24
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	3308      	adds	r3, #8
 8003d16:	4619      	mov	r1, r3
 8003d18:	4610      	mov	r0, r2
 8003d1a:	f000 fe57 	bl	80049cc <_ZStmiRKSt15_Deque_iteratorI7RequestRS0_PS0_ES5_>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	4618      	mov	r0, r3
 8003d22:	3708      	adds	r7, #8
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <_ZNKSt5dequeI7RequestSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	4618      	mov	r0, r3
 8003d34:	f000 fd12 	bl	800475c <_ZNKSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f000 fe72 	bl	8004a24 <_ZNSt5dequeI7RequestSaIS0_EE11_S_max_sizeERKS1_>
 8003d40:	4603      	mov	r3, r0
 8003d42:	4618      	mov	r0, r3
 8003d44:	3708      	adds	r7, #8
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}

08003d4a <_ZNSt5dequeI7RequestSaIS0_EE22_M_reserve_map_at_backEj>:
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 8003d4a:	b580      	push	{r7, lr}
 8003d4c:	b082      	sub	sp, #8
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	6078      	str	r0, [r7, #4]
 8003d52:	6039      	str	r1, [r7, #0]
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	1c5a      	adds	r2, r3, #1
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 8003d5c:	6879      	ldr	r1, [r7, #4]
 8003d5e:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8003d60:	6879      	ldr	r1, [r7, #4]
 8003d62:	6809      	ldr	r1, [r1, #0]
 8003d64:	1a41      	subs	r1, r0, r1
 8003d66:	1089      	asrs	r1, r1, #2
 8003d68:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d904      	bls.n	8003d78 <_ZNSt5dequeI7RequestSaIS0_EE22_M_reserve_map_at_backEj+0x2e>
	  _M_reallocate_map(__nodes_to_add, false);
 8003d6e:	2200      	movs	r2, #0
 8003d70:	6839      	ldr	r1, [r7, #0]
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f000 fe70 	bl	8004a58 <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb>
      }
 8003d78:	bf00      	nop
 8003d7a:	3708      	adds	r7, #8
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}

08003d80 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_M_allocate_nodeEv>:
      _M_allocate_node()
 8003d80:	b590      	push	{r4, r7, lr}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 8003d88:	687c      	ldr	r4, [r7, #4]
 8003d8a:	2014      	movs	r0, #20
 8003d8c:	f7fd f823 	bl	8000dd6 <_ZSt16__deque_buf_sizej>
 8003d90:	4603      	mov	r3, r0
 8003d92:	4619      	mov	r1, r3
 8003d94:	4620      	mov	r0, r4
 8003d96:	f000 fef9 	bl	8004b8c <_ZNSt16allocator_traitsISaI7RequestEE8allocateERS1_j>
 8003d9a:	4603      	mov	r3, r0
      }
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd90      	pop	{r4, r7, pc}

08003da4 <_ZNSt5dequeI7RequestSaIS0_EE23_M_reserve_map_at_frontEj>:
      _M_reserve_map_at_front(size_type __nodes_to_add = 1)
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	6039      	str	r1, [r7, #0]
	if (__nodes_to_add > size_type(this->_M_impl._M_start._M_node
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	695a      	ldr	r2, [r3, #20]
				       - this->_M_impl._M_map))
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	1ad3      	subs	r3, r2, r3
 8003db8:	109b      	asrs	r3, r3, #2
	if (__nodes_to_add > size_type(this->_M_impl._M_start._M_node
 8003dba:	461a      	mov	r2, r3
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d904      	bls.n	8003dcc <_ZNSt5dequeI7RequestSaIS0_EE23_M_reserve_map_at_frontEj+0x28>
	  _M_reallocate_map(__nodes_to_add, true);
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	6839      	ldr	r1, [r7, #0]
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f000 fe46 	bl	8004a58 <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb>
      }
 8003dcc:	bf00      	nop
 8003dce:	3708      	adds	r7, #8
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}

08003dd4 <_ZSteqRKSt15_Deque_iteratorI8ResponceRS0_PS0_ES5_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	6039      	str	r1, [r7, #0]
      { return __x._M_cur == __y._M_cur; }
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	429a      	cmp	r2, r3
 8003de8:	bf0c      	ite	eq
 8003dea:	2301      	moveq	r3, #1
 8003dec:	2300      	movne	r3, #0
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	4618      	mov	r0, r3
 8003df2:	370c      	adds	r7, #12
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <_ZNKSt15_Deque_iteratorI8ResponceRS0_PS0_EdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8003dfc:	b480      	push	{r7}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4618      	mov	r0, r3
 8003e0a:	370c      	adds	r7, #12
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr

08003e14 <_ZN9__gnu_cxx13new_allocatorIhEC1ERKS1_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8003e14:	b480      	push	{r7}
 8003e16:	b083      	sub	sp, #12
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4618      	mov	r0, r3
 8003e22:	370c      	adds	r7, #12
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr

08003e2c <_ZNSt16allocator_traitsISaI8ResponceEE7destroyIS0_EEvRS1_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b082      	sub	sp, #8
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 8003e36:	6839      	ldr	r1, [r7, #0]
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f000 feb6 	bl	8004baa <_ZN9__gnu_cxx13new_allocatorI8ResponceE7destroyIS1_EEvPT_>
	}
 8003e3e:	bf00      	nop
 8003e40:	3708      	adds	r7, #8
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}

08003e46 <_ZNSt5dequeI8ResponceSaIS0_EE16_M_pop_front_auxEv>:
    void deque<_Tp, _Alloc>::
 8003e46:	b580      	push	{r7, lr}
 8003e48:	b082      	sub	sp, #8
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	6078      	str	r0, [r7, #4]
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4618      	mov	r0, r3
 8003e52:	f7fe fe1f 	bl	8002a94 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 8003e56:	4602      	mov	r2, r0
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	4610      	mov	r0, r2
 8003e60:	f7ff ffe4 	bl	8003e2c <_ZNSt16allocator_traitsISaI8ResponceEE7destroyIS0_EEvRS1_PT_>
      _M_deallocate_node(this->_M_impl._M_start._M_first);
 8003e64:	687a      	ldr	r2, [r7, #4]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	4619      	mov	r1, r3
 8003e6c:	4610      	mov	r0, r2
 8003e6e:	f000 fd3e 	bl	80048ee <_ZNSt11_Deque_baseI8ResponceSaIS0_EE18_M_deallocate_nodeEPS0_>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f103 0208 	add.w	r2, r3, #8
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	695b      	ldr	r3, [r3, #20]
 8003e7c:	3304      	adds	r3, #4
 8003e7e:	4619      	mov	r1, r3
 8003e80:	4610      	mov	r0, r2
 8003e82:	f000 fd1b 	bl	80048bc <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	68da      	ldr	r2, [r3, #12]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	609a      	str	r2, [r3, #8]
    }
 8003e8e:	bf00      	nop
 8003e90:	3708      	adds	r7, #8
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}

08003e96 <_ZNSt16allocator_traitsISaI8ResponceEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8003e96:	b580      	push	{r7, lr}
 8003e98:	b084      	sub	sp, #16
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	60f8      	str	r0, [r7, #12]
 8003e9e:	60b9      	str	r1, [r7, #8]
 8003ea0:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f7fe ffe2 	bl	8002e6c <_ZSt7forwardI8ResponceEOT_RNSt16remove_referenceIS1_E4typeE>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	461a      	mov	r2, r3
 8003eac:	68b9      	ldr	r1, [r7, #8]
 8003eae:	68f8      	ldr	r0, [r7, #12]
 8003eb0:	f000 fe87 	bl	8004bc2 <_ZN9__gnu_cxx13new_allocatorI8ResponceE9constructIS1_JS1_EEEvPT_DpOT0_>
	}
 8003eb4:	bf00      	nop
 8003eb6:	3710      	adds	r7, #16
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}

08003ebc <_ZNSt5dequeI8ResponceSaIS0_EE16_M_push_back_auxIJS0_EEEvDpOT_>:
      deque<_Tp, _Alloc>::
 8003ebc:	b5b0      	push	{r4, r5, r7, lr}
 8003ebe:	b082      	sub	sp, #8
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	6039      	str	r1, [r7, #0]
	if (size() == max_size())
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f000 fe93 	bl	8004bf2 <_ZNKSt5dequeI8ResponceSaIS0_EE4sizeEv>
 8003ecc:	4604      	mov	r4, r0
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f000 fea1 	bl	8004c16 <_ZNKSt5dequeI8ResponceSaIS0_EE8max_sizeEv>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	429c      	cmp	r4, r3
 8003ed8:	bf0c      	ite	eq
 8003eda:	2301      	moveq	r3, #1
 8003edc:	2300      	movne	r3, #0
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d002      	beq.n	8003eea <_ZNSt5dequeI8ResponceSaIS0_EE16_M_push_back_auxIJS0_EEEvDpOT_+0x2e>
	  __throw_length_error(
 8003ee4:	4816      	ldr	r0, [pc, #88]	; (8003f40 <_ZNSt5dequeI8ResponceSaIS0_EE16_M_push_back_auxIJS0_EEEvDpOT_+0x84>)
 8003ee6:	f015 ffe1 	bl	8019eac <_ZSt20__throw_length_errorPKc>
	_M_reserve_map_at_back();
 8003eea:	2101      	movs	r1, #1
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f000 fea3 	bl	8004c38 <_ZNSt5dequeI8ResponceSaIS0_EE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef8:	1d1c      	adds	r4, r3, #4
 8003efa:	4610      	mov	r0, r2
 8003efc:	f000 feb7 	bl	8004c6e <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_M_allocate_nodeEv>
 8003f00:	4603      	mov	r3, r0
 8003f02:	6023      	str	r3, [r4, #0]
	    _Alloc_traits::construct(this->_M_impl,
 8003f04:	687c      	ldr	r4, [r7, #4]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	699d      	ldr	r5, [r3, #24]
 8003f0a:	6838      	ldr	r0, [r7, #0]
 8003f0c:	f7fe ffae 	bl	8002e6c <_ZSt7forwardI8ResponceEOT_RNSt16remove_referenceIS1_E4typeE>
 8003f10:	4603      	mov	r3, r0
 8003f12:	461a      	mov	r2, r3
 8003f14:	4629      	mov	r1, r5
 8003f16:	4620      	mov	r0, r4
 8003f18:	f7ff ffbd 	bl	8003e96 <_ZNSt16allocator_traitsISaI8ResponceEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	f103 0218 	add.w	r2, r3, #24
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f26:	3304      	adds	r3, #4
 8003f28:	4619      	mov	r1, r3
 8003f2a:	4610      	mov	r0, r2
 8003f2c:	f000 fcc6 	bl	80048bc <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E11_M_set_nodeEPS2_>
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	69da      	ldr	r2, [r3, #28]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	619a      	str	r2, [r3, #24]
      }
 8003f38:	bf00      	nop
 8003f3a:	3708      	adds	r7, #8
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bdb0      	pop	{r4, r5, r7, pc}
 8003f40:	0801b280 	.word	0x0801b280

08003f44 <_ZNKSt6vectorIhSaIhEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b082      	sub	sp, #8
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f7ff f8f1 	bl	8003136 <_ZNKSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8003f54:	4603      	mov	r3, r0
 8003f56:	4618      	mov	r0, r3
 8003f58:	f000 fe9b 	bl	8004c92 <_ZNSt6vectorIhSaIhEE11_S_max_sizeERKS0_>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3708      	adds	r7, #8
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}

08003f66 <_ZSt27__uninitialized_default_n_aIPhjhET_S1_T0_RSaIT1_E>:
	}
    }

  template<typename _ForwardIterator, typename _Size, typename _Tp>
    inline _ForwardIterator
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n, 
 8003f66:	b580      	push	{r7, lr}
 8003f68:	b084      	sub	sp, #16
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	60f8      	str	r0, [r7, #12]
 8003f6e:	60b9      	str	r1, [r7, #8]
 8003f70:	607a      	str	r2, [r7, #4]
				allocator<_Tp>&)
    { return std::__uninitialized_default_n(__first, __n); }
 8003f72:	68b9      	ldr	r1, [r7, #8]
 8003f74:	68f8      	ldr	r0, [r7, #12]
 8003f76:	f000 fea6 	bl	8004cc6 <_ZSt25__uninitialized_default_nIPhjET_S1_T0_>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3710      	adds	r7, #16
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}

08003f84 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8003f84:	b590      	push	{r4, r7, lr}
 8003f86:	b087      	sub	sp, #28
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	60b9      	str	r1, [r7, #8]
 8003f8e:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8003f90:	68f8      	ldr	r0, [r7, #12]
 8003f92:	f7ff ffd7 	bl	8003f44 <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 8003f96:	4604      	mov	r4, r0
 8003f98:	68f8      	ldr	r0, [r7, #12]
 8003f9a:	f7fe f985 	bl	80022a8 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	1ae2      	subs	r2, r4, r3
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	bf34      	ite	cc
 8003fa8:	2301      	movcc	r3, #1
 8003faa:	2300      	movcs	r3, #0
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d002      	beq.n	8003fb8 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f015 ff7a 	bl	8019eac <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8003fb8:	68f8      	ldr	r0, [r7, #12]
 8003fba:	f7fe f975 	bl	80022a8 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8003fbe:	4604      	mov	r4, r0
 8003fc0:	68f8      	ldr	r0, [r7, #12]
 8003fc2:	f7fe f971 	bl	80022a8 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	613b      	str	r3, [r7, #16]
 8003fca:	f107 0208 	add.w	r2, r7, #8
 8003fce:	f107 0310 	add.w	r3, r7, #16
 8003fd2:	4611      	mov	r1, r2
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f7ff fc42 	bl	800385e <_ZSt3maxIjERKT_S2_S2_>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4423      	add	r3, r4
 8003fe0:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8003fe2:	68f8      	ldr	r0, [r7, #12]
 8003fe4:	f7fe f960 	bl	80022a8 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d306      	bcc.n	8003ffe <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x7a>
 8003ff0:	68f8      	ldr	r0, [r7, #12]
 8003ff2:	f7ff ffa7 	bl	8003f44 <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d904      	bls.n	8004008 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x84>
 8003ffe:	68f8      	ldr	r0, [r7, #12]
 8004000:	f7ff ffa0 	bl	8003f44 <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 8004004:	4603      	mov	r3, r0
 8004006:	e000      	b.n	800400a <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x86>
 8004008:	697b      	ldr	r3, [r7, #20]
      }
 800400a:	4618      	mov	r0, r3
 800400c:	371c      	adds	r7, #28
 800400e:	46bd      	mov	sp, r7
 8004010:	bd90      	pop	{r4, r7, pc}

08004012 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8004012:	b580      	push	{r7, lr}
 8004014:	b082      	sub	sp, #8
 8004016:	af00      	add	r7, sp, #0
 8004018:	6078      	str	r0, [r7, #4]
 800401a:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d006      	beq.n	8004030 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj+0x1e>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6839      	ldr	r1, [r7, #0]
 8004026:	4618      	mov	r0, r3
 8004028:	f000 fe5d 	bl	8004ce6 <_ZNSt16allocator_traitsISaIhEE8allocateERS0_j>
 800402c:	4603      	mov	r3, r0
 800402e:	e000      	b.n	8004032 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj+0x20>
 8004030:	2300      	movs	r3, #0
      }
 8004032:	4618      	mov	r0, r3
 8004034:	3708      	adds	r7, #8
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}

0800403a <_ZNSt6vectorIhSaIhEE11_S_relocateEPhS2_S2_RS0_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 800403a:	b590      	push	{r4, r7, lr}
 800403c:	b087      	sub	sp, #28
 800403e:	af02      	add	r7, sp, #8
 8004040:	60f8      	str	r0, [r7, #12]
 8004042:	60b9      	str	r1, [r7, #8]
 8004044:	607a      	str	r2, [r7, #4]
 8004046:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8004048:	f88d 4000 	strb.w	r4, [sp]
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	68b9      	ldr	r1, [r7, #8]
 8004052:	68f8      	ldr	r0, [r7, #12]
 8004054:	f000 fe56 	bl	8004d04 <_ZNSt6vectorIhSaIhEE14_S_do_relocateEPhS2_S2_RS0_St17integral_constantIbLb1EE>
 8004058:	4603      	mov	r3, r0
      }
 800405a:	4618      	mov	r0, r3
 800405c:	3714      	adds	r7, #20
 800405e:	46bd      	mov	sp, r7
 8004060:	bd90      	pop	{r4, r7, pc}

08004062 <_ZSt34__uninitialized_move_if_noexcept_aIPhS0_SaIhEET0_T_S3_S2_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8004062:	b590      	push	{r4, r7, lr}
 8004064:	b085      	sub	sp, #20
 8004066:	af00      	add	r7, sp, #0
 8004068:	60f8      	str	r0, [r7, #12]
 800406a:	60b9      	str	r1, [r7, #8]
 800406c:	607a      	str	r2, [r7, #4]
 800406e:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8004070:	68f8      	ldr	r0, [r7, #12]
 8004072:	f000 fe59 	bl	8004d28 <_ZSt32__make_move_if_noexcept_iteratorIhSt13move_iteratorIPhEET0_PT_>
 8004076:	4604      	mov	r4, r0
 8004078:	68b8      	ldr	r0, [r7, #8]
 800407a:	f000 fe55 	bl	8004d28 <_ZSt32__make_move_if_noexcept_iteratorIhSt13move_iteratorIPhEET0_PT_>
 800407e:	4601      	mov	r1, r0
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	4620      	mov	r0, r4
 8004086:	f000 fe5e 	bl	8004d46 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPhES1_hET0_T_S4_S3_RSaIT1_E>
 800408a:	4603      	mov	r3, r0
    }
 800408c:	4618      	mov	r0, r3
 800408e:	3714      	adds	r7, #20
 8004090:	46bd      	mov	sp, r7
 8004092:	bd90      	pop	{r4, r7, pc}

08004094 <_ZN9__gnu_cxx13new_allocatorI7RequestE7destroyIS1_EEvPT_>:

      template<typename _Up>
	void
	destroy(_Up* __p)
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 800409e:	6838      	ldr	r0, [r7, #0]
 80040a0:	f7fd f8d0 	bl	8001244 <_ZN7RequestD1Ev>
 80040a4:	bf00      	nop
 80040a6:	3708      	adds	r7, #8
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}

080040ac <_ZSt18__do_alloc_on_copyISaIhEEvRT_RKS1_St17integral_constantIbLb0EE>:
    __do_alloc_on_copy(_Alloc&, const _Alloc&, false_type)
 80040ac:	b480      	push	{r7}
 80040ae:	b085      	sub	sp, #20
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	60f8      	str	r0, [r7, #12]
 80040b4:	60b9      	str	r1, [r7, #8]
 80040b6:	713a      	strb	r2, [r7, #4]
    { }
 80040b8:	bf00      	nop
 80040ba:	3714      	adds	r7, #20
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr

080040c4 <_ZN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEC1ERKS2_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80040c4:	b480      	push	{r7}
 80040c6:	b083      	sub	sp, #12
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	601a      	str	r2, [r3, #0]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4618      	mov	r0, r3
 80040da:	370c      	adds	r7, #12
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr

080040e4 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhhET0_T_SA_S9_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	60f8      	str	r0, [r7, #12]
 80040ec:	60b9      	str	r1, [r7, #8]
 80040ee:	607a      	str	r2, [r7, #4]
 80040f0:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	68b9      	ldr	r1, [r7, #8]
 80040f6:	68f8      	ldr	r0, [r7, #12]
 80040f8:	f000 fe36 	bl	8004d68 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET0_T_SA_S9_>
 80040fc:	4603      	mov	r3, r0
 80040fe:	4618      	mov	r0, r3
 8004100:	3710      	adds	r7, #16
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}

08004106 <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8004106:	b480      	push	{r7}
 8004108:	b083      	sub	sp, #12
 800410a:	af00      	add	r7, sp, #0
 800410c:	6078      	str	r0, [r7, #4]
 800410e:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	601a      	str	r2, [r3, #0]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	4618      	mov	r0, r3
 800411c:	370c      	adds	r7, #12
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr

08004126 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEET_S8_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8004126:	b480      	push	{r7}
 8004128:	b083      	sub	sp, #12
 800412a:	af00      	add	r7, sp, #0
 800412c:	6078      	str	r0, [r7, #4]
    { return __it; }
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4618      	mov	r0, r3
 8004132:	370c      	adds	r7, #12
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr

0800413c <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEENS1_IPhS6_EEET1_T0_SB_SA_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800413c:	b5b0      	push	{r4, r5, r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	60f8      	str	r0, [r7, #12]
 8004144:	60b9      	str	r1, [r7, #8]
 8004146:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8004148:	68f8      	ldr	r0, [r7, #12]
 800414a:	f000 fe1f 	bl	8004d8c <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 800414e:	4604      	mov	r4, r0
 8004150:	68b8      	ldr	r0, [r7, #8]
 8004152:	f000 fe1b 	bl	8004d8c <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8004156:	4605      	mov	r5, r0
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f000 fe25 	bl	8004da8 <_ZSt12__niter_baseIPhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 800415e:	4603      	mov	r3, r0
 8004160:	461a      	mov	r2, r3
 8004162:	4629      	mov	r1, r5
 8004164:	4620      	mov	r0, r4
 8004166:	f000 fe2d 	bl	8004dc4 <_ZSt14__copy_move_a1ILb0EPKhPhET1_T0_S4_S3_>
 800416a:	4603      	mov	r3, r0
 800416c:	4619      	mov	r1, r3
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f000 fe38 	bl	8004de4 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEES2_ET_S7_T0_>
 8004174:	4603      	mov	r3, r0
    }
 8004176:	4618      	mov	r0, r3
 8004178:	3710      	adds	r7, #16
 800417a:	46bd      	mov	sp, r7
 800417c:	bdb0      	pop	{r4, r5, r7, pc}

0800417e <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEvT_S7_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800417e:	b580      	push	{r7, lr}
 8004180:	b082      	sub	sp, #8
 8004182:	af00      	add	r7, sp, #0
 8004184:	6078      	str	r0, [r7, #4]
 8004186:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8004188:	6839      	ldr	r1, [r7, #0]
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f000 fe3f 	bl	8004e0e <_ZNSt12_Destroy_auxILb1EE9__destroyIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEEvT_S9_>
    }
 8004190:	bf00      	nop
 8004192:	3708      	adds	r7, #8
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}

08004198 <_ZSt12__miter_baseIPhET_S1_>:
    __miter_base(_Iterator __it)
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
    { return __it; }
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	4618      	mov	r0, r3
 80041a4:	370c      	adds	r7, #12
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr

080041ae <_ZSt13__copy_move_aILb0EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80041ae:	b5b0      	push	{r4, r5, r7, lr}
 80041b0:	b084      	sub	sp, #16
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	60f8      	str	r0, [r7, #12]
 80041b6:	60b9      	str	r1, [r7, #8]
 80041b8:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80041ba:	68f8      	ldr	r0, [r7, #12]
 80041bc:	f000 fe32 	bl	8004e24 <_ZSt12__niter_baseIPhET_S1_>
 80041c0:	4604      	mov	r4, r0
 80041c2:	68b8      	ldr	r0, [r7, #8]
 80041c4:	f000 fe2e 	bl	8004e24 <_ZSt12__niter_baseIPhET_S1_>
 80041c8:	4605      	mov	r5, r0
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4618      	mov	r0, r3
 80041ce:	f000 fe29 	bl	8004e24 <_ZSt12__niter_baseIPhET_S1_>
 80041d2:	4603      	mov	r3, r0
 80041d4:	461a      	mov	r2, r3
 80041d6:	4629      	mov	r1, r5
 80041d8:	4620      	mov	r0, r4
 80041da:	f000 fe2e 	bl	8004e3a <_ZSt14__copy_move_a1ILb0EPhS0_ET1_T0_S2_S1_>
 80041de:	4602      	mov	r2, r0
 80041e0:	1d3b      	adds	r3, r7, #4
 80041e2:	4611      	mov	r1, r2
 80041e4:	4618      	mov	r0, r3
 80041e6:	f000 fe38 	bl	8004e5a <_ZSt12__niter_wrapIPhET_RKS1_S1_>
 80041ea:	4603      	mov	r3, r0
    }
 80041ec:	4618      	mov	r0, r3
 80041ee:	3710      	adds	r7, #16
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bdb0      	pop	{r4, r5, r7, pc}

080041f4 <_ZSt18uninitialized_copyIPhS0_ET0_T_S2_S1_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b086      	sub	sp, #24
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	60f8      	str	r0, [r7, #12]
 80041fc:	60b9      	str	r1, [r7, #8]
 80041fe:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8004200:	2301      	movs	r3, #1
 8004202:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	68b9      	ldr	r1, [r7, #8]
 8004208:	68f8      	ldr	r0, [r7, #12]
 800420a:	f000 fe32 	bl	8004e72 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPhS2_EET0_T_S4_S3_>
 800420e:	4603      	mov	r3, r0
    }
 8004210:	4618      	mov	r0, r3
 8004212:	3718      	adds	r7, #24
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}

08004218 <_ZNKSt12_Vector_baseIhSaIhEE13get_allocatorEv>:
      get_allocator() const _GLIBCXX_NOEXCEPT
 8004218:	b580      	push	{r7, lr}
 800421a:	b082      	sub	sp, #8
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	6039      	str	r1, [r7, #0]
      { return allocator_type(_M_get_Tp_allocator()); }
 8004222:	6838      	ldr	r0, [r7, #0]
 8004224:	f7fe ff87 	bl	8003136 <_ZNKSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8004228:	4603      	mov	r3, r0
 800422a:	4619      	mov	r1, r3
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f7fe fda8 	bl	8002d82 <_ZNSaIhEC1ERKS_>
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	3708      	adds	r7, #8
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}

0800423a <_ZNSt6vectorIhSaIhEEC1ERKS0_>:
      vector(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 800423a:	b580      	push	{r7, lr}
 800423c:	b082      	sub	sp, #8
 800423e:	af00      	add	r7, sp, #0
 8004240:	6078      	str	r0, [r7, #4]
 8004242:	6039      	str	r1, [r7, #0]
      : _Base(__a) { }
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6839      	ldr	r1, [r7, #0]
 8004248:	4618      	mov	r0, r3
 800424a:	f000 fe22 	bl	8004e92 <_ZNSt12_Vector_baseIhSaIhEEC1ERKS0_>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4618      	mov	r0, r3
 8004252:	3708      	adds	r7, #8
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}

08004258 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_data12_M_swap_dataERS2_>:
	_M_swap_data(_Vector_impl_data& __x) _GLIBCXX_NOEXCEPT
 8004258:	b580      	push	{r7, lr}
 800425a:	b086      	sub	sp, #24
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	6039      	str	r1, [r7, #0]
	  _Vector_impl_data __tmp;
 8004262:	f107 030c 	add.w	r3, r7, #12
 8004266:	4618      	mov	r0, r3
 8004268:	f7fe fc66 	bl	8002b38 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1Ev>
	  __tmp._M_copy_data(*this);
 800426c:	f107 030c 	add.w	r3, r7, #12
 8004270:	6879      	ldr	r1, [r7, #4]
 8004272:	4618      	mov	r0, r3
 8004274:	f000 fe1c 	bl	8004eb0 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_data12_M_copy_dataERKS2_>
	  _M_copy_data(__x);
 8004278:	6839      	ldr	r1, [r7, #0]
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f000 fe18 	bl	8004eb0 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_data12_M_copy_dataERKS2_>
	  __x._M_copy_data(__tmp);
 8004280:	f107 030c 	add.w	r3, r7, #12
 8004284:	4619      	mov	r1, r3
 8004286:	6838      	ldr	r0, [r7, #0]
 8004288:	f000 fe12 	bl	8004eb0 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_data12_M_copy_dataERKS2_>
	}
 800428c:	bf00      	nop
 800428e:	3718      	adds	r7, #24
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}

08004294 <_ZSt15__alloc_on_moveISaIhEEvRT_S2_>:
    __alloc_on_move(_Alloc& __one, _Alloc& __two)
 8004294:	b580      	push	{r7, lr}
 8004296:	b082      	sub	sp, #8
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	6039      	str	r1, [r7, #0]
      __do_alloc_on_move(__one, __two, __pocma());
 800429e:	461a      	mov	r2, r3
 80042a0:	6839      	ldr	r1, [r7, #0]
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f000 fe1b 	bl	8004ede <_ZSt18__do_alloc_on_moveISaIhEEvRT_S2_St17integral_constantIbLb1EE>
    }
 80042a8:	bf00      	nop
 80042aa:	3708      	adds	r7, #8
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <_ZNSt5dequeI8IMUFrameSaIS0_EE15_M_erase_at_endESt15_Deque_iteratorIS0_RS0_PS0_E>:
      _M_erase_at_end(iterator __pos)
 80042b0:	b590      	push	{r4, r7, lr}
 80042b2:	b08b      	sub	sp, #44	; 0x2c
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
	_M_destroy_data(__pos, end(), _M_get_Tp_allocator());
 80042ba:	f107 0308 	add.w	r3, r7, #8
 80042be:	6839      	ldr	r1, [r7, #0]
 80042c0:	4618      	mov	r0, r3
 80042c2:	f7ff f9ef 	bl	80036a4 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 80042c6:	f107 0318 	add.w	r3, r7, #24
 80042ca:	6879      	ldr	r1, [r7, #4]
 80042cc:	4618      	mov	r0, r3
 80042ce:	f7ff f9da 	bl	8003686 <_ZNSt5dequeI8IMUFrameSaIS0_EE3endEv>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4618      	mov	r0, r3
 80042d6:	f7ff f8ae 	bl	8003436 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE19_M_get_Tp_allocatorEv>
 80042da:	4603      	mov	r3, r0
 80042dc:	f107 0218 	add.w	r2, r7, #24
 80042e0:	f107 0108 	add.w	r1, r7, #8
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f7ff f9f9 	bl	80036dc <_ZNSt5dequeI8IMUFrameSaIS0_EE15_M_destroy_dataESt15_Deque_iteratorIS0_RS0_PS0_ES6_RKS1_>
	_M_destroy_nodes(__pos._M_node + 1,
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	1d19      	adds	r1, r3, #4
			 this->_M_impl._M_finish._M_node + 1);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	_M_destroy_nodes(__pos._M_node + 1,
 80042f6:	3304      	adds	r3, #4
 80042f8:	461a      	mov	r2, r3
 80042fa:	f7ff f97f 	bl	80035fc <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_M_destroy_nodesEPPS0_S4_>
	this->_M_impl._M_finish = __pos;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	683a      	ldr	r2, [r7, #0]
 8004302:	f103 0418 	add.w	r4, r3, #24
 8004306:	4613      	mov	r3, r2
 8004308:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800430a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      }
 800430e:	bf00      	nop
 8004310:	372c      	adds	r7, #44	; 0x2c
 8004312:	46bd      	mov	sp, r7
 8004314:	bd90      	pop	{r4, r7, pc}

08004316 <_ZSt7forwardI8IMUFrameEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004316:	b480      	push	{r7}
 8004318:	b083      	sub	sp, #12
 800431a:	af00      	add	r7, sp, #0
 800431c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4618      	mov	r0, r3
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <_ZNSt16allocator_traitsISaI8IMUFrameEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	60b9      	str	r1, [r7, #8]
 8004336:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f7ff ffec 	bl	8004316 <_ZSt7forwardI8IMUFrameEOT_RNSt16remove_referenceIS1_E4typeE>
 800433e:	4603      	mov	r3, r0
 8004340:	461a      	mov	r2, r3
 8004342:	68b9      	ldr	r1, [r7, #8]
 8004344:	68f8      	ldr	r0, [r7, #12]
 8004346:	f000 fdd7 	bl	8004ef8 <_ZN9__gnu_cxx13new_allocatorI8IMUFrameE9constructIS1_JS1_EEEvPT_DpOT0_>
	}
 800434a:	bf00      	nop
 800434c:	3710      	adds	r7, #16
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
	...

08004354 <_ZNSt5dequeI8IMUFrameSaIS0_EE17_M_push_front_auxIJS0_EEEvDpOT_>:
      deque<_Tp, _Alloc>::
 8004354:	b5b0      	push	{r4, r5, r7, lr}
 8004356:	b082      	sub	sp, #8
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	6039      	str	r1, [r7, #0]
	if (size() == max_size())
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f7fe f95f 	bl	8002622 <_ZNKSt5dequeI8IMUFrameSaIS0_EE4sizeEv>
 8004364:	4604      	mov	r4, r0
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f000 fde1 	bl	8004f2e <_ZNKSt5dequeI8IMUFrameSaIS0_EE8max_sizeEv>
 800436c:	4603      	mov	r3, r0
 800436e:	429c      	cmp	r4, r3
 8004370:	bf0c      	ite	eq
 8004372:	2301      	moveq	r3, #1
 8004374:	2300      	movne	r3, #0
 8004376:	b2db      	uxtb	r3, r3
 8004378:	2b00      	cmp	r3, #0
 800437a:	d002      	beq.n	8004382 <_ZNSt5dequeI8IMUFrameSaIS0_EE17_M_push_front_auxIJS0_EEEvDpOT_+0x2e>
	  __throw_length_error(
 800437c:	4817      	ldr	r0, [pc, #92]	; (80043dc <_ZNSt5dequeI8IMUFrameSaIS0_EE17_M_push_front_auxIJS0_EEEvDpOT_+0x88>)
 800437e:	f015 fd95 	bl	8019eac <_ZSt20__throw_length_errorPKc>
	_M_reserve_map_at_front();
 8004382:	2101      	movs	r1, #1
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f000 fde3 	bl	8004f50 <_ZNSt5dequeI8IMUFrameSaIS0_EE23_M_reserve_map_at_frontEj>
	*(this->_M_impl._M_start._M_node - 1) = this->_M_allocate_node();
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	695b      	ldr	r3, [r3, #20]
 8004390:	1f1c      	subs	r4, r3, #4
 8004392:	4610      	mov	r0, r2
 8004394:	f000 fdf4 	bl	8004f80 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_M_allocate_nodeEv>
 8004398:	4603      	mov	r3, r0
 800439a:	6023      	str	r3, [r4, #0]
	    this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f103 0208 	add.w	r2, r3, #8
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	695b      	ldr	r3, [r3, #20]
 80043a6:	3b04      	subs	r3, #4
 80043a8:	4619      	mov	r1, r3
 80043aa:	4610      	mov	r0, r2
 80043ac:	f000 f82b 	bl	8004406 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_E11_M_set_nodeEPS2_>
	    this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_last - 1;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	691b      	ldr	r3, [r3, #16]
 80043b4:	f1a3 0218 	sub.w	r2, r3, #24
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	609a      	str	r2, [r3, #8]
	    _Alloc_traits::construct(this->_M_impl,
 80043bc:	687c      	ldr	r4, [r7, #4]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	689d      	ldr	r5, [r3, #8]
 80043c2:	6838      	ldr	r0, [r7, #0]
 80043c4:	f7ff ffa7 	bl	8004316 <_ZSt7forwardI8IMUFrameEOT_RNSt16remove_referenceIS1_E4typeE>
 80043c8:	4603      	mov	r3, r0
 80043ca:	461a      	mov	r2, r3
 80043cc:	4629      	mov	r1, r5
 80043ce:	4620      	mov	r0, r4
 80043d0:	f7ff ffac 	bl	800432c <_ZNSt16allocator_traitsISaI8IMUFrameEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
      }
 80043d4:	bf00      	nop
 80043d6:	3708      	adds	r7, #8
 80043d8:	46bd      	mov	sp, r7
 80043da:	bdb0      	pop	{r4, r5, r7, pc}
 80043dc:	0801b280 	.word	0x0801b280

080043e0 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE18_M_deallocate_nodeEPS0_>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 80043e0:	b590      	push	{r4, r7, lr}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 80043ea:	687c      	ldr	r4, [r7, #4]
 80043ec:	2018      	movs	r0, #24
 80043ee:	f7fc fcf2 	bl	8000dd6 <_ZSt16__deque_buf_sizej>
 80043f2:	4603      	mov	r3, r0
 80043f4:	461a      	mov	r2, r3
 80043f6:	6839      	ldr	r1, [r7, #0]
 80043f8:	4620      	mov	r0, r4
 80043fa:	f000 fdd3 	bl	8004fa4 <_ZNSt16allocator_traitsISaI8IMUFrameEE10deallocateERS1_PS0_j>
      }
 80043fe:	bf00      	nop
 8004400:	370c      	adds	r7, #12
 8004402:	46bd      	mov	sp, r7
 8004404:	bd90      	pop	{r4, r7, pc}

08004406 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_E11_M_set_nodeEPS2_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 8004406:	b590      	push	{r4, r7, lr}
 8004408:	b083      	sub	sp, #12
 800440a:	af00      	add	r7, sp, #0
 800440c:	6078      	str	r0, [r7, #4]
 800440e:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	683a      	ldr	r2, [r7, #0]
 8004414:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	685c      	ldr	r4, [r3, #4]
 8004422:	f000 f80c 	bl	800443e <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_E14_S_buffer_sizeEv>
 8004426:	4602      	mov	r2, r0
 8004428:	4613      	mov	r3, r2
 800442a:	005b      	lsls	r3, r3, #1
 800442c:	4413      	add	r3, r2
 800442e:	00db      	lsls	r3, r3, #3
 8004430:	18e2      	adds	r2, r4, r3
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	609a      	str	r2, [r3, #8]
      }
 8004436:	bf00      	nop
 8004438:	370c      	adds	r7, #12
 800443a:	46bd      	mov	sp, r7
 800443c:	bd90      	pop	{r4, r7, pc}

0800443e <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_E14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 800443e:	b580      	push	{r7, lr}
 8004440:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 8004442:	2018      	movs	r0, #24
 8004444:	f7fc fcc7 	bl	8000dd6 <_ZSt16__deque_buf_sizej>
 8004448:	4603      	mov	r3, r0
 800444a:	4618      	mov	r0, r3
 800444c:	bd80      	pop	{r7, pc}

0800444e <_ZStplRKSt15_Deque_iteratorI8IMUFrameRS0_PS0_Ei>:
      operator+(const _Self& __x, difference_type __n) _GLIBCXX_NOEXCEPT
 800444e:	b580      	push	{r7, lr}
 8004450:	b084      	sub	sp, #16
 8004452:	af00      	add	r7, sp, #0
 8004454:	60f8      	str	r0, [r7, #12]
 8004456:	60b9      	str	r1, [r7, #8]
 8004458:	607a      	str	r2, [r7, #4]
	_Self __tmp = __x;
 800445a:	68b9      	ldr	r1, [r7, #8]
 800445c:	68f8      	ldr	r0, [r7, #12]
 800445e:	f7ff f921 	bl	80036a4 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
	__tmp += __n;
 8004462:	6879      	ldr	r1, [r7, #4]
 8004464:	68f8      	ldr	r0, [r7, #12]
 8004466:	f000 fdad 	bl	8004fc4 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EpLEi>
	return __tmp;
 800446a:	bf00      	nop
      }
 800446c:	68f8      	ldr	r0, [r7, #12]
 800446e:	3710      	adds	r7, #16
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}

08004474 <_ZNKSt15_Deque_iteratorI8IMUFrameRS0_PS0_EdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4618      	mov	r0, r3
 8004482:	370c      	adds	r7, #12
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr

0800448c <_ZNSaI8IMUFrameEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800448c:	b580      	push	{r7, lr}
 800448e:	b082      	sub	sp, #8
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f000 fdf9 	bl	800508c <_ZN9__gnu_cxx13new_allocatorI8IMUFrameEC1Ev>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4618      	mov	r0, r3
 800449e:	3708      	adds	r7, #8
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b082      	sub	sp, #8
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	601a      	str	r2, [r3, #0]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2200      	movs	r2, #0
 80044b6:	605a      	str	r2, [r3, #4]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	3308      	adds	r3, #8
 80044bc:	4618      	mov	r0, r3
 80044be:	f000 fdf0 	bl	80050a2 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1Ev>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	3318      	adds	r3, #24
 80044c6:	4618      	mov	r0, r3
 80044c8:	f000 fdeb 	bl	80050a2 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1Ev>
	{ }
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	4618      	mov	r0, r3
 80044d0:	3708      	adds	r7, #8
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}

080044d6 <_ZN9__gnu_cxx13new_allocatorI8IMUFrameED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80044d6:	b480      	push	{r7}
 80044d8:	b083      	sub	sp, #12
 80044da:	af00      	add	r7, sp, #0
 80044dc:	6078      	str	r0, [r7, #4]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4618      	mov	r0, r3
 80044e2:	370c      	adds	r7, #12
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 80044ec:	b590      	push	{r4, r7, lr}
 80044ee:	b085      	sub	sp, #20
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 80044f6:	f107 030c 	add.w	r3, r7, #12
 80044fa:	6879      	ldr	r1, [r7, #4]
 80044fc:	4618      	mov	r0, r3
 80044fe:	f000 f82c 	bl	800455a <_ZNKSt11_Deque_baseI8IMUFrameSaIS0_EE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8004502:	f107 030c 	add.w	r3, r7, #12
 8004506:	6839      	ldr	r1, [r7, #0]
 8004508:	4618      	mov	r0, r3
 800450a:	f000 fde1 	bl	80050d0 <_ZNSt16allocator_traitsISaIP8IMUFrameEE8allocateERS2_j>
 800450e:	4604      	mov	r4, r0
 8004510:	bf00      	nop
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8004512:	f107 030c 	add.w	r3, r7, #12
 8004516:	4618      	mov	r0, r3
 8004518:	f000 f830 	bl	800457c <_ZNSaIP8IMUFrameED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 800451c:	4623      	mov	r3, r4
      }
 800451e:	4618      	mov	r0, r3
 8004520:	3714      	adds	r7, #20
 8004522:	46bd      	mov	sp, r7
 8004524:	bd90      	pop	{r4, r7, pc}

08004526 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE15_M_create_nodesEPPS0_S4_>:
    _Deque_base<_Tp, _Alloc>::
 8004526:	b580      	push	{r7, lr}
 8004528:	b086      	sub	sp, #24
 800452a:	af00      	add	r7, sp, #0
 800452c:	60f8      	str	r0, [r7, #12]
 800452e:	60b9      	str	r1, [r7, #8]
 8004530:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	617b      	str	r3, [r7, #20]
 8004536:	697a      	ldr	r2, [r7, #20]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	429a      	cmp	r2, r3
 800453c:	d209      	bcs.n	8004552 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE15_M_create_nodesEPPS0_S4_+0x2c>
	    *__cur = this->_M_allocate_node();
 800453e:	68f8      	ldr	r0, [r7, #12]
 8004540:	f000 fd1e 	bl	8004f80 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_M_allocate_nodeEv>
 8004544:	4602      	mov	r2, r0
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	3304      	adds	r3, #4
 800454e:	617b      	str	r3, [r7, #20]
 8004550:	e7f1      	b.n	8004536 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE15_M_create_nodesEPPS0_S4_+0x10>
    }
 8004552:	bf00      	nop
 8004554:	3718      	adds	r7, #24
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}

0800455a <_ZNKSt11_Deque_baseI8IMUFrameSaIS0_EE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 800455a:	b580      	push	{r7, lr}
 800455c:	b082      	sub	sp, #8
 800455e:	af00      	add	r7, sp, #0
 8004560:	6078      	str	r0, [r7, #4]
 8004562:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 8004564:	6838      	ldr	r0, [r7, #0]
 8004566:	f000 fdc2 	bl	80050ee <_ZNKSt11_Deque_baseI8IMUFrameSaIS0_EE19_M_get_Tp_allocatorEv>
 800456a:	4603      	mov	r3, r0
 800456c:	4619      	mov	r1, r3
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f000 fdc8 	bl	8005104 <_ZNSaIP8IMUFrameEC1IS_EERKSaIT_E>
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	3708      	adds	r7, #8
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}

0800457c <_ZNSaIP8IMUFrameED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800457c:	b580      	push	{r7, lr}
 800457e:	b082      	sub	sp, #8
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f000 fdca 	bl	800511e <_ZN9__gnu_cxx13new_allocatorIP8IMUFrameED1Ev>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4618      	mov	r0, r3
 800458e:	3708      	adds	r7, #8
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}

08004594 <_ZNSt16allocator_traitsISaIP8IMUFrameEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8004594:	b580      	push	{r7, lr}
 8004596:	b084      	sub	sp, #16
 8004598:	af00      	add	r7, sp, #0
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	60b9      	str	r1, [r7, #8]
 800459e:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	68b9      	ldr	r1, [r7, #8]
 80045a4:	68f8      	ldr	r0, [r7, #12]
 80045a6:	f000 fdc5 	bl	8005134 <_ZN9__gnu_cxx13new_allocatorIP8IMUFrameE10deallocateEPS2_j>
 80045aa:	bf00      	nop
 80045ac:	3710      	adds	r7, #16
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}

080045b2 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_Deque_impl_data12_M_swap_dataERS3_>:
	_M_swap_data(_Deque_impl_data& __x) _GLIBCXX_NOEXCEPT
 80045b2:	b580      	push	{r7, lr}
 80045b4:	b082      	sub	sp, #8
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	6078      	str	r0, [r7, #4]
 80045ba:	6039      	str	r1, [r7, #0]
	  std::swap(*this, __x);
 80045bc:	6839      	ldr	r1, [r7, #0]
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f000 fdc8 	bl	8005154 <_ZSt4swapINSt11_Deque_baseI7RequestSaIS1_EE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>
	}
 80045c4:	bf00      	nop
 80045c6:	3708      	adds	r7, #8
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}

080045cc <_ZNSt5dequeI7RequestSaIS0_EE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b086      	sub	sp, #24
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(begin()); }
 80045d4:	f107 0308 	add.w	r3, r7, #8
 80045d8:	6879      	ldr	r1, [r7, #4]
 80045da:	4618      	mov	r0, r3
 80045dc:	f7fe f999 	bl	8002912 <_ZNSt5dequeI7RequestSaIS0_EE5beginEv>
 80045e0:	f107 0308 	add.w	r3, r7, #8
 80045e4:	4619      	mov	r1, r3
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f000 fde7 	bl	80051ba <_ZNSt5dequeI7RequestSaIS0_EE15_M_erase_at_endESt15_Deque_iteratorIS0_RS0_PS0_E>
 80045ec:	bf00      	nop
 80045ee:	3718      	adds	r7, #24
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <_ZSt15__alloc_on_moveISaI7RequestEEvRT_S3_>:
    __alloc_on_move(_Alloc& __one, _Alloc& __two)
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b082      	sub	sp, #8
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	6039      	str	r1, [r7, #0]
      __do_alloc_on_move(__one, __two, __pocma());
 80045fe:	461a      	mov	r2, r3
 8004600:	6839      	ldr	r1, [r7, #0]
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 fe0c 	bl	8005220 <_ZSt18__do_alloc_on_moveISaI7RequestEEvRT_S3_St17integral_constantIbLb1EE>
    }
 8004608:	bf00      	nop
 800460a:	3708      	adds	r7, #8
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}

08004610 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_Deque_impl_data12_M_swap_dataERS3_>:
	_M_swap_data(_Deque_impl_data& __x) _GLIBCXX_NOEXCEPT
 8004610:	b580      	push	{r7, lr}
 8004612:	b082      	sub	sp, #8
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	6039      	str	r1, [r7, #0]
	  std::swap(*this, __x);
 800461a:	6839      	ldr	r1, [r7, #0]
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f000 fe0c 	bl	800523a <_ZSt4swapINSt11_Deque_baseI8ResponceSaIS1_EE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>
	}
 8004622:	bf00      	nop
 8004624:	3708      	adds	r7, #8
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}

0800462a <_ZNSt5dequeI8ResponceSaIS0_EE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 800462a:	b580      	push	{r7, lr}
 800462c:	b086      	sub	sp, #24
 800462e:	af00      	add	r7, sp, #0
 8004630:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(begin()); }
 8004632:	f107 0308 	add.w	r3, r7, #8
 8004636:	6879      	ldr	r1, [r7, #4]
 8004638:	4618      	mov	r0, r3
 800463a:	f7fe fa0d 	bl	8002a58 <_ZNSt5dequeI8ResponceSaIS0_EE5beginEv>
 800463e:	f107 0308 	add.w	r3, r7, #8
 8004642:	4619      	mov	r1, r3
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f000 fe2b 	bl	80052a0 <_ZNSt5dequeI8ResponceSaIS0_EE15_M_erase_at_endESt15_Deque_iteratorIS0_RS0_PS0_E>
 800464a:	bf00      	nop
 800464c:	3718      	adds	r7, #24
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}

08004652 <_ZSt15__alloc_on_moveISaI8ResponceEEvRT_S3_>:
    __alloc_on_move(_Alloc& __one, _Alloc& __two)
 8004652:	b580      	push	{r7, lr}
 8004654:	b082      	sub	sp, #8
 8004656:	af00      	add	r7, sp, #0
 8004658:	6078      	str	r0, [r7, #4]
 800465a:	6039      	str	r1, [r7, #0]
      __do_alloc_on_move(__one, __two, __pocma());
 800465c:	461a      	mov	r2, r3
 800465e:	6839      	ldr	r1, [r7, #0]
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f000 fe50 	bl	8005306 <_ZSt18__do_alloc_on_moveISaI8ResponceEEvRT_S3_St17integral_constantIbLb1EE>
    }
 8004666:	bf00      	nop
 8004668:	3708      	adds	r7, #8
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}

0800466e <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_Deque_impl_data12_M_swap_dataERS3_>:
	_M_swap_data(_Deque_impl_data& __x) _GLIBCXX_NOEXCEPT
 800466e:	b580      	push	{r7, lr}
 8004670:	b082      	sub	sp, #8
 8004672:	af00      	add	r7, sp, #0
 8004674:	6078      	str	r0, [r7, #4]
 8004676:	6039      	str	r1, [r7, #0]
	  std::swap(*this, __x);
 8004678:	6839      	ldr	r1, [r7, #0]
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f000 fe50 	bl	8005320 <_ZSt4swapINSt11_Deque_baseI8IMUFrameSaIS1_EE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>
	}
 8004680:	bf00      	nop
 8004682:	3708      	adds	r7, #8
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}

08004688 <_ZNSt5dequeI8IMUFrameSaIS0_EE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 8004688:	b580      	push	{r7, lr}
 800468a:	b086      	sub	sp, #24
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(begin()); }
 8004690:	f107 0308 	add.w	r3, r7, #8
 8004694:	6879      	ldr	r1, [r7, #4]
 8004696:	4618      	mov	r0, r3
 8004698:	f7fe ffe6 	bl	8003668 <_ZNSt5dequeI8IMUFrameSaIS0_EE5beginEv>
 800469c:	f107 0308 	add.w	r3, r7, #8
 80046a0:	4619      	mov	r1, r3
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f7ff fe04 	bl	80042b0 <_ZNSt5dequeI8IMUFrameSaIS0_EE15_M_erase_at_endESt15_Deque_iteratorIS0_RS0_PS0_E>
 80046a8:	bf00      	nop
 80046aa:	3718      	adds	r7, #24
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}

080046b0 <_ZSt15__alloc_on_moveISaI8IMUFrameEEvRT_S3_>:
    __alloc_on_move(_Alloc& __one, _Alloc& __two)
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b082      	sub	sp, #8
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	6039      	str	r1, [r7, #0]
      __do_alloc_on_move(__one, __two, __pocma());
 80046ba:	461a      	mov	r2, r3
 80046bc:	6839      	ldr	r1, [r7, #0]
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f000 fe61 	bl	8005386 <_ZSt18__do_alloc_on_moveISaI8IMUFrameEEvRT_S3_St17integral_constantIbLb1EE>
    }
 80046c4:	bf00      	nop
 80046c6:	3708      	adds	r7, #8
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}

080046cc <_ZN9__gnu_cxx13new_allocatorI7RequestEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80046cc:	b480      	push	{r7}
 80046ce:	b083      	sub	sp, #12
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	4618      	mov	r0, r3
 80046d8:	370c      	adds	r7, #12
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr

080046e2 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 80046e2:	b480      	push	{r7}
 80046e4:	b083      	sub	sp, #12
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2200      	movs	r2, #0
 80046ee:	601a      	str	r2, [r3, #0]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	605a      	str	r2, [r3, #4]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	609a      	str	r2, [r3, #8]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2200      	movs	r2, #0
 8004700:	60da      	str	r2, [r3, #12]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	4618      	mov	r0, r3
 8004706:	370c      	adds	r7, #12
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr

08004710 <_ZNSt16allocator_traitsISaIP7RequestEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8004710:	b580      	push	{r7, lr}
 8004712:	b082      	sub	sp, #8
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800471a:	2200      	movs	r2, #0
 800471c:	6839      	ldr	r1, [r7, #0]
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f000 fe3e 	bl	80053a0 <_ZN9__gnu_cxx13new_allocatorIP7RequestE8allocateEjPKv>
 8004724:	4603      	mov	r3, r0
 8004726:	4618      	mov	r0, r3
 8004728:	3708      	adds	r7, #8
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}

0800472e <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 800472e:	b580      	push	{r7, lr}
 8004730:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 8004732:	2014      	movs	r0, #20
 8004734:	f7fc fb4f 	bl	8000dd6 <_ZSt16__deque_buf_sizej>
 8004738:	4603      	mov	r3, r0
 800473a:	4618      	mov	r0, r3
 800473c:	bd80      	pop	{r7, pc}

0800473e <_ZNSt16allocator_traitsISaI7RequestEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800473e:	b580      	push	{r7, lr}
 8004740:	b084      	sub	sp, #16
 8004742:	af00      	add	r7, sp, #0
 8004744:	60f8      	str	r0, [r7, #12]
 8004746:	60b9      	str	r1, [r7, #8]
 8004748:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	68b9      	ldr	r1, [r7, #8]
 800474e:	68f8      	ldr	r0, [r7, #12]
 8004750:	f000 fe44 	bl	80053dc <_ZN9__gnu_cxx13new_allocatorI7RequestE10deallocateEPS1_j>
 8004754:	bf00      	nop
 8004756:	3710      	adds	r7, #16
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}

0800475c <_ZNKSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800475c:	b480      	push	{r7}
 800475e:	b083      	sub	sp, #12
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	4618      	mov	r0, r3
 8004768:	370c      	adds	r7, #12
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr

08004772 <_ZNSaIP7RequestEC1IS_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8004772:	b580      	push	{r7, lr}
 8004774:	b082      	sub	sp, #8
 8004776:	af00      	add	r7, sp, #0
 8004778:	6078      	str	r0, [r7, #4]
 800477a:	6039      	str	r1, [r7, #0]
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f000 fe40 	bl	8005402 <_ZN9__gnu_cxx13new_allocatorIP7RequestEC1Ev>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	4618      	mov	r0, r3
 8004786:	3708      	adds	r7, #8
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}

0800478c <_ZN9__gnu_cxx13new_allocatorIP7RequestED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	4618      	mov	r0, r3
 8004798:	370c      	adds	r7, #12
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr

080047a2 <_ZN9__gnu_cxx13new_allocatorIP7RequestE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 80047a2:	b580      	push	{r7, lr}
 80047a4:	b084      	sub	sp, #16
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	60f8      	str	r0, [r7, #12]
 80047aa:	60b9      	str	r1, [r7, #8]
 80047ac:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	009b      	lsls	r3, r3, #2
 80047b2:	4619      	mov	r1, r3
 80047b4:	68b8      	ldr	r0, [r7, #8]
 80047b6:	f015 fb63 	bl	8019e80 <_ZdlPvj>
      }
 80047ba:	bf00      	nop
 80047bc:	3710      	adds	r7, #16
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}

080047c2 <_ZNSt5dequeI7RequestSaIS0_EE14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 80047c2:	b580      	push	{r7, lr}
 80047c4:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 80047c6:	2014      	movs	r0, #20
 80047c8:	f7fc fb05 	bl	8000dd6 <_ZSt16__deque_buf_sizej>
 80047cc:	4603      	mov	r3, r0
 80047ce:	4618      	mov	r0, r3
 80047d0:	bd80      	pop	{r7, pc}

080047d2 <_ZSt8_DestroyIP7RequestS0_EvT_S2_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80047d2:	b580      	push	{r7, lr}
 80047d4:	b084      	sub	sp, #16
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	60f8      	str	r0, [r7, #12]
 80047da:	60b9      	str	r1, [r7, #8]
 80047dc:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 80047de:	68b9      	ldr	r1, [r7, #8]
 80047e0:	68f8      	ldr	r0, [r7, #12]
 80047e2:	f000 fe19 	bl	8005418 <_ZSt8_DestroyIP7RequestEvT_S2_>
    }
 80047e6:	bf00      	nop
 80047e8:	3710      	adds	r7, #16
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}

080047ee <_ZNSaI8ResponceEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80047ee:	b580      	push	{r7, lr}
 80047f0:	b082      	sub	sp, #8
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	6078      	str	r0, [r7, #4]
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f000 fe1b 	bl	8005432 <_ZN9__gnu_cxx13new_allocatorI8ResponceEC1Ev>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	4618      	mov	r0, r3
 8004800:	3708      	adds	r7, #8
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}

08004806 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 8004806:	b580      	push	{r7, lr}
 8004808:	b082      	sub	sp, #8
 800480a:	af00      	add	r7, sp, #0
 800480c:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2200      	movs	r2, #0
 8004812:	601a      	str	r2, [r3, #0]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2200      	movs	r2, #0
 8004818:	605a      	str	r2, [r3, #4]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	3308      	adds	r3, #8
 800481e:	4618      	mov	r0, r3
 8004820:	f000 fe12 	bl	8005448 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1Ev>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	3318      	adds	r3, #24
 8004828:	4618      	mov	r0, r3
 800482a:	f000 fe0d 	bl	8005448 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1Ev>
	{ }
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4618      	mov	r0, r3
 8004832:	3708      	adds	r7, #8
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}

08004838 <_ZN9__gnu_cxx13new_allocatorI8ResponceED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8004838:	b480      	push	{r7}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4618      	mov	r0, r3
 8004844:	370c      	adds	r7, #12
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr

0800484e <_ZNSt11_Deque_baseI8ResponceSaIS0_EE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 800484e:	b590      	push	{r4, r7, lr}
 8004850:	b085      	sub	sp, #20
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]
 8004856:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8004858:	f107 030c 	add.w	r3, r7, #12
 800485c:	6879      	ldr	r1, [r7, #4]
 800485e:	4618      	mov	r0, r3
 8004860:	f000 f858 	bl	8004914 <_ZNKSt11_Deque_baseI8ResponceSaIS0_EE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8004864:	f107 030c 	add.w	r3, r7, #12
 8004868:	6839      	ldr	r1, [r7, #0]
 800486a:	4618      	mov	r0, r3
 800486c:	f000 fe03 	bl	8005476 <_ZNSt16allocator_traitsISaIP8ResponceEE8allocateERS2_j>
 8004870:	4604      	mov	r4, r0
 8004872:	bf00      	nop
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8004874:	f107 030c 	add.w	r3, r7, #12
 8004878:	4618      	mov	r0, r3
 800487a:	f000 f85c 	bl	8004936 <_ZNSaIP8ResponceED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 800487e:	4623      	mov	r3, r4
      }
 8004880:	4618      	mov	r0, r3
 8004882:	3714      	adds	r7, #20
 8004884:	46bd      	mov	sp, r7
 8004886:	bd90      	pop	{r4, r7, pc}

08004888 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE15_M_create_nodesEPPS0_S4_>:
    _Deque_base<_Tp, _Alloc>::
 8004888:	b580      	push	{r7, lr}
 800488a:	b086      	sub	sp, #24
 800488c:	af00      	add	r7, sp, #0
 800488e:	60f8      	str	r0, [r7, #12]
 8004890:	60b9      	str	r1, [r7, #8]
 8004892:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	617b      	str	r3, [r7, #20]
 8004898:	697a      	ldr	r2, [r7, #20]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	429a      	cmp	r2, r3
 800489e:	d209      	bcs.n	80048b4 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE15_M_create_nodesEPPS0_S4_+0x2c>
	    *__cur = this->_M_allocate_node();
 80048a0:	68f8      	ldr	r0, [r7, #12]
 80048a2:	f000 f9e4 	bl	8004c6e <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_M_allocate_nodeEv>
 80048a6:	4602      	mov	r2, r0
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	3304      	adds	r3, #4
 80048b0:	617b      	str	r3, [r7, #20]
 80048b2:	e7f1      	b.n	8004898 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE15_M_create_nodesEPPS0_S4_+0x10>
    }
 80048b4:	bf00      	nop
 80048b6:	3718      	adds	r7, #24
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}

080048bc <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E11_M_set_nodeEPS2_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 80048bc:	b590      	push	{r4, r7, lr}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	683a      	ldr	r2, [r7, #0]
 80048ca:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	685c      	ldr	r4, [r3, #4]
 80048d8:	f000 fddc 	bl	8005494 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E14_S_buffer_sizeEv>
 80048dc:	4603      	mov	r3, r0
 80048de:	011b      	lsls	r3, r3, #4
 80048e0:	18e2      	adds	r2, r4, r3
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	609a      	str	r2, [r3, #8]
      }
 80048e6:	bf00      	nop
 80048e8:	370c      	adds	r7, #12
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd90      	pop	{r4, r7, pc}

080048ee <_ZNSt11_Deque_baseI8ResponceSaIS0_EE18_M_deallocate_nodeEPS0_>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 80048ee:	b590      	push	{r4, r7, lr}
 80048f0:	b083      	sub	sp, #12
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	6078      	str	r0, [r7, #4]
 80048f6:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 80048f8:	687c      	ldr	r4, [r7, #4]
 80048fa:	2010      	movs	r0, #16
 80048fc:	f7fc fa6b 	bl	8000dd6 <_ZSt16__deque_buf_sizej>
 8004900:	4603      	mov	r3, r0
 8004902:	461a      	mov	r2, r3
 8004904:	6839      	ldr	r1, [r7, #0]
 8004906:	4620      	mov	r0, r4
 8004908:	f000 fdcc 	bl	80054a4 <_ZNSt16allocator_traitsISaI8ResponceEE10deallocateERS1_PS0_j>
      }
 800490c:	bf00      	nop
 800490e:	370c      	adds	r7, #12
 8004910:	46bd      	mov	sp, r7
 8004912:	bd90      	pop	{r4, r7, pc}

08004914 <_ZNKSt11_Deque_baseI8ResponceSaIS0_EE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 8004914:	b580      	push	{r7, lr}
 8004916:	b082      	sub	sp, #8
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 800491e:	6838      	ldr	r0, [r7, #0]
 8004920:	f000 fdcf 	bl	80054c2 <_ZNKSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 8004924:	4603      	mov	r3, r0
 8004926:	4619      	mov	r1, r3
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f000 fdd5 	bl	80054d8 <_ZNSaIP8ResponceEC1IS_EERKSaIT_E>
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	3708      	adds	r7, #8
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}

08004936 <_ZNSaIP8ResponceED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8004936:	b580      	push	{r7, lr}
 8004938:	b082      	sub	sp, #8
 800493a:	af00      	add	r7, sp, #0
 800493c:	6078      	str	r0, [r7, #4]
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f000 fdd7 	bl	80054f2 <_ZN9__gnu_cxx13new_allocatorIP8ResponceED1Ev>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	4618      	mov	r0, r3
 8004948:	3708      	adds	r7, #8
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}

0800494e <_ZNSt16allocator_traitsISaIP8ResponceEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800494e:	b580      	push	{r7, lr}
 8004950:	b084      	sub	sp, #16
 8004952:	af00      	add	r7, sp, #0
 8004954:	60f8      	str	r0, [r7, #12]
 8004956:	60b9      	str	r1, [r7, #8]
 8004958:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	68b9      	ldr	r1, [r7, #8]
 800495e:	68f8      	ldr	r0, [r7, #12]
 8004960:	f000 fdd2 	bl	8005508 <_ZN9__gnu_cxx13new_allocatorIP8ResponceE10deallocateEPS2_j>
 8004964:	bf00      	nop
 8004966:	3710      	adds	r7, #16
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}

0800496c <_ZNSt5dequeI8ResponceSaIS0_EE14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 800496c:	b580      	push	{r7, lr}
 800496e:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 8004970:	2010      	movs	r0, #16
 8004972:	f7fc fa30 	bl	8000dd6 <_ZSt16__deque_buf_sizej>
 8004976:	4603      	mov	r3, r0
 8004978:	4618      	mov	r0, r3
 800497a:	bd80      	pop	{r7, pc}

0800497c <_ZSt8_DestroyIP8ResponceS0_EvT_S2_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800497c:	b580      	push	{r7, lr}
 800497e:	b084      	sub	sp, #16
 8004980:	af00      	add	r7, sp, #0
 8004982:	60f8      	str	r0, [r7, #12]
 8004984:	60b9      	str	r1, [r7, #8]
 8004986:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8004988:	68b9      	ldr	r1, [r7, #8]
 800498a:	68f8      	ldr	r0, [r7, #12]
 800498c:	f000 fdcc 	bl	8005528 <_ZSt8_DestroyIP8ResponceEvT_S2_>
    }
 8004990:	bf00      	nop
 8004992:	3710      	adds	r7, #16
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}

08004998 <_ZN9__gnu_cxx13new_allocatorIhE10deallocateEPhj>:
      deallocate(_Tp* __p, size_type __t)
 8004998:	b580      	push	{r7, lr}
 800499a:	b084      	sub	sp, #16
 800499c:	af00      	add	r7, sp, #0
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	60b9      	str	r1, [r7, #8]
 80049a2:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80049a4:	6879      	ldr	r1, [r7, #4]
 80049a6:	68b8      	ldr	r0, [r7, #8]
 80049a8:	f015 fa6a 	bl	8019e80 <_ZdlPvj>
      }
 80049ac:	bf00      	nop
 80049ae:	3710      	adds	r7, #16
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}

080049b4 <_ZNSt12_Destroy_auxILb1EE9__destroyIPhEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 80049b4:	b480      	push	{r7}
 80049b6:	b083      	sub	sp, #12
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	6039      	str	r1, [r7, #0]
 80049be:	bf00      	nop
 80049c0:	370c      	adds	r7, #12
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr
	...

080049cc <_ZStmiRKSt15_Deque_iteratorI7RequestRS0_PS0_ES5_>:
      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b082      	sub	sp, #8
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	6039      	str	r1, [r7, #0]
	return difference_type(_S_buffer_size())
 80049d6:	f7ff feaa 	bl	800472e <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E14_S_buffer_sizeEv>
 80049da:	4603      	mov	r3, r0
 80049dc:	4619      	mov	r1, r3
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	68da      	ldr	r2, [r3, #12]
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	1ad3      	subs	r3, r2, r3
 80049e8:	109b      	asrs	r3, r3, #2
 80049ea:	3b01      	subs	r3, #1
 80049ec:	fb01 f303 	mul.w	r3, r1, r3
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	6811      	ldr	r1, [r2, #0]
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	6852      	ldr	r2, [r2, #4]
 80049f8:	1a8a      	subs	r2, r1, r2
 80049fa:	1092      	asrs	r2, r2, #2
 80049fc:	4908      	ldr	r1, [pc, #32]	; (8004a20 <_ZStmiRKSt15_Deque_iteratorI7RequestRS0_PS0_ES5_+0x54>)
 80049fe:	fb01 f202 	mul.w	r2, r1, r2
 8004a02:	4413      	add	r3, r2
	  + (__y._M_last - __y._M_cur);
 8004a04:	683a      	ldr	r2, [r7, #0]
 8004a06:	6891      	ldr	r1, [r2, #8]
 8004a08:	683a      	ldr	r2, [r7, #0]
 8004a0a:	6812      	ldr	r2, [r2, #0]
 8004a0c:	1a8a      	subs	r2, r1, r2
 8004a0e:	1092      	asrs	r2, r2, #2
 8004a10:	4903      	ldr	r1, [pc, #12]	; (8004a20 <_ZStmiRKSt15_Deque_iteratorI7RequestRS0_PS0_ES5_+0x54>)
 8004a12:	fb01 f202 	mul.w	r2, r1, r2
 8004a16:	4413      	add	r3, r2
      }
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3708      	adds	r7, #8
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	cccccccd 	.word	0xcccccccd

08004a24 <_ZNSt5dequeI7RequestSaIS0_EE11_S_max_sizeERKS1_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b084      	sub	sp, #16
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 8004a2c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8004a30:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f000 fd85 	bl	8005542 <_ZNSt16allocator_traitsISaI7RequestEE8max_sizeERKS1_>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8004a3c:	f107 0208 	add.w	r2, r7, #8
 8004a40:	f107 030c 	add.w	r3, r7, #12
 8004a44:	4611      	mov	r1, r2
 8004a46:	4618      	mov	r0, r3
 8004a48:	f000 fd87 	bl	800555a <_ZSt3minIjERKT_S2_S2_>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	681b      	ldr	r3, [r3, #0]
      }
 8004a50:	4618      	mov	r0, r3
 8004a52:	3710      	adds	r7, #16
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}

08004a58 <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb>:
	}
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
 8004a58:	b590      	push	{r4, r7, lr}
 8004a5a:	b08b      	sub	sp, #44	; 0x2c
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	60b9      	str	r1, [r7, #8]
 8004a62:	4613      	mov	r3, r2
 8004a64:	71fb      	strb	r3, [r7, #7]
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	695b      	ldr	r3, [r3, #20]
 8004a6e:	1ad3      	subs	r3, r2, r3
 8004a70:	109b      	asrs	r3, r3, #2
 8004a72:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 8004a74:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	6a3a      	ldr	r2, [r7, #32]
 8004a7a:	4413      	add	r3, r2
 8004a7c:	61fb      	str	r3, [r7, #28]

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	685a      	ldr	r2, [r3, #4]
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	005b      	lsls	r3, r3, #1
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d92d      	bls.n	8004ae6 <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb+0x8e>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	1acb      	subs	r3, r1, r3
 8004a96:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8004a98:	0099      	lsls	r1, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8004a9a:	79fb      	ldrb	r3, [r7, #7]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d002      	beq.n	8004aa6 <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb+0x4e>
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	e000      	b.n	8004aa8 <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb+0x50>
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8004aaa:	4413      	add	r3, r2
 8004aac:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	695b      	ldr	r3, [r3, #20]
 8004ab2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d209      	bcs.n	8004acc <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 8004ac0:	3304      	adds	r3, #4
 8004ac2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ac4:	4619      	mov	r1, r3
 8004ac6:	f000 fd5c 	bl	8005582 <_ZSt4copyIPP7RequestS2_ET0_T_S4_S3_>
 8004aca:	e048      	b.n	8004b5e <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb+0x106>
		      __new_nstart);
	  else
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8004ad4:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 8004ad6:	6a3b      	ldr	r3, [r7, #32]
 8004ad8:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8004ada:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004adc:	4413      	add	r3, r2
 8004ade:	461a      	mov	r2, r3
 8004ae0:	f000 fd67 	bl	80055b2 <_ZSt13copy_backwardIPP7RequestS2_ET0_T_S4_S3_>
 8004ae4:	e03b      	b.n	8004b5e <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb+0x106>
	}
      else
	{
	  size_type __new_map_size = this->_M_impl._M_map_size
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	685c      	ldr	r4, [r3, #4]
				     + std::max(this->_M_impl._M_map_size,
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	3304      	adds	r3, #4
 8004aee:	f107 0208 	add.w	r2, r7, #8
 8004af2:	4611      	mov	r1, r2
 8004af4:	4618      	mov	r0, r3
 8004af6:	f7fe feb2 	bl	800385e <_ZSt3maxIjERKT_S2_S2_>
 8004afa:	4603      	mov	r3, r0
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 8004b00:	3302      	adds	r3, #2
 8004b02:	61bb      	str	r3, [r7, #24]
						__nodes_to_add) + 2;

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	69b9      	ldr	r1, [r7, #24]
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f7fe febc 	bl	8003886 <_ZNSt11_Deque_baseI7RequestSaIS0_EE15_M_allocate_mapEj>
 8004b0e:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8004b10:	69ba      	ldr	r2, [r7, #24]
 8004b12:	69fb      	ldr	r3, [r7, #28]
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	085b      	lsrs	r3, r3, #1
 8004b18:	009a      	lsls	r2, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8004b1a:	79fb      	ldrb	r3, [r7, #7]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d002      	beq.n	8004b26 <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb+0xce>
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	e000      	b.n	8004b28 <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb+0xd0>
 8004b26:	2300      	movs	r3, #0
 8004b28:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8004b2a:	697a      	ldr	r2, [r7, #20]
 8004b2c:	4413      	add	r3, r2
 8004b2e:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8004b38:	3304      	adds	r3, #4
 8004b3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	f000 fd20 	bl	8005582 <_ZSt4copyIPP7RequestS2_ET0_T_S4_S3_>
		    __new_nstart);
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8004b42:	68f8      	ldr	r0, [r7, #12]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6819      	ldr	r1, [r3, #0]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	461a      	mov	r2, r3
 8004b4e:	f7fd fec4 	bl	80028da <_ZNSt11_Deque_baseI7RequestSaIS0_EE17_M_deallocate_mapEPPS0_j>

	  this->_M_impl._M_map = __new_map;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	697a      	ldr	r2, [r7, #20]
 8004b56:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	69ba      	ldr	r2, [r7, #24]
 8004b5c:	605a      	str	r2, [r3, #4]
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	3308      	adds	r3, #8
 8004b62:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b64:	4618      	mov	r0, r3
 8004b66:	f7fe fec5 	bl	80038f4 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	f103 0018 	add.w	r0, r3, #24
 8004b70:	6a3a      	ldr	r2, [r7, #32]
 8004b72:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8004b76:	4413      	add	r3, r2
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b7c:	4413      	add	r3, r2
 8004b7e:	4619      	mov	r1, r3
 8004b80:	f7fe feb8 	bl	80038f4 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E11_M_set_nodeEPS2_>
    }
 8004b84:	bf00      	nop
 8004b86:	372c      	adds	r7, #44	; 0x2c
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd90      	pop	{r4, r7, pc}

08004b8c <_ZNSt16allocator_traitsISaI7RequestEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b082      	sub	sp, #8
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8004b96:	2200      	movs	r2, #0
 8004b98:	6839      	ldr	r1, [r7, #0]
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f000 fd21 	bl	80055e2 <_ZN9__gnu_cxx13new_allocatorI7RequestE8allocateEjPKv>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3708      	adds	r7, #8
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}

08004baa <_ZN9__gnu_cxx13new_allocatorI8ResponceE7destroyIS1_EEvPT_>:
	destroy(_Up* __p)
 8004baa:	b580      	push	{r7, lr}
 8004bac:	b082      	sub	sp, #8
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	6078      	str	r0, [r7, #4]
 8004bb2:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 8004bb4:	6838      	ldr	r0, [r7, #0]
 8004bb6:	f7fc fa29 	bl	800100c <_ZN8ResponceD1Ev>
 8004bba:	bf00      	nop
 8004bbc:	3708      	adds	r7, #8
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}

08004bc2 <_ZN9__gnu_cxx13new_allocatorI8ResponceE9constructIS1_JS1_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8004bc2:	b590      	push	{r4, r7, lr}
 8004bc4:	b085      	sub	sp, #20
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	60f8      	str	r0, [r7, #12]
 8004bca:	60b9      	str	r1, [r7, #8]
 8004bcc:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f7fe f94c 	bl	8002e6c <_ZSt7forwardI8ResponceEOT_RNSt16remove_referenceIS1_E4typeE>
 8004bd4:	4604      	mov	r4, r0
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	4619      	mov	r1, r3
 8004bda:	2010      	movs	r0, #16
 8004bdc:	f7fc f8ef 	bl	8000dbe <_ZnwjPv>
 8004be0:	4603      	mov	r3, r0
 8004be2:	4621      	mov	r1, r4
 8004be4:	4618      	mov	r0, r3
 8004be6:	f7fc f9f5 	bl	8000fd4 <_ZN8ResponceC1EOS_>
 8004bea:	bf00      	nop
 8004bec:	3714      	adds	r7, #20
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd90      	pop	{r4, r7, pc}

08004bf2 <_ZNKSt5dequeI8ResponceSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8004bf2:	b580      	push	{r7, lr}
 8004bf4:	b082      	sub	sp, #8
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	f103 0218 	add.w	r2, r3, #24
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	3308      	adds	r3, #8
 8004c04:	4619      	mov	r1, r3
 8004c06:	4610      	mov	r0, r2
 8004c08:	f000 fd0c 	bl	8005624 <_ZStmiRKSt15_Deque_iteratorI8ResponceRS0_PS0_ES5_>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3708      	adds	r7, #8
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}

08004c16 <_ZNKSt5dequeI8ResponceSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8004c16:	b580      	push	{r7, lr}
 8004c18:	b082      	sub	sp, #8
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4618      	mov	r0, r3
 8004c22:	f000 fc4e 	bl	80054c2 <_ZNKSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 8004c26:	4603      	mov	r3, r0
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f000 fd1f 	bl	800566c <_ZNSt5dequeI8ResponceSaIS0_EE11_S_max_sizeERKS1_>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	4618      	mov	r0, r3
 8004c32:	3708      	adds	r7, #8
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}

08004c38 <_ZNSt5dequeI8ResponceSaIS0_EE22_M_reserve_map_at_backEj>:
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b082      	sub	sp, #8
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	6039      	str	r1, [r7, #0]
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	1c5a      	adds	r2, r3, #1
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 8004c4a:	6879      	ldr	r1, [r7, #4]
 8004c4c:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8004c4e:	6879      	ldr	r1, [r7, #4]
 8004c50:	6809      	ldr	r1, [r1, #0]
 8004c52:	1a41      	subs	r1, r0, r1
 8004c54:	1089      	asrs	r1, r1, #2
 8004c56:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d904      	bls.n	8004c66 <_ZNSt5dequeI8ResponceSaIS0_EE22_M_reserve_map_at_backEj+0x2e>
	  _M_reallocate_map(__nodes_to_add, false);
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	6839      	ldr	r1, [r7, #0]
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f000 fd1d 	bl	80056a0 <_ZNSt5dequeI8ResponceSaIS0_EE17_M_reallocate_mapEjb>
      }
 8004c66:	bf00      	nop
 8004c68:	3708      	adds	r7, #8
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}

08004c6e <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_M_allocate_nodeEv>:
      _M_allocate_node()
 8004c6e:	b590      	push	{r4, r7, lr}
 8004c70:	b083      	sub	sp, #12
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 8004c76:	687c      	ldr	r4, [r7, #4]
 8004c78:	2010      	movs	r0, #16
 8004c7a:	f7fc f8ac 	bl	8000dd6 <_ZSt16__deque_buf_sizej>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	4619      	mov	r1, r3
 8004c82:	4620      	mov	r0, r4
 8004c84:	f000 fda6 	bl	80057d4 <_ZNSt16allocator_traitsISaI8ResponceEE8allocateERS1_j>
 8004c88:	4603      	mov	r3, r0
      }
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	370c      	adds	r7, #12
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd90      	pop	{r4, r7, pc}

08004c92 <_ZNSt6vectorIhSaIhEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8004c92:	b580      	push	{r7, lr}
 8004c94:	b084      	sub	sp, #16
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8004c9a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8004c9e:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f000 fda6 	bl	80057f2 <_ZNSt16allocator_traitsISaIhEE8max_sizeERKS0_>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8004caa:	f107 0208 	add.w	r2, r7, #8
 8004cae:	f107 030c 	add.w	r3, r7, #12
 8004cb2:	4611      	mov	r1, r2
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f000 fc50 	bl	800555a <_ZSt3minIjERKT_S2_S2_>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	681b      	ldr	r3, [r3, #0]
      }
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3710      	adds	r7, #16
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}

08004cc6 <_ZSt25__uninitialized_default_nIPhjET_S1_T0_>:
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
 8004cc6:	b580      	push	{r7, lr}
 8004cc8:	b084      	sub	sp, #16
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	6078      	str	r0, [r7, #4]
 8004cce:	6039      	str	r1, [r7, #0]
      const bool __assignable = is_copy_assignable<_ValueType>::value;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	73fb      	strb	r3, [r7, #15]
	__uninit_default_n(__first, __n);
 8004cd4:	6839      	ldr	r1, [r7, #0]
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f000 fd97 	bl	800580a <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPhjEET_S3_T0_>
 8004cdc:	4603      	mov	r3, r0
    }
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3710      	adds	r7, #16
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}

08004ce6 <_ZNSt16allocator_traitsISaIhEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8004ce6:	b580      	push	{r7, lr}
 8004ce8:	b082      	sub	sp, #8
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	6078      	str	r0, [r7, #4]
 8004cee:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	6839      	ldr	r1, [r7, #0]
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f000 fd9b 	bl	8005830 <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3708      	adds	r7, #8
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}

08004d04 <_ZNSt6vectorIhSaIhEE14_S_do_relocateEPhS2_S2_RS0_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b084      	sub	sp, #16
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	60f8      	str	r0, [r7, #12]
 8004d0c:	60b9      	str	r1, [r7, #8]
 8004d0e:	607a      	str	r2, [r7, #4]
 8004d10:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	68b9      	ldr	r1, [r7, #8]
 8004d18:	68f8      	ldr	r0, [r7, #12]
 8004d1a:	f000 fda5 	bl	8005868 <_ZSt12__relocate_aIPhS0_SaIhEET0_T_S3_S2_RT1_>
 8004d1e:	4603      	mov	r3, r0
      }
 8004d20:	4618      	mov	r0, r3
 8004d22:	3710      	adds	r7, #16
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <_ZSt32__make_move_if_noexcept_iteratorIhSt13move_iteratorIPhEET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b084      	sub	sp, #16
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8004d30:	f107 030c 	add.w	r3, r7, #12
 8004d34:	6879      	ldr	r1, [r7, #4]
 8004d36:	4618      	mov	r0, r3
 8004d38:	f000 fdb3 	bl	80058a2 <_ZNSt13move_iteratorIPhEC1ES0_>
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3710      	adds	r7, #16
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}

08004d46 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPhES1_hET0_T_S4_S3_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8004d46:	b580      	push	{r7, lr}
 8004d48:	b084      	sub	sp, #16
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	60f8      	str	r0, [r7, #12]
 8004d4e:	60b9      	str	r1, [r7, #8]
 8004d50:	607a      	str	r2, [r7, #4]
 8004d52:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	68b9      	ldr	r1, [r7, #8]
 8004d58:	68f8      	ldr	r0, [r7, #12]
 8004d5a:	f000 fdb4 	bl	80058c6 <_ZSt18uninitialized_copyISt13move_iteratorIPhES1_ET0_T_S4_S3_>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	4618      	mov	r0, r3
 8004d62:	3710      	adds	r7, #16
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}

08004d68 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b086      	sub	sp, #24
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	60f8      	str	r0, [r7, #12]
 8004d70:	60b9      	str	r1, [r7, #8]
 8004d72:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8004d74:	2301      	movs	r3, #1
 8004d76:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	68b9      	ldr	r1, [r7, #8]
 8004d7c:	68f8      	ldr	r0, [r7, #12]
 8004d7e:	f000 fdb4 	bl	80058ea <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhEET0_T_SC_SB_>
 8004d82:	4603      	mov	r3, r0
    }
 8004d84:	4618      	mov	r0, r3
 8004d86:	3718      	adds	r7, #24
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}

08004d8c <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b082      	sub	sp, #8
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 8004d94:	1d3b      	adds	r3, r7, #4
 8004d96:	4618      	mov	r0, r3
 8004d98:	f000 fdb7 	bl	800590a <_ZNK9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEE4baseEv>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4618      	mov	r0, r3
 8004da2:	3708      	adds	r7, #8
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <_ZSt12__niter_baseIPhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b082      	sub	sp, #8
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 8004db0:	1d3b      	adds	r3, r7, #4
 8004db2:	4618      	mov	r0, r3
 8004db4:	f000 fdb4 	bl	8005920 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 8004db8:	4603      	mov	r3, r0
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3708      	adds	r7, #8
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}

08004dc4 <_ZSt14__copy_move_a1ILb0EPKhPhET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b084      	sub	sp, #16
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	60f8      	str	r0, [r7, #12]
 8004dcc:	60b9      	str	r1, [r7, #8]
 8004dce:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	68b9      	ldr	r1, [r7, #8]
 8004dd4:	68f8      	ldr	r0, [r7, #12]
 8004dd6:	f000 fdae 	bl	8005936 <_ZSt14__copy_move_a2ILb0EPKhPhET1_T0_S4_S3_>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3710      	adds	r7, #16
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}

08004de4 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEES2_ET_S7_T0_>:
    __niter_wrap(_From __from, _To __res)
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b082      	sub	sp, #8
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	6039      	str	r1, [r7, #0]
    { return __from + (__res - std::__niter_base(__from)); }
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f7ff ffda 	bl	8004da8 <_ZSt12__niter_baseIPhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 8004df4:	4602      	mov	r2, r0
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	1a9a      	subs	r2, r3, r2
 8004dfa:	1d3b      	adds	r3, r7, #4
 8004dfc:	4611      	mov	r1, r2
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f000 fda9 	bl	8005956 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEplEi>
 8004e04:	4603      	mov	r3, r0
 8004e06:	4618      	mov	r0, r3
 8004e08:	3708      	adds	r7, #8
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}

08004e0e <_ZNSt12_Destroy_auxILb1EE9__destroyIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEEvT_S9_>:
 8004e0e:	b480      	push	{r7}
 8004e10:	b083      	sub	sp, #12
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	6078      	str	r0, [r7, #4]
 8004e16:	6039      	str	r1, [r7, #0]
 8004e18:	bf00      	nop
 8004e1a:	370c      	adds	r7, #12
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr

08004e24 <_ZSt12__niter_baseIPhET_S1_>:
    __niter_base(_Iterator __it)
 8004e24:	b480      	push	{r7}
 8004e26:	b083      	sub	sp, #12
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
    { return __it; }
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	4618      	mov	r0, r3
 8004e30:	370c      	adds	r7, #12
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr

08004e3a <_ZSt14__copy_move_a1ILb0EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8004e3a:	b580      	push	{r7, lr}
 8004e3c:	b084      	sub	sp, #16
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	60f8      	str	r0, [r7, #12]
 8004e42:	60b9      	str	r1, [r7, #8]
 8004e44:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	68b9      	ldr	r1, [r7, #8]
 8004e4a:	68f8      	ldr	r0, [r7, #12]
 8004e4c:	f000 fd9a 	bl	8005984 <_ZSt14__copy_move_a2ILb0EPhS0_ET1_T0_S2_S1_>
 8004e50:	4603      	mov	r3, r0
 8004e52:	4618      	mov	r0, r3
 8004e54:	3710      	adds	r7, #16
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}

08004e5a <_ZSt12__niter_wrapIPhET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8004e5a:	b480      	push	{r7}
 8004e5c:	b083      	sub	sp, #12
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]
 8004e62:	6039      	str	r1, [r7, #0]
    { return __res; }
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	4618      	mov	r0, r3
 8004e68:	370c      	adds	r7, #12
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr

08004e72 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPhS2_EET0_T_S4_S3_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8004e72:	b580      	push	{r7, lr}
 8004e74:	b084      	sub	sp, #16
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	60f8      	str	r0, [r7, #12]
 8004e7a:	60b9      	str	r1, [r7, #8]
 8004e7c:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	68b9      	ldr	r1, [r7, #8]
 8004e82:	68f8      	ldr	r0, [r7, #12]
 8004e84:	f7fe fa1d 	bl	80032c2 <_ZSt4copyIPhS0_ET0_T_S2_S1_>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3710      	adds	r7, #16
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}

08004e92 <_ZNSt12_Vector_baseIhSaIhEEC1ERKS0_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 8004e92:	b580      	push	{r7, lr}
 8004e94:	b082      	sub	sp, #8
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	6078      	str	r0, [r7, #4]
 8004e9a:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6839      	ldr	r1, [r7, #0]
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f000 fd7f 	bl	80059a4 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1ERKS0_>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3708      	adds	r7, #8
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}

08004eb0 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_data12_M_copy_dataERKS2_>:
	_M_copy_data(_Vector_impl_data const& __x) _GLIBCXX_NOEXCEPT
 8004eb0:	b480      	push	{r7}
 8004eb2:	b083      	sub	sp, #12
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
 8004eb8:	6039      	str	r1, [r7, #0]
	  _M_start = __x._M_start;
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	601a      	str	r2, [r3, #0]
	  _M_finish = __x._M_finish;
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	685a      	ldr	r2, [r3, #4]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	605a      	str	r2, [r3, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	689a      	ldr	r2, [r3, #8]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	609a      	str	r2, [r3, #8]
	}
 8004ed2:	bf00      	nop
 8004ed4:	370c      	adds	r7, #12
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr

08004ede <_ZSt18__do_alloc_on_moveISaIhEEvRT_S2_St17integral_constantIbLb1EE>:
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 8004ede:	b580      	push	{r7, lr}
 8004ee0:	b084      	sub	sp, #16
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	60f8      	str	r0, [r7, #12]
 8004ee6:	60b9      	str	r1, [r7, #8]
 8004ee8:	713a      	strb	r2, [r7, #4]
    { __one = std::move(__two); }
 8004eea:	68b8      	ldr	r0, [r7, #8]
 8004eec:	f000 fd6c 	bl	80059c8 <_ZSt4moveIRSaIhEEONSt16remove_referenceIT_E4typeEOS3_>
 8004ef0:	bf00      	nop
 8004ef2:	3710      	adds	r7, #16
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}

08004ef8 <_ZN9__gnu_cxx13new_allocatorI8IMUFrameE9constructIS1_JS1_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8004ef8:	b5b0      	push	{r4, r5, r7, lr}
 8004efa:	b084      	sub	sp, #16
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	60f8      	str	r0, [r7, #12]
 8004f00:	60b9      	str	r1, [r7, #8]
 8004f02:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f7ff fa06 	bl	8004316 <_ZSt7forwardI8IMUFrameEOT_RNSt16remove_referenceIS1_E4typeE>
 8004f0a:	4605      	mov	r5, r0
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	4619      	mov	r1, r3
 8004f10:	2018      	movs	r0, #24
 8004f12:	f7fb ff54 	bl	8000dbe <_ZnwjPv>
 8004f16:	4603      	mov	r3, r0
 8004f18:	461c      	mov	r4, r3
 8004f1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004f1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004f1e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004f22:	e884 0003 	stmia.w	r4, {r0, r1}
 8004f26:	bf00      	nop
 8004f28:	3710      	adds	r7, #16
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bdb0      	pop	{r4, r5, r7, pc}

08004f2e <_ZNKSt5dequeI8IMUFrameSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8004f2e:	b580      	push	{r7, lr}
 8004f30:	b082      	sub	sp, #8
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f000 f8d8 	bl	80050ee <_ZNKSt11_Deque_baseI8IMUFrameSaIS0_EE19_M_get_Tp_allocatorEv>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	4618      	mov	r0, r3
 8004f42:	f000 fd4c 	bl	80059de <_ZNSt5dequeI8IMUFrameSaIS0_EE11_S_max_sizeERKS1_>
 8004f46:	4603      	mov	r3, r0
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3708      	adds	r7, #8
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}

08004f50 <_ZNSt5dequeI8IMUFrameSaIS0_EE23_M_reserve_map_at_frontEj>:
      _M_reserve_map_at_front(size_type __nodes_to_add = 1)
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b082      	sub	sp, #8
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	6039      	str	r1, [r7, #0]
	if (__nodes_to_add > size_type(this->_M_impl._M_start._M_node
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	695a      	ldr	r2, [r3, #20]
				       - this->_M_impl._M_map))
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	1ad3      	subs	r3, r2, r3
 8004f64:	109b      	asrs	r3, r3, #2
	if (__nodes_to_add > size_type(this->_M_impl._M_start._M_node
 8004f66:	461a      	mov	r2, r3
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d904      	bls.n	8004f78 <_ZNSt5dequeI8IMUFrameSaIS0_EE23_M_reserve_map_at_frontEj+0x28>
	  _M_reallocate_map(__nodes_to_add, true);
 8004f6e:	2201      	movs	r2, #1
 8004f70:	6839      	ldr	r1, [r7, #0]
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 fd4d 	bl	8005a12 <_ZNSt5dequeI8IMUFrameSaIS0_EE17_M_reallocate_mapEjb>
      }
 8004f78:	bf00      	nop
 8004f7a:	3708      	adds	r7, #8
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}

08004f80 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_M_allocate_nodeEv>:
      _M_allocate_node()
 8004f80:	b590      	push	{r4, r7, lr}
 8004f82:	b083      	sub	sp, #12
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 8004f88:	687c      	ldr	r4, [r7, #4]
 8004f8a:	2018      	movs	r0, #24
 8004f8c:	f7fb ff23 	bl	8000dd6 <_ZSt16__deque_buf_sizej>
 8004f90:	4603      	mov	r3, r0
 8004f92:	4619      	mov	r1, r3
 8004f94:	4620      	mov	r0, r4
 8004f96:	f000 fdd6 	bl	8005b46 <_ZNSt16allocator_traitsISaI8IMUFrameEE8allocateERS1_j>
 8004f9a:	4603      	mov	r3, r0
      }
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	370c      	adds	r7, #12
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd90      	pop	{r4, r7, pc}

08004fa4 <_ZNSt16allocator_traitsISaI8IMUFrameEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b084      	sub	sp, #16
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	60b9      	str	r1, [r7, #8]
 8004fae:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	68b9      	ldr	r1, [r7, #8]
 8004fb4:	68f8      	ldr	r0, [r7, #12]
 8004fb6:	f000 fdd5 	bl	8005b64 <_ZN9__gnu_cxx13new_allocatorI8IMUFrameE10deallocateEPS1_j>
 8004fba:	bf00      	nop
 8004fbc:	3710      	adds	r7, #16
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}
	...

08004fc4 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EpLEi>:
      operator+=(difference_type __n) _GLIBCXX_NOEXCEPT
 8004fc4:	b590      	push	{r4, r7, lr}
 8004fc6:	b085      	sub	sp, #20
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	6039      	str	r1, [r7, #0]
	const difference_type __offset = __n + (_M_cur - _M_first);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	1ad3      	subs	r3, r2, r3
 8004fd8:	10db      	asrs	r3, r3, #3
 8004fda:	4a2b      	ldr	r2, [pc, #172]	; (8005088 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EpLEi+0xc4>)
 8004fdc:	fb02 f303 	mul.w	r3, r2, r3
 8004fe0:	461a      	mov	r2, r3
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	4413      	add	r3, r2
 8004fe6:	60fb      	str	r3, [r7, #12]
	if (__offset >= 0 && __offset < difference_type(_S_buffer_size()))
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	db08      	blt.n	8005000 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EpLEi+0x3c>
 8004fee:	f7ff fa26 	bl	800443e <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_E14_S_buffer_sizeEv>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	461a      	mov	r2, r3
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	da01      	bge.n	8005000 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EpLEi+0x3c>
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e000      	b.n	8005002 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EpLEi+0x3e>
 8005000:	2300      	movs	r3, #0
 8005002:	2b00      	cmp	r3, #0
 8005004:	d00a      	beq.n	800501c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EpLEi+0x58>
	  _M_cur += __n;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6819      	ldr	r1, [r3, #0]
 800500a:	683a      	ldr	r2, [r7, #0]
 800500c:	4613      	mov	r3, r2
 800500e:	005b      	lsls	r3, r3, #1
 8005010:	4413      	add	r3, r2
 8005012:	00db      	lsls	r3, r3, #3
 8005014:	18ca      	adds	r2, r1, r3
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	601a      	str	r2, [r3, #0]
 800501a:	e02f      	b.n	800507c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EpLEi+0xb8>
	      __offset > 0 ? __offset / difference_type(_S_buffer_size())
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2b00      	cmp	r3, #0
 8005020:	dd07      	ble.n	8005032 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EpLEi+0x6e>
 8005022:	f7ff fa0c 	bl	800443e <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_E14_S_buffer_sizeEv>
 8005026:	4603      	mov	r3, r0
 8005028:	461a      	mov	r2, r3
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005030:	e007      	b.n	8005042 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EpLEi+0x7e>
			   : -difference_type((-__offset - 1)
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	43dc      	mvns	r4, r3
					      / _S_buffer_size()) - 1;
 8005036:	f7ff fa02 	bl	800443e <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_E14_S_buffer_sizeEv>
 800503a:	4603      	mov	r3, r0
 800503c:	fbb4 f3f3 	udiv	r3, r4, r3
	      __offset > 0 ? __offset / difference_type(_S_buffer_size())
 8005040:	43db      	mvns	r3, r3
	    const difference_type __node_offset =
 8005042:	60bb      	str	r3, [r7, #8]
	    _M_set_node(_M_node + __node_offset);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	68da      	ldr	r2, [r3, #12]
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	4413      	add	r3, r2
 800504e:	4619      	mov	r1, r3
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f7ff f9d8 	bl	8004406 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_E11_M_set_nodeEPS2_>
	    _M_cur = _M_first + (__offset - __node_offset
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	685c      	ldr	r4, [r3, #4]
				 * difference_type(_S_buffer_size()));
 800505a:	f7ff f9f0 	bl	800443e <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_E14_S_buffer_sizeEv>
 800505e:	4603      	mov	r3, r0
 8005060:	461a      	mov	r2, r3
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	fb02 f303 	mul.w	r3, r2, r3
	    _M_cur = _M_first + (__offset - __node_offset
 8005068:	68fa      	ldr	r2, [r7, #12]
 800506a:	1ad3      	subs	r3, r2, r3
 800506c:	461a      	mov	r2, r3
 800506e:	4613      	mov	r3, r2
 8005070:	005b      	lsls	r3, r3, #1
 8005072:	4413      	add	r3, r2
 8005074:	00db      	lsls	r3, r3, #3
 8005076:	18e2      	adds	r2, r4, r3
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	601a      	str	r2, [r3, #0]
	return *this;
 800507c:	687b      	ldr	r3, [r7, #4]
      }
 800507e:	4618      	mov	r0, r3
 8005080:	3714      	adds	r7, #20
 8005082:	46bd      	mov	sp, r7
 8005084:	bd90      	pop	{r4, r7, pc}
 8005086:	bf00      	nop
 8005088:	aaaaaaab 	.word	0xaaaaaaab

0800508c <_ZN9__gnu_cxx13new_allocatorI8IMUFrameEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800508c:	b480      	push	{r7}
 800508e:	b083      	sub	sp, #12
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	4618      	mov	r0, r3
 8005098:	370c      	adds	r7, #12
 800509a:	46bd      	mov	sp, r7
 800509c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a0:	4770      	bx	lr

080050a2 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 80050a2:	b480      	push	{r7}
 80050a4:	b083      	sub	sp, #12
 80050a6:	af00      	add	r7, sp, #0
 80050a8:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2200      	movs	r2, #0
 80050ae:	601a      	str	r2, [r3, #0]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2200      	movs	r2, #0
 80050b4:	605a      	str	r2, [r3, #4]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2200      	movs	r2, #0
 80050ba:	609a      	str	r2, [r3, #8]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2200      	movs	r2, #0
 80050c0:	60da      	str	r2, [r3, #12]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	4618      	mov	r0, r3
 80050c6:	370c      	adds	r7, #12
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr

080050d0 <_ZNSt16allocator_traitsISaIP8IMUFrameEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b082      	sub	sp, #8
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80050da:	2200      	movs	r2, #0
 80050dc:	6839      	ldr	r1, [r7, #0]
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f000 fd53 	bl	8005b8a <_ZN9__gnu_cxx13new_allocatorIP8IMUFrameE8allocateEjPKv>
 80050e4:	4603      	mov	r3, r0
 80050e6:	4618      	mov	r0, r3
 80050e8:	3708      	adds	r7, #8
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}

080050ee <_ZNKSt11_Deque_baseI8IMUFrameSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80050ee:	b480      	push	{r7}
 80050f0:	b083      	sub	sp, #12
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4618      	mov	r0, r3
 80050fa:	370c      	adds	r7, #12
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr

08005104 <_ZNSaIP8IMUFrameEC1IS_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8005104:	b580      	push	{r7, lr}
 8005106:	b082      	sub	sp, #8
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	6039      	str	r1, [r7, #0]
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f000 fd59 	bl	8005bc6 <_ZN9__gnu_cxx13new_allocatorIP8IMUFrameEC1Ev>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	4618      	mov	r0, r3
 8005118:	3708      	adds	r7, #8
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}

0800511e <_ZN9__gnu_cxx13new_allocatorIP8IMUFrameED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800511e:	b480      	push	{r7}
 8005120:	b083      	sub	sp, #12
 8005122:	af00      	add	r7, sp, #0
 8005124:	6078      	str	r0, [r7, #4]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4618      	mov	r0, r3
 800512a:	370c      	adds	r7, #12
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr

08005134 <_ZN9__gnu_cxx13new_allocatorIP8IMUFrameE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 8005134:	b580      	push	{r7, lr}
 8005136:	b084      	sub	sp, #16
 8005138:	af00      	add	r7, sp, #0
 800513a:	60f8      	str	r0, [r7, #12]
 800513c:	60b9      	str	r1, [r7, #8]
 800513e:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	4619      	mov	r1, r3
 8005146:	68b8      	ldr	r0, [r7, #8]
 8005148:	f014 fe9a 	bl	8019e80 <_ZdlPvj>
      }
 800514c:	bf00      	nop
 800514e:	3710      	adds	r7, #16
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}

08005154 <_ZSt4swapINSt11_Deque_baseI7RequestSaIS1_EE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 8005154:	b5b0      	push	{r4, r5, r7, lr}
 8005156:	b08c      	sub	sp, #48	; 0x30
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f000 fd3c 	bl	8005bdc <_ZSt4moveIRNSt11_Deque_baseI7RequestSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 8005164:	4602      	mov	r2, r0
 8005166:	f107 0308 	add.w	r3, r7, #8
 800516a:	4611      	mov	r1, r2
 800516c:	4618      	mov	r0, r3
 800516e:	f000 fd64 	bl	8005c3a <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_Deque_impl_dataC1EOS3_>
      __a = _GLIBCXX_MOVE(__b);
 8005172:	6838      	ldr	r0, [r7, #0]
 8005174:	f000 fd32 	bl	8005bdc <_ZSt4moveIRNSt11_Deque_baseI7RequestSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 8005178:	4602      	mov	r2, r0
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	461c      	mov	r4, r3
 800517e:	4615      	mov	r5, r2
 8005180:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005182:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005184:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005186:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005188:	e895 0003 	ldmia.w	r5, {r0, r1}
 800518c:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8005190:	f107 0308 	add.w	r3, r7, #8
 8005194:	4618      	mov	r0, r3
 8005196:	f000 fd21 	bl	8005bdc <_ZSt4moveIRNSt11_Deque_baseI7RequestSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 800519a:	4602      	mov	r2, r0
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	461c      	mov	r4, r3
 80051a0:	4615      	mov	r5, r2
 80051a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80051a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80051a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80051a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80051aa:	e895 0003 	ldmia.w	r5, {r0, r1}
 80051ae:	e884 0003 	stmia.w	r4, {r0, r1}
    }
 80051b2:	bf00      	nop
 80051b4:	3730      	adds	r7, #48	; 0x30
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bdb0      	pop	{r4, r5, r7, pc}

080051ba <_ZNSt5dequeI7RequestSaIS0_EE15_M_erase_at_endESt15_Deque_iteratorIS0_RS0_PS0_E>:
      _M_erase_at_end(iterator __pos)
 80051ba:	b590      	push	{r4, r7, lr}
 80051bc:	b08b      	sub	sp, #44	; 0x2c
 80051be:	af00      	add	r7, sp, #0
 80051c0:	6078      	str	r0, [r7, #4]
 80051c2:	6039      	str	r1, [r7, #0]
	_M_destroy_data(__pos, end(), _M_get_Tp_allocator());
 80051c4:	f107 0308 	add.w	r3, r7, #8
 80051c8:	6839      	ldr	r1, [r7, #0]
 80051ca:	4618      	mov	r0, r3
 80051cc:	f7fd fbca 	bl	8002964 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1ERKS3_>
 80051d0:	f107 0318 	add.w	r3, r7, #24
 80051d4:	6879      	ldr	r1, [r7, #4]
 80051d6:	4618      	mov	r0, r3
 80051d8:	f7fd fbaa 	bl	8002930 <_ZNSt5dequeI7RequestSaIS0_EE3endEv>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4618      	mov	r0, r3
 80051e0:	f7fd fbb5 	bl	800294e <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 80051e4:	4603      	mov	r3, r0
 80051e6:	f107 0218 	add.w	r2, r7, #24
 80051ea:	f107 0108 	add.w	r1, r7, #8
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f7fd fbd4 	bl	800299c <_ZNSt5dequeI7RequestSaIS0_EE15_M_destroy_dataESt15_Deque_iteratorIS0_RS0_PS0_ES6_RKS1_>
	_M_destroy_nodes(__pos._M_node + 1,
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	68db      	ldr	r3, [r3, #12]
 80051fa:	1d19      	adds	r1, r3, #4
			 this->_M_impl._M_finish._M_node + 1);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	_M_destroy_nodes(__pos._M_node + 1,
 8005200:	3304      	adds	r3, #4
 8005202:	461a      	mov	r2, r3
 8005204:	f7fd fb4f 	bl	80028a6 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_M_destroy_nodesEPPS0_S4_>
	this->_M_impl._M_finish = __pos;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	683a      	ldr	r2, [r7, #0]
 800520c:	f103 0418 	add.w	r4, r3, #24
 8005210:	4613      	mov	r3, r2
 8005212:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005214:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      }
 8005218:	bf00      	nop
 800521a:	372c      	adds	r7, #44	; 0x2c
 800521c:	46bd      	mov	sp, r7
 800521e:	bd90      	pop	{r4, r7, pc}

08005220 <_ZSt18__do_alloc_on_moveISaI7RequestEEvRT_S3_St17integral_constantIbLb1EE>:
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 8005220:	b580      	push	{r7, lr}
 8005222:	b084      	sub	sp, #16
 8005224:	af00      	add	r7, sp, #0
 8005226:	60f8      	str	r0, [r7, #12]
 8005228:	60b9      	str	r1, [r7, #8]
 800522a:	713a      	strb	r2, [r7, #4]
    { __one = std::move(__two); }
 800522c:	68b8      	ldr	r0, [r7, #8]
 800522e:	f000 fd23 	bl	8005c78 <_ZSt4moveIRSaI7RequestEEONSt16remove_referenceIT_E4typeEOS4_>
 8005232:	bf00      	nop
 8005234:	3710      	adds	r7, #16
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}

0800523a <_ZSt4swapINSt11_Deque_baseI8ResponceSaIS1_EE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>:
    swap(_Tp& __a, _Tp& __b)
 800523a:	b5b0      	push	{r4, r5, r7, lr}
 800523c:	b08c      	sub	sp, #48	; 0x30
 800523e:	af00      	add	r7, sp, #0
 8005240:	6078      	str	r0, [r7, #4]
 8005242:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f000 fd22 	bl	8005c8e <_ZSt4moveIRNSt11_Deque_baseI8ResponceSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 800524a:	4602      	mov	r2, r0
 800524c:	f107 0308 	add.w	r3, r7, #8
 8005250:	4611      	mov	r1, r2
 8005252:	4618      	mov	r0, r3
 8005254:	f000 fd4a 	bl	8005cec <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_Deque_impl_dataC1EOS3_>
      __a = _GLIBCXX_MOVE(__b);
 8005258:	6838      	ldr	r0, [r7, #0]
 800525a:	f000 fd18 	bl	8005c8e <_ZSt4moveIRNSt11_Deque_baseI8ResponceSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 800525e:	4602      	mov	r2, r0
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	461c      	mov	r4, r3
 8005264:	4615      	mov	r5, r2
 8005266:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005268:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800526a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800526c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800526e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8005272:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8005276:	f107 0308 	add.w	r3, r7, #8
 800527a:	4618      	mov	r0, r3
 800527c:	f000 fd07 	bl	8005c8e <_ZSt4moveIRNSt11_Deque_baseI8ResponceSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 8005280:	4602      	mov	r2, r0
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	461c      	mov	r4, r3
 8005286:	4615      	mov	r5, r2
 8005288:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800528a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800528c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800528e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005290:	e895 0003 	ldmia.w	r5, {r0, r1}
 8005294:	e884 0003 	stmia.w	r4, {r0, r1}
    }
 8005298:	bf00      	nop
 800529a:	3730      	adds	r7, #48	; 0x30
 800529c:	46bd      	mov	sp, r7
 800529e:	bdb0      	pop	{r4, r5, r7, pc}

080052a0 <_ZNSt5dequeI8ResponceSaIS0_EE15_M_erase_at_endESt15_Deque_iteratorIS0_RS0_PS0_E>:
      _M_erase_at_end(iterator __pos)
 80052a0:	b590      	push	{r4, r7, lr}
 80052a2:	b08b      	sub	sp, #44	; 0x2c
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
 80052a8:	6039      	str	r1, [r7, #0]
	_M_destroy_data(__pos, end(), _M_get_Tp_allocator());
 80052aa:	f107 0308 	add.w	r3, r7, #8
 80052ae:	6839      	ldr	r1, [r7, #0]
 80052b0:	4618      	mov	r0, r3
 80052b2:	f7fd fbfa 	bl	8002aaa <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1ERKS3_>
 80052b6:	f107 0318 	add.w	r3, r7, #24
 80052ba:	6879      	ldr	r1, [r7, #4]
 80052bc:	4618      	mov	r0, r3
 80052be:	f7fd fbda 	bl	8002a76 <_ZNSt5dequeI8ResponceSaIS0_EE3endEv>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	4618      	mov	r0, r3
 80052c6:	f7fd fbe5 	bl	8002a94 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 80052ca:	4603      	mov	r3, r0
 80052cc:	f107 0218 	add.w	r2, r7, #24
 80052d0:	f107 0108 	add.w	r1, r7, #8
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f7fd fc04 	bl	8002ae2 <_ZNSt5dequeI8ResponceSaIS0_EE15_M_destroy_dataESt15_Deque_iteratorIS0_RS0_PS0_ES6_RKS1_>
	_M_destroy_nodes(__pos._M_node + 1,
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	1d19      	adds	r1, r3, #4
			 this->_M_impl._M_finish._M_node + 1);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	_M_destroy_nodes(__pos._M_node + 1,
 80052e6:	3304      	adds	r3, #4
 80052e8:	461a      	mov	r2, r3
 80052ea:	f7fe fc3b 	bl	8003b64 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_M_destroy_nodesEPPS0_S4_>
	this->_M_impl._M_finish = __pos;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	683a      	ldr	r2, [r7, #0]
 80052f2:	f103 0418 	add.w	r4, r3, #24
 80052f6:	4613      	mov	r3, r2
 80052f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80052fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      }
 80052fe:	bf00      	nop
 8005300:	372c      	adds	r7, #44	; 0x2c
 8005302:	46bd      	mov	sp, r7
 8005304:	bd90      	pop	{r4, r7, pc}

08005306 <_ZSt18__do_alloc_on_moveISaI8ResponceEEvRT_S3_St17integral_constantIbLb1EE>:
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 8005306:	b580      	push	{r7, lr}
 8005308:	b084      	sub	sp, #16
 800530a:	af00      	add	r7, sp, #0
 800530c:	60f8      	str	r0, [r7, #12]
 800530e:	60b9      	str	r1, [r7, #8]
 8005310:	713a      	strb	r2, [r7, #4]
    { __one = std::move(__two); }
 8005312:	68b8      	ldr	r0, [r7, #8]
 8005314:	f000 fd09 	bl	8005d2a <_ZSt4moveIRSaI8ResponceEEONSt16remove_referenceIT_E4typeEOS4_>
 8005318:	bf00      	nop
 800531a:	3710      	adds	r7, #16
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}

08005320 <_ZSt4swapINSt11_Deque_baseI8IMUFrameSaIS1_EE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>:
    swap(_Tp& __a, _Tp& __b)
 8005320:	b5b0      	push	{r4, r5, r7, lr}
 8005322:	b08c      	sub	sp, #48	; 0x30
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f000 fd08 	bl	8005d40 <_ZSt4moveIRNSt11_Deque_baseI8IMUFrameSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 8005330:	4602      	mov	r2, r0
 8005332:	f107 0308 	add.w	r3, r7, #8
 8005336:	4611      	mov	r1, r2
 8005338:	4618      	mov	r0, r3
 800533a:	f000 fd30 	bl	8005d9e <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_Deque_impl_dataC1EOS3_>
      __a = _GLIBCXX_MOVE(__b);
 800533e:	6838      	ldr	r0, [r7, #0]
 8005340:	f000 fcfe 	bl	8005d40 <_ZSt4moveIRNSt11_Deque_baseI8IMUFrameSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 8005344:	4602      	mov	r2, r0
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	461c      	mov	r4, r3
 800534a:	4615      	mov	r5, r2
 800534c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800534e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005350:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005352:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005354:	e895 0003 	ldmia.w	r5, {r0, r1}
 8005358:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 800535c:	f107 0308 	add.w	r3, r7, #8
 8005360:	4618      	mov	r0, r3
 8005362:	f000 fced 	bl	8005d40 <_ZSt4moveIRNSt11_Deque_baseI8IMUFrameSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 8005366:	4602      	mov	r2, r0
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	461c      	mov	r4, r3
 800536c:	4615      	mov	r5, r2
 800536e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005370:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005372:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005374:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005376:	e895 0003 	ldmia.w	r5, {r0, r1}
 800537a:	e884 0003 	stmia.w	r4, {r0, r1}
    }
 800537e:	bf00      	nop
 8005380:	3730      	adds	r7, #48	; 0x30
 8005382:	46bd      	mov	sp, r7
 8005384:	bdb0      	pop	{r4, r5, r7, pc}

08005386 <_ZSt18__do_alloc_on_moveISaI8IMUFrameEEvRT_S3_St17integral_constantIbLb1EE>:
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 8005386:	b580      	push	{r7, lr}
 8005388:	b084      	sub	sp, #16
 800538a:	af00      	add	r7, sp, #0
 800538c:	60f8      	str	r0, [r7, #12]
 800538e:	60b9      	str	r1, [r7, #8]
 8005390:	713a      	strb	r2, [r7, #4]
    { __one = std::move(__two); }
 8005392:	68b8      	ldr	r0, [r7, #8]
 8005394:	f000 fd22 	bl	8005ddc <_ZSt4moveIRSaI8IMUFrameEEONSt16remove_referenceIT_E4typeEOS4_>
 8005398:	bf00      	nop
 800539a:	3710      	adds	r7, #16
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}

080053a0 <_ZN9__gnu_cxx13new_allocatorIP7RequestE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b084      	sub	sp, #16
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	60f8      	str	r0, [r7, #12]
 80053a8:	60b9      	str	r1, [r7, #8]
 80053aa:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80053ac:	68f8      	ldr	r0, [r7, #12]
 80053ae:	f000 fd20 	bl	8005df2 <_ZNK9__gnu_cxx13new_allocatorIP7RequestE11_M_max_sizeEv>
 80053b2:	4602      	mov	r2, r0
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	4293      	cmp	r3, r2
 80053b8:	bf8c      	ite	hi
 80053ba:	2301      	movhi	r3, #1
 80053bc:	2300      	movls	r3, #0
 80053be:	b2db      	uxtb	r3, r3
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d001      	beq.n	80053c8 <_ZN9__gnu_cxx13new_allocatorIP7RequestE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80053c4:	f014 fd6f 	bl	8019ea6 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	4618      	mov	r0, r3
 80053ce:	f014 fd59 	bl	8019e84 <_Znwj>
 80053d2:	4603      	mov	r3, r0
      }
 80053d4:	4618      	mov	r0, r3
 80053d6:	3710      	adds	r7, #16
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}

080053dc <_ZN9__gnu_cxx13new_allocatorI7RequestE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __t)
 80053dc:	b580      	push	{r7, lr}
 80053de:	b084      	sub	sp, #16
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	60b9      	str	r1, [r7, #8]
 80053e6:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80053e8:	687a      	ldr	r2, [r7, #4]
 80053ea:	4613      	mov	r3, r2
 80053ec:	009b      	lsls	r3, r3, #2
 80053ee:	4413      	add	r3, r2
 80053f0:	009b      	lsls	r3, r3, #2
 80053f2:	4619      	mov	r1, r3
 80053f4:	68b8      	ldr	r0, [r7, #8]
 80053f6:	f014 fd43 	bl	8019e80 <_ZdlPvj>
      }
 80053fa:	bf00      	nop
 80053fc:	3710      	adds	r7, #16
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}

08005402 <_ZN9__gnu_cxx13new_allocatorIP7RequestEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8005402:	b480      	push	{r7}
 8005404:	b083      	sub	sp, #12
 8005406:	af00      	add	r7, sp, #0
 8005408:	6078      	str	r0, [r7, #4]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	4618      	mov	r0, r3
 800540e:	370c      	adds	r7, #12
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr

08005418 <_ZSt8_DestroyIP7RequestEvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8005418:	b580      	push	{r7, lr}
 800541a:	b082      	sub	sp, #8
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8005422:	6839      	ldr	r1, [r7, #0]
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f000 fcf0 	bl	8005e0a <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RequestEEvT_S4_>
    }
 800542a:	bf00      	nop
 800542c:	3708      	adds	r7, #8
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}

08005432 <_ZN9__gnu_cxx13new_allocatorI8ResponceEC1Ev>:
 8005432:	b480      	push	{r7}
 8005434:	b083      	sub	sp, #12
 8005436:	af00      	add	r7, sp, #0
 8005438:	6078      	str	r0, [r7, #4]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4618      	mov	r0, r3
 800543e:	370c      	adds	r7, #12
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr

08005448 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 8005448:	b480      	push	{r7}
 800544a:	b083      	sub	sp, #12
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2200      	movs	r2, #0
 8005454:	601a      	str	r2, [r3, #0]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2200      	movs	r2, #0
 800545a:	605a      	str	r2, [r3, #4]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2200      	movs	r2, #0
 8005460:	609a      	str	r2, [r3, #8]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2200      	movs	r2, #0
 8005466:	60da      	str	r2, [r3, #12]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	4618      	mov	r0, r3
 800546c:	370c      	adds	r7, #12
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr

08005476 <_ZNSt16allocator_traitsISaIP8ResponceEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8005476:	b580      	push	{r7, lr}
 8005478:	b082      	sub	sp, #8
 800547a:	af00      	add	r7, sp, #0
 800547c:	6078      	str	r0, [r7, #4]
 800547e:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8005480:	2200      	movs	r2, #0
 8005482:	6839      	ldr	r1, [r7, #0]
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	f000 fcd8 	bl	8005e3a <_ZN9__gnu_cxx13new_allocatorIP8ResponceE8allocateEjPKv>
 800548a:	4603      	mov	r3, r0
 800548c:	4618      	mov	r0, r3
 800548e:	3708      	adds	r7, #8
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}

08005494 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 8005494:	b580      	push	{r7, lr}
 8005496:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 8005498:	2010      	movs	r0, #16
 800549a:	f7fb fc9c 	bl	8000dd6 <_ZSt16__deque_buf_sizej>
 800549e:	4603      	mov	r3, r0
 80054a0:	4618      	mov	r0, r3
 80054a2:	bd80      	pop	{r7, pc}

080054a4 <_ZNSt16allocator_traitsISaI8ResponceEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b084      	sub	sp, #16
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	60f8      	str	r0, [r7, #12]
 80054ac:	60b9      	str	r1, [r7, #8]
 80054ae:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	68b9      	ldr	r1, [r7, #8]
 80054b4:	68f8      	ldr	r0, [r7, #12]
 80054b6:	f000 fcde 	bl	8005e76 <_ZN9__gnu_cxx13new_allocatorI8ResponceE10deallocateEPS1_j>
 80054ba:	bf00      	nop
 80054bc:	3710      	adds	r7, #16
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}

080054c2 <_ZNKSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80054c2:	b480      	push	{r7}
 80054c4:	b083      	sub	sp, #12
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4618      	mov	r0, r3
 80054ce:	370c      	adds	r7, #12
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr

080054d8 <_ZNSaIP8ResponceEC1IS_EERKSaIT_E>:
 80054d8:	b580      	push	{r7, lr}
 80054da:	b082      	sub	sp, #8
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	6039      	str	r1, [r7, #0]
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f000 fcd7 	bl	8005e96 <_ZN9__gnu_cxx13new_allocatorIP8ResponceEC1Ev>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	4618      	mov	r0, r3
 80054ec:	3708      	adds	r7, #8
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}

080054f2 <_ZN9__gnu_cxx13new_allocatorIP8ResponceED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80054f2:	b480      	push	{r7}
 80054f4:	b083      	sub	sp, #12
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	6078      	str	r0, [r7, #4]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	4618      	mov	r0, r3
 80054fe:	370c      	adds	r7, #12
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr

08005508 <_ZN9__gnu_cxx13new_allocatorIP8ResponceE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 8005508:	b580      	push	{r7, lr}
 800550a:	b084      	sub	sp, #16
 800550c:	af00      	add	r7, sp, #0
 800550e:	60f8      	str	r0, [r7, #12]
 8005510:	60b9      	str	r1, [r7, #8]
 8005512:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	009b      	lsls	r3, r3, #2
 8005518:	4619      	mov	r1, r3
 800551a:	68b8      	ldr	r0, [r7, #8]
 800551c:	f014 fcb0 	bl	8019e80 <_ZdlPvj>
      }
 8005520:	bf00      	nop
 8005522:	3710      	adds	r7, #16
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}

08005528 <_ZSt8_DestroyIP8ResponceEvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8005528:	b580      	push	{r7, lr}
 800552a:	b082      	sub	sp, #8
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8005532:	6839      	ldr	r1, [r7, #0]
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f000 fcb9 	bl	8005eac <_ZNSt12_Destroy_auxILb0EE9__destroyIP8ResponceEEvT_S4_>
    }
 800553a:	bf00      	nop
 800553c:	3708      	adds	r7, #8
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}

08005542 <_ZNSt16allocator_traitsISaI7RequestEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8005542:	b580      	push	{r7, lr}
 8005544:	b082      	sub	sp, #8
 8005546:	af00      	add	r7, sp, #0
 8005548:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f000 fcc6 	bl	8005edc <_ZNK9__gnu_cxx13new_allocatorI7RequestE8max_sizeEv>
 8005550:	4603      	mov	r3, r0
      }
 8005552:	4618      	mov	r0, r3
 8005554:	3708      	adds	r7, #8
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}

0800555a <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 800555a:	b480      	push	{r7}
 800555c:	b083      	sub	sp, #12
 800555e:	af00      	add	r7, sp, #0
 8005560:	6078      	str	r0, [r7, #4]
 8005562:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	429a      	cmp	r2, r3
 800556e:	d201      	bcs.n	8005574 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	e000      	b.n	8005576 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8005574:	687b      	ldr	r3, [r7, #4]
    }
 8005576:	4618      	mov	r0, r3
 8005578:	370c      	adds	r7, #12
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr

08005582 <_ZSt4copyIPP7RequestS2_ET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 8005582:	b590      	push	{r4, r7, lr}
 8005584:	b085      	sub	sp, #20
 8005586:	af00      	add	r7, sp, #0
 8005588:	60f8      	str	r0, [r7, #12]
 800558a:	60b9      	str	r1, [r7, #8]
 800558c:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800558e:	68f8      	ldr	r0, [r7, #12]
 8005590:	f000 fcb0 	bl	8005ef4 <_ZSt12__miter_baseIPP7RequestET_S3_>
 8005594:	4604      	mov	r4, r0
 8005596:	68b8      	ldr	r0, [r7, #8]
 8005598:	f000 fcac 	bl	8005ef4 <_ZSt12__miter_baseIPP7RequestET_S3_>
 800559c:	4603      	mov	r3, r0
 800559e:	687a      	ldr	r2, [r7, #4]
 80055a0:	4619      	mov	r1, r3
 80055a2:	4620      	mov	r0, r4
 80055a4:	f000 fcb1 	bl	8005f0a <_ZSt13__copy_move_aILb0EPP7RequestS2_ET1_T0_S4_S3_>
 80055a8:	4603      	mov	r3, r0
    }
 80055aa:	4618      	mov	r0, r3
 80055ac:	3714      	adds	r7, #20
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd90      	pop	{r4, r7, pc}

080055b2 <_ZSt13copy_backwardIPP7RequestS2_ET0_T_S4_S3_>:
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 80055b2:	b590      	push	{r4, r7, lr}
 80055b4:	b085      	sub	sp, #20
 80055b6:	af00      	add	r7, sp, #0
 80055b8:	60f8      	str	r0, [r7, #12]
 80055ba:	60b9      	str	r1, [r7, #8]
 80055bc:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80055be:	68f8      	ldr	r0, [r7, #12]
 80055c0:	f000 fc98 	bl	8005ef4 <_ZSt12__miter_baseIPP7RequestET_S3_>
 80055c4:	4604      	mov	r4, r0
 80055c6:	68b8      	ldr	r0, [r7, #8]
 80055c8:	f000 fc94 	bl	8005ef4 <_ZSt12__miter_baseIPP7RequestET_S3_>
 80055cc:	4603      	mov	r3, r0
 80055ce:	687a      	ldr	r2, [r7, #4]
 80055d0:	4619      	mov	r1, r3
 80055d2:	4620      	mov	r0, r4
 80055d4:	f000 fcbc 	bl	8005f50 <_ZSt22__copy_move_backward_aILb0EPP7RequestS2_ET1_T0_S4_S3_>
 80055d8:	4603      	mov	r3, r0
    }
 80055da:	4618      	mov	r0, r3
 80055dc:	3714      	adds	r7, #20
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd90      	pop	{r4, r7, pc}

080055e2 <_ZN9__gnu_cxx13new_allocatorI7RequestE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80055e2:	b580      	push	{r7, lr}
 80055e4:	b084      	sub	sp, #16
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	60f8      	str	r0, [r7, #12]
 80055ea:	60b9      	str	r1, [r7, #8]
 80055ec:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80055ee:	68f8      	ldr	r0, [r7, #12]
 80055f0:	f000 fcd2 	bl	8005f98 <_ZNK9__gnu_cxx13new_allocatorI7RequestE11_M_max_sizeEv>
 80055f4:	4602      	mov	r2, r0
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	4293      	cmp	r3, r2
 80055fa:	bf8c      	ite	hi
 80055fc:	2301      	movhi	r3, #1
 80055fe:	2300      	movls	r3, #0
 8005600:	b2db      	uxtb	r3, r3
 8005602:	2b00      	cmp	r3, #0
 8005604:	d001      	beq.n	800560a <_ZN9__gnu_cxx13new_allocatorI7RequestE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8005606:	f014 fc4e 	bl	8019ea6 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800560a:	68ba      	ldr	r2, [r7, #8]
 800560c:	4613      	mov	r3, r2
 800560e:	009b      	lsls	r3, r3, #2
 8005610:	4413      	add	r3, r2
 8005612:	009b      	lsls	r3, r3, #2
 8005614:	4618      	mov	r0, r3
 8005616:	f014 fc35 	bl	8019e84 <_Znwj>
 800561a:	4603      	mov	r3, r0
      }
 800561c:	4618      	mov	r0, r3
 800561e:	3710      	adds	r7, #16
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}

08005624 <_ZStmiRKSt15_Deque_iteratorI8ResponceRS0_PS0_ES5_>:
      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8005624:	b580      	push	{r7, lr}
 8005626:	b082      	sub	sp, #8
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	6039      	str	r1, [r7, #0]
	return difference_type(_S_buffer_size())
 800562e:	f7ff ff31 	bl	8005494 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E14_S_buffer_sizeEv>
 8005632:	4603      	mov	r3, r0
 8005634:	4619      	mov	r1, r3
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	68da      	ldr	r2, [r3, #12]
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	68db      	ldr	r3, [r3, #12]
 800563e:	1ad3      	subs	r3, r2, r3
 8005640:	109b      	asrs	r3, r3, #2
 8005642:	3b01      	subs	r3, #1
 8005644:	fb01 f303 	mul.w	r3, r1, r3
 8005648:	687a      	ldr	r2, [r7, #4]
 800564a:	6811      	ldr	r1, [r2, #0]
 800564c:	687a      	ldr	r2, [r7, #4]
 800564e:	6852      	ldr	r2, [r2, #4]
 8005650:	1a8a      	subs	r2, r1, r2
 8005652:	1112      	asrs	r2, r2, #4
 8005654:	4413      	add	r3, r2
	  + (__y._M_last - __y._M_cur);
 8005656:	683a      	ldr	r2, [r7, #0]
 8005658:	6891      	ldr	r1, [r2, #8]
 800565a:	683a      	ldr	r2, [r7, #0]
 800565c:	6812      	ldr	r2, [r2, #0]
 800565e:	1a8a      	subs	r2, r1, r2
 8005660:	1112      	asrs	r2, r2, #4
 8005662:	4413      	add	r3, r2
      }
 8005664:	4618      	mov	r0, r3
 8005666:	3708      	adds	r7, #8
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}

0800566c <_ZNSt5dequeI8ResponceSaIS0_EE11_S_max_sizeERKS1_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800566c:	b580      	push	{r7, lr}
 800566e:	b084      	sub	sp, #16
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 8005674:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8005678:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f000 fc9a 	bl	8005fb4 <_ZNSt16allocator_traitsISaI8ResponceEE8max_sizeERKS1_>
 8005680:	4603      	mov	r3, r0
 8005682:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8005684:	f107 0208 	add.w	r2, r7, #8
 8005688:	f107 030c 	add.w	r3, r7, #12
 800568c:	4611      	mov	r1, r2
 800568e:	4618      	mov	r0, r3
 8005690:	f7ff ff63 	bl	800555a <_ZSt3minIjERKT_S2_S2_>
 8005694:	4603      	mov	r3, r0
 8005696:	681b      	ldr	r3, [r3, #0]
      }
 8005698:	4618      	mov	r0, r3
 800569a:	3710      	adds	r7, #16
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}

080056a0 <_ZNSt5dequeI8ResponceSaIS0_EE17_M_reallocate_mapEjb>:
    deque<_Tp, _Alloc>::
 80056a0:	b590      	push	{r4, r7, lr}
 80056a2:	b08b      	sub	sp, #44	; 0x2c
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	60b9      	str	r1, [r7, #8]
 80056aa:	4613      	mov	r3, r2
 80056ac:	71fb      	strb	r3, [r7, #7]
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	695b      	ldr	r3, [r3, #20]
 80056b6:	1ad3      	subs	r3, r2, r3
 80056b8:	109b      	asrs	r3, r3, #2
 80056ba:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 80056bc:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	6a3a      	ldr	r2, [r7, #32]
 80056c2:	4413      	add	r3, r2
 80056c4:	61fb      	str	r3, [r7, #28]
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	685a      	ldr	r2, [r3, #4]
 80056ca:	69fb      	ldr	r3, [r7, #28]
 80056cc:	005b      	lsls	r3, r3, #1
 80056ce:	429a      	cmp	r2, r3
 80056d0:	d92d      	bls.n	800572e <_ZNSt5dequeI8ResponceSaIS0_EE17_M_reallocate_mapEjb+0x8e>
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 80056da:	69fb      	ldr	r3, [r7, #28]
 80056dc:	1acb      	subs	r3, r1, r3
 80056de:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 80056e0:	0099      	lsls	r1, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 80056e2:	79fb      	ldrb	r3, [r7, #7]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d002      	beq.n	80056ee <_ZNSt5dequeI8ResponceSaIS0_EE17_M_reallocate_mapEjb+0x4e>
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	009b      	lsls	r3, r3, #2
 80056ec:	e000      	b.n	80056f0 <_ZNSt5dequeI8ResponceSaIS0_EE17_M_reallocate_mapEjb+0x50>
 80056ee:	2300      	movs	r3, #0
 80056f0:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 80056f2:	4413      	add	r3, r2
 80056f4:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	695b      	ldr	r3, [r3, #20]
 80056fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d209      	bcs.n	8005714 <_ZNSt5dequeI8ResponceSaIS0_EE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 8005708:	3304      	adds	r3, #4
 800570a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800570c:	4619      	mov	r1, r3
 800570e:	f000 fc5d 	bl	8005fcc <_ZSt4copyIPP8ResponceS2_ET0_T_S4_S3_>
 8005712:	e048      	b.n	80057a6 <_ZNSt5dequeI8ResponceSaIS0_EE17_M_reallocate_mapEjb+0x106>
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 800571c:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 800571e:	6a3b      	ldr	r3, [r7, #32]
 8005720:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8005722:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005724:	4413      	add	r3, r2
 8005726:	461a      	mov	r2, r3
 8005728:	f000 fc68 	bl	8005ffc <_ZSt13copy_backwardIPP8ResponceS2_ET0_T_S4_S3_>
 800572c:	e03b      	b.n	80057a6 <_ZNSt5dequeI8ResponceSaIS0_EE17_M_reallocate_mapEjb+0x106>
	  size_type __new_map_size = this->_M_impl._M_map_size
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	685c      	ldr	r4, [r3, #4]
				     + std::max(this->_M_impl._M_map_size,
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	3304      	adds	r3, #4
 8005736:	f107 0208 	add.w	r2, r7, #8
 800573a:	4611      	mov	r1, r2
 800573c:	4618      	mov	r0, r3
 800573e:	f7fe f88e 	bl	800385e <_ZSt3maxIjERKT_S2_S2_>
 8005742:	4603      	mov	r3, r0
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 8005748:	3302      	adds	r3, #2
 800574a:	61bb      	str	r3, [r7, #24]
	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	69b9      	ldr	r1, [r7, #24]
 8005750:	4618      	mov	r0, r3
 8005752:	f7ff f87c 	bl	800484e <_ZNSt11_Deque_baseI8ResponceSaIS0_EE15_M_allocate_mapEj>
 8005756:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8005758:	69ba      	ldr	r2, [r7, #24]
 800575a:	69fb      	ldr	r3, [r7, #28]
 800575c:	1ad3      	subs	r3, r2, r3
 800575e:	085b      	lsrs	r3, r3, #1
 8005760:	009a      	lsls	r2, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8005762:	79fb      	ldrb	r3, [r7, #7]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d002      	beq.n	800576e <_ZNSt5dequeI8ResponceSaIS0_EE17_M_reallocate_mapEjb+0xce>
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	009b      	lsls	r3, r3, #2
 800576c:	e000      	b.n	8005770 <_ZNSt5dequeI8ResponceSaIS0_EE17_M_reallocate_mapEjb+0xd0>
 800576e:	2300      	movs	r3, #0
 8005770:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8005772:	697a      	ldr	r2, [r7, #20]
 8005774:	4413      	add	r3, r2
 8005776:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8005780:	3304      	adds	r3, #4
 8005782:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005784:	4619      	mov	r1, r3
 8005786:	f000 fc21 	bl	8005fcc <_ZSt4copyIPP8ResponceS2_ET0_T_S4_S3_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 800578a:	68f8      	ldr	r0, [r7, #12]
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	6819      	ldr	r1, [r3, #0]
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	461a      	mov	r2, r3
 8005796:	f7fe f9ff 	bl	8003b98 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE17_M_deallocate_mapEPPS0_j>
	  this->_M_impl._M_map = __new_map;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	697a      	ldr	r2, [r7, #20]
 800579e:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	69ba      	ldr	r2, [r7, #24]
 80057a4:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_start._M_set_node(__new_nstart);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	3308      	adds	r3, #8
 80057aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80057ac:	4618      	mov	r0, r3
 80057ae:	f7ff f885 	bl	80048bc <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	f103 0018 	add.w	r0, r3, #24
 80057b8:	6a3a      	ldr	r2, [r7, #32]
 80057ba:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80057be:	4413      	add	r3, r2
 80057c0:	009b      	lsls	r3, r3, #2
 80057c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057c4:	4413      	add	r3, r2
 80057c6:	4619      	mov	r1, r3
 80057c8:	f7ff f878 	bl	80048bc <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E11_M_set_nodeEPS2_>
    }
 80057cc:	bf00      	nop
 80057ce:	372c      	adds	r7, #44	; 0x2c
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd90      	pop	{r4, r7, pc}

080057d4 <_ZNSt16allocator_traitsISaI8ResponceEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b082      	sub	sp, #8
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
 80057dc:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80057de:	2200      	movs	r2, #0
 80057e0:	6839      	ldr	r1, [r7, #0]
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f000 fc22 	bl	800602c <_ZN9__gnu_cxx13new_allocatorI8ResponceE8allocateEjPKv>
 80057e8:	4603      	mov	r3, r0
 80057ea:	4618      	mov	r0, r3
 80057ec:	3708      	adds	r7, #8
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}

080057f2 <_ZNSt16allocator_traitsISaIhEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 80057f2:	b580      	push	{r7, lr}
 80057f4:	b082      	sub	sp, #8
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f000 fc34 	bl	8006068 <_ZNK9__gnu_cxx13new_allocatorIhE8max_sizeEv>
 8005800:	4603      	mov	r3, r0
      }
 8005802:	4618      	mov	r0, r3
 8005804:	3708      	adds	r7, #8
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}

0800580a <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPhjEET_S3_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
 800580a:	b580      	push	{r7, lr}
 800580c:	b084      	sub	sp, #16
 800580e:	af00      	add	r7, sp, #0
 8005810:	6078      	str	r0, [r7, #4]
 8005812:	6039      	str	r1, [r7, #0]
	  return std::fill_n(__first, __n, _ValueType());
 8005814:	2300      	movs	r3, #0
 8005816:	73fb      	strb	r3, [r7, #15]
 8005818:	f107 030f 	add.w	r3, r7, #15
 800581c:	461a      	mov	r2, r3
 800581e:	6839      	ldr	r1, [r7, #0]
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f000 fc2d 	bl	8006080 <_ZSt6fill_nIPhjhET_S1_T0_RKT1_>
 8005826:	4603      	mov	r3, r0
	}
 8005828:	4618      	mov	r0, r3
 800582a:	3710      	adds	r7, #16
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}

08005830 <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8005830:	b580      	push	{r7, lr}
 8005832:	b084      	sub	sp, #16
 8005834:	af00      	add	r7, sp, #0
 8005836:	60f8      	str	r0, [r7, #12]
 8005838:	60b9      	str	r1, [r7, #8]
 800583a:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 800583c:	68f8      	ldr	r0, [r7, #12]
 800583e:	f000 fc3a 	bl	80060b6 <_ZNK9__gnu_cxx13new_allocatorIhE11_M_max_sizeEv>
 8005842:	4602      	mov	r2, r0
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	4293      	cmp	r3, r2
 8005848:	bf8c      	ite	hi
 800584a:	2301      	movhi	r3, #1
 800584c:	2300      	movls	r3, #0
 800584e:	b2db      	uxtb	r3, r3
 8005850:	2b00      	cmp	r3, #0
 8005852:	d001      	beq.n	8005858 <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8005854:	f014 fb27 	bl	8019ea6 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8005858:	68b8      	ldr	r0, [r7, #8]
 800585a:	f014 fb13 	bl	8019e84 <_Znwj>
 800585e:	4603      	mov	r3, r0
      }
 8005860:	4618      	mov	r0, r3
 8005862:	3710      	adds	r7, #16
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}

08005868 <_ZSt12__relocate_aIPhS0_SaIhEET0_T_S3_S2_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8005868:	b5b0      	push	{r4, r5, r7, lr}
 800586a:	b084      	sub	sp, #16
 800586c:	af00      	add	r7, sp, #0
 800586e:	60f8      	str	r0, [r7, #12]
 8005870:	60b9      	str	r1, [r7, #8]
 8005872:	607a      	str	r2, [r7, #4]
 8005874:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 8005876:	68f8      	ldr	r0, [r7, #12]
 8005878:	f7ff fad4 	bl	8004e24 <_ZSt12__niter_baseIPhET_S1_>
 800587c:	4604      	mov	r4, r0
 800587e:	68b8      	ldr	r0, [r7, #8]
 8005880:	f7ff fad0 	bl	8004e24 <_ZSt12__niter_baseIPhET_S1_>
 8005884:	4605      	mov	r5, r0
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f7ff facc 	bl	8004e24 <_ZSt12__niter_baseIPhET_S1_>
 800588c:	4602      	mov	r2, r0
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	4629      	mov	r1, r5
 8005892:	4620      	mov	r0, r4
 8005894:	f000 fc1b 	bl	80060ce <_ZSt14__relocate_a_1IhhENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>
 8005898:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 800589a:	4618      	mov	r0, r3
 800589c:	3710      	adds	r7, #16
 800589e:	46bd      	mov	sp, r7
 80058a0:	bdb0      	pop	{r4, r5, r7, pc}

080058a2 <_ZNSt13move_iteratorIPhEC1ES0_>:
      move_iterator(iterator_type __i)
 80058a2:	b580      	push	{r7, lr}
 80058a4:	b082      	sub	sp, #8
 80058a6:	af00      	add	r7, sp, #0
 80058a8:	6078      	str	r0, [r7, #4]
 80058aa:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 80058ac:	463b      	mov	r3, r7
 80058ae:	4618      	mov	r0, r3
 80058b0:	f000 fc28 	bl	8006104 <_ZSt4moveIRPhEONSt16remove_referenceIT_E4typeEOS3_>
 80058b4:	4603      	mov	r3, r0
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	601a      	str	r2, [r3, #0]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	4618      	mov	r0, r3
 80058c0:	3708      	adds	r7, #8
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}

080058c6 <_ZSt18uninitialized_copyISt13move_iteratorIPhES1_ET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 80058c6:	b580      	push	{r7, lr}
 80058c8:	b086      	sub	sp, #24
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	60f8      	str	r0, [r7, #12]
 80058ce:	60b9      	str	r1, [r7, #8]
 80058d0:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 80058d2:	2301      	movs	r3, #1
 80058d4:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	68b9      	ldr	r1, [r7, #8]
 80058da:	68f8      	ldr	r0, [r7, #12]
 80058dc:	f000 fc1d 	bl	800611a <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPhES3_EET0_T_S6_S5_>
 80058e0:	4603      	mov	r3, r0
    }
 80058e2:	4618      	mov	r0, r3
 80058e4:	3718      	adds	r7, #24
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}

080058ea <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhEET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80058ea:	b580      	push	{r7, lr}
 80058ec:	b084      	sub	sp, #16
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	60f8      	str	r0, [r7, #12]
 80058f2:	60b9      	str	r1, [r7, #8]
 80058f4:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 80058f6:	687a      	ldr	r2, [r7, #4]
 80058f8:	68b9      	ldr	r1, [r7, #8]
 80058fa:	68f8      	ldr	r0, [r7, #12]
 80058fc:	f000 fc1d 	bl	800613a <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET0_T_SA_S9_>
 8005900:	4603      	mov	r3, r0
 8005902:	4618      	mov	r0, r3
 8005904:	3710      	adds	r7, #16
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}

0800590a <_ZNK9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800590a:	b480      	push	{r7}
 800590c:	b083      	sub	sp, #12
 800590e:	af00      	add	r7, sp, #0
 8005910:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	4618      	mov	r0, r3
 8005916:	370c      	adds	r7, #12
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr

08005920 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8005920:	b480      	push	{r7}
 8005922:	b083      	sub	sp, #12
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	4618      	mov	r0, r3
 800592c:	370c      	adds	r7, #12
 800592e:	46bd      	mov	sp, r7
 8005930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005934:	4770      	bx	lr

08005936 <_ZSt14__copy_move_a2ILb0EPKhPhET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8005936:	b580      	push	{r7, lr}
 8005938:	b084      	sub	sp, #16
 800593a:	af00      	add	r7, sp, #0
 800593c:	60f8      	str	r0, [r7, #12]
 800593e:	60b9      	str	r1, [r7, #8]
 8005940:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8005942:	687a      	ldr	r2, [r7, #4]
 8005944:	68b9      	ldr	r1, [r7, #8]
 8005946:	68f8      	ldr	r0, [r7, #12]
 8005948:	f000 fc0f 	bl	800616a <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 800594c:	4603      	mov	r3, r0
    }
 800594e:	4618      	mov	r0, r3
 8005950:	3710      	adds	r7, #16
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}

08005956 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 8005956:	b580      	push	{r7, lr}
 8005958:	b084      	sub	sp, #16
 800595a:	af00      	add	r7, sp, #0
 800595c:	6078      	str	r0, [r7, #4]
 800595e:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	4413      	add	r3, r2
 8005968:	60fb      	str	r3, [r7, #12]
 800596a:	f107 020c 	add.w	r2, r7, #12
 800596e:	f107 0308 	add.w	r3, r7, #8
 8005972:	4611      	mov	r1, r2
 8005974:	4618      	mov	r0, r3
 8005976:	f7fe fbc6 	bl	8004106 <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	4618      	mov	r0, r3
 800597e:	3710      	adds	r7, #16
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}

08005984 <_ZSt14__copy_move_a2ILb0EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8005984:	b580      	push	{r7, lr}
 8005986:	b084      	sub	sp, #16
 8005988:	af00      	add	r7, sp, #0
 800598a:	60f8      	str	r0, [r7, #12]
 800598c:	60b9      	str	r1, [r7, #8]
 800598e:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8005990:	687a      	ldr	r2, [r7, #4]
 8005992:	68b9      	ldr	r1, [r7, #8]
 8005994:	68f8      	ldr	r0, [r7, #12]
 8005996:	f000 fbe8 	bl	800616a <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 800599a:	4603      	mov	r3, r0
    }
 800599c:	4618      	mov	r0, r3
 800599e:	3710      	adds	r7, #16
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}

080059a4 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b082      	sub	sp, #8
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 80059ae:	6839      	ldr	r1, [r7, #0]
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f7fd f9e6 	bl	8002d82 <_ZNSaIhEC1ERKS_>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4618      	mov	r0, r3
 80059ba:	f7fd f8bd 	bl	8002b38 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1Ev>
	{ }
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	4618      	mov	r0, r3
 80059c2:	3708      	adds	r7, #8
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}

080059c8 <_ZSt4moveIRSaIhEEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 80059c8:	b480      	push	{r7}
 80059ca:	b083      	sub	sp, #12
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	4618      	mov	r0, r3
 80059d4:	370c      	adds	r7, #12
 80059d6:	46bd      	mov	sp, r7
 80059d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059dc:	4770      	bx	lr

080059de <_ZNSt5dequeI8IMUFrameSaIS0_EE11_S_max_sizeERKS1_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 80059de:	b580      	push	{r7, lr}
 80059e0:	b084      	sub	sp, #16
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 80059e6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80059ea:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f000 fbd6 	bl	800619e <_ZNSt16allocator_traitsISaI8IMUFrameEE8max_sizeERKS1_>
 80059f2:	4603      	mov	r3, r0
 80059f4:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 80059f6:	f107 0208 	add.w	r2, r7, #8
 80059fa:	f107 030c 	add.w	r3, r7, #12
 80059fe:	4611      	mov	r1, r2
 8005a00:	4618      	mov	r0, r3
 8005a02:	f7ff fdaa 	bl	800555a <_ZSt3minIjERKT_S2_S2_>
 8005a06:	4603      	mov	r3, r0
 8005a08:	681b      	ldr	r3, [r3, #0]
      }
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3710      	adds	r7, #16
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}

08005a12 <_ZNSt5dequeI8IMUFrameSaIS0_EE17_M_reallocate_mapEjb>:
    deque<_Tp, _Alloc>::
 8005a12:	b590      	push	{r4, r7, lr}
 8005a14:	b08b      	sub	sp, #44	; 0x2c
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	60f8      	str	r0, [r7, #12]
 8005a1a:	60b9      	str	r1, [r7, #8]
 8005a1c:	4613      	mov	r3, r2
 8005a1e:	71fb      	strb	r3, [r7, #7]
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	695b      	ldr	r3, [r3, #20]
 8005a28:	1ad3      	subs	r3, r2, r3
 8005a2a:	109b      	asrs	r3, r3, #2
 8005a2c:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 8005a2e:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	6a3a      	ldr	r2, [r7, #32]
 8005a34:	4413      	add	r3, r2
 8005a36:	61fb      	str	r3, [r7, #28]
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	685a      	ldr	r2, [r3, #4]
 8005a3c:	69fb      	ldr	r3, [r7, #28]
 8005a3e:	005b      	lsls	r3, r3, #1
 8005a40:	429a      	cmp	r2, r3
 8005a42:	d92d      	bls.n	8005aa0 <_ZNSt5dequeI8IMUFrameSaIS0_EE17_M_reallocate_mapEjb+0x8e>
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 8005a4c:	69fb      	ldr	r3, [r7, #28]
 8005a4e:	1acb      	subs	r3, r1, r3
 8005a50:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8005a52:	0099      	lsls	r1, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8005a54:	79fb      	ldrb	r3, [r7, #7]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d002      	beq.n	8005a60 <_ZNSt5dequeI8IMUFrameSaIS0_EE17_M_reallocate_mapEjb+0x4e>
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	009b      	lsls	r3, r3, #2
 8005a5e:	e000      	b.n	8005a62 <_ZNSt5dequeI8IMUFrameSaIS0_EE17_M_reallocate_mapEjb+0x50>
 8005a60:	2300      	movs	r3, #0
 8005a62:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8005a64:	4413      	add	r3, r2
 8005a66:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	695b      	ldr	r3, [r3, #20]
 8005a6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	d209      	bcs.n	8005a86 <_ZNSt5dequeI8IMUFrameSaIS0_EE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 8005a7a:	3304      	adds	r3, #4
 8005a7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a7e:	4619      	mov	r1, r3
 8005a80:	f000 fb99 	bl	80061b6 <_ZSt4copyIPP8IMUFrameS2_ET0_T_S4_S3_>
 8005a84:	e048      	b.n	8005b18 <_ZNSt5dequeI8IMUFrameSaIS0_EE17_M_reallocate_mapEjb+0x106>
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8005a8e:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 8005a90:	6a3b      	ldr	r3, [r7, #32]
 8005a92:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8005a94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a96:	4413      	add	r3, r2
 8005a98:	461a      	mov	r2, r3
 8005a9a:	f000 fba4 	bl	80061e6 <_ZSt13copy_backwardIPP8IMUFrameS2_ET0_T_S4_S3_>
 8005a9e:	e03b      	b.n	8005b18 <_ZNSt5dequeI8IMUFrameSaIS0_EE17_M_reallocate_mapEjb+0x106>
	  size_type __new_map_size = this->_M_impl._M_map_size
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	685c      	ldr	r4, [r3, #4]
				     + std::max(this->_M_impl._M_map_size,
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	3304      	adds	r3, #4
 8005aa8:	f107 0208 	add.w	r2, r7, #8
 8005aac:	4611      	mov	r1, r2
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f7fd fed5 	bl	800385e <_ZSt3maxIjERKT_S2_S2_>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 8005aba:	3302      	adds	r3, #2
 8005abc:	61bb      	str	r3, [r7, #24]
	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	69b9      	ldr	r1, [r7, #24]
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f7fe fd12 	bl	80044ec <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE15_M_allocate_mapEj>
 8005ac8:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8005aca:	69ba      	ldr	r2, [r7, #24]
 8005acc:	69fb      	ldr	r3, [r7, #28]
 8005ace:	1ad3      	subs	r3, r2, r3
 8005ad0:	085b      	lsrs	r3, r3, #1
 8005ad2:	009a      	lsls	r2, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8005ad4:	79fb      	ldrb	r3, [r7, #7]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d002      	beq.n	8005ae0 <_ZNSt5dequeI8IMUFrameSaIS0_EE17_M_reallocate_mapEjb+0xce>
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	009b      	lsls	r3, r3, #2
 8005ade:	e000      	b.n	8005ae2 <_ZNSt5dequeI8IMUFrameSaIS0_EE17_M_reallocate_mapEjb+0xd0>
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8005ae4:	697a      	ldr	r2, [r7, #20]
 8005ae6:	4413      	add	r3, r2
 8005ae8:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8005af2:	3304      	adds	r3, #4
 8005af4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005af6:	4619      	mov	r1, r3
 8005af8:	f000 fb5d 	bl	80061b6 <_ZSt4copyIPP8IMUFrameS2_ET0_T_S4_S3_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8005afc:	68f8      	ldr	r0, [r7, #12]
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	6819      	ldr	r1, [r3, #0]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	461a      	mov	r2, r3
 8005b08:	f7fd fd92 	bl	8003630 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE17_M_deallocate_mapEPPS0_j>
	  this->_M_impl._M_map = __new_map;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	697a      	ldr	r2, [r7, #20]
 8005b10:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	69ba      	ldr	r2, [r7, #24]
 8005b16:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_start._M_set_node(__new_nstart);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	3308      	adds	r3, #8
 8005b1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f7fe fc71 	bl	8004406 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f103 0018 	add.w	r0, r3, #24
 8005b2a:	6a3a      	ldr	r2, [r7, #32]
 8005b2c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8005b30:	4413      	add	r3, r2
 8005b32:	009b      	lsls	r3, r3, #2
 8005b34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b36:	4413      	add	r3, r2
 8005b38:	4619      	mov	r1, r3
 8005b3a:	f7fe fc64 	bl	8004406 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_E11_M_set_nodeEPS2_>
    }
 8005b3e:	bf00      	nop
 8005b40:	372c      	adds	r7, #44	; 0x2c
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd90      	pop	{r4, r7, pc}

08005b46 <_ZNSt16allocator_traitsISaI8IMUFrameEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 8005b46:	b580      	push	{r7, lr}
 8005b48:	b082      	sub	sp, #8
 8005b4a:	af00      	add	r7, sp, #0
 8005b4c:	6078      	str	r0, [r7, #4]
 8005b4e:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8005b50:	2200      	movs	r2, #0
 8005b52:	6839      	ldr	r1, [r7, #0]
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f000 fb5e 	bl	8006216 <_ZN9__gnu_cxx13new_allocatorI8IMUFrameE8allocateEjPKv>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	3708      	adds	r7, #8
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}

08005b64 <_ZN9__gnu_cxx13new_allocatorI8IMUFrameE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __t)
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b084      	sub	sp, #16
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	60f8      	str	r0, [r7, #12]
 8005b6c:	60b9      	str	r1, [r7, #8]
 8005b6e:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8005b70:	687a      	ldr	r2, [r7, #4]
 8005b72:	4613      	mov	r3, r2
 8005b74:	005b      	lsls	r3, r3, #1
 8005b76:	4413      	add	r3, r2
 8005b78:	00db      	lsls	r3, r3, #3
 8005b7a:	4619      	mov	r1, r3
 8005b7c:	68b8      	ldr	r0, [r7, #8]
 8005b7e:	f014 f97f 	bl	8019e80 <_ZdlPvj>
      }
 8005b82:	bf00      	nop
 8005b84:	3710      	adds	r7, #16
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}

08005b8a <_ZN9__gnu_cxx13new_allocatorIP8IMUFrameE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8005b8a:	b580      	push	{r7, lr}
 8005b8c:	b084      	sub	sp, #16
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	60f8      	str	r0, [r7, #12]
 8005b92:	60b9      	str	r1, [r7, #8]
 8005b94:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8005b96:	68f8      	ldr	r0, [r7, #12]
 8005b98:	f000 fb5e 	bl	8006258 <_ZNK9__gnu_cxx13new_allocatorIP8IMUFrameE11_M_max_sizeEv>
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	bf8c      	ite	hi
 8005ba4:	2301      	movhi	r3, #1
 8005ba6:	2300      	movls	r3, #0
 8005ba8:	b2db      	uxtb	r3, r3
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d001      	beq.n	8005bb2 <_ZN9__gnu_cxx13new_allocatorIP8IMUFrameE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8005bae:	f014 f97a 	bl	8019ea6 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	009b      	lsls	r3, r3, #2
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f014 f964 	bl	8019e84 <_Znwj>
 8005bbc:	4603      	mov	r3, r0
      }
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3710      	adds	r7, #16
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}

08005bc6 <_ZN9__gnu_cxx13new_allocatorIP8IMUFrameEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8005bc6:	b480      	push	{r7}
 8005bc8:	b083      	sub	sp, #12
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	6078      	str	r0, [r7, #4]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	370c      	adds	r7, #12
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr

08005bdc <_ZSt4moveIRNSt11_Deque_baseI7RequestSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 8005bdc:	b480      	push	{r7}
 8005bde:	b083      	sub	sp, #12
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	4618      	mov	r0, r3
 8005be8:	370c      	adds	r7, #12
 8005bea:	46bd      	mov	sp, r7
 8005bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf0:	4770      	bx	lr

08005bf2 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_Deque_impl_dataC1ERKS3_>:
	_Deque_impl_data(const _Deque_impl_data&) = default;
 8005bf2:	b580      	push	{r7, lr}
 8005bf4:	b082      	sub	sp, #8
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	6078      	str	r0, [r7, #4]
 8005bfa:	6039      	str	r1, [r7, #0]
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	681a      	ldr	r2, [r3, #0]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	601a      	str	r2, [r3, #0]
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	685a      	ldr	r2, [r3, #4]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	605a      	str	r2, [r3, #4]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f103 0208 	add.w	r2, r3, #8
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	3308      	adds	r3, #8
 8005c16:	4619      	mov	r1, r3
 8005c18:	4610      	mov	r0, r2
 8005c1a:	f7fc fea3 	bl	8002964 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1ERKS3_>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f103 0218 	add.w	r2, r3, #24
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	3318      	adds	r3, #24
 8005c28:	4619      	mov	r1, r3
 8005c2a:	4610      	mov	r0, r2
 8005c2c:	f7fc fe9a 	bl	8002964 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1ERKS3_>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	4618      	mov	r0, r3
 8005c34:	3708      	adds	r7, #8
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}

08005c3a <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_Deque_impl_dataC1EOS3_>:
	_Deque_impl_data(_Deque_impl_data&& __x) noexcept
 8005c3a:	b5b0      	push	{r4, r5, r7, lr}
 8005c3c:	b08c      	sub	sp, #48	; 0x30
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	6078      	str	r0, [r7, #4]
 8005c42:	6039      	str	r1, [r7, #0]
	: _Deque_impl_data(__x)
 8005c44:	6839      	ldr	r1, [r7, #0]
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f7ff ffd3 	bl	8005bf2 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_Deque_impl_dataC1ERKS3_>
	{ __x = _Deque_impl_data(); }
 8005c4c:	f107 0308 	add.w	r3, r7, #8
 8005c50:	4618      	mov	r0, r3
 8005c52:	f7fd fde0 	bl	8003816 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_Deque_impl_dataC1Ev>
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	461d      	mov	r5, r3
 8005c5a:	f107 0408 	add.w	r4, r7, #8
 8005c5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005c60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005c62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005c64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005c66:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005c6a:	e885 0003 	stmia.w	r5, {r0, r1}
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	4618      	mov	r0, r3
 8005c72:	3730      	adds	r7, #48	; 0x30
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bdb0      	pop	{r4, r5, r7, pc}

08005c78 <_ZSt4moveIRSaI7RequestEEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8005c78:	b480      	push	{r7}
 8005c7a:	b083      	sub	sp, #12
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	4618      	mov	r0, r3
 8005c84:	370c      	adds	r7, #12
 8005c86:	46bd      	mov	sp, r7
 8005c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8c:	4770      	bx	lr

08005c8e <_ZSt4moveIRNSt11_Deque_baseI8ResponceSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 8005c8e:	b480      	push	{r7}
 8005c90:	b083      	sub	sp, #12
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	4618      	mov	r0, r3
 8005c9a:	370c      	adds	r7, #12
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr

08005ca4 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_Deque_impl_dataC1ERKS3_>:
	_Deque_impl_data(const _Deque_impl_data&) = default;
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b082      	sub	sp, #8
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	6039      	str	r1, [r7, #0]
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	601a      	str	r2, [r3, #0]
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	685a      	ldr	r2, [r3, #4]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	605a      	str	r2, [r3, #4]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f103 0208 	add.w	r2, r3, #8
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	3308      	adds	r3, #8
 8005cc8:	4619      	mov	r1, r3
 8005cca:	4610      	mov	r0, r2
 8005ccc:	f7fc feed 	bl	8002aaa <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1ERKS3_>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f103 0218 	add.w	r2, r3, #24
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	3318      	adds	r3, #24
 8005cda:	4619      	mov	r1, r3
 8005cdc:	4610      	mov	r0, r2
 8005cde:	f7fc fee4 	bl	8002aaa <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1ERKS3_>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3708      	adds	r7, #8
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}

08005cec <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_Deque_impl_dataC1EOS3_>:
	_Deque_impl_data(_Deque_impl_data&& __x) noexcept
 8005cec:	b5b0      	push	{r4, r5, r7, lr}
 8005cee:	b08c      	sub	sp, #48	; 0x30
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
 8005cf4:	6039      	str	r1, [r7, #0]
	: _Deque_impl_data(__x)
 8005cf6:	6839      	ldr	r1, [r7, #0]
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f7ff ffd3 	bl	8005ca4 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_Deque_impl_dataC1ERKS3_>
	{ __x = _Deque_impl_data(); }
 8005cfe:	f107 0308 	add.w	r3, r7, #8
 8005d02:	4618      	mov	r0, r3
 8005d04:	f7fe fd7f 	bl	8004806 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_Deque_impl_dataC1Ev>
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	461d      	mov	r5, r3
 8005d0c:	f107 0408 	add.w	r4, r7, #8
 8005d10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005d12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005d14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005d16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005d18:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005d1c:	e885 0003 	stmia.w	r5, {r0, r1}
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	4618      	mov	r0, r3
 8005d24:	3730      	adds	r7, #48	; 0x30
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bdb0      	pop	{r4, r5, r7, pc}

08005d2a <_ZSt4moveIRSaI8ResponceEEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8005d2a:	b480      	push	{r7}
 8005d2c:	b083      	sub	sp, #12
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	4618      	mov	r0, r3
 8005d36:	370c      	adds	r7, #12
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr

08005d40 <_ZSt4moveIRNSt11_Deque_baseI8IMUFrameSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 8005d40:	b480      	push	{r7}
 8005d42:	b083      	sub	sp, #12
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	370c      	adds	r7, #12
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr

08005d56 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_Deque_impl_dataC1ERKS3_>:
	_Deque_impl_data(const _Deque_impl_data&) = default;
 8005d56:	b580      	push	{r7, lr}
 8005d58:	b082      	sub	sp, #8
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	6078      	str	r0, [r7, #4]
 8005d5e:	6039      	str	r1, [r7, #0]
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	601a      	str	r2, [r3, #0]
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	685a      	ldr	r2, [r3, #4]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	605a      	str	r2, [r3, #4]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f103 0208 	add.w	r2, r3, #8
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	3308      	adds	r3, #8
 8005d7a:	4619      	mov	r1, r3
 8005d7c:	4610      	mov	r0, r2
 8005d7e:	f7fd fc91 	bl	80036a4 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f103 0218 	add.w	r2, r3, #24
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	3318      	adds	r3, #24
 8005d8c:	4619      	mov	r1, r3
 8005d8e:	4610      	mov	r0, r2
 8005d90:	f7fd fc88 	bl	80036a4 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	4618      	mov	r0, r3
 8005d98:	3708      	adds	r7, #8
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}

08005d9e <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_Deque_impl_dataC1EOS3_>:
	_Deque_impl_data(_Deque_impl_data&& __x) noexcept
 8005d9e:	b5b0      	push	{r4, r5, r7, lr}
 8005da0:	b08c      	sub	sp, #48	; 0x30
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	6078      	str	r0, [r7, #4]
 8005da6:	6039      	str	r1, [r7, #0]
	: _Deque_impl_data(__x)
 8005da8:	6839      	ldr	r1, [r7, #0]
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f7ff ffd3 	bl	8005d56 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_Deque_impl_dataC1ERKS3_>
	{ __x = _Deque_impl_data(); }
 8005db0:	f107 0308 	add.w	r3, r7, #8
 8005db4:	4618      	mov	r0, r3
 8005db6:	f7fe fb75 	bl	80044a4 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_Deque_impl_dataC1Ev>
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	461d      	mov	r5, r3
 8005dbe:	f107 0408 	add.w	r4, r7, #8
 8005dc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005dc4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005dc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005dc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005dca:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005dce:	e885 0003 	stmia.w	r5, {r0, r1}
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3730      	adds	r7, #48	; 0x30
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bdb0      	pop	{r4, r5, r7, pc}

08005ddc <_ZSt4moveIRSaI8IMUFrameEEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8005ddc:	b480      	push	{r7}
 8005dde:	b083      	sub	sp, #12
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	4618      	mov	r0, r3
 8005de8:	370c      	adds	r7, #12
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr

08005df2 <_ZNK9__gnu_cxx13new_allocatorIP7RequestE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8005df2:	b480      	push	{r7}
 8005df4:	b083      	sub	sp, #12
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8005dfa:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8005dfe:	4618      	mov	r0, r3
 8005e00:	370c      	adds	r7, #12
 8005e02:	46bd      	mov	sp, r7
 8005e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e08:	4770      	bx	lr

08005e0a <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RequestEEvT_S4_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 8005e0a:	b580      	push	{r7, lr}
 8005e0c:	b082      	sub	sp, #8
 8005e0e:	af00      	add	r7, sp, #0
 8005e10:	6078      	str	r0, [r7, #4]
 8005e12:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8005e14:	687a      	ldr	r2, [r7, #4]
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	d00a      	beq.n	8005e32 <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RequestEEvT_S4_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f000 fa27 	bl	8006270 <_ZSt11__addressofI7RequestEPT_RS1_>
 8005e22:	4603      	mov	r3, r0
 8005e24:	4618      	mov	r0, r3
 8005e26:	f000 fa2e 	bl	8006286 <_ZSt8_DestroyI7RequestEvPT_>
	  for (; __first != __last; ++__first)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	3314      	adds	r3, #20
 8005e2e:	607b      	str	r3, [r7, #4]
 8005e30:	e7f0      	b.n	8005e14 <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RequestEEvT_S4_+0xa>
	}
 8005e32:	bf00      	nop
 8005e34:	3708      	adds	r7, #8
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}

08005e3a <_ZN9__gnu_cxx13new_allocatorIP8ResponceE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8005e3a:	b580      	push	{r7, lr}
 8005e3c:	b084      	sub	sp, #16
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	60f8      	str	r0, [r7, #12]
 8005e42:	60b9      	str	r1, [r7, #8]
 8005e44:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8005e46:	68f8      	ldr	r0, [r7, #12]
 8005e48:	f000 fa28 	bl	800629c <_ZNK9__gnu_cxx13new_allocatorIP8ResponceE11_M_max_sizeEv>
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	4293      	cmp	r3, r2
 8005e52:	bf8c      	ite	hi
 8005e54:	2301      	movhi	r3, #1
 8005e56:	2300      	movls	r3, #0
 8005e58:	b2db      	uxtb	r3, r3
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d001      	beq.n	8005e62 <_ZN9__gnu_cxx13new_allocatorIP8ResponceE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8005e5e:	f014 f822 	bl	8019ea6 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	009b      	lsls	r3, r3, #2
 8005e66:	4618      	mov	r0, r3
 8005e68:	f014 f80c 	bl	8019e84 <_Znwj>
 8005e6c:	4603      	mov	r3, r0
      }
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3710      	adds	r7, #16
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}

08005e76 <_ZN9__gnu_cxx13new_allocatorI8ResponceE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __t)
 8005e76:	b580      	push	{r7, lr}
 8005e78:	b084      	sub	sp, #16
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	60f8      	str	r0, [r7, #12]
 8005e7e:	60b9      	str	r1, [r7, #8]
 8005e80:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	011b      	lsls	r3, r3, #4
 8005e86:	4619      	mov	r1, r3
 8005e88:	68b8      	ldr	r0, [r7, #8]
 8005e8a:	f013 fff9 	bl	8019e80 <_ZdlPvj>
      }
 8005e8e:	bf00      	nop
 8005e90:	3710      	adds	r7, #16
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}

08005e96 <_ZN9__gnu_cxx13new_allocatorIP8ResponceEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8005e96:	b480      	push	{r7}
 8005e98:	b083      	sub	sp, #12
 8005e9a:	af00      	add	r7, sp, #0
 8005e9c:	6078      	str	r0, [r7, #4]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	370c      	adds	r7, #12
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr

08005eac <_ZNSt12_Destroy_auxILb0EE9__destroyIP8ResponceEEvT_S4_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b082      	sub	sp, #8
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
 8005eb4:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8005eb6:	687a      	ldr	r2, [r7, #4]
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	429a      	cmp	r2, r3
 8005ebc:	d00a      	beq.n	8005ed4 <_ZNSt12_Destroy_auxILb0EE9__destroyIP8ResponceEEvT_S4_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f000 f9f8 	bl	80062b4 <_ZSt11__addressofI8ResponceEPT_RS1_>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f000 f9ff 	bl	80062ca <_ZSt8_DestroyI8ResponceEvPT_>
	  for (; __first != __last; ++__first)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	3310      	adds	r3, #16
 8005ed0:	607b      	str	r3, [r7, #4]
 8005ed2:	e7f0      	b.n	8005eb6 <_ZNSt12_Destroy_auxILb0EE9__destroyIP8ResponceEEvT_S4_+0xa>
	}
 8005ed4:	bf00      	nop
 8005ed6:	3708      	adds	r7, #8
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}

08005edc <_ZNK9__gnu_cxx13new_allocatorI7RequestE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b082      	sub	sp, #8
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f000 f857 	bl	8005f98 <_ZNK9__gnu_cxx13new_allocatorI7RequestE11_M_max_sizeEv>
 8005eea:	4603      	mov	r3, r0
 8005eec:	4618      	mov	r0, r3
 8005eee:	3708      	adds	r7, #8
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}

08005ef4 <_ZSt12__miter_baseIPP7RequestET_S3_>:
    __miter_base(_Iterator __it)
 8005ef4:	b480      	push	{r7}
 8005ef6:	b083      	sub	sp, #12
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
    { return __it; }
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	4618      	mov	r0, r3
 8005f00:	370c      	adds	r7, #12
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr

08005f0a <_ZSt13__copy_move_aILb0EPP7RequestS2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8005f0a:	b5b0      	push	{r4, r5, r7, lr}
 8005f0c:	b084      	sub	sp, #16
 8005f0e:	af00      	add	r7, sp, #0
 8005f10:	60f8      	str	r0, [r7, #12]
 8005f12:	60b9      	str	r1, [r7, #8]
 8005f14:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8005f16:	68f8      	ldr	r0, [r7, #12]
 8005f18:	f000 f9e2 	bl	80062e0 <_ZSt12__niter_baseIPP7RequestET_S3_>
 8005f1c:	4604      	mov	r4, r0
 8005f1e:	68b8      	ldr	r0, [r7, #8]
 8005f20:	f000 f9de 	bl	80062e0 <_ZSt12__niter_baseIPP7RequestET_S3_>
 8005f24:	4605      	mov	r5, r0
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	4618      	mov	r0, r3
 8005f2a:	f000 f9d9 	bl	80062e0 <_ZSt12__niter_baseIPP7RequestET_S3_>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	461a      	mov	r2, r3
 8005f32:	4629      	mov	r1, r5
 8005f34:	4620      	mov	r0, r4
 8005f36:	f000 f9de 	bl	80062f6 <_ZSt14__copy_move_a1ILb0EPP7RequestS2_ET1_T0_S4_S3_>
 8005f3a:	4602      	mov	r2, r0
 8005f3c:	1d3b      	adds	r3, r7, #4
 8005f3e:	4611      	mov	r1, r2
 8005f40:	4618      	mov	r0, r3
 8005f42:	f000 f9e8 	bl	8006316 <_ZSt12__niter_wrapIPP7RequestET_RKS3_S3_>
 8005f46:	4603      	mov	r3, r0
    }
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3710      	adds	r7, #16
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bdb0      	pop	{r4, r5, r7, pc}

08005f50 <_ZSt22__copy_move_backward_aILb0EPP7RequestS2_ET1_T0_S4_S3_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 8005f50:	b5b0      	push	{r4, r5, r7, lr}
 8005f52:	b084      	sub	sp, #16
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	60f8      	str	r0, [r7, #12]
 8005f58:	60b9      	str	r1, [r7, #8]
 8005f5a:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8005f5c:	68f8      	ldr	r0, [r7, #12]
 8005f5e:	f000 f9bf 	bl	80062e0 <_ZSt12__niter_baseIPP7RequestET_S3_>
 8005f62:	4604      	mov	r4, r0
 8005f64:	68b8      	ldr	r0, [r7, #8]
 8005f66:	f000 f9bb 	bl	80062e0 <_ZSt12__niter_baseIPP7RequestET_S3_>
 8005f6a:	4605      	mov	r5, r0
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f000 f9b6 	bl	80062e0 <_ZSt12__niter_baseIPP7RequestET_S3_>
 8005f74:	4603      	mov	r3, r0
 8005f76:	461a      	mov	r2, r3
 8005f78:	4629      	mov	r1, r5
 8005f7a:	4620      	mov	r0, r4
 8005f7c:	f000 f9d7 	bl	800632e <_ZSt23__copy_move_backward_a1ILb0EPP7RequestS2_ET1_T0_S4_S3_>
 8005f80:	4602      	mov	r2, r0
 8005f82:	1d3b      	adds	r3, r7, #4
 8005f84:	4611      	mov	r1, r2
 8005f86:	4618      	mov	r0, r3
 8005f88:	f000 f9c5 	bl	8006316 <_ZSt12__niter_wrapIPP7RequestET_RKS3_S3_>
 8005f8c:	4603      	mov	r3, r0
    }
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3710      	adds	r7, #16
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005f98 <_ZNK9__gnu_cxx13new_allocatorI7RequestE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8005f98:	b480      	push	{r7}
 8005f9a:	b083      	sub	sp, #12
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8005fa0:	4b03      	ldr	r3, [pc, #12]	; (8005fb0 <_ZNK9__gnu_cxx13new_allocatorI7RequestE11_M_max_sizeEv+0x18>)
      }
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	370c      	adds	r7, #12
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	4770      	bx	lr
 8005fae:	bf00      	nop
 8005fb0:	06666666 	.word	0x06666666

08005fb4 <_ZNSt16allocator_traitsISaI8ResponceEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b082      	sub	sp, #8
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f000 f9c6 	bl	800634e <_ZNK9__gnu_cxx13new_allocatorI8ResponceE8max_sizeEv>
 8005fc2:	4603      	mov	r3, r0
      }
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3708      	adds	r7, #8
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}

08005fcc <_ZSt4copyIPP8ResponceS2_ET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 8005fcc:	b590      	push	{r4, r7, lr}
 8005fce:	b085      	sub	sp, #20
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	60f8      	str	r0, [r7, #12]
 8005fd4:	60b9      	str	r1, [r7, #8]
 8005fd6:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8005fd8:	68f8      	ldr	r0, [r7, #12]
 8005fda:	f000 f9c4 	bl	8006366 <_ZSt12__miter_baseIPP8ResponceET_S3_>
 8005fde:	4604      	mov	r4, r0
 8005fe0:	68b8      	ldr	r0, [r7, #8]
 8005fe2:	f000 f9c0 	bl	8006366 <_ZSt12__miter_baseIPP8ResponceET_S3_>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	687a      	ldr	r2, [r7, #4]
 8005fea:	4619      	mov	r1, r3
 8005fec:	4620      	mov	r0, r4
 8005fee:	f000 f9c5 	bl	800637c <_ZSt13__copy_move_aILb0EPP8ResponceS2_ET1_T0_S4_S3_>
 8005ff2:	4603      	mov	r3, r0
    }
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3714      	adds	r7, #20
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd90      	pop	{r4, r7, pc}

08005ffc <_ZSt13copy_backwardIPP8ResponceS2_ET0_T_S4_S3_>:
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8005ffc:	b590      	push	{r4, r7, lr}
 8005ffe:	b085      	sub	sp, #20
 8006000:	af00      	add	r7, sp, #0
 8006002:	60f8      	str	r0, [r7, #12]
 8006004:	60b9      	str	r1, [r7, #8]
 8006006:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8006008:	68f8      	ldr	r0, [r7, #12]
 800600a:	f000 f9ac 	bl	8006366 <_ZSt12__miter_baseIPP8ResponceET_S3_>
 800600e:	4604      	mov	r4, r0
 8006010:	68b8      	ldr	r0, [r7, #8]
 8006012:	f000 f9a8 	bl	8006366 <_ZSt12__miter_baseIPP8ResponceET_S3_>
 8006016:	4603      	mov	r3, r0
 8006018:	687a      	ldr	r2, [r7, #4]
 800601a:	4619      	mov	r1, r3
 800601c:	4620      	mov	r0, r4
 800601e:	f000 f9d0 	bl	80063c2 <_ZSt22__copy_move_backward_aILb0EPP8ResponceS2_ET1_T0_S4_S3_>
 8006022:	4603      	mov	r3, r0
    }
 8006024:	4618      	mov	r0, r3
 8006026:	3714      	adds	r7, #20
 8006028:	46bd      	mov	sp, r7
 800602a:	bd90      	pop	{r4, r7, pc}

0800602c <_ZN9__gnu_cxx13new_allocatorI8ResponceE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800602c:	b580      	push	{r7, lr}
 800602e:	b084      	sub	sp, #16
 8006030:	af00      	add	r7, sp, #0
 8006032:	60f8      	str	r0, [r7, #12]
 8006034:	60b9      	str	r1, [r7, #8]
 8006036:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8006038:	68f8      	ldr	r0, [r7, #12]
 800603a:	f000 f9e5 	bl	8006408 <_ZNK9__gnu_cxx13new_allocatorI8ResponceE11_M_max_sizeEv>
 800603e:	4602      	mov	r2, r0
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	4293      	cmp	r3, r2
 8006044:	bf8c      	ite	hi
 8006046:	2301      	movhi	r3, #1
 8006048:	2300      	movls	r3, #0
 800604a:	b2db      	uxtb	r3, r3
 800604c:	2b00      	cmp	r3, #0
 800604e:	d001      	beq.n	8006054 <_ZN9__gnu_cxx13new_allocatorI8ResponceE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8006050:	f013 ff29 	bl	8019ea6 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	011b      	lsls	r3, r3, #4
 8006058:	4618      	mov	r0, r3
 800605a:	f013 ff13 	bl	8019e84 <_Znwj>
 800605e:	4603      	mov	r3, r0
      }
 8006060:	4618      	mov	r0, r3
 8006062:	3710      	adds	r7, #16
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}

08006068 <_ZNK9__gnu_cxx13new_allocatorIhE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8006068:	b580      	push	{r7, lr}
 800606a:	b082      	sub	sp, #8
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f000 f820 	bl	80060b6 <_ZNK9__gnu_cxx13new_allocatorIhE11_M_max_sizeEv>
 8006076:	4603      	mov	r3, r0
 8006078:	4618      	mov	r0, r3
 800607a:	3708      	adds	r7, #8
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}

08006080 <_ZSt6fill_nIPhjhET_S1_T0_RKT1_>:
  // DR 865. More algorithms that throw away information
  // DR 426. search_n(), fill_n(), and generate_n() with negative n
  template<typename _OI, typename _Size, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    fill_n(_OI __first, _Size __n, const _Tp& __value)
 8006080:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006082:	b085      	sub	sp, #20
 8006084:	af00      	add	r7, sp, #0
 8006086:	60f8      	str	r0, [r7, #12]
 8006088:	60b9      	str	r1, [r7, #8]
 800608a:	607a      	str	r2, [r7, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_OutputIteratorConcept<_OI, _Tp>)

      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
 800608c:	68fc      	ldr	r4, [r7, #12]
 800608e:	68b8      	ldr	r0, [r7, #8]
 8006090:	f7fa fe8a 	bl	8000da8 <_ZSt17__size_to_integerj>
 8006094:	4605      	mov	r5, r0
			       std::__iterator_category(__first));
 8006096:	f107 030c 	add.w	r3, r7, #12
 800609a:	4618      	mov	r0, r3
 800609c:	f000 f9c0 	bl	8006420 <_ZSt19__iterator_categoryIPhENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
 80060a0:	4633      	mov	r3, r6
 80060a2:	687a      	ldr	r2, [r7, #4]
 80060a4:	4629      	mov	r1, r5
 80060a6:	4620      	mov	r0, r4
 80060a8:	f000 f9c5 	bl	8006436 <_ZSt10__fill_n_aIPhjhET_S1_T0_RKT1_St26random_access_iterator_tag>
 80060ac:	4603      	mov	r3, r0
    }
 80060ae:	4618      	mov	r0, r3
 80060b0:	3714      	adds	r7, #20
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080060b6 <_ZNK9__gnu_cxx13new_allocatorIhE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80060b6:	b480      	push	{r7}
 80060b8:	b083      	sub	sp, #12
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80060be:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
      }
 80060c2:	4618      	mov	r0, r3
 80060c4:	370c      	adds	r7, #12
 80060c6:	46bd      	mov	sp, r7
 80060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060cc:	4770      	bx	lr

080060ce <_ZSt14__relocate_a_1IhhENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 80060ce:	b580      	push	{r7, lr}
 80060d0:	b086      	sub	sp, #24
 80060d2:	af00      	add	r7, sp, #0
 80060d4:	60f8      	str	r0, [r7, #12]
 80060d6:	60b9      	str	r1, [r7, #8]
 80060d8:	607a      	str	r2, [r7, #4]
 80060da:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 80060dc:	68ba      	ldr	r2, [r7, #8]
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	1ad3      	subs	r3, r2, r3
 80060e2:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	dd05      	ble.n	80060f6 <_ZSt14__relocate_a_1IhhENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E+0x28>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	461a      	mov	r2, r3
 80060ee:	68f9      	ldr	r1, [r7, #12]
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f013 ff69 	bl	8019fc8 <memmove>
      return __result + __count;
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	687a      	ldr	r2, [r7, #4]
 80060fa:	4413      	add	r3, r2
    }
 80060fc:	4618      	mov	r0, r3
 80060fe:	3718      	adds	r7, #24
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}

08006104 <_ZSt4moveIRPhEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8006104:	b480      	push	{r7}
 8006106:	b083      	sub	sp, #12
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	4618      	mov	r0, r3
 8006110:	370c      	adds	r7, #12
 8006112:	46bd      	mov	sp, r7
 8006114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006118:	4770      	bx	lr

0800611a <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPhES3_EET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800611a:	b580      	push	{r7, lr}
 800611c:	b084      	sub	sp, #16
 800611e:	af00      	add	r7, sp, #0
 8006120:	60f8      	str	r0, [r7, #12]
 8006122:	60b9      	str	r1, [r7, #8]
 8006124:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8006126:	687a      	ldr	r2, [r7, #4]
 8006128:	68b9      	ldr	r1, [r7, #8]
 800612a:	68f8      	ldr	r0, [r7, #12]
 800612c:	f000 f99e 	bl	800646c <_ZSt4copyISt13move_iteratorIPhES1_ET0_T_S4_S3_>
 8006130:	4603      	mov	r3, r0
 8006132:	4618      	mov	r0, r3
 8006134:	3710      	adds	r7, #16
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}

0800613a <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET0_T_SA_S9_>:
    copy(_II __first, _II __last, _OI __result)
 800613a:	b590      	push	{r4, r7, lr}
 800613c:	b085      	sub	sp, #20
 800613e:	af00      	add	r7, sp, #0
 8006140:	60f8      	str	r0, [r7, #12]
 8006142:	60b9      	str	r1, [r7, #8]
 8006144:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8006146:	68f8      	ldr	r0, [r7, #12]
 8006148:	f7fd ffed 	bl	8004126 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEET_S8_>
 800614c:	4604      	mov	r4, r0
 800614e:	68b8      	ldr	r0, [r7, #8]
 8006150:	f7fd ffe9 	bl	8004126 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEET_S8_>
 8006154:	4603      	mov	r3, r0
 8006156:	687a      	ldr	r2, [r7, #4]
 8006158:	4619      	mov	r1, r3
 800615a:	4620      	mov	r0, r4
 800615c:	f000 f99e 	bl	800649c <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET1_T0_SA_S9_>
 8006160:	4603      	mov	r3, r0
    }
 8006162:	4618      	mov	r0, r3
 8006164:	3714      	adds	r7, #20
 8006166:	46bd      	mov	sp, r7
 8006168:	bd90      	pop	{r4, r7, pc}

0800616a <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800616a:	b580      	push	{r7, lr}
 800616c:	b086      	sub	sp, #24
 800616e:	af00      	add	r7, sp, #0
 8006170:	60f8      	str	r0, [r7, #12]
 8006172:	60b9      	str	r1, [r7, #8]
 8006174:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8006176:	68ba      	ldr	r2, [r7, #8]
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	1ad3      	subs	r3, r2, r3
 800617c:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d005      	beq.n	8006190 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_+0x26>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	461a      	mov	r2, r3
 8006188:	68f9      	ldr	r1, [r7, #12]
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f013 ff1c 	bl	8019fc8 <memmove>
	  return __result + _Num;
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	687a      	ldr	r2, [r7, #4]
 8006194:	4413      	add	r3, r2
	}
 8006196:	4618      	mov	r0, r3
 8006198:	3718      	adds	r7, #24
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}

0800619e <_ZNSt16allocator_traitsISaI8IMUFrameEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 800619e:	b580      	push	{r7, lr}
 80061a0:	b082      	sub	sp, #8
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f000 f99b 	bl	80064e2 <_ZNK9__gnu_cxx13new_allocatorI8IMUFrameE8max_sizeEv>
 80061ac:	4603      	mov	r3, r0
      }
 80061ae:	4618      	mov	r0, r3
 80061b0:	3708      	adds	r7, #8
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}

080061b6 <_ZSt4copyIPP8IMUFrameS2_ET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 80061b6:	b590      	push	{r4, r7, lr}
 80061b8:	b085      	sub	sp, #20
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	60f8      	str	r0, [r7, #12]
 80061be:	60b9      	str	r1, [r7, #8]
 80061c0:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80061c2:	68f8      	ldr	r0, [r7, #12]
 80061c4:	f000 f999 	bl	80064fa <_ZSt12__miter_baseIPP8IMUFrameET_S3_>
 80061c8:	4604      	mov	r4, r0
 80061ca:	68b8      	ldr	r0, [r7, #8]
 80061cc:	f000 f995 	bl	80064fa <_ZSt12__miter_baseIPP8IMUFrameET_S3_>
 80061d0:	4603      	mov	r3, r0
 80061d2:	687a      	ldr	r2, [r7, #4]
 80061d4:	4619      	mov	r1, r3
 80061d6:	4620      	mov	r0, r4
 80061d8:	f000 f99a 	bl	8006510 <_ZSt13__copy_move_aILb0EPP8IMUFrameS2_ET1_T0_S4_S3_>
 80061dc:	4603      	mov	r3, r0
    }
 80061de:	4618      	mov	r0, r3
 80061e0:	3714      	adds	r7, #20
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd90      	pop	{r4, r7, pc}

080061e6 <_ZSt13copy_backwardIPP8IMUFrameS2_ET0_T_S4_S3_>:
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 80061e6:	b590      	push	{r4, r7, lr}
 80061e8:	b085      	sub	sp, #20
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	60f8      	str	r0, [r7, #12]
 80061ee:	60b9      	str	r1, [r7, #8]
 80061f0:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80061f2:	68f8      	ldr	r0, [r7, #12]
 80061f4:	f000 f981 	bl	80064fa <_ZSt12__miter_baseIPP8IMUFrameET_S3_>
 80061f8:	4604      	mov	r4, r0
 80061fa:	68b8      	ldr	r0, [r7, #8]
 80061fc:	f000 f97d 	bl	80064fa <_ZSt12__miter_baseIPP8IMUFrameET_S3_>
 8006200:	4603      	mov	r3, r0
 8006202:	687a      	ldr	r2, [r7, #4]
 8006204:	4619      	mov	r1, r3
 8006206:	4620      	mov	r0, r4
 8006208:	f000 f9a5 	bl	8006556 <_ZSt22__copy_move_backward_aILb0EPP8IMUFrameS2_ET1_T0_S4_S3_>
 800620c:	4603      	mov	r3, r0
    }
 800620e:	4618      	mov	r0, r3
 8006210:	3714      	adds	r7, #20
 8006212:	46bd      	mov	sp, r7
 8006214:	bd90      	pop	{r4, r7, pc}

08006216 <_ZN9__gnu_cxx13new_allocatorI8IMUFrameE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8006216:	b580      	push	{r7, lr}
 8006218:	b084      	sub	sp, #16
 800621a:	af00      	add	r7, sp, #0
 800621c:	60f8      	str	r0, [r7, #12]
 800621e:	60b9      	str	r1, [r7, #8]
 8006220:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8006222:	68f8      	ldr	r0, [r7, #12]
 8006224:	f000 f9ba 	bl	800659c <_ZNK9__gnu_cxx13new_allocatorI8IMUFrameE11_M_max_sizeEv>
 8006228:	4602      	mov	r2, r0
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	4293      	cmp	r3, r2
 800622e:	bf8c      	ite	hi
 8006230:	2301      	movhi	r3, #1
 8006232:	2300      	movls	r3, #0
 8006234:	b2db      	uxtb	r3, r3
 8006236:	2b00      	cmp	r3, #0
 8006238:	d001      	beq.n	800623e <_ZN9__gnu_cxx13new_allocatorI8IMUFrameE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800623a:	f013 fe34 	bl	8019ea6 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800623e:	68ba      	ldr	r2, [r7, #8]
 8006240:	4613      	mov	r3, r2
 8006242:	005b      	lsls	r3, r3, #1
 8006244:	4413      	add	r3, r2
 8006246:	00db      	lsls	r3, r3, #3
 8006248:	4618      	mov	r0, r3
 800624a:	f013 fe1b 	bl	8019e84 <_Znwj>
 800624e:	4603      	mov	r3, r0
      }
 8006250:	4618      	mov	r0, r3
 8006252:	3710      	adds	r7, #16
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}

08006258 <_ZNK9__gnu_cxx13new_allocatorIP8IMUFrameE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8006258:	b480      	push	{r7}
 800625a:	b083      	sub	sp, #12
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8006260:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8006264:	4618      	mov	r0, r3
 8006266:	370c      	adds	r7, #12
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr

08006270 <_ZSt11__addressofI7RequestEPT_RS1_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8006270:	b480      	push	{r7}
 8006272:	b083      	sub	sp, #12
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	4618      	mov	r0, r3
 800627c:	370c      	adds	r7, #12
 800627e:	46bd      	mov	sp, r7
 8006280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006284:	4770      	bx	lr

08006286 <_ZSt8_DestroyI7RequestEvPT_>:
    _Destroy(_Tp* __pointer)
 8006286:	b580      	push	{r7, lr}
 8006288:	b082      	sub	sp, #8
 800628a:	af00      	add	r7, sp, #0
 800628c:	6078      	str	r0, [r7, #4]
      __pointer->~_Tp();
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f7fa ffd8 	bl	8001244 <_ZN7RequestD1Ev>
    }
 8006294:	bf00      	nop
 8006296:	3708      	adds	r7, #8
 8006298:	46bd      	mov	sp, r7
 800629a:	bd80      	pop	{r7, pc}

0800629c <_ZNK9__gnu_cxx13new_allocatorIP8ResponceE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800629c:	b480      	push	{r7}
 800629e:	b083      	sub	sp, #12
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80062a4:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 80062a8:	4618      	mov	r0, r3
 80062aa:	370c      	adds	r7, #12
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr

080062b4 <_ZSt11__addressofI8ResponceEPT_RS1_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80062b4:	b480      	push	{r7}
 80062b6:	b083      	sub	sp, #12
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	4618      	mov	r0, r3
 80062c0:	370c      	adds	r7, #12
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr

080062ca <_ZSt8_DestroyI8ResponceEvPT_>:
    _Destroy(_Tp* __pointer)
 80062ca:	b580      	push	{r7, lr}
 80062cc:	b082      	sub	sp, #8
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	6078      	str	r0, [r7, #4]
      __pointer->~_Tp();
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f7fa fe9a 	bl	800100c <_ZN8ResponceD1Ev>
    }
 80062d8:	bf00      	nop
 80062da:	3708      	adds	r7, #8
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}

080062e0 <_ZSt12__niter_baseIPP7RequestET_S3_>:
    __niter_base(_Iterator __it)
 80062e0:	b480      	push	{r7}
 80062e2:	b083      	sub	sp, #12
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
    { return __it; }
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	4618      	mov	r0, r3
 80062ec:	370c      	adds	r7, #12
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr

080062f6 <_ZSt14__copy_move_a1ILb0EPP7RequestS2_ET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 80062f6:	b580      	push	{r7, lr}
 80062f8:	b084      	sub	sp, #16
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	60f8      	str	r0, [r7, #12]
 80062fe:	60b9      	str	r1, [r7, #8]
 8006300:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8006302:	687a      	ldr	r2, [r7, #4]
 8006304:	68b9      	ldr	r1, [r7, #8]
 8006306:	68f8      	ldr	r0, [r7, #12]
 8006308:	f000 f956 	bl	80065b8 <_ZSt14__copy_move_a2ILb0EPP7RequestS2_ET1_T0_S4_S3_>
 800630c:	4603      	mov	r3, r0
 800630e:	4618      	mov	r0, r3
 8006310:	3710      	adds	r7, #16
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}

08006316 <_ZSt12__niter_wrapIPP7RequestET_RKS3_S3_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8006316:	b480      	push	{r7}
 8006318:	b083      	sub	sp, #12
 800631a:	af00      	add	r7, sp, #0
 800631c:	6078      	str	r0, [r7, #4]
 800631e:	6039      	str	r1, [r7, #0]
    { return __res; }
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	4618      	mov	r0, r3
 8006324:	370c      	adds	r7, #12
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr

0800632e <_ZSt23__copy_move_backward_a1ILb0EPP7RequestS2_ET1_T0_S4_S3_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 800632e:	b580      	push	{r7, lr}
 8006330:	b084      	sub	sp, #16
 8006332:	af00      	add	r7, sp, #0
 8006334:	60f8      	str	r0, [r7, #12]
 8006336:	60b9      	str	r1, [r7, #8]
 8006338:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 800633a:	687a      	ldr	r2, [r7, #4]
 800633c:	68b9      	ldr	r1, [r7, #8]
 800633e:	68f8      	ldr	r0, [r7, #12]
 8006340:	f000 f94a 	bl	80065d8 <_ZSt23__copy_move_backward_a2ILb0EPP7RequestS2_ET1_T0_S4_S3_>
 8006344:	4603      	mov	r3, r0
 8006346:	4618      	mov	r0, r3
 8006348:	3710      	adds	r7, #16
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}

0800634e <_ZNK9__gnu_cxx13new_allocatorI8ResponceE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800634e:	b580      	push	{r7, lr}
 8006350:	b082      	sub	sp, #8
 8006352:	af00      	add	r7, sp, #0
 8006354:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f000 f856 	bl	8006408 <_ZNK9__gnu_cxx13new_allocatorI8ResponceE11_M_max_sizeEv>
 800635c:	4603      	mov	r3, r0
 800635e:	4618      	mov	r0, r3
 8006360:	3708      	adds	r7, #8
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}

08006366 <_ZSt12__miter_baseIPP8ResponceET_S3_>:
    __miter_base(_Iterator __it)
 8006366:	b480      	push	{r7}
 8006368:	b083      	sub	sp, #12
 800636a:	af00      	add	r7, sp, #0
 800636c:	6078      	str	r0, [r7, #4]
    { return __it; }
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	4618      	mov	r0, r3
 8006372:	370c      	adds	r7, #12
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr

0800637c <_ZSt13__copy_move_aILb0EPP8ResponceS2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800637c:	b5b0      	push	{r4, r5, r7, lr}
 800637e:	b084      	sub	sp, #16
 8006380:	af00      	add	r7, sp, #0
 8006382:	60f8      	str	r0, [r7, #12]
 8006384:	60b9      	str	r1, [r7, #8]
 8006386:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8006388:	68f8      	ldr	r0, [r7, #12]
 800638a:	f000 f935 	bl	80065f8 <_ZSt12__niter_baseIPP8ResponceET_S3_>
 800638e:	4604      	mov	r4, r0
 8006390:	68b8      	ldr	r0, [r7, #8]
 8006392:	f000 f931 	bl	80065f8 <_ZSt12__niter_baseIPP8ResponceET_S3_>
 8006396:	4605      	mov	r5, r0
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	4618      	mov	r0, r3
 800639c:	f000 f92c 	bl	80065f8 <_ZSt12__niter_baseIPP8ResponceET_S3_>
 80063a0:	4603      	mov	r3, r0
 80063a2:	461a      	mov	r2, r3
 80063a4:	4629      	mov	r1, r5
 80063a6:	4620      	mov	r0, r4
 80063a8:	f000 f931 	bl	800660e <_ZSt14__copy_move_a1ILb0EPP8ResponceS2_ET1_T0_S4_S3_>
 80063ac:	4602      	mov	r2, r0
 80063ae:	1d3b      	adds	r3, r7, #4
 80063b0:	4611      	mov	r1, r2
 80063b2:	4618      	mov	r0, r3
 80063b4:	f000 f93b 	bl	800662e <_ZSt12__niter_wrapIPP8ResponceET_RKS3_S3_>
 80063b8:	4603      	mov	r3, r0
    }
 80063ba:	4618      	mov	r0, r3
 80063bc:	3710      	adds	r7, #16
 80063be:	46bd      	mov	sp, r7
 80063c0:	bdb0      	pop	{r4, r5, r7, pc}

080063c2 <_ZSt22__copy_move_backward_aILb0EPP8ResponceS2_ET1_T0_S4_S3_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 80063c2:	b5b0      	push	{r4, r5, r7, lr}
 80063c4:	b084      	sub	sp, #16
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	60f8      	str	r0, [r7, #12]
 80063ca:	60b9      	str	r1, [r7, #8]
 80063cc:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80063ce:	68f8      	ldr	r0, [r7, #12]
 80063d0:	f000 f912 	bl	80065f8 <_ZSt12__niter_baseIPP8ResponceET_S3_>
 80063d4:	4604      	mov	r4, r0
 80063d6:	68b8      	ldr	r0, [r7, #8]
 80063d8:	f000 f90e 	bl	80065f8 <_ZSt12__niter_baseIPP8ResponceET_S3_>
 80063dc:	4605      	mov	r5, r0
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	4618      	mov	r0, r3
 80063e2:	f000 f909 	bl	80065f8 <_ZSt12__niter_baseIPP8ResponceET_S3_>
 80063e6:	4603      	mov	r3, r0
 80063e8:	461a      	mov	r2, r3
 80063ea:	4629      	mov	r1, r5
 80063ec:	4620      	mov	r0, r4
 80063ee:	f000 f92a 	bl	8006646 <_ZSt23__copy_move_backward_a1ILb0EPP8ResponceS2_ET1_T0_S4_S3_>
 80063f2:	4602      	mov	r2, r0
 80063f4:	1d3b      	adds	r3, r7, #4
 80063f6:	4611      	mov	r1, r2
 80063f8:	4618      	mov	r0, r3
 80063fa:	f000 f918 	bl	800662e <_ZSt12__niter_wrapIPP8ResponceET_RKS3_S3_>
 80063fe:	4603      	mov	r3, r0
    }
 8006400:	4618      	mov	r0, r3
 8006402:	3710      	adds	r7, #16
 8006404:	46bd      	mov	sp, r7
 8006406:	bdb0      	pop	{r4, r5, r7, pc}

08006408 <_ZNK9__gnu_cxx13new_allocatorI8ResponceE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8006408:	b480      	push	{r7}
 800640a:	b083      	sub	sp, #12
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8006410:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
      }
 8006414:	4618      	mov	r0, r3
 8006416:	370c      	adds	r7, #12
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr

08006420 <_ZSt19__iterator_categoryIPhENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8006420:	b480      	push	{r7}
 8006422:	b083      	sub	sp, #12
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8006428:	bf00      	nop
 800642a:	4618      	mov	r0, r3
 800642c:	370c      	adds	r7, #12
 800642e:	46bd      	mov	sp, r7
 8006430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006434:	4770      	bx	lr

08006436 <_ZSt10__fill_n_aIPhjhET_S1_T0_RKT1_St26random_access_iterator_tag>:
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
 8006436:	b580      	push	{r7, lr}
 8006438:	b084      	sub	sp, #16
 800643a:	af00      	add	r7, sp, #0
 800643c:	60f8      	str	r0, [r7, #12]
 800643e:	60b9      	str	r1, [r7, #8]
 8006440:	607a      	str	r2, [r7, #4]
 8006442:	703b      	strb	r3, [r7, #0]
      if (__n <= 0)
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d101      	bne.n	800644e <_ZSt10__fill_n_aIPhjhET_S1_T0_RKT1_St26random_access_iterator_tag+0x18>
	return __first;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	e00a      	b.n	8006464 <_ZSt10__fill_n_aIPhjhET_S1_T0_RKT1_St26random_access_iterator_tag+0x2e>
      std::__fill_a(__first, __first + __n, __value);
 800644e:	68fa      	ldr	r2, [r7, #12]
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	4413      	add	r3, r2
 8006454:	687a      	ldr	r2, [r7, #4]
 8006456:	4619      	mov	r1, r3
 8006458:	68f8      	ldr	r0, [r7, #12]
 800645a:	f000 f904 	bl	8006666 <_ZSt8__fill_aIPhhEvT_S1_RKT0_>
      return __first + __n;
 800645e:	68fa      	ldr	r2, [r7, #12]
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	4413      	add	r3, r2
    }
 8006464:	4618      	mov	r0, r3
 8006466:	3710      	adds	r7, #16
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}

0800646c <_ZSt4copyISt13move_iteratorIPhES1_ET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 800646c:	b590      	push	{r4, r7, lr}
 800646e:	b085      	sub	sp, #20
 8006470:	af00      	add	r7, sp, #0
 8006472:	60f8      	str	r0, [r7, #12]
 8006474:	60b9      	str	r1, [r7, #8]
 8006476:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8006478:	68f8      	ldr	r0, [r7, #12]
 800647a:	f000 f903 	bl	8006684 <_ZSt12__miter_baseIPhEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 800647e:	4604      	mov	r4, r0
 8006480:	68b8      	ldr	r0, [r7, #8]
 8006482:	f000 f8ff 	bl	8006684 <_ZSt12__miter_baseIPhEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8006486:	4603      	mov	r3, r0
 8006488:	687a      	ldr	r2, [r7, #4]
 800648a:	4619      	mov	r1, r3
 800648c:	4620      	mov	r0, r4
 800648e:	f000 f90a 	bl	80066a6 <_ZSt13__copy_move_aILb1EPhS0_ET1_T0_S2_S1_>
 8006492:	4603      	mov	r3, r0
    }
 8006494:	4618      	mov	r0, r3
 8006496:	3714      	adds	r7, #20
 8006498:	46bd      	mov	sp, r7
 800649a:	bd90      	pop	{r4, r7, pc}

0800649c <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET1_T0_SA_S9_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800649c:	b5b0      	push	{r4, r5, r7, lr}
 800649e:	b084      	sub	sp, #16
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	60f8      	str	r0, [r7, #12]
 80064a4:	60b9      	str	r1, [r7, #8]
 80064a6:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80064a8:	68f8      	ldr	r0, [r7, #12]
 80064aa:	f7fe fc6f 	bl	8004d8c <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 80064ae:	4604      	mov	r4, r0
 80064b0:	68b8      	ldr	r0, [r7, #8]
 80064b2:	f7fe fc6b 	bl	8004d8c <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 80064b6:	4605      	mov	r5, r0
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	4618      	mov	r0, r3
 80064bc:	f7fe fcb2 	bl	8004e24 <_ZSt12__niter_baseIPhET_S1_>
 80064c0:	4603      	mov	r3, r0
 80064c2:	461a      	mov	r2, r3
 80064c4:	4629      	mov	r1, r5
 80064c6:	4620      	mov	r0, r4
 80064c8:	f7fe fc7c 	bl	8004dc4 <_ZSt14__copy_move_a1ILb0EPKhPhET1_T0_S4_S3_>
 80064cc:	4602      	mov	r2, r0
 80064ce:	1d3b      	adds	r3, r7, #4
 80064d0:	4611      	mov	r1, r2
 80064d2:	4618      	mov	r0, r3
 80064d4:	f7fe fcc1 	bl	8004e5a <_ZSt12__niter_wrapIPhET_RKS1_S1_>
 80064d8:	4603      	mov	r3, r0
    }
 80064da:	4618      	mov	r0, r3
 80064dc:	3710      	adds	r7, #16
 80064de:	46bd      	mov	sp, r7
 80064e0:	bdb0      	pop	{r4, r5, r7, pc}

080064e2 <_ZNK9__gnu_cxx13new_allocatorI8IMUFrameE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80064e2:	b580      	push	{r7, lr}
 80064e4:	b082      	sub	sp, #8
 80064e6:	af00      	add	r7, sp, #0
 80064e8:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f000 f856 	bl	800659c <_ZNK9__gnu_cxx13new_allocatorI8IMUFrameE11_M_max_sizeEv>
 80064f0:	4603      	mov	r3, r0
 80064f2:	4618      	mov	r0, r3
 80064f4:	3708      	adds	r7, #8
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}

080064fa <_ZSt12__miter_baseIPP8IMUFrameET_S3_>:
    __miter_base(_Iterator __it)
 80064fa:	b480      	push	{r7}
 80064fc:	b083      	sub	sp, #12
 80064fe:	af00      	add	r7, sp, #0
 8006500:	6078      	str	r0, [r7, #4]
    { return __it; }
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	4618      	mov	r0, r3
 8006506:	370c      	adds	r7, #12
 8006508:	46bd      	mov	sp, r7
 800650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650e:	4770      	bx	lr

08006510 <_ZSt13__copy_move_aILb0EPP8IMUFrameS2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8006510:	b5b0      	push	{r4, r5, r7, lr}
 8006512:	b084      	sub	sp, #16
 8006514:	af00      	add	r7, sp, #0
 8006516:	60f8      	str	r0, [r7, #12]
 8006518:	60b9      	str	r1, [r7, #8]
 800651a:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800651c:	68f8      	ldr	r0, [r7, #12]
 800651e:	f000 f8e5 	bl	80066ec <_ZSt12__niter_baseIPP8IMUFrameET_S3_>
 8006522:	4604      	mov	r4, r0
 8006524:	68b8      	ldr	r0, [r7, #8]
 8006526:	f000 f8e1 	bl	80066ec <_ZSt12__niter_baseIPP8IMUFrameET_S3_>
 800652a:	4605      	mov	r5, r0
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	4618      	mov	r0, r3
 8006530:	f000 f8dc 	bl	80066ec <_ZSt12__niter_baseIPP8IMUFrameET_S3_>
 8006534:	4603      	mov	r3, r0
 8006536:	461a      	mov	r2, r3
 8006538:	4629      	mov	r1, r5
 800653a:	4620      	mov	r0, r4
 800653c:	f000 f8e1 	bl	8006702 <_ZSt14__copy_move_a1ILb0EPP8IMUFrameS2_ET1_T0_S4_S3_>
 8006540:	4602      	mov	r2, r0
 8006542:	1d3b      	adds	r3, r7, #4
 8006544:	4611      	mov	r1, r2
 8006546:	4618      	mov	r0, r3
 8006548:	f000 f8eb 	bl	8006722 <_ZSt12__niter_wrapIPP8IMUFrameET_RKS3_S3_>
 800654c:	4603      	mov	r3, r0
    }
 800654e:	4618      	mov	r0, r3
 8006550:	3710      	adds	r7, #16
 8006552:	46bd      	mov	sp, r7
 8006554:	bdb0      	pop	{r4, r5, r7, pc}

08006556 <_ZSt22__copy_move_backward_aILb0EPP8IMUFrameS2_ET1_T0_S4_S3_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 8006556:	b5b0      	push	{r4, r5, r7, lr}
 8006558:	b084      	sub	sp, #16
 800655a:	af00      	add	r7, sp, #0
 800655c:	60f8      	str	r0, [r7, #12]
 800655e:	60b9      	str	r1, [r7, #8]
 8006560:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8006562:	68f8      	ldr	r0, [r7, #12]
 8006564:	f000 f8c2 	bl	80066ec <_ZSt12__niter_baseIPP8IMUFrameET_S3_>
 8006568:	4604      	mov	r4, r0
 800656a:	68b8      	ldr	r0, [r7, #8]
 800656c:	f000 f8be 	bl	80066ec <_ZSt12__niter_baseIPP8IMUFrameET_S3_>
 8006570:	4605      	mov	r5, r0
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	4618      	mov	r0, r3
 8006576:	f000 f8b9 	bl	80066ec <_ZSt12__niter_baseIPP8IMUFrameET_S3_>
 800657a:	4603      	mov	r3, r0
 800657c:	461a      	mov	r2, r3
 800657e:	4629      	mov	r1, r5
 8006580:	4620      	mov	r0, r4
 8006582:	f000 f8da 	bl	800673a <_ZSt23__copy_move_backward_a1ILb0EPP8IMUFrameS2_ET1_T0_S4_S3_>
 8006586:	4602      	mov	r2, r0
 8006588:	1d3b      	adds	r3, r7, #4
 800658a:	4611      	mov	r1, r2
 800658c:	4618      	mov	r0, r3
 800658e:	f000 f8c8 	bl	8006722 <_ZSt12__niter_wrapIPP8IMUFrameET_RKS3_S3_>
 8006592:	4603      	mov	r3, r0
    }
 8006594:	4618      	mov	r0, r3
 8006596:	3710      	adds	r7, #16
 8006598:	46bd      	mov	sp, r7
 800659a:	bdb0      	pop	{r4, r5, r7, pc}

0800659c <_ZNK9__gnu_cxx13new_allocatorI8IMUFrameE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800659c:	b480      	push	{r7}
 800659e:	b083      	sub	sp, #12
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80065a4:	4b03      	ldr	r3, [pc, #12]	; (80065b4 <_ZNK9__gnu_cxx13new_allocatorI8IMUFrameE11_M_max_sizeEv+0x18>)
      }
 80065a6:	4618      	mov	r0, r3
 80065a8:	370c      	adds	r7, #12
 80065aa:	46bd      	mov	sp, r7
 80065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b0:	4770      	bx	lr
 80065b2:	bf00      	nop
 80065b4:	05555555 	.word	0x05555555

080065b8 <_ZSt14__copy_move_a2ILb0EPP7RequestS2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b084      	sub	sp, #16
 80065bc:	af00      	add	r7, sp, #0
 80065be:	60f8      	str	r0, [r7, #12]
 80065c0:	60b9      	str	r1, [r7, #8]
 80065c2:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 80065c4:	687a      	ldr	r2, [r7, #4]
 80065c6:	68b9      	ldr	r1, [r7, #8]
 80065c8:	68f8      	ldr	r0, [r7, #12]
 80065ca:	f000 f8c6 	bl	800675a <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP7RequestEEPT_PKS5_S8_S6_>
 80065ce:	4603      	mov	r3, r0
    }
 80065d0:	4618      	mov	r0, r3
 80065d2:	3710      	adds	r7, #16
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}

080065d8 <_ZSt23__copy_move_backward_a2ILb0EPP7RequestS2_ET1_T0_S4_S3_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 80065d8:	b580      	push	{r7, lr}
 80065da:	b084      	sub	sp, #16
 80065dc:	af00      	add	r7, sp, #0
 80065de:	60f8      	str	r0, [r7, #12]
 80065e0:	60b9      	str	r1, [r7, #8]
 80065e2:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 80065e4:	687a      	ldr	r2, [r7, #4]
 80065e6:	68b9      	ldr	r1, [r7, #8]
 80065e8:	68f8      	ldr	r0, [r7, #12]
 80065ea:	f000 f8d3 	bl	8006794 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIP7RequestEEPT_PKS5_S8_S6_>
 80065ee:	4603      	mov	r3, r0
    }
 80065f0:	4618      	mov	r0, r3
 80065f2:	3710      	adds	r7, #16
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}

080065f8 <_ZSt12__niter_baseIPP8ResponceET_S3_>:
    __niter_base(_Iterator __it)
 80065f8:	b480      	push	{r7}
 80065fa:	b083      	sub	sp, #12
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
    { return __it; }
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	4618      	mov	r0, r3
 8006604:	370c      	adds	r7, #12
 8006606:	46bd      	mov	sp, r7
 8006608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660c:	4770      	bx	lr

0800660e <_ZSt14__copy_move_a1ILb0EPP8ResponceS2_ET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 800660e:	b580      	push	{r7, lr}
 8006610:	b084      	sub	sp, #16
 8006612:	af00      	add	r7, sp, #0
 8006614:	60f8      	str	r0, [r7, #12]
 8006616:	60b9      	str	r1, [r7, #8]
 8006618:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 800661a:	687a      	ldr	r2, [r7, #4]
 800661c:	68b9      	ldr	r1, [r7, #8]
 800661e:	68f8      	ldr	r0, [r7, #12]
 8006620:	f000 f8da 	bl	80067d8 <_ZSt14__copy_move_a2ILb0EPP8ResponceS2_ET1_T0_S4_S3_>
 8006624:	4603      	mov	r3, r0
 8006626:	4618      	mov	r0, r3
 8006628:	3710      	adds	r7, #16
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}

0800662e <_ZSt12__niter_wrapIPP8ResponceET_RKS3_S3_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 800662e:	b480      	push	{r7}
 8006630:	b083      	sub	sp, #12
 8006632:	af00      	add	r7, sp, #0
 8006634:	6078      	str	r0, [r7, #4]
 8006636:	6039      	str	r1, [r7, #0]
    { return __res; }
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	4618      	mov	r0, r3
 800663c:	370c      	adds	r7, #12
 800663e:	46bd      	mov	sp, r7
 8006640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006644:	4770      	bx	lr

08006646 <_ZSt23__copy_move_backward_a1ILb0EPP8ResponceS2_ET1_T0_S4_S3_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 8006646:	b580      	push	{r7, lr}
 8006648:	b084      	sub	sp, #16
 800664a:	af00      	add	r7, sp, #0
 800664c:	60f8      	str	r0, [r7, #12]
 800664e:	60b9      	str	r1, [r7, #8]
 8006650:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 8006652:	687a      	ldr	r2, [r7, #4]
 8006654:	68b9      	ldr	r1, [r7, #8]
 8006656:	68f8      	ldr	r0, [r7, #12]
 8006658:	f000 f8ce 	bl	80067f8 <_ZSt23__copy_move_backward_a2ILb0EPP8ResponceS2_ET1_T0_S4_S3_>
 800665c:	4603      	mov	r3, r0
 800665e:	4618      	mov	r0, r3
 8006660:	3710      	adds	r7, #16
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}

08006666 <_ZSt8__fill_aIPhhEvT_S1_RKT0_>:
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
 8006666:	b580      	push	{r7, lr}
 8006668:	b084      	sub	sp, #16
 800666a:	af00      	add	r7, sp, #0
 800666c:	60f8      	str	r0, [r7, #12]
 800666e:	60b9      	str	r1, [r7, #8]
 8006670:	607a      	str	r2, [r7, #4]
    { std::__fill_a1(__first, __last, __value); }
 8006672:	687a      	ldr	r2, [r7, #4]
 8006674:	68b9      	ldr	r1, [r7, #8]
 8006676:	68f8      	ldr	r0, [r7, #12]
 8006678:	f000 f8ce 	bl	8006818 <_ZSt9__fill_a1IhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_>
 800667c:	bf00      	nop
 800667e:	3710      	adds	r7, #16
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}

08006684 <_ZSt12__miter_baseIPhEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 8006684:	b580      	push	{r7, lr}
 8006686:	b082      	sub	sp, #8
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 800668c:	1d3b      	adds	r3, r7, #4
 800668e:	4618      	mov	r0, r3
 8006690:	f000 f8dc 	bl	800684c <_ZNKSt13move_iteratorIPhE4baseEv>
 8006694:	4603      	mov	r3, r0
 8006696:	4618      	mov	r0, r3
 8006698:	f7fd fd7e 	bl	8004198 <_ZSt12__miter_baseIPhET_S1_>
 800669c:	4603      	mov	r3, r0
 800669e:	4618      	mov	r0, r3
 80066a0:	3708      	adds	r7, #8
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}

080066a6 <_ZSt13__copy_move_aILb1EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80066a6:	b5b0      	push	{r4, r5, r7, lr}
 80066a8:	b084      	sub	sp, #16
 80066aa:	af00      	add	r7, sp, #0
 80066ac:	60f8      	str	r0, [r7, #12]
 80066ae:	60b9      	str	r1, [r7, #8]
 80066b0:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80066b2:	68f8      	ldr	r0, [r7, #12]
 80066b4:	f7fe fbb6 	bl	8004e24 <_ZSt12__niter_baseIPhET_S1_>
 80066b8:	4604      	mov	r4, r0
 80066ba:	68b8      	ldr	r0, [r7, #8]
 80066bc:	f7fe fbb2 	bl	8004e24 <_ZSt12__niter_baseIPhET_S1_>
 80066c0:	4605      	mov	r5, r0
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	4618      	mov	r0, r3
 80066c6:	f7fe fbad 	bl	8004e24 <_ZSt12__niter_baseIPhET_S1_>
 80066ca:	4603      	mov	r3, r0
 80066cc:	461a      	mov	r2, r3
 80066ce:	4629      	mov	r1, r5
 80066d0:	4620      	mov	r0, r4
 80066d2:	f000 f8c7 	bl	8006864 <_ZSt14__copy_move_a1ILb1EPhS0_ET1_T0_S2_S1_>
 80066d6:	4602      	mov	r2, r0
 80066d8:	1d3b      	adds	r3, r7, #4
 80066da:	4611      	mov	r1, r2
 80066dc:	4618      	mov	r0, r3
 80066de:	f7fe fbbc 	bl	8004e5a <_ZSt12__niter_wrapIPhET_RKS1_S1_>
 80066e2:	4603      	mov	r3, r0
    }
 80066e4:	4618      	mov	r0, r3
 80066e6:	3710      	adds	r7, #16
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bdb0      	pop	{r4, r5, r7, pc}

080066ec <_ZSt12__niter_baseIPP8IMUFrameET_S3_>:
    __niter_base(_Iterator __it)
 80066ec:	b480      	push	{r7}
 80066ee:	b083      	sub	sp, #12
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
    { return __it; }
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	4618      	mov	r0, r3
 80066f8:	370c      	adds	r7, #12
 80066fa:	46bd      	mov	sp, r7
 80066fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006700:	4770      	bx	lr

08006702 <_ZSt14__copy_move_a1ILb0EPP8IMUFrameS2_ET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8006702:	b580      	push	{r7, lr}
 8006704:	b084      	sub	sp, #16
 8006706:	af00      	add	r7, sp, #0
 8006708:	60f8      	str	r0, [r7, #12]
 800670a:	60b9      	str	r1, [r7, #8]
 800670c:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 800670e:	687a      	ldr	r2, [r7, #4]
 8006710:	68b9      	ldr	r1, [r7, #8]
 8006712:	68f8      	ldr	r0, [r7, #12]
 8006714:	f000 f8b6 	bl	8006884 <_ZSt14__copy_move_a2ILb0EPP8IMUFrameS2_ET1_T0_S4_S3_>
 8006718:	4603      	mov	r3, r0
 800671a:	4618      	mov	r0, r3
 800671c:	3710      	adds	r7, #16
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}

08006722 <_ZSt12__niter_wrapIPP8IMUFrameET_RKS3_S3_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8006722:	b480      	push	{r7}
 8006724:	b083      	sub	sp, #12
 8006726:	af00      	add	r7, sp, #0
 8006728:	6078      	str	r0, [r7, #4]
 800672a:	6039      	str	r1, [r7, #0]
    { return __res; }
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	4618      	mov	r0, r3
 8006730:	370c      	adds	r7, #12
 8006732:	46bd      	mov	sp, r7
 8006734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006738:	4770      	bx	lr

0800673a <_ZSt23__copy_move_backward_a1ILb0EPP8IMUFrameS2_ET1_T0_S4_S3_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 800673a:	b580      	push	{r7, lr}
 800673c:	b084      	sub	sp, #16
 800673e:	af00      	add	r7, sp, #0
 8006740:	60f8      	str	r0, [r7, #12]
 8006742:	60b9      	str	r1, [r7, #8]
 8006744:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 8006746:	687a      	ldr	r2, [r7, #4]
 8006748:	68b9      	ldr	r1, [r7, #8]
 800674a:	68f8      	ldr	r0, [r7, #12]
 800674c:	f000 f8aa 	bl	80068a4 <_ZSt23__copy_move_backward_a2ILb0EPP8IMUFrameS2_ET1_T0_S4_S3_>
 8006750:	4603      	mov	r3, r0
 8006752:	4618      	mov	r0, r3
 8006754:	3710      	adds	r7, #16
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}

0800675a <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP7RequestEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800675a:	b580      	push	{r7, lr}
 800675c:	b086      	sub	sp, #24
 800675e:	af00      	add	r7, sp, #0
 8006760:	60f8      	str	r0, [r7, #12]
 8006762:	60b9      	str	r1, [r7, #8]
 8006764:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8006766:	68ba      	ldr	r2, [r7, #8]
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	1ad3      	subs	r3, r2, r3
 800676c:	109b      	asrs	r3, r3, #2
 800676e:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d006      	beq.n	8006784 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP7RequestEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	009b      	lsls	r3, r3, #2
 800677a:	461a      	mov	r2, r3
 800677c:	68f9      	ldr	r1, [r7, #12]
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f013 fc22 	bl	8019fc8 <memmove>
	  return __result + _Num;
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	009b      	lsls	r3, r3, #2
 8006788:	687a      	ldr	r2, [r7, #4]
 800678a:	4413      	add	r3, r2
	}
 800678c:	4618      	mov	r0, r3
 800678e:	3718      	adds	r7, #24
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}

08006794 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIP7RequestEEPT_PKS5_S8_S6_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8006794:	b580      	push	{r7, lr}
 8006796:	b086      	sub	sp, #24
 8006798:	af00      	add	r7, sp, #0
 800679a:	60f8      	str	r0, [r7, #12]
 800679c:	60b9      	str	r1, [r7, #8]
 800679e:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80067a0:	68ba      	ldr	r2, [r7, #8]
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	1ad3      	subs	r3, r2, r3
 80067a6:	109b      	asrs	r3, r3, #2
 80067a8:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d00a      	beq.n	80067c6 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIP7RequestEEPT_PKS5_S8_S6_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	009b      	lsls	r3, r3, #2
 80067b4:	425b      	negs	r3, r3
 80067b6:	687a      	ldr	r2, [r7, #4]
 80067b8:	18d0      	adds	r0, r2, r3
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	009b      	lsls	r3, r3, #2
 80067be:	461a      	mov	r2, r3
 80067c0:	68f9      	ldr	r1, [r7, #12]
 80067c2:	f013 fc01 	bl	8019fc8 <memmove>
	  return __result - _Num;
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	009b      	lsls	r3, r3, #2
 80067ca:	425b      	negs	r3, r3
 80067cc:	687a      	ldr	r2, [r7, #4]
 80067ce:	4413      	add	r3, r2
	}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3718      	adds	r7, #24
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}

080067d8 <_ZSt14__copy_move_a2ILb0EPP8ResponceS2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80067d8:	b580      	push	{r7, lr}
 80067da:	b084      	sub	sp, #16
 80067dc:	af00      	add	r7, sp, #0
 80067de:	60f8      	str	r0, [r7, #12]
 80067e0:	60b9      	str	r1, [r7, #8]
 80067e2:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 80067e4:	687a      	ldr	r2, [r7, #4]
 80067e6:	68b9      	ldr	r1, [r7, #8]
 80067e8:	68f8      	ldr	r0, [r7, #12]
 80067ea:	f000 f86b 	bl	80068c4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP8ResponceEEPT_PKS5_S8_S6_>
 80067ee:	4603      	mov	r3, r0
    }
 80067f0:	4618      	mov	r0, r3
 80067f2:	3710      	adds	r7, #16
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}

080067f8 <_ZSt23__copy_move_backward_a2ILb0EPP8ResponceS2_ET1_T0_S4_S3_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b084      	sub	sp, #16
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	60f8      	str	r0, [r7, #12]
 8006800:	60b9      	str	r1, [r7, #8]
 8006802:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 8006804:	687a      	ldr	r2, [r7, #4]
 8006806:	68b9      	ldr	r1, [r7, #8]
 8006808:	68f8      	ldr	r0, [r7, #12]
 800680a:	f000 f878 	bl	80068fe <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIP8ResponceEEPT_PKS5_S8_S6_>
 800680e:	4603      	mov	r3, r0
    }
 8006810:	4618      	mov	r0, r3
 8006812:	3710      	adds	r7, #16
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}

08006818 <_ZSt9__fill_a1IhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_>:
    __fill_a1(_Tp* __first, _Tp* __last, const _Tp& __c)
 8006818:	b580      	push	{r7, lr}
 800681a:	b086      	sub	sp, #24
 800681c:	af00      	add	r7, sp, #0
 800681e:	60f8      	str	r0, [r7, #12]
 8006820:	60b9      	str	r1, [r7, #8]
 8006822:	607a      	str	r2, [r7, #4]
      const _Tp __tmp = __c;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	781b      	ldrb	r3, [r3, #0]
 8006828:	75fb      	strb	r3, [r7, #23]
      if (const size_t __len = __last - __first)
 800682a:	68ba      	ldr	r2, [r7, #8]
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	1ad3      	subs	r3, r2, r3
 8006830:	613b      	str	r3, [r7, #16]
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d005      	beq.n	8006844 <_ZSt9__fill_a1IhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_+0x2c>
	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
 8006838:	7dfb      	ldrb	r3, [r7, #23]
 800683a:	693a      	ldr	r2, [r7, #16]
 800683c:	4619      	mov	r1, r3
 800683e:	68f8      	ldr	r0, [r7, #12]
 8006840:	f013 fbdc 	bl	8019ffc <memset>
    }
 8006844:	bf00      	nop
 8006846:	3718      	adds	r7, #24
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}

0800684c <_ZNKSt13move_iteratorIPhE4baseEv>:
      base() const
 800684c:	b480      	push	{r7}
 800684e:	b083      	sub	sp, #12
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4618      	mov	r0, r3
 800685a:	370c      	adds	r7, #12
 800685c:	46bd      	mov	sp, r7
 800685e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006862:	4770      	bx	lr

08006864 <_ZSt14__copy_move_a1ILb1EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8006864:	b580      	push	{r7, lr}
 8006866:	b084      	sub	sp, #16
 8006868:	af00      	add	r7, sp, #0
 800686a:	60f8      	str	r0, [r7, #12]
 800686c:	60b9      	str	r1, [r7, #8]
 800686e:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8006870:	687a      	ldr	r2, [r7, #4]
 8006872:	68b9      	ldr	r1, [r7, #8]
 8006874:	68f8      	ldr	r0, [r7, #12]
 8006876:	f000 f864 	bl	8006942 <_ZSt14__copy_move_a2ILb1EPhS0_ET1_T0_S2_S1_>
 800687a:	4603      	mov	r3, r0
 800687c:	4618      	mov	r0, r3
 800687e:	3710      	adds	r7, #16
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}

08006884 <_ZSt14__copy_move_a2ILb0EPP8IMUFrameS2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8006884:	b580      	push	{r7, lr}
 8006886:	b084      	sub	sp, #16
 8006888:	af00      	add	r7, sp, #0
 800688a:	60f8      	str	r0, [r7, #12]
 800688c:	60b9      	str	r1, [r7, #8]
 800688e:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8006890:	687a      	ldr	r2, [r7, #4]
 8006892:	68b9      	ldr	r1, [r7, #8]
 8006894:	68f8      	ldr	r0, [r7, #12]
 8006896:	f000 f864 	bl	8006962 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP8IMUFrameEEPT_PKS5_S8_S6_>
 800689a:	4603      	mov	r3, r0
    }
 800689c:	4618      	mov	r0, r3
 800689e:	3710      	adds	r7, #16
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}

080068a4 <_ZSt23__copy_move_backward_a2ILb0EPP8IMUFrameS2_ET1_T0_S4_S3_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b084      	sub	sp, #16
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	60f8      	str	r0, [r7, #12]
 80068ac:	60b9      	str	r1, [r7, #8]
 80068ae:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 80068b0:	687a      	ldr	r2, [r7, #4]
 80068b2:	68b9      	ldr	r1, [r7, #8]
 80068b4:	68f8      	ldr	r0, [r7, #12]
 80068b6:	f000 f871 	bl	800699c <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIP8IMUFrameEEPT_PKS5_S8_S6_>
 80068ba:	4603      	mov	r3, r0
    }
 80068bc:	4618      	mov	r0, r3
 80068be:	3710      	adds	r7, #16
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}

080068c4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP8ResponceEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b086      	sub	sp, #24
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	60f8      	str	r0, [r7, #12]
 80068cc:	60b9      	str	r1, [r7, #8]
 80068ce:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80068d0:	68ba      	ldr	r2, [r7, #8]
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	1ad3      	subs	r3, r2, r3
 80068d6:	109b      	asrs	r3, r3, #2
 80068d8:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d006      	beq.n	80068ee <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP8ResponceEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	009b      	lsls	r3, r3, #2
 80068e4:	461a      	mov	r2, r3
 80068e6:	68f9      	ldr	r1, [r7, #12]
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f013 fb6d 	bl	8019fc8 <memmove>
	  return __result + _Num;
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	009b      	lsls	r3, r3, #2
 80068f2:	687a      	ldr	r2, [r7, #4]
 80068f4:	4413      	add	r3, r2
	}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3718      	adds	r7, #24
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}

080068fe <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIP8ResponceEEPT_PKS5_S8_S6_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80068fe:	b580      	push	{r7, lr}
 8006900:	b086      	sub	sp, #24
 8006902:	af00      	add	r7, sp, #0
 8006904:	60f8      	str	r0, [r7, #12]
 8006906:	60b9      	str	r1, [r7, #8]
 8006908:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800690a:	68ba      	ldr	r2, [r7, #8]
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	1ad3      	subs	r3, r2, r3
 8006910:	109b      	asrs	r3, r3, #2
 8006912:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d00a      	beq.n	8006930 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIP8ResponceEEPT_PKS5_S8_S6_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	009b      	lsls	r3, r3, #2
 800691e:	425b      	negs	r3, r3
 8006920:	687a      	ldr	r2, [r7, #4]
 8006922:	18d0      	adds	r0, r2, r3
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	009b      	lsls	r3, r3, #2
 8006928:	461a      	mov	r2, r3
 800692a:	68f9      	ldr	r1, [r7, #12]
 800692c:	f013 fb4c 	bl	8019fc8 <memmove>
	  return __result - _Num;
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	009b      	lsls	r3, r3, #2
 8006934:	425b      	negs	r3, r3
 8006936:	687a      	ldr	r2, [r7, #4]
 8006938:	4413      	add	r3, r2
	}
 800693a:	4618      	mov	r0, r3
 800693c:	3718      	adds	r7, #24
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}

08006942 <_ZSt14__copy_move_a2ILb1EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8006942:	b580      	push	{r7, lr}
 8006944:	b084      	sub	sp, #16
 8006946:	af00      	add	r7, sp, #0
 8006948:	60f8      	str	r0, [r7, #12]
 800694a:	60b9      	str	r1, [r7, #8]
 800694c:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 800694e:	687a      	ldr	r2, [r7, #4]
 8006950:	68b9      	ldr	r1, [r7, #8]
 8006952:	68f8      	ldr	r0, [r7, #12]
 8006954:	f000 f844 	bl	80069e0 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8006958:	4603      	mov	r3, r0
    }
 800695a:	4618      	mov	r0, r3
 800695c:	3710      	adds	r7, #16
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}

08006962 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP8IMUFrameEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8006962:	b580      	push	{r7, lr}
 8006964:	b086      	sub	sp, #24
 8006966:	af00      	add	r7, sp, #0
 8006968:	60f8      	str	r0, [r7, #12]
 800696a:	60b9      	str	r1, [r7, #8]
 800696c:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800696e:	68ba      	ldr	r2, [r7, #8]
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	1ad3      	subs	r3, r2, r3
 8006974:	109b      	asrs	r3, r3, #2
 8006976:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d006      	beq.n	800698c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP8IMUFrameEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	009b      	lsls	r3, r3, #2
 8006982:	461a      	mov	r2, r3
 8006984:	68f9      	ldr	r1, [r7, #12]
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f013 fb1e 	bl	8019fc8 <memmove>
	  return __result + _Num;
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	009b      	lsls	r3, r3, #2
 8006990:	687a      	ldr	r2, [r7, #4]
 8006992:	4413      	add	r3, r2
	}
 8006994:	4618      	mov	r0, r3
 8006996:	3718      	adds	r7, #24
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}

0800699c <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIP8IMUFrameEEPT_PKS5_S8_S6_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800699c:	b580      	push	{r7, lr}
 800699e:	b086      	sub	sp, #24
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	60f8      	str	r0, [r7, #12]
 80069a4:	60b9      	str	r1, [r7, #8]
 80069a6:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80069a8:	68ba      	ldr	r2, [r7, #8]
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	1ad3      	subs	r3, r2, r3
 80069ae:	109b      	asrs	r3, r3, #2
 80069b0:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d00a      	beq.n	80069ce <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIP8IMUFrameEEPT_PKS5_S8_S6_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	009b      	lsls	r3, r3, #2
 80069bc:	425b      	negs	r3, r3
 80069be:	687a      	ldr	r2, [r7, #4]
 80069c0:	18d0      	adds	r0, r2, r3
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	009b      	lsls	r3, r3, #2
 80069c6:	461a      	mov	r2, r3
 80069c8:	68f9      	ldr	r1, [r7, #12]
 80069ca:	f013 fafd 	bl	8019fc8 <memmove>
	  return __result - _Num;
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	009b      	lsls	r3, r3, #2
 80069d2:	425b      	negs	r3, r3
 80069d4:	687a      	ldr	r2, [r7, #4]
 80069d6:	4413      	add	r3, r2
	}
 80069d8:	4618      	mov	r0, r3
 80069da:	3718      	adds	r7, #24
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}

080069e0 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b086      	sub	sp, #24
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	60f8      	str	r0, [r7, #12]
 80069e8:	60b9      	str	r1, [r7, #8]
 80069ea:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80069ec:	68ba      	ldr	r2, [r7, #8]
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	1ad3      	subs	r3, r2, r3
 80069f2:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d005      	beq.n	8006a06 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_+0x26>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	461a      	mov	r2, r3
 80069fe:	68f9      	ldr	r1, [r7, #12]
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f013 fae1 	bl	8019fc8 <memmove>
	  return __result + _Num;
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	687a      	ldr	r2, [r7, #4]
 8006a0a:	4413      	add	r3, r2
	}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	3718      	adds	r7, #24
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}

08006a14 <_Z41__static_initialization_and_destruction_0ii>:
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b082      	sub	sp, #8
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	6039      	str	r1, [r7, #0]
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2b01      	cmp	r3, #1
 8006a22:	d107      	bne.n	8006a34 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d102      	bne.n	8006a34 <_Z41__static_initialization_and_destruction_0ii+0x20>
static MotherboardContext mbctx;
 8006a2e:	4809      	ldr	r0, [pc, #36]	; (8006a54 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8006a30:	f7fb f801 	bl	8001a36 <_ZN18MotherboardContextC1Ev>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d107      	bne.n	8006a4a <_Z41__static_initialization_and_destruction_0ii+0x36>
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d102      	bne.n	8006a4a <_Z41__static_initialization_and_destruction_0ii+0x36>
 8006a44:	4803      	ldr	r0, [pc, #12]	; (8006a54 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8006a46:	f7fb f813 	bl	8001a70 <_ZN18MotherboardContextD1Ev>
}
 8006a4a:	bf00      	nop
 8006a4c:	3708      	adds	r7, #8
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}
 8006a52:	bf00      	nop
 8006a54:	24000250 	.word	0x24000250

08006a58 <_GLOBAL__sub_I_MotherboardInit>:
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006a60:	2001      	movs	r0, #1
 8006a62:	f7ff ffd7 	bl	8006a14 <_Z41__static_initialization_and_destruction_0ii>
 8006a66:	bd80      	pop	{r7, pc}

08006a68 <_GLOBAL__sub_D_MotherboardInit>:
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	af00      	add	r7, sp, #0
 8006a6c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006a70:	2000      	movs	r0, #0
 8006a72:	f7ff ffcf 	bl	8006a14 <_Z41__static_initialization_and_destruction_0ii>
 8006a76:	bd80      	pop	{r7, pc}

08006a78 <bhy2_get_regs>:
static int8_t get_callback_info(uint8_t sensor_id,
                                struct bhy2_fifo_parse_callback_table *info,
                                const struct bhy2_dev *dev);

int8_t bhy2_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t length, struct bhy2_dev *dev)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b086      	sub	sp, #24
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	60b9      	str	r1, [r7, #8]
 8006a80:	607b      	str	r3, [r7, #4]
 8006a82:	4603      	mov	r3, r0
 8006a84:	73fb      	strb	r3, [r7, #15]
 8006a86:	4613      	mov	r3, r2
 8006a88:	81bb      	strh	r3, [r7, #12]
    int8_t rslt = BHY2_OK;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	75fb      	strb	r3, [r7, #23]

    if (dev != NULL)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d008      	beq.n	8006aa6 <bhy2_get_regs+0x2e>
    {
        rslt = bhy2_hif_get_regs(reg_addr, reg_data, length, &dev->hif);
 8006a94:	89ba      	ldrh	r2, [r7, #12]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	7bf8      	ldrb	r0, [r7, #15]
 8006a9a:	68b9      	ldr	r1, [r7, #8]
 8006a9c:	f001 f925 	bl	8007cea <bhy2_hif_get_regs>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	75fb      	strb	r3, [r7, #23]
 8006aa4:	e001      	b.n	8006aaa <bhy2_get_regs+0x32>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8006aa6:	23ff      	movs	r3, #255	; 0xff
 8006aa8:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8006aaa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3718      	adds	r7, #24
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}

08006ab6 <bhy2_get_and_process_fifo>:

    return rslt;
}

int8_t bhy2_get_and_process_fifo(uint8_t *work_buffer, uint32_t buffer_size, struct bhy2_dev *dev)
{
 8006ab6:	b590      	push	{r4, r7, lr}
 8006ab8:	b08f      	sub	sp, #60	; 0x3c
 8006aba:	af02      	add	r7, sp, #8
 8006abc:	60f8      	str	r0, [r7, #12]
 8006abe:	60b9      	str	r1, [r7, #8]
 8006ac0:	607a      	str	r2, [r7, #4]
    uint8_t int_status, int_status_bak;
    uint32_t bytes_read = 0;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	62bb      	str	r3, [r7, #40]	; 0x28
    int8_t rslt;
    struct bhy2_fifo_buffer fifos;

    if ((dev == NULL) || (work_buffer == NULL))
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d002      	beq.n	8006ad2 <bhy2_get_and_process_fifo+0x1c>
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d102      	bne.n	8006ad8 <bhy2_get_and_process_fifo+0x22>
    {
        return BHY2_E_NULL_PTR;
 8006ad2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006ad6:	e11b      	b.n	8006d10 <bhy2_get_and_process_fifo+0x25a>
    }

    if (buffer_size == 0)
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d102      	bne.n	8006ae4 <bhy2_get_and_process_fifo+0x2e>
    {
        return BHY2_E_BUFFER;
 8006ade:	f06f 0305 	mvn.w	r3, #5
 8006ae2:	e115      	b.n	8006d10 <bhy2_get_and_process_fifo+0x25a>
    }

    memset(work_buffer, 0, buffer_size);
 8006ae4:	68ba      	ldr	r2, [r7, #8]
 8006ae6:	2100      	movs	r1, #0
 8006ae8:	68f8      	ldr	r0, [r7, #12]
 8006aea:	f013 fa87 	bl	8019ffc <memset>
    memset(&fifos, 0, sizeof(struct bhy2_fifo_buffer));
 8006aee:	f107 0314 	add.w	r3, r7, #20
 8006af2:	2214      	movs	r2, #20
 8006af4:	2100      	movs	r1, #0
 8006af6:	4618      	mov	r0, r3
 8006af8:	f013 fa80 	bl	8019ffc <memset>

    fifos.buffer = work_buffer;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	627b      	str	r3, [r7, #36]	; 0x24
    fifos.buffer_size = buffer_size;
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	623b      	str	r3, [r7, #32]

    rslt = bhy2_hif_get_interrupt_status(&int_status_bak, &dev->hif);
 8006b04:	687a      	ldr	r2, [r7, #4]
 8006b06:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 8006b0a:	4611      	mov	r1, r2
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f001 fa5f 	bl	8007fd0 <bhy2_hif_get_interrupt_status>
 8006b12:	4603      	mov	r3, r0
 8006b14:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    if (rslt != BHY2_OK)
 8006b18:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d002      	beq.n	8006b26 <bhy2_get_and_process_fifo+0x70>
    {
        return rslt;
 8006b20:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8006b24:	e0f4      	b.n	8006d10 <bhy2_get_and_process_fifo+0x25a>
    }

    /* Get and process the Wake up FIFO */
    fifos.read_length = 0;
 8006b26:	2300      	movs	r3, #0
 8006b28:	61bb      	str	r3, [r7, #24]
    int_status = int_status_bak;
 8006b2a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006b2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 8006b32:	e042      	b.n	8006bba <bhy2_get_and_process_fifo+0x104>
    {
        if (((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_DRDY) ||
 8006b34:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006b38:	f003 0306 	and.w	r3, r3, #6
 8006b3c:	2b02      	cmp	r3, #2
 8006b3e:	d00e      	beq.n	8006b5e <bhy2_get_and_process_fifo+0xa8>
            ((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_LTCY) ||
 8006b40:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006b44:	f003 0306 	and.w	r3, r3, #6
        if (((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_DRDY) ||
 8006b48:	2b04      	cmp	r3, #4
 8006b4a:	d008      	beq.n	8006b5e <bhy2_get_and_process_fifo+0xa8>
            ((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_WM) || (fifos.remain_length))
 8006b4c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006b50:	f003 0306 	and.w	r3, r3, #6
            ((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_LTCY) ||
 8006b54:	2b06      	cmp	r3, #6
 8006b56:	d002      	beq.n	8006b5e <bhy2_get_and_process_fifo+0xa8>
            ((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_WM) || (fifos.remain_length))
 8006b58:	69fb      	ldr	r3, [r7, #28]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d020      	beq.n	8006ba0 <bhy2_get_and_process_fifo+0xea>
        {
            /* Reset read_pos to the start of the buffer */
            fifos.read_pos = 0;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	617b      	str	r3, [r7, #20]

            /* Append data into the work_buffer linked through fifos */
            rslt = bhy2_hif_get_wakeup_fifo(&fifos.buffer[fifos.read_length],
 8006b62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b64:	69bb      	ldr	r3, [r7, #24]
 8006b66:	18d0      	adds	r0, r2, r3
                                            (fifos.buffer_size - fifos.read_length),
 8006b68:	6a3a      	ldr	r2, [r7, #32]
 8006b6a:	69bb      	ldr	r3, [r7, #24]
            rslt = bhy2_hif_get_wakeup_fifo(&fifos.buffer[fifos.read_length],
 8006b6c:	1ad1      	subs	r1, r2, r3
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f107 0214 	add.w	r2, r7, #20
 8006b74:	f102 0408 	add.w	r4, r2, #8
 8006b78:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006b7c:	9300      	str	r3, [sp, #0]
 8006b7e:	4623      	mov	r3, r4
 8006b80:	f001 fad7 	bl	8008132 <bhy2_hif_get_wakeup_fifo>
 8006b84:	4603      	mov	r3, r0
 8006b86:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                                            &bytes_read,
                                            &fifos.remain_length,
                                            &dev->hif);
            if (rslt != BHY2_OK)
 8006b8a:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d002      	beq.n	8006b98 <bhy2_get_and_process_fifo+0xe2>
            {
                return rslt;
 8006b92:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8006b96:	e0bb      	b.n	8006d10 <bhy2_get_and_process_fifo+0x25a>
            }
            fifos.read_length += bytes_read;
 8006b98:	69ba      	ldr	r2, [r7, #24]
 8006b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b9c:	4413      	add	r3, r2
 8006b9e:	61bb      	str	r3, [r7, #24]
        }

        rslt = parse_fifo(BHY2_FIFO_TYPE_WAKEUP, &fifos, dev);
 8006ba0:	f107 0314 	add.w	r3, r7, #20
 8006ba4:	687a      	ldr	r2, [r7, #4]
 8006ba6:	4619      	mov	r1, r3
 8006ba8:	2000      	movs	r0, #0
 8006baa:	f000 fbad 	bl	8007308 <parse_fifo>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        int_status = 0;
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 8006bba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d102      	bne.n	8006bc8 <bhy2_get_and_process_fifo+0x112>
 8006bc2:	69fb      	ldr	r3, [r7, #28]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d003      	beq.n	8006bd0 <bhy2_get_and_process_fifo+0x11a>
 8006bc8:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d0b1      	beq.n	8006b34 <bhy2_get_and_process_fifo+0x7e>
    }

    /* Get and process the Non Wake-up FIFO */
    fifos.read_length = 0;
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	61bb      	str	r3, [r7, #24]
    int_status = int_status_bak;
 8006bd4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006bd8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 8006bdc:	e042      	b.n	8006c64 <bhy2_get_and_process_fifo+0x1ae>
    {
        if (((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_DRDY) ||
 8006bde:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006be2:	f003 0318 	and.w	r3, r3, #24
 8006be6:	2b08      	cmp	r3, #8
 8006be8:	d00e      	beq.n	8006c08 <bhy2_get_and_process_fifo+0x152>
            ((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_LTCY) ||
 8006bea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006bee:	f003 0318 	and.w	r3, r3, #24
        if (((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_DRDY) ||
 8006bf2:	2b10      	cmp	r3, #16
 8006bf4:	d008      	beq.n	8006c08 <bhy2_get_and_process_fifo+0x152>
            ((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_WM) || (fifos.remain_length))
 8006bf6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006bfa:	f003 0318 	and.w	r3, r3, #24
            ((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_LTCY) ||
 8006bfe:	2b18      	cmp	r3, #24
 8006c00:	d002      	beq.n	8006c08 <bhy2_get_and_process_fifo+0x152>
            ((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_WM) || (fifos.remain_length))
 8006c02:	69fb      	ldr	r3, [r7, #28]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d020      	beq.n	8006c4a <bhy2_get_and_process_fifo+0x194>
        {
            /* Reset read_pos to the start of the buffer */
            fifos.read_pos = 0;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	617b      	str	r3, [r7, #20]

            /* Append data into the work_buffer linked through fifos */
            rslt = bhy2_hif_get_nonwakeup_fifo(&fifos.buffer[fifos.read_length],
 8006c0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c0e:	69bb      	ldr	r3, [r7, #24]
 8006c10:	18d0      	adds	r0, r2, r3
                                               (fifos.buffer_size - fifos.read_length),
 8006c12:	6a3a      	ldr	r2, [r7, #32]
 8006c14:	69bb      	ldr	r3, [r7, #24]
            rslt = bhy2_hif_get_nonwakeup_fifo(&fifos.buffer[fifos.read_length],
 8006c16:	1ad1      	subs	r1, r2, r3
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f107 0214 	add.w	r2, r7, #20
 8006c1e:	f102 0408 	add.w	r4, r2, #8
 8006c22:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006c26:	9300      	str	r3, [sp, #0]
 8006c28:	4623      	mov	r3, r4
 8006c2a:	f001 fa98 	bl	800815e <bhy2_hif_get_nonwakeup_fifo>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                                               &bytes_read,
                                               &fifos.remain_length,
                                               &dev->hif);
            if (rslt != BHY2_OK)
 8006c34:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d002      	beq.n	8006c42 <bhy2_get_and_process_fifo+0x18c>
            {
                return rslt;
 8006c3c:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8006c40:	e066      	b.n	8006d10 <bhy2_get_and_process_fifo+0x25a>
            }
            fifos.read_length += bytes_read;
 8006c42:	69ba      	ldr	r2, [r7, #24]
 8006c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c46:	4413      	add	r3, r2
 8006c48:	61bb      	str	r3, [r7, #24]
        }

        rslt = parse_fifo(BHY2_FIFO_TYPE_NON_WAKEUP, &fifos, dev);
 8006c4a:	f107 0314 	add.w	r3, r7, #20
 8006c4e:	687a      	ldr	r2, [r7, #4]
 8006c50:	4619      	mov	r1, r3
 8006c52:	2001      	movs	r0, #1
 8006c54:	f000 fb58 	bl	8007308 <parse_fifo>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        int_status = 0;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 8006c64:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d102      	bne.n	8006c72 <bhy2_get_and_process_fifo+0x1bc>
 8006c6c:	69fb      	ldr	r3, [r7, #28]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d003      	beq.n	8006c7a <bhy2_get_and_process_fifo+0x1c4>
 8006c72:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d0b1      	beq.n	8006bde <bhy2_get_and_process_fifo+0x128>
    }

    /* Get and process the Status fifo */
    fifos.read_length = 0;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	61bb      	str	r3, [r7, #24]
    int_status = int_status_bak;
 8006c7e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006c82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 8006c86:	e036      	b.n	8006cf6 <bhy2_get_and_process_fifo+0x240>
    {
        if ((((BHY2_IS_INT_ASYNC_STATUS(int_status)) == BHY2_IST_MASK_DEBUG) || (fifos.remain_length)))
 8006c88:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d102      	bne.n	8006c9a <bhy2_get_and_process_fifo+0x1e4>
 8006c94:	69fb      	ldr	r3, [r7, #28]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d020      	beq.n	8006cdc <bhy2_get_and_process_fifo+0x226>
        {
            fifos.read_pos = 0;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	617b      	str	r3, [r7, #20]
            rslt =
                bhy2_hif_get_status_fifo_async(&fifos.buffer[fifos.read_length],
 8006c9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ca0:	69bb      	ldr	r3, [r7, #24]
 8006ca2:	18d0      	adds	r0, r2, r3
                                               (fifos.buffer_size - fifos.read_length),
 8006ca4:	6a3a      	ldr	r2, [r7, #32]
 8006ca6:	69bb      	ldr	r3, [r7, #24]
                bhy2_hif_get_status_fifo_async(&fifos.buffer[fifos.read_length],
 8006ca8:	1ad1      	subs	r1, r2, r3
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f107 0214 	add.w	r2, r7, #20
 8006cb0:	f102 0408 	add.w	r4, r2, #8
 8006cb4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006cb8:	9300      	str	r3, [sp, #0]
 8006cba:	4623      	mov	r3, r4
 8006cbc:	f001 fab0 	bl	8008220 <bhy2_hif_get_status_fifo_async>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                                               &bytes_read,
                                               &fifos.remain_length,
                                               &dev->hif);
            if (rslt != BHY2_OK)
 8006cc6:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d002      	beq.n	8006cd4 <bhy2_get_and_process_fifo+0x21e>
            {
                return rslt;
 8006cce:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8006cd2:	e01d      	b.n	8006d10 <bhy2_get_and_process_fifo+0x25a>
            }
            fifos.read_length += bytes_read;
 8006cd4:	69ba      	ldr	r2, [r7, #24]
 8006cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd8:	4413      	add	r3, r2
 8006cda:	61bb      	str	r3, [r7, #24]
        }

        rslt = parse_fifo(BHY2_FIFO_TYPE_STATUS, &fifos, dev);
 8006cdc:	f107 0314 	add.w	r3, r7, #20
 8006ce0:	687a      	ldr	r2, [r7, #4]
 8006ce2:	4619      	mov	r1, r3
 8006ce4:	2002      	movs	r0, #2
 8006ce6:	f000 fb0f 	bl	8007308 <parse_fifo>
 8006cea:	4603      	mov	r3, r0
 8006cec:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        int_status = 0;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 8006cf6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d102      	bne.n	8006d04 <bhy2_get_and_process_fifo+0x24e>
 8006cfe:	69fb      	ldr	r3, [r7, #28]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d003      	beq.n	8006d0c <bhy2_get_and_process_fifo+0x256>
 8006d04:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d0bd      	beq.n	8006c88 <bhy2_get_and_process_fifo+0x1d2>
    }

    return rslt;
 8006d0c:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3734      	adds	r7, #52	; 0x34
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd90      	pop	{r4, r7, pc}

08006d18 <bhy2_set_virt_sensor_cfg>:

    return rslt;
}

int8_t bhy2_set_virt_sensor_cfg(uint8_t sensor_id, bhy2_float sample_rate, uint32_t latency, struct bhy2_dev *dev)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b086      	sub	sp, #24
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	4603      	mov	r3, r0
 8006d20:	ed87 0a02 	vstr	s0, [r7, #8]
 8006d24:	6079      	str	r1, [r7, #4]
 8006d26:	603a      	str	r2, [r7, #0]
 8006d28:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	75fb      	strb	r3, [r7, #23]

    if (dev != NULL)
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d00a      	beq.n	8006d4a <bhy2_set_virt_sensor_cfg+0x32>
    {
        rslt = bhy2_hif_exec_sensor_conf_cmd(sensor_id, sample_rate, latency, &dev->hif);
 8006d34:	683a      	ldr	r2, [r7, #0]
 8006d36:	7bfb      	ldrb	r3, [r7, #15]
 8006d38:	6879      	ldr	r1, [r7, #4]
 8006d3a:	ed97 0a02 	vldr	s0, [r7, #8]
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f001 fa84 	bl	800824c <bhy2_hif_exec_sensor_conf_cmd>
 8006d44:	4603      	mov	r3, r0
 8006d46:	75fb      	strb	r3, [r7, #23]
 8006d48:	e001      	b.n	8006d4e <bhy2_set_virt_sensor_cfg+0x36>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8006d4a:	23ff      	movs	r3, #255	; 0xff
 8006d4c:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8006d4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3718      	adds	r7, #24
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}

08006d5a <bhy2_get_product_id>:

    return rslt;
}

int8_t bhy2_get_product_id(uint8_t *product_id, struct bhy2_dev *dev)
{
 8006d5a:	b580      	push	{r7, lr}
 8006d5c:	b084      	sub	sp, #16
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	6078      	str	r0, [r7, #4]
 8006d62:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8006d64:	2300      	movs	r3, #0
 8006d66:	73fb      	strb	r3, [r7, #15]

    if (dev != NULL)
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d007      	beq.n	8006d7e <bhy2_get_product_id+0x24>
    {
        rslt = bhy2_hif_get_product_id(product_id, &dev->hif);
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	4619      	mov	r1, r3
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f001 f8e8 	bl	8007f48 <bhy2_hif_get_product_id>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	73fb      	strb	r3, [r7, #15]
 8006d7c:	e001      	b.n	8006d82 <bhy2_get_product_id+0x28>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8006d7e:	23ff      	movs	r3, #255	; 0xff
 8006d80:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8006d82:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3710      	adds	r7, #16
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}

08006d8e <bhy2_get_kernel_version>:

    return rslt;
}

int8_t bhy2_get_kernel_version(uint16_t *kernel_version, struct bhy2_dev *dev)
{
 8006d8e:	b580      	push	{r7, lr}
 8006d90:	b084      	sub	sp, #16
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	6078      	str	r0, [r7, #4]
 8006d96:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	73fb      	strb	r3, [r7, #15]

    if (dev != NULL)
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d007      	beq.n	8006db2 <bhy2_get_kernel_version+0x24>
    {
        rslt = bhy2_hif_get_kernel_version(kernel_version, &dev->hif);
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	4619      	mov	r1, r3
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f001 f8de 	bl	8007f68 <bhy2_hif_get_kernel_version>
 8006dac:	4603      	mov	r3, r0
 8006dae:	73fb      	strb	r3, [r7, #15]
 8006db0:	e001      	b.n	8006db6 <bhy2_get_kernel_version+0x28>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8006db2:	23ff      	movs	r3, #255	; 0xff
 8006db4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8006db6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3710      	adds	r7, #16
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}

08006dc2 <bhy2_get_boot_status>:

    return rslt;
}

int8_t bhy2_get_boot_status(uint8_t *boot_status, struct bhy2_dev *dev)
{
 8006dc2:	b580      	push	{r7, lr}
 8006dc4:	b084      	sub	sp, #16
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	6078      	str	r0, [r7, #4]
 8006dca:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8006dcc:	2300      	movs	r3, #0
 8006dce:	73fb      	strb	r3, [r7, #15]

    if (dev != NULL)
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d007      	beq.n	8006de6 <bhy2_get_boot_status+0x24>
    {
        rslt = bhy2_hif_get_boot_status(boot_status, &dev->hif);
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	4619      	mov	r1, r3
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f001 f8e8 	bl	8007fb0 <bhy2_hif_get_boot_status>
 8006de0:	4603      	mov	r3, r0
 8006de2:	73fb      	strb	r3, [r7, #15]
 8006de4:	e001      	b.n	8006dea <bhy2_get_boot_status+0x28>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8006de6:	23ff      	movs	r3, #255	; 0xff
 8006de8:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8006dea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3710      	adds	r7, #16
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}

08006df6 <bhy2_get_virt_sensor_list>:

    return rslt;
}

int8_t bhy2_get_virt_sensor_list(uint8_t *sensor_list, struct bhy2_dev *dev)
{
 8006df6:	b580      	push	{r7, lr}
 8006df8:	b086      	sub	sp, #24
 8006dfa:	af02      	add	r7, sp, #8
 8006dfc:	6078      	str	r0, [r7, #4]
 8006dfe:	6039      	str	r1, [r7, #0]
    uint32_t bytes_read = 0;
 8006e00:	2300      	movs	r3, #0
 8006e02:	60bb      	str	r3, [r7, #8]
    int8_t rslt = 0;
 8006e04:	2300      	movs	r3, #0
 8006e06:	73fb      	strb	r3, [r7, #15]

    if (dev != NULL)
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d00d      	beq.n	8006e2a <bhy2_get_virt_sensor_list+0x34>
    {
        rslt = bhy2_hif_get_parameter(BHY2_PARAM_SYS_VIRT_SENSOR_PRESENT, sensor_list, 32, &bytes_read, &dev->hif);
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	f107 0208 	add.w	r2, r7, #8
 8006e14:	9300      	str	r3, [sp, #0]
 8006e16:	4613      	mov	r3, r2
 8006e18:	2220      	movs	r2, #32
 8006e1a:	6879      	ldr	r1, [r7, #4]
 8006e1c:	f240 101f 	movw	r0, #287	; 0x11f
 8006e20:	f001 f80a 	bl	8007e38 <bhy2_hif_get_parameter>
 8006e24:	4603      	mov	r3, r0
 8006e26:	73fb      	strb	r3, [r7, #15]
 8006e28:	e001      	b.n	8006e2e <bhy2_get_virt_sensor_list+0x38>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8006e2a:	23ff      	movs	r3, #255	; 0xff
 8006e2c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8006e2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	3710      	adds	r7, #16
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}

08006e3a <bhy2_upload_firmware_to_ram>:

int8_t bhy2_upload_firmware_to_ram(const uint8_t *firmware, uint32_t length, struct bhy2_dev *dev)
{
 8006e3a:	b580      	push	{r7, lr}
 8006e3c:	b086      	sub	sp, #24
 8006e3e:	af00      	add	r7, sp, #0
 8006e40:	60f8      	str	r0, [r7, #12]
 8006e42:	60b9      	str	r1, [r7, #8]
 8006e44:	607a      	str	r2, [r7, #4]
    int8_t rslt = BHY2_OK;
 8006e46:	2300      	movs	r3, #0
 8006e48:	75fb      	strb	r3, [r7, #23]

    if ((dev == NULL) || (firmware == NULL))
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d002      	beq.n	8006e56 <bhy2_upload_firmware_to_ram+0x1c>
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d102      	bne.n	8006e5c <bhy2_upload_firmware_to_ram+0x22>
    {
        rslt = BHY2_E_NULL_PTR;
 8006e56:	23ff      	movs	r3, #255	; 0xff
 8006e58:	75fb      	strb	r3, [r7, #23]
 8006e5a:	e007      	b.n	8006e6c <bhy2_upload_firmware_to_ram+0x32>
    }
    else
    {
        rslt = bhy2_hif_upload_firmware_to_ram(firmware, length, &dev->hif);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	461a      	mov	r2, r3
 8006e60:	68b9      	ldr	r1, [r7, #8]
 8006e62:	68f8      	ldr	r0, [r7, #12]
 8006e64:	f001 f90d 	bl	8008082 <bhy2_hif_upload_firmware_to_ram>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8006e6c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	3718      	adds	r7, #24
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}

08006e78 <bhy2_boot_from_ram>:

    return rslt;
}

int8_t bhy2_boot_from_ram(struct bhy2_dev *dev)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b084      	sub	sp, #16
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
    int8_t rslt = BHY2_OK;
 8006e80:	2300      	movs	r3, #0
 8006e82:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d102      	bne.n	8006e90 <bhy2_boot_from_ram+0x18>
    {
        rslt = BHY2_E_NULL_PTR;
 8006e8a:	23ff      	movs	r3, #255	; 0xff
 8006e8c:	73fb      	strb	r3, [r7, #15]
 8006e8e:	e005      	b.n	8006e9c <bhy2_boot_from_ram+0x24>
    }
    else
    {
        rslt = bhy2_hif_boot_program_ram(&dev->hif);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	4618      	mov	r0, r3
 8006e94:	f001 f932 	bl	80080fc <bhy2_hif_boot_program_ram>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8006e9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	3710      	adds	r7, #16
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}

08006ea8 <bhy2_set_host_interrupt_ctrl>:

    return rslt;
}

int8_t bhy2_set_host_interrupt_ctrl(uint8_t hintr_ctrl, struct bhy2_dev *dev)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b084      	sub	sp, #16
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	4603      	mov	r3, r0
 8006eb0:	6039      	str	r1, [r7, #0]
 8006eb2:	71fb      	strb	r3, [r7, #7]
    int8_t rslt = BHY2_OK;
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d102      	bne.n	8006ec4 <bhy2_set_host_interrupt_ctrl+0x1c>
    {
        rslt = BHY2_E_NULL_PTR;
 8006ebe:	23ff      	movs	r3, #255	; 0xff
 8006ec0:	73fb      	strb	r3, [r7, #15]
 8006ec2:	e007      	b.n	8006ed4 <bhy2_set_host_interrupt_ctrl+0x2c>
    }
    else
    {
        rslt = bhy2_hif_set_regs(BHY2_REG_HOST_INTERRUPT_CTRL, &hintr_ctrl, 1, &dev->hif);
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	1df9      	adds	r1, r7, #7
 8006ec8:	2201      	movs	r2, #1
 8006eca:	2007      	movs	r0, #7
 8006ecc:	f000 ff45 	bl	8007d5a <bhy2_hif_set_regs>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8006ed4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3710      	adds	r7, #16
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}

08006ee0 <bhy2_get_host_interrupt_ctrl>:

int8_t bhy2_get_host_interrupt_ctrl(uint8_t *hintr_ctrl, struct bhy2_dev *dev)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b084      	sub	sp, #16
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
 8006ee8:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8006eea:	2300      	movs	r3, #0
 8006eec:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d102      	bne.n	8006efa <bhy2_get_host_interrupt_ctrl+0x1a>
    {
        rslt = BHY2_E_NULL_PTR;
 8006ef4:	23ff      	movs	r3, #255	; 0xff
 8006ef6:	73fb      	strb	r3, [r7, #15]
 8006ef8:	e007      	b.n	8006f0a <bhy2_get_host_interrupt_ctrl+0x2a>
    }
    else
    {
        rslt = bhy2_hif_get_regs(BHY2_REG_HOST_INTERRUPT_CTRL, hintr_ctrl, 1, &dev->hif);
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	2201      	movs	r2, #1
 8006efe:	6879      	ldr	r1, [r7, #4]
 8006f00:	2007      	movs	r0, #7
 8006f02:	f000 fef2 	bl	8007cea <bhy2_hif_get_regs>
 8006f06:	4603      	mov	r3, r0
 8006f08:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8006f0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006f0e:	4618      	mov	r0, r3
 8006f10:	3710      	adds	r7, #16
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}

08006f16 <bhy2_get_interrupt_status>:

int8_t bhy2_get_interrupt_status(uint8_t *int_status, struct bhy2_dev *dev)
{
 8006f16:	b580      	push	{r7, lr}
 8006f18:	b084      	sub	sp, #16
 8006f1a:	af00      	add	r7, sp, #0
 8006f1c:	6078      	str	r0, [r7, #4]
 8006f1e:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8006f20:	2300      	movs	r3, #0
 8006f22:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d102      	bne.n	8006f30 <bhy2_get_interrupt_status+0x1a>
    {
        rslt = BHY2_E_NULL_PTR;
 8006f2a:	23ff      	movs	r3, #255	; 0xff
 8006f2c:	73fb      	strb	r3, [r7, #15]
 8006f2e:	e006      	b.n	8006f3e <bhy2_get_interrupt_status+0x28>
    }
    else
    {
        rslt = bhy2_hif_get_interrupt_status(int_status, &dev->hif);
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	4619      	mov	r1, r3
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f001 f84b 	bl	8007fd0 <bhy2_hif_get_interrupt_status>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8006f3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	3710      	adds	r7, #16
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}

08006f4a <bhy2_set_host_intf_ctrl>:

int8_t bhy2_set_host_intf_ctrl(uint8_t hintf_ctrl, struct bhy2_dev *dev)
{
 8006f4a:	b580      	push	{r7, lr}
 8006f4c:	b084      	sub	sp, #16
 8006f4e:	af00      	add	r7, sp, #0
 8006f50:	4603      	mov	r3, r0
 8006f52:	6039      	str	r1, [r7, #0]
 8006f54:	71fb      	strb	r3, [r7, #7]
    int8_t rslt = BHY2_OK;
 8006f56:	2300      	movs	r3, #0
 8006f58:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d102      	bne.n	8006f66 <bhy2_set_host_intf_ctrl+0x1c>
    {
        rslt = BHY2_E_NULL_PTR;
 8006f60:	23ff      	movs	r3, #255	; 0xff
 8006f62:	73fb      	strb	r3, [r7, #15]
 8006f64:	e007      	b.n	8006f76 <bhy2_set_host_intf_ctrl+0x2c>
    }
    else
    {
        rslt = bhy2_hif_set_regs(BHY2_REG_HOST_INTERFACE_CTRL, &hintf_ctrl, 1, &dev->hif);
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	1df9      	adds	r1, r7, #7
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	2006      	movs	r0, #6
 8006f6e:	f000 fef4 	bl	8007d5a <bhy2_hif_set_regs>
 8006f72:	4603      	mov	r3, r0
 8006f74:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8006f76:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3710      	adds	r7, #16
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}

08006f82 <bhy2_soft_reset>:

    return rslt;
}

int8_t bhy2_soft_reset(struct bhy2_dev *dev)
{
 8006f82:	b580      	push	{r7, lr}
 8006f84:	b084      	sub	sp, #16
 8006f86:	af00      	add	r7, sp, #0
 8006f88:	6078      	str	r0, [r7, #4]
    int8_t rslt = BHY2_OK;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d102      	bne.n	8006f9a <bhy2_soft_reset+0x18>
    {
        rslt = BHY2_E_NULL_PTR;
 8006f94:	23ff      	movs	r3, #255	; 0xff
 8006f96:	73fb      	strb	r3, [r7, #15]
 8006f98:	e005      	b.n	8006fa6 <bhy2_soft_reset+0x24>
    }
    else
    {
        rslt = bhy2_hif_reset(&dev->hif);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f001 f827 	bl	8007ff0 <bhy2_hif_reset>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8006fa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	3710      	adds	r7, #16
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}

08006fb2 <bhy2_init>:
                 bhy2_write_fptr_t write,
                 bhy2_delay_us_fptr_t delay_us,
                 uint32_t read_write_len,
                 void *intf_ptr,
                 struct bhy2_dev *dev)
{
 8006fb2:	b580      	push	{r7, lr}
 8006fb4:	b08a      	sub	sp, #40	; 0x28
 8006fb6:	af04      	add	r7, sp, #16
 8006fb8:	60b9      	str	r1, [r7, #8]
 8006fba:	607a      	str	r2, [r7, #4]
 8006fbc:	603b      	str	r3, [r7, #0]
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	75fb      	strb	r3, [r7, #23]

    if (dev != NULL)
 8006fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d014      	beq.n	8006ff6 <bhy2_init+0x44>
    {
        memset(dev, 0, sizeof(struct bhy2_dev));
 8006fcc:	f640 1238 	movw	r2, #2360	; 0x938
 8006fd0:	2100      	movs	r1, #0
 8006fd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006fd4:	f013 f812 	bl	8019ffc <memset>

        rslt = bhy2_hif_init(intf, read, write, delay_us, read_write_len, intf_ptr, &dev->hif);
 8006fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fda:	7bf8      	ldrb	r0, [r7, #15]
 8006fdc:	9302      	str	r3, [sp, #8]
 8006fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe0:	9301      	str	r3, [sp, #4]
 8006fe2:	6a3b      	ldr	r3, [r7, #32]
 8006fe4:	9300      	str	r3, [sp, #0]
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	687a      	ldr	r2, [r7, #4]
 8006fea:	68b9      	ldr	r1, [r7, #8]
 8006fec:	f000 fe3e 	bl	8007c6c <bhy2_hif_init>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	75fb      	strb	r3, [r7, #23]
 8006ff4:	e001      	b.n	8006ffa <bhy2_init+0x48>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8006ff6:	23ff      	movs	r3, #255	; 0xff
 8006ff8:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8006ffa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3718      	adds	r7, #24
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}

08007006 <bhy2_register_fifo_parse_callback>:

int8_t bhy2_register_fifo_parse_callback(uint8_t sensor_id,
                                         bhy2_fifo_parse_callback_t callback,
                                         void *callback_ref,
                                         struct bhy2_dev *dev)
{
 8007006:	b480      	push	{r7}
 8007008:	b087      	sub	sp, #28
 800700a:	af00      	add	r7, sp, #0
 800700c:	60b9      	str	r1, [r7, #8]
 800700e:	607a      	str	r2, [r7, #4]
 8007010:	603b      	str	r3, [r7, #0]
 8007012:	4603      	mov	r3, r0
 8007014:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8007016:	2300      	movs	r3, #0
 8007018:	75fb      	strb	r3, [r7, #23]

    if ((dev == NULL) || (callback == NULL))
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d002      	beq.n	8007026 <bhy2_register_fifo_parse_callback+0x20>
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d102      	bne.n	800702c <bhy2_register_fifo_parse_callback+0x26>
    {
        rslt = BHY2_E_NULL_PTR;
 8007026:	23ff      	movs	r3, #255	; 0xff
 8007028:	75fb      	strb	r3, [r7, #23]
 800702a:	e013      	b.n	8007054 <bhy2_register_fifo_parse_callback+0x4e>
    }
    else
    {
        dev->table[sensor_id].callback = callback;
 800702c:	7bfa      	ldrb	r2, [r7, #15]
 800702e:	6839      	ldr	r1, [r7, #0]
 8007030:	4613      	mov	r3, r2
 8007032:	00db      	lsls	r3, r3, #3
 8007034:	4413      	add	r3, r2
 8007036:	440b      	add	r3, r1
 8007038:	3318      	adds	r3, #24
 800703a:	68ba      	ldr	r2, [r7, #8]
 800703c:	f8c3 2005 	str.w	r2, [r3, #5]
        dev->table[sensor_id].callback_ref = callback_ref;
 8007040:	7bfa      	ldrb	r2, [r7, #15]
 8007042:	6839      	ldr	r1, [r7, #0]
 8007044:	4613      	mov	r3, r2
 8007046:	00db      	lsls	r3, r3, #3
 8007048:	4413      	add	r3, r2
 800704a:	440b      	add	r3, r1
 800704c:	3318      	adds	r3, #24
 800704e:	687a      	ldr	r2, [r7, #4]
 8007050:	f8c3 2009 	str.w	r2, [r3, #9]
    }

    return rslt;
 8007054:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007058:	4618      	mov	r0, r3
 800705a:	371c      	adds	r7, #28
 800705c:	46bd      	mov	sp, r7
 800705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007062:	4770      	bx	lr

08007064 <bhy2_update_virtual_sensor_list>:

int8_t bhy2_update_virtual_sensor_list(struct bhy2_dev *dev)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b092      	sub	sp, #72	; 0x48
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
    struct bhy2_sensor_info info;
    uint8_t present_buff[32];
    uint8_t sensor_index;
    uint8_t bit_mask;

    if (dev == NULL)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d103      	bne.n	800707a <bhy2_update_virtual_sensor_list+0x16>
    {
        rslt = BHY2_E_NULL_PTR;
 8007072:	23ff      	movs	r3, #255	; 0xff
 8007074:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007078:	e079      	b.n	800716e <bhy2_update_virtual_sensor_list+0x10a>
    }
    else
    {
        /* Each bit corresponds to presence of Virtual sensor */
        rslt = bhy2_get_virt_sensor_list(present_buff, dev);
 800707a:	f107 0308 	add.w	r3, r7, #8
 800707e:	6879      	ldr	r1, [r7, #4]
 8007080:	4618      	mov	r0, r3
 8007082:	f7ff feb8 	bl	8006df6 <bhy2_get_virt_sensor_list>
 8007086:	4603      	mov	r3, r0
 8007088:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if (rslt == BHY2_OK)
 800708c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8007090:	2b00      	cmp	r3, #0
 8007092:	d16c      	bne.n	800716e <bhy2_update_virtual_sensor_list+0x10a>
        {
            /* Padding: Sensor id*/
            dev->table[0].event_size = 1;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2201      	movs	r2, #1
 8007098:	771a      	strb	r2, [r3, #28]

            for (sensor_id = 1; (sensor_id < BHY2_SPECIAL_SENSOR_ID_OFFSET) && (rslt == BHY2_OK); sensor_id++)
 800709a:	2301      	movs	r3, #1
 800709c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80070a0:	e041      	b.n	8007126 <bhy2_update_virtual_sensor_list+0xc2>
            {
                sensor_index = (uint8_t)(sensor_id / 8);
 80070a2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80070a6:	08db      	lsrs	r3, r3, #3
 80070a8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
                bit_mask = (uint8_t)(0x01 << (sensor_id % 8));
 80070ac:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80070b0:	f003 0307 	and.w	r3, r3, #7
 80070b4:	2201      	movs	r2, #1
 80070b6:	fa02 f303 	lsl.w	r3, r2, r3
 80070ba:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

                if (present_buff[sensor_index] & bit_mask)
 80070be:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80070c2:	3348      	adds	r3, #72	; 0x48
 80070c4:	443b      	add	r3, r7
 80070c6:	f813 2c40 	ldrb.w	r2, [r3, #-64]
 80070ca:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80070ce:	4013      	ands	r3, r2
 80070d0:	b2db      	uxtb	r3, r3
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d022      	beq.n	800711c <bhy2_update_virtual_sensor_list+0xb8>
                {
                    rslt = bhy2_hif_get_sensor_info(sensor_id, &info, &dev->hif);
 80070d6:	687a      	ldr	r2, [r7, #4]
 80070d8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80070dc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80070e0:	4618      	mov	r0, r3
 80070e2:	f001 f8e6 	bl	80082b2 <bhy2_hif_get_sensor_info>
 80070e6:	4603      	mov	r3, r0
 80070e8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                    if (rslt == BHY2_OK)
 80070ec:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d113      	bne.n	800711c <bhy2_update_virtual_sensor_list+0xb8>
                    {
                        if (info.event_size == 0)
 80070f4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d103      	bne.n	8007104 <bhy2_update_virtual_sensor_list+0xa0>
                        {
                            rslt = BHY2_E_INVALID_EVENT_SIZE;
 80070fc:	23f8      	movs	r3, #248	; 0xf8
 80070fe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                            break;
 8007102:	e018      	b.n	8007136 <bhy2_update_virtual_sensor_list+0xd2>
                        }
                        else
                        {
                            dev->table[sensor_id].event_size = info.event_size;
 8007104:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8007108:	f897 003c 	ldrb.w	r0, [r7, #60]	; 0x3c
 800710c:	6879      	ldr	r1, [r7, #4]
 800710e:	4613      	mov	r3, r2
 8007110:	00db      	lsls	r3, r3, #3
 8007112:	4413      	add	r3, r2
 8007114:	440b      	add	r3, r1
 8007116:	331c      	adds	r3, #28
 8007118:	4602      	mov	r2, r0
 800711a:	701a      	strb	r2, [r3, #0]
            for (sensor_id = 1; (sensor_id < BHY2_SPECIAL_SENSOR_ID_OFFSET) && (rslt == BHY2_OK); sensor_id++)
 800711c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007120:	3301      	adds	r3, #1
 8007122:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8007126:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800712a:	2bf4      	cmp	r3, #244	; 0xf4
 800712c:	d803      	bhi.n	8007136 <bhy2_update_virtual_sensor_list+0xd2>
 800712e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8007132:	2b00      	cmp	r3, #0
 8007134:	d0b5      	beq.n	80070a2 <bhy2_update_virtual_sensor_list+0x3e>
                        }
                    }
                }
            }

            for (sensor_id = BHY2_N_VIRTUAL_SENSOR_MAX - 1; sensor_id >= BHY2_SPECIAL_SENSOR_ID_OFFSET; sensor_id--)
 8007136:	23ff      	movs	r3, #255	; 0xff
 8007138:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 800713c:	e013      	b.n	8007166 <bhy2_update_virtual_sensor_list+0x102>
            {
                dev->table[sensor_id].event_size = bhy2_sysid_event_size[sensor_id - BHY2_SPECIAL_SENSOR_ID_OFFSET];
 800713e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007142:	3bf5      	subs	r3, #245	; 0xf5
 8007144:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8007148:	490c      	ldr	r1, [pc, #48]	; (800717c <bhy2_update_virtual_sensor_list+0x118>)
 800714a:	5cc8      	ldrb	r0, [r1, r3]
 800714c:	6879      	ldr	r1, [r7, #4]
 800714e:	4613      	mov	r3, r2
 8007150:	00db      	lsls	r3, r3, #3
 8007152:	4413      	add	r3, r2
 8007154:	440b      	add	r3, r1
 8007156:	331c      	adds	r3, #28
 8007158:	4602      	mov	r2, r0
 800715a:	701a      	strb	r2, [r3, #0]
            for (sensor_id = BHY2_N_VIRTUAL_SENSOR_MAX - 1; sensor_id >= BHY2_SPECIAL_SENSOR_ID_OFFSET; sensor_id--)
 800715c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007160:	3b01      	subs	r3, #1
 8007162:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8007166:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800716a:	2bf4      	cmp	r3, #244	; 0xf4
 800716c:	d8e7      	bhi.n	800713e <bhy2_update_virtual_sensor_list+0xda>
            }
        }
    }

    return rslt;
 800716e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8007172:	4618      	mov	r0, r3
 8007174:	3748      	adds	r7, #72	; 0x48
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}
 800717a:	bf00      	nop
 800717c:	08035980 	.word	0x08035980

08007180 <bhy2_get_error_value>:

    return rslt;
}

int8_t bhy2_get_error_value(uint8_t *error_value, struct bhy2_dev *dev)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b084      	sub	sp, #16
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
 8007188:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 800718a:	2300      	movs	r3, #0
 800718c:	73fb      	strb	r3, [r7, #15]

    if ((dev == NULL) || (error_value == NULL))
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d002      	beq.n	800719a <bhy2_get_error_value+0x1a>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d102      	bne.n	80071a0 <bhy2_get_error_value+0x20>
    {
        rslt = BHY2_E_NULL_PTR;
 800719a:	23ff      	movs	r3, #255	; 0xff
 800719c:	73fb      	strb	r3, [r7, #15]
 800719e:	e007      	b.n	80071b0 <bhy2_get_error_value+0x30>
    }
    else
    {
        rslt = bhy2_get_regs(BHY2_REG_ERROR_VALUE, error_value, 1, dev);
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	2201      	movs	r2, #1
 80071a4:	6879      	ldr	r1, [r7, #4]
 80071a6:	202e      	movs	r0, #46	; 0x2e
 80071a8:	f7ff fc66 	bl	8006a78 <bhy2_get_regs>
 80071ac:	4603      	mov	r3, r0
 80071ae:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80071b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	3710      	adds	r7, #16
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}

080071bc <get_callback_info>:
}

static int8_t get_callback_info(uint8_t sensor_id,
                                struct bhy2_fifo_parse_callback_table *info,
                                const struct bhy2_dev *dev)
{
 80071bc:	b480      	push	{r7}
 80071be:	b087      	sub	sp, #28
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	4603      	mov	r3, r0
 80071c4:	60b9      	str	r1, [r7, #8]
 80071c6:	607a      	str	r2, [r7, #4]
 80071c8:	73fb      	strb	r3, [r7, #15]

    int8_t rslt = BHY2_OK;
 80071ca:	2300      	movs	r3, #0
 80071cc:	75fb      	strb	r3, [r7, #23]

    if ((dev != NULL) && (info != NULL))
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d04e      	beq.n	8007272 <get_callback_info+0xb6>
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d04b      	beq.n	8007272 <get_callback_info+0xb6>
    {
        *info = dev->table[sensor_id];
 80071da:	7bfa      	ldrb	r2, [r7, #15]
 80071dc:	68b8      	ldr	r0, [r7, #8]
 80071de:	6879      	ldr	r1, [r7, #4]
 80071e0:	4613      	mov	r3, r2
 80071e2:	00db      	lsls	r3, r3, #3
 80071e4:	4413      	add	r3, r2
 80071e6:	440b      	add	r3, r1
 80071e8:	3318      	adds	r3, #24
 80071ea:	4602      	mov	r2, r0
 80071ec:	3304      	adds	r3, #4
 80071ee:	6818      	ldr	r0, [r3, #0]
 80071f0:	6859      	ldr	r1, [r3, #4]
 80071f2:	6010      	str	r0, [r2, #0]
 80071f4:	6051      	str	r1, [r2, #4]
 80071f6:	7a1b      	ldrb	r3, [r3, #8]
 80071f8:	7213      	strb	r3, [r2, #8]
        if ((sensor_id >= BHY2_SPECIAL_SENSOR_ID_OFFSET) && (info->event_size == 0))
 80071fa:	7bfb      	ldrb	r3, [r7, #15]
 80071fc:	2bf4      	cmp	r3, #244	; 0xf4
 80071fe:	d91b      	bls.n	8007238 <get_callback_info+0x7c>
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	781b      	ldrb	r3, [r3, #0]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d117      	bne.n	8007238 <get_callback_info+0x7c>
        {
            info->callback = NULL;
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	2200      	movs	r2, #0
 800720c:	705a      	strb	r2, [r3, #1]
 800720e:	2200      	movs	r2, #0
 8007210:	709a      	strb	r2, [r3, #2]
 8007212:	2200      	movs	r2, #0
 8007214:	70da      	strb	r2, [r3, #3]
 8007216:	2200      	movs	r2, #0
 8007218:	711a      	strb	r2, [r3, #4]
            info->callback_ref = NULL;
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	2200      	movs	r2, #0
 800721e:	715a      	strb	r2, [r3, #5]
 8007220:	2200      	movs	r2, #0
 8007222:	719a      	strb	r2, [r3, #6]
 8007224:	2200      	movs	r2, #0
 8007226:	71da      	strb	r2, [r3, #7]
 8007228:	2200      	movs	r2, #0
 800722a:	721a      	strb	r2, [r3, #8]
            info->event_size = bhy2_sysid_event_size[sensor_id - BHY2_SPECIAL_SENSOR_ID_OFFSET];
 800722c:	7bfb      	ldrb	r3, [r7, #15]
 800722e:	3bf5      	subs	r3, #245	; 0xf5
 8007230:	4a16      	ldr	r2, [pc, #88]	; (800728c <get_callback_info+0xd0>)
 8007232:	5cd2      	ldrb	r2, [r2, r3]
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	701a      	strb	r2, [r3, #0]
        }
        if ((sensor_id == 0) && (info->event_size == 0))
 8007238:	7bfb      	ldrb	r3, [r7, #15]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d11c      	bne.n	8007278 <get_callback_info+0xbc>
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	781b      	ldrb	r3, [r3, #0]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d118      	bne.n	8007278 <get_callback_info+0xbc>
        {
            info->callback = NULL;
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	2200      	movs	r2, #0
 800724a:	705a      	strb	r2, [r3, #1]
 800724c:	2200      	movs	r2, #0
 800724e:	709a      	strb	r2, [r3, #2]
 8007250:	2200      	movs	r2, #0
 8007252:	70da      	strb	r2, [r3, #3]
 8007254:	2200      	movs	r2, #0
 8007256:	711a      	strb	r2, [r3, #4]
            info->callback_ref = NULL;
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	2200      	movs	r2, #0
 800725c:	715a      	strb	r2, [r3, #5]
 800725e:	2200      	movs	r2, #0
 8007260:	719a      	strb	r2, [r3, #6]
 8007262:	2200      	movs	r2, #0
 8007264:	71da      	strb	r2, [r3, #7]
 8007266:	2200      	movs	r2, #0
 8007268:	721a      	strb	r2, [r3, #8]
            info->event_size = 1;
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	2201      	movs	r2, #1
 800726e:	701a      	strb	r2, [r3, #0]
        if ((sensor_id == 0) && (info->event_size == 0))
 8007270:	e002      	b.n	8007278 <get_callback_info+0xbc>
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8007272:	23ff      	movs	r3, #255	; 0xff
 8007274:	75fb      	strb	r3, [r7, #23]
 8007276:	e000      	b.n	800727a <get_callback_info+0xbe>
        if ((sensor_id == 0) && (info->event_size == 0))
 8007278:	bf00      	nop
    }

    return rslt;
 800727a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800727e:	4618      	mov	r0, r3
 8007280:	371c      	adds	r7, #28
 8007282:	46bd      	mov	sp, r7
 8007284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007288:	4770      	bx	lr
 800728a:	bf00      	nop
 800728c:	08035980 	.word	0x08035980

08007290 <get_buffer_status>:

static int8_t get_buffer_status(const struct bhy2_fifo_buffer *fifo_p, uint8_t event_size, buffer_status_t *status)
{
 8007290:	b480      	push	{r7}
 8007292:	b085      	sub	sp, #20
 8007294:	af00      	add	r7, sp, #0
 8007296:	60f8      	str	r0, [r7, #12]
 8007298:	460b      	mov	r3, r1
 800729a:	607a      	str	r2, [r7, #4]
 800729c:	72fb      	strb	r3, [r7, #11]
    if ((fifo_p->read_pos + event_size) <= fifo_p->read_length)
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681a      	ldr	r2, [r3, #0]
 80072a2:	7afb      	ldrb	r3, [r7, #11]
 80072a4:	441a      	add	r2, r3
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	685b      	ldr	r3, [r3, #4]
 80072aa:	429a      	cmp	r2, r3
 80072ac:	d803      	bhi.n	80072b6 <get_buffer_status+0x26>
    {
        *status = BHY2_BUFFER_STATUS_OK;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2200      	movs	r2, #0
 80072b2:	701a      	strb	r2, [r3, #0]
 80072b4:	e002      	b.n	80072bc <get_buffer_status+0x2c>
    }
    else
    {
        *status = BHY2_BUFFER_STATUS_RELOAD;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2201      	movs	r2, #1
 80072ba:	701a      	strb	r2, [r3, #0]
    }

    return BHY2_OK;
 80072bc:	2300      	movs	r3, #0
}
 80072be:	4618      	mov	r0, r3
 80072c0:	3714      	adds	r7, #20
 80072c2:	46bd      	mov	sp, r7
 80072c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c8:	4770      	bx	lr

080072ca <get_time_stamp>:

static int8_t get_time_stamp(enum bhy2_fifo_type source, uint64_t **time_stamp, struct bhy2_dev *dev)
{
 80072ca:	b480      	push	{r7}
 80072cc:	b087      	sub	sp, #28
 80072ce:	af00      	add	r7, sp, #0
 80072d0:	4603      	mov	r3, r0
 80072d2:	60b9      	str	r1, [r7, #8]
 80072d4:	607a      	str	r2, [r7, #4]
 80072d6:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 80072d8:	2300      	movs	r3, #0
 80072da:	75fb      	strb	r3, [r7, #23]

    if (source < BHY2_FIFO_TYPE_MAX)
 80072dc:	7bfb      	ldrb	r3, [r7, #15]
 80072de:	2b02      	cmp	r3, #2
 80072e0:	d808      	bhi.n	80072f4 <get_time_stamp+0x2a>
    {
        *time_stamp = &dev->last_time_stamp[source];
 80072e2:	7bfb      	ldrb	r3, [r7, #15]
 80072e4:	f503 7392 	add.w	r3, r3, #292	; 0x124
 80072e8:	00db      	lsls	r3, r3, #3
 80072ea:	687a      	ldr	r2, [r7, #4]
 80072ec:	441a      	add	r2, r3
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	601a      	str	r2, [r3, #0]
 80072f2:	e001      	b.n	80072f8 <get_time_stamp+0x2e>
    }
    else
    {
        rslt = BHY2_E_INVALID_FIFO_TYPE;
 80072f4:	23f9      	movs	r3, #249	; 0xf9
 80072f6:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80072f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	371c      	adds	r7, #28
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr

08007308 <parse_fifo>:

static int8_t parse_fifo(enum bhy2_fifo_type source, struct bhy2_fifo_buffer *fifo_p, struct bhy2_dev *dev)
{
 8007308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800730c:	b099      	sub	sp, #100	; 0x64
 800730e:	af00      	add	r7, sp, #0
 8007310:	4603      	mov	r3, r0
 8007312:	62b9      	str	r1, [r7, #40]	; 0x28
 8007314:	627a      	str	r2, [r7, #36]	; 0x24
 8007316:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    uint8_t tmp_sensor_id = 0;
 800731a:	2300      	movs	r3, #0
 800731c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    int8_t rslt = BHY2_OK;
 8007320:	2300      	movs	r3, #0
 8007322:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    uint16_t i = 0;
 8007326:	2300      	movs	r3, #0
 8007328:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    uint32_t tmp_read_pos;
    struct bhy2_fifo_parse_data_info data_info;
    uint64_t *time_stamp;
    struct bhy2_fifo_parse_callback_table info;
    buffer_status_t status = BHY2_BUFFER_STATUS_OK;
 800732c:	2300      	movs	r3, #0
 800732e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    for (; (fifo_p->read_pos < fifo_p->read_length) && (status == BHY2_BUFFER_STATUS_OK);)
 8007332:	e16a      	b.n	800760a <parse_fifo+0x302>
    {
        tmp_read_pos = fifo_p->read_pos;
 8007334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	657b      	str	r3, [r7, #84]	; 0x54
        tmp_sensor_id = fifo_p->buffer[tmp_read_pos];
 800733a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800733c:	691a      	ldr	r2, [r3, #16]
 800733e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007340:	4413      	add	r3, r2
 8007342:	781b      	ldrb	r3, [r3, #0]
 8007344:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

        rslt = get_time_stamp(source, &time_stamp, dev);
 8007348:	f107 0144 	add.w	r1, r7, #68	; 0x44
 800734c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007350:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007352:	4618      	mov	r0, r3
 8007354:	f7ff ffb9 	bl	80072ca <get_time_stamp>
 8007358:	4603      	mov	r3, r0
 800735a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        if (rslt != BHY2_OK)
 800735e:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8007362:	2b00      	cmp	r3, #0
 8007364:	d002      	beq.n	800736c <parse_fifo+0x64>
        {
            return rslt;
 8007366:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 800736a:	e191      	b.n	8007690 <parse_fifo+0x388>
        }
        switch (tmp_sensor_id)
 800736c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8007370:	2b00      	cmp	r3, #0
 8007372:	d025      	beq.n	80073c0 <parse_fifo+0xb8>
 8007374:	2b00      	cmp	r3, #0
 8007376:	f2c0 80f6 	blt.w	8007566 <parse_fifo+0x25e>
 800737a:	2bff      	cmp	r3, #255	; 0xff
 800737c:	f300 80f3 	bgt.w	8007566 <parse_fifo+0x25e>
 8007380:	2bf5      	cmp	r3, #245	; 0xf5
 8007382:	f2c0 80f0 	blt.w	8007566 <parse_fifo+0x25e>
 8007386:	3bf5      	subs	r3, #245	; 0xf5
 8007388:	2b0a      	cmp	r3, #10
 800738a:	f200 80ec 	bhi.w	8007566 <parse_fifo+0x25e>
 800738e:	a201      	add	r2, pc, #4	; (adr r2, 8007394 <parse_fifo+0x8c>)
 8007390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007394:	080073cd 	.word	0x080073cd
 8007398:	08007435 	.word	0x08007435
 800739c:	080074b3 	.word	0x080074b3
 80073a0:	08007567 	.word	0x08007567
 80073a4:	08007567 	.word	0x08007567
 80073a8:	08007567 	.word	0x08007567
 80073ac:	080073cd 	.word	0x080073cd
 80073b0:	08007435 	.word	0x08007435
 80073b4:	080074b3 	.word	0x080074b3
 80073b8:	08007567 	.word	0x08007567
 80073bc:	080073c1 	.word	0x080073c1
        {
            case BHY2_SYS_ID_FILLER:
            case BHY2_SYS_ID_PADDING:
                fifo_p->read_pos += 1;
 80073c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	1c5a      	adds	r2, r3, #1
 80073c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073c8:	601a      	str	r2, [r3, #0]
                break;
 80073ca:	e11e      	b.n	800760a <parse_fifo+0x302>
            case BHY2_SYS_ID_TS_SMALL_DELTA_WU:
            case BHY2_SYS_ID_TS_SMALL_DELTA:
                rslt = get_buffer_status(fifo_p, 2, &status);
 80073cc:	f107 0337 	add.w	r3, r7, #55	; 0x37
 80073d0:	461a      	mov	r2, r3
 80073d2:	2102      	movs	r1, #2
 80073d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80073d6:	f7ff ff5b 	bl	8007290 <get_buffer_status>
 80073da:	4603      	mov	r3, r0
 80073dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                if (rslt != BHY2_OK)
 80073e0:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d002      	beq.n	80073ee <parse_fifo+0xe6>
                {
                    return rslt;
 80073e8:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80073ec:	e150      	b.n	8007690 <parse_fifo+0x388>
                }
                if (status != BHY2_BUFFER_STATUS_OK)
 80073ee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d000      	beq.n	80073f8 <parse_fifo+0xf0>
                {
                    break;
 80073f6:	e108      	b.n	800760a <parse_fifo+0x302>
                }
                *time_stamp += fifo_p->buffer[tmp_read_pos + 1];
 80073f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80073fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007400:	691a      	ldr	r2, [r3, #16]
 8007402:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007404:	3301      	adds	r3, #1
 8007406:	4413      	add	r3, r2
 8007408:	781b      	ldrb	r3, [r3, #0]
 800740a:	b2db      	uxtb	r3, r3
 800740c:	2200      	movs	r2, #0
 800740e:	469a      	mov	sl, r3
 8007410:	4693      	mov	fp, r2
 8007412:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007414:	eb10 020a 	adds.w	r2, r0, sl
 8007418:	61ba      	str	r2, [r7, #24]
 800741a:	eb41 020b 	adc.w	r2, r1, fp
 800741e:	61fa      	str	r2, [r7, #28]
 8007420:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007424:	e9c3 1200 	strd	r1, r2, [r3]
                fifo_p->read_pos += 2;
 8007428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	1c9a      	adds	r2, r3, #2
 800742e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007430:	601a      	str	r2, [r3, #0]
                break;
 8007432:	e0ea      	b.n	800760a <parse_fifo+0x302>
            case BHY2_SYS_ID_TS_LARGE_DELTA:
            case BHY2_SYS_ID_TS_LARGE_DELTA_WU:
                rslt = get_buffer_status(fifo_p, 3, &status);
 8007434:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8007438:	461a      	mov	r2, r3
 800743a:	2103      	movs	r1, #3
 800743c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800743e:	f7ff ff27 	bl	8007290 <get_buffer_status>
 8007442:	4603      	mov	r3, r0
 8007444:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                if (rslt != BHY2_OK)
 8007448:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 800744c:	2b00      	cmp	r3, #0
 800744e:	d002      	beq.n	8007456 <parse_fifo+0x14e>
                {
                    return rslt;
 8007450:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8007454:	e11c      	b.n	8007690 <parse_fifo+0x388>
                }
                if (status != BHY2_BUFFER_STATUS_OK)
 8007456:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800745a:	2b00      	cmp	r3, #0
 800745c:	d000      	beq.n	8007460 <parse_fifo+0x158>
                {
                    break;
 800745e:	e0d4      	b.n	800760a <parse_fifo+0x302>
                }
                *time_stamp += BHY2_LE2U16(fifo_p->buffer + tmp_read_pos + 1);
 8007460:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007462:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007468:	691a      	ldr	r2, [r3, #16]
 800746a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800746c:	3301      	adds	r3, #1
 800746e:	4413      	add	r3, r2
 8007470:	781b      	ldrb	r3, [r3, #0]
 8007472:	b21c      	sxth	r4, r3
 8007474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007476:	691a      	ldr	r2, [r3, #16]
 8007478:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800747a:	3302      	adds	r3, #2
 800747c:	4413      	add	r3, r2
 800747e:	781b      	ldrb	r3, [r3, #0]
 8007480:	021b      	lsls	r3, r3, #8
 8007482:	b21b      	sxth	r3, r3
 8007484:	4323      	orrs	r3, r4
 8007486:	b21b      	sxth	r3, r3
 8007488:	b29b      	uxth	r3, r3
 800748a:	b29b      	uxth	r3, r3
 800748c:	2200      	movs	r2, #0
 800748e:	461d      	mov	r5, r3
 8007490:	4616      	mov	r6, r2
 8007492:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007494:	1942      	adds	r2, r0, r5
 8007496:	613a      	str	r2, [r7, #16]
 8007498:	eb41 0206 	adc.w	r2, r1, r6
 800749c:	617a      	str	r2, [r7, #20]
 800749e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80074a2:	e9c3 1200 	strd	r1, r2, [r3]
                fifo_p->read_pos += 3;
 80074a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	1cda      	adds	r2, r3, #3
 80074ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ae:	601a      	str	r2, [r3, #0]
                break;
 80074b0:	e0ab      	b.n	800760a <parse_fifo+0x302>
            case BHY2_SYS_ID_TS_FULL:
            case BHY2_SYS_ID_TS_FULL_WU:
                rslt = get_buffer_status(fifo_p, 6, &status);
 80074b2:	f107 0337 	add.w	r3, r7, #55	; 0x37
 80074b6:	461a      	mov	r2, r3
 80074b8:	2106      	movs	r1, #6
 80074ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074bc:	f7ff fee8 	bl	8007290 <get_buffer_status>
 80074c0:	4603      	mov	r3, r0
 80074c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                if (rslt != BHY2_OK)
 80074c6:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d002      	beq.n	80074d4 <parse_fifo+0x1cc>
                {
                    return rslt;
 80074ce:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80074d2:	e0dd      	b.n	8007690 <parse_fifo+0x388>
                }
                if (status != BHY2_BUFFER_STATUS_OK)
 80074d4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d000      	beq.n	80074de <parse_fifo+0x1d6>
                {
                    break;
 80074dc:	e095      	b.n	800760a <parse_fifo+0x302>
                }
                *time_stamp = BHY2_LE2U40(fifo_p->buffer + tmp_read_pos + UINT8_C(1));
 80074de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074e0:	691a      	ldr	r2, [r3, #16]
 80074e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80074e4:	3301      	adds	r3, #1
 80074e6:	4413      	add	r3, r2
 80074e8:	781b      	ldrb	r3, [r3, #0]
 80074ea:	4619      	mov	r1, r3
 80074ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ee:	691a      	ldr	r2, [r3, #16]
 80074f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80074f2:	3302      	adds	r3, #2
 80074f4:	4413      	add	r3, r2
 80074f6:	781b      	ldrb	r3, [r3, #0]
 80074f8:	021b      	lsls	r3, r3, #8
 80074fa:	4319      	orrs	r1, r3
 80074fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074fe:	691a      	ldr	r2, [r3, #16]
 8007500:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007502:	3303      	adds	r3, #3
 8007504:	4413      	add	r3, r2
 8007506:	781b      	ldrb	r3, [r3, #0]
 8007508:	041b      	lsls	r3, r3, #16
 800750a:	4319      	orrs	r1, r3
 800750c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800750e:	691a      	ldr	r2, [r3, #16]
 8007510:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007512:	3304      	adds	r3, #4
 8007514:	4413      	add	r3, r2
 8007516:	781b      	ldrb	r3, [r3, #0]
 8007518:	061b      	lsls	r3, r3, #24
 800751a:	430b      	orrs	r3, r1
 800751c:	2200      	movs	r2, #0
 800751e:	4698      	mov	r8, r3
 8007520:	4691      	mov	r9, r2
 8007522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007524:	691a      	ldr	r2, [r3, #16]
 8007526:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007528:	3305      	adds	r3, #5
 800752a:	4413      	add	r3, r2
 800752c:	781b      	ldrb	r3, [r3, #0]
 800752e:	b2db      	uxtb	r3, r3
 8007530:	2200      	movs	r2, #0
 8007532:	60bb      	str	r3, [r7, #8]
 8007534:	60fa      	str	r2, [r7, #12]
 8007536:	f04f 0200 	mov.w	r2, #0
 800753a:	f04f 0300 	mov.w	r3, #0
 800753e:	68b9      	ldr	r1, [r7, #8]
 8007540:	000b      	movs	r3, r1
 8007542:	2200      	movs	r2, #0
 8007544:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007546:	ea48 0002 	orr.w	r0, r8, r2
 800754a:	6038      	str	r0, [r7, #0]
 800754c:	ea49 0303 	orr.w	r3, r9, r3
 8007550:	607b      	str	r3, [r7, #4]
 8007552:	e9d7 3400 	ldrd	r3, r4, [r7]
 8007556:	e9c1 3400 	strd	r3, r4, [r1]
                fifo_p->read_pos += 6;
 800755a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	1d9a      	adds	r2, r3, #6
 8007560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007562:	601a      	str	r2, [r3, #0]
                break;
 8007564:	e051      	b.n	800760a <parse_fifo+0x302>
            default:

                rslt = get_callback_info(tmp_sensor_id, &info, dev);
 8007566:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800756a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800756e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007570:	4618      	mov	r0, r3
 8007572:	f7ff fe23 	bl	80071bc <get_callback_info>
 8007576:	4603      	mov	r3, r0
 8007578:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

                if (rslt != BHY2_OK)
 800757c:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8007580:	2b00      	cmp	r3, #0
 8007582:	d002      	beq.n	800758a <parse_fifo+0x282>
                {
                    return rslt;
 8007584:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8007588:	e082      	b.n	8007690 <parse_fifo+0x388>
                }
                rslt = get_buffer_status(fifo_p, info.event_size, &status);
 800758a:	f897 1038 	ldrb.w	r1, [r7, #56]	; 0x38
 800758e:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8007592:	461a      	mov	r2, r3
 8007594:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007596:	f7ff fe7b 	bl	8007290 <get_buffer_status>
 800759a:	4603      	mov	r3, r0
 800759c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                if (rslt != BHY2_OK)
 80075a0:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d002      	beq.n	80075ae <parse_fifo+0x2a6>
                {
                    return rslt;
 80075a8:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80075ac:	e070      	b.n	8007690 <parse_fifo+0x388>
                }
                if (status != BHY2_BUFFER_STATUS_OK)
 80075ae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d000      	beq.n	80075b8 <parse_fifo+0x2b0>
                {
                    break;
 80075b6:	e028      	b.n	800760a <parse_fifo+0x302>
                }
                if (info.callback != NULL)
 80075b8:	f8d7 3039 	ldr.w	r3, [r7, #57]	; 0x39
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d01c      	beq.n	80075fa <parse_fifo+0x2f2>
                {
                    /* Read position is incremented by 1 to exclude sensor id */
                    data_info.data_ptr = &fifo_p->buffer[tmp_read_pos + 1];
 80075c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075c2:	691a      	ldr	r2, [r3, #16]
 80075c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80075c6:	3301      	adds	r3, #1
 80075c8:	4413      	add	r3, r2
 80075ca:	64fb      	str	r3, [r7, #76]	; 0x4c
                    data_info.fifo_type = source;
 80075cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80075d0:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
                    data_info.time_stamp = time_stamp;
 80075d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075d6:	653b      	str	r3, [r7, #80]	; 0x50
                    data_info.sensor_id = tmp_sensor_id;
 80075d8:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80075dc:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                    data_info.data_size = info.event_size;
 80075e0:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80075e4:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
                    info.callback(&data_info, info.callback_ref);
 80075e8:	f8d7 4039 	ldr.w	r4, [r7, #57]	; 0x39
 80075ec:	f8d7 203d 	ldr.w	r2, [r7, #61]	; 0x3d
 80075f0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80075f4:	4611      	mov	r1, r2
 80075f6:	4618      	mov	r0, r3
 80075f8:	47a0      	blx	r4

                }
                fifo_p->read_pos += info.event_size;
 80075fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075fc:	681a      	ldr	r2, [r3, #0]
 80075fe:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8007602:	441a      	add	r2, r3
 8007604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007606:	601a      	str	r2, [r3, #0]
                break;
 8007608:	bf00      	nop
    for (; (fifo_p->read_pos < fifo_p->read_length) && (status == BHY2_BUFFER_STATUS_OK);)
 800760a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800760c:	681a      	ldr	r2, [r3, #0]
 800760e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	429a      	cmp	r2, r3
 8007614:	d204      	bcs.n	8007620 <parse_fifo+0x318>
 8007616:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800761a:	2b00      	cmp	r3, #0
 800761c:	f43f ae8a 	beq.w	8007334 <parse_fifo+0x2c>
        }
    }
    if (fifo_p->read_length)
 8007620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d031      	beq.n	800768c <parse_fifo+0x384>
    {
        if (fifo_p->read_length < fifo_p->read_pos)
 8007628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800762a:	685a      	ldr	r2, [r3, #4]
 800762c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	429a      	cmp	r2, r3
 8007632:	d202      	bcs.n	800763a <parse_fifo+0x332>
        {
            return BHY2_E_INVALID_PARAM;
 8007634:	f06f 0301 	mvn.w	r3, #1
 8007638:	e02a      	b.n	8007690 <parse_fifo+0x388>
        }
        fifo_p->read_length -= fifo_p->read_pos;
 800763a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800763c:	685a      	ldr	r2, [r3, #4]
 800763e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	1ad2      	subs	r2, r2, r3
 8007644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007646:	605a      	str	r2, [r3, #4]
        if (fifo_p->read_length)
 8007648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d01d      	beq.n	800768c <parse_fifo+0x384>
        {
            for (i = 0; i < fifo_p->read_length; i++)
 8007650:	2300      	movs	r3, #0
 8007652:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8007656:	e013      	b.n	8007680 <parse_fifo+0x378>
            {
                fifo_p->buffer[i] = fifo_p->buffer[fifo_p->read_pos + i];
 8007658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800765a:	691a      	ldr	r2, [r3, #16]
 800765c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800765e:	6819      	ldr	r1, [r3, #0]
 8007660:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8007664:	440b      	add	r3, r1
 8007666:	441a      	add	r2, r3
 8007668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800766a:	6919      	ldr	r1, [r3, #16]
 800766c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8007670:	440b      	add	r3, r1
 8007672:	7812      	ldrb	r2, [r2, #0]
 8007674:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < fifo_p->read_length; i++)
 8007676:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800767a:	3301      	adds	r3, #1
 800767c:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8007680:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8007684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007686:	685b      	ldr	r3, [r3, #4]
 8007688:	429a      	cmp	r2, r3
 800768a:	d3e5      	bcc.n	8007658 <parse_fifo+0x350>
            }
        }
    }

    return rslt;
 800768c:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 8007690:	4618      	mov	r0, r3
 8007692:	3764      	adds	r7, #100	; 0x64
 8007694:	46bd      	mov	sp, r7
 8007696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800769a:	bf00      	nop

0800769c <bhy2_hif_exec_cmd_generic>:
                                        uint32_t length,
                                        const uint8_t *pre_payload,
                                        uint32_t pre_length,
                                        uint32_t cmd_length,
                                        struct bhy2_hif_dev *hif)
{
 800769c:	b590      	push	{r4, r7, lr}
 800769e:	b0cf      	sub	sp, #316	; 0x13c
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	4604      	mov	r4, r0
 80076a4:	f507 709c 	add.w	r0, r7, #312	; 0x138
 80076a8:	f5a0 7098 	sub.w	r0, r0, #304	; 0x130
 80076ac:	6001      	str	r1, [r0, #0]
 80076ae:	f507 719c 	add.w	r1, r7, #312	; 0x138
 80076b2:	f5a1 719a 	sub.w	r1, r1, #308	; 0x134
 80076b6:	600a      	str	r2, [r1, #0]
 80076b8:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80076bc:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 80076c0:	6013      	str	r3, [r2, #0]
 80076c2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80076c6:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80076ca:	4622      	mov	r2, r4
 80076cc:	801a      	strh	r2, [r3, #0]
    int8_t rslt = BHY2_OK;
 80076ce:	2300      	movs	r3, #0
 80076d0:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
    uint32_t remain, trans_len, copy_len, pos, total_len, temp_total_len, loop_remain_len, max_len;
    uint8_t command_buf[BHY2_COMMAND_PACKET_LEN];

    if ((hif != NULL) && !((length != 0) && (payload == NULL)) && !((pre_length != 0) && (pre_payload == NULL)))
 80076d4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80076d8:	2b00      	cmp	r3, #0
 80076da:	f000 81af 	beq.w	8007a3c <bhy2_hif_exec_cmd_generic+0x3a0>
 80076de:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80076e2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d007      	beq.n	80076fc <bhy2_hif_exec_cmd_generic+0x60>
 80076ec:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80076f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	f000 81a0 	beq.w	8007a3c <bhy2_hif_exec_cmd_generic+0x3a0>
 80076fc:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8007700:	2b00      	cmp	r3, #0
 8007702:	d007      	beq.n	8007714 <bhy2_hif_exec_cmd_generic+0x78>
 8007704:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007708:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	2b00      	cmp	r3, #0
 8007710:	f000 8194 	beq.w	8007a3c <bhy2_hif_exec_cmd_generic+0x3a0>
    {
        if (hif->read_write_len != 0)
 8007714:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8007718:	699b      	ldr	r3, [r3, #24]
 800771a:	2b00      	cmp	r3, #0
 800771c:	f000 8188 	beq.w	8007a30 <bhy2_hif_exec_cmd_generic+0x394>
        {
            total_len = pre_length + length;
 8007720:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007724:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8007728:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4413      	add	r3, r2
 8007730:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

            if (cmd_length)
 8007734:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007738:	2b00      	cmp	r3, #0
 800773a:	d007      	beq.n	800774c <bhy2_hif_exec_cmd_generic+0xb0>
            {
                temp_total_len = pre_length + cmd_length;
 800773c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8007740:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007744:	4413      	add	r3, r2
 8007746:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800774a:	e003      	b.n	8007754 <bhy2_hif_exec_cmd_generic+0xb8>
            }
            else
            {
                temp_total_len = total_len;
 800774c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007750:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
            }

            /* Align 4 bytes */
            if (temp_total_len % 4)
 8007754:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007758:	f003 0303 	and.w	r3, r3, #3
 800775c:	2b00      	cmp	r3, #0
 800775e:	d006      	beq.n	800776e <bhy2_hif_exec_cmd_generic+0xd2>
            {
                temp_total_len = ((temp_total_len >> 2) + 1) << 2;
 8007760:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007764:	089b      	lsrs	r3, r3, #2
 8007766:	3301      	adds	r3, #1
 8007768:	009b      	lsls	r3, r3, #2
 800776a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
            }

            command_buf[0] = (uint8_t)(cmd & 0xFF);
 800776e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007772:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007776:	881b      	ldrh	r3, [r3, #0]
 8007778:	b2da      	uxtb	r2, r3
 800777a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800777e:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8007782:	701a      	strb	r2, [r3, #0]
            command_buf[1] = (uint8_t)((cmd >> 8) & 0xFF);
 8007784:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007788:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800778c:	881b      	ldrh	r3, [r3, #0]
 800778e:	0a1b      	lsrs	r3, r3, #8
 8007790:	b29b      	uxth	r3, r3
 8007792:	b2da      	uxtb	r2, r3
 8007794:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007798:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800779c:	705a      	strb	r2, [r3, #1]

            /* Length in word */
            if (cmd == BHY2_CMD_UPLOAD_TO_PROGRAM_RAM)
 800779e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80077a2:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80077a6:	881b      	ldrh	r3, [r3, #0]
 80077a8:	2b02      	cmp	r3, #2
 80077aa:	d113      	bne.n	80077d4 <bhy2_hif_exec_cmd_generic+0x138>
            {
                command_buf[2] = (temp_total_len / 4) & 0xFF;
 80077ac:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80077b0:	089b      	lsrs	r3, r3, #2
 80077b2:	b2da      	uxtb	r2, r3
 80077b4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80077b8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80077bc:	709a      	strb	r2, [r3, #2]
                command_buf[3] = ((temp_total_len / 4) >> 8) & 0xFF;
 80077be:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80077c2:	089b      	lsrs	r3, r3, #2
 80077c4:	0a1b      	lsrs	r3, r3, #8
 80077c6:	b2da      	uxtb	r2, r3
 80077c8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80077cc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80077d0:	70da      	strb	r2, [r3, #3]
 80077d2:	e010      	b.n	80077f6 <bhy2_hif_exec_cmd_generic+0x15a>
            }
            /* Length in byte */
            else
            {
                command_buf[2] = temp_total_len & 0xFF;
 80077d4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80077d8:	b2da      	uxtb	r2, r3
 80077da:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80077de:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80077e2:	709a      	strb	r2, [r3, #2]
                command_buf[3] = (temp_total_len >> 8) & 0xFF;
 80077e4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80077e8:	0a1b      	lsrs	r3, r3, #8
 80077ea:	b2da      	uxtb	r2, r3
 80077ec:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80077f0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80077f4:	70da      	strb	r2, [r3, #3]
            }

            pos = 4;
 80077f6:	2304      	movs	r3, #4
 80077f8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
            remain = total_len;
 80077fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007800:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
            loop_remain_len = remain + pos;
 8007804:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8007808:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800780c:	4413      	add	r3, r2
 800780e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
            max_len = BHY2_COMMAND_PACKET_LEN;
 8007812:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007816:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

            if (hif->read_write_len < max_len)
 800781a:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800781e:	699b      	ldr	r3, [r3, #24]
 8007820:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8007824:	429a      	cmp	r2, r3
 8007826:	f240 80f9 	bls.w	8007a1c <bhy2_hif_exec_cmd_generic+0x380>
            {
                max_len = hif->read_write_len;
 800782a:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800782e:	699b      	ldr	r3, [r3, #24]
 8007830:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
            }

            while ((loop_remain_len > 0) && (rslt == BHY2_OK))
 8007834:	e0f2      	b.n	8007a1c <bhy2_hif_exec_cmd_generic+0x380>
            {
                if ((remain + pos) > max_len)
 8007836:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800783a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800783e:	4413      	add	r3, r2
 8007840:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8007844:	429a      	cmp	r2, r3
 8007846:	d20b      	bcs.n	8007860 <bhy2_hif_exec_cmd_generic+0x1c4>
                {
                    trans_len = max_len;
 8007848:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800784c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    copy_len = max_len - pos;
 8007850:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8007854:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007858:	1ad3      	subs	r3, r2, r3
 800785a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800785e:	e020      	b.n	80078a2 <bhy2_hif_exec_cmd_generic+0x206>
                }
                else
                {
                    trans_len = remain + pos;
 8007860:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8007864:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007868:	4413      	add	r3, r2
 800786a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    copy_len = remain;
 800786e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007872:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

                    /* Align to 4 bytes */
                    if (trans_len % 4)
 8007876:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800787a:	f003 0303 	and.w	r3, r3, #3
 800787e:	2b00      	cmp	r3, #0
 8007880:	d006      	beq.n	8007890 <bhy2_hif_exec_cmd_generic+0x1f4>
                    {
                        trans_len = ((trans_len >> 2) + 1) << 2;
 8007882:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007886:	089b      	lsrs	r3, r3, #2
 8007888:	3301      	adds	r3, #1
 800788a:	009b      	lsls	r3, r3, #2
 800788c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    }

                    if (trans_len > BHY2_COMMAND_PACKET_LEN)
 8007890:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007894:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007898:	d903      	bls.n	80078a2 <bhy2_hif_exec_cmd_generic+0x206>
                    {
                        trans_len = BHY2_COMMAND_PACKET_LEN;
 800789a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800789e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    }
                }

                if (copy_len > 0)
 80078a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d07e      	beq.n	80079a8 <bhy2_hif_exec_cmd_generic+0x30c>
                {
                    if (remain >= (length + copy_len))
 80078aa:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80078ae:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80078b2:	681a      	ldr	r2, [r3, #0]
 80078b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80078b8:	4413      	add	r3, r2
 80078ba:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80078be:	429a      	cmp	r2, r3
 80078c0:	d315      	bcc.n	80078ee <bhy2_hif_exec_cmd_generic+0x252>
                    {
                        memcpy(&command_buf[pos], &pre_payload[total_len - remain], copy_len);
 80078c2:	f107 0214 	add.w	r2, r7, #20
 80078c6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80078ca:	18d0      	adds	r0, r2, r3
 80078cc:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80078d0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80078d4:	1ad3      	subs	r3, r2, r3
 80078d6:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80078da:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 80078de:	6812      	ldr	r2, [r2, #0]
 80078e0:	4413      	add	r3, r2
 80078e2:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80078e6:	4619      	mov	r1, r3
 80078e8:	f012 fb60 	bl	8019fac <memcpy>
 80078ec:	e05c      	b.n	80079a8 <bhy2_hif_exec_cmd_generic+0x30c>
                    }
                    else if (remain > length)
 80078ee:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80078f2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80078f6:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	429a      	cmp	r2, r3
 80078fe:	d93b      	bls.n	8007978 <bhy2_hif_exec_cmd_generic+0x2dc>
                    {
                        memcpy(&command_buf[pos], &pre_payload[total_len - remain], remain - length);
 8007900:	f107 0214 	add.w	r2, r7, #20
 8007904:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007908:	18d0      	adds	r0, r2, r3
 800790a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800790e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007912:	1ad3      	subs	r3, r2, r3
 8007914:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8007918:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 800791c:	6812      	ldr	r2, [r2, #0]
 800791e:	18d1      	adds	r1, r2, r3
 8007920:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007924:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8007928:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	1ad3      	subs	r3, r2, r3
 8007930:	461a      	mov	r2, r3
 8007932:	f012 fb3b 	bl	8019fac <memcpy>
                        memcpy(&command_buf[pos + remain - length], payload, copy_len - (remain - length));
 8007936:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800793a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800793e:	441a      	add	r2, r3
 8007940:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007944:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	1ad3      	subs	r3, r2, r3
 800794c:	f107 0214 	add.w	r2, r7, #20
 8007950:	18d0      	adds	r0, r2, r3
 8007952:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007956:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800795a:	681a      	ldr	r2, [r3, #0]
 800795c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007960:	1ad2      	subs	r2, r2, r3
 8007962:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007966:	441a      	add	r2, r3
 8007968:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800796c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007970:	6819      	ldr	r1, [r3, #0]
 8007972:	f012 fb1b 	bl	8019fac <memcpy>
 8007976:	e017      	b.n	80079a8 <bhy2_hif_exec_cmd_generic+0x30c>
                    }
                    else
                    {
                        memcpy(&command_buf[pos], &payload[length - remain], copy_len);
 8007978:	f107 0214 	add.w	r2, r7, #20
 800797c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007980:	18d0      	adds	r0, r2, r3
 8007982:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007986:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800798a:	681a      	ldr	r2, [r3, #0]
 800798c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007990:	1ad3      	subs	r3, r2, r3
 8007992:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8007996:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 800799a:	6812      	ldr	r2, [r2, #0]
 800799c:	4413      	add	r3, r2
 800799e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80079a2:	4619      	mov	r1, r3
 80079a4:	f012 fb02 	bl	8019fac <memcpy>
                    }
                }

                if ((trans_len - (pos + copy_len)) > 0)
 80079a8:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80079ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80079b0:	4413      	add	r3, r2
 80079b2:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80079b6:	429a      	cmp	r2, r3
 80079b8:	d012      	beq.n	80079e0 <bhy2_hif_exec_cmd_generic+0x344>
                {
                    memset(&command_buf[pos + copy_len], 0, BHY2_COMMAND_PACKET_LEN - (pos + copy_len));
 80079ba:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80079be:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80079c2:	4413      	add	r3, r2
 80079c4:	f107 0214 	add.w	r2, r7, #20
 80079c8:	18d0      	adds	r0, r2, r3
 80079ca:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80079ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80079d2:	4413      	add	r3, r2
 80079d4:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80079d8:	461a      	mov	r2, r3
 80079da:	2100      	movs	r1, #0
 80079dc:	f012 fb0e 	bl	8019ffc <memset>
                }

                rslt = bhy2_hif_set_regs(BHY2_REG_CHAN_CMD, command_buf, trans_len, hif);
 80079e0:	f107 0114 	add.w	r1, r7, #20
 80079e4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80079e8:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80079ec:	2000      	movs	r0, #0
 80079ee:	f000 f9b4 	bl	8007d5a <bhy2_hif_set_regs>
 80079f2:	4603      	mov	r3, r0
 80079f4:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
                if (rslt != BHY2_OK)
 80079f8:	f997 3137 	ldrsb.w	r3, [r7, #311]	; 0x137
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d11b      	bne.n	8007a38 <bhy2_hif_exec_cmd_generic+0x39c>
                {
                    break;
                }
                pos = 0;
 8007a00:	2300      	movs	r3, #0
 8007a02:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
                remain -= copy_len;
 8007a06:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8007a0a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007a0e:	1ad3      	subs	r3, r2, r3
 8007a10:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
                loop_remain_len = remain;
 8007a14:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007a18:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
            while ((loop_remain_len > 0) && (rslt == BHY2_OK))
 8007a1c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d00f      	beq.n	8007a44 <bhy2_hif_exec_cmd_generic+0x3a8>
 8007a24:	f997 3137 	ldrsb.w	r3, [r7, #311]	; 0x137
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	f43f af04 	beq.w	8007836 <bhy2_hif_exec_cmd_generic+0x19a>
        if (hif->read_write_len != 0)
 8007a2e:	e009      	b.n	8007a44 <bhy2_hif_exec_cmd_generic+0x3a8>
            }

        }
        else
        {
            rslt = BHY2_E_INVALID_PARAM;
 8007a30:	23fe      	movs	r3, #254	; 0xfe
 8007a32:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
        if (hif->read_write_len != 0)
 8007a36:	e005      	b.n	8007a44 <bhy2_hif_exec_cmd_generic+0x3a8>
                    break;
 8007a38:	bf00      	nop
        if (hif->read_write_len != 0)
 8007a3a:	e003      	b.n	8007a44 <bhy2_hif_exec_cmd_generic+0x3a8>
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8007a3c:	23ff      	movs	r3, #255	; 0xff
 8007a3e:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8007a42:	e000      	b.n	8007a46 <bhy2_hif_exec_cmd_generic+0x3aa>
        if (hif->read_write_len != 0)
 8007a44:	bf00      	nop
    }

    return rslt;
 8007a46:	f997 3137 	ldrsb.w	r3, [r7, #311]	; 0x137
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bd90      	pop	{r4, r7, pc}

08007a54 <bhy2_wait_status_ready>:

static int8_t bhy2_wait_status_ready(struct bhy2_hif_dev *hif)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b084      	sub	sp, #16
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
    uint16_t retry;
    uint8_t int_status;
    int8_t rslt;

    /* Wait status ready */
    for (retry = 0; retry < BHY2_QUERY_PARAM_STATUS_READY_MAX_RETRY; ++retry)
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	81fb      	strh	r3, [r7, #14]
 8007a60:	e027      	b.n	8007ab2 <bhy2_wait_status_ready+0x5e>
    {
        rslt = bhy2_hif_get_interrupt_status(&int_status, hif);
 8007a62:	f107 030c 	add.w	r3, r7, #12
 8007a66:	6879      	ldr	r1, [r7, #4]
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f000 fab1 	bl	8007fd0 <bhy2_hif_get_interrupt_status>
 8007a6e:	4603      	mov	r3, r0
 8007a70:	737b      	strb	r3, [r7, #13]
        if (rslt == BHY2_OK)
 8007a72:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d115      	bne.n	8007aa6 <bhy2_wait_status_ready+0x52>
        {
            if (int_status & BHY2_IST_MASK_STATUS)
 8007a7a:	7b3b      	ldrb	r3, [r7, #12]
 8007a7c:	f003 0320 	and.w	r3, r3, #32
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d002      	beq.n	8007a8a <bhy2_wait_status_ready+0x36>
            {
                rslt = BHY2_OK;
 8007a84:	2300      	movs	r3, #0
 8007a86:	737b      	strb	r3, [r7, #13]
                break;
 8007a88:	e017      	b.n	8007aba <bhy2_wait_status_ready+0x66>
            }

            /* 10ms */
            rslt = bhy2_hif_delay_us(10000, hif);
 8007a8a:	6879      	ldr	r1, [r7, #4]
 8007a8c:	f242 7010 	movw	r0, #10000	; 0x2710
 8007a90:	f000 f99b 	bl	8007dca <bhy2_hif_delay_us>
 8007a94:	4603      	mov	r3, r0
 8007a96:	737b      	strb	r3, [r7, #13]
            if (rslt != BHY2_OK)
 8007a98:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d005      	beq.n	8007aac <bhy2_wait_status_ready+0x58>
            {
                return rslt;
 8007aa0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8007aa4:	e00b      	b.n	8007abe <bhy2_wait_status_ready+0x6a>
            }
        }
        else
        {
            return rslt; /*break; */
 8007aa6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8007aaa:	e008      	b.n	8007abe <bhy2_wait_status_ready+0x6a>
    for (retry = 0; retry < BHY2_QUERY_PARAM_STATUS_READY_MAX_RETRY; ++retry)
 8007aac:	89fb      	ldrh	r3, [r7, #14]
 8007aae:	3301      	adds	r3, #1
 8007ab0:	81fb      	strh	r3, [r7, #14]
 8007ab2:	89fb      	ldrh	r3, [r7, #14]
 8007ab4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007ab8:	d3d3      	bcc.n	8007a62 <bhy2_wait_status_ready+0xe>
        }
    }

    return rslt;
 8007aba:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	3710      	adds	r7, #16
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}

08007ac6 <bhy2_hif_check_boot_status_ram>:

static int8_t bhy2_hif_check_boot_status_ram(struct bhy2_hif_dev *hif)
{
 8007ac6:	b580      	push	{r7, lr}
 8007ac8:	b084      	sub	sp, #16
 8007aca:	af00      	add	r7, sp, #0
 8007acc:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint16_t i;
    uint8_t boot_status;

    /* total 5s */
    for (i = 0; i < BHY2_BST_CHECK_RETRY; ++i)
 8007ace:	2300      	movs	r3, #0
 8007ad0:	81fb      	strh	r3, [r7, #14]
 8007ad2:	e02f      	b.n	8007b34 <bhy2_hif_check_boot_status_ram+0x6e>
    {
        /* 50ms */
        rslt = bhy2_hif_delay_us(50000, hif);
 8007ad4:	6879      	ldr	r1, [r7, #4]
 8007ad6:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007ada:	f000 f976 	bl	8007dca <bhy2_hif_delay_us>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	737b      	strb	r3, [r7, #13]
        if (rslt < 0)
 8007ae2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	da02      	bge.n	8007af0 <bhy2_hif_check_boot_status_ram+0x2a>
        {
            return rslt;
 8007aea:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8007aee:	e02d      	b.n	8007b4c <bhy2_hif_check_boot_status_ram+0x86>
        }

        rslt = bhy2_hif_get_regs(BHY2_REG_BOOT_STATUS, &boot_status, sizeof(boot_status), hif);
 8007af0:	f107 010c 	add.w	r1, r7, #12
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2201      	movs	r2, #1
 8007af8:	2025      	movs	r0, #37	; 0x25
 8007afa:	f000 f8f6 	bl	8007cea <bhy2_hif_get_regs>
 8007afe:	4603      	mov	r3, r0
 8007b00:	737b      	strb	r3, [r7, #13]
        if (rslt < 0)
 8007b02:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	da02      	bge.n	8007b10 <bhy2_hif_check_boot_status_ram+0x4a>
        {
            return rslt;
 8007b0a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8007b0e:	e01d      	b.n	8007b4c <bhy2_hif_check_boot_status_ram+0x86>
        }

        if ((boot_status & BHY2_BST_HOST_INTERFACE_READY) && (boot_status & BHY2_BST_HOST_FW_VERIFY_DONE) &&
 8007b10:	7b3b      	ldrb	r3, [r7, #12]
 8007b12:	f003 0310 	and.w	r3, r3, #16
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d009      	beq.n	8007b2e <bhy2_hif_check_boot_status_ram+0x68>
 8007b1a:	7b3b      	ldrb	r3, [r7, #12]
 8007b1c:	f003 0320 	and.w	r3, r3, #32
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d004      	beq.n	8007b2e <bhy2_hif_check_boot_status_ram+0x68>
            (!(boot_status & BHY2_BST_HOST_FW_VERIFY_ERROR)))
 8007b24:	7b3b      	ldrb	r3, [r7, #12]
 8007b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
        if ((boot_status & BHY2_BST_HOST_INTERFACE_READY) && (boot_status & BHY2_BST_HOST_FW_VERIFY_DONE) &&
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d006      	beq.n	8007b3c <bhy2_hif_check_boot_status_ram+0x76>
    for (i = 0; i < BHY2_BST_CHECK_RETRY; ++i)
 8007b2e:	89fb      	ldrh	r3, [r7, #14]
 8007b30:	3301      	adds	r3, #1
 8007b32:	81fb      	strh	r3, [r7, #14]
 8007b34:	89fb      	ldrh	r3, [r7, #14]
 8007b36:	2b63      	cmp	r3, #99	; 0x63
 8007b38:	d9cc      	bls.n	8007ad4 <bhy2_hif_check_boot_status_ram+0xe>
 8007b3a:	e000      	b.n	8007b3e <bhy2_hif_check_boot_status_ram+0x78>
        {
            break;
 8007b3c:	bf00      	nop
        }
    }

    if (i == BHY2_BST_CHECK_RETRY)
 8007b3e:	89fb      	ldrh	r3, [r7, #14]
 8007b40:	2b64      	cmp	r3, #100	; 0x64
 8007b42:	d102      	bne.n	8007b4a <bhy2_hif_check_boot_status_ram+0x84>
    {
        return BHY2_E_TIMEOUT;
 8007b44:	f06f 0304 	mvn.w	r3, #4
 8007b48:	e000      	b.n	8007b4c <bhy2_hif_check_boot_status_ram+0x86>
    }

    return BHY2_OK;
 8007b4a:	2300      	movs	r3, #0
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	3710      	adds	r7, #16
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}

08007b54 <bhy2_hif_get_fifo>:
                                uint8_t *fifo,
                                uint32_t fifo_len,
                                uint32_t *bytes_read,
                                uint32_t *bytes_remain,
                                struct bhy2_hif_dev *hif)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b08a      	sub	sp, #40	; 0x28
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	60b9      	str	r1, [r7, #8]
 8007b5c:	607a      	str	r2, [r7, #4]
 8007b5e:	603b      	str	r3, [r7, #0]
 8007b60:	4603      	mov	r3, r0
 8007b62:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8007b64:	2300      	movs	r3, #0
 8007b66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint8_t n_bytes[2];
    uint32_t read_len;
    uint32_t read_write_len;
    uint32_t offset;

    if ((hif != NULL) && (fifo != NULL) && (bytes_read != NULL) && (bytes_remain != NULL))
 8007b6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d072      	beq.n	8007c56 <bhy2_hif_get_fifo+0x102>
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d06f      	beq.n	8007c56 <bhy2_hif_get_fifo+0x102>
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d06c      	beq.n	8007c56 <bhy2_hif_get_fifo+0x102>
 8007b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d069      	beq.n	8007c56 <bhy2_hif_get_fifo+0x102>
    {
        read_write_len = hif->read_write_len;
 8007b82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b84:	699b      	ldr	r3, [r3, #24]
 8007b86:	61bb      	str	r3, [r7, #24]

        if (*bytes_remain == 0)
 8007b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d114      	bne.n	8007bba <bhy2_hif_get_fifo+0x66>
        {
            rslt = bhy2_hif_get_regs(reg, n_bytes, 2, hif); /* Read the the available size */
 8007b90:	f107 0114 	add.w	r1, r7, #20
 8007b94:	7bf8      	ldrb	r0, [r7, #15]
 8007b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b98:	2202      	movs	r2, #2
 8007b9a:	f000 f8a6 	bl	8007cea <bhy2_hif_get_regs>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            *bytes_remain = BHY2_LE2U16(n_bytes);
 8007ba4:	7d3b      	ldrb	r3, [r7, #20]
 8007ba6:	b21a      	sxth	r2, r3
 8007ba8:	7d7b      	ldrb	r3, [r7, #21]
 8007baa:	021b      	lsls	r3, r3, #8
 8007bac:	b21b      	sxth	r3, r3
 8007bae:	4313      	orrs	r3, r2
 8007bb0:	b21b      	sxth	r3, r3
 8007bb2:	b29b      	uxth	r3, r3
 8007bb4:	461a      	mov	r2, r3
 8007bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bb8:	601a      	str	r2, [r3, #0]
        }

        if ((*bytes_remain != 0) && (rslt == BHY2_OK))
 8007bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d04d      	beq.n	8007c5e <bhy2_hif_get_fifo+0x10a>
 8007bc2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d149      	bne.n	8007c5e <bhy2_hif_get_fifo+0x10a>
        {
            if (fifo_len < *bytes_remain)
 8007bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	687a      	ldr	r2, [r7, #4]
 8007bd0:	429a      	cmp	r2, r3
 8007bd2:	d203      	bcs.n	8007bdc <bhy2_hif_get_fifo+0x88>
            {
                *bytes_read = fifo_len;
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	687a      	ldr	r2, [r7, #4]
 8007bd8:	601a      	str	r2, [r3, #0]
 8007bda:	e003      	b.n	8007be4 <bhy2_hif_get_fifo+0x90>
            }
            else
            {
                *bytes_read = *bytes_remain;
 8007bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bde:	681a      	ldr	r2, [r3, #0]
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	601a      	str	r2, [r3, #0]
            }
            read_len = *bytes_read;
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	623b      	str	r3, [r7, #32]
            offset = 0;
 8007bea:	2300      	movs	r3, #0
 8007bec:	61fb      	str	r3, [r7, #28]
            while (read_len > read_write_len)
 8007bee:	e016      	b.n	8007c1e <bhy2_hif_get_fifo+0xca>
            {
                rslt = bhy2_hif_get_regs(reg, &fifo[offset], read_write_len, hif);
 8007bf0:	68ba      	ldr	r2, [r7, #8]
 8007bf2:	69fb      	ldr	r3, [r7, #28]
 8007bf4:	18d1      	adds	r1, r2, r3
 8007bf6:	7bf8      	ldrb	r0, [r7, #15]
 8007bf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bfa:	69ba      	ldr	r2, [r7, #24]
 8007bfc:	f000 f875 	bl	8007cea <bhy2_hif_get_regs>
 8007c00:	4603      	mov	r3, r0
 8007c02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                if (rslt != BHY2_OK)
 8007c06:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d10c      	bne.n	8007c28 <bhy2_hif_get_fifo+0xd4>
                {
                    break;
                }
                read_len -= read_write_len;
 8007c0e:	6a3a      	ldr	r2, [r7, #32]
 8007c10:	69bb      	ldr	r3, [r7, #24]
 8007c12:	1ad3      	subs	r3, r2, r3
 8007c14:	623b      	str	r3, [r7, #32]
                offset += read_write_len;
 8007c16:	69fa      	ldr	r2, [r7, #28]
 8007c18:	69bb      	ldr	r3, [r7, #24]
 8007c1a:	4413      	add	r3, r2
 8007c1c:	61fb      	str	r3, [r7, #28]
            while (read_len > read_write_len)
 8007c1e:	6a3a      	ldr	r2, [r7, #32]
 8007c20:	69bb      	ldr	r3, [r7, #24]
 8007c22:	429a      	cmp	r2, r3
 8007c24:	d8e4      	bhi.n	8007bf0 <bhy2_hif_get_fifo+0x9c>
 8007c26:	e000      	b.n	8007c2a <bhy2_hif_get_fifo+0xd6>
                    break;
 8007c28:	bf00      	nop
            }

            if (read_len != 0)
 8007c2a:	6a3b      	ldr	r3, [r7, #32]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d00a      	beq.n	8007c46 <bhy2_hif_get_fifo+0xf2>
            {
                rslt = bhy2_hif_get_regs(reg, &fifo[offset], read_len, hif);
 8007c30:	68ba      	ldr	r2, [r7, #8]
 8007c32:	69fb      	ldr	r3, [r7, #28]
 8007c34:	18d1      	adds	r1, r2, r3
 8007c36:	7bf8      	ldrb	r0, [r7, #15]
 8007c38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c3a:	6a3a      	ldr	r2, [r7, #32]
 8007c3c:	f000 f855 	bl	8007cea <bhy2_hif_get_regs>
 8007c40:	4603      	mov	r3, r0
 8007c42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            *bytes_remain -= *bytes_read;
 8007c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c48:	681a      	ldr	r2, [r3, #0]
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	1ad2      	subs	r2, r2, r3
 8007c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c52:	601a      	str	r2, [r3, #0]
        if ((*bytes_remain != 0) && (rslt == BHY2_OK))
 8007c54:	e003      	b.n	8007c5e <bhy2_hif_get_fifo+0x10a>
        }

    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8007c56:	23ff      	movs	r3, #255	; 0xff
 8007c58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007c5c:	e000      	b.n	8007c60 <bhy2_hif_get_fifo+0x10c>
        if ((*bytes_remain != 0) && (rslt == BHY2_OK))
 8007c5e:	bf00      	nop
    }

    return rslt;
 8007c60:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	3728      	adds	r7, #40	; 0x28
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}

08007c6c <bhy2_hif_init>:
                     bhy2_write_fptr_t write,
                     bhy2_delay_us_fptr_t delay_us,
                     uint32_t read_write_len,
                     void *intf_ptr,
                     struct bhy2_hif_dev *hif)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b087      	sub	sp, #28
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	60b9      	str	r1, [r7, #8]
 8007c74:	607a      	str	r2, [r7, #4]
 8007c76:	603b      	str	r3, [r7, #0]
 8007c78:	4603      	mov	r3, r0
 8007c7a:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	75fb      	strb	r3, [r7, #23]

    if ((hif != NULL) && (read != NULL) && (write != NULL) && (delay_us != NULL))
 8007c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d027      	beq.n	8007cd6 <bhy2_hif_init+0x6a>
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d024      	beq.n	8007cd6 <bhy2_hif_init+0x6a>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d021      	beq.n	8007cd6 <bhy2_hif_init+0x6a>
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d01e      	beq.n	8007cd6 <bhy2_hif_init+0x6a>
    {
        hif->read = read;
 8007c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c9a:	68ba      	ldr	r2, [r7, #8]
 8007c9c:	601a      	str	r2, [r3, #0]
        hif->write = write;
 8007c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ca0:	687a      	ldr	r2, [r7, #4]
 8007ca2:	605a      	str	r2, [r3, #4]
        hif->delay_us = delay_us;
 8007ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ca6:	683a      	ldr	r2, [r7, #0]
 8007ca8:	609a      	str	r2, [r3, #8]
        hif->intf_ptr = intf_ptr;
 8007caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cae:	611a      	str	r2, [r3, #16]
        hif->intf = intf;
 8007cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cb2:	7bfa      	ldrb	r2, [r7, #15]
 8007cb4:	731a      	strb	r2, [r3, #12]
        if (read_write_len % 4)
 8007cb6:	6a3b      	ldr	r3, [r7, #32]
 8007cb8:	f003 0303 	and.w	r3, r3, #3
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d006      	beq.n	8007cce <bhy2_hif_init+0x62>
        {
            hif->read_write_len = ((read_write_len >> 2) + 1) << 2;
 8007cc0:	6a3b      	ldr	r3, [r7, #32]
 8007cc2:	089b      	lsrs	r3, r3, #2
 8007cc4:	3301      	adds	r3, #1
 8007cc6:	009a      	lsls	r2, r3, #2
 8007cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cca:	619a      	str	r2, [r3, #24]
        if (read_write_len % 4)
 8007ccc:	e005      	b.n	8007cda <bhy2_hif_init+0x6e>
        }
        else
        {
            hif->read_write_len = read_write_len;
 8007cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cd0:	6a3a      	ldr	r2, [r7, #32]
 8007cd2:	619a      	str	r2, [r3, #24]
        if (read_write_len % 4)
 8007cd4:	e001      	b.n	8007cda <bhy2_hif_init+0x6e>
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8007cd6:	23ff      	movs	r3, #255	; 0xff
 8007cd8:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8007cda:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	371c      	adds	r7, #28
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce8:	4770      	bx	lr

08007cea <bhy2_hif_get_regs>:

int8_t bhy2_hif_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, struct bhy2_hif_dev *hif)
{
 8007cea:	b590      	push	{r4, r7, lr}
 8007cec:	b087      	sub	sp, #28
 8007cee:	af00      	add	r7, sp, #0
 8007cf0:	60b9      	str	r1, [r7, #8]
 8007cf2:	607a      	str	r2, [r7, #4]
 8007cf4:	603b      	str	r3, [r7, #0]
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	75fb      	strb	r3, [r7, #23]

    if ((hif != NULL) && (hif->read != NULL) && (reg_data != NULL))
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d022      	beq.n	8007d4a <bhy2_hif_get_regs+0x60>
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d01e      	beq.n	8007d4a <bhy2_hif_get_regs+0x60>
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d01b      	beq.n	8007d4a <bhy2_hif_get_regs+0x60>
    {
        if (hif->intf == BHY2_SPI_INTERFACE)
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	7b1b      	ldrb	r3, [r3, #12]
 8007d16:	2b01      	cmp	r3, #1
 8007d18:	d103      	bne.n	8007d22 <bhy2_hif_get_regs+0x38>
        {
            reg_addr |= BHY2_SPI_RD_MASK;
 8007d1a:	7bfb      	ldrb	r3, [r7, #15]
 8007d1c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007d20:	73fb      	strb	r3, [r7, #15]
        }

        hif->intf_rslt = hif->read(reg_addr, reg_data, length, hif->intf_ptr);
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	681c      	ldr	r4, [r3, #0]
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	691b      	ldr	r3, [r3, #16]
 8007d2a:	7bf8      	ldrb	r0, [r7, #15]
 8007d2c:	687a      	ldr	r2, [r7, #4]
 8007d2e:	68b9      	ldr	r1, [r7, #8]
 8007d30:	47a0      	blx	r4
 8007d32:	4603      	mov	r3, r0
 8007d34:	461a      	mov	r2, r3
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	751a      	strb	r2, [r3, #20]
        if (hif->intf_rslt != BHY2_INTF_RET_SUCCESS)
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d004      	beq.n	8007d4e <bhy2_hif_get_regs+0x64>
        {
            rslt = BHY2_E_IO;
 8007d44:	23fd      	movs	r3, #253	; 0xfd
 8007d46:	75fb      	strb	r3, [r7, #23]
        if (hif->intf_rslt != BHY2_INTF_RET_SUCCESS)
 8007d48:	e001      	b.n	8007d4e <bhy2_hif_get_regs+0x64>
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8007d4a:	23ff      	movs	r3, #255	; 0xff
 8007d4c:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8007d4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007d52:	4618      	mov	r0, r3
 8007d54:	371c      	adds	r7, #28
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd90      	pop	{r4, r7, pc}

08007d5a <bhy2_hif_set_regs>:

int8_t bhy2_hif_set_regs(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, struct bhy2_hif_dev *hif)
{
 8007d5a:	b590      	push	{r4, r7, lr}
 8007d5c:	b087      	sub	sp, #28
 8007d5e:	af00      	add	r7, sp, #0
 8007d60:	60b9      	str	r1, [r7, #8]
 8007d62:	607a      	str	r2, [r7, #4]
 8007d64:	603b      	str	r3, [r7, #0]
 8007d66:	4603      	mov	r3, r0
 8007d68:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	75fb      	strb	r3, [r7, #23]

    if ((hif != NULL) && (hif->read != NULL) && (reg_data != NULL))
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d022      	beq.n	8007dba <bhy2_hif_set_regs+0x60>
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d01e      	beq.n	8007dba <bhy2_hif_set_regs+0x60>
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d01b      	beq.n	8007dba <bhy2_hif_set_regs+0x60>
    {
        if (hif->intf == BHY2_SPI_INTERFACE)
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	7b1b      	ldrb	r3, [r3, #12]
 8007d86:	2b01      	cmp	r3, #1
 8007d88:	d103      	bne.n	8007d92 <bhy2_hif_set_regs+0x38>
        {
            reg_addr &= BHY2_SPI_WR_MASK;
 8007d8a:	7bfb      	ldrb	r3, [r7, #15]
 8007d8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d90:	73fb      	strb	r3, [r7, #15]
        }

        hif->intf_rslt = hif->write(reg_addr, reg_data, length, hif->intf_ptr);
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	685c      	ldr	r4, [r3, #4]
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	691b      	ldr	r3, [r3, #16]
 8007d9a:	7bf8      	ldrb	r0, [r7, #15]
 8007d9c:	687a      	ldr	r2, [r7, #4]
 8007d9e:	68b9      	ldr	r1, [r7, #8]
 8007da0:	47a0      	blx	r4
 8007da2:	4603      	mov	r3, r0
 8007da4:	461a      	mov	r2, r3
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	751a      	strb	r2, [r3, #20]
        if (hif->intf_rslt != BHY2_INTF_RET_SUCCESS)
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d004      	beq.n	8007dbe <bhy2_hif_set_regs+0x64>
        {
            rslt = BHY2_E_IO;
 8007db4:	23fd      	movs	r3, #253	; 0xfd
 8007db6:	75fb      	strb	r3, [r7, #23]
        if (hif->intf_rslt != BHY2_INTF_RET_SUCCESS)
 8007db8:	e001      	b.n	8007dbe <bhy2_hif_set_regs+0x64>
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8007dba:	23ff      	movs	r3, #255	; 0xff
 8007dbc:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8007dbe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	371c      	adds	r7, #28
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd90      	pop	{r4, r7, pc}

08007dca <bhy2_hif_delay_us>:

int8_t bhy2_hif_delay_us(uint32_t period_us, const struct bhy2_hif_dev *hif)
{
 8007dca:	b580      	push	{r7, lr}
 8007dcc:	b084      	sub	sp, #16
 8007dce:	af00      	add	r7, sp, #0
 8007dd0:	6078      	str	r0, [r7, #4]
 8007dd2:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	73fb      	strb	r3, [r7, #15]

    if ((hif != NULL) && (hif->delay_us != NULL))
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d00b      	beq.n	8007df6 <bhy2_hif_delay_us+0x2c>
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	689b      	ldr	r3, [r3, #8]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d007      	beq.n	8007df6 <bhy2_hif_delay_us+0x2c>
    {
        hif->delay_us(period_us, hif->intf_ptr);
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	689b      	ldr	r3, [r3, #8]
 8007dea:	683a      	ldr	r2, [r7, #0]
 8007dec:	6912      	ldr	r2, [r2, #16]
 8007dee:	4611      	mov	r1, r2
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	4798      	blx	r3
 8007df4:	e001      	b.n	8007dfa <bhy2_hif_delay_us+0x30>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8007df6:	23ff      	movs	r3, #255	; 0xff
 8007df8:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8007dfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	3710      	adds	r7, #16
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}

08007e06 <bhy2_hif_exec_cmd>:

int8_t bhy2_hif_exec_cmd(uint16_t cmd, const uint8_t *payload, uint32_t length, struct bhy2_hif_dev *hif)
{
 8007e06:	b580      	push	{r7, lr}
 8007e08:	b088      	sub	sp, #32
 8007e0a:	af04      	add	r7, sp, #16
 8007e0c:	60b9      	str	r1, [r7, #8]
 8007e0e:	607a      	str	r2, [r7, #4]
 8007e10:	603b      	str	r3, [r7, #0]
 8007e12:	4603      	mov	r3, r0
 8007e14:	81fb      	strh	r3, [r7, #14]
    return bhy2_hif_exec_cmd_generic(cmd, payload, length, NULL, 0, 0, hif);
 8007e16:	89f8      	ldrh	r0, [r7, #14]
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	9302      	str	r3, [sp, #8]
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	9301      	str	r3, [sp, #4]
 8007e20:	2300      	movs	r3, #0
 8007e22:	9300      	str	r3, [sp, #0]
 8007e24:	2300      	movs	r3, #0
 8007e26:	687a      	ldr	r2, [r7, #4]
 8007e28:	68b9      	ldr	r1, [r7, #8]
 8007e2a:	f7ff fc37 	bl	800769c <bhy2_hif_exec_cmd_generic>
 8007e2e:	4603      	mov	r3, r0
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	3710      	adds	r7, #16
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bd80      	pop	{r7, pc}

08007e38 <bhy2_hif_get_parameter>:
int8_t bhy2_hif_get_parameter(uint16_t param,
                              uint8_t *payload,
                              uint32_t payload_len,
                              uint32_t *actual_len,
                              struct bhy2_hif_dev *hif)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b088      	sub	sp, #32
 8007e3c:	af02      	add	r7, sp, #8
 8007e3e:	60b9      	str	r1, [r7, #8]
 8007e40:	607a      	str	r2, [r7, #4]
 8007e42:	603b      	str	r3, [r7, #0]
 8007e44:	4603      	mov	r3, r0
 8007e46:	81fb      	strh	r3, [r7, #14]
    uint16_t code = 0;
 8007e48:	2300      	movs	r3, #0
 8007e4a:	82bb      	strh	r3, [r7, #20]
    uint8_t prev_hif_ctrl, hif_ctrl;
    int8_t rslt = BHY2_OK;
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	75fb      	strb	r3, [r7, #23]

    if ((hif != NULL) && (payload != NULL) && (actual_len != NULL))
 8007e50:	6a3b      	ldr	r3, [r7, #32]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d06e      	beq.n	8007f34 <bhy2_hif_get_parameter+0xfc>
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d06b      	beq.n	8007f34 <bhy2_hif_get_parameter+0xfc>
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d068      	beq.n	8007f34 <bhy2_hif_get_parameter+0xfc>
    {
        *actual_len = 0;
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	2200      	movs	r2, #0
 8007e66:	601a      	str	r2, [r3, #0]

        rslt = bhy2_hif_get_regs(BHY2_REG_HOST_INTERFACE_CTRL, &hif_ctrl, 1, hif);
 8007e68:	f107 0113 	add.w	r1, r7, #19
 8007e6c:	6a3b      	ldr	r3, [r7, #32]
 8007e6e:	2201      	movs	r2, #1
 8007e70:	2006      	movs	r0, #6
 8007e72:	f7ff ff3a 	bl	8007cea <bhy2_hif_get_regs>
 8007e76:	4603      	mov	r3, r0
 8007e78:	75fb      	strb	r3, [r7, #23]
        if (rslt == BHY2_OK)
 8007e7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d15b      	bne.n	8007f3a <bhy2_hif_get_parameter+0x102>
        {
            prev_hif_ctrl = hif_ctrl;
 8007e82:	7cfb      	ldrb	r3, [r7, #19]
 8007e84:	75bb      	strb	r3, [r7, #22]
            hif_ctrl &= (uint8_t)(~(BHY2_HIF_CTRL_ASYNC_STATUS_CHANNEL)); /* Change the Status FIFO to synchronous mode
 8007e86:	7cfb      	ldrb	r3, [r7, #19]
 8007e88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e8c:	b2db      	uxtb	r3, r3
 8007e8e:	74fb      	strb	r3, [r7, #19]
                                                                           * */
            if (hif_ctrl != prev_hif_ctrl)
 8007e90:	7cfb      	ldrb	r3, [r7, #19]
 8007e92:	7dba      	ldrb	r2, [r7, #22]
 8007e94:	429a      	cmp	r2, r3
 8007e96:	d008      	beq.n	8007eaa <bhy2_hif_get_parameter+0x72>
            {
                rslt = bhy2_hif_set_regs(BHY2_REG_HOST_INTERFACE_CTRL, &hif_ctrl, 1, hif);
 8007e98:	f107 0113 	add.w	r1, r7, #19
 8007e9c:	6a3b      	ldr	r3, [r7, #32]
 8007e9e:	2201      	movs	r2, #1
 8007ea0:	2006      	movs	r0, #6
 8007ea2:	f7ff ff5a 	bl	8007d5a <bhy2_hif_set_regs>
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	75fb      	strb	r3, [r7, #23]
            }

            if (rslt == BHY2_OK)
 8007eaa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d143      	bne.n	8007f3a <bhy2_hif_get_parameter+0x102>
            {
                rslt = bhy2_hif_exec_cmd(param | BHY2_PARAM_READ_MASK, NULL, 0, hif);
 8007eb2:	89fb      	ldrh	r3, [r7, #14]
 8007eb4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007eb8:	b298      	uxth	r0, r3
 8007eba:	6a3b      	ldr	r3, [r7, #32]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	2100      	movs	r1, #0
 8007ec0:	f7ff ffa1 	bl	8007e06 <bhy2_hif_exec_cmd>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	75fb      	strb	r3, [r7, #23]

                if (rslt == BHY2_OK)
 8007ec8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d134      	bne.n	8007f3a <bhy2_hif_get_parameter+0x102>
                {
                    rslt = bhy2_wait_status_ready(hif);
 8007ed0:	6a38      	ldr	r0, [r7, #32]
 8007ed2:	f7ff fdbf 	bl	8007a54 <bhy2_wait_status_ready>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	75fb      	strb	r3, [r7, #23]

                    if (rslt == BHY2_OK)
 8007eda:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d12b      	bne.n	8007f3a <bhy2_hif_get_parameter+0x102>
                    {
                        rslt = bhy2_hif_get_status_fifo(&code, payload, payload_len, actual_len, hif);
 8007ee2:	f107 0014 	add.w	r0, r7, #20
 8007ee6:	6a3b      	ldr	r3, [r7, #32]
 8007ee8:	9300      	str	r3, [sp, #0]
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	687a      	ldr	r2, [r7, #4]
 8007eee:	68b9      	ldr	r1, [r7, #8]
 8007ef0:	f000 f94b 	bl	800818a <bhy2_hif_get_status_fifo>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	75fb      	strb	r3, [r7, #23]

                        if (rslt == BHY2_OK)
 8007ef8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d11c      	bne.n	8007f3a <bhy2_hif_get_parameter+0x102>
                        {
                            if (hif_ctrl != prev_hif_ctrl)
 8007f00:	7cfb      	ldrb	r3, [r7, #19]
 8007f02:	7dba      	ldrb	r2, [r7, #22]
 8007f04:	429a      	cmp	r2, r3
 8007f06:	d00a      	beq.n	8007f1e <bhy2_hif_get_parameter+0xe6>
                            {
                                hif_ctrl = prev_hif_ctrl;
 8007f08:	7dbb      	ldrb	r3, [r7, #22]
 8007f0a:	74fb      	strb	r3, [r7, #19]
                                rslt = bhy2_hif_set_regs(BHY2_REG_HOST_INTERFACE_CTRL, &hif_ctrl, 1, hif);
 8007f0c:	f107 0113 	add.w	r1, r7, #19
 8007f10:	6a3b      	ldr	r3, [r7, #32]
 8007f12:	2201      	movs	r2, #1
 8007f14:	2006      	movs	r0, #6
 8007f16:	f7ff ff20 	bl	8007d5a <bhy2_hif_set_regs>
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	75fb      	strb	r3, [r7, #23]
                            }

                            if (rslt == BHY2_OK)
 8007f1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d109      	bne.n	8007f3a <bhy2_hif_get_parameter+0x102>
                            {
                                if (code != param)
 8007f26:	8abb      	ldrh	r3, [r7, #20]
 8007f28:	89fa      	ldrh	r2, [r7, #14]
 8007f2a:	429a      	cmp	r2, r3
 8007f2c:	d005      	beq.n	8007f3a <bhy2_hif_get_parameter+0x102>
                                {
                                    rslt = BHY2_E_TIMEOUT;
 8007f2e:	23fb      	movs	r3, #251	; 0xfb
 8007f30:	75fb      	strb	r3, [r7, #23]
        if (rslt == BHY2_OK)
 8007f32:	e002      	b.n	8007f3a <bhy2_hif_get_parameter+0x102>
            }
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8007f34:	23ff      	movs	r3, #255	; 0xff
 8007f36:	75fb      	strb	r3, [r7, #23]
 8007f38:	e000      	b.n	8007f3c <bhy2_hif_get_parameter+0x104>
        if (rslt == BHY2_OK)
 8007f3a:	bf00      	nop
    }

    return rslt;
 8007f3c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	3718      	adds	r7, #24
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}

08007f48 <bhy2_hif_get_product_id>:
{
    return bhy2_hif_exec_cmd(param, payload, length, hif);
}

int8_t bhy2_hif_get_product_id(uint8_t *product_id, struct bhy2_hif_dev *hif)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b082      	sub	sp, #8
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
 8007f50:	6039      	str	r1, [r7, #0]
    return bhy2_hif_get_regs(BHY2_REG_PRODUCT_ID, product_id, 1, hif);
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	2201      	movs	r2, #1
 8007f56:	6879      	ldr	r1, [r7, #4]
 8007f58:	201c      	movs	r0, #28
 8007f5a:	f7ff fec6 	bl	8007cea <bhy2_hif_get_regs>
 8007f5e:	4603      	mov	r3, r0
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	3708      	adds	r7, #8
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}

08007f68 <bhy2_hif_get_kernel_version>:

    return rslt;
}

int8_t bhy2_hif_get_kernel_version(uint16_t *kernel_version, struct bhy2_hif_dev *hif)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b084      	sub	sp, #16
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
 8007f70:	6039      	str	r1, [r7, #0]
    uint8_t buffer[2];
    int8_t rslt;

    if (kernel_version != NULL)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d013      	beq.n	8007fa0 <bhy2_hif_get_kernel_version+0x38>
    {
        rslt = bhy2_hif_get_regs(BHY2_REG_KERNEL_VERSION_0, buffer, 2, hif);
 8007f78:	f107 010c 	add.w	r1, r7, #12
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	2202      	movs	r2, #2
 8007f80:	2020      	movs	r0, #32
 8007f82:	f7ff feb2 	bl	8007cea <bhy2_hif_get_regs>
 8007f86:	4603      	mov	r3, r0
 8007f88:	73fb      	strb	r3, [r7, #15]
        *kernel_version = BHY2_LE2U16(buffer);
 8007f8a:	7b3b      	ldrb	r3, [r7, #12]
 8007f8c:	b21a      	sxth	r2, r3
 8007f8e:	7b7b      	ldrb	r3, [r7, #13]
 8007f90:	021b      	lsls	r3, r3, #8
 8007f92:	b21b      	sxth	r3, r3
 8007f94:	4313      	orrs	r3, r2
 8007f96:	b21b      	sxth	r3, r3
 8007f98:	b29a      	uxth	r2, r3
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	801a      	strh	r2, [r3, #0]
 8007f9e:	e001      	b.n	8007fa4 <bhy2_hif_get_kernel_version+0x3c>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8007fa0:	23ff      	movs	r3, #255	; 0xff
 8007fa2:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8007fa4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	3710      	adds	r7, #16
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}

08007fb0 <bhy2_hif_get_boot_status>:

    return rslt;
}

int8_t bhy2_hif_get_boot_status(uint8_t *boot_status, struct bhy2_hif_dev *hif)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b082      	sub	sp, #8
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
 8007fb8:	6039      	str	r1, [r7, #0]
    return bhy2_hif_get_regs(BHY2_REG_BOOT_STATUS, boot_status, 1, hif);
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	2201      	movs	r2, #1
 8007fbe:	6879      	ldr	r1, [r7, #4]
 8007fc0:	2025      	movs	r0, #37	; 0x25
 8007fc2:	f7ff fe92 	bl	8007cea <bhy2_hif_get_regs>
 8007fc6:	4603      	mov	r3, r0
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	3708      	adds	r7, #8
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}

08007fd0 <bhy2_hif_get_interrupt_status>:
{
    return bhy2_hif_get_regs(BHY2_REG_HOST_STATUS, host_status, 1, hif);
}

int8_t bhy2_hif_get_interrupt_status(uint8_t *int_status, struct bhy2_hif_dev *hif)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b082      	sub	sp, #8
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
 8007fd8:	6039      	str	r1, [r7, #0]
    return bhy2_hif_get_regs(BHY2_REG_INT_STATUS, int_status, 1, hif);
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	2201      	movs	r2, #1
 8007fde:	6879      	ldr	r1, [r7, #4]
 8007fe0:	202d      	movs	r0, #45	; 0x2d
 8007fe2:	f7ff fe82 	bl	8007cea <bhy2_hif_get_regs>
 8007fe6:	4603      	mov	r3, r0
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	3708      	adds	r7, #8
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}

08007ff0 <bhy2_hif_reset>:
{
    return bhy2_hif_get_regs(BHY2_REG_ERROR_VALUE, fw_error, 1, hif);
}

int8_t bhy2_hif_reset(struct bhy2_hif_dev *hif)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b084      	sub	sp, #16
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
    uint8_t reset_req = BHY2_REQUEST_RESET;
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	72fb      	strb	r3, [r7, #11]
    uint8_t boot_status = 0;
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	72bb      	strb	r3, [r7, #10]
    int8_t rslt;

    /* Timeout at 150ms (15 * 10000 microseconds) */
    uint16_t count = 15;
 8008000:	230f      	movs	r3, #15
 8008002:	81bb      	strh	r3, [r7, #12]

    rslt = bhy2_hif_set_regs(BHY2_REG_RESET_REQ, &reset_req, 1, hif);
 8008004:	f107 010b 	add.w	r1, r7, #11
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2201      	movs	r2, #1
 800800c:	2014      	movs	r0, #20
 800800e:	f7ff fea4 	bl	8007d5a <bhy2_hif_set_regs>
 8008012:	4603      	mov	r3, r0
 8008014:	73fb      	strb	r3, [r7, #15]
    if (rslt == BHY2_OK)
 8008016:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d12b      	bne.n	8008076 <bhy2_hif_reset+0x86>
    {
        while (count--)
 800801e:	e01c      	b.n	800805a <bhy2_hif_reset+0x6a>
        {
            rslt = bhy2_hif_delay_us(10000, hif);
 8008020:	6879      	ldr	r1, [r7, #4]
 8008022:	f242 7010 	movw	r0, #10000	; 0x2710
 8008026:	f7ff fed0 	bl	8007dca <bhy2_hif_delay_us>
 800802a:	4603      	mov	r3, r0
 800802c:	73fb      	strb	r3, [r7, #15]
            if (rslt == BHY2_OK)
 800802e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d111      	bne.n	800805a <bhy2_hif_reset+0x6a>
            {
                rslt = bhy2_hif_get_regs(BHY2_REG_BOOT_STATUS, &boot_status, 1, hif);
 8008036:	f107 010a 	add.w	r1, r7, #10
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2201      	movs	r2, #1
 800803e:	2025      	movs	r0, #37	; 0x25
 8008040:	f7ff fe53 	bl	8007cea <bhy2_hif_get_regs>
 8008044:	4603      	mov	r3, r0
 8008046:	73fb      	strb	r3, [r7, #15]
                if (rslt == BHY2_OK)
 8008048:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d104      	bne.n	800805a <bhy2_hif_reset+0x6a>
                {
                    if (boot_status & BHY2_BST_HOST_INTERFACE_READY)
 8008050:	7abb      	ldrb	r3, [r7, #10]
 8008052:	f003 0310 	and.w	r3, r3, #16
 8008056:	2b00      	cmp	r3, #0
 8008058:	d105      	bne.n	8008066 <bhy2_hif_reset+0x76>
        while (count--)
 800805a:	89bb      	ldrh	r3, [r7, #12]
 800805c:	1e5a      	subs	r2, r3, #1
 800805e:	81ba      	strh	r2, [r7, #12]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d1dd      	bne.n	8008020 <bhy2_hif_reset+0x30>
 8008064:	e000      	b.n	8008068 <bhy2_hif_reset+0x78>
                    {
                        break;
 8008066:	bf00      	nop
                }
            }

        }

        if (!(boot_status & BHY2_BST_HOST_INTERFACE_READY))
 8008068:	7abb      	ldrb	r3, [r7, #10]
 800806a:	f003 0310 	and.w	r3, r3, #16
 800806e:	2b00      	cmp	r3, #0
 8008070:	d101      	bne.n	8008076 <bhy2_hif_reset+0x86>
        {
            rslt = BHY2_E_TIMEOUT;
 8008072:	23fb      	movs	r3, #251	; 0xfb
 8008074:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8008076:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800807a:	4618      	mov	r0, r3
 800807c:	3710      	adds	r7, #16
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}

08008082 <bhy2_hif_upload_firmware_to_ram>:

int8_t bhy2_hif_upload_firmware_to_ram(const uint8_t *firmware, uint32_t length, struct bhy2_hif_dev *hif)
{
 8008082:	b580      	push	{r7, lr}
 8008084:	b086      	sub	sp, #24
 8008086:	af00      	add	r7, sp, #0
 8008088:	60f8      	str	r0, [r7, #12]
 800808a:	60b9      	str	r1, [r7, #8]
 800808c:	607a      	str	r2, [r7, #4]
    int8_t rslt = BHY2_OK;
 800808e:	2300      	movs	r3, #0
 8008090:	75fb      	strb	r3, [r7, #23]
    uint16_t magic;

    if ((hif != NULL) && (firmware != NULL))
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d027      	beq.n	80080e8 <bhy2_hif_upload_firmware_to_ram+0x66>
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d024      	beq.n	80080e8 <bhy2_hif_upload_firmware_to_ram+0x66>
    {
        magic = BHY2_LE2U16(firmware);
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	781b      	ldrb	r3, [r3, #0]
 80080a2:	b21a      	sxth	r2, r3
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	3301      	adds	r3, #1
 80080a8:	781b      	ldrb	r3, [r3, #0]
 80080aa:	021b      	lsls	r3, r3, #8
 80080ac:	b21b      	sxth	r3, r3
 80080ae:	4313      	orrs	r3, r2
 80080b0:	b21b      	sxth	r3, r3
 80080b2:	82bb      	strh	r3, [r7, #20]
        if (magic != BHY2_FW_MAGIC)
 80080b4:	8abb      	ldrh	r3, [r7, #20]
 80080b6:	f246 622b 	movw	r2, #26155	; 0x662b
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d002      	beq.n	80080c4 <bhy2_hif_upload_firmware_to_ram+0x42>
        {
            rslt = BHY2_E_MAGIC;
 80080be:	23fc      	movs	r3, #252	; 0xfc
 80080c0:	75fb      	strb	r3, [r7, #23]
        if (magic != BHY2_FW_MAGIC)
 80080c2:	e014      	b.n	80080ee <bhy2_hif_upload_firmware_to_ram+0x6c>
        }
        else
        {
            rslt = bhy2_hif_exec_cmd(BHY2_CMD_UPLOAD_TO_PROGRAM_RAM, firmware, length, hif);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	68ba      	ldr	r2, [r7, #8]
 80080c8:	68f9      	ldr	r1, [r7, #12]
 80080ca:	2002      	movs	r0, #2
 80080cc:	f7ff fe9b 	bl	8007e06 <bhy2_hif_exec_cmd>
 80080d0:	4603      	mov	r3, r0
 80080d2:	75fb      	strb	r3, [r7, #23]
            if (rslt == BHY2_OK)
 80080d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d108      	bne.n	80080ee <bhy2_hif_upload_firmware_to_ram+0x6c>
            {
                rslt = bhy2_hif_check_boot_status_ram(hif);
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f7ff fcf2 	bl	8007ac6 <bhy2_hif_check_boot_status_ram>
 80080e2:	4603      	mov	r3, r0
 80080e4:	75fb      	strb	r3, [r7, #23]
        if (magic != BHY2_FW_MAGIC)
 80080e6:	e002      	b.n	80080ee <bhy2_hif_upload_firmware_to_ram+0x6c>
            }
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 80080e8:	23ff      	movs	r3, #255	; 0xff
 80080ea:	75fb      	strb	r3, [r7, #23]
 80080ec:	e000      	b.n	80080f0 <bhy2_hif_upload_firmware_to_ram+0x6e>
        if (magic != BHY2_FW_MAGIC)
 80080ee:	bf00      	nop
    }

    return rslt;
 80080f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	3718      	adds	r7, #24
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}

080080fc <bhy2_hif_boot_program_ram>:

    return rslt;
}

int8_t bhy2_hif_boot_program_ram(struct bhy2_hif_dev *hif)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b084      	sub	sp, #16
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    rslt = bhy2_hif_exec_cmd(BHY2_CMD_BOOT_PROGRAM_RAM, NULL, 0, hif);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2200      	movs	r2, #0
 8008108:	2100      	movs	r1, #0
 800810a:	2003      	movs	r0, #3
 800810c:	f7ff fe7b 	bl	8007e06 <bhy2_hif_exec_cmd>
 8008110:	4603      	mov	r3, r0
 8008112:	73fb      	strb	r3, [r7, #15]
    if (rslt == BHY2_OK)
 8008114:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d104      	bne.n	8008126 <bhy2_hif_boot_program_ram+0x2a>
    {
        rslt = bhy2_hif_check_boot_status_ram(hif);
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f7ff fcd2 	bl	8007ac6 <bhy2_hif_check_boot_status_ram>
 8008122:	4603      	mov	r3, r0
 8008124:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8008126:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800812a:	4618      	mov	r0, r3
 800812c:	3710      	adds	r7, #16
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}

08008132 <bhy2_hif_get_wakeup_fifo>:
int8_t bhy2_hif_get_wakeup_fifo(uint8_t *fifo,
                                uint32_t fifo_len,
                                uint32_t *bytes_read,
                                uint32_t *bytes_remain,
                                struct bhy2_hif_dev *hif)
{
 8008132:	b580      	push	{r7, lr}
 8008134:	b086      	sub	sp, #24
 8008136:	af02      	add	r7, sp, #8
 8008138:	60f8      	str	r0, [r7, #12]
 800813a:	60b9      	str	r1, [r7, #8]
 800813c:	607a      	str	r2, [r7, #4]
 800813e:	603b      	str	r3, [r7, #0]
    return bhy2_hif_get_fifo(BHY2_REG_CHAN_FIFO_W, fifo, fifo_len, bytes_read, bytes_remain, hif);
 8008140:	69bb      	ldr	r3, [r7, #24]
 8008142:	9301      	str	r3, [sp, #4]
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	9300      	str	r3, [sp, #0]
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	68ba      	ldr	r2, [r7, #8]
 800814c:	68f9      	ldr	r1, [r7, #12]
 800814e:	2001      	movs	r0, #1
 8008150:	f7ff fd00 	bl	8007b54 <bhy2_hif_get_fifo>
 8008154:	4603      	mov	r3, r0
}
 8008156:	4618      	mov	r0, r3
 8008158:	3710      	adds	r7, #16
 800815a:	46bd      	mov	sp, r7
 800815c:	bd80      	pop	{r7, pc}

0800815e <bhy2_hif_get_nonwakeup_fifo>:
int8_t bhy2_hif_get_nonwakeup_fifo(uint8_t *fifo,
                                   uint32_t fifo_len,
                                   uint32_t *bytes_read,
                                   uint32_t *bytes_remain,
                                   struct bhy2_hif_dev *hif)
{
 800815e:	b580      	push	{r7, lr}
 8008160:	b086      	sub	sp, #24
 8008162:	af02      	add	r7, sp, #8
 8008164:	60f8      	str	r0, [r7, #12]
 8008166:	60b9      	str	r1, [r7, #8]
 8008168:	607a      	str	r2, [r7, #4]
 800816a:	603b      	str	r3, [r7, #0]
    return bhy2_hif_get_fifo(BHY2_REG_CHAN_FIFO_NW, fifo, fifo_len, bytes_read, bytes_remain, hif);
 800816c:	69bb      	ldr	r3, [r7, #24]
 800816e:	9301      	str	r3, [sp, #4]
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	9300      	str	r3, [sp, #0]
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	68ba      	ldr	r2, [r7, #8]
 8008178:	68f9      	ldr	r1, [r7, #12]
 800817a:	2002      	movs	r0, #2
 800817c:	f7ff fcea 	bl	8007b54 <bhy2_hif_get_fifo>
 8008180:	4603      	mov	r3, r0
}
 8008182:	4618      	mov	r0, r3
 8008184:	3710      	adds	r7, #16
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}

0800818a <bhy2_hif_get_status_fifo>:
int8_t bhy2_hif_get_status_fifo(uint16_t *status_code,
                                uint8_t *fifo,
                                uint32_t fifo_len,
                                uint32_t *bytes_remain,
                                struct bhy2_hif_dev *hif)
{
 800818a:	b580      	push	{r7, lr}
 800818c:	b086      	sub	sp, #24
 800818e:	af00      	add	r7, sp, #0
 8008190:	60f8      	str	r0, [r7, #12]
 8008192:	60b9      	str	r1, [r7, #8]
 8008194:	607a      	str	r2, [r7, #4]
 8008196:	603b      	str	r3, [r7, #0]
    int8_t rslt;
    uint8_t tmp_fifo[4];

    rslt = bhy2_hif_get_regs(BHY2_REG_CHAN_STATUS, tmp_fifo, 4, hif);
 8008198:	f107 0110 	add.w	r1, r7, #16
 800819c:	6a3b      	ldr	r3, [r7, #32]
 800819e:	2204      	movs	r2, #4
 80081a0:	2003      	movs	r0, #3
 80081a2:	f7ff fda2 	bl	8007cea <bhy2_hif_get_regs>
 80081a6:	4603      	mov	r3, r0
 80081a8:	75fb      	strb	r3, [r7, #23]
    if (rslt == BHY2_OK)
 80081aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d130      	bne.n	8008214 <bhy2_hif_get_status_fifo+0x8a>
    {
        *status_code = BHY2_LE2U16(&tmp_fifo[0]);
 80081b2:	7c3b      	ldrb	r3, [r7, #16]
 80081b4:	b21a      	sxth	r2, r3
 80081b6:	f107 0310 	add.w	r3, r7, #16
 80081ba:	3301      	adds	r3, #1
 80081bc:	781b      	ldrb	r3, [r3, #0]
 80081be:	021b      	lsls	r3, r3, #8
 80081c0:	b21b      	sxth	r3, r3
 80081c2:	4313      	orrs	r3, r2
 80081c4:	b21b      	sxth	r3, r3
 80081c6:	b29a      	uxth	r2, r3
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	801a      	strh	r2, [r3, #0]
        *bytes_remain = BHY2_LE2U16(&tmp_fifo[2]);
 80081cc:	7cbb      	ldrb	r3, [r7, #18]
 80081ce:	b21a      	sxth	r2, r3
 80081d0:	f107 0310 	add.w	r3, r7, #16
 80081d4:	3302      	adds	r3, #2
 80081d6:	3301      	adds	r3, #1
 80081d8:	781b      	ldrb	r3, [r3, #0]
 80081da:	021b      	lsls	r3, r3, #8
 80081dc:	b21b      	sxth	r3, r3
 80081de:	4313      	orrs	r3, r2
 80081e0:	b21b      	sxth	r3, r3
 80081e2:	b29b      	uxth	r3, r3
 80081e4:	461a      	mov	r2, r3
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	601a      	str	r2, [r3, #0]
        if (*bytes_remain != 0)
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d010      	beq.n	8008214 <bhy2_hif_get_status_fifo+0x8a>
        {
            if (fifo_len < *bytes_remain)
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	687a      	ldr	r2, [r7, #4]
 80081f8:	429a      	cmp	r2, r3
 80081fa:	d202      	bcs.n	8008202 <bhy2_hif_get_status_fifo+0x78>
            {
                rslt = BHY2_E_BUFFER;
 80081fc:	23fa      	movs	r3, #250	; 0xfa
 80081fe:	75fb      	strb	r3, [r7, #23]
 8008200:	e008      	b.n	8008214 <bhy2_hif_get_status_fifo+0x8a>
            }
            else
            {
                rslt = bhy2_hif_get_regs(BHY2_REG_CHAN_STATUS, fifo, *bytes_remain, hif);
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	681a      	ldr	r2, [r3, #0]
 8008206:	6a3b      	ldr	r3, [r7, #32]
 8008208:	68b9      	ldr	r1, [r7, #8]
 800820a:	2003      	movs	r0, #3
 800820c:	f7ff fd6d 	bl	8007cea <bhy2_hif_get_regs>
 8008210:	4603      	mov	r3, r0
 8008212:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    return rslt;
 8008214:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008218:	4618      	mov	r0, r3
 800821a:	3718      	adds	r7, #24
 800821c:	46bd      	mov	sp, r7
 800821e:	bd80      	pop	{r7, pc}

08008220 <bhy2_hif_get_status_fifo_async>:
int8_t bhy2_hif_get_status_fifo_async(uint8_t *fifo,
                                      uint32_t fifo_len,
                                      uint32_t *bytes_read,
                                      uint32_t *bytes_remain,
                                      struct bhy2_hif_dev *hif)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b086      	sub	sp, #24
 8008224:	af02      	add	r7, sp, #8
 8008226:	60f8      	str	r0, [r7, #12]
 8008228:	60b9      	str	r1, [r7, #8]
 800822a:	607a      	str	r2, [r7, #4]
 800822c:	603b      	str	r3, [r7, #0]
    return bhy2_hif_get_fifo(BHY2_REG_CHAN_STATUS, fifo, fifo_len, bytes_read, bytes_remain, hif);
 800822e:	69bb      	ldr	r3, [r7, #24]
 8008230:	9301      	str	r3, [sp, #4]
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	9300      	str	r3, [sp, #0]
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	68ba      	ldr	r2, [r7, #8]
 800823a:	68f9      	ldr	r1, [r7, #12]
 800823c:	2003      	movs	r0, #3
 800823e:	f7ff fc89 	bl	8007b54 <bhy2_hif_get_fifo>
 8008242:	4603      	mov	r3, r0
}
 8008244:	4618      	mov	r0, r3
 8008246:	3710      	adds	r7, #16
 8008248:	46bd      	mov	sp, r7
 800824a:	bd80      	pop	{r7, pc}

0800824c <bhy2_hif_exec_sensor_conf_cmd>:

int8_t bhy2_hif_exec_sensor_conf_cmd(uint8_t sensor_id,
                                     bhy2_float sample_rate,
                                     uint32_t latency,
                                     struct bhy2_hif_dev *hif)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b088      	sub	sp, #32
 8008250:	af00      	add	r7, sp, #0
 8008252:	4603      	mov	r3, r0
 8008254:	ed87 0a02 	vstr	s0, [r7, #8]
 8008258:	6079      	str	r1, [r7, #4]
 800825a:	603a      	str	r2, [r7, #0]
 800825c:	73fb      	strb	r3, [r7, #15]
    uint8_t tmp_buf[8];
    union bhy2_hif_float_u32 sample_rate_u;

    sample_rate_u.as_float = sample_rate;
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	617b      	str	r3, [r7, #20]

    /* Sample rate is 32bits, latency is 24bits */
    tmp_buf[0] = sensor_id;
 8008262:	7bfb      	ldrb	r3, [r7, #15]
 8008264:	763b      	strb	r3, [r7, #24]
    tmp_buf[1] = (uint8_t)(sample_rate_u.reg & 0xFF);
 8008266:	697b      	ldr	r3, [r7, #20]
 8008268:	b2db      	uxtb	r3, r3
 800826a:	767b      	strb	r3, [r7, #25]
    tmp_buf[2] = (uint8_t)((sample_rate_u.reg >> 8) & 0xFF);
 800826c:	697b      	ldr	r3, [r7, #20]
 800826e:	0a1b      	lsrs	r3, r3, #8
 8008270:	b2db      	uxtb	r3, r3
 8008272:	76bb      	strb	r3, [r7, #26]
    tmp_buf[3] = (uint8_t)((sample_rate_u.reg >> 16) & 0xFF);
 8008274:	697b      	ldr	r3, [r7, #20]
 8008276:	0c1b      	lsrs	r3, r3, #16
 8008278:	b2db      	uxtb	r3, r3
 800827a:	76fb      	strb	r3, [r7, #27]
    tmp_buf[4] = (uint8_t)((sample_rate_u.reg >> 24) & 0xFF);
 800827c:	697b      	ldr	r3, [r7, #20]
 800827e:	0e1b      	lsrs	r3, r3, #24
 8008280:	b2db      	uxtb	r3, r3
 8008282:	773b      	strb	r3, [r7, #28]
    tmp_buf[5] = (uint8_t)(latency & 0xFF);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	b2db      	uxtb	r3, r3
 8008288:	777b      	strb	r3, [r7, #29]
    tmp_buf[6] = (uint8_t)((latency >> 8) & 0xFF);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	0a1b      	lsrs	r3, r3, #8
 800828e:	b2db      	uxtb	r3, r3
 8008290:	77bb      	strb	r3, [r7, #30]
    tmp_buf[7] = (uint8_t)((latency >> 16) & 0xFF);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	0c1b      	lsrs	r3, r3, #16
 8008296:	b2db      	uxtb	r3, r3
 8008298:	77fb      	strb	r3, [r7, #31]

    return bhy2_hif_exec_cmd(BHY2_CMD_CONFIG_SENSOR, tmp_buf, 8, hif);
 800829a:	f107 0118 	add.w	r1, r7, #24
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	2208      	movs	r2, #8
 80082a2:	200d      	movs	r0, #13
 80082a4:	f7ff fdaf 	bl	8007e06 <bhy2_hif_exec_cmd>
 80082a8:	4603      	mov	r3, r0
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	3720      	adds	r7, #32
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}

080082b2 <bhy2_hif_get_sensor_info>:

    return rslt;
}

int8_t bhy2_hif_get_sensor_info(uint8_t sensor_id, struct bhy2_sensor_info *info, struct bhy2_hif_dev *hif)
{
 80082b2:	b580      	push	{r7, lr}
 80082b4:	b090      	sub	sp, #64	; 0x40
 80082b6:	af02      	add	r7, sp, #8
 80082b8:	4603      	mov	r3, r0
 80082ba:	60b9      	str	r1, [r7, #8]
 80082bc:	607a      	str	r2, [r7, #4]
 80082be:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint32_t length;
    uint8_t bytes[28];

    if (info != NULL)
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	f000 80da 	beq.w	800847c <bhy2_hif_get_sensor_info+0x1ca>
    {
        /* Checking for a valid sensor ID */
        if (sensor_id > BHY2_SPECIAL_SENSOR_ID_OFFSET)
 80082c8:	7bfb      	ldrb	r3, [r7, #15]
 80082ca:	2bf5      	cmp	r3, #245	; 0xf5
 80082cc:	d903      	bls.n	80082d6 <bhy2_hif_get_sensor_info+0x24>
        {
            rslt = BHY2_E_INVALID_PARAM;
 80082ce:	23fe      	movs	r3, #254	; 0xfe
 80082d0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80082d4:	e0d5      	b.n	8008482 <bhy2_hif_get_sensor_info+0x1d0>
        }
        else
        {
            rslt = bhy2_hif_get_parameter((uint16_t)(BHY2_PARAM_SENSOR_INFO_0 + sensor_id), bytes, 28, &length, hif);
 80082d6:	7bfb      	ldrb	r3, [r7, #15]
 80082d8:	b29b      	uxth	r3, r3
 80082da:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80082de:	b298      	uxth	r0, r3
 80082e0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80082e4:	f107 0114 	add.w	r1, r7, #20
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	9300      	str	r3, [sp, #0]
 80082ec:	4613      	mov	r3, r2
 80082ee:	221c      	movs	r2, #28
 80082f0:	f7ff fda2 	bl	8007e38 <bhy2_hif_get_parameter>
 80082f4:	4603      	mov	r3, r0
 80082f6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            if (rslt == BHY2_OK)
 80082fa:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80082fe:	2b00      	cmp	r3, #0
 8008300:	f040 80bf 	bne.w	8008482 <bhy2_hif_get_sensor_info+0x1d0>
            {
                if (length != 28)
 8008304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008306:	2b1c      	cmp	r3, #28
 8008308:	d003      	beq.n	8008312 <bhy2_hif_get_sensor_info+0x60>
                {
                    rslt = BHY2_E_INVALID_PARAM;
 800830a:	23fe      	movs	r3, #254	; 0xfe
 800830c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8008310:	e0b7      	b.n	8008482 <bhy2_hif_get_sensor_info+0x1d0>
                }
                else
                {
                    info->sensor_type = bytes[0];
 8008312:	7d3a      	ldrb	r2, [r7, #20]
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	701a      	strb	r2, [r3, #0]
                    info->driver_id = bytes[1];
 8008318:	7d7a      	ldrb	r2, [r7, #21]
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	705a      	strb	r2, [r3, #1]
                    info->driver_version = bytes[2];
 800831e:	7dba      	ldrb	r2, [r7, #22]
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	709a      	strb	r2, [r3, #2]
                    info->power = bytes[3];
 8008324:	7dfa      	ldrb	r2, [r7, #23]
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	70da      	strb	r2, [r3, #3]
                    info->max_range.bytes[0] = bytes[4];
 800832a:	7e3a      	ldrb	r2, [r7, #24]
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	711a      	strb	r2, [r3, #4]
                    info->max_range.bytes[1] = bytes[5];
 8008330:	7e7a      	ldrb	r2, [r7, #25]
 8008332:	68bb      	ldr	r3, [r7, #8]
 8008334:	715a      	strb	r2, [r3, #5]
                    info->resolution.bytes[0] = bytes[6];
 8008336:	7eba      	ldrb	r2, [r7, #26]
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	719a      	strb	r2, [r3, #6]
                    info->resolution.bytes[1] = bytes[7];
 800833c:	7efa      	ldrb	r2, [r7, #27]
 800833e:	68bb      	ldr	r3, [r7, #8]
 8008340:	71da      	strb	r2, [r3, #7]
                    info->max_rate.bytes[0] = bytes[8];
 8008342:	7f3a      	ldrb	r2, [r7, #28]
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	721a      	strb	r2, [r3, #8]
                    info->max_rate.bytes[1] = bytes[9];
 8008348:	7f7a      	ldrb	r2, [r7, #29]
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	725a      	strb	r2, [r3, #9]
                    info->max_rate.bytes[2] = bytes[10];
 800834e:	7fba      	ldrb	r2, [r7, #30]
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	729a      	strb	r2, [r3, #10]
                    info->max_rate.bytes[3] = bytes[11];
 8008354:	7ffa      	ldrb	r2, [r7, #31]
 8008356:	68bb      	ldr	r3, [r7, #8]
 8008358:	72da      	strb	r2, [r3, #11]
                    info->fifo_reserved.bytes[0] = bytes[12];
 800835a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	731a      	strb	r2, [r3, #12]
                    info->fifo_reserved.bytes[1] = bytes[13];
 8008362:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	735a      	strb	r2, [r3, #13]
                    info->fifo_reserved.bytes[2] = bytes[14];
 800836a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800836e:	68bb      	ldr	r3, [r7, #8]
 8008370:	739a      	strb	r2, [r3, #14]
                    info->fifo_reserved.bytes[3] = bytes[15];
 8008372:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	73da      	strb	r2, [r3, #15]
                    info->fifo_max.bytes[0] = bytes[16];
 800837a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	741a      	strb	r2, [r3, #16]
                    info->fifo_max.bytes[1] = bytes[17];
 8008382:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8008386:	68bb      	ldr	r3, [r7, #8]
 8008388:	745a      	strb	r2, [r3, #17]
                    info->fifo_max.bytes[2] = bytes[18];
 800838a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800838e:	68bb      	ldr	r3, [r7, #8]
 8008390:	749a      	strb	r2, [r3, #18]
                    info->fifo_max.bytes[3] = bytes[19];
 8008392:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	74da      	strb	r2, [r3, #19]
                    info->event_size = bytes[20];
 800839a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	751a      	strb	r2, [r3, #20]
                    info->min_rate.bytes[0] = bytes[21];
 80083a2:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	761a      	strb	r2, [r3, #24]
                    info->min_rate.bytes[1] = bytes[22];
 80083aa:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	765a      	strb	r2, [r3, #25]
                    info->min_rate.bytes[2] = bytes[23];
 80083b2:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	769a      	strb	r2, [r3, #26]
                    info->min_rate.bytes[3] = bytes[24];
 80083ba:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	76da      	strb	r2, [r3, #27]
                    info->max_range.u16_val = BHY2_LE2U16(info->max_range.bytes);
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	791b      	ldrb	r3, [r3, #4]
 80083c6:	b21a      	sxth	r2, r3
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	795b      	ldrb	r3, [r3, #5]
 80083cc:	021b      	lsls	r3, r3, #8
 80083ce:	b21b      	sxth	r3, r3
 80083d0:	4313      	orrs	r3, r2
 80083d2:	b21b      	sxth	r3, r3
 80083d4:	b29a      	uxth	r2, r3
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	809a      	strh	r2, [r3, #4]
                    info->resolution.u16_val = BHY2_LE2U16(info->resolution.bytes);
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	799b      	ldrb	r3, [r3, #6]
 80083de:	b21a      	sxth	r2, r3
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	79db      	ldrb	r3, [r3, #7]
 80083e4:	021b      	lsls	r3, r3, #8
 80083e6:	b21b      	sxth	r3, r3
 80083e8:	4313      	orrs	r3, r2
 80083ea:	b21b      	sxth	r3, r3
 80083ec:	b29a      	uxth	r2, r3
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	80da      	strh	r2, [r3, #6]
                    info->max_rate.u32_val = BHY2_LE2U32(info->max_rate.bytes);
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	7a1b      	ldrb	r3, [r3, #8]
 80083f6:	461a      	mov	r2, r3
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	7a5b      	ldrb	r3, [r3, #9]
 80083fc:	021b      	lsls	r3, r3, #8
 80083fe:	431a      	orrs	r2, r3
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	7a9b      	ldrb	r3, [r3, #10]
 8008404:	041b      	lsls	r3, r3, #16
 8008406:	431a      	orrs	r2, r3
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	7adb      	ldrb	r3, [r3, #11]
 800840c:	061b      	lsls	r3, r3, #24
 800840e:	431a      	orrs	r2, r3
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	609a      	str	r2, [r3, #8]
                    info->fifo_reserved.u32_val = BHY2_LE2U32(info->fifo_reserved.bytes);
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	7b1b      	ldrb	r3, [r3, #12]
 8008418:	461a      	mov	r2, r3
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	7b5b      	ldrb	r3, [r3, #13]
 800841e:	021b      	lsls	r3, r3, #8
 8008420:	431a      	orrs	r2, r3
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	7b9b      	ldrb	r3, [r3, #14]
 8008426:	041b      	lsls	r3, r3, #16
 8008428:	431a      	orrs	r2, r3
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	7bdb      	ldrb	r3, [r3, #15]
 800842e:	061b      	lsls	r3, r3, #24
 8008430:	431a      	orrs	r2, r3
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	60da      	str	r2, [r3, #12]
                    info->fifo_max.u32_val = BHY2_LE2U32(info->fifo_max.bytes);
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	7c1b      	ldrb	r3, [r3, #16]
 800843a:	461a      	mov	r2, r3
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	7c5b      	ldrb	r3, [r3, #17]
 8008440:	021b      	lsls	r3, r3, #8
 8008442:	431a      	orrs	r2, r3
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	7c9b      	ldrb	r3, [r3, #18]
 8008448:	041b      	lsls	r3, r3, #16
 800844a:	431a      	orrs	r2, r3
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	7cdb      	ldrb	r3, [r3, #19]
 8008450:	061b      	lsls	r3, r3, #24
 8008452:	431a      	orrs	r2, r3
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	611a      	str	r2, [r3, #16]
                    info->min_rate.u32_val = BHY2_LE2U32(info->min_rate.bytes);
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	7e1b      	ldrb	r3, [r3, #24]
 800845c:	461a      	mov	r2, r3
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	7e5b      	ldrb	r3, [r3, #25]
 8008462:	021b      	lsls	r3, r3, #8
 8008464:	431a      	orrs	r2, r3
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	7e9b      	ldrb	r3, [r3, #26]
 800846a:	041b      	lsls	r3, r3, #16
 800846c:	431a      	orrs	r2, r3
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	7edb      	ldrb	r3, [r3, #27]
 8008472:	061b      	lsls	r3, r3, #24
 8008474:	431a      	orrs	r2, r3
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	619a      	str	r2, [r3, #24]
 800847a:	e002      	b.n	8008482 <bhy2_hif_get_sensor_info+0x1d0>
            }
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 800847c:	23ff      	movs	r3, #255	; 0xff
 800847e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    }

    return rslt;
 8008482:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8008486:	4618      	mov	r0, r3
 8008488:	3738      	adds	r7, #56	; 0x38
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}

0800848e <bhy2_parse_quaternion>:
{
    *altitude = (float)(data[0] | ((uint32_t)data[1] << 8) | ((uint32_t)data[2] << 16) | ((uint32_t)data[3] << 24));
}

void bhy2_parse_quaternion(const uint8_t *data, struct bhy2_data_quaternion *quaternion)
{
 800848e:	b480      	push	{r7}
 8008490:	b083      	sub	sp, #12
 8008492:	af00      	add	r7, sp, #0
 8008494:	6078      	str	r0, [r7, #4]
 8008496:	6039      	str	r1, [r7, #0]
    quaternion->x = BHY2_LE2S16(data);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	781b      	ldrb	r3, [r3, #0]
 800849c:	b21a      	sxth	r2, r3
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	3301      	adds	r3, #1
 80084a2:	781b      	ldrb	r3, [r3, #0]
 80084a4:	021b      	lsls	r3, r3, #8
 80084a6:	b21b      	sxth	r3, r3
 80084a8:	4313      	orrs	r3, r2
 80084aa:	b21a      	sxth	r2, r3
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	801a      	strh	r2, [r3, #0]
    quaternion->y = BHY2_LE2S16(data + 2);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	3302      	adds	r3, #2
 80084b4:	781b      	ldrb	r3, [r3, #0]
 80084b6:	b21a      	sxth	r2, r3
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	3303      	adds	r3, #3
 80084bc:	781b      	ldrb	r3, [r3, #0]
 80084be:	021b      	lsls	r3, r3, #8
 80084c0:	b21b      	sxth	r3, r3
 80084c2:	4313      	orrs	r3, r2
 80084c4:	b21a      	sxth	r2, r3
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	805a      	strh	r2, [r3, #2]
    quaternion->z = BHY2_LE2S16(data + 4);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	3304      	adds	r3, #4
 80084ce:	781b      	ldrb	r3, [r3, #0]
 80084d0:	b21a      	sxth	r2, r3
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	3305      	adds	r3, #5
 80084d6:	781b      	ldrb	r3, [r3, #0]
 80084d8:	021b      	lsls	r3, r3, #8
 80084da:	b21b      	sxth	r3, r3
 80084dc:	4313      	orrs	r3, r2
 80084de:	b21a      	sxth	r2, r3
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	809a      	strh	r2, [r3, #4]
    quaternion->w = BHY2_LE2S16(data + 6);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	3306      	adds	r3, #6
 80084e8:	781b      	ldrb	r3, [r3, #0]
 80084ea:	b21a      	sxth	r2, r3
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	3307      	adds	r3, #7
 80084f0:	781b      	ldrb	r3, [r3, #0]
 80084f2:	021b      	lsls	r3, r3, #8
 80084f4:	b21b      	sxth	r3, r3
 80084f6:	4313      	orrs	r3, r2
 80084f8:	b21a      	sxth	r2, r3
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	80da      	strh	r2, [r3, #6]
    quaternion->accuracy = BHY2_LE2U16(data + 8);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	3308      	adds	r3, #8
 8008502:	781b      	ldrb	r3, [r3, #0]
 8008504:	b21a      	sxth	r2, r3
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	3309      	adds	r3, #9
 800850a:	781b      	ldrb	r3, [r3, #0]
 800850c:	021b      	lsls	r3, r3, #8
 800850e:	b21b      	sxth	r3, r3
 8008510:	4313      	orrs	r3, r2
 8008512:	b21b      	sxth	r3, r3
 8008514:	b29a      	uxth	r2, r3
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	811a      	strh	r2, [r3, #8]
}
 800851a:	bf00      	nop
 800851c:	370c      	adds	r7, #12
 800851e:	46bd      	mov	sp, r7
 8008520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008524:	4770      	bx	lr
	...

08008528 <MX_COMP2_Init>:

COMP_HandleTypeDef hcomp2;

/* COMP2 init function */
void MX_COMP2_Init(void)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 800852c:	4b12      	ldr	r3, [pc, #72]	; (8008578 <MX_COMP2_Init+0x50>)
 800852e:	4a13      	ldr	r2, [pc, #76]	; (800857c <MX_COMP2_Init+0x54>)
 8008530:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INPUT_MINUS_DAC1_CH1;
 8008532:	4b11      	ldr	r3, [pc, #68]	; (8008578 <MX_COMP2_Init+0x50>)
 8008534:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8008538:	611a      	str	r2, [r3, #16]
  hcomp2.Init.NonInvertingInput = COMP_INPUT_PLUS_IO1;
 800853a:	4b0f      	ldr	r3, [pc, #60]	; (8008578 <MX_COMP2_Init+0x50>)
 800853c:	2200      	movs	r2, #0
 800853e:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8008540:	4b0d      	ldr	r3, [pc, #52]	; (8008578 <MX_COMP2_Init+0x50>)
 8008542:	2200      	movs	r2, #0
 8008544:	619a      	str	r2, [r3, #24]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8008546:	4b0c      	ldr	r3, [pc, #48]	; (8008578 <MX_COMP2_Init+0x50>)
 8008548:	2200      	movs	r2, #0
 800854a:	615a      	str	r2, [r3, #20]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 800854c:	4b0a      	ldr	r3, [pc, #40]	; (8008578 <MX_COMP2_Init+0x50>)
 800854e:	2200      	movs	r2, #0
 8008550:	61da      	str	r2, [r3, #28]
  hcomp2.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8008552:	4b09      	ldr	r3, [pc, #36]	; (8008578 <MX_COMP2_Init+0x50>)
 8008554:	2200      	movs	r2, #0
 8008556:	609a      	str	r2, [r3, #8]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8008558:	4b07      	ldr	r3, [pc, #28]	; (8008578 <MX_COMP2_Init+0x50>)
 800855a:	2200      	movs	r2, #0
 800855c:	605a      	str	r2, [r3, #4]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING;
 800855e:	4b06      	ldr	r3, [pc, #24]	; (8008578 <MX_COMP2_Init+0x50>)
 8008560:	2211      	movs	r2, #17
 8008562:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8008564:	4804      	ldr	r0, [pc, #16]	; (8008578 <MX_COMP2_Init+0x50>)
 8008566:	f001 fca1 	bl	8009eac <HAL_COMP_Init>
 800856a:	4603      	mov	r3, r0
 800856c:	2b00      	cmp	r3, #0
 800856e:	d001      	beq.n	8008574 <MX_COMP2_Init+0x4c>
  {
    Error_Handler();
 8008570:	f000 fbc2 	bl	8008cf8 <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 8008574:	bf00      	nop
 8008576:	bd80      	pop	{r7, pc}
 8008578:	240014a8 	.word	0x240014a8
 800857c:	58003810 	.word	0x58003810

08008580 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b08a      	sub	sp, #40	; 0x28
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008588:	f107 0314 	add.w	r3, r7, #20
 800858c:	2200      	movs	r2, #0
 800858e:	601a      	str	r2, [r3, #0]
 8008590:	605a      	str	r2, [r3, #4]
 8008592:	609a      	str	r2, [r3, #8]
 8008594:	60da      	str	r2, [r3, #12]
 8008596:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP2)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	4a1c      	ldr	r2, [pc, #112]	; (8008610 <HAL_COMP_MspInit+0x90>)
 800859e:	4293      	cmp	r3, r2
 80085a0:	d132      	bne.n	8008608 <HAL_COMP_MspInit+0x88>
  {
  /* USER CODE BEGIN COMP2_MspInit 0 */

  /* USER CODE END COMP2_MspInit 0 */
    /* COMP2 clock enable */
    __HAL_RCC_COMP12_CLK_ENABLE();
 80085a2:	4b1c      	ldr	r3, [pc, #112]	; (8008614 <HAL_COMP_MspInit+0x94>)
 80085a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80085a8:	4a1a      	ldr	r2, [pc, #104]	; (8008614 <HAL_COMP_MspInit+0x94>)
 80085aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80085ae:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80085b2:	4b18      	ldr	r3, [pc, #96]	; (8008614 <HAL_COMP_MspInit+0x94>)
 80085b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80085b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80085bc:	613b      	str	r3, [r7, #16]
 80085be:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80085c0:	4b14      	ldr	r3, [pc, #80]	; (8008614 <HAL_COMP_MspInit+0x94>)
 80085c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80085c6:	4a13      	ldr	r2, [pc, #76]	; (8008614 <HAL_COMP_MspInit+0x94>)
 80085c8:	f043 0310 	orr.w	r3, r3, #16
 80085cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80085d0:	4b10      	ldr	r3, [pc, #64]	; (8008614 <HAL_COMP_MspInit+0x94>)
 80085d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80085d6:	f003 0310 	and.w	r3, r3, #16
 80085da:	60fb      	str	r3, [r7, #12]
 80085dc:	68fb      	ldr	r3, [r7, #12]
    /**COMP2 GPIO Configuration
    PE9     ------> COMP2_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80085de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80085e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80085e4:	2303      	movs	r3, #3
 80085e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085e8:	2300      	movs	r3, #0
 80085ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80085ec:	f107 0314 	add.w	r3, r7, #20
 80085f0:	4619      	mov	r1, r3
 80085f2:	4809      	ldr	r0, [pc, #36]	; (8008618 <HAL_COMP_MspInit+0x98>)
 80085f4:	f004 fab2 	bl	800cb5c <HAL_GPIO_Init>

    /* COMP2 interrupt Init */
    HAL_NVIC_SetPriority(COMP_IRQn, 0, 0);
 80085f8:	2200      	movs	r2, #0
 80085fa:	2100      	movs	r1, #0
 80085fc:	2089      	movs	r0, #137	; 0x89
 80085fe:	f001 fece 	bl	800a39e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP_IRQn);
 8008602:	2089      	movs	r0, #137	; 0x89
 8008604:	f001 fee5 	bl	800a3d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }
}
 8008608:	bf00      	nop
 800860a:	3728      	adds	r7, #40	; 0x28
 800860c:	46bd      	mov	sp, r7
 800860e:	bd80      	pop	{r7, pc}
 8008610:	58003810 	.word	0x58003810
 8008614:	58024400 	.word	0x58024400
 8008618:	58021000 	.word	0x58021000

0800861c <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b08a      	sub	sp, #40	; 0x28
 8008620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8008622:	1d3b      	adds	r3, r7, #4
 8008624:	2224      	movs	r2, #36	; 0x24
 8008626:	2100      	movs	r1, #0
 8008628:	4618      	mov	r0, r3
 800862a:	f011 fce7 	bl	8019ffc <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800862e:	4b12      	ldr	r3, [pc, #72]	; (8008678 <MX_DAC1_Init+0x5c>)
 8008630:	4a12      	ldr	r2, [pc, #72]	; (800867c <MX_DAC1_Init+0x60>)
 8008632:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8008634:	4810      	ldr	r0, [pc, #64]	; (8008678 <MX_DAC1_Init+0x5c>)
 8008636:	f001 fee6 	bl	800a406 <HAL_DAC_Init>
 800863a:	4603      	mov	r3, r0
 800863c:	2b00      	cmp	r3, #0
 800863e:	d001      	beq.n	8008644 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8008640:	f000 fb5a 	bl	8008cf8 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8008644:	2300      	movs	r3, #0
 8008646:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8008648:	2300      	movs	r3, #0
 800864a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 800864c:	2302      	movs	r3, #2
 800864e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 8008650:	2302      	movs	r3, #2
 8008652:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8008654:	2300      	movs	r3, #0
 8008656:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8008658:	1d3b      	adds	r3, r7, #4
 800865a:	2200      	movs	r2, #0
 800865c:	4619      	mov	r1, r3
 800865e:	4806      	ldr	r0, [pc, #24]	; (8008678 <MX_DAC1_Init+0x5c>)
 8008660:	f001 ff18 	bl	800a494 <HAL_DAC_ConfigChannel>
 8008664:	4603      	mov	r3, r0
 8008666:	2b00      	cmp	r3, #0
 8008668:	d001      	beq.n	800866e <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800866a:	f000 fb45 	bl	8008cf8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800866e:	bf00      	nop
 8008670:	3728      	adds	r7, #40	; 0x28
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}
 8008676:	bf00      	nop
 8008678:	240014d4 	.word	0x240014d4
 800867c:	40007400 	.word	0x40007400

08008680 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8008680:	b480      	push	{r7}
 8008682:	b085      	sub	sp, #20
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]

  if(dacHandle->Instance==DAC1)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4a0b      	ldr	r2, [pc, #44]	; (80086bc <HAL_DAC_MspInit+0x3c>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d10e      	bne.n	80086b0 <HAL_DAC_MspInit+0x30>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8008692:	4b0b      	ldr	r3, [pc, #44]	; (80086c0 <HAL_DAC_MspInit+0x40>)
 8008694:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008698:	4a09      	ldr	r2, [pc, #36]	; (80086c0 <HAL_DAC_MspInit+0x40>)
 800869a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800869e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80086a2:	4b07      	ldr	r3, [pc, #28]	; (80086c0 <HAL_DAC_MspInit+0x40>)
 80086a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80086a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80086ac:	60fb      	str	r3, [r7, #12]
 80086ae:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 80086b0:	bf00      	nop
 80086b2:	3714      	adds	r7, #20
 80086b4:	46bd      	mov	sp, r7
 80086b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ba:	4770      	bx	lr
 80086bc:	40007400 	.word	0x40007400
 80086c0:	58024400 	.word	0x58024400

080086c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b082      	sub	sp, #8
 80086c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80086ca:	4b19      	ldr	r3, [pc, #100]	; (8008730 <MX_DMA_Init+0x6c>)
 80086cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80086d0:	4a17      	ldr	r2, [pc, #92]	; (8008730 <MX_DMA_Init+0x6c>)
 80086d2:	f043 0301 	orr.w	r3, r3, #1
 80086d6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80086da:	4b15      	ldr	r3, [pc, #84]	; (8008730 <MX_DMA_Init+0x6c>)
 80086dc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80086e0:	f003 0301 	and.w	r3, r3, #1
 80086e4:	607b      	str	r3, [r7, #4]
 80086e6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80086e8:	2200      	movs	r2, #0
 80086ea:	2100      	movs	r1, #0
 80086ec:	200b      	movs	r0, #11
 80086ee:	f001 fe56 	bl	800a39e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80086f2:	200b      	movs	r0, #11
 80086f4:	f001 fe6d 	bl	800a3d2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80086f8:	2200      	movs	r2, #0
 80086fa:	2100      	movs	r1, #0
 80086fc:	200c      	movs	r0, #12
 80086fe:	f001 fe4e 	bl	800a39e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8008702:	200c      	movs	r0, #12
 8008704:	f001 fe65 	bl	800a3d2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8008708:	2200      	movs	r2, #0
 800870a:	2100      	movs	r1, #0
 800870c:	200f      	movs	r0, #15
 800870e:	f001 fe46 	bl	800a39e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8008712:	200f      	movs	r0, #15
 8008714:	f001 fe5d 	bl	800a3d2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8008718:	2200      	movs	r2, #0
 800871a:	2100      	movs	r1, #0
 800871c:	2010      	movs	r0, #16
 800871e:	f001 fe3e 	bl	800a39e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8008722:	2010      	movs	r0, #16
 8008724:	f001 fe55 	bl	800a3d2 <HAL_NVIC_EnableIRQ>

}
 8008728:	bf00      	nop
 800872a:	3708      	adds	r7, #8
 800872c:	46bd      	mov	sp, r7
 800872e:	bd80      	pop	{r7, pc}
 8008730:	58024400 	.word	0x58024400

08008734 <MX_GPIO_Init>:
/** Configure pins
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b08a      	sub	sp, #40	; 0x28
 8008738:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800873a:	f107 0314 	add.w	r3, r7, #20
 800873e:	2200      	movs	r2, #0
 8008740:	601a      	str	r2, [r3, #0]
 8008742:	605a      	str	r2, [r3, #4]
 8008744:	609a      	str	r2, [r3, #8]
 8008746:	60da      	str	r2, [r3, #12]
 8008748:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800874a:	4b45      	ldr	r3, [pc, #276]	; (8008860 <MX_GPIO_Init+0x12c>)
 800874c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008750:	4a43      	ldr	r2, [pc, #268]	; (8008860 <MX_GPIO_Init+0x12c>)
 8008752:	f043 0304 	orr.w	r3, r3, #4
 8008756:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800875a:	4b41      	ldr	r3, [pc, #260]	; (8008860 <MX_GPIO_Init+0x12c>)
 800875c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008760:	f003 0304 	and.w	r3, r3, #4
 8008764:	613b      	str	r3, [r7, #16]
 8008766:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008768:	4b3d      	ldr	r3, [pc, #244]	; (8008860 <MX_GPIO_Init+0x12c>)
 800876a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800876e:	4a3c      	ldr	r2, [pc, #240]	; (8008860 <MX_GPIO_Init+0x12c>)
 8008770:	f043 0301 	orr.w	r3, r3, #1
 8008774:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008778:	4b39      	ldr	r3, [pc, #228]	; (8008860 <MX_GPIO_Init+0x12c>)
 800877a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800877e:	f003 0301 	and.w	r3, r3, #1
 8008782:	60fb      	str	r3, [r7, #12]
 8008784:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8008786:	4b36      	ldr	r3, [pc, #216]	; (8008860 <MX_GPIO_Init+0x12c>)
 8008788:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800878c:	4a34      	ldr	r2, [pc, #208]	; (8008860 <MX_GPIO_Init+0x12c>)
 800878e:	f043 0310 	orr.w	r3, r3, #16
 8008792:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008796:	4b32      	ldr	r3, [pc, #200]	; (8008860 <MX_GPIO_Init+0x12c>)
 8008798:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800879c:	f003 0310 	and.w	r3, r3, #16
 80087a0:	60bb      	str	r3, [r7, #8]
 80087a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80087a4:	4b2e      	ldr	r3, [pc, #184]	; (8008860 <MX_GPIO_Init+0x12c>)
 80087a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80087aa:	4a2d      	ldr	r2, [pc, #180]	; (8008860 <MX_GPIO_Init+0x12c>)
 80087ac:	f043 0302 	orr.w	r3, r3, #2
 80087b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80087b4:	4b2a      	ldr	r3, [pc, #168]	; (8008860 <MX_GPIO_Init+0x12c>)
 80087b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80087ba:	f003 0302 	and.w	r3, r3, #2
 80087be:	607b      	str	r3, [r7, #4]
 80087c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80087c2:	4b27      	ldr	r3, [pc, #156]	; (8008860 <MX_GPIO_Init+0x12c>)
 80087c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80087c8:	4a25      	ldr	r2, [pc, #148]	; (8008860 <MX_GPIO_Init+0x12c>)
 80087ca:	f043 0308 	orr.w	r3, r3, #8
 80087ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80087d2:	4b23      	ldr	r3, [pc, #140]	; (8008860 <MX_GPIO_Init+0x12c>)
 80087d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80087d8:	f003 0308 	and.w	r3, r3, #8
 80087dc:	603b      	str	r3, [r7, #0]
 80087de:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAM_SYNC_GPIO_Port, CAM_SYNC_Pin, GPIO_PIN_RESET);
 80087e0:	2200      	movs	r2, #0
 80087e2:	2101      	movs	r1, #1
 80087e4:	481f      	ldr	r0, [pc, #124]	; (8008864 <MX_GPIO_Init+0x130>)
 80087e6:	f004 fb69 	bl	800cebc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 80087ea:	2201      	movs	r2, #1
 80087ec:	2110      	movs	r1, #16
 80087ee:	481e      	ldr	r0, [pc, #120]	; (8008868 <MX_GPIO_Init+0x134>)
 80087f0:	f004 fb64 	bl	800cebc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_CS_GPIO_Port, IMU_CS_Pin, GPIO_PIN_SET);
 80087f4:	2201      	movs	r2, #1
 80087f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80087fa:	481c      	ldr	r0, [pc, #112]	; (800886c <MX_GPIO_Init+0x138>)
 80087fc:	f004 fb5e 	bl	800cebc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAM_SYNC_Pin;
 8008800:	2301      	movs	r3, #1
 8008802:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008804:	2301      	movs	r3, #1
 8008806:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8008808:	2302      	movs	r3, #2
 800880a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800880c:	2303      	movs	r3, #3
 800880e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CAM_SYNC_GPIO_Port, &GPIO_InitStruct);
 8008810:	f107 0314 	add.w	r3, r7, #20
 8008814:	4619      	mov	r1, r3
 8008816:	4813      	ldr	r0, [pc, #76]	; (8008864 <MX_GPIO_Init+0x130>)
 8008818:	f004 f9a0 	bl	800cb5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 800881c:	2310      	movs	r3, #16
 800881e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008820:	2301      	movs	r3, #1
 8008822:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008824:	2301      	movs	r3, #1
 8008826:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008828:	2303      	movs	r3, #3
 800882a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 800882c:	f107 0314 	add.w	r3, r7, #20
 8008830:	4619      	mov	r1, r3
 8008832:	480d      	ldr	r0, [pc, #52]	; (8008868 <MX_GPIO_Init+0x134>)
 8008834:	f004 f992 	bl	800cb5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_CS_Pin;
 8008838:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800883c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800883e:	2301      	movs	r3, #1
 8008840:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008842:	2301      	movs	r3, #1
 8008844:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008846:	2303      	movs	r3, #3
 8008848:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IMU_CS_GPIO_Port, &GPIO_InitStruct);
 800884a:	f107 0314 	add.w	r3, r7, #20
 800884e:	4619      	mov	r1, r3
 8008850:	4806      	ldr	r0, [pc, #24]	; (800886c <MX_GPIO_Init+0x138>)
 8008852:	f004 f983 	bl	800cb5c <HAL_GPIO_Init>

}
 8008856:	bf00      	nop
 8008858:	3728      	adds	r7, #40	; 0x28
 800885a:	46bd      	mov	sp, r7
 800885c:	bd80      	pop	{r7, pc}
 800885e:	bf00      	nop
 8008860:	58024400 	.word	0x58024400
 8008864:	58020800 	.word	0x58020800
 8008868:	58020000 	.word	0x58020000
 800886c:	58021000 	.word	0x58021000

08008870 <MX_I2C2_Init>:
DMA_HandleTypeDef hdma_i2c2_rx;
DMA_HandleTypeDef hdma_i2c2_tx;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8008874:	4b1b      	ldr	r3, [pc, #108]	; (80088e4 <MX_I2C2_Init+0x74>)
 8008876:	4a1c      	ldr	r2, [pc, #112]	; (80088e8 <MX_I2C2_Init+0x78>)
 8008878:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00B03FDB;
 800887a:	4b1a      	ldr	r3, [pc, #104]	; (80088e4 <MX_I2C2_Init+0x74>)
 800887c:	4a1b      	ldr	r2, [pc, #108]	; (80088ec <MX_I2C2_Init+0x7c>)
 800887e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8008880:	4b18      	ldr	r3, [pc, #96]	; (80088e4 <MX_I2C2_Init+0x74>)
 8008882:	2200      	movs	r2, #0
 8008884:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008886:	4b17      	ldr	r3, [pc, #92]	; (80088e4 <MX_I2C2_Init+0x74>)
 8008888:	2201      	movs	r2, #1
 800888a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800888c:	4b15      	ldr	r3, [pc, #84]	; (80088e4 <MX_I2C2_Init+0x74>)
 800888e:	2200      	movs	r2, #0
 8008890:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8008892:	4b14      	ldr	r3, [pc, #80]	; (80088e4 <MX_I2C2_Init+0x74>)
 8008894:	2200      	movs	r2, #0
 8008896:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8008898:	4b12      	ldr	r3, [pc, #72]	; (80088e4 <MX_I2C2_Init+0x74>)
 800889a:	2200      	movs	r2, #0
 800889c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800889e:	4b11      	ldr	r3, [pc, #68]	; (80088e4 <MX_I2C2_Init+0x74>)
 80088a0:	2200      	movs	r2, #0
 80088a2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80088a4:	4b0f      	ldr	r3, [pc, #60]	; (80088e4 <MX_I2C2_Init+0x74>)
 80088a6:	2200      	movs	r2, #0
 80088a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80088aa:	480e      	ldr	r0, [pc, #56]	; (80088e4 <MX_I2C2_Init+0x74>)
 80088ac:	f004 fb20 	bl	800cef0 <HAL_I2C_Init>
 80088b0:	4603      	mov	r3, r0
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d001      	beq.n	80088ba <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80088b6:	f000 fa1f 	bl	8008cf8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80088ba:	2100      	movs	r1, #0
 80088bc:	4809      	ldr	r0, [pc, #36]	; (80088e4 <MX_I2C2_Init+0x74>)
 80088be:	f005 fa2c 	bl	800dd1a <HAL_I2CEx_ConfigAnalogFilter>
 80088c2:	4603      	mov	r3, r0
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d001      	beq.n	80088cc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80088c8:	f000 fa16 	bl	8008cf8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80088cc:	2100      	movs	r1, #0
 80088ce:	4805      	ldr	r0, [pc, #20]	; (80088e4 <MX_I2C2_Init+0x74>)
 80088d0:	f005 fa6e 	bl	800ddb0 <HAL_I2CEx_ConfigDigitalFilter>
 80088d4:	4603      	mov	r3, r0
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d001      	beq.n	80088de <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80088da:	f000 fa0d 	bl	8008cf8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80088de:	bf00      	nop
 80088e0:	bd80      	pop	{r7, pc}
 80088e2:	bf00      	nop
 80088e4:	240014e8 	.word	0x240014e8
 80088e8:	40005800 	.word	0x40005800
 80088ec:	00b03fdb 	.word	0x00b03fdb

080088f0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b0b8      	sub	sp, #224	; 0xe0
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80088f8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80088fc:	2200      	movs	r2, #0
 80088fe:	601a      	str	r2, [r3, #0]
 8008900:	605a      	str	r2, [r3, #4]
 8008902:	609a      	str	r2, [r3, #8]
 8008904:	60da      	str	r2, [r3, #12]
 8008906:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008908:	f107 0310 	add.w	r3, r7, #16
 800890c:	22bc      	movs	r2, #188	; 0xbc
 800890e:	2100      	movs	r1, #0
 8008910:	4618      	mov	r0, r3
 8008912:	f011 fb73 	bl	8019ffc <memset>
  if(i2cHandle->Instance==I2C2)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	4a5a      	ldr	r2, [pc, #360]	; (8008a84 <HAL_I2C_MspInit+0x194>)
 800891c:	4293      	cmp	r3, r2
 800891e:	f040 80ad 	bne.w	8008a7c <HAL_I2C_MspInit+0x18c>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8008922:	2308      	movs	r3, #8
 8008924:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8008926:	2300      	movs	r3, #0
 8008928:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800892c:	f107 0310 	add.w	r3, r7, #16
 8008930:	4618      	mov	r0, r3
 8008932:	f007 fc5d 	bl	80101f0 <HAL_RCCEx_PeriphCLKConfig>
 8008936:	4603      	mov	r3, r0
 8008938:	2b00      	cmp	r3, #0
 800893a:	d001      	beq.n	8008940 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 800893c:	f000 f9dc 	bl	8008cf8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008940:	4b51      	ldr	r3, [pc, #324]	; (8008a88 <HAL_I2C_MspInit+0x198>)
 8008942:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008946:	4a50      	ldr	r2, [pc, #320]	; (8008a88 <HAL_I2C_MspInit+0x198>)
 8008948:	f043 0302 	orr.w	r3, r3, #2
 800894c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008950:	4b4d      	ldr	r3, [pc, #308]	; (8008a88 <HAL_I2C_MspInit+0x198>)
 8008952:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008956:	f003 0302 	and.w	r3, r3, #2
 800895a:	60fb      	str	r3, [r7, #12]
 800895c:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800895e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008962:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008966:	2312      	movs	r3, #18
 8008968:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800896c:	2300      	movs	r3, #0
 800896e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008972:	2300      	movs	r3, #0
 8008974:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8008978:	2304      	movs	r3, #4
 800897a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800897e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8008982:	4619      	mov	r1, r3
 8008984:	4841      	ldr	r0, [pc, #260]	; (8008a8c <HAL_I2C_MspInit+0x19c>)
 8008986:	f004 f8e9 	bl	800cb5c <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800898a:	4b3f      	ldr	r3, [pc, #252]	; (8008a88 <HAL_I2C_MspInit+0x198>)
 800898c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008990:	4a3d      	ldr	r2, [pc, #244]	; (8008a88 <HAL_I2C_MspInit+0x198>)
 8008992:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008996:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800899a:	4b3b      	ldr	r3, [pc, #236]	; (8008a88 <HAL_I2C_MspInit+0x198>)
 800899c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80089a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80089a4:	60bb      	str	r3, [r7, #8]
 80089a6:	68bb      	ldr	r3, [r7, #8]

    /* I2C2 DMA Init */
    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Stream0;
 80089a8:	4b39      	ldr	r3, [pc, #228]	; (8008a90 <HAL_I2C_MspInit+0x1a0>)
 80089aa:	4a3a      	ldr	r2, [pc, #232]	; (8008a94 <HAL_I2C_MspInit+0x1a4>)
 80089ac:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Request = DMA_REQUEST_I2C2_RX;
 80089ae:	4b38      	ldr	r3, [pc, #224]	; (8008a90 <HAL_I2C_MspInit+0x1a0>)
 80089b0:	2223      	movs	r2, #35	; 0x23
 80089b2:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80089b4:	4b36      	ldr	r3, [pc, #216]	; (8008a90 <HAL_I2C_MspInit+0x1a0>)
 80089b6:	2200      	movs	r2, #0
 80089b8:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80089ba:	4b35      	ldr	r3, [pc, #212]	; (8008a90 <HAL_I2C_MspInit+0x1a0>)
 80089bc:	2200      	movs	r2, #0
 80089be:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80089c0:	4b33      	ldr	r3, [pc, #204]	; (8008a90 <HAL_I2C_MspInit+0x1a0>)
 80089c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80089c6:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80089c8:	4b31      	ldr	r3, [pc, #196]	; (8008a90 <HAL_I2C_MspInit+0x1a0>)
 80089ca:	2200      	movs	r2, #0
 80089cc:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80089ce:	4b30      	ldr	r3, [pc, #192]	; (8008a90 <HAL_I2C_MspInit+0x1a0>)
 80089d0:	2200      	movs	r2, #0
 80089d2:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 80089d4:	4b2e      	ldr	r3, [pc, #184]	; (8008a90 <HAL_I2C_MspInit+0x1a0>)
 80089d6:	2200      	movs	r2, #0
 80089d8:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80089da:	4b2d      	ldr	r3, [pc, #180]	; (8008a90 <HAL_I2C_MspInit+0x1a0>)
 80089dc:	2200      	movs	r2, #0
 80089de:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80089e0:	4b2b      	ldr	r3, [pc, #172]	; (8008a90 <HAL_I2C_MspInit+0x1a0>)
 80089e2:	2200      	movs	r2, #0
 80089e4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 80089e6:	482a      	ldr	r0, [pc, #168]	; (8008a90 <HAL_I2C_MspInit+0x1a0>)
 80089e8:	f001 fe84 	bl	800a6f4 <HAL_DMA_Init>
 80089ec:	4603      	mov	r3, r0
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d001      	beq.n	80089f6 <HAL_I2C_MspInit+0x106>
    {
      Error_Handler();
 80089f2:	f000 f981 	bl	8008cf8 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	4a25      	ldr	r2, [pc, #148]	; (8008a90 <HAL_I2C_MspInit+0x1a0>)
 80089fa:	63da      	str	r2, [r3, #60]	; 0x3c
 80089fc:	4a24      	ldr	r2, [pc, #144]	; (8008a90 <HAL_I2C_MspInit+0x1a0>)
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Stream1;
 8008a02:	4b25      	ldr	r3, [pc, #148]	; (8008a98 <HAL_I2C_MspInit+0x1a8>)
 8008a04:	4a25      	ldr	r2, [pc, #148]	; (8008a9c <HAL_I2C_MspInit+0x1ac>)
 8008a06:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Request = DMA_REQUEST_I2C2_TX;
 8008a08:	4b23      	ldr	r3, [pc, #140]	; (8008a98 <HAL_I2C_MspInit+0x1a8>)
 8008a0a:	2224      	movs	r2, #36	; 0x24
 8008a0c:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008a0e:	4b22      	ldr	r3, [pc, #136]	; (8008a98 <HAL_I2C_MspInit+0x1a8>)
 8008a10:	2240      	movs	r2, #64	; 0x40
 8008a12:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008a14:	4b20      	ldr	r3, [pc, #128]	; (8008a98 <HAL_I2C_MspInit+0x1a8>)
 8008a16:	2200      	movs	r2, #0
 8008a18:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008a1a:	4b1f      	ldr	r3, [pc, #124]	; (8008a98 <HAL_I2C_MspInit+0x1a8>)
 8008a1c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008a20:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008a22:	4b1d      	ldr	r3, [pc, #116]	; (8008a98 <HAL_I2C_MspInit+0x1a8>)
 8008a24:	2200      	movs	r2, #0
 8008a26:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008a28:	4b1b      	ldr	r3, [pc, #108]	; (8008a98 <HAL_I2C_MspInit+0x1a8>)
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8008a2e:	4b1a      	ldr	r3, [pc, #104]	; (8008a98 <HAL_I2C_MspInit+0x1a8>)
 8008a30:	2200      	movs	r2, #0
 8008a32:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8008a34:	4b18      	ldr	r3, [pc, #96]	; (8008a98 <HAL_I2C_MspInit+0x1a8>)
 8008a36:	2200      	movs	r2, #0
 8008a38:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008a3a:	4b17      	ldr	r3, [pc, #92]	; (8008a98 <HAL_I2C_MspInit+0x1a8>)
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8008a40:	4815      	ldr	r0, [pc, #84]	; (8008a98 <HAL_I2C_MspInit+0x1a8>)
 8008a42:	f001 fe57 	bl	800a6f4 <HAL_DMA_Init>
 8008a46:	4603      	mov	r3, r0
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d001      	beq.n	8008a50 <HAL_I2C_MspInit+0x160>
    {
      Error_Handler();
 8008a4c:	f000 f954 	bl	8008cf8 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	4a11      	ldr	r2, [pc, #68]	; (8008a98 <HAL_I2C_MspInit+0x1a8>)
 8008a54:	639a      	str	r2, [r3, #56]	; 0x38
 8008a56:	4a10      	ldr	r2, [pc, #64]	; (8008a98 <HAL_I2C_MspInit+0x1a8>)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	2100      	movs	r1, #0
 8008a60:	2021      	movs	r0, #33	; 0x21
 8008a62:	f001 fc9c 	bl	800a39e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8008a66:	2021      	movs	r0, #33	; 0x21
 8008a68:	f001 fcb3 	bl	800a3d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	2100      	movs	r1, #0
 8008a70:	2022      	movs	r0, #34	; 0x22
 8008a72:	f001 fc94 	bl	800a39e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8008a76:	2022      	movs	r0, #34	; 0x22
 8008a78:	f001 fcab 	bl	800a3d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8008a7c:	bf00      	nop
 8008a7e:	37e0      	adds	r7, #224	; 0xe0
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bd80      	pop	{r7, pc}
 8008a84:	40005800 	.word	0x40005800
 8008a88:	58024400 	.word	0x58024400
 8008a8c:	58020400 	.word	0x58020400
 8008a90:	24001534 	.word	0x24001534
 8008a94:	40020010 	.word	0x40020010
 8008a98:	240015ac 	.word	0x240015ac
 8008a9c:	40020028 	.word	0x40020028

08008aa0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b088      	sub	sp, #32
 8008aa4:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8008aa6:	f001 f93f 	bl	8009d28 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8008aaa:	f000 f851 	bl	8008b50 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8008aae:	f7ff fe41 	bl	8008734 <MX_GPIO_Init>
	MX_DMA_Init();
 8008ab2:	f7ff fe07 	bl	80086c4 <MX_DMA_Init>
	MX_I2C2_Init();
 8008ab6:	f7ff fedb 	bl	8008870 <MX_I2C2_Init>
	MX_SPI1_Init();
 8008aba:	f000 f923 	bl	8008d04 <MX_SPI1_Init>
	MX_USB_DEVICE_Init();
 8008abe:	f010 fcbf 	bl	8019440 <MX_USB_DEVICE_Init>
	MX_USART2_UART_Init();
 8008ac2:	f000 fec3 	bl	800984c <MX_USART2_UART_Init>
	MX_UART4_Init();
 8008ac6:	f000 fdcf 	bl	8009668 <MX_UART4_Init>
	MX_UART7_Init();
 8008aca:	f000 fe1b 	bl	8009704 <MX_UART7_Init>
	MX_UART8_Init();
 8008ace:	f000 fe67 	bl	80097a0 <MX_UART8_Init>
	MX_USART3_UART_Init();
 8008ad2:	f000 ff07 	bl	80098e4 <MX_USART3_UART_Init>
	MX_TIM3_Init();
 8008ad6:	f000 fcc7 	bl	8009468 <MX_TIM3_Init>
	MX_TIM2_Init();
 8008ada:	f000 fc77 	bl	80093cc <MX_TIM2_Init>
	MX_TIM4_Init();
 8008ade:	f000 fd11 	bl	8009504 <MX_TIM4_Init>
	MX_COMP2_Init();
 8008ae2:	f7ff fd21 	bl	8008528 <MX_COMP2_Init>
	MX_DAC1_Init();
 8008ae6:	f7ff fd99 	bl	800861c <MX_DAC1_Init>
	/* USER CODE BEGIN 2 */
	HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, 4095 * 1.8 / 3.3);
 8008aea:	f640 03b9 	movw	r3, #2233	; 0x8b9
 8008aee:	2200      	movs	r2, #0
 8008af0:	2100      	movs	r1, #0
 8008af2:	4811      	ldr	r0, [pc, #68]	; (8008b38 <main+0x98>)
 8008af4:	f001 fca9 	bl	800a44a <HAL_DAC_SetValue>
	HAL_TIM_Base_Start_IT(&htim3);
 8008af8:	4810      	ldr	r0, [pc, #64]	; (8008b3c <main+0x9c>)
 8008afa:	f00a fa19 	bl	8012f30 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 8008afe:	4810      	ldr	r0, [pc, #64]	; (8008b40 <main+0xa0>)
 8008b00:	f00a fa16 	bl	8012f30 <HAL_TIM_Base_Start_IT>

	struct MotherboardConfig config;

	config.HeadUart = &huart3;
 8008b04:	4b0f      	ldr	r3, [pc, #60]	; (8008b44 <main+0xa4>)
 8008b06:	607b      	str	r3, [r7, #4]
	config.HeadTimeout = 10;
 8008b08:	230a      	movs	r3, #10
 8008b0a:	60bb      	str	r3, [r7, #8]

	config.BodyUart = &huart8;
 8008b0c:	4b0e      	ldr	r3, [pc, #56]	; (8008b48 <main+0xa8>)
 8008b0e:	60fb      	str	r3, [r7, #12]
	config.BodyTimeout = 10;
 8008b10:	230a      	movs	r3, #10
 8008b12:	613b      	str	r3, [r7, #16]

	config.IMUSpi = &hspi1;
 8008b14:	4b0d      	ldr	r3, [pc, #52]	; (8008b4c <main+0xac>)
 8008b16:	617b      	str	r3, [r7, #20]

	MotherboardInit(config);
 8008b18:	697b      	ldr	r3, [r7, #20]
 8008b1a:	9300      	str	r3, [sp, #0]
 8008b1c:	1d3b      	adds	r3, r7, #4
 8008b1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008b20:	f7f9 f8a0 	bl	8001c64 <MotherboardInit>

	MotherboardOnStrobe();
 8008b24:	f7f9 f95a 	bl	8001ddc <MotherboardOnStrobe>
	MotherboardOnStrobe();
 8008b28:	f7f9 f958 	bl	8001ddc <MotherboardOnStrobe>
	MotherboardOnStrobe();
 8008b2c:	f7f9 f956 	bl	8001ddc <MotherboardOnStrobe>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */
		MotherboardTick();
 8008b30:	f7f9 f8e6 	bl	8001d00 <MotherboardTick>
 8008b34:	e7fc      	b.n	8008b30 <main+0x90>
 8008b36:	bf00      	nop
 8008b38:	240014d4 	.word	0x240014d4
 8008b3c:	240017ec 	.word	0x240017ec
 8008b40:	240017a0 	.word	0x240017a0
 8008b44:	24001ac4 	.word	0x24001ac4
 8008b48:	240019a4 	.word	0x240019a4
 8008b4c:	24001624 	.word	0x24001624

08008b50 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b09c      	sub	sp, #112	; 0x70
 8008b54:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8008b56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b5a:	224c      	movs	r2, #76	; 0x4c
 8008b5c:	2100      	movs	r1, #0
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f011 fa4c 	bl	8019ffc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8008b64:	1d3b      	adds	r3, r7, #4
 8008b66:	2220      	movs	r2, #32
 8008b68:	2100      	movs	r1, #0
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	f011 fa46 	bl	8019ffc <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8008b70:	2002      	movs	r0, #2
 8008b72:	f006 fb39 	bl	800f1e8 <HAL_PWREx_ConfigSupply>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8008b76:	2300      	movs	r3, #0
 8008b78:	603b      	str	r3, [r7, #0]
 8008b7a:	4b35      	ldr	r3, [pc, #212]	; (8008c50 <SystemClock_Config+0x100>)
 8008b7c:	699b      	ldr	r3, [r3, #24]
 8008b7e:	4a34      	ldr	r2, [pc, #208]	; (8008c50 <SystemClock_Config+0x100>)
 8008b80:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008b84:	6193      	str	r3, [r2, #24]
 8008b86:	4b32      	ldr	r3, [pc, #200]	; (8008c50 <SystemClock_Config+0x100>)
 8008b88:	699b      	ldr	r3, [r3, #24]
 8008b8a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008b8e:	603b      	str	r3, [r7, #0]
 8008b90:	4b30      	ldr	r3, [pc, #192]	; (8008c54 <SystemClock_Config+0x104>)
 8008b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b94:	4a2f      	ldr	r2, [pc, #188]	; (8008c54 <SystemClock_Config+0x104>)
 8008b96:	f043 0301 	orr.w	r3, r3, #1
 8008b9a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008b9c:	4b2d      	ldr	r3, [pc, #180]	; (8008c54 <SystemClock_Config+0x104>)
 8008b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ba0:	f003 0301 	and.w	r3, r3, #1
 8008ba4:	603b      	str	r3, [r7, #0]
 8008ba6:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 8008ba8:	bf00      	nop
 8008baa:	4b29      	ldr	r3, [pc, #164]	; (8008c50 <SystemClock_Config+0x100>)
 8008bac:	699b      	ldr	r3, [r3, #24]
 8008bae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008bb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008bb6:	d1f8      	bne.n	8008baa <SystemClock_Config+0x5a>
	}
	/** Macro to configure the PLL clock source
	 */
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8008bb8:	4b27      	ldr	r3, [pc, #156]	; (8008c58 <SystemClock_Config+0x108>)
 8008bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bbc:	4a26      	ldr	r2, [pc, #152]	; (8008c58 <SystemClock_Config+0x108>)
 8008bbe:	f023 0303 	bic.w	r3, r3, #3
 8008bc2:	6293      	str	r3, [r2, #40]	; 0x28
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48
 8008bc4:	2322      	movs	r3, #34	; 0x22
 8008bc6:	627b      	str	r3, [r7, #36]	; 0x24
			| RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8008bc8:	2301      	movs	r3, #1
 8008bca:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8008bcc:	2340      	movs	r3, #64	; 0x40
 8008bce:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8008bd0:	2301      	movs	r3, #1
 8008bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008bd4:	2302      	movs	r3, #2
 8008bd6:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8008bd8:	2300      	movs	r3, #0
 8008bda:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8008bdc:	2304      	movs	r3, #4
 8008bde:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 60;
 8008be0:	233c      	movs	r3, #60	; 0x3c
 8008be2:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 8008be4:	2302      	movs	r3, #2
 8008be6:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 5;
 8008be8:	2305      	movs	r3, #5
 8008bea:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8008bec:	2302      	movs	r3, #2
 8008bee:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8008bf0:	230c      	movs	r3, #12
 8008bf2:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8008bfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c00:	4618      	mov	r0, r3
 8008c02:	f006 fb3b 	bl	800f27c <HAL_RCC_OscConfig>
 8008c06:	4603      	mov	r3, r0
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d001      	beq.n	8008c10 <SystemClock_Config+0xc0>
		Error_Handler();
 8008c0c:	f000 f874 	bl	8008cf8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8008c10:	233f      	movs	r3, #63	; 0x3f
 8008c12:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008c14:	2303      	movs	r3, #3
 8008c16:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8008c18:	2300      	movs	r3, #0
 8008c1a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8008c1c:	2308      	movs	r3, #8
 8008c1e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8008c20:	2340      	movs	r3, #64	; 0x40
 8008c22:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8008c24:	2340      	movs	r3, #64	; 0x40
 8008c26:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8008c28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c2c:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8008c2e:	2340      	movs	r3, #64	; 0x40
 8008c30:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8008c32:	1d3b      	adds	r3, r7, #4
 8008c34:	2104      	movs	r1, #4
 8008c36:	4618      	mov	r0, r3
 8008c38:	f006 ff4e 	bl	800fad8 <HAL_RCC_ClockConfig>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d001      	beq.n	8008c46 <SystemClock_Config+0xf6>
		Error_Handler();
 8008c42:	f000 f859 	bl	8008cf8 <Error_Handler>
	}
}
 8008c46:	bf00      	nop
 8008c48:	3770      	adds	r7, #112	; 0x70
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bd80      	pop	{r7, pc}
 8008c4e:	bf00      	nop
 8008c50:	58024800 	.word	0x58024800
 8008c54:	58000400 	.word	0x58000400
 8008c58:	58024400 	.word	0x58024400

08008c5c <HAL_COMP_TriggerCallback>:

/* USER CODE BEGIN 4 */

void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp) {
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b082      	sub	sp, #8
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
	if (hcomp->Instance == COMP2) {
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	4a04      	ldr	r2, [pc, #16]	; (8008c7c <HAL_COMP_TriggerCallback+0x20>)
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d101      	bne.n	8008c72 <HAL_COMP_TriggerCallback+0x16>
		MotherboardOnStrobe();
 8008c6e:	f7f9 f8b5 	bl	8001ddc <MotherboardOnStrobe>
	}
}
 8008c72:	bf00      	nop
 8008c74:	3708      	adds	r7, #8
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}
 8008c7a:	bf00      	nop
 8008c7c:	58003810 	.word	0x58003810

08008c80 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b082      	sub	sp, #8
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	4a04      	ldr	r2, [pc, #16]	; (8008ca0 <HAL_UART_RxCpltCallback+0x20>)
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	d101      	bne.n	8008c96 <HAL_UART_RxCpltCallback+0x16>
		MotherboardOnHeadRecieveComplete();
 8008c92:	f7f9 f8b9 	bl	8001e08 <MotherboardOnHeadRecieveComplete>
	}
}
 8008c96:	bf00      	nop
 8008c98:	3708      	adds	r7, #8
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}
 8008c9e:	bf00      	nop
 8008ca0:	40004800 	.word	0x40004800

08008ca4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b082      	sub	sp, #8
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	4a04      	ldr	r2, [pc, #16]	; (8008cc4 <HAL_UART_TxCpltCallback+0x20>)
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d101      	bne.n	8008cba <HAL_UART_TxCpltCallback+0x16>
		MotherboardOnHeadTransmitComplete();
 8008cb6:	f7f9 f8b1 	bl	8001e1c <MotherboardOnHeadTransmitComplete>
	}
}
 8008cba:	bf00      	nop
 8008cbc:	3708      	adds	r7, #8
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bd80      	pop	{r7, pc}
 8008cc2:	bf00      	nop
 8008cc4:	40004800 	.word	0x40004800

08008cc8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b082      	sub	sp, #8
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	4a07      	ldr	r2, [pc, #28]	; (8008cf4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	d101      	bne.n	8008cde <HAL_TIM_PeriodElapsedCallback+0x16>
		MotherboardOnBodyTimerTick();
 8008cda:	f7f9 f8a9 	bl	8001e30 <MotherboardOnBodyTimerTick>

	if (htim->Instance == TIM2)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ce6:	d101      	bne.n	8008cec <HAL_TIM_PeriodElapsedCallback+0x24>
		MotherboardOnImuTimerTick();
 8008ce8:	f7f9 f8ac 	bl	8001e44 <MotherboardOnImuTimerTick>
}
 8008cec:	bf00      	nop
 8008cee:	3708      	adds	r7, #8
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	bd80      	pop	{r7, pc}
 8008cf4:	40000400 	.word	0x40000400

08008cf8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8008cf8:	b480      	push	{r7}
 8008cfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8008cfc:	b672      	cpsid	i
}
 8008cfe:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8008d00:	e7fe      	b.n	8008d00 <Error_Handler+0x8>
	...

08008d04 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_tx;
DMA_HandleTypeDef hdma_spi1_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8008d08:	4b28      	ldr	r3, [pc, #160]	; (8008dac <MX_SPI1_Init+0xa8>)
 8008d0a:	4a29      	ldr	r2, [pc, #164]	; (8008db0 <MX_SPI1_Init+0xac>)
 8008d0c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8008d0e:	4b27      	ldr	r3, [pc, #156]	; (8008dac <MX_SPI1_Init+0xa8>)
 8008d10:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8008d14:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8008d16:	4b25      	ldr	r3, [pc, #148]	; (8008dac <MX_SPI1_Init+0xa8>)
 8008d18:	2200      	movs	r2, #0
 8008d1a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8008d1c:	4b23      	ldr	r3, [pc, #140]	; (8008dac <MX_SPI1_Init+0xa8>)
 8008d1e:	2207      	movs	r2, #7
 8008d20:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8008d22:	4b22      	ldr	r3, [pc, #136]	; (8008dac <MX_SPI1_Init+0xa8>)
 8008d24:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008d28:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8008d2a:	4b20      	ldr	r3, [pc, #128]	; (8008dac <MX_SPI1_Init+0xa8>)
 8008d2c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008d30:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8008d32:	4b1e      	ldr	r3, [pc, #120]	; (8008dac <MX_SPI1_Init+0xa8>)
 8008d34:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8008d38:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8008d3a:	4b1c      	ldr	r3, [pc, #112]	; (8008dac <MX_SPI1_Init+0xa8>)
 8008d3c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8008d40:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008d42:	4b1a      	ldr	r3, [pc, #104]	; (8008dac <MX_SPI1_Init+0xa8>)
 8008d44:	2200      	movs	r2, #0
 8008d46:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8008d48:	4b18      	ldr	r3, [pc, #96]	; (8008dac <MX_SPI1_Init+0xa8>)
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008d4e:	4b17      	ldr	r3, [pc, #92]	; (8008dac <MX_SPI1_Init+0xa8>)
 8008d50:	2200      	movs	r2, #0
 8008d52:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8008d54:	4b15      	ldr	r3, [pc, #84]	; (8008dac <MX_SPI1_Init+0xa8>)
 8008d56:	2200      	movs	r2, #0
 8008d58:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8008d5a:	4b14      	ldr	r3, [pc, #80]	; (8008dac <MX_SPI1_Init+0xa8>)
 8008d5c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8008d60:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8008d62:	4b12      	ldr	r3, [pc, #72]	; (8008dac <MX_SPI1_Init+0xa8>)
 8008d64:	2200      	movs	r2, #0
 8008d66:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8008d68:	4b10      	ldr	r3, [pc, #64]	; (8008dac <MX_SPI1_Init+0xa8>)
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8008d6e:	4b0f      	ldr	r3, [pc, #60]	; (8008dac <MX_SPI1_Init+0xa8>)
 8008d70:	2200      	movs	r2, #0
 8008d72:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8008d74:	4b0d      	ldr	r3, [pc, #52]	; (8008dac <MX_SPI1_Init+0xa8>)
 8008d76:	2200      	movs	r2, #0
 8008d78:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8008d7a:	4b0c      	ldr	r3, [pc, #48]	; (8008dac <MX_SPI1_Init+0xa8>)
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8008d80:	4b0a      	ldr	r3, [pc, #40]	; (8008dac <MX_SPI1_Init+0xa8>)
 8008d82:	2200      	movs	r2, #0
 8008d84:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8008d86:	4b09      	ldr	r3, [pc, #36]	; (8008dac <MX_SPI1_Init+0xa8>)
 8008d88:	2200      	movs	r2, #0
 8008d8a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8008d8c:	4b07      	ldr	r3, [pc, #28]	; (8008dac <MX_SPI1_Init+0xa8>)
 8008d8e:	2200      	movs	r2, #0
 8008d90:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8008d92:	4b06      	ldr	r3, [pc, #24]	; (8008dac <MX_SPI1_Init+0xa8>)
 8008d94:	2200      	movs	r2, #0
 8008d96:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8008d98:	4804      	ldr	r0, [pc, #16]	; (8008dac <MX_SPI1_Init+0xa8>)
 8008d9a:	f008 fd91 	bl	80118c0 <HAL_SPI_Init>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d001      	beq.n	8008da8 <MX_SPI1_Init+0xa4>
  {
    Error_Handler();
 8008da4:	f7ff ffa8 	bl	8008cf8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8008da8:	bf00      	nop
 8008daa:	bd80      	pop	{r7, pc}
 8008dac:	24001624 	.word	0x24001624
 8008db0:	40013000 	.word	0x40013000

08008db4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b0b8      	sub	sp, #224	; 0xe0
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008dbc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	601a      	str	r2, [r3, #0]
 8008dc4:	605a      	str	r2, [r3, #4]
 8008dc6:	609a      	str	r2, [r3, #8]
 8008dc8:	60da      	str	r2, [r3, #12]
 8008dca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008dcc:	f107 0310 	add.w	r3, r7, #16
 8008dd0:	22bc      	movs	r2, #188	; 0xbc
 8008dd2:	2100      	movs	r1, #0
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	f011 f911 	bl	8019ffc <memset>
  if(spiHandle->Instance==SPI1)
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	4a60      	ldr	r2, [pc, #384]	; (8008f60 <HAL_SPI_MspInit+0x1ac>)
 8008de0:	4293      	cmp	r3, r2
 8008de2:	f040 80b8 	bne.w	8008f56 <HAL_SPI_MspInit+0x1a2>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8008de6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008dea:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 32;
 8008dec:	2320      	movs	r3, #32
 8008dee:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 129;
 8008df0:	2381      	movs	r3, #129	; 0x81
 8008df2:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8008df4:	2302      	movs	r3, #2
 8008df6:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8008df8:	2302      	movs	r3, #2
 8008dfa:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8008dfc:	2302      	movs	r3, #2
 8008dfe:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_1;
 8008e00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e04:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8008e06:	2300      	movs	r3, #0
 8008e08:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 8008e0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008e12:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008e14:	f107 0310 	add.w	r3, r7, #16
 8008e18:	4618      	mov	r0, r3
 8008e1a:	f007 f9e9 	bl	80101f0 <HAL_RCCEx_PeriphCLKConfig>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d001      	beq.n	8008e28 <HAL_SPI_MspInit+0x74>
    {
      Error_Handler();
 8008e24:	f7ff ff68 	bl	8008cf8 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8008e28:	4b4e      	ldr	r3, [pc, #312]	; (8008f64 <HAL_SPI_MspInit+0x1b0>)
 8008e2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008e2e:	4a4d      	ldr	r2, [pc, #308]	; (8008f64 <HAL_SPI_MspInit+0x1b0>)
 8008e30:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008e34:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8008e38:	4b4a      	ldr	r3, [pc, #296]	; (8008f64 <HAL_SPI_MspInit+0x1b0>)
 8008e3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008e3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008e42:	60fb      	str	r3, [r7, #12]
 8008e44:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008e46:	4b47      	ldr	r3, [pc, #284]	; (8008f64 <HAL_SPI_MspInit+0x1b0>)
 8008e48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008e4c:	4a45      	ldr	r2, [pc, #276]	; (8008f64 <HAL_SPI_MspInit+0x1b0>)
 8008e4e:	f043 0301 	orr.w	r3, r3, #1
 8008e52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008e56:	4b43      	ldr	r3, [pc, #268]	; (8008f64 <HAL_SPI_MspInit+0x1b0>)
 8008e58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008e5c:	f003 0301 	and.w	r3, r3, #1
 8008e60:	60bb      	str	r3, [r7, #8]
 8008e62:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8008e64:	23e0      	movs	r3, #224	; 0xe0
 8008e66:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e6a:	2302      	movs	r3, #2
 8008e6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e70:	2300      	movs	r3, #0
 8008e72:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008e76:	2300      	movs	r3, #0
 8008e78:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8008e7c:	2305      	movs	r3, #5
 8008e7e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008e82:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8008e86:	4619      	mov	r1, r3
 8008e88:	4837      	ldr	r0, [pc, #220]	; (8008f68 <HAL_SPI_MspInit+0x1b4>)
 8008e8a:	f003 fe67 	bl	800cb5c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream4;
 8008e8e:	4b37      	ldr	r3, [pc, #220]	; (8008f6c <HAL_SPI_MspInit+0x1b8>)
 8008e90:	4a37      	ldr	r2, [pc, #220]	; (8008f70 <HAL_SPI_MspInit+0x1bc>)
 8008e92:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8008e94:	4b35      	ldr	r3, [pc, #212]	; (8008f6c <HAL_SPI_MspInit+0x1b8>)
 8008e96:	2226      	movs	r2, #38	; 0x26
 8008e98:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008e9a:	4b34      	ldr	r3, [pc, #208]	; (8008f6c <HAL_SPI_MspInit+0x1b8>)
 8008e9c:	2240      	movs	r2, #64	; 0x40
 8008e9e:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008ea0:	4b32      	ldr	r3, [pc, #200]	; (8008f6c <HAL_SPI_MspInit+0x1b8>)
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008ea6:	4b31      	ldr	r3, [pc, #196]	; (8008f6c <HAL_SPI_MspInit+0x1b8>)
 8008ea8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008eac:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008eae:	4b2f      	ldr	r3, [pc, #188]	; (8008f6c <HAL_SPI_MspInit+0x1b8>)
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008eb4:	4b2d      	ldr	r3, [pc, #180]	; (8008f6c <HAL_SPI_MspInit+0x1b8>)
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8008eba:	4b2c      	ldr	r3, [pc, #176]	; (8008f6c <HAL_SPI_MspInit+0x1b8>)
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8008ec0:	4b2a      	ldr	r3, [pc, #168]	; (8008f6c <HAL_SPI_MspInit+0x1b8>)
 8008ec2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008ec6:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008ec8:	4b28      	ldr	r3, [pc, #160]	; (8008f6c <HAL_SPI_MspInit+0x1b8>)
 8008eca:	2200      	movs	r2, #0
 8008ecc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8008ece:	4827      	ldr	r0, [pc, #156]	; (8008f6c <HAL_SPI_MspInit+0x1b8>)
 8008ed0:	f001 fc10 	bl	800a6f4 <HAL_DMA_Init>
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d001      	beq.n	8008ede <HAL_SPI_MspInit+0x12a>
    {
      Error_Handler();
 8008eda:	f7ff ff0d 	bl	8008cf8 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	4a22      	ldr	r2, [pc, #136]	; (8008f6c <HAL_SPI_MspInit+0x1b8>)
 8008ee2:	679a      	str	r2, [r3, #120]	; 0x78
 8008ee4:	4a21      	ldr	r2, [pc, #132]	; (8008f6c <HAL_SPI_MspInit+0x1b8>)
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream5;
 8008eea:	4b22      	ldr	r3, [pc, #136]	; (8008f74 <HAL_SPI_MspInit+0x1c0>)
 8008eec:	4a22      	ldr	r2, [pc, #136]	; (8008f78 <HAL_SPI_MspInit+0x1c4>)
 8008eee:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8008ef0:	4b20      	ldr	r3, [pc, #128]	; (8008f74 <HAL_SPI_MspInit+0x1c0>)
 8008ef2:	2225      	movs	r2, #37	; 0x25
 8008ef4:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008ef6:	4b1f      	ldr	r3, [pc, #124]	; (8008f74 <HAL_SPI_MspInit+0x1c0>)
 8008ef8:	2200      	movs	r2, #0
 8008efa:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008efc:	4b1d      	ldr	r3, [pc, #116]	; (8008f74 <HAL_SPI_MspInit+0x1c0>)
 8008efe:	2200      	movs	r2, #0
 8008f00:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008f02:	4b1c      	ldr	r3, [pc, #112]	; (8008f74 <HAL_SPI_MspInit+0x1c0>)
 8008f04:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008f08:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008f0a:	4b1a      	ldr	r3, [pc, #104]	; (8008f74 <HAL_SPI_MspInit+0x1c0>)
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008f10:	4b18      	ldr	r3, [pc, #96]	; (8008f74 <HAL_SPI_MspInit+0x1c0>)
 8008f12:	2200      	movs	r2, #0
 8008f14:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8008f16:	4b17      	ldr	r3, [pc, #92]	; (8008f74 <HAL_SPI_MspInit+0x1c0>)
 8008f18:	2200      	movs	r2, #0
 8008f1a:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8008f1c:	4b15      	ldr	r3, [pc, #84]	; (8008f74 <HAL_SPI_MspInit+0x1c0>)
 8008f1e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008f22:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008f24:	4b13      	ldr	r3, [pc, #76]	; (8008f74 <HAL_SPI_MspInit+0x1c0>)
 8008f26:	2200      	movs	r2, #0
 8008f28:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8008f2a:	4812      	ldr	r0, [pc, #72]	; (8008f74 <HAL_SPI_MspInit+0x1c0>)
 8008f2c:	f001 fbe2 	bl	800a6f4 <HAL_DMA_Init>
 8008f30:	4603      	mov	r3, r0
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d001      	beq.n	8008f3a <HAL_SPI_MspInit+0x186>
    {
      Error_Handler();
 8008f36:	f7ff fedf 	bl	8008cf8 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	4a0d      	ldr	r2, [pc, #52]	; (8008f74 <HAL_SPI_MspInit+0x1c0>)
 8008f3e:	67da      	str	r2, [r3, #124]	; 0x7c
 8008f40:	4a0c      	ldr	r2, [pc, #48]	; (8008f74 <HAL_SPI_MspInit+0x1c0>)
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8008f46:	2200      	movs	r2, #0
 8008f48:	2100      	movs	r1, #0
 8008f4a:	2023      	movs	r0, #35	; 0x23
 8008f4c:	f001 fa27 	bl	800a39e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8008f50:	2023      	movs	r0, #35	; 0x23
 8008f52:	f001 fa3e 	bl	800a3d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8008f56:	bf00      	nop
 8008f58:	37e0      	adds	r7, #224	; 0xe0
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bd80      	pop	{r7, pc}
 8008f5e:	bf00      	nop
 8008f60:	40013000 	.word	0x40013000
 8008f64:	58024400 	.word	0x58024400
 8008f68:	58020000 	.word	0x58020000
 8008f6c:	240016ac 	.word	0x240016ac
 8008f70:	40020070 	.word	0x40020070
 8008f74:	24001724 	.word	0x24001724
 8008f78:	40020088 	.word	0x40020088

08008f7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008f7c:	b480      	push	{r7}
 8008f7e:	b083      	sub	sp, #12
 8008f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008f82:	4b0a      	ldr	r3, [pc, #40]	; (8008fac <HAL_MspInit+0x30>)
 8008f84:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008f88:	4a08      	ldr	r2, [pc, #32]	; (8008fac <HAL_MspInit+0x30>)
 8008f8a:	f043 0302 	orr.w	r3, r3, #2
 8008f8e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008f92:	4b06      	ldr	r3, [pc, #24]	; (8008fac <HAL_MspInit+0x30>)
 8008f94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008f98:	f003 0302 	and.w	r3, r3, #2
 8008f9c:	607b      	str	r3, [r7, #4]
 8008f9e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008fa0:	bf00      	nop
 8008fa2:	370c      	adds	r7, #12
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008faa:	4770      	bx	lr
 8008fac:	58024400 	.word	0x58024400

08008fb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008fb4:	e7fe      	b.n	8008fb4 <NMI_Handler+0x4>

08008fb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008fb6:	b480      	push	{r7}
 8008fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008fba:	e7fe      	b.n	8008fba <HardFault_Handler+0x4>

08008fbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008fc0:	e7fe      	b.n	8008fc0 <MemManage_Handler+0x4>

08008fc2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008fc2:	b480      	push	{r7}
 8008fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008fc6:	e7fe      	b.n	8008fc6 <BusFault_Handler+0x4>

08008fc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008fc8:	b480      	push	{r7}
 8008fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008fcc:	e7fe      	b.n	8008fcc <UsageFault_Handler+0x4>

08008fce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008fce:	b480      	push	{r7}
 8008fd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008fd2:	bf00      	nop
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fda:	4770      	bx	lr

08008fdc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008fdc:	b480      	push	{r7}
 8008fde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008fe0:	bf00      	nop
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe8:	4770      	bx	lr

08008fea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008fea:	b480      	push	{r7}
 8008fec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008fee:	bf00      	nop
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff6:	4770      	bx	lr

08008ff8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008ffc:	f000 ff06 	bl	8009e0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009000:	bf00      	nop
 8009002:	bd80      	pop	{r7, pc}

08009004 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8009008:	4802      	ldr	r0, [pc, #8]	; (8009014 <DMA1_Stream0_IRQHandler+0x10>)
 800900a:	f002 fc33 	bl	800b874 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800900e:	bf00      	nop
 8009010:	bd80      	pop	{r7, pc}
 8009012:	bf00      	nop
 8009014:	24001534 	.word	0x24001534

08009018 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 800901c:	4802      	ldr	r0, [pc, #8]	; (8009028 <DMA1_Stream1_IRQHandler+0x10>)
 800901e:	f002 fc29 	bl	800b874 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8009022:	bf00      	nop
 8009024:	bd80      	pop	{r7, pc}
 8009026:	bf00      	nop
 8009028:	240015ac 	.word	0x240015ac

0800902c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8009030:	4802      	ldr	r0, [pc, #8]	; (800903c <DMA1_Stream4_IRQHandler+0x10>)
 8009032:	f002 fc1f 	bl	800b874 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8009036:	bf00      	nop
 8009038:	bd80      	pop	{r7, pc}
 800903a:	bf00      	nop
 800903c:	240016ac 	.word	0x240016ac

08009040 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8009044:	4802      	ldr	r0, [pc, #8]	; (8009050 <DMA1_Stream5_IRQHandler+0x10>)
 8009046:	f002 fc15 	bl	800b874 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800904a:	bf00      	nop
 800904c:	bd80      	pop	{r7, pc}
 800904e:	bf00      	nop
 8009050:	24001724 	.word	0x24001724

08009054 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8009058:	4802      	ldr	r0, [pc, #8]	; (8009064 <TIM2_IRQHandler+0x10>)
 800905a:	f009 ffe1 	bl	8013020 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800905e:	bf00      	nop
 8009060:	bd80      	pop	{r7, pc}
 8009062:	bf00      	nop
 8009064:	240017a0 	.word	0x240017a0

08009068 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800906c:	4802      	ldr	r0, [pc, #8]	; (8009078 <TIM3_IRQHandler+0x10>)
 800906e:	f009 ffd7 	bl	8013020 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8009072:	bf00      	nop
 8009074:	bd80      	pop	{r7, pc}
 8009076:	bf00      	nop
 8009078:	240017ec 	.word	0x240017ec

0800907c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8009080:	4802      	ldr	r0, [pc, #8]	; (800908c <TIM4_IRQHandler+0x10>)
 8009082:	f009 ffcd 	bl	8013020 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8009086:	bf00      	nop
 8009088:	bd80      	pop	{r7, pc}
 800908a:	bf00      	nop
 800908c:	24001838 	.word	0x24001838

08009090 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8009094:	4802      	ldr	r0, [pc, #8]	; (80090a0 <I2C2_EV_IRQHandler+0x10>)
 8009096:	f003 ffbb 	bl	800d010 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800909a:	bf00      	nop
 800909c:	bd80      	pop	{r7, pc}
 800909e:	bf00      	nop
 80090a0:	240014e8 	.word	0x240014e8

080090a4 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 80090a8:	4802      	ldr	r0, [pc, #8]	; (80090b4 <I2C2_ER_IRQHandler+0x10>)
 80090aa:	f003 ffcb 	bl	800d044 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 80090ae:	bf00      	nop
 80090b0:	bd80      	pop	{r7, pc}
 80090b2:	bf00      	nop
 80090b4:	240014e8 	.word	0x240014e8

080090b8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80090bc:	4802      	ldr	r0, [pc, #8]	; (80090c8 <SPI1_IRQHandler+0x10>)
 80090be:	f009 fbd5 	bl	801286c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80090c2:	bf00      	nop
 80090c4:	bd80      	pop	{r7, pc}
 80090c6:	bf00      	nop
 80090c8:	24001624 	.word	0x24001624

080090cc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80090d0:	4802      	ldr	r0, [pc, #8]	; (80090dc <USART3_IRQHandler+0x10>)
 80090d2:	f00a fdad 	bl	8013c30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80090d6:	bf00      	nop
 80090d8:	bd80      	pop	{r7, pc}
 80090da:	bf00      	nop
 80090dc:	24001ac4 	.word	0x24001ac4

080090e0 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 80090e4:	4802      	ldr	r0, [pc, #8]	; (80090f0 <UART8_IRQHandler+0x10>)
 80090e6:	f00a fda3 	bl	8013c30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 80090ea:	bf00      	nop
 80090ec:	bd80      	pop	{r7, pc}
 80090ee:	bf00      	nop
 80090f0:	240019a4 	.word	0x240019a4

080090f4 <OTG_FS_EP1_OUT_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS End Point 1 Out global interrupt.
  */
void OTG_FS_EP1_OUT_IRQHandler(void)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_EP1_OUT_IRQn 0 */

  /* USER CODE END OTG_FS_EP1_OUT_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80090f8:	4802      	ldr	r0, [pc, #8]	; (8009104 <OTG_FS_EP1_OUT_IRQHandler+0x10>)
 80090fa:	f004 fffc 	bl	800e0f6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_EP1_OUT_IRQn 1 */

  /* USER CODE END OTG_FS_EP1_OUT_IRQn 1 */
}
 80090fe:	bf00      	nop
 8009100:	bd80      	pop	{r7, pc}
 8009102:	bf00      	nop
 8009104:	2400302c 	.word	0x2400302c

08009108 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8009108:	b580      	push	{r7, lr}
 800910a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800910c:	4802      	ldr	r0, [pc, #8]	; (8009118 <OTG_FS_IRQHandler+0x10>)
 800910e:	f004 fff2 	bl	800e0f6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8009112:	bf00      	nop
 8009114:	bd80      	pop	{r7, pc}
 8009116:	bf00      	nop
 8009118:	2400302c 	.word	0x2400302c

0800911c <COMP1_IRQHandler>:

/**
  * @brief This function handles COMP1 and COMP2 interrupts through EXTI lines 20 and 21.
  */
void COMP_IRQHandler(void)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP_IRQn 0 */

  /* USER CODE END COMP_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp2);
 8009120:	4802      	ldr	r0, [pc, #8]	; (800912c <COMP1_IRQHandler+0x10>)
 8009122:	f000 ffed 	bl	800a100 <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP_IRQn 1 */

  /* USER CODE END COMP_IRQn 1 */
}
 8009126:	bf00      	nop
 8009128:	bd80      	pop	{r7, pc}
 800912a:	bf00      	nop
 800912c:	240014a8 	.word	0x240014a8

08009130 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8009130:	b480      	push	{r7}
 8009132:	af00      	add	r7, sp, #0
	return 1;
 8009134:	2301      	movs	r3, #1
}
 8009136:	4618      	mov	r0, r3
 8009138:	46bd      	mov	sp, r7
 800913a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913e:	4770      	bx	lr

08009140 <_kill>:

int _kill(int pid, int sig)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b082      	sub	sp, #8
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
 8009148:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800914a:	f010 fee3 	bl	8019f14 <__errno>
 800914e:	4603      	mov	r3, r0
 8009150:	2216      	movs	r2, #22
 8009152:	601a      	str	r2, [r3, #0]
	return -1;
 8009154:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8009158:	4618      	mov	r0, r3
 800915a:	3708      	adds	r7, #8
 800915c:	46bd      	mov	sp, r7
 800915e:	bd80      	pop	{r7, pc}

08009160 <_exit>:

void _exit (int status)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b082      	sub	sp, #8
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8009168:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800916c:	6878      	ldr	r0, [r7, #4]
 800916e:	f7ff ffe7 	bl	8009140 <_kill>
	while (1) {}		/* Make sure we hang here */
 8009172:	e7fe      	b.n	8009172 <_exit+0x12>

08009174 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b086      	sub	sp, #24
 8009178:	af00      	add	r7, sp, #0
 800917a:	60f8      	str	r0, [r7, #12]
 800917c:	60b9      	str	r1, [r7, #8]
 800917e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009180:	2300      	movs	r3, #0
 8009182:	617b      	str	r3, [r7, #20]
 8009184:	e00a      	b.n	800919c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8009186:	f3af 8000 	nop.w
 800918a:	4601      	mov	r1, r0
 800918c:	68bb      	ldr	r3, [r7, #8]
 800918e:	1c5a      	adds	r2, r3, #1
 8009190:	60ba      	str	r2, [r7, #8]
 8009192:	b2ca      	uxtb	r2, r1
 8009194:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009196:	697b      	ldr	r3, [r7, #20]
 8009198:	3301      	adds	r3, #1
 800919a:	617b      	str	r3, [r7, #20]
 800919c:	697a      	ldr	r2, [r7, #20]
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	429a      	cmp	r2, r3
 80091a2:	dbf0      	blt.n	8009186 <_read+0x12>
	}

return len;
 80091a4:	687b      	ldr	r3, [r7, #4]
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	3718      	adds	r7, #24
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}

080091ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80091ae:	b580      	push	{r7, lr}
 80091b0:	b086      	sub	sp, #24
 80091b2:	af00      	add	r7, sp, #0
 80091b4:	60f8      	str	r0, [r7, #12]
 80091b6:	60b9      	str	r1, [r7, #8]
 80091b8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80091ba:	2300      	movs	r3, #0
 80091bc:	617b      	str	r3, [r7, #20]
 80091be:	e009      	b.n	80091d4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	1c5a      	adds	r2, r3, #1
 80091c4:	60ba      	str	r2, [r7, #8]
 80091c6:	781b      	ldrb	r3, [r3, #0]
 80091c8:	4618      	mov	r0, r3
 80091ca:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80091ce:	697b      	ldr	r3, [r7, #20]
 80091d0:	3301      	adds	r3, #1
 80091d2:	617b      	str	r3, [r7, #20]
 80091d4:	697a      	ldr	r2, [r7, #20]
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	429a      	cmp	r2, r3
 80091da:	dbf1      	blt.n	80091c0 <_write+0x12>
	}
	return len;
 80091dc:	687b      	ldr	r3, [r7, #4]
}
 80091de:	4618      	mov	r0, r3
 80091e0:	3718      	adds	r7, #24
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}

080091e6 <_close>:

int _close(int file)
{
 80091e6:	b480      	push	{r7}
 80091e8:	b083      	sub	sp, #12
 80091ea:	af00      	add	r7, sp, #0
 80091ec:	6078      	str	r0, [r7, #4]
	return -1;
 80091ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80091f2:	4618      	mov	r0, r3
 80091f4:	370c      	adds	r7, #12
 80091f6:	46bd      	mov	sp, r7
 80091f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fc:	4770      	bx	lr

080091fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80091fe:	b480      	push	{r7}
 8009200:	b083      	sub	sp, #12
 8009202:	af00      	add	r7, sp, #0
 8009204:	6078      	str	r0, [r7, #4]
 8009206:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800920e:	605a      	str	r2, [r3, #4]
	return 0;
 8009210:	2300      	movs	r3, #0
}
 8009212:	4618      	mov	r0, r3
 8009214:	370c      	adds	r7, #12
 8009216:	46bd      	mov	sp, r7
 8009218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921c:	4770      	bx	lr

0800921e <_isatty>:

int _isatty(int file)
{
 800921e:	b480      	push	{r7}
 8009220:	b083      	sub	sp, #12
 8009222:	af00      	add	r7, sp, #0
 8009224:	6078      	str	r0, [r7, #4]
	return 1;
 8009226:	2301      	movs	r3, #1
}
 8009228:	4618      	mov	r0, r3
 800922a:	370c      	adds	r7, #12
 800922c:	46bd      	mov	sp, r7
 800922e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009232:	4770      	bx	lr

08009234 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8009234:	b480      	push	{r7}
 8009236:	b085      	sub	sp, #20
 8009238:	af00      	add	r7, sp, #0
 800923a:	60f8      	str	r0, [r7, #12]
 800923c:	60b9      	str	r1, [r7, #8]
 800923e:	607a      	str	r2, [r7, #4]
	return 0;
 8009240:	2300      	movs	r3, #0
}
 8009242:	4618      	mov	r0, r3
 8009244:	3714      	adds	r7, #20
 8009246:	46bd      	mov	sp, r7
 8009248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924c:	4770      	bx	lr
	...

08009250 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b086      	sub	sp, #24
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8009258:	4a14      	ldr	r2, [pc, #80]	; (80092ac <_sbrk+0x5c>)
 800925a:	4b15      	ldr	r3, [pc, #84]	; (80092b0 <_sbrk+0x60>)
 800925c:	1ad3      	subs	r3, r2, r3
 800925e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8009260:	697b      	ldr	r3, [r7, #20]
 8009262:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8009264:	4b13      	ldr	r3, [pc, #76]	; (80092b4 <_sbrk+0x64>)
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d102      	bne.n	8009272 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800926c:	4b11      	ldr	r3, [pc, #68]	; (80092b4 <_sbrk+0x64>)
 800926e:	4a12      	ldr	r2, [pc, #72]	; (80092b8 <_sbrk+0x68>)
 8009270:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8009272:	4b10      	ldr	r3, [pc, #64]	; (80092b4 <_sbrk+0x64>)
 8009274:	681a      	ldr	r2, [r3, #0]
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	4413      	add	r3, r2
 800927a:	693a      	ldr	r2, [r7, #16]
 800927c:	429a      	cmp	r2, r3
 800927e:	d207      	bcs.n	8009290 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8009280:	f010 fe48 	bl	8019f14 <__errno>
 8009284:	4603      	mov	r3, r0
 8009286:	220c      	movs	r2, #12
 8009288:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800928a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800928e:	e009      	b.n	80092a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8009290:	4b08      	ldr	r3, [pc, #32]	; (80092b4 <_sbrk+0x64>)
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8009296:	4b07      	ldr	r3, [pc, #28]	; (80092b4 <_sbrk+0x64>)
 8009298:	681a      	ldr	r2, [r3, #0]
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	4413      	add	r3, r2
 800929e:	4a05      	ldr	r2, [pc, #20]	; (80092b4 <_sbrk+0x64>)
 80092a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80092a2:	68fb      	ldr	r3, [r7, #12]
}
 80092a4:	4618      	mov	r0, r3
 80092a6:	3718      	adds	r7, #24
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bd80      	pop	{r7, pc}
 80092ac:	24080000 	.word	0x24080000
 80092b0:	00000400 	.word	0x00000400
 80092b4:	2400179c 	.word	0x2400179c
 80092b8:	24003668 	.word	0x24003668

080092bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80092bc:	b480      	push	{r7}
 80092be:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80092c0:	4b37      	ldr	r3, [pc, #220]	; (80093a0 <SystemInit+0xe4>)
 80092c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092c6:	4a36      	ldr	r2, [pc, #216]	; (80093a0 <SystemInit+0xe4>)
 80092c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80092cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80092d0:	4b34      	ldr	r3, [pc, #208]	; (80093a4 <SystemInit+0xe8>)
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	f003 030f 	and.w	r3, r3, #15
 80092d8:	2b06      	cmp	r3, #6
 80092da:	d807      	bhi.n	80092ec <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80092dc:	4b31      	ldr	r3, [pc, #196]	; (80093a4 <SystemInit+0xe8>)
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f023 030f 	bic.w	r3, r3, #15
 80092e4:	4a2f      	ldr	r2, [pc, #188]	; (80093a4 <SystemInit+0xe8>)
 80092e6:	f043 0307 	orr.w	r3, r3, #7
 80092ea:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80092ec:	4b2e      	ldr	r3, [pc, #184]	; (80093a8 <SystemInit+0xec>)
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	4a2d      	ldr	r2, [pc, #180]	; (80093a8 <SystemInit+0xec>)
 80092f2:	f043 0301 	orr.w	r3, r3, #1
 80092f6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80092f8:	4b2b      	ldr	r3, [pc, #172]	; (80093a8 <SystemInit+0xec>)
 80092fa:	2200      	movs	r2, #0
 80092fc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80092fe:	4b2a      	ldr	r3, [pc, #168]	; (80093a8 <SystemInit+0xec>)
 8009300:	681a      	ldr	r2, [r3, #0]
 8009302:	4929      	ldr	r1, [pc, #164]	; (80093a8 <SystemInit+0xec>)
 8009304:	4b29      	ldr	r3, [pc, #164]	; (80093ac <SystemInit+0xf0>)
 8009306:	4013      	ands	r3, r2
 8009308:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800930a:	4b26      	ldr	r3, [pc, #152]	; (80093a4 <SystemInit+0xe8>)
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f003 0308 	and.w	r3, r3, #8
 8009312:	2b00      	cmp	r3, #0
 8009314:	d007      	beq.n	8009326 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8009316:	4b23      	ldr	r3, [pc, #140]	; (80093a4 <SystemInit+0xe8>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f023 030f 	bic.w	r3, r3, #15
 800931e:	4a21      	ldr	r2, [pc, #132]	; (80093a4 <SystemInit+0xe8>)
 8009320:	f043 0307 	orr.w	r3, r3, #7
 8009324:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8009326:	4b20      	ldr	r3, [pc, #128]	; (80093a8 <SystemInit+0xec>)
 8009328:	2200      	movs	r2, #0
 800932a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800932c:	4b1e      	ldr	r3, [pc, #120]	; (80093a8 <SystemInit+0xec>)
 800932e:	2200      	movs	r2, #0
 8009330:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8009332:	4b1d      	ldr	r3, [pc, #116]	; (80093a8 <SystemInit+0xec>)
 8009334:	2200      	movs	r2, #0
 8009336:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8009338:	4b1b      	ldr	r3, [pc, #108]	; (80093a8 <SystemInit+0xec>)
 800933a:	4a1d      	ldr	r2, [pc, #116]	; (80093b0 <SystemInit+0xf4>)
 800933c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800933e:	4b1a      	ldr	r3, [pc, #104]	; (80093a8 <SystemInit+0xec>)
 8009340:	4a1c      	ldr	r2, [pc, #112]	; (80093b4 <SystemInit+0xf8>)
 8009342:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8009344:	4b18      	ldr	r3, [pc, #96]	; (80093a8 <SystemInit+0xec>)
 8009346:	4a1c      	ldr	r2, [pc, #112]	; (80093b8 <SystemInit+0xfc>)
 8009348:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800934a:	4b17      	ldr	r3, [pc, #92]	; (80093a8 <SystemInit+0xec>)
 800934c:	2200      	movs	r2, #0
 800934e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8009350:	4b15      	ldr	r3, [pc, #84]	; (80093a8 <SystemInit+0xec>)
 8009352:	4a19      	ldr	r2, [pc, #100]	; (80093b8 <SystemInit+0xfc>)
 8009354:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8009356:	4b14      	ldr	r3, [pc, #80]	; (80093a8 <SystemInit+0xec>)
 8009358:	2200      	movs	r2, #0
 800935a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800935c:	4b12      	ldr	r3, [pc, #72]	; (80093a8 <SystemInit+0xec>)
 800935e:	4a16      	ldr	r2, [pc, #88]	; (80093b8 <SystemInit+0xfc>)
 8009360:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8009362:	4b11      	ldr	r3, [pc, #68]	; (80093a8 <SystemInit+0xec>)
 8009364:	2200      	movs	r2, #0
 8009366:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8009368:	4b0f      	ldr	r3, [pc, #60]	; (80093a8 <SystemInit+0xec>)
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	4a0e      	ldr	r2, [pc, #56]	; (80093a8 <SystemInit+0xec>)
 800936e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009372:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8009374:	4b0c      	ldr	r3, [pc, #48]	; (80093a8 <SystemInit+0xec>)
 8009376:	2200      	movs	r2, #0
 8009378:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800937a:	4b10      	ldr	r3, [pc, #64]	; (80093bc <SystemInit+0x100>)
 800937c:	681a      	ldr	r2, [r3, #0]
 800937e:	4b10      	ldr	r3, [pc, #64]	; (80093c0 <SystemInit+0x104>)
 8009380:	4013      	ands	r3, r2
 8009382:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009386:	d202      	bcs.n	800938e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8009388:	4b0e      	ldr	r3, [pc, #56]	; (80093c4 <SystemInit+0x108>)
 800938a:	2201      	movs	r2, #1
 800938c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800938e:	4b0e      	ldr	r3, [pc, #56]	; (80093c8 <SystemInit+0x10c>)
 8009390:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8009394:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8009396:	bf00      	nop
 8009398:	46bd      	mov	sp, r7
 800939a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939e:	4770      	bx	lr
 80093a0:	e000ed00 	.word	0xe000ed00
 80093a4:	52002000 	.word	0x52002000
 80093a8:	58024400 	.word	0x58024400
 80093ac:	eaf6ed7f 	.word	0xeaf6ed7f
 80093b0:	02020200 	.word	0x02020200
 80093b4:	01ff0000 	.word	0x01ff0000
 80093b8:	01010280 	.word	0x01010280
 80093bc:	5c001000 	.word	0x5c001000
 80093c0:	ffff0000 	.word	0xffff0000
 80093c4:	51008108 	.word	0x51008108
 80093c8:	52004000 	.word	0x52004000

080093cc <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b088      	sub	sp, #32
 80093d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80093d2:	f107 0310 	add.w	r3, r7, #16
 80093d6:	2200      	movs	r2, #0
 80093d8:	601a      	str	r2, [r3, #0]
 80093da:	605a      	str	r2, [r3, #4]
 80093dc:	609a      	str	r2, [r3, #8]
 80093de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80093e0:	1d3b      	adds	r3, r7, #4
 80093e2:	2200      	movs	r2, #0
 80093e4:	601a      	str	r2, [r3, #0]
 80093e6:	605a      	str	r2, [r3, #4]
 80093e8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80093ea:	4b1e      	ldr	r3, [pc, #120]	; (8009464 <MX_TIM2_Init+0x98>)
 80093ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80093f0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 24000;
 80093f2:	4b1c      	ldr	r3, [pc, #112]	; (8009464 <MX_TIM2_Init+0x98>)
 80093f4:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 80093f8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80093fa:	4b1a      	ldr	r3, [pc, #104]	; (8009464 <MX_TIM2_Init+0x98>)
 80093fc:	2200      	movs	r2, #0
 80093fe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8009400:	4b18      	ldr	r3, [pc, #96]	; (8009464 <MX_TIM2_Init+0x98>)
 8009402:	2264      	movs	r2, #100	; 0x64
 8009404:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009406:	4b17      	ldr	r3, [pc, #92]	; (8009464 <MX_TIM2_Init+0x98>)
 8009408:	2200      	movs	r2, #0
 800940a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800940c:	4b15      	ldr	r3, [pc, #84]	; (8009464 <MX_TIM2_Init+0x98>)
 800940e:	2200      	movs	r2, #0
 8009410:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8009412:	4814      	ldr	r0, [pc, #80]	; (8009464 <MX_TIM2_Init+0x98>)
 8009414:	f009 fd35 	bl	8012e82 <HAL_TIM_Base_Init>
 8009418:	4603      	mov	r3, r0
 800941a:	2b00      	cmp	r3, #0
 800941c:	d001      	beq.n	8009422 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800941e:	f7ff fc6b 	bl	8008cf8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009422:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009426:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8009428:	f107 0310 	add.w	r3, r7, #16
 800942c:	4619      	mov	r1, r3
 800942e:	480d      	ldr	r0, [pc, #52]	; (8009464 <MX_TIM2_Init+0x98>)
 8009430:	f009 ff16 	bl	8013260 <HAL_TIM_ConfigClockSource>
 8009434:	4603      	mov	r3, r0
 8009436:	2b00      	cmp	r3, #0
 8009438:	d001      	beq.n	800943e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800943a:	f7ff fc5d 	bl	8008cf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800943e:	2300      	movs	r3, #0
 8009440:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009442:	2300      	movs	r3, #0
 8009444:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8009446:	1d3b      	adds	r3, r7, #4
 8009448:	4619      	mov	r1, r3
 800944a:	4806      	ldr	r0, [pc, #24]	; (8009464 <MX_TIM2_Init+0x98>)
 800944c:	f00a f960 	bl	8013710 <HAL_TIMEx_MasterConfigSynchronization>
 8009450:	4603      	mov	r3, r0
 8009452:	2b00      	cmp	r3, #0
 8009454:	d001      	beq.n	800945a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8009456:	f7ff fc4f 	bl	8008cf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800945a:	bf00      	nop
 800945c:	3720      	adds	r7, #32
 800945e:	46bd      	mov	sp, r7
 8009460:	bd80      	pop	{r7, pc}
 8009462:	bf00      	nop
 8009464:	240017a0 	.word	0x240017a0

08009468 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b088      	sub	sp, #32
 800946c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800946e:	f107 0310 	add.w	r3, r7, #16
 8009472:	2200      	movs	r2, #0
 8009474:	601a      	str	r2, [r3, #0]
 8009476:	605a      	str	r2, [r3, #4]
 8009478:	609a      	str	r2, [r3, #8]
 800947a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800947c:	1d3b      	adds	r3, r7, #4
 800947e:	2200      	movs	r2, #0
 8009480:	601a      	str	r2, [r3, #0]
 8009482:	605a      	str	r2, [r3, #4]
 8009484:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8009486:	4b1d      	ldr	r3, [pc, #116]	; (80094fc <MX_TIM3_Init+0x94>)
 8009488:	4a1d      	ldr	r2, [pc, #116]	; (8009500 <MX_TIM3_Init+0x98>)
 800948a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 24000;
 800948c:	4b1b      	ldr	r3, [pc, #108]	; (80094fc <MX_TIM3_Init+0x94>)
 800948e:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 8009492:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009494:	4b19      	ldr	r3, [pc, #100]	; (80094fc <MX_TIM3_Init+0x94>)
 8009496:	2200      	movs	r2, #0
 8009498:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 800949a:	4b18      	ldr	r3, [pc, #96]	; (80094fc <MX_TIM3_Init+0x94>)
 800949c:	2264      	movs	r2, #100	; 0x64
 800949e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80094a0:	4b16      	ldr	r3, [pc, #88]	; (80094fc <MX_TIM3_Init+0x94>)
 80094a2:	2200      	movs	r2, #0
 80094a4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80094a6:	4b15      	ldr	r3, [pc, #84]	; (80094fc <MX_TIM3_Init+0x94>)
 80094a8:	2200      	movs	r2, #0
 80094aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80094ac:	4813      	ldr	r0, [pc, #76]	; (80094fc <MX_TIM3_Init+0x94>)
 80094ae:	f009 fce8 	bl	8012e82 <HAL_TIM_Base_Init>
 80094b2:	4603      	mov	r3, r0
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d001      	beq.n	80094bc <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80094b8:	f7ff fc1e 	bl	8008cf8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80094bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80094c0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80094c2:	f107 0310 	add.w	r3, r7, #16
 80094c6:	4619      	mov	r1, r3
 80094c8:	480c      	ldr	r0, [pc, #48]	; (80094fc <MX_TIM3_Init+0x94>)
 80094ca:	f009 fec9 	bl	8013260 <HAL_TIM_ConfigClockSource>
 80094ce:	4603      	mov	r3, r0
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d001      	beq.n	80094d8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80094d4:	f7ff fc10 	bl	8008cf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80094d8:	2300      	movs	r3, #0
 80094da:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80094dc:	2300      	movs	r3, #0
 80094de:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80094e0:	1d3b      	adds	r3, r7, #4
 80094e2:	4619      	mov	r1, r3
 80094e4:	4805      	ldr	r0, [pc, #20]	; (80094fc <MX_TIM3_Init+0x94>)
 80094e6:	f00a f913 	bl	8013710 <HAL_TIMEx_MasterConfigSynchronization>
 80094ea:	4603      	mov	r3, r0
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d001      	beq.n	80094f4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80094f0:	f7ff fc02 	bl	8008cf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80094f4:	bf00      	nop
 80094f6:	3720      	adds	r7, #32
 80094f8:	46bd      	mov	sp, r7
 80094fa:	bd80      	pop	{r7, pc}
 80094fc:	240017ec 	.word	0x240017ec
 8009500:	40000400 	.word	0x40000400

08009504 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b088      	sub	sp, #32
 8009508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800950a:	f107 0310 	add.w	r3, r7, #16
 800950e:	2200      	movs	r2, #0
 8009510:	601a      	str	r2, [r3, #0]
 8009512:	605a      	str	r2, [r3, #4]
 8009514:	609a      	str	r2, [r3, #8]
 8009516:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009518:	1d3b      	adds	r3, r7, #4
 800951a:	2200      	movs	r2, #0
 800951c:	601a      	str	r2, [r3, #0]
 800951e:	605a      	str	r2, [r3, #4]
 8009520:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8009522:	4b1d      	ldr	r3, [pc, #116]	; (8009598 <MX_TIM4_Init+0x94>)
 8009524:	4a1d      	ldr	r2, [pc, #116]	; (800959c <MX_TIM4_Init+0x98>)
 8009526:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 24000;
 8009528:	4b1b      	ldr	r3, [pc, #108]	; (8009598 <MX_TIM4_Init+0x94>)
 800952a:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 800952e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009530:	4b19      	ldr	r3, [pc, #100]	; (8009598 <MX_TIM4_Init+0x94>)
 8009532:	2200      	movs	r2, #0
 8009534:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 8009536:	4b18      	ldr	r3, [pc, #96]	; (8009598 <MX_TIM4_Init+0x94>)
 8009538:	2264      	movs	r2, #100	; 0x64
 800953a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800953c:	4b16      	ldr	r3, [pc, #88]	; (8009598 <MX_TIM4_Init+0x94>)
 800953e:	2200      	movs	r2, #0
 8009540:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009542:	4b15      	ldr	r3, [pc, #84]	; (8009598 <MX_TIM4_Init+0x94>)
 8009544:	2200      	movs	r2, #0
 8009546:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8009548:	4813      	ldr	r0, [pc, #76]	; (8009598 <MX_TIM4_Init+0x94>)
 800954a:	f009 fc9a 	bl	8012e82 <HAL_TIM_Base_Init>
 800954e:	4603      	mov	r3, r0
 8009550:	2b00      	cmp	r3, #0
 8009552:	d001      	beq.n	8009558 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8009554:	f7ff fbd0 	bl	8008cf8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009558:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800955c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800955e:	f107 0310 	add.w	r3, r7, #16
 8009562:	4619      	mov	r1, r3
 8009564:	480c      	ldr	r0, [pc, #48]	; (8009598 <MX_TIM4_Init+0x94>)
 8009566:	f009 fe7b 	bl	8013260 <HAL_TIM_ConfigClockSource>
 800956a:	4603      	mov	r3, r0
 800956c:	2b00      	cmp	r3, #0
 800956e:	d001      	beq.n	8009574 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8009570:	f7ff fbc2 	bl	8008cf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009574:	2300      	movs	r3, #0
 8009576:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009578:	2300      	movs	r3, #0
 800957a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800957c:	1d3b      	adds	r3, r7, #4
 800957e:	4619      	mov	r1, r3
 8009580:	4805      	ldr	r0, [pc, #20]	; (8009598 <MX_TIM4_Init+0x94>)
 8009582:	f00a f8c5 	bl	8013710 <HAL_TIMEx_MasterConfigSynchronization>
 8009586:	4603      	mov	r3, r0
 8009588:	2b00      	cmp	r3, #0
 800958a:	d001      	beq.n	8009590 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 800958c:	f7ff fbb4 	bl	8008cf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8009590:	bf00      	nop
 8009592:	3720      	adds	r7, #32
 8009594:	46bd      	mov	sp, r7
 8009596:	bd80      	pop	{r7, pc}
 8009598:	24001838 	.word	0x24001838
 800959c:	40000800 	.word	0x40000800

080095a0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b086      	sub	sp, #24
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095b0:	d117      	bne.n	80095e2 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80095b2:	4b2a      	ldr	r3, [pc, #168]	; (800965c <HAL_TIM_Base_MspInit+0xbc>)
 80095b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80095b8:	4a28      	ldr	r2, [pc, #160]	; (800965c <HAL_TIM_Base_MspInit+0xbc>)
 80095ba:	f043 0301 	orr.w	r3, r3, #1
 80095be:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80095c2:	4b26      	ldr	r3, [pc, #152]	; (800965c <HAL_TIM_Base_MspInit+0xbc>)
 80095c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80095c8:	f003 0301 	and.w	r3, r3, #1
 80095cc:	617b      	str	r3, [r7, #20]
 80095ce:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80095d0:	2200      	movs	r2, #0
 80095d2:	2100      	movs	r1, #0
 80095d4:	201c      	movs	r0, #28
 80095d6:	f000 fee2 	bl	800a39e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80095da:	201c      	movs	r0, #28
 80095dc:	f000 fef9 	bl	800a3d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80095e0:	e038      	b.n	8009654 <HAL_TIM_Base_MspInit+0xb4>
  else if(tim_baseHandle->Instance==TIM3)
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	4a1e      	ldr	r2, [pc, #120]	; (8009660 <HAL_TIM_Base_MspInit+0xc0>)
 80095e8:	4293      	cmp	r3, r2
 80095ea:	d117      	bne.n	800961c <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80095ec:	4b1b      	ldr	r3, [pc, #108]	; (800965c <HAL_TIM_Base_MspInit+0xbc>)
 80095ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80095f2:	4a1a      	ldr	r2, [pc, #104]	; (800965c <HAL_TIM_Base_MspInit+0xbc>)
 80095f4:	f043 0302 	orr.w	r3, r3, #2
 80095f8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80095fc:	4b17      	ldr	r3, [pc, #92]	; (800965c <HAL_TIM_Base_MspInit+0xbc>)
 80095fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009602:	f003 0302 	and.w	r3, r3, #2
 8009606:	613b      	str	r3, [r7, #16]
 8009608:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800960a:	2200      	movs	r2, #0
 800960c:	2100      	movs	r1, #0
 800960e:	201d      	movs	r0, #29
 8009610:	f000 fec5 	bl	800a39e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8009614:	201d      	movs	r0, #29
 8009616:	f000 fedc 	bl	800a3d2 <HAL_NVIC_EnableIRQ>
}
 800961a:	e01b      	b.n	8009654 <HAL_TIM_Base_MspInit+0xb4>
  else if(tim_baseHandle->Instance==TIM4)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	4a10      	ldr	r2, [pc, #64]	; (8009664 <HAL_TIM_Base_MspInit+0xc4>)
 8009622:	4293      	cmp	r3, r2
 8009624:	d116      	bne.n	8009654 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8009626:	4b0d      	ldr	r3, [pc, #52]	; (800965c <HAL_TIM_Base_MspInit+0xbc>)
 8009628:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800962c:	4a0b      	ldr	r2, [pc, #44]	; (800965c <HAL_TIM_Base_MspInit+0xbc>)
 800962e:	f043 0304 	orr.w	r3, r3, #4
 8009632:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8009636:	4b09      	ldr	r3, [pc, #36]	; (800965c <HAL_TIM_Base_MspInit+0xbc>)
 8009638:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800963c:	f003 0304 	and.w	r3, r3, #4
 8009640:	60fb      	str	r3, [r7, #12]
 8009642:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8009644:	2200      	movs	r2, #0
 8009646:	2100      	movs	r1, #0
 8009648:	201e      	movs	r0, #30
 800964a:	f000 fea8 	bl	800a39e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800964e:	201e      	movs	r0, #30
 8009650:	f000 febf 	bl	800a3d2 <HAL_NVIC_EnableIRQ>
}
 8009654:	bf00      	nop
 8009656:	3718      	adds	r7, #24
 8009658:	46bd      	mov	sp, r7
 800965a:	bd80      	pop	{r7, pc}
 800965c:	58024400 	.word	0x58024400
 8009660:	40000400 	.word	0x40000400
 8009664:	40000800 	.word	0x40000800

08009668 <MX_UART4_Init>:
UART_HandleTypeDef huart2;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800966c:	4b22      	ldr	r3, [pc, #136]	; (80096f8 <MX_UART4_Init+0x90>)
 800966e:	4a23      	ldr	r2, [pc, #140]	; (80096fc <MX_UART4_Init+0x94>)
 8009670:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 1250000;
 8009672:	4b21      	ldr	r3, [pc, #132]	; (80096f8 <MX_UART4_Init+0x90>)
 8009674:	4a22      	ldr	r2, [pc, #136]	; (8009700 <MX_UART4_Init+0x98>)
 8009676:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8009678:	4b1f      	ldr	r3, [pc, #124]	; (80096f8 <MX_UART4_Init+0x90>)
 800967a:	2200      	movs	r2, #0
 800967c:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800967e:	4b1e      	ldr	r3, [pc, #120]	; (80096f8 <MX_UART4_Init+0x90>)
 8009680:	2200      	movs	r2, #0
 8009682:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8009684:	4b1c      	ldr	r3, [pc, #112]	; (80096f8 <MX_UART4_Init+0x90>)
 8009686:	2200      	movs	r2, #0
 8009688:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800968a:	4b1b      	ldr	r3, [pc, #108]	; (80096f8 <MX_UART4_Init+0x90>)
 800968c:	220c      	movs	r2, #12
 800968e:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009690:	4b19      	ldr	r3, [pc, #100]	; (80096f8 <MX_UART4_Init+0x90>)
 8009692:	2200      	movs	r2, #0
 8009694:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8009696:	4b18      	ldr	r3, [pc, #96]	; (80096f8 <MX_UART4_Init+0x90>)
 8009698:	2200      	movs	r2, #0
 800969a:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800969c:	4b16      	ldr	r3, [pc, #88]	; (80096f8 <MX_UART4_Init+0x90>)
 800969e:	2200      	movs	r2, #0
 80096a0:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80096a2:	4b15      	ldr	r3, [pc, #84]	; (80096f8 <MX_UART4_Init+0x90>)
 80096a4:	2200      	movs	r2, #0
 80096a6:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80096a8:	4b13      	ldr	r3, [pc, #76]	; (80096f8 <MX_UART4_Init+0x90>)
 80096aa:	2200      	movs	r2, #0
 80096ac:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80096ae:	4812      	ldr	r0, [pc, #72]	; (80096f8 <MX_UART4_Init+0x90>)
 80096b0:	f00a f8da 	bl	8013868 <HAL_UART_Init>
 80096b4:	4603      	mov	r3, r0
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d001      	beq.n	80096be <MX_UART4_Init+0x56>
  {
    Error_Handler();
 80096ba:	f7ff fb1d 	bl	8008cf8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80096be:	2100      	movs	r1, #0
 80096c0:	480d      	ldr	r0, [pc, #52]	; (80096f8 <MX_UART4_Init+0x90>)
 80096c2:	f00c fde9 	bl	8016298 <HAL_UARTEx_SetTxFifoThreshold>
 80096c6:	4603      	mov	r3, r0
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d001      	beq.n	80096d0 <MX_UART4_Init+0x68>
  {
    Error_Handler();
 80096cc:	f7ff fb14 	bl	8008cf8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80096d0:	2100      	movs	r1, #0
 80096d2:	4809      	ldr	r0, [pc, #36]	; (80096f8 <MX_UART4_Init+0x90>)
 80096d4:	f00c fe1e 	bl	8016314 <HAL_UARTEx_SetRxFifoThreshold>
 80096d8:	4603      	mov	r3, r0
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d001      	beq.n	80096e2 <MX_UART4_Init+0x7a>
  {
    Error_Handler();
 80096de:	f7ff fb0b 	bl	8008cf8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80096e2:	4805      	ldr	r0, [pc, #20]	; (80096f8 <MX_UART4_Init+0x90>)
 80096e4:	f00c fd9f 	bl	8016226 <HAL_UARTEx_DisableFifoMode>
 80096e8:	4603      	mov	r3, r0
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d001      	beq.n	80096f2 <MX_UART4_Init+0x8a>
  {
    Error_Handler();
 80096ee:	f7ff fb03 	bl	8008cf8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80096f2:	bf00      	nop
 80096f4:	bd80      	pop	{r7, pc}
 80096f6:	bf00      	nop
 80096f8:	24001884 	.word	0x24001884
 80096fc:	40004c00 	.word	0x40004c00
 8009700:	001312d0 	.word	0x001312d0

08009704 <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 8009704:	b580      	push	{r7, lr}
 8009706:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8009708:	4b22      	ldr	r3, [pc, #136]	; (8009794 <MX_UART7_Init+0x90>)
 800970a:	4a23      	ldr	r2, [pc, #140]	; (8009798 <MX_UART7_Init+0x94>)
 800970c:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 1250000;
 800970e:	4b21      	ldr	r3, [pc, #132]	; (8009794 <MX_UART7_Init+0x90>)
 8009710:	4a22      	ldr	r2, [pc, #136]	; (800979c <MX_UART7_Init+0x98>)
 8009712:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8009714:	4b1f      	ldr	r3, [pc, #124]	; (8009794 <MX_UART7_Init+0x90>)
 8009716:	2200      	movs	r2, #0
 8009718:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 800971a:	4b1e      	ldr	r3, [pc, #120]	; (8009794 <MX_UART7_Init+0x90>)
 800971c:	2200      	movs	r2, #0
 800971e:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8009720:	4b1c      	ldr	r3, [pc, #112]	; (8009794 <MX_UART7_Init+0x90>)
 8009722:	2200      	movs	r2, #0
 8009724:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8009726:	4b1b      	ldr	r3, [pc, #108]	; (8009794 <MX_UART7_Init+0x90>)
 8009728:	220c      	movs	r2, #12
 800972a:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800972c:	4b19      	ldr	r3, [pc, #100]	; (8009794 <MX_UART7_Init+0x90>)
 800972e:	2200      	movs	r2, #0
 8009730:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8009732:	4b18      	ldr	r3, [pc, #96]	; (8009794 <MX_UART7_Init+0x90>)
 8009734:	2200      	movs	r2, #0
 8009736:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8009738:	4b16      	ldr	r3, [pc, #88]	; (8009794 <MX_UART7_Init+0x90>)
 800973a:	2200      	movs	r2, #0
 800973c:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800973e:	4b15      	ldr	r3, [pc, #84]	; (8009794 <MX_UART7_Init+0x90>)
 8009740:	2200      	movs	r2, #0
 8009742:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8009744:	4b13      	ldr	r3, [pc, #76]	; (8009794 <MX_UART7_Init+0x90>)
 8009746:	2200      	movs	r2, #0
 8009748:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 800974a:	4812      	ldr	r0, [pc, #72]	; (8009794 <MX_UART7_Init+0x90>)
 800974c:	f00a f88c 	bl	8013868 <HAL_UART_Init>
 8009750:	4603      	mov	r3, r0
 8009752:	2b00      	cmp	r3, #0
 8009754:	d001      	beq.n	800975a <MX_UART7_Init+0x56>
  {
    Error_Handler();
 8009756:	f7ff facf 	bl	8008cf8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800975a:	2100      	movs	r1, #0
 800975c:	480d      	ldr	r0, [pc, #52]	; (8009794 <MX_UART7_Init+0x90>)
 800975e:	f00c fd9b 	bl	8016298 <HAL_UARTEx_SetTxFifoThreshold>
 8009762:	4603      	mov	r3, r0
 8009764:	2b00      	cmp	r3, #0
 8009766:	d001      	beq.n	800976c <MX_UART7_Init+0x68>
  {
    Error_Handler();
 8009768:	f7ff fac6 	bl	8008cf8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800976c:	2100      	movs	r1, #0
 800976e:	4809      	ldr	r0, [pc, #36]	; (8009794 <MX_UART7_Init+0x90>)
 8009770:	f00c fdd0 	bl	8016314 <HAL_UARTEx_SetRxFifoThreshold>
 8009774:	4603      	mov	r3, r0
 8009776:	2b00      	cmp	r3, #0
 8009778:	d001      	beq.n	800977e <MX_UART7_Init+0x7a>
  {
    Error_Handler();
 800977a:	f7ff fabd 	bl	8008cf8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 800977e:	4805      	ldr	r0, [pc, #20]	; (8009794 <MX_UART7_Init+0x90>)
 8009780:	f00c fd51 	bl	8016226 <HAL_UARTEx_DisableFifoMode>
 8009784:	4603      	mov	r3, r0
 8009786:	2b00      	cmp	r3, #0
 8009788:	d001      	beq.n	800978e <MX_UART7_Init+0x8a>
  {
    Error_Handler();
 800978a:	f7ff fab5 	bl	8008cf8 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 800978e:	bf00      	nop
 8009790:	bd80      	pop	{r7, pc}
 8009792:	bf00      	nop
 8009794:	24001914 	.word	0x24001914
 8009798:	40007800 	.word	0x40007800
 800979c:	001312d0 	.word	0x001312d0

080097a0 <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 80097a4:	4b26      	ldr	r3, [pc, #152]	; (8009840 <MX_UART8_Init+0xa0>)
 80097a6:	4a27      	ldr	r2, [pc, #156]	; (8009844 <MX_UART8_Init+0xa4>)
 80097a8:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 1250000;
 80097aa:	4b25      	ldr	r3, [pc, #148]	; (8009840 <MX_UART8_Init+0xa0>)
 80097ac:	4a26      	ldr	r2, [pc, #152]	; (8009848 <MX_UART8_Init+0xa8>)
 80097ae:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_9B;
 80097b0:	4b23      	ldr	r3, [pc, #140]	; (8009840 <MX_UART8_Init+0xa0>)
 80097b2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80097b6:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 80097b8:	4b21      	ldr	r3, [pc, #132]	; (8009840 <MX_UART8_Init+0xa0>)
 80097ba:	2200      	movs	r2, #0
 80097bc:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_EVEN;
 80097be:	4b20      	ldr	r3, [pc, #128]	; (8009840 <MX_UART8_Init+0xa0>)
 80097c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80097c4:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80097c6:	4b1e      	ldr	r3, [pc, #120]	; (8009840 <MX_UART8_Init+0xa0>)
 80097c8:	220c      	movs	r2, #12
 80097ca:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80097cc:	4b1c      	ldr	r3, [pc, #112]	; (8009840 <MX_UART8_Init+0xa0>)
 80097ce:	2200      	movs	r2, #0
 80097d0:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80097d2:	4b1b      	ldr	r3, [pc, #108]	; (8009840 <MX_UART8_Init+0xa0>)
 80097d4:	2200      	movs	r2, #0
 80097d6:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80097d8:	4b19      	ldr	r3, [pc, #100]	; (8009840 <MX_UART8_Init+0xa0>)
 80097da:	2200      	movs	r2, #0
 80097dc:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80097de:	4b18      	ldr	r3, [pc, #96]	; (8009840 <MX_UART8_Init+0xa0>)
 80097e0:	2200      	movs	r2, #0
 80097e2:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 80097e4:	4b16      	ldr	r3, [pc, #88]	; (8009840 <MX_UART8_Init+0xa0>)
 80097e6:	2220      	movs	r2, #32
 80097e8:	629a      	str	r2, [r3, #40]	; 0x28
  huart8.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 80097ea:	4b15      	ldr	r3, [pc, #84]	; (8009840 <MX_UART8_Init+0xa0>)
 80097ec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80097f0:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80097f2:	4813      	ldr	r0, [pc, #76]	; (8009840 <MX_UART8_Init+0xa0>)
 80097f4:	f00a f838 	bl	8013868 <HAL_UART_Init>
 80097f8:	4603      	mov	r3, r0
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d001      	beq.n	8009802 <MX_UART8_Init+0x62>
  {
    Error_Handler();
 80097fe:	f7ff fa7b 	bl	8008cf8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 8009802:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 8009806:	480e      	ldr	r0, [pc, #56]	; (8009840 <MX_UART8_Init+0xa0>)
 8009808:	f00c fd46 	bl	8016298 <HAL_UARTEx_SetTxFifoThreshold>
 800980c:	4603      	mov	r3, r0
 800980e:	2b00      	cmp	r3, #0
 8009810:	d001      	beq.n	8009816 <MX_UART8_Init+0x76>
  {
    Error_Handler();
 8009812:	f7ff fa71 	bl	8008cf8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 8009816:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 800981a:	4809      	ldr	r0, [pc, #36]	; (8009840 <MX_UART8_Init+0xa0>)
 800981c:	f00c fd7a 	bl	8016314 <HAL_UARTEx_SetRxFifoThreshold>
 8009820:	4603      	mov	r3, r0
 8009822:	2b00      	cmp	r3, #0
 8009824:	d001      	beq.n	800982a <MX_UART8_Init+0x8a>
  {
    Error_Handler();
 8009826:	f7ff fa67 	bl	8008cf8 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart8) != HAL_OK)
 800982a:	4805      	ldr	r0, [pc, #20]	; (8009840 <MX_UART8_Init+0xa0>)
 800982c:	f00c fcc0 	bl	80161b0 <HAL_UARTEx_EnableFifoMode>
 8009830:	4603      	mov	r3, r0
 8009832:	2b00      	cmp	r3, #0
 8009834:	d001      	beq.n	800983a <MX_UART8_Init+0x9a>
  {
    Error_Handler();
 8009836:	f7ff fa5f 	bl	8008cf8 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 800983a:	bf00      	nop
 800983c:	bd80      	pop	{r7, pc}
 800983e:	bf00      	nop
 8009840:	240019a4 	.word	0x240019a4
 8009844:	40007c00 	.word	0x40007c00
 8009848:	001312d0 	.word	0x001312d0

0800984c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8009850:	4b22      	ldr	r3, [pc, #136]	; (80098dc <MX_USART2_UART_Init+0x90>)
 8009852:	4a23      	ldr	r2, [pc, #140]	; (80098e0 <MX_USART2_UART_Init+0x94>)
 8009854:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8009856:	4b21      	ldr	r3, [pc, #132]	; (80098dc <MX_USART2_UART_Init+0x90>)
 8009858:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800985c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800985e:	4b1f      	ldr	r3, [pc, #124]	; (80098dc <MX_USART2_UART_Init+0x90>)
 8009860:	2200      	movs	r2, #0
 8009862:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8009864:	4b1d      	ldr	r3, [pc, #116]	; (80098dc <MX_USART2_UART_Init+0x90>)
 8009866:	2200      	movs	r2, #0
 8009868:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800986a:	4b1c      	ldr	r3, [pc, #112]	; (80098dc <MX_USART2_UART_Init+0x90>)
 800986c:	2200      	movs	r2, #0
 800986e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8009870:	4b1a      	ldr	r3, [pc, #104]	; (80098dc <MX_USART2_UART_Init+0x90>)
 8009872:	220c      	movs	r2, #12
 8009874:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009876:	4b19      	ldr	r3, [pc, #100]	; (80098dc <MX_USART2_UART_Init+0x90>)
 8009878:	2200      	movs	r2, #0
 800987a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800987c:	4b17      	ldr	r3, [pc, #92]	; (80098dc <MX_USART2_UART_Init+0x90>)
 800987e:	2200      	movs	r2, #0
 8009880:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8009882:	4b16      	ldr	r3, [pc, #88]	; (80098dc <MX_USART2_UART_Init+0x90>)
 8009884:	2200      	movs	r2, #0
 8009886:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8009888:	4b14      	ldr	r3, [pc, #80]	; (80098dc <MX_USART2_UART_Init+0x90>)
 800988a:	2200      	movs	r2, #0
 800988c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800988e:	4b13      	ldr	r3, [pc, #76]	; (80098dc <MX_USART2_UART_Init+0x90>)
 8009890:	2200      	movs	r2, #0
 8009892:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8009894:	4811      	ldr	r0, [pc, #68]	; (80098dc <MX_USART2_UART_Init+0x90>)
 8009896:	f009 ffe7 	bl	8013868 <HAL_UART_Init>
 800989a:	4603      	mov	r3, r0
 800989c:	2b00      	cmp	r3, #0
 800989e:	d001      	beq.n	80098a4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80098a0:	f7ff fa2a 	bl	8008cf8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80098a4:	2100      	movs	r1, #0
 80098a6:	480d      	ldr	r0, [pc, #52]	; (80098dc <MX_USART2_UART_Init+0x90>)
 80098a8:	f00c fcf6 	bl	8016298 <HAL_UARTEx_SetTxFifoThreshold>
 80098ac:	4603      	mov	r3, r0
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d001      	beq.n	80098b6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80098b2:	f7ff fa21 	bl	8008cf8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80098b6:	2100      	movs	r1, #0
 80098b8:	4808      	ldr	r0, [pc, #32]	; (80098dc <MX_USART2_UART_Init+0x90>)
 80098ba:	f00c fd2b 	bl	8016314 <HAL_UARTEx_SetRxFifoThreshold>
 80098be:	4603      	mov	r3, r0
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d001      	beq.n	80098c8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80098c4:	f7ff fa18 	bl	8008cf8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80098c8:	4804      	ldr	r0, [pc, #16]	; (80098dc <MX_USART2_UART_Init+0x90>)
 80098ca:	f00c fcac 	bl	8016226 <HAL_UARTEx_DisableFifoMode>
 80098ce:	4603      	mov	r3, r0
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d001      	beq.n	80098d8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80098d4:	f7ff fa10 	bl	8008cf8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80098d8:	bf00      	nop
 80098da:	bd80      	pop	{r7, pc}
 80098dc:	24001a34 	.word	0x24001a34
 80098e0:	40004400 	.word	0x40004400

080098e4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80098e8:	4b26      	ldr	r3, [pc, #152]	; (8009984 <MX_USART3_UART_Init+0xa0>)
 80098ea:	4a27      	ldr	r2, [pc, #156]	; (8009988 <MX_USART3_UART_Init+0xa4>)
 80098ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80098ee:	4b25      	ldr	r3, [pc, #148]	; (8009984 <MX_USART3_UART_Init+0xa0>)
 80098f0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80098f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_9B;
 80098f6:	4b23      	ldr	r3, [pc, #140]	; (8009984 <MX_USART3_UART_Init+0xa0>)
 80098f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80098fc:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80098fe:	4b21      	ldr	r3, [pc, #132]	; (8009984 <MX_USART3_UART_Init+0xa0>)
 8009900:	2200      	movs	r2, #0
 8009902:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_EVEN;
 8009904:	4b1f      	ldr	r3, [pc, #124]	; (8009984 <MX_USART3_UART_Init+0xa0>)
 8009906:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800990a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800990c:	4b1d      	ldr	r3, [pc, #116]	; (8009984 <MX_USART3_UART_Init+0xa0>)
 800990e:	220c      	movs	r2, #12
 8009910:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009912:	4b1c      	ldr	r3, [pc, #112]	; (8009984 <MX_USART3_UART_Init+0xa0>)
 8009914:	2200      	movs	r2, #0
 8009916:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8009918:	4b1a      	ldr	r3, [pc, #104]	; (8009984 <MX_USART3_UART_Init+0xa0>)
 800991a:	2200      	movs	r2, #0
 800991c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800991e:	4b19      	ldr	r3, [pc, #100]	; (8009984 <MX_USART3_UART_Init+0xa0>)
 8009920:	2200      	movs	r2, #0
 8009922:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8009924:	4b17      	ldr	r3, [pc, #92]	; (8009984 <MX_USART3_UART_Init+0xa0>)
 8009926:	2200      	movs	r2, #0
 8009928:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 800992a:	4b16      	ldr	r3, [pc, #88]	; (8009984 <MX_USART3_UART_Init+0xa0>)
 800992c:	2220      	movs	r2, #32
 800992e:	629a      	str	r2, [r3, #40]	; 0x28
  huart3.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8009930:	4b14      	ldr	r3, [pc, #80]	; (8009984 <MX_USART3_UART_Init+0xa0>)
 8009932:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009936:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8009938:	4812      	ldr	r0, [pc, #72]	; (8009984 <MX_USART3_UART_Init+0xa0>)
 800993a:	f009 ff95 	bl	8013868 <HAL_UART_Init>
 800993e:	4603      	mov	r3, r0
 8009940:	2b00      	cmp	r3, #0
 8009942:	d001      	beq.n	8009948 <MX_USART3_UART_Init+0x64>
  {
    Error_Handler();
 8009944:	f7ff f9d8 	bl	8008cf8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 8009948:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 800994c:	480d      	ldr	r0, [pc, #52]	; (8009984 <MX_USART3_UART_Init+0xa0>)
 800994e:	f00c fca3 	bl	8016298 <HAL_UARTEx_SetTxFifoThreshold>
 8009952:	4603      	mov	r3, r0
 8009954:	2b00      	cmp	r3, #0
 8009956:	d001      	beq.n	800995c <MX_USART3_UART_Init+0x78>
  {
    Error_Handler();
 8009958:	f7ff f9ce 	bl	8008cf8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 800995c:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 8009960:	4808      	ldr	r0, [pc, #32]	; (8009984 <MX_USART3_UART_Init+0xa0>)
 8009962:	f00c fcd7 	bl	8016314 <HAL_UARTEx_SetRxFifoThreshold>
 8009966:	4603      	mov	r3, r0
 8009968:	2b00      	cmp	r3, #0
 800996a:	d001      	beq.n	8009970 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800996c:	f7ff f9c4 	bl	8008cf8 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart3) != HAL_OK)
 8009970:	4804      	ldr	r0, [pc, #16]	; (8009984 <MX_USART3_UART_Init+0xa0>)
 8009972:	f00c fc1d 	bl	80161b0 <HAL_UARTEx_EnableFifoMode>
 8009976:	4603      	mov	r3, r0
 8009978:	2b00      	cmp	r3, #0
 800997a:	d001      	beq.n	8009980 <MX_USART3_UART_Init+0x9c>
  {
    Error_Handler();
 800997c:	f7ff f9bc 	bl	8008cf8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8009980:	bf00      	nop
 8009982:	bd80      	pop	{r7, pc}
 8009984:	24001ac4 	.word	0x24001ac4
 8009988:	40004800 	.word	0x40004800

0800998c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b0c0      	sub	sp, #256	; 0x100
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009994:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8009998:	2200      	movs	r2, #0
 800999a:	601a      	str	r2, [r3, #0]
 800999c:	605a      	str	r2, [r3, #4]
 800999e:	609a      	str	r2, [r3, #8]
 80099a0:	60da      	str	r2, [r3, #12]
 80099a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80099a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80099a8:	22bc      	movs	r2, #188	; 0xbc
 80099aa:	2100      	movs	r1, #0
 80099ac:	4618      	mov	r0, r3
 80099ae:	f010 fb25 	bl	8019ffc <memset>
  if(uartHandle->Instance==UART4)
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	4abe      	ldr	r2, [pc, #760]	; (8009cb0 <HAL_UART_MspInit+0x324>)
 80099b8:	4293      	cmp	r3, r2
 80099ba:	d142      	bne.n	8009a42 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80099bc:	2302      	movs	r3, #2
 80099be:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80099c0:	2300      	movs	r3, #0
 80099c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80099c6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80099ca:	4618      	mov	r0, r3
 80099cc:	f006 fc10 	bl	80101f0 <HAL_RCCEx_PeriphCLKConfig>
 80099d0:	4603      	mov	r3, r0
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d001      	beq.n	80099da <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80099d6:	f7ff f98f 	bl	8008cf8 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80099da:	4bb6      	ldr	r3, [pc, #728]	; (8009cb4 <HAL_UART_MspInit+0x328>)
 80099dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80099e0:	4ab4      	ldr	r2, [pc, #720]	; (8009cb4 <HAL_UART_MspInit+0x328>)
 80099e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80099e6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80099ea:	4bb2      	ldr	r3, [pc, #712]	; (8009cb4 <HAL_UART_MspInit+0x328>)
 80099ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80099f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80099f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80099f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80099f8:	4bae      	ldr	r3, [pc, #696]	; (8009cb4 <HAL_UART_MspInit+0x328>)
 80099fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80099fe:	4aad      	ldr	r2, [pc, #692]	; (8009cb4 <HAL_UART_MspInit+0x328>)
 8009a00:	f043 0301 	orr.w	r3, r3, #1
 8009a04:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009a08:	4baa      	ldr	r3, [pc, #680]	; (8009cb4 <HAL_UART_MspInit+0x328>)
 8009a0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009a0e:	f003 0301 	and.w	r3, r3, #1
 8009a12:	62bb      	str	r3, [r7, #40]	; 0x28
 8009a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8009a16:	2303      	movs	r3, #3
 8009a18:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009a1c:	2302      	movs	r3, #2
 8009a1e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a22:	2300      	movs	r3, #0
 8009a24:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009a28:	2300      	movs	r3, #0
 8009a2a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8009a2e:	2308      	movs	r3, #8
 8009a30:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009a34:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8009a38:	4619      	mov	r1, r3
 8009a3a:	489f      	ldr	r0, [pc, #636]	; (8009cb8 <HAL_UART_MspInit+0x32c>)
 8009a3c:	f003 f88e 	bl	800cb5c <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8009a40:	e130      	b.n	8009ca4 <HAL_UART_MspInit+0x318>
  else if(uartHandle->Instance==UART7)
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	4a9d      	ldr	r2, [pc, #628]	; (8009cbc <HAL_UART_MspInit+0x330>)
 8009a48:	4293      	cmp	r3, r2
 8009a4a:	d143      	bne.n	8009ad4 <HAL_UART_MspInit+0x148>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8009a4c:	2302      	movs	r3, #2
 8009a4e:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8009a50:	2300      	movs	r3, #0
 8009a52:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009a56:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	f006 fbc8 	bl	80101f0 <HAL_RCCEx_PeriphCLKConfig>
 8009a60:	4603      	mov	r3, r0
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d001      	beq.n	8009a6a <HAL_UART_MspInit+0xde>
      Error_Handler();
 8009a66:	f7ff f947 	bl	8008cf8 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8009a6a:	4b92      	ldr	r3, [pc, #584]	; (8009cb4 <HAL_UART_MspInit+0x328>)
 8009a6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009a70:	4a90      	ldr	r2, [pc, #576]	; (8009cb4 <HAL_UART_MspInit+0x328>)
 8009a72:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009a76:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8009a7a:	4b8e      	ldr	r3, [pc, #568]	; (8009cb4 <HAL_UART_MspInit+0x328>)
 8009a7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009a80:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009a84:	627b      	str	r3, [r7, #36]	; 0x24
 8009a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8009a88:	4b8a      	ldr	r3, [pc, #552]	; (8009cb4 <HAL_UART_MspInit+0x328>)
 8009a8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009a8e:	4a89      	ldr	r2, [pc, #548]	; (8009cb4 <HAL_UART_MspInit+0x328>)
 8009a90:	f043 0310 	orr.w	r3, r3, #16
 8009a94:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009a98:	4b86      	ldr	r3, [pc, #536]	; (8009cb4 <HAL_UART_MspInit+0x328>)
 8009a9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009a9e:	f003 0310 	and.w	r3, r3, #16
 8009aa2:	623b      	str	r3, [r7, #32]
 8009aa4:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8009aa6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8009aaa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009aae:	2302      	movs	r3, #2
 8009ab0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009aba:	2300      	movs	r3, #0
 8009abc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8009ac0:	2307      	movs	r3, #7
 8009ac2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8009ac6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8009aca:	4619      	mov	r1, r3
 8009acc:	487c      	ldr	r0, [pc, #496]	; (8009cc0 <HAL_UART_MspInit+0x334>)
 8009ace:	f003 f845 	bl	800cb5c <HAL_GPIO_Init>
}
 8009ad2:	e0e7      	b.n	8009ca4 <HAL_UART_MspInit+0x318>
  else if(uartHandle->Instance==UART8)
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	4a7a      	ldr	r2, [pc, #488]	; (8009cc4 <HAL_UART_MspInit+0x338>)
 8009ada:	4293      	cmp	r3, r2
 8009adc:	d14a      	bne.n	8009b74 <HAL_UART_MspInit+0x1e8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8009ade:	2302      	movs	r3, #2
 8009ae0:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009ae8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009aec:	4618      	mov	r0, r3
 8009aee:	f006 fb7f 	bl	80101f0 <HAL_RCCEx_PeriphCLKConfig>
 8009af2:	4603      	mov	r3, r0
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d001      	beq.n	8009afc <HAL_UART_MspInit+0x170>
      Error_Handler();
 8009af8:	f7ff f8fe 	bl	8008cf8 <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 8009afc:	4b6d      	ldr	r3, [pc, #436]	; (8009cb4 <HAL_UART_MspInit+0x328>)
 8009afe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009b02:	4a6c      	ldr	r2, [pc, #432]	; (8009cb4 <HAL_UART_MspInit+0x328>)
 8009b04:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009b08:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8009b0c:	4b69      	ldr	r3, [pc, #420]	; (8009cb4 <HAL_UART_MspInit+0x328>)
 8009b0e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009b12:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009b16:	61fb      	str	r3, [r7, #28]
 8009b18:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8009b1a:	4b66      	ldr	r3, [pc, #408]	; (8009cb4 <HAL_UART_MspInit+0x328>)
 8009b1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009b20:	4a64      	ldr	r2, [pc, #400]	; (8009cb4 <HAL_UART_MspInit+0x328>)
 8009b22:	f043 0310 	orr.w	r3, r3, #16
 8009b26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009b2a:	4b62      	ldr	r3, [pc, #392]	; (8009cb4 <HAL_UART_MspInit+0x328>)
 8009b2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009b30:	f003 0310 	and.w	r3, r3, #16
 8009b34:	61bb      	str	r3, [r7, #24]
 8009b36:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8009b38:	2303      	movs	r3, #3
 8009b3a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009b3e:	2302      	movs	r3, #2
 8009b40:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b44:	2300      	movs	r3, #0
 8009b46:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8009b50:	2308      	movs	r3, #8
 8009b52:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8009b56:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8009b5a:	4619      	mov	r1, r3
 8009b5c:	4858      	ldr	r0, [pc, #352]	; (8009cc0 <HAL_UART_MspInit+0x334>)
 8009b5e:	f002 fffd 	bl	800cb5c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 8009b62:	2200      	movs	r2, #0
 8009b64:	2100      	movs	r1, #0
 8009b66:	2053      	movs	r0, #83	; 0x53
 8009b68:	f000 fc19 	bl	800a39e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8009b6c:	2053      	movs	r0, #83	; 0x53
 8009b6e:	f000 fc30 	bl	800a3d2 <HAL_NVIC_EnableIRQ>
}
 8009b72:	e097      	b.n	8009ca4 <HAL_UART_MspInit+0x318>
  else if(uartHandle->Instance==USART2)
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	4a53      	ldr	r2, [pc, #332]	; (8009cc8 <HAL_UART_MspInit+0x33c>)
 8009b7a:	4293      	cmp	r3, r2
 8009b7c:	d142      	bne.n	8009c04 <HAL_UART_MspInit+0x278>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8009b7e:	2302      	movs	r3, #2
 8009b80:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8009b82:	2300      	movs	r3, #0
 8009b84:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009b88:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	f006 fb2f 	bl	80101f0 <HAL_RCCEx_PeriphCLKConfig>
 8009b92:	4603      	mov	r3, r0
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d001      	beq.n	8009b9c <HAL_UART_MspInit+0x210>
      Error_Handler();
 8009b98:	f7ff f8ae 	bl	8008cf8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8009b9c:	4b45      	ldr	r3, [pc, #276]	; (8009cb4 <HAL_UART_MspInit+0x328>)
 8009b9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009ba2:	4a44      	ldr	r2, [pc, #272]	; (8009cb4 <HAL_UART_MspInit+0x328>)
 8009ba4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ba8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8009bac:	4b41      	ldr	r3, [pc, #260]	; (8009cb4 <HAL_UART_MspInit+0x328>)
 8009bae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009bb6:	617b      	str	r3, [r7, #20]
 8009bb8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009bba:	4b3e      	ldr	r3, [pc, #248]	; (8009cb4 <HAL_UART_MspInit+0x328>)
 8009bbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009bc0:	4a3c      	ldr	r2, [pc, #240]	; (8009cb4 <HAL_UART_MspInit+0x328>)
 8009bc2:	f043 0301 	orr.w	r3, r3, #1
 8009bc6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009bca:	4b3a      	ldr	r3, [pc, #232]	; (8009cb4 <HAL_UART_MspInit+0x328>)
 8009bcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009bd0:	f003 0301 	and.w	r3, r3, #1
 8009bd4:	613b      	str	r3, [r7, #16]
 8009bd6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8009bd8:	230c      	movs	r3, #12
 8009bda:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009bde:	2302      	movs	r3, #2
 8009be0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009be4:	2300      	movs	r3, #0
 8009be6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009bea:	2300      	movs	r3, #0
 8009bec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8009bf0:	2307      	movs	r3, #7
 8009bf2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009bf6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8009bfa:	4619      	mov	r1, r3
 8009bfc:	482e      	ldr	r0, [pc, #184]	; (8009cb8 <HAL_UART_MspInit+0x32c>)
 8009bfe:	f002 ffad 	bl	800cb5c <HAL_GPIO_Init>
}
 8009c02:	e04f      	b.n	8009ca4 <HAL_UART_MspInit+0x318>
  else if(uartHandle->Instance==USART3)
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	4a30      	ldr	r2, [pc, #192]	; (8009ccc <HAL_UART_MspInit+0x340>)
 8009c0a:	4293      	cmp	r3, r2
 8009c0c:	d14a      	bne.n	8009ca4 <HAL_UART_MspInit+0x318>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8009c0e:	2302      	movs	r3, #2
 8009c10:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8009c12:	2300      	movs	r3, #0
 8009c14:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009c18:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	f006 fae7 	bl	80101f0 <HAL_RCCEx_PeriphCLKConfig>
 8009c22:	4603      	mov	r3, r0
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d001      	beq.n	8009c2c <HAL_UART_MspInit+0x2a0>
      Error_Handler();
 8009c28:	f7ff f866 	bl	8008cf8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8009c2c:	4b21      	ldr	r3, [pc, #132]	; (8009cb4 <HAL_UART_MspInit+0x328>)
 8009c2e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009c32:	4a20      	ldr	r2, [pc, #128]	; (8009cb4 <HAL_UART_MspInit+0x328>)
 8009c34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009c38:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8009c3c:	4b1d      	ldr	r3, [pc, #116]	; (8009cb4 <HAL_UART_MspInit+0x328>)
 8009c3e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009c42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009c46:	60fb      	str	r3, [r7, #12]
 8009c48:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8009c4a:	4b1a      	ldr	r3, [pc, #104]	; (8009cb4 <HAL_UART_MspInit+0x328>)
 8009c4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009c50:	4a18      	ldr	r2, [pc, #96]	; (8009cb4 <HAL_UART_MspInit+0x328>)
 8009c52:	f043 0308 	orr.w	r3, r3, #8
 8009c56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009c5a:	4b16      	ldr	r3, [pc, #88]	; (8009cb4 <HAL_UART_MspInit+0x328>)
 8009c5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009c60:	f003 0308 	and.w	r3, r3, #8
 8009c64:	60bb      	str	r3, [r7, #8]
 8009c66:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8009c68:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009c6c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009c70:	2302      	movs	r3, #2
 8009c72:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c76:	2300      	movs	r3, #0
 8009c78:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8009c82:	2307      	movs	r3, #7
 8009c84:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009c88:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8009c8c:	4619      	mov	r1, r3
 8009c8e:	4810      	ldr	r0, [pc, #64]	; (8009cd0 <HAL_UART_MspInit+0x344>)
 8009c90:	f002 ff64 	bl	800cb5c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8009c94:	2200      	movs	r2, #0
 8009c96:	2100      	movs	r1, #0
 8009c98:	2027      	movs	r0, #39	; 0x27
 8009c9a:	f000 fb80 	bl	800a39e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8009c9e:	2027      	movs	r0, #39	; 0x27
 8009ca0:	f000 fb97 	bl	800a3d2 <HAL_NVIC_EnableIRQ>
}
 8009ca4:	bf00      	nop
 8009ca6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bd80      	pop	{r7, pc}
 8009cae:	bf00      	nop
 8009cb0:	40004c00 	.word	0x40004c00
 8009cb4:	58024400 	.word	0x58024400
 8009cb8:	58020000 	.word	0x58020000
 8009cbc:	40007800 	.word	0x40007800
 8009cc0:	58021000 	.word	0x58021000
 8009cc4:	40007c00 	.word	0x40007c00
 8009cc8:	40004400 	.word	0x40004400
 8009ccc:	40004800 	.word	0x40004800
 8009cd0:	58020c00 	.word	0x58020c00

08009cd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8009cd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009d0c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8009cd8:	f7ff faf0 	bl	80092bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8009cdc:	480c      	ldr	r0, [pc, #48]	; (8009d10 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8009cde:	490d      	ldr	r1, [pc, #52]	; (8009d14 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8009ce0:	4a0d      	ldr	r2, [pc, #52]	; (8009d18 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8009ce2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009ce4:	e002      	b.n	8009cec <LoopCopyDataInit>

08009ce6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009ce6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009ce8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8009cea:	3304      	adds	r3, #4

08009cec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009cec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009cee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009cf0:	d3f9      	bcc.n	8009ce6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009cf2:	4a0a      	ldr	r2, [pc, #40]	; (8009d1c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8009cf4:	4c0a      	ldr	r4, [pc, #40]	; (8009d20 <LoopFillZerobss+0x22>)
  movs r3, #0
 8009cf6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009cf8:	e001      	b.n	8009cfe <LoopFillZerobss>

08009cfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8009cfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009cfc:	3204      	adds	r2, #4

08009cfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8009cfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009d00:	d3fb      	bcc.n	8009cfa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8009d02:	f010 f91f 	bl	8019f44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009d06:	f7fe fecb 	bl	8008aa0 <main>
  bx  lr
 8009d0a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8009d0c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8009d10:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8009d14:	240001e8 	.word	0x240001e8
  ldr r2, =_sidata
 8009d18:	08035ab8 	.word	0x08035ab8
  ldr r2, =_sbss
 8009d1c:	240001e8 	.word	0x240001e8
  ldr r4, =_ebss
 8009d20:	24003668 	.word	0x24003668

08009d24 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009d24:	e7fe      	b.n	8009d24 <ADC3_IRQHandler>
	...

08009d28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b082      	sub	sp, #8
 8009d2c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009d2e:	2003      	movs	r0, #3
 8009d30:	f000 fb2a 	bl	800a388 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009d34:	f006 f886 	bl	800fe44 <HAL_RCC_GetSysClockFreq>
 8009d38:	4602      	mov	r2, r0
 8009d3a:	4b15      	ldr	r3, [pc, #84]	; (8009d90 <HAL_Init+0x68>)
 8009d3c:	699b      	ldr	r3, [r3, #24]
 8009d3e:	0a1b      	lsrs	r3, r3, #8
 8009d40:	f003 030f 	and.w	r3, r3, #15
 8009d44:	4913      	ldr	r1, [pc, #76]	; (8009d94 <HAL_Init+0x6c>)
 8009d46:	5ccb      	ldrb	r3, [r1, r3]
 8009d48:	f003 031f 	and.w	r3, r3, #31
 8009d4c:	fa22 f303 	lsr.w	r3, r2, r3
 8009d50:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009d52:	4b0f      	ldr	r3, [pc, #60]	; (8009d90 <HAL_Init+0x68>)
 8009d54:	699b      	ldr	r3, [r3, #24]
 8009d56:	f003 030f 	and.w	r3, r3, #15
 8009d5a:	4a0e      	ldr	r2, [pc, #56]	; (8009d94 <HAL_Init+0x6c>)
 8009d5c:	5cd3      	ldrb	r3, [r2, r3]
 8009d5e:	f003 031f 	and.w	r3, r3, #31
 8009d62:	687a      	ldr	r2, [r7, #4]
 8009d64:	fa22 f303 	lsr.w	r3, r2, r3
 8009d68:	4a0b      	ldr	r2, [pc, #44]	; (8009d98 <HAL_Init+0x70>)
 8009d6a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009d6c:	4a0b      	ldr	r2, [pc, #44]	; (8009d9c <HAL_Init+0x74>)
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8009d72:	200f      	movs	r0, #15
 8009d74:	f000 f814 	bl	8009da0 <HAL_InitTick>
 8009d78:	4603      	mov	r3, r0
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d001      	beq.n	8009d82 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8009d7e:	2301      	movs	r3, #1
 8009d80:	e002      	b.n	8009d88 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8009d82:	f7ff f8fb 	bl	8008f7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009d86:	2300      	movs	r3, #0
}
 8009d88:	4618      	mov	r0, r3
 8009d8a:	3708      	adds	r7, #8
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	bd80      	pop	{r7, pc}
 8009d90:	58024400 	.word	0x58024400
 8009d94:	0803598c 	.word	0x0803598c
 8009d98:	24000004 	.word	0x24000004
 8009d9c:	24000000 	.word	0x24000000

08009da0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b082      	sub	sp, #8
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8009da8:	4b15      	ldr	r3, [pc, #84]	; (8009e00 <HAL_InitTick+0x60>)
 8009daa:	781b      	ldrb	r3, [r3, #0]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d101      	bne.n	8009db4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8009db0:	2301      	movs	r3, #1
 8009db2:	e021      	b.n	8009df8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8009db4:	4b13      	ldr	r3, [pc, #76]	; (8009e04 <HAL_InitTick+0x64>)
 8009db6:	681a      	ldr	r2, [r3, #0]
 8009db8:	4b11      	ldr	r3, [pc, #68]	; (8009e00 <HAL_InitTick+0x60>)
 8009dba:	781b      	ldrb	r3, [r3, #0]
 8009dbc:	4619      	mov	r1, r3
 8009dbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009dc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8009dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009dca:	4618      	mov	r0, r3
 8009dcc:	f000 fb0f 	bl	800a3ee <HAL_SYSTICK_Config>
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d001      	beq.n	8009dda <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8009dd6:	2301      	movs	r3, #1
 8009dd8:	e00e      	b.n	8009df8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	2b0f      	cmp	r3, #15
 8009dde:	d80a      	bhi.n	8009df6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009de0:	2200      	movs	r2, #0
 8009de2:	6879      	ldr	r1, [r7, #4]
 8009de4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009de8:	f000 fad9 	bl	800a39e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009dec:	4a06      	ldr	r2, [pc, #24]	; (8009e08 <HAL_InitTick+0x68>)
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009df2:	2300      	movs	r3, #0
 8009df4:	e000      	b.n	8009df8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8009df6:	2301      	movs	r3, #1
}
 8009df8:	4618      	mov	r0, r3
 8009dfa:	3708      	adds	r7, #8
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	bd80      	pop	{r7, pc}
 8009e00:	2400000c 	.word	0x2400000c
 8009e04:	24000000 	.word	0x24000000
 8009e08:	24000008 	.word	0x24000008

08009e0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009e0c:	b480      	push	{r7}
 8009e0e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8009e10:	4b06      	ldr	r3, [pc, #24]	; (8009e2c <HAL_IncTick+0x20>)
 8009e12:	781b      	ldrb	r3, [r3, #0]
 8009e14:	461a      	mov	r2, r3
 8009e16:	4b06      	ldr	r3, [pc, #24]	; (8009e30 <HAL_IncTick+0x24>)
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	4413      	add	r3, r2
 8009e1c:	4a04      	ldr	r2, [pc, #16]	; (8009e30 <HAL_IncTick+0x24>)
 8009e1e:	6013      	str	r3, [r2, #0]
}
 8009e20:	bf00      	nop
 8009e22:	46bd      	mov	sp, r7
 8009e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e28:	4770      	bx	lr
 8009e2a:	bf00      	nop
 8009e2c:	2400000c 	.word	0x2400000c
 8009e30:	24001b54 	.word	0x24001b54

08009e34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009e34:	b480      	push	{r7}
 8009e36:	af00      	add	r7, sp, #0
  return uwTick;
 8009e38:	4b03      	ldr	r3, [pc, #12]	; (8009e48 <HAL_GetTick+0x14>)
 8009e3a:	681b      	ldr	r3, [r3, #0]
}
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e44:	4770      	bx	lr
 8009e46:	bf00      	nop
 8009e48:	24001b54 	.word	0x24001b54

08009e4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b084      	sub	sp, #16
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009e54:	f7ff ffee 	bl	8009e34 <HAL_GetTick>
 8009e58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009e64:	d005      	beq.n	8009e72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009e66:	4b0a      	ldr	r3, [pc, #40]	; (8009e90 <HAL_Delay+0x44>)
 8009e68:	781b      	ldrb	r3, [r3, #0]
 8009e6a:	461a      	mov	r2, r3
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	4413      	add	r3, r2
 8009e70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8009e72:	bf00      	nop
 8009e74:	f7ff ffde 	bl	8009e34 <HAL_GetTick>
 8009e78:	4602      	mov	r2, r0
 8009e7a:	68bb      	ldr	r3, [r7, #8]
 8009e7c:	1ad3      	subs	r3, r2, r3
 8009e7e:	68fa      	ldr	r2, [r7, #12]
 8009e80:	429a      	cmp	r2, r3
 8009e82:	d8f7      	bhi.n	8009e74 <HAL_Delay+0x28>
  {
  }
}
 8009e84:	bf00      	nop
 8009e86:	bf00      	nop
 8009e88:	3710      	adds	r7, #16
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	bd80      	pop	{r7, pc}
 8009e8e:	bf00      	nop
 8009e90:	2400000c 	.word	0x2400000c

08009e94 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8009e94:	b480      	push	{r7}
 8009e96:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8009e98:	4b03      	ldr	r3, [pc, #12]	; (8009ea8 <HAL_GetREVID+0x14>)
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	0c1b      	lsrs	r3, r3, #16
}
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea6:	4770      	bx	lr
 8009ea8:	5c001000 	.word	0x5c001000

08009eac <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b088      	sub	sp, #32
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr ;
  uint32_t exti_line ;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" is comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	60fb      	str	r3, [r7, #12]

  HAL_StatusTypeDef status = HAL_OK;
 8009eb8:	2300      	movs	r3, #0
 8009eba:	77fb      	strb	r3, [r7, #31]
  
  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d102      	bne.n	8009ec8 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8009ec2:	2301      	movs	r3, #1
 8009ec4:	77fb      	strb	r3, [r7, #31]
 8009ec6:	e10e      	b.n	800a0e6 <HAL_COMP_Init+0x23a>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009ed2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009ed6:	d102      	bne.n	8009ede <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8009ed8:	2301      	movs	r3, #1
 8009eda:	77fb      	strb	r3, [r7, #31]
 8009edc:	e103      	b.n	800a0e6 <HAL_COMP_Init+0x23a>
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRCE(hcomp->Init.BlankingSrce)); 
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009ee4:	b2db      	uxtb	r3, r3
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d109      	bne.n	8009efe <HAL_COMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	2200      	movs	r2, #0
 8009eee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	  
	  /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
	 /* Init the low level hardware */
      HAL_COMP_MspInit(hcomp);
 8009ef8:	6878      	ldr	r0, [r7, #4]
 8009efa:	f7fe fb41 	bl	8008580 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }
    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	f003 0304 	and.w	r3, r3, #4
 8009f08:	61bb      	str	r3, [r7, #24]
    /*     Set BLANKING bits according to hcomp->Init.BlankingSrce value       */
    /*     Set HYST bits according to hcomp->Init.Hysteresis value             */
    /*     Set POLARITY bit according to hcomp->Init.OutputPol value           */
    /*     Set POWERMODE bits according to hcomp->Init.Mode value              */
   
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	691a      	ldr	r2, [r3, #16]
              hcomp->Init.NonInvertingInput  |  \
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 8009f12:	431a      	orrs	r2, r3
              hcomp->Init.BlankingSrce       |  \
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	69db      	ldr	r3, [r3, #28]
              hcomp->Init.NonInvertingInput  |  \
 8009f18:	431a      	orrs	r2, r3
              hcomp->Init.Hysteresis         |  \
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	695b      	ldr	r3, [r3, #20]
              hcomp->Init.BlankingSrce       |  \
 8009f1e:	431a      	orrs	r2, r3
              hcomp->Init.OutputPol          |  \
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	699b      	ldr	r3, [r3, #24]
              hcomp->Init.Hysteresis         |  \
 8009f24:	431a      	orrs	r2, r3
              hcomp->Init.Mode                );
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 8009f2a:	4313      	orrs	r3, r2
 8009f2c:	617b      	str	r3, [r7, #20]
               COMP_CFGRx_INP2SEL  | COMP_CFGRx_WINMODE  | COMP_CFGRx_POLARITY | COMP_CFGRx_HYST    |
               COMP_CFGRx_BLANKING | COMP_CFGRx_BRGEN    | COMP_CFGRx_SCALEN,
               tmp_csr
              );
#else
    MODIFY_REG(hcomp->Instance->CFGR,
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	681a      	ldr	r2, [r3, #0]
 8009f34:	4b6e      	ldr	r3, [pc, #440]	; (800a0f0 <HAL_COMP_Init+0x244>)
 8009f36:	4013      	ands	r3, r2
 8009f38:	687a      	ldr	r2, [r7, #4]
 8009f3a:	6812      	ldr	r2, [r2, #0]
 8009f3c:	6979      	ldr	r1, [r7, #20]
 8009f3e:	430b      	orrs	r3, r1
 8009f40:	6013      	str	r3, [r2, #0]
#endif
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	685b      	ldr	r3, [r3, #4]
 8009f46:	2b10      	cmp	r3, #16
 8009f48:	d108      	bne.n	8009f5c <HAL_COMP_Init+0xb0>
    {
      SET_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	681a      	ldr	r2, [r3, #0]
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	f042 0210 	orr.w	r2, r2, #16
 8009f58:	601a      	str	r2, [r3, #0]
 8009f5a:	e007      	b.n	8009f6c <HAL_COMP_Init+0xc0>
    }
    else
    {
      CLEAR_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	681a      	ldr	r2, [r3, #0]
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	f022 0210 	bic.w	r2, r2, #16
 8009f6a:	601a      	str	r2, [r3, #0]
    }
    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is enabled for the first time */
    if ((READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN) != 0UL) &&
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	f003 0304 	and.w	r3, r3, #4
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d016      	beq.n	8009fa8 <HAL_COMP_Init+0xfc>
 8009f7a:	69bb      	ldr	r3, [r7, #24]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d013      	beq.n	8009fa8 <HAL_COMP_Init+0xfc>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially                  */
      /*       CPU processing cycles.*/

     wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8009f80:	4b5c      	ldr	r3, [pc, #368]	; (800a0f4 <HAL_COMP_Init+0x248>)
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	099b      	lsrs	r3, r3, #6
 8009f86:	4a5c      	ldr	r2, [pc, #368]	; (800a0f8 <HAL_COMP_Init+0x24c>)
 8009f88:	fba2 2303 	umull	r2, r3, r2, r3
 8009f8c:	099b      	lsrs	r3, r3, #6
 8009f8e:	1c5a      	adds	r2, r3, #1
 8009f90:	4613      	mov	r3, r2
 8009f92:	009b      	lsls	r3, r3, #2
 8009f94:	4413      	add	r3, r2
 8009f96:	009b      	lsls	r3, r3, #2
 8009f98:	60fb      	str	r3, [r7, #12]

     while(wait_loop_index != 0UL)
 8009f9a:	e002      	b.n	8009fa2 <HAL_COMP_Init+0xf6>
     {
       wait_loop_index --;
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	3b01      	subs	r3, #1
 8009fa0:	60fb      	str	r3, [r7, #12]
     while(wait_loop_index != 0UL)
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d1f9      	bne.n	8009f9c <HAL_COMP_Init+0xf0>
     }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	4a53      	ldr	r2, [pc, #332]	; (800a0fc <HAL_COMP_Init+0x250>)
 8009fae:	4293      	cmp	r3, r2
 8009fb0:	d102      	bne.n	8009fb8 <HAL_COMP_Init+0x10c>
 8009fb2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009fb6:	e001      	b.n	8009fbc <HAL_COMP_Init+0x110>
 8009fb8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009fbc:	613b      	str	r3, [r7, #16]
    
    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL) 
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	6a1b      	ldr	r3, [r3, #32]
 8009fc2:	f003 0303 	and.w	r3, r3, #3
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d06d      	beq.n	800a0a6 <HAL_COMP_Init+0x1fa>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	6a1b      	ldr	r3, [r3, #32]
 8009fce:	f003 0310 	and.w	r3, r3, #16
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d008      	beq.n	8009fe8 <HAL_COMP_Init+0x13c>
      {
        SET_BIT(EXTI->RTSR1, exti_line);
 8009fd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009fda:	681a      	ldr	r2, [r3, #0]
 8009fdc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009fe0:	693b      	ldr	r3, [r7, #16]
 8009fe2:	4313      	orrs	r3, r2
 8009fe4:	600b      	str	r3, [r1, #0]
 8009fe6:	e008      	b.n	8009ffa <HAL_COMP_Init+0x14e>
      }
      else
      {
        CLEAR_BIT(EXTI->RTSR1, exti_line);
 8009fe8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009fec:	681a      	ldr	r2, [r3, #0]
 8009fee:	693b      	ldr	r3, [r7, #16]
 8009ff0:	43db      	mvns	r3, r3
 8009ff2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009ff6:	4013      	ands	r3, r2
 8009ff8:	600b      	str	r3, [r1, #0]
      }
      
      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6a1b      	ldr	r3, [r3, #32]
 8009ffe:	f003 0320 	and.w	r3, r3, #32
 800a002:	2b00      	cmp	r3, #0
 800a004:	d008      	beq.n	800a018 <HAL_COMP_Init+0x16c>
      {
        SET_BIT(EXTI->FTSR1, exti_line);
 800a006:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a00a:	685a      	ldr	r2, [r3, #4]
 800a00c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a010:	693b      	ldr	r3, [r7, #16]
 800a012:	4313      	orrs	r3, r2
 800a014:	604b      	str	r3, [r1, #4]
 800a016:	e008      	b.n	800a02a <HAL_COMP_Init+0x17e>
      }
      else
      {
        CLEAR_BIT(EXTI->FTSR1, exti_line);
 800a018:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a01c:	685a      	ldr	r2, [r3, #4]
 800a01e:	693b      	ldr	r3, [r7, #16]
 800a020:	43db      	mvns	r3, r3
 800a022:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a026:	4013      	ands	r3, r2
 800a028:	604b      	str	r3, [r1, #4]
      }
     
#if !defined (CORE_CM4)
      /* Clear COMP EXTI pending bit (if any) */
      WRITE_REG(EXTI->PR1, exti_line);
 800a02a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a02e:	693b      	ldr	r3, [r7, #16]
 800a030:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	6a1b      	ldr	r3, [r3, #32]
 800a038:	f003 0302 	and.w	r3, r3, #2
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d00a      	beq.n	800a056 <HAL_COMP_Init+0x1aa>
      {
        SET_BIT(EXTI->EMR1, exti_line);
 800a040:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a044:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800a048:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a04c:	693b      	ldr	r3, [r7, #16]
 800a04e:	4313      	orrs	r3, r2
 800a050:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
 800a054:	e00a      	b.n	800a06c <HAL_COMP_Init+0x1c0>
      }
      else
      {
        CLEAR_BIT(EXTI->EMR1, exti_line);
 800a056:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a05a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800a05e:	693b      	ldr	r3, [r7, #16]
 800a060:	43db      	mvns	r3, r3
 800a062:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a066:	4013      	ands	r3, r2
 800a068:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      }
      
       /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	6a1b      	ldr	r3, [r3, #32]
 800a070:	f003 0301 	and.w	r3, r3, #1
 800a074:	2b00      	cmp	r3, #0
 800a076:	d00a      	beq.n	800a08e <HAL_COMP_Init+0x1e2>
      {
        SET_BIT(EXTI->IMR1, exti_line);
 800a078:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a07c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800a080:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a084:	693b      	ldr	r3, [r7, #16]
 800a086:	4313      	orrs	r3, r2
 800a088:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
 800a08c:	e021      	b.n	800a0d2 <HAL_COMP_Init+0x226>
      }
      else
      {
        CLEAR_BIT(EXTI->IMR1, exti_line);
 800a08e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a092:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800a096:	693b      	ldr	r3, [r7, #16]
 800a098:	43db      	mvns	r3, r3
 800a09a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a09e:	4013      	ands	r3, r2
 800a0a0:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
 800a0a4:	e015      	b.n	800a0d2 <HAL_COMP_Init+0x226>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      CLEAR_BIT(EXTI->EMR1, exti_line);
 800a0a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a0aa:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800a0ae:	693b      	ldr	r3, [r7, #16]
 800a0b0:	43db      	mvns	r3, r3
 800a0b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a0b6:	4013      	ands	r3, r2
 800a0b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      
      /* Disable EXTI interrupt mode */
      CLEAR_BIT(EXTI->IMR1, exti_line);
 800a0bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a0c0:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800a0c4:	693b      	ldr	r3, [r7, #16]
 800a0c6:	43db      	mvns	r3, r3
 800a0c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a0cc:	4013      	ands	r3, r2
 800a0ce:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
    }
#endif
    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800a0d8:	b2db      	uxtb	r3, r3
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d103      	bne.n	800a0e6 <HAL_COMP_Init+0x23a>
    {
     
      hcomp->State = HAL_COMP_STATE_READY;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	2201      	movs	r2, #1
 800a0e2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
   
  }
  
  return status;
 800a0e6:	7ffb      	ldrb	r3, [r7, #31]
}
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	3720      	adds	r7, #32
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	bd80      	pop	{r7, pc}
 800a0f0:	f0e8cce1 	.word	0xf0e8cce1
 800a0f4:	24000000 	.word	0x24000000
 800a0f8:	053e2d63 	.word	0x053e2d63
 800a0fc:	5800380c 	.word	0x5800380c

0800a100 <HAL_COMP_IRQHandler>:
  * @brief  Comparator IRQ Handler. 
  * @param  hcomp COMP handle
  * @retval HAL status
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
 800a100:	b580      	push	{r7, lr}
 800a102:	b084      	sub	sp, #16
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
  /* Get the EXTI line corresponding to the selected COMP instance */
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	4a33      	ldr	r2, [pc, #204]	; (800a1dc <HAL_COMP_IRQHandler+0xdc>)
 800a10e:	4293      	cmp	r3, r2
 800a110:	d102      	bne.n	800a118 <HAL_COMP_IRQHandler+0x18>
 800a112:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a116:	e001      	b.n	800a11c <HAL_COMP_IRQHandler+0x1c>
 800a118:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a11c:	60fb      	str	r3, [r7, #12]

 
 } 
#else
    /* Check COMP EXTI flag */
    if(READ_BIT(EXTI->PR1, exti_line) != 0UL)
 800a11e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a122:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	4013      	ands	r3, r2
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d014      	beq.n	800a158 <HAL_COMP_IRQHandler+0x58>
    {    
       /* Check whether comparator is in independent or window mode */
        if(READ_BIT(COMP12_COMMON->CFGR, COMP_CFGRx_WINMODE) != 0UL)
 800a12e:	4b2c      	ldr	r3, [pc, #176]	; (800a1e0 <HAL_COMP_IRQHandler+0xe0>)
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	f003 0310 	and.w	r3, r3, #16
 800a136:	2b00      	cmp	r3, #0
 800a138:	d006      	beq.n	800a148 <HAL_COMP_IRQHandler+0x48>
          /* Note: Pair of comparators in window mode can both trig IRQ when      */
          /*       input voltage is changing from "out of window" area            */
          /*       (low or high ) to the other "out of window" area (high or low).*/
          /*       Both flags must be cleared to call comparator trigger          */
          /*       callback is called once.                                       */
          WRITE_REG(EXTI->PR1, (COMP_EXTI_LINE_COMP1 | COMP_EXTI_LINE_COMP2));
 800a13a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a13e:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 800a142:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800a146:	e004      	b.n	800a152 <HAL_COMP_IRQHandler+0x52>
        }
        else
        {
          /* Clear COMP EXTI line pending bit */
          WRITE_REG(EXTI->PR1, exti_line);
 800a148:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 800a152:	6878      	ldr	r0, [r7, #4]
 800a154:	f7fe fd82 	bl	8008c5c <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }
#endif /*DUAL_CORE*/

   /* Get COMP interrupt source */
  if (__HAL_COMP_GET_IT_SOURCE(hcomp, COMP_IT_EN) != RESET)
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a162:	2b40      	cmp	r3, #64	; 0x40
 800a164:	d136      	bne.n	800a1d4 <HAL_COMP_IRQHandler+0xd4>
  {

    if((__HAL_COMP_GET_FLAG( COMP_FLAG_C1I)) != 0UL)
 800a166:	4b1f      	ldr	r3, [pc, #124]	; (800a1e4 <HAL_COMP_IRQHandler+0xe4>)
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a16e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a172:	d101      	bne.n	800a178 <HAL_COMP_IRQHandler+0x78>
 800a174:	2301      	movs	r3, #1
 800a176:	e000      	b.n	800a17a <HAL_COMP_IRQHandler+0x7a>
 800a178:	2300      	movs	r3, #0
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d00b      	beq.n	800a196 <HAL_COMP_IRQHandler+0x96>
    {
      /* Clear the COMP channel 1 interrupt flag */
         __HAL_COMP_CLEAR_C1IFLAG();
 800a17e:	4b19      	ldr	r3, [pc, #100]	; (800a1e4 <HAL_COMP_IRQHandler+0xe4>)
 800a180:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800a184:	605a      	str	r2, [r3, #4]
   
      /* Disable COMP interrupt */
       __HAL_COMP_DISABLE_IT(hcomp,COMP_IT_EN);
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	681a      	ldr	r2, [r3, #0]
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a194:	601a      	str	r2, [r3, #0]
   
    }
    if((__HAL_COMP_GET_FLAG( COMP_FLAG_C2I)) != 0UL)
 800a196:	4b13      	ldr	r3, [pc, #76]	; (800a1e4 <HAL_COMP_IRQHandler+0xe4>)
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a19e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a1a2:	d101      	bne.n	800a1a8 <HAL_COMP_IRQHandler+0xa8>
 800a1a4:	2301      	movs	r3, #1
 800a1a6:	e000      	b.n	800a1aa <HAL_COMP_IRQHandler+0xaa>
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d00b      	beq.n	800a1c6 <HAL_COMP_IRQHandler+0xc6>
    {
     /* Clear the COMP channel 2 interrupt flag */
       __HAL_COMP_CLEAR_C2IFLAG();
 800a1ae:	4b0d      	ldr	r3, [pc, #52]	; (800a1e4 <HAL_COMP_IRQHandler+0xe4>)
 800a1b0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800a1b4:	605a      	str	r2, [r3, #4]
   
     /* Disable COMP interrupt */
     __HAL_COMP_DISABLE_IT(hcomp,COMP_IT_EN);
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	681a      	ldr	r2, [r3, #0]
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a1c4:	601a      	str	r2, [r3, #0]
       
    }

    /* Change COMP state */
    hcomp->State = HAL_COMP_STATE_READY;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	2201      	movs	r2, #1
 800a1ca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 800a1ce:	6878      	ldr	r0, [r7, #4]
 800a1d0:	f7fe fd44 	bl	8008c5c <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
  }    
 

}
 800a1d4:	bf00      	nop
 800a1d6:	3710      	adds	r7, #16
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	bd80      	pop	{r7, pc}
 800a1dc:	5800380c 	.word	0x5800380c
 800a1e0:	58003810 	.word	0x58003810
 800a1e4:	58003800 	.word	0x58003800

0800a1e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a1e8:	b480      	push	{r7}
 800a1ea:	b085      	sub	sp, #20
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	f003 0307 	and.w	r3, r3, #7
 800a1f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a1f8:	4b0b      	ldr	r3, [pc, #44]	; (800a228 <__NVIC_SetPriorityGrouping+0x40>)
 800a1fa:	68db      	ldr	r3, [r3, #12]
 800a1fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a1fe:	68ba      	ldr	r2, [r7, #8]
 800a200:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a204:	4013      	ands	r3, r2
 800a206:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a20c:	68bb      	ldr	r3, [r7, #8]
 800a20e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800a210:	4b06      	ldr	r3, [pc, #24]	; (800a22c <__NVIC_SetPriorityGrouping+0x44>)
 800a212:	4313      	orrs	r3, r2
 800a214:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a216:	4a04      	ldr	r2, [pc, #16]	; (800a228 <__NVIC_SetPriorityGrouping+0x40>)
 800a218:	68bb      	ldr	r3, [r7, #8]
 800a21a:	60d3      	str	r3, [r2, #12]
}
 800a21c:	bf00      	nop
 800a21e:	3714      	adds	r7, #20
 800a220:	46bd      	mov	sp, r7
 800a222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a226:	4770      	bx	lr
 800a228:	e000ed00 	.word	0xe000ed00
 800a22c:	05fa0000 	.word	0x05fa0000

0800a230 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a230:	b480      	push	{r7}
 800a232:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a234:	4b04      	ldr	r3, [pc, #16]	; (800a248 <__NVIC_GetPriorityGrouping+0x18>)
 800a236:	68db      	ldr	r3, [r3, #12]
 800a238:	0a1b      	lsrs	r3, r3, #8
 800a23a:	f003 0307 	and.w	r3, r3, #7
}
 800a23e:	4618      	mov	r0, r3
 800a240:	46bd      	mov	sp, r7
 800a242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a246:	4770      	bx	lr
 800a248:	e000ed00 	.word	0xe000ed00

0800a24c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a24c:	b480      	push	{r7}
 800a24e:	b083      	sub	sp, #12
 800a250:	af00      	add	r7, sp, #0
 800a252:	4603      	mov	r3, r0
 800a254:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800a256:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	db0b      	blt.n	800a276 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a25e:	88fb      	ldrh	r3, [r7, #6]
 800a260:	f003 021f 	and.w	r2, r3, #31
 800a264:	4907      	ldr	r1, [pc, #28]	; (800a284 <__NVIC_EnableIRQ+0x38>)
 800a266:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a26a:	095b      	lsrs	r3, r3, #5
 800a26c:	2001      	movs	r0, #1
 800a26e:	fa00 f202 	lsl.w	r2, r0, r2
 800a272:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800a276:	bf00      	nop
 800a278:	370c      	adds	r7, #12
 800a27a:	46bd      	mov	sp, r7
 800a27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a280:	4770      	bx	lr
 800a282:	bf00      	nop
 800a284:	e000e100 	.word	0xe000e100

0800a288 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a288:	b480      	push	{r7}
 800a28a:	b083      	sub	sp, #12
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	4603      	mov	r3, r0
 800a290:	6039      	str	r1, [r7, #0]
 800a292:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800a294:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	db0a      	blt.n	800a2b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	b2da      	uxtb	r2, r3
 800a2a0:	490c      	ldr	r1, [pc, #48]	; (800a2d4 <__NVIC_SetPriority+0x4c>)
 800a2a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a2a6:	0112      	lsls	r2, r2, #4
 800a2a8:	b2d2      	uxtb	r2, r2
 800a2aa:	440b      	add	r3, r1
 800a2ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a2b0:	e00a      	b.n	800a2c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	b2da      	uxtb	r2, r3
 800a2b6:	4908      	ldr	r1, [pc, #32]	; (800a2d8 <__NVIC_SetPriority+0x50>)
 800a2b8:	88fb      	ldrh	r3, [r7, #6]
 800a2ba:	f003 030f 	and.w	r3, r3, #15
 800a2be:	3b04      	subs	r3, #4
 800a2c0:	0112      	lsls	r2, r2, #4
 800a2c2:	b2d2      	uxtb	r2, r2
 800a2c4:	440b      	add	r3, r1
 800a2c6:	761a      	strb	r2, [r3, #24]
}
 800a2c8:	bf00      	nop
 800a2ca:	370c      	adds	r7, #12
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d2:	4770      	bx	lr
 800a2d4:	e000e100 	.word	0xe000e100
 800a2d8:	e000ed00 	.word	0xe000ed00

0800a2dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a2dc:	b480      	push	{r7}
 800a2de:	b089      	sub	sp, #36	; 0x24
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	60f8      	str	r0, [r7, #12]
 800a2e4:	60b9      	str	r1, [r7, #8]
 800a2e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	f003 0307 	and.w	r3, r3, #7
 800a2ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a2f0:	69fb      	ldr	r3, [r7, #28]
 800a2f2:	f1c3 0307 	rsb	r3, r3, #7
 800a2f6:	2b04      	cmp	r3, #4
 800a2f8:	bf28      	it	cs
 800a2fa:	2304      	movcs	r3, #4
 800a2fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a2fe:	69fb      	ldr	r3, [r7, #28]
 800a300:	3304      	adds	r3, #4
 800a302:	2b06      	cmp	r3, #6
 800a304:	d902      	bls.n	800a30c <NVIC_EncodePriority+0x30>
 800a306:	69fb      	ldr	r3, [r7, #28]
 800a308:	3b03      	subs	r3, #3
 800a30a:	e000      	b.n	800a30e <NVIC_EncodePriority+0x32>
 800a30c:	2300      	movs	r3, #0
 800a30e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a310:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a314:	69bb      	ldr	r3, [r7, #24]
 800a316:	fa02 f303 	lsl.w	r3, r2, r3
 800a31a:	43da      	mvns	r2, r3
 800a31c:	68bb      	ldr	r3, [r7, #8]
 800a31e:	401a      	ands	r2, r3
 800a320:	697b      	ldr	r3, [r7, #20]
 800a322:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a324:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a328:	697b      	ldr	r3, [r7, #20]
 800a32a:	fa01 f303 	lsl.w	r3, r1, r3
 800a32e:	43d9      	mvns	r1, r3
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a334:	4313      	orrs	r3, r2
         );
}
 800a336:	4618      	mov	r0, r3
 800a338:	3724      	adds	r7, #36	; 0x24
 800a33a:	46bd      	mov	sp, r7
 800a33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a340:	4770      	bx	lr
	...

0800a344 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a344:	b580      	push	{r7, lr}
 800a346:	b082      	sub	sp, #8
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	3b01      	subs	r3, #1
 800a350:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a354:	d301      	bcc.n	800a35a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a356:	2301      	movs	r3, #1
 800a358:	e00f      	b.n	800a37a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a35a:	4a0a      	ldr	r2, [pc, #40]	; (800a384 <SysTick_Config+0x40>)
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	3b01      	subs	r3, #1
 800a360:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a362:	210f      	movs	r1, #15
 800a364:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a368:	f7ff ff8e 	bl	800a288 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a36c:	4b05      	ldr	r3, [pc, #20]	; (800a384 <SysTick_Config+0x40>)
 800a36e:	2200      	movs	r2, #0
 800a370:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a372:	4b04      	ldr	r3, [pc, #16]	; (800a384 <SysTick_Config+0x40>)
 800a374:	2207      	movs	r2, #7
 800a376:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a378:	2300      	movs	r3, #0
}
 800a37a:	4618      	mov	r0, r3
 800a37c:	3708      	adds	r7, #8
 800a37e:	46bd      	mov	sp, r7
 800a380:	bd80      	pop	{r7, pc}
 800a382:	bf00      	nop
 800a384:	e000e010 	.word	0xe000e010

0800a388 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a388:	b580      	push	{r7, lr}
 800a38a:	b082      	sub	sp, #8
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a390:	6878      	ldr	r0, [r7, #4]
 800a392:	f7ff ff29 	bl	800a1e8 <__NVIC_SetPriorityGrouping>
}
 800a396:	bf00      	nop
 800a398:	3708      	adds	r7, #8
 800a39a:	46bd      	mov	sp, r7
 800a39c:	bd80      	pop	{r7, pc}

0800a39e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a39e:	b580      	push	{r7, lr}
 800a3a0:	b086      	sub	sp, #24
 800a3a2:	af00      	add	r7, sp, #0
 800a3a4:	4603      	mov	r3, r0
 800a3a6:	60b9      	str	r1, [r7, #8]
 800a3a8:	607a      	str	r2, [r7, #4]
 800a3aa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800a3ac:	f7ff ff40 	bl	800a230 <__NVIC_GetPriorityGrouping>
 800a3b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a3b2:	687a      	ldr	r2, [r7, #4]
 800a3b4:	68b9      	ldr	r1, [r7, #8]
 800a3b6:	6978      	ldr	r0, [r7, #20]
 800a3b8:	f7ff ff90 	bl	800a2dc <NVIC_EncodePriority>
 800a3bc:	4602      	mov	r2, r0
 800a3be:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800a3c2:	4611      	mov	r1, r2
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	f7ff ff5f 	bl	800a288 <__NVIC_SetPriority>
}
 800a3ca:	bf00      	nop
 800a3cc:	3718      	adds	r7, #24
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	bd80      	pop	{r7, pc}

0800a3d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a3d2:	b580      	push	{r7, lr}
 800a3d4:	b082      	sub	sp, #8
 800a3d6:	af00      	add	r7, sp, #0
 800a3d8:	4603      	mov	r3, r0
 800a3da:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a3dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	f7ff ff33 	bl	800a24c <__NVIC_EnableIRQ>
}
 800a3e6:	bf00      	nop
 800a3e8:	3708      	adds	r7, #8
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}

0800a3ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a3ee:	b580      	push	{r7, lr}
 800a3f0:	b082      	sub	sp, #8
 800a3f2:	af00      	add	r7, sp, #0
 800a3f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a3f6:	6878      	ldr	r0, [r7, #4]
 800a3f8:	f7ff ffa4 	bl	800a344 <SysTick_Config>
 800a3fc:	4603      	mov	r3, r0
}
 800a3fe:	4618      	mov	r0, r3
 800a400:	3708      	adds	r7, #8
 800a402:	46bd      	mov	sp, r7
 800a404:	bd80      	pop	{r7, pc}

0800a406 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800a406:	b580      	push	{r7, lr}
 800a408:	b082      	sub	sp, #8
 800a40a:	af00      	add	r7, sp, #0
 800a40c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d101      	bne.n	800a418 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800a414:	2301      	movs	r3, #1
 800a416:	e014      	b.n	800a442 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	791b      	ldrb	r3, [r3, #4]
 800a41c:	b2db      	uxtb	r3, r3
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d105      	bne.n	800a42e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	2200      	movs	r2, #0
 800a426:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800a428:	6878      	ldr	r0, [r7, #4]
 800a42a:	f7fe f929 	bl	8008680 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	2202      	movs	r2, #2
 800a432:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	2200      	movs	r2, #0
 800a438:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	2201      	movs	r2, #1
 800a43e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800a440:	2300      	movs	r3, #0
}
 800a442:	4618      	mov	r0, r3
 800a444:	3708      	adds	r7, #8
 800a446:	46bd      	mov	sp, r7
 800a448:	bd80      	pop	{r7, pc}

0800a44a <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800a44a:	b480      	push	{r7}
 800a44c:	b087      	sub	sp, #28
 800a44e:	af00      	add	r7, sp, #0
 800a450:	60f8      	str	r0, [r7, #12]
 800a452:	60b9      	str	r1, [r7, #8]
 800a454:	607a      	str	r2, [r7, #4]
 800a456:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800a458:	2300      	movs	r3, #0
 800a45a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800a462:	68bb      	ldr	r3, [r7, #8]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d105      	bne.n	800a474 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800a468:	697a      	ldr	r2, [r7, #20]
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	4413      	add	r3, r2
 800a46e:	3308      	adds	r3, #8
 800a470:	617b      	str	r3, [r7, #20]
 800a472:	e004      	b.n	800a47e <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800a474:	697a      	ldr	r2, [r7, #20]
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	4413      	add	r3, r2
 800a47a:	3314      	adds	r3, #20
 800a47c:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800a47e:	697b      	ldr	r3, [r7, #20]
 800a480:	461a      	mov	r2, r3
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800a486:	2300      	movs	r3, #0
}
 800a488:	4618      	mov	r0, r3
 800a48a:	371c      	adds	r7, #28
 800a48c:	46bd      	mov	sp, r7
 800a48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a492:	4770      	bx	lr

0800a494 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800a494:	b580      	push	{r7, lr}
 800a496:	b088      	sub	sp, #32
 800a498:	af00      	add	r7, sp, #0
 800a49a:	60f8      	str	r0, [r7, #12]
 800a49c:	60b9      	str	r1, [r7, #8]
 800a49e:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	795b      	ldrb	r3, [r3, #5]
 800a4a4:	2b01      	cmp	r3, #1
 800a4a6:	d101      	bne.n	800a4ac <HAL_DAC_ConfigChannel+0x18>
 800a4a8:	2302      	movs	r3, #2
 800a4aa:	e11d      	b.n	800a6e8 <HAL_DAC_ConfigChannel+0x254>
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	2201      	movs	r2, #1
 800a4b0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	2202      	movs	r2, #2
 800a4b6:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800a4b8:	68bb      	ldr	r3, [r7, #8]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	2b04      	cmp	r3, #4
 800a4be:	d174      	bne.n	800a5aa <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800a4c0:	f7ff fcb8 	bl	8009e34 <HAL_GetTick>
 800a4c4:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d134      	bne.n	800a536 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800a4cc:	e011      	b.n	800a4f2 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800a4ce:	f7ff fcb1 	bl	8009e34 <HAL_GetTick>
 800a4d2:	4602      	mov	r2, r0
 800a4d4:	69bb      	ldr	r3, [r7, #24]
 800a4d6:	1ad3      	subs	r3, r2, r3
 800a4d8:	2b01      	cmp	r3, #1
 800a4da:	d90a      	bls.n	800a4f2 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	691b      	ldr	r3, [r3, #16]
 800a4e0:	f043 0208 	orr.w	r2, r3, #8
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	2203      	movs	r2, #3
 800a4ec:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800a4ee:	2303      	movs	r3, #3
 800a4f0:	e0fa      	b.n	800a6e8 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a4f8:	4b7d      	ldr	r3, [pc, #500]	; (800a6f0 <HAL_DAC_ConfigChannel+0x25c>)
 800a4fa:	4013      	ands	r3, r2
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d1e6      	bne.n	800a4ce <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 800a500:	2001      	movs	r0, #1
 800a502:	f7ff fca3 	bl	8009e4c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	68ba      	ldr	r2, [r7, #8]
 800a50c:	6992      	ldr	r2, [r2, #24]
 800a50e:	641a      	str	r2, [r3, #64]	; 0x40
 800a510:	e01e      	b.n	800a550 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800a512:	f7ff fc8f 	bl	8009e34 <HAL_GetTick>
 800a516:	4602      	mov	r2, r0
 800a518:	69bb      	ldr	r3, [r7, #24]
 800a51a:	1ad3      	subs	r3, r2, r3
 800a51c:	2b01      	cmp	r3, #1
 800a51e:	d90a      	bls.n	800a536 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	691b      	ldr	r3, [r3, #16]
 800a524:	f043 0208 	orr.w	r2, r3, #8
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	2203      	movs	r2, #3
 800a530:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800a532:	2303      	movs	r3, #3
 800a534:	e0d8      	b.n	800a6e8 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	dbe8      	blt.n	800a512 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 800a540:	2001      	movs	r0, #1
 800a542:	f7ff fc83 	bl	8009e4c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	68ba      	ldr	r2, [r7, #8]
 800a54c:	6992      	ldr	r2, [r2, #24]
 800a54e:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	f003 0310 	and.w	r3, r3, #16
 800a55c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800a560:	fa01 f303 	lsl.w	r3, r1, r3
 800a564:	43db      	mvns	r3, r3
 800a566:	ea02 0103 	and.w	r1, r2, r3
 800a56a:	68bb      	ldr	r3, [r7, #8]
 800a56c:	69da      	ldr	r2, [r3, #28]
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	f003 0310 	and.w	r3, r3, #16
 800a574:	409a      	lsls	r2, r3
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	430a      	orrs	r2, r1
 800a57c:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	f003 0310 	and.w	r3, r3, #16
 800a58a:	21ff      	movs	r1, #255	; 0xff
 800a58c:	fa01 f303 	lsl.w	r3, r1, r3
 800a590:	43db      	mvns	r3, r3
 800a592:	ea02 0103 	and.w	r1, r2, r3
 800a596:	68bb      	ldr	r3, [r7, #8]
 800a598:	6a1a      	ldr	r2, [r3, #32]
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	f003 0310 	and.w	r3, r3, #16
 800a5a0:	409a      	lsls	r2, r3
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	430a      	orrs	r2, r1
 800a5a8:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800a5aa:	68bb      	ldr	r3, [r7, #8]
 800a5ac:	691b      	ldr	r3, [r3, #16]
 800a5ae:	2b01      	cmp	r3, #1
 800a5b0:	d11d      	bne.n	800a5ee <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5b8:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	f003 0310 	and.w	r3, r3, #16
 800a5c0:	221f      	movs	r2, #31
 800a5c2:	fa02 f303 	lsl.w	r3, r2, r3
 800a5c6:	43db      	mvns	r3, r3
 800a5c8:	697a      	ldr	r2, [r7, #20]
 800a5ca:	4013      	ands	r3, r2
 800a5cc:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800a5ce:	68bb      	ldr	r3, [r7, #8]
 800a5d0:	695b      	ldr	r3, [r3, #20]
 800a5d2:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	f003 0310 	and.w	r3, r3, #16
 800a5da:	693a      	ldr	r2, [r7, #16]
 800a5dc:	fa02 f303 	lsl.w	r3, r2, r3
 800a5e0:	697a      	ldr	r2, [r7, #20]
 800a5e2:	4313      	orrs	r3, r2
 800a5e4:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	697a      	ldr	r2, [r7, #20]
 800a5ec:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5f4:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	f003 0310 	and.w	r3, r3, #16
 800a5fc:	2207      	movs	r2, #7
 800a5fe:	fa02 f303 	lsl.w	r3, r2, r3
 800a602:	43db      	mvns	r3, r3
 800a604:	697a      	ldr	r2, [r7, #20]
 800a606:	4013      	ands	r3, r2
 800a608:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800a60a:	68bb      	ldr	r3, [r7, #8]
 800a60c:	68db      	ldr	r3, [r3, #12]
 800a60e:	2b01      	cmp	r3, #1
 800a610:	d102      	bne.n	800a618 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 800a612:	2300      	movs	r3, #0
 800a614:	61fb      	str	r3, [r7, #28]
 800a616:	e00f      	b.n	800a638 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800a618:	68bb      	ldr	r3, [r7, #8]
 800a61a:	68db      	ldr	r3, [r3, #12]
 800a61c:	2b02      	cmp	r3, #2
 800a61e:	d102      	bne.n	800a626 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800a620:	2301      	movs	r3, #1
 800a622:	61fb      	str	r3, [r7, #28]
 800a624:	e008      	b.n	800a638 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800a626:	68bb      	ldr	r3, [r7, #8]
 800a628:	689b      	ldr	r3, [r3, #8]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d102      	bne.n	800a634 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800a62e:	2301      	movs	r3, #1
 800a630:	61fb      	str	r3, [r7, #28]
 800a632:	e001      	b.n	800a638 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800a634:	2300      	movs	r3, #0
 800a636:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800a638:	68bb      	ldr	r3, [r7, #8]
 800a63a:	681a      	ldr	r2, [r3, #0]
 800a63c:	68bb      	ldr	r3, [r7, #8]
 800a63e:	689b      	ldr	r3, [r3, #8]
 800a640:	4313      	orrs	r3, r2
 800a642:	69fa      	ldr	r2, [r7, #28]
 800a644:	4313      	orrs	r3, r2
 800a646:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	f003 0310 	and.w	r3, r3, #16
 800a64e:	693a      	ldr	r2, [r7, #16]
 800a650:	fa02 f303 	lsl.w	r3, r2, r3
 800a654:	697a      	ldr	r2, [r7, #20]
 800a656:	4313      	orrs	r3, r2
 800a658:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	697a      	ldr	r2, [r7, #20]
 800a660:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	6819      	ldr	r1, [r3, #0]
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	f003 0310 	and.w	r3, r3, #16
 800a66e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a672:	fa02 f303 	lsl.w	r3, r2, r3
 800a676:	43da      	mvns	r2, r3
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	400a      	ands	r2, r1
 800a67e:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	f003 0310 	and.w	r3, r3, #16
 800a68e:	f640 72fe 	movw	r2, #4094	; 0xffe
 800a692:	fa02 f303 	lsl.w	r3, r2, r3
 800a696:	43db      	mvns	r3, r3
 800a698:	697a      	ldr	r2, [r7, #20]
 800a69a:	4013      	ands	r3, r2
 800a69c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800a69e:	68bb      	ldr	r3, [r7, #8]
 800a6a0:	685b      	ldr	r3, [r3, #4]
 800a6a2:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	f003 0310 	and.w	r3, r3, #16
 800a6aa:	693a      	ldr	r2, [r7, #16]
 800a6ac:	fa02 f303 	lsl.w	r3, r2, r3
 800a6b0:	697a      	ldr	r2, [r7, #20]
 800a6b2:	4313      	orrs	r3, r2
 800a6b4:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	697a      	ldr	r2, [r7, #20]
 800a6bc:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	6819      	ldr	r1, [r3, #0]
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	f003 0310 	and.w	r3, r3, #16
 800a6ca:	22c0      	movs	r2, #192	; 0xc0
 800a6cc:	fa02 f303 	lsl.w	r3, r2, r3
 800a6d0:	43da      	mvns	r2, r3
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	400a      	ands	r2, r1
 800a6d8:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	2201      	movs	r2, #1
 800a6de:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800a6e6:	2300      	movs	r3, #0
}
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	3720      	adds	r7, #32
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	bd80      	pop	{r7, pc}
 800a6f0:	20008000 	.word	0x20008000

0800a6f4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b086      	sub	sp, #24
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800a6fc:	f7ff fb9a 	bl	8009e34 <HAL_GetTick>
 800a700:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d101      	bne.n	800a70c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800a708:	2301      	movs	r3, #1
 800a70a:	e316      	b.n	800ad3a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	4a66      	ldr	r2, [pc, #408]	; (800a8ac <HAL_DMA_Init+0x1b8>)
 800a712:	4293      	cmp	r3, r2
 800a714:	d04a      	beq.n	800a7ac <HAL_DMA_Init+0xb8>
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	4a65      	ldr	r2, [pc, #404]	; (800a8b0 <HAL_DMA_Init+0x1bc>)
 800a71c:	4293      	cmp	r3, r2
 800a71e:	d045      	beq.n	800a7ac <HAL_DMA_Init+0xb8>
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	4a63      	ldr	r2, [pc, #396]	; (800a8b4 <HAL_DMA_Init+0x1c0>)
 800a726:	4293      	cmp	r3, r2
 800a728:	d040      	beq.n	800a7ac <HAL_DMA_Init+0xb8>
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	4a62      	ldr	r2, [pc, #392]	; (800a8b8 <HAL_DMA_Init+0x1c4>)
 800a730:	4293      	cmp	r3, r2
 800a732:	d03b      	beq.n	800a7ac <HAL_DMA_Init+0xb8>
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	4a60      	ldr	r2, [pc, #384]	; (800a8bc <HAL_DMA_Init+0x1c8>)
 800a73a:	4293      	cmp	r3, r2
 800a73c:	d036      	beq.n	800a7ac <HAL_DMA_Init+0xb8>
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	4a5f      	ldr	r2, [pc, #380]	; (800a8c0 <HAL_DMA_Init+0x1cc>)
 800a744:	4293      	cmp	r3, r2
 800a746:	d031      	beq.n	800a7ac <HAL_DMA_Init+0xb8>
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	4a5d      	ldr	r2, [pc, #372]	; (800a8c4 <HAL_DMA_Init+0x1d0>)
 800a74e:	4293      	cmp	r3, r2
 800a750:	d02c      	beq.n	800a7ac <HAL_DMA_Init+0xb8>
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	4a5c      	ldr	r2, [pc, #368]	; (800a8c8 <HAL_DMA_Init+0x1d4>)
 800a758:	4293      	cmp	r3, r2
 800a75a:	d027      	beq.n	800a7ac <HAL_DMA_Init+0xb8>
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	4a5a      	ldr	r2, [pc, #360]	; (800a8cc <HAL_DMA_Init+0x1d8>)
 800a762:	4293      	cmp	r3, r2
 800a764:	d022      	beq.n	800a7ac <HAL_DMA_Init+0xb8>
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	4a59      	ldr	r2, [pc, #356]	; (800a8d0 <HAL_DMA_Init+0x1dc>)
 800a76c:	4293      	cmp	r3, r2
 800a76e:	d01d      	beq.n	800a7ac <HAL_DMA_Init+0xb8>
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	4a57      	ldr	r2, [pc, #348]	; (800a8d4 <HAL_DMA_Init+0x1e0>)
 800a776:	4293      	cmp	r3, r2
 800a778:	d018      	beq.n	800a7ac <HAL_DMA_Init+0xb8>
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	4a56      	ldr	r2, [pc, #344]	; (800a8d8 <HAL_DMA_Init+0x1e4>)
 800a780:	4293      	cmp	r3, r2
 800a782:	d013      	beq.n	800a7ac <HAL_DMA_Init+0xb8>
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	4a54      	ldr	r2, [pc, #336]	; (800a8dc <HAL_DMA_Init+0x1e8>)
 800a78a:	4293      	cmp	r3, r2
 800a78c:	d00e      	beq.n	800a7ac <HAL_DMA_Init+0xb8>
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	4a53      	ldr	r2, [pc, #332]	; (800a8e0 <HAL_DMA_Init+0x1ec>)
 800a794:	4293      	cmp	r3, r2
 800a796:	d009      	beq.n	800a7ac <HAL_DMA_Init+0xb8>
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	4a51      	ldr	r2, [pc, #324]	; (800a8e4 <HAL_DMA_Init+0x1f0>)
 800a79e:	4293      	cmp	r3, r2
 800a7a0:	d004      	beq.n	800a7ac <HAL_DMA_Init+0xb8>
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	4a50      	ldr	r2, [pc, #320]	; (800a8e8 <HAL_DMA_Init+0x1f4>)
 800a7a8:	4293      	cmp	r3, r2
 800a7aa:	d101      	bne.n	800a7b0 <HAL_DMA_Init+0xbc>
 800a7ac:	2301      	movs	r3, #1
 800a7ae:	e000      	b.n	800a7b2 <HAL_DMA_Init+0xbe>
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	f000 813b 	beq.w	800aa2e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2202      	movs	r2, #2
 800a7bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	4a37      	ldr	r2, [pc, #220]	; (800a8ac <HAL_DMA_Init+0x1b8>)
 800a7ce:	4293      	cmp	r3, r2
 800a7d0:	d04a      	beq.n	800a868 <HAL_DMA_Init+0x174>
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	4a36      	ldr	r2, [pc, #216]	; (800a8b0 <HAL_DMA_Init+0x1bc>)
 800a7d8:	4293      	cmp	r3, r2
 800a7da:	d045      	beq.n	800a868 <HAL_DMA_Init+0x174>
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	4a34      	ldr	r2, [pc, #208]	; (800a8b4 <HAL_DMA_Init+0x1c0>)
 800a7e2:	4293      	cmp	r3, r2
 800a7e4:	d040      	beq.n	800a868 <HAL_DMA_Init+0x174>
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	4a33      	ldr	r2, [pc, #204]	; (800a8b8 <HAL_DMA_Init+0x1c4>)
 800a7ec:	4293      	cmp	r3, r2
 800a7ee:	d03b      	beq.n	800a868 <HAL_DMA_Init+0x174>
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	4a31      	ldr	r2, [pc, #196]	; (800a8bc <HAL_DMA_Init+0x1c8>)
 800a7f6:	4293      	cmp	r3, r2
 800a7f8:	d036      	beq.n	800a868 <HAL_DMA_Init+0x174>
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	4a30      	ldr	r2, [pc, #192]	; (800a8c0 <HAL_DMA_Init+0x1cc>)
 800a800:	4293      	cmp	r3, r2
 800a802:	d031      	beq.n	800a868 <HAL_DMA_Init+0x174>
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	4a2e      	ldr	r2, [pc, #184]	; (800a8c4 <HAL_DMA_Init+0x1d0>)
 800a80a:	4293      	cmp	r3, r2
 800a80c:	d02c      	beq.n	800a868 <HAL_DMA_Init+0x174>
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	4a2d      	ldr	r2, [pc, #180]	; (800a8c8 <HAL_DMA_Init+0x1d4>)
 800a814:	4293      	cmp	r3, r2
 800a816:	d027      	beq.n	800a868 <HAL_DMA_Init+0x174>
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	4a2b      	ldr	r2, [pc, #172]	; (800a8cc <HAL_DMA_Init+0x1d8>)
 800a81e:	4293      	cmp	r3, r2
 800a820:	d022      	beq.n	800a868 <HAL_DMA_Init+0x174>
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	4a2a      	ldr	r2, [pc, #168]	; (800a8d0 <HAL_DMA_Init+0x1dc>)
 800a828:	4293      	cmp	r3, r2
 800a82a:	d01d      	beq.n	800a868 <HAL_DMA_Init+0x174>
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	4a28      	ldr	r2, [pc, #160]	; (800a8d4 <HAL_DMA_Init+0x1e0>)
 800a832:	4293      	cmp	r3, r2
 800a834:	d018      	beq.n	800a868 <HAL_DMA_Init+0x174>
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	4a27      	ldr	r2, [pc, #156]	; (800a8d8 <HAL_DMA_Init+0x1e4>)
 800a83c:	4293      	cmp	r3, r2
 800a83e:	d013      	beq.n	800a868 <HAL_DMA_Init+0x174>
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	4a25      	ldr	r2, [pc, #148]	; (800a8dc <HAL_DMA_Init+0x1e8>)
 800a846:	4293      	cmp	r3, r2
 800a848:	d00e      	beq.n	800a868 <HAL_DMA_Init+0x174>
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	4a24      	ldr	r2, [pc, #144]	; (800a8e0 <HAL_DMA_Init+0x1ec>)
 800a850:	4293      	cmp	r3, r2
 800a852:	d009      	beq.n	800a868 <HAL_DMA_Init+0x174>
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	4a22      	ldr	r2, [pc, #136]	; (800a8e4 <HAL_DMA_Init+0x1f0>)
 800a85a:	4293      	cmp	r3, r2
 800a85c:	d004      	beq.n	800a868 <HAL_DMA_Init+0x174>
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	4a21      	ldr	r2, [pc, #132]	; (800a8e8 <HAL_DMA_Init+0x1f4>)
 800a864:	4293      	cmp	r3, r2
 800a866:	d108      	bne.n	800a87a <HAL_DMA_Init+0x186>
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	681a      	ldr	r2, [r3, #0]
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	f022 0201 	bic.w	r2, r2, #1
 800a876:	601a      	str	r2, [r3, #0]
 800a878:	e007      	b.n	800a88a <HAL_DMA_Init+0x196>
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	681a      	ldr	r2, [r3, #0]
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	f022 0201 	bic.w	r2, r2, #1
 800a888:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800a88a:	e02f      	b.n	800a8ec <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a88c:	f7ff fad2 	bl	8009e34 <HAL_GetTick>
 800a890:	4602      	mov	r2, r0
 800a892:	693b      	ldr	r3, [r7, #16]
 800a894:	1ad3      	subs	r3, r2, r3
 800a896:	2b05      	cmp	r3, #5
 800a898:	d928      	bls.n	800a8ec <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	2220      	movs	r2, #32
 800a89e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	2203      	movs	r2, #3
 800a8a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800a8a8:	2301      	movs	r3, #1
 800a8aa:	e246      	b.n	800ad3a <HAL_DMA_Init+0x646>
 800a8ac:	40020010 	.word	0x40020010
 800a8b0:	40020028 	.word	0x40020028
 800a8b4:	40020040 	.word	0x40020040
 800a8b8:	40020058 	.word	0x40020058
 800a8bc:	40020070 	.word	0x40020070
 800a8c0:	40020088 	.word	0x40020088
 800a8c4:	400200a0 	.word	0x400200a0
 800a8c8:	400200b8 	.word	0x400200b8
 800a8cc:	40020410 	.word	0x40020410
 800a8d0:	40020428 	.word	0x40020428
 800a8d4:	40020440 	.word	0x40020440
 800a8d8:	40020458 	.word	0x40020458
 800a8dc:	40020470 	.word	0x40020470
 800a8e0:	40020488 	.word	0x40020488
 800a8e4:	400204a0 	.word	0x400204a0
 800a8e8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	f003 0301 	and.w	r3, r3, #1
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d1c8      	bne.n	800a88c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800a902:	697a      	ldr	r2, [r7, #20]
 800a904:	4b83      	ldr	r3, [pc, #524]	; (800ab14 <HAL_DMA_Init+0x420>)
 800a906:	4013      	ands	r3, r2
 800a908:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800a912:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	691b      	ldr	r3, [r3, #16]
 800a918:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a91e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	699b      	ldr	r3, [r3, #24]
 800a924:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a92a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	6a1b      	ldr	r3, [r3, #32]
 800a930:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800a932:	697a      	ldr	r2, [r7, #20]
 800a934:	4313      	orrs	r3, r2
 800a936:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a93c:	2b04      	cmp	r3, #4
 800a93e:	d107      	bne.n	800a950 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a948:	4313      	orrs	r3, r2
 800a94a:	697a      	ldr	r2, [r7, #20]
 800a94c:	4313      	orrs	r3, r2
 800a94e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800a950:	4b71      	ldr	r3, [pc, #452]	; (800ab18 <HAL_DMA_Init+0x424>)
 800a952:	681a      	ldr	r2, [r3, #0]
 800a954:	4b71      	ldr	r3, [pc, #452]	; (800ab1c <HAL_DMA_Init+0x428>)
 800a956:	4013      	ands	r3, r2
 800a958:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a95c:	d328      	bcc.n	800a9b0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	685b      	ldr	r3, [r3, #4]
 800a962:	2b28      	cmp	r3, #40	; 0x28
 800a964:	d903      	bls.n	800a96e <HAL_DMA_Init+0x27a>
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	685b      	ldr	r3, [r3, #4]
 800a96a:	2b2e      	cmp	r3, #46	; 0x2e
 800a96c:	d917      	bls.n	800a99e <HAL_DMA_Init+0x2aa>
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	685b      	ldr	r3, [r3, #4]
 800a972:	2b3e      	cmp	r3, #62	; 0x3e
 800a974:	d903      	bls.n	800a97e <HAL_DMA_Init+0x28a>
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	685b      	ldr	r3, [r3, #4]
 800a97a:	2b42      	cmp	r3, #66	; 0x42
 800a97c:	d90f      	bls.n	800a99e <HAL_DMA_Init+0x2aa>
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	685b      	ldr	r3, [r3, #4]
 800a982:	2b46      	cmp	r3, #70	; 0x46
 800a984:	d903      	bls.n	800a98e <HAL_DMA_Init+0x29a>
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	685b      	ldr	r3, [r3, #4]
 800a98a:	2b48      	cmp	r3, #72	; 0x48
 800a98c:	d907      	bls.n	800a99e <HAL_DMA_Init+0x2aa>
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	685b      	ldr	r3, [r3, #4]
 800a992:	2b4e      	cmp	r3, #78	; 0x4e
 800a994:	d905      	bls.n	800a9a2 <HAL_DMA_Init+0x2ae>
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	685b      	ldr	r3, [r3, #4]
 800a99a:	2b52      	cmp	r3, #82	; 0x52
 800a99c:	d801      	bhi.n	800a9a2 <HAL_DMA_Init+0x2ae>
 800a99e:	2301      	movs	r3, #1
 800a9a0:	e000      	b.n	800a9a4 <HAL_DMA_Init+0x2b0>
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d003      	beq.n	800a9b0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800a9a8:	697b      	ldr	r3, [r7, #20]
 800a9aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a9ae:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	697a      	ldr	r2, [r7, #20]
 800a9b6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	695b      	ldr	r3, [r3, #20]
 800a9be:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800a9c0:	697b      	ldr	r3, [r7, #20]
 800a9c2:	f023 0307 	bic.w	r3, r3, #7
 800a9c6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9cc:	697a      	ldr	r2, [r7, #20]
 800a9ce:	4313      	orrs	r3, r2
 800a9d0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9d6:	2b04      	cmp	r3, #4
 800a9d8:	d117      	bne.n	800aa0a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9de:	697a      	ldr	r2, [r7, #20]
 800a9e0:	4313      	orrs	r3, r2
 800a9e2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d00e      	beq.n	800aa0a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800a9ec:	6878      	ldr	r0, [r7, #4]
 800a9ee:	f001 ff2b 	bl	800c848 <DMA_CheckFifoParam>
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d008      	beq.n	800aa0a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	2240      	movs	r2, #64	; 0x40
 800a9fc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	2201      	movs	r2, #1
 800aa02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800aa06:	2301      	movs	r3, #1
 800aa08:	e197      	b.n	800ad3a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	697a      	ldr	r2, [r7, #20]
 800aa10:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800aa12:	6878      	ldr	r0, [r7, #4]
 800aa14:	f001 fe66 	bl	800c6e4 <DMA_CalcBaseAndBitshift>
 800aa18:	4603      	mov	r3, r0
 800aa1a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa20:	f003 031f 	and.w	r3, r3, #31
 800aa24:	223f      	movs	r2, #63	; 0x3f
 800aa26:	409a      	lsls	r2, r3
 800aa28:	68bb      	ldr	r3, [r7, #8]
 800aa2a:	609a      	str	r2, [r3, #8]
 800aa2c:	e0cd      	b.n	800abca <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	4a3b      	ldr	r2, [pc, #236]	; (800ab20 <HAL_DMA_Init+0x42c>)
 800aa34:	4293      	cmp	r3, r2
 800aa36:	d022      	beq.n	800aa7e <HAL_DMA_Init+0x38a>
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	4a39      	ldr	r2, [pc, #228]	; (800ab24 <HAL_DMA_Init+0x430>)
 800aa3e:	4293      	cmp	r3, r2
 800aa40:	d01d      	beq.n	800aa7e <HAL_DMA_Init+0x38a>
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	4a38      	ldr	r2, [pc, #224]	; (800ab28 <HAL_DMA_Init+0x434>)
 800aa48:	4293      	cmp	r3, r2
 800aa4a:	d018      	beq.n	800aa7e <HAL_DMA_Init+0x38a>
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	4a36      	ldr	r2, [pc, #216]	; (800ab2c <HAL_DMA_Init+0x438>)
 800aa52:	4293      	cmp	r3, r2
 800aa54:	d013      	beq.n	800aa7e <HAL_DMA_Init+0x38a>
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	4a35      	ldr	r2, [pc, #212]	; (800ab30 <HAL_DMA_Init+0x43c>)
 800aa5c:	4293      	cmp	r3, r2
 800aa5e:	d00e      	beq.n	800aa7e <HAL_DMA_Init+0x38a>
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	4a33      	ldr	r2, [pc, #204]	; (800ab34 <HAL_DMA_Init+0x440>)
 800aa66:	4293      	cmp	r3, r2
 800aa68:	d009      	beq.n	800aa7e <HAL_DMA_Init+0x38a>
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	4a32      	ldr	r2, [pc, #200]	; (800ab38 <HAL_DMA_Init+0x444>)
 800aa70:	4293      	cmp	r3, r2
 800aa72:	d004      	beq.n	800aa7e <HAL_DMA_Init+0x38a>
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	4a30      	ldr	r2, [pc, #192]	; (800ab3c <HAL_DMA_Init+0x448>)
 800aa7a:	4293      	cmp	r3, r2
 800aa7c:	d101      	bne.n	800aa82 <HAL_DMA_Init+0x38e>
 800aa7e:	2301      	movs	r3, #1
 800aa80:	e000      	b.n	800aa84 <HAL_DMA_Init+0x390>
 800aa82:	2300      	movs	r3, #0
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	f000 8097 	beq.w	800abb8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	4a24      	ldr	r2, [pc, #144]	; (800ab20 <HAL_DMA_Init+0x42c>)
 800aa90:	4293      	cmp	r3, r2
 800aa92:	d021      	beq.n	800aad8 <HAL_DMA_Init+0x3e4>
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	4a22      	ldr	r2, [pc, #136]	; (800ab24 <HAL_DMA_Init+0x430>)
 800aa9a:	4293      	cmp	r3, r2
 800aa9c:	d01c      	beq.n	800aad8 <HAL_DMA_Init+0x3e4>
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	4a21      	ldr	r2, [pc, #132]	; (800ab28 <HAL_DMA_Init+0x434>)
 800aaa4:	4293      	cmp	r3, r2
 800aaa6:	d017      	beq.n	800aad8 <HAL_DMA_Init+0x3e4>
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	4a1f      	ldr	r2, [pc, #124]	; (800ab2c <HAL_DMA_Init+0x438>)
 800aaae:	4293      	cmp	r3, r2
 800aab0:	d012      	beq.n	800aad8 <HAL_DMA_Init+0x3e4>
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	4a1e      	ldr	r2, [pc, #120]	; (800ab30 <HAL_DMA_Init+0x43c>)
 800aab8:	4293      	cmp	r3, r2
 800aaba:	d00d      	beq.n	800aad8 <HAL_DMA_Init+0x3e4>
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	4a1c      	ldr	r2, [pc, #112]	; (800ab34 <HAL_DMA_Init+0x440>)
 800aac2:	4293      	cmp	r3, r2
 800aac4:	d008      	beq.n	800aad8 <HAL_DMA_Init+0x3e4>
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	4a1b      	ldr	r2, [pc, #108]	; (800ab38 <HAL_DMA_Init+0x444>)
 800aacc:	4293      	cmp	r3, r2
 800aace:	d003      	beq.n	800aad8 <HAL_DMA_Init+0x3e4>
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	4a19      	ldr	r2, [pc, #100]	; (800ab3c <HAL_DMA_Init+0x448>)
 800aad6:	4293      	cmp	r3, r2
 800aad8:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	2202      	movs	r2, #2
 800aade:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	2200      	movs	r2, #0
 800aae6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800aaf2:	697a      	ldr	r2, [r7, #20]
 800aaf4:	4b12      	ldr	r3, [pc, #72]	; (800ab40 <HAL_DMA_Init+0x44c>)
 800aaf6:	4013      	ands	r3, r2
 800aaf8:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	689b      	ldr	r3, [r3, #8]
 800aafe:	2b40      	cmp	r3, #64	; 0x40
 800ab00:	d020      	beq.n	800ab44 <HAL_DMA_Init+0x450>
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	689b      	ldr	r3, [r3, #8]
 800ab06:	2b80      	cmp	r3, #128	; 0x80
 800ab08:	d102      	bne.n	800ab10 <HAL_DMA_Init+0x41c>
 800ab0a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ab0e:	e01a      	b.n	800ab46 <HAL_DMA_Init+0x452>
 800ab10:	2300      	movs	r3, #0
 800ab12:	e018      	b.n	800ab46 <HAL_DMA_Init+0x452>
 800ab14:	fe10803f 	.word	0xfe10803f
 800ab18:	5c001000 	.word	0x5c001000
 800ab1c:	ffff0000 	.word	0xffff0000
 800ab20:	58025408 	.word	0x58025408
 800ab24:	5802541c 	.word	0x5802541c
 800ab28:	58025430 	.word	0x58025430
 800ab2c:	58025444 	.word	0x58025444
 800ab30:	58025458 	.word	0x58025458
 800ab34:	5802546c 	.word	0x5802546c
 800ab38:	58025480 	.word	0x58025480
 800ab3c:	58025494 	.word	0x58025494
 800ab40:	fffe000f 	.word	0xfffe000f
 800ab44:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800ab46:	687a      	ldr	r2, [r7, #4]
 800ab48:	68d2      	ldr	r2, [r2, #12]
 800ab4a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800ab4c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	691b      	ldr	r3, [r3, #16]
 800ab52:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800ab54:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	695b      	ldr	r3, [r3, #20]
 800ab5a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800ab5c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	699b      	ldr	r3, [r3, #24]
 800ab62:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800ab64:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	69db      	ldr	r3, [r3, #28]
 800ab6a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800ab6c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	6a1b      	ldr	r3, [r3, #32]
 800ab72:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800ab74:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800ab76:	697a      	ldr	r2, [r7, #20]
 800ab78:	4313      	orrs	r3, r2
 800ab7a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	697a      	ldr	r2, [r7, #20]
 800ab82:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	461a      	mov	r2, r3
 800ab8a:	4b6e      	ldr	r3, [pc, #440]	; (800ad44 <HAL_DMA_Init+0x650>)
 800ab8c:	4413      	add	r3, r2
 800ab8e:	4a6e      	ldr	r2, [pc, #440]	; (800ad48 <HAL_DMA_Init+0x654>)
 800ab90:	fba2 2303 	umull	r2, r3, r2, r3
 800ab94:	091b      	lsrs	r3, r3, #4
 800ab96:	009a      	lsls	r2, r3, #2
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800ab9c:	6878      	ldr	r0, [r7, #4]
 800ab9e:	f001 fda1 	bl	800c6e4 <DMA_CalcBaseAndBitshift>
 800aba2:	4603      	mov	r3, r0
 800aba4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800abaa:	f003 031f 	and.w	r3, r3, #31
 800abae:	2201      	movs	r2, #1
 800abb0:	409a      	lsls	r2, r3
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	605a      	str	r2, [r3, #4]
 800abb6:	e008      	b.n	800abca <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	2240      	movs	r2, #64	; 0x40
 800abbc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	2203      	movs	r2, #3
 800abc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800abc6:	2301      	movs	r3, #1
 800abc8:	e0b7      	b.n	800ad3a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	4a5f      	ldr	r2, [pc, #380]	; (800ad4c <HAL_DMA_Init+0x658>)
 800abd0:	4293      	cmp	r3, r2
 800abd2:	d072      	beq.n	800acba <HAL_DMA_Init+0x5c6>
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	4a5d      	ldr	r2, [pc, #372]	; (800ad50 <HAL_DMA_Init+0x65c>)
 800abda:	4293      	cmp	r3, r2
 800abdc:	d06d      	beq.n	800acba <HAL_DMA_Init+0x5c6>
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	4a5c      	ldr	r2, [pc, #368]	; (800ad54 <HAL_DMA_Init+0x660>)
 800abe4:	4293      	cmp	r3, r2
 800abe6:	d068      	beq.n	800acba <HAL_DMA_Init+0x5c6>
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	4a5a      	ldr	r2, [pc, #360]	; (800ad58 <HAL_DMA_Init+0x664>)
 800abee:	4293      	cmp	r3, r2
 800abf0:	d063      	beq.n	800acba <HAL_DMA_Init+0x5c6>
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	4a59      	ldr	r2, [pc, #356]	; (800ad5c <HAL_DMA_Init+0x668>)
 800abf8:	4293      	cmp	r3, r2
 800abfa:	d05e      	beq.n	800acba <HAL_DMA_Init+0x5c6>
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	4a57      	ldr	r2, [pc, #348]	; (800ad60 <HAL_DMA_Init+0x66c>)
 800ac02:	4293      	cmp	r3, r2
 800ac04:	d059      	beq.n	800acba <HAL_DMA_Init+0x5c6>
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	4a56      	ldr	r2, [pc, #344]	; (800ad64 <HAL_DMA_Init+0x670>)
 800ac0c:	4293      	cmp	r3, r2
 800ac0e:	d054      	beq.n	800acba <HAL_DMA_Init+0x5c6>
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	4a54      	ldr	r2, [pc, #336]	; (800ad68 <HAL_DMA_Init+0x674>)
 800ac16:	4293      	cmp	r3, r2
 800ac18:	d04f      	beq.n	800acba <HAL_DMA_Init+0x5c6>
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	4a53      	ldr	r2, [pc, #332]	; (800ad6c <HAL_DMA_Init+0x678>)
 800ac20:	4293      	cmp	r3, r2
 800ac22:	d04a      	beq.n	800acba <HAL_DMA_Init+0x5c6>
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	4a51      	ldr	r2, [pc, #324]	; (800ad70 <HAL_DMA_Init+0x67c>)
 800ac2a:	4293      	cmp	r3, r2
 800ac2c:	d045      	beq.n	800acba <HAL_DMA_Init+0x5c6>
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	4a50      	ldr	r2, [pc, #320]	; (800ad74 <HAL_DMA_Init+0x680>)
 800ac34:	4293      	cmp	r3, r2
 800ac36:	d040      	beq.n	800acba <HAL_DMA_Init+0x5c6>
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	4a4e      	ldr	r2, [pc, #312]	; (800ad78 <HAL_DMA_Init+0x684>)
 800ac3e:	4293      	cmp	r3, r2
 800ac40:	d03b      	beq.n	800acba <HAL_DMA_Init+0x5c6>
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	4a4d      	ldr	r2, [pc, #308]	; (800ad7c <HAL_DMA_Init+0x688>)
 800ac48:	4293      	cmp	r3, r2
 800ac4a:	d036      	beq.n	800acba <HAL_DMA_Init+0x5c6>
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	4a4b      	ldr	r2, [pc, #300]	; (800ad80 <HAL_DMA_Init+0x68c>)
 800ac52:	4293      	cmp	r3, r2
 800ac54:	d031      	beq.n	800acba <HAL_DMA_Init+0x5c6>
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	4a4a      	ldr	r2, [pc, #296]	; (800ad84 <HAL_DMA_Init+0x690>)
 800ac5c:	4293      	cmp	r3, r2
 800ac5e:	d02c      	beq.n	800acba <HAL_DMA_Init+0x5c6>
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	4a48      	ldr	r2, [pc, #288]	; (800ad88 <HAL_DMA_Init+0x694>)
 800ac66:	4293      	cmp	r3, r2
 800ac68:	d027      	beq.n	800acba <HAL_DMA_Init+0x5c6>
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	4a47      	ldr	r2, [pc, #284]	; (800ad8c <HAL_DMA_Init+0x698>)
 800ac70:	4293      	cmp	r3, r2
 800ac72:	d022      	beq.n	800acba <HAL_DMA_Init+0x5c6>
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	4a45      	ldr	r2, [pc, #276]	; (800ad90 <HAL_DMA_Init+0x69c>)
 800ac7a:	4293      	cmp	r3, r2
 800ac7c:	d01d      	beq.n	800acba <HAL_DMA_Init+0x5c6>
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	4a44      	ldr	r2, [pc, #272]	; (800ad94 <HAL_DMA_Init+0x6a0>)
 800ac84:	4293      	cmp	r3, r2
 800ac86:	d018      	beq.n	800acba <HAL_DMA_Init+0x5c6>
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	4a42      	ldr	r2, [pc, #264]	; (800ad98 <HAL_DMA_Init+0x6a4>)
 800ac8e:	4293      	cmp	r3, r2
 800ac90:	d013      	beq.n	800acba <HAL_DMA_Init+0x5c6>
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	4a41      	ldr	r2, [pc, #260]	; (800ad9c <HAL_DMA_Init+0x6a8>)
 800ac98:	4293      	cmp	r3, r2
 800ac9a:	d00e      	beq.n	800acba <HAL_DMA_Init+0x5c6>
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	4a3f      	ldr	r2, [pc, #252]	; (800ada0 <HAL_DMA_Init+0x6ac>)
 800aca2:	4293      	cmp	r3, r2
 800aca4:	d009      	beq.n	800acba <HAL_DMA_Init+0x5c6>
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	4a3e      	ldr	r2, [pc, #248]	; (800ada4 <HAL_DMA_Init+0x6b0>)
 800acac:	4293      	cmp	r3, r2
 800acae:	d004      	beq.n	800acba <HAL_DMA_Init+0x5c6>
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	4a3c      	ldr	r2, [pc, #240]	; (800ada8 <HAL_DMA_Init+0x6b4>)
 800acb6:	4293      	cmp	r3, r2
 800acb8:	d101      	bne.n	800acbe <HAL_DMA_Init+0x5ca>
 800acba:	2301      	movs	r3, #1
 800acbc:	e000      	b.n	800acc0 <HAL_DMA_Init+0x5cc>
 800acbe:	2300      	movs	r3, #0
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d032      	beq.n	800ad2a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800acc4:	6878      	ldr	r0, [r7, #4]
 800acc6:	f001 fe3b 	bl	800c940 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	689b      	ldr	r3, [r3, #8]
 800acce:	2b80      	cmp	r3, #128	; 0x80
 800acd0:	d102      	bne.n	800acd8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	2200      	movs	r2, #0
 800acd6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	685a      	ldr	r2, [r3, #4]
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ace0:	b2d2      	uxtb	r2, r2
 800ace2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ace8:	687a      	ldr	r2, [r7, #4]
 800acea:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800acec:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	685b      	ldr	r3, [r3, #4]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d010      	beq.n	800ad18 <HAL_DMA_Init+0x624>
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	685b      	ldr	r3, [r3, #4]
 800acfa:	2b08      	cmp	r3, #8
 800acfc:	d80c      	bhi.n	800ad18 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800acfe:	6878      	ldr	r0, [r7, #4]
 800ad00:	f001 feb8 	bl	800ca74 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad08:	2200      	movs	r2, #0
 800ad0a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad10:	687a      	ldr	r2, [r7, #4]
 800ad12:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800ad14:	605a      	str	r2, [r3, #4]
 800ad16:	e008      	b.n	800ad2a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	2200      	movs	r2, #0
 800ad22:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	2200      	movs	r2, #0
 800ad28:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	2201      	movs	r2, #1
 800ad34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800ad38:	2300      	movs	r3, #0
}
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	3718      	adds	r7, #24
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	bd80      	pop	{r7, pc}
 800ad42:	bf00      	nop
 800ad44:	a7fdabf8 	.word	0xa7fdabf8
 800ad48:	cccccccd 	.word	0xcccccccd
 800ad4c:	40020010 	.word	0x40020010
 800ad50:	40020028 	.word	0x40020028
 800ad54:	40020040 	.word	0x40020040
 800ad58:	40020058 	.word	0x40020058
 800ad5c:	40020070 	.word	0x40020070
 800ad60:	40020088 	.word	0x40020088
 800ad64:	400200a0 	.word	0x400200a0
 800ad68:	400200b8 	.word	0x400200b8
 800ad6c:	40020410 	.word	0x40020410
 800ad70:	40020428 	.word	0x40020428
 800ad74:	40020440 	.word	0x40020440
 800ad78:	40020458 	.word	0x40020458
 800ad7c:	40020470 	.word	0x40020470
 800ad80:	40020488 	.word	0x40020488
 800ad84:	400204a0 	.word	0x400204a0
 800ad88:	400204b8 	.word	0x400204b8
 800ad8c:	58025408 	.word	0x58025408
 800ad90:	5802541c 	.word	0x5802541c
 800ad94:	58025430 	.word	0x58025430
 800ad98:	58025444 	.word	0x58025444
 800ad9c:	58025458 	.word	0x58025458
 800ada0:	5802546c 	.word	0x5802546c
 800ada4:	58025480 	.word	0x58025480
 800ada8:	58025494 	.word	0x58025494

0800adac <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b086      	sub	sp, #24
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800adb4:	f7ff f83e 	bl	8009e34 <HAL_GetTick>
 800adb8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d101      	bne.n	800adc4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800adc0:	2301      	movs	r3, #1
 800adc2:	e2dc      	b.n	800b37e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800adca:	b2db      	uxtb	r3, r3
 800adcc:	2b02      	cmp	r3, #2
 800adce:	d008      	beq.n	800ade2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	2280      	movs	r2, #128	; 0x80
 800add4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	2200      	movs	r2, #0
 800adda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800adde:	2301      	movs	r3, #1
 800ade0:	e2cd      	b.n	800b37e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	4a76      	ldr	r2, [pc, #472]	; (800afc0 <HAL_DMA_Abort+0x214>)
 800ade8:	4293      	cmp	r3, r2
 800adea:	d04a      	beq.n	800ae82 <HAL_DMA_Abort+0xd6>
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	4a74      	ldr	r2, [pc, #464]	; (800afc4 <HAL_DMA_Abort+0x218>)
 800adf2:	4293      	cmp	r3, r2
 800adf4:	d045      	beq.n	800ae82 <HAL_DMA_Abort+0xd6>
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	4a73      	ldr	r2, [pc, #460]	; (800afc8 <HAL_DMA_Abort+0x21c>)
 800adfc:	4293      	cmp	r3, r2
 800adfe:	d040      	beq.n	800ae82 <HAL_DMA_Abort+0xd6>
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	4a71      	ldr	r2, [pc, #452]	; (800afcc <HAL_DMA_Abort+0x220>)
 800ae06:	4293      	cmp	r3, r2
 800ae08:	d03b      	beq.n	800ae82 <HAL_DMA_Abort+0xd6>
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	4a70      	ldr	r2, [pc, #448]	; (800afd0 <HAL_DMA_Abort+0x224>)
 800ae10:	4293      	cmp	r3, r2
 800ae12:	d036      	beq.n	800ae82 <HAL_DMA_Abort+0xd6>
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	4a6e      	ldr	r2, [pc, #440]	; (800afd4 <HAL_DMA_Abort+0x228>)
 800ae1a:	4293      	cmp	r3, r2
 800ae1c:	d031      	beq.n	800ae82 <HAL_DMA_Abort+0xd6>
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	4a6d      	ldr	r2, [pc, #436]	; (800afd8 <HAL_DMA_Abort+0x22c>)
 800ae24:	4293      	cmp	r3, r2
 800ae26:	d02c      	beq.n	800ae82 <HAL_DMA_Abort+0xd6>
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	4a6b      	ldr	r2, [pc, #428]	; (800afdc <HAL_DMA_Abort+0x230>)
 800ae2e:	4293      	cmp	r3, r2
 800ae30:	d027      	beq.n	800ae82 <HAL_DMA_Abort+0xd6>
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	4a6a      	ldr	r2, [pc, #424]	; (800afe0 <HAL_DMA_Abort+0x234>)
 800ae38:	4293      	cmp	r3, r2
 800ae3a:	d022      	beq.n	800ae82 <HAL_DMA_Abort+0xd6>
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	4a68      	ldr	r2, [pc, #416]	; (800afe4 <HAL_DMA_Abort+0x238>)
 800ae42:	4293      	cmp	r3, r2
 800ae44:	d01d      	beq.n	800ae82 <HAL_DMA_Abort+0xd6>
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	4a67      	ldr	r2, [pc, #412]	; (800afe8 <HAL_DMA_Abort+0x23c>)
 800ae4c:	4293      	cmp	r3, r2
 800ae4e:	d018      	beq.n	800ae82 <HAL_DMA_Abort+0xd6>
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	4a65      	ldr	r2, [pc, #404]	; (800afec <HAL_DMA_Abort+0x240>)
 800ae56:	4293      	cmp	r3, r2
 800ae58:	d013      	beq.n	800ae82 <HAL_DMA_Abort+0xd6>
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	4a64      	ldr	r2, [pc, #400]	; (800aff0 <HAL_DMA_Abort+0x244>)
 800ae60:	4293      	cmp	r3, r2
 800ae62:	d00e      	beq.n	800ae82 <HAL_DMA_Abort+0xd6>
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	4a62      	ldr	r2, [pc, #392]	; (800aff4 <HAL_DMA_Abort+0x248>)
 800ae6a:	4293      	cmp	r3, r2
 800ae6c:	d009      	beq.n	800ae82 <HAL_DMA_Abort+0xd6>
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	4a61      	ldr	r2, [pc, #388]	; (800aff8 <HAL_DMA_Abort+0x24c>)
 800ae74:	4293      	cmp	r3, r2
 800ae76:	d004      	beq.n	800ae82 <HAL_DMA_Abort+0xd6>
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	4a5f      	ldr	r2, [pc, #380]	; (800affc <HAL_DMA_Abort+0x250>)
 800ae7e:	4293      	cmp	r3, r2
 800ae80:	d101      	bne.n	800ae86 <HAL_DMA_Abort+0xda>
 800ae82:	2301      	movs	r3, #1
 800ae84:	e000      	b.n	800ae88 <HAL_DMA_Abort+0xdc>
 800ae86:	2300      	movs	r3, #0
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d013      	beq.n	800aeb4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	681a      	ldr	r2, [r3, #0]
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	f022 021e 	bic.w	r2, r2, #30
 800ae9a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	695a      	ldr	r2, [r3, #20]
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800aeaa:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	617b      	str	r3, [r7, #20]
 800aeb2:	e00a      	b.n	800aeca <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	681a      	ldr	r2, [r3, #0]
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	f022 020e 	bic.w	r2, r2, #14
 800aec2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	4a3c      	ldr	r2, [pc, #240]	; (800afc0 <HAL_DMA_Abort+0x214>)
 800aed0:	4293      	cmp	r3, r2
 800aed2:	d072      	beq.n	800afba <HAL_DMA_Abort+0x20e>
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	4a3a      	ldr	r2, [pc, #232]	; (800afc4 <HAL_DMA_Abort+0x218>)
 800aeda:	4293      	cmp	r3, r2
 800aedc:	d06d      	beq.n	800afba <HAL_DMA_Abort+0x20e>
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	4a39      	ldr	r2, [pc, #228]	; (800afc8 <HAL_DMA_Abort+0x21c>)
 800aee4:	4293      	cmp	r3, r2
 800aee6:	d068      	beq.n	800afba <HAL_DMA_Abort+0x20e>
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	4a37      	ldr	r2, [pc, #220]	; (800afcc <HAL_DMA_Abort+0x220>)
 800aeee:	4293      	cmp	r3, r2
 800aef0:	d063      	beq.n	800afba <HAL_DMA_Abort+0x20e>
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	4a36      	ldr	r2, [pc, #216]	; (800afd0 <HAL_DMA_Abort+0x224>)
 800aef8:	4293      	cmp	r3, r2
 800aefa:	d05e      	beq.n	800afba <HAL_DMA_Abort+0x20e>
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	4a34      	ldr	r2, [pc, #208]	; (800afd4 <HAL_DMA_Abort+0x228>)
 800af02:	4293      	cmp	r3, r2
 800af04:	d059      	beq.n	800afba <HAL_DMA_Abort+0x20e>
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	4a33      	ldr	r2, [pc, #204]	; (800afd8 <HAL_DMA_Abort+0x22c>)
 800af0c:	4293      	cmp	r3, r2
 800af0e:	d054      	beq.n	800afba <HAL_DMA_Abort+0x20e>
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	4a31      	ldr	r2, [pc, #196]	; (800afdc <HAL_DMA_Abort+0x230>)
 800af16:	4293      	cmp	r3, r2
 800af18:	d04f      	beq.n	800afba <HAL_DMA_Abort+0x20e>
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	4a30      	ldr	r2, [pc, #192]	; (800afe0 <HAL_DMA_Abort+0x234>)
 800af20:	4293      	cmp	r3, r2
 800af22:	d04a      	beq.n	800afba <HAL_DMA_Abort+0x20e>
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	4a2e      	ldr	r2, [pc, #184]	; (800afe4 <HAL_DMA_Abort+0x238>)
 800af2a:	4293      	cmp	r3, r2
 800af2c:	d045      	beq.n	800afba <HAL_DMA_Abort+0x20e>
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	4a2d      	ldr	r2, [pc, #180]	; (800afe8 <HAL_DMA_Abort+0x23c>)
 800af34:	4293      	cmp	r3, r2
 800af36:	d040      	beq.n	800afba <HAL_DMA_Abort+0x20e>
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	4a2b      	ldr	r2, [pc, #172]	; (800afec <HAL_DMA_Abort+0x240>)
 800af3e:	4293      	cmp	r3, r2
 800af40:	d03b      	beq.n	800afba <HAL_DMA_Abort+0x20e>
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	4a2a      	ldr	r2, [pc, #168]	; (800aff0 <HAL_DMA_Abort+0x244>)
 800af48:	4293      	cmp	r3, r2
 800af4a:	d036      	beq.n	800afba <HAL_DMA_Abort+0x20e>
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	4a28      	ldr	r2, [pc, #160]	; (800aff4 <HAL_DMA_Abort+0x248>)
 800af52:	4293      	cmp	r3, r2
 800af54:	d031      	beq.n	800afba <HAL_DMA_Abort+0x20e>
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	4a27      	ldr	r2, [pc, #156]	; (800aff8 <HAL_DMA_Abort+0x24c>)
 800af5c:	4293      	cmp	r3, r2
 800af5e:	d02c      	beq.n	800afba <HAL_DMA_Abort+0x20e>
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	4a25      	ldr	r2, [pc, #148]	; (800affc <HAL_DMA_Abort+0x250>)
 800af66:	4293      	cmp	r3, r2
 800af68:	d027      	beq.n	800afba <HAL_DMA_Abort+0x20e>
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	4a24      	ldr	r2, [pc, #144]	; (800b000 <HAL_DMA_Abort+0x254>)
 800af70:	4293      	cmp	r3, r2
 800af72:	d022      	beq.n	800afba <HAL_DMA_Abort+0x20e>
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	4a22      	ldr	r2, [pc, #136]	; (800b004 <HAL_DMA_Abort+0x258>)
 800af7a:	4293      	cmp	r3, r2
 800af7c:	d01d      	beq.n	800afba <HAL_DMA_Abort+0x20e>
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	4a21      	ldr	r2, [pc, #132]	; (800b008 <HAL_DMA_Abort+0x25c>)
 800af84:	4293      	cmp	r3, r2
 800af86:	d018      	beq.n	800afba <HAL_DMA_Abort+0x20e>
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	4a1f      	ldr	r2, [pc, #124]	; (800b00c <HAL_DMA_Abort+0x260>)
 800af8e:	4293      	cmp	r3, r2
 800af90:	d013      	beq.n	800afba <HAL_DMA_Abort+0x20e>
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	4a1e      	ldr	r2, [pc, #120]	; (800b010 <HAL_DMA_Abort+0x264>)
 800af98:	4293      	cmp	r3, r2
 800af9a:	d00e      	beq.n	800afba <HAL_DMA_Abort+0x20e>
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	4a1c      	ldr	r2, [pc, #112]	; (800b014 <HAL_DMA_Abort+0x268>)
 800afa2:	4293      	cmp	r3, r2
 800afa4:	d009      	beq.n	800afba <HAL_DMA_Abort+0x20e>
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	4a1b      	ldr	r2, [pc, #108]	; (800b018 <HAL_DMA_Abort+0x26c>)
 800afac:	4293      	cmp	r3, r2
 800afae:	d004      	beq.n	800afba <HAL_DMA_Abort+0x20e>
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	4a19      	ldr	r2, [pc, #100]	; (800b01c <HAL_DMA_Abort+0x270>)
 800afb6:	4293      	cmp	r3, r2
 800afb8:	d132      	bne.n	800b020 <HAL_DMA_Abort+0x274>
 800afba:	2301      	movs	r3, #1
 800afbc:	e031      	b.n	800b022 <HAL_DMA_Abort+0x276>
 800afbe:	bf00      	nop
 800afc0:	40020010 	.word	0x40020010
 800afc4:	40020028 	.word	0x40020028
 800afc8:	40020040 	.word	0x40020040
 800afcc:	40020058 	.word	0x40020058
 800afd0:	40020070 	.word	0x40020070
 800afd4:	40020088 	.word	0x40020088
 800afd8:	400200a0 	.word	0x400200a0
 800afdc:	400200b8 	.word	0x400200b8
 800afe0:	40020410 	.word	0x40020410
 800afe4:	40020428 	.word	0x40020428
 800afe8:	40020440 	.word	0x40020440
 800afec:	40020458 	.word	0x40020458
 800aff0:	40020470 	.word	0x40020470
 800aff4:	40020488 	.word	0x40020488
 800aff8:	400204a0 	.word	0x400204a0
 800affc:	400204b8 	.word	0x400204b8
 800b000:	58025408 	.word	0x58025408
 800b004:	5802541c 	.word	0x5802541c
 800b008:	58025430 	.word	0x58025430
 800b00c:	58025444 	.word	0x58025444
 800b010:	58025458 	.word	0x58025458
 800b014:	5802546c 	.word	0x5802546c
 800b018:	58025480 	.word	0x58025480
 800b01c:	58025494 	.word	0x58025494
 800b020:	2300      	movs	r3, #0
 800b022:	2b00      	cmp	r3, #0
 800b024:	d007      	beq.n	800b036 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b02a:	681a      	ldr	r2, [r3, #0]
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b030:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b034:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	4a6d      	ldr	r2, [pc, #436]	; (800b1f0 <HAL_DMA_Abort+0x444>)
 800b03c:	4293      	cmp	r3, r2
 800b03e:	d04a      	beq.n	800b0d6 <HAL_DMA_Abort+0x32a>
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	4a6b      	ldr	r2, [pc, #428]	; (800b1f4 <HAL_DMA_Abort+0x448>)
 800b046:	4293      	cmp	r3, r2
 800b048:	d045      	beq.n	800b0d6 <HAL_DMA_Abort+0x32a>
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	4a6a      	ldr	r2, [pc, #424]	; (800b1f8 <HAL_DMA_Abort+0x44c>)
 800b050:	4293      	cmp	r3, r2
 800b052:	d040      	beq.n	800b0d6 <HAL_DMA_Abort+0x32a>
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	4a68      	ldr	r2, [pc, #416]	; (800b1fc <HAL_DMA_Abort+0x450>)
 800b05a:	4293      	cmp	r3, r2
 800b05c:	d03b      	beq.n	800b0d6 <HAL_DMA_Abort+0x32a>
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	4a67      	ldr	r2, [pc, #412]	; (800b200 <HAL_DMA_Abort+0x454>)
 800b064:	4293      	cmp	r3, r2
 800b066:	d036      	beq.n	800b0d6 <HAL_DMA_Abort+0x32a>
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	4a65      	ldr	r2, [pc, #404]	; (800b204 <HAL_DMA_Abort+0x458>)
 800b06e:	4293      	cmp	r3, r2
 800b070:	d031      	beq.n	800b0d6 <HAL_DMA_Abort+0x32a>
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	4a64      	ldr	r2, [pc, #400]	; (800b208 <HAL_DMA_Abort+0x45c>)
 800b078:	4293      	cmp	r3, r2
 800b07a:	d02c      	beq.n	800b0d6 <HAL_DMA_Abort+0x32a>
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	4a62      	ldr	r2, [pc, #392]	; (800b20c <HAL_DMA_Abort+0x460>)
 800b082:	4293      	cmp	r3, r2
 800b084:	d027      	beq.n	800b0d6 <HAL_DMA_Abort+0x32a>
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	4a61      	ldr	r2, [pc, #388]	; (800b210 <HAL_DMA_Abort+0x464>)
 800b08c:	4293      	cmp	r3, r2
 800b08e:	d022      	beq.n	800b0d6 <HAL_DMA_Abort+0x32a>
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	4a5f      	ldr	r2, [pc, #380]	; (800b214 <HAL_DMA_Abort+0x468>)
 800b096:	4293      	cmp	r3, r2
 800b098:	d01d      	beq.n	800b0d6 <HAL_DMA_Abort+0x32a>
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	4a5e      	ldr	r2, [pc, #376]	; (800b218 <HAL_DMA_Abort+0x46c>)
 800b0a0:	4293      	cmp	r3, r2
 800b0a2:	d018      	beq.n	800b0d6 <HAL_DMA_Abort+0x32a>
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	4a5c      	ldr	r2, [pc, #368]	; (800b21c <HAL_DMA_Abort+0x470>)
 800b0aa:	4293      	cmp	r3, r2
 800b0ac:	d013      	beq.n	800b0d6 <HAL_DMA_Abort+0x32a>
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	4a5b      	ldr	r2, [pc, #364]	; (800b220 <HAL_DMA_Abort+0x474>)
 800b0b4:	4293      	cmp	r3, r2
 800b0b6:	d00e      	beq.n	800b0d6 <HAL_DMA_Abort+0x32a>
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	4a59      	ldr	r2, [pc, #356]	; (800b224 <HAL_DMA_Abort+0x478>)
 800b0be:	4293      	cmp	r3, r2
 800b0c0:	d009      	beq.n	800b0d6 <HAL_DMA_Abort+0x32a>
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	4a58      	ldr	r2, [pc, #352]	; (800b228 <HAL_DMA_Abort+0x47c>)
 800b0c8:	4293      	cmp	r3, r2
 800b0ca:	d004      	beq.n	800b0d6 <HAL_DMA_Abort+0x32a>
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	4a56      	ldr	r2, [pc, #344]	; (800b22c <HAL_DMA_Abort+0x480>)
 800b0d2:	4293      	cmp	r3, r2
 800b0d4:	d108      	bne.n	800b0e8 <HAL_DMA_Abort+0x33c>
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	681a      	ldr	r2, [r3, #0]
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	f022 0201 	bic.w	r2, r2, #1
 800b0e4:	601a      	str	r2, [r3, #0]
 800b0e6:	e007      	b.n	800b0f8 <HAL_DMA_Abort+0x34c>
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	681a      	ldr	r2, [r3, #0]
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	f022 0201 	bic.w	r2, r2, #1
 800b0f6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800b0f8:	e013      	b.n	800b122 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800b0fa:	f7fe fe9b 	bl	8009e34 <HAL_GetTick>
 800b0fe:	4602      	mov	r2, r0
 800b100:	693b      	ldr	r3, [r7, #16]
 800b102:	1ad3      	subs	r3, r2, r3
 800b104:	2b05      	cmp	r3, #5
 800b106:	d90c      	bls.n	800b122 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	2220      	movs	r2, #32
 800b10c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	2203      	movs	r2, #3
 800b112:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	2200      	movs	r2, #0
 800b11a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800b11e:	2301      	movs	r3, #1
 800b120:	e12d      	b.n	800b37e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800b122:	697b      	ldr	r3, [r7, #20]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	f003 0301 	and.w	r3, r3, #1
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d1e5      	bne.n	800b0fa <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	4a2f      	ldr	r2, [pc, #188]	; (800b1f0 <HAL_DMA_Abort+0x444>)
 800b134:	4293      	cmp	r3, r2
 800b136:	d04a      	beq.n	800b1ce <HAL_DMA_Abort+0x422>
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	4a2d      	ldr	r2, [pc, #180]	; (800b1f4 <HAL_DMA_Abort+0x448>)
 800b13e:	4293      	cmp	r3, r2
 800b140:	d045      	beq.n	800b1ce <HAL_DMA_Abort+0x422>
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	4a2c      	ldr	r2, [pc, #176]	; (800b1f8 <HAL_DMA_Abort+0x44c>)
 800b148:	4293      	cmp	r3, r2
 800b14a:	d040      	beq.n	800b1ce <HAL_DMA_Abort+0x422>
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	4a2a      	ldr	r2, [pc, #168]	; (800b1fc <HAL_DMA_Abort+0x450>)
 800b152:	4293      	cmp	r3, r2
 800b154:	d03b      	beq.n	800b1ce <HAL_DMA_Abort+0x422>
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	4a29      	ldr	r2, [pc, #164]	; (800b200 <HAL_DMA_Abort+0x454>)
 800b15c:	4293      	cmp	r3, r2
 800b15e:	d036      	beq.n	800b1ce <HAL_DMA_Abort+0x422>
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	4a27      	ldr	r2, [pc, #156]	; (800b204 <HAL_DMA_Abort+0x458>)
 800b166:	4293      	cmp	r3, r2
 800b168:	d031      	beq.n	800b1ce <HAL_DMA_Abort+0x422>
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	4a26      	ldr	r2, [pc, #152]	; (800b208 <HAL_DMA_Abort+0x45c>)
 800b170:	4293      	cmp	r3, r2
 800b172:	d02c      	beq.n	800b1ce <HAL_DMA_Abort+0x422>
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	4a24      	ldr	r2, [pc, #144]	; (800b20c <HAL_DMA_Abort+0x460>)
 800b17a:	4293      	cmp	r3, r2
 800b17c:	d027      	beq.n	800b1ce <HAL_DMA_Abort+0x422>
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	4a23      	ldr	r2, [pc, #140]	; (800b210 <HAL_DMA_Abort+0x464>)
 800b184:	4293      	cmp	r3, r2
 800b186:	d022      	beq.n	800b1ce <HAL_DMA_Abort+0x422>
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	4a21      	ldr	r2, [pc, #132]	; (800b214 <HAL_DMA_Abort+0x468>)
 800b18e:	4293      	cmp	r3, r2
 800b190:	d01d      	beq.n	800b1ce <HAL_DMA_Abort+0x422>
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	4a20      	ldr	r2, [pc, #128]	; (800b218 <HAL_DMA_Abort+0x46c>)
 800b198:	4293      	cmp	r3, r2
 800b19a:	d018      	beq.n	800b1ce <HAL_DMA_Abort+0x422>
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	4a1e      	ldr	r2, [pc, #120]	; (800b21c <HAL_DMA_Abort+0x470>)
 800b1a2:	4293      	cmp	r3, r2
 800b1a4:	d013      	beq.n	800b1ce <HAL_DMA_Abort+0x422>
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	4a1d      	ldr	r2, [pc, #116]	; (800b220 <HAL_DMA_Abort+0x474>)
 800b1ac:	4293      	cmp	r3, r2
 800b1ae:	d00e      	beq.n	800b1ce <HAL_DMA_Abort+0x422>
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	4a1b      	ldr	r2, [pc, #108]	; (800b224 <HAL_DMA_Abort+0x478>)
 800b1b6:	4293      	cmp	r3, r2
 800b1b8:	d009      	beq.n	800b1ce <HAL_DMA_Abort+0x422>
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	4a1a      	ldr	r2, [pc, #104]	; (800b228 <HAL_DMA_Abort+0x47c>)
 800b1c0:	4293      	cmp	r3, r2
 800b1c2:	d004      	beq.n	800b1ce <HAL_DMA_Abort+0x422>
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	4a18      	ldr	r2, [pc, #96]	; (800b22c <HAL_DMA_Abort+0x480>)
 800b1ca:	4293      	cmp	r3, r2
 800b1cc:	d101      	bne.n	800b1d2 <HAL_DMA_Abort+0x426>
 800b1ce:	2301      	movs	r3, #1
 800b1d0:	e000      	b.n	800b1d4 <HAL_DMA_Abort+0x428>
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d02b      	beq.n	800b230 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1dc:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b1e2:	f003 031f 	and.w	r3, r3, #31
 800b1e6:	223f      	movs	r2, #63	; 0x3f
 800b1e8:	409a      	lsls	r2, r3
 800b1ea:	68bb      	ldr	r3, [r7, #8]
 800b1ec:	609a      	str	r2, [r3, #8]
 800b1ee:	e02a      	b.n	800b246 <HAL_DMA_Abort+0x49a>
 800b1f0:	40020010 	.word	0x40020010
 800b1f4:	40020028 	.word	0x40020028
 800b1f8:	40020040 	.word	0x40020040
 800b1fc:	40020058 	.word	0x40020058
 800b200:	40020070 	.word	0x40020070
 800b204:	40020088 	.word	0x40020088
 800b208:	400200a0 	.word	0x400200a0
 800b20c:	400200b8 	.word	0x400200b8
 800b210:	40020410 	.word	0x40020410
 800b214:	40020428 	.word	0x40020428
 800b218:	40020440 	.word	0x40020440
 800b21c:	40020458 	.word	0x40020458
 800b220:	40020470 	.word	0x40020470
 800b224:	40020488 	.word	0x40020488
 800b228:	400204a0 	.word	0x400204a0
 800b22c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b234:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b23a:	f003 031f 	and.w	r3, r3, #31
 800b23e:	2201      	movs	r2, #1
 800b240:	409a      	lsls	r2, r3
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	4a4f      	ldr	r2, [pc, #316]	; (800b388 <HAL_DMA_Abort+0x5dc>)
 800b24c:	4293      	cmp	r3, r2
 800b24e:	d072      	beq.n	800b336 <HAL_DMA_Abort+0x58a>
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	4a4d      	ldr	r2, [pc, #308]	; (800b38c <HAL_DMA_Abort+0x5e0>)
 800b256:	4293      	cmp	r3, r2
 800b258:	d06d      	beq.n	800b336 <HAL_DMA_Abort+0x58a>
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	4a4c      	ldr	r2, [pc, #304]	; (800b390 <HAL_DMA_Abort+0x5e4>)
 800b260:	4293      	cmp	r3, r2
 800b262:	d068      	beq.n	800b336 <HAL_DMA_Abort+0x58a>
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	4a4a      	ldr	r2, [pc, #296]	; (800b394 <HAL_DMA_Abort+0x5e8>)
 800b26a:	4293      	cmp	r3, r2
 800b26c:	d063      	beq.n	800b336 <HAL_DMA_Abort+0x58a>
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	4a49      	ldr	r2, [pc, #292]	; (800b398 <HAL_DMA_Abort+0x5ec>)
 800b274:	4293      	cmp	r3, r2
 800b276:	d05e      	beq.n	800b336 <HAL_DMA_Abort+0x58a>
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	4a47      	ldr	r2, [pc, #284]	; (800b39c <HAL_DMA_Abort+0x5f0>)
 800b27e:	4293      	cmp	r3, r2
 800b280:	d059      	beq.n	800b336 <HAL_DMA_Abort+0x58a>
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	4a46      	ldr	r2, [pc, #280]	; (800b3a0 <HAL_DMA_Abort+0x5f4>)
 800b288:	4293      	cmp	r3, r2
 800b28a:	d054      	beq.n	800b336 <HAL_DMA_Abort+0x58a>
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	4a44      	ldr	r2, [pc, #272]	; (800b3a4 <HAL_DMA_Abort+0x5f8>)
 800b292:	4293      	cmp	r3, r2
 800b294:	d04f      	beq.n	800b336 <HAL_DMA_Abort+0x58a>
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	4a43      	ldr	r2, [pc, #268]	; (800b3a8 <HAL_DMA_Abort+0x5fc>)
 800b29c:	4293      	cmp	r3, r2
 800b29e:	d04a      	beq.n	800b336 <HAL_DMA_Abort+0x58a>
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	4a41      	ldr	r2, [pc, #260]	; (800b3ac <HAL_DMA_Abort+0x600>)
 800b2a6:	4293      	cmp	r3, r2
 800b2a8:	d045      	beq.n	800b336 <HAL_DMA_Abort+0x58a>
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	4a40      	ldr	r2, [pc, #256]	; (800b3b0 <HAL_DMA_Abort+0x604>)
 800b2b0:	4293      	cmp	r3, r2
 800b2b2:	d040      	beq.n	800b336 <HAL_DMA_Abort+0x58a>
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	4a3e      	ldr	r2, [pc, #248]	; (800b3b4 <HAL_DMA_Abort+0x608>)
 800b2ba:	4293      	cmp	r3, r2
 800b2bc:	d03b      	beq.n	800b336 <HAL_DMA_Abort+0x58a>
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	4a3d      	ldr	r2, [pc, #244]	; (800b3b8 <HAL_DMA_Abort+0x60c>)
 800b2c4:	4293      	cmp	r3, r2
 800b2c6:	d036      	beq.n	800b336 <HAL_DMA_Abort+0x58a>
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	4a3b      	ldr	r2, [pc, #236]	; (800b3bc <HAL_DMA_Abort+0x610>)
 800b2ce:	4293      	cmp	r3, r2
 800b2d0:	d031      	beq.n	800b336 <HAL_DMA_Abort+0x58a>
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	4a3a      	ldr	r2, [pc, #232]	; (800b3c0 <HAL_DMA_Abort+0x614>)
 800b2d8:	4293      	cmp	r3, r2
 800b2da:	d02c      	beq.n	800b336 <HAL_DMA_Abort+0x58a>
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	4a38      	ldr	r2, [pc, #224]	; (800b3c4 <HAL_DMA_Abort+0x618>)
 800b2e2:	4293      	cmp	r3, r2
 800b2e4:	d027      	beq.n	800b336 <HAL_DMA_Abort+0x58a>
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	4a37      	ldr	r2, [pc, #220]	; (800b3c8 <HAL_DMA_Abort+0x61c>)
 800b2ec:	4293      	cmp	r3, r2
 800b2ee:	d022      	beq.n	800b336 <HAL_DMA_Abort+0x58a>
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	4a35      	ldr	r2, [pc, #212]	; (800b3cc <HAL_DMA_Abort+0x620>)
 800b2f6:	4293      	cmp	r3, r2
 800b2f8:	d01d      	beq.n	800b336 <HAL_DMA_Abort+0x58a>
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	4a34      	ldr	r2, [pc, #208]	; (800b3d0 <HAL_DMA_Abort+0x624>)
 800b300:	4293      	cmp	r3, r2
 800b302:	d018      	beq.n	800b336 <HAL_DMA_Abort+0x58a>
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	4a32      	ldr	r2, [pc, #200]	; (800b3d4 <HAL_DMA_Abort+0x628>)
 800b30a:	4293      	cmp	r3, r2
 800b30c:	d013      	beq.n	800b336 <HAL_DMA_Abort+0x58a>
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	4a31      	ldr	r2, [pc, #196]	; (800b3d8 <HAL_DMA_Abort+0x62c>)
 800b314:	4293      	cmp	r3, r2
 800b316:	d00e      	beq.n	800b336 <HAL_DMA_Abort+0x58a>
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	4a2f      	ldr	r2, [pc, #188]	; (800b3dc <HAL_DMA_Abort+0x630>)
 800b31e:	4293      	cmp	r3, r2
 800b320:	d009      	beq.n	800b336 <HAL_DMA_Abort+0x58a>
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	4a2e      	ldr	r2, [pc, #184]	; (800b3e0 <HAL_DMA_Abort+0x634>)
 800b328:	4293      	cmp	r3, r2
 800b32a:	d004      	beq.n	800b336 <HAL_DMA_Abort+0x58a>
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	4a2c      	ldr	r2, [pc, #176]	; (800b3e4 <HAL_DMA_Abort+0x638>)
 800b332:	4293      	cmp	r3, r2
 800b334:	d101      	bne.n	800b33a <HAL_DMA_Abort+0x58e>
 800b336:	2301      	movs	r3, #1
 800b338:	e000      	b.n	800b33c <HAL_DMA_Abort+0x590>
 800b33a:	2300      	movs	r3, #0
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d015      	beq.n	800b36c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b344:	687a      	ldr	r2, [r7, #4]
 800b346:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800b348:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d00c      	beq.n	800b36c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b356:	681a      	ldr	r2, [r3, #0]
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b35c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b360:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b366:	687a      	ldr	r2, [r7, #4]
 800b368:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800b36a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	2201      	movs	r2, #1
 800b370:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	2200      	movs	r2, #0
 800b378:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 800b37c:	2300      	movs	r3, #0
}
 800b37e:	4618      	mov	r0, r3
 800b380:	3718      	adds	r7, #24
 800b382:	46bd      	mov	sp, r7
 800b384:	bd80      	pop	{r7, pc}
 800b386:	bf00      	nop
 800b388:	40020010 	.word	0x40020010
 800b38c:	40020028 	.word	0x40020028
 800b390:	40020040 	.word	0x40020040
 800b394:	40020058 	.word	0x40020058
 800b398:	40020070 	.word	0x40020070
 800b39c:	40020088 	.word	0x40020088
 800b3a0:	400200a0 	.word	0x400200a0
 800b3a4:	400200b8 	.word	0x400200b8
 800b3a8:	40020410 	.word	0x40020410
 800b3ac:	40020428 	.word	0x40020428
 800b3b0:	40020440 	.word	0x40020440
 800b3b4:	40020458 	.word	0x40020458
 800b3b8:	40020470 	.word	0x40020470
 800b3bc:	40020488 	.word	0x40020488
 800b3c0:	400204a0 	.word	0x400204a0
 800b3c4:	400204b8 	.word	0x400204b8
 800b3c8:	58025408 	.word	0x58025408
 800b3cc:	5802541c 	.word	0x5802541c
 800b3d0:	58025430 	.word	0x58025430
 800b3d4:	58025444 	.word	0x58025444
 800b3d8:	58025458 	.word	0x58025458
 800b3dc:	5802546c 	.word	0x5802546c
 800b3e0:	58025480 	.word	0x58025480
 800b3e4:	58025494 	.word	0x58025494

0800b3e8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b084      	sub	sp, #16
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d101      	bne.n	800b3fa <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800b3f6:	2301      	movs	r3, #1
 800b3f8:	e237      	b.n	800b86a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b400:	b2db      	uxtb	r3, r3
 800b402:	2b02      	cmp	r3, #2
 800b404:	d004      	beq.n	800b410 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	2280      	movs	r2, #128	; 0x80
 800b40a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800b40c:	2301      	movs	r3, #1
 800b40e:	e22c      	b.n	800b86a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	4a5c      	ldr	r2, [pc, #368]	; (800b588 <HAL_DMA_Abort_IT+0x1a0>)
 800b416:	4293      	cmp	r3, r2
 800b418:	d04a      	beq.n	800b4b0 <HAL_DMA_Abort_IT+0xc8>
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	4a5b      	ldr	r2, [pc, #364]	; (800b58c <HAL_DMA_Abort_IT+0x1a4>)
 800b420:	4293      	cmp	r3, r2
 800b422:	d045      	beq.n	800b4b0 <HAL_DMA_Abort_IT+0xc8>
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	4a59      	ldr	r2, [pc, #356]	; (800b590 <HAL_DMA_Abort_IT+0x1a8>)
 800b42a:	4293      	cmp	r3, r2
 800b42c:	d040      	beq.n	800b4b0 <HAL_DMA_Abort_IT+0xc8>
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	4a58      	ldr	r2, [pc, #352]	; (800b594 <HAL_DMA_Abort_IT+0x1ac>)
 800b434:	4293      	cmp	r3, r2
 800b436:	d03b      	beq.n	800b4b0 <HAL_DMA_Abort_IT+0xc8>
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	4a56      	ldr	r2, [pc, #344]	; (800b598 <HAL_DMA_Abort_IT+0x1b0>)
 800b43e:	4293      	cmp	r3, r2
 800b440:	d036      	beq.n	800b4b0 <HAL_DMA_Abort_IT+0xc8>
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	4a55      	ldr	r2, [pc, #340]	; (800b59c <HAL_DMA_Abort_IT+0x1b4>)
 800b448:	4293      	cmp	r3, r2
 800b44a:	d031      	beq.n	800b4b0 <HAL_DMA_Abort_IT+0xc8>
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	4a53      	ldr	r2, [pc, #332]	; (800b5a0 <HAL_DMA_Abort_IT+0x1b8>)
 800b452:	4293      	cmp	r3, r2
 800b454:	d02c      	beq.n	800b4b0 <HAL_DMA_Abort_IT+0xc8>
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	4a52      	ldr	r2, [pc, #328]	; (800b5a4 <HAL_DMA_Abort_IT+0x1bc>)
 800b45c:	4293      	cmp	r3, r2
 800b45e:	d027      	beq.n	800b4b0 <HAL_DMA_Abort_IT+0xc8>
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	4a50      	ldr	r2, [pc, #320]	; (800b5a8 <HAL_DMA_Abort_IT+0x1c0>)
 800b466:	4293      	cmp	r3, r2
 800b468:	d022      	beq.n	800b4b0 <HAL_DMA_Abort_IT+0xc8>
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	4a4f      	ldr	r2, [pc, #316]	; (800b5ac <HAL_DMA_Abort_IT+0x1c4>)
 800b470:	4293      	cmp	r3, r2
 800b472:	d01d      	beq.n	800b4b0 <HAL_DMA_Abort_IT+0xc8>
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	4a4d      	ldr	r2, [pc, #308]	; (800b5b0 <HAL_DMA_Abort_IT+0x1c8>)
 800b47a:	4293      	cmp	r3, r2
 800b47c:	d018      	beq.n	800b4b0 <HAL_DMA_Abort_IT+0xc8>
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	4a4c      	ldr	r2, [pc, #304]	; (800b5b4 <HAL_DMA_Abort_IT+0x1cc>)
 800b484:	4293      	cmp	r3, r2
 800b486:	d013      	beq.n	800b4b0 <HAL_DMA_Abort_IT+0xc8>
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	4a4a      	ldr	r2, [pc, #296]	; (800b5b8 <HAL_DMA_Abort_IT+0x1d0>)
 800b48e:	4293      	cmp	r3, r2
 800b490:	d00e      	beq.n	800b4b0 <HAL_DMA_Abort_IT+0xc8>
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	4a49      	ldr	r2, [pc, #292]	; (800b5bc <HAL_DMA_Abort_IT+0x1d4>)
 800b498:	4293      	cmp	r3, r2
 800b49a:	d009      	beq.n	800b4b0 <HAL_DMA_Abort_IT+0xc8>
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	4a47      	ldr	r2, [pc, #284]	; (800b5c0 <HAL_DMA_Abort_IT+0x1d8>)
 800b4a2:	4293      	cmp	r3, r2
 800b4a4:	d004      	beq.n	800b4b0 <HAL_DMA_Abort_IT+0xc8>
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	4a46      	ldr	r2, [pc, #280]	; (800b5c4 <HAL_DMA_Abort_IT+0x1dc>)
 800b4ac:	4293      	cmp	r3, r2
 800b4ae:	d101      	bne.n	800b4b4 <HAL_DMA_Abort_IT+0xcc>
 800b4b0:	2301      	movs	r3, #1
 800b4b2:	e000      	b.n	800b4b6 <HAL_DMA_Abort_IT+0xce>
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	f000 8086 	beq.w	800b5c8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	2204      	movs	r2, #4
 800b4c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	4a2f      	ldr	r2, [pc, #188]	; (800b588 <HAL_DMA_Abort_IT+0x1a0>)
 800b4ca:	4293      	cmp	r3, r2
 800b4cc:	d04a      	beq.n	800b564 <HAL_DMA_Abort_IT+0x17c>
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	4a2e      	ldr	r2, [pc, #184]	; (800b58c <HAL_DMA_Abort_IT+0x1a4>)
 800b4d4:	4293      	cmp	r3, r2
 800b4d6:	d045      	beq.n	800b564 <HAL_DMA_Abort_IT+0x17c>
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	4a2c      	ldr	r2, [pc, #176]	; (800b590 <HAL_DMA_Abort_IT+0x1a8>)
 800b4de:	4293      	cmp	r3, r2
 800b4e0:	d040      	beq.n	800b564 <HAL_DMA_Abort_IT+0x17c>
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	4a2b      	ldr	r2, [pc, #172]	; (800b594 <HAL_DMA_Abort_IT+0x1ac>)
 800b4e8:	4293      	cmp	r3, r2
 800b4ea:	d03b      	beq.n	800b564 <HAL_DMA_Abort_IT+0x17c>
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	4a29      	ldr	r2, [pc, #164]	; (800b598 <HAL_DMA_Abort_IT+0x1b0>)
 800b4f2:	4293      	cmp	r3, r2
 800b4f4:	d036      	beq.n	800b564 <HAL_DMA_Abort_IT+0x17c>
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	4a28      	ldr	r2, [pc, #160]	; (800b59c <HAL_DMA_Abort_IT+0x1b4>)
 800b4fc:	4293      	cmp	r3, r2
 800b4fe:	d031      	beq.n	800b564 <HAL_DMA_Abort_IT+0x17c>
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	4a26      	ldr	r2, [pc, #152]	; (800b5a0 <HAL_DMA_Abort_IT+0x1b8>)
 800b506:	4293      	cmp	r3, r2
 800b508:	d02c      	beq.n	800b564 <HAL_DMA_Abort_IT+0x17c>
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	4a25      	ldr	r2, [pc, #148]	; (800b5a4 <HAL_DMA_Abort_IT+0x1bc>)
 800b510:	4293      	cmp	r3, r2
 800b512:	d027      	beq.n	800b564 <HAL_DMA_Abort_IT+0x17c>
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	4a23      	ldr	r2, [pc, #140]	; (800b5a8 <HAL_DMA_Abort_IT+0x1c0>)
 800b51a:	4293      	cmp	r3, r2
 800b51c:	d022      	beq.n	800b564 <HAL_DMA_Abort_IT+0x17c>
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	4a22      	ldr	r2, [pc, #136]	; (800b5ac <HAL_DMA_Abort_IT+0x1c4>)
 800b524:	4293      	cmp	r3, r2
 800b526:	d01d      	beq.n	800b564 <HAL_DMA_Abort_IT+0x17c>
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	4a20      	ldr	r2, [pc, #128]	; (800b5b0 <HAL_DMA_Abort_IT+0x1c8>)
 800b52e:	4293      	cmp	r3, r2
 800b530:	d018      	beq.n	800b564 <HAL_DMA_Abort_IT+0x17c>
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	4a1f      	ldr	r2, [pc, #124]	; (800b5b4 <HAL_DMA_Abort_IT+0x1cc>)
 800b538:	4293      	cmp	r3, r2
 800b53a:	d013      	beq.n	800b564 <HAL_DMA_Abort_IT+0x17c>
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	4a1d      	ldr	r2, [pc, #116]	; (800b5b8 <HAL_DMA_Abort_IT+0x1d0>)
 800b542:	4293      	cmp	r3, r2
 800b544:	d00e      	beq.n	800b564 <HAL_DMA_Abort_IT+0x17c>
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	4a1c      	ldr	r2, [pc, #112]	; (800b5bc <HAL_DMA_Abort_IT+0x1d4>)
 800b54c:	4293      	cmp	r3, r2
 800b54e:	d009      	beq.n	800b564 <HAL_DMA_Abort_IT+0x17c>
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	4a1a      	ldr	r2, [pc, #104]	; (800b5c0 <HAL_DMA_Abort_IT+0x1d8>)
 800b556:	4293      	cmp	r3, r2
 800b558:	d004      	beq.n	800b564 <HAL_DMA_Abort_IT+0x17c>
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	4a19      	ldr	r2, [pc, #100]	; (800b5c4 <HAL_DMA_Abort_IT+0x1dc>)
 800b560:	4293      	cmp	r3, r2
 800b562:	d108      	bne.n	800b576 <HAL_DMA_Abort_IT+0x18e>
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	681a      	ldr	r2, [r3, #0]
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	f022 0201 	bic.w	r2, r2, #1
 800b572:	601a      	str	r2, [r3, #0]
 800b574:	e178      	b.n	800b868 <HAL_DMA_Abort_IT+0x480>
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	681a      	ldr	r2, [r3, #0]
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	f022 0201 	bic.w	r2, r2, #1
 800b584:	601a      	str	r2, [r3, #0]
 800b586:	e16f      	b.n	800b868 <HAL_DMA_Abort_IT+0x480>
 800b588:	40020010 	.word	0x40020010
 800b58c:	40020028 	.word	0x40020028
 800b590:	40020040 	.word	0x40020040
 800b594:	40020058 	.word	0x40020058
 800b598:	40020070 	.word	0x40020070
 800b59c:	40020088 	.word	0x40020088
 800b5a0:	400200a0 	.word	0x400200a0
 800b5a4:	400200b8 	.word	0x400200b8
 800b5a8:	40020410 	.word	0x40020410
 800b5ac:	40020428 	.word	0x40020428
 800b5b0:	40020440 	.word	0x40020440
 800b5b4:	40020458 	.word	0x40020458
 800b5b8:	40020470 	.word	0x40020470
 800b5bc:	40020488 	.word	0x40020488
 800b5c0:	400204a0 	.word	0x400204a0
 800b5c4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	681a      	ldr	r2, [r3, #0]
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	f022 020e 	bic.w	r2, r2, #14
 800b5d6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	4a6c      	ldr	r2, [pc, #432]	; (800b790 <HAL_DMA_Abort_IT+0x3a8>)
 800b5de:	4293      	cmp	r3, r2
 800b5e0:	d04a      	beq.n	800b678 <HAL_DMA_Abort_IT+0x290>
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	4a6b      	ldr	r2, [pc, #428]	; (800b794 <HAL_DMA_Abort_IT+0x3ac>)
 800b5e8:	4293      	cmp	r3, r2
 800b5ea:	d045      	beq.n	800b678 <HAL_DMA_Abort_IT+0x290>
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	4a69      	ldr	r2, [pc, #420]	; (800b798 <HAL_DMA_Abort_IT+0x3b0>)
 800b5f2:	4293      	cmp	r3, r2
 800b5f4:	d040      	beq.n	800b678 <HAL_DMA_Abort_IT+0x290>
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	4a68      	ldr	r2, [pc, #416]	; (800b79c <HAL_DMA_Abort_IT+0x3b4>)
 800b5fc:	4293      	cmp	r3, r2
 800b5fe:	d03b      	beq.n	800b678 <HAL_DMA_Abort_IT+0x290>
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	4a66      	ldr	r2, [pc, #408]	; (800b7a0 <HAL_DMA_Abort_IT+0x3b8>)
 800b606:	4293      	cmp	r3, r2
 800b608:	d036      	beq.n	800b678 <HAL_DMA_Abort_IT+0x290>
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	4a65      	ldr	r2, [pc, #404]	; (800b7a4 <HAL_DMA_Abort_IT+0x3bc>)
 800b610:	4293      	cmp	r3, r2
 800b612:	d031      	beq.n	800b678 <HAL_DMA_Abort_IT+0x290>
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	4a63      	ldr	r2, [pc, #396]	; (800b7a8 <HAL_DMA_Abort_IT+0x3c0>)
 800b61a:	4293      	cmp	r3, r2
 800b61c:	d02c      	beq.n	800b678 <HAL_DMA_Abort_IT+0x290>
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	4a62      	ldr	r2, [pc, #392]	; (800b7ac <HAL_DMA_Abort_IT+0x3c4>)
 800b624:	4293      	cmp	r3, r2
 800b626:	d027      	beq.n	800b678 <HAL_DMA_Abort_IT+0x290>
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	4a60      	ldr	r2, [pc, #384]	; (800b7b0 <HAL_DMA_Abort_IT+0x3c8>)
 800b62e:	4293      	cmp	r3, r2
 800b630:	d022      	beq.n	800b678 <HAL_DMA_Abort_IT+0x290>
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	4a5f      	ldr	r2, [pc, #380]	; (800b7b4 <HAL_DMA_Abort_IT+0x3cc>)
 800b638:	4293      	cmp	r3, r2
 800b63a:	d01d      	beq.n	800b678 <HAL_DMA_Abort_IT+0x290>
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	4a5d      	ldr	r2, [pc, #372]	; (800b7b8 <HAL_DMA_Abort_IT+0x3d0>)
 800b642:	4293      	cmp	r3, r2
 800b644:	d018      	beq.n	800b678 <HAL_DMA_Abort_IT+0x290>
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	4a5c      	ldr	r2, [pc, #368]	; (800b7bc <HAL_DMA_Abort_IT+0x3d4>)
 800b64c:	4293      	cmp	r3, r2
 800b64e:	d013      	beq.n	800b678 <HAL_DMA_Abort_IT+0x290>
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	4a5a      	ldr	r2, [pc, #360]	; (800b7c0 <HAL_DMA_Abort_IT+0x3d8>)
 800b656:	4293      	cmp	r3, r2
 800b658:	d00e      	beq.n	800b678 <HAL_DMA_Abort_IT+0x290>
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	4a59      	ldr	r2, [pc, #356]	; (800b7c4 <HAL_DMA_Abort_IT+0x3dc>)
 800b660:	4293      	cmp	r3, r2
 800b662:	d009      	beq.n	800b678 <HAL_DMA_Abort_IT+0x290>
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	4a57      	ldr	r2, [pc, #348]	; (800b7c8 <HAL_DMA_Abort_IT+0x3e0>)
 800b66a:	4293      	cmp	r3, r2
 800b66c:	d004      	beq.n	800b678 <HAL_DMA_Abort_IT+0x290>
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	4a56      	ldr	r2, [pc, #344]	; (800b7cc <HAL_DMA_Abort_IT+0x3e4>)
 800b674:	4293      	cmp	r3, r2
 800b676:	d108      	bne.n	800b68a <HAL_DMA_Abort_IT+0x2a2>
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	681a      	ldr	r2, [r3, #0]
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	f022 0201 	bic.w	r2, r2, #1
 800b686:	601a      	str	r2, [r3, #0]
 800b688:	e007      	b.n	800b69a <HAL_DMA_Abort_IT+0x2b2>
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	681a      	ldr	r2, [r3, #0]
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	f022 0201 	bic.w	r2, r2, #1
 800b698:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	4a3c      	ldr	r2, [pc, #240]	; (800b790 <HAL_DMA_Abort_IT+0x3a8>)
 800b6a0:	4293      	cmp	r3, r2
 800b6a2:	d072      	beq.n	800b78a <HAL_DMA_Abort_IT+0x3a2>
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	4a3a      	ldr	r2, [pc, #232]	; (800b794 <HAL_DMA_Abort_IT+0x3ac>)
 800b6aa:	4293      	cmp	r3, r2
 800b6ac:	d06d      	beq.n	800b78a <HAL_DMA_Abort_IT+0x3a2>
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	4a39      	ldr	r2, [pc, #228]	; (800b798 <HAL_DMA_Abort_IT+0x3b0>)
 800b6b4:	4293      	cmp	r3, r2
 800b6b6:	d068      	beq.n	800b78a <HAL_DMA_Abort_IT+0x3a2>
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	4a37      	ldr	r2, [pc, #220]	; (800b79c <HAL_DMA_Abort_IT+0x3b4>)
 800b6be:	4293      	cmp	r3, r2
 800b6c0:	d063      	beq.n	800b78a <HAL_DMA_Abort_IT+0x3a2>
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	4a36      	ldr	r2, [pc, #216]	; (800b7a0 <HAL_DMA_Abort_IT+0x3b8>)
 800b6c8:	4293      	cmp	r3, r2
 800b6ca:	d05e      	beq.n	800b78a <HAL_DMA_Abort_IT+0x3a2>
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	4a34      	ldr	r2, [pc, #208]	; (800b7a4 <HAL_DMA_Abort_IT+0x3bc>)
 800b6d2:	4293      	cmp	r3, r2
 800b6d4:	d059      	beq.n	800b78a <HAL_DMA_Abort_IT+0x3a2>
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	4a33      	ldr	r2, [pc, #204]	; (800b7a8 <HAL_DMA_Abort_IT+0x3c0>)
 800b6dc:	4293      	cmp	r3, r2
 800b6de:	d054      	beq.n	800b78a <HAL_DMA_Abort_IT+0x3a2>
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	4a31      	ldr	r2, [pc, #196]	; (800b7ac <HAL_DMA_Abort_IT+0x3c4>)
 800b6e6:	4293      	cmp	r3, r2
 800b6e8:	d04f      	beq.n	800b78a <HAL_DMA_Abort_IT+0x3a2>
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	4a30      	ldr	r2, [pc, #192]	; (800b7b0 <HAL_DMA_Abort_IT+0x3c8>)
 800b6f0:	4293      	cmp	r3, r2
 800b6f2:	d04a      	beq.n	800b78a <HAL_DMA_Abort_IT+0x3a2>
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	4a2e      	ldr	r2, [pc, #184]	; (800b7b4 <HAL_DMA_Abort_IT+0x3cc>)
 800b6fa:	4293      	cmp	r3, r2
 800b6fc:	d045      	beq.n	800b78a <HAL_DMA_Abort_IT+0x3a2>
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	4a2d      	ldr	r2, [pc, #180]	; (800b7b8 <HAL_DMA_Abort_IT+0x3d0>)
 800b704:	4293      	cmp	r3, r2
 800b706:	d040      	beq.n	800b78a <HAL_DMA_Abort_IT+0x3a2>
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	4a2b      	ldr	r2, [pc, #172]	; (800b7bc <HAL_DMA_Abort_IT+0x3d4>)
 800b70e:	4293      	cmp	r3, r2
 800b710:	d03b      	beq.n	800b78a <HAL_DMA_Abort_IT+0x3a2>
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	4a2a      	ldr	r2, [pc, #168]	; (800b7c0 <HAL_DMA_Abort_IT+0x3d8>)
 800b718:	4293      	cmp	r3, r2
 800b71a:	d036      	beq.n	800b78a <HAL_DMA_Abort_IT+0x3a2>
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	4a28      	ldr	r2, [pc, #160]	; (800b7c4 <HAL_DMA_Abort_IT+0x3dc>)
 800b722:	4293      	cmp	r3, r2
 800b724:	d031      	beq.n	800b78a <HAL_DMA_Abort_IT+0x3a2>
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	4a27      	ldr	r2, [pc, #156]	; (800b7c8 <HAL_DMA_Abort_IT+0x3e0>)
 800b72c:	4293      	cmp	r3, r2
 800b72e:	d02c      	beq.n	800b78a <HAL_DMA_Abort_IT+0x3a2>
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	4a25      	ldr	r2, [pc, #148]	; (800b7cc <HAL_DMA_Abort_IT+0x3e4>)
 800b736:	4293      	cmp	r3, r2
 800b738:	d027      	beq.n	800b78a <HAL_DMA_Abort_IT+0x3a2>
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	4a24      	ldr	r2, [pc, #144]	; (800b7d0 <HAL_DMA_Abort_IT+0x3e8>)
 800b740:	4293      	cmp	r3, r2
 800b742:	d022      	beq.n	800b78a <HAL_DMA_Abort_IT+0x3a2>
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	4a22      	ldr	r2, [pc, #136]	; (800b7d4 <HAL_DMA_Abort_IT+0x3ec>)
 800b74a:	4293      	cmp	r3, r2
 800b74c:	d01d      	beq.n	800b78a <HAL_DMA_Abort_IT+0x3a2>
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	4a21      	ldr	r2, [pc, #132]	; (800b7d8 <HAL_DMA_Abort_IT+0x3f0>)
 800b754:	4293      	cmp	r3, r2
 800b756:	d018      	beq.n	800b78a <HAL_DMA_Abort_IT+0x3a2>
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	4a1f      	ldr	r2, [pc, #124]	; (800b7dc <HAL_DMA_Abort_IT+0x3f4>)
 800b75e:	4293      	cmp	r3, r2
 800b760:	d013      	beq.n	800b78a <HAL_DMA_Abort_IT+0x3a2>
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	4a1e      	ldr	r2, [pc, #120]	; (800b7e0 <HAL_DMA_Abort_IT+0x3f8>)
 800b768:	4293      	cmp	r3, r2
 800b76a:	d00e      	beq.n	800b78a <HAL_DMA_Abort_IT+0x3a2>
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	4a1c      	ldr	r2, [pc, #112]	; (800b7e4 <HAL_DMA_Abort_IT+0x3fc>)
 800b772:	4293      	cmp	r3, r2
 800b774:	d009      	beq.n	800b78a <HAL_DMA_Abort_IT+0x3a2>
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	4a1b      	ldr	r2, [pc, #108]	; (800b7e8 <HAL_DMA_Abort_IT+0x400>)
 800b77c:	4293      	cmp	r3, r2
 800b77e:	d004      	beq.n	800b78a <HAL_DMA_Abort_IT+0x3a2>
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	4a19      	ldr	r2, [pc, #100]	; (800b7ec <HAL_DMA_Abort_IT+0x404>)
 800b786:	4293      	cmp	r3, r2
 800b788:	d132      	bne.n	800b7f0 <HAL_DMA_Abort_IT+0x408>
 800b78a:	2301      	movs	r3, #1
 800b78c:	e031      	b.n	800b7f2 <HAL_DMA_Abort_IT+0x40a>
 800b78e:	bf00      	nop
 800b790:	40020010 	.word	0x40020010
 800b794:	40020028 	.word	0x40020028
 800b798:	40020040 	.word	0x40020040
 800b79c:	40020058 	.word	0x40020058
 800b7a0:	40020070 	.word	0x40020070
 800b7a4:	40020088 	.word	0x40020088
 800b7a8:	400200a0 	.word	0x400200a0
 800b7ac:	400200b8 	.word	0x400200b8
 800b7b0:	40020410 	.word	0x40020410
 800b7b4:	40020428 	.word	0x40020428
 800b7b8:	40020440 	.word	0x40020440
 800b7bc:	40020458 	.word	0x40020458
 800b7c0:	40020470 	.word	0x40020470
 800b7c4:	40020488 	.word	0x40020488
 800b7c8:	400204a0 	.word	0x400204a0
 800b7cc:	400204b8 	.word	0x400204b8
 800b7d0:	58025408 	.word	0x58025408
 800b7d4:	5802541c 	.word	0x5802541c
 800b7d8:	58025430 	.word	0x58025430
 800b7dc:	58025444 	.word	0x58025444
 800b7e0:	58025458 	.word	0x58025458
 800b7e4:	5802546c 	.word	0x5802546c
 800b7e8:	58025480 	.word	0x58025480
 800b7ec:	58025494 	.word	0x58025494
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d028      	beq.n	800b848 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b7fa:	681a      	ldr	r2, [r3, #0]
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b800:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b804:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b80a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b810:	f003 031f 	and.w	r3, r3, #31
 800b814:	2201      	movs	r2, #1
 800b816:	409a      	lsls	r2, r3
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b820:	687a      	ldr	r2, [r7, #4]
 800b822:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800b824:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d00c      	beq.n	800b848 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b832:	681a      	ldr	r2, [r3, #0]
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b838:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b83c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b842:	687a      	ldr	r2, [r7, #4]
 800b844:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800b846:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	2201      	movs	r2, #1
 800b84c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	2200      	movs	r2, #0
 800b854:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d003      	beq.n	800b868 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b864:	6878      	ldr	r0, [r7, #4]
 800b866:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800b868:	2300      	movs	r3, #0
}
 800b86a:	4618      	mov	r0, r3
 800b86c:	3710      	adds	r7, #16
 800b86e:	46bd      	mov	sp, r7
 800b870:	bd80      	pop	{r7, pc}
 800b872:	bf00      	nop

0800b874 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800b874:	b580      	push	{r7, lr}
 800b876:	b08a      	sub	sp, #40	; 0x28
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800b87c:	2300      	movs	r3, #0
 800b87e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800b880:	4b67      	ldr	r3, [pc, #412]	; (800ba20 <HAL_DMA_IRQHandler+0x1ac>)
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	4a67      	ldr	r2, [pc, #412]	; (800ba24 <HAL_DMA_IRQHandler+0x1b0>)
 800b886:	fba2 2303 	umull	r2, r3, r2, r3
 800b88a:	0a9b      	lsrs	r3, r3, #10
 800b88c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b892:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b898:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800b89a:	6a3b      	ldr	r3, [r7, #32]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800b8a0:	69fb      	ldr	r3, [r7, #28]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	4a5f      	ldr	r2, [pc, #380]	; (800ba28 <HAL_DMA_IRQHandler+0x1b4>)
 800b8ac:	4293      	cmp	r3, r2
 800b8ae:	d04a      	beq.n	800b946 <HAL_DMA_IRQHandler+0xd2>
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	4a5d      	ldr	r2, [pc, #372]	; (800ba2c <HAL_DMA_IRQHandler+0x1b8>)
 800b8b6:	4293      	cmp	r3, r2
 800b8b8:	d045      	beq.n	800b946 <HAL_DMA_IRQHandler+0xd2>
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	4a5c      	ldr	r2, [pc, #368]	; (800ba30 <HAL_DMA_IRQHandler+0x1bc>)
 800b8c0:	4293      	cmp	r3, r2
 800b8c2:	d040      	beq.n	800b946 <HAL_DMA_IRQHandler+0xd2>
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	4a5a      	ldr	r2, [pc, #360]	; (800ba34 <HAL_DMA_IRQHandler+0x1c0>)
 800b8ca:	4293      	cmp	r3, r2
 800b8cc:	d03b      	beq.n	800b946 <HAL_DMA_IRQHandler+0xd2>
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	4a59      	ldr	r2, [pc, #356]	; (800ba38 <HAL_DMA_IRQHandler+0x1c4>)
 800b8d4:	4293      	cmp	r3, r2
 800b8d6:	d036      	beq.n	800b946 <HAL_DMA_IRQHandler+0xd2>
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	4a57      	ldr	r2, [pc, #348]	; (800ba3c <HAL_DMA_IRQHandler+0x1c8>)
 800b8de:	4293      	cmp	r3, r2
 800b8e0:	d031      	beq.n	800b946 <HAL_DMA_IRQHandler+0xd2>
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	4a56      	ldr	r2, [pc, #344]	; (800ba40 <HAL_DMA_IRQHandler+0x1cc>)
 800b8e8:	4293      	cmp	r3, r2
 800b8ea:	d02c      	beq.n	800b946 <HAL_DMA_IRQHandler+0xd2>
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	4a54      	ldr	r2, [pc, #336]	; (800ba44 <HAL_DMA_IRQHandler+0x1d0>)
 800b8f2:	4293      	cmp	r3, r2
 800b8f4:	d027      	beq.n	800b946 <HAL_DMA_IRQHandler+0xd2>
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	4a53      	ldr	r2, [pc, #332]	; (800ba48 <HAL_DMA_IRQHandler+0x1d4>)
 800b8fc:	4293      	cmp	r3, r2
 800b8fe:	d022      	beq.n	800b946 <HAL_DMA_IRQHandler+0xd2>
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	4a51      	ldr	r2, [pc, #324]	; (800ba4c <HAL_DMA_IRQHandler+0x1d8>)
 800b906:	4293      	cmp	r3, r2
 800b908:	d01d      	beq.n	800b946 <HAL_DMA_IRQHandler+0xd2>
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	4a50      	ldr	r2, [pc, #320]	; (800ba50 <HAL_DMA_IRQHandler+0x1dc>)
 800b910:	4293      	cmp	r3, r2
 800b912:	d018      	beq.n	800b946 <HAL_DMA_IRQHandler+0xd2>
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	4a4e      	ldr	r2, [pc, #312]	; (800ba54 <HAL_DMA_IRQHandler+0x1e0>)
 800b91a:	4293      	cmp	r3, r2
 800b91c:	d013      	beq.n	800b946 <HAL_DMA_IRQHandler+0xd2>
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	4a4d      	ldr	r2, [pc, #308]	; (800ba58 <HAL_DMA_IRQHandler+0x1e4>)
 800b924:	4293      	cmp	r3, r2
 800b926:	d00e      	beq.n	800b946 <HAL_DMA_IRQHandler+0xd2>
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	4a4b      	ldr	r2, [pc, #300]	; (800ba5c <HAL_DMA_IRQHandler+0x1e8>)
 800b92e:	4293      	cmp	r3, r2
 800b930:	d009      	beq.n	800b946 <HAL_DMA_IRQHandler+0xd2>
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	4a4a      	ldr	r2, [pc, #296]	; (800ba60 <HAL_DMA_IRQHandler+0x1ec>)
 800b938:	4293      	cmp	r3, r2
 800b93a:	d004      	beq.n	800b946 <HAL_DMA_IRQHandler+0xd2>
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	4a48      	ldr	r2, [pc, #288]	; (800ba64 <HAL_DMA_IRQHandler+0x1f0>)
 800b942:	4293      	cmp	r3, r2
 800b944:	d101      	bne.n	800b94a <HAL_DMA_IRQHandler+0xd6>
 800b946:	2301      	movs	r3, #1
 800b948:	e000      	b.n	800b94c <HAL_DMA_IRQHandler+0xd8>
 800b94a:	2300      	movs	r3, #0
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	f000 842b 	beq.w	800c1a8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b956:	f003 031f 	and.w	r3, r3, #31
 800b95a:	2208      	movs	r2, #8
 800b95c:	409a      	lsls	r2, r3
 800b95e:	69bb      	ldr	r3, [r7, #24]
 800b960:	4013      	ands	r3, r2
 800b962:	2b00      	cmp	r3, #0
 800b964:	f000 80a2 	beq.w	800baac <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	4a2e      	ldr	r2, [pc, #184]	; (800ba28 <HAL_DMA_IRQHandler+0x1b4>)
 800b96e:	4293      	cmp	r3, r2
 800b970:	d04a      	beq.n	800ba08 <HAL_DMA_IRQHandler+0x194>
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	4a2d      	ldr	r2, [pc, #180]	; (800ba2c <HAL_DMA_IRQHandler+0x1b8>)
 800b978:	4293      	cmp	r3, r2
 800b97a:	d045      	beq.n	800ba08 <HAL_DMA_IRQHandler+0x194>
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	4a2b      	ldr	r2, [pc, #172]	; (800ba30 <HAL_DMA_IRQHandler+0x1bc>)
 800b982:	4293      	cmp	r3, r2
 800b984:	d040      	beq.n	800ba08 <HAL_DMA_IRQHandler+0x194>
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	4a2a      	ldr	r2, [pc, #168]	; (800ba34 <HAL_DMA_IRQHandler+0x1c0>)
 800b98c:	4293      	cmp	r3, r2
 800b98e:	d03b      	beq.n	800ba08 <HAL_DMA_IRQHandler+0x194>
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	4a28      	ldr	r2, [pc, #160]	; (800ba38 <HAL_DMA_IRQHandler+0x1c4>)
 800b996:	4293      	cmp	r3, r2
 800b998:	d036      	beq.n	800ba08 <HAL_DMA_IRQHandler+0x194>
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	4a27      	ldr	r2, [pc, #156]	; (800ba3c <HAL_DMA_IRQHandler+0x1c8>)
 800b9a0:	4293      	cmp	r3, r2
 800b9a2:	d031      	beq.n	800ba08 <HAL_DMA_IRQHandler+0x194>
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	4a25      	ldr	r2, [pc, #148]	; (800ba40 <HAL_DMA_IRQHandler+0x1cc>)
 800b9aa:	4293      	cmp	r3, r2
 800b9ac:	d02c      	beq.n	800ba08 <HAL_DMA_IRQHandler+0x194>
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	4a24      	ldr	r2, [pc, #144]	; (800ba44 <HAL_DMA_IRQHandler+0x1d0>)
 800b9b4:	4293      	cmp	r3, r2
 800b9b6:	d027      	beq.n	800ba08 <HAL_DMA_IRQHandler+0x194>
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	4a22      	ldr	r2, [pc, #136]	; (800ba48 <HAL_DMA_IRQHandler+0x1d4>)
 800b9be:	4293      	cmp	r3, r2
 800b9c0:	d022      	beq.n	800ba08 <HAL_DMA_IRQHandler+0x194>
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	4a21      	ldr	r2, [pc, #132]	; (800ba4c <HAL_DMA_IRQHandler+0x1d8>)
 800b9c8:	4293      	cmp	r3, r2
 800b9ca:	d01d      	beq.n	800ba08 <HAL_DMA_IRQHandler+0x194>
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	4a1f      	ldr	r2, [pc, #124]	; (800ba50 <HAL_DMA_IRQHandler+0x1dc>)
 800b9d2:	4293      	cmp	r3, r2
 800b9d4:	d018      	beq.n	800ba08 <HAL_DMA_IRQHandler+0x194>
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	4a1e      	ldr	r2, [pc, #120]	; (800ba54 <HAL_DMA_IRQHandler+0x1e0>)
 800b9dc:	4293      	cmp	r3, r2
 800b9de:	d013      	beq.n	800ba08 <HAL_DMA_IRQHandler+0x194>
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	4a1c      	ldr	r2, [pc, #112]	; (800ba58 <HAL_DMA_IRQHandler+0x1e4>)
 800b9e6:	4293      	cmp	r3, r2
 800b9e8:	d00e      	beq.n	800ba08 <HAL_DMA_IRQHandler+0x194>
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	4a1b      	ldr	r2, [pc, #108]	; (800ba5c <HAL_DMA_IRQHandler+0x1e8>)
 800b9f0:	4293      	cmp	r3, r2
 800b9f2:	d009      	beq.n	800ba08 <HAL_DMA_IRQHandler+0x194>
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	4a19      	ldr	r2, [pc, #100]	; (800ba60 <HAL_DMA_IRQHandler+0x1ec>)
 800b9fa:	4293      	cmp	r3, r2
 800b9fc:	d004      	beq.n	800ba08 <HAL_DMA_IRQHandler+0x194>
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	4a18      	ldr	r2, [pc, #96]	; (800ba64 <HAL_DMA_IRQHandler+0x1f0>)
 800ba04:	4293      	cmp	r3, r2
 800ba06:	d12f      	bne.n	800ba68 <HAL_DMA_IRQHandler+0x1f4>
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	f003 0304 	and.w	r3, r3, #4
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	bf14      	ite	ne
 800ba16:	2301      	movne	r3, #1
 800ba18:	2300      	moveq	r3, #0
 800ba1a:	b2db      	uxtb	r3, r3
 800ba1c:	e02e      	b.n	800ba7c <HAL_DMA_IRQHandler+0x208>
 800ba1e:	bf00      	nop
 800ba20:	24000000 	.word	0x24000000
 800ba24:	1b4e81b5 	.word	0x1b4e81b5
 800ba28:	40020010 	.word	0x40020010
 800ba2c:	40020028 	.word	0x40020028
 800ba30:	40020040 	.word	0x40020040
 800ba34:	40020058 	.word	0x40020058
 800ba38:	40020070 	.word	0x40020070
 800ba3c:	40020088 	.word	0x40020088
 800ba40:	400200a0 	.word	0x400200a0
 800ba44:	400200b8 	.word	0x400200b8
 800ba48:	40020410 	.word	0x40020410
 800ba4c:	40020428 	.word	0x40020428
 800ba50:	40020440 	.word	0x40020440
 800ba54:	40020458 	.word	0x40020458
 800ba58:	40020470 	.word	0x40020470
 800ba5c:	40020488 	.word	0x40020488
 800ba60:	400204a0 	.word	0x400204a0
 800ba64:	400204b8 	.word	0x400204b8
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	f003 0308 	and.w	r3, r3, #8
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	bf14      	ite	ne
 800ba76:	2301      	movne	r3, #1
 800ba78:	2300      	moveq	r3, #0
 800ba7a:	b2db      	uxtb	r3, r3
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d015      	beq.n	800baac <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	681a      	ldr	r2, [r3, #0]
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	f022 0204 	bic.w	r2, r2, #4
 800ba8e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ba94:	f003 031f 	and.w	r3, r3, #31
 800ba98:	2208      	movs	r2, #8
 800ba9a:	409a      	lsls	r2, r3
 800ba9c:	6a3b      	ldr	r3, [r7, #32]
 800ba9e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800baa4:	f043 0201 	orr.w	r2, r3, #1
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bab0:	f003 031f 	and.w	r3, r3, #31
 800bab4:	69ba      	ldr	r2, [r7, #24]
 800bab6:	fa22 f303 	lsr.w	r3, r2, r3
 800baba:	f003 0301 	and.w	r3, r3, #1
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d06e      	beq.n	800bba0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	4a69      	ldr	r2, [pc, #420]	; (800bc6c <HAL_DMA_IRQHandler+0x3f8>)
 800bac8:	4293      	cmp	r3, r2
 800baca:	d04a      	beq.n	800bb62 <HAL_DMA_IRQHandler+0x2ee>
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	4a67      	ldr	r2, [pc, #412]	; (800bc70 <HAL_DMA_IRQHandler+0x3fc>)
 800bad2:	4293      	cmp	r3, r2
 800bad4:	d045      	beq.n	800bb62 <HAL_DMA_IRQHandler+0x2ee>
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	4a66      	ldr	r2, [pc, #408]	; (800bc74 <HAL_DMA_IRQHandler+0x400>)
 800badc:	4293      	cmp	r3, r2
 800bade:	d040      	beq.n	800bb62 <HAL_DMA_IRQHandler+0x2ee>
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	4a64      	ldr	r2, [pc, #400]	; (800bc78 <HAL_DMA_IRQHandler+0x404>)
 800bae6:	4293      	cmp	r3, r2
 800bae8:	d03b      	beq.n	800bb62 <HAL_DMA_IRQHandler+0x2ee>
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	4a63      	ldr	r2, [pc, #396]	; (800bc7c <HAL_DMA_IRQHandler+0x408>)
 800baf0:	4293      	cmp	r3, r2
 800baf2:	d036      	beq.n	800bb62 <HAL_DMA_IRQHandler+0x2ee>
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	4a61      	ldr	r2, [pc, #388]	; (800bc80 <HAL_DMA_IRQHandler+0x40c>)
 800bafa:	4293      	cmp	r3, r2
 800bafc:	d031      	beq.n	800bb62 <HAL_DMA_IRQHandler+0x2ee>
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	4a60      	ldr	r2, [pc, #384]	; (800bc84 <HAL_DMA_IRQHandler+0x410>)
 800bb04:	4293      	cmp	r3, r2
 800bb06:	d02c      	beq.n	800bb62 <HAL_DMA_IRQHandler+0x2ee>
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	4a5e      	ldr	r2, [pc, #376]	; (800bc88 <HAL_DMA_IRQHandler+0x414>)
 800bb0e:	4293      	cmp	r3, r2
 800bb10:	d027      	beq.n	800bb62 <HAL_DMA_IRQHandler+0x2ee>
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	4a5d      	ldr	r2, [pc, #372]	; (800bc8c <HAL_DMA_IRQHandler+0x418>)
 800bb18:	4293      	cmp	r3, r2
 800bb1a:	d022      	beq.n	800bb62 <HAL_DMA_IRQHandler+0x2ee>
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	4a5b      	ldr	r2, [pc, #364]	; (800bc90 <HAL_DMA_IRQHandler+0x41c>)
 800bb22:	4293      	cmp	r3, r2
 800bb24:	d01d      	beq.n	800bb62 <HAL_DMA_IRQHandler+0x2ee>
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	4a5a      	ldr	r2, [pc, #360]	; (800bc94 <HAL_DMA_IRQHandler+0x420>)
 800bb2c:	4293      	cmp	r3, r2
 800bb2e:	d018      	beq.n	800bb62 <HAL_DMA_IRQHandler+0x2ee>
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	4a58      	ldr	r2, [pc, #352]	; (800bc98 <HAL_DMA_IRQHandler+0x424>)
 800bb36:	4293      	cmp	r3, r2
 800bb38:	d013      	beq.n	800bb62 <HAL_DMA_IRQHandler+0x2ee>
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	4a57      	ldr	r2, [pc, #348]	; (800bc9c <HAL_DMA_IRQHandler+0x428>)
 800bb40:	4293      	cmp	r3, r2
 800bb42:	d00e      	beq.n	800bb62 <HAL_DMA_IRQHandler+0x2ee>
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	4a55      	ldr	r2, [pc, #340]	; (800bca0 <HAL_DMA_IRQHandler+0x42c>)
 800bb4a:	4293      	cmp	r3, r2
 800bb4c:	d009      	beq.n	800bb62 <HAL_DMA_IRQHandler+0x2ee>
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	4a54      	ldr	r2, [pc, #336]	; (800bca4 <HAL_DMA_IRQHandler+0x430>)
 800bb54:	4293      	cmp	r3, r2
 800bb56:	d004      	beq.n	800bb62 <HAL_DMA_IRQHandler+0x2ee>
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	4a52      	ldr	r2, [pc, #328]	; (800bca8 <HAL_DMA_IRQHandler+0x434>)
 800bb5e:	4293      	cmp	r3, r2
 800bb60:	d10a      	bne.n	800bb78 <HAL_DMA_IRQHandler+0x304>
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	695b      	ldr	r3, [r3, #20]
 800bb68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	bf14      	ite	ne
 800bb70:	2301      	movne	r3, #1
 800bb72:	2300      	moveq	r3, #0
 800bb74:	b2db      	uxtb	r3, r3
 800bb76:	e003      	b.n	800bb80 <HAL_DMA_IRQHandler+0x30c>
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	2300      	movs	r3, #0
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d00d      	beq.n	800bba0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bb88:	f003 031f 	and.w	r3, r3, #31
 800bb8c:	2201      	movs	r2, #1
 800bb8e:	409a      	lsls	r2, r3
 800bb90:	6a3b      	ldr	r3, [r7, #32]
 800bb92:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb98:	f043 0202 	orr.w	r2, r3, #2
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bba4:	f003 031f 	and.w	r3, r3, #31
 800bba8:	2204      	movs	r2, #4
 800bbaa:	409a      	lsls	r2, r3
 800bbac:	69bb      	ldr	r3, [r7, #24]
 800bbae:	4013      	ands	r3, r2
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	f000 808f 	beq.w	800bcd4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	4a2c      	ldr	r2, [pc, #176]	; (800bc6c <HAL_DMA_IRQHandler+0x3f8>)
 800bbbc:	4293      	cmp	r3, r2
 800bbbe:	d04a      	beq.n	800bc56 <HAL_DMA_IRQHandler+0x3e2>
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	4a2a      	ldr	r2, [pc, #168]	; (800bc70 <HAL_DMA_IRQHandler+0x3fc>)
 800bbc6:	4293      	cmp	r3, r2
 800bbc8:	d045      	beq.n	800bc56 <HAL_DMA_IRQHandler+0x3e2>
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	4a29      	ldr	r2, [pc, #164]	; (800bc74 <HAL_DMA_IRQHandler+0x400>)
 800bbd0:	4293      	cmp	r3, r2
 800bbd2:	d040      	beq.n	800bc56 <HAL_DMA_IRQHandler+0x3e2>
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	4a27      	ldr	r2, [pc, #156]	; (800bc78 <HAL_DMA_IRQHandler+0x404>)
 800bbda:	4293      	cmp	r3, r2
 800bbdc:	d03b      	beq.n	800bc56 <HAL_DMA_IRQHandler+0x3e2>
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	4a26      	ldr	r2, [pc, #152]	; (800bc7c <HAL_DMA_IRQHandler+0x408>)
 800bbe4:	4293      	cmp	r3, r2
 800bbe6:	d036      	beq.n	800bc56 <HAL_DMA_IRQHandler+0x3e2>
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	4a24      	ldr	r2, [pc, #144]	; (800bc80 <HAL_DMA_IRQHandler+0x40c>)
 800bbee:	4293      	cmp	r3, r2
 800bbf0:	d031      	beq.n	800bc56 <HAL_DMA_IRQHandler+0x3e2>
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	4a23      	ldr	r2, [pc, #140]	; (800bc84 <HAL_DMA_IRQHandler+0x410>)
 800bbf8:	4293      	cmp	r3, r2
 800bbfa:	d02c      	beq.n	800bc56 <HAL_DMA_IRQHandler+0x3e2>
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	4a21      	ldr	r2, [pc, #132]	; (800bc88 <HAL_DMA_IRQHandler+0x414>)
 800bc02:	4293      	cmp	r3, r2
 800bc04:	d027      	beq.n	800bc56 <HAL_DMA_IRQHandler+0x3e2>
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	4a20      	ldr	r2, [pc, #128]	; (800bc8c <HAL_DMA_IRQHandler+0x418>)
 800bc0c:	4293      	cmp	r3, r2
 800bc0e:	d022      	beq.n	800bc56 <HAL_DMA_IRQHandler+0x3e2>
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	4a1e      	ldr	r2, [pc, #120]	; (800bc90 <HAL_DMA_IRQHandler+0x41c>)
 800bc16:	4293      	cmp	r3, r2
 800bc18:	d01d      	beq.n	800bc56 <HAL_DMA_IRQHandler+0x3e2>
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	4a1d      	ldr	r2, [pc, #116]	; (800bc94 <HAL_DMA_IRQHandler+0x420>)
 800bc20:	4293      	cmp	r3, r2
 800bc22:	d018      	beq.n	800bc56 <HAL_DMA_IRQHandler+0x3e2>
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	4a1b      	ldr	r2, [pc, #108]	; (800bc98 <HAL_DMA_IRQHandler+0x424>)
 800bc2a:	4293      	cmp	r3, r2
 800bc2c:	d013      	beq.n	800bc56 <HAL_DMA_IRQHandler+0x3e2>
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	4a1a      	ldr	r2, [pc, #104]	; (800bc9c <HAL_DMA_IRQHandler+0x428>)
 800bc34:	4293      	cmp	r3, r2
 800bc36:	d00e      	beq.n	800bc56 <HAL_DMA_IRQHandler+0x3e2>
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	4a18      	ldr	r2, [pc, #96]	; (800bca0 <HAL_DMA_IRQHandler+0x42c>)
 800bc3e:	4293      	cmp	r3, r2
 800bc40:	d009      	beq.n	800bc56 <HAL_DMA_IRQHandler+0x3e2>
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	4a17      	ldr	r2, [pc, #92]	; (800bca4 <HAL_DMA_IRQHandler+0x430>)
 800bc48:	4293      	cmp	r3, r2
 800bc4a:	d004      	beq.n	800bc56 <HAL_DMA_IRQHandler+0x3e2>
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	4a15      	ldr	r2, [pc, #84]	; (800bca8 <HAL_DMA_IRQHandler+0x434>)
 800bc52:	4293      	cmp	r3, r2
 800bc54:	d12a      	bne.n	800bcac <HAL_DMA_IRQHandler+0x438>
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	f003 0302 	and.w	r3, r3, #2
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	bf14      	ite	ne
 800bc64:	2301      	movne	r3, #1
 800bc66:	2300      	moveq	r3, #0
 800bc68:	b2db      	uxtb	r3, r3
 800bc6a:	e023      	b.n	800bcb4 <HAL_DMA_IRQHandler+0x440>
 800bc6c:	40020010 	.word	0x40020010
 800bc70:	40020028 	.word	0x40020028
 800bc74:	40020040 	.word	0x40020040
 800bc78:	40020058 	.word	0x40020058
 800bc7c:	40020070 	.word	0x40020070
 800bc80:	40020088 	.word	0x40020088
 800bc84:	400200a0 	.word	0x400200a0
 800bc88:	400200b8 	.word	0x400200b8
 800bc8c:	40020410 	.word	0x40020410
 800bc90:	40020428 	.word	0x40020428
 800bc94:	40020440 	.word	0x40020440
 800bc98:	40020458 	.word	0x40020458
 800bc9c:	40020470 	.word	0x40020470
 800bca0:	40020488 	.word	0x40020488
 800bca4:	400204a0 	.word	0x400204a0
 800bca8:	400204b8 	.word	0x400204b8
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d00d      	beq.n	800bcd4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bcbc:	f003 031f 	and.w	r3, r3, #31
 800bcc0:	2204      	movs	r2, #4
 800bcc2:	409a      	lsls	r2, r3
 800bcc4:	6a3b      	ldr	r3, [r7, #32]
 800bcc6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bccc:	f043 0204 	orr.w	r2, r3, #4
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bcd8:	f003 031f 	and.w	r3, r3, #31
 800bcdc:	2210      	movs	r2, #16
 800bcde:	409a      	lsls	r2, r3
 800bce0:	69bb      	ldr	r3, [r7, #24]
 800bce2:	4013      	ands	r3, r2
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	f000 80a6 	beq.w	800be36 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	4a85      	ldr	r2, [pc, #532]	; (800bf04 <HAL_DMA_IRQHandler+0x690>)
 800bcf0:	4293      	cmp	r3, r2
 800bcf2:	d04a      	beq.n	800bd8a <HAL_DMA_IRQHandler+0x516>
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	4a83      	ldr	r2, [pc, #524]	; (800bf08 <HAL_DMA_IRQHandler+0x694>)
 800bcfa:	4293      	cmp	r3, r2
 800bcfc:	d045      	beq.n	800bd8a <HAL_DMA_IRQHandler+0x516>
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	4a82      	ldr	r2, [pc, #520]	; (800bf0c <HAL_DMA_IRQHandler+0x698>)
 800bd04:	4293      	cmp	r3, r2
 800bd06:	d040      	beq.n	800bd8a <HAL_DMA_IRQHandler+0x516>
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	4a80      	ldr	r2, [pc, #512]	; (800bf10 <HAL_DMA_IRQHandler+0x69c>)
 800bd0e:	4293      	cmp	r3, r2
 800bd10:	d03b      	beq.n	800bd8a <HAL_DMA_IRQHandler+0x516>
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	4a7f      	ldr	r2, [pc, #508]	; (800bf14 <HAL_DMA_IRQHandler+0x6a0>)
 800bd18:	4293      	cmp	r3, r2
 800bd1a:	d036      	beq.n	800bd8a <HAL_DMA_IRQHandler+0x516>
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	4a7d      	ldr	r2, [pc, #500]	; (800bf18 <HAL_DMA_IRQHandler+0x6a4>)
 800bd22:	4293      	cmp	r3, r2
 800bd24:	d031      	beq.n	800bd8a <HAL_DMA_IRQHandler+0x516>
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	4a7c      	ldr	r2, [pc, #496]	; (800bf1c <HAL_DMA_IRQHandler+0x6a8>)
 800bd2c:	4293      	cmp	r3, r2
 800bd2e:	d02c      	beq.n	800bd8a <HAL_DMA_IRQHandler+0x516>
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	4a7a      	ldr	r2, [pc, #488]	; (800bf20 <HAL_DMA_IRQHandler+0x6ac>)
 800bd36:	4293      	cmp	r3, r2
 800bd38:	d027      	beq.n	800bd8a <HAL_DMA_IRQHandler+0x516>
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	4a79      	ldr	r2, [pc, #484]	; (800bf24 <HAL_DMA_IRQHandler+0x6b0>)
 800bd40:	4293      	cmp	r3, r2
 800bd42:	d022      	beq.n	800bd8a <HAL_DMA_IRQHandler+0x516>
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	4a77      	ldr	r2, [pc, #476]	; (800bf28 <HAL_DMA_IRQHandler+0x6b4>)
 800bd4a:	4293      	cmp	r3, r2
 800bd4c:	d01d      	beq.n	800bd8a <HAL_DMA_IRQHandler+0x516>
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	4a76      	ldr	r2, [pc, #472]	; (800bf2c <HAL_DMA_IRQHandler+0x6b8>)
 800bd54:	4293      	cmp	r3, r2
 800bd56:	d018      	beq.n	800bd8a <HAL_DMA_IRQHandler+0x516>
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	4a74      	ldr	r2, [pc, #464]	; (800bf30 <HAL_DMA_IRQHandler+0x6bc>)
 800bd5e:	4293      	cmp	r3, r2
 800bd60:	d013      	beq.n	800bd8a <HAL_DMA_IRQHandler+0x516>
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	4a73      	ldr	r2, [pc, #460]	; (800bf34 <HAL_DMA_IRQHandler+0x6c0>)
 800bd68:	4293      	cmp	r3, r2
 800bd6a:	d00e      	beq.n	800bd8a <HAL_DMA_IRQHandler+0x516>
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	4a71      	ldr	r2, [pc, #452]	; (800bf38 <HAL_DMA_IRQHandler+0x6c4>)
 800bd72:	4293      	cmp	r3, r2
 800bd74:	d009      	beq.n	800bd8a <HAL_DMA_IRQHandler+0x516>
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	4a70      	ldr	r2, [pc, #448]	; (800bf3c <HAL_DMA_IRQHandler+0x6c8>)
 800bd7c:	4293      	cmp	r3, r2
 800bd7e:	d004      	beq.n	800bd8a <HAL_DMA_IRQHandler+0x516>
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	4a6e      	ldr	r2, [pc, #440]	; (800bf40 <HAL_DMA_IRQHandler+0x6cc>)
 800bd86:	4293      	cmp	r3, r2
 800bd88:	d10a      	bne.n	800bda0 <HAL_DMA_IRQHandler+0x52c>
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	f003 0308 	and.w	r3, r3, #8
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	bf14      	ite	ne
 800bd98:	2301      	movne	r3, #1
 800bd9a:	2300      	moveq	r3, #0
 800bd9c:	b2db      	uxtb	r3, r3
 800bd9e:	e009      	b.n	800bdb4 <HAL_DMA_IRQHandler+0x540>
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	f003 0304 	and.w	r3, r3, #4
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	bf14      	ite	ne
 800bdae:	2301      	movne	r3, #1
 800bdb0:	2300      	moveq	r3, #0
 800bdb2:	b2db      	uxtb	r3, r3
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d03e      	beq.n	800be36 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bdbc:	f003 031f 	and.w	r3, r3, #31
 800bdc0:	2210      	movs	r2, #16
 800bdc2:	409a      	lsls	r2, r3
 800bdc4:	6a3b      	ldr	r3, [r7, #32]
 800bdc6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d018      	beq.n	800be08 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d108      	bne.n	800bdf6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d024      	beq.n	800be36 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdf0:	6878      	ldr	r0, [r7, #4]
 800bdf2:	4798      	blx	r3
 800bdf4:	e01f      	b.n	800be36 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d01b      	beq.n	800be36 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800be02:	6878      	ldr	r0, [r7, #4]
 800be04:	4798      	blx	r3
 800be06:	e016      	b.n	800be36 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be12:	2b00      	cmp	r3, #0
 800be14:	d107      	bne.n	800be26 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	681a      	ldr	r2, [r3, #0]
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	f022 0208 	bic.w	r2, r2, #8
 800be24:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d003      	beq.n	800be36 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be32:	6878      	ldr	r0, [r7, #4]
 800be34:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800be3a:	f003 031f 	and.w	r3, r3, #31
 800be3e:	2220      	movs	r2, #32
 800be40:	409a      	lsls	r2, r3
 800be42:	69bb      	ldr	r3, [r7, #24]
 800be44:	4013      	ands	r3, r2
 800be46:	2b00      	cmp	r3, #0
 800be48:	f000 8110 	beq.w	800c06c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	4a2c      	ldr	r2, [pc, #176]	; (800bf04 <HAL_DMA_IRQHandler+0x690>)
 800be52:	4293      	cmp	r3, r2
 800be54:	d04a      	beq.n	800beec <HAL_DMA_IRQHandler+0x678>
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	4a2b      	ldr	r2, [pc, #172]	; (800bf08 <HAL_DMA_IRQHandler+0x694>)
 800be5c:	4293      	cmp	r3, r2
 800be5e:	d045      	beq.n	800beec <HAL_DMA_IRQHandler+0x678>
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	4a29      	ldr	r2, [pc, #164]	; (800bf0c <HAL_DMA_IRQHandler+0x698>)
 800be66:	4293      	cmp	r3, r2
 800be68:	d040      	beq.n	800beec <HAL_DMA_IRQHandler+0x678>
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	4a28      	ldr	r2, [pc, #160]	; (800bf10 <HAL_DMA_IRQHandler+0x69c>)
 800be70:	4293      	cmp	r3, r2
 800be72:	d03b      	beq.n	800beec <HAL_DMA_IRQHandler+0x678>
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	4a26      	ldr	r2, [pc, #152]	; (800bf14 <HAL_DMA_IRQHandler+0x6a0>)
 800be7a:	4293      	cmp	r3, r2
 800be7c:	d036      	beq.n	800beec <HAL_DMA_IRQHandler+0x678>
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	4a25      	ldr	r2, [pc, #148]	; (800bf18 <HAL_DMA_IRQHandler+0x6a4>)
 800be84:	4293      	cmp	r3, r2
 800be86:	d031      	beq.n	800beec <HAL_DMA_IRQHandler+0x678>
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	4a23      	ldr	r2, [pc, #140]	; (800bf1c <HAL_DMA_IRQHandler+0x6a8>)
 800be8e:	4293      	cmp	r3, r2
 800be90:	d02c      	beq.n	800beec <HAL_DMA_IRQHandler+0x678>
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	4a22      	ldr	r2, [pc, #136]	; (800bf20 <HAL_DMA_IRQHandler+0x6ac>)
 800be98:	4293      	cmp	r3, r2
 800be9a:	d027      	beq.n	800beec <HAL_DMA_IRQHandler+0x678>
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	4a20      	ldr	r2, [pc, #128]	; (800bf24 <HAL_DMA_IRQHandler+0x6b0>)
 800bea2:	4293      	cmp	r3, r2
 800bea4:	d022      	beq.n	800beec <HAL_DMA_IRQHandler+0x678>
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	4a1f      	ldr	r2, [pc, #124]	; (800bf28 <HAL_DMA_IRQHandler+0x6b4>)
 800beac:	4293      	cmp	r3, r2
 800beae:	d01d      	beq.n	800beec <HAL_DMA_IRQHandler+0x678>
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	4a1d      	ldr	r2, [pc, #116]	; (800bf2c <HAL_DMA_IRQHandler+0x6b8>)
 800beb6:	4293      	cmp	r3, r2
 800beb8:	d018      	beq.n	800beec <HAL_DMA_IRQHandler+0x678>
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	4a1c      	ldr	r2, [pc, #112]	; (800bf30 <HAL_DMA_IRQHandler+0x6bc>)
 800bec0:	4293      	cmp	r3, r2
 800bec2:	d013      	beq.n	800beec <HAL_DMA_IRQHandler+0x678>
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	4a1a      	ldr	r2, [pc, #104]	; (800bf34 <HAL_DMA_IRQHandler+0x6c0>)
 800beca:	4293      	cmp	r3, r2
 800becc:	d00e      	beq.n	800beec <HAL_DMA_IRQHandler+0x678>
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	4a19      	ldr	r2, [pc, #100]	; (800bf38 <HAL_DMA_IRQHandler+0x6c4>)
 800bed4:	4293      	cmp	r3, r2
 800bed6:	d009      	beq.n	800beec <HAL_DMA_IRQHandler+0x678>
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	4a17      	ldr	r2, [pc, #92]	; (800bf3c <HAL_DMA_IRQHandler+0x6c8>)
 800bede:	4293      	cmp	r3, r2
 800bee0:	d004      	beq.n	800beec <HAL_DMA_IRQHandler+0x678>
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	4a16      	ldr	r2, [pc, #88]	; (800bf40 <HAL_DMA_IRQHandler+0x6cc>)
 800bee8:	4293      	cmp	r3, r2
 800beea:	d12b      	bne.n	800bf44 <HAL_DMA_IRQHandler+0x6d0>
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	f003 0310 	and.w	r3, r3, #16
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	bf14      	ite	ne
 800befa:	2301      	movne	r3, #1
 800befc:	2300      	moveq	r3, #0
 800befe:	b2db      	uxtb	r3, r3
 800bf00:	e02a      	b.n	800bf58 <HAL_DMA_IRQHandler+0x6e4>
 800bf02:	bf00      	nop
 800bf04:	40020010 	.word	0x40020010
 800bf08:	40020028 	.word	0x40020028
 800bf0c:	40020040 	.word	0x40020040
 800bf10:	40020058 	.word	0x40020058
 800bf14:	40020070 	.word	0x40020070
 800bf18:	40020088 	.word	0x40020088
 800bf1c:	400200a0 	.word	0x400200a0
 800bf20:	400200b8 	.word	0x400200b8
 800bf24:	40020410 	.word	0x40020410
 800bf28:	40020428 	.word	0x40020428
 800bf2c:	40020440 	.word	0x40020440
 800bf30:	40020458 	.word	0x40020458
 800bf34:	40020470 	.word	0x40020470
 800bf38:	40020488 	.word	0x40020488
 800bf3c:	400204a0 	.word	0x400204a0
 800bf40:	400204b8 	.word	0x400204b8
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	f003 0302 	and.w	r3, r3, #2
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	bf14      	ite	ne
 800bf52:	2301      	movne	r3, #1
 800bf54:	2300      	moveq	r3, #0
 800bf56:	b2db      	uxtb	r3, r3
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	f000 8087 	beq.w	800c06c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bf62:	f003 031f 	and.w	r3, r3, #31
 800bf66:	2220      	movs	r2, #32
 800bf68:	409a      	lsls	r2, r3
 800bf6a:	6a3b      	ldr	r3, [r7, #32]
 800bf6c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800bf74:	b2db      	uxtb	r3, r3
 800bf76:	2b04      	cmp	r3, #4
 800bf78:	d139      	bne.n	800bfee <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	681a      	ldr	r2, [r3, #0]
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	f022 0216 	bic.w	r2, r2, #22
 800bf88:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	695a      	ldr	r2, [r3, #20]
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bf98:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d103      	bne.n	800bfaa <HAL_DMA_IRQHandler+0x736>
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d007      	beq.n	800bfba <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	681a      	ldr	r2, [r3, #0]
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	f022 0208 	bic.w	r2, r2, #8
 800bfb8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bfbe:	f003 031f 	and.w	r3, r3, #31
 800bfc2:	223f      	movs	r2, #63	; 0x3f
 800bfc4:	409a      	lsls	r2, r3
 800bfc6:	6a3b      	ldr	r3, [r7, #32]
 800bfc8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	2201      	movs	r2, #1
 800bfce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	2200      	movs	r2, #0
 800bfd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	f000 834a 	beq.w	800c678 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bfe8:	6878      	ldr	r0, [r7, #4]
 800bfea:	4798      	blx	r3
          }
          return;
 800bfec:	e344      	b.n	800c678 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d018      	beq.n	800c02e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c006:	2b00      	cmp	r3, #0
 800c008:	d108      	bne.n	800c01c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d02c      	beq.n	800c06c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c016:	6878      	ldr	r0, [r7, #4]
 800c018:	4798      	blx	r3
 800c01a:	e027      	b.n	800c06c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c020:	2b00      	cmp	r3, #0
 800c022:	d023      	beq.n	800c06c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c028:	6878      	ldr	r0, [r7, #4]
 800c02a:	4798      	blx	r3
 800c02c:	e01e      	b.n	800c06c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d10f      	bne.n	800c05c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	681a      	ldr	r2, [r3, #0]
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	f022 0210 	bic.w	r2, r2, #16
 800c04a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	2201      	movs	r2, #1
 800c050:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	2200      	movs	r2, #0
 800c058:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c060:	2b00      	cmp	r3, #0
 800c062:	d003      	beq.n	800c06c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c068:	6878      	ldr	r0, [r7, #4]
 800c06a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c070:	2b00      	cmp	r3, #0
 800c072:	f000 8306 	beq.w	800c682 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c07a:	f003 0301 	and.w	r3, r3, #1
 800c07e:	2b00      	cmp	r3, #0
 800c080:	f000 8088 	beq.w	800c194 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	2204      	movs	r2, #4
 800c088:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	4a7a      	ldr	r2, [pc, #488]	; (800c27c <HAL_DMA_IRQHandler+0xa08>)
 800c092:	4293      	cmp	r3, r2
 800c094:	d04a      	beq.n	800c12c <HAL_DMA_IRQHandler+0x8b8>
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	4a79      	ldr	r2, [pc, #484]	; (800c280 <HAL_DMA_IRQHandler+0xa0c>)
 800c09c:	4293      	cmp	r3, r2
 800c09e:	d045      	beq.n	800c12c <HAL_DMA_IRQHandler+0x8b8>
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	4a77      	ldr	r2, [pc, #476]	; (800c284 <HAL_DMA_IRQHandler+0xa10>)
 800c0a6:	4293      	cmp	r3, r2
 800c0a8:	d040      	beq.n	800c12c <HAL_DMA_IRQHandler+0x8b8>
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	4a76      	ldr	r2, [pc, #472]	; (800c288 <HAL_DMA_IRQHandler+0xa14>)
 800c0b0:	4293      	cmp	r3, r2
 800c0b2:	d03b      	beq.n	800c12c <HAL_DMA_IRQHandler+0x8b8>
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	4a74      	ldr	r2, [pc, #464]	; (800c28c <HAL_DMA_IRQHandler+0xa18>)
 800c0ba:	4293      	cmp	r3, r2
 800c0bc:	d036      	beq.n	800c12c <HAL_DMA_IRQHandler+0x8b8>
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	4a73      	ldr	r2, [pc, #460]	; (800c290 <HAL_DMA_IRQHandler+0xa1c>)
 800c0c4:	4293      	cmp	r3, r2
 800c0c6:	d031      	beq.n	800c12c <HAL_DMA_IRQHandler+0x8b8>
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	4a71      	ldr	r2, [pc, #452]	; (800c294 <HAL_DMA_IRQHandler+0xa20>)
 800c0ce:	4293      	cmp	r3, r2
 800c0d0:	d02c      	beq.n	800c12c <HAL_DMA_IRQHandler+0x8b8>
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	4a70      	ldr	r2, [pc, #448]	; (800c298 <HAL_DMA_IRQHandler+0xa24>)
 800c0d8:	4293      	cmp	r3, r2
 800c0da:	d027      	beq.n	800c12c <HAL_DMA_IRQHandler+0x8b8>
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	4a6e      	ldr	r2, [pc, #440]	; (800c29c <HAL_DMA_IRQHandler+0xa28>)
 800c0e2:	4293      	cmp	r3, r2
 800c0e4:	d022      	beq.n	800c12c <HAL_DMA_IRQHandler+0x8b8>
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	4a6d      	ldr	r2, [pc, #436]	; (800c2a0 <HAL_DMA_IRQHandler+0xa2c>)
 800c0ec:	4293      	cmp	r3, r2
 800c0ee:	d01d      	beq.n	800c12c <HAL_DMA_IRQHandler+0x8b8>
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	4a6b      	ldr	r2, [pc, #428]	; (800c2a4 <HAL_DMA_IRQHandler+0xa30>)
 800c0f6:	4293      	cmp	r3, r2
 800c0f8:	d018      	beq.n	800c12c <HAL_DMA_IRQHandler+0x8b8>
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	4a6a      	ldr	r2, [pc, #424]	; (800c2a8 <HAL_DMA_IRQHandler+0xa34>)
 800c100:	4293      	cmp	r3, r2
 800c102:	d013      	beq.n	800c12c <HAL_DMA_IRQHandler+0x8b8>
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	4a68      	ldr	r2, [pc, #416]	; (800c2ac <HAL_DMA_IRQHandler+0xa38>)
 800c10a:	4293      	cmp	r3, r2
 800c10c:	d00e      	beq.n	800c12c <HAL_DMA_IRQHandler+0x8b8>
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	4a67      	ldr	r2, [pc, #412]	; (800c2b0 <HAL_DMA_IRQHandler+0xa3c>)
 800c114:	4293      	cmp	r3, r2
 800c116:	d009      	beq.n	800c12c <HAL_DMA_IRQHandler+0x8b8>
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	4a65      	ldr	r2, [pc, #404]	; (800c2b4 <HAL_DMA_IRQHandler+0xa40>)
 800c11e:	4293      	cmp	r3, r2
 800c120:	d004      	beq.n	800c12c <HAL_DMA_IRQHandler+0x8b8>
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	4a64      	ldr	r2, [pc, #400]	; (800c2b8 <HAL_DMA_IRQHandler+0xa44>)
 800c128:	4293      	cmp	r3, r2
 800c12a:	d108      	bne.n	800c13e <HAL_DMA_IRQHandler+0x8ca>
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	681a      	ldr	r2, [r3, #0]
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	f022 0201 	bic.w	r2, r2, #1
 800c13a:	601a      	str	r2, [r3, #0]
 800c13c:	e007      	b.n	800c14e <HAL_DMA_IRQHandler+0x8da>
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	681a      	ldr	r2, [r3, #0]
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	f022 0201 	bic.w	r2, r2, #1
 800c14c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	3301      	adds	r3, #1
 800c152:	60fb      	str	r3, [r7, #12]
 800c154:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c156:	429a      	cmp	r2, r3
 800c158:	d307      	bcc.n	800c16a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	f003 0301 	and.w	r3, r3, #1
 800c164:	2b00      	cmp	r3, #0
 800c166:	d1f2      	bne.n	800c14e <HAL_DMA_IRQHandler+0x8da>
 800c168:	e000      	b.n	800c16c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800c16a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	f003 0301 	and.w	r3, r3, #1
 800c176:	2b00      	cmp	r3, #0
 800c178:	d004      	beq.n	800c184 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	2203      	movs	r2, #3
 800c17e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800c182:	e003      	b.n	800c18c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	2201      	movs	r2, #1
 800c188:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	2200      	movs	r2, #0
 800c190:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c198:	2b00      	cmp	r3, #0
 800c19a:	f000 8272 	beq.w	800c682 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c1a2:	6878      	ldr	r0, [r7, #4]
 800c1a4:	4798      	blx	r3
 800c1a6:	e26c      	b.n	800c682 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	4a43      	ldr	r2, [pc, #268]	; (800c2bc <HAL_DMA_IRQHandler+0xa48>)
 800c1ae:	4293      	cmp	r3, r2
 800c1b0:	d022      	beq.n	800c1f8 <HAL_DMA_IRQHandler+0x984>
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	4a42      	ldr	r2, [pc, #264]	; (800c2c0 <HAL_DMA_IRQHandler+0xa4c>)
 800c1b8:	4293      	cmp	r3, r2
 800c1ba:	d01d      	beq.n	800c1f8 <HAL_DMA_IRQHandler+0x984>
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	4a40      	ldr	r2, [pc, #256]	; (800c2c4 <HAL_DMA_IRQHandler+0xa50>)
 800c1c2:	4293      	cmp	r3, r2
 800c1c4:	d018      	beq.n	800c1f8 <HAL_DMA_IRQHandler+0x984>
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	4a3f      	ldr	r2, [pc, #252]	; (800c2c8 <HAL_DMA_IRQHandler+0xa54>)
 800c1cc:	4293      	cmp	r3, r2
 800c1ce:	d013      	beq.n	800c1f8 <HAL_DMA_IRQHandler+0x984>
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	4a3d      	ldr	r2, [pc, #244]	; (800c2cc <HAL_DMA_IRQHandler+0xa58>)
 800c1d6:	4293      	cmp	r3, r2
 800c1d8:	d00e      	beq.n	800c1f8 <HAL_DMA_IRQHandler+0x984>
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	4a3c      	ldr	r2, [pc, #240]	; (800c2d0 <HAL_DMA_IRQHandler+0xa5c>)
 800c1e0:	4293      	cmp	r3, r2
 800c1e2:	d009      	beq.n	800c1f8 <HAL_DMA_IRQHandler+0x984>
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	4a3a      	ldr	r2, [pc, #232]	; (800c2d4 <HAL_DMA_IRQHandler+0xa60>)
 800c1ea:	4293      	cmp	r3, r2
 800c1ec:	d004      	beq.n	800c1f8 <HAL_DMA_IRQHandler+0x984>
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	4a39      	ldr	r2, [pc, #228]	; (800c2d8 <HAL_DMA_IRQHandler+0xa64>)
 800c1f4:	4293      	cmp	r3, r2
 800c1f6:	d101      	bne.n	800c1fc <HAL_DMA_IRQHandler+0x988>
 800c1f8:	2301      	movs	r3, #1
 800c1fa:	e000      	b.n	800c1fe <HAL_DMA_IRQHandler+0x98a>
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	f000 823f 	beq.w	800c682 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c210:	f003 031f 	and.w	r3, r3, #31
 800c214:	2204      	movs	r2, #4
 800c216:	409a      	lsls	r2, r3
 800c218:	697b      	ldr	r3, [r7, #20]
 800c21a:	4013      	ands	r3, r2
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	f000 80cd 	beq.w	800c3bc <HAL_DMA_IRQHandler+0xb48>
 800c222:	693b      	ldr	r3, [r7, #16]
 800c224:	f003 0304 	and.w	r3, r3, #4
 800c228:	2b00      	cmp	r3, #0
 800c22a:	f000 80c7 	beq.w	800c3bc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c232:	f003 031f 	and.w	r3, r3, #31
 800c236:	2204      	movs	r2, #4
 800c238:	409a      	lsls	r2, r3
 800c23a:	69fb      	ldr	r3, [r7, #28]
 800c23c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800c23e:	693b      	ldr	r3, [r7, #16]
 800c240:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c244:	2b00      	cmp	r3, #0
 800c246:	d049      	beq.n	800c2dc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800c248:	693b      	ldr	r3, [r7, #16]
 800c24a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d109      	bne.n	800c266 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c256:	2b00      	cmp	r3, #0
 800c258:	f000 8210 	beq.w	800c67c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c260:	6878      	ldr	r0, [r7, #4]
 800c262:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800c264:	e20a      	b.n	800c67c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	f000 8206 	beq.w	800c67c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c274:	6878      	ldr	r0, [r7, #4]
 800c276:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800c278:	e200      	b.n	800c67c <HAL_DMA_IRQHandler+0xe08>
 800c27a:	bf00      	nop
 800c27c:	40020010 	.word	0x40020010
 800c280:	40020028 	.word	0x40020028
 800c284:	40020040 	.word	0x40020040
 800c288:	40020058 	.word	0x40020058
 800c28c:	40020070 	.word	0x40020070
 800c290:	40020088 	.word	0x40020088
 800c294:	400200a0 	.word	0x400200a0
 800c298:	400200b8 	.word	0x400200b8
 800c29c:	40020410 	.word	0x40020410
 800c2a0:	40020428 	.word	0x40020428
 800c2a4:	40020440 	.word	0x40020440
 800c2a8:	40020458 	.word	0x40020458
 800c2ac:	40020470 	.word	0x40020470
 800c2b0:	40020488 	.word	0x40020488
 800c2b4:	400204a0 	.word	0x400204a0
 800c2b8:	400204b8 	.word	0x400204b8
 800c2bc:	58025408 	.word	0x58025408
 800c2c0:	5802541c 	.word	0x5802541c
 800c2c4:	58025430 	.word	0x58025430
 800c2c8:	58025444 	.word	0x58025444
 800c2cc:	58025458 	.word	0x58025458
 800c2d0:	5802546c 	.word	0x5802546c
 800c2d4:	58025480 	.word	0x58025480
 800c2d8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800c2dc:	693b      	ldr	r3, [r7, #16]
 800c2de:	f003 0320 	and.w	r3, r3, #32
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d160      	bne.n	800c3a8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	4a7f      	ldr	r2, [pc, #508]	; (800c4e8 <HAL_DMA_IRQHandler+0xc74>)
 800c2ec:	4293      	cmp	r3, r2
 800c2ee:	d04a      	beq.n	800c386 <HAL_DMA_IRQHandler+0xb12>
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	4a7d      	ldr	r2, [pc, #500]	; (800c4ec <HAL_DMA_IRQHandler+0xc78>)
 800c2f6:	4293      	cmp	r3, r2
 800c2f8:	d045      	beq.n	800c386 <HAL_DMA_IRQHandler+0xb12>
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	4a7c      	ldr	r2, [pc, #496]	; (800c4f0 <HAL_DMA_IRQHandler+0xc7c>)
 800c300:	4293      	cmp	r3, r2
 800c302:	d040      	beq.n	800c386 <HAL_DMA_IRQHandler+0xb12>
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	4a7a      	ldr	r2, [pc, #488]	; (800c4f4 <HAL_DMA_IRQHandler+0xc80>)
 800c30a:	4293      	cmp	r3, r2
 800c30c:	d03b      	beq.n	800c386 <HAL_DMA_IRQHandler+0xb12>
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	4a79      	ldr	r2, [pc, #484]	; (800c4f8 <HAL_DMA_IRQHandler+0xc84>)
 800c314:	4293      	cmp	r3, r2
 800c316:	d036      	beq.n	800c386 <HAL_DMA_IRQHandler+0xb12>
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	4a77      	ldr	r2, [pc, #476]	; (800c4fc <HAL_DMA_IRQHandler+0xc88>)
 800c31e:	4293      	cmp	r3, r2
 800c320:	d031      	beq.n	800c386 <HAL_DMA_IRQHandler+0xb12>
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	4a76      	ldr	r2, [pc, #472]	; (800c500 <HAL_DMA_IRQHandler+0xc8c>)
 800c328:	4293      	cmp	r3, r2
 800c32a:	d02c      	beq.n	800c386 <HAL_DMA_IRQHandler+0xb12>
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	4a74      	ldr	r2, [pc, #464]	; (800c504 <HAL_DMA_IRQHandler+0xc90>)
 800c332:	4293      	cmp	r3, r2
 800c334:	d027      	beq.n	800c386 <HAL_DMA_IRQHandler+0xb12>
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	4a73      	ldr	r2, [pc, #460]	; (800c508 <HAL_DMA_IRQHandler+0xc94>)
 800c33c:	4293      	cmp	r3, r2
 800c33e:	d022      	beq.n	800c386 <HAL_DMA_IRQHandler+0xb12>
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	4a71      	ldr	r2, [pc, #452]	; (800c50c <HAL_DMA_IRQHandler+0xc98>)
 800c346:	4293      	cmp	r3, r2
 800c348:	d01d      	beq.n	800c386 <HAL_DMA_IRQHandler+0xb12>
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	4a70      	ldr	r2, [pc, #448]	; (800c510 <HAL_DMA_IRQHandler+0xc9c>)
 800c350:	4293      	cmp	r3, r2
 800c352:	d018      	beq.n	800c386 <HAL_DMA_IRQHandler+0xb12>
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	4a6e      	ldr	r2, [pc, #440]	; (800c514 <HAL_DMA_IRQHandler+0xca0>)
 800c35a:	4293      	cmp	r3, r2
 800c35c:	d013      	beq.n	800c386 <HAL_DMA_IRQHandler+0xb12>
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	4a6d      	ldr	r2, [pc, #436]	; (800c518 <HAL_DMA_IRQHandler+0xca4>)
 800c364:	4293      	cmp	r3, r2
 800c366:	d00e      	beq.n	800c386 <HAL_DMA_IRQHandler+0xb12>
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	4a6b      	ldr	r2, [pc, #428]	; (800c51c <HAL_DMA_IRQHandler+0xca8>)
 800c36e:	4293      	cmp	r3, r2
 800c370:	d009      	beq.n	800c386 <HAL_DMA_IRQHandler+0xb12>
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	4a6a      	ldr	r2, [pc, #424]	; (800c520 <HAL_DMA_IRQHandler+0xcac>)
 800c378:	4293      	cmp	r3, r2
 800c37a:	d004      	beq.n	800c386 <HAL_DMA_IRQHandler+0xb12>
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	4a68      	ldr	r2, [pc, #416]	; (800c524 <HAL_DMA_IRQHandler+0xcb0>)
 800c382:	4293      	cmp	r3, r2
 800c384:	d108      	bne.n	800c398 <HAL_DMA_IRQHandler+0xb24>
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	681a      	ldr	r2, [r3, #0]
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	f022 0208 	bic.w	r2, r2, #8
 800c394:	601a      	str	r2, [r3, #0]
 800c396:	e007      	b.n	800c3a8 <HAL_DMA_IRQHandler+0xb34>
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	681a      	ldr	r2, [r3, #0]
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	f022 0204 	bic.w	r2, r2, #4
 800c3a6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	f000 8165 	beq.w	800c67c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3b6:	6878      	ldr	r0, [r7, #4]
 800c3b8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800c3ba:	e15f      	b.n	800c67c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c3c0:	f003 031f 	and.w	r3, r3, #31
 800c3c4:	2202      	movs	r2, #2
 800c3c6:	409a      	lsls	r2, r3
 800c3c8:	697b      	ldr	r3, [r7, #20]
 800c3ca:	4013      	ands	r3, r2
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	f000 80c5 	beq.w	800c55c <HAL_DMA_IRQHandler+0xce8>
 800c3d2:	693b      	ldr	r3, [r7, #16]
 800c3d4:	f003 0302 	and.w	r3, r3, #2
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	f000 80bf 	beq.w	800c55c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c3e2:	f003 031f 	and.w	r3, r3, #31
 800c3e6:	2202      	movs	r2, #2
 800c3e8:	409a      	lsls	r2, r3
 800c3ea:	69fb      	ldr	r3, [r7, #28]
 800c3ec:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800c3ee:	693b      	ldr	r3, [r7, #16]
 800c3f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d018      	beq.n	800c42a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800c3f8:	693b      	ldr	r3, [r7, #16]
 800c3fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d109      	bne.n	800c416 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c406:	2b00      	cmp	r3, #0
 800c408:	f000 813a 	beq.w	800c680 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c410:	6878      	ldr	r0, [r7, #4]
 800c412:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800c414:	e134      	b.n	800c680 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	f000 8130 	beq.w	800c680 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c424:	6878      	ldr	r0, [r7, #4]
 800c426:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800c428:	e12a      	b.n	800c680 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800c42a:	693b      	ldr	r3, [r7, #16]
 800c42c:	f003 0320 	and.w	r3, r3, #32
 800c430:	2b00      	cmp	r3, #0
 800c432:	f040 8089 	bne.w	800c548 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	4a2b      	ldr	r2, [pc, #172]	; (800c4e8 <HAL_DMA_IRQHandler+0xc74>)
 800c43c:	4293      	cmp	r3, r2
 800c43e:	d04a      	beq.n	800c4d6 <HAL_DMA_IRQHandler+0xc62>
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	4a29      	ldr	r2, [pc, #164]	; (800c4ec <HAL_DMA_IRQHandler+0xc78>)
 800c446:	4293      	cmp	r3, r2
 800c448:	d045      	beq.n	800c4d6 <HAL_DMA_IRQHandler+0xc62>
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	4a28      	ldr	r2, [pc, #160]	; (800c4f0 <HAL_DMA_IRQHandler+0xc7c>)
 800c450:	4293      	cmp	r3, r2
 800c452:	d040      	beq.n	800c4d6 <HAL_DMA_IRQHandler+0xc62>
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	4a26      	ldr	r2, [pc, #152]	; (800c4f4 <HAL_DMA_IRQHandler+0xc80>)
 800c45a:	4293      	cmp	r3, r2
 800c45c:	d03b      	beq.n	800c4d6 <HAL_DMA_IRQHandler+0xc62>
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	4a25      	ldr	r2, [pc, #148]	; (800c4f8 <HAL_DMA_IRQHandler+0xc84>)
 800c464:	4293      	cmp	r3, r2
 800c466:	d036      	beq.n	800c4d6 <HAL_DMA_IRQHandler+0xc62>
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	4a23      	ldr	r2, [pc, #140]	; (800c4fc <HAL_DMA_IRQHandler+0xc88>)
 800c46e:	4293      	cmp	r3, r2
 800c470:	d031      	beq.n	800c4d6 <HAL_DMA_IRQHandler+0xc62>
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	4a22      	ldr	r2, [pc, #136]	; (800c500 <HAL_DMA_IRQHandler+0xc8c>)
 800c478:	4293      	cmp	r3, r2
 800c47a:	d02c      	beq.n	800c4d6 <HAL_DMA_IRQHandler+0xc62>
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	4a20      	ldr	r2, [pc, #128]	; (800c504 <HAL_DMA_IRQHandler+0xc90>)
 800c482:	4293      	cmp	r3, r2
 800c484:	d027      	beq.n	800c4d6 <HAL_DMA_IRQHandler+0xc62>
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	4a1f      	ldr	r2, [pc, #124]	; (800c508 <HAL_DMA_IRQHandler+0xc94>)
 800c48c:	4293      	cmp	r3, r2
 800c48e:	d022      	beq.n	800c4d6 <HAL_DMA_IRQHandler+0xc62>
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	4a1d      	ldr	r2, [pc, #116]	; (800c50c <HAL_DMA_IRQHandler+0xc98>)
 800c496:	4293      	cmp	r3, r2
 800c498:	d01d      	beq.n	800c4d6 <HAL_DMA_IRQHandler+0xc62>
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	4a1c      	ldr	r2, [pc, #112]	; (800c510 <HAL_DMA_IRQHandler+0xc9c>)
 800c4a0:	4293      	cmp	r3, r2
 800c4a2:	d018      	beq.n	800c4d6 <HAL_DMA_IRQHandler+0xc62>
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	4a1a      	ldr	r2, [pc, #104]	; (800c514 <HAL_DMA_IRQHandler+0xca0>)
 800c4aa:	4293      	cmp	r3, r2
 800c4ac:	d013      	beq.n	800c4d6 <HAL_DMA_IRQHandler+0xc62>
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	4a19      	ldr	r2, [pc, #100]	; (800c518 <HAL_DMA_IRQHandler+0xca4>)
 800c4b4:	4293      	cmp	r3, r2
 800c4b6:	d00e      	beq.n	800c4d6 <HAL_DMA_IRQHandler+0xc62>
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	4a17      	ldr	r2, [pc, #92]	; (800c51c <HAL_DMA_IRQHandler+0xca8>)
 800c4be:	4293      	cmp	r3, r2
 800c4c0:	d009      	beq.n	800c4d6 <HAL_DMA_IRQHandler+0xc62>
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	4a16      	ldr	r2, [pc, #88]	; (800c520 <HAL_DMA_IRQHandler+0xcac>)
 800c4c8:	4293      	cmp	r3, r2
 800c4ca:	d004      	beq.n	800c4d6 <HAL_DMA_IRQHandler+0xc62>
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	4a14      	ldr	r2, [pc, #80]	; (800c524 <HAL_DMA_IRQHandler+0xcb0>)
 800c4d2:	4293      	cmp	r3, r2
 800c4d4:	d128      	bne.n	800c528 <HAL_DMA_IRQHandler+0xcb4>
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	681a      	ldr	r2, [r3, #0]
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	f022 0214 	bic.w	r2, r2, #20
 800c4e4:	601a      	str	r2, [r3, #0]
 800c4e6:	e027      	b.n	800c538 <HAL_DMA_IRQHandler+0xcc4>
 800c4e8:	40020010 	.word	0x40020010
 800c4ec:	40020028 	.word	0x40020028
 800c4f0:	40020040 	.word	0x40020040
 800c4f4:	40020058 	.word	0x40020058
 800c4f8:	40020070 	.word	0x40020070
 800c4fc:	40020088 	.word	0x40020088
 800c500:	400200a0 	.word	0x400200a0
 800c504:	400200b8 	.word	0x400200b8
 800c508:	40020410 	.word	0x40020410
 800c50c:	40020428 	.word	0x40020428
 800c510:	40020440 	.word	0x40020440
 800c514:	40020458 	.word	0x40020458
 800c518:	40020470 	.word	0x40020470
 800c51c:	40020488 	.word	0x40020488
 800c520:	400204a0 	.word	0x400204a0
 800c524:	400204b8 	.word	0x400204b8
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	681a      	ldr	r2, [r3, #0]
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	f022 020a 	bic.w	r2, r2, #10
 800c536:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	2201      	movs	r2, #1
 800c53c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	2200      	movs	r2, #0
 800c544:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	f000 8097 	beq.w	800c680 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c556:	6878      	ldr	r0, [r7, #4]
 800c558:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800c55a:	e091      	b.n	800c680 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c560:	f003 031f 	and.w	r3, r3, #31
 800c564:	2208      	movs	r2, #8
 800c566:	409a      	lsls	r2, r3
 800c568:	697b      	ldr	r3, [r7, #20]
 800c56a:	4013      	ands	r3, r2
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	f000 8088 	beq.w	800c682 <HAL_DMA_IRQHandler+0xe0e>
 800c572:	693b      	ldr	r3, [r7, #16]
 800c574:	f003 0308 	and.w	r3, r3, #8
 800c578:	2b00      	cmp	r3, #0
 800c57a:	f000 8082 	beq.w	800c682 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	4a41      	ldr	r2, [pc, #260]	; (800c688 <HAL_DMA_IRQHandler+0xe14>)
 800c584:	4293      	cmp	r3, r2
 800c586:	d04a      	beq.n	800c61e <HAL_DMA_IRQHandler+0xdaa>
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	4a3f      	ldr	r2, [pc, #252]	; (800c68c <HAL_DMA_IRQHandler+0xe18>)
 800c58e:	4293      	cmp	r3, r2
 800c590:	d045      	beq.n	800c61e <HAL_DMA_IRQHandler+0xdaa>
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	4a3e      	ldr	r2, [pc, #248]	; (800c690 <HAL_DMA_IRQHandler+0xe1c>)
 800c598:	4293      	cmp	r3, r2
 800c59a:	d040      	beq.n	800c61e <HAL_DMA_IRQHandler+0xdaa>
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	4a3c      	ldr	r2, [pc, #240]	; (800c694 <HAL_DMA_IRQHandler+0xe20>)
 800c5a2:	4293      	cmp	r3, r2
 800c5a4:	d03b      	beq.n	800c61e <HAL_DMA_IRQHandler+0xdaa>
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	4a3b      	ldr	r2, [pc, #236]	; (800c698 <HAL_DMA_IRQHandler+0xe24>)
 800c5ac:	4293      	cmp	r3, r2
 800c5ae:	d036      	beq.n	800c61e <HAL_DMA_IRQHandler+0xdaa>
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	4a39      	ldr	r2, [pc, #228]	; (800c69c <HAL_DMA_IRQHandler+0xe28>)
 800c5b6:	4293      	cmp	r3, r2
 800c5b8:	d031      	beq.n	800c61e <HAL_DMA_IRQHandler+0xdaa>
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	4a38      	ldr	r2, [pc, #224]	; (800c6a0 <HAL_DMA_IRQHandler+0xe2c>)
 800c5c0:	4293      	cmp	r3, r2
 800c5c2:	d02c      	beq.n	800c61e <HAL_DMA_IRQHandler+0xdaa>
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	4a36      	ldr	r2, [pc, #216]	; (800c6a4 <HAL_DMA_IRQHandler+0xe30>)
 800c5ca:	4293      	cmp	r3, r2
 800c5cc:	d027      	beq.n	800c61e <HAL_DMA_IRQHandler+0xdaa>
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	4a35      	ldr	r2, [pc, #212]	; (800c6a8 <HAL_DMA_IRQHandler+0xe34>)
 800c5d4:	4293      	cmp	r3, r2
 800c5d6:	d022      	beq.n	800c61e <HAL_DMA_IRQHandler+0xdaa>
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	4a33      	ldr	r2, [pc, #204]	; (800c6ac <HAL_DMA_IRQHandler+0xe38>)
 800c5de:	4293      	cmp	r3, r2
 800c5e0:	d01d      	beq.n	800c61e <HAL_DMA_IRQHandler+0xdaa>
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	4a32      	ldr	r2, [pc, #200]	; (800c6b0 <HAL_DMA_IRQHandler+0xe3c>)
 800c5e8:	4293      	cmp	r3, r2
 800c5ea:	d018      	beq.n	800c61e <HAL_DMA_IRQHandler+0xdaa>
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	4a30      	ldr	r2, [pc, #192]	; (800c6b4 <HAL_DMA_IRQHandler+0xe40>)
 800c5f2:	4293      	cmp	r3, r2
 800c5f4:	d013      	beq.n	800c61e <HAL_DMA_IRQHandler+0xdaa>
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	4a2f      	ldr	r2, [pc, #188]	; (800c6b8 <HAL_DMA_IRQHandler+0xe44>)
 800c5fc:	4293      	cmp	r3, r2
 800c5fe:	d00e      	beq.n	800c61e <HAL_DMA_IRQHandler+0xdaa>
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	4a2d      	ldr	r2, [pc, #180]	; (800c6bc <HAL_DMA_IRQHandler+0xe48>)
 800c606:	4293      	cmp	r3, r2
 800c608:	d009      	beq.n	800c61e <HAL_DMA_IRQHandler+0xdaa>
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	4a2c      	ldr	r2, [pc, #176]	; (800c6c0 <HAL_DMA_IRQHandler+0xe4c>)
 800c610:	4293      	cmp	r3, r2
 800c612:	d004      	beq.n	800c61e <HAL_DMA_IRQHandler+0xdaa>
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	4a2a      	ldr	r2, [pc, #168]	; (800c6c4 <HAL_DMA_IRQHandler+0xe50>)
 800c61a:	4293      	cmp	r3, r2
 800c61c:	d108      	bne.n	800c630 <HAL_DMA_IRQHandler+0xdbc>
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	681a      	ldr	r2, [r3, #0]
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	f022 021c 	bic.w	r2, r2, #28
 800c62c:	601a      	str	r2, [r3, #0]
 800c62e:	e007      	b.n	800c640 <HAL_DMA_IRQHandler+0xdcc>
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	681a      	ldr	r2, [r3, #0]
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	f022 020e 	bic.w	r2, r2, #14
 800c63e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c644:	f003 031f 	and.w	r3, r3, #31
 800c648:	2201      	movs	r2, #1
 800c64a:	409a      	lsls	r2, r3
 800c64c:	69fb      	ldr	r3, [r7, #28]
 800c64e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	2201      	movs	r2, #1
 800c654:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	2201      	movs	r2, #1
 800c65a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	2200      	movs	r2, #0
 800c662:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d009      	beq.n	800c682 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c672:	6878      	ldr	r0, [r7, #4]
 800c674:	4798      	blx	r3
 800c676:	e004      	b.n	800c682 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800c678:	bf00      	nop
 800c67a:	e002      	b.n	800c682 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800c67c:	bf00      	nop
 800c67e:	e000      	b.n	800c682 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800c680:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800c682:	3728      	adds	r7, #40	; 0x28
 800c684:	46bd      	mov	sp, r7
 800c686:	bd80      	pop	{r7, pc}
 800c688:	40020010 	.word	0x40020010
 800c68c:	40020028 	.word	0x40020028
 800c690:	40020040 	.word	0x40020040
 800c694:	40020058 	.word	0x40020058
 800c698:	40020070 	.word	0x40020070
 800c69c:	40020088 	.word	0x40020088
 800c6a0:	400200a0 	.word	0x400200a0
 800c6a4:	400200b8 	.word	0x400200b8
 800c6a8:	40020410 	.word	0x40020410
 800c6ac:	40020428 	.word	0x40020428
 800c6b0:	40020440 	.word	0x40020440
 800c6b4:	40020458 	.word	0x40020458
 800c6b8:	40020470 	.word	0x40020470
 800c6bc:	40020488 	.word	0x40020488
 800c6c0:	400204a0 	.word	0x400204a0
 800c6c4:	400204b8 	.word	0x400204b8

0800c6c8 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800c6c8:	b480      	push	{r7}
 800c6ca:	b083      	sub	sp, #12
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c6d6:	b2db      	uxtb	r3, r3
}
 800c6d8:	4618      	mov	r0, r3
 800c6da:	370c      	adds	r7, #12
 800c6dc:	46bd      	mov	sp, r7
 800c6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e2:	4770      	bx	lr

0800c6e4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800c6e4:	b480      	push	{r7}
 800c6e6:	b085      	sub	sp, #20
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	4a42      	ldr	r2, [pc, #264]	; (800c7fc <DMA_CalcBaseAndBitshift+0x118>)
 800c6f2:	4293      	cmp	r3, r2
 800c6f4:	d04a      	beq.n	800c78c <DMA_CalcBaseAndBitshift+0xa8>
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	4a41      	ldr	r2, [pc, #260]	; (800c800 <DMA_CalcBaseAndBitshift+0x11c>)
 800c6fc:	4293      	cmp	r3, r2
 800c6fe:	d045      	beq.n	800c78c <DMA_CalcBaseAndBitshift+0xa8>
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	4a3f      	ldr	r2, [pc, #252]	; (800c804 <DMA_CalcBaseAndBitshift+0x120>)
 800c706:	4293      	cmp	r3, r2
 800c708:	d040      	beq.n	800c78c <DMA_CalcBaseAndBitshift+0xa8>
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	4a3e      	ldr	r2, [pc, #248]	; (800c808 <DMA_CalcBaseAndBitshift+0x124>)
 800c710:	4293      	cmp	r3, r2
 800c712:	d03b      	beq.n	800c78c <DMA_CalcBaseAndBitshift+0xa8>
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	4a3c      	ldr	r2, [pc, #240]	; (800c80c <DMA_CalcBaseAndBitshift+0x128>)
 800c71a:	4293      	cmp	r3, r2
 800c71c:	d036      	beq.n	800c78c <DMA_CalcBaseAndBitshift+0xa8>
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	4a3b      	ldr	r2, [pc, #236]	; (800c810 <DMA_CalcBaseAndBitshift+0x12c>)
 800c724:	4293      	cmp	r3, r2
 800c726:	d031      	beq.n	800c78c <DMA_CalcBaseAndBitshift+0xa8>
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	4a39      	ldr	r2, [pc, #228]	; (800c814 <DMA_CalcBaseAndBitshift+0x130>)
 800c72e:	4293      	cmp	r3, r2
 800c730:	d02c      	beq.n	800c78c <DMA_CalcBaseAndBitshift+0xa8>
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	4a38      	ldr	r2, [pc, #224]	; (800c818 <DMA_CalcBaseAndBitshift+0x134>)
 800c738:	4293      	cmp	r3, r2
 800c73a:	d027      	beq.n	800c78c <DMA_CalcBaseAndBitshift+0xa8>
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	4a36      	ldr	r2, [pc, #216]	; (800c81c <DMA_CalcBaseAndBitshift+0x138>)
 800c742:	4293      	cmp	r3, r2
 800c744:	d022      	beq.n	800c78c <DMA_CalcBaseAndBitshift+0xa8>
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	4a35      	ldr	r2, [pc, #212]	; (800c820 <DMA_CalcBaseAndBitshift+0x13c>)
 800c74c:	4293      	cmp	r3, r2
 800c74e:	d01d      	beq.n	800c78c <DMA_CalcBaseAndBitshift+0xa8>
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	4a33      	ldr	r2, [pc, #204]	; (800c824 <DMA_CalcBaseAndBitshift+0x140>)
 800c756:	4293      	cmp	r3, r2
 800c758:	d018      	beq.n	800c78c <DMA_CalcBaseAndBitshift+0xa8>
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	4a32      	ldr	r2, [pc, #200]	; (800c828 <DMA_CalcBaseAndBitshift+0x144>)
 800c760:	4293      	cmp	r3, r2
 800c762:	d013      	beq.n	800c78c <DMA_CalcBaseAndBitshift+0xa8>
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	4a30      	ldr	r2, [pc, #192]	; (800c82c <DMA_CalcBaseAndBitshift+0x148>)
 800c76a:	4293      	cmp	r3, r2
 800c76c:	d00e      	beq.n	800c78c <DMA_CalcBaseAndBitshift+0xa8>
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	4a2f      	ldr	r2, [pc, #188]	; (800c830 <DMA_CalcBaseAndBitshift+0x14c>)
 800c774:	4293      	cmp	r3, r2
 800c776:	d009      	beq.n	800c78c <DMA_CalcBaseAndBitshift+0xa8>
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	4a2d      	ldr	r2, [pc, #180]	; (800c834 <DMA_CalcBaseAndBitshift+0x150>)
 800c77e:	4293      	cmp	r3, r2
 800c780:	d004      	beq.n	800c78c <DMA_CalcBaseAndBitshift+0xa8>
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	4a2c      	ldr	r2, [pc, #176]	; (800c838 <DMA_CalcBaseAndBitshift+0x154>)
 800c788:	4293      	cmp	r3, r2
 800c78a:	d101      	bne.n	800c790 <DMA_CalcBaseAndBitshift+0xac>
 800c78c:	2301      	movs	r3, #1
 800c78e:	e000      	b.n	800c792 <DMA_CalcBaseAndBitshift+0xae>
 800c790:	2300      	movs	r3, #0
 800c792:	2b00      	cmp	r3, #0
 800c794:	d024      	beq.n	800c7e0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	b2db      	uxtb	r3, r3
 800c79c:	3b10      	subs	r3, #16
 800c79e:	4a27      	ldr	r2, [pc, #156]	; (800c83c <DMA_CalcBaseAndBitshift+0x158>)
 800c7a0:	fba2 2303 	umull	r2, r3, r2, r3
 800c7a4:	091b      	lsrs	r3, r3, #4
 800c7a6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	f003 0307 	and.w	r3, r3, #7
 800c7ae:	4a24      	ldr	r2, [pc, #144]	; (800c840 <DMA_CalcBaseAndBitshift+0x15c>)
 800c7b0:	5cd3      	ldrb	r3, [r2, r3]
 800c7b2:	461a      	mov	r2, r3
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	2b03      	cmp	r3, #3
 800c7bc:	d908      	bls.n	800c7d0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	461a      	mov	r2, r3
 800c7c4:	4b1f      	ldr	r3, [pc, #124]	; (800c844 <DMA_CalcBaseAndBitshift+0x160>)
 800c7c6:	4013      	ands	r3, r2
 800c7c8:	1d1a      	adds	r2, r3, #4
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	659a      	str	r2, [r3, #88]	; 0x58
 800c7ce:	e00d      	b.n	800c7ec <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	461a      	mov	r2, r3
 800c7d6:	4b1b      	ldr	r3, [pc, #108]	; (800c844 <DMA_CalcBaseAndBitshift+0x160>)
 800c7d8:	4013      	ands	r3, r2
 800c7da:	687a      	ldr	r2, [r7, #4]
 800c7dc:	6593      	str	r3, [r2, #88]	; 0x58
 800c7de:	e005      	b.n	800c7ec <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	3714      	adds	r7, #20
 800c7f4:	46bd      	mov	sp, r7
 800c7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7fa:	4770      	bx	lr
 800c7fc:	40020010 	.word	0x40020010
 800c800:	40020028 	.word	0x40020028
 800c804:	40020040 	.word	0x40020040
 800c808:	40020058 	.word	0x40020058
 800c80c:	40020070 	.word	0x40020070
 800c810:	40020088 	.word	0x40020088
 800c814:	400200a0 	.word	0x400200a0
 800c818:	400200b8 	.word	0x400200b8
 800c81c:	40020410 	.word	0x40020410
 800c820:	40020428 	.word	0x40020428
 800c824:	40020440 	.word	0x40020440
 800c828:	40020458 	.word	0x40020458
 800c82c:	40020470 	.word	0x40020470
 800c830:	40020488 	.word	0x40020488
 800c834:	400204a0 	.word	0x400204a0
 800c838:	400204b8 	.word	0x400204b8
 800c83c:	aaaaaaab 	.word	0xaaaaaaab
 800c840:	0803599c 	.word	0x0803599c
 800c844:	fffffc00 	.word	0xfffffc00

0800c848 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800c848:	b480      	push	{r7}
 800c84a:	b085      	sub	sp, #20
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c850:	2300      	movs	r3, #0
 800c852:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	699b      	ldr	r3, [r3, #24]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d120      	bne.n	800c89e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c860:	2b03      	cmp	r3, #3
 800c862:	d858      	bhi.n	800c916 <DMA_CheckFifoParam+0xce>
 800c864:	a201      	add	r2, pc, #4	; (adr r2, 800c86c <DMA_CheckFifoParam+0x24>)
 800c866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c86a:	bf00      	nop
 800c86c:	0800c87d 	.word	0x0800c87d
 800c870:	0800c88f 	.word	0x0800c88f
 800c874:	0800c87d 	.word	0x0800c87d
 800c878:	0800c917 	.word	0x0800c917
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c880:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c884:	2b00      	cmp	r3, #0
 800c886:	d048      	beq.n	800c91a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800c888:	2301      	movs	r3, #1
 800c88a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800c88c:	e045      	b.n	800c91a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c892:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800c896:	d142      	bne.n	800c91e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800c898:	2301      	movs	r3, #1
 800c89a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800c89c:	e03f      	b.n	800c91e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	699b      	ldr	r3, [r3, #24]
 800c8a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c8a6:	d123      	bne.n	800c8f0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8ac:	2b03      	cmp	r3, #3
 800c8ae:	d838      	bhi.n	800c922 <DMA_CheckFifoParam+0xda>
 800c8b0:	a201      	add	r2, pc, #4	; (adr r2, 800c8b8 <DMA_CheckFifoParam+0x70>)
 800c8b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8b6:	bf00      	nop
 800c8b8:	0800c8c9 	.word	0x0800c8c9
 800c8bc:	0800c8cf 	.word	0x0800c8cf
 800c8c0:	0800c8c9 	.word	0x0800c8c9
 800c8c4:	0800c8e1 	.word	0x0800c8e1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800c8c8:	2301      	movs	r3, #1
 800c8ca:	73fb      	strb	r3, [r7, #15]
        break;
 800c8cc:	e030      	b.n	800c930 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d025      	beq.n	800c926 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800c8da:	2301      	movs	r3, #1
 800c8dc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800c8de:	e022      	b.n	800c926 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8e4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800c8e8:	d11f      	bne.n	800c92a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800c8ea:	2301      	movs	r3, #1
 800c8ec:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800c8ee:	e01c      	b.n	800c92a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8f4:	2b02      	cmp	r3, #2
 800c8f6:	d902      	bls.n	800c8fe <DMA_CheckFifoParam+0xb6>
 800c8f8:	2b03      	cmp	r3, #3
 800c8fa:	d003      	beq.n	800c904 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800c8fc:	e018      	b.n	800c930 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800c8fe:	2301      	movs	r3, #1
 800c900:	73fb      	strb	r3, [r7, #15]
        break;
 800c902:	e015      	b.n	800c930 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c908:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d00e      	beq.n	800c92e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800c910:	2301      	movs	r3, #1
 800c912:	73fb      	strb	r3, [r7, #15]
    break;
 800c914:	e00b      	b.n	800c92e <DMA_CheckFifoParam+0xe6>
        break;
 800c916:	bf00      	nop
 800c918:	e00a      	b.n	800c930 <DMA_CheckFifoParam+0xe8>
        break;
 800c91a:	bf00      	nop
 800c91c:	e008      	b.n	800c930 <DMA_CheckFifoParam+0xe8>
        break;
 800c91e:	bf00      	nop
 800c920:	e006      	b.n	800c930 <DMA_CheckFifoParam+0xe8>
        break;
 800c922:	bf00      	nop
 800c924:	e004      	b.n	800c930 <DMA_CheckFifoParam+0xe8>
        break;
 800c926:	bf00      	nop
 800c928:	e002      	b.n	800c930 <DMA_CheckFifoParam+0xe8>
        break;
 800c92a:	bf00      	nop
 800c92c:	e000      	b.n	800c930 <DMA_CheckFifoParam+0xe8>
    break;
 800c92e:	bf00      	nop
    }
  }

  return status;
 800c930:	7bfb      	ldrb	r3, [r7, #15]
}
 800c932:	4618      	mov	r0, r3
 800c934:	3714      	adds	r7, #20
 800c936:	46bd      	mov	sp, r7
 800c938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c93c:	4770      	bx	lr
 800c93e:	bf00      	nop

0800c940 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800c940:	b480      	push	{r7}
 800c942:	b085      	sub	sp, #20
 800c944:	af00      	add	r7, sp, #0
 800c946:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	4a38      	ldr	r2, [pc, #224]	; (800ca34 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800c954:	4293      	cmp	r3, r2
 800c956:	d022      	beq.n	800c99e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	4a36      	ldr	r2, [pc, #216]	; (800ca38 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800c95e:	4293      	cmp	r3, r2
 800c960:	d01d      	beq.n	800c99e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	4a35      	ldr	r2, [pc, #212]	; (800ca3c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800c968:	4293      	cmp	r3, r2
 800c96a:	d018      	beq.n	800c99e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	4a33      	ldr	r2, [pc, #204]	; (800ca40 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800c972:	4293      	cmp	r3, r2
 800c974:	d013      	beq.n	800c99e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	4a32      	ldr	r2, [pc, #200]	; (800ca44 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800c97c:	4293      	cmp	r3, r2
 800c97e:	d00e      	beq.n	800c99e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	4a30      	ldr	r2, [pc, #192]	; (800ca48 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800c986:	4293      	cmp	r3, r2
 800c988:	d009      	beq.n	800c99e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	4a2f      	ldr	r2, [pc, #188]	; (800ca4c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800c990:	4293      	cmp	r3, r2
 800c992:	d004      	beq.n	800c99e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	4a2d      	ldr	r2, [pc, #180]	; (800ca50 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800c99a:	4293      	cmp	r3, r2
 800c99c:	d101      	bne.n	800c9a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800c99e:	2301      	movs	r3, #1
 800c9a0:	e000      	b.n	800c9a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d01a      	beq.n	800c9de <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	b2db      	uxtb	r3, r3
 800c9ae:	3b08      	subs	r3, #8
 800c9b0:	4a28      	ldr	r2, [pc, #160]	; (800ca54 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800c9b2:	fba2 2303 	umull	r2, r3, r2, r3
 800c9b6:	091b      	lsrs	r3, r3, #4
 800c9b8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800c9ba:	68fa      	ldr	r2, [r7, #12]
 800c9bc:	4b26      	ldr	r3, [pc, #152]	; (800ca58 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800c9be:	4413      	add	r3, r2
 800c9c0:	009b      	lsls	r3, r3, #2
 800c9c2:	461a      	mov	r2, r3
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	4a24      	ldr	r2, [pc, #144]	; (800ca5c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800c9cc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	f003 031f 	and.w	r3, r3, #31
 800c9d4:	2201      	movs	r2, #1
 800c9d6:	409a      	lsls	r2, r3
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800c9dc:	e024      	b.n	800ca28 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	b2db      	uxtb	r3, r3
 800c9e4:	3b10      	subs	r3, #16
 800c9e6:	4a1e      	ldr	r2, [pc, #120]	; (800ca60 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800c9e8:	fba2 2303 	umull	r2, r3, r2, r3
 800c9ec:	091b      	lsrs	r3, r3, #4
 800c9ee:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800c9f0:	68bb      	ldr	r3, [r7, #8]
 800c9f2:	4a1c      	ldr	r2, [pc, #112]	; (800ca64 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800c9f4:	4293      	cmp	r3, r2
 800c9f6:	d806      	bhi.n	800ca06 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800c9f8:	68bb      	ldr	r3, [r7, #8]
 800c9fa:	4a1b      	ldr	r2, [pc, #108]	; (800ca68 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800c9fc:	4293      	cmp	r3, r2
 800c9fe:	d902      	bls.n	800ca06 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	3308      	adds	r3, #8
 800ca04:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800ca06:	68fa      	ldr	r2, [r7, #12]
 800ca08:	4b18      	ldr	r3, [pc, #96]	; (800ca6c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800ca0a:	4413      	add	r3, r2
 800ca0c:	009b      	lsls	r3, r3, #2
 800ca0e:	461a      	mov	r2, r3
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	4a16      	ldr	r2, [pc, #88]	; (800ca70 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800ca18:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	f003 031f 	and.w	r3, r3, #31
 800ca20:	2201      	movs	r2, #1
 800ca22:	409a      	lsls	r2, r3
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	669a      	str	r2, [r3, #104]	; 0x68
}
 800ca28:	bf00      	nop
 800ca2a:	3714      	adds	r7, #20
 800ca2c:	46bd      	mov	sp, r7
 800ca2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca32:	4770      	bx	lr
 800ca34:	58025408 	.word	0x58025408
 800ca38:	5802541c 	.word	0x5802541c
 800ca3c:	58025430 	.word	0x58025430
 800ca40:	58025444 	.word	0x58025444
 800ca44:	58025458 	.word	0x58025458
 800ca48:	5802546c 	.word	0x5802546c
 800ca4c:	58025480 	.word	0x58025480
 800ca50:	58025494 	.word	0x58025494
 800ca54:	cccccccd 	.word	0xcccccccd
 800ca58:	16009600 	.word	0x16009600
 800ca5c:	58025880 	.word	0x58025880
 800ca60:	aaaaaaab 	.word	0xaaaaaaab
 800ca64:	400204b8 	.word	0x400204b8
 800ca68:	4002040f 	.word	0x4002040f
 800ca6c:	10008200 	.word	0x10008200
 800ca70:	40020880 	.word	0x40020880

0800ca74 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800ca74:	b480      	push	{r7}
 800ca76:	b085      	sub	sp, #20
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	685b      	ldr	r3, [r3, #4]
 800ca80:	b2db      	uxtb	r3, r3
 800ca82:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d04a      	beq.n	800cb20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	2b08      	cmp	r3, #8
 800ca8e:	d847      	bhi.n	800cb20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	4a25      	ldr	r2, [pc, #148]	; (800cb2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800ca96:	4293      	cmp	r3, r2
 800ca98:	d022      	beq.n	800cae0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	4a24      	ldr	r2, [pc, #144]	; (800cb30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800caa0:	4293      	cmp	r3, r2
 800caa2:	d01d      	beq.n	800cae0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	4a22      	ldr	r2, [pc, #136]	; (800cb34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800caaa:	4293      	cmp	r3, r2
 800caac:	d018      	beq.n	800cae0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	4a21      	ldr	r2, [pc, #132]	; (800cb38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800cab4:	4293      	cmp	r3, r2
 800cab6:	d013      	beq.n	800cae0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	4a1f      	ldr	r2, [pc, #124]	; (800cb3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800cabe:	4293      	cmp	r3, r2
 800cac0:	d00e      	beq.n	800cae0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	4a1e      	ldr	r2, [pc, #120]	; (800cb40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800cac8:	4293      	cmp	r3, r2
 800caca:	d009      	beq.n	800cae0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	4a1c      	ldr	r2, [pc, #112]	; (800cb44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800cad2:	4293      	cmp	r3, r2
 800cad4:	d004      	beq.n	800cae0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	4a1b      	ldr	r2, [pc, #108]	; (800cb48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800cadc:	4293      	cmp	r3, r2
 800cade:	d101      	bne.n	800cae4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800cae0:	2301      	movs	r3, #1
 800cae2:	e000      	b.n	800cae6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800cae4:	2300      	movs	r3, #0
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d00a      	beq.n	800cb00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800caea:	68fa      	ldr	r2, [r7, #12]
 800caec:	4b17      	ldr	r3, [pc, #92]	; (800cb4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800caee:	4413      	add	r3, r2
 800caf0:	009b      	lsls	r3, r3, #2
 800caf2:	461a      	mov	r2, r3
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	4a15      	ldr	r2, [pc, #84]	; (800cb50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800cafc:	671a      	str	r2, [r3, #112]	; 0x70
 800cafe:	e009      	b.n	800cb14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800cb00:	68fa      	ldr	r2, [r7, #12]
 800cb02:	4b14      	ldr	r3, [pc, #80]	; (800cb54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800cb04:	4413      	add	r3, r2
 800cb06:	009b      	lsls	r3, r3, #2
 800cb08:	461a      	mov	r2, r3
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	4a11      	ldr	r2, [pc, #68]	; (800cb58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800cb12:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	3b01      	subs	r3, #1
 800cb18:	2201      	movs	r2, #1
 800cb1a:	409a      	lsls	r2, r3
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800cb20:	bf00      	nop
 800cb22:	3714      	adds	r7, #20
 800cb24:	46bd      	mov	sp, r7
 800cb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb2a:	4770      	bx	lr
 800cb2c:	58025408 	.word	0x58025408
 800cb30:	5802541c 	.word	0x5802541c
 800cb34:	58025430 	.word	0x58025430
 800cb38:	58025444 	.word	0x58025444
 800cb3c:	58025458 	.word	0x58025458
 800cb40:	5802546c 	.word	0x5802546c
 800cb44:	58025480 	.word	0x58025480
 800cb48:	58025494 	.word	0x58025494
 800cb4c:	1600963f 	.word	0x1600963f
 800cb50:	58025940 	.word	0x58025940
 800cb54:	1000823f 	.word	0x1000823f
 800cb58:	40020940 	.word	0x40020940

0800cb5c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800cb5c:	b480      	push	{r7}
 800cb5e:	b089      	sub	sp, #36	; 0x24
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	6078      	str	r0, [r7, #4]
 800cb64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800cb66:	2300      	movs	r3, #0
 800cb68:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800cb6a:	4b89      	ldr	r3, [pc, #548]	; (800cd90 <HAL_GPIO_Init+0x234>)
 800cb6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800cb6e:	e194      	b.n	800ce9a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800cb70:	683b      	ldr	r3, [r7, #0]
 800cb72:	681a      	ldr	r2, [r3, #0]
 800cb74:	2101      	movs	r1, #1
 800cb76:	69fb      	ldr	r3, [r7, #28]
 800cb78:	fa01 f303 	lsl.w	r3, r1, r3
 800cb7c:	4013      	ands	r3, r2
 800cb7e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800cb80:	693b      	ldr	r3, [r7, #16]
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	f000 8186 	beq.w	800ce94 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800cb88:	683b      	ldr	r3, [r7, #0]
 800cb8a:	685b      	ldr	r3, [r3, #4]
 800cb8c:	f003 0303 	and.w	r3, r3, #3
 800cb90:	2b01      	cmp	r3, #1
 800cb92:	d005      	beq.n	800cba0 <HAL_GPIO_Init+0x44>
 800cb94:	683b      	ldr	r3, [r7, #0]
 800cb96:	685b      	ldr	r3, [r3, #4]
 800cb98:	f003 0303 	and.w	r3, r3, #3
 800cb9c:	2b02      	cmp	r3, #2
 800cb9e:	d130      	bne.n	800cc02 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	689b      	ldr	r3, [r3, #8]
 800cba4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800cba6:	69fb      	ldr	r3, [r7, #28]
 800cba8:	005b      	lsls	r3, r3, #1
 800cbaa:	2203      	movs	r2, #3
 800cbac:	fa02 f303 	lsl.w	r3, r2, r3
 800cbb0:	43db      	mvns	r3, r3
 800cbb2:	69ba      	ldr	r2, [r7, #24]
 800cbb4:	4013      	ands	r3, r2
 800cbb6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800cbb8:	683b      	ldr	r3, [r7, #0]
 800cbba:	68da      	ldr	r2, [r3, #12]
 800cbbc:	69fb      	ldr	r3, [r7, #28]
 800cbbe:	005b      	lsls	r3, r3, #1
 800cbc0:	fa02 f303 	lsl.w	r3, r2, r3
 800cbc4:	69ba      	ldr	r2, [r7, #24]
 800cbc6:	4313      	orrs	r3, r2
 800cbc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	69ba      	ldr	r2, [r7, #24]
 800cbce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	685b      	ldr	r3, [r3, #4]
 800cbd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800cbd6:	2201      	movs	r2, #1
 800cbd8:	69fb      	ldr	r3, [r7, #28]
 800cbda:	fa02 f303 	lsl.w	r3, r2, r3
 800cbde:	43db      	mvns	r3, r3
 800cbe0:	69ba      	ldr	r2, [r7, #24]
 800cbe2:	4013      	ands	r3, r2
 800cbe4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800cbe6:	683b      	ldr	r3, [r7, #0]
 800cbe8:	685b      	ldr	r3, [r3, #4]
 800cbea:	091b      	lsrs	r3, r3, #4
 800cbec:	f003 0201 	and.w	r2, r3, #1
 800cbf0:	69fb      	ldr	r3, [r7, #28]
 800cbf2:	fa02 f303 	lsl.w	r3, r2, r3
 800cbf6:	69ba      	ldr	r2, [r7, #24]
 800cbf8:	4313      	orrs	r3, r2
 800cbfa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	69ba      	ldr	r2, [r7, #24]
 800cc00:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800cc02:	683b      	ldr	r3, [r7, #0]
 800cc04:	685b      	ldr	r3, [r3, #4]
 800cc06:	f003 0303 	and.w	r3, r3, #3
 800cc0a:	2b03      	cmp	r3, #3
 800cc0c:	d017      	beq.n	800cc3e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	68db      	ldr	r3, [r3, #12]
 800cc12:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800cc14:	69fb      	ldr	r3, [r7, #28]
 800cc16:	005b      	lsls	r3, r3, #1
 800cc18:	2203      	movs	r2, #3
 800cc1a:	fa02 f303 	lsl.w	r3, r2, r3
 800cc1e:	43db      	mvns	r3, r3
 800cc20:	69ba      	ldr	r2, [r7, #24]
 800cc22:	4013      	ands	r3, r2
 800cc24:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800cc26:	683b      	ldr	r3, [r7, #0]
 800cc28:	689a      	ldr	r2, [r3, #8]
 800cc2a:	69fb      	ldr	r3, [r7, #28]
 800cc2c:	005b      	lsls	r3, r3, #1
 800cc2e:	fa02 f303 	lsl.w	r3, r2, r3
 800cc32:	69ba      	ldr	r2, [r7, #24]
 800cc34:	4313      	orrs	r3, r2
 800cc36:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	69ba      	ldr	r2, [r7, #24]
 800cc3c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800cc3e:	683b      	ldr	r3, [r7, #0]
 800cc40:	685b      	ldr	r3, [r3, #4]
 800cc42:	f003 0303 	and.w	r3, r3, #3
 800cc46:	2b02      	cmp	r3, #2
 800cc48:	d123      	bne.n	800cc92 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800cc4a:	69fb      	ldr	r3, [r7, #28]
 800cc4c:	08da      	lsrs	r2, r3, #3
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	3208      	adds	r2, #8
 800cc52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800cc58:	69fb      	ldr	r3, [r7, #28]
 800cc5a:	f003 0307 	and.w	r3, r3, #7
 800cc5e:	009b      	lsls	r3, r3, #2
 800cc60:	220f      	movs	r2, #15
 800cc62:	fa02 f303 	lsl.w	r3, r2, r3
 800cc66:	43db      	mvns	r3, r3
 800cc68:	69ba      	ldr	r2, [r7, #24]
 800cc6a:	4013      	ands	r3, r2
 800cc6c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800cc6e:	683b      	ldr	r3, [r7, #0]
 800cc70:	691a      	ldr	r2, [r3, #16]
 800cc72:	69fb      	ldr	r3, [r7, #28]
 800cc74:	f003 0307 	and.w	r3, r3, #7
 800cc78:	009b      	lsls	r3, r3, #2
 800cc7a:	fa02 f303 	lsl.w	r3, r2, r3
 800cc7e:	69ba      	ldr	r2, [r7, #24]
 800cc80:	4313      	orrs	r3, r2
 800cc82:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800cc84:	69fb      	ldr	r3, [r7, #28]
 800cc86:	08da      	lsrs	r2, r3, #3
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	3208      	adds	r2, #8
 800cc8c:	69b9      	ldr	r1, [r7, #24]
 800cc8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800cc98:	69fb      	ldr	r3, [r7, #28]
 800cc9a:	005b      	lsls	r3, r3, #1
 800cc9c:	2203      	movs	r2, #3
 800cc9e:	fa02 f303 	lsl.w	r3, r2, r3
 800cca2:	43db      	mvns	r3, r3
 800cca4:	69ba      	ldr	r2, [r7, #24]
 800cca6:	4013      	ands	r3, r2
 800cca8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800ccaa:	683b      	ldr	r3, [r7, #0]
 800ccac:	685b      	ldr	r3, [r3, #4]
 800ccae:	f003 0203 	and.w	r2, r3, #3
 800ccb2:	69fb      	ldr	r3, [r7, #28]
 800ccb4:	005b      	lsls	r3, r3, #1
 800ccb6:	fa02 f303 	lsl.w	r3, r2, r3
 800ccba:	69ba      	ldr	r2, [r7, #24]
 800ccbc:	4313      	orrs	r3, r2
 800ccbe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	69ba      	ldr	r2, [r7, #24]
 800ccc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800ccc6:	683b      	ldr	r3, [r7, #0]
 800ccc8:	685b      	ldr	r3, [r3, #4]
 800ccca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	f000 80e0 	beq.w	800ce94 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ccd4:	4b2f      	ldr	r3, [pc, #188]	; (800cd94 <HAL_GPIO_Init+0x238>)
 800ccd6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ccda:	4a2e      	ldr	r2, [pc, #184]	; (800cd94 <HAL_GPIO_Init+0x238>)
 800ccdc:	f043 0302 	orr.w	r3, r3, #2
 800cce0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800cce4:	4b2b      	ldr	r3, [pc, #172]	; (800cd94 <HAL_GPIO_Init+0x238>)
 800cce6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ccea:	f003 0302 	and.w	r3, r3, #2
 800ccee:	60fb      	str	r3, [r7, #12]
 800ccf0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800ccf2:	4a29      	ldr	r2, [pc, #164]	; (800cd98 <HAL_GPIO_Init+0x23c>)
 800ccf4:	69fb      	ldr	r3, [r7, #28]
 800ccf6:	089b      	lsrs	r3, r3, #2
 800ccf8:	3302      	adds	r3, #2
 800ccfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ccfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800cd00:	69fb      	ldr	r3, [r7, #28]
 800cd02:	f003 0303 	and.w	r3, r3, #3
 800cd06:	009b      	lsls	r3, r3, #2
 800cd08:	220f      	movs	r2, #15
 800cd0a:	fa02 f303 	lsl.w	r3, r2, r3
 800cd0e:	43db      	mvns	r3, r3
 800cd10:	69ba      	ldr	r2, [r7, #24]
 800cd12:	4013      	ands	r3, r2
 800cd14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	4a20      	ldr	r2, [pc, #128]	; (800cd9c <HAL_GPIO_Init+0x240>)
 800cd1a:	4293      	cmp	r3, r2
 800cd1c:	d052      	beq.n	800cdc4 <HAL_GPIO_Init+0x268>
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	4a1f      	ldr	r2, [pc, #124]	; (800cda0 <HAL_GPIO_Init+0x244>)
 800cd22:	4293      	cmp	r3, r2
 800cd24:	d031      	beq.n	800cd8a <HAL_GPIO_Init+0x22e>
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	4a1e      	ldr	r2, [pc, #120]	; (800cda4 <HAL_GPIO_Init+0x248>)
 800cd2a:	4293      	cmp	r3, r2
 800cd2c:	d02b      	beq.n	800cd86 <HAL_GPIO_Init+0x22a>
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	4a1d      	ldr	r2, [pc, #116]	; (800cda8 <HAL_GPIO_Init+0x24c>)
 800cd32:	4293      	cmp	r3, r2
 800cd34:	d025      	beq.n	800cd82 <HAL_GPIO_Init+0x226>
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	4a1c      	ldr	r2, [pc, #112]	; (800cdac <HAL_GPIO_Init+0x250>)
 800cd3a:	4293      	cmp	r3, r2
 800cd3c:	d01f      	beq.n	800cd7e <HAL_GPIO_Init+0x222>
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	4a1b      	ldr	r2, [pc, #108]	; (800cdb0 <HAL_GPIO_Init+0x254>)
 800cd42:	4293      	cmp	r3, r2
 800cd44:	d019      	beq.n	800cd7a <HAL_GPIO_Init+0x21e>
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	4a1a      	ldr	r2, [pc, #104]	; (800cdb4 <HAL_GPIO_Init+0x258>)
 800cd4a:	4293      	cmp	r3, r2
 800cd4c:	d013      	beq.n	800cd76 <HAL_GPIO_Init+0x21a>
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	4a19      	ldr	r2, [pc, #100]	; (800cdb8 <HAL_GPIO_Init+0x25c>)
 800cd52:	4293      	cmp	r3, r2
 800cd54:	d00d      	beq.n	800cd72 <HAL_GPIO_Init+0x216>
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	4a18      	ldr	r2, [pc, #96]	; (800cdbc <HAL_GPIO_Init+0x260>)
 800cd5a:	4293      	cmp	r3, r2
 800cd5c:	d007      	beq.n	800cd6e <HAL_GPIO_Init+0x212>
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	4a17      	ldr	r2, [pc, #92]	; (800cdc0 <HAL_GPIO_Init+0x264>)
 800cd62:	4293      	cmp	r3, r2
 800cd64:	d101      	bne.n	800cd6a <HAL_GPIO_Init+0x20e>
 800cd66:	2309      	movs	r3, #9
 800cd68:	e02d      	b.n	800cdc6 <HAL_GPIO_Init+0x26a>
 800cd6a:	230a      	movs	r3, #10
 800cd6c:	e02b      	b.n	800cdc6 <HAL_GPIO_Init+0x26a>
 800cd6e:	2308      	movs	r3, #8
 800cd70:	e029      	b.n	800cdc6 <HAL_GPIO_Init+0x26a>
 800cd72:	2307      	movs	r3, #7
 800cd74:	e027      	b.n	800cdc6 <HAL_GPIO_Init+0x26a>
 800cd76:	2306      	movs	r3, #6
 800cd78:	e025      	b.n	800cdc6 <HAL_GPIO_Init+0x26a>
 800cd7a:	2305      	movs	r3, #5
 800cd7c:	e023      	b.n	800cdc6 <HAL_GPIO_Init+0x26a>
 800cd7e:	2304      	movs	r3, #4
 800cd80:	e021      	b.n	800cdc6 <HAL_GPIO_Init+0x26a>
 800cd82:	2303      	movs	r3, #3
 800cd84:	e01f      	b.n	800cdc6 <HAL_GPIO_Init+0x26a>
 800cd86:	2302      	movs	r3, #2
 800cd88:	e01d      	b.n	800cdc6 <HAL_GPIO_Init+0x26a>
 800cd8a:	2301      	movs	r3, #1
 800cd8c:	e01b      	b.n	800cdc6 <HAL_GPIO_Init+0x26a>
 800cd8e:	bf00      	nop
 800cd90:	58000080 	.word	0x58000080
 800cd94:	58024400 	.word	0x58024400
 800cd98:	58000400 	.word	0x58000400
 800cd9c:	58020000 	.word	0x58020000
 800cda0:	58020400 	.word	0x58020400
 800cda4:	58020800 	.word	0x58020800
 800cda8:	58020c00 	.word	0x58020c00
 800cdac:	58021000 	.word	0x58021000
 800cdb0:	58021400 	.word	0x58021400
 800cdb4:	58021800 	.word	0x58021800
 800cdb8:	58021c00 	.word	0x58021c00
 800cdbc:	58022000 	.word	0x58022000
 800cdc0:	58022400 	.word	0x58022400
 800cdc4:	2300      	movs	r3, #0
 800cdc6:	69fa      	ldr	r2, [r7, #28]
 800cdc8:	f002 0203 	and.w	r2, r2, #3
 800cdcc:	0092      	lsls	r2, r2, #2
 800cdce:	4093      	lsls	r3, r2
 800cdd0:	69ba      	ldr	r2, [r7, #24]
 800cdd2:	4313      	orrs	r3, r2
 800cdd4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800cdd6:	4938      	ldr	r1, [pc, #224]	; (800ceb8 <HAL_GPIO_Init+0x35c>)
 800cdd8:	69fb      	ldr	r3, [r7, #28]
 800cdda:	089b      	lsrs	r3, r3, #2
 800cddc:	3302      	adds	r3, #2
 800cdde:	69ba      	ldr	r2, [r7, #24]
 800cde0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800cde4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800cdec:	693b      	ldr	r3, [r7, #16]
 800cdee:	43db      	mvns	r3, r3
 800cdf0:	69ba      	ldr	r2, [r7, #24]
 800cdf2:	4013      	ands	r3, r2
 800cdf4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800cdf6:	683b      	ldr	r3, [r7, #0]
 800cdf8:	685b      	ldr	r3, [r3, #4]
 800cdfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d003      	beq.n	800ce0a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800ce02:	69ba      	ldr	r2, [r7, #24]
 800ce04:	693b      	ldr	r3, [r7, #16]
 800ce06:	4313      	orrs	r3, r2
 800ce08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800ce0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ce0e:	69bb      	ldr	r3, [r7, #24]
 800ce10:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800ce12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ce16:	685b      	ldr	r3, [r3, #4]
 800ce18:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800ce1a:	693b      	ldr	r3, [r7, #16]
 800ce1c:	43db      	mvns	r3, r3
 800ce1e:	69ba      	ldr	r2, [r7, #24]
 800ce20:	4013      	ands	r3, r2
 800ce22:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800ce24:	683b      	ldr	r3, [r7, #0]
 800ce26:	685b      	ldr	r3, [r3, #4]
 800ce28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d003      	beq.n	800ce38 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800ce30:	69ba      	ldr	r2, [r7, #24]
 800ce32:	693b      	ldr	r3, [r7, #16]
 800ce34:	4313      	orrs	r3, r2
 800ce36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800ce38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ce3c:	69bb      	ldr	r3, [r7, #24]
 800ce3e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800ce40:	697b      	ldr	r3, [r7, #20]
 800ce42:	685b      	ldr	r3, [r3, #4]
 800ce44:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800ce46:	693b      	ldr	r3, [r7, #16]
 800ce48:	43db      	mvns	r3, r3
 800ce4a:	69ba      	ldr	r2, [r7, #24]
 800ce4c:	4013      	ands	r3, r2
 800ce4e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800ce50:	683b      	ldr	r3, [r7, #0]
 800ce52:	685b      	ldr	r3, [r3, #4]
 800ce54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d003      	beq.n	800ce64 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800ce5c:	69ba      	ldr	r2, [r7, #24]
 800ce5e:	693b      	ldr	r3, [r7, #16]
 800ce60:	4313      	orrs	r3, r2
 800ce62:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800ce64:	697b      	ldr	r3, [r7, #20]
 800ce66:	69ba      	ldr	r2, [r7, #24]
 800ce68:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800ce6a:	697b      	ldr	r3, [r7, #20]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800ce70:	693b      	ldr	r3, [r7, #16]
 800ce72:	43db      	mvns	r3, r3
 800ce74:	69ba      	ldr	r2, [r7, #24]
 800ce76:	4013      	ands	r3, r2
 800ce78:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800ce7a:	683b      	ldr	r3, [r7, #0]
 800ce7c:	685b      	ldr	r3, [r3, #4]
 800ce7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d003      	beq.n	800ce8e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800ce86:	69ba      	ldr	r2, [r7, #24]
 800ce88:	693b      	ldr	r3, [r7, #16]
 800ce8a:	4313      	orrs	r3, r2
 800ce8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800ce8e:	697b      	ldr	r3, [r7, #20]
 800ce90:	69ba      	ldr	r2, [r7, #24]
 800ce92:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800ce94:	69fb      	ldr	r3, [r7, #28]
 800ce96:	3301      	adds	r3, #1
 800ce98:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800ce9a:	683b      	ldr	r3, [r7, #0]
 800ce9c:	681a      	ldr	r2, [r3, #0]
 800ce9e:	69fb      	ldr	r3, [r7, #28]
 800cea0:	fa22 f303 	lsr.w	r3, r2, r3
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	f47f ae63 	bne.w	800cb70 <HAL_GPIO_Init+0x14>
  }
}
 800ceaa:	bf00      	nop
 800ceac:	bf00      	nop
 800ceae:	3724      	adds	r7, #36	; 0x24
 800ceb0:	46bd      	mov	sp, r7
 800ceb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb6:	4770      	bx	lr
 800ceb8:	58000400 	.word	0x58000400

0800cebc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800cebc:	b480      	push	{r7}
 800cebe:	b083      	sub	sp, #12
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	6078      	str	r0, [r7, #4]
 800cec4:	460b      	mov	r3, r1
 800cec6:	807b      	strh	r3, [r7, #2]
 800cec8:	4613      	mov	r3, r2
 800ceca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800cecc:	787b      	ldrb	r3, [r7, #1]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d003      	beq.n	800ceda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800ced2:	887a      	ldrh	r2, [r7, #2]
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800ced8:	e003      	b.n	800cee2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800ceda:	887b      	ldrh	r3, [r7, #2]
 800cedc:	041a      	lsls	r2, r3, #16
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	619a      	str	r2, [r3, #24]
}
 800cee2:	bf00      	nop
 800cee4:	370c      	adds	r7, #12
 800cee6:	46bd      	mov	sp, r7
 800cee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceec:	4770      	bx	lr
	...

0800cef0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800cef0:	b580      	push	{r7, lr}
 800cef2:	b082      	sub	sp, #8
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d101      	bne.n	800cf02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800cefe:	2301      	movs	r3, #1
 800cf00:	e07f      	b.n	800d002 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cf08:	b2db      	uxtb	r3, r3
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d106      	bne.n	800cf1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	2200      	movs	r2, #0
 800cf12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800cf16:	6878      	ldr	r0, [r7, #4]
 800cf18:	f7fb fcea 	bl	80088f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	2224      	movs	r2, #36	; 0x24
 800cf20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	681a      	ldr	r2, [r3, #0]
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	f022 0201 	bic.w	r2, r2, #1
 800cf32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	685a      	ldr	r2, [r3, #4]
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800cf40:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	689a      	ldr	r2, [r3, #8]
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800cf50:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	68db      	ldr	r3, [r3, #12]
 800cf56:	2b01      	cmp	r3, #1
 800cf58:	d107      	bne.n	800cf6a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	689a      	ldr	r2, [r3, #8]
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cf66:	609a      	str	r2, [r3, #8]
 800cf68:	e006      	b.n	800cf78 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	689a      	ldr	r2, [r3, #8]
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800cf76:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	68db      	ldr	r3, [r3, #12]
 800cf7c:	2b02      	cmp	r3, #2
 800cf7e:	d104      	bne.n	800cf8a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cf88:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	6859      	ldr	r1, [r3, #4]
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	681a      	ldr	r2, [r3, #0]
 800cf94:	4b1d      	ldr	r3, [pc, #116]	; (800d00c <HAL_I2C_Init+0x11c>)
 800cf96:	430b      	orrs	r3, r1
 800cf98:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	68da      	ldr	r2, [r3, #12]
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800cfa8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	691a      	ldr	r2, [r3, #16]
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	695b      	ldr	r3, [r3, #20]
 800cfb2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	699b      	ldr	r3, [r3, #24]
 800cfba:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	430a      	orrs	r2, r1
 800cfc2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	69d9      	ldr	r1, [r3, #28]
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	6a1a      	ldr	r2, [r3, #32]
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	430a      	orrs	r2, r1
 800cfd2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	681a      	ldr	r2, [r3, #0]
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	f042 0201 	orr.w	r2, r2, #1
 800cfe2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	2200      	movs	r2, #0
 800cfe8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	2220      	movs	r2, #32
 800cfee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	2200      	movs	r2, #0
 800cff6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	2200      	movs	r2, #0
 800cffc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800d000:	2300      	movs	r3, #0
}
 800d002:	4618      	mov	r0, r3
 800d004:	3708      	adds	r7, #8
 800d006:	46bd      	mov	sp, r7
 800d008:	bd80      	pop	{r7, pc}
 800d00a:	bf00      	nop
 800d00c:	02008000 	.word	0x02008000

0800d010 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800d010:	b580      	push	{r7, lr}
 800d012:	b084      	sub	sp, #16
 800d014:	af00      	add	r7, sp, #0
 800d016:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	699b      	ldr	r3, [r3, #24]
 800d01e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d005      	beq.n	800d03c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d034:	68ba      	ldr	r2, [r7, #8]
 800d036:	68f9      	ldr	r1, [r7, #12]
 800d038:	6878      	ldr	r0, [r7, #4]
 800d03a:	4798      	blx	r3
  }
}
 800d03c:	bf00      	nop
 800d03e:	3710      	adds	r7, #16
 800d040:	46bd      	mov	sp, r7
 800d042:	bd80      	pop	{r7, pc}

0800d044 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800d044:	b580      	push	{r7, lr}
 800d046:	b086      	sub	sp, #24
 800d048:	af00      	add	r7, sp, #0
 800d04a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	699b      	ldr	r3, [r3, #24]
 800d052:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800d05c:	697b      	ldr	r3, [r7, #20]
 800d05e:	0a1b      	lsrs	r3, r3, #8
 800d060:	f003 0301 	and.w	r3, r3, #1
 800d064:	2b00      	cmp	r3, #0
 800d066:	d010      	beq.n	800d08a <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800d068:	693b      	ldr	r3, [r7, #16]
 800d06a:	09db      	lsrs	r3, r3, #7
 800d06c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800d070:	2b00      	cmp	r3, #0
 800d072:	d00a      	beq.n	800d08a <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d078:	f043 0201 	orr.w	r2, r3, #1
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d088:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800d08a:	697b      	ldr	r3, [r7, #20]
 800d08c:	0a9b      	lsrs	r3, r3, #10
 800d08e:	f003 0301 	and.w	r3, r3, #1
 800d092:	2b00      	cmp	r3, #0
 800d094:	d010      	beq.n	800d0b8 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800d096:	693b      	ldr	r3, [r7, #16]
 800d098:	09db      	lsrs	r3, r3, #7
 800d09a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d00a      	beq.n	800d0b8 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d0a6:	f043 0208 	orr.w	r2, r3, #8
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d0b6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800d0b8:	697b      	ldr	r3, [r7, #20]
 800d0ba:	0a5b      	lsrs	r3, r3, #9
 800d0bc:	f003 0301 	and.w	r3, r3, #1
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d010      	beq.n	800d0e6 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800d0c4:	693b      	ldr	r3, [r7, #16]
 800d0c6:	09db      	lsrs	r3, r3, #7
 800d0c8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d00a      	beq.n	800d0e6 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d0d4:	f043 0202 	orr.w	r2, r3, #2
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d0e4:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d0ea:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	f003 030b 	and.w	r3, r3, #11
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d003      	beq.n	800d0fe <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800d0f6:	68f9      	ldr	r1, [r7, #12]
 800d0f8:	6878      	ldr	r0, [r7, #4]
 800d0fa:	f000 fc77 	bl	800d9ec <I2C_ITError>
  }
}
 800d0fe:	bf00      	nop
 800d100:	3718      	adds	r7, #24
 800d102:	46bd      	mov	sp, r7
 800d104:	bd80      	pop	{r7, pc}

0800d106 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d106:	b480      	push	{r7}
 800d108:	b083      	sub	sp, #12
 800d10a:	af00      	add	r7, sp, #0
 800d10c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800d10e:	bf00      	nop
 800d110:	370c      	adds	r7, #12
 800d112:	46bd      	mov	sp, r7
 800d114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d118:	4770      	bx	lr

0800d11a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d11a:	b480      	push	{r7}
 800d11c:	b083      	sub	sp, #12
 800d11e:	af00      	add	r7, sp, #0
 800d120:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800d122:	bf00      	nop
 800d124:	370c      	adds	r7, #12
 800d126:	46bd      	mov	sp, r7
 800d128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d12c:	4770      	bx	lr

0800d12e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800d12e:	b480      	push	{r7}
 800d130:	b083      	sub	sp, #12
 800d132:	af00      	add	r7, sp, #0
 800d134:	6078      	str	r0, [r7, #4]
 800d136:	460b      	mov	r3, r1
 800d138:	70fb      	strb	r3, [r7, #3]
 800d13a:	4613      	mov	r3, r2
 800d13c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800d13e:	bf00      	nop
 800d140:	370c      	adds	r7, #12
 800d142:	46bd      	mov	sp, r7
 800d144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d148:	4770      	bx	lr

0800d14a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d14a:	b480      	push	{r7}
 800d14c:	b083      	sub	sp, #12
 800d14e:	af00      	add	r7, sp, #0
 800d150:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800d152:	bf00      	nop
 800d154:	370c      	adds	r7, #12
 800d156:	46bd      	mov	sp, r7
 800d158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d15c:	4770      	bx	lr

0800d15e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800d15e:	b480      	push	{r7}
 800d160:	b083      	sub	sp, #12
 800d162:	af00      	add	r7, sp, #0
 800d164:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800d166:	bf00      	nop
 800d168:	370c      	adds	r7, #12
 800d16a:	46bd      	mov	sp, r7
 800d16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d170:	4770      	bx	lr

0800d172 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d172:	b480      	push	{r7}
 800d174:	b083      	sub	sp, #12
 800d176:	af00      	add	r7, sp, #0
 800d178:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800d17a:	bf00      	nop
 800d17c:	370c      	adds	r7, #12
 800d17e:	46bd      	mov	sp, r7
 800d180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d184:	4770      	bx	lr

0800d186 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800d186:	b580      	push	{r7, lr}
 800d188:	b086      	sub	sp, #24
 800d18a:	af00      	add	r7, sp, #0
 800d18c:	60f8      	str	r0, [r7, #12]
 800d18e:	60b9      	str	r1, [r7, #8]
 800d190:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d196:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800d198:	68bb      	ldr	r3, [r7, #8]
 800d19a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d1a2:	2b01      	cmp	r3, #1
 800d1a4:	d101      	bne.n	800d1aa <I2C_Slave_ISR_IT+0x24>
 800d1a6:	2302      	movs	r3, #2
 800d1a8:	e0ec      	b.n	800d384 <I2C_Slave_ISR_IT+0x1fe>
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	2201      	movs	r2, #1
 800d1ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800d1b2:	693b      	ldr	r3, [r7, #16]
 800d1b4:	095b      	lsrs	r3, r3, #5
 800d1b6:	f003 0301 	and.w	r3, r3, #1
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d009      	beq.n	800d1d2 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	095b      	lsrs	r3, r3, #5
 800d1c2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d003      	beq.n	800d1d2 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800d1ca:	6939      	ldr	r1, [r7, #16]
 800d1cc:	68f8      	ldr	r0, [r7, #12]
 800d1ce:	f000 f9bf 	bl	800d550 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800d1d2:	693b      	ldr	r3, [r7, #16]
 800d1d4:	091b      	lsrs	r3, r3, #4
 800d1d6:	f003 0301 	and.w	r3, r3, #1
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d04d      	beq.n	800d27a <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	091b      	lsrs	r3, r3, #4
 800d1e2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d047      	beq.n	800d27a <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d1ee:	b29b      	uxth	r3, r3
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d128      	bne.n	800d246 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d1fa:	b2db      	uxtb	r3, r3
 800d1fc:	2b28      	cmp	r3, #40	; 0x28
 800d1fe:	d108      	bne.n	800d212 <I2C_Slave_ISR_IT+0x8c>
 800d200:	697b      	ldr	r3, [r7, #20]
 800d202:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d206:	d104      	bne.n	800d212 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800d208:	6939      	ldr	r1, [r7, #16]
 800d20a:	68f8      	ldr	r0, [r7, #12]
 800d20c:	f000 fb98 	bl	800d940 <I2C_ITListenCplt>
 800d210:	e032      	b.n	800d278 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d218:	b2db      	uxtb	r3, r3
 800d21a:	2b29      	cmp	r3, #41	; 0x29
 800d21c:	d10e      	bne.n	800d23c <I2C_Slave_ISR_IT+0xb6>
 800d21e:	697b      	ldr	r3, [r7, #20]
 800d220:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d224:	d00a      	beq.n	800d23c <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	2210      	movs	r2, #16
 800d22c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800d22e:	68f8      	ldr	r0, [r7, #12]
 800d230:	f000 fcd3 	bl	800dbda <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800d234:	68f8      	ldr	r0, [r7, #12]
 800d236:	f000 f92d 	bl	800d494 <I2C_ITSlaveSeqCplt>
 800d23a:	e01d      	b.n	800d278 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	2210      	movs	r2, #16
 800d242:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800d244:	e096      	b.n	800d374 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	2210      	movs	r2, #16
 800d24c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d252:	f043 0204 	orr.w	r2, r3, #4
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800d25a:	697b      	ldr	r3, [r7, #20]
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d004      	beq.n	800d26a <I2C_Slave_ISR_IT+0xe4>
 800d260:	697b      	ldr	r3, [r7, #20]
 800d262:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d266:	f040 8085 	bne.w	800d374 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d26e:	4619      	mov	r1, r3
 800d270:	68f8      	ldr	r0, [r7, #12]
 800d272:	f000 fbbb 	bl	800d9ec <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800d276:	e07d      	b.n	800d374 <I2C_Slave_ISR_IT+0x1ee>
 800d278:	e07c      	b.n	800d374 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800d27a:	693b      	ldr	r3, [r7, #16]
 800d27c:	089b      	lsrs	r3, r3, #2
 800d27e:	f003 0301 	and.w	r3, r3, #1
 800d282:	2b00      	cmp	r3, #0
 800d284:	d030      	beq.n	800d2e8 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	089b      	lsrs	r3, r3, #2
 800d28a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d02a      	beq.n	800d2e8 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d296:	b29b      	uxth	r3, r3
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d018      	beq.n	800d2ce <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2a6:	b2d2      	uxtb	r2, r2
 800d2a8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2ae:	1c5a      	adds	r2, r3, #1
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d2b8:	3b01      	subs	r3, #1
 800d2ba:	b29a      	uxth	r2, r3
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d2c4:	b29b      	uxth	r3, r3
 800d2c6:	3b01      	subs	r3, #1
 800d2c8:	b29a      	uxth	r2, r3
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d2d2:	b29b      	uxth	r3, r3
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d14f      	bne.n	800d378 <I2C_Slave_ISR_IT+0x1f2>
 800d2d8:	697b      	ldr	r3, [r7, #20]
 800d2da:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d2de:	d04b      	beq.n	800d378 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800d2e0:	68f8      	ldr	r0, [r7, #12]
 800d2e2:	f000 f8d7 	bl	800d494 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800d2e6:	e047      	b.n	800d378 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800d2e8:	693b      	ldr	r3, [r7, #16]
 800d2ea:	08db      	lsrs	r3, r3, #3
 800d2ec:	f003 0301 	and.w	r3, r3, #1
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d00a      	beq.n	800d30a <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	08db      	lsrs	r3, r3, #3
 800d2f8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d004      	beq.n	800d30a <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800d300:	6939      	ldr	r1, [r7, #16]
 800d302:	68f8      	ldr	r0, [r7, #12]
 800d304:	f000 f842 	bl	800d38c <I2C_ITAddrCplt>
 800d308:	e037      	b.n	800d37a <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800d30a:	693b      	ldr	r3, [r7, #16]
 800d30c:	085b      	lsrs	r3, r3, #1
 800d30e:	f003 0301 	and.w	r3, r3, #1
 800d312:	2b00      	cmp	r3, #0
 800d314:	d031      	beq.n	800d37a <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	085b      	lsrs	r3, r3, #1
 800d31a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d02b      	beq.n	800d37a <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d326:	b29b      	uxth	r3, r3
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d018      	beq.n	800d35e <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d330:	781a      	ldrb	r2, [r3, #0]
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d33c:	1c5a      	adds	r2, r3, #1
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d346:	b29b      	uxth	r3, r3
 800d348:	3b01      	subs	r3, #1
 800d34a:	b29a      	uxth	r2, r3
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d354:	3b01      	subs	r3, #1
 800d356:	b29a      	uxth	r2, r3
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	851a      	strh	r2, [r3, #40]	; 0x28
 800d35c:	e00d      	b.n	800d37a <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800d35e:	697b      	ldr	r3, [r7, #20]
 800d360:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d364:	d002      	beq.n	800d36c <I2C_Slave_ISR_IT+0x1e6>
 800d366:	697b      	ldr	r3, [r7, #20]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d106      	bne.n	800d37a <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800d36c:	68f8      	ldr	r0, [r7, #12]
 800d36e:	f000 f891 	bl	800d494 <I2C_ITSlaveSeqCplt>
 800d372:	e002      	b.n	800d37a <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 800d374:	bf00      	nop
 800d376:	e000      	b.n	800d37a <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 800d378:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	2200      	movs	r2, #0
 800d37e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800d382:	2300      	movs	r3, #0
}
 800d384:	4618      	mov	r0, r3
 800d386:	3718      	adds	r7, #24
 800d388:	46bd      	mov	sp, r7
 800d38a:	bd80      	pop	{r7, pc}

0800d38c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800d38c:	b580      	push	{r7, lr}
 800d38e:	b084      	sub	sp, #16
 800d390:	af00      	add	r7, sp, #0
 800d392:	6078      	str	r0, [r7, #4]
 800d394:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d39c:	b2db      	uxtb	r3, r3
 800d39e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800d3a2:	2b28      	cmp	r3, #40	; 0x28
 800d3a4:	d16a      	bne.n	800d47c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	699b      	ldr	r3, [r3, #24]
 800d3ac:	0c1b      	lsrs	r3, r3, #16
 800d3ae:	b2db      	uxtb	r3, r3
 800d3b0:	f003 0301 	and.w	r3, r3, #1
 800d3b4:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	699b      	ldr	r3, [r3, #24]
 800d3bc:	0c1b      	lsrs	r3, r3, #16
 800d3be:	b29b      	uxth	r3, r3
 800d3c0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800d3c4:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	689b      	ldr	r3, [r3, #8]
 800d3cc:	b29b      	uxth	r3, r3
 800d3ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d3d2:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	68db      	ldr	r3, [r3, #12]
 800d3da:	b29b      	uxth	r3, r3
 800d3dc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800d3e0:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	68db      	ldr	r3, [r3, #12]
 800d3e6:	2b02      	cmp	r3, #2
 800d3e8:	d138      	bne.n	800d45c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800d3ea:	897b      	ldrh	r3, [r7, #10]
 800d3ec:	09db      	lsrs	r3, r3, #7
 800d3ee:	b29a      	uxth	r2, r3
 800d3f0:	89bb      	ldrh	r3, [r7, #12]
 800d3f2:	4053      	eors	r3, r2
 800d3f4:	b29b      	uxth	r3, r3
 800d3f6:	f003 0306 	and.w	r3, r3, #6
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d11c      	bne.n	800d438 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800d3fe:	897b      	ldrh	r3, [r7, #10]
 800d400:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d406:	1c5a      	adds	r2, r3, #1
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d410:	2b02      	cmp	r3, #2
 800d412:	d13b      	bne.n	800d48c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	2200      	movs	r2, #0
 800d418:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	2208      	movs	r2, #8
 800d420:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	2200      	movs	r2, #0
 800d426:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800d42a:	89ba      	ldrh	r2, [r7, #12]
 800d42c:	7bfb      	ldrb	r3, [r7, #15]
 800d42e:	4619      	mov	r1, r3
 800d430:	6878      	ldr	r0, [r7, #4]
 800d432:	f7ff fe7c 	bl	800d12e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800d436:	e029      	b.n	800d48c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800d438:	893b      	ldrh	r3, [r7, #8]
 800d43a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800d43c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800d440:	6878      	ldr	r0, [r7, #4]
 800d442:	f000 fc0c 	bl	800dc5e <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	2200      	movs	r2, #0
 800d44a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800d44e:	89ba      	ldrh	r2, [r7, #12]
 800d450:	7bfb      	ldrb	r3, [r7, #15]
 800d452:	4619      	mov	r1, r3
 800d454:	6878      	ldr	r0, [r7, #4]
 800d456:	f7ff fe6a 	bl	800d12e <HAL_I2C_AddrCallback>
}
 800d45a:	e017      	b.n	800d48c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800d45c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800d460:	6878      	ldr	r0, [r7, #4]
 800d462:	f000 fbfc 	bl	800dc5e <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	2200      	movs	r2, #0
 800d46a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800d46e:	89ba      	ldrh	r2, [r7, #12]
 800d470:	7bfb      	ldrb	r3, [r7, #15]
 800d472:	4619      	mov	r1, r3
 800d474:	6878      	ldr	r0, [r7, #4]
 800d476:	f7ff fe5a 	bl	800d12e <HAL_I2C_AddrCallback>
}
 800d47a:	e007      	b.n	800d48c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	2208      	movs	r2, #8
 800d482:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	2200      	movs	r2, #0
 800d488:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800d48c:	bf00      	nop
 800d48e:	3710      	adds	r7, #16
 800d490:	46bd      	mov	sp, r7
 800d492:	bd80      	pop	{r7, pc}

0800d494 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800d494:	b580      	push	{r7, lr}
 800d496:	b084      	sub	sp, #16
 800d498:	af00      	add	r7, sp, #0
 800d49a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	2200      	movs	r2, #0
 800d4a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	0b9b      	lsrs	r3, r3, #14
 800d4b0:	f003 0301 	and.w	r3, r3, #1
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d008      	beq.n	800d4ca <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	681a      	ldr	r2, [r3, #0]
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d4c6:	601a      	str	r2, [r3, #0]
 800d4c8:	e00d      	b.n	800d4e6 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	0bdb      	lsrs	r3, r3, #15
 800d4ce:	f003 0301 	and.w	r3, r3, #1
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d007      	beq.n	800d4e6 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	681a      	ldr	r2, [r3, #0]
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d4e4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d4ec:	b2db      	uxtb	r3, r3
 800d4ee:	2b29      	cmp	r3, #41	; 0x29
 800d4f0:	d112      	bne.n	800d518 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	2228      	movs	r2, #40	; 0x28
 800d4f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	2221      	movs	r2, #33	; 0x21
 800d4fe:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800d500:	2101      	movs	r1, #1
 800d502:	6878      	ldr	r0, [r7, #4]
 800d504:	f000 fbab 	bl	800dc5e <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	2200      	movs	r2, #0
 800d50c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800d510:	6878      	ldr	r0, [r7, #4]
 800d512:	f7ff fdf8 	bl	800d106 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800d516:	e017      	b.n	800d548 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d51e:	b2db      	uxtb	r3, r3
 800d520:	2b2a      	cmp	r3, #42	; 0x2a
 800d522:	d111      	bne.n	800d548 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	2228      	movs	r2, #40	; 0x28
 800d528:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	2222      	movs	r2, #34	; 0x22
 800d530:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800d532:	2102      	movs	r1, #2
 800d534:	6878      	ldr	r0, [r7, #4]
 800d536:	f000 fb92 	bl	800dc5e <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	2200      	movs	r2, #0
 800d53e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800d542:	6878      	ldr	r0, [r7, #4]
 800d544:	f7ff fde9 	bl	800d11a <HAL_I2C_SlaveRxCpltCallback>
}
 800d548:	bf00      	nop
 800d54a:	3710      	adds	r7, #16
 800d54c:	46bd      	mov	sp, r7
 800d54e:	bd80      	pop	{r7, pc}

0800d550 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800d550:	b580      	push	{r7, lr}
 800d552:	b086      	sub	sp, #24
 800d554:	af00      	add	r7, sp, #0
 800d556:	6078      	str	r0, [r7, #4]
 800d558:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800d562:	683b      	ldr	r3, [r7, #0]
 800d564:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d56c:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	2220      	movs	r2, #32
 800d574:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800d576:	7bfb      	ldrb	r3, [r7, #15]
 800d578:	2b21      	cmp	r3, #33	; 0x21
 800d57a:	d002      	beq.n	800d582 <I2C_ITSlaveCplt+0x32>
 800d57c:	7bfb      	ldrb	r3, [r7, #15]
 800d57e:	2b29      	cmp	r3, #41	; 0x29
 800d580:	d108      	bne.n	800d594 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800d582:	f248 0101 	movw	r1, #32769	; 0x8001
 800d586:	6878      	ldr	r0, [r7, #4]
 800d588:	f000 fb69 	bl	800dc5e <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	2221      	movs	r2, #33	; 0x21
 800d590:	631a      	str	r2, [r3, #48]	; 0x30
 800d592:	e00d      	b.n	800d5b0 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800d594:	7bfb      	ldrb	r3, [r7, #15]
 800d596:	2b22      	cmp	r3, #34	; 0x22
 800d598:	d002      	beq.n	800d5a0 <I2C_ITSlaveCplt+0x50>
 800d59a:	7bfb      	ldrb	r3, [r7, #15]
 800d59c:	2b2a      	cmp	r3, #42	; 0x2a
 800d59e:	d107      	bne.n	800d5b0 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800d5a0:	f248 0102 	movw	r1, #32770	; 0x8002
 800d5a4:	6878      	ldr	r0, [r7, #4]
 800d5a6:	f000 fb5a 	bl	800dc5e <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	2222      	movs	r2, #34	; 0x22
 800d5ae:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	685a      	ldr	r2, [r3, #4]
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d5be:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	6859      	ldr	r1, [r3, #4]
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	681a      	ldr	r2, [r3, #0]
 800d5ca:	4b80      	ldr	r3, [pc, #512]	; (800d7cc <I2C_ITSlaveCplt+0x27c>)
 800d5cc:	400b      	ands	r3, r1
 800d5ce:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800d5d0:	6878      	ldr	r0, [r7, #4]
 800d5d2:	f000 fb02 	bl	800dbda <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800d5d6:	693b      	ldr	r3, [r7, #16]
 800d5d8:	0b9b      	lsrs	r3, r3, #14
 800d5da:	f003 0301 	and.w	r3, r3, #1
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d07a      	beq.n	800d6d8 <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	681a      	ldr	r2, [r3, #0]
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d5f0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	f000 8111 	beq.w	800d81e <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	4a73      	ldr	r2, [pc, #460]	; (800d7d0 <I2C_ITSlaveCplt+0x280>)
 800d604:	4293      	cmp	r3, r2
 800d606:	d059      	beq.n	800d6bc <I2C_ITSlaveCplt+0x16c>
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	4a71      	ldr	r2, [pc, #452]	; (800d7d4 <I2C_ITSlaveCplt+0x284>)
 800d610:	4293      	cmp	r3, r2
 800d612:	d053      	beq.n	800d6bc <I2C_ITSlaveCplt+0x16c>
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	4a6f      	ldr	r2, [pc, #444]	; (800d7d8 <I2C_ITSlaveCplt+0x288>)
 800d61c:	4293      	cmp	r3, r2
 800d61e:	d04d      	beq.n	800d6bc <I2C_ITSlaveCplt+0x16c>
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	4a6d      	ldr	r2, [pc, #436]	; (800d7dc <I2C_ITSlaveCplt+0x28c>)
 800d628:	4293      	cmp	r3, r2
 800d62a:	d047      	beq.n	800d6bc <I2C_ITSlaveCplt+0x16c>
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	4a6b      	ldr	r2, [pc, #428]	; (800d7e0 <I2C_ITSlaveCplt+0x290>)
 800d634:	4293      	cmp	r3, r2
 800d636:	d041      	beq.n	800d6bc <I2C_ITSlaveCplt+0x16c>
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	4a69      	ldr	r2, [pc, #420]	; (800d7e4 <I2C_ITSlaveCplt+0x294>)
 800d640:	4293      	cmp	r3, r2
 800d642:	d03b      	beq.n	800d6bc <I2C_ITSlaveCplt+0x16c>
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	4a67      	ldr	r2, [pc, #412]	; (800d7e8 <I2C_ITSlaveCplt+0x298>)
 800d64c:	4293      	cmp	r3, r2
 800d64e:	d035      	beq.n	800d6bc <I2C_ITSlaveCplt+0x16c>
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	4a65      	ldr	r2, [pc, #404]	; (800d7ec <I2C_ITSlaveCplt+0x29c>)
 800d658:	4293      	cmp	r3, r2
 800d65a:	d02f      	beq.n	800d6bc <I2C_ITSlaveCplt+0x16c>
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	4a63      	ldr	r2, [pc, #396]	; (800d7f0 <I2C_ITSlaveCplt+0x2a0>)
 800d664:	4293      	cmp	r3, r2
 800d666:	d029      	beq.n	800d6bc <I2C_ITSlaveCplt+0x16c>
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	4a61      	ldr	r2, [pc, #388]	; (800d7f4 <I2C_ITSlaveCplt+0x2a4>)
 800d670:	4293      	cmp	r3, r2
 800d672:	d023      	beq.n	800d6bc <I2C_ITSlaveCplt+0x16c>
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	4a5f      	ldr	r2, [pc, #380]	; (800d7f8 <I2C_ITSlaveCplt+0x2a8>)
 800d67c:	4293      	cmp	r3, r2
 800d67e:	d01d      	beq.n	800d6bc <I2C_ITSlaveCplt+0x16c>
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	4a5d      	ldr	r2, [pc, #372]	; (800d7fc <I2C_ITSlaveCplt+0x2ac>)
 800d688:	4293      	cmp	r3, r2
 800d68a:	d017      	beq.n	800d6bc <I2C_ITSlaveCplt+0x16c>
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	4a5b      	ldr	r2, [pc, #364]	; (800d800 <I2C_ITSlaveCplt+0x2b0>)
 800d694:	4293      	cmp	r3, r2
 800d696:	d011      	beq.n	800d6bc <I2C_ITSlaveCplt+0x16c>
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	4a59      	ldr	r2, [pc, #356]	; (800d804 <I2C_ITSlaveCplt+0x2b4>)
 800d6a0:	4293      	cmp	r3, r2
 800d6a2:	d00b      	beq.n	800d6bc <I2C_ITSlaveCplt+0x16c>
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	4a57      	ldr	r2, [pc, #348]	; (800d808 <I2C_ITSlaveCplt+0x2b8>)
 800d6ac:	4293      	cmp	r3, r2
 800d6ae:	d005      	beq.n	800d6bc <I2C_ITSlaveCplt+0x16c>
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	4a55      	ldr	r2, [pc, #340]	; (800d80c <I2C_ITSlaveCplt+0x2bc>)
 800d6b8:	4293      	cmp	r3, r2
 800d6ba:	d105      	bne.n	800d6c8 <I2C_ITSlaveCplt+0x178>
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	685b      	ldr	r3, [r3, #4]
 800d6c4:	b29b      	uxth	r3, r3
 800d6c6:	e004      	b.n	800d6d2 <I2C_ITSlaveCplt+0x182>
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	685b      	ldr	r3, [r3, #4]
 800d6d0:	b29b      	uxth	r3, r3
 800d6d2:	687a      	ldr	r2, [r7, #4]
 800d6d4:	8553      	strh	r3, [r2, #42]	; 0x2a
 800d6d6:	e0a2      	b.n	800d81e <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800d6d8:	693b      	ldr	r3, [r7, #16]
 800d6da:	0bdb      	lsrs	r3, r3, #15
 800d6dc:	f003 0301 	and.w	r3, r3, #1
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	f000 809c 	beq.w	800d81e <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	681a      	ldr	r2, [r3, #0]
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d6f4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	f000 808f 	beq.w	800d81e <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	4a32      	ldr	r2, [pc, #200]	; (800d7d0 <I2C_ITSlaveCplt+0x280>)
 800d708:	4293      	cmp	r3, r2
 800d70a:	d059      	beq.n	800d7c0 <I2C_ITSlaveCplt+0x270>
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	4a30      	ldr	r2, [pc, #192]	; (800d7d4 <I2C_ITSlaveCplt+0x284>)
 800d714:	4293      	cmp	r3, r2
 800d716:	d053      	beq.n	800d7c0 <I2C_ITSlaveCplt+0x270>
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	4a2e      	ldr	r2, [pc, #184]	; (800d7d8 <I2C_ITSlaveCplt+0x288>)
 800d720:	4293      	cmp	r3, r2
 800d722:	d04d      	beq.n	800d7c0 <I2C_ITSlaveCplt+0x270>
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	4a2c      	ldr	r2, [pc, #176]	; (800d7dc <I2C_ITSlaveCplt+0x28c>)
 800d72c:	4293      	cmp	r3, r2
 800d72e:	d047      	beq.n	800d7c0 <I2C_ITSlaveCplt+0x270>
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	4a2a      	ldr	r2, [pc, #168]	; (800d7e0 <I2C_ITSlaveCplt+0x290>)
 800d738:	4293      	cmp	r3, r2
 800d73a:	d041      	beq.n	800d7c0 <I2C_ITSlaveCplt+0x270>
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	4a28      	ldr	r2, [pc, #160]	; (800d7e4 <I2C_ITSlaveCplt+0x294>)
 800d744:	4293      	cmp	r3, r2
 800d746:	d03b      	beq.n	800d7c0 <I2C_ITSlaveCplt+0x270>
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	4a26      	ldr	r2, [pc, #152]	; (800d7e8 <I2C_ITSlaveCplt+0x298>)
 800d750:	4293      	cmp	r3, r2
 800d752:	d035      	beq.n	800d7c0 <I2C_ITSlaveCplt+0x270>
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	4a24      	ldr	r2, [pc, #144]	; (800d7ec <I2C_ITSlaveCplt+0x29c>)
 800d75c:	4293      	cmp	r3, r2
 800d75e:	d02f      	beq.n	800d7c0 <I2C_ITSlaveCplt+0x270>
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	4a22      	ldr	r2, [pc, #136]	; (800d7f0 <I2C_ITSlaveCplt+0x2a0>)
 800d768:	4293      	cmp	r3, r2
 800d76a:	d029      	beq.n	800d7c0 <I2C_ITSlaveCplt+0x270>
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	4a20      	ldr	r2, [pc, #128]	; (800d7f4 <I2C_ITSlaveCplt+0x2a4>)
 800d774:	4293      	cmp	r3, r2
 800d776:	d023      	beq.n	800d7c0 <I2C_ITSlaveCplt+0x270>
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	4a1e      	ldr	r2, [pc, #120]	; (800d7f8 <I2C_ITSlaveCplt+0x2a8>)
 800d780:	4293      	cmp	r3, r2
 800d782:	d01d      	beq.n	800d7c0 <I2C_ITSlaveCplt+0x270>
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	4a1c      	ldr	r2, [pc, #112]	; (800d7fc <I2C_ITSlaveCplt+0x2ac>)
 800d78c:	4293      	cmp	r3, r2
 800d78e:	d017      	beq.n	800d7c0 <I2C_ITSlaveCplt+0x270>
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	4a1a      	ldr	r2, [pc, #104]	; (800d800 <I2C_ITSlaveCplt+0x2b0>)
 800d798:	4293      	cmp	r3, r2
 800d79a:	d011      	beq.n	800d7c0 <I2C_ITSlaveCplt+0x270>
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	4a18      	ldr	r2, [pc, #96]	; (800d804 <I2C_ITSlaveCplt+0x2b4>)
 800d7a4:	4293      	cmp	r3, r2
 800d7a6:	d00b      	beq.n	800d7c0 <I2C_ITSlaveCplt+0x270>
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	4a16      	ldr	r2, [pc, #88]	; (800d808 <I2C_ITSlaveCplt+0x2b8>)
 800d7b0:	4293      	cmp	r3, r2
 800d7b2:	d005      	beq.n	800d7c0 <I2C_ITSlaveCplt+0x270>
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	4a14      	ldr	r2, [pc, #80]	; (800d80c <I2C_ITSlaveCplt+0x2bc>)
 800d7bc:	4293      	cmp	r3, r2
 800d7be:	d127      	bne.n	800d810 <I2C_ITSlaveCplt+0x2c0>
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	685b      	ldr	r3, [r3, #4]
 800d7c8:	b29b      	uxth	r3, r3
 800d7ca:	e026      	b.n	800d81a <I2C_ITSlaveCplt+0x2ca>
 800d7cc:	fe00e800 	.word	0xfe00e800
 800d7d0:	40020010 	.word	0x40020010
 800d7d4:	40020028 	.word	0x40020028
 800d7d8:	40020040 	.word	0x40020040
 800d7dc:	40020058 	.word	0x40020058
 800d7e0:	40020070 	.word	0x40020070
 800d7e4:	40020088 	.word	0x40020088
 800d7e8:	400200a0 	.word	0x400200a0
 800d7ec:	400200b8 	.word	0x400200b8
 800d7f0:	40020410 	.word	0x40020410
 800d7f4:	40020428 	.word	0x40020428
 800d7f8:	40020440 	.word	0x40020440
 800d7fc:	40020458 	.word	0x40020458
 800d800:	40020470 	.word	0x40020470
 800d804:	40020488 	.word	0x40020488
 800d808:	400204a0 	.word	0x400204a0
 800d80c:	400204b8 	.word	0x400204b8
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	685b      	ldr	r3, [r3, #4]
 800d818:	b29b      	uxth	r3, r3
 800d81a:	687a      	ldr	r2, [r7, #4]
 800d81c:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800d81e:	697b      	ldr	r3, [r7, #20]
 800d820:	089b      	lsrs	r3, r3, #2
 800d822:	f003 0301 	and.w	r3, r3, #1
 800d826:	2b00      	cmp	r3, #0
 800d828:	d020      	beq.n	800d86c <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800d82a:	697b      	ldr	r3, [r7, #20]
 800d82c:	f023 0304 	bic.w	r3, r3, #4
 800d830:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d83c:	b2d2      	uxtb	r2, r2
 800d83e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d844:	1c5a      	adds	r2, r3, #1
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d00c      	beq.n	800d86c <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d856:	3b01      	subs	r3, #1
 800d858:	b29a      	uxth	r2, r3
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d862:	b29b      	uxth	r3, r3
 800d864:	3b01      	subs	r3, #1
 800d866:	b29a      	uxth	r2, r3
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d870:	b29b      	uxth	r3, r3
 800d872:	2b00      	cmp	r3, #0
 800d874:	d005      	beq.n	800d882 <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d87a:	f043 0204 	orr.w	r2, r3, #4
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	2200      	movs	r2, #0
 800d886:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	2200      	movs	r2, #0
 800d88e:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d894:	2b00      	cmp	r3, #0
 800d896:	d010      	beq.n	800d8ba <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d89c:	4619      	mov	r1, r3
 800d89e:	6878      	ldr	r0, [r7, #4]
 800d8a0:	f000 f8a4 	bl	800d9ec <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d8aa:	b2db      	uxtb	r3, r3
 800d8ac:	2b28      	cmp	r3, #40	; 0x28
 800d8ae:	d141      	bne.n	800d934 <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800d8b0:	6979      	ldr	r1, [r7, #20]
 800d8b2:	6878      	ldr	r0, [r7, #4]
 800d8b4:	f000 f844 	bl	800d940 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800d8b8:	e03c      	b.n	800d934 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8be:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d8c2:	d014      	beq.n	800d8ee <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 800d8c4:	6878      	ldr	r0, [r7, #4]
 800d8c6:	f7ff fde5 	bl	800d494 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	4a1b      	ldr	r2, [pc, #108]	; (800d93c <I2C_ITSlaveCplt+0x3ec>)
 800d8ce:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	2220      	movs	r2, #32
 800d8d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	2200      	movs	r2, #0
 800d8dc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	2200      	movs	r2, #0
 800d8e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800d8e6:	6878      	ldr	r0, [r7, #4]
 800d8e8:	f7ff fc2f 	bl	800d14a <HAL_I2C_ListenCpltCallback>
}
 800d8ec:	e022      	b.n	800d934 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d8f4:	b2db      	uxtb	r3, r3
 800d8f6:	2b22      	cmp	r3, #34	; 0x22
 800d8f8:	d10e      	bne.n	800d918 <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	2220      	movs	r2, #32
 800d8fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	2200      	movs	r2, #0
 800d906:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	2200      	movs	r2, #0
 800d90c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800d910:	6878      	ldr	r0, [r7, #4]
 800d912:	f7ff fc02 	bl	800d11a <HAL_I2C_SlaveRxCpltCallback>
}
 800d916:	e00d      	b.n	800d934 <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	2220      	movs	r2, #32
 800d91c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	2200      	movs	r2, #0
 800d924:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	2200      	movs	r2, #0
 800d92a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800d92e:	6878      	ldr	r0, [r7, #4]
 800d930:	f7ff fbe9 	bl	800d106 <HAL_I2C_SlaveTxCpltCallback>
}
 800d934:	bf00      	nop
 800d936:	3718      	adds	r7, #24
 800d938:	46bd      	mov	sp, r7
 800d93a:	bd80      	pop	{r7, pc}
 800d93c:	ffff0000 	.word	0xffff0000

0800d940 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800d940:	b580      	push	{r7, lr}
 800d942:	b082      	sub	sp, #8
 800d944:	af00      	add	r7, sp, #0
 800d946:	6078      	str	r0, [r7, #4]
 800d948:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	4a26      	ldr	r2, [pc, #152]	; (800d9e8 <I2C_ITListenCplt+0xa8>)
 800d94e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	2200      	movs	r2, #0
 800d954:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	2220      	movs	r2, #32
 800d95a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	2200      	movs	r2, #0
 800d962:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	2200      	movs	r2, #0
 800d96a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800d96c:	683b      	ldr	r3, [r7, #0]
 800d96e:	089b      	lsrs	r3, r3, #2
 800d970:	f003 0301 	and.w	r3, r3, #1
 800d974:	2b00      	cmp	r3, #0
 800d976:	d022      	beq.n	800d9be <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d982:	b2d2      	uxtb	r2, r2
 800d984:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d98a:	1c5a      	adds	r2, r3, #1
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d994:	2b00      	cmp	r3, #0
 800d996:	d012      	beq.n	800d9be <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d99c:	3b01      	subs	r3, #1
 800d99e:	b29a      	uxth	r2, r3
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d9a8:	b29b      	uxth	r3, r3
 800d9aa:	3b01      	subs	r3, #1
 800d9ac:	b29a      	uxth	r2, r3
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d9b6:	f043 0204 	orr.w	r2, r3, #4
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800d9be:	f248 0103 	movw	r1, #32771	; 0x8003
 800d9c2:	6878      	ldr	r0, [r7, #4]
 800d9c4:	f000 f94b 	bl	800dc5e <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	2210      	movs	r2, #16
 800d9ce:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	2200      	movs	r2, #0
 800d9d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800d9d8:	6878      	ldr	r0, [r7, #4]
 800d9da:	f7ff fbb6 	bl	800d14a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800d9de:	bf00      	nop
 800d9e0:	3708      	adds	r7, #8
 800d9e2:	46bd      	mov	sp, r7
 800d9e4:	bd80      	pop	{r7, pc}
 800d9e6:	bf00      	nop
 800d9e8:	ffff0000 	.word	0xffff0000

0800d9ec <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800d9ec:	b580      	push	{r7, lr}
 800d9ee:	b084      	sub	sp, #16
 800d9f0:	af00      	add	r7, sp, #0
 800d9f2:	6078      	str	r0, [r7, #4]
 800d9f4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d9fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	2200      	movs	r2, #0
 800da02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	4a5d      	ldr	r2, [pc, #372]	; (800db80 <I2C_ITError+0x194>)
 800da0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	2200      	movs	r2, #0
 800da10:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800da16:	683b      	ldr	r3, [r7, #0]
 800da18:	431a      	orrs	r2, r3
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800da1e:	7bfb      	ldrb	r3, [r7, #15]
 800da20:	2b28      	cmp	r3, #40	; 0x28
 800da22:	d005      	beq.n	800da30 <I2C_ITError+0x44>
 800da24:	7bfb      	ldrb	r3, [r7, #15]
 800da26:	2b29      	cmp	r3, #41	; 0x29
 800da28:	d002      	beq.n	800da30 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800da2a:	7bfb      	ldrb	r3, [r7, #15]
 800da2c:	2b2a      	cmp	r3, #42	; 0x2a
 800da2e:	d10b      	bne.n	800da48 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800da30:	2103      	movs	r1, #3
 800da32:	6878      	ldr	r0, [r7, #4]
 800da34:	f000 f913 	bl	800dc5e <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	2228      	movs	r2, #40	; 0x28
 800da3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	4a50      	ldr	r2, [pc, #320]	; (800db84 <I2C_ITError+0x198>)
 800da44:	635a      	str	r2, [r3, #52]	; 0x34
 800da46:	e011      	b.n	800da6c <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800da48:	f248 0103 	movw	r1, #32771	; 0x8003
 800da4c:	6878      	ldr	r0, [r7, #4]
 800da4e:	f000 f906 	bl	800dc5e <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800da58:	b2db      	uxtb	r3, r3
 800da5a:	2b60      	cmp	r3, #96	; 0x60
 800da5c:	d003      	beq.n	800da66 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	2220      	movs	r2, #32
 800da62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	2200      	movs	r2, #0
 800da6a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da70:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da76:	2b00      	cmp	r3, #0
 800da78:	d039      	beq.n	800daee <I2C_ITError+0x102>
 800da7a:	68bb      	ldr	r3, [r7, #8]
 800da7c:	2b11      	cmp	r3, #17
 800da7e:	d002      	beq.n	800da86 <I2C_ITError+0x9a>
 800da80:	68bb      	ldr	r3, [r7, #8]
 800da82:	2b21      	cmp	r3, #33	; 0x21
 800da84:	d133      	bne.n	800daee <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800da90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800da94:	d107      	bne.n	800daa6 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	681a      	ldr	r2, [r3, #0]
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800daa4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800daaa:	4618      	mov	r0, r3
 800daac:	f7fe fe0c 	bl	800c6c8 <HAL_DMA_GetState>
 800dab0:	4603      	mov	r3, r0
 800dab2:	2b01      	cmp	r3, #1
 800dab4:	d017      	beq.n	800dae6 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800daba:	4a33      	ldr	r2, [pc, #204]	; (800db88 <I2C_ITError+0x19c>)
 800dabc:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	2200      	movs	r2, #0
 800dac2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800daca:	4618      	mov	r0, r3
 800dacc:	f7fd fc8c 	bl	800b3e8 <HAL_DMA_Abort_IT>
 800dad0:	4603      	mov	r3, r0
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d04d      	beq.n	800db72 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dada:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dadc:	687a      	ldr	r2, [r7, #4]
 800dade:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800dae0:	4610      	mov	r0, r2
 800dae2:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800dae4:	e045      	b.n	800db72 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800dae6:	6878      	ldr	r0, [r7, #4]
 800dae8:	f000 f850 	bl	800db8c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800daec:	e041      	b.n	800db72 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d039      	beq.n	800db6a <I2C_ITError+0x17e>
 800daf6:	68bb      	ldr	r3, [r7, #8]
 800daf8:	2b12      	cmp	r3, #18
 800dafa:	d002      	beq.n	800db02 <I2C_ITError+0x116>
 800dafc:	68bb      	ldr	r3, [r7, #8]
 800dafe:	2b22      	cmp	r3, #34	; 0x22
 800db00:	d133      	bne.n	800db6a <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800db0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800db10:	d107      	bne.n	800db22 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	681a      	ldr	r2, [r3, #0]
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800db20:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db26:	4618      	mov	r0, r3
 800db28:	f7fe fdce 	bl	800c6c8 <HAL_DMA_GetState>
 800db2c:	4603      	mov	r3, r0
 800db2e:	2b01      	cmp	r3, #1
 800db30:	d017      	beq.n	800db62 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db36:	4a14      	ldr	r2, [pc, #80]	; (800db88 <I2C_ITError+0x19c>)
 800db38:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	2200      	movs	r2, #0
 800db3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db46:	4618      	mov	r0, r3
 800db48:	f7fd fc4e 	bl	800b3e8 <HAL_DMA_Abort_IT>
 800db4c:	4603      	mov	r3, r0
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d011      	beq.n	800db76 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800db58:	687a      	ldr	r2, [r7, #4]
 800db5a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800db5c:	4610      	mov	r0, r2
 800db5e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800db60:	e009      	b.n	800db76 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800db62:	6878      	ldr	r0, [r7, #4]
 800db64:	f000 f812 	bl	800db8c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800db68:	e005      	b.n	800db76 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800db6a:	6878      	ldr	r0, [r7, #4]
 800db6c:	f000 f80e 	bl	800db8c <I2C_TreatErrorCallback>
  }
}
 800db70:	e002      	b.n	800db78 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800db72:	bf00      	nop
 800db74:	e000      	b.n	800db78 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800db76:	bf00      	nop
}
 800db78:	bf00      	nop
 800db7a:	3710      	adds	r7, #16
 800db7c:	46bd      	mov	sp, r7
 800db7e:	bd80      	pop	{r7, pc}
 800db80:	ffff0000 	.word	0xffff0000
 800db84:	0800d187 	.word	0x0800d187
 800db88:	0800dc23 	.word	0x0800dc23

0800db8c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800db8c:	b580      	push	{r7, lr}
 800db8e:	b082      	sub	sp, #8
 800db90:	af00      	add	r7, sp, #0
 800db92:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800db9a:	b2db      	uxtb	r3, r3
 800db9c:	2b60      	cmp	r3, #96	; 0x60
 800db9e:	d10e      	bne.n	800dbbe <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	2220      	movs	r2, #32
 800dba4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	2200      	movs	r2, #0
 800dbac:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	2200      	movs	r2, #0
 800dbb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800dbb6:	6878      	ldr	r0, [r7, #4]
 800dbb8:	f7ff fadb 	bl	800d172 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800dbbc:	e009      	b.n	800dbd2 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	2200      	movs	r2, #0
 800dbc2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	2200      	movs	r2, #0
 800dbc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800dbcc:	6878      	ldr	r0, [r7, #4]
 800dbce:	f7ff fac6 	bl	800d15e <HAL_I2C_ErrorCallback>
}
 800dbd2:	bf00      	nop
 800dbd4:	3708      	adds	r7, #8
 800dbd6:	46bd      	mov	sp, r7
 800dbd8:	bd80      	pop	{r7, pc}

0800dbda <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800dbda:	b480      	push	{r7}
 800dbdc:	b083      	sub	sp, #12
 800dbde:	af00      	add	r7, sp, #0
 800dbe0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	699b      	ldr	r3, [r3, #24]
 800dbe8:	f003 0302 	and.w	r3, r3, #2
 800dbec:	2b02      	cmp	r3, #2
 800dbee:	d103      	bne.n	800dbf8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	2200      	movs	r2, #0
 800dbf6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	699b      	ldr	r3, [r3, #24]
 800dbfe:	f003 0301 	and.w	r3, r3, #1
 800dc02:	2b01      	cmp	r3, #1
 800dc04:	d007      	beq.n	800dc16 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	699a      	ldr	r2, [r3, #24]
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	f042 0201 	orr.w	r2, r2, #1
 800dc14:	619a      	str	r2, [r3, #24]
  }
}
 800dc16:	bf00      	nop
 800dc18:	370c      	adds	r7, #12
 800dc1a:	46bd      	mov	sp, r7
 800dc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc20:	4770      	bx	lr

0800dc22 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800dc22:	b580      	push	{r7, lr}
 800dc24:	b084      	sub	sp, #16
 800dc26:	af00      	add	r7, sp, #0
 800dc28:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc2e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d003      	beq.n	800dc40 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc3c:	2200      	movs	r2, #0
 800dc3e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d003      	beq.n	800dc50 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc4c:	2200      	movs	r2, #0
 800dc4e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800dc50:	68f8      	ldr	r0, [r7, #12]
 800dc52:	f7ff ff9b 	bl	800db8c <I2C_TreatErrorCallback>
}
 800dc56:	bf00      	nop
 800dc58:	3710      	adds	r7, #16
 800dc5a:	46bd      	mov	sp, r7
 800dc5c:	bd80      	pop	{r7, pc}

0800dc5e <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800dc5e:	b480      	push	{r7}
 800dc60:	b085      	sub	sp, #20
 800dc62:	af00      	add	r7, sp, #0
 800dc64:	6078      	str	r0, [r7, #4]
 800dc66:	460b      	mov	r3, r1
 800dc68:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800dc6a:	2300      	movs	r3, #0
 800dc6c:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800dc6e:	887b      	ldrh	r3, [r7, #2]
 800dc70:	f003 0301 	and.w	r3, r3, #1
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d00f      	beq.n	800dc98 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800dc7e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dc86:	b2db      	uxtb	r3, r3
 800dc88:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800dc8c:	2b28      	cmp	r3, #40	; 0x28
 800dc8e:	d003      	beq.n	800dc98 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800dc96:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800dc98:	887b      	ldrh	r3, [r7, #2]
 800dc9a:	f003 0302 	and.w	r3, r3, #2
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d00f      	beq.n	800dcc2 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800dca8:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dcb0:	b2db      	uxtb	r3, r3
 800dcb2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800dcb6:	2b28      	cmp	r3, #40	; 0x28
 800dcb8:	d003      	beq.n	800dcc2 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800dcc0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800dcc2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	da03      	bge.n	800dcd2 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800dcd0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800dcd2:	887b      	ldrh	r3, [r7, #2]
 800dcd4:	2b10      	cmp	r3, #16
 800dcd6:	d103      	bne.n	800dce0 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800dcde:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800dce0:	887b      	ldrh	r3, [r7, #2]
 800dce2:	2b20      	cmp	r3, #32
 800dce4:	d103      	bne.n	800dcee <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	f043 0320 	orr.w	r3, r3, #32
 800dcec:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800dcee:	887b      	ldrh	r3, [r7, #2]
 800dcf0:	2b40      	cmp	r3, #64	; 0x40
 800dcf2:	d103      	bne.n	800dcfc <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dcfa:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	6819      	ldr	r1, [r3, #0]
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	43da      	mvns	r2, r3
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	400a      	ands	r2, r1
 800dd0c:	601a      	str	r2, [r3, #0]
}
 800dd0e:	bf00      	nop
 800dd10:	3714      	adds	r7, #20
 800dd12:	46bd      	mov	sp, r7
 800dd14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd18:	4770      	bx	lr

0800dd1a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800dd1a:	b480      	push	{r7}
 800dd1c:	b083      	sub	sp, #12
 800dd1e:	af00      	add	r7, sp, #0
 800dd20:	6078      	str	r0, [r7, #4]
 800dd22:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dd2a:	b2db      	uxtb	r3, r3
 800dd2c:	2b20      	cmp	r3, #32
 800dd2e:	d138      	bne.n	800dda2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800dd36:	2b01      	cmp	r3, #1
 800dd38:	d101      	bne.n	800dd3e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800dd3a:	2302      	movs	r3, #2
 800dd3c:	e032      	b.n	800dda4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	2201      	movs	r2, #1
 800dd42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	2224      	movs	r2, #36	; 0x24
 800dd4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	681a      	ldr	r2, [r3, #0]
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	f022 0201 	bic.w	r2, r2, #1
 800dd5c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	681a      	ldr	r2, [r3, #0]
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800dd6c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	6819      	ldr	r1, [r3, #0]
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	683a      	ldr	r2, [r7, #0]
 800dd7a:	430a      	orrs	r2, r1
 800dd7c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	681a      	ldr	r2, [r3, #0]
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	f042 0201 	orr.w	r2, r2, #1
 800dd8c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	2220      	movs	r2, #32
 800dd92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	2200      	movs	r2, #0
 800dd9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800dd9e:	2300      	movs	r3, #0
 800dda0:	e000      	b.n	800dda4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800dda2:	2302      	movs	r3, #2
  }
}
 800dda4:	4618      	mov	r0, r3
 800dda6:	370c      	adds	r7, #12
 800dda8:	46bd      	mov	sp, r7
 800ddaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddae:	4770      	bx	lr

0800ddb0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800ddb0:	b480      	push	{r7}
 800ddb2:	b085      	sub	sp, #20
 800ddb4:	af00      	add	r7, sp, #0
 800ddb6:	6078      	str	r0, [r7, #4]
 800ddb8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ddc0:	b2db      	uxtb	r3, r3
 800ddc2:	2b20      	cmp	r3, #32
 800ddc4:	d139      	bne.n	800de3a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ddcc:	2b01      	cmp	r3, #1
 800ddce:	d101      	bne.n	800ddd4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800ddd0:	2302      	movs	r3, #2
 800ddd2:	e033      	b.n	800de3c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	2201      	movs	r2, #1
 800ddd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	2224      	movs	r2, #36	; 0x24
 800dde0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	681a      	ldr	r2, [r3, #0]
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	f022 0201 	bic.w	r2, r2, #1
 800ddf2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800de02:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800de04:	683b      	ldr	r3, [r7, #0]
 800de06:	021b      	lsls	r3, r3, #8
 800de08:	68fa      	ldr	r2, [r7, #12]
 800de0a:	4313      	orrs	r3, r2
 800de0c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	68fa      	ldr	r2, [r7, #12]
 800de14:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	681a      	ldr	r2, [r3, #0]
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	f042 0201 	orr.w	r2, r2, #1
 800de24:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	2220      	movs	r2, #32
 800de2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	2200      	movs	r2, #0
 800de32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800de36:	2300      	movs	r3, #0
 800de38:	e000      	b.n	800de3c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800de3a:	2302      	movs	r3, #2
  }
}
 800de3c:	4618      	mov	r0, r3
 800de3e:	3714      	adds	r7, #20
 800de40:	46bd      	mov	sp, r7
 800de42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de46:	4770      	bx	lr

0800de48 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800de48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de4a:	b08f      	sub	sp, #60	; 0x3c
 800de4c:	af0a      	add	r7, sp, #40	; 0x28
 800de4e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	2b00      	cmp	r3, #0
 800de54:	d101      	bne.n	800de5a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800de56:	2301      	movs	r3, #1
 800de58:	e116      	b.n	800e088 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800de66:	b2db      	uxtb	r3, r3
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d106      	bne.n	800de7a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	2200      	movs	r2, #0
 800de70:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800de74:	6878      	ldr	r0, [r7, #4]
 800de76:	f00b fcc5 	bl	8019804 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	2203      	movs	r2, #3
 800de7e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800de82:	68bb      	ldr	r3, [r7, #8]
 800de84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d102      	bne.n	800de94 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	2200      	movs	r2, #0
 800de92:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	4618      	mov	r0, r3
 800de9a:	f008 fbe8 	bl	801666e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	603b      	str	r3, [r7, #0]
 800dea4:	687e      	ldr	r6, [r7, #4]
 800dea6:	466d      	mov	r5, sp
 800dea8:	f106 0410 	add.w	r4, r6, #16
 800deac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800deae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800deb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800deb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800deb4:	e894 0003 	ldmia.w	r4, {r0, r1}
 800deb8:	e885 0003 	stmia.w	r5, {r0, r1}
 800debc:	1d33      	adds	r3, r6, #4
 800debe:	cb0e      	ldmia	r3, {r1, r2, r3}
 800dec0:	6838      	ldr	r0, [r7, #0]
 800dec2:	f008 fab3 	bl	801642c <USB_CoreInit>
 800dec6:	4603      	mov	r3, r0
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d005      	beq.n	800ded8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	2202      	movs	r2, #2
 800ded0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800ded4:	2301      	movs	r3, #1
 800ded6:	e0d7      	b.n	800e088 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	2100      	movs	r1, #0
 800dede:	4618      	mov	r0, r3
 800dee0:	f008 fbd6 	bl	8016690 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800dee4:	2300      	movs	r3, #0
 800dee6:	73fb      	strb	r3, [r7, #15]
 800dee8:	e04a      	b.n	800df80 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800deea:	7bfa      	ldrb	r2, [r7, #15]
 800deec:	6879      	ldr	r1, [r7, #4]
 800deee:	4613      	mov	r3, r2
 800def0:	00db      	lsls	r3, r3, #3
 800def2:	1a9b      	subs	r3, r3, r2
 800def4:	009b      	lsls	r3, r3, #2
 800def6:	440b      	add	r3, r1
 800def8:	333d      	adds	r3, #61	; 0x3d
 800defa:	2201      	movs	r2, #1
 800defc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800defe:	7bfa      	ldrb	r2, [r7, #15]
 800df00:	6879      	ldr	r1, [r7, #4]
 800df02:	4613      	mov	r3, r2
 800df04:	00db      	lsls	r3, r3, #3
 800df06:	1a9b      	subs	r3, r3, r2
 800df08:	009b      	lsls	r3, r3, #2
 800df0a:	440b      	add	r3, r1
 800df0c:	333c      	adds	r3, #60	; 0x3c
 800df0e:	7bfa      	ldrb	r2, [r7, #15]
 800df10:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800df12:	7bfa      	ldrb	r2, [r7, #15]
 800df14:	7bfb      	ldrb	r3, [r7, #15]
 800df16:	b298      	uxth	r0, r3
 800df18:	6879      	ldr	r1, [r7, #4]
 800df1a:	4613      	mov	r3, r2
 800df1c:	00db      	lsls	r3, r3, #3
 800df1e:	1a9b      	subs	r3, r3, r2
 800df20:	009b      	lsls	r3, r3, #2
 800df22:	440b      	add	r3, r1
 800df24:	3342      	adds	r3, #66	; 0x42
 800df26:	4602      	mov	r2, r0
 800df28:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800df2a:	7bfa      	ldrb	r2, [r7, #15]
 800df2c:	6879      	ldr	r1, [r7, #4]
 800df2e:	4613      	mov	r3, r2
 800df30:	00db      	lsls	r3, r3, #3
 800df32:	1a9b      	subs	r3, r3, r2
 800df34:	009b      	lsls	r3, r3, #2
 800df36:	440b      	add	r3, r1
 800df38:	333f      	adds	r3, #63	; 0x3f
 800df3a:	2200      	movs	r2, #0
 800df3c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800df3e:	7bfa      	ldrb	r2, [r7, #15]
 800df40:	6879      	ldr	r1, [r7, #4]
 800df42:	4613      	mov	r3, r2
 800df44:	00db      	lsls	r3, r3, #3
 800df46:	1a9b      	subs	r3, r3, r2
 800df48:	009b      	lsls	r3, r3, #2
 800df4a:	440b      	add	r3, r1
 800df4c:	3344      	adds	r3, #68	; 0x44
 800df4e:	2200      	movs	r2, #0
 800df50:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800df52:	7bfa      	ldrb	r2, [r7, #15]
 800df54:	6879      	ldr	r1, [r7, #4]
 800df56:	4613      	mov	r3, r2
 800df58:	00db      	lsls	r3, r3, #3
 800df5a:	1a9b      	subs	r3, r3, r2
 800df5c:	009b      	lsls	r3, r3, #2
 800df5e:	440b      	add	r3, r1
 800df60:	3348      	adds	r3, #72	; 0x48
 800df62:	2200      	movs	r2, #0
 800df64:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800df66:	7bfa      	ldrb	r2, [r7, #15]
 800df68:	6879      	ldr	r1, [r7, #4]
 800df6a:	4613      	mov	r3, r2
 800df6c:	00db      	lsls	r3, r3, #3
 800df6e:	1a9b      	subs	r3, r3, r2
 800df70:	009b      	lsls	r3, r3, #2
 800df72:	440b      	add	r3, r1
 800df74:	3350      	adds	r3, #80	; 0x50
 800df76:	2200      	movs	r2, #0
 800df78:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800df7a:	7bfb      	ldrb	r3, [r7, #15]
 800df7c:	3301      	adds	r3, #1
 800df7e:	73fb      	strb	r3, [r7, #15]
 800df80:	7bfa      	ldrb	r2, [r7, #15]
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	685b      	ldr	r3, [r3, #4]
 800df86:	429a      	cmp	r2, r3
 800df88:	d3af      	bcc.n	800deea <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800df8a:	2300      	movs	r3, #0
 800df8c:	73fb      	strb	r3, [r7, #15]
 800df8e:	e044      	b.n	800e01a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800df90:	7bfa      	ldrb	r2, [r7, #15]
 800df92:	6879      	ldr	r1, [r7, #4]
 800df94:	4613      	mov	r3, r2
 800df96:	00db      	lsls	r3, r3, #3
 800df98:	1a9b      	subs	r3, r3, r2
 800df9a:	009b      	lsls	r3, r3, #2
 800df9c:	440b      	add	r3, r1
 800df9e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800dfa2:	2200      	movs	r2, #0
 800dfa4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800dfa6:	7bfa      	ldrb	r2, [r7, #15]
 800dfa8:	6879      	ldr	r1, [r7, #4]
 800dfaa:	4613      	mov	r3, r2
 800dfac:	00db      	lsls	r3, r3, #3
 800dfae:	1a9b      	subs	r3, r3, r2
 800dfb0:	009b      	lsls	r3, r3, #2
 800dfb2:	440b      	add	r3, r1
 800dfb4:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800dfb8:	7bfa      	ldrb	r2, [r7, #15]
 800dfba:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800dfbc:	7bfa      	ldrb	r2, [r7, #15]
 800dfbe:	6879      	ldr	r1, [r7, #4]
 800dfc0:	4613      	mov	r3, r2
 800dfc2:	00db      	lsls	r3, r3, #3
 800dfc4:	1a9b      	subs	r3, r3, r2
 800dfc6:	009b      	lsls	r3, r3, #2
 800dfc8:	440b      	add	r3, r1
 800dfca:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800dfce:	2200      	movs	r2, #0
 800dfd0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800dfd2:	7bfa      	ldrb	r2, [r7, #15]
 800dfd4:	6879      	ldr	r1, [r7, #4]
 800dfd6:	4613      	mov	r3, r2
 800dfd8:	00db      	lsls	r3, r3, #3
 800dfda:	1a9b      	subs	r3, r3, r2
 800dfdc:	009b      	lsls	r3, r3, #2
 800dfde:	440b      	add	r3, r1
 800dfe0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800dfe4:	2200      	movs	r2, #0
 800dfe6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800dfe8:	7bfa      	ldrb	r2, [r7, #15]
 800dfea:	6879      	ldr	r1, [r7, #4]
 800dfec:	4613      	mov	r3, r2
 800dfee:	00db      	lsls	r3, r3, #3
 800dff0:	1a9b      	subs	r3, r3, r2
 800dff2:	009b      	lsls	r3, r3, #2
 800dff4:	440b      	add	r3, r1
 800dff6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800dffa:	2200      	movs	r2, #0
 800dffc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800dffe:	7bfa      	ldrb	r2, [r7, #15]
 800e000:	6879      	ldr	r1, [r7, #4]
 800e002:	4613      	mov	r3, r2
 800e004:	00db      	lsls	r3, r3, #3
 800e006:	1a9b      	subs	r3, r3, r2
 800e008:	009b      	lsls	r3, r3, #2
 800e00a:	440b      	add	r3, r1
 800e00c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800e010:	2200      	movs	r2, #0
 800e012:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800e014:	7bfb      	ldrb	r3, [r7, #15]
 800e016:	3301      	adds	r3, #1
 800e018:	73fb      	strb	r3, [r7, #15]
 800e01a:	7bfa      	ldrb	r2, [r7, #15]
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	685b      	ldr	r3, [r3, #4]
 800e020:	429a      	cmp	r2, r3
 800e022:	d3b5      	bcc.n	800df90 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	603b      	str	r3, [r7, #0]
 800e02a:	687e      	ldr	r6, [r7, #4]
 800e02c:	466d      	mov	r5, sp
 800e02e:	f106 0410 	add.w	r4, r6, #16
 800e032:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e034:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e036:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e038:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e03a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800e03e:	e885 0003 	stmia.w	r5, {r0, r1}
 800e042:	1d33      	adds	r3, r6, #4
 800e044:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e046:	6838      	ldr	r0, [r7, #0]
 800e048:	f008 fb6e 	bl	8016728 <USB_DevInit>
 800e04c:	4603      	mov	r3, r0
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d005      	beq.n	800e05e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	2202      	movs	r2, #2
 800e056:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800e05a:	2301      	movs	r3, #1
 800e05c:	e014      	b.n	800e088 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	2200      	movs	r2, #0
 800e062:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	2201      	movs	r2, #1
 800e06a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e072:	2b01      	cmp	r3, #1
 800e074:	d102      	bne.n	800e07c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800e076:	6878      	ldr	r0, [r7, #4]
 800e078:	f001 f886 	bl	800f188 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	4618      	mov	r0, r3
 800e082:	f009 fc06 	bl	8017892 <USB_DevDisconnect>

  return HAL_OK;
 800e086:	2300      	movs	r3, #0
}
 800e088:	4618      	mov	r0, r3
 800e08a:	3714      	adds	r7, #20
 800e08c:	46bd      	mov	sp, r7
 800e08e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e090 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800e090:	b580      	push	{r7, lr}
 800e092:	b084      	sub	sp, #16
 800e094:	af00      	add	r7, sp, #0
 800e096:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800e0a4:	2b01      	cmp	r3, #1
 800e0a6:	d101      	bne.n	800e0ac <HAL_PCD_Start+0x1c>
 800e0a8:	2302      	movs	r3, #2
 800e0aa:	e020      	b.n	800e0ee <HAL_PCD_Start+0x5e>
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	2201      	movs	r2, #1
 800e0b0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0b8:	2b01      	cmp	r3, #1
 800e0ba:	d109      	bne.n	800e0d0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800e0c0:	2b01      	cmp	r3, #1
 800e0c2:	d005      	beq.n	800e0d0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0c8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	4618      	mov	r0, r3
 800e0d6:	f008 fab9 	bl	801664c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	4618      	mov	r0, r3
 800e0e0:	f009 fbb6 	bl	8017850 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	2200      	movs	r2, #0
 800e0e8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800e0ec:	2300      	movs	r3, #0
}
 800e0ee:	4618      	mov	r0, r3
 800e0f0:	3710      	adds	r7, #16
 800e0f2:	46bd      	mov	sp, r7
 800e0f4:	bd80      	pop	{r7, pc}

0800e0f6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800e0f6:	b590      	push	{r4, r7, lr}
 800e0f8:	b08d      	sub	sp, #52	; 0x34
 800e0fa:	af00      	add	r7, sp, #0
 800e0fc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e104:	6a3b      	ldr	r3, [r7, #32]
 800e106:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	4618      	mov	r0, r3
 800e10e:	f009 fc74 	bl	80179fa <USB_GetMode>
 800e112:	4603      	mov	r3, r0
 800e114:	2b00      	cmp	r3, #0
 800e116:	f040 83be 	bne.w	800e896 <HAL_PCD_IRQHandler+0x7a0>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	4618      	mov	r0, r3
 800e120:	f009 fbd8 	bl	80178d4 <USB_ReadInterrupts>
 800e124:	4603      	mov	r3, r0
 800e126:	2b00      	cmp	r3, #0
 800e128:	f000 83b4 	beq.w	800e894 <HAL_PCD_IRQHandler+0x79e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	4618      	mov	r0, r3
 800e132:	f009 fbcf 	bl	80178d4 <USB_ReadInterrupts>
 800e136:	4603      	mov	r3, r0
 800e138:	f003 0302 	and.w	r3, r3, #2
 800e13c:	2b02      	cmp	r3, #2
 800e13e:	d107      	bne.n	800e150 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	695a      	ldr	r2, [r3, #20]
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	f002 0202 	and.w	r2, r2, #2
 800e14e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	4618      	mov	r0, r3
 800e156:	f009 fbbd 	bl	80178d4 <USB_ReadInterrupts>
 800e15a:	4603      	mov	r3, r0
 800e15c:	f003 0310 	and.w	r3, r3, #16
 800e160:	2b10      	cmp	r3, #16
 800e162:	d161      	bne.n	800e228 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	699a      	ldr	r2, [r3, #24]
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	f022 0210 	bic.w	r2, r2, #16
 800e172:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800e174:	6a3b      	ldr	r3, [r7, #32]
 800e176:	6a1b      	ldr	r3, [r3, #32]
 800e178:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800e17a:	69bb      	ldr	r3, [r7, #24]
 800e17c:	f003 020f 	and.w	r2, r3, #15
 800e180:	4613      	mov	r3, r2
 800e182:	00db      	lsls	r3, r3, #3
 800e184:	1a9b      	subs	r3, r3, r2
 800e186:	009b      	lsls	r3, r3, #2
 800e188:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800e18c:	687a      	ldr	r2, [r7, #4]
 800e18e:	4413      	add	r3, r2
 800e190:	3304      	adds	r3, #4
 800e192:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800e194:	69bb      	ldr	r3, [r7, #24]
 800e196:	0c5b      	lsrs	r3, r3, #17
 800e198:	f003 030f 	and.w	r3, r3, #15
 800e19c:	2b02      	cmp	r3, #2
 800e19e:	d124      	bne.n	800e1ea <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800e1a0:	69ba      	ldr	r2, [r7, #24]
 800e1a2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800e1a6:	4013      	ands	r3, r2
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d035      	beq.n	800e218 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800e1ac:	697b      	ldr	r3, [r7, #20]
 800e1ae:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800e1b0:	69bb      	ldr	r3, [r7, #24]
 800e1b2:	091b      	lsrs	r3, r3, #4
 800e1b4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800e1b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e1ba:	b29b      	uxth	r3, r3
 800e1bc:	461a      	mov	r2, r3
 800e1be:	6a38      	ldr	r0, [r7, #32]
 800e1c0:	f009 f9f4 	bl	80175ac <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800e1c4:	697b      	ldr	r3, [r7, #20]
 800e1c6:	68da      	ldr	r2, [r3, #12]
 800e1c8:	69bb      	ldr	r3, [r7, #24]
 800e1ca:	091b      	lsrs	r3, r3, #4
 800e1cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e1d0:	441a      	add	r2, r3
 800e1d2:	697b      	ldr	r3, [r7, #20]
 800e1d4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800e1d6:	697b      	ldr	r3, [r7, #20]
 800e1d8:	699a      	ldr	r2, [r3, #24]
 800e1da:	69bb      	ldr	r3, [r7, #24]
 800e1dc:	091b      	lsrs	r3, r3, #4
 800e1de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e1e2:	441a      	add	r2, r3
 800e1e4:	697b      	ldr	r3, [r7, #20]
 800e1e6:	619a      	str	r2, [r3, #24]
 800e1e8:	e016      	b.n	800e218 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800e1ea:	69bb      	ldr	r3, [r7, #24]
 800e1ec:	0c5b      	lsrs	r3, r3, #17
 800e1ee:	f003 030f 	and.w	r3, r3, #15
 800e1f2:	2b06      	cmp	r3, #6
 800e1f4:	d110      	bne.n	800e218 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800e1fc:	2208      	movs	r2, #8
 800e1fe:	4619      	mov	r1, r3
 800e200:	6a38      	ldr	r0, [r7, #32]
 800e202:	f009 f9d3 	bl	80175ac <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800e206:	697b      	ldr	r3, [r7, #20]
 800e208:	699a      	ldr	r2, [r3, #24]
 800e20a:	69bb      	ldr	r3, [r7, #24]
 800e20c:	091b      	lsrs	r3, r3, #4
 800e20e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e212:	441a      	add	r2, r3
 800e214:	697b      	ldr	r3, [r7, #20]
 800e216:	619a      	str	r2, [r3, #24]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	699a      	ldr	r2, [r3, #24]
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	f042 0210 	orr.w	r2, r2, #16
 800e226:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	4618      	mov	r0, r3
 800e22e:	f009 fb51 	bl	80178d4 <USB_ReadInterrupts>
 800e232:	4603      	mov	r3, r0
 800e234:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e238:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800e23c:	d16e      	bne.n	800e31c <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800e23e:	2300      	movs	r3, #0
 800e240:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	4618      	mov	r0, r3
 800e248:	f009 fb57 	bl	80178fa <USB_ReadDevAllOutEpInterrupt>
 800e24c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800e24e:	e062      	b.n	800e316 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800e250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e252:	f003 0301 	and.w	r3, r3, #1
 800e256:	2b00      	cmp	r3, #0
 800e258:	d057      	beq.n	800e30a <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e260:	b2d2      	uxtb	r2, r2
 800e262:	4611      	mov	r1, r2
 800e264:	4618      	mov	r0, r3
 800e266:	f009 fb7c 	bl	8017962 <USB_ReadDevOutEPInterrupt>
 800e26a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800e26c:	693b      	ldr	r3, [r7, #16]
 800e26e:	f003 0301 	and.w	r3, r3, #1
 800e272:	2b00      	cmp	r3, #0
 800e274:	d00c      	beq.n	800e290 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800e276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e278:	015a      	lsls	r2, r3, #5
 800e27a:	69fb      	ldr	r3, [r7, #28]
 800e27c:	4413      	add	r3, r2
 800e27e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e282:	461a      	mov	r2, r3
 800e284:	2301      	movs	r3, #1
 800e286:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800e288:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e28a:	6878      	ldr	r0, [r7, #4]
 800e28c:	f000 fdd2 	bl	800ee34 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800e290:	693b      	ldr	r3, [r7, #16]
 800e292:	f003 0308 	and.w	r3, r3, #8
 800e296:	2b00      	cmp	r3, #0
 800e298:	d00c      	beq.n	800e2b4 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800e29a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e29c:	015a      	lsls	r2, r3, #5
 800e29e:	69fb      	ldr	r3, [r7, #28]
 800e2a0:	4413      	add	r3, r2
 800e2a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e2a6:	461a      	mov	r2, r3
 800e2a8:	2308      	movs	r3, #8
 800e2aa:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800e2ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e2ae:	6878      	ldr	r0, [r7, #4]
 800e2b0:	f000 fecc 	bl	800f04c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800e2b4:	693b      	ldr	r3, [r7, #16]
 800e2b6:	f003 0310 	and.w	r3, r3, #16
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d008      	beq.n	800e2d0 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800e2be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2c0:	015a      	lsls	r2, r3, #5
 800e2c2:	69fb      	ldr	r3, [r7, #28]
 800e2c4:	4413      	add	r3, r2
 800e2c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e2ca:	461a      	mov	r2, r3
 800e2cc:	2310      	movs	r3, #16
 800e2ce:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800e2d0:	693b      	ldr	r3, [r7, #16]
 800e2d2:	f003 0320 	and.w	r3, r3, #32
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d008      	beq.n	800e2ec <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800e2da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2dc:	015a      	lsls	r2, r3, #5
 800e2de:	69fb      	ldr	r3, [r7, #28]
 800e2e0:	4413      	add	r3, r2
 800e2e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e2e6:	461a      	mov	r2, r3
 800e2e8:	2320      	movs	r3, #32
 800e2ea:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800e2ec:	693b      	ldr	r3, [r7, #16]
 800e2ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d009      	beq.n	800e30a <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800e2f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2f8:	015a      	lsls	r2, r3, #5
 800e2fa:	69fb      	ldr	r3, [r7, #28]
 800e2fc:	4413      	add	r3, r2
 800e2fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e302:	461a      	mov	r2, r3
 800e304:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e308:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800e30a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e30c:	3301      	adds	r3, #1
 800e30e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800e310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e312:	085b      	lsrs	r3, r3, #1
 800e314:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800e316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d199      	bne.n	800e250 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	4618      	mov	r0, r3
 800e322:	f009 fad7 	bl	80178d4 <USB_ReadInterrupts>
 800e326:	4603      	mov	r3, r0
 800e328:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e32c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e330:	f040 80c4 	bne.w	800e4bc <HAL_PCD_IRQHandler+0x3c6>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	4618      	mov	r0, r3
 800e33a:	f009 faf8 	bl	801792e <USB_ReadDevAllInEpInterrupt>
 800e33e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800e340:	2300      	movs	r3, #0
 800e342:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800e344:	e0b6      	b.n	800e4b4 <HAL_PCD_IRQHandler+0x3be>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800e346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e348:	f003 0301 	and.w	r3, r3, #1
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	f000 80ab 	beq.w	800e4a8 <HAL_PCD_IRQHandler+0x3b2>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e358:	b2d2      	uxtb	r2, r2
 800e35a:	4611      	mov	r1, r2
 800e35c:	4618      	mov	r0, r3
 800e35e:	f009 fb1e 	bl	801799e <USB_ReadDevInEPInterrupt>
 800e362:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800e364:	693b      	ldr	r3, [r7, #16]
 800e366:	f003 0301 	and.w	r3, r3, #1
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d057      	beq.n	800e41e <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800e36e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e370:	f003 030f 	and.w	r3, r3, #15
 800e374:	2201      	movs	r2, #1
 800e376:	fa02 f303 	lsl.w	r3, r2, r3
 800e37a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800e37c:	69fb      	ldr	r3, [r7, #28]
 800e37e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e382:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	43db      	mvns	r3, r3
 800e388:	69f9      	ldr	r1, [r7, #28]
 800e38a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e38e:	4013      	ands	r3, r2
 800e390:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800e392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e394:	015a      	lsls	r2, r3, #5
 800e396:	69fb      	ldr	r3, [r7, #28]
 800e398:	4413      	add	r3, r2
 800e39a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e39e:	461a      	mov	r2, r3
 800e3a0:	2301      	movs	r3, #1
 800e3a2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	691b      	ldr	r3, [r3, #16]
 800e3a8:	2b01      	cmp	r3, #1
 800e3aa:	d132      	bne.n	800e412 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800e3ac:	6879      	ldr	r1, [r7, #4]
 800e3ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e3b0:	4613      	mov	r3, r2
 800e3b2:	00db      	lsls	r3, r3, #3
 800e3b4:	1a9b      	subs	r3, r3, r2
 800e3b6:	009b      	lsls	r3, r3, #2
 800e3b8:	440b      	add	r3, r1
 800e3ba:	3348      	adds	r3, #72	; 0x48
 800e3bc:	6819      	ldr	r1, [r3, #0]
 800e3be:	6878      	ldr	r0, [r7, #4]
 800e3c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e3c2:	4613      	mov	r3, r2
 800e3c4:	00db      	lsls	r3, r3, #3
 800e3c6:	1a9b      	subs	r3, r3, r2
 800e3c8:	009b      	lsls	r3, r3, #2
 800e3ca:	4403      	add	r3, r0
 800e3cc:	3344      	adds	r3, #68	; 0x44
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	4419      	add	r1, r3
 800e3d2:	6878      	ldr	r0, [r7, #4]
 800e3d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e3d6:	4613      	mov	r3, r2
 800e3d8:	00db      	lsls	r3, r3, #3
 800e3da:	1a9b      	subs	r3, r3, r2
 800e3dc:	009b      	lsls	r3, r3, #2
 800e3de:	4403      	add	r3, r0
 800e3e0:	3348      	adds	r3, #72	; 0x48
 800e3e2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800e3e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d113      	bne.n	800e412 <HAL_PCD_IRQHandler+0x31c>
 800e3ea:	6879      	ldr	r1, [r7, #4]
 800e3ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e3ee:	4613      	mov	r3, r2
 800e3f0:	00db      	lsls	r3, r3, #3
 800e3f2:	1a9b      	subs	r3, r3, r2
 800e3f4:	009b      	lsls	r3, r3, #2
 800e3f6:	440b      	add	r3, r1
 800e3f8:	3350      	adds	r3, #80	; 0x50
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d108      	bne.n	800e412 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	6818      	ldr	r0, [r3, #0]
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800e40a:	461a      	mov	r2, r3
 800e40c:	2101      	movs	r1, #1
 800e40e:	f009 fb27 	bl	8017a60 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800e412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e414:	b2db      	uxtb	r3, r3
 800e416:	4619      	mov	r1, r3
 800e418:	6878      	ldr	r0, [r7, #4]
 800e41a:	f00b fa9a 	bl	8019952 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800e41e:	693b      	ldr	r3, [r7, #16]
 800e420:	f003 0308 	and.w	r3, r3, #8
 800e424:	2b00      	cmp	r3, #0
 800e426:	d008      	beq.n	800e43a <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800e428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e42a:	015a      	lsls	r2, r3, #5
 800e42c:	69fb      	ldr	r3, [r7, #28]
 800e42e:	4413      	add	r3, r2
 800e430:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e434:	461a      	mov	r2, r3
 800e436:	2308      	movs	r3, #8
 800e438:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800e43a:	693b      	ldr	r3, [r7, #16]
 800e43c:	f003 0310 	and.w	r3, r3, #16
 800e440:	2b00      	cmp	r3, #0
 800e442:	d008      	beq.n	800e456 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800e444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e446:	015a      	lsls	r2, r3, #5
 800e448:	69fb      	ldr	r3, [r7, #28]
 800e44a:	4413      	add	r3, r2
 800e44c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e450:	461a      	mov	r2, r3
 800e452:	2310      	movs	r3, #16
 800e454:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800e456:	693b      	ldr	r3, [r7, #16]
 800e458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d008      	beq.n	800e472 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800e460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e462:	015a      	lsls	r2, r3, #5
 800e464:	69fb      	ldr	r3, [r7, #28]
 800e466:	4413      	add	r3, r2
 800e468:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e46c:	461a      	mov	r2, r3
 800e46e:	2340      	movs	r3, #64	; 0x40
 800e470:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800e472:	693b      	ldr	r3, [r7, #16]
 800e474:	f003 0302 	and.w	r3, r3, #2
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d00c      	beq.n	800e496 <HAL_PCD_IRQHandler+0x3a0>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800e47c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e47e:	6a38      	ldr	r0, [r7, #32]
 800e480:	f008 fab0 	bl	80169e4 <USB_FlushTxFifo>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800e484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e486:	015a      	lsls	r2, r3, #5
 800e488:	69fb      	ldr	r3, [r7, #28]
 800e48a:	4413      	add	r3, r2
 800e48c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e490:	461a      	mov	r2, r3
 800e492:	2302      	movs	r3, #2
 800e494:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800e496:	693b      	ldr	r3, [r7, #16]
 800e498:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d003      	beq.n	800e4a8 <HAL_PCD_IRQHandler+0x3b2>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800e4a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e4a2:	6878      	ldr	r0, [r7, #4]
 800e4a4:	f000 fc38 	bl	800ed18 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800e4a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4aa:	3301      	adds	r3, #1
 800e4ac:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800e4ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4b0:	085b      	lsrs	r3, r3, #1
 800e4b2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800e4b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	f47f af45 	bne.w	800e346 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	4618      	mov	r0, r3
 800e4c2:	f009 fa07 	bl	80178d4 <USB_ReadInterrupts>
 800e4c6:	4603      	mov	r3, r0
 800e4c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e4cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e4d0:	d122      	bne.n	800e518 <HAL_PCD_IRQHandler+0x422>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800e4d2:	69fb      	ldr	r3, [r7, #28]
 800e4d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e4d8:	685b      	ldr	r3, [r3, #4]
 800e4da:	69fa      	ldr	r2, [r7, #28]
 800e4dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e4e0:	f023 0301 	bic.w	r3, r3, #1
 800e4e4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800e4ec:	2b01      	cmp	r3, #1
 800e4ee:	d108      	bne.n	800e502 <HAL_PCD_IRQHandler+0x40c>
      {
        hpcd->LPM_State = LPM_L0;
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	2200      	movs	r2, #0
 800e4f4:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800e4f8:	2100      	movs	r1, #0
 800e4fa:	6878      	ldr	r0, [r7, #4]
 800e4fc:	f000 fe68 	bl	800f1d0 <HAL_PCDEx_LPM_Callback>
 800e500:	e002      	b.n	800e508 <HAL_PCD_IRQHandler+0x412>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800e502:	6878      	ldr	r0, [r7, #4]
 800e504:	f00b fa9c 	bl	8019a40 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	695a      	ldr	r2, [r3, #20]
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800e516:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	4618      	mov	r0, r3
 800e51e:	f009 f9d9 	bl	80178d4 <USB_ReadInterrupts>
 800e522:	4603      	mov	r3, r0
 800e524:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e528:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e52c:	d112      	bne.n	800e554 <HAL_PCD_IRQHandler+0x45e>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800e52e:	69fb      	ldr	r3, [r7, #28]
 800e530:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e534:	689b      	ldr	r3, [r3, #8]
 800e536:	f003 0301 	and.w	r3, r3, #1
 800e53a:	2b01      	cmp	r3, #1
 800e53c:	d102      	bne.n	800e544 <HAL_PCD_IRQHandler+0x44e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800e53e:	6878      	ldr	r0, [r7, #4]
 800e540:	f00b fa58 	bl	80199f4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	695a      	ldr	r2, [r3, #20]
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800e552:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	4618      	mov	r0, r3
 800e55a:	f009 f9bb 	bl	80178d4 <USB_ReadInterrupts>
 800e55e:	4603      	mov	r3, r0
 800e560:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e564:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e568:	d121      	bne.n	800e5ae <HAL_PCD_IRQHandler+0x4b8>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	695a      	ldr	r2, [r3, #20]
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800e578:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800e580:	2b00      	cmp	r3, #0
 800e582:	d111      	bne.n	800e5a8 <HAL_PCD_IRQHandler+0x4b2>
      {
        hpcd->LPM_State = LPM_L1;
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	2201      	movs	r2, #1
 800e588:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e592:	089b      	lsrs	r3, r3, #2
 800e594:	f003 020f 	and.w	r2, r3, #15
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800e59e:	2101      	movs	r1, #1
 800e5a0:	6878      	ldr	r0, [r7, #4]
 800e5a2:	f000 fe15 	bl	800f1d0 <HAL_PCDEx_LPM_Callback>
 800e5a6:	e002      	b.n	800e5ae <HAL_PCD_IRQHandler+0x4b8>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800e5a8:	6878      	ldr	r0, [r7, #4]
 800e5aa:	f00b fa23 	bl	80199f4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	4618      	mov	r0, r3
 800e5b4:	f009 f98e 	bl	80178d4 <USB_ReadInterrupts>
 800e5b8:	4603      	mov	r3, r0
 800e5ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e5be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e5c2:	f040 80b7 	bne.w	800e734 <HAL_PCD_IRQHandler+0x63e>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800e5c6:	69fb      	ldr	r3, [r7, #28]
 800e5c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e5cc:	685b      	ldr	r3, [r3, #4]
 800e5ce:	69fa      	ldr	r2, [r7, #28]
 800e5d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e5d4:	f023 0301 	bic.w	r3, r3, #1
 800e5d8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	2110      	movs	r1, #16
 800e5e0:	4618      	mov	r0, r3
 800e5e2:	f008 f9ff 	bl	80169e4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800e5e6:	2300      	movs	r3, #0
 800e5e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e5ea:	e046      	b.n	800e67a <HAL_PCD_IRQHandler+0x584>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800e5ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5ee:	015a      	lsls	r2, r3, #5
 800e5f0:	69fb      	ldr	r3, [r7, #28]
 800e5f2:	4413      	add	r3, r2
 800e5f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e5f8:	461a      	mov	r2, r3
 800e5fa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e5fe:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800e600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e602:	015a      	lsls	r2, r3, #5
 800e604:	69fb      	ldr	r3, [r7, #28]
 800e606:	4413      	add	r3, r2
 800e608:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e610:	0151      	lsls	r1, r2, #5
 800e612:	69fa      	ldr	r2, [r7, #28]
 800e614:	440a      	add	r2, r1
 800e616:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e61a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e61e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800e620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e622:	015a      	lsls	r2, r3, #5
 800e624:	69fb      	ldr	r3, [r7, #28]
 800e626:	4413      	add	r3, r2
 800e628:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e62c:	461a      	mov	r2, r3
 800e62e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e632:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800e634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e636:	015a      	lsls	r2, r3, #5
 800e638:	69fb      	ldr	r3, [r7, #28]
 800e63a:	4413      	add	r3, r2
 800e63c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e644:	0151      	lsls	r1, r2, #5
 800e646:	69fa      	ldr	r2, [r7, #28]
 800e648:	440a      	add	r2, r1
 800e64a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e64e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e652:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800e654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e656:	015a      	lsls	r2, r3, #5
 800e658:	69fb      	ldr	r3, [r7, #28]
 800e65a:	4413      	add	r3, r2
 800e65c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e664:	0151      	lsls	r1, r2, #5
 800e666:	69fa      	ldr	r2, [r7, #28]
 800e668:	440a      	add	r2, r1
 800e66a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e66e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e672:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800e674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e676:	3301      	adds	r3, #1
 800e678:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	685b      	ldr	r3, [r3, #4]
 800e67e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e680:	429a      	cmp	r2, r3
 800e682:	d3b3      	bcc.n	800e5ec <HAL_PCD_IRQHandler+0x4f6>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800e684:	69fb      	ldr	r3, [r7, #28]
 800e686:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e68a:	69db      	ldr	r3, [r3, #28]
 800e68c:	69fa      	ldr	r2, [r7, #28]
 800e68e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e692:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800e696:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d016      	beq.n	800e6ce <HAL_PCD_IRQHandler+0x5d8>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800e6a0:	69fb      	ldr	r3, [r7, #28]
 800e6a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e6a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e6aa:	69fa      	ldr	r2, [r7, #28]
 800e6ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e6b0:	f043 030b 	orr.w	r3, r3, #11
 800e6b4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800e6b8:	69fb      	ldr	r3, [r7, #28]
 800e6ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e6be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e6c0:	69fa      	ldr	r2, [r7, #28]
 800e6c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e6c6:	f043 030b 	orr.w	r3, r3, #11
 800e6ca:	6453      	str	r3, [r2, #68]	; 0x44
 800e6cc:	e015      	b.n	800e6fa <HAL_PCD_IRQHandler+0x604>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800e6ce:	69fb      	ldr	r3, [r7, #28]
 800e6d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e6d4:	695a      	ldr	r2, [r3, #20]
 800e6d6:	69fb      	ldr	r3, [r7, #28]
 800e6d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e6dc:	4619      	mov	r1, r3
 800e6de:	f242 032b 	movw	r3, #8235	; 0x202b
 800e6e2:	4313      	orrs	r3, r2
 800e6e4:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800e6e6:	69fb      	ldr	r3, [r7, #28]
 800e6e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e6ec:	691b      	ldr	r3, [r3, #16]
 800e6ee:	69fa      	ldr	r2, [r7, #28]
 800e6f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e6f4:	f043 030b 	orr.w	r3, r3, #11
 800e6f8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800e6fa:	69fb      	ldr	r3, [r7, #28]
 800e6fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	69fa      	ldr	r2, [r7, #28]
 800e704:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e708:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800e70c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	6818      	ldr	r0, [r3, #0]
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	691b      	ldr	r3, [r3, #16]
 800e716:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800e71e:	461a      	mov	r2, r3
 800e720:	f009 f99e 	bl	8017a60 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	695a      	ldr	r2, [r3, #20]
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800e732:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	4618      	mov	r0, r3
 800e73a:	f009 f8cb 	bl	80178d4 <USB_ReadInterrupts>
 800e73e:	4603      	mov	r3, r0
 800e740:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e744:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e748:	d124      	bne.n	800e794 <HAL_PCD_IRQHandler+0x69e>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	4618      	mov	r0, r3
 800e750:	f009 f962 	bl	8017a18 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	4618      	mov	r0, r3
 800e75a:	f008 f9bc 	bl	8016ad6 <USB_GetDevSpeed>
 800e75e:	4603      	mov	r3, r0
 800e760:	461a      	mov	r2, r3
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	681c      	ldr	r4, [r3, #0]
 800e76a:	f001 fce5 	bl	8010138 <HAL_RCC_GetHCLKFreq>
 800e76e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800e774:	b2db      	uxtb	r3, r3
 800e776:	461a      	mov	r2, r3
 800e778:	4620      	mov	r0, r4
 800e77a:	f007 fec5 	bl	8016508 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800e77e:	6878      	ldr	r0, [r7, #4]
 800e780:	f00b f90f 	bl	80199a2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	695a      	ldr	r2, [r3, #20]
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800e792:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	4618      	mov	r0, r3
 800e79a:	f009 f89b 	bl	80178d4 <USB_ReadInterrupts>
 800e79e:	4603      	mov	r3, r0
 800e7a0:	f003 0308 	and.w	r3, r3, #8
 800e7a4:	2b08      	cmp	r3, #8
 800e7a6:	d10a      	bne.n	800e7be <HAL_PCD_IRQHandler+0x6c8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800e7a8:	6878      	ldr	r0, [r7, #4]
 800e7aa:	f00b f8ec 	bl	8019986 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	695a      	ldr	r2, [r3, #20]
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	f002 0208 	and.w	r2, r2, #8
 800e7bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	4618      	mov	r0, r3
 800e7c4:	f009 f886 	bl	80178d4 <USB_ReadInterrupts>
 800e7c8:	4603      	mov	r3, r0
 800e7ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e7ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e7d2:	d10f      	bne.n	800e7f4 <HAL_PCD_IRQHandler+0x6fe>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800e7d4:	2300      	movs	r3, #0
 800e7d6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800e7d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7da:	b2db      	uxtb	r3, r3
 800e7dc:	4619      	mov	r1, r3
 800e7de:	6878      	ldr	r0, [r7, #4]
 800e7e0:	f00b f94e 	bl	8019a80 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	695a      	ldr	r2, [r3, #20]
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800e7f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	4618      	mov	r0, r3
 800e7fa:	f009 f86b 	bl	80178d4 <USB_ReadInterrupts>
 800e7fe:	4603      	mov	r3, r0
 800e800:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e804:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e808:	d10f      	bne.n	800e82a <HAL_PCD_IRQHandler+0x734>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800e80a:	2300      	movs	r3, #0
 800e80c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800e80e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e810:	b2db      	uxtb	r3, r3
 800e812:	4619      	mov	r1, r3
 800e814:	6878      	ldr	r0, [r7, #4]
 800e816:	f00b f921 	bl	8019a5c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	695a      	ldr	r2, [r3, #20]
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800e828:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	4618      	mov	r0, r3
 800e830:	f009 f850 	bl	80178d4 <USB_ReadInterrupts>
 800e834:	4603      	mov	r3, r0
 800e836:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e83a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e83e:	d10a      	bne.n	800e856 <HAL_PCD_IRQHandler+0x760>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800e840:	6878      	ldr	r0, [r7, #4]
 800e842:	f00b f92f 	bl	8019aa4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	695a      	ldr	r2, [r3, #20]
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800e854:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	4618      	mov	r0, r3
 800e85c:	f009 f83a 	bl	80178d4 <USB_ReadInterrupts>
 800e860:	4603      	mov	r3, r0
 800e862:	f003 0304 	and.w	r3, r3, #4
 800e866:	2b04      	cmp	r3, #4
 800e868:	d115      	bne.n	800e896 <HAL_PCD_IRQHandler+0x7a0>
    {
      temp = hpcd->Instance->GOTGINT;
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	685b      	ldr	r3, [r3, #4]
 800e870:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800e872:	69bb      	ldr	r3, [r7, #24]
 800e874:	f003 0304 	and.w	r3, r3, #4
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d002      	beq.n	800e882 <HAL_PCD_IRQHandler+0x78c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800e87c:	6878      	ldr	r0, [r7, #4]
 800e87e:	f00b f91f 	bl	8019ac0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	6859      	ldr	r1, [r3, #4]
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	69ba      	ldr	r2, [r7, #24]
 800e88e:	430a      	orrs	r2, r1
 800e890:	605a      	str	r2, [r3, #4]
 800e892:	e000      	b.n	800e896 <HAL_PCD_IRQHandler+0x7a0>
      return;
 800e894:	bf00      	nop
    }
  }
}
 800e896:	3734      	adds	r7, #52	; 0x34
 800e898:	46bd      	mov	sp, r7
 800e89a:	bd90      	pop	{r4, r7, pc}

0800e89c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800e89c:	b580      	push	{r7, lr}
 800e89e:	b082      	sub	sp, #8
 800e8a0:	af00      	add	r7, sp, #0
 800e8a2:	6078      	str	r0, [r7, #4]
 800e8a4:	460b      	mov	r3, r1
 800e8a6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800e8ae:	2b01      	cmp	r3, #1
 800e8b0:	d101      	bne.n	800e8b6 <HAL_PCD_SetAddress+0x1a>
 800e8b2:	2302      	movs	r3, #2
 800e8b4:	e013      	b.n	800e8de <HAL_PCD_SetAddress+0x42>
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	2201      	movs	r2, #1
 800e8ba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	78fa      	ldrb	r2, [r7, #3]
 800e8c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	78fa      	ldrb	r2, [r7, #3]
 800e8cc:	4611      	mov	r1, r2
 800e8ce:	4618      	mov	r0, r3
 800e8d0:	f008 ff98 	bl	8017804 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	2200      	movs	r2, #0
 800e8d8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800e8dc:	2300      	movs	r3, #0
}
 800e8de:	4618      	mov	r0, r3
 800e8e0:	3708      	adds	r7, #8
 800e8e2:	46bd      	mov	sp, r7
 800e8e4:	bd80      	pop	{r7, pc}

0800e8e6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800e8e6:	b580      	push	{r7, lr}
 800e8e8:	b084      	sub	sp, #16
 800e8ea:	af00      	add	r7, sp, #0
 800e8ec:	6078      	str	r0, [r7, #4]
 800e8ee:	4608      	mov	r0, r1
 800e8f0:	4611      	mov	r1, r2
 800e8f2:	461a      	mov	r2, r3
 800e8f4:	4603      	mov	r3, r0
 800e8f6:	70fb      	strb	r3, [r7, #3]
 800e8f8:	460b      	mov	r3, r1
 800e8fa:	803b      	strh	r3, [r7, #0]
 800e8fc:	4613      	mov	r3, r2
 800e8fe:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800e900:	2300      	movs	r3, #0
 800e902:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800e904:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e908:	2b00      	cmp	r3, #0
 800e90a:	da0f      	bge.n	800e92c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e90c:	78fb      	ldrb	r3, [r7, #3]
 800e90e:	f003 020f 	and.w	r2, r3, #15
 800e912:	4613      	mov	r3, r2
 800e914:	00db      	lsls	r3, r3, #3
 800e916:	1a9b      	subs	r3, r3, r2
 800e918:	009b      	lsls	r3, r3, #2
 800e91a:	3338      	adds	r3, #56	; 0x38
 800e91c:	687a      	ldr	r2, [r7, #4]
 800e91e:	4413      	add	r3, r2
 800e920:	3304      	adds	r3, #4
 800e922:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	2201      	movs	r2, #1
 800e928:	705a      	strb	r2, [r3, #1]
 800e92a:	e00f      	b.n	800e94c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e92c:	78fb      	ldrb	r3, [r7, #3]
 800e92e:	f003 020f 	and.w	r2, r3, #15
 800e932:	4613      	mov	r3, r2
 800e934:	00db      	lsls	r3, r3, #3
 800e936:	1a9b      	subs	r3, r3, r2
 800e938:	009b      	lsls	r3, r3, #2
 800e93a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800e93e:	687a      	ldr	r2, [r7, #4]
 800e940:	4413      	add	r3, r2
 800e942:	3304      	adds	r3, #4
 800e944:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	2200      	movs	r2, #0
 800e94a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800e94c:	78fb      	ldrb	r3, [r7, #3]
 800e94e:	f003 030f 	and.w	r3, r3, #15
 800e952:	b2da      	uxtb	r2, r3
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800e958:	883a      	ldrh	r2, [r7, #0]
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	78ba      	ldrb	r2, [r7, #2]
 800e962:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	785b      	ldrb	r3, [r3, #1]
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d004      	beq.n	800e976 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	781b      	ldrb	r3, [r3, #0]
 800e970:	b29a      	uxth	r2, r3
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800e976:	78bb      	ldrb	r3, [r7, #2]
 800e978:	2b02      	cmp	r3, #2
 800e97a:	d102      	bne.n	800e982 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	2200      	movs	r2, #0
 800e980:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800e988:	2b01      	cmp	r3, #1
 800e98a:	d101      	bne.n	800e990 <HAL_PCD_EP_Open+0xaa>
 800e98c:	2302      	movs	r3, #2
 800e98e:	e00e      	b.n	800e9ae <HAL_PCD_EP_Open+0xc8>
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	2201      	movs	r2, #1
 800e994:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	68f9      	ldr	r1, [r7, #12]
 800e99e:	4618      	mov	r0, r3
 800e9a0:	f008 f8be 	bl	8016b20 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	2200      	movs	r2, #0
 800e9a8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800e9ac:	7afb      	ldrb	r3, [r7, #11]
}
 800e9ae:	4618      	mov	r0, r3
 800e9b0:	3710      	adds	r7, #16
 800e9b2:	46bd      	mov	sp, r7
 800e9b4:	bd80      	pop	{r7, pc}

0800e9b6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800e9b6:	b580      	push	{r7, lr}
 800e9b8:	b084      	sub	sp, #16
 800e9ba:	af00      	add	r7, sp, #0
 800e9bc:	6078      	str	r0, [r7, #4]
 800e9be:	460b      	mov	r3, r1
 800e9c0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800e9c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	da0f      	bge.n	800e9ea <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e9ca:	78fb      	ldrb	r3, [r7, #3]
 800e9cc:	f003 020f 	and.w	r2, r3, #15
 800e9d0:	4613      	mov	r3, r2
 800e9d2:	00db      	lsls	r3, r3, #3
 800e9d4:	1a9b      	subs	r3, r3, r2
 800e9d6:	009b      	lsls	r3, r3, #2
 800e9d8:	3338      	adds	r3, #56	; 0x38
 800e9da:	687a      	ldr	r2, [r7, #4]
 800e9dc:	4413      	add	r3, r2
 800e9de:	3304      	adds	r3, #4
 800e9e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	2201      	movs	r2, #1
 800e9e6:	705a      	strb	r2, [r3, #1]
 800e9e8:	e00f      	b.n	800ea0a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e9ea:	78fb      	ldrb	r3, [r7, #3]
 800e9ec:	f003 020f 	and.w	r2, r3, #15
 800e9f0:	4613      	mov	r3, r2
 800e9f2:	00db      	lsls	r3, r3, #3
 800e9f4:	1a9b      	subs	r3, r3, r2
 800e9f6:	009b      	lsls	r3, r3, #2
 800e9f8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800e9fc:	687a      	ldr	r2, [r7, #4]
 800e9fe:	4413      	add	r3, r2
 800ea00:	3304      	adds	r3, #4
 800ea02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	2200      	movs	r2, #0
 800ea08:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800ea0a:	78fb      	ldrb	r3, [r7, #3]
 800ea0c:	f003 030f 	and.w	r3, r3, #15
 800ea10:	b2da      	uxtb	r2, r3
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800ea1c:	2b01      	cmp	r3, #1
 800ea1e:	d101      	bne.n	800ea24 <HAL_PCD_EP_Close+0x6e>
 800ea20:	2302      	movs	r3, #2
 800ea22:	e00e      	b.n	800ea42 <HAL_PCD_EP_Close+0x8c>
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	2201      	movs	r2, #1
 800ea28:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	68f9      	ldr	r1, [r7, #12]
 800ea32:	4618      	mov	r0, r3
 800ea34:	f008 f8fc 	bl	8016c30 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	2200      	movs	r2, #0
 800ea3c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800ea40:	2300      	movs	r3, #0
}
 800ea42:	4618      	mov	r0, r3
 800ea44:	3710      	adds	r7, #16
 800ea46:	46bd      	mov	sp, r7
 800ea48:	bd80      	pop	{r7, pc}

0800ea4a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800ea4a:	b580      	push	{r7, lr}
 800ea4c:	b086      	sub	sp, #24
 800ea4e:	af00      	add	r7, sp, #0
 800ea50:	60f8      	str	r0, [r7, #12]
 800ea52:	607a      	str	r2, [r7, #4]
 800ea54:	603b      	str	r3, [r7, #0]
 800ea56:	460b      	mov	r3, r1
 800ea58:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ea5a:	7afb      	ldrb	r3, [r7, #11]
 800ea5c:	f003 020f 	and.w	r2, r3, #15
 800ea60:	4613      	mov	r3, r2
 800ea62:	00db      	lsls	r3, r3, #3
 800ea64:	1a9b      	subs	r3, r3, r2
 800ea66:	009b      	lsls	r3, r3, #2
 800ea68:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800ea6c:	68fa      	ldr	r2, [r7, #12]
 800ea6e:	4413      	add	r3, r2
 800ea70:	3304      	adds	r3, #4
 800ea72:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800ea74:	697b      	ldr	r3, [r7, #20]
 800ea76:	687a      	ldr	r2, [r7, #4]
 800ea78:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800ea7a:	697b      	ldr	r3, [r7, #20]
 800ea7c:	683a      	ldr	r2, [r7, #0]
 800ea7e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800ea80:	697b      	ldr	r3, [r7, #20]
 800ea82:	2200      	movs	r2, #0
 800ea84:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800ea86:	697b      	ldr	r3, [r7, #20]
 800ea88:	2200      	movs	r2, #0
 800ea8a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ea8c:	7afb      	ldrb	r3, [r7, #11]
 800ea8e:	f003 030f 	and.w	r3, r3, #15
 800ea92:	b2da      	uxtb	r2, r3
 800ea94:	697b      	ldr	r3, [r7, #20]
 800ea96:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	691b      	ldr	r3, [r3, #16]
 800ea9c:	2b01      	cmp	r3, #1
 800ea9e:	d102      	bne.n	800eaa6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800eaa0:	687a      	ldr	r2, [r7, #4]
 800eaa2:	697b      	ldr	r3, [r7, #20]
 800eaa4:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800eaa6:	7afb      	ldrb	r3, [r7, #11]
 800eaa8:	f003 030f 	and.w	r3, r3, #15
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d109      	bne.n	800eac4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800eab0:	68fb      	ldr	r3, [r7, #12]
 800eab2:	6818      	ldr	r0, [r3, #0]
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	691b      	ldr	r3, [r3, #16]
 800eab8:	b2db      	uxtb	r3, r3
 800eaba:	461a      	mov	r2, r3
 800eabc:	6979      	ldr	r1, [r7, #20]
 800eabe:	f008 fbdf 	bl	8017280 <USB_EP0StartXfer>
 800eac2:	e008      	b.n	800ead6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	6818      	ldr	r0, [r3, #0]
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	691b      	ldr	r3, [r3, #16]
 800eacc:	b2db      	uxtb	r3, r3
 800eace:	461a      	mov	r2, r3
 800ead0:	6979      	ldr	r1, [r7, #20]
 800ead2:	f008 f989 	bl	8016de8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800ead6:	2300      	movs	r3, #0
}
 800ead8:	4618      	mov	r0, r3
 800eada:	3718      	adds	r7, #24
 800eadc:	46bd      	mov	sp, r7
 800eade:	bd80      	pop	{r7, pc}

0800eae0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800eae0:	b480      	push	{r7}
 800eae2:	b083      	sub	sp, #12
 800eae4:	af00      	add	r7, sp, #0
 800eae6:	6078      	str	r0, [r7, #4]
 800eae8:	460b      	mov	r3, r1
 800eaea:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800eaec:	78fb      	ldrb	r3, [r7, #3]
 800eaee:	f003 020f 	and.w	r2, r3, #15
 800eaf2:	6879      	ldr	r1, [r7, #4]
 800eaf4:	4613      	mov	r3, r2
 800eaf6:	00db      	lsls	r3, r3, #3
 800eaf8:	1a9b      	subs	r3, r3, r2
 800eafa:	009b      	lsls	r3, r3, #2
 800eafc:	440b      	add	r3, r1
 800eafe:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800eb02:	681b      	ldr	r3, [r3, #0]
}
 800eb04:	4618      	mov	r0, r3
 800eb06:	370c      	adds	r7, #12
 800eb08:	46bd      	mov	sp, r7
 800eb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb0e:	4770      	bx	lr

0800eb10 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800eb10:	b580      	push	{r7, lr}
 800eb12:	b086      	sub	sp, #24
 800eb14:	af00      	add	r7, sp, #0
 800eb16:	60f8      	str	r0, [r7, #12]
 800eb18:	607a      	str	r2, [r7, #4]
 800eb1a:	603b      	str	r3, [r7, #0]
 800eb1c:	460b      	mov	r3, r1
 800eb1e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800eb20:	7afb      	ldrb	r3, [r7, #11]
 800eb22:	f003 020f 	and.w	r2, r3, #15
 800eb26:	4613      	mov	r3, r2
 800eb28:	00db      	lsls	r3, r3, #3
 800eb2a:	1a9b      	subs	r3, r3, r2
 800eb2c:	009b      	lsls	r3, r3, #2
 800eb2e:	3338      	adds	r3, #56	; 0x38
 800eb30:	68fa      	ldr	r2, [r7, #12]
 800eb32:	4413      	add	r3, r2
 800eb34:	3304      	adds	r3, #4
 800eb36:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800eb38:	697b      	ldr	r3, [r7, #20]
 800eb3a:	687a      	ldr	r2, [r7, #4]
 800eb3c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800eb3e:	697b      	ldr	r3, [r7, #20]
 800eb40:	683a      	ldr	r2, [r7, #0]
 800eb42:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800eb44:	697b      	ldr	r3, [r7, #20]
 800eb46:	2200      	movs	r2, #0
 800eb48:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800eb4a:	697b      	ldr	r3, [r7, #20]
 800eb4c:	2201      	movs	r2, #1
 800eb4e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800eb50:	7afb      	ldrb	r3, [r7, #11]
 800eb52:	f003 030f 	and.w	r3, r3, #15
 800eb56:	b2da      	uxtb	r2, r3
 800eb58:	697b      	ldr	r3, [r7, #20]
 800eb5a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	691b      	ldr	r3, [r3, #16]
 800eb60:	2b01      	cmp	r3, #1
 800eb62:	d102      	bne.n	800eb6a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800eb64:	687a      	ldr	r2, [r7, #4]
 800eb66:	697b      	ldr	r3, [r7, #20]
 800eb68:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800eb6a:	7afb      	ldrb	r3, [r7, #11]
 800eb6c:	f003 030f 	and.w	r3, r3, #15
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d109      	bne.n	800eb88 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	6818      	ldr	r0, [r3, #0]
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	691b      	ldr	r3, [r3, #16]
 800eb7c:	b2db      	uxtb	r3, r3
 800eb7e:	461a      	mov	r2, r3
 800eb80:	6979      	ldr	r1, [r7, #20]
 800eb82:	f008 fb7d 	bl	8017280 <USB_EP0StartXfer>
 800eb86:	e008      	b.n	800eb9a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	6818      	ldr	r0, [r3, #0]
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	691b      	ldr	r3, [r3, #16]
 800eb90:	b2db      	uxtb	r3, r3
 800eb92:	461a      	mov	r2, r3
 800eb94:	6979      	ldr	r1, [r7, #20]
 800eb96:	f008 f927 	bl	8016de8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800eb9a:	2300      	movs	r3, #0
}
 800eb9c:	4618      	mov	r0, r3
 800eb9e:	3718      	adds	r7, #24
 800eba0:	46bd      	mov	sp, r7
 800eba2:	bd80      	pop	{r7, pc}

0800eba4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800eba4:	b580      	push	{r7, lr}
 800eba6:	b084      	sub	sp, #16
 800eba8:	af00      	add	r7, sp, #0
 800ebaa:	6078      	str	r0, [r7, #4]
 800ebac:	460b      	mov	r3, r1
 800ebae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800ebb0:	78fb      	ldrb	r3, [r7, #3]
 800ebb2:	f003 020f 	and.w	r2, r3, #15
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	685b      	ldr	r3, [r3, #4]
 800ebba:	429a      	cmp	r2, r3
 800ebbc:	d901      	bls.n	800ebc2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800ebbe:	2301      	movs	r3, #1
 800ebc0:	e050      	b.n	800ec64 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800ebc2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	da0f      	bge.n	800ebea <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ebca:	78fb      	ldrb	r3, [r7, #3]
 800ebcc:	f003 020f 	and.w	r2, r3, #15
 800ebd0:	4613      	mov	r3, r2
 800ebd2:	00db      	lsls	r3, r3, #3
 800ebd4:	1a9b      	subs	r3, r3, r2
 800ebd6:	009b      	lsls	r3, r3, #2
 800ebd8:	3338      	adds	r3, #56	; 0x38
 800ebda:	687a      	ldr	r2, [r7, #4]
 800ebdc:	4413      	add	r3, r2
 800ebde:	3304      	adds	r3, #4
 800ebe0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	2201      	movs	r2, #1
 800ebe6:	705a      	strb	r2, [r3, #1]
 800ebe8:	e00d      	b.n	800ec06 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800ebea:	78fa      	ldrb	r2, [r7, #3]
 800ebec:	4613      	mov	r3, r2
 800ebee:	00db      	lsls	r3, r3, #3
 800ebf0:	1a9b      	subs	r3, r3, r2
 800ebf2:	009b      	lsls	r3, r3, #2
 800ebf4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800ebf8:	687a      	ldr	r2, [r7, #4]
 800ebfa:	4413      	add	r3, r2
 800ebfc:	3304      	adds	r3, #4
 800ebfe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	2200      	movs	r2, #0
 800ec04:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	2201      	movs	r2, #1
 800ec0a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ec0c:	78fb      	ldrb	r3, [r7, #3]
 800ec0e:	f003 030f 	and.w	r3, r3, #15
 800ec12:	b2da      	uxtb	r2, r3
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800ec1e:	2b01      	cmp	r3, #1
 800ec20:	d101      	bne.n	800ec26 <HAL_PCD_EP_SetStall+0x82>
 800ec22:	2302      	movs	r3, #2
 800ec24:	e01e      	b.n	800ec64 <HAL_PCD_EP_SetStall+0xc0>
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	2201      	movs	r2, #1
 800ec2a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	68f9      	ldr	r1, [r7, #12]
 800ec34:	4618      	mov	r0, r3
 800ec36:	f008 fd11 	bl	801765c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800ec3a:	78fb      	ldrb	r3, [r7, #3]
 800ec3c:	f003 030f 	and.w	r3, r3, #15
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d10a      	bne.n	800ec5a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	6818      	ldr	r0, [r3, #0]
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	691b      	ldr	r3, [r3, #16]
 800ec4c:	b2d9      	uxtb	r1, r3
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800ec54:	461a      	mov	r2, r3
 800ec56:	f008 ff03 	bl	8017a60 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	2200      	movs	r2, #0
 800ec5e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800ec62:	2300      	movs	r3, #0
}
 800ec64:	4618      	mov	r0, r3
 800ec66:	3710      	adds	r7, #16
 800ec68:	46bd      	mov	sp, r7
 800ec6a:	bd80      	pop	{r7, pc}

0800ec6c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ec6c:	b580      	push	{r7, lr}
 800ec6e:	b084      	sub	sp, #16
 800ec70:	af00      	add	r7, sp, #0
 800ec72:	6078      	str	r0, [r7, #4]
 800ec74:	460b      	mov	r3, r1
 800ec76:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800ec78:	78fb      	ldrb	r3, [r7, #3]
 800ec7a:	f003 020f 	and.w	r2, r3, #15
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	685b      	ldr	r3, [r3, #4]
 800ec82:	429a      	cmp	r2, r3
 800ec84:	d901      	bls.n	800ec8a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800ec86:	2301      	movs	r3, #1
 800ec88:	e042      	b.n	800ed10 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800ec8a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	da0f      	bge.n	800ecb2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ec92:	78fb      	ldrb	r3, [r7, #3]
 800ec94:	f003 020f 	and.w	r2, r3, #15
 800ec98:	4613      	mov	r3, r2
 800ec9a:	00db      	lsls	r3, r3, #3
 800ec9c:	1a9b      	subs	r3, r3, r2
 800ec9e:	009b      	lsls	r3, r3, #2
 800eca0:	3338      	adds	r3, #56	; 0x38
 800eca2:	687a      	ldr	r2, [r7, #4]
 800eca4:	4413      	add	r3, r2
 800eca6:	3304      	adds	r3, #4
 800eca8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	2201      	movs	r2, #1
 800ecae:	705a      	strb	r2, [r3, #1]
 800ecb0:	e00f      	b.n	800ecd2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ecb2:	78fb      	ldrb	r3, [r7, #3]
 800ecb4:	f003 020f 	and.w	r2, r3, #15
 800ecb8:	4613      	mov	r3, r2
 800ecba:	00db      	lsls	r3, r3, #3
 800ecbc:	1a9b      	subs	r3, r3, r2
 800ecbe:	009b      	lsls	r3, r3, #2
 800ecc0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800ecc4:	687a      	ldr	r2, [r7, #4]
 800ecc6:	4413      	add	r3, r2
 800ecc8:	3304      	adds	r3, #4
 800ecca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	2200      	movs	r2, #0
 800ecd0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	2200      	movs	r2, #0
 800ecd6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ecd8:	78fb      	ldrb	r3, [r7, #3]
 800ecda:	f003 030f 	and.w	r3, r3, #15
 800ecde:	b2da      	uxtb	r2, r3
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800ecea:	2b01      	cmp	r3, #1
 800ecec:	d101      	bne.n	800ecf2 <HAL_PCD_EP_ClrStall+0x86>
 800ecee:	2302      	movs	r3, #2
 800ecf0:	e00e      	b.n	800ed10 <HAL_PCD_EP_ClrStall+0xa4>
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	2201      	movs	r2, #1
 800ecf6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	68f9      	ldr	r1, [r7, #12]
 800ed00:	4618      	mov	r0, r3
 800ed02:	f008 fd19 	bl	8017738 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	2200      	movs	r2, #0
 800ed0a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800ed0e:	2300      	movs	r3, #0
}
 800ed10:	4618      	mov	r0, r3
 800ed12:	3710      	adds	r7, #16
 800ed14:	46bd      	mov	sp, r7
 800ed16:	bd80      	pop	{r7, pc}

0800ed18 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800ed18:	b580      	push	{r7, lr}
 800ed1a:	b08a      	sub	sp, #40	; 0x28
 800ed1c:	af02      	add	r7, sp, #8
 800ed1e:	6078      	str	r0, [r7, #4]
 800ed20:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ed28:	697b      	ldr	r3, [r7, #20]
 800ed2a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800ed2c:	683a      	ldr	r2, [r7, #0]
 800ed2e:	4613      	mov	r3, r2
 800ed30:	00db      	lsls	r3, r3, #3
 800ed32:	1a9b      	subs	r3, r3, r2
 800ed34:	009b      	lsls	r3, r3, #2
 800ed36:	3338      	adds	r3, #56	; 0x38
 800ed38:	687a      	ldr	r2, [r7, #4]
 800ed3a:	4413      	add	r3, r2
 800ed3c:	3304      	adds	r3, #4
 800ed3e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	699a      	ldr	r2, [r3, #24]
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	695b      	ldr	r3, [r3, #20]
 800ed48:	429a      	cmp	r2, r3
 800ed4a:	d901      	bls.n	800ed50 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800ed4c:	2301      	movs	r3, #1
 800ed4e:	e06c      	b.n	800ee2a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	695a      	ldr	r2, [r3, #20]
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	699b      	ldr	r3, [r3, #24]
 800ed58:	1ad3      	subs	r3, r2, r3
 800ed5a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	689b      	ldr	r3, [r3, #8]
 800ed60:	69fa      	ldr	r2, [r7, #28]
 800ed62:	429a      	cmp	r2, r3
 800ed64:	d902      	bls.n	800ed6c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	689b      	ldr	r3, [r3, #8]
 800ed6a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800ed6c:	69fb      	ldr	r3, [r7, #28]
 800ed6e:	3303      	adds	r3, #3
 800ed70:	089b      	lsrs	r3, r3, #2
 800ed72:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800ed74:	e02b      	b.n	800edce <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	695a      	ldr	r2, [r3, #20]
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	699b      	ldr	r3, [r3, #24]
 800ed7e:	1ad3      	subs	r3, r2, r3
 800ed80:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	689b      	ldr	r3, [r3, #8]
 800ed86:	69fa      	ldr	r2, [r7, #28]
 800ed88:	429a      	cmp	r2, r3
 800ed8a:	d902      	bls.n	800ed92 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	689b      	ldr	r3, [r3, #8]
 800ed90:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800ed92:	69fb      	ldr	r3, [r7, #28]
 800ed94:	3303      	adds	r3, #3
 800ed96:	089b      	lsrs	r3, r3, #2
 800ed98:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	68d9      	ldr	r1, [r3, #12]
 800ed9e:	683b      	ldr	r3, [r7, #0]
 800eda0:	b2da      	uxtb	r2, r3
 800eda2:	69fb      	ldr	r3, [r7, #28]
 800eda4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800edaa:	b2db      	uxtb	r3, r3
 800edac:	9300      	str	r3, [sp, #0]
 800edae:	4603      	mov	r3, r0
 800edb0:	6978      	ldr	r0, [r7, #20]
 800edb2:	f008 fbbd 	bl	8017530 <USB_WritePacket>

    ep->xfer_buff  += len;
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	68da      	ldr	r2, [r3, #12]
 800edba:	69fb      	ldr	r3, [r7, #28]
 800edbc:	441a      	add	r2, r3
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	699a      	ldr	r2, [r3, #24]
 800edc6:	69fb      	ldr	r3, [r7, #28]
 800edc8:	441a      	add	r2, r3
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800edce:	683b      	ldr	r3, [r7, #0]
 800edd0:	015a      	lsls	r2, r3, #5
 800edd2:	693b      	ldr	r3, [r7, #16]
 800edd4:	4413      	add	r3, r2
 800edd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800edda:	699b      	ldr	r3, [r3, #24]
 800eddc:	b29b      	uxth	r3, r3
 800edde:	69ba      	ldr	r2, [r7, #24]
 800ede0:	429a      	cmp	r2, r3
 800ede2:	d809      	bhi.n	800edf8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800ede4:	68fb      	ldr	r3, [r7, #12]
 800ede6:	699a      	ldr	r2, [r3, #24]
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800edec:	429a      	cmp	r2, r3
 800edee:	d203      	bcs.n	800edf8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	695b      	ldr	r3, [r3, #20]
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d1be      	bne.n	800ed76 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	695a      	ldr	r2, [r3, #20]
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	699b      	ldr	r3, [r3, #24]
 800ee00:	429a      	cmp	r2, r3
 800ee02:	d811      	bhi.n	800ee28 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800ee04:	683b      	ldr	r3, [r7, #0]
 800ee06:	f003 030f 	and.w	r3, r3, #15
 800ee0a:	2201      	movs	r2, #1
 800ee0c:	fa02 f303 	lsl.w	r3, r2, r3
 800ee10:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800ee12:	693b      	ldr	r3, [r7, #16]
 800ee14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ee18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ee1a:	68bb      	ldr	r3, [r7, #8]
 800ee1c:	43db      	mvns	r3, r3
 800ee1e:	6939      	ldr	r1, [r7, #16]
 800ee20:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ee24:	4013      	ands	r3, r2
 800ee26:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800ee28:	2300      	movs	r3, #0
}
 800ee2a:	4618      	mov	r0, r3
 800ee2c:	3720      	adds	r7, #32
 800ee2e:	46bd      	mov	sp, r7
 800ee30:	bd80      	pop	{r7, pc}
	...

0800ee34 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800ee34:	b580      	push	{r7, lr}
 800ee36:	b086      	sub	sp, #24
 800ee38:	af00      	add	r7, sp, #0
 800ee3a:	6078      	str	r0, [r7, #4]
 800ee3c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ee44:	697b      	ldr	r3, [r7, #20]
 800ee46:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800ee48:	697b      	ldr	r3, [r7, #20]
 800ee4a:	333c      	adds	r3, #60	; 0x3c
 800ee4c:	3304      	adds	r3, #4
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800ee52:	683b      	ldr	r3, [r7, #0]
 800ee54:	015a      	lsls	r2, r3, #5
 800ee56:	693b      	ldr	r3, [r7, #16]
 800ee58:	4413      	add	r3, r2
 800ee5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ee5e:	689b      	ldr	r3, [r3, #8]
 800ee60:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	691b      	ldr	r3, [r3, #16]
 800ee66:	2b01      	cmp	r3, #1
 800ee68:	f040 80a0 	bne.w	800efac <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800ee6c:	68bb      	ldr	r3, [r7, #8]
 800ee6e:	f003 0308 	and.w	r3, r3, #8
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d015      	beq.n	800eea2 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	4a72      	ldr	r2, [pc, #456]	; (800f044 <PCD_EP_OutXfrComplete_int+0x210>)
 800ee7a:	4293      	cmp	r3, r2
 800ee7c:	f240 80dd 	bls.w	800f03a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800ee80:	68bb      	ldr	r3, [r7, #8]
 800ee82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	f000 80d7 	beq.w	800f03a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800ee8c:	683b      	ldr	r3, [r7, #0]
 800ee8e:	015a      	lsls	r2, r3, #5
 800ee90:	693b      	ldr	r3, [r7, #16]
 800ee92:	4413      	add	r3, r2
 800ee94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ee98:	461a      	mov	r2, r3
 800ee9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ee9e:	6093      	str	r3, [r2, #8]
 800eea0:	e0cb      	b.n	800f03a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800eea2:	68bb      	ldr	r3, [r7, #8]
 800eea4:	f003 0320 	and.w	r3, r3, #32
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d009      	beq.n	800eec0 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800eeac:	683b      	ldr	r3, [r7, #0]
 800eeae:	015a      	lsls	r2, r3, #5
 800eeb0:	693b      	ldr	r3, [r7, #16]
 800eeb2:	4413      	add	r3, r2
 800eeb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eeb8:	461a      	mov	r2, r3
 800eeba:	2320      	movs	r3, #32
 800eebc:	6093      	str	r3, [r2, #8]
 800eebe:	e0bc      	b.n	800f03a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800eec0:	68bb      	ldr	r3, [r7, #8]
 800eec2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	f040 80b7 	bne.w	800f03a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	4a5d      	ldr	r2, [pc, #372]	; (800f044 <PCD_EP_OutXfrComplete_int+0x210>)
 800eed0:	4293      	cmp	r3, r2
 800eed2:	d90f      	bls.n	800eef4 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800eed4:	68bb      	ldr	r3, [r7, #8]
 800eed6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d00a      	beq.n	800eef4 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800eede:	683b      	ldr	r3, [r7, #0]
 800eee0:	015a      	lsls	r2, r3, #5
 800eee2:	693b      	ldr	r3, [r7, #16]
 800eee4:	4413      	add	r3, r2
 800eee6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eeea:	461a      	mov	r2, r3
 800eeec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800eef0:	6093      	str	r3, [r2, #8]
 800eef2:	e0a2      	b.n	800f03a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800eef4:	6879      	ldr	r1, [r7, #4]
 800eef6:	683a      	ldr	r2, [r7, #0]
 800eef8:	4613      	mov	r3, r2
 800eefa:	00db      	lsls	r3, r3, #3
 800eefc:	1a9b      	subs	r3, r3, r2
 800eefe:	009b      	lsls	r3, r3, #2
 800ef00:	440b      	add	r3, r1
 800ef02:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800ef06:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800ef08:	683b      	ldr	r3, [r7, #0]
 800ef0a:	0159      	lsls	r1, r3, #5
 800ef0c:	693b      	ldr	r3, [r7, #16]
 800ef0e:	440b      	add	r3, r1
 800ef10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ef14:	691b      	ldr	r3, [r3, #16]
 800ef16:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800ef1a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800ef1c:	6878      	ldr	r0, [r7, #4]
 800ef1e:	683a      	ldr	r2, [r7, #0]
 800ef20:	4613      	mov	r3, r2
 800ef22:	00db      	lsls	r3, r3, #3
 800ef24:	1a9b      	subs	r3, r3, r2
 800ef26:	009b      	lsls	r3, r3, #2
 800ef28:	4403      	add	r3, r0
 800ef2a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800ef2e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800ef30:	6879      	ldr	r1, [r7, #4]
 800ef32:	683a      	ldr	r2, [r7, #0]
 800ef34:	4613      	mov	r3, r2
 800ef36:	00db      	lsls	r3, r3, #3
 800ef38:	1a9b      	subs	r3, r3, r2
 800ef3a:	009b      	lsls	r3, r3, #2
 800ef3c:	440b      	add	r3, r1
 800ef3e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800ef42:	6819      	ldr	r1, [r3, #0]
 800ef44:	6878      	ldr	r0, [r7, #4]
 800ef46:	683a      	ldr	r2, [r7, #0]
 800ef48:	4613      	mov	r3, r2
 800ef4a:	00db      	lsls	r3, r3, #3
 800ef4c:	1a9b      	subs	r3, r3, r2
 800ef4e:	009b      	lsls	r3, r3, #2
 800ef50:	4403      	add	r3, r0
 800ef52:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	4419      	add	r1, r3
 800ef5a:	6878      	ldr	r0, [r7, #4]
 800ef5c:	683a      	ldr	r2, [r7, #0]
 800ef5e:	4613      	mov	r3, r2
 800ef60:	00db      	lsls	r3, r3, #3
 800ef62:	1a9b      	subs	r3, r3, r2
 800ef64:	009b      	lsls	r3, r3, #2
 800ef66:	4403      	add	r3, r0
 800ef68:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800ef6c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800ef6e:	683b      	ldr	r3, [r7, #0]
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d114      	bne.n	800ef9e <PCD_EP_OutXfrComplete_int+0x16a>
 800ef74:	6879      	ldr	r1, [r7, #4]
 800ef76:	683a      	ldr	r2, [r7, #0]
 800ef78:	4613      	mov	r3, r2
 800ef7a:	00db      	lsls	r3, r3, #3
 800ef7c:	1a9b      	subs	r3, r3, r2
 800ef7e:	009b      	lsls	r3, r3, #2
 800ef80:	440b      	add	r3, r1
 800ef82:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d108      	bne.n	800ef9e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	6818      	ldr	r0, [r3, #0]
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800ef96:	461a      	mov	r2, r3
 800ef98:	2101      	movs	r1, #1
 800ef9a:	f008 fd61 	bl	8017a60 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800ef9e:	683b      	ldr	r3, [r7, #0]
 800efa0:	b2db      	uxtb	r3, r3
 800efa2:	4619      	mov	r1, r3
 800efa4:	6878      	ldr	r0, [r7, #4]
 800efa6:	f00a fcb9 	bl	801991c <HAL_PCD_DataOutStageCallback>
 800efaa:	e046      	b.n	800f03a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	4a26      	ldr	r2, [pc, #152]	; (800f048 <PCD_EP_OutXfrComplete_int+0x214>)
 800efb0:	4293      	cmp	r3, r2
 800efb2:	d124      	bne.n	800effe <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800efb4:	68bb      	ldr	r3, [r7, #8]
 800efb6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d00a      	beq.n	800efd4 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800efbe:	683b      	ldr	r3, [r7, #0]
 800efc0:	015a      	lsls	r2, r3, #5
 800efc2:	693b      	ldr	r3, [r7, #16]
 800efc4:	4413      	add	r3, r2
 800efc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800efca:	461a      	mov	r2, r3
 800efcc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800efd0:	6093      	str	r3, [r2, #8]
 800efd2:	e032      	b.n	800f03a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800efd4:	68bb      	ldr	r3, [r7, #8]
 800efd6:	f003 0320 	and.w	r3, r3, #32
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d008      	beq.n	800eff0 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800efde:	683b      	ldr	r3, [r7, #0]
 800efe0:	015a      	lsls	r2, r3, #5
 800efe2:	693b      	ldr	r3, [r7, #16]
 800efe4:	4413      	add	r3, r2
 800efe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800efea:	461a      	mov	r2, r3
 800efec:	2320      	movs	r3, #32
 800efee:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800eff0:	683b      	ldr	r3, [r7, #0]
 800eff2:	b2db      	uxtb	r3, r3
 800eff4:	4619      	mov	r1, r3
 800eff6:	6878      	ldr	r0, [r7, #4]
 800eff8:	f00a fc90 	bl	801991c <HAL_PCD_DataOutStageCallback>
 800effc:	e01d      	b.n	800f03a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800effe:	683b      	ldr	r3, [r7, #0]
 800f000:	2b00      	cmp	r3, #0
 800f002:	d114      	bne.n	800f02e <PCD_EP_OutXfrComplete_int+0x1fa>
 800f004:	6879      	ldr	r1, [r7, #4]
 800f006:	683a      	ldr	r2, [r7, #0]
 800f008:	4613      	mov	r3, r2
 800f00a:	00db      	lsls	r3, r3, #3
 800f00c:	1a9b      	subs	r3, r3, r2
 800f00e:	009b      	lsls	r3, r3, #2
 800f010:	440b      	add	r3, r1
 800f012:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d108      	bne.n	800f02e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	6818      	ldr	r0, [r3, #0]
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800f026:	461a      	mov	r2, r3
 800f028:	2100      	movs	r1, #0
 800f02a:	f008 fd19 	bl	8017a60 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800f02e:	683b      	ldr	r3, [r7, #0]
 800f030:	b2db      	uxtb	r3, r3
 800f032:	4619      	mov	r1, r3
 800f034:	6878      	ldr	r0, [r7, #4]
 800f036:	f00a fc71 	bl	801991c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800f03a:	2300      	movs	r3, #0
}
 800f03c:	4618      	mov	r0, r3
 800f03e:	3718      	adds	r7, #24
 800f040:	46bd      	mov	sp, r7
 800f042:	bd80      	pop	{r7, pc}
 800f044:	4f54300a 	.word	0x4f54300a
 800f048:	4f54310a 	.word	0x4f54310a

0800f04c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800f04c:	b580      	push	{r7, lr}
 800f04e:	b086      	sub	sp, #24
 800f050:	af00      	add	r7, sp, #0
 800f052:	6078      	str	r0, [r7, #4]
 800f054:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f05c:	697b      	ldr	r3, [r7, #20]
 800f05e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800f060:	697b      	ldr	r3, [r7, #20]
 800f062:	333c      	adds	r3, #60	; 0x3c
 800f064:	3304      	adds	r3, #4
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800f06a:	683b      	ldr	r3, [r7, #0]
 800f06c:	015a      	lsls	r2, r3, #5
 800f06e:	693b      	ldr	r3, [r7, #16]
 800f070:	4413      	add	r3, r2
 800f072:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f076:	689b      	ldr	r3, [r3, #8]
 800f078:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	4a15      	ldr	r2, [pc, #84]	; (800f0d4 <PCD_EP_OutSetupPacket_int+0x88>)
 800f07e:	4293      	cmp	r3, r2
 800f080:	d90e      	bls.n	800f0a0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800f082:	68bb      	ldr	r3, [r7, #8]
 800f084:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d009      	beq.n	800f0a0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800f08c:	683b      	ldr	r3, [r7, #0]
 800f08e:	015a      	lsls	r2, r3, #5
 800f090:	693b      	ldr	r3, [r7, #16]
 800f092:	4413      	add	r3, r2
 800f094:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f098:	461a      	mov	r2, r3
 800f09a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f09e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800f0a0:	6878      	ldr	r0, [r7, #4]
 800f0a2:	f00a fc29 	bl	80198f8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	4a0a      	ldr	r2, [pc, #40]	; (800f0d4 <PCD_EP_OutSetupPacket_int+0x88>)
 800f0aa:	4293      	cmp	r3, r2
 800f0ac:	d90c      	bls.n	800f0c8 <PCD_EP_OutSetupPacket_int+0x7c>
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	691b      	ldr	r3, [r3, #16]
 800f0b2:	2b01      	cmp	r3, #1
 800f0b4:	d108      	bne.n	800f0c8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	6818      	ldr	r0, [r3, #0]
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800f0c0:	461a      	mov	r2, r3
 800f0c2:	2101      	movs	r1, #1
 800f0c4:	f008 fccc 	bl	8017a60 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800f0c8:	2300      	movs	r3, #0
}
 800f0ca:	4618      	mov	r0, r3
 800f0cc:	3718      	adds	r7, #24
 800f0ce:	46bd      	mov	sp, r7
 800f0d0:	bd80      	pop	{r7, pc}
 800f0d2:	bf00      	nop
 800f0d4:	4f54300a 	.word	0x4f54300a

0800f0d8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800f0d8:	b480      	push	{r7}
 800f0da:	b085      	sub	sp, #20
 800f0dc:	af00      	add	r7, sp, #0
 800f0de:	6078      	str	r0, [r7, #4]
 800f0e0:	460b      	mov	r3, r1
 800f0e2:	70fb      	strb	r3, [r7, #3]
 800f0e4:	4613      	mov	r3, r2
 800f0e6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0ee:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800f0f0:	78fb      	ldrb	r3, [r7, #3]
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d107      	bne.n	800f106 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800f0f6:	883b      	ldrh	r3, [r7, #0]
 800f0f8:	0419      	lsls	r1, r3, #16
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	68ba      	ldr	r2, [r7, #8]
 800f100:	430a      	orrs	r2, r1
 800f102:	629a      	str	r2, [r3, #40]	; 0x28
 800f104:	e028      	b.n	800f158 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f10c:	0c1b      	lsrs	r3, r3, #16
 800f10e:	68ba      	ldr	r2, [r7, #8]
 800f110:	4413      	add	r3, r2
 800f112:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800f114:	2300      	movs	r3, #0
 800f116:	73fb      	strb	r3, [r7, #15]
 800f118:	e00d      	b.n	800f136 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	681a      	ldr	r2, [r3, #0]
 800f11e:	7bfb      	ldrb	r3, [r7, #15]
 800f120:	3340      	adds	r3, #64	; 0x40
 800f122:	009b      	lsls	r3, r3, #2
 800f124:	4413      	add	r3, r2
 800f126:	685b      	ldr	r3, [r3, #4]
 800f128:	0c1b      	lsrs	r3, r3, #16
 800f12a:	68ba      	ldr	r2, [r7, #8]
 800f12c:	4413      	add	r3, r2
 800f12e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800f130:	7bfb      	ldrb	r3, [r7, #15]
 800f132:	3301      	adds	r3, #1
 800f134:	73fb      	strb	r3, [r7, #15]
 800f136:	7bfa      	ldrb	r2, [r7, #15]
 800f138:	78fb      	ldrb	r3, [r7, #3]
 800f13a:	3b01      	subs	r3, #1
 800f13c:	429a      	cmp	r2, r3
 800f13e:	d3ec      	bcc.n	800f11a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800f140:	883b      	ldrh	r3, [r7, #0]
 800f142:	0418      	lsls	r0, r3, #16
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	6819      	ldr	r1, [r3, #0]
 800f148:	78fb      	ldrb	r3, [r7, #3]
 800f14a:	3b01      	subs	r3, #1
 800f14c:	68ba      	ldr	r2, [r7, #8]
 800f14e:	4302      	orrs	r2, r0
 800f150:	3340      	adds	r3, #64	; 0x40
 800f152:	009b      	lsls	r3, r3, #2
 800f154:	440b      	add	r3, r1
 800f156:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800f158:	2300      	movs	r3, #0
}
 800f15a:	4618      	mov	r0, r3
 800f15c:	3714      	adds	r7, #20
 800f15e:	46bd      	mov	sp, r7
 800f160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f164:	4770      	bx	lr

0800f166 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800f166:	b480      	push	{r7}
 800f168:	b083      	sub	sp, #12
 800f16a:	af00      	add	r7, sp, #0
 800f16c:	6078      	str	r0, [r7, #4]
 800f16e:	460b      	mov	r3, r1
 800f170:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	887a      	ldrh	r2, [r7, #2]
 800f178:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800f17a:	2300      	movs	r3, #0
}
 800f17c:	4618      	mov	r0, r3
 800f17e:	370c      	adds	r7, #12
 800f180:	46bd      	mov	sp, r7
 800f182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f186:	4770      	bx	lr

0800f188 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800f188:	b480      	push	{r7}
 800f18a:	b085      	sub	sp, #20
 800f18c:	af00      	add	r7, sp, #0
 800f18e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	2201      	movs	r2, #1
 800f19a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	2200      	movs	r2, #0
 800f1a2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	699b      	ldr	r3, [r3, #24]
 800f1aa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f1b6:	4b05      	ldr	r3, [pc, #20]	; (800f1cc <HAL_PCDEx_ActivateLPM+0x44>)
 800f1b8:	4313      	orrs	r3, r2
 800f1ba:	68fa      	ldr	r2, [r7, #12]
 800f1bc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800f1be:	2300      	movs	r3, #0
}
 800f1c0:	4618      	mov	r0, r3
 800f1c2:	3714      	adds	r7, #20
 800f1c4:	46bd      	mov	sp, r7
 800f1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ca:	4770      	bx	lr
 800f1cc:	10000003 	.word	0x10000003

0800f1d0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800f1d0:	b480      	push	{r7}
 800f1d2:	b083      	sub	sp, #12
 800f1d4:	af00      	add	r7, sp, #0
 800f1d6:	6078      	str	r0, [r7, #4]
 800f1d8:	460b      	mov	r3, r1
 800f1da:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800f1dc:	bf00      	nop
 800f1de:	370c      	adds	r7, #12
 800f1e0:	46bd      	mov	sp, r7
 800f1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1e6:	4770      	bx	lr

0800f1e8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800f1e8:	b580      	push	{r7, lr}
 800f1ea:	b084      	sub	sp, #16
 800f1ec:	af00      	add	r7, sp, #0
 800f1ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800f1f0:	4b19      	ldr	r3, [pc, #100]	; (800f258 <HAL_PWREx_ConfigSupply+0x70>)
 800f1f2:	68db      	ldr	r3, [r3, #12]
 800f1f4:	f003 0304 	and.w	r3, r3, #4
 800f1f8:	2b04      	cmp	r3, #4
 800f1fa:	d00a      	beq.n	800f212 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800f1fc:	4b16      	ldr	r3, [pc, #88]	; (800f258 <HAL_PWREx_ConfigSupply+0x70>)
 800f1fe:	68db      	ldr	r3, [r3, #12]
 800f200:	f003 0307 	and.w	r3, r3, #7
 800f204:	687a      	ldr	r2, [r7, #4]
 800f206:	429a      	cmp	r2, r3
 800f208:	d001      	beq.n	800f20e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800f20a:	2301      	movs	r3, #1
 800f20c:	e01f      	b.n	800f24e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800f20e:	2300      	movs	r3, #0
 800f210:	e01d      	b.n	800f24e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800f212:	4b11      	ldr	r3, [pc, #68]	; (800f258 <HAL_PWREx_ConfigSupply+0x70>)
 800f214:	68db      	ldr	r3, [r3, #12]
 800f216:	f023 0207 	bic.w	r2, r3, #7
 800f21a:	490f      	ldr	r1, [pc, #60]	; (800f258 <HAL_PWREx_ConfigSupply+0x70>)
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	4313      	orrs	r3, r2
 800f220:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800f222:	f7fa fe07 	bl	8009e34 <HAL_GetTick>
 800f226:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800f228:	e009      	b.n	800f23e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800f22a:	f7fa fe03 	bl	8009e34 <HAL_GetTick>
 800f22e:	4602      	mov	r2, r0
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	1ad3      	subs	r3, r2, r3
 800f234:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f238:	d901      	bls.n	800f23e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800f23a:	2301      	movs	r3, #1
 800f23c:	e007      	b.n	800f24e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800f23e:	4b06      	ldr	r3, [pc, #24]	; (800f258 <HAL_PWREx_ConfigSupply+0x70>)
 800f240:	685b      	ldr	r3, [r3, #4]
 800f242:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f246:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f24a:	d1ee      	bne.n	800f22a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800f24c:	2300      	movs	r3, #0
}
 800f24e:	4618      	mov	r0, r3
 800f250:	3710      	adds	r7, #16
 800f252:	46bd      	mov	sp, r7
 800f254:	bd80      	pop	{r7, pc}
 800f256:	bf00      	nop
 800f258:	58024800 	.word	0x58024800

0800f25c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800f25c:	b480      	push	{r7}
 800f25e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800f260:	4b05      	ldr	r3, [pc, #20]	; (800f278 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800f262:	68db      	ldr	r3, [r3, #12]
 800f264:	4a04      	ldr	r2, [pc, #16]	; (800f278 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800f266:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800f26a:	60d3      	str	r3, [r2, #12]
}
 800f26c:	bf00      	nop
 800f26e:	46bd      	mov	sp, r7
 800f270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f274:	4770      	bx	lr
 800f276:	bf00      	nop
 800f278:	58024800 	.word	0x58024800

0800f27c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800f27c:	b580      	push	{r7, lr}
 800f27e:	b08c      	sub	sp, #48	; 0x30
 800f280:	af00      	add	r7, sp, #0
 800f282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	2b00      	cmp	r3, #0
 800f288:	d102      	bne.n	800f290 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800f28a:	2301      	movs	r3, #1
 800f28c:	f000 bc1d 	b.w	800faca <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	f003 0301 	and.w	r3, r3, #1
 800f298:	2b00      	cmp	r3, #0
 800f29a:	f000 8087 	beq.w	800f3ac <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f29e:	4b99      	ldr	r3, [pc, #612]	; (800f504 <HAL_RCC_OscConfig+0x288>)
 800f2a0:	691b      	ldr	r3, [r3, #16]
 800f2a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f2a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800f2a8:	4b96      	ldr	r3, [pc, #600]	; (800f504 <HAL_RCC_OscConfig+0x288>)
 800f2aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2ac:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800f2ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2b0:	2b10      	cmp	r3, #16
 800f2b2:	d007      	beq.n	800f2c4 <HAL_RCC_OscConfig+0x48>
 800f2b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2b6:	2b18      	cmp	r3, #24
 800f2b8:	d110      	bne.n	800f2dc <HAL_RCC_OscConfig+0x60>
 800f2ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2bc:	f003 0303 	and.w	r3, r3, #3
 800f2c0:	2b02      	cmp	r3, #2
 800f2c2:	d10b      	bne.n	800f2dc <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f2c4:	4b8f      	ldr	r3, [pc, #572]	; (800f504 <HAL_RCC_OscConfig+0x288>)
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d06c      	beq.n	800f3aa <HAL_RCC_OscConfig+0x12e>
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	685b      	ldr	r3, [r3, #4]
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d168      	bne.n	800f3aa <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 800f2d8:	2301      	movs	r3, #1
 800f2da:	e3f6      	b.n	800faca <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	685b      	ldr	r3, [r3, #4]
 800f2e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f2e4:	d106      	bne.n	800f2f4 <HAL_RCC_OscConfig+0x78>
 800f2e6:	4b87      	ldr	r3, [pc, #540]	; (800f504 <HAL_RCC_OscConfig+0x288>)
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	4a86      	ldr	r2, [pc, #536]	; (800f504 <HAL_RCC_OscConfig+0x288>)
 800f2ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f2f0:	6013      	str	r3, [r2, #0]
 800f2f2:	e02e      	b.n	800f352 <HAL_RCC_OscConfig+0xd6>
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	685b      	ldr	r3, [r3, #4]
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d10c      	bne.n	800f316 <HAL_RCC_OscConfig+0x9a>
 800f2fc:	4b81      	ldr	r3, [pc, #516]	; (800f504 <HAL_RCC_OscConfig+0x288>)
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	4a80      	ldr	r2, [pc, #512]	; (800f504 <HAL_RCC_OscConfig+0x288>)
 800f302:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f306:	6013      	str	r3, [r2, #0]
 800f308:	4b7e      	ldr	r3, [pc, #504]	; (800f504 <HAL_RCC_OscConfig+0x288>)
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	4a7d      	ldr	r2, [pc, #500]	; (800f504 <HAL_RCC_OscConfig+0x288>)
 800f30e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f312:	6013      	str	r3, [r2, #0]
 800f314:	e01d      	b.n	800f352 <HAL_RCC_OscConfig+0xd6>
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	685b      	ldr	r3, [r3, #4]
 800f31a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800f31e:	d10c      	bne.n	800f33a <HAL_RCC_OscConfig+0xbe>
 800f320:	4b78      	ldr	r3, [pc, #480]	; (800f504 <HAL_RCC_OscConfig+0x288>)
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	4a77      	ldr	r2, [pc, #476]	; (800f504 <HAL_RCC_OscConfig+0x288>)
 800f326:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800f32a:	6013      	str	r3, [r2, #0]
 800f32c:	4b75      	ldr	r3, [pc, #468]	; (800f504 <HAL_RCC_OscConfig+0x288>)
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	4a74      	ldr	r2, [pc, #464]	; (800f504 <HAL_RCC_OscConfig+0x288>)
 800f332:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f336:	6013      	str	r3, [r2, #0]
 800f338:	e00b      	b.n	800f352 <HAL_RCC_OscConfig+0xd6>
 800f33a:	4b72      	ldr	r3, [pc, #456]	; (800f504 <HAL_RCC_OscConfig+0x288>)
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	4a71      	ldr	r2, [pc, #452]	; (800f504 <HAL_RCC_OscConfig+0x288>)
 800f340:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f344:	6013      	str	r3, [r2, #0]
 800f346:	4b6f      	ldr	r3, [pc, #444]	; (800f504 <HAL_RCC_OscConfig+0x288>)
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	4a6e      	ldr	r2, [pc, #440]	; (800f504 <HAL_RCC_OscConfig+0x288>)
 800f34c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f350:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	685b      	ldr	r3, [r3, #4]
 800f356:	2b00      	cmp	r3, #0
 800f358:	d013      	beq.n	800f382 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f35a:	f7fa fd6b 	bl	8009e34 <HAL_GetTick>
 800f35e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800f360:	e008      	b.n	800f374 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800f362:	f7fa fd67 	bl	8009e34 <HAL_GetTick>
 800f366:	4602      	mov	r2, r0
 800f368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f36a:	1ad3      	subs	r3, r2, r3
 800f36c:	2b64      	cmp	r3, #100	; 0x64
 800f36e:	d901      	bls.n	800f374 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800f370:	2303      	movs	r3, #3
 800f372:	e3aa      	b.n	800faca <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800f374:	4b63      	ldr	r3, [pc, #396]	; (800f504 <HAL_RCC_OscConfig+0x288>)
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d0f0      	beq.n	800f362 <HAL_RCC_OscConfig+0xe6>
 800f380:	e014      	b.n	800f3ac <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f382:	f7fa fd57 	bl	8009e34 <HAL_GetTick>
 800f386:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800f388:	e008      	b.n	800f39c <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800f38a:	f7fa fd53 	bl	8009e34 <HAL_GetTick>
 800f38e:	4602      	mov	r2, r0
 800f390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f392:	1ad3      	subs	r3, r2, r3
 800f394:	2b64      	cmp	r3, #100	; 0x64
 800f396:	d901      	bls.n	800f39c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 800f398:	2303      	movs	r3, #3
 800f39a:	e396      	b.n	800faca <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800f39c:	4b59      	ldr	r3, [pc, #356]	; (800f504 <HAL_RCC_OscConfig+0x288>)
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d1f0      	bne.n	800f38a <HAL_RCC_OscConfig+0x10e>
 800f3a8:	e000      	b.n	800f3ac <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f3aa:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	f003 0302 	and.w	r3, r3, #2
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	f000 80cb 	beq.w	800f550 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f3ba:	4b52      	ldr	r3, [pc, #328]	; (800f504 <HAL_RCC_OscConfig+0x288>)
 800f3bc:	691b      	ldr	r3, [r3, #16]
 800f3be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f3c2:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800f3c4:	4b4f      	ldr	r3, [pc, #316]	; (800f504 <HAL_RCC_OscConfig+0x288>)
 800f3c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f3c8:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800f3ca:	6a3b      	ldr	r3, [r7, #32]
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d007      	beq.n	800f3e0 <HAL_RCC_OscConfig+0x164>
 800f3d0:	6a3b      	ldr	r3, [r7, #32]
 800f3d2:	2b18      	cmp	r3, #24
 800f3d4:	d156      	bne.n	800f484 <HAL_RCC_OscConfig+0x208>
 800f3d6:	69fb      	ldr	r3, [r7, #28]
 800f3d8:	f003 0303 	and.w	r3, r3, #3
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d151      	bne.n	800f484 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800f3e0:	4b48      	ldr	r3, [pc, #288]	; (800f504 <HAL_RCC_OscConfig+0x288>)
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	f003 0304 	and.w	r3, r3, #4
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d005      	beq.n	800f3f8 <HAL_RCC_OscConfig+0x17c>
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	68db      	ldr	r3, [r3, #12]
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d101      	bne.n	800f3f8 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 800f3f4:	2301      	movs	r3, #1
 800f3f6:	e368      	b.n	800faca <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800f3f8:	4b42      	ldr	r3, [pc, #264]	; (800f504 <HAL_RCC_OscConfig+0x288>)
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	f023 0219 	bic.w	r2, r3, #25
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	68db      	ldr	r3, [r3, #12]
 800f404:	493f      	ldr	r1, [pc, #252]	; (800f504 <HAL_RCC_OscConfig+0x288>)
 800f406:	4313      	orrs	r3, r2
 800f408:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800f40a:	f7fa fd13 	bl	8009e34 <HAL_GetTick>
 800f40e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800f410:	e008      	b.n	800f424 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800f412:	f7fa fd0f 	bl	8009e34 <HAL_GetTick>
 800f416:	4602      	mov	r2, r0
 800f418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f41a:	1ad3      	subs	r3, r2, r3
 800f41c:	2b02      	cmp	r3, #2
 800f41e:	d901      	bls.n	800f424 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 800f420:	2303      	movs	r3, #3
 800f422:	e352      	b.n	800faca <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800f424:	4b37      	ldr	r3, [pc, #220]	; (800f504 <HAL_RCC_OscConfig+0x288>)
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	f003 0304 	and.w	r3, r3, #4
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d0f0      	beq.n	800f412 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f430:	f7fa fd30 	bl	8009e94 <HAL_GetREVID>
 800f434:	4603      	mov	r3, r0
 800f436:	f241 0203 	movw	r2, #4099	; 0x1003
 800f43a:	4293      	cmp	r3, r2
 800f43c:	d817      	bhi.n	800f46e <HAL_RCC_OscConfig+0x1f2>
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	691b      	ldr	r3, [r3, #16]
 800f442:	2b40      	cmp	r3, #64	; 0x40
 800f444:	d108      	bne.n	800f458 <HAL_RCC_OscConfig+0x1dc>
 800f446:	4b2f      	ldr	r3, [pc, #188]	; (800f504 <HAL_RCC_OscConfig+0x288>)
 800f448:	685b      	ldr	r3, [r3, #4]
 800f44a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800f44e:	4a2d      	ldr	r2, [pc, #180]	; (800f504 <HAL_RCC_OscConfig+0x288>)
 800f450:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f454:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800f456:	e07b      	b.n	800f550 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f458:	4b2a      	ldr	r3, [pc, #168]	; (800f504 <HAL_RCC_OscConfig+0x288>)
 800f45a:	685b      	ldr	r3, [r3, #4]
 800f45c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	691b      	ldr	r3, [r3, #16]
 800f464:	031b      	lsls	r3, r3, #12
 800f466:	4927      	ldr	r1, [pc, #156]	; (800f504 <HAL_RCC_OscConfig+0x288>)
 800f468:	4313      	orrs	r3, r2
 800f46a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800f46c:	e070      	b.n	800f550 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f46e:	4b25      	ldr	r3, [pc, #148]	; (800f504 <HAL_RCC_OscConfig+0x288>)
 800f470:	685b      	ldr	r3, [r3, #4]
 800f472:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	691b      	ldr	r3, [r3, #16]
 800f47a:	061b      	lsls	r3, r3, #24
 800f47c:	4921      	ldr	r1, [pc, #132]	; (800f504 <HAL_RCC_OscConfig+0x288>)
 800f47e:	4313      	orrs	r3, r2
 800f480:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800f482:	e065      	b.n	800f550 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	68db      	ldr	r3, [r3, #12]
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d048      	beq.n	800f51e <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800f48c:	4b1d      	ldr	r3, [pc, #116]	; (800f504 <HAL_RCC_OscConfig+0x288>)
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	f023 0219 	bic.w	r2, r3, #25
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	68db      	ldr	r3, [r3, #12]
 800f498:	491a      	ldr	r1, [pc, #104]	; (800f504 <HAL_RCC_OscConfig+0x288>)
 800f49a:	4313      	orrs	r3, r2
 800f49c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f49e:	f7fa fcc9 	bl	8009e34 <HAL_GetTick>
 800f4a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800f4a4:	e008      	b.n	800f4b8 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800f4a6:	f7fa fcc5 	bl	8009e34 <HAL_GetTick>
 800f4aa:	4602      	mov	r2, r0
 800f4ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4ae:	1ad3      	subs	r3, r2, r3
 800f4b0:	2b02      	cmp	r3, #2
 800f4b2:	d901      	bls.n	800f4b8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 800f4b4:	2303      	movs	r3, #3
 800f4b6:	e308      	b.n	800faca <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800f4b8:	4b12      	ldr	r3, [pc, #72]	; (800f504 <HAL_RCC_OscConfig+0x288>)
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	f003 0304 	and.w	r3, r3, #4
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d0f0      	beq.n	800f4a6 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f4c4:	f7fa fce6 	bl	8009e94 <HAL_GetREVID>
 800f4c8:	4603      	mov	r3, r0
 800f4ca:	f241 0203 	movw	r2, #4099	; 0x1003
 800f4ce:	4293      	cmp	r3, r2
 800f4d0:	d81a      	bhi.n	800f508 <HAL_RCC_OscConfig+0x28c>
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	691b      	ldr	r3, [r3, #16]
 800f4d6:	2b40      	cmp	r3, #64	; 0x40
 800f4d8:	d108      	bne.n	800f4ec <HAL_RCC_OscConfig+0x270>
 800f4da:	4b0a      	ldr	r3, [pc, #40]	; (800f504 <HAL_RCC_OscConfig+0x288>)
 800f4dc:	685b      	ldr	r3, [r3, #4]
 800f4de:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800f4e2:	4a08      	ldr	r2, [pc, #32]	; (800f504 <HAL_RCC_OscConfig+0x288>)
 800f4e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f4e8:	6053      	str	r3, [r2, #4]
 800f4ea:	e031      	b.n	800f550 <HAL_RCC_OscConfig+0x2d4>
 800f4ec:	4b05      	ldr	r3, [pc, #20]	; (800f504 <HAL_RCC_OscConfig+0x288>)
 800f4ee:	685b      	ldr	r3, [r3, #4]
 800f4f0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	691b      	ldr	r3, [r3, #16]
 800f4f8:	031b      	lsls	r3, r3, #12
 800f4fa:	4902      	ldr	r1, [pc, #8]	; (800f504 <HAL_RCC_OscConfig+0x288>)
 800f4fc:	4313      	orrs	r3, r2
 800f4fe:	604b      	str	r3, [r1, #4]
 800f500:	e026      	b.n	800f550 <HAL_RCC_OscConfig+0x2d4>
 800f502:	bf00      	nop
 800f504:	58024400 	.word	0x58024400
 800f508:	4b9a      	ldr	r3, [pc, #616]	; (800f774 <HAL_RCC_OscConfig+0x4f8>)
 800f50a:	685b      	ldr	r3, [r3, #4]
 800f50c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	691b      	ldr	r3, [r3, #16]
 800f514:	061b      	lsls	r3, r3, #24
 800f516:	4997      	ldr	r1, [pc, #604]	; (800f774 <HAL_RCC_OscConfig+0x4f8>)
 800f518:	4313      	orrs	r3, r2
 800f51a:	604b      	str	r3, [r1, #4]
 800f51c:	e018      	b.n	800f550 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800f51e:	4b95      	ldr	r3, [pc, #596]	; (800f774 <HAL_RCC_OscConfig+0x4f8>)
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	4a94      	ldr	r2, [pc, #592]	; (800f774 <HAL_RCC_OscConfig+0x4f8>)
 800f524:	f023 0301 	bic.w	r3, r3, #1
 800f528:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f52a:	f7fa fc83 	bl	8009e34 <HAL_GetTick>
 800f52e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800f530:	e008      	b.n	800f544 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800f532:	f7fa fc7f 	bl	8009e34 <HAL_GetTick>
 800f536:	4602      	mov	r2, r0
 800f538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f53a:	1ad3      	subs	r3, r2, r3
 800f53c:	2b02      	cmp	r3, #2
 800f53e:	d901      	bls.n	800f544 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800f540:	2303      	movs	r3, #3
 800f542:	e2c2      	b.n	800faca <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800f544:	4b8b      	ldr	r3, [pc, #556]	; (800f774 <HAL_RCC_OscConfig+0x4f8>)
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	f003 0304 	and.w	r3, r3, #4
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d1f0      	bne.n	800f532 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	681b      	ldr	r3, [r3, #0]
 800f554:	f003 0310 	and.w	r3, r3, #16
 800f558:	2b00      	cmp	r3, #0
 800f55a:	f000 80a9 	beq.w	800f6b0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f55e:	4b85      	ldr	r3, [pc, #532]	; (800f774 <HAL_RCC_OscConfig+0x4f8>)
 800f560:	691b      	ldr	r3, [r3, #16]
 800f562:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f566:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800f568:	4b82      	ldr	r3, [pc, #520]	; (800f774 <HAL_RCC_OscConfig+0x4f8>)
 800f56a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f56c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800f56e:	69bb      	ldr	r3, [r7, #24]
 800f570:	2b08      	cmp	r3, #8
 800f572:	d007      	beq.n	800f584 <HAL_RCC_OscConfig+0x308>
 800f574:	69bb      	ldr	r3, [r7, #24]
 800f576:	2b18      	cmp	r3, #24
 800f578:	d13a      	bne.n	800f5f0 <HAL_RCC_OscConfig+0x374>
 800f57a:	697b      	ldr	r3, [r7, #20]
 800f57c:	f003 0303 	and.w	r3, r3, #3
 800f580:	2b01      	cmp	r3, #1
 800f582:	d135      	bne.n	800f5f0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800f584:	4b7b      	ldr	r3, [pc, #492]	; (800f774 <HAL_RCC_OscConfig+0x4f8>)
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d005      	beq.n	800f59c <HAL_RCC_OscConfig+0x320>
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	69db      	ldr	r3, [r3, #28]
 800f594:	2b80      	cmp	r3, #128	; 0x80
 800f596:	d001      	beq.n	800f59c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800f598:	2301      	movs	r3, #1
 800f59a:	e296      	b.n	800faca <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800f59c:	f7fa fc7a 	bl	8009e94 <HAL_GetREVID>
 800f5a0:	4603      	mov	r3, r0
 800f5a2:	f241 0203 	movw	r2, #4099	; 0x1003
 800f5a6:	4293      	cmp	r3, r2
 800f5a8:	d817      	bhi.n	800f5da <HAL_RCC_OscConfig+0x35e>
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	6a1b      	ldr	r3, [r3, #32]
 800f5ae:	2b20      	cmp	r3, #32
 800f5b0:	d108      	bne.n	800f5c4 <HAL_RCC_OscConfig+0x348>
 800f5b2:	4b70      	ldr	r3, [pc, #448]	; (800f774 <HAL_RCC_OscConfig+0x4f8>)
 800f5b4:	685b      	ldr	r3, [r3, #4]
 800f5b6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800f5ba:	4a6e      	ldr	r2, [pc, #440]	; (800f774 <HAL_RCC_OscConfig+0x4f8>)
 800f5bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f5c0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800f5c2:	e075      	b.n	800f6b0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800f5c4:	4b6b      	ldr	r3, [pc, #428]	; (800f774 <HAL_RCC_OscConfig+0x4f8>)
 800f5c6:	685b      	ldr	r3, [r3, #4]
 800f5c8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	6a1b      	ldr	r3, [r3, #32]
 800f5d0:	069b      	lsls	r3, r3, #26
 800f5d2:	4968      	ldr	r1, [pc, #416]	; (800f774 <HAL_RCC_OscConfig+0x4f8>)
 800f5d4:	4313      	orrs	r3, r2
 800f5d6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800f5d8:	e06a      	b.n	800f6b0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800f5da:	4b66      	ldr	r3, [pc, #408]	; (800f774 <HAL_RCC_OscConfig+0x4f8>)
 800f5dc:	68db      	ldr	r3, [r3, #12]
 800f5de:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	6a1b      	ldr	r3, [r3, #32]
 800f5e6:	061b      	lsls	r3, r3, #24
 800f5e8:	4962      	ldr	r1, [pc, #392]	; (800f774 <HAL_RCC_OscConfig+0x4f8>)
 800f5ea:	4313      	orrs	r3, r2
 800f5ec:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800f5ee:	e05f      	b.n	800f6b0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	69db      	ldr	r3, [r3, #28]
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d042      	beq.n	800f67e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800f5f8:	4b5e      	ldr	r3, [pc, #376]	; (800f774 <HAL_RCC_OscConfig+0x4f8>)
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	4a5d      	ldr	r2, [pc, #372]	; (800f774 <HAL_RCC_OscConfig+0x4f8>)
 800f5fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f602:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f604:	f7fa fc16 	bl	8009e34 <HAL_GetTick>
 800f608:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800f60a:	e008      	b.n	800f61e <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800f60c:	f7fa fc12 	bl	8009e34 <HAL_GetTick>
 800f610:	4602      	mov	r2, r0
 800f612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f614:	1ad3      	subs	r3, r2, r3
 800f616:	2b02      	cmp	r3, #2
 800f618:	d901      	bls.n	800f61e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800f61a:	2303      	movs	r3, #3
 800f61c:	e255      	b.n	800faca <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800f61e:	4b55      	ldr	r3, [pc, #340]	; (800f774 <HAL_RCC_OscConfig+0x4f8>)
 800f620:	681b      	ldr	r3, [r3, #0]
 800f622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f626:	2b00      	cmp	r3, #0
 800f628:	d0f0      	beq.n	800f60c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800f62a:	f7fa fc33 	bl	8009e94 <HAL_GetREVID>
 800f62e:	4603      	mov	r3, r0
 800f630:	f241 0203 	movw	r2, #4099	; 0x1003
 800f634:	4293      	cmp	r3, r2
 800f636:	d817      	bhi.n	800f668 <HAL_RCC_OscConfig+0x3ec>
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	6a1b      	ldr	r3, [r3, #32]
 800f63c:	2b20      	cmp	r3, #32
 800f63e:	d108      	bne.n	800f652 <HAL_RCC_OscConfig+0x3d6>
 800f640:	4b4c      	ldr	r3, [pc, #304]	; (800f774 <HAL_RCC_OscConfig+0x4f8>)
 800f642:	685b      	ldr	r3, [r3, #4]
 800f644:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800f648:	4a4a      	ldr	r2, [pc, #296]	; (800f774 <HAL_RCC_OscConfig+0x4f8>)
 800f64a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f64e:	6053      	str	r3, [r2, #4]
 800f650:	e02e      	b.n	800f6b0 <HAL_RCC_OscConfig+0x434>
 800f652:	4b48      	ldr	r3, [pc, #288]	; (800f774 <HAL_RCC_OscConfig+0x4f8>)
 800f654:	685b      	ldr	r3, [r3, #4]
 800f656:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	6a1b      	ldr	r3, [r3, #32]
 800f65e:	069b      	lsls	r3, r3, #26
 800f660:	4944      	ldr	r1, [pc, #272]	; (800f774 <HAL_RCC_OscConfig+0x4f8>)
 800f662:	4313      	orrs	r3, r2
 800f664:	604b      	str	r3, [r1, #4]
 800f666:	e023      	b.n	800f6b0 <HAL_RCC_OscConfig+0x434>
 800f668:	4b42      	ldr	r3, [pc, #264]	; (800f774 <HAL_RCC_OscConfig+0x4f8>)
 800f66a:	68db      	ldr	r3, [r3, #12]
 800f66c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	6a1b      	ldr	r3, [r3, #32]
 800f674:	061b      	lsls	r3, r3, #24
 800f676:	493f      	ldr	r1, [pc, #252]	; (800f774 <HAL_RCC_OscConfig+0x4f8>)
 800f678:	4313      	orrs	r3, r2
 800f67a:	60cb      	str	r3, [r1, #12]
 800f67c:	e018      	b.n	800f6b0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800f67e:	4b3d      	ldr	r3, [pc, #244]	; (800f774 <HAL_RCC_OscConfig+0x4f8>)
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	4a3c      	ldr	r2, [pc, #240]	; (800f774 <HAL_RCC_OscConfig+0x4f8>)
 800f684:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f688:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f68a:	f7fa fbd3 	bl	8009e34 <HAL_GetTick>
 800f68e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800f690:	e008      	b.n	800f6a4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800f692:	f7fa fbcf 	bl	8009e34 <HAL_GetTick>
 800f696:	4602      	mov	r2, r0
 800f698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f69a:	1ad3      	subs	r3, r2, r3
 800f69c:	2b02      	cmp	r3, #2
 800f69e:	d901      	bls.n	800f6a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800f6a0:	2303      	movs	r3, #3
 800f6a2:	e212      	b.n	800faca <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800f6a4:	4b33      	ldr	r3, [pc, #204]	; (800f774 <HAL_RCC_OscConfig+0x4f8>)
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d1f0      	bne.n	800f692 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	f003 0308 	and.w	r3, r3, #8
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	d036      	beq.n	800f72a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	695b      	ldr	r3, [r3, #20]
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	d019      	beq.n	800f6f8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800f6c4:	4b2b      	ldr	r3, [pc, #172]	; (800f774 <HAL_RCC_OscConfig+0x4f8>)
 800f6c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f6c8:	4a2a      	ldr	r2, [pc, #168]	; (800f774 <HAL_RCC_OscConfig+0x4f8>)
 800f6ca:	f043 0301 	orr.w	r3, r3, #1
 800f6ce:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f6d0:	f7fa fbb0 	bl	8009e34 <HAL_GetTick>
 800f6d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800f6d6:	e008      	b.n	800f6ea <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800f6d8:	f7fa fbac 	bl	8009e34 <HAL_GetTick>
 800f6dc:	4602      	mov	r2, r0
 800f6de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6e0:	1ad3      	subs	r3, r2, r3
 800f6e2:	2b02      	cmp	r3, #2
 800f6e4:	d901      	bls.n	800f6ea <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800f6e6:	2303      	movs	r3, #3
 800f6e8:	e1ef      	b.n	800faca <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800f6ea:	4b22      	ldr	r3, [pc, #136]	; (800f774 <HAL_RCC_OscConfig+0x4f8>)
 800f6ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f6ee:	f003 0302 	and.w	r3, r3, #2
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d0f0      	beq.n	800f6d8 <HAL_RCC_OscConfig+0x45c>
 800f6f6:	e018      	b.n	800f72a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800f6f8:	4b1e      	ldr	r3, [pc, #120]	; (800f774 <HAL_RCC_OscConfig+0x4f8>)
 800f6fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f6fc:	4a1d      	ldr	r2, [pc, #116]	; (800f774 <HAL_RCC_OscConfig+0x4f8>)
 800f6fe:	f023 0301 	bic.w	r3, r3, #1
 800f702:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f704:	f7fa fb96 	bl	8009e34 <HAL_GetTick>
 800f708:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800f70a:	e008      	b.n	800f71e <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800f70c:	f7fa fb92 	bl	8009e34 <HAL_GetTick>
 800f710:	4602      	mov	r2, r0
 800f712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f714:	1ad3      	subs	r3, r2, r3
 800f716:	2b02      	cmp	r3, #2
 800f718:	d901      	bls.n	800f71e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800f71a:	2303      	movs	r3, #3
 800f71c:	e1d5      	b.n	800faca <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800f71e:	4b15      	ldr	r3, [pc, #84]	; (800f774 <HAL_RCC_OscConfig+0x4f8>)
 800f720:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f722:	f003 0302 	and.w	r3, r3, #2
 800f726:	2b00      	cmp	r3, #0
 800f728:	d1f0      	bne.n	800f70c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	f003 0320 	and.w	r3, r3, #32
 800f732:	2b00      	cmp	r3, #0
 800f734:	d039      	beq.n	800f7aa <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	699b      	ldr	r3, [r3, #24]
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d01c      	beq.n	800f778 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800f73e:	4b0d      	ldr	r3, [pc, #52]	; (800f774 <HAL_RCC_OscConfig+0x4f8>)
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	4a0c      	ldr	r2, [pc, #48]	; (800f774 <HAL_RCC_OscConfig+0x4f8>)
 800f744:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800f748:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800f74a:	f7fa fb73 	bl	8009e34 <HAL_GetTick>
 800f74e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800f750:	e008      	b.n	800f764 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800f752:	f7fa fb6f 	bl	8009e34 <HAL_GetTick>
 800f756:	4602      	mov	r2, r0
 800f758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f75a:	1ad3      	subs	r3, r2, r3
 800f75c:	2b02      	cmp	r3, #2
 800f75e:	d901      	bls.n	800f764 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800f760:	2303      	movs	r3, #3
 800f762:	e1b2      	b.n	800faca <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800f764:	4b03      	ldr	r3, [pc, #12]	; (800f774 <HAL_RCC_OscConfig+0x4f8>)
 800f766:	681b      	ldr	r3, [r3, #0]
 800f768:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d0f0      	beq.n	800f752 <HAL_RCC_OscConfig+0x4d6>
 800f770:	e01b      	b.n	800f7aa <HAL_RCC_OscConfig+0x52e>
 800f772:	bf00      	nop
 800f774:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800f778:	4b9b      	ldr	r3, [pc, #620]	; (800f9e8 <HAL_RCC_OscConfig+0x76c>)
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	4a9a      	ldr	r2, [pc, #616]	; (800f9e8 <HAL_RCC_OscConfig+0x76c>)
 800f77e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f782:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800f784:	f7fa fb56 	bl	8009e34 <HAL_GetTick>
 800f788:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800f78a:	e008      	b.n	800f79e <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800f78c:	f7fa fb52 	bl	8009e34 <HAL_GetTick>
 800f790:	4602      	mov	r2, r0
 800f792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f794:	1ad3      	subs	r3, r2, r3
 800f796:	2b02      	cmp	r3, #2
 800f798:	d901      	bls.n	800f79e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800f79a:	2303      	movs	r3, #3
 800f79c:	e195      	b.n	800faca <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800f79e:	4b92      	ldr	r3, [pc, #584]	; (800f9e8 <HAL_RCC_OscConfig+0x76c>)
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d1f0      	bne.n	800f78c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	681b      	ldr	r3, [r3, #0]
 800f7ae:	f003 0304 	and.w	r3, r3, #4
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	f000 8081 	beq.w	800f8ba <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800f7b8:	4b8c      	ldr	r3, [pc, #560]	; (800f9ec <HAL_RCC_OscConfig+0x770>)
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	4a8b      	ldr	r2, [pc, #556]	; (800f9ec <HAL_RCC_OscConfig+0x770>)
 800f7be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f7c2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800f7c4:	f7fa fb36 	bl	8009e34 <HAL_GetTick>
 800f7c8:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800f7ca:	e008      	b.n	800f7de <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800f7cc:	f7fa fb32 	bl	8009e34 <HAL_GetTick>
 800f7d0:	4602      	mov	r2, r0
 800f7d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7d4:	1ad3      	subs	r3, r2, r3
 800f7d6:	2b64      	cmp	r3, #100	; 0x64
 800f7d8:	d901      	bls.n	800f7de <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800f7da:	2303      	movs	r3, #3
 800f7dc:	e175      	b.n	800faca <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800f7de:	4b83      	ldr	r3, [pc, #524]	; (800f9ec <HAL_RCC_OscConfig+0x770>)
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d0f0      	beq.n	800f7cc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	689b      	ldr	r3, [r3, #8]
 800f7ee:	2b01      	cmp	r3, #1
 800f7f0:	d106      	bne.n	800f800 <HAL_RCC_OscConfig+0x584>
 800f7f2:	4b7d      	ldr	r3, [pc, #500]	; (800f9e8 <HAL_RCC_OscConfig+0x76c>)
 800f7f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f7f6:	4a7c      	ldr	r2, [pc, #496]	; (800f9e8 <HAL_RCC_OscConfig+0x76c>)
 800f7f8:	f043 0301 	orr.w	r3, r3, #1
 800f7fc:	6713      	str	r3, [r2, #112]	; 0x70
 800f7fe:	e02d      	b.n	800f85c <HAL_RCC_OscConfig+0x5e0>
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	689b      	ldr	r3, [r3, #8]
 800f804:	2b00      	cmp	r3, #0
 800f806:	d10c      	bne.n	800f822 <HAL_RCC_OscConfig+0x5a6>
 800f808:	4b77      	ldr	r3, [pc, #476]	; (800f9e8 <HAL_RCC_OscConfig+0x76c>)
 800f80a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f80c:	4a76      	ldr	r2, [pc, #472]	; (800f9e8 <HAL_RCC_OscConfig+0x76c>)
 800f80e:	f023 0301 	bic.w	r3, r3, #1
 800f812:	6713      	str	r3, [r2, #112]	; 0x70
 800f814:	4b74      	ldr	r3, [pc, #464]	; (800f9e8 <HAL_RCC_OscConfig+0x76c>)
 800f816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f818:	4a73      	ldr	r2, [pc, #460]	; (800f9e8 <HAL_RCC_OscConfig+0x76c>)
 800f81a:	f023 0304 	bic.w	r3, r3, #4
 800f81e:	6713      	str	r3, [r2, #112]	; 0x70
 800f820:	e01c      	b.n	800f85c <HAL_RCC_OscConfig+0x5e0>
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	689b      	ldr	r3, [r3, #8]
 800f826:	2b05      	cmp	r3, #5
 800f828:	d10c      	bne.n	800f844 <HAL_RCC_OscConfig+0x5c8>
 800f82a:	4b6f      	ldr	r3, [pc, #444]	; (800f9e8 <HAL_RCC_OscConfig+0x76c>)
 800f82c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f82e:	4a6e      	ldr	r2, [pc, #440]	; (800f9e8 <HAL_RCC_OscConfig+0x76c>)
 800f830:	f043 0304 	orr.w	r3, r3, #4
 800f834:	6713      	str	r3, [r2, #112]	; 0x70
 800f836:	4b6c      	ldr	r3, [pc, #432]	; (800f9e8 <HAL_RCC_OscConfig+0x76c>)
 800f838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f83a:	4a6b      	ldr	r2, [pc, #428]	; (800f9e8 <HAL_RCC_OscConfig+0x76c>)
 800f83c:	f043 0301 	orr.w	r3, r3, #1
 800f840:	6713      	str	r3, [r2, #112]	; 0x70
 800f842:	e00b      	b.n	800f85c <HAL_RCC_OscConfig+0x5e0>
 800f844:	4b68      	ldr	r3, [pc, #416]	; (800f9e8 <HAL_RCC_OscConfig+0x76c>)
 800f846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f848:	4a67      	ldr	r2, [pc, #412]	; (800f9e8 <HAL_RCC_OscConfig+0x76c>)
 800f84a:	f023 0301 	bic.w	r3, r3, #1
 800f84e:	6713      	str	r3, [r2, #112]	; 0x70
 800f850:	4b65      	ldr	r3, [pc, #404]	; (800f9e8 <HAL_RCC_OscConfig+0x76c>)
 800f852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f854:	4a64      	ldr	r2, [pc, #400]	; (800f9e8 <HAL_RCC_OscConfig+0x76c>)
 800f856:	f023 0304 	bic.w	r3, r3, #4
 800f85a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	689b      	ldr	r3, [r3, #8]
 800f860:	2b00      	cmp	r3, #0
 800f862:	d015      	beq.n	800f890 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f864:	f7fa fae6 	bl	8009e34 <HAL_GetTick>
 800f868:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800f86a:	e00a      	b.n	800f882 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800f86c:	f7fa fae2 	bl	8009e34 <HAL_GetTick>
 800f870:	4602      	mov	r2, r0
 800f872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f874:	1ad3      	subs	r3, r2, r3
 800f876:	f241 3288 	movw	r2, #5000	; 0x1388
 800f87a:	4293      	cmp	r3, r2
 800f87c:	d901      	bls.n	800f882 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800f87e:	2303      	movs	r3, #3
 800f880:	e123      	b.n	800faca <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800f882:	4b59      	ldr	r3, [pc, #356]	; (800f9e8 <HAL_RCC_OscConfig+0x76c>)
 800f884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f886:	f003 0302 	and.w	r3, r3, #2
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d0ee      	beq.n	800f86c <HAL_RCC_OscConfig+0x5f0>
 800f88e:	e014      	b.n	800f8ba <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f890:	f7fa fad0 	bl	8009e34 <HAL_GetTick>
 800f894:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800f896:	e00a      	b.n	800f8ae <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800f898:	f7fa facc 	bl	8009e34 <HAL_GetTick>
 800f89c:	4602      	mov	r2, r0
 800f89e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8a0:	1ad3      	subs	r3, r2, r3
 800f8a2:	f241 3288 	movw	r2, #5000	; 0x1388
 800f8a6:	4293      	cmp	r3, r2
 800f8a8:	d901      	bls.n	800f8ae <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800f8aa:	2303      	movs	r3, #3
 800f8ac:	e10d      	b.n	800faca <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800f8ae:	4b4e      	ldr	r3, [pc, #312]	; (800f9e8 <HAL_RCC_OscConfig+0x76c>)
 800f8b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f8b2:	f003 0302 	and.w	r3, r3, #2
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d1ee      	bne.n	800f898 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	f000 8102 	beq.w	800fac8 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800f8c4:	4b48      	ldr	r3, [pc, #288]	; (800f9e8 <HAL_RCC_OscConfig+0x76c>)
 800f8c6:	691b      	ldr	r3, [r3, #16]
 800f8c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f8cc:	2b18      	cmp	r3, #24
 800f8ce:	f000 80bd 	beq.w	800fa4c <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8d6:	2b02      	cmp	r3, #2
 800f8d8:	f040 809e 	bne.w	800fa18 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f8dc:	4b42      	ldr	r3, [pc, #264]	; (800f9e8 <HAL_RCC_OscConfig+0x76c>)
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	4a41      	ldr	r2, [pc, #260]	; (800f9e8 <HAL_RCC_OscConfig+0x76c>)
 800f8e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800f8e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f8e8:	f7fa faa4 	bl	8009e34 <HAL_GetTick>
 800f8ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800f8ee:	e008      	b.n	800f902 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800f8f0:	f7fa faa0 	bl	8009e34 <HAL_GetTick>
 800f8f4:	4602      	mov	r2, r0
 800f8f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8f8:	1ad3      	subs	r3, r2, r3
 800f8fa:	2b02      	cmp	r3, #2
 800f8fc:	d901      	bls.n	800f902 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800f8fe:	2303      	movs	r3, #3
 800f900:	e0e3      	b.n	800faca <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800f902:	4b39      	ldr	r3, [pc, #228]	; (800f9e8 <HAL_RCC_OscConfig+0x76c>)
 800f904:	681b      	ldr	r3, [r3, #0]
 800f906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d1f0      	bne.n	800f8f0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800f90e:	4b36      	ldr	r3, [pc, #216]	; (800f9e8 <HAL_RCC_OscConfig+0x76c>)
 800f910:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f912:	4b37      	ldr	r3, [pc, #220]	; (800f9f0 <HAL_RCC_OscConfig+0x774>)
 800f914:	4013      	ands	r3, r2
 800f916:	687a      	ldr	r2, [r7, #4]
 800f918:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800f91a:	687a      	ldr	r2, [r7, #4]
 800f91c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800f91e:	0112      	lsls	r2, r2, #4
 800f920:	430a      	orrs	r2, r1
 800f922:	4931      	ldr	r1, [pc, #196]	; (800f9e8 <HAL_RCC_OscConfig+0x76c>)
 800f924:	4313      	orrs	r3, r2
 800f926:	628b      	str	r3, [r1, #40]	; 0x28
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f92c:	3b01      	subs	r3, #1
 800f92e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f936:	3b01      	subs	r3, #1
 800f938:	025b      	lsls	r3, r3, #9
 800f93a:	b29b      	uxth	r3, r3
 800f93c:	431a      	orrs	r2, r3
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f942:	3b01      	subs	r3, #1
 800f944:	041b      	lsls	r3, r3, #16
 800f946:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800f94a:	431a      	orrs	r2, r3
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f950:	3b01      	subs	r3, #1
 800f952:	061b      	lsls	r3, r3, #24
 800f954:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800f958:	4923      	ldr	r1, [pc, #140]	; (800f9e8 <HAL_RCC_OscConfig+0x76c>)
 800f95a:	4313      	orrs	r3, r2
 800f95c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800f95e:	4b22      	ldr	r3, [pc, #136]	; (800f9e8 <HAL_RCC_OscConfig+0x76c>)
 800f960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f962:	4a21      	ldr	r2, [pc, #132]	; (800f9e8 <HAL_RCC_OscConfig+0x76c>)
 800f964:	f023 0301 	bic.w	r3, r3, #1
 800f968:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800f96a:	4b1f      	ldr	r3, [pc, #124]	; (800f9e8 <HAL_RCC_OscConfig+0x76c>)
 800f96c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f96e:	4b21      	ldr	r3, [pc, #132]	; (800f9f4 <HAL_RCC_OscConfig+0x778>)
 800f970:	4013      	ands	r3, r2
 800f972:	687a      	ldr	r2, [r7, #4]
 800f974:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800f976:	00d2      	lsls	r2, r2, #3
 800f978:	491b      	ldr	r1, [pc, #108]	; (800f9e8 <HAL_RCC_OscConfig+0x76c>)
 800f97a:	4313      	orrs	r3, r2
 800f97c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800f97e:	4b1a      	ldr	r3, [pc, #104]	; (800f9e8 <HAL_RCC_OscConfig+0x76c>)
 800f980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f982:	f023 020c 	bic.w	r2, r3, #12
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f98a:	4917      	ldr	r1, [pc, #92]	; (800f9e8 <HAL_RCC_OscConfig+0x76c>)
 800f98c:	4313      	orrs	r3, r2
 800f98e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800f990:	4b15      	ldr	r3, [pc, #84]	; (800f9e8 <HAL_RCC_OscConfig+0x76c>)
 800f992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f994:	f023 0202 	bic.w	r2, r3, #2
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f99c:	4912      	ldr	r1, [pc, #72]	; (800f9e8 <HAL_RCC_OscConfig+0x76c>)
 800f99e:	4313      	orrs	r3, r2
 800f9a0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800f9a2:	4b11      	ldr	r3, [pc, #68]	; (800f9e8 <HAL_RCC_OscConfig+0x76c>)
 800f9a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9a6:	4a10      	ldr	r2, [pc, #64]	; (800f9e8 <HAL_RCC_OscConfig+0x76c>)
 800f9a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f9ac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f9ae:	4b0e      	ldr	r3, [pc, #56]	; (800f9e8 <HAL_RCC_OscConfig+0x76c>)
 800f9b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9b2:	4a0d      	ldr	r2, [pc, #52]	; (800f9e8 <HAL_RCC_OscConfig+0x76c>)
 800f9b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f9b8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800f9ba:	4b0b      	ldr	r3, [pc, #44]	; (800f9e8 <HAL_RCC_OscConfig+0x76c>)
 800f9bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9be:	4a0a      	ldr	r2, [pc, #40]	; (800f9e8 <HAL_RCC_OscConfig+0x76c>)
 800f9c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800f9c4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800f9c6:	4b08      	ldr	r3, [pc, #32]	; (800f9e8 <HAL_RCC_OscConfig+0x76c>)
 800f9c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9ca:	4a07      	ldr	r2, [pc, #28]	; (800f9e8 <HAL_RCC_OscConfig+0x76c>)
 800f9cc:	f043 0301 	orr.w	r3, r3, #1
 800f9d0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800f9d2:	4b05      	ldr	r3, [pc, #20]	; (800f9e8 <HAL_RCC_OscConfig+0x76c>)
 800f9d4:	681b      	ldr	r3, [r3, #0]
 800f9d6:	4a04      	ldr	r2, [pc, #16]	; (800f9e8 <HAL_RCC_OscConfig+0x76c>)
 800f9d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800f9dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f9de:	f7fa fa29 	bl	8009e34 <HAL_GetTick>
 800f9e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800f9e4:	e011      	b.n	800fa0a <HAL_RCC_OscConfig+0x78e>
 800f9e6:	bf00      	nop
 800f9e8:	58024400 	.word	0x58024400
 800f9ec:	58024800 	.word	0x58024800
 800f9f0:	fffffc0c 	.word	0xfffffc0c
 800f9f4:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800f9f8:	f7fa fa1c 	bl	8009e34 <HAL_GetTick>
 800f9fc:	4602      	mov	r2, r0
 800f9fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa00:	1ad3      	subs	r3, r2, r3
 800fa02:	2b02      	cmp	r3, #2
 800fa04:	d901      	bls.n	800fa0a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800fa06:	2303      	movs	r3, #3
 800fa08:	e05f      	b.n	800faca <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800fa0a:	4b32      	ldr	r3, [pc, #200]	; (800fad4 <HAL_RCC_OscConfig+0x858>)
 800fa0c:	681b      	ldr	r3, [r3, #0]
 800fa0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d0f0      	beq.n	800f9f8 <HAL_RCC_OscConfig+0x77c>
 800fa16:	e057      	b.n	800fac8 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800fa18:	4b2e      	ldr	r3, [pc, #184]	; (800fad4 <HAL_RCC_OscConfig+0x858>)
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	4a2d      	ldr	r2, [pc, #180]	; (800fad4 <HAL_RCC_OscConfig+0x858>)
 800fa1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800fa22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800fa24:	f7fa fa06 	bl	8009e34 <HAL_GetTick>
 800fa28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800fa2a:	e008      	b.n	800fa3e <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800fa2c:	f7fa fa02 	bl	8009e34 <HAL_GetTick>
 800fa30:	4602      	mov	r2, r0
 800fa32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa34:	1ad3      	subs	r3, r2, r3
 800fa36:	2b02      	cmp	r3, #2
 800fa38:	d901      	bls.n	800fa3e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800fa3a:	2303      	movs	r3, #3
 800fa3c:	e045      	b.n	800faca <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800fa3e:	4b25      	ldr	r3, [pc, #148]	; (800fad4 <HAL_RCC_OscConfig+0x858>)
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d1f0      	bne.n	800fa2c <HAL_RCC_OscConfig+0x7b0>
 800fa4a:	e03d      	b.n	800fac8 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800fa4c:	4b21      	ldr	r3, [pc, #132]	; (800fad4 <HAL_RCC_OscConfig+0x858>)
 800fa4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa50:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800fa52:	4b20      	ldr	r3, [pc, #128]	; (800fad4 <HAL_RCC_OscConfig+0x858>)
 800fa54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa56:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa5c:	2b01      	cmp	r3, #1
 800fa5e:	d031      	beq.n	800fac4 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800fa60:	693b      	ldr	r3, [r7, #16]
 800fa62:	f003 0203 	and.w	r2, r3, #3
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800fa6a:	429a      	cmp	r2, r3
 800fa6c:	d12a      	bne.n	800fac4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800fa6e:	693b      	ldr	r3, [r7, #16]
 800fa70:	091b      	lsrs	r3, r3, #4
 800fa72:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800fa7a:	429a      	cmp	r2, r3
 800fa7c:	d122      	bne.n	800fac4 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800fa7e:	68fb      	ldr	r3, [r7, #12]
 800fa80:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa88:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800fa8a:	429a      	cmp	r2, r3
 800fa8c:	d11a      	bne.n	800fac4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800fa8e:	68fb      	ldr	r3, [r7, #12]
 800fa90:	0a5b      	lsrs	r3, r3, #9
 800fa92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fa9a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800fa9c:	429a      	cmp	r2, r3
 800fa9e:	d111      	bne.n	800fac4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	0c1b      	lsrs	r3, r3, #16
 800faa4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800faac:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800faae:	429a      	cmp	r2, r3
 800fab0:	d108      	bne.n	800fac4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800fab2:	68fb      	ldr	r3, [r7, #12]
 800fab4:	0e1b      	lsrs	r3, r3, #24
 800fab6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fabe:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800fac0:	429a      	cmp	r2, r3
 800fac2:	d001      	beq.n	800fac8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800fac4:	2301      	movs	r3, #1
 800fac6:	e000      	b.n	800faca <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 800fac8:	2300      	movs	r3, #0
}
 800faca:	4618      	mov	r0, r3
 800facc:	3730      	adds	r7, #48	; 0x30
 800face:	46bd      	mov	sp, r7
 800fad0:	bd80      	pop	{r7, pc}
 800fad2:	bf00      	nop
 800fad4:	58024400 	.word	0x58024400

0800fad8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800fad8:	b580      	push	{r7, lr}
 800fada:	b086      	sub	sp, #24
 800fadc:	af00      	add	r7, sp, #0
 800fade:	6078      	str	r0, [r7, #4]
 800fae0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d101      	bne.n	800faec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800fae8:	2301      	movs	r3, #1
 800faea:	e19c      	b.n	800fe26 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800faec:	4b8a      	ldr	r3, [pc, #552]	; (800fd18 <HAL_RCC_ClockConfig+0x240>)
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	f003 030f 	and.w	r3, r3, #15
 800faf4:	683a      	ldr	r2, [r7, #0]
 800faf6:	429a      	cmp	r2, r3
 800faf8:	d910      	bls.n	800fb1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800fafa:	4b87      	ldr	r3, [pc, #540]	; (800fd18 <HAL_RCC_ClockConfig+0x240>)
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	f023 020f 	bic.w	r2, r3, #15
 800fb02:	4985      	ldr	r1, [pc, #532]	; (800fd18 <HAL_RCC_ClockConfig+0x240>)
 800fb04:	683b      	ldr	r3, [r7, #0]
 800fb06:	4313      	orrs	r3, r2
 800fb08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800fb0a:	4b83      	ldr	r3, [pc, #524]	; (800fd18 <HAL_RCC_ClockConfig+0x240>)
 800fb0c:	681b      	ldr	r3, [r3, #0]
 800fb0e:	f003 030f 	and.w	r3, r3, #15
 800fb12:	683a      	ldr	r2, [r7, #0]
 800fb14:	429a      	cmp	r2, r3
 800fb16:	d001      	beq.n	800fb1c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800fb18:	2301      	movs	r3, #1
 800fb1a:	e184      	b.n	800fe26 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	f003 0304 	and.w	r3, r3, #4
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d010      	beq.n	800fb4a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	691a      	ldr	r2, [r3, #16]
 800fb2c:	4b7b      	ldr	r3, [pc, #492]	; (800fd1c <HAL_RCC_ClockConfig+0x244>)
 800fb2e:	699b      	ldr	r3, [r3, #24]
 800fb30:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800fb34:	429a      	cmp	r2, r3
 800fb36:	d908      	bls.n	800fb4a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800fb38:	4b78      	ldr	r3, [pc, #480]	; (800fd1c <HAL_RCC_ClockConfig+0x244>)
 800fb3a:	699b      	ldr	r3, [r3, #24]
 800fb3c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	691b      	ldr	r3, [r3, #16]
 800fb44:	4975      	ldr	r1, [pc, #468]	; (800fd1c <HAL_RCC_ClockConfig+0x244>)
 800fb46:	4313      	orrs	r3, r2
 800fb48:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	f003 0308 	and.w	r3, r3, #8
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d010      	beq.n	800fb78 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	695a      	ldr	r2, [r3, #20]
 800fb5a:	4b70      	ldr	r3, [pc, #448]	; (800fd1c <HAL_RCC_ClockConfig+0x244>)
 800fb5c:	69db      	ldr	r3, [r3, #28]
 800fb5e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800fb62:	429a      	cmp	r2, r3
 800fb64:	d908      	bls.n	800fb78 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800fb66:	4b6d      	ldr	r3, [pc, #436]	; (800fd1c <HAL_RCC_ClockConfig+0x244>)
 800fb68:	69db      	ldr	r3, [r3, #28]
 800fb6a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	695b      	ldr	r3, [r3, #20]
 800fb72:	496a      	ldr	r1, [pc, #424]	; (800fd1c <HAL_RCC_ClockConfig+0x244>)
 800fb74:	4313      	orrs	r3, r2
 800fb76:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	681b      	ldr	r3, [r3, #0]
 800fb7c:	f003 0310 	and.w	r3, r3, #16
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d010      	beq.n	800fba6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	699a      	ldr	r2, [r3, #24]
 800fb88:	4b64      	ldr	r3, [pc, #400]	; (800fd1c <HAL_RCC_ClockConfig+0x244>)
 800fb8a:	69db      	ldr	r3, [r3, #28]
 800fb8c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800fb90:	429a      	cmp	r2, r3
 800fb92:	d908      	bls.n	800fba6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800fb94:	4b61      	ldr	r3, [pc, #388]	; (800fd1c <HAL_RCC_ClockConfig+0x244>)
 800fb96:	69db      	ldr	r3, [r3, #28]
 800fb98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	699b      	ldr	r3, [r3, #24]
 800fba0:	495e      	ldr	r1, [pc, #376]	; (800fd1c <HAL_RCC_ClockConfig+0x244>)
 800fba2:	4313      	orrs	r3, r2
 800fba4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	f003 0320 	and.w	r3, r3, #32
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d010      	beq.n	800fbd4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	69da      	ldr	r2, [r3, #28]
 800fbb6:	4b59      	ldr	r3, [pc, #356]	; (800fd1c <HAL_RCC_ClockConfig+0x244>)
 800fbb8:	6a1b      	ldr	r3, [r3, #32]
 800fbba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800fbbe:	429a      	cmp	r2, r3
 800fbc0:	d908      	bls.n	800fbd4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800fbc2:	4b56      	ldr	r3, [pc, #344]	; (800fd1c <HAL_RCC_ClockConfig+0x244>)
 800fbc4:	6a1b      	ldr	r3, [r3, #32]
 800fbc6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	69db      	ldr	r3, [r3, #28]
 800fbce:	4953      	ldr	r1, [pc, #332]	; (800fd1c <HAL_RCC_ClockConfig+0x244>)
 800fbd0:	4313      	orrs	r3, r2
 800fbd2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	f003 0302 	and.w	r3, r3, #2
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d010      	beq.n	800fc02 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	68da      	ldr	r2, [r3, #12]
 800fbe4:	4b4d      	ldr	r3, [pc, #308]	; (800fd1c <HAL_RCC_ClockConfig+0x244>)
 800fbe6:	699b      	ldr	r3, [r3, #24]
 800fbe8:	f003 030f 	and.w	r3, r3, #15
 800fbec:	429a      	cmp	r2, r3
 800fbee:	d908      	bls.n	800fc02 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800fbf0:	4b4a      	ldr	r3, [pc, #296]	; (800fd1c <HAL_RCC_ClockConfig+0x244>)
 800fbf2:	699b      	ldr	r3, [r3, #24]
 800fbf4:	f023 020f 	bic.w	r2, r3, #15
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	68db      	ldr	r3, [r3, #12]
 800fbfc:	4947      	ldr	r1, [pc, #284]	; (800fd1c <HAL_RCC_ClockConfig+0x244>)
 800fbfe:	4313      	orrs	r3, r2
 800fc00:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	f003 0301 	and.w	r3, r3, #1
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d055      	beq.n	800fcba <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800fc0e:	4b43      	ldr	r3, [pc, #268]	; (800fd1c <HAL_RCC_ClockConfig+0x244>)
 800fc10:	699b      	ldr	r3, [r3, #24]
 800fc12:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	689b      	ldr	r3, [r3, #8]
 800fc1a:	4940      	ldr	r1, [pc, #256]	; (800fd1c <HAL_RCC_ClockConfig+0x244>)
 800fc1c:	4313      	orrs	r3, r2
 800fc1e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	685b      	ldr	r3, [r3, #4]
 800fc24:	2b02      	cmp	r3, #2
 800fc26:	d107      	bne.n	800fc38 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800fc28:	4b3c      	ldr	r3, [pc, #240]	; (800fd1c <HAL_RCC_ClockConfig+0x244>)
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d121      	bne.n	800fc78 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800fc34:	2301      	movs	r3, #1
 800fc36:	e0f6      	b.n	800fe26 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	685b      	ldr	r3, [r3, #4]
 800fc3c:	2b03      	cmp	r3, #3
 800fc3e:	d107      	bne.n	800fc50 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800fc40:	4b36      	ldr	r3, [pc, #216]	; (800fd1c <HAL_RCC_ClockConfig+0x244>)
 800fc42:	681b      	ldr	r3, [r3, #0]
 800fc44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d115      	bne.n	800fc78 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800fc4c:	2301      	movs	r3, #1
 800fc4e:	e0ea      	b.n	800fe26 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	685b      	ldr	r3, [r3, #4]
 800fc54:	2b01      	cmp	r3, #1
 800fc56:	d107      	bne.n	800fc68 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800fc58:	4b30      	ldr	r3, [pc, #192]	; (800fd1c <HAL_RCC_ClockConfig+0x244>)
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d109      	bne.n	800fc78 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800fc64:	2301      	movs	r3, #1
 800fc66:	e0de      	b.n	800fe26 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800fc68:	4b2c      	ldr	r3, [pc, #176]	; (800fd1c <HAL_RCC_ClockConfig+0x244>)
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	f003 0304 	and.w	r3, r3, #4
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	d101      	bne.n	800fc78 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800fc74:	2301      	movs	r3, #1
 800fc76:	e0d6      	b.n	800fe26 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800fc78:	4b28      	ldr	r3, [pc, #160]	; (800fd1c <HAL_RCC_ClockConfig+0x244>)
 800fc7a:	691b      	ldr	r3, [r3, #16]
 800fc7c:	f023 0207 	bic.w	r2, r3, #7
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	685b      	ldr	r3, [r3, #4]
 800fc84:	4925      	ldr	r1, [pc, #148]	; (800fd1c <HAL_RCC_ClockConfig+0x244>)
 800fc86:	4313      	orrs	r3, r2
 800fc88:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800fc8a:	f7fa f8d3 	bl	8009e34 <HAL_GetTick>
 800fc8e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800fc90:	e00a      	b.n	800fca8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800fc92:	f7fa f8cf 	bl	8009e34 <HAL_GetTick>
 800fc96:	4602      	mov	r2, r0
 800fc98:	697b      	ldr	r3, [r7, #20]
 800fc9a:	1ad3      	subs	r3, r2, r3
 800fc9c:	f241 3288 	movw	r2, #5000	; 0x1388
 800fca0:	4293      	cmp	r3, r2
 800fca2:	d901      	bls.n	800fca8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800fca4:	2303      	movs	r3, #3
 800fca6:	e0be      	b.n	800fe26 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800fca8:	4b1c      	ldr	r3, [pc, #112]	; (800fd1c <HAL_RCC_ClockConfig+0x244>)
 800fcaa:	691b      	ldr	r3, [r3, #16]
 800fcac:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	685b      	ldr	r3, [r3, #4]
 800fcb4:	00db      	lsls	r3, r3, #3
 800fcb6:	429a      	cmp	r2, r3
 800fcb8:	d1eb      	bne.n	800fc92 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	681b      	ldr	r3, [r3, #0]
 800fcbe:	f003 0302 	and.w	r3, r3, #2
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d010      	beq.n	800fce8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	68da      	ldr	r2, [r3, #12]
 800fcca:	4b14      	ldr	r3, [pc, #80]	; (800fd1c <HAL_RCC_ClockConfig+0x244>)
 800fccc:	699b      	ldr	r3, [r3, #24]
 800fcce:	f003 030f 	and.w	r3, r3, #15
 800fcd2:	429a      	cmp	r2, r3
 800fcd4:	d208      	bcs.n	800fce8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800fcd6:	4b11      	ldr	r3, [pc, #68]	; (800fd1c <HAL_RCC_ClockConfig+0x244>)
 800fcd8:	699b      	ldr	r3, [r3, #24]
 800fcda:	f023 020f 	bic.w	r2, r3, #15
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	68db      	ldr	r3, [r3, #12]
 800fce2:	490e      	ldr	r1, [pc, #56]	; (800fd1c <HAL_RCC_ClockConfig+0x244>)
 800fce4:	4313      	orrs	r3, r2
 800fce6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800fce8:	4b0b      	ldr	r3, [pc, #44]	; (800fd18 <HAL_RCC_ClockConfig+0x240>)
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	f003 030f 	and.w	r3, r3, #15
 800fcf0:	683a      	ldr	r2, [r7, #0]
 800fcf2:	429a      	cmp	r2, r3
 800fcf4:	d214      	bcs.n	800fd20 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800fcf6:	4b08      	ldr	r3, [pc, #32]	; (800fd18 <HAL_RCC_ClockConfig+0x240>)
 800fcf8:	681b      	ldr	r3, [r3, #0]
 800fcfa:	f023 020f 	bic.w	r2, r3, #15
 800fcfe:	4906      	ldr	r1, [pc, #24]	; (800fd18 <HAL_RCC_ClockConfig+0x240>)
 800fd00:	683b      	ldr	r3, [r7, #0]
 800fd02:	4313      	orrs	r3, r2
 800fd04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800fd06:	4b04      	ldr	r3, [pc, #16]	; (800fd18 <HAL_RCC_ClockConfig+0x240>)
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	f003 030f 	and.w	r3, r3, #15
 800fd0e:	683a      	ldr	r2, [r7, #0]
 800fd10:	429a      	cmp	r2, r3
 800fd12:	d005      	beq.n	800fd20 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800fd14:	2301      	movs	r3, #1
 800fd16:	e086      	b.n	800fe26 <HAL_RCC_ClockConfig+0x34e>
 800fd18:	52002000 	.word	0x52002000
 800fd1c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	681b      	ldr	r3, [r3, #0]
 800fd24:	f003 0304 	and.w	r3, r3, #4
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	d010      	beq.n	800fd4e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	691a      	ldr	r2, [r3, #16]
 800fd30:	4b3f      	ldr	r3, [pc, #252]	; (800fe30 <HAL_RCC_ClockConfig+0x358>)
 800fd32:	699b      	ldr	r3, [r3, #24]
 800fd34:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800fd38:	429a      	cmp	r2, r3
 800fd3a:	d208      	bcs.n	800fd4e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800fd3c:	4b3c      	ldr	r3, [pc, #240]	; (800fe30 <HAL_RCC_ClockConfig+0x358>)
 800fd3e:	699b      	ldr	r3, [r3, #24]
 800fd40:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	691b      	ldr	r3, [r3, #16]
 800fd48:	4939      	ldr	r1, [pc, #228]	; (800fe30 <HAL_RCC_ClockConfig+0x358>)
 800fd4a:	4313      	orrs	r3, r2
 800fd4c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	681b      	ldr	r3, [r3, #0]
 800fd52:	f003 0308 	and.w	r3, r3, #8
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d010      	beq.n	800fd7c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	695a      	ldr	r2, [r3, #20]
 800fd5e:	4b34      	ldr	r3, [pc, #208]	; (800fe30 <HAL_RCC_ClockConfig+0x358>)
 800fd60:	69db      	ldr	r3, [r3, #28]
 800fd62:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800fd66:	429a      	cmp	r2, r3
 800fd68:	d208      	bcs.n	800fd7c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800fd6a:	4b31      	ldr	r3, [pc, #196]	; (800fe30 <HAL_RCC_ClockConfig+0x358>)
 800fd6c:	69db      	ldr	r3, [r3, #28]
 800fd6e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	695b      	ldr	r3, [r3, #20]
 800fd76:	492e      	ldr	r1, [pc, #184]	; (800fe30 <HAL_RCC_ClockConfig+0x358>)
 800fd78:	4313      	orrs	r3, r2
 800fd7a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	681b      	ldr	r3, [r3, #0]
 800fd80:	f003 0310 	and.w	r3, r3, #16
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d010      	beq.n	800fdaa <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	699a      	ldr	r2, [r3, #24]
 800fd8c:	4b28      	ldr	r3, [pc, #160]	; (800fe30 <HAL_RCC_ClockConfig+0x358>)
 800fd8e:	69db      	ldr	r3, [r3, #28]
 800fd90:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800fd94:	429a      	cmp	r2, r3
 800fd96:	d208      	bcs.n	800fdaa <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800fd98:	4b25      	ldr	r3, [pc, #148]	; (800fe30 <HAL_RCC_ClockConfig+0x358>)
 800fd9a:	69db      	ldr	r3, [r3, #28]
 800fd9c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	699b      	ldr	r3, [r3, #24]
 800fda4:	4922      	ldr	r1, [pc, #136]	; (800fe30 <HAL_RCC_ClockConfig+0x358>)
 800fda6:	4313      	orrs	r3, r2
 800fda8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	681b      	ldr	r3, [r3, #0]
 800fdae:	f003 0320 	and.w	r3, r3, #32
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d010      	beq.n	800fdd8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	69da      	ldr	r2, [r3, #28]
 800fdba:	4b1d      	ldr	r3, [pc, #116]	; (800fe30 <HAL_RCC_ClockConfig+0x358>)
 800fdbc:	6a1b      	ldr	r3, [r3, #32]
 800fdbe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800fdc2:	429a      	cmp	r2, r3
 800fdc4:	d208      	bcs.n	800fdd8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800fdc6:	4b1a      	ldr	r3, [pc, #104]	; (800fe30 <HAL_RCC_ClockConfig+0x358>)
 800fdc8:	6a1b      	ldr	r3, [r3, #32]
 800fdca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	69db      	ldr	r3, [r3, #28]
 800fdd2:	4917      	ldr	r1, [pc, #92]	; (800fe30 <HAL_RCC_ClockConfig+0x358>)
 800fdd4:	4313      	orrs	r3, r2
 800fdd6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800fdd8:	f000 f834 	bl	800fe44 <HAL_RCC_GetSysClockFreq>
 800fddc:	4602      	mov	r2, r0
 800fdde:	4b14      	ldr	r3, [pc, #80]	; (800fe30 <HAL_RCC_ClockConfig+0x358>)
 800fde0:	699b      	ldr	r3, [r3, #24]
 800fde2:	0a1b      	lsrs	r3, r3, #8
 800fde4:	f003 030f 	and.w	r3, r3, #15
 800fde8:	4912      	ldr	r1, [pc, #72]	; (800fe34 <HAL_RCC_ClockConfig+0x35c>)
 800fdea:	5ccb      	ldrb	r3, [r1, r3]
 800fdec:	f003 031f 	and.w	r3, r3, #31
 800fdf0:	fa22 f303 	lsr.w	r3, r2, r3
 800fdf4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800fdf6:	4b0e      	ldr	r3, [pc, #56]	; (800fe30 <HAL_RCC_ClockConfig+0x358>)
 800fdf8:	699b      	ldr	r3, [r3, #24]
 800fdfa:	f003 030f 	and.w	r3, r3, #15
 800fdfe:	4a0d      	ldr	r2, [pc, #52]	; (800fe34 <HAL_RCC_ClockConfig+0x35c>)
 800fe00:	5cd3      	ldrb	r3, [r2, r3]
 800fe02:	f003 031f 	and.w	r3, r3, #31
 800fe06:	693a      	ldr	r2, [r7, #16]
 800fe08:	fa22 f303 	lsr.w	r3, r2, r3
 800fe0c:	4a0a      	ldr	r2, [pc, #40]	; (800fe38 <HAL_RCC_ClockConfig+0x360>)
 800fe0e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800fe10:	4a0a      	ldr	r2, [pc, #40]	; (800fe3c <HAL_RCC_ClockConfig+0x364>)
 800fe12:	693b      	ldr	r3, [r7, #16]
 800fe14:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800fe16:	4b0a      	ldr	r3, [pc, #40]	; (800fe40 <HAL_RCC_ClockConfig+0x368>)
 800fe18:	681b      	ldr	r3, [r3, #0]
 800fe1a:	4618      	mov	r0, r3
 800fe1c:	f7f9 ffc0 	bl	8009da0 <HAL_InitTick>
 800fe20:	4603      	mov	r3, r0
 800fe22:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800fe24:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe26:	4618      	mov	r0, r3
 800fe28:	3718      	adds	r7, #24
 800fe2a:	46bd      	mov	sp, r7
 800fe2c:	bd80      	pop	{r7, pc}
 800fe2e:	bf00      	nop
 800fe30:	58024400 	.word	0x58024400
 800fe34:	0803598c 	.word	0x0803598c
 800fe38:	24000004 	.word	0x24000004
 800fe3c:	24000000 	.word	0x24000000
 800fe40:	24000008 	.word	0x24000008

0800fe44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800fe44:	b480      	push	{r7}
 800fe46:	b089      	sub	sp, #36	; 0x24
 800fe48:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800fe4a:	4bb3      	ldr	r3, [pc, #716]	; (8010118 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800fe4c:	691b      	ldr	r3, [r3, #16]
 800fe4e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800fe52:	2b18      	cmp	r3, #24
 800fe54:	f200 8155 	bhi.w	8010102 <HAL_RCC_GetSysClockFreq+0x2be>
 800fe58:	a201      	add	r2, pc, #4	; (adr r2, 800fe60 <HAL_RCC_GetSysClockFreq+0x1c>)
 800fe5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe5e:	bf00      	nop
 800fe60:	0800fec5 	.word	0x0800fec5
 800fe64:	08010103 	.word	0x08010103
 800fe68:	08010103 	.word	0x08010103
 800fe6c:	08010103 	.word	0x08010103
 800fe70:	08010103 	.word	0x08010103
 800fe74:	08010103 	.word	0x08010103
 800fe78:	08010103 	.word	0x08010103
 800fe7c:	08010103 	.word	0x08010103
 800fe80:	0800feeb 	.word	0x0800feeb
 800fe84:	08010103 	.word	0x08010103
 800fe88:	08010103 	.word	0x08010103
 800fe8c:	08010103 	.word	0x08010103
 800fe90:	08010103 	.word	0x08010103
 800fe94:	08010103 	.word	0x08010103
 800fe98:	08010103 	.word	0x08010103
 800fe9c:	08010103 	.word	0x08010103
 800fea0:	0800fef1 	.word	0x0800fef1
 800fea4:	08010103 	.word	0x08010103
 800fea8:	08010103 	.word	0x08010103
 800feac:	08010103 	.word	0x08010103
 800feb0:	08010103 	.word	0x08010103
 800feb4:	08010103 	.word	0x08010103
 800feb8:	08010103 	.word	0x08010103
 800febc:	08010103 	.word	0x08010103
 800fec0:	0800fef7 	.word	0x0800fef7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fec4:	4b94      	ldr	r3, [pc, #592]	; (8010118 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800fec6:	681b      	ldr	r3, [r3, #0]
 800fec8:	f003 0320 	and.w	r3, r3, #32
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d009      	beq.n	800fee4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800fed0:	4b91      	ldr	r3, [pc, #580]	; (8010118 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	08db      	lsrs	r3, r3, #3
 800fed6:	f003 0303 	and.w	r3, r3, #3
 800feda:	4a90      	ldr	r2, [pc, #576]	; (801011c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800fedc:	fa22 f303 	lsr.w	r3, r2, r3
 800fee0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800fee2:	e111      	b.n	8010108 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800fee4:	4b8d      	ldr	r3, [pc, #564]	; (801011c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800fee6:	61bb      	str	r3, [r7, #24]
    break;
 800fee8:	e10e      	b.n	8010108 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800feea:	4b8d      	ldr	r3, [pc, #564]	; (8010120 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800feec:	61bb      	str	r3, [r7, #24]
    break;
 800feee:	e10b      	b.n	8010108 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800fef0:	4b8c      	ldr	r3, [pc, #560]	; (8010124 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800fef2:	61bb      	str	r3, [r7, #24]
    break;
 800fef4:	e108      	b.n	8010108 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800fef6:	4b88      	ldr	r3, [pc, #544]	; (8010118 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800fef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fefa:	f003 0303 	and.w	r3, r3, #3
 800fefe:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800ff00:	4b85      	ldr	r3, [pc, #532]	; (8010118 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ff02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff04:	091b      	lsrs	r3, r3, #4
 800ff06:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ff0a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800ff0c:	4b82      	ldr	r3, [pc, #520]	; (8010118 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ff0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff10:	f003 0301 	and.w	r3, r3, #1
 800ff14:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800ff16:	4b80      	ldr	r3, [pc, #512]	; (8010118 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ff18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ff1a:	08db      	lsrs	r3, r3, #3
 800ff1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ff20:	68fa      	ldr	r2, [r7, #12]
 800ff22:	fb02 f303 	mul.w	r3, r2, r3
 800ff26:	ee07 3a90 	vmov	s15, r3
 800ff2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ff2e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800ff32:	693b      	ldr	r3, [r7, #16]
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	f000 80e1 	beq.w	80100fc <HAL_RCC_GetSysClockFreq+0x2b8>
 800ff3a:	697b      	ldr	r3, [r7, #20]
 800ff3c:	2b02      	cmp	r3, #2
 800ff3e:	f000 8083 	beq.w	8010048 <HAL_RCC_GetSysClockFreq+0x204>
 800ff42:	697b      	ldr	r3, [r7, #20]
 800ff44:	2b02      	cmp	r3, #2
 800ff46:	f200 80a1 	bhi.w	801008c <HAL_RCC_GetSysClockFreq+0x248>
 800ff4a:	697b      	ldr	r3, [r7, #20]
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	d003      	beq.n	800ff58 <HAL_RCC_GetSysClockFreq+0x114>
 800ff50:	697b      	ldr	r3, [r7, #20]
 800ff52:	2b01      	cmp	r3, #1
 800ff54:	d056      	beq.n	8010004 <HAL_RCC_GetSysClockFreq+0x1c0>
 800ff56:	e099      	b.n	801008c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ff58:	4b6f      	ldr	r3, [pc, #444]	; (8010118 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ff5a:	681b      	ldr	r3, [r3, #0]
 800ff5c:	f003 0320 	and.w	r3, r3, #32
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	d02d      	beq.n	800ffc0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ff64:	4b6c      	ldr	r3, [pc, #432]	; (8010118 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ff66:	681b      	ldr	r3, [r3, #0]
 800ff68:	08db      	lsrs	r3, r3, #3
 800ff6a:	f003 0303 	and.w	r3, r3, #3
 800ff6e:	4a6b      	ldr	r2, [pc, #428]	; (801011c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ff70:	fa22 f303 	lsr.w	r3, r2, r3
 800ff74:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	ee07 3a90 	vmov	s15, r3
 800ff7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ff80:	693b      	ldr	r3, [r7, #16]
 800ff82:	ee07 3a90 	vmov	s15, r3
 800ff86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ff8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ff8e:	4b62      	ldr	r3, [pc, #392]	; (8010118 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ff90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ff92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ff96:	ee07 3a90 	vmov	s15, r3
 800ff9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ff9e:	ed97 6a02 	vldr	s12, [r7, #8]
 800ffa2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8010128 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ffa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ffaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ffae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ffb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ffb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ffba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800ffbe:	e087      	b.n	80100d0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ffc0:	693b      	ldr	r3, [r7, #16]
 800ffc2:	ee07 3a90 	vmov	s15, r3
 800ffc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ffca:	eddf 6a58 	vldr	s13, [pc, #352]	; 801012c <HAL_RCC_GetSysClockFreq+0x2e8>
 800ffce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ffd2:	4b51      	ldr	r3, [pc, #324]	; (8010118 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ffd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ffd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ffda:	ee07 3a90 	vmov	s15, r3
 800ffde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ffe2:	ed97 6a02 	vldr	s12, [r7, #8]
 800ffe6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8010128 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ffea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ffee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fff2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fff6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fffa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fffe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010002:	e065      	b.n	80100d0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8010004:	693b      	ldr	r3, [r7, #16]
 8010006:	ee07 3a90 	vmov	s15, r3
 801000a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801000e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8010130 <HAL_RCC_GetSysClockFreq+0x2ec>
 8010012:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010016:	4b40      	ldr	r3, [pc, #256]	; (8010118 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801001a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801001e:	ee07 3a90 	vmov	s15, r3
 8010022:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010026:	ed97 6a02 	vldr	s12, [r7, #8]
 801002a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8010128 <HAL_RCC_GetSysClockFreq+0x2e4>
 801002e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010032:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010036:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801003a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801003e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010042:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010046:	e043      	b.n	80100d0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8010048:	693b      	ldr	r3, [r7, #16]
 801004a:	ee07 3a90 	vmov	s15, r3
 801004e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010052:	eddf 6a38 	vldr	s13, [pc, #224]	; 8010134 <HAL_RCC_GetSysClockFreq+0x2f0>
 8010056:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801005a:	4b2f      	ldr	r3, [pc, #188]	; (8010118 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801005c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801005e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010062:	ee07 3a90 	vmov	s15, r3
 8010066:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801006a:	ed97 6a02 	vldr	s12, [r7, #8]
 801006e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8010128 <HAL_RCC_GetSysClockFreq+0x2e4>
 8010072:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010076:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801007a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801007e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010082:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010086:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801008a:	e021      	b.n	80100d0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 801008c:	693b      	ldr	r3, [r7, #16]
 801008e:	ee07 3a90 	vmov	s15, r3
 8010092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010096:	eddf 6a26 	vldr	s13, [pc, #152]	; 8010130 <HAL_RCC_GetSysClockFreq+0x2ec>
 801009a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801009e:	4b1e      	ldr	r3, [pc, #120]	; (8010118 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80100a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80100a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80100a6:	ee07 3a90 	vmov	s15, r3
 80100aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80100ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80100b2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8010128 <HAL_RCC_GetSysClockFreq+0x2e4>
 80100b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80100ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80100be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80100c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80100c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80100ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80100ce:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80100d0:	4b11      	ldr	r3, [pc, #68]	; (8010118 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80100d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80100d4:	0a5b      	lsrs	r3, r3, #9
 80100d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80100da:	3301      	adds	r3, #1
 80100dc:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80100de:	683b      	ldr	r3, [r7, #0]
 80100e0:	ee07 3a90 	vmov	s15, r3
 80100e4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80100e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80100ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80100f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80100f4:	ee17 3a90 	vmov	r3, s15
 80100f8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80100fa:	e005      	b.n	8010108 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80100fc:	2300      	movs	r3, #0
 80100fe:	61bb      	str	r3, [r7, #24]
    break;
 8010100:	e002      	b.n	8010108 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8010102:	4b07      	ldr	r3, [pc, #28]	; (8010120 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8010104:	61bb      	str	r3, [r7, #24]
    break;
 8010106:	bf00      	nop
  }

  return sysclockfreq;
 8010108:	69bb      	ldr	r3, [r7, #24]
}
 801010a:	4618      	mov	r0, r3
 801010c:	3724      	adds	r7, #36	; 0x24
 801010e:	46bd      	mov	sp, r7
 8010110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010114:	4770      	bx	lr
 8010116:	bf00      	nop
 8010118:	58024400 	.word	0x58024400
 801011c:	03d09000 	.word	0x03d09000
 8010120:	003d0900 	.word	0x003d0900
 8010124:	017d7840 	.word	0x017d7840
 8010128:	46000000 	.word	0x46000000
 801012c:	4c742400 	.word	0x4c742400
 8010130:	4a742400 	.word	0x4a742400
 8010134:	4bbebc20 	.word	0x4bbebc20

08010138 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8010138:	b580      	push	{r7, lr}
 801013a:	b082      	sub	sp, #8
 801013c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 801013e:	f7ff fe81 	bl	800fe44 <HAL_RCC_GetSysClockFreq>
 8010142:	4602      	mov	r2, r0
 8010144:	4b10      	ldr	r3, [pc, #64]	; (8010188 <HAL_RCC_GetHCLKFreq+0x50>)
 8010146:	699b      	ldr	r3, [r3, #24]
 8010148:	0a1b      	lsrs	r3, r3, #8
 801014a:	f003 030f 	and.w	r3, r3, #15
 801014e:	490f      	ldr	r1, [pc, #60]	; (801018c <HAL_RCC_GetHCLKFreq+0x54>)
 8010150:	5ccb      	ldrb	r3, [r1, r3]
 8010152:	f003 031f 	and.w	r3, r3, #31
 8010156:	fa22 f303 	lsr.w	r3, r2, r3
 801015a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801015c:	4b0a      	ldr	r3, [pc, #40]	; (8010188 <HAL_RCC_GetHCLKFreq+0x50>)
 801015e:	699b      	ldr	r3, [r3, #24]
 8010160:	f003 030f 	and.w	r3, r3, #15
 8010164:	4a09      	ldr	r2, [pc, #36]	; (801018c <HAL_RCC_GetHCLKFreq+0x54>)
 8010166:	5cd3      	ldrb	r3, [r2, r3]
 8010168:	f003 031f 	and.w	r3, r3, #31
 801016c:	687a      	ldr	r2, [r7, #4]
 801016e:	fa22 f303 	lsr.w	r3, r2, r3
 8010172:	4a07      	ldr	r2, [pc, #28]	; (8010190 <HAL_RCC_GetHCLKFreq+0x58>)
 8010174:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8010176:	4a07      	ldr	r2, [pc, #28]	; (8010194 <HAL_RCC_GetHCLKFreq+0x5c>)
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 801017c:	4b04      	ldr	r3, [pc, #16]	; (8010190 <HAL_RCC_GetHCLKFreq+0x58>)
 801017e:	681b      	ldr	r3, [r3, #0]
}
 8010180:	4618      	mov	r0, r3
 8010182:	3708      	adds	r7, #8
 8010184:	46bd      	mov	sp, r7
 8010186:	bd80      	pop	{r7, pc}
 8010188:	58024400 	.word	0x58024400
 801018c:	0803598c 	.word	0x0803598c
 8010190:	24000004 	.word	0x24000004
 8010194:	24000000 	.word	0x24000000

08010198 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8010198:	b580      	push	{r7, lr}
 801019a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 801019c:	f7ff ffcc 	bl	8010138 <HAL_RCC_GetHCLKFreq>
 80101a0:	4602      	mov	r2, r0
 80101a2:	4b06      	ldr	r3, [pc, #24]	; (80101bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80101a4:	69db      	ldr	r3, [r3, #28]
 80101a6:	091b      	lsrs	r3, r3, #4
 80101a8:	f003 0307 	and.w	r3, r3, #7
 80101ac:	4904      	ldr	r1, [pc, #16]	; (80101c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80101ae:	5ccb      	ldrb	r3, [r1, r3]
 80101b0:	f003 031f 	and.w	r3, r3, #31
 80101b4:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80101b8:	4618      	mov	r0, r3
 80101ba:	bd80      	pop	{r7, pc}
 80101bc:	58024400 	.word	0x58024400
 80101c0:	0803598c 	.word	0x0803598c

080101c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80101c4:	b580      	push	{r7, lr}
 80101c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80101c8:	f7ff ffb6 	bl	8010138 <HAL_RCC_GetHCLKFreq>
 80101cc:	4602      	mov	r2, r0
 80101ce:	4b06      	ldr	r3, [pc, #24]	; (80101e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80101d0:	69db      	ldr	r3, [r3, #28]
 80101d2:	0a1b      	lsrs	r3, r3, #8
 80101d4:	f003 0307 	and.w	r3, r3, #7
 80101d8:	4904      	ldr	r1, [pc, #16]	; (80101ec <HAL_RCC_GetPCLK2Freq+0x28>)
 80101da:	5ccb      	ldrb	r3, [r1, r3]
 80101dc:	f003 031f 	and.w	r3, r3, #31
 80101e0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80101e4:	4618      	mov	r0, r3
 80101e6:	bd80      	pop	{r7, pc}
 80101e8:	58024400 	.word	0x58024400
 80101ec:	0803598c 	.word	0x0803598c

080101f0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80101f0:	b580      	push	{r7, lr}
 80101f2:	b086      	sub	sp, #24
 80101f4:	af00      	add	r7, sp, #0
 80101f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80101f8:	2300      	movs	r3, #0
 80101fa:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80101fc:	2300      	movs	r3, #0
 80101fe:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	681b      	ldr	r3, [r3, #0]
 8010204:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010208:	2b00      	cmp	r3, #0
 801020a:	d03f      	beq.n	801028c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010210:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8010214:	d02a      	beq.n	801026c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8010216:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 801021a:	d824      	bhi.n	8010266 <HAL_RCCEx_PeriphCLKConfig+0x76>
 801021c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010220:	d018      	beq.n	8010254 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8010222:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010226:	d81e      	bhi.n	8010266 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8010228:	2b00      	cmp	r3, #0
 801022a:	d003      	beq.n	8010234 <HAL_RCCEx_PeriphCLKConfig+0x44>
 801022c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010230:	d007      	beq.n	8010242 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8010232:	e018      	b.n	8010266 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010234:	4ba3      	ldr	r3, [pc, #652]	; (80104c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8010236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010238:	4aa2      	ldr	r2, [pc, #648]	; (80104c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 801023a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801023e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8010240:	e015      	b.n	801026e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	3304      	adds	r3, #4
 8010246:	2102      	movs	r1, #2
 8010248:	4618      	mov	r0, r3
 801024a:	f001 f9d5 	bl	80115f8 <RCCEx_PLL2_Config>
 801024e:	4603      	mov	r3, r0
 8010250:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8010252:	e00c      	b.n	801026e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	3324      	adds	r3, #36	; 0x24
 8010258:	2102      	movs	r1, #2
 801025a:	4618      	mov	r0, r3
 801025c:	f001 fa7e 	bl	801175c <RCCEx_PLL3_Config>
 8010260:	4603      	mov	r3, r0
 8010262:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8010264:	e003      	b.n	801026e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8010266:	2301      	movs	r3, #1
 8010268:	75fb      	strb	r3, [r7, #23]
      break;
 801026a:	e000      	b.n	801026e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 801026c:	bf00      	nop
    }

    if(ret == HAL_OK)
 801026e:	7dfb      	ldrb	r3, [r7, #23]
 8010270:	2b00      	cmp	r3, #0
 8010272:	d109      	bne.n	8010288 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8010274:	4b93      	ldr	r3, [pc, #588]	; (80104c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8010276:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010278:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010280:	4990      	ldr	r1, [pc, #576]	; (80104c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8010282:	4313      	orrs	r3, r2
 8010284:	650b      	str	r3, [r1, #80]	; 0x50
 8010286:	e001      	b.n	801028c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010288:	7dfb      	ldrb	r3, [r7, #23]
 801028a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	681b      	ldr	r3, [r3, #0]
 8010290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010294:	2b00      	cmp	r3, #0
 8010296:	d03d      	beq.n	8010314 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801029c:	2b04      	cmp	r3, #4
 801029e:	d826      	bhi.n	80102ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80102a0:	a201      	add	r2, pc, #4	; (adr r2, 80102a8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80102a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80102a6:	bf00      	nop
 80102a8:	080102bd 	.word	0x080102bd
 80102ac:	080102cb 	.word	0x080102cb
 80102b0:	080102dd 	.word	0x080102dd
 80102b4:	080102f5 	.word	0x080102f5
 80102b8:	080102f5 	.word	0x080102f5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80102bc:	4b81      	ldr	r3, [pc, #516]	; (80104c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80102be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102c0:	4a80      	ldr	r2, [pc, #512]	; (80104c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80102c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80102c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80102c8:	e015      	b.n	80102f6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	3304      	adds	r3, #4
 80102ce:	2100      	movs	r1, #0
 80102d0:	4618      	mov	r0, r3
 80102d2:	f001 f991 	bl	80115f8 <RCCEx_PLL2_Config>
 80102d6:	4603      	mov	r3, r0
 80102d8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80102da:	e00c      	b.n	80102f6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	3324      	adds	r3, #36	; 0x24
 80102e0:	2100      	movs	r1, #0
 80102e2:	4618      	mov	r0, r3
 80102e4:	f001 fa3a 	bl	801175c <RCCEx_PLL3_Config>
 80102e8:	4603      	mov	r3, r0
 80102ea:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80102ec:	e003      	b.n	80102f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80102ee:	2301      	movs	r3, #1
 80102f0:	75fb      	strb	r3, [r7, #23]
      break;
 80102f2:	e000      	b.n	80102f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80102f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80102f6:	7dfb      	ldrb	r3, [r7, #23]
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d109      	bne.n	8010310 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80102fc:	4b71      	ldr	r3, [pc, #452]	; (80104c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80102fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010300:	f023 0207 	bic.w	r2, r3, #7
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010308:	496e      	ldr	r1, [pc, #440]	; (80104c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 801030a:	4313      	orrs	r3, r2
 801030c:	650b      	str	r3, [r1, #80]	; 0x50
 801030e:	e001      	b.n	8010314 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010310:	7dfb      	ldrb	r3, [r7, #23]
 8010312:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	681b      	ldr	r3, [r3, #0]
 8010318:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801031c:	2b00      	cmp	r3, #0
 801031e:	d042      	beq.n	80103a6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010324:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010328:	d02b      	beq.n	8010382 <HAL_RCCEx_PeriphCLKConfig+0x192>
 801032a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801032e:	d825      	bhi.n	801037c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8010330:	2bc0      	cmp	r3, #192	; 0xc0
 8010332:	d028      	beq.n	8010386 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8010334:	2bc0      	cmp	r3, #192	; 0xc0
 8010336:	d821      	bhi.n	801037c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8010338:	2b80      	cmp	r3, #128	; 0x80
 801033a:	d016      	beq.n	801036a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 801033c:	2b80      	cmp	r3, #128	; 0x80
 801033e:	d81d      	bhi.n	801037c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8010340:	2b00      	cmp	r3, #0
 8010342:	d002      	beq.n	801034a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8010344:	2b40      	cmp	r3, #64	; 0x40
 8010346:	d007      	beq.n	8010358 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8010348:	e018      	b.n	801037c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801034a:	4b5e      	ldr	r3, [pc, #376]	; (80104c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 801034c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801034e:	4a5d      	ldr	r2, [pc, #372]	; (80104c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8010350:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010354:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8010356:	e017      	b.n	8010388 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	3304      	adds	r3, #4
 801035c:	2100      	movs	r1, #0
 801035e:	4618      	mov	r0, r3
 8010360:	f001 f94a 	bl	80115f8 <RCCEx_PLL2_Config>
 8010364:	4603      	mov	r3, r0
 8010366:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8010368:	e00e      	b.n	8010388 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	3324      	adds	r3, #36	; 0x24
 801036e:	2100      	movs	r1, #0
 8010370:	4618      	mov	r0, r3
 8010372:	f001 f9f3 	bl	801175c <RCCEx_PLL3_Config>
 8010376:	4603      	mov	r3, r0
 8010378:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 801037a:	e005      	b.n	8010388 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801037c:	2301      	movs	r3, #1
 801037e:	75fb      	strb	r3, [r7, #23]
      break;
 8010380:	e002      	b.n	8010388 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8010382:	bf00      	nop
 8010384:	e000      	b.n	8010388 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8010386:	bf00      	nop
    }

    if(ret == HAL_OK)
 8010388:	7dfb      	ldrb	r3, [r7, #23]
 801038a:	2b00      	cmp	r3, #0
 801038c:	d109      	bne.n	80103a2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 801038e:	4b4d      	ldr	r3, [pc, #308]	; (80104c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8010390:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010392:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801039a:	494a      	ldr	r1, [pc, #296]	; (80104c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 801039c:	4313      	orrs	r3, r2
 801039e:	650b      	str	r3, [r1, #80]	; 0x50
 80103a0:	e001      	b.n	80103a6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80103a2:	7dfb      	ldrb	r3, [r7, #23]
 80103a4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	681b      	ldr	r3, [r3, #0]
 80103aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d049      	beq.n	8010446 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80103b8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80103bc:	d030      	beq.n	8010420 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80103be:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80103c2:	d82a      	bhi.n	801041a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80103c4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80103c8:	d02c      	beq.n	8010424 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80103ca:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80103ce:	d824      	bhi.n	801041a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80103d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80103d4:	d018      	beq.n	8010408 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80103d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80103da:	d81e      	bhi.n	801041a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80103dc:	2b00      	cmp	r3, #0
 80103de:	d003      	beq.n	80103e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80103e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80103e4:	d007      	beq.n	80103f6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80103e6:	e018      	b.n	801041a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80103e8:	4b36      	ldr	r3, [pc, #216]	; (80104c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80103ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103ec:	4a35      	ldr	r2, [pc, #212]	; (80104c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80103ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80103f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80103f4:	e017      	b.n	8010426 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	3304      	adds	r3, #4
 80103fa:	2100      	movs	r1, #0
 80103fc:	4618      	mov	r0, r3
 80103fe:	f001 f8fb 	bl	80115f8 <RCCEx_PLL2_Config>
 8010402:	4603      	mov	r3, r0
 8010404:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8010406:	e00e      	b.n	8010426 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	3324      	adds	r3, #36	; 0x24
 801040c:	2100      	movs	r1, #0
 801040e:	4618      	mov	r0, r3
 8010410:	f001 f9a4 	bl	801175c <RCCEx_PLL3_Config>
 8010414:	4603      	mov	r3, r0
 8010416:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8010418:	e005      	b.n	8010426 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 801041a:	2301      	movs	r3, #1
 801041c:	75fb      	strb	r3, [r7, #23]
      break;
 801041e:	e002      	b.n	8010426 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8010420:	bf00      	nop
 8010422:	e000      	b.n	8010426 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8010424:	bf00      	nop
    }

    if(ret == HAL_OK)
 8010426:	7dfb      	ldrb	r3, [r7, #23]
 8010428:	2b00      	cmp	r3, #0
 801042a:	d10a      	bne.n	8010442 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 801042c:	4b25      	ldr	r3, [pc, #148]	; (80104c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 801042e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010430:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801043a:	4922      	ldr	r1, [pc, #136]	; (80104c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 801043c:	4313      	orrs	r3, r2
 801043e:	658b      	str	r3, [r1, #88]	; 0x58
 8010440:	e001      	b.n	8010446 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010442:	7dfb      	ldrb	r3, [r7, #23]
 8010444:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	681b      	ldr	r3, [r3, #0]
 801044a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801044e:	2b00      	cmp	r3, #0
 8010450:	d04b      	beq.n	80104ea <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8010458:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801045c:	d030      	beq.n	80104c0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 801045e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8010462:	d82a      	bhi.n	80104ba <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8010464:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8010468:	d02e      	beq.n	80104c8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 801046a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 801046e:	d824      	bhi.n	80104ba <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8010470:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010474:	d018      	beq.n	80104a8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8010476:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801047a:	d81e      	bhi.n	80104ba <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 801047c:	2b00      	cmp	r3, #0
 801047e:	d003      	beq.n	8010488 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8010480:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8010484:	d007      	beq.n	8010496 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8010486:	e018      	b.n	80104ba <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010488:	4b0e      	ldr	r3, [pc, #56]	; (80104c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 801048a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801048c:	4a0d      	ldr	r2, [pc, #52]	; (80104c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 801048e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010492:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8010494:	e019      	b.n	80104ca <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	3304      	adds	r3, #4
 801049a:	2100      	movs	r1, #0
 801049c:	4618      	mov	r0, r3
 801049e:	f001 f8ab 	bl	80115f8 <RCCEx_PLL2_Config>
 80104a2:	4603      	mov	r3, r0
 80104a4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80104a6:	e010      	b.n	80104ca <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	3324      	adds	r3, #36	; 0x24
 80104ac:	2100      	movs	r1, #0
 80104ae:	4618      	mov	r0, r3
 80104b0:	f001 f954 	bl	801175c <RCCEx_PLL3_Config>
 80104b4:	4603      	mov	r3, r0
 80104b6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80104b8:	e007      	b.n	80104ca <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80104ba:	2301      	movs	r3, #1
 80104bc:	75fb      	strb	r3, [r7, #23]
      break;
 80104be:	e004      	b.n	80104ca <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80104c0:	bf00      	nop
 80104c2:	e002      	b.n	80104ca <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80104c4:	58024400 	.word	0x58024400
      break;
 80104c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80104ca:	7dfb      	ldrb	r3, [r7, #23]
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d10a      	bne.n	80104e6 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80104d0:	4b99      	ldr	r3, [pc, #612]	; (8010738 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80104d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80104d4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80104de:	4996      	ldr	r1, [pc, #600]	; (8010738 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80104e0:	4313      	orrs	r3, r2
 80104e2:	658b      	str	r3, [r1, #88]	; 0x58
 80104e4:	e001      	b.n	80104ea <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80104e6:	7dfb      	ldrb	r3, [r7, #23]
 80104e8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	681b      	ldr	r3, [r3, #0]
 80104ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	d032      	beq.n	801055c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80104fa:	2b30      	cmp	r3, #48	; 0x30
 80104fc:	d01c      	beq.n	8010538 <HAL_RCCEx_PeriphCLKConfig+0x348>
 80104fe:	2b30      	cmp	r3, #48	; 0x30
 8010500:	d817      	bhi.n	8010532 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8010502:	2b20      	cmp	r3, #32
 8010504:	d00c      	beq.n	8010520 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8010506:	2b20      	cmp	r3, #32
 8010508:	d813      	bhi.n	8010532 <HAL_RCCEx_PeriphCLKConfig+0x342>
 801050a:	2b00      	cmp	r3, #0
 801050c:	d016      	beq.n	801053c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 801050e:	2b10      	cmp	r3, #16
 8010510:	d10f      	bne.n	8010532 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010512:	4b89      	ldr	r3, [pc, #548]	; (8010738 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8010514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010516:	4a88      	ldr	r2, [pc, #544]	; (8010738 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8010518:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801051c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 801051e:	e00e      	b.n	801053e <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	3304      	adds	r3, #4
 8010524:	2102      	movs	r1, #2
 8010526:	4618      	mov	r0, r3
 8010528:	f001 f866 	bl	80115f8 <RCCEx_PLL2_Config>
 801052c:	4603      	mov	r3, r0
 801052e:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8010530:	e005      	b.n	801053e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8010532:	2301      	movs	r3, #1
 8010534:	75fb      	strb	r3, [r7, #23]
      break;
 8010536:	e002      	b.n	801053e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8010538:	bf00      	nop
 801053a:	e000      	b.n	801053e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 801053c:	bf00      	nop
    }

    if(ret == HAL_OK)
 801053e:	7dfb      	ldrb	r3, [r7, #23]
 8010540:	2b00      	cmp	r3, #0
 8010542:	d109      	bne.n	8010558 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8010544:	4b7c      	ldr	r3, [pc, #496]	; (8010738 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8010546:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010548:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010550:	4979      	ldr	r1, [pc, #484]	; (8010738 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8010552:	4313      	orrs	r3, r2
 8010554:	64cb      	str	r3, [r1, #76]	; 0x4c
 8010556:	e001      	b.n	801055c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010558:	7dfb      	ldrb	r3, [r7, #23]
 801055a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	681b      	ldr	r3, [r3, #0]
 8010560:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8010564:	2b00      	cmp	r3, #0
 8010566:	d047      	beq.n	80105f8 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801056c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010570:	d030      	beq.n	80105d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8010572:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010576:	d82a      	bhi.n	80105ce <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8010578:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801057c:	d02c      	beq.n	80105d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 801057e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8010582:	d824      	bhi.n	80105ce <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8010584:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010588:	d018      	beq.n	80105bc <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 801058a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801058e:	d81e      	bhi.n	80105ce <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8010590:	2b00      	cmp	r3, #0
 8010592:	d003      	beq.n	801059c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8010594:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010598:	d007      	beq.n	80105aa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 801059a:	e018      	b.n	80105ce <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801059c:	4b66      	ldr	r3, [pc, #408]	; (8010738 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 801059e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80105a0:	4a65      	ldr	r2, [pc, #404]	; (8010738 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80105a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80105a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80105a8:	e017      	b.n	80105da <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	3304      	adds	r3, #4
 80105ae:	2100      	movs	r1, #0
 80105b0:	4618      	mov	r0, r3
 80105b2:	f001 f821 	bl	80115f8 <RCCEx_PLL2_Config>
 80105b6:	4603      	mov	r3, r0
 80105b8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80105ba:	e00e      	b.n	80105da <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	3324      	adds	r3, #36	; 0x24
 80105c0:	2100      	movs	r1, #0
 80105c2:	4618      	mov	r0, r3
 80105c4:	f001 f8ca 	bl	801175c <RCCEx_PLL3_Config>
 80105c8:	4603      	mov	r3, r0
 80105ca:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80105cc:	e005      	b.n	80105da <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80105ce:	2301      	movs	r3, #1
 80105d0:	75fb      	strb	r3, [r7, #23]
      break;
 80105d2:	e002      	b.n	80105da <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80105d4:	bf00      	nop
 80105d6:	e000      	b.n	80105da <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80105d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80105da:	7dfb      	ldrb	r3, [r7, #23]
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d109      	bne.n	80105f4 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80105e0:	4b55      	ldr	r3, [pc, #340]	; (8010738 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80105e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80105e4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80105ec:	4952      	ldr	r1, [pc, #328]	; (8010738 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80105ee:	4313      	orrs	r3, r2
 80105f0:	650b      	str	r3, [r1, #80]	; 0x50
 80105f2:	e001      	b.n	80105f8 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80105f4:	7dfb      	ldrb	r3, [r7, #23]
 80105f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	681b      	ldr	r3, [r3, #0]
 80105fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010600:	2b00      	cmp	r3, #0
 8010602:	d049      	beq.n	8010698 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010608:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801060c:	d02e      	beq.n	801066c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 801060e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8010612:	d828      	bhi.n	8010666 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8010614:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8010618:	d02a      	beq.n	8010670 <HAL_RCCEx_PeriphCLKConfig+0x480>
 801061a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 801061e:	d822      	bhi.n	8010666 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8010620:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8010624:	d026      	beq.n	8010674 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8010626:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 801062a:	d81c      	bhi.n	8010666 <HAL_RCCEx_PeriphCLKConfig+0x476>
 801062c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010630:	d010      	beq.n	8010654 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8010632:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010636:	d816      	bhi.n	8010666 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8010638:	2b00      	cmp	r3, #0
 801063a:	d01d      	beq.n	8010678 <HAL_RCCEx_PeriphCLKConfig+0x488>
 801063c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010640:	d111      	bne.n	8010666 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	3304      	adds	r3, #4
 8010646:	2101      	movs	r1, #1
 8010648:	4618      	mov	r0, r3
 801064a:	f000 ffd5 	bl	80115f8 <RCCEx_PLL2_Config>
 801064e:	4603      	mov	r3, r0
 8010650:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8010652:	e012      	b.n	801067a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	3324      	adds	r3, #36	; 0x24
 8010658:	2101      	movs	r1, #1
 801065a:	4618      	mov	r0, r3
 801065c:	f001 f87e 	bl	801175c <RCCEx_PLL3_Config>
 8010660:	4603      	mov	r3, r0
 8010662:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8010664:	e009      	b.n	801067a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8010666:	2301      	movs	r3, #1
 8010668:	75fb      	strb	r3, [r7, #23]
      break;
 801066a:	e006      	b.n	801067a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 801066c:	bf00      	nop
 801066e:	e004      	b.n	801067a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8010670:	bf00      	nop
 8010672:	e002      	b.n	801067a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8010674:	bf00      	nop
 8010676:	e000      	b.n	801067a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8010678:	bf00      	nop
    }

    if(ret == HAL_OK)
 801067a:	7dfb      	ldrb	r3, [r7, #23]
 801067c:	2b00      	cmp	r3, #0
 801067e:	d109      	bne.n	8010694 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8010680:	4b2d      	ldr	r3, [pc, #180]	; (8010738 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8010682:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010684:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801068c:	492a      	ldr	r1, [pc, #168]	; (8010738 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 801068e:	4313      	orrs	r3, r2
 8010690:	650b      	str	r3, [r1, #80]	; 0x50
 8010692:	e001      	b.n	8010698 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010694:	7dfb      	ldrb	r3, [r7, #23]
 8010696:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d04d      	beq.n	8010740 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80106aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80106ae:	d02e      	beq.n	801070e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80106b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80106b4:	d828      	bhi.n	8010708 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80106b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80106ba:	d02a      	beq.n	8010712 <HAL_RCCEx_PeriphCLKConfig+0x522>
 80106bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80106c0:	d822      	bhi.n	8010708 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80106c2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80106c6:	d026      	beq.n	8010716 <HAL_RCCEx_PeriphCLKConfig+0x526>
 80106c8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80106cc:	d81c      	bhi.n	8010708 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80106ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80106d2:	d010      	beq.n	80106f6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 80106d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80106d8:	d816      	bhi.n	8010708 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d01d      	beq.n	801071a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80106de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80106e2:	d111      	bne.n	8010708 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	3304      	adds	r3, #4
 80106e8:	2101      	movs	r1, #1
 80106ea:	4618      	mov	r0, r3
 80106ec:	f000 ff84 	bl	80115f8 <RCCEx_PLL2_Config>
 80106f0:	4603      	mov	r3, r0
 80106f2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80106f4:	e012      	b.n	801071c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	3324      	adds	r3, #36	; 0x24
 80106fa:	2101      	movs	r1, #1
 80106fc:	4618      	mov	r0, r3
 80106fe:	f001 f82d 	bl	801175c <RCCEx_PLL3_Config>
 8010702:	4603      	mov	r3, r0
 8010704:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8010706:	e009      	b.n	801071c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8010708:	2301      	movs	r3, #1
 801070a:	75fb      	strb	r3, [r7, #23]
      break;
 801070c:	e006      	b.n	801071c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 801070e:	bf00      	nop
 8010710:	e004      	b.n	801071c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8010712:	bf00      	nop
 8010714:	e002      	b.n	801071c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8010716:	bf00      	nop
 8010718:	e000      	b.n	801071c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 801071a:	bf00      	nop
    }

    if(ret == HAL_OK)
 801071c:	7dfb      	ldrb	r3, [r7, #23]
 801071e:	2b00      	cmp	r3, #0
 8010720:	d10c      	bne.n	801073c <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8010722:	4b05      	ldr	r3, [pc, #20]	; (8010738 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8010724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010726:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8010730:	4901      	ldr	r1, [pc, #4]	; (8010738 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8010732:	4313      	orrs	r3, r2
 8010734:	658b      	str	r3, [r1, #88]	; 0x58
 8010736:	e003      	b.n	8010740 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8010738:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801073c:	7dfb      	ldrb	r3, [r7, #23]
 801073e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010748:	2b00      	cmp	r3, #0
 801074a:	d02f      	beq.n	80107ac <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010750:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010754:	d00e      	beq.n	8010774 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8010756:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801075a:	d814      	bhi.n	8010786 <HAL_RCCEx_PeriphCLKConfig+0x596>
 801075c:	2b00      	cmp	r3, #0
 801075e:	d015      	beq.n	801078c <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8010760:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010764:	d10f      	bne.n	8010786 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010766:	4baf      	ldr	r3, [pc, #700]	; (8010a24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8010768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801076a:	4aae      	ldr	r2, [pc, #696]	; (8010a24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 801076c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010770:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8010772:	e00c      	b.n	801078e <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	3304      	adds	r3, #4
 8010778:	2101      	movs	r1, #1
 801077a:	4618      	mov	r0, r3
 801077c:	f000 ff3c 	bl	80115f8 <RCCEx_PLL2_Config>
 8010780:	4603      	mov	r3, r0
 8010782:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8010784:	e003      	b.n	801078e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8010786:	2301      	movs	r3, #1
 8010788:	75fb      	strb	r3, [r7, #23]
      break;
 801078a:	e000      	b.n	801078e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 801078c:	bf00      	nop
    }

    if(ret == HAL_OK)
 801078e:	7dfb      	ldrb	r3, [r7, #23]
 8010790:	2b00      	cmp	r3, #0
 8010792:	d109      	bne.n	80107a8 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8010794:	4ba3      	ldr	r3, [pc, #652]	; (8010a24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8010796:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010798:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80107a0:	49a0      	ldr	r1, [pc, #640]	; (8010a24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80107a2:	4313      	orrs	r3, r2
 80107a4:	650b      	str	r3, [r1, #80]	; 0x50
 80107a6:	e001      	b.n	80107ac <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80107a8:	7dfb      	ldrb	r3, [r7, #23]
 80107aa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	681b      	ldr	r3, [r3, #0]
 80107b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d032      	beq.n	801081e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80107bc:	2b03      	cmp	r3, #3
 80107be:	d81b      	bhi.n	80107f8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80107c0:	a201      	add	r2, pc, #4	; (adr r2, 80107c8 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 80107c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107c6:	bf00      	nop
 80107c8:	080107ff 	.word	0x080107ff
 80107cc:	080107d9 	.word	0x080107d9
 80107d0:	080107e7 	.word	0x080107e7
 80107d4:	080107ff 	.word	0x080107ff
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80107d8:	4b92      	ldr	r3, [pc, #584]	; (8010a24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80107da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107dc:	4a91      	ldr	r2, [pc, #580]	; (8010a24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80107de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80107e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80107e4:	e00c      	b.n	8010800 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	3304      	adds	r3, #4
 80107ea:	2102      	movs	r1, #2
 80107ec:	4618      	mov	r0, r3
 80107ee:	f000 ff03 	bl	80115f8 <RCCEx_PLL2_Config>
 80107f2:	4603      	mov	r3, r0
 80107f4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80107f6:	e003      	b.n	8010800 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80107f8:	2301      	movs	r3, #1
 80107fa:	75fb      	strb	r3, [r7, #23]
      break;
 80107fc:	e000      	b.n	8010800 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80107fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8010800:	7dfb      	ldrb	r3, [r7, #23]
 8010802:	2b00      	cmp	r3, #0
 8010804:	d109      	bne.n	801081a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8010806:	4b87      	ldr	r3, [pc, #540]	; (8010a24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8010808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801080a:	f023 0203 	bic.w	r2, r3, #3
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010812:	4984      	ldr	r1, [pc, #528]	; (8010a24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8010814:	4313      	orrs	r3, r2
 8010816:	64cb      	str	r3, [r1, #76]	; 0x4c
 8010818:	e001      	b.n	801081e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801081a:	7dfb      	ldrb	r3, [r7, #23]
 801081c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	681b      	ldr	r3, [r3, #0]
 8010822:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010826:	2b00      	cmp	r3, #0
 8010828:	f000 8086 	beq.w	8010938 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801082c:	4b7e      	ldr	r3, [pc, #504]	; (8010a28 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 801082e:	681b      	ldr	r3, [r3, #0]
 8010830:	4a7d      	ldr	r2, [pc, #500]	; (8010a28 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8010832:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010836:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8010838:	f7f9 fafc 	bl	8009e34 <HAL_GetTick>
 801083c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801083e:	e009      	b.n	8010854 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8010840:	f7f9 faf8 	bl	8009e34 <HAL_GetTick>
 8010844:	4602      	mov	r2, r0
 8010846:	693b      	ldr	r3, [r7, #16]
 8010848:	1ad3      	subs	r3, r2, r3
 801084a:	2b64      	cmp	r3, #100	; 0x64
 801084c:	d902      	bls.n	8010854 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 801084e:	2303      	movs	r3, #3
 8010850:	75fb      	strb	r3, [r7, #23]
        break;
 8010852:	e005      	b.n	8010860 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8010854:	4b74      	ldr	r3, [pc, #464]	; (8010a28 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8010856:	681b      	ldr	r3, [r3, #0]
 8010858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801085c:	2b00      	cmp	r3, #0
 801085e:	d0ef      	beq.n	8010840 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8010860:	7dfb      	ldrb	r3, [r7, #23]
 8010862:	2b00      	cmp	r3, #0
 8010864:	d166      	bne.n	8010934 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8010866:	4b6f      	ldr	r3, [pc, #444]	; (8010a24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8010868:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8010870:	4053      	eors	r3, r2
 8010872:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010876:	2b00      	cmp	r3, #0
 8010878:	d013      	beq.n	80108a2 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 801087a:	4b6a      	ldr	r3, [pc, #424]	; (8010a24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 801087c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801087e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010882:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8010884:	4b67      	ldr	r3, [pc, #412]	; (8010a24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8010886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010888:	4a66      	ldr	r2, [pc, #408]	; (8010a24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 801088a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801088e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8010890:	4b64      	ldr	r3, [pc, #400]	; (8010a24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8010892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010894:	4a63      	ldr	r2, [pc, #396]	; (8010a24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8010896:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801089a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 801089c:	4a61      	ldr	r2, [pc, #388]	; (8010a24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 801089e:	68fb      	ldr	r3, [r7, #12]
 80108a0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80108a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80108ac:	d115      	bne.n	80108da <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80108ae:	f7f9 fac1 	bl	8009e34 <HAL_GetTick>
 80108b2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80108b4:	e00b      	b.n	80108ce <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80108b6:	f7f9 fabd 	bl	8009e34 <HAL_GetTick>
 80108ba:	4602      	mov	r2, r0
 80108bc:	693b      	ldr	r3, [r7, #16]
 80108be:	1ad3      	subs	r3, r2, r3
 80108c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80108c4:	4293      	cmp	r3, r2
 80108c6:	d902      	bls.n	80108ce <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80108c8:	2303      	movs	r3, #3
 80108ca:	75fb      	strb	r3, [r7, #23]
            break;
 80108cc:	e005      	b.n	80108da <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80108ce:	4b55      	ldr	r3, [pc, #340]	; (8010a24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80108d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80108d2:	f003 0302 	and.w	r3, r3, #2
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	d0ed      	beq.n	80108b6 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80108da:	7dfb      	ldrb	r3, [r7, #23]
 80108dc:	2b00      	cmp	r3, #0
 80108de:	d126      	bne.n	801092e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80108e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80108ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80108ee:	d10d      	bne.n	801090c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80108f0:	4b4c      	ldr	r3, [pc, #304]	; (8010a24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80108f2:	691b      	ldr	r3, [r3, #16]
 80108f4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80108fe:	0919      	lsrs	r1, r3, #4
 8010900:	4b4a      	ldr	r3, [pc, #296]	; (8010a2c <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8010902:	400b      	ands	r3, r1
 8010904:	4947      	ldr	r1, [pc, #284]	; (8010a24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8010906:	4313      	orrs	r3, r2
 8010908:	610b      	str	r3, [r1, #16]
 801090a:	e005      	b.n	8010918 <HAL_RCCEx_PeriphCLKConfig+0x728>
 801090c:	4b45      	ldr	r3, [pc, #276]	; (8010a24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 801090e:	691b      	ldr	r3, [r3, #16]
 8010910:	4a44      	ldr	r2, [pc, #272]	; (8010a24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8010912:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8010916:	6113      	str	r3, [r2, #16]
 8010918:	4b42      	ldr	r3, [pc, #264]	; (8010a24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 801091a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8010922:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010926:	493f      	ldr	r1, [pc, #252]	; (8010a24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8010928:	4313      	orrs	r3, r2
 801092a:	670b      	str	r3, [r1, #112]	; 0x70
 801092c:	e004      	b.n	8010938 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 801092e:	7dfb      	ldrb	r3, [r7, #23]
 8010930:	75bb      	strb	r3, [r7, #22]
 8010932:	e001      	b.n	8010938 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010934:	7dfb      	ldrb	r3, [r7, #23]
 8010936:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	681b      	ldr	r3, [r3, #0]
 801093c:	f003 0301 	and.w	r3, r3, #1
 8010940:	2b00      	cmp	r3, #0
 8010942:	f000 8085 	beq.w	8010a50 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801094a:	2b28      	cmp	r3, #40	; 0x28
 801094c:	d866      	bhi.n	8010a1c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 801094e:	a201      	add	r2, pc, #4	; (adr r2, 8010954 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8010950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010954:	08010a31 	.word	0x08010a31
 8010958:	08010a1d 	.word	0x08010a1d
 801095c:	08010a1d 	.word	0x08010a1d
 8010960:	08010a1d 	.word	0x08010a1d
 8010964:	08010a1d 	.word	0x08010a1d
 8010968:	08010a1d 	.word	0x08010a1d
 801096c:	08010a1d 	.word	0x08010a1d
 8010970:	08010a1d 	.word	0x08010a1d
 8010974:	080109f9 	.word	0x080109f9
 8010978:	08010a1d 	.word	0x08010a1d
 801097c:	08010a1d 	.word	0x08010a1d
 8010980:	08010a1d 	.word	0x08010a1d
 8010984:	08010a1d 	.word	0x08010a1d
 8010988:	08010a1d 	.word	0x08010a1d
 801098c:	08010a1d 	.word	0x08010a1d
 8010990:	08010a1d 	.word	0x08010a1d
 8010994:	08010a0b 	.word	0x08010a0b
 8010998:	08010a1d 	.word	0x08010a1d
 801099c:	08010a1d 	.word	0x08010a1d
 80109a0:	08010a1d 	.word	0x08010a1d
 80109a4:	08010a1d 	.word	0x08010a1d
 80109a8:	08010a1d 	.word	0x08010a1d
 80109ac:	08010a1d 	.word	0x08010a1d
 80109b0:	08010a1d 	.word	0x08010a1d
 80109b4:	08010a31 	.word	0x08010a31
 80109b8:	08010a1d 	.word	0x08010a1d
 80109bc:	08010a1d 	.word	0x08010a1d
 80109c0:	08010a1d 	.word	0x08010a1d
 80109c4:	08010a1d 	.word	0x08010a1d
 80109c8:	08010a1d 	.word	0x08010a1d
 80109cc:	08010a1d 	.word	0x08010a1d
 80109d0:	08010a1d 	.word	0x08010a1d
 80109d4:	08010a31 	.word	0x08010a31
 80109d8:	08010a1d 	.word	0x08010a1d
 80109dc:	08010a1d 	.word	0x08010a1d
 80109e0:	08010a1d 	.word	0x08010a1d
 80109e4:	08010a1d 	.word	0x08010a1d
 80109e8:	08010a1d 	.word	0x08010a1d
 80109ec:	08010a1d 	.word	0x08010a1d
 80109f0:	08010a1d 	.word	0x08010a1d
 80109f4:	08010a31 	.word	0x08010a31
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	3304      	adds	r3, #4
 80109fc:	2101      	movs	r1, #1
 80109fe:	4618      	mov	r0, r3
 8010a00:	f000 fdfa 	bl	80115f8 <RCCEx_PLL2_Config>
 8010a04:	4603      	mov	r3, r0
 8010a06:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8010a08:	e013      	b.n	8010a32 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	3324      	adds	r3, #36	; 0x24
 8010a0e:	2101      	movs	r1, #1
 8010a10:	4618      	mov	r0, r3
 8010a12:	f000 fea3 	bl	801175c <RCCEx_PLL3_Config>
 8010a16:	4603      	mov	r3, r0
 8010a18:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8010a1a:	e00a      	b.n	8010a32 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8010a1c:	2301      	movs	r3, #1
 8010a1e:	75fb      	strb	r3, [r7, #23]
      break;
 8010a20:	e007      	b.n	8010a32 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8010a22:	bf00      	nop
 8010a24:	58024400 	.word	0x58024400
 8010a28:	58024800 	.word	0x58024800
 8010a2c:	00ffffcf 	.word	0x00ffffcf
      break;
 8010a30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8010a32:	7dfb      	ldrb	r3, [r7, #23]
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d109      	bne.n	8010a4c <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8010a38:	4b96      	ldr	r3, [pc, #600]	; (8010c94 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8010a3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010a3c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010a44:	4993      	ldr	r1, [pc, #588]	; (8010c94 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8010a46:	4313      	orrs	r3, r2
 8010a48:	654b      	str	r3, [r1, #84]	; 0x54
 8010a4a:	e001      	b.n	8010a50 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010a4c:	7dfb      	ldrb	r3, [r7, #23]
 8010a4e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	681b      	ldr	r3, [r3, #0]
 8010a54:	f003 0302 	and.w	r3, r3, #2
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	d038      	beq.n	8010ace <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010a60:	2b05      	cmp	r3, #5
 8010a62:	d821      	bhi.n	8010aa8 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8010a64:	a201      	add	r2, pc, #4	; (adr r2, 8010a6c <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8010a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a6a:	bf00      	nop
 8010a6c:	08010aaf 	.word	0x08010aaf
 8010a70:	08010a85 	.word	0x08010a85
 8010a74:	08010a97 	.word	0x08010a97
 8010a78:	08010aaf 	.word	0x08010aaf
 8010a7c:	08010aaf 	.word	0x08010aaf
 8010a80:	08010aaf 	.word	0x08010aaf
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	3304      	adds	r3, #4
 8010a88:	2101      	movs	r1, #1
 8010a8a:	4618      	mov	r0, r3
 8010a8c:	f000 fdb4 	bl	80115f8 <RCCEx_PLL2_Config>
 8010a90:	4603      	mov	r3, r0
 8010a92:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8010a94:	e00c      	b.n	8010ab0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	3324      	adds	r3, #36	; 0x24
 8010a9a:	2101      	movs	r1, #1
 8010a9c:	4618      	mov	r0, r3
 8010a9e:	f000 fe5d 	bl	801175c <RCCEx_PLL3_Config>
 8010aa2:	4603      	mov	r3, r0
 8010aa4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8010aa6:	e003      	b.n	8010ab0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8010aa8:	2301      	movs	r3, #1
 8010aaa:	75fb      	strb	r3, [r7, #23]
      break;
 8010aac:	e000      	b.n	8010ab0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8010aae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8010ab0:	7dfb      	ldrb	r3, [r7, #23]
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	d109      	bne.n	8010aca <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8010ab6:	4b77      	ldr	r3, [pc, #476]	; (8010c94 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8010ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010aba:	f023 0207 	bic.w	r2, r3, #7
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010ac2:	4974      	ldr	r1, [pc, #464]	; (8010c94 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8010ac4:	4313      	orrs	r3, r2
 8010ac6:	654b      	str	r3, [r1, #84]	; 0x54
 8010ac8:	e001      	b.n	8010ace <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010aca:	7dfb      	ldrb	r3, [r7, #23]
 8010acc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	681b      	ldr	r3, [r3, #0]
 8010ad2:	f003 0304 	and.w	r3, r3, #4
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	d03a      	beq.n	8010b50 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010ae0:	2b05      	cmp	r3, #5
 8010ae2:	d821      	bhi.n	8010b28 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8010ae4:	a201      	add	r2, pc, #4	; (adr r2, 8010aec <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8010ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010aea:	bf00      	nop
 8010aec:	08010b2f 	.word	0x08010b2f
 8010af0:	08010b05 	.word	0x08010b05
 8010af4:	08010b17 	.word	0x08010b17
 8010af8:	08010b2f 	.word	0x08010b2f
 8010afc:	08010b2f 	.word	0x08010b2f
 8010b00:	08010b2f 	.word	0x08010b2f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	3304      	adds	r3, #4
 8010b08:	2101      	movs	r1, #1
 8010b0a:	4618      	mov	r0, r3
 8010b0c:	f000 fd74 	bl	80115f8 <RCCEx_PLL2_Config>
 8010b10:	4603      	mov	r3, r0
 8010b12:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8010b14:	e00c      	b.n	8010b30 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	3324      	adds	r3, #36	; 0x24
 8010b1a:	2101      	movs	r1, #1
 8010b1c:	4618      	mov	r0, r3
 8010b1e:	f000 fe1d 	bl	801175c <RCCEx_PLL3_Config>
 8010b22:	4603      	mov	r3, r0
 8010b24:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8010b26:	e003      	b.n	8010b30 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8010b28:	2301      	movs	r3, #1
 8010b2a:	75fb      	strb	r3, [r7, #23]
      break;
 8010b2c:	e000      	b.n	8010b30 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8010b2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8010b30:	7dfb      	ldrb	r3, [r7, #23]
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	d10a      	bne.n	8010b4c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8010b36:	4b57      	ldr	r3, [pc, #348]	; (8010c94 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8010b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010b3a:	f023 0207 	bic.w	r2, r3, #7
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010b44:	4953      	ldr	r1, [pc, #332]	; (8010c94 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8010b46:	4313      	orrs	r3, r2
 8010b48:	658b      	str	r3, [r1, #88]	; 0x58
 8010b4a:	e001      	b.n	8010b50 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010b4c:	7dfb      	ldrb	r3, [r7, #23]
 8010b4e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	681b      	ldr	r3, [r3, #0]
 8010b54:	f003 0320 	and.w	r3, r3, #32
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d04b      	beq.n	8010bf4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010b62:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010b66:	d02e      	beq.n	8010bc6 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8010b68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010b6c:	d828      	bhi.n	8010bc0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8010b6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010b72:	d02a      	beq.n	8010bca <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8010b74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010b78:	d822      	bhi.n	8010bc0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8010b7a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8010b7e:	d026      	beq.n	8010bce <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8010b80:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8010b84:	d81c      	bhi.n	8010bc0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8010b86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010b8a:	d010      	beq.n	8010bae <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8010b8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010b90:	d816      	bhi.n	8010bc0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	d01d      	beq.n	8010bd2 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8010b96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010b9a:	d111      	bne.n	8010bc0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	3304      	adds	r3, #4
 8010ba0:	2100      	movs	r1, #0
 8010ba2:	4618      	mov	r0, r3
 8010ba4:	f000 fd28 	bl	80115f8 <RCCEx_PLL2_Config>
 8010ba8:	4603      	mov	r3, r0
 8010baa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8010bac:	e012      	b.n	8010bd4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	3324      	adds	r3, #36	; 0x24
 8010bb2:	2102      	movs	r1, #2
 8010bb4:	4618      	mov	r0, r3
 8010bb6:	f000 fdd1 	bl	801175c <RCCEx_PLL3_Config>
 8010bba:	4603      	mov	r3, r0
 8010bbc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8010bbe:	e009      	b.n	8010bd4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8010bc0:	2301      	movs	r3, #1
 8010bc2:	75fb      	strb	r3, [r7, #23]
      break;
 8010bc4:	e006      	b.n	8010bd4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8010bc6:	bf00      	nop
 8010bc8:	e004      	b.n	8010bd4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8010bca:	bf00      	nop
 8010bcc:	e002      	b.n	8010bd4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8010bce:	bf00      	nop
 8010bd0:	e000      	b.n	8010bd4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8010bd2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8010bd4:	7dfb      	ldrb	r3, [r7, #23]
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	d10a      	bne.n	8010bf0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8010bda:	4b2e      	ldr	r3, [pc, #184]	; (8010c94 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8010bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010bde:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010be8:	492a      	ldr	r1, [pc, #168]	; (8010c94 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8010bea:	4313      	orrs	r3, r2
 8010bec:	654b      	str	r3, [r1, #84]	; 0x54
 8010bee:	e001      	b.n	8010bf4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010bf0:	7dfb      	ldrb	r3, [r7, #23]
 8010bf2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	681b      	ldr	r3, [r3, #0]
 8010bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	d04d      	beq.n	8010c9c <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8010c06:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8010c0a:	d02e      	beq.n	8010c6a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8010c0c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8010c10:	d828      	bhi.n	8010c64 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8010c12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010c16:	d02a      	beq.n	8010c6e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8010c18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010c1c:	d822      	bhi.n	8010c64 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8010c1e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8010c22:	d026      	beq.n	8010c72 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8010c24:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8010c28:	d81c      	bhi.n	8010c64 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8010c2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010c2e:	d010      	beq.n	8010c52 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8010c30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010c34:	d816      	bhi.n	8010c64 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d01d      	beq.n	8010c76 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8010c3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010c3e:	d111      	bne.n	8010c64 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	3304      	adds	r3, #4
 8010c44:	2100      	movs	r1, #0
 8010c46:	4618      	mov	r0, r3
 8010c48:	f000 fcd6 	bl	80115f8 <RCCEx_PLL2_Config>
 8010c4c:	4603      	mov	r3, r0
 8010c4e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8010c50:	e012      	b.n	8010c78 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	3324      	adds	r3, #36	; 0x24
 8010c56:	2102      	movs	r1, #2
 8010c58:	4618      	mov	r0, r3
 8010c5a:	f000 fd7f 	bl	801175c <RCCEx_PLL3_Config>
 8010c5e:	4603      	mov	r3, r0
 8010c60:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8010c62:	e009      	b.n	8010c78 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8010c64:	2301      	movs	r3, #1
 8010c66:	75fb      	strb	r3, [r7, #23]
      break;
 8010c68:	e006      	b.n	8010c78 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8010c6a:	bf00      	nop
 8010c6c:	e004      	b.n	8010c78 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8010c6e:	bf00      	nop
 8010c70:	e002      	b.n	8010c78 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8010c72:	bf00      	nop
 8010c74:	e000      	b.n	8010c78 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8010c76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8010c78:	7dfb      	ldrb	r3, [r7, #23]
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	d10c      	bne.n	8010c98 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8010c7e:	4b05      	ldr	r3, [pc, #20]	; (8010c94 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8010c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010c82:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8010c8c:	4901      	ldr	r1, [pc, #4]	; (8010c94 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8010c8e:	4313      	orrs	r3, r2
 8010c90:	658b      	str	r3, [r1, #88]	; 0x58
 8010c92:	e003      	b.n	8010c9c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8010c94:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010c98:	7dfb      	ldrb	r3, [r7, #23]
 8010c9a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	681b      	ldr	r3, [r3, #0]
 8010ca0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	d04b      	beq.n	8010d40 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8010cae:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8010cb2:	d02e      	beq.n	8010d12 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8010cb4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8010cb8:	d828      	bhi.n	8010d0c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8010cba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010cbe:	d02a      	beq.n	8010d16 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8010cc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010cc4:	d822      	bhi.n	8010d0c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8010cc6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8010cca:	d026      	beq.n	8010d1a <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8010ccc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8010cd0:	d81c      	bhi.n	8010d0c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8010cd2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010cd6:	d010      	beq.n	8010cfa <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8010cd8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010cdc:	d816      	bhi.n	8010d0c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8010cde:	2b00      	cmp	r3, #0
 8010ce0:	d01d      	beq.n	8010d1e <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8010ce2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010ce6:	d111      	bne.n	8010d0c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	3304      	adds	r3, #4
 8010cec:	2100      	movs	r1, #0
 8010cee:	4618      	mov	r0, r3
 8010cf0:	f000 fc82 	bl	80115f8 <RCCEx_PLL2_Config>
 8010cf4:	4603      	mov	r3, r0
 8010cf6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8010cf8:	e012      	b.n	8010d20 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	3324      	adds	r3, #36	; 0x24
 8010cfe:	2102      	movs	r1, #2
 8010d00:	4618      	mov	r0, r3
 8010d02:	f000 fd2b 	bl	801175c <RCCEx_PLL3_Config>
 8010d06:	4603      	mov	r3, r0
 8010d08:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8010d0a:	e009      	b.n	8010d20 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8010d0c:	2301      	movs	r3, #1
 8010d0e:	75fb      	strb	r3, [r7, #23]
      break;
 8010d10:	e006      	b.n	8010d20 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8010d12:	bf00      	nop
 8010d14:	e004      	b.n	8010d20 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8010d16:	bf00      	nop
 8010d18:	e002      	b.n	8010d20 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8010d1a:	bf00      	nop
 8010d1c:	e000      	b.n	8010d20 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8010d1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8010d20:	7dfb      	ldrb	r3, [r7, #23]
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d10a      	bne.n	8010d3c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8010d26:	4b9d      	ldr	r3, [pc, #628]	; (8010f9c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8010d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010d2a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8010d34:	4999      	ldr	r1, [pc, #612]	; (8010f9c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8010d36:	4313      	orrs	r3, r2
 8010d38:	658b      	str	r3, [r1, #88]	; 0x58
 8010d3a:	e001      	b.n	8010d40 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010d3c:	7dfb      	ldrb	r3, [r7, #23]
 8010d3e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	681b      	ldr	r3, [r3, #0]
 8010d44:	f003 0308 	and.w	r3, r3, #8
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	d01a      	beq.n	8010d82 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010d52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010d56:	d10a      	bne.n	8010d6e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	3324      	adds	r3, #36	; 0x24
 8010d5c:	2102      	movs	r1, #2
 8010d5e:	4618      	mov	r0, r3
 8010d60:	f000 fcfc 	bl	801175c <RCCEx_PLL3_Config>
 8010d64:	4603      	mov	r3, r0
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d001      	beq.n	8010d6e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8010d6a:	2301      	movs	r3, #1
 8010d6c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8010d6e:	4b8b      	ldr	r3, [pc, #556]	; (8010f9c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8010d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010d72:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010d7c:	4987      	ldr	r1, [pc, #540]	; (8010f9c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8010d7e:	4313      	orrs	r3, r2
 8010d80:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	681b      	ldr	r3, [r3, #0]
 8010d86:	f003 0310 	and.w	r3, r3, #16
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	d01a      	beq.n	8010dc4 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010d94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010d98:	d10a      	bne.n	8010db0 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	3324      	adds	r3, #36	; 0x24
 8010d9e:	2102      	movs	r1, #2
 8010da0:	4618      	mov	r0, r3
 8010da2:	f000 fcdb 	bl	801175c <RCCEx_PLL3_Config>
 8010da6:	4603      	mov	r3, r0
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	d001      	beq.n	8010db0 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8010dac:	2301      	movs	r3, #1
 8010dae:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8010db0:	4b7a      	ldr	r3, [pc, #488]	; (8010f9c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8010db2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010db4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010dbe:	4977      	ldr	r1, [pc, #476]	; (8010f9c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8010dc0:	4313      	orrs	r3, r2
 8010dc2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	681b      	ldr	r3, [r3, #0]
 8010dc8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	d034      	beq.n	8010e3a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8010dd6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010dda:	d01d      	beq.n	8010e18 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8010ddc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010de0:	d817      	bhi.n	8010e12 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	d003      	beq.n	8010dee <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8010de6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010dea:	d009      	beq.n	8010e00 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8010dec:	e011      	b.n	8010e12 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	3304      	adds	r3, #4
 8010df2:	2100      	movs	r1, #0
 8010df4:	4618      	mov	r0, r3
 8010df6:	f000 fbff 	bl	80115f8 <RCCEx_PLL2_Config>
 8010dfa:	4603      	mov	r3, r0
 8010dfc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8010dfe:	e00c      	b.n	8010e1a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	3324      	adds	r3, #36	; 0x24
 8010e04:	2102      	movs	r1, #2
 8010e06:	4618      	mov	r0, r3
 8010e08:	f000 fca8 	bl	801175c <RCCEx_PLL3_Config>
 8010e0c:	4603      	mov	r3, r0
 8010e0e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8010e10:	e003      	b.n	8010e1a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8010e12:	2301      	movs	r3, #1
 8010e14:	75fb      	strb	r3, [r7, #23]
      break;
 8010e16:	e000      	b.n	8010e1a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8010e18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8010e1a:	7dfb      	ldrb	r3, [r7, #23]
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d10a      	bne.n	8010e36 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8010e20:	4b5e      	ldr	r3, [pc, #376]	; (8010f9c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8010e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010e24:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8010e2e:	495b      	ldr	r1, [pc, #364]	; (8010f9c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8010e30:	4313      	orrs	r3, r2
 8010e32:	658b      	str	r3, [r1, #88]	; 0x58
 8010e34:	e001      	b.n	8010e3a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010e36:	7dfb      	ldrb	r3, [r7, #23]
 8010e38:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	681b      	ldr	r3, [r3, #0]
 8010e3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d033      	beq.n	8010eae <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010e4c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8010e50:	d01c      	beq.n	8010e8c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8010e52:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8010e56:	d816      	bhi.n	8010e86 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8010e58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010e5c:	d003      	beq.n	8010e66 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8010e5e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010e62:	d007      	beq.n	8010e74 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8010e64:	e00f      	b.n	8010e86 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010e66:	4b4d      	ldr	r3, [pc, #308]	; (8010f9c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8010e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e6a:	4a4c      	ldr	r2, [pc, #304]	; (8010f9c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8010e6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010e70:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8010e72:	e00c      	b.n	8010e8e <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	3324      	adds	r3, #36	; 0x24
 8010e78:	2101      	movs	r1, #1
 8010e7a:	4618      	mov	r0, r3
 8010e7c:	f000 fc6e 	bl	801175c <RCCEx_PLL3_Config>
 8010e80:	4603      	mov	r3, r0
 8010e82:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8010e84:	e003      	b.n	8010e8e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8010e86:	2301      	movs	r3, #1
 8010e88:	75fb      	strb	r3, [r7, #23]
      break;
 8010e8a:	e000      	b.n	8010e8e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8010e8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8010e8e:	7dfb      	ldrb	r3, [r7, #23]
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	d10a      	bne.n	8010eaa <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8010e94:	4b41      	ldr	r3, [pc, #260]	; (8010f9c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8010e96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010e98:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010ea2:	493e      	ldr	r1, [pc, #248]	; (8010f9c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8010ea4:	4313      	orrs	r3, r2
 8010ea6:	654b      	str	r3, [r1, #84]	; 0x54
 8010ea8:	e001      	b.n	8010eae <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010eaa:	7dfb      	ldrb	r3, [r7, #23]
 8010eac:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	681b      	ldr	r3, [r3, #0]
 8010eb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d029      	beq.n	8010f0e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	d003      	beq.n	8010eca <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8010ec2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010ec6:	d007      	beq.n	8010ed8 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8010ec8:	e00f      	b.n	8010eea <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010eca:	4b34      	ldr	r3, [pc, #208]	; (8010f9c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8010ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ece:	4a33      	ldr	r2, [pc, #204]	; (8010f9c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8010ed0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010ed4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8010ed6:	e00b      	b.n	8010ef0 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	3304      	adds	r3, #4
 8010edc:	2102      	movs	r1, #2
 8010ede:	4618      	mov	r0, r3
 8010ee0:	f000 fb8a 	bl	80115f8 <RCCEx_PLL2_Config>
 8010ee4:	4603      	mov	r3, r0
 8010ee6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8010ee8:	e002      	b.n	8010ef0 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8010eea:	2301      	movs	r3, #1
 8010eec:	75fb      	strb	r3, [r7, #23]
      break;
 8010eee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8010ef0:	7dfb      	ldrb	r3, [r7, #23]
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	d109      	bne.n	8010f0a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8010ef6:	4b29      	ldr	r3, [pc, #164]	; (8010f9c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8010ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010efa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010f02:	4926      	ldr	r1, [pc, #152]	; (8010f9c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8010f04:	4313      	orrs	r3, r2
 8010f06:	64cb      	str	r3, [r1, #76]	; 0x4c
 8010f08:	e001      	b.n	8010f0e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010f0a:	7dfb      	ldrb	r3, [r7, #23]
 8010f0c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	681b      	ldr	r3, [r3, #0]
 8010f12:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	d00a      	beq.n	8010f30 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	3324      	adds	r3, #36	; 0x24
 8010f1e:	2102      	movs	r1, #2
 8010f20:	4618      	mov	r0, r3
 8010f22:	f000 fc1b 	bl	801175c <RCCEx_PLL3_Config>
 8010f26:	4603      	mov	r3, r0
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d001      	beq.n	8010f30 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8010f2c:	2301      	movs	r3, #1
 8010f2e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	681b      	ldr	r3, [r3, #0]
 8010f34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	d033      	beq.n	8010fa4 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010f40:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010f44:	d017      	beq.n	8010f76 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8010f46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010f4a:	d811      	bhi.n	8010f70 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8010f4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010f50:	d013      	beq.n	8010f7a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8010f52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010f56:	d80b      	bhi.n	8010f70 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d010      	beq.n	8010f7e <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8010f5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010f60:	d106      	bne.n	8010f70 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010f62:	4b0e      	ldr	r3, [pc, #56]	; (8010f9c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8010f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f66:	4a0d      	ldr	r2, [pc, #52]	; (8010f9c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8010f68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010f6c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8010f6e:	e007      	b.n	8010f80 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8010f70:	2301      	movs	r3, #1
 8010f72:	75fb      	strb	r3, [r7, #23]
      break;
 8010f74:	e004      	b.n	8010f80 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8010f76:	bf00      	nop
 8010f78:	e002      	b.n	8010f80 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8010f7a:	bf00      	nop
 8010f7c:	e000      	b.n	8010f80 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8010f7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8010f80:	7dfb      	ldrb	r3, [r7, #23]
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d10c      	bne.n	8010fa0 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8010f86:	4b05      	ldr	r3, [pc, #20]	; (8010f9c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8010f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010f8a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010f92:	4902      	ldr	r1, [pc, #8]	; (8010f9c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8010f94:	4313      	orrs	r3, r2
 8010f96:	654b      	str	r3, [r1, #84]	; 0x54
 8010f98:	e004      	b.n	8010fa4 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8010f9a:	bf00      	nop
 8010f9c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010fa0:	7dfb      	ldrb	r3, [r7, #23]
 8010fa2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	681b      	ldr	r3, [r3, #0]
 8010fa8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	d008      	beq.n	8010fc2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8010fb0:	4b31      	ldr	r3, [pc, #196]	; (8011078 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8010fb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010fb4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010fbc:	492e      	ldr	r1, [pc, #184]	; (8011078 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8010fbe:	4313      	orrs	r3, r2
 8010fc0:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	681b      	ldr	r3, [r3, #0]
 8010fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d009      	beq.n	8010fe2 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8010fce:	4b2a      	ldr	r3, [pc, #168]	; (8011078 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8010fd0:	691b      	ldr	r3, [r3, #16]
 8010fd2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8010fdc:	4926      	ldr	r1, [pc, #152]	; (8011078 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8010fde:	4313      	orrs	r3, r2
 8010fe0:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	681b      	ldr	r3, [r3, #0]
 8010fe6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	d008      	beq.n	8011000 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8010fee:	4b22      	ldr	r3, [pc, #136]	; (8011078 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8010ff0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010ff2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010ffa:	491f      	ldr	r1, [pc, #124]	; (8011078 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8010ffc:	4313      	orrs	r3, r2
 8010ffe:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	681b      	ldr	r3, [r3, #0]
 8011004:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8011008:	2b00      	cmp	r3, #0
 801100a:	d00d      	beq.n	8011028 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 801100c:	4b1a      	ldr	r3, [pc, #104]	; (8011078 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 801100e:	691b      	ldr	r3, [r3, #16]
 8011010:	4a19      	ldr	r2, [pc, #100]	; (8011078 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8011012:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8011016:	6113      	str	r3, [r2, #16]
 8011018:	4b17      	ldr	r3, [pc, #92]	; (8011078 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 801101a:	691a      	ldr	r2, [r3, #16]
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8011022:	4915      	ldr	r1, [pc, #84]	; (8011078 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8011024:	4313      	orrs	r3, r2
 8011026:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	681b      	ldr	r3, [r3, #0]
 801102c:	2b00      	cmp	r3, #0
 801102e:	da08      	bge.n	8011042 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8011030:	4b11      	ldr	r3, [pc, #68]	; (8011078 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8011032:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011034:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801103c:	490e      	ldr	r1, [pc, #56]	; (8011078 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 801103e:	4313      	orrs	r3, r2
 8011040:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	681b      	ldr	r3, [r3, #0]
 8011046:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801104a:	2b00      	cmp	r3, #0
 801104c:	d009      	beq.n	8011062 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 801104e:	4b0a      	ldr	r3, [pc, #40]	; (8011078 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8011050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011052:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801105c:	4906      	ldr	r1, [pc, #24]	; (8011078 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 801105e:	4313      	orrs	r3, r2
 8011060:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8011062:	7dbb      	ldrb	r3, [r7, #22]
 8011064:	2b00      	cmp	r3, #0
 8011066:	d101      	bne.n	801106c <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8011068:	2300      	movs	r3, #0
 801106a:	e000      	b.n	801106e <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 801106c:	2301      	movs	r3, #1
}
 801106e:	4618      	mov	r0, r3
 8011070:	3718      	adds	r7, #24
 8011072:	46bd      	mov	sp, r7
 8011074:	bd80      	pop	{r7, pc}
 8011076:	bf00      	nop
 8011078:	58024400 	.word	0x58024400

0801107c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 801107c:	b580      	push	{r7, lr}
 801107e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8011080:	f7ff f85a 	bl	8010138 <HAL_RCC_GetHCLKFreq>
 8011084:	4602      	mov	r2, r0
 8011086:	4b06      	ldr	r3, [pc, #24]	; (80110a0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8011088:	6a1b      	ldr	r3, [r3, #32]
 801108a:	091b      	lsrs	r3, r3, #4
 801108c:	f003 0307 	and.w	r3, r3, #7
 8011090:	4904      	ldr	r1, [pc, #16]	; (80110a4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8011092:	5ccb      	ldrb	r3, [r1, r3]
 8011094:	f003 031f 	and.w	r3, r3, #31
 8011098:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 801109c:	4618      	mov	r0, r3
 801109e:	bd80      	pop	{r7, pc}
 80110a0:	58024400 	.word	0x58024400
 80110a4:	0803598c 	.word	0x0803598c

080110a8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80110a8:	b480      	push	{r7}
 80110aa:	b089      	sub	sp, #36	; 0x24
 80110ac:	af00      	add	r7, sp, #0
 80110ae:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80110b0:	4ba1      	ldr	r3, [pc, #644]	; (8011338 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80110b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80110b4:	f003 0303 	and.w	r3, r3, #3
 80110b8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80110ba:	4b9f      	ldr	r3, [pc, #636]	; (8011338 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80110bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80110be:	0b1b      	lsrs	r3, r3, #12
 80110c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80110c4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80110c6:	4b9c      	ldr	r3, [pc, #624]	; (8011338 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80110c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80110ca:	091b      	lsrs	r3, r3, #4
 80110cc:	f003 0301 	and.w	r3, r3, #1
 80110d0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80110d2:	4b99      	ldr	r3, [pc, #612]	; (8011338 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80110d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80110d6:	08db      	lsrs	r3, r3, #3
 80110d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80110dc:	693a      	ldr	r2, [r7, #16]
 80110de:	fb02 f303 	mul.w	r3, r2, r3
 80110e2:	ee07 3a90 	vmov	s15, r3
 80110e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80110ea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80110ee:	697b      	ldr	r3, [r7, #20]
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	f000 8111 	beq.w	8011318 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80110f6:	69bb      	ldr	r3, [r7, #24]
 80110f8:	2b02      	cmp	r3, #2
 80110fa:	f000 8083 	beq.w	8011204 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80110fe:	69bb      	ldr	r3, [r7, #24]
 8011100:	2b02      	cmp	r3, #2
 8011102:	f200 80a1 	bhi.w	8011248 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8011106:	69bb      	ldr	r3, [r7, #24]
 8011108:	2b00      	cmp	r3, #0
 801110a:	d003      	beq.n	8011114 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 801110c:	69bb      	ldr	r3, [r7, #24]
 801110e:	2b01      	cmp	r3, #1
 8011110:	d056      	beq.n	80111c0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8011112:	e099      	b.n	8011248 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011114:	4b88      	ldr	r3, [pc, #544]	; (8011338 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8011116:	681b      	ldr	r3, [r3, #0]
 8011118:	f003 0320 	and.w	r3, r3, #32
 801111c:	2b00      	cmp	r3, #0
 801111e:	d02d      	beq.n	801117c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8011120:	4b85      	ldr	r3, [pc, #532]	; (8011338 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8011122:	681b      	ldr	r3, [r3, #0]
 8011124:	08db      	lsrs	r3, r3, #3
 8011126:	f003 0303 	and.w	r3, r3, #3
 801112a:	4a84      	ldr	r2, [pc, #528]	; (801133c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 801112c:	fa22 f303 	lsr.w	r3, r2, r3
 8011130:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8011132:	68bb      	ldr	r3, [r7, #8]
 8011134:	ee07 3a90 	vmov	s15, r3
 8011138:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801113c:	697b      	ldr	r3, [r7, #20]
 801113e:	ee07 3a90 	vmov	s15, r3
 8011142:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011146:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801114a:	4b7b      	ldr	r3, [pc, #492]	; (8011338 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801114c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801114e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011152:	ee07 3a90 	vmov	s15, r3
 8011156:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801115a:	ed97 6a03 	vldr	s12, [r7, #12]
 801115e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8011340 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8011162:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011166:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801116a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801116e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011172:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011176:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 801117a:	e087      	b.n	801128c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 801117c:	697b      	ldr	r3, [r7, #20]
 801117e:	ee07 3a90 	vmov	s15, r3
 8011182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011186:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8011344 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 801118a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801118e:	4b6a      	ldr	r3, [pc, #424]	; (8011338 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8011190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011192:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011196:	ee07 3a90 	vmov	s15, r3
 801119a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801119e:	ed97 6a03 	vldr	s12, [r7, #12]
 80111a2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8011340 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80111a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80111aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80111ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80111b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80111b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80111ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80111be:	e065      	b.n	801128c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80111c0:	697b      	ldr	r3, [r7, #20]
 80111c2:	ee07 3a90 	vmov	s15, r3
 80111c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80111ca:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8011348 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80111ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80111d2:	4b59      	ldr	r3, [pc, #356]	; (8011338 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80111d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80111d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80111da:	ee07 3a90 	vmov	s15, r3
 80111de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80111e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80111e6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8011340 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80111ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80111ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80111f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80111f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80111fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80111fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8011202:	e043      	b.n	801128c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8011204:	697b      	ldr	r3, [r7, #20]
 8011206:	ee07 3a90 	vmov	s15, r3
 801120a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801120e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 801134c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8011212:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011216:	4b48      	ldr	r3, [pc, #288]	; (8011338 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8011218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801121a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801121e:	ee07 3a90 	vmov	s15, r3
 8011222:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011226:	ed97 6a03 	vldr	s12, [r7, #12]
 801122a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8011340 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801122e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011232:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011236:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801123a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801123e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011242:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8011246:	e021      	b.n	801128c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8011248:	697b      	ldr	r3, [r7, #20]
 801124a:	ee07 3a90 	vmov	s15, r3
 801124e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011252:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8011348 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8011256:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801125a:	4b37      	ldr	r3, [pc, #220]	; (8011338 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801125c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801125e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011262:	ee07 3a90 	vmov	s15, r3
 8011266:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801126a:	ed97 6a03 	vldr	s12, [r7, #12]
 801126e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8011340 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8011272:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011276:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801127a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801127e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011282:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011286:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 801128a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 801128c:	4b2a      	ldr	r3, [pc, #168]	; (8011338 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801128e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011290:	0a5b      	lsrs	r3, r3, #9
 8011292:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011296:	ee07 3a90 	vmov	s15, r3
 801129a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801129e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80112a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80112a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80112aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80112ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80112b2:	ee17 2a90 	vmov	r2, s15
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80112ba:	4b1f      	ldr	r3, [pc, #124]	; (8011338 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80112bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80112be:	0c1b      	lsrs	r3, r3, #16
 80112c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80112c4:	ee07 3a90 	vmov	s15, r3
 80112c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80112cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80112d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80112d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80112d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80112dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80112e0:	ee17 2a90 	vmov	r2, s15
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80112e8:	4b13      	ldr	r3, [pc, #76]	; (8011338 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80112ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80112ec:	0e1b      	lsrs	r3, r3, #24
 80112ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80112f2:	ee07 3a90 	vmov	s15, r3
 80112f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80112fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80112fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8011302:	edd7 6a07 	vldr	s13, [r7, #28]
 8011306:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801130a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801130e:	ee17 2a90 	vmov	r2, s15
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8011316:	e008      	b.n	801132a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	2200      	movs	r2, #0
 801131c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	2200      	movs	r2, #0
 8011322:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	2200      	movs	r2, #0
 8011328:	609a      	str	r2, [r3, #8]
}
 801132a:	bf00      	nop
 801132c:	3724      	adds	r7, #36	; 0x24
 801132e:	46bd      	mov	sp, r7
 8011330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011334:	4770      	bx	lr
 8011336:	bf00      	nop
 8011338:	58024400 	.word	0x58024400
 801133c:	03d09000 	.word	0x03d09000
 8011340:	46000000 	.word	0x46000000
 8011344:	4c742400 	.word	0x4c742400
 8011348:	4a742400 	.word	0x4a742400
 801134c:	4bbebc20 	.word	0x4bbebc20

08011350 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8011350:	b480      	push	{r7}
 8011352:	b089      	sub	sp, #36	; 0x24
 8011354:	af00      	add	r7, sp, #0
 8011356:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8011358:	4ba1      	ldr	r3, [pc, #644]	; (80115e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801135a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801135c:	f003 0303 	and.w	r3, r3, #3
 8011360:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8011362:	4b9f      	ldr	r3, [pc, #636]	; (80115e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011366:	0d1b      	lsrs	r3, r3, #20
 8011368:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801136c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 801136e:	4b9c      	ldr	r3, [pc, #624]	; (80115e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011372:	0a1b      	lsrs	r3, r3, #8
 8011374:	f003 0301 	and.w	r3, r3, #1
 8011378:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 801137a:	4b99      	ldr	r3, [pc, #612]	; (80115e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801137c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801137e:	08db      	lsrs	r3, r3, #3
 8011380:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011384:	693a      	ldr	r2, [r7, #16]
 8011386:	fb02 f303 	mul.w	r3, r2, r3
 801138a:	ee07 3a90 	vmov	s15, r3
 801138e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011392:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8011396:	697b      	ldr	r3, [r7, #20]
 8011398:	2b00      	cmp	r3, #0
 801139a:	f000 8111 	beq.w	80115c0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 801139e:	69bb      	ldr	r3, [r7, #24]
 80113a0:	2b02      	cmp	r3, #2
 80113a2:	f000 8083 	beq.w	80114ac <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80113a6:	69bb      	ldr	r3, [r7, #24]
 80113a8:	2b02      	cmp	r3, #2
 80113aa:	f200 80a1 	bhi.w	80114f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80113ae:	69bb      	ldr	r3, [r7, #24]
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	d003      	beq.n	80113bc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80113b4:	69bb      	ldr	r3, [r7, #24]
 80113b6:	2b01      	cmp	r3, #1
 80113b8:	d056      	beq.n	8011468 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80113ba:	e099      	b.n	80114f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80113bc:	4b88      	ldr	r3, [pc, #544]	; (80115e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80113be:	681b      	ldr	r3, [r3, #0]
 80113c0:	f003 0320 	and.w	r3, r3, #32
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	d02d      	beq.n	8011424 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80113c8:	4b85      	ldr	r3, [pc, #532]	; (80115e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80113ca:	681b      	ldr	r3, [r3, #0]
 80113cc:	08db      	lsrs	r3, r3, #3
 80113ce:	f003 0303 	and.w	r3, r3, #3
 80113d2:	4a84      	ldr	r2, [pc, #528]	; (80115e4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80113d4:	fa22 f303 	lsr.w	r3, r2, r3
 80113d8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80113da:	68bb      	ldr	r3, [r7, #8]
 80113dc:	ee07 3a90 	vmov	s15, r3
 80113e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80113e4:	697b      	ldr	r3, [r7, #20]
 80113e6:	ee07 3a90 	vmov	s15, r3
 80113ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80113ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80113f2:	4b7b      	ldr	r3, [pc, #492]	; (80115e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80113f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80113f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80113fa:	ee07 3a90 	vmov	s15, r3
 80113fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011402:	ed97 6a03 	vldr	s12, [r7, #12]
 8011406:	eddf 5a78 	vldr	s11, [pc, #480]	; 80115e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801140a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801140e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011412:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011416:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801141a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801141e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8011422:	e087      	b.n	8011534 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8011424:	697b      	ldr	r3, [r7, #20]
 8011426:	ee07 3a90 	vmov	s15, r3
 801142a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801142e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80115ec <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8011432:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011436:	4b6a      	ldr	r3, [pc, #424]	; (80115e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801143a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801143e:	ee07 3a90 	vmov	s15, r3
 8011442:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011446:	ed97 6a03 	vldr	s12, [r7, #12]
 801144a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80115e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801144e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011452:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011456:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801145a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801145e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011462:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8011466:	e065      	b.n	8011534 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8011468:	697b      	ldr	r3, [r7, #20]
 801146a:	ee07 3a90 	vmov	s15, r3
 801146e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011472:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80115f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8011476:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801147a:	4b59      	ldr	r3, [pc, #356]	; (80115e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801147c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801147e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011482:	ee07 3a90 	vmov	s15, r3
 8011486:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801148a:	ed97 6a03 	vldr	s12, [r7, #12]
 801148e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80115e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8011492:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011496:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801149a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801149e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80114a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80114a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80114aa:	e043      	b.n	8011534 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80114ac:	697b      	ldr	r3, [r7, #20]
 80114ae:	ee07 3a90 	vmov	s15, r3
 80114b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80114b6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80115f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80114ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80114be:	4b48      	ldr	r3, [pc, #288]	; (80115e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80114c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80114c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80114c6:	ee07 3a90 	vmov	s15, r3
 80114ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80114ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80114d2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80115e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80114d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80114da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80114de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80114e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80114e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80114ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80114ee:	e021      	b.n	8011534 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80114f0:	697b      	ldr	r3, [r7, #20]
 80114f2:	ee07 3a90 	vmov	s15, r3
 80114f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80114fa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80115f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80114fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011502:	4b37      	ldr	r3, [pc, #220]	; (80115e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011506:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801150a:	ee07 3a90 	vmov	s15, r3
 801150e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011512:	ed97 6a03 	vldr	s12, [r7, #12]
 8011516:	eddf 5a34 	vldr	s11, [pc, #208]	; 80115e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801151a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801151e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011522:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011526:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801152a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801152e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8011532:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8011534:	4b2a      	ldr	r3, [pc, #168]	; (80115e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011538:	0a5b      	lsrs	r3, r3, #9
 801153a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801153e:	ee07 3a90 	vmov	s15, r3
 8011542:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011546:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801154a:	ee37 7a87 	vadd.f32	s14, s15, s14
 801154e:	edd7 6a07 	vldr	s13, [r7, #28]
 8011552:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011556:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801155a:	ee17 2a90 	vmov	r2, s15
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8011562:	4b1f      	ldr	r3, [pc, #124]	; (80115e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011566:	0c1b      	lsrs	r3, r3, #16
 8011568:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801156c:	ee07 3a90 	vmov	s15, r3
 8011570:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011574:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011578:	ee37 7a87 	vadd.f32	s14, s15, s14
 801157c:	edd7 6a07 	vldr	s13, [r7, #28]
 8011580:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011584:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011588:	ee17 2a90 	vmov	r2, s15
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8011590:	4b13      	ldr	r3, [pc, #76]	; (80115e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011594:	0e1b      	lsrs	r3, r3, #24
 8011596:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801159a:	ee07 3a90 	vmov	s15, r3
 801159e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80115a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80115a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80115aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80115ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80115b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80115b6:	ee17 2a90 	vmov	r2, s15
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80115be:	e008      	b.n	80115d2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	2200      	movs	r2, #0
 80115c4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	2200      	movs	r2, #0
 80115ca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	2200      	movs	r2, #0
 80115d0:	609a      	str	r2, [r3, #8]
}
 80115d2:	bf00      	nop
 80115d4:	3724      	adds	r7, #36	; 0x24
 80115d6:	46bd      	mov	sp, r7
 80115d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115dc:	4770      	bx	lr
 80115de:	bf00      	nop
 80115e0:	58024400 	.word	0x58024400
 80115e4:	03d09000 	.word	0x03d09000
 80115e8:	46000000 	.word	0x46000000
 80115ec:	4c742400 	.word	0x4c742400
 80115f0:	4a742400 	.word	0x4a742400
 80115f4:	4bbebc20 	.word	0x4bbebc20

080115f8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80115f8:	b580      	push	{r7, lr}
 80115fa:	b084      	sub	sp, #16
 80115fc:	af00      	add	r7, sp, #0
 80115fe:	6078      	str	r0, [r7, #4]
 8011600:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8011602:	2300      	movs	r3, #0
 8011604:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8011606:	4b53      	ldr	r3, [pc, #332]	; (8011754 <RCCEx_PLL2_Config+0x15c>)
 8011608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801160a:	f003 0303 	and.w	r3, r3, #3
 801160e:	2b03      	cmp	r3, #3
 8011610:	d101      	bne.n	8011616 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8011612:	2301      	movs	r3, #1
 8011614:	e099      	b.n	801174a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8011616:	4b4f      	ldr	r3, [pc, #316]	; (8011754 <RCCEx_PLL2_Config+0x15c>)
 8011618:	681b      	ldr	r3, [r3, #0]
 801161a:	4a4e      	ldr	r2, [pc, #312]	; (8011754 <RCCEx_PLL2_Config+0x15c>)
 801161c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8011620:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011622:	f7f8 fc07 	bl	8009e34 <HAL_GetTick>
 8011626:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8011628:	e008      	b.n	801163c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 801162a:	f7f8 fc03 	bl	8009e34 <HAL_GetTick>
 801162e:	4602      	mov	r2, r0
 8011630:	68bb      	ldr	r3, [r7, #8]
 8011632:	1ad3      	subs	r3, r2, r3
 8011634:	2b02      	cmp	r3, #2
 8011636:	d901      	bls.n	801163c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8011638:	2303      	movs	r3, #3
 801163a:	e086      	b.n	801174a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801163c:	4b45      	ldr	r3, [pc, #276]	; (8011754 <RCCEx_PLL2_Config+0x15c>)
 801163e:	681b      	ldr	r3, [r3, #0]
 8011640:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011644:	2b00      	cmp	r3, #0
 8011646:	d1f0      	bne.n	801162a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8011648:	4b42      	ldr	r3, [pc, #264]	; (8011754 <RCCEx_PLL2_Config+0x15c>)
 801164a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801164c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	681b      	ldr	r3, [r3, #0]
 8011654:	031b      	lsls	r3, r3, #12
 8011656:	493f      	ldr	r1, [pc, #252]	; (8011754 <RCCEx_PLL2_Config+0x15c>)
 8011658:	4313      	orrs	r3, r2
 801165a:	628b      	str	r3, [r1, #40]	; 0x28
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	685b      	ldr	r3, [r3, #4]
 8011660:	3b01      	subs	r3, #1
 8011662:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	689b      	ldr	r3, [r3, #8]
 801166a:	3b01      	subs	r3, #1
 801166c:	025b      	lsls	r3, r3, #9
 801166e:	b29b      	uxth	r3, r3
 8011670:	431a      	orrs	r2, r3
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	68db      	ldr	r3, [r3, #12]
 8011676:	3b01      	subs	r3, #1
 8011678:	041b      	lsls	r3, r3, #16
 801167a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 801167e:	431a      	orrs	r2, r3
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	691b      	ldr	r3, [r3, #16]
 8011684:	3b01      	subs	r3, #1
 8011686:	061b      	lsls	r3, r3, #24
 8011688:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 801168c:	4931      	ldr	r1, [pc, #196]	; (8011754 <RCCEx_PLL2_Config+0x15c>)
 801168e:	4313      	orrs	r3, r2
 8011690:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8011692:	4b30      	ldr	r3, [pc, #192]	; (8011754 <RCCEx_PLL2_Config+0x15c>)
 8011694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011696:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	695b      	ldr	r3, [r3, #20]
 801169e:	492d      	ldr	r1, [pc, #180]	; (8011754 <RCCEx_PLL2_Config+0x15c>)
 80116a0:	4313      	orrs	r3, r2
 80116a2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80116a4:	4b2b      	ldr	r3, [pc, #172]	; (8011754 <RCCEx_PLL2_Config+0x15c>)
 80116a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80116a8:	f023 0220 	bic.w	r2, r3, #32
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	699b      	ldr	r3, [r3, #24]
 80116b0:	4928      	ldr	r1, [pc, #160]	; (8011754 <RCCEx_PLL2_Config+0x15c>)
 80116b2:	4313      	orrs	r3, r2
 80116b4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80116b6:	4b27      	ldr	r3, [pc, #156]	; (8011754 <RCCEx_PLL2_Config+0x15c>)
 80116b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80116ba:	4a26      	ldr	r2, [pc, #152]	; (8011754 <RCCEx_PLL2_Config+0x15c>)
 80116bc:	f023 0310 	bic.w	r3, r3, #16
 80116c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80116c2:	4b24      	ldr	r3, [pc, #144]	; (8011754 <RCCEx_PLL2_Config+0x15c>)
 80116c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80116c6:	4b24      	ldr	r3, [pc, #144]	; (8011758 <RCCEx_PLL2_Config+0x160>)
 80116c8:	4013      	ands	r3, r2
 80116ca:	687a      	ldr	r2, [r7, #4]
 80116cc:	69d2      	ldr	r2, [r2, #28]
 80116ce:	00d2      	lsls	r2, r2, #3
 80116d0:	4920      	ldr	r1, [pc, #128]	; (8011754 <RCCEx_PLL2_Config+0x15c>)
 80116d2:	4313      	orrs	r3, r2
 80116d4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80116d6:	4b1f      	ldr	r3, [pc, #124]	; (8011754 <RCCEx_PLL2_Config+0x15c>)
 80116d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80116da:	4a1e      	ldr	r2, [pc, #120]	; (8011754 <RCCEx_PLL2_Config+0x15c>)
 80116dc:	f043 0310 	orr.w	r3, r3, #16
 80116e0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80116e2:	683b      	ldr	r3, [r7, #0]
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	d106      	bne.n	80116f6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80116e8:	4b1a      	ldr	r3, [pc, #104]	; (8011754 <RCCEx_PLL2_Config+0x15c>)
 80116ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80116ec:	4a19      	ldr	r2, [pc, #100]	; (8011754 <RCCEx_PLL2_Config+0x15c>)
 80116ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80116f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80116f4:	e00f      	b.n	8011716 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80116f6:	683b      	ldr	r3, [r7, #0]
 80116f8:	2b01      	cmp	r3, #1
 80116fa:	d106      	bne.n	801170a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80116fc:	4b15      	ldr	r3, [pc, #84]	; (8011754 <RCCEx_PLL2_Config+0x15c>)
 80116fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011700:	4a14      	ldr	r2, [pc, #80]	; (8011754 <RCCEx_PLL2_Config+0x15c>)
 8011702:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011706:	62d3      	str	r3, [r2, #44]	; 0x2c
 8011708:	e005      	b.n	8011716 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 801170a:	4b12      	ldr	r3, [pc, #72]	; (8011754 <RCCEx_PLL2_Config+0x15c>)
 801170c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801170e:	4a11      	ldr	r2, [pc, #68]	; (8011754 <RCCEx_PLL2_Config+0x15c>)
 8011710:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8011714:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8011716:	4b0f      	ldr	r3, [pc, #60]	; (8011754 <RCCEx_PLL2_Config+0x15c>)
 8011718:	681b      	ldr	r3, [r3, #0]
 801171a:	4a0e      	ldr	r2, [pc, #56]	; (8011754 <RCCEx_PLL2_Config+0x15c>)
 801171c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8011720:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011722:	f7f8 fb87 	bl	8009e34 <HAL_GetTick>
 8011726:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8011728:	e008      	b.n	801173c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 801172a:	f7f8 fb83 	bl	8009e34 <HAL_GetTick>
 801172e:	4602      	mov	r2, r0
 8011730:	68bb      	ldr	r3, [r7, #8]
 8011732:	1ad3      	subs	r3, r2, r3
 8011734:	2b02      	cmp	r3, #2
 8011736:	d901      	bls.n	801173c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8011738:	2303      	movs	r3, #3
 801173a:	e006      	b.n	801174a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801173c:	4b05      	ldr	r3, [pc, #20]	; (8011754 <RCCEx_PLL2_Config+0x15c>)
 801173e:	681b      	ldr	r3, [r3, #0]
 8011740:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011744:	2b00      	cmp	r3, #0
 8011746:	d0f0      	beq.n	801172a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8011748:	7bfb      	ldrb	r3, [r7, #15]
}
 801174a:	4618      	mov	r0, r3
 801174c:	3710      	adds	r7, #16
 801174e:	46bd      	mov	sp, r7
 8011750:	bd80      	pop	{r7, pc}
 8011752:	bf00      	nop
 8011754:	58024400 	.word	0x58024400
 8011758:	ffff0007 	.word	0xffff0007

0801175c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 801175c:	b580      	push	{r7, lr}
 801175e:	b084      	sub	sp, #16
 8011760:	af00      	add	r7, sp, #0
 8011762:	6078      	str	r0, [r7, #4]
 8011764:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8011766:	2300      	movs	r3, #0
 8011768:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801176a:	4b53      	ldr	r3, [pc, #332]	; (80118b8 <RCCEx_PLL3_Config+0x15c>)
 801176c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801176e:	f003 0303 	and.w	r3, r3, #3
 8011772:	2b03      	cmp	r3, #3
 8011774:	d101      	bne.n	801177a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8011776:	2301      	movs	r3, #1
 8011778:	e099      	b.n	80118ae <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 801177a:	4b4f      	ldr	r3, [pc, #316]	; (80118b8 <RCCEx_PLL3_Config+0x15c>)
 801177c:	681b      	ldr	r3, [r3, #0]
 801177e:	4a4e      	ldr	r2, [pc, #312]	; (80118b8 <RCCEx_PLL3_Config+0x15c>)
 8011780:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011784:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011786:	f7f8 fb55 	bl	8009e34 <HAL_GetTick>
 801178a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801178c:	e008      	b.n	80117a0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 801178e:	f7f8 fb51 	bl	8009e34 <HAL_GetTick>
 8011792:	4602      	mov	r2, r0
 8011794:	68bb      	ldr	r3, [r7, #8]
 8011796:	1ad3      	subs	r3, r2, r3
 8011798:	2b02      	cmp	r3, #2
 801179a:	d901      	bls.n	80117a0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 801179c:	2303      	movs	r3, #3
 801179e:	e086      	b.n	80118ae <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80117a0:	4b45      	ldr	r3, [pc, #276]	; (80118b8 <RCCEx_PLL3_Config+0x15c>)
 80117a2:	681b      	ldr	r3, [r3, #0]
 80117a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	d1f0      	bne.n	801178e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80117ac:	4b42      	ldr	r3, [pc, #264]	; (80118b8 <RCCEx_PLL3_Config+0x15c>)
 80117ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80117b0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	681b      	ldr	r3, [r3, #0]
 80117b8:	051b      	lsls	r3, r3, #20
 80117ba:	493f      	ldr	r1, [pc, #252]	; (80118b8 <RCCEx_PLL3_Config+0x15c>)
 80117bc:	4313      	orrs	r3, r2
 80117be:	628b      	str	r3, [r1, #40]	; 0x28
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	685b      	ldr	r3, [r3, #4]
 80117c4:	3b01      	subs	r3, #1
 80117c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	689b      	ldr	r3, [r3, #8]
 80117ce:	3b01      	subs	r3, #1
 80117d0:	025b      	lsls	r3, r3, #9
 80117d2:	b29b      	uxth	r3, r3
 80117d4:	431a      	orrs	r2, r3
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	68db      	ldr	r3, [r3, #12]
 80117da:	3b01      	subs	r3, #1
 80117dc:	041b      	lsls	r3, r3, #16
 80117de:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80117e2:	431a      	orrs	r2, r3
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	691b      	ldr	r3, [r3, #16]
 80117e8:	3b01      	subs	r3, #1
 80117ea:	061b      	lsls	r3, r3, #24
 80117ec:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80117f0:	4931      	ldr	r1, [pc, #196]	; (80118b8 <RCCEx_PLL3_Config+0x15c>)
 80117f2:	4313      	orrs	r3, r2
 80117f4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80117f6:	4b30      	ldr	r3, [pc, #192]	; (80118b8 <RCCEx_PLL3_Config+0x15c>)
 80117f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80117fa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	695b      	ldr	r3, [r3, #20]
 8011802:	492d      	ldr	r1, [pc, #180]	; (80118b8 <RCCEx_PLL3_Config+0x15c>)
 8011804:	4313      	orrs	r3, r2
 8011806:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8011808:	4b2b      	ldr	r3, [pc, #172]	; (80118b8 <RCCEx_PLL3_Config+0x15c>)
 801180a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801180c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	699b      	ldr	r3, [r3, #24]
 8011814:	4928      	ldr	r1, [pc, #160]	; (80118b8 <RCCEx_PLL3_Config+0x15c>)
 8011816:	4313      	orrs	r3, r2
 8011818:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 801181a:	4b27      	ldr	r3, [pc, #156]	; (80118b8 <RCCEx_PLL3_Config+0x15c>)
 801181c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801181e:	4a26      	ldr	r2, [pc, #152]	; (80118b8 <RCCEx_PLL3_Config+0x15c>)
 8011820:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011824:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8011826:	4b24      	ldr	r3, [pc, #144]	; (80118b8 <RCCEx_PLL3_Config+0x15c>)
 8011828:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801182a:	4b24      	ldr	r3, [pc, #144]	; (80118bc <RCCEx_PLL3_Config+0x160>)
 801182c:	4013      	ands	r3, r2
 801182e:	687a      	ldr	r2, [r7, #4]
 8011830:	69d2      	ldr	r2, [r2, #28]
 8011832:	00d2      	lsls	r2, r2, #3
 8011834:	4920      	ldr	r1, [pc, #128]	; (80118b8 <RCCEx_PLL3_Config+0x15c>)
 8011836:	4313      	orrs	r3, r2
 8011838:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 801183a:	4b1f      	ldr	r3, [pc, #124]	; (80118b8 <RCCEx_PLL3_Config+0x15c>)
 801183c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801183e:	4a1e      	ldr	r2, [pc, #120]	; (80118b8 <RCCEx_PLL3_Config+0x15c>)
 8011840:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011844:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8011846:	683b      	ldr	r3, [r7, #0]
 8011848:	2b00      	cmp	r3, #0
 801184a:	d106      	bne.n	801185a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 801184c:	4b1a      	ldr	r3, [pc, #104]	; (80118b8 <RCCEx_PLL3_Config+0x15c>)
 801184e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011850:	4a19      	ldr	r2, [pc, #100]	; (80118b8 <RCCEx_PLL3_Config+0x15c>)
 8011852:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8011856:	62d3      	str	r3, [r2, #44]	; 0x2c
 8011858:	e00f      	b.n	801187a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 801185a:	683b      	ldr	r3, [r7, #0]
 801185c:	2b01      	cmp	r3, #1
 801185e:	d106      	bne.n	801186e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8011860:	4b15      	ldr	r3, [pc, #84]	; (80118b8 <RCCEx_PLL3_Config+0x15c>)
 8011862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011864:	4a14      	ldr	r2, [pc, #80]	; (80118b8 <RCCEx_PLL3_Config+0x15c>)
 8011866:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801186a:	62d3      	str	r3, [r2, #44]	; 0x2c
 801186c:	e005      	b.n	801187a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 801186e:	4b12      	ldr	r3, [pc, #72]	; (80118b8 <RCCEx_PLL3_Config+0x15c>)
 8011870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011872:	4a11      	ldr	r2, [pc, #68]	; (80118b8 <RCCEx_PLL3_Config+0x15c>)
 8011874:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8011878:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 801187a:	4b0f      	ldr	r3, [pc, #60]	; (80118b8 <RCCEx_PLL3_Config+0x15c>)
 801187c:	681b      	ldr	r3, [r3, #0]
 801187e:	4a0e      	ldr	r2, [pc, #56]	; (80118b8 <RCCEx_PLL3_Config+0x15c>)
 8011880:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011884:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011886:	f7f8 fad5 	bl	8009e34 <HAL_GetTick>
 801188a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801188c:	e008      	b.n	80118a0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 801188e:	f7f8 fad1 	bl	8009e34 <HAL_GetTick>
 8011892:	4602      	mov	r2, r0
 8011894:	68bb      	ldr	r3, [r7, #8]
 8011896:	1ad3      	subs	r3, r2, r3
 8011898:	2b02      	cmp	r3, #2
 801189a:	d901      	bls.n	80118a0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 801189c:	2303      	movs	r3, #3
 801189e:	e006      	b.n	80118ae <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80118a0:	4b05      	ldr	r3, [pc, #20]	; (80118b8 <RCCEx_PLL3_Config+0x15c>)
 80118a2:	681b      	ldr	r3, [r3, #0]
 80118a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	d0f0      	beq.n	801188e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80118ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80118ae:	4618      	mov	r0, r3
 80118b0:	3710      	adds	r7, #16
 80118b2:	46bd      	mov	sp, r7
 80118b4:	bd80      	pop	{r7, pc}
 80118b6:	bf00      	nop
 80118b8:	58024400 	.word	0x58024400
 80118bc:	ffff0007 	.word	0xffff0007

080118c0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80118c0:	b580      	push	{r7, lr}
 80118c2:	b084      	sub	sp, #16
 80118c4:	af00      	add	r7, sp, #0
 80118c6:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	d101      	bne.n	80118d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80118ce:	2301      	movs	r3, #1
 80118d0:	e0f1      	b.n	8011ab6 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	2200      	movs	r2, #0
 80118d6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	681b      	ldr	r3, [r3, #0]
 80118dc:	4a78      	ldr	r2, [pc, #480]	; (8011ac0 <HAL_SPI_Init+0x200>)
 80118de:	4293      	cmp	r3, r2
 80118e0:	d00f      	beq.n	8011902 <HAL_SPI_Init+0x42>
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	681b      	ldr	r3, [r3, #0]
 80118e6:	4a77      	ldr	r2, [pc, #476]	; (8011ac4 <HAL_SPI_Init+0x204>)
 80118e8:	4293      	cmp	r3, r2
 80118ea:	d00a      	beq.n	8011902 <HAL_SPI_Init+0x42>
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	681b      	ldr	r3, [r3, #0]
 80118f0:	4a75      	ldr	r2, [pc, #468]	; (8011ac8 <HAL_SPI_Init+0x208>)
 80118f2:	4293      	cmp	r3, r2
 80118f4:	d005      	beq.n	8011902 <HAL_SPI_Init+0x42>
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	68db      	ldr	r3, [r3, #12]
 80118fa:	2b0f      	cmp	r3, #15
 80118fc:	d901      	bls.n	8011902 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80118fe:	2301      	movs	r3, #1
 8011900:	e0d9      	b.n	8011ab6 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8011902:	6878      	ldr	r0, [r7, #4]
 8011904:	f001 faa2 	bl	8012e4c <SPI_GetPacketSize>
 8011908:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	681b      	ldr	r3, [r3, #0]
 801190e:	4a6c      	ldr	r2, [pc, #432]	; (8011ac0 <HAL_SPI_Init+0x200>)
 8011910:	4293      	cmp	r3, r2
 8011912:	d00c      	beq.n	801192e <HAL_SPI_Init+0x6e>
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	681b      	ldr	r3, [r3, #0]
 8011918:	4a6a      	ldr	r2, [pc, #424]	; (8011ac4 <HAL_SPI_Init+0x204>)
 801191a:	4293      	cmp	r3, r2
 801191c:	d007      	beq.n	801192e <HAL_SPI_Init+0x6e>
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	681b      	ldr	r3, [r3, #0]
 8011922:	4a69      	ldr	r2, [pc, #420]	; (8011ac8 <HAL_SPI_Init+0x208>)
 8011924:	4293      	cmp	r3, r2
 8011926:	d002      	beq.n	801192e <HAL_SPI_Init+0x6e>
 8011928:	68fb      	ldr	r3, [r7, #12]
 801192a:	2b08      	cmp	r3, #8
 801192c:	d811      	bhi.n	8011952 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8011932:	4a63      	ldr	r2, [pc, #396]	; (8011ac0 <HAL_SPI_Init+0x200>)
 8011934:	4293      	cmp	r3, r2
 8011936:	d009      	beq.n	801194c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	681b      	ldr	r3, [r3, #0]
 801193c:	4a61      	ldr	r2, [pc, #388]	; (8011ac4 <HAL_SPI_Init+0x204>)
 801193e:	4293      	cmp	r3, r2
 8011940:	d004      	beq.n	801194c <HAL_SPI_Init+0x8c>
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	681b      	ldr	r3, [r3, #0]
 8011946:	4a60      	ldr	r2, [pc, #384]	; (8011ac8 <HAL_SPI_Init+0x208>)
 8011948:	4293      	cmp	r3, r2
 801194a:	d104      	bne.n	8011956 <HAL_SPI_Init+0x96>
 801194c:	68fb      	ldr	r3, [r7, #12]
 801194e:	2b10      	cmp	r3, #16
 8011950:	d901      	bls.n	8011956 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8011952:	2301      	movs	r3, #1
 8011954:	e0af      	b.n	8011ab6 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 801195c:	b2db      	uxtb	r3, r3
 801195e:	2b00      	cmp	r3, #0
 8011960:	d106      	bne.n	8011970 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	2200      	movs	r2, #0
 8011966:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801196a:	6878      	ldr	r0, [r7, #4]
 801196c:	f7f7 fa22 	bl	8008db4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	2202      	movs	r2, #2
 8011974:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	681b      	ldr	r3, [r3, #0]
 801197c:	681a      	ldr	r2, [r3, #0]
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	681b      	ldr	r3, [r3, #0]
 8011982:	f022 0201 	bic.w	r2, r2, #1
 8011986:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	681b      	ldr	r3, [r3, #0]
 801198c:	689b      	ldr	r3, [r3, #8]
 801198e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8011992:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	699b      	ldr	r3, [r3, #24]
 8011998:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801199c:	d119      	bne.n	80119d2 <HAL_SPI_Init+0x112>
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	685b      	ldr	r3, [r3, #4]
 80119a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80119a6:	d103      	bne.n	80119b0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	d008      	beq.n	80119c2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	d10c      	bne.n	80119d2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80119bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80119c0:	d107      	bne.n	80119d2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	681b      	ldr	r3, [r3, #0]
 80119c6:	681a      	ldr	r2, [r3, #0]
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	681b      	ldr	r3, [r3, #0]
 80119cc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80119d0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	69da      	ldr	r2, [r3, #28]
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80119da:	431a      	orrs	r2, r3
 80119dc:	68bb      	ldr	r3, [r7, #8]
 80119de:	431a      	orrs	r2, r3
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80119e4:	ea42 0103 	orr.w	r1, r2, r3
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	68da      	ldr	r2, [r3, #12]
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	681b      	ldr	r3, [r3, #0]
 80119f0:	430a      	orrs	r2, r1
 80119f2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80119fc:	431a      	orrs	r2, r3
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011a02:	431a      	orrs	r2, r3
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	699b      	ldr	r3, [r3, #24]
 8011a08:	431a      	orrs	r2, r3
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	691b      	ldr	r3, [r3, #16]
 8011a0e:	431a      	orrs	r2, r3
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	695b      	ldr	r3, [r3, #20]
 8011a14:	431a      	orrs	r2, r3
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	6a1b      	ldr	r3, [r3, #32]
 8011a1a:	431a      	orrs	r2, r3
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	685b      	ldr	r3, [r3, #4]
 8011a20:	431a      	orrs	r2, r3
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011a26:	431a      	orrs	r2, r3
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	689b      	ldr	r3, [r3, #8]
 8011a2c:	431a      	orrs	r2, r3
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011a32:	ea42 0103 	orr.w	r1, r2, r3
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	681b      	ldr	r3, [r3, #0]
 8011a3e:	430a      	orrs	r2, r1
 8011a40:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	685b      	ldr	r3, [r3, #4]
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	d113      	bne.n	8011a72 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	681b      	ldr	r3, [r3, #0]
 8011a4e:	689b      	ldr	r3, [r3, #8]
 8011a50:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	681b      	ldr	r3, [r3, #0]
 8011a58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011a5c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	681b      	ldr	r3, [r3, #0]
 8011a62:	689b      	ldr	r3, [r3, #8]
 8011a64:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	681b      	ldr	r3, [r3, #0]
 8011a6c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8011a70:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	681b      	ldr	r3, [r3, #0]
 8011a76:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	681b      	ldr	r3, [r3, #0]
 8011a7c:	f022 0201 	bic.w	r2, r2, #1
 8011a80:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	685b      	ldr	r3, [r3, #4]
 8011a86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011a8a:	2b00      	cmp	r3, #0
 8011a8c:	d00a      	beq.n	8011aa4 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	681b      	ldr	r3, [r3, #0]
 8011a92:	68db      	ldr	r3, [r3, #12]
 8011a94:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	681b      	ldr	r3, [r3, #0]
 8011aa0:	430a      	orrs	r2, r1
 8011aa2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	2200      	movs	r2, #0
 8011aa8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	2201      	movs	r2, #1
 8011ab0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8011ab4:	2300      	movs	r3, #0
}
 8011ab6:	4618      	mov	r0, r3
 8011ab8:	3710      	adds	r7, #16
 8011aba:	46bd      	mov	sp, r7
 8011abc:	bd80      	pop	{r7, pc}
 8011abe:	bf00      	nop
 8011ac0:	40013000 	.word	0x40013000
 8011ac4:	40003800 	.word	0x40003800
 8011ac8:	40003c00 	.word	0x40003c00

08011acc <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011acc:	b580      	push	{r7, lr}
 8011ace:	b08a      	sub	sp, #40	; 0x28
 8011ad0:	af02      	add	r7, sp, #8
 8011ad2:	60f8      	str	r0, [r7, #12]
 8011ad4:	60b9      	str	r1, [r7, #8]
 8011ad6:	603b      	str	r3, [r7, #0]
 8011ad8:	4613      	mov	r3, r2
 8011ada:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8011adc:	68fb      	ldr	r3, [r7, #12]
 8011ade:	681b      	ldr	r3, [r3, #0]
 8011ae0:	3320      	adds	r3, #32
 8011ae2:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8011ae4:	2300      	movs	r3, #0
 8011ae6:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8011ae8:	68fb      	ldr	r3, [r7, #12]
 8011aea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8011aee:	2b01      	cmp	r3, #1
 8011af0:	d101      	bne.n	8011af6 <HAL_SPI_Transmit+0x2a>
 8011af2:	2302      	movs	r3, #2
 8011af4:	e1d7      	b.n	8011ea6 <HAL_SPI_Transmit+0x3da>
 8011af6:	68fb      	ldr	r3, [r7, #12]
 8011af8:	2201      	movs	r2, #1
 8011afa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8011afe:	f7f8 f999 	bl	8009e34 <HAL_GetTick>
 8011b02:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8011b04:	68fb      	ldr	r3, [r7, #12]
 8011b06:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8011b0a:	b2db      	uxtb	r3, r3
 8011b0c:	2b01      	cmp	r3, #1
 8011b0e:	d007      	beq.n	8011b20 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8011b10:	2302      	movs	r3, #2
 8011b12:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8011b14:	68fb      	ldr	r3, [r7, #12]
 8011b16:	2200      	movs	r2, #0
 8011b18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8011b1c:	7efb      	ldrb	r3, [r7, #27]
 8011b1e:	e1c2      	b.n	8011ea6 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 8011b20:	68bb      	ldr	r3, [r7, #8]
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	d002      	beq.n	8011b2c <HAL_SPI_Transmit+0x60>
 8011b26:	88fb      	ldrh	r3, [r7, #6]
 8011b28:	2b00      	cmp	r3, #0
 8011b2a:	d107      	bne.n	8011b3c <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8011b2c:	2301      	movs	r3, #1
 8011b2e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8011b30:	68fb      	ldr	r3, [r7, #12]
 8011b32:	2200      	movs	r2, #0
 8011b34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8011b38:	7efb      	ldrb	r3, [r7, #27]
 8011b3a:	e1b4      	b.n	8011ea6 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8011b3c:	68fb      	ldr	r3, [r7, #12]
 8011b3e:	2203      	movs	r2, #3
 8011b40:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8011b44:	68fb      	ldr	r3, [r7, #12]
 8011b46:	2200      	movs	r2, #0
 8011b48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8011b4c:	68fb      	ldr	r3, [r7, #12]
 8011b4e:	68ba      	ldr	r2, [r7, #8]
 8011b50:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8011b52:	68fb      	ldr	r3, [r7, #12]
 8011b54:	88fa      	ldrh	r2, [r7, #6]
 8011b56:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8011b5a:	68fb      	ldr	r3, [r7, #12]
 8011b5c:	88fa      	ldrh	r2, [r7, #6]
 8011b5e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8011b62:	68fb      	ldr	r3, [r7, #12]
 8011b64:	2200      	movs	r2, #0
 8011b66:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8011b68:	68fb      	ldr	r3, [r7, #12]
 8011b6a:	2200      	movs	r2, #0
 8011b6c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8011b70:	68fb      	ldr	r3, [r7, #12]
 8011b72:	2200      	movs	r2, #0
 8011b74:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8011b78:	68fb      	ldr	r3, [r7, #12]
 8011b7a:	2200      	movs	r2, #0
 8011b7c:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8011b7e:	68fb      	ldr	r3, [r7, #12]
 8011b80:	2200      	movs	r2, #0
 8011b82:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011b84:	68fb      	ldr	r3, [r7, #12]
 8011b86:	689b      	ldr	r3, [r3, #8]
 8011b88:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8011b8c:	d107      	bne.n	8011b9e <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8011b8e:	68fb      	ldr	r3, [r7, #12]
 8011b90:	681b      	ldr	r3, [r3, #0]
 8011b92:	681a      	ldr	r2, [r3, #0]
 8011b94:	68fb      	ldr	r3, [r7, #12]
 8011b96:	681b      	ldr	r3, [r3, #0]
 8011b98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011b9c:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8011b9e:	68fb      	ldr	r3, [r7, #12]
 8011ba0:	681b      	ldr	r3, [r3, #0]
 8011ba2:	685a      	ldr	r2, [r3, #4]
 8011ba4:	4b96      	ldr	r3, [pc, #600]	; (8011e00 <HAL_SPI_Transmit+0x334>)
 8011ba6:	4013      	ands	r3, r2
 8011ba8:	88f9      	ldrh	r1, [r7, #6]
 8011baa:	68fa      	ldr	r2, [r7, #12]
 8011bac:	6812      	ldr	r2, [r2, #0]
 8011bae:	430b      	orrs	r3, r1
 8011bb0:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8011bb2:	68fb      	ldr	r3, [r7, #12]
 8011bb4:	681b      	ldr	r3, [r3, #0]
 8011bb6:	681a      	ldr	r2, [r3, #0]
 8011bb8:	68fb      	ldr	r3, [r7, #12]
 8011bba:	681b      	ldr	r3, [r3, #0]
 8011bbc:	f042 0201 	orr.w	r2, r2, #1
 8011bc0:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8011bc2:	68fb      	ldr	r3, [r7, #12]
 8011bc4:	685b      	ldr	r3, [r3, #4]
 8011bc6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8011bca:	d107      	bne.n	8011bdc <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8011bcc:	68fb      	ldr	r3, [r7, #12]
 8011bce:	681b      	ldr	r3, [r3, #0]
 8011bd0:	681a      	ldr	r2, [r3, #0]
 8011bd2:	68fb      	ldr	r3, [r7, #12]
 8011bd4:	681b      	ldr	r3, [r3, #0]
 8011bd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011bda:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8011bdc:	68fb      	ldr	r3, [r7, #12]
 8011bde:	68db      	ldr	r3, [r3, #12]
 8011be0:	2b0f      	cmp	r3, #15
 8011be2:	d947      	bls.n	8011c74 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8011be4:	e03f      	b.n	8011c66 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8011be6:	68fb      	ldr	r3, [r7, #12]
 8011be8:	681b      	ldr	r3, [r3, #0]
 8011bea:	695b      	ldr	r3, [r3, #20]
 8011bec:	f003 0302 	and.w	r3, r3, #2
 8011bf0:	2b02      	cmp	r3, #2
 8011bf2:	d114      	bne.n	8011c1e <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8011bf4:	68fb      	ldr	r3, [r7, #12]
 8011bf6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011bf8:	68fb      	ldr	r3, [r7, #12]
 8011bfa:	681b      	ldr	r3, [r3, #0]
 8011bfc:	6812      	ldr	r2, [r2, #0]
 8011bfe:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8011c00:	68fb      	ldr	r3, [r7, #12]
 8011c02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011c04:	1d1a      	adds	r2, r3, #4
 8011c06:	68fb      	ldr	r3, [r7, #12]
 8011c08:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8011c0a:	68fb      	ldr	r3, [r7, #12]
 8011c0c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011c10:	b29b      	uxth	r3, r3
 8011c12:	3b01      	subs	r3, #1
 8011c14:	b29a      	uxth	r2, r3
 8011c16:	68fb      	ldr	r3, [r7, #12]
 8011c18:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8011c1c:	e023      	b.n	8011c66 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011c1e:	f7f8 f909 	bl	8009e34 <HAL_GetTick>
 8011c22:	4602      	mov	r2, r0
 8011c24:	697b      	ldr	r3, [r7, #20]
 8011c26:	1ad3      	subs	r3, r2, r3
 8011c28:	683a      	ldr	r2, [r7, #0]
 8011c2a:	429a      	cmp	r2, r3
 8011c2c:	d803      	bhi.n	8011c36 <HAL_SPI_Transmit+0x16a>
 8011c2e:	683b      	ldr	r3, [r7, #0]
 8011c30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011c34:	d102      	bne.n	8011c3c <HAL_SPI_Transmit+0x170>
 8011c36:	683b      	ldr	r3, [r7, #0]
 8011c38:	2b00      	cmp	r3, #0
 8011c3a:	d114      	bne.n	8011c66 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8011c3c:	68f8      	ldr	r0, [r7, #12]
 8011c3e:	f001 f837 	bl	8012cb0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8011c42:	68fb      	ldr	r3, [r7, #12]
 8011c44:	2200      	movs	r2, #0
 8011c46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8011c4a:	68fb      	ldr	r3, [r7, #12]
 8011c4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011c50:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8011c54:	68fb      	ldr	r3, [r7, #12]
 8011c56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8011c5a:	68fb      	ldr	r3, [r7, #12]
 8011c5c:	2201      	movs	r2, #1
 8011c5e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8011c62:	2303      	movs	r3, #3
 8011c64:	e11f      	b.n	8011ea6 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8011c66:	68fb      	ldr	r3, [r7, #12]
 8011c68:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011c6c:	b29b      	uxth	r3, r3
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	d1b9      	bne.n	8011be6 <HAL_SPI_Transmit+0x11a>
 8011c72:	e0f2      	b.n	8011e5a <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8011c74:	68fb      	ldr	r3, [r7, #12]
 8011c76:	68db      	ldr	r3, [r3, #12]
 8011c78:	2b07      	cmp	r3, #7
 8011c7a:	f240 80e7 	bls.w	8011e4c <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8011c7e:	e05d      	b.n	8011d3c <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8011c80:	68fb      	ldr	r3, [r7, #12]
 8011c82:	681b      	ldr	r3, [r3, #0]
 8011c84:	695b      	ldr	r3, [r3, #20]
 8011c86:	f003 0302 	and.w	r3, r3, #2
 8011c8a:	2b02      	cmp	r3, #2
 8011c8c:	d132      	bne.n	8011cf4 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8011c8e:	68fb      	ldr	r3, [r7, #12]
 8011c90:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011c94:	b29b      	uxth	r3, r3
 8011c96:	2b01      	cmp	r3, #1
 8011c98:	d918      	bls.n	8011ccc <HAL_SPI_Transmit+0x200>
 8011c9a:	68fb      	ldr	r3, [r7, #12]
 8011c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	d014      	beq.n	8011ccc <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8011ca2:	68fb      	ldr	r3, [r7, #12]
 8011ca4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011ca6:	68fb      	ldr	r3, [r7, #12]
 8011ca8:	681b      	ldr	r3, [r3, #0]
 8011caa:	6812      	ldr	r2, [r2, #0]
 8011cac:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8011cae:	68fb      	ldr	r3, [r7, #12]
 8011cb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011cb2:	1d1a      	adds	r2, r3, #4
 8011cb4:	68fb      	ldr	r3, [r7, #12]
 8011cb6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8011cb8:	68fb      	ldr	r3, [r7, #12]
 8011cba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011cbe:	b29b      	uxth	r3, r3
 8011cc0:	3b02      	subs	r3, #2
 8011cc2:	b29a      	uxth	r2, r3
 8011cc4:	68fb      	ldr	r3, [r7, #12]
 8011cc6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8011cca:	e037      	b.n	8011d3c <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8011ccc:	68fb      	ldr	r3, [r7, #12]
 8011cce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011cd0:	881a      	ldrh	r2, [r3, #0]
 8011cd2:	69fb      	ldr	r3, [r7, #28]
 8011cd4:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8011cd6:	68fb      	ldr	r3, [r7, #12]
 8011cd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011cda:	1c9a      	adds	r2, r3, #2
 8011cdc:	68fb      	ldr	r3, [r7, #12]
 8011cde:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8011ce0:	68fb      	ldr	r3, [r7, #12]
 8011ce2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011ce6:	b29b      	uxth	r3, r3
 8011ce8:	3b01      	subs	r3, #1
 8011cea:	b29a      	uxth	r2, r3
 8011cec:	68fb      	ldr	r3, [r7, #12]
 8011cee:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8011cf2:	e023      	b.n	8011d3c <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011cf4:	f7f8 f89e 	bl	8009e34 <HAL_GetTick>
 8011cf8:	4602      	mov	r2, r0
 8011cfa:	697b      	ldr	r3, [r7, #20]
 8011cfc:	1ad3      	subs	r3, r2, r3
 8011cfe:	683a      	ldr	r2, [r7, #0]
 8011d00:	429a      	cmp	r2, r3
 8011d02:	d803      	bhi.n	8011d0c <HAL_SPI_Transmit+0x240>
 8011d04:	683b      	ldr	r3, [r7, #0]
 8011d06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011d0a:	d102      	bne.n	8011d12 <HAL_SPI_Transmit+0x246>
 8011d0c:	683b      	ldr	r3, [r7, #0]
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	d114      	bne.n	8011d3c <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8011d12:	68f8      	ldr	r0, [r7, #12]
 8011d14:	f000 ffcc 	bl	8012cb0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8011d18:	68fb      	ldr	r3, [r7, #12]
 8011d1a:	2200      	movs	r2, #0
 8011d1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8011d20:	68fb      	ldr	r3, [r7, #12]
 8011d22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011d26:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8011d2a:	68fb      	ldr	r3, [r7, #12]
 8011d2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8011d30:	68fb      	ldr	r3, [r7, #12]
 8011d32:	2201      	movs	r2, #1
 8011d34:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8011d38:	2303      	movs	r3, #3
 8011d3a:	e0b4      	b.n	8011ea6 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8011d3c:	68fb      	ldr	r3, [r7, #12]
 8011d3e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011d42:	b29b      	uxth	r3, r3
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	d19b      	bne.n	8011c80 <HAL_SPI_Transmit+0x1b4>
 8011d48:	e087      	b.n	8011e5a <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8011d4a:	68fb      	ldr	r3, [r7, #12]
 8011d4c:	681b      	ldr	r3, [r3, #0]
 8011d4e:	695b      	ldr	r3, [r3, #20]
 8011d50:	f003 0302 	and.w	r3, r3, #2
 8011d54:	2b02      	cmp	r3, #2
 8011d56:	d155      	bne.n	8011e04 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8011d58:	68fb      	ldr	r3, [r7, #12]
 8011d5a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011d5e:	b29b      	uxth	r3, r3
 8011d60:	2b03      	cmp	r3, #3
 8011d62:	d918      	bls.n	8011d96 <HAL_SPI_Transmit+0x2ca>
 8011d64:	68fb      	ldr	r3, [r7, #12]
 8011d66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011d68:	2b40      	cmp	r3, #64	; 0x40
 8011d6a:	d914      	bls.n	8011d96 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8011d6c:	68fb      	ldr	r3, [r7, #12]
 8011d6e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011d70:	68fb      	ldr	r3, [r7, #12]
 8011d72:	681b      	ldr	r3, [r3, #0]
 8011d74:	6812      	ldr	r2, [r2, #0]
 8011d76:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8011d78:	68fb      	ldr	r3, [r7, #12]
 8011d7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011d7c:	1d1a      	adds	r2, r3, #4
 8011d7e:	68fb      	ldr	r3, [r7, #12]
 8011d80:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8011d82:	68fb      	ldr	r3, [r7, #12]
 8011d84:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011d88:	b29b      	uxth	r3, r3
 8011d8a:	3b04      	subs	r3, #4
 8011d8c:	b29a      	uxth	r2, r3
 8011d8e:	68fb      	ldr	r3, [r7, #12]
 8011d90:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8011d94:	e05a      	b.n	8011e4c <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8011d96:	68fb      	ldr	r3, [r7, #12]
 8011d98:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011d9c:	b29b      	uxth	r3, r3
 8011d9e:	2b01      	cmp	r3, #1
 8011da0:	d917      	bls.n	8011dd2 <HAL_SPI_Transmit+0x306>
 8011da2:	68fb      	ldr	r3, [r7, #12]
 8011da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	d013      	beq.n	8011dd2 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8011daa:	68fb      	ldr	r3, [r7, #12]
 8011dac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011dae:	881a      	ldrh	r2, [r3, #0]
 8011db0:	69fb      	ldr	r3, [r7, #28]
 8011db2:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8011db4:	68fb      	ldr	r3, [r7, #12]
 8011db6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011db8:	1c9a      	adds	r2, r3, #2
 8011dba:	68fb      	ldr	r3, [r7, #12]
 8011dbc:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8011dbe:	68fb      	ldr	r3, [r7, #12]
 8011dc0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011dc4:	b29b      	uxth	r3, r3
 8011dc6:	3b02      	subs	r3, #2
 8011dc8:	b29a      	uxth	r2, r3
 8011dca:	68fb      	ldr	r3, [r7, #12]
 8011dcc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8011dd0:	e03c      	b.n	8011e4c <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8011dd2:	68fb      	ldr	r3, [r7, #12]
 8011dd4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011dd6:	68fb      	ldr	r3, [r7, #12]
 8011dd8:	681b      	ldr	r3, [r3, #0]
 8011dda:	3320      	adds	r3, #32
 8011ddc:	7812      	ldrb	r2, [r2, #0]
 8011dde:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8011de0:	68fb      	ldr	r3, [r7, #12]
 8011de2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011de4:	1c5a      	adds	r2, r3, #1
 8011de6:	68fb      	ldr	r3, [r7, #12]
 8011de8:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8011dea:	68fb      	ldr	r3, [r7, #12]
 8011dec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011df0:	b29b      	uxth	r3, r3
 8011df2:	3b01      	subs	r3, #1
 8011df4:	b29a      	uxth	r2, r3
 8011df6:	68fb      	ldr	r3, [r7, #12]
 8011df8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8011dfc:	e026      	b.n	8011e4c <HAL_SPI_Transmit+0x380>
 8011dfe:	bf00      	nop
 8011e00:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011e04:	f7f8 f816 	bl	8009e34 <HAL_GetTick>
 8011e08:	4602      	mov	r2, r0
 8011e0a:	697b      	ldr	r3, [r7, #20]
 8011e0c:	1ad3      	subs	r3, r2, r3
 8011e0e:	683a      	ldr	r2, [r7, #0]
 8011e10:	429a      	cmp	r2, r3
 8011e12:	d803      	bhi.n	8011e1c <HAL_SPI_Transmit+0x350>
 8011e14:	683b      	ldr	r3, [r7, #0]
 8011e16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011e1a:	d102      	bne.n	8011e22 <HAL_SPI_Transmit+0x356>
 8011e1c:	683b      	ldr	r3, [r7, #0]
 8011e1e:	2b00      	cmp	r3, #0
 8011e20:	d114      	bne.n	8011e4c <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8011e22:	68f8      	ldr	r0, [r7, #12]
 8011e24:	f000 ff44 	bl	8012cb0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8011e28:	68fb      	ldr	r3, [r7, #12]
 8011e2a:	2200      	movs	r2, #0
 8011e2c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8011e30:	68fb      	ldr	r3, [r7, #12]
 8011e32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011e36:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8011e3a:	68fb      	ldr	r3, [r7, #12]
 8011e3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8011e40:	68fb      	ldr	r3, [r7, #12]
 8011e42:	2201      	movs	r2, #1
 8011e44:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8011e48:	2303      	movs	r3, #3
 8011e4a:	e02c      	b.n	8011ea6 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8011e4c:	68fb      	ldr	r3, [r7, #12]
 8011e4e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011e52:	b29b      	uxth	r3, r3
 8011e54:	2b00      	cmp	r3, #0
 8011e56:	f47f af78 	bne.w	8011d4a <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8011e5a:	683b      	ldr	r3, [r7, #0]
 8011e5c:	9300      	str	r3, [sp, #0]
 8011e5e:	697b      	ldr	r3, [r7, #20]
 8011e60:	2200      	movs	r2, #0
 8011e62:	2108      	movs	r1, #8
 8011e64:	68f8      	ldr	r0, [r7, #12]
 8011e66:	f000 ffc3 	bl	8012df0 <SPI_WaitOnFlagUntilTimeout>
 8011e6a:	4603      	mov	r3, r0
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	d007      	beq.n	8011e80 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011e70:	68fb      	ldr	r3, [r7, #12]
 8011e72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011e76:	f043 0220 	orr.w	r2, r3, #32
 8011e7a:	68fb      	ldr	r3, [r7, #12]
 8011e7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8011e80:	68f8      	ldr	r0, [r7, #12]
 8011e82:	f000 ff15 	bl	8012cb0 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8011e86:	68fb      	ldr	r3, [r7, #12]
 8011e88:	2200      	movs	r2, #0
 8011e8a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8011e8e:	68fb      	ldr	r3, [r7, #12]
 8011e90:	2201      	movs	r2, #1
 8011e92:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8011e96:	68fb      	ldr	r3, [r7, #12]
 8011e98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	d001      	beq.n	8011ea4 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 8011ea0:	2301      	movs	r3, #1
 8011ea2:	e000      	b.n	8011ea6 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 8011ea4:	7efb      	ldrb	r3, [r7, #27]
}
 8011ea6:	4618      	mov	r0, r3
 8011ea8:	3720      	adds	r7, #32
 8011eaa:	46bd      	mov	sp, r7
 8011eac:	bd80      	pop	{r7, pc}
 8011eae:	bf00      	nop

08011eb0 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011eb0:	b580      	push	{r7, lr}
 8011eb2:	b08a      	sub	sp, #40	; 0x28
 8011eb4:	af02      	add	r7, sp, #8
 8011eb6:	60f8      	str	r0, [r7, #12]
 8011eb8:	60b9      	str	r1, [r7, #8]
 8011eba:	603b      	str	r3, [r7, #0]
 8011ebc:	4613      	mov	r3, r2
 8011ebe:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8011ec0:	2300      	movs	r3, #0
 8011ec2:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8011ec4:	68fb      	ldr	r3, [r7, #12]
 8011ec6:	681b      	ldr	r3, [r3, #0]
 8011ec8:	3330      	adds	r3, #48	; 0x30
 8011eca:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8011ecc:	68fb      	ldr	r3, [r7, #12]
 8011ece:	685b      	ldr	r3, [r3, #4]
 8011ed0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8011ed4:	d112      	bne.n	8011efc <HAL_SPI_Receive+0x4c>
 8011ed6:	68fb      	ldr	r3, [r7, #12]
 8011ed8:	689b      	ldr	r3, [r3, #8]
 8011eda:	2b00      	cmp	r3, #0
 8011edc:	d10e      	bne.n	8011efc <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8011ede:	68fb      	ldr	r3, [r7, #12]
 8011ee0:	2204      	movs	r2, #4
 8011ee2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8011ee6:	88fa      	ldrh	r2, [r7, #6]
 8011ee8:	683b      	ldr	r3, [r7, #0]
 8011eea:	9300      	str	r3, [sp, #0]
 8011eec:	4613      	mov	r3, r2
 8011eee:	68ba      	ldr	r2, [r7, #8]
 8011ef0:	68b9      	ldr	r1, [r7, #8]
 8011ef2:	68f8      	ldr	r0, [r7, #12]
 8011ef4:	f000 f9ce 	bl	8012294 <HAL_SPI_TransmitReceive>
 8011ef8:	4603      	mov	r3, r0
 8011efa:	e1c7      	b.n	801228c <HAL_SPI_Receive+0x3dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8011efc:	68fb      	ldr	r3, [r7, #12]
 8011efe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8011f02:	2b01      	cmp	r3, #1
 8011f04:	d101      	bne.n	8011f0a <HAL_SPI_Receive+0x5a>
 8011f06:	2302      	movs	r3, #2
 8011f08:	e1c0      	b.n	801228c <HAL_SPI_Receive+0x3dc>
 8011f0a:	68fb      	ldr	r3, [r7, #12]
 8011f0c:	2201      	movs	r2, #1
 8011f0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8011f12:	f7f7 ff8f 	bl	8009e34 <HAL_GetTick>
 8011f16:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8011f18:	68fb      	ldr	r3, [r7, #12]
 8011f1a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8011f1e:	b2db      	uxtb	r3, r3
 8011f20:	2b01      	cmp	r3, #1
 8011f22:	d007      	beq.n	8011f34 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 8011f24:	2302      	movs	r3, #2
 8011f26:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8011f28:	68fb      	ldr	r3, [r7, #12]
 8011f2a:	2200      	movs	r2, #0
 8011f2c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8011f30:	7ffb      	ldrb	r3, [r7, #31]
 8011f32:	e1ab      	b.n	801228c <HAL_SPI_Receive+0x3dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8011f34:	68bb      	ldr	r3, [r7, #8]
 8011f36:	2b00      	cmp	r3, #0
 8011f38:	d002      	beq.n	8011f40 <HAL_SPI_Receive+0x90>
 8011f3a:	88fb      	ldrh	r3, [r7, #6]
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d107      	bne.n	8011f50 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 8011f40:	2301      	movs	r3, #1
 8011f42:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8011f44:	68fb      	ldr	r3, [r7, #12]
 8011f46:	2200      	movs	r2, #0
 8011f48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8011f4c:	7ffb      	ldrb	r3, [r7, #31]
 8011f4e:	e19d      	b.n	801228c <HAL_SPI_Receive+0x3dc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8011f50:	68fb      	ldr	r3, [r7, #12]
 8011f52:	2204      	movs	r2, #4
 8011f54:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8011f58:	68fb      	ldr	r3, [r7, #12]
 8011f5a:	2200      	movs	r2, #0
 8011f5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8011f60:	68fb      	ldr	r3, [r7, #12]
 8011f62:	68ba      	ldr	r2, [r7, #8]
 8011f64:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8011f66:	68fb      	ldr	r3, [r7, #12]
 8011f68:	88fa      	ldrh	r2, [r7, #6]
 8011f6a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8011f6e:	68fb      	ldr	r3, [r7, #12]
 8011f70:	88fa      	ldrh	r2, [r7, #6]
 8011f72:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8011f76:	68fb      	ldr	r3, [r7, #12]
 8011f78:	2200      	movs	r2, #0
 8011f7a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8011f7c:	68fb      	ldr	r3, [r7, #12]
 8011f7e:	2200      	movs	r2, #0
 8011f80:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8011f84:	68fb      	ldr	r3, [r7, #12]
 8011f86:	2200      	movs	r2, #0
 8011f88:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 8011f8c:	68fb      	ldr	r3, [r7, #12]
 8011f8e:	2200      	movs	r2, #0
 8011f90:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8011f92:	68fb      	ldr	r3, [r7, #12]
 8011f94:	2200      	movs	r2, #0
 8011f96:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011f98:	68fb      	ldr	r3, [r7, #12]
 8011f9a:	689b      	ldr	r3, [r3, #8]
 8011f9c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8011fa0:	d107      	bne.n	8011fb2 <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 8011fa2:	68fb      	ldr	r3, [r7, #12]
 8011fa4:	681b      	ldr	r3, [r3, #0]
 8011fa6:	681a      	ldr	r2, [r3, #0]
 8011fa8:	68fb      	ldr	r3, [r7, #12]
 8011faa:	681b      	ldr	r3, [r3, #0]
 8011fac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8011fb0:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8011fb2:	68fb      	ldr	r3, [r7, #12]
 8011fb4:	681b      	ldr	r3, [r3, #0]
 8011fb6:	685a      	ldr	r2, [r3, #4]
 8011fb8:	4b94      	ldr	r3, [pc, #592]	; (801220c <HAL_SPI_Receive+0x35c>)
 8011fba:	4013      	ands	r3, r2
 8011fbc:	88f9      	ldrh	r1, [r7, #6]
 8011fbe:	68fa      	ldr	r2, [r7, #12]
 8011fc0:	6812      	ldr	r2, [r2, #0]
 8011fc2:	430b      	orrs	r3, r1
 8011fc4:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8011fc6:	68fb      	ldr	r3, [r7, #12]
 8011fc8:	681b      	ldr	r3, [r3, #0]
 8011fca:	681a      	ldr	r2, [r3, #0]
 8011fcc:	68fb      	ldr	r3, [r7, #12]
 8011fce:	681b      	ldr	r3, [r3, #0]
 8011fd0:	f042 0201 	orr.w	r2, r2, #1
 8011fd4:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8011fd6:	68fb      	ldr	r3, [r7, #12]
 8011fd8:	685b      	ldr	r3, [r3, #4]
 8011fda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8011fde:	d107      	bne.n	8011ff0 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8011fe0:	68fb      	ldr	r3, [r7, #12]
 8011fe2:	681b      	ldr	r3, [r3, #0]
 8011fe4:	681a      	ldr	r2, [r3, #0]
 8011fe6:	68fb      	ldr	r3, [r7, #12]
 8011fe8:	681b      	ldr	r3, [r3, #0]
 8011fea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011fee:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8011ff0:	68fb      	ldr	r3, [r7, #12]
 8011ff2:	68db      	ldr	r3, [r3, #12]
 8011ff4:	2b0f      	cmp	r3, #15
 8011ff6:	d948      	bls.n	801208a <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8011ff8:	e040      	b.n	801207c <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8011ffa:	68fb      	ldr	r3, [r7, #12]
 8011ffc:	681b      	ldr	r3, [r3, #0]
 8011ffe:	695a      	ldr	r2, [r3, #20]
 8012000:	f248 0308 	movw	r3, #32776	; 0x8008
 8012004:	4013      	ands	r3, r2
 8012006:	2b00      	cmp	r3, #0
 8012008:	d014      	beq.n	8012034 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 801200a:	68fb      	ldr	r3, [r7, #12]
 801200c:	681a      	ldr	r2, [r3, #0]
 801200e:	68fb      	ldr	r3, [r7, #12]
 8012010:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012012:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8012014:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8012016:	68fb      	ldr	r3, [r7, #12]
 8012018:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801201a:	1d1a      	adds	r2, r3, #4
 801201c:	68fb      	ldr	r3, [r7, #12]
 801201e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8012020:	68fb      	ldr	r3, [r7, #12]
 8012022:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8012026:	b29b      	uxth	r3, r3
 8012028:	3b01      	subs	r3, #1
 801202a:	b29a      	uxth	r2, r3
 801202c:	68fb      	ldr	r3, [r7, #12]
 801202e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8012032:	e023      	b.n	801207c <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8012034:	f7f7 fefe 	bl	8009e34 <HAL_GetTick>
 8012038:	4602      	mov	r2, r0
 801203a:	697b      	ldr	r3, [r7, #20]
 801203c:	1ad3      	subs	r3, r2, r3
 801203e:	683a      	ldr	r2, [r7, #0]
 8012040:	429a      	cmp	r2, r3
 8012042:	d803      	bhi.n	801204c <HAL_SPI_Receive+0x19c>
 8012044:	683b      	ldr	r3, [r7, #0]
 8012046:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801204a:	d102      	bne.n	8012052 <HAL_SPI_Receive+0x1a2>
 801204c:	683b      	ldr	r3, [r7, #0]
 801204e:	2b00      	cmp	r3, #0
 8012050:	d114      	bne.n	801207c <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8012052:	68f8      	ldr	r0, [r7, #12]
 8012054:	f000 fe2c 	bl	8012cb0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8012058:	68fb      	ldr	r3, [r7, #12]
 801205a:	2200      	movs	r2, #0
 801205c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8012060:	68fb      	ldr	r3, [r7, #12]
 8012062:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012066:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 801206a:	68fb      	ldr	r3, [r7, #12]
 801206c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8012070:	68fb      	ldr	r3, [r7, #12]
 8012072:	2201      	movs	r2, #1
 8012074:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8012078:	2303      	movs	r3, #3
 801207a:	e107      	b.n	801228c <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 801207c:	68fb      	ldr	r3, [r7, #12]
 801207e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8012082:	b29b      	uxth	r3, r3
 8012084:	2b00      	cmp	r3, #0
 8012086:	d1b8      	bne.n	8011ffa <HAL_SPI_Receive+0x14a>
 8012088:	e0ed      	b.n	8012266 <HAL_SPI_Receive+0x3b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801208a:	68fb      	ldr	r3, [r7, #12]
 801208c:	68db      	ldr	r3, [r3, #12]
 801208e:	2b07      	cmp	r3, #7
 8012090:	f240 80e2 	bls.w	8012258 <HAL_SPI_Receive+0x3a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8012094:	e05b      	b.n	801214e <HAL_SPI_Receive+0x29e>
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 8012096:	68fb      	ldr	r3, [r7, #12]
 8012098:	681b      	ldr	r3, [r3, #0]
 801209a:	695b      	ldr	r3, [r3, #20]
 801209c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80120a0:	2b00      	cmp	r3, #0
 80120a2:	d030      	beq.n	8012106 <HAL_SPI_Receive+0x256>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 80120a4:	68fb      	ldr	r3, [r7, #12]
 80120a6:	681b      	ldr	r3, [r3, #0]
 80120a8:	695b      	ldr	r3, [r3, #20]
 80120aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	d014      	beq.n	80120dc <HAL_SPI_Receive+0x22c>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80120b2:	68fb      	ldr	r3, [r7, #12]
 80120b4:	681a      	ldr	r2, [r3, #0]
 80120b6:	68fb      	ldr	r3, [r7, #12]
 80120b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80120ba:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80120bc:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80120be:	68fb      	ldr	r3, [r7, #12]
 80120c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80120c2:	1d1a      	adds	r2, r3, #4
 80120c4:	68fb      	ldr	r3, [r7, #12]
 80120c6:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 80120c8:	68fb      	ldr	r3, [r7, #12]
 80120ca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80120ce:	b29b      	uxth	r3, r3
 80120d0:	3b02      	subs	r3, #2
 80120d2:	b29a      	uxth	r2, r3
 80120d4:	68fb      	ldr	r3, [r7, #12]
 80120d6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80120da:	e038      	b.n	801214e <HAL_SPI_Receive+0x29e>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80120dc:	68fb      	ldr	r3, [r7, #12]
 80120de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80120e0:	69ba      	ldr	r2, [r7, #24]
 80120e2:	8812      	ldrh	r2, [r2, #0]
 80120e4:	b292      	uxth	r2, r2
 80120e6:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80120e8:	68fb      	ldr	r3, [r7, #12]
 80120ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80120ec:	1c9a      	adds	r2, r3, #2
 80120ee:	68fb      	ldr	r3, [r7, #12]
 80120f0:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 80120f2:	68fb      	ldr	r3, [r7, #12]
 80120f4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80120f8:	b29b      	uxth	r3, r3
 80120fa:	3b01      	subs	r3, #1
 80120fc:	b29a      	uxth	r2, r3
 80120fe:	68fb      	ldr	r3, [r7, #12]
 8012100:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8012104:	e023      	b.n	801214e <HAL_SPI_Receive+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8012106:	f7f7 fe95 	bl	8009e34 <HAL_GetTick>
 801210a:	4602      	mov	r2, r0
 801210c:	697b      	ldr	r3, [r7, #20]
 801210e:	1ad3      	subs	r3, r2, r3
 8012110:	683a      	ldr	r2, [r7, #0]
 8012112:	429a      	cmp	r2, r3
 8012114:	d803      	bhi.n	801211e <HAL_SPI_Receive+0x26e>
 8012116:	683b      	ldr	r3, [r7, #0]
 8012118:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801211c:	d102      	bne.n	8012124 <HAL_SPI_Receive+0x274>
 801211e:	683b      	ldr	r3, [r7, #0]
 8012120:	2b00      	cmp	r3, #0
 8012122:	d114      	bne.n	801214e <HAL_SPI_Receive+0x29e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8012124:	68f8      	ldr	r0, [r7, #12]
 8012126:	f000 fdc3 	bl	8012cb0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 801212a:	68fb      	ldr	r3, [r7, #12]
 801212c:	2200      	movs	r2, #0
 801212e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8012132:	68fb      	ldr	r3, [r7, #12]
 8012134:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012138:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 801213c:	68fb      	ldr	r3, [r7, #12]
 801213e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8012142:	68fb      	ldr	r3, [r7, #12]
 8012144:	2201      	movs	r2, #1
 8012146:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 801214a:	2303      	movs	r3, #3
 801214c:	e09e      	b.n	801228c <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 801214e:	68fb      	ldr	r3, [r7, #12]
 8012150:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8012154:	b29b      	uxth	r3, r3
 8012156:	2b00      	cmp	r3, #0
 8012158:	d19d      	bne.n	8012096 <HAL_SPI_Receive+0x1e6>
 801215a:	e084      	b.n	8012266 <HAL_SPI_Receive+0x3b6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 801215c:	68fb      	ldr	r3, [r7, #12]
 801215e:	681b      	ldr	r3, [r3, #0]
 8012160:	695b      	ldr	r3, [r3, #20]
 8012162:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8012166:	2b00      	cmp	r3, #0
 8012168:	d052      	beq.n	8012210 <HAL_SPI_Receive+0x360>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 801216a:	68fb      	ldr	r3, [r7, #12]
 801216c:	681b      	ldr	r3, [r3, #0]
 801216e:	695b      	ldr	r3, [r3, #20]
 8012170:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012174:	2b00      	cmp	r3, #0
 8012176:	d014      	beq.n	80121a2 <HAL_SPI_Receive+0x2f2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8012178:	68fb      	ldr	r3, [r7, #12]
 801217a:	681a      	ldr	r2, [r3, #0]
 801217c:	68fb      	ldr	r3, [r7, #12]
 801217e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012180:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8012182:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8012184:	68fb      	ldr	r3, [r7, #12]
 8012186:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012188:	1d1a      	adds	r2, r3, #4
 801218a:	68fb      	ldr	r3, [r7, #12]
 801218c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 801218e:	68fb      	ldr	r3, [r7, #12]
 8012190:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8012194:	b29b      	uxth	r3, r3
 8012196:	3b04      	subs	r3, #4
 8012198:	b29a      	uxth	r2, r3
 801219a:	68fb      	ldr	r3, [r7, #12]
 801219c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80121a0:	e05a      	b.n	8012258 <HAL_SPI_Receive+0x3a8>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 80121a2:	68fb      	ldr	r3, [r7, #12]
 80121a4:	681b      	ldr	r3, [r3, #0]
 80121a6:	695b      	ldr	r3, [r3, #20]
 80121a8:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 80121ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80121b0:	d914      	bls.n	80121dc <HAL_SPI_Receive+0x32c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80121b2:	68fb      	ldr	r3, [r7, #12]
 80121b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80121b6:	69ba      	ldr	r2, [r7, #24]
 80121b8:	8812      	ldrh	r2, [r2, #0]
 80121ba:	b292      	uxth	r2, r2
 80121bc:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80121be:	68fb      	ldr	r3, [r7, #12]
 80121c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80121c2:	1c9a      	adds	r2, r3, #2
 80121c4:	68fb      	ldr	r3, [r7, #12]
 80121c6:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 80121c8:	68fb      	ldr	r3, [r7, #12]
 80121ca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80121ce:	b29b      	uxth	r3, r3
 80121d0:	3b02      	subs	r3, #2
 80121d2:	b29a      	uxth	r2, r3
 80121d4:	68fb      	ldr	r3, [r7, #12]
 80121d6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80121da:	e03d      	b.n	8012258 <HAL_SPI_Receive+0x3a8>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80121dc:	68fb      	ldr	r3, [r7, #12]
 80121de:	681b      	ldr	r3, [r3, #0]
 80121e0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80121e4:	68fb      	ldr	r3, [r7, #12]
 80121e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80121e8:	7812      	ldrb	r2, [r2, #0]
 80121ea:	b2d2      	uxtb	r2, r2
 80121ec:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80121ee:	68fb      	ldr	r3, [r7, #12]
 80121f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80121f2:	1c5a      	adds	r2, r3, #1
 80121f4:	68fb      	ldr	r3, [r7, #12]
 80121f6:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 80121f8:	68fb      	ldr	r3, [r7, #12]
 80121fa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80121fe:	b29b      	uxth	r3, r3
 8012200:	3b01      	subs	r3, #1
 8012202:	b29a      	uxth	r2, r3
 8012204:	68fb      	ldr	r3, [r7, #12]
 8012206:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 801220a:	e025      	b.n	8012258 <HAL_SPI_Receive+0x3a8>
 801220c:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8012210:	f7f7 fe10 	bl	8009e34 <HAL_GetTick>
 8012214:	4602      	mov	r2, r0
 8012216:	697b      	ldr	r3, [r7, #20]
 8012218:	1ad3      	subs	r3, r2, r3
 801221a:	683a      	ldr	r2, [r7, #0]
 801221c:	429a      	cmp	r2, r3
 801221e:	d803      	bhi.n	8012228 <HAL_SPI_Receive+0x378>
 8012220:	683b      	ldr	r3, [r7, #0]
 8012222:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012226:	d102      	bne.n	801222e <HAL_SPI_Receive+0x37e>
 8012228:	683b      	ldr	r3, [r7, #0]
 801222a:	2b00      	cmp	r3, #0
 801222c:	d114      	bne.n	8012258 <HAL_SPI_Receive+0x3a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 801222e:	68f8      	ldr	r0, [r7, #12]
 8012230:	f000 fd3e 	bl	8012cb0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8012234:	68fb      	ldr	r3, [r7, #12]
 8012236:	2200      	movs	r2, #0
 8012238:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 801223c:	68fb      	ldr	r3, [r7, #12]
 801223e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012242:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8012246:	68fb      	ldr	r3, [r7, #12]
 8012248:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 801224c:	68fb      	ldr	r3, [r7, #12]
 801224e:	2201      	movs	r2, #1
 8012250:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8012254:	2303      	movs	r3, #3
 8012256:	e019      	b.n	801228c <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 8012258:	68fb      	ldr	r3, [r7, #12]
 801225a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801225e:	b29b      	uxth	r3, r3
 8012260:	2b00      	cmp	r3, #0
 8012262:	f47f af7b 	bne.w	801215c <HAL_SPI_Receive+0x2ac>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8012266:	68f8      	ldr	r0, [r7, #12]
 8012268:	f000 fd22 	bl	8012cb0 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 801226c:	68fb      	ldr	r3, [r7, #12]
 801226e:	2200      	movs	r2, #0
 8012270:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8012274:	68fb      	ldr	r3, [r7, #12]
 8012276:	2201      	movs	r2, #1
 8012278:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801227c:	68fb      	ldr	r3, [r7, #12]
 801227e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012282:	2b00      	cmp	r3, #0
 8012284:	d001      	beq.n	801228a <HAL_SPI_Receive+0x3da>
  {
    return HAL_ERROR;
 8012286:	2301      	movs	r3, #1
 8012288:	e000      	b.n	801228c <HAL_SPI_Receive+0x3dc>
  }
  return errorcode;
 801228a:	7ffb      	ldrb	r3, [r7, #31]
}
 801228c:	4618      	mov	r0, r3
 801228e:	3720      	adds	r7, #32
 8012290:	46bd      	mov	sp, r7
 8012292:	bd80      	pop	{r7, pc}

08012294 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8012294:	b580      	push	{r7, lr}
 8012296:	b08e      	sub	sp, #56	; 0x38
 8012298:	af02      	add	r7, sp, #8
 801229a:	60f8      	str	r0, [r7, #12]
 801229c:	60b9      	str	r1, [r7, #8]
 801229e:	607a      	str	r2, [r7, #4]
 80122a0:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80122a2:	2300      	movs	r3, #0
 80122a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80122a8:	68fb      	ldr	r3, [r7, #12]
 80122aa:	681b      	ldr	r3, [r3, #0]
 80122ac:	3320      	adds	r3, #32
 80122ae:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80122b0:	68fb      	ldr	r3, [r7, #12]
 80122b2:	681b      	ldr	r3, [r3, #0]
 80122b4:	3330      	adds	r3, #48	; 0x30
 80122b6:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 80122b8:	68fb      	ldr	r3, [r7, #12]
 80122ba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80122be:	2b01      	cmp	r3, #1
 80122c0:	d101      	bne.n	80122c6 <HAL_SPI_TransmitReceive+0x32>
 80122c2:	2302      	movs	r3, #2
 80122c4:	e2ce      	b.n	8012864 <HAL_SPI_TransmitReceive+0x5d0>
 80122c6:	68fb      	ldr	r3, [r7, #12]
 80122c8:	2201      	movs	r2, #1
 80122ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80122ce:	f7f7 fdb1 	bl	8009e34 <HAL_GetTick>
 80122d2:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 80122d4:	887b      	ldrh	r3, [r7, #2]
 80122d6:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 80122d8:	887b      	ldrh	r3, [r7, #2]
 80122da:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 80122dc:	68fb      	ldr	r3, [r7, #12]
 80122de:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80122e2:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80122e4:	68fb      	ldr	r3, [r7, #12]
 80122e6:	685b      	ldr	r3, [r3, #4]
 80122e8:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80122ea:	7efb      	ldrb	r3, [r7, #27]
 80122ec:	2b01      	cmp	r3, #1
 80122ee:	d014      	beq.n	801231a <HAL_SPI_TransmitReceive+0x86>
 80122f0:	697b      	ldr	r3, [r7, #20]
 80122f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80122f6:	d106      	bne.n	8012306 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 80122f8:	68fb      	ldr	r3, [r7, #12]
 80122fa:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	d102      	bne.n	8012306 <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8012300:	7efb      	ldrb	r3, [r7, #27]
 8012302:	2b04      	cmp	r3, #4
 8012304:	d009      	beq.n	801231a <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 8012306:	2302      	movs	r3, #2
 8012308:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 801230c:	68fb      	ldr	r3, [r7, #12]
 801230e:	2200      	movs	r2, #0
 8012310:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8012314:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8012318:	e2a4      	b.n	8012864 <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 801231a:	68bb      	ldr	r3, [r7, #8]
 801231c:	2b00      	cmp	r3, #0
 801231e:	d005      	beq.n	801232c <HAL_SPI_TransmitReceive+0x98>
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	2b00      	cmp	r3, #0
 8012324:	d002      	beq.n	801232c <HAL_SPI_TransmitReceive+0x98>
 8012326:	887b      	ldrh	r3, [r7, #2]
 8012328:	2b00      	cmp	r3, #0
 801232a:	d109      	bne.n	8012340 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 801232c:	2301      	movs	r3, #1
 801232e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8012332:	68fb      	ldr	r3, [r7, #12]
 8012334:	2200      	movs	r2, #0
 8012336:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 801233a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801233e:	e291      	b.n	8012864 <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8012340:	68fb      	ldr	r3, [r7, #12]
 8012342:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8012346:	b2db      	uxtb	r3, r3
 8012348:	2b04      	cmp	r3, #4
 801234a:	d003      	beq.n	8012354 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 801234c:	68fb      	ldr	r3, [r7, #12]
 801234e:	2205      	movs	r2, #5
 8012350:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8012354:	68fb      	ldr	r3, [r7, #12]
 8012356:	2200      	movs	r2, #0
 8012358:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 801235c:	68fb      	ldr	r3, [r7, #12]
 801235e:	687a      	ldr	r2, [r7, #4]
 8012360:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8012362:	68fb      	ldr	r3, [r7, #12]
 8012364:	887a      	ldrh	r2, [r7, #2]
 8012366:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 801236a:	68fb      	ldr	r3, [r7, #12]
 801236c:	887a      	ldrh	r2, [r7, #2]
 801236e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8012372:	68fb      	ldr	r3, [r7, #12]
 8012374:	68ba      	ldr	r2, [r7, #8]
 8012376:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8012378:	68fb      	ldr	r3, [r7, #12]
 801237a:	887a      	ldrh	r2, [r7, #2]
 801237c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8012380:	68fb      	ldr	r3, [r7, #12]
 8012382:	887a      	ldrh	r2, [r7, #2]
 8012384:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8012388:	68fb      	ldr	r3, [r7, #12]
 801238a:	2200      	movs	r2, #0
 801238c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 801238e:	68fb      	ldr	r3, [r7, #12]
 8012390:	2200      	movs	r2, #0
 8012392:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8012394:	68fb      	ldr	r3, [r7, #12]
 8012396:	681b      	ldr	r3, [r3, #0]
 8012398:	685a      	ldr	r2, [r3, #4]
 801239a:	4b81      	ldr	r3, [pc, #516]	; (80125a0 <HAL_SPI_TransmitReceive+0x30c>)
 801239c:	4013      	ands	r3, r2
 801239e:	8879      	ldrh	r1, [r7, #2]
 80123a0:	68fa      	ldr	r2, [r7, #12]
 80123a2:	6812      	ldr	r2, [r2, #0]
 80123a4:	430b      	orrs	r3, r1
 80123a6:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 80123a8:	68fb      	ldr	r3, [r7, #12]
 80123aa:	681b      	ldr	r3, [r3, #0]
 80123ac:	681a      	ldr	r2, [r3, #0]
 80123ae:	68fb      	ldr	r3, [r7, #12]
 80123b0:	681b      	ldr	r3, [r3, #0]
 80123b2:	f042 0201 	orr.w	r2, r2, #1
 80123b6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80123b8:	68fb      	ldr	r3, [r7, #12]
 80123ba:	685b      	ldr	r3, [r3, #4]
 80123bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80123c0:	d107      	bne.n	80123d2 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80123c2:	68fb      	ldr	r3, [r7, #12]
 80123c4:	681b      	ldr	r3, [r3, #0]
 80123c6:	681a      	ldr	r2, [r3, #0]
 80123c8:	68fb      	ldr	r3, [r7, #12]
 80123ca:	681b      	ldr	r3, [r3, #0]
 80123cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80123d0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80123d2:	68fb      	ldr	r3, [r7, #12]
 80123d4:	68db      	ldr	r3, [r3, #12]
 80123d6:	2b0f      	cmp	r3, #15
 80123d8:	d970      	bls.n	80124bc <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80123da:	e068      	b.n	80124ae <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 80123dc:	68fb      	ldr	r3, [r7, #12]
 80123de:	681b      	ldr	r3, [r3, #0]
 80123e0:	695b      	ldr	r3, [r3, #20]
 80123e2:	f003 0302 	and.w	r3, r3, #2
 80123e6:	2b02      	cmp	r3, #2
 80123e8:	d11a      	bne.n	8012420 <HAL_SPI_TransmitReceive+0x18c>
 80123ea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	d017      	beq.n	8012420 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80123f0:	68fb      	ldr	r3, [r7, #12]
 80123f2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80123f4:	68fb      	ldr	r3, [r7, #12]
 80123f6:	681b      	ldr	r3, [r3, #0]
 80123f8:	6812      	ldr	r2, [r2, #0]
 80123fa:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80123fc:	68fb      	ldr	r3, [r7, #12]
 80123fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012400:	1d1a      	adds	r2, r3, #4
 8012402:	68fb      	ldr	r3, [r7, #12]
 8012404:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8012406:	68fb      	ldr	r3, [r7, #12]
 8012408:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801240c:	b29b      	uxth	r3, r3
 801240e:	3b01      	subs	r3, #1
 8012410:	b29a      	uxth	r2, r3
 8012412:	68fb      	ldr	r3, [r7, #12]
 8012414:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8012418:	68fb      	ldr	r3, [r7, #12]
 801241a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801241e:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8012420:	68fb      	ldr	r3, [r7, #12]
 8012422:	681b      	ldr	r3, [r3, #0]
 8012424:	695a      	ldr	r2, [r3, #20]
 8012426:	f248 0308 	movw	r3, #32776	; 0x8008
 801242a:	4013      	ands	r3, r2
 801242c:	2b00      	cmp	r3, #0
 801242e:	d01a      	beq.n	8012466 <HAL_SPI_TransmitReceive+0x1d2>
 8012430:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012432:	2b00      	cmp	r3, #0
 8012434:	d017      	beq.n	8012466 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8012436:	68fb      	ldr	r3, [r7, #12]
 8012438:	681a      	ldr	r2, [r3, #0]
 801243a:	68fb      	ldr	r3, [r7, #12]
 801243c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801243e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8012440:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8012442:	68fb      	ldr	r3, [r7, #12]
 8012444:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012446:	1d1a      	adds	r2, r3, #4
 8012448:	68fb      	ldr	r3, [r7, #12]
 801244a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 801244c:	68fb      	ldr	r3, [r7, #12]
 801244e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8012452:	b29b      	uxth	r3, r3
 8012454:	3b01      	subs	r3, #1
 8012456:	b29a      	uxth	r2, r3
 8012458:	68fb      	ldr	r3, [r7, #12]
 801245a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 801245e:	68fb      	ldr	r3, [r7, #12]
 8012460:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8012464:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8012466:	f7f7 fce5 	bl	8009e34 <HAL_GetTick>
 801246a:	4602      	mov	r2, r0
 801246c:	69fb      	ldr	r3, [r7, #28]
 801246e:	1ad3      	subs	r3, r2, r3
 8012470:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012472:	429a      	cmp	r2, r3
 8012474:	d803      	bhi.n	801247e <HAL_SPI_TransmitReceive+0x1ea>
 8012476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012478:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801247c:	d102      	bne.n	8012484 <HAL_SPI_TransmitReceive+0x1f0>
 801247e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012480:	2b00      	cmp	r3, #0
 8012482:	d114      	bne.n	80124ae <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8012484:	68f8      	ldr	r0, [r7, #12]
 8012486:	f000 fc13 	bl	8012cb0 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 801248a:	68fb      	ldr	r3, [r7, #12]
 801248c:	2200      	movs	r2, #0
 801248e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8012492:	68fb      	ldr	r3, [r7, #12]
 8012494:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012498:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 801249c:	68fb      	ldr	r3, [r7, #12]
 801249e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 80124a2:	68fb      	ldr	r3, [r7, #12]
 80124a4:	2201      	movs	r2, #1
 80124a6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 80124aa:	2303      	movs	r3, #3
 80124ac:	e1da      	b.n	8012864 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80124ae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	d193      	bne.n	80123dc <HAL_SPI_TransmitReceive+0x148>
 80124b4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	d190      	bne.n	80123dc <HAL_SPI_TransmitReceive+0x148>
 80124ba:	e1ac      	b.n	8012816 <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80124bc:	68fb      	ldr	r3, [r7, #12]
 80124be:	68db      	ldr	r3, [r3, #12]
 80124c0:	2b07      	cmp	r3, #7
 80124c2:	f240 81a0 	bls.w	8012806 <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80124c6:	e0a9      	b.n	801261c <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 80124c8:	68fb      	ldr	r3, [r7, #12]
 80124ca:	681b      	ldr	r3, [r3, #0]
 80124cc:	695b      	ldr	r3, [r3, #20]
 80124ce:	f003 0302 	and.w	r3, r3, #2
 80124d2:	2b02      	cmp	r3, #2
 80124d4:	d139      	bne.n	801254a <HAL_SPI_TransmitReceive+0x2b6>
 80124d6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80124d8:	2b00      	cmp	r3, #0
 80124da:	d036      	beq.n	801254a <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80124dc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80124de:	2b01      	cmp	r3, #1
 80124e0:	d91c      	bls.n	801251c <HAL_SPI_TransmitReceive+0x288>
 80124e2:	68fb      	ldr	r3, [r7, #12]
 80124e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80124e6:	2b00      	cmp	r3, #0
 80124e8:	d018      	beq.n	801251c <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80124ea:	68fb      	ldr	r3, [r7, #12]
 80124ec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80124ee:	68fb      	ldr	r3, [r7, #12]
 80124f0:	681b      	ldr	r3, [r3, #0]
 80124f2:	6812      	ldr	r2, [r2, #0]
 80124f4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80124f6:	68fb      	ldr	r3, [r7, #12]
 80124f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80124fa:	1d1a      	adds	r2, r3, #4
 80124fc:	68fb      	ldr	r3, [r7, #12]
 80124fe:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8012500:	68fb      	ldr	r3, [r7, #12]
 8012502:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8012506:	b29b      	uxth	r3, r3
 8012508:	3b02      	subs	r3, #2
 801250a:	b29a      	uxth	r2, r3
 801250c:	68fb      	ldr	r3, [r7, #12]
 801250e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8012512:	68fb      	ldr	r3, [r7, #12]
 8012514:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8012518:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801251a:	e016      	b.n	801254a <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 801251c:	68fb      	ldr	r3, [r7, #12]
 801251e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012520:	881a      	ldrh	r2, [r3, #0]
 8012522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012524:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8012526:	68fb      	ldr	r3, [r7, #12]
 8012528:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801252a:	1c9a      	adds	r2, r3, #2
 801252c:	68fb      	ldr	r3, [r7, #12]
 801252e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8012530:	68fb      	ldr	r3, [r7, #12]
 8012532:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8012536:	b29b      	uxth	r3, r3
 8012538:	3b01      	subs	r3, #1
 801253a:	b29a      	uxth	r2, r3
 801253c:	68fb      	ldr	r3, [r7, #12]
 801253e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8012542:	68fb      	ldr	r3, [r7, #12]
 8012544:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8012548:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 801254a:	68fb      	ldr	r3, [r7, #12]
 801254c:	681b      	ldr	r3, [r3, #0]
 801254e:	695b      	ldr	r3, [r3, #20]
 8012550:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8012554:	2b00      	cmp	r3, #0
 8012556:	d03d      	beq.n	80125d4 <HAL_SPI_TransmitReceive+0x340>
 8012558:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801255a:	2b00      	cmp	r3, #0
 801255c:	d03a      	beq.n	80125d4 <HAL_SPI_TransmitReceive+0x340>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 801255e:	68fb      	ldr	r3, [r7, #12]
 8012560:	681b      	ldr	r3, [r3, #0]
 8012562:	695b      	ldr	r3, [r3, #20]
 8012564:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012568:	2b00      	cmp	r3, #0
 801256a:	d01b      	beq.n	80125a4 <HAL_SPI_TransmitReceive+0x310>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 801256c:	68fb      	ldr	r3, [r7, #12]
 801256e:	681a      	ldr	r2, [r3, #0]
 8012570:	68fb      	ldr	r3, [r7, #12]
 8012572:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012574:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8012576:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8012578:	68fb      	ldr	r3, [r7, #12]
 801257a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801257c:	1d1a      	adds	r2, r3, #4
 801257e:	68fb      	ldr	r3, [r7, #12]
 8012580:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8012582:	68fb      	ldr	r3, [r7, #12]
 8012584:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8012588:	b29b      	uxth	r3, r3
 801258a:	3b02      	subs	r3, #2
 801258c:	b29a      	uxth	r2, r3
 801258e:	68fb      	ldr	r3, [r7, #12]
 8012590:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8012594:	68fb      	ldr	r3, [r7, #12]
 8012596:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801259a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 801259c:	e01a      	b.n	80125d4 <HAL_SPI_TransmitReceive+0x340>
 801259e:	bf00      	nop
 80125a0:	ffff0000 	.word	0xffff0000
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80125a4:	68fb      	ldr	r3, [r7, #12]
 80125a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80125a8:	6a3a      	ldr	r2, [r7, #32]
 80125aa:	8812      	ldrh	r2, [r2, #0]
 80125ac:	b292      	uxth	r2, r2
 80125ae:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80125b0:	68fb      	ldr	r3, [r7, #12]
 80125b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80125b4:	1c9a      	adds	r2, r3, #2
 80125b6:	68fb      	ldr	r3, [r7, #12]
 80125b8:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 80125ba:	68fb      	ldr	r3, [r7, #12]
 80125bc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80125c0:	b29b      	uxth	r3, r3
 80125c2:	3b01      	subs	r3, #1
 80125c4:	b29a      	uxth	r2, r3
 80125c6:	68fb      	ldr	r3, [r7, #12]
 80125c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80125cc:	68fb      	ldr	r3, [r7, #12]
 80125ce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80125d2:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80125d4:	f7f7 fc2e 	bl	8009e34 <HAL_GetTick>
 80125d8:	4602      	mov	r2, r0
 80125da:	69fb      	ldr	r3, [r7, #28]
 80125dc:	1ad3      	subs	r3, r2, r3
 80125de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80125e0:	429a      	cmp	r2, r3
 80125e2:	d803      	bhi.n	80125ec <HAL_SPI_TransmitReceive+0x358>
 80125e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80125ea:	d102      	bne.n	80125f2 <HAL_SPI_TransmitReceive+0x35e>
 80125ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125ee:	2b00      	cmp	r3, #0
 80125f0:	d114      	bne.n	801261c <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80125f2:	68f8      	ldr	r0, [r7, #12]
 80125f4:	f000 fb5c 	bl	8012cb0 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 80125f8:	68fb      	ldr	r3, [r7, #12]
 80125fa:	2200      	movs	r2, #0
 80125fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8012600:	68fb      	ldr	r3, [r7, #12]
 8012602:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012606:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 801260a:	68fb      	ldr	r3, [r7, #12]
 801260c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8012610:	68fb      	ldr	r3, [r7, #12]
 8012612:	2201      	movs	r2, #1
 8012614:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8012618:	2303      	movs	r3, #3
 801261a:	e123      	b.n	8012864 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 801261c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801261e:	2b00      	cmp	r3, #0
 8012620:	f47f af52 	bne.w	80124c8 <HAL_SPI_TransmitReceive+0x234>
 8012624:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012626:	2b00      	cmp	r3, #0
 8012628:	f47f af4e 	bne.w	80124c8 <HAL_SPI_TransmitReceive+0x234>
 801262c:	e0f3      	b.n	8012816 <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 801262e:	68fb      	ldr	r3, [r7, #12]
 8012630:	681b      	ldr	r3, [r3, #0]
 8012632:	695b      	ldr	r3, [r3, #20]
 8012634:	f003 0302 	and.w	r3, r3, #2
 8012638:	2b02      	cmp	r3, #2
 801263a:	d15a      	bne.n	80126f2 <HAL_SPI_TransmitReceive+0x45e>
 801263c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801263e:	2b00      	cmp	r3, #0
 8012640:	d057      	beq.n	80126f2 <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8012642:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012644:	2b03      	cmp	r3, #3
 8012646:	d91c      	bls.n	8012682 <HAL_SPI_TransmitReceive+0x3ee>
 8012648:	68fb      	ldr	r3, [r7, #12]
 801264a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801264c:	2b40      	cmp	r3, #64	; 0x40
 801264e:	d918      	bls.n	8012682 <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8012650:	68fb      	ldr	r3, [r7, #12]
 8012652:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012654:	68fb      	ldr	r3, [r7, #12]
 8012656:	681b      	ldr	r3, [r3, #0]
 8012658:	6812      	ldr	r2, [r2, #0]
 801265a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 801265c:	68fb      	ldr	r3, [r7, #12]
 801265e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012660:	1d1a      	adds	r2, r3, #4
 8012662:	68fb      	ldr	r3, [r7, #12]
 8012664:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8012666:	68fb      	ldr	r3, [r7, #12]
 8012668:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801266c:	b29b      	uxth	r3, r3
 801266e:	3b04      	subs	r3, #4
 8012670:	b29a      	uxth	r2, r3
 8012672:	68fb      	ldr	r3, [r7, #12]
 8012674:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8012678:	68fb      	ldr	r3, [r7, #12]
 801267a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801267e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8012680:	e037      	b.n	80126f2 <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8012682:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012684:	2b01      	cmp	r3, #1
 8012686:	d91b      	bls.n	80126c0 <HAL_SPI_TransmitReceive+0x42c>
 8012688:	68fb      	ldr	r3, [r7, #12]
 801268a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801268c:	2b00      	cmp	r3, #0
 801268e:	d017      	beq.n	80126c0 <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8012690:	68fb      	ldr	r3, [r7, #12]
 8012692:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012694:	881a      	ldrh	r2, [r3, #0]
 8012696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012698:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801269a:	68fb      	ldr	r3, [r7, #12]
 801269c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801269e:	1c9a      	adds	r2, r3, #2
 80126a0:	68fb      	ldr	r3, [r7, #12]
 80126a2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80126a4:	68fb      	ldr	r3, [r7, #12]
 80126a6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80126aa:	b29b      	uxth	r3, r3
 80126ac:	3b02      	subs	r3, #2
 80126ae:	b29a      	uxth	r2, r3
 80126b0:	68fb      	ldr	r3, [r7, #12]
 80126b2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 80126b6:	68fb      	ldr	r3, [r7, #12]
 80126b8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80126bc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80126be:	e018      	b.n	80126f2 <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 80126c0:	68fb      	ldr	r3, [r7, #12]
 80126c2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80126c4:	68fb      	ldr	r3, [r7, #12]
 80126c6:	681b      	ldr	r3, [r3, #0]
 80126c8:	3320      	adds	r3, #32
 80126ca:	7812      	ldrb	r2, [r2, #0]
 80126cc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80126ce:	68fb      	ldr	r3, [r7, #12]
 80126d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80126d2:	1c5a      	adds	r2, r3, #1
 80126d4:	68fb      	ldr	r3, [r7, #12]
 80126d6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80126d8:	68fb      	ldr	r3, [r7, #12]
 80126da:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80126de:	b29b      	uxth	r3, r3
 80126e0:	3b01      	subs	r3, #1
 80126e2:	b29a      	uxth	r2, r3
 80126e4:	68fb      	ldr	r3, [r7, #12]
 80126e6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 80126ea:	68fb      	ldr	r3, [r7, #12]
 80126ec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80126f0:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 80126f2:	68fb      	ldr	r3, [r7, #12]
 80126f4:	681b      	ldr	r3, [r3, #0]
 80126f6:	695b      	ldr	r3, [r3, #20]
 80126f8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80126fc:	2b00      	cmp	r3, #0
 80126fe:	d05e      	beq.n	80127be <HAL_SPI_TransmitReceive+0x52a>
 8012700:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012702:	2b00      	cmp	r3, #0
 8012704:	d05b      	beq.n	80127be <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8012706:	68fb      	ldr	r3, [r7, #12]
 8012708:	681b      	ldr	r3, [r3, #0]
 801270a:	695b      	ldr	r3, [r3, #20]
 801270c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012710:	2b00      	cmp	r3, #0
 8012712:	d018      	beq.n	8012746 <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8012714:	68fb      	ldr	r3, [r7, #12]
 8012716:	681a      	ldr	r2, [r3, #0]
 8012718:	68fb      	ldr	r3, [r7, #12]
 801271a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801271c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 801271e:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8012720:	68fb      	ldr	r3, [r7, #12]
 8012722:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012724:	1d1a      	adds	r2, r3, #4
 8012726:	68fb      	ldr	r3, [r7, #12]
 8012728:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 801272a:	68fb      	ldr	r3, [r7, #12]
 801272c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8012730:	b29b      	uxth	r3, r3
 8012732:	3b04      	subs	r3, #4
 8012734:	b29a      	uxth	r2, r3
 8012736:	68fb      	ldr	r3, [r7, #12]
 8012738:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 801273c:	68fb      	ldr	r3, [r7, #12]
 801273e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8012742:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8012744:	e03b      	b.n	80127be <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 8012746:	68fb      	ldr	r3, [r7, #12]
 8012748:	681b      	ldr	r3, [r3, #0]
 801274a:	695b      	ldr	r3, [r3, #20]
 801274c:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8012750:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012754:	d918      	bls.n	8012788 <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8012756:	68fb      	ldr	r3, [r7, #12]
 8012758:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801275a:	6a3a      	ldr	r2, [r7, #32]
 801275c:	8812      	ldrh	r2, [r2, #0]
 801275e:	b292      	uxth	r2, r2
 8012760:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8012762:	68fb      	ldr	r3, [r7, #12]
 8012764:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012766:	1c9a      	adds	r2, r3, #2
 8012768:	68fb      	ldr	r3, [r7, #12]
 801276a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 801276c:	68fb      	ldr	r3, [r7, #12]
 801276e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8012772:	b29b      	uxth	r3, r3
 8012774:	3b02      	subs	r3, #2
 8012776:	b29a      	uxth	r2, r3
 8012778:	68fb      	ldr	r3, [r7, #12]
 801277a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 801277e:	68fb      	ldr	r3, [r7, #12]
 8012780:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8012784:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8012786:	e01a      	b.n	80127be <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8012788:	68fb      	ldr	r3, [r7, #12]
 801278a:	681b      	ldr	r3, [r3, #0]
 801278c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012790:	68fb      	ldr	r3, [r7, #12]
 8012792:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012794:	7812      	ldrb	r2, [r2, #0]
 8012796:	b2d2      	uxtb	r2, r2
 8012798:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 801279a:	68fb      	ldr	r3, [r7, #12]
 801279c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801279e:	1c5a      	adds	r2, r3, #1
 80127a0:	68fb      	ldr	r3, [r7, #12]
 80127a2:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 80127a4:	68fb      	ldr	r3, [r7, #12]
 80127a6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80127aa:	b29b      	uxth	r3, r3
 80127ac:	3b01      	subs	r3, #1
 80127ae:	b29a      	uxth	r2, r3
 80127b0:	68fb      	ldr	r3, [r7, #12]
 80127b2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80127b6:	68fb      	ldr	r3, [r7, #12]
 80127b8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80127bc:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80127be:	f7f7 fb39 	bl	8009e34 <HAL_GetTick>
 80127c2:	4602      	mov	r2, r0
 80127c4:	69fb      	ldr	r3, [r7, #28]
 80127c6:	1ad3      	subs	r3, r2, r3
 80127c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80127ca:	429a      	cmp	r2, r3
 80127cc:	d803      	bhi.n	80127d6 <HAL_SPI_TransmitReceive+0x542>
 80127ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80127d4:	d102      	bne.n	80127dc <HAL_SPI_TransmitReceive+0x548>
 80127d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127d8:	2b00      	cmp	r3, #0
 80127da:	d114      	bne.n	8012806 <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80127dc:	68f8      	ldr	r0, [r7, #12]
 80127de:	f000 fa67 	bl	8012cb0 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 80127e2:	68fb      	ldr	r3, [r7, #12]
 80127e4:	2200      	movs	r2, #0
 80127e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80127ea:	68fb      	ldr	r3, [r7, #12]
 80127ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80127f0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80127f4:	68fb      	ldr	r3, [r7, #12]
 80127f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 80127fa:	68fb      	ldr	r3, [r7, #12]
 80127fc:	2201      	movs	r2, #1
 80127fe:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8012802:	2303      	movs	r3, #3
 8012804:	e02e      	b.n	8012864 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8012806:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012808:	2b00      	cmp	r3, #0
 801280a:	f47f af10 	bne.w	801262e <HAL_SPI_TransmitReceive+0x39a>
 801280e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012810:	2b00      	cmp	r3, #0
 8012812:	f47f af0c 	bne.w	801262e <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8012816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012818:	9300      	str	r3, [sp, #0]
 801281a:	69fb      	ldr	r3, [r7, #28]
 801281c:	2200      	movs	r2, #0
 801281e:	2108      	movs	r1, #8
 8012820:	68f8      	ldr	r0, [r7, #12]
 8012822:	f000 fae5 	bl	8012df0 <SPI_WaitOnFlagUntilTimeout>
 8012826:	4603      	mov	r3, r0
 8012828:	2b00      	cmp	r3, #0
 801282a:	d007      	beq.n	801283c <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801282c:	68fb      	ldr	r3, [r7, #12]
 801282e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012832:	f043 0220 	orr.w	r2, r3, #32
 8012836:	68fb      	ldr	r3, [r7, #12]
 8012838:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 801283c:	68f8      	ldr	r0, [r7, #12]
 801283e:	f000 fa37 	bl	8012cb0 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8012842:	68fb      	ldr	r3, [r7, #12]
 8012844:	2200      	movs	r2, #0
 8012846:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 801284a:	68fb      	ldr	r3, [r7, #12]
 801284c:	2201      	movs	r2, #1
 801284e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8012852:	68fb      	ldr	r3, [r7, #12]
 8012854:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012858:	2b00      	cmp	r3, #0
 801285a:	d001      	beq.n	8012860 <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 801285c:	2301      	movs	r3, #1
 801285e:	e001      	b.n	8012864 <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 8012860:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8012864:	4618      	mov	r0, r3
 8012866:	3730      	adds	r7, #48	; 0x30
 8012868:	46bd      	mov	sp, r7
 801286a:	bd80      	pop	{r7, pc}

0801286c <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 801286c:	b580      	push	{r7, lr}
 801286e:	b08a      	sub	sp, #40	; 0x28
 8012870:	af00      	add	r7, sp, #0
 8012872:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	681b      	ldr	r3, [r3, #0]
 8012878:	691b      	ldr	r3, [r3, #16]
 801287a:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	681b      	ldr	r3, [r3, #0]
 8012880:	695b      	ldr	r3, [r3, #20]
 8012882:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8012884:	6a3a      	ldr	r2, [r7, #32]
 8012886:	69fb      	ldr	r3, [r7, #28]
 8012888:	4013      	ands	r3, r2
 801288a:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	681b      	ldr	r3, [r3, #0]
 8012890:	689b      	ldr	r3, [r3, #8]
 8012892:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8012894:	2300      	movs	r3, #0
 8012896:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 801289e:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	681b      	ldr	r3, [r3, #0]
 80128a4:	3330      	adds	r3, #48	; 0x30
 80128a6:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80128a8:	69bb      	ldr	r3, [r7, #24]
 80128aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80128ae:	2b00      	cmp	r3, #0
 80128b0:	d113      	bne.n	80128da <HAL_SPI_IRQHandler+0x6e>
 80128b2:	69bb      	ldr	r3, [r7, #24]
 80128b4:	f003 0320 	and.w	r3, r3, #32
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	d10e      	bne.n	80128da <HAL_SPI_IRQHandler+0x6e>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 80128bc:	69bb      	ldr	r3, [r7, #24]
 80128be:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80128c2:	2b00      	cmp	r3, #0
 80128c4:	d009      	beq.n	80128da <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80128ca:	6878      	ldr	r0, [r7, #4]
 80128cc:	4798      	blx	r3
    hspi->RxISR(hspi);
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80128d2:	6878      	ldr	r0, [r7, #4]
 80128d4:	4798      	blx	r3
    handled = 1UL;
 80128d6:	2301      	movs	r3, #1
 80128d8:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80128da:	69bb      	ldr	r3, [r7, #24]
 80128dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80128e0:	2b00      	cmp	r3, #0
 80128e2:	d10f      	bne.n	8012904 <HAL_SPI_IRQHandler+0x98>
 80128e4:	69bb      	ldr	r3, [r7, #24]
 80128e6:	f003 0301 	and.w	r3, r3, #1
 80128ea:	2b00      	cmp	r3, #0
 80128ec:	d00a      	beq.n	8012904 <HAL_SPI_IRQHandler+0x98>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80128ee:	69bb      	ldr	r3, [r7, #24]
 80128f0:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80128f4:	2b00      	cmp	r3, #0
 80128f6:	d105      	bne.n	8012904 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80128fc:	6878      	ldr	r0, [r7, #4]
 80128fe:	4798      	blx	r3
    handled = 1UL;
 8012900:	2301      	movs	r3, #1
 8012902:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8012904:	69bb      	ldr	r3, [r7, #24]
 8012906:	f003 0320 	and.w	r3, r3, #32
 801290a:	2b00      	cmp	r3, #0
 801290c:	d10f      	bne.n	801292e <HAL_SPI_IRQHandler+0xc2>
 801290e:	69bb      	ldr	r3, [r7, #24]
 8012910:	f003 0302 	and.w	r3, r3, #2
 8012914:	2b00      	cmp	r3, #0
 8012916:	d00a      	beq.n	801292e <HAL_SPI_IRQHandler+0xc2>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8012918:	69bb      	ldr	r3, [r7, #24]
 801291a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 801291e:	2b00      	cmp	r3, #0
 8012920:	d105      	bne.n	801292e <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012926:	6878      	ldr	r0, [r7, #4]
 8012928:	4798      	blx	r3
    handled = 1UL;
 801292a:	2301      	movs	r3, #1
 801292c:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 801292e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012930:	2b00      	cmp	r3, #0
 8012932:	f040 816f 	bne.w	8012c14 <HAL_SPI_IRQHandler+0x3a8>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8012936:	69bb      	ldr	r3, [r7, #24]
 8012938:	f003 0308 	and.w	r3, r3, #8
 801293c:	2b00      	cmp	r3, #0
 801293e:	f000 80a0 	beq.w	8012a82 <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	681b      	ldr	r3, [r3, #0]
 8012946:	699a      	ldr	r2, [r3, #24]
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	681b      	ldr	r3, [r3, #0]
 801294c:	f042 0208 	orr.w	r2, r2, #8
 8012950:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	681b      	ldr	r3, [r3, #0]
 8012956:	699a      	ldr	r2, [r3, #24]
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	681b      	ldr	r3, [r3, #0]
 801295c:	f042 0210 	orr.w	r2, r2, #16
 8012960:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	681b      	ldr	r3, [r3, #0]
 8012966:	699a      	ldr	r2, [r3, #24]
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	681b      	ldr	r3, [r3, #0]
 801296c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8012970:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	681b      	ldr	r3, [r3, #0]
 8012976:	691a      	ldr	r2, [r3, #16]
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	681b      	ldr	r3, [r3, #0]
 801297c:	f022 0208 	bic.w	r2, r2, #8
 8012980:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||
 8012982:	697b      	ldr	r3, [r7, #20]
 8012984:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8012988:	2b00      	cmp	r3, #0
 801298a:	d00f      	beq.n	80129ac <HAL_SPI_IRQHandler+0x140>
 801298c:	7cfb      	ldrb	r3, [r7, #19]
 801298e:	2b04      	cmp	r3, #4
 8012990:	d004      	beq.n	801299c <HAL_SPI_IRQHandler+0x130>
        ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012996:	69db      	ldr	r3, [r3, #28]
 8012998:	2b00      	cmp	r3, #0
 801299a:	d007      	beq.n	80129ac <HAL_SPI_IRQHandler+0x140>
 801299c:	7cfb      	ldrb	r3, [r7, #19]
 801299e:	2b03      	cmp	r3, #3
 80129a0:	d059      	beq.n	8012a56 <HAL_SPI_IRQHandler+0x1ea>
        ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80129a6:	69db      	ldr	r3, [r3, #28]
 80129a8:	2b00      	cmp	r3, #0
 80129aa:	d154      	bne.n	8012a56 <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	681b      	ldr	r3, [r3, #0]
 80129b0:	689b      	ldr	r3, [r3, #8]
 80129b2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80129b6:	2b00      	cmp	r3, #0
 80129b8:	d13d      	bne.n	8012a36 <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 80129ba:	e036      	b.n	8012a2a <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	68db      	ldr	r3, [r3, #12]
 80129c0:	2b0f      	cmp	r3, #15
 80129c2:	d90b      	bls.n	80129dc <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	681a      	ldr	r2, [r3, #0]
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80129cc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80129ce:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80129d4:	1d1a      	adds	r2, r3, #4
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	665a      	str	r2, [r3, #100]	; 0x64
 80129da:	e01d      	b.n	8012a18 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	68db      	ldr	r3, [r3, #12]
 80129e0:	2b07      	cmp	r3, #7
 80129e2:	d90b      	bls.n	80129fc <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80129e8:	68fa      	ldr	r2, [r7, #12]
 80129ea:	8812      	ldrh	r2, [r2, #0]
 80129ec:	b292      	uxth	r2, r2
 80129ee:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80129f4:	1c9a      	adds	r2, r3, #2
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	665a      	str	r2, [r3, #100]	; 0x64
 80129fa:	e00d      	b.n	8012a18 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	681b      	ldr	r3, [r3, #0]
 8012a00:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012a08:	7812      	ldrb	r2, [r2, #0]
 8012a0a:	b2d2      	uxtb	r2, r2
 8012a0c:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012a12:	1c5a      	adds	r2, r3, #1
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8012a1e:	b29b      	uxth	r3, r3
 8012a20:	3b01      	subs	r3, #1
 8012a22:	b29a      	uxth	r2, r3
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8012a30:	b29b      	uxth	r3, r3
 8012a32:	2b00      	cmp	r3, #0
 8012a34:	d1c2      	bne.n	80129bc <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 8012a36:	6878      	ldr	r0, [r7, #4]
 8012a38:	f000 f93a 	bl	8012cb0 <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	2201      	movs	r2, #1
 8012a40:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012a4a:	2b00      	cmp	r3, #0
 8012a4c:	d003      	beq.n	8012a56 <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8012a4e:	6878      	ldr	r0, [r7, #4]
 8012a50:	f000 f90a 	bl	8012c68 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 8012a54:	e0e3      	b.n	8012c1e <HAL_SPI_IRQHandler+0x3b2>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8012a56:	7cfb      	ldrb	r3, [r7, #19]
 8012a58:	2b05      	cmp	r3, #5
 8012a5a:	d103      	bne.n	8012a64 <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8012a5c:	6878      	ldr	r0, [r7, #4]
 8012a5e:	f000 f8f9 	bl	8012c54 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8012a62:	e0d9      	b.n	8012c18 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8012a64:	7cfb      	ldrb	r3, [r7, #19]
 8012a66:	2b04      	cmp	r3, #4
 8012a68:	d103      	bne.n	8012a72 <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 8012a6a:	6878      	ldr	r0, [r7, #4]
 8012a6c:	f000 f8e8 	bl	8012c40 <HAL_SPI_RxCpltCallback>
    return;
 8012a70:	e0d2      	b.n	8012c18 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8012a72:	7cfb      	ldrb	r3, [r7, #19]
 8012a74:	2b03      	cmp	r3, #3
 8012a76:	f040 80cf 	bne.w	8012c18 <HAL_SPI_IRQHandler+0x3ac>
      HAL_SPI_TxCpltCallback(hspi);
 8012a7a:	6878      	ldr	r0, [r7, #4]
 8012a7c:	f000 f8d6 	bl	8012c2c <HAL_SPI_TxCpltCallback>
    return;
 8012a80:	e0ca      	b.n	8012c18 <HAL_SPI_IRQHandler+0x3ac>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8012a82:	69fb      	ldr	r3, [r7, #28]
 8012a84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	d00d      	beq.n	8012aa8 <HAL_SPI_IRQHandler+0x23c>
 8012a8c:	6a3b      	ldr	r3, [r7, #32]
 8012a8e:	f003 0308 	and.w	r3, r3, #8
 8012a92:	2b00      	cmp	r3, #0
 8012a94:	d008      	beq.n	8012aa8 <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	681b      	ldr	r3, [r3, #0]
 8012a9a:	699a      	ldr	r2, [r3, #24]
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	681b      	ldr	r3, [r3, #0]
 8012aa0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8012aa4:	619a      	str	r2, [r3, #24]

    return;
 8012aa6:	e0ba      	b.n	8012c1e <HAL_SPI_IRQHandler+0x3b2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8012aa8:	69bb      	ldr	r3, [r7, #24]
 8012aaa:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8012aae:	2b00      	cmp	r3, #0
 8012ab0:	f000 80b5 	beq.w	8012c1e <HAL_SPI_IRQHandler+0x3b2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8012ab4:	69bb      	ldr	r3, [r7, #24]
 8012ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012aba:	2b00      	cmp	r3, #0
 8012abc:	d00f      	beq.n	8012ade <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012ac4:	f043 0204 	orr.w	r2, r3, #4
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	681b      	ldr	r3, [r3, #0]
 8012ad2:	699a      	ldr	r2, [r3, #24]
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	681b      	ldr	r3, [r3, #0]
 8012ad8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012adc:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8012ade:	69bb      	ldr	r3, [r7, #24]
 8012ae0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012ae4:	2b00      	cmp	r3, #0
 8012ae6:	d00f      	beq.n	8012b08 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012aee:	f043 0201 	orr.w	r2, r3, #1
 8012af2:	687b      	ldr	r3, [r7, #4]
 8012af4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	681b      	ldr	r3, [r3, #0]
 8012afc:	699a      	ldr	r2, [r3, #24]
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	681b      	ldr	r3, [r3, #0]
 8012b02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012b06:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8012b08:	69bb      	ldr	r3, [r7, #24]
 8012b0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012b0e:	2b00      	cmp	r3, #0
 8012b10:	d00f      	beq.n	8012b32 <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012b18:	f043 0208 	orr.w	r2, r3, #8
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	681b      	ldr	r3, [r3, #0]
 8012b26:	699a      	ldr	r2, [r3, #24]
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	681b      	ldr	r3, [r3, #0]
 8012b2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8012b30:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8012b32:	69bb      	ldr	r3, [r7, #24]
 8012b34:	f003 0320 	and.w	r3, r3, #32
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	d00f      	beq.n	8012b5c <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012b42:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	681b      	ldr	r3, [r3, #0]
 8012b50:	699a      	ldr	r2, [r3, #24]
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	681b      	ldr	r3, [r3, #0]
 8012b56:	f042 0220 	orr.w	r2, r2, #32
 8012b5a:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012b62:	2b00      	cmp	r3, #0
 8012b64:	d05a      	beq.n	8012c1c <HAL_SPI_IRQHandler+0x3b0>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	681b      	ldr	r3, [r3, #0]
 8012b6a:	681a      	ldr	r2, [r3, #0]
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	681b      	ldr	r3, [r3, #0]
 8012b70:	f022 0201 	bic.w	r2, r2, #1
 8012b74:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	681b      	ldr	r3, [r3, #0]
 8012b7a:	6919      	ldr	r1, [r3, #16]
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	681a      	ldr	r2, [r3, #0]
 8012b80:	4b28      	ldr	r3, [pc, #160]	; (8012c24 <HAL_SPI_IRQHandler+0x3b8>)
 8012b82:	400b      	ands	r3, r1
 8012b84:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8012b86:	697b      	ldr	r3, [r7, #20]
 8012b88:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8012b8c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8012b90:	d138      	bne.n	8012c04 <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	681b      	ldr	r3, [r3, #0]
 8012b96:	689a      	ldr	r2, [r3, #8]
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	681b      	ldr	r3, [r3, #0]
 8012b9c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8012ba0:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012ba6:	2b00      	cmp	r3, #0
 8012ba8:	d013      	beq.n	8012bd2 <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012bae:	4a1e      	ldr	r2, [pc, #120]	; (8012c28 <HAL_SPI_IRQHandler+0x3bc>)
 8012bb0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012bb6:	4618      	mov	r0, r3
 8012bb8:	f7f8 fc16 	bl	800b3e8 <HAL_DMA_Abort_IT>
 8012bbc:	4603      	mov	r3, r0
 8012bbe:	2b00      	cmp	r3, #0
 8012bc0:	d007      	beq.n	8012bd2 <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012bc8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012bd6:	2b00      	cmp	r3, #0
 8012bd8:	d020      	beq.n	8012c1c <HAL_SPI_IRQHandler+0x3b0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012bde:	4a12      	ldr	r2, [pc, #72]	; (8012c28 <HAL_SPI_IRQHandler+0x3bc>)
 8012be0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012be6:	4618      	mov	r0, r3
 8012be8:	f7f8 fbfe 	bl	800b3e8 <HAL_DMA_Abort_IT>
 8012bec:	4603      	mov	r3, r0
 8012bee:	2b00      	cmp	r3, #0
 8012bf0:	d014      	beq.n	8012c1c <HAL_SPI_IRQHandler+0x3b0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012bf8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8012c02:	e00b      	b.n	8012c1c <HAL_SPI_IRQHandler+0x3b0>
        hspi->State = HAL_SPI_STATE_READY;
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	2201      	movs	r2, #1
 8012c08:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8012c0c:	6878      	ldr	r0, [r7, #4]
 8012c0e:	f000 f82b 	bl	8012c68 <HAL_SPI_ErrorCallback>
    return;
 8012c12:	e003      	b.n	8012c1c <HAL_SPI_IRQHandler+0x3b0>
    return;
 8012c14:	bf00      	nop
 8012c16:	e002      	b.n	8012c1e <HAL_SPI_IRQHandler+0x3b2>
    return;
 8012c18:	bf00      	nop
 8012c1a:	e000      	b.n	8012c1e <HAL_SPI_IRQHandler+0x3b2>
    return;
 8012c1c:	bf00      	nop
  }
}
 8012c1e:	3728      	adds	r7, #40	; 0x28
 8012c20:	46bd      	mov	sp, r7
 8012c22:	bd80      	pop	{r7, pc}
 8012c24:	fffffc94 	.word	0xfffffc94
 8012c28:	08012c7d 	.word	0x08012c7d

08012c2c <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8012c2c:	b480      	push	{r7}
 8012c2e:	b083      	sub	sp, #12
 8012c30:	af00      	add	r7, sp, #0
 8012c32:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8012c34:	bf00      	nop
 8012c36:	370c      	adds	r7, #12
 8012c38:	46bd      	mov	sp, r7
 8012c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c3e:	4770      	bx	lr

08012c40 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8012c40:	b480      	push	{r7}
 8012c42:	b083      	sub	sp, #12
 8012c44:	af00      	add	r7, sp, #0
 8012c46:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8012c48:	bf00      	nop
 8012c4a:	370c      	adds	r7, #12
 8012c4c:	46bd      	mov	sp, r7
 8012c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c52:	4770      	bx	lr

08012c54 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8012c54:	b480      	push	{r7}
 8012c56:	b083      	sub	sp, #12
 8012c58:	af00      	add	r7, sp, #0
 8012c5a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8012c5c:	bf00      	nop
 8012c5e:	370c      	adds	r7, #12
 8012c60:	46bd      	mov	sp, r7
 8012c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c66:	4770      	bx	lr

08012c68 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8012c68:	b480      	push	{r7}
 8012c6a:	b083      	sub	sp, #12
 8012c6c:	af00      	add	r7, sp, #0
 8012c6e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8012c70:	bf00      	nop
 8012c72:	370c      	adds	r7, #12
 8012c74:	46bd      	mov	sp, r7
 8012c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c7a:	4770      	bx	lr

08012c7c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8012c7c:	b580      	push	{r7, lr}
 8012c7e:	b084      	sub	sp, #16
 8012c80:	af00      	add	r7, sp, #0
 8012c82:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012c88:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8012c8a:	68fb      	ldr	r3, [r7, #12]
 8012c8c:	2200      	movs	r2, #0
 8012c8e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8012c92:	68fb      	ldr	r3, [r7, #12]
 8012c94:	2200      	movs	r2, #0
 8012c96:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8012c9a:	68fb      	ldr	r3, [r7, #12]
 8012c9c:	2201      	movs	r2, #1
 8012c9e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8012ca2:	68f8      	ldr	r0, [r7, #12]
 8012ca4:	f7ff ffe0 	bl	8012c68 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8012ca8:	bf00      	nop
 8012caa:	3710      	adds	r7, #16
 8012cac:	46bd      	mov	sp, r7
 8012cae:	bd80      	pop	{r7, pc}

08012cb0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8012cb0:	b480      	push	{r7}
 8012cb2:	b085      	sub	sp, #20
 8012cb4:	af00      	add	r7, sp, #0
 8012cb6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	681b      	ldr	r3, [r3, #0]
 8012cbc:	695b      	ldr	r3, [r3, #20]
 8012cbe:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	681b      	ldr	r3, [r3, #0]
 8012cc4:	699a      	ldr	r2, [r3, #24]
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	681b      	ldr	r3, [r3, #0]
 8012cca:	f042 0208 	orr.w	r2, r2, #8
 8012cce:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	681b      	ldr	r3, [r3, #0]
 8012cd4:	699a      	ldr	r2, [r3, #24]
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	681b      	ldr	r3, [r3, #0]
 8012cda:	f042 0210 	orr.w	r2, r2, #16
 8012cde:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	681b      	ldr	r3, [r3, #0]
 8012ce4:	681a      	ldr	r2, [r3, #0]
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	681b      	ldr	r3, [r3, #0]
 8012cea:	f022 0201 	bic.w	r2, r2, #1
 8012cee:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	681b      	ldr	r3, [r3, #0]
 8012cf4:	6919      	ldr	r1, [r3, #16]
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	681a      	ldr	r2, [r3, #0]
 8012cfa:	4b3c      	ldr	r3, [pc, #240]	; (8012dec <SPI_CloseTransfer+0x13c>)
 8012cfc:	400b      	ands	r3, r1
 8012cfe:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	681b      	ldr	r3, [r3, #0]
 8012d04:	689a      	ldr	r2, [r3, #8]
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	681b      	ldr	r3, [r3, #0]
 8012d0a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8012d0e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8012d16:	b2db      	uxtb	r3, r3
 8012d18:	2b04      	cmp	r3, #4
 8012d1a:	d014      	beq.n	8012d46 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8012d1c:	68fb      	ldr	r3, [r7, #12]
 8012d1e:	f003 0320 	and.w	r3, r3, #32
 8012d22:	2b00      	cmp	r3, #0
 8012d24:	d00f      	beq.n	8012d46 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012d2c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8012d30:	687b      	ldr	r3, [r7, #4]
 8012d32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	681b      	ldr	r3, [r3, #0]
 8012d3a:	699a      	ldr	r2, [r3, #24]
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	681b      	ldr	r3, [r3, #0]
 8012d40:	f042 0220 	orr.w	r2, r2, #32
 8012d44:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8012d4c:	b2db      	uxtb	r3, r3
 8012d4e:	2b03      	cmp	r3, #3
 8012d50:	d014      	beq.n	8012d7c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8012d52:	68fb      	ldr	r3, [r7, #12]
 8012d54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012d58:	2b00      	cmp	r3, #0
 8012d5a:	d00f      	beq.n	8012d7c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012d62:	f043 0204 	orr.w	r2, r3, #4
 8012d66:	687b      	ldr	r3, [r7, #4]
 8012d68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	681b      	ldr	r3, [r3, #0]
 8012d70:	699a      	ldr	r2, [r3, #24]
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	681b      	ldr	r3, [r3, #0]
 8012d76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012d7a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8012d7c:	68fb      	ldr	r3, [r7, #12]
 8012d7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012d82:	2b00      	cmp	r3, #0
 8012d84:	d00f      	beq.n	8012da6 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8012d86:	687b      	ldr	r3, [r7, #4]
 8012d88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012d8c:	f043 0201 	orr.w	r2, r3, #1
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	681b      	ldr	r3, [r3, #0]
 8012d9a:	699a      	ldr	r2, [r3, #24]
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	681b      	ldr	r3, [r3, #0]
 8012da0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012da4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8012da6:	68fb      	ldr	r3, [r7, #12]
 8012da8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012dac:	2b00      	cmp	r3, #0
 8012dae:	d00f      	beq.n	8012dd0 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012db6:	f043 0208 	orr.w	r2, r3, #8
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	681b      	ldr	r3, [r3, #0]
 8012dc4:	699a      	ldr	r2, [r3, #24]
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	681b      	ldr	r3, [r3, #0]
 8012dca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8012dce:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	2200      	movs	r2, #0
 8012dd4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	2200      	movs	r2, #0
 8012ddc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8012de0:	bf00      	nop
 8012de2:	3714      	adds	r7, #20
 8012de4:	46bd      	mov	sp, r7
 8012de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dea:	4770      	bx	lr
 8012dec:	fffffc90 	.word	0xfffffc90

08012df0 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8012df0:	b580      	push	{r7, lr}
 8012df2:	b084      	sub	sp, #16
 8012df4:	af00      	add	r7, sp, #0
 8012df6:	60f8      	str	r0, [r7, #12]
 8012df8:	60b9      	str	r1, [r7, #8]
 8012dfa:	603b      	str	r3, [r7, #0]
 8012dfc:	4613      	mov	r3, r2
 8012dfe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8012e00:	e010      	b.n	8012e24 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8012e02:	f7f7 f817 	bl	8009e34 <HAL_GetTick>
 8012e06:	4602      	mov	r2, r0
 8012e08:	683b      	ldr	r3, [r7, #0]
 8012e0a:	1ad3      	subs	r3, r2, r3
 8012e0c:	69ba      	ldr	r2, [r7, #24]
 8012e0e:	429a      	cmp	r2, r3
 8012e10:	d803      	bhi.n	8012e1a <SPI_WaitOnFlagUntilTimeout+0x2a>
 8012e12:	69bb      	ldr	r3, [r7, #24]
 8012e14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012e18:	d102      	bne.n	8012e20 <SPI_WaitOnFlagUntilTimeout+0x30>
 8012e1a:	69bb      	ldr	r3, [r7, #24]
 8012e1c:	2b00      	cmp	r3, #0
 8012e1e:	d101      	bne.n	8012e24 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8012e20:	2303      	movs	r3, #3
 8012e22:	e00f      	b.n	8012e44 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8012e24:	68fb      	ldr	r3, [r7, #12]
 8012e26:	681b      	ldr	r3, [r3, #0]
 8012e28:	695a      	ldr	r2, [r3, #20]
 8012e2a:	68bb      	ldr	r3, [r7, #8]
 8012e2c:	4013      	ands	r3, r2
 8012e2e:	68ba      	ldr	r2, [r7, #8]
 8012e30:	429a      	cmp	r2, r3
 8012e32:	bf0c      	ite	eq
 8012e34:	2301      	moveq	r3, #1
 8012e36:	2300      	movne	r3, #0
 8012e38:	b2db      	uxtb	r3, r3
 8012e3a:	461a      	mov	r2, r3
 8012e3c:	79fb      	ldrb	r3, [r7, #7]
 8012e3e:	429a      	cmp	r2, r3
 8012e40:	d0df      	beq.n	8012e02 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8012e42:	2300      	movs	r3, #0
}
 8012e44:	4618      	mov	r0, r3
 8012e46:	3710      	adds	r7, #16
 8012e48:	46bd      	mov	sp, r7
 8012e4a:	bd80      	pop	{r7, pc}

08012e4c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8012e4c:	b480      	push	{r7}
 8012e4e:	b085      	sub	sp, #20
 8012e50:	af00      	add	r7, sp, #0
 8012e52:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8012e54:	687b      	ldr	r3, [r7, #4]
 8012e56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012e58:	095b      	lsrs	r3, r3, #5
 8012e5a:	3301      	adds	r3, #1
 8012e5c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	68db      	ldr	r3, [r3, #12]
 8012e62:	3301      	adds	r3, #1
 8012e64:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8012e66:	68bb      	ldr	r3, [r7, #8]
 8012e68:	3307      	adds	r3, #7
 8012e6a:	08db      	lsrs	r3, r3, #3
 8012e6c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8012e6e:	68bb      	ldr	r3, [r7, #8]
 8012e70:	68fa      	ldr	r2, [r7, #12]
 8012e72:	fb02 f303 	mul.w	r3, r2, r3
}
 8012e76:	4618      	mov	r0, r3
 8012e78:	3714      	adds	r7, #20
 8012e7a:	46bd      	mov	sp, r7
 8012e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e80:	4770      	bx	lr

08012e82 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8012e82:	b580      	push	{r7, lr}
 8012e84:	b082      	sub	sp, #8
 8012e86:	af00      	add	r7, sp, #0
 8012e88:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	2b00      	cmp	r3, #0
 8012e8e:	d101      	bne.n	8012e94 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8012e90:	2301      	movs	r3, #1
 8012e92:	e049      	b.n	8012f28 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012e9a:	b2db      	uxtb	r3, r3
 8012e9c:	2b00      	cmp	r3, #0
 8012e9e:	d106      	bne.n	8012eae <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	2200      	movs	r2, #0
 8012ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8012ea8:	6878      	ldr	r0, [r7, #4]
 8012eaa:	f7f6 fb79 	bl	80095a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	2202      	movs	r2, #2
 8012eb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012eb6:	687b      	ldr	r3, [r7, #4]
 8012eb8:	681a      	ldr	r2, [r3, #0]
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	3304      	adds	r3, #4
 8012ebe:	4619      	mov	r1, r3
 8012ec0:	4610      	mov	r0, r2
 8012ec2:	f000 faed 	bl	80134a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	2201      	movs	r2, #1
 8012eca:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012ece:	687b      	ldr	r3, [r7, #4]
 8012ed0:	2201      	movs	r2, #1
 8012ed2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	2201      	movs	r2, #1
 8012eda:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8012ede:	687b      	ldr	r3, [r7, #4]
 8012ee0:	2201      	movs	r2, #1
 8012ee2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	2201      	movs	r2, #1
 8012eea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	2201      	movs	r2, #1
 8012ef2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8012ef6:	687b      	ldr	r3, [r7, #4]
 8012ef8:	2201      	movs	r2, #1
 8012efa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	2201      	movs	r2, #1
 8012f02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	2201      	movs	r2, #1
 8012f0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	2201      	movs	r2, #1
 8012f12:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	2201      	movs	r2, #1
 8012f1a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	2201      	movs	r2, #1
 8012f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8012f26:	2300      	movs	r3, #0
}
 8012f28:	4618      	mov	r0, r3
 8012f2a:	3708      	adds	r7, #8
 8012f2c:	46bd      	mov	sp, r7
 8012f2e:	bd80      	pop	{r7, pc}

08012f30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8012f30:	b480      	push	{r7}
 8012f32:	b085      	sub	sp, #20
 8012f34:	af00      	add	r7, sp, #0
 8012f36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012f3e:	b2db      	uxtb	r3, r3
 8012f40:	2b01      	cmp	r3, #1
 8012f42:	d001      	beq.n	8012f48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8012f44:	2301      	movs	r3, #1
 8012f46:	e054      	b.n	8012ff2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	2202      	movs	r2, #2
 8012f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	681b      	ldr	r3, [r3, #0]
 8012f54:	68da      	ldr	r2, [r3, #12]
 8012f56:	687b      	ldr	r3, [r7, #4]
 8012f58:	681b      	ldr	r3, [r3, #0]
 8012f5a:	f042 0201 	orr.w	r2, r2, #1
 8012f5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	681b      	ldr	r3, [r3, #0]
 8012f64:	4a26      	ldr	r2, [pc, #152]	; (8013000 <HAL_TIM_Base_Start_IT+0xd0>)
 8012f66:	4293      	cmp	r3, r2
 8012f68:	d022      	beq.n	8012fb0 <HAL_TIM_Base_Start_IT+0x80>
 8012f6a:	687b      	ldr	r3, [r7, #4]
 8012f6c:	681b      	ldr	r3, [r3, #0]
 8012f6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012f72:	d01d      	beq.n	8012fb0 <HAL_TIM_Base_Start_IT+0x80>
 8012f74:	687b      	ldr	r3, [r7, #4]
 8012f76:	681b      	ldr	r3, [r3, #0]
 8012f78:	4a22      	ldr	r2, [pc, #136]	; (8013004 <HAL_TIM_Base_Start_IT+0xd4>)
 8012f7a:	4293      	cmp	r3, r2
 8012f7c:	d018      	beq.n	8012fb0 <HAL_TIM_Base_Start_IT+0x80>
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	681b      	ldr	r3, [r3, #0]
 8012f82:	4a21      	ldr	r2, [pc, #132]	; (8013008 <HAL_TIM_Base_Start_IT+0xd8>)
 8012f84:	4293      	cmp	r3, r2
 8012f86:	d013      	beq.n	8012fb0 <HAL_TIM_Base_Start_IT+0x80>
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	681b      	ldr	r3, [r3, #0]
 8012f8c:	4a1f      	ldr	r2, [pc, #124]	; (801300c <HAL_TIM_Base_Start_IT+0xdc>)
 8012f8e:	4293      	cmp	r3, r2
 8012f90:	d00e      	beq.n	8012fb0 <HAL_TIM_Base_Start_IT+0x80>
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	681b      	ldr	r3, [r3, #0]
 8012f96:	4a1e      	ldr	r2, [pc, #120]	; (8013010 <HAL_TIM_Base_Start_IT+0xe0>)
 8012f98:	4293      	cmp	r3, r2
 8012f9a:	d009      	beq.n	8012fb0 <HAL_TIM_Base_Start_IT+0x80>
 8012f9c:	687b      	ldr	r3, [r7, #4]
 8012f9e:	681b      	ldr	r3, [r3, #0]
 8012fa0:	4a1c      	ldr	r2, [pc, #112]	; (8013014 <HAL_TIM_Base_Start_IT+0xe4>)
 8012fa2:	4293      	cmp	r3, r2
 8012fa4:	d004      	beq.n	8012fb0 <HAL_TIM_Base_Start_IT+0x80>
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	681b      	ldr	r3, [r3, #0]
 8012faa:	4a1b      	ldr	r2, [pc, #108]	; (8013018 <HAL_TIM_Base_Start_IT+0xe8>)
 8012fac:	4293      	cmp	r3, r2
 8012fae:	d115      	bne.n	8012fdc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	681b      	ldr	r3, [r3, #0]
 8012fb4:	689a      	ldr	r2, [r3, #8]
 8012fb6:	4b19      	ldr	r3, [pc, #100]	; (801301c <HAL_TIM_Base_Start_IT+0xec>)
 8012fb8:	4013      	ands	r3, r2
 8012fba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012fbc:	68fb      	ldr	r3, [r7, #12]
 8012fbe:	2b06      	cmp	r3, #6
 8012fc0:	d015      	beq.n	8012fee <HAL_TIM_Base_Start_IT+0xbe>
 8012fc2:	68fb      	ldr	r3, [r7, #12]
 8012fc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012fc8:	d011      	beq.n	8012fee <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	681b      	ldr	r3, [r3, #0]
 8012fce:	681a      	ldr	r2, [r3, #0]
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	681b      	ldr	r3, [r3, #0]
 8012fd4:	f042 0201 	orr.w	r2, r2, #1
 8012fd8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012fda:	e008      	b.n	8012fee <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	681b      	ldr	r3, [r3, #0]
 8012fe0:	681a      	ldr	r2, [r3, #0]
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	681b      	ldr	r3, [r3, #0]
 8012fe6:	f042 0201 	orr.w	r2, r2, #1
 8012fea:	601a      	str	r2, [r3, #0]
 8012fec:	e000      	b.n	8012ff0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012fee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8012ff0:	2300      	movs	r3, #0
}
 8012ff2:	4618      	mov	r0, r3
 8012ff4:	3714      	adds	r7, #20
 8012ff6:	46bd      	mov	sp, r7
 8012ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ffc:	4770      	bx	lr
 8012ffe:	bf00      	nop
 8013000:	40010000 	.word	0x40010000
 8013004:	40000400 	.word	0x40000400
 8013008:	40000800 	.word	0x40000800
 801300c:	40000c00 	.word	0x40000c00
 8013010:	40010400 	.word	0x40010400
 8013014:	40001800 	.word	0x40001800
 8013018:	40014000 	.word	0x40014000
 801301c:	00010007 	.word	0x00010007

08013020 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8013020:	b580      	push	{r7, lr}
 8013022:	b082      	sub	sp, #8
 8013024:	af00      	add	r7, sp, #0
 8013026:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	681b      	ldr	r3, [r3, #0]
 801302c:	691b      	ldr	r3, [r3, #16]
 801302e:	f003 0302 	and.w	r3, r3, #2
 8013032:	2b02      	cmp	r3, #2
 8013034:	d122      	bne.n	801307c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8013036:	687b      	ldr	r3, [r7, #4]
 8013038:	681b      	ldr	r3, [r3, #0]
 801303a:	68db      	ldr	r3, [r3, #12]
 801303c:	f003 0302 	and.w	r3, r3, #2
 8013040:	2b02      	cmp	r3, #2
 8013042:	d11b      	bne.n	801307c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8013044:	687b      	ldr	r3, [r7, #4]
 8013046:	681b      	ldr	r3, [r3, #0]
 8013048:	f06f 0202 	mvn.w	r2, #2
 801304c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	2201      	movs	r2, #1
 8013052:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	681b      	ldr	r3, [r3, #0]
 8013058:	699b      	ldr	r3, [r3, #24]
 801305a:	f003 0303 	and.w	r3, r3, #3
 801305e:	2b00      	cmp	r3, #0
 8013060:	d003      	beq.n	801306a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8013062:	6878      	ldr	r0, [r7, #4]
 8013064:	f000 f9fe 	bl	8013464 <HAL_TIM_IC_CaptureCallback>
 8013068:	e005      	b.n	8013076 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801306a:	6878      	ldr	r0, [r7, #4]
 801306c:	f000 f9f0 	bl	8013450 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8013070:	6878      	ldr	r0, [r7, #4]
 8013072:	f000 fa01 	bl	8013478 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	2200      	movs	r2, #0
 801307a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801307c:	687b      	ldr	r3, [r7, #4]
 801307e:	681b      	ldr	r3, [r3, #0]
 8013080:	691b      	ldr	r3, [r3, #16]
 8013082:	f003 0304 	and.w	r3, r3, #4
 8013086:	2b04      	cmp	r3, #4
 8013088:	d122      	bne.n	80130d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801308a:	687b      	ldr	r3, [r7, #4]
 801308c:	681b      	ldr	r3, [r3, #0]
 801308e:	68db      	ldr	r3, [r3, #12]
 8013090:	f003 0304 	and.w	r3, r3, #4
 8013094:	2b04      	cmp	r3, #4
 8013096:	d11b      	bne.n	80130d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	681b      	ldr	r3, [r3, #0]
 801309c:	f06f 0204 	mvn.w	r2, #4
 80130a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	2202      	movs	r2, #2
 80130a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	681b      	ldr	r3, [r3, #0]
 80130ac:	699b      	ldr	r3, [r3, #24]
 80130ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80130b2:	2b00      	cmp	r3, #0
 80130b4:	d003      	beq.n	80130be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80130b6:	6878      	ldr	r0, [r7, #4]
 80130b8:	f000 f9d4 	bl	8013464 <HAL_TIM_IC_CaptureCallback>
 80130bc:	e005      	b.n	80130ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80130be:	6878      	ldr	r0, [r7, #4]
 80130c0:	f000 f9c6 	bl	8013450 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80130c4:	6878      	ldr	r0, [r7, #4]
 80130c6:	f000 f9d7 	bl	8013478 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	2200      	movs	r2, #0
 80130ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80130d0:	687b      	ldr	r3, [r7, #4]
 80130d2:	681b      	ldr	r3, [r3, #0]
 80130d4:	691b      	ldr	r3, [r3, #16]
 80130d6:	f003 0308 	and.w	r3, r3, #8
 80130da:	2b08      	cmp	r3, #8
 80130dc:	d122      	bne.n	8013124 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80130de:	687b      	ldr	r3, [r7, #4]
 80130e0:	681b      	ldr	r3, [r3, #0]
 80130e2:	68db      	ldr	r3, [r3, #12]
 80130e4:	f003 0308 	and.w	r3, r3, #8
 80130e8:	2b08      	cmp	r3, #8
 80130ea:	d11b      	bne.n	8013124 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	681b      	ldr	r3, [r3, #0]
 80130f0:	f06f 0208 	mvn.w	r2, #8
 80130f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80130f6:	687b      	ldr	r3, [r7, #4]
 80130f8:	2204      	movs	r2, #4
 80130fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80130fc:	687b      	ldr	r3, [r7, #4]
 80130fe:	681b      	ldr	r3, [r3, #0]
 8013100:	69db      	ldr	r3, [r3, #28]
 8013102:	f003 0303 	and.w	r3, r3, #3
 8013106:	2b00      	cmp	r3, #0
 8013108:	d003      	beq.n	8013112 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801310a:	6878      	ldr	r0, [r7, #4]
 801310c:	f000 f9aa 	bl	8013464 <HAL_TIM_IC_CaptureCallback>
 8013110:	e005      	b.n	801311e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8013112:	6878      	ldr	r0, [r7, #4]
 8013114:	f000 f99c 	bl	8013450 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8013118:	6878      	ldr	r0, [r7, #4]
 801311a:	f000 f9ad 	bl	8013478 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	2200      	movs	r2, #0
 8013122:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8013124:	687b      	ldr	r3, [r7, #4]
 8013126:	681b      	ldr	r3, [r3, #0]
 8013128:	691b      	ldr	r3, [r3, #16]
 801312a:	f003 0310 	and.w	r3, r3, #16
 801312e:	2b10      	cmp	r3, #16
 8013130:	d122      	bne.n	8013178 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	681b      	ldr	r3, [r3, #0]
 8013136:	68db      	ldr	r3, [r3, #12]
 8013138:	f003 0310 	and.w	r3, r3, #16
 801313c:	2b10      	cmp	r3, #16
 801313e:	d11b      	bne.n	8013178 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	681b      	ldr	r3, [r3, #0]
 8013144:	f06f 0210 	mvn.w	r2, #16
 8013148:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	2208      	movs	r2, #8
 801314e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8013150:	687b      	ldr	r3, [r7, #4]
 8013152:	681b      	ldr	r3, [r3, #0]
 8013154:	69db      	ldr	r3, [r3, #28]
 8013156:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801315a:	2b00      	cmp	r3, #0
 801315c:	d003      	beq.n	8013166 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801315e:	6878      	ldr	r0, [r7, #4]
 8013160:	f000 f980 	bl	8013464 <HAL_TIM_IC_CaptureCallback>
 8013164:	e005      	b.n	8013172 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8013166:	6878      	ldr	r0, [r7, #4]
 8013168:	f000 f972 	bl	8013450 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801316c:	6878      	ldr	r0, [r7, #4]
 801316e:	f000 f983 	bl	8013478 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013172:	687b      	ldr	r3, [r7, #4]
 8013174:	2200      	movs	r2, #0
 8013176:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	681b      	ldr	r3, [r3, #0]
 801317c:	691b      	ldr	r3, [r3, #16]
 801317e:	f003 0301 	and.w	r3, r3, #1
 8013182:	2b01      	cmp	r3, #1
 8013184:	d10e      	bne.n	80131a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8013186:	687b      	ldr	r3, [r7, #4]
 8013188:	681b      	ldr	r3, [r3, #0]
 801318a:	68db      	ldr	r3, [r3, #12]
 801318c:	f003 0301 	and.w	r3, r3, #1
 8013190:	2b01      	cmp	r3, #1
 8013192:	d107      	bne.n	80131a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	681b      	ldr	r3, [r3, #0]
 8013198:	f06f 0201 	mvn.w	r2, #1
 801319c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801319e:	6878      	ldr	r0, [r7, #4]
 80131a0:	f7f5 fd92 	bl	8008cc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80131a4:	687b      	ldr	r3, [r7, #4]
 80131a6:	681b      	ldr	r3, [r3, #0]
 80131a8:	691b      	ldr	r3, [r3, #16]
 80131aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80131ae:	2b80      	cmp	r3, #128	; 0x80
 80131b0:	d10e      	bne.n	80131d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	681b      	ldr	r3, [r3, #0]
 80131b6:	68db      	ldr	r3, [r3, #12]
 80131b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80131bc:	2b80      	cmp	r3, #128	; 0x80
 80131be:	d107      	bne.n	80131d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	681b      	ldr	r3, [r3, #0]
 80131c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80131c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80131ca:	6878      	ldr	r0, [r7, #4]
 80131cc:	f000 fb38 	bl	8013840 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	681b      	ldr	r3, [r3, #0]
 80131d4:	691b      	ldr	r3, [r3, #16]
 80131d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80131da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80131de:	d10e      	bne.n	80131fe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	681b      	ldr	r3, [r3, #0]
 80131e4:	68db      	ldr	r3, [r3, #12]
 80131e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80131ea:	2b80      	cmp	r3, #128	; 0x80
 80131ec:	d107      	bne.n	80131fe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	681b      	ldr	r3, [r3, #0]
 80131f2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80131f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80131f8:	6878      	ldr	r0, [r7, #4]
 80131fa:	f000 fb2b 	bl	8013854 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80131fe:	687b      	ldr	r3, [r7, #4]
 8013200:	681b      	ldr	r3, [r3, #0]
 8013202:	691b      	ldr	r3, [r3, #16]
 8013204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013208:	2b40      	cmp	r3, #64	; 0x40
 801320a:	d10e      	bne.n	801322a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	681b      	ldr	r3, [r3, #0]
 8013210:	68db      	ldr	r3, [r3, #12]
 8013212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013216:	2b40      	cmp	r3, #64	; 0x40
 8013218:	d107      	bne.n	801322a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801321a:	687b      	ldr	r3, [r7, #4]
 801321c:	681b      	ldr	r3, [r3, #0]
 801321e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8013222:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8013224:	6878      	ldr	r0, [r7, #4]
 8013226:	f000 f931 	bl	801348c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	681b      	ldr	r3, [r3, #0]
 801322e:	691b      	ldr	r3, [r3, #16]
 8013230:	f003 0320 	and.w	r3, r3, #32
 8013234:	2b20      	cmp	r3, #32
 8013236:	d10e      	bne.n	8013256 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8013238:	687b      	ldr	r3, [r7, #4]
 801323a:	681b      	ldr	r3, [r3, #0]
 801323c:	68db      	ldr	r3, [r3, #12]
 801323e:	f003 0320 	and.w	r3, r3, #32
 8013242:	2b20      	cmp	r3, #32
 8013244:	d107      	bne.n	8013256 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	681b      	ldr	r3, [r3, #0]
 801324a:	f06f 0220 	mvn.w	r2, #32
 801324e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8013250:	6878      	ldr	r0, [r7, #4]
 8013252:	f000 faeb 	bl	801382c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8013256:	bf00      	nop
 8013258:	3708      	adds	r7, #8
 801325a:	46bd      	mov	sp, r7
 801325c:	bd80      	pop	{r7, pc}
	...

08013260 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8013260:	b580      	push	{r7, lr}
 8013262:	b084      	sub	sp, #16
 8013264:	af00      	add	r7, sp, #0
 8013266:	6078      	str	r0, [r7, #4]
 8013268:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801326a:	2300      	movs	r3, #0
 801326c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013274:	2b01      	cmp	r3, #1
 8013276:	d101      	bne.n	801327c <HAL_TIM_ConfigClockSource+0x1c>
 8013278:	2302      	movs	r3, #2
 801327a:	e0dc      	b.n	8013436 <HAL_TIM_ConfigClockSource+0x1d6>
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	2201      	movs	r2, #1
 8013280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8013284:	687b      	ldr	r3, [r7, #4]
 8013286:	2202      	movs	r2, #2
 8013288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	681b      	ldr	r3, [r3, #0]
 8013290:	689b      	ldr	r3, [r3, #8]
 8013292:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8013294:	68ba      	ldr	r2, [r7, #8]
 8013296:	4b6a      	ldr	r3, [pc, #424]	; (8013440 <HAL_TIM_ConfigClockSource+0x1e0>)
 8013298:	4013      	ands	r3, r2
 801329a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801329c:	68bb      	ldr	r3, [r7, #8]
 801329e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80132a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	681b      	ldr	r3, [r3, #0]
 80132a8:	68ba      	ldr	r2, [r7, #8]
 80132aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80132ac:	683b      	ldr	r3, [r7, #0]
 80132ae:	681b      	ldr	r3, [r3, #0]
 80132b0:	4a64      	ldr	r2, [pc, #400]	; (8013444 <HAL_TIM_ConfigClockSource+0x1e4>)
 80132b2:	4293      	cmp	r3, r2
 80132b4:	f000 80a9 	beq.w	801340a <HAL_TIM_ConfigClockSource+0x1aa>
 80132b8:	4a62      	ldr	r2, [pc, #392]	; (8013444 <HAL_TIM_ConfigClockSource+0x1e4>)
 80132ba:	4293      	cmp	r3, r2
 80132bc:	f200 80ae 	bhi.w	801341c <HAL_TIM_ConfigClockSource+0x1bc>
 80132c0:	4a61      	ldr	r2, [pc, #388]	; (8013448 <HAL_TIM_ConfigClockSource+0x1e8>)
 80132c2:	4293      	cmp	r3, r2
 80132c4:	f000 80a1 	beq.w	801340a <HAL_TIM_ConfigClockSource+0x1aa>
 80132c8:	4a5f      	ldr	r2, [pc, #380]	; (8013448 <HAL_TIM_ConfigClockSource+0x1e8>)
 80132ca:	4293      	cmp	r3, r2
 80132cc:	f200 80a6 	bhi.w	801341c <HAL_TIM_ConfigClockSource+0x1bc>
 80132d0:	4a5e      	ldr	r2, [pc, #376]	; (801344c <HAL_TIM_ConfigClockSource+0x1ec>)
 80132d2:	4293      	cmp	r3, r2
 80132d4:	f000 8099 	beq.w	801340a <HAL_TIM_ConfigClockSource+0x1aa>
 80132d8:	4a5c      	ldr	r2, [pc, #368]	; (801344c <HAL_TIM_ConfigClockSource+0x1ec>)
 80132da:	4293      	cmp	r3, r2
 80132dc:	f200 809e 	bhi.w	801341c <HAL_TIM_ConfigClockSource+0x1bc>
 80132e0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80132e4:	f000 8091 	beq.w	801340a <HAL_TIM_ConfigClockSource+0x1aa>
 80132e8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80132ec:	f200 8096 	bhi.w	801341c <HAL_TIM_ConfigClockSource+0x1bc>
 80132f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80132f4:	f000 8089 	beq.w	801340a <HAL_TIM_ConfigClockSource+0x1aa>
 80132f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80132fc:	f200 808e 	bhi.w	801341c <HAL_TIM_ConfigClockSource+0x1bc>
 8013300:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013304:	d03e      	beq.n	8013384 <HAL_TIM_ConfigClockSource+0x124>
 8013306:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801330a:	f200 8087 	bhi.w	801341c <HAL_TIM_ConfigClockSource+0x1bc>
 801330e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013312:	f000 8086 	beq.w	8013422 <HAL_TIM_ConfigClockSource+0x1c2>
 8013316:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801331a:	d87f      	bhi.n	801341c <HAL_TIM_ConfigClockSource+0x1bc>
 801331c:	2b70      	cmp	r3, #112	; 0x70
 801331e:	d01a      	beq.n	8013356 <HAL_TIM_ConfigClockSource+0xf6>
 8013320:	2b70      	cmp	r3, #112	; 0x70
 8013322:	d87b      	bhi.n	801341c <HAL_TIM_ConfigClockSource+0x1bc>
 8013324:	2b60      	cmp	r3, #96	; 0x60
 8013326:	d050      	beq.n	80133ca <HAL_TIM_ConfigClockSource+0x16a>
 8013328:	2b60      	cmp	r3, #96	; 0x60
 801332a:	d877      	bhi.n	801341c <HAL_TIM_ConfigClockSource+0x1bc>
 801332c:	2b50      	cmp	r3, #80	; 0x50
 801332e:	d03c      	beq.n	80133aa <HAL_TIM_ConfigClockSource+0x14a>
 8013330:	2b50      	cmp	r3, #80	; 0x50
 8013332:	d873      	bhi.n	801341c <HAL_TIM_ConfigClockSource+0x1bc>
 8013334:	2b40      	cmp	r3, #64	; 0x40
 8013336:	d058      	beq.n	80133ea <HAL_TIM_ConfigClockSource+0x18a>
 8013338:	2b40      	cmp	r3, #64	; 0x40
 801333a:	d86f      	bhi.n	801341c <HAL_TIM_ConfigClockSource+0x1bc>
 801333c:	2b30      	cmp	r3, #48	; 0x30
 801333e:	d064      	beq.n	801340a <HAL_TIM_ConfigClockSource+0x1aa>
 8013340:	2b30      	cmp	r3, #48	; 0x30
 8013342:	d86b      	bhi.n	801341c <HAL_TIM_ConfigClockSource+0x1bc>
 8013344:	2b20      	cmp	r3, #32
 8013346:	d060      	beq.n	801340a <HAL_TIM_ConfigClockSource+0x1aa>
 8013348:	2b20      	cmp	r3, #32
 801334a:	d867      	bhi.n	801341c <HAL_TIM_ConfigClockSource+0x1bc>
 801334c:	2b00      	cmp	r3, #0
 801334e:	d05c      	beq.n	801340a <HAL_TIM_ConfigClockSource+0x1aa>
 8013350:	2b10      	cmp	r3, #16
 8013352:	d05a      	beq.n	801340a <HAL_TIM_ConfigClockSource+0x1aa>
 8013354:	e062      	b.n	801341c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	6818      	ldr	r0, [r3, #0]
 801335a:	683b      	ldr	r3, [r7, #0]
 801335c:	6899      	ldr	r1, [r3, #8]
 801335e:	683b      	ldr	r3, [r7, #0]
 8013360:	685a      	ldr	r2, [r3, #4]
 8013362:	683b      	ldr	r3, [r7, #0]
 8013364:	68db      	ldr	r3, [r3, #12]
 8013366:	f000 f9b3 	bl	80136d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	681b      	ldr	r3, [r3, #0]
 801336e:	689b      	ldr	r3, [r3, #8]
 8013370:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8013372:	68bb      	ldr	r3, [r7, #8]
 8013374:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8013378:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801337a:	687b      	ldr	r3, [r7, #4]
 801337c:	681b      	ldr	r3, [r3, #0]
 801337e:	68ba      	ldr	r2, [r7, #8]
 8013380:	609a      	str	r2, [r3, #8]
      break;
 8013382:	e04f      	b.n	8013424 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8013384:	687b      	ldr	r3, [r7, #4]
 8013386:	6818      	ldr	r0, [r3, #0]
 8013388:	683b      	ldr	r3, [r7, #0]
 801338a:	6899      	ldr	r1, [r3, #8]
 801338c:	683b      	ldr	r3, [r7, #0]
 801338e:	685a      	ldr	r2, [r3, #4]
 8013390:	683b      	ldr	r3, [r7, #0]
 8013392:	68db      	ldr	r3, [r3, #12]
 8013394:	f000 f99c 	bl	80136d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	681b      	ldr	r3, [r3, #0]
 801339c:	689a      	ldr	r2, [r3, #8]
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	681b      	ldr	r3, [r3, #0]
 80133a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80133a6:	609a      	str	r2, [r3, #8]
      break;
 80133a8:	e03c      	b.n	8013424 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	6818      	ldr	r0, [r3, #0]
 80133ae:	683b      	ldr	r3, [r7, #0]
 80133b0:	6859      	ldr	r1, [r3, #4]
 80133b2:	683b      	ldr	r3, [r7, #0]
 80133b4:	68db      	ldr	r3, [r3, #12]
 80133b6:	461a      	mov	r2, r3
 80133b8:	f000 f90c 	bl	80135d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80133bc:	687b      	ldr	r3, [r7, #4]
 80133be:	681b      	ldr	r3, [r3, #0]
 80133c0:	2150      	movs	r1, #80	; 0x50
 80133c2:	4618      	mov	r0, r3
 80133c4:	f000 f966 	bl	8013694 <TIM_ITRx_SetConfig>
      break;
 80133c8:	e02c      	b.n	8013424 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	6818      	ldr	r0, [r3, #0]
 80133ce:	683b      	ldr	r3, [r7, #0]
 80133d0:	6859      	ldr	r1, [r3, #4]
 80133d2:	683b      	ldr	r3, [r7, #0]
 80133d4:	68db      	ldr	r3, [r3, #12]
 80133d6:	461a      	mov	r2, r3
 80133d8:	f000 f92b 	bl	8013632 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80133dc:	687b      	ldr	r3, [r7, #4]
 80133de:	681b      	ldr	r3, [r3, #0]
 80133e0:	2160      	movs	r1, #96	; 0x60
 80133e2:	4618      	mov	r0, r3
 80133e4:	f000 f956 	bl	8013694 <TIM_ITRx_SetConfig>
      break;
 80133e8:	e01c      	b.n	8013424 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	6818      	ldr	r0, [r3, #0]
 80133ee:	683b      	ldr	r3, [r7, #0]
 80133f0:	6859      	ldr	r1, [r3, #4]
 80133f2:	683b      	ldr	r3, [r7, #0]
 80133f4:	68db      	ldr	r3, [r3, #12]
 80133f6:	461a      	mov	r2, r3
 80133f8:	f000 f8ec 	bl	80135d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	681b      	ldr	r3, [r3, #0]
 8013400:	2140      	movs	r1, #64	; 0x40
 8013402:	4618      	mov	r0, r3
 8013404:	f000 f946 	bl	8013694 <TIM_ITRx_SetConfig>
      break;
 8013408:	e00c      	b.n	8013424 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801340a:	687b      	ldr	r3, [r7, #4]
 801340c:	681a      	ldr	r2, [r3, #0]
 801340e:	683b      	ldr	r3, [r7, #0]
 8013410:	681b      	ldr	r3, [r3, #0]
 8013412:	4619      	mov	r1, r3
 8013414:	4610      	mov	r0, r2
 8013416:	f000 f93d 	bl	8013694 <TIM_ITRx_SetConfig>
      break;
 801341a:	e003      	b.n	8013424 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 801341c:	2301      	movs	r3, #1
 801341e:	73fb      	strb	r3, [r7, #15]
      break;
 8013420:	e000      	b.n	8013424 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8013422:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	2201      	movs	r2, #1
 8013428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	2200      	movs	r2, #0
 8013430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8013434:	7bfb      	ldrb	r3, [r7, #15]
}
 8013436:	4618      	mov	r0, r3
 8013438:	3710      	adds	r7, #16
 801343a:	46bd      	mov	sp, r7
 801343c:	bd80      	pop	{r7, pc}
 801343e:	bf00      	nop
 8013440:	ffceff88 	.word	0xffceff88
 8013444:	00100040 	.word	0x00100040
 8013448:	00100030 	.word	0x00100030
 801344c:	00100020 	.word	0x00100020

08013450 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8013450:	b480      	push	{r7}
 8013452:	b083      	sub	sp, #12
 8013454:	af00      	add	r7, sp, #0
 8013456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8013458:	bf00      	nop
 801345a:	370c      	adds	r7, #12
 801345c:	46bd      	mov	sp, r7
 801345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013462:	4770      	bx	lr

08013464 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8013464:	b480      	push	{r7}
 8013466:	b083      	sub	sp, #12
 8013468:	af00      	add	r7, sp, #0
 801346a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801346c:	bf00      	nop
 801346e:	370c      	adds	r7, #12
 8013470:	46bd      	mov	sp, r7
 8013472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013476:	4770      	bx	lr

08013478 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8013478:	b480      	push	{r7}
 801347a:	b083      	sub	sp, #12
 801347c:	af00      	add	r7, sp, #0
 801347e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8013480:	bf00      	nop
 8013482:	370c      	adds	r7, #12
 8013484:	46bd      	mov	sp, r7
 8013486:	f85d 7b04 	ldr.w	r7, [sp], #4
 801348a:	4770      	bx	lr

0801348c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801348c:	b480      	push	{r7}
 801348e:	b083      	sub	sp, #12
 8013490:	af00      	add	r7, sp, #0
 8013492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8013494:	bf00      	nop
 8013496:	370c      	adds	r7, #12
 8013498:	46bd      	mov	sp, r7
 801349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801349e:	4770      	bx	lr

080134a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80134a0:	b480      	push	{r7}
 80134a2:	b085      	sub	sp, #20
 80134a4:	af00      	add	r7, sp, #0
 80134a6:	6078      	str	r0, [r7, #4]
 80134a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80134aa:	687b      	ldr	r3, [r7, #4]
 80134ac:	681b      	ldr	r3, [r3, #0]
 80134ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	4a40      	ldr	r2, [pc, #256]	; (80135b4 <TIM_Base_SetConfig+0x114>)
 80134b4:	4293      	cmp	r3, r2
 80134b6:	d013      	beq.n	80134e0 <TIM_Base_SetConfig+0x40>
 80134b8:	687b      	ldr	r3, [r7, #4]
 80134ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80134be:	d00f      	beq.n	80134e0 <TIM_Base_SetConfig+0x40>
 80134c0:	687b      	ldr	r3, [r7, #4]
 80134c2:	4a3d      	ldr	r2, [pc, #244]	; (80135b8 <TIM_Base_SetConfig+0x118>)
 80134c4:	4293      	cmp	r3, r2
 80134c6:	d00b      	beq.n	80134e0 <TIM_Base_SetConfig+0x40>
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	4a3c      	ldr	r2, [pc, #240]	; (80135bc <TIM_Base_SetConfig+0x11c>)
 80134cc:	4293      	cmp	r3, r2
 80134ce:	d007      	beq.n	80134e0 <TIM_Base_SetConfig+0x40>
 80134d0:	687b      	ldr	r3, [r7, #4]
 80134d2:	4a3b      	ldr	r2, [pc, #236]	; (80135c0 <TIM_Base_SetConfig+0x120>)
 80134d4:	4293      	cmp	r3, r2
 80134d6:	d003      	beq.n	80134e0 <TIM_Base_SetConfig+0x40>
 80134d8:	687b      	ldr	r3, [r7, #4]
 80134da:	4a3a      	ldr	r2, [pc, #232]	; (80135c4 <TIM_Base_SetConfig+0x124>)
 80134dc:	4293      	cmp	r3, r2
 80134de:	d108      	bne.n	80134f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80134e0:	68fb      	ldr	r3, [r7, #12]
 80134e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80134e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80134e8:	683b      	ldr	r3, [r7, #0]
 80134ea:	685b      	ldr	r3, [r3, #4]
 80134ec:	68fa      	ldr	r2, [r7, #12]
 80134ee:	4313      	orrs	r3, r2
 80134f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80134f2:	687b      	ldr	r3, [r7, #4]
 80134f4:	4a2f      	ldr	r2, [pc, #188]	; (80135b4 <TIM_Base_SetConfig+0x114>)
 80134f6:	4293      	cmp	r3, r2
 80134f8:	d01f      	beq.n	801353a <TIM_Base_SetConfig+0x9a>
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013500:	d01b      	beq.n	801353a <TIM_Base_SetConfig+0x9a>
 8013502:	687b      	ldr	r3, [r7, #4]
 8013504:	4a2c      	ldr	r2, [pc, #176]	; (80135b8 <TIM_Base_SetConfig+0x118>)
 8013506:	4293      	cmp	r3, r2
 8013508:	d017      	beq.n	801353a <TIM_Base_SetConfig+0x9a>
 801350a:	687b      	ldr	r3, [r7, #4]
 801350c:	4a2b      	ldr	r2, [pc, #172]	; (80135bc <TIM_Base_SetConfig+0x11c>)
 801350e:	4293      	cmp	r3, r2
 8013510:	d013      	beq.n	801353a <TIM_Base_SetConfig+0x9a>
 8013512:	687b      	ldr	r3, [r7, #4]
 8013514:	4a2a      	ldr	r2, [pc, #168]	; (80135c0 <TIM_Base_SetConfig+0x120>)
 8013516:	4293      	cmp	r3, r2
 8013518:	d00f      	beq.n	801353a <TIM_Base_SetConfig+0x9a>
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	4a29      	ldr	r2, [pc, #164]	; (80135c4 <TIM_Base_SetConfig+0x124>)
 801351e:	4293      	cmp	r3, r2
 8013520:	d00b      	beq.n	801353a <TIM_Base_SetConfig+0x9a>
 8013522:	687b      	ldr	r3, [r7, #4]
 8013524:	4a28      	ldr	r2, [pc, #160]	; (80135c8 <TIM_Base_SetConfig+0x128>)
 8013526:	4293      	cmp	r3, r2
 8013528:	d007      	beq.n	801353a <TIM_Base_SetConfig+0x9a>
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	4a27      	ldr	r2, [pc, #156]	; (80135cc <TIM_Base_SetConfig+0x12c>)
 801352e:	4293      	cmp	r3, r2
 8013530:	d003      	beq.n	801353a <TIM_Base_SetConfig+0x9a>
 8013532:	687b      	ldr	r3, [r7, #4]
 8013534:	4a26      	ldr	r2, [pc, #152]	; (80135d0 <TIM_Base_SetConfig+0x130>)
 8013536:	4293      	cmp	r3, r2
 8013538:	d108      	bne.n	801354c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801353a:	68fb      	ldr	r3, [r7, #12]
 801353c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013540:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8013542:	683b      	ldr	r3, [r7, #0]
 8013544:	68db      	ldr	r3, [r3, #12]
 8013546:	68fa      	ldr	r2, [r7, #12]
 8013548:	4313      	orrs	r3, r2
 801354a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801354c:	68fb      	ldr	r3, [r7, #12]
 801354e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8013552:	683b      	ldr	r3, [r7, #0]
 8013554:	695b      	ldr	r3, [r3, #20]
 8013556:	4313      	orrs	r3, r2
 8013558:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	68fa      	ldr	r2, [r7, #12]
 801355e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8013560:	683b      	ldr	r3, [r7, #0]
 8013562:	689a      	ldr	r2, [r3, #8]
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8013568:	683b      	ldr	r3, [r7, #0]
 801356a:	681a      	ldr	r2, [r3, #0]
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8013570:	687b      	ldr	r3, [r7, #4]
 8013572:	4a10      	ldr	r2, [pc, #64]	; (80135b4 <TIM_Base_SetConfig+0x114>)
 8013574:	4293      	cmp	r3, r2
 8013576:	d00f      	beq.n	8013598 <TIM_Base_SetConfig+0xf8>
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	4a12      	ldr	r2, [pc, #72]	; (80135c4 <TIM_Base_SetConfig+0x124>)
 801357c:	4293      	cmp	r3, r2
 801357e:	d00b      	beq.n	8013598 <TIM_Base_SetConfig+0xf8>
 8013580:	687b      	ldr	r3, [r7, #4]
 8013582:	4a11      	ldr	r2, [pc, #68]	; (80135c8 <TIM_Base_SetConfig+0x128>)
 8013584:	4293      	cmp	r3, r2
 8013586:	d007      	beq.n	8013598 <TIM_Base_SetConfig+0xf8>
 8013588:	687b      	ldr	r3, [r7, #4]
 801358a:	4a10      	ldr	r2, [pc, #64]	; (80135cc <TIM_Base_SetConfig+0x12c>)
 801358c:	4293      	cmp	r3, r2
 801358e:	d003      	beq.n	8013598 <TIM_Base_SetConfig+0xf8>
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	4a0f      	ldr	r2, [pc, #60]	; (80135d0 <TIM_Base_SetConfig+0x130>)
 8013594:	4293      	cmp	r3, r2
 8013596:	d103      	bne.n	80135a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8013598:	683b      	ldr	r3, [r7, #0]
 801359a:	691a      	ldr	r2, [r3, #16]
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80135a0:	687b      	ldr	r3, [r7, #4]
 80135a2:	2201      	movs	r2, #1
 80135a4:	615a      	str	r2, [r3, #20]
}
 80135a6:	bf00      	nop
 80135a8:	3714      	adds	r7, #20
 80135aa:	46bd      	mov	sp, r7
 80135ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135b0:	4770      	bx	lr
 80135b2:	bf00      	nop
 80135b4:	40010000 	.word	0x40010000
 80135b8:	40000400 	.word	0x40000400
 80135bc:	40000800 	.word	0x40000800
 80135c0:	40000c00 	.word	0x40000c00
 80135c4:	40010400 	.word	0x40010400
 80135c8:	40014000 	.word	0x40014000
 80135cc:	40014400 	.word	0x40014400
 80135d0:	40014800 	.word	0x40014800

080135d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80135d4:	b480      	push	{r7}
 80135d6:	b087      	sub	sp, #28
 80135d8:	af00      	add	r7, sp, #0
 80135da:	60f8      	str	r0, [r7, #12]
 80135dc:	60b9      	str	r1, [r7, #8]
 80135de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80135e0:	68fb      	ldr	r3, [r7, #12]
 80135e2:	6a1b      	ldr	r3, [r3, #32]
 80135e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80135e6:	68fb      	ldr	r3, [r7, #12]
 80135e8:	6a1b      	ldr	r3, [r3, #32]
 80135ea:	f023 0201 	bic.w	r2, r3, #1
 80135ee:	68fb      	ldr	r3, [r7, #12]
 80135f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80135f2:	68fb      	ldr	r3, [r7, #12]
 80135f4:	699b      	ldr	r3, [r3, #24]
 80135f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80135f8:	693b      	ldr	r3, [r7, #16]
 80135fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80135fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8013600:	687b      	ldr	r3, [r7, #4]
 8013602:	011b      	lsls	r3, r3, #4
 8013604:	693a      	ldr	r2, [r7, #16]
 8013606:	4313      	orrs	r3, r2
 8013608:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801360a:	697b      	ldr	r3, [r7, #20]
 801360c:	f023 030a 	bic.w	r3, r3, #10
 8013610:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8013612:	697a      	ldr	r2, [r7, #20]
 8013614:	68bb      	ldr	r3, [r7, #8]
 8013616:	4313      	orrs	r3, r2
 8013618:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801361a:	68fb      	ldr	r3, [r7, #12]
 801361c:	693a      	ldr	r2, [r7, #16]
 801361e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8013620:	68fb      	ldr	r3, [r7, #12]
 8013622:	697a      	ldr	r2, [r7, #20]
 8013624:	621a      	str	r2, [r3, #32]
}
 8013626:	bf00      	nop
 8013628:	371c      	adds	r7, #28
 801362a:	46bd      	mov	sp, r7
 801362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013630:	4770      	bx	lr

08013632 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8013632:	b480      	push	{r7}
 8013634:	b087      	sub	sp, #28
 8013636:	af00      	add	r7, sp, #0
 8013638:	60f8      	str	r0, [r7, #12]
 801363a:	60b9      	str	r1, [r7, #8]
 801363c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801363e:	68fb      	ldr	r3, [r7, #12]
 8013640:	6a1b      	ldr	r3, [r3, #32]
 8013642:	f023 0210 	bic.w	r2, r3, #16
 8013646:	68fb      	ldr	r3, [r7, #12]
 8013648:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801364a:	68fb      	ldr	r3, [r7, #12]
 801364c:	699b      	ldr	r3, [r3, #24]
 801364e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8013650:	68fb      	ldr	r3, [r7, #12]
 8013652:	6a1b      	ldr	r3, [r3, #32]
 8013654:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8013656:	697b      	ldr	r3, [r7, #20]
 8013658:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801365c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	031b      	lsls	r3, r3, #12
 8013662:	697a      	ldr	r2, [r7, #20]
 8013664:	4313      	orrs	r3, r2
 8013666:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8013668:	693b      	ldr	r3, [r7, #16]
 801366a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801366e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8013670:	68bb      	ldr	r3, [r7, #8]
 8013672:	011b      	lsls	r3, r3, #4
 8013674:	693a      	ldr	r2, [r7, #16]
 8013676:	4313      	orrs	r3, r2
 8013678:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801367a:	68fb      	ldr	r3, [r7, #12]
 801367c:	697a      	ldr	r2, [r7, #20]
 801367e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8013680:	68fb      	ldr	r3, [r7, #12]
 8013682:	693a      	ldr	r2, [r7, #16]
 8013684:	621a      	str	r2, [r3, #32]
}
 8013686:	bf00      	nop
 8013688:	371c      	adds	r7, #28
 801368a:	46bd      	mov	sp, r7
 801368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013690:	4770      	bx	lr
	...

08013694 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8013694:	b480      	push	{r7}
 8013696:	b085      	sub	sp, #20
 8013698:	af00      	add	r7, sp, #0
 801369a:	6078      	str	r0, [r7, #4]
 801369c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801369e:	687b      	ldr	r3, [r7, #4]
 80136a0:	689b      	ldr	r3, [r3, #8]
 80136a2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80136a4:	68fa      	ldr	r2, [r7, #12]
 80136a6:	4b09      	ldr	r3, [pc, #36]	; (80136cc <TIM_ITRx_SetConfig+0x38>)
 80136a8:	4013      	ands	r3, r2
 80136aa:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80136ac:	683a      	ldr	r2, [r7, #0]
 80136ae:	68fb      	ldr	r3, [r7, #12]
 80136b0:	4313      	orrs	r3, r2
 80136b2:	f043 0307 	orr.w	r3, r3, #7
 80136b6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80136b8:	687b      	ldr	r3, [r7, #4]
 80136ba:	68fa      	ldr	r2, [r7, #12]
 80136bc:	609a      	str	r2, [r3, #8]
}
 80136be:	bf00      	nop
 80136c0:	3714      	adds	r7, #20
 80136c2:	46bd      	mov	sp, r7
 80136c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136c8:	4770      	bx	lr
 80136ca:	bf00      	nop
 80136cc:	ffcfff8f 	.word	0xffcfff8f

080136d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80136d0:	b480      	push	{r7}
 80136d2:	b087      	sub	sp, #28
 80136d4:	af00      	add	r7, sp, #0
 80136d6:	60f8      	str	r0, [r7, #12]
 80136d8:	60b9      	str	r1, [r7, #8]
 80136da:	607a      	str	r2, [r7, #4]
 80136dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80136de:	68fb      	ldr	r3, [r7, #12]
 80136e0:	689b      	ldr	r3, [r3, #8]
 80136e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80136e4:	697b      	ldr	r3, [r7, #20]
 80136e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80136ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80136ec:	683b      	ldr	r3, [r7, #0]
 80136ee:	021a      	lsls	r2, r3, #8
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	431a      	orrs	r2, r3
 80136f4:	68bb      	ldr	r3, [r7, #8]
 80136f6:	4313      	orrs	r3, r2
 80136f8:	697a      	ldr	r2, [r7, #20]
 80136fa:	4313      	orrs	r3, r2
 80136fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80136fe:	68fb      	ldr	r3, [r7, #12]
 8013700:	697a      	ldr	r2, [r7, #20]
 8013702:	609a      	str	r2, [r3, #8]
}
 8013704:	bf00      	nop
 8013706:	371c      	adds	r7, #28
 8013708:	46bd      	mov	sp, r7
 801370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801370e:	4770      	bx	lr

08013710 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8013710:	b480      	push	{r7}
 8013712:	b085      	sub	sp, #20
 8013714:	af00      	add	r7, sp, #0
 8013716:	6078      	str	r0, [r7, #4]
 8013718:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801371a:	687b      	ldr	r3, [r7, #4]
 801371c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013720:	2b01      	cmp	r3, #1
 8013722:	d101      	bne.n	8013728 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8013724:	2302      	movs	r3, #2
 8013726:	e06d      	b.n	8013804 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	2201      	movs	r2, #1
 801372c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	2202      	movs	r2, #2
 8013734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8013738:	687b      	ldr	r3, [r7, #4]
 801373a:	681b      	ldr	r3, [r3, #0]
 801373c:	685b      	ldr	r3, [r3, #4]
 801373e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8013740:	687b      	ldr	r3, [r7, #4]
 8013742:	681b      	ldr	r3, [r3, #0]
 8013744:	689b      	ldr	r3, [r3, #8]
 8013746:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	681b      	ldr	r3, [r3, #0]
 801374c:	4a30      	ldr	r2, [pc, #192]	; (8013810 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 801374e:	4293      	cmp	r3, r2
 8013750:	d004      	beq.n	801375c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	681b      	ldr	r3, [r3, #0]
 8013756:	4a2f      	ldr	r2, [pc, #188]	; (8013814 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8013758:	4293      	cmp	r3, r2
 801375a:	d108      	bne.n	801376e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 801375c:	68fb      	ldr	r3, [r7, #12]
 801375e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8013762:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8013764:	683b      	ldr	r3, [r7, #0]
 8013766:	685b      	ldr	r3, [r3, #4]
 8013768:	68fa      	ldr	r2, [r7, #12]
 801376a:	4313      	orrs	r3, r2
 801376c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801376e:	68fb      	ldr	r3, [r7, #12]
 8013770:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013774:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8013776:	683b      	ldr	r3, [r7, #0]
 8013778:	681b      	ldr	r3, [r3, #0]
 801377a:	68fa      	ldr	r2, [r7, #12]
 801377c:	4313      	orrs	r3, r2
 801377e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8013780:	687b      	ldr	r3, [r7, #4]
 8013782:	681b      	ldr	r3, [r3, #0]
 8013784:	68fa      	ldr	r2, [r7, #12]
 8013786:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8013788:	687b      	ldr	r3, [r7, #4]
 801378a:	681b      	ldr	r3, [r3, #0]
 801378c:	4a20      	ldr	r2, [pc, #128]	; (8013810 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 801378e:	4293      	cmp	r3, r2
 8013790:	d022      	beq.n	80137d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	681b      	ldr	r3, [r3, #0]
 8013796:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801379a:	d01d      	beq.n	80137d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801379c:	687b      	ldr	r3, [r7, #4]
 801379e:	681b      	ldr	r3, [r3, #0]
 80137a0:	4a1d      	ldr	r2, [pc, #116]	; (8013818 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80137a2:	4293      	cmp	r3, r2
 80137a4:	d018      	beq.n	80137d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	681b      	ldr	r3, [r3, #0]
 80137aa:	4a1c      	ldr	r2, [pc, #112]	; (801381c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80137ac:	4293      	cmp	r3, r2
 80137ae:	d013      	beq.n	80137d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	681b      	ldr	r3, [r3, #0]
 80137b4:	4a1a      	ldr	r2, [pc, #104]	; (8013820 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80137b6:	4293      	cmp	r3, r2
 80137b8:	d00e      	beq.n	80137d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	681b      	ldr	r3, [r3, #0]
 80137be:	4a15      	ldr	r2, [pc, #84]	; (8013814 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80137c0:	4293      	cmp	r3, r2
 80137c2:	d009      	beq.n	80137d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80137c4:	687b      	ldr	r3, [r7, #4]
 80137c6:	681b      	ldr	r3, [r3, #0]
 80137c8:	4a16      	ldr	r2, [pc, #88]	; (8013824 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80137ca:	4293      	cmp	r3, r2
 80137cc:	d004      	beq.n	80137d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	681b      	ldr	r3, [r3, #0]
 80137d2:	4a15      	ldr	r2, [pc, #84]	; (8013828 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80137d4:	4293      	cmp	r3, r2
 80137d6:	d10c      	bne.n	80137f2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80137d8:	68bb      	ldr	r3, [r7, #8]
 80137da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80137de:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80137e0:	683b      	ldr	r3, [r7, #0]
 80137e2:	689b      	ldr	r3, [r3, #8]
 80137e4:	68ba      	ldr	r2, [r7, #8]
 80137e6:	4313      	orrs	r3, r2
 80137e8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80137ea:	687b      	ldr	r3, [r7, #4]
 80137ec:	681b      	ldr	r3, [r3, #0]
 80137ee:	68ba      	ldr	r2, [r7, #8]
 80137f0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80137f2:	687b      	ldr	r3, [r7, #4]
 80137f4:	2201      	movs	r2, #1
 80137f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	2200      	movs	r2, #0
 80137fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8013802:	2300      	movs	r3, #0
}
 8013804:	4618      	mov	r0, r3
 8013806:	3714      	adds	r7, #20
 8013808:	46bd      	mov	sp, r7
 801380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801380e:	4770      	bx	lr
 8013810:	40010000 	.word	0x40010000
 8013814:	40010400 	.word	0x40010400
 8013818:	40000400 	.word	0x40000400
 801381c:	40000800 	.word	0x40000800
 8013820:	40000c00 	.word	0x40000c00
 8013824:	40001800 	.word	0x40001800
 8013828:	40014000 	.word	0x40014000

0801382c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801382c:	b480      	push	{r7}
 801382e:	b083      	sub	sp, #12
 8013830:	af00      	add	r7, sp, #0
 8013832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8013834:	bf00      	nop
 8013836:	370c      	adds	r7, #12
 8013838:	46bd      	mov	sp, r7
 801383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801383e:	4770      	bx	lr

08013840 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8013840:	b480      	push	{r7}
 8013842:	b083      	sub	sp, #12
 8013844:	af00      	add	r7, sp, #0
 8013846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8013848:	bf00      	nop
 801384a:	370c      	adds	r7, #12
 801384c:	46bd      	mov	sp, r7
 801384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013852:	4770      	bx	lr

08013854 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8013854:	b480      	push	{r7}
 8013856:	b083      	sub	sp, #12
 8013858:	af00      	add	r7, sp, #0
 801385a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 801385c:	bf00      	nop
 801385e:	370c      	adds	r7, #12
 8013860:	46bd      	mov	sp, r7
 8013862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013866:	4770      	bx	lr

08013868 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8013868:	b580      	push	{r7, lr}
 801386a:	b082      	sub	sp, #8
 801386c:	af00      	add	r7, sp, #0
 801386e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8013870:	687b      	ldr	r3, [r7, #4]
 8013872:	2b00      	cmp	r3, #0
 8013874:	d101      	bne.n	801387a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8013876:	2301      	movs	r3, #1
 8013878:	e042      	b.n	8013900 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801387a:	687b      	ldr	r3, [r7, #4]
 801387c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013880:	2b00      	cmp	r3, #0
 8013882:	d106      	bne.n	8013892 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	2200      	movs	r2, #0
 8013888:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801388c:	6878      	ldr	r0, [r7, #4]
 801388e:	f7f6 f87d 	bl	800998c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	2224      	movs	r2, #36	; 0x24
 8013896:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	681b      	ldr	r3, [r3, #0]
 801389e:	681a      	ldr	r2, [r3, #0]
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	681b      	ldr	r3, [r3, #0]
 80138a4:	f022 0201 	bic.w	r2, r2, #1
 80138a8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80138aa:	6878      	ldr	r0, [r7, #4]
 80138ac:	f000 fd74 	bl	8014398 <UART_SetConfig>
 80138b0:	4603      	mov	r3, r0
 80138b2:	2b01      	cmp	r3, #1
 80138b4:	d101      	bne.n	80138ba <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80138b6:	2301      	movs	r3, #1
 80138b8:	e022      	b.n	8013900 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80138be:	2b00      	cmp	r3, #0
 80138c0:	d002      	beq.n	80138c8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80138c2:	6878      	ldr	r0, [r7, #4]
 80138c4:	f001 fad0 	bl	8014e68 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	681b      	ldr	r3, [r3, #0]
 80138cc:	685a      	ldr	r2, [r3, #4]
 80138ce:	687b      	ldr	r3, [r7, #4]
 80138d0:	681b      	ldr	r3, [r3, #0]
 80138d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80138d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	681b      	ldr	r3, [r3, #0]
 80138dc:	689a      	ldr	r2, [r3, #8]
 80138de:	687b      	ldr	r3, [r7, #4]
 80138e0:	681b      	ldr	r3, [r3, #0]
 80138e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80138e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	681b      	ldr	r3, [r3, #0]
 80138ec:	681a      	ldr	r2, [r3, #0]
 80138ee:	687b      	ldr	r3, [r7, #4]
 80138f0:	681b      	ldr	r3, [r3, #0]
 80138f2:	f042 0201 	orr.w	r2, r2, #1
 80138f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80138f8:	6878      	ldr	r0, [r7, #4]
 80138fa:	f001 fb57 	bl	8014fac <UART_CheckIdleState>
 80138fe:	4603      	mov	r3, r0
}
 8013900:	4618      	mov	r0, r3
 8013902:	3708      	adds	r7, #8
 8013904:	46bd      	mov	sp, r7
 8013906:	bd80      	pop	{r7, pc}

08013908 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8013908:	b580      	push	{r7, lr}
 801390a:	b08a      	sub	sp, #40	; 0x28
 801390c:	af02      	add	r7, sp, #8
 801390e:	60f8      	str	r0, [r7, #12]
 8013910:	60b9      	str	r1, [r7, #8]
 8013912:	603b      	str	r3, [r7, #0]
 8013914:	4613      	mov	r3, r2
 8013916:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8013918:	68fb      	ldr	r3, [r7, #12]
 801391a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801391e:	2b20      	cmp	r3, #32
 8013920:	f040 8083 	bne.w	8013a2a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8013924:	68bb      	ldr	r3, [r7, #8]
 8013926:	2b00      	cmp	r3, #0
 8013928:	d002      	beq.n	8013930 <HAL_UART_Transmit+0x28>
 801392a:	88fb      	ldrh	r3, [r7, #6]
 801392c:	2b00      	cmp	r3, #0
 801392e:	d101      	bne.n	8013934 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8013930:	2301      	movs	r3, #1
 8013932:	e07b      	b.n	8013a2c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8013934:	68fb      	ldr	r3, [r7, #12]
 8013936:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801393a:	2b01      	cmp	r3, #1
 801393c:	d101      	bne.n	8013942 <HAL_UART_Transmit+0x3a>
 801393e:	2302      	movs	r3, #2
 8013940:	e074      	b.n	8013a2c <HAL_UART_Transmit+0x124>
 8013942:	68fb      	ldr	r3, [r7, #12]
 8013944:	2201      	movs	r2, #1
 8013946:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801394a:	68fb      	ldr	r3, [r7, #12]
 801394c:	2200      	movs	r2, #0
 801394e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8013952:	68fb      	ldr	r3, [r7, #12]
 8013954:	2221      	movs	r2, #33	; 0x21
 8013956:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801395a:	f7f6 fa6b 	bl	8009e34 <HAL_GetTick>
 801395e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8013960:	68fb      	ldr	r3, [r7, #12]
 8013962:	88fa      	ldrh	r2, [r7, #6]
 8013964:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8013968:	68fb      	ldr	r3, [r7, #12]
 801396a:	88fa      	ldrh	r2, [r7, #6]
 801396c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013970:	68fb      	ldr	r3, [r7, #12]
 8013972:	689b      	ldr	r3, [r3, #8]
 8013974:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013978:	d108      	bne.n	801398c <HAL_UART_Transmit+0x84>
 801397a:	68fb      	ldr	r3, [r7, #12]
 801397c:	691b      	ldr	r3, [r3, #16]
 801397e:	2b00      	cmp	r3, #0
 8013980:	d104      	bne.n	801398c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8013982:	2300      	movs	r3, #0
 8013984:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8013986:	68bb      	ldr	r3, [r7, #8]
 8013988:	61bb      	str	r3, [r7, #24]
 801398a:	e003      	b.n	8013994 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 801398c:	68bb      	ldr	r3, [r7, #8]
 801398e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8013990:	2300      	movs	r3, #0
 8013992:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8013994:	68fb      	ldr	r3, [r7, #12]
 8013996:	2200      	movs	r2, #0
 8013998:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 801399c:	e02c      	b.n	80139f8 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801399e:	683b      	ldr	r3, [r7, #0]
 80139a0:	9300      	str	r3, [sp, #0]
 80139a2:	697b      	ldr	r3, [r7, #20]
 80139a4:	2200      	movs	r2, #0
 80139a6:	2180      	movs	r1, #128	; 0x80
 80139a8:	68f8      	ldr	r0, [r7, #12]
 80139aa:	f001 fb4a 	bl	8015042 <UART_WaitOnFlagUntilTimeout>
 80139ae:	4603      	mov	r3, r0
 80139b0:	2b00      	cmp	r3, #0
 80139b2:	d001      	beq.n	80139b8 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80139b4:	2303      	movs	r3, #3
 80139b6:	e039      	b.n	8013a2c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80139b8:	69fb      	ldr	r3, [r7, #28]
 80139ba:	2b00      	cmp	r3, #0
 80139bc:	d10b      	bne.n	80139d6 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80139be:	69bb      	ldr	r3, [r7, #24]
 80139c0:	881b      	ldrh	r3, [r3, #0]
 80139c2:	461a      	mov	r2, r3
 80139c4:	68fb      	ldr	r3, [r7, #12]
 80139c6:	681b      	ldr	r3, [r3, #0]
 80139c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80139cc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80139ce:	69bb      	ldr	r3, [r7, #24]
 80139d0:	3302      	adds	r3, #2
 80139d2:	61bb      	str	r3, [r7, #24]
 80139d4:	e007      	b.n	80139e6 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80139d6:	69fb      	ldr	r3, [r7, #28]
 80139d8:	781a      	ldrb	r2, [r3, #0]
 80139da:	68fb      	ldr	r3, [r7, #12]
 80139dc:	681b      	ldr	r3, [r3, #0]
 80139de:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80139e0:	69fb      	ldr	r3, [r7, #28]
 80139e2:	3301      	adds	r3, #1
 80139e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80139e6:	68fb      	ldr	r3, [r7, #12]
 80139e8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80139ec:	b29b      	uxth	r3, r3
 80139ee:	3b01      	subs	r3, #1
 80139f0:	b29a      	uxth	r2, r3
 80139f2:	68fb      	ldr	r3, [r7, #12]
 80139f4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80139f8:	68fb      	ldr	r3, [r7, #12]
 80139fa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80139fe:	b29b      	uxth	r3, r3
 8013a00:	2b00      	cmp	r3, #0
 8013a02:	d1cc      	bne.n	801399e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8013a04:	683b      	ldr	r3, [r7, #0]
 8013a06:	9300      	str	r3, [sp, #0]
 8013a08:	697b      	ldr	r3, [r7, #20]
 8013a0a:	2200      	movs	r2, #0
 8013a0c:	2140      	movs	r1, #64	; 0x40
 8013a0e:	68f8      	ldr	r0, [r7, #12]
 8013a10:	f001 fb17 	bl	8015042 <UART_WaitOnFlagUntilTimeout>
 8013a14:	4603      	mov	r3, r0
 8013a16:	2b00      	cmp	r3, #0
 8013a18:	d001      	beq.n	8013a1e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8013a1a:	2303      	movs	r3, #3
 8013a1c:	e006      	b.n	8013a2c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8013a1e:	68fb      	ldr	r3, [r7, #12]
 8013a20:	2220      	movs	r2, #32
 8013a22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8013a26:	2300      	movs	r3, #0
 8013a28:	e000      	b.n	8013a2c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8013a2a:	2302      	movs	r3, #2
  }
}
 8013a2c:	4618      	mov	r0, r3
 8013a2e:	3720      	adds	r7, #32
 8013a30:	46bd      	mov	sp, r7
 8013a32:	bd80      	pop	{r7, pc}

08013a34 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8013a34:	b480      	push	{r7}
 8013a36:	b091      	sub	sp, #68	; 0x44
 8013a38:	af00      	add	r7, sp, #0
 8013a3a:	60f8      	str	r0, [r7, #12]
 8013a3c:	60b9      	str	r1, [r7, #8]
 8013a3e:	4613      	mov	r3, r2
 8013a40:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8013a42:	68fb      	ldr	r3, [r7, #12]
 8013a44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013a48:	2b20      	cmp	r3, #32
 8013a4a:	f040 808c 	bne.w	8013b66 <HAL_UART_Transmit_IT+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8013a4e:	68bb      	ldr	r3, [r7, #8]
 8013a50:	2b00      	cmp	r3, #0
 8013a52:	d002      	beq.n	8013a5a <HAL_UART_Transmit_IT+0x26>
 8013a54:	88fb      	ldrh	r3, [r7, #6]
 8013a56:	2b00      	cmp	r3, #0
 8013a58:	d101      	bne.n	8013a5e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8013a5a:	2301      	movs	r3, #1
 8013a5c:	e084      	b.n	8013b68 <HAL_UART_Transmit_IT+0x134>
    }

    __HAL_LOCK(huart);
 8013a5e:	68fb      	ldr	r3, [r7, #12]
 8013a60:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8013a64:	2b01      	cmp	r3, #1
 8013a66:	d101      	bne.n	8013a6c <HAL_UART_Transmit_IT+0x38>
 8013a68:	2302      	movs	r3, #2
 8013a6a:	e07d      	b.n	8013b68 <HAL_UART_Transmit_IT+0x134>
 8013a6c:	68fb      	ldr	r3, [r7, #12]
 8013a6e:	2201      	movs	r2, #1
 8013a70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8013a74:	68fb      	ldr	r3, [r7, #12]
 8013a76:	68ba      	ldr	r2, [r7, #8]
 8013a78:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8013a7a:	68fb      	ldr	r3, [r7, #12]
 8013a7c:	88fa      	ldrh	r2, [r7, #6]
 8013a7e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8013a82:	68fb      	ldr	r3, [r7, #12]
 8013a84:	88fa      	ldrh	r2, [r7, #6]
 8013a86:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8013a8a:	68fb      	ldr	r3, [r7, #12]
 8013a8c:	2200      	movs	r2, #0
 8013a8e:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013a90:	68fb      	ldr	r3, [r7, #12]
 8013a92:	2200      	movs	r2, #0
 8013a94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8013a98:	68fb      	ldr	r3, [r7, #12]
 8013a9a:	2221      	movs	r2, #33	; 0x21
 8013a9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8013aa0:	68fb      	ldr	r3, [r7, #12]
 8013aa2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013aa4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8013aa8:	d12e      	bne.n	8013b08 <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013aaa:	68fb      	ldr	r3, [r7, #12]
 8013aac:	689b      	ldr	r3, [r3, #8]
 8013aae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013ab2:	d107      	bne.n	8013ac4 <HAL_UART_Transmit_IT+0x90>
 8013ab4:	68fb      	ldr	r3, [r7, #12]
 8013ab6:	691b      	ldr	r3, [r3, #16]
 8013ab8:	2b00      	cmp	r3, #0
 8013aba:	d103      	bne.n	8013ac4 <HAL_UART_Transmit_IT+0x90>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8013abc:	68fb      	ldr	r3, [r7, #12]
 8013abe:	4a2d      	ldr	r2, [pc, #180]	; (8013b74 <HAL_UART_Transmit_IT+0x140>)
 8013ac0:	675a      	str	r2, [r3, #116]	; 0x74
 8013ac2:	e002      	b.n	8013aca <HAL_UART_Transmit_IT+0x96>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8013ac4:	68fb      	ldr	r3, [r7, #12]
 8013ac6:	4a2c      	ldr	r2, [pc, #176]	; (8013b78 <HAL_UART_Transmit_IT+0x144>)
 8013ac8:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8013aca:	68fb      	ldr	r3, [r7, #12]
 8013acc:	2200      	movs	r2, #0
 8013ace:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8013ad2:	68fb      	ldr	r3, [r7, #12]
 8013ad4:	681b      	ldr	r3, [r3, #0]
 8013ad6:	3308      	adds	r3, #8
 8013ad8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013adc:	e853 3f00 	ldrex	r3, [r3]
 8013ae0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8013ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ae4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8013ae8:	63bb      	str	r3, [r7, #56]	; 0x38
 8013aea:	68fb      	ldr	r3, [r7, #12]
 8013aec:	681b      	ldr	r3, [r3, #0]
 8013aee:	3308      	adds	r3, #8
 8013af0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013af2:	637a      	str	r2, [r7, #52]	; 0x34
 8013af4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013af6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013af8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013afa:	e841 2300 	strex	r3, r2, [r1]
 8013afe:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8013b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b02:	2b00      	cmp	r3, #0
 8013b04:	d1e5      	bne.n	8013ad2 <HAL_UART_Transmit_IT+0x9e>
 8013b06:	e02c      	b.n	8013b62 <HAL_UART_Transmit_IT+0x12e>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013b08:	68fb      	ldr	r3, [r7, #12]
 8013b0a:	689b      	ldr	r3, [r3, #8]
 8013b0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013b10:	d107      	bne.n	8013b22 <HAL_UART_Transmit_IT+0xee>
 8013b12:	68fb      	ldr	r3, [r7, #12]
 8013b14:	691b      	ldr	r3, [r3, #16]
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	d103      	bne.n	8013b22 <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8013b1a:	68fb      	ldr	r3, [r7, #12]
 8013b1c:	4a17      	ldr	r2, [pc, #92]	; (8013b7c <HAL_UART_Transmit_IT+0x148>)
 8013b1e:	675a      	str	r2, [r3, #116]	; 0x74
 8013b20:	e002      	b.n	8013b28 <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8013b22:	68fb      	ldr	r3, [r7, #12]
 8013b24:	4a16      	ldr	r2, [pc, #88]	; (8013b80 <HAL_UART_Transmit_IT+0x14c>)
 8013b26:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8013b28:	68fb      	ldr	r3, [r7, #12]
 8013b2a:	2200      	movs	r2, #0
 8013b2c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8013b30:	68fb      	ldr	r3, [r7, #12]
 8013b32:	681b      	ldr	r3, [r3, #0]
 8013b34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013b36:	697b      	ldr	r3, [r7, #20]
 8013b38:	e853 3f00 	ldrex	r3, [r3]
 8013b3c:	613b      	str	r3, [r7, #16]
   return(result);
 8013b3e:	693b      	ldr	r3, [r7, #16]
 8013b40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013b44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013b46:	68fb      	ldr	r3, [r7, #12]
 8013b48:	681b      	ldr	r3, [r3, #0]
 8013b4a:	461a      	mov	r2, r3
 8013b4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013b4e:	623b      	str	r3, [r7, #32]
 8013b50:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013b52:	69f9      	ldr	r1, [r7, #28]
 8013b54:	6a3a      	ldr	r2, [r7, #32]
 8013b56:	e841 2300 	strex	r3, r2, [r1]
 8013b5a:	61bb      	str	r3, [r7, #24]
   return(result);
 8013b5c:	69bb      	ldr	r3, [r7, #24]
 8013b5e:	2b00      	cmp	r3, #0
 8013b60:	d1e6      	bne.n	8013b30 <HAL_UART_Transmit_IT+0xfc>
    }

    return HAL_OK;
 8013b62:	2300      	movs	r3, #0
 8013b64:	e000      	b.n	8013b68 <HAL_UART_Transmit_IT+0x134>
  }
  else
  {
    return HAL_BUSY;
 8013b66:	2302      	movs	r3, #2
  }
}
 8013b68:	4618      	mov	r0, r3
 8013b6a:	3744      	adds	r7, #68	; 0x44
 8013b6c:	46bd      	mov	sp, r7
 8013b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b72:	4770      	bx	lr
 8013b74:	0801577b 	.word	0x0801577b
 8013b78:	0801569b 	.word	0x0801569b
 8013b7c:	080155d9 	.word	0x080155d9
 8013b80:	08015521 	.word	0x08015521

08013b84 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013b84:	b580      	push	{r7, lr}
 8013b86:	b08a      	sub	sp, #40	; 0x28
 8013b88:	af00      	add	r7, sp, #0
 8013b8a:	60f8      	str	r0, [r7, #12]
 8013b8c:	60b9      	str	r1, [r7, #8]
 8013b8e:	4613      	mov	r3, r2
 8013b90:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8013b92:	68fb      	ldr	r3, [r7, #12]
 8013b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013b98:	2b20      	cmp	r3, #32
 8013b9a:	d142      	bne.n	8013c22 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8013b9c:	68bb      	ldr	r3, [r7, #8]
 8013b9e:	2b00      	cmp	r3, #0
 8013ba0:	d002      	beq.n	8013ba8 <HAL_UART_Receive_IT+0x24>
 8013ba2:	88fb      	ldrh	r3, [r7, #6]
 8013ba4:	2b00      	cmp	r3, #0
 8013ba6:	d101      	bne.n	8013bac <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8013ba8:	2301      	movs	r3, #1
 8013baa:	e03b      	b.n	8013c24 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8013bac:	68fb      	ldr	r3, [r7, #12]
 8013bae:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8013bb2:	2b01      	cmp	r3, #1
 8013bb4:	d101      	bne.n	8013bba <HAL_UART_Receive_IT+0x36>
 8013bb6:	2302      	movs	r3, #2
 8013bb8:	e034      	b.n	8013c24 <HAL_UART_Receive_IT+0xa0>
 8013bba:	68fb      	ldr	r3, [r7, #12]
 8013bbc:	2201      	movs	r2, #1
 8013bbe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013bc2:	68fb      	ldr	r3, [r7, #12]
 8013bc4:	2200      	movs	r2, #0
 8013bc6:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8013bc8:	68fb      	ldr	r3, [r7, #12]
 8013bca:	681b      	ldr	r3, [r3, #0]
 8013bcc:	4a17      	ldr	r2, [pc, #92]	; (8013c2c <HAL_UART_Receive_IT+0xa8>)
 8013bce:	4293      	cmp	r3, r2
 8013bd0:	d01f      	beq.n	8013c12 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8013bd2:	68fb      	ldr	r3, [r7, #12]
 8013bd4:	681b      	ldr	r3, [r3, #0]
 8013bd6:	685b      	ldr	r3, [r3, #4]
 8013bd8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8013bdc:	2b00      	cmp	r3, #0
 8013bde:	d018      	beq.n	8013c12 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8013be0:	68fb      	ldr	r3, [r7, #12]
 8013be2:	681b      	ldr	r3, [r3, #0]
 8013be4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013be6:	697b      	ldr	r3, [r7, #20]
 8013be8:	e853 3f00 	ldrex	r3, [r3]
 8013bec:	613b      	str	r3, [r7, #16]
   return(result);
 8013bee:	693b      	ldr	r3, [r7, #16]
 8013bf0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8013bf4:	627b      	str	r3, [r7, #36]	; 0x24
 8013bf6:	68fb      	ldr	r3, [r7, #12]
 8013bf8:	681b      	ldr	r3, [r3, #0]
 8013bfa:	461a      	mov	r2, r3
 8013bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bfe:	623b      	str	r3, [r7, #32]
 8013c00:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013c02:	69f9      	ldr	r1, [r7, #28]
 8013c04:	6a3a      	ldr	r2, [r7, #32]
 8013c06:	e841 2300 	strex	r3, r2, [r1]
 8013c0a:	61bb      	str	r3, [r7, #24]
   return(result);
 8013c0c:	69bb      	ldr	r3, [r7, #24]
 8013c0e:	2b00      	cmp	r3, #0
 8013c10:	d1e6      	bne.n	8013be0 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8013c12:	88fb      	ldrh	r3, [r7, #6]
 8013c14:	461a      	mov	r2, r3
 8013c16:	68b9      	ldr	r1, [r7, #8]
 8013c18:	68f8      	ldr	r0, [r7, #12]
 8013c1a:	f001 fadb 	bl	80151d4 <UART_Start_Receive_IT>
 8013c1e:	4603      	mov	r3, r0
 8013c20:	e000      	b.n	8013c24 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8013c22:	2302      	movs	r3, #2
  }
}
 8013c24:	4618      	mov	r0, r3
 8013c26:	3728      	adds	r7, #40	; 0x28
 8013c28:	46bd      	mov	sp, r7
 8013c2a:	bd80      	pop	{r7, pc}
 8013c2c:	58000c00 	.word	0x58000c00

08013c30 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8013c30:	b580      	push	{r7, lr}
 8013c32:	b0ba      	sub	sp, #232	; 0xe8
 8013c34:	af00      	add	r7, sp, #0
 8013c36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	681b      	ldr	r3, [r3, #0]
 8013c3c:	69db      	ldr	r3, [r3, #28]
 8013c3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8013c42:	687b      	ldr	r3, [r7, #4]
 8013c44:	681b      	ldr	r3, [r3, #0]
 8013c46:	681b      	ldr	r3, [r3, #0]
 8013c48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	681b      	ldr	r3, [r3, #0]
 8013c50:	689b      	ldr	r3, [r3, #8]
 8013c52:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8013c56:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8013c5a:	f640 030f 	movw	r3, #2063	; 0x80f
 8013c5e:	4013      	ands	r3, r2
 8013c60:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8013c64:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8013c68:	2b00      	cmp	r3, #0
 8013c6a:	d11b      	bne.n	8013ca4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8013c6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013c70:	f003 0320 	and.w	r3, r3, #32
 8013c74:	2b00      	cmp	r3, #0
 8013c76:	d015      	beq.n	8013ca4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8013c78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8013c7c:	f003 0320 	and.w	r3, r3, #32
 8013c80:	2b00      	cmp	r3, #0
 8013c82:	d105      	bne.n	8013c90 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8013c84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8013c88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013c8c:	2b00      	cmp	r3, #0
 8013c8e:	d009      	beq.n	8013ca4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8013c90:	687b      	ldr	r3, [r7, #4]
 8013c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013c94:	2b00      	cmp	r3, #0
 8013c96:	f000 835a 	beq.w	801434e <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 8013c9a:	687b      	ldr	r3, [r7, #4]
 8013c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013c9e:	6878      	ldr	r0, [r7, #4]
 8013ca0:	4798      	blx	r3
      }
      return;
 8013ca2:	e354      	b.n	801434e <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8013ca4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8013ca8:	2b00      	cmp	r3, #0
 8013caa:	f000 811f 	beq.w	8013eec <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8013cae:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8013cb2:	4b8b      	ldr	r3, [pc, #556]	; (8013ee0 <HAL_UART_IRQHandler+0x2b0>)
 8013cb4:	4013      	ands	r3, r2
 8013cb6:	2b00      	cmp	r3, #0
 8013cb8:	d106      	bne.n	8013cc8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8013cba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8013cbe:	4b89      	ldr	r3, [pc, #548]	; (8013ee4 <HAL_UART_IRQHandler+0x2b4>)
 8013cc0:	4013      	ands	r3, r2
 8013cc2:	2b00      	cmp	r3, #0
 8013cc4:	f000 8112 	beq.w	8013eec <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8013cc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013ccc:	f003 0301 	and.w	r3, r3, #1
 8013cd0:	2b00      	cmp	r3, #0
 8013cd2:	d011      	beq.n	8013cf8 <HAL_UART_IRQHandler+0xc8>
 8013cd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8013cd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013cdc:	2b00      	cmp	r3, #0
 8013cde:	d00b      	beq.n	8013cf8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8013ce0:	687b      	ldr	r3, [r7, #4]
 8013ce2:	681b      	ldr	r3, [r3, #0]
 8013ce4:	2201      	movs	r2, #1
 8013ce6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013cee:	f043 0201 	orr.w	r2, r3, #1
 8013cf2:	687b      	ldr	r3, [r7, #4]
 8013cf4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8013cf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013cfc:	f003 0302 	and.w	r3, r3, #2
 8013d00:	2b00      	cmp	r3, #0
 8013d02:	d011      	beq.n	8013d28 <HAL_UART_IRQHandler+0xf8>
 8013d04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8013d08:	f003 0301 	and.w	r3, r3, #1
 8013d0c:	2b00      	cmp	r3, #0
 8013d0e:	d00b      	beq.n	8013d28 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8013d10:	687b      	ldr	r3, [r7, #4]
 8013d12:	681b      	ldr	r3, [r3, #0]
 8013d14:	2202      	movs	r2, #2
 8013d16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8013d18:	687b      	ldr	r3, [r7, #4]
 8013d1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013d1e:	f043 0204 	orr.w	r2, r3, #4
 8013d22:	687b      	ldr	r3, [r7, #4]
 8013d24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8013d28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013d2c:	f003 0304 	and.w	r3, r3, #4
 8013d30:	2b00      	cmp	r3, #0
 8013d32:	d011      	beq.n	8013d58 <HAL_UART_IRQHandler+0x128>
 8013d34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8013d38:	f003 0301 	and.w	r3, r3, #1
 8013d3c:	2b00      	cmp	r3, #0
 8013d3e:	d00b      	beq.n	8013d58 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	681b      	ldr	r3, [r3, #0]
 8013d44:	2204      	movs	r2, #4
 8013d46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8013d48:	687b      	ldr	r3, [r7, #4]
 8013d4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013d4e:	f043 0202 	orr.w	r2, r3, #2
 8013d52:	687b      	ldr	r3, [r7, #4]
 8013d54:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8013d58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013d5c:	f003 0308 	and.w	r3, r3, #8
 8013d60:	2b00      	cmp	r3, #0
 8013d62:	d017      	beq.n	8013d94 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8013d64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8013d68:	f003 0320 	and.w	r3, r3, #32
 8013d6c:	2b00      	cmp	r3, #0
 8013d6e:	d105      	bne.n	8013d7c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8013d70:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8013d74:	4b5a      	ldr	r3, [pc, #360]	; (8013ee0 <HAL_UART_IRQHandler+0x2b0>)
 8013d76:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8013d78:	2b00      	cmp	r3, #0
 8013d7a:	d00b      	beq.n	8013d94 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	681b      	ldr	r3, [r3, #0]
 8013d80:	2208      	movs	r2, #8
 8013d82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013d8a:	f043 0208 	orr.w	r2, r3, #8
 8013d8e:	687b      	ldr	r3, [r7, #4]
 8013d90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8013d94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013d98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013d9c:	2b00      	cmp	r3, #0
 8013d9e:	d012      	beq.n	8013dc6 <HAL_UART_IRQHandler+0x196>
 8013da0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8013da4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8013da8:	2b00      	cmp	r3, #0
 8013daa:	d00c      	beq.n	8013dc6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8013dac:	687b      	ldr	r3, [r7, #4]
 8013dae:	681b      	ldr	r3, [r3, #0]
 8013db0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8013db4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8013db6:	687b      	ldr	r3, [r7, #4]
 8013db8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013dbc:	f043 0220 	orr.w	r2, r3, #32
 8013dc0:	687b      	ldr	r3, [r7, #4]
 8013dc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013dcc:	2b00      	cmp	r3, #0
 8013dce:	f000 82c0 	beq.w	8014352 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8013dd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013dd6:	f003 0320 	and.w	r3, r3, #32
 8013dda:	2b00      	cmp	r3, #0
 8013ddc:	d013      	beq.n	8013e06 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8013dde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8013de2:	f003 0320 	and.w	r3, r3, #32
 8013de6:	2b00      	cmp	r3, #0
 8013de8:	d105      	bne.n	8013df6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8013dea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8013dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013df2:	2b00      	cmp	r3, #0
 8013df4:	d007      	beq.n	8013e06 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8013df6:	687b      	ldr	r3, [r7, #4]
 8013df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013dfa:	2b00      	cmp	r3, #0
 8013dfc:	d003      	beq.n	8013e06 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8013dfe:	687b      	ldr	r3, [r7, #4]
 8013e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013e02:	6878      	ldr	r0, [r7, #4]
 8013e04:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8013e06:	687b      	ldr	r3, [r7, #4]
 8013e08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013e0c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8013e10:	687b      	ldr	r3, [r7, #4]
 8013e12:	681b      	ldr	r3, [r3, #0]
 8013e14:	689b      	ldr	r3, [r3, #8]
 8013e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013e1a:	2b40      	cmp	r3, #64	; 0x40
 8013e1c:	d005      	beq.n	8013e2a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8013e1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8013e22:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8013e26:	2b00      	cmp	r3, #0
 8013e28:	d04f      	beq.n	8013eca <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8013e2a:	6878      	ldr	r0, [r7, #4]
 8013e2c:	f001 fafc 	bl	8015428 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013e30:	687b      	ldr	r3, [r7, #4]
 8013e32:	681b      	ldr	r3, [r3, #0]
 8013e34:	689b      	ldr	r3, [r3, #8]
 8013e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013e3a:	2b40      	cmp	r3, #64	; 0x40
 8013e3c:	d141      	bne.n	8013ec2 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	681b      	ldr	r3, [r3, #0]
 8013e42:	3308      	adds	r3, #8
 8013e44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013e48:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8013e4c:	e853 3f00 	ldrex	r3, [r3]
 8013e50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8013e54:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8013e58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013e5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8013e60:	687b      	ldr	r3, [r7, #4]
 8013e62:	681b      	ldr	r3, [r3, #0]
 8013e64:	3308      	adds	r3, #8
 8013e66:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8013e6a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8013e6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013e72:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8013e76:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8013e7a:	e841 2300 	strex	r3, r2, [r1]
 8013e7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8013e82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	d1d9      	bne.n	8013e3e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013e8e:	2b00      	cmp	r3, #0
 8013e90:	d013      	beq.n	8013eba <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8013e92:	687b      	ldr	r3, [r7, #4]
 8013e94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013e96:	4a14      	ldr	r2, [pc, #80]	; (8013ee8 <HAL_UART_IRQHandler+0x2b8>)
 8013e98:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8013e9a:	687b      	ldr	r3, [r7, #4]
 8013e9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013e9e:	4618      	mov	r0, r3
 8013ea0:	f7f7 faa2 	bl	800b3e8 <HAL_DMA_Abort_IT>
 8013ea4:	4603      	mov	r3, r0
 8013ea6:	2b00      	cmp	r3, #0
 8013ea8:	d017      	beq.n	8013eda <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8013eaa:	687b      	ldr	r3, [r7, #4]
 8013eac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013eae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013eb0:	687a      	ldr	r2, [r7, #4]
 8013eb2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8013eb4:	4610      	mov	r0, r2
 8013eb6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013eb8:	e00f      	b.n	8013eda <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8013eba:	6878      	ldr	r0, [r7, #4]
 8013ebc:	f000 fa56 	bl	801436c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013ec0:	e00b      	b.n	8013eda <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8013ec2:	6878      	ldr	r0, [r7, #4]
 8013ec4:	f000 fa52 	bl	801436c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013ec8:	e007      	b.n	8013eda <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8013eca:	6878      	ldr	r0, [r7, #4]
 8013ecc:	f000 fa4e 	bl	801436c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013ed0:	687b      	ldr	r3, [r7, #4]
 8013ed2:	2200      	movs	r2, #0
 8013ed4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8013ed8:	e23b      	b.n	8014352 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013eda:	bf00      	nop
    return;
 8013edc:	e239      	b.n	8014352 <HAL_UART_IRQHandler+0x722>
 8013ede:	bf00      	nop
 8013ee0:	10000001 	.word	0x10000001
 8013ee4:	04000120 	.word	0x04000120
 8013ee8:	080154f5 	.word	0x080154f5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013eec:	687b      	ldr	r3, [r7, #4]
 8013eee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013ef0:	2b01      	cmp	r3, #1
 8013ef2:	f040 81ce 	bne.w	8014292 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8013ef6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013efa:	f003 0310 	and.w	r3, r3, #16
 8013efe:	2b00      	cmp	r3, #0
 8013f00:	f000 81c7 	beq.w	8014292 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8013f04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8013f08:	f003 0310 	and.w	r3, r3, #16
 8013f0c:	2b00      	cmp	r3, #0
 8013f0e:	f000 81c0 	beq.w	8014292 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	681b      	ldr	r3, [r3, #0]
 8013f16:	2210      	movs	r2, #16
 8013f18:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	681b      	ldr	r3, [r3, #0]
 8013f1e:	689b      	ldr	r3, [r3, #8]
 8013f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013f24:	2b40      	cmp	r3, #64	; 0x40
 8013f26:	f040 813b 	bne.w	80141a0 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013f2e:	681b      	ldr	r3, [r3, #0]
 8013f30:	4a8b      	ldr	r2, [pc, #556]	; (8014160 <HAL_UART_IRQHandler+0x530>)
 8013f32:	4293      	cmp	r3, r2
 8013f34:	d059      	beq.n	8013fea <HAL_UART_IRQHandler+0x3ba>
 8013f36:	687b      	ldr	r3, [r7, #4]
 8013f38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013f3a:	681b      	ldr	r3, [r3, #0]
 8013f3c:	4a89      	ldr	r2, [pc, #548]	; (8014164 <HAL_UART_IRQHandler+0x534>)
 8013f3e:	4293      	cmp	r3, r2
 8013f40:	d053      	beq.n	8013fea <HAL_UART_IRQHandler+0x3ba>
 8013f42:	687b      	ldr	r3, [r7, #4]
 8013f44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013f46:	681b      	ldr	r3, [r3, #0]
 8013f48:	4a87      	ldr	r2, [pc, #540]	; (8014168 <HAL_UART_IRQHandler+0x538>)
 8013f4a:	4293      	cmp	r3, r2
 8013f4c:	d04d      	beq.n	8013fea <HAL_UART_IRQHandler+0x3ba>
 8013f4e:	687b      	ldr	r3, [r7, #4]
 8013f50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013f52:	681b      	ldr	r3, [r3, #0]
 8013f54:	4a85      	ldr	r2, [pc, #532]	; (801416c <HAL_UART_IRQHandler+0x53c>)
 8013f56:	4293      	cmp	r3, r2
 8013f58:	d047      	beq.n	8013fea <HAL_UART_IRQHandler+0x3ba>
 8013f5a:	687b      	ldr	r3, [r7, #4]
 8013f5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013f5e:	681b      	ldr	r3, [r3, #0]
 8013f60:	4a83      	ldr	r2, [pc, #524]	; (8014170 <HAL_UART_IRQHandler+0x540>)
 8013f62:	4293      	cmp	r3, r2
 8013f64:	d041      	beq.n	8013fea <HAL_UART_IRQHandler+0x3ba>
 8013f66:	687b      	ldr	r3, [r7, #4]
 8013f68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013f6a:	681b      	ldr	r3, [r3, #0]
 8013f6c:	4a81      	ldr	r2, [pc, #516]	; (8014174 <HAL_UART_IRQHandler+0x544>)
 8013f6e:	4293      	cmp	r3, r2
 8013f70:	d03b      	beq.n	8013fea <HAL_UART_IRQHandler+0x3ba>
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013f76:	681b      	ldr	r3, [r3, #0]
 8013f78:	4a7f      	ldr	r2, [pc, #508]	; (8014178 <HAL_UART_IRQHandler+0x548>)
 8013f7a:	4293      	cmp	r3, r2
 8013f7c:	d035      	beq.n	8013fea <HAL_UART_IRQHandler+0x3ba>
 8013f7e:	687b      	ldr	r3, [r7, #4]
 8013f80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013f82:	681b      	ldr	r3, [r3, #0]
 8013f84:	4a7d      	ldr	r2, [pc, #500]	; (801417c <HAL_UART_IRQHandler+0x54c>)
 8013f86:	4293      	cmp	r3, r2
 8013f88:	d02f      	beq.n	8013fea <HAL_UART_IRQHandler+0x3ba>
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013f8e:	681b      	ldr	r3, [r3, #0]
 8013f90:	4a7b      	ldr	r2, [pc, #492]	; (8014180 <HAL_UART_IRQHandler+0x550>)
 8013f92:	4293      	cmp	r3, r2
 8013f94:	d029      	beq.n	8013fea <HAL_UART_IRQHandler+0x3ba>
 8013f96:	687b      	ldr	r3, [r7, #4]
 8013f98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013f9a:	681b      	ldr	r3, [r3, #0]
 8013f9c:	4a79      	ldr	r2, [pc, #484]	; (8014184 <HAL_UART_IRQHandler+0x554>)
 8013f9e:	4293      	cmp	r3, r2
 8013fa0:	d023      	beq.n	8013fea <HAL_UART_IRQHandler+0x3ba>
 8013fa2:	687b      	ldr	r3, [r7, #4]
 8013fa4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013fa6:	681b      	ldr	r3, [r3, #0]
 8013fa8:	4a77      	ldr	r2, [pc, #476]	; (8014188 <HAL_UART_IRQHandler+0x558>)
 8013faa:	4293      	cmp	r3, r2
 8013fac:	d01d      	beq.n	8013fea <HAL_UART_IRQHandler+0x3ba>
 8013fae:	687b      	ldr	r3, [r7, #4]
 8013fb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013fb2:	681b      	ldr	r3, [r3, #0]
 8013fb4:	4a75      	ldr	r2, [pc, #468]	; (801418c <HAL_UART_IRQHandler+0x55c>)
 8013fb6:	4293      	cmp	r3, r2
 8013fb8:	d017      	beq.n	8013fea <HAL_UART_IRQHandler+0x3ba>
 8013fba:	687b      	ldr	r3, [r7, #4]
 8013fbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013fbe:	681b      	ldr	r3, [r3, #0]
 8013fc0:	4a73      	ldr	r2, [pc, #460]	; (8014190 <HAL_UART_IRQHandler+0x560>)
 8013fc2:	4293      	cmp	r3, r2
 8013fc4:	d011      	beq.n	8013fea <HAL_UART_IRQHandler+0x3ba>
 8013fc6:	687b      	ldr	r3, [r7, #4]
 8013fc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013fca:	681b      	ldr	r3, [r3, #0]
 8013fcc:	4a71      	ldr	r2, [pc, #452]	; (8014194 <HAL_UART_IRQHandler+0x564>)
 8013fce:	4293      	cmp	r3, r2
 8013fd0:	d00b      	beq.n	8013fea <HAL_UART_IRQHandler+0x3ba>
 8013fd2:	687b      	ldr	r3, [r7, #4]
 8013fd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013fd6:	681b      	ldr	r3, [r3, #0]
 8013fd8:	4a6f      	ldr	r2, [pc, #444]	; (8014198 <HAL_UART_IRQHandler+0x568>)
 8013fda:	4293      	cmp	r3, r2
 8013fdc:	d005      	beq.n	8013fea <HAL_UART_IRQHandler+0x3ba>
 8013fde:	687b      	ldr	r3, [r7, #4]
 8013fe0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013fe2:	681b      	ldr	r3, [r3, #0]
 8013fe4:	4a6d      	ldr	r2, [pc, #436]	; (801419c <HAL_UART_IRQHandler+0x56c>)
 8013fe6:	4293      	cmp	r3, r2
 8013fe8:	d105      	bne.n	8013ff6 <HAL_UART_IRQHandler+0x3c6>
 8013fea:	687b      	ldr	r3, [r7, #4]
 8013fec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013fee:	681b      	ldr	r3, [r3, #0]
 8013ff0:	685b      	ldr	r3, [r3, #4]
 8013ff2:	b29b      	uxth	r3, r3
 8013ff4:	e004      	b.n	8014000 <HAL_UART_IRQHandler+0x3d0>
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013ffa:	681b      	ldr	r3, [r3, #0]
 8013ffc:	685b      	ldr	r3, [r3, #4]
 8013ffe:	b29b      	uxth	r3, r3
 8014000:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8014004:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8014008:	2b00      	cmp	r3, #0
 801400a:	f000 81a4 	beq.w	8014356 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801400e:	687b      	ldr	r3, [r7, #4]
 8014010:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8014014:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8014018:	429a      	cmp	r2, r3
 801401a:	f080 819c 	bcs.w	8014356 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801401e:	687b      	ldr	r3, [r7, #4]
 8014020:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8014024:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8014028:	687b      	ldr	r3, [r7, #4]
 801402a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801402c:	69db      	ldr	r3, [r3, #28]
 801402e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014032:	f000 8086 	beq.w	8014142 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8014036:	687b      	ldr	r3, [r7, #4]
 8014038:	681b      	ldr	r3, [r3, #0]
 801403a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801403e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014042:	e853 3f00 	ldrex	r3, [r3]
 8014046:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 801404a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801404e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014052:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8014056:	687b      	ldr	r3, [r7, #4]
 8014058:	681b      	ldr	r3, [r3, #0]
 801405a:	461a      	mov	r2, r3
 801405c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014060:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8014064:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014068:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 801406c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8014070:	e841 2300 	strex	r3, r2, [r1]
 8014074:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8014078:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801407c:	2b00      	cmp	r3, #0
 801407e:	d1da      	bne.n	8014036 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014080:	687b      	ldr	r3, [r7, #4]
 8014082:	681b      	ldr	r3, [r3, #0]
 8014084:	3308      	adds	r3, #8
 8014086:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014088:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801408a:	e853 3f00 	ldrex	r3, [r3]
 801408e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8014090:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014092:	f023 0301 	bic.w	r3, r3, #1
 8014096:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801409a:	687b      	ldr	r3, [r7, #4]
 801409c:	681b      	ldr	r3, [r3, #0]
 801409e:	3308      	adds	r3, #8
 80140a0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80140a4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80140a8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80140aa:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80140ac:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80140b0:	e841 2300 	strex	r3, r2, [r1]
 80140b4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80140b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80140b8:	2b00      	cmp	r3, #0
 80140ba:	d1e1      	bne.n	8014080 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	681b      	ldr	r3, [r3, #0]
 80140c0:	3308      	adds	r3, #8
 80140c2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80140c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80140c6:	e853 3f00 	ldrex	r3, [r3]
 80140ca:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80140cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80140ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80140d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80140d6:	687b      	ldr	r3, [r7, #4]
 80140d8:	681b      	ldr	r3, [r3, #0]
 80140da:	3308      	adds	r3, #8
 80140dc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80140e0:	66fa      	str	r2, [r7, #108]	; 0x6c
 80140e2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80140e4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80140e6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80140e8:	e841 2300 	strex	r3, r2, [r1]
 80140ec:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80140ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80140f0:	2b00      	cmp	r3, #0
 80140f2:	d1e3      	bne.n	80140bc <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80140f4:	687b      	ldr	r3, [r7, #4]
 80140f6:	2220      	movs	r2, #32
 80140f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	2200      	movs	r2, #0
 8014100:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	681b      	ldr	r3, [r3, #0]
 8014106:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014108:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801410a:	e853 3f00 	ldrex	r3, [r3]
 801410e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8014110:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014112:	f023 0310 	bic.w	r3, r3, #16
 8014116:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801411a:	687b      	ldr	r3, [r7, #4]
 801411c:	681b      	ldr	r3, [r3, #0]
 801411e:	461a      	mov	r2, r3
 8014120:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014124:	65bb      	str	r3, [r7, #88]	; 0x58
 8014126:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014128:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801412a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801412c:	e841 2300 	strex	r3, r2, [r1]
 8014130:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8014132:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014134:	2b00      	cmp	r3, #0
 8014136:	d1e4      	bne.n	8014102 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8014138:	687b      	ldr	r3, [r7, #4]
 801413a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801413c:	4618      	mov	r0, r3
 801413e:	f7f6 fe35 	bl	800adac <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8014142:	687b      	ldr	r3, [r7, #4]
 8014144:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8014148:	687b      	ldr	r3, [r7, #4]
 801414a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801414e:	b29b      	uxth	r3, r3
 8014150:	1ad3      	subs	r3, r2, r3
 8014152:	b29b      	uxth	r3, r3
 8014154:	4619      	mov	r1, r3
 8014156:	6878      	ldr	r0, [r7, #4]
 8014158:	f000 f912 	bl	8014380 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801415c:	e0fb      	b.n	8014356 <HAL_UART_IRQHandler+0x726>
 801415e:	bf00      	nop
 8014160:	40020010 	.word	0x40020010
 8014164:	40020028 	.word	0x40020028
 8014168:	40020040 	.word	0x40020040
 801416c:	40020058 	.word	0x40020058
 8014170:	40020070 	.word	0x40020070
 8014174:	40020088 	.word	0x40020088
 8014178:	400200a0 	.word	0x400200a0
 801417c:	400200b8 	.word	0x400200b8
 8014180:	40020410 	.word	0x40020410
 8014184:	40020428 	.word	0x40020428
 8014188:	40020440 	.word	0x40020440
 801418c:	40020458 	.word	0x40020458
 8014190:	40020470 	.word	0x40020470
 8014194:	40020488 	.word	0x40020488
 8014198:	400204a0 	.word	0x400204a0
 801419c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80141a0:	687b      	ldr	r3, [r7, #4]
 80141a2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80141a6:	687b      	ldr	r3, [r7, #4]
 80141a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80141ac:	b29b      	uxth	r3, r3
 80141ae:	1ad3      	subs	r3, r2, r3
 80141b0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80141b4:	687b      	ldr	r3, [r7, #4]
 80141b6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80141ba:	b29b      	uxth	r3, r3
 80141bc:	2b00      	cmp	r3, #0
 80141be:	f000 80cc 	beq.w	801435a <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 80141c2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80141c6:	2b00      	cmp	r3, #0
 80141c8:	f000 80c7 	beq.w	801435a <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80141cc:	687b      	ldr	r3, [r7, #4]
 80141ce:	681b      	ldr	r3, [r3, #0]
 80141d0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80141d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141d4:	e853 3f00 	ldrex	r3, [r3]
 80141d8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80141da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80141dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80141e0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80141e4:	687b      	ldr	r3, [r7, #4]
 80141e6:	681b      	ldr	r3, [r3, #0]
 80141e8:	461a      	mov	r2, r3
 80141ea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80141ee:	647b      	str	r3, [r7, #68]	; 0x44
 80141f0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80141f2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80141f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80141f6:	e841 2300 	strex	r3, r2, [r1]
 80141fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80141fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80141fe:	2b00      	cmp	r3, #0
 8014200:	d1e4      	bne.n	80141cc <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	681b      	ldr	r3, [r3, #0]
 8014206:	3308      	adds	r3, #8
 8014208:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801420a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801420c:	e853 3f00 	ldrex	r3, [r3]
 8014210:	623b      	str	r3, [r7, #32]
   return(result);
 8014212:	6a3a      	ldr	r2, [r7, #32]
 8014214:	4b54      	ldr	r3, [pc, #336]	; (8014368 <HAL_UART_IRQHandler+0x738>)
 8014216:	4013      	ands	r3, r2
 8014218:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801421c:	687b      	ldr	r3, [r7, #4]
 801421e:	681b      	ldr	r3, [r3, #0]
 8014220:	3308      	adds	r3, #8
 8014222:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8014226:	633a      	str	r2, [r7, #48]	; 0x30
 8014228:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801422a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801422c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801422e:	e841 2300 	strex	r3, r2, [r1]
 8014232:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8014234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014236:	2b00      	cmp	r3, #0
 8014238:	d1e3      	bne.n	8014202 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801423a:	687b      	ldr	r3, [r7, #4]
 801423c:	2220      	movs	r2, #32
 801423e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014242:	687b      	ldr	r3, [r7, #4]
 8014244:	2200      	movs	r2, #0
 8014246:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8014248:	687b      	ldr	r3, [r7, #4]
 801424a:	2200      	movs	r2, #0
 801424c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	681b      	ldr	r3, [r3, #0]
 8014252:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014254:	693b      	ldr	r3, [r7, #16]
 8014256:	e853 3f00 	ldrex	r3, [r3]
 801425a:	60fb      	str	r3, [r7, #12]
   return(result);
 801425c:	68fb      	ldr	r3, [r7, #12]
 801425e:	f023 0310 	bic.w	r3, r3, #16
 8014262:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8014266:	687b      	ldr	r3, [r7, #4]
 8014268:	681b      	ldr	r3, [r3, #0]
 801426a:	461a      	mov	r2, r3
 801426c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8014270:	61fb      	str	r3, [r7, #28]
 8014272:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014274:	69b9      	ldr	r1, [r7, #24]
 8014276:	69fa      	ldr	r2, [r7, #28]
 8014278:	e841 2300 	strex	r3, r2, [r1]
 801427c:	617b      	str	r3, [r7, #20]
   return(result);
 801427e:	697b      	ldr	r3, [r7, #20]
 8014280:	2b00      	cmp	r3, #0
 8014282:	d1e4      	bne.n	801424e <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8014284:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8014288:	4619      	mov	r1, r3
 801428a:	6878      	ldr	r0, [r7, #4]
 801428c:	f000 f878 	bl	8014380 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8014290:	e063      	b.n	801435a <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8014292:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014296:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801429a:	2b00      	cmp	r3, #0
 801429c:	d00e      	beq.n	80142bc <HAL_UART_IRQHandler+0x68c>
 801429e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80142a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80142a6:	2b00      	cmp	r3, #0
 80142a8:	d008      	beq.n	80142bc <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	681b      	ldr	r3, [r3, #0]
 80142ae:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80142b2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80142b4:	6878      	ldr	r0, [r7, #4]
 80142b6:	f001 ff5d 	bl	8016174 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80142ba:	e051      	b.n	8014360 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80142bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80142c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80142c4:	2b00      	cmp	r3, #0
 80142c6:	d014      	beq.n	80142f2 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80142c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80142cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80142d0:	2b00      	cmp	r3, #0
 80142d2:	d105      	bne.n	80142e0 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80142d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80142d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80142dc:	2b00      	cmp	r3, #0
 80142de:	d008      	beq.n	80142f2 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 80142e0:	687b      	ldr	r3, [r7, #4]
 80142e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80142e4:	2b00      	cmp	r3, #0
 80142e6:	d03a      	beq.n	801435e <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 80142e8:	687b      	ldr	r3, [r7, #4]
 80142ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80142ec:	6878      	ldr	r0, [r7, #4]
 80142ee:	4798      	blx	r3
    }
    return;
 80142f0:	e035      	b.n	801435e <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80142f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80142f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80142fa:	2b00      	cmp	r3, #0
 80142fc:	d009      	beq.n	8014312 <HAL_UART_IRQHandler+0x6e2>
 80142fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014302:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014306:	2b00      	cmp	r3, #0
 8014308:	d003      	beq.n	8014312 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 801430a:	6878      	ldr	r0, [r7, #4]
 801430c:	f001 faaa 	bl	8015864 <UART_EndTransmit_IT>
    return;
 8014310:	e026      	b.n	8014360 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8014312:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014316:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801431a:	2b00      	cmp	r3, #0
 801431c:	d009      	beq.n	8014332 <HAL_UART_IRQHandler+0x702>
 801431e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014322:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8014326:	2b00      	cmp	r3, #0
 8014328:	d003      	beq.n	8014332 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 801432a:	6878      	ldr	r0, [r7, #4]
 801432c:	f001 ff36 	bl	801619c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8014330:	e016      	b.n	8014360 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8014332:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014336:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801433a:	2b00      	cmp	r3, #0
 801433c:	d010      	beq.n	8014360 <HAL_UART_IRQHandler+0x730>
 801433e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014342:	2b00      	cmp	r3, #0
 8014344:	da0c      	bge.n	8014360 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8014346:	6878      	ldr	r0, [r7, #4]
 8014348:	f001 ff1e 	bl	8016188 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801434c:	e008      	b.n	8014360 <HAL_UART_IRQHandler+0x730>
      return;
 801434e:	bf00      	nop
 8014350:	e006      	b.n	8014360 <HAL_UART_IRQHandler+0x730>
    return;
 8014352:	bf00      	nop
 8014354:	e004      	b.n	8014360 <HAL_UART_IRQHandler+0x730>
      return;
 8014356:	bf00      	nop
 8014358:	e002      	b.n	8014360 <HAL_UART_IRQHandler+0x730>
      return;
 801435a:	bf00      	nop
 801435c:	e000      	b.n	8014360 <HAL_UART_IRQHandler+0x730>
    return;
 801435e:	bf00      	nop
  }
}
 8014360:	37e8      	adds	r7, #232	; 0xe8
 8014362:	46bd      	mov	sp, r7
 8014364:	bd80      	pop	{r7, pc}
 8014366:	bf00      	nop
 8014368:	effffffe 	.word	0xeffffffe

0801436c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801436c:	b480      	push	{r7}
 801436e:	b083      	sub	sp, #12
 8014370:	af00      	add	r7, sp, #0
 8014372:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8014374:	bf00      	nop
 8014376:	370c      	adds	r7, #12
 8014378:	46bd      	mov	sp, r7
 801437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801437e:	4770      	bx	lr

08014380 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8014380:	b480      	push	{r7}
 8014382:	b083      	sub	sp, #12
 8014384:	af00      	add	r7, sp, #0
 8014386:	6078      	str	r0, [r7, #4]
 8014388:	460b      	mov	r3, r1
 801438a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 801438c:	bf00      	nop
 801438e:	370c      	adds	r7, #12
 8014390:	46bd      	mov	sp, r7
 8014392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014396:	4770      	bx	lr

08014398 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8014398:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801439c:	b092      	sub	sp, #72	; 0x48
 801439e:	af00      	add	r7, sp, #0
 80143a0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80143a2:	2300      	movs	r3, #0
 80143a4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80143a8:	697b      	ldr	r3, [r7, #20]
 80143aa:	689a      	ldr	r2, [r3, #8]
 80143ac:	697b      	ldr	r3, [r7, #20]
 80143ae:	691b      	ldr	r3, [r3, #16]
 80143b0:	431a      	orrs	r2, r3
 80143b2:	697b      	ldr	r3, [r7, #20]
 80143b4:	695b      	ldr	r3, [r3, #20]
 80143b6:	431a      	orrs	r2, r3
 80143b8:	697b      	ldr	r3, [r7, #20]
 80143ba:	69db      	ldr	r3, [r3, #28]
 80143bc:	4313      	orrs	r3, r2
 80143be:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80143c0:	697b      	ldr	r3, [r7, #20]
 80143c2:	681b      	ldr	r3, [r3, #0]
 80143c4:	681a      	ldr	r2, [r3, #0]
 80143c6:	4bbe      	ldr	r3, [pc, #760]	; (80146c0 <UART_SetConfig+0x328>)
 80143c8:	4013      	ands	r3, r2
 80143ca:	697a      	ldr	r2, [r7, #20]
 80143cc:	6812      	ldr	r2, [r2, #0]
 80143ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80143d0:	430b      	orrs	r3, r1
 80143d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80143d4:	697b      	ldr	r3, [r7, #20]
 80143d6:	681b      	ldr	r3, [r3, #0]
 80143d8:	685b      	ldr	r3, [r3, #4]
 80143da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80143de:	697b      	ldr	r3, [r7, #20]
 80143e0:	68da      	ldr	r2, [r3, #12]
 80143e2:	697b      	ldr	r3, [r7, #20]
 80143e4:	681b      	ldr	r3, [r3, #0]
 80143e6:	430a      	orrs	r2, r1
 80143e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80143ea:	697b      	ldr	r3, [r7, #20]
 80143ec:	699b      	ldr	r3, [r3, #24]
 80143ee:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80143f0:	697b      	ldr	r3, [r7, #20]
 80143f2:	681b      	ldr	r3, [r3, #0]
 80143f4:	4ab3      	ldr	r2, [pc, #716]	; (80146c4 <UART_SetConfig+0x32c>)
 80143f6:	4293      	cmp	r3, r2
 80143f8:	d004      	beq.n	8014404 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80143fa:	697b      	ldr	r3, [r7, #20]
 80143fc:	6a1b      	ldr	r3, [r3, #32]
 80143fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014400:	4313      	orrs	r3, r2
 8014402:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8014404:	697b      	ldr	r3, [r7, #20]
 8014406:	681b      	ldr	r3, [r3, #0]
 8014408:	689a      	ldr	r2, [r3, #8]
 801440a:	4baf      	ldr	r3, [pc, #700]	; (80146c8 <UART_SetConfig+0x330>)
 801440c:	4013      	ands	r3, r2
 801440e:	697a      	ldr	r2, [r7, #20]
 8014410:	6812      	ldr	r2, [r2, #0]
 8014412:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014414:	430b      	orrs	r3, r1
 8014416:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8014418:	697b      	ldr	r3, [r7, #20]
 801441a:	681b      	ldr	r3, [r3, #0]
 801441c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801441e:	f023 010f 	bic.w	r1, r3, #15
 8014422:	697b      	ldr	r3, [r7, #20]
 8014424:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014426:	697b      	ldr	r3, [r7, #20]
 8014428:	681b      	ldr	r3, [r3, #0]
 801442a:	430a      	orrs	r2, r1
 801442c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801442e:	697b      	ldr	r3, [r7, #20]
 8014430:	681b      	ldr	r3, [r3, #0]
 8014432:	4aa6      	ldr	r2, [pc, #664]	; (80146cc <UART_SetConfig+0x334>)
 8014434:	4293      	cmp	r3, r2
 8014436:	d177      	bne.n	8014528 <UART_SetConfig+0x190>
 8014438:	4ba5      	ldr	r3, [pc, #660]	; (80146d0 <UART_SetConfig+0x338>)
 801443a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801443c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8014440:	2b28      	cmp	r3, #40	; 0x28
 8014442:	d86d      	bhi.n	8014520 <UART_SetConfig+0x188>
 8014444:	a201      	add	r2, pc, #4	; (adr r2, 801444c <UART_SetConfig+0xb4>)
 8014446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801444a:	bf00      	nop
 801444c:	080144f1 	.word	0x080144f1
 8014450:	08014521 	.word	0x08014521
 8014454:	08014521 	.word	0x08014521
 8014458:	08014521 	.word	0x08014521
 801445c:	08014521 	.word	0x08014521
 8014460:	08014521 	.word	0x08014521
 8014464:	08014521 	.word	0x08014521
 8014468:	08014521 	.word	0x08014521
 801446c:	080144f9 	.word	0x080144f9
 8014470:	08014521 	.word	0x08014521
 8014474:	08014521 	.word	0x08014521
 8014478:	08014521 	.word	0x08014521
 801447c:	08014521 	.word	0x08014521
 8014480:	08014521 	.word	0x08014521
 8014484:	08014521 	.word	0x08014521
 8014488:	08014521 	.word	0x08014521
 801448c:	08014501 	.word	0x08014501
 8014490:	08014521 	.word	0x08014521
 8014494:	08014521 	.word	0x08014521
 8014498:	08014521 	.word	0x08014521
 801449c:	08014521 	.word	0x08014521
 80144a0:	08014521 	.word	0x08014521
 80144a4:	08014521 	.word	0x08014521
 80144a8:	08014521 	.word	0x08014521
 80144ac:	08014509 	.word	0x08014509
 80144b0:	08014521 	.word	0x08014521
 80144b4:	08014521 	.word	0x08014521
 80144b8:	08014521 	.word	0x08014521
 80144bc:	08014521 	.word	0x08014521
 80144c0:	08014521 	.word	0x08014521
 80144c4:	08014521 	.word	0x08014521
 80144c8:	08014521 	.word	0x08014521
 80144cc:	08014511 	.word	0x08014511
 80144d0:	08014521 	.word	0x08014521
 80144d4:	08014521 	.word	0x08014521
 80144d8:	08014521 	.word	0x08014521
 80144dc:	08014521 	.word	0x08014521
 80144e0:	08014521 	.word	0x08014521
 80144e4:	08014521 	.word	0x08014521
 80144e8:	08014521 	.word	0x08014521
 80144ec:	08014519 	.word	0x08014519
 80144f0:	2301      	movs	r3, #1
 80144f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80144f6:	e222      	b.n	801493e <UART_SetConfig+0x5a6>
 80144f8:	2304      	movs	r3, #4
 80144fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80144fe:	e21e      	b.n	801493e <UART_SetConfig+0x5a6>
 8014500:	2308      	movs	r3, #8
 8014502:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014506:	e21a      	b.n	801493e <UART_SetConfig+0x5a6>
 8014508:	2310      	movs	r3, #16
 801450a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801450e:	e216      	b.n	801493e <UART_SetConfig+0x5a6>
 8014510:	2320      	movs	r3, #32
 8014512:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014516:	e212      	b.n	801493e <UART_SetConfig+0x5a6>
 8014518:	2340      	movs	r3, #64	; 0x40
 801451a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801451e:	e20e      	b.n	801493e <UART_SetConfig+0x5a6>
 8014520:	2380      	movs	r3, #128	; 0x80
 8014522:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014526:	e20a      	b.n	801493e <UART_SetConfig+0x5a6>
 8014528:	697b      	ldr	r3, [r7, #20]
 801452a:	681b      	ldr	r3, [r3, #0]
 801452c:	4a69      	ldr	r2, [pc, #420]	; (80146d4 <UART_SetConfig+0x33c>)
 801452e:	4293      	cmp	r3, r2
 8014530:	d130      	bne.n	8014594 <UART_SetConfig+0x1fc>
 8014532:	4b67      	ldr	r3, [pc, #412]	; (80146d0 <UART_SetConfig+0x338>)
 8014534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014536:	f003 0307 	and.w	r3, r3, #7
 801453a:	2b05      	cmp	r3, #5
 801453c:	d826      	bhi.n	801458c <UART_SetConfig+0x1f4>
 801453e:	a201      	add	r2, pc, #4	; (adr r2, 8014544 <UART_SetConfig+0x1ac>)
 8014540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014544:	0801455d 	.word	0x0801455d
 8014548:	08014565 	.word	0x08014565
 801454c:	0801456d 	.word	0x0801456d
 8014550:	08014575 	.word	0x08014575
 8014554:	0801457d 	.word	0x0801457d
 8014558:	08014585 	.word	0x08014585
 801455c:	2300      	movs	r3, #0
 801455e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014562:	e1ec      	b.n	801493e <UART_SetConfig+0x5a6>
 8014564:	2304      	movs	r3, #4
 8014566:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801456a:	e1e8      	b.n	801493e <UART_SetConfig+0x5a6>
 801456c:	2308      	movs	r3, #8
 801456e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014572:	e1e4      	b.n	801493e <UART_SetConfig+0x5a6>
 8014574:	2310      	movs	r3, #16
 8014576:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801457a:	e1e0      	b.n	801493e <UART_SetConfig+0x5a6>
 801457c:	2320      	movs	r3, #32
 801457e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014582:	e1dc      	b.n	801493e <UART_SetConfig+0x5a6>
 8014584:	2340      	movs	r3, #64	; 0x40
 8014586:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801458a:	e1d8      	b.n	801493e <UART_SetConfig+0x5a6>
 801458c:	2380      	movs	r3, #128	; 0x80
 801458e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014592:	e1d4      	b.n	801493e <UART_SetConfig+0x5a6>
 8014594:	697b      	ldr	r3, [r7, #20]
 8014596:	681b      	ldr	r3, [r3, #0]
 8014598:	4a4f      	ldr	r2, [pc, #316]	; (80146d8 <UART_SetConfig+0x340>)
 801459a:	4293      	cmp	r3, r2
 801459c:	d130      	bne.n	8014600 <UART_SetConfig+0x268>
 801459e:	4b4c      	ldr	r3, [pc, #304]	; (80146d0 <UART_SetConfig+0x338>)
 80145a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80145a2:	f003 0307 	and.w	r3, r3, #7
 80145a6:	2b05      	cmp	r3, #5
 80145a8:	d826      	bhi.n	80145f8 <UART_SetConfig+0x260>
 80145aa:	a201      	add	r2, pc, #4	; (adr r2, 80145b0 <UART_SetConfig+0x218>)
 80145ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80145b0:	080145c9 	.word	0x080145c9
 80145b4:	080145d1 	.word	0x080145d1
 80145b8:	080145d9 	.word	0x080145d9
 80145bc:	080145e1 	.word	0x080145e1
 80145c0:	080145e9 	.word	0x080145e9
 80145c4:	080145f1 	.word	0x080145f1
 80145c8:	2300      	movs	r3, #0
 80145ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80145ce:	e1b6      	b.n	801493e <UART_SetConfig+0x5a6>
 80145d0:	2304      	movs	r3, #4
 80145d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80145d6:	e1b2      	b.n	801493e <UART_SetConfig+0x5a6>
 80145d8:	2308      	movs	r3, #8
 80145da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80145de:	e1ae      	b.n	801493e <UART_SetConfig+0x5a6>
 80145e0:	2310      	movs	r3, #16
 80145e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80145e6:	e1aa      	b.n	801493e <UART_SetConfig+0x5a6>
 80145e8:	2320      	movs	r3, #32
 80145ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80145ee:	e1a6      	b.n	801493e <UART_SetConfig+0x5a6>
 80145f0:	2340      	movs	r3, #64	; 0x40
 80145f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80145f6:	e1a2      	b.n	801493e <UART_SetConfig+0x5a6>
 80145f8:	2380      	movs	r3, #128	; 0x80
 80145fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80145fe:	e19e      	b.n	801493e <UART_SetConfig+0x5a6>
 8014600:	697b      	ldr	r3, [r7, #20]
 8014602:	681b      	ldr	r3, [r3, #0]
 8014604:	4a35      	ldr	r2, [pc, #212]	; (80146dc <UART_SetConfig+0x344>)
 8014606:	4293      	cmp	r3, r2
 8014608:	d130      	bne.n	801466c <UART_SetConfig+0x2d4>
 801460a:	4b31      	ldr	r3, [pc, #196]	; (80146d0 <UART_SetConfig+0x338>)
 801460c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801460e:	f003 0307 	and.w	r3, r3, #7
 8014612:	2b05      	cmp	r3, #5
 8014614:	d826      	bhi.n	8014664 <UART_SetConfig+0x2cc>
 8014616:	a201      	add	r2, pc, #4	; (adr r2, 801461c <UART_SetConfig+0x284>)
 8014618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801461c:	08014635 	.word	0x08014635
 8014620:	0801463d 	.word	0x0801463d
 8014624:	08014645 	.word	0x08014645
 8014628:	0801464d 	.word	0x0801464d
 801462c:	08014655 	.word	0x08014655
 8014630:	0801465d 	.word	0x0801465d
 8014634:	2300      	movs	r3, #0
 8014636:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801463a:	e180      	b.n	801493e <UART_SetConfig+0x5a6>
 801463c:	2304      	movs	r3, #4
 801463e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014642:	e17c      	b.n	801493e <UART_SetConfig+0x5a6>
 8014644:	2308      	movs	r3, #8
 8014646:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801464a:	e178      	b.n	801493e <UART_SetConfig+0x5a6>
 801464c:	2310      	movs	r3, #16
 801464e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014652:	e174      	b.n	801493e <UART_SetConfig+0x5a6>
 8014654:	2320      	movs	r3, #32
 8014656:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801465a:	e170      	b.n	801493e <UART_SetConfig+0x5a6>
 801465c:	2340      	movs	r3, #64	; 0x40
 801465e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014662:	e16c      	b.n	801493e <UART_SetConfig+0x5a6>
 8014664:	2380      	movs	r3, #128	; 0x80
 8014666:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801466a:	e168      	b.n	801493e <UART_SetConfig+0x5a6>
 801466c:	697b      	ldr	r3, [r7, #20]
 801466e:	681b      	ldr	r3, [r3, #0]
 8014670:	4a1b      	ldr	r2, [pc, #108]	; (80146e0 <UART_SetConfig+0x348>)
 8014672:	4293      	cmp	r3, r2
 8014674:	d142      	bne.n	80146fc <UART_SetConfig+0x364>
 8014676:	4b16      	ldr	r3, [pc, #88]	; (80146d0 <UART_SetConfig+0x338>)
 8014678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801467a:	f003 0307 	and.w	r3, r3, #7
 801467e:	2b05      	cmp	r3, #5
 8014680:	d838      	bhi.n	80146f4 <UART_SetConfig+0x35c>
 8014682:	a201      	add	r2, pc, #4	; (adr r2, 8014688 <UART_SetConfig+0x2f0>)
 8014684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014688:	080146a1 	.word	0x080146a1
 801468c:	080146a9 	.word	0x080146a9
 8014690:	080146b1 	.word	0x080146b1
 8014694:	080146b9 	.word	0x080146b9
 8014698:	080146e5 	.word	0x080146e5
 801469c:	080146ed 	.word	0x080146ed
 80146a0:	2300      	movs	r3, #0
 80146a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80146a6:	e14a      	b.n	801493e <UART_SetConfig+0x5a6>
 80146a8:	2304      	movs	r3, #4
 80146aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80146ae:	e146      	b.n	801493e <UART_SetConfig+0x5a6>
 80146b0:	2308      	movs	r3, #8
 80146b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80146b6:	e142      	b.n	801493e <UART_SetConfig+0x5a6>
 80146b8:	2310      	movs	r3, #16
 80146ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80146be:	e13e      	b.n	801493e <UART_SetConfig+0x5a6>
 80146c0:	cfff69f3 	.word	0xcfff69f3
 80146c4:	58000c00 	.word	0x58000c00
 80146c8:	11fff4ff 	.word	0x11fff4ff
 80146cc:	40011000 	.word	0x40011000
 80146d0:	58024400 	.word	0x58024400
 80146d4:	40004400 	.word	0x40004400
 80146d8:	40004800 	.word	0x40004800
 80146dc:	40004c00 	.word	0x40004c00
 80146e0:	40005000 	.word	0x40005000
 80146e4:	2320      	movs	r3, #32
 80146e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80146ea:	e128      	b.n	801493e <UART_SetConfig+0x5a6>
 80146ec:	2340      	movs	r3, #64	; 0x40
 80146ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80146f2:	e124      	b.n	801493e <UART_SetConfig+0x5a6>
 80146f4:	2380      	movs	r3, #128	; 0x80
 80146f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80146fa:	e120      	b.n	801493e <UART_SetConfig+0x5a6>
 80146fc:	697b      	ldr	r3, [r7, #20]
 80146fe:	681b      	ldr	r3, [r3, #0]
 8014700:	4acb      	ldr	r2, [pc, #812]	; (8014a30 <UART_SetConfig+0x698>)
 8014702:	4293      	cmp	r3, r2
 8014704:	d176      	bne.n	80147f4 <UART_SetConfig+0x45c>
 8014706:	4bcb      	ldr	r3, [pc, #812]	; (8014a34 <UART_SetConfig+0x69c>)
 8014708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801470a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801470e:	2b28      	cmp	r3, #40	; 0x28
 8014710:	d86c      	bhi.n	80147ec <UART_SetConfig+0x454>
 8014712:	a201      	add	r2, pc, #4	; (adr r2, 8014718 <UART_SetConfig+0x380>)
 8014714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014718:	080147bd 	.word	0x080147bd
 801471c:	080147ed 	.word	0x080147ed
 8014720:	080147ed 	.word	0x080147ed
 8014724:	080147ed 	.word	0x080147ed
 8014728:	080147ed 	.word	0x080147ed
 801472c:	080147ed 	.word	0x080147ed
 8014730:	080147ed 	.word	0x080147ed
 8014734:	080147ed 	.word	0x080147ed
 8014738:	080147c5 	.word	0x080147c5
 801473c:	080147ed 	.word	0x080147ed
 8014740:	080147ed 	.word	0x080147ed
 8014744:	080147ed 	.word	0x080147ed
 8014748:	080147ed 	.word	0x080147ed
 801474c:	080147ed 	.word	0x080147ed
 8014750:	080147ed 	.word	0x080147ed
 8014754:	080147ed 	.word	0x080147ed
 8014758:	080147cd 	.word	0x080147cd
 801475c:	080147ed 	.word	0x080147ed
 8014760:	080147ed 	.word	0x080147ed
 8014764:	080147ed 	.word	0x080147ed
 8014768:	080147ed 	.word	0x080147ed
 801476c:	080147ed 	.word	0x080147ed
 8014770:	080147ed 	.word	0x080147ed
 8014774:	080147ed 	.word	0x080147ed
 8014778:	080147d5 	.word	0x080147d5
 801477c:	080147ed 	.word	0x080147ed
 8014780:	080147ed 	.word	0x080147ed
 8014784:	080147ed 	.word	0x080147ed
 8014788:	080147ed 	.word	0x080147ed
 801478c:	080147ed 	.word	0x080147ed
 8014790:	080147ed 	.word	0x080147ed
 8014794:	080147ed 	.word	0x080147ed
 8014798:	080147dd 	.word	0x080147dd
 801479c:	080147ed 	.word	0x080147ed
 80147a0:	080147ed 	.word	0x080147ed
 80147a4:	080147ed 	.word	0x080147ed
 80147a8:	080147ed 	.word	0x080147ed
 80147ac:	080147ed 	.word	0x080147ed
 80147b0:	080147ed 	.word	0x080147ed
 80147b4:	080147ed 	.word	0x080147ed
 80147b8:	080147e5 	.word	0x080147e5
 80147bc:	2301      	movs	r3, #1
 80147be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80147c2:	e0bc      	b.n	801493e <UART_SetConfig+0x5a6>
 80147c4:	2304      	movs	r3, #4
 80147c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80147ca:	e0b8      	b.n	801493e <UART_SetConfig+0x5a6>
 80147cc:	2308      	movs	r3, #8
 80147ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80147d2:	e0b4      	b.n	801493e <UART_SetConfig+0x5a6>
 80147d4:	2310      	movs	r3, #16
 80147d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80147da:	e0b0      	b.n	801493e <UART_SetConfig+0x5a6>
 80147dc:	2320      	movs	r3, #32
 80147de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80147e2:	e0ac      	b.n	801493e <UART_SetConfig+0x5a6>
 80147e4:	2340      	movs	r3, #64	; 0x40
 80147e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80147ea:	e0a8      	b.n	801493e <UART_SetConfig+0x5a6>
 80147ec:	2380      	movs	r3, #128	; 0x80
 80147ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80147f2:	e0a4      	b.n	801493e <UART_SetConfig+0x5a6>
 80147f4:	697b      	ldr	r3, [r7, #20]
 80147f6:	681b      	ldr	r3, [r3, #0]
 80147f8:	4a8f      	ldr	r2, [pc, #572]	; (8014a38 <UART_SetConfig+0x6a0>)
 80147fa:	4293      	cmp	r3, r2
 80147fc:	d130      	bne.n	8014860 <UART_SetConfig+0x4c8>
 80147fe:	4b8d      	ldr	r3, [pc, #564]	; (8014a34 <UART_SetConfig+0x69c>)
 8014800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014802:	f003 0307 	and.w	r3, r3, #7
 8014806:	2b05      	cmp	r3, #5
 8014808:	d826      	bhi.n	8014858 <UART_SetConfig+0x4c0>
 801480a:	a201      	add	r2, pc, #4	; (adr r2, 8014810 <UART_SetConfig+0x478>)
 801480c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014810:	08014829 	.word	0x08014829
 8014814:	08014831 	.word	0x08014831
 8014818:	08014839 	.word	0x08014839
 801481c:	08014841 	.word	0x08014841
 8014820:	08014849 	.word	0x08014849
 8014824:	08014851 	.word	0x08014851
 8014828:	2300      	movs	r3, #0
 801482a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801482e:	e086      	b.n	801493e <UART_SetConfig+0x5a6>
 8014830:	2304      	movs	r3, #4
 8014832:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014836:	e082      	b.n	801493e <UART_SetConfig+0x5a6>
 8014838:	2308      	movs	r3, #8
 801483a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801483e:	e07e      	b.n	801493e <UART_SetConfig+0x5a6>
 8014840:	2310      	movs	r3, #16
 8014842:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014846:	e07a      	b.n	801493e <UART_SetConfig+0x5a6>
 8014848:	2320      	movs	r3, #32
 801484a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801484e:	e076      	b.n	801493e <UART_SetConfig+0x5a6>
 8014850:	2340      	movs	r3, #64	; 0x40
 8014852:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014856:	e072      	b.n	801493e <UART_SetConfig+0x5a6>
 8014858:	2380      	movs	r3, #128	; 0x80
 801485a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801485e:	e06e      	b.n	801493e <UART_SetConfig+0x5a6>
 8014860:	697b      	ldr	r3, [r7, #20]
 8014862:	681b      	ldr	r3, [r3, #0]
 8014864:	4a75      	ldr	r2, [pc, #468]	; (8014a3c <UART_SetConfig+0x6a4>)
 8014866:	4293      	cmp	r3, r2
 8014868:	d130      	bne.n	80148cc <UART_SetConfig+0x534>
 801486a:	4b72      	ldr	r3, [pc, #456]	; (8014a34 <UART_SetConfig+0x69c>)
 801486c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801486e:	f003 0307 	and.w	r3, r3, #7
 8014872:	2b05      	cmp	r3, #5
 8014874:	d826      	bhi.n	80148c4 <UART_SetConfig+0x52c>
 8014876:	a201      	add	r2, pc, #4	; (adr r2, 801487c <UART_SetConfig+0x4e4>)
 8014878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801487c:	08014895 	.word	0x08014895
 8014880:	0801489d 	.word	0x0801489d
 8014884:	080148a5 	.word	0x080148a5
 8014888:	080148ad 	.word	0x080148ad
 801488c:	080148b5 	.word	0x080148b5
 8014890:	080148bd 	.word	0x080148bd
 8014894:	2300      	movs	r3, #0
 8014896:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801489a:	e050      	b.n	801493e <UART_SetConfig+0x5a6>
 801489c:	2304      	movs	r3, #4
 801489e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80148a2:	e04c      	b.n	801493e <UART_SetConfig+0x5a6>
 80148a4:	2308      	movs	r3, #8
 80148a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80148aa:	e048      	b.n	801493e <UART_SetConfig+0x5a6>
 80148ac:	2310      	movs	r3, #16
 80148ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80148b2:	e044      	b.n	801493e <UART_SetConfig+0x5a6>
 80148b4:	2320      	movs	r3, #32
 80148b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80148ba:	e040      	b.n	801493e <UART_SetConfig+0x5a6>
 80148bc:	2340      	movs	r3, #64	; 0x40
 80148be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80148c2:	e03c      	b.n	801493e <UART_SetConfig+0x5a6>
 80148c4:	2380      	movs	r3, #128	; 0x80
 80148c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80148ca:	e038      	b.n	801493e <UART_SetConfig+0x5a6>
 80148cc:	697b      	ldr	r3, [r7, #20]
 80148ce:	681b      	ldr	r3, [r3, #0]
 80148d0:	4a5b      	ldr	r2, [pc, #364]	; (8014a40 <UART_SetConfig+0x6a8>)
 80148d2:	4293      	cmp	r3, r2
 80148d4:	d130      	bne.n	8014938 <UART_SetConfig+0x5a0>
 80148d6:	4b57      	ldr	r3, [pc, #348]	; (8014a34 <UART_SetConfig+0x69c>)
 80148d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80148da:	f003 0307 	and.w	r3, r3, #7
 80148de:	2b05      	cmp	r3, #5
 80148e0:	d826      	bhi.n	8014930 <UART_SetConfig+0x598>
 80148e2:	a201      	add	r2, pc, #4	; (adr r2, 80148e8 <UART_SetConfig+0x550>)
 80148e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80148e8:	08014901 	.word	0x08014901
 80148ec:	08014909 	.word	0x08014909
 80148f0:	08014911 	.word	0x08014911
 80148f4:	08014919 	.word	0x08014919
 80148f8:	08014921 	.word	0x08014921
 80148fc:	08014929 	.word	0x08014929
 8014900:	2302      	movs	r3, #2
 8014902:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014906:	e01a      	b.n	801493e <UART_SetConfig+0x5a6>
 8014908:	2304      	movs	r3, #4
 801490a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801490e:	e016      	b.n	801493e <UART_SetConfig+0x5a6>
 8014910:	2308      	movs	r3, #8
 8014912:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014916:	e012      	b.n	801493e <UART_SetConfig+0x5a6>
 8014918:	2310      	movs	r3, #16
 801491a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801491e:	e00e      	b.n	801493e <UART_SetConfig+0x5a6>
 8014920:	2320      	movs	r3, #32
 8014922:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014926:	e00a      	b.n	801493e <UART_SetConfig+0x5a6>
 8014928:	2340      	movs	r3, #64	; 0x40
 801492a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801492e:	e006      	b.n	801493e <UART_SetConfig+0x5a6>
 8014930:	2380      	movs	r3, #128	; 0x80
 8014932:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014936:	e002      	b.n	801493e <UART_SetConfig+0x5a6>
 8014938:	2380      	movs	r3, #128	; 0x80
 801493a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801493e:	697b      	ldr	r3, [r7, #20]
 8014940:	681b      	ldr	r3, [r3, #0]
 8014942:	4a3f      	ldr	r2, [pc, #252]	; (8014a40 <UART_SetConfig+0x6a8>)
 8014944:	4293      	cmp	r3, r2
 8014946:	f040 80f8 	bne.w	8014b3a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801494a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801494e:	2b20      	cmp	r3, #32
 8014950:	dc46      	bgt.n	80149e0 <UART_SetConfig+0x648>
 8014952:	2b02      	cmp	r3, #2
 8014954:	f2c0 8082 	blt.w	8014a5c <UART_SetConfig+0x6c4>
 8014958:	3b02      	subs	r3, #2
 801495a:	2b1e      	cmp	r3, #30
 801495c:	d87e      	bhi.n	8014a5c <UART_SetConfig+0x6c4>
 801495e:	a201      	add	r2, pc, #4	; (adr r2, 8014964 <UART_SetConfig+0x5cc>)
 8014960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014964:	080149e7 	.word	0x080149e7
 8014968:	08014a5d 	.word	0x08014a5d
 801496c:	080149ef 	.word	0x080149ef
 8014970:	08014a5d 	.word	0x08014a5d
 8014974:	08014a5d 	.word	0x08014a5d
 8014978:	08014a5d 	.word	0x08014a5d
 801497c:	080149ff 	.word	0x080149ff
 8014980:	08014a5d 	.word	0x08014a5d
 8014984:	08014a5d 	.word	0x08014a5d
 8014988:	08014a5d 	.word	0x08014a5d
 801498c:	08014a5d 	.word	0x08014a5d
 8014990:	08014a5d 	.word	0x08014a5d
 8014994:	08014a5d 	.word	0x08014a5d
 8014998:	08014a5d 	.word	0x08014a5d
 801499c:	08014a0f 	.word	0x08014a0f
 80149a0:	08014a5d 	.word	0x08014a5d
 80149a4:	08014a5d 	.word	0x08014a5d
 80149a8:	08014a5d 	.word	0x08014a5d
 80149ac:	08014a5d 	.word	0x08014a5d
 80149b0:	08014a5d 	.word	0x08014a5d
 80149b4:	08014a5d 	.word	0x08014a5d
 80149b8:	08014a5d 	.word	0x08014a5d
 80149bc:	08014a5d 	.word	0x08014a5d
 80149c0:	08014a5d 	.word	0x08014a5d
 80149c4:	08014a5d 	.word	0x08014a5d
 80149c8:	08014a5d 	.word	0x08014a5d
 80149cc:	08014a5d 	.word	0x08014a5d
 80149d0:	08014a5d 	.word	0x08014a5d
 80149d4:	08014a5d 	.word	0x08014a5d
 80149d8:	08014a5d 	.word	0x08014a5d
 80149dc:	08014a4f 	.word	0x08014a4f
 80149e0:	2b40      	cmp	r3, #64	; 0x40
 80149e2:	d037      	beq.n	8014a54 <UART_SetConfig+0x6bc>
 80149e4:	e03a      	b.n	8014a5c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80149e6:	f7fc fb49 	bl	801107c <HAL_RCCEx_GetD3PCLK1Freq>
 80149ea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80149ec:	e03c      	b.n	8014a68 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80149ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80149f2:	4618      	mov	r0, r3
 80149f4:	f7fc fb58 	bl	80110a8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80149f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80149fc:	e034      	b.n	8014a68 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80149fe:	f107 0318 	add.w	r3, r7, #24
 8014a02:	4618      	mov	r0, r3
 8014a04:	f7fc fca4 	bl	8011350 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8014a08:	69fb      	ldr	r3, [r7, #28]
 8014a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014a0c:	e02c      	b.n	8014a68 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8014a0e:	4b09      	ldr	r3, [pc, #36]	; (8014a34 <UART_SetConfig+0x69c>)
 8014a10:	681b      	ldr	r3, [r3, #0]
 8014a12:	f003 0320 	and.w	r3, r3, #32
 8014a16:	2b00      	cmp	r3, #0
 8014a18:	d016      	beq.n	8014a48 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8014a1a:	4b06      	ldr	r3, [pc, #24]	; (8014a34 <UART_SetConfig+0x69c>)
 8014a1c:	681b      	ldr	r3, [r3, #0]
 8014a1e:	08db      	lsrs	r3, r3, #3
 8014a20:	f003 0303 	and.w	r3, r3, #3
 8014a24:	4a07      	ldr	r2, [pc, #28]	; (8014a44 <UART_SetConfig+0x6ac>)
 8014a26:	fa22 f303 	lsr.w	r3, r2, r3
 8014a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8014a2c:	e01c      	b.n	8014a68 <UART_SetConfig+0x6d0>
 8014a2e:	bf00      	nop
 8014a30:	40011400 	.word	0x40011400
 8014a34:	58024400 	.word	0x58024400
 8014a38:	40007800 	.word	0x40007800
 8014a3c:	40007c00 	.word	0x40007c00
 8014a40:	58000c00 	.word	0x58000c00
 8014a44:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8014a48:	4b9d      	ldr	r3, [pc, #628]	; (8014cc0 <UART_SetConfig+0x928>)
 8014a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014a4c:	e00c      	b.n	8014a68 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8014a4e:	4b9d      	ldr	r3, [pc, #628]	; (8014cc4 <UART_SetConfig+0x92c>)
 8014a50:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014a52:	e009      	b.n	8014a68 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8014a54:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014a58:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014a5a:	e005      	b.n	8014a68 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8014a5c:	2300      	movs	r3, #0
 8014a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8014a60:	2301      	movs	r3, #1
 8014a62:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8014a66:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8014a68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014a6a:	2b00      	cmp	r3, #0
 8014a6c:	f000 81de 	beq.w	8014e2c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8014a70:	697b      	ldr	r3, [r7, #20]
 8014a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a74:	4a94      	ldr	r2, [pc, #592]	; (8014cc8 <UART_SetConfig+0x930>)
 8014a76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014a7a:	461a      	mov	r2, r3
 8014a7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014a7e:	fbb3 f3f2 	udiv	r3, r3, r2
 8014a82:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8014a84:	697b      	ldr	r3, [r7, #20]
 8014a86:	685a      	ldr	r2, [r3, #4]
 8014a88:	4613      	mov	r3, r2
 8014a8a:	005b      	lsls	r3, r3, #1
 8014a8c:	4413      	add	r3, r2
 8014a8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014a90:	429a      	cmp	r2, r3
 8014a92:	d305      	bcc.n	8014aa0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8014a94:	697b      	ldr	r3, [r7, #20]
 8014a96:	685b      	ldr	r3, [r3, #4]
 8014a98:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8014a9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014a9c:	429a      	cmp	r2, r3
 8014a9e:	d903      	bls.n	8014aa8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8014aa0:	2301      	movs	r3, #1
 8014aa2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8014aa6:	e1c1      	b.n	8014e2c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8014aa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014aaa:	2200      	movs	r2, #0
 8014aac:	60bb      	str	r3, [r7, #8]
 8014aae:	60fa      	str	r2, [r7, #12]
 8014ab0:	697b      	ldr	r3, [r7, #20]
 8014ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014ab4:	4a84      	ldr	r2, [pc, #528]	; (8014cc8 <UART_SetConfig+0x930>)
 8014ab6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014aba:	b29b      	uxth	r3, r3
 8014abc:	2200      	movs	r2, #0
 8014abe:	603b      	str	r3, [r7, #0]
 8014ac0:	607a      	str	r2, [r7, #4]
 8014ac2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014ac6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8014aca:	f7eb fc59 	bl	8000380 <__aeabi_uldivmod>
 8014ace:	4602      	mov	r2, r0
 8014ad0:	460b      	mov	r3, r1
 8014ad2:	4610      	mov	r0, r2
 8014ad4:	4619      	mov	r1, r3
 8014ad6:	f04f 0200 	mov.w	r2, #0
 8014ada:	f04f 0300 	mov.w	r3, #0
 8014ade:	020b      	lsls	r3, r1, #8
 8014ae0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8014ae4:	0202      	lsls	r2, r0, #8
 8014ae6:	6979      	ldr	r1, [r7, #20]
 8014ae8:	6849      	ldr	r1, [r1, #4]
 8014aea:	0849      	lsrs	r1, r1, #1
 8014aec:	2000      	movs	r0, #0
 8014aee:	460c      	mov	r4, r1
 8014af0:	4605      	mov	r5, r0
 8014af2:	eb12 0804 	adds.w	r8, r2, r4
 8014af6:	eb43 0905 	adc.w	r9, r3, r5
 8014afa:	697b      	ldr	r3, [r7, #20]
 8014afc:	685b      	ldr	r3, [r3, #4]
 8014afe:	2200      	movs	r2, #0
 8014b00:	469a      	mov	sl, r3
 8014b02:	4693      	mov	fp, r2
 8014b04:	4652      	mov	r2, sl
 8014b06:	465b      	mov	r3, fp
 8014b08:	4640      	mov	r0, r8
 8014b0a:	4649      	mov	r1, r9
 8014b0c:	f7eb fc38 	bl	8000380 <__aeabi_uldivmod>
 8014b10:	4602      	mov	r2, r0
 8014b12:	460b      	mov	r3, r1
 8014b14:	4613      	mov	r3, r2
 8014b16:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8014b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8014b1e:	d308      	bcc.n	8014b32 <UART_SetConfig+0x79a>
 8014b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8014b26:	d204      	bcs.n	8014b32 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8014b28:	697b      	ldr	r3, [r7, #20]
 8014b2a:	681b      	ldr	r3, [r3, #0]
 8014b2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014b2e:	60da      	str	r2, [r3, #12]
 8014b30:	e17c      	b.n	8014e2c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8014b32:	2301      	movs	r3, #1
 8014b34:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8014b38:	e178      	b.n	8014e2c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8014b3a:	697b      	ldr	r3, [r7, #20]
 8014b3c:	69db      	ldr	r3, [r3, #28]
 8014b3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014b42:	f040 80c5 	bne.w	8014cd0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8014b46:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8014b4a:	2b20      	cmp	r3, #32
 8014b4c:	dc48      	bgt.n	8014be0 <UART_SetConfig+0x848>
 8014b4e:	2b00      	cmp	r3, #0
 8014b50:	db7b      	blt.n	8014c4a <UART_SetConfig+0x8b2>
 8014b52:	2b20      	cmp	r3, #32
 8014b54:	d879      	bhi.n	8014c4a <UART_SetConfig+0x8b2>
 8014b56:	a201      	add	r2, pc, #4	; (adr r2, 8014b5c <UART_SetConfig+0x7c4>)
 8014b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014b5c:	08014be7 	.word	0x08014be7
 8014b60:	08014bef 	.word	0x08014bef
 8014b64:	08014c4b 	.word	0x08014c4b
 8014b68:	08014c4b 	.word	0x08014c4b
 8014b6c:	08014bf7 	.word	0x08014bf7
 8014b70:	08014c4b 	.word	0x08014c4b
 8014b74:	08014c4b 	.word	0x08014c4b
 8014b78:	08014c4b 	.word	0x08014c4b
 8014b7c:	08014c07 	.word	0x08014c07
 8014b80:	08014c4b 	.word	0x08014c4b
 8014b84:	08014c4b 	.word	0x08014c4b
 8014b88:	08014c4b 	.word	0x08014c4b
 8014b8c:	08014c4b 	.word	0x08014c4b
 8014b90:	08014c4b 	.word	0x08014c4b
 8014b94:	08014c4b 	.word	0x08014c4b
 8014b98:	08014c4b 	.word	0x08014c4b
 8014b9c:	08014c17 	.word	0x08014c17
 8014ba0:	08014c4b 	.word	0x08014c4b
 8014ba4:	08014c4b 	.word	0x08014c4b
 8014ba8:	08014c4b 	.word	0x08014c4b
 8014bac:	08014c4b 	.word	0x08014c4b
 8014bb0:	08014c4b 	.word	0x08014c4b
 8014bb4:	08014c4b 	.word	0x08014c4b
 8014bb8:	08014c4b 	.word	0x08014c4b
 8014bbc:	08014c4b 	.word	0x08014c4b
 8014bc0:	08014c4b 	.word	0x08014c4b
 8014bc4:	08014c4b 	.word	0x08014c4b
 8014bc8:	08014c4b 	.word	0x08014c4b
 8014bcc:	08014c4b 	.word	0x08014c4b
 8014bd0:	08014c4b 	.word	0x08014c4b
 8014bd4:	08014c4b 	.word	0x08014c4b
 8014bd8:	08014c4b 	.word	0x08014c4b
 8014bdc:	08014c3d 	.word	0x08014c3d
 8014be0:	2b40      	cmp	r3, #64	; 0x40
 8014be2:	d02e      	beq.n	8014c42 <UART_SetConfig+0x8aa>
 8014be4:	e031      	b.n	8014c4a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8014be6:	f7fb fad7 	bl	8010198 <HAL_RCC_GetPCLK1Freq>
 8014bea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8014bec:	e033      	b.n	8014c56 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8014bee:	f7fb fae9 	bl	80101c4 <HAL_RCC_GetPCLK2Freq>
 8014bf2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8014bf4:	e02f      	b.n	8014c56 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8014bf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014bfa:	4618      	mov	r0, r3
 8014bfc:	f7fc fa54 	bl	80110a8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8014c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014c04:	e027      	b.n	8014c56 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8014c06:	f107 0318 	add.w	r3, r7, #24
 8014c0a:	4618      	mov	r0, r3
 8014c0c:	f7fc fba0 	bl	8011350 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8014c10:	69fb      	ldr	r3, [r7, #28]
 8014c12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014c14:	e01f      	b.n	8014c56 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8014c16:	4b2d      	ldr	r3, [pc, #180]	; (8014ccc <UART_SetConfig+0x934>)
 8014c18:	681b      	ldr	r3, [r3, #0]
 8014c1a:	f003 0320 	and.w	r3, r3, #32
 8014c1e:	2b00      	cmp	r3, #0
 8014c20:	d009      	beq.n	8014c36 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8014c22:	4b2a      	ldr	r3, [pc, #168]	; (8014ccc <UART_SetConfig+0x934>)
 8014c24:	681b      	ldr	r3, [r3, #0]
 8014c26:	08db      	lsrs	r3, r3, #3
 8014c28:	f003 0303 	and.w	r3, r3, #3
 8014c2c:	4a24      	ldr	r2, [pc, #144]	; (8014cc0 <UART_SetConfig+0x928>)
 8014c2e:	fa22 f303 	lsr.w	r3, r2, r3
 8014c32:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8014c34:	e00f      	b.n	8014c56 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8014c36:	4b22      	ldr	r3, [pc, #136]	; (8014cc0 <UART_SetConfig+0x928>)
 8014c38:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014c3a:	e00c      	b.n	8014c56 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8014c3c:	4b21      	ldr	r3, [pc, #132]	; (8014cc4 <UART_SetConfig+0x92c>)
 8014c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014c40:	e009      	b.n	8014c56 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8014c42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014c46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014c48:	e005      	b.n	8014c56 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8014c4a:	2300      	movs	r3, #0
 8014c4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8014c4e:	2301      	movs	r3, #1
 8014c50:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8014c54:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8014c56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014c58:	2b00      	cmp	r3, #0
 8014c5a:	f000 80e7 	beq.w	8014e2c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8014c5e:	697b      	ldr	r3, [r7, #20]
 8014c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c62:	4a19      	ldr	r2, [pc, #100]	; (8014cc8 <UART_SetConfig+0x930>)
 8014c64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014c68:	461a      	mov	r2, r3
 8014c6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014c6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8014c70:	005a      	lsls	r2, r3, #1
 8014c72:	697b      	ldr	r3, [r7, #20]
 8014c74:	685b      	ldr	r3, [r3, #4]
 8014c76:	085b      	lsrs	r3, r3, #1
 8014c78:	441a      	add	r2, r3
 8014c7a:	697b      	ldr	r3, [r7, #20]
 8014c7c:	685b      	ldr	r3, [r3, #4]
 8014c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8014c82:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8014c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c86:	2b0f      	cmp	r3, #15
 8014c88:	d916      	bls.n	8014cb8 <UART_SetConfig+0x920>
 8014c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014c90:	d212      	bcs.n	8014cb8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8014c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c94:	b29b      	uxth	r3, r3
 8014c96:	f023 030f 	bic.w	r3, r3, #15
 8014c9a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8014c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c9e:	085b      	lsrs	r3, r3, #1
 8014ca0:	b29b      	uxth	r3, r3
 8014ca2:	f003 0307 	and.w	r3, r3, #7
 8014ca6:	b29a      	uxth	r2, r3
 8014ca8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8014caa:	4313      	orrs	r3, r2
 8014cac:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8014cae:	697b      	ldr	r3, [r7, #20]
 8014cb0:	681b      	ldr	r3, [r3, #0]
 8014cb2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8014cb4:	60da      	str	r2, [r3, #12]
 8014cb6:	e0b9      	b.n	8014e2c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8014cb8:	2301      	movs	r3, #1
 8014cba:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8014cbe:	e0b5      	b.n	8014e2c <UART_SetConfig+0xa94>
 8014cc0:	03d09000 	.word	0x03d09000
 8014cc4:	003d0900 	.word	0x003d0900
 8014cc8:	080359a4 	.word	0x080359a4
 8014ccc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8014cd0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8014cd4:	2b20      	cmp	r3, #32
 8014cd6:	dc49      	bgt.n	8014d6c <UART_SetConfig+0x9d4>
 8014cd8:	2b00      	cmp	r3, #0
 8014cda:	db7c      	blt.n	8014dd6 <UART_SetConfig+0xa3e>
 8014cdc:	2b20      	cmp	r3, #32
 8014cde:	d87a      	bhi.n	8014dd6 <UART_SetConfig+0xa3e>
 8014ce0:	a201      	add	r2, pc, #4	; (adr r2, 8014ce8 <UART_SetConfig+0x950>)
 8014ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014ce6:	bf00      	nop
 8014ce8:	08014d73 	.word	0x08014d73
 8014cec:	08014d7b 	.word	0x08014d7b
 8014cf0:	08014dd7 	.word	0x08014dd7
 8014cf4:	08014dd7 	.word	0x08014dd7
 8014cf8:	08014d83 	.word	0x08014d83
 8014cfc:	08014dd7 	.word	0x08014dd7
 8014d00:	08014dd7 	.word	0x08014dd7
 8014d04:	08014dd7 	.word	0x08014dd7
 8014d08:	08014d93 	.word	0x08014d93
 8014d0c:	08014dd7 	.word	0x08014dd7
 8014d10:	08014dd7 	.word	0x08014dd7
 8014d14:	08014dd7 	.word	0x08014dd7
 8014d18:	08014dd7 	.word	0x08014dd7
 8014d1c:	08014dd7 	.word	0x08014dd7
 8014d20:	08014dd7 	.word	0x08014dd7
 8014d24:	08014dd7 	.word	0x08014dd7
 8014d28:	08014da3 	.word	0x08014da3
 8014d2c:	08014dd7 	.word	0x08014dd7
 8014d30:	08014dd7 	.word	0x08014dd7
 8014d34:	08014dd7 	.word	0x08014dd7
 8014d38:	08014dd7 	.word	0x08014dd7
 8014d3c:	08014dd7 	.word	0x08014dd7
 8014d40:	08014dd7 	.word	0x08014dd7
 8014d44:	08014dd7 	.word	0x08014dd7
 8014d48:	08014dd7 	.word	0x08014dd7
 8014d4c:	08014dd7 	.word	0x08014dd7
 8014d50:	08014dd7 	.word	0x08014dd7
 8014d54:	08014dd7 	.word	0x08014dd7
 8014d58:	08014dd7 	.word	0x08014dd7
 8014d5c:	08014dd7 	.word	0x08014dd7
 8014d60:	08014dd7 	.word	0x08014dd7
 8014d64:	08014dd7 	.word	0x08014dd7
 8014d68:	08014dc9 	.word	0x08014dc9
 8014d6c:	2b40      	cmp	r3, #64	; 0x40
 8014d6e:	d02e      	beq.n	8014dce <UART_SetConfig+0xa36>
 8014d70:	e031      	b.n	8014dd6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8014d72:	f7fb fa11 	bl	8010198 <HAL_RCC_GetPCLK1Freq>
 8014d76:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8014d78:	e033      	b.n	8014de2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8014d7a:	f7fb fa23 	bl	80101c4 <HAL_RCC_GetPCLK2Freq>
 8014d7e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8014d80:	e02f      	b.n	8014de2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8014d82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014d86:	4618      	mov	r0, r3
 8014d88:	f7fc f98e 	bl	80110a8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8014d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014d90:	e027      	b.n	8014de2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8014d92:	f107 0318 	add.w	r3, r7, #24
 8014d96:	4618      	mov	r0, r3
 8014d98:	f7fc fada 	bl	8011350 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8014d9c:	69fb      	ldr	r3, [r7, #28]
 8014d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014da0:	e01f      	b.n	8014de2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8014da2:	4b2d      	ldr	r3, [pc, #180]	; (8014e58 <UART_SetConfig+0xac0>)
 8014da4:	681b      	ldr	r3, [r3, #0]
 8014da6:	f003 0320 	and.w	r3, r3, #32
 8014daa:	2b00      	cmp	r3, #0
 8014dac:	d009      	beq.n	8014dc2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8014dae:	4b2a      	ldr	r3, [pc, #168]	; (8014e58 <UART_SetConfig+0xac0>)
 8014db0:	681b      	ldr	r3, [r3, #0]
 8014db2:	08db      	lsrs	r3, r3, #3
 8014db4:	f003 0303 	and.w	r3, r3, #3
 8014db8:	4a28      	ldr	r2, [pc, #160]	; (8014e5c <UART_SetConfig+0xac4>)
 8014dba:	fa22 f303 	lsr.w	r3, r2, r3
 8014dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8014dc0:	e00f      	b.n	8014de2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8014dc2:	4b26      	ldr	r3, [pc, #152]	; (8014e5c <UART_SetConfig+0xac4>)
 8014dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014dc6:	e00c      	b.n	8014de2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8014dc8:	4b25      	ldr	r3, [pc, #148]	; (8014e60 <UART_SetConfig+0xac8>)
 8014dca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014dcc:	e009      	b.n	8014de2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8014dce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014dd4:	e005      	b.n	8014de2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8014dd6:	2300      	movs	r3, #0
 8014dd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8014dda:	2301      	movs	r3, #1
 8014ddc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8014de0:	bf00      	nop
    }

    if (pclk != 0U)
 8014de2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014de4:	2b00      	cmp	r3, #0
 8014de6:	d021      	beq.n	8014e2c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8014de8:	697b      	ldr	r3, [r7, #20]
 8014dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014dec:	4a1d      	ldr	r2, [pc, #116]	; (8014e64 <UART_SetConfig+0xacc>)
 8014dee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014df2:	461a      	mov	r2, r3
 8014df4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014df6:	fbb3 f2f2 	udiv	r2, r3, r2
 8014dfa:	697b      	ldr	r3, [r7, #20]
 8014dfc:	685b      	ldr	r3, [r3, #4]
 8014dfe:	085b      	lsrs	r3, r3, #1
 8014e00:	441a      	add	r2, r3
 8014e02:	697b      	ldr	r3, [r7, #20]
 8014e04:	685b      	ldr	r3, [r3, #4]
 8014e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8014e0a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8014e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e0e:	2b0f      	cmp	r3, #15
 8014e10:	d909      	bls.n	8014e26 <UART_SetConfig+0xa8e>
 8014e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014e18:	d205      	bcs.n	8014e26 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8014e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e1c:	b29a      	uxth	r2, r3
 8014e1e:	697b      	ldr	r3, [r7, #20]
 8014e20:	681b      	ldr	r3, [r3, #0]
 8014e22:	60da      	str	r2, [r3, #12]
 8014e24:	e002      	b.n	8014e2c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8014e26:	2301      	movs	r3, #1
 8014e28:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8014e2c:	697b      	ldr	r3, [r7, #20]
 8014e2e:	2201      	movs	r2, #1
 8014e30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8014e34:	697b      	ldr	r3, [r7, #20]
 8014e36:	2201      	movs	r2, #1
 8014e38:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8014e3c:	697b      	ldr	r3, [r7, #20]
 8014e3e:	2200      	movs	r2, #0
 8014e40:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8014e42:	697b      	ldr	r3, [r7, #20]
 8014e44:	2200      	movs	r2, #0
 8014e46:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8014e48:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8014e4c:	4618      	mov	r0, r3
 8014e4e:	3748      	adds	r7, #72	; 0x48
 8014e50:	46bd      	mov	sp, r7
 8014e52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8014e56:	bf00      	nop
 8014e58:	58024400 	.word	0x58024400
 8014e5c:	03d09000 	.word	0x03d09000
 8014e60:	003d0900 	.word	0x003d0900
 8014e64:	080359a4 	.word	0x080359a4

08014e68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8014e68:	b480      	push	{r7}
 8014e6a:	b083      	sub	sp, #12
 8014e6c:	af00      	add	r7, sp, #0
 8014e6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8014e70:	687b      	ldr	r3, [r7, #4]
 8014e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014e74:	f003 0301 	and.w	r3, r3, #1
 8014e78:	2b00      	cmp	r3, #0
 8014e7a:	d00a      	beq.n	8014e92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8014e7c:	687b      	ldr	r3, [r7, #4]
 8014e7e:	681b      	ldr	r3, [r3, #0]
 8014e80:	685b      	ldr	r3, [r3, #4]
 8014e82:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8014e86:	687b      	ldr	r3, [r7, #4]
 8014e88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014e8a:	687b      	ldr	r3, [r7, #4]
 8014e8c:	681b      	ldr	r3, [r3, #0]
 8014e8e:	430a      	orrs	r2, r1
 8014e90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8014e92:	687b      	ldr	r3, [r7, #4]
 8014e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014e96:	f003 0302 	and.w	r3, r3, #2
 8014e9a:	2b00      	cmp	r3, #0
 8014e9c:	d00a      	beq.n	8014eb4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8014e9e:	687b      	ldr	r3, [r7, #4]
 8014ea0:	681b      	ldr	r3, [r3, #0]
 8014ea2:	685b      	ldr	r3, [r3, #4]
 8014ea4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8014ea8:	687b      	ldr	r3, [r7, #4]
 8014eaa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014eac:	687b      	ldr	r3, [r7, #4]
 8014eae:	681b      	ldr	r3, [r3, #0]
 8014eb0:	430a      	orrs	r2, r1
 8014eb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8014eb4:	687b      	ldr	r3, [r7, #4]
 8014eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014eb8:	f003 0304 	and.w	r3, r3, #4
 8014ebc:	2b00      	cmp	r3, #0
 8014ebe:	d00a      	beq.n	8014ed6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8014ec0:	687b      	ldr	r3, [r7, #4]
 8014ec2:	681b      	ldr	r3, [r3, #0]
 8014ec4:	685b      	ldr	r3, [r3, #4]
 8014ec6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8014eca:	687b      	ldr	r3, [r7, #4]
 8014ecc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8014ece:	687b      	ldr	r3, [r7, #4]
 8014ed0:	681b      	ldr	r3, [r3, #0]
 8014ed2:	430a      	orrs	r2, r1
 8014ed4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8014ed6:	687b      	ldr	r3, [r7, #4]
 8014ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014eda:	f003 0308 	and.w	r3, r3, #8
 8014ede:	2b00      	cmp	r3, #0
 8014ee0:	d00a      	beq.n	8014ef8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8014ee2:	687b      	ldr	r3, [r7, #4]
 8014ee4:	681b      	ldr	r3, [r3, #0]
 8014ee6:	685b      	ldr	r3, [r3, #4]
 8014ee8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8014eec:	687b      	ldr	r3, [r7, #4]
 8014eee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014ef0:	687b      	ldr	r3, [r7, #4]
 8014ef2:	681b      	ldr	r3, [r3, #0]
 8014ef4:	430a      	orrs	r2, r1
 8014ef6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8014ef8:	687b      	ldr	r3, [r7, #4]
 8014efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014efc:	f003 0310 	and.w	r3, r3, #16
 8014f00:	2b00      	cmp	r3, #0
 8014f02:	d00a      	beq.n	8014f1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8014f04:	687b      	ldr	r3, [r7, #4]
 8014f06:	681b      	ldr	r3, [r3, #0]
 8014f08:	689b      	ldr	r3, [r3, #8]
 8014f0a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8014f0e:	687b      	ldr	r3, [r7, #4]
 8014f10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8014f12:	687b      	ldr	r3, [r7, #4]
 8014f14:	681b      	ldr	r3, [r3, #0]
 8014f16:	430a      	orrs	r2, r1
 8014f18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8014f1a:	687b      	ldr	r3, [r7, #4]
 8014f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014f1e:	f003 0320 	and.w	r3, r3, #32
 8014f22:	2b00      	cmp	r3, #0
 8014f24:	d00a      	beq.n	8014f3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8014f26:	687b      	ldr	r3, [r7, #4]
 8014f28:	681b      	ldr	r3, [r3, #0]
 8014f2a:	689b      	ldr	r3, [r3, #8]
 8014f2c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8014f30:	687b      	ldr	r3, [r7, #4]
 8014f32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	681b      	ldr	r3, [r3, #0]
 8014f38:	430a      	orrs	r2, r1
 8014f3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8014f3c:	687b      	ldr	r3, [r7, #4]
 8014f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014f40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014f44:	2b00      	cmp	r3, #0
 8014f46:	d01a      	beq.n	8014f7e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8014f48:	687b      	ldr	r3, [r7, #4]
 8014f4a:	681b      	ldr	r3, [r3, #0]
 8014f4c:	685b      	ldr	r3, [r3, #4]
 8014f4e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8014f52:	687b      	ldr	r3, [r7, #4]
 8014f54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014f56:	687b      	ldr	r3, [r7, #4]
 8014f58:	681b      	ldr	r3, [r3, #0]
 8014f5a:	430a      	orrs	r2, r1
 8014f5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8014f5e:	687b      	ldr	r3, [r7, #4]
 8014f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014f62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8014f66:	d10a      	bne.n	8014f7e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8014f68:	687b      	ldr	r3, [r7, #4]
 8014f6a:	681b      	ldr	r3, [r3, #0]
 8014f6c:	685b      	ldr	r3, [r3, #4]
 8014f6e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8014f72:	687b      	ldr	r3, [r7, #4]
 8014f74:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8014f76:	687b      	ldr	r3, [r7, #4]
 8014f78:	681b      	ldr	r3, [r3, #0]
 8014f7a:	430a      	orrs	r2, r1
 8014f7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8014f7e:	687b      	ldr	r3, [r7, #4]
 8014f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014f82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014f86:	2b00      	cmp	r3, #0
 8014f88:	d00a      	beq.n	8014fa0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8014f8a:	687b      	ldr	r3, [r7, #4]
 8014f8c:	681b      	ldr	r3, [r3, #0]
 8014f8e:	685b      	ldr	r3, [r3, #4]
 8014f90:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8014f94:	687b      	ldr	r3, [r7, #4]
 8014f96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014f98:	687b      	ldr	r3, [r7, #4]
 8014f9a:	681b      	ldr	r3, [r3, #0]
 8014f9c:	430a      	orrs	r2, r1
 8014f9e:	605a      	str	r2, [r3, #4]
  }
}
 8014fa0:	bf00      	nop
 8014fa2:	370c      	adds	r7, #12
 8014fa4:	46bd      	mov	sp, r7
 8014fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014faa:	4770      	bx	lr

08014fac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8014fac:	b580      	push	{r7, lr}
 8014fae:	b086      	sub	sp, #24
 8014fb0:	af02      	add	r7, sp, #8
 8014fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014fb4:	687b      	ldr	r3, [r7, #4]
 8014fb6:	2200      	movs	r2, #0
 8014fb8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8014fbc:	f7f4 ff3a 	bl	8009e34 <HAL_GetTick>
 8014fc0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8014fc2:	687b      	ldr	r3, [r7, #4]
 8014fc4:	681b      	ldr	r3, [r3, #0]
 8014fc6:	681b      	ldr	r3, [r3, #0]
 8014fc8:	f003 0308 	and.w	r3, r3, #8
 8014fcc:	2b08      	cmp	r3, #8
 8014fce:	d10e      	bne.n	8014fee <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8014fd0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8014fd4:	9300      	str	r3, [sp, #0]
 8014fd6:	68fb      	ldr	r3, [r7, #12]
 8014fd8:	2200      	movs	r2, #0
 8014fda:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8014fde:	6878      	ldr	r0, [r7, #4]
 8014fe0:	f000 f82f 	bl	8015042 <UART_WaitOnFlagUntilTimeout>
 8014fe4:	4603      	mov	r3, r0
 8014fe6:	2b00      	cmp	r3, #0
 8014fe8:	d001      	beq.n	8014fee <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8014fea:	2303      	movs	r3, #3
 8014fec:	e025      	b.n	801503a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8014fee:	687b      	ldr	r3, [r7, #4]
 8014ff0:	681b      	ldr	r3, [r3, #0]
 8014ff2:	681b      	ldr	r3, [r3, #0]
 8014ff4:	f003 0304 	and.w	r3, r3, #4
 8014ff8:	2b04      	cmp	r3, #4
 8014ffa:	d10e      	bne.n	801501a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8014ffc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8015000:	9300      	str	r3, [sp, #0]
 8015002:	68fb      	ldr	r3, [r7, #12]
 8015004:	2200      	movs	r2, #0
 8015006:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801500a:	6878      	ldr	r0, [r7, #4]
 801500c:	f000 f819 	bl	8015042 <UART_WaitOnFlagUntilTimeout>
 8015010:	4603      	mov	r3, r0
 8015012:	2b00      	cmp	r3, #0
 8015014:	d001      	beq.n	801501a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8015016:	2303      	movs	r3, #3
 8015018:	e00f      	b.n	801503a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801501a:	687b      	ldr	r3, [r7, #4]
 801501c:	2220      	movs	r2, #32
 801501e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8015022:	687b      	ldr	r3, [r7, #4]
 8015024:	2220      	movs	r2, #32
 8015026:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801502a:	687b      	ldr	r3, [r7, #4]
 801502c:	2200      	movs	r2, #0
 801502e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8015030:	687b      	ldr	r3, [r7, #4]
 8015032:	2200      	movs	r2, #0
 8015034:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8015038:	2300      	movs	r3, #0
}
 801503a:	4618      	mov	r0, r3
 801503c:	3710      	adds	r7, #16
 801503e:	46bd      	mov	sp, r7
 8015040:	bd80      	pop	{r7, pc}

08015042 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8015042:	b580      	push	{r7, lr}
 8015044:	b09c      	sub	sp, #112	; 0x70
 8015046:	af00      	add	r7, sp, #0
 8015048:	60f8      	str	r0, [r7, #12]
 801504a:	60b9      	str	r1, [r7, #8]
 801504c:	603b      	str	r3, [r7, #0]
 801504e:	4613      	mov	r3, r2
 8015050:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8015052:	e0a9      	b.n	80151a8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8015054:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015056:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801505a:	f000 80a5 	beq.w	80151a8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801505e:	f7f4 fee9 	bl	8009e34 <HAL_GetTick>
 8015062:	4602      	mov	r2, r0
 8015064:	683b      	ldr	r3, [r7, #0]
 8015066:	1ad3      	subs	r3, r2, r3
 8015068:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801506a:	429a      	cmp	r2, r3
 801506c:	d302      	bcc.n	8015074 <UART_WaitOnFlagUntilTimeout+0x32>
 801506e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015070:	2b00      	cmp	r3, #0
 8015072:	d140      	bne.n	80150f6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8015074:	68fb      	ldr	r3, [r7, #12]
 8015076:	681b      	ldr	r3, [r3, #0]
 8015078:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801507a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801507c:	e853 3f00 	ldrex	r3, [r3]
 8015080:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8015082:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015084:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8015088:	667b      	str	r3, [r7, #100]	; 0x64
 801508a:	68fb      	ldr	r3, [r7, #12]
 801508c:	681b      	ldr	r3, [r3, #0]
 801508e:	461a      	mov	r2, r3
 8015090:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015092:	65fb      	str	r3, [r7, #92]	; 0x5c
 8015094:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015096:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8015098:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801509a:	e841 2300 	strex	r3, r2, [r1]
 801509e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80150a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80150a2:	2b00      	cmp	r3, #0
 80150a4:	d1e6      	bne.n	8015074 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80150a6:	68fb      	ldr	r3, [r7, #12]
 80150a8:	681b      	ldr	r3, [r3, #0]
 80150aa:	3308      	adds	r3, #8
 80150ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80150ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80150b0:	e853 3f00 	ldrex	r3, [r3]
 80150b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80150b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80150b8:	f023 0301 	bic.w	r3, r3, #1
 80150bc:	663b      	str	r3, [r7, #96]	; 0x60
 80150be:	68fb      	ldr	r3, [r7, #12]
 80150c0:	681b      	ldr	r3, [r3, #0]
 80150c2:	3308      	adds	r3, #8
 80150c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80150c6:	64ba      	str	r2, [r7, #72]	; 0x48
 80150c8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80150ca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80150cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80150ce:	e841 2300 	strex	r3, r2, [r1]
 80150d2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80150d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80150d6:	2b00      	cmp	r3, #0
 80150d8:	d1e5      	bne.n	80150a6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80150da:	68fb      	ldr	r3, [r7, #12]
 80150dc:	2220      	movs	r2, #32
 80150de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80150e2:	68fb      	ldr	r3, [r7, #12]
 80150e4:	2220      	movs	r2, #32
 80150e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80150ea:	68fb      	ldr	r3, [r7, #12]
 80150ec:	2200      	movs	r2, #0
 80150ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80150f2:	2303      	movs	r3, #3
 80150f4:	e069      	b.n	80151ca <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80150f6:	68fb      	ldr	r3, [r7, #12]
 80150f8:	681b      	ldr	r3, [r3, #0]
 80150fa:	681b      	ldr	r3, [r3, #0]
 80150fc:	f003 0304 	and.w	r3, r3, #4
 8015100:	2b00      	cmp	r3, #0
 8015102:	d051      	beq.n	80151a8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8015104:	68fb      	ldr	r3, [r7, #12]
 8015106:	681b      	ldr	r3, [r3, #0]
 8015108:	69db      	ldr	r3, [r3, #28]
 801510a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801510e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8015112:	d149      	bne.n	80151a8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8015114:	68fb      	ldr	r3, [r7, #12]
 8015116:	681b      	ldr	r3, [r3, #0]
 8015118:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801511c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 801511e:	68fb      	ldr	r3, [r7, #12]
 8015120:	681b      	ldr	r3, [r3, #0]
 8015122:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015126:	e853 3f00 	ldrex	r3, [r3]
 801512a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801512c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801512e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8015132:	66fb      	str	r3, [r7, #108]	; 0x6c
 8015134:	68fb      	ldr	r3, [r7, #12]
 8015136:	681b      	ldr	r3, [r3, #0]
 8015138:	461a      	mov	r2, r3
 801513a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801513c:	637b      	str	r3, [r7, #52]	; 0x34
 801513e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015140:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015142:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015144:	e841 2300 	strex	r3, r2, [r1]
 8015148:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801514a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801514c:	2b00      	cmp	r3, #0
 801514e:	d1e6      	bne.n	801511e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015150:	68fb      	ldr	r3, [r7, #12]
 8015152:	681b      	ldr	r3, [r3, #0]
 8015154:	3308      	adds	r3, #8
 8015156:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015158:	697b      	ldr	r3, [r7, #20]
 801515a:	e853 3f00 	ldrex	r3, [r3]
 801515e:	613b      	str	r3, [r7, #16]
   return(result);
 8015160:	693b      	ldr	r3, [r7, #16]
 8015162:	f023 0301 	bic.w	r3, r3, #1
 8015166:	66bb      	str	r3, [r7, #104]	; 0x68
 8015168:	68fb      	ldr	r3, [r7, #12]
 801516a:	681b      	ldr	r3, [r3, #0]
 801516c:	3308      	adds	r3, #8
 801516e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8015170:	623a      	str	r2, [r7, #32]
 8015172:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015174:	69f9      	ldr	r1, [r7, #28]
 8015176:	6a3a      	ldr	r2, [r7, #32]
 8015178:	e841 2300 	strex	r3, r2, [r1]
 801517c:	61bb      	str	r3, [r7, #24]
   return(result);
 801517e:	69bb      	ldr	r3, [r7, #24]
 8015180:	2b00      	cmp	r3, #0
 8015182:	d1e5      	bne.n	8015150 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8015184:	68fb      	ldr	r3, [r7, #12]
 8015186:	2220      	movs	r2, #32
 8015188:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 801518c:	68fb      	ldr	r3, [r7, #12]
 801518e:	2220      	movs	r2, #32
 8015190:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8015194:	68fb      	ldr	r3, [r7, #12]
 8015196:	2220      	movs	r2, #32
 8015198:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801519c:	68fb      	ldr	r3, [r7, #12]
 801519e:	2200      	movs	r2, #0
 80151a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80151a4:	2303      	movs	r3, #3
 80151a6:	e010      	b.n	80151ca <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80151a8:	68fb      	ldr	r3, [r7, #12]
 80151aa:	681b      	ldr	r3, [r3, #0]
 80151ac:	69da      	ldr	r2, [r3, #28]
 80151ae:	68bb      	ldr	r3, [r7, #8]
 80151b0:	4013      	ands	r3, r2
 80151b2:	68ba      	ldr	r2, [r7, #8]
 80151b4:	429a      	cmp	r2, r3
 80151b6:	bf0c      	ite	eq
 80151b8:	2301      	moveq	r3, #1
 80151ba:	2300      	movne	r3, #0
 80151bc:	b2db      	uxtb	r3, r3
 80151be:	461a      	mov	r2, r3
 80151c0:	79fb      	ldrb	r3, [r7, #7]
 80151c2:	429a      	cmp	r2, r3
 80151c4:	f43f af46 	beq.w	8015054 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80151c8:	2300      	movs	r3, #0
}
 80151ca:	4618      	mov	r0, r3
 80151cc:	3770      	adds	r7, #112	; 0x70
 80151ce:	46bd      	mov	sp, r7
 80151d0:	bd80      	pop	{r7, pc}
	...

080151d4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80151d4:	b480      	push	{r7}
 80151d6:	b0a3      	sub	sp, #140	; 0x8c
 80151d8:	af00      	add	r7, sp, #0
 80151da:	60f8      	str	r0, [r7, #12]
 80151dc:	60b9      	str	r1, [r7, #8]
 80151de:	4613      	mov	r3, r2
 80151e0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80151e2:	68fb      	ldr	r3, [r7, #12]
 80151e4:	68ba      	ldr	r2, [r7, #8]
 80151e6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80151e8:	68fb      	ldr	r3, [r7, #12]
 80151ea:	88fa      	ldrh	r2, [r7, #6]
 80151ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80151f0:	68fb      	ldr	r3, [r7, #12]
 80151f2:	88fa      	ldrh	r2, [r7, #6]
 80151f4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80151f8:	68fb      	ldr	r3, [r7, #12]
 80151fa:	2200      	movs	r2, #0
 80151fc:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80151fe:	68fb      	ldr	r3, [r7, #12]
 8015200:	689b      	ldr	r3, [r3, #8]
 8015202:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015206:	d10e      	bne.n	8015226 <UART_Start_Receive_IT+0x52>
 8015208:	68fb      	ldr	r3, [r7, #12]
 801520a:	691b      	ldr	r3, [r3, #16]
 801520c:	2b00      	cmp	r3, #0
 801520e:	d105      	bne.n	801521c <UART_Start_Receive_IT+0x48>
 8015210:	68fb      	ldr	r3, [r7, #12]
 8015212:	f240 12ff 	movw	r2, #511	; 0x1ff
 8015216:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801521a:	e02d      	b.n	8015278 <UART_Start_Receive_IT+0xa4>
 801521c:	68fb      	ldr	r3, [r7, #12]
 801521e:	22ff      	movs	r2, #255	; 0xff
 8015220:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8015224:	e028      	b.n	8015278 <UART_Start_Receive_IT+0xa4>
 8015226:	68fb      	ldr	r3, [r7, #12]
 8015228:	689b      	ldr	r3, [r3, #8]
 801522a:	2b00      	cmp	r3, #0
 801522c:	d10d      	bne.n	801524a <UART_Start_Receive_IT+0x76>
 801522e:	68fb      	ldr	r3, [r7, #12]
 8015230:	691b      	ldr	r3, [r3, #16]
 8015232:	2b00      	cmp	r3, #0
 8015234:	d104      	bne.n	8015240 <UART_Start_Receive_IT+0x6c>
 8015236:	68fb      	ldr	r3, [r7, #12]
 8015238:	22ff      	movs	r2, #255	; 0xff
 801523a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801523e:	e01b      	b.n	8015278 <UART_Start_Receive_IT+0xa4>
 8015240:	68fb      	ldr	r3, [r7, #12]
 8015242:	227f      	movs	r2, #127	; 0x7f
 8015244:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8015248:	e016      	b.n	8015278 <UART_Start_Receive_IT+0xa4>
 801524a:	68fb      	ldr	r3, [r7, #12]
 801524c:	689b      	ldr	r3, [r3, #8]
 801524e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8015252:	d10d      	bne.n	8015270 <UART_Start_Receive_IT+0x9c>
 8015254:	68fb      	ldr	r3, [r7, #12]
 8015256:	691b      	ldr	r3, [r3, #16]
 8015258:	2b00      	cmp	r3, #0
 801525a:	d104      	bne.n	8015266 <UART_Start_Receive_IT+0x92>
 801525c:	68fb      	ldr	r3, [r7, #12]
 801525e:	227f      	movs	r2, #127	; 0x7f
 8015260:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8015264:	e008      	b.n	8015278 <UART_Start_Receive_IT+0xa4>
 8015266:	68fb      	ldr	r3, [r7, #12]
 8015268:	223f      	movs	r2, #63	; 0x3f
 801526a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801526e:	e003      	b.n	8015278 <UART_Start_Receive_IT+0xa4>
 8015270:	68fb      	ldr	r3, [r7, #12]
 8015272:	2200      	movs	r2, #0
 8015274:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015278:	68fb      	ldr	r3, [r7, #12]
 801527a:	2200      	movs	r2, #0
 801527c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8015280:	68fb      	ldr	r3, [r7, #12]
 8015282:	2222      	movs	r2, #34	; 0x22
 8015284:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015288:	68fb      	ldr	r3, [r7, #12]
 801528a:	681b      	ldr	r3, [r3, #0]
 801528c:	3308      	adds	r3, #8
 801528e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015290:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015292:	e853 3f00 	ldrex	r3, [r3]
 8015296:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8015298:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801529a:	f043 0301 	orr.w	r3, r3, #1
 801529e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80152a2:	68fb      	ldr	r3, [r7, #12]
 80152a4:	681b      	ldr	r3, [r3, #0]
 80152a6:	3308      	adds	r3, #8
 80152a8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80152ac:	673a      	str	r2, [r7, #112]	; 0x70
 80152ae:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80152b0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80152b2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80152b4:	e841 2300 	strex	r3, r2, [r1]
 80152b8:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80152ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80152bc:	2b00      	cmp	r3, #0
 80152be:	d1e3      	bne.n	8015288 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80152c0:	68fb      	ldr	r3, [r7, #12]
 80152c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80152c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80152c8:	d153      	bne.n	8015372 <UART_Start_Receive_IT+0x19e>
 80152ca:	68fb      	ldr	r3, [r7, #12]
 80152cc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80152d0:	88fa      	ldrh	r2, [r7, #6]
 80152d2:	429a      	cmp	r2, r3
 80152d4:	d34d      	bcc.n	8015372 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80152d6:	68fb      	ldr	r3, [r7, #12]
 80152d8:	689b      	ldr	r3, [r3, #8]
 80152da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80152de:	d107      	bne.n	80152f0 <UART_Start_Receive_IT+0x11c>
 80152e0:	68fb      	ldr	r3, [r7, #12]
 80152e2:	691b      	ldr	r3, [r3, #16]
 80152e4:	2b00      	cmp	r3, #0
 80152e6:	d103      	bne.n	80152f0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80152e8:	68fb      	ldr	r3, [r7, #12]
 80152ea:	4a4b      	ldr	r2, [pc, #300]	; (8015418 <UART_Start_Receive_IT+0x244>)
 80152ec:	671a      	str	r2, [r3, #112]	; 0x70
 80152ee:	e002      	b.n	80152f6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80152f0:	68fb      	ldr	r3, [r7, #12]
 80152f2:	4a4a      	ldr	r2, [pc, #296]	; (801541c <UART_Start_Receive_IT+0x248>)
 80152f4:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80152f6:	68fb      	ldr	r3, [r7, #12]
 80152f8:	2200      	movs	r2, #0
 80152fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80152fe:	68fb      	ldr	r3, [r7, #12]
 8015300:	691b      	ldr	r3, [r3, #16]
 8015302:	2b00      	cmp	r3, #0
 8015304:	d01a      	beq.n	801533c <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8015306:	68fb      	ldr	r3, [r7, #12]
 8015308:	681b      	ldr	r3, [r3, #0]
 801530a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801530c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801530e:	e853 3f00 	ldrex	r3, [r3]
 8015312:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8015314:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015316:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801531a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801531e:	68fb      	ldr	r3, [r7, #12]
 8015320:	681b      	ldr	r3, [r3, #0]
 8015322:	461a      	mov	r2, r3
 8015324:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8015328:	65fb      	str	r3, [r7, #92]	; 0x5c
 801532a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801532c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801532e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8015330:	e841 2300 	strex	r3, r2, [r1]
 8015334:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8015336:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015338:	2b00      	cmp	r3, #0
 801533a:	d1e4      	bne.n	8015306 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801533c:	68fb      	ldr	r3, [r7, #12]
 801533e:	681b      	ldr	r3, [r3, #0]
 8015340:	3308      	adds	r3, #8
 8015342:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015344:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015346:	e853 3f00 	ldrex	r3, [r3]
 801534a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801534c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801534e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8015352:	67fb      	str	r3, [r7, #124]	; 0x7c
 8015354:	68fb      	ldr	r3, [r7, #12]
 8015356:	681b      	ldr	r3, [r3, #0]
 8015358:	3308      	adds	r3, #8
 801535a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801535c:	64ba      	str	r2, [r7, #72]	; 0x48
 801535e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015360:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8015362:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015364:	e841 2300 	strex	r3, r2, [r1]
 8015368:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 801536a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801536c:	2b00      	cmp	r3, #0
 801536e:	d1e5      	bne.n	801533c <UART_Start_Receive_IT+0x168>
 8015370:	e04a      	b.n	8015408 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8015372:	68fb      	ldr	r3, [r7, #12]
 8015374:	689b      	ldr	r3, [r3, #8]
 8015376:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801537a:	d107      	bne.n	801538c <UART_Start_Receive_IT+0x1b8>
 801537c:	68fb      	ldr	r3, [r7, #12]
 801537e:	691b      	ldr	r3, [r3, #16]
 8015380:	2b00      	cmp	r3, #0
 8015382:	d103      	bne.n	801538c <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8015384:	68fb      	ldr	r3, [r7, #12]
 8015386:	4a26      	ldr	r2, [pc, #152]	; (8015420 <UART_Start_Receive_IT+0x24c>)
 8015388:	671a      	str	r2, [r3, #112]	; 0x70
 801538a:	e002      	b.n	8015392 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 801538c:	68fb      	ldr	r3, [r7, #12]
 801538e:	4a25      	ldr	r2, [pc, #148]	; (8015424 <UART_Start_Receive_IT+0x250>)
 8015390:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8015392:	68fb      	ldr	r3, [r7, #12]
 8015394:	2200      	movs	r2, #0
 8015396:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 801539a:	68fb      	ldr	r3, [r7, #12]
 801539c:	691b      	ldr	r3, [r3, #16]
 801539e:	2b00      	cmp	r3, #0
 80153a0:	d019      	beq.n	80153d6 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80153a2:	68fb      	ldr	r3, [r7, #12]
 80153a4:	681b      	ldr	r3, [r3, #0]
 80153a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80153a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153aa:	e853 3f00 	ldrex	r3, [r3]
 80153ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80153b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153b2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80153b6:	677b      	str	r3, [r7, #116]	; 0x74
 80153b8:	68fb      	ldr	r3, [r7, #12]
 80153ba:	681b      	ldr	r3, [r3, #0]
 80153bc:	461a      	mov	r2, r3
 80153be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80153c0:	637b      	str	r3, [r7, #52]	; 0x34
 80153c2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80153c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80153c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80153c8:	e841 2300 	strex	r3, r2, [r1]
 80153cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80153ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80153d0:	2b00      	cmp	r3, #0
 80153d2:	d1e6      	bne.n	80153a2 <UART_Start_Receive_IT+0x1ce>
 80153d4:	e018      	b.n	8015408 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80153d6:	68fb      	ldr	r3, [r7, #12]
 80153d8:	681b      	ldr	r3, [r3, #0]
 80153da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80153dc:	697b      	ldr	r3, [r7, #20]
 80153de:	e853 3f00 	ldrex	r3, [r3]
 80153e2:	613b      	str	r3, [r7, #16]
   return(result);
 80153e4:	693b      	ldr	r3, [r7, #16]
 80153e6:	f043 0320 	orr.w	r3, r3, #32
 80153ea:	67bb      	str	r3, [r7, #120]	; 0x78
 80153ec:	68fb      	ldr	r3, [r7, #12]
 80153ee:	681b      	ldr	r3, [r3, #0]
 80153f0:	461a      	mov	r2, r3
 80153f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80153f4:	623b      	str	r3, [r7, #32]
 80153f6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80153f8:	69f9      	ldr	r1, [r7, #28]
 80153fa:	6a3a      	ldr	r2, [r7, #32]
 80153fc:	e841 2300 	strex	r3, r2, [r1]
 8015400:	61bb      	str	r3, [r7, #24]
   return(result);
 8015402:	69bb      	ldr	r3, [r7, #24]
 8015404:	2b00      	cmp	r3, #0
 8015406:	d1e6      	bne.n	80153d6 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8015408:	2300      	movs	r3, #0
}
 801540a:	4618      	mov	r0, r3
 801540c:	378c      	adds	r7, #140	; 0x8c
 801540e:	46bd      	mov	sp, r7
 8015410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015414:	4770      	bx	lr
 8015416:	bf00      	nop
 8015418:	08015e75 	.word	0x08015e75
 801541c:	08015b7d 	.word	0x08015b7d
 8015420:	08015a1b 	.word	0x08015a1b
 8015424:	080158bb 	.word	0x080158bb

08015428 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8015428:	b480      	push	{r7}
 801542a:	b095      	sub	sp, #84	; 0x54
 801542c:	af00      	add	r7, sp, #0
 801542e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8015430:	687b      	ldr	r3, [r7, #4]
 8015432:	681b      	ldr	r3, [r3, #0]
 8015434:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015438:	e853 3f00 	ldrex	r3, [r3]
 801543c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801543e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015440:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8015444:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015446:	687b      	ldr	r3, [r7, #4]
 8015448:	681b      	ldr	r3, [r3, #0]
 801544a:	461a      	mov	r2, r3
 801544c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801544e:	643b      	str	r3, [r7, #64]	; 0x40
 8015450:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015452:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8015454:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015456:	e841 2300 	strex	r3, r2, [r1]
 801545a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801545c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801545e:	2b00      	cmp	r3, #0
 8015460:	d1e6      	bne.n	8015430 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8015462:	687b      	ldr	r3, [r7, #4]
 8015464:	681b      	ldr	r3, [r3, #0]
 8015466:	3308      	adds	r3, #8
 8015468:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801546a:	6a3b      	ldr	r3, [r7, #32]
 801546c:	e853 3f00 	ldrex	r3, [r3]
 8015470:	61fb      	str	r3, [r7, #28]
   return(result);
 8015472:	69fa      	ldr	r2, [r7, #28]
 8015474:	4b1e      	ldr	r3, [pc, #120]	; (80154f0 <UART_EndRxTransfer+0xc8>)
 8015476:	4013      	ands	r3, r2
 8015478:	64bb      	str	r3, [r7, #72]	; 0x48
 801547a:	687b      	ldr	r3, [r7, #4]
 801547c:	681b      	ldr	r3, [r3, #0]
 801547e:	3308      	adds	r3, #8
 8015480:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015482:	62fa      	str	r2, [r7, #44]	; 0x2c
 8015484:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015486:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015488:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801548a:	e841 2300 	strex	r3, r2, [r1]
 801548e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8015490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015492:	2b00      	cmp	r3, #0
 8015494:	d1e5      	bne.n	8015462 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015496:	687b      	ldr	r3, [r7, #4]
 8015498:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801549a:	2b01      	cmp	r3, #1
 801549c:	d118      	bne.n	80154d0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801549e:	687b      	ldr	r3, [r7, #4]
 80154a0:	681b      	ldr	r3, [r3, #0]
 80154a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80154a4:	68fb      	ldr	r3, [r7, #12]
 80154a6:	e853 3f00 	ldrex	r3, [r3]
 80154aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80154ac:	68bb      	ldr	r3, [r7, #8]
 80154ae:	f023 0310 	bic.w	r3, r3, #16
 80154b2:	647b      	str	r3, [r7, #68]	; 0x44
 80154b4:	687b      	ldr	r3, [r7, #4]
 80154b6:	681b      	ldr	r3, [r3, #0]
 80154b8:	461a      	mov	r2, r3
 80154ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80154bc:	61bb      	str	r3, [r7, #24]
 80154be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80154c0:	6979      	ldr	r1, [r7, #20]
 80154c2:	69ba      	ldr	r2, [r7, #24]
 80154c4:	e841 2300 	strex	r3, r2, [r1]
 80154c8:	613b      	str	r3, [r7, #16]
   return(result);
 80154ca:	693b      	ldr	r3, [r7, #16]
 80154cc:	2b00      	cmp	r3, #0
 80154ce:	d1e6      	bne.n	801549e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80154d0:	687b      	ldr	r3, [r7, #4]
 80154d2:	2220      	movs	r2, #32
 80154d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80154d8:	687b      	ldr	r3, [r7, #4]
 80154da:	2200      	movs	r2, #0
 80154dc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80154de:	687b      	ldr	r3, [r7, #4]
 80154e0:	2200      	movs	r2, #0
 80154e2:	671a      	str	r2, [r3, #112]	; 0x70
}
 80154e4:	bf00      	nop
 80154e6:	3754      	adds	r7, #84	; 0x54
 80154e8:	46bd      	mov	sp, r7
 80154ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154ee:	4770      	bx	lr
 80154f0:	effffffe 	.word	0xeffffffe

080154f4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80154f4:	b580      	push	{r7, lr}
 80154f6:	b084      	sub	sp, #16
 80154f8:	af00      	add	r7, sp, #0
 80154fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80154fc:	687b      	ldr	r3, [r7, #4]
 80154fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015500:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8015502:	68fb      	ldr	r3, [r7, #12]
 8015504:	2200      	movs	r2, #0
 8015506:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 801550a:	68fb      	ldr	r3, [r7, #12]
 801550c:	2200      	movs	r2, #0
 801550e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8015512:	68f8      	ldr	r0, [r7, #12]
 8015514:	f7fe ff2a 	bl	801436c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8015518:	bf00      	nop
 801551a:	3710      	adds	r7, #16
 801551c:	46bd      	mov	sp, r7
 801551e:	bd80      	pop	{r7, pc}

08015520 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8015520:	b480      	push	{r7}
 8015522:	b08f      	sub	sp, #60	; 0x3c
 8015524:	af00      	add	r7, sp, #0
 8015526:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8015528:	687b      	ldr	r3, [r7, #4]
 801552a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801552e:	2b21      	cmp	r3, #33	; 0x21
 8015530:	d14c      	bne.n	80155cc <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8015532:	687b      	ldr	r3, [r7, #4]
 8015534:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8015538:	b29b      	uxth	r3, r3
 801553a:	2b00      	cmp	r3, #0
 801553c:	d132      	bne.n	80155a4 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 801553e:	687b      	ldr	r3, [r7, #4]
 8015540:	681b      	ldr	r3, [r3, #0]
 8015542:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015544:	6a3b      	ldr	r3, [r7, #32]
 8015546:	e853 3f00 	ldrex	r3, [r3]
 801554a:	61fb      	str	r3, [r7, #28]
   return(result);
 801554c:	69fb      	ldr	r3, [r7, #28]
 801554e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8015552:	637b      	str	r3, [r7, #52]	; 0x34
 8015554:	687b      	ldr	r3, [r7, #4]
 8015556:	681b      	ldr	r3, [r3, #0]
 8015558:	461a      	mov	r2, r3
 801555a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801555c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801555e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015560:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015562:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015564:	e841 2300 	strex	r3, r2, [r1]
 8015568:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801556a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801556c:	2b00      	cmp	r3, #0
 801556e:	d1e6      	bne.n	801553e <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8015570:	687b      	ldr	r3, [r7, #4]
 8015572:	681b      	ldr	r3, [r3, #0]
 8015574:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015576:	68fb      	ldr	r3, [r7, #12]
 8015578:	e853 3f00 	ldrex	r3, [r3]
 801557c:	60bb      	str	r3, [r7, #8]
   return(result);
 801557e:	68bb      	ldr	r3, [r7, #8]
 8015580:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015584:	633b      	str	r3, [r7, #48]	; 0x30
 8015586:	687b      	ldr	r3, [r7, #4]
 8015588:	681b      	ldr	r3, [r3, #0]
 801558a:	461a      	mov	r2, r3
 801558c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801558e:	61bb      	str	r3, [r7, #24]
 8015590:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015592:	6979      	ldr	r1, [r7, #20]
 8015594:	69ba      	ldr	r2, [r7, #24]
 8015596:	e841 2300 	strex	r3, r2, [r1]
 801559a:	613b      	str	r3, [r7, #16]
   return(result);
 801559c:	693b      	ldr	r3, [r7, #16]
 801559e:	2b00      	cmp	r3, #0
 80155a0:	d1e6      	bne.n	8015570 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80155a2:	e013      	b.n	80155cc <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80155a4:	687b      	ldr	r3, [r7, #4]
 80155a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80155a8:	781a      	ldrb	r2, [r3, #0]
 80155aa:	687b      	ldr	r3, [r7, #4]
 80155ac:	681b      	ldr	r3, [r3, #0]
 80155ae:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80155b0:	687b      	ldr	r3, [r7, #4]
 80155b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80155b4:	1c5a      	adds	r2, r3, #1
 80155b6:	687b      	ldr	r3, [r7, #4]
 80155b8:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80155ba:	687b      	ldr	r3, [r7, #4]
 80155bc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80155c0:	b29b      	uxth	r3, r3
 80155c2:	3b01      	subs	r3, #1
 80155c4:	b29a      	uxth	r2, r3
 80155c6:	687b      	ldr	r3, [r7, #4]
 80155c8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 80155cc:	bf00      	nop
 80155ce:	373c      	adds	r7, #60	; 0x3c
 80155d0:	46bd      	mov	sp, r7
 80155d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155d6:	4770      	bx	lr

080155d8 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80155d8:	b480      	push	{r7}
 80155da:	b091      	sub	sp, #68	; 0x44
 80155dc:	af00      	add	r7, sp, #0
 80155de:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80155e0:	687b      	ldr	r3, [r7, #4]
 80155e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80155e6:	2b21      	cmp	r3, #33	; 0x21
 80155e8:	d151      	bne.n	801568e <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 80155ea:	687b      	ldr	r3, [r7, #4]
 80155ec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80155f0:	b29b      	uxth	r3, r3
 80155f2:	2b00      	cmp	r3, #0
 80155f4:	d132      	bne.n	801565c <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80155f6:	687b      	ldr	r3, [r7, #4]
 80155f8:	681b      	ldr	r3, [r3, #0]
 80155fa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80155fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155fe:	e853 3f00 	ldrex	r3, [r3]
 8015602:	623b      	str	r3, [r7, #32]
   return(result);
 8015604:	6a3b      	ldr	r3, [r7, #32]
 8015606:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801560a:	63bb      	str	r3, [r7, #56]	; 0x38
 801560c:	687b      	ldr	r3, [r7, #4]
 801560e:	681b      	ldr	r3, [r3, #0]
 8015610:	461a      	mov	r2, r3
 8015612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015614:	633b      	str	r3, [r7, #48]	; 0x30
 8015616:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015618:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801561a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801561c:	e841 2300 	strex	r3, r2, [r1]
 8015620:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8015622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015624:	2b00      	cmp	r3, #0
 8015626:	d1e6      	bne.n	80155f6 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8015628:	687b      	ldr	r3, [r7, #4]
 801562a:	681b      	ldr	r3, [r3, #0]
 801562c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801562e:	693b      	ldr	r3, [r7, #16]
 8015630:	e853 3f00 	ldrex	r3, [r3]
 8015634:	60fb      	str	r3, [r7, #12]
   return(result);
 8015636:	68fb      	ldr	r3, [r7, #12]
 8015638:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801563c:	637b      	str	r3, [r7, #52]	; 0x34
 801563e:	687b      	ldr	r3, [r7, #4]
 8015640:	681b      	ldr	r3, [r3, #0]
 8015642:	461a      	mov	r2, r3
 8015644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015646:	61fb      	str	r3, [r7, #28]
 8015648:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801564a:	69b9      	ldr	r1, [r7, #24]
 801564c:	69fa      	ldr	r2, [r7, #28]
 801564e:	e841 2300 	strex	r3, r2, [r1]
 8015652:	617b      	str	r3, [r7, #20]
   return(result);
 8015654:	697b      	ldr	r3, [r7, #20]
 8015656:	2b00      	cmp	r3, #0
 8015658:	d1e6      	bne.n	8015628 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 801565a:	e018      	b.n	801568e <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 801565c:	687b      	ldr	r3, [r7, #4]
 801565e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015660:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8015662:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015664:	881b      	ldrh	r3, [r3, #0]
 8015666:	461a      	mov	r2, r3
 8015668:	687b      	ldr	r3, [r7, #4]
 801566a:	681b      	ldr	r3, [r3, #0]
 801566c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8015670:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8015672:	687b      	ldr	r3, [r7, #4]
 8015674:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015676:	1c9a      	adds	r2, r3, #2
 8015678:	687b      	ldr	r3, [r7, #4]
 801567a:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 801567c:	687b      	ldr	r3, [r7, #4]
 801567e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8015682:	b29b      	uxth	r3, r3
 8015684:	3b01      	subs	r3, #1
 8015686:	b29a      	uxth	r2, r3
 8015688:	687b      	ldr	r3, [r7, #4]
 801568a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 801568e:	bf00      	nop
 8015690:	3744      	adds	r7, #68	; 0x44
 8015692:	46bd      	mov	sp, r7
 8015694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015698:	4770      	bx	lr

0801569a <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801569a:	b480      	push	{r7}
 801569c:	b091      	sub	sp, #68	; 0x44
 801569e:	af00      	add	r7, sp, #0
 80156a0:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80156a2:	687b      	ldr	r3, [r7, #4]
 80156a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80156a8:	2b21      	cmp	r3, #33	; 0x21
 80156aa:	d160      	bne.n	801576e <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80156ac:	687b      	ldr	r3, [r7, #4]
 80156ae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80156b2:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80156b4:	e057      	b.n	8015766 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 80156b6:	687b      	ldr	r3, [r7, #4]
 80156b8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80156bc:	b29b      	uxth	r3, r3
 80156be:	2b00      	cmp	r3, #0
 80156c0:	d133      	bne.n	801572a <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80156c2:	687b      	ldr	r3, [r7, #4]
 80156c4:	681b      	ldr	r3, [r3, #0]
 80156c6:	3308      	adds	r3, #8
 80156c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80156ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156cc:	e853 3f00 	ldrex	r3, [r3]
 80156d0:	623b      	str	r3, [r7, #32]
   return(result);
 80156d2:	6a3b      	ldr	r3, [r7, #32]
 80156d4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80156d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80156da:	687b      	ldr	r3, [r7, #4]
 80156dc:	681b      	ldr	r3, [r3, #0]
 80156de:	3308      	adds	r3, #8
 80156e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80156e2:	633a      	str	r2, [r7, #48]	; 0x30
 80156e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80156e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80156e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80156ea:	e841 2300 	strex	r3, r2, [r1]
 80156ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80156f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156f2:	2b00      	cmp	r3, #0
 80156f4:	d1e5      	bne.n	80156c2 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80156f6:	687b      	ldr	r3, [r7, #4]
 80156f8:	681b      	ldr	r3, [r3, #0]
 80156fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80156fc:	693b      	ldr	r3, [r7, #16]
 80156fe:	e853 3f00 	ldrex	r3, [r3]
 8015702:	60fb      	str	r3, [r7, #12]
   return(result);
 8015704:	68fb      	ldr	r3, [r7, #12]
 8015706:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801570a:	637b      	str	r3, [r7, #52]	; 0x34
 801570c:	687b      	ldr	r3, [r7, #4]
 801570e:	681b      	ldr	r3, [r3, #0]
 8015710:	461a      	mov	r2, r3
 8015712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015714:	61fb      	str	r3, [r7, #28]
 8015716:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015718:	69b9      	ldr	r1, [r7, #24]
 801571a:	69fa      	ldr	r2, [r7, #28]
 801571c:	e841 2300 	strex	r3, r2, [r1]
 8015720:	617b      	str	r3, [r7, #20]
   return(result);
 8015722:	697b      	ldr	r3, [r7, #20]
 8015724:	2b00      	cmp	r3, #0
 8015726:	d1e6      	bne.n	80156f6 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8015728:	e021      	b.n	801576e <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 801572a:	687b      	ldr	r3, [r7, #4]
 801572c:	681b      	ldr	r3, [r3, #0]
 801572e:	69db      	ldr	r3, [r3, #28]
 8015730:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015734:	2b00      	cmp	r3, #0
 8015736:	d013      	beq.n	8015760 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8015738:	687b      	ldr	r3, [r7, #4]
 801573a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801573c:	781a      	ldrb	r2, [r3, #0]
 801573e:	687b      	ldr	r3, [r7, #4]
 8015740:	681b      	ldr	r3, [r3, #0]
 8015742:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8015744:	687b      	ldr	r3, [r7, #4]
 8015746:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015748:	1c5a      	adds	r2, r3, #1
 801574a:	687b      	ldr	r3, [r7, #4]
 801574c:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 801574e:	687b      	ldr	r3, [r7, #4]
 8015750:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8015754:	b29b      	uxth	r3, r3
 8015756:	3b01      	subs	r3, #1
 8015758:	b29a      	uxth	r2, r3
 801575a:	687b      	ldr	r3, [r7, #4]
 801575c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8015760:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015762:	3b01      	subs	r3, #1
 8015764:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8015766:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015768:	2b00      	cmp	r3, #0
 801576a:	d1a4      	bne.n	80156b6 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 801576c:	e7ff      	b.n	801576e <UART_TxISR_8BIT_FIFOEN+0xd4>
 801576e:	bf00      	nop
 8015770:	3744      	adds	r7, #68	; 0x44
 8015772:	46bd      	mov	sp, r7
 8015774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015778:	4770      	bx	lr

0801577a <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801577a:	b480      	push	{r7}
 801577c:	b091      	sub	sp, #68	; 0x44
 801577e:	af00      	add	r7, sp, #0
 8015780:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8015782:	687b      	ldr	r3, [r7, #4]
 8015784:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015788:	2b21      	cmp	r3, #33	; 0x21
 801578a:	d165      	bne.n	8015858 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 801578c:	687b      	ldr	r3, [r7, #4]
 801578e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8015792:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8015794:	e05c      	b.n	8015850 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8015796:	687b      	ldr	r3, [r7, #4]
 8015798:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801579c:	b29b      	uxth	r3, r3
 801579e:	2b00      	cmp	r3, #0
 80157a0:	d133      	bne.n	801580a <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80157a2:	687b      	ldr	r3, [r7, #4]
 80157a4:	681b      	ldr	r3, [r3, #0]
 80157a6:	3308      	adds	r3, #8
 80157a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80157aa:	6a3b      	ldr	r3, [r7, #32]
 80157ac:	e853 3f00 	ldrex	r3, [r3]
 80157b0:	61fb      	str	r3, [r7, #28]
   return(result);
 80157b2:	69fb      	ldr	r3, [r7, #28]
 80157b4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80157b8:	637b      	str	r3, [r7, #52]	; 0x34
 80157ba:	687b      	ldr	r3, [r7, #4]
 80157bc:	681b      	ldr	r3, [r3, #0]
 80157be:	3308      	adds	r3, #8
 80157c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80157c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80157c4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80157c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80157c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80157ca:	e841 2300 	strex	r3, r2, [r1]
 80157ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80157d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157d2:	2b00      	cmp	r3, #0
 80157d4:	d1e5      	bne.n	80157a2 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80157d6:	687b      	ldr	r3, [r7, #4]
 80157d8:	681b      	ldr	r3, [r3, #0]
 80157da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80157dc:	68fb      	ldr	r3, [r7, #12]
 80157de:	e853 3f00 	ldrex	r3, [r3]
 80157e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80157e4:	68bb      	ldr	r3, [r7, #8]
 80157e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80157ea:	633b      	str	r3, [r7, #48]	; 0x30
 80157ec:	687b      	ldr	r3, [r7, #4]
 80157ee:	681b      	ldr	r3, [r3, #0]
 80157f0:	461a      	mov	r2, r3
 80157f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80157f4:	61bb      	str	r3, [r7, #24]
 80157f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80157f8:	6979      	ldr	r1, [r7, #20]
 80157fa:	69ba      	ldr	r2, [r7, #24]
 80157fc:	e841 2300 	strex	r3, r2, [r1]
 8015800:	613b      	str	r3, [r7, #16]
   return(result);
 8015802:	693b      	ldr	r3, [r7, #16]
 8015804:	2b00      	cmp	r3, #0
 8015806:	d1e6      	bne.n	80157d6 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8015808:	e026      	b.n	8015858 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 801580a:	687b      	ldr	r3, [r7, #4]
 801580c:	681b      	ldr	r3, [r3, #0]
 801580e:	69db      	ldr	r3, [r3, #28]
 8015810:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015814:	2b00      	cmp	r3, #0
 8015816:	d018      	beq.n	801584a <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8015818:	687b      	ldr	r3, [r7, #4]
 801581a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801581c:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 801581e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015820:	881b      	ldrh	r3, [r3, #0]
 8015822:	461a      	mov	r2, r3
 8015824:	687b      	ldr	r3, [r7, #4]
 8015826:	681b      	ldr	r3, [r3, #0]
 8015828:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801582c:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 801582e:	687b      	ldr	r3, [r7, #4]
 8015830:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015832:	1c9a      	adds	r2, r3, #2
 8015834:	687b      	ldr	r3, [r7, #4]
 8015836:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8015838:	687b      	ldr	r3, [r7, #4]
 801583a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801583e:	b29b      	uxth	r3, r3
 8015840:	3b01      	subs	r3, #1
 8015842:	b29a      	uxth	r2, r3
 8015844:	687b      	ldr	r3, [r7, #4]
 8015846:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 801584a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801584c:	3b01      	subs	r3, #1
 801584e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8015850:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015852:	2b00      	cmp	r3, #0
 8015854:	d19f      	bne.n	8015796 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8015856:	e7ff      	b.n	8015858 <UART_TxISR_16BIT_FIFOEN+0xde>
 8015858:	bf00      	nop
 801585a:	3744      	adds	r7, #68	; 0x44
 801585c:	46bd      	mov	sp, r7
 801585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015862:	4770      	bx	lr

08015864 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8015864:	b580      	push	{r7, lr}
 8015866:	b088      	sub	sp, #32
 8015868:	af00      	add	r7, sp, #0
 801586a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801586c:	687b      	ldr	r3, [r7, #4]
 801586e:	681b      	ldr	r3, [r3, #0]
 8015870:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015872:	68fb      	ldr	r3, [r7, #12]
 8015874:	e853 3f00 	ldrex	r3, [r3]
 8015878:	60bb      	str	r3, [r7, #8]
   return(result);
 801587a:	68bb      	ldr	r3, [r7, #8]
 801587c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015880:	61fb      	str	r3, [r7, #28]
 8015882:	687b      	ldr	r3, [r7, #4]
 8015884:	681b      	ldr	r3, [r3, #0]
 8015886:	461a      	mov	r2, r3
 8015888:	69fb      	ldr	r3, [r7, #28]
 801588a:	61bb      	str	r3, [r7, #24]
 801588c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801588e:	6979      	ldr	r1, [r7, #20]
 8015890:	69ba      	ldr	r2, [r7, #24]
 8015892:	e841 2300 	strex	r3, r2, [r1]
 8015896:	613b      	str	r3, [r7, #16]
   return(result);
 8015898:	693b      	ldr	r3, [r7, #16]
 801589a:	2b00      	cmp	r3, #0
 801589c:	d1e6      	bne.n	801586c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801589e:	687b      	ldr	r3, [r7, #4]
 80158a0:	2220      	movs	r2, #32
 80158a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80158a6:	687b      	ldr	r3, [r7, #4]
 80158a8:	2200      	movs	r2, #0
 80158aa:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80158ac:	6878      	ldr	r0, [r7, #4]
 80158ae:	f7f3 f9f9 	bl	8008ca4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80158b2:	bf00      	nop
 80158b4:	3720      	adds	r7, #32
 80158b6:	46bd      	mov	sp, r7
 80158b8:	bd80      	pop	{r7, pc}

080158ba <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80158ba:	b580      	push	{r7, lr}
 80158bc:	b096      	sub	sp, #88	; 0x58
 80158be:	af00      	add	r7, sp, #0
 80158c0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80158c2:	687b      	ldr	r3, [r7, #4]
 80158c4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80158c8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80158cc:	687b      	ldr	r3, [r7, #4]
 80158ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80158d2:	2b22      	cmp	r3, #34	; 0x22
 80158d4:	f040 8095 	bne.w	8015a02 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80158d8:	687b      	ldr	r3, [r7, #4]
 80158da:	681b      	ldr	r3, [r3, #0]
 80158dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80158de:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80158e2:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80158e6:	b2d9      	uxtb	r1, r3
 80158e8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80158ec:	b2da      	uxtb	r2, r3
 80158ee:	687b      	ldr	r3, [r7, #4]
 80158f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80158f2:	400a      	ands	r2, r1
 80158f4:	b2d2      	uxtb	r2, r2
 80158f6:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80158f8:	687b      	ldr	r3, [r7, #4]
 80158fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80158fc:	1c5a      	adds	r2, r3, #1
 80158fe:	687b      	ldr	r3, [r7, #4]
 8015900:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8015902:	687b      	ldr	r3, [r7, #4]
 8015904:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015908:	b29b      	uxth	r3, r3
 801590a:	3b01      	subs	r3, #1
 801590c:	b29a      	uxth	r2, r3
 801590e:	687b      	ldr	r3, [r7, #4]
 8015910:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8015914:	687b      	ldr	r3, [r7, #4]
 8015916:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801591a:	b29b      	uxth	r3, r3
 801591c:	2b00      	cmp	r3, #0
 801591e:	d178      	bne.n	8015a12 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8015920:	687b      	ldr	r3, [r7, #4]
 8015922:	681b      	ldr	r3, [r3, #0]
 8015924:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015928:	e853 3f00 	ldrex	r3, [r3]
 801592c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801592e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015930:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8015934:	653b      	str	r3, [r7, #80]	; 0x50
 8015936:	687b      	ldr	r3, [r7, #4]
 8015938:	681b      	ldr	r3, [r3, #0]
 801593a:	461a      	mov	r2, r3
 801593c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801593e:	647b      	str	r3, [r7, #68]	; 0x44
 8015940:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015942:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8015944:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015946:	e841 2300 	strex	r3, r2, [r1]
 801594a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801594c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801594e:	2b00      	cmp	r3, #0
 8015950:	d1e6      	bne.n	8015920 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015952:	687b      	ldr	r3, [r7, #4]
 8015954:	681b      	ldr	r3, [r3, #0]
 8015956:	3308      	adds	r3, #8
 8015958:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801595a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801595c:	e853 3f00 	ldrex	r3, [r3]
 8015960:	623b      	str	r3, [r7, #32]
   return(result);
 8015962:	6a3b      	ldr	r3, [r7, #32]
 8015964:	f023 0301 	bic.w	r3, r3, #1
 8015968:	64fb      	str	r3, [r7, #76]	; 0x4c
 801596a:	687b      	ldr	r3, [r7, #4]
 801596c:	681b      	ldr	r3, [r3, #0]
 801596e:	3308      	adds	r3, #8
 8015970:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8015972:	633a      	str	r2, [r7, #48]	; 0x30
 8015974:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015976:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015978:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801597a:	e841 2300 	strex	r3, r2, [r1]
 801597e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8015980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015982:	2b00      	cmp	r3, #0
 8015984:	d1e5      	bne.n	8015952 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8015986:	687b      	ldr	r3, [r7, #4]
 8015988:	2220      	movs	r2, #32
 801598a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801598e:	687b      	ldr	r3, [r7, #4]
 8015990:	2200      	movs	r2, #0
 8015992:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015994:	687b      	ldr	r3, [r7, #4]
 8015996:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015998:	2b01      	cmp	r3, #1
 801599a:	d12e      	bne.n	80159fa <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801599c:	687b      	ldr	r3, [r7, #4]
 801599e:	2200      	movs	r2, #0
 80159a0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80159a2:	687b      	ldr	r3, [r7, #4]
 80159a4:	681b      	ldr	r3, [r3, #0]
 80159a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80159a8:	693b      	ldr	r3, [r7, #16]
 80159aa:	e853 3f00 	ldrex	r3, [r3]
 80159ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80159b0:	68fb      	ldr	r3, [r7, #12]
 80159b2:	f023 0310 	bic.w	r3, r3, #16
 80159b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80159b8:	687b      	ldr	r3, [r7, #4]
 80159ba:	681b      	ldr	r3, [r3, #0]
 80159bc:	461a      	mov	r2, r3
 80159be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80159c0:	61fb      	str	r3, [r7, #28]
 80159c2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80159c4:	69b9      	ldr	r1, [r7, #24]
 80159c6:	69fa      	ldr	r2, [r7, #28]
 80159c8:	e841 2300 	strex	r3, r2, [r1]
 80159cc:	617b      	str	r3, [r7, #20]
   return(result);
 80159ce:	697b      	ldr	r3, [r7, #20]
 80159d0:	2b00      	cmp	r3, #0
 80159d2:	d1e6      	bne.n	80159a2 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80159d4:	687b      	ldr	r3, [r7, #4]
 80159d6:	681b      	ldr	r3, [r3, #0]
 80159d8:	69db      	ldr	r3, [r3, #28]
 80159da:	f003 0310 	and.w	r3, r3, #16
 80159de:	2b10      	cmp	r3, #16
 80159e0:	d103      	bne.n	80159ea <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80159e2:	687b      	ldr	r3, [r7, #4]
 80159e4:	681b      	ldr	r3, [r3, #0]
 80159e6:	2210      	movs	r2, #16
 80159e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80159ea:	687b      	ldr	r3, [r7, #4]
 80159ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80159f0:	4619      	mov	r1, r3
 80159f2:	6878      	ldr	r0, [r7, #4]
 80159f4:	f7fe fcc4 	bl	8014380 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80159f8:	e00b      	b.n	8015a12 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80159fa:	6878      	ldr	r0, [r7, #4]
 80159fc:	f7f3 f940 	bl	8008c80 <HAL_UART_RxCpltCallback>
}
 8015a00:	e007      	b.n	8015a12 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8015a02:	687b      	ldr	r3, [r7, #4]
 8015a04:	681b      	ldr	r3, [r3, #0]
 8015a06:	699a      	ldr	r2, [r3, #24]
 8015a08:	687b      	ldr	r3, [r7, #4]
 8015a0a:	681b      	ldr	r3, [r3, #0]
 8015a0c:	f042 0208 	orr.w	r2, r2, #8
 8015a10:	619a      	str	r2, [r3, #24]
}
 8015a12:	bf00      	nop
 8015a14:	3758      	adds	r7, #88	; 0x58
 8015a16:	46bd      	mov	sp, r7
 8015a18:	bd80      	pop	{r7, pc}

08015a1a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8015a1a:	b580      	push	{r7, lr}
 8015a1c:	b096      	sub	sp, #88	; 0x58
 8015a1e:	af00      	add	r7, sp, #0
 8015a20:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8015a22:	687b      	ldr	r3, [r7, #4]
 8015a24:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015a28:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8015a2c:	687b      	ldr	r3, [r7, #4]
 8015a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015a32:	2b22      	cmp	r3, #34	; 0x22
 8015a34:	f040 8095 	bne.w	8015b62 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8015a38:	687b      	ldr	r3, [r7, #4]
 8015a3a:	681b      	ldr	r3, [r3, #0]
 8015a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a3e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8015a42:	687b      	ldr	r3, [r7, #4]
 8015a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015a46:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8015a48:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8015a4c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8015a50:	4013      	ands	r3, r2
 8015a52:	b29a      	uxth	r2, r3
 8015a54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015a56:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8015a58:	687b      	ldr	r3, [r7, #4]
 8015a5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015a5c:	1c9a      	adds	r2, r3, #2
 8015a5e:	687b      	ldr	r3, [r7, #4]
 8015a60:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8015a62:	687b      	ldr	r3, [r7, #4]
 8015a64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015a68:	b29b      	uxth	r3, r3
 8015a6a:	3b01      	subs	r3, #1
 8015a6c:	b29a      	uxth	r2, r3
 8015a6e:	687b      	ldr	r3, [r7, #4]
 8015a70:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8015a74:	687b      	ldr	r3, [r7, #4]
 8015a76:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015a7a:	b29b      	uxth	r3, r3
 8015a7c:	2b00      	cmp	r3, #0
 8015a7e:	d178      	bne.n	8015b72 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8015a80:	687b      	ldr	r3, [r7, #4]
 8015a82:	681b      	ldr	r3, [r3, #0]
 8015a84:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015a86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015a88:	e853 3f00 	ldrex	r3, [r3]
 8015a8c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8015a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a90:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8015a94:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015a96:	687b      	ldr	r3, [r7, #4]
 8015a98:	681b      	ldr	r3, [r3, #0]
 8015a9a:	461a      	mov	r2, r3
 8015a9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015a9e:	643b      	str	r3, [r7, #64]	; 0x40
 8015aa0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015aa2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8015aa4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015aa6:	e841 2300 	strex	r3, r2, [r1]
 8015aaa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8015aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015aae:	2b00      	cmp	r3, #0
 8015ab0:	d1e6      	bne.n	8015a80 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015ab2:	687b      	ldr	r3, [r7, #4]
 8015ab4:	681b      	ldr	r3, [r3, #0]
 8015ab6:	3308      	adds	r3, #8
 8015ab8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015aba:	6a3b      	ldr	r3, [r7, #32]
 8015abc:	e853 3f00 	ldrex	r3, [r3]
 8015ac0:	61fb      	str	r3, [r7, #28]
   return(result);
 8015ac2:	69fb      	ldr	r3, [r7, #28]
 8015ac4:	f023 0301 	bic.w	r3, r3, #1
 8015ac8:	64bb      	str	r3, [r7, #72]	; 0x48
 8015aca:	687b      	ldr	r3, [r7, #4]
 8015acc:	681b      	ldr	r3, [r3, #0]
 8015ace:	3308      	adds	r3, #8
 8015ad0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015ad2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8015ad4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015ad6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015ad8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015ada:	e841 2300 	strex	r3, r2, [r1]
 8015ade:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8015ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ae2:	2b00      	cmp	r3, #0
 8015ae4:	d1e5      	bne.n	8015ab2 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8015ae6:	687b      	ldr	r3, [r7, #4]
 8015ae8:	2220      	movs	r2, #32
 8015aea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8015aee:	687b      	ldr	r3, [r7, #4]
 8015af0:	2200      	movs	r2, #0
 8015af2:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015af4:	687b      	ldr	r3, [r7, #4]
 8015af6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015af8:	2b01      	cmp	r3, #1
 8015afa:	d12e      	bne.n	8015b5a <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015afc:	687b      	ldr	r3, [r7, #4]
 8015afe:	2200      	movs	r2, #0
 8015b00:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015b02:	687b      	ldr	r3, [r7, #4]
 8015b04:	681b      	ldr	r3, [r3, #0]
 8015b06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015b08:	68fb      	ldr	r3, [r7, #12]
 8015b0a:	e853 3f00 	ldrex	r3, [r3]
 8015b0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8015b10:	68bb      	ldr	r3, [r7, #8]
 8015b12:	f023 0310 	bic.w	r3, r3, #16
 8015b16:	647b      	str	r3, [r7, #68]	; 0x44
 8015b18:	687b      	ldr	r3, [r7, #4]
 8015b1a:	681b      	ldr	r3, [r3, #0]
 8015b1c:	461a      	mov	r2, r3
 8015b1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015b20:	61bb      	str	r3, [r7, #24]
 8015b22:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015b24:	6979      	ldr	r1, [r7, #20]
 8015b26:	69ba      	ldr	r2, [r7, #24]
 8015b28:	e841 2300 	strex	r3, r2, [r1]
 8015b2c:	613b      	str	r3, [r7, #16]
   return(result);
 8015b2e:	693b      	ldr	r3, [r7, #16]
 8015b30:	2b00      	cmp	r3, #0
 8015b32:	d1e6      	bne.n	8015b02 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8015b34:	687b      	ldr	r3, [r7, #4]
 8015b36:	681b      	ldr	r3, [r3, #0]
 8015b38:	69db      	ldr	r3, [r3, #28]
 8015b3a:	f003 0310 	and.w	r3, r3, #16
 8015b3e:	2b10      	cmp	r3, #16
 8015b40:	d103      	bne.n	8015b4a <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8015b42:	687b      	ldr	r3, [r7, #4]
 8015b44:	681b      	ldr	r3, [r3, #0]
 8015b46:	2210      	movs	r2, #16
 8015b48:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8015b4a:	687b      	ldr	r3, [r7, #4]
 8015b4c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8015b50:	4619      	mov	r1, r3
 8015b52:	6878      	ldr	r0, [r7, #4]
 8015b54:	f7fe fc14 	bl	8014380 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8015b58:	e00b      	b.n	8015b72 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8015b5a:	6878      	ldr	r0, [r7, #4]
 8015b5c:	f7f3 f890 	bl	8008c80 <HAL_UART_RxCpltCallback>
}
 8015b60:	e007      	b.n	8015b72 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8015b62:	687b      	ldr	r3, [r7, #4]
 8015b64:	681b      	ldr	r3, [r3, #0]
 8015b66:	699a      	ldr	r2, [r3, #24]
 8015b68:	687b      	ldr	r3, [r7, #4]
 8015b6a:	681b      	ldr	r3, [r3, #0]
 8015b6c:	f042 0208 	orr.w	r2, r2, #8
 8015b70:	619a      	str	r2, [r3, #24]
}
 8015b72:	bf00      	nop
 8015b74:	3758      	adds	r7, #88	; 0x58
 8015b76:	46bd      	mov	sp, r7
 8015b78:	bd80      	pop	{r7, pc}
	...

08015b7c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8015b7c:	b580      	push	{r7, lr}
 8015b7e:	b0a6      	sub	sp, #152	; 0x98
 8015b80:	af00      	add	r7, sp, #0
 8015b82:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8015b84:	687b      	ldr	r3, [r7, #4]
 8015b86:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015b8a:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8015b8e:	687b      	ldr	r3, [r7, #4]
 8015b90:	681b      	ldr	r3, [r3, #0]
 8015b92:	69db      	ldr	r3, [r3, #28]
 8015b94:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8015b98:	687b      	ldr	r3, [r7, #4]
 8015b9a:	681b      	ldr	r3, [r3, #0]
 8015b9c:	681b      	ldr	r3, [r3, #0]
 8015b9e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8015ba2:	687b      	ldr	r3, [r7, #4]
 8015ba4:	681b      	ldr	r3, [r3, #0]
 8015ba6:	689b      	ldr	r3, [r3, #8]
 8015ba8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8015bac:	687b      	ldr	r3, [r7, #4]
 8015bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015bb2:	2b22      	cmp	r3, #34	; 0x22
 8015bb4:	f040 814d 	bne.w	8015e52 <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8015bb8:	687b      	ldr	r3, [r7, #4]
 8015bba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8015bbe:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8015bc2:	e0f4      	b.n	8015dae <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8015bc4:	687b      	ldr	r3, [r7, #4]
 8015bc6:	681b      	ldr	r3, [r3, #0]
 8015bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015bca:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8015bce:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8015bd2:	b2d9      	uxtb	r1, r3
 8015bd4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8015bd8:	b2da      	uxtb	r2, r3
 8015bda:	687b      	ldr	r3, [r7, #4]
 8015bdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015bde:	400a      	ands	r2, r1
 8015be0:	b2d2      	uxtb	r2, r2
 8015be2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8015be4:	687b      	ldr	r3, [r7, #4]
 8015be6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015be8:	1c5a      	adds	r2, r3, #1
 8015bea:	687b      	ldr	r3, [r7, #4]
 8015bec:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8015bee:	687b      	ldr	r3, [r7, #4]
 8015bf0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015bf4:	b29b      	uxth	r3, r3
 8015bf6:	3b01      	subs	r3, #1
 8015bf8:	b29a      	uxth	r2, r3
 8015bfa:	687b      	ldr	r3, [r7, #4]
 8015bfc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8015c00:	687b      	ldr	r3, [r7, #4]
 8015c02:	681b      	ldr	r3, [r3, #0]
 8015c04:	69db      	ldr	r3, [r3, #28]
 8015c06:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8015c0a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8015c0e:	f003 0307 	and.w	r3, r3, #7
 8015c12:	2b00      	cmp	r3, #0
 8015c14:	d053      	beq.n	8015cbe <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8015c16:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8015c1a:	f003 0301 	and.w	r3, r3, #1
 8015c1e:	2b00      	cmp	r3, #0
 8015c20:	d011      	beq.n	8015c46 <UART_RxISR_8BIT_FIFOEN+0xca>
 8015c22:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015c2a:	2b00      	cmp	r3, #0
 8015c2c:	d00b      	beq.n	8015c46 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8015c2e:	687b      	ldr	r3, [r7, #4]
 8015c30:	681b      	ldr	r3, [r3, #0]
 8015c32:	2201      	movs	r2, #1
 8015c34:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8015c36:	687b      	ldr	r3, [r7, #4]
 8015c38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015c3c:	f043 0201 	orr.w	r2, r3, #1
 8015c40:	687b      	ldr	r3, [r7, #4]
 8015c42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8015c46:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8015c4a:	f003 0302 	and.w	r3, r3, #2
 8015c4e:	2b00      	cmp	r3, #0
 8015c50:	d011      	beq.n	8015c76 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8015c52:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8015c56:	f003 0301 	and.w	r3, r3, #1
 8015c5a:	2b00      	cmp	r3, #0
 8015c5c:	d00b      	beq.n	8015c76 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8015c5e:	687b      	ldr	r3, [r7, #4]
 8015c60:	681b      	ldr	r3, [r3, #0]
 8015c62:	2202      	movs	r2, #2
 8015c64:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8015c66:	687b      	ldr	r3, [r7, #4]
 8015c68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015c6c:	f043 0204 	orr.w	r2, r3, #4
 8015c70:	687b      	ldr	r3, [r7, #4]
 8015c72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8015c76:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8015c7a:	f003 0304 	and.w	r3, r3, #4
 8015c7e:	2b00      	cmp	r3, #0
 8015c80:	d011      	beq.n	8015ca6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8015c82:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8015c86:	f003 0301 	and.w	r3, r3, #1
 8015c8a:	2b00      	cmp	r3, #0
 8015c8c:	d00b      	beq.n	8015ca6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8015c8e:	687b      	ldr	r3, [r7, #4]
 8015c90:	681b      	ldr	r3, [r3, #0]
 8015c92:	2204      	movs	r2, #4
 8015c94:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8015c96:	687b      	ldr	r3, [r7, #4]
 8015c98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015c9c:	f043 0202 	orr.w	r2, r3, #2
 8015ca0:	687b      	ldr	r3, [r7, #4]
 8015ca2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8015ca6:	687b      	ldr	r3, [r7, #4]
 8015ca8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015cac:	2b00      	cmp	r3, #0
 8015cae:	d006      	beq.n	8015cbe <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8015cb0:	6878      	ldr	r0, [r7, #4]
 8015cb2:	f7fe fb5b 	bl	801436c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015cb6:	687b      	ldr	r3, [r7, #4]
 8015cb8:	2200      	movs	r2, #0
 8015cba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8015cbe:	687b      	ldr	r3, [r7, #4]
 8015cc0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015cc4:	b29b      	uxth	r3, r3
 8015cc6:	2b00      	cmp	r3, #0
 8015cc8:	d171      	bne.n	8015dae <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8015cca:	687b      	ldr	r3, [r7, #4]
 8015ccc:	681b      	ldr	r3, [r3, #0]
 8015cce:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015cd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015cd2:	e853 3f00 	ldrex	r3, [r3]
 8015cd6:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8015cd8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015cda:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8015cde:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8015ce2:	687b      	ldr	r3, [r7, #4]
 8015ce4:	681b      	ldr	r3, [r3, #0]
 8015ce6:	461a      	mov	r2, r3
 8015ce8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8015cec:	66bb      	str	r3, [r7, #104]	; 0x68
 8015cee:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015cf0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8015cf2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8015cf4:	e841 2300 	strex	r3, r2, [r1]
 8015cf8:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8015cfa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015cfc:	2b00      	cmp	r3, #0
 8015cfe:	d1e4      	bne.n	8015cca <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8015d00:	687b      	ldr	r3, [r7, #4]
 8015d02:	681b      	ldr	r3, [r3, #0]
 8015d04:	3308      	adds	r3, #8
 8015d06:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015d08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015d0a:	e853 3f00 	ldrex	r3, [r3]
 8015d0e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8015d10:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015d12:	4b56      	ldr	r3, [pc, #344]	; (8015e6c <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 8015d14:	4013      	ands	r3, r2
 8015d16:	67fb      	str	r3, [r7, #124]	; 0x7c
 8015d18:	687b      	ldr	r3, [r7, #4]
 8015d1a:	681b      	ldr	r3, [r3, #0]
 8015d1c:	3308      	adds	r3, #8
 8015d1e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8015d20:	657a      	str	r2, [r7, #84]	; 0x54
 8015d22:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015d24:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8015d26:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8015d28:	e841 2300 	strex	r3, r2, [r1]
 8015d2c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8015d2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015d30:	2b00      	cmp	r3, #0
 8015d32:	d1e5      	bne.n	8015d00 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8015d34:	687b      	ldr	r3, [r7, #4]
 8015d36:	2220      	movs	r2, #32
 8015d38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8015d3c:	687b      	ldr	r3, [r7, #4]
 8015d3e:	2200      	movs	r2, #0
 8015d40:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015d42:	687b      	ldr	r3, [r7, #4]
 8015d44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015d46:	2b01      	cmp	r3, #1
 8015d48:	d12e      	bne.n	8015da8 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015d4a:	687b      	ldr	r3, [r7, #4]
 8015d4c:	2200      	movs	r2, #0
 8015d4e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015d50:	687b      	ldr	r3, [r7, #4]
 8015d52:	681b      	ldr	r3, [r3, #0]
 8015d54:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015d56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015d58:	e853 3f00 	ldrex	r3, [r3]
 8015d5c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8015d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d60:	f023 0310 	bic.w	r3, r3, #16
 8015d64:	67bb      	str	r3, [r7, #120]	; 0x78
 8015d66:	687b      	ldr	r3, [r7, #4]
 8015d68:	681b      	ldr	r3, [r3, #0]
 8015d6a:	461a      	mov	r2, r3
 8015d6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015d6e:	643b      	str	r3, [r7, #64]	; 0x40
 8015d70:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015d72:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8015d74:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015d76:	e841 2300 	strex	r3, r2, [r1]
 8015d7a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8015d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d7e:	2b00      	cmp	r3, #0
 8015d80:	d1e6      	bne.n	8015d50 <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8015d82:	687b      	ldr	r3, [r7, #4]
 8015d84:	681b      	ldr	r3, [r3, #0]
 8015d86:	69db      	ldr	r3, [r3, #28]
 8015d88:	f003 0310 	and.w	r3, r3, #16
 8015d8c:	2b10      	cmp	r3, #16
 8015d8e:	d103      	bne.n	8015d98 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8015d90:	687b      	ldr	r3, [r7, #4]
 8015d92:	681b      	ldr	r3, [r3, #0]
 8015d94:	2210      	movs	r2, #16
 8015d96:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8015d98:	687b      	ldr	r3, [r7, #4]
 8015d9a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8015d9e:	4619      	mov	r1, r3
 8015da0:	6878      	ldr	r0, [r7, #4]
 8015da2:	f7fe faed 	bl	8014380 <HAL_UARTEx_RxEventCallback>
 8015da6:	e002      	b.n	8015dae <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8015da8:	6878      	ldr	r0, [r7, #4]
 8015daa:	f7f2 ff69 	bl	8008c80 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8015dae:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8015db2:	2b00      	cmp	r3, #0
 8015db4:	d006      	beq.n	8015dc4 <UART_RxISR_8BIT_FIFOEN+0x248>
 8015db6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8015dba:	f003 0320 	and.w	r3, r3, #32
 8015dbe:	2b00      	cmp	r3, #0
 8015dc0:	f47f af00 	bne.w	8015bc4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8015dc4:	687b      	ldr	r3, [r7, #4]
 8015dc6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015dca:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8015dce:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8015dd2:	2b00      	cmp	r3, #0
 8015dd4:	d045      	beq.n	8015e62 <UART_RxISR_8BIT_FIFOEN+0x2e6>
 8015dd6:	687b      	ldr	r3, [r7, #4]
 8015dd8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8015ddc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8015de0:	429a      	cmp	r2, r3
 8015de2:	d23e      	bcs.n	8015e62 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8015de4:	687b      	ldr	r3, [r7, #4]
 8015de6:	681b      	ldr	r3, [r3, #0]
 8015de8:	3308      	adds	r3, #8
 8015dea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015dec:	6a3b      	ldr	r3, [r7, #32]
 8015dee:	e853 3f00 	ldrex	r3, [r3]
 8015df2:	61fb      	str	r3, [r7, #28]
   return(result);
 8015df4:	69fb      	ldr	r3, [r7, #28]
 8015df6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8015dfa:	673b      	str	r3, [r7, #112]	; 0x70
 8015dfc:	687b      	ldr	r3, [r7, #4]
 8015dfe:	681b      	ldr	r3, [r3, #0]
 8015e00:	3308      	adds	r3, #8
 8015e02:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8015e04:	62fa      	str	r2, [r7, #44]	; 0x2c
 8015e06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015e08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015e0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015e0c:	e841 2300 	strex	r3, r2, [r1]
 8015e10:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8015e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e14:	2b00      	cmp	r3, #0
 8015e16:	d1e5      	bne.n	8015de4 <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8015e18:	687b      	ldr	r3, [r7, #4]
 8015e1a:	4a15      	ldr	r2, [pc, #84]	; (8015e70 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8015e1c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8015e1e:	687b      	ldr	r3, [r7, #4]
 8015e20:	681b      	ldr	r3, [r3, #0]
 8015e22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015e24:	68fb      	ldr	r3, [r7, #12]
 8015e26:	e853 3f00 	ldrex	r3, [r3]
 8015e2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8015e2c:	68bb      	ldr	r3, [r7, #8]
 8015e2e:	f043 0320 	orr.w	r3, r3, #32
 8015e32:	66fb      	str	r3, [r7, #108]	; 0x6c
 8015e34:	687b      	ldr	r3, [r7, #4]
 8015e36:	681b      	ldr	r3, [r3, #0]
 8015e38:	461a      	mov	r2, r3
 8015e3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015e3c:	61bb      	str	r3, [r7, #24]
 8015e3e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015e40:	6979      	ldr	r1, [r7, #20]
 8015e42:	69ba      	ldr	r2, [r7, #24]
 8015e44:	e841 2300 	strex	r3, r2, [r1]
 8015e48:	613b      	str	r3, [r7, #16]
   return(result);
 8015e4a:	693b      	ldr	r3, [r7, #16]
 8015e4c:	2b00      	cmp	r3, #0
 8015e4e:	d1e6      	bne.n	8015e1e <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8015e50:	e007      	b.n	8015e62 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8015e52:	687b      	ldr	r3, [r7, #4]
 8015e54:	681b      	ldr	r3, [r3, #0]
 8015e56:	699a      	ldr	r2, [r3, #24]
 8015e58:	687b      	ldr	r3, [r7, #4]
 8015e5a:	681b      	ldr	r3, [r3, #0]
 8015e5c:	f042 0208 	orr.w	r2, r2, #8
 8015e60:	619a      	str	r2, [r3, #24]
}
 8015e62:	bf00      	nop
 8015e64:	3798      	adds	r7, #152	; 0x98
 8015e66:	46bd      	mov	sp, r7
 8015e68:	bd80      	pop	{r7, pc}
 8015e6a:	bf00      	nop
 8015e6c:	effffffe 	.word	0xeffffffe
 8015e70:	080158bb 	.word	0x080158bb

08015e74 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8015e74:	b580      	push	{r7, lr}
 8015e76:	b0a8      	sub	sp, #160	; 0xa0
 8015e78:	af00      	add	r7, sp, #0
 8015e7a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8015e7c:	687b      	ldr	r3, [r7, #4]
 8015e7e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015e82:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8015e86:	687b      	ldr	r3, [r7, #4]
 8015e88:	681b      	ldr	r3, [r3, #0]
 8015e8a:	69db      	ldr	r3, [r3, #28]
 8015e8c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8015e90:	687b      	ldr	r3, [r7, #4]
 8015e92:	681b      	ldr	r3, [r3, #0]
 8015e94:	681b      	ldr	r3, [r3, #0]
 8015e96:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8015e9a:	687b      	ldr	r3, [r7, #4]
 8015e9c:	681b      	ldr	r3, [r3, #0]
 8015e9e:	689b      	ldr	r3, [r3, #8]
 8015ea0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8015ea4:	687b      	ldr	r3, [r7, #4]
 8015ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015eaa:	2b22      	cmp	r3, #34	; 0x22
 8015eac:	f040 8151 	bne.w	8016152 <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8015eb0:	687b      	ldr	r3, [r7, #4]
 8015eb2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8015eb6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8015eba:	e0f8      	b.n	80160ae <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8015ebc:	687b      	ldr	r3, [r7, #4]
 8015ebe:	681b      	ldr	r3, [r3, #0]
 8015ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ec2:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8015ec6:	687b      	ldr	r3, [r7, #4]
 8015ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015eca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8015ece:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8015ed2:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8015ed6:	4013      	ands	r3, r2
 8015ed8:	b29a      	uxth	r2, r3
 8015eda:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8015ede:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8015ee0:	687b      	ldr	r3, [r7, #4]
 8015ee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015ee4:	1c9a      	adds	r2, r3, #2
 8015ee6:	687b      	ldr	r3, [r7, #4]
 8015ee8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8015eea:	687b      	ldr	r3, [r7, #4]
 8015eec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015ef0:	b29b      	uxth	r3, r3
 8015ef2:	3b01      	subs	r3, #1
 8015ef4:	b29a      	uxth	r2, r3
 8015ef6:	687b      	ldr	r3, [r7, #4]
 8015ef8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8015efc:	687b      	ldr	r3, [r7, #4]
 8015efe:	681b      	ldr	r3, [r3, #0]
 8015f00:	69db      	ldr	r3, [r3, #28]
 8015f02:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8015f06:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8015f0a:	f003 0307 	and.w	r3, r3, #7
 8015f0e:	2b00      	cmp	r3, #0
 8015f10:	d053      	beq.n	8015fba <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8015f12:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8015f16:	f003 0301 	and.w	r3, r3, #1
 8015f1a:	2b00      	cmp	r3, #0
 8015f1c:	d011      	beq.n	8015f42 <UART_RxISR_16BIT_FIFOEN+0xce>
 8015f1e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8015f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015f26:	2b00      	cmp	r3, #0
 8015f28:	d00b      	beq.n	8015f42 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8015f2a:	687b      	ldr	r3, [r7, #4]
 8015f2c:	681b      	ldr	r3, [r3, #0]
 8015f2e:	2201      	movs	r2, #1
 8015f30:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8015f32:	687b      	ldr	r3, [r7, #4]
 8015f34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015f38:	f043 0201 	orr.w	r2, r3, #1
 8015f3c:	687b      	ldr	r3, [r7, #4]
 8015f3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8015f42:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8015f46:	f003 0302 	and.w	r3, r3, #2
 8015f4a:	2b00      	cmp	r3, #0
 8015f4c:	d011      	beq.n	8015f72 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8015f4e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015f52:	f003 0301 	and.w	r3, r3, #1
 8015f56:	2b00      	cmp	r3, #0
 8015f58:	d00b      	beq.n	8015f72 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8015f5a:	687b      	ldr	r3, [r7, #4]
 8015f5c:	681b      	ldr	r3, [r3, #0]
 8015f5e:	2202      	movs	r2, #2
 8015f60:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8015f62:	687b      	ldr	r3, [r7, #4]
 8015f64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015f68:	f043 0204 	orr.w	r2, r3, #4
 8015f6c:	687b      	ldr	r3, [r7, #4]
 8015f6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8015f72:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8015f76:	f003 0304 	and.w	r3, r3, #4
 8015f7a:	2b00      	cmp	r3, #0
 8015f7c:	d011      	beq.n	8015fa2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8015f7e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015f82:	f003 0301 	and.w	r3, r3, #1
 8015f86:	2b00      	cmp	r3, #0
 8015f88:	d00b      	beq.n	8015fa2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8015f8a:	687b      	ldr	r3, [r7, #4]
 8015f8c:	681b      	ldr	r3, [r3, #0]
 8015f8e:	2204      	movs	r2, #4
 8015f90:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8015f92:	687b      	ldr	r3, [r7, #4]
 8015f94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015f98:	f043 0202 	orr.w	r2, r3, #2
 8015f9c:	687b      	ldr	r3, [r7, #4]
 8015f9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8015fa2:	687b      	ldr	r3, [r7, #4]
 8015fa4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015fa8:	2b00      	cmp	r3, #0
 8015faa:	d006      	beq.n	8015fba <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8015fac:	6878      	ldr	r0, [r7, #4]
 8015fae:	f7fe f9dd 	bl	801436c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015fb2:	687b      	ldr	r3, [r7, #4]
 8015fb4:	2200      	movs	r2, #0
 8015fb6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8015fba:	687b      	ldr	r3, [r7, #4]
 8015fbc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015fc0:	b29b      	uxth	r3, r3
 8015fc2:	2b00      	cmp	r3, #0
 8015fc4:	d173      	bne.n	80160ae <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8015fc6:	687b      	ldr	r3, [r7, #4]
 8015fc8:	681b      	ldr	r3, [r3, #0]
 8015fca:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015fcc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015fce:	e853 3f00 	ldrex	r3, [r3]
 8015fd2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8015fd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015fd6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8015fda:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8015fde:	687b      	ldr	r3, [r7, #4]
 8015fe0:	681b      	ldr	r3, [r3, #0]
 8015fe2:	461a      	mov	r2, r3
 8015fe4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8015fe8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8015fea:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015fec:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8015fee:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8015ff0:	e841 2300 	strex	r3, r2, [r1]
 8015ff4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8015ff6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015ff8:	2b00      	cmp	r3, #0
 8015ffa:	d1e4      	bne.n	8015fc6 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8015ffc:	687b      	ldr	r3, [r7, #4]
 8015ffe:	681b      	ldr	r3, [r3, #0]
 8016000:	3308      	adds	r3, #8
 8016002:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016004:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016006:	e853 3f00 	ldrex	r3, [r3]
 801600a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801600c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801600e:	4b57      	ldr	r3, [pc, #348]	; (801616c <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 8016010:	4013      	ands	r3, r2
 8016012:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8016016:	687b      	ldr	r3, [r7, #4]
 8016018:	681b      	ldr	r3, [r3, #0]
 801601a:	3308      	adds	r3, #8
 801601c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8016020:	65ba      	str	r2, [r7, #88]	; 0x58
 8016022:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016024:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8016026:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8016028:	e841 2300 	strex	r3, r2, [r1]
 801602c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801602e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016030:	2b00      	cmp	r3, #0
 8016032:	d1e3      	bne.n	8015ffc <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8016034:	687b      	ldr	r3, [r7, #4]
 8016036:	2220      	movs	r2, #32
 8016038:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801603c:	687b      	ldr	r3, [r7, #4]
 801603e:	2200      	movs	r2, #0
 8016040:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016042:	687b      	ldr	r3, [r7, #4]
 8016044:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016046:	2b01      	cmp	r3, #1
 8016048:	d12e      	bne.n	80160a8 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801604a:	687b      	ldr	r3, [r7, #4]
 801604c:	2200      	movs	r2, #0
 801604e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016050:	687b      	ldr	r3, [r7, #4]
 8016052:	681b      	ldr	r3, [r3, #0]
 8016054:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016058:	e853 3f00 	ldrex	r3, [r3]
 801605c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801605e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016060:	f023 0310 	bic.w	r3, r3, #16
 8016064:	67fb      	str	r3, [r7, #124]	; 0x7c
 8016066:	687b      	ldr	r3, [r7, #4]
 8016068:	681b      	ldr	r3, [r3, #0]
 801606a:	461a      	mov	r2, r3
 801606c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801606e:	647b      	str	r3, [r7, #68]	; 0x44
 8016070:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016072:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8016074:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016076:	e841 2300 	strex	r3, r2, [r1]
 801607a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801607c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801607e:	2b00      	cmp	r3, #0
 8016080:	d1e6      	bne.n	8016050 <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8016082:	687b      	ldr	r3, [r7, #4]
 8016084:	681b      	ldr	r3, [r3, #0]
 8016086:	69db      	ldr	r3, [r3, #28]
 8016088:	f003 0310 	and.w	r3, r3, #16
 801608c:	2b10      	cmp	r3, #16
 801608e:	d103      	bne.n	8016098 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8016090:	687b      	ldr	r3, [r7, #4]
 8016092:	681b      	ldr	r3, [r3, #0]
 8016094:	2210      	movs	r2, #16
 8016096:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8016098:	687b      	ldr	r3, [r7, #4]
 801609a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801609e:	4619      	mov	r1, r3
 80160a0:	6878      	ldr	r0, [r7, #4]
 80160a2:	f7fe f96d 	bl	8014380 <HAL_UARTEx_RxEventCallback>
 80160a6:	e002      	b.n	80160ae <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80160a8:	6878      	ldr	r0, [r7, #4]
 80160aa:	f7f2 fde9 	bl	8008c80 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80160ae:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80160b2:	2b00      	cmp	r3, #0
 80160b4:	d006      	beq.n	80160c4 <UART_RxISR_16BIT_FIFOEN+0x250>
 80160b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80160ba:	f003 0320 	and.w	r3, r3, #32
 80160be:	2b00      	cmp	r3, #0
 80160c0:	f47f aefc 	bne.w	8015ebc <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80160c4:	687b      	ldr	r3, [r7, #4]
 80160c6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80160ca:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80160ce:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80160d2:	2b00      	cmp	r3, #0
 80160d4:	d045      	beq.n	8016162 <UART_RxISR_16BIT_FIFOEN+0x2ee>
 80160d6:	687b      	ldr	r3, [r7, #4]
 80160d8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80160dc:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 80160e0:	429a      	cmp	r2, r3
 80160e2:	d23e      	bcs.n	8016162 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80160e4:	687b      	ldr	r3, [r7, #4]
 80160e6:	681b      	ldr	r3, [r3, #0]
 80160e8:	3308      	adds	r3, #8
 80160ea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80160ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160ee:	e853 3f00 	ldrex	r3, [r3]
 80160f2:	623b      	str	r3, [r7, #32]
   return(result);
 80160f4:	6a3b      	ldr	r3, [r7, #32]
 80160f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80160fa:	677b      	str	r3, [r7, #116]	; 0x74
 80160fc:	687b      	ldr	r3, [r7, #4]
 80160fe:	681b      	ldr	r3, [r3, #0]
 8016100:	3308      	adds	r3, #8
 8016102:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8016104:	633a      	str	r2, [r7, #48]	; 0x30
 8016106:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016108:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801610a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801610c:	e841 2300 	strex	r3, r2, [r1]
 8016110:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8016112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016114:	2b00      	cmp	r3, #0
 8016116:	d1e5      	bne.n	80160e4 <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8016118:	687b      	ldr	r3, [r7, #4]
 801611a:	4a15      	ldr	r2, [pc, #84]	; (8016170 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 801611c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801611e:	687b      	ldr	r3, [r7, #4]
 8016120:	681b      	ldr	r3, [r3, #0]
 8016122:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016124:	693b      	ldr	r3, [r7, #16]
 8016126:	e853 3f00 	ldrex	r3, [r3]
 801612a:	60fb      	str	r3, [r7, #12]
   return(result);
 801612c:	68fb      	ldr	r3, [r7, #12]
 801612e:	f043 0320 	orr.w	r3, r3, #32
 8016132:	673b      	str	r3, [r7, #112]	; 0x70
 8016134:	687b      	ldr	r3, [r7, #4]
 8016136:	681b      	ldr	r3, [r3, #0]
 8016138:	461a      	mov	r2, r3
 801613a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801613c:	61fb      	str	r3, [r7, #28]
 801613e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016140:	69b9      	ldr	r1, [r7, #24]
 8016142:	69fa      	ldr	r2, [r7, #28]
 8016144:	e841 2300 	strex	r3, r2, [r1]
 8016148:	617b      	str	r3, [r7, #20]
   return(result);
 801614a:	697b      	ldr	r3, [r7, #20]
 801614c:	2b00      	cmp	r3, #0
 801614e:	d1e6      	bne.n	801611e <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8016150:	e007      	b.n	8016162 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8016152:	687b      	ldr	r3, [r7, #4]
 8016154:	681b      	ldr	r3, [r3, #0]
 8016156:	699a      	ldr	r2, [r3, #24]
 8016158:	687b      	ldr	r3, [r7, #4]
 801615a:	681b      	ldr	r3, [r3, #0]
 801615c:	f042 0208 	orr.w	r2, r2, #8
 8016160:	619a      	str	r2, [r3, #24]
}
 8016162:	bf00      	nop
 8016164:	37a0      	adds	r7, #160	; 0xa0
 8016166:	46bd      	mov	sp, r7
 8016168:	bd80      	pop	{r7, pc}
 801616a:	bf00      	nop
 801616c:	effffffe 	.word	0xeffffffe
 8016170:	08015a1b 	.word	0x08015a1b

08016174 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8016174:	b480      	push	{r7}
 8016176:	b083      	sub	sp, #12
 8016178:	af00      	add	r7, sp, #0
 801617a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801617c:	bf00      	nop
 801617e:	370c      	adds	r7, #12
 8016180:	46bd      	mov	sp, r7
 8016182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016186:	4770      	bx	lr

08016188 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8016188:	b480      	push	{r7}
 801618a:	b083      	sub	sp, #12
 801618c:	af00      	add	r7, sp, #0
 801618e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8016190:	bf00      	nop
 8016192:	370c      	adds	r7, #12
 8016194:	46bd      	mov	sp, r7
 8016196:	f85d 7b04 	ldr.w	r7, [sp], #4
 801619a:	4770      	bx	lr

0801619c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 801619c:	b480      	push	{r7}
 801619e:	b083      	sub	sp, #12
 80161a0:	af00      	add	r7, sp, #0
 80161a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80161a4:	bf00      	nop
 80161a6:	370c      	adds	r7, #12
 80161a8:	46bd      	mov	sp, r7
 80161aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161ae:	4770      	bx	lr

080161b0 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 80161b0:	b580      	push	{r7, lr}
 80161b2:	b084      	sub	sp, #16
 80161b4:	af00      	add	r7, sp, #0
 80161b6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80161b8:	687b      	ldr	r3, [r7, #4]
 80161ba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80161be:	2b01      	cmp	r3, #1
 80161c0:	d101      	bne.n	80161c6 <HAL_UARTEx_EnableFifoMode+0x16>
 80161c2:	2302      	movs	r3, #2
 80161c4:	e02b      	b.n	801621e <HAL_UARTEx_EnableFifoMode+0x6e>
 80161c6:	687b      	ldr	r3, [r7, #4]
 80161c8:	2201      	movs	r2, #1
 80161ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80161ce:	687b      	ldr	r3, [r7, #4]
 80161d0:	2224      	movs	r2, #36	; 0x24
 80161d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80161d6:	687b      	ldr	r3, [r7, #4]
 80161d8:	681b      	ldr	r3, [r3, #0]
 80161da:	681b      	ldr	r3, [r3, #0]
 80161dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80161de:	687b      	ldr	r3, [r7, #4]
 80161e0:	681b      	ldr	r3, [r3, #0]
 80161e2:	681a      	ldr	r2, [r3, #0]
 80161e4:	687b      	ldr	r3, [r7, #4]
 80161e6:	681b      	ldr	r3, [r3, #0]
 80161e8:	f022 0201 	bic.w	r2, r2, #1
 80161ec:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 80161ee:	68fb      	ldr	r3, [r7, #12]
 80161f0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80161f4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 80161f6:	687b      	ldr	r3, [r7, #4]
 80161f8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80161fc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80161fe:	687b      	ldr	r3, [r7, #4]
 8016200:	681b      	ldr	r3, [r3, #0]
 8016202:	68fa      	ldr	r2, [r7, #12]
 8016204:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8016206:	6878      	ldr	r0, [r7, #4]
 8016208:	f000 f8c2 	bl	8016390 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 801620c:	687b      	ldr	r3, [r7, #4]
 801620e:	2220      	movs	r2, #32
 8016210:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8016214:	687b      	ldr	r3, [r7, #4]
 8016216:	2200      	movs	r2, #0
 8016218:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801621c:	2300      	movs	r3, #0
}
 801621e:	4618      	mov	r0, r3
 8016220:	3710      	adds	r7, #16
 8016222:	46bd      	mov	sp, r7
 8016224:	bd80      	pop	{r7, pc}

08016226 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8016226:	b480      	push	{r7}
 8016228:	b085      	sub	sp, #20
 801622a:	af00      	add	r7, sp, #0
 801622c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801622e:	687b      	ldr	r3, [r7, #4]
 8016230:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8016234:	2b01      	cmp	r3, #1
 8016236:	d101      	bne.n	801623c <HAL_UARTEx_DisableFifoMode+0x16>
 8016238:	2302      	movs	r3, #2
 801623a:	e027      	b.n	801628c <HAL_UARTEx_DisableFifoMode+0x66>
 801623c:	687b      	ldr	r3, [r7, #4]
 801623e:	2201      	movs	r2, #1
 8016240:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8016244:	687b      	ldr	r3, [r7, #4]
 8016246:	2224      	movs	r2, #36	; 0x24
 8016248:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801624c:	687b      	ldr	r3, [r7, #4]
 801624e:	681b      	ldr	r3, [r3, #0]
 8016250:	681b      	ldr	r3, [r3, #0]
 8016252:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8016254:	687b      	ldr	r3, [r7, #4]
 8016256:	681b      	ldr	r3, [r3, #0]
 8016258:	681a      	ldr	r2, [r3, #0]
 801625a:	687b      	ldr	r3, [r7, #4]
 801625c:	681b      	ldr	r3, [r3, #0]
 801625e:	f022 0201 	bic.w	r2, r2, #1
 8016262:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8016264:	68fb      	ldr	r3, [r7, #12]
 8016266:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 801626a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801626c:	687b      	ldr	r3, [r7, #4]
 801626e:	2200      	movs	r2, #0
 8016270:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8016272:	687b      	ldr	r3, [r7, #4]
 8016274:	681b      	ldr	r3, [r3, #0]
 8016276:	68fa      	ldr	r2, [r7, #12]
 8016278:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801627a:	687b      	ldr	r3, [r7, #4]
 801627c:	2220      	movs	r2, #32
 801627e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8016282:	687b      	ldr	r3, [r7, #4]
 8016284:	2200      	movs	r2, #0
 8016286:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801628a:	2300      	movs	r3, #0
}
 801628c:	4618      	mov	r0, r3
 801628e:	3714      	adds	r7, #20
 8016290:	46bd      	mov	sp, r7
 8016292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016296:	4770      	bx	lr

08016298 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8016298:	b580      	push	{r7, lr}
 801629a:	b084      	sub	sp, #16
 801629c:	af00      	add	r7, sp, #0
 801629e:	6078      	str	r0, [r7, #4]
 80162a0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80162a2:	687b      	ldr	r3, [r7, #4]
 80162a4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80162a8:	2b01      	cmp	r3, #1
 80162aa:	d101      	bne.n	80162b0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80162ac:	2302      	movs	r3, #2
 80162ae:	e02d      	b.n	801630c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80162b0:	687b      	ldr	r3, [r7, #4]
 80162b2:	2201      	movs	r2, #1
 80162b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80162b8:	687b      	ldr	r3, [r7, #4]
 80162ba:	2224      	movs	r2, #36	; 0x24
 80162bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80162c0:	687b      	ldr	r3, [r7, #4]
 80162c2:	681b      	ldr	r3, [r3, #0]
 80162c4:	681b      	ldr	r3, [r3, #0]
 80162c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80162c8:	687b      	ldr	r3, [r7, #4]
 80162ca:	681b      	ldr	r3, [r3, #0]
 80162cc:	681a      	ldr	r2, [r3, #0]
 80162ce:	687b      	ldr	r3, [r7, #4]
 80162d0:	681b      	ldr	r3, [r3, #0]
 80162d2:	f022 0201 	bic.w	r2, r2, #1
 80162d6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80162d8:	687b      	ldr	r3, [r7, #4]
 80162da:	681b      	ldr	r3, [r3, #0]
 80162dc:	689b      	ldr	r3, [r3, #8]
 80162de:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80162e2:	687b      	ldr	r3, [r7, #4]
 80162e4:	681b      	ldr	r3, [r3, #0]
 80162e6:	683a      	ldr	r2, [r7, #0]
 80162e8:	430a      	orrs	r2, r1
 80162ea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80162ec:	6878      	ldr	r0, [r7, #4]
 80162ee:	f000 f84f 	bl	8016390 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80162f2:	687b      	ldr	r3, [r7, #4]
 80162f4:	681b      	ldr	r3, [r3, #0]
 80162f6:	68fa      	ldr	r2, [r7, #12]
 80162f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80162fa:	687b      	ldr	r3, [r7, #4]
 80162fc:	2220      	movs	r2, #32
 80162fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8016302:	687b      	ldr	r3, [r7, #4]
 8016304:	2200      	movs	r2, #0
 8016306:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801630a:	2300      	movs	r3, #0
}
 801630c:	4618      	mov	r0, r3
 801630e:	3710      	adds	r7, #16
 8016310:	46bd      	mov	sp, r7
 8016312:	bd80      	pop	{r7, pc}

08016314 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8016314:	b580      	push	{r7, lr}
 8016316:	b084      	sub	sp, #16
 8016318:	af00      	add	r7, sp, #0
 801631a:	6078      	str	r0, [r7, #4]
 801631c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801631e:	687b      	ldr	r3, [r7, #4]
 8016320:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8016324:	2b01      	cmp	r3, #1
 8016326:	d101      	bne.n	801632c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8016328:	2302      	movs	r3, #2
 801632a:	e02d      	b.n	8016388 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801632c:	687b      	ldr	r3, [r7, #4]
 801632e:	2201      	movs	r2, #1
 8016330:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8016334:	687b      	ldr	r3, [r7, #4]
 8016336:	2224      	movs	r2, #36	; 0x24
 8016338:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801633c:	687b      	ldr	r3, [r7, #4]
 801633e:	681b      	ldr	r3, [r3, #0]
 8016340:	681b      	ldr	r3, [r3, #0]
 8016342:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8016344:	687b      	ldr	r3, [r7, #4]
 8016346:	681b      	ldr	r3, [r3, #0]
 8016348:	681a      	ldr	r2, [r3, #0]
 801634a:	687b      	ldr	r3, [r7, #4]
 801634c:	681b      	ldr	r3, [r3, #0]
 801634e:	f022 0201 	bic.w	r2, r2, #1
 8016352:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8016354:	687b      	ldr	r3, [r7, #4]
 8016356:	681b      	ldr	r3, [r3, #0]
 8016358:	689b      	ldr	r3, [r3, #8]
 801635a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 801635e:	687b      	ldr	r3, [r7, #4]
 8016360:	681b      	ldr	r3, [r3, #0]
 8016362:	683a      	ldr	r2, [r7, #0]
 8016364:	430a      	orrs	r2, r1
 8016366:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8016368:	6878      	ldr	r0, [r7, #4]
 801636a:	f000 f811 	bl	8016390 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801636e:	687b      	ldr	r3, [r7, #4]
 8016370:	681b      	ldr	r3, [r3, #0]
 8016372:	68fa      	ldr	r2, [r7, #12]
 8016374:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8016376:	687b      	ldr	r3, [r7, #4]
 8016378:	2220      	movs	r2, #32
 801637a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801637e:	687b      	ldr	r3, [r7, #4]
 8016380:	2200      	movs	r2, #0
 8016382:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8016386:	2300      	movs	r3, #0
}
 8016388:	4618      	mov	r0, r3
 801638a:	3710      	adds	r7, #16
 801638c:	46bd      	mov	sp, r7
 801638e:	bd80      	pop	{r7, pc}

08016390 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8016390:	b480      	push	{r7}
 8016392:	b085      	sub	sp, #20
 8016394:	af00      	add	r7, sp, #0
 8016396:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8016398:	687b      	ldr	r3, [r7, #4]
 801639a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801639c:	2b00      	cmp	r3, #0
 801639e:	d108      	bne.n	80163b2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80163a0:	687b      	ldr	r3, [r7, #4]
 80163a2:	2201      	movs	r2, #1
 80163a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80163a8:	687b      	ldr	r3, [r7, #4]
 80163aa:	2201      	movs	r2, #1
 80163ac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80163b0:	e031      	b.n	8016416 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80163b2:	2310      	movs	r3, #16
 80163b4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80163b6:	2310      	movs	r3, #16
 80163b8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80163ba:	687b      	ldr	r3, [r7, #4]
 80163bc:	681b      	ldr	r3, [r3, #0]
 80163be:	689b      	ldr	r3, [r3, #8]
 80163c0:	0e5b      	lsrs	r3, r3, #25
 80163c2:	b2db      	uxtb	r3, r3
 80163c4:	f003 0307 	and.w	r3, r3, #7
 80163c8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80163ca:	687b      	ldr	r3, [r7, #4]
 80163cc:	681b      	ldr	r3, [r3, #0]
 80163ce:	689b      	ldr	r3, [r3, #8]
 80163d0:	0f5b      	lsrs	r3, r3, #29
 80163d2:	b2db      	uxtb	r3, r3
 80163d4:	f003 0307 	and.w	r3, r3, #7
 80163d8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80163da:	7bbb      	ldrb	r3, [r7, #14]
 80163dc:	7b3a      	ldrb	r2, [r7, #12]
 80163de:	4911      	ldr	r1, [pc, #68]	; (8016424 <UARTEx_SetNbDataToProcess+0x94>)
 80163e0:	5c8a      	ldrb	r2, [r1, r2]
 80163e2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80163e6:	7b3a      	ldrb	r2, [r7, #12]
 80163e8:	490f      	ldr	r1, [pc, #60]	; (8016428 <UARTEx_SetNbDataToProcess+0x98>)
 80163ea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80163ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80163f0:	b29a      	uxth	r2, r3
 80163f2:	687b      	ldr	r3, [r7, #4]
 80163f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80163f8:	7bfb      	ldrb	r3, [r7, #15]
 80163fa:	7b7a      	ldrb	r2, [r7, #13]
 80163fc:	4909      	ldr	r1, [pc, #36]	; (8016424 <UARTEx_SetNbDataToProcess+0x94>)
 80163fe:	5c8a      	ldrb	r2, [r1, r2]
 8016400:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8016404:	7b7a      	ldrb	r2, [r7, #13]
 8016406:	4908      	ldr	r1, [pc, #32]	; (8016428 <UARTEx_SetNbDataToProcess+0x98>)
 8016408:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801640a:	fb93 f3f2 	sdiv	r3, r3, r2
 801640e:	b29a      	uxth	r2, r3
 8016410:	687b      	ldr	r3, [r7, #4]
 8016412:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8016416:	bf00      	nop
 8016418:	3714      	adds	r7, #20
 801641a:	46bd      	mov	sp, r7
 801641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016420:	4770      	bx	lr
 8016422:	bf00      	nop
 8016424:	080359bc 	.word	0x080359bc
 8016428:	080359c4 	.word	0x080359c4

0801642c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801642c:	b084      	sub	sp, #16
 801642e:	b580      	push	{r7, lr}
 8016430:	b084      	sub	sp, #16
 8016432:	af00      	add	r7, sp, #0
 8016434:	6078      	str	r0, [r7, #4]
 8016436:	f107 001c 	add.w	r0, r7, #28
 801643a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801643e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016440:	2b01      	cmp	r3, #1
 8016442:	d120      	bne.n	8016486 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8016444:	687b      	ldr	r3, [r7, #4]
 8016446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016448:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801644c:	687b      	ldr	r3, [r7, #4]
 801644e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8016450:	687b      	ldr	r3, [r7, #4]
 8016452:	68da      	ldr	r2, [r3, #12]
 8016454:	4b2a      	ldr	r3, [pc, #168]	; (8016500 <USB_CoreInit+0xd4>)
 8016456:	4013      	ands	r3, r2
 8016458:	687a      	ldr	r2, [r7, #4]
 801645a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 801645c:	687b      	ldr	r3, [r7, #4]
 801645e:	68db      	ldr	r3, [r3, #12]
 8016460:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8016464:	687b      	ldr	r3, [r7, #4]
 8016466:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8016468:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801646a:	2b01      	cmp	r3, #1
 801646c:	d105      	bne.n	801647a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 801646e:	687b      	ldr	r3, [r7, #4]
 8016470:	68db      	ldr	r3, [r3, #12]
 8016472:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8016476:	687b      	ldr	r3, [r7, #4]
 8016478:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801647a:	6878      	ldr	r0, [r7, #4]
 801647c:	f001 fb4e 	bl	8017b1c <USB_CoreReset>
 8016480:	4603      	mov	r3, r0
 8016482:	73fb      	strb	r3, [r7, #15]
 8016484:	e01a      	b.n	80164bc <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8016486:	687b      	ldr	r3, [r7, #4]
 8016488:	68db      	ldr	r3, [r3, #12]
 801648a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801648e:	687b      	ldr	r3, [r7, #4]
 8016490:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8016492:	6878      	ldr	r0, [r7, #4]
 8016494:	f001 fb42 	bl	8017b1c <USB_CoreReset>
 8016498:	4603      	mov	r3, r0
 801649a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 801649c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801649e:	2b00      	cmp	r3, #0
 80164a0:	d106      	bne.n	80164b0 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80164a2:	687b      	ldr	r3, [r7, #4]
 80164a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80164a6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80164aa:	687b      	ldr	r3, [r7, #4]
 80164ac:	639a      	str	r2, [r3, #56]	; 0x38
 80164ae:	e005      	b.n	80164bc <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80164b0:	687b      	ldr	r3, [r7, #4]
 80164b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80164b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80164b8:	687b      	ldr	r3, [r7, #4]
 80164ba:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80164bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80164be:	2b01      	cmp	r3, #1
 80164c0:	d116      	bne.n	80164f0 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80164c2:	687b      	ldr	r3, [r7, #4]
 80164c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80164c6:	b29a      	uxth	r2, r3
 80164c8:	687b      	ldr	r3, [r7, #4]
 80164ca:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80164cc:	687b      	ldr	r3, [r7, #4]
 80164ce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80164d0:	4b0c      	ldr	r3, [pc, #48]	; (8016504 <USB_CoreInit+0xd8>)
 80164d2:	4313      	orrs	r3, r2
 80164d4:	687a      	ldr	r2, [r7, #4]
 80164d6:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80164d8:	687b      	ldr	r3, [r7, #4]
 80164da:	689b      	ldr	r3, [r3, #8]
 80164dc:	f043 0206 	orr.w	r2, r3, #6
 80164e0:	687b      	ldr	r3, [r7, #4]
 80164e2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80164e4:	687b      	ldr	r3, [r7, #4]
 80164e6:	689b      	ldr	r3, [r3, #8]
 80164e8:	f043 0220 	orr.w	r2, r3, #32
 80164ec:	687b      	ldr	r3, [r7, #4]
 80164ee:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80164f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80164f2:	4618      	mov	r0, r3
 80164f4:	3710      	adds	r7, #16
 80164f6:	46bd      	mov	sp, r7
 80164f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80164fc:	b004      	add	sp, #16
 80164fe:	4770      	bx	lr
 8016500:	ffbdffbf 	.word	0xffbdffbf
 8016504:	03ee0000 	.word	0x03ee0000

08016508 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8016508:	b480      	push	{r7}
 801650a:	b087      	sub	sp, #28
 801650c:	af00      	add	r7, sp, #0
 801650e:	60f8      	str	r0, [r7, #12]
 8016510:	60b9      	str	r1, [r7, #8]
 8016512:	4613      	mov	r3, r2
 8016514:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8016516:	79fb      	ldrb	r3, [r7, #7]
 8016518:	2b02      	cmp	r3, #2
 801651a:	d165      	bne.n	80165e8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 801651c:	68bb      	ldr	r3, [r7, #8]
 801651e:	4a41      	ldr	r2, [pc, #260]	; (8016624 <USB_SetTurnaroundTime+0x11c>)
 8016520:	4293      	cmp	r3, r2
 8016522:	d906      	bls.n	8016532 <USB_SetTurnaroundTime+0x2a>
 8016524:	68bb      	ldr	r3, [r7, #8]
 8016526:	4a40      	ldr	r2, [pc, #256]	; (8016628 <USB_SetTurnaroundTime+0x120>)
 8016528:	4293      	cmp	r3, r2
 801652a:	d202      	bcs.n	8016532 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 801652c:	230f      	movs	r3, #15
 801652e:	617b      	str	r3, [r7, #20]
 8016530:	e062      	b.n	80165f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8016532:	68bb      	ldr	r3, [r7, #8]
 8016534:	4a3c      	ldr	r2, [pc, #240]	; (8016628 <USB_SetTurnaroundTime+0x120>)
 8016536:	4293      	cmp	r3, r2
 8016538:	d306      	bcc.n	8016548 <USB_SetTurnaroundTime+0x40>
 801653a:	68bb      	ldr	r3, [r7, #8]
 801653c:	4a3b      	ldr	r2, [pc, #236]	; (801662c <USB_SetTurnaroundTime+0x124>)
 801653e:	4293      	cmp	r3, r2
 8016540:	d202      	bcs.n	8016548 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8016542:	230e      	movs	r3, #14
 8016544:	617b      	str	r3, [r7, #20]
 8016546:	e057      	b.n	80165f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8016548:	68bb      	ldr	r3, [r7, #8]
 801654a:	4a38      	ldr	r2, [pc, #224]	; (801662c <USB_SetTurnaroundTime+0x124>)
 801654c:	4293      	cmp	r3, r2
 801654e:	d306      	bcc.n	801655e <USB_SetTurnaroundTime+0x56>
 8016550:	68bb      	ldr	r3, [r7, #8]
 8016552:	4a37      	ldr	r2, [pc, #220]	; (8016630 <USB_SetTurnaroundTime+0x128>)
 8016554:	4293      	cmp	r3, r2
 8016556:	d202      	bcs.n	801655e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8016558:	230d      	movs	r3, #13
 801655a:	617b      	str	r3, [r7, #20]
 801655c:	e04c      	b.n	80165f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 801655e:	68bb      	ldr	r3, [r7, #8]
 8016560:	4a33      	ldr	r2, [pc, #204]	; (8016630 <USB_SetTurnaroundTime+0x128>)
 8016562:	4293      	cmp	r3, r2
 8016564:	d306      	bcc.n	8016574 <USB_SetTurnaroundTime+0x6c>
 8016566:	68bb      	ldr	r3, [r7, #8]
 8016568:	4a32      	ldr	r2, [pc, #200]	; (8016634 <USB_SetTurnaroundTime+0x12c>)
 801656a:	4293      	cmp	r3, r2
 801656c:	d802      	bhi.n	8016574 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 801656e:	230c      	movs	r3, #12
 8016570:	617b      	str	r3, [r7, #20]
 8016572:	e041      	b.n	80165f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8016574:	68bb      	ldr	r3, [r7, #8]
 8016576:	4a2f      	ldr	r2, [pc, #188]	; (8016634 <USB_SetTurnaroundTime+0x12c>)
 8016578:	4293      	cmp	r3, r2
 801657a:	d906      	bls.n	801658a <USB_SetTurnaroundTime+0x82>
 801657c:	68bb      	ldr	r3, [r7, #8]
 801657e:	4a2e      	ldr	r2, [pc, #184]	; (8016638 <USB_SetTurnaroundTime+0x130>)
 8016580:	4293      	cmp	r3, r2
 8016582:	d802      	bhi.n	801658a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8016584:	230b      	movs	r3, #11
 8016586:	617b      	str	r3, [r7, #20]
 8016588:	e036      	b.n	80165f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 801658a:	68bb      	ldr	r3, [r7, #8]
 801658c:	4a2a      	ldr	r2, [pc, #168]	; (8016638 <USB_SetTurnaroundTime+0x130>)
 801658e:	4293      	cmp	r3, r2
 8016590:	d906      	bls.n	80165a0 <USB_SetTurnaroundTime+0x98>
 8016592:	68bb      	ldr	r3, [r7, #8]
 8016594:	4a29      	ldr	r2, [pc, #164]	; (801663c <USB_SetTurnaroundTime+0x134>)
 8016596:	4293      	cmp	r3, r2
 8016598:	d802      	bhi.n	80165a0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 801659a:	230a      	movs	r3, #10
 801659c:	617b      	str	r3, [r7, #20]
 801659e:	e02b      	b.n	80165f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80165a0:	68bb      	ldr	r3, [r7, #8]
 80165a2:	4a26      	ldr	r2, [pc, #152]	; (801663c <USB_SetTurnaroundTime+0x134>)
 80165a4:	4293      	cmp	r3, r2
 80165a6:	d906      	bls.n	80165b6 <USB_SetTurnaroundTime+0xae>
 80165a8:	68bb      	ldr	r3, [r7, #8]
 80165aa:	4a25      	ldr	r2, [pc, #148]	; (8016640 <USB_SetTurnaroundTime+0x138>)
 80165ac:	4293      	cmp	r3, r2
 80165ae:	d202      	bcs.n	80165b6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80165b0:	2309      	movs	r3, #9
 80165b2:	617b      	str	r3, [r7, #20]
 80165b4:	e020      	b.n	80165f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80165b6:	68bb      	ldr	r3, [r7, #8]
 80165b8:	4a21      	ldr	r2, [pc, #132]	; (8016640 <USB_SetTurnaroundTime+0x138>)
 80165ba:	4293      	cmp	r3, r2
 80165bc:	d306      	bcc.n	80165cc <USB_SetTurnaroundTime+0xc4>
 80165be:	68bb      	ldr	r3, [r7, #8]
 80165c0:	4a20      	ldr	r2, [pc, #128]	; (8016644 <USB_SetTurnaroundTime+0x13c>)
 80165c2:	4293      	cmp	r3, r2
 80165c4:	d802      	bhi.n	80165cc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80165c6:	2308      	movs	r3, #8
 80165c8:	617b      	str	r3, [r7, #20]
 80165ca:	e015      	b.n	80165f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80165cc:	68bb      	ldr	r3, [r7, #8]
 80165ce:	4a1d      	ldr	r2, [pc, #116]	; (8016644 <USB_SetTurnaroundTime+0x13c>)
 80165d0:	4293      	cmp	r3, r2
 80165d2:	d906      	bls.n	80165e2 <USB_SetTurnaroundTime+0xda>
 80165d4:	68bb      	ldr	r3, [r7, #8]
 80165d6:	4a1c      	ldr	r2, [pc, #112]	; (8016648 <USB_SetTurnaroundTime+0x140>)
 80165d8:	4293      	cmp	r3, r2
 80165da:	d202      	bcs.n	80165e2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80165dc:	2307      	movs	r3, #7
 80165de:	617b      	str	r3, [r7, #20]
 80165e0:	e00a      	b.n	80165f8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80165e2:	2306      	movs	r3, #6
 80165e4:	617b      	str	r3, [r7, #20]
 80165e6:	e007      	b.n	80165f8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80165e8:	79fb      	ldrb	r3, [r7, #7]
 80165ea:	2b00      	cmp	r3, #0
 80165ec:	d102      	bne.n	80165f4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80165ee:	2309      	movs	r3, #9
 80165f0:	617b      	str	r3, [r7, #20]
 80165f2:	e001      	b.n	80165f8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80165f4:	2309      	movs	r3, #9
 80165f6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80165f8:	68fb      	ldr	r3, [r7, #12]
 80165fa:	68db      	ldr	r3, [r3, #12]
 80165fc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8016600:	68fb      	ldr	r3, [r7, #12]
 8016602:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8016604:	68fb      	ldr	r3, [r7, #12]
 8016606:	68da      	ldr	r2, [r3, #12]
 8016608:	697b      	ldr	r3, [r7, #20]
 801660a:	029b      	lsls	r3, r3, #10
 801660c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8016610:	431a      	orrs	r2, r3
 8016612:	68fb      	ldr	r3, [r7, #12]
 8016614:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8016616:	2300      	movs	r3, #0
}
 8016618:	4618      	mov	r0, r3
 801661a:	371c      	adds	r7, #28
 801661c:	46bd      	mov	sp, r7
 801661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016622:	4770      	bx	lr
 8016624:	00d8acbf 	.word	0x00d8acbf
 8016628:	00e4e1c0 	.word	0x00e4e1c0
 801662c:	00f42400 	.word	0x00f42400
 8016630:	01067380 	.word	0x01067380
 8016634:	011a499f 	.word	0x011a499f
 8016638:	01312cff 	.word	0x01312cff
 801663c:	014ca43f 	.word	0x014ca43f
 8016640:	016e3600 	.word	0x016e3600
 8016644:	01a6ab1f 	.word	0x01a6ab1f
 8016648:	01e84800 	.word	0x01e84800

0801664c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801664c:	b480      	push	{r7}
 801664e:	b083      	sub	sp, #12
 8016650:	af00      	add	r7, sp, #0
 8016652:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8016654:	687b      	ldr	r3, [r7, #4]
 8016656:	689b      	ldr	r3, [r3, #8]
 8016658:	f043 0201 	orr.w	r2, r3, #1
 801665c:	687b      	ldr	r3, [r7, #4]
 801665e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8016660:	2300      	movs	r3, #0
}
 8016662:	4618      	mov	r0, r3
 8016664:	370c      	adds	r7, #12
 8016666:	46bd      	mov	sp, r7
 8016668:	f85d 7b04 	ldr.w	r7, [sp], #4
 801666c:	4770      	bx	lr

0801666e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801666e:	b480      	push	{r7}
 8016670:	b083      	sub	sp, #12
 8016672:	af00      	add	r7, sp, #0
 8016674:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8016676:	687b      	ldr	r3, [r7, #4]
 8016678:	689b      	ldr	r3, [r3, #8]
 801667a:	f023 0201 	bic.w	r2, r3, #1
 801667e:	687b      	ldr	r3, [r7, #4]
 8016680:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8016682:	2300      	movs	r3, #0
}
 8016684:	4618      	mov	r0, r3
 8016686:	370c      	adds	r7, #12
 8016688:	46bd      	mov	sp, r7
 801668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801668e:	4770      	bx	lr

08016690 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8016690:	b580      	push	{r7, lr}
 8016692:	b084      	sub	sp, #16
 8016694:	af00      	add	r7, sp, #0
 8016696:	6078      	str	r0, [r7, #4]
 8016698:	460b      	mov	r3, r1
 801669a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 801669c:	2300      	movs	r3, #0
 801669e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80166a0:	687b      	ldr	r3, [r7, #4]
 80166a2:	68db      	ldr	r3, [r3, #12]
 80166a4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80166a8:	687b      	ldr	r3, [r7, #4]
 80166aa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80166ac:	78fb      	ldrb	r3, [r7, #3]
 80166ae:	2b01      	cmp	r3, #1
 80166b0:	d115      	bne.n	80166de <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80166b2:	687b      	ldr	r3, [r7, #4]
 80166b4:	68db      	ldr	r3, [r3, #12]
 80166b6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80166ba:	687b      	ldr	r3, [r7, #4]
 80166bc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80166be:	2001      	movs	r0, #1
 80166c0:	f7f3 fbc4 	bl	8009e4c <HAL_Delay>
      ms++;
 80166c4:	68fb      	ldr	r3, [r7, #12]
 80166c6:	3301      	adds	r3, #1
 80166c8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80166ca:	6878      	ldr	r0, [r7, #4]
 80166cc:	f001 f995 	bl	80179fa <USB_GetMode>
 80166d0:	4603      	mov	r3, r0
 80166d2:	2b01      	cmp	r3, #1
 80166d4:	d01e      	beq.n	8016714 <USB_SetCurrentMode+0x84>
 80166d6:	68fb      	ldr	r3, [r7, #12]
 80166d8:	2b31      	cmp	r3, #49	; 0x31
 80166da:	d9f0      	bls.n	80166be <USB_SetCurrentMode+0x2e>
 80166dc:	e01a      	b.n	8016714 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80166de:	78fb      	ldrb	r3, [r7, #3]
 80166e0:	2b00      	cmp	r3, #0
 80166e2:	d115      	bne.n	8016710 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80166e4:	687b      	ldr	r3, [r7, #4]
 80166e6:	68db      	ldr	r3, [r3, #12]
 80166e8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80166ec:	687b      	ldr	r3, [r7, #4]
 80166ee:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80166f0:	2001      	movs	r0, #1
 80166f2:	f7f3 fbab 	bl	8009e4c <HAL_Delay>
      ms++;
 80166f6:	68fb      	ldr	r3, [r7, #12]
 80166f8:	3301      	adds	r3, #1
 80166fa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80166fc:	6878      	ldr	r0, [r7, #4]
 80166fe:	f001 f97c 	bl	80179fa <USB_GetMode>
 8016702:	4603      	mov	r3, r0
 8016704:	2b00      	cmp	r3, #0
 8016706:	d005      	beq.n	8016714 <USB_SetCurrentMode+0x84>
 8016708:	68fb      	ldr	r3, [r7, #12]
 801670a:	2b31      	cmp	r3, #49	; 0x31
 801670c:	d9f0      	bls.n	80166f0 <USB_SetCurrentMode+0x60>
 801670e:	e001      	b.n	8016714 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8016710:	2301      	movs	r3, #1
 8016712:	e005      	b.n	8016720 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8016714:	68fb      	ldr	r3, [r7, #12]
 8016716:	2b32      	cmp	r3, #50	; 0x32
 8016718:	d101      	bne.n	801671e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 801671a:	2301      	movs	r3, #1
 801671c:	e000      	b.n	8016720 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 801671e:	2300      	movs	r3, #0
}
 8016720:	4618      	mov	r0, r3
 8016722:	3710      	adds	r7, #16
 8016724:	46bd      	mov	sp, r7
 8016726:	bd80      	pop	{r7, pc}

08016728 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8016728:	b084      	sub	sp, #16
 801672a:	b580      	push	{r7, lr}
 801672c:	b086      	sub	sp, #24
 801672e:	af00      	add	r7, sp, #0
 8016730:	6078      	str	r0, [r7, #4]
 8016732:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8016736:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 801673a:	2300      	movs	r3, #0
 801673c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801673e:	687b      	ldr	r3, [r7, #4]
 8016740:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8016742:	2300      	movs	r3, #0
 8016744:	613b      	str	r3, [r7, #16]
 8016746:	e009      	b.n	801675c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8016748:	687a      	ldr	r2, [r7, #4]
 801674a:	693b      	ldr	r3, [r7, #16]
 801674c:	3340      	adds	r3, #64	; 0x40
 801674e:	009b      	lsls	r3, r3, #2
 8016750:	4413      	add	r3, r2
 8016752:	2200      	movs	r2, #0
 8016754:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8016756:	693b      	ldr	r3, [r7, #16]
 8016758:	3301      	adds	r3, #1
 801675a:	613b      	str	r3, [r7, #16]
 801675c:	693b      	ldr	r3, [r7, #16]
 801675e:	2b0e      	cmp	r3, #14
 8016760:	d9f2      	bls.n	8016748 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8016762:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016764:	2b00      	cmp	r3, #0
 8016766:	d11c      	bne.n	80167a2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8016768:	68fb      	ldr	r3, [r7, #12]
 801676a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801676e:	685b      	ldr	r3, [r3, #4]
 8016770:	68fa      	ldr	r2, [r7, #12]
 8016772:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8016776:	f043 0302 	orr.w	r3, r3, #2
 801677a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 801677c:	687b      	ldr	r3, [r7, #4]
 801677e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016780:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8016784:	687b      	ldr	r3, [r7, #4]
 8016786:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8016788:	687b      	ldr	r3, [r7, #4]
 801678a:	681b      	ldr	r3, [r3, #0]
 801678c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8016790:	687b      	ldr	r3, [r7, #4]
 8016792:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8016794:	687b      	ldr	r3, [r7, #4]
 8016796:	681b      	ldr	r3, [r3, #0]
 8016798:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801679c:	687b      	ldr	r3, [r7, #4]
 801679e:	601a      	str	r2, [r3, #0]
 80167a0:	e005      	b.n	80167ae <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80167a2:	687b      	ldr	r3, [r7, #4]
 80167a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80167a6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80167aa:	687b      	ldr	r3, [r7, #4]
 80167ac:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80167ae:	68fb      	ldr	r3, [r7, #12]
 80167b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80167b4:	461a      	mov	r2, r3
 80167b6:	2300      	movs	r3, #0
 80167b8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80167ba:	68fb      	ldr	r3, [r7, #12]
 80167bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80167c0:	4619      	mov	r1, r3
 80167c2:	68fb      	ldr	r3, [r7, #12]
 80167c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80167c8:	461a      	mov	r2, r3
 80167ca:	680b      	ldr	r3, [r1, #0]
 80167cc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80167ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80167d0:	2b01      	cmp	r3, #1
 80167d2:	d10c      	bne.n	80167ee <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80167d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167d6:	2b00      	cmp	r3, #0
 80167d8:	d104      	bne.n	80167e4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80167da:	2100      	movs	r1, #0
 80167dc:	6878      	ldr	r0, [r7, #4]
 80167de:	f000 f961 	bl	8016aa4 <USB_SetDevSpeed>
 80167e2:	e008      	b.n	80167f6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80167e4:	2101      	movs	r1, #1
 80167e6:	6878      	ldr	r0, [r7, #4]
 80167e8:	f000 f95c 	bl	8016aa4 <USB_SetDevSpeed>
 80167ec:	e003      	b.n	80167f6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80167ee:	2103      	movs	r1, #3
 80167f0:	6878      	ldr	r0, [r7, #4]
 80167f2:	f000 f957 	bl	8016aa4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80167f6:	2110      	movs	r1, #16
 80167f8:	6878      	ldr	r0, [r7, #4]
 80167fa:	f000 f8f3 	bl	80169e4 <USB_FlushTxFifo>
 80167fe:	4603      	mov	r3, r0
 8016800:	2b00      	cmp	r3, #0
 8016802:	d001      	beq.n	8016808 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8016804:	2301      	movs	r3, #1
 8016806:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8016808:	6878      	ldr	r0, [r7, #4]
 801680a:	f000 f91d 	bl	8016a48 <USB_FlushRxFifo>
 801680e:	4603      	mov	r3, r0
 8016810:	2b00      	cmp	r3, #0
 8016812:	d001      	beq.n	8016818 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8016814:	2301      	movs	r3, #1
 8016816:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8016818:	68fb      	ldr	r3, [r7, #12]
 801681a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801681e:	461a      	mov	r2, r3
 8016820:	2300      	movs	r3, #0
 8016822:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8016824:	68fb      	ldr	r3, [r7, #12]
 8016826:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801682a:	461a      	mov	r2, r3
 801682c:	2300      	movs	r3, #0
 801682e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8016830:	68fb      	ldr	r3, [r7, #12]
 8016832:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016836:	461a      	mov	r2, r3
 8016838:	2300      	movs	r3, #0
 801683a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801683c:	2300      	movs	r3, #0
 801683e:	613b      	str	r3, [r7, #16]
 8016840:	e043      	b.n	80168ca <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8016842:	693b      	ldr	r3, [r7, #16]
 8016844:	015a      	lsls	r2, r3, #5
 8016846:	68fb      	ldr	r3, [r7, #12]
 8016848:	4413      	add	r3, r2
 801684a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801684e:	681b      	ldr	r3, [r3, #0]
 8016850:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8016854:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8016858:	d118      	bne.n	801688c <USB_DevInit+0x164>
    {
      if (i == 0U)
 801685a:	693b      	ldr	r3, [r7, #16]
 801685c:	2b00      	cmp	r3, #0
 801685e:	d10a      	bne.n	8016876 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8016860:	693b      	ldr	r3, [r7, #16]
 8016862:	015a      	lsls	r2, r3, #5
 8016864:	68fb      	ldr	r3, [r7, #12]
 8016866:	4413      	add	r3, r2
 8016868:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801686c:	461a      	mov	r2, r3
 801686e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8016872:	6013      	str	r3, [r2, #0]
 8016874:	e013      	b.n	801689e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8016876:	693b      	ldr	r3, [r7, #16]
 8016878:	015a      	lsls	r2, r3, #5
 801687a:	68fb      	ldr	r3, [r7, #12]
 801687c:	4413      	add	r3, r2
 801687e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016882:	461a      	mov	r2, r3
 8016884:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8016888:	6013      	str	r3, [r2, #0]
 801688a:	e008      	b.n	801689e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 801688c:	693b      	ldr	r3, [r7, #16]
 801688e:	015a      	lsls	r2, r3, #5
 8016890:	68fb      	ldr	r3, [r7, #12]
 8016892:	4413      	add	r3, r2
 8016894:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016898:	461a      	mov	r2, r3
 801689a:	2300      	movs	r3, #0
 801689c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 801689e:	693b      	ldr	r3, [r7, #16]
 80168a0:	015a      	lsls	r2, r3, #5
 80168a2:	68fb      	ldr	r3, [r7, #12]
 80168a4:	4413      	add	r3, r2
 80168a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80168aa:	461a      	mov	r2, r3
 80168ac:	2300      	movs	r3, #0
 80168ae:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80168b0:	693b      	ldr	r3, [r7, #16]
 80168b2:	015a      	lsls	r2, r3, #5
 80168b4:	68fb      	ldr	r3, [r7, #12]
 80168b6:	4413      	add	r3, r2
 80168b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80168bc:	461a      	mov	r2, r3
 80168be:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80168c2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80168c4:	693b      	ldr	r3, [r7, #16]
 80168c6:	3301      	adds	r3, #1
 80168c8:	613b      	str	r3, [r7, #16]
 80168ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168cc:	693a      	ldr	r2, [r7, #16]
 80168ce:	429a      	cmp	r2, r3
 80168d0:	d3b7      	bcc.n	8016842 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80168d2:	2300      	movs	r3, #0
 80168d4:	613b      	str	r3, [r7, #16]
 80168d6:	e043      	b.n	8016960 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80168d8:	693b      	ldr	r3, [r7, #16]
 80168da:	015a      	lsls	r2, r3, #5
 80168dc:	68fb      	ldr	r3, [r7, #12]
 80168de:	4413      	add	r3, r2
 80168e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80168e4:	681b      	ldr	r3, [r3, #0]
 80168e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80168ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80168ee:	d118      	bne.n	8016922 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80168f0:	693b      	ldr	r3, [r7, #16]
 80168f2:	2b00      	cmp	r3, #0
 80168f4:	d10a      	bne.n	801690c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80168f6:	693b      	ldr	r3, [r7, #16]
 80168f8:	015a      	lsls	r2, r3, #5
 80168fa:	68fb      	ldr	r3, [r7, #12]
 80168fc:	4413      	add	r3, r2
 80168fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016902:	461a      	mov	r2, r3
 8016904:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8016908:	6013      	str	r3, [r2, #0]
 801690a:	e013      	b.n	8016934 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 801690c:	693b      	ldr	r3, [r7, #16]
 801690e:	015a      	lsls	r2, r3, #5
 8016910:	68fb      	ldr	r3, [r7, #12]
 8016912:	4413      	add	r3, r2
 8016914:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016918:	461a      	mov	r2, r3
 801691a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801691e:	6013      	str	r3, [r2, #0]
 8016920:	e008      	b.n	8016934 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8016922:	693b      	ldr	r3, [r7, #16]
 8016924:	015a      	lsls	r2, r3, #5
 8016926:	68fb      	ldr	r3, [r7, #12]
 8016928:	4413      	add	r3, r2
 801692a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801692e:	461a      	mov	r2, r3
 8016930:	2300      	movs	r3, #0
 8016932:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8016934:	693b      	ldr	r3, [r7, #16]
 8016936:	015a      	lsls	r2, r3, #5
 8016938:	68fb      	ldr	r3, [r7, #12]
 801693a:	4413      	add	r3, r2
 801693c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016940:	461a      	mov	r2, r3
 8016942:	2300      	movs	r3, #0
 8016944:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8016946:	693b      	ldr	r3, [r7, #16]
 8016948:	015a      	lsls	r2, r3, #5
 801694a:	68fb      	ldr	r3, [r7, #12]
 801694c:	4413      	add	r3, r2
 801694e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016952:	461a      	mov	r2, r3
 8016954:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8016958:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801695a:	693b      	ldr	r3, [r7, #16]
 801695c:	3301      	adds	r3, #1
 801695e:	613b      	str	r3, [r7, #16]
 8016960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016962:	693a      	ldr	r2, [r7, #16]
 8016964:	429a      	cmp	r2, r3
 8016966:	d3b7      	bcc.n	80168d8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8016968:	68fb      	ldr	r3, [r7, #12]
 801696a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801696e:	691b      	ldr	r3, [r3, #16]
 8016970:	68fa      	ldr	r2, [r7, #12]
 8016972:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8016976:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801697a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 801697c:	687b      	ldr	r3, [r7, #4]
 801697e:	2200      	movs	r2, #0
 8016980:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8016982:	687b      	ldr	r3, [r7, #4]
 8016984:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8016988:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 801698a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801698c:	2b00      	cmp	r3, #0
 801698e:	d105      	bne.n	801699c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8016990:	687b      	ldr	r3, [r7, #4]
 8016992:	699b      	ldr	r3, [r3, #24]
 8016994:	f043 0210 	orr.w	r2, r3, #16
 8016998:	687b      	ldr	r3, [r7, #4]
 801699a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 801699c:	687b      	ldr	r3, [r7, #4]
 801699e:	699a      	ldr	r2, [r3, #24]
 80169a0:	4b0e      	ldr	r3, [pc, #56]	; (80169dc <USB_DevInit+0x2b4>)
 80169a2:	4313      	orrs	r3, r2
 80169a4:	687a      	ldr	r2, [r7, #4]
 80169a6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80169a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80169aa:	2b00      	cmp	r3, #0
 80169ac:	d005      	beq.n	80169ba <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80169ae:	687b      	ldr	r3, [r7, #4]
 80169b0:	699b      	ldr	r3, [r3, #24]
 80169b2:	f043 0208 	orr.w	r2, r3, #8
 80169b6:	687b      	ldr	r3, [r7, #4]
 80169b8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80169ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80169bc:	2b01      	cmp	r3, #1
 80169be:	d105      	bne.n	80169cc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80169c0:	687b      	ldr	r3, [r7, #4]
 80169c2:	699a      	ldr	r2, [r3, #24]
 80169c4:	4b06      	ldr	r3, [pc, #24]	; (80169e0 <USB_DevInit+0x2b8>)
 80169c6:	4313      	orrs	r3, r2
 80169c8:	687a      	ldr	r2, [r7, #4]
 80169ca:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80169cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80169ce:	4618      	mov	r0, r3
 80169d0:	3718      	adds	r7, #24
 80169d2:	46bd      	mov	sp, r7
 80169d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80169d8:	b004      	add	sp, #16
 80169da:	4770      	bx	lr
 80169dc:	803c3800 	.word	0x803c3800
 80169e0:	40000004 	.word	0x40000004

080169e4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80169e4:	b480      	push	{r7}
 80169e6:	b085      	sub	sp, #20
 80169e8:	af00      	add	r7, sp, #0
 80169ea:	6078      	str	r0, [r7, #4]
 80169ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80169ee:	2300      	movs	r3, #0
 80169f0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80169f2:	68fb      	ldr	r3, [r7, #12]
 80169f4:	3301      	adds	r3, #1
 80169f6:	60fb      	str	r3, [r7, #12]
 80169f8:	4a12      	ldr	r2, [pc, #72]	; (8016a44 <USB_FlushTxFifo+0x60>)
 80169fa:	4293      	cmp	r3, r2
 80169fc:	d901      	bls.n	8016a02 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80169fe:	2303      	movs	r3, #3
 8016a00:	e01a      	b.n	8016a38 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8016a02:	687b      	ldr	r3, [r7, #4]
 8016a04:	691b      	ldr	r3, [r3, #16]
 8016a06:	2b00      	cmp	r3, #0
 8016a08:	daf3      	bge.n	80169f2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8016a0a:	2300      	movs	r3, #0
 8016a0c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8016a0e:	683b      	ldr	r3, [r7, #0]
 8016a10:	019b      	lsls	r3, r3, #6
 8016a12:	f043 0220 	orr.w	r2, r3, #32
 8016a16:	687b      	ldr	r3, [r7, #4]
 8016a18:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8016a1a:	68fb      	ldr	r3, [r7, #12]
 8016a1c:	3301      	adds	r3, #1
 8016a1e:	60fb      	str	r3, [r7, #12]
 8016a20:	4a08      	ldr	r2, [pc, #32]	; (8016a44 <USB_FlushTxFifo+0x60>)
 8016a22:	4293      	cmp	r3, r2
 8016a24:	d901      	bls.n	8016a2a <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8016a26:	2303      	movs	r3, #3
 8016a28:	e006      	b.n	8016a38 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8016a2a:	687b      	ldr	r3, [r7, #4]
 8016a2c:	691b      	ldr	r3, [r3, #16]
 8016a2e:	f003 0320 	and.w	r3, r3, #32
 8016a32:	2b20      	cmp	r3, #32
 8016a34:	d0f1      	beq.n	8016a1a <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8016a36:	2300      	movs	r3, #0
}
 8016a38:	4618      	mov	r0, r3
 8016a3a:	3714      	adds	r7, #20
 8016a3c:	46bd      	mov	sp, r7
 8016a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a42:	4770      	bx	lr
 8016a44:	00030d40 	.word	0x00030d40

08016a48 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8016a48:	b480      	push	{r7}
 8016a4a:	b085      	sub	sp, #20
 8016a4c:	af00      	add	r7, sp, #0
 8016a4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8016a50:	2300      	movs	r3, #0
 8016a52:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8016a54:	68fb      	ldr	r3, [r7, #12]
 8016a56:	3301      	adds	r3, #1
 8016a58:	60fb      	str	r3, [r7, #12]
 8016a5a:	4a11      	ldr	r2, [pc, #68]	; (8016aa0 <USB_FlushRxFifo+0x58>)
 8016a5c:	4293      	cmp	r3, r2
 8016a5e:	d901      	bls.n	8016a64 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8016a60:	2303      	movs	r3, #3
 8016a62:	e017      	b.n	8016a94 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8016a64:	687b      	ldr	r3, [r7, #4]
 8016a66:	691b      	ldr	r3, [r3, #16]
 8016a68:	2b00      	cmp	r3, #0
 8016a6a:	daf3      	bge.n	8016a54 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8016a6c:	2300      	movs	r3, #0
 8016a6e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8016a70:	687b      	ldr	r3, [r7, #4]
 8016a72:	2210      	movs	r2, #16
 8016a74:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8016a76:	68fb      	ldr	r3, [r7, #12]
 8016a78:	3301      	adds	r3, #1
 8016a7a:	60fb      	str	r3, [r7, #12]
 8016a7c:	4a08      	ldr	r2, [pc, #32]	; (8016aa0 <USB_FlushRxFifo+0x58>)
 8016a7e:	4293      	cmp	r3, r2
 8016a80:	d901      	bls.n	8016a86 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8016a82:	2303      	movs	r3, #3
 8016a84:	e006      	b.n	8016a94 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8016a86:	687b      	ldr	r3, [r7, #4]
 8016a88:	691b      	ldr	r3, [r3, #16]
 8016a8a:	f003 0310 	and.w	r3, r3, #16
 8016a8e:	2b10      	cmp	r3, #16
 8016a90:	d0f1      	beq.n	8016a76 <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8016a92:	2300      	movs	r3, #0
}
 8016a94:	4618      	mov	r0, r3
 8016a96:	3714      	adds	r7, #20
 8016a98:	46bd      	mov	sp, r7
 8016a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a9e:	4770      	bx	lr
 8016aa0:	00030d40 	.word	0x00030d40

08016aa4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8016aa4:	b480      	push	{r7}
 8016aa6:	b085      	sub	sp, #20
 8016aa8:	af00      	add	r7, sp, #0
 8016aaa:	6078      	str	r0, [r7, #4]
 8016aac:	460b      	mov	r3, r1
 8016aae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016ab0:	687b      	ldr	r3, [r7, #4]
 8016ab2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8016ab4:	68fb      	ldr	r3, [r7, #12]
 8016ab6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016aba:	681a      	ldr	r2, [r3, #0]
 8016abc:	78fb      	ldrb	r3, [r7, #3]
 8016abe:	68f9      	ldr	r1, [r7, #12]
 8016ac0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8016ac4:	4313      	orrs	r3, r2
 8016ac6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8016ac8:	2300      	movs	r3, #0
}
 8016aca:	4618      	mov	r0, r3
 8016acc:	3714      	adds	r7, #20
 8016ace:	46bd      	mov	sp, r7
 8016ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ad4:	4770      	bx	lr

08016ad6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8016ad6:	b480      	push	{r7}
 8016ad8:	b087      	sub	sp, #28
 8016ada:	af00      	add	r7, sp, #0
 8016adc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016ade:	687b      	ldr	r3, [r7, #4]
 8016ae0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8016ae2:	693b      	ldr	r3, [r7, #16]
 8016ae4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016ae8:	689b      	ldr	r3, [r3, #8]
 8016aea:	f003 0306 	and.w	r3, r3, #6
 8016aee:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8016af0:	68fb      	ldr	r3, [r7, #12]
 8016af2:	2b00      	cmp	r3, #0
 8016af4:	d102      	bne.n	8016afc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8016af6:	2300      	movs	r3, #0
 8016af8:	75fb      	strb	r3, [r7, #23]
 8016afa:	e00a      	b.n	8016b12 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8016afc:	68fb      	ldr	r3, [r7, #12]
 8016afe:	2b02      	cmp	r3, #2
 8016b00:	d002      	beq.n	8016b08 <USB_GetDevSpeed+0x32>
 8016b02:	68fb      	ldr	r3, [r7, #12]
 8016b04:	2b06      	cmp	r3, #6
 8016b06:	d102      	bne.n	8016b0e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8016b08:	2302      	movs	r3, #2
 8016b0a:	75fb      	strb	r3, [r7, #23]
 8016b0c:	e001      	b.n	8016b12 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8016b0e:	230f      	movs	r3, #15
 8016b10:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8016b12:	7dfb      	ldrb	r3, [r7, #23]
}
 8016b14:	4618      	mov	r0, r3
 8016b16:	371c      	adds	r7, #28
 8016b18:	46bd      	mov	sp, r7
 8016b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b1e:	4770      	bx	lr

08016b20 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8016b20:	b480      	push	{r7}
 8016b22:	b085      	sub	sp, #20
 8016b24:	af00      	add	r7, sp, #0
 8016b26:	6078      	str	r0, [r7, #4]
 8016b28:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016b2a:	687b      	ldr	r3, [r7, #4]
 8016b2c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8016b2e:	683b      	ldr	r3, [r7, #0]
 8016b30:	781b      	ldrb	r3, [r3, #0]
 8016b32:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8016b34:	683b      	ldr	r3, [r7, #0]
 8016b36:	785b      	ldrb	r3, [r3, #1]
 8016b38:	2b01      	cmp	r3, #1
 8016b3a:	d139      	bne.n	8016bb0 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8016b3c:	68fb      	ldr	r3, [r7, #12]
 8016b3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016b42:	69da      	ldr	r2, [r3, #28]
 8016b44:	683b      	ldr	r3, [r7, #0]
 8016b46:	781b      	ldrb	r3, [r3, #0]
 8016b48:	f003 030f 	and.w	r3, r3, #15
 8016b4c:	2101      	movs	r1, #1
 8016b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8016b52:	b29b      	uxth	r3, r3
 8016b54:	68f9      	ldr	r1, [r7, #12]
 8016b56:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8016b5a:	4313      	orrs	r3, r2
 8016b5c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8016b5e:	68bb      	ldr	r3, [r7, #8]
 8016b60:	015a      	lsls	r2, r3, #5
 8016b62:	68fb      	ldr	r3, [r7, #12]
 8016b64:	4413      	add	r3, r2
 8016b66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016b6a:	681b      	ldr	r3, [r3, #0]
 8016b6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8016b70:	2b00      	cmp	r3, #0
 8016b72:	d153      	bne.n	8016c1c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8016b74:	68bb      	ldr	r3, [r7, #8]
 8016b76:	015a      	lsls	r2, r3, #5
 8016b78:	68fb      	ldr	r3, [r7, #12]
 8016b7a:	4413      	add	r3, r2
 8016b7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016b80:	681a      	ldr	r2, [r3, #0]
 8016b82:	683b      	ldr	r3, [r7, #0]
 8016b84:	689b      	ldr	r3, [r3, #8]
 8016b86:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8016b8a:	683b      	ldr	r3, [r7, #0]
 8016b8c:	78db      	ldrb	r3, [r3, #3]
 8016b8e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8016b90:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8016b92:	68bb      	ldr	r3, [r7, #8]
 8016b94:	059b      	lsls	r3, r3, #22
 8016b96:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8016b98:	431a      	orrs	r2, r3
 8016b9a:	68bb      	ldr	r3, [r7, #8]
 8016b9c:	0159      	lsls	r1, r3, #5
 8016b9e:	68fb      	ldr	r3, [r7, #12]
 8016ba0:	440b      	add	r3, r1
 8016ba2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016ba6:	4619      	mov	r1, r3
 8016ba8:	4b20      	ldr	r3, [pc, #128]	; (8016c2c <USB_ActivateEndpoint+0x10c>)
 8016baa:	4313      	orrs	r3, r2
 8016bac:	600b      	str	r3, [r1, #0]
 8016bae:	e035      	b.n	8016c1c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8016bb0:	68fb      	ldr	r3, [r7, #12]
 8016bb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016bb6:	69da      	ldr	r2, [r3, #28]
 8016bb8:	683b      	ldr	r3, [r7, #0]
 8016bba:	781b      	ldrb	r3, [r3, #0]
 8016bbc:	f003 030f 	and.w	r3, r3, #15
 8016bc0:	2101      	movs	r1, #1
 8016bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8016bc6:	041b      	lsls	r3, r3, #16
 8016bc8:	68f9      	ldr	r1, [r7, #12]
 8016bca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8016bce:	4313      	orrs	r3, r2
 8016bd0:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8016bd2:	68bb      	ldr	r3, [r7, #8]
 8016bd4:	015a      	lsls	r2, r3, #5
 8016bd6:	68fb      	ldr	r3, [r7, #12]
 8016bd8:	4413      	add	r3, r2
 8016bda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016bde:	681b      	ldr	r3, [r3, #0]
 8016be0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8016be4:	2b00      	cmp	r3, #0
 8016be6:	d119      	bne.n	8016c1c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8016be8:	68bb      	ldr	r3, [r7, #8]
 8016bea:	015a      	lsls	r2, r3, #5
 8016bec:	68fb      	ldr	r3, [r7, #12]
 8016bee:	4413      	add	r3, r2
 8016bf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016bf4:	681a      	ldr	r2, [r3, #0]
 8016bf6:	683b      	ldr	r3, [r7, #0]
 8016bf8:	689b      	ldr	r3, [r3, #8]
 8016bfa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8016bfe:	683b      	ldr	r3, [r7, #0]
 8016c00:	78db      	ldrb	r3, [r3, #3]
 8016c02:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8016c04:	430b      	orrs	r3, r1
 8016c06:	431a      	orrs	r2, r3
 8016c08:	68bb      	ldr	r3, [r7, #8]
 8016c0a:	0159      	lsls	r1, r3, #5
 8016c0c:	68fb      	ldr	r3, [r7, #12]
 8016c0e:	440b      	add	r3, r1
 8016c10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016c14:	4619      	mov	r1, r3
 8016c16:	4b05      	ldr	r3, [pc, #20]	; (8016c2c <USB_ActivateEndpoint+0x10c>)
 8016c18:	4313      	orrs	r3, r2
 8016c1a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8016c1c:	2300      	movs	r3, #0
}
 8016c1e:	4618      	mov	r0, r3
 8016c20:	3714      	adds	r7, #20
 8016c22:	46bd      	mov	sp, r7
 8016c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c28:	4770      	bx	lr
 8016c2a:	bf00      	nop
 8016c2c:	10008000 	.word	0x10008000

08016c30 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8016c30:	b480      	push	{r7}
 8016c32:	b085      	sub	sp, #20
 8016c34:	af00      	add	r7, sp, #0
 8016c36:	6078      	str	r0, [r7, #4]
 8016c38:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016c3a:	687b      	ldr	r3, [r7, #4]
 8016c3c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8016c3e:	683b      	ldr	r3, [r7, #0]
 8016c40:	781b      	ldrb	r3, [r3, #0]
 8016c42:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8016c44:	683b      	ldr	r3, [r7, #0]
 8016c46:	785b      	ldrb	r3, [r3, #1]
 8016c48:	2b01      	cmp	r3, #1
 8016c4a:	d161      	bne.n	8016d10 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8016c4c:	68bb      	ldr	r3, [r7, #8]
 8016c4e:	015a      	lsls	r2, r3, #5
 8016c50:	68fb      	ldr	r3, [r7, #12]
 8016c52:	4413      	add	r3, r2
 8016c54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016c58:	681b      	ldr	r3, [r3, #0]
 8016c5a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8016c5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8016c62:	d11f      	bne.n	8016ca4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8016c64:	68bb      	ldr	r3, [r7, #8]
 8016c66:	015a      	lsls	r2, r3, #5
 8016c68:	68fb      	ldr	r3, [r7, #12]
 8016c6a:	4413      	add	r3, r2
 8016c6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016c70:	681b      	ldr	r3, [r3, #0]
 8016c72:	68ba      	ldr	r2, [r7, #8]
 8016c74:	0151      	lsls	r1, r2, #5
 8016c76:	68fa      	ldr	r2, [r7, #12]
 8016c78:	440a      	add	r2, r1
 8016c7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8016c7e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8016c82:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8016c84:	68bb      	ldr	r3, [r7, #8]
 8016c86:	015a      	lsls	r2, r3, #5
 8016c88:	68fb      	ldr	r3, [r7, #12]
 8016c8a:	4413      	add	r3, r2
 8016c8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016c90:	681b      	ldr	r3, [r3, #0]
 8016c92:	68ba      	ldr	r2, [r7, #8]
 8016c94:	0151      	lsls	r1, r2, #5
 8016c96:	68fa      	ldr	r2, [r7, #12]
 8016c98:	440a      	add	r2, r1
 8016c9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8016c9e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8016ca2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8016ca4:	68fb      	ldr	r3, [r7, #12]
 8016ca6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016caa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8016cac:	683b      	ldr	r3, [r7, #0]
 8016cae:	781b      	ldrb	r3, [r3, #0]
 8016cb0:	f003 030f 	and.w	r3, r3, #15
 8016cb4:	2101      	movs	r1, #1
 8016cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8016cba:	b29b      	uxth	r3, r3
 8016cbc:	43db      	mvns	r3, r3
 8016cbe:	68f9      	ldr	r1, [r7, #12]
 8016cc0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8016cc4:	4013      	ands	r3, r2
 8016cc6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8016cc8:	68fb      	ldr	r3, [r7, #12]
 8016cca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016cce:	69da      	ldr	r2, [r3, #28]
 8016cd0:	683b      	ldr	r3, [r7, #0]
 8016cd2:	781b      	ldrb	r3, [r3, #0]
 8016cd4:	f003 030f 	and.w	r3, r3, #15
 8016cd8:	2101      	movs	r1, #1
 8016cda:	fa01 f303 	lsl.w	r3, r1, r3
 8016cde:	b29b      	uxth	r3, r3
 8016ce0:	43db      	mvns	r3, r3
 8016ce2:	68f9      	ldr	r1, [r7, #12]
 8016ce4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8016ce8:	4013      	ands	r3, r2
 8016cea:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8016cec:	68bb      	ldr	r3, [r7, #8]
 8016cee:	015a      	lsls	r2, r3, #5
 8016cf0:	68fb      	ldr	r3, [r7, #12]
 8016cf2:	4413      	add	r3, r2
 8016cf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016cf8:	681a      	ldr	r2, [r3, #0]
 8016cfa:	68bb      	ldr	r3, [r7, #8]
 8016cfc:	0159      	lsls	r1, r3, #5
 8016cfe:	68fb      	ldr	r3, [r7, #12]
 8016d00:	440b      	add	r3, r1
 8016d02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016d06:	4619      	mov	r1, r3
 8016d08:	4b35      	ldr	r3, [pc, #212]	; (8016de0 <USB_DeactivateEndpoint+0x1b0>)
 8016d0a:	4013      	ands	r3, r2
 8016d0c:	600b      	str	r3, [r1, #0]
 8016d0e:	e060      	b.n	8016dd2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8016d10:	68bb      	ldr	r3, [r7, #8]
 8016d12:	015a      	lsls	r2, r3, #5
 8016d14:	68fb      	ldr	r3, [r7, #12]
 8016d16:	4413      	add	r3, r2
 8016d18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016d1c:	681b      	ldr	r3, [r3, #0]
 8016d1e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8016d22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8016d26:	d11f      	bne.n	8016d68 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8016d28:	68bb      	ldr	r3, [r7, #8]
 8016d2a:	015a      	lsls	r2, r3, #5
 8016d2c:	68fb      	ldr	r3, [r7, #12]
 8016d2e:	4413      	add	r3, r2
 8016d30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016d34:	681b      	ldr	r3, [r3, #0]
 8016d36:	68ba      	ldr	r2, [r7, #8]
 8016d38:	0151      	lsls	r1, r2, #5
 8016d3a:	68fa      	ldr	r2, [r7, #12]
 8016d3c:	440a      	add	r2, r1
 8016d3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8016d42:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8016d46:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8016d48:	68bb      	ldr	r3, [r7, #8]
 8016d4a:	015a      	lsls	r2, r3, #5
 8016d4c:	68fb      	ldr	r3, [r7, #12]
 8016d4e:	4413      	add	r3, r2
 8016d50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016d54:	681b      	ldr	r3, [r3, #0]
 8016d56:	68ba      	ldr	r2, [r7, #8]
 8016d58:	0151      	lsls	r1, r2, #5
 8016d5a:	68fa      	ldr	r2, [r7, #12]
 8016d5c:	440a      	add	r2, r1
 8016d5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8016d62:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8016d66:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8016d68:	68fb      	ldr	r3, [r7, #12]
 8016d6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016d6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8016d70:	683b      	ldr	r3, [r7, #0]
 8016d72:	781b      	ldrb	r3, [r3, #0]
 8016d74:	f003 030f 	and.w	r3, r3, #15
 8016d78:	2101      	movs	r1, #1
 8016d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8016d7e:	041b      	lsls	r3, r3, #16
 8016d80:	43db      	mvns	r3, r3
 8016d82:	68f9      	ldr	r1, [r7, #12]
 8016d84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8016d88:	4013      	ands	r3, r2
 8016d8a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8016d8c:	68fb      	ldr	r3, [r7, #12]
 8016d8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016d92:	69da      	ldr	r2, [r3, #28]
 8016d94:	683b      	ldr	r3, [r7, #0]
 8016d96:	781b      	ldrb	r3, [r3, #0]
 8016d98:	f003 030f 	and.w	r3, r3, #15
 8016d9c:	2101      	movs	r1, #1
 8016d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8016da2:	041b      	lsls	r3, r3, #16
 8016da4:	43db      	mvns	r3, r3
 8016da6:	68f9      	ldr	r1, [r7, #12]
 8016da8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8016dac:	4013      	ands	r3, r2
 8016dae:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8016db0:	68bb      	ldr	r3, [r7, #8]
 8016db2:	015a      	lsls	r2, r3, #5
 8016db4:	68fb      	ldr	r3, [r7, #12]
 8016db6:	4413      	add	r3, r2
 8016db8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016dbc:	681a      	ldr	r2, [r3, #0]
 8016dbe:	68bb      	ldr	r3, [r7, #8]
 8016dc0:	0159      	lsls	r1, r3, #5
 8016dc2:	68fb      	ldr	r3, [r7, #12]
 8016dc4:	440b      	add	r3, r1
 8016dc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016dca:	4619      	mov	r1, r3
 8016dcc:	4b05      	ldr	r3, [pc, #20]	; (8016de4 <USB_DeactivateEndpoint+0x1b4>)
 8016dce:	4013      	ands	r3, r2
 8016dd0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8016dd2:	2300      	movs	r3, #0
}
 8016dd4:	4618      	mov	r0, r3
 8016dd6:	3714      	adds	r7, #20
 8016dd8:	46bd      	mov	sp, r7
 8016dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dde:	4770      	bx	lr
 8016de0:	ec337800 	.word	0xec337800
 8016de4:	eff37800 	.word	0xeff37800

08016de8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8016de8:	b580      	push	{r7, lr}
 8016dea:	b08a      	sub	sp, #40	; 0x28
 8016dec:	af02      	add	r7, sp, #8
 8016dee:	60f8      	str	r0, [r7, #12]
 8016df0:	60b9      	str	r1, [r7, #8]
 8016df2:	4613      	mov	r3, r2
 8016df4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016df6:	68fb      	ldr	r3, [r7, #12]
 8016df8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8016dfa:	68bb      	ldr	r3, [r7, #8]
 8016dfc:	781b      	ldrb	r3, [r3, #0]
 8016dfe:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8016e00:	68bb      	ldr	r3, [r7, #8]
 8016e02:	785b      	ldrb	r3, [r3, #1]
 8016e04:	2b01      	cmp	r3, #1
 8016e06:	f040 8163 	bne.w	80170d0 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8016e0a:	68bb      	ldr	r3, [r7, #8]
 8016e0c:	695b      	ldr	r3, [r3, #20]
 8016e0e:	2b00      	cmp	r3, #0
 8016e10:	d132      	bne.n	8016e78 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8016e12:	69bb      	ldr	r3, [r7, #24]
 8016e14:	015a      	lsls	r2, r3, #5
 8016e16:	69fb      	ldr	r3, [r7, #28]
 8016e18:	4413      	add	r3, r2
 8016e1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016e1e:	691a      	ldr	r2, [r3, #16]
 8016e20:	69bb      	ldr	r3, [r7, #24]
 8016e22:	0159      	lsls	r1, r3, #5
 8016e24:	69fb      	ldr	r3, [r7, #28]
 8016e26:	440b      	add	r3, r1
 8016e28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016e2c:	4619      	mov	r1, r3
 8016e2e:	4ba5      	ldr	r3, [pc, #660]	; (80170c4 <USB_EPStartXfer+0x2dc>)
 8016e30:	4013      	ands	r3, r2
 8016e32:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8016e34:	69bb      	ldr	r3, [r7, #24]
 8016e36:	015a      	lsls	r2, r3, #5
 8016e38:	69fb      	ldr	r3, [r7, #28]
 8016e3a:	4413      	add	r3, r2
 8016e3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016e40:	691b      	ldr	r3, [r3, #16]
 8016e42:	69ba      	ldr	r2, [r7, #24]
 8016e44:	0151      	lsls	r1, r2, #5
 8016e46:	69fa      	ldr	r2, [r7, #28]
 8016e48:	440a      	add	r2, r1
 8016e4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8016e4e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8016e52:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8016e54:	69bb      	ldr	r3, [r7, #24]
 8016e56:	015a      	lsls	r2, r3, #5
 8016e58:	69fb      	ldr	r3, [r7, #28]
 8016e5a:	4413      	add	r3, r2
 8016e5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016e60:	691a      	ldr	r2, [r3, #16]
 8016e62:	69bb      	ldr	r3, [r7, #24]
 8016e64:	0159      	lsls	r1, r3, #5
 8016e66:	69fb      	ldr	r3, [r7, #28]
 8016e68:	440b      	add	r3, r1
 8016e6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016e6e:	4619      	mov	r1, r3
 8016e70:	4b95      	ldr	r3, [pc, #596]	; (80170c8 <USB_EPStartXfer+0x2e0>)
 8016e72:	4013      	ands	r3, r2
 8016e74:	610b      	str	r3, [r1, #16]
 8016e76:	e074      	b.n	8016f62 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8016e78:	69bb      	ldr	r3, [r7, #24]
 8016e7a:	015a      	lsls	r2, r3, #5
 8016e7c:	69fb      	ldr	r3, [r7, #28]
 8016e7e:	4413      	add	r3, r2
 8016e80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016e84:	691a      	ldr	r2, [r3, #16]
 8016e86:	69bb      	ldr	r3, [r7, #24]
 8016e88:	0159      	lsls	r1, r3, #5
 8016e8a:	69fb      	ldr	r3, [r7, #28]
 8016e8c:	440b      	add	r3, r1
 8016e8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016e92:	4619      	mov	r1, r3
 8016e94:	4b8c      	ldr	r3, [pc, #560]	; (80170c8 <USB_EPStartXfer+0x2e0>)
 8016e96:	4013      	ands	r3, r2
 8016e98:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8016e9a:	69bb      	ldr	r3, [r7, #24]
 8016e9c:	015a      	lsls	r2, r3, #5
 8016e9e:	69fb      	ldr	r3, [r7, #28]
 8016ea0:	4413      	add	r3, r2
 8016ea2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016ea6:	691a      	ldr	r2, [r3, #16]
 8016ea8:	69bb      	ldr	r3, [r7, #24]
 8016eaa:	0159      	lsls	r1, r3, #5
 8016eac:	69fb      	ldr	r3, [r7, #28]
 8016eae:	440b      	add	r3, r1
 8016eb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016eb4:	4619      	mov	r1, r3
 8016eb6:	4b83      	ldr	r3, [pc, #524]	; (80170c4 <USB_EPStartXfer+0x2dc>)
 8016eb8:	4013      	ands	r3, r2
 8016eba:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8016ebc:	69bb      	ldr	r3, [r7, #24]
 8016ebe:	015a      	lsls	r2, r3, #5
 8016ec0:	69fb      	ldr	r3, [r7, #28]
 8016ec2:	4413      	add	r3, r2
 8016ec4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016ec8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8016eca:	68bb      	ldr	r3, [r7, #8]
 8016ecc:	6959      	ldr	r1, [r3, #20]
 8016ece:	68bb      	ldr	r3, [r7, #8]
 8016ed0:	689b      	ldr	r3, [r3, #8]
 8016ed2:	440b      	add	r3, r1
 8016ed4:	1e59      	subs	r1, r3, #1
 8016ed6:	68bb      	ldr	r3, [r7, #8]
 8016ed8:	689b      	ldr	r3, [r3, #8]
 8016eda:	fbb1 f3f3 	udiv	r3, r1, r3
 8016ede:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8016ee0:	4b7a      	ldr	r3, [pc, #488]	; (80170cc <USB_EPStartXfer+0x2e4>)
 8016ee2:	400b      	ands	r3, r1
 8016ee4:	69b9      	ldr	r1, [r7, #24]
 8016ee6:	0148      	lsls	r0, r1, #5
 8016ee8:	69f9      	ldr	r1, [r7, #28]
 8016eea:	4401      	add	r1, r0
 8016eec:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8016ef0:	4313      	orrs	r3, r2
 8016ef2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8016ef4:	69bb      	ldr	r3, [r7, #24]
 8016ef6:	015a      	lsls	r2, r3, #5
 8016ef8:	69fb      	ldr	r3, [r7, #28]
 8016efa:	4413      	add	r3, r2
 8016efc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016f00:	691a      	ldr	r2, [r3, #16]
 8016f02:	68bb      	ldr	r3, [r7, #8]
 8016f04:	695b      	ldr	r3, [r3, #20]
 8016f06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8016f0a:	69b9      	ldr	r1, [r7, #24]
 8016f0c:	0148      	lsls	r0, r1, #5
 8016f0e:	69f9      	ldr	r1, [r7, #28]
 8016f10:	4401      	add	r1, r0
 8016f12:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8016f16:	4313      	orrs	r3, r2
 8016f18:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8016f1a:	68bb      	ldr	r3, [r7, #8]
 8016f1c:	78db      	ldrb	r3, [r3, #3]
 8016f1e:	2b01      	cmp	r3, #1
 8016f20:	d11f      	bne.n	8016f62 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8016f22:	69bb      	ldr	r3, [r7, #24]
 8016f24:	015a      	lsls	r2, r3, #5
 8016f26:	69fb      	ldr	r3, [r7, #28]
 8016f28:	4413      	add	r3, r2
 8016f2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016f2e:	691b      	ldr	r3, [r3, #16]
 8016f30:	69ba      	ldr	r2, [r7, #24]
 8016f32:	0151      	lsls	r1, r2, #5
 8016f34:	69fa      	ldr	r2, [r7, #28]
 8016f36:	440a      	add	r2, r1
 8016f38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8016f3c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8016f40:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8016f42:	69bb      	ldr	r3, [r7, #24]
 8016f44:	015a      	lsls	r2, r3, #5
 8016f46:	69fb      	ldr	r3, [r7, #28]
 8016f48:	4413      	add	r3, r2
 8016f4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016f4e:	691b      	ldr	r3, [r3, #16]
 8016f50:	69ba      	ldr	r2, [r7, #24]
 8016f52:	0151      	lsls	r1, r2, #5
 8016f54:	69fa      	ldr	r2, [r7, #28]
 8016f56:	440a      	add	r2, r1
 8016f58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8016f5c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8016f60:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8016f62:	79fb      	ldrb	r3, [r7, #7]
 8016f64:	2b01      	cmp	r3, #1
 8016f66:	d14b      	bne.n	8017000 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8016f68:	68bb      	ldr	r3, [r7, #8]
 8016f6a:	691b      	ldr	r3, [r3, #16]
 8016f6c:	2b00      	cmp	r3, #0
 8016f6e:	d009      	beq.n	8016f84 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8016f70:	69bb      	ldr	r3, [r7, #24]
 8016f72:	015a      	lsls	r2, r3, #5
 8016f74:	69fb      	ldr	r3, [r7, #28]
 8016f76:	4413      	add	r3, r2
 8016f78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016f7c:	461a      	mov	r2, r3
 8016f7e:	68bb      	ldr	r3, [r7, #8]
 8016f80:	691b      	ldr	r3, [r3, #16]
 8016f82:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8016f84:	68bb      	ldr	r3, [r7, #8]
 8016f86:	78db      	ldrb	r3, [r3, #3]
 8016f88:	2b01      	cmp	r3, #1
 8016f8a:	d128      	bne.n	8016fde <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8016f8c:	69fb      	ldr	r3, [r7, #28]
 8016f8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016f92:	689b      	ldr	r3, [r3, #8]
 8016f94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016f98:	2b00      	cmp	r3, #0
 8016f9a:	d110      	bne.n	8016fbe <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8016f9c:	69bb      	ldr	r3, [r7, #24]
 8016f9e:	015a      	lsls	r2, r3, #5
 8016fa0:	69fb      	ldr	r3, [r7, #28]
 8016fa2:	4413      	add	r3, r2
 8016fa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016fa8:	681b      	ldr	r3, [r3, #0]
 8016faa:	69ba      	ldr	r2, [r7, #24]
 8016fac:	0151      	lsls	r1, r2, #5
 8016fae:	69fa      	ldr	r2, [r7, #28]
 8016fb0:	440a      	add	r2, r1
 8016fb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8016fb6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8016fba:	6013      	str	r3, [r2, #0]
 8016fbc:	e00f      	b.n	8016fde <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8016fbe:	69bb      	ldr	r3, [r7, #24]
 8016fc0:	015a      	lsls	r2, r3, #5
 8016fc2:	69fb      	ldr	r3, [r7, #28]
 8016fc4:	4413      	add	r3, r2
 8016fc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016fca:	681b      	ldr	r3, [r3, #0]
 8016fcc:	69ba      	ldr	r2, [r7, #24]
 8016fce:	0151      	lsls	r1, r2, #5
 8016fd0:	69fa      	ldr	r2, [r7, #28]
 8016fd2:	440a      	add	r2, r1
 8016fd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8016fd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8016fdc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8016fde:	69bb      	ldr	r3, [r7, #24]
 8016fe0:	015a      	lsls	r2, r3, #5
 8016fe2:	69fb      	ldr	r3, [r7, #28]
 8016fe4:	4413      	add	r3, r2
 8016fe6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016fea:	681b      	ldr	r3, [r3, #0]
 8016fec:	69ba      	ldr	r2, [r7, #24]
 8016fee:	0151      	lsls	r1, r2, #5
 8016ff0:	69fa      	ldr	r2, [r7, #28]
 8016ff2:	440a      	add	r2, r1
 8016ff4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8016ff8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8016ffc:	6013      	str	r3, [r2, #0]
 8016ffe:	e133      	b.n	8017268 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8017000:	69bb      	ldr	r3, [r7, #24]
 8017002:	015a      	lsls	r2, r3, #5
 8017004:	69fb      	ldr	r3, [r7, #28]
 8017006:	4413      	add	r3, r2
 8017008:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801700c:	681b      	ldr	r3, [r3, #0]
 801700e:	69ba      	ldr	r2, [r7, #24]
 8017010:	0151      	lsls	r1, r2, #5
 8017012:	69fa      	ldr	r2, [r7, #28]
 8017014:	440a      	add	r2, r1
 8017016:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801701a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801701e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8017020:	68bb      	ldr	r3, [r7, #8]
 8017022:	78db      	ldrb	r3, [r3, #3]
 8017024:	2b01      	cmp	r3, #1
 8017026:	d015      	beq.n	8017054 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8017028:	68bb      	ldr	r3, [r7, #8]
 801702a:	695b      	ldr	r3, [r3, #20]
 801702c:	2b00      	cmp	r3, #0
 801702e:	f000 811b 	beq.w	8017268 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8017032:	69fb      	ldr	r3, [r7, #28]
 8017034:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8017038:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801703a:	68bb      	ldr	r3, [r7, #8]
 801703c:	781b      	ldrb	r3, [r3, #0]
 801703e:	f003 030f 	and.w	r3, r3, #15
 8017042:	2101      	movs	r1, #1
 8017044:	fa01 f303 	lsl.w	r3, r1, r3
 8017048:	69f9      	ldr	r1, [r7, #28]
 801704a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801704e:	4313      	orrs	r3, r2
 8017050:	634b      	str	r3, [r1, #52]	; 0x34
 8017052:	e109      	b.n	8017268 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8017054:	69fb      	ldr	r3, [r7, #28]
 8017056:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801705a:	689b      	ldr	r3, [r3, #8]
 801705c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017060:	2b00      	cmp	r3, #0
 8017062:	d110      	bne.n	8017086 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8017064:	69bb      	ldr	r3, [r7, #24]
 8017066:	015a      	lsls	r2, r3, #5
 8017068:	69fb      	ldr	r3, [r7, #28]
 801706a:	4413      	add	r3, r2
 801706c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017070:	681b      	ldr	r3, [r3, #0]
 8017072:	69ba      	ldr	r2, [r7, #24]
 8017074:	0151      	lsls	r1, r2, #5
 8017076:	69fa      	ldr	r2, [r7, #28]
 8017078:	440a      	add	r2, r1
 801707a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801707e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8017082:	6013      	str	r3, [r2, #0]
 8017084:	e00f      	b.n	80170a6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8017086:	69bb      	ldr	r3, [r7, #24]
 8017088:	015a      	lsls	r2, r3, #5
 801708a:	69fb      	ldr	r3, [r7, #28]
 801708c:	4413      	add	r3, r2
 801708e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017092:	681b      	ldr	r3, [r3, #0]
 8017094:	69ba      	ldr	r2, [r7, #24]
 8017096:	0151      	lsls	r1, r2, #5
 8017098:	69fa      	ldr	r2, [r7, #28]
 801709a:	440a      	add	r2, r1
 801709c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80170a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80170a4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80170a6:	68bb      	ldr	r3, [r7, #8]
 80170a8:	68d9      	ldr	r1, [r3, #12]
 80170aa:	68bb      	ldr	r3, [r7, #8]
 80170ac:	781a      	ldrb	r2, [r3, #0]
 80170ae:	68bb      	ldr	r3, [r7, #8]
 80170b0:	695b      	ldr	r3, [r3, #20]
 80170b2:	b298      	uxth	r0, r3
 80170b4:	79fb      	ldrb	r3, [r7, #7]
 80170b6:	9300      	str	r3, [sp, #0]
 80170b8:	4603      	mov	r3, r0
 80170ba:	68f8      	ldr	r0, [r7, #12]
 80170bc:	f000 fa38 	bl	8017530 <USB_WritePacket>
 80170c0:	e0d2      	b.n	8017268 <USB_EPStartXfer+0x480>
 80170c2:	bf00      	nop
 80170c4:	e007ffff 	.word	0xe007ffff
 80170c8:	fff80000 	.word	0xfff80000
 80170cc:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80170d0:	69bb      	ldr	r3, [r7, #24]
 80170d2:	015a      	lsls	r2, r3, #5
 80170d4:	69fb      	ldr	r3, [r7, #28]
 80170d6:	4413      	add	r3, r2
 80170d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80170dc:	691a      	ldr	r2, [r3, #16]
 80170de:	69bb      	ldr	r3, [r7, #24]
 80170e0:	0159      	lsls	r1, r3, #5
 80170e2:	69fb      	ldr	r3, [r7, #28]
 80170e4:	440b      	add	r3, r1
 80170e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80170ea:	4619      	mov	r1, r3
 80170ec:	4b61      	ldr	r3, [pc, #388]	; (8017274 <USB_EPStartXfer+0x48c>)
 80170ee:	4013      	ands	r3, r2
 80170f0:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80170f2:	69bb      	ldr	r3, [r7, #24]
 80170f4:	015a      	lsls	r2, r3, #5
 80170f6:	69fb      	ldr	r3, [r7, #28]
 80170f8:	4413      	add	r3, r2
 80170fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80170fe:	691a      	ldr	r2, [r3, #16]
 8017100:	69bb      	ldr	r3, [r7, #24]
 8017102:	0159      	lsls	r1, r3, #5
 8017104:	69fb      	ldr	r3, [r7, #28]
 8017106:	440b      	add	r3, r1
 8017108:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801710c:	4619      	mov	r1, r3
 801710e:	4b5a      	ldr	r3, [pc, #360]	; (8017278 <USB_EPStartXfer+0x490>)
 8017110:	4013      	ands	r3, r2
 8017112:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8017114:	68bb      	ldr	r3, [r7, #8]
 8017116:	695b      	ldr	r3, [r3, #20]
 8017118:	2b00      	cmp	r3, #0
 801711a:	d123      	bne.n	8017164 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 801711c:	69bb      	ldr	r3, [r7, #24]
 801711e:	015a      	lsls	r2, r3, #5
 8017120:	69fb      	ldr	r3, [r7, #28]
 8017122:	4413      	add	r3, r2
 8017124:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017128:	691a      	ldr	r2, [r3, #16]
 801712a:	68bb      	ldr	r3, [r7, #8]
 801712c:	689b      	ldr	r3, [r3, #8]
 801712e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8017132:	69b9      	ldr	r1, [r7, #24]
 8017134:	0148      	lsls	r0, r1, #5
 8017136:	69f9      	ldr	r1, [r7, #28]
 8017138:	4401      	add	r1, r0
 801713a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801713e:	4313      	orrs	r3, r2
 8017140:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8017142:	69bb      	ldr	r3, [r7, #24]
 8017144:	015a      	lsls	r2, r3, #5
 8017146:	69fb      	ldr	r3, [r7, #28]
 8017148:	4413      	add	r3, r2
 801714a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801714e:	691b      	ldr	r3, [r3, #16]
 8017150:	69ba      	ldr	r2, [r7, #24]
 8017152:	0151      	lsls	r1, r2, #5
 8017154:	69fa      	ldr	r2, [r7, #28]
 8017156:	440a      	add	r2, r1
 8017158:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801715c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8017160:	6113      	str	r3, [r2, #16]
 8017162:	e033      	b.n	80171cc <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8017164:	68bb      	ldr	r3, [r7, #8]
 8017166:	695a      	ldr	r2, [r3, #20]
 8017168:	68bb      	ldr	r3, [r7, #8]
 801716a:	689b      	ldr	r3, [r3, #8]
 801716c:	4413      	add	r3, r2
 801716e:	1e5a      	subs	r2, r3, #1
 8017170:	68bb      	ldr	r3, [r7, #8]
 8017172:	689b      	ldr	r3, [r3, #8]
 8017174:	fbb2 f3f3 	udiv	r3, r2, r3
 8017178:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 801717a:	69bb      	ldr	r3, [r7, #24]
 801717c:	015a      	lsls	r2, r3, #5
 801717e:	69fb      	ldr	r3, [r7, #28]
 8017180:	4413      	add	r3, r2
 8017182:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017186:	691a      	ldr	r2, [r3, #16]
 8017188:	8afb      	ldrh	r3, [r7, #22]
 801718a:	04d9      	lsls	r1, r3, #19
 801718c:	4b3b      	ldr	r3, [pc, #236]	; (801727c <USB_EPStartXfer+0x494>)
 801718e:	400b      	ands	r3, r1
 8017190:	69b9      	ldr	r1, [r7, #24]
 8017192:	0148      	lsls	r0, r1, #5
 8017194:	69f9      	ldr	r1, [r7, #28]
 8017196:	4401      	add	r1, r0
 8017198:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801719c:	4313      	orrs	r3, r2
 801719e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80171a0:	69bb      	ldr	r3, [r7, #24]
 80171a2:	015a      	lsls	r2, r3, #5
 80171a4:	69fb      	ldr	r3, [r7, #28]
 80171a6:	4413      	add	r3, r2
 80171a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80171ac:	691a      	ldr	r2, [r3, #16]
 80171ae:	68bb      	ldr	r3, [r7, #8]
 80171b0:	689b      	ldr	r3, [r3, #8]
 80171b2:	8af9      	ldrh	r1, [r7, #22]
 80171b4:	fb01 f303 	mul.w	r3, r1, r3
 80171b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80171bc:	69b9      	ldr	r1, [r7, #24]
 80171be:	0148      	lsls	r0, r1, #5
 80171c0:	69f9      	ldr	r1, [r7, #28]
 80171c2:	4401      	add	r1, r0
 80171c4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80171c8:	4313      	orrs	r3, r2
 80171ca:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80171cc:	79fb      	ldrb	r3, [r7, #7]
 80171ce:	2b01      	cmp	r3, #1
 80171d0:	d10d      	bne.n	80171ee <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80171d2:	68bb      	ldr	r3, [r7, #8]
 80171d4:	68db      	ldr	r3, [r3, #12]
 80171d6:	2b00      	cmp	r3, #0
 80171d8:	d009      	beq.n	80171ee <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80171da:	68bb      	ldr	r3, [r7, #8]
 80171dc:	68d9      	ldr	r1, [r3, #12]
 80171de:	69bb      	ldr	r3, [r7, #24]
 80171e0:	015a      	lsls	r2, r3, #5
 80171e2:	69fb      	ldr	r3, [r7, #28]
 80171e4:	4413      	add	r3, r2
 80171e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80171ea:	460a      	mov	r2, r1
 80171ec:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80171ee:	68bb      	ldr	r3, [r7, #8]
 80171f0:	78db      	ldrb	r3, [r3, #3]
 80171f2:	2b01      	cmp	r3, #1
 80171f4:	d128      	bne.n	8017248 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80171f6:	69fb      	ldr	r3, [r7, #28]
 80171f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80171fc:	689b      	ldr	r3, [r3, #8]
 80171fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017202:	2b00      	cmp	r3, #0
 8017204:	d110      	bne.n	8017228 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8017206:	69bb      	ldr	r3, [r7, #24]
 8017208:	015a      	lsls	r2, r3, #5
 801720a:	69fb      	ldr	r3, [r7, #28]
 801720c:	4413      	add	r3, r2
 801720e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017212:	681b      	ldr	r3, [r3, #0]
 8017214:	69ba      	ldr	r2, [r7, #24]
 8017216:	0151      	lsls	r1, r2, #5
 8017218:	69fa      	ldr	r2, [r7, #28]
 801721a:	440a      	add	r2, r1
 801721c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8017220:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8017224:	6013      	str	r3, [r2, #0]
 8017226:	e00f      	b.n	8017248 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8017228:	69bb      	ldr	r3, [r7, #24]
 801722a:	015a      	lsls	r2, r3, #5
 801722c:	69fb      	ldr	r3, [r7, #28]
 801722e:	4413      	add	r3, r2
 8017230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017234:	681b      	ldr	r3, [r3, #0]
 8017236:	69ba      	ldr	r2, [r7, #24]
 8017238:	0151      	lsls	r1, r2, #5
 801723a:	69fa      	ldr	r2, [r7, #28]
 801723c:	440a      	add	r2, r1
 801723e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8017242:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8017246:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8017248:	69bb      	ldr	r3, [r7, #24]
 801724a:	015a      	lsls	r2, r3, #5
 801724c:	69fb      	ldr	r3, [r7, #28]
 801724e:	4413      	add	r3, r2
 8017250:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017254:	681b      	ldr	r3, [r3, #0]
 8017256:	69ba      	ldr	r2, [r7, #24]
 8017258:	0151      	lsls	r1, r2, #5
 801725a:	69fa      	ldr	r2, [r7, #28]
 801725c:	440a      	add	r2, r1
 801725e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8017262:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8017266:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8017268:	2300      	movs	r3, #0
}
 801726a:	4618      	mov	r0, r3
 801726c:	3720      	adds	r7, #32
 801726e:	46bd      	mov	sp, r7
 8017270:	bd80      	pop	{r7, pc}
 8017272:	bf00      	nop
 8017274:	fff80000 	.word	0xfff80000
 8017278:	e007ffff 	.word	0xe007ffff
 801727c:	1ff80000 	.word	0x1ff80000

08017280 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8017280:	b480      	push	{r7}
 8017282:	b087      	sub	sp, #28
 8017284:	af00      	add	r7, sp, #0
 8017286:	60f8      	str	r0, [r7, #12]
 8017288:	60b9      	str	r1, [r7, #8]
 801728a:	4613      	mov	r3, r2
 801728c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801728e:	68fb      	ldr	r3, [r7, #12]
 8017290:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8017292:	68bb      	ldr	r3, [r7, #8]
 8017294:	781b      	ldrb	r3, [r3, #0]
 8017296:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8017298:	68bb      	ldr	r3, [r7, #8]
 801729a:	785b      	ldrb	r3, [r3, #1]
 801729c:	2b01      	cmp	r3, #1
 801729e:	f040 80cd 	bne.w	801743c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80172a2:	68bb      	ldr	r3, [r7, #8]
 80172a4:	695b      	ldr	r3, [r3, #20]
 80172a6:	2b00      	cmp	r3, #0
 80172a8:	d132      	bne.n	8017310 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80172aa:	693b      	ldr	r3, [r7, #16]
 80172ac:	015a      	lsls	r2, r3, #5
 80172ae:	697b      	ldr	r3, [r7, #20]
 80172b0:	4413      	add	r3, r2
 80172b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80172b6:	691a      	ldr	r2, [r3, #16]
 80172b8:	693b      	ldr	r3, [r7, #16]
 80172ba:	0159      	lsls	r1, r3, #5
 80172bc:	697b      	ldr	r3, [r7, #20]
 80172be:	440b      	add	r3, r1
 80172c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80172c4:	4619      	mov	r1, r3
 80172c6:	4b98      	ldr	r3, [pc, #608]	; (8017528 <USB_EP0StartXfer+0x2a8>)
 80172c8:	4013      	ands	r3, r2
 80172ca:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80172cc:	693b      	ldr	r3, [r7, #16]
 80172ce:	015a      	lsls	r2, r3, #5
 80172d0:	697b      	ldr	r3, [r7, #20]
 80172d2:	4413      	add	r3, r2
 80172d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80172d8:	691b      	ldr	r3, [r3, #16]
 80172da:	693a      	ldr	r2, [r7, #16]
 80172dc:	0151      	lsls	r1, r2, #5
 80172de:	697a      	ldr	r2, [r7, #20]
 80172e0:	440a      	add	r2, r1
 80172e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80172e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80172ea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80172ec:	693b      	ldr	r3, [r7, #16]
 80172ee:	015a      	lsls	r2, r3, #5
 80172f0:	697b      	ldr	r3, [r7, #20]
 80172f2:	4413      	add	r3, r2
 80172f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80172f8:	691a      	ldr	r2, [r3, #16]
 80172fa:	693b      	ldr	r3, [r7, #16]
 80172fc:	0159      	lsls	r1, r3, #5
 80172fe:	697b      	ldr	r3, [r7, #20]
 8017300:	440b      	add	r3, r1
 8017302:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017306:	4619      	mov	r1, r3
 8017308:	4b88      	ldr	r3, [pc, #544]	; (801752c <USB_EP0StartXfer+0x2ac>)
 801730a:	4013      	ands	r3, r2
 801730c:	610b      	str	r3, [r1, #16]
 801730e:	e04e      	b.n	80173ae <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8017310:	693b      	ldr	r3, [r7, #16]
 8017312:	015a      	lsls	r2, r3, #5
 8017314:	697b      	ldr	r3, [r7, #20]
 8017316:	4413      	add	r3, r2
 8017318:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801731c:	691a      	ldr	r2, [r3, #16]
 801731e:	693b      	ldr	r3, [r7, #16]
 8017320:	0159      	lsls	r1, r3, #5
 8017322:	697b      	ldr	r3, [r7, #20]
 8017324:	440b      	add	r3, r1
 8017326:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801732a:	4619      	mov	r1, r3
 801732c:	4b7f      	ldr	r3, [pc, #508]	; (801752c <USB_EP0StartXfer+0x2ac>)
 801732e:	4013      	ands	r3, r2
 8017330:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8017332:	693b      	ldr	r3, [r7, #16]
 8017334:	015a      	lsls	r2, r3, #5
 8017336:	697b      	ldr	r3, [r7, #20]
 8017338:	4413      	add	r3, r2
 801733a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801733e:	691a      	ldr	r2, [r3, #16]
 8017340:	693b      	ldr	r3, [r7, #16]
 8017342:	0159      	lsls	r1, r3, #5
 8017344:	697b      	ldr	r3, [r7, #20]
 8017346:	440b      	add	r3, r1
 8017348:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801734c:	4619      	mov	r1, r3
 801734e:	4b76      	ldr	r3, [pc, #472]	; (8017528 <USB_EP0StartXfer+0x2a8>)
 8017350:	4013      	ands	r3, r2
 8017352:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8017354:	68bb      	ldr	r3, [r7, #8]
 8017356:	695a      	ldr	r2, [r3, #20]
 8017358:	68bb      	ldr	r3, [r7, #8]
 801735a:	689b      	ldr	r3, [r3, #8]
 801735c:	429a      	cmp	r2, r3
 801735e:	d903      	bls.n	8017368 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8017360:	68bb      	ldr	r3, [r7, #8]
 8017362:	689a      	ldr	r2, [r3, #8]
 8017364:	68bb      	ldr	r3, [r7, #8]
 8017366:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8017368:	693b      	ldr	r3, [r7, #16]
 801736a:	015a      	lsls	r2, r3, #5
 801736c:	697b      	ldr	r3, [r7, #20]
 801736e:	4413      	add	r3, r2
 8017370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017374:	691b      	ldr	r3, [r3, #16]
 8017376:	693a      	ldr	r2, [r7, #16]
 8017378:	0151      	lsls	r1, r2, #5
 801737a:	697a      	ldr	r2, [r7, #20]
 801737c:	440a      	add	r2, r1
 801737e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8017382:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8017386:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8017388:	693b      	ldr	r3, [r7, #16]
 801738a:	015a      	lsls	r2, r3, #5
 801738c:	697b      	ldr	r3, [r7, #20]
 801738e:	4413      	add	r3, r2
 8017390:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017394:	691a      	ldr	r2, [r3, #16]
 8017396:	68bb      	ldr	r3, [r7, #8]
 8017398:	695b      	ldr	r3, [r3, #20]
 801739a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801739e:	6939      	ldr	r1, [r7, #16]
 80173a0:	0148      	lsls	r0, r1, #5
 80173a2:	6979      	ldr	r1, [r7, #20]
 80173a4:	4401      	add	r1, r0
 80173a6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80173aa:	4313      	orrs	r3, r2
 80173ac:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80173ae:	79fb      	ldrb	r3, [r7, #7]
 80173b0:	2b01      	cmp	r3, #1
 80173b2:	d11e      	bne.n	80173f2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80173b4:	68bb      	ldr	r3, [r7, #8]
 80173b6:	691b      	ldr	r3, [r3, #16]
 80173b8:	2b00      	cmp	r3, #0
 80173ba:	d009      	beq.n	80173d0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80173bc:	693b      	ldr	r3, [r7, #16]
 80173be:	015a      	lsls	r2, r3, #5
 80173c0:	697b      	ldr	r3, [r7, #20]
 80173c2:	4413      	add	r3, r2
 80173c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80173c8:	461a      	mov	r2, r3
 80173ca:	68bb      	ldr	r3, [r7, #8]
 80173cc:	691b      	ldr	r3, [r3, #16]
 80173ce:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80173d0:	693b      	ldr	r3, [r7, #16]
 80173d2:	015a      	lsls	r2, r3, #5
 80173d4:	697b      	ldr	r3, [r7, #20]
 80173d6:	4413      	add	r3, r2
 80173d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80173dc:	681b      	ldr	r3, [r3, #0]
 80173de:	693a      	ldr	r2, [r7, #16]
 80173e0:	0151      	lsls	r1, r2, #5
 80173e2:	697a      	ldr	r2, [r7, #20]
 80173e4:	440a      	add	r2, r1
 80173e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80173ea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80173ee:	6013      	str	r3, [r2, #0]
 80173f0:	e092      	b.n	8017518 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80173f2:	693b      	ldr	r3, [r7, #16]
 80173f4:	015a      	lsls	r2, r3, #5
 80173f6:	697b      	ldr	r3, [r7, #20]
 80173f8:	4413      	add	r3, r2
 80173fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80173fe:	681b      	ldr	r3, [r3, #0]
 8017400:	693a      	ldr	r2, [r7, #16]
 8017402:	0151      	lsls	r1, r2, #5
 8017404:	697a      	ldr	r2, [r7, #20]
 8017406:	440a      	add	r2, r1
 8017408:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801740c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8017410:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8017412:	68bb      	ldr	r3, [r7, #8]
 8017414:	695b      	ldr	r3, [r3, #20]
 8017416:	2b00      	cmp	r3, #0
 8017418:	d07e      	beq.n	8017518 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801741a:	697b      	ldr	r3, [r7, #20]
 801741c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8017420:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8017422:	68bb      	ldr	r3, [r7, #8]
 8017424:	781b      	ldrb	r3, [r3, #0]
 8017426:	f003 030f 	and.w	r3, r3, #15
 801742a:	2101      	movs	r1, #1
 801742c:	fa01 f303 	lsl.w	r3, r1, r3
 8017430:	6979      	ldr	r1, [r7, #20]
 8017432:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8017436:	4313      	orrs	r3, r2
 8017438:	634b      	str	r3, [r1, #52]	; 0x34
 801743a:	e06d      	b.n	8017518 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801743c:	693b      	ldr	r3, [r7, #16]
 801743e:	015a      	lsls	r2, r3, #5
 8017440:	697b      	ldr	r3, [r7, #20]
 8017442:	4413      	add	r3, r2
 8017444:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017448:	691a      	ldr	r2, [r3, #16]
 801744a:	693b      	ldr	r3, [r7, #16]
 801744c:	0159      	lsls	r1, r3, #5
 801744e:	697b      	ldr	r3, [r7, #20]
 8017450:	440b      	add	r3, r1
 8017452:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017456:	4619      	mov	r1, r3
 8017458:	4b34      	ldr	r3, [pc, #208]	; (801752c <USB_EP0StartXfer+0x2ac>)
 801745a:	4013      	ands	r3, r2
 801745c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801745e:	693b      	ldr	r3, [r7, #16]
 8017460:	015a      	lsls	r2, r3, #5
 8017462:	697b      	ldr	r3, [r7, #20]
 8017464:	4413      	add	r3, r2
 8017466:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801746a:	691a      	ldr	r2, [r3, #16]
 801746c:	693b      	ldr	r3, [r7, #16]
 801746e:	0159      	lsls	r1, r3, #5
 8017470:	697b      	ldr	r3, [r7, #20]
 8017472:	440b      	add	r3, r1
 8017474:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017478:	4619      	mov	r1, r3
 801747a:	4b2b      	ldr	r3, [pc, #172]	; (8017528 <USB_EP0StartXfer+0x2a8>)
 801747c:	4013      	ands	r3, r2
 801747e:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8017480:	68bb      	ldr	r3, [r7, #8]
 8017482:	695b      	ldr	r3, [r3, #20]
 8017484:	2b00      	cmp	r3, #0
 8017486:	d003      	beq.n	8017490 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8017488:	68bb      	ldr	r3, [r7, #8]
 801748a:	689a      	ldr	r2, [r3, #8]
 801748c:	68bb      	ldr	r3, [r7, #8]
 801748e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8017490:	693b      	ldr	r3, [r7, #16]
 8017492:	015a      	lsls	r2, r3, #5
 8017494:	697b      	ldr	r3, [r7, #20]
 8017496:	4413      	add	r3, r2
 8017498:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801749c:	691b      	ldr	r3, [r3, #16]
 801749e:	693a      	ldr	r2, [r7, #16]
 80174a0:	0151      	lsls	r1, r2, #5
 80174a2:	697a      	ldr	r2, [r7, #20]
 80174a4:	440a      	add	r2, r1
 80174a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80174aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80174ae:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80174b0:	693b      	ldr	r3, [r7, #16]
 80174b2:	015a      	lsls	r2, r3, #5
 80174b4:	697b      	ldr	r3, [r7, #20]
 80174b6:	4413      	add	r3, r2
 80174b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80174bc:	691a      	ldr	r2, [r3, #16]
 80174be:	68bb      	ldr	r3, [r7, #8]
 80174c0:	689b      	ldr	r3, [r3, #8]
 80174c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80174c6:	6939      	ldr	r1, [r7, #16]
 80174c8:	0148      	lsls	r0, r1, #5
 80174ca:	6979      	ldr	r1, [r7, #20]
 80174cc:	4401      	add	r1, r0
 80174ce:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80174d2:	4313      	orrs	r3, r2
 80174d4:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80174d6:	79fb      	ldrb	r3, [r7, #7]
 80174d8:	2b01      	cmp	r3, #1
 80174da:	d10d      	bne.n	80174f8 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80174dc:	68bb      	ldr	r3, [r7, #8]
 80174de:	68db      	ldr	r3, [r3, #12]
 80174e0:	2b00      	cmp	r3, #0
 80174e2:	d009      	beq.n	80174f8 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80174e4:	68bb      	ldr	r3, [r7, #8]
 80174e6:	68d9      	ldr	r1, [r3, #12]
 80174e8:	693b      	ldr	r3, [r7, #16]
 80174ea:	015a      	lsls	r2, r3, #5
 80174ec:	697b      	ldr	r3, [r7, #20]
 80174ee:	4413      	add	r3, r2
 80174f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80174f4:	460a      	mov	r2, r1
 80174f6:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80174f8:	693b      	ldr	r3, [r7, #16]
 80174fa:	015a      	lsls	r2, r3, #5
 80174fc:	697b      	ldr	r3, [r7, #20]
 80174fe:	4413      	add	r3, r2
 8017500:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017504:	681b      	ldr	r3, [r3, #0]
 8017506:	693a      	ldr	r2, [r7, #16]
 8017508:	0151      	lsls	r1, r2, #5
 801750a:	697a      	ldr	r2, [r7, #20]
 801750c:	440a      	add	r2, r1
 801750e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8017512:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8017516:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8017518:	2300      	movs	r3, #0
}
 801751a:	4618      	mov	r0, r3
 801751c:	371c      	adds	r7, #28
 801751e:	46bd      	mov	sp, r7
 8017520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017524:	4770      	bx	lr
 8017526:	bf00      	nop
 8017528:	e007ffff 	.word	0xe007ffff
 801752c:	fff80000 	.word	0xfff80000

08017530 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8017530:	b480      	push	{r7}
 8017532:	b089      	sub	sp, #36	; 0x24
 8017534:	af00      	add	r7, sp, #0
 8017536:	60f8      	str	r0, [r7, #12]
 8017538:	60b9      	str	r1, [r7, #8]
 801753a:	4611      	mov	r1, r2
 801753c:	461a      	mov	r2, r3
 801753e:	460b      	mov	r3, r1
 8017540:	71fb      	strb	r3, [r7, #7]
 8017542:	4613      	mov	r3, r2
 8017544:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8017546:	68fb      	ldr	r3, [r7, #12]
 8017548:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 801754a:	68bb      	ldr	r3, [r7, #8]
 801754c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 801754e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8017552:	2b00      	cmp	r3, #0
 8017554:	d123      	bne.n	801759e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8017556:	88bb      	ldrh	r3, [r7, #4]
 8017558:	3303      	adds	r3, #3
 801755a:	089b      	lsrs	r3, r3, #2
 801755c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 801755e:	2300      	movs	r3, #0
 8017560:	61bb      	str	r3, [r7, #24]
 8017562:	e018      	b.n	8017596 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8017564:	79fb      	ldrb	r3, [r7, #7]
 8017566:	031a      	lsls	r2, r3, #12
 8017568:	697b      	ldr	r3, [r7, #20]
 801756a:	4413      	add	r3, r2
 801756c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017570:	461a      	mov	r2, r3
 8017572:	69fb      	ldr	r3, [r7, #28]
 8017574:	681b      	ldr	r3, [r3, #0]
 8017576:	6013      	str	r3, [r2, #0]
      pSrc++;
 8017578:	69fb      	ldr	r3, [r7, #28]
 801757a:	3301      	adds	r3, #1
 801757c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801757e:	69fb      	ldr	r3, [r7, #28]
 8017580:	3301      	adds	r3, #1
 8017582:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8017584:	69fb      	ldr	r3, [r7, #28]
 8017586:	3301      	adds	r3, #1
 8017588:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801758a:	69fb      	ldr	r3, [r7, #28]
 801758c:	3301      	adds	r3, #1
 801758e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8017590:	69bb      	ldr	r3, [r7, #24]
 8017592:	3301      	adds	r3, #1
 8017594:	61bb      	str	r3, [r7, #24]
 8017596:	69ba      	ldr	r2, [r7, #24]
 8017598:	693b      	ldr	r3, [r7, #16]
 801759a:	429a      	cmp	r2, r3
 801759c:	d3e2      	bcc.n	8017564 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 801759e:	2300      	movs	r3, #0
}
 80175a0:	4618      	mov	r0, r3
 80175a2:	3724      	adds	r7, #36	; 0x24
 80175a4:	46bd      	mov	sp, r7
 80175a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175aa:	4770      	bx	lr

080175ac <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80175ac:	b480      	push	{r7}
 80175ae:	b08b      	sub	sp, #44	; 0x2c
 80175b0:	af00      	add	r7, sp, #0
 80175b2:	60f8      	str	r0, [r7, #12]
 80175b4:	60b9      	str	r1, [r7, #8]
 80175b6:	4613      	mov	r3, r2
 80175b8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80175ba:	68fb      	ldr	r3, [r7, #12]
 80175bc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80175be:	68bb      	ldr	r3, [r7, #8]
 80175c0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80175c2:	88fb      	ldrh	r3, [r7, #6]
 80175c4:	089b      	lsrs	r3, r3, #2
 80175c6:	b29b      	uxth	r3, r3
 80175c8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80175ca:	88fb      	ldrh	r3, [r7, #6]
 80175cc:	f003 0303 	and.w	r3, r3, #3
 80175d0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80175d2:	2300      	movs	r3, #0
 80175d4:	623b      	str	r3, [r7, #32]
 80175d6:	e014      	b.n	8017602 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80175d8:	69bb      	ldr	r3, [r7, #24]
 80175da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80175de:	681a      	ldr	r2, [r3, #0]
 80175e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175e2:	601a      	str	r2, [r3, #0]
    pDest++;
 80175e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175e6:	3301      	adds	r3, #1
 80175e8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80175ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175ec:	3301      	adds	r3, #1
 80175ee:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80175f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175f2:	3301      	adds	r3, #1
 80175f4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80175f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175f8:	3301      	adds	r3, #1
 80175fa:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80175fc:	6a3b      	ldr	r3, [r7, #32]
 80175fe:	3301      	adds	r3, #1
 8017600:	623b      	str	r3, [r7, #32]
 8017602:	6a3a      	ldr	r2, [r7, #32]
 8017604:	697b      	ldr	r3, [r7, #20]
 8017606:	429a      	cmp	r2, r3
 8017608:	d3e6      	bcc.n	80175d8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 801760a:	8bfb      	ldrh	r3, [r7, #30]
 801760c:	2b00      	cmp	r3, #0
 801760e:	d01e      	beq.n	801764e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8017610:	2300      	movs	r3, #0
 8017612:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8017614:	69bb      	ldr	r3, [r7, #24]
 8017616:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801761a:	461a      	mov	r2, r3
 801761c:	f107 0310 	add.w	r3, r7, #16
 8017620:	6812      	ldr	r2, [r2, #0]
 8017622:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8017624:	693a      	ldr	r2, [r7, #16]
 8017626:	6a3b      	ldr	r3, [r7, #32]
 8017628:	b2db      	uxtb	r3, r3
 801762a:	00db      	lsls	r3, r3, #3
 801762c:	fa22 f303 	lsr.w	r3, r2, r3
 8017630:	b2da      	uxtb	r2, r3
 8017632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017634:	701a      	strb	r2, [r3, #0]
      i++;
 8017636:	6a3b      	ldr	r3, [r7, #32]
 8017638:	3301      	adds	r3, #1
 801763a:	623b      	str	r3, [r7, #32]
      pDest++;
 801763c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801763e:	3301      	adds	r3, #1
 8017640:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8017642:	8bfb      	ldrh	r3, [r7, #30]
 8017644:	3b01      	subs	r3, #1
 8017646:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8017648:	8bfb      	ldrh	r3, [r7, #30]
 801764a:	2b00      	cmp	r3, #0
 801764c:	d1ea      	bne.n	8017624 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 801764e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8017650:	4618      	mov	r0, r3
 8017652:	372c      	adds	r7, #44	; 0x2c
 8017654:	46bd      	mov	sp, r7
 8017656:	f85d 7b04 	ldr.w	r7, [sp], #4
 801765a:	4770      	bx	lr

0801765c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801765c:	b480      	push	{r7}
 801765e:	b085      	sub	sp, #20
 8017660:	af00      	add	r7, sp, #0
 8017662:	6078      	str	r0, [r7, #4]
 8017664:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8017666:	687b      	ldr	r3, [r7, #4]
 8017668:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801766a:	683b      	ldr	r3, [r7, #0]
 801766c:	781b      	ldrb	r3, [r3, #0]
 801766e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8017670:	683b      	ldr	r3, [r7, #0]
 8017672:	785b      	ldrb	r3, [r3, #1]
 8017674:	2b01      	cmp	r3, #1
 8017676:	d12c      	bne.n	80176d2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8017678:	68bb      	ldr	r3, [r7, #8]
 801767a:	015a      	lsls	r2, r3, #5
 801767c:	68fb      	ldr	r3, [r7, #12]
 801767e:	4413      	add	r3, r2
 8017680:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017684:	681b      	ldr	r3, [r3, #0]
 8017686:	2b00      	cmp	r3, #0
 8017688:	db12      	blt.n	80176b0 <USB_EPSetStall+0x54>
 801768a:	68bb      	ldr	r3, [r7, #8]
 801768c:	2b00      	cmp	r3, #0
 801768e:	d00f      	beq.n	80176b0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8017690:	68bb      	ldr	r3, [r7, #8]
 8017692:	015a      	lsls	r2, r3, #5
 8017694:	68fb      	ldr	r3, [r7, #12]
 8017696:	4413      	add	r3, r2
 8017698:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801769c:	681b      	ldr	r3, [r3, #0]
 801769e:	68ba      	ldr	r2, [r7, #8]
 80176a0:	0151      	lsls	r1, r2, #5
 80176a2:	68fa      	ldr	r2, [r7, #12]
 80176a4:	440a      	add	r2, r1
 80176a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80176aa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80176ae:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80176b0:	68bb      	ldr	r3, [r7, #8]
 80176b2:	015a      	lsls	r2, r3, #5
 80176b4:	68fb      	ldr	r3, [r7, #12]
 80176b6:	4413      	add	r3, r2
 80176b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80176bc:	681b      	ldr	r3, [r3, #0]
 80176be:	68ba      	ldr	r2, [r7, #8]
 80176c0:	0151      	lsls	r1, r2, #5
 80176c2:	68fa      	ldr	r2, [r7, #12]
 80176c4:	440a      	add	r2, r1
 80176c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80176ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80176ce:	6013      	str	r3, [r2, #0]
 80176d0:	e02b      	b.n	801772a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80176d2:	68bb      	ldr	r3, [r7, #8]
 80176d4:	015a      	lsls	r2, r3, #5
 80176d6:	68fb      	ldr	r3, [r7, #12]
 80176d8:	4413      	add	r3, r2
 80176da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80176de:	681b      	ldr	r3, [r3, #0]
 80176e0:	2b00      	cmp	r3, #0
 80176e2:	db12      	blt.n	801770a <USB_EPSetStall+0xae>
 80176e4:	68bb      	ldr	r3, [r7, #8]
 80176e6:	2b00      	cmp	r3, #0
 80176e8:	d00f      	beq.n	801770a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80176ea:	68bb      	ldr	r3, [r7, #8]
 80176ec:	015a      	lsls	r2, r3, #5
 80176ee:	68fb      	ldr	r3, [r7, #12]
 80176f0:	4413      	add	r3, r2
 80176f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80176f6:	681b      	ldr	r3, [r3, #0]
 80176f8:	68ba      	ldr	r2, [r7, #8]
 80176fa:	0151      	lsls	r1, r2, #5
 80176fc:	68fa      	ldr	r2, [r7, #12]
 80176fe:	440a      	add	r2, r1
 8017700:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8017704:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8017708:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 801770a:	68bb      	ldr	r3, [r7, #8]
 801770c:	015a      	lsls	r2, r3, #5
 801770e:	68fb      	ldr	r3, [r7, #12]
 8017710:	4413      	add	r3, r2
 8017712:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017716:	681b      	ldr	r3, [r3, #0]
 8017718:	68ba      	ldr	r2, [r7, #8]
 801771a:	0151      	lsls	r1, r2, #5
 801771c:	68fa      	ldr	r2, [r7, #12]
 801771e:	440a      	add	r2, r1
 8017720:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8017724:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8017728:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801772a:	2300      	movs	r3, #0
}
 801772c:	4618      	mov	r0, r3
 801772e:	3714      	adds	r7, #20
 8017730:	46bd      	mov	sp, r7
 8017732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017736:	4770      	bx	lr

08017738 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8017738:	b480      	push	{r7}
 801773a:	b085      	sub	sp, #20
 801773c:	af00      	add	r7, sp, #0
 801773e:	6078      	str	r0, [r7, #4]
 8017740:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8017742:	687b      	ldr	r3, [r7, #4]
 8017744:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8017746:	683b      	ldr	r3, [r7, #0]
 8017748:	781b      	ldrb	r3, [r3, #0]
 801774a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801774c:	683b      	ldr	r3, [r7, #0]
 801774e:	785b      	ldrb	r3, [r3, #1]
 8017750:	2b01      	cmp	r3, #1
 8017752:	d128      	bne.n	80177a6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8017754:	68bb      	ldr	r3, [r7, #8]
 8017756:	015a      	lsls	r2, r3, #5
 8017758:	68fb      	ldr	r3, [r7, #12]
 801775a:	4413      	add	r3, r2
 801775c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017760:	681b      	ldr	r3, [r3, #0]
 8017762:	68ba      	ldr	r2, [r7, #8]
 8017764:	0151      	lsls	r1, r2, #5
 8017766:	68fa      	ldr	r2, [r7, #12]
 8017768:	440a      	add	r2, r1
 801776a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801776e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8017772:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8017774:	683b      	ldr	r3, [r7, #0]
 8017776:	78db      	ldrb	r3, [r3, #3]
 8017778:	2b03      	cmp	r3, #3
 801777a:	d003      	beq.n	8017784 <USB_EPClearStall+0x4c>
 801777c:	683b      	ldr	r3, [r7, #0]
 801777e:	78db      	ldrb	r3, [r3, #3]
 8017780:	2b02      	cmp	r3, #2
 8017782:	d138      	bne.n	80177f6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8017784:	68bb      	ldr	r3, [r7, #8]
 8017786:	015a      	lsls	r2, r3, #5
 8017788:	68fb      	ldr	r3, [r7, #12]
 801778a:	4413      	add	r3, r2
 801778c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017790:	681b      	ldr	r3, [r3, #0]
 8017792:	68ba      	ldr	r2, [r7, #8]
 8017794:	0151      	lsls	r1, r2, #5
 8017796:	68fa      	ldr	r2, [r7, #12]
 8017798:	440a      	add	r2, r1
 801779a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801779e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80177a2:	6013      	str	r3, [r2, #0]
 80177a4:	e027      	b.n	80177f6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80177a6:	68bb      	ldr	r3, [r7, #8]
 80177a8:	015a      	lsls	r2, r3, #5
 80177aa:	68fb      	ldr	r3, [r7, #12]
 80177ac:	4413      	add	r3, r2
 80177ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80177b2:	681b      	ldr	r3, [r3, #0]
 80177b4:	68ba      	ldr	r2, [r7, #8]
 80177b6:	0151      	lsls	r1, r2, #5
 80177b8:	68fa      	ldr	r2, [r7, #12]
 80177ba:	440a      	add	r2, r1
 80177bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80177c0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80177c4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80177c6:	683b      	ldr	r3, [r7, #0]
 80177c8:	78db      	ldrb	r3, [r3, #3]
 80177ca:	2b03      	cmp	r3, #3
 80177cc:	d003      	beq.n	80177d6 <USB_EPClearStall+0x9e>
 80177ce:	683b      	ldr	r3, [r7, #0]
 80177d0:	78db      	ldrb	r3, [r3, #3]
 80177d2:	2b02      	cmp	r3, #2
 80177d4:	d10f      	bne.n	80177f6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80177d6:	68bb      	ldr	r3, [r7, #8]
 80177d8:	015a      	lsls	r2, r3, #5
 80177da:	68fb      	ldr	r3, [r7, #12]
 80177dc:	4413      	add	r3, r2
 80177de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80177e2:	681b      	ldr	r3, [r3, #0]
 80177e4:	68ba      	ldr	r2, [r7, #8]
 80177e6:	0151      	lsls	r1, r2, #5
 80177e8:	68fa      	ldr	r2, [r7, #12]
 80177ea:	440a      	add	r2, r1
 80177ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80177f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80177f4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80177f6:	2300      	movs	r3, #0
}
 80177f8:	4618      	mov	r0, r3
 80177fa:	3714      	adds	r7, #20
 80177fc:	46bd      	mov	sp, r7
 80177fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017802:	4770      	bx	lr

08017804 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8017804:	b480      	push	{r7}
 8017806:	b085      	sub	sp, #20
 8017808:	af00      	add	r7, sp, #0
 801780a:	6078      	str	r0, [r7, #4]
 801780c:	460b      	mov	r3, r1
 801780e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8017810:	687b      	ldr	r3, [r7, #4]
 8017812:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8017814:	68fb      	ldr	r3, [r7, #12]
 8017816:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801781a:	681b      	ldr	r3, [r3, #0]
 801781c:	68fa      	ldr	r2, [r7, #12]
 801781e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8017822:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8017826:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8017828:	68fb      	ldr	r3, [r7, #12]
 801782a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801782e:	681a      	ldr	r2, [r3, #0]
 8017830:	78fb      	ldrb	r3, [r7, #3]
 8017832:	011b      	lsls	r3, r3, #4
 8017834:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8017838:	68f9      	ldr	r1, [r7, #12]
 801783a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801783e:	4313      	orrs	r3, r2
 8017840:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8017842:	2300      	movs	r3, #0
}
 8017844:	4618      	mov	r0, r3
 8017846:	3714      	adds	r7, #20
 8017848:	46bd      	mov	sp, r7
 801784a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801784e:	4770      	bx	lr

08017850 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8017850:	b480      	push	{r7}
 8017852:	b085      	sub	sp, #20
 8017854:	af00      	add	r7, sp, #0
 8017856:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8017858:	687b      	ldr	r3, [r7, #4]
 801785a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801785c:	68fb      	ldr	r3, [r7, #12]
 801785e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8017862:	681b      	ldr	r3, [r3, #0]
 8017864:	68fa      	ldr	r2, [r7, #12]
 8017866:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801786a:	f023 0303 	bic.w	r3, r3, #3
 801786e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8017870:	68fb      	ldr	r3, [r7, #12]
 8017872:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8017876:	685b      	ldr	r3, [r3, #4]
 8017878:	68fa      	ldr	r2, [r7, #12]
 801787a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801787e:	f023 0302 	bic.w	r3, r3, #2
 8017882:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8017884:	2300      	movs	r3, #0
}
 8017886:	4618      	mov	r0, r3
 8017888:	3714      	adds	r7, #20
 801788a:	46bd      	mov	sp, r7
 801788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017890:	4770      	bx	lr

08017892 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8017892:	b480      	push	{r7}
 8017894:	b085      	sub	sp, #20
 8017896:	af00      	add	r7, sp, #0
 8017898:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801789a:	687b      	ldr	r3, [r7, #4]
 801789c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801789e:	68fb      	ldr	r3, [r7, #12]
 80178a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80178a4:	681b      	ldr	r3, [r3, #0]
 80178a6:	68fa      	ldr	r2, [r7, #12]
 80178a8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80178ac:	f023 0303 	bic.w	r3, r3, #3
 80178b0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80178b2:	68fb      	ldr	r3, [r7, #12]
 80178b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80178b8:	685b      	ldr	r3, [r3, #4]
 80178ba:	68fa      	ldr	r2, [r7, #12]
 80178bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80178c0:	f043 0302 	orr.w	r3, r3, #2
 80178c4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80178c6:	2300      	movs	r3, #0
}
 80178c8:	4618      	mov	r0, r3
 80178ca:	3714      	adds	r7, #20
 80178cc:	46bd      	mov	sp, r7
 80178ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178d2:	4770      	bx	lr

080178d4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80178d4:	b480      	push	{r7}
 80178d6:	b085      	sub	sp, #20
 80178d8:	af00      	add	r7, sp, #0
 80178da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80178dc:	687b      	ldr	r3, [r7, #4]
 80178de:	695b      	ldr	r3, [r3, #20]
 80178e0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80178e2:	687b      	ldr	r3, [r7, #4]
 80178e4:	699b      	ldr	r3, [r3, #24]
 80178e6:	68fa      	ldr	r2, [r7, #12]
 80178e8:	4013      	ands	r3, r2
 80178ea:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80178ec:	68fb      	ldr	r3, [r7, #12]
}
 80178ee:	4618      	mov	r0, r3
 80178f0:	3714      	adds	r7, #20
 80178f2:	46bd      	mov	sp, r7
 80178f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178f8:	4770      	bx	lr

080178fa <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80178fa:	b480      	push	{r7}
 80178fc:	b085      	sub	sp, #20
 80178fe:	af00      	add	r7, sp, #0
 8017900:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8017902:	687b      	ldr	r3, [r7, #4]
 8017904:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8017906:	68fb      	ldr	r3, [r7, #12]
 8017908:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801790c:	699b      	ldr	r3, [r3, #24]
 801790e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8017910:	68fb      	ldr	r3, [r7, #12]
 8017912:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8017916:	69db      	ldr	r3, [r3, #28]
 8017918:	68ba      	ldr	r2, [r7, #8]
 801791a:	4013      	ands	r3, r2
 801791c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 801791e:	68bb      	ldr	r3, [r7, #8]
 8017920:	0c1b      	lsrs	r3, r3, #16
}
 8017922:	4618      	mov	r0, r3
 8017924:	3714      	adds	r7, #20
 8017926:	46bd      	mov	sp, r7
 8017928:	f85d 7b04 	ldr.w	r7, [sp], #4
 801792c:	4770      	bx	lr

0801792e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801792e:	b480      	push	{r7}
 8017930:	b085      	sub	sp, #20
 8017932:	af00      	add	r7, sp, #0
 8017934:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8017936:	687b      	ldr	r3, [r7, #4]
 8017938:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801793a:	68fb      	ldr	r3, [r7, #12]
 801793c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8017940:	699b      	ldr	r3, [r3, #24]
 8017942:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8017944:	68fb      	ldr	r3, [r7, #12]
 8017946:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801794a:	69db      	ldr	r3, [r3, #28]
 801794c:	68ba      	ldr	r2, [r7, #8]
 801794e:	4013      	ands	r3, r2
 8017950:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8017952:	68bb      	ldr	r3, [r7, #8]
 8017954:	b29b      	uxth	r3, r3
}
 8017956:	4618      	mov	r0, r3
 8017958:	3714      	adds	r7, #20
 801795a:	46bd      	mov	sp, r7
 801795c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017960:	4770      	bx	lr

08017962 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8017962:	b480      	push	{r7}
 8017964:	b085      	sub	sp, #20
 8017966:	af00      	add	r7, sp, #0
 8017968:	6078      	str	r0, [r7, #4]
 801796a:	460b      	mov	r3, r1
 801796c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801796e:	687b      	ldr	r3, [r7, #4]
 8017970:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8017972:	78fb      	ldrb	r3, [r7, #3]
 8017974:	015a      	lsls	r2, r3, #5
 8017976:	68fb      	ldr	r3, [r7, #12]
 8017978:	4413      	add	r3, r2
 801797a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801797e:	689b      	ldr	r3, [r3, #8]
 8017980:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8017982:	68fb      	ldr	r3, [r7, #12]
 8017984:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8017988:	695b      	ldr	r3, [r3, #20]
 801798a:	68ba      	ldr	r2, [r7, #8]
 801798c:	4013      	ands	r3, r2
 801798e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8017990:	68bb      	ldr	r3, [r7, #8]
}
 8017992:	4618      	mov	r0, r3
 8017994:	3714      	adds	r7, #20
 8017996:	46bd      	mov	sp, r7
 8017998:	f85d 7b04 	ldr.w	r7, [sp], #4
 801799c:	4770      	bx	lr

0801799e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801799e:	b480      	push	{r7}
 80179a0:	b087      	sub	sp, #28
 80179a2:	af00      	add	r7, sp, #0
 80179a4:	6078      	str	r0, [r7, #4]
 80179a6:	460b      	mov	r3, r1
 80179a8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80179aa:	687b      	ldr	r3, [r7, #4]
 80179ac:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80179ae:	697b      	ldr	r3, [r7, #20]
 80179b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80179b4:	691b      	ldr	r3, [r3, #16]
 80179b6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80179b8:	697b      	ldr	r3, [r7, #20]
 80179ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80179be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80179c0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80179c2:	78fb      	ldrb	r3, [r7, #3]
 80179c4:	f003 030f 	and.w	r3, r3, #15
 80179c8:	68fa      	ldr	r2, [r7, #12]
 80179ca:	fa22 f303 	lsr.w	r3, r2, r3
 80179ce:	01db      	lsls	r3, r3, #7
 80179d0:	b2db      	uxtb	r3, r3
 80179d2:	693a      	ldr	r2, [r7, #16]
 80179d4:	4313      	orrs	r3, r2
 80179d6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80179d8:	78fb      	ldrb	r3, [r7, #3]
 80179da:	015a      	lsls	r2, r3, #5
 80179dc:	697b      	ldr	r3, [r7, #20]
 80179de:	4413      	add	r3, r2
 80179e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80179e4:	689b      	ldr	r3, [r3, #8]
 80179e6:	693a      	ldr	r2, [r7, #16]
 80179e8:	4013      	ands	r3, r2
 80179ea:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80179ec:	68bb      	ldr	r3, [r7, #8]
}
 80179ee:	4618      	mov	r0, r3
 80179f0:	371c      	adds	r7, #28
 80179f2:	46bd      	mov	sp, r7
 80179f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179f8:	4770      	bx	lr

080179fa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80179fa:	b480      	push	{r7}
 80179fc:	b083      	sub	sp, #12
 80179fe:	af00      	add	r7, sp, #0
 8017a00:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8017a02:	687b      	ldr	r3, [r7, #4]
 8017a04:	695b      	ldr	r3, [r3, #20]
 8017a06:	f003 0301 	and.w	r3, r3, #1
}
 8017a0a:	4618      	mov	r0, r3
 8017a0c:	370c      	adds	r7, #12
 8017a0e:	46bd      	mov	sp, r7
 8017a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a14:	4770      	bx	lr
	...

08017a18 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8017a18:	b480      	push	{r7}
 8017a1a:	b085      	sub	sp, #20
 8017a1c:	af00      	add	r7, sp, #0
 8017a1e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8017a20:	687b      	ldr	r3, [r7, #4]
 8017a22:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8017a24:	68fb      	ldr	r3, [r7, #12]
 8017a26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017a2a:	681a      	ldr	r2, [r3, #0]
 8017a2c:	68fb      	ldr	r3, [r7, #12]
 8017a2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017a32:	4619      	mov	r1, r3
 8017a34:	4b09      	ldr	r3, [pc, #36]	; (8017a5c <USB_ActivateSetup+0x44>)
 8017a36:	4013      	ands	r3, r2
 8017a38:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8017a3a:	68fb      	ldr	r3, [r7, #12]
 8017a3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8017a40:	685b      	ldr	r3, [r3, #4]
 8017a42:	68fa      	ldr	r2, [r7, #12]
 8017a44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8017a48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8017a4c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8017a4e:	2300      	movs	r3, #0
}
 8017a50:	4618      	mov	r0, r3
 8017a52:	3714      	adds	r7, #20
 8017a54:	46bd      	mov	sp, r7
 8017a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a5a:	4770      	bx	lr
 8017a5c:	fffff800 	.word	0xfffff800

08017a60 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8017a60:	b480      	push	{r7}
 8017a62:	b087      	sub	sp, #28
 8017a64:	af00      	add	r7, sp, #0
 8017a66:	60f8      	str	r0, [r7, #12]
 8017a68:	460b      	mov	r3, r1
 8017a6a:	607a      	str	r2, [r7, #4]
 8017a6c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8017a6e:	68fb      	ldr	r3, [r7, #12]
 8017a70:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8017a72:	68fb      	ldr	r3, [r7, #12]
 8017a74:	333c      	adds	r3, #60	; 0x3c
 8017a76:	3304      	adds	r3, #4
 8017a78:	681b      	ldr	r3, [r3, #0]
 8017a7a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8017a7c:	693b      	ldr	r3, [r7, #16]
 8017a7e:	4a26      	ldr	r2, [pc, #152]	; (8017b18 <USB_EP0_OutStart+0xb8>)
 8017a80:	4293      	cmp	r3, r2
 8017a82:	d90a      	bls.n	8017a9a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8017a84:	697b      	ldr	r3, [r7, #20]
 8017a86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017a8a:	681b      	ldr	r3, [r3, #0]
 8017a8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8017a90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8017a94:	d101      	bne.n	8017a9a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8017a96:	2300      	movs	r3, #0
 8017a98:	e037      	b.n	8017b0a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8017a9a:	697b      	ldr	r3, [r7, #20]
 8017a9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017aa0:	461a      	mov	r2, r3
 8017aa2:	2300      	movs	r3, #0
 8017aa4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8017aa6:	697b      	ldr	r3, [r7, #20]
 8017aa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017aac:	691b      	ldr	r3, [r3, #16]
 8017aae:	697a      	ldr	r2, [r7, #20]
 8017ab0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8017ab4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8017ab8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8017aba:	697b      	ldr	r3, [r7, #20]
 8017abc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017ac0:	691b      	ldr	r3, [r3, #16]
 8017ac2:	697a      	ldr	r2, [r7, #20]
 8017ac4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8017ac8:	f043 0318 	orr.w	r3, r3, #24
 8017acc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8017ace:	697b      	ldr	r3, [r7, #20]
 8017ad0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017ad4:	691b      	ldr	r3, [r3, #16]
 8017ad6:	697a      	ldr	r2, [r7, #20]
 8017ad8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8017adc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8017ae0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8017ae2:	7afb      	ldrb	r3, [r7, #11]
 8017ae4:	2b01      	cmp	r3, #1
 8017ae6:	d10f      	bne.n	8017b08 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8017ae8:	697b      	ldr	r3, [r7, #20]
 8017aea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017aee:	461a      	mov	r2, r3
 8017af0:	687b      	ldr	r3, [r7, #4]
 8017af2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8017af4:	697b      	ldr	r3, [r7, #20]
 8017af6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017afa:	681b      	ldr	r3, [r3, #0]
 8017afc:	697a      	ldr	r2, [r7, #20]
 8017afe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8017b02:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8017b06:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8017b08:	2300      	movs	r3, #0
}
 8017b0a:	4618      	mov	r0, r3
 8017b0c:	371c      	adds	r7, #28
 8017b0e:	46bd      	mov	sp, r7
 8017b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b14:	4770      	bx	lr
 8017b16:	bf00      	nop
 8017b18:	4f54300a 	.word	0x4f54300a

08017b1c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8017b1c:	b480      	push	{r7}
 8017b1e:	b085      	sub	sp, #20
 8017b20:	af00      	add	r7, sp, #0
 8017b22:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8017b24:	2300      	movs	r3, #0
 8017b26:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8017b28:	68fb      	ldr	r3, [r7, #12]
 8017b2a:	3301      	adds	r3, #1
 8017b2c:	60fb      	str	r3, [r7, #12]
 8017b2e:	4a13      	ldr	r2, [pc, #76]	; (8017b7c <USB_CoreReset+0x60>)
 8017b30:	4293      	cmp	r3, r2
 8017b32:	d901      	bls.n	8017b38 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8017b34:	2303      	movs	r3, #3
 8017b36:	e01a      	b.n	8017b6e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8017b38:	687b      	ldr	r3, [r7, #4]
 8017b3a:	691b      	ldr	r3, [r3, #16]
 8017b3c:	2b00      	cmp	r3, #0
 8017b3e:	daf3      	bge.n	8017b28 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8017b40:	2300      	movs	r3, #0
 8017b42:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8017b44:	687b      	ldr	r3, [r7, #4]
 8017b46:	691b      	ldr	r3, [r3, #16]
 8017b48:	f043 0201 	orr.w	r2, r3, #1
 8017b4c:	687b      	ldr	r3, [r7, #4]
 8017b4e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8017b50:	68fb      	ldr	r3, [r7, #12]
 8017b52:	3301      	adds	r3, #1
 8017b54:	60fb      	str	r3, [r7, #12]
 8017b56:	4a09      	ldr	r2, [pc, #36]	; (8017b7c <USB_CoreReset+0x60>)
 8017b58:	4293      	cmp	r3, r2
 8017b5a:	d901      	bls.n	8017b60 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8017b5c:	2303      	movs	r3, #3
 8017b5e:	e006      	b.n	8017b6e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8017b60:	687b      	ldr	r3, [r7, #4]
 8017b62:	691b      	ldr	r3, [r3, #16]
 8017b64:	f003 0301 	and.w	r3, r3, #1
 8017b68:	2b01      	cmp	r3, #1
 8017b6a:	d0f1      	beq.n	8017b50 <USB_CoreReset+0x34>

  return HAL_OK;
 8017b6c:	2300      	movs	r3, #0
}
 8017b6e:	4618      	mov	r0, r3
 8017b70:	3714      	adds	r7, #20
 8017b72:	46bd      	mov	sp, r7
 8017b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b78:	4770      	bx	lr
 8017b7a:	bf00      	nop
 8017b7c:	00030d40 	.word	0x00030d40

08017b80 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8017b80:	b580      	push	{r7, lr}
 8017b82:	b084      	sub	sp, #16
 8017b84:	af00      	add	r7, sp, #0
 8017b86:	6078      	str	r0, [r7, #4]
 8017b88:	460b      	mov	r3, r1
 8017b8a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8017b8c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8017b90:	f002 f932 	bl	8019df8 <USBD_static_malloc>
 8017b94:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8017b96:	68fb      	ldr	r3, [r7, #12]
 8017b98:	2b00      	cmp	r3, #0
 8017b9a:	d105      	bne.n	8017ba8 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8017b9c:	687b      	ldr	r3, [r7, #4]
 8017b9e:	2200      	movs	r2, #0
 8017ba0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8017ba4:	2302      	movs	r3, #2
 8017ba6:	e066      	b.n	8017c76 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8017ba8:	687b      	ldr	r3, [r7, #4]
 8017baa:	68fa      	ldr	r2, [r7, #12]
 8017bac:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8017bb0:	687b      	ldr	r3, [r7, #4]
 8017bb2:	7c1b      	ldrb	r3, [r3, #16]
 8017bb4:	2b00      	cmp	r3, #0
 8017bb6:	d119      	bne.n	8017bec <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8017bb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8017bbc:	2202      	movs	r2, #2
 8017bbe:	2181      	movs	r1, #129	; 0x81
 8017bc0:	6878      	ldr	r0, [r7, #4]
 8017bc2:	f001 fff6 	bl	8019bb2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8017bc6:	687b      	ldr	r3, [r7, #4]
 8017bc8:	2201      	movs	r2, #1
 8017bca:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8017bcc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8017bd0:	2202      	movs	r2, #2
 8017bd2:	2101      	movs	r1, #1
 8017bd4:	6878      	ldr	r0, [r7, #4]
 8017bd6:	f001 ffec 	bl	8019bb2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8017bda:	687b      	ldr	r3, [r7, #4]
 8017bdc:	2201      	movs	r2, #1
 8017bde:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8017be2:	687b      	ldr	r3, [r7, #4]
 8017be4:	2210      	movs	r2, #16
 8017be6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8017bea:	e016      	b.n	8017c1a <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8017bec:	2340      	movs	r3, #64	; 0x40
 8017bee:	2202      	movs	r2, #2
 8017bf0:	2181      	movs	r1, #129	; 0x81
 8017bf2:	6878      	ldr	r0, [r7, #4]
 8017bf4:	f001 ffdd 	bl	8019bb2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8017bf8:	687b      	ldr	r3, [r7, #4]
 8017bfa:	2201      	movs	r2, #1
 8017bfc:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8017bfe:	2340      	movs	r3, #64	; 0x40
 8017c00:	2202      	movs	r2, #2
 8017c02:	2101      	movs	r1, #1
 8017c04:	6878      	ldr	r0, [r7, #4]
 8017c06:	f001 ffd4 	bl	8019bb2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8017c0a:	687b      	ldr	r3, [r7, #4]
 8017c0c:	2201      	movs	r2, #1
 8017c0e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8017c12:	687b      	ldr	r3, [r7, #4]
 8017c14:	2210      	movs	r2, #16
 8017c16:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8017c1a:	2308      	movs	r3, #8
 8017c1c:	2203      	movs	r2, #3
 8017c1e:	2182      	movs	r1, #130	; 0x82
 8017c20:	6878      	ldr	r0, [r7, #4]
 8017c22:	f001 ffc6 	bl	8019bb2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8017c26:	687b      	ldr	r3, [r7, #4]
 8017c28:	2201      	movs	r2, #1
 8017c2a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8017c2e:	687b      	ldr	r3, [r7, #4]
 8017c30:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8017c34:	681b      	ldr	r3, [r3, #0]
 8017c36:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8017c38:	68fb      	ldr	r3, [r7, #12]
 8017c3a:	2200      	movs	r2, #0
 8017c3c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8017c40:	68fb      	ldr	r3, [r7, #12]
 8017c42:	2200      	movs	r2, #0
 8017c44:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8017c48:	687b      	ldr	r3, [r7, #4]
 8017c4a:	7c1b      	ldrb	r3, [r3, #16]
 8017c4c:	2b00      	cmp	r3, #0
 8017c4e:	d109      	bne.n	8017c64 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8017c50:	68fb      	ldr	r3, [r7, #12]
 8017c52:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8017c56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8017c5a:	2101      	movs	r1, #1
 8017c5c:	6878      	ldr	r0, [r7, #4]
 8017c5e:	f002 f897 	bl	8019d90 <USBD_LL_PrepareReceive>
 8017c62:	e007      	b.n	8017c74 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8017c64:	68fb      	ldr	r3, [r7, #12]
 8017c66:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8017c6a:	2340      	movs	r3, #64	; 0x40
 8017c6c:	2101      	movs	r1, #1
 8017c6e:	6878      	ldr	r0, [r7, #4]
 8017c70:	f002 f88e 	bl	8019d90 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8017c74:	2300      	movs	r3, #0
}
 8017c76:	4618      	mov	r0, r3
 8017c78:	3710      	adds	r7, #16
 8017c7a:	46bd      	mov	sp, r7
 8017c7c:	bd80      	pop	{r7, pc}

08017c7e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8017c7e:	b580      	push	{r7, lr}
 8017c80:	b082      	sub	sp, #8
 8017c82:	af00      	add	r7, sp, #0
 8017c84:	6078      	str	r0, [r7, #4]
 8017c86:	460b      	mov	r3, r1
 8017c88:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8017c8a:	2181      	movs	r1, #129	; 0x81
 8017c8c:	6878      	ldr	r0, [r7, #4]
 8017c8e:	f001 ffb6 	bl	8019bfe <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8017c92:	687b      	ldr	r3, [r7, #4]
 8017c94:	2200      	movs	r2, #0
 8017c96:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8017c98:	2101      	movs	r1, #1
 8017c9a:	6878      	ldr	r0, [r7, #4]
 8017c9c:	f001 ffaf 	bl	8019bfe <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8017ca0:	687b      	ldr	r3, [r7, #4]
 8017ca2:	2200      	movs	r2, #0
 8017ca4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8017ca8:	2182      	movs	r1, #130	; 0x82
 8017caa:	6878      	ldr	r0, [r7, #4]
 8017cac:	f001 ffa7 	bl	8019bfe <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8017cb0:	687b      	ldr	r3, [r7, #4]
 8017cb2:	2200      	movs	r2, #0
 8017cb4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8017cb8:	687b      	ldr	r3, [r7, #4]
 8017cba:	2200      	movs	r2, #0
 8017cbc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8017cc0:	687b      	ldr	r3, [r7, #4]
 8017cc2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8017cc6:	2b00      	cmp	r3, #0
 8017cc8:	d00e      	beq.n	8017ce8 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8017cca:	687b      	ldr	r3, [r7, #4]
 8017ccc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8017cd0:	685b      	ldr	r3, [r3, #4]
 8017cd2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8017cd4:	687b      	ldr	r3, [r7, #4]
 8017cd6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8017cda:	4618      	mov	r0, r3
 8017cdc:	f002 f89a 	bl	8019e14 <USBD_static_free>
    pdev->pClassData = NULL;
 8017ce0:	687b      	ldr	r3, [r7, #4]
 8017ce2:	2200      	movs	r2, #0
 8017ce4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8017ce8:	2300      	movs	r3, #0
}
 8017cea:	4618      	mov	r0, r3
 8017cec:	3708      	adds	r7, #8
 8017cee:	46bd      	mov	sp, r7
 8017cf0:	bd80      	pop	{r7, pc}
	...

08017cf4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8017cf4:	b580      	push	{r7, lr}
 8017cf6:	b086      	sub	sp, #24
 8017cf8:	af00      	add	r7, sp, #0
 8017cfa:	6078      	str	r0, [r7, #4]
 8017cfc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8017cfe:	687b      	ldr	r3, [r7, #4]
 8017d00:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8017d04:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8017d06:	2300      	movs	r3, #0
 8017d08:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8017d0a:	2300      	movs	r3, #0
 8017d0c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8017d0e:	2300      	movs	r3, #0
 8017d10:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8017d12:	693b      	ldr	r3, [r7, #16]
 8017d14:	2b00      	cmp	r3, #0
 8017d16:	d101      	bne.n	8017d1c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8017d18:	2303      	movs	r3, #3
 8017d1a:	e0af      	b.n	8017e7c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8017d1c:	683b      	ldr	r3, [r7, #0]
 8017d1e:	781b      	ldrb	r3, [r3, #0]
 8017d20:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8017d24:	2b00      	cmp	r3, #0
 8017d26:	d03f      	beq.n	8017da8 <USBD_CDC_Setup+0xb4>
 8017d28:	2b20      	cmp	r3, #32
 8017d2a:	f040 809f 	bne.w	8017e6c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8017d2e:	683b      	ldr	r3, [r7, #0]
 8017d30:	88db      	ldrh	r3, [r3, #6]
 8017d32:	2b00      	cmp	r3, #0
 8017d34:	d02e      	beq.n	8017d94 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8017d36:	683b      	ldr	r3, [r7, #0]
 8017d38:	781b      	ldrb	r3, [r3, #0]
 8017d3a:	b25b      	sxtb	r3, r3
 8017d3c:	2b00      	cmp	r3, #0
 8017d3e:	da16      	bge.n	8017d6e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8017d40:	687b      	ldr	r3, [r7, #4]
 8017d42:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8017d46:	689b      	ldr	r3, [r3, #8]
 8017d48:	683a      	ldr	r2, [r7, #0]
 8017d4a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8017d4c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8017d4e:	683a      	ldr	r2, [r7, #0]
 8017d50:	88d2      	ldrh	r2, [r2, #6]
 8017d52:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8017d54:	683b      	ldr	r3, [r7, #0]
 8017d56:	88db      	ldrh	r3, [r3, #6]
 8017d58:	2b07      	cmp	r3, #7
 8017d5a:	bf28      	it	cs
 8017d5c:	2307      	movcs	r3, #7
 8017d5e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8017d60:	693b      	ldr	r3, [r7, #16]
 8017d62:	89fa      	ldrh	r2, [r7, #14]
 8017d64:	4619      	mov	r1, r3
 8017d66:	6878      	ldr	r0, [r7, #4]
 8017d68:	f001 fae9 	bl	801933e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8017d6c:	e085      	b.n	8017e7a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8017d6e:	683b      	ldr	r3, [r7, #0]
 8017d70:	785a      	ldrb	r2, [r3, #1]
 8017d72:	693b      	ldr	r3, [r7, #16]
 8017d74:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8017d78:	683b      	ldr	r3, [r7, #0]
 8017d7a:	88db      	ldrh	r3, [r3, #6]
 8017d7c:	b2da      	uxtb	r2, r3
 8017d7e:	693b      	ldr	r3, [r7, #16]
 8017d80:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8017d84:	6939      	ldr	r1, [r7, #16]
 8017d86:	683b      	ldr	r3, [r7, #0]
 8017d88:	88db      	ldrh	r3, [r3, #6]
 8017d8a:	461a      	mov	r2, r3
 8017d8c:	6878      	ldr	r0, [r7, #4]
 8017d8e:	f001 fb02 	bl	8019396 <USBD_CtlPrepareRx>
      break;
 8017d92:	e072      	b.n	8017e7a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8017d94:	687b      	ldr	r3, [r7, #4]
 8017d96:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8017d9a:	689b      	ldr	r3, [r3, #8]
 8017d9c:	683a      	ldr	r2, [r7, #0]
 8017d9e:	7850      	ldrb	r0, [r2, #1]
 8017da0:	2200      	movs	r2, #0
 8017da2:	6839      	ldr	r1, [r7, #0]
 8017da4:	4798      	blx	r3
      break;
 8017da6:	e068      	b.n	8017e7a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8017da8:	683b      	ldr	r3, [r7, #0]
 8017daa:	785b      	ldrb	r3, [r3, #1]
 8017dac:	2b0b      	cmp	r3, #11
 8017dae:	d852      	bhi.n	8017e56 <USBD_CDC_Setup+0x162>
 8017db0:	a201      	add	r2, pc, #4	; (adr r2, 8017db8 <USBD_CDC_Setup+0xc4>)
 8017db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017db6:	bf00      	nop
 8017db8:	08017de9 	.word	0x08017de9
 8017dbc:	08017e65 	.word	0x08017e65
 8017dc0:	08017e57 	.word	0x08017e57
 8017dc4:	08017e57 	.word	0x08017e57
 8017dc8:	08017e57 	.word	0x08017e57
 8017dcc:	08017e57 	.word	0x08017e57
 8017dd0:	08017e57 	.word	0x08017e57
 8017dd4:	08017e57 	.word	0x08017e57
 8017dd8:	08017e57 	.word	0x08017e57
 8017ddc:	08017e57 	.word	0x08017e57
 8017de0:	08017e13 	.word	0x08017e13
 8017de4:	08017e3d 	.word	0x08017e3d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017de8:	687b      	ldr	r3, [r7, #4]
 8017dea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017dee:	b2db      	uxtb	r3, r3
 8017df0:	2b03      	cmp	r3, #3
 8017df2:	d107      	bne.n	8017e04 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8017df4:	f107 030a 	add.w	r3, r7, #10
 8017df8:	2202      	movs	r2, #2
 8017dfa:	4619      	mov	r1, r3
 8017dfc:	6878      	ldr	r0, [r7, #4]
 8017dfe:	f001 fa9e 	bl	801933e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8017e02:	e032      	b.n	8017e6a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8017e04:	6839      	ldr	r1, [r7, #0]
 8017e06:	6878      	ldr	r0, [r7, #4]
 8017e08:	f001 fa28 	bl	801925c <USBD_CtlError>
            ret = USBD_FAIL;
 8017e0c:	2303      	movs	r3, #3
 8017e0e:	75fb      	strb	r3, [r7, #23]
          break;
 8017e10:	e02b      	b.n	8017e6a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017e12:	687b      	ldr	r3, [r7, #4]
 8017e14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017e18:	b2db      	uxtb	r3, r3
 8017e1a:	2b03      	cmp	r3, #3
 8017e1c:	d107      	bne.n	8017e2e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8017e1e:	f107 030d 	add.w	r3, r7, #13
 8017e22:	2201      	movs	r2, #1
 8017e24:	4619      	mov	r1, r3
 8017e26:	6878      	ldr	r0, [r7, #4]
 8017e28:	f001 fa89 	bl	801933e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8017e2c:	e01d      	b.n	8017e6a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8017e2e:	6839      	ldr	r1, [r7, #0]
 8017e30:	6878      	ldr	r0, [r7, #4]
 8017e32:	f001 fa13 	bl	801925c <USBD_CtlError>
            ret = USBD_FAIL;
 8017e36:	2303      	movs	r3, #3
 8017e38:	75fb      	strb	r3, [r7, #23]
          break;
 8017e3a:	e016      	b.n	8017e6a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8017e3c:	687b      	ldr	r3, [r7, #4]
 8017e3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017e42:	b2db      	uxtb	r3, r3
 8017e44:	2b03      	cmp	r3, #3
 8017e46:	d00f      	beq.n	8017e68 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8017e48:	6839      	ldr	r1, [r7, #0]
 8017e4a:	6878      	ldr	r0, [r7, #4]
 8017e4c:	f001 fa06 	bl	801925c <USBD_CtlError>
            ret = USBD_FAIL;
 8017e50:	2303      	movs	r3, #3
 8017e52:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8017e54:	e008      	b.n	8017e68 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8017e56:	6839      	ldr	r1, [r7, #0]
 8017e58:	6878      	ldr	r0, [r7, #4]
 8017e5a:	f001 f9ff 	bl	801925c <USBD_CtlError>
          ret = USBD_FAIL;
 8017e5e:	2303      	movs	r3, #3
 8017e60:	75fb      	strb	r3, [r7, #23]
          break;
 8017e62:	e002      	b.n	8017e6a <USBD_CDC_Setup+0x176>
          break;
 8017e64:	bf00      	nop
 8017e66:	e008      	b.n	8017e7a <USBD_CDC_Setup+0x186>
          break;
 8017e68:	bf00      	nop
      }
      break;
 8017e6a:	e006      	b.n	8017e7a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8017e6c:	6839      	ldr	r1, [r7, #0]
 8017e6e:	6878      	ldr	r0, [r7, #4]
 8017e70:	f001 f9f4 	bl	801925c <USBD_CtlError>
      ret = USBD_FAIL;
 8017e74:	2303      	movs	r3, #3
 8017e76:	75fb      	strb	r3, [r7, #23]
      break;
 8017e78:	bf00      	nop
  }

  return (uint8_t)ret;
 8017e7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8017e7c:	4618      	mov	r0, r3
 8017e7e:	3718      	adds	r7, #24
 8017e80:	46bd      	mov	sp, r7
 8017e82:	bd80      	pop	{r7, pc}

08017e84 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8017e84:	b580      	push	{r7, lr}
 8017e86:	b084      	sub	sp, #16
 8017e88:	af00      	add	r7, sp, #0
 8017e8a:	6078      	str	r0, [r7, #4]
 8017e8c:	460b      	mov	r3, r1
 8017e8e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8017e90:	687b      	ldr	r3, [r7, #4]
 8017e92:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8017e96:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8017e98:	687b      	ldr	r3, [r7, #4]
 8017e9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8017e9e:	2b00      	cmp	r3, #0
 8017ea0:	d101      	bne.n	8017ea6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8017ea2:	2303      	movs	r3, #3
 8017ea4:	e04f      	b.n	8017f46 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8017ea6:	687b      	ldr	r3, [r7, #4]
 8017ea8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8017eac:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8017eae:	78fa      	ldrb	r2, [r7, #3]
 8017eb0:	6879      	ldr	r1, [r7, #4]
 8017eb2:	4613      	mov	r3, r2
 8017eb4:	009b      	lsls	r3, r3, #2
 8017eb6:	4413      	add	r3, r2
 8017eb8:	009b      	lsls	r3, r3, #2
 8017eba:	440b      	add	r3, r1
 8017ebc:	3318      	adds	r3, #24
 8017ebe:	681b      	ldr	r3, [r3, #0]
 8017ec0:	2b00      	cmp	r3, #0
 8017ec2:	d029      	beq.n	8017f18 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8017ec4:	78fa      	ldrb	r2, [r7, #3]
 8017ec6:	6879      	ldr	r1, [r7, #4]
 8017ec8:	4613      	mov	r3, r2
 8017eca:	009b      	lsls	r3, r3, #2
 8017ecc:	4413      	add	r3, r2
 8017ece:	009b      	lsls	r3, r3, #2
 8017ed0:	440b      	add	r3, r1
 8017ed2:	3318      	adds	r3, #24
 8017ed4:	681a      	ldr	r2, [r3, #0]
 8017ed6:	78f9      	ldrb	r1, [r7, #3]
 8017ed8:	68f8      	ldr	r0, [r7, #12]
 8017eda:	460b      	mov	r3, r1
 8017edc:	00db      	lsls	r3, r3, #3
 8017ede:	1a5b      	subs	r3, r3, r1
 8017ee0:	009b      	lsls	r3, r3, #2
 8017ee2:	4403      	add	r3, r0
 8017ee4:	3344      	adds	r3, #68	; 0x44
 8017ee6:	681b      	ldr	r3, [r3, #0]
 8017ee8:	fbb2 f1f3 	udiv	r1, r2, r3
 8017eec:	fb01 f303 	mul.w	r3, r1, r3
 8017ef0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8017ef2:	2b00      	cmp	r3, #0
 8017ef4:	d110      	bne.n	8017f18 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8017ef6:	78fa      	ldrb	r2, [r7, #3]
 8017ef8:	6879      	ldr	r1, [r7, #4]
 8017efa:	4613      	mov	r3, r2
 8017efc:	009b      	lsls	r3, r3, #2
 8017efe:	4413      	add	r3, r2
 8017f00:	009b      	lsls	r3, r3, #2
 8017f02:	440b      	add	r3, r1
 8017f04:	3318      	adds	r3, #24
 8017f06:	2200      	movs	r2, #0
 8017f08:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8017f0a:	78f9      	ldrb	r1, [r7, #3]
 8017f0c:	2300      	movs	r3, #0
 8017f0e:	2200      	movs	r2, #0
 8017f10:	6878      	ldr	r0, [r7, #4]
 8017f12:	f001 ff1c 	bl	8019d4e <USBD_LL_Transmit>
 8017f16:	e015      	b.n	8017f44 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8017f18:	68bb      	ldr	r3, [r7, #8]
 8017f1a:	2200      	movs	r2, #0
 8017f1c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8017f20:	687b      	ldr	r3, [r7, #4]
 8017f22:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8017f26:	691b      	ldr	r3, [r3, #16]
 8017f28:	2b00      	cmp	r3, #0
 8017f2a:	d00b      	beq.n	8017f44 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8017f2c:	687b      	ldr	r3, [r7, #4]
 8017f2e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8017f32:	691b      	ldr	r3, [r3, #16]
 8017f34:	68ba      	ldr	r2, [r7, #8]
 8017f36:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8017f3a:	68ba      	ldr	r2, [r7, #8]
 8017f3c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8017f40:	78fa      	ldrb	r2, [r7, #3]
 8017f42:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8017f44:	2300      	movs	r3, #0
}
 8017f46:	4618      	mov	r0, r3
 8017f48:	3710      	adds	r7, #16
 8017f4a:	46bd      	mov	sp, r7
 8017f4c:	bd80      	pop	{r7, pc}

08017f4e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8017f4e:	b580      	push	{r7, lr}
 8017f50:	b084      	sub	sp, #16
 8017f52:	af00      	add	r7, sp, #0
 8017f54:	6078      	str	r0, [r7, #4]
 8017f56:	460b      	mov	r3, r1
 8017f58:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8017f5a:	687b      	ldr	r3, [r7, #4]
 8017f5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8017f60:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8017f62:	687b      	ldr	r3, [r7, #4]
 8017f64:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8017f68:	2b00      	cmp	r3, #0
 8017f6a:	d101      	bne.n	8017f70 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8017f6c:	2303      	movs	r3, #3
 8017f6e:	e015      	b.n	8017f9c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8017f70:	78fb      	ldrb	r3, [r7, #3]
 8017f72:	4619      	mov	r1, r3
 8017f74:	6878      	ldr	r0, [r7, #4]
 8017f76:	f001 ff2c 	bl	8019dd2 <USBD_LL_GetRxDataSize>
 8017f7a:	4602      	mov	r2, r0
 8017f7c:	68fb      	ldr	r3, [r7, #12]
 8017f7e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8017f82:	687b      	ldr	r3, [r7, #4]
 8017f84:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8017f88:	68db      	ldr	r3, [r3, #12]
 8017f8a:	68fa      	ldr	r2, [r7, #12]
 8017f8c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8017f90:	68fa      	ldr	r2, [r7, #12]
 8017f92:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8017f96:	4611      	mov	r1, r2
 8017f98:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8017f9a:	2300      	movs	r3, #0
}
 8017f9c:	4618      	mov	r0, r3
 8017f9e:	3710      	adds	r7, #16
 8017fa0:	46bd      	mov	sp, r7
 8017fa2:	bd80      	pop	{r7, pc}

08017fa4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8017fa4:	b580      	push	{r7, lr}
 8017fa6:	b084      	sub	sp, #16
 8017fa8:	af00      	add	r7, sp, #0
 8017faa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8017fac:	687b      	ldr	r3, [r7, #4]
 8017fae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8017fb2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8017fb4:	68fb      	ldr	r3, [r7, #12]
 8017fb6:	2b00      	cmp	r3, #0
 8017fb8:	d101      	bne.n	8017fbe <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8017fba:	2303      	movs	r3, #3
 8017fbc:	e01b      	b.n	8017ff6 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8017fbe:	687b      	ldr	r3, [r7, #4]
 8017fc0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8017fc4:	2b00      	cmp	r3, #0
 8017fc6:	d015      	beq.n	8017ff4 <USBD_CDC_EP0_RxReady+0x50>
 8017fc8:	68fb      	ldr	r3, [r7, #12]
 8017fca:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8017fce:	2bff      	cmp	r3, #255	; 0xff
 8017fd0:	d010      	beq.n	8017ff4 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8017fd2:	687b      	ldr	r3, [r7, #4]
 8017fd4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8017fd8:	689b      	ldr	r3, [r3, #8]
 8017fda:	68fa      	ldr	r2, [r7, #12]
 8017fdc:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8017fe0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8017fe2:	68fa      	ldr	r2, [r7, #12]
 8017fe4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8017fe8:	b292      	uxth	r2, r2
 8017fea:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8017fec:	68fb      	ldr	r3, [r7, #12]
 8017fee:	22ff      	movs	r2, #255	; 0xff
 8017ff0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8017ff4:	2300      	movs	r3, #0
}
 8017ff6:	4618      	mov	r0, r3
 8017ff8:	3710      	adds	r7, #16
 8017ffa:	46bd      	mov	sp, r7
 8017ffc:	bd80      	pop	{r7, pc}
	...

08018000 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8018000:	b480      	push	{r7}
 8018002:	b083      	sub	sp, #12
 8018004:	af00      	add	r7, sp, #0
 8018006:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8018008:	687b      	ldr	r3, [r7, #4]
 801800a:	2243      	movs	r2, #67	; 0x43
 801800c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 801800e:	4b03      	ldr	r3, [pc, #12]	; (801801c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8018010:	4618      	mov	r0, r3
 8018012:	370c      	adds	r7, #12
 8018014:	46bd      	mov	sp, r7
 8018016:	f85d 7b04 	ldr.w	r7, [sp], #4
 801801a:	4770      	bx	lr
 801801c:	24000098 	.word	0x24000098

08018020 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8018020:	b480      	push	{r7}
 8018022:	b083      	sub	sp, #12
 8018024:	af00      	add	r7, sp, #0
 8018026:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8018028:	687b      	ldr	r3, [r7, #4]
 801802a:	2243      	movs	r2, #67	; 0x43
 801802c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 801802e:	4b03      	ldr	r3, [pc, #12]	; (801803c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8018030:	4618      	mov	r0, r3
 8018032:	370c      	adds	r7, #12
 8018034:	46bd      	mov	sp, r7
 8018036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801803a:	4770      	bx	lr
 801803c:	24000054 	.word	0x24000054

08018040 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8018040:	b480      	push	{r7}
 8018042:	b083      	sub	sp, #12
 8018044:	af00      	add	r7, sp, #0
 8018046:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8018048:	687b      	ldr	r3, [r7, #4]
 801804a:	2243      	movs	r2, #67	; 0x43
 801804c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 801804e:	4b03      	ldr	r3, [pc, #12]	; (801805c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8018050:	4618      	mov	r0, r3
 8018052:	370c      	adds	r7, #12
 8018054:	46bd      	mov	sp, r7
 8018056:	f85d 7b04 	ldr.w	r7, [sp], #4
 801805a:	4770      	bx	lr
 801805c:	240000dc 	.word	0x240000dc

08018060 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8018060:	b480      	push	{r7}
 8018062:	b083      	sub	sp, #12
 8018064:	af00      	add	r7, sp, #0
 8018066:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8018068:	687b      	ldr	r3, [r7, #4]
 801806a:	220a      	movs	r2, #10
 801806c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 801806e:	4b03      	ldr	r3, [pc, #12]	; (801807c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8018070:	4618      	mov	r0, r3
 8018072:	370c      	adds	r7, #12
 8018074:	46bd      	mov	sp, r7
 8018076:	f85d 7b04 	ldr.w	r7, [sp], #4
 801807a:	4770      	bx	lr
 801807c:	24000010 	.word	0x24000010

08018080 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8018080:	b480      	push	{r7}
 8018082:	b083      	sub	sp, #12
 8018084:	af00      	add	r7, sp, #0
 8018086:	6078      	str	r0, [r7, #4]
 8018088:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801808a:	683b      	ldr	r3, [r7, #0]
 801808c:	2b00      	cmp	r3, #0
 801808e:	d101      	bne.n	8018094 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8018090:	2303      	movs	r3, #3
 8018092:	e004      	b.n	801809e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8018094:	687b      	ldr	r3, [r7, #4]
 8018096:	683a      	ldr	r2, [r7, #0]
 8018098:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 801809c:	2300      	movs	r3, #0
}
 801809e:	4618      	mov	r0, r3
 80180a0:	370c      	adds	r7, #12
 80180a2:	46bd      	mov	sp, r7
 80180a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180a8:	4770      	bx	lr

080180aa <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80180aa:	b480      	push	{r7}
 80180ac:	b087      	sub	sp, #28
 80180ae:	af00      	add	r7, sp, #0
 80180b0:	60f8      	str	r0, [r7, #12]
 80180b2:	60b9      	str	r1, [r7, #8]
 80180b4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80180b6:	68fb      	ldr	r3, [r7, #12]
 80180b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80180bc:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80180be:	697b      	ldr	r3, [r7, #20]
 80180c0:	2b00      	cmp	r3, #0
 80180c2:	d101      	bne.n	80180c8 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80180c4:	2303      	movs	r3, #3
 80180c6:	e008      	b.n	80180da <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80180c8:	697b      	ldr	r3, [r7, #20]
 80180ca:	68ba      	ldr	r2, [r7, #8]
 80180cc:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80180d0:	697b      	ldr	r3, [r7, #20]
 80180d2:	687a      	ldr	r2, [r7, #4]
 80180d4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80180d8:	2300      	movs	r3, #0
}
 80180da:	4618      	mov	r0, r3
 80180dc:	371c      	adds	r7, #28
 80180de:	46bd      	mov	sp, r7
 80180e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180e4:	4770      	bx	lr

080180e6 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80180e6:	b480      	push	{r7}
 80180e8:	b085      	sub	sp, #20
 80180ea:	af00      	add	r7, sp, #0
 80180ec:	6078      	str	r0, [r7, #4]
 80180ee:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80180f0:	687b      	ldr	r3, [r7, #4]
 80180f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80180f6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80180f8:	68fb      	ldr	r3, [r7, #12]
 80180fa:	2b00      	cmp	r3, #0
 80180fc:	d101      	bne.n	8018102 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80180fe:	2303      	movs	r3, #3
 8018100:	e004      	b.n	801810c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8018102:	68fb      	ldr	r3, [r7, #12]
 8018104:	683a      	ldr	r2, [r7, #0]
 8018106:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 801810a:	2300      	movs	r3, #0
}
 801810c:	4618      	mov	r0, r3
 801810e:	3714      	adds	r7, #20
 8018110:	46bd      	mov	sp, r7
 8018112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018116:	4770      	bx	lr

08018118 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8018118:	b580      	push	{r7, lr}
 801811a:	b084      	sub	sp, #16
 801811c:	af00      	add	r7, sp, #0
 801811e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8018120:	687b      	ldr	r3, [r7, #4]
 8018122:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8018126:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8018128:	687b      	ldr	r3, [r7, #4]
 801812a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801812e:	2b00      	cmp	r3, #0
 8018130:	d101      	bne.n	8018136 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8018132:	2303      	movs	r3, #3
 8018134:	e016      	b.n	8018164 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8018136:	687b      	ldr	r3, [r7, #4]
 8018138:	7c1b      	ldrb	r3, [r3, #16]
 801813a:	2b00      	cmp	r3, #0
 801813c:	d109      	bne.n	8018152 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801813e:	68fb      	ldr	r3, [r7, #12]
 8018140:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8018144:	f44f 7300 	mov.w	r3, #512	; 0x200
 8018148:	2101      	movs	r1, #1
 801814a:	6878      	ldr	r0, [r7, #4]
 801814c:	f001 fe20 	bl	8019d90 <USBD_LL_PrepareReceive>
 8018150:	e007      	b.n	8018162 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8018152:	68fb      	ldr	r3, [r7, #12]
 8018154:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8018158:	2340      	movs	r3, #64	; 0x40
 801815a:	2101      	movs	r1, #1
 801815c:	6878      	ldr	r0, [r7, #4]
 801815e:	f001 fe17 	bl	8019d90 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8018162:	2300      	movs	r3, #0
}
 8018164:	4618      	mov	r0, r3
 8018166:	3710      	adds	r7, #16
 8018168:	46bd      	mov	sp, r7
 801816a:	bd80      	pop	{r7, pc}

0801816c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801816c:	b580      	push	{r7, lr}
 801816e:	b086      	sub	sp, #24
 8018170:	af00      	add	r7, sp, #0
 8018172:	60f8      	str	r0, [r7, #12]
 8018174:	60b9      	str	r1, [r7, #8]
 8018176:	4613      	mov	r3, r2
 8018178:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801817a:	68fb      	ldr	r3, [r7, #12]
 801817c:	2b00      	cmp	r3, #0
 801817e:	d101      	bne.n	8018184 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8018180:	2303      	movs	r3, #3
 8018182:	e01f      	b.n	80181c4 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8018184:	68fb      	ldr	r3, [r7, #12]
 8018186:	2200      	movs	r2, #0
 8018188:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 801818c:	68fb      	ldr	r3, [r7, #12]
 801818e:	2200      	movs	r2, #0
 8018190:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8018194:	68fb      	ldr	r3, [r7, #12]
 8018196:	2200      	movs	r2, #0
 8018198:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801819c:	68bb      	ldr	r3, [r7, #8]
 801819e:	2b00      	cmp	r3, #0
 80181a0:	d003      	beq.n	80181aa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80181a2:	68fb      	ldr	r3, [r7, #12]
 80181a4:	68ba      	ldr	r2, [r7, #8]
 80181a6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80181aa:	68fb      	ldr	r3, [r7, #12]
 80181ac:	2201      	movs	r2, #1
 80181ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80181b2:	68fb      	ldr	r3, [r7, #12]
 80181b4:	79fa      	ldrb	r2, [r7, #7]
 80181b6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80181b8:	68f8      	ldr	r0, [r7, #12]
 80181ba:	f001 fc8f 	bl	8019adc <USBD_LL_Init>
 80181be:	4603      	mov	r3, r0
 80181c0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80181c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80181c4:	4618      	mov	r0, r3
 80181c6:	3718      	adds	r7, #24
 80181c8:	46bd      	mov	sp, r7
 80181ca:	bd80      	pop	{r7, pc}

080181cc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80181cc:	b580      	push	{r7, lr}
 80181ce:	b084      	sub	sp, #16
 80181d0:	af00      	add	r7, sp, #0
 80181d2:	6078      	str	r0, [r7, #4]
 80181d4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80181d6:	2300      	movs	r3, #0
 80181d8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80181da:	683b      	ldr	r3, [r7, #0]
 80181dc:	2b00      	cmp	r3, #0
 80181de:	d101      	bne.n	80181e4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80181e0:	2303      	movs	r3, #3
 80181e2:	e016      	b.n	8018212 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80181e4:	687b      	ldr	r3, [r7, #4]
 80181e6:	683a      	ldr	r2, [r7, #0]
 80181e8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80181ec:	687b      	ldr	r3, [r7, #4]
 80181ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80181f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80181f4:	2b00      	cmp	r3, #0
 80181f6:	d00b      	beq.n	8018210 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80181f8:	687b      	ldr	r3, [r7, #4]
 80181fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80181fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018200:	f107 020e 	add.w	r2, r7, #14
 8018204:	4610      	mov	r0, r2
 8018206:	4798      	blx	r3
 8018208:	4602      	mov	r2, r0
 801820a:	687b      	ldr	r3, [r7, #4]
 801820c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8018210:	2300      	movs	r3, #0
}
 8018212:	4618      	mov	r0, r3
 8018214:	3710      	adds	r7, #16
 8018216:	46bd      	mov	sp, r7
 8018218:	bd80      	pop	{r7, pc}

0801821a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 801821a:	b580      	push	{r7, lr}
 801821c:	b082      	sub	sp, #8
 801821e:	af00      	add	r7, sp, #0
 8018220:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8018222:	6878      	ldr	r0, [r7, #4]
 8018224:	f001 fcaa 	bl	8019b7c <USBD_LL_Start>
 8018228:	4603      	mov	r3, r0
}
 801822a:	4618      	mov	r0, r3
 801822c:	3708      	adds	r7, #8
 801822e:	46bd      	mov	sp, r7
 8018230:	bd80      	pop	{r7, pc}

08018232 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8018232:	b480      	push	{r7}
 8018234:	b083      	sub	sp, #12
 8018236:	af00      	add	r7, sp, #0
 8018238:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801823a:	2300      	movs	r3, #0
}
 801823c:	4618      	mov	r0, r3
 801823e:	370c      	adds	r7, #12
 8018240:	46bd      	mov	sp, r7
 8018242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018246:	4770      	bx	lr

08018248 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8018248:	b580      	push	{r7, lr}
 801824a:	b084      	sub	sp, #16
 801824c:	af00      	add	r7, sp, #0
 801824e:	6078      	str	r0, [r7, #4]
 8018250:	460b      	mov	r3, r1
 8018252:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8018254:	2303      	movs	r3, #3
 8018256:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8018258:	687b      	ldr	r3, [r7, #4]
 801825a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801825e:	2b00      	cmp	r3, #0
 8018260:	d009      	beq.n	8018276 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8018262:	687b      	ldr	r3, [r7, #4]
 8018264:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018268:	681b      	ldr	r3, [r3, #0]
 801826a:	78fa      	ldrb	r2, [r7, #3]
 801826c:	4611      	mov	r1, r2
 801826e:	6878      	ldr	r0, [r7, #4]
 8018270:	4798      	blx	r3
 8018272:	4603      	mov	r3, r0
 8018274:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8018276:	7bfb      	ldrb	r3, [r7, #15]
}
 8018278:	4618      	mov	r0, r3
 801827a:	3710      	adds	r7, #16
 801827c:	46bd      	mov	sp, r7
 801827e:	bd80      	pop	{r7, pc}

08018280 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8018280:	b580      	push	{r7, lr}
 8018282:	b082      	sub	sp, #8
 8018284:	af00      	add	r7, sp, #0
 8018286:	6078      	str	r0, [r7, #4]
 8018288:	460b      	mov	r3, r1
 801828a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 801828c:	687b      	ldr	r3, [r7, #4]
 801828e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018292:	2b00      	cmp	r3, #0
 8018294:	d007      	beq.n	80182a6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8018296:	687b      	ldr	r3, [r7, #4]
 8018298:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801829c:	685b      	ldr	r3, [r3, #4]
 801829e:	78fa      	ldrb	r2, [r7, #3]
 80182a0:	4611      	mov	r1, r2
 80182a2:	6878      	ldr	r0, [r7, #4]
 80182a4:	4798      	blx	r3
  }

  return USBD_OK;
 80182a6:	2300      	movs	r3, #0
}
 80182a8:	4618      	mov	r0, r3
 80182aa:	3708      	adds	r7, #8
 80182ac:	46bd      	mov	sp, r7
 80182ae:	bd80      	pop	{r7, pc}

080182b0 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80182b0:	b580      	push	{r7, lr}
 80182b2:	b084      	sub	sp, #16
 80182b4:	af00      	add	r7, sp, #0
 80182b6:	6078      	str	r0, [r7, #4]
 80182b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80182ba:	687b      	ldr	r3, [r7, #4]
 80182bc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80182c0:	6839      	ldr	r1, [r7, #0]
 80182c2:	4618      	mov	r0, r3
 80182c4:	f000 ff90 	bl	80191e8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80182c8:	687b      	ldr	r3, [r7, #4]
 80182ca:	2201      	movs	r2, #1
 80182cc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80182d0:	687b      	ldr	r3, [r7, #4]
 80182d2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80182d6:	461a      	mov	r2, r3
 80182d8:	687b      	ldr	r3, [r7, #4]
 80182da:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80182de:	687b      	ldr	r3, [r7, #4]
 80182e0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80182e4:	f003 031f 	and.w	r3, r3, #31
 80182e8:	2b02      	cmp	r3, #2
 80182ea:	d01a      	beq.n	8018322 <USBD_LL_SetupStage+0x72>
 80182ec:	2b02      	cmp	r3, #2
 80182ee:	d822      	bhi.n	8018336 <USBD_LL_SetupStage+0x86>
 80182f0:	2b00      	cmp	r3, #0
 80182f2:	d002      	beq.n	80182fa <USBD_LL_SetupStage+0x4a>
 80182f4:	2b01      	cmp	r3, #1
 80182f6:	d00a      	beq.n	801830e <USBD_LL_SetupStage+0x5e>
 80182f8:	e01d      	b.n	8018336 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80182fa:	687b      	ldr	r3, [r7, #4]
 80182fc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8018300:	4619      	mov	r1, r3
 8018302:	6878      	ldr	r0, [r7, #4]
 8018304:	f000 fa62 	bl	80187cc <USBD_StdDevReq>
 8018308:	4603      	mov	r3, r0
 801830a:	73fb      	strb	r3, [r7, #15]
      break;
 801830c:	e020      	b.n	8018350 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 801830e:	687b      	ldr	r3, [r7, #4]
 8018310:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8018314:	4619      	mov	r1, r3
 8018316:	6878      	ldr	r0, [r7, #4]
 8018318:	f000 fac6 	bl	80188a8 <USBD_StdItfReq>
 801831c:	4603      	mov	r3, r0
 801831e:	73fb      	strb	r3, [r7, #15]
      break;
 8018320:	e016      	b.n	8018350 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8018322:	687b      	ldr	r3, [r7, #4]
 8018324:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8018328:	4619      	mov	r1, r3
 801832a:	6878      	ldr	r0, [r7, #4]
 801832c:	f000 fb05 	bl	801893a <USBD_StdEPReq>
 8018330:	4603      	mov	r3, r0
 8018332:	73fb      	strb	r3, [r7, #15]
      break;
 8018334:	e00c      	b.n	8018350 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8018336:	687b      	ldr	r3, [r7, #4]
 8018338:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801833c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8018340:	b2db      	uxtb	r3, r3
 8018342:	4619      	mov	r1, r3
 8018344:	6878      	ldr	r0, [r7, #4]
 8018346:	f001 fc79 	bl	8019c3c <USBD_LL_StallEP>
 801834a:	4603      	mov	r3, r0
 801834c:	73fb      	strb	r3, [r7, #15]
      break;
 801834e:	bf00      	nop
  }

  return ret;
 8018350:	7bfb      	ldrb	r3, [r7, #15]
}
 8018352:	4618      	mov	r0, r3
 8018354:	3710      	adds	r7, #16
 8018356:	46bd      	mov	sp, r7
 8018358:	bd80      	pop	{r7, pc}

0801835a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801835a:	b580      	push	{r7, lr}
 801835c:	b086      	sub	sp, #24
 801835e:	af00      	add	r7, sp, #0
 8018360:	60f8      	str	r0, [r7, #12]
 8018362:	460b      	mov	r3, r1
 8018364:	607a      	str	r2, [r7, #4]
 8018366:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8018368:	7afb      	ldrb	r3, [r7, #11]
 801836a:	2b00      	cmp	r3, #0
 801836c:	d138      	bne.n	80183e0 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 801836e:	68fb      	ldr	r3, [r7, #12]
 8018370:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8018374:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8018376:	68fb      	ldr	r3, [r7, #12]
 8018378:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801837c:	2b03      	cmp	r3, #3
 801837e:	d14a      	bne.n	8018416 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8018380:	693b      	ldr	r3, [r7, #16]
 8018382:	689a      	ldr	r2, [r3, #8]
 8018384:	693b      	ldr	r3, [r7, #16]
 8018386:	68db      	ldr	r3, [r3, #12]
 8018388:	429a      	cmp	r2, r3
 801838a:	d913      	bls.n	80183b4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801838c:	693b      	ldr	r3, [r7, #16]
 801838e:	689a      	ldr	r2, [r3, #8]
 8018390:	693b      	ldr	r3, [r7, #16]
 8018392:	68db      	ldr	r3, [r3, #12]
 8018394:	1ad2      	subs	r2, r2, r3
 8018396:	693b      	ldr	r3, [r7, #16]
 8018398:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801839a:	693b      	ldr	r3, [r7, #16]
 801839c:	68da      	ldr	r2, [r3, #12]
 801839e:	693b      	ldr	r3, [r7, #16]
 80183a0:	689b      	ldr	r3, [r3, #8]
 80183a2:	4293      	cmp	r3, r2
 80183a4:	bf28      	it	cs
 80183a6:	4613      	movcs	r3, r2
 80183a8:	461a      	mov	r2, r3
 80183aa:	6879      	ldr	r1, [r7, #4]
 80183ac:	68f8      	ldr	r0, [r7, #12]
 80183ae:	f001 f80f 	bl	80193d0 <USBD_CtlContinueRx>
 80183b2:	e030      	b.n	8018416 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80183b4:	68fb      	ldr	r3, [r7, #12]
 80183b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80183ba:	b2db      	uxtb	r3, r3
 80183bc:	2b03      	cmp	r3, #3
 80183be:	d10b      	bne.n	80183d8 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80183c0:	68fb      	ldr	r3, [r7, #12]
 80183c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80183c6:	691b      	ldr	r3, [r3, #16]
 80183c8:	2b00      	cmp	r3, #0
 80183ca:	d005      	beq.n	80183d8 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80183cc:	68fb      	ldr	r3, [r7, #12]
 80183ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80183d2:	691b      	ldr	r3, [r3, #16]
 80183d4:	68f8      	ldr	r0, [r7, #12]
 80183d6:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80183d8:	68f8      	ldr	r0, [r7, #12]
 80183da:	f001 f80a 	bl	80193f2 <USBD_CtlSendStatus>
 80183de:	e01a      	b.n	8018416 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80183e0:	68fb      	ldr	r3, [r7, #12]
 80183e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80183e6:	b2db      	uxtb	r3, r3
 80183e8:	2b03      	cmp	r3, #3
 80183ea:	d114      	bne.n	8018416 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80183ec:	68fb      	ldr	r3, [r7, #12]
 80183ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80183f2:	699b      	ldr	r3, [r3, #24]
 80183f4:	2b00      	cmp	r3, #0
 80183f6:	d00e      	beq.n	8018416 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80183f8:	68fb      	ldr	r3, [r7, #12]
 80183fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80183fe:	699b      	ldr	r3, [r3, #24]
 8018400:	7afa      	ldrb	r2, [r7, #11]
 8018402:	4611      	mov	r1, r2
 8018404:	68f8      	ldr	r0, [r7, #12]
 8018406:	4798      	blx	r3
 8018408:	4603      	mov	r3, r0
 801840a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 801840c:	7dfb      	ldrb	r3, [r7, #23]
 801840e:	2b00      	cmp	r3, #0
 8018410:	d001      	beq.n	8018416 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8018412:	7dfb      	ldrb	r3, [r7, #23]
 8018414:	e000      	b.n	8018418 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8018416:	2300      	movs	r3, #0
}
 8018418:	4618      	mov	r0, r3
 801841a:	3718      	adds	r7, #24
 801841c:	46bd      	mov	sp, r7
 801841e:	bd80      	pop	{r7, pc}

08018420 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8018420:	b580      	push	{r7, lr}
 8018422:	b086      	sub	sp, #24
 8018424:	af00      	add	r7, sp, #0
 8018426:	60f8      	str	r0, [r7, #12]
 8018428:	460b      	mov	r3, r1
 801842a:	607a      	str	r2, [r7, #4]
 801842c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 801842e:	7afb      	ldrb	r3, [r7, #11]
 8018430:	2b00      	cmp	r3, #0
 8018432:	d16b      	bne.n	801850c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8018434:	68fb      	ldr	r3, [r7, #12]
 8018436:	3314      	adds	r3, #20
 8018438:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801843a:	68fb      	ldr	r3, [r7, #12]
 801843c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8018440:	2b02      	cmp	r3, #2
 8018442:	d156      	bne.n	80184f2 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8018444:	693b      	ldr	r3, [r7, #16]
 8018446:	689a      	ldr	r2, [r3, #8]
 8018448:	693b      	ldr	r3, [r7, #16]
 801844a:	68db      	ldr	r3, [r3, #12]
 801844c:	429a      	cmp	r2, r3
 801844e:	d914      	bls.n	801847a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8018450:	693b      	ldr	r3, [r7, #16]
 8018452:	689a      	ldr	r2, [r3, #8]
 8018454:	693b      	ldr	r3, [r7, #16]
 8018456:	68db      	ldr	r3, [r3, #12]
 8018458:	1ad2      	subs	r2, r2, r3
 801845a:	693b      	ldr	r3, [r7, #16]
 801845c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 801845e:	693b      	ldr	r3, [r7, #16]
 8018460:	689b      	ldr	r3, [r3, #8]
 8018462:	461a      	mov	r2, r3
 8018464:	6879      	ldr	r1, [r7, #4]
 8018466:	68f8      	ldr	r0, [r7, #12]
 8018468:	f000 ff84 	bl	8019374 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801846c:	2300      	movs	r3, #0
 801846e:	2200      	movs	r2, #0
 8018470:	2100      	movs	r1, #0
 8018472:	68f8      	ldr	r0, [r7, #12]
 8018474:	f001 fc8c 	bl	8019d90 <USBD_LL_PrepareReceive>
 8018478:	e03b      	b.n	80184f2 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 801847a:	693b      	ldr	r3, [r7, #16]
 801847c:	68da      	ldr	r2, [r3, #12]
 801847e:	693b      	ldr	r3, [r7, #16]
 8018480:	689b      	ldr	r3, [r3, #8]
 8018482:	429a      	cmp	r2, r3
 8018484:	d11c      	bne.n	80184c0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8018486:	693b      	ldr	r3, [r7, #16]
 8018488:	685a      	ldr	r2, [r3, #4]
 801848a:	693b      	ldr	r3, [r7, #16]
 801848c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 801848e:	429a      	cmp	r2, r3
 8018490:	d316      	bcc.n	80184c0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8018492:	693b      	ldr	r3, [r7, #16]
 8018494:	685a      	ldr	r2, [r3, #4]
 8018496:	68fb      	ldr	r3, [r7, #12]
 8018498:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 801849c:	429a      	cmp	r2, r3
 801849e:	d20f      	bcs.n	80184c0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80184a0:	2200      	movs	r2, #0
 80184a2:	2100      	movs	r1, #0
 80184a4:	68f8      	ldr	r0, [r7, #12]
 80184a6:	f000 ff65 	bl	8019374 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80184aa:	68fb      	ldr	r3, [r7, #12]
 80184ac:	2200      	movs	r2, #0
 80184ae:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80184b2:	2300      	movs	r3, #0
 80184b4:	2200      	movs	r2, #0
 80184b6:	2100      	movs	r1, #0
 80184b8:	68f8      	ldr	r0, [r7, #12]
 80184ba:	f001 fc69 	bl	8019d90 <USBD_LL_PrepareReceive>
 80184be:	e018      	b.n	80184f2 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80184c0:	68fb      	ldr	r3, [r7, #12]
 80184c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80184c6:	b2db      	uxtb	r3, r3
 80184c8:	2b03      	cmp	r3, #3
 80184ca:	d10b      	bne.n	80184e4 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80184cc:	68fb      	ldr	r3, [r7, #12]
 80184ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80184d2:	68db      	ldr	r3, [r3, #12]
 80184d4:	2b00      	cmp	r3, #0
 80184d6:	d005      	beq.n	80184e4 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80184d8:	68fb      	ldr	r3, [r7, #12]
 80184da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80184de:	68db      	ldr	r3, [r3, #12]
 80184e0:	68f8      	ldr	r0, [r7, #12]
 80184e2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80184e4:	2180      	movs	r1, #128	; 0x80
 80184e6:	68f8      	ldr	r0, [r7, #12]
 80184e8:	f001 fba8 	bl	8019c3c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80184ec:	68f8      	ldr	r0, [r7, #12]
 80184ee:	f000 ff93 	bl	8019418 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80184f2:	68fb      	ldr	r3, [r7, #12]
 80184f4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80184f8:	2b01      	cmp	r3, #1
 80184fa:	d122      	bne.n	8018542 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80184fc:	68f8      	ldr	r0, [r7, #12]
 80184fe:	f7ff fe98 	bl	8018232 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8018502:	68fb      	ldr	r3, [r7, #12]
 8018504:	2200      	movs	r2, #0
 8018506:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 801850a:	e01a      	b.n	8018542 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801850c:	68fb      	ldr	r3, [r7, #12]
 801850e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018512:	b2db      	uxtb	r3, r3
 8018514:	2b03      	cmp	r3, #3
 8018516:	d114      	bne.n	8018542 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8018518:	68fb      	ldr	r3, [r7, #12]
 801851a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801851e:	695b      	ldr	r3, [r3, #20]
 8018520:	2b00      	cmp	r3, #0
 8018522:	d00e      	beq.n	8018542 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8018524:	68fb      	ldr	r3, [r7, #12]
 8018526:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801852a:	695b      	ldr	r3, [r3, #20]
 801852c:	7afa      	ldrb	r2, [r7, #11]
 801852e:	4611      	mov	r1, r2
 8018530:	68f8      	ldr	r0, [r7, #12]
 8018532:	4798      	blx	r3
 8018534:	4603      	mov	r3, r0
 8018536:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8018538:	7dfb      	ldrb	r3, [r7, #23]
 801853a:	2b00      	cmp	r3, #0
 801853c:	d001      	beq.n	8018542 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 801853e:	7dfb      	ldrb	r3, [r7, #23]
 8018540:	e000      	b.n	8018544 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8018542:	2300      	movs	r3, #0
}
 8018544:	4618      	mov	r0, r3
 8018546:	3718      	adds	r7, #24
 8018548:	46bd      	mov	sp, r7
 801854a:	bd80      	pop	{r7, pc}

0801854c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801854c:	b580      	push	{r7, lr}
 801854e:	b082      	sub	sp, #8
 8018550:	af00      	add	r7, sp, #0
 8018552:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8018554:	687b      	ldr	r3, [r7, #4]
 8018556:	2201      	movs	r2, #1
 8018558:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801855c:	687b      	ldr	r3, [r7, #4]
 801855e:	2200      	movs	r2, #0
 8018560:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8018564:	687b      	ldr	r3, [r7, #4]
 8018566:	2200      	movs	r2, #0
 8018568:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801856a:	687b      	ldr	r3, [r7, #4]
 801856c:	2200      	movs	r2, #0
 801856e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8018572:	687b      	ldr	r3, [r7, #4]
 8018574:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018578:	2b00      	cmp	r3, #0
 801857a:	d101      	bne.n	8018580 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 801857c:	2303      	movs	r3, #3
 801857e:	e02f      	b.n	80185e0 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8018580:	687b      	ldr	r3, [r7, #4]
 8018582:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8018586:	2b00      	cmp	r3, #0
 8018588:	d00f      	beq.n	80185aa <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 801858a:	687b      	ldr	r3, [r7, #4]
 801858c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018590:	685b      	ldr	r3, [r3, #4]
 8018592:	2b00      	cmp	r3, #0
 8018594:	d009      	beq.n	80185aa <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8018596:	687b      	ldr	r3, [r7, #4]
 8018598:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801859c:	685b      	ldr	r3, [r3, #4]
 801859e:	687a      	ldr	r2, [r7, #4]
 80185a0:	6852      	ldr	r2, [r2, #4]
 80185a2:	b2d2      	uxtb	r2, r2
 80185a4:	4611      	mov	r1, r2
 80185a6:	6878      	ldr	r0, [r7, #4]
 80185a8:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80185aa:	2340      	movs	r3, #64	; 0x40
 80185ac:	2200      	movs	r2, #0
 80185ae:	2100      	movs	r1, #0
 80185b0:	6878      	ldr	r0, [r7, #4]
 80185b2:	f001 fafe 	bl	8019bb2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80185b6:	687b      	ldr	r3, [r7, #4]
 80185b8:	2201      	movs	r2, #1
 80185ba:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80185be:	687b      	ldr	r3, [r7, #4]
 80185c0:	2240      	movs	r2, #64	; 0x40
 80185c2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80185c6:	2340      	movs	r3, #64	; 0x40
 80185c8:	2200      	movs	r2, #0
 80185ca:	2180      	movs	r1, #128	; 0x80
 80185cc:	6878      	ldr	r0, [r7, #4]
 80185ce:	f001 faf0 	bl	8019bb2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80185d2:	687b      	ldr	r3, [r7, #4]
 80185d4:	2201      	movs	r2, #1
 80185d6:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80185d8:	687b      	ldr	r3, [r7, #4]
 80185da:	2240      	movs	r2, #64	; 0x40
 80185dc:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80185de:	2300      	movs	r3, #0
}
 80185e0:	4618      	mov	r0, r3
 80185e2:	3708      	adds	r7, #8
 80185e4:	46bd      	mov	sp, r7
 80185e6:	bd80      	pop	{r7, pc}

080185e8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80185e8:	b480      	push	{r7}
 80185ea:	b083      	sub	sp, #12
 80185ec:	af00      	add	r7, sp, #0
 80185ee:	6078      	str	r0, [r7, #4]
 80185f0:	460b      	mov	r3, r1
 80185f2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80185f4:	687b      	ldr	r3, [r7, #4]
 80185f6:	78fa      	ldrb	r2, [r7, #3]
 80185f8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80185fa:	2300      	movs	r3, #0
}
 80185fc:	4618      	mov	r0, r3
 80185fe:	370c      	adds	r7, #12
 8018600:	46bd      	mov	sp, r7
 8018602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018606:	4770      	bx	lr

08018608 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8018608:	b480      	push	{r7}
 801860a:	b083      	sub	sp, #12
 801860c:	af00      	add	r7, sp, #0
 801860e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8018610:	687b      	ldr	r3, [r7, #4]
 8018612:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018616:	b2da      	uxtb	r2, r3
 8018618:	687b      	ldr	r3, [r7, #4]
 801861a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 801861e:	687b      	ldr	r3, [r7, #4]
 8018620:	2204      	movs	r2, #4
 8018622:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8018626:	2300      	movs	r3, #0
}
 8018628:	4618      	mov	r0, r3
 801862a:	370c      	adds	r7, #12
 801862c:	46bd      	mov	sp, r7
 801862e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018632:	4770      	bx	lr

08018634 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8018634:	b480      	push	{r7}
 8018636:	b083      	sub	sp, #12
 8018638:	af00      	add	r7, sp, #0
 801863a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801863c:	687b      	ldr	r3, [r7, #4]
 801863e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018642:	b2db      	uxtb	r3, r3
 8018644:	2b04      	cmp	r3, #4
 8018646:	d106      	bne.n	8018656 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8018648:	687b      	ldr	r3, [r7, #4]
 801864a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 801864e:	b2da      	uxtb	r2, r3
 8018650:	687b      	ldr	r3, [r7, #4]
 8018652:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8018656:	2300      	movs	r3, #0
}
 8018658:	4618      	mov	r0, r3
 801865a:	370c      	adds	r7, #12
 801865c:	46bd      	mov	sp, r7
 801865e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018662:	4770      	bx	lr

08018664 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8018664:	b580      	push	{r7, lr}
 8018666:	b082      	sub	sp, #8
 8018668:	af00      	add	r7, sp, #0
 801866a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 801866c:	687b      	ldr	r3, [r7, #4]
 801866e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018672:	2b00      	cmp	r3, #0
 8018674:	d101      	bne.n	801867a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8018676:	2303      	movs	r3, #3
 8018678:	e012      	b.n	80186a0 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801867a:	687b      	ldr	r3, [r7, #4]
 801867c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018680:	b2db      	uxtb	r3, r3
 8018682:	2b03      	cmp	r3, #3
 8018684:	d10b      	bne.n	801869e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8018686:	687b      	ldr	r3, [r7, #4]
 8018688:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801868c:	69db      	ldr	r3, [r3, #28]
 801868e:	2b00      	cmp	r3, #0
 8018690:	d005      	beq.n	801869e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8018692:	687b      	ldr	r3, [r7, #4]
 8018694:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018698:	69db      	ldr	r3, [r3, #28]
 801869a:	6878      	ldr	r0, [r7, #4]
 801869c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801869e:	2300      	movs	r3, #0
}
 80186a0:	4618      	mov	r0, r3
 80186a2:	3708      	adds	r7, #8
 80186a4:	46bd      	mov	sp, r7
 80186a6:	bd80      	pop	{r7, pc}

080186a8 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80186a8:	b580      	push	{r7, lr}
 80186aa:	b082      	sub	sp, #8
 80186ac:	af00      	add	r7, sp, #0
 80186ae:	6078      	str	r0, [r7, #4]
 80186b0:	460b      	mov	r3, r1
 80186b2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80186b4:	687b      	ldr	r3, [r7, #4]
 80186b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80186ba:	2b00      	cmp	r3, #0
 80186bc:	d101      	bne.n	80186c2 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80186be:	2303      	movs	r3, #3
 80186c0:	e014      	b.n	80186ec <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80186c2:	687b      	ldr	r3, [r7, #4]
 80186c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80186c8:	b2db      	uxtb	r3, r3
 80186ca:	2b03      	cmp	r3, #3
 80186cc:	d10d      	bne.n	80186ea <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80186ce:	687b      	ldr	r3, [r7, #4]
 80186d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80186d4:	6a1b      	ldr	r3, [r3, #32]
 80186d6:	2b00      	cmp	r3, #0
 80186d8:	d007      	beq.n	80186ea <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80186da:	687b      	ldr	r3, [r7, #4]
 80186dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80186e0:	6a1b      	ldr	r3, [r3, #32]
 80186e2:	78fa      	ldrb	r2, [r7, #3]
 80186e4:	4611      	mov	r1, r2
 80186e6:	6878      	ldr	r0, [r7, #4]
 80186e8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80186ea:	2300      	movs	r3, #0
}
 80186ec:	4618      	mov	r0, r3
 80186ee:	3708      	adds	r7, #8
 80186f0:	46bd      	mov	sp, r7
 80186f2:	bd80      	pop	{r7, pc}

080186f4 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80186f4:	b580      	push	{r7, lr}
 80186f6:	b082      	sub	sp, #8
 80186f8:	af00      	add	r7, sp, #0
 80186fa:	6078      	str	r0, [r7, #4]
 80186fc:	460b      	mov	r3, r1
 80186fe:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8018700:	687b      	ldr	r3, [r7, #4]
 8018702:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018706:	2b00      	cmp	r3, #0
 8018708:	d101      	bne.n	801870e <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 801870a:	2303      	movs	r3, #3
 801870c:	e014      	b.n	8018738 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801870e:	687b      	ldr	r3, [r7, #4]
 8018710:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018714:	b2db      	uxtb	r3, r3
 8018716:	2b03      	cmp	r3, #3
 8018718:	d10d      	bne.n	8018736 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 801871a:	687b      	ldr	r3, [r7, #4]
 801871c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018722:	2b00      	cmp	r3, #0
 8018724:	d007      	beq.n	8018736 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8018726:	687b      	ldr	r3, [r7, #4]
 8018728:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801872c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801872e:	78fa      	ldrb	r2, [r7, #3]
 8018730:	4611      	mov	r1, r2
 8018732:	6878      	ldr	r0, [r7, #4]
 8018734:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8018736:	2300      	movs	r3, #0
}
 8018738:	4618      	mov	r0, r3
 801873a:	3708      	adds	r7, #8
 801873c:	46bd      	mov	sp, r7
 801873e:	bd80      	pop	{r7, pc}

08018740 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8018740:	b480      	push	{r7}
 8018742:	b083      	sub	sp, #12
 8018744:	af00      	add	r7, sp, #0
 8018746:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8018748:	2300      	movs	r3, #0
}
 801874a:	4618      	mov	r0, r3
 801874c:	370c      	adds	r7, #12
 801874e:	46bd      	mov	sp, r7
 8018750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018754:	4770      	bx	lr

08018756 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8018756:	b580      	push	{r7, lr}
 8018758:	b082      	sub	sp, #8
 801875a:	af00      	add	r7, sp, #0
 801875c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801875e:	687b      	ldr	r3, [r7, #4]
 8018760:	2201      	movs	r2, #1
 8018762:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8018766:	687b      	ldr	r3, [r7, #4]
 8018768:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801876c:	2b00      	cmp	r3, #0
 801876e:	d009      	beq.n	8018784 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8018770:	687b      	ldr	r3, [r7, #4]
 8018772:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018776:	685b      	ldr	r3, [r3, #4]
 8018778:	687a      	ldr	r2, [r7, #4]
 801877a:	6852      	ldr	r2, [r2, #4]
 801877c:	b2d2      	uxtb	r2, r2
 801877e:	4611      	mov	r1, r2
 8018780:	6878      	ldr	r0, [r7, #4]
 8018782:	4798      	blx	r3
  }

  return USBD_OK;
 8018784:	2300      	movs	r3, #0
}
 8018786:	4618      	mov	r0, r3
 8018788:	3708      	adds	r7, #8
 801878a:	46bd      	mov	sp, r7
 801878c:	bd80      	pop	{r7, pc}

0801878e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801878e:	b480      	push	{r7}
 8018790:	b087      	sub	sp, #28
 8018792:	af00      	add	r7, sp, #0
 8018794:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8018796:	687b      	ldr	r3, [r7, #4]
 8018798:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801879a:	697b      	ldr	r3, [r7, #20]
 801879c:	781b      	ldrb	r3, [r3, #0]
 801879e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80187a0:	697b      	ldr	r3, [r7, #20]
 80187a2:	3301      	adds	r3, #1
 80187a4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80187a6:	697b      	ldr	r3, [r7, #20]
 80187a8:	781b      	ldrb	r3, [r3, #0]
 80187aa:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80187ac:	8a3b      	ldrh	r3, [r7, #16]
 80187ae:	021b      	lsls	r3, r3, #8
 80187b0:	b21a      	sxth	r2, r3
 80187b2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80187b6:	4313      	orrs	r3, r2
 80187b8:	b21b      	sxth	r3, r3
 80187ba:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80187bc:	89fb      	ldrh	r3, [r7, #14]
}
 80187be:	4618      	mov	r0, r3
 80187c0:	371c      	adds	r7, #28
 80187c2:	46bd      	mov	sp, r7
 80187c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187c8:	4770      	bx	lr
	...

080187cc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80187cc:	b580      	push	{r7, lr}
 80187ce:	b084      	sub	sp, #16
 80187d0:	af00      	add	r7, sp, #0
 80187d2:	6078      	str	r0, [r7, #4]
 80187d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80187d6:	2300      	movs	r3, #0
 80187d8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80187da:	683b      	ldr	r3, [r7, #0]
 80187dc:	781b      	ldrb	r3, [r3, #0]
 80187de:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80187e2:	2b40      	cmp	r3, #64	; 0x40
 80187e4:	d005      	beq.n	80187f2 <USBD_StdDevReq+0x26>
 80187e6:	2b40      	cmp	r3, #64	; 0x40
 80187e8:	d853      	bhi.n	8018892 <USBD_StdDevReq+0xc6>
 80187ea:	2b00      	cmp	r3, #0
 80187ec:	d00b      	beq.n	8018806 <USBD_StdDevReq+0x3a>
 80187ee:	2b20      	cmp	r3, #32
 80187f0:	d14f      	bne.n	8018892 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80187f2:	687b      	ldr	r3, [r7, #4]
 80187f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80187f8:	689b      	ldr	r3, [r3, #8]
 80187fa:	6839      	ldr	r1, [r7, #0]
 80187fc:	6878      	ldr	r0, [r7, #4]
 80187fe:	4798      	blx	r3
 8018800:	4603      	mov	r3, r0
 8018802:	73fb      	strb	r3, [r7, #15]
      break;
 8018804:	e04a      	b.n	801889c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8018806:	683b      	ldr	r3, [r7, #0]
 8018808:	785b      	ldrb	r3, [r3, #1]
 801880a:	2b09      	cmp	r3, #9
 801880c:	d83b      	bhi.n	8018886 <USBD_StdDevReq+0xba>
 801880e:	a201      	add	r2, pc, #4	; (adr r2, 8018814 <USBD_StdDevReq+0x48>)
 8018810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018814:	08018869 	.word	0x08018869
 8018818:	0801887d 	.word	0x0801887d
 801881c:	08018887 	.word	0x08018887
 8018820:	08018873 	.word	0x08018873
 8018824:	08018887 	.word	0x08018887
 8018828:	08018847 	.word	0x08018847
 801882c:	0801883d 	.word	0x0801883d
 8018830:	08018887 	.word	0x08018887
 8018834:	0801885f 	.word	0x0801885f
 8018838:	08018851 	.word	0x08018851
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801883c:	6839      	ldr	r1, [r7, #0]
 801883e:	6878      	ldr	r0, [r7, #4]
 8018840:	f000 f9de 	bl	8018c00 <USBD_GetDescriptor>
          break;
 8018844:	e024      	b.n	8018890 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8018846:	6839      	ldr	r1, [r7, #0]
 8018848:	6878      	ldr	r0, [r7, #4]
 801884a:	f000 fb43 	bl	8018ed4 <USBD_SetAddress>
          break;
 801884e:	e01f      	b.n	8018890 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8018850:	6839      	ldr	r1, [r7, #0]
 8018852:	6878      	ldr	r0, [r7, #4]
 8018854:	f000 fb82 	bl	8018f5c <USBD_SetConfig>
 8018858:	4603      	mov	r3, r0
 801885a:	73fb      	strb	r3, [r7, #15]
          break;
 801885c:	e018      	b.n	8018890 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801885e:	6839      	ldr	r1, [r7, #0]
 8018860:	6878      	ldr	r0, [r7, #4]
 8018862:	f000 fc21 	bl	80190a8 <USBD_GetConfig>
          break;
 8018866:	e013      	b.n	8018890 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8018868:	6839      	ldr	r1, [r7, #0]
 801886a:	6878      	ldr	r0, [r7, #4]
 801886c:	f000 fc52 	bl	8019114 <USBD_GetStatus>
          break;
 8018870:	e00e      	b.n	8018890 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8018872:	6839      	ldr	r1, [r7, #0]
 8018874:	6878      	ldr	r0, [r7, #4]
 8018876:	f000 fc81 	bl	801917c <USBD_SetFeature>
          break;
 801887a:	e009      	b.n	8018890 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801887c:	6839      	ldr	r1, [r7, #0]
 801887e:	6878      	ldr	r0, [r7, #4]
 8018880:	f000 fc90 	bl	80191a4 <USBD_ClrFeature>
          break;
 8018884:	e004      	b.n	8018890 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8018886:	6839      	ldr	r1, [r7, #0]
 8018888:	6878      	ldr	r0, [r7, #4]
 801888a:	f000 fce7 	bl	801925c <USBD_CtlError>
          break;
 801888e:	bf00      	nop
      }
      break;
 8018890:	e004      	b.n	801889c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8018892:	6839      	ldr	r1, [r7, #0]
 8018894:	6878      	ldr	r0, [r7, #4]
 8018896:	f000 fce1 	bl	801925c <USBD_CtlError>
      break;
 801889a:	bf00      	nop
  }

  return ret;
 801889c:	7bfb      	ldrb	r3, [r7, #15]
}
 801889e:	4618      	mov	r0, r3
 80188a0:	3710      	adds	r7, #16
 80188a2:	46bd      	mov	sp, r7
 80188a4:	bd80      	pop	{r7, pc}
 80188a6:	bf00      	nop

080188a8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80188a8:	b580      	push	{r7, lr}
 80188aa:	b084      	sub	sp, #16
 80188ac:	af00      	add	r7, sp, #0
 80188ae:	6078      	str	r0, [r7, #4]
 80188b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80188b2:	2300      	movs	r3, #0
 80188b4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80188b6:	683b      	ldr	r3, [r7, #0]
 80188b8:	781b      	ldrb	r3, [r3, #0]
 80188ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80188be:	2b40      	cmp	r3, #64	; 0x40
 80188c0:	d005      	beq.n	80188ce <USBD_StdItfReq+0x26>
 80188c2:	2b40      	cmp	r3, #64	; 0x40
 80188c4:	d82f      	bhi.n	8018926 <USBD_StdItfReq+0x7e>
 80188c6:	2b00      	cmp	r3, #0
 80188c8:	d001      	beq.n	80188ce <USBD_StdItfReq+0x26>
 80188ca:	2b20      	cmp	r3, #32
 80188cc:	d12b      	bne.n	8018926 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80188ce:	687b      	ldr	r3, [r7, #4]
 80188d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80188d4:	b2db      	uxtb	r3, r3
 80188d6:	3b01      	subs	r3, #1
 80188d8:	2b02      	cmp	r3, #2
 80188da:	d81d      	bhi.n	8018918 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80188dc:	683b      	ldr	r3, [r7, #0]
 80188de:	889b      	ldrh	r3, [r3, #4]
 80188e0:	b2db      	uxtb	r3, r3
 80188e2:	2b01      	cmp	r3, #1
 80188e4:	d813      	bhi.n	801890e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80188e6:	687b      	ldr	r3, [r7, #4]
 80188e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80188ec:	689b      	ldr	r3, [r3, #8]
 80188ee:	6839      	ldr	r1, [r7, #0]
 80188f0:	6878      	ldr	r0, [r7, #4]
 80188f2:	4798      	blx	r3
 80188f4:	4603      	mov	r3, r0
 80188f6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80188f8:	683b      	ldr	r3, [r7, #0]
 80188fa:	88db      	ldrh	r3, [r3, #6]
 80188fc:	2b00      	cmp	r3, #0
 80188fe:	d110      	bne.n	8018922 <USBD_StdItfReq+0x7a>
 8018900:	7bfb      	ldrb	r3, [r7, #15]
 8018902:	2b00      	cmp	r3, #0
 8018904:	d10d      	bne.n	8018922 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8018906:	6878      	ldr	r0, [r7, #4]
 8018908:	f000 fd73 	bl	80193f2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801890c:	e009      	b.n	8018922 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 801890e:	6839      	ldr	r1, [r7, #0]
 8018910:	6878      	ldr	r0, [r7, #4]
 8018912:	f000 fca3 	bl	801925c <USBD_CtlError>
          break;
 8018916:	e004      	b.n	8018922 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8018918:	6839      	ldr	r1, [r7, #0]
 801891a:	6878      	ldr	r0, [r7, #4]
 801891c:	f000 fc9e 	bl	801925c <USBD_CtlError>
          break;
 8018920:	e000      	b.n	8018924 <USBD_StdItfReq+0x7c>
          break;
 8018922:	bf00      	nop
      }
      break;
 8018924:	e004      	b.n	8018930 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8018926:	6839      	ldr	r1, [r7, #0]
 8018928:	6878      	ldr	r0, [r7, #4]
 801892a:	f000 fc97 	bl	801925c <USBD_CtlError>
      break;
 801892e:	bf00      	nop
  }

  return ret;
 8018930:	7bfb      	ldrb	r3, [r7, #15]
}
 8018932:	4618      	mov	r0, r3
 8018934:	3710      	adds	r7, #16
 8018936:	46bd      	mov	sp, r7
 8018938:	bd80      	pop	{r7, pc}

0801893a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801893a:	b580      	push	{r7, lr}
 801893c:	b084      	sub	sp, #16
 801893e:	af00      	add	r7, sp, #0
 8018940:	6078      	str	r0, [r7, #4]
 8018942:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8018944:	2300      	movs	r3, #0
 8018946:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8018948:	683b      	ldr	r3, [r7, #0]
 801894a:	889b      	ldrh	r3, [r3, #4]
 801894c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801894e:	683b      	ldr	r3, [r7, #0]
 8018950:	781b      	ldrb	r3, [r3, #0]
 8018952:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8018956:	2b40      	cmp	r3, #64	; 0x40
 8018958:	d007      	beq.n	801896a <USBD_StdEPReq+0x30>
 801895a:	2b40      	cmp	r3, #64	; 0x40
 801895c:	f200 8145 	bhi.w	8018bea <USBD_StdEPReq+0x2b0>
 8018960:	2b00      	cmp	r3, #0
 8018962:	d00c      	beq.n	801897e <USBD_StdEPReq+0x44>
 8018964:	2b20      	cmp	r3, #32
 8018966:	f040 8140 	bne.w	8018bea <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801896a:	687b      	ldr	r3, [r7, #4]
 801896c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018970:	689b      	ldr	r3, [r3, #8]
 8018972:	6839      	ldr	r1, [r7, #0]
 8018974:	6878      	ldr	r0, [r7, #4]
 8018976:	4798      	blx	r3
 8018978:	4603      	mov	r3, r0
 801897a:	73fb      	strb	r3, [r7, #15]
      break;
 801897c:	e13a      	b.n	8018bf4 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801897e:	683b      	ldr	r3, [r7, #0]
 8018980:	785b      	ldrb	r3, [r3, #1]
 8018982:	2b03      	cmp	r3, #3
 8018984:	d007      	beq.n	8018996 <USBD_StdEPReq+0x5c>
 8018986:	2b03      	cmp	r3, #3
 8018988:	f300 8129 	bgt.w	8018bde <USBD_StdEPReq+0x2a4>
 801898c:	2b00      	cmp	r3, #0
 801898e:	d07f      	beq.n	8018a90 <USBD_StdEPReq+0x156>
 8018990:	2b01      	cmp	r3, #1
 8018992:	d03c      	beq.n	8018a0e <USBD_StdEPReq+0xd4>
 8018994:	e123      	b.n	8018bde <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8018996:	687b      	ldr	r3, [r7, #4]
 8018998:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801899c:	b2db      	uxtb	r3, r3
 801899e:	2b02      	cmp	r3, #2
 80189a0:	d002      	beq.n	80189a8 <USBD_StdEPReq+0x6e>
 80189a2:	2b03      	cmp	r3, #3
 80189a4:	d016      	beq.n	80189d4 <USBD_StdEPReq+0x9a>
 80189a6:	e02c      	b.n	8018a02 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80189a8:	7bbb      	ldrb	r3, [r7, #14]
 80189aa:	2b00      	cmp	r3, #0
 80189ac:	d00d      	beq.n	80189ca <USBD_StdEPReq+0x90>
 80189ae:	7bbb      	ldrb	r3, [r7, #14]
 80189b0:	2b80      	cmp	r3, #128	; 0x80
 80189b2:	d00a      	beq.n	80189ca <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80189b4:	7bbb      	ldrb	r3, [r7, #14]
 80189b6:	4619      	mov	r1, r3
 80189b8:	6878      	ldr	r0, [r7, #4]
 80189ba:	f001 f93f 	bl	8019c3c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80189be:	2180      	movs	r1, #128	; 0x80
 80189c0:	6878      	ldr	r0, [r7, #4]
 80189c2:	f001 f93b 	bl	8019c3c <USBD_LL_StallEP>
 80189c6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80189c8:	e020      	b.n	8018a0c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80189ca:	6839      	ldr	r1, [r7, #0]
 80189cc:	6878      	ldr	r0, [r7, #4]
 80189ce:	f000 fc45 	bl	801925c <USBD_CtlError>
              break;
 80189d2:	e01b      	b.n	8018a0c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80189d4:	683b      	ldr	r3, [r7, #0]
 80189d6:	885b      	ldrh	r3, [r3, #2]
 80189d8:	2b00      	cmp	r3, #0
 80189da:	d10e      	bne.n	80189fa <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80189dc:	7bbb      	ldrb	r3, [r7, #14]
 80189de:	2b00      	cmp	r3, #0
 80189e0:	d00b      	beq.n	80189fa <USBD_StdEPReq+0xc0>
 80189e2:	7bbb      	ldrb	r3, [r7, #14]
 80189e4:	2b80      	cmp	r3, #128	; 0x80
 80189e6:	d008      	beq.n	80189fa <USBD_StdEPReq+0xc0>
 80189e8:	683b      	ldr	r3, [r7, #0]
 80189ea:	88db      	ldrh	r3, [r3, #6]
 80189ec:	2b00      	cmp	r3, #0
 80189ee:	d104      	bne.n	80189fa <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80189f0:	7bbb      	ldrb	r3, [r7, #14]
 80189f2:	4619      	mov	r1, r3
 80189f4:	6878      	ldr	r0, [r7, #4]
 80189f6:	f001 f921 	bl	8019c3c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80189fa:	6878      	ldr	r0, [r7, #4]
 80189fc:	f000 fcf9 	bl	80193f2 <USBD_CtlSendStatus>

              break;
 8018a00:	e004      	b.n	8018a0c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8018a02:	6839      	ldr	r1, [r7, #0]
 8018a04:	6878      	ldr	r0, [r7, #4]
 8018a06:	f000 fc29 	bl	801925c <USBD_CtlError>
              break;
 8018a0a:	bf00      	nop
          }
          break;
 8018a0c:	e0ec      	b.n	8018be8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8018a0e:	687b      	ldr	r3, [r7, #4]
 8018a10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018a14:	b2db      	uxtb	r3, r3
 8018a16:	2b02      	cmp	r3, #2
 8018a18:	d002      	beq.n	8018a20 <USBD_StdEPReq+0xe6>
 8018a1a:	2b03      	cmp	r3, #3
 8018a1c:	d016      	beq.n	8018a4c <USBD_StdEPReq+0x112>
 8018a1e:	e030      	b.n	8018a82 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8018a20:	7bbb      	ldrb	r3, [r7, #14]
 8018a22:	2b00      	cmp	r3, #0
 8018a24:	d00d      	beq.n	8018a42 <USBD_StdEPReq+0x108>
 8018a26:	7bbb      	ldrb	r3, [r7, #14]
 8018a28:	2b80      	cmp	r3, #128	; 0x80
 8018a2a:	d00a      	beq.n	8018a42 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8018a2c:	7bbb      	ldrb	r3, [r7, #14]
 8018a2e:	4619      	mov	r1, r3
 8018a30:	6878      	ldr	r0, [r7, #4]
 8018a32:	f001 f903 	bl	8019c3c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8018a36:	2180      	movs	r1, #128	; 0x80
 8018a38:	6878      	ldr	r0, [r7, #4]
 8018a3a:	f001 f8ff 	bl	8019c3c <USBD_LL_StallEP>
 8018a3e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8018a40:	e025      	b.n	8018a8e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8018a42:	6839      	ldr	r1, [r7, #0]
 8018a44:	6878      	ldr	r0, [r7, #4]
 8018a46:	f000 fc09 	bl	801925c <USBD_CtlError>
              break;
 8018a4a:	e020      	b.n	8018a8e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8018a4c:	683b      	ldr	r3, [r7, #0]
 8018a4e:	885b      	ldrh	r3, [r3, #2]
 8018a50:	2b00      	cmp	r3, #0
 8018a52:	d11b      	bne.n	8018a8c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8018a54:	7bbb      	ldrb	r3, [r7, #14]
 8018a56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018a5a:	2b00      	cmp	r3, #0
 8018a5c:	d004      	beq.n	8018a68 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8018a5e:	7bbb      	ldrb	r3, [r7, #14]
 8018a60:	4619      	mov	r1, r3
 8018a62:	6878      	ldr	r0, [r7, #4]
 8018a64:	f001 f909 	bl	8019c7a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8018a68:	6878      	ldr	r0, [r7, #4]
 8018a6a:	f000 fcc2 	bl	80193f2 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8018a6e:	687b      	ldr	r3, [r7, #4]
 8018a70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018a74:	689b      	ldr	r3, [r3, #8]
 8018a76:	6839      	ldr	r1, [r7, #0]
 8018a78:	6878      	ldr	r0, [r7, #4]
 8018a7a:	4798      	blx	r3
 8018a7c:	4603      	mov	r3, r0
 8018a7e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8018a80:	e004      	b.n	8018a8c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8018a82:	6839      	ldr	r1, [r7, #0]
 8018a84:	6878      	ldr	r0, [r7, #4]
 8018a86:	f000 fbe9 	bl	801925c <USBD_CtlError>
              break;
 8018a8a:	e000      	b.n	8018a8e <USBD_StdEPReq+0x154>
              break;
 8018a8c:	bf00      	nop
          }
          break;
 8018a8e:	e0ab      	b.n	8018be8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8018a90:	687b      	ldr	r3, [r7, #4]
 8018a92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018a96:	b2db      	uxtb	r3, r3
 8018a98:	2b02      	cmp	r3, #2
 8018a9a:	d002      	beq.n	8018aa2 <USBD_StdEPReq+0x168>
 8018a9c:	2b03      	cmp	r3, #3
 8018a9e:	d032      	beq.n	8018b06 <USBD_StdEPReq+0x1cc>
 8018aa0:	e097      	b.n	8018bd2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8018aa2:	7bbb      	ldrb	r3, [r7, #14]
 8018aa4:	2b00      	cmp	r3, #0
 8018aa6:	d007      	beq.n	8018ab8 <USBD_StdEPReq+0x17e>
 8018aa8:	7bbb      	ldrb	r3, [r7, #14]
 8018aaa:	2b80      	cmp	r3, #128	; 0x80
 8018aac:	d004      	beq.n	8018ab8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8018aae:	6839      	ldr	r1, [r7, #0]
 8018ab0:	6878      	ldr	r0, [r7, #4]
 8018ab2:	f000 fbd3 	bl	801925c <USBD_CtlError>
                break;
 8018ab6:	e091      	b.n	8018bdc <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8018ab8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8018abc:	2b00      	cmp	r3, #0
 8018abe:	da0b      	bge.n	8018ad8 <USBD_StdEPReq+0x19e>
 8018ac0:	7bbb      	ldrb	r3, [r7, #14]
 8018ac2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8018ac6:	4613      	mov	r3, r2
 8018ac8:	009b      	lsls	r3, r3, #2
 8018aca:	4413      	add	r3, r2
 8018acc:	009b      	lsls	r3, r3, #2
 8018ace:	3310      	adds	r3, #16
 8018ad0:	687a      	ldr	r2, [r7, #4]
 8018ad2:	4413      	add	r3, r2
 8018ad4:	3304      	adds	r3, #4
 8018ad6:	e00b      	b.n	8018af0 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8018ad8:	7bbb      	ldrb	r3, [r7, #14]
 8018ada:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8018ade:	4613      	mov	r3, r2
 8018ae0:	009b      	lsls	r3, r3, #2
 8018ae2:	4413      	add	r3, r2
 8018ae4:	009b      	lsls	r3, r3, #2
 8018ae6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8018aea:	687a      	ldr	r2, [r7, #4]
 8018aec:	4413      	add	r3, r2
 8018aee:	3304      	adds	r3, #4
 8018af0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8018af2:	68bb      	ldr	r3, [r7, #8]
 8018af4:	2200      	movs	r2, #0
 8018af6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8018af8:	68bb      	ldr	r3, [r7, #8]
 8018afa:	2202      	movs	r2, #2
 8018afc:	4619      	mov	r1, r3
 8018afe:	6878      	ldr	r0, [r7, #4]
 8018b00:	f000 fc1d 	bl	801933e <USBD_CtlSendData>
              break;
 8018b04:	e06a      	b.n	8018bdc <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8018b06:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8018b0a:	2b00      	cmp	r3, #0
 8018b0c:	da11      	bge.n	8018b32 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8018b0e:	7bbb      	ldrb	r3, [r7, #14]
 8018b10:	f003 020f 	and.w	r2, r3, #15
 8018b14:	6879      	ldr	r1, [r7, #4]
 8018b16:	4613      	mov	r3, r2
 8018b18:	009b      	lsls	r3, r3, #2
 8018b1a:	4413      	add	r3, r2
 8018b1c:	009b      	lsls	r3, r3, #2
 8018b1e:	440b      	add	r3, r1
 8018b20:	3324      	adds	r3, #36	; 0x24
 8018b22:	881b      	ldrh	r3, [r3, #0]
 8018b24:	2b00      	cmp	r3, #0
 8018b26:	d117      	bne.n	8018b58 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8018b28:	6839      	ldr	r1, [r7, #0]
 8018b2a:	6878      	ldr	r0, [r7, #4]
 8018b2c:	f000 fb96 	bl	801925c <USBD_CtlError>
                  break;
 8018b30:	e054      	b.n	8018bdc <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8018b32:	7bbb      	ldrb	r3, [r7, #14]
 8018b34:	f003 020f 	and.w	r2, r3, #15
 8018b38:	6879      	ldr	r1, [r7, #4]
 8018b3a:	4613      	mov	r3, r2
 8018b3c:	009b      	lsls	r3, r3, #2
 8018b3e:	4413      	add	r3, r2
 8018b40:	009b      	lsls	r3, r3, #2
 8018b42:	440b      	add	r3, r1
 8018b44:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8018b48:	881b      	ldrh	r3, [r3, #0]
 8018b4a:	2b00      	cmp	r3, #0
 8018b4c:	d104      	bne.n	8018b58 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8018b4e:	6839      	ldr	r1, [r7, #0]
 8018b50:	6878      	ldr	r0, [r7, #4]
 8018b52:	f000 fb83 	bl	801925c <USBD_CtlError>
                  break;
 8018b56:	e041      	b.n	8018bdc <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8018b58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8018b5c:	2b00      	cmp	r3, #0
 8018b5e:	da0b      	bge.n	8018b78 <USBD_StdEPReq+0x23e>
 8018b60:	7bbb      	ldrb	r3, [r7, #14]
 8018b62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8018b66:	4613      	mov	r3, r2
 8018b68:	009b      	lsls	r3, r3, #2
 8018b6a:	4413      	add	r3, r2
 8018b6c:	009b      	lsls	r3, r3, #2
 8018b6e:	3310      	adds	r3, #16
 8018b70:	687a      	ldr	r2, [r7, #4]
 8018b72:	4413      	add	r3, r2
 8018b74:	3304      	adds	r3, #4
 8018b76:	e00b      	b.n	8018b90 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8018b78:	7bbb      	ldrb	r3, [r7, #14]
 8018b7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8018b7e:	4613      	mov	r3, r2
 8018b80:	009b      	lsls	r3, r3, #2
 8018b82:	4413      	add	r3, r2
 8018b84:	009b      	lsls	r3, r3, #2
 8018b86:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8018b8a:	687a      	ldr	r2, [r7, #4]
 8018b8c:	4413      	add	r3, r2
 8018b8e:	3304      	adds	r3, #4
 8018b90:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8018b92:	7bbb      	ldrb	r3, [r7, #14]
 8018b94:	2b00      	cmp	r3, #0
 8018b96:	d002      	beq.n	8018b9e <USBD_StdEPReq+0x264>
 8018b98:	7bbb      	ldrb	r3, [r7, #14]
 8018b9a:	2b80      	cmp	r3, #128	; 0x80
 8018b9c:	d103      	bne.n	8018ba6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8018b9e:	68bb      	ldr	r3, [r7, #8]
 8018ba0:	2200      	movs	r2, #0
 8018ba2:	601a      	str	r2, [r3, #0]
 8018ba4:	e00e      	b.n	8018bc4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8018ba6:	7bbb      	ldrb	r3, [r7, #14]
 8018ba8:	4619      	mov	r1, r3
 8018baa:	6878      	ldr	r0, [r7, #4]
 8018bac:	f001 f884 	bl	8019cb8 <USBD_LL_IsStallEP>
 8018bb0:	4603      	mov	r3, r0
 8018bb2:	2b00      	cmp	r3, #0
 8018bb4:	d003      	beq.n	8018bbe <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8018bb6:	68bb      	ldr	r3, [r7, #8]
 8018bb8:	2201      	movs	r2, #1
 8018bba:	601a      	str	r2, [r3, #0]
 8018bbc:	e002      	b.n	8018bc4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8018bbe:	68bb      	ldr	r3, [r7, #8]
 8018bc0:	2200      	movs	r2, #0
 8018bc2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8018bc4:	68bb      	ldr	r3, [r7, #8]
 8018bc6:	2202      	movs	r2, #2
 8018bc8:	4619      	mov	r1, r3
 8018bca:	6878      	ldr	r0, [r7, #4]
 8018bcc:	f000 fbb7 	bl	801933e <USBD_CtlSendData>
              break;
 8018bd0:	e004      	b.n	8018bdc <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8018bd2:	6839      	ldr	r1, [r7, #0]
 8018bd4:	6878      	ldr	r0, [r7, #4]
 8018bd6:	f000 fb41 	bl	801925c <USBD_CtlError>
              break;
 8018bda:	bf00      	nop
          }
          break;
 8018bdc:	e004      	b.n	8018be8 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8018bde:	6839      	ldr	r1, [r7, #0]
 8018be0:	6878      	ldr	r0, [r7, #4]
 8018be2:	f000 fb3b 	bl	801925c <USBD_CtlError>
          break;
 8018be6:	bf00      	nop
      }
      break;
 8018be8:	e004      	b.n	8018bf4 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8018bea:	6839      	ldr	r1, [r7, #0]
 8018bec:	6878      	ldr	r0, [r7, #4]
 8018bee:	f000 fb35 	bl	801925c <USBD_CtlError>
      break;
 8018bf2:	bf00      	nop
  }

  return ret;
 8018bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8018bf6:	4618      	mov	r0, r3
 8018bf8:	3710      	adds	r7, #16
 8018bfa:	46bd      	mov	sp, r7
 8018bfc:	bd80      	pop	{r7, pc}
	...

08018c00 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018c00:	b580      	push	{r7, lr}
 8018c02:	b084      	sub	sp, #16
 8018c04:	af00      	add	r7, sp, #0
 8018c06:	6078      	str	r0, [r7, #4]
 8018c08:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8018c0a:	2300      	movs	r3, #0
 8018c0c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8018c0e:	2300      	movs	r3, #0
 8018c10:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8018c12:	2300      	movs	r3, #0
 8018c14:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8018c16:	683b      	ldr	r3, [r7, #0]
 8018c18:	885b      	ldrh	r3, [r3, #2]
 8018c1a:	0a1b      	lsrs	r3, r3, #8
 8018c1c:	b29b      	uxth	r3, r3
 8018c1e:	3b01      	subs	r3, #1
 8018c20:	2b06      	cmp	r3, #6
 8018c22:	f200 8128 	bhi.w	8018e76 <USBD_GetDescriptor+0x276>
 8018c26:	a201      	add	r2, pc, #4	; (adr r2, 8018c2c <USBD_GetDescriptor+0x2c>)
 8018c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018c2c:	08018c49 	.word	0x08018c49
 8018c30:	08018c61 	.word	0x08018c61
 8018c34:	08018ca1 	.word	0x08018ca1
 8018c38:	08018e77 	.word	0x08018e77
 8018c3c:	08018e77 	.word	0x08018e77
 8018c40:	08018e17 	.word	0x08018e17
 8018c44:	08018e43 	.word	0x08018e43
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8018c48:	687b      	ldr	r3, [r7, #4]
 8018c4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8018c4e:	681b      	ldr	r3, [r3, #0]
 8018c50:	687a      	ldr	r2, [r7, #4]
 8018c52:	7c12      	ldrb	r2, [r2, #16]
 8018c54:	f107 0108 	add.w	r1, r7, #8
 8018c58:	4610      	mov	r0, r2
 8018c5a:	4798      	blx	r3
 8018c5c:	60f8      	str	r0, [r7, #12]
      break;
 8018c5e:	e112      	b.n	8018e86 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8018c60:	687b      	ldr	r3, [r7, #4]
 8018c62:	7c1b      	ldrb	r3, [r3, #16]
 8018c64:	2b00      	cmp	r3, #0
 8018c66:	d10d      	bne.n	8018c84 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8018c68:	687b      	ldr	r3, [r7, #4]
 8018c6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018c70:	f107 0208 	add.w	r2, r7, #8
 8018c74:	4610      	mov	r0, r2
 8018c76:	4798      	blx	r3
 8018c78:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8018c7a:	68fb      	ldr	r3, [r7, #12]
 8018c7c:	3301      	adds	r3, #1
 8018c7e:	2202      	movs	r2, #2
 8018c80:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8018c82:	e100      	b.n	8018e86 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8018c84:	687b      	ldr	r3, [r7, #4]
 8018c86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018c8c:	f107 0208 	add.w	r2, r7, #8
 8018c90:	4610      	mov	r0, r2
 8018c92:	4798      	blx	r3
 8018c94:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8018c96:	68fb      	ldr	r3, [r7, #12]
 8018c98:	3301      	adds	r3, #1
 8018c9a:	2202      	movs	r2, #2
 8018c9c:	701a      	strb	r2, [r3, #0]
      break;
 8018c9e:	e0f2      	b.n	8018e86 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8018ca0:	683b      	ldr	r3, [r7, #0]
 8018ca2:	885b      	ldrh	r3, [r3, #2]
 8018ca4:	b2db      	uxtb	r3, r3
 8018ca6:	2b05      	cmp	r3, #5
 8018ca8:	f200 80ac 	bhi.w	8018e04 <USBD_GetDescriptor+0x204>
 8018cac:	a201      	add	r2, pc, #4	; (adr r2, 8018cb4 <USBD_GetDescriptor+0xb4>)
 8018cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018cb2:	bf00      	nop
 8018cb4:	08018ccd 	.word	0x08018ccd
 8018cb8:	08018d01 	.word	0x08018d01
 8018cbc:	08018d35 	.word	0x08018d35
 8018cc0:	08018d69 	.word	0x08018d69
 8018cc4:	08018d9d 	.word	0x08018d9d
 8018cc8:	08018dd1 	.word	0x08018dd1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8018ccc:	687b      	ldr	r3, [r7, #4]
 8018cce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8018cd2:	685b      	ldr	r3, [r3, #4]
 8018cd4:	2b00      	cmp	r3, #0
 8018cd6:	d00b      	beq.n	8018cf0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8018cd8:	687b      	ldr	r3, [r7, #4]
 8018cda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8018cde:	685b      	ldr	r3, [r3, #4]
 8018ce0:	687a      	ldr	r2, [r7, #4]
 8018ce2:	7c12      	ldrb	r2, [r2, #16]
 8018ce4:	f107 0108 	add.w	r1, r7, #8
 8018ce8:	4610      	mov	r0, r2
 8018cea:	4798      	blx	r3
 8018cec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8018cee:	e091      	b.n	8018e14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8018cf0:	6839      	ldr	r1, [r7, #0]
 8018cf2:	6878      	ldr	r0, [r7, #4]
 8018cf4:	f000 fab2 	bl	801925c <USBD_CtlError>
            err++;
 8018cf8:	7afb      	ldrb	r3, [r7, #11]
 8018cfa:	3301      	adds	r3, #1
 8018cfc:	72fb      	strb	r3, [r7, #11]
          break;
 8018cfe:	e089      	b.n	8018e14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8018d00:	687b      	ldr	r3, [r7, #4]
 8018d02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8018d06:	689b      	ldr	r3, [r3, #8]
 8018d08:	2b00      	cmp	r3, #0
 8018d0a:	d00b      	beq.n	8018d24 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8018d0c:	687b      	ldr	r3, [r7, #4]
 8018d0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8018d12:	689b      	ldr	r3, [r3, #8]
 8018d14:	687a      	ldr	r2, [r7, #4]
 8018d16:	7c12      	ldrb	r2, [r2, #16]
 8018d18:	f107 0108 	add.w	r1, r7, #8
 8018d1c:	4610      	mov	r0, r2
 8018d1e:	4798      	blx	r3
 8018d20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8018d22:	e077      	b.n	8018e14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8018d24:	6839      	ldr	r1, [r7, #0]
 8018d26:	6878      	ldr	r0, [r7, #4]
 8018d28:	f000 fa98 	bl	801925c <USBD_CtlError>
            err++;
 8018d2c:	7afb      	ldrb	r3, [r7, #11]
 8018d2e:	3301      	adds	r3, #1
 8018d30:	72fb      	strb	r3, [r7, #11]
          break;
 8018d32:	e06f      	b.n	8018e14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8018d34:	687b      	ldr	r3, [r7, #4]
 8018d36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8018d3a:	68db      	ldr	r3, [r3, #12]
 8018d3c:	2b00      	cmp	r3, #0
 8018d3e:	d00b      	beq.n	8018d58 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8018d40:	687b      	ldr	r3, [r7, #4]
 8018d42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8018d46:	68db      	ldr	r3, [r3, #12]
 8018d48:	687a      	ldr	r2, [r7, #4]
 8018d4a:	7c12      	ldrb	r2, [r2, #16]
 8018d4c:	f107 0108 	add.w	r1, r7, #8
 8018d50:	4610      	mov	r0, r2
 8018d52:	4798      	blx	r3
 8018d54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8018d56:	e05d      	b.n	8018e14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8018d58:	6839      	ldr	r1, [r7, #0]
 8018d5a:	6878      	ldr	r0, [r7, #4]
 8018d5c:	f000 fa7e 	bl	801925c <USBD_CtlError>
            err++;
 8018d60:	7afb      	ldrb	r3, [r7, #11]
 8018d62:	3301      	adds	r3, #1
 8018d64:	72fb      	strb	r3, [r7, #11]
          break;
 8018d66:	e055      	b.n	8018e14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8018d68:	687b      	ldr	r3, [r7, #4]
 8018d6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8018d6e:	691b      	ldr	r3, [r3, #16]
 8018d70:	2b00      	cmp	r3, #0
 8018d72:	d00b      	beq.n	8018d8c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8018d74:	687b      	ldr	r3, [r7, #4]
 8018d76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8018d7a:	691b      	ldr	r3, [r3, #16]
 8018d7c:	687a      	ldr	r2, [r7, #4]
 8018d7e:	7c12      	ldrb	r2, [r2, #16]
 8018d80:	f107 0108 	add.w	r1, r7, #8
 8018d84:	4610      	mov	r0, r2
 8018d86:	4798      	blx	r3
 8018d88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8018d8a:	e043      	b.n	8018e14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8018d8c:	6839      	ldr	r1, [r7, #0]
 8018d8e:	6878      	ldr	r0, [r7, #4]
 8018d90:	f000 fa64 	bl	801925c <USBD_CtlError>
            err++;
 8018d94:	7afb      	ldrb	r3, [r7, #11]
 8018d96:	3301      	adds	r3, #1
 8018d98:	72fb      	strb	r3, [r7, #11]
          break;
 8018d9a:	e03b      	b.n	8018e14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8018d9c:	687b      	ldr	r3, [r7, #4]
 8018d9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8018da2:	695b      	ldr	r3, [r3, #20]
 8018da4:	2b00      	cmp	r3, #0
 8018da6:	d00b      	beq.n	8018dc0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8018da8:	687b      	ldr	r3, [r7, #4]
 8018daa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8018dae:	695b      	ldr	r3, [r3, #20]
 8018db0:	687a      	ldr	r2, [r7, #4]
 8018db2:	7c12      	ldrb	r2, [r2, #16]
 8018db4:	f107 0108 	add.w	r1, r7, #8
 8018db8:	4610      	mov	r0, r2
 8018dba:	4798      	blx	r3
 8018dbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8018dbe:	e029      	b.n	8018e14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8018dc0:	6839      	ldr	r1, [r7, #0]
 8018dc2:	6878      	ldr	r0, [r7, #4]
 8018dc4:	f000 fa4a 	bl	801925c <USBD_CtlError>
            err++;
 8018dc8:	7afb      	ldrb	r3, [r7, #11]
 8018dca:	3301      	adds	r3, #1
 8018dcc:	72fb      	strb	r3, [r7, #11]
          break;
 8018dce:	e021      	b.n	8018e14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8018dd0:	687b      	ldr	r3, [r7, #4]
 8018dd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8018dd6:	699b      	ldr	r3, [r3, #24]
 8018dd8:	2b00      	cmp	r3, #0
 8018dda:	d00b      	beq.n	8018df4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8018ddc:	687b      	ldr	r3, [r7, #4]
 8018dde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8018de2:	699b      	ldr	r3, [r3, #24]
 8018de4:	687a      	ldr	r2, [r7, #4]
 8018de6:	7c12      	ldrb	r2, [r2, #16]
 8018de8:	f107 0108 	add.w	r1, r7, #8
 8018dec:	4610      	mov	r0, r2
 8018dee:	4798      	blx	r3
 8018df0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8018df2:	e00f      	b.n	8018e14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8018df4:	6839      	ldr	r1, [r7, #0]
 8018df6:	6878      	ldr	r0, [r7, #4]
 8018df8:	f000 fa30 	bl	801925c <USBD_CtlError>
            err++;
 8018dfc:	7afb      	ldrb	r3, [r7, #11]
 8018dfe:	3301      	adds	r3, #1
 8018e00:	72fb      	strb	r3, [r7, #11]
          break;
 8018e02:	e007      	b.n	8018e14 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8018e04:	6839      	ldr	r1, [r7, #0]
 8018e06:	6878      	ldr	r0, [r7, #4]
 8018e08:	f000 fa28 	bl	801925c <USBD_CtlError>
          err++;
 8018e0c:	7afb      	ldrb	r3, [r7, #11]
 8018e0e:	3301      	adds	r3, #1
 8018e10:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8018e12:	bf00      	nop
      }
      break;
 8018e14:	e037      	b.n	8018e86 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8018e16:	687b      	ldr	r3, [r7, #4]
 8018e18:	7c1b      	ldrb	r3, [r3, #16]
 8018e1a:	2b00      	cmp	r3, #0
 8018e1c:	d109      	bne.n	8018e32 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8018e1e:	687b      	ldr	r3, [r7, #4]
 8018e20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018e24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018e26:	f107 0208 	add.w	r2, r7, #8
 8018e2a:	4610      	mov	r0, r2
 8018e2c:	4798      	blx	r3
 8018e2e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8018e30:	e029      	b.n	8018e86 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8018e32:	6839      	ldr	r1, [r7, #0]
 8018e34:	6878      	ldr	r0, [r7, #4]
 8018e36:	f000 fa11 	bl	801925c <USBD_CtlError>
        err++;
 8018e3a:	7afb      	ldrb	r3, [r7, #11]
 8018e3c:	3301      	adds	r3, #1
 8018e3e:	72fb      	strb	r3, [r7, #11]
      break;
 8018e40:	e021      	b.n	8018e86 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8018e42:	687b      	ldr	r3, [r7, #4]
 8018e44:	7c1b      	ldrb	r3, [r3, #16]
 8018e46:	2b00      	cmp	r3, #0
 8018e48:	d10d      	bne.n	8018e66 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8018e4a:	687b      	ldr	r3, [r7, #4]
 8018e4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018e52:	f107 0208 	add.w	r2, r7, #8
 8018e56:	4610      	mov	r0, r2
 8018e58:	4798      	blx	r3
 8018e5a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8018e5c:	68fb      	ldr	r3, [r7, #12]
 8018e5e:	3301      	adds	r3, #1
 8018e60:	2207      	movs	r2, #7
 8018e62:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8018e64:	e00f      	b.n	8018e86 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8018e66:	6839      	ldr	r1, [r7, #0]
 8018e68:	6878      	ldr	r0, [r7, #4]
 8018e6a:	f000 f9f7 	bl	801925c <USBD_CtlError>
        err++;
 8018e6e:	7afb      	ldrb	r3, [r7, #11]
 8018e70:	3301      	adds	r3, #1
 8018e72:	72fb      	strb	r3, [r7, #11]
      break;
 8018e74:	e007      	b.n	8018e86 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8018e76:	6839      	ldr	r1, [r7, #0]
 8018e78:	6878      	ldr	r0, [r7, #4]
 8018e7a:	f000 f9ef 	bl	801925c <USBD_CtlError>
      err++;
 8018e7e:	7afb      	ldrb	r3, [r7, #11]
 8018e80:	3301      	adds	r3, #1
 8018e82:	72fb      	strb	r3, [r7, #11]
      break;
 8018e84:	bf00      	nop
  }

  if (err != 0U)
 8018e86:	7afb      	ldrb	r3, [r7, #11]
 8018e88:	2b00      	cmp	r3, #0
 8018e8a:	d11e      	bne.n	8018eca <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8018e8c:	683b      	ldr	r3, [r7, #0]
 8018e8e:	88db      	ldrh	r3, [r3, #6]
 8018e90:	2b00      	cmp	r3, #0
 8018e92:	d016      	beq.n	8018ec2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8018e94:	893b      	ldrh	r3, [r7, #8]
 8018e96:	2b00      	cmp	r3, #0
 8018e98:	d00e      	beq.n	8018eb8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8018e9a:	683b      	ldr	r3, [r7, #0]
 8018e9c:	88da      	ldrh	r2, [r3, #6]
 8018e9e:	893b      	ldrh	r3, [r7, #8]
 8018ea0:	4293      	cmp	r3, r2
 8018ea2:	bf28      	it	cs
 8018ea4:	4613      	movcs	r3, r2
 8018ea6:	b29b      	uxth	r3, r3
 8018ea8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8018eaa:	893b      	ldrh	r3, [r7, #8]
 8018eac:	461a      	mov	r2, r3
 8018eae:	68f9      	ldr	r1, [r7, #12]
 8018eb0:	6878      	ldr	r0, [r7, #4]
 8018eb2:	f000 fa44 	bl	801933e <USBD_CtlSendData>
 8018eb6:	e009      	b.n	8018ecc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8018eb8:	6839      	ldr	r1, [r7, #0]
 8018eba:	6878      	ldr	r0, [r7, #4]
 8018ebc:	f000 f9ce 	bl	801925c <USBD_CtlError>
 8018ec0:	e004      	b.n	8018ecc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8018ec2:	6878      	ldr	r0, [r7, #4]
 8018ec4:	f000 fa95 	bl	80193f2 <USBD_CtlSendStatus>
 8018ec8:	e000      	b.n	8018ecc <USBD_GetDescriptor+0x2cc>
    return;
 8018eca:	bf00      	nop
  }
}
 8018ecc:	3710      	adds	r7, #16
 8018ece:	46bd      	mov	sp, r7
 8018ed0:	bd80      	pop	{r7, pc}
 8018ed2:	bf00      	nop

08018ed4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018ed4:	b580      	push	{r7, lr}
 8018ed6:	b084      	sub	sp, #16
 8018ed8:	af00      	add	r7, sp, #0
 8018eda:	6078      	str	r0, [r7, #4]
 8018edc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8018ede:	683b      	ldr	r3, [r7, #0]
 8018ee0:	889b      	ldrh	r3, [r3, #4]
 8018ee2:	2b00      	cmp	r3, #0
 8018ee4:	d131      	bne.n	8018f4a <USBD_SetAddress+0x76>
 8018ee6:	683b      	ldr	r3, [r7, #0]
 8018ee8:	88db      	ldrh	r3, [r3, #6]
 8018eea:	2b00      	cmp	r3, #0
 8018eec:	d12d      	bne.n	8018f4a <USBD_SetAddress+0x76>
 8018eee:	683b      	ldr	r3, [r7, #0]
 8018ef0:	885b      	ldrh	r3, [r3, #2]
 8018ef2:	2b7f      	cmp	r3, #127	; 0x7f
 8018ef4:	d829      	bhi.n	8018f4a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8018ef6:	683b      	ldr	r3, [r7, #0]
 8018ef8:	885b      	ldrh	r3, [r3, #2]
 8018efa:	b2db      	uxtb	r3, r3
 8018efc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018f00:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018f02:	687b      	ldr	r3, [r7, #4]
 8018f04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018f08:	b2db      	uxtb	r3, r3
 8018f0a:	2b03      	cmp	r3, #3
 8018f0c:	d104      	bne.n	8018f18 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8018f0e:	6839      	ldr	r1, [r7, #0]
 8018f10:	6878      	ldr	r0, [r7, #4]
 8018f12:	f000 f9a3 	bl	801925c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018f16:	e01d      	b.n	8018f54 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8018f18:	687b      	ldr	r3, [r7, #4]
 8018f1a:	7bfa      	ldrb	r2, [r7, #15]
 8018f1c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8018f20:	7bfb      	ldrb	r3, [r7, #15]
 8018f22:	4619      	mov	r1, r3
 8018f24:	6878      	ldr	r0, [r7, #4]
 8018f26:	f000 fef3 	bl	8019d10 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8018f2a:	6878      	ldr	r0, [r7, #4]
 8018f2c:	f000 fa61 	bl	80193f2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8018f30:	7bfb      	ldrb	r3, [r7, #15]
 8018f32:	2b00      	cmp	r3, #0
 8018f34:	d004      	beq.n	8018f40 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8018f36:	687b      	ldr	r3, [r7, #4]
 8018f38:	2202      	movs	r2, #2
 8018f3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018f3e:	e009      	b.n	8018f54 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8018f40:	687b      	ldr	r3, [r7, #4]
 8018f42:	2201      	movs	r2, #1
 8018f44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018f48:	e004      	b.n	8018f54 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8018f4a:	6839      	ldr	r1, [r7, #0]
 8018f4c:	6878      	ldr	r0, [r7, #4]
 8018f4e:	f000 f985 	bl	801925c <USBD_CtlError>
  }
}
 8018f52:	bf00      	nop
 8018f54:	bf00      	nop
 8018f56:	3710      	adds	r7, #16
 8018f58:	46bd      	mov	sp, r7
 8018f5a:	bd80      	pop	{r7, pc}

08018f5c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018f5c:	b580      	push	{r7, lr}
 8018f5e:	b084      	sub	sp, #16
 8018f60:	af00      	add	r7, sp, #0
 8018f62:	6078      	str	r0, [r7, #4]
 8018f64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8018f66:	2300      	movs	r3, #0
 8018f68:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8018f6a:	683b      	ldr	r3, [r7, #0]
 8018f6c:	885b      	ldrh	r3, [r3, #2]
 8018f6e:	b2da      	uxtb	r2, r3
 8018f70:	4b4c      	ldr	r3, [pc, #304]	; (80190a4 <USBD_SetConfig+0x148>)
 8018f72:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8018f74:	4b4b      	ldr	r3, [pc, #300]	; (80190a4 <USBD_SetConfig+0x148>)
 8018f76:	781b      	ldrb	r3, [r3, #0]
 8018f78:	2b01      	cmp	r3, #1
 8018f7a:	d905      	bls.n	8018f88 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8018f7c:	6839      	ldr	r1, [r7, #0]
 8018f7e:	6878      	ldr	r0, [r7, #4]
 8018f80:	f000 f96c 	bl	801925c <USBD_CtlError>
    return USBD_FAIL;
 8018f84:	2303      	movs	r3, #3
 8018f86:	e088      	b.n	801909a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8018f88:	687b      	ldr	r3, [r7, #4]
 8018f8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018f8e:	b2db      	uxtb	r3, r3
 8018f90:	2b02      	cmp	r3, #2
 8018f92:	d002      	beq.n	8018f9a <USBD_SetConfig+0x3e>
 8018f94:	2b03      	cmp	r3, #3
 8018f96:	d025      	beq.n	8018fe4 <USBD_SetConfig+0x88>
 8018f98:	e071      	b.n	801907e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8018f9a:	4b42      	ldr	r3, [pc, #264]	; (80190a4 <USBD_SetConfig+0x148>)
 8018f9c:	781b      	ldrb	r3, [r3, #0]
 8018f9e:	2b00      	cmp	r3, #0
 8018fa0:	d01c      	beq.n	8018fdc <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8018fa2:	4b40      	ldr	r3, [pc, #256]	; (80190a4 <USBD_SetConfig+0x148>)
 8018fa4:	781b      	ldrb	r3, [r3, #0]
 8018fa6:	461a      	mov	r2, r3
 8018fa8:	687b      	ldr	r3, [r7, #4]
 8018faa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8018fac:	4b3d      	ldr	r3, [pc, #244]	; (80190a4 <USBD_SetConfig+0x148>)
 8018fae:	781b      	ldrb	r3, [r3, #0]
 8018fb0:	4619      	mov	r1, r3
 8018fb2:	6878      	ldr	r0, [r7, #4]
 8018fb4:	f7ff f948 	bl	8018248 <USBD_SetClassConfig>
 8018fb8:	4603      	mov	r3, r0
 8018fba:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8018fbc:	7bfb      	ldrb	r3, [r7, #15]
 8018fbe:	2b00      	cmp	r3, #0
 8018fc0:	d004      	beq.n	8018fcc <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8018fc2:	6839      	ldr	r1, [r7, #0]
 8018fc4:	6878      	ldr	r0, [r7, #4]
 8018fc6:	f000 f949 	bl	801925c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8018fca:	e065      	b.n	8019098 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8018fcc:	6878      	ldr	r0, [r7, #4]
 8018fce:	f000 fa10 	bl	80193f2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8018fd2:	687b      	ldr	r3, [r7, #4]
 8018fd4:	2203      	movs	r2, #3
 8018fd6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8018fda:	e05d      	b.n	8019098 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8018fdc:	6878      	ldr	r0, [r7, #4]
 8018fde:	f000 fa08 	bl	80193f2 <USBD_CtlSendStatus>
      break;
 8018fe2:	e059      	b.n	8019098 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8018fe4:	4b2f      	ldr	r3, [pc, #188]	; (80190a4 <USBD_SetConfig+0x148>)
 8018fe6:	781b      	ldrb	r3, [r3, #0]
 8018fe8:	2b00      	cmp	r3, #0
 8018fea:	d112      	bne.n	8019012 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8018fec:	687b      	ldr	r3, [r7, #4]
 8018fee:	2202      	movs	r2, #2
 8018ff0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8018ff4:	4b2b      	ldr	r3, [pc, #172]	; (80190a4 <USBD_SetConfig+0x148>)
 8018ff6:	781b      	ldrb	r3, [r3, #0]
 8018ff8:	461a      	mov	r2, r3
 8018ffa:	687b      	ldr	r3, [r7, #4]
 8018ffc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8018ffe:	4b29      	ldr	r3, [pc, #164]	; (80190a4 <USBD_SetConfig+0x148>)
 8019000:	781b      	ldrb	r3, [r3, #0]
 8019002:	4619      	mov	r1, r3
 8019004:	6878      	ldr	r0, [r7, #4]
 8019006:	f7ff f93b 	bl	8018280 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801900a:	6878      	ldr	r0, [r7, #4]
 801900c:	f000 f9f1 	bl	80193f2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8019010:	e042      	b.n	8019098 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8019012:	4b24      	ldr	r3, [pc, #144]	; (80190a4 <USBD_SetConfig+0x148>)
 8019014:	781b      	ldrb	r3, [r3, #0]
 8019016:	461a      	mov	r2, r3
 8019018:	687b      	ldr	r3, [r7, #4]
 801901a:	685b      	ldr	r3, [r3, #4]
 801901c:	429a      	cmp	r2, r3
 801901e:	d02a      	beq.n	8019076 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8019020:	687b      	ldr	r3, [r7, #4]
 8019022:	685b      	ldr	r3, [r3, #4]
 8019024:	b2db      	uxtb	r3, r3
 8019026:	4619      	mov	r1, r3
 8019028:	6878      	ldr	r0, [r7, #4]
 801902a:	f7ff f929 	bl	8018280 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801902e:	4b1d      	ldr	r3, [pc, #116]	; (80190a4 <USBD_SetConfig+0x148>)
 8019030:	781b      	ldrb	r3, [r3, #0]
 8019032:	461a      	mov	r2, r3
 8019034:	687b      	ldr	r3, [r7, #4]
 8019036:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8019038:	4b1a      	ldr	r3, [pc, #104]	; (80190a4 <USBD_SetConfig+0x148>)
 801903a:	781b      	ldrb	r3, [r3, #0]
 801903c:	4619      	mov	r1, r3
 801903e:	6878      	ldr	r0, [r7, #4]
 8019040:	f7ff f902 	bl	8018248 <USBD_SetClassConfig>
 8019044:	4603      	mov	r3, r0
 8019046:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8019048:	7bfb      	ldrb	r3, [r7, #15]
 801904a:	2b00      	cmp	r3, #0
 801904c:	d00f      	beq.n	801906e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 801904e:	6839      	ldr	r1, [r7, #0]
 8019050:	6878      	ldr	r0, [r7, #4]
 8019052:	f000 f903 	bl	801925c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8019056:	687b      	ldr	r3, [r7, #4]
 8019058:	685b      	ldr	r3, [r3, #4]
 801905a:	b2db      	uxtb	r3, r3
 801905c:	4619      	mov	r1, r3
 801905e:	6878      	ldr	r0, [r7, #4]
 8019060:	f7ff f90e 	bl	8018280 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8019064:	687b      	ldr	r3, [r7, #4]
 8019066:	2202      	movs	r2, #2
 8019068:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801906c:	e014      	b.n	8019098 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 801906e:	6878      	ldr	r0, [r7, #4]
 8019070:	f000 f9bf 	bl	80193f2 <USBD_CtlSendStatus>
      break;
 8019074:	e010      	b.n	8019098 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8019076:	6878      	ldr	r0, [r7, #4]
 8019078:	f000 f9bb 	bl	80193f2 <USBD_CtlSendStatus>
      break;
 801907c:	e00c      	b.n	8019098 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 801907e:	6839      	ldr	r1, [r7, #0]
 8019080:	6878      	ldr	r0, [r7, #4]
 8019082:	f000 f8eb 	bl	801925c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8019086:	4b07      	ldr	r3, [pc, #28]	; (80190a4 <USBD_SetConfig+0x148>)
 8019088:	781b      	ldrb	r3, [r3, #0]
 801908a:	4619      	mov	r1, r3
 801908c:	6878      	ldr	r0, [r7, #4]
 801908e:	f7ff f8f7 	bl	8018280 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8019092:	2303      	movs	r3, #3
 8019094:	73fb      	strb	r3, [r7, #15]
      break;
 8019096:	bf00      	nop
  }

  return ret;
 8019098:	7bfb      	ldrb	r3, [r7, #15]
}
 801909a:	4618      	mov	r0, r3
 801909c:	3710      	adds	r7, #16
 801909e:	46bd      	mov	sp, r7
 80190a0:	bd80      	pop	{r7, pc}
 80190a2:	bf00      	nop
 80190a4:	24001b58 	.word	0x24001b58

080190a8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80190a8:	b580      	push	{r7, lr}
 80190aa:	b082      	sub	sp, #8
 80190ac:	af00      	add	r7, sp, #0
 80190ae:	6078      	str	r0, [r7, #4]
 80190b0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80190b2:	683b      	ldr	r3, [r7, #0]
 80190b4:	88db      	ldrh	r3, [r3, #6]
 80190b6:	2b01      	cmp	r3, #1
 80190b8:	d004      	beq.n	80190c4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80190ba:	6839      	ldr	r1, [r7, #0]
 80190bc:	6878      	ldr	r0, [r7, #4]
 80190be:	f000 f8cd 	bl	801925c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80190c2:	e023      	b.n	801910c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80190c4:	687b      	ldr	r3, [r7, #4]
 80190c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80190ca:	b2db      	uxtb	r3, r3
 80190cc:	2b02      	cmp	r3, #2
 80190ce:	dc02      	bgt.n	80190d6 <USBD_GetConfig+0x2e>
 80190d0:	2b00      	cmp	r3, #0
 80190d2:	dc03      	bgt.n	80190dc <USBD_GetConfig+0x34>
 80190d4:	e015      	b.n	8019102 <USBD_GetConfig+0x5a>
 80190d6:	2b03      	cmp	r3, #3
 80190d8:	d00b      	beq.n	80190f2 <USBD_GetConfig+0x4a>
 80190da:	e012      	b.n	8019102 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80190dc:	687b      	ldr	r3, [r7, #4]
 80190de:	2200      	movs	r2, #0
 80190e0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80190e2:	687b      	ldr	r3, [r7, #4]
 80190e4:	3308      	adds	r3, #8
 80190e6:	2201      	movs	r2, #1
 80190e8:	4619      	mov	r1, r3
 80190ea:	6878      	ldr	r0, [r7, #4]
 80190ec:	f000 f927 	bl	801933e <USBD_CtlSendData>
        break;
 80190f0:	e00c      	b.n	801910c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80190f2:	687b      	ldr	r3, [r7, #4]
 80190f4:	3304      	adds	r3, #4
 80190f6:	2201      	movs	r2, #1
 80190f8:	4619      	mov	r1, r3
 80190fa:	6878      	ldr	r0, [r7, #4]
 80190fc:	f000 f91f 	bl	801933e <USBD_CtlSendData>
        break;
 8019100:	e004      	b.n	801910c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8019102:	6839      	ldr	r1, [r7, #0]
 8019104:	6878      	ldr	r0, [r7, #4]
 8019106:	f000 f8a9 	bl	801925c <USBD_CtlError>
        break;
 801910a:	bf00      	nop
}
 801910c:	bf00      	nop
 801910e:	3708      	adds	r7, #8
 8019110:	46bd      	mov	sp, r7
 8019112:	bd80      	pop	{r7, pc}

08019114 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8019114:	b580      	push	{r7, lr}
 8019116:	b082      	sub	sp, #8
 8019118:	af00      	add	r7, sp, #0
 801911a:	6078      	str	r0, [r7, #4]
 801911c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801911e:	687b      	ldr	r3, [r7, #4]
 8019120:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8019124:	b2db      	uxtb	r3, r3
 8019126:	3b01      	subs	r3, #1
 8019128:	2b02      	cmp	r3, #2
 801912a:	d81e      	bhi.n	801916a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801912c:	683b      	ldr	r3, [r7, #0]
 801912e:	88db      	ldrh	r3, [r3, #6]
 8019130:	2b02      	cmp	r3, #2
 8019132:	d004      	beq.n	801913e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8019134:	6839      	ldr	r1, [r7, #0]
 8019136:	6878      	ldr	r0, [r7, #4]
 8019138:	f000 f890 	bl	801925c <USBD_CtlError>
        break;
 801913c:	e01a      	b.n	8019174 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801913e:	687b      	ldr	r3, [r7, #4]
 8019140:	2201      	movs	r2, #1
 8019142:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8019144:	687b      	ldr	r3, [r7, #4]
 8019146:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801914a:	2b00      	cmp	r3, #0
 801914c:	d005      	beq.n	801915a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801914e:	687b      	ldr	r3, [r7, #4]
 8019150:	68db      	ldr	r3, [r3, #12]
 8019152:	f043 0202 	orr.w	r2, r3, #2
 8019156:	687b      	ldr	r3, [r7, #4]
 8019158:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801915a:	687b      	ldr	r3, [r7, #4]
 801915c:	330c      	adds	r3, #12
 801915e:	2202      	movs	r2, #2
 8019160:	4619      	mov	r1, r3
 8019162:	6878      	ldr	r0, [r7, #4]
 8019164:	f000 f8eb 	bl	801933e <USBD_CtlSendData>
      break;
 8019168:	e004      	b.n	8019174 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801916a:	6839      	ldr	r1, [r7, #0]
 801916c:	6878      	ldr	r0, [r7, #4]
 801916e:	f000 f875 	bl	801925c <USBD_CtlError>
      break;
 8019172:	bf00      	nop
  }
}
 8019174:	bf00      	nop
 8019176:	3708      	adds	r7, #8
 8019178:	46bd      	mov	sp, r7
 801917a:	bd80      	pop	{r7, pc}

0801917c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801917c:	b580      	push	{r7, lr}
 801917e:	b082      	sub	sp, #8
 8019180:	af00      	add	r7, sp, #0
 8019182:	6078      	str	r0, [r7, #4]
 8019184:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8019186:	683b      	ldr	r3, [r7, #0]
 8019188:	885b      	ldrh	r3, [r3, #2]
 801918a:	2b01      	cmp	r3, #1
 801918c:	d106      	bne.n	801919c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 801918e:	687b      	ldr	r3, [r7, #4]
 8019190:	2201      	movs	r2, #1
 8019192:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8019196:	6878      	ldr	r0, [r7, #4]
 8019198:	f000 f92b 	bl	80193f2 <USBD_CtlSendStatus>
  }
}
 801919c:	bf00      	nop
 801919e:	3708      	adds	r7, #8
 80191a0:	46bd      	mov	sp, r7
 80191a2:	bd80      	pop	{r7, pc}

080191a4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80191a4:	b580      	push	{r7, lr}
 80191a6:	b082      	sub	sp, #8
 80191a8:	af00      	add	r7, sp, #0
 80191aa:	6078      	str	r0, [r7, #4]
 80191ac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80191ae:	687b      	ldr	r3, [r7, #4]
 80191b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80191b4:	b2db      	uxtb	r3, r3
 80191b6:	3b01      	subs	r3, #1
 80191b8:	2b02      	cmp	r3, #2
 80191ba:	d80b      	bhi.n	80191d4 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80191bc:	683b      	ldr	r3, [r7, #0]
 80191be:	885b      	ldrh	r3, [r3, #2]
 80191c0:	2b01      	cmp	r3, #1
 80191c2:	d10c      	bne.n	80191de <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80191c4:	687b      	ldr	r3, [r7, #4]
 80191c6:	2200      	movs	r2, #0
 80191c8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80191cc:	6878      	ldr	r0, [r7, #4]
 80191ce:	f000 f910 	bl	80193f2 <USBD_CtlSendStatus>
      }
      break;
 80191d2:	e004      	b.n	80191de <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80191d4:	6839      	ldr	r1, [r7, #0]
 80191d6:	6878      	ldr	r0, [r7, #4]
 80191d8:	f000 f840 	bl	801925c <USBD_CtlError>
      break;
 80191dc:	e000      	b.n	80191e0 <USBD_ClrFeature+0x3c>
      break;
 80191de:	bf00      	nop
  }
}
 80191e0:	bf00      	nop
 80191e2:	3708      	adds	r7, #8
 80191e4:	46bd      	mov	sp, r7
 80191e6:	bd80      	pop	{r7, pc}

080191e8 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80191e8:	b580      	push	{r7, lr}
 80191ea:	b084      	sub	sp, #16
 80191ec:	af00      	add	r7, sp, #0
 80191ee:	6078      	str	r0, [r7, #4]
 80191f0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80191f2:	683b      	ldr	r3, [r7, #0]
 80191f4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80191f6:	68fb      	ldr	r3, [r7, #12]
 80191f8:	781a      	ldrb	r2, [r3, #0]
 80191fa:	687b      	ldr	r3, [r7, #4]
 80191fc:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80191fe:	68fb      	ldr	r3, [r7, #12]
 8019200:	3301      	adds	r3, #1
 8019202:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8019204:	68fb      	ldr	r3, [r7, #12]
 8019206:	781a      	ldrb	r2, [r3, #0]
 8019208:	687b      	ldr	r3, [r7, #4]
 801920a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801920c:	68fb      	ldr	r3, [r7, #12]
 801920e:	3301      	adds	r3, #1
 8019210:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8019212:	68f8      	ldr	r0, [r7, #12]
 8019214:	f7ff fabb 	bl	801878e <SWAPBYTE>
 8019218:	4603      	mov	r3, r0
 801921a:	461a      	mov	r2, r3
 801921c:	687b      	ldr	r3, [r7, #4]
 801921e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8019220:	68fb      	ldr	r3, [r7, #12]
 8019222:	3301      	adds	r3, #1
 8019224:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8019226:	68fb      	ldr	r3, [r7, #12]
 8019228:	3301      	adds	r3, #1
 801922a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801922c:	68f8      	ldr	r0, [r7, #12]
 801922e:	f7ff faae 	bl	801878e <SWAPBYTE>
 8019232:	4603      	mov	r3, r0
 8019234:	461a      	mov	r2, r3
 8019236:	687b      	ldr	r3, [r7, #4]
 8019238:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801923a:	68fb      	ldr	r3, [r7, #12]
 801923c:	3301      	adds	r3, #1
 801923e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8019240:	68fb      	ldr	r3, [r7, #12]
 8019242:	3301      	adds	r3, #1
 8019244:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8019246:	68f8      	ldr	r0, [r7, #12]
 8019248:	f7ff faa1 	bl	801878e <SWAPBYTE>
 801924c:	4603      	mov	r3, r0
 801924e:	461a      	mov	r2, r3
 8019250:	687b      	ldr	r3, [r7, #4]
 8019252:	80da      	strh	r2, [r3, #6]
}
 8019254:	bf00      	nop
 8019256:	3710      	adds	r7, #16
 8019258:	46bd      	mov	sp, r7
 801925a:	bd80      	pop	{r7, pc}

0801925c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801925c:	b580      	push	{r7, lr}
 801925e:	b082      	sub	sp, #8
 8019260:	af00      	add	r7, sp, #0
 8019262:	6078      	str	r0, [r7, #4]
 8019264:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8019266:	2180      	movs	r1, #128	; 0x80
 8019268:	6878      	ldr	r0, [r7, #4]
 801926a:	f000 fce7 	bl	8019c3c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801926e:	2100      	movs	r1, #0
 8019270:	6878      	ldr	r0, [r7, #4]
 8019272:	f000 fce3 	bl	8019c3c <USBD_LL_StallEP>
}
 8019276:	bf00      	nop
 8019278:	3708      	adds	r7, #8
 801927a:	46bd      	mov	sp, r7
 801927c:	bd80      	pop	{r7, pc}

0801927e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801927e:	b580      	push	{r7, lr}
 8019280:	b086      	sub	sp, #24
 8019282:	af00      	add	r7, sp, #0
 8019284:	60f8      	str	r0, [r7, #12]
 8019286:	60b9      	str	r1, [r7, #8]
 8019288:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801928a:	2300      	movs	r3, #0
 801928c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801928e:	68fb      	ldr	r3, [r7, #12]
 8019290:	2b00      	cmp	r3, #0
 8019292:	d036      	beq.n	8019302 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8019294:	68fb      	ldr	r3, [r7, #12]
 8019296:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8019298:	6938      	ldr	r0, [r7, #16]
 801929a:	f000 f836 	bl	801930a <USBD_GetLen>
 801929e:	4603      	mov	r3, r0
 80192a0:	3301      	adds	r3, #1
 80192a2:	b29b      	uxth	r3, r3
 80192a4:	005b      	lsls	r3, r3, #1
 80192a6:	b29a      	uxth	r2, r3
 80192a8:	687b      	ldr	r3, [r7, #4]
 80192aa:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80192ac:	7dfb      	ldrb	r3, [r7, #23]
 80192ae:	68ba      	ldr	r2, [r7, #8]
 80192b0:	4413      	add	r3, r2
 80192b2:	687a      	ldr	r2, [r7, #4]
 80192b4:	7812      	ldrb	r2, [r2, #0]
 80192b6:	701a      	strb	r2, [r3, #0]
  idx++;
 80192b8:	7dfb      	ldrb	r3, [r7, #23]
 80192ba:	3301      	adds	r3, #1
 80192bc:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80192be:	7dfb      	ldrb	r3, [r7, #23]
 80192c0:	68ba      	ldr	r2, [r7, #8]
 80192c2:	4413      	add	r3, r2
 80192c4:	2203      	movs	r2, #3
 80192c6:	701a      	strb	r2, [r3, #0]
  idx++;
 80192c8:	7dfb      	ldrb	r3, [r7, #23]
 80192ca:	3301      	adds	r3, #1
 80192cc:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80192ce:	e013      	b.n	80192f8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80192d0:	7dfb      	ldrb	r3, [r7, #23]
 80192d2:	68ba      	ldr	r2, [r7, #8]
 80192d4:	4413      	add	r3, r2
 80192d6:	693a      	ldr	r2, [r7, #16]
 80192d8:	7812      	ldrb	r2, [r2, #0]
 80192da:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80192dc:	693b      	ldr	r3, [r7, #16]
 80192de:	3301      	adds	r3, #1
 80192e0:	613b      	str	r3, [r7, #16]
    idx++;
 80192e2:	7dfb      	ldrb	r3, [r7, #23]
 80192e4:	3301      	adds	r3, #1
 80192e6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80192e8:	7dfb      	ldrb	r3, [r7, #23]
 80192ea:	68ba      	ldr	r2, [r7, #8]
 80192ec:	4413      	add	r3, r2
 80192ee:	2200      	movs	r2, #0
 80192f0:	701a      	strb	r2, [r3, #0]
    idx++;
 80192f2:	7dfb      	ldrb	r3, [r7, #23]
 80192f4:	3301      	adds	r3, #1
 80192f6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80192f8:	693b      	ldr	r3, [r7, #16]
 80192fa:	781b      	ldrb	r3, [r3, #0]
 80192fc:	2b00      	cmp	r3, #0
 80192fe:	d1e7      	bne.n	80192d0 <USBD_GetString+0x52>
 8019300:	e000      	b.n	8019304 <USBD_GetString+0x86>
    return;
 8019302:	bf00      	nop
  }
}
 8019304:	3718      	adds	r7, #24
 8019306:	46bd      	mov	sp, r7
 8019308:	bd80      	pop	{r7, pc}

0801930a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801930a:	b480      	push	{r7}
 801930c:	b085      	sub	sp, #20
 801930e:	af00      	add	r7, sp, #0
 8019310:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8019312:	2300      	movs	r3, #0
 8019314:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8019316:	687b      	ldr	r3, [r7, #4]
 8019318:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801931a:	e005      	b.n	8019328 <USBD_GetLen+0x1e>
  {
    len++;
 801931c:	7bfb      	ldrb	r3, [r7, #15]
 801931e:	3301      	adds	r3, #1
 8019320:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8019322:	68bb      	ldr	r3, [r7, #8]
 8019324:	3301      	adds	r3, #1
 8019326:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8019328:	68bb      	ldr	r3, [r7, #8]
 801932a:	781b      	ldrb	r3, [r3, #0]
 801932c:	2b00      	cmp	r3, #0
 801932e:	d1f5      	bne.n	801931c <USBD_GetLen+0x12>
  }

  return len;
 8019330:	7bfb      	ldrb	r3, [r7, #15]
}
 8019332:	4618      	mov	r0, r3
 8019334:	3714      	adds	r7, #20
 8019336:	46bd      	mov	sp, r7
 8019338:	f85d 7b04 	ldr.w	r7, [sp], #4
 801933c:	4770      	bx	lr

0801933e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801933e:	b580      	push	{r7, lr}
 8019340:	b084      	sub	sp, #16
 8019342:	af00      	add	r7, sp, #0
 8019344:	60f8      	str	r0, [r7, #12]
 8019346:	60b9      	str	r1, [r7, #8]
 8019348:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801934a:	68fb      	ldr	r3, [r7, #12]
 801934c:	2202      	movs	r2, #2
 801934e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8019352:	68fb      	ldr	r3, [r7, #12]
 8019354:	687a      	ldr	r2, [r7, #4]
 8019356:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8019358:	68fb      	ldr	r3, [r7, #12]
 801935a:	687a      	ldr	r2, [r7, #4]
 801935c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801935e:	687b      	ldr	r3, [r7, #4]
 8019360:	68ba      	ldr	r2, [r7, #8]
 8019362:	2100      	movs	r1, #0
 8019364:	68f8      	ldr	r0, [r7, #12]
 8019366:	f000 fcf2 	bl	8019d4e <USBD_LL_Transmit>

  return USBD_OK;
 801936a:	2300      	movs	r3, #0
}
 801936c:	4618      	mov	r0, r3
 801936e:	3710      	adds	r7, #16
 8019370:	46bd      	mov	sp, r7
 8019372:	bd80      	pop	{r7, pc}

08019374 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8019374:	b580      	push	{r7, lr}
 8019376:	b084      	sub	sp, #16
 8019378:	af00      	add	r7, sp, #0
 801937a:	60f8      	str	r0, [r7, #12]
 801937c:	60b9      	str	r1, [r7, #8]
 801937e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8019380:	687b      	ldr	r3, [r7, #4]
 8019382:	68ba      	ldr	r2, [r7, #8]
 8019384:	2100      	movs	r1, #0
 8019386:	68f8      	ldr	r0, [r7, #12]
 8019388:	f000 fce1 	bl	8019d4e <USBD_LL_Transmit>

  return USBD_OK;
 801938c:	2300      	movs	r3, #0
}
 801938e:	4618      	mov	r0, r3
 8019390:	3710      	adds	r7, #16
 8019392:	46bd      	mov	sp, r7
 8019394:	bd80      	pop	{r7, pc}

08019396 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8019396:	b580      	push	{r7, lr}
 8019398:	b084      	sub	sp, #16
 801939a:	af00      	add	r7, sp, #0
 801939c:	60f8      	str	r0, [r7, #12]
 801939e:	60b9      	str	r1, [r7, #8]
 80193a0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80193a2:	68fb      	ldr	r3, [r7, #12]
 80193a4:	2203      	movs	r2, #3
 80193a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80193aa:	68fb      	ldr	r3, [r7, #12]
 80193ac:	687a      	ldr	r2, [r7, #4]
 80193ae:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80193b2:	68fb      	ldr	r3, [r7, #12]
 80193b4:	687a      	ldr	r2, [r7, #4]
 80193b6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80193ba:	687b      	ldr	r3, [r7, #4]
 80193bc:	68ba      	ldr	r2, [r7, #8]
 80193be:	2100      	movs	r1, #0
 80193c0:	68f8      	ldr	r0, [r7, #12]
 80193c2:	f000 fce5 	bl	8019d90 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80193c6:	2300      	movs	r3, #0
}
 80193c8:	4618      	mov	r0, r3
 80193ca:	3710      	adds	r7, #16
 80193cc:	46bd      	mov	sp, r7
 80193ce:	bd80      	pop	{r7, pc}

080193d0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80193d0:	b580      	push	{r7, lr}
 80193d2:	b084      	sub	sp, #16
 80193d4:	af00      	add	r7, sp, #0
 80193d6:	60f8      	str	r0, [r7, #12]
 80193d8:	60b9      	str	r1, [r7, #8]
 80193da:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80193dc:	687b      	ldr	r3, [r7, #4]
 80193de:	68ba      	ldr	r2, [r7, #8]
 80193e0:	2100      	movs	r1, #0
 80193e2:	68f8      	ldr	r0, [r7, #12]
 80193e4:	f000 fcd4 	bl	8019d90 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80193e8:	2300      	movs	r3, #0
}
 80193ea:	4618      	mov	r0, r3
 80193ec:	3710      	adds	r7, #16
 80193ee:	46bd      	mov	sp, r7
 80193f0:	bd80      	pop	{r7, pc}

080193f2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80193f2:	b580      	push	{r7, lr}
 80193f4:	b082      	sub	sp, #8
 80193f6:	af00      	add	r7, sp, #0
 80193f8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80193fa:	687b      	ldr	r3, [r7, #4]
 80193fc:	2204      	movs	r2, #4
 80193fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8019402:	2300      	movs	r3, #0
 8019404:	2200      	movs	r2, #0
 8019406:	2100      	movs	r1, #0
 8019408:	6878      	ldr	r0, [r7, #4]
 801940a:	f000 fca0 	bl	8019d4e <USBD_LL_Transmit>

  return USBD_OK;
 801940e:	2300      	movs	r3, #0
}
 8019410:	4618      	mov	r0, r3
 8019412:	3708      	adds	r7, #8
 8019414:	46bd      	mov	sp, r7
 8019416:	bd80      	pop	{r7, pc}

08019418 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8019418:	b580      	push	{r7, lr}
 801941a:	b082      	sub	sp, #8
 801941c:	af00      	add	r7, sp, #0
 801941e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8019420:	687b      	ldr	r3, [r7, #4]
 8019422:	2205      	movs	r2, #5
 8019424:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8019428:	2300      	movs	r3, #0
 801942a:	2200      	movs	r2, #0
 801942c:	2100      	movs	r1, #0
 801942e:	6878      	ldr	r0, [r7, #4]
 8019430:	f000 fcae 	bl	8019d90 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8019434:	2300      	movs	r3, #0
}
 8019436:	4618      	mov	r0, r3
 8019438:	3708      	adds	r7, #8
 801943a:	46bd      	mov	sp, r7
 801943c:	bd80      	pop	{r7, pc}
	...

08019440 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8019440:	b580      	push	{r7, lr}
 8019442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8019444:	2200      	movs	r2, #0
 8019446:	4913      	ldr	r1, [pc, #76]	; (8019494 <MX_USB_DEVICE_Init+0x54>)
 8019448:	4813      	ldr	r0, [pc, #76]	; (8019498 <MX_USB_DEVICE_Init+0x58>)
 801944a:	f7fe fe8f 	bl	801816c <USBD_Init>
 801944e:	4603      	mov	r3, r0
 8019450:	2b00      	cmp	r3, #0
 8019452:	d001      	beq.n	8019458 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8019454:	f7ef fc50 	bl	8008cf8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8019458:	4910      	ldr	r1, [pc, #64]	; (801949c <MX_USB_DEVICE_Init+0x5c>)
 801945a:	480f      	ldr	r0, [pc, #60]	; (8019498 <MX_USB_DEVICE_Init+0x58>)
 801945c:	f7fe feb6 	bl	80181cc <USBD_RegisterClass>
 8019460:	4603      	mov	r3, r0
 8019462:	2b00      	cmp	r3, #0
 8019464:	d001      	beq.n	801946a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8019466:	f7ef fc47 	bl	8008cf8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801946a:	490d      	ldr	r1, [pc, #52]	; (80194a0 <MX_USB_DEVICE_Init+0x60>)
 801946c:	480a      	ldr	r0, [pc, #40]	; (8019498 <MX_USB_DEVICE_Init+0x58>)
 801946e:	f7fe fe07 	bl	8018080 <USBD_CDC_RegisterInterface>
 8019472:	4603      	mov	r3, r0
 8019474:	2b00      	cmp	r3, #0
 8019476:	d001      	beq.n	801947c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8019478:	f7ef fc3e 	bl	8008cf8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801947c:	4806      	ldr	r0, [pc, #24]	; (8019498 <MX_USB_DEVICE_Init+0x58>)
 801947e:	f7fe fecc 	bl	801821a <USBD_Start>
 8019482:	4603      	mov	r3, r0
 8019484:	2b00      	cmp	r3, #0
 8019486:	d001      	beq.n	801948c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8019488:	f7ef fc36 	bl	8008cf8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 801948c:	f7f5 fee6 	bl	800f25c <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8019490:	bf00      	nop
 8019492:	bd80      	pop	{r7, pc}
 8019494:	24000134 	.word	0x24000134
 8019498:	24001b5c 	.word	0x24001b5c
 801949c:	2400001c 	.word	0x2400001c
 80194a0:	24000120 	.word	0x24000120

080194a4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80194a4:	b580      	push	{r7, lr}
 80194a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80194a8:	2200      	movs	r2, #0
 80194aa:	4905      	ldr	r1, [pc, #20]	; (80194c0 <CDC_Init_FS+0x1c>)
 80194ac:	4805      	ldr	r0, [pc, #20]	; (80194c4 <CDC_Init_FS+0x20>)
 80194ae:	f7fe fdfc 	bl	80180aa <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80194b2:	4905      	ldr	r1, [pc, #20]	; (80194c8 <CDC_Init_FS+0x24>)
 80194b4:	4803      	ldr	r0, [pc, #12]	; (80194c4 <CDC_Init_FS+0x20>)
 80194b6:	f7fe fe16 	bl	80180e6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80194ba:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80194bc:	4618      	mov	r0, r3
 80194be:	bd80      	pop	{r7, pc}
 80194c0:	2400262c 	.word	0x2400262c
 80194c4:	24001b5c 	.word	0x24001b5c
 80194c8:	24001e2c 	.word	0x24001e2c

080194cc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80194cc:	b480      	push	{r7}
 80194ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80194d0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80194d2:	4618      	mov	r0, r3
 80194d4:	46bd      	mov	sp, r7
 80194d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194da:	4770      	bx	lr

080194dc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80194dc:	b480      	push	{r7}
 80194de:	b083      	sub	sp, #12
 80194e0:	af00      	add	r7, sp, #0
 80194e2:	4603      	mov	r3, r0
 80194e4:	6039      	str	r1, [r7, #0]
 80194e6:	71fb      	strb	r3, [r7, #7]
 80194e8:	4613      	mov	r3, r2
 80194ea:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80194ec:	79fb      	ldrb	r3, [r7, #7]
 80194ee:	2b23      	cmp	r3, #35	; 0x23
 80194f0:	d84a      	bhi.n	8019588 <CDC_Control_FS+0xac>
 80194f2:	a201      	add	r2, pc, #4	; (adr r2, 80194f8 <CDC_Control_FS+0x1c>)
 80194f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80194f8:	08019589 	.word	0x08019589
 80194fc:	08019589 	.word	0x08019589
 8019500:	08019589 	.word	0x08019589
 8019504:	08019589 	.word	0x08019589
 8019508:	08019589 	.word	0x08019589
 801950c:	08019589 	.word	0x08019589
 8019510:	08019589 	.word	0x08019589
 8019514:	08019589 	.word	0x08019589
 8019518:	08019589 	.word	0x08019589
 801951c:	08019589 	.word	0x08019589
 8019520:	08019589 	.word	0x08019589
 8019524:	08019589 	.word	0x08019589
 8019528:	08019589 	.word	0x08019589
 801952c:	08019589 	.word	0x08019589
 8019530:	08019589 	.word	0x08019589
 8019534:	08019589 	.word	0x08019589
 8019538:	08019589 	.word	0x08019589
 801953c:	08019589 	.word	0x08019589
 8019540:	08019589 	.word	0x08019589
 8019544:	08019589 	.word	0x08019589
 8019548:	08019589 	.word	0x08019589
 801954c:	08019589 	.word	0x08019589
 8019550:	08019589 	.word	0x08019589
 8019554:	08019589 	.word	0x08019589
 8019558:	08019589 	.word	0x08019589
 801955c:	08019589 	.word	0x08019589
 8019560:	08019589 	.word	0x08019589
 8019564:	08019589 	.word	0x08019589
 8019568:	08019589 	.word	0x08019589
 801956c:	08019589 	.word	0x08019589
 8019570:	08019589 	.word	0x08019589
 8019574:	08019589 	.word	0x08019589
 8019578:	08019589 	.word	0x08019589
 801957c:	08019589 	.word	0x08019589
 8019580:	08019589 	.word	0x08019589
 8019584:	08019589 	.word	0x08019589
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8019588:	bf00      	nop
  }

  return (USBD_OK);
 801958a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801958c:	4618      	mov	r0, r3
 801958e:	370c      	adds	r7, #12
 8019590:	46bd      	mov	sp, r7
 8019592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019596:	4770      	bx	lr

08019598 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8019598:	b580      	push	{r7, lr}
 801959a:	b082      	sub	sp, #8
 801959c:	af00      	add	r7, sp, #0
 801959e:	6078      	str	r0, [r7, #4]
 80195a0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80195a2:	6879      	ldr	r1, [r7, #4]
 80195a4:	4805      	ldr	r0, [pc, #20]	; (80195bc <CDC_Receive_FS+0x24>)
 80195a6:	f7fe fd9e 	bl	80180e6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80195aa:	4804      	ldr	r0, [pc, #16]	; (80195bc <CDC_Receive_FS+0x24>)
 80195ac:	f7fe fdb4 	bl	8018118 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80195b0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80195b2:	4618      	mov	r0, r3
 80195b4:	3708      	adds	r7, #8
 80195b6:	46bd      	mov	sp, r7
 80195b8:	bd80      	pop	{r7, pc}
 80195ba:	bf00      	nop
 80195bc:	24001b5c 	.word	0x24001b5c

080195c0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80195c0:	b480      	push	{r7}
 80195c2:	b087      	sub	sp, #28
 80195c4:	af00      	add	r7, sp, #0
 80195c6:	60f8      	str	r0, [r7, #12]
 80195c8:	60b9      	str	r1, [r7, #8]
 80195ca:	4613      	mov	r3, r2
 80195cc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80195ce:	2300      	movs	r3, #0
 80195d0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80195d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80195d6:	4618      	mov	r0, r3
 80195d8:	371c      	adds	r7, #28
 80195da:	46bd      	mov	sp, r7
 80195dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195e0:	4770      	bx	lr
	...

080195e4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80195e4:	b480      	push	{r7}
 80195e6:	b083      	sub	sp, #12
 80195e8:	af00      	add	r7, sp, #0
 80195ea:	4603      	mov	r3, r0
 80195ec:	6039      	str	r1, [r7, #0]
 80195ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80195f0:	683b      	ldr	r3, [r7, #0]
 80195f2:	2212      	movs	r2, #18
 80195f4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80195f6:	4b03      	ldr	r3, [pc, #12]	; (8019604 <USBD_FS_DeviceDescriptor+0x20>)
}
 80195f8:	4618      	mov	r0, r3
 80195fa:	370c      	adds	r7, #12
 80195fc:	46bd      	mov	sp, r7
 80195fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019602:	4770      	bx	lr
 8019604:	24000150 	.word	0x24000150

08019608 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019608:	b480      	push	{r7}
 801960a:	b083      	sub	sp, #12
 801960c:	af00      	add	r7, sp, #0
 801960e:	4603      	mov	r3, r0
 8019610:	6039      	str	r1, [r7, #0]
 8019612:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8019614:	683b      	ldr	r3, [r7, #0]
 8019616:	2204      	movs	r2, #4
 8019618:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801961a:	4b03      	ldr	r3, [pc, #12]	; (8019628 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801961c:	4618      	mov	r0, r3
 801961e:	370c      	adds	r7, #12
 8019620:	46bd      	mov	sp, r7
 8019622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019626:	4770      	bx	lr
 8019628:	24000164 	.word	0x24000164

0801962c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801962c:	b580      	push	{r7, lr}
 801962e:	b082      	sub	sp, #8
 8019630:	af00      	add	r7, sp, #0
 8019632:	4603      	mov	r3, r0
 8019634:	6039      	str	r1, [r7, #0]
 8019636:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8019638:	79fb      	ldrb	r3, [r7, #7]
 801963a:	2b00      	cmp	r3, #0
 801963c:	d105      	bne.n	801964a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801963e:	683a      	ldr	r2, [r7, #0]
 8019640:	4907      	ldr	r1, [pc, #28]	; (8019660 <USBD_FS_ProductStrDescriptor+0x34>)
 8019642:	4808      	ldr	r0, [pc, #32]	; (8019664 <USBD_FS_ProductStrDescriptor+0x38>)
 8019644:	f7ff fe1b 	bl	801927e <USBD_GetString>
 8019648:	e004      	b.n	8019654 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801964a:	683a      	ldr	r2, [r7, #0]
 801964c:	4904      	ldr	r1, [pc, #16]	; (8019660 <USBD_FS_ProductStrDescriptor+0x34>)
 801964e:	4805      	ldr	r0, [pc, #20]	; (8019664 <USBD_FS_ProductStrDescriptor+0x38>)
 8019650:	f7ff fe15 	bl	801927e <USBD_GetString>
  }
  return USBD_StrDesc;
 8019654:	4b02      	ldr	r3, [pc, #8]	; (8019660 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8019656:	4618      	mov	r0, r3
 8019658:	3708      	adds	r7, #8
 801965a:	46bd      	mov	sp, r7
 801965c:	bd80      	pop	{r7, pc}
 801965e:	bf00      	nop
 8019660:	24002e2c 	.word	0x24002e2c
 8019664:	0801b2cc 	.word	0x0801b2cc

08019668 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019668:	b580      	push	{r7, lr}
 801966a:	b082      	sub	sp, #8
 801966c:	af00      	add	r7, sp, #0
 801966e:	4603      	mov	r3, r0
 8019670:	6039      	str	r1, [r7, #0]
 8019672:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8019674:	683a      	ldr	r2, [r7, #0]
 8019676:	4904      	ldr	r1, [pc, #16]	; (8019688 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8019678:	4804      	ldr	r0, [pc, #16]	; (801968c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801967a:	f7ff fe00 	bl	801927e <USBD_GetString>
  return USBD_StrDesc;
 801967e:	4b02      	ldr	r3, [pc, #8]	; (8019688 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8019680:	4618      	mov	r0, r3
 8019682:	3708      	adds	r7, #8
 8019684:	46bd      	mov	sp, r7
 8019686:	bd80      	pop	{r7, pc}
 8019688:	24002e2c 	.word	0x24002e2c
 801968c:	0801b2e4 	.word	0x0801b2e4

08019690 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019690:	b580      	push	{r7, lr}
 8019692:	b082      	sub	sp, #8
 8019694:	af00      	add	r7, sp, #0
 8019696:	4603      	mov	r3, r0
 8019698:	6039      	str	r1, [r7, #0]
 801969a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801969c:	683b      	ldr	r3, [r7, #0]
 801969e:	221a      	movs	r2, #26
 80196a0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80196a2:	f000 f843 	bl	801972c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80196a6:	4b02      	ldr	r3, [pc, #8]	; (80196b0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80196a8:	4618      	mov	r0, r3
 80196aa:	3708      	adds	r7, #8
 80196ac:	46bd      	mov	sp, r7
 80196ae:	bd80      	pop	{r7, pc}
 80196b0:	24000168 	.word	0x24000168

080196b4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80196b4:	b580      	push	{r7, lr}
 80196b6:	b082      	sub	sp, #8
 80196b8:	af00      	add	r7, sp, #0
 80196ba:	4603      	mov	r3, r0
 80196bc:	6039      	str	r1, [r7, #0]
 80196be:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80196c0:	79fb      	ldrb	r3, [r7, #7]
 80196c2:	2b00      	cmp	r3, #0
 80196c4:	d105      	bne.n	80196d2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80196c6:	683a      	ldr	r2, [r7, #0]
 80196c8:	4907      	ldr	r1, [pc, #28]	; (80196e8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80196ca:	4808      	ldr	r0, [pc, #32]	; (80196ec <USBD_FS_ConfigStrDescriptor+0x38>)
 80196cc:	f7ff fdd7 	bl	801927e <USBD_GetString>
 80196d0:	e004      	b.n	80196dc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80196d2:	683a      	ldr	r2, [r7, #0]
 80196d4:	4904      	ldr	r1, [pc, #16]	; (80196e8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80196d6:	4805      	ldr	r0, [pc, #20]	; (80196ec <USBD_FS_ConfigStrDescriptor+0x38>)
 80196d8:	f7ff fdd1 	bl	801927e <USBD_GetString>
  }
  return USBD_StrDesc;
 80196dc:	4b02      	ldr	r3, [pc, #8]	; (80196e8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80196de:	4618      	mov	r0, r3
 80196e0:	3708      	adds	r7, #8
 80196e2:	46bd      	mov	sp, r7
 80196e4:	bd80      	pop	{r7, pc}
 80196e6:	bf00      	nop
 80196e8:	24002e2c 	.word	0x24002e2c
 80196ec:	0801b2f8 	.word	0x0801b2f8

080196f0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80196f0:	b580      	push	{r7, lr}
 80196f2:	b082      	sub	sp, #8
 80196f4:	af00      	add	r7, sp, #0
 80196f6:	4603      	mov	r3, r0
 80196f8:	6039      	str	r1, [r7, #0]
 80196fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80196fc:	79fb      	ldrb	r3, [r7, #7]
 80196fe:	2b00      	cmp	r3, #0
 8019700:	d105      	bne.n	801970e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8019702:	683a      	ldr	r2, [r7, #0]
 8019704:	4907      	ldr	r1, [pc, #28]	; (8019724 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8019706:	4808      	ldr	r0, [pc, #32]	; (8019728 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8019708:	f7ff fdb9 	bl	801927e <USBD_GetString>
 801970c:	e004      	b.n	8019718 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801970e:	683a      	ldr	r2, [r7, #0]
 8019710:	4904      	ldr	r1, [pc, #16]	; (8019724 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8019712:	4805      	ldr	r0, [pc, #20]	; (8019728 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8019714:	f7ff fdb3 	bl	801927e <USBD_GetString>
  }
  return USBD_StrDesc;
 8019718:	4b02      	ldr	r3, [pc, #8]	; (8019724 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801971a:	4618      	mov	r0, r3
 801971c:	3708      	adds	r7, #8
 801971e:	46bd      	mov	sp, r7
 8019720:	bd80      	pop	{r7, pc}
 8019722:	bf00      	nop
 8019724:	24002e2c 	.word	0x24002e2c
 8019728:	0801b304 	.word	0x0801b304

0801972c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801972c:	b580      	push	{r7, lr}
 801972e:	b084      	sub	sp, #16
 8019730:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8019732:	4b0f      	ldr	r3, [pc, #60]	; (8019770 <Get_SerialNum+0x44>)
 8019734:	681b      	ldr	r3, [r3, #0]
 8019736:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8019738:	4b0e      	ldr	r3, [pc, #56]	; (8019774 <Get_SerialNum+0x48>)
 801973a:	681b      	ldr	r3, [r3, #0]
 801973c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801973e:	4b0e      	ldr	r3, [pc, #56]	; (8019778 <Get_SerialNum+0x4c>)
 8019740:	681b      	ldr	r3, [r3, #0]
 8019742:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8019744:	68fa      	ldr	r2, [r7, #12]
 8019746:	687b      	ldr	r3, [r7, #4]
 8019748:	4413      	add	r3, r2
 801974a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801974c:	68fb      	ldr	r3, [r7, #12]
 801974e:	2b00      	cmp	r3, #0
 8019750:	d009      	beq.n	8019766 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8019752:	2208      	movs	r2, #8
 8019754:	4909      	ldr	r1, [pc, #36]	; (801977c <Get_SerialNum+0x50>)
 8019756:	68f8      	ldr	r0, [r7, #12]
 8019758:	f000 f814 	bl	8019784 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801975c:	2204      	movs	r2, #4
 801975e:	4908      	ldr	r1, [pc, #32]	; (8019780 <Get_SerialNum+0x54>)
 8019760:	68b8      	ldr	r0, [r7, #8]
 8019762:	f000 f80f 	bl	8019784 <IntToUnicode>
  }
}
 8019766:	bf00      	nop
 8019768:	3710      	adds	r7, #16
 801976a:	46bd      	mov	sp, r7
 801976c:	bd80      	pop	{r7, pc}
 801976e:	bf00      	nop
 8019770:	1ff1e800 	.word	0x1ff1e800
 8019774:	1ff1e804 	.word	0x1ff1e804
 8019778:	1ff1e808 	.word	0x1ff1e808
 801977c:	2400016a 	.word	0x2400016a
 8019780:	2400017a 	.word	0x2400017a

08019784 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8019784:	b480      	push	{r7}
 8019786:	b087      	sub	sp, #28
 8019788:	af00      	add	r7, sp, #0
 801978a:	60f8      	str	r0, [r7, #12]
 801978c:	60b9      	str	r1, [r7, #8]
 801978e:	4613      	mov	r3, r2
 8019790:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8019792:	2300      	movs	r3, #0
 8019794:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8019796:	2300      	movs	r3, #0
 8019798:	75fb      	strb	r3, [r7, #23]
 801979a:	e027      	b.n	80197ec <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801979c:	68fb      	ldr	r3, [r7, #12]
 801979e:	0f1b      	lsrs	r3, r3, #28
 80197a0:	2b09      	cmp	r3, #9
 80197a2:	d80b      	bhi.n	80197bc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80197a4:	68fb      	ldr	r3, [r7, #12]
 80197a6:	0f1b      	lsrs	r3, r3, #28
 80197a8:	b2da      	uxtb	r2, r3
 80197aa:	7dfb      	ldrb	r3, [r7, #23]
 80197ac:	005b      	lsls	r3, r3, #1
 80197ae:	4619      	mov	r1, r3
 80197b0:	68bb      	ldr	r3, [r7, #8]
 80197b2:	440b      	add	r3, r1
 80197b4:	3230      	adds	r2, #48	; 0x30
 80197b6:	b2d2      	uxtb	r2, r2
 80197b8:	701a      	strb	r2, [r3, #0]
 80197ba:	e00a      	b.n	80197d2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80197bc:	68fb      	ldr	r3, [r7, #12]
 80197be:	0f1b      	lsrs	r3, r3, #28
 80197c0:	b2da      	uxtb	r2, r3
 80197c2:	7dfb      	ldrb	r3, [r7, #23]
 80197c4:	005b      	lsls	r3, r3, #1
 80197c6:	4619      	mov	r1, r3
 80197c8:	68bb      	ldr	r3, [r7, #8]
 80197ca:	440b      	add	r3, r1
 80197cc:	3237      	adds	r2, #55	; 0x37
 80197ce:	b2d2      	uxtb	r2, r2
 80197d0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80197d2:	68fb      	ldr	r3, [r7, #12]
 80197d4:	011b      	lsls	r3, r3, #4
 80197d6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80197d8:	7dfb      	ldrb	r3, [r7, #23]
 80197da:	005b      	lsls	r3, r3, #1
 80197dc:	3301      	adds	r3, #1
 80197de:	68ba      	ldr	r2, [r7, #8]
 80197e0:	4413      	add	r3, r2
 80197e2:	2200      	movs	r2, #0
 80197e4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80197e6:	7dfb      	ldrb	r3, [r7, #23]
 80197e8:	3301      	adds	r3, #1
 80197ea:	75fb      	strb	r3, [r7, #23]
 80197ec:	7dfa      	ldrb	r2, [r7, #23]
 80197ee:	79fb      	ldrb	r3, [r7, #7]
 80197f0:	429a      	cmp	r2, r3
 80197f2:	d3d3      	bcc.n	801979c <IntToUnicode+0x18>
  }
}
 80197f4:	bf00      	nop
 80197f6:	bf00      	nop
 80197f8:	371c      	adds	r7, #28
 80197fa:	46bd      	mov	sp, r7
 80197fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019800:	4770      	bx	lr
	...

08019804 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8019804:	b580      	push	{r7, lr}
 8019806:	b0b8      	sub	sp, #224	; 0xe0
 8019808:	af00      	add	r7, sp, #0
 801980a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801980c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8019810:	2200      	movs	r2, #0
 8019812:	601a      	str	r2, [r3, #0]
 8019814:	605a      	str	r2, [r3, #4]
 8019816:	609a      	str	r2, [r3, #8]
 8019818:	60da      	str	r2, [r3, #12]
 801981a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801981c:	f107 0310 	add.w	r3, r7, #16
 8019820:	22bc      	movs	r2, #188	; 0xbc
 8019822:	2100      	movs	r1, #0
 8019824:	4618      	mov	r0, r3
 8019826:	f000 fbe9 	bl	8019ffc <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 801982a:	687b      	ldr	r3, [r7, #4]
 801982c:	681b      	ldr	r3, [r3, #0]
 801982e:	4a2f      	ldr	r2, [pc, #188]	; (80198ec <HAL_PCD_MspInit+0xe8>)
 8019830:	4293      	cmp	r3, r2
 8019832:	d156      	bne.n	80198e2 <HAL_PCD_MspInit+0xde>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8019834:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8019838:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 801983a:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 801983e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8019842:	f107 0310 	add.w	r3, r7, #16
 8019846:	4618      	mov	r0, r3
 8019848:	f7f6 fcd2 	bl	80101f0 <HAL_RCCEx_PeriphCLKConfig>
 801984c:	4603      	mov	r3, r0
 801984e:	2b00      	cmp	r3, #0
 8019850:	d001      	beq.n	8019856 <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 8019852:	f7ef fa51 	bl	8008cf8 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8019856:	f7f5 fd01 	bl	800f25c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801985a:	4b25      	ldr	r3, [pc, #148]	; (80198f0 <HAL_PCD_MspInit+0xec>)
 801985c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8019860:	4a23      	ldr	r2, [pc, #140]	; (80198f0 <HAL_PCD_MspInit+0xec>)
 8019862:	f043 0301 	orr.w	r3, r3, #1
 8019866:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801986a:	4b21      	ldr	r3, [pc, #132]	; (80198f0 <HAL_PCD_MspInit+0xec>)
 801986c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8019870:	f003 0301 	and.w	r3, r3, #1
 8019874:	60fb      	str	r3, [r7, #12]
 8019876:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8019878:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801987c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8019880:	2302      	movs	r3, #2
 8019882:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019886:	2300      	movs	r3, #0
 8019888:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801988c:	2300      	movs	r3, #0
 801988e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8019892:	230a      	movs	r3, #10
 8019894:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8019898:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 801989c:	4619      	mov	r1, r3
 801989e:	4815      	ldr	r0, [pc, #84]	; (80198f4 <HAL_PCD_MspInit+0xf0>)
 80198a0:	f7f3 f95c 	bl	800cb5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80198a4:	4b12      	ldr	r3, [pc, #72]	; (80198f0 <HAL_PCD_MspInit+0xec>)
 80198a6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80198aa:	4a11      	ldr	r2, [pc, #68]	; (80198f0 <HAL_PCD_MspInit+0xec>)
 80198ac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80198b0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80198b4:	4b0e      	ldr	r3, [pc, #56]	; (80198f0 <HAL_PCD_MspInit+0xec>)
 80198b6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80198ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80198be:	60bb      	str	r3, [r7, #8]
 80198c0:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_EP1_OUT_IRQn, 0, 0);
 80198c2:	2200      	movs	r2, #0
 80198c4:	2100      	movs	r1, #0
 80198c6:	2062      	movs	r0, #98	; 0x62
 80198c8:	f7f0 fd69 	bl	800a39e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_EP1_OUT_IRQn);
 80198cc:	2062      	movs	r0, #98	; 0x62
 80198ce:	f7f0 fd80 	bl	800a3d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80198d2:	2200      	movs	r2, #0
 80198d4:	2100      	movs	r1, #0
 80198d6:	2065      	movs	r0, #101	; 0x65
 80198d8:	f7f0 fd61 	bl	800a39e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80198dc:	2065      	movs	r0, #101	; 0x65
 80198de:	f7f0 fd78 	bl	800a3d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80198e2:	bf00      	nop
 80198e4:	37e0      	adds	r7, #224	; 0xe0
 80198e6:	46bd      	mov	sp, r7
 80198e8:	bd80      	pop	{r7, pc}
 80198ea:	bf00      	nop
 80198ec:	40080000 	.word	0x40080000
 80198f0:	58024400 	.word	0x58024400
 80198f4:	58020000 	.word	0x58020000

080198f8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80198f8:	b580      	push	{r7, lr}
 80198fa:	b082      	sub	sp, #8
 80198fc:	af00      	add	r7, sp, #0
 80198fe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8019900:	687b      	ldr	r3, [r7, #4]
 8019902:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8019906:	687b      	ldr	r3, [r7, #4]
 8019908:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801990c:	4619      	mov	r1, r3
 801990e:	4610      	mov	r0, r2
 8019910:	f7fe fcce 	bl	80182b0 <USBD_LL_SetupStage>
}
 8019914:	bf00      	nop
 8019916:	3708      	adds	r7, #8
 8019918:	46bd      	mov	sp, r7
 801991a:	bd80      	pop	{r7, pc}

0801991c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801991c:	b580      	push	{r7, lr}
 801991e:	b082      	sub	sp, #8
 8019920:	af00      	add	r7, sp, #0
 8019922:	6078      	str	r0, [r7, #4]
 8019924:	460b      	mov	r3, r1
 8019926:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8019928:	687b      	ldr	r3, [r7, #4]
 801992a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801992e:	78fa      	ldrb	r2, [r7, #3]
 8019930:	6879      	ldr	r1, [r7, #4]
 8019932:	4613      	mov	r3, r2
 8019934:	00db      	lsls	r3, r3, #3
 8019936:	1a9b      	subs	r3, r3, r2
 8019938:	009b      	lsls	r3, r3, #2
 801993a:	440b      	add	r3, r1
 801993c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8019940:	681a      	ldr	r2, [r3, #0]
 8019942:	78fb      	ldrb	r3, [r7, #3]
 8019944:	4619      	mov	r1, r3
 8019946:	f7fe fd08 	bl	801835a <USBD_LL_DataOutStage>
}
 801994a:	bf00      	nop
 801994c:	3708      	adds	r7, #8
 801994e:	46bd      	mov	sp, r7
 8019950:	bd80      	pop	{r7, pc}

08019952 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019952:	b580      	push	{r7, lr}
 8019954:	b082      	sub	sp, #8
 8019956:	af00      	add	r7, sp, #0
 8019958:	6078      	str	r0, [r7, #4]
 801995a:	460b      	mov	r3, r1
 801995c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801995e:	687b      	ldr	r3, [r7, #4]
 8019960:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8019964:	78fa      	ldrb	r2, [r7, #3]
 8019966:	6879      	ldr	r1, [r7, #4]
 8019968:	4613      	mov	r3, r2
 801996a:	00db      	lsls	r3, r3, #3
 801996c:	1a9b      	subs	r3, r3, r2
 801996e:	009b      	lsls	r3, r3, #2
 8019970:	440b      	add	r3, r1
 8019972:	3348      	adds	r3, #72	; 0x48
 8019974:	681a      	ldr	r2, [r3, #0]
 8019976:	78fb      	ldrb	r3, [r7, #3]
 8019978:	4619      	mov	r1, r3
 801997a:	f7fe fd51 	bl	8018420 <USBD_LL_DataInStage>
}
 801997e:	bf00      	nop
 8019980:	3708      	adds	r7, #8
 8019982:	46bd      	mov	sp, r7
 8019984:	bd80      	pop	{r7, pc}

08019986 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019986:	b580      	push	{r7, lr}
 8019988:	b082      	sub	sp, #8
 801998a:	af00      	add	r7, sp, #0
 801998c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801998e:	687b      	ldr	r3, [r7, #4]
 8019990:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8019994:	4618      	mov	r0, r3
 8019996:	f7fe fe65 	bl	8018664 <USBD_LL_SOF>
}
 801999a:	bf00      	nop
 801999c:	3708      	adds	r7, #8
 801999e:	46bd      	mov	sp, r7
 80199a0:	bd80      	pop	{r7, pc}

080199a2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80199a2:	b580      	push	{r7, lr}
 80199a4:	b084      	sub	sp, #16
 80199a6:	af00      	add	r7, sp, #0
 80199a8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80199aa:	2301      	movs	r3, #1
 80199ac:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80199ae:	687b      	ldr	r3, [r7, #4]
 80199b0:	68db      	ldr	r3, [r3, #12]
 80199b2:	2b00      	cmp	r3, #0
 80199b4:	d102      	bne.n	80199bc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80199b6:	2300      	movs	r3, #0
 80199b8:	73fb      	strb	r3, [r7, #15]
 80199ba:	e008      	b.n	80199ce <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80199bc:	687b      	ldr	r3, [r7, #4]
 80199be:	68db      	ldr	r3, [r3, #12]
 80199c0:	2b02      	cmp	r3, #2
 80199c2:	d102      	bne.n	80199ca <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80199c4:	2301      	movs	r3, #1
 80199c6:	73fb      	strb	r3, [r7, #15]
 80199c8:	e001      	b.n	80199ce <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80199ca:	f7ef f995 	bl	8008cf8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80199ce:	687b      	ldr	r3, [r7, #4]
 80199d0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80199d4:	7bfa      	ldrb	r2, [r7, #15]
 80199d6:	4611      	mov	r1, r2
 80199d8:	4618      	mov	r0, r3
 80199da:	f7fe fe05 	bl	80185e8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80199de:	687b      	ldr	r3, [r7, #4]
 80199e0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80199e4:	4618      	mov	r0, r3
 80199e6:	f7fe fdb1 	bl	801854c <USBD_LL_Reset>
}
 80199ea:	bf00      	nop
 80199ec:	3710      	adds	r7, #16
 80199ee:	46bd      	mov	sp, r7
 80199f0:	bd80      	pop	{r7, pc}
	...

080199f4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80199f4:	b580      	push	{r7, lr}
 80199f6:	b082      	sub	sp, #8
 80199f8:	af00      	add	r7, sp, #0
 80199fa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80199fc:	687b      	ldr	r3, [r7, #4]
 80199fe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8019a02:	4618      	mov	r0, r3
 8019a04:	f7fe fe00 	bl	8018608 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8019a08:	687b      	ldr	r3, [r7, #4]
 8019a0a:	681b      	ldr	r3, [r3, #0]
 8019a0c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8019a10:	681b      	ldr	r3, [r3, #0]
 8019a12:	687a      	ldr	r2, [r7, #4]
 8019a14:	6812      	ldr	r2, [r2, #0]
 8019a16:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8019a1a:	f043 0301 	orr.w	r3, r3, #1
 8019a1e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8019a20:	687b      	ldr	r3, [r7, #4]
 8019a22:	6a1b      	ldr	r3, [r3, #32]
 8019a24:	2b00      	cmp	r3, #0
 8019a26:	d005      	beq.n	8019a34 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8019a28:	4b04      	ldr	r3, [pc, #16]	; (8019a3c <HAL_PCD_SuspendCallback+0x48>)
 8019a2a:	691b      	ldr	r3, [r3, #16]
 8019a2c:	4a03      	ldr	r2, [pc, #12]	; (8019a3c <HAL_PCD_SuspendCallback+0x48>)
 8019a2e:	f043 0306 	orr.w	r3, r3, #6
 8019a32:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8019a34:	bf00      	nop
 8019a36:	3708      	adds	r7, #8
 8019a38:	46bd      	mov	sp, r7
 8019a3a:	bd80      	pop	{r7, pc}
 8019a3c:	e000ed00 	.word	0xe000ed00

08019a40 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019a40:	b580      	push	{r7, lr}
 8019a42:	b082      	sub	sp, #8
 8019a44:	af00      	add	r7, sp, #0
 8019a46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8019a48:	687b      	ldr	r3, [r7, #4]
 8019a4a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8019a4e:	4618      	mov	r0, r3
 8019a50:	f7fe fdf0 	bl	8018634 <USBD_LL_Resume>
}
 8019a54:	bf00      	nop
 8019a56:	3708      	adds	r7, #8
 8019a58:	46bd      	mov	sp, r7
 8019a5a:	bd80      	pop	{r7, pc}

08019a5c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019a5c:	b580      	push	{r7, lr}
 8019a5e:	b082      	sub	sp, #8
 8019a60:	af00      	add	r7, sp, #0
 8019a62:	6078      	str	r0, [r7, #4]
 8019a64:	460b      	mov	r3, r1
 8019a66:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8019a68:	687b      	ldr	r3, [r7, #4]
 8019a6a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8019a6e:	78fa      	ldrb	r2, [r7, #3]
 8019a70:	4611      	mov	r1, r2
 8019a72:	4618      	mov	r0, r3
 8019a74:	f7fe fe3e 	bl	80186f4 <USBD_LL_IsoOUTIncomplete>
}
 8019a78:	bf00      	nop
 8019a7a:	3708      	adds	r7, #8
 8019a7c:	46bd      	mov	sp, r7
 8019a7e:	bd80      	pop	{r7, pc}

08019a80 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019a80:	b580      	push	{r7, lr}
 8019a82:	b082      	sub	sp, #8
 8019a84:	af00      	add	r7, sp, #0
 8019a86:	6078      	str	r0, [r7, #4]
 8019a88:	460b      	mov	r3, r1
 8019a8a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8019a8c:	687b      	ldr	r3, [r7, #4]
 8019a8e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8019a92:	78fa      	ldrb	r2, [r7, #3]
 8019a94:	4611      	mov	r1, r2
 8019a96:	4618      	mov	r0, r3
 8019a98:	f7fe fe06 	bl	80186a8 <USBD_LL_IsoINIncomplete>
}
 8019a9c:	bf00      	nop
 8019a9e:	3708      	adds	r7, #8
 8019aa0:	46bd      	mov	sp, r7
 8019aa2:	bd80      	pop	{r7, pc}

08019aa4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019aa4:	b580      	push	{r7, lr}
 8019aa6:	b082      	sub	sp, #8
 8019aa8:	af00      	add	r7, sp, #0
 8019aaa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8019aac:	687b      	ldr	r3, [r7, #4]
 8019aae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8019ab2:	4618      	mov	r0, r3
 8019ab4:	f7fe fe44 	bl	8018740 <USBD_LL_DevConnected>
}
 8019ab8:	bf00      	nop
 8019aba:	3708      	adds	r7, #8
 8019abc:	46bd      	mov	sp, r7
 8019abe:	bd80      	pop	{r7, pc}

08019ac0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019ac0:	b580      	push	{r7, lr}
 8019ac2:	b082      	sub	sp, #8
 8019ac4:	af00      	add	r7, sp, #0
 8019ac6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8019ac8:	687b      	ldr	r3, [r7, #4]
 8019aca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8019ace:	4618      	mov	r0, r3
 8019ad0:	f7fe fe41 	bl	8018756 <USBD_LL_DevDisconnected>
}
 8019ad4:	bf00      	nop
 8019ad6:	3708      	adds	r7, #8
 8019ad8:	46bd      	mov	sp, r7
 8019ada:	bd80      	pop	{r7, pc}

08019adc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8019adc:	b580      	push	{r7, lr}
 8019ade:	b082      	sub	sp, #8
 8019ae0:	af00      	add	r7, sp, #0
 8019ae2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8019ae4:	687b      	ldr	r3, [r7, #4]
 8019ae6:	781b      	ldrb	r3, [r3, #0]
 8019ae8:	2b00      	cmp	r3, #0
 8019aea:	d13e      	bne.n	8019b6a <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8019aec:	4a21      	ldr	r2, [pc, #132]	; (8019b74 <USBD_LL_Init+0x98>)
 8019aee:	687b      	ldr	r3, [r7, #4]
 8019af0:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8019af4:	687b      	ldr	r3, [r7, #4]
 8019af6:	4a1f      	ldr	r2, [pc, #124]	; (8019b74 <USBD_LL_Init+0x98>)
 8019af8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8019afc:	4b1d      	ldr	r3, [pc, #116]	; (8019b74 <USBD_LL_Init+0x98>)
 8019afe:	4a1e      	ldr	r2, [pc, #120]	; (8019b78 <USBD_LL_Init+0x9c>)
 8019b00:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8019b02:	4b1c      	ldr	r3, [pc, #112]	; (8019b74 <USBD_LL_Init+0x98>)
 8019b04:	2209      	movs	r2, #9
 8019b06:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8019b08:	4b1a      	ldr	r3, [pc, #104]	; (8019b74 <USBD_LL_Init+0x98>)
 8019b0a:	2202      	movs	r2, #2
 8019b0c:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8019b0e:	4b19      	ldr	r3, [pc, #100]	; (8019b74 <USBD_LL_Init+0x98>)
 8019b10:	2200      	movs	r2, #0
 8019b12:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8019b14:	4b17      	ldr	r3, [pc, #92]	; (8019b74 <USBD_LL_Init+0x98>)
 8019b16:	2202      	movs	r2, #2
 8019b18:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8019b1a:	4b16      	ldr	r3, [pc, #88]	; (8019b74 <USBD_LL_Init+0x98>)
 8019b1c:	2200      	movs	r2, #0
 8019b1e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8019b20:	4b14      	ldr	r3, [pc, #80]	; (8019b74 <USBD_LL_Init+0x98>)
 8019b22:	2200      	movs	r2, #0
 8019b24:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8019b26:	4b13      	ldr	r3, [pc, #76]	; (8019b74 <USBD_LL_Init+0x98>)
 8019b28:	2200      	movs	r2, #0
 8019b2a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8019b2c:	4b11      	ldr	r3, [pc, #68]	; (8019b74 <USBD_LL_Init+0x98>)
 8019b2e:	2200      	movs	r2, #0
 8019b30:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8019b32:	4b10      	ldr	r3, [pc, #64]	; (8019b74 <USBD_LL_Init+0x98>)
 8019b34:	2200      	movs	r2, #0
 8019b36:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8019b38:	4b0e      	ldr	r3, [pc, #56]	; (8019b74 <USBD_LL_Init+0x98>)
 8019b3a:	2200      	movs	r2, #0
 8019b3c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8019b3e:	480d      	ldr	r0, [pc, #52]	; (8019b74 <USBD_LL_Init+0x98>)
 8019b40:	f7f4 f982 	bl	800de48 <HAL_PCD_Init>
 8019b44:	4603      	mov	r3, r0
 8019b46:	2b00      	cmp	r3, #0
 8019b48:	d001      	beq.n	8019b4e <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8019b4a:	f7ef f8d5 	bl	8008cf8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8019b4e:	2180      	movs	r1, #128	; 0x80
 8019b50:	4808      	ldr	r0, [pc, #32]	; (8019b74 <USBD_LL_Init+0x98>)
 8019b52:	f7f5 fb08 	bl	800f166 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8019b56:	2240      	movs	r2, #64	; 0x40
 8019b58:	2100      	movs	r1, #0
 8019b5a:	4806      	ldr	r0, [pc, #24]	; (8019b74 <USBD_LL_Init+0x98>)
 8019b5c:	f7f5 fabc 	bl	800f0d8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8019b60:	2280      	movs	r2, #128	; 0x80
 8019b62:	2101      	movs	r1, #1
 8019b64:	4803      	ldr	r0, [pc, #12]	; (8019b74 <USBD_LL_Init+0x98>)
 8019b66:	f7f5 fab7 	bl	800f0d8 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 8019b6a:	2300      	movs	r3, #0
}
 8019b6c:	4618      	mov	r0, r3
 8019b6e:	3708      	adds	r7, #8
 8019b70:	46bd      	mov	sp, r7
 8019b72:	bd80      	pop	{r7, pc}
 8019b74:	2400302c 	.word	0x2400302c
 8019b78:	40080000 	.word	0x40080000

08019b7c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8019b7c:	b580      	push	{r7, lr}
 8019b7e:	b084      	sub	sp, #16
 8019b80:	af00      	add	r7, sp, #0
 8019b82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019b84:	2300      	movs	r3, #0
 8019b86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019b88:	2300      	movs	r3, #0
 8019b8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8019b8c:	687b      	ldr	r3, [r7, #4]
 8019b8e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019b92:	4618      	mov	r0, r3
 8019b94:	f7f4 fa7c 	bl	800e090 <HAL_PCD_Start>
 8019b98:	4603      	mov	r3, r0
 8019b9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019b9c:	7bfb      	ldrb	r3, [r7, #15]
 8019b9e:	4618      	mov	r0, r3
 8019ba0:	f000 f942 	bl	8019e28 <USBD_Get_USB_Status>
 8019ba4:	4603      	mov	r3, r0
 8019ba6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019ba8:	7bbb      	ldrb	r3, [r7, #14]
}
 8019baa:	4618      	mov	r0, r3
 8019bac:	3710      	adds	r7, #16
 8019bae:	46bd      	mov	sp, r7
 8019bb0:	bd80      	pop	{r7, pc}

08019bb2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8019bb2:	b580      	push	{r7, lr}
 8019bb4:	b084      	sub	sp, #16
 8019bb6:	af00      	add	r7, sp, #0
 8019bb8:	6078      	str	r0, [r7, #4]
 8019bba:	4608      	mov	r0, r1
 8019bbc:	4611      	mov	r1, r2
 8019bbe:	461a      	mov	r2, r3
 8019bc0:	4603      	mov	r3, r0
 8019bc2:	70fb      	strb	r3, [r7, #3]
 8019bc4:	460b      	mov	r3, r1
 8019bc6:	70bb      	strb	r3, [r7, #2]
 8019bc8:	4613      	mov	r3, r2
 8019bca:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019bcc:	2300      	movs	r3, #0
 8019bce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019bd0:	2300      	movs	r3, #0
 8019bd2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8019bd4:	687b      	ldr	r3, [r7, #4]
 8019bd6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8019bda:	78bb      	ldrb	r3, [r7, #2]
 8019bdc:	883a      	ldrh	r2, [r7, #0]
 8019bde:	78f9      	ldrb	r1, [r7, #3]
 8019be0:	f7f4 fe81 	bl	800e8e6 <HAL_PCD_EP_Open>
 8019be4:	4603      	mov	r3, r0
 8019be6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019be8:	7bfb      	ldrb	r3, [r7, #15]
 8019bea:	4618      	mov	r0, r3
 8019bec:	f000 f91c 	bl	8019e28 <USBD_Get_USB_Status>
 8019bf0:	4603      	mov	r3, r0
 8019bf2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019bf4:	7bbb      	ldrb	r3, [r7, #14]
}
 8019bf6:	4618      	mov	r0, r3
 8019bf8:	3710      	adds	r7, #16
 8019bfa:	46bd      	mov	sp, r7
 8019bfc:	bd80      	pop	{r7, pc}

08019bfe <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019bfe:	b580      	push	{r7, lr}
 8019c00:	b084      	sub	sp, #16
 8019c02:	af00      	add	r7, sp, #0
 8019c04:	6078      	str	r0, [r7, #4]
 8019c06:	460b      	mov	r3, r1
 8019c08:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019c0a:	2300      	movs	r3, #0
 8019c0c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019c0e:	2300      	movs	r3, #0
 8019c10:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8019c12:	687b      	ldr	r3, [r7, #4]
 8019c14:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019c18:	78fa      	ldrb	r2, [r7, #3]
 8019c1a:	4611      	mov	r1, r2
 8019c1c:	4618      	mov	r0, r3
 8019c1e:	f7f4 feca 	bl	800e9b6 <HAL_PCD_EP_Close>
 8019c22:	4603      	mov	r3, r0
 8019c24:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019c26:	7bfb      	ldrb	r3, [r7, #15]
 8019c28:	4618      	mov	r0, r3
 8019c2a:	f000 f8fd 	bl	8019e28 <USBD_Get_USB_Status>
 8019c2e:	4603      	mov	r3, r0
 8019c30:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019c32:	7bbb      	ldrb	r3, [r7, #14]
}
 8019c34:	4618      	mov	r0, r3
 8019c36:	3710      	adds	r7, #16
 8019c38:	46bd      	mov	sp, r7
 8019c3a:	bd80      	pop	{r7, pc}

08019c3c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019c3c:	b580      	push	{r7, lr}
 8019c3e:	b084      	sub	sp, #16
 8019c40:	af00      	add	r7, sp, #0
 8019c42:	6078      	str	r0, [r7, #4]
 8019c44:	460b      	mov	r3, r1
 8019c46:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019c48:	2300      	movs	r3, #0
 8019c4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019c4c:	2300      	movs	r3, #0
 8019c4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8019c50:	687b      	ldr	r3, [r7, #4]
 8019c52:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019c56:	78fa      	ldrb	r2, [r7, #3]
 8019c58:	4611      	mov	r1, r2
 8019c5a:	4618      	mov	r0, r3
 8019c5c:	f7f4 ffa2 	bl	800eba4 <HAL_PCD_EP_SetStall>
 8019c60:	4603      	mov	r3, r0
 8019c62:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019c64:	7bfb      	ldrb	r3, [r7, #15]
 8019c66:	4618      	mov	r0, r3
 8019c68:	f000 f8de 	bl	8019e28 <USBD_Get_USB_Status>
 8019c6c:	4603      	mov	r3, r0
 8019c6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019c70:	7bbb      	ldrb	r3, [r7, #14]
}
 8019c72:	4618      	mov	r0, r3
 8019c74:	3710      	adds	r7, #16
 8019c76:	46bd      	mov	sp, r7
 8019c78:	bd80      	pop	{r7, pc}

08019c7a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019c7a:	b580      	push	{r7, lr}
 8019c7c:	b084      	sub	sp, #16
 8019c7e:	af00      	add	r7, sp, #0
 8019c80:	6078      	str	r0, [r7, #4]
 8019c82:	460b      	mov	r3, r1
 8019c84:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019c86:	2300      	movs	r3, #0
 8019c88:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019c8a:	2300      	movs	r3, #0
 8019c8c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8019c8e:	687b      	ldr	r3, [r7, #4]
 8019c90:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019c94:	78fa      	ldrb	r2, [r7, #3]
 8019c96:	4611      	mov	r1, r2
 8019c98:	4618      	mov	r0, r3
 8019c9a:	f7f4 ffe7 	bl	800ec6c <HAL_PCD_EP_ClrStall>
 8019c9e:	4603      	mov	r3, r0
 8019ca0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019ca2:	7bfb      	ldrb	r3, [r7, #15]
 8019ca4:	4618      	mov	r0, r3
 8019ca6:	f000 f8bf 	bl	8019e28 <USBD_Get_USB_Status>
 8019caa:	4603      	mov	r3, r0
 8019cac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019cae:	7bbb      	ldrb	r3, [r7, #14]
}
 8019cb0:	4618      	mov	r0, r3
 8019cb2:	3710      	adds	r7, #16
 8019cb4:	46bd      	mov	sp, r7
 8019cb6:	bd80      	pop	{r7, pc}

08019cb8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019cb8:	b480      	push	{r7}
 8019cba:	b085      	sub	sp, #20
 8019cbc:	af00      	add	r7, sp, #0
 8019cbe:	6078      	str	r0, [r7, #4]
 8019cc0:	460b      	mov	r3, r1
 8019cc2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8019cc4:	687b      	ldr	r3, [r7, #4]
 8019cc6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019cca:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8019ccc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8019cd0:	2b00      	cmp	r3, #0
 8019cd2:	da0b      	bge.n	8019cec <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8019cd4:	78fb      	ldrb	r3, [r7, #3]
 8019cd6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8019cda:	68f9      	ldr	r1, [r7, #12]
 8019cdc:	4613      	mov	r3, r2
 8019cde:	00db      	lsls	r3, r3, #3
 8019ce0:	1a9b      	subs	r3, r3, r2
 8019ce2:	009b      	lsls	r3, r3, #2
 8019ce4:	440b      	add	r3, r1
 8019ce6:	333e      	adds	r3, #62	; 0x3e
 8019ce8:	781b      	ldrb	r3, [r3, #0]
 8019cea:	e00b      	b.n	8019d04 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8019cec:	78fb      	ldrb	r3, [r7, #3]
 8019cee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8019cf2:	68f9      	ldr	r1, [r7, #12]
 8019cf4:	4613      	mov	r3, r2
 8019cf6:	00db      	lsls	r3, r3, #3
 8019cf8:	1a9b      	subs	r3, r3, r2
 8019cfa:	009b      	lsls	r3, r3, #2
 8019cfc:	440b      	add	r3, r1
 8019cfe:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8019d02:	781b      	ldrb	r3, [r3, #0]
  }
}
 8019d04:	4618      	mov	r0, r3
 8019d06:	3714      	adds	r7, #20
 8019d08:	46bd      	mov	sp, r7
 8019d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d0e:	4770      	bx	lr

08019d10 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8019d10:	b580      	push	{r7, lr}
 8019d12:	b084      	sub	sp, #16
 8019d14:	af00      	add	r7, sp, #0
 8019d16:	6078      	str	r0, [r7, #4]
 8019d18:	460b      	mov	r3, r1
 8019d1a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019d1c:	2300      	movs	r3, #0
 8019d1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019d20:	2300      	movs	r3, #0
 8019d22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8019d24:	687b      	ldr	r3, [r7, #4]
 8019d26:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019d2a:	78fa      	ldrb	r2, [r7, #3]
 8019d2c:	4611      	mov	r1, r2
 8019d2e:	4618      	mov	r0, r3
 8019d30:	f7f4 fdb4 	bl	800e89c <HAL_PCD_SetAddress>
 8019d34:	4603      	mov	r3, r0
 8019d36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019d38:	7bfb      	ldrb	r3, [r7, #15]
 8019d3a:	4618      	mov	r0, r3
 8019d3c:	f000 f874 	bl	8019e28 <USBD_Get_USB_Status>
 8019d40:	4603      	mov	r3, r0
 8019d42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019d44:	7bbb      	ldrb	r3, [r7, #14]
}
 8019d46:	4618      	mov	r0, r3
 8019d48:	3710      	adds	r7, #16
 8019d4a:	46bd      	mov	sp, r7
 8019d4c:	bd80      	pop	{r7, pc}

08019d4e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8019d4e:	b580      	push	{r7, lr}
 8019d50:	b086      	sub	sp, #24
 8019d52:	af00      	add	r7, sp, #0
 8019d54:	60f8      	str	r0, [r7, #12]
 8019d56:	607a      	str	r2, [r7, #4]
 8019d58:	603b      	str	r3, [r7, #0]
 8019d5a:	460b      	mov	r3, r1
 8019d5c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019d5e:	2300      	movs	r3, #0
 8019d60:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019d62:	2300      	movs	r3, #0
 8019d64:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8019d66:	68fb      	ldr	r3, [r7, #12]
 8019d68:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8019d6c:	7af9      	ldrb	r1, [r7, #11]
 8019d6e:	683b      	ldr	r3, [r7, #0]
 8019d70:	687a      	ldr	r2, [r7, #4]
 8019d72:	f7f4 fecd 	bl	800eb10 <HAL_PCD_EP_Transmit>
 8019d76:	4603      	mov	r3, r0
 8019d78:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019d7a:	7dfb      	ldrb	r3, [r7, #23]
 8019d7c:	4618      	mov	r0, r3
 8019d7e:	f000 f853 	bl	8019e28 <USBD_Get_USB_Status>
 8019d82:	4603      	mov	r3, r0
 8019d84:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8019d86:	7dbb      	ldrb	r3, [r7, #22]
}
 8019d88:	4618      	mov	r0, r3
 8019d8a:	3718      	adds	r7, #24
 8019d8c:	46bd      	mov	sp, r7
 8019d8e:	bd80      	pop	{r7, pc}

08019d90 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8019d90:	b580      	push	{r7, lr}
 8019d92:	b086      	sub	sp, #24
 8019d94:	af00      	add	r7, sp, #0
 8019d96:	60f8      	str	r0, [r7, #12]
 8019d98:	607a      	str	r2, [r7, #4]
 8019d9a:	603b      	str	r3, [r7, #0]
 8019d9c:	460b      	mov	r3, r1
 8019d9e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019da0:	2300      	movs	r3, #0
 8019da2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019da4:	2300      	movs	r3, #0
 8019da6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8019da8:	68fb      	ldr	r3, [r7, #12]
 8019daa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8019dae:	7af9      	ldrb	r1, [r7, #11]
 8019db0:	683b      	ldr	r3, [r7, #0]
 8019db2:	687a      	ldr	r2, [r7, #4]
 8019db4:	f7f4 fe49 	bl	800ea4a <HAL_PCD_EP_Receive>
 8019db8:	4603      	mov	r3, r0
 8019dba:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019dbc:	7dfb      	ldrb	r3, [r7, #23]
 8019dbe:	4618      	mov	r0, r3
 8019dc0:	f000 f832 	bl	8019e28 <USBD_Get_USB_Status>
 8019dc4:	4603      	mov	r3, r0
 8019dc6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8019dc8:	7dbb      	ldrb	r3, [r7, #22]
}
 8019dca:	4618      	mov	r0, r3
 8019dcc:	3718      	adds	r7, #24
 8019dce:	46bd      	mov	sp, r7
 8019dd0:	bd80      	pop	{r7, pc}

08019dd2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019dd2:	b580      	push	{r7, lr}
 8019dd4:	b082      	sub	sp, #8
 8019dd6:	af00      	add	r7, sp, #0
 8019dd8:	6078      	str	r0, [r7, #4]
 8019dda:	460b      	mov	r3, r1
 8019ddc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8019dde:	687b      	ldr	r3, [r7, #4]
 8019de0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019de4:	78fa      	ldrb	r2, [r7, #3]
 8019de6:	4611      	mov	r1, r2
 8019de8:	4618      	mov	r0, r3
 8019dea:	f7f4 fe79 	bl	800eae0 <HAL_PCD_EP_GetRxCount>
 8019dee:	4603      	mov	r3, r0
}
 8019df0:	4618      	mov	r0, r3
 8019df2:	3708      	adds	r7, #8
 8019df4:	46bd      	mov	sp, r7
 8019df6:	bd80      	pop	{r7, pc}

08019df8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8019df8:	b480      	push	{r7}
 8019dfa:	b083      	sub	sp, #12
 8019dfc:	af00      	add	r7, sp, #0
 8019dfe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8019e00:	4b03      	ldr	r3, [pc, #12]	; (8019e10 <USBD_static_malloc+0x18>)
}
 8019e02:	4618      	mov	r0, r3
 8019e04:	370c      	adds	r7, #12
 8019e06:	46bd      	mov	sp, r7
 8019e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e0c:	4770      	bx	lr
 8019e0e:	bf00      	nop
 8019e10:	24003434 	.word	0x24003434

08019e14 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8019e14:	b480      	push	{r7}
 8019e16:	b083      	sub	sp, #12
 8019e18:	af00      	add	r7, sp, #0
 8019e1a:	6078      	str	r0, [r7, #4]

}
 8019e1c:	bf00      	nop
 8019e1e:	370c      	adds	r7, #12
 8019e20:	46bd      	mov	sp, r7
 8019e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e26:	4770      	bx	lr

08019e28 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8019e28:	b480      	push	{r7}
 8019e2a:	b085      	sub	sp, #20
 8019e2c:	af00      	add	r7, sp, #0
 8019e2e:	4603      	mov	r3, r0
 8019e30:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019e32:	2300      	movs	r3, #0
 8019e34:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8019e36:	79fb      	ldrb	r3, [r7, #7]
 8019e38:	2b03      	cmp	r3, #3
 8019e3a:	d817      	bhi.n	8019e6c <USBD_Get_USB_Status+0x44>
 8019e3c:	a201      	add	r2, pc, #4	; (adr r2, 8019e44 <USBD_Get_USB_Status+0x1c>)
 8019e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019e42:	bf00      	nop
 8019e44:	08019e55 	.word	0x08019e55
 8019e48:	08019e5b 	.word	0x08019e5b
 8019e4c:	08019e61 	.word	0x08019e61
 8019e50:	08019e67 	.word	0x08019e67
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8019e54:	2300      	movs	r3, #0
 8019e56:	73fb      	strb	r3, [r7, #15]
    break;
 8019e58:	e00b      	b.n	8019e72 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019e5a:	2303      	movs	r3, #3
 8019e5c:	73fb      	strb	r3, [r7, #15]
    break;
 8019e5e:	e008      	b.n	8019e72 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019e60:	2301      	movs	r3, #1
 8019e62:	73fb      	strb	r3, [r7, #15]
    break;
 8019e64:	e005      	b.n	8019e72 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8019e66:	2303      	movs	r3, #3
 8019e68:	73fb      	strb	r3, [r7, #15]
    break;
 8019e6a:	e002      	b.n	8019e72 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8019e6c:	2303      	movs	r3, #3
 8019e6e:	73fb      	strb	r3, [r7, #15]
    break;
 8019e70:	bf00      	nop
  }
  return usb_status;
 8019e72:	7bfb      	ldrb	r3, [r7, #15]
}
 8019e74:	4618      	mov	r0, r3
 8019e76:	3714      	adds	r7, #20
 8019e78:	46bd      	mov	sp, r7
 8019e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e7e:	4770      	bx	lr

08019e80 <_ZdlPvj>:
 8019e80:	f000 b817 	b.w	8019eb2 <_ZdlPv>

08019e84 <_Znwj>:
 8019e84:	2801      	cmp	r0, #1
 8019e86:	bf38      	it	cc
 8019e88:	2001      	movcc	r0, #1
 8019e8a:	b510      	push	{r4, lr}
 8019e8c:	4604      	mov	r4, r0
 8019e8e:	4620      	mov	r0, r4
 8019e90:	f000 f87c 	bl	8019f8c <malloc>
 8019e94:	b930      	cbnz	r0, 8019ea4 <_Znwj+0x20>
 8019e96:	f000 f80f 	bl	8019eb8 <_ZSt15get_new_handlerv>
 8019e9a:	b908      	cbnz	r0, 8019ea0 <_Znwj+0x1c>
 8019e9c:	f000 f814 	bl	8019ec8 <abort>
 8019ea0:	4780      	blx	r0
 8019ea2:	e7f4      	b.n	8019e8e <_Znwj+0xa>
 8019ea4:	bd10      	pop	{r4, pc}

08019ea6 <_ZSt17__throw_bad_allocv>:
 8019ea6:	b508      	push	{r3, lr}
 8019ea8:	f000 f80e 	bl	8019ec8 <abort>

08019eac <_ZSt20__throw_length_errorPKc>:
 8019eac:	b508      	push	{r3, lr}
 8019eae:	f000 f80b 	bl	8019ec8 <abort>

08019eb2 <_ZdlPv>:
 8019eb2:	f000 b873 	b.w	8019f9c <free>
	...

08019eb8 <_ZSt15get_new_handlerv>:
 8019eb8:	4b02      	ldr	r3, [pc, #8]	; (8019ec4 <_ZSt15get_new_handlerv+0xc>)
 8019eba:	6818      	ldr	r0, [r3, #0]
 8019ebc:	f3bf 8f5b 	dmb	ish
 8019ec0:	4770      	bx	lr
 8019ec2:	bf00      	nop
 8019ec4:	24003654 	.word	0x24003654

08019ec8 <abort>:
 8019ec8:	b508      	push	{r3, lr}
 8019eca:	2006      	movs	r0, #6
 8019ecc:	f000 fca4 	bl	801a818 <raise>
 8019ed0:	2001      	movs	r0, #1
 8019ed2:	f7ef f945 	bl	8009160 <_exit>
	...

08019ed8 <__assert_func>:
 8019ed8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019eda:	4614      	mov	r4, r2
 8019edc:	461a      	mov	r2, r3
 8019ede:	4b09      	ldr	r3, [pc, #36]	; (8019f04 <__assert_func+0x2c>)
 8019ee0:	681b      	ldr	r3, [r3, #0]
 8019ee2:	4605      	mov	r5, r0
 8019ee4:	68d8      	ldr	r0, [r3, #12]
 8019ee6:	b14c      	cbz	r4, 8019efc <__assert_func+0x24>
 8019ee8:	4b07      	ldr	r3, [pc, #28]	; (8019f08 <__assert_func+0x30>)
 8019eea:	9100      	str	r1, [sp, #0]
 8019eec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019ef0:	4906      	ldr	r1, [pc, #24]	; (8019f0c <__assert_func+0x34>)
 8019ef2:	462b      	mov	r3, r5
 8019ef4:	f000 f814 	bl	8019f20 <fiprintf>
 8019ef8:	f7ff ffe6 	bl	8019ec8 <abort>
 8019efc:	4b04      	ldr	r3, [pc, #16]	; (8019f10 <__assert_func+0x38>)
 8019efe:	461c      	mov	r4, r3
 8019f00:	e7f3      	b.n	8019eea <__assert_func+0x12>
 8019f02:	bf00      	nop
 8019f04:	24000184 	.word	0x24000184
 8019f08:	080359cc 	.word	0x080359cc
 8019f0c:	080359d9 	.word	0x080359d9
 8019f10:	08035a07 	.word	0x08035a07

08019f14 <__errno>:
 8019f14:	4b01      	ldr	r3, [pc, #4]	; (8019f1c <__errno+0x8>)
 8019f16:	6818      	ldr	r0, [r3, #0]
 8019f18:	4770      	bx	lr
 8019f1a:	bf00      	nop
 8019f1c:	24000184 	.word	0x24000184

08019f20 <fiprintf>:
 8019f20:	b40e      	push	{r1, r2, r3}
 8019f22:	b503      	push	{r0, r1, lr}
 8019f24:	4601      	mov	r1, r0
 8019f26:	ab03      	add	r3, sp, #12
 8019f28:	4805      	ldr	r0, [pc, #20]	; (8019f40 <fiprintf+0x20>)
 8019f2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8019f2e:	6800      	ldr	r0, [r0, #0]
 8019f30:	9301      	str	r3, [sp, #4]
 8019f32:	f000 f975 	bl	801a220 <_vfiprintf_r>
 8019f36:	b002      	add	sp, #8
 8019f38:	f85d eb04 	ldr.w	lr, [sp], #4
 8019f3c:	b003      	add	sp, #12
 8019f3e:	4770      	bx	lr
 8019f40:	24000184 	.word	0x24000184

08019f44 <__libc_init_array>:
 8019f44:	b570      	push	{r4, r5, r6, lr}
 8019f46:	4d0d      	ldr	r5, [pc, #52]	; (8019f7c <__libc_init_array+0x38>)
 8019f48:	4c0d      	ldr	r4, [pc, #52]	; (8019f80 <__libc_init_array+0x3c>)
 8019f4a:	1b64      	subs	r4, r4, r5
 8019f4c:	10a4      	asrs	r4, r4, #2
 8019f4e:	2600      	movs	r6, #0
 8019f50:	42a6      	cmp	r6, r4
 8019f52:	d109      	bne.n	8019f68 <__libc_init_array+0x24>
 8019f54:	4d0b      	ldr	r5, [pc, #44]	; (8019f84 <__libc_init_array+0x40>)
 8019f56:	4c0c      	ldr	r4, [pc, #48]	; (8019f88 <__libc_init_array+0x44>)
 8019f58:	f001 f812 	bl	801af80 <_init>
 8019f5c:	1b64      	subs	r4, r4, r5
 8019f5e:	10a4      	asrs	r4, r4, #2
 8019f60:	2600      	movs	r6, #0
 8019f62:	42a6      	cmp	r6, r4
 8019f64:	d105      	bne.n	8019f72 <__libc_init_array+0x2e>
 8019f66:	bd70      	pop	{r4, r5, r6, pc}
 8019f68:	f855 3b04 	ldr.w	r3, [r5], #4
 8019f6c:	4798      	blx	r3
 8019f6e:	3601      	adds	r6, #1
 8019f70:	e7ee      	b.n	8019f50 <__libc_init_array+0xc>
 8019f72:	f855 3b04 	ldr.w	r3, [r5], #4
 8019f76:	4798      	blx	r3
 8019f78:	3601      	adds	r6, #1
 8019f7a:	e7f2      	b.n	8019f62 <__libc_init_array+0x1e>
 8019f7c:	08035aa8 	.word	0x08035aa8
 8019f80:	08035aa8 	.word	0x08035aa8
 8019f84:	08035aa8 	.word	0x08035aa8
 8019f88:	08035ab0 	.word	0x08035ab0

08019f8c <malloc>:
 8019f8c:	4b02      	ldr	r3, [pc, #8]	; (8019f98 <malloc+0xc>)
 8019f8e:	4601      	mov	r1, r0
 8019f90:	6818      	ldr	r0, [r3, #0]
 8019f92:	f000 b8a7 	b.w	801a0e4 <_malloc_r>
 8019f96:	bf00      	nop
 8019f98:	24000184 	.word	0x24000184

08019f9c <free>:
 8019f9c:	4b02      	ldr	r3, [pc, #8]	; (8019fa8 <free+0xc>)
 8019f9e:	4601      	mov	r1, r0
 8019fa0:	6818      	ldr	r0, [r3, #0]
 8019fa2:	f000 b833 	b.w	801a00c <_free_r>
 8019fa6:	bf00      	nop
 8019fa8:	24000184 	.word	0x24000184

08019fac <memcpy>:
 8019fac:	440a      	add	r2, r1
 8019fae:	4291      	cmp	r1, r2
 8019fb0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8019fb4:	d100      	bne.n	8019fb8 <memcpy+0xc>
 8019fb6:	4770      	bx	lr
 8019fb8:	b510      	push	{r4, lr}
 8019fba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019fbe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019fc2:	4291      	cmp	r1, r2
 8019fc4:	d1f9      	bne.n	8019fba <memcpy+0xe>
 8019fc6:	bd10      	pop	{r4, pc}

08019fc8 <memmove>:
 8019fc8:	4288      	cmp	r0, r1
 8019fca:	b510      	push	{r4, lr}
 8019fcc:	eb01 0402 	add.w	r4, r1, r2
 8019fd0:	d902      	bls.n	8019fd8 <memmove+0x10>
 8019fd2:	4284      	cmp	r4, r0
 8019fd4:	4623      	mov	r3, r4
 8019fd6:	d807      	bhi.n	8019fe8 <memmove+0x20>
 8019fd8:	1e43      	subs	r3, r0, #1
 8019fda:	42a1      	cmp	r1, r4
 8019fdc:	d008      	beq.n	8019ff0 <memmove+0x28>
 8019fde:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019fe2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8019fe6:	e7f8      	b.n	8019fda <memmove+0x12>
 8019fe8:	4402      	add	r2, r0
 8019fea:	4601      	mov	r1, r0
 8019fec:	428a      	cmp	r2, r1
 8019fee:	d100      	bne.n	8019ff2 <memmove+0x2a>
 8019ff0:	bd10      	pop	{r4, pc}
 8019ff2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019ff6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8019ffa:	e7f7      	b.n	8019fec <memmove+0x24>

08019ffc <memset>:
 8019ffc:	4402      	add	r2, r0
 8019ffe:	4603      	mov	r3, r0
 801a000:	4293      	cmp	r3, r2
 801a002:	d100      	bne.n	801a006 <memset+0xa>
 801a004:	4770      	bx	lr
 801a006:	f803 1b01 	strb.w	r1, [r3], #1
 801a00a:	e7f9      	b.n	801a000 <memset+0x4>

0801a00c <_free_r>:
 801a00c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a00e:	2900      	cmp	r1, #0
 801a010:	d044      	beq.n	801a09c <_free_r+0x90>
 801a012:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a016:	9001      	str	r0, [sp, #4]
 801a018:	2b00      	cmp	r3, #0
 801a01a:	f1a1 0404 	sub.w	r4, r1, #4
 801a01e:	bfb8      	it	lt
 801a020:	18e4      	addlt	r4, r4, r3
 801a022:	f000 fef5 	bl	801ae10 <__malloc_lock>
 801a026:	4a1e      	ldr	r2, [pc, #120]	; (801a0a0 <_free_r+0x94>)
 801a028:	9801      	ldr	r0, [sp, #4]
 801a02a:	6813      	ldr	r3, [r2, #0]
 801a02c:	b933      	cbnz	r3, 801a03c <_free_r+0x30>
 801a02e:	6063      	str	r3, [r4, #4]
 801a030:	6014      	str	r4, [r2, #0]
 801a032:	b003      	add	sp, #12
 801a034:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a038:	f000 bef0 	b.w	801ae1c <__malloc_unlock>
 801a03c:	42a3      	cmp	r3, r4
 801a03e:	d908      	bls.n	801a052 <_free_r+0x46>
 801a040:	6825      	ldr	r5, [r4, #0]
 801a042:	1961      	adds	r1, r4, r5
 801a044:	428b      	cmp	r3, r1
 801a046:	bf01      	itttt	eq
 801a048:	6819      	ldreq	r1, [r3, #0]
 801a04a:	685b      	ldreq	r3, [r3, #4]
 801a04c:	1949      	addeq	r1, r1, r5
 801a04e:	6021      	streq	r1, [r4, #0]
 801a050:	e7ed      	b.n	801a02e <_free_r+0x22>
 801a052:	461a      	mov	r2, r3
 801a054:	685b      	ldr	r3, [r3, #4]
 801a056:	b10b      	cbz	r3, 801a05c <_free_r+0x50>
 801a058:	42a3      	cmp	r3, r4
 801a05a:	d9fa      	bls.n	801a052 <_free_r+0x46>
 801a05c:	6811      	ldr	r1, [r2, #0]
 801a05e:	1855      	adds	r5, r2, r1
 801a060:	42a5      	cmp	r5, r4
 801a062:	d10b      	bne.n	801a07c <_free_r+0x70>
 801a064:	6824      	ldr	r4, [r4, #0]
 801a066:	4421      	add	r1, r4
 801a068:	1854      	adds	r4, r2, r1
 801a06a:	42a3      	cmp	r3, r4
 801a06c:	6011      	str	r1, [r2, #0]
 801a06e:	d1e0      	bne.n	801a032 <_free_r+0x26>
 801a070:	681c      	ldr	r4, [r3, #0]
 801a072:	685b      	ldr	r3, [r3, #4]
 801a074:	6053      	str	r3, [r2, #4]
 801a076:	4421      	add	r1, r4
 801a078:	6011      	str	r1, [r2, #0]
 801a07a:	e7da      	b.n	801a032 <_free_r+0x26>
 801a07c:	d902      	bls.n	801a084 <_free_r+0x78>
 801a07e:	230c      	movs	r3, #12
 801a080:	6003      	str	r3, [r0, #0]
 801a082:	e7d6      	b.n	801a032 <_free_r+0x26>
 801a084:	6825      	ldr	r5, [r4, #0]
 801a086:	1961      	adds	r1, r4, r5
 801a088:	428b      	cmp	r3, r1
 801a08a:	bf04      	itt	eq
 801a08c:	6819      	ldreq	r1, [r3, #0]
 801a08e:	685b      	ldreq	r3, [r3, #4]
 801a090:	6063      	str	r3, [r4, #4]
 801a092:	bf04      	itt	eq
 801a094:	1949      	addeq	r1, r1, r5
 801a096:	6021      	streq	r1, [r4, #0]
 801a098:	6054      	str	r4, [r2, #4]
 801a09a:	e7ca      	b.n	801a032 <_free_r+0x26>
 801a09c:	b003      	add	sp, #12
 801a09e:	bd30      	pop	{r4, r5, pc}
 801a0a0:	24003658 	.word	0x24003658

0801a0a4 <sbrk_aligned>:
 801a0a4:	b570      	push	{r4, r5, r6, lr}
 801a0a6:	4e0e      	ldr	r6, [pc, #56]	; (801a0e0 <sbrk_aligned+0x3c>)
 801a0a8:	460c      	mov	r4, r1
 801a0aa:	6831      	ldr	r1, [r6, #0]
 801a0ac:	4605      	mov	r5, r0
 801a0ae:	b911      	cbnz	r1, 801a0b6 <sbrk_aligned+0x12>
 801a0b0:	f000 fb7a 	bl	801a7a8 <_sbrk_r>
 801a0b4:	6030      	str	r0, [r6, #0]
 801a0b6:	4621      	mov	r1, r4
 801a0b8:	4628      	mov	r0, r5
 801a0ba:	f000 fb75 	bl	801a7a8 <_sbrk_r>
 801a0be:	1c43      	adds	r3, r0, #1
 801a0c0:	d00a      	beq.n	801a0d8 <sbrk_aligned+0x34>
 801a0c2:	1cc4      	adds	r4, r0, #3
 801a0c4:	f024 0403 	bic.w	r4, r4, #3
 801a0c8:	42a0      	cmp	r0, r4
 801a0ca:	d007      	beq.n	801a0dc <sbrk_aligned+0x38>
 801a0cc:	1a21      	subs	r1, r4, r0
 801a0ce:	4628      	mov	r0, r5
 801a0d0:	f000 fb6a 	bl	801a7a8 <_sbrk_r>
 801a0d4:	3001      	adds	r0, #1
 801a0d6:	d101      	bne.n	801a0dc <sbrk_aligned+0x38>
 801a0d8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801a0dc:	4620      	mov	r0, r4
 801a0de:	bd70      	pop	{r4, r5, r6, pc}
 801a0e0:	2400365c 	.word	0x2400365c

0801a0e4 <_malloc_r>:
 801a0e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a0e8:	1ccd      	adds	r5, r1, #3
 801a0ea:	f025 0503 	bic.w	r5, r5, #3
 801a0ee:	3508      	adds	r5, #8
 801a0f0:	2d0c      	cmp	r5, #12
 801a0f2:	bf38      	it	cc
 801a0f4:	250c      	movcc	r5, #12
 801a0f6:	2d00      	cmp	r5, #0
 801a0f8:	4607      	mov	r7, r0
 801a0fa:	db01      	blt.n	801a100 <_malloc_r+0x1c>
 801a0fc:	42a9      	cmp	r1, r5
 801a0fe:	d905      	bls.n	801a10c <_malloc_r+0x28>
 801a100:	230c      	movs	r3, #12
 801a102:	603b      	str	r3, [r7, #0]
 801a104:	2600      	movs	r6, #0
 801a106:	4630      	mov	r0, r6
 801a108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a10c:	4e2e      	ldr	r6, [pc, #184]	; (801a1c8 <_malloc_r+0xe4>)
 801a10e:	f000 fe7f 	bl	801ae10 <__malloc_lock>
 801a112:	6833      	ldr	r3, [r6, #0]
 801a114:	461c      	mov	r4, r3
 801a116:	bb34      	cbnz	r4, 801a166 <_malloc_r+0x82>
 801a118:	4629      	mov	r1, r5
 801a11a:	4638      	mov	r0, r7
 801a11c:	f7ff ffc2 	bl	801a0a4 <sbrk_aligned>
 801a120:	1c43      	adds	r3, r0, #1
 801a122:	4604      	mov	r4, r0
 801a124:	d14d      	bne.n	801a1c2 <_malloc_r+0xde>
 801a126:	6834      	ldr	r4, [r6, #0]
 801a128:	4626      	mov	r6, r4
 801a12a:	2e00      	cmp	r6, #0
 801a12c:	d140      	bne.n	801a1b0 <_malloc_r+0xcc>
 801a12e:	6823      	ldr	r3, [r4, #0]
 801a130:	4631      	mov	r1, r6
 801a132:	4638      	mov	r0, r7
 801a134:	eb04 0803 	add.w	r8, r4, r3
 801a138:	f000 fb36 	bl	801a7a8 <_sbrk_r>
 801a13c:	4580      	cmp	r8, r0
 801a13e:	d13a      	bne.n	801a1b6 <_malloc_r+0xd2>
 801a140:	6821      	ldr	r1, [r4, #0]
 801a142:	3503      	adds	r5, #3
 801a144:	1a6d      	subs	r5, r5, r1
 801a146:	f025 0503 	bic.w	r5, r5, #3
 801a14a:	3508      	adds	r5, #8
 801a14c:	2d0c      	cmp	r5, #12
 801a14e:	bf38      	it	cc
 801a150:	250c      	movcc	r5, #12
 801a152:	4629      	mov	r1, r5
 801a154:	4638      	mov	r0, r7
 801a156:	f7ff ffa5 	bl	801a0a4 <sbrk_aligned>
 801a15a:	3001      	adds	r0, #1
 801a15c:	d02b      	beq.n	801a1b6 <_malloc_r+0xd2>
 801a15e:	6823      	ldr	r3, [r4, #0]
 801a160:	442b      	add	r3, r5
 801a162:	6023      	str	r3, [r4, #0]
 801a164:	e00e      	b.n	801a184 <_malloc_r+0xa0>
 801a166:	6822      	ldr	r2, [r4, #0]
 801a168:	1b52      	subs	r2, r2, r5
 801a16a:	d41e      	bmi.n	801a1aa <_malloc_r+0xc6>
 801a16c:	2a0b      	cmp	r2, #11
 801a16e:	d916      	bls.n	801a19e <_malloc_r+0xba>
 801a170:	1961      	adds	r1, r4, r5
 801a172:	42a3      	cmp	r3, r4
 801a174:	6025      	str	r5, [r4, #0]
 801a176:	bf18      	it	ne
 801a178:	6059      	strne	r1, [r3, #4]
 801a17a:	6863      	ldr	r3, [r4, #4]
 801a17c:	bf08      	it	eq
 801a17e:	6031      	streq	r1, [r6, #0]
 801a180:	5162      	str	r2, [r4, r5]
 801a182:	604b      	str	r3, [r1, #4]
 801a184:	4638      	mov	r0, r7
 801a186:	f104 060b 	add.w	r6, r4, #11
 801a18a:	f000 fe47 	bl	801ae1c <__malloc_unlock>
 801a18e:	f026 0607 	bic.w	r6, r6, #7
 801a192:	1d23      	adds	r3, r4, #4
 801a194:	1af2      	subs	r2, r6, r3
 801a196:	d0b6      	beq.n	801a106 <_malloc_r+0x22>
 801a198:	1b9b      	subs	r3, r3, r6
 801a19a:	50a3      	str	r3, [r4, r2]
 801a19c:	e7b3      	b.n	801a106 <_malloc_r+0x22>
 801a19e:	6862      	ldr	r2, [r4, #4]
 801a1a0:	42a3      	cmp	r3, r4
 801a1a2:	bf0c      	ite	eq
 801a1a4:	6032      	streq	r2, [r6, #0]
 801a1a6:	605a      	strne	r2, [r3, #4]
 801a1a8:	e7ec      	b.n	801a184 <_malloc_r+0xa0>
 801a1aa:	4623      	mov	r3, r4
 801a1ac:	6864      	ldr	r4, [r4, #4]
 801a1ae:	e7b2      	b.n	801a116 <_malloc_r+0x32>
 801a1b0:	4634      	mov	r4, r6
 801a1b2:	6876      	ldr	r6, [r6, #4]
 801a1b4:	e7b9      	b.n	801a12a <_malloc_r+0x46>
 801a1b6:	230c      	movs	r3, #12
 801a1b8:	603b      	str	r3, [r7, #0]
 801a1ba:	4638      	mov	r0, r7
 801a1bc:	f000 fe2e 	bl	801ae1c <__malloc_unlock>
 801a1c0:	e7a1      	b.n	801a106 <_malloc_r+0x22>
 801a1c2:	6025      	str	r5, [r4, #0]
 801a1c4:	e7de      	b.n	801a184 <_malloc_r+0xa0>
 801a1c6:	bf00      	nop
 801a1c8:	24003658 	.word	0x24003658

0801a1cc <__sfputc_r>:
 801a1cc:	6893      	ldr	r3, [r2, #8]
 801a1ce:	3b01      	subs	r3, #1
 801a1d0:	2b00      	cmp	r3, #0
 801a1d2:	b410      	push	{r4}
 801a1d4:	6093      	str	r3, [r2, #8]
 801a1d6:	da08      	bge.n	801a1ea <__sfputc_r+0x1e>
 801a1d8:	6994      	ldr	r4, [r2, #24]
 801a1da:	42a3      	cmp	r3, r4
 801a1dc:	db01      	blt.n	801a1e2 <__sfputc_r+0x16>
 801a1de:	290a      	cmp	r1, #10
 801a1e0:	d103      	bne.n	801a1ea <__sfputc_r+0x1e>
 801a1e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a1e6:	f000 bb33 	b.w	801a850 <__swbuf_r>
 801a1ea:	6813      	ldr	r3, [r2, #0]
 801a1ec:	1c58      	adds	r0, r3, #1
 801a1ee:	6010      	str	r0, [r2, #0]
 801a1f0:	7019      	strb	r1, [r3, #0]
 801a1f2:	4608      	mov	r0, r1
 801a1f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a1f8:	4770      	bx	lr

0801a1fa <__sfputs_r>:
 801a1fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a1fc:	4606      	mov	r6, r0
 801a1fe:	460f      	mov	r7, r1
 801a200:	4614      	mov	r4, r2
 801a202:	18d5      	adds	r5, r2, r3
 801a204:	42ac      	cmp	r4, r5
 801a206:	d101      	bne.n	801a20c <__sfputs_r+0x12>
 801a208:	2000      	movs	r0, #0
 801a20a:	e007      	b.n	801a21c <__sfputs_r+0x22>
 801a20c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a210:	463a      	mov	r2, r7
 801a212:	4630      	mov	r0, r6
 801a214:	f7ff ffda 	bl	801a1cc <__sfputc_r>
 801a218:	1c43      	adds	r3, r0, #1
 801a21a:	d1f3      	bne.n	801a204 <__sfputs_r+0xa>
 801a21c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801a220 <_vfiprintf_r>:
 801a220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a224:	460d      	mov	r5, r1
 801a226:	b09d      	sub	sp, #116	; 0x74
 801a228:	4614      	mov	r4, r2
 801a22a:	4698      	mov	r8, r3
 801a22c:	4606      	mov	r6, r0
 801a22e:	b118      	cbz	r0, 801a238 <_vfiprintf_r+0x18>
 801a230:	6983      	ldr	r3, [r0, #24]
 801a232:	b90b      	cbnz	r3, 801a238 <_vfiprintf_r+0x18>
 801a234:	f000 fce6 	bl	801ac04 <__sinit>
 801a238:	4b89      	ldr	r3, [pc, #548]	; (801a460 <_vfiprintf_r+0x240>)
 801a23a:	429d      	cmp	r5, r3
 801a23c:	d11b      	bne.n	801a276 <_vfiprintf_r+0x56>
 801a23e:	6875      	ldr	r5, [r6, #4]
 801a240:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a242:	07d9      	lsls	r1, r3, #31
 801a244:	d405      	bmi.n	801a252 <_vfiprintf_r+0x32>
 801a246:	89ab      	ldrh	r3, [r5, #12]
 801a248:	059a      	lsls	r2, r3, #22
 801a24a:	d402      	bmi.n	801a252 <_vfiprintf_r+0x32>
 801a24c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a24e:	f000 fd77 	bl	801ad40 <__retarget_lock_acquire_recursive>
 801a252:	89ab      	ldrh	r3, [r5, #12]
 801a254:	071b      	lsls	r3, r3, #28
 801a256:	d501      	bpl.n	801a25c <_vfiprintf_r+0x3c>
 801a258:	692b      	ldr	r3, [r5, #16]
 801a25a:	b9eb      	cbnz	r3, 801a298 <_vfiprintf_r+0x78>
 801a25c:	4629      	mov	r1, r5
 801a25e:	4630      	mov	r0, r6
 801a260:	f000 fb48 	bl	801a8f4 <__swsetup_r>
 801a264:	b1c0      	cbz	r0, 801a298 <_vfiprintf_r+0x78>
 801a266:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a268:	07dc      	lsls	r4, r3, #31
 801a26a:	d50e      	bpl.n	801a28a <_vfiprintf_r+0x6a>
 801a26c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a270:	b01d      	add	sp, #116	; 0x74
 801a272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a276:	4b7b      	ldr	r3, [pc, #492]	; (801a464 <_vfiprintf_r+0x244>)
 801a278:	429d      	cmp	r5, r3
 801a27a:	d101      	bne.n	801a280 <_vfiprintf_r+0x60>
 801a27c:	68b5      	ldr	r5, [r6, #8]
 801a27e:	e7df      	b.n	801a240 <_vfiprintf_r+0x20>
 801a280:	4b79      	ldr	r3, [pc, #484]	; (801a468 <_vfiprintf_r+0x248>)
 801a282:	429d      	cmp	r5, r3
 801a284:	bf08      	it	eq
 801a286:	68f5      	ldreq	r5, [r6, #12]
 801a288:	e7da      	b.n	801a240 <_vfiprintf_r+0x20>
 801a28a:	89ab      	ldrh	r3, [r5, #12]
 801a28c:	0598      	lsls	r0, r3, #22
 801a28e:	d4ed      	bmi.n	801a26c <_vfiprintf_r+0x4c>
 801a290:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a292:	f000 fd56 	bl	801ad42 <__retarget_lock_release_recursive>
 801a296:	e7e9      	b.n	801a26c <_vfiprintf_r+0x4c>
 801a298:	2300      	movs	r3, #0
 801a29a:	9309      	str	r3, [sp, #36]	; 0x24
 801a29c:	2320      	movs	r3, #32
 801a29e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a2a2:	f8cd 800c 	str.w	r8, [sp, #12]
 801a2a6:	2330      	movs	r3, #48	; 0x30
 801a2a8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801a46c <_vfiprintf_r+0x24c>
 801a2ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a2b0:	f04f 0901 	mov.w	r9, #1
 801a2b4:	4623      	mov	r3, r4
 801a2b6:	469a      	mov	sl, r3
 801a2b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a2bc:	b10a      	cbz	r2, 801a2c2 <_vfiprintf_r+0xa2>
 801a2be:	2a25      	cmp	r2, #37	; 0x25
 801a2c0:	d1f9      	bne.n	801a2b6 <_vfiprintf_r+0x96>
 801a2c2:	ebba 0b04 	subs.w	fp, sl, r4
 801a2c6:	d00b      	beq.n	801a2e0 <_vfiprintf_r+0xc0>
 801a2c8:	465b      	mov	r3, fp
 801a2ca:	4622      	mov	r2, r4
 801a2cc:	4629      	mov	r1, r5
 801a2ce:	4630      	mov	r0, r6
 801a2d0:	f7ff ff93 	bl	801a1fa <__sfputs_r>
 801a2d4:	3001      	adds	r0, #1
 801a2d6:	f000 80aa 	beq.w	801a42e <_vfiprintf_r+0x20e>
 801a2da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a2dc:	445a      	add	r2, fp
 801a2de:	9209      	str	r2, [sp, #36]	; 0x24
 801a2e0:	f89a 3000 	ldrb.w	r3, [sl]
 801a2e4:	2b00      	cmp	r3, #0
 801a2e6:	f000 80a2 	beq.w	801a42e <_vfiprintf_r+0x20e>
 801a2ea:	2300      	movs	r3, #0
 801a2ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a2f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a2f4:	f10a 0a01 	add.w	sl, sl, #1
 801a2f8:	9304      	str	r3, [sp, #16]
 801a2fa:	9307      	str	r3, [sp, #28]
 801a2fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a300:	931a      	str	r3, [sp, #104]	; 0x68
 801a302:	4654      	mov	r4, sl
 801a304:	2205      	movs	r2, #5
 801a306:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a30a:	4858      	ldr	r0, [pc, #352]	; (801a46c <_vfiprintf_r+0x24c>)
 801a30c:	f7e5 ffe8 	bl	80002e0 <memchr>
 801a310:	9a04      	ldr	r2, [sp, #16]
 801a312:	b9d8      	cbnz	r0, 801a34c <_vfiprintf_r+0x12c>
 801a314:	06d1      	lsls	r1, r2, #27
 801a316:	bf44      	itt	mi
 801a318:	2320      	movmi	r3, #32
 801a31a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a31e:	0713      	lsls	r3, r2, #28
 801a320:	bf44      	itt	mi
 801a322:	232b      	movmi	r3, #43	; 0x2b
 801a324:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a328:	f89a 3000 	ldrb.w	r3, [sl]
 801a32c:	2b2a      	cmp	r3, #42	; 0x2a
 801a32e:	d015      	beq.n	801a35c <_vfiprintf_r+0x13c>
 801a330:	9a07      	ldr	r2, [sp, #28]
 801a332:	4654      	mov	r4, sl
 801a334:	2000      	movs	r0, #0
 801a336:	f04f 0c0a 	mov.w	ip, #10
 801a33a:	4621      	mov	r1, r4
 801a33c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a340:	3b30      	subs	r3, #48	; 0x30
 801a342:	2b09      	cmp	r3, #9
 801a344:	d94e      	bls.n	801a3e4 <_vfiprintf_r+0x1c4>
 801a346:	b1b0      	cbz	r0, 801a376 <_vfiprintf_r+0x156>
 801a348:	9207      	str	r2, [sp, #28]
 801a34a:	e014      	b.n	801a376 <_vfiprintf_r+0x156>
 801a34c:	eba0 0308 	sub.w	r3, r0, r8
 801a350:	fa09 f303 	lsl.w	r3, r9, r3
 801a354:	4313      	orrs	r3, r2
 801a356:	9304      	str	r3, [sp, #16]
 801a358:	46a2      	mov	sl, r4
 801a35a:	e7d2      	b.n	801a302 <_vfiprintf_r+0xe2>
 801a35c:	9b03      	ldr	r3, [sp, #12]
 801a35e:	1d19      	adds	r1, r3, #4
 801a360:	681b      	ldr	r3, [r3, #0]
 801a362:	9103      	str	r1, [sp, #12]
 801a364:	2b00      	cmp	r3, #0
 801a366:	bfbb      	ittet	lt
 801a368:	425b      	neglt	r3, r3
 801a36a:	f042 0202 	orrlt.w	r2, r2, #2
 801a36e:	9307      	strge	r3, [sp, #28]
 801a370:	9307      	strlt	r3, [sp, #28]
 801a372:	bfb8      	it	lt
 801a374:	9204      	strlt	r2, [sp, #16]
 801a376:	7823      	ldrb	r3, [r4, #0]
 801a378:	2b2e      	cmp	r3, #46	; 0x2e
 801a37a:	d10c      	bne.n	801a396 <_vfiprintf_r+0x176>
 801a37c:	7863      	ldrb	r3, [r4, #1]
 801a37e:	2b2a      	cmp	r3, #42	; 0x2a
 801a380:	d135      	bne.n	801a3ee <_vfiprintf_r+0x1ce>
 801a382:	9b03      	ldr	r3, [sp, #12]
 801a384:	1d1a      	adds	r2, r3, #4
 801a386:	681b      	ldr	r3, [r3, #0]
 801a388:	9203      	str	r2, [sp, #12]
 801a38a:	2b00      	cmp	r3, #0
 801a38c:	bfb8      	it	lt
 801a38e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801a392:	3402      	adds	r4, #2
 801a394:	9305      	str	r3, [sp, #20]
 801a396:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801a47c <_vfiprintf_r+0x25c>
 801a39a:	7821      	ldrb	r1, [r4, #0]
 801a39c:	2203      	movs	r2, #3
 801a39e:	4650      	mov	r0, sl
 801a3a0:	f7e5 ff9e 	bl	80002e0 <memchr>
 801a3a4:	b140      	cbz	r0, 801a3b8 <_vfiprintf_r+0x198>
 801a3a6:	2340      	movs	r3, #64	; 0x40
 801a3a8:	eba0 000a 	sub.w	r0, r0, sl
 801a3ac:	fa03 f000 	lsl.w	r0, r3, r0
 801a3b0:	9b04      	ldr	r3, [sp, #16]
 801a3b2:	4303      	orrs	r3, r0
 801a3b4:	3401      	adds	r4, #1
 801a3b6:	9304      	str	r3, [sp, #16]
 801a3b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a3bc:	482c      	ldr	r0, [pc, #176]	; (801a470 <_vfiprintf_r+0x250>)
 801a3be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a3c2:	2206      	movs	r2, #6
 801a3c4:	f7e5 ff8c 	bl	80002e0 <memchr>
 801a3c8:	2800      	cmp	r0, #0
 801a3ca:	d03f      	beq.n	801a44c <_vfiprintf_r+0x22c>
 801a3cc:	4b29      	ldr	r3, [pc, #164]	; (801a474 <_vfiprintf_r+0x254>)
 801a3ce:	bb1b      	cbnz	r3, 801a418 <_vfiprintf_r+0x1f8>
 801a3d0:	9b03      	ldr	r3, [sp, #12]
 801a3d2:	3307      	adds	r3, #7
 801a3d4:	f023 0307 	bic.w	r3, r3, #7
 801a3d8:	3308      	adds	r3, #8
 801a3da:	9303      	str	r3, [sp, #12]
 801a3dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a3de:	443b      	add	r3, r7
 801a3e0:	9309      	str	r3, [sp, #36]	; 0x24
 801a3e2:	e767      	b.n	801a2b4 <_vfiprintf_r+0x94>
 801a3e4:	fb0c 3202 	mla	r2, ip, r2, r3
 801a3e8:	460c      	mov	r4, r1
 801a3ea:	2001      	movs	r0, #1
 801a3ec:	e7a5      	b.n	801a33a <_vfiprintf_r+0x11a>
 801a3ee:	2300      	movs	r3, #0
 801a3f0:	3401      	adds	r4, #1
 801a3f2:	9305      	str	r3, [sp, #20]
 801a3f4:	4619      	mov	r1, r3
 801a3f6:	f04f 0c0a 	mov.w	ip, #10
 801a3fa:	4620      	mov	r0, r4
 801a3fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a400:	3a30      	subs	r2, #48	; 0x30
 801a402:	2a09      	cmp	r2, #9
 801a404:	d903      	bls.n	801a40e <_vfiprintf_r+0x1ee>
 801a406:	2b00      	cmp	r3, #0
 801a408:	d0c5      	beq.n	801a396 <_vfiprintf_r+0x176>
 801a40a:	9105      	str	r1, [sp, #20]
 801a40c:	e7c3      	b.n	801a396 <_vfiprintf_r+0x176>
 801a40e:	fb0c 2101 	mla	r1, ip, r1, r2
 801a412:	4604      	mov	r4, r0
 801a414:	2301      	movs	r3, #1
 801a416:	e7f0      	b.n	801a3fa <_vfiprintf_r+0x1da>
 801a418:	ab03      	add	r3, sp, #12
 801a41a:	9300      	str	r3, [sp, #0]
 801a41c:	462a      	mov	r2, r5
 801a41e:	4b16      	ldr	r3, [pc, #88]	; (801a478 <_vfiprintf_r+0x258>)
 801a420:	a904      	add	r1, sp, #16
 801a422:	4630      	mov	r0, r6
 801a424:	f3af 8000 	nop.w
 801a428:	4607      	mov	r7, r0
 801a42a:	1c78      	adds	r0, r7, #1
 801a42c:	d1d6      	bne.n	801a3dc <_vfiprintf_r+0x1bc>
 801a42e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a430:	07d9      	lsls	r1, r3, #31
 801a432:	d405      	bmi.n	801a440 <_vfiprintf_r+0x220>
 801a434:	89ab      	ldrh	r3, [r5, #12]
 801a436:	059a      	lsls	r2, r3, #22
 801a438:	d402      	bmi.n	801a440 <_vfiprintf_r+0x220>
 801a43a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a43c:	f000 fc81 	bl	801ad42 <__retarget_lock_release_recursive>
 801a440:	89ab      	ldrh	r3, [r5, #12]
 801a442:	065b      	lsls	r3, r3, #25
 801a444:	f53f af12 	bmi.w	801a26c <_vfiprintf_r+0x4c>
 801a448:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a44a:	e711      	b.n	801a270 <_vfiprintf_r+0x50>
 801a44c:	ab03      	add	r3, sp, #12
 801a44e:	9300      	str	r3, [sp, #0]
 801a450:	462a      	mov	r2, r5
 801a452:	4b09      	ldr	r3, [pc, #36]	; (801a478 <_vfiprintf_r+0x258>)
 801a454:	a904      	add	r1, sp, #16
 801a456:	4630      	mov	r0, r6
 801a458:	f000 f880 	bl	801a55c <_printf_i>
 801a45c:	e7e4      	b.n	801a428 <_vfiprintf_r+0x208>
 801a45e:	bf00      	nop
 801a460:	08035a60 	.word	0x08035a60
 801a464:	08035a80 	.word	0x08035a80
 801a468:	08035a40 	.word	0x08035a40
 801a46c:	08035a0c 	.word	0x08035a0c
 801a470:	08035a16 	.word	0x08035a16
 801a474:	00000000 	.word	0x00000000
 801a478:	0801a1fb 	.word	0x0801a1fb
 801a47c:	08035a12 	.word	0x08035a12

0801a480 <_printf_common>:
 801a480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a484:	4616      	mov	r6, r2
 801a486:	4699      	mov	r9, r3
 801a488:	688a      	ldr	r2, [r1, #8]
 801a48a:	690b      	ldr	r3, [r1, #16]
 801a48c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801a490:	4293      	cmp	r3, r2
 801a492:	bfb8      	it	lt
 801a494:	4613      	movlt	r3, r2
 801a496:	6033      	str	r3, [r6, #0]
 801a498:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801a49c:	4607      	mov	r7, r0
 801a49e:	460c      	mov	r4, r1
 801a4a0:	b10a      	cbz	r2, 801a4a6 <_printf_common+0x26>
 801a4a2:	3301      	adds	r3, #1
 801a4a4:	6033      	str	r3, [r6, #0]
 801a4a6:	6823      	ldr	r3, [r4, #0]
 801a4a8:	0699      	lsls	r1, r3, #26
 801a4aa:	bf42      	ittt	mi
 801a4ac:	6833      	ldrmi	r3, [r6, #0]
 801a4ae:	3302      	addmi	r3, #2
 801a4b0:	6033      	strmi	r3, [r6, #0]
 801a4b2:	6825      	ldr	r5, [r4, #0]
 801a4b4:	f015 0506 	ands.w	r5, r5, #6
 801a4b8:	d106      	bne.n	801a4c8 <_printf_common+0x48>
 801a4ba:	f104 0a19 	add.w	sl, r4, #25
 801a4be:	68e3      	ldr	r3, [r4, #12]
 801a4c0:	6832      	ldr	r2, [r6, #0]
 801a4c2:	1a9b      	subs	r3, r3, r2
 801a4c4:	42ab      	cmp	r3, r5
 801a4c6:	dc26      	bgt.n	801a516 <_printf_common+0x96>
 801a4c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801a4cc:	1e13      	subs	r3, r2, #0
 801a4ce:	6822      	ldr	r2, [r4, #0]
 801a4d0:	bf18      	it	ne
 801a4d2:	2301      	movne	r3, #1
 801a4d4:	0692      	lsls	r2, r2, #26
 801a4d6:	d42b      	bmi.n	801a530 <_printf_common+0xb0>
 801a4d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a4dc:	4649      	mov	r1, r9
 801a4de:	4638      	mov	r0, r7
 801a4e0:	47c0      	blx	r8
 801a4e2:	3001      	adds	r0, #1
 801a4e4:	d01e      	beq.n	801a524 <_printf_common+0xa4>
 801a4e6:	6823      	ldr	r3, [r4, #0]
 801a4e8:	68e5      	ldr	r5, [r4, #12]
 801a4ea:	6832      	ldr	r2, [r6, #0]
 801a4ec:	f003 0306 	and.w	r3, r3, #6
 801a4f0:	2b04      	cmp	r3, #4
 801a4f2:	bf08      	it	eq
 801a4f4:	1aad      	subeq	r5, r5, r2
 801a4f6:	68a3      	ldr	r3, [r4, #8]
 801a4f8:	6922      	ldr	r2, [r4, #16]
 801a4fa:	bf0c      	ite	eq
 801a4fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a500:	2500      	movne	r5, #0
 801a502:	4293      	cmp	r3, r2
 801a504:	bfc4      	itt	gt
 801a506:	1a9b      	subgt	r3, r3, r2
 801a508:	18ed      	addgt	r5, r5, r3
 801a50a:	2600      	movs	r6, #0
 801a50c:	341a      	adds	r4, #26
 801a50e:	42b5      	cmp	r5, r6
 801a510:	d11a      	bne.n	801a548 <_printf_common+0xc8>
 801a512:	2000      	movs	r0, #0
 801a514:	e008      	b.n	801a528 <_printf_common+0xa8>
 801a516:	2301      	movs	r3, #1
 801a518:	4652      	mov	r2, sl
 801a51a:	4649      	mov	r1, r9
 801a51c:	4638      	mov	r0, r7
 801a51e:	47c0      	blx	r8
 801a520:	3001      	adds	r0, #1
 801a522:	d103      	bne.n	801a52c <_printf_common+0xac>
 801a524:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a528:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a52c:	3501      	adds	r5, #1
 801a52e:	e7c6      	b.n	801a4be <_printf_common+0x3e>
 801a530:	18e1      	adds	r1, r4, r3
 801a532:	1c5a      	adds	r2, r3, #1
 801a534:	2030      	movs	r0, #48	; 0x30
 801a536:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801a53a:	4422      	add	r2, r4
 801a53c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801a540:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801a544:	3302      	adds	r3, #2
 801a546:	e7c7      	b.n	801a4d8 <_printf_common+0x58>
 801a548:	2301      	movs	r3, #1
 801a54a:	4622      	mov	r2, r4
 801a54c:	4649      	mov	r1, r9
 801a54e:	4638      	mov	r0, r7
 801a550:	47c0      	blx	r8
 801a552:	3001      	adds	r0, #1
 801a554:	d0e6      	beq.n	801a524 <_printf_common+0xa4>
 801a556:	3601      	adds	r6, #1
 801a558:	e7d9      	b.n	801a50e <_printf_common+0x8e>
	...

0801a55c <_printf_i>:
 801a55c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a560:	7e0f      	ldrb	r7, [r1, #24]
 801a562:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801a564:	2f78      	cmp	r7, #120	; 0x78
 801a566:	4691      	mov	r9, r2
 801a568:	4680      	mov	r8, r0
 801a56a:	460c      	mov	r4, r1
 801a56c:	469a      	mov	sl, r3
 801a56e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801a572:	d807      	bhi.n	801a584 <_printf_i+0x28>
 801a574:	2f62      	cmp	r7, #98	; 0x62
 801a576:	d80a      	bhi.n	801a58e <_printf_i+0x32>
 801a578:	2f00      	cmp	r7, #0
 801a57a:	f000 80d8 	beq.w	801a72e <_printf_i+0x1d2>
 801a57e:	2f58      	cmp	r7, #88	; 0x58
 801a580:	f000 80a3 	beq.w	801a6ca <_printf_i+0x16e>
 801a584:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a588:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801a58c:	e03a      	b.n	801a604 <_printf_i+0xa8>
 801a58e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801a592:	2b15      	cmp	r3, #21
 801a594:	d8f6      	bhi.n	801a584 <_printf_i+0x28>
 801a596:	a101      	add	r1, pc, #4	; (adr r1, 801a59c <_printf_i+0x40>)
 801a598:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801a59c:	0801a5f5 	.word	0x0801a5f5
 801a5a0:	0801a609 	.word	0x0801a609
 801a5a4:	0801a585 	.word	0x0801a585
 801a5a8:	0801a585 	.word	0x0801a585
 801a5ac:	0801a585 	.word	0x0801a585
 801a5b0:	0801a585 	.word	0x0801a585
 801a5b4:	0801a609 	.word	0x0801a609
 801a5b8:	0801a585 	.word	0x0801a585
 801a5bc:	0801a585 	.word	0x0801a585
 801a5c0:	0801a585 	.word	0x0801a585
 801a5c4:	0801a585 	.word	0x0801a585
 801a5c8:	0801a715 	.word	0x0801a715
 801a5cc:	0801a639 	.word	0x0801a639
 801a5d0:	0801a6f7 	.word	0x0801a6f7
 801a5d4:	0801a585 	.word	0x0801a585
 801a5d8:	0801a585 	.word	0x0801a585
 801a5dc:	0801a737 	.word	0x0801a737
 801a5e0:	0801a585 	.word	0x0801a585
 801a5e4:	0801a639 	.word	0x0801a639
 801a5e8:	0801a585 	.word	0x0801a585
 801a5ec:	0801a585 	.word	0x0801a585
 801a5f0:	0801a6ff 	.word	0x0801a6ff
 801a5f4:	682b      	ldr	r3, [r5, #0]
 801a5f6:	1d1a      	adds	r2, r3, #4
 801a5f8:	681b      	ldr	r3, [r3, #0]
 801a5fa:	602a      	str	r2, [r5, #0]
 801a5fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a600:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801a604:	2301      	movs	r3, #1
 801a606:	e0a3      	b.n	801a750 <_printf_i+0x1f4>
 801a608:	6820      	ldr	r0, [r4, #0]
 801a60a:	6829      	ldr	r1, [r5, #0]
 801a60c:	0606      	lsls	r6, r0, #24
 801a60e:	f101 0304 	add.w	r3, r1, #4
 801a612:	d50a      	bpl.n	801a62a <_printf_i+0xce>
 801a614:	680e      	ldr	r6, [r1, #0]
 801a616:	602b      	str	r3, [r5, #0]
 801a618:	2e00      	cmp	r6, #0
 801a61a:	da03      	bge.n	801a624 <_printf_i+0xc8>
 801a61c:	232d      	movs	r3, #45	; 0x2d
 801a61e:	4276      	negs	r6, r6
 801a620:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a624:	485e      	ldr	r0, [pc, #376]	; (801a7a0 <_printf_i+0x244>)
 801a626:	230a      	movs	r3, #10
 801a628:	e019      	b.n	801a65e <_printf_i+0x102>
 801a62a:	680e      	ldr	r6, [r1, #0]
 801a62c:	602b      	str	r3, [r5, #0]
 801a62e:	f010 0f40 	tst.w	r0, #64	; 0x40
 801a632:	bf18      	it	ne
 801a634:	b236      	sxthne	r6, r6
 801a636:	e7ef      	b.n	801a618 <_printf_i+0xbc>
 801a638:	682b      	ldr	r3, [r5, #0]
 801a63a:	6820      	ldr	r0, [r4, #0]
 801a63c:	1d19      	adds	r1, r3, #4
 801a63e:	6029      	str	r1, [r5, #0]
 801a640:	0601      	lsls	r1, r0, #24
 801a642:	d501      	bpl.n	801a648 <_printf_i+0xec>
 801a644:	681e      	ldr	r6, [r3, #0]
 801a646:	e002      	b.n	801a64e <_printf_i+0xf2>
 801a648:	0646      	lsls	r6, r0, #25
 801a64a:	d5fb      	bpl.n	801a644 <_printf_i+0xe8>
 801a64c:	881e      	ldrh	r6, [r3, #0]
 801a64e:	4854      	ldr	r0, [pc, #336]	; (801a7a0 <_printf_i+0x244>)
 801a650:	2f6f      	cmp	r7, #111	; 0x6f
 801a652:	bf0c      	ite	eq
 801a654:	2308      	moveq	r3, #8
 801a656:	230a      	movne	r3, #10
 801a658:	2100      	movs	r1, #0
 801a65a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801a65e:	6865      	ldr	r5, [r4, #4]
 801a660:	60a5      	str	r5, [r4, #8]
 801a662:	2d00      	cmp	r5, #0
 801a664:	bfa2      	ittt	ge
 801a666:	6821      	ldrge	r1, [r4, #0]
 801a668:	f021 0104 	bicge.w	r1, r1, #4
 801a66c:	6021      	strge	r1, [r4, #0]
 801a66e:	b90e      	cbnz	r6, 801a674 <_printf_i+0x118>
 801a670:	2d00      	cmp	r5, #0
 801a672:	d04d      	beq.n	801a710 <_printf_i+0x1b4>
 801a674:	4615      	mov	r5, r2
 801a676:	fbb6 f1f3 	udiv	r1, r6, r3
 801a67a:	fb03 6711 	mls	r7, r3, r1, r6
 801a67e:	5dc7      	ldrb	r7, [r0, r7]
 801a680:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801a684:	4637      	mov	r7, r6
 801a686:	42bb      	cmp	r3, r7
 801a688:	460e      	mov	r6, r1
 801a68a:	d9f4      	bls.n	801a676 <_printf_i+0x11a>
 801a68c:	2b08      	cmp	r3, #8
 801a68e:	d10b      	bne.n	801a6a8 <_printf_i+0x14c>
 801a690:	6823      	ldr	r3, [r4, #0]
 801a692:	07de      	lsls	r6, r3, #31
 801a694:	d508      	bpl.n	801a6a8 <_printf_i+0x14c>
 801a696:	6923      	ldr	r3, [r4, #16]
 801a698:	6861      	ldr	r1, [r4, #4]
 801a69a:	4299      	cmp	r1, r3
 801a69c:	bfde      	ittt	le
 801a69e:	2330      	movle	r3, #48	; 0x30
 801a6a0:	f805 3c01 	strble.w	r3, [r5, #-1]
 801a6a4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801a6a8:	1b52      	subs	r2, r2, r5
 801a6aa:	6122      	str	r2, [r4, #16]
 801a6ac:	f8cd a000 	str.w	sl, [sp]
 801a6b0:	464b      	mov	r3, r9
 801a6b2:	aa03      	add	r2, sp, #12
 801a6b4:	4621      	mov	r1, r4
 801a6b6:	4640      	mov	r0, r8
 801a6b8:	f7ff fee2 	bl	801a480 <_printf_common>
 801a6bc:	3001      	adds	r0, #1
 801a6be:	d14c      	bne.n	801a75a <_printf_i+0x1fe>
 801a6c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a6c4:	b004      	add	sp, #16
 801a6c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a6ca:	4835      	ldr	r0, [pc, #212]	; (801a7a0 <_printf_i+0x244>)
 801a6cc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801a6d0:	6829      	ldr	r1, [r5, #0]
 801a6d2:	6823      	ldr	r3, [r4, #0]
 801a6d4:	f851 6b04 	ldr.w	r6, [r1], #4
 801a6d8:	6029      	str	r1, [r5, #0]
 801a6da:	061d      	lsls	r5, r3, #24
 801a6dc:	d514      	bpl.n	801a708 <_printf_i+0x1ac>
 801a6de:	07df      	lsls	r7, r3, #31
 801a6e0:	bf44      	itt	mi
 801a6e2:	f043 0320 	orrmi.w	r3, r3, #32
 801a6e6:	6023      	strmi	r3, [r4, #0]
 801a6e8:	b91e      	cbnz	r6, 801a6f2 <_printf_i+0x196>
 801a6ea:	6823      	ldr	r3, [r4, #0]
 801a6ec:	f023 0320 	bic.w	r3, r3, #32
 801a6f0:	6023      	str	r3, [r4, #0]
 801a6f2:	2310      	movs	r3, #16
 801a6f4:	e7b0      	b.n	801a658 <_printf_i+0xfc>
 801a6f6:	6823      	ldr	r3, [r4, #0]
 801a6f8:	f043 0320 	orr.w	r3, r3, #32
 801a6fc:	6023      	str	r3, [r4, #0]
 801a6fe:	2378      	movs	r3, #120	; 0x78
 801a700:	4828      	ldr	r0, [pc, #160]	; (801a7a4 <_printf_i+0x248>)
 801a702:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801a706:	e7e3      	b.n	801a6d0 <_printf_i+0x174>
 801a708:	0659      	lsls	r1, r3, #25
 801a70a:	bf48      	it	mi
 801a70c:	b2b6      	uxthmi	r6, r6
 801a70e:	e7e6      	b.n	801a6de <_printf_i+0x182>
 801a710:	4615      	mov	r5, r2
 801a712:	e7bb      	b.n	801a68c <_printf_i+0x130>
 801a714:	682b      	ldr	r3, [r5, #0]
 801a716:	6826      	ldr	r6, [r4, #0]
 801a718:	6961      	ldr	r1, [r4, #20]
 801a71a:	1d18      	adds	r0, r3, #4
 801a71c:	6028      	str	r0, [r5, #0]
 801a71e:	0635      	lsls	r5, r6, #24
 801a720:	681b      	ldr	r3, [r3, #0]
 801a722:	d501      	bpl.n	801a728 <_printf_i+0x1cc>
 801a724:	6019      	str	r1, [r3, #0]
 801a726:	e002      	b.n	801a72e <_printf_i+0x1d2>
 801a728:	0670      	lsls	r0, r6, #25
 801a72a:	d5fb      	bpl.n	801a724 <_printf_i+0x1c8>
 801a72c:	8019      	strh	r1, [r3, #0]
 801a72e:	2300      	movs	r3, #0
 801a730:	6123      	str	r3, [r4, #16]
 801a732:	4615      	mov	r5, r2
 801a734:	e7ba      	b.n	801a6ac <_printf_i+0x150>
 801a736:	682b      	ldr	r3, [r5, #0]
 801a738:	1d1a      	adds	r2, r3, #4
 801a73a:	602a      	str	r2, [r5, #0]
 801a73c:	681d      	ldr	r5, [r3, #0]
 801a73e:	6862      	ldr	r2, [r4, #4]
 801a740:	2100      	movs	r1, #0
 801a742:	4628      	mov	r0, r5
 801a744:	f7e5 fdcc 	bl	80002e0 <memchr>
 801a748:	b108      	cbz	r0, 801a74e <_printf_i+0x1f2>
 801a74a:	1b40      	subs	r0, r0, r5
 801a74c:	6060      	str	r0, [r4, #4]
 801a74e:	6863      	ldr	r3, [r4, #4]
 801a750:	6123      	str	r3, [r4, #16]
 801a752:	2300      	movs	r3, #0
 801a754:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a758:	e7a8      	b.n	801a6ac <_printf_i+0x150>
 801a75a:	6923      	ldr	r3, [r4, #16]
 801a75c:	462a      	mov	r2, r5
 801a75e:	4649      	mov	r1, r9
 801a760:	4640      	mov	r0, r8
 801a762:	47d0      	blx	sl
 801a764:	3001      	adds	r0, #1
 801a766:	d0ab      	beq.n	801a6c0 <_printf_i+0x164>
 801a768:	6823      	ldr	r3, [r4, #0]
 801a76a:	079b      	lsls	r3, r3, #30
 801a76c:	d413      	bmi.n	801a796 <_printf_i+0x23a>
 801a76e:	68e0      	ldr	r0, [r4, #12]
 801a770:	9b03      	ldr	r3, [sp, #12]
 801a772:	4298      	cmp	r0, r3
 801a774:	bfb8      	it	lt
 801a776:	4618      	movlt	r0, r3
 801a778:	e7a4      	b.n	801a6c4 <_printf_i+0x168>
 801a77a:	2301      	movs	r3, #1
 801a77c:	4632      	mov	r2, r6
 801a77e:	4649      	mov	r1, r9
 801a780:	4640      	mov	r0, r8
 801a782:	47d0      	blx	sl
 801a784:	3001      	adds	r0, #1
 801a786:	d09b      	beq.n	801a6c0 <_printf_i+0x164>
 801a788:	3501      	adds	r5, #1
 801a78a:	68e3      	ldr	r3, [r4, #12]
 801a78c:	9903      	ldr	r1, [sp, #12]
 801a78e:	1a5b      	subs	r3, r3, r1
 801a790:	42ab      	cmp	r3, r5
 801a792:	dcf2      	bgt.n	801a77a <_printf_i+0x21e>
 801a794:	e7eb      	b.n	801a76e <_printf_i+0x212>
 801a796:	2500      	movs	r5, #0
 801a798:	f104 0619 	add.w	r6, r4, #25
 801a79c:	e7f5      	b.n	801a78a <_printf_i+0x22e>
 801a79e:	bf00      	nop
 801a7a0:	08035a1d 	.word	0x08035a1d
 801a7a4:	08035a2e 	.word	0x08035a2e

0801a7a8 <_sbrk_r>:
 801a7a8:	b538      	push	{r3, r4, r5, lr}
 801a7aa:	4d06      	ldr	r5, [pc, #24]	; (801a7c4 <_sbrk_r+0x1c>)
 801a7ac:	2300      	movs	r3, #0
 801a7ae:	4604      	mov	r4, r0
 801a7b0:	4608      	mov	r0, r1
 801a7b2:	602b      	str	r3, [r5, #0]
 801a7b4:	f7ee fd4c 	bl	8009250 <_sbrk>
 801a7b8:	1c43      	adds	r3, r0, #1
 801a7ba:	d102      	bne.n	801a7c2 <_sbrk_r+0x1a>
 801a7bc:	682b      	ldr	r3, [r5, #0]
 801a7be:	b103      	cbz	r3, 801a7c2 <_sbrk_r+0x1a>
 801a7c0:	6023      	str	r3, [r4, #0]
 801a7c2:	bd38      	pop	{r3, r4, r5, pc}
 801a7c4:	24003664 	.word	0x24003664

0801a7c8 <_raise_r>:
 801a7c8:	291f      	cmp	r1, #31
 801a7ca:	b538      	push	{r3, r4, r5, lr}
 801a7cc:	4604      	mov	r4, r0
 801a7ce:	460d      	mov	r5, r1
 801a7d0:	d904      	bls.n	801a7dc <_raise_r+0x14>
 801a7d2:	2316      	movs	r3, #22
 801a7d4:	6003      	str	r3, [r0, #0]
 801a7d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a7da:	bd38      	pop	{r3, r4, r5, pc}
 801a7dc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801a7de:	b112      	cbz	r2, 801a7e6 <_raise_r+0x1e>
 801a7e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801a7e4:	b94b      	cbnz	r3, 801a7fa <_raise_r+0x32>
 801a7e6:	4620      	mov	r0, r4
 801a7e8:	f000 f830 	bl	801a84c <_getpid_r>
 801a7ec:	462a      	mov	r2, r5
 801a7ee:	4601      	mov	r1, r0
 801a7f0:	4620      	mov	r0, r4
 801a7f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a7f6:	f000 b817 	b.w	801a828 <_kill_r>
 801a7fa:	2b01      	cmp	r3, #1
 801a7fc:	d00a      	beq.n	801a814 <_raise_r+0x4c>
 801a7fe:	1c59      	adds	r1, r3, #1
 801a800:	d103      	bne.n	801a80a <_raise_r+0x42>
 801a802:	2316      	movs	r3, #22
 801a804:	6003      	str	r3, [r0, #0]
 801a806:	2001      	movs	r0, #1
 801a808:	e7e7      	b.n	801a7da <_raise_r+0x12>
 801a80a:	2400      	movs	r4, #0
 801a80c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801a810:	4628      	mov	r0, r5
 801a812:	4798      	blx	r3
 801a814:	2000      	movs	r0, #0
 801a816:	e7e0      	b.n	801a7da <_raise_r+0x12>

0801a818 <raise>:
 801a818:	4b02      	ldr	r3, [pc, #8]	; (801a824 <raise+0xc>)
 801a81a:	4601      	mov	r1, r0
 801a81c:	6818      	ldr	r0, [r3, #0]
 801a81e:	f7ff bfd3 	b.w	801a7c8 <_raise_r>
 801a822:	bf00      	nop
 801a824:	24000184 	.word	0x24000184

0801a828 <_kill_r>:
 801a828:	b538      	push	{r3, r4, r5, lr}
 801a82a:	4d07      	ldr	r5, [pc, #28]	; (801a848 <_kill_r+0x20>)
 801a82c:	2300      	movs	r3, #0
 801a82e:	4604      	mov	r4, r0
 801a830:	4608      	mov	r0, r1
 801a832:	4611      	mov	r1, r2
 801a834:	602b      	str	r3, [r5, #0]
 801a836:	f7ee fc83 	bl	8009140 <_kill>
 801a83a:	1c43      	adds	r3, r0, #1
 801a83c:	d102      	bne.n	801a844 <_kill_r+0x1c>
 801a83e:	682b      	ldr	r3, [r5, #0]
 801a840:	b103      	cbz	r3, 801a844 <_kill_r+0x1c>
 801a842:	6023      	str	r3, [r4, #0]
 801a844:	bd38      	pop	{r3, r4, r5, pc}
 801a846:	bf00      	nop
 801a848:	24003664 	.word	0x24003664

0801a84c <_getpid_r>:
 801a84c:	f7ee bc70 	b.w	8009130 <_getpid>

0801a850 <__swbuf_r>:
 801a850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a852:	460e      	mov	r6, r1
 801a854:	4614      	mov	r4, r2
 801a856:	4605      	mov	r5, r0
 801a858:	b118      	cbz	r0, 801a862 <__swbuf_r+0x12>
 801a85a:	6983      	ldr	r3, [r0, #24]
 801a85c:	b90b      	cbnz	r3, 801a862 <__swbuf_r+0x12>
 801a85e:	f000 f9d1 	bl	801ac04 <__sinit>
 801a862:	4b21      	ldr	r3, [pc, #132]	; (801a8e8 <__swbuf_r+0x98>)
 801a864:	429c      	cmp	r4, r3
 801a866:	d12b      	bne.n	801a8c0 <__swbuf_r+0x70>
 801a868:	686c      	ldr	r4, [r5, #4]
 801a86a:	69a3      	ldr	r3, [r4, #24]
 801a86c:	60a3      	str	r3, [r4, #8]
 801a86e:	89a3      	ldrh	r3, [r4, #12]
 801a870:	071a      	lsls	r2, r3, #28
 801a872:	d52f      	bpl.n	801a8d4 <__swbuf_r+0x84>
 801a874:	6923      	ldr	r3, [r4, #16]
 801a876:	b36b      	cbz	r3, 801a8d4 <__swbuf_r+0x84>
 801a878:	6923      	ldr	r3, [r4, #16]
 801a87a:	6820      	ldr	r0, [r4, #0]
 801a87c:	1ac0      	subs	r0, r0, r3
 801a87e:	6963      	ldr	r3, [r4, #20]
 801a880:	b2f6      	uxtb	r6, r6
 801a882:	4283      	cmp	r3, r0
 801a884:	4637      	mov	r7, r6
 801a886:	dc04      	bgt.n	801a892 <__swbuf_r+0x42>
 801a888:	4621      	mov	r1, r4
 801a88a:	4628      	mov	r0, r5
 801a88c:	f000 f926 	bl	801aadc <_fflush_r>
 801a890:	bb30      	cbnz	r0, 801a8e0 <__swbuf_r+0x90>
 801a892:	68a3      	ldr	r3, [r4, #8]
 801a894:	3b01      	subs	r3, #1
 801a896:	60a3      	str	r3, [r4, #8]
 801a898:	6823      	ldr	r3, [r4, #0]
 801a89a:	1c5a      	adds	r2, r3, #1
 801a89c:	6022      	str	r2, [r4, #0]
 801a89e:	701e      	strb	r6, [r3, #0]
 801a8a0:	6963      	ldr	r3, [r4, #20]
 801a8a2:	3001      	adds	r0, #1
 801a8a4:	4283      	cmp	r3, r0
 801a8a6:	d004      	beq.n	801a8b2 <__swbuf_r+0x62>
 801a8a8:	89a3      	ldrh	r3, [r4, #12]
 801a8aa:	07db      	lsls	r3, r3, #31
 801a8ac:	d506      	bpl.n	801a8bc <__swbuf_r+0x6c>
 801a8ae:	2e0a      	cmp	r6, #10
 801a8b0:	d104      	bne.n	801a8bc <__swbuf_r+0x6c>
 801a8b2:	4621      	mov	r1, r4
 801a8b4:	4628      	mov	r0, r5
 801a8b6:	f000 f911 	bl	801aadc <_fflush_r>
 801a8ba:	b988      	cbnz	r0, 801a8e0 <__swbuf_r+0x90>
 801a8bc:	4638      	mov	r0, r7
 801a8be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a8c0:	4b0a      	ldr	r3, [pc, #40]	; (801a8ec <__swbuf_r+0x9c>)
 801a8c2:	429c      	cmp	r4, r3
 801a8c4:	d101      	bne.n	801a8ca <__swbuf_r+0x7a>
 801a8c6:	68ac      	ldr	r4, [r5, #8]
 801a8c8:	e7cf      	b.n	801a86a <__swbuf_r+0x1a>
 801a8ca:	4b09      	ldr	r3, [pc, #36]	; (801a8f0 <__swbuf_r+0xa0>)
 801a8cc:	429c      	cmp	r4, r3
 801a8ce:	bf08      	it	eq
 801a8d0:	68ec      	ldreq	r4, [r5, #12]
 801a8d2:	e7ca      	b.n	801a86a <__swbuf_r+0x1a>
 801a8d4:	4621      	mov	r1, r4
 801a8d6:	4628      	mov	r0, r5
 801a8d8:	f000 f80c 	bl	801a8f4 <__swsetup_r>
 801a8dc:	2800      	cmp	r0, #0
 801a8de:	d0cb      	beq.n	801a878 <__swbuf_r+0x28>
 801a8e0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801a8e4:	e7ea      	b.n	801a8bc <__swbuf_r+0x6c>
 801a8e6:	bf00      	nop
 801a8e8:	08035a60 	.word	0x08035a60
 801a8ec:	08035a80 	.word	0x08035a80
 801a8f0:	08035a40 	.word	0x08035a40

0801a8f4 <__swsetup_r>:
 801a8f4:	4b32      	ldr	r3, [pc, #200]	; (801a9c0 <__swsetup_r+0xcc>)
 801a8f6:	b570      	push	{r4, r5, r6, lr}
 801a8f8:	681d      	ldr	r5, [r3, #0]
 801a8fa:	4606      	mov	r6, r0
 801a8fc:	460c      	mov	r4, r1
 801a8fe:	b125      	cbz	r5, 801a90a <__swsetup_r+0x16>
 801a900:	69ab      	ldr	r3, [r5, #24]
 801a902:	b913      	cbnz	r3, 801a90a <__swsetup_r+0x16>
 801a904:	4628      	mov	r0, r5
 801a906:	f000 f97d 	bl	801ac04 <__sinit>
 801a90a:	4b2e      	ldr	r3, [pc, #184]	; (801a9c4 <__swsetup_r+0xd0>)
 801a90c:	429c      	cmp	r4, r3
 801a90e:	d10f      	bne.n	801a930 <__swsetup_r+0x3c>
 801a910:	686c      	ldr	r4, [r5, #4]
 801a912:	89a3      	ldrh	r3, [r4, #12]
 801a914:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a918:	0719      	lsls	r1, r3, #28
 801a91a:	d42c      	bmi.n	801a976 <__swsetup_r+0x82>
 801a91c:	06dd      	lsls	r5, r3, #27
 801a91e:	d411      	bmi.n	801a944 <__swsetup_r+0x50>
 801a920:	2309      	movs	r3, #9
 801a922:	6033      	str	r3, [r6, #0]
 801a924:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801a928:	81a3      	strh	r3, [r4, #12]
 801a92a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a92e:	e03e      	b.n	801a9ae <__swsetup_r+0xba>
 801a930:	4b25      	ldr	r3, [pc, #148]	; (801a9c8 <__swsetup_r+0xd4>)
 801a932:	429c      	cmp	r4, r3
 801a934:	d101      	bne.n	801a93a <__swsetup_r+0x46>
 801a936:	68ac      	ldr	r4, [r5, #8]
 801a938:	e7eb      	b.n	801a912 <__swsetup_r+0x1e>
 801a93a:	4b24      	ldr	r3, [pc, #144]	; (801a9cc <__swsetup_r+0xd8>)
 801a93c:	429c      	cmp	r4, r3
 801a93e:	bf08      	it	eq
 801a940:	68ec      	ldreq	r4, [r5, #12]
 801a942:	e7e6      	b.n	801a912 <__swsetup_r+0x1e>
 801a944:	0758      	lsls	r0, r3, #29
 801a946:	d512      	bpl.n	801a96e <__swsetup_r+0x7a>
 801a948:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a94a:	b141      	cbz	r1, 801a95e <__swsetup_r+0x6a>
 801a94c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a950:	4299      	cmp	r1, r3
 801a952:	d002      	beq.n	801a95a <__swsetup_r+0x66>
 801a954:	4630      	mov	r0, r6
 801a956:	f7ff fb59 	bl	801a00c <_free_r>
 801a95a:	2300      	movs	r3, #0
 801a95c:	6363      	str	r3, [r4, #52]	; 0x34
 801a95e:	89a3      	ldrh	r3, [r4, #12]
 801a960:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801a964:	81a3      	strh	r3, [r4, #12]
 801a966:	2300      	movs	r3, #0
 801a968:	6063      	str	r3, [r4, #4]
 801a96a:	6923      	ldr	r3, [r4, #16]
 801a96c:	6023      	str	r3, [r4, #0]
 801a96e:	89a3      	ldrh	r3, [r4, #12]
 801a970:	f043 0308 	orr.w	r3, r3, #8
 801a974:	81a3      	strh	r3, [r4, #12]
 801a976:	6923      	ldr	r3, [r4, #16]
 801a978:	b94b      	cbnz	r3, 801a98e <__swsetup_r+0x9a>
 801a97a:	89a3      	ldrh	r3, [r4, #12]
 801a97c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801a980:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a984:	d003      	beq.n	801a98e <__swsetup_r+0x9a>
 801a986:	4621      	mov	r1, r4
 801a988:	4630      	mov	r0, r6
 801a98a:	f000 fa01 	bl	801ad90 <__smakebuf_r>
 801a98e:	89a0      	ldrh	r0, [r4, #12]
 801a990:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a994:	f010 0301 	ands.w	r3, r0, #1
 801a998:	d00a      	beq.n	801a9b0 <__swsetup_r+0xbc>
 801a99a:	2300      	movs	r3, #0
 801a99c:	60a3      	str	r3, [r4, #8]
 801a99e:	6963      	ldr	r3, [r4, #20]
 801a9a0:	425b      	negs	r3, r3
 801a9a2:	61a3      	str	r3, [r4, #24]
 801a9a4:	6923      	ldr	r3, [r4, #16]
 801a9a6:	b943      	cbnz	r3, 801a9ba <__swsetup_r+0xc6>
 801a9a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801a9ac:	d1ba      	bne.n	801a924 <__swsetup_r+0x30>
 801a9ae:	bd70      	pop	{r4, r5, r6, pc}
 801a9b0:	0781      	lsls	r1, r0, #30
 801a9b2:	bf58      	it	pl
 801a9b4:	6963      	ldrpl	r3, [r4, #20]
 801a9b6:	60a3      	str	r3, [r4, #8]
 801a9b8:	e7f4      	b.n	801a9a4 <__swsetup_r+0xb0>
 801a9ba:	2000      	movs	r0, #0
 801a9bc:	e7f7      	b.n	801a9ae <__swsetup_r+0xba>
 801a9be:	bf00      	nop
 801a9c0:	24000184 	.word	0x24000184
 801a9c4:	08035a60 	.word	0x08035a60
 801a9c8:	08035a80 	.word	0x08035a80
 801a9cc:	08035a40 	.word	0x08035a40

0801a9d0 <__sflush_r>:
 801a9d0:	898a      	ldrh	r2, [r1, #12]
 801a9d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a9d6:	4605      	mov	r5, r0
 801a9d8:	0710      	lsls	r0, r2, #28
 801a9da:	460c      	mov	r4, r1
 801a9dc:	d458      	bmi.n	801aa90 <__sflush_r+0xc0>
 801a9de:	684b      	ldr	r3, [r1, #4]
 801a9e0:	2b00      	cmp	r3, #0
 801a9e2:	dc05      	bgt.n	801a9f0 <__sflush_r+0x20>
 801a9e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801a9e6:	2b00      	cmp	r3, #0
 801a9e8:	dc02      	bgt.n	801a9f0 <__sflush_r+0x20>
 801a9ea:	2000      	movs	r0, #0
 801a9ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a9f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a9f2:	2e00      	cmp	r6, #0
 801a9f4:	d0f9      	beq.n	801a9ea <__sflush_r+0x1a>
 801a9f6:	2300      	movs	r3, #0
 801a9f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801a9fc:	682f      	ldr	r7, [r5, #0]
 801a9fe:	602b      	str	r3, [r5, #0]
 801aa00:	d032      	beq.n	801aa68 <__sflush_r+0x98>
 801aa02:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801aa04:	89a3      	ldrh	r3, [r4, #12]
 801aa06:	075a      	lsls	r2, r3, #29
 801aa08:	d505      	bpl.n	801aa16 <__sflush_r+0x46>
 801aa0a:	6863      	ldr	r3, [r4, #4]
 801aa0c:	1ac0      	subs	r0, r0, r3
 801aa0e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801aa10:	b10b      	cbz	r3, 801aa16 <__sflush_r+0x46>
 801aa12:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801aa14:	1ac0      	subs	r0, r0, r3
 801aa16:	2300      	movs	r3, #0
 801aa18:	4602      	mov	r2, r0
 801aa1a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801aa1c:	6a21      	ldr	r1, [r4, #32]
 801aa1e:	4628      	mov	r0, r5
 801aa20:	47b0      	blx	r6
 801aa22:	1c43      	adds	r3, r0, #1
 801aa24:	89a3      	ldrh	r3, [r4, #12]
 801aa26:	d106      	bne.n	801aa36 <__sflush_r+0x66>
 801aa28:	6829      	ldr	r1, [r5, #0]
 801aa2a:	291d      	cmp	r1, #29
 801aa2c:	d82c      	bhi.n	801aa88 <__sflush_r+0xb8>
 801aa2e:	4a2a      	ldr	r2, [pc, #168]	; (801aad8 <__sflush_r+0x108>)
 801aa30:	40ca      	lsrs	r2, r1
 801aa32:	07d6      	lsls	r6, r2, #31
 801aa34:	d528      	bpl.n	801aa88 <__sflush_r+0xb8>
 801aa36:	2200      	movs	r2, #0
 801aa38:	6062      	str	r2, [r4, #4]
 801aa3a:	04d9      	lsls	r1, r3, #19
 801aa3c:	6922      	ldr	r2, [r4, #16]
 801aa3e:	6022      	str	r2, [r4, #0]
 801aa40:	d504      	bpl.n	801aa4c <__sflush_r+0x7c>
 801aa42:	1c42      	adds	r2, r0, #1
 801aa44:	d101      	bne.n	801aa4a <__sflush_r+0x7a>
 801aa46:	682b      	ldr	r3, [r5, #0]
 801aa48:	b903      	cbnz	r3, 801aa4c <__sflush_r+0x7c>
 801aa4a:	6560      	str	r0, [r4, #84]	; 0x54
 801aa4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801aa4e:	602f      	str	r7, [r5, #0]
 801aa50:	2900      	cmp	r1, #0
 801aa52:	d0ca      	beq.n	801a9ea <__sflush_r+0x1a>
 801aa54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801aa58:	4299      	cmp	r1, r3
 801aa5a:	d002      	beq.n	801aa62 <__sflush_r+0x92>
 801aa5c:	4628      	mov	r0, r5
 801aa5e:	f7ff fad5 	bl	801a00c <_free_r>
 801aa62:	2000      	movs	r0, #0
 801aa64:	6360      	str	r0, [r4, #52]	; 0x34
 801aa66:	e7c1      	b.n	801a9ec <__sflush_r+0x1c>
 801aa68:	6a21      	ldr	r1, [r4, #32]
 801aa6a:	2301      	movs	r3, #1
 801aa6c:	4628      	mov	r0, r5
 801aa6e:	47b0      	blx	r6
 801aa70:	1c41      	adds	r1, r0, #1
 801aa72:	d1c7      	bne.n	801aa04 <__sflush_r+0x34>
 801aa74:	682b      	ldr	r3, [r5, #0]
 801aa76:	2b00      	cmp	r3, #0
 801aa78:	d0c4      	beq.n	801aa04 <__sflush_r+0x34>
 801aa7a:	2b1d      	cmp	r3, #29
 801aa7c:	d001      	beq.n	801aa82 <__sflush_r+0xb2>
 801aa7e:	2b16      	cmp	r3, #22
 801aa80:	d101      	bne.n	801aa86 <__sflush_r+0xb6>
 801aa82:	602f      	str	r7, [r5, #0]
 801aa84:	e7b1      	b.n	801a9ea <__sflush_r+0x1a>
 801aa86:	89a3      	ldrh	r3, [r4, #12]
 801aa88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801aa8c:	81a3      	strh	r3, [r4, #12]
 801aa8e:	e7ad      	b.n	801a9ec <__sflush_r+0x1c>
 801aa90:	690f      	ldr	r7, [r1, #16]
 801aa92:	2f00      	cmp	r7, #0
 801aa94:	d0a9      	beq.n	801a9ea <__sflush_r+0x1a>
 801aa96:	0793      	lsls	r3, r2, #30
 801aa98:	680e      	ldr	r6, [r1, #0]
 801aa9a:	bf08      	it	eq
 801aa9c:	694b      	ldreq	r3, [r1, #20]
 801aa9e:	600f      	str	r7, [r1, #0]
 801aaa0:	bf18      	it	ne
 801aaa2:	2300      	movne	r3, #0
 801aaa4:	eba6 0807 	sub.w	r8, r6, r7
 801aaa8:	608b      	str	r3, [r1, #8]
 801aaaa:	f1b8 0f00 	cmp.w	r8, #0
 801aaae:	dd9c      	ble.n	801a9ea <__sflush_r+0x1a>
 801aab0:	6a21      	ldr	r1, [r4, #32]
 801aab2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801aab4:	4643      	mov	r3, r8
 801aab6:	463a      	mov	r2, r7
 801aab8:	4628      	mov	r0, r5
 801aaba:	47b0      	blx	r6
 801aabc:	2800      	cmp	r0, #0
 801aabe:	dc06      	bgt.n	801aace <__sflush_r+0xfe>
 801aac0:	89a3      	ldrh	r3, [r4, #12]
 801aac2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801aac6:	81a3      	strh	r3, [r4, #12]
 801aac8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801aacc:	e78e      	b.n	801a9ec <__sflush_r+0x1c>
 801aace:	4407      	add	r7, r0
 801aad0:	eba8 0800 	sub.w	r8, r8, r0
 801aad4:	e7e9      	b.n	801aaaa <__sflush_r+0xda>
 801aad6:	bf00      	nop
 801aad8:	20400001 	.word	0x20400001

0801aadc <_fflush_r>:
 801aadc:	b538      	push	{r3, r4, r5, lr}
 801aade:	690b      	ldr	r3, [r1, #16]
 801aae0:	4605      	mov	r5, r0
 801aae2:	460c      	mov	r4, r1
 801aae4:	b913      	cbnz	r3, 801aaec <_fflush_r+0x10>
 801aae6:	2500      	movs	r5, #0
 801aae8:	4628      	mov	r0, r5
 801aaea:	bd38      	pop	{r3, r4, r5, pc}
 801aaec:	b118      	cbz	r0, 801aaf6 <_fflush_r+0x1a>
 801aaee:	6983      	ldr	r3, [r0, #24]
 801aaf0:	b90b      	cbnz	r3, 801aaf6 <_fflush_r+0x1a>
 801aaf2:	f000 f887 	bl	801ac04 <__sinit>
 801aaf6:	4b14      	ldr	r3, [pc, #80]	; (801ab48 <_fflush_r+0x6c>)
 801aaf8:	429c      	cmp	r4, r3
 801aafa:	d11b      	bne.n	801ab34 <_fflush_r+0x58>
 801aafc:	686c      	ldr	r4, [r5, #4]
 801aafe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ab02:	2b00      	cmp	r3, #0
 801ab04:	d0ef      	beq.n	801aae6 <_fflush_r+0xa>
 801ab06:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801ab08:	07d0      	lsls	r0, r2, #31
 801ab0a:	d404      	bmi.n	801ab16 <_fflush_r+0x3a>
 801ab0c:	0599      	lsls	r1, r3, #22
 801ab0e:	d402      	bmi.n	801ab16 <_fflush_r+0x3a>
 801ab10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ab12:	f000 f915 	bl	801ad40 <__retarget_lock_acquire_recursive>
 801ab16:	4628      	mov	r0, r5
 801ab18:	4621      	mov	r1, r4
 801ab1a:	f7ff ff59 	bl	801a9d0 <__sflush_r>
 801ab1e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ab20:	07da      	lsls	r2, r3, #31
 801ab22:	4605      	mov	r5, r0
 801ab24:	d4e0      	bmi.n	801aae8 <_fflush_r+0xc>
 801ab26:	89a3      	ldrh	r3, [r4, #12]
 801ab28:	059b      	lsls	r3, r3, #22
 801ab2a:	d4dd      	bmi.n	801aae8 <_fflush_r+0xc>
 801ab2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ab2e:	f000 f908 	bl	801ad42 <__retarget_lock_release_recursive>
 801ab32:	e7d9      	b.n	801aae8 <_fflush_r+0xc>
 801ab34:	4b05      	ldr	r3, [pc, #20]	; (801ab4c <_fflush_r+0x70>)
 801ab36:	429c      	cmp	r4, r3
 801ab38:	d101      	bne.n	801ab3e <_fflush_r+0x62>
 801ab3a:	68ac      	ldr	r4, [r5, #8]
 801ab3c:	e7df      	b.n	801aafe <_fflush_r+0x22>
 801ab3e:	4b04      	ldr	r3, [pc, #16]	; (801ab50 <_fflush_r+0x74>)
 801ab40:	429c      	cmp	r4, r3
 801ab42:	bf08      	it	eq
 801ab44:	68ec      	ldreq	r4, [r5, #12]
 801ab46:	e7da      	b.n	801aafe <_fflush_r+0x22>
 801ab48:	08035a60 	.word	0x08035a60
 801ab4c:	08035a80 	.word	0x08035a80
 801ab50:	08035a40 	.word	0x08035a40

0801ab54 <std>:
 801ab54:	2300      	movs	r3, #0
 801ab56:	b510      	push	{r4, lr}
 801ab58:	4604      	mov	r4, r0
 801ab5a:	e9c0 3300 	strd	r3, r3, [r0]
 801ab5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801ab62:	6083      	str	r3, [r0, #8]
 801ab64:	8181      	strh	r1, [r0, #12]
 801ab66:	6643      	str	r3, [r0, #100]	; 0x64
 801ab68:	81c2      	strh	r2, [r0, #14]
 801ab6a:	6183      	str	r3, [r0, #24]
 801ab6c:	4619      	mov	r1, r3
 801ab6e:	2208      	movs	r2, #8
 801ab70:	305c      	adds	r0, #92	; 0x5c
 801ab72:	f7ff fa43 	bl	8019ffc <memset>
 801ab76:	4b05      	ldr	r3, [pc, #20]	; (801ab8c <std+0x38>)
 801ab78:	6263      	str	r3, [r4, #36]	; 0x24
 801ab7a:	4b05      	ldr	r3, [pc, #20]	; (801ab90 <std+0x3c>)
 801ab7c:	62a3      	str	r3, [r4, #40]	; 0x28
 801ab7e:	4b05      	ldr	r3, [pc, #20]	; (801ab94 <std+0x40>)
 801ab80:	62e3      	str	r3, [r4, #44]	; 0x2c
 801ab82:	4b05      	ldr	r3, [pc, #20]	; (801ab98 <std+0x44>)
 801ab84:	6224      	str	r4, [r4, #32]
 801ab86:	6323      	str	r3, [r4, #48]	; 0x30
 801ab88:	bd10      	pop	{r4, pc}
 801ab8a:	bf00      	nop
 801ab8c:	0801ae29 	.word	0x0801ae29
 801ab90:	0801ae4b 	.word	0x0801ae4b
 801ab94:	0801ae83 	.word	0x0801ae83
 801ab98:	0801aea7 	.word	0x0801aea7

0801ab9c <_cleanup_r>:
 801ab9c:	4901      	ldr	r1, [pc, #4]	; (801aba4 <_cleanup_r+0x8>)
 801ab9e:	f000 b8af 	b.w	801ad00 <_fwalk_reent>
 801aba2:	bf00      	nop
 801aba4:	0801aadd 	.word	0x0801aadd

0801aba8 <__sfmoreglue>:
 801aba8:	b570      	push	{r4, r5, r6, lr}
 801abaa:	2268      	movs	r2, #104	; 0x68
 801abac:	1e4d      	subs	r5, r1, #1
 801abae:	4355      	muls	r5, r2
 801abb0:	460e      	mov	r6, r1
 801abb2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801abb6:	f7ff fa95 	bl	801a0e4 <_malloc_r>
 801abba:	4604      	mov	r4, r0
 801abbc:	b140      	cbz	r0, 801abd0 <__sfmoreglue+0x28>
 801abbe:	2100      	movs	r1, #0
 801abc0:	e9c0 1600 	strd	r1, r6, [r0]
 801abc4:	300c      	adds	r0, #12
 801abc6:	60a0      	str	r0, [r4, #8]
 801abc8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801abcc:	f7ff fa16 	bl	8019ffc <memset>
 801abd0:	4620      	mov	r0, r4
 801abd2:	bd70      	pop	{r4, r5, r6, pc}

0801abd4 <__sfp_lock_acquire>:
 801abd4:	4801      	ldr	r0, [pc, #4]	; (801abdc <__sfp_lock_acquire+0x8>)
 801abd6:	f000 b8b3 	b.w	801ad40 <__retarget_lock_acquire_recursive>
 801abda:	bf00      	nop
 801abdc:	24003661 	.word	0x24003661

0801abe0 <__sfp_lock_release>:
 801abe0:	4801      	ldr	r0, [pc, #4]	; (801abe8 <__sfp_lock_release+0x8>)
 801abe2:	f000 b8ae 	b.w	801ad42 <__retarget_lock_release_recursive>
 801abe6:	bf00      	nop
 801abe8:	24003661 	.word	0x24003661

0801abec <__sinit_lock_acquire>:
 801abec:	4801      	ldr	r0, [pc, #4]	; (801abf4 <__sinit_lock_acquire+0x8>)
 801abee:	f000 b8a7 	b.w	801ad40 <__retarget_lock_acquire_recursive>
 801abf2:	bf00      	nop
 801abf4:	24003662 	.word	0x24003662

0801abf8 <__sinit_lock_release>:
 801abf8:	4801      	ldr	r0, [pc, #4]	; (801ac00 <__sinit_lock_release+0x8>)
 801abfa:	f000 b8a2 	b.w	801ad42 <__retarget_lock_release_recursive>
 801abfe:	bf00      	nop
 801ac00:	24003662 	.word	0x24003662

0801ac04 <__sinit>:
 801ac04:	b510      	push	{r4, lr}
 801ac06:	4604      	mov	r4, r0
 801ac08:	f7ff fff0 	bl	801abec <__sinit_lock_acquire>
 801ac0c:	69a3      	ldr	r3, [r4, #24]
 801ac0e:	b11b      	cbz	r3, 801ac18 <__sinit+0x14>
 801ac10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ac14:	f7ff bff0 	b.w	801abf8 <__sinit_lock_release>
 801ac18:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801ac1c:	6523      	str	r3, [r4, #80]	; 0x50
 801ac1e:	4b13      	ldr	r3, [pc, #76]	; (801ac6c <__sinit+0x68>)
 801ac20:	4a13      	ldr	r2, [pc, #76]	; (801ac70 <__sinit+0x6c>)
 801ac22:	681b      	ldr	r3, [r3, #0]
 801ac24:	62a2      	str	r2, [r4, #40]	; 0x28
 801ac26:	42a3      	cmp	r3, r4
 801ac28:	bf04      	itt	eq
 801ac2a:	2301      	moveq	r3, #1
 801ac2c:	61a3      	streq	r3, [r4, #24]
 801ac2e:	4620      	mov	r0, r4
 801ac30:	f000 f820 	bl	801ac74 <__sfp>
 801ac34:	6060      	str	r0, [r4, #4]
 801ac36:	4620      	mov	r0, r4
 801ac38:	f000 f81c 	bl	801ac74 <__sfp>
 801ac3c:	60a0      	str	r0, [r4, #8]
 801ac3e:	4620      	mov	r0, r4
 801ac40:	f000 f818 	bl	801ac74 <__sfp>
 801ac44:	2200      	movs	r2, #0
 801ac46:	60e0      	str	r0, [r4, #12]
 801ac48:	2104      	movs	r1, #4
 801ac4a:	6860      	ldr	r0, [r4, #4]
 801ac4c:	f7ff ff82 	bl	801ab54 <std>
 801ac50:	68a0      	ldr	r0, [r4, #8]
 801ac52:	2201      	movs	r2, #1
 801ac54:	2109      	movs	r1, #9
 801ac56:	f7ff ff7d 	bl	801ab54 <std>
 801ac5a:	68e0      	ldr	r0, [r4, #12]
 801ac5c:	2202      	movs	r2, #2
 801ac5e:	2112      	movs	r1, #18
 801ac60:	f7ff ff78 	bl	801ab54 <std>
 801ac64:	2301      	movs	r3, #1
 801ac66:	61a3      	str	r3, [r4, #24]
 801ac68:	e7d2      	b.n	801ac10 <__sinit+0xc>
 801ac6a:	bf00      	nop
 801ac6c:	08035a08 	.word	0x08035a08
 801ac70:	0801ab9d 	.word	0x0801ab9d

0801ac74 <__sfp>:
 801ac74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ac76:	4607      	mov	r7, r0
 801ac78:	f7ff ffac 	bl	801abd4 <__sfp_lock_acquire>
 801ac7c:	4b1e      	ldr	r3, [pc, #120]	; (801acf8 <__sfp+0x84>)
 801ac7e:	681e      	ldr	r6, [r3, #0]
 801ac80:	69b3      	ldr	r3, [r6, #24]
 801ac82:	b913      	cbnz	r3, 801ac8a <__sfp+0x16>
 801ac84:	4630      	mov	r0, r6
 801ac86:	f7ff ffbd 	bl	801ac04 <__sinit>
 801ac8a:	3648      	adds	r6, #72	; 0x48
 801ac8c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801ac90:	3b01      	subs	r3, #1
 801ac92:	d503      	bpl.n	801ac9c <__sfp+0x28>
 801ac94:	6833      	ldr	r3, [r6, #0]
 801ac96:	b30b      	cbz	r3, 801acdc <__sfp+0x68>
 801ac98:	6836      	ldr	r6, [r6, #0]
 801ac9a:	e7f7      	b.n	801ac8c <__sfp+0x18>
 801ac9c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801aca0:	b9d5      	cbnz	r5, 801acd8 <__sfp+0x64>
 801aca2:	4b16      	ldr	r3, [pc, #88]	; (801acfc <__sfp+0x88>)
 801aca4:	60e3      	str	r3, [r4, #12]
 801aca6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801acaa:	6665      	str	r5, [r4, #100]	; 0x64
 801acac:	f000 f847 	bl	801ad3e <__retarget_lock_init_recursive>
 801acb0:	f7ff ff96 	bl	801abe0 <__sfp_lock_release>
 801acb4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801acb8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801acbc:	6025      	str	r5, [r4, #0]
 801acbe:	61a5      	str	r5, [r4, #24]
 801acc0:	2208      	movs	r2, #8
 801acc2:	4629      	mov	r1, r5
 801acc4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801acc8:	f7ff f998 	bl	8019ffc <memset>
 801accc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801acd0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801acd4:	4620      	mov	r0, r4
 801acd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801acd8:	3468      	adds	r4, #104	; 0x68
 801acda:	e7d9      	b.n	801ac90 <__sfp+0x1c>
 801acdc:	2104      	movs	r1, #4
 801acde:	4638      	mov	r0, r7
 801ace0:	f7ff ff62 	bl	801aba8 <__sfmoreglue>
 801ace4:	4604      	mov	r4, r0
 801ace6:	6030      	str	r0, [r6, #0]
 801ace8:	2800      	cmp	r0, #0
 801acea:	d1d5      	bne.n	801ac98 <__sfp+0x24>
 801acec:	f7ff ff78 	bl	801abe0 <__sfp_lock_release>
 801acf0:	230c      	movs	r3, #12
 801acf2:	603b      	str	r3, [r7, #0]
 801acf4:	e7ee      	b.n	801acd4 <__sfp+0x60>
 801acf6:	bf00      	nop
 801acf8:	08035a08 	.word	0x08035a08
 801acfc:	ffff0001 	.word	0xffff0001

0801ad00 <_fwalk_reent>:
 801ad00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ad04:	4606      	mov	r6, r0
 801ad06:	4688      	mov	r8, r1
 801ad08:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801ad0c:	2700      	movs	r7, #0
 801ad0e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801ad12:	f1b9 0901 	subs.w	r9, r9, #1
 801ad16:	d505      	bpl.n	801ad24 <_fwalk_reent+0x24>
 801ad18:	6824      	ldr	r4, [r4, #0]
 801ad1a:	2c00      	cmp	r4, #0
 801ad1c:	d1f7      	bne.n	801ad0e <_fwalk_reent+0xe>
 801ad1e:	4638      	mov	r0, r7
 801ad20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ad24:	89ab      	ldrh	r3, [r5, #12]
 801ad26:	2b01      	cmp	r3, #1
 801ad28:	d907      	bls.n	801ad3a <_fwalk_reent+0x3a>
 801ad2a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801ad2e:	3301      	adds	r3, #1
 801ad30:	d003      	beq.n	801ad3a <_fwalk_reent+0x3a>
 801ad32:	4629      	mov	r1, r5
 801ad34:	4630      	mov	r0, r6
 801ad36:	47c0      	blx	r8
 801ad38:	4307      	orrs	r7, r0
 801ad3a:	3568      	adds	r5, #104	; 0x68
 801ad3c:	e7e9      	b.n	801ad12 <_fwalk_reent+0x12>

0801ad3e <__retarget_lock_init_recursive>:
 801ad3e:	4770      	bx	lr

0801ad40 <__retarget_lock_acquire_recursive>:
 801ad40:	4770      	bx	lr

0801ad42 <__retarget_lock_release_recursive>:
 801ad42:	4770      	bx	lr

0801ad44 <__swhatbuf_r>:
 801ad44:	b570      	push	{r4, r5, r6, lr}
 801ad46:	460e      	mov	r6, r1
 801ad48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ad4c:	2900      	cmp	r1, #0
 801ad4e:	b096      	sub	sp, #88	; 0x58
 801ad50:	4614      	mov	r4, r2
 801ad52:	461d      	mov	r5, r3
 801ad54:	da08      	bge.n	801ad68 <__swhatbuf_r+0x24>
 801ad56:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801ad5a:	2200      	movs	r2, #0
 801ad5c:	602a      	str	r2, [r5, #0]
 801ad5e:	061a      	lsls	r2, r3, #24
 801ad60:	d410      	bmi.n	801ad84 <__swhatbuf_r+0x40>
 801ad62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801ad66:	e00e      	b.n	801ad86 <__swhatbuf_r+0x42>
 801ad68:	466a      	mov	r2, sp
 801ad6a:	f000 f8c3 	bl	801aef4 <_fstat_r>
 801ad6e:	2800      	cmp	r0, #0
 801ad70:	dbf1      	blt.n	801ad56 <__swhatbuf_r+0x12>
 801ad72:	9a01      	ldr	r2, [sp, #4]
 801ad74:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801ad78:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801ad7c:	425a      	negs	r2, r3
 801ad7e:	415a      	adcs	r2, r3
 801ad80:	602a      	str	r2, [r5, #0]
 801ad82:	e7ee      	b.n	801ad62 <__swhatbuf_r+0x1e>
 801ad84:	2340      	movs	r3, #64	; 0x40
 801ad86:	2000      	movs	r0, #0
 801ad88:	6023      	str	r3, [r4, #0]
 801ad8a:	b016      	add	sp, #88	; 0x58
 801ad8c:	bd70      	pop	{r4, r5, r6, pc}
	...

0801ad90 <__smakebuf_r>:
 801ad90:	898b      	ldrh	r3, [r1, #12]
 801ad92:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801ad94:	079d      	lsls	r5, r3, #30
 801ad96:	4606      	mov	r6, r0
 801ad98:	460c      	mov	r4, r1
 801ad9a:	d507      	bpl.n	801adac <__smakebuf_r+0x1c>
 801ad9c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801ada0:	6023      	str	r3, [r4, #0]
 801ada2:	6123      	str	r3, [r4, #16]
 801ada4:	2301      	movs	r3, #1
 801ada6:	6163      	str	r3, [r4, #20]
 801ada8:	b002      	add	sp, #8
 801adaa:	bd70      	pop	{r4, r5, r6, pc}
 801adac:	ab01      	add	r3, sp, #4
 801adae:	466a      	mov	r2, sp
 801adb0:	f7ff ffc8 	bl	801ad44 <__swhatbuf_r>
 801adb4:	9900      	ldr	r1, [sp, #0]
 801adb6:	4605      	mov	r5, r0
 801adb8:	4630      	mov	r0, r6
 801adba:	f7ff f993 	bl	801a0e4 <_malloc_r>
 801adbe:	b948      	cbnz	r0, 801add4 <__smakebuf_r+0x44>
 801adc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801adc4:	059a      	lsls	r2, r3, #22
 801adc6:	d4ef      	bmi.n	801ada8 <__smakebuf_r+0x18>
 801adc8:	f023 0303 	bic.w	r3, r3, #3
 801adcc:	f043 0302 	orr.w	r3, r3, #2
 801add0:	81a3      	strh	r3, [r4, #12]
 801add2:	e7e3      	b.n	801ad9c <__smakebuf_r+0xc>
 801add4:	4b0d      	ldr	r3, [pc, #52]	; (801ae0c <__smakebuf_r+0x7c>)
 801add6:	62b3      	str	r3, [r6, #40]	; 0x28
 801add8:	89a3      	ldrh	r3, [r4, #12]
 801adda:	6020      	str	r0, [r4, #0]
 801addc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ade0:	81a3      	strh	r3, [r4, #12]
 801ade2:	9b00      	ldr	r3, [sp, #0]
 801ade4:	6163      	str	r3, [r4, #20]
 801ade6:	9b01      	ldr	r3, [sp, #4]
 801ade8:	6120      	str	r0, [r4, #16]
 801adea:	b15b      	cbz	r3, 801ae04 <__smakebuf_r+0x74>
 801adec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801adf0:	4630      	mov	r0, r6
 801adf2:	f000 f891 	bl	801af18 <_isatty_r>
 801adf6:	b128      	cbz	r0, 801ae04 <__smakebuf_r+0x74>
 801adf8:	89a3      	ldrh	r3, [r4, #12]
 801adfa:	f023 0303 	bic.w	r3, r3, #3
 801adfe:	f043 0301 	orr.w	r3, r3, #1
 801ae02:	81a3      	strh	r3, [r4, #12]
 801ae04:	89a0      	ldrh	r0, [r4, #12]
 801ae06:	4305      	orrs	r5, r0
 801ae08:	81a5      	strh	r5, [r4, #12]
 801ae0a:	e7cd      	b.n	801ada8 <__smakebuf_r+0x18>
 801ae0c:	0801ab9d 	.word	0x0801ab9d

0801ae10 <__malloc_lock>:
 801ae10:	4801      	ldr	r0, [pc, #4]	; (801ae18 <__malloc_lock+0x8>)
 801ae12:	f7ff bf95 	b.w	801ad40 <__retarget_lock_acquire_recursive>
 801ae16:	bf00      	nop
 801ae18:	24003660 	.word	0x24003660

0801ae1c <__malloc_unlock>:
 801ae1c:	4801      	ldr	r0, [pc, #4]	; (801ae24 <__malloc_unlock+0x8>)
 801ae1e:	f7ff bf90 	b.w	801ad42 <__retarget_lock_release_recursive>
 801ae22:	bf00      	nop
 801ae24:	24003660 	.word	0x24003660

0801ae28 <__sread>:
 801ae28:	b510      	push	{r4, lr}
 801ae2a:	460c      	mov	r4, r1
 801ae2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ae30:	f000 f894 	bl	801af5c <_read_r>
 801ae34:	2800      	cmp	r0, #0
 801ae36:	bfab      	itete	ge
 801ae38:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801ae3a:	89a3      	ldrhlt	r3, [r4, #12]
 801ae3c:	181b      	addge	r3, r3, r0
 801ae3e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801ae42:	bfac      	ite	ge
 801ae44:	6563      	strge	r3, [r4, #84]	; 0x54
 801ae46:	81a3      	strhlt	r3, [r4, #12]
 801ae48:	bd10      	pop	{r4, pc}

0801ae4a <__swrite>:
 801ae4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ae4e:	461f      	mov	r7, r3
 801ae50:	898b      	ldrh	r3, [r1, #12]
 801ae52:	05db      	lsls	r3, r3, #23
 801ae54:	4605      	mov	r5, r0
 801ae56:	460c      	mov	r4, r1
 801ae58:	4616      	mov	r6, r2
 801ae5a:	d505      	bpl.n	801ae68 <__swrite+0x1e>
 801ae5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ae60:	2302      	movs	r3, #2
 801ae62:	2200      	movs	r2, #0
 801ae64:	f000 f868 	bl	801af38 <_lseek_r>
 801ae68:	89a3      	ldrh	r3, [r4, #12]
 801ae6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ae6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801ae72:	81a3      	strh	r3, [r4, #12]
 801ae74:	4632      	mov	r2, r6
 801ae76:	463b      	mov	r3, r7
 801ae78:	4628      	mov	r0, r5
 801ae7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ae7e:	f000 b817 	b.w	801aeb0 <_write_r>

0801ae82 <__sseek>:
 801ae82:	b510      	push	{r4, lr}
 801ae84:	460c      	mov	r4, r1
 801ae86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ae8a:	f000 f855 	bl	801af38 <_lseek_r>
 801ae8e:	1c43      	adds	r3, r0, #1
 801ae90:	89a3      	ldrh	r3, [r4, #12]
 801ae92:	bf15      	itete	ne
 801ae94:	6560      	strne	r0, [r4, #84]	; 0x54
 801ae96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801ae9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801ae9e:	81a3      	strheq	r3, [r4, #12]
 801aea0:	bf18      	it	ne
 801aea2:	81a3      	strhne	r3, [r4, #12]
 801aea4:	bd10      	pop	{r4, pc}

0801aea6 <__sclose>:
 801aea6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801aeaa:	f000 b813 	b.w	801aed4 <_close_r>
	...

0801aeb0 <_write_r>:
 801aeb0:	b538      	push	{r3, r4, r5, lr}
 801aeb2:	4d07      	ldr	r5, [pc, #28]	; (801aed0 <_write_r+0x20>)
 801aeb4:	4604      	mov	r4, r0
 801aeb6:	4608      	mov	r0, r1
 801aeb8:	4611      	mov	r1, r2
 801aeba:	2200      	movs	r2, #0
 801aebc:	602a      	str	r2, [r5, #0]
 801aebe:	461a      	mov	r2, r3
 801aec0:	f7ee f975 	bl	80091ae <_write>
 801aec4:	1c43      	adds	r3, r0, #1
 801aec6:	d102      	bne.n	801aece <_write_r+0x1e>
 801aec8:	682b      	ldr	r3, [r5, #0]
 801aeca:	b103      	cbz	r3, 801aece <_write_r+0x1e>
 801aecc:	6023      	str	r3, [r4, #0]
 801aece:	bd38      	pop	{r3, r4, r5, pc}
 801aed0:	24003664 	.word	0x24003664

0801aed4 <_close_r>:
 801aed4:	b538      	push	{r3, r4, r5, lr}
 801aed6:	4d06      	ldr	r5, [pc, #24]	; (801aef0 <_close_r+0x1c>)
 801aed8:	2300      	movs	r3, #0
 801aeda:	4604      	mov	r4, r0
 801aedc:	4608      	mov	r0, r1
 801aede:	602b      	str	r3, [r5, #0]
 801aee0:	f7ee f981 	bl	80091e6 <_close>
 801aee4:	1c43      	adds	r3, r0, #1
 801aee6:	d102      	bne.n	801aeee <_close_r+0x1a>
 801aee8:	682b      	ldr	r3, [r5, #0]
 801aeea:	b103      	cbz	r3, 801aeee <_close_r+0x1a>
 801aeec:	6023      	str	r3, [r4, #0]
 801aeee:	bd38      	pop	{r3, r4, r5, pc}
 801aef0:	24003664 	.word	0x24003664

0801aef4 <_fstat_r>:
 801aef4:	b538      	push	{r3, r4, r5, lr}
 801aef6:	4d07      	ldr	r5, [pc, #28]	; (801af14 <_fstat_r+0x20>)
 801aef8:	2300      	movs	r3, #0
 801aefa:	4604      	mov	r4, r0
 801aefc:	4608      	mov	r0, r1
 801aefe:	4611      	mov	r1, r2
 801af00:	602b      	str	r3, [r5, #0]
 801af02:	f7ee f97c 	bl	80091fe <_fstat>
 801af06:	1c43      	adds	r3, r0, #1
 801af08:	d102      	bne.n	801af10 <_fstat_r+0x1c>
 801af0a:	682b      	ldr	r3, [r5, #0]
 801af0c:	b103      	cbz	r3, 801af10 <_fstat_r+0x1c>
 801af0e:	6023      	str	r3, [r4, #0]
 801af10:	bd38      	pop	{r3, r4, r5, pc}
 801af12:	bf00      	nop
 801af14:	24003664 	.word	0x24003664

0801af18 <_isatty_r>:
 801af18:	b538      	push	{r3, r4, r5, lr}
 801af1a:	4d06      	ldr	r5, [pc, #24]	; (801af34 <_isatty_r+0x1c>)
 801af1c:	2300      	movs	r3, #0
 801af1e:	4604      	mov	r4, r0
 801af20:	4608      	mov	r0, r1
 801af22:	602b      	str	r3, [r5, #0]
 801af24:	f7ee f97b 	bl	800921e <_isatty>
 801af28:	1c43      	adds	r3, r0, #1
 801af2a:	d102      	bne.n	801af32 <_isatty_r+0x1a>
 801af2c:	682b      	ldr	r3, [r5, #0]
 801af2e:	b103      	cbz	r3, 801af32 <_isatty_r+0x1a>
 801af30:	6023      	str	r3, [r4, #0]
 801af32:	bd38      	pop	{r3, r4, r5, pc}
 801af34:	24003664 	.word	0x24003664

0801af38 <_lseek_r>:
 801af38:	b538      	push	{r3, r4, r5, lr}
 801af3a:	4d07      	ldr	r5, [pc, #28]	; (801af58 <_lseek_r+0x20>)
 801af3c:	4604      	mov	r4, r0
 801af3e:	4608      	mov	r0, r1
 801af40:	4611      	mov	r1, r2
 801af42:	2200      	movs	r2, #0
 801af44:	602a      	str	r2, [r5, #0]
 801af46:	461a      	mov	r2, r3
 801af48:	f7ee f974 	bl	8009234 <_lseek>
 801af4c:	1c43      	adds	r3, r0, #1
 801af4e:	d102      	bne.n	801af56 <_lseek_r+0x1e>
 801af50:	682b      	ldr	r3, [r5, #0]
 801af52:	b103      	cbz	r3, 801af56 <_lseek_r+0x1e>
 801af54:	6023      	str	r3, [r4, #0]
 801af56:	bd38      	pop	{r3, r4, r5, pc}
 801af58:	24003664 	.word	0x24003664

0801af5c <_read_r>:
 801af5c:	b538      	push	{r3, r4, r5, lr}
 801af5e:	4d07      	ldr	r5, [pc, #28]	; (801af7c <_read_r+0x20>)
 801af60:	4604      	mov	r4, r0
 801af62:	4608      	mov	r0, r1
 801af64:	4611      	mov	r1, r2
 801af66:	2200      	movs	r2, #0
 801af68:	602a      	str	r2, [r5, #0]
 801af6a:	461a      	mov	r2, r3
 801af6c:	f7ee f902 	bl	8009174 <_read>
 801af70:	1c43      	adds	r3, r0, #1
 801af72:	d102      	bne.n	801af7a <_read_r+0x1e>
 801af74:	682b      	ldr	r3, [r5, #0]
 801af76:	b103      	cbz	r3, 801af7a <_read_r+0x1e>
 801af78:	6023      	str	r3, [r4, #0]
 801af7a:	bd38      	pop	{r3, r4, r5, pc}
 801af7c:	24003664 	.word	0x24003664

0801af80 <_init>:
 801af80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801af82:	bf00      	nop
 801af84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801af86:	bc08      	pop	{r3}
 801af88:	469e      	mov	lr, r3
 801af8a:	4770      	bx	lr

0801af8c <_fini>:
 801af8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801af8e:	bf00      	nop
 801af90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801af92:	bc08      	pop	{r3}
 801af94:	469e      	mov	lr, r3
 801af96:	4770      	bx	lr
