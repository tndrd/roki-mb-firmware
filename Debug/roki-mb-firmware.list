
roki-mb-firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08020000  08020000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001dcdc  080202a0  080202a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001af90  0803df7c  0803df7c  0002df7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08058f0c  08058f0c  00048f0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08058f14  08058f14  00048f14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  08058f1c  08058f1c  00048f1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000164  24000000  08058f24  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00003600  24000168  08059088  00050168  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24003768  08059088  00053768  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00050164  2**0
                  CONTENTS, READONLY
 10 .debug_info   000523bc  00000000  00000000  00050192  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00007625  00000000  00000000  000a254e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000036a0  00000000  00000000  000a9b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00003420  00000000  00000000  000ad218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000454ee  00000000  00000000  000b0638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003adfa  00000000  00000000  000f5b26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001903e9  00000000  00000000  00130920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  002c0d09  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000f96c  00000000  00000000  002c0d5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080202a0 <__do_global_dtors_aux>:
 80202a0:	b510      	push	{r4, lr}
 80202a2:	4c05      	ldr	r4, [pc, #20]	; (80202b8 <__do_global_dtors_aux+0x18>)
 80202a4:	7823      	ldrb	r3, [r4, #0]
 80202a6:	b933      	cbnz	r3, 80202b6 <__do_global_dtors_aux+0x16>
 80202a8:	4b04      	ldr	r3, [pc, #16]	; (80202bc <__do_global_dtors_aux+0x1c>)
 80202aa:	b113      	cbz	r3, 80202b2 <__do_global_dtors_aux+0x12>
 80202ac:	4804      	ldr	r0, [pc, #16]	; (80202c0 <__do_global_dtors_aux+0x20>)
 80202ae:	f3af 8000 	nop.w
 80202b2:	2301      	movs	r3, #1
 80202b4:	7023      	strb	r3, [r4, #0]
 80202b6:	bd10      	pop	{r4, pc}
 80202b8:	24000168 	.word	0x24000168
 80202bc:	00000000 	.word	0x00000000
 80202c0:	0803df64 	.word	0x0803df64

080202c4 <frame_dummy>:
 80202c4:	b508      	push	{r3, lr}
 80202c6:	4b03      	ldr	r3, [pc, #12]	; (80202d4 <frame_dummy+0x10>)
 80202c8:	b11b      	cbz	r3, 80202d2 <frame_dummy+0xe>
 80202ca:	4903      	ldr	r1, [pc, #12]	; (80202d8 <frame_dummy+0x14>)
 80202cc:	4803      	ldr	r0, [pc, #12]	; (80202dc <frame_dummy+0x18>)
 80202ce:	f3af 8000 	nop.w
 80202d2:	bd08      	pop	{r3, pc}
 80202d4:	00000000 	.word	0x00000000
 80202d8:	2400016c 	.word	0x2400016c
 80202dc:	0803df64 	.word	0x0803df64

080202e0 <memchr>:
 80202e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80202e4:	2a10      	cmp	r2, #16
 80202e6:	db2b      	blt.n	8020340 <memchr+0x60>
 80202e8:	f010 0f07 	tst.w	r0, #7
 80202ec:	d008      	beq.n	8020300 <memchr+0x20>
 80202ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80202f2:	3a01      	subs	r2, #1
 80202f4:	428b      	cmp	r3, r1
 80202f6:	d02d      	beq.n	8020354 <memchr+0x74>
 80202f8:	f010 0f07 	tst.w	r0, #7
 80202fc:	b342      	cbz	r2, 8020350 <memchr+0x70>
 80202fe:	d1f6      	bne.n	80202ee <memchr+0xe>
 8020300:	b4f0      	push	{r4, r5, r6, r7}
 8020302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8020306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 802030a:	f022 0407 	bic.w	r4, r2, #7
 802030e:	f07f 0700 	mvns.w	r7, #0
 8020312:	2300      	movs	r3, #0
 8020314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8020318:	3c08      	subs	r4, #8
 802031a:	ea85 0501 	eor.w	r5, r5, r1
 802031e:	ea86 0601 	eor.w	r6, r6, r1
 8020322:	fa85 f547 	uadd8	r5, r5, r7
 8020326:	faa3 f587 	sel	r5, r3, r7
 802032a:	fa86 f647 	uadd8	r6, r6, r7
 802032e:	faa5 f687 	sel	r6, r5, r7
 8020332:	b98e      	cbnz	r6, 8020358 <memchr+0x78>
 8020334:	d1ee      	bne.n	8020314 <memchr+0x34>
 8020336:	bcf0      	pop	{r4, r5, r6, r7}
 8020338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 802033c:	f002 0207 	and.w	r2, r2, #7
 8020340:	b132      	cbz	r2, 8020350 <memchr+0x70>
 8020342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020346:	3a01      	subs	r2, #1
 8020348:	ea83 0301 	eor.w	r3, r3, r1
 802034c:	b113      	cbz	r3, 8020354 <memchr+0x74>
 802034e:	d1f8      	bne.n	8020342 <memchr+0x62>
 8020350:	2000      	movs	r0, #0
 8020352:	4770      	bx	lr
 8020354:	3801      	subs	r0, #1
 8020356:	4770      	bx	lr
 8020358:	2d00      	cmp	r5, #0
 802035a:	bf06      	itte	eq
 802035c:	4635      	moveq	r5, r6
 802035e:	3803      	subeq	r0, #3
 8020360:	3807      	subne	r0, #7
 8020362:	f015 0f01 	tst.w	r5, #1
 8020366:	d107      	bne.n	8020378 <memchr+0x98>
 8020368:	3001      	adds	r0, #1
 802036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 802036e:	bf02      	ittt	eq
 8020370:	3001      	addeq	r0, #1
 8020372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8020376:	3001      	addeq	r0, #1
 8020378:	bcf0      	pop	{r4, r5, r6, r7}
 802037a:	3801      	subs	r0, #1
 802037c:	4770      	bx	lr
 802037e:	bf00      	nop

08020380 <__aeabi_uldivmod>:
 8020380:	b953      	cbnz	r3, 8020398 <__aeabi_uldivmod+0x18>
 8020382:	b94a      	cbnz	r2, 8020398 <__aeabi_uldivmod+0x18>
 8020384:	2900      	cmp	r1, #0
 8020386:	bf08      	it	eq
 8020388:	2800      	cmpeq	r0, #0
 802038a:	bf1c      	itt	ne
 802038c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8020390:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8020394:	f000 b974 	b.w	8020680 <__aeabi_idiv0>
 8020398:	f1ad 0c08 	sub.w	ip, sp, #8
 802039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80203a0:	f000 f806 	bl	80203b0 <__udivmoddi4>
 80203a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80203a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80203ac:	b004      	add	sp, #16
 80203ae:	4770      	bx	lr

080203b0 <__udivmoddi4>:
 80203b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80203b4:	9d08      	ldr	r5, [sp, #32]
 80203b6:	4604      	mov	r4, r0
 80203b8:	468e      	mov	lr, r1
 80203ba:	2b00      	cmp	r3, #0
 80203bc:	d14d      	bne.n	802045a <__udivmoddi4+0xaa>
 80203be:	428a      	cmp	r2, r1
 80203c0:	4694      	mov	ip, r2
 80203c2:	d969      	bls.n	8020498 <__udivmoddi4+0xe8>
 80203c4:	fab2 f282 	clz	r2, r2
 80203c8:	b152      	cbz	r2, 80203e0 <__udivmoddi4+0x30>
 80203ca:	fa01 f302 	lsl.w	r3, r1, r2
 80203ce:	f1c2 0120 	rsb	r1, r2, #32
 80203d2:	fa20 f101 	lsr.w	r1, r0, r1
 80203d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80203da:	ea41 0e03 	orr.w	lr, r1, r3
 80203de:	4094      	lsls	r4, r2
 80203e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80203e4:	0c21      	lsrs	r1, r4, #16
 80203e6:	fbbe f6f8 	udiv	r6, lr, r8
 80203ea:	fa1f f78c 	uxth.w	r7, ip
 80203ee:	fb08 e316 	mls	r3, r8, r6, lr
 80203f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80203f6:	fb06 f107 	mul.w	r1, r6, r7
 80203fa:	4299      	cmp	r1, r3
 80203fc:	d90a      	bls.n	8020414 <__udivmoddi4+0x64>
 80203fe:	eb1c 0303 	adds.w	r3, ip, r3
 8020402:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8020406:	f080 811f 	bcs.w	8020648 <__udivmoddi4+0x298>
 802040a:	4299      	cmp	r1, r3
 802040c:	f240 811c 	bls.w	8020648 <__udivmoddi4+0x298>
 8020410:	3e02      	subs	r6, #2
 8020412:	4463      	add	r3, ip
 8020414:	1a5b      	subs	r3, r3, r1
 8020416:	b2a4      	uxth	r4, r4
 8020418:	fbb3 f0f8 	udiv	r0, r3, r8
 802041c:	fb08 3310 	mls	r3, r8, r0, r3
 8020420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8020424:	fb00 f707 	mul.w	r7, r0, r7
 8020428:	42a7      	cmp	r7, r4
 802042a:	d90a      	bls.n	8020442 <__udivmoddi4+0x92>
 802042c:	eb1c 0404 	adds.w	r4, ip, r4
 8020430:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8020434:	f080 810a 	bcs.w	802064c <__udivmoddi4+0x29c>
 8020438:	42a7      	cmp	r7, r4
 802043a:	f240 8107 	bls.w	802064c <__udivmoddi4+0x29c>
 802043e:	4464      	add	r4, ip
 8020440:	3802      	subs	r0, #2
 8020442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8020446:	1be4      	subs	r4, r4, r7
 8020448:	2600      	movs	r6, #0
 802044a:	b11d      	cbz	r5, 8020454 <__udivmoddi4+0xa4>
 802044c:	40d4      	lsrs	r4, r2
 802044e:	2300      	movs	r3, #0
 8020450:	e9c5 4300 	strd	r4, r3, [r5]
 8020454:	4631      	mov	r1, r6
 8020456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802045a:	428b      	cmp	r3, r1
 802045c:	d909      	bls.n	8020472 <__udivmoddi4+0xc2>
 802045e:	2d00      	cmp	r5, #0
 8020460:	f000 80ef 	beq.w	8020642 <__udivmoddi4+0x292>
 8020464:	2600      	movs	r6, #0
 8020466:	e9c5 0100 	strd	r0, r1, [r5]
 802046a:	4630      	mov	r0, r6
 802046c:	4631      	mov	r1, r6
 802046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020472:	fab3 f683 	clz	r6, r3
 8020476:	2e00      	cmp	r6, #0
 8020478:	d14a      	bne.n	8020510 <__udivmoddi4+0x160>
 802047a:	428b      	cmp	r3, r1
 802047c:	d302      	bcc.n	8020484 <__udivmoddi4+0xd4>
 802047e:	4282      	cmp	r2, r0
 8020480:	f200 80f9 	bhi.w	8020676 <__udivmoddi4+0x2c6>
 8020484:	1a84      	subs	r4, r0, r2
 8020486:	eb61 0303 	sbc.w	r3, r1, r3
 802048a:	2001      	movs	r0, #1
 802048c:	469e      	mov	lr, r3
 802048e:	2d00      	cmp	r5, #0
 8020490:	d0e0      	beq.n	8020454 <__udivmoddi4+0xa4>
 8020492:	e9c5 4e00 	strd	r4, lr, [r5]
 8020496:	e7dd      	b.n	8020454 <__udivmoddi4+0xa4>
 8020498:	b902      	cbnz	r2, 802049c <__udivmoddi4+0xec>
 802049a:	deff      	udf	#255	; 0xff
 802049c:	fab2 f282 	clz	r2, r2
 80204a0:	2a00      	cmp	r2, #0
 80204a2:	f040 8092 	bne.w	80205ca <__udivmoddi4+0x21a>
 80204a6:	eba1 010c 	sub.w	r1, r1, ip
 80204aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80204ae:	fa1f fe8c 	uxth.w	lr, ip
 80204b2:	2601      	movs	r6, #1
 80204b4:	0c20      	lsrs	r0, r4, #16
 80204b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80204ba:	fb07 1113 	mls	r1, r7, r3, r1
 80204be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80204c2:	fb0e f003 	mul.w	r0, lr, r3
 80204c6:	4288      	cmp	r0, r1
 80204c8:	d908      	bls.n	80204dc <__udivmoddi4+0x12c>
 80204ca:	eb1c 0101 	adds.w	r1, ip, r1
 80204ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80204d2:	d202      	bcs.n	80204da <__udivmoddi4+0x12a>
 80204d4:	4288      	cmp	r0, r1
 80204d6:	f200 80cb 	bhi.w	8020670 <__udivmoddi4+0x2c0>
 80204da:	4643      	mov	r3, r8
 80204dc:	1a09      	subs	r1, r1, r0
 80204de:	b2a4      	uxth	r4, r4
 80204e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80204e4:	fb07 1110 	mls	r1, r7, r0, r1
 80204e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80204ec:	fb0e fe00 	mul.w	lr, lr, r0
 80204f0:	45a6      	cmp	lr, r4
 80204f2:	d908      	bls.n	8020506 <__udivmoddi4+0x156>
 80204f4:	eb1c 0404 	adds.w	r4, ip, r4
 80204f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80204fc:	d202      	bcs.n	8020504 <__udivmoddi4+0x154>
 80204fe:	45a6      	cmp	lr, r4
 8020500:	f200 80bb 	bhi.w	802067a <__udivmoddi4+0x2ca>
 8020504:	4608      	mov	r0, r1
 8020506:	eba4 040e 	sub.w	r4, r4, lr
 802050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 802050e:	e79c      	b.n	802044a <__udivmoddi4+0x9a>
 8020510:	f1c6 0720 	rsb	r7, r6, #32
 8020514:	40b3      	lsls	r3, r6
 8020516:	fa22 fc07 	lsr.w	ip, r2, r7
 802051a:	ea4c 0c03 	orr.w	ip, ip, r3
 802051e:	fa20 f407 	lsr.w	r4, r0, r7
 8020522:	fa01 f306 	lsl.w	r3, r1, r6
 8020526:	431c      	orrs	r4, r3
 8020528:	40f9      	lsrs	r1, r7
 802052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 802052e:	fa00 f306 	lsl.w	r3, r0, r6
 8020532:	fbb1 f8f9 	udiv	r8, r1, r9
 8020536:	0c20      	lsrs	r0, r4, #16
 8020538:	fa1f fe8c 	uxth.w	lr, ip
 802053c:	fb09 1118 	mls	r1, r9, r8, r1
 8020540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8020544:	fb08 f00e 	mul.w	r0, r8, lr
 8020548:	4288      	cmp	r0, r1
 802054a:	fa02 f206 	lsl.w	r2, r2, r6
 802054e:	d90b      	bls.n	8020568 <__udivmoddi4+0x1b8>
 8020550:	eb1c 0101 	adds.w	r1, ip, r1
 8020554:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8020558:	f080 8088 	bcs.w	802066c <__udivmoddi4+0x2bc>
 802055c:	4288      	cmp	r0, r1
 802055e:	f240 8085 	bls.w	802066c <__udivmoddi4+0x2bc>
 8020562:	f1a8 0802 	sub.w	r8, r8, #2
 8020566:	4461      	add	r1, ip
 8020568:	1a09      	subs	r1, r1, r0
 802056a:	b2a4      	uxth	r4, r4
 802056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8020570:	fb09 1110 	mls	r1, r9, r0, r1
 8020574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8020578:	fb00 fe0e 	mul.w	lr, r0, lr
 802057c:	458e      	cmp	lr, r1
 802057e:	d908      	bls.n	8020592 <__udivmoddi4+0x1e2>
 8020580:	eb1c 0101 	adds.w	r1, ip, r1
 8020584:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8020588:	d26c      	bcs.n	8020664 <__udivmoddi4+0x2b4>
 802058a:	458e      	cmp	lr, r1
 802058c:	d96a      	bls.n	8020664 <__udivmoddi4+0x2b4>
 802058e:	3802      	subs	r0, #2
 8020590:	4461      	add	r1, ip
 8020592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8020596:	fba0 9402 	umull	r9, r4, r0, r2
 802059a:	eba1 010e 	sub.w	r1, r1, lr
 802059e:	42a1      	cmp	r1, r4
 80205a0:	46c8      	mov	r8, r9
 80205a2:	46a6      	mov	lr, r4
 80205a4:	d356      	bcc.n	8020654 <__udivmoddi4+0x2a4>
 80205a6:	d053      	beq.n	8020650 <__udivmoddi4+0x2a0>
 80205a8:	b15d      	cbz	r5, 80205c2 <__udivmoddi4+0x212>
 80205aa:	ebb3 0208 	subs.w	r2, r3, r8
 80205ae:	eb61 010e 	sbc.w	r1, r1, lr
 80205b2:	fa01 f707 	lsl.w	r7, r1, r7
 80205b6:	fa22 f306 	lsr.w	r3, r2, r6
 80205ba:	40f1      	lsrs	r1, r6
 80205bc:	431f      	orrs	r7, r3
 80205be:	e9c5 7100 	strd	r7, r1, [r5]
 80205c2:	2600      	movs	r6, #0
 80205c4:	4631      	mov	r1, r6
 80205c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80205ca:	f1c2 0320 	rsb	r3, r2, #32
 80205ce:	40d8      	lsrs	r0, r3
 80205d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80205d4:	fa21 f303 	lsr.w	r3, r1, r3
 80205d8:	4091      	lsls	r1, r2
 80205da:	4301      	orrs	r1, r0
 80205dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80205e0:	fa1f fe8c 	uxth.w	lr, ip
 80205e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80205e8:	fb07 3610 	mls	r6, r7, r0, r3
 80205ec:	0c0b      	lsrs	r3, r1, #16
 80205ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80205f2:	fb00 f60e 	mul.w	r6, r0, lr
 80205f6:	429e      	cmp	r6, r3
 80205f8:	fa04 f402 	lsl.w	r4, r4, r2
 80205fc:	d908      	bls.n	8020610 <__udivmoddi4+0x260>
 80205fe:	eb1c 0303 	adds.w	r3, ip, r3
 8020602:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8020606:	d22f      	bcs.n	8020668 <__udivmoddi4+0x2b8>
 8020608:	429e      	cmp	r6, r3
 802060a:	d92d      	bls.n	8020668 <__udivmoddi4+0x2b8>
 802060c:	3802      	subs	r0, #2
 802060e:	4463      	add	r3, ip
 8020610:	1b9b      	subs	r3, r3, r6
 8020612:	b289      	uxth	r1, r1
 8020614:	fbb3 f6f7 	udiv	r6, r3, r7
 8020618:	fb07 3316 	mls	r3, r7, r6, r3
 802061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8020620:	fb06 f30e 	mul.w	r3, r6, lr
 8020624:	428b      	cmp	r3, r1
 8020626:	d908      	bls.n	802063a <__udivmoddi4+0x28a>
 8020628:	eb1c 0101 	adds.w	r1, ip, r1
 802062c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8020630:	d216      	bcs.n	8020660 <__udivmoddi4+0x2b0>
 8020632:	428b      	cmp	r3, r1
 8020634:	d914      	bls.n	8020660 <__udivmoddi4+0x2b0>
 8020636:	3e02      	subs	r6, #2
 8020638:	4461      	add	r1, ip
 802063a:	1ac9      	subs	r1, r1, r3
 802063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8020640:	e738      	b.n	80204b4 <__udivmoddi4+0x104>
 8020642:	462e      	mov	r6, r5
 8020644:	4628      	mov	r0, r5
 8020646:	e705      	b.n	8020454 <__udivmoddi4+0xa4>
 8020648:	4606      	mov	r6, r0
 802064a:	e6e3      	b.n	8020414 <__udivmoddi4+0x64>
 802064c:	4618      	mov	r0, r3
 802064e:	e6f8      	b.n	8020442 <__udivmoddi4+0x92>
 8020650:	454b      	cmp	r3, r9
 8020652:	d2a9      	bcs.n	80205a8 <__udivmoddi4+0x1f8>
 8020654:	ebb9 0802 	subs.w	r8, r9, r2
 8020658:	eb64 0e0c 	sbc.w	lr, r4, ip
 802065c:	3801      	subs	r0, #1
 802065e:	e7a3      	b.n	80205a8 <__udivmoddi4+0x1f8>
 8020660:	4646      	mov	r6, r8
 8020662:	e7ea      	b.n	802063a <__udivmoddi4+0x28a>
 8020664:	4620      	mov	r0, r4
 8020666:	e794      	b.n	8020592 <__udivmoddi4+0x1e2>
 8020668:	4640      	mov	r0, r8
 802066a:	e7d1      	b.n	8020610 <__udivmoddi4+0x260>
 802066c:	46d0      	mov	r8, sl
 802066e:	e77b      	b.n	8020568 <__udivmoddi4+0x1b8>
 8020670:	3b02      	subs	r3, #2
 8020672:	4461      	add	r1, ip
 8020674:	e732      	b.n	80204dc <__udivmoddi4+0x12c>
 8020676:	4630      	mov	r0, r6
 8020678:	e709      	b.n	802048e <__udivmoddi4+0xde>
 802067a:	4464      	add	r4, ip
 802067c:	3802      	subs	r0, #2
 802067e:	e742      	b.n	8020506 <__udivmoddi4+0x156>

08020680 <__aeabi_idiv0>:
 8020680:	4770      	bx	lr
 8020682:	bf00      	nop

08020684 <_ZN10BHYWrapperC1EP19__SPI_HandleTypeDef>:
 *      Author: tndrd
 */

#include "BHYWrapper.hpp"

BHYWrapper::BHYWrapper(SPI_HandleTypeDef *spiHandle) :
 8020684:	b580      	push	{r7, lr}
 8020686:	b082      	sub	sp, #8
 8020688:	af00      	add	r7, sp, #0
 802068a:	6078      	str	r0, [r7, #4]
 802068c:	6039      	str	r1, [r7, #0]
		SPIHandle { spiHandle } {
 802068e:	687b      	ldr	r3, [r7, #4]
 8020690:	683a      	ldr	r2, [r7, #0]
 8020692:	f8c3 2938 	str.w	r2, [r3, #2360]	; 0x938
	assert(spiHandle);
 8020696:	683b      	ldr	r3, [r7, #0]
 8020698:	2b00      	cmp	r3, #0
 802069a:	d105      	bne.n	80206a8 <_ZN10BHYWrapperC1EP19__SPI_HandleTypeDef+0x24>
 802069c:	4b05      	ldr	r3, [pc, #20]	; (80206b4 <_ZN10BHYWrapperC1EP19__SPI_HandleTypeDef+0x30>)
 802069e:	4a06      	ldr	r2, [pc, #24]	; (80206b8 <_ZN10BHYWrapperC1EP19__SPI_HandleTypeDef+0x34>)
 80206a0:	210c      	movs	r1, #12
 80206a2:	4806      	ldr	r0, [pc, #24]	; (80206bc <_ZN10BHYWrapperC1EP19__SPI_HandleTypeDef+0x38>)
 80206a4:	f01c fc0a 	bl	803cebc <__assert_func>
}
 80206a8:	687b      	ldr	r3, [r7, #4]
 80206aa:	4618      	mov	r0, r3
 80206ac:	3708      	adds	r7, #8
 80206ae:	46bd      	mov	sp, r7
 80206b0:	bd80      	pop	{r7, pc}
 80206b2:	bf00      	nop
 80206b4:	0803df7c 	.word	0x0803df7c
 80206b8:	0803df88 	.word	0x0803df88
 80206bc:	0803dfb4 	.word	0x0803dfb4

080206c0 <_ZN10BHYWrapper4InitEfm>:

int BHYWrapper::Init(float sampleRate, uint32_t reportLatency) {
 80206c0:	b590      	push	{r4, r7, lr}
 80206c2:	b08b      	sub	sp, #44	; 0x2c
 80206c4:	af04      	add	r7, sp, #16
 80206c6:	60f8      	str	r0, [r7, #12]
 80206c8:	ed87 0a02 	vstr	s0, [r7, #8]
 80206cc:	6079      	str	r1, [r7, #4]
	uint8_t product_id = 0;
 80206ce:	2300      	movs	r3, #0
 80206d0:	75bb      	strb	r3, [r7, #22]
	uint16_t bhy2KernelVersion;

	uint8_t hintr_ctrl = BHY2_ICTL_DISABLE_STATUS_FIFO | BHY2_ICTL_DISABLE_DEBUG;
 80206d2:	230c      	movs	r3, #12
 80206d4:	74fb      	strb	r3, [r7, #19]

	uint8_t hif_ctrl = 0;
 80206d6:	2300      	movs	r3, #0
 80206d8:	75fb      	strb	r3, [r7, #23]
	uint8_t boot_status;
	uint8_t sensor_error;

	spi_init(SPIHandle);
 80206da:	68fb      	ldr	r3, [r7, #12]
 80206dc:	f8d3 3938 	ldr.w	r3, [r3, #2360]	; 0x938
 80206e0:	4618      	mov	r0, r3
 80206e2:	f000 faab 	bl	8020c3c <_Z8spi_initP19__SPI_HandleTypeDef>

	if (bhy2_init(BHY2_SPI_INTERFACE, bhy2_spi_read, bhy2_spi_write,
 80206e6:	68fb      	ldr	r3, [r7, #12]
 80206e8:	9302      	str	r3, [sp, #8]
 80206ea:	2300      	movs	r3, #0
 80206ec:	9301      	str	r3, [sp, #4]
 80206ee:	2340      	movs	r3, #64	; 0x40
 80206f0:	9300      	str	r3, [sp, #0]
 80206f2:	4b99      	ldr	r3, [pc, #612]	; (8020958 <_ZN10BHYWrapper4InitEfm+0x298>)
 80206f4:	4a99      	ldr	r2, [pc, #612]	; (802095c <_ZN10BHYWrapper4InitEfm+0x29c>)
 80206f6:	499a      	ldr	r1, [pc, #616]	; (8020960 <_ZN10BHYWrapper4InitEfm+0x2a0>)
 80206f8:	2001      	movs	r0, #1
 80206fa:	f008 fd6a 	bl	80291d2 <bhy2_init>
 80206fe:	4603      	mov	r3, r0
 8020700:	2b00      	cmp	r3, #0
 8020702:	bf14      	ite	ne
 8020704:	2301      	movne	r3, #1
 8020706:	2300      	moveq	r3, #0
 8020708:	b2db      	uxtb	r3, r3
 802070a:	2b00      	cmp	r3, #0
 802070c:	d001      	beq.n	8020712 <_ZN10BHYWrapper4InitEfm+0x52>
			bhy2_delay_us, 64, NULL, &bhy2))
		return 1;
 802070e:	2301      	movs	r3, #1
 8020710:	e11d      	b.n	802094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_soft_reset(&bhy2))
 8020712:	68fb      	ldr	r3, [r7, #12]
 8020714:	4618      	mov	r0, r3
 8020716:	f008 fd44 	bl	80291a2 <bhy2_soft_reset>
 802071a:	4603      	mov	r3, r0
 802071c:	2b00      	cmp	r3, #0
 802071e:	bf14      	ite	ne
 8020720:	2301      	movne	r3, #1
 8020722:	2300      	moveq	r3, #0
 8020724:	b2db      	uxtb	r3, r3
 8020726:	2b00      	cmp	r3, #0
 8020728:	d001      	beq.n	802072e <_ZN10BHYWrapper4InitEfm+0x6e>
		return 2;
 802072a:	2302      	movs	r3, #2
 802072c:	e10f      	b.n	802094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_product_id(&product_id, &bhy2))
 802072e:	68fa      	ldr	r2, [r7, #12]
 8020730:	f107 0316 	add.w	r3, r7, #22
 8020734:	4611      	mov	r1, r2
 8020736:	4618      	mov	r0, r3
 8020738:	f008 fc1f 	bl	8028f7a <bhy2_get_product_id>
 802073c:	4603      	mov	r3, r0
 802073e:	2b00      	cmp	r3, #0
 8020740:	bf14      	ite	ne
 8020742:	2301      	movne	r3, #1
 8020744:	2300      	moveq	r3, #0
 8020746:	b2db      	uxtb	r3, r3
 8020748:	2b00      	cmp	r3, #0
 802074a:	d001      	beq.n	8020750 <_ZN10BHYWrapper4InitEfm+0x90>
		return 3;
 802074c:	2303      	movs	r3, #3
 802074e:	e0fe      	b.n	802094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (product_id != BHY2_PRODUCT_ID)
 8020750:	7dbb      	ldrb	r3, [r7, #22]
 8020752:	2b89      	cmp	r3, #137	; 0x89
 8020754:	d001      	beq.n	802075a <_ZN10BHYWrapper4InitEfm+0x9a>
		return 4;
 8020756:	2304      	movs	r3, #4
 8020758:	e0f9      	b.n	802094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_set_host_interrupt_ctrl(hintr_ctrl, &bhy2))
 802075a:	7cfb      	ldrb	r3, [r7, #19]
 802075c:	68fa      	ldr	r2, [r7, #12]
 802075e:	4611      	mov	r1, r2
 8020760:	4618      	mov	r0, r3
 8020762:	f008 fcb1 	bl	80290c8 <bhy2_set_host_interrupt_ctrl>
 8020766:	4603      	mov	r3, r0
 8020768:	2b00      	cmp	r3, #0
 802076a:	bf14      	ite	ne
 802076c:	2301      	movne	r3, #1
 802076e:	2300      	moveq	r3, #0
 8020770:	b2db      	uxtb	r3, r3
 8020772:	2b00      	cmp	r3, #0
 8020774:	d001      	beq.n	802077a <_ZN10BHYWrapper4InitEfm+0xba>
		return 5;
 8020776:	2305      	movs	r3, #5
 8020778:	e0e9      	b.n	802094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_host_interrupt_ctrl(&hintr_ctrl, &bhy2))
 802077a:	68fa      	ldr	r2, [r7, #12]
 802077c:	f107 0313 	add.w	r3, r7, #19
 8020780:	4611      	mov	r1, r2
 8020782:	4618      	mov	r0, r3
 8020784:	f008 fcbc 	bl	8029100 <bhy2_get_host_interrupt_ctrl>
 8020788:	4603      	mov	r3, r0
 802078a:	2b00      	cmp	r3, #0
 802078c:	bf14      	ite	ne
 802078e:	2301      	movne	r3, #1
 8020790:	2300      	moveq	r3, #0
 8020792:	b2db      	uxtb	r3, r3
 8020794:	2b00      	cmp	r3, #0
 8020796:	d001      	beq.n	802079c <_ZN10BHYWrapper4InitEfm+0xdc>
		return 6;
 8020798:	2306      	movs	r3, #6
 802079a:	e0d8      	b.n	802094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_set_host_intf_ctrl(hif_ctrl, &bhy2))
 802079c:	68fa      	ldr	r2, [r7, #12]
 802079e:	7dfb      	ldrb	r3, [r7, #23]
 80207a0:	4611      	mov	r1, r2
 80207a2:	4618      	mov	r0, r3
 80207a4:	f008 fce1 	bl	802916a <bhy2_set_host_intf_ctrl>
 80207a8:	4603      	mov	r3, r0
 80207aa:	2b00      	cmp	r3, #0
 80207ac:	bf14      	ite	ne
 80207ae:	2301      	movne	r3, #1
 80207b0:	2300      	moveq	r3, #0
 80207b2:	b2db      	uxtb	r3, r3
 80207b4:	2b00      	cmp	r3, #0
 80207b6:	d001      	beq.n	80207bc <_ZN10BHYWrapper4InitEfm+0xfc>
		return 7;
 80207b8:	2307      	movs	r3, #7
 80207ba:	e0c8      	b.n	802094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_boot_status(&boot_status, &bhy2))
 80207bc:	68fa      	ldr	r2, [r7, #12]
 80207be:	f107 0312 	add.w	r3, r7, #18
 80207c2:	4611      	mov	r1, r2
 80207c4:	4618      	mov	r0, r3
 80207c6:	f008 fc0c 	bl	8028fe2 <bhy2_get_boot_status>
 80207ca:	4603      	mov	r3, r0
 80207cc:	2b00      	cmp	r3, #0
 80207ce:	bf14      	ite	ne
 80207d0:	2301      	movne	r3, #1
 80207d2:	2300      	moveq	r3, #0
 80207d4:	b2db      	uxtb	r3, r3
 80207d6:	2b00      	cmp	r3, #0
 80207d8:	d001      	beq.n	80207de <_ZN10BHYWrapper4InitEfm+0x11e>
		return 8;
 80207da:	2308      	movs	r3, #8
 80207dc:	e0b7      	b.n	802094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (!(boot_status & BHY2_BST_HOST_INTERFACE_READY))
 80207de:	7cbb      	ldrb	r3, [r7, #18]
 80207e0:	f003 0310 	and.w	r3, r3, #16
 80207e4:	2b00      	cmp	r3, #0
 80207e6:	d101      	bne.n	80207ec <_ZN10BHYWrapper4InitEfm+0x12c>
		return 9;
 80207e8:	2309      	movs	r3, #9
 80207ea:	e0b0      	b.n	802094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_upload_firmware_to_ram(bhy2_firmware_image,
 80207ec:	68fb      	ldr	r3, [r7, #12]
 80207ee:	461a      	mov	r2, r3
 80207f0:	495c      	ldr	r1, [pc, #368]	; (8020964 <_ZN10BHYWrapper4InitEfm+0x2a4>)
 80207f2:	485d      	ldr	r0, [pc, #372]	; (8020968 <_ZN10BHYWrapper4InitEfm+0x2a8>)
 80207f4:	f008 fc31 	bl	802905a <bhy2_upload_firmware_to_ram>
 80207f8:	4603      	mov	r3, r0
 80207fa:	2b00      	cmp	r3, #0
 80207fc:	bf14      	ite	ne
 80207fe:	2301      	movne	r3, #1
 8020800:	2300      	moveq	r3, #0
 8020802:	b2db      	uxtb	r3, r3
 8020804:	2b00      	cmp	r3, #0
 8020806:	d001      	beq.n	802080c <_ZN10BHYWrapper4InitEfm+0x14c>
			sizeof(bhy2_firmware_image), &bhy2))
		return 9;
 8020808:	2309      	movs	r3, #9
 802080a:	e0a0      	b.n	802094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_error_value(&sensor_error, &bhy2))
 802080c:	68fa      	ldr	r2, [r7, #12]
 802080e:	f107 0311 	add.w	r3, r7, #17
 8020812:	4611      	mov	r1, r2
 8020814:	4618      	mov	r0, r3
 8020816:	f008 fdc3 	bl	80293a0 <bhy2_get_error_value>
 802081a:	4603      	mov	r3, r0
 802081c:	2b00      	cmp	r3, #0
 802081e:	bf14      	ite	ne
 8020820:	2301      	movne	r3, #1
 8020822:	2300      	moveq	r3, #0
 8020824:	b2db      	uxtb	r3, r3
 8020826:	2b00      	cmp	r3, #0
 8020828:	d001      	beq.n	802082e <_ZN10BHYWrapper4InitEfm+0x16e>
		return 10;
 802082a:	230a      	movs	r3, #10
 802082c:	e08f      	b.n	802094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (sensor_error)
 802082e:	7c7b      	ldrb	r3, [r7, #17]
 8020830:	2b00      	cmp	r3, #0
 8020832:	d001      	beq.n	8020838 <_ZN10BHYWrapper4InitEfm+0x178>
		return 11;
 8020834:	230b      	movs	r3, #11
 8020836:	e08a      	b.n	802094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_boot_from_ram(&bhy2))
 8020838:	68fb      	ldr	r3, [r7, #12]
 802083a:	4618      	mov	r0, r3
 802083c:	f008 fc2c 	bl	8029098 <bhy2_boot_from_ram>
 8020840:	4603      	mov	r3, r0
 8020842:	2b00      	cmp	r3, #0
 8020844:	bf14      	ite	ne
 8020846:	2301      	movne	r3, #1
 8020848:	2300      	moveq	r3, #0
 802084a:	b2db      	uxtb	r3, r3
 802084c:	2b00      	cmp	r3, #0
 802084e:	d001      	beq.n	8020854 <_ZN10BHYWrapper4InitEfm+0x194>
		return 12;
 8020850:	230c      	movs	r3, #12
 8020852:	e07c      	b.n	802094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_error_value(&sensor_error, &bhy2))
 8020854:	68fa      	ldr	r2, [r7, #12]
 8020856:	f107 0311 	add.w	r3, r7, #17
 802085a:	4611      	mov	r1, r2
 802085c:	4618      	mov	r0, r3
 802085e:	f008 fd9f 	bl	80293a0 <bhy2_get_error_value>
 8020862:	4603      	mov	r3, r0
 8020864:	2b00      	cmp	r3, #0
 8020866:	bf14      	ite	ne
 8020868:	2301      	movne	r3, #1
 802086a:	2300      	moveq	r3, #0
 802086c:	b2db      	uxtb	r3, r3
 802086e:	2b00      	cmp	r3, #0
 8020870:	d001      	beq.n	8020876 <_ZN10BHYWrapper4InitEfm+0x1b6>
		return 13;
 8020872:	230d      	movs	r3, #13
 8020874:	e06b      	b.n	802094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (sensor_error)
 8020876:	7c7b      	ldrb	r3, [r7, #17]
 8020878:	2b00      	cmp	r3, #0
 802087a:	d001      	beq.n	8020880 <_ZN10BHYWrapper4InitEfm+0x1c0>
		return 14;
 802087c:	230e      	movs	r3, #14
 802087e:	e066      	b.n	802094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_kernel_version(&bhy2KernelVersion, &bhy2))
 8020880:	68fa      	ldr	r2, [r7, #12]
 8020882:	f107 0314 	add.w	r3, r7, #20
 8020886:	4611      	mov	r1, r2
 8020888:	4618      	mov	r0, r3
 802088a:	f008 fb90 	bl	8028fae <bhy2_get_kernel_version>
 802088e:	4603      	mov	r3, r0
 8020890:	2b00      	cmp	r3, #0
 8020892:	bf14      	ite	ne
 8020894:	2301      	movne	r3, #1
 8020896:	2300      	moveq	r3, #0
 8020898:	b2db      	uxtb	r3, r3
 802089a:	2b00      	cmp	r3, #0
 802089c:	d001      	beq.n	80208a2 <_ZN10BHYWrapper4InitEfm+0x1e2>
		return 15;
 802089e:	230f      	movs	r3, #15
 80208a0:	e055      	b.n	802094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2KernelVersion == 0)
 80208a2:	8abb      	ldrh	r3, [r7, #20]
 80208a4:	2b00      	cmp	r3, #0
 80208a6:	d101      	bne.n	80208ac <_ZN10BHYWrapper4InitEfm+0x1ec>
		return 16;
 80208a8:	2310      	movs	r3, #16
 80208aa:	e050      	b.n	802094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_register_fifo_parse_callback(BHY2_SENSOR_ID_GAMERV,
			BHYWrapper::ParseFrame, &CurrentFrame, &bhy2))
 80208ac:	68fb      	ldr	r3, [r7, #12]
 80208ae:	f241 123c 	movw	r2, #4412	; 0x113c
 80208b2:	441a      	add	r2, r3
	if (bhy2_register_fifo_parse_callback(BHY2_SENSOR_ID_GAMERV,
 80208b4:	68fb      	ldr	r3, [r7, #12]
 80208b6:	492d      	ldr	r1, [pc, #180]	; (802096c <_ZN10BHYWrapper4InitEfm+0x2ac>)
 80208b8:	2025      	movs	r0, #37	; 0x25
 80208ba:	f008 fcb4 	bl	8029226 <bhy2_register_fifo_parse_callback>
 80208be:	4603      	mov	r3, r0
 80208c0:	2b00      	cmp	r3, #0
 80208c2:	bf14      	ite	ne
 80208c4:	2301      	movne	r3, #1
 80208c6:	2300      	moveq	r3, #0
 80208c8:	b2db      	uxtb	r3, r3
 80208ca:	2b00      	cmp	r3, #0
 80208cc:	d001      	beq.n	80208d2 <_ZN10BHYWrapper4InitEfm+0x212>
		return 17;
 80208ce:	2311      	movs	r3, #17
 80208d0:	e03d      	b.n	802094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_and_process_fifo(WorkBuffer.data(), WorkBuffer.size(), &bhy2))
 80208d2:	68fb      	ldr	r3, [r7, #12]
 80208d4:	f603 133c 	addw	r3, r3, #2364	; 0x93c
 80208d8:	4618      	mov	r0, r3
 80208da:	f000 f98b 	bl	8020bf4 <_ZNSt5arrayIhLj2048EE4dataEv>
 80208de:	4604      	mov	r4, r0
 80208e0:	68fb      	ldr	r3, [r7, #12]
 80208e2:	f603 133c 	addw	r3, r3, #2364	; 0x93c
 80208e6:	4618      	mov	r0, r3
 80208e8:	f000 f991 	bl	8020c0e <_ZNKSt5arrayIhLj2048EE4sizeEv>
 80208ec:	4601      	mov	r1, r0
 80208ee:	68fb      	ldr	r3, [r7, #12]
 80208f0:	461a      	mov	r2, r3
 80208f2:	4620      	mov	r0, r4
 80208f4:	f008 f9ef 	bl	8028cd6 <bhy2_get_and_process_fifo>
 80208f8:	4603      	mov	r3, r0
 80208fa:	2b00      	cmp	r3, #0
 80208fc:	bf14      	ite	ne
 80208fe:	2301      	movne	r3, #1
 8020900:	2300      	moveq	r3, #0
 8020902:	b2db      	uxtb	r3, r3
 8020904:	2b00      	cmp	r3, #0
 8020906:	d001      	beq.n	802090c <_ZN10BHYWrapper4InitEfm+0x24c>
		return 18;
 8020908:	2312      	movs	r3, #18
 802090a:	e020      	b.n	802094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_update_virtual_sensor_list(&bhy2))
 802090c:	68fb      	ldr	r3, [r7, #12]
 802090e:	4618      	mov	r0, r3
 8020910:	f008 fcb8 	bl	8029284 <bhy2_update_virtual_sensor_list>
 8020914:	4603      	mov	r3, r0
 8020916:	2b00      	cmp	r3, #0
 8020918:	bf14      	ite	ne
 802091a:	2301      	movne	r3, #1
 802091c:	2300      	moveq	r3, #0
 802091e:	b2db      	uxtb	r3, r3
 8020920:	2b00      	cmp	r3, #0
 8020922:	d001      	beq.n	8020928 <_ZN10BHYWrapper4InitEfm+0x268>
		return 16;
 8020924:	2310      	movs	r3, #16
 8020926:	e012      	b.n	802094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_set_virt_sensor_cfg(BHY2_SENSOR_ID_GAMERV, sampleRate,
 8020928:	68fb      	ldr	r3, [r7, #12]
 802092a:	461a      	mov	r2, r3
 802092c:	6879      	ldr	r1, [r7, #4]
 802092e:	ed97 0a02 	vldr	s0, [r7, #8]
 8020932:	2025      	movs	r0, #37	; 0x25
 8020934:	f008 fb00 	bl	8028f38 <bhy2_set_virt_sensor_cfg>
 8020938:	4603      	mov	r3, r0
 802093a:	2b00      	cmp	r3, #0
 802093c:	bf14      	ite	ne
 802093e:	2301      	movne	r3, #1
 8020940:	2300      	moveq	r3, #0
 8020942:	b2db      	uxtb	r3, r3
 8020944:	2b00      	cmp	r3, #0
 8020946:	d001      	beq.n	802094c <_ZN10BHYWrapper4InitEfm+0x28c>
			reportLatency, &bhy2))
		return 17;
 8020948:	2311      	movs	r3, #17
 802094a:	e000      	b.n	802094e <_ZN10BHYWrapper4InitEfm+0x28e>

	return 0;
 802094c:	2300      	movs	r3, #0
}
 802094e:	4618      	mov	r0, r3
 8020950:	371c      	adds	r7, #28
 8020952:	46bd      	mov	sp, r7
 8020954:	bd90      	pop	{r4, r7, pc}
 8020956:	bf00      	nop
 8020958:	08020e0d 	.word	0x08020e0d
 802095c:	08020d89 	.word	0x08020d89
 8020960:	08020d0d 	.word	0x08020d0d
 8020964:	0001a66c 	.word	0x0001a66c
 8020968:	0803e780 	.word	0x0803e780
 802096c:	08020a11 	.word	0x08020a11

08020970 <_ZN10BHYWrapper4PollEv>:

bool BHYWrapper::Poll() {
 8020970:	b590      	push	{r4, r7, lr}
 8020972:	b085      	sub	sp, #20
 8020974:	af00      	add	r7, sp, #0
 8020976:	6078      	str	r0, [r7, #4]
	uint8_t interruptStatus = 0;
 8020978:	2300      	movs	r3, #0
 802097a:	73fb      	strb	r3, [r7, #15]
	bhy2_get_interrupt_status(&interruptStatus, &bhy2);
 802097c:	687a      	ldr	r2, [r7, #4]
 802097e:	f107 030f 	add.w	r3, r7, #15
 8020982:	4611      	mov	r1, r2
 8020984:	4618      	mov	r0, r3
 8020986:	f008 fbd6 	bl	8029136 <bhy2_get_interrupt_status>

	if (interruptStatus) {
 802098a:	7bfb      	ldrb	r3, [r7, #15]
 802098c:	2b00      	cmp	r3, #0
 802098e:	d01d      	beq.n	80209cc <_ZN10BHYWrapper4PollEv+0x5c>
		assert(
 8020990:	687b      	ldr	r3, [r7, #4]
 8020992:	f603 133c 	addw	r3, r3, #2364	; 0x93c
 8020996:	4618      	mov	r0, r3
 8020998:	f000 f92c 	bl	8020bf4 <_ZNSt5arrayIhLj2048EE4dataEv>
 802099c:	4604      	mov	r4, r0
 802099e:	687b      	ldr	r3, [r7, #4]
 80209a0:	f603 133c 	addw	r3, r3, #2364	; 0x93c
 80209a4:	4618      	mov	r0, r3
 80209a6:	f000 f932 	bl	8020c0e <_ZNKSt5arrayIhLj2048EE4sizeEv>
 80209aa:	4601      	mov	r1, r0
 80209ac:	687b      	ldr	r3, [r7, #4]
 80209ae:	461a      	mov	r2, r3
 80209b0:	4620      	mov	r0, r4
 80209b2:	f008 f990 	bl	8028cd6 <bhy2_get_and_process_fifo>
 80209b6:	4603      	mov	r3, r0
 80209b8:	2b00      	cmp	r3, #0
 80209ba:	d005      	beq.n	80209c8 <_ZN10BHYWrapper4PollEv+0x58>
 80209bc:	4b06      	ldr	r3, [pc, #24]	; (80209d8 <_ZN10BHYWrapper4PollEv+0x68>)
 80209be:	4a07      	ldr	r2, [pc, #28]	; (80209dc <_ZN10BHYWrapper4PollEv+0x6c>)
 80209c0:	2166      	movs	r1, #102	; 0x66
 80209c2:	4807      	ldr	r0, [pc, #28]	; (80209e0 <_ZN10BHYWrapper4PollEv+0x70>)
 80209c4:	f01c fa7a 	bl	803cebc <__assert_func>
				bhy2_get_and_process_fifo(WorkBuffer.data(), WorkBuffer.size(), &bhy2) == BHY2_OK);
		return true;
 80209c8:	2301      	movs	r3, #1
 80209ca:	e000      	b.n	80209ce <_ZN10BHYWrapper4PollEv+0x5e>
	}

	return false;
 80209cc:	2300      	movs	r3, #0
}
 80209ce:	4618      	mov	r0, r3
 80209d0:	3714      	adds	r7, #20
 80209d2:	46bd      	mov	sp, r7
 80209d4:	bd90      	pop	{r4, r7, pc}
 80209d6:	bf00      	nop
 80209d8:	0803dfd0 	.word	0x0803dfd0
 80209dc:	0803e024 	.word	0x0803e024
 80209e0:	0803dfb4 	.word	0x0803dfb4

080209e4 <_ZNK10BHYWrapper8GetFrameEv>:

BHYWrapper::BHYFrame BHYWrapper::GetFrame() const {
 80209e4:	b4b0      	push	{r4, r5, r7}
 80209e6:	b083      	sub	sp, #12
 80209e8:	af00      	add	r7, sp, #0
 80209ea:	6078      	str	r0, [r7, #4]
 80209ec:	6039      	str	r1, [r7, #0]
	return CurrentFrame;
 80209ee:	687a      	ldr	r2, [r7, #4]
 80209f0:	683b      	ldr	r3, [r7, #0]
 80209f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80209f6:	4615      	mov	r5, r2
 80209f8:	f503 749e 	add.w	r4, r3, #316	; 0x13c
 80209fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80209fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8020a00:	6823      	ldr	r3, [r4, #0]
 8020a02:	602b      	str	r3, [r5, #0]
}
 8020a04:	6878      	ldr	r0, [r7, #4]
 8020a06:	370c      	adds	r7, #12
 8020a08:	46bd      	mov	sp, r7
 8020a0a:	bcb0      	pop	{r4, r5, r7}
 8020a0c:	4770      	bx	lr
	...

08020a10 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv>:

void BHYWrapper::ParseFrame(const bhy2_fifo_parse_data_info *cbInfo,
		void *cbRef) {
 8020a10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8020a14:	b08e      	sub	sp, #56	; 0x38
 8020a16:	af00      	add	r7, sp, #0
 8020a18:	60f8      	str	r0, [r7, #12]
 8020a1a:	60b9      	str	r1, [r7, #8]
	BHYFrame *frame = reinterpret_cast<BHYFrame*>(cbRef);
 8020a1c:	68bb      	ldr	r3, [r7, #8]
 8020a1e:	637b      	str	r3, [r7, #52]	; 0x34
	bhy2_data_quaternion qtData;

	assert(frame);
 8020a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020a22:	2b00      	cmp	r3, #0
 8020a24:	d105      	bne.n	8020a32 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x22>
 8020a26:	4b40      	ldr	r3, [pc, #256]	; (8020b28 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x118>)
 8020a28:	4a40      	ldr	r2, [pc, #256]	; (8020b2c <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x11c>)
 8020a2a:	2177      	movs	r1, #119	; 0x77
 8020a2c:	4840      	ldr	r0, [pc, #256]	; (8020b30 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x120>)
 8020a2e:	f01c fa45 	bl	803cebc <__assert_func>
	auto &timestamp = frame->Timestamp;
 8020a32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020a34:	3308      	adds	r3, #8
 8020a36:	633b      	str	r3, [r7, #48]	; 0x30
	auto &quaternion = frame->Orientation;
 8020a38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020a3a:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (cbInfo->data_size != CallbackDataSize)
 8020a3c:	68fb      	ldr	r3, [r7, #12]
 8020a3e:	789b      	ldrb	r3, [r3, #2]
 8020a40:	2b0b      	cmp	r3, #11
 8020a42:	d167      	bne.n	8020b14 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x104>
		return;

	bhy2_parse_quaternion(cbInfo->data_ptr, &qtData);
 8020a44:	68fb      	ldr	r3, [r7, #12]
 8020a46:	685b      	ldr	r3, [r3, #4]
 8020a48:	f107 0214 	add.w	r2, r7, #20
 8020a4c:	4611      	mov	r1, r2
 8020a4e:	4618      	mov	r0, r3
 8020a50:	f009 fe2d 	bl	802a6ae <bhy2_parse_quaternion>

	frame->SensorId = cbInfo->sensor_id;
 8020a54:	68fb      	ldr	r3, [r7, #12]
 8020a56:	781a      	ldrb	r2, [r3, #0]
 8020a58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020a5a:	741a      	strb	r2, [r3, #16]

	uint64_t timeData = *cbInfo->time_stamp * 15625; /* Store the last timestamp */
 8020a5c:	68fb      	ldr	r3, [r7, #12]
 8020a5e:	689b      	ldr	r3, [r3, #8]
 8020a60:	e9d3 0100 	ldrd	r0, r1, [r3]
 8020a64:	4602      	mov	r2, r0
 8020a66:	460b      	mov	r3, r1
 8020a68:	f04f 0a00 	mov.w	sl, #0
 8020a6c:	f04f 0b00 	mov.w	fp, #0
 8020a70:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8020a74:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8020a78:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8020a7c:	4652      	mov	r2, sl
 8020a7e:	465b      	mov	r3, fp
 8020a80:	ebb2 0800 	subs.w	r8, r2, r0
 8020a84:	eb63 0901 	sbc.w	r9, r3, r1
 8020a88:	f04f 0200 	mov.w	r2, #0
 8020a8c:	f04f 0300 	mov.w	r3, #0
 8020a90:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8020a94:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8020a98:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8020a9c:	ebb2 0408 	subs.w	r4, r2, r8
 8020aa0:	eb63 0509 	sbc.w	r5, r3, r9
 8020aa4:	f04f 0200 	mov.w	r2, #0
 8020aa8:	f04f 0300 	mov.w	r3, #0
 8020aac:	00eb      	lsls	r3, r5, #3
 8020aae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8020ab2:	00e2      	lsls	r2, r4, #3
 8020ab4:	4614      	mov	r4, r2
 8020ab6:	461d      	mov	r5, r3
 8020ab8:	1823      	adds	r3, r4, r0
 8020aba:	603b      	str	r3, [r7, #0]
 8020abc:	eb45 0301 	adc.w	r3, r5, r1
 8020ac0:	607b      	str	r3, [r7, #4]
 8020ac2:	e9d7 3400 	ldrd	r3, r4, [r7]
 8020ac6:	e9c7 3408 	strd	r3, r4, [r7, #32]

	timestamp.TimeS = (timeData / UINT64_C(1000000000));
 8020aca:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8020ace:	a314      	add	r3, pc, #80	; (adr r3, 8020b20 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x110>)
 8020ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020ad4:	f7ff fc54 	bl	8020380 <__aeabi_uldivmod>
 8020ad8:	4602      	mov	r2, r0
 8020ada:	460b      	mov	r3, r1
 8020adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020ade:	601a      	str	r2, [r3, #0]
	timestamp.TimeNS = (timeData - (timestamp.TimeS * UINT64_C(1000000000)));
 8020ae0:	6a3a      	ldr	r2, [r7, #32]
 8020ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020ae4:	681b      	ldr	r3, [r3, #0]
 8020ae6:	4913      	ldr	r1, [pc, #76]	; (8020b34 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x124>)
 8020ae8:	fb01 f303 	mul.w	r3, r1, r3
 8020aec:	1ad2      	subs	r2, r2, r3
 8020aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020af0:	605a      	str	r2, [r3, #4]
	quaternion.X = qtData.x;
 8020af2:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8020af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020af8:	801a      	strh	r2, [r3, #0]
	quaternion.Y = qtData.y;
 8020afa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8020afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020b00:	805a      	strh	r2, [r3, #2]
	quaternion.Z = qtData.z;
 8020b02:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8020b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020b08:	809a      	strh	r2, [r3, #4]
	quaternion.W = qtData.w;
 8020b0a:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8020b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020b10:	80da      	strh	r2, [r3, #6]
 8020b12:	e000      	b.n	8020b16 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x106>
		return;
 8020b14:	bf00      	nop
	/*
	 quaternion.Accuracy = ((qtData.accuracy * 180.0f) / 16384.0f)
	 / 3.141592653589793f; */
}
 8020b16:	3738      	adds	r7, #56	; 0x38
 8020b18:	46bd      	mov	sp, r7
 8020b1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8020b1e:	bf00      	nop
 8020b20:	3b9aca00 	.word	0x3b9aca00
 8020b24:	00000000 	.word	0x00000000
 8020b28:	0803e03c 	.word	0x0803e03c
 8020b2c:	0803e044 	.word	0x0803e044
 8020b30:	0803dfb4 	.word	0x0803dfb4
 8020b34:	3b9aca00 	.word	0x3b9aca00

08020b38 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_>:

void BHYWrapper::BHYFrame::SerializeTo(uint8_t *dest, uint8_t *size) {
 8020b38:	b580      	push	{r7, lr}
 8020b3a:	b086      	sub	sp, #24
 8020b3c:	af00      	add	r7, sp, #0
 8020b3e:	60f8      	str	r0, [r7, #12]
 8020b40:	60b9      	str	r1, [r7, #8]
 8020b42:	607a      	str	r2, [r7, #4]
	assert(dest);
 8020b44:	68bb      	ldr	r3, [r7, #8]
 8020b46:	2b00      	cmp	r3, #0
 8020b48:	d105      	bne.n	8020b56 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0x1e>
 8020b4a:	4b26      	ldr	r3, [pc, #152]	; (8020be4 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0xac>)
 8020b4c:	4a26      	ldr	r2, [pc, #152]	; (8020be8 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0xb0>)
 8020b4e:	2190      	movs	r1, #144	; 0x90
 8020b50:	4826      	ldr	r0, [pc, #152]	; (8020bec <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0xb4>)
 8020b52:	f01c f9b3 	bl	803cebc <__assert_func>
	assert(size);
 8020b56:	687b      	ldr	r3, [r7, #4]
 8020b58:	2b00      	cmp	r3, #0
 8020b5a:	d105      	bne.n	8020b68 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0x30>
 8020b5c:	4b24      	ldr	r3, [pc, #144]	; (8020bf0 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0xb8>)
 8020b5e:	4a22      	ldr	r2, [pc, #136]	; (8020be8 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0xb0>)
 8020b60:	2191      	movs	r1, #145	; 0x91
 8020b62:	4822      	ldr	r0, [pc, #136]	; (8020bec <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0xb4>)
 8020b64:	f01c f9aa 	bl	803cebc <__assert_func>

	uint8_t *ptr = dest;
 8020b68:	68bb      	ldr	r3, [r7, #8]
 8020b6a:	617b      	str	r3, [r7, #20]

	*reinterpret_cast<int16_t*>(ptr) = Orientation.X;
 8020b6c:	68fb      	ldr	r3, [r7, #12]
 8020b6e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8020b72:	697b      	ldr	r3, [r7, #20]
 8020b74:	801a      	strh	r2, [r3, #0]
	ptr += sizeof(int16_t);
 8020b76:	697b      	ldr	r3, [r7, #20]
 8020b78:	3302      	adds	r3, #2
 8020b7a:	617b      	str	r3, [r7, #20]

	*reinterpret_cast<int16_t*>(ptr) = Orientation.Y;
 8020b7c:	68fb      	ldr	r3, [r7, #12]
 8020b7e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8020b82:	697b      	ldr	r3, [r7, #20]
 8020b84:	801a      	strh	r2, [r3, #0]
	ptr += sizeof(int16_t);
 8020b86:	697b      	ldr	r3, [r7, #20]
 8020b88:	3302      	adds	r3, #2
 8020b8a:	617b      	str	r3, [r7, #20]

	*reinterpret_cast<int16_t*>(ptr) = Orientation.Z;
 8020b8c:	68fb      	ldr	r3, [r7, #12]
 8020b8e:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8020b92:	697b      	ldr	r3, [r7, #20]
 8020b94:	801a      	strh	r2, [r3, #0]
	ptr += sizeof(int16_t);
 8020b96:	697b      	ldr	r3, [r7, #20]
 8020b98:	3302      	adds	r3, #2
 8020b9a:	617b      	str	r3, [r7, #20]

	*reinterpret_cast<int16_t*>(ptr) = Orientation.W;
 8020b9c:	68fb      	ldr	r3, [r7, #12]
 8020b9e:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8020ba2:	697b      	ldr	r3, [r7, #20]
 8020ba4:	801a      	strh	r2, [r3, #0]
	ptr += sizeof(int16_t);
 8020ba6:	697b      	ldr	r3, [r7, #20]
 8020ba8:	3302      	adds	r3, #2
 8020baa:	617b      	str	r3, [r7, #20]
	 /*
	 *reinterpret_cast<float*>(ptr) = Orientation.Accuracy;
	 ptr += sizeof(float);
	 */

	*reinterpret_cast<uint32_t*>(ptr) = Timestamp.TimeS;
 8020bac:	68fb      	ldr	r3, [r7, #12]
 8020bae:	689a      	ldr	r2, [r3, #8]
 8020bb0:	697b      	ldr	r3, [r7, #20]
 8020bb2:	601a      	str	r2, [r3, #0]
	ptr += sizeof(uint32_t);
 8020bb4:	697b      	ldr	r3, [r7, #20]
 8020bb6:	3304      	adds	r3, #4
 8020bb8:	617b      	str	r3, [r7, #20]

	*reinterpret_cast<uint32_t*>(ptr) = Timestamp.TimeNS;
 8020bba:	68fb      	ldr	r3, [r7, #12]
 8020bbc:	68da      	ldr	r2, [r3, #12]
 8020bbe:	697b      	ldr	r3, [r7, #20]
 8020bc0:	601a      	str	r2, [r3, #0]
	ptr += sizeof(uint32_t);
 8020bc2:	697b      	ldr	r3, [r7, #20]
 8020bc4:	3304      	adds	r3, #4
 8020bc6:	617b      	str	r3, [r7, #20]

	*reinterpret_cast<uint8_t*>(ptr) = SensorId;
 8020bc8:	68fb      	ldr	r3, [r7, #12]
 8020bca:	7c1a      	ldrb	r2, [r3, #16]
 8020bcc:	697b      	ldr	r3, [r7, #20]
 8020bce:	701a      	strb	r2, [r3, #0]
	ptr += sizeof(uint8_t);
 8020bd0:	697b      	ldr	r3, [r7, #20]
 8020bd2:	3301      	adds	r3, #1
 8020bd4:	617b      	str	r3, [r7, #20]

	*size = Size;
 8020bd6:	687b      	ldr	r3, [r7, #4]
 8020bd8:	2211      	movs	r2, #17
 8020bda:	701a      	strb	r2, [r3, #0]
}
 8020bdc:	bf00      	nop
 8020bde:	3718      	adds	r7, #24
 8020be0:	46bd      	mov	sp, r7
 8020be2:	bd80      	pop	{r7, pc}
 8020be4:	0803e090 	.word	0x0803e090
 8020be8:	0803e098 	.word	0x0803e098
 8020bec:	0803dfb4 	.word	0x0803dfb4
 8020bf0:	0803e0d4 	.word	0x0803e0d4

08020bf4 <_ZNSt5arrayIhLj2048EE4dataEv>:
	return _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)
 	           : _AT_Type::_S_ref(_M_elems, 0);
      }

      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
 8020bf4:	b580      	push	{r7, lr}
 8020bf6:	b082      	sub	sp, #8
 8020bf8:	af00      	add	r7, sp, #0
 8020bfa:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8020bfc:	687b      	ldr	r3, [r7, #4]
 8020bfe:	4618      	mov	r0, r3
 8020c00:	f000 f811 	bl	8020c26 <_ZNSt14__array_traitsIhLj2048EE6_S_ptrERA2048_Kh>
 8020c04:	4603      	mov	r3, r0
 8020c06:	4618      	mov	r0, r3
 8020c08:	3708      	adds	r7, #8
 8020c0a:	46bd      	mov	sp, r7
 8020c0c:	bd80      	pop	{r7, pc}

08020c0e <_ZNKSt5arrayIhLj2048EE4sizeEv>:
      size() const noexcept { return _Nm; }
 8020c0e:	b480      	push	{r7}
 8020c10:	b083      	sub	sp, #12
 8020c12:	af00      	add	r7, sp, #0
 8020c14:	6078      	str	r0, [r7, #4]
 8020c16:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8020c1a:	4618      	mov	r0, r3
 8020c1c:	370c      	adds	r7, #12
 8020c1e:	46bd      	mov	sp, r7
 8020c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c24:	4770      	bx	lr

08020c26 <_ZNSt14__array_traitsIhLj2048EE6_S_ptrERA2048_Kh>:
      _S_ptr(const _Type& __t) noexcept
 8020c26:	b480      	push	{r7}
 8020c28:	b083      	sub	sp, #12
 8020c2a:	af00      	add	r7, sp, #0
 8020c2c:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8020c2e:	687b      	ldr	r3, [r7, #4]
 8020c30:	4618      	mov	r0, r3
 8020c32:	370c      	adds	r7, #12
 8020c34:	46bd      	mov	sp, r7
 8020c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c3a:	4770      	bx	lr

08020c3c <_Z8spi_initP19__SPI_HandleTypeDef>:

  CDC_Transmit_FS( (uint8_t*)line, strlen(line) );
  }

void spi_init( SPI_HandleTypeDef *hspi)
{
 8020c3c:	b480      	push	{r7}
 8020c3e:	b083      	sub	sp, #12
 8020c40:	af00      	add	r7, sp, #0
 8020c42:	6078      	str	r0, [r7, #4]
  mSPI = hspi;
 8020c44:	4a04      	ldr	r2, [pc, #16]	; (8020c58 <_Z8spi_initP19__SPI_HandleTypeDef+0x1c>)
 8020c46:	687b      	ldr	r3, [r7, #4]
 8020c48:	6013      	str	r3, [r2, #0]
}
 8020c4a:	bf00      	nop
 8020c4c:	370c      	adds	r7, #12
 8020c4e:	46bd      	mov	sp, r7
 8020c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c54:	4770      	bx	lr
 8020c56:	bf00      	nop
 8020c58:	24000184 	.word	0x24000184

08020c5c <_Z11spiTransmitPht>:
//! \param data        Данные для передачи
//! \param size        Количество байт для передачи
//! \return            true - если операция выполнена успешно
//!
int8_t spiTransmit( uint8_t *data, uint16_t size )
  {
 8020c5c:	b580      	push	{r7, lr}
 8020c5e:	b082      	sub	sp, #8
 8020c60:	af00      	add	r7, sp, #0
 8020c62:	6078      	str	r0, [r7, #4]
 8020c64:	460b      	mov	r3, r1
 8020c66:	807b      	strh	r3, [r7, #2]
  //Инициировать передачу по DMA
	HAL_SPI_Transmit_DMA( mSPI, data, size );
 8020c68:	4b11      	ldr	r3, [pc, #68]	; (8020cb0 <_Z11spiTransmitPht+0x54>)
 8020c6a:	681b      	ldr	r3, [r3, #0]
 8020c6c:	887a      	ldrh	r2, [r7, #2]
 8020c6e:	6879      	ldr	r1, [r7, #4]
 8020c70:	4618      	mov	r0, r3
 8020c72:	f013 fe6d 	bl	8034950 <HAL_SPI_Transmit_DMA>
	while (HAL_SPI_GetState(mSPI) != HAL_SPI_STATE_READY);
 8020c76:	4b0e      	ldr	r3, [pc, #56]	; (8020cb0 <_Z11spiTransmitPht+0x54>)
 8020c78:	681b      	ldr	r3, [r3, #0]
 8020c7a:	4618      	mov	r0, r3
 8020c7c:	f014 fcf6 	bl	803566c <HAL_SPI_GetState>
 8020c80:	4603      	mov	r3, r0
 8020c82:	2b01      	cmp	r3, #1
 8020c84:	bf14      	ite	ne
 8020c86:	2301      	movne	r3, #1
 8020c88:	2300      	moveq	r3, #0
 8020c8a:	b2db      	uxtb	r3, r3
 8020c8c:	2b00      	cmp	r3, #0
 8020c8e:	d000      	beq.n	8020c92 <_Z11spiTransmitPht+0x36>
 8020c90:	e7f1      	b.n	8020c76 <_Z11spiTransmitPht+0x1a>
	//HAL_SPI_Transmit(mSPI, data, size, 5);
  //Возвращает истину при успешном завершении операции
  return mSPI->ErrorCode == HAL_SPI_ERROR_NONE;
 8020c92:	4b07      	ldr	r3, [pc, #28]	; (8020cb0 <_Z11spiTransmitPht+0x54>)
 8020c94:	681b      	ldr	r3, [r3, #0]
 8020c96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8020c9a:	2b00      	cmp	r3, #0
 8020c9c:	bf0c      	ite	eq
 8020c9e:	2301      	moveq	r3, #1
 8020ca0:	2300      	movne	r3, #0
 8020ca2:	b2db      	uxtb	r3, r3
 8020ca4:	b25b      	sxtb	r3, r3
  }
 8020ca6:	4618      	mov	r0, r3
 8020ca8:	3708      	adds	r7, #8
 8020caa:	46bd      	mov	sp, r7
 8020cac:	bd80      	pop	{r7, pc}
 8020cae:	bf00      	nop
 8020cb0:	24000184 	.word	0x24000184

08020cb4 <_Z9spiReceivPht>:
//! \param data      Указатель на буфер, в который размещаются принятые данные
//! \param size      Количество принимаемых байтов
//! \return            true - если операция выполнена успешно
//!
int8_t spiReceiv( uint8_t *data, uint16_t size )
  {
 8020cb4:	b580      	push	{r7, lr}
 8020cb6:	b082      	sub	sp, #8
 8020cb8:	af00      	add	r7, sp, #0
 8020cba:	6078      	str	r0, [r7, #4]
 8020cbc:	460b      	mov	r3, r1
 8020cbe:	807b      	strh	r3, [r7, #2]
  //Инициировать передачу по DMA
	//HAL_SPI_Receive(mSPI, data, size,  5);
	HAL_SPI_Receive_DMA( mSPI, data, size );
 8020cc0:	4b11      	ldr	r3, [pc, #68]	; (8020d08 <_Z9spiReceivPht+0x54>)
 8020cc2:	681b      	ldr	r3, [r3, #0]
 8020cc4:	887a      	ldrh	r2, [r7, #2]
 8020cc6:	6879      	ldr	r1, [r7, #4]
 8020cc8:	4618      	mov	r0, r3
 8020cca:	f013 ff8b 	bl	8034be4 <HAL_SPI_Receive_DMA>
  //Ожидать завершения приема
	while (HAL_SPI_GetState(mSPI) != HAL_SPI_STATE_READY);
 8020cce:	4b0e      	ldr	r3, [pc, #56]	; (8020d08 <_Z9spiReceivPht+0x54>)
 8020cd0:	681b      	ldr	r3, [r3, #0]
 8020cd2:	4618      	mov	r0, r3
 8020cd4:	f014 fcca 	bl	803566c <HAL_SPI_GetState>
 8020cd8:	4603      	mov	r3, r0
 8020cda:	2b01      	cmp	r3, #1
 8020cdc:	bf14      	ite	ne
 8020cde:	2301      	movne	r3, #1
 8020ce0:	2300      	moveq	r3, #0
 8020ce2:	b2db      	uxtb	r3, r3
 8020ce4:	2b00      	cmp	r3, #0
 8020ce6:	d000      	beq.n	8020cea <_Z9spiReceivPht+0x36>
 8020ce8:	e7f1      	b.n	8020cce <_Z9spiReceivPht+0x1a>
  //Возвращает истину при успешном завершении операции
  return mSPI->ErrorCode == HAL_SPI_ERROR_NONE;
 8020cea:	4b07      	ldr	r3, [pc, #28]	; (8020d08 <_Z9spiReceivPht+0x54>)
 8020cec:	681b      	ldr	r3, [r3, #0]
 8020cee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8020cf2:	2b00      	cmp	r3, #0
 8020cf4:	bf0c      	ite	eq
 8020cf6:	2301      	moveq	r3, #1
 8020cf8:	2300      	movne	r3, #0
 8020cfa:	b2db      	uxtb	r3, r3
 8020cfc:	b25b      	sxtb	r3, r3
  }
 8020cfe:	4618      	mov	r0, r3
 8020d00:	3708      	adds	r7, #8
 8020d02:	46bd      	mov	sp, r7
 8020d04:	bd80      	pop	{r7, pc}
 8020d06:	bf00      	nop
 8020d08:	24000184 	.word	0x24000184

08020d0c <_Z13bhy2_spi_readhPhmPv>:
//! \param length        Длина данных
//! \param intf_ptr      Указатель на интерфейс (не используем)
//! \return              Результат операции
//!
int8_t bhy2_spi_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr)
  {
 8020d0c:	b580      	push	{r7, lr}
 8020d0e:	b084      	sub	sp, #16
 8020d10:	af00      	add	r7, sp, #0
 8020d12:	60b9      	str	r1, [r7, #8]
 8020d14:	607a      	str	r2, [r7, #4]
 8020d16:	603b      	str	r3, [r7, #0]
 8020d18:	4603      	mov	r3, r0
 8020d1a:	73fb      	strb	r3, [r7, #15]
  //I2cDmaTransfer *i2cDmaTransfer = (I2cDmaTransfer*)intf_ptr;
  //Выставляем CS в 0
  //HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
  //GPIOA->BSRR = (uint32_t)SPI_CS_Pin << (16U);
  GPIOE->BSRR = (uint32_t)IMU_CS_Pin << (16U);
 8020d1c:	4b19      	ldr	r3, [pc, #100]	; (8020d84 <_Z13bhy2_spi_readhPhmPv+0x78>)
 8020d1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8020d22:	619a      	str	r2, [r3, #24]

  //Записываем адрес регистра
  if( !spiTransmit( &reg_addr, 1 ) )
 8020d24:	f107 030f 	add.w	r3, r7, #15
 8020d28:	2101      	movs	r1, #1
 8020d2a:	4618      	mov	r0, r3
 8020d2c:	f7ff ff96 	bl	8020c5c <_Z11spiTransmitPht>
 8020d30:	4603      	mov	r3, r0
 8020d32:	2b00      	cmp	r3, #0
 8020d34:	bf0c      	ite	eq
 8020d36:	2301      	moveq	r3, #1
 8020d38:	2300      	movne	r3, #0
 8020d3a:	b2db      	uxtb	r3, r3
 8020d3c:	2b00      	cmp	r3, #0
 8020d3e:	d002      	beq.n	8020d46 <_Z13bhy2_spi_readhPhmPv+0x3a>
    return IMU_ERR_SPI;
 8020d40:	f06f 0301 	mvn.w	r3, #1
 8020d44:	e019      	b.n	8020d7a <_Z13bhy2_spi_readhPhmPv+0x6e>

  //Читаем содержимое регистра
  if( spiReceiv( reg_data, length ) )
 8020d46:	687b      	ldr	r3, [r7, #4]
 8020d48:	b29b      	uxth	r3, r3
 8020d4a:	4619      	mov	r1, r3
 8020d4c:	68b8      	ldr	r0, [r7, #8]
 8020d4e:	f7ff ffb1 	bl	8020cb4 <_Z9spiReceivPht>
 8020d52:	4603      	mov	r3, r0
 8020d54:	2b00      	cmp	r3, #0
 8020d56:	bf14      	ite	ne
 8020d58:	2301      	movne	r3, #1
 8020d5a:	2300      	moveq	r3, #0
 8020d5c:	b2db      	uxtb	r3, r3
 8020d5e:	2b00      	cmp	r3, #0
 8020d60:	d005      	beq.n	8020d6e <_Z13bhy2_spi_readhPhmPv+0x62>
  {
	  //Выставляем CS в 1
	  //SPI_CS_GPIO_Port->BSRR = (uint32_t)SPI_CS_Pin;
	  IMU_CS_GPIO_Port->BSRR = (uint32_t)IMU_CS_Pin;
 8020d62:	4b08      	ldr	r3, [pc, #32]	; (8020d84 <_Z13bhy2_spi_readhPhmPv+0x78>)
 8020d64:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8020d68:	619a      	str	r2, [r3, #24]
	  //Возвращаем успех операции
    return IMU_ERR_OK;
 8020d6a:	2300      	movs	r3, #0
 8020d6c:	e005      	b.n	8020d7a <_Z13bhy2_spi_readhPhmPv+0x6e>
  }
  //SPI_CS_GPIO_Port->BSRR = (uint32_t)SPI_CS_Pin;
  IMU_CS_GPIO_Port->BSRR = (uint32_t)IMU_CS_Pin;
 8020d6e:	4b05      	ldr	r3, [pc, #20]	; (8020d84 <_Z13bhy2_spi_readhPhmPv+0x78>)
 8020d70:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8020d74:	619a      	str	r2, [r3, #24]
  //Выставляем CS в 1


  return IMU_ERR_SPI;
 8020d76:	f06f 0301 	mvn.w	r3, #1
  }
 8020d7a:	4618      	mov	r0, r3
 8020d7c:	3710      	adds	r7, #16
 8020d7e:	46bd      	mov	sp, r7
 8020d80:	bd80      	pop	{r7, pc}
 8020d82:	bf00      	nop
 8020d84:	58021000 	.word	0x58021000

08020d88 <_Z14bhy2_spi_writehPKhmPv>:
//! \param length         Длина данных
//! \param intf_ptr       Указатель на интерфейс (не используем)
//! \return               Результат операции
//!
int8_t bhy2_spi_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, void *intf_ptr)
  {
 8020d88:	b580      	push	{r7, lr}
 8020d8a:	b084      	sub	sp, #16
 8020d8c:	af00      	add	r7, sp, #0
 8020d8e:	60b9      	str	r1, [r7, #8]
 8020d90:	607a      	str	r2, [r7, #4]
 8020d92:	603b      	str	r3, [r7, #0]
 8020d94:	4603      	mov	r3, r0
 8020d96:	73fb      	strb	r3, [r7, #15]
  //Промежуточный буфер нужен чтобы передать данные вместе с адресом регистра
  static uint8_t buffer[65];

  if( length > 64 )
 8020d98:	687b      	ldr	r3, [r7, #4]
 8020d9a:	2b40      	cmp	r3, #64	; 0x40
 8020d9c:	d902      	bls.n	8020da4 <_Z14bhy2_spi_writehPKhmPv+0x1c>
    return -4;
 8020d9e:	f06f 0303 	mvn.w	r3, #3
 8020da2:	e028      	b.n	8020df6 <_Z14bhy2_spi_writehPKhmPv+0x6e>

  //I2cDmaTransfer *i2cDmaTransfer = (I2cDmaTransfer*)intf_ptr;

  buffer[0] = reg_addr; //записываем в старший бит адреса 0 для записи данных
 8020da4:	4a16      	ldr	r2, [pc, #88]	; (8020e00 <_Z14bhy2_spi_writehPKhmPv+0x78>)
 8020da6:	7bfb      	ldrb	r3, [r7, #15]
 8020da8:	7013      	strb	r3, [r2, #0]
  //Скопировать данные из исходного буфера в промежуточный, чтобы адрес регистра был частью буфера данных
  memcpy( buffer + 1, reg_data, length );
 8020daa:	4b16      	ldr	r3, [pc, #88]	; (8020e04 <_Z14bhy2_spi_writehPKhmPv+0x7c>)
 8020dac:	687a      	ldr	r2, [r7, #4]
 8020dae:	68b9      	ldr	r1, [r7, #8]
 8020db0:	4618      	mov	r0, r3
 8020db2:	f01c f8ed 	bl	803cf90 <memcpy>
  //memcpy( buffer + 1, reg_data, length );
  //Выставляем CS в 0
  //GPIOA->BSRR = (uint32_t)SPI_CS_Pin << (16U);
  GPIOE->BSRR = (uint32_t)IMU_CS_Pin << (16U);
 8020db6:	4b14      	ldr	r3, [pc, #80]	; (8020e08 <_Z14bhy2_spi_writehPKhmPv+0x80>)
 8020db8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8020dbc:	619a      	str	r2, [r3, #24]
  //if( spiTransmit( buffer + 1, length + 1 ) )
  if( spiTransmit( buffer, length + 1) )
 8020dbe:	687b      	ldr	r3, [r7, #4]
 8020dc0:	b29b      	uxth	r3, r3
 8020dc2:	3301      	adds	r3, #1
 8020dc4:	b29b      	uxth	r3, r3
 8020dc6:	4619      	mov	r1, r3
 8020dc8:	480d      	ldr	r0, [pc, #52]	; (8020e00 <_Z14bhy2_spi_writehPKhmPv+0x78>)
 8020dca:	f7ff ff47 	bl	8020c5c <_Z11spiTransmitPht>
 8020dce:	4603      	mov	r3, r0
 8020dd0:	2b00      	cmp	r3, #0
 8020dd2:	bf14      	ite	ne
 8020dd4:	2301      	movne	r3, #1
 8020dd6:	2300      	moveq	r3, #0
 8020dd8:	b2db      	uxtb	r3, r3
 8020dda:	2b00      	cmp	r3, #0
 8020ddc:	d005      	beq.n	8020dea <_Z14bhy2_spi_writehPKhmPv+0x62>
  {
	  //Выставляем CS в 1
	  //SPI_CS_GPIO_Port->BSRR = (uint32_t)SPI_CS_Pin;
	  IMU_CS_GPIO_Port->BSRR = (uint32_t)IMU_CS_Pin;
 8020dde:	4b0a      	ldr	r3, [pc, #40]	; (8020e08 <_Z14bhy2_spi_writehPKhmPv+0x80>)
 8020de0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8020de4:	619a      	str	r2, [r3, #24]
	  return IMU_ERR_OK;
 8020de6:	2300      	movs	r3, #0
 8020de8:	e005      	b.n	8020df6 <_Z14bhy2_spi_writehPKhmPv+0x6e>
  }
  //Выставляем CS в 1
  //SPI_CS_GPIO_Port->BSRR = (uint32_t)SPI_CS_Pin;
  IMU_CS_GPIO_Port->BSRR = (uint32_t)IMU_CS_Pin;
 8020dea:	4b07      	ldr	r3, [pc, #28]	; (8020e08 <_Z14bhy2_spi_writehPKhmPv+0x80>)
 8020dec:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8020df0:	619a      	str	r2, [r3, #24]
  return IMU_ERR_I2C;
 8020df2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
 8020df6:	4618      	mov	r0, r3
 8020df8:	3710      	adds	r7, #16
 8020dfa:	46bd      	mov	sp, r7
 8020dfc:	bd80      	pop	{r7, pc}
 8020dfe:	bf00      	nop
 8020e00:	24000188 	.word	0x24000188
 8020e04:	24000189 	.word	0x24000189
 8020e08:	58021000 	.word	0x58021000

08020e0c <_Z13bhy2_delay_usmPv>:
//! \brief bhy2_delay_us Сформировать задержку на заданное количество мкс
//! \param us            Количество мкс, на которое нужно сформировать задержку
//! \param private_data  Неиспользуемый указатель на устройство
//!
void bhy2_delay_us(uint32_t us, void *private_data)
  {
 8020e0c:	b580      	push	{r7, lr}
 8020e0e:	b082      	sub	sp, #8
 8020e10:	af00      	add	r7, sp, #0
 8020e12:	6078      	str	r0, [r7, #4]
 8020e14:	6039      	str	r1, [r7, #0]
  //Чтобы компилятор не ругался на неиспользуемую переменную
  (void)private_data;
  //Если задержка превышает 1мс, то задерживаем средствами ОС
  if( us >= 1000 )
 8020e16:	687b      	ldr	r3, [r7, #4]
 8020e18:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8020e1c:	d308      	bcc.n	8020e30 <_Z13bhy2_delay_usmPv+0x24>
    HAL_Delay( us / 1000 );
 8020e1e:	687b      	ldr	r3, [r7, #4]
 8020e20:	4a0b      	ldr	r2, [pc, #44]	; (8020e50 <_Z13bhy2_delay_usmPv+0x44>)
 8020e22:	fba2 2303 	umull	r2, r3, r2, r3
 8020e26:	099b      	lsrs	r3, r3, #6
 8020e28:	4618      	mov	r0, r3
 8020e2a:	f00b f98d 	bl	802c148 <HAL_Delay>
    //Задержка менее 1мс, делаем тупым счетом
    while( us-- ) {
      __NOP();
      }
    }
  }
 8020e2e:	e00b      	b.n	8020e48 <_Z13bhy2_delay_usmPv+0x3c>
    while( us-- ) {
 8020e30:	687b      	ldr	r3, [r7, #4]
 8020e32:	1e5a      	subs	r2, r3, #1
 8020e34:	607a      	str	r2, [r7, #4]
 8020e36:	2b00      	cmp	r3, #0
 8020e38:	bf14      	ite	ne
 8020e3a:	2301      	movne	r3, #1
 8020e3c:	2300      	moveq	r3, #0
 8020e3e:	b2db      	uxtb	r3, r3
 8020e40:	2b00      	cmp	r3, #0
 8020e42:	d001      	beq.n	8020e48 <_Z13bhy2_delay_usmPv+0x3c>
      __NOP();
 8020e44:	bf00      	nop
    while( us-- ) {
 8020e46:	e7f3      	b.n	8020e30 <_Z13bhy2_delay_usmPv+0x24>
  }
 8020e48:	bf00      	nop
 8020e4a:	3708      	adds	r7, #8
 8020e4c:	46bd      	mov	sp, r7
 8020e4e:	bd80      	pop	{r7, pc}
 8020e50:	10624dd3 	.word	0x10624dd3

08020e54 <_ZSt17__size_to_integerj>:

  // Used by fill_n, generate_n, etc. to convert _Size to an integral type:
  inline _GLIBCXX_CONSTEXPR int
  __size_to_integer(int __n) { return __n; }
  inline _GLIBCXX_CONSTEXPR unsigned
  __size_to_integer(unsigned __n) { return __n; }
 8020e54:	b480      	push	{r7}
 8020e56:	b083      	sub	sp, #12
 8020e58:	af00      	add	r7, sp, #0
 8020e5a:	6078      	str	r0, [r7, #4]
 8020e5c:	687b      	ldr	r3, [r7, #4]
 8020e5e:	4618      	mov	r0, r3
 8020e60:	370c      	adds	r7, #12
 8020e62:	46bd      	mov	sp, r7
 8020e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020e68:	4770      	bx	lr

08020e6a <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8020e6a:	b480      	push	{r7}
 8020e6c:	b083      	sub	sp, #12
 8020e6e:	af00      	add	r7, sp, #0
 8020e70:	6078      	str	r0, [r7, #4]
 8020e72:	6039      	str	r1, [r7, #0]
 8020e74:	683b      	ldr	r3, [r7, #0]
 8020e76:	4618      	mov	r0, r3
 8020e78:	370c      	adds	r7, #12
 8020e7a:	46bd      	mov	sp, r7
 8020e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020e80:	4770      	bx	lr

08020e82 <_ZSt16__deque_buf_sizej>:
#define _GLIBCXX_DEQUE_BUF_SIZE 512
#endif

  _GLIBCXX_CONSTEXPR inline size_t
  __deque_buf_size(size_t __size)
  { return (__size < _GLIBCXX_DEQUE_BUF_SIZE
 8020e82:	b480      	push	{r7}
 8020e84:	b083      	sub	sp, #12
 8020e86:	af00      	add	r7, sp, #0
 8020e88:	6078      	str	r0, [r7, #4]
	    ? size_t(_GLIBCXX_DEQUE_BUF_SIZE / __size) : size_t(1)); }
 8020e8a:	687b      	ldr	r3, [r7, #4]
 8020e8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8020e90:	d205      	bcs.n	8020e9e <_ZSt16__deque_buf_sizej+0x1c>
 8020e92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8020e96:	687b      	ldr	r3, [r7, #4]
 8020e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8020e9c:	e000      	b.n	8020ea0 <_ZSt16__deque_buf_sizej+0x1e>
 8020e9e:	2301      	movs	r3, #1
 8020ea0:	4618      	mov	r0, r3
 8020ea2:	370c      	adds	r7, #12
 8020ea4:	46bd      	mov	sp, r7
 8020ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020eaa:	4770      	bx	lr

08020eac <_ZN11QueueSender11MessageMode9SerializeEh>:
		using Type = uint8_t;
		static constexpr Type Sync = 0;
		static constexpr Type Async = 1;
		static constexpr Type Info = 2;

		static uint8_t Serialize(Type mode) {
 8020eac:	b480      	push	{r7}
 8020eae:	b083      	sub	sp, #12
 8020eb0:	af00      	add	r7, sp, #0
 8020eb2:	4603      	mov	r3, r0
 8020eb4:	71fb      	strb	r3, [r7, #7]
			return mode;
 8020eb6:	79fb      	ldrb	r3, [r7, #7]
		}
 8020eb8:	4618      	mov	r0, r3
 8020eba:	370c      	adds	r7, #12
 8020ebc:	46bd      	mov	sp, r7
 8020ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ec2:	4770      	bx	lr

08020ec4 <_ZN11QueueSender11MessageMode11DeserializeEh>:
		static Type Deserialize(uint8_t val) {
 8020ec4:	b480      	push	{r7}
 8020ec6:	b083      	sub	sp, #12
 8020ec8:	af00      	add	r7, sp, #0
 8020eca:	4603      	mov	r3, r0
 8020ecc:	71fb      	strb	r3, [r7, #7]
			return val;
 8020ece:	79fb      	ldrb	r3, [r7, #7]
		}
 8020ed0:	4618      	mov	r0, r3
 8020ed2:	370c      	adds	r7, #12
 8020ed4:	46bd      	mov	sp, r7
 8020ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020eda:	4770      	bx	lr

08020edc <_ZN11QueueSender9ErrorCode9SerializeEh>:
		using Type = uint8_t;
		static constexpr Type Success = 0;
		static constexpr Type Timeout = 1;
		static constexpr Type Unknown = 2;

		static uint8_t Serialize(Type error) {
 8020edc:	b480      	push	{r7}
 8020ede:	b083      	sub	sp, #12
 8020ee0:	af00      	add	r7, sp, #0
 8020ee2:	4603      	mov	r3, r0
 8020ee4:	71fb      	strb	r3, [r7, #7]
			return error;
 8020ee6:	79fb      	ldrb	r3, [r7, #7]
		}
 8020ee8:	4618      	mov	r0, r3
 8020eea:	370c      	adds	r7, #12
 8020eec:	46bd      	mov	sp, r7
 8020eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ef2:	4770      	bx	lr

08020ef4 <_ZN11QueueSender4Info11SerializeToEPPh>:
		uint16_t NumRequests;
		uint16_t NumResponces;

		static constexpr size_t Size = 2 * sizeof(uint16_t);

		void SerializeTo(uint8_t **ptr) {
 8020ef4:	b580      	push	{r7, lr}
 8020ef6:	b082      	sub	sp, #8
 8020ef8:	af00      	add	r7, sp, #0
 8020efa:	6078      	str	r0, [r7, #4]
 8020efc:	6039      	str	r1, [r7, #0]
			assert(ptr);
 8020efe:	683b      	ldr	r3, [r7, #0]
 8020f00:	2b00      	cmp	r3, #0
 8020f02:	d105      	bne.n	8020f10 <_ZN11QueueSender4Info11SerializeToEPPh+0x1c>
 8020f04:	4b13      	ldr	r3, [pc, #76]	; (8020f54 <_ZN11QueueSender4Info11SerializeToEPPh+0x60>)
 8020f06:	4a14      	ldr	r2, [pc, #80]	; (8020f58 <_ZN11QueueSender4Info11SerializeToEPPh+0x64>)
 8020f08:	2163      	movs	r1, #99	; 0x63
 8020f0a:	4814      	ldr	r0, [pc, #80]	; (8020f5c <_ZN11QueueSender4Info11SerializeToEPPh+0x68>)
 8020f0c:	f01b ffd6 	bl	803cebc <__assert_func>
			assert(*ptr);
 8020f10:	683b      	ldr	r3, [r7, #0]
 8020f12:	681b      	ldr	r3, [r3, #0]
 8020f14:	2b00      	cmp	r3, #0
 8020f16:	d105      	bne.n	8020f24 <_ZN11QueueSender4Info11SerializeToEPPh+0x30>
 8020f18:	4b11      	ldr	r3, [pc, #68]	; (8020f60 <_ZN11QueueSender4Info11SerializeToEPPh+0x6c>)
 8020f1a:	4a0f      	ldr	r2, [pc, #60]	; (8020f58 <_ZN11QueueSender4Info11SerializeToEPPh+0x64>)
 8020f1c:	2164      	movs	r1, #100	; 0x64
 8020f1e:	480f      	ldr	r0, [pc, #60]	; (8020f5c <_ZN11QueueSender4Info11SerializeToEPPh+0x68>)
 8020f20:	f01b ffcc 	bl	803cebc <__assert_func>

			*reinterpret_cast<uint16_t*>(*ptr) = NumRequests;
 8020f24:	683b      	ldr	r3, [r7, #0]
 8020f26:	681b      	ldr	r3, [r3, #0]
 8020f28:	687a      	ldr	r2, [r7, #4]
 8020f2a:	8812      	ldrh	r2, [r2, #0]
 8020f2c:	801a      	strh	r2, [r3, #0]
			*ptr += sizeof(uint16_t);
 8020f2e:	683b      	ldr	r3, [r7, #0]
 8020f30:	681b      	ldr	r3, [r3, #0]
 8020f32:	1c9a      	adds	r2, r3, #2
 8020f34:	683b      	ldr	r3, [r7, #0]
 8020f36:	601a      	str	r2, [r3, #0]

			*reinterpret_cast<uint16_t*>(*ptr) = NumResponces;
 8020f38:	683b      	ldr	r3, [r7, #0]
 8020f3a:	681b      	ldr	r3, [r3, #0]
 8020f3c:	687a      	ldr	r2, [r7, #4]
 8020f3e:	8852      	ldrh	r2, [r2, #2]
 8020f40:	801a      	strh	r2, [r3, #0]
			*ptr += sizeof(uint16_t);
 8020f42:	683b      	ldr	r3, [r7, #0]
 8020f44:	681b      	ldr	r3, [r3, #0]
 8020f46:	1c9a      	adds	r2, r3, #2
 8020f48:	683b      	ldr	r3, [r7, #0]
 8020f4a:	601a      	str	r2, [r3, #0]
		}
 8020f4c:	bf00      	nop
 8020f4e:	3708      	adds	r7, #8
 8020f50:	46bd      	mov	sp, r7
 8020f52:	bd80      	pop	{r7, pc}
 8020f54:	0803e0dc 	.word	0x0803e0dc
 8020f58:	0803e0e0 	.word	0x0803e0e0
 8020f5c:	0803e110 	.word	0x0803e110
 8020f60:	0803e12c 	.word	0x0803e12c

08020f64 <_ZNSt5dequeI7RequestSaIS0_EEC1Ev>:

      /**
       *  @brief  Creates a %deque with no elements.
       */
#if __cplusplus >= 201103L
      deque() = default;
 8020f64:	b580      	push	{r7, lr}
 8020f66:	b082      	sub	sp, #8
 8020f68:	af00      	add	r7, sp, #0
 8020f6a:	6078      	str	r0, [r7, #4]
 8020f6c:	687b      	ldr	r3, [r7, #4]
 8020f6e:	4618      	mov	r0, r3
 8020f70:	f001 fc3c 	bl	80227ec <_ZNSt11_Deque_baseI7RequestSaIS0_EEC1Ev>
 8020f74:	687b      	ldr	r3, [r7, #4]
 8020f76:	4618      	mov	r0, r3
 8020f78:	3708      	adds	r7, #8
 8020f7a:	46bd      	mov	sp, r7
 8020f7c:	bd80      	pop	{r7, pc}

08020f7e <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEED1Ev>:
   *  Members not found in @a normal containers are @c container_type,
   *  which is a typedef for the second Sequence parameter, and @c push and
   *  @c pop, which are standard %queue/FIFO operations.
  */
  template<typename _Tp, typename _Sequence = deque<_Tp> >
    class queue
 8020f7e:	b580      	push	{r7, lr}
 8020f80:	b082      	sub	sp, #8
 8020f82:	af00      	add	r7, sp, #0
 8020f84:	6078      	str	r0, [r7, #4]
 8020f86:	687b      	ldr	r3, [r7, #4]
 8020f88:	4618      	mov	r0, r3
 8020f8a:	f001 fca8 	bl	80228de <_ZNSt5dequeI8ResponceSaIS0_EED1Ev>
 8020f8e:	687b      	ldr	r3, [r7, #4]
 8020f90:	4618      	mov	r0, r3
 8020f92:	3708      	adds	r7, #8
 8020f94:	46bd      	mov	sp, r7
 8020f96:	bd80      	pop	{r7, pc}

08020f98 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 8020f98:	b580      	push	{r7, lr}
 8020f9a:	b082      	sub	sp, #8
 8020f9c:	af00      	add	r7, sp, #0
 8020f9e:	6078      	str	r0, [r7, #4]
 8020fa0:	6878      	ldr	r0, [r7, #4]
 8020fa2:	f001 fcd1 	bl	8022948 <_ZNSaIhED1Ev>
 8020fa6:	687b      	ldr	r3, [r7, #4]
 8020fa8:	4618      	mov	r0, r3
 8020faa:	3708      	adds	r7, #8
 8020fac:	46bd      	mov	sp, r7
 8020fae:	bd80      	pop	{r7, pc}

08020fb0 <_ZNSt12_Vector_baseIhSaIhEEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8020fb0:	b580      	push	{r7, lr}
 8020fb2:	b082      	sub	sp, #8
 8020fb4:	af00      	add	r7, sp, #0
 8020fb6:	6078      	str	r0, [r7, #4]
 8020fb8:	687b      	ldr	r3, [r7, #4]
 8020fba:	4618      	mov	r0, r3
 8020fbc:	f001 fcb4 	bl	8022928 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1Ev>
 8020fc0:	687b      	ldr	r3, [r7, #4]
 8020fc2:	4618      	mov	r0, r3
 8020fc4:	3708      	adds	r7, #8
 8020fc6:	46bd      	mov	sp, r7
 8020fc8:	bd80      	pop	{r7, pc}

08020fca <_ZNSt6vectorIhSaIhEEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8020fca:	b580      	push	{r7, lr}
 8020fcc:	b082      	sub	sp, #8
 8020fce:	af00      	add	r7, sp, #0
 8020fd0:	6078      	str	r0, [r7, #4]
 8020fd2:	687b      	ldr	r3, [r7, #4]
 8020fd4:	4618      	mov	r0, r3
 8020fd6:	f7ff ffeb 	bl	8020fb0 <_ZNSt12_Vector_baseIhSaIhEEC1Ev>
 8020fda:	687b      	ldr	r3, [r7, #4]
 8020fdc:	4618      	mov	r0, r3
 8020fde:	3708      	adds	r7, #8
 8020fe0:	46bd      	mov	sp, r7
 8020fe2:	bd80      	pop	{r7, pc}

08020fe4 <_ZN7RequestC1Ev>:
struct Request {
 8020fe4:	b580      	push	{r7, lr}
 8020fe6:	b082      	sub	sp, #8
 8020fe8:	af00      	add	r7, sp, #0
 8020fea:	6078      	str	r0, [r7, #4]
 8020fec:	687b      	ldr	r3, [r7, #4]
 8020fee:	4618      	mov	r0, r3
 8020ff0:	f7ff ffeb 	bl	8020fca <_ZNSt6vectorIhSaIhEEC1Ev>
 8020ff4:	687b      	ldr	r3, [r7, #4]
 8020ff6:	4618      	mov	r0, r3
 8020ff8:	3708      	adds	r7, #8
 8020ffa:	46bd      	mov	sp, r7
 8020ffc:	bd80      	pop	{r7, pc}

08020ffe <_ZN7RequestD1Ev>:
 8020ffe:	b580      	push	{r7, lr}
 8021000:	b082      	sub	sp, #8
 8021002:	af00      	add	r7, sp, #0
 8021004:	6078      	str	r0, [r7, #4]
 8021006:	687b      	ldr	r3, [r7, #4]
 8021008:	4618      	mov	r0, r3
 802100a:	f001 fcc1 	bl	8022990 <_ZNSt6vectorIhSaIhEED1Ev>
 802100e:	687b      	ldr	r3, [r7, #4]
 8021010:	4618      	mov	r0, r3
 8021012:	3708      	adds	r7, #8
 8021014:	46bd      	mov	sp, r7
 8021016:	bd80      	pop	{r7, pc}

08021018 <_ZN11QueueSenderC1EP20__UART_HandleTypeDefj>:
	};

public:
	QueueSender() = default;

	QueueSender(UART_HandleTypeDef *uart, size_t timeoutS) :
 8021018:	b580      	push	{r7, lr}
 802101a:	b084      	sub	sp, #16
 802101c:	af00      	add	r7, sp, #0
 802101e:	60f8      	str	r0, [r7, #12]
 8021020:	60b9      	str	r1, [r7, #8]
 8021022:	607a      	str	r2, [r7, #4]
			UartHandle { uart }, TimeoutS { timeoutS } {
 8021024:	68fb      	ldr	r3, [r7, #12]
 8021026:	4618      	mov	r0, r3
 8021028:	f7ff ff9c 	bl	8020f64 <_ZNSt5dequeI7RequestSaIS0_EEC1Ev>
 802102c:	68fb      	ldr	r3, [r7, #12]
 802102e:	3328      	adds	r3, #40	; 0x28
 8021030:	4618      	mov	r0, r3
 8021032:	f001 fc40 	bl	80228b6 <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEEC1IS3_vEEv>
 8021036:	68fb      	ldr	r3, [r7, #12]
 8021038:	3350      	adds	r3, #80	; 0x50
 802103a:	4618      	mov	r0, r3
 802103c:	f7ff ffd2 	bl	8020fe4 <_ZN7RequestC1Ev>
 8021040:	68fb      	ldr	r3, [r7, #12]
 8021042:	2200      	movs	r2, #0
 8021044:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8021048:	68fb      	ldr	r3, [r7, #12]
 802104a:	2200      	movs	r2, #0
 802104c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8021050:	68fb      	ldr	r3, [r7, #12]
 8021052:	3368      	adds	r3, #104	; 0x68
 8021054:	4618      	mov	r0, r3
 8021056:	f7ff ffb8 	bl	8020fca <_ZNSt6vectorIhSaIhEEC1Ev>
 802105a:	68fb      	ldr	r3, [r7, #12]
 802105c:	68ba      	ldr	r2, [r7, #8]
 802105e:	675a      	str	r2, [r3, #116]	; 0x74
 8021060:	68fb      	ldr	r3, [r7, #12]
 8021062:	687a      	ldr	r2, [r7, #4]
 8021064:	679a      	str	r2, [r3, #120]	; 0x78
		assert(uart != NULL);
 8021066:	68bb      	ldr	r3, [r7, #8]
 8021068:	2b00      	cmp	r3, #0
 802106a:	d105      	bne.n	8021078 <_ZN11QueueSenderC1EP20__UART_HandleTypeDefj+0x60>
 802106c:	4b05      	ldr	r3, [pc, #20]	; (8021084 <_ZN11QueueSenderC1EP20__UART_HandleTypeDefj+0x6c>)
 802106e:	4a06      	ldr	r2, [pc, #24]	; (8021088 <_ZN11QueueSenderC1EP20__UART_HandleTypeDefj+0x70>)
 8021070:	2173      	movs	r1, #115	; 0x73
 8021072:	4806      	ldr	r0, [pc, #24]	; (802108c <_ZN11QueueSenderC1EP20__UART_HandleTypeDefj+0x74>)
 8021074:	f01b ff22 	bl	803cebc <__assert_func>
	}
 8021078:	68fb      	ldr	r3, [r7, #12]
 802107a:	4618      	mov	r0, r3
 802107c:	3710      	adds	r7, #16
 802107e:	46bd      	mov	sp, r7
 8021080:	bd80      	pop	{r7, pc}
 8021082:	bf00      	nop
 8021084:	0803e134 	.word	0x0803e134
 8021088:	0803e144 	.word	0x0803e144
 802108c:	0803e110 	.word	0x0803e110

08021090 <_ZN9__gnu_cxx14__alloc_traitsISaIhEhE15_S_always_equalEv>:
    { return _Base_type::propagate_on_container_move_assignment::value; }

    static constexpr bool _S_propagate_on_swap()
    { return _Base_type::propagate_on_container_swap::value; }

    static constexpr bool _S_always_equal()
 8021090:	b480      	push	{r7}
 8021092:	af00      	add	r7, sp, #0
    { return _Base_type::is_always_equal::value; }
 8021094:	2301      	movs	r3, #1
 8021096:	4618      	mov	r0, r3
 8021098:	46bd      	mov	sp, r7
 802109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802109e:	4770      	bx	lr

080210a0 <_ZN7RequestaSEOS_>:
struct Request {
 80210a0:	b580      	push	{r7, lr}
 80210a2:	b082      	sub	sp, #8
 80210a4:	af00      	add	r7, sp, #0
 80210a6:	6078      	str	r0, [r7, #4]
 80210a8:	6039      	str	r1, [r7, #0]
 80210aa:	687b      	ldr	r3, [r7, #4]
 80210ac:	683a      	ldr	r2, [r7, #0]
 80210ae:	4611      	mov	r1, r2
 80210b0:	4618      	mov	r0, r3
 80210b2:	f001 fcbe 	bl	8022a32 <_ZNSt6vectorIhSaIhEEaSEOS1_>
 80210b6:	683b      	ldr	r3, [r7, #0]
 80210b8:	68da      	ldr	r2, [r3, #12]
 80210ba:	687b      	ldr	r3, [r7, #4]
 80210bc:	60da      	str	r2, [r3, #12]
 80210be:	683b      	ldr	r3, [r7, #0]
 80210c0:	7c1a      	ldrb	r2, [r3, #16]
 80210c2:	687b      	ldr	r3, [r7, #4]
 80210c4:	741a      	strb	r2, [r3, #16]
 80210c6:	683b      	ldr	r3, [r7, #0]
 80210c8:	7c5a      	ldrb	r2, [r3, #17]
 80210ca:	687b      	ldr	r3, [r7, #4]
 80210cc:	745a      	strb	r2, [r3, #17]
 80210ce:	687b      	ldr	r3, [r7, #4]
 80210d0:	4618      	mov	r0, r3
 80210d2:	3708      	adds	r7, #8
 80210d4:	46bd      	mov	sp, r7
 80210d6:	bd80      	pop	{r7, pc}

080210d8 <_ZN8ResponceD1Ev>:
struct Responce {
 80210d8:	b580      	push	{r7, lr}
 80210da:	b082      	sub	sp, #8
 80210dc:	af00      	add	r7, sp, #0
 80210de:	6078      	str	r0, [r7, #4]
 80210e0:	687b      	ldr	r3, [r7, #4]
 80210e2:	4618      	mov	r0, r3
 80210e4:	f001 fc54 	bl	8022990 <_ZNSt6vectorIhSaIhEED1Ev>
 80210e8:	687b      	ldr	r3, [r7, #4]
 80210ea:	4618      	mov	r0, r3
 80210ec:	3708      	adds	r7, #8
 80210ee:	46bd      	mov	sp, r7
 80210f0:	bd80      	pop	{r7, pc}

080210f2 <_ZN11QueueSender10AddRequestEO7Request>:

	void AddRequest(Request &&request) {
 80210f2:	b590      	push	{r4, r7, lr}
 80210f4:	b087      	sub	sp, #28
 80210f6:	af00      	add	r7, sp, #0
 80210f8:	6078      	str	r0, [r7, #4]
 80210fa:	6039      	str	r1, [r7, #0]
		switch (MessageMode::Deserialize(request.MetaInfo)) {
 80210fc:	683b      	ldr	r3, [r7, #0]
 80210fe:	7c1b      	ldrb	r3, [r3, #16]
 8021100:	4618      	mov	r0, r3
 8021102:	f7ff fedf 	bl	8020ec4 <_ZN11QueueSender11MessageMode11DeserializeEh>
 8021106:	4603      	mov	r3, r0
 8021108:	2b02      	cmp	r3, #2
 802110a:	d031      	beq.n	8021170 <_ZN11QueueSender10AddRequestEO7Request+0x7e>
 802110c:	2b02      	cmp	r3, #2
 802110e:	dc45      	bgt.n	802119c <_ZN11QueueSender10AddRequestEO7Request+0xaa>
 8021110:	2b00      	cmp	r3, #0
 8021112:	d00b      	beq.n	802112c <_ZN11QueueSender10AddRequestEO7Request+0x3a>
 8021114:	2b01      	cmp	r3, #1
 8021116:	d141      	bne.n	802119c <_ZN11QueueSender10AddRequestEO7Request+0xaa>
		case MessageMode::Async:
			Requests.emplace_back(std::move(request));
 8021118:	687c      	ldr	r4, [r7, #4]
 802111a:	6838      	ldr	r0, [r7, #0]
 802111c:	f001 fc53 	bl	80229c6 <_ZSt4moveIR7RequestEONSt16remove_referenceIT_E4typeEOS3_>
 8021120:	4603      	mov	r3, r0
 8021122:	4619      	mov	r1, r3
 8021124:	4620      	mov	r0, r4
 8021126:	f001 fc59 	bl	80229dc <_ZNSt5dequeI7RequestSaIS0_EE12emplace_backIJS0_EEEvDpOT_>
			break;
 802112a:	e037      	b.n	802119c <_ZN11QueueSender10AddRequestEO7Request+0xaa>
		case MessageMode::Sync:
			if (!HasPriorityRequest) {
 802112c:	687b      	ldr	r3, [r7, #4]
 802112e:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8021132:	f083 0301 	eor.w	r3, r3, #1
 8021136:	b2db      	uxtb	r3, r3
 8021138:	2b00      	cmp	r3, #0
 802113a:	d02e      	beq.n	802119a <_ZN11QueueSender10AddRequestEO7Request+0xa8>
				PriorityRequest = std::move(request);
 802113c:	687b      	ldr	r3, [r7, #4]
 802113e:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8021142:	6838      	ldr	r0, [r7, #0]
 8021144:	f001 fc3f 	bl	80229c6 <_ZSt4moveIR7RequestEONSt16remove_referenceIT_E4typeEOS3_>
 8021148:	4603      	mov	r3, r0
 802114a:	4619      	mov	r1, r3
 802114c:	4620      	mov	r0, r4
 802114e:	f7ff ffa7 	bl	80210a0 <_ZN7RequestaSEOS_>
				HasPriorityRequest = true;
 8021152:	687b      	ldr	r3, [r7, #4]
 8021154:	2201      	movs	r2, #1
 8021156:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64

				if (Requests.empty()) {
 802115a:	687b      	ldr	r3, [r7, #4]
 802115c:	4618      	mov	r0, r3
 802115e:	f001 fc7d 	bl	8022a5c <_ZNKSt5dequeI7RequestSaIS0_EE5emptyEv>
 8021162:	4603      	mov	r3, r0
 8021164:	2b00      	cmp	r3, #0
 8021166:	d018      	beq.n	802119a <_ZN11QueueSender10AddRequestEO7Request+0xa8>
					ProcessPriorityRequest();
 8021168:	6878      	ldr	r0, [r7, #4]
 802116a:	f000 f899 	bl	80212a0 <_ZN11QueueSender22ProcessPriorityRequestEv>
				}
			}
			break;
 802116e:	e014      	b.n	802119a <_ZN11QueueSender10AddRequestEO7Request+0xa8>

		case MessageMode::Info:
			Responces.emplace(CreateInfoResponce());
 8021170:	687b      	ldr	r3, [r7, #4]
 8021172:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8021176:	f107 0308 	add.w	r3, r7, #8
 802117a:	6879      	ldr	r1, [r7, #4]
 802117c:	4618      	mov	r0, r3
 802117e:	f000 f9d9 	bl	8021534 <_ZNK11QueueSender18CreateInfoResponceEv>
 8021182:	f107 0308 	add.w	r3, r7, #8
 8021186:	4619      	mov	r1, r3
 8021188:	4620      	mov	r0, r4
 802118a:	f001 fc79 	bl	8022a80 <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE7emplaceIJS0_EEEvDpOT_>
 802118e:	f107 0308 	add.w	r3, r7, #8
 8021192:	4618      	mov	r0, r3
 8021194:	f7ff ffa0 	bl	80210d8 <_ZN8ResponceD1Ev>
			break;
 8021198:	e000      	b.n	802119c <_ZN11QueueSender10AddRequestEO7Request+0xaa>
			break;
 802119a:	bf00      	nop
		}
	}
 802119c:	bf00      	nop
 802119e:	371c      	adds	r7, #28
 80211a0:	46bd      	mov	sp, r7
 80211a2:	bd90      	pop	{r4, r7, pc}

080211a4 <_ZNK11QueueSender11HasResponceEv>:

	bool HasResponce() const {
 80211a4:	b580      	push	{r7, lr}
 80211a6:	b082      	sub	sp, #8
 80211a8:	af00      	add	r7, sp, #0
 80211aa:	6078      	str	r0, [r7, #4]
		return !Responces.empty();
 80211ac:	687b      	ldr	r3, [r7, #4]
 80211ae:	3328      	adds	r3, #40	; 0x28
 80211b0:	4618      	mov	r0, r3
 80211b2:	f001 fc77 	bl	8022aa4 <_ZNKSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE5emptyEv>
 80211b6:	4603      	mov	r3, r0
 80211b8:	f083 0301 	eor.w	r3, r3, #1
 80211bc:	b2db      	uxtb	r3, r3
	}
 80211be:	4618      	mov	r0, r3
 80211c0:	3708      	adds	r7, #8
 80211c2:	46bd      	mov	sp, r7
 80211c4:	bd80      	pop	{r7, pc}

080211c6 <_ZNSt12_Vector_baseIhSaIhEEC1EOS1_>:
      _Vector_base(_Vector_base&&) = default;
 80211c6:	b580      	push	{r7, lr}
 80211c8:	b082      	sub	sp, #8
 80211ca:	af00      	add	r7, sp, #0
 80211cc:	6078      	str	r0, [r7, #4]
 80211ce:	6039      	str	r1, [r7, #0]
 80211d0:	687b      	ldr	r3, [r7, #4]
 80211d2:	683a      	ldr	r2, [r7, #0]
 80211d4:	4611      	mov	r1, r2
 80211d6:	4618      	mov	r0, r3
 80211d8:	f001 fc89 	bl	8022aee <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1EOS2_>
 80211dc:	687b      	ldr	r3, [r7, #4]
 80211de:	4618      	mov	r0, r3
 80211e0:	3708      	adds	r7, #8
 80211e2:	46bd      	mov	sp, r7
 80211e4:	bd80      	pop	{r7, pc}

080211e6 <_ZNSt6vectorIhSaIhEEC1EOS1_>:
       *  The newly-created %vector contains the exact contents of the
       *  moved instance.
       *  The contents of the moved instance are a valid, but unspecified
       *  %vector.
       */
      vector(vector&&) noexcept = default;
 80211e6:	b580      	push	{r7, lr}
 80211e8:	b082      	sub	sp, #8
 80211ea:	af00      	add	r7, sp, #0
 80211ec:	6078      	str	r0, [r7, #4]
 80211ee:	6039      	str	r1, [r7, #0]
 80211f0:	687b      	ldr	r3, [r7, #4]
 80211f2:	683a      	ldr	r2, [r7, #0]
 80211f4:	4611      	mov	r1, r2
 80211f6:	4618      	mov	r0, r3
 80211f8:	f7ff ffe5 	bl	80211c6 <_ZNSt12_Vector_baseIhSaIhEEC1EOS1_>
 80211fc:	687b      	ldr	r3, [r7, #4]
 80211fe:	4618      	mov	r0, r3
 8021200:	3708      	adds	r7, #8
 8021202:	46bd      	mov	sp, r7
 8021204:	bd80      	pop	{r7, pc}

08021206 <_ZN8ResponceC1EOS_>:
struct Responce {
 8021206:	b580      	push	{r7, lr}
 8021208:	b082      	sub	sp, #8
 802120a:	af00      	add	r7, sp, #0
 802120c:	6078      	str	r0, [r7, #4]
 802120e:	6039      	str	r1, [r7, #0]
 8021210:	687b      	ldr	r3, [r7, #4]
 8021212:	683a      	ldr	r2, [r7, #0]
 8021214:	4611      	mov	r1, r2
 8021216:	4618      	mov	r0, r3
 8021218:	f7ff ffe5 	bl	80211e6 <_ZNSt6vectorIhSaIhEEC1EOS1_>
 802121c:	683b      	ldr	r3, [r7, #0]
 802121e:	7b1a      	ldrb	r2, [r3, #12]
 8021220:	687b      	ldr	r3, [r7, #4]
 8021222:	731a      	strb	r2, [r3, #12]
 8021224:	683b      	ldr	r3, [r7, #0]
 8021226:	7b5a      	ldrb	r2, [r3, #13]
 8021228:	687b      	ldr	r3, [r7, #4]
 802122a:	735a      	strb	r2, [r3, #13]
 802122c:	683b      	ldr	r3, [r7, #0]
 802122e:	7b9a      	ldrb	r2, [r3, #14]
 8021230:	687b      	ldr	r3, [r7, #4]
 8021232:	739a      	strb	r2, [r3, #14]
 8021234:	687b      	ldr	r3, [r7, #4]
 8021236:	4618      	mov	r0, r3
 8021238:	3708      	adds	r7, #8
 802123a:	46bd      	mov	sp, r7
 802123c:	bd80      	pop	{r7, pc}
	...

08021240 <_ZN11QueueSender11GetResponceEv>:

	Responce GetResponce() {
 8021240:	b580      	push	{r7, lr}
 8021242:	b082      	sub	sp, #8
 8021244:	af00      	add	r7, sp, #0
 8021246:	6078      	str	r0, [r7, #4]
 8021248:	6039      	str	r1, [r7, #0]
		assert(HasResponce());
 802124a:	6838      	ldr	r0, [r7, #0]
 802124c:	f7ff ffaa 	bl	80211a4 <_ZNK11QueueSender11HasResponceEv>
 8021250:	4603      	mov	r3, r0
 8021252:	2b00      	cmp	r3, #0
 8021254:	d105      	bne.n	8021262 <_ZN11QueueSender11GetResponceEv+0x22>
 8021256:	4b0f      	ldr	r3, [pc, #60]	; (8021294 <_ZN11QueueSender11GetResponceEv+0x54>)
 8021258:	4a0f      	ldr	r2, [pc, #60]	; (8021298 <_ZN11QueueSender11GetResponceEv+0x58>)
 802125a:	2191      	movs	r1, #145	; 0x91
 802125c:	480f      	ldr	r0, [pc, #60]	; (802129c <_ZN11QueueSender11GetResponceEv+0x5c>)
 802125e:	f01b fe2d 	bl	803cebc <__assert_func>
		auto responce = std::move(Responces.front());
 8021262:	683b      	ldr	r3, [r7, #0]
 8021264:	3328      	adds	r3, #40	; 0x28
 8021266:	4618      	mov	r0, r3
 8021268:	f001 fc29 	bl	8022abe <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE5frontEv>
 802126c:	4603      	mov	r3, r0
 802126e:	4618      	mov	r0, r3
 8021270:	f001 fc32 	bl	8022ad8 <_ZSt4moveIR8ResponceEONSt16remove_referenceIT_E4typeEOS3_>
 8021274:	4603      	mov	r3, r0
 8021276:	4619      	mov	r1, r3
 8021278:	6878      	ldr	r0, [r7, #4]
 802127a:	f7ff ffc4 	bl	8021206 <_ZN8ResponceC1EOS_>
		Responces.pop();
 802127e:	683b      	ldr	r3, [r7, #0]
 8021280:	3328      	adds	r3, #40	; 0x28
 8021282:	4618      	mov	r0, r3
 8021284:	f001 fc4e 	bl	8022b24 <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE3popEv>
		return responce;
 8021288:	bf00      	nop
	}
 802128a:	6878      	ldr	r0, [r7, #4]
 802128c:	3708      	adds	r7, #8
 802128e:	46bd      	mov	sp, r7
 8021290:	bd80      	pop	{r7, pc}
 8021292:	bf00      	nop
 8021294:	0803e17c 	.word	0x0803e17c
 8021298:	0803e18c 	.word	0x0803e18c
 802129c:	0803e110 	.word	0x0803e110

080212a0 <_ZN11QueueSender22ProcessPriorityRequestEv>:

	void ProcessPriorityRequest() {
 80212a0:	b5b0      	push	{r4, r5, r7, lr}
 80212a2:	b08c      	sub	sp, #48	; 0x30
 80212a4:	af02      	add	r7, sp, #8
 80212a6:	6078      	str	r0, [r7, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80212a8:	b672      	cpsid	i
}
 80212aa:	bf00      	nop
		__disable_irq();
		if (HasPriorityRequest && !WaitResponce) {
 80212ac:	687b      	ldr	r3, [r7, #4]
 80212ae:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80212b2:	2b00      	cmp	r3, #0
 80212b4:	f000 8086 	beq.w	80213c4 <_ZN11QueueSender22ProcessPriorityRequestEv+0x124>
 80212b8:	687b      	ldr	r3, [r7, #4]
 80212ba:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 80212be:	f083 0301 	eor.w	r3, r3, #1
 80212c2:	b2db      	uxtb	r3, r3
 80212c4:	2b00      	cmp	r3, #0
 80212c6:	d07d      	beq.n	80213c4 <_ZN11QueueSender22ProcessPriorityRequestEv+0x124>
			HasPriorityRequest = false;
 80212c8:	687b      	ldr	r3, [r7, #4]
 80212ca:	2200      	movs	r2, #0
 80212cc:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
			WaitResponce = true;
 80212d0:	687b      	ldr	r3, [r7, #4]
 80212d2:	2201      	movs	r2, #1
 80212d4:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
  __ASM volatile ("cpsie i" : : : "memory");
 80212d8:	b662      	cpsie	i
}
 80212da:	bf00      	nop
			__enable_irq();

			auto &request = PriorityRequest;
 80212dc:	687b      	ldr	r3, [r7, #4]
 80212de:	3350      	adds	r3, #80	; 0x50
 80212e0:	623b      	str	r3, [r7, #32]
			auto &data = request.Data;
 80212e2:	6a3b      	ldr	r3, [r7, #32]
 80212e4:	61fb      	str	r3, [r7, #28]

			assert(
 80212e6:	6a3b      	ldr	r3, [r7, #32]
 80212e8:	7c1b      	ldrb	r3, [r3, #16]
 80212ea:	4618      	mov	r0, r3
 80212ec:	f7ff fdea 	bl	8020ec4 <_ZN11QueueSender11MessageMode11DeserializeEh>
 80212f0:	4603      	mov	r3, r0
 80212f2:	2b00      	cmp	r3, #0
 80212f4:	d005      	beq.n	8021302 <_ZN11QueueSender22ProcessPriorityRequestEv+0x62>
 80212f6:	4b36      	ldr	r3, [pc, #216]	; (80213d0 <_ZN11QueueSender22ProcessPriorityRequestEv+0x130>)
 80212f8:	4a36      	ldr	r2, [pc, #216]	; (80213d4 <_ZN11QueueSender22ProcessPriorityRequestEv+0x134>)
 80212fa:	21a1      	movs	r1, #161	; 0xa1
 80212fc:	4836      	ldr	r0, [pc, #216]	; (80213d8 <_ZN11QueueSender22ProcessPriorityRequestEv+0x138>)
 80212fe:	f01b fddd 	bl	803cebc <__assert_func>
					MessageMode::Deserialize(request.MetaInfo)
							== MessageMode::Sync);

			CurrentResponceBuffer.resize(request.ResponceSize);
 8021302:	687b      	ldr	r3, [r7, #4]
 8021304:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8021308:	6a3b      	ldr	r3, [r7, #32]
 802130a:	68db      	ldr	r3, [r3, #12]
 802130c:	4619      	mov	r1, r3
 802130e:	4610      	mov	r0, r2
 8021310:	f001 fc14 	bl	8022b3c <_ZNSt6vectorIhSaIhEE6resizeEj>
			HAL_UART_Transmit(UartHandle, data.data(), data.size(), TimeoutS);
 8021314:	687b      	ldr	r3, [r7, #4]
 8021316:	6f5c      	ldr	r4, [r3, #116]	; 0x74
 8021318:	69f8      	ldr	r0, [r7, #28]
 802131a:	f001 fc43 	bl	8022ba4 <_ZNSt6vectorIhSaIhEE4dataEv>
 802131e:	4605      	mov	r5, r0
 8021320:	69f8      	ldr	r0, [r7, #28]
 8021322:	f001 fc4e 	bl	8022bc2 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8021326:	4603      	mov	r3, r0
 8021328:	b29a      	uxth	r2, r3
 802132a:	687b      	ldr	r3, [r7, #4]
 802132c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 802132e:	4629      	mov	r1, r5
 8021330:	4620      	mov	r0, r4
 8021332:	f015 f877 	bl	8036424 <HAL_UART_Transmit>

			HAL_StatusTypeDef ret = HAL_UART_Receive(UartHandle,
 8021336:	687b      	ldr	r3, [r7, #4]
 8021338:	6f5c      	ldr	r4, [r3, #116]	; 0x74
 802133a:	687b      	ldr	r3, [r7, #4]
 802133c:	3368      	adds	r3, #104	; 0x68
 802133e:	4618      	mov	r0, r3
 8021340:	f001 fc30 	bl	8022ba4 <_ZNSt6vectorIhSaIhEE4dataEv>
 8021344:	4605      	mov	r5, r0
					CurrentResponceBuffer.data(), CurrentResponceBuffer.size(),
 8021346:	687b      	ldr	r3, [r7, #4]
 8021348:	3368      	adds	r3, #104	; 0x68
 802134a:	4618      	mov	r0, r3
 802134c:	f001 fc39 	bl	8022bc2 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8021350:	4603      	mov	r3, r0
			HAL_StatusTypeDef ret = HAL_UART_Receive(UartHandle,
 8021352:	b29a      	uxth	r2, r3
					TimeoutS);
 8021354:	687b      	ldr	r3, [r7, #4]
 8021356:	6f9b      	ldr	r3, [r3, #120]	; 0x78
			HAL_StatusTypeDef ret = HAL_UART_Receive(UartHandle,
 8021358:	4629      	mov	r1, r5
 802135a:	4620      	mov	r0, r4
 802135c:	f015 f8f8 	bl	8036550 <HAL_UART_Receive>
 8021360:	4603      	mov	r3, r0
 8021362:	76fb      	strb	r3, [r7, #27]

			ErrorCode::Type error;

			if (ret == HAL_OK)
 8021364:	7efb      	ldrb	r3, [r7, #27]
 8021366:	2b00      	cmp	r3, #0
 8021368:	d103      	bne.n	8021372 <_ZN11QueueSender22ProcessPriorityRequestEv+0xd2>
				error = ErrorCode::Success;
 802136a:	2300      	movs	r3, #0
 802136c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8021370:	e009      	b.n	8021386 <_ZN11QueueSender22ProcessPriorityRequestEv+0xe6>
			else if (ret == HAL_TIMEOUT)
 8021372:	7efb      	ldrb	r3, [r7, #27]
 8021374:	2b03      	cmp	r3, #3
 8021376:	d103      	bne.n	8021380 <_ZN11QueueSender22ProcessPriorityRequestEv+0xe0>
				error = ErrorCode::Timeout;
 8021378:	2301      	movs	r3, #1
 802137a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 802137e:	e002      	b.n	8021386 <_ZN11QueueSender22ProcessPriorityRequestEv+0xe6>
			else
				error = ErrorCode::Unknown;
 8021380:	2302      	movs	r3, #2
 8021382:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			Responces.emplace(
 8021386:	687b      	ldr	r3, [r7, #4]
 8021388:	f103 0428 	add.w	r4, r3, #40	; 0x28
					CreateResponce(CurrentResponceBuffer, MessageMode::Sync,
 802138c:	687b      	ldr	r3, [r7, #4]
 802138e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8021392:	f107 0008 	add.w	r0, r7, #8
 8021396:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802139a:	9300      	str	r3, [sp, #0]
 802139c:	2300      	movs	r3, #0
 802139e:	6879      	ldr	r1, [r7, #4]
 80213a0:	f000 f8a1 	bl	80214e6 <_ZNK11QueueSender14CreateResponceERKSt6vectorIhSaIhEEhh>
			Responces.emplace(
 80213a4:	f107 0308 	add.w	r3, r7, #8
 80213a8:	4619      	mov	r1, r3
 80213aa:	4620      	mov	r0, r4
 80213ac:	f001 fb68 	bl	8022a80 <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE7emplaceIJS0_EEEvDpOT_>
					CreateResponce(CurrentResponceBuffer, MessageMode::Sync,
 80213b0:	f107 0308 	add.w	r3, r7, #8
 80213b4:	4618      	mov	r0, r3
 80213b6:	f7ff fe8f 	bl	80210d8 <_ZN8ResponceD1Ev>
							error));

			WaitResponce = false;
 80213ba:	687b      	ldr	r3, [r7, #4]
 80213bc:	2200      	movs	r2, #0
 80213be:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 80213c2:	e001      	b.n	80213c8 <_ZN11QueueSender22ProcessPriorityRequestEv+0x128>
  __ASM volatile ("cpsie i" : : : "memory");
 80213c4:	b662      	cpsie	i
}
 80213c6:	bf00      	nop
		} else {
			__enable_irq();
		}
	}
 80213c8:	bf00      	nop
 80213ca:	3728      	adds	r7, #40	; 0x28
 80213cc:	46bd      	mov	sp, r7
 80213ce:	bdb0      	pop	{r4, r5, r7, pc}
 80213d0:	0803e1b0 	.word	0x0803e1b0
 80213d4:	0803e1f0 	.word	0x0803e1f0
 80213d8:	0803e110 	.word	0x0803e110

080213dc <_ZN11QueueSender15ProcessRequestsEv>:

	void ProcessRequests() {
 80213dc:	b5b0      	push	{r4, r5, r7, lr}
 80213de:	b084      	sub	sp, #16
 80213e0:	af00      	add	r7, sp, #0
 80213e2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 80213e4:	b672      	cpsid	i
}
 80213e6:	bf00      	nop
		__disable_irq();
		if (!Requests.empty() && !WaitResponce) {
 80213e8:	687b      	ldr	r3, [r7, #4]
 80213ea:	4618      	mov	r0, r3
 80213ec:	f001 fb36 	bl	8022a5c <_ZNKSt5dequeI7RequestSaIS0_EE5emptyEv>
 80213f0:	4603      	mov	r3, r0
 80213f2:	f083 0301 	eor.w	r3, r3, #1
 80213f6:	b2db      	uxtb	r3, r3
 80213f8:	2b00      	cmp	r3, #0
 80213fa:	d009      	beq.n	8021410 <_ZN11QueueSender15ProcessRequestsEv+0x34>
 80213fc:	687b      	ldr	r3, [r7, #4]
 80213fe:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 8021402:	f083 0301 	eor.w	r3, r3, #1
 8021406:	b2db      	uxtb	r3, r3
 8021408:	2b00      	cmp	r3, #0
 802140a:	d001      	beq.n	8021410 <_ZN11QueueSender15ProcessRequestsEv+0x34>
 802140c:	2301      	movs	r3, #1
 802140e:	e000      	b.n	8021412 <_ZN11QueueSender15ProcessRequestsEv+0x36>
 8021410:	2300      	movs	r3, #0
 8021412:	2b00      	cmp	r3, #0
 8021414:	d04d      	beq.n	80214b2 <_ZN11QueueSender15ProcessRequestsEv+0xd6>
			WaitResponce = true;
 8021416:	687b      	ldr	r3, [r7, #4]
 8021418:	2201      	movs	r2, #1
 802141a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
  __ASM volatile ("cpsie i" : : : "memory");
 802141e:	b662      	cpsie	i
}
 8021420:	bf00      	nop
			__enable_irq();

			auto &request = Requests.front();
 8021422:	687b      	ldr	r3, [r7, #4]
 8021424:	4618      	mov	r0, r3
 8021426:	f001 fbdb 	bl	8022be0 <_ZNSt5dequeI7RequestSaIS0_EE5frontEv>
 802142a:	60f8      	str	r0, [r7, #12]
			auto &data = request.Data;
 802142c:	68fb      	ldr	r3, [r7, #12]
 802142e:	60bb      	str	r3, [r7, #8]

			assert(
 8021430:	68fb      	ldr	r3, [r7, #12]
 8021432:	7c1b      	ldrb	r3, [r3, #16]
 8021434:	4618      	mov	r0, r3
 8021436:	f7ff fd45 	bl	8020ec4 <_ZN11QueueSender11MessageMode11DeserializeEh>
 802143a:	4603      	mov	r3, r0
 802143c:	2b01      	cmp	r3, #1
 802143e:	d005      	beq.n	802144c <_ZN11QueueSender15ProcessRequestsEv+0x70>
 8021440:	4b1f      	ldr	r3, [pc, #124]	; (80214c0 <_ZN11QueueSender15ProcessRequestsEv+0xe4>)
 8021442:	4a20      	ldr	r2, [pc, #128]	; (80214c4 <_ZN11QueueSender15ProcessRequestsEv+0xe8>)
 8021444:	21c8      	movs	r1, #200	; 0xc8
 8021446:	4820      	ldr	r0, [pc, #128]	; (80214c8 <_ZN11QueueSender15ProcessRequestsEv+0xec>)
 8021448:	f01b fd38 	bl	803cebc <__assert_func>
					MessageMode::Deserialize(request.MetaInfo)
							== MessageMode::Async);

			CurrentResponceBuffer.resize(request.ResponceSize);
 802144c:	687b      	ldr	r3, [r7, #4]
 802144e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8021452:	68fb      	ldr	r3, [r7, #12]
 8021454:	68db      	ldr	r3, [r3, #12]
 8021456:	4619      	mov	r1, r3
 8021458:	4610      	mov	r0, r2
 802145a:	f001 fb6f 	bl	8022b3c <_ZNSt6vectorIhSaIhEE6resizeEj>

			HAL_UART_Receive_IT(UartHandle, CurrentResponceBuffer.data(),
 802145e:	687b      	ldr	r3, [r7, #4]
 8021460:	6f5c      	ldr	r4, [r3, #116]	; 0x74
 8021462:	687b      	ldr	r3, [r7, #4]
 8021464:	3368      	adds	r3, #104	; 0x68
 8021466:	4618      	mov	r0, r3
 8021468:	f001 fb9c 	bl	8022ba4 <_ZNSt6vectorIhSaIhEE4dataEv>
 802146c:	4605      	mov	r5, r0
					CurrentResponceBuffer.size());
 802146e:	687b      	ldr	r3, [r7, #4]
 8021470:	3368      	adds	r3, #104	; 0x68
 8021472:	4618      	mov	r0, r3
 8021474:	f001 fba5 	bl	8022bc2 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8021478:	4603      	mov	r3, r0
			HAL_UART_Receive_IT(UartHandle, CurrentResponceBuffer.data(),
 802147a:	b29b      	uxth	r3, r3
 802147c:	461a      	mov	r2, r3
 802147e:	4629      	mov	r1, r5
 8021480:	4620      	mov	r0, r4
 8021482:	f015 f939 	bl	80366f8 <HAL_UART_Receive_IT>
			HAL_UART_Transmit(UartHandle, data.data(), data.size(), TimeoutS);
 8021486:	687b      	ldr	r3, [r7, #4]
 8021488:	6f5c      	ldr	r4, [r3, #116]	; 0x74
 802148a:	68b8      	ldr	r0, [r7, #8]
 802148c:	f001 fb8a 	bl	8022ba4 <_ZNSt6vectorIhSaIhEE4dataEv>
 8021490:	4605      	mov	r5, r0
 8021492:	68b8      	ldr	r0, [r7, #8]
 8021494:	f001 fb95 	bl	8022bc2 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8021498:	4603      	mov	r3, r0
 802149a:	b29a      	uxth	r2, r3
 802149c:	687b      	ldr	r3, [r7, #4]
 802149e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80214a0:	4629      	mov	r1, r5
 80214a2:	4620      	mov	r0, r4
 80214a4:	f014 ffbe 	bl	8036424 <HAL_UART_Transmit>

			Requests.pop_front();
 80214a8:	687b      	ldr	r3, [r7, #4]
 80214aa:	4618      	mov	r0, r3
 80214ac:	f001 fbac 	bl	8022c08 <_ZNSt5dequeI7RequestSaIS0_EE9pop_frontEv>
		} else {
			__enable_irq();
		}
	}
 80214b0:	e001      	b.n	80214b6 <_ZN11QueueSender15ProcessRequestsEv+0xda>
  __ASM volatile ("cpsie i" : : : "memory");
 80214b2:	b662      	cpsie	i
}
 80214b4:	bf00      	nop
 80214b6:	bf00      	nop
 80214b8:	3710      	adds	r7, #16
 80214ba:	46bd      	mov	sp, r7
 80214bc:	bdb0      	pop	{r4, r5, r7, pc}
 80214be:	bf00      	nop
 80214c0:	0803e21c 	.word	0x0803e21c
 80214c4:	0803e260 	.word	0x0803e260
 80214c8:	0803e110 	.word	0x0803e110

080214cc <_ZN8ResponceC1Ev>:
struct Responce {
 80214cc:	b580      	push	{r7, lr}
 80214ce:	b082      	sub	sp, #8
 80214d0:	af00      	add	r7, sp, #0
 80214d2:	6078      	str	r0, [r7, #4]
 80214d4:	687b      	ldr	r3, [r7, #4]
 80214d6:	4618      	mov	r0, r3
 80214d8:	f7ff fd77 	bl	8020fca <_ZNSt6vectorIhSaIhEEC1Ev>
 80214dc:	687b      	ldr	r3, [r7, #4]
 80214de:	4618      	mov	r0, r3
 80214e0:	3708      	adds	r7, #8
 80214e2:	46bd      	mov	sp, r7
 80214e4:	bd80      	pop	{r7, pc}

080214e6 <_ZNK11QueueSender14CreateResponceERKSt6vectorIhSaIhEEhh>:

	Responce CreateResponce(const std::vector<uint8_t> &data,
 80214e6:	b580      	push	{r7, lr}
 80214e8:	b084      	sub	sp, #16
 80214ea:	af00      	add	r7, sp, #0
 80214ec:	60f8      	str	r0, [r7, #12]
 80214ee:	60b9      	str	r1, [r7, #8]
 80214f0:	607a      	str	r2, [r7, #4]
 80214f2:	70fb      	strb	r3, [r7, #3]
			MessageMode::Type messageMode, ErrorCode::Type error) const {
		Responce responce;
 80214f4:	68f8      	ldr	r0, [r7, #12]
 80214f6:	f7ff ffe9 	bl	80214cc <_ZN8ResponceC1Ev>
		responce.Data = data;
 80214fa:	68fb      	ldr	r3, [r7, #12]
 80214fc:	6879      	ldr	r1, [r7, #4]
 80214fe:	4618      	mov	r0, r3
 8021500:	f001 fbae 	bl	8022c60 <_ZNSt6vectorIhSaIhEEaSERKS1_>
		responce.PeripheryID = Periphery::Body;
 8021504:	68fb      	ldr	r3, [r7, #12]
 8021506:	2200      	movs	r2, #0
 8021508:	731a      	strb	r2, [r3, #12]
		responce.Error = ErrorCode::Serialize(error);
 802150a:	7e3b      	ldrb	r3, [r7, #24]
 802150c:	4618      	mov	r0, r3
 802150e:	f7ff fce5 	bl	8020edc <_ZN11QueueSender9ErrorCode9SerializeEh>
 8021512:	4603      	mov	r3, r0
 8021514:	461a      	mov	r2, r3
 8021516:	68fb      	ldr	r3, [r7, #12]
 8021518:	739a      	strb	r2, [r3, #14]
		responce.MetaInfo = MessageMode::Serialize(messageMode);
 802151a:	78fb      	ldrb	r3, [r7, #3]
 802151c:	4618      	mov	r0, r3
 802151e:	f7ff fcc5 	bl	8020eac <_ZN11QueueSender11MessageMode9SerializeEh>
 8021522:	4603      	mov	r3, r0
 8021524:	461a      	mov	r2, r3
 8021526:	68fb      	ldr	r3, [r7, #12]
 8021528:	735a      	strb	r2, [r3, #13]
		return responce;
 802152a:	bf00      	nop
	}
 802152c:	68f8      	ldr	r0, [r7, #12]
 802152e:	3710      	adds	r7, #16
 8021530:	46bd      	mov	sp, r7
 8021532:	bd80      	pop	{r7, pc}

08021534 <_ZNK11QueueSender18CreateInfoResponceEv>:

	Responce CreateInfoResponce() const {
 8021534:	b580      	push	{r7, lr}
 8021536:	b08a      	sub	sp, #40	; 0x28
 8021538:	af02      	add	r7, sp, #8
 802153a:	6078      	str	r0, [r7, #4]
 802153c:	6039      	str	r1, [r7, #0]
		std::vector<uint8_t> data;
 802153e:	f107 0310 	add.w	r3, r7, #16
 8021542:	4618      	mov	r0, r3
 8021544:	f7ff fd41 	bl	8020fca <_ZNSt6vectorIhSaIhEEC1Ev>
		data.resize(Info::Size);
 8021548:	f107 0310 	add.w	r3, r7, #16
 802154c:	2104      	movs	r1, #4
 802154e:	4618      	mov	r0, r3
 8021550:	f001 faf4 	bl	8022b3c <_ZNSt6vectorIhSaIhEE6resizeEj>

		uint8_t *ptr = data.data();
 8021554:	f107 0310 	add.w	r3, r7, #16
 8021558:	4618      	mov	r0, r3
 802155a:	f001 fb23 	bl	8022ba4 <_ZNSt6vectorIhSaIhEE4dataEv>
 802155e:	4603      	mov	r3, r0
 8021560:	60fb      	str	r3, [r7, #12]
		GetInfo().SerializeTo(&ptr);
 8021562:	6838      	ldr	r0, [r7, #0]
 8021564:	f000 f82b 	bl	80215be <_ZNK11QueueSender7GetInfoEv>
 8021568:	4603      	mov	r3, r0
 802156a:	61fb      	str	r3, [r7, #28]
 802156c:	f107 020c 	add.w	r2, r7, #12
 8021570:	f107 031c 	add.w	r3, r7, #28
 8021574:	4611      	mov	r1, r2
 8021576:	4618      	mov	r0, r3
 8021578:	f7ff fcbc 	bl	8020ef4 <_ZN11QueueSender4Info11SerializeToEPPh>

		return CreateResponce(data, MessageMode::Info, ErrorCode::Success);
 802157c:	6878      	ldr	r0, [r7, #4]
 802157e:	f107 0210 	add.w	r2, r7, #16
 8021582:	2300      	movs	r3, #0
 8021584:	9300      	str	r3, [sp, #0]
 8021586:	2302      	movs	r3, #2
 8021588:	6839      	ldr	r1, [r7, #0]
 802158a:	f7ff ffac 	bl	80214e6 <_ZNK11QueueSender14CreateResponceERKSt6vectorIhSaIhEEhh>
		std::vector<uint8_t> data;
 802158e:	f107 0310 	add.w	r3, r7, #16
 8021592:	4618      	mov	r0, r3
 8021594:	f001 f9fc 	bl	8022990 <_ZNSt6vectorIhSaIhEED1Ev>
		return CreateResponce(data, MessageMode::Info, ErrorCode::Success);
 8021598:	bf00      	nop
	}
 802159a:	6878      	ldr	r0, [r7, #4]
 802159c:	3720      	adds	r7, #32
 802159e:	46bd      	mov	sp, r7
 80215a0:	bd80      	pop	{r7, pc}

080215a2 <_ZN11QueueSender16ProcessResponcesEv>:

	void ProcessResponces() {
 80215a2:	b480      	push	{r7}
 80215a4:	b083      	sub	sp, #12
 80215a6:	af00      	add	r7, sp, #0
 80215a8:	6078      	str	r0, [r7, #4]
		WaitResponce = false;
 80215aa:	687b      	ldr	r3, [r7, #4]
 80215ac:	2200      	movs	r2, #0
 80215ae:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	}
 80215b2:	bf00      	nop
 80215b4:	370c      	adds	r7, #12
 80215b6:	46bd      	mov	sp, r7
 80215b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80215bc:	4770      	bx	lr

080215be <_ZNK11QueueSender7GetInfoEv>:

	Info GetInfo() const {
 80215be:	b580      	push	{r7, lr}
 80215c0:	b084      	sub	sp, #16
 80215c2:	af00      	add	r7, sp, #0
 80215c4:	6078      	str	r0, [r7, #4]
		return {Requests.size(), Responces.size()};
 80215c6:	687b      	ldr	r3, [r7, #4]
 80215c8:	4618      	mov	r0, r3
 80215ca:	f001 fc38 	bl	8022e3e <_ZNKSt5dequeI7RequestSaIS0_EE4sizeEv>
 80215ce:	4603      	mov	r3, r0
 80215d0:	b29b      	uxth	r3, r3
 80215d2:	81bb      	strh	r3, [r7, #12]
 80215d4:	687b      	ldr	r3, [r7, #4]
 80215d6:	3328      	adds	r3, #40	; 0x28
 80215d8:	4618      	mov	r0, r3
 80215da:	f001 fc42 	bl	8022e62 <_ZNKSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE4sizeEv>
 80215de:	4603      	mov	r3, r0
 80215e0:	b29b      	uxth	r3, r3
 80215e2:	81fb      	strh	r3, [r7, #14]
 80215e4:	2300      	movs	r3, #0
 80215e6:	89ba      	ldrh	r2, [r7, #12]
 80215e8:	f362 030f 	bfi	r3, r2, #0, #16
 80215ec:	89fa      	ldrh	r2, [r7, #14]
 80215ee:	f362 431f 	bfi	r3, r2, #16, #16
	}
 80215f2:	4618      	mov	r0, r3
 80215f4:	3710      	adds	r7, #16
 80215f6:	46bd      	mov	sp, r7
 80215f8:	bd80      	pop	{r7, pc}

080215fa <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEED1Ev>:
 80215fa:	b580      	push	{r7, lr}
 80215fc:	b082      	sub	sp, #8
 80215fe:	af00      	add	r7, sp, #0
 8021600:	6078      	str	r0, [r7, #4]
 8021602:	687b      	ldr	r3, [r7, #4]
 8021604:	4618      	mov	r0, r3
 8021606:	f001 f924 	bl	8022852 <_ZNSt5dequeI7RequestSaIS0_EED1Ev>
 802160a:	687b      	ldr	r3, [r7, #4]
 802160c:	4618      	mov	r0, r3
 802160e:	3708      	adds	r7, #8
 8021610:	46bd      	mov	sp, r7
 8021612:	bd80      	pop	{r7, pc}

08021614 <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj>:

	bool TransmitComplete = true;

	HeadInterface() = default;

	HeadInterface(UART_HandleTypeDef *uart, size_t timeoutS) :
 8021614:	b580      	push	{r7, lr}
 8021616:	b084      	sub	sp, #16
 8021618:	af00      	add	r7, sp, #0
 802161a:	60f8      	str	r0, [r7, #12]
 802161c:	60b9      	str	r1, [r7, #8]
 802161e:	607a      	str	r2, [r7, #4]
			UartHandle { uart }, TimeoutS { timeoutS } {
 8021620:	68fb      	ldr	r3, [r7, #12]
 8021622:	4618      	mov	r0, r3
 8021624:	f001 fc2a 	bl	8022e7c <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEEC1IS3_vEEv>
 8021628:	68fb      	ldr	r3, [r7, #12]
 802162a:	3334      	adds	r3, #52	; 0x34
 802162c:	4618      	mov	r0, r3
 802162e:	f7ff fcd9 	bl	8020fe4 <_ZN7RequestC1Ev>
 8021632:	68fb      	ldr	r3, [r7, #12]
 8021634:	3348      	adds	r3, #72	; 0x48
 8021636:	4618      	mov	r0, r3
 8021638:	f7ff fcc7 	bl	8020fca <_ZNSt6vectorIhSaIhEEC1Ev>
 802163c:	68fb      	ldr	r3, [r7, #12]
 802163e:	68ba      	ldr	r2, [r7, #8]
 8021640:	655a      	str	r2, [r3, #84]	; 0x54
 8021642:	68fb      	ldr	r3, [r7, #12]
 8021644:	687a      	ldr	r2, [r7, #4]
 8021646:	659a      	str	r2, [r3, #88]	; 0x58
 8021648:	68fb      	ldr	r3, [r7, #12]
 802164a:	2201      	movs	r2, #1
 802164c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
		assert(uart != NULL);
 8021650:	68bb      	ldr	r3, [r7, #8]
 8021652:	2b00      	cmp	r3, #0
 8021654:	d106      	bne.n	8021664 <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj+0x50>
 8021656:	4b06      	ldr	r3, [pc, #24]	; (8021670 <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj+0x5c>)
 8021658:	4a06      	ldr	r2, [pc, #24]	; (8021674 <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj+0x60>)
 802165a:	f44f 7189 	mov.w	r1, #274	; 0x112
 802165e:	4806      	ldr	r0, [pc, #24]	; (8021678 <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj+0x64>)
 8021660:	f01b fc2c 	bl	803cebc <__assert_func>
	}
 8021664:	68fb      	ldr	r3, [r7, #12]
 8021666:	4618      	mov	r0, r3
 8021668:	3710      	adds	r7, #16
 802166a:	46bd      	mov	sp, r7
 802166c:	bd80      	pop	{r7, pc}
 802166e:	bf00      	nop
 8021670:	0803e134 	.word	0x0803e134
 8021674:	0803e284 	.word	0x0803e284
 8021678:	0803e110 	.word	0x0803e110

0802167c <_ZN13HeadInterface14ResetReadStateEv>:

	void ResetReadState() {
 802167c:	b580      	push	{r7, lr}
 802167e:	b082      	sub	sp, #8
 8021680:	af00      	add	r7, sp, #0
 8021682:	6078      	str	r0, [r7, #4]
		CurrentState = ReadState::SOM1;
 8021684:	687b      	ldr	r3, [r7, #4]
 8021686:	2200      	movs	r2, #0
 8021688:	631a      	str	r2, [r3, #48]	; 0x30
		HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 802168a:	687b      	ldr	r3, [r7, #4]
 802168c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 802168e:	687b      	ldr	r3, [r7, #4]
 8021690:	3328      	adds	r3, #40	; 0x28
 8021692:	2201      	movs	r2, #1
 8021694:	4619      	mov	r1, r3
 8021696:	f015 f82f 	bl	80366f8 <HAL_UART_Receive_IT>
	}
 802169a:	bf00      	nop
 802169c:	3708      	adds	r7, #8
 802169e:	46bd      	mov	sp, r7
 80216a0:	bd80      	pop	{r7, pc}

080216a2 <_ZNK13HeadInterface10HasRequestEv>:

	bool HasRequest() const {
 80216a2:	b580      	push	{r7, lr}
 80216a4:	b082      	sub	sp, #8
 80216a6:	af00      	add	r7, sp, #0
 80216a8:	6078      	str	r0, [r7, #4]
		return !Requests.empty();
 80216aa:	687b      	ldr	r3, [r7, #4]
 80216ac:	4618      	mov	r0, r3
 80216ae:	f001 fbf9 	bl	8022ea4 <_ZNKSt5queueI7RequestSt5dequeIS0_SaIS0_EEE5emptyEv>
 80216b2:	4603      	mov	r3, r0
 80216b4:	f083 0301 	eor.w	r3, r3, #1
 80216b8:	b2db      	uxtb	r3, r3
	}
 80216ba:	4618      	mov	r0, r3
 80216bc:	3708      	adds	r7, #8
 80216be:	46bd      	mov	sp, r7
 80216c0:	bd80      	pop	{r7, pc}

080216c2 <_ZN13HeadInterface4SendERK8Responce>:

	void Send(const Responce &responce) {
 80216c2:	b590      	push	{r4, r7, lr}
 80216c4:	b097      	sub	sp, #92	; 0x5c
 80216c6:	af00      	add	r7, sp, #0
 80216c8:	6078      	str	r0, [r7, #4]
 80216ca:	6039      	str	r1, [r7, #0]

		while (!TransmitComplete) {
 80216cc:	687b      	ldr	r3, [r7, #4]
 80216ce:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80216d2:	2b00      	cmp	r3, #0
 80216d4:	d100      	bne.n	80216d8 <_ZN13HeadInterface4SendERK8Responce+0x16>
 80216d6:	e7f9      	b.n	80216cc <_ZN13HeadInterface4SendERK8Responce+0xa>
		}

		size_t size = responce.Data.size() + 3 + 3;
 80216d8:	683b      	ldr	r3, [r7, #0]
 80216da:	4618      	mov	r0, r3
 80216dc:	f001 fa71 	bl	8022bc2 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 80216e0:	4603      	mov	r3, r0
 80216e2:	3306      	adds	r3, #6
 80216e4:	657b      	str	r3, [r7, #84]	; 0x54
		CurrentResponceBuffer.resize(size);
 80216e6:	687b      	ldr	r3, [r7, #4]
 80216e8:	3348      	adds	r3, #72	; 0x48
 80216ea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80216ec:	4618      	mov	r0, r3
 80216ee:	f001 fa25 	bl	8022b3c <_ZNSt6vectorIhSaIhEE6resizeEj>

		uint8_t *ptr = CurrentResponceBuffer.data();
 80216f2:	687b      	ldr	r3, [r7, #4]
 80216f4:	3348      	adds	r3, #72	; 0x48
 80216f6:	4618      	mov	r0, r3
 80216f8:	f001 fa54 	bl	8022ba4 <_ZNSt6vectorIhSaIhEE4dataEv>
 80216fc:	6538      	str	r0, [r7, #80]	; 0x50

		*(ptr++) = SOM1Val;
 80216fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8021700:	1c5a      	adds	r2, r3, #1
 8021702:	653a      	str	r2, [r7, #80]	; 0x50
 8021704:	22ff      	movs	r2, #255	; 0xff
 8021706:	701a      	strb	r2, [r3, #0]
		*(ptr++) = SOM2Val;
 8021708:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802170a:	1c5a      	adds	r2, r3, #1
 802170c:	653a      	str	r2, [r7, #80]	; 0x50
 802170e:	22aa      	movs	r2, #170	; 0xaa
 8021710:	701a      	strb	r2, [r3, #0]
		*(ptr++) = responce.PeripheryID;
 8021712:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8021714:	1c5a      	adds	r2, r3, #1
 8021716:	653a      	str	r2, [r7, #80]	; 0x50
 8021718:	683a      	ldr	r2, [r7, #0]
 802171a:	7b12      	ldrb	r2, [r2, #12]
 802171c:	701a      	strb	r2, [r3, #0]
		*(ptr++) = responce.MetaInfo;
 802171e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8021720:	1c5a      	adds	r2, r3, #1
 8021722:	653a      	str	r2, [r7, #80]	; 0x50
 8021724:	683a      	ldr	r2, [r7, #0]
 8021726:	7b52      	ldrb	r2, [r2, #13]
 8021728:	701a      	strb	r2, [r3, #0]
		*(ptr++) = responce.Error;
 802172a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802172c:	1c5a      	adds	r2, r3, #1
 802172e:	653a      	str	r2, [r7, #80]	; 0x50
 8021730:	683a      	ldr	r2, [r7, #0]
 8021732:	7b92      	ldrb	r2, [r2, #14]
 8021734:	701a      	strb	r2, [r3, #0]

		memcpy(ptr, responce.Data.data(), responce.Data.size());
 8021736:	683b      	ldr	r3, [r7, #0]
 8021738:	4618      	mov	r0, r3
 802173a:	f001 fbc0 	bl	8022ebe <_ZNKSt6vectorIhSaIhEE4dataEv>
 802173e:	4604      	mov	r4, r0
 8021740:	683b      	ldr	r3, [r7, #0]
 8021742:	4618      	mov	r0, r3
 8021744:	f001 fa3d 	bl	8022bc2 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8021748:	4603      	mov	r3, r0
 802174a:	461a      	mov	r2, r3
 802174c:	4621      	mov	r1, r4
 802174e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8021750:	f01b fc1e 	bl	803cf90 <memcpy>

		ptr += responce.Data.size();
 8021754:	683b      	ldr	r3, [r7, #0]
 8021756:	4618      	mov	r0, r3
 8021758:	f001 fa33 	bl	8022bc2 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 802175c:	4602      	mov	r2, r0
 802175e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8021760:	4413      	add	r3, r2
 8021762:	653b      	str	r3, [r7, #80]	; 0x50

		*ptr = SOM3Val;
 8021764:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8021766:	22af      	movs	r2, #175	; 0xaf
 8021768:	701a      	strb	r2, [r3, #0]

		//ResetReadState();

		TransmitComplete = false;
 802176a:	687b      	ldr	r3, [r7, #4]
 802176c:	2200      	movs	r2, #0
 802176e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

		size_t sz = CurrentResponceBuffer.size();
 8021772:	687b      	ldr	r3, [r7, #4]
 8021774:	3348      	adds	r3, #72	; 0x48
 8021776:	4618      	mov	r0, r3
 8021778:	f001 fa23 	bl	8022bc2 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 802177c:	64f8      	str	r0, [r7, #76]	; 0x4c

		uint8_t testBuf[64];
		memcpy(testBuf, CurrentResponceBuffer.data(), sz);
 802177e:	687b      	ldr	r3, [r7, #4]
 8021780:	3348      	adds	r3, #72	; 0x48
 8021782:	4618      	mov	r0, r3
 8021784:	f001 fa0e 	bl	8022ba4 <_ZNSt6vectorIhSaIhEE4dataEv>
 8021788:	4601      	mov	r1, r0
 802178a:	f107 0308 	add.w	r3, r7, #8
 802178e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8021790:	4618      	mov	r0, r3
 8021792:	f01b fbfd 	bl	803cf90 <memcpy>

		auto ret = HAL_UART_Transmit(UartHandle, CurrentResponceBuffer.data(),
 8021796:	687b      	ldr	r3, [r7, #4]
 8021798:	6d5c      	ldr	r4, [r3, #84]	; 0x54
 802179a:	687b      	ldr	r3, [r7, #4]
 802179c:	3348      	adds	r3, #72	; 0x48
 802179e:	4618      	mov	r0, r3
 80217a0:	f001 fa00 	bl	8022ba4 <_ZNSt6vectorIhSaIhEE4dataEv>
 80217a4:	4601      	mov	r1, r0
 80217a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80217a8:	b29a      	uxth	r2, r3
				sz, TimeoutS);
 80217aa:	687b      	ldr	r3, [r7, #4]
 80217ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
		auto ret = HAL_UART_Transmit(UartHandle, CurrentResponceBuffer.data(),
 80217ae:	4620      	mov	r0, r4
 80217b0:	f014 fe38 	bl	8036424 <HAL_UART_Transmit>
 80217b4:	4603      	mov	r3, r0
 80217b6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
		TransmitComplete = true;
 80217ba:	687b      	ldr	r3, [r7, #4]
 80217bc:	2201      	movs	r2, #1
 80217be:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
		auto t = ret;
 80217c2:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80217c6:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	}
 80217ca:	bf00      	nop
 80217cc:	375c      	adds	r7, #92	; 0x5c
 80217ce:	46bd      	mov	sp, r7
 80217d0:	bd90      	pop	{r4, r7, pc}

080217d2 <_ZN7RequestC1EOS_>:
struct Request {
 80217d2:	b580      	push	{r7, lr}
 80217d4:	b082      	sub	sp, #8
 80217d6:	af00      	add	r7, sp, #0
 80217d8:	6078      	str	r0, [r7, #4]
 80217da:	6039      	str	r1, [r7, #0]
 80217dc:	687b      	ldr	r3, [r7, #4]
 80217de:	683a      	ldr	r2, [r7, #0]
 80217e0:	4611      	mov	r1, r2
 80217e2:	4618      	mov	r0, r3
 80217e4:	f7ff fcff 	bl	80211e6 <_ZNSt6vectorIhSaIhEEC1EOS1_>
 80217e8:	683b      	ldr	r3, [r7, #0]
 80217ea:	68da      	ldr	r2, [r3, #12]
 80217ec:	687b      	ldr	r3, [r7, #4]
 80217ee:	60da      	str	r2, [r3, #12]
 80217f0:	683b      	ldr	r3, [r7, #0]
 80217f2:	7c1a      	ldrb	r2, [r3, #16]
 80217f4:	687b      	ldr	r3, [r7, #4]
 80217f6:	741a      	strb	r2, [r3, #16]
 80217f8:	683b      	ldr	r3, [r7, #0]
 80217fa:	7c5a      	ldrb	r2, [r3, #17]
 80217fc:	687b      	ldr	r3, [r7, #4]
 80217fe:	745a      	strb	r2, [r3, #17]
 8021800:	687b      	ldr	r3, [r7, #4]
 8021802:	4618      	mov	r0, r3
 8021804:	3708      	adds	r7, #8
 8021806:	46bd      	mov	sp, r7
 8021808:	bd80      	pop	{r7, pc}
	...

0802180c <_ZN13HeadInterface10GetRequestEv>:

	Request GetRequest() {
 802180c:	b580      	push	{r7, lr}
 802180e:	b082      	sub	sp, #8
 8021810:	af00      	add	r7, sp, #0
 8021812:	6078      	str	r0, [r7, #4]
 8021814:	6039      	str	r1, [r7, #0]
		assert(HasRequest());
 8021816:	6838      	ldr	r0, [r7, #0]
 8021818:	f7ff ff43 	bl	80216a2 <_ZNK13HeadInterface10HasRequestEv>
 802181c:	4603      	mov	r3, r0
 802181e:	2b00      	cmp	r3, #0
 8021820:	d106      	bne.n	8021830 <_ZN13HeadInterface10GetRequestEv+0x24>
 8021822:	4b0e      	ldr	r3, [pc, #56]	; (802185c <_ZN13HeadInterface10GetRequestEv+0x50>)
 8021824:	4a0e      	ldr	r2, [pc, #56]	; (8021860 <_ZN13HeadInterface10GetRequestEv+0x54>)
 8021826:	f44f 71a2 	mov.w	r1, #324	; 0x144
 802182a:	480e      	ldr	r0, [pc, #56]	; (8021864 <_ZN13HeadInterface10GetRequestEv+0x58>)
 802182c:	f01b fb46 	bl	803cebc <__assert_func>
		auto request = std::move(Requests.front());
 8021830:	683b      	ldr	r3, [r7, #0]
 8021832:	4618      	mov	r0, r3
 8021834:	f001 fb52 	bl	8022edc <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEE5frontEv>
 8021838:	4603      	mov	r3, r0
 802183a:	4618      	mov	r0, r3
 802183c:	f001 f8c3 	bl	80229c6 <_ZSt4moveIR7RequestEONSt16remove_referenceIT_E4typeEOS3_>
 8021840:	4603      	mov	r3, r0
 8021842:	4619      	mov	r1, r3
 8021844:	6878      	ldr	r0, [r7, #4]
 8021846:	f7ff ffc4 	bl	80217d2 <_ZN7RequestC1EOS_>
		Requests.pop();
 802184a:	683b      	ldr	r3, [r7, #0]
 802184c:	4618      	mov	r0, r3
 802184e:	f001 fb52 	bl	8022ef6 <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEE3popEv>
		return request;
 8021852:	bf00      	nop
	}
 8021854:	6878      	ldr	r0, [r7, #4]
 8021856:	3708      	adds	r7, #8
 8021858:	46bd      	mov	sp, r7
 802185a:	bd80      	pop	{r7, pc}
 802185c:	0803e2c0 	.word	0x0803e2c0
 8021860:	0803e2d0 	.word	0x0803e2d0
 8021864:	0803e110 	.word	0x0803e110

08021868 <_ZN13HeadInterface14FinishTransmitEv>:

	void FinishTransmit() {
 8021868:	b480      	push	{r7}
 802186a:	b083      	sub	sp, #12
 802186c:	af00      	add	r7, sp, #0
 802186e:	6078      	str	r0, [r7, #4]
		TransmitComplete = true;
 8021870:	687b      	ldr	r3, [r7, #4]
 8021872:	2201      	movs	r2, #1
 8021874:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	}
 8021878:	bf00      	nop
 802187a:	370c      	adds	r7, #12
 802187c:	46bd      	mov	sp, r7
 802187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021882:	4770      	bx	lr

08021884 <_ZN13HeadInterface19ProcessRecievedDataEv>:

	void ProcessRecievedData() {
 8021884:	b590      	push	{r4, r7, lr}
 8021886:	b089      	sub	sp, #36	; 0x24
 8021888:	af00      	add	r7, sp, #0
 802188a:	6078      	str	r0, [r7, #4]
		switch (CurrentState) {
 802188c:	687b      	ldr	r3, [r7, #4]
 802188e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021890:	2b07      	cmp	r3, #7
 8021892:	f200 80d6 	bhi.w	8021a42 <_ZN13HeadInterface19ProcessRecievedDataEv+0x1be>
 8021896:	a201      	add	r2, pc, #4	; (adr r2, 802189c <_ZN13HeadInterface19ProcessRecievedDataEv+0x18>)
 8021898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802189c:	080218bd 	.word	0x080218bd
 80218a0:	080218e7 	.word	0x080218e7
 80218a4:	08021911 	.word	0x08021911
 80218a8:	08021935 	.word	0x08021935
 80218ac:	0802196b 	.word	0x0802196b
 80218b0:	0802198f 	.word	0x0802198f
 80218b4:	080219c1 	.word	0x080219c1
 80218b8:	080219d9 	.word	0x080219d9
		case ReadState::SOM1: {
			if (CurrentValue == SOM1Val) {
 80218bc:	687b      	ldr	r3, [r7, #4]
 80218be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80218c2:	2bff      	cmp	r3, #255	; 0xff
 80218c4:	d10b      	bne.n	80218de <_ZN13HeadInterface19ProcessRecievedDataEv+0x5a>
				CurrentState = ReadState::SOM2;
 80218c6:	687b      	ldr	r3, [r7, #4]
 80218c8:	2201      	movs	r2, #1
 80218ca:	631a      	str	r2, [r3, #48]	; 0x30
				HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 80218cc:	687b      	ldr	r3, [r7, #4]
 80218ce:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80218d0:	687b      	ldr	r3, [r7, #4]
 80218d2:	3328      	adds	r3, #40	; 0x28
 80218d4:	2201      	movs	r2, #1
 80218d6:	4619      	mov	r1, r3
 80218d8:	f014 ff0e 	bl	80366f8 <HAL_UART_Receive_IT>
			} else
				ResetReadState();
			break;
 80218dc:	e0b5      	b.n	8021a4a <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c6>
				ResetReadState();
 80218de:	6878      	ldr	r0, [r7, #4]
 80218e0:	f7ff fecc 	bl	802167c <_ZN13HeadInterface14ResetReadStateEv>
			break;
 80218e4:	e0b1      	b.n	8021a4a <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c6>
		}
		case ReadState::SOM2: {
			if (CurrentValue == SOM2Val) {
 80218e6:	687b      	ldr	r3, [r7, #4]
 80218e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80218ec:	2baa      	cmp	r3, #170	; 0xaa
 80218ee:	d10b      	bne.n	8021908 <_ZN13HeadInterface19ProcessRecievedDataEv+0x84>
				CurrentState = ReadState::PERIPHERY_ID;
 80218f0:	687b      	ldr	r3, [r7, #4]
 80218f2:	2202      	movs	r2, #2
 80218f4:	631a      	str	r2, [r3, #48]	; 0x30
				HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 80218f6:	687b      	ldr	r3, [r7, #4]
 80218f8:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80218fa:	687b      	ldr	r3, [r7, #4]
 80218fc:	3328      	adds	r3, #40	; 0x28
 80218fe:	2201      	movs	r2, #1
 8021900:	4619      	mov	r1, r3
 8021902:	f014 fef9 	bl	80366f8 <HAL_UART_Receive_IT>
			} else
				ResetReadState();
			break;
 8021906:	e0a0      	b.n	8021a4a <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c6>
				ResetReadState();
 8021908:	6878      	ldr	r0, [r7, #4]
 802190a:	f7ff feb7 	bl	802167c <_ZN13HeadInterface14ResetReadStateEv>
			break;
 802190e:	e09c      	b.n	8021a4a <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c6>
		}
		case ReadState::PERIPHERY_ID: {
			CurrentRequest.PeripheryID = CurrentValue;
 8021910:	687b      	ldr	r3, [r7, #4]
 8021912:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8021916:	687b      	ldr	r3, [r7, #4]
 8021918:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			CurrentState = ReadState::REQUEST_SIZE;
 802191c:	687b      	ldr	r3, [r7, #4]
 802191e:	2203      	movs	r2, #3
 8021920:	631a      	str	r2, [r3, #48]	; 0x30
			HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 8021922:	687b      	ldr	r3, [r7, #4]
 8021924:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8021926:	687b      	ldr	r3, [r7, #4]
 8021928:	3328      	adds	r3, #40	; 0x28
 802192a:	2201      	movs	r2, #1
 802192c:	4619      	mov	r1, r3
 802192e:	f014 fee3 	bl	80366f8 <HAL_UART_Receive_IT>
			break;
 8021932:	e08a      	b.n	8021a4a <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c6>
		}
		case ReadState::REQUEST_SIZE: {
			RequestSize = CurrentValue;
 8021934:	687b      	ldr	r3, [r7, #4]
 8021936:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 802193a:	461a      	mov	r2, r3
 802193c:	687b      	ldr	r3, [r7, #4]
 802193e:	62da      	str	r2, [r3, #44]	; 0x2c
			CurrentRequest.Data.resize(RequestSize);
 8021940:	687b      	ldr	r3, [r7, #4]
 8021942:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8021946:	687b      	ldr	r3, [r7, #4]
 8021948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802194a:	4619      	mov	r1, r3
 802194c:	4610      	mov	r0, r2
 802194e:	f001 f8f5 	bl	8022b3c <_ZNSt6vectorIhSaIhEE6resizeEj>
			CurrentState = ReadState::RESPONCE_SIZE;
 8021952:	687b      	ldr	r3, [r7, #4]
 8021954:	2204      	movs	r2, #4
 8021956:	631a      	str	r2, [r3, #48]	; 0x30
			HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 8021958:	687b      	ldr	r3, [r7, #4]
 802195a:	6d58      	ldr	r0, [r3, #84]	; 0x54
 802195c:	687b      	ldr	r3, [r7, #4]
 802195e:	3328      	adds	r3, #40	; 0x28
 8021960:	2201      	movs	r2, #1
 8021962:	4619      	mov	r1, r3
 8021964:	f014 fec8 	bl	80366f8 <HAL_UART_Receive_IT>
			break;
 8021968:	e06f      	b.n	8021a4a <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c6>
		}
		case ReadState::RESPONCE_SIZE: {
			CurrentRequest.ResponceSize = CurrentValue;
 802196a:	687b      	ldr	r3, [r7, #4]
 802196c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8021970:	461a      	mov	r2, r3
 8021972:	687b      	ldr	r3, [r7, #4]
 8021974:	641a      	str	r2, [r3, #64]	; 0x40
			CurrentState = ReadState::META;
 8021976:	687b      	ldr	r3, [r7, #4]
 8021978:	2205      	movs	r2, #5
 802197a:	631a      	str	r2, [r3, #48]	; 0x30
			HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 802197c:	687b      	ldr	r3, [r7, #4]
 802197e:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8021980:	687b      	ldr	r3, [r7, #4]
 8021982:	3328      	adds	r3, #40	; 0x28
 8021984:	2201      	movs	r2, #1
 8021986:	4619      	mov	r1, r3
 8021988:	f014 feb6 	bl	80366f8 <HAL_UART_Receive_IT>
			break;
 802198c:	e05d      	b.n	8021a4a <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c6>
		}
		case ReadState::META: {
			CurrentRequest.MetaInfo = CurrentValue;
 802198e:	687b      	ldr	r3, [r7, #4]
 8021990:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8021994:	687b      	ldr	r3, [r7, #4]
 8021996:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			CurrentState = ReadState::DATA;
 802199a:	687b      	ldr	r3, [r7, #4]
 802199c:	2206      	movs	r2, #6
 802199e:	631a      	str	r2, [r3, #48]	; 0x30
			HAL_UART_Receive_IT(UartHandle, CurrentRequest.Data.data(),
 80219a0:	687b      	ldr	r3, [r7, #4]
 80219a2:	6d5c      	ldr	r4, [r3, #84]	; 0x54
 80219a4:	687b      	ldr	r3, [r7, #4]
 80219a6:	3334      	adds	r3, #52	; 0x34
 80219a8:	4618      	mov	r0, r3
 80219aa:	f001 f8fb 	bl	8022ba4 <_ZNSt6vectorIhSaIhEE4dataEv>
 80219ae:	4601      	mov	r1, r0
					RequestSize);
 80219b0:	687b      	ldr	r3, [r7, #4]
 80219b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
			HAL_UART_Receive_IT(UartHandle, CurrentRequest.Data.data(),
 80219b4:	b29b      	uxth	r3, r3
 80219b6:	461a      	mov	r2, r3
 80219b8:	4620      	mov	r0, r4
 80219ba:	f014 fe9d 	bl	80366f8 <HAL_UART_Receive_IT>
			break;
 80219be:	e044      	b.n	8021a4a <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c6>
		}
		case ReadState::DATA: {
			CurrentState = ReadState::SOM3;
 80219c0:	687b      	ldr	r3, [r7, #4]
 80219c2:	2207      	movs	r2, #7
 80219c4:	631a      	str	r2, [r3, #48]	; 0x30
			HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 80219c6:	687b      	ldr	r3, [r7, #4]
 80219c8:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80219ca:	687b      	ldr	r3, [r7, #4]
 80219cc:	3328      	adds	r3, #40	; 0x28
 80219ce:	2201      	movs	r2, #1
 80219d0:	4619      	mov	r1, r3
 80219d2:	f014 fe91 	bl	80366f8 <HAL_UART_Receive_IT>
			break;
 80219d6:	e038      	b.n	8021a4a <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c6>
		}
		case ReadState::SOM3: {
			if (CurrentValue == SOM3Val) {
 80219d8:	687b      	ldr	r3, [r7, #4]
 80219da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80219de:	2baf      	cmp	r3, #175	; 0xaf
 80219e0:	d12b      	bne.n	8021a3a <_ZN13HeadInterface19ProcessRecievedDataEv+0x1b6>
				Requests.push(std::move(CurrentRequest));
 80219e2:	687c      	ldr	r4, [r7, #4]
 80219e4:	687b      	ldr	r3, [r7, #4]
 80219e6:	3334      	adds	r3, #52	; 0x34
 80219e8:	4618      	mov	r0, r3
 80219ea:	f000 ffec 	bl	80229c6 <_ZSt4moveIR7RequestEONSt16remove_referenceIT_E4typeEOS3_>
 80219ee:	4603      	mov	r3, r0
 80219f0:	4619      	mov	r1, r3
 80219f2:	4620      	mov	r0, r4
 80219f4:	f001 fa8b 	bl	8022f0e <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEE4pushEOS0_>
				CurrentRequest = { };
 80219f8:	687b      	ldr	r3, [r7, #4]
 80219fa:	f103 0434 	add.w	r4, r3, #52	; 0x34
 80219fe:	f107 030c 	add.w	r3, r7, #12
 8021a02:	2200      	movs	r2, #0
 8021a04:	601a      	str	r2, [r3, #0]
 8021a06:	605a      	str	r2, [r3, #4]
 8021a08:	609a      	str	r2, [r3, #8]
 8021a0a:	60da      	str	r2, [r3, #12]
 8021a0c:	611a      	str	r2, [r3, #16]
 8021a0e:	2300      	movs	r3, #0
 8021a10:	60fb      	str	r3, [r7, #12]
 8021a12:	2300      	movs	r3, #0
 8021a14:	613b      	str	r3, [r7, #16]
 8021a16:	2300      	movs	r3, #0
 8021a18:	617b      	str	r3, [r7, #20]
 8021a1a:	f107 030c 	add.w	r3, r7, #12
 8021a1e:	4618      	mov	r0, r3
 8021a20:	f7ff fad3 	bl	8020fca <_ZNSt6vectorIhSaIhEEC1Ev>
 8021a24:	f107 030c 	add.w	r3, r7, #12
 8021a28:	4619      	mov	r1, r3
 8021a2a:	4620      	mov	r0, r4
 8021a2c:	f7ff fb38 	bl	80210a0 <_ZN7RequestaSEOS_>
 8021a30:	f107 030c 	add.w	r3, r7, #12
 8021a34:	4618      	mov	r0, r3
 8021a36:	f7ff fae2 	bl	8020ffe <_ZN7RequestD1Ev>
			}
			ResetReadState();
 8021a3a:	6878      	ldr	r0, [r7, #4]
 8021a3c:	f7ff fe1e 	bl	802167c <_ZN13HeadInterface14ResetReadStateEv>
			break;
 8021a40:	e003      	b.n	8021a4a <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c6>
		}
		default:
			ResetReadState();
 8021a42:	6878      	ldr	r0, [r7, #4]
 8021a44:	f7ff fe1a 	bl	802167c <_ZN13HeadInterface14ResetReadStateEv>
		}
	}
 8021a48:	bf00      	nop
 8021a4a:	bf00      	nop
 8021a4c:	3724      	adds	r7, #36	; 0x24
 8021a4e:	46bd      	mov	sp, r7
 8021a50:	bd90      	pop	{r4, r7, pc}
 8021a52:	bf00      	nop

08021a54 <_ZN17IMUFrameContainer4Info11SerializeToEPPh>:
		uint16_t NumAv;
		uint16_t MaxFrames;

		static constexpr size_t Size = 3 * sizeof(uint16_t);

		void SerializeTo(uint8_t **ptr) {
 8021a54:	b580      	push	{r7, lr}
 8021a56:	b082      	sub	sp, #8
 8021a58:	af00      	add	r7, sp, #0
 8021a5a:	6078      	str	r0, [r7, #4]
 8021a5c:	6039      	str	r1, [r7, #0]
			assert(ptr);
 8021a5e:	683b      	ldr	r3, [r7, #0]
 8021a60:	2b00      	cmp	r3, #0
 8021a62:	d106      	bne.n	8021a72 <_ZN17IMUFrameContainer4Info11SerializeToEPPh+0x1e>
 8021a64:	4b19      	ldr	r3, [pc, #100]	; (8021acc <_ZN17IMUFrameContainer4Info11SerializeToEPPh+0x78>)
 8021a66:	4a1a      	ldr	r2, [pc, #104]	; (8021ad0 <_ZN17IMUFrameContainer4Info11SerializeToEPPh+0x7c>)
 8021a68:	f240 119d 	movw	r1, #413	; 0x19d
 8021a6c:	4819      	ldr	r0, [pc, #100]	; (8021ad4 <_ZN17IMUFrameContainer4Info11SerializeToEPPh+0x80>)
 8021a6e:	f01b fa25 	bl	803cebc <__assert_func>
			assert(*ptr);
 8021a72:	683b      	ldr	r3, [r7, #0]
 8021a74:	681b      	ldr	r3, [r3, #0]
 8021a76:	2b00      	cmp	r3, #0
 8021a78:	d106      	bne.n	8021a88 <_ZN17IMUFrameContainer4Info11SerializeToEPPh+0x34>
 8021a7a:	4b17      	ldr	r3, [pc, #92]	; (8021ad8 <_ZN17IMUFrameContainer4Info11SerializeToEPPh+0x84>)
 8021a7c:	4a14      	ldr	r2, [pc, #80]	; (8021ad0 <_ZN17IMUFrameContainer4Info11SerializeToEPPh+0x7c>)
 8021a7e:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 8021a82:	4814      	ldr	r0, [pc, #80]	; (8021ad4 <_ZN17IMUFrameContainer4Info11SerializeToEPPh+0x80>)
 8021a84:	f01b fa1a 	bl	803cebc <__assert_func>

			*reinterpret_cast<uint16_t*>(*ptr) = First;
 8021a88:	683b      	ldr	r3, [r7, #0]
 8021a8a:	681b      	ldr	r3, [r3, #0]
 8021a8c:	687a      	ldr	r2, [r7, #4]
 8021a8e:	8812      	ldrh	r2, [r2, #0]
 8021a90:	801a      	strh	r2, [r3, #0]
			*ptr += sizeof(uint16_t);
 8021a92:	683b      	ldr	r3, [r7, #0]
 8021a94:	681b      	ldr	r3, [r3, #0]
 8021a96:	1c9a      	adds	r2, r3, #2
 8021a98:	683b      	ldr	r3, [r7, #0]
 8021a9a:	601a      	str	r2, [r3, #0]

			*reinterpret_cast<uint16_t*>(*ptr) = NumAv;
 8021a9c:	683b      	ldr	r3, [r7, #0]
 8021a9e:	681b      	ldr	r3, [r3, #0]
 8021aa0:	687a      	ldr	r2, [r7, #4]
 8021aa2:	8852      	ldrh	r2, [r2, #2]
 8021aa4:	801a      	strh	r2, [r3, #0]
			*ptr += sizeof(uint16_t);
 8021aa6:	683b      	ldr	r3, [r7, #0]
 8021aa8:	681b      	ldr	r3, [r3, #0]
 8021aaa:	1c9a      	adds	r2, r3, #2
 8021aac:	683b      	ldr	r3, [r7, #0]
 8021aae:	601a      	str	r2, [r3, #0]

			*reinterpret_cast<uint16_t*>(*ptr) = MaxFrames;
 8021ab0:	683b      	ldr	r3, [r7, #0]
 8021ab2:	681b      	ldr	r3, [r3, #0]
 8021ab4:	687a      	ldr	r2, [r7, #4]
 8021ab6:	8892      	ldrh	r2, [r2, #4]
 8021ab8:	801a      	strh	r2, [r3, #0]
			*ptr += sizeof(uint16_t);
 8021aba:	683b      	ldr	r3, [r7, #0]
 8021abc:	681b      	ldr	r3, [r3, #0]
 8021abe:	1c9a      	adds	r2, r3, #2
 8021ac0:	683b      	ldr	r3, [r7, #0]
 8021ac2:	601a      	str	r2, [r3, #0]
		}
 8021ac4:	bf00      	nop
 8021ac6:	3708      	adds	r7, #8
 8021ac8:	46bd      	mov	sp, r7
 8021aca:	bd80      	pop	{r7, pc}
 8021acc:	0803e0dc 	.word	0x0803e0dc
 8021ad0:	0803e2f4 	.word	0x0803e2f4
 8021ad4:	0803e110 	.word	0x0803e110
 8021ad8:	0803e12c 	.word	0x0803e12c

08021adc <_ZN17IMUFrameContainer5ResetEv>:
	};

public:
	void Reset() {
 8021adc:	b580      	push	{r7, lr}
 8021ade:	b084      	sub	sp, #16
 8021ae0:	af00      	add	r7, sp, #0
 8021ae2:	6078      	str	r0, [r7, #4]
		FrameQueue = { };
 8021ae4:	6878      	ldr	r0, [r7, #4]
 8021ae6:	2300      	movs	r3, #0
 8021ae8:	60bb      	str	r3, [r7, #8]
 8021aea:	2300      	movs	r3, #0
 8021aec:	60fb      	str	r3, [r7, #12]
 8021aee:	f107 0308 	add.w	r3, r7, #8
 8021af2:	e893 0006 	ldmia.w	r3, {r1, r2}
 8021af6:	f001 fa1c 	bl	8022f32 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEaSESt16initializer_listIS1_E>
		FirstSeq = 0;
 8021afa:	687b      	ldr	r3, [r7, #4]
 8021afc:	2200      	movs	r2, #0
 8021afe:	629a      	str	r2, [r3, #40]	; 0x28
	}
 8021b00:	bf00      	nop
 8021b02:	3710      	adds	r7, #16
 8021b04:	46bd      	mov	sp, r7
 8021b06:	bd80      	pop	{r7, pc}

08021b08 <_ZN17IMUFrameContainer3AddERKN10BHYWrapper8BHYFrameE>:

	void Add(const BHYWrapper::BHYFrame &frame) {
 8021b08:	b580      	push	{r7, lr}
 8021b0a:	b082      	sub	sp, #8
 8021b0c:	af00      	add	r7, sp, #0
 8021b0e:	6078      	str	r0, [r7, #4]
 8021b10:	6039      	str	r1, [r7, #0]
		FrameQueue.push_front(frame);
 8021b12:	687b      	ldr	r3, [r7, #4]
 8021b14:	6839      	ldr	r1, [r7, #0]
 8021b16:	4618      	mov	r0, r3
 8021b18:	f001 fa26 	bl	8022f68 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE10push_frontERKS1_>
		if (FrameQueue.size() > MaxFrames)
 8021b1c:	687b      	ldr	r3, [r7, #4]
 8021b1e:	4618      	mov	r0, r3
 8021b20:	f001 fa44 	bl	8022fac <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8021b24:	4602      	mov	r2, r0
 8021b26:	687b      	ldr	r3, [r7, #4]
 8021b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021b2a:	429a      	cmp	r2, r3
 8021b2c:	bf8c      	ite	hi
 8021b2e:	2301      	movhi	r3, #1
 8021b30:	2300      	movls	r3, #0
 8021b32:	b2db      	uxtb	r3, r3
 8021b34:	2b00      	cmp	r3, #0
 8021b36:	d002      	beq.n	8021b3e <_ZN17IMUFrameContainer3AddERKN10BHYWrapper8BHYFrameE+0x36>
			Remove();
 8021b38:	6878      	ldr	r0, [r7, #4]
 8021b3a:	f000 f804 	bl	8021b46 <_ZN17IMUFrameContainer6RemoveEv>
	}
 8021b3e:	bf00      	nop
 8021b40:	3708      	adds	r7, #8
 8021b42:	46bd      	mov	sp, r7
 8021b44:	bd80      	pop	{r7, pc}

08021b46 <_ZN17IMUFrameContainer6RemoveEv>:

	void Remove() {
 8021b46:	b580      	push	{r7, lr}
 8021b48:	b082      	sub	sp, #8
 8021b4a:	af00      	add	r7, sp, #0
 8021b4c:	6078      	str	r0, [r7, #4]
		FrameQueue.pop_back();
 8021b4e:	687b      	ldr	r3, [r7, #4]
 8021b50:	4618      	mov	r0, r3
 8021b52:	f001 fa3d 	bl	8022fd0 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE8pop_backEv>
		FirstSeq++;
 8021b56:	687b      	ldr	r3, [r7, #4]
 8021b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021b5a:	1c5a      	adds	r2, r3, #1
 8021b5c:	687b      	ldr	r3, [r7, #4]
 8021b5e:	629a      	str	r2, [r3, #40]	; 0x28
	}
 8021b60:	bf00      	nop
 8021b62:	3708      	adds	r7, #8
 8021b64:	46bd      	mov	sp, r7
 8021b66:	bd80      	pop	{r7, pc}

08021b68 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE>:

	bool Get(size_t seq, BHYWrapper::BHYFrame &frame) const {
 8021b68:	b5b0      	push	{r4, r5, r7, lr}
 8021b6a:	b08a      	sub	sp, #40	; 0x28
 8021b6c:	af00      	add	r7, sp, #0
 8021b6e:	60f8      	str	r0, [r7, #12]
 8021b70:	60b9      	str	r1, [r7, #8]
 8021b72:	607a      	str	r2, [r7, #4]
		if (FrameQueue.empty())
 8021b74:	68fb      	ldr	r3, [r7, #12]
 8021b76:	4618      	mov	r0, r3
 8021b78:	f001 fa4d 	bl	8023016 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5emptyEv>
 8021b7c:	4603      	mov	r3, r0
 8021b7e:	2b00      	cmp	r3, #0
 8021b80:	d001      	beq.n	8021b86 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x1e>
			return false;
 8021b82:	2300      	movs	r3, #0
 8021b84:	e038      	b.n	8021bf8 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x90>

		if (seq < FirstSeq || seq > FrameQueue.size() + FirstSeq - 1)
 8021b86:	68fb      	ldr	r3, [r7, #12]
 8021b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021b8a:	68ba      	ldr	r2, [r7, #8]
 8021b8c:	429a      	cmp	r2, r3
 8021b8e:	d30b      	bcc.n	8021ba8 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x40>
 8021b90:	68fb      	ldr	r3, [r7, #12]
 8021b92:	4618      	mov	r0, r3
 8021b94:	f001 fa0a 	bl	8022fac <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8021b98:	4602      	mov	r2, r0
 8021b9a:	68fb      	ldr	r3, [r7, #12]
 8021b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021b9e:	4413      	add	r3, r2
 8021ba0:	3b01      	subs	r3, #1
 8021ba2:	68ba      	ldr	r2, [r7, #8]
 8021ba4:	429a      	cmp	r2, r3
 8021ba6:	d901      	bls.n	8021bac <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x44>
 8021ba8:	2301      	movs	r3, #1
 8021baa:	e000      	b.n	8021bae <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x46>
 8021bac:	2300      	movs	r3, #0
 8021bae:	2b00      	cmp	r3, #0
 8021bb0:	d001      	beq.n	8021bb6 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x4e>
			return false;
 8021bb2:	2300      	movs	r3, #0
 8021bb4:	e020      	b.n	8021bf8 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x90>

		auto imuFrame = FrameQueue[(FrameQueue.size() - 1) - (seq - FirstSeq)];
 8021bb6:	68fc      	ldr	r4, [r7, #12]
 8021bb8:	68fb      	ldr	r3, [r7, #12]
 8021bba:	4618      	mov	r0, r3
 8021bbc:	f001 f9f6 	bl	8022fac <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8021bc0:	4601      	mov	r1, r0
 8021bc2:	68fb      	ldr	r3, [r7, #12]
 8021bc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8021bc6:	68bb      	ldr	r3, [r7, #8]
 8021bc8:	1ad3      	subs	r3, r2, r3
 8021bca:	440b      	add	r3, r1
 8021bcc:	3b01      	subs	r3, #1
 8021bce:	4619      	mov	r1, r3
 8021bd0:	4620      	mov	r0, r4
 8021bd2:	f001 fa32 	bl	802303a <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEixEj>
 8021bd6:	4603      	mov	r3, r0
 8021bd8:	f107 0414 	add.w	r4, r7, #20
 8021bdc:	461d      	mov	r5, r3
 8021bde:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8021be0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8021be2:	682b      	ldr	r3, [r5, #0]
 8021be4:	6023      	str	r3, [r4, #0]
		//assert(imuFrame.Seq == seq);

		frame = imuFrame;
 8021be6:	687b      	ldr	r3, [r7, #4]
 8021be8:	461d      	mov	r5, r3
 8021bea:	f107 0414 	add.w	r4, r7, #20
 8021bee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8021bf0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8021bf2:	6823      	ldr	r3, [r4, #0]
 8021bf4:	602b      	str	r3, [r5, #0]
		return true;
 8021bf6:	2301      	movs	r3, #1
	}
 8021bf8:	4618      	mov	r0, r3
 8021bfa:	3728      	adds	r7, #40	; 0x28
 8021bfc:	46bd      	mov	sp, r7
 8021bfe:	bdb0      	pop	{r4, r5, r7, pc}

08021c00 <_ZNK17IMUFrameContainer7GetInfoEv>:
		if (FrameQueue.empty())
			return false;
		return Get(FrameQueue.size() - 1, frame);
	}

	Info GetInfo() const {
 8021c00:	b580      	push	{r7, lr}
 8021c02:	b082      	sub	sp, #8
 8021c04:	af00      	add	r7, sp, #0
 8021c06:	6078      	str	r0, [r7, #4]
 8021c08:	6039      	str	r1, [r7, #0]
		return {FirstSeq, FrameQueue.size(), MaxFrames};
 8021c0a:	683b      	ldr	r3, [r7, #0]
 8021c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021c0e:	b29a      	uxth	r2, r3
 8021c10:	687b      	ldr	r3, [r7, #4]
 8021c12:	801a      	strh	r2, [r3, #0]
 8021c14:	683b      	ldr	r3, [r7, #0]
 8021c16:	4618      	mov	r0, r3
 8021c18:	f001 f9c8 	bl	8022fac <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8021c1c:	4603      	mov	r3, r0
 8021c1e:	b29a      	uxth	r2, r3
 8021c20:	687b      	ldr	r3, [r7, #4]
 8021c22:	805a      	strh	r2, [r3, #2]
 8021c24:	683b      	ldr	r3, [r7, #0]
 8021c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021c28:	b29a      	uxth	r2, r3
 8021c2a:	687b      	ldr	r3, [r7, #4]
 8021c2c:	809a      	strh	r2, [r3, #4]
	}
 8021c2e:	6878      	ldr	r0, [r7, #4]
 8021c30:	3708      	adds	r7, #8
 8021c32:	46bd      	mov	sp, r7
 8021c34:	bd80      	pop	{r7, pc}

08021c36 <_ZN17IMURequestHandler11RequestMode9SerializeEh>:
		static constexpr Type FrameBySeq = 0;
		static constexpr Type Info = 1;
		static constexpr Type LatestFrame = 2;
		static constexpr Type Reset = 3;

		static uint8_t Serialize(Type mode) {
 8021c36:	b480      	push	{r7}
 8021c38:	b083      	sub	sp, #12
 8021c3a:	af00      	add	r7, sp, #0
 8021c3c:	4603      	mov	r3, r0
 8021c3e:	71fb      	strb	r3, [r7, #7]
			return mode;
 8021c40:	79fb      	ldrb	r3, [r7, #7]
		}
 8021c42:	4618      	mov	r0, r3
 8021c44:	370c      	adds	r7, #12
 8021c46:	46bd      	mov	sp, r7
 8021c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021c4c:	4770      	bx	lr

08021c4e <_ZN17IMURequestHandler11RequestMode11DeserializeEh>:
		static Type Deserialize(uint8_t meta) {
 8021c4e:	b480      	push	{r7}
 8021c50:	b083      	sub	sp, #12
 8021c52:	af00      	add	r7, sp, #0
 8021c54:	4603      	mov	r3, r0
 8021c56:	71fb      	strb	r3, [r7, #7]
			return meta;
 8021c58:	79fb      	ldrb	r3, [r7, #7]
		}
 8021c5a:	4618      	mov	r0, r3
 8021c5c:	370c      	adds	r7, #12
 8021c5e:	46bd      	mov	sp, r7
 8021c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021c64:	4770      	bx	lr
	...

08021c68 <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer>:
		static constexpr Type UnknownMode = 2;
		static constexpr Type BadRequest = 3;
	};

private:
	Responce GetFrameBySeq(const Request &request,
 8021c68:	b580      	push	{r7, lr}
 8021c6a:	b08c      	sub	sp, #48	; 0x30
 8021c6c:	af00      	add	r7, sp, #0
 8021c6e:	60f8      	str	r0, [r7, #12]
 8021c70:	60b9      	str	r1, [r7, #8]
 8021c72:	607a      	str	r2, [r7, #4]
 8021c74:	603b      	str	r3, [r7, #0]
			const IMUFrameContainer &container) {
		assert(
 8021c76:	687b      	ldr	r3, [r7, #4]
 8021c78:	7c1b      	ldrb	r3, [r3, #16]
 8021c7a:	4618      	mov	r0, r3
 8021c7c:	f7ff ffe7 	bl	8021c4e <_ZN17IMURequestHandler11RequestMode11DeserializeEh>
 8021c80:	4603      	mov	r3, r0
 8021c82:	2b00      	cmp	r3, #0
 8021c84:	d006      	beq.n	8021c94 <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0x2c>
 8021c86:	4b2c      	ldr	r3, [pc, #176]	; (8021d38 <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0xd0>)
 8021c88:	4a2c      	ldr	r2, [pc, #176]	; (8021d3c <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0xd4>)
 8021c8a:	f240 11f1 	movw	r1, #497	; 0x1f1
 8021c8e:	482c      	ldr	r0, [pc, #176]	; (8021d40 <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0xd8>)
 8021c90:	f01b f914 	bl	803cebc <__assert_func>
				RequestMode::Deserialize(request.MetaInfo)
						== RequestMode::FrameBySeq);

		Responce responce;
 8021c94:	68f8      	ldr	r0, [r7, #12]
 8021c96:	f7ff fc19 	bl	80214cc <_ZN8ResponceC1Ev>
		responce.PeripheryID = Periphery::Imu;
 8021c9a:	68fb      	ldr	r3, [r7, #12]
 8021c9c:	2201      	movs	r2, #1
 8021c9e:	731a      	strb	r2, [r3, #12]
		responce.MetaInfo = RequestMode::Serialize(RequestMode::FrameBySeq);
 8021ca0:	2000      	movs	r0, #0
 8021ca2:	f7ff ffc8 	bl	8021c36 <_ZN17IMURequestHandler11RequestMode9SerializeEh>
 8021ca6:	4603      	mov	r3, r0
 8021ca8:	461a      	mov	r2, r3
 8021caa:	68fb      	ldr	r3, [r7, #12]
 8021cac:	735a      	strb	r2, [r3, #13]
		responce.Data.resize(BHYWrapper::BHYFrame::Size);
 8021cae:	68fb      	ldr	r3, [r7, #12]
 8021cb0:	2111      	movs	r1, #17
 8021cb2:	4618      	mov	r0, r3
 8021cb4:	f000 ff42 	bl	8022b3c <_ZNSt6vectorIhSaIhEE6resizeEj>

		if (request.Data.size() != 2) {
 8021cb8:	687b      	ldr	r3, [r7, #4]
 8021cba:	4618      	mov	r0, r3
 8021cbc:	f000 ff81 	bl	8022bc2 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8021cc0:	4603      	mov	r3, r0
 8021cc2:	2b02      	cmp	r3, #2
 8021cc4:	bf14      	ite	ne
 8021cc6:	2301      	movne	r3, #1
 8021cc8:	2300      	moveq	r3, #0
 8021cca:	b2db      	uxtb	r3, r3
 8021ccc:	2b00      	cmp	r3, #0
 8021cce:	d002      	beq.n	8021cd6 <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0x6e>
			responce.Error = ErrorCodes::BadRequest;
 8021cd0:	68fb      	ldr	r3, [r7, #12]
 8021cd2:	2203      	movs	r2, #3
 8021cd4:	739a      	strb	r2, [r3, #14]
		}

		uint16_t frameSeq =
				*reinterpret_cast<const uint16_t*>(request.Data.data());
 8021cd6:	687b      	ldr	r3, [r7, #4]
 8021cd8:	4618      	mov	r0, r3
 8021cda:	f001 f8f0 	bl	8022ebe <_ZNKSt6vectorIhSaIhEE4dataEv>
 8021cde:	4603      	mov	r3, r0
 8021ce0:	881b      	ldrh	r3, [r3, #0]
 8021ce2:	85fb      	strh	r3, [r7, #46]	; 0x2e

		BHYWrapper::BHYFrame imuFrame;
		bool ok = container.Get(frameSeq, imuFrame);
 8021ce4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8021ce6:	f107 0218 	add.w	r2, r7, #24
 8021cea:	4619      	mov	r1, r3
 8021cec:	6838      	ldr	r0, [r7, #0]
 8021cee:	f7ff ff3b 	bl	8021b68 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE>
 8021cf2:	4603      	mov	r3, r0
 8021cf4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

		if (!ok) {
 8021cf8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8021cfc:	f083 0301 	eor.w	r3, r3, #1
 8021d00:	b2db      	uxtb	r3, r3
 8021d02:	2b00      	cmp	r3, #0
 8021d04:	d003      	beq.n	8021d0e <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0xa6>
			responce.Error = ErrorCodes::FrameUnavailable;
 8021d06:	68fb      	ldr	r3, [r7, #12]
 8021d08:	2201      	movs	r2, #1
 8021d0a:	739a      	strb	r2, [r3, #14]
			return responce;
 8021d0c:	e00f      	b.n	8021d2e <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0xc6>
		}

		uint8_t sz;
		imuFrame.SerializeTo(responce.Data.data(), &sz);
 8021d0e:	68fb      	ldr	r3, [r7, #12]
 8021d10:	4618      	mov	r0, r3
 8021d12:	f000 ff47 	bl	8022ba4 <_ZNSt6vectorIhSaIhEE4dataEv>
 8021d16:	4601      	mov	r1, r0
 8021d18:	f107 0217 	add.w	r2, r7, #23
 8021d1c:	f107 0318 	add.w	r3, r7, #24
 8021d20:	4618      	mov	r0, r3
 8021d22:	f7fe ff09 	bl	8020b38 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_>
		responce.Error = ErrorCodes::Success;
 8021d26:	68fb      	ldr	r3, [r7, #12]
 8021d28:	2200      	movs	r2, #0
 8021d2a:	739a      	strb	r2, [r3, #14]

		return responce;
 8021d2c:	bf00      	nop
	}
 8021d2e:	68f8      	ldr	r0, [r7, #12]
 8021d30:	3730      	adds	r7, #48	; 0x30
 8021d32:	46bd      	mov	sp, r7
 8021d34:	bd80      	pop	{r7, pc}
 8021d36:	bf00      	nop
 8021d38:	0803e32c 	.word	0x0803e32c
 8021d3c:	0803e374 	.word	0x0803e374
 8021d40:	0803e110 	.word	0x0803e110

08021d44 <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer>:

	Responce GetInfo(const Request &request,
 8021d44:	b580      	push	{r7, lr}
 8021d46:	b088      	sub	sp, #32
 8021d48:	af00      	add	r7, sp, #0
 8021d4a:	60f8      	str	r0, [r7, #12]
 8021d4c:	60b9      	str	r1, [r7, #8]
 8021d4e:	607a      	str	r2, [r7, #4]
 8021d50:	603b      	str	r3, [r7, #0]
			const IMUFrameContainer &container) {
		assert(RequestMode::Deserialize(request.MetaInfo) == RequestMode::Info);
 8021d52:	687b      	ldr	r3, [r7, #4]
 8021d54:	7c1b      	ldrb	r3, [r3, #16]
 8021d56:	4618      	mov	r0, r3
 8021d58:	f7ff ff79 	bl	8021c4e <_ZN17IMURequestHandler11RequestMode11DeserializeEh>
 8021d5c:	4603      	mov	r3, r0
 8021d5e:	2b01      	cmp	r3, #1
 8021d60:	d006      	beq.n	8021d70 <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer+0x2c>
 8021d62:	4b22      	ldr	r3, [pc, #136]	; (8021dec <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer+0xa8>)
 8021d64:	4a22      	ldr	r2, [pc, #136]	; (8021df0 <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer+0xac>)
 8021d66:	f240 2112 	movw	r1, #530	; 0x212
 8021d6a:	4822      	ldr	r0, [pc, #136]	; (8021df4 <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer+0xb0>)
 8021d6c:	f01b f8a6 	bl	803cebc <__assert_func>

		Responce responce;
 8021d70:	68f8      	ldr	r0, [r7, #12]
 8021d72:	f7ff fbab 	bl	80214cc <_ZN8ResponceC1Ev>
		responce.PeripheryID = Periphery::Imu;
 8021d76:	68fb      	ldr	r3, [r7, #12]
 8021d78:	2201      	movs	r2, #1
 8021d7a:	731a      	strb	r2, [r3, #12]
		responce.MetaInfo = RequestMode::Serialize(RequestMode::Info);
 8021d7c:	2001      	movs	r0, #1
 8021d7e:	f7ff ff5a 	bl	8021c36 <_ZN17IMURequestHandler11RequestMode9SerializeEh>
 8021d82:	4603      	mov	r3, r0
 8021d84:	461a      	mov	r2, r3
 8021d86:	68fb      	ldr	r3, [r7, #12]
 8021d88:	735a      	strb	r2, [r3, #13]
		responce.Data.resize(IMUFrameContainer::Info::Size);
 8021d8a:	68fb      	ldr	r3, [r7, #12]
 8021d8c:	2106      	movs	r1, #6
 8021d8e:	4618      	mov	r0, r3
 8021d90:	f000 fed4 	bl	8022b3c <_ZNSt6vectorIhSaIhEE6resizeEj>

		if (request.Data.size() != 1) {
 8021d94:	687b      	ldr	r3, [r7, #4]
 8021d96:	4618      	mov	r0, r3
 8021d98:	f000 ff13 	bl	8022bc2 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8021d9c:	4603      	mov	r3, r0
 8021d9e:	2b01      	cmp	r3, #1
 8021da0:	bf14      	ite	ne
 8021da2:	2301      	movne	r3, #1
 8021da4:	2300      	moveq	r3, #0
 8021da6:	b2db      	uxtb	r3, r3
 8021da8:	2b00      	cmp	r3, #0
 8021daa:	d002      	beq.n	8021db2 <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer+0x6e>
			responce.Error = ErrorCodes::BadRequest;
 8021dac:	68fb      	ldr	r3, [r7, #12]
 8021dae:	2203      	movs	r2, #3
 8021db0:	739a      	strb	r2, [r3, #14]
		}

		uint8_t *ptr = responce.Data.data();
 8021db2:	68fb      	ldr	r3, [r7, #12]
 8021db4:	4618      	mov	r0, r3
 8021db6:	f000 fef5 	bl	8022ba4 <_ZNSt6vectorIhSaIhEE4dataEv>
 8021dba:	4603      	mov	r3, r0
 8021dbc:	61fb      	str	r3, [r7, #28]
		auto info = container.GetInfo();
 8021dbe:	f107 0314 	add.w	r3, r7, #20
 8021dc2:	6839      	ldr	r1, [r7, #0]
 8021dc4:	4618      	mov	r0, r3
 8021dc6:	f7ff ff1b 	bl	8021c00 <_ZNK17IMUFrameContainer7GetInfoEv>

		info.SerializeTo(&ptr);
 8021dca:	f107 021c 	add.w	r2, r7, #28
 8021dce:	f107 0314 	add.w	r3, r7, #20
 8021dd2:	4611      	mov	r1, r2
 8021dd4:	4618      	mov	r0, r3
 8021dd6:	f7ff fe3d 	bl	8021a54 <_ZN17IMUFrameContainer4Info11SerializeToEPPh>

		responce.Error = ErrorCodes::Success;
 8021dda:	68fb      	ldr	r3, [r7, #12]
 8021ddc:	2200      	movs	r2, #0
 8021dde:	739a      	strb	r2, [r3, #14]

		return responce;
 8021de0:	bf00      	nop
	}
 8021de2:	68f8      	ldr	r0, [r7, #12]
 8021de4:	3720      	adds	r7, #32
 8021de6:	46bd      	mov	sp, r7
 8021de8:	bd80      	pop	{r7, pc}
 8021dea:	bf00      	nop
 8021dec:	0803e3c8 	.word	0x0803e3c8
 8021df0:	0803e408 	.word	0x0803e408
 8021df4:	0803e110 	.word	0x0803e110

08021df8 <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK10BHYWrapper>:

	Responce GetLatestFrame(const Request &request, const BHYWrapper &IMU) {
 8021df8:	b580      	push	{r7, lr}
 8021dfa:	b08a      	sub	sp, #40	; 0x28
 8021dfc:	af00      	add	r7, sp, #0
 8021dfe:	60f8      	str	r0, [r7, #12]
 8021e00:	60b9      	str	r1, [r7, #8]
 8021e02:	607a      	str	r2, [r7, #4]
 8021e04:	603b      	str	r3, [r7, #0]
		assert(
 8021e06:	687b      	ldr	r3, [r7, #4]
 8021e08:	7c1b      	ldrb	r3, [r3, #16]
 8021e0a:	4618      	mov	r0, r3
 8021e0c:	f7ff ff1f 	bl	8021c4e <_ZN17IMURequestHandler11RequestMode11DeserializeEh>
 8021e10:	4603      	mov	r3, r0
 8021e12:	2b02      	cmp	r3, #2
 8021e14:	d006      	beq.n	8021e24 <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK10BHYWrapper+0x2c>
 8021e16:	4b21      	ldr	r3, [pc, #132]	; (8021e9c <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK10BHYWrapper+0xa4>)
 8021e18:	4a21      	ldr	r2, [pc, #132]	; (8021ea0 <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK10BHYWrapper+0xa8>)
 8021e1a:	f44f 710a 	mov.w	r1, #552	; 0x228
 8021e1e:	4821      	ldr	r0, [pc, #132]	; (8021ea4 <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK10BHYWrapper+0xac>)
 8021e20:	f01b f84c 	bl	803cebc <__assert_func>
				RequestMode::Deserialize(request.MetaInfo)
						== RequestMode::LatestFrame);

		Responce responce;
 8021e24:	68f8      	ldr	r0, [r7, #12]
 8021e26:	f7ff fb51 	bl	80214cc <_ZN8ResponceC1Ev>
		responce.PeripheryID = Periphery::Imu;
 8021e2a:	68fb      	ldr	r3, [r7, #12]
 8021e2c:	2201      	movs	r2, #1
 8021e2e:	731a      	strb	r2, [r3, #12]
		responce.MetaInfo = RequestMode::Serialize(RequestMode::LatestFrame);
 8021e30:	2002      	movs	r0, #2
 8021e32:	f7ff ff00 	bl	8021c36 <_ZN17IMURequestHandler11RequestMode9SerializeEh>
 8021e36:	4603      	mov	r3, r0
 8021e38:	461a      	mov	r2, r3
 8021e3a:	68fb      	ldr	r3, [r7, #12]
 8021e3c:	735a      	strb	r2, [r3, #13]
		responce.Data.resize(BHYWrapper::BHYFrame::Size);
 8021e3e:	68fb      	ldr	r3, [r7, #12]
 8021e40:	2111      	movs	r1, #17
 8021e42:	4618      	mov	r0, r3
 8021e44:	f000 fe7a 	bl	8022b3c <_ZNSt6vectorIhSaIhEE6resizeEj>

		if (request.Data.size() != 1) {
 8021e48:	687b      	ldr	r3, [r7, #4]
 8021e4a:	4618      	mov	r0, r3
 8021e4c:	f000 feb9 	bl	8022bc2 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8021e50:	4603      	mov	r3, r0
 8021e52:	2b01      	cmp	r3, #1
 8021e54:	bf14      	ite	ne
 8021e56:	2301      	movne	r3, #1
 8021e58:	2300      	moveq	r3, #0
 8021e5a:	b2db      	uxtb	r3, r3
 8021e5c:	2b00      	cmp	r3, #0
 8021e5e:	d002      	beq.n	8021e66 <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK10BHYWrapper+0x6e>
			responce.Error = ErrorCodes::BadRequest;
 8021e60:	68fb      	ldr	r3, [r7, #12]
 8021e62:	2203      	movs	r2, #3
 8021e64:	739a      	strb	r2, [r3, #14]
		}

		BHYWrapper::BHYFrame imuFrame = IMU.GetFrame();
 8021e66:	f107 0314 	add.w	r3, r7, #20
 8021e6a:	6839      	ldr	r1, [r7, #0]
 8021e6c:	4618      	mov	r0, r3
 8021e6e:	f7fe fdb9 	bl	80209e4 <_ZNK10BHYWrapper8GetFrameEv>

		uint8_t sz;
		imuFrame.SerializeTo(responce.Data.data(), &sz);
 8021e72:	68fb      	ldr	r3, [r7, #12]
 8021e74:	4618      	mov	r0, r3
 8021e76:	f000 fe95 	bl	8022ba4 <_ZNSt6vectorIhSaIhEE4dataEv>
 8021e7a:	4601      	mov	r1, r0
 8021e7c:	f107 0213 	add.w	r2, r7, #19
 8021e80:	f107 0314 	add.w	r3, r7, #20
 8021e84:	4618      	mov	r0, r3
 8021e86:	f7fe fe57 	bl	8020b38 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_>

		responce.Error = ErrorCodes::Success;
 8021e8a:	68fb      	ldr	r3, [r7, #12]
 8021e8c:	2200      	movs	r2, #0
 8021e8e:	739a      	strb	r2, [r3, #14]

		return responce;
 8021e90:	bf00      	nop
	}
 8021e92:	68f8      	ldr	r0, [r7, #12]
 8021e94:	3728      	adds	r7, #40	; 0x28
 8021e96:	46bd      	mov	sp, r7
 8021e98:	bd80      	pop	{r7, pc}
 8021e9a:	bf00      	nop
 8021e9c:	0803e458 	.word	0x0803e458
 8021ea0:	0803e4a0 	.word	0x0803e4a0
 8021ea4:	0803e110 	.word	0x0803e110

08021ea8 <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainer>:

	Responce DoReset(const Request &request, IMUFrameContainer &container) {
 8021ea8:	b580      	push	{r7, lr}
 8021eaa:	b084      	sub	sp, #16
 8021eac:	af00      	add	r7, sp, #0
 8021eae:	60f8      	str	r0, [r7, #12]
 8021eb0:	60b9      	str	r1, [r7, #8]
 8021eb2:	607a      	str	r2, [r7, #4]
 8021eb4:	603b      	str	r3, [r7, #0]
		assert(
 8021eb6:	687b      	ldr	r3, [r7, #4]
 8021eb8:	7c1b      	ldrb	r3, [r3, #16]
 8021eba:	4618      	mov	r0, r3
 8021ebc:	f7ff fec7 	bl	8021c4e <_ZN17IMURequestHandler11RequestMode11DeserializeEh>
 8021ec0:	4603      	mov	r3, r0
 8021ec2:	2b03      	cmp	r3, #3
 8021ec4:	d006      	beq.n	8021ed4 <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainer+0x2c>
 8021ec6:	4b19      	ldr	r3, [pc, #100]	; (8021f2c <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainer+0x84>)
 8021ec8:	4a19      	ldr	r2, [pc, #100]	; (8021f30 <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainer+0x88>)
 8021eca:	f44f 7110 	mov.w	r1, #576	; 0x240
 8021ece:	4819      	ldr	r0, [pc, #100]	; (8021f34 <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainer+0x8c>)
 8021ed0:	f01a fff4 	bl	803cebc <__assert_func>
				RequestMode::Deserialize(request.MetaInfo)
						== RequestMode::Reset);

		Responce responce;
 8021ed4:	68f8      	ldr	r0, [r7, #12]
 8021ed6:	f7ff faf9 	bl	80214cc <_ZN8ResponceC1Ev>
		responce.PeripheryID = Periphery::Imu;
 8021eda:	68fb      	ldr	r3, [r7, #12]
 8021edc:	2201      	movs	r2, #1
 8021ede:	731a      	strb	r2, [r3, #12]
		responce.MetaInfo = RequestMode::Serialize(RequestMode::Reset);
 8021ee0:	2003      	movs	r0, #3
 8021ee2:	f7ff fea8 	bl	8021c36 <_ZN17IMURequestHandler11RequestMode9SerializeEh>
 8021ee6:	4603      	mov	r3, r0
 8021ee8:	461a      	mov	r2, r3
 8021eea:	68fb      	ldr	r3, [r7, #12]
 8021eec:	735a      	strb	r2, [r3, #13]
		responce.Data.resize(1);
 8021eee:	68fb      	ldr	r3, [r7, #12]
 8021ef0:	2101      	movs	r1, #1
 8021ef2:	4618      	mov	r0, r3
 8021ef4:	f000 fe22 	bl	8022b3c <_ZNSt6vectorIhSaIhEE6resizeEj>

		if (request.Data.size() != 1) {
 8021ef8:	687b      	ldr	r3, [r7, #4]
 8021efa:	4618      	mov	r0, r3
 8021efc:	f000 fe61 	bl	8022bc2 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8021f00:	4603      	mov	r3, r0
 8021f02:	2b01      	cmp	r3, #1
 8021f04:	bf14      	ite	ne
 8021f06:	2301      	movne	r3, #1
 8021f08:	2300      	moveq	r3, #0
 8021f0a:	b2db      	uxtb	r3, r3
 8021f0c:	2b00      	cmp	r3, #0
 8021f0e:	d002      	beq.n	8021f16 <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainer+0x6e>
			responce.Error = ErrorCodes::BadRequest;
 8021f10:	68fb      	ldr	r3, [r7, #12]
 8021f12:	2203      	movs	r2, #3
 8021f14:	739a      	strb	r2, [r3, #14]
		}

		container.Reset();
 8021f16:	6838      	ldr	r0, [r7, #0]
 8021f18:	f7ff fde0 	bl	8021adc <_ZN17IMUFrameContainer5ResetEv>
		responce.Error = ErrorCodes::Success;
 8021f1c:	68fb      	ldr	r3, [r7, #12]
 8021f1e:	2200      	movs	r2, #0
 8021f20:	739a      	strb	r2, [r3, #14]

		return responce;
 8021f22:	bf00      	nop
	}
 8021f24:	68f8      	ldr	r0, [r7, #12]
 8021f26:	3710      	adds	r7, #16
 8021f28:	46bd      	mov	sp, r7
 8021f2a:	bd80      	pop	{r7, pc}
 8021f2c:	0803e4f0 	.word	0x0803e4f0
 8021f30:	0803e534 	.word	0x0803e534
 8021f34:	0803e110 	.word	0x0803e110

08021f38 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapper>:

public:
	Responce Handle(const Request &request, IMUFrameContainer &container,
 8021f38:	b580      	push	{r7, lr}
 8021f3a:	b084      	sub	sp, #16
 8021f3c:	af00      	add	r7, sp, #0
 8021f3e:	60f8      	str	r0, [r7, #12]
 8021f40:	60b9      	str	r1, [r7, #8]
 8021f42:	607a      	str	r2, [r7, #4]
 8021f44:	603b      	str	r3, [r7, #0]
			const BHYWrapper &IMU) {
		assert(request.PeripheryID == Periphery::Imu);
 8021f46:	687b      	ldr	r3, [r7, #4]
 8021f48:	7c5b      	ldrb	r3, [r3, #17]
 8021f4a:	2b01      	cmp	r3, #1
 8021f4c:	d006      	beq.n	8021f5c <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapper+0x24>
 8021f4e:	4b21      	ldr	r3, [pc, #132]	; (8021fd4 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapper+0x9c>)
 8021f50:	4a21      	ldr	r2, [pc, #132]	; (8021fd8 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapper+0xa0>)
 8021f52:	f240 2156 	movw	r1, #598	; 0x256
 8021f56:	4821      	ldr	r0, [pc, #132]	; (8021fdc <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapper+0xa4>)
 8021f58:	f01a ffb0 	bl	803cebc <__assert_func>

		switch (RequestMode::Deserialize(request.MetaInfo)) {
 8021f5c:	687b      	ldr	r3, [r7, #4]
 8021f5e:	7c1b      	ldrb	r3, [r3, #16]
 8021f60:	4618      	mov	r0, r3
 8021f62:	f7ff fe74 	bl	8021c4e <_ZN17IMURequestHandler11RequestMode11DeserializeEh>
 8021f66:	4603      	mov	r3, r0
 8021f68:	2b03      	cmp	r3, #3
 8021f6a:	d827      	bhi.n	8021fbc <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapper+0x84>
 8021f6c:	a201      	add	r2, pc, #4	; (adr r2, 8021f74 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapper+0x3c>)
 8021f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021f72:	bf00      	nop
 8021f74:	08021f85 	.word	0x08021f85
 8021f78:	08021f93 	.word	0x08021f93
 8021f7c:	08021fa1 	.word	0x08021fa1
 8021f80:	08021faf 	.word	0x08021faf
		case RequestMode::FrameBySeq:
			return GetFrameBySeq(request, container);
 8021f84:	68f8      	ldr	r0, [r7, #12]
 8021f86:	683b      	ldr	r3, [r7, #0]
 8021f88:	687a      	ldr	r2, [r7, #4]
 8021f8a:	68b9      	ldr	r1, [r7, #8]
 8021f8c:	f7ff fe6c 	bl	8021c68 <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer>
 8021f90:	e01b      	b.n	8021fca <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapper+0x92>
		case RequestMode::Info:
			return GetInfo(request, container);
 8021f92:	68f8      	ldr	r0, [r7, #12]
 8021f94:	683b      	ldr	r3, [r7, #0]
 8021f96:	687a      	ldr	r2, [r7, #4]
 8021f98:	68b9      	ldr	r1, [r7, #8]
 8021f9a:	f7ff fed3 	bl	8021d44 <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer>
 8021f9e:	e014      	b.n	8021fca <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapper+0x92>
		case RequestMode::LatestFrame:
			return GetLatestFrame(request, IMU);
 8021fa0:	68f8      	ldr	r0, [r7, #12]
 8021fa2:	69bb      	ldr	r3, [r7, #24]
 8021fa4:	687a      	ldr	r2, [r7, #4]
 8021fa6:	68b9      	ldr	r1, [r7, #8]
 8021fa8:	f7ff ff26 	bl	8021df8 <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK10BHYWrapper>
 8021fac:	e00d      	b.n	8021fca <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapper+0x92>
		case RequestMode::Reset:
			return DoReset(request, container);
 8021fae:	68f8      	ldr	r0, [r7, #12]
 8021fb0:	683b      	ldr	r3, [r7, #0]
 8021fb2:	687a      	ldr	r2, [r7, #4]
 8021fb4:	68b9      	ldr	r1, [r7, #8]
 8021fb6:	f7ff ff77 	bl	8021ea8 <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainer>
 8021fba:	e006      	b.n	8021fca <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapper+0x92>
		default:
			assert(0 && "Unknown Mode");
 8021fbc:	4b08      	ldr	r3, [pc, #32]	; (8021fe0 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapper+0xa8>)
 8021fbe:	4a06      	ldr	r2, [pc, #24]	; (8021fd8 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapper+0xa0>)
 8021fc0:	f240 2162 	movw	r1, #610	; 0x262
 8021fc4:	4805      	ldr	r0, [pc, #20]	; (8021fdc <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapper+0xa4>)
 8021fc6:	f01a ff79 	bl	803cebc <__assert_func>
		}
	}
 8021fca:	68f8      	ldr	r0, [r7, #12]
 8021fcc:	3710      	adds	r7, #16
 8021fce:	46bd      	mov	sp, r7
 8021fd0:	bd80      	pop	{r7, pc}
 8021fd2:	bf00      	nop
 8021fd4:	0803e57c 	.word	0x0803e57c
 8021fd8:	0803e5a4 	.word	0x0803e5a4
 8021fdc:	0803e110 	.word	0x0803e110
 8021fe0:	0803e600 	.word	0x0803e600

08021fe4 <_ZN18AcknowledgeHandler7Version11SerializeToEPPh>:
private:
	struct Version {
		uint8_t Major;
		uint8_t Minor;

		void SerializeTo(uint8_t **ptr) {
 8021fe4:	b580      	push	{r7, lr}
 8021fe6:	b082      	sub	sp, #8
 8021fe8:	af00      	add	r7, sp, #0
 8021fea:	6078      	str	r0, [r7, #4]
 8021fec:	6039      	str	r1, [r7, #0]
			assert(ptr);
 8021fee:	683b      	ldr	r3, [r7, #0]
 8021ff0:	2b00      	cmp	r3, #0
 8021ff2:	d106      	bne.n	8022002 <_ZN18AcknowledgeHandler7Version11SerializeToEPPh+0x1e>
 8021ff4:	4b14      	ldr	r3, [pc, #80]	; (8022048 <_ZN18AcknowledgeHandler7Version11SerializeToEPPh+0x64>)
 8021ff6:	4a15      	ldr	r2, [pc, #84]	; (802204c <_ZN18AcknowledgeHandler7Version11SerializeToEPPh+0x68>)
 8021ff8:	f240 216e 	movw	r1, #622	; 0x26e
 8021ffc:	4814      	ldr	r0, [pc, #80]	; (8022050 <_ZN18AcknowledgeHandler7Version11SerializeToEPPh+0x6c>)
 8021ffe:	f01a ff5d 	bl	803cebc <__assert_func>
			assert(*ptr);
 8022002:	683b      	ldr	r3, [r7, #0]
 8022004:	681b      	ldr	r3, [r3, #0]
 8022006:	2b00      	cmp	r3, #0
 8022008:	d106      	bne.n	8022018 <_ZN18AcknowledgeHandler7Version11SerializeToEPPh+0x34>
 802200a:	4b12      	ldr	r3, [pc, #72]	; (8022054 <_ZN18AcknowledgeHandler7Version11SerializeToEPPh+0x70>)
 802200c:	4a0f      	ldr	r2, [pc, #60]	; (802204c <_ZN18AcknowledgeHandler7Version11SerializeToEPPh+0x68>)
 802200e:	f240 216f 	movw	r1, #623	; 0x26f
 8022012:	480f      	ldr	r0, [pc, #60]	; (8022050 <_ZN18AcknowledgeHandler7Version11SerializeToEPPh+0x6c>)
 8022014:	f01a ff52 	bl	803cebc <__assert_func>

			**ptr = Major;
 8022018:	683b      	ldr	r3, [r7, #0]
 802201a:	681b      	ldr	r3, [r3, #0]
 802201c:	687a      	ldr	r2, [r7, #4]
 802201e:	7812      	ldrb	r2, [r2, #0]
 8022020:	701a      	strb	r2, [r3, #0]
			*ptr += sizeof(uint8_t);
 8022022:	683b      	ldr	r3, [r7, #0]
 8022024:	681b      	ldr	r3, [r3, #0]
 8022026:	1c5a      	adds	r2, r3, #1
 8022028:	683b      	ldr	r3, [r7, #0]
 802202a:	601a      	str	r2, [r3, #0]

			**ptr = Minor;
 802202c:	683b      	ldr	r3, [r7, #0]
 802202e:	681b      	ldr	r3, [r3, #0]
 8022030:	687a      	ldr	r2, [r7, #4]
 8022032:	7852      	ldrb	r2, [r2, #1]
 8022034:	701a      	strb	r2, [r3, #0]
			*ptr += sizeof(uint8_t);
 8022036:	683b      	ldr	r3, [r7, #0]
 8022038:	681b      	ldr	r3, [r3, #0]
 802203a:	1c5a      	adds	r2, r3, #1
 802203c:	683b      	ldr	r3, [r7, #0]
 802203e:	601a      	str	r2, [r3, #0]
		}
 8022040:	bf00      	nop
 8022042:	3708      	adds	r7, #8
 8022044:	46bd      	mov	sp, r7
 8022046:	bd80      	pop	{r7, pc}
 8022048:	0803e0dc 	.word	0x0803e0dc
 802204c:	0803e614 	.word	0x0803e614
 8022050:	0803e110 	.word	0x0803e110
 8022054:	0803e12c 	.word	0x0803e12c

08022058 <_ZN18AcknowledgeHandlerC1Ehh>:
	};

	Version CurrentVersion;

	public:
		AcknowledgeHandler(uint8_t versionMaj, uint8_t versionMin) {
 8022058:	b480      	push	{r7}
 802205a:	b083      	sub	sp, #12
 802205c:	af00      	add	r7, sp, #0
 802205e:	6078      	str	r0, [r7, #4]
 8022060:	460b      	mov	r3, r1
 8022062:	70fb      	strb	r3, [r7, #3]
 8022064:	4613      	mov	r3, r2
 8022066:	70bb      	strb	r3, [r7, #2]
			CurrentVersion.Major = versionMaj;
 8022068:	687b      	ldr	r3, [r7, #4]
 802206a:	78fa      	ldrb	r2, [r7, #3]
 802206c:	701a      	strb	r2, [r3, #0]
			CurrentVersion.Minor = versionMin;
 802206e:	687b      	ldr	r3, [r7, #4]
 8022070:	78ba      	ldrb	r2, [r7, #2]
 8022072:	705a      	strb	r2, [r3, #1]
		}
 8022074:	687b      	ldr	r3, [r7, #4]
 8022076:	4618      	mov	r0, r3
 8022078:	370c      	adds	r7, #12
 802207a:	46bd      	mov	sp, r7
 802207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022080:	4770      	bx	lr
	...

08022084 <_ZN18AcknowledgeHandler6HandleERK7Request>:

		Responce Handle(const Request &request) {
 8022084:	b580      	push	{r7, lr}
 8022086:	b086      	sub	sp, #24
 8022088:	af00      	add	r7, sp, #0
 802208a:	60f8      	str	r0, [r7, #12]
 802208c:	60b9      	str	r1, [r7, #8]
 802208e:	607a      	str	r2, [r7, #4]
			assert(request.PeripheryID == Periphery::Ack);
 8022090:	687b      	ldr	r3, [r7, #4]
 8022092:	7c5b      	ldrb	r3, [r3, #17]
 8022094:	2b02      	cmp	r3, #2
 8022096:	d006      	beq.n	80220a6 <_ZN18AcknowledgeHandler6HandleERK7Request+0x22>
 8022098:	4b14      	ldr	r3, [pc, #80]	; (80220ec <_ZN18AcknowledgeHandler6HandleERK7Request+0x68>)
 802209a:	4a15      	ldr	r2, [pc, #84]	; (80220f0 <_ZN18AcknowledgeHandler6HandleERK7Request+0x6c>)
 802209c:	f240 2182 	movw	r1, #642	; 0x282
 80220a0:	4814      	ldr	r0, [pc, #80]	; (80220f4 <_ZN18AcknowledgeHandler6HandleERK7Request+0x70>)
 80220a2:	f01a ff0b 	bl	803cebc <__assert_func>

			Responce responce;
 80220a6:	68f8      	ldr	r0, [r7, #12]
 80220a8:	f7ff fa10 	bl	80214cc <_ZN8ResponceC1Ev>
			responce.PeripheryID = Periphery::Ack;
 80220ac:	68fb      	ldr	r3, [r7, #12]
 80220ae:	2202      	movs	r2, #2
 80220b0:	731a      	strb	r2, [r3, #12]
			responce.MetaInfo = 0;
 80220b2:	68fb      	ldr	r3, [r7, #12]
 80220b4:	2200      	movs	r2, #0
 80220b6:	735a      	strb	r2, [r3, #13]
			responce.Error = 0;
 80220b8:	68fb      	ldr	r3, [r7, #12]
 80220ba:	2200      	movs	r2, #0
 80220bc:	739a      	strb	r2, [r3, #14]
			responce.Data.resize(2);
 80220be:	68fb      	ldr	r3, [r7, #12]
 80220c0:	2102      	movs	r1, #2
 80220c2:	4618      	mov	r0, r3
 80220c4:	f000 fd3a 	bl	8022b3c <_ZNSt6vectorIhSaIhEE6resizeEj>

			uint8_t* ptr = responce.Data.data();
 80220c8:	68fb      	ldr	r3, [r7, #12]
 80220ca:	4618      	mov	r0, r3
 80220cc:	f000 fd6a 	bl	8022ba4 <_ZNSt6vectorIhSaIhEE4dataEv>
 80220d0:	4603      	mov	r3, r0
 80220d2:	617b      	str	r3, [r7, #20]
			CurrentVersion.SerializeTo(&ptr);
 80220d4:	68bb      	ldr	r3, [r7, #8]
 80220d6:	f107 0214 	add.w	r2, r7, #20
 80220da:	4611      	mov	r1, r2
 80220dc:	4618      	mov	r0, r3
 80220de:	f7ff ff81 	bl	8021fe4 <_ZN18AcknowledgeHandler7Version11SerializeToEPPh>

			return responce;
 80220e2:	bf00      	nop
		}
 80220e4:	68f8      	ldr	r0, [r7, #12]
 80220e6:	3718      	adds	r7, #24
 80220e8:	46bd      	mov	sp, r7
 80220ea:	bd80      	pop	{r7, pc}
 80220ec:	0803e650 	.word	0x0803e650
 80220f0:	0803e678 	.word	0x0803e678
 80220f4:	0803e110 	.word	0x0803e110

080220f8 <_ZN13HeadInterfaceD1Ev>:
struct HeadInterface {
 80220f8:	b580      	push	{r7, lr}
 80220fa:	b082      	sub	sp, #8
 80220fc:	af00      	add	r7, sp, #0
 80220fe:	6078      	str	r0, [r7, #4]
 8022100:	687b      	ldr	r3, [r7, #4]
 8022102:	3348      	adds	r3, #72	; 0x48
 8022104:	4618      	mov	r0, r3
 8022106:	f000 fc43 	bl	8022990 <_ZNSt6vectorIhSaIhEED1Ev>
 802210a:	687b      	ldr	r3, [r7, #4]
 802210c:	3334      	adds	r3, #52	; 0x34
 802210e:	4618      	mov	r0, r3
 8022110:	f7fe ff75 	bl	8020ffe <_ZN7RequestD1Ev>
 8022114:	687b      	ldr	r3, [r7, #4]
 8022116:	4618      	mov	r0, r3
 8022118:	f7ff fa6f 	bl	80215fa <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEED1Ev>
 802211c:	687b      	ldr	r3, [r7, #4]
 802211e:	4618      	mov	r0, r3
 8022120:	3708      	adds	r7, #8
 8022122:	46bd      	mov	sp, r7
 8022124:	bd80      	pop	{r7, pc}

08022126 <_ZN11QueueSenderD1Ev>:
struct QueueSender {
 8022126:	b580      	push	{r7, lr}
 8022128:	b082      	sub	sp, #8
 802212a:	af00      	add	r7, sp, #0
 802212c:	6078      	str	r0, [r7, #4]
 802212e:	687b      	ldr	r3, [r7, #4]
 8022130:	3368      	adds	r3, #104	; 0x68
 8022132:	4618      	mov	r0, r3
 8022134:	f000 fc2c 	bl	8022990 <_ZNSt6vectorIhSaIhEED1Ev>
 8022138:	687b      	ldr	r3, [r7, #4]
 802213a:	3350      	adds	r3, #80	; 0x50
 802213c:	4618      	mov	r0, r3
 802213e:	f7fe ff5e 	bl	8020ffe <_ZN7RequestD1Ev>
 8022142:	687b      	ldr	r3, [r7, #4]
 8022144:	3328      	adds	r3, #40	; 0x28
 8022146:	4618      	mov	r0, r3
 8022148:	f7fe ff19 	bl	8020f7e <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEED1Ev>
 802214c:	687b      	ldr	r3, [r7, #4]
 802214e:	4618      	mov	r0, r3
 8022150:	f000 fb7f 	bl	8022852 <_ZNSt5dequeI7RequestSaIS0_EED1Ev>
 8022154:	687b      	ldr	r3, [r7, #4]
 8022156:	4618      	mov	r0, r3
 8022158:	3708      	adds	r7, #8
 802215a:	46bd      	mov	sp, r7
 802215c:	bd80      	pop	{r7, pc}

0802215e <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEC1Ev>:
 802215e:	b580      	push	{r7, lr}
 8022160:	b082      	sub	sp, #8
 8022162:	af00      	add	r7, sp, #0
 8022164:	6078      	str	r0, [r7, #4]
 8022166:	687b      	ldr	r3, [r7, #4]
 8022168:	4618      	mov	r0, r3
 802216a:	f000 ff83 	bl	8023074 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EEC1Ev>
 802216e:	687b      	ldr	r3, [r7, #4]
 8022170:	4618      	mov	r0, r3
 8022172:	3708      	adds	r7, #8
 8022174:	46bd      	mov	sp, r7
 8022176:	bd80      	pop	{r7, pc}

08022178 <_ZN17IMUFrameContainerC1Ev>:
class IMUFrameContainer {
 8022178:	b580      	push	{r7, lr}
 802217a:	b082      	sub	sp, #8
 802217c:	af00      	add	r7, sp, #0
 802217e:	6078      	str	r0, [r7, #4]
 8022180:	687b      	ldr	r3, [r7, #4]
 8022182:	4618      	mov	r0, r3
 8022184:	f7ff ffeb 	bl	802215e <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEC1Ev>
 8022188:	687b      	ldr	r3, [r7, #4]
 802218a:	2200      	movs	r2, #0
 802218c:	629a      	str	r2, [r3, #40]	; 0x28
 802218e:	687b      	ldr	r3, [r7, #4]
 8022190:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8022194:	62da      	str	r2, [r3, #44]	; 0x2c
 8022196:	687b      	ldr	r3, [r7, #4]
 8022198:	4618      	mov	r0, r3
 802219a:	3708      	adds	r7, #8
 802219c:	46bd      	mov	sp, r7
 802219e:	bd80      	pop	{r7, pc}

080221a0 <_ZN17IMUFrameContainerD1Ev>:
 80221a0:	b580      	push	{r7, lr}
 80221a2:	b082      	sub	sp, #8
 80221a4:	af00      	add	r7, sp, #0
 80221a6:	6078      	str	r0, [r7, #4]
 80221a8:	687b      	ldr	r3, [r7, #4]
 80221aa:	4618      	mov	r0, r3
 80221ac:	f000 ff95 	bl	80230da <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EED1Ev>
 80221b0:	687b      	ldr	r3, [r7, #4]
 80221b2:	4618      	mov	r0, r3
 80221b4:	3708      	adds	r7, #8
 80221b6:	46bd      	mov	sp, r7
 80221b8:	bd80      	pop	{r7, pc}

080221ba <_ZN18MotherboardContextC1E17MotherboardConfig>:
	BHYWrapper IMU;
	IMURequestHandler IMUHandler;

	bool UpdateIMU = false;

	MotherboardContext(MotherboardConfig conf) :
 80221ba:	b084      	sub	sp, #16
 80221bc:	b580      	push	{r7, lr}
 80221be:	b082      	sub	sp, #8
 80221c0:	af00      	add	r7, sp, #0
 80221c2:	6078      	str	r0, [r7, #4]
 80221c4:	f107 0014 	add.w	r0, r7, #20
 80221c8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
			HeadService { conf.HeadServiceUart, conf.HeadTimeout }, HeadStream {
					conf.HeadStreamUart, conf.HeadTimeout }, Body {
					conf.BodyUart, conf.BodyTimeout }, FrameContainer { }, IMU {
					conf.IMUSpi }, IMUHandler { }, AckHandler {
					conf.VersionMajor, conf.VersionMinor } {
 80221cc:	687b      	ldr	r3, [r7, #4]
 80221ce:	6979      	ldr	r1, [r7, #20]
 80221d0:	69fa      	ldr	r2, [r7, #28]
 80221d2:	4618      	mov	r0, r3
 80221d4:	f7ff fa1e 	bl	8021614 <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj>
 80221d8:	687b      	ldr	r3, [r7, #4]
 80221da:	3360      	adds	r3, #96	; 0x60
 80221dc:	69b9      	ldr	r1, [r7, #24]
 80221de:	69fa      	ldr	r2, [r7, #28]
 80221e0:	4618      	mov	r0, r3
 80221e2:	f7ff fa17 	bl	8021614 <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj>
 80221e6:	687b      	ldr	r3, [r7, #4]
 80221e8:	33c0      	adds	r3, #192	; 0xc0
 80221ea:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 80221ee:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80221f2:	4618      	mov	r0, r3
 80221f4:	f7ff ff30 	bl	8022058 <_ZN18AcknowledgeHandlerC1Ehh>
 80221f8:	687b      	ldr	r3, [r7, #4]
 80221fa:	33c4      	adds	r3, #196	; 0xc4
 80221fc:	6a39      	ldr	r1, [r7, #32]
 80221fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8022200:	4618      	mov	r0, r3
 8022202:	f7fe ff09 	bl	8021018 <_ZN11QueueSenderC1EP20__UART_HandleTypeDefj>
 8022206:	687b      	ldr	r3, [r7, #4]
 8022208:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 802220c:	2230      	movs	r2, #48	; 0x30
 802220e:	2100      	movs	r1, #0
 8022210:	4618      	mov	r0, r3
 8022212:	f01a fee5 	bl	803cfe0 <memset>
 8022216:	687b      	ldr	r3, [r7, #4]
 8022218:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 802221c:	4618      	mov	r0, r3
 802221e:	f7ff ffab 	bl	8022178 <_ZN17IMUFrameContainerC1Ev>
 8022222:	687b      	ldr	r3, [r7, #4]
 8022224:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 8022228:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802222a:	4611      	mov	r1, r2
 802222c:	4618      	mov	r0, r3
 802222e:	f7fe fa29 	bl	8020684 <_ZN10BHYWrapperC1EP19__SPI_HandleTypeDef>
 8022232:	687b      	ldr	r3, [r7, #4]
 8022234:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8022238:	2200      	movs	r2, #0
 802223a:	f883 22c1 	strb.w	r2, [r3, #705]	; 0x2c1
	}
 802223e:	687b      	ldr	r3, [r7, #4]
 8022240:	4618      	mov	r0, r3
 8022242:	3708      	adds	r7, #8
 8022244:	46bd      	mov	sp, r7
 8022246:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 802224a:	b004      	add	sp, #16
 802224c:	4770      	bx	lr

0802224e <_ZN13HeadInterfaceC1Ev>:
	HeadInterface() = default;
 802224e:	b580      	push	{r7, lr}
 8022250:	b082      	sub	sp, #8
 8022252:	af00      	add	r7, sp, #0
 8022254:	6078      	str	r0, [r7, #4]
 8022256:	687b      	ldr	r3, [r7, #4]
 8022258:	4618      	mov	r0, r3
 802225a:	f000 fe0f 	bl	8022e7c <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEEC1IS3_vEEv>
 802225e:	687b      	ldr	r3, [r7, #4]
 8022260:	3334      	adds	r3, #52	; 0x34
 8022262:	4618      	mov	r0, r3
 8022264:	f7fe febe 	bl	8020fe4 <_ZN7RequestC1Ev>
 8022268:	687b      	ldr	r3, [r7, #4]
 802226a:	3348      	adds	r3, #72	; 0x48
 802226c:	4618      	mov	r0, r3
 802226e:	f7fe feac 	bl	8020fca <_ZNSt6vectorIhSaIhEEC1Ev>
 8022272:	687b      	ldr	r3, [r7, #4]
 8022274:	2201      	movs	r2, #1
 8022276:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 802227a:	687b      	ldr	r3, [r7, #4]
 802227c:	4618      	mov	r0, r3
 802227e:	3708      	adds	r7, #8
 8022280:	46bd      	mov	sp, r7
 8022282:	bd80      	pop	{r7, pc}

08022284 <_ZN11QueueSenderC1Ev>:
	QueueSender() = default;
 8022284:	b580      	push	{r7, lr}
 8022286:	b082      	sub	sp, #8
 8022288:	af00      	add	r7, sp, #0
 802228a:	6078      	str	r0, [r7, #4]
 802228c:	687b      	ldr	r3, [r7, #4]
 802228e:	4618      	mov	r0, r3
 8022290:	f7fe fe68 	bl	8020f64 <_ZNSt5dequeI7RequestSaIS0_EEC1Ev>
 8022294:	687b      	ldr	r3, [r7, #4]
 8022296:	3328      	adds	r3, #40	; 0x28
 8022298:	4618      	mov	r0, r3
 802229a:	f000 fb0c 	bl	80228b6 <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEEC1IS3_vEEv>
 802229e:	687b      	ldr	r3, [r7, #4]
 80222a0:	3350      	adds	r3, #80	; 0x50
 80222a2:	4618      	mov	r0, r3
 80222a4:	f7fe fe9e 	bl	8020fe4 <_ZN7RequestC1Ev>
 80222a8:	687b      	ldr	r3, [r7, #4]
 80222aa:	2200      	movs	r2, #0
 80222ac:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 80222b0:	687b      	ldr	r3, [r7, #4]
 80222b2:	2200      	movs	r2, #0
 80222b4:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 80222b8:	687b      	ldr	r3, [r7, #4]
 80222ba:	3368      	adds	r3, #104	; 0x68
 80222bc:	4618      	mov	r0, r3
 80222be:	f7fe fe84 	bl	8020fca <_ZNSt6vectorIhSaIhEEC1Ev>
 80222c2:	687b      	ldr	r3, [r7, #4]
 80222c4:	4618      	mov	r0, r3
 80222c6:	3708      	adds	r7, #8
 80222c8:	46bd      	mov	sp, r7
 80222ca:	bd80      	pop	{r7, pc}

080222cc <_ZN18MotherboardContextC1Ev>:

	MotherboardContext() = default;
 80222cc:	b580      	push	{r7, lr}
 80222ce:	b082      	sub	sp, #8
 80222d0:	af00      	add	r7, sp, #0
 80222d2:	6078      	str	r0, [r7, #4]
 80222d4:	687b      	ldr	r3, [r7, #4]
 80222d6:	4618      	mov	r0, r3
 80222d8:	f7ff ffb9 	bl	802224e <_ZN13HeadInterfaceC1Ev>
 80222dc:	687b      	ldr	r3, [r7, #4]
 80222de:	3360      	adds	r3, #96	; 0x60
 80222e0:	4618      	mov	r0, r3
 80222e2:	f7ff ffb4 	bl	802224e <_ZN13HeadInterfaceC1Ev>
 80222e6:	687b      	ldr	r3, [r7, #4]
 80222e8:	33c0      	adds	r3, #192	; 0xc0
 80222ea:	2200      	movs	r2, #0
 80222ec:	2100      	movs	r1, #0
 80222ee:	4618      	mov	r0, r3
 80222f0:	f7ff feb2 	bl	8022058 <_ZN18AcknowledgeHandlerC1Ehh>
 80222f4:	687b      	ldr	r3, [r7, #4]
 80222f6:	33c4      	adds	r3, #196	; 0xc4
 80222f8:	4618      	mov	r0, r3
 80222fa:	f7ff ffc3 	bl	8022284 <_ZN11QueueSenderC1Ev>
 80222fe:	687b      	ldr	r3, [r7, #4]
 8022300:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8022304:	4618      	mov	r0, r3
 8022306:	f7ff ff37 	bl	8022178 <_ZN17IMUFrameContainerC1Ev>
 802230a:	687b      	ldr	r3, [r7, #4]
 802230c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8022310:	2200      	movs	r2, #0
 8022312:	f883 22c1 	strb.w	r2, [r3, #705]	; 0x2c1
 8022316:	687b      	ldr	r3, [r7, #4]
 8022318:	4618      	mov	r0, r3
 802231a:	3708      	adds	r7, #8
 802231c:	46bd      	mov	sp, r7
 802231e:	bd80      	pop	{r7, pc}

08022320 <_ZN18MotherboardContextD1Ev>:
struct MotherboardContext {
 8022320:	b580      	push	{r7, lr}
 8022322:	b082      	sub	sp, #8
 8022324:	af00      	add	r7, sp, #0
 8022326:	6078      	str	r0, [r7, #4]
 8022328:	687b      	ldr	r3, [r7, #4]
 802232a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 802232e:	4618      	mov	r0, r3
 8022330:	f7ff ff36 	bl	80221a0 <_ZN17IMUFrameContainerD1Ev>
 8022334:	687b      	ldr	r3, [r7, #4]
 8022336:	33c4      	adds	r3, #196	; 0xc4
 8022338:	4618      	mov	r0, r3
 802233a:	f7ff fef4 	bl	8022126 <_ZN11QueueSenderD1Ev>
 802233e:	687b      	ldr	r3, [r7, #4]
 8022340:	3360      	adds	r3, #96	; 0x60
 8022342:	4618      	mov	r0, r3
 8022344:	f7ff fed8 	bl	80220f8 <_ZN13HeadInterfaceD1Ev>
 8022348:	687b      	ldr	r3, [r7, #4]
 802234a:	4618      	mov	r0, r3
 802234c:	f7ff fed4 	bl	80220f8 <_ZN13HeadInterfaceD1Ev>
 8022350:	687b      	ldr	r3, [r7, #4]
 8022352:	4618      	mov	r0, r3
 8022354:	3708      	adds	r7, #8
 8022356:	46bd      	mov	sp, r7
 8022358:	bd80      	pop	{r7, pc}

0802235a <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEEaSEOS4_>:
 802235a:	b580      	push	{r7, lr}
 802235c:	b082      	sub	sp, #8
 802235e:	af00      	add	r7, sp, #0
 8022360:	6078      	str	r0, [r7, #4]
 8022362:	6039      	str	r1, [r7, #0]
 8022364:	687b      	ldr	r3, [r7, #4]
 8022366:	683a      	ldr	r2, [r7, #0]
 8022368:	4611      	mov	r1, r2
 802236a:	4618      	mov	r0, r3
 802236c:	f000 feda 	bl	8023124 <_ZNSt5dequeI7RequestSaIS0_EEaSEOS2_>
 8022370:	687b      	ldr	r3, [r7, #4]
 8022372:	4618      	mov	r0, r3
 8022374:	3708      	adds	r7, #8
 8022376:	46bd      	mov	sp, r7
 8022378:	bd80      	pop	{r7, pc}

0802237a <_ZN13HeadInterfaceaSEOS_>:
struct HeadInterface {
 802237a:	b580      	push	{r7, lr}
 802237c:	b082      	sub	sp, #8
 802237e:	af00      	add	r7, sp, #0
 8022380:	6078      	str	r0, [r7, #4]
 8022382:	6039      	str	r1, [r7, #0]
 8022384:	687b      	ldr	r3, [r7, #4]
 8022386:	683a      	ldr	r2, [r7, #0]
 8022388:	4611      	mov	r1, r2
 802238a:	4618      	mov	r0, r3
 802238c:	f7ff ffe5 	bl	802235a <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEEaSEOS4_>
 8022390:	683b      	ldr	r3, [r7, #0]
 8022392:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8022396:	687b      	ldr	r3, [r7, #4]
 8022398:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 802239c:	683b      	ldr	r3, [r7, #0]
 802239e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80223a0:	687b      	ldr	r3, [r7, #4]
 80223a2:	62da      	str	r2, [r3, #44]	; 0x2c
 80223a4:	683b      	ldr	r3, [r7, #0]
 80223a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80223a8:	687b      	ldr	r3, [r7, #4]
 80223aa:	631a      	str	r2, [r3, #48]	; 0x30
 80223ac:	687b      	ldr	r3, [r7, #4]
 80223ae:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80223b2:	683b      	ldr	r3, [r7, #0]
 80223b4:	3334      	adds	r3, #52	; 0x34
 80223b6:	4619      	mov	r1, r3
 80223b8:	4610      	mov	r0, r2
 80223ba:	f7fe fe71 	bl	80210a0 <_ZN7RequestaSEOS_>
 80223be:	687b      	ldr	r3, [r7, #4]
 80223c0:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80223c4:	683b      	ldr	r3, [r7, #0]
 80223c6:	3348      	adds	r3, #72	; 0x48
 80223c8:	4619      	mov	r1, r3
 80223ca:	4610      	mov	r0, r2
 80223cc:	f000 fb31 	bl	8022a32 <_ZNSt6vectorIhSaIhEEaSEOS1_>
 80223d0:	683b      	ldr	r3, [r7, #0]
 80223d2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80223d4:	687b      	ldr	r3, [r7, #4]
 80223d6:	655a      	str	r2, [r3, #84]	; 0x54
 80223d8:	683b      	ldr	r3, [r7, #0]
 80223da:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80223dc:	687b      	ldr	r3, [r7, #4]
 80223de:	659a      	str	r2, [r3, #88]	; 0x58
 80223e0:	683b      	ldr	r3, [r7, #0]
 80223e2:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 80223e6:	687b      	ldr	r3, [r7, #4]
 80223e8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 80223ec:	687b      	ldr	r3, [r7, #4]
 80223ee:	4618      	mov	r0, r3
 80223f0:	3708      	adds	r7, #8
 80223f2:	46bd      	mov	sp, r7
 80223f4:	bd80      	pop	{r7, pc}

080223f6 <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEEaSEOS4_>:
 80223f6:	b580      	push	{r7, lr}
 80223f8:	b082      	sub	sp, #8
 80223fa:	af00      	add	r7, sp, #0
 80223fc:	6078      	str	r0, [r7, #4]
 80223fe:	6039      	str	r1, [r7, #0]
 8022400:	687b      	ldr	r3, [r7, #4]
 8022402:	683a      	ldr	r2, [r7, #0]
 8022404:	4611      	mov	r1, r2
 8022406:	4618      	mov	r0, r3
 8022408:	f000 fe9f 	bl	802314a <_ZNSt5dequeI8ResponceSaIS0_EEaSEOS2_>
 802240c:	687b      	ldr	r3, [r7, #4]
 802240e:	4618      	mov	r0, r3
 8022410:	3708      	adds	r7, #8
 8022412:	46bd      	mov	sp, r7
 8022414:	bd80      	pop	{r7, pc}

08022416 <_ZN11QueueSenderaSEOS_>:
struct QueueSender {
 8022416:	b580      	push	{r7, lr}
 8022418:	b082      	sub	sp, #8
 802241a:	af00      	add	r7, sp, #0
 802241c:	6078      	str	r0, [r7, #4]
 802241e:	6039      	str	r1, [r7, #0]
 8022420:	687b      	ldr	r3, [r7, #4]
 8022422:	683a      	ldr	r2, [r7, #0]
 8022424:	4611      	mov	r1, r2
 8022426:	4618      	mov	r0, r3
 8022428:	f000 fe7c 	bl	8023124 <_ZNSt5dequeI7RequestSaIS0_EEaSEOS2_>
 802242c:	687b      	ldr	r3, [r7, #4]
 802242e:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8022432:	683b      	ldr	r3, [r7, #0]
 8022434:	3328      	adds	r3, #40	; 0x28
 8022436:	4619      	mov	r1, r3
 8022438:	4610      	mov	r0, r2
 802243a:	f7ff ffdc 	bl	80223f6 <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEEaSEOS4_>
 802243e:	687b      	ldr	r3, [r7, #4]
 8022440:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8022444:	683b      	ldr	r3, [r7, #0]
 8022446:	3350      	adds	r3, #80	; 0x50
 8022448:	4619      	mov	r1, r3
 802244a:	4610      	mov	r0, r2
 802244c:	f7fe fe28 	bl	80210a0 <_ZN7RequestaSEOS_>
 8022450:	683b      	ldr	r3, [r7, #0]
 8022452:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
 8022456:	687b      	ldr	r3, [r7, #4]
 8022458:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 802245c:	683b      	ldr	r3, [r7, #0]
 802245e:	f893 2065 	ldrb.w	r2, [r3, #101]	; 0x65
 8022462:	687b      	ldr	r3, [r7, #4]
 8022464:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8022468:	687b      	ldr	r3, [r7, #4]
 802246a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 802246e:	683b      	ldr	r3, [r7, #0]
 8022470:	3368      	adds	r3, #104	; 0x68
 8022472:	4619      	mov	r1, r3
 8022474:	4610      	mov	r0, r2
 8022476:	f000 fadc 	bl	8022a32 <_ZNSt6vectorIhSaIhEEaSEOS1_>
 802247a:	683b      	ldr	r3, [r7, #0]
 802247c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 802247e:	687b      	ldr	r3, [r7, #4]
 8022480:	675a      	str	r2, [r3, #116]	; 0x74
 8022482:	683b      	ldr	r3, [r7, #0]
 8022484:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8022486:	687b      	ldr	r3, [r7, #4]
 8022488:	679a      	str	r2, [r3, #120]	; 0x78
 802248a:	687b      	ldr	r3, [r7, #4]
 802248c:	4618      	mov	r0, r3
 802248e:	3708      	adds	r7, #8
 8022490:	46bd      	mov	sp, r7
 8022492:	bd80      	pop	{r7, pc}

08022494 <_ZN17IMUFrameContaineraSEOS_>:
class IMUFrameContainer {
 8022494:	b580      	push	{r7, lr}
 8022496:	b082      	sub	sp, #8
 8022498:	af00      	add	r7, sp, #0
 802249a:	6078      	str	r0, [r7, #4]
 802249c:	6039      	str	r1, [r7, #0]
 802249e:	687b      	ldr	r3, [r7, #4]
 80224a0:	683a      	ldr	r2, [r7, #0]
 80224a2:	4611      	mov	r1, r2
 80224a4:	4618      	mov	r0, r3
 80224a6:	f000 fe63 	bl	8023170 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEaSEOS3_>
 80224aa:	683b      	ldr	r3, [r7, #0]
 80224ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80224ae:	687b      	ldr	r3, [r7, #4]
 80224b0:	629a      	str	r2, [r3, #40]	; 0x28
 80224b2:	683b      	ldr	r3, [r7, #0]
 80224b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80224b6:	687b      	ldr	r3, [r7, #4]
 80224b8:	62da      	str	r2, [r3, #44]	; 0x2c
 80224ba:	687b      	ldr	r3, [r7, #4]
 80224bc:	4618      	mov	r0, r3
 80224be:	3708      	adds	r7, #8
 80224c0:	46bd      	mov	sp, r7
 80224c2:	bd80      	pop	{r7, pc}

080224c4 <_ZN18MotherboardContextaSEOS_>:
 80224c4:	b580      	push	{r7, lr}
 80224c6:	b082      	sub	sp, #8
 80224c8:	af00      	add	r7, sp, #0
 80224ca:	6078      	str	r0, [r7, #4]
 80224cc:	6039      	str	r1, [r7, #0]
 80224ce:	687b      	ldr	r3, [r7, #4]
 80224d0:	683a      	ldr	r2, [r7, #0]
 80224d2:	4611      	mov	r1, r2
 80224d4:	4618      	mov	r0, r3
 80224d6:	f7ff ff50 	bl	802237a <_ZN13HeadInterfaceaSEOS_>
 80224da:	687b      	ldr	r3, [r7, #4]
 80224dc:	f103 0260 	add.w	r2, r3, #96	; 0x60
 80224e0:	683b      	ldr	r3, [r7, #0]
 80224e2:	3360      	adds	r3, #96	; 0x60
 80224e4:	4619      	mov	r1, r3
 80224e6:	4610      	mov	r0, r2
 80224e8:	f7ff ff47 	bl	802237a <_ZN13HeadInterfaceaSEOS_>
 80224ec:	687b      	ldr	r3, [r7, #4]
 80224ee:	683a      	ldr	r2, [r7, #0]
 80224f0:	f8b2 20c0 	ldrh.w	r2, [r2, #192]	; 0xc0
 80224f4:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
 80224f8:	687b      	ldr	r3, [r7, #4]
 80224fa:	f103 02c4 	add.w	r2, r3, #196	; 0xc4
 80224fe:	683b      	ldr	r3, [r7, #0]
 8022500:	33c4      	adds	r3, #196	; 0xc4
 8022502:	4619      	mov	r1, r3
 8022504:	4610      	mov	r0, r2
 8022506:	f7ff ff86 	bl	8022416 <_ZN11QueueSenderaSEOS_>
 802250a:	687b      	ldr	r3, [r7, #4]
 802250c:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 8022510:	683b      	ldr	r3, [r7, #0]
 8022512:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8022516:	4619      	mov	r1, r3
 8022518:	4610      	mov	r0, r2
 802251a:	f7ff ffbb 	bl	8022494 <_ZN17IMUFrameContaineraSEOS_>
 802251e:	687a      	ldr	r2, [r7, #4]
 8022520:	683b      	ldr	r3, [r7, #0]
 8022522:	f502 70b8 	add.w	r0, r2, #368	; 0x170
 8022526:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 802252a:	f241 1250 	movw	r2, #4432	; 0x1150
 802252e:	4619      	mov	r1, r3
 8022530:	f01a fd2e 	bl	803cf90 <memcpy>
 8022534:	683b      	ldr	r3, [r7, #0]
 8022536:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802253a:	f893 22c1 	ldrb.w	r2, [r3, #705]	; 0x2c1
 802253e:	687b      	ldr	r3, [r7, #4]
 8022540:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8022544:	f883 22c1 	strb.w	r2, [r3, #705]	; 0x2c1
 8022548:	687b      	ldr	r3, [r7, #4]
 802254a:	4618      	mov	r0, r3
 802254c:	3708      	adds	r7, #8
 802254e:	46bd      	mov	sp, r7
 8022550:	bd80      	pop	{r7, pc}
	...

08022554 <MotherboardInit>:
};

static MotherboardContext mbctx;

int MotherboardInit(MotherboardConfig conf) {
 8022554:	b084      	sub	sp, #16
 8022556:	b5b0      	push	{r4, r5, r7, lr}
 8022558:	f5ad 5d96 	sub.w	sp, sp, #4800	; 0x12c0
 802255c:	b086      	sub	sp, #24
 802255e:	af04      	add	r7, sp, #16
 8022560:	f241 24d8 	movw	r4, #4824	; 0x12d8
 8022564:	443c      	add	r4, r7
 8022566:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	mbctx = MotherboardContext { conf };
 802256a:	4c1e      	ldr	r4, [pc, #120]	; (80225e4 <MotherboardInit+0x90>)
 802256c:	f241 23c8 	movw	r3, #4808	; 0x12c8
 8022570:	4423      	add	r3, r4
 8022572:	19dc      	adds	r4, r3, r7
 8022574:	466d      	mov	r5, sp
 8022576:	f241 23e4 	movw	r3, #4836	; 0x12e4
 802257a:	443b      	add	r3, r7
 802257c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802257e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8022582:	f241 23d8 	movw	r3, #4824	; 0x12d8
 8022586:	443b      	add	r3, r7
 8022588:	cb0e      	ldmia	r3, {r1, r2, r3}
 802258a:	4620      	mov	r0, r4
 802258c:	f7ff fe15 	bl	80221ba <_ZN18MotherboardContextC1E17MotherboardConfig>
 8022590:	4b14      	ldr	r3, [pc, #80]	; (80225e4 <MotherboardInit+0x90>)
 8022592:	f503 5396 	add.w	r3, r3, #4800	; 0x12c0
 8022596:	f103 0308 	add.w	r3, r3, #8
 802259a:	443b      	add	r3, r7
 802259c:	4619      	mov	r1, r3
 802259e:	4812      	ldr	r0, [pc, #72]	; (80225e8 <MotherboardInit+0x94>)
 80225a0:	f7ff ff90 	bl	80224c4 <_ZN18MotherboardContextaSEOS_>
 80225a4:	4b0f      	ldr	r3, [pc, #60]	; (80225e4 <MotherboardInit+0x90>)
 80225a6:	f503 5396 	add.w	r3, r3, #4800	; 0x12c0
 80225aa:	f103 0308 	add.w	r3, r3, #8
 80225ae:	443b      	add	r3, r7
 80225b0:	4618      	mov	r0, r3
 80225b2:	f7ff feb5 	bl	8022320 <_ZN18MotherboardContextD1Ev>

	mbctx.HeadService.ResetReadState();
 80225b6:	480c      	ldr	r0, [pc, #48]	; (80225e8 <MotherboardInit+0x94>)
 80225b8:	f7ff f860 	bl	802167c <_ZN13HeadInterface14ResetReadStateEv>
	mbctx.HeadStream.ResetReadState();
 80225bc:	480b      	ldr	r0, [pc, #44]	; (80225ec <MotherboardInit+0x98>)
 80225be:	f7ff f85d 	bl	802167c <_ZN13HeadInterface14ResetReadStateEv>
	return mbctx.IMU.Init(800, 0);
 80225c2:	2100      	movs	r1, #0
 80225c4:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 80225f0 <MotherboardInit+0x9c>
 80225c8:	480a      	ldr	r0, [pc, #40]	; (80225f4 <MotherboardInit+0xa0>)
 80225ca:	f7fe f879 	bl	80206c0 <_ZN10BHYWrapper4InitEfm>
 80225ce:	4603      	mov	r3, r0
}
 80225d0:	4618      	mov	r0, r3
 80225d2:	f507 5796 	add.w	r7, r7, #4800	; 0x12c0
 80225d6:	3708      	adds	r7, #8
 80225d8:	46bd      	mov	sp, r7
 80225da:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80225de:	b004      	add	sp, #16
 80225e0:	4770      	bx	lr
 80225e2:	bf00      	nop
 80225e4:	ffffed38 	.word	0xffffed38
 80225e8:	240001d0 	.word	0x240001d0
 80225ec:	24000230 	.word	0x24000230
 80225f0:	44480000 	.word	0x44480000
 80225f4:	24000340 	.word	0x24000340

080225f8 <MotherboardTick>:

int MotherboardTick() {
 80225f8:	b580      	push	{r7, lr}
 80225fa:	b094      	sub	sp, #80	; 0x50
 80225fc:	af02      	add	r7, sp, #8
	if (mbctx.UpdateIMU)
 80225fe:	4b3d      	ldr	r3, [pc, #244]	; (80226f4 <MotherboardTick+0xfc>)
 8022600:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8022604:	f893 32c1 	ldrb.w	r3, [r3, #705]	; 0x2c1
 8022608:	2b00      	cmp	r3, #0
 802260a:	d00b      	beq.n	8022624 <MotherboardTick+0x2c>
		mbctx.UpdateIMU = !mbctx.IMU.Poll();
 802260c:	483a      	ldr	r0, [pc, #232]	; (80226f8 <MotherboardTick+0x100>)
 802260e:	f7fe f9af 	bl	8020970 <_ZN10BHYWrapper4PollEv>
 8022612:	4603      	mov	r3, r0
 8022614:	f083 0301 	eor.w	r3, r3, #1
 8022618:	b2da      	uxtb	r2, r3
 802261a:	4b36      	ldr	r3, [pc, #216]	; (80226f4 <MotherboardTick+0xfc>)
 802261c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8022620:	f883 22c1 	strb.w	r2, [r3, #705]	; 0x2c1

	if (mbctx.HeadService.HasRequest()) {
 8022624:	4833      	ldr	r0, [pc, #204]	; (80226f4 <MotherboardTick+0xfc>)
 8022626:	f7ff f83c 	bl	80216a2 <_ZNK13HeadInterface10HasRequestEv>
 802262a:	4603      	mov	r3, r0
 802262c:	2b00      	cmp	r3, #0
 802262e:	d044      	beq.n	80226ba <MotherboardTick+0xc2>
		auto request = mbctx.HeadService.GetRequest();
 8022630:	1d3b      	adds	r3, r7, #4
 8022632:	4930      	ldr	r1, [pc, #192]	; (80226f4 <MotherboardTick+0xfc>)
 8022634:	4618      	mov	r0, r3
 8022636:	f7ff f8e9 	bl	802180c <_ZN13HeadInterface10GetRequestEv>

		switch (request.PeripheryID) {
 802263a:	7d7b      	ldrb	r3, [r7, #21]
 802263c:	2b02      	cmp	r3, #2
 802263e:	d006      	beq.n	802264e <MotherboardTick+0x56>
 8022640:	2b02      	cmp	r3, #2
 8022642:	dc36      	bgt.n	80226b2 <MotherboardTick+0xba>
 8022644:	2b00      	cmp	r3, #0
 8022646:	d015      	beq.n	8022674 <MotherboardTick+0x7c>
 8022648:	2b01      	cmp	r3, #1
 802264a:	d01d      	beq.n	8022688 <MotherboardTick+0x90>
 802264c:	e031      	b.n	80226b2 <MotherboardTick+0xba>
		case Periphery::Ack:
			mbctx.HeadService.Send(mbctx.AckHandler.Handle(request));
 802264e:	f107 0318 	add.w	r3, r7, #24
 8022652:	1d3a      	adds	r2, r7, #4
 8022654:	4929      	ldr	r1, [pc, #164]	; (80226fc <MotherboardTick+0x104>)
 8022656:	4618      	mov	r0, r3
 8022658:	f7ff fd14 	bl	8022084 <_ZN18AcknowledgeHandler6HandleERK7Request>
 802265c:	f107 0318 	add.w	r3, r7, #24
 8022660:	4619      	mov	r1, r3
 8022662:	4824      	ldr	r0, [pc, #144]	; (80226f4 <MotherboardTick+0xfc>)
 8022664:	f7ff f82d 	bl	80216c2 <_ZN13HeadInterface4SendERK8Responce>
 8022668:	f107 0318 	add.w	r3, r7, #24
 802266c:	4618      	mov	r0, r3
 802266e:	f7fe fd33 	bl	80210d8 <_ZN8ResponceD1Ev>
			break;
 8022672:	e01e      	b.n	80226b2 <MotherboardTick+0xba>

		case Periphery::Body:
			mbctx.Body.AddRequest(std::move(request));
 8022674:	1d3b      	adds	r3, r7, #4
 8022676:	4618      	mov	r0, r3
 8022678:	f000 f9a5 	bl	80229c6 <_ZSt4moveIR7RequestEONSt16remove_referenceIT_E4typeEOS3_>
 802267c:	4603      	mov	r3, r0
 802267e:	4619      	mov	r1, r3
 8022680:	481f      	ldr	r0, [pc, #124]	; (8022700 <MotherboardTick+0x108>)
 8022682:	f7fe fd36 	bl	80210f2 <_ZN11QueueSender10AddRequestEO7Request>
			break;
 8022686:	e014      	b.n	80226b2 <MotherboardTick+0xba>
		case Periphery::Imu:
			mbctx.HeadService.Send(
					mbctx.IMUHandler.Handle(request, mbctx.FrameContainer,
 8022688:	f107 0028 	add.w	r0, r7, #40	; 0x28
 802268c:	1d3a      	adds	r2, r7, #4
 802268e:	4b1a      	ldr	r3, [pc, #104]	; (80226f8 <MotherboardTick+0x100>)
 8022690:	9300      	str	r3, [sp, #0]
 8022692:	4b1c      	ldr	r3, [pc, #112]	; (8022704 <MotherboardTick+0x10c>)
 8022694:	491c      	ldr	r1, [pc, #112]	; (8022708 <MotherboardTick+0x110>)
 8022696:	f7ff fc4f 	bl	8021f38 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapper>
			mbctx.HeadService.Send(
 802269a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 802269e:	4619      	mov	r1, r3
 80226a0:	4814      	ldr	r0, [pc, #80]	; (80226f4 <MotherboardTick+0xfc>)
 80226a2:	f7ff f80e 	bl	80216c2 <_ZN13HeadInterface4SendERK8Responce>
					mbctx.IMUHandler.Handle(request, mbctx.FrameContainer,
 80226a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80226aa:	4618      	mov	r0, r3
 80226ac:	f7fe fd14 	bl	80210d8 <_ZN8ResponceD1Ev>
							mbctx.IMU));
			break;
 80226b0:	bf00      	nop
		auto request = mbctx.HeadService.GetRequest();
 80226b2:	1d3b      	adds	r3, r7, #4
 80226b4:	4618      	mov	r0, r3
 80226b6:	f7fe fca2 	bl	8020ffe <_ZN7RequestD1Ev>
		}
	}

	if (mbctx.Body.HasResponce()) {
 80226ba:	4811      	ldr	r0, [pc, #68]	; (8022700 <MotherboardTick+0x108>)
 80226bc:	f7fe fd72 	bl	80211a4 <_ZNK11QueueSender11HasResponceEv>
 80226c0:	4603      	mov	r3, r0
 80226c2:	2b00      	cmp	r3, #0
 80226c4:	d010      	beq.n	80226e8 <MotherboardTick+0xf0>
		mbctx.HeadService.Send(mbctx.Body.GetResponce());
 80226c6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80226ca:	490d      	ldr	r1, [pc, #52]	; (8022700 <MotherboardTick+0x108>)
 80226cc:	4618      	mov	r0, r3
 80226ce:	f7fe fdb7 	bl	8021240 <_ZN11QueueSender11GetResponceEv>
 80226d2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80226d6:	4619      	mov	r1, r3
 80226d8:	4806      	ldr	r0, [pc, #24]	; (80226f4 <MotherboardTick+0xfc>)
 80226da:	f7fe fff2 	bl	80216c2 <_ZN13HeadInterface4SendERK8Responce>
 80226de:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80226e2:	4618      	mov	r0, r3
 80226e4:	f7fe fcf8 	bl	80210d8 <_ZN8ResponceD1Ev>
	}

	return 0;
 80226e8:	2300      	movs	r3, #0
}
 80226ea:	4618      	mov	r0, r3
 80226ec:	3748      	adds	r7, #72	; 0x48
 80226ee:	46bd      	mov	sp, r7
 80226f0:	bd80      	pop	{r7, pc}
 80226f2:	bf00      	nop
 80226f4:	240001d0 	.word	0x240001d0
 80226f8:	24000340 	.word	0x24000340
 80226fc:	24000290 	.word	0x24000290
 8022700:	24000294 	.word	0x24000294
 8022704:	24000310 	.word	0x24000310
 8022708:	24001490 	.word	0x24001490

0802270c <MotherboardOnStrobe>:

void MotherboardOnStrobe() {
 802270c:	b580      	push	{r7, lr}
 802270e:	b086      	sub	sp, #24
 8022710:	af00      	add	r7, sp, #0
	mbctx.FrameContainer.Add(mbctx.IMU.GetFrame());
 8022712:	1d3b      	adds	r3, r7, #4
 8022714:	4906      	ldr	r1, [pc, #24]	; (8022730 <MotherboardOnStrobe+0x24>)
 8022716:	4618      	mov	r0, r3
 8022718:	f7fe f964 	bl	80209e4 <_ZNK10BHYWrapper8GetFrameEv>
 802271c:	1d3b      	adds	r3, r7, #4
 802271e:	4619      	mov	r1, r3
 8022720:	4804      	ldr	r0, [pc, #16]	; (8022734 <MotherboardOnStrobe+0x28>)
 8022722:	f7ff f9f1 	bl	8021b08 <_ZN17IMUFrameContainer3AddERKN10BHYWrapper8BHYFrameE>
}
 8022726:	bf00      	nop
 8022728:	3718      	adds	r7, #24
 802272a:	46bd      	mov	sp, r7
 802272c:	bd80      	pop	{r7, pc}
 802272e:	bf00      	nop
 8022730:	24000340 	.word	0x24000340
 8022734:	24000310 	.word	0x24000310

08022738 <MotherboardOnBodyRecieveComplete>:

void MotherboardOnBodyRecieveComplete() {
 8022738:	b580      	push	{r7, lr}
 802273a:	af00      	add	r7, sp, #0
	mbctx.Body.ProcessResponces();
 802273c:	4802      	ldr	r0, [pc, #8]	; (8022748 <MotherboardOnBodyRecieveComplete+0x10>)
 802273e:	f7fe ff30 	bl	80215a2 <_ZN11QueueSender16ProcessResponcesEv>
}
 8022742:	bf00      	nop
 8022744:	bd80      	pop	{r7, pc}
 8022746:	bf00      	nop
 8022748:	24000294 	.word	0x24000294

0802274c <MotherboardOnHeadServiceRecieveComplete>:

void MotherboardOnHeadServiceRecieveComplete() {
 802274c:	b580      	push	{r7, lr}
 802274e:	af00      	add	r7, sp, #0
	mbctx.HeadService.ProcessRecievedData();
 8022750:	4802      	ldr	r0, [pc, #8]	; (802275c <MotherboardOnHeadServiceRecieveComplete+0x10>)
 8022752:	f7ff f897 	bl	8021884 <_ZN13HeadInterface19ProcessRecievedDataEv>
}
 8022756:	bf00      	nop
 8022758:	bd80      	pop	{r7, pc}
 802275a:	bf00      	nop
 802275c:	240001d0 	.word	0x240001d0

08022760 <MotherboardOnHeadStreamRecieveComplete>:

void MotherboardOnHeadStreamRecieveComplete() {
 8022760:	b580      	push	{r7, lr}
 8022762:	af00      	add	r7, sp, #0
	mbctx.HeadStream.ProcessRecievedData();
 8022764:	4802      	ldr	r0, [pc, #8]	; (8022770 <MotherboardOnHeadStreamRecieveComplete+0x10>)
 8022766:	f7ff f88d 	bl	8021884 <_ZN13HeadInterface19ProcessRecievedDataEv>
}
 802276a:	bf00      	nop
 802276c:	bd80      	pop	{r7, pc}
 802276e:	bf00      	nop
 8022770:	24000230 	.word	0x24000230

08022774 <MotherboardOnHeadServiceTransmitComplete>:

void MotherboardOnHeadServiceTransmitComplete() {
 8022774:	b580      	push	{r7, lr}
 8022776:	af00      	add	r7, sp, #0
	mbctx.HeadService.FinishTransmit();
 8022778:	4802      	ldr	r0, [pc, #8]	; (8022784 <MotherboardOnHeadServiceTransmitComplete+0x10>)
 802277a:	f7ff f875 	bl	8021868 <_ZN13HeadInterface14FinishTransmitEv>
}
 802277e:	bf00      	nop
 8022780:	bd80      	pop	{r7, pc}
 8022782:	bf00      	nop
 8022784:	240001d0 	.word	0x240001d0

08022788 <MotherboardOnHeadStreamTransmitComplete>:

void MotherboardOnHeadStreamTransmitComplete() {
 8022788:	b580      	push	{r7, lr}
 802278a:	af00      	add	r7, sp, #0
	mbctx.HeadStream.FinishTransmit();
 802278c:	4802      	ldr	r0, [pc, #8]	; (8022798 <MotherboardOnHeadStreamTransmitComplete+0x10>)
 802278e:	f7ff f86b 	bl	8021868 <_ZN13HeadInterface14FinishTransmitEv>
}
 8022792:	bf00      	nop
 8022794:	bd80      	pop	{r7, pc}
 8022796:	bf00      	nop
 8022798:	24000230 	.word	0x24000230

0802279c <MotherboardOnBodyTimerTick>:

void MotherboardOnBodyTimerTick() {
 802279c:	b580      	push	{r7, lr}
 802279e:	af00      	add	r7, sp, #0
	mbctx.Body.ProcessPriorityRequest();
 80227a0:	4803      	ldr	r0, [pc, #12]	; (80227b0 <MotherboardOnBodyTimerTick+0x14>)
 80227a2:	f7fe fd7d 	bl	80212a0 <_ZN11QueueSender22ProcessPriorityRequestEv>
	mbctx.Body.ProcessRequests();
 80227a6:	4802      	ldr	r0, [pc, #8]	; (80227b0 <MotherboardOnBodyTimerTick+0x14>)
 80227a8:	f7fe fe18 	bl	80213dc <_ZN11QueueSender15ProcessRequestsEv>
}
 80227ac:	bf00      	nop
 80227ae:	bd80      	pop	{r7, pc}
 80227b0:	24000294 	.word	0x24000294

080227b4 <MotherboardOnImuTimerTick>:

void MotherboardOnImuTimerTick() {
 80227b4:	b480      	push	{r7}
 80227b6:	af00      	add	r7, sp, #0
	mbctx.UpdateIMU = true;
 80227b8:	4b05      	ldr	r3, [pc, #20]	; (80227d0 <MotherboardOnImuTimerTick+0x1c>)
 80227ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80227be:	2201      	movs	r2, #1
 80227c0:	f883 22c1 	strb.w	r2, [r3, #705]	; 0x2c1
}
 80227c4:	bf00      	nop
 80227c6:	46bd      	mov	sp, r7
 80227c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80227cc:	4770      	bx	lr
 80227ce:	bf00      	nop
 80227d0:	240001d0 	.word	0x240001d0

080227d4 <_ZNSt11_Deque_baseI7RequestSaIS0_EE11_Deque_implD1Ev>:
      struct _Deque_impl
 80227d4:	b580      	push	{r7, lr}
 80227d6:	b082      	sub	sp, #8
 80227d8:	af00      	add	r7, sp, #0
 80227da:	6078      	str	r0, [r7, #4]
 80227dc:	6878      	ldr	r0, [r7, #4]
 80227de:	f000 fcea 	bl	80231b6 <_ZNSaI7RequestED1Ev>
 80227e2:	687b      	ldr	r3, [r7, #4]
 80227e4:	4618      	mov	r0, r3
 80227e6:	3708      	adds	r7, #8
 80227e8:	46bd      	mov	sp, r7
 80227ea:	bd80      	pop	{r7, pc}

080227ec <_ZNSt11_Deque_baseI7RequestSaIS0_EEC1Ev>:
      _Deque_base()
 80227ec:	b580      	push	{r7, lr}
 80227ee:	b082      	sub	sp, #8
 80227f0:	af00      	add	r7, sp, #0
 80227f2:	6078      	str	r0, [r7, #4]
      : _M_impl()
 80227f4:	687b      	ldr	r3, [r7, #4]
 80227f6:	4618      	mov	r0, r3
 80227f8:	f000 fccd 	bl	8023196 <_ZNSt11_Deque_baseI7RequestSaIS0_EE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 80227fc:	2100      	movs	r1, #0
 80227fe:	6878      	ldr	r0, [r7, #4]
 8022800:	f000 fce5 	bl	80231ce <_ZNSt11_Deque_baseI7RequestSaIS0_EE17_M_initialize_mapEj>
 8022804:	687b      	ldr	r3, [r7, #4]
 8022806:	4618      	mov	r0, r3
 8022808:	3708      	adds	r7, #8
 802280a:	46bd      	mov	sp, r7
 802280c:	bd80      	pop	{r7, pc}

0802280e <_ZNSt11_Deque_baseI7RequestSaIS0_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 802280e:	b580      	push	{r7, lr}
 8022810:	b082      	sub	sp, #8
 8022812:	af00      	add	r7, sp, #0
 8022814:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 8022816:	687b      	ldr	r3, [r7, #4]
 8022818:	681b      	ldr	r3, [r3, #0]
 802281a:	2b00      	cmp	r3, #0
 802281c:	d010      	beq.n	8022840 <_ZNSt11_Deque_baseI7RequestSaIS0_EED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 802281e:	687b      	ldr	r3, [r7, #4]
 8022820:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 8022822:	687b      	ldr	r3, [r7, #4]
 8022824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8022826:	3304      	adds	r3, #4
 8022828:	461a      	mov	r2, r3
 802282a:	6878      	ldr	r0, [r7, #4]
 802282c:	f000 fd35 	bl	802329a <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_M_destroy_nodesEPPS0_S4_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8022830:	687b      	ldr	r3, [r7, #4]
 8022832:	6819      	ldr	r1, [r3, #0]
 8022834:	687b      	ldr	r3, [r7, #4]
 8022836:	685b      	ldr	r3, [r3, #4]
 8022838:	461a      	mov	r2, r3
 802283a:	6878      	ldr	r0, [r7, #4]
 802283c:	f000 fd47 	bl	80232ce <_ZNSt11_Deque_baseI7RequestSaIS0_EE17_M_deallocate_mapEPPS0_j>
    }
 8022840:	687b      	ldr	r3, [r7, #4]
 8022842:	4618      	mov	r0, r3
 8022844:	f7ff ffc6 	bl	80227d4 <_ZNSt11_Deque_baseI7RequestSaIS0_EE11_Deque_implD1Ev>
 8022848:	687b      	ldr	r3, [r7, #4]
 802284a:	4618      	mov	r0, r3
 802284c:	3708      	adds	r7, #8
 802284e:	46bd      	mov	sp, r7
 8022850:	bd80      	pop	{r7, pc}

08022852 <_ZNSt5dequeI7RequestSaIS0_EED1Ev>:
      /**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~deque()
 8022852:	b580      	push	{r7, lr}
 8022854:	b08a      	sub	sp, #40	; 0x28
 8022856:	af00      	add	r7, sp, #0
 8022858:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 802285a:	f107 0308 	add.w	r3, r7, #8
 802285e:	6879      	ldr	r1, [r7, #4]
 8022860:	4618      	mov	r0, r3
 8022862:	f000 fd50 	bl	8023306 <_ZNSt5dequeI7RequestSaIS0_EE5beginEv>
 8022866:	f107 0318 	add.w	r3, r7, #24
 802286a:	6879      	ldr	r1, [r7, #4]
 802286c:	4618      	mov	r0, r3
 802286e:	f000 fd59 	bl	8023324 <_ZNSt5dequeI7RequestSaIS0_EE3endEv>
 8022872:	687b      	ldr	r3, [r7, #4]
 8022874:	4618      	mov	r0, r3
 8022876:	f000 fd64 	bl	8023342 <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 802287a:	4603      	mov	r3, r0
 802287c:	f107 0218 	add.w	r2, r7, #24
 8022880:	f107 0108 	add.w	r1, r7, #8
 8022884:	6878      	ldr	r0, [r7, #4]
 8022886:	f000 fd83 	bl	8023390 <_ZNSt5dequeI7RequestSaIS0_EE15_M_destroy_dataESt15_Deque_iteratorIS0_RS0_PS0_ES6_RKS1_>
 802288a:	687b      	ldr	r3, [r7, #4]
 802288c:	4618      	mov	r0, r3
 802288e:	f7ff ffbe 	bl	802280e <_ZNSt11_Deque_baseI7RequestSaIS0_EED1Ev>
 8022892:	687b      	ldr	r3, [r7, #4]
 8022894:	4618      	mov	r0, r3
 8022896:	3728      	adds	r7, #40	; 0x28
 8022898:	46bd      	mov	sp, r7
 802289a:	bd80      	pop	{r7, pc}

0802289c <_ZNSt5dequeI8ResponceSaIS0_EEC1Ev>:
      deque() = default;
 802289c:	b580      	push	{r7, lr}
 802289e:	b082      	sub	sp, #8
 80228a0:	af00      	add	r7, sp, #0
 80228a2:	6078      	str	r0, [r7, #4]
 80228a4:	687b      	ldr	r3, [r7, #4]
 80228a6:	4618      	mov	r0, r3
 80228a8:	f000 fd9d 	bl	80233e6 <_ZNSt11_Deque_baseI8ResponceSaIS0_EEC1Ev>
 80228ac:	687b      	ldr	r3, [r7, #4]
 80228ae:	4618      	mov	r0, r3
 80228b0:	3708      	adds	r7, #8
 80228b2:	46bd      	mov	sp, r7
 80228b4:	bd80      	pop	{r7, pc}

080228b6 <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEEC1IS3_vEEv>:
      queue(const _Sequence& __c = _Sequence())
      : c(__c) { }
#else
      template<typename _Seq = _Sequence, typename _Requires = typename
	       enable_if<is_default_constructible<_Seq>::value>::type>
	queue()
 80228b6:	b580      	push	{r7, lr}
 80228b8:	b082      	sub	sp, #8
 80228ba:	af00      	add	r7, sp, #0
 80228bc:	6078      	str	r0, [r7, #4]
	: c() { }
 80228be:	687b      	ldr	r3, [r7, #4]
 80228c0:	4618      	mov	r0, r3
 80228c2:	2328      	movs	r3, #40	; 0x28
 80228c4:	461a      	mov	r2, r3
 80228c6:	2100      	movs	r1, #0
 80228c8:	f01a fb8a 	bl	803cfe0 <memset>
 80228cc:	687b      	ldr	r3, [r7, #4]
 80228ce:	4618      	mov	r0, r3
 80228d0:	f7ff ffe4 	bl	802289c <_ZNSt5dequeI8ResponceSaIS0_EEC1Ev>
 80228d4:	687b      	ldr	r3, [r7, #4]
 80228d6:	4618      	mov	r0, r3
 80228d8:	3708      	adds	r7, #8
 80228da:	46bd      	mov	sp, r7
 80228dc:	bd80      	pop	{r7, pc}

080228de <_ZNSt5dequeI8ResponceSaIS0_EED1Ev>:
      ~deque()
 80228de:	b580      	push	{r7, lr}
 80228e0:	b08a      	sub	sp, #40	; 0x28
 80228e2:	af00      	add	r7, sp, #0
 80228e4:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 80228e6:	f107 0308 	add.w	r3, r7, #8
 80228ea:	6879      	ldr	r1, [r7, #4]
 80228ec:	4618      	mov	r0, r3
 80228ee:	f000 fdad 	bl	802344c <_ZNSt5dequeI8ResponceSaIS0_EE5beginEv>
 80228f2:	f107 0318 	add.w	r3, r7, #24
 80228f6:	6879      	ldr	r1, [r7, #4]
 80228f8:	4618      	mov	r0, r3
 80228fa:	f000 fdb6 	bl	802346a <_ZNSt5dequeI8ResponceSaIS0_EE3endEv>
 80228fe:	687b      	ldr	r3, [r7, #4]
 8022900:	4618      	mov	r0, r3
 8022902:	f000 fdc1 	bl	8023488 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 8022906:	4603      	mov	r3, r0
 8022908:	f107 0218 	add.w	r2, r7, #24
 802290c:	f107 0108 	add.w	r1, r7, #8
 8022910:	6878      	ldr	r0, [r7, #4]
 8022912:	f000 fde0 	bl	80234d6 <_ZNSt5dequeI8ResponceSaIS0_EE15_M_destroy_dataESt15_Deque_iteratorIS0_RS0_PS0_ES6_RKS1_>
 8022916:	687b      	ldr	r3, [r7, #4]
 8022918:	4618      	mov	r0, r3
 802291a:	f000 fd75 	bl	8023408 <_ZNSt11_Deque_baseI8ResponceSaIS0_EED1Ev>
 802291e:	687b      	ldr	r3, [r7, #4]
 8022920:	4618      	mov	r0, r3
 8022922:	3728      	adds	r7, #40	; 0x28
 8022924:	46bd      	mov	sp, r7
 8022926:	bd80      	pop	{r7, pc}

08022928 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8022928:	b580      	push	{r7, lr}
 802292a:	b082      	sub	sp, #8
 802292c:	af00      	add	r7, sp, #0
 802292e:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8022930:	6878      	ldr	r0, [r7, #4]
 8022932:	f000 fdef 	bl	8023514 <_ZNSaIhEC1Ev>
 8022936:	687b      	ldr	r3, [r7, #4]
 8022938:	4618      	mov	r0, r3
 802293a:	f000 fdf7 	bl	802352c <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1Ev>
	{ }
 802293e:	687b      	ldr	r3, [r7, #4]
 8022940:	4618      	mov	r0, r3
 8022942:	3708      	adds	r7, #8
 8022944:	46bd      	mov	sp, r7
 8022946:	bd80      	pop	{r7, pc}

08022948 <_ZNSaIhED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8022948:	b580      	push	{r7, lr}
 802294a:	b082      	sub	sp, #8
 802294c:	af00      	add	r7, sp, #0
 802294e:	6078      	str	r0, [r7, #4]
 8022950:	6878      	ldr	r0, [r7, #4]
 8022952:	f000 fdff 	bl	8023554 <_ZN9__gnu_cxx13new_allocatorIhED1Ev>
 8022956:	687b      	ldr	r3, [r7, #4]
 8022958:	4618      	mov	r0, r3
 802295a:	3708      	adds	r7, #8
 802295c:	46bd      	mov	sp, r7
 802295e:	bd80      	pop	{r7, pc}

08022960 <_ZNSt12_Vector_baseIhSaIhEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8022960:	b580      	push	{r7, lr}
 8022962:	b082      	sub	sp, #8
 8022964:	af00      	add	r7, sp, #0
 8022966:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8022968:	687b      	ldr	r3, [r7, #4]
 802296a:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 802296c:	687b      	ldr	r3, [r7, #4]
 802296e:	689a      	ldr	r2, [r3, #8]
 8022970:	687b      	ldr	r3, [r7, #4]
 8022972:	681b      	ldr	r3, [r3, #0]
 8022974:	1ad3      	subs	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 8022976:	461a      	mov	r2, r3
 8022978:	6878      	ldr	r0, [r7, #4]
 802297a:	f000 fdf6 	bl	802356a <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>
      }
 802297e:	687b      	ldr	r3, [r7, #4]
 8022980:	4618      	mov	r0, r3
 8022982:	f7fe fb09 	bl	8020f98 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implD1Ev>
 8022986:	687b      	ldr	r3, [r7, #4]
 8022988:	4618      	mov	r0, r3
 802298a:	3708      	adds	r7, #8
 802298c:	46bd      	mov	sp, r7
 802298e:	bd80      	pop	{r7, pc}

08022990 <_ZNSt6vectorIhSaIhEED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 8022990:	b5b0      	push	{r4, r5, r7, lr}
 8022992:	b082      	sub	sp, #8
 8022994:	af00      	add	r7, sp, #0
 8022996:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8022998:	687b      	ldr	r3, [r7, #4]
 802299a:	681c      	ldr	r4, [r3, #0]
 802299c:	687b      	ldr	r3, [r7, #4]
 802299e:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 80229a0:	687b      	ldr	r3, [r7, #4]
 80229a2:	4618      	mov	r0, r3
 80229a4:	f000 fdf4 	bl	8023590 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80229a8:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80229aa:	461a      	mov	r2, r3
 80229ac:	4629      	mov	r1, r5
 80229ae:	4620      	mov	r0, r4
 80229b0:	f000 fdf9 	bl	80235a6 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 80229b4:	687b      	ldr	r3, [r7, #4]
 80229b6:	4618      	mov	r0, r3
 80229b8:	f7ff ffd2 	bl	8022960 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80229bc:	687b      	ldr	r3, [r7, #4]
 80229be:	4618      	mov	r0, r3
 80229c0:	3708      	adds	r7, #8
 80229c2:	46bd      	mov	sp, r7
 80229c4:	bdb0      	pop	{r4, r5, r7, pc}

080229c6 <_ZSt4moveIR7RequestEONSt16remove_referenceIT_E4typeEOS3_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 80229c6:	b480      	push	{r7}
 80229c8:	b083      	sub	sp, #12
 80229ca:	af00      	add	r7, sp, #0
 80229cc:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80229ce:	687b      	ldr	r3, [r7, #4]
 80229d0:	4618      	mov	r0, r3
 80229d2:	370c      	adds	r7, #12
 80229d4:	46bd      	mov	sp, r7
 80229d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80229da:	4770      	bx	lr

080229dc <_ZNSt5dequeI7RequestSaIS0_EE12emplace_backIJS0_EEEvDpOT_>:
#if __cplusplus > 201402L
      typename deque<_Tp, _Alloc>::reference
#else
      void
#endif
      deque<_Tp, _Alloc>::
 80229dc:	b5b0      	push	{r4, r5, r7, lr}
 80229de:	b082      	sub	sp, #8
 80229e0:	af00      	add	r7, sp, #0
 80229e2:	6078      	str	r0, [r7, #4]
 80229e4:	6039      	str	r1, [r7, #0]
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish._M_cur
 80229e6:	687b      	ldr	r3, [r7, #4]
 80229e8:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 80229ea:	687b      	ldr	r3, [r7, #4]
 80229ec:	6a1b      	ldr	r3, [r3, #32]
 80229ee:	3b14      	subs	r3, #20
	if (this->_M_impl._M_finish._M_cur
 80229f0:	429a      	cmp	r2, r3
 80229f2:	d012      	beq.n	8022a1a <_ZNSt5dequeI7RequestSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x3e>
	  {
	    _Alloc_traits::construct(this->_M_impl,
 80229f4:	687c      	ldr	r4, [r7, #4]
 80229f6:	687b      	ldr	r3, [r7, #4]
 80229f8:	699d      	ldr	r5, [r3, #24]
 80229fa:	6838      	ldr	r0, [r7, #0]
 80229fc:	f000 fde1 	bl	80235c2 <_ZSt7forwardI7RequestEOT_RNSt16remove_referenceIS1_E4typeE>
 8022a00:	4603      	mov	r3, r0
 8022a02:	461a      	mov	r2, r3
 8022a04:	4629      	mov	r1, r5
 8022a06:	4620      	mov	r0, r4
 8022a08:	f000 fde6 	bl	80235d8 <_ZNSt16allocator_traitsISaI7RequestEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
				     this->_M_impl._M_finish._M_cur,
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish._M_cur;
 8022a0c:	687b      	ldr	r3, [r7, #4]
 8022a0e:	699b      	ldr	r3, [r3, #24]
 8022a10:	f103 0214 	add.w	r2, r3, #20
 8022a14:	687b      	ldr	r3, [r7, #4]
 8022a16:	619a      	str	r2, [r3, #24]
	else
	  _M_push_back_aux(std::forward<_Args>(__args)...);
#if __cplusplus > 201402L
	return back();
#endif
      }
 8022a18:	e007      	b.n	8022a2a <_ZNSt5dequeI7RequestSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x4e>
	  _M_push_back_aux(std::forward<_Args>(__args)...);
 8022a1a:	6838      	ldr	r0, [r7, #0]
 8022a1c:	f000 fdd1 	bl	80235c2 <_ZSt7forwardI7RequestEOT_RNSt16remove_referenceIS1_E4typeE>
 8022a20:	4603      	mov	r3, r0
 8022a22:	4619      	mov	r1, r3
 8022a24:	6878      	ldr	r0, [r7, #4]
 8022a26:	f000 fdeb 	bl	8023600 <_ZNSt5dequeI7RequestSaIS0_EE16_M_push_back_auxIJS0_EEEvDpOT_>
      }
 8022a2a:	bf00      	nop
 8022a2c:	3708      	adds	r7, #8
 8022a2e:	46bd      	mov	sp, r7
 8022a30:	bdb0      	pop	{r4, r5, r7, pc}

08022a32 <_ZNSt6vectorIhSaIhEEaSEOS1_>:
       *  Afterwards @a __x is a valid, but unspecified %vector.
       *
       *  Whether the allocator is moved depends on the allocator traits.
       */
      vector&
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 8022a32:	b590      	push	{r4, r7, lr}
 8022a34:	b085      	sub	sp, #20
 8022a36:	af00      	add	r7, sp, #0
 8022a38:	6078      	str	r0, [r7, #4]
 8022a3a:	6039      	str	r1, [r7, #0]
      {
	constexpr bool __move_storage =
 8022a3c:	2301      	movs	r3, #1
 8022a3e:	73fb      	strb	r3, [r7, #15]
	  _Alloc_traits::_S_propagate_on_move_assign()
	  || _Alloc_traits::_S_always_equal();
	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 8022a40:	6838      	ldr	r0, [r7, #0]
 8022a42:	f000 fe21 	bl	8023688 <_ZSt4moveIRSt6vectorIhSaIhEEEONSt16remove_referenceIT_E4typeEOS5_>
 8022a46:	4603      	mov	r3, r0
 8022a48:	4622      	mov	r2, r4
 8022a4a:	4619      	mov	r1, r3
 8022a4c:	6878      	ldr	r0, [r7, #4]
 8022a4e:	f000 fe26 	bl	802369e <_ZNSt6vectorIhSaIhEE14_M_move_assignEOS1_St17integral_constantIbLb1EE>
	return *this;
 8022a52:	687b      	ldr	r3, [r7, #4]
      }
 8022a54:	4618      	mov	r0, r3
 8022a56:	3714      	adds	r7, #20
 8022a58:	46bd      	mov	sp, r7
 8022a5a:	bd90      	pop	{r4, r7, pc}

08022a5c <_ZNKSt5dequeI7RequestSaIS0_EE5emptyEv>:
      /**
       *  Returns true if the %deque is empty.  (Thus begin() would
       *  equal end().)
       */
      _GLIBCXX_NODISCARD bool
      empty() const _GLIBCXX_NOEXCEPT
 8022a5c:	b580      	push	{r7, lr}
 8022a5e:	b082      	sub	sp, #8
 8022a60:	af00      	add	r7, sp, #0
 8022a62:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
 8022a64:	687b      	ldr	r3, [r7, #4]
 8022a66:	f103 0218 	add.w	r2, r3, #24
 8022a6a:	687b      	ldr	r3, [r7, #4]
 8022a6c:	3308      	adds	r3, #8
 8022a6e:	4619      	mov	r1, r3
 8022a70:	4610      	mov	r0, r2
 8022a72:	f000 fe52 	bl	802371a <_ZSteqRKSt15_Deque_iteratorI7RequestRS0_PS0_ES5_>
 8022a76:	4603      	mov	r3, r0
 8022a78:	4618      	mov	r0, r3
 8022a7a:	3708      	adds	r7, #8
 8022a7c:	46bd      	mov	sp, r7
 8022a7e:	bd80      	pop	{r7, pc}

08022a80 <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE7emplaceIJS0_EEEvDpOT_>:
	emplace(_Args&&... __args)
	{ return c.emplace_back(std::forward<_Args>(__args)...); }
#else
      template<typename... _Args>
	void
	emplace(_Args&&... __args)
 8022a80:	b590      	push	{r4, r7, lr}
 8022a82:	b083      	sub	sp, #12
 8022a84:	af00      	add	r7, sp, #0
 8022a86:	6078      	str	r0, [r7, #4]
 8022a88:	6039      	str	r1, [r7, #0]
	{ c.emplace_back(std::forward<_Args>(__args)...); }
 8022a8a:	687c      	ldr	r4, [r7, #4]
 8022a8c:	6838      	ldr	r0, [r7, #0]
 8022a8e:	f000 fe58 	bl	8023742 <_ZSt7forwardI8ResponceEOT_RNSt16remove_referenceIS1_E4typeE>
 8022a92:	4603      	mov	r3, r0
 8022a94:	4619      	mov	r1, r3
 8022a96:	4620      	mov	r0, r4
 8022a98:	f000 fe5e 	bl	8023758 <_ZNSt5dequeI8ResponceSaIS0_EE12emplace_backIJS0_EEEvDpOT_>
 8022a9c:	bf00      	nop
 8022a9e:	370c      	adds	r7, #12
 8022aa0:	46bd      	mov	sp, r7
 8022aa2:	bd90      	pop	{r4, r7, pc}

08022aa4 <_ZNKSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE5emptyEv>:
      empty() const
 8022aa4:	b580      	push	{r7, lr}
 8022aa6:	b082      	sub	sp, #8
 8022aa8:	af00      	add	r7, sp, #0
 8022aaa:	6078      	str	r0, [r7, #4]
      { return c.empty(); }
 8022aac:	687b      	ldr	r3, [r7, #4]
 8022aae:	4618      	mov	r0, r3
 8022ab0:	f000 fe7d 	bl	80237ae <_ZNKSt5dequeI8ResponceSaIS0_EE5emptyEv>
 8022ab4:	4603      	mov	r3, r0
 8022ab6:	4618      	mov	r0, r3
 8022ab8:	3708      	adds	r7, #8
 8022aba:	46bd      	mov	sp, r7
 8022abc:	bd80      	pop	{r7, pc}

08022abe <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE5frontEv>:
      front()
 8022abe:	b580      	push	{r7, lr}
 8022ac0:	b082      	sub	sp, #8
 8022ac2:	af00      	add	r7, sp, #0
 8022ac4:	6078      	str	r0, [r7, #4]
	return c.front();
 8022ac6:	687b      	ldr	r3, [r7, #4]
 8022ac8:	4618      	mov	r0, r3
 8022aca:	f000 fe82 	bl	80237d2 <_ZNSt5dequeI8ResponceSaIS0_EE5frontEv>
 8022ace:	4603      	mov	r3, r0
      }
 8022ad0:	4618      	mov	r0, r3
 8022ad2:	3708      	adds	r7, #8
 8022ad4:	46bd      	mov	sp, r7
 8022ad6:	bd80      	pop	{r7, pc}

08022ad8 <_ZSt4moveIR8ResponceEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8022ad8:	b480      	push	{r7}
 8022ada:	b083      	sub	sp, #12
 8022adc:	af00      	add	r7, sp, #0
 8022ade:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8022ae0:	687b      	ldr	r3, [r7, #4]
 8022ae2:	4618      	mov	r0, r3
 8022ae4:	370c      	adds	r7, #12
 8022ae6:	46bd      	mov	sp, r7
 8022ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022aec:	4770      	bx	lr

08022aee <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1EOS2_>:
	_Vector_impl(_Vector_impl&& __x) noexcept
 8022aee:	b590      	push	{r4, r7, lr}
 8022af0:	b083      	sub	sp, #12
 8022af2:	af00      	add	r7, sp, #0
 8022af4:	6078      	str	r0, [r7, #4]
 8022af6:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(std::move(__x)), _Vector_impl_data(std::move(__x))
 8022af8:	6838      	ldr	r0, [r7, #0]
 8022afa:	f000 fe7e 	bl	80237fa <_ZSt4moveIRNSt12_Vector_baseIhSaIhEE12_Vector_implEEONSt16remove_referenceIT_E4typeEOS6_>
 8022afe:	4603      	mov	r3, r0
 8022b00:	4619      	mov	r1, r3
 8022b02:	6878      	ldr	r0, [r7, #4]
 8022b04:	f000 fe84 	bl	8023810 <_ZNSaIhEC1ERKS_>
 8022b08:	687c      	ldr	r4, [r7, #4]
 8022b0a:	6838      	ldr	r0, [r7, #0]
 8022b0c:	f000 fe75 	bl	80237fa <_ZSt4moveIRNSt12_Vector_baseIhSaIhEE12_Vector_implEEONSt16remove_referenceIT_E4typeEOS6_>
 8022b10:	4603      	mov	r3, r0
 8022b12:	4619      	mov	r1, r3
 8022b14:	4620      	mov	r0, r4
 8022b16:	f000 fe89 	bl	802382c <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1EOS2_>
	{ }
 8022b1a:	687b      	ldr	r3, [r7, #4]
 8022b1c:	4618      	mov	r0, r3
 8022b1e:	370c      	adds	r7, #12
 8022b20:	46bd      	mov	sp, r7
 8022b22:	bd90      	pop	{r4, r7, pc}

08022b24 <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE3popEv>:
       *  Note that no data is returned, and if the first element's
       *  data is needed, it should be retrieved before pop() is
       *  called.
       */
      void
      pop()
 8022b24:	b580      	push	{r7, lr}
 8022b26:	b082      	sub	sp, #8
 8022b28:	af00      	add	r7, sp, #0
 8022b2a:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	c.pop_front();
 8022b2c:	687b      	ldr	r3, [r7, #4]
 8022b2e:	4618      	mov	r0, r3
 8022b30:	f000 fe9f 	bl	8023872 <_ZNSt5dequeI8ResponceSaIS0_EE9pop_frontEv>
      }
 8022b34:	bf00      	nop
 8022b36:	3708      	adds	r7, #8
 8022b38:	46bd      	mov	sp, r7
 8022b3a:	bd80      	pop	{r7, pc}

08022b3c <_ZNSt6vectorIhSaIhEE6resizeEj>:
       *  number of elements.  If the number is smaller than the
       *  %vector's current size the %vector is truncated, otherwise
       *  default constructed elements are appended.
       */
      void
      resize(size_type __new_size)
 8022b3c:	b580      	push	{r7, lr}
 8022b3e:	b082      	sub	sp, #8
 8022b40:	af00      	add	r7, sp, #0
 8022b42:	6078      	str	r0, [r7, #4]
 8022b44:	6039      	str	r1, [r7, #0]
      {
	if (__new_size > size())
 8022b46:	6878      	ldr	r0, [r7, #4]
 8022b48:	f000 f83b 	bl	8022bc2 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8022b4c:	4602      	mov	r2, r0
 8022b4e:	683b      	ldr	r3, [r7, #0]
 8022b50:	4293      	cmp	r3, r2
 8022b52:	bf8c      	ite	hi
 8022b54:	2301      	movhi	r3, #1
 8022b56:	2300      	movls	r3, #0
 8022b58:	b2db      	uxtb	r3, r3
 8022b5a:	2b00      	cmp	r3, #0
 8022b5c:	d00a      	beq.n	8022b74 <_ZNSt6vectorIhSaIhEE6resizeEj+0x38>
	  _M_default_append(__new_size - size());
 8022b5e:	6878      	ldr	r0, [r7, #4]
 8022b60:	f000 f82f 	bl	8022bc2 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8022b64:	4602      	mov	r2, r0
 8022b66:	683b      	ldr	r3, [r7, #0]
 8022b68:	1a9b      	subs	r3, r3, r2
 8022b6a:	4619      	mov	r1, r3
 8022b6c:	6878      	ldr	r0, [r7, #4]
 8022b6e:	f000 febb 	bl	80238e8 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj>
	else if (__new_size < size())
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
      }
 8022b72:	e013      	b.n	8022b9c <_ZNSt6vectorIhSaIhEE6resizeEj+0x60>
	else if (__new_size < size())
 8022b74:	6878      	ldr	r0, [r7, #4]
 8022b76:	f000 f824 	bl	8022bc2 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8022b7a:	4602      	mov	r2, r0
 8022b7c:	683b      	ldr	r3, [r7, #0]
 8022b7e:	4293      	cmp	r3, r2
 8022b80:	bf34      	ite	cc
 8022b82:	2301      	movcc	r3, #1
 8022b84:	2300      	movcs	r3, #0
 8022b86:	b2db      	uxtb	r3, r3
 8022b88:	2b00      	cmp	r3, #0
 8022b8a:	d007      	beq.n	8022b9c <_ZNSt6vectorIhSaIhEE6resizeEj+0x60>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 8022b8c:	687b      	ldr	r3, [r7, #4]
 8022b8e:	681a      	ldr	r2, [r3, #0]
 8022b90:	683b      	ldr	r3, [r7, #0]
 8022b92:	4413      	add	r3, r2
 8022b94:	4619      	mov	r1, r3
 8022b96:	6878      	ldr	r0, [r7, #4]
 8022b98:	f000 ff5e 	bl	8023a58 <_ZNSt6vectorIhSaIhEE15_M_erase_at_endEPh>
      }
 8022b9c:	bf00      	nop
 8022b9e:	3708      	adds	r7, #8
 8022ba0:	46bd      	mov	sp, r7
 8022ba2:	bd80      	pop	{r7, pc}

08022ba4 <_ZNSt6vectorIhSaIhEE4dataEv>:
      /**
       *   Returns a pointer such that [data(), data() + size()) is a valid
       *   range.  For a non-empty %vector, data() == &front().
       */
      _Tp*
      data() _GLIBCXX_NOEXCEPT
 8022ba4:	b580      	push	{r7, lr}
 8022ba6:	b082      	sub	sp, #8
 8022ba8:	af00      	add	r7, sp, #0
 8022baa:	6078      	str	r0, [r7, #4]
      { return _M_data_ptr(this->_M_impl._M_start); }
 8022bac:	687b      	ldr	r3, [r7, #4]
 8022bae:	681b      	ldr	r3, [r3, #0]
 8022bb0:	4619      	mov	r1, r3
 8022bb2:	6878      	ldr	r0, [r7, #4]
 8022bb4:	f000 ff70 	bl	8023a98 <_ZNKSt6vectorIhSaIhEE11_M_data_ptrIhEEPT_S4_>
 8022bb8:	4603      	mov	r3, r0
 8022bba:	4618      	mov	r0, r3
 8022bbc:	3708      	adds	r7, #8
 8022bbe:	46bd      	mov	sp, r7
 8022bc0:	bd80      	pop	{r7, pc}

08022bc2 <_ZNKSt6vectorIhSaIhEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8022bc2:	b480      	push	{r7}
 8022bc4:	b083      	sub	sp, #12
 8022bc6:	af00      	add	r7, sp, #0
 8022bc8:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8022bca:	687b      	ldr	r3, [r7, #4]
 8022bcc:	685a      	ldr	r2, [r3, #4]
 8022bce:	687b      	ldr	r3, [r7, #4]
 8022bd0:	681b      	ldr	r3, [r3, #0]
 8022bd2:	1ad3      	subs	r3, r2, r3
 8022bd4:	4618      	mov	r0, r3
 8022bd6:	370c      	adds	r7, #12
 8022bd8:	46bd      	mov	sp, r7
 8022bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022bde:	4770      	bx	lr

08022be0 <_ZNSt5dequeI7RequestSaIS0_EE5frontEv>:
      /**
       *  Returns a read/write reference to the data at the first
       *  element of the %deque.
       */
      reference
      front() _GLIBCXX_NOEXCEPT
 8022be0:	b580      	push	{r7, lr}
 8022be2:	b086      	sub	sp, #24
 8022be4:	af00      	add	r7, sp, #0
 8022be6:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	return *begin();
 8022be8:	f107 0308 	add.w	r3, r7, #8
 8022bec:	6879      	ldr	r1, [r7, #4]
 8022bee:	4618      	mov	r0, r3
 8022bf0:	f000 fb89 	bl	8023306 <_ZNSt5dequeI7RequestSaIS0_EE5beginEv>
 8022bf4:	f107 0308 	add.w	r3, r7, #8
 8022bf8:	4618      	mov	r0, r3
 8022bfa:	f000 ff59 	bl	8023ab0 <_ZNKSt15_Deque_iteratorI7RequestRS0_PS0_EdeEv>
 8022bfe:	4603      	mov	r3, r0
      }
 8022c00:	4618      	mov	r0, r3
 8022c02:	3718      	adds	r7, #24
 8022c04:	46bd      	mov	sp, r7
 8022c06:	bd80      	pop	{r7, pc}

08022c08 <_ZNSt5dequeI7RequestSaIS0_EE9pop_frontEv>:
       *
       *  Note that no data is returned, and if the first element's data is
       *  needed, it should be retrieved before pop_front() is called.
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
 8022c08:	b580      	push	{r7, lr}
 8022c0a:	b082      	sub	sp, #8
 8022c0c:	af00      	add	r7, sp, #0
 8022c0e:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	if (this->_M_impl._M_start._M_cur
 8022c10:	687b      	ldr	r3, [r7, #4]
 8022c12:	689a      	ldr	r2, [r3, #8]
	    != this->_M_impl._M_start._M_last - 1)
 8022c14:	687b      	ldr	r3, [r7, #4]
 8022c16:	691b      	ldr	r3, [r3, #16]
 8022c18:	3b14      	subs	r3, #20
	if (this->_M_impl._M_start._M_cur
 8022c1a:	429a      	cmp	r2, r3
 8022c1c:	d011      	beq.n	8022c42 <_ZNSt5dequeI7RequestSaIS0_EE9pop_frontEv+0x3a>
	  {
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8022c1e:	687b      	ldr	r3, [r7, #4]
 8022c20:	4618      	mov	r0, r3
 8022c22:	f000 fb8e 	bl	8023342 <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 8022c26:	4602      	mov	r2, r0
 8022c28:	687b      	ldr	r3, [r7, #4]
 8022c2a:	689b      	ldr	r3, [r3, #8]
 8022c2c:	4619      	mov	r1, r3
 8022c2e:	4610      	mov	r0, r2
 8022c30:	f000 ff4a 	bl	8023ac8 <_ZNSt16allocator_traitsISaI7RequestEE7destroyIS0_EEvRS1_PT_>
				   this->_M_impl._M_start._M_cur);
	    ++this->_M_impl._M_start._M_cur;
 8022c34:	687b      	ldr	r3, [r7, #4]
 8022c36:	689b      	ldr	r3, [r3, #8]
 8022c38:	f103 0214 	add.w	r2, r3, #20
 8022c3c:	687b      	ldr	r3, [r7, #4]
 8022c3e:	609a      	str	r2, [r3, #8]
	  }
	else
	  _M_pop_front_aux();
      }
 8022c40:	e002      	b.n	8022c48 <_ZNSt5dequeI7RequestSaIS0_EE9pop_frontEv+0x40>
	  _M_pop_front_aux();
 8022c42:	6878      	ldr	r0, [r7, #4]
 8022c44:	f000 ff4d 	bl	8023ae2 <_ZNSt5dequeI7RequestSaIS0_EE16_M_pop_front_auxEv>
      }
 8022c48:	bf00      	nop
 8022c4a:	3708      	adds	r7, #8
 8022c4c:	46bd      	mov	sp, r7
 8022c4e:	bd80      	pop	{r7, pc}

08022c50 <_ZN9__gnu_cxx14__alloc_traitsISaIhEhE27_S_propagate_on_copy_assignEv>:
    static constexpr bool _S_propagate_on_copy_assign()
 8022c50:	b480      	push	{r7}
 8022c52:	af00      	add	r7, sp, #0
    { return _Base_type::propagate_on_container_copy_assignment::value; }
 8022c54:	2300      	movs	r3, #0
 8022c56:	4618      	mov	r0, r3
 8022c58:	46bd      	mov	sp, r7
 8022c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022c5e:	4770      	bx	lr

08022c60 <_ZNSt6vectorIhSaIhEEaSERKS1_>:
      return __first;
    }

  template<typename _Tp, typename _Alloc>
    vector<_Tp, _Alloc>&
    vector<_Tp, _Alloc>::
 8022c60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022c62:	b085      	sub	sp, #20
 8022c64:	af00      	add	r7, sp, #0
 8022c66:	6078      	str	r0, [r7, #4]
 8022c68:	6039      	str	r1, [r7, #0]
    operator=(const vector<_Tp, _Alloc>& __x)
    {
      if (&__x != this)
 8022c6a:	683a      	ldr	r2, [r7, #0]
 8022c6c:	687b      	ldr	r3, [r7, #4]
 8022c6e:	429a      	cmp	r2, r3
 8022c70:	f000 80e0 	beq.w	8022e34 <_ZNSt6vectorIhSaIhEEaSERKS1_+0x1d4>
	{
	  _GLIBCXX_ASAN_ANNOTATE_REINIT;
#if __cplusplus >= 201103L
	  if (_Alloc_traits::_S_propagate_on_copy_assign())
 8022c74:	f7ff ffec 	bl	8022c50 <_ZN9__gnu_cxx14__alloc_traitsISaIhEhE27_S_propagate_on_copy_assignEv>
 8022c78:	4603      	mov	r3, r0
 8022c7a:	2b00      	cmp	r3, #0
 8022c7c:	d042      	beq.n	8022d04 <_ZNSt6vectorIhSaIhEEaSERKS1_+0xa4>
	    {
	      if (!_Alloc_traits::_S_always_equal()
 8022c7e:	f7fe fa07 	bl	8021090 <_ZN9__gnu_cxx14__alloc_traitsISaIhEhE15_S_always_equalEv>
 8022c82:	4603      	mov	r3, r0
 8022c84:	f083 0301 	eor.w	r3, r3, #1
 8022c88:	b2db      	uxtb	r3, r3
	          && _M_get_Tp_allocator() != __x._M_get_Tp_allocator())
 8022c8a:	2b00      	cmp	r3, #0
 8022c8c:	d012      	beq.n	8022cb4 <_ZNSt6vectorIhSaIhEEaSERKS1_+0x54>
 8022c8e:	687b      	ldr	r3, [r7, #4]
 8022c90:	4618      	mov	r0, r3
 8022c92:	f000 fc7d 	bl	8023590 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8022c96:	4604      	mov	r4, r0
 8022c98:	683b      	ldr	r3, [r7, #0]
 8022c9a:	4618      	mov	r0, r3
 8022c9c:	f000 ff49 	bl	8023b32 <_ZNKSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8022ca0:	4603      	mov	r3, r0
 8022ca2:	4619      	mov	r1, r3
 8022ca4:	4620      	mov	r0, r4
 8022ca6:	f000 ff4f 	bl	8023b48 <_ZStneRKSaIhES1_>
 8022caa:	4603      	mov	r3, r0
 8022cac:	2b00      	cmp	r3, #0
 8022cae:	d001      	beq.n	8022cb4 <_ZNSt6vectorIhSaIhEEaSERKS1_+0x54>
 8022cb0:	2301      	movs	r3, #1
 8022cb2:	e000      	b.n	8022cb6 <_ZNSt6vectorIhSaIhEEaSERKS1_+0x56>
 8022cb4:	2300      	movs	r3, #0
	      if (!_Alloc_traits::_S_always_equal()
 8022cb6:	2b00      	cmp	r3, #0
 8022cb8:	d016      	beq.n	8022ce8 <_ZNSt6vectorIhSaIhEEaSERKS1_+0x88>
	        {
		  // replacement allocator cannot free existing storage
		  this->clear();
 8022cba:	6878      	ldr	r0, [r7, #4]
 8022cbc:	f000 ff50 	bl	8023b60 <_ZNSt6vectorIhSaIhEE5clearEv>
		  _M_deallocate(this->_M_impl._M_start,
 8022cc0:	6878      	ldr	r0, [r7, #4]
 8022cc2:	687b      	ldr	r3, [r7, #4]
 8022cc4:	6819      	ldr	r1, [r3, #0]
				this->_M_impl._M_end_of_storage
 8022cc6:	687b      	ldr	r3, [r7, #4]
 8022cc8:	689a      	ldr	r2, [r3, #8]
				- this->_M_impl._M_start);
 8022cca:	687b      	ldr	r3, [r7, #4]
 8022ccc:	681b      	ldr	r3, [r3, #0]
 8022cce:	1ad3      	subs	r3, r2, r3
		  _M_deallocate(this->_M_impl._M_start,
 8022cd0:	461a      	mov	r2, r3
 8022cd2:	f000 fc4a 	bl	802356a <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>
		  this->_M_impl._M_start = nullptr;
 8022cd6:	687b      	ldr	r3, [r7, #4]
 8022cd8:	2200      	movs	r2, #0
 8022cda:	601a      	str	r2, [r3, #0]
		  this->_M_impl._M_finish = nullptr;
 8022cdc:	687b      	ldr	r3, [r7, #4]
 8022cde:	2200      	movs	r2, #0
 8022ce0:	605a      	str	r2, [r3, #4]
		  this->_M_impl._M_end_of_storage = nullptr;
 8022ce2:	687b      	ldr	r3, [r7, #4]
 8022ce4:	2200      	movs	r2, #0
 8022ce6:	609a      	str	r2, [r3, #8]
		}
	      std::__alloc_on_copy(_M_get_Tp_allocator(),
 8022ce8:	687b      	ldr	r3, [r7, #4]
 8022cea:	4618      	mov	r0, r3
 8022cec:	f000 fc50 	bl	8023590 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8022cf0:	4604      	mov	r4, r0
				   __x._M_get_Tp_allocator());
 8022cf2:	683b      	ldr	r3, [r7, #0]
 8022cf4:	4618      	mov	r0, r3
 8022cf6:	f000 ff1c 	bl	8023b32 <_ZNKSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8022cfa:	4603      	mov	r3, r0
	      std::__alloc_on_copy(_M_get_Tp_allocator(),
 8022cfc:	4619      	mov	r1, r3
 8022cfe:	4620      	mov	r0, r4
 8022d00:	f000 ff3c 	bl	8023b7c <_ZSt15__alloc_on_copyISaIhEEvRT_RKS1_>
	    }
#endif
	  const size_type __xlen = __x.size();
 8022d04:	6838      	ldr	r0, [r7, #0]
 8022d06:	f7ff ff5c 	bl	8022bc2 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8022d0a:	60f8      	str	r0, [r7, #12]
	  if (__xlen > capacity())
 8022d0c:	6878      	ldr	r0, [r7, #4]
 8022d0e:	f000 ff43 	bl	8023b98 <_ZNKSt6vectorIhSaIhEE8capacityEv>
 8022d12:	4602      	mov	r2, r0
 8022d14:	68fb      	ldr	r3, [r7, #12]
 8022d16:	4293      	cmp	r3, r2
 8022d18:	bf8c      	ite	hi
 8022d1a:	2301      	movhi	r3, #1
 8022d1c:	2300      	movls	r3, #0
 8022d1e:	b2db      	uxtb	r3, r3
 8022d20:	2b00      	cmp	r3, #0
 8022d22:	d030      	beq.n	8022d86 <_ZNSt6vectorIhSaIhEEaSERKS1_+0x126>
	    {
	      pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
 8022d24:	6838      	ldr	r0, [r7, #0]
 8022d26:	f000 ff46 	bl	8023bb6 <_ZNKSt6vectorIhSaIhEE5beginEv>
 8022d2a:	4604      	mov	r4, r0
 8022d2c:	6838      	ldr	r0, [r7, #0]
 8022d2e:	f000 ff52 	bl	8023bd6 <_ZNKSt6vectorIhSaIhEE3endEv>
 8022d32:	4603      	mov	r3, r0
 8022d34:	4622      	mov	r2, r4
 8022d36:	68f9      	ldr	r1, [r7, #12]
 8022d38:	6878      	ldr	r0, [r7, #4]
 8022d3a:	f000 ff5d 	bl	8023bf8 <_ZNSt6vectorIhSaIhEE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKhS1_EEEEPhjT_S9_>
 8022d3e:	60b8      	str	r0, [r7, #8]
						   __x.end());
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8022d40:	687b      	ldr	r3, [r7, #4]
 8022d42:	681c      	ldr	r4, [r3, #0]
 8022d44:	687b      	ldr	r3, [r7, #4]
 8022d46:	685d      	ldr	r5, [r3, #4]
			    _M_get_Tp_allocator());
 8022d48:	687b      	ldr	r3, [r7, #4]
 8022d4a:	4618      	mov	r0, r3
 8022d4c:	f000 fc20 	bl	8023590 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8022d50:	4603      	mov	r3, r0
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8022d52:	461a      	mov	r2, r3
 8022d54:	4629      	mov	r1, r5
 8022d56:	4620      	mov	r0, r4
 8022d58:	f000 fc25 	bl	80235a6 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
	      _M_deallocate(this->_M_impl._M_start,
 8022d5c:	6878      	ldr	r0, [r7, #4]
 8022d5e:	687b      	ldr	r3, [r7, #4]
 8022d60:	6819      	ldr	r1, [r3, #0]
			    this->_M_impl._M_end_of_storage
 8022d62:	687b      	ldr	r3, [r7, #4]
 8022d64:	689a      	ldr	r2, [r3, #8]
			    - this->_M_impl._M_start);
 8022d66:	687b      	ldr	r3, [r7, #4]
 8022d68:	681b      	ldr	r3, [r3, #0]
 8022d6a:	1ad3      	subs	r3, r2, r3
	      _M_deallocate(this->_M_impl._M_start,
 8022d6c:	461a      	mov	r2, r3
 8022d6e:	f000 fbfc 	bl	802356a <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>
	      this->_M_impl._M_start = __tmp;
 8022d72:	687b      	ldr	r3, [r7, #4]
 8022d74:	68ba      	ldr	r2, [r7, #8]
 8022d76:	601a      	str	r2, [r3, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 8022d78:	687b      	ldr	r3, [r7, #4]
 8022d7a:	681a      	ldr	r2, [r3, #0]
 8022d7c:	68fb      	ldr	r3, [r7, #12]
 8022d7e:	441a      	add	r2, r3
 8022d80:	687b      	ldr	r3, [r7, #4]
 8022d82:	609a      	str	r2, [r3, #8]
 8022d84:	e050      	b.n	8022e28 <_ZNSt6vectorIhSaIhEEaSERKS1_+0x1c8>
	    }
	  else if (size() >= __xlen)
 8022d86:	6878      	ldr	r0, [r7, #4]
 8022d88:	f7ff ff1b 	bl	8022bc2 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8022d8c:	4602      	mov	r2, r0
 8022d8e:	68fb      	ldr	r3, [r7, #12]
 8022d90:	4293      	cmp	r3, r2
 8022d92:	bf94      	ite	ls
 8022d94:	2301      	movls	r3, #1
 8022d96:	2300      	movhi	r3, #0
 8022d98:	b2db      	uxtb	r3, r3
 8022d9a:	2b00      	cmp	r3, #0
 8022d9c:	d020      	beq.n	8022de0 <_ZNSt6vectorIhSaIhEEaSERKS1_+0x180>
	    {
	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 8022d9e:	6838      	ldr	r0, [r7, #0]
 8022da0:	f000 ff09 	bl	8023bb6 <_ZNKSt6vectorIhSaIhEE5beginEv>
 8022da4:	4604      	mov	r4, r0
 8022da6:	6838      	ldr	r0, [r7, #0]
 8022da8:	f000 ff15 	bl	8023bd6 <_ZNKSt6vectorIhSaIhEE3endEv>
 8022dac:	4605      	mov	r5, r0
 8022dae:	6878      	ldr	r0, [r7, #4]
 8022db0:	f000 ff3e 	bl	8023c30 <_ZNSt6vectorIhSaIhEE5beginEv>
 8022db4:	4603      	mov	r3, r0
 8022db6:	461a      	mov	r2, r3
 8022db8:	4629      	mov	r1, r5
 8022dba:	4620      	mov	r0, r4
 8022dbc:	f000 ff48 	bl	8023c50 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEENS1_IPhS6_EEET0_T_SB_SA_>
 8022dc0:	4604      	mov	r4, r0
 8022dc2:	6878      	ldr	r0, [r7, #4]
 8022dc4:	f000 ff5c 	bl	8023c80 <_ZNSt6vectorIhSaIhEE3endEv>
 8022dc8:	4605      	mov	r5, r0
			    end(), _M_get_Tp_allocator());
 8022dca:	687b      	ldr	r3, [r7, #4]
 8022dcc:	4618      	mov	r0, r3
 8022dce:	f000 fbdf 	bl	8023590 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8022dd2:	4603      	mov	r3, r0
	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 8022dd4:	461a      	mov	r2, r3
 8022dd6:	4629      	mov	r1, r5
 8022dd8:	4620      	mov	r0, r4
 8022dda:	f000 ff62 	bl	8023ca2 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEhEvT_S7_RSaIT0_E>
 8022dde:	e023      	b.n	8022e28 <_ZNSt6vectorIhSaIhEEaSERKS1_+0x1c8>
	    }
	  else
	    {
	      std::copy(__x._M_impl._M_start, __x._M_impl._M_start + size(),
 8022de0:	683b      	ldr	r3, [r7, #0]
 8022de2:	681d      	ldr	r5, [r3, #0]
 8022de4:	683b      	ldr	r3, [r7, #0]
 8022de6:	681c      	ldr	r4, [r3, #0]
 8022de8:	6878      	ldr	r0, [r7, #4]
 8022dea:	f7ff feea 	bl	8022bc2 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8022dee:	4603      	mov	r3, r0
 8022df0:	18e1      	adds	r1, r4, r3
 8022df2:	687b      	ldr	r3, [r7, #4]
 8022df4:	681b      	ldr	r3, [r3, #0]
 8022df6:	461a      	mov	r2, r3
 8022df8:	4628      	mov	r0, r5
 8022dfa:	f000 ff60 	bl	8023cbe <_ZSt4copyIPhS0_ET0_T_S2_S1_>
			this->_M_impl._M_start);
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 8022dfe:	683b      	ldr	r3, [r7, #0]
 8022e00:	681c      	ldr	r4, [r3, #0]
 8022e02:	6878      	ldr	r0, [r7, #4]
 8022e04:	f7ff fedd 	bl	8022bc2 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8022e08:	4603      	mov	r3, r0
 8022e0a:	441c      	add	r4, r3
					  __x._M_impl._M_finish,
 8022e0c:	683b      	ldr	r3, [r7, #0]
 8022e0e:	685d      	ldr	r5, [r3, #4]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 8022e10:	687b      	ldr	r3, [r7, #4]
 8022e12:	685e      	ldr	r6, [r3, #4]
					  this->_M_impl._M_finish,
					  _M_get_Tp_allocator());
 8022e14:	687b      	ldr	r3, [r7, #4]
 8022e16:	4618      	mov	r0, r3
 8022e18:	f000 fbba 	bl	8023590 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8022e1c:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 8022e1e:	4632      	mov	r2, r6
 8022e20:	4629      	mov	r1, r5
 8022e22:	4620      	mov	r0, r4
 8022e24:	f000 ff63 	bl	8023cee <_ZSt22__uninitialized_copy_aIPhS0_hET0_T_S2_S1_RSaIT1_E>
	    }
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 8022e28:	687b      	ldr	r3, [r7, #4]
 8022e2a:	681a      	ldr	r2, [r3, #0]
 8022e2c:	68fb      	ldr	r3, [r7, #12]
 8022e2e:	441a      	add	r2, r3
 8022e30:	687b      	ldr	r3, [r7, #4]
 8022e32:	605a      	str	r2, [r3, #4]
	}
      return *this;
 8022e34:	687b      	ldr	r3, [r7, #4]
    }
 8022e36:	4618      	mov	r0, r3
 8022e38:	3714      	adds	r7, #20
 8022e3a:	46bd      	mov	sp, r7
 8022e3c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08022e3e <_ZNKSt5dequeI7RequestSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8022e3e:	b580      	push	{r7, lr}
 8022e40:	b082      	sub	sp, #8
 8022e42:	af00      	add	r7, sp, #0
 8022e44:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 8022e46:	687b      	ldr	r3, [r7, #4]
 8022e48:	f103 0218 	add.w	r2, r3, #24
 8022e4c:	687b      	ldr	r3, [r7, #4]
 8022e4e:	3308      	adds	r3, #8
 8022e50:	4619      	mov	r1, r3
 8022e52:	4610      	mov	r0, r2
 8022e54:	f000 ff5c 	bl	8023d10 <_ZStmiRKSt15_Deque_iteratorI7RequestRS0_PS0_ES5_>
 8022e58:	4603      	mov	r3, r0
 8022e5a:	4618      	mov	r0, r3
 8022e5c:	3708      	adds	r7, #8
 8022e5e:	46bd      	mov	sp, r7
 8022e60:	bd80      	pop	{r7, pc}

08022e62 <_ZNKSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE4sizeEv>:
      size() const
 8022e62:	b580      	push	{r7, lr}
 8022e64:	b082      	sub	sp, #8
 8022e66:	af00      	add	r7, sp, #0
 8022e68:	6078      	str	r0, [r7, #4]
      { return c.size(); }
 8022e6a:	687b      	ldr	r3, [r7, #4]
 8022e6c:	4618      	mov	r0, r3
 8022e6e:	f000 ff7b 	bl	8023d68 <_ZNKSt5dequeI8ResponceSaIS0_EE4sizeEv>
 8022e72:	4603      	mov	r3, r0
 8022e74:	4618      	mov	r0, r3
 8022e76:	3708      	adds	r7, #8
 8022e78:	46bd      	mov	sp, r7
 8022e7a:	bd80      	pop	{r7, pc}

08022e7c <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEEC1IS3_vEEv>:
	queue()
 8022e7c:	b580      	push	{r7, lr}
 8022e7e:	b082      	sub	sp, #8
 8022e80:	af00      	add	r7, sp, #0
 8022e82:	6078      	str	r0, [r7, #4]
	: c() { }
 8022e84:	687b      	ldr	r3, [r7, #4]
 8022e86:	4618      	mov	r0, r3
 8022e88:	2328      	movs	r3, #40	; 0x28
 8022e8a:	461a      	mov	r2, r3
 8022e8c:	2100      	movs	r1, #0
 8022e8e:	f01a f8a7 	bl	803cfe0 <memset>
 8022e92:	687b      	ldr	r3, [r7, #4]
 8022e94:	4618      	mov	r0, r3
 8022e96:	f7fe f865 	bl	8020f64 <_ZNSt5dequeI7RequestSaIS0_EEC1Ev>
 8022e9a:	687b      	ldr	r3, [r7, #4]
 8022e9c:	4618      	mov	r0, r3
 8022e9e:	3708      	adds	r7, #8
 8022ea0:	46bd      	mov	sp, r7
 8022ea2:	bd80      	pop	{r7, pc}

08022ea4 <_ZNKSt5queueI7RequestSt5dequeIS0_SaIS0_EEE5emptyEv>:
      empty() const
 8022ea4:	b580      	push	{r7, lr}
 8022ea6:	b082      	sub	sp, #8
 8022ea8:	af00      	add	r7, sp, #0
 8022eaa:	6078      	str	r0, [r7, #4]
      { return c.empty(); }
 8022eac:	687b      	ldr	r3, [r7, #4]
 8022eae:	4618      	mov	r0, r3
 8022eb0:	f7ff fdd4 	bl	8022a5c <_ZNKSt5dequeI7RequestSaIS0_EE5emptyEv>
 8022eb4:	4603      	mov	r3, r0
 8022eb6:	4618      	mov	r0, r3
 8022eb8:	3708      	adds	r7, #8
 8022eba:	46bd      	mov	sp, r7
 8022ebc:	bd80      	pop	{r7, pc}

08022ebe <_ZNKSt6vectorIhSaIhEE4dataEv>:

      const _Tp*
      data() const _GLIBCXX_NOEXCEPT
 8022ebe:	b580      	push	{r7, lr}
 8022ec0:	b082      	sub	sp, #8
 8022ec2:	af00      	add	r7, sp, #0
 8022ec4:	6078      	str	r0, [r7, #4]
      { return _M_data_ptr(this->_M_impl._M_start); }
 8022ec6:	687b      	ldr	r3, [r7, #4]
 8022ec8:	681b      	ldr	r3, [r3, #0]
 8022eca:	4619      	mov	r1, r3
 8022ecc:	6878      	ldr	r0, [r7, #4]
 8022ece:	f000 fde3 	bl	8023a98 <_ZNKSt6vectorIhSaIhEE11_M_data_ptrIhEEPT_S4_>
 8022ed2:	4603      	mov	r3, r0
 8022ed4:	4618      	mov	r0, r3
 8022ed6:	3708      	adds	r7, #8
 8022ed8:	46bd      	mov	sp, r7
 8022eda:	bd80      	pop	{r7, pc}

08022edc <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEE5frontEv>:
      front()
 8022edc:	b580      	push	{r7, lr}
 8022ede:	b082      	sub	sp, #8
 8022ee0:	af00      	add	r7, sp, #0
 8022ee2:	6078      	str	r0, [r7, #4]
	return c.front();
 8022ee4:	687b      	ldr	r3, [r7, #4]
 8022ee6:	4618      	mov	r0, r3
 8022ee8:	f7ff fe7a 	bl	8022be0 <_ZNSt5dequeI7RequestSaIS0_EE5frontEv>
 8022eec:	4603      	mov	r3, r0
      }
 8022eee:	4618      	mov	r0, r3
 8022ef0:	3708      	adds	r7, #8
 8022ef2:	46bd      	mov	sp, r7
 8022ef4:	bd80      	pop	{r7, pc}

08022ef6 <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEE3popEv>:
      pop()
 8022ef6:	b580      	push	{r7, lr}
 8022ef8:	b082      	sub	sp, #8
 8022efa:	af00      	add	r7, sp, #0
 8022efc:	6078      	str	r0, [r7, #4]
	c.pop_front();
 8022efe:	687b      	ldr	r3, [r7, #4]
 8022f00:	4618      	mov	r0, r3
 8022f02:	f7ff fe81 	bl	8022c08 <_ZNSt5dequeI7RequestSaIS0_EE9pop_frontEv>
      }
 8022f06:	bf00      	nop
 8022f08:	3708      	adds	r7, #8
 8022f0a:	46bd      	mov	sp, r7
 8022f0c:	bd80      	pop	{r7, pc}

08022f0e <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEE4pushEOS0_>:
      push(value_type&& __x)
 8022f0e:	b590      	push	{r4, r7, lr}
 8022f10:	b083      	sub	sp, #12
 8022f12:	af00      	add	r7, sp, #0
 8022f14:	6078      	str	r0, [r7, #4]
 8022f16:	6039      	str	r1, [r7, #0]
      { c.push_back(std::move(__x)); }
 8022f18:	687c      	ldr	r4, [r7, #4]
 8022f1a:	6838      	ldr	r0, [r7, #0]
 8022f1c:	f7ff fd53 	bl	80229c6 <_ZSt4moveIR7RequestEONSt16remove_referenceIT_E4typeEOS3_>
 8022f20:	4603      	mov	r3, r0
 8022f22:	4619      	mov	r1, r3
 8022f24:	4620      	mov	r0, r4
 8022f26:	f000 ff31 	bl	8023d8c <_ZNSt5dequeI7RequestSaIS0_EE9push_backEOS0_>
 8022f2a:	bf00      	nop
 8022f2c:	370c      	adds	r7, #12
 8022f2e:	46bd      	mov	sp, r7
 8022f30:	bd90      	pop	{r4, r7, pc}

08022f32 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEaSESt16initializer_listIS1_E>:
      operator=(initializer_list<value_type> __l)
 8022f32:	b5b0      	push	{r4, r5, r7, lr}
 8022f34:	b086      	sub	sp, #24
 8022f36:	af00      	add	r7, sp, #0
 8022f38:	60f8      	str	r0, [r7, #12]
 8022f3a:	1d3b      	adds	r3, r7, #4
 8022f3c:	e883 0006 	stmia.w	r3, {r1, r2}
	_M_assign_aux(__l.begin(), __l.end(),
 8022f40:	1d3b      	adds	r3, r7, #4
 8022f42:	4618      	mov	r0, r3
 8022f44:	f000 ff33 	bl	8023dae <_ZNKSt16initializer_listIN10BHYWrapper8BHYFrameEE5beginEv>
 8022f48:	4604      	mov	r4, r0
 8022f4a:	1d3b      	adds	r3, r7, #4
 8022f4c:	4618      	mov	r0, r3
 8022f4e:	f000 ff3a 	bl	8023dc6 <_ZNKSt16initializer_listIN10BHYWrapper8BHYFrameEE3endEv>
 8022f52:	4602      	mov	r2, r0
 8022f54:	462b      	mov	r3, r5
 8022f56:	4621      	mov	r1, r4
 8022f58:	68f8      	ldr	r0, [r7, #12]
 8022f5a:	f000 ff49 	bl	8023df0 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_assign_auxIPKS1_EEvT_S7_St20forward_iterator_tag>
	return *this;
 8022f5e:	68fb      	ldr	r3, [r7, #12]
      }
 8022f60:	4618      	mov	r0, r3
 8022f62:	3718      	adds	r7, #24
 8022f64:	46bd      	mov	sp, r7
 8022f66:	bdb0      	pop	{r4, r5, r7, pc}

08022f68 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE10push_frontERKS1_>:
      push_front(const value_type& __x)
 8022f68:	b580      	push	{r7, lr}
 8022f6a:	b082      	sub	sp, #8
 8022f6c:	af00      	add	r7, sp, #0
 8022f6e:	6078      	str	r0, [r7, #4]
 8022f70:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_start._M_cur != this->_M_impl._M_start._M_first)
 8022f72:	687b      	ldr	r3, [r7, #4]
 8022f74:	689a      	ldr	r2, [r3, #8]
 8022f76:	687b      	ldr	r3, [r7, #4]
 8022f78:	68db      	ldr	r3, [r3, #12]
 8022f7a:	429a      	cmp	r2, r3
 8022f7c:	d00e      	beq.n	8022f9c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE10push_frontERKS1_+0x34>
	    _Alloc_traits::construct(this->_M_impl,
 8022f7e:	6878      	ldr	r0, [r7, #4]
				     this->_M_impl._M_start._M_cur - 1,
 8022f80:	687b      	ldr	r3, [r7, #4]
 8022f82:	689b      	ldr	r3, [r3, #8]
	    _Alloc_traits::construct(this->_M_impl,
 8022f84:	3b14      	subs	r3, #20
 8022f86:	683a      	ldr	r2, [r7, #0]
 8022f88:	4619      	mov	r1, r3
 8022f8a:	f000 ff96 	bl	8023eba <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
	    --this->_M_impl._M_start._M_cur;
 8022f8e:	687b      	ldr	r3, [r7, #4]
 8022f90:	689b      	ldr	r3, [r3, #8]
 8022f92:	f1a3 0214 	sub.w	r2, r3, #20
 8022f96:	687b      	ldr	r3, [r7, #4]
 8022f98:	609a      	str	r2, [r3, #8]
      }
 8022f9a:	e003      	b.n	8022fa4 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE10push_frontERKS1_+0x3c>
	  _M_push_front_aux(__x);
 8022f9c:	6839      	ldr	r1, [r7, #0]
 8022f9e:	6878      	ldr	r0, [r7, #4]
 8022fa0:	f000 ff9e 	bl	8023ee0 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_push_front_auxIJRKS1_EEEvDpOT_>
      }
 8022fa4:	bf00      	nop
 8022fa6:	3708      	adds	r7, #8
 8022fa8:	46bd      	mov	sp, r7
 8022faa:	bd80      	pop	{r7, pc}

08022fac <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8022fac:	b580      	push	{r7, lr}
 8022fae:	b082      	sub	sp, #8
 8022fb0:	af00      	add	r7, sp, #0
 8022fb2:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 8022fb4:	687b      	ldr	r3, [r7, #4]
 8022fb6:	f103 0218 	add.w	r2, r3, #24
 8022fba:	687b      	ldr	r3, [r7, #4]
 8022fbc:	3308      	adds	r3, #8
 8022fbe:	4619      	mov	r1, r3
 8022fc0:	4610      	mov	r0, r2
 8022fc2:	f000 ffd3 	bl	8023f6c <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_ES6_>
 8022fc6:	4603      	mov	r3, r0
 8022fc8:	4618      	mov	r0, r3
 8022fca:	3708      	adds	r7, #8
 8022fcc:	46bd      	mov	sp, r7
 8022fce:	bd80      	pop	{r7, pc}

08022fd0 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE8pop_backEv>:
       *
       *  Note that no data is returned, and if the last element's data is
       *  needed, it should be retrieved before pop_back() is called.
       */
      void
      pop_back() _GLIBCXX_NOEXCEPT
 8022fd0:	b580      	push	{r7, lr}
 8022fd2:	b082      	sub	sp, #8
 8022fd4:	af00      	add	r7, sp, #0
 8022fd6:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	if (this->_M_impl._M_finish._M_cur
 8022fd8:	687b      	ldr	r3, [r7, #4]
 8022fda:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_first)
 8022fdc:	687b      	ldr	r3, [r7, #4]
 8022fde:	69db      	ldr	r3, [r3, #28]
	if (this->_M_impl._M_finish._M_cur
 8022fe0:	429a      	cmp	r2, r3
 8022fe2:	d011      	beq.n	8023008 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE8pop_backEv+0x38>
	  {
	    --this->_M_impl._M_finish._M_cur;
 8022fe4:	687b      	ldr	r3, [r7, #4]
 8022fe6:	699b      	ldr	r3, [r3, #24]
 8022fe8:	f1a3 0214 	sub.w	r2, r3, #20
 8022fec:	687b      	ldr	r3, [r7, #4]
 8022fee:	619a      	str	r2, [r3, #24]
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8022ff0:	687b      	ldr	r3, [r7, #4]
 8022ff2:	4618      	mov	r0, r3
 8022ff4:	f000 ffe6 	bl	8023fc4 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 8022ff8:	4602      	mov	r2, r0
 8022ffa:	687b      	ldr	r3, [r7, #4]
 8022ffc:	699b      	ldr	r3, [r3, #24]
 8022ffe:	4619      	mov	r1, r3
 8023000:	4610      	mov	r0, r2
 8023002:	f000 ffea 	bl	8023fda <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE7destroyIS1_EEvRS2_PT_>
				   this->_M_impl._M_finish._M_cur);
	  }
	else
	  _M_pop_back_aux();
      }
 8023006:	e002      	b.n	802300e <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE8pop_backEv+0x3e>
	  _M_pop_back_aux();
 8023008:	6878      	ldr	r0, [r7, #4]
 802300a:	f000 fff3 	bl	8023ff4 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_pop_back_auxEv>
      }
 802300e:	bf00      	nop
 8023010:	3708      	adds	r7, #8
 8023012:	46bd      	mov	sp, r7
 8023014:	bd80      	pop	{r7, pc}

08023016 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 8023016:	b580      	push	{r7, lr}
 8023018:	b082      	sub	sp, #8
 802301a:	af00      	add	r7, sp, #0
 802301c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
 802301e:	687b      	ldr	r3, [r7, #4]
 8023020:	f103 0218 	add.w	r2, r3, #24
 8023024:	687b      	ldr	r3, [r7, #4]
 8023026:	3308      	adds	r3, #8
 8023028:	4619      	mov	r1, r3
 802302a:	4610      	mov	r0, r2
 802302c:	f001 f80c 	bl	8024048 <_ZSteqRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_ES6_>
 8023030:	4603      	mov	r3, r0
 8023032:	4618      	mov	r0, r3
 8023034:	3708      	adds	r7, #8
 8023036:	46bd      	mov	sp, r7
 8023038:	bd80      	pop	{r7, pc}

0802303a <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEixEj>:
      operator[](size_type __n) const _GLIBCXX_NOEXCEPT
 802303a:	b580      	push	{r7, lr}
 802303c:	b082      	sub	sp, #8
 802303e:	af00      	add	r7, sp, #0
 8023040:	6078      	str	r0, [r7, #4]
 8023042:	6039      	str	r1, [r7, #0]
	return this->_M_impl._M_start[difference_type(__n)];
 8023044:	687b      	ldr	r3, [r7, #4]
 8023046:	3308      	adds	r3, #8
 8023048:	683a      	ldr	r2, [r7, #0]
 802304a:	4611      	mov	r1, r2
 802304c:	4618      	mov	r0, r3
 802304e:	f001 f80f 	bl	8024070 <_ZNKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EixEi>
 8023052:	4603      	mov	r3, r0
      }
 8023054:	4618      	mov	r0, r3
 8023056:	3708      	adds	r7, #8
 8023058:	46bd      	mov	sp, r7
 802305a:	bd80      	pop	{r7, pc}

0802305c <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE11_Deque_implD1Ev>:
      struct _Deque_impl
 802305c:	b580      	push	{r7, lr}
 802305e:	b082      	sub	sp, #8
 8023060:	af00      	add	r7, sp, #0
 8023062:	6078      	str	r0, [r7, #4]
 8023064:	6878      	ldr	r0, [r7, #4]
 8023066:	f001 f829 	bl	80240bc <_ZNSaIN10BHYWrapper8BHYFrameEED1Ev>
 802306a:	687b      	ldr	r3, [r7, #4]
 802306c:	4618      	mov	r0, r3
 802306e:	3708      	adds	r7, #8
 8023070:	46bd      	mov	sp, r7
 8023072:	bd80      	pop	{r7, pc}

08023074 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EEC1Ev>:
      _Deque_base()
 8023074:	b580      	push	{r7, lr}
 8023076:	b082      	sub	sp, #8
 8023078:	af00      	add	r7, sp, #0
 802307a:	6078      	str	r0, [r7, #4]
      : _M_impl()
 802307c:	687b      	ldr	r3, [r7, #4]
 802307e:	4618      	mov	r0, r3
 8023080:	f001 f80c 	bl	802409c <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 8023084:	2100      	movs	r1, #0
 8023086:	6878      	ldr	r0, [r7, #4]
 8023088:	f001 f824 	bl	80240d4 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE17_M_initialize_mapEj>
 802308c:	687b      	ldr	r3, [r7, #4]
 802308e:	4618      	mov	r0, r3
 8023090:	3708      	adds	r7, #8
 8023092:	46bd      	mov	sp, r7
 8023094:	bd80      	pop	{r7, pc}

08023096 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 8023096:	b580      	push	{r7, lr}
 8023098:	b082      	sub	sp, #8
 802309a:	af00      	add	r7, sp, #0
 802309c:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 802309e:	687b      	ldr	r3, [r7, #4]
 80230a0:	681b      	ldr	r3, [r3, #0]
 80230a2:	2b00      	cmp	r3, #0
 80230a4:	d010      	beq.n	80230c8 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 80230a6:	687b      	ldr	r3, [r7, #4]
 80230a8:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 80230aa:	687b      	ldr	r3, [r7, #4]
 80230ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 80230ae:	3304      	adds	r3, #4
 80230b0:	461a      	mov	r2, r3
 80230b2:	6878      	ldr	r0, [r7, #4]
 80230b4:	f001 f874 	bl	80241a0 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_destroy_nodesEPPS1_S5_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 80230b8:	687b      	ldr	r3, [r7, #4]
 80230ba:	6819      	ldr	r1, [r3, #0]
 80230bc:	687b      	ldr	r3, [r7, #4]
 80230be:	685b      	ldr	r3, [r3, #4]
 80230c0:	461a      	mov	r2, r3
 80230c2:	6878      	ldr	r0, [r7, #4]
 80230c4:	f001 f886 	bl	80241d4 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE17_M_deallocate_mapEPPS1_j>
    }
 80230c8:	687b      	ldr	r3, [r7, #4]
 80230ca:	4618      	mov	r0, r3
 80230cc:	f7ff ffc6 	bl	802305c <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE11_Deque_implD1Ev>
 80230d0:	687b      	ldr	r3, [r7, #4]
 80230d2:	4618      	mov	r0, r3
 80230d4:	3708      	adds	r7, #8
 80230d6:	46bd      	mov	sp, r7
 80230d8:	bd80      	pop	{r7, pc}

080230da <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EED1Ev>:
      ~deque()
 80230da:	b580      	push	{r7, lr}
 80230dc:	b08a      	sub	sp, #40	; 0x28
 80230de:	af00      	add	r7, sp, #0
 80230e0:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 80230e2:	f107 0308 	add.w	r3, r7, #8
 80230e6:	6879      	ldr	r1, [r7, #4]
 80230e8:	4618      	mov	r0, r3
 80230ea:	f001 f88f 	bl	802420c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5beginEv>
 80230ee:	f107 0318 	add.w	r3, r7, #24
 80230f2:	6879      	ldr	r1, [r7, #4]
 80230f4:	4618      	mov	r0, r3
 80230f6:	f001 f898 	bl	802422a <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE3endEv>
 80230fa:	687b      	ldr	r3, [r7, #4]
 80230fc:	4618      	mov	r0, r3
 80230fe:	f000 ff61 	bl	8023fc4 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 8023102:	4603      	mov	r3, r0
 8023104:	f107 0218 	add.w	r2, r7, #24
 8023108:	f107 0108 	add.w	r1, r7, #8
 802310c:	6878      	ldr	r0, [r7, #4]
 802310e:	f001 f8b7 	bl	8024280 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_destroy_dataESt15_Deque_iteratorIS1_RS1_PS1_ES7_RKS2_>
 8023112:	687b      	ldr	r3, [r7, #4]
 8023114:	4618      	mov	r0, r3
 8023116:	f7ff ffbe 	bl	8023096 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EED1Ev>
 802311a:	687b      	ldr	r3, [r7, #4]
 802311c:	4618      	mov	r0, r3
 802311e:	3728      	adds	r7, #40	; 0x28
 8023120:	46bd      	mov	sp, r7
 8023122:	bd80      	pop	{r7, pc}

08023124 <_ZNSt5dequeI7RequestSaIS0_EEaSEOS2_>:
      operator=(deque&& __x) noexcept(_Alloc_traits::_S_always_equal())
 8023124:	b590      	push	{r4, r7, lr}
 8023126:	b083      	sub	sp, #12
 8023128:	af00      	add	r7, sp, #0
 802312a:	6078      	str	r0, [r7, #4]
 802312c:	6039      	str	r1, [r7, #0]
	_M_move_assign1(std::move(__x), __always_equal{});
 802312e:	6838      	ldr	r0, [r7, #0]
 8023130:	f001 f8b3 	bl	802429a <_ZSt4moveIRSt5dequeI7RequestSaIS1_EEEONSt16remove_referenceIT_E4typeEOS6_>
 8023134:	4603      	mov	r3, r0
 8023136:	4622      	mov	r2, r4
 8023138:	4619      	mov	r1, r3
 802313a:	6878      	ldr	r0, [r7, #4]
 802313c:	f001 f8b8 	bl	80242b0 <_ZNSt5dequeI7RequestSaIS0_EE15_M_move_assign1EOS2_St17integral_constantIbLb1EE>
	return *this;
 8023140:	687b      	ldr	r3, [r7, #4]
      }
 8023142:	4618      	mov	r0, r3
 8023144:	370c      	adds	r7, #12
 8023146:	46bd      	mov	sp, r7
 8023148:	bd90      	pop	{r4, r7, pc}

0802314a <_ZNSt5dequeI8ResponceSaIS0_EEaSEOS2_>:
      operator=(deque&& __x) noexcept(_Alloc_traits::_S_always_equal())
 802314a:	b590      	push	{r4, r7, lr}
 802314c:	b083      	sub	sp, #12
 802314e:	af00      	add	r7, sp, #0
 8023150:	6078      	str	r0, [r7, #4]
 8023152:	6039      	str	r1, [r7, #0]
	_M_move_assign1(std::move(__x), __always_equal{});
 8023154:	6838      	ldr	r0, [r7, #0]
 8023156:	f001 f8cc 	bl	80242f2 <_ZSt4moveIRSt5dequeI8ResponceSaIS1_EEEONSt16remove_referenceIT_E4typeEOS6_>
 802315a:	4603      	mov	r3, r0
 802315c:	4622      	mov	r2, r4
 802315e:	4619      	mov	r1, r3
 8023160:	6878      	ldr	r0, [r7, #4]
 8023162:	f001 f8d1 	bl	8024308 <_ZNSt5dequeI8ResponceSaIS0_EE15_M_move_assign1EOS2_St17integral_constantIbLb1EE>
	return *this;
 8023166:	687b      	ldr	r3, [r7, #4]
      }
 8023168:	4618      	mov	r0, r3
 802316a:	370c      	adds	r7, #12
 802316c:	46bd      	mov	sp, r7
 802316e:	bd90      	pop	{r4, r7, pc}

08023170 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEaSEOS3_>:
      operator=(deque&& __x) noexcept(_Alloc_traits::_S_always_equal())
 8023170:	b590      	push	{r4, r7, lr}
 8023172:	b083      	sub	sp, #12
 8023174:	af00      	add	r7, sp, #0
 8023176:	6078      	str	r0, [r7, #4]
 8023178:	6039      	str	r1, [r7, #0]
	_M_move_assign1(std::move(__x), __always_equal{});
 802317a:	6838      	ldr	r0, [r7, #0]
 802317c:	f001 f8e5 	bl	802434a <_ZSt4moveIRSt5dequeIN10BHYWrapper8BHYFrameESaIS2_EEEONSt16remove_referenceIT_E4typeEOS7_>
 8023180:	4603      	mov	r3, r0
 8023182:	4622      	mov	r2, r4
 8023184:	4619      	mov	r1, r3
 8023186:	6878      	ldr	r0, [r7, #4]
 8023188:	f001 f8ea 	bl	8024360 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_move_assign1EOS3_St17integral_constantIbLb1EE>
	return *this;
 802318c:	687b      	ldr	r3, [r7, #4]
      }
 802318e:	4618      	mov	r0, r3
 8023190:	370c      	adds	r7, #12
 8023192:	46bd      	mov	sp, r7
 8023194:	bd90      	pop	{r4, r7, pc}

08023196 <_ZNSt11_Deque_baseI7RequestSaIS0_EE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 8023196:	b580      	push	{r7, lr}
 8023198:	b082      	sub	sp, #8
 802319a:	af00      	add	r7, sp, #0
 802319c:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 802319e:	6878      	ldr	r0, [r7, #4]
 80231a0:	f001 f8ff 	bl	80243a2 <_ZNSaI7RequestEC1Ev>
 80231a4:	687b      	ldr	r3, [r7, #4]
 80231a6:	4618      	mov	r0, r3
 80231a8:	f001 f907 	bl	80243ba <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_Deque_impl_dataC1Ev>
	{ }
 80231ac:	687b      	ldr	r3, [r7, #4]
 80231ae:	4618      	mov	r0, r3
 80231b0:	3708      	adds	r7, #8
 80231b2:	46bd      	mov	sp, r7
 80231b4:	bd80      	pop	{r7, pc}

080231b6 <_ZNSaI7RequestED1Ev>:
 80231b6:	b580      	push	{r7, lr}
 80231b8:	b082      	sub	sp, #8
 80231ba:	af00      	add	r7, sp, #0
 80231bc:	6078      	str	r0, [r7, #4]
 80231be:	6878      	ldr	r0, [r7, #4]
 80231c0:	f001 f914 	bl	80243ec <_ZN9__gnu_cxx13new_allocatorI7RequestED1Ev>
 80231c4:	687b      	ldr	r3, [r7, #4]
 80231c6:	4618      	mov	r0, r3
 80231c8:	3708      	adds	r7, #8
 80231ca:	46bd      	mov	sp, r7
 80231cc:	bd80      	pop	{r7, pc}

080231ce <_ZNSt11_Deque_baseI7RequestSaIS0_EE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 80231ce:	b590      	push	{r4, r7, lr}
 80231d0:	b089      	sub	sp, #36	; 0x24
 80231d2:	af00      	add	r7, sp, #0
 80231d4:	6078      	str	r0, [r7, #4]
 80231d6:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 80231d8:	2014      	movs	r0, #20
 80231da:	f7fd fe52 	bl	8020e82 <_ZSt16__deque_buf_sizej>
 80231de:	4602      	mov	r2, r0
 80231e0:	683b      	ldr	r3, [r7, #0]
 80231e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80231e6:	3301      	adds	r3, #1
 80231e8:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 80231ea:	2308      	movs	r3, #8
 80231ec:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 80231ee:	69fb      	ldr	r3, [r7, #28]
 80231f0:	3302      	adds	r3, #2
 80231f2:	613b      	str	r3, [r7, #16]
 80231f4:	f107 0210 	add.w	r2, r7, #16
 80231f8:	f107 030c 	add.w	r3, r7, #12
 80231fc:	4611      	mov	r1, r2
 80231fe:	4618      	mov	r0, r3
 8023200:	f001 f8ff 	bl	8024402 <_ZSt3maxIjERKT_S2_S2_>
 8023204:	4603      	mov	r3, r0
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8023206:	681a      	ldr	r2, [r3, #0]
 8023208:	687b      	ldr	r3, [r7, #4]
 802320a:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 802320c:	687b      	ldr	r3, [r7, #4]
 802320e:	685b      	ldr	r3, [r3, #4]
 8023210:	4619      	mov	r1, r3
 8023212:	6878      	ldr	r0, [r7, #4]
 8023214:	f001 f909 	bl	802442a <_ZNSt11_Deque_baseI7RequestSaIS0_EE15_M_allocate_mapEj>
 8023218:	4602      	mov	r2, r0
 802321a:	687b      	ldr	r3, [r7, #4]
 802321c:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 802321e:	687b      	ldr	r3, [r7, #4]
 8023220:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 8023222:	687b      	ldr	r3, [r7, #4]
 8023224:	6859      	ldr	r1, [r3, #4]
 8023226:	69fb      	ldr	r3, [r7, #28]
 8023228:	1acb      	subs	r3, r1, r3
 802322a:	085b      	lsrs	r3, r3, #1
 802322c:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 802322e:	4413      	add	r3, r2
 8023230:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 8023232:	69fb      	ldr	r3, [r7, #28]
 8023234:	009b      	lsls	r3, r3, #2
 8023236:	69ba      	ldr	r2, [r7, #24]
 8023238:	4413      	add	r3, r2
 802323a:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 802323c:	697a      	ldr	r2, [r7, #20]
 802323e:	69b9      	ldr	r1, [r7, #24]
 8023240:	6878      	ldr	r0, [r7, #4]
 8023242:	f001 f90f 	bl	8024464 <_ZNSt11_Deque_baseI7RequestSaIS0_EE15_M_create_nodesEPPS0_S4_>
      this->_M_impl._M_start._M_set_node(__nstart);
 8023246:	687b      	ldr	r3, [r7, #4]
 8023248:	3308      	adds	r3, #8
 802324a:	69b9      	ldr	r1, [r7, #24]
 802324c:	4618      	mov	r0, r3
 802324e:	f001 f923 	bl	8024498 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 8023252:	687b      	ldr	r3, [r7, #4]
 8023254:	f103 0218 	add.w	r2, r3, #24
 8023258:	697b      	ldr	r3, [r7, #20]
 802325a:	3b04      	subs	r3, #4
 802325c:	4619      	mov	r1, r3
 802325e:	4610      	mov	r0, r2
 8023260:	f001 f91a 	bl	8024498 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 8023264:	687b      	ldr	r3, [r7, #4]
 8023266:	68da      	ldr	r2, [r3, #12]
 8023268:	687b      	ldr	r3, [r7, #4]
 802326a:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 802326c:	687b      	ldr	r3, [r7, #4]
 802326e:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 8023270:	2014      	movs	r0, #20
 8023272:	f7fd fe06 	bl	8020e82 <_ZSt16__deque_buf_sizej>
 8023276:	4602      	mov	r2, r0
 8023278:	683b      	ldr	r3, [r7, #0]
 802327a:	fbb3 f1f2 	udiv	r1, r3, r2
 802327e:	fb01 f202 	mul.w	r2, r1, r2
 8023282:	1a9a      	subs	r2, r3, r2
					+ __num_elements
 8023284:	4613      	mov	r3, r2
 8023286:	009b      	lsls	r3, r3, #2
 8023288:	4413      	add	r3, r2
 802328a:	009b      	lsls	r3, r3, #2
 802328c:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 802328e:	687b      	ldr	r3, [r7, #4]
 8023290:	619a      	str	r2, [r3, #24]
    }
 8023292:	bf00      	nop
 8023294:	3724      	adds	r7, #36	; 0x24
 8023296:	46bd      	mov	sp, r7
 8023298:	bd90      	pop	{r4, r7, pc}

0802329a <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_M_destroy_nodesEPPS0_S4_>:
    _Deque_base<_Tp, _Alloc>::
 802329a:	b580      	push	{r7, lr}
 802329c:	b086      	sub	sp, #24
 802329e:	af00      	add	r7, sp, #0
 80232a0:	60f8      	str	r0, [r7, #12]
 80232a2:	60b9      	str	r1, [r7, #8]
 80232a4:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 80232a6:	68bb      	ldr	r3, [r7, #8]
 80232a8:	617b      	str	r3, [r7, #20]
 80232aa:	697a      	ldr	r2, [r7, #20]
 80232ac:	687b      	ldr	r3, [r7, #4]
 80232ae:	429a      	cmp	r2, r3
 80232b0:	d209      	bcs.n	80232c6 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_M_destroy_nodesEPPS0_S4_+0x2c>
	_M_deallocate_node(*__n);
 80232b2:	697b      	ldr	r3, [r7, #20]
 80232b4:	681b      	ldr	r3, [r3, #0]
 80232b6:	4619      	mov	r1, r3
 80232b8:	68f8      	ldr	r0, [r7, #12]
 80232ba:	f001 f909 	bl	80244d0 <_ZNSt11_Deque_baseI7RequestSaIS0_EE18_M_deallocate_nodeEPS0_>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 80232be:	697b      	ldr	r3, [r7, #20]
 80232c0:	3304      	adds	r3, #4
 80232c2:	617b      	str	r3, [r7, #20]
 80232c4:	e7f1      	b.n	80232aa <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_M_destroy_nodesEPPS0_S4_+0x10>
    }
 80232c6:	bf00      	nop
 80232c8:	3718      	adds	r7, #24
 80232ca:	46bd      	mov	sp, r7
 80232cc:	bd80      	pop	{r7, pc}

080232ce <_ZNSt11_Deque_baseI7RequestSaIS0_EE17_M_deallocate_mapEPPS0_j>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 80232ce:	b580      	push	{r7, lr}
 80232d0:	b086      	sub	sp, #24
 80232d2:	af00      	add	r7, sp, #0
 80232d4:	60f8      	str	r0, [r7, #12]
 80232d6:	60b9      	str	r1, [r7, #8]
 80232d8:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 80232da:	f107 0314 	add.w	r3, r7, #20
 80232de:	68f9      	ldr	r1, [r7, #12]
 80232e0:	4618      	mov	r0, r3
 80232e2:	f001 f908 	bl	80244f6 <_ZNKSt11_Deque_baseI7RequestSaIS0_EE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 80232e6:	f107 0314 	add.w	r3, r7, #20
 80232ea:	687a      	ldr	r2, [r7, #4]
 80232ec:	68b9      	ldr	r1, [r7, #8]
 80232ee:	4618      	mov	r0, r3
 80232f0:	f001 f91e 	bl	8024530 <_ZNSt16allocator_traitsISaIP7RequestEE10deallocateERS2_PS1_j>
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 80232f4:	f107 0314 	add.w	r3, r7, #20
 80232f8:	4618      	mov	r0, r3
 80232fa:	f001 f90d 	bl	8024518 <_ZNSaIP7RequestED1Ev>
      }
 80232fe:	bf00      	nop
 8023300:	3718      	adds	r7, #24
 8023302:	46bd      	mov	sp, r7
 8023304:	bd80      	pop	{r7, pc}

08023306 <_ZNSt5dequeI7RequestSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8023306:	b580      	push	{r7, lr}
 8023308:	b082      	sub	sp, #8
 802330a:	af00      	add	r7, sp, #0
 802330c:	6078      	str	r0, [r7, #4]
 802330e:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 8023310:	683b      	ldr	r3, [r7, #0]
 8023312:	3308      	adds	r3, #8
 8023314:	4619      	mov	r1, r3
 8023316:	6878      	ldr	r0, [r7, #4]
 8023318:	f000 f81e 	bl	8023358 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1ERKS3_>
 802331c:	6878      	ldr	r0, [r7, #4]
 802331e:	3708      	adds	r7, #8
 8023320:	46bd      	mov	sp, r7
 8023322:	bd80      	pop	{r7, pc}

08023324 <_ZNSt5dequeI7RequestSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8023324:	b580      	push	{r7, lr}
 8023326:	b082      	sub	sp, #8
 8023328:	af00      	add	r7, sp, #0
 802332a:	6078      	str	r0, [r7, #4]
 802332c:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 802332e:	683b      	ldr	r3, [r7, #0]
 8023330:	3318      	adds	r3, #24
 8023332:	4619      	mov	r1, r3
 8023334:	6878      	ldr	r0, [r7, #4]
 8023336:	f000 f80f 	bl	8023358 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1ERKS3_>
 802333a:	6878      	ldr	r0, [r7, #4]
 802333c:	3708      	adds	r7, #8
 802333e:	46bd      	mov	sp, r7
 8023340:	bd80      	pop	{r7, pc}

08023342 <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8023342:	b480      	push	{r7}
 8023344:	b083      	sub	sp, #12
 8023346:	af00      	add	r7, sp, #0
 8023348:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 802334a:	687b      	ldr	r3, [r7, #4]
 802334c:	4618      	mov	r0, r3
 802334e:	370c      	adds	r7, #12
 8023350:	46bd      	mov	sp, r7
 8023352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023356:	4770      	bx	lr

08023358 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1ERKS3_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 8023358:	b480      	push	{r7}
 802335a:	b083      	sub	sp, #12
 802335c:	af00      	add	r7, sp, #0
 802335e:	6078      	str	r0, [r7, #4]
 8023360:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8023362:	683b      	ldr	r3, [r7, #0]
 8023364:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8023366:	687b      	ldr	r3, [r7, #4]
 8023368:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 802336a:	683b      	ldr	r3, [r7, #0]
 802336c:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 802336e:	687b      	ldr	r3, [r7, #4]
 8023370:	605a      	str	r2, [r3, #4]
 8023372:	683b      	ldr	r3, [r7, #0]
 8023374:	689a      	ldr	r2, [r3, #8]
 8023376:	687b      	ldr	r3, [r7, #4]
 8023378:	609a      	str	r2, [r3, #8]
 802337a:	683b      	ldr	r3, [r7, #0]
 802337c:	68da      	ldr	r2, [r3, #12]
 802337e:	687b      	ldr	r3, [r7, #4]
 8023380:	60da      	str	r2, [r3, #12]
 8023382:	687b      	ldr	r3, [r7, #4]
 8023384:	4618      	mov	r0, r3
 8023386:	370c      	adds	r7, #12
 8023388:	46bd      	mov	sp, r7
 802338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802338e:	4770      	bx	lr

08023390 <_ZNSt5dequeI7RequestSaIS0_EE15_M_destroy_dataESt15_Deque_iteratorIS0_RS0_PS0_ES6_RKS1_>:
	void
	_M_destroy_data(iterator __first, iterator __last, const _Alloc1&)
	{ _M_destroy_data_aux(__first, __last); }

      void
      _M_destroy_data(iterator __first, iterator __last,
 8023390:	b580      	push	{r7, lr}
 8023392:	b08c      	sub	sp, #48	; 0x30
 8023394:	af00      	add	r7, sp, #0
 8023396:	60f8      	str	r0, [r7, #12]
 8023398:	60b9      	str	r1, [r7, #8]
 802339a:	607a      	str	r2, [r7, #4]
 802339c:	603b      	str	r3, [r7, #0]
		      const std::allocator<_Tp>&)
      {
	if (!__has_trivial_destructor(value_type))
	  _M_destroy_data_aux(__first, __last);
 802339e:	f107 0310 	add.w	r3, r7, #16
 80233a2:	68b9      	ldr	r1, [r7, #8]
 80233a4:	4618      	mov	r0, r3
 80233a6:	f7ff ffd7 	bl	8023358 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1ERKS3_>
 80233aa:	f107 0320 	add.w	r3, r7, #32
 80233ae:	6879      	ldr	r1, [r7, #4]
 80233b0:	4618      	mov	r0, r3
 80233b2:	f7ff ffd1 	bl	8023358 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1ERKS3_>
 80233b6:	f107 0220 	add.w	r2, r7, #32
 80233ba:	f107 0310 	add.w	r3, r7, #16
 80233be:	4619      	mov	r1, r3
 80233c0:	68f8      	ldr	r0, [r7, #12]
 80233c2:	f001 f8c4 	bl	802454e <_ZNSt5dequeI7RequestSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_>
      }
 80233c6:	bf00      	nop
 80233c8:	3730      	adds	r7, #48	; 0x30
 80233ca:	46bd      	mov	sp, r7
 80233cc:	bd80      	pop	{r7, pc}

080233ce <_ZNSt11_Deque_baseI8ResponceSaIS0_EE11_Deque_implD1Ev>:
      struct _Deque_impl
 80233ce:	b580      	push	{r7, lr}
 80233d0:	b082      	sub	sp, #8
 80233d2:	af00      	add	r7, sp, #0
 80233d4:	6078      	str	r0, [r7, #4]
 80233d6:	6878      	ldr	r0, [r7, #4]
 80233d8:	f001 f927 	bl	802462a <_ZNSaI8ResponceED1Ev>
 80233dc:	687b      	ldr	r3, [r7, #4]
 80233de:	4618      	mov	r0, r3
 80233e0:	3708      	adds	r7, #8
 80233e2:	46bd      	mov	sp, r7
 80233e4:	bd80      	pop	{r7, pc}

080233e6 <_ZNSt11_Deque_baseI8ResponceSaIS0_EEC1Ev>:
      _Deque_base()
 80233e6:	b580      	push	{r7, lr}
 80233e8:	b082      	sub	sp, #8
 80233ea:	af00      	add	r7, sp, #0
 80233ec:	6078      	str	r0, [r7, #4]
      : _M_impl()
 80233ee:	687b      	ldr	r3, [r7, #4]
 80233f0:	4618      	mov	r0, r3
 80233f2:	f001 f90a 	bl	802460a <_ZNSt11_Deque_baseI8ResponceSaIS0_EE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 80233f6:	2100      	movs	r1, #0
 80233f8:	6878      	ldr	r0, [r7, #4]
 80233fa:	f001 f922 	bl	8024642 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE17_M_initialize_mapEj>
 80233fe:	687b      	ldr	r3, [r7, #4]
 8023400:	4618      	mov	r0, r3
 8023402:	3708      	adds	r7, #8
 8023404:	46bd      	mov	sp, r7
 8023406:	bd80      	pop	{r7, pc}

08023408 <_ZNSt11_Deque_baseI8ResponceSaIS0_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 8023408:	b580      	push	{r7, lr}
 802340a:	b082      	sub	sp, #8
 802340c:	af00      	add	r7, sp, #0
 802340e:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 8023410:	687b      	ldr	r3, [r7, #4]
 8023412:	681b      	ldr	r3, [r3, #0]
 8023414:	2b00      	cmp	r3, #0
 8023416:	d010      	beq.n	802343a <_ZNSt11_Deque_baseI8ResponceSaIS0_EED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8023418:	687b      	ldr	r3, [r7, #4]
 802341a:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 802341c:	687b      	ldr	r3, [r7, #4]
 802341e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8023420:	3304      	adds	r3, #4
 8023422:	461a      	mov	r2, r3
 8023424:	6878      	ldr	r0, [r7, #4]
 8023426:	f001 f96f 	bl	8024708 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_M_destroy_nodesEPPS0_S4_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 802342a:	687b      	ldr	r3, [r7, #4]
 802342c:	6819      	ldr	r1, [r3, #0]
 802342e:	687b      	ldr	r3, [r7, #4]
 8023430:	685b      	ldr	r3, [r3, #4]
 8023432:	461a      	mov	r2, r3
 8023434:	6878      	ldr	r0, [r7, #4]
 8023436:	f001 f981 	bl	802473c <_ZNSt11_Deque_baseI8ResponceSaIS0_EE17_M_deallocate_mapEPPS0_j>
    }
 802343a:	687b      	ldr	r3, [r7, #4]
 802343c:	4618      	mov	r0, r3
 802343e:	f7ff ffc6 	bl	80233ce <_ZNSt11_Deque_baseI8ResponceSaIS0_EE11_Deque_implD1Ev>
 8023442:	687b      	ldr	r3, [r7, #4]
 8023444:	4618      	mov	r0, r3
 8023446:	3708      	adds	r7, #8
 8023448:	46bd      	mov	sp, r7
 802344a:	bd80      	pop	{r7, pc}

0802344c <_ZNSt5dequeI8ResponceSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 802344c:	b580      	push	{r7, lr}
 802344e:	b082      	sub	sp, #8
 8023450:	af00      	add	r7, sp, #0
 8023452:	6078      	str	r0, [r7, #4]
 8023454:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 8023456:	683b      	ldr	r3, [r7, #0]
 8023458:	3308      	adds	r3, #8
 802345a:	4619      	mov	r1, r3
 802345c:	6878      	ldr	r0, [r7, #4]
 802345e:	f000 f81e 	bl	802349e <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1ERKS3_>
 8023462:	6878      	ldr	r0, [r7, #4]
 8023464:	3708      	adds	r7, #8
 8023466:	46bd      	mov	sp, r7
 8023468:	bd80      	pop	{r7, pc}

0802346a <_ZNSt5dequeI8ResponceSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 802346a:	b580      	push	{r7, lr}
 802346c:	b082      	sub	sp, #8
 802346e:	af00      	add	r7, sp, #0
 8023470:	6078      	str	r0, [r7, #4]
 8023472:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 8023474:	683b      	ldr	r3, [r7, #0]
 8023476:	3318      	adds	r3, #24
 8023478:	4619      	mov	r1, r3
 802347a:	6878      	ldr	r0, [r7, #4]
 802347c:	f000 f80f 	bl	802349e <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1ERKS3_>
 8023480:	6878      	ldr	r0, [r7, #4]
 8023482:	3708      	adds	r7, #8
 8023484:	46bd      	mov	sp, r7
 8023486:	bd80      	pop	{r7, pc}

08023488 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8023488:	b480      	push	{r7}
 802348a:	b083      	sub	sp, #12
 802348c:	af00      	add	r7, sp, #0
 802348e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8023490:	687b      	ldr	r3, [r7, #4]
 8023492:	4618      	mov	r0, r3
 8023494:	370c      	adds	r7, #12
 8023496:	46bd      	mov	sp, r7
 8023498:	f85d 7b04 	ldr.w	r7, [sp], #4
 802349c:	4770      	bx	lr

0802349e <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1ERKS3_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 802349e:	b480      	push	{r7}
 80234a0:	b083      	sub	sp, #12
 80234a2:	af00      	add	r7, sp, #0
 80234a4:	6078      	str	r0, [r7, #4]
 80234a6:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 80234a8:	683b      	ldr	r3, [r7, #0]
 80234aa:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 80234ac:	687b      	ldr	r3, [r7, #4]
 80234ae:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 80234b0:	683b      	ldr	r3, [r7, #0]
 80234b2:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 80234b4:	687b      	ldr	r3, [r7, #4]
 80234b6:	605a      	str	r2, [r3, #4]
 80234b8:	683b      	ldr	r3, [r7, #0]
 80234ba:	689a      	ldr	r2, [r3, #8]
 80234bc:	687b      	ldr	r3, [r7, #4]
 80234be:	609a      	str	r2, [r3, #8]
 80234c0:	683b      	ldr	r3, [r7, #0]
 80234c2:	68da      	ldr	r2, [r3, #12]
 80234c4:	687b      	ldr	r3, [r7, #4]
 80234c6:	60da      	str	r2, [r3, #12]
 80234c8:	687b      	ldr	r3, [r7, #4]
 80234ca:	4618      	mov	r0, r3
 80234cc:	370c      	adds	r7, #12
 80234ce:	46bd      	mov	sp, r7
 80234d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80234d4:	4770      	bx	lr

080234d6 <_ZNSt5dequeI8ResponceSaIS0_EE15_M_destroy_dataESt15_Deque_iteratorIS0_RS0_PS0_ES6_RKS1_>:
      _M_destroy_data(iterator __first, iterator __last,
 80234d6:	b580      	push	{r7, lr}
 80234d8:	b08c      	sub	sp, #48	; 0x30
 80234da:	af00      	add	r7, sp, #0
 80234dc:	60f8      	str	r0, [r7, #12]
 80234de:	60b9      	str	r1, [r7, #8]
 80234e0:	607a      	str	r2, [r7, #4]
 80234e2:	603b      	str	r3, [r7, #0]
	  _M_destroy_data_aux(__first, __last);
 80234e4:	f107 0310 	add.w	r3, r7, #16
 80234e8:	68b9      	ldr	r1, [r7, #8]
 80234ea:	4618      	mov	r0, r3
 80234ec:	f7ff ffd7 	bl	802349e <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1ERKS3_>
 80234f0:	f107 0320 	add.w	r3, r7, #32
 80234f4:	6879      	ldr	r1, [r7, #4]
 80234f6:	4618      	mov	r0, r3
 80234f8:	f7ff ffd1 	bl	802349e <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1ERKS3_>
 80234fc:	f107 0220 	add.w	r2, r7, #32
 8023500:	f107 0310 	add.w	r3, r7, #16
 8023504:	4619      	mov	r1, r3
 8023506:	68f8      	ldr	r0, [r7, #12]
 8023508:	f001 f934 	bl	8024774 <_ZNSt5dequeI8ResponceSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_>
      }
 802350c:	bf00      	nop
 802350e:	3730      	adds	r7, #48	; 0x30
 8023510:	46bd      	mov	sp, r7
 8023512:	bd80      	pop	{r7, pc}

08023514 <_ZNSaIhEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8023514:	b580      	push	{r7, lr}
 8023516:	b082      	sub	sp, #8
 8023518:	af00      	add	r7, sp, #0
 802351a:	6078      	str	r0, [r7, #4]
 802351c:	6878      	ldr	r0, [r7, #4]
 802351e:	f001 f984 	bl	802482a <_ZN9__gnu_cxx13new_allocatorIhEC1Ev>
 8023522:	687b      	ldr	r3, [r7, #4]
 8023524:	4618      	mov	r0, r3
 8023526:	3708      	adds	r7, #8
 8023528:	46bd      	mov	sp, r7
 802352a:	bd80      	pop	{r7, pc}

0802352c <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 802352c:	b480      	push	{r7}
 802352e:	b083      	sub	sp, #12
 8023530:	af00      	add	r7, sp, #0
 8023532:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8023534:	687b      	ldr	r3, [r7, #4]
 8023536:	2200      	movs	r2, #0
 8023538:	601a      	str	r2, [r3, #0]
 802353a:	687b      	ldr	r3, [r7, #4]
 802353c:	2200      	movs	r2, #0
 802353e:	605a      	str	r2, [r3, #4]
 8023540:	687b      	ldr	r3, [r7, #4]
 8023542:	2200      	movs	r2, #0
 8023544:	609a      	str	r2, [r3, #8]
	{ }
 8023546:	687b      	ldr	r3, [r7, #4]
 8023548:	4618      	mov	r0, r3
 802354a:	370c      	adds	r7, #12
 802354c:	46bd      	mov	sp, r7
 802354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023552:	4770      	bx	lr

08023554 <_ZN9__gnu_cxx13new_allocatorIhED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8023554:	b480      	push	{r7}
 8023556:	b083      	sub	sp, #12
 8023558:	af00      	add	r7, sp, #0
 802355a:	6078      	str	r0, [r7, #4]
 802355c:	687b      	ldr	r3, [r7, #4]
 802355e:	4618      	mov	r0, r3
 8023560:	370c      	adds	r7, #12
 8023562:	46bd      	mov	sp, r7
 8023564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023568:	4770      	bx	lr

0802356a <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>:
      _M_deallocate(pointer __p, size_t __n)
 802356a:	b580      	push	{r7, lr}
 802356c:	b084      	sub	sp, #16
 802356e:	af00      	add	r7, sp, #0
 8023570:	60f8      	str	r0, [r7, #12]
 8023572:	60b9      	str	r1, [r7, #8]
 8023574:	607a      	str	r2, [r7, #4]
	if (__p)
 8023576:	68bb      	ldr	r3, [r7, #8]
 8023578:	2b00      	cmp	r3, #0
 802357a:	d005      	beq.n	8023588 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 802357c:	68fb      	ldr	r3, [r7, #12]
 802357e:	687a      	ldr	r2, [r7, #4]
 8023580:	68b9      	ldr	r1, [r7, #8]
 8023582:	4618      	mov	r0, r3
 8023584:	f001 f95c 	bl	8024840 <_ZNSt16allocator_traitsISaIhEE10deallocateERS0_Phj>
      }
 8023588:	bf00      	nop
 802358a:	3710      	adds	r7, #16
 802358c:	46bd      	mov	sp, r7
 802358e:	bd80      	pop	{r7, pc}

08023590 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8023590:	b480      	push	{r7}
 8023592:	b083      	sub	sp, #12
 8023594:	af00      	add	r7, sp, #0
 8023596:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8023598:	687b      	ldr	r3, [r7, #4]
 802359a:	4618      	mov	r0, r3
 802359c:	370c      	adds	r7, #12
 802359e:	46bd      	mov	sp, r7
 80235a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80235a4:	4770      	bx	lr

080235a6 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>:
#endif
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80235a6:	b580      	push	{r7, lr}
 80235a8:	b084      	sub	sp, #16
 80235aa:	af00      	add	r7, sp, #0
 80235ac:	60f8      	str	r0, [r7, #12]
 80235ae:	60b9      	str	r1, [r7, #8]
 80235b0:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 80235b2:	68b9      	ldr	r1, [r7, #8]
 80235b4:	68f8      	ldr	r0, [r7, #12]
 80235b6:	f001 f952 	bl	802485e <_ZSt8_DestroyIPhEvT_S1_>
    }
 80235ba:	bf00      	nop
 80235bc:	3710      	adds	r7, #16
 80235be:	46bd      	mov	sp, r7
 80235c0:	bd80      	pop	{r7, pc}

080235c2 <_ZSt7forwardI7RequestEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80235c2:	b480      	push	{r7}
 80235c4:	b083      	sub	sp, #12
 80235c6:	af00      	add	r7, sp, #0
 80235c8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80235ca:	687b      	ldr	r3, [r7, #4]
 80235cc:	4618      	mov	r0, r3
 80235ce:	370c      	adds	r7, #12
 80235d0:	46bd      	mov	sp, r7
 80235d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80235d6:	4770      	bx	lr

080235d8 <_ZNSt16allocator_traitsISaI7RequestEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80235d8:	b580      	push	{r7, lr}
 80235da:	b084      	sub	sp, #16
 80235dc:	af00      	add	r7, sp, #0
 80235de:	60f8      	str	r0, [r7, #12]
 80235e0:	60b9      	str	r1, [r7, #8]
 80235e2:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 80235e4:	6878      	ldr	r0, [r7, #4]
 80235e6:	f7ff ffec 	bl	80235c2 <_ZSt7forwardI7RequestEOT_RNSt16remove_referenceIS1_E4typeE>
 80235ea:	4603      	mov	r3, r0
 80235ec:	461a      	mov	r2, r3
 80235ee:	68b9      	ldr	r1, [r7, #8]
 80235f0:	68f8      	ldr	r0, [r7, #12]
 80235f2:	f001 f941 	bl	8024878 <_ZN9__gnu_cxx13new_allocatorI7RequestE9constructIS1_JS1_EEEvPT_DpOT0_>
	}
 80235f6:	bf00      	nop
 80235f8:	3710      	adds	r7, #16
 80235fa:	46bd      	mov	sp, r7
 80235fc:	bd80      	pop	{r7, pc}
	...

08023600 <_ZNSt5dequeI7RequestSaIS0_EE16_M_push_back_auxIJS0_EEEvDpOT_>:
  // Called only if _M_impl._M_finish._M_cur == _M_impl._M_finish._M_last - 1.
  template<typename _Tp, typename _Alloc>
#if __cplusplus >= 201103L
    template<typename... _Args>
      void
      deque<_Tp, _Alloc>::
 8023600:	b5b0      	push	{r4, r5, r7, lr}
 8023602:	b082      	sub	sp, #8
 8023604:	af00      	add	r7, sp, #0
 8023606:	6078      	str	r0, [r7, #4]
 8023608:	6039      	str	r1, [r7, #0]
      void
      deque<_Tp, _Alloc>::
      _M_push_back_aux(const value_type& __t)
#endif
      {
	if (size() == max_size())
 802360a:	6878      	ldr	r0, [r7, #4]
 802360c:	f7ff fc17 	bl	8022e3e <_ZNKSt5dequeI7RequestSaIS0_EE4sizeEv>
 8023610:	4604      	mov	r4, r0
 8023612:	6878      	ldr	r0, [r7, #4]
 8023614:	f001 f948 	bl	80248a8 <_ZNKSt5dequeI7RequestSaIS0_EE8max_sizeEv>
 8023618:	4603      	mov	r3, r0
 802361a:	429c      	cmp	r4, r3
 802361c:	bf0c      	ite	eq
 802361e:	2301      	moveq	r3, #1
 8023620:	2300      	movne	r3, #0
 8023622:	b2db      	uxtb	r3, r3
 8023624:	2b00      	cmp	r3, #0
 8023626:	d002      	beq.n	802362e <_ZNSt5dequeI7RequestSaIS0_EE16_M_push_back_auxIJS0_EEEvDpOT_+0x2e>
	  __throw_length_error(
 8023628:	4816      	ldr	r0, [pc, #88]	; (8023684 <_ZNSt5dequeI7RequestSaIS0_EE16_M_push_back_auxIJS0_EEEvDpOT_+0x84>)
 802362a:	f019 fc31 	bl	803ce90 <_ZSt20__throw_length_errorPKc>
	      __N("cannot create std::deque larger than max_size()"));

	_M_reserve_map_at_back();
 802362e:	2101      	movs	r1, #1
 8023630:	6878      	ldr	r0, [r7, #4]
 8023632:	f001 f94a 	bl	80248ca <_ZNSt5dequeI7RequestSaIS0_EE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 8023636:	687a      	ldr	r2, [r7, #4]
 8023638:	687b      	ldr	r3, [r7, #4]
 802363a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802363c:	1d1c      	adds	r4, r3, #4
 802363e:	4610      	mov	r0, r2
 8023640:	f001 f95e 	bl	8024900 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_M_allocate_nodeEv>
 8023644:	4603      	mov	r3, r0
 8023646:	6023      	str	r3, [r4, #0]
	__try
	  {
#if __cplusplus >= 201103L
	    _Alloc_traits::construct(this->_M_impl,
 8023648:	687c      	ldr	r4, [r7, #4]
 802364a:	687b      	ldr	r3, [r7, #4]
 802364c:	699d      	ldr	r5, [r3, #24]
 802364e:	6838      	ldr	r0, [r7, #0]
 8023650:	f7ff ffb7 	bl	80235c2 <_ZSt7forwardI7RequestEOT_RNSt16remove_referenceIS1_E4typeE>
 8023654:	4603      	mov	r3, r0
 8023656:	461a      	mov	r2, r3
 8023658:	4629      	mov	r1, r5
 802365a:	4620      	mov	r0, r4
 802365c:	f7ff ffbc 	bl	80235d8 <_ZNSt16allocator_traitsISaI7RequestEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
				     this->_M_impl._M_finish._M_cur,
				     std::forward<_Args>(__args)...);
#else
	    this->_M_impl.construct(this->_M_impl._M_finish._M_cur, __t);
#endif
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 8023660:	687b      	ldr	r3, [r7, #4]
 8023662:	f103 0218 	add.w	r2, r3, #24
 8023666:	687b      	ldr	r3, [r7, #4]
 8023668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802366a:	3304      	adds	r3, #4
 802366c:	4619      	mov	r1, r3
 802366e:	4610      	mov	r0, r2
 8023670:	f000 ff12 	bl	8024498 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E11_M_set_nodeEPS2_>
						+ 1);
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 8023674:	687b      	ldr	r3, [r7, #4]
 8023676:	69da      	ldr	r2, [r3, #28]
 8023678:	687b      	ldr	r3, [r7, #4]
 802367a:	619a      	str	r2, [r3, #24]
	__catch(...)
	  {
	    _M_deallocate_node(*(this->_M_impl._M_finish._M_node + 1));
	    __throw_exception_again;
	  }
      }
 802367c:	bf00      	nop
 802367e:	3708      	adds	r7, #8
 8023680:	46bd      	mov	sp, r7
 8023682:	bdb0      	pop	{r4, r5, r7, pc}
 8023684:	0803e6ac 	.word	0x0803e6ac

08023688 <_ZSt4moveIRSt6vectorIhSaIhEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8023688:	b480      	push	{r7}
 802368a:	b083      	sub	sp, #12
 802368c:	af00      	add	r7, sp, #0
 802368e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8023690:	687b      	ldr	r3, [r7, #4]
 8023692:	4618      	mov	r0, r3
 8023694:	370c      	adds	r7, #12
 8023696:	46bd      	mov	sp, r7
 8023698:	f85d 7b04 	ldr.w	r7, [sp], #4
 802369c:	4770      	bx	lr

0802369e <_ZNSt6vectorIhSaIhEE14_M_move_assignEOS1_St17integral_constantIbLb1EE>:
    private:
      // Constant-time move assignment when source object's memory can be
      // moved, either because the source's allocator will move too
      // or because the allocators are equal.
      void
      _M_move_assign(vector&& __x, true_type) noexcept
 802369e:	b590      	push	{r4, r7, lr}
 80236a0:	b089      	sub	sp, #36	; 0x24
 80236a2:	af00      	add	r7, sp, #0
 80236a4:	60f8      	str	r0, [r7, #12]
 80236a6:	60b9      	str	r1, [r7, #8]
 80236a8:	713a      	strb	r2, [r7, #4]
      {
	vector __tmp(get_allocator());
 80236aa:	68fa      	ldr	r2, [r7, #12]
 80236ac:	f107 031c 	add.w	r3, r7, #28
 80236b0:	4611      	mov	r1, r2
 80236b2:	4618      	mov	r0, r3
 80236b4:	f001 f936 	bl	8024924 <_ZNKSt12_Vector_baseIhSaIhEE13get_allocatorEv>
 80236b8:	f107 021c 	add.w	r2, r7, #28
 80236bc:	f107 0310 	add.w	r3, r7, #16
 80236c0:	4611      	mov	r1, r2
 80236c2:	4618      	mov	r0, r3
 80236c4:	f001 f93f 	bl	8024946 <_ZNSt6vectorIhSaIhEEC1ERKS0_>
 80236c8:	f107 031c 	add.w	r3, r7, #28
 80236cc:	4618      	mov	r0, r3
 80236ce:	f7ff f93b 	bl	8022948 <_ZNSaIhED1Ev>
	this->_M_impl._M_swap_data(__x._M_impl);
 80236d2:	68fb      	ldr	r3, [r7, #12]
 80236d4:	68ba      	ldr	r2, [r7, #8]
 80236d6:	4611      	mov	r1, r2
 80236d8:	4618      	mov	r0, r3
 80236da:	f001 f943 	bl	8024964 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_data12_M_swap_dataERS2_>
	__tmp._M_impl._M_swap_data(__x._M_impl);
 80236de:	68ba      	ldr	r2, [r7, #8]
 80236e0:	f107 0310 	add.w	r3, r7, #16
 80236e4:	4611      	mov	r1, r2
 80236e6:	4618      	mov	r0, r3
 80236e8:	f001 f93c 	bl	8024964 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_data12_M_swap_dataERS2_>
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
 80236ec:	68fb      	ldr	r3, [r7, #12]
 80236ee:	4618      	mov	r0, r3
 80236f0:	f7ff ff4e 	bl	8023590 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80236f4:	4604      	mov	r4, r0
 80236f6:	68bb      	ldr	r3, [r7, #8]
 80236f8:	4618      	mov	r0, r3
 80236fa:	f7ff ff49 	bl	8023590 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80236fe:	4603      	mov	r3, r0
 8023700:	4619      	mov	r1, r3
 8023702:	4620      	mov	r0, r4
 8023704:	f001 f94c 	bl	80249a0 <_ZSt15__alloc_on_moveISaIhEEvRT_S2_>
	vector __tmp(get_allocator());
 8023708:	f107 0310 	add.w	r3, r7, #16
 802370c:	4618      	mov	r0, r3
 802370e:	f7ff f93f 	bl	8022990 <_ZNSt6vectorIhSaIhEED1Ev>
      }
 8023712:	bf00      	nop
 8023714:	3724      	adds	r7, #36	; 0x24
 8023716:	46bd      	mov	sp, r7
 8023718:	bd90      	pop	{r4, r7, pc}

0802371a <_ZSteqRKSt15_Deque_iteratorI7RequestRS0_PS0_ES5_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 802371a:	b480      	push	{r7}
 802371c:	b083      	sub	sp, #12
 802371e:	af00      	add	r7, sp, #0
 8023720:	6078      	str	r0, [r7, #4]
 8023722:	6039      	str	r1, [r7, #0]
      { return __x._M_cur == __y._M_cur; }
 8023724:	687b      	ldr	r3, [r7, #4]
 8023726:	681a      	ldr	r2, [r3, #0]
 8023728:	683b      	ldr	r3, [r7, #0]
 802372a:	681b      	ldr	r3, [r3, #0]
 802372c:	429a      	cmp	r2, r3
 802372e:	bf0c      	ite	eq
 8023730:	2301      	moveq	r3, #1
 8023732:	2300      	movne	r3, #0
 8023734:	b2db      	uxtb	r3, r3
 8023736:	4618      	mov	r0, r3
 8023738:	370c      	adds	r7, #12
 802373a:	46bd      	mov	sp, r7
 802373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023740:	4770      	bx	lr

08023742 <_ZSt7forwardI8ResponceEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8023742:	b480      	push	{r7}
 8023744:	b083      	sub	sp, #12
 8023746:	af00      	add	r7, sp, #0
 8023748:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 802374a:	687b      	ldr	r3, [r7, #4]
 802374c:	4618      	mov	r0, r3
 802374e:	370c      	adds	r7, #12
 8023750:	46bd      	mov	sp, r7
 8023752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023756:	4770      	bx	lr

08023758 <_ZNSt5dequeI8ResponceSaIS0_EE12emplace_backIJS0_EEEvDpOT_>:
      deque<_Tp, _Alloc>::
 8023758:	b5b0      	push	{r4, r5, r7, lr}
 802375a:	b082      	sub	sp, #8
 802375c:	af00      	add	r7, sp, #0
 802375e:	6078      	str	r0, [r7, #4]
 8023760:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish._M_cur
 8023762:	687b      	ldr	r3, [r7, #4]
 8023764:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 8023766:	687b      	ldr	r3, [r7, #4]
 8023768:	6a1b      	ldr	r3, [r3, #32]
 802376a:	3b10      	subs	r3, #16
	if (this->_M_impl._M_finish._M_cur
 802376c:	429a      	cmp	r2, r3
 802376e:	d012      	beq.n	8023796 <_ZNSt5dequeI8ResponceSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x3e>
	    _Alloc_traits::construct(this->_M_impl,
 8023770:	687c      	ldr	r4, [r7, #4]
 8023772:	687b      	ldr	r3, [r7, #4]
 8023774:	699d      	ldr	r5, [r3, #24]
 8023776:	6838      	ldr	r0, [r7, #0]
 8023778:	f7ff ffe3 	bl	8023742 <_ZSt7forwardI8ResponceEOT_RNSt16remove_referenceIS1_E4typeE>
 802377c:	4603      	mov	r3, r0
 802377e:	461a      	mov	r2, r3
 8023780:	4629      	mov	r1, r5
 8023782:	4620      	mov	r0, r4
 8023784:	f001 f91a 	bl	80249bc <_ZNSt16allocator_traitsISaI8ResponceEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
	    ++this->_M_impl._M_finish._M_cur;
 8023788:	687b      	ldr	r3, [r7, #4]
 802378a:	699b      	ldr	r3, [r3, #24]
 802378c:	f103 0210 	add.w	r2, r3, #16
 8023790:	687b      	ldr	r3, [r7, #4]
 8023792:	619a      	str	r2, [r3, #24]
      }
 8023794:	e007      	b.n	80237a6 <_ZNSt5dequeI8ResponceSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x4e>
	  _M_push_back_aux(std::forward<_Args>(__args)...);
 8023796:	6838      	ldr	r0, [r7, #0]
 8023798:	f7ff ffd3 	bl	8023742 <_ZSt7forwardI8ResponceEOT_RNSt16remove_referenceIS1_E4typeE>
 802379c:	4603      	mov	r3, r0
 802379e:	4619      	mov	r1, r3
 80237a0:	6878      	ldr	r0, [r7, #4]
 80237a2:	f001 f91f 	bl	80249e4 <_ZNSt5dequeI8ResponceSaIS0_EE16_M_push_back_auxIJS0_EEEvDpOT_>
      }
 80237a6:	bf00      	nop
 80237a8:	3708      	adds	r7, #8
 80237aa:	46bd      	mov	sp, r7
 80237ac:	bdb0      	pop	{r4, r5, r7, pc}

080237ae <_ZNKSt5dequeI8ResponceSaIS0_EE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 80237ae:	b580      	push	{r7, lr}
 80237b0:	b082      	sub	sp, #8
 80237b2:	af00      	add	r7, sp, #0
 80237b4:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
 80237b6:	687b      	ldr	r3, [r7, #4]
 80237b8:	f103 0218 	add.w	r2, r3, #24
 80237bc:	687b      	ldr	r3, [r7, #4]
 80237be:	3308      	adds	r3, #8
 80237c0:	4619      	mov	r1, r3
 80237c2:	4610      	mov	r0, r2
 80237c4:	f001 f952 	bl	8024a6c <_ZSteqRKSt15_Deque_iteratorI8ResponceRS0_PS0_ES5_>
 80237c8:	4603      	mov	r3, r0
 80237ca:	4618      	mov	r0, r3
 80237cc:	3708      	adds	r7, #8
 80237ce:	46bd      	mov	sp, r7
 80237d0:	bd80      	pop	{r7, pc}

080237d2 <_ZNSt5dequeI8ResponceSaIS0_EE5frontEv>:
      front() _GLIBCXX_NOEXCEPT
 80237d2:	b580      	push	{r7, lr}
 80237d4:	b086      	sub	sp, #24
 80237d6:	af00      	add	r7, sp, #0
 80237d8:	6078      	str	r0, [r7, #4]
	return *begin();
 80237da:	f107 0308 	add.w	r3, r7, #8
 80237de:	6879      	ldr	r1, [r7, #4]
 80237e0:	4618      	mov	r0, r3
 80237e2:	f7ff fe33 	bl	802344c <_ZNSt5dequeI8ResponceSaIS0_EE5beginEv>
 80237e6:	f107 0308 	add.w	r3, r7, #8
 80237ea:	4618      	mov	r0, r3
 80237ec:	f001 f952 	bl	8024a94 <_ZNKSt15_Deque_iteratorI8ResponceRS0_PS0_EdeEv>
 80237f0:	4603      	mov	r3, r0
      }
 80237f2:	4618      	mov	r0, r3
 80237f4:	3718      	adds	r7, #24
 80237f6:	46bd      	mov	sp, r7
 80237f8:	bd80      	pop	{r7, pc}

080237fa <_ZSt4moveIRNSt12_Vector_baseIhSaIhEE12_Vector_implEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 80237fa:	b480      	push	{r7}
 80237fc:	b083      	sub	sp, #12
 80237fe:	af00      	add	r7, sp, #0
 8023800:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8023802:	687b      	ldr	r3, [r7, #4]
 8023804:	4618      	mov	r0, r3
 8023806:	370c      	adds	r7, #12
 8023808:	46bd      	mov	sp, r7
 802380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802380e:	4770      	bx	lr

08023810 <_ZNSaIhEC1ERKS_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8023810:	b580      	push	{r7, lr}
 8023812:	b082      	sub	sp, #8
 8023814:	af00      	add	r7, sp, #0
 8023816:	6078      	str	r0, [r7, #4]
 8023818:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 802381a:	6839      	ldr	r1, [r7, #0]
 802381c:	6878      	ldr	r0, [r7, #4]
 802381e:	f001 f945 	bl	8024aac <_ZN9__gnu_cxx13new_allocatorIhEC1ERKS1_>
 8023822:	687b      	ldr	r3, [r7, #4]
 8023824:	4618      	mov	r0, r3
 8023826:	3708      	adds	r7, #8
 8023828:	46bd      	mov	sp, r7
 802382a:	bd80      	pop	{r7, pc}

0802382c <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1EOS2_>:
	_Vector_impl_data(_Vector_impl_data&& __x) noexcept
 802382c:	b480      	push	{r7}
 802382e:	b083      	sub	sp, #12
 8023830:	af00      	add	r7, sp, #0
 8023832:	6078      	str	r0, [r7, #4]
 8023834:	6039      	str	r1, [r7, #0]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 8023836:	683b      	ldr	r3, [r7, #0]
 8023838:	681a      	ldr	r2, [r3, #0]
	  _M_end_of_storage(__x._M_end_of_storage)
 802383a:	687b      	ldr	r3, [r7, #4]
 802383c:	601a      	str	r2, [r3, #0]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 802383e:	683b      	ldr	r3, [r7, #0]
 8023840:	685a      	ldr	r2, [r3, #4]
	  _M_end_of_storage(__x._M_end_of_storage)
 8023842:	687b      	ldr	r3, [r7, #4]
 8023844:	605a      	str	r2, [r3, #4]
 8023846:	683b      	ldr	r3, [r7, #0]
 8023848:	689a      	ldr	r2, [r3, #8]
 802384a:	687b      	ldr	r3, [r7, #4]
 802384c:	609a      	str	r2, [r3, #8]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 802384e:	683b      	ldr	r3, [r7, #0]
 8023850:	2200      	movs	r2, #0
 8023852:	609a      	str	r2, [r3, #8]
 8023854:	683b      	ldr	r3, [r7, #0]
 8023856:	689a      	ldr	r2, [r3, #8]
 8023858:	683b      	ldr	r3, [r7, #0]
 802385a:	605a      	str	r2, [r3, #4]
 802385c:	683b      	ldr	r3, [r7, #0]
 802385e:	685a      	ldr	r2, [r3, #4]
 8023860:	683b      	ldr	r3, [r7, #0]
 8023862:	601a      	str	r2, [r3, #0]
 8023864:	687b      	ldr	r3, [r7, #4]
 8023866:	4618      	mov	r0, r3
 8023868:	370c      	adds	r7, #12
 802386a:	46bd      	mov	sp, r7
 802386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023870:	4770      	bx	lr

08023872 <_ZNSt5dequeI8ResponceSaIS0_EE9pop_frontEv>:
      pop_front() _GLIBCXX_NOEXCEPT
 8023872:	b580      	push	{r7, lr}
 8023874:	b082      	sub	sp, #8
 8023876:	af00      	add	r7, sp, #0
 8023878:	6078      	str	r0, [r7, #4]
	if (this->_M_impl._M_start._M_cur
 802387a:	687b      	ldr	r3, [r7, #4]
 802387c:	689a      	ldr	r2, [r3, #8]
	    != this->_M_impl._M_start._M_last - 1)
 802387e:	687b      	ldr	r3, [r7, #4]
 8023880:	691b      	ldr	r3, [r3, #16]
 8023882:	3b10      	subs	r3, #16
	if (this->_M_impl._M_start._M_cur
 8023884:	429a      	cmp	r2, r3
 8023886:	d011      	beq.n	80238ac <_ZNSt5dequeI8ResponceSaIS0_EE9pop_frontEv+0x3a>
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8023888:	687b      	ldr	r3, [r7, #4]
 802388a:	4618      	mov	r0, r3
 802388c:	f7ff fdfc 	bl	8023488 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 8023890:	4602      	mov	r2, r0
 8023892:	687b      	ldr	r3, [r7, #4]
 8023894:	689b      	ldr	r3, [r3, #8]
 8023896:	4619      	mov	r1, r3
 8023898:	4610      	mov	r0, r2
 802389a:	f001 f913 	bl	8024ac4 <_ZNSt16allocator_traitsISaI8ResponceEE7destroyIS0_EEvRS1_PT_>
	    ++this->_M_impl._M_start._M_cur;
 802389e:	687b      	ldr	r3, [r7, #4]
 80238a0:	689b      	ldr	r3, [r3, #8]
 80238a2:	f103 0210 	add.w	r2, r3, #16
 80238a6:	687b      	ldr	r3, [r7, #4]
 80238a8:	609a      	str	r2, [r3, #8]
      }
 80238aa:	e002      	b.n	80238b2 <_ZNSt5dequeI8ResponceSaIS0_EE9pop_frontEv+0x40>
	  _M_pop_front_aux();
 80238ac:	6878      	ldr	r0, [r7, #4]
 80238ae:	f001 f916 	bl	8024ade <_ZNSt5dequeI8ResponceSaIS0_EE16_M_pop_front_auxEv>
      }
 80238b2:	bf00      	nop
 80238b4:	3708      	adds	r7, #8
 80238b6:	46bd      	mov	sp, r7
 80238b8:	bd80      	pop	{r7, pc}

080238ba <_ZNSt6vectorIhSaIhEE15_S_use_relocateEv>:
      _S_use_relocate()
 80238ba:	b580      	push	{r7, lr}
 80238bc:	b082      	sub	sp, #8
 80238be:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 80238c0:	4618      	mov	r0, r3
 80238c2:	f000 f805 	bl	80238d0 <_ZNSt6vectorIhSaIhEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 80238c6:	4603      	mov	r3, r0
      }
 80238c8:	4618      	mov	r0, r3
 80238ca:	3708      	adds	r7, #8
 80238cc:	46bd      	mov	sp, r7
 80238ce:	bd80      	pop	{r7, pc}

080238d0 <_ZNSt6vectorIhSaIhEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 80238d0:	b480      	push	{r7}
 80238d2:	b083      	sub	sp, #12
 80238d4:	af00      	add	r7, sp, #0
 80238d6:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 80238d8:	2301      	movs	r3, #1
      }
 80238da:	4618      	mov	r0, r3
 80238dc:	370c      	adds	r7, #12
 80238de:	46bd      	mov	sp, r7
 80238e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80238e4:	4770      	bx	lr
	...

080238e8 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj>:
    }

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
 80238e8:	b5b0      	push	{r4, r5, r7, lr}
 80238ea:	b088      	sub	sp, #32
 80238ec:	af00      	add	r7, sp, #0
 80238ee:	6078      	str	r0, [r7, #4]
 80238f0:	6039      	str	r1, [r7, #0]
    _M_default_append(size_type __n)
    {
      if (__n != 0)
 80238f2:	683b      	ldr	r3, [r7, #0]
 80238f4:	2b00      	cmp	r3, #0
 80238f6:	f000 80a8 	beq.w	8023a4a <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x162>
	{
	  const size_type __size = size();
 80238fa:	6878      	ldr	r0, [r7, #4]
 80238fc:	f7ff f961 	bl	8022bc2 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8023900:	61f8      	str	r0, [r7, #28]
	  size_type __navail = size_type(this->_M_impl._M_end_of_storage
 8023902:	687b      	ldr	r3, [r7, #4]
 8023904:	689a      	ldr	r2, [r3, #8]
					 - this->_M_impl._M_finish);
 8023906:	687b      	ldr	r3, [r7, #4]
 8023908:	685b      	ldr	r3, [r3, #4]
 802390a:	1ad3      	subs	r3, r2, r3
	  size_type __navail = size_type(this->_M_impl._M_end_of_storage
 802390c:	61bb      	str	r3, [r7, #24]

	  if (__size > max_size() || __navail > max_size() - __size)
 802390e:	6878      	ldr	r0, [r7, #4]
 8023910:	f001 f90d 	bl	8024b2e <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 8023914:	4602      	mov	r2, r0
 8023916:	69fb      	ldr	r3, [r7, #28]
 8023918:	4293      	cmp	r3, r2
 802391a:	d808      	bhi.n	802392e <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x46>
 802391c:	6878      	ldr	r0, [r7, #4]
 802391e:	f001 f906 	bl	8024b2e <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 8023922:	4602      	mov	r2, r0
 8023924:	69fb      	ldr	r3, [r7, #28]
 8023926:	1ad3      	subs	r3, r2, r3
 8023928:	69ba      	ldr	r2, [r7, #24]
 802392a:	429a      	cmp	r2, r3
 802392c:	d901      	bls.n	8023932 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x4a>
 802392e:	2301      	movs	r3, #1
 8023930:	e000      	b.n	8023934 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x4c>
 8023932:	2300      	movs	r3, #0
 8023934:	2b00      	cmp	r3, #0
	    __builtin_unreachable();

	  if (__navail >= __n)
 8023936:	69ba      	ldr	r2, [r7, #24]
 8023938:	683b      	ldr	r3, [r7, #0]
 802393a:	429a      	cmp	r2, r3
 802393c:	d30f      	bcc.n	802395e <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x76>
	    {
	      _GLIBCXX_ASAN_ANNOTATE_GROW(__n);
	      this->_M_impl._M_finish =
		std::__uninitialized_default_n_a(this->_M_impl._M_finish,
 802393e:	687b      	ldr	r3, [r7, #4]
 8023940:	685c      	ldr	r4, [r3, #4]
						 __n, _M_get_Tp_allocator());
 8023942:	687b      	ldr	r3, [r7, #4]
 8023944:	4618      	mov	r0, r3
 8023946:	f7ff fe23 	bl	8023590 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 802394a:	4603      	mov	r3, r0
		std::__uninitialized_default_n_a(this->_M_impl._M_finish,
 802394c:	461a      	mov	r2, r3
 802394e:	6839      	ldr	r1, [r7, #0]
 8023950:	4620      	mov	r0, r4
 8023952:	f001 f8fd 	bl	8024b50 <_ZSt27__uninitialized_default_n_aIPhjhET_S1_T0_RSaIT1_E>
 8023956:	4602      	mov	r2, r0
	      this->_M_impl._M_finish =
 8023958:	687b      	ldr	r3, [r7, #4]
 802395a:	605a      	str	r2, [r3, #4]
	      this->_M_impl._M_start = __new_start;
	      this->_M_impl._M_finish = __new_start + __size + __n;
	      this->_M_impl._M_end_of_storage = __new_start + __len;
	    }
	}
    }
 802395c:	e075      	b.n	8023a4a <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x162>
		_M_check_len(__n, "vector::_M_default_append");
 802395e:	4a3d      	ldr	r2, [pc, #244]	; (8023a54 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x16c>)
 8023960:	6839      	ldr	r1, [r7, #0]
 8023962:	6878      	ldr	r0, [r7, #4]
 8023964:	f001 f903 	bl	8024b6e <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>
 8023968:	6178      	str	r0, [r7, #20]
	      pointer __new_start(this->_M_allocate(__len));
 802396a:	687b      	ldr	r3, [r7, #4]
 802396c:	6979      	ldr	r1, [r7, #20]
 802396e:	4618      	mov	r0, r3
 8023970:	f001 f944 	bl	8024bfc <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>
 8023974:	6138      	str	r0, [r7, #16]
	      if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8023976:	f7ff ffa0 	bl	80238ba <_ZNSt6vectorIhSaIhEE15_S_use_relocateEv>
 802397a:	4603      	mov	r3, r0
 802397c:	2b00      	cmp	r3, #0
 802397e:	d01b      	beq.n	80239b8 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0xd0>
		      std::__uninitialized_default_n_a(__new_start + __size,
 8023980:	693a      	ldr	r2, [r7, #16]
 8023982:	69fb      	ldr	r3, [r7, #28]
 8023984:	18d4      	adds	r4, r2, r3
			      __n, _M_get_Tp_allocator());
 8023986:	687b      	ldr	r3, [r7, #4]
 8023988:	4618      	mov	r0, r3
 802398a:	f7ff fe01 	bl	8023590 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 802398e:	4603      	mov	r3, r0
		      std::__uninitialized_default_n_a(__new_start + __size,
 8023990:	461a      	mov	r2, r3
 8023992:	6839      	ldr	r1, [r7, #0]
 8023994:	4620      	mov	r0, r4
 8023996:	f001 f8db 	bl	8024b50 <_ZSt27__uninitialized_default_n_aIPhjhET_S1_T0_RSaIT1_E>
		  _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
 802399a:	687b      	ldr	r3, [r7, #4]
 802399c:	681c      	ldr	r4, [r3, #0]
 802399e:	687b      	ldr	r3, [r7, #4]
 80239a0:	685d      	ldr	r5, [r3, #4]
			      __new_start, _M_get_Tp_allocator());
 80239a2:	687b      	ldr	r3, [r7, #4]
 80239a4:	4618      	mov	r0, r3
 80239a6:	f7ff fdf3 	bl	8023590 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80239aa:	4603      	mov	r3, r0
		  _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
 80239ac:	693a      	ldr	r2, [r7, #16]
 80239ae:	4629      	mov	r1, r5
 80239b0:	4620      	mov	r0, r4
 80239b2:	f001 f937 	bl	8024c24 <_ZNSt6vectorIhSaIhEE11_S_relocateEPhS2_S2_RS0_>
 80239b6:	e02e      	b.n	8023a16 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x12e>
		  pointer __destroy_from = pointer();
 80239b8:	2300      	movs	r3, #0
 80239ba:	60fb      	str	r3, [r7, #12]
		      std::__uninitialized_default_n_a(__new_start + __size,
 80239bc:	693a      	ldr	r2, [r7, #16]
 80239be:	69fb      	ldr	r3, [r7, #28]
 80239c0:	18d4      	adds	r4, r2, r3
			      __n, _M_get_Tp_allocator());
 80239c2:	687b      	ldr	r3, [r7, #4]
 80239c4:	4618      	mov	r0, r3
 80239c6:	f7ff fde3 	bl	8023590 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80239ca:	4603      	mov	r3, r0
		      std::__uninitialized_default_n_a(__new_start + __size,
 80239cc:	461a      	mov	r2, r3
 80239ce:	6839      	ldr	r1, [r7, #0]
 80239d0:	4620      	mov	r0, r4
 80239d2:	f001 f8bd 	bl	8024b50 <_ZSt27__uninitialized_default_n_aIPhjhET_S1_T0_RSaIT1_E>
		      __destroy_from = __new_start + __size;
 80239d6:	693a      	ldr	r2, [r7, #16]
 80239d8:	69fb      	ldr	r3, [r7, #28]
 80239da:	4413      	add	r3, r2
 80239dc:	60fb      	str	r3, [r7, #12]
		      std::__uninitialized_move_if_noexcept_a(
 80239de:	687b      	ldr	r3, [r7, #4]
 80239e0:	681c      	ldr	r4, [r3, #0]
 80239e2:	687b      	ldr	r3, [r7, #4]
 80239e4:	685d      	ldr	r5, [r3, #4]
			      __new_start, _M_get_Tp_allocator());
 80239e6:	687b      	ldr	r3, [r7, #4]
 80239e8:	4618      	mov	r0, r3
 80239ea:	f7ff fdd1 	bl	8023590 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80239ee:	4603      	mov	r3, r0
		      std::__uninitialized_move_if_noexcept_a(
 80239f0:	693a      	ldr	r2, [r7, #16]
 80239f2:	4629      	mov	r1, r5
 80239f4:	4620      	mov	r0, r4
 80239f6:	f001 f929 	bl	8024c4c <_ZSt34__uninitialized_move_if_noexcept_aIPhS0_SaIhEET0_T_S3_S2_RT1_>
		  std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80239fa:	687b      	ldr	r3, [r7, #4]
 80239fc:	681c      	ldr	r4, [r3, #0]
 80239fe:	687b      	ldr	r3, [r7, #4]
 8023a00:	685d      	ldr	r5, [r3, #4]
				_M_get_Tp_allocator());
 8023a02:	687b      	ldr	r3, [r7, #4]
 8023a04:	4618      	mov	r0, r3
 8023a06:	f7ff fdc3 	bl	8023590 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8023a0a:	4603      	mov	r3, r0
		  std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8023a0c:	461a      	mov	r2, r3
 8023a0e:	4629      	mov	r1, r5
 8023a10:	4620      	mov	r0, r4
 8023a12:	f7ff fdc8 	bl	80235a6 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
	      _M_deallocate(this->_M_impl._M_start,
 8023a16:	6878      	ldr	r0, [r7, #4]
 8023a18:	687b      	ldr	r3, [r7, #4]
 8023a1a:	6819      	ldr	r1, [r3, #0]
			    this->_M_impl._M_end_of_storage
 8023a1c:	687b      	ldr	r3, [r7, #4]
 8023a1e:	689a      	ldr	r2, [r3, #8]
			    - this->_M_impl._M_start);
 8023a20:	687b      	ldr	r3, [r7, #4]
 8023a22:	681b      	ldr	r3, [r3, #0]
 8023a24:	1ad3      	subs	r3, r2, r3
	      _M_deallocate(this->_M_impl._M_start,
 8023a26:	461a      	mov	r2, r3
 8023a28:	f7ff fd9f 	bl	802356a <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>
	      this->_M_impl._M_start = __new_start;
 8023a2c:	687b      	ldr	r3, [r7, #4]
 8023a2e:	693a      	ldr	r2, [r7, #16]
 8023a30:	601a      	str	r2, [r3, #0]
	      this->_M_impl._M_finish = __new_start + __size + __n;
 8023a32:	69fa      	ldr	r2, [r7, #28]
 8023a34:	683b      	ldr	r3, [r7, #0]
 8023a36:	4413      	add	r3, r2
 8023a38:	693a      	ldr	r2, [r7, #16]
 8023a3a:	441a      	add	r2, r3
 8023a3c:	687b      	ldr	r3, [r7, #4]
 8023a3e:	605a      	str	r2, [r3, #4]
	      this->_M_impl._M_end_of_storage = __new_start + __len;
 8023a40:	693a      	ldr	r2, [r7, #16]
 8023a42:	697b      	ldr	r3, [r7, #20]
 8023a44:	441a      	add	r2, r3
 8023a46:	687b      	ldr	r3, [r7, #4]
 8023a48:	609a      	str	r2, [r3, #8]
    }
 8023a4a:	bf00      	nop
 8023a4c:	3720      	adds	r7, #32
 8023a4e:	46bd      	mov	sp, r7
 8023a50:	bdb0      	pop	{r4, r5, r7, pc}
 8023a52:	bf00      	nop
 8023a54:	0803e6dc 	.word	0x0803e6dc

08023a58 <_ZNSt6vectorIhSaIhEE15_M_erase_at_endEPh>:
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 8023a58:	b590      	push	{r4, r7, lr}
 8023a5a:	b085      	sub	sp, #20
 8023a5c:	af00      	add	r7, sp, #0
 8023a5e:	6078      	str	r0, [r7, #4]
 8023a60:	6039      	str	r1, [r7, #0]
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8023a62:	687b      	ldr	r3, [r7, #4]
 8023a64:	685a      	ldr	r2, [r3, #4]
 8023a66:	683b      	ldr	r3, [r7, #0]
 8023a68:	1ad3      	subs	r3, r2, r3
 8023a6a:	60fb      	str	r3, [r7, #12]
 8023a6c:	68fb      	ldr	r3, [r7, #12]
 8023a6e:	2b00      	cmp	r3, #0
 8023a70:	d00e      	beq.n	8023a90 <_ZNSt6vectorIhSaIhEE15_M_erase_at_endEPh+0x38>
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8023a72:	687b      	ldr	r3, [r7, #4]
 8023a74:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 8023a76:	687b      	ldr	r3, [r7, #4]
 8023a78:	4618      	mov	r0, r3
 8023a7a:	f7ff fd89 	bl	8023590 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8023a7e:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8023a80:	461a      	mov	r2, r3
 8023a82:	4621      	mov	r1, r4
 8023a84:	6838      	ldr	r0, [r7, #0]
 8023a86:	f7ff fd8e 	bl	80235a6 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 8023a8a:	687b      	ldr	r3, [r7, #4]
 8023a8c:	683a      	ldr	r2, [r7, #0]
 8023a8e:	605a      	str	r2, [r3, #4]
      }
 8023a90:	bf00      	nop
 8023a92:	3714      	adds	r7, #20
 8023a94:	46bd      	mov	sp, r7
 8023a96:	bd90      	pop	{r4, r7, pc}

08023a98 <_ZNKSt6vectorIhSaIhEE11_M_data_ptrIhEEPT_S4_>:
      }
#endif

      template<typename _Up>
	_Up*
	_M_data_ptr(_Up* __ptr) const _GLIBCXX_NOEXCEPT
 8023a98:	b480      	push	{r7}
 8023a9a:	b083      	sub	sp, #12
 8023a9c:	af00      	add	r7, sp, #0
 8023a9e:	6078      	str	r0, [r7, #4]
 8023aa0:	6039      	str	r1, [r7, #0]
	{ return __ptr; }
 8023aa2:	683b      	ldr	r3, [r7, #0]
 8023aa4:	4618      	mov	r0, r3
 8023aa6:	370c      	adds	r7, #12
 8023aa8:	46bd      	mov	sp, r7
 8023aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023aae:	4770      	bx	lr

08023ab0 <_ZNKSt15_Deque_iteratorI7RequestRS0_PS0_EdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8023ab0:	b480      	push	{r7}
 8023ab2:	b083      	sub	sp, #12
 8023ab4:	af00      	add	r7, sp, #0
 8023ab6:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 8023ab8:	687b      	ldr	r3, [r7, #4]
 8023aba:	681b      	ldr	r3, [r3, #0]
 8023abc:	4618      	mov	r0, r3
 8023abe:	370c      	adds	r7, #12
 8023ac0:	46bd      	mov	sp, r7
 8023ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023ac6:	4770      	bx	lr

08023ac8 <_ZNSt16allocator_traitsISaI7RequestEE7destroyIS0_EEvRS1_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8023ac8:	b580      	push	{r7, lr}
 8023aca:	b082      	sub	sp, #8
 8023acc:	af00      	add	r7, sp, #0
 8023ace:	6078      	str	r0, [r7, #4]
 8023ad0:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 8023ad2:	6839      	ldr	r1, [r7, #0]
 8023ad4:	6878      	ldr	r0, [r7, #4]
 8023ad6:	f001 f8d2 	bl	8024c7e <_ZN9__gnu_cxx13new_allocatorI7RequestE7destroyIS1_EEvPT_>
	}
 8023ada:	bf00      	nop
 8023adc:	3708      	adds	r7, #8
 8023ade:	46bd      	mov	sp, r7
 8023ae0:	bd80      	pop	{r7, pc}

08023ae2 <_ZNSt5dequeI7RequestSaIS0_EE16_M_pop_front_auxEv>:
  // Note that if the deque has at least one element (a precondition for this
  // member function), and if
  //   _M_impl._M_start._M_cur == _M_impl._M_start._M_last,
  // then the deque must have at least two nodes.
  template <typename _Tp, typename _Alloc>
    void deque<_Tp, _Alloc>::
 8023ae2:	b580      	push	{r7, lr}
 8023ae4:	b082      	sub	sp, #8
 8023ae6:	af00      	add	r7, sp, #0
 8023ae8:	6078      	str	r0, [r7, #4]
    _M_pop_front_aux()
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8023aea:	687b      	ldr	r3, [r7, #4]
 8023aec:	4618      	mov	r0, r3
 8023aee:	f7ff fc28 	bl	8023342 <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 8023af2:	4602      	mov	r2, r0
 8023af4:	687b      	ldr	r3, [r7, #4]
 8023af6:	689b      	ldr	r3, [r3, #8]
 8023af8:	4619      	mov	r1, r3
 8023afa:	4610      	mov	r0, r2
 8023afc:	f7ff ffe4 	bl	8023ac8 <_ZNSt16allocator_traitsISaI7RequestEE7destroyIS0_EEvRS1_PT_>
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
 8023b00:	687a      	ldr	r2, [r7, #4]
 8023b02:	687b      	ldr	r3, [r7, #4]
 8023b04:	68db      	ldr	r3, [r3, #12]
 8023b06:	4619      	mov	r1, r3
 8023b08:	4610      	mov	r0, r2
 8023b0a:	f000 fce1 	bl	80244d0 <_ZNSt11_Deque_baseI7RequestSaIS0_EE18_M_deallocate_nodeEPS0_>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 8023b0e:	687b      	ldr	r3, [r7, #4]
 8023b10:	f103 0208 	add.w	r2, r3, #8
 8023b14:	687b      	ldr	r3, [r7, #4]
 8023b16:	695b      	ldr	r3, [r3, #20]
 8023b18:	3304      	adds	r3, #4
 8023b1a:	4619      	mov	r1, r3
 8023b1c:	4610      	mov	r0, r2
 8023b1e:	f000 fcbb 	bl	8024498 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 8023b22:	687b      	ldr	r3, [r7, #4]
 8023b24:	68da      	ldr	r2, [r3, #12]
 8023b26:	687b      	ldr	r3, [r7, #4]
 8023b28:	609a      	str	r2, [r3, #8]
    }
 8023b2a:	bf00      	nop
 8023b2c:	3708      	adds	r7, #8
 8023b2e:	46bd      	mov	sp, r7
 8023b30:	bd80      	pop	{r7, pc}

08023b32 <_ZNKSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8023b32:	b480      	push	{r7}
 8023b34:	b083      	sub	sp, #12
 8023b36:	af00      	add	r7, sp, #0
 8023b38:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8023b3a:	687b      	ldr	r3, [r7, #4]
 8023b3c:	4618      	mov	r0, r3
 8023b3e:	370c      	adds	r7, #12
 8023b40:	46bd      	mov	sp, r7
 8023b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023b46:	4770      	bx	lr

08023b48 <_ZStneRKSaIhES1_>:
      operator==(const allocator&, const allocator&) _GLIBCXX_NOTHROW
      { return true; }

#if __cpp_impl_three_way_comparison < 201907L
      friend _GLIBCXX20_CONSTEXPR bool
      operator!=(const allocator&, const allocator&) _GLIBCXX_NOTHROW
 8023b48:	b480      	push	{r7}
 8023b4a:	b083      	sub	sp, #12
 8023b4c:	af00      	add	r7, sp, #0
 8023b4e:	6078      	str	r0, [r7, #4]
 8023b50:	6039      	str	r1, [r7, #0]
      { return false; }
 8023b52:	2300      	movs	r3, #0
 8023b54:	4618      	mov	r0, r3
 8023b56:	370c      	adds	r7, #12
 8023b58:	46bd      	mov	sp, r7
 8023b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023b5e:	4770      	bx	lr

08023b60 <_ZNSt6vectorIhSaIhEE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 8023b60:	b580      	push	{r7, lr}
 8023b62:	b082      	sub	sp, #8
 8023b64:	af00      	add	r7, sp, #0
 8023b66:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 8023b68:	687b      	ldr	r3, [r7, #4]
 8023b6a:	681b      	ldr	r3, [r3, #0]
 8023b6c:	4619      	mov	r1, r3
 8023b6e:	6878      	ldr	r0, [r7, #4]
 8023b70:	f7ff ff72 	bl	8023a58 <_ZNSt6vectorIhSaIhEE15_M_erase_at_endEPh>
 8023b74:	bf00      	nop
 8023b76:	3708      	adds	r7, #8
 8023b78:	46bd      	mov	sp, r7
 8023b7a:	bd80      	pop	{r7, pc}

08023b7c <_ZSt15__alloc_on_copyISaIhEEvRT_RKS1_>:
    __alloc_on_copy(_Alloc& __one, const _Alloc& __two)
 8023b7c:	b580      	push	{r7, lr}
 8023b7e:	b082      	sub	sp, #8
 8023b80:	af00      	add	r7, sp, #0
 8023b82:	6078      	str	r0, [r7, #4]
 8023b84:	6039      	str	r1, [r7, #0]
      __do_alloc_on_copy(__one, __two, __pocca());
 8023b86:	461a      	mov	r2, r3
 8023b88:	6839      	ldr	r1, [r7, #0]
 8023b8a:	6878      	ldr	r0, [r7, #4]
 8023b8c:	f001 f883 	bl	8024c96 <_ZSt18__do_alloc_on_copyISaIhEEvRT_RKS1_St17integral_constantIbLb0EE>
    }
 8023b90:	bf00      	nop
 8023b92:	3708      	adds	r7, #8
 8023b94:	46bd      	mov	sp, r7
 8023b96:	bd80      	pop	{r7, pc}

08023b98 <_ZNKSt6vectorIhSaIhEE8capacityEv>:
      capacity() const _GLIBCXX_NOEXCEPT
 8023b98:	b480      	push	{r7}
 8023b9a:	b083      	sub	sp, #12
 8023b9c:	af00      	add	r7, sp, #0
 8023b9e:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_end_of_storage
 8023ba0:	687b      	ldr	r3, [r7, #4]
 8023ba2:	689a      	ldr	r2, [r3, #8]
			 - this->_M_impl._M_start); }
 8023ba4:	687b      	ldr	r3, [r7, #4]
 8023ba6:	681b      	ldr	r3, [r3, #0]
 8023ba8:	1ad3      	subs	r3, r2, r3
 8023baa:	4618      	mov	r0, r3
 8023bac:	370c      	adds	r7, #12
 8023bae:	46bd      	mov	sp, r7
 8023bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023bb4:	4770      	bx	lr

08023bb6 <_ZNKSt6vectorIhSaIhEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8023bb6:	b580      	push	{r7, lr}
 8023bb8:	b084      	sub	sp, #16
 8023bba:	af00      	add	r7, sp, #0
 8023bbc:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8023bbe:	687a      	ldr	r2, [r7, #4]
 8023bc0:	f107 030c 	add.w	r3, r7, #12
 8023bc4:	4611      	mov	r1, r2
 8023bc6:	4618      	mov	r0, r3
 8023bc8:	f001 f871 	bl	8024cae <_ZN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEC1ERKS2_>
 8023bcc:	68fb      	ldr	r3, [r7, #12]
 8023bce:	4618      	mov	r0, r3
 8023bd0:	3710      	adds	r7, #16
 8023bd2:	46bd      	mov	sp, r7
 8023bd4:	bd80      	pop	{r7, pc}

08023bd6 <_ZNKSt6vectorIhSaIhEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8023bd6:	b580      	push	{r7, lr}
 8023bd8:	b084      	sub	sp, #16
 8023bda:	af00      	add	r7, sp, #0
 8023bdc:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 8023bde:	687b      	ldr	r3, [r7, #4]
 8023be0:	1d1a      	adds	r2, r3, #4
 8023be2:	f107 030c 	add.w	r3, r7, #12
 8023be6:	4611      	mov	r1, r2
 8023be8:	4618      	mov	r0, r3
 8023bea:	f001 f860 	bl	8024cae <_ZN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEC1ERKS2_>
 8023bee:	68fb      	ldr	r3, [r7, #12]
 8023bf0:	4618      	mov	r0, r3
 8023bf2:	3710      	adds	r7, #16
 8023bf4:	46bd      	mov	sp, r7
 8023bf6:	bd80      	pop	{r7, pc}

08023bf8 <_ZNSt6vectorIhSaIhEE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKhS1_EEEEPhjT_S9_>:
	_M_allocate_and_copy(size_type __n,
 8023bf8:	b580      	push	{r7, lr}
 8023bfa:	b086      	sub	sp, #24
 8023bfc:	af00      	add	r7, sp, #0
 8023bfe:	60f8      	str	r0, [r7, #12]
 8023c00:	60b9      	str	r1, [r7, #8]
 8023c02:	607a      	str	r2, [r7, #4]
 8023c04:	603b      	str	r3, [r7, #0]
	  pointer __result = this->_M_allocate(__n);
 8023c06:	68fb      	ldr	r3, [r7, #12]
 8023c08:	68b9      	ldr	r1, [r7, #8]
 8023c0a:	4618      	mov	r0, r3
 8023c0c:	f000 fff6 	bl	8024bfc <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>
 8023c10:	6178      	str	r0, [r7, #20]
					  _M_get_Tp_allocator());
 8023c12:	68fb      	ldr	r3, [r7, #12]
 8023c14:	4618      	mov	r0, r3
 8023c16:	f7ff fcbb 	bl	8023590 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8023c1a:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__first, __last, __result,
 8023c1c:	697a      	ldr	r2, [r7, #20]
 8023c1e:	6839      	ldr	r1, [r7, #0]
 8023c20:	6878      	ldr	r0, [r7, #4]
 8023c22:	f001 f854 	bl	8024cce <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhhET0_T_SA_S9_RSaIT1_E>
	      return __result;
 8023c26:	697b      	ldr	r3, [r7, #20]
	}
 8023c28:	4618      	mov	r0, r3
 8023c2a:	3718      	adds	r7, #24
 8023c2c:	46bd      	mov	sp, r7
 8023c2e:	bd80      	pop	{r7, pc}

08023c30 <_ZNSt6vectorIhSaIhEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8023c30:	b580      	push	{r7, lr}
 8023c32:	b084      	sub	sp, #16
 8023c34:	af00      	add	r7, sp, #0
 8023c36:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8023c38:	687a      	ldr	r2, [r7, #4]
 8023c3a:	f107 030c 	add.w	r3, r7, #12
 8023c3e:	4611      	mov	r1, r2
 8023c40:	4618      	mov	r0, r3
 8023c42:	f001 f855 	bl	8024cf0 <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>
 8023c46:	68fb      	ldr	r3, [r7, #12]
 8023c48:	4618      	mov	r0, r3
 8023c4a:	3710      	adds	r7, #16
 8023c4c:	46bd      	mov	sp, r7
 8023c4e:	bd80      	pop	{r7, pc}

08023c50 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEENS1_IPhS6_EEET0_T_SB_SA_>:
    copy(_II __first, _II __last, _OI __result)
 8023c50:	b590      	push	{r4, r7, lr}
 8023c52:	b085      	sub	sp, #20
 8023c54:	af00      	add	r7, sp, #0
 8023c56:	60f8      	str	r0, [r7, #12]
 8023c58:	60b9      	str	r1, [r7, #8]
 8023c5a:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8023c5c:	68f8      	ldr	r0, [r7, #12]
 8023c5e:	f001 f857 	bl	8024d10 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEET_S8_>
 8023c62:	4604      	mov	r4, r0
 8023c64:	68b8      	ldr	r0, [r7, #8]
 8023c66:	f001 f853 	bl	8024d10 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEET_S8_>
 8023c6a:	4603      	mov	r3, r0
 8023c6c:	687a      	ldr	r2, [r7, #4]
 8023c6e:	4619      	mov	r1, r3
 8023c70:	4620      	mov	r0, r4
 8023c72:	f001 f858 	bl	8024d26 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEENS1_IPhS6_EEET1_T0_SB_SA_>
 8023c76:	4603      	mov	r3, r0
    }
 8023c78:	4618      	mov	r0, r3
 8023c7a:	3714      	adds	r7, #20
 8023c7c:	46bd      	mov	sp, r7
 8023c7e:	bd90      	pop	{r4, r7, pc}

08023c80 <_ZNSt6vectorIhSaIhEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8023c80:	b580      	push	{r7, lr}
 8023c82:	b084      	sub	sp, #16
 8023c84:	af00      	add	r7, sp, #0
 8023c86:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8023c88:	687b      	ldr	r3, [r7, #4]
 8023c8a:	1d1a      	adds	r2, r3, #4
 8023c8c:	f107 030c 	add.w	r3, r7, #12
 8023c90:	4611      	mov	r1, r2
 8023c92:	4618      	mov	r0, r3
 8023c94:	f001 f82c 	bl	8024cf0 <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>
 8023c98:	68fb      	ldr	r3, [r7, #12]
 8023c9a:	4618      	mov	r0, r3
 8023c9c:	3710      	adds	r7, #16
 8023c9e:	46bd      	mov	sp, r7
 8023ca0:	bd80      	pop	{r7, pc}

08023ca2 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEhEvT_S7_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8023ca2:	b580      	push	{r7, lr}
 8023ca4:	b084      	sub	sp, #16
 8023ca6:	af00      	add	r7, sp, #0
 8023ca8:	60f8      	str	r0, [r7, #12]
 8023caa:	60b9      	str	r1, [r7, #8]
 8023cac:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8023cae:	68b9      	ldr	r1, [r7, #8]
 8023cb0:	68f8      	ldr	r0, [r7, #12]
 8023cb2:	f001 f859 	bl	8024d68 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEvT_S7_>
    }
 8023cb6:	bf00      	nop
 8023cb8:	3710      	adds	r7, #16
 8023cba:	46bd      	mov	sp, r7
 8023cbc:	bd80      	pop	{r7, pc}

08023cbe <_ZSt4copyIPhS0_ET0_T_S2_S1_>:
    copy(_II __first, _II __last, _OI __result)
 8023cbe:	b590      	push	{r4, r7, lr}
 8023cc0:	b085      	sub	sp, #20
 8023cc2:	af00      	add	r7, sp, #0
 8023cc4:	60f8      	str	r0, [r7, #12]
 8023cc6:	60b9      	str	r1, [r7, #8]
 8023cc8:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8023cca:	68f8      	ldr	r0, [r7, #12]
 8023ccc:	f001 f859 	bl	8024d82 <_ZSt12__miter_baseIPhET_S1_>
 8023cd0:	4604      	mov	r4, r0
 8023cd2:	68b8      	ldr	r0, [r7, #8]
 8023cd4:	f001 f855 	bl	8024d82 <_ZSt12__miter_baseIPhET_S1_>
 8023cd8:	4603      	mov	r3, r0
 8023cda:	687a      	ldr	r2, [r7, #4]
 8023cdc:	4619      	mov	r1, r3
 8023cde:	4620      	mov	r0, r4
 8023ce0:	f001 f85a 	bl	8024d98 <_ZSt13__copy_move_aILb0EPhS0_ET1_T0_S2_S1_>
 8023ce4:	4603      	mov	r3, r0
    }
 8023ce6:	4618      	mov	r0, r3
 8023ce8:	3714      	adds	r7, #20
 8023cea:	46bd      	mov	sp, r7
 8023cec:	bd90      	pop	{r4, r7, pc}

08023cee <_ZSt22__uninitialized_copy_aIPhS0_hET0_T_S2_S1_RSaIT1_E>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8023cee:	b580      	push	{r7, lr}
 8023cf0:	b084      	sub	sp, #16
 8023cf2:	af00      	add	r7, sp, #0
 8023cf4:	60f8      	str	r0, [r7, #12]
 8023cf6:	60b9      	str	r1, [r7, #8]
 8023cf8:	607a      	str	r2, [r7, #4]
 8023cfa:	603b      	str	r3, [r7, #0]
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
 8023cfc:	687a      	ldr	r2, [r7, #4]
 8023cfe:	68b9      	ldr	r1, [r7, #8]
 8023d00:	68f8      	ldr	r0, [r7, #12]
 8023d02:	f001 f86c 	bl	8024dde <_ZSt18uninitialized_copyIPhS0_ET0_T_S2_S1_>
 8023d06:	4603      	mov	r3, r0
 8023d08:	4618      	mov	r0, r3
 8023d0a:	3710      	adds	r7, #16
 8023d0c:	46bd      	mov	sp, r7
 8023d0e:	bd80      	pop	{r7, pc}

08023d10 <_ZStmiRKSt15_Deque_iteratorI7RequestRS0_PS0_ES5_>:
      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8023d10:	b580      	push	{r7, lr}
 8023d12:	b082      	sub	sp, #8
 8023d14:	af00      	add	r7, sp, #0
 8023d16:	6078      	str	r0, [r7, #4]
 8023d18:	6039      	str	r1, [r7, #0]
	return difference_type(_S_buffer_size())
 8023d1a:	f001 f872 	bl	8024e02 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E14_S_buffer_sizeEv>
 8023d1e:	4603      	mov	r3, r0
 8023d20:	4619      	mov	r1, r3
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 8023d22:	687b      	ldr	r3, [r7, #4]
 8023d24:	68da      	ldr	r2, [r3, #12]
 8023d26:	683b      	ldr	r3, [r7, #0]
 8023d28:	68db      	ldr	r3, [r3, #12]
 8023d2a:	1ad3      	subs	r3, r2, r3
 8023d2c:	109b      	asrs	r3, r3, #2
 8023d2e:	3b01      	subs	r3, #1
 8023d30:	fb01 f303 	mul.w	r3, r1, r3
 8023d34:	687a      	ldr	r2, [r7, #4]
 8023d36:	6811      	ldr	r1, [r2, #0]
 8023d38:	687a      	ldr	r2, [r7, #4]
 8023d3a:	6852      	ldr	r2, [r2, #4]
 8023d3c:	1a8a      	subs	r2, r1, r2
 8023d3e:	1092      	asrs	r2, r2, #2
 8023d40:	4908      	ldr	r1, [pc, #32]	; (8023d64 <_ZStmiRKSt15_Deque_iteratorI7RequestRS0_PS0_ES5_+0x54>)
 8023d42:	fb01 f202 	mul.w	r2, r1, r2
 8023d46:	4413      	add	r3, r2
	  + (__y._M_last - __y._M_cur);
 8023d48:	683a      	ldr	r2, [r7, #0]
 8023d4a:	6891      	ldr	r1, [r2, #8]
 8023d4c:	683a      	ldr	r2, [r7, #0]
 8023d4e:	6812      	ldr	r2, [r2, #0]
 8023d50:	1a8a      	subs	r2, r1, r2
 8023d52:	1092      	asrs	r2, r2, #2
 8023d54:	4903      	ldr	r1, [pc, #12]	; (8023d64 <_ZStmiRKSt15_Deque_iteratorI7RequestRS0_PS0_ES5_+0x54>)
 8023d56:	fb01 f202 	mul.w	r2, r1, r2
 8023d5a:	4413      	add	r3, r2
      }
 8023d5c:	4618      	mov	r0, r3
 8023d5e:	3708      	adds	r7, #8
 8023d60:	46bd      	mov	sp, r7
 8023d62:	bd80      	pop	{r7, pc}
 8023d64:	cccccccd 	.word	0xcccccccd

08023d68 <_ZNKSt5dequeI8ResponceSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8023d68:	b580      	push	{r7, lr}
 8023d6a:	b082      	sub	sp, #8
 8023d6c:	af00      	add	r7, sp, #0
 8023d6e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 8023d70:	687b      	ldr	r3, [r7, #4]
 8023d72:	f103 0218 	add.w	r2, r3, #24
 8023d76:	687b      	ldr	r3, [r7, #4]
 8023d78:	3308      	adds	r3, #8
 8023d7a:	4619      	mov	r1, r3
 8023d7c:	4610      	mov	r0, r2
 8023d7e:	f001 f848 	bl	8024e12 <_ZStmiRKSt15_Deque_iteratorI8ResponceRS0_PS0_ES5_>
 8023d82:	4603      	mov	r3, r0
 8023d84:	4618      	mov	r0, r3
 8023d86:	3708      	adds	r7, #8
 8023d88:	46bd      	mov	sp, r7
 8023d8a:	bd80      	pop	{r7, pc}

08023d8c <_ZNSt5dequeI7RequestSaIS0_EE9push_backEOS0_>:
      push_back(value_type&& __x)
 8023d8c:	b580      	push	{r7, lr}
 8023d8e:	b082      	sub	sp, #8
 8023d90:	af00      	add	r7, sp, #0
 8023d92:	6078      	str	r0, [r7, #4]
 8023d94:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 8023d96:	6838      	ldr	r0, [r7, #0]
 8023d98:	f7fe fe15 	bl	80229c6 <_ZSt4moveIR7RequestEONSt16remove_referenceIT_E4typeEOS3_>
 8023d9c:	4603      	mov	r3, r0
 8023d9e:	4619      	mov	r1, r3
 8023da0:	6878      	ldr	r0, [r7, #4]
 8023da2:	f7fe fe1b 	bl	80229dc <_ZNSt5dequeI7RequestSaIS0_EE12emplace_backIJS0_EEEvDpOT_>
 8023da6:	bf00      	nop
 8023da8:	3708      	adds	r7, #8
 8023daa:	46bd      	mov	sp, r7
 8023dac:	bd80      	pop	{r7, pc}

08023dae <_ZNKSt16initializer_listIN10BHYWrapper8BHYFrameEE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 8023dae:	b480      	push	{r7}
 8023db0:	b083      	sub	sp, #12
 8023db2:	af00      	add	r7, sp, #0
 8023db4:	6078      	str	r0, [r7, #4]
 8023db6:	687b      	ldr	r3, [r7, #4]
 8023db8:	681b      	ldr	r3, [r3, #0]
 8023dba:	4618      	mov	r0, r3
 8023dbc:	370c      	adds	r7, #12
 8023dbe:	46bd      	mov	sp, r7
 8023dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023dc4:	4770      	bx	lr

08023dc6 <_ZNKSt16initializer_listIN10BHYWrapper8BHYFrameEE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 8023dc6:	b590      	push	{r4, r7, lr}
 8023dc8:	b083      	sub	sp, #12
 8023dca:	af00      	add	r7, sp, #0
 8023dcc:	6078      	str	r0, [r7, #4]
 8023dce:	6878      	ldr	r0, [r7, #4]
 8023dd0:	f7ff ffed 	bl	8023dae <_ZNKSt16initializer_listIN10BHYWrapper8BHYFrameEE5beginEv>
 8023dd4:	4604      	mov	r4, r0
 8023dd6:	6878      	ldr	r0, [r7, #4]
 8023dd8:	f001 f83f 	bl	8024e5a <_ZNKSt16initializer_listIN10BHYWrapper8BHYFrameEE4sizeEv>
 8023ddc:	4602      	mov	r2, r0
 8023dde:	4613      	mov	r3, r2
 8023de0:	009b      	lsls	r3, r3, #2
 8023de2:	4413      	add	r3, r2
 8023de4:	009b      	lsls	r3, r3, #2
 8023de6:	4423      	add	r3, r4
 8023de8:	4618      	mov	r0, r3
 8023dea:	370c      	adds	r7, #12
 8023dec:	46bd      	mov	sp, r7
 8023dee:	bd90      	pop	{r4, r7, pc}

08023df0 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_assign_auxIPKS1_EEvT_S7_St20forward_iterator_tag>:
	_M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
 8023df0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023df2:	b09f      	sub	sp, #124	; 0x7c
 8023df4:	af02      	add	r7, sp, #8
 8023df6:	60f8      	str	r0, [r7, #12]
 8023df8:	60b9      	str	r1, [r7, #8]
 8023dfa:	607a      	str	r2, [r7, #4]
 8023dfc:	703b      	strb	r3, [r7, #0]
	  const size_type __len = std::distance(__first, __last);
 8023dfe:	68bb      	ldr	r3, [r7, #8]
 8023e00:	6879      	ldr	r1, [r7, #4]
 8023e02:	4618      	mov	r0, r3
 8023e04:	f001 f835 	bl	8024e72 <_ZSt8distanceIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E15difference_typeES5_S5_>
 8023e08:	4603      	mov	r3, r0
 8023e0a:	66fb      	str	r3, [r7, #108]	; 0x6c
	  if (__len > size())
 8023e0c:	68f8      	ldr	r0, [r7, #12]
 8023e0e:	f7ff f8cd 	bl	8022fac <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8023e12:	4602      	mov	r2, r0
 8023e14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8023e16:	4293      	cmp	r3, r2
 8023e18:	bf8c      	ite	hi
 8023e1a:	2301      	movhi	r3, #1
 8023e1c:	2300      	movls	r3, #0
 8023e1e:	b2db      	uxtb	r3, r3
 8023e20:	2b00      	cmp	r3, #0
 8023e22:	d031      	beq.n	8023e88 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_assign_auxIPKS1_EEvT_S7_St20forward_iterator_tag+0x98>
	      _ForwardIterator __mid = __first;
 8023e24:	68bb      	ldr	r3, [r7, #8]
 8023e26:	617b      	str	r3, [r7, #20]
	      std::advance(__mid, size());
 8023e28:	68f8      	ldr	r0, [r7, #12]
 8023e2a:	f7ff f8bf 	bl	8022fac <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8023e2e:	4602      	mov	r2, r0
 8023e30:	f107 0314 	add.w	r3, r7, #20
 8023e34:	4611      	mov	r1, r2
 8023e36:	4618      	mov	r0, r3
 8023e38:	f001 f82f 	bl	8024e9a <_ZSt7advanceIPKN10BHYWrapper8BHYFrameEjEvRT_T0_>
	      std::copy(__first, __mid, begin());
 8023e3c:	68bc      	ldr	r4, [r7, #8]
 8023e3e:	697d      	ldr	r5, [r7, #20]
 8023e40:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8023e44:	68f9      	ldr	r1, [r7, #12]
 8023e46:	4618      	mov	r0, r3
 8023e48:	f000 f9e0 	bl	802420c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5beginEv>
 8023e4c:	f107 0018 	add.w	r0, r7, #24
 8023e50:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8023e54:	462a      	mov	r2, r5
 8023e56:	4621      	mov	r1, r4
 8023e58:	f001 f832 	bl	8024ec0 <_ZSt4copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>
	      _M_range_insert_aux(end(), __mid, __last,
 8023e5c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8023e60:	68f9      	ldr	r1, [r7, #12]
 8023e62:	4618      	mov	r0, r3
 8023e64:	f000 f9e1 	bl	802422a <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE3endEv>
 8023e68:	697c      	ldr	r4, [r7, #20]
				  std::__iterator_category(__first));
 8023e6a:	f107 0308 	add.w	r3, r7, #8
 8023e6e:	4618      	mov	r0, r3
 8023e70:	f001 f846 	bl	8024f00 <_ZSt19__iterator_categoryIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E17iterator_categoryERKS5_>
	      _M_range_insert_aux(end(), __mid, __last,
 8023e74:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8023e78:	f88d 6000 	strb.w	r6, [sp]
 8023e7c:	687b      	ldr	r3, [r7, #4]
 8023e7e:	4622      	mov	r2, r4
 8023e80:	68f8      	ldr	r0, [r7, #12]
 8023e82:	f001 f848 	bl	8024f16 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE19_M_range_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_St20forward_iterator_tag>
	}
 8023e86:	e014      	b.n	8023eb2 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_assign_auxIPKS1_EEvT_S7_St20forward_iterator_tag+0xc2>
	    _M_erase_at_end(std::copy(__first, __last, begin()));
 8023e88:	68bc      	ldr	r4, [r7, #8]
 8023e8a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8023e8e:	68f9      	ldr	r1, [r7, #12]
 8023e90:	4618      	mov	r0, r3
 8023e92:	f000 f9bb 	bl	802420c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5beginEv>
 8023e96:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8023e9a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8023e9e:	687a      	ldr	r2, [r7, #4]
 8023ea0:	4621      	mov	r1, r4
 8023ea2:	f001 f80d 	bl	8024ec0 <_ZSt4copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>
 8023ea6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8023eaa:	4619      	mov	r1, r3
 8023eac:	68f8      	ldr	r0, [r7, #12]
 8023eae:	f001 f8af 	bl	8025010 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_erase_at_endESt15_Deque_iteratorIS1_RS1_PS1_E>
	}
 8023eb2:	bf00      	nop
 8023eb4:	3774      	adds	r7, #116	; 0x74
 8023eb6:	46bd      	mov	sp, r7
 8023eb8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08023eba <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8023eba:	b580      	push	{r7, lr}
 8023ebc:	b084      	sub	sp, #16
 8023ebe:	af00      	add	r7, sp, #0
 8023ec0:	60f8      	str	r0, [r7, #12]
 8023ec2:	60b9      	str	r1, [r7, #8]
 8023ec4:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8023ec6:	6878      	ldr	r0, [r7, #4]
 8023ec8:	f001 f8d5 	bl	8025076 <_ZSt7forwardIRKN10BHYWrapper8BHYFrameEEOT_RNSt16remove_referenceIS4_E4typeE>
 8023ecc:	4603      	mov	r3, r0
 8023ece:	461a      	mov	r2, r3
 8023ed0:	68b9      	ldr	r1, [r7, #8]
 8023ed2:	68f8      	ldr	r0, [r7, #12]
 8023ed4:	f001 f8da 	bl	802508c <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE9constructIS2_JRKS2_EEEvPT_DpOT0_>
	}
 8023ed8:	bf00      	nop
 8023eda:	3710      	adds	r7, #16
 8023edc:	46bd      	mov	sp, r7
 8023ede:	bd80      	pop	{r7, pc}

08023ee0 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_push_front_auxIJRKS1_EEEvDpOT_>:
      deque<_Tp, _Alloc>::
 8023ee0:	b5b0      	push	{r4, r5, r7, lr}
 8023ee2:	b082      	sub	sp, #8
 8023ee4:	af00      	add	r7, sp, #0
 8023ee6:	6078      	str	r0, [r7, #4]
 8023ee8:	6039      	str	r1, [r7, #0]
	if (size() == max_size())
 8023eea:	6878      	ldr	r0, [r7, #4]
 8023eec:	f7ff f85e 	bl	8022fac <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8023ef0:	4604      	mov	r4, r0
 8023ef2:	6878      	ldr	r0, [r7, #4]
 8023ef4:	f001 f8e3 	bl	80250be <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE8max_sizeEv>
 8023ef8:	4603      	mov	r3, r0
 8023efa:	429c      	cmp	r4, r3
 8023efc:	bf0c      	ite	eq
 8023efe:	2301      	moveq	r3, #1
 8023f00:	2300      	movne	r3, #0
 8023f02:	b2db      	uxtb	r3, r3
 8023f04:	2b00      	cmp	r3, #0
 8023f06:	d002      	beq.n	8023f0e <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_push_front_auxIJRKS1_EEEvDpOT_+0x2e>
	  __throw_length_error(
 8023f08:	4817      	ldr	r0, [pc, #92]	; (8023f68 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_push_front_auxIJRKS1_EEEvDpOT_+0x88>)
 8023f0a:	f018 ffc1 	bl	803ce90 <_ZSt20__throw_length_errorPKc>
	_M_reserve_map_at_front();
 8023f0e:	2101      	movs	r1, #1
 8023f10:	6878      	ldr	r0, [r7, #4]
 8023f12:	f001 f8e5 	bl	80250e0 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_reserve_map_at_frontEj>
	*(this->_M_impl._M_start._M_node - 1) = this->_M_allocate_node();
 8023f16:	687a      	ldr	r2, [r7, #4]
 8023f18:	687b      	ldr	r3, [r7, #4]
 8023f1a:	695b      	ldr	r3, [r3, #20]
 8023f1c:	1f1c      	subs	r4, r3, #4
 8023f1e:	4610      	mov	r0, r2
 8023f20:	f001 f8f6 	bl	8025110 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_allocate_nodeEv>
 8023f24:	4603      	mov	r3, r0
 8023f26:	6023      	str	r3, [r4, #0]
	    this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node
 8023f28:	687b      	ldr	r3, [r7, #4]
 8023f2a:	f103 0208 	add.w	r2, r3, #8
 8023f2e:	687b      	ldr	r3, [r7, #4]
 8023f30:	695b      	ldr	r3, [r3, #20]
 8023f32:	3b04      	subs	r3, #4
 8023f34:	4619      	mov	r1, r3
 8023f36:	4610      	mov	r0, r2
 8023f38:	f001 f8fc 	bl	8025134 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E11_M_set_nodeEPS3_>
	    this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_last - 1;
 8023f3c:	687b      	ldr	r3, [r7, #4]
 8023f3e:	691b      	ldr	r3, [r3, #16]
 8023f40:	f1a3 0214 	sub.w	r2, r3, #20
 8023f44:	687b      	ldr	r3, [r7, #4]
 8023f46:	609a      	str	r2, [r3, #8]
	    _Alloc_traits::construct(this->_M_impl,
 8023f48:	687c      	ldr	r4, [r7, #4]
 8023f4a:	687b      	ldr	r3, [r7, #4]
 8023f4c:	689d      	ldr	r5, [r3, #8]
 8023f4e:	6838      	ldr	r0, [r7, #0]
 8023f50:	f001 f891 	bl	8025076 <_ZSt7forwardIRKN10BHYWrapper8BHYFrameEEOT_RNSt16remove_referenceIS4_E4typeE>
 8023f54:	4603      	mov	r3, r0
 8023f56:	461a      	mov	r2, r3
 8023f58:	4629      	mov	r1, r5
 8023f5a:	4620      	mov	r0, r4
 8023f5c:	f7ff ffad 	bl	8023eba <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
      }
 8023f60:	bf00      	nop
 8023f62:	3708      	adds	r7, #8
 8023f64:	46bd      	mov	sp, r7
 8023f66:	bdb0      	pop	{r4, r5, r7, pc}
 8023f68:	0803e6ac 	.word	0x0803e6ac

08023f6c <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_ES6_>:
      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8023f6c:	b580      	push	{r7, lr}
 8023f6e:	b082      	sub	sp, #8
 8023f70:	af00      	add	r7, sp, #0
 8023f72:	6078      	str	r0, [r7, #4]
 8023f74:	6039      	str	r1, [r7, #0]
	return difference_type(_S_buffer_size())
 8023f76:	f001 f90c 	bl	8025192 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 8023f7a:	4603      	mov	r3, r0
 8023f7c:	4619      	mov	r1, r3
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 8023f7e:	687b      	ldr	r3, [r7, #4]
 8023f80:	68da      	ldr	r2, [r3, #12]
 8023f82:	683b      	ldr	r3, [r7, #0]
 8023f84:	68db      	ldr	r3, [r3, #12]
 8023f86:	1ad3      	subs	r3, r2, r3
 8023f88:	109b      	asrs	r3, r3, #2
 8023f8a:	3b01      	subs	r3, #1
 8023f8c:	fb01 f303 	mul.w	r3, r1, r3
 8023f90:	687a      	ldr	r2, [r7, #4]
 8023f92:	6811      	ldr	r1, [r2, #0]
 8023f94:	687a      	ldr	r2, [r7, #4]
 8023f96:	6852      	ldr	r2, [r2, #4]
 8023f98:	1a8a      	subs	r2, r1, r2
 8023f9a:	1092      	asrs	r2, r2, #2
 8023f9c:	4908      	ldr	r1, [pc, #32]	; (8023fc0 <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_ES6_+0x54>)
 8023f9e:	fb01 f202 	mul.w	r2, r1, r2
 8023fa2:	4413      	add	r3, r2
	  + (__y._M_last - __y._M_cur);
 8023fa4:	683a      	ldr	r2, [r7, #0]
 8023fa6:	6891      	ldr	r1, [r2, #8]
 8023fa8:	683a      	ldr	r2, [r7, #0]
 8023faa:	6812      	ldr	r2, [r2, #0]
 8023fac:	1a8a      	subs	r2, r1, r2
 8023fae:	1092      	asrs	r2, r2, #2
 8023fb0:	4903      	ldr	r1, [pc, #12]	; (8023fc0 <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_ES6_+0x54>)
 8023fb2:	fb01 f202 	mul.w	r2, r1, r2
 8023fb6:	4413      	add	r3, r2
      }
 8023fb8:	4618      	mov	r0, r3
 8023fba:	3708      	adds	r7, #8
 8023fbc:	46bd      	mov	sp, r7
 8023fbe:	bd80      	pop	{r7, pc}
 8023fc0:	cccccccd 	.word	0xcccccccd

08023fc4 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8023fc4:	b480      	push	{r7}
 8023fc6:	b083      	sub	sp, #12
 8023fc8:	af00      	add	r7, sp, #0
 8023fca:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8023fcc:	687b      	ldr	r3, [r7, #4]
 8023fce:	4618      	mov	r0, r3
 8023fd0:	370c      	adds	r7, #12
 8023fd2:	46bd      	mov	sp, r7
 8023fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023fd8:	4770      	bx	lr

08023fda <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8023fda:	b580      	push	{r7, lr}
 8023fdc:	b082      	sub	sp, #8
 8023fde:	af00      	add	r7, sp, #0
 8023fe0:	6078      	str	r0, [r7, #4]
 8023fe2:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 8023fe4:	6839      	ldr	r1, [r7, #0]
 8023fe6:	6878      	ldr	r0, [r7, #4]
 8023fe8:	f001 f8db 	bl	80251a2 <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE7destroyIS2_EEvPT_>
	}
 8023fec:	bf00      	nop
 8023fee:	3708      	adds	r7, #8
 8023ff0:	46bd      	mov	sp, r7
 8023ff2:	bd80      	pop	{r7, pc}

08023ff4 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_pop_back_auxEv>:
    void deque<_Tp, _Alloc>::
 8023ff4:	b580      	push	{r7, lr}
 8023ff6:	b082      	sub	sp, #8
 8023ff8:	af00      	add	r7, sp, #0
 8023ffa:	6078      	str	r0, [r7, #4]
      _M_deallocate_node(this->_M_impl._M_finish._M_first);
 8023ffc:	687a      	ldr	r2, [r7, #4]
 8023ffe:	687b      	ldr	r3, [r7, #4]
 8024000:	69db      	ldr	r3, [r3, #28]
 8024002:	4619      	mov	r1, r3
 8024004:	4610      	mov	r0, r2
 8024006:	f001 f8b1 	bl	802516c <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE18_M_deallocate_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node - 1);
 802400a:	687b      	ldr	r3, [r7, #4]
 802400c:	f103 0218 	add.w	r2, r3, #24
 8024010:	687b      	ldr	r3, [r7, #4]
 8024012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024014:	3b04      	subs	r3, #4
 8024016:	4619      	mov	r1, r3
 8024018:	4610      	mov	r0, r2
 802401a:	f001 f88b 	bl	8025134 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_last - 1;
 802401e:	687b      	ldr	r3, [r7, #4]
 8024020:	6a1b      	ldr	r3, [r3, #32]
 8024022:	f1a3 0214 	sub.w	r2, r3, #20
 8024026:	687b      	ldr	r3, [r7, #4]
 8024028:	619a      	str	r2, [r3, #24]
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 802402a:	687b      	ldr	r3, [r7, #4]
 802402c:	4618      	mov	r0, r3
 802402e:	f7ff ffc9 	bl	8023fc4 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 8024032:	4602      	mov	r2, r0
 8024034:	687b      	ldr	r3, [r7, #4]
 8024036:	699b      	ldr	r3, [r3, #24]
 8024038:	4619      	mov	r1, r3
 802403a:	4610      	mov	r0, r2
 802403c:	f7ff ffcd 	bl	8023fda <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE7destroyIS1_EEvRS2_PT_>
    }
 8024040:	bf00      	nop
 8024042:	3708      	adds	r7, #8
 8024044:	46bd      	mov	sp, r7
 8024046:	bd80      	pop	{r7, pc}

08024048 <_ZSteqRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_ES6_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8024048:	b480      	push	{r7}
 802404a:	b083      	sub	sp, #12
 802404c:	af00      	add	r7, sp, #0
 802404e:	6078      	str	r0, [r7, #4]
 8024050:	6039      	str	r1, [r7, #0]
      { return __x._M_cur == __y._M_cur; }
 8024052:	687b      	ldr	r3, [r7, #4]
 8024054:	681a      	ldr	r2, [r3, #0]
 8024056:	683b      	ldr	r3, [r7, #0]
 8024058:	681b      	ldr	r3, [r3, #0]
 802405a:	429a      	cmp	r2, r3
 802405c:	bf0c      	ite	eq
 802405e:	2301      	moveq	r3, #1
 8024060:	2300      	movne	r3, #0
 8024062:	b2db      	uxtb	r3, r3
 8024064:	4618      	mov	r0, r3
 8024066:	370c      	adds	r7, #12
 8024068:	46bd      	mov	sp, r7
 802406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802406e:	4770      	bx	lr

08024070 <_ZNKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EixEi>:
      operator[](difference_type __n) const _GLIBCXX_NOEXCEPT
 8024070:	b580      	push	{r7, lr}
 8024072:	b086      	sub	sp, #24
 8024074:	af00      	add	r7, sp, #0
 8024076:	6078      	str	r0, [r7, #4]
 8024078:	6039      	str	r1, [r7, #0]
      { return *(*this + __n); }
 802407a:	f107 0308 	add.w	r3, r7, #8
 802407e:	683a      	ldr	r2, [r7, #0]
 8024080:	6879      	ldr	r1, [r7, #4]
 8024082:	4618      	mov	r0, r3
 8024084:	f001 f898 	bl	80251b8 <_ZStplRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>
 8024088:	f107 0308 	add.w	r3, r7, #8
 802408c:	4618      	mov	r0, r3
 802408e:	f001 f8a6 	bl	80251de <_ZNKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EdeEv>
 8024092:	4603      	mov	r3, r0
 8024094:	4618      	mov	r0, r3
 8024096:	3718      	adds	r7, #24
 8024098:	46bd      	mov	sp, r7
 802409a:	bd80      	pop	{r7, pc}

0802409c <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 802409c:	b580      	push	{r7, lr}
 802409e:	b082      	sub	sp, #8
 80240a0:	af00      	add	r7, sp, #0
 80240a2:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80240a4:	6878      	ldr	r0, [r7, #4]
 80240a6:	f001 f8a6 	bl	80251f6 <_ZNSaIN10BHYWrapper8BHYFrameEEC1Ev>
 80240aa:	687b      	ldr	r3, [r7, #4]
 80240ac:	4618      	mov	r0, r3
 80240ae:	f001 f8ae 	bl	802520e <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_dataC1Ev>
	{ }
 80240b2:	687b      	ldr	r3, [r7, #4]
 80240b4:	4618      	mov	r0, r3
 80240b6:	3708      	adds	r7, #8
 80240b8:	46bd      	mov	sp, r7
 80240ba:	bd80      	pop	{r7, pc}

080240bc <_ZNSaIN10BHYWrapper8BHYFrameEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 80240bc:	b580      	push	{r7, lr}
 80240be:	b082      	sub	sp, #8
 80240c0:	af00      	add	r7, sp, #0
 80240c2:	6078      	str	r0, [r7, #4]
 80240c4:	6878      	ldr	r0, [r7, #4]
 80240c6:	f001 f8bb 	bl	8025240 <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEED1Ev>
 80240ca:	687b      	ldr	r3, [r7, #4]
 80240cc:	4618      	mov	r0, r3
 80240ce:	3708      	adds	r7, #8
 80240d0:	46bd      	mov	sp, r7
 80240d2:	bd80      	pop	{r7, pc}

080240d4 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 80240d4:	b590      	push	{r4, r7, lr}
 80240d6:	b089      	sub	sp, #36	; 0x24
 80240d8:	af00      	add	r7, sp, #0
 80240da:	6078      	str	r0, [r7, #4]
 80240dc:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 80240de:	2014      	movs	r0, #20
 80240e0:	f7fc fecf 	bl	8020e82 <_ZSt16__deque_buf_sizej>
 80240e4:	4602      	mov	r2, r0
 80240e6:	683b      	ldr	r3, [r7, #0]
 80240e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80240ec:	3301      	adds	r3, #1
 80240ee:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 80240f0:	2308      	movs	r3, #8
 80240f2:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 80240f4:	69fb      	ldr	r3, [r7, #28]
 80240f6:	3302      	adds	r3, #2
 80240f8:	613b      	str	r3, [r7, #16]
 80240fa:	f107 0210 	add.w	r2, r7, #16
 80240fe:	f107 030c 	add.w	r3, r7, #12
 8024102:	4611      	mov	r1, r2
 8024104:	4618      	mov	r0, r3
 8024106:	f000 f97c 	bl	8024402 <_ZSt3maxIjERKT_S2_S2_>
 802410a:	4603      	mov	r3, r0
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 802410c:	681a      	ldr	r2, [r3, #0]
 802410e:	687b      	ldr	r3, [r7, #4]
 8024110:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 8024112:	687b      	ldr	r3, [r7, #4]
 8024114:	685b      	ldr	r3, [r3, #4]
 8024116:	4619      	mov	r1, r3
 8024118:	6878      	ldr	r0, [r7, #4]
 802411a:	f001 f89c 	bl	8025256 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE15_M_allocate_mapEj>
 802411e:	4602      	mov	r2, r0
 8024120:	687b      	ldr	r3, [r7, #4]
 8024122:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 8024124:	687b      	ldr	r3, [r7, #4]
 8024126:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 8024128:	687b      	ldr	r3, [r7, #4]
 802412a:	6859      	ldr	r1, [r3, #4]
 802412c:	69fb      	ldr	r3, [r7, #28]
 802412e:	1acb      	subs	r3, r1, r3
 8024130:	085b      	lsrs	r3, r3, #1
 8024132:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 8024134:	4413      	add	r3, r2
 8024136:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 8024138:	69fb      	ldr	r3, [r7, #28]
 802413a:	009b      	lsls	r3, r3, #2
 802413c:	69ba      	ldr	r2, [r7, #24]
 802413e:	4413      	add	r3, r2
 8024140:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 8024142:	697a      	ldr	r2, [r7, #20]
 8024144:	69b9      	ldr	r1, [r7, #24]
 8024146:	6878      	ldr	r0, [r7, #4]
 8024148:	f001 f8a2 	bl	8025290 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE15_M_create_nodesEPPS1_S5_>
      this->_M_impl._M_start._M_set_node(__nstart);
 802414c:	687b      	ldr	r3, [r7, #4]
 802414e:	3308      	adds	r3, #8
 8024150:	69b9      	ldr	r1, [r7, #24]
 8024152:	4618      	mov	r0, r3
 8024154:	f000 ffee 	bl	8025134 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 8024158:	687b      	ldr	r3, [r7, #4]
 802415a:	f103 0218 	add.w	r2, r3, #24
 802415e:	697b      	ldr	r3, [r7, #20]
 8024160:	3b04      	subs	r3, #4
 8024162:	4619      	mov	r1, r3
 8024164:	4610      	mov	r0, r2
 8024166:	f000 ffe5 	bl	8025134 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 802416a:	687b      	ldr	r3, [r7, #4]
 802416c:	68da      	ldr	r2, [r3, #12]
 802416e:	687b      	ldr	r3, [r7, #4]
 8024170:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8024172:	687b      	ldr	r3, [r7, #4]
 8024174:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 8024176:	2014      	movs	r0, #20
 8024178:	f7fc fe83 	bl	8020e82 <_ZSt16__deque_buf_sizej>
 802417c:	4602      	mov	r2, r0
 802417e:	683b      	ldr	r3, [r7, #0]
 8024180:	fbb3 f1f2 	udiv	r1, r3, r2
 8024184:	fb01 f202 	mul.w	r2, r1, r2
 8024188:	1a9a      	subs	r2, r3, r2
					+ __num_elements
 802418a:	4613      	mov	r3, r2
 802418c:	009b      	lsls	r3, r3, #2
 802418e:	4413      	add	r3, r2
 8024190:	009b      	lsls	r3, r3, #2
 8024192:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8024194:	687b      	ldr	r3, [r7, #4]
 8024196:	619a      	str	r2, [r3, #24]
    }
 8024198:	bf00      	nop
 802419a:	3724      	adds	r7, #36	; 0x24
 802419c:	46bd      	mov	sp, r7
 802419e:	bd90      	pop	{r4, r7, pc}

080241a0 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_destroy_nodesEPPS1_S5_>:
    _Deque_base<_Tp, _Alloc>::
 80241a0:	b580      	push	{r7, lr}
 80241a2:	b086      	sub	sp, #24
 80241a4:	af00      	add	r7, sp, #0
 80241a6:	60f8      	str	r0, [r7, #12]
 80241a8:	60b9      	str	r1, [r7, #8]
 80241aa:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 80241ac:	68bb      	ldr	r3, [r7, #8]
 80241ae:	617b      	str	r3, [r7, #20]
 80241b0:	697a      	ldr	r2, [r7, #20]
 80241b2:	687b      	ldr	r3, [r7, #4]
 80241b4:	429a      	cmp	r2, r3
 80241b6:	d209      	bcs.n	80241cc <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_destroy_nodesEPPS1_S5_+0x2c>
	_M_deallocate_node(*__n);
 80241b8:	697b      	ldr	r3, [r7, #20]
 80241ba:	681b      	ldr	r3, [r3, #0]
 80241bc:	4619      	mov	r1, r3
 80241be:	68f8      	ldr	r0, [r7, #12]
 80241c0:	f000 ffd4 	bl	802516c <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE18_M_deallocate_nodeEPS1_>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 80241c4:	697b      	ldr	r3, [r7, #20]
 80241c6:	3304      	adds	r3, #4
 80241c8:	617b      	str	r3, [r7, #20]
 80241ca:	e7f1      	b.n	80241b0 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_destroy_nodesEPPS1_S5_+0x10>
    }
 80241cc:	bf00      	nop
 80241ce:	3718      	adds	r7, #24
 80241d0:	46bd      	mov	sp, r7
 80241d2:	bd80      	pop	{r7, pc}

080241d4 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE17_M_deallocate_mapEPPS1_j>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 80241d4:	b580      	push	{r7, lr}
 80241d6:	b086      	sub	sp, #24
 80241d8:	af00      	add	r7, sp, #0
 80241da:	60f8      	str	r0, [r7, #12]
 80241dc:	60b9      	str	r1, [r7, #8]
 80241de:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 80241e0:	f107 0314 	add.w	r3, r7, #20
 80241e4:	68f9      	ldr	r1, [r7, #12]
 80241e6:	4618      	mov	r0, r3
 80241e8:	f001 f86c 	bl	80252c4 <_ZNKSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 80241ec:	f107 0314 	add.w	r3, r7, #20
 80241f0:	687a      	ldr	r2, [r7, #4]
 80241f2:	68b9      	ldr	r1, [r7, #8]
 80241f4:	4618      	mov	r0, r3
 80241f6:	f001 f882 	bl	80252fe <_ZNSt16allocator_traitsISaIPN10BHYWrapper8BHYFrameEEE10deallocateERS3_PS2_j>
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 80241fa:	f107 0314 	add.w	r3, r7, #20
 80241fe:	4618      	mov	r0, r3
 8024200:	f001 f871 	bl	80252e6 <_ZNSaIPN10BHYWrapper8BHYFrameEED1Ev>
      }
 8024204:	bf00      	nop
 8024206:	3718      	adds	r7, #24
 8024208:	46bd      	mov	sp, r7
 802420a:	bd80      	pop	{r7, pc}

0802420c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 802420c:	b580      	push	{r7, lr}
 802420e:	b082      	sub	sp, #8
 8024210:	af00      	add	r7, sp, #0
 8024212:	6078      	str	r0, [r7, #4]
 8024214:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 8024216:	683b      	ldr	r3, [r7, #0]
 8024218:	3308      	adds	r3, #8
 802421a:	4619      	mov	r1, r3
 802421c:	6878      	ldr	r0, [r7, #4]
 802421e:	f000 f813 	bl	8024248 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8024222:	6878      	ldr	r0, [r7, #4]
 8024224:	3708      	adds	r7, #8
 8024226:	46bd      	mov	sp, r7
 8024228:	bd80      	pop	{r7, pc}

0802422a <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 802422a:	b580      	push	{r7, lr}
 802422c:	b082      	sub	sp, #8
 802422e:	af00      	add	r7, sp, #0
 8024230:	6078      	str	r0, [r7, #4]
 8024232:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 8024234:	683b      	ldr	r3, [r7, #0]
 8024236:	3318      	adds	r3, #24
 8024238:	4619      	mov	r1, r3
 802423a:	6878      	ldr	r0, [r7, #4]
 802423c:	f000 f804 	bl	8024248 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8024240:	6878      	ldr	r0, [r7, #4]
 8024242:	3708      	adds	r7, #8
 8024244:	46bd      	mov	sp, r7
 8024246:	bd80      	pop	{r7, pc}

08024248 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 8024248:	b480      	push	{r7}
 802424a:	b083      	sub	sp, #12
 802424c:	af00      	add	r7, sp, #0
 802424e:	6078      	str	r0, [r7, #4]
 8024250:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8024252:	683b      	ldr	r3, [r7, #0]
 8024254:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8024256:	687b      	ldr	r3, [r7, #4]
 8024258:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 802425a:	683b      	ldr	r3, [r7, #0]
 802425c:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 802425e:	687b      	ldr	r3, [r7, #4]
 8024260:	605a      	str	r2, [r3, #4]
 8024262:	683b      	ldr	r3, [r7, #0]
 8024264:	689a      	ldr	r2, [r3, #8]
 8024266:	687b      	ldr	r3, [r7, #4]
 8024268:	609a      	str	r2, [r3, #8]
 802426a:	683b      	ldr	r3, [r7, #0]
 802426c:	68da      	ldr	r2, [r3, #12]
 802426e:	687b      	ldr	r3, [r7, #4]
 8024270:	60da      	str	r2, [r3, #12]
 8024272:	687b      	ldr	r3, [r7, #4]
 8024274:	4618      	mov	r0, r3
 8024276:	370c      	adds	r7, #12
 8024278:	46bd      	mov	sp, r7
 802427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802427e:	4770      	bx	lr

08024280 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_destroy_dataESt15_Deque_iteratorIS1_RS1_PS1_ES7_RKS2_>:
      _M_destroy_data(iterator __first, iterator __last,
 8024280:	b480      	push	{r7}
 8024282:	b08d      	sub	sp, #52	; 0x34
 8024284:	af00      	add	r7, sp, #0
 8024286:	60f8      	str	r0, [r7, #12]
 8024288:	60b9      	str	r1, [r7, #8]
 802428a:	607a      	str	r2, [r7, #4]
 802428c:	603b      	str	r3, [r7, #0]
      }
 802428e:	bf00      	nop
 8024290:	3734      	adds	r7, #52	; 0x34
 8024292:	46bd      	mov	sp, r7
 8024294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024298:	4770      	bx	lr

0802429a <_ZSt4moveIRSt5dequeI7RequestSaIS1_EEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 802429a:	b480      	push	{r7}
 802429c:	b083      	sub	sp, #12
 802429e:	af00      	add	r7, sp, #0
 80242a0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80242a2:	687b      	ldr	r3, [r7, #4]
 80242a4:	4618      	mov	r0, r3
 80242a6:	370c      	adds	r7, #12
 80242a8:	46bd      	mov	sp, r7
 80242aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80242ae:	4770      	bx	lr

080242b0 <_ZNSt5dequeI7RequestSaIS0_EE15_M_move_assign1EOS2_St17integral_constantIbLb1EE>:

#if __cplusplus >= 201103L
      // Constant-time, nothrow move assignment when source object's memory
      // can be moved because the allocators are equal.
      void
      _M_move_assign1(deque&& __x, /* always equal: */ true_type) noexcept
 80242b0:	b590      	push	{r4, r7, lr}
 80242b2:	b085      	sub	sp, #20
 80242b4:	af00      	add	r7, sp, #0
 80242b6:	60f8      	str	r0, [r7, #12]
 80242b8:	60b9      	str	r1, [r7, #8]
 80242ba:	713a      	strb	r2, [r7, #4]
      {
	this->_M_impl._M_swap_data(__x._M_impl);
 80242bc:	68fb      	ldr	r3, [r7, #12]
 80242be:	68ba      	ldr	r2, [r7, #8]
 80242c0:	4611      	mov	r1, r2
 80242c2:	4618      	mov	r0, r3
 80242c4:	f001 f82a 	bl	802531c <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_Deque_impl_data12_M_swap_dataERS3_>
	__x.clear();
 80242c8:	68b8      	ldr	r0, [r7, #8]
 80242ca:	f001 f834 	bl	8025336 <_ZNSt5dequeI7RequestSaIS0_EE5clearEv>
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
 80242ce:	68fb      	ldr	r3, [r7, #12]
 80242d0:	4618      	mov	r0, r3
 80242d2:	f7ff f836 	bl	8023342 <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 80242d6:	4604      	mov	r4, r0
 80242d8:	68bb      	ldr	r3, [r7, #8]
 80242da:	4618      	mov	r0, r3
 80242dc:	f7ff f831 	bl	8023342 <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 80242e0:	4603      	mov	r3, r0
 80242e2:	4619      	mov	r1, r3
 80242e4:	4620      	mov	r0, r4
 80242e6:	f001 f83a 	bl	802535e <_ZSt15__alloc_on_moveISaI7RequestEEvRT_S3_>
      }
 80242ea:	bf00      	nop
 80242ec:	3714      	adds	r7, #20
 80242ee:	46bd      	mov	sp, r7
 80242f0:	bd90      	pop	{r4, r7, pc}

080242f2 <_ZSt4moveIRSt5dequeI8ResponceSaIS1_EEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 80242f2:	b480      	push	{r7}
 80242f4:	b083      	sub	sp, #12
 80242f6:	af00      	add	r7, sp, #0
 80242f8:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80242fa:	687b      	ldr	r3, [r7, #4]
 80242fc:	4618      	mov	r0, r3
 80242fe:	370c      	adds	r7, #12
 8024300:	46bd      	mov	sp, r7
 8024302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024306:	4770      	bx	lr

08024308 <_ZNSt5dequeI8ResponceSaIS0_EE15_M_move_assign1EOS2_St17integral_constantIbLb1EE>:
      _M_move_assign1(deque&& __x, /* always equal: */ true_type) noexcept
 8024308:	b590      	push	{r4, r7, lr}
 802430a:	b085      	sub	sp, #20
 802430c:	af00      	add	r7, sp, #0
 802430e:	60f8      	str	r0, [r7, #12]
 8024310:	60b9      	str	r1, [r7, #8]
 8024312:	713a      	strb	r2, [r7, #4]
	this->_M_impl._M_swap_data(__x._M_impl);
 8024314:	68fb      	ldr	r3, [r7, #12]
 8024316:	68ba      	ldr	r2, [r7, #8]
 8024318:	4611      	mov	r1, r2
 802431a:	4618      	mov	r0, r3
 802431c:	f001 f82d 	bl	802537a <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_Deque_impl_data12_M_swap_dataERS3_>
	__x.clear();
 8024320:	68b8      	ldr	r0, [r7, #8]
 8024322:	f001 f837 	bl	8025394 <_ZNSt5dequeI8ResponceSaIS0_EE5clearEv>
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
 8024326:	68fb      	ldr	r3, [r7, #12]
 8024328:	4618      	mov	r0, r3
 802432a:	f7ff f8ad 	bl	8023488 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 802432e:	4604      	mov	r4, r0
 8024330:	68bb      	ldr	r3, [r7, #8]
 8024332:	4618      	mov	r0, r3
 8024334:	f7ff f8a8 	bl	8023488 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 8024338:	4603      	mov	r3, r0
 802433a:	4619      	mov	r1, r3
 802433c:	4620      	mov	r0, r4
 802433e:	f001 f83d 	bl	80253bc <_ZSt15__alloc_on_moveISaI8ResponceEEvRT_S3_>
      }
 8024342:	bf00      	nop
 8024344:	3714      	adds	r7, #20
 8024346:	46bd      	mov	sp, r7
 8024348:	bd90      	pop	{r4, r7, pc}

0802434a <_ZSt4moveIRSt5dequeIN10BHYWrapper8BHYFrameESaIS2_EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 802434a:	b480      	push	{r7}
 802434c:	b083      	sub	sp, #12
 802434e:	af00      	add	r7, sp, #0
 8024350:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8024352:	687b      	ldr	r3, [r7, #4]
 8024354:	4618      	mov	r0, r3
 8024356:	370c      	adds	r7, #12
 8024358:	46bd      	mov	sp, r7
 802435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802435e:	4770      	bx	lr

08024360 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_move_assign1EOS3_St17integral_constantIbLb1EE>:
      _M_move_assign1(deque&& __x, /* always equal: */ true_type) noexcept
 8024360:	b590      	push	{r4, r7, lr}
 8024362:	b085      	sub	sp, #20
 8024364:	af00      	add	r7, sp, #0
 8024366:	60f8      	str	r0, [r7, #12]
 8024368:	60b9      	str	r1, [r7, #8]
 802436a:	713a      	strb	r2, [r7, #4]
	this->_M_impl._M_swap_data(__x._M_impl);
 802436c:	68fb      	ldr	r3, [r7, #12]
 802436e:	68ba      	ldr	r2, [r7, #8]
 8024370:	4611      	mov	r1, r2
 8024372:	4618      	mov	r0, r3
 8024374:	f001 f830 	bl	80253d8 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_data12_M_swap_dataERS4_>
	__x.clear();
 8024378:	68b8      	ldr	r0, [r7, #8]
 802437a:	f001 f83a 	bl	80253f2 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5clearEv>
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
 802437e:	68fb      	ldr	r3, [r7, #12]
 8024380:	4618      	mov	r0, r3
 8024382:	f7ff fe1f 	bl	8023fc4 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 8024386:	4604      	mov	r4, r0
 8024388:	68bb      	ldr	r3, [r7, #8]
 802438a:	4618      	mov	r0, r3
 802438c:	f7ff fe1a 	bl	8023fc4 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 8024390:	4603      	mov	r3, r0
 8024392:	4619      	mov	r1, r3
 8024394:	4620      	mov	r0, r4
 8024396:	f001 f840 	bl	802541a <_ZSt15__alloc_on_moveISaIN10BHYWrapper8BHYFrameEEEvRT_S4_>
      }
 802439a:	bf00      	nop
 802439c:	3714      	adds	r7, #20
 802439e:	46bd      	mov	sp, r7
 80243a0:	bd90      	pop	{r4, r7, pc}

080243a2 <_ZNSaI7RequestEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80243a2:	b580      	push	{r7, lr}
 80243a4:	b082      	sub	sp, #8
 80243a6:	af00      	add	r7, sp, #0
 80243a8:	6078      	str	r0, [r7, #4]
 80243aa:	6878      	ldr	r0, [r7, #4]
 80243ac:	f001 f843 	bl	8025436 <_ZN9__gnu_cxx13new_allocatorI7RequestEC1Ev>
 80243b0:	687b      	ldr	r3, [r7, #4]
 80243b2:	4618      	mov	r0, r3
 80243b4:	3708      	adds	r7, #8
 80243b6:	46bd      	mov	sp, r7
 80243b8:	bd80      	pop	{r7, pc}

080243ba <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 80243ba:	b580      	push	{r7, lr}
 80243bc:	b082      	sub	sp, #8
 80243be:	af00      	add	r7, sp, #0
 80243c0:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 80243c2:	687b      	ldr	r3, [r7, #4]
 80243c4:	2200      	movs	r2, #0
 80243c6:	601a      	str	r2, [r3, #0]
 80243c8:	687b      	ldr	r3, [r7, #4]
 80243ca:	2200      	movs	r2, #0
 80243cc:	605a      	str	r2, [r3, #4]
 80243ce:	687b      	ldr	r3, [r7, #4]
 80243d0:	3308      	adds	r3, #8
 80243d2:	4618      	mov	r0, r3
 80243d4:	f001 f83a 	bl	802544c <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1Ev>
 80243d8:	687b      	ldr	r3, [r7, #4]
 80243da:	3318      	adds	r3, #24
 80243dc:	4618      	mov	r0, r3
 80243de:	f001 f835 	bl	802544c <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1Ev>
	{ }
 80243e2:	687b      	ldr	r3, [r7, #4]
 80243e4:	4618      	mov	r0, r3
 80243e6:	3708      	adds	r7, #8
 80243e8:	46bd      	mov	sp, r7
 80243ea:	bd80      	pop	{r7, pc}

080243ec <_ZN9__gnu_cxx13new_allocatorI7RequestED1Ev>:
 80243ec:	b480      	push	{r7}
 80243ee:	b083      	sub	sp, #12
 80243f0:	af00      	add	r7, sp, #0
 80243f2:	6078      	str	r0, [r7, #4]
 80243f4:	687b      	ldr	r3, [r7, #4]
 80243f6:	4618      	mov	r0, r3
 80243f8:	370c      	adds	r7, #12
 80243fa:	46bd      	mov	sp, r7
 80243fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024400:	4770      	bx	lr

08024402 <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8024402:	b480      	push	{r7}
 8024404:	b083      	sub	sp, #12
 8024406:	af00      	add	r7, sp, #0
 8024408:	6078      	str	r0, [r7, #4]
 802440a:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 802440c:	687b      	ldr	r3, [r7, #4]
 802440e:	681a      	ldr	r2, [r3, #0]
 8024410:	683b      	ldr	r3, [r7, #0]
 8024412:	681b      	ldr	r3, [r3, #0]
 8024414:	429a      	cmp	r2, r3
 8024416:	d201      	bcs.n	802441c <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8024418:	683b      	ldr	r3, [r7, #0]
 802441a:	e000      	b.n	802441e <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 802441c:	687b      	ldr	r3, [r7, #4]
    }
 802441e:	4618      	mov	r0, r3
 8024420:	370c      	adds	r7, #12
 8024422:	46bd      	mov	sp, r7
 8024424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024428:	4770      	bx	lr

0802442a <_ZNSt11_Deque_baseI7RequestSaIS0_EE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 802442a:	b590      	push	{r4, r7, lr}
 802442c:	b085      	sub	sp, #20
 802442e:	af00      	add	r7, sp, #0
 8024430:	6078      	str	r0, [r7, #4]
 8024432:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8024434:	f107 030c 	add.w	r3, r7, #12
 8024438:	6879      	ldr	r1, [r7, #4]
 802443a:	4618      	mov	r0, r3
 802443c:	f000 f85b 	bl	80244f6 <_ZNKSt11_Deque_baseI7RequestSaIS0_EE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8024440:	f107 030c 	add.w	r3, r7, #12
 8024444:	6839      	ldr	r1, [r7, #0]
 8024446:	4618      	mov	r0, r3
 8024448:	f001 f817 	bl	802547a <_ZNSt16allocator_traitsISaIP7RequestEE8allocateERS2_j>
 802444c:	4604      	mov	r4, r0
 802444e:	bf00      	nop
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8024450:	f107 030c 	add.w	r3, r7, #12
 8024454:	4618      	mov	r0, r3
 8024456:	f000 f85f 	bl	8024518 <_ZNSaIP7RequestED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 802445a:	4623      	mov	r3, r4
      }
 802445c:	4618      	mov	r0, r3
 802445e:	3714      	adds	r7, #20
 8024460:	46bd      	mov	sp, r7
 8024462:	bd90      	pop	{r4, r7, pc}

08024464 <_ZNSt11_Deque_baseI7RequestSaIS0_EE15_M_create_nodesEPPS0_S4_>:
    _Deque_base<_Tp, _Alloc>::
 8024464:	b580      	push	{r7, lr}
 8024466:	b086      	sub	sp, #24
 8024468:	af00      	add	r7, sp, #0
 802446a:	60f8      	str	r0, [r7, #12]
 802446c:	60b9      	str	r1, [r7, #8]
 802446e:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8024470:	68bb      	ldr	r3, [r7, #8]
 8024472:	617b      	str	r3, [r7, #20]
 8024474:	697a      	ldr	r2, [r7, #20]
 8024476:	687b      	ldr	r3, [r7, #4]
 8024478:	429a      	cmp	r2, r3
 802447a:	d209      	bcs.n	8024490 <_ZNSt11_Deque_baseI7RequestSaIS0_EE15_M_create_nodesEPPS0_S4_+0x2c>
	    *__cur = this->_M_allocate_node();
 802447c:	68f8      	ldr	r0, [r7, #12]
 802447e:	f000 fa3f 	bl	8024900 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_M_allocate_nodeEv>
 8024482:	4602      	mov	r2, r0
 8024484:	697b      	ldr	r3, [r7, #20]
 8024486:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8024488:	697b      	ldr	r3, [r7, #20]
 802448a:	3304      	adds	r3, #4
 802448c:	617b      	str	r3, [r7, #20]
 802448e:	e7f1      	b.n	8024474 <_ZNSt11_Deque_baseI7RequestSaIS0_EE15_M_create_nodesEPPS0_S4_+0x10>
    }
 8024490:	bf00      	nop
 8024492:	3718      	adds	r7, #24
 8024494:	46bd      	mov	sp, r7
 8024496:	bd80      	pop	{r7, pc}

08024498 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E11_M_set_nodeEPS2_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 8024498:	b590      	push	{r4, r7, lr}
 802449a:	b083      	sub	sp, #12
 802449c:	af00      	add	r7, sp, #0
 802449e:	6078      	str	r0, [r7, #4]
 80244a0:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 80244a2:	687b      	ldr	r3, [r7, #4]
 80244a4:	683a      	ldr	r2, [r7, #0]
 80244a6:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 80244a8:	683b      	ldr	r3, [r7, #0]
 80244aa:	681a      	ldr	r2, [r3, #0]
 80244ac:	687b      	ldr	r3, [r7, #4]
 80244ae:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 80244b0:	687b      	ldr	r3, [r7, #4]
 80244b2:	685c      	ldr	r4, [r3, #4]
 80244b4:	f000 fca5 	bl	8024e02 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E14_S_buffer_sizeEv>
 80244b8:	4602      	mov	r2, r0
 80244ba:	4613      	mov	r3, r2
 80244bc:	009b      	lsls	r3, r3, #2
 80244be:	4413      	add	r3, r2
 80244c0:	009b      	lsls	r3, r3, #2
 80244c2:	18e2      	adds	r2, r4, r3
 80244c4:	687b      	ldr	r3, [r7, #4]
 80244c6:	609a      	str	r2, [r3, #8]
      }
 80244c8:	bf00      	nop
 80244ca:	370c      	adds	r7, #12
 80244cc:	46bd      	mov	sp, r7
 80244ce:	bd90      	pop	{r4, r7, pc}

080244d0 <_ZNSt11_Deque_baseI7RequestSaIS0_EE18_M_deallocate_nodeEPS0_>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 80244d0:	b590      	push	{r4, r7, lr}
 80244d2:	b083      	sub	sp, #12
 80244d4:	af00      	add	r7, sp, #0
 80244d6:	6078      	str	r0, [r7, #4]
 80244d8:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 80244da:	687c      	ldr	r4, [r7, #4]
 80244dc:	2014      	movs	r0, #20
 80244de:	f7fc fcd0 	bl	8020e82 <_ZSt16__deque_buf_sizej>
 80244e2:	4603      	mov	r3, r0
 80244e4:	461a      	mov	r2, r3
 80244e6:	6839      	ldr	r1, [r7, #0]
 80244e8:	4620      	mov	r0, r4
 80244ea:	f000 ffd5 	bl	8025498 <_ZNSt16allocator_traitsISaI7RequestEE10deallocateERS1_PS0_j>
      }
 80244ee:	bf00      	nop
 80244f0:	370c      	adds	r7, #12
 80244f2:	46bd      	mov	sp, r7
 80244f4:	bd90      	pop	{r4, r7, pc}

080244f6 <_ZNKSt11_Deque_baseI7RequestSaIS0_EE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 80244f6:	b580      	push	{r7, lr}
 80244f8:	b082      	sub	sp, #8
 80244fa:	af00      	add	r7, sp, #0
 80244fc:	6078      	str	r0, [r7, #4]
 80244fe:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 8024500:	6838      	ldr	r0, [r7, #0]
 8024502:	f000 ffd8 	bl	80254b6 <_ZNKSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 8024506:	4603      	mov	r3, r0
 8024508:	4619      	mov	r1, r3
 802450a:	6878      	ldr	r0, [r7, #4]
 802450c:	f000 ffde 	bl	80254cc <_ZNSaIP7RequestEC1IS_EERKSaIT_E>
 8024510:	6878      	ldr	r0, [r7, #4]
 8024512:	3708      	adds	r7, #8
 8024514:	46bd      	mov	sp, r7
 8024516:	bd80      	pop	{r7, pc}

08024518 <_ZNSaIP7RequestED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8024518:	b580      	push	{r7, lr}
 802451a:	b082      	sub	sp, #8
 802451c:	af00      	add	r7, sp, #0
 802451e:	6078      	str	r0, [r7, #4]
 8024520:	6878      	ldr	r0, [r7, #4]
 8024522:	f000 ffe0 	bl	80254e6 <_ZN9__gnu_cxx13new_allocatorIP7RequestED1Ev>
 8024526:	687b      	ldr	r3, [r7, #4]
 8024528:	4618      	mov	r0, r3
 802452a:	3708      	adds	r7, #8
 802452c:	46bd      	mov	sp, r7
 802452e:	bd80      	pop	{r7, pc}

08024530 <_ZNSt16allocator_traitsISaIP7RequestEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8024530:	b580      	push	{r7, lr}
 8024532:	b084      	sub	sp, #16
 8024534:	af00      	add	r7, sp, #0
 8024536:	60f8      	str	r0, [r7, #12]
 8024538:	60b9      	str	r1, [r7, #8]
 802453a:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 802453c:	687a      	ldr	r2, [r7, #4]
 802453e:	68b9      	ldr	r1, [r7, #8]
 8024540:	68f8      	ldr	r0, [r7, #12]
 8024542:	f000 ffdb 	bl	80254fc <_ZN9__gnu_cxx13new_allocatorIP7RequestE10deallocateEPS2_j>
 8024546:	bf00      	nop
 8024548:	3710      	adds	r7, #16
 802454a:	46bd      	mov	sp, r7
 802454c:	bd80      	pop	{r7, pc}

0802454e <_ZNSt5dequeI7RequestSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_>:
	}
      }

   template<typename _Tp, typename _Alloc>
     void
     deque<_Tp, _Alloc>::
 802454e:	b5b0      	push	{r4, r5, r7, lr}
 8024550:	b086      	sub	sp, #24
 8024552:	af00      	add	r7, sp, #0
 8024554:	60f8      	str	r0, [r7, #12]
 8024556:	60b9      	str	r1, [r7, #8]
 8024558:	607a      	str	r2, [r7, #4]
     _M_destroy_data_aux(iterator __first, iterator __last)
     {
       for (_Map_pointer __node = __first._M_node + 1;
 802455a:	68bb      	ldr	r3, [r7, #8]
 802455c:	68db      	ldr	r3, [r3, #12]
 802455e:	3304      	adds	r3, #4
 8024560:	617b      	str	r3, [r7, #20]
	    __node < __last._M_node; ++__node)
 8024562:	687b      	ldr	r3, [r7, #4]
 8024564:	68db      	ldr	r3, [r3, #12]
 8024566:	697a      	ldr	r2, [r7, #20]
 8024568:	429a      	cmp	r2, r3
 802456a:	d219      	bcs.n	80245a0 <_ZNSt5dequeI7RequestSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_+0x52>
	 std::_Destroy(*__node, *__node + _S_buffer_size(),
 802456c:	697b      	ldr	r3, [r7, #20]
 802456e:	681d      	ldr	r5, [r3, #0]
 8024570:	697b      	ldr	r3, [r7, #20]
 8024572:	681c      	ldr	r4, [r3, #0]
 8024574:	f000 ffd2 	bl	802551c <_ZNSt5dequeI7RequestSaIS0_EE14_S_buffer_sizeEv>
 8024578:	4602      	mov	r2, r0
 802457a:	4613      	mov	r3, r2
 802457c:	009b      	lsls	r3, r3, #2
 802457e:	4413      	add	r3, r2
 8024580:	009b      	lsls	r3, r3, #2
 8024582:	441c      	add	r4, r3
		       _M_get_Tp_allocator());
 8024584:	68fb      	ldr	r3, [r7, #12]
 8024586:	4618      	mov	r0, r3
 8024588:	f7fe fedb 	bl	8023342 <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 802458c:	4603      	mov	r3, r0
	 std::_Destroy(*__node, *__node + _S_buffer_size(),
 802458e:	461a      	mov	r2, r3
 8024590:	4621      	mov	r1, r4
 8024592:	4628      	mov	r0, r5
 8024594:	f000 ffca 	bl	802552c <_ZSt8_DestroyIP7RequestS0_EvT_S2_RSaIT0_E>
       for (_Map_pointer __node = __first._M_node + 1;
 8024598:	697b      	ldr	r3, [r7, #20]
 802459a:	3304      	adds	r3, #4
 802459c:	617b      	str	r3, [r7, #20]
 802459e:	e7e0      	b.n	8024562 <_ZNSt5dequeI7RequestSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_+0x14>

       if (__first._M_node != __last._M_node)
 80245a0:	68bb      	ldr	r3, [r7, #8]
 80245a2:	68da      	ldr	r2, [r3, #12]
 80245a4:	687b      	ldr	r3, [r7, #4]
 80245a6:	68db      	ldr	r3, [r3, #12]
 80245a8:	429a      	cmp	r2, r3
 80245aa:	d01c      	beq.n	80245e6 <_ZNSt5dequeI7RequestSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_+0x98>
	 {
	   std::_Destroy(__first._M_cur, __first._M_last,
 80245ac:	68bb      	ldr	r3, [r7, #8]
 80245ae:	681c      	ldr	r4, [r3, #0]
 80245b0:	68bb      	ldr	r3, [r7, #8]
 80245b2:	689d      	ldr	r5, [r3, #8]
			 _M_get_Tp_allocator());
 80245b4:	68fb      	ldr	r3, [r7, #12]
 80245b6:	4618      	mov	r0, r3
 80245b8:	f7fe fec3 	bl	8023342 <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 80245bc:	4603      	mov	r3, r0
	   std::_Destroy(__first._M_cur, __first._M_last,
 80245be:	461a      	mov	r2, r3
 80245c0:	4629      	mov	r1, r5
 80245c2:	4620      	mov	r0, r4
 80245c4:	f000 ffb2 	bl	802552c <_ZSt8_DestroyIP7RequestS0_EvT_S2_RSaIT0_E>
	   std::_Destroy(__last._M_first, __last._M_cur,
 80245c8:	687b      	ldr	r3, [r7, #4]
 80245ca:	685c      	ldr	r4, [r3, #4]
 80245cc:	687b      	ldr	r3, [r7, #4]
 80245ce:	681d      	ldr	r5, [r3, #0]
			 _M_get_Tp_allocator());
 80245d0:	68fb      	ldr	r3, [r7, #12]
 80245d2:	4618      	mov	r0, r3
 80245d4:	f7fe feb5 	bl	8023342 <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 80245d8:	4603      	mov	r3, r0
	   std::_Destroy(__last._M_first, __last._M_cur,
 80245da:	461a      	mov	r2, r3
 80245dc:	4629      	mov	r1, r5
 80245de:	4620      	mov	r0, r4
 80245e0:	f000 ffa4 	bl	802552c <_ZSt8_DestroyIP7RequestS0_EvT_S2_RSaIT0_E>
	 }
       else
	 std::_Destroy(__first._M_cur, __last._M_cur,
		       _M_get_Tp_allocator());
     }
 80245e4:	e00d      	b.n	8024602 <_ZNSt5dequeI7RequestSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_+0xb4>
	 std::_Destroy(__first._M_cur, __last._M_cur,
 80245e6:	68bb      	ldr	r3, [r7, #8]
 80245e8:	681c      	ldr	r4, [r3, #0]
 80245ea:	687b      	ldr	r3, [r7, #4]
 80245ec:	681d      	ldr	r5, [r3, #0]
		       _M_get_Tp_allocator());
 80245ee:	68fb      	ldr	r3, [r7, #12]
 80245f0:	4618      	mov	r0, r3
 80245f2:	f7fe fea6 	bl	8023342 <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 80245f6:	4603      	mov	r3, r0
	 std::_Destroy(__first._M_cur, __last._M_cur,
 80245f8:	461a      	mov	r2, r3
 80245fa:	4629      	mov	r1, r5
 80245fc:	4620      	mov	r0, r4
 80245fe:	f000 ff95 	bl	802552c <_ZSt8_DestroyIP7RequestS0_EvT_S2_RSaIT0_E>
     }
 8024602:	bf00      	nop
 8024604:	3718      	adds	r7, #24
 8024606:	46bd      	mov	sp, r7
 8024608:	bdb0      	pop	{r4, r5, r7, pc}

0802460a <_ZNSt11_Deque_baseI8ResponceSaIS0_EE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 802460a:	b580      	push	{r7, lr}
 802460c:	b082      	sub	sp, #8
 802460e:	af00      	add	r7, sp, #0
 8024610:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8024612:	6878      	ldr	r0, [r7, #4]
 8024614:	f000 ff98 	bl	8025548 <_ZNSaI8ResponceEC1Ev>
 8024618:	687b      	ldr	r3, [r7, #4]
 802461a:	4618      	mov	r0, r3
 802461c:	f000 ffa0 	bl	8025560 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_Deque_impl_dataC1Ev>
	{ }
 8024620:	687b      	ldr	r3, [r7, #4]
 8024622:	4618      	mov	r0, r3
 8024624:	3708      	adds	r7, #8
 8024626:	46bd      	mov	sp, r7
 8024628:	bd80      	pop	{r7, pc}

0802462a <_ZNSaI8ResponceED1Ev>:
 802462a:	b580      	push	{r7, lr}
 802462c:	b082      	sub	sp, #8
 802462e:	af00      	add	r7, sp, #0
 8024630:	6078      	str	r0, [r7, #4]
 8024632:	6878      	ldr	r0, [r7, #4]
 8024634:	f000 ffad 	bl	8025592 <_ZN9__gnu_cxx13new_allocatorI8ResponceED1Ev>
 8024638:	687b      	ldr	r3, [r7, #4]
 802463a:	4618      	mov	r0, r3
 802463c:	3708      	adds	r7, #8
 802463e:	46bd      	mov	sp, r7
 8024640:	bd80      	pop	{r7, pc}

08024642 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 8024642:	b590      	push	{r4, r7, lr}
 8024644:	b089      	sub	sp, #36	; 0x24
 8024646:	af00      	add	r7, sp, #0
 8024648:	6078      	str	r0, [r7, #4]
 802464a:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 802464c:	2010      	movs	r0, #16
 802464e:	f7fc fc18 	bl	8020e82 <_ZSt16__deque_buf_sizej>
 8024652:	4602      	mov	r2, r0
 8024654:	683b      	ldr	r3, [r7, #0]
 8024656:	fbb3 f3f2 	udiv	r3, r3, r2
 802465a:	3301      	adds	r3, #1
 802465c:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 802465e:	2308      	movs	r3, #8
 8024660:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 8024662:	69fb      	ldr	r3, [r7, #28]
 8024664:	3302      	adds	r3, #2
 8024666:	613b      	str	r3, [r7, #16]
 8024668:	f107 0210 	add.w	r2, r7, #16
 802466c:	f107 030c 	add.w	r3, r7, #12
 8024670:	4611      	mov	r1, r2
 8024672:	4618      	mov	r0, r3
 8024674:	f7ff fec5 	bl	8024402 <_ZSt3maxIjERKT_S2_S2_>
 8024678:	4603      	mov	r3, r0
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 802467a:	681a      	ldr	r2, [r3, #0]
 802467c:	687b      	ldr	r3, [r7, #4]
 802467e:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 8024680:	687b      	ldr	r3, [r7, #4]
 8024682:	685b      	ldr	r3, [r3, #4]
 8024684:	4619      	mov	r1, r3
 8024686:	6878      	ldr	r0, [r7, #4]
 8024688:	f000 ff8e 	bl	80255a8 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE15_M_allocate_mapEj>
 802468c:	4602      	mov	r2, r0
 802468e:	687b      	ldr	r3, [r7, #4]
 8024690:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 8024692:	687b      	ldr	r3, [r7, #4]
 8024694:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 8024696:	687b      	ldr	r3, [r7, #4]
 8024698:	6859      	ldr	r1, [r3, #4]
 802469a:	69fb      	ldr	r3, [r7, #28]
 802469c:	1acb      	subs	r3, r1, r3
 802469e:	085b      	lsrs	r3, r3, #1
 80246a0:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 80246a2:	4413      	add	r3, r2
 80246a4:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 80246a6:	69fb      	ldr	r3, [r7, #28]
 80246a8:	009b      	lsls	r3, r3, #2
 80246aa:	69ba      	ldr	r2, [r7, #24]
 80246ac:	4413      	add	r3, r2
 80246ae:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 80246b0:	697a      	ldr	r2, [r7, #20]
 80246b2:	69b9      	ldr	r1, [r7, #24]
 80246b4:	6878      	ldr	r0, [r7, #4]
 80246b6:	f000 ff94 	bl	80255e2 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE15_M_create_nodesEPPS0_S4_>
      this->_M_impl._M_start._M_set_node(__nstart);
 80246ba:	687b      	ldr	r3, [r7, #4]
 80246bc:	3308      	adds	r3, #8
 80246be:	69b9      	ldr	r1, [r7, #24]
 80246c0:	4618      	mov	r0, r3
 80246c2:	f000 ffa8 	bl	8025616 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 80246c6:	687b      	ldr	r3, [r7, #4]
 80246c8:	f103 0218 	add.w	r2, r3, #24
 80246cc:	697b      	ldr	r3, [r7, #20]
 80246ce:	3b04      	subs	r3, #4
 80246d0:	4619      	mov	r1, r3
 80246d2:	4610      	mov	r0, r2
 80246d4:	f000 ff9f 	bl	8025616 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 80246d8:	687b      	ldr	r3, [r7, #4]
 80246da:	68da      	ldr	r2, [r3, #12]
 80246dc:	687b      	ldr	r3, [r7, #4]
 80246de:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 80246e0:	687b      	ldr	r3, [r7, #4]
 80246e2:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 80246e4:	2010      	movs	r0, #16
 80246e6:	f7fc fbcc 	bl	8020e82 <_ZSt16__deque_buf_sizej>
 80246ea:	4602      	mov	r2, r0
 80246ec:	683b      	ldr	r3, [r7, #0]
 80246ee:	fbb3 f1f2 	udiv	r1, r3, r2
 80246f2:	fb01 f202 	mul.w	r2, r1, r2
 80246f6:	1a9b      	subs	r3, r3, r2
					+ __num_elements
 80246f8:	011b      	lsls	r3, r3, #4
 80246fa:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 80246fc:	687b      	ldr	r3, [r7, #4]
 80246fe:	619a      	str	r2, [r3, #24]
    }
 8024700:	bf00      	nop
 8024702:	3724      	adds	r7, #36	; 0x24
 8024704:	46bd      	mov	sp, r7
 8024706:	bd90      	pop	{r4, r7, pc}

08024708 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_M_destroy_nodesEPPS0_S4_>:
    _Deque_base<_Tp, _Alloc>::
 8024708:	b580      	push	{r7, lr}
 802470a:	b086      	sub	sp, #24
 802470c:	af00      	add	r7, sp, #0
 802470e:	60f8      	str	r0, [r7, #12]
 8024710:	60b9      	str	r1, [r7, #8]
 8024712:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8024714:	68bb      	ldr	r3, [r7, #8]
 8024716:	617b      	str	r3, [r7, #20]
 8024718:	697a      	ldr	r2, [r7, #20]
 802471a:	687b      	ldr	r3, [r7, #4]
 802471c:	429a      	cmp	r2, r3
 802471e:	d209      	bcs.n	8024734 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_M_destroy_nodesEPPS0_S4_+0x2c>
	_M_deallocate_node(*__n);
 8024720:	697b      	ldr	r3, [r7, #20]
 8024722:	681b      	ldr	r3, [r3, #0]
 8024724:	4619      	mov	r1, r3
 8024726:	68f8      	ldr	r0, [r7, #12]
 8024728:	f000 ff8e 	bl	8025648 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE18_M_deallocate_nodeEPS0_>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 802472c:	697b      	ldr	r3, [r7, #20]
 802472e:	3304      	adds	r3, #4
 8024730:	617b      	str	r3, [r7, #20]
 8024732:	e7f1      	b.n	8024718 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_M_destroy_nodesEPPS0_S4_+0x10>
    }
 8024734:	bf00      	nop
 8024736:	3718      	adds	r7, #24
 8024738:	46bd      	mov	sp, r7
 802473a:	bd80      	pop	{r7, pc}

0802473c <_ZNSt11_Deque_baseI8ResponceSaIS0_EE17_M_deallocate_mapEPPS0_j>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 802473c:	b580      	push	{r7, lr}
 802473e:	b086      	sub	sp, #24
 8024740:	af00      	add	r7, sp, #0
 8024742:	60f8      	str	r0, [r7, #12]
 8024744:	60b9      	str	r1, [r7, #8]
 8024746:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8024748:	f107 0314 	add.w	r3, r7, #20
 802474c:	68f9      	ldr	r1, [r7, #12]
 802474e:	4618      	mov	r0, r3
 8024750:	f000 ff8d 	bl	802566e <_ZNKSt11_Deque_baseI8ResponceSaIS0_EE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 8024754:	f107 0314 	add.w	r3, r7, #20
 8024758:	687a      	ldr	r2, [r7, #4]
 802475a:	68b9      	ldr	r1, [r7, #8]
 802475c:	4618      	mov	r0, r3
 802475e:	f000 ffa3 	bl	80256a8 <_ZNSt16allocator_traitsISaIP8ResponceEE10deallocateERS2_PS1_j>
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8024762:	f107 0314 	add.w	r3, r7, #20
 8024766:	4618      	mov	r0, r3
 8024768:	f000 ff92 	bl	8025690 <_ZNSaIP8ResponceED1Ev>
      }
 802476c:	bf00      	nop
 802476e:	3718      	adds	r7, #24
 8024770:	46bd      	mov	sp, r7
 8024772:	bd80      	pop	{r7, pc}

08024774 <_ZNSt5dequeI8ResponceSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_>:
     deque<_Tp, _Alloc>::
 8024774:	b5b0      	push	{r4, r5, r7, lr}
 8024776:	b086      	sub	sp, #24
 8024778:	af00      	add	r7, sp, #0
 802477a:	60f8      	str	r0, [r7, #12]
 802477c:	60b9      	str	r1, [r7, #8]
 802477e:	607a      	str	r2, [r7, #4]
       for (_Map_pointer __node = __first._M_node + 1;
 8024780:	68bb      	ldr	r3, [r7, #8]
 8024782:	68db      	ldr	r3, [r3, #12]
 8024784:	3304      	adds	r3, #4
 8024786:	617b      	str	r3, [r7, #20]
	    __node < __last._M_node; ++__node)
 8024788:	687b      	ldr	r3, [r7, #4]
 802478a:	68db      	ldr	r3, [r3, #12]
 802478c:	697a      	ldr	r2, [r7, #20]
 802478e:	429a      	cmp	r2, r3
 8024790:	d216      	bcs.n	80247c0 <_ZNSt5dequeI8ResponceSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_+0x4c>
	 std::_Destroy(*__node, *__node + _S_buffer_size(),
 8024792:	697b      	ldr	r3, [r7, #20]
 8024794:	681d      	ldr	r5, [r3, #0]
 8024796:	697b      	ldr	r3, [r7, #20]
 8024798:	681c      	ldr	r4, [r3, #0]
 802479a:	f000 ff94 	bl	80256c6 <_ZNSt5dequeI8ResponceSaIS0_EE14_S_buffer_sizeEv>
 802479e:	4603      	mov	r3, r0
 80247a0:	011b      	lsls	r3, r3, #4
 80247a2:	441c      	add	r4, r3
		       _M_get_Tp_allocator());
 80247a4:	68fb      	ldr	r3, [r7, #12]
 80247a6:	4618      	mov	r0, r3
 80247a8:	f7fe fe6e 	bl	8023488 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 80247ac:	4603      	mov	r3, r0
	 std::_Destroy(*__node, *__node + _S_buffer_size(),
 80247ae:	461a      	mov	r2, r3
 80247b0:	4621      	mov	r1, r4
 80247b2:	4628      	mov	r0, r5
 80247b4:	f000 ff8f 	bl	80256d6 <_ZSt8_DestroyIP8ResponceS0_EvT_S2_RSaIT0_E>
       for (_Map_pointer __node = __first._M_node + 1;
 80247b8:	697b      	ldr	r3, [r7, #20]
 80247ba:	3304      	adds	r3, #4
 80247bc:	617b      	str	r3, [r7, #20]
 80247be:	e7e3      	b.n	8024788 <_ZNSt5dequeI8ResponceSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_+0x14>
       if (__first._M_node != __last._M_node)
 80247c0:	68bb      	ldr	r3, [r7, #8]
 80247c2:	68da      	ldr	r2, [r3, #12]
 80247c4:	687b      	ldr	r3, [r7, #4]
 80247c6:	68db      	ldr	r3, [r3, #12]
 80247c8:	429a      	cmp	r2, r3
 80247ca:	d01c      	beq.n	8024806 <_ZNSt5dequeI8ResponceSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_+0x92>
	   std::_Destroy(__first._M_cur, __first._M_last,
 80247cc:	68bb      	ldr	r3, [r7, #8]
 80247ce:	681c      	ldr	r4, [r3, #0]
 80247d0:	68bb      	ldr	r3, [r7, #8]
 80247d2:	689d      	ldr	r5, [r3, #8]
			 _M_get_Tp_allocator());
 80247d4:	68fb      	ldr	r3, [r7, #12]
 80247d6:	4618      	mov	r0, r3
 80247d8:	f7fe fe56 	bl	8023488 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 80247dc:	4603      	mov	r3, r0
	   std::_Destroy(__first._M_cur, __first._M_last,
 80247de:	461a      	mov	r2, r3
 80247e0:	4629      	mov	r1, r5
 80247e2:	4620      	mov	r0, r4
 80247e4:	f000 ff77 	bl	80256d6 <_ZSt8_DestroyIP8ResponceS0_EvT_S2_RSaIT0_E>
	   std::_Destroy(__last._M_first, __last._M_cur,
 80247e8:	687b      	ldr	r3, [r7, #4]
 80247ea:	685c      	ldr	r4, [r3, #4]
 80247ec:	687b      	ldr	r3, [r7, #4]
 80247ee:	681d      	ldr	r5, [r3, #0]
			 _M_get_Tp_allocator());
 80247f0:	68fb      	ldr	r3, [r7, #12]
 80247f2:	4618      	mov	r0, r3
 80247f4:	f7fe fe48 	bl	8023488 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 80247f8:	4603      	mov	r3, r0
	   std::_Destroy(__last._M_first, __last._M_cur,
 80247fa:	461a      	mov	r2, r3
 80247fc:	4629      	mov	r1, r5
 80247fe:	4620      	mov	r0, r4
 8024800:	f000 ff69 	bl	80256d6 <_ZSt8_DestroyIP8ResponceS0_EvT_S2_RSaIT0_E>
     }
 8024804:	e00d      	b.n	8024822 <_ZNSt5dequeI8ResponceSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_+0xae>
	 std::_Destroy(__first._M_cur, __last._M_cur,
 8024806:	68bb      	ldr	r3, [r7, #8]
 8024808:	681c      	ldr	r4, [r3, #0]
 802480a:	687b      	ldr	r3, [r7, #4]
 802480c:	681d      	ldr	r5, [r3, #0]
		       _M_get_Tp_allocator());
 802480e:	68fb      	ldr	r3, [r7, #12]
 8024810:	4618      	mov	r0, r3
 8024812:	f7fe fe39 	bl	8023488 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 8024816:	4603      	mov	r3, r0
	 std::_Destroy(__first._M_cur, __last._M_cur,
 8024818:	461a      	mov	r2, r3
 802481a:	4629      	mov	r1, r5
 802481c:	4620      	mov	r0, r4
 802481e:	f000 ff5a 	bl	80256d6 <_ZSt8_DestroyIP8ResponceS0_EvT_S2_RSaIT0_E>
     }
 8024822:	bf00      	nop
 8024824:	3718      	adds	r7, #24
 8024826:	46bd      	mov	sp, r7
 8024828:	bdb0      	pop	{r4, r5, r7, pc}

0802482a <_ZN9__gnu_cxx13new_allocatorIhEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 802482a:	b480      	push	{r7}
 802482c:	b083      	sub	sp, #12
 802482e:	af00      	add	r7, sp, #0
 8024830:	6078      	str	r0, [r7, #4]
 8024832:	687b      	ldr	r3, [r7, #4]
 8024834:	4618      	mov	r0, r3
 8024836:	370c      	adds	r7, #12
 8024838:	46bd      	mov	sp, r7
 802483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802483e:	4770      	bx	lr

08024840 <_ZNSt16allocator_traitsISaIhEE10deallocateERS0_Phj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8024840:	b580      	push	{r7, lr}
 8024842:	b084      	sub	sp, #16
 8024844:	af00      	add	r7, sp, #0
 8024846:	60f8      	str	r0, [r7, #12]
 8024848:	60b9      	str	r1, [r7, #8]
 802484a:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 802484c:	687a      	ldr	r2, [r7, #4]
 802484e:	68b9      	ldr	r1, [r7, #8]
 8024850:	68f8      	ldr	r0, [r7, #12]
 8024852:	f000 ff4e 	bl	80256f2 <_ZN9__gnu_cxx13new_allocatorIhE10deallocateEPhj>
 8024856:	bf00      	nop
 8024858:	3710      	adds	r7, #16
 802485a:	46bd      	mov	sp, r7
 802485c:	bd80      	pop	{r7, pc}

0802485e <_ZSt8_DestroyIPhEvT_S1_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 802485e:	b580      	push	{r7, lr}
 8024860:	b082      	sub	sp, #8
 8024862:	af00      	add	r7, sp, #0
 8024864:	6078      	str	r0, [r7, #4]
 8024866:	6039      	str	r1, [r7, #0]
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 8024868:	6839      	ldr	r1, [r7, #0]
 802486a:	6878      	ldr	r0, [r7, #4]
 802486c:	f000 ff4f 	bl	802570e <_ZNSt12_Destroy_auxILb1EE9__destroyIPhEEvT_S3_>
    }
 8024870:	bf00      	nop
 8024872:	3708      	adds	r7, #8
 8024874:	46bd      	mov	sp, r7
 8024876:	bd80      	pop	{r7, pc}

08024878 <_ZN9__gnu_cxx13new_allocatorI7RequestE9constructIS1_JS1_EEEvPT_DpOT0_>:
      { return _M_max_size(); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 8024878:	b590      	push	{r4, r7, lr}
 802487a:	b085      	sub	sp, #20
 802487c:	af00      	add	r7, sp, #0
 802487e:	60f8      	str	r0, [r7, #12]
 8024880:	60b9      	str	r1, [r7, #8]
 8024882:	607a      	str	r2, [r7, #4]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8024884:	6878      	ldr	r0, [r7, #4]
 8024886:	f7fe fe9c 	bl	80235c2 <_ZSt7forwardI7RequestEOT_RNSt16remove_referenceIS1_E4typeE>
 802488a:	4604      	mov	r4, r0
 802488c:	68bb      	ldr	r3, [r7, #8]
 802488e:	4619      	mov	r1, r3
 8024890:	2014      	movs	r0, #20
 8024892:	f7fc faea 	bl	8020e6a <_ZnwjPv>
 8024896:	4603      	mov	r3, r0
 8024898:	4621      	mov	r1, r4
 802489a:	4618      	mov	r0, r3
 802489c:	f7fc ff99 	bl	80217d2 <_ZN7RequestC1EOS_>
 80248a0:	bf00      	nop
 80248a2:	3714      	adds	r7, #20
 80248a4:	46bd      	mov	sp, r7
 80248a6:	bd90      	pop	{r4, r7, pc}

080248a8 <_ZNKSt5dequeI7RequestSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80248a8:	b580      	push	{r7, lr}
 80248aa:	b082      	sub	sp, #8
 80248ac:	af00      	add	r7, sp, #0
 80248ae:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 80248b0:	687b      	ldr	r3, [r7, #4]
 80248b2:	4618      	mov	r0, r3
 80248b4:	f000 fdff 	bl	80254b6 <_ZNKSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 80248b8:	4603      	mov	r3, r0
 80248ba:	4618      	mov	r0, r3
 80248bc:	f000 ff32 	bl	8025724 <_ZNSt5dequeI7RequestSaIS0_EE11_S_max_sizeERKS1_>
 80248c0:	4603      	mov	r3, r0
 80248c2:	4618      	mov	r0, r3
 80248c4:	3708      	adds	r7, #8
 80248c6:	46bd      	mov	sp, r7
 80248c8:	bd80      	pop	{r7, pc}

080248ca <_ZNSt5dequeI7RequestSaIS0_EE22_M_reserve_map_at_backEj>:
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 80248ca:	b580      	push	{r7, lr}
 80248cc:	b082      	sub	sp, #8
 80248ce:	af00      	add	r7, sp, #0
 80248d0:	6078      	str	r0, [r7, #4]
 80248d2:	6039      	str	r1, [r7, #0]
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 80248d4:	683b      	ldr	r3, [r7, #0]
 80248d6:	1c5a      	adds	r2, r3, #1
 80248d8:	687b      	ldr	r3, [r7, #4]
 80248da:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 80248dc:	6879      	ldr	r1, [r7, #4]
 80248de:	6a48      	ldr	r0, [r1, #36]	; 0x24
 80248e0:	6879      	ldr	r1, [r7, #4]
 80248e2:	6809      	ldr	r1, [r1, #0]
 80248e4:	1a41      	subs	r1, r0, r1
 80248e6:	1089      	asrs	r1, r1, #2
 80248e8:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 80248ea:	429a      	cmp	r2, r3
 80248ec:	d904      	bls.n	80248f8 <_ZNSt5dequeI7RequestSaIS0_EE22_M_reserve_map_at_backEj+0x2e>
	  _M_reallocate_map(__nodes_to_add, false);
 80248ee:	2200      	movs	r2, #0
 80248f0:	6839      	ldr	r1, [r7, #0]
 80248f2:	6878      	ldr	r0, [r7, #4]
 80248f4:	f000 ff30 	bl	8025758 <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb>
      }
 80248f8:	bf00      	nop
 80248fa:	3708      	adds	r7, #8
 80248fc:	46bd      	mov	sp, r7
 80248fe:	bd80      	pop	{r7, pc}

08024900 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_M_allocate_nodeEv>:
      _M_allocate_node()
 8024900:	b590      	push	{r4, r7, lr}
 8024902:	b083      	sub	sp, #12
 8024904:	af00      	add	r7, sp, #0
 8024906:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 8024908:	687c      	ldr	r4, [r7, #4]
 802490a:	2014      	movs	r0, #20
 802490c:	f7fc fab9 	bl	8020e82 <_ZSt16__deque_buf_sizej>
 8024910:	4603      	mov	r3, r0
 8024912:	4619      	mov	r1, r3
 8024914:	4620      	mov	r0, r4
 8024916:	f000 ffb9 	bl	802588c <_ZNSt16allocator_traitsISaI7RequestEE8allocateERS1_j>
 802491a:	4603      	mov	r3, r0
      }
 802491c:	4618      	mov	r0, r3
 802491e:	370c      	adds	r7, #12
 8024920:	46bd      	mov	sp, r7
 8024922:	bd90      	pop	{r4, r7, pc}

08024924 <_ZNKSt12_Vector_baseIhSaIhEE13get_allocatorEv>:
      get_allocator() const _GLIBCXX_NOEXCEPT
 8024924:	b580      	push	{r7, lr}
 8024926:	b082      	sub	sp, #8
 8024928:	af00      	add	r7, sp, #0
 802492a:	6078      	str	r0, [r7, #4]
 802492c:	6039      	str	r1, [r7, #0]
      { return allocator_type(_M_get_Tp_allocator()); }
 802492e:	6838      	ldr	r0, [r7, #0]
 8024930:	f7ff f8ff 	bl	8023b32 <_ZNKSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8024934:	4603      	mov	r3, r0
 8024936:	4619      	mov	r1, r3
 8024938:	6878      	ldr	r0, [r7, #4]
 802493a:	f7fe ff69 	bl	8023810 <_ZNSaIhEC1ERKS_>
 802493e:	6878      	ldr	r0, [r7, #4]
 8024940:	3708      	adds	r7, #8
 8024942:	46bd      	mov	sp, r7
 8024944:	bd80      	pop	{r7, pc}

08024946 <_ZNSt6vectorIhSaIhEEC1ERKS0_>:
      vector(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 8024946:	b580      	push	{r7, lr}
 8024948:	b082      	sub	sp, #8
 802494a:	af00      	add	r7, sp, #0
 802494c:	6078      	str	r0, [r7, #4]
 802494e:	6039      	str	r1, [r7, #0]
      : _Base(__a) { }
 8024950:	687b      	ldr	r3, [r7, #4]
 8024952:	6839      	ldr	r1, [r7, #0]
 8024954:	4618      	mov	r0, r3
 8024956:	f000 ffa8 	bl	80258aa <_ZNSt12_Vector_baseIhSaIhEEC1ERKS0_>
 802495a:	687b      	ldr	r3, [r7, #4]
 802495c:	4618      	mov	r0, r3
 802495e:	3708      	adds	r7, #8
 8024960:	46bd      	mov	sp, r7
 8024962:	bd80      	pop	{r7, pc}

08024964 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_data12_M_swap_dataERS2_>:
	_M_swap_data(_Vector_impl_data& __x) _GLIBCXX_NOEXCEPT
 8024964:	b580      	push	{r7, lr}
 8024966:	b086      	sub	sp, #24
 8024968:	af00      	add	r7, sp, #0
 802496a:	6078      	str	r0, [r7, #4]
 802496c:	6039      	str	r1, [r7, #0]
	  _Vector_impl_data __tmp;
 802496e:	f107 030c 	add.w	r3, r7, #12
 8024972:	4618      	mov	r0, r3
 8024974:	f7fe fdda 	bl	802352c <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1Ev>
	  __tmp._M_copy_data(*this);
 8024978:	f107 030c 	add.w	r3, r7, #12
 802497c:	6879      	ldr	r1, [r7, #4]
 802497e:	4618      	mov	r0, r3
 8024980:	f000 ffa2 	bl	80258c8 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_data12_M_copy_dataERKS2_>
	  _M_copy_data(__x);
 8024984:	6839      	ldr	r1, [r7, #0]
 8024986:	6878      	ldr	r0, [r7, #4]
 8024988:	f000 ff9e 	bl	80258c8 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_data12_M_copy_dataERKS2_>
	  __x._M_copy_data(__tmp);
 802498c:	f107 030c 	add.w	r3, r7, #12
 8024990:	4619      	mov	r1, r3
 8024992:	6838      	ldr	r0, [r7, #0]
 8024994:	f000 ff98 	bl	80258c8 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_data12_M_copy_dataERKS2_>
	}
 8024998:	bf00      	nop
 802499a:	3718      	adds	r7, #24
 802499c:	46bd      	mov	sp, r7
 802499e:	bd80      	pop	{r7, pc}

080249a0 <_ZSt15__alloc_on_moveISaIhEEvRT_S2_>:
    __alloc_on_move(_Alloc& __one, _Alloc& __two)
 80249a0:	b580      	push	{r7, lr}
 80249a2:	b082      	sub	sp, #8
 80249a4:	af00      	add	r7, sp, #0
 80249a6:	6078      	str	r0, [r7, #4]
 80249a8:	6039      	str	r1, [r7, #0]
      __do_alloc_on_move(__one, __two, __pocma());
 80249aa:	461a      	mov	r2, r3
 80249ac:	6839      	ldr	r1, [r7, #0]
 80249ae:	6878      	ldr	r0, [r7, #4]
 80249b0:	f000 ffa1 	bl	80258f6 <_ZSt18__do_alloc_on_moveISaIhEEvRT_S2_St17integral_constantIbLb1EE>
    }
 80249b4:	bf00      	nop
 80249b6:	3708      	adds	r7, #8
 80249b8:	46bd      	mov	sp, r7
 80249ba:	bd80      	pop	{r7, pc}

080249bc <_ZNSt16allocator_traitsISaI8ResponceEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80249bc:	b580      	push	{r7, lr}
 80249be:	b084      	sub	sp, #16
 80249c0:	af00      	add	r7, sp, #0
 80249c2:	60f8      	str	r0, [r7, #12]
 80249c4:	60b9      	str	r1, [r7, #8]
 80249c6:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 80249c8:	6878      	ldr	r0, [r7, #4]
 80249ca:	f7fe feba 	bl	8023742 <_ZSt7forwardI8ResponceEOT_RNSt16remove_referenceIS1_E4typeE>
 80249ce:	4603      	mov	r3, r0
 80249d0:	461a      	mov	r2, r3
 80249d2:	68b9      	ldr	r1, [r7, #8]
 80249d4:	68f8      	ldr	r0, [r7, #12]
 80249d6:	f000 ff9b 	bl	8025910 <_ZN9__gnu_cxx13new_allocatorI8ResponceE9constructIS1_JS1_EEEvPT_DpOT0_>
	}
 80249da:	bf00      	nop
 80249dc:	3710      	adds	r7, #16
 80249de:	46bd      	mov	sp, r7
 80249e0:	bd80      	pop	{r7, pc}
	...

080249e4 <_ZNSt5dequeI8ResponceSaIS0_EE16_M_push_back_auxIJS0_EEEvDpOT_>:
      deque<_Tp, _Alloc>::
 80249e4:	b5b0      	push	{r4, r5, r7, lr}
 80249e6:	b082      	sub	sp, #8
 80249e8:	af00      	add	r7, sp, #0
 80249ea:	6078      	str	r0, [r7, #4]
 80249ec:	6039      	str	r1, [r7, #0]
	if (size() == max_size())
 80249ee:	6878      	ldr	r0, [r7, #4]
 80249f0:	f7ff f9ba 	bl	8023d68 <_ZNKSt5dequeI8ResponceSaIS0_EE4sizeEv>
 80249f4:	4604      	mov	r4, r0
 80249f6:	6878      	ldr	r0, [r7, #4]
 80249f8:	f000 ffa2 	bl	8025940 <_ZNKSt5dequeI8ResponceSaIS0_EE8max_sizeEv>
 80249fc:	4603      	mov	r3, r0
 80249fe:	429c      	cmp	r4, r3
 8024a00:	bf0c      	ite	eq
 8024a02:	2301      	moveq	r3, #1
 8024a04:	2300      	movne	r3, #0
 8024a06:	b2db      	uxtb	r3, r3
 8024a08:	2b00      	cmp	r3, #0
 8024a0a:	d002      	beq.n	8024a12 <_ZNSt5dequeI8ResponceSaIS0_EE16_M_push_back_auxIJS0_EEEvDpOT_+0x2e>
	  __throw_length_error(
 8024a0c:	4816      	ldr	r0, [pc, #88]	; (8024a68 <_ZNSt5dequeI8ResponceSaIS0_EE16_M_push_back_auxIJS0_EEEvDpOT_+0x84>)
 8024a0e:	f018 fa3f 	bl	803ce90 <_ZSt20__throw_length_errorPKc>
	_M_reserve_map_at_back();
 8024a12:	2101      	movs	r1, #1
 8024a14:	6878      	ldr	r0, [r7, #4]
 8024a16:	f000 ffa4 	bl	8025962 <_ZNSt5dequeI8ResponceSaIS0_EE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 8024a1a:	687a      	ldr	r2, [r7, #4]
 8024a1c:	687b      	ldr	r3, [r7, #4]
 8024a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024a20:	1d1c      	adds	r4, r3, #4
 8024a22:	4610      	mov	r0, r2
 8024a24:	f000 ffb8 	bl	8025998 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_M_allocate_nodeEv>
 8024a28:	4603      	mov	r3, r0
 8024a2a:	6023      	str	r3, [r4, #0]
	    _Alloc_traits::construct(this->_M_impl,
 8024a2c:	687c      	ldr	r4, [r7, #4]
 8024a2e:	687b      	ldr	r3, [r7, #4]
 8024a30:	699d      	ldr	r5, [r3, #24]
 8024a32:	6838      	ldr	r0, [r7, #0]
 8024a34:	f7fe fe85 	bl	8023742 <_ZSt7forwardI8ResponceEOT_RNSt16remove_referenceIS1_E4typeE>
 8024a38:	4603      	mov	r3, r0
 8024a3a:	461a      	mov	r2, r3
 8024a3c:	4629      	mov	r1, r5
 8024a3e:	4620      	mov	r0, r4
 8024a40:	f7ff ffbc 	bl	80249bc <_ZNSt16allocator_traitsISaI8ResponceEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 8024a44:	687b      	ldr	r3, [r7, #4]
 8024a46:	f103 0218 	add.w	r2, r3, #24
 8024a4a:	687b      	ldr	r3, [r7, #4]
 8024a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024a4e:	3304      	adds	r3, #4
 8024a50:	4619      	mov	r1, r3
 8024a52:	4610      	mov	r0, r2
 8024a54:	f000 fddf 	bl	8025616 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E11_M_set_nodeEPS2_>
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 8024a58:	687b      	ldr	r3, [r7, #4]
 8024a5a:	69da      	ldr	r2, [r3, #28]
 8024a5c:	687b      	ldr	r3, [r7, #4]
 8024a5e:	619a      	str	r2, [r3, #24]
      }
 8024a60:	bf00      	nop
 8024a62:	3708      	adds	r7, #8
 8024a64:	46bd      	mov	sp, r7
 8024a66:	bdb0      	pop	{r4, r5, r7, pc}
 8024a68:	0803e6ac 	.word	0x0803e6ac

08024a6c <_ZSteqRKSt15_Deque_iteratorI8ResponceRS0_PS0_ES5_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8024a6c:	b480      	push	{r7}
 8024a6e:	b083      	sub	sp, #12
 8024a70:	af00      	add	r7, sp, #0
 8024a72:	6078      	str	r0, [r7, #4]
 8024a74:	6039      	str	r1, [r7, #0]
      { return __x._M_cur == __y._M_cur; }
 8024a76:	687b      	ldr	r3, [r7, #4]
 8024a78:	681a      	ldr	r2, [r3, #0]
 8024a7a:	683b      	ldr	r3, [r7, #0]
 8024a7c:	681b      	ldr	r3, [r3, #0]
 8024a7e:	429a      	cmp	r2, r3
 8024a80:	bf0c      	ite	eq
 8024a82:	2301      	moveq	r3, #1
 8024a84:	2300      	movne	r3, #0
 8024a86:	b2db      	uxtb	r3, r3
 8024a88:	4618      	mov	r0, r3
 8024a8a:	370c      	adds	r7, #12
 8024a8c:	46bd      	mov	sp, r7
 8024a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024a92:	4770      	bx	lr

08024a94 <_ZNKSt15_Deque_iteratorI8ResponceRS0_PS0_EdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8024a94:	b480      	push	{r7}
 8024a96:	b083      	sub	sp, #12
 8024a98:	af00      	add	r7, sp, #0
 8024a9a:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 8024a9c:	687b      	ldr	r3, [r7, #4]
 8024a9e:	681b      	ldr	r3, [r3, #0]
 8024aa0:	4618      	mov	r0, r3
 8024aa2:	370c      	adds	r7, #12
 8024aa4:	46bd      	mov	sp, r7
 8024aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024aaa:	4770      	bx	lr

08024aac <_ZN9__gnu_cxx13new_allocatorIhEC1ERKS1_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8024aac:	b480      	push	{r7}
 8024aae:	b083      	sub	sp, #12
 8024ab0:	af00      	add	r7, sp, #0
 8024ab2:	6078      	str	r0, [r7, #4]
 8024ab4:	6039      	str	r1, [r7, #0]
 8024ab6:	687b      	ldr	r3, [r7, #4]
 8024ab8:	4618      	mov	r0, r3
 8024aba:	370c      	adds	r7, #12
 8024abc:	46bd      	mov	sp, r7
 8024abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024ac2:	4770      	bx	lr

08024ac4 <_ZNSt16allocator_traitsISaI8ResponceEE7destroyIS0_EEvRS1_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8024ac4:	b580      	push	{r7, lr}
 8024ac6:	b082      	sub	sp, #8
 8024ac8:	af00      	add	r7, sp, #0
 8024aca:	6078      	str	r0, [r7, #4]
 8024acc:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 8024ace:	6839      	ldr	r1, [r7, #0]
 8024ad0:	6878      	ldr	r0, [r7, #4]
 8024ad2:	f000 ff73 	bl	80259bc <_ZN9__gnu_cxx13new_allocatorI8ResponceE7destroyIS1_EEvPT_>
	}
 8024ad6:	bf00      	nop
 8024ad8:	3708      	adds	r7, #8
 8024ada:	46bd      	mov	sp, r7
 8024adc:	bd80      	pop	{r7, pc}

08024ade <_ZNSt5dequeI8ResponceSaIS0_EE16_M_pop_front_auxEv>:
    void deque<_Tp, _Alloc>::
 8024ade:	b580      	push	{r7, lr}
 8024ae0:	b082      	sub	sp, #8
 8024ae2:	af00      	add	r7, sp, #0
 8024ae4:	6078      	str	r0, [r7, #4]
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8024ae6:	687b      	ldr	r3, [r7, #4]
 8024ae8:	4618      	mov	r0, r3
 8024aea:	f7fe fccd 	bl	8023488 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 8024aee:	4602      	mov	r2, r0
 8024af0:	687b      	ldr	r3, [r7, #4]
 8024af2:	689b      	ldr	r3, [r3, #8]
 8024af4:	4619      	mov	r1, r3
 8024af6:	4610      	mov	r0, r2
 8024af8:	f7ff ffe4 	bl	8024ac4 <_ZNSt16allocator_traitsISaI8ResponceEE7destroyIS0_EEvRS1_PT_>
      _M_deallocate_node(this->_M_impl._M_start._M_first);
 8024afc:	687a      	ldr	r2, [r7, #4]
 8024afe:	687b      	ldr	r3, [r7, #4]
 8024b00:	68db      	ldr	r3, [r3, #12]
 8024b02:	4619      	mov	r1, r3
 8024b04:	4610      	mov	r0, r2
 8024b06:	f000 fd9f 	bl	8025648 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE18_M_deallocate_nodeEPS0_>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 8024b0a:	687b      	ldr	r3, [r7, #4]
 8024b0c:	f103 0208 	add.w	r2, r3, #8
 8024b10:	687b      	ldr	r3, [r7, #4]
 8024b12:	695b      	ldr	r3, [r3, #20]
 8024b14:	3304      	adds	r3, #4
 8024b16:	4619      	mov	r1, r3
 8024b18:	4610      	mov	r0, r2
 8024b1a:	f000 fd7c 	bl	8025616 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 8024b1e:	687b      	ldr	r3, [r7, #4]
 8024b20:	68da      	ldr	r2, [r3, #12]
 8024b22:	687b      	ldr	r3, [r7, #4]
 8024b24:	609a      	str	r2, [r3, #8]
    }
 8024b26:	bf00      	nop
 8024b28:	3708      	adds	r7, #8
 8024b2a:	46bd      	mov	sp, r7
 8024b2c:	bd80      	pop	{r7, pc}

08024b2e <_ZNKSt6vectorIhSaIhEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8024b2e:	b580      	push	{r7, lr}
 8024b30:	b082      	sub	sp, #8
 8024b32:	af00      	add	r7, sp, #0
 8024b34:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8024b36:	687b      	ldr	r3, [r7, #4]
 8024b38:	4618      	mov	r0, r3
 8024b3a:	f7fe fffa 	bl	8023b32 <_ZNKSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8024b3e:	4603      	mov	r3, r0
 8024b40:	4618      	mov	r0, r3
 8024b42:	f000 ff47 	bl	80259d4 <_ZNSt6vectorIhSaIhEE11_S_max_sizeERKS0_>
 8024b46:	4603      	mov	r3, r0
 8024b48:	4618      	mov	r0, r3
 8024b4a:	3708      	adds	r7, #8
 8024b4c:	46bd      	mov	sp, r7
 8024b4e:	bd80      	pop	{r7, pc}

08024b50 <_ZSt27__uninitialized_default_n_aIPhjhET_S1_T0_RSaIT1_E>:
	}
    }

  template<typename _ForwardIterator, typename _Size, typename _Tp>
    inline _ForwardIterator
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n, 
 8024b50:	b580      	push	{r7, lr}
 8024b52:	b084      	sub	sp, #16
 8024b54:	af00      	add	r7, sp, #0
 8024b56:	60f8      	str	r0, [r7, #12]
 8024b58:	60b9      	str	r1, [r7, #8]
 8024b5a:	607a      	str	r2, [r7, #4]
				allocator<_Tp>&)
    { return std::__uninitialized_default_n(__first, __n); }
 8024b5c:	68b9      	ldr	r1, [r7, #8]
 8024b5e:	68f8      	ldr	r0, [r7, #12]
 8024b60:	f000 ff52 	bl	8025a08 <_ZSt25__uninitialized_default_nIPhjET_S1_T0_>
 8024b64:	4603      	mov	r3, r0
 8024b66:	4618      	mov	r0, r3
 8024b68:	3710      	adds	r7, #16
 8024b6a:	46bd      	mov	sp, r7
 8024b6c:	bd80      	pop	{r7, pc}

08024b6e <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8024b6e:	b590      	push	{r4, r7, lr}
 8024b70:	b087      	sub	sp, #28
 8024b72:	af00      	add	r7, sp, #0
 8024b74:	60f8      	str	r0, [r7, #12]
 8024b76:	60b9      	str	r1, [r7, #8]
 8024b78:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8024b7a:	68f8      	ldr	r0, [r7, #12]
 8024b7c:	f7ff ffd7 	bl	8024b2e <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 8024b80:	4604      	mov	r4, r0
 8024b82:	68f8      	ldr	r0, [r7, #12]
 8024b84:	f7fe f81d 	bl	8022bc2 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8024b88:	4603      	mov	r3, r0
 8024b8a:	1ae2      	subs	r2, r4, r3
 8024b8c:	68bb      	ldr	r3, [r7, #8]
 8024b8e:	429a      	cmp	r2, r3
 8024b90:	bf34      	ite	cc
 8024b92:	2301      	movcc	r3, #1
 8024b94:	2300      	movcs	r3, #0
 8024b96:	b2db      	uxtb	r3, r3
 8024b98:	2b00      	cmp	r3, #0
 8024b9a:	d002      	beq.n	8024ba2 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8024b9c:	6878      	ldr	r0, [r7, #4]
 8024b9e:	f018 f977 	bl	803ce90 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8024ba2:	68f8      	ldr	r0, [r7, #12]
 8024ba4:	f7fe f80d 	bl	8022bc2 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8024ba8:	4604      	mov	r4, r0
 8024baa:	68f8      	ldr	r0, [r7, #12]
 8024bac:	f7fe f809 	bl	8022bc2 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8024bb0:	4603      	mov	r3, r0
 8024bb2:	613b      	str	r3, [r7, #16]
 8024bb4:	f107 0208 	add.w	r2, r7, #8
 8024bb8:	f107 0310 	add.w	r3, r7, #16
 8024bbc:	4611      	mov	r1, r2
 8024bbe:	4618      	mov	r0, r3
 8024bc0:	f7ff fc1f 	bl	8024402 <_ZSt3maxIjERKT_S2_S2_>
 8024bc4:	4603      	mov	r3, r0
 8024bc6:	681b      	ldr	r3, [r3, #0]
 8024bc8:	4423      	add	r3, r4
 8024bca:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8024bcc:	68f8      	ldr	r0, [r7, #12]
 8024bce:	f7fd fff8 	bl	8022bc2 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8024bd2:	4602      	mov	r2, r0
 8024bd4:	697b      	ldr	r3, [r7, #20]
 8024bd6:	4293      	cmp	r3, r2
 8024bd8:	d306      	bcc.n	8024be8 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x7a>
 8024bda:	68f8      	ldr	r0, [r7, #12]
 8024bdc:	f7ff ffa7 	bl	8024b2e <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 8024be0:	4602      	mov	r2, r0
 8024be2:	697b      	ldr	r3, [r7, #20]
 8024be4:	4293      	cmp	r3, r2
 8024be6:	d904      	bls.n	8024bf2 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x84>
 8024be8:	68f8      	ldr	r0, [r7, #12]
 8024bea:	f7ff ffa0 	bl	8024b2e <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 8024bee:	4603      	mov	r3, r0
 8024bf0:	e000      	b.n	8024bf4 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x86>
 8024bf2:	697b      	ldr	r3, [r7, #20]
      }
 8024bf4:	4618      	mov	r0, r3
 8024bf6:	371c      	adds	r7, #28
 8024bf8:	46bd      	mov	sp, r7
 8024bfa:	bd90      	pop	{r4, r7, pc}

08024bfc <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8024bfc:	b580      	push	{r7, lr}
 8024bfe:	b082      	sub	sp, #8
 8024c00:	af00      	add	r7, sp, #0
 8024c02:	6078      	str	r0, [r7, #4]
 8024c04:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8024c06:	683b      	ldr	r3, [r7, #0]
 8024c08:	2b00      	cmp	r3, #0
 8024c0a:	d006      	beq.n	8024c1a <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj+0x1e>
 8024c0c:	687b      	ldr	r3, [r7, #4]
 8024c0e:	6839      	ldr	r1, [r7, #0]
 8024c10:	4618      	mov	r0, r3
 8024c12:	f000 ff09 	bl	8025a28 <_ZNSt16allocator_traitsISaIhEE8allocateERS0_j>
 8024c16:	4603      	mov	r3, r0
 8024c18:	e000      	b.n	8024c1c <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj+0x20>
 8024c1a:	2300      	movs	r3, #0
      }
 8024c1c:	4618      	mov	r0, r3
 8024c1e:	3708      	adds	r7, #8
 8024c20:	46bd      	mov	sp, r7
 8024c22:	bd80      	pop	{r7, pc}

08024c24 <_ZNSt6vectorIhSaIhEE11_S_relocateEPhS2_S2_RS0_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8024c24:	b590      	push	{r4, r7, lr}
 8024c26:	b087      	sub	sp, #28
 8024c28:	af02      	add	r7, sp, #8
 8024c2a:	60f8      	str	r0, [r7, #12]
 8024c2c:	60b9      	str	r1, [r7, #8]
 8024c2e:	607a      	str	r2, [r7, #4]
 8024c30:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8024c32:	f88d 4000 	strb.w	r4, [sp]
 8024c36:	683b      	ldr	r3, [r7, #0]
 8024c38:	687a      	ldr	r2, [r7, #4]
 8024c3a:	68b9      	ldr	r1, [r7, #8]
 8024c3c:	68f8      	ldr	r0, [r7, #12]
 8024c3e:	f000 ff02 	bl	8025a46 <_ZNSt6vectorIhSaIhEE14_S_do_relocateEPhS2_S2_RS0_St17integral_constantIbLb1EE>
 8024c42:	4603      	mov	r3, r0
      }
 8024c44:	4618      	mov	r0, r3
 8024c46:	3714      	adds	r7, #20
 8024c48:	46bd      	mov	sp, r7
 8024c4a:	bd90      	pop	{r4, r7, pc}

08024c4c <_ZSt34__uninitialized_move_if_noexcept_aIPhS0_SaIhEET0_T_S3_S2_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8024c4c:	b590      	push	{r4, r7, lr}
 8024c4e:	b085      	sub	sp, #20
 8024c50:	af00      	add	r7, sp, #0
 8024c52:	60f8      	str	r0, [r7, #12]
 8024c54:	60b9      	str	r1, [r7, #8]
 8024c56:	607a      	str	r2, [r7, #4]
 8024c58:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8024c5a:	68f8      	ldr	r0, [r7, #12]
 8024c5c:	f000 ff05 	bl	8025a6a <_ZSt32__make_move_if_noexcept_iteratorIhSt13move_iteratorIPhEET0_PT_>
 8024c60:	4604      	mov	r4, r0
 8024c62:	68b8      	ldr	r0, [r7, #8]
 8024c64:	f000 ff01 	bl	8025a6a <_ZSt32__make_move_if_noexcept_iteratorIhSt13move_iteratorIPhEET0_PT_>
 8024c68:	4601      	mov	r1, r0
 8024c6a:	683b      	ldr	r3, [r7, #0]
 8024c6c:	687a      	ldr	r2, [r7, #4]
 8024c6e:	4620      	mov	r0, r4
 8024c70:	f000 ff0a 	bl	8025a88 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPhES1_hET0_T_S4_S3_RSaIT1_E>
 8024c74:	4603      	mov	r3, r0
    }
 8024c76:	4618      	mov	r0, r3
 8024c78:	3714      	adds	r7, #20
 8024c7a:	46bd      	mov	sp, r7
 8024c7c:	bd90      	pop	{r4, r7, pc}

08024c7e <_ZN9__gnu_cxx13new_allocatorI7RequestE7destroyIS1_EEvPT_>:

      template<typename _Up>
	void
	destroy(_Up* __p)
 8024c7e:	b580      	push	{r7, lr}
 8024c80:	b082      	sub	sp, #8
 8024c82:	af00      	add	r7, sp, #0
 8024c84:	6078      	str	r0, [r7, #4]
 8024c86:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 8024c88:	6838      	ldr	r0, [r7, #0]
 8024c8a:	f7fc f9b8 	bl	8020ffe <_ZN7RequestD1Ev>
 8024c8e:	bf00      	nop
 8024c90:	3708      	adds	r7, #8
 8024c92:	46bd      	mov	sp, r7
 8024c94:	bd80      	pop	{r7, pc}

08024c96 <_ZSt18__do_alloc_on_copyISaIhEEvRT_RKS1_St17integral_constantIbLb0EE>:
    __do_alloc_on_copy(_Alloc&, const _Alloc&, false_type)
 8024c96:	b480      	push	{r7}
 8024c98:	b085      	sub	sp, #20
 8024c9a:	af00      	add	r7, sp, #0
 8024c9c:	60f8      	str	r0, [r7, #12]
 8024c9e:	60b9      	str	r1, [r7, #8]
 8024ca0:	713a      	strb	r2, [r7, #4]
    { }
 8024ca2:	bf00      	nop
 8024ca4:	3714      	adds	r7, #20
 8024ca6:	46bd      	mov	sp, r7
 8024ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024cac:	4770      	bx	lr

08024cae <_ZN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEC1ERKS2_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8024cae:	b480      	push	{r7}
 8024cb0:	b083      	sub	sp, #12
 8024cb2:	af00      	add	r7, sp, #0
 8024cb4:	6078      	str	r0, [r7, #4]
 8024cb6:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8024cb8:	683b      	ldr	r3, [r7, #0]
 8024cba:	681a      	ldr	r2, [r3, #0]
 8024cbc:	687b      	ldr	r3, [r7, #4]
 8024cbe:	601a      	str	r2, [r3, #0]
 8024cc0:	687b      	ldr	r3, [r7, #4]
 8024cc2:	4618      	mov	r0, r3
 8024cc4:	370c      	adds	r7, #12
 8024cc6:	46bd      	mov	sp, r7
 8024cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024ccc:	4770      	bx	lr

08024cce <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhhET0_T_SA_S9_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8024cce:	b580      	push	{r7, lr}
 8024cd0:	b084      	sub	sp, #16
 8024cd2:	af00      	add	r7, sp, #0
 8024cd4:	60f8      	str	r0, [r7, #12]
 8024cd6:	60b9      	str	r1, [r7, #8]
 8024cd8:	607a      	str	r2, [r7, #4]
 8024cda:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8024cdc:	687a      	ldr	r2, [r7, #4]
 8024cde:	68b9      	ldr	r1, [r7, #8]
 8024ce0:	68f8      	ldr	r0, [r7, #12]
 8024ce2:	f000 fee2 	bl	8025aaa <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET0_T_SA_S9_>
 8024ce6:	4603      	mov	r3, r0
 8024ce8:	4618      	mov	r0, r3
 8024cea:	3710      	adds	r7, #16
 8024cec:	46bd      	mov	sp, r7
 8024cee:	bd80      	pop	{r7, pc}

08024cf0 <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8024cf0:	b480      	push	{r7}
 8024cf2:	b083      	sub	sp, #12
 8024cf4:	af00      	add	r7, sp, #0
 8024cf6:	6078      	str	r0, [r7, #4]
 8024cf8:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8024cfa:	683b      	ldr	r3, [r7, #0]
 8024cfc:	681a      	ldr	r2, [r3, #0]
 8024cfe:	687b      	ldr	r3, [r7, #4]
 8024d00:	601a      	str	r2, [r3, #0]
 8024d02:	687b      	ldr	r3, [r7, #4]
 8024d04:	4618      	mov	r0, r3
 8024d06:	370c      	adds	r7, #12
 8024d08:	46bd      	mov	sp, r7
 8024d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024d0e:	4770      	bx	lr

08024d10 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEET_S8_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8024d10:	b480      	push	{r7}
 8024d12:	b083      	sub	sp, #12
 8024d14:	af00      	add	r7, sp, #0
 8024d16:	6078      	str	r0, [r7, #4]
    { return __it; }
 8024d18:	687b      	ldr	r3, [r7, #4]
 8024d1a:	4618      	mov	r0, r3
 8024d1c:	370c      	adds	r7, #12
 8024d1e:	46bd      	mov	sp, r7
 8024d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024d24:	4770      	bx	lr

08024d26 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEENS1_IPhS6_EEET1_T0_SB_SA_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8024d26:	b5b0      	push	{r4, r5, r7, lr}
 8024d28:	b084      	sub	sp, #16
 8024d2a:	af00      	add	r7, sp, #0
 8024d2c:	60f8      	str	r0, [r7, #12]
 8024d2e:	60b9      	str	r1, [r7, #8]
 8024d30:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8024d32:	68f8      	ldr	r0, [r7, #12]
 8024d34:	f000 fecb 	bl	8025ace <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8024d38:	4604      	mov	r4, r0
 8024d3a:	68b8      	ldr	r0, [r7, #8]
 8024d3c:	f000 fec7 	bl	8025ace <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8024d40:	4605      	mov	r5, r0
 8024d42:	6878      	ldr	r0, [r7, #4]
 8024d44:	f000 fed1 	bl	8025aea <_ZSt12__niter_baseIPhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 8024d48:	4603      	mov	r3, r0
 8024d4a:	461a      	mov	r2, r3
 8024d4c:	4629      	mov	r1, r5
 8024d4e:	4620      	mov	r0, r4
 8024d50:	f000 fed9 	bl	8025b06 <_ZSt14__copy_move_a1ILb0EPKhPhET1_T0_S4_S3_>
 8024d54:	4603      	mov	r3, r0
 8024d56:	4619      	mov	r1, r3
 8024d58:	6878      	ldr	r0, [r7, #4]
 8024d5a:	f000 fee4 	bl	8025b26 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEES2_ET_S7_T0_>
 8024d5e:	4603      	mov	r3, r0
    }
 8024d60:	4618      	mov	r0, r3
 8024d62:	3710      	adds	r7, #16
 8024d64:	46bd      	mov	sp, r7
 8024d66:	bdb0      	pop	{r4, r5, r7, pc}

08024d68 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEvT_S7_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8024d68:	b580      	push	{r7, lr}
 8024d6a:	b082      	sub	sp, #8
 8024d6c:	af00      	add	r7, sp, #0
 8024d6e:	6078      	str	r0, [r7, #4]
 8024d70:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8024d72:	6839      	ldr	r1, [r7, #0]
 8024d74:	6878      	ldr	r0, [r7, #4]
 8024d76:	f000 feeb 	bl	8025b50 <_ZNSt12_Destroy_auxILb1EE9__destroyIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEEvT_S9_>
    }
 8024d7a:	bf00      	nop
 8024d7c:	3708      	adds	r7, #8
 8024d7e:	46bd      	mov	sp, r7
 8024d80:	bd80      	pop	{r7, pc}

08024d82 <_ZSt12__miter_baseIPhET_S1_>:
    __miter_base(_Iterator __it)
 8024d82:	b480      	push	{r7}
 8024d84:	b083      	sub	sp, #12
 8024d86:	af00      	add	r7, sp, #0
 8024d88:	6078      	str	r0, [r7, #4]
    { return __it; }
 8024d8a:	687b      	ldr	r3, [r7, #4]
 8024d8c:	4618      	mov	r0, r3
 8024d8e:	370c      	adds	r7, #12
 8024d90:	46bd      	mov	sp, r7
 8024d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024d96:	4770      	bx	lr

08024d98 <_ZSt13__copy_move_aILb0EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8024d98:	b5b0      	push	{r4, r5, r7, lr}
 8024d9a:	b084      	sub	sp, #16
 8024d9c:	af00      	add	r7, sp, #0
 8024d9e:	60f8      	str	r0, [r7, #12]
 8024da0:	60b9      	str	r1, [r7, #8]
 8024da2:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8024da4:	68f8      	ldr	r0, [r7, #12]
 8024da6:	f000 fede 	bl	8025b66 <_ZSt12__niter_baseIPhET_S1_>
 8024daa:	4604      	mov	r4, r0
 8024dac:	68b8      	ldr	r0, [r7, #8]
 8024dae:	f000 feda 	bl	8025b66 <_ZSt12__niter_baseIPhET_S1_>
 8024db2:	4605      	mov	r5, r0
 8024db4:	687b      	ldr	r3, [r7, #4]
 8024db6:	4618      	mov	r0, r3
 8024db8:	f000 fed5 	bl	8025b66 <_ZSt12__niter_baseIPhET_S1_>
 8024dbc:	4603      	mov	r3, r0
 8024dbe:	461a      	mov	r2, r3
 8024dc0:	4629      	mov	r1, r5
 8024dc2:	4620      	mov	r0, r4
 8024dc4:	f000 feda 	bl	8025b7c <_ZSt14__copy_move_a1ILb0EPhS0_ET1_T0_S2_S1_>
 8024dc8:	4602      	mov	r2, r0
 8024dca:	1d3b      	adds	r3, r7, #4
 8024dcc:	4611      	mov	r1, r2
 8024dce:	4618      	mov	r0, r3
 8024dd0:	f000 fee4 	bl	8025b9c <_ZSt12__niter_wrapIPhET_RKS1_S1_>
 8024dd4:	4603      	mov	r3, r0
    }
 8024dd6:	4618      	mov	r0, r3
 8024dd8:	3710      	adds	r7, #16
 8024dda:	46bd      	mov	sp, r7
 8024ddc:	bdb0      	pop	{r4, r5, r7, pc}

08024dde <_ZSt18uninitialized_copyIPhS0_ET0_T_S2_S1_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8024dde:	b580      	push	{r7, lr}
 8024de0:	b086      	sub	sp, #24
 8024de2:	af00      	add	r7, sp, #0
 8024de4:	60f8      	str	r0, [r7, #12]
 8024de6:	60b9      	str	r1, [r7, #8]
 8024de8:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8024dea:	2301      	movs	r3, #1
 8024dec:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8024dee:	687a      	ldr	r2, [r7, #4]
 8024df0:	68b9      	ldr	r1, [r7, #8]
 8024df2:	68f8      	ldr	r0, [r7, #12]
 8024df4:	f000 fede 	bl	8025bb4 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPhS2_EET0_T_S4_S3_>
 8024df8:	4603      	mov	r3, r0
    }
 8024dfa:	4618      	mov	r0, r3
 8024dfc:	3718      	adds	r7, #24
 8024dfe:	46bd      	mov	sp, r7
 8024e00:	bd80      	pop	{r7, pc}

08024e02 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 8024e02:	b580      	push	{r7, lr}
 8024e04:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 8024e06:	2014      	movs	r0, #20
 8024e08:	f7fc f83b 	bl	8020e82 <_ZSt16__deque_buf_sizej>
 8024e0c:	4603      	mov	r3, r0
 8024e0e:	4618      	mov	r0, r3
 8024e10:	bd80      	pop	{r7, pc}

08024e12 <_ZStmiRKSt15_Deque_iteratorI8ResponceRS0_PS0_ES5_>:
      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8024e12:	b580      	push	{r7, lr}
 8024e14:	b082      	sub	sp, #8
 8024e16:	af00      	add	r7, sp, #0
 8024e18:	6078      	str	r0, [r7, #4]
 8024e1a:	6039      	str	r1, [r7, #0]
	return difference_type(_S_buffer_size())
 8024e1c:	f000 feda 	bl	8025bd4 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E14_S_buffer_sizeEv>
 8024e20:	4603      	mov	r3, r0
 8024e22:	4619      	mov	r1, r3
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 8024e24:	687b      	ldr	r3, [r7, #4]
 8024e26:	68da      	ldr	r2, [r3, #12]
 8024e28:	683b      	ldr	r3, [r7, #0]
 8024e2a:	68db      	ldr	r3, [r3, #12]
 8024e2c:	1ad3      	subs	r3, r2, r3
 8024e2e:	109b      	asrs	r3, r3, #2
 8024e30:	3b01      	subs	r3, #1
 8024e32:	fb01 f303 	mul.w	r3, r1, r3
 8024e36:	687a      	ldr	r2, [r7, #4]
 8024e38:	6811      	ldr	r1, [r2, #0]
 8024e3a:	687a      	ldr	r2, [r7, #4]
 8024e3c:	6852      	ldr	r2, [r2, #4]
 8024e3e:	1a8a      	subs	r2, r1, r2
 8024e40:	1112      	asrs	r2, r2, #4
 8024e42:	4413      	add	r3, r2
	  + (__y._M_last - __y._M_cur);
 8024e44:	683a      	ldr	r2, [r7, #0]
 8024e46:	6891      	ldr	r1, [r2, #8]
 8024e48:	683a      	ldr	r2, [r7, #0]
 8024e4a:	6812      	ldr	r2, [r2, #0]
 8024e4c:	1a8a      	subs	r2, r1, r2
 8024e4e:	1112      	asrs	r2, r2, #4
 8024e50:	4413      	add	r3, r2
      }
 8024e52:	4618      	mov	r0, r3
 8024e54:	3708      	adds	r7, #8
 8024e56:	46bd      	mov	sp, r7
 8024e58:	bd80      	pop	{r7, pc}

08024e5a <_ZNKSt16initializer_listIN10BHYWrapper8BHYFrameEE4sizeEv>:
      size() const noexcept { return _M_len; }
 8024e5a:	b480      	push	{r7}
 8024e5c:	b083      	sub	sp, #12
 8024e5e:	af00      	add	r7, sp, #0
 8024e60:	6078      	str	r0, [r7, #4]
 8024e62:	687b      	ldr	r3, [r7, #4]
 8024e64:	685b      	ldr	r3, [r3, #4]
 8024e66:	4618      	mov	r0, r3
 8024e68:	370c      	adds	r7, #12
 8024e6a:	46bd      	mov	sp, r7
 8024e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024e70:	4770      	bx	lr

08024e72 <_ZSt8distanceIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E15difference_typeES5_S5_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8024e72:	b5b0      	push	{r4, r5, r7, lr}
 8024e74:	b082      	sub	sp, #8
 8024e76:	af00      	add	r7, sp, #0
 8024e78:	6078      	str	r0, [r7, #4]
 8024e7a:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 8024e7c:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8024e7e:	1d3b      	adds	r3, r7, #4
 8024e80:	4618      	mov	r0, r3
 8024e82:	f000 f83d 	bl	8024f00 <_ZSt19__iterator_categoryIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E17iterator_categoryERKS5_>
      return std::__distance(__first, __last,
 8024e86:	462a      	mov	r2, r5
 8024e88:	6839      	ldr	r1, [r7, #0]
 8024e8a:	4620      	mov	r0, r4
 8024e8c:	f000 feaa 	bl	8025be4 <_ZSt10__distanceIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E15difference_typeES5_S5_St26random_access_iterator_tag>
 8024e90:	4603      	mov	r3, r0
    }
 8024e92:	4618      	mov	r0, r3
 8024e94:	3708      	adds	r7, #8
 8024e96:	46bd      	mov	sp, r7
 8024e98:	bdb0      	pop	{r4, r5, r7, pc}

08024e9a <_ZSt7advanceIPKN10BHYWrapper8BHYFrameEjEvRT_T0_>:
   *  For random access iterators, this uses their @c + and @c - operations
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator, typename _Distance>
    inline _GLIBCXX17_CONSTEXPR void
    advance(_InputIterator& __i, _Distance __n)
 8024e9a:	b590      	push	{r4, r7, lr}
 8024e9c:	b085      	sub	sp, #20
 8024e9e:	af00      	add	r7, sp, #0
 8024ea0:	6078      	str	r0, [r7, #4]
 8024ea2:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __advance
      typename iterator_traits<_InputIterator>::difference_type __d = __n;
 8024ea4:	683b      	ldr	r3, [r7, #0]
 8024ea6:	60fb      	str	r3, [r7, #12]
      std::__advance(__i, __d, std::__iterator_category(__i));
 8024ea8:	6878      	ldr	r0, [r7, #4]
 8024eaa:	f000 f829 	bl	8024f00 <_ZSt19__iterator_categoryIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E17iterator_categoryERKS5_>
 8024eae:	4622      	mov	r2, r4
 8024eb0:	68f9      	ldr	r1, [r7, #12]
 8024eb2:	6878      	ldr	r0, [r7, #4]
 8024eb4:	f000 feac 	bl	8025c10 <_ZSt9__advanceIPKN10BHYWrapper8BHYFrameEiEvRT_T0_St26random_access_iterator_tag>
    }
 8024eb8:	bf00      	nop
 8024eba:	3714      	adds	r7, #20
 8024ebc:	46bd      	mov	sp, r7
 8024ebe:	bd90      	pop	{r4, r7, pc}

08024ec0 <_ZSt4copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>:
    copy(_II __first, _II __last, _OI __result)
 8024ec0:	b5b0      	push	{r4, r5, r7, lr}
 8024ec2:	b088      	sub	sp, #32
 8024ec4:	af00      	add	r7, sp, #0
 8024ec6:	60f8      	str	r0, [r7, #12]
 8024ec8:	60b9      	str	r1, [r7, #8]
 8024eca:	607a      	str	r2, [r7, #4]
 8024ecc:	603b      	str	r3, [r7, #0]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8024ece:	68b8      	ldr	r0, [r7, #8]
 8024ed0:	f000 feb4 	bl	8025c3c <_ZSt12__miter_baseIPKN10BHYWrapper8BHYFrameEET_S4_>
 8024ed4:	4604      	mov	r4, r0
 8024ed6:	6878      	ldr	r0, [r7, #4]
 8024ed8:	f000 feb0 	bl	8025c3c <_ZSt12__miter_baseIPKN10BHYWrapper8BHYFrameEET_S4_>
 8024edc:	4605      	mov	r5, r0
 8024ede:	f107 0310 	add.w	r3, r7, #16
 8024ee2:	6839      	ldr	r1, [r7, #0]
 8024ee4:	4618      	mov	r0, r3
 8024ee6:	f7ff f9af 	bl	8024248 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8024eea:	68f8      	ldr	r0, [r7, #12]
 8024eec:	f107 0310 	add.w	r3, r7, #16
 8024ef0:	462a      	mov	r2, r5
 8024ef2:	4621      	mov	r1, r4
 8024ef4:	f000 fead 	bl	8025c52 <_ZSt13__copy_move_aILb0EPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET1_T0_S9_S8_>
    }
 8024ef8:	68f8      	ldr	r0, [r7, #12]
 8024efa:	3720      	adds	r7, #32
 8024efc:	46bd      	mov	sp, r7
 8024efe:	bdb0      	pop	{r4, r5, r7, pc}

08024f00 <_ZSt19__iterator_categoryIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E17iterator_categoryERKS5_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8024f00:	b480      	push	{r7}
 8024f02:	b083      	sub	sp, #12
 8024f04:	af00      	add	r7, sp, #0
 8024f06:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8024f08:	bf00      	nop
 8024f0a:	4618      	mov	r0, r3
 8024f0c:	370c      	adds	r7, #12
 8024f0e:	46bd      	mov	sp, r7
 8024f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024f14:	4770      	bx	lr

08024f16 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE19_M_range_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_St20forward_iterator_tag>:
      deque<_Tp, _Alloc>::
 8024f16:	b590      	push	{r4, r7, lr}
 8024f18:	b0a5      	sub	sp, #148	; 0x94
 8024f1a:	af02      	add	r7, sp, #8
 8024f1c:	60f8      	str	r0, [r7, #12]
 8024f1e:	60b9      	str	r1, [r7, #8]
 8024f20:	607a      	str	r2, [r7, #4]
 8024f22:	603b      	str	r3, [r7, #0]
	const size_type __n = std::distance(__first, __last);
 8024f24:	6839      	ldr	r1, [r7, #0]
 8024f26:	6878      	ldr	r0, [r7, #4]
 8024f28:	f7ff ffa3 	bl	8024e72 <_ZSt8distanceIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E15difference_typeES5_S5_>
 8024f2c:	4603      	mov	r3, r0
 8024f2e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	if (__pos._M_cur == this->_M_impl._M_start._M_cur)
 8024f32:	68bb      	ldr	r3, [r7, #8]
 8024f34:	681a      	ldr	r2, [r3, #0]
 8024f36:	68fb      	ldr	r3, [r7, #12]
 8024f38:	689b      	ldr	r3, [r3, #8]
 8024f3a:	429a      	cmp	r2, r3
 8024f3c:	d126      	bne.n	8024f8c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE19_M_range_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_St20forward_iterator_tag+0x76>
	    iterator __new_start = _M_reserve_elements_at_front(__n);
 8024f3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8024f42:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8024f46:	68f9      	ldr	r1, [r7, #12]
 8024f48:	4618      	mov	r0, r3
 8024f4a:	f000 feb3 	bl	8025cb4 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE28_M_reserve_elements_at_frontEj>
		std::__uninitialized_copy_a(__first, __last, __new_start,
 8024f4e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8024f52:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8024f56:	4611      	mov	r1, r2
 8024f58:	4618      	mov	r0, r3
 8024f5a:	f7ff f975 	bl	8024248 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
					    _M_get_Tp_allocator());
 8024f5e:	68fb      	ldr	r3, [r7, #12]
 8024f60:	4618      	mov	r0, r3
 8024f62:	f7ff f82f 	bl	8023fc4 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 8024f66:	4602      	mov	r2, r0
		std::__uninitialized_copy_a(__first, __last, __new_start,
 8024f68:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8024f6c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8024f70:	9200      	str	r2, [sp, #0]
 8024f72:	683a      	ldr	r2, [r7, #0]
 8024f74:	6879      	ldr	r1, [r7, #4]
 8024f76:	f000 fec7 	bl	8025d08 <_ZSt22__uninitialized_copy_aIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_ES1_ET0_T_S9_S8_RSaIT1_E>
		this->_M_impl._M_start = __new_start;
 8024f7a:	68fb      	ldr	r3, [r7, #12]
 8024f7c:	f103 0408 	add.w	r4, r3, #8
 8024f80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8024f84:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8024f86:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      }
 8024f8a:	e03d      	b.n	8025008 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE19_M_range_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_St20forward_iterator_tag+0xf2>
	else if (__pos._M_cur == this->_M_impl._M_finish._M_cur)
 8024f8c:	68bb      	ldr	r3, [r7, #8]
 8024f8e:	681a      	ldr	r2, [r3, #0]
 8024f90:	68fb      	ldr	r3, [r7, #12]
 8024f92:	699b      	ldr	r3, [r3, #24]
 8024f94:	429a      	cmp	r2, r3
 8024f96:	d127      	bne.n	8024fe8 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE19_M_range_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_St20forward_iterator_tag+0xd2>
	    iterator __new_finish = _M_reserve_elements_at_back(__n);
 8024f98:	f107 0314 	add.w	r3, r7, #20
 8024f9c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8024fa0:	68f9      	ldr	r1, [r7, #12]
 8024fa2:	4618      	mov	r0, r3
 8024fa4:	f000 fec8 	bl	8025d38 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE27_M_reserve_elements_at_backEj>
					    this->_M_impl._M_finish,
 8024fa8:	68fb      	ldr	r3, [r7, #12]
 8024faa:	f103 0218 	add.w	r2, r3, #24
		std::__uninitialized_copy_a(__first, __last,
 8024fae:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8024fb2:	4611      	mov	r1, r2
 8024fb4:	4618      	mov	r0, r3
 8024fb6:	f7ff f947 	bl	8024248 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
					    _M_get_Tp_allocator());
 8024fba:	68fb      	ldr	r3, [r7, #12]
 8024fbc:	4618      	mov	r0, r3
 8024fbe:	f7ff f801 	bl	8023fc4 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 8024fc2:	4602      	mov	r2, r0
		std::__uninitialized_copy_a(__first, __last,
 8024fc4:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8024fc8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8024fcc:	9200      	str	r2, [sp, #0]
 8024fce:	683a      	ldr	r2, [r7, #0]
 8024fd0:	6879      	ldr	r1, [r7, #4]
 8024fd2:	f000 fe99 	bl	8025d08 <_ZSt22__uninitialized_copy_aIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_ES1_ET0_T_S9_S8_RSaIT1_E>
		this->_M_impl._M_finish = __new_finish;
 8024fd6:	68fb      	ldr	r3, [r7, #12]
 8024fd8:	f103 0418 	add.w	r4, r3, #24
 8024fdc:	f107 0314 	add.w	r3, r7, #20
 8024fe0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8024fe2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      }
 8024fe6:	e00f      	b.n	8025008 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE19_M_range_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_St20forward_iterator_tag+0xf2>
	  _M_insert_aux(__pos, __first, __last, __n);
 8024fe8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8024fec:	68b9      	ldr	r1, [r7, #8]
 8024fee:	4618      	mov	r0, r3
 8024ff0:	f7ff f92a 	bl	8024248 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8024ff4:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8024ff8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8024ffc:	9300      	str	r3, [sp, #0]
 8024ffe:	683b      	ldr	r3, [r7, #0]
 8025000:	687a      	ldr	r2, [r7, #4]
 8025002:	68f8      	ldr	r0, [r7, #12]
 8025004:	f000 fec2 	bl	8025d8c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_j>
      }
 8025008:	bf00      	nop
 802500a:	378c      	adds	r7, #140	; 0x8c
 802500c:	46bd      	mov	sp, r7
 802500e:	bd90      	pop	{r4, r7, pc}

08025010 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_erase_at_endESt15_Deque_iteratorIS1_RS1_PS1_E>:
      _M_erase_at_end(iterator __pos)
 8025010:	b590      	push	{r4, r7, lr}
 8025012:	b08b      	sub	sp, #44	; 0x2c
 8025014:	af00      	add	r7, sp, #0
 8025016:	6078      	str	r0, [r7, #4]
 8025018:	6039      	str	r1, [r7, #0]
	_M_destroy_data(__pos, end(), _M_get_Tp_allocator());
 802501a:	f107 0308 	add.w	r3, r7, #8
 802501e:	6839      	ldr	r1, [r7, #0]
 8025020:	4618      	mov	r0, r3
 8025022:	f7ff f911 	bl	8024248 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8025026:	f107 0318 	add.w	r3, r7, #24
 802502a:	6879      	ldr	r1, [r7, #4]
 802502c:	4618      	mov	r0, r3
 802502e:	f7ff f8fc 	bl	802422a <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE3endEv>
 8025032:	687b      	ldr	r3, [r7, #4]
 8025034:	4618      	mov	r0, r3
 8025036:	f7fe ffc5 	bl	8023fc4 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 802503a:	4603      	mov	r3, r0
 802503c:	f107 0218 	add.w	r2, r7, #24
 8025040:	f107 0108 	add.w	r1, r7, #8
 8025044:	6878      	ldr	r0, [r7, #4]
 8025046:	f7ff f91b 	bl	8024280 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_destroy_dataESt15_Deque_iteratorIS1_RS1_PS1_ES7_RKS2_>
	_M_destroy_nodes(__pos._M_node + 1,
 802504a:	6878      	ldr	r0, [r7, #4]
 802504c:	683b      	ldr	r3, [r7, #0]
 802504e:	68db      	ldr	r3, [r3, #12]
 8025050:	1d19      	adds	r1, r3, #4
			 this->_M_impl._M_finish._M_node + 1);
 8025052:	687b      	ldr	r3, [r7, #4]
 8025054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	_M_destroy_nodes(__pos._M_node + 1,
 8025056:	3304      	adds	r3, #4
 8025058:	461a      	mov	r2, r3
 802505a:	f7ff f8a1 	bl	80241a0 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_destroy_nodesEPPS1_S5_>
	this->_M_impl._M_finish = __pos;
 802505e:	687b      	ldr	r3, [r7, #4]
 8025060:	683a      	ldr	r2, [r7, #0]
 8025062:	f103 0418 	add.w	r4, r3, #24
 8025066:	4613      	mov	r3, r2
 8025068:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802506a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      }
 802506e:	bf00      	nop
 8025070:	372c      	adds	r7, #44	; 0x2c
 8025072:	46bd      	mov	sp, r7
 8025074:	bd90      	pop	{r4, r7, pc}

08025076 <_ZSt7forwardIRKN10BHYWrapper8BHYFrameEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8025076:	b480      	push	{r7}
 8025078:	b083      	sub	sp, #12
 802507a:	af00      	add	r7, sp, #0
 802507c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 802507e:	687b      	ldr	r3, [r7, #4]
 8025080:	4618      	mov	r0, r3
 8025082:	370c      	adds	r7, #12
 8025084:	46bd      	mov	sp, r7
 8025086:	f85d 7b04 	ldr.w	r7, [sp], #4
 802508a:	4770      	bx	lr

0802508c <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE9constructIS2_JRKS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 802508c:	b5b0      	push	{r4, r5, r7, lr}
 802508e:	b084      	sub	sp, #16
 8025090:	af00      	add	r7, sp, #0
 8025092:	60f8      	str	r0, [r7, #12]
 8025094:	60b9      	str	r1, [r7, #8]
 8025096:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8025098:	6878      	ldr	r0, [r7, #4]
 802509a:	f7ff ffec 	bl	8025076 <_ZSt7forwardIRKN10BHYWrapper8BHYFrameEEOT_RNSt16remove_referenceIS4_E4typeE>
 802509e:	4605      	mov	r5, r0
 80250a0:	68bb      	ldr	r3, [r7, #8]
 80250a2:	4619      	mov	r1, r3
 80250a4:	2014      	movs	r0, #20
 80250a6:	f7fb fee0 	bl	8020e6a <_ZnwjPv>
 80250aa:	4603      	mov	r3, r0
 80250ac:	461c      	mov	r4, r3
 80250ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80250b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80250b2:	682b      	ldr	r3, [r5, #0]
 80250b4:	6023      	str	r3, [r4, #0]
 80250b6:	bf00      	nop
 80250b8:	3710      	adds	r7, #16
 80250ba:	46bd      	mov	sp, r7
 80250bc:	bdb0      	pop	{r4, r5, r7, pc}

080250be <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80250be:	b580      	push	{r7, lr}
 80250c0:	b082      	sub	sp, #8
 80250c2:	af00      	add	r7, sp, #0
 80250c4:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 80250c6:	687b      	ldr	r3, [r7, #4]
 80250c8:	4618      	mov	r0, r3
 80250ca:	f001 f96c 	bl	80263a6 <_ZNKSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 80250ce:	4603      	mov	r3, r0
 80250d0:	4618      	mov	r0, r3
 80250d2:	f001 f94e 	bl	8026372 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE11_S_max_sizeERKS2_>
 80250d6:	4603      	mov	r3, r0
 80250d8:	4618      	mov	r0, r3
 80250da:	3708      	adds	r7, #8
 80250dc:	46bd      	mov	sp, r7
 80250de:	bd80      	pop	{r7, pc}

080250e0 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_reserve_map_at_frontEj>:
      _M_reserve_map_at_front(size_type __nodes_to_add = 1)
 80250e0:	b580      	push	{r7, lr}
 80250e2:	b082      	sub	sp, #8
 80250e4:	af00      	add	r7, sp, #0
 80250e6:	6078      	str	r0, [r7, #4]
 80250e8:	6039      	str	r1, [r7, #0]
	if (__nodes_to_add > size_type(this->_M_impl._M_start._M_node
 80250ea:	687b      	ldr	r3, [r7, #4]
 80250ec:	695a      	ldr	r2, [r3, #20]
				       - this->_M_impl._M_map))
 80250ee:	687b      	ldr	r3, [r7, #4]
 80250f0:	681b      	ldr	r3, [r3, #0]
 80250f2:	1ad3      	subs	r3, r2, r3
 80250f4:	109b      	asrs	r3, r3, #2
	if (__nodes_to_add > size_type(this->_M_impl._M_start._M_node
 80250f6:	461a      	mov	r2, r3
 80250f8:	683b      	ldr	r3, [r7, #0]
 80250fa:	4293      	cmp	r3, r2
 80250fc:	d904      	bls.n	8025108 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_reserve_map_at_frontEj+0x28>
	  _M_reallocate_map(__nodes_to_add, true);
 80250fe:	2201      	movs	r2, #1
 8025100:	6839      	ldr	r1, [r7, #0]
 8025102:	6878      	ldr	r0, [r7, #4]
 8025104:	f001 f95a 	bl	80263bc <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb>
      }
 8025108:	bf00      	nop
 802510a:	3708      	adds	r7, #8
 802510c:	46bd      	mov	sp, r7
 802510e:	bd80      	pop	{r7, pc}

08025110 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_allocate_nodeEv>:
      _M_allocate_node()
 8025110:	b590      	push	{r4, r7, lr}
 8025112:	b083      	sub	sp, #12
 8025114:	af00      	add	r7, sp, #0
 8025116:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 8025118:	687c      	ldr	r4, [r7, #4]
 802511a:	2014      	movs	r0, #20
 802511c:	f7fb feb1 	bl	8020e82 <_ZSt16__deque_buf_sizej>
 8025120:	4603      	mov	r3, r0
 8025122:	4619      	mov	r1, r3
 8025124:	4620      	mov	r0, r4
 8025126:	f001 f9e3 	bl	80264f0 <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE8allocateERS2_j>
 802512a:	4603      	mov	r3, r0
      }
 802512c:	4618      	mov	r0, r3
 802512e:	370c      	adds	r7, #12
 8025130:	46bd      	mov	sp, r7
 8025132:	bd90      	pop	{r4, r7, pc}

08025134 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E11_M_set_nodeEPS3_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 8025134:	b590      	push	{r4, r7, lr}
 8025136:	b083      	sub	sp, #12
 8025138:	af00      	add	r7, sp, #0
 802513a:	6078      	str	r0, [r7, #4]
 802513c:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 802513e:	687b      	ldr	r3, [r7, #4]
 8025140:	683a      	ldr	r2, [r7, #0]
 8025142:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 8025144:	683b      	ldr	r3, [r7, #0]
 8025146:	681a      	ldr	r2, [r3, #0]
 8025148:	687b      	ldr	r3, [r7, #4]
 802514a:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 802514c:	687b      	ldr	r3, [r7, #4]
 802514e:	685c      	ldr	r4, [r3, #4]
 8025150:	f000 f81f 	bl	8025192 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 8025154:	4602      	mov	r2, r0
 8025156:	4613      	mov	r3, r2
 8025158:	009b      	lsls	r3, r3, #2
 802515a:	4413      	add	r3, r2
 802515c:	009b      	lsls	r3, r3, #2
 802515e:	18e2      	adds	r2, r4, r3
 8025160:	687b      	ldr	r3, [r7, #4]
 8025162:	609a      	str	r2, [r3, #8]
      }
 8025164:	bf00      	nop
 8025166:	370c      	adds	r7, #12
 8025168:	46bd      	mov	sp, r7
 802516a:	bd90      	pop	{r4, r7, pc}

0802516c <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE18_M_deallocate_nodeEPS1_>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 802516c:	b590      	push	{r4, r7, lr}
 802516e:	b083      	sub	sp, #12
 8025170:	af00      	add	r7, sp, #0
 8025172:	6078      	str	r0, [r7, #4]
 8025174:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 8025176:	687c      	ldr	r4, [r7, #4]
 8025178:	2014      	movs	r0, #20
 802517a:	f7fb fe82 	bl	8020e82 <_ZSt16__deque_buf_sizej>
 802517e:	4603      	mov	r3, r0
 8025180:	461a      	mov	r2, r3
 8025182:	6839      	ldr	r1, [r7, #0]
 8025184:	4620      	mov	r0, r4
 8025186:	f001 f9c2 	bl	802650e <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE10deallocateERS2_PS1_j>
      }
 802518a:	bf00      	nop
 802518c:	370c      	adds	r7, #12
 802518e:	46bd      	mov	sp, r7
 8025190:	bd90      	pop	{r4, r7, pc}

08025192 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 8025192:	b580      	push	{r7, lr}
 8025194:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 8025196:	2014      	movs	r0, #20
 8025198:	f7fb fe73 	bl	8020e82 <_ZSt16__deque_buf_sizej>
 802519c:	4603      	mov	r3, r0
 802519e:	4618      	mov	r0, r3
 80251a0:	bd80      	pop	{r7, pc}

080251a2 <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE7destroyIS2_EEvPT_>:
	destroy(_Up* __p)
 80251a2:	b480      	push	{r7}
 80251a4:	b083      	sub	sp, #12
 80251a6:	af00      	add	r7, sp, #0
 80251a8:	6078      	str	r0, [r7, #4]
 80251aa:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 80251ac:	bf00      	nop
 80251ae:	370c      	adds	r7, #12
 80251b0:	46bd      	mov	sp, r7
 80251b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80251b6:	4770      	bx	lr

080251b8 <_ZStplRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>:
      operator+(const _Self& __x, difference_type __n) _GLIBCXX_NOEXCEPT
 80251b8:	b580      	push	{r7, lr}
 80251ba:	b084      	sub	sp, #16
 80251bc:	af00      	add	r7, sp, #0
 80251be:	60f8      	str	r0, [r7, #12]
 80251c0:	60b9      	str	r1, [r7, #8]
 80251c2:	607a      	str	r2, [r7, #4]
	_Self __tmp = __x;
 80251c4:	68b9      	ldr	r1, [r7, #8]
 80251c6:	68f8      	ldr	r0, [r7, #12]
 80251c8:	f7ff f83e 	bl	8024248 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
	__tmp += __n;
 80251cc:	6879      	ldr	r1, [r7, #4]
 80251ce:	68f8      	ldr	r0, [r7, #12]
 80251d0:	f001 f9ac 	bl	802652c <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi>
	return __tmp;
 80251d4:	bf00      	nop
      }
 80251d6:	68f8      	ldr	r0, [r7, #12]
 80251d8:	3710      	adds	r7, #16
 80251da:	46bd      	mov	sp, r7
 80251dc:	bd80      	pop	{r7, pc}

080251de <_ZNKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80251de:	b480      	push	{r7}
 80251e0:	b083      	sub	sp, #12
 80251e2:	af00      	add	r7, sp, #0
 80251e4:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 80251e6:	687b      	ldr	r3, [r7, #4]
 80251e8:	681b      	ldr	r3, [r3, #0]
 80251ea:	4618      	mov	r0, r3
 80251ec:	370c      	adds	r7, #12
 80251ee:	46bd      	mov	sp, r7
 80251f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80251f4:	4770      	bx	lr

080251f6 <_ZNSaIN10BHYWrapper8BHYFrameEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80251f6:	b580      	push	{r7, lr}
 80251f8:	b082      	sub	sp, #8
 80251fa:	af00      	add	r7, sp, #0
 80251fc:	6078      	str	r0, [r7, #4]
 80251fe:	6878      	ldr	r0, [r7, #4]
 8025200:	f001 f9f8 	bl	80265f4 <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEEC1Ev>
 8025204:	687b      	ldr	r3, [r7, #4]
 8025206:	4618      	mov	r0, r3
 8025208:	3708      	adds	r7, #8
 802520a:	46bd      	mov	sp, r7
 802520c:	bd80      	pop	{r7, pc}

0802520e <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 802520e:	b580      	push	{r7, lr}
 8025210:	b082      	sub	sp, #8
 8025212:	af00      	add	r7, sp, #0
 8025214:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 8025216:	687b      	ldr	r3, [r7, #4]
 8025218:	2200      	movs	r2, #0
 802521a:	601a      	str	r2, [r3, #0]
 802521c:	687b      	ldr	r3, [r7, #4]
 802521e:	2200      	movs	r2, #0
 8025220:	605a      	str	r2, [r3, #4]
 8025222:	687b      	ldr	r3, [r7, #4]
 8025224:	3308      	adds	r3, #8
 8025226:	4618      	mov	r0, r3
 8025228:	f001 f9ef 	bl	802660a <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1Ev>
 802522c:	687b      	ldr	r3, [r7, #4]
 802522e:	3318      	adds	r3, #24
 8025230:	4618      	mov	r0, r3
 8025232:	f001 f9ea 	bl	802660a <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1Ev>
	{ }
 8025236:	687b      	ldr	r3, [r7, #4]
 8025238:	4618      	mov	r0, r3
 802523a:	3708      	adds	r7, #8
 802523c:	46bd      	mov	sp, r7
 802523e:	bd80      	pop	{r7, pc}

08025240 <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8025240:	b480      	push	{r7}
 8025242:	b083      	sub	sp, #12
 8025244:	af00      	add	r7, sp, #0
 8025246:	6078      	str	r0, [r7, #4]
 8025248:	687b      	ldr	r3, [r7, #4]
 802524a:	4618      	mov	r0, r3
 802524c:	370c      	adds	r7, #12
 802524e:	46bd      	mov	sp, r7
 8025250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025254:	4770      	bx	lr

08025256 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 8025256:	b590      	push	{r4, r7, lr}
 8025258:	b085      	sub	sp, #20
 802525a:	af00      	add	r7, sp, #0
 802525c:	6078      	str	r0, [r7, #4]
 802525e:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8025260:	f107 030c 	add.w	r3, r7, #12
 8025264:	6879      	ldr	r1, [r7, #4]
 8025266:	4618      	mov	r0, r3
 8025268:	f000 f82c 	bl	80252c4 <_ZNKSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 802526c:	f107 030c 	add.w	r3, r7, #12
 8025270:	6839      	ldr	r1, [r7, #0]
 8025272:	4618      	mov	r0, r3
 8025274:	f001 f9e0 	bl	8026638 <_ZNSt16allocator_traitsISaIPN10BHYWrapper8BHYFrameEEE8allocateERS3_j>
 8025278:	4604      	mov	r4, r0
 802527a:	bf00      	nop
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 802527c:	f107 030c 	add.w	r3, r7, #12
 8025280:	4618      	mov	r0, r3
 8025282:	f000 f830 	bl	80252e6 <_ZNSaIPN10BHYWrapper8BHYFrameEED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8025286:	4623      	mov	r3, r4
      }
 8025288:	4618      	mov	r0, r3
 802528a:	3714      	adds	r7, #20
 802528c:	46bd      	mov	sp, r7
 802528e:	bd90      	pop	{r4, r7, pc}

08025290 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE15_M_create_nodesEPPS1_S5_>:
    _Deque_base<_Tp, _Alloc>::
 8025290:	b580      	push	{r7, lr}
 8025292:	b086      	sub	sp, #24
 8025294:	af00      	add	r7, sp, #0
 8025296:	60f8      	str	r0, [r7, #12]
 8025298:	60b9      	str	r1, [r7, #8]
 802529a:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 802529c:	68bb      	ldr	r3, [r7, #8]
 802529e:	617b      	str	r3, [r7, #20]
 80252a0:	697a      	ldr	r2, [r7, #20]
 80252a2:	687b      	ldr	r3, [r7, #4]
 80252a4:	429a      	cmp	r2, r3
 80252a6:	d209      	bcs.n	80252bc <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE15_M_create_nodesEPPS1_S5_+0x2c>
	    *__cur = this->_M_allocate_node();
 80252a8:	68f8      	ldr	r0, [r7, #12]
 80252aa:	f7ff ff31 	bl	8025110 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_allocate_nodeEv>
 80252ae:	4602      	mov	r2, r0
 80252b0:	697b      	ldr	r3, [r7, #20]
 80252b2:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 80252b4:	697b      	ldr	r3, [r7, #20]
 80252b6:	3304      	adds	r3, #4
 80252b8:	617b      	str	r3, [r7, #20]
 80252ba:	e7f1      	b.n	80252a0 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE15_M_create_nodesEPPS1_S5_+0x10>
    }
 80252bc:	bf00      	nop
 80252be:	3718      	adds	r7, #24
 80252c0:	46bd      	mov	sp, r7
 80252c2:	bd80      	pop	{r7, pc}

080252c4 <_ZNKSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 80252c4:	b580      	push	{r7, lr}
 80252c6:	b082      	sub	sp, #8
 80252c8:	af00      	add	r7, sp, #0
 80252ca:	6078      	str	r0, [r7, #4]
 80252cc:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 80252ce:	6838      	ldr	r0, [r7, #0]
 80252d0:	f001 f869 	bl	80263a6 <_ZNKSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 80252d4:	4603      	mov	r3, r0
 80252d6:	4619      	mov	r1, r3
 80252d8:	6878      	ldr	r0, [r7, #4]
 80252da:	f001 f9bc 	bl	8026656 <_ZNSaIPN10BHYWrapper8BHYFrameEEC1IS0_EERKSaIT_E>
 80252de:	6878      	ldr	r0, [r7, #4]
 80252e0:	3708      	adds	r7, #8
 80252e2:	46bd      	mov	sp, r7
 80252e4:	bd80      	pop	{r7, pc}

080252e6 <_ZNSaIPN10BHYWrapper8BHYFrameEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 80252e6:	b580      	push	{r7, lr}
 80252e8:	b082      	sub	sp, #8
 80252ea:	af00      	add	r7, sp, #0
 80252ec:	6078      	str	r0, [r7, #4]
 80252ee:	6878      	ldr	r0, [r7, #4]
 80252f0:	f001 f9be 	bl	8026670 <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEED1Ev>
 80252f4:	687b      	ldr	r3, [r7, #4]
 80252f6:	4618      	mov	r0, r3
 80252f8:	3708      	adds	r7, #8
 80252fa:	46bd      	mov	sp, r7
 80252fc:	bd80      	pop	{r7, pc}

080252fe <_ZNSt16allocator_traitsISaIPN10BHYWrapper8BHYFrameEEE10deallocateERS3_PS2_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80252fe:	b580      	push	{r7, lr}
 8025300:	b084      	sub	sp, #16
 8025302:	af00      	add	r7, sp, #0
 8025304:	60f8      	str	r0, [r7, #12]
 8025306:	60b9      	str	r1, [r7, #8]
 8025308:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 802530a:	687a      	ldr	r2, [r7, #4]
 802530c:	68b9      	ldr	r1, [r7, #8]
 802530e:	68f8      	ldr	r0, [r7, #12]
 8025310:	f001 f9b9 	bl	8026686 <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEE10deallocateEPS3_j>
 8025314:	bf00      	nop
 8025316:	3710      	adds	r7, #16
 8025318:	46bd      	mov	sp, r7
 802531a:	bd80      	pop	{r7, pc}

0802531c <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_Deque_impl_data12_M_swap_dataERS3_>:
	_M_swap_data(_Deque_impl_data& __x) _GLIBCXX_NOEXCEPT
 802531c:	b580      	push	{r7, lr}
 802531e:	b082      	sub	sp, #8
 8025320:	af00      	add	r7, sp, #0
 8025322:	6078      	str	r0, [r7, #4]
 8025324:	6039      	str	r1, [r7, #0]
	  std::swap(*this, __x);
 8025326:	6839      	ldr	r1, [r7, #0]
 8025328:	6878      	ldr	r0, [r7, #4]
 802532a:	f001 f9c4 	bl	80266b6 <_ZSt4swapINSt11_Deque_baseI7RequestSaIS1_EE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>
	}
 802532e:	bf00      	nop
 8025330:	3708      	adds	r7, #8
 8025332:	46bd      	mov	sp, r7
 8025334:	bd80      	pop	{r7, pc}

08025336 <_ZNSt5dequeI7RequestSaIS0_EE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 8025336:	b580      	push	{r7, lr}
 8025338:	b086      	sub	sp, #24
 802533a:	af00      	add	r7, sp, #0
 802533c:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(begin()); }
 802533e:	f107 0308 	add.w	r3, r7, #8
 8025342:	6879      	ldr	r1, [r7, #4]
 8025344:	4618      	mov	r0, r3
 8025346:	f7fd ffde 	bl	8023306 <_ZNSt5dequeI7RequestSaIS0_EE5beginEv>
 802534a:	f107 0308 	add.w	r3, r7, #8
 802534e:	4619      	mov	r1, r3
 8025350:	6878      	ldr	r0, [r7, #4]
 8025352:	f001 f9e3 	bl	802671c <_ZNSt5dequeI7RequestSaIS0_EE15_M_erase_at_endESt15_Deque_iteratorIS0_RS0_PS0_E>
 8025356:	bf00      	nop
 8025358:	3718      	adds	r7, #24
 802535a:	46bd      	mov	sp, r7
 802535c:	bd80      	pop	{r7, pc}

0802535e <_ZSt15__alloc_on_moveISaI7RequestEEvRT_S3_>:
    __alloc_on_move(_Alloc& __one, _Alloc& __two)
 802535e:	b580      	push	{r7, lr}
 8025360:	b082      	sub	sp, #8
 8025362:	af00      	add	r7, sp, #0
 8025364:	6078      	str	r0, [r7, #4]
 8025366:	6039      	str	r1, [r7, #0]
      __do_alloc_on_move(__one, __two, __pocma());
 8025368:	461a      	mov	r2, r3
 802536a:	6839      	ldr	r1, [r7, #0]
 802536c:	6878      	ldr	r0, [r7, #4]
 802536e:	f001 fa08 	bl	8026782 <_ZSt18__do_alloc_on_moveISaI7RequestEEvRT_S3_St17integral_constantIbLb1EE>
    }
 8025372:	bf00      	nop
 8025374:	3708      	adds	r7, #8
 8025376:	46bd      	mov	sp, r7
 8025378:	bd80      	pop	{r7, pc}

0802537a <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_Deque_impl_data12_M_swap_dataERS3_>:
	_M_swap_data(_Deque_impl_data& __x) _GLIBCXX_NOEXCEPT
 802537a:	b580      	push	{r7, lr}
 802537c:	b082      	sub	sp, #8
 802537e:	af00      	add	r7, sp, #0
 8025380:	6078      	str	r0, [r7, #4]
 8025382:	6039      	str	r1, [r7, #0]
	  std::swap(*this, __x);
 8025384:	6839      	ldr	r1, [r7, #0]
 8025386:	6878      	ldr	r0, [r7, #4]
 8025388:	f001 fa08 	bl	802679c <_ZSt4swapINSt11_Deque_baseI8ResponceSaIS1_EE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>
	}
 802538c:	bf00      	nop
 802538e:	3708      	adds	r7, #8
 8025390:	46bd      	mov	sp, r7
 8025392:	bd80      	pop	{r7, pc}

08025394 <_ZNSt5dequeI8ResponceSaIS0_EE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 8025394:	b580      	push	{r7, lr}
 8025396:	b086      	sub	sp, #24
 8025398:	af00      	add	r7, sp, #0
 802539a:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(begin()); }
 802539c:	f107 0308 	add.w	r3, r7, #8
 80253a0:	6879      	ldr	r1, [r7, #4]
 80253a2:	4618      	mov	r0, r3
 80253a4:	f7fe f852 	bl	802344c <_ZNSt5dequeI8ResponceSaIS0_EE5beginEv>
 80253a8:	f107 0308 	add.w	r3, r7, #8
 80253ac:	4619      	mov	r1, r3
 80253ae:	6878      	ldr	r0, [r7, #4]
 80253b0:	f001 fa27 	bl	8026802 <_ZNSt5dequeI8ResponceSaIS0_EE15_M_erase_at_endESt15_Deque_iteratorIS0_RS0_PS0_E>
 80253b4:	bf00      	nop
 80253b6:	3718      	adds	r7, #24
 80253b8:	46bd      	mov	sp, r7
 80253ba:	bd80      	pop	{r7, pc}

080253bc <_ZSt15__alloc_on_moveISaI8ResponceEEvRT_S3_>:
    __alloc_on_move(_Alloc& __one, _Alloc& __two)
 80253bc:	b580      	push	{r7, lr}
 80253be:	b082      	sub	sp, #8
 80253c0:	af00      	add	r7, sp, #0
 80253c2:	6078      	str	r0, [r7, #4]
 80253c4:	6039      	str	r1, [r7, #0]
      __do_alloc_on_move(__one, __two, __pocma());
 80253c6:	461a      	mov	r2, r3
 80253c8:	6839      	ldr	r1, [r7, #0]
 80253ca:	6878      	ldr	r0, [r7, #4]
 80253cc:	f001 fa4c 	bl	8026868 <_ZSt18__do_alloc_on_moveISaI8ResponceEEvRT_S3_St17integral_constantIbLb1EE>
    }
 80253d0:	bf00      	nop
 80253d2:	3708      	adds	r7, #8
 80253d4:	46bd      	mov	sp, r7
 80253d6:	bd80      	pop	{r7, pc}

080253d8 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_data12_M_swap_dataERS4_>:
	_M_swap_data(_Deque_impl_data& __x) _GLIBCXX_NOEXCEPT
 80253d8:	b580      	push	{r7, lr}
 80253da:	b082      	sub	sp, #8
 80253dc:	af00      	add	r7, sp, #0
 80253de:	6078      	str	r0, [r7, #4]
 80253e0:	6039      	str	r1, [r7, #0]
	  std::swap(*this, __x);
 80253e2:	6839      	ldr	r1, [r7, #0]
 80253e4:	6878      	ldr	r0, [r7, #4]
 80253e6:	f001 fa4c 	bl	8026882 <_ZSt4swapINSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS2_EE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISA_ESt18is_move_assignableISA_EEE5valueEvE4typeERSA_SK_>
	}
 80253ea:	bf00      	nop
 80253ec:	3708      	adds	r7, #8
 80253ee:	46bd      	mov	sp, r7
 80253f0:	bd80      	pop	{r7, pc}

080253f2 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 80253f2:	b580      	push	{r7, lr}
 80253f4:	b086      	sub	sp, #24
 80253f6:	af00      	add	r7, sp, #0
 80253f8:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(begin()); }
 80253fa:	f107 0308 	add.w	r3, r7, #8
 80253fe:	6879      	ldr	r1, [r7, #4]
 8025400:	4618      	mov	r0, r3
 8025402:	f7fe ff03 	bl	802420c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5beginEv>
 8025406:	f107 0308 	add.w	r3, r7, #8
 802540a:	4619      	mov	r1, r3
 802540c:	6878      	ldr	r0, [r7, #4]
 802540e:	f7ff fdff 	bl	8025010 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_erase_at_endESt15_Deque_iteratorIS1_RS1_PS1_E>
 8025412:	bf00      	nop
 8025414:	3718      	adds	r7, #24
 8025416:	46bd      	mov	sp, r7
 8025418:	bd80      	pop	{r7, pc}

0802541a <_ZSt15__alloc_on_moveISaIN10BHYWrapper8BHYFrameEEEvRT_S4_>:
    __alloc_on_move(_Alloc& __one, _Alloc& __two)
 802541a:	b580      	push	{r7, lr}
 802541c:	b082      	sub	sp, #8
 802541e:	af00      	add	r7, sp, #0
 8025420:	6078      	str	r0, [r7, #4]
 8025422:	6039      	str	r1, [r7, #0]
      __do_alloc_on_move(__one, __two, __pocma());
 8025424:	461a      	mov	r2, r3
 8025426:	6839      	ldr	r1, [r7, #0]
 8025428:	6878      	ldr	r0, [r7, #4]
 802542a:	f001 fa5d 	bl	80268e8 <_ZSt18__do_alloc_on_moveISaIN10BHYWrapper8BHYFrameEEEvRT_S4_St17integral_constantIbLb1EE>
    }
 802542e:	bf00      	nop
 8025430:	3708      	adds	r7, #8
 8025432:	46bd      	mov	sp, r7
 8025434:	bd80      	pop	{r7, pc}

08025436 <_ZN9__gnu_cxx13new_allocatorI7RequestEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8025436:	b480      	push	{r7}
 8025438:	b083      	sub	sp, #12
 802543a:	af00      	add	r7, sp, #0
 802543c:	6078      	str	r0, [r7, #4]
 802543e:	687b      	ldr	r3, [r7, #4]
 8025440:	4618      	mov	r0, r3
 8025442:	370c      	adds	r7, #12
 8025444:	46bd      	mov	sp, r7
 8025446:	f85d 7b04 	ldr.w	r7, [sp], #4
 802544a:	4770      	bx	lr

0802544c <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 802544c:	b480      	push	{r7}
 802544e:	b083      	sub	sp, #12
 8025450:	af00      	add	r7, sp, #0
 8025452:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 8025454:	687b      	ldr	r3, [r7, #4]
 8025456:	2200      	movs	r2, #0
 8025458:	601a      	str	r2, [r3, #0]
 802545a:	687b      	ldr	r3, [r7, #4]
 802545c:	2200      	movs	r2, #0
 802545e:	605a      	str	r2, [r3, #4]
 8025460:	687b      	ldr	r3, [r7, #4]
 8025462:	2200      	movs	r2, #0
 8025464:	609a      	str	r2, [r3, #8]
 8025466:	687b      	ldr	r3, [r7, #4]
 8025468:	2200      	movs	r2, #0
 802546a:	60da      	str	r2, [r3, #12]
 802546c:	687b      	ldr	r3, [r7, #4]
 802546e:	4618      	mov	r0, r3
 8025470:	370c      	adds	r7, #12
 8025472:	46bd      	mov	sp, r7
 8025474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025478:	4770      	bx	lr

0802547a <_ZNSt16allocator_traitsISaIP7RequestEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 802547a:	b580      	push	{r7, lr}
 802547c:	b082      	sub	sp, #8
 802547e:	af00      	add	r7, sp, #0
 8025480:	6078      	str	r0, [r7, #4]
 8025482:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8025484:	2200      	movs	r2, #0
 8025486:	6839      	ldr	r1, [r7, #0]
 8025488:	6878      	ldr	r0, [r7, #4]
 802548a:	f001 fa3a 	bl	8026902 <_ZN9__gnu_cxx13new_allocatorIP7RequestE8allocateEjPKv>
 802548e:	4603      	mov	r3, r0
 8025490:	4618      	mov	r0, r3
 8025492:	3708      	adds	r7, #8
 8025494:	46bd      	mov	sp, r7
 8025496:	bd80      	pop	{r7, pc}

08025498 <_ZNSt16allocator_traitsISaI7RequestEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8025498:	b580      	push	{r7, lr}
 802549a:	b084      	sub	sp, #16
 802549c:	af00      	add	r7, sp, #0
 802549e:	60f8      	str	r0, [r7, #12]
 80254a0:	60b9      	str	r1, [r7, #8]
 80254a2:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80254a4:	687a      	ldr	r2, [r7, #4]
 80254a6:	68b9      	ldr	r1, [r7, #8]
 80254a8:	68f8      	ldr	r0, [r7, #12]
 80254aa:	f001 fa48 	bl	802693e <_ZN9__gnu_cxx13new_allocatorI7RequestE10deallocateEPS1_j>
 80254ae:	bf00      	nop
 80254b0:	3710      	adds	r7, #16
 80254b2:	46bd      	mov	sp, r7
 80254b4:	bd80      	pop	{r7, pc}

080254b6 <_ZNKSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80254b6:	b480      	push	{r7}
 80254b8:	b083      	sub	sp, #12
 80254ba:	af00      	add	r7, sp, #0
 80254bc:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80254be:	687b      	ldr	r3, [r7, #4]
 80254c0:	4618      	mov	r0, r3
 80254c2:	370c      	adds	r7, #12
 80254c4:	46bd      	mov	sp, r7
 80254c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80254ca:	4770      	bx	lr

080254cc <_ZNSaIP7RequestEC1IS_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 80254cc:	b580      	push	{r7, lr}
 80254ce:	b082      	sub	sp, #8
 80254d0:	af00      	add	r7, sp, #0
 80254d2:	6078      	str	r0, [r7, #4]
 80254d4:	6039      	str	r1, [r7, #0]
 80254d6:	6878      	ldr	r0, [r7, #4]
 80254d8:	f001 fa44 	bl	8026964 <_ZN9__gnu_cxx13new_allocatorIP7RequestEC1Ev>
 80254dc:	687b      	ldr	r3, [r7, #4]
 80254de:	4618      	mov	r0, r3
 80254e0:	3708      	adds	r7, #8
 80254e2:	46bd      	mov	sp, r7
 80254e4:	bd80      	pop	{r7, pc}

080254e6 <_ZN9__gnu_cxx13new_allocatorIP7RequestED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80254e6:	b480      	push	{r7}
 80254e8:	b083      	sub	sp, #12
 80254ea:	af00      	add	r7, sp, #0
 80254ec:	6078      	str	r0, [r7, #4]
 80254ee:	687b      	ldr	r3, [r7, #4]
 80254f0:	4618      	mov	r0, r3
 80254f2:	370c      	adds	r7, #12
 80254f4:	46bd      	mov	sp, r7
 80254f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80254fa:	4770      	bx	lr

080254fc <_ZN9__gnu_cxx13new_allocatorIP7RequestE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 80254fc:	b580      	push	{r7, lr}
 80254fe:	b084      	sub	sp, #16
 8025500:	af00      	add	r7, sp, #0
 8025502:	60f8      	str	r0, [r7, #12]
 8025504:	60b9      	str	r1, [r7, #8]
 8025506:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8025508:	687b      	ldr	r3, [r7, #4]
 802550a:	009b      	lsls	r3, r3, #2
 802550c:	4619      	mov	r1, r3
 802550e:	68b8      	ldr	r0, [r7, #8]
 8025510:	f017 fca8 	bl	803ce64 <_ZdlPvj>
      }
 8025514:	bf00      	nop
 8025516:	3710      	adds	r7, #16
 8025518:	46bd      	mov	sp, r7
 802551a:	bd80      	pop	{r7, pc}

0802551c <_ZNSt5dequeI7RequestSaIS0_EE14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 802551c:	b580      	push	{r7, lr}
 802551e:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 8025520:	2014      	movs	r0, #20
 8025522:	f7fb fcae 	bl	8020e82 <_ZSt16__deque_buf_sizej>
 8025526:	4603      	mov	r3, r0
 8025528:	4618      	mov	r0, r3
 802552a:	bd80      	pop	{r7, pc}

0802552c <_ZSt8_DestroyIP7RequestS0_EvT_S2_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 802552c:	b580      	push	{r7, lr}
 802552e:	b084      	sub	sp, #16
 8025530:	af00      	add	r7, sp, #0
 8025532:	60f8      	str	r0, [r7, #12]
 8025534:	60b9      	str	r1, [r7, #8]
 8025536:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8025538:	68b9      	ldr	r1, [r7, #8]
 802553a:	68f8      	ldr	r0, [r7, #12]
 802553c:	f001 fa1d 	bl	802697a <_ZSt8_DestroyIP7RequestEvT_S2_>
    }
 8025540:	bf00      	nop
 8025542:	3710      	adds	r7, #16
 8025544:	46bd      	mov	sp, r7
 8025546:	bd80      	pop	{r7, pc}

08025548 <_ZNSaI8ResponceEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8025548:	b580      	push	{r7, lr}
 802554a:	b082      	sub	sp, #8
 802554c:	af00      	add	r7, sp, #0
 802554e:	6078      	str	r0, [r7, #4]
 8025550:	6878      	ldr	r0, [r7, #4]
 8025552:	f001 fa1f 	bl	8026994 <_ZN9__gnu_cxx13new_allocatorI8ResponceEC1Ev>
 8025556:	687b      	ldr	r3, [r7, #4]
 8025558:	4618      	mov	r0, r3
 802555a:	3708      	adds	r7, #8
 802555c:	46bd      	mov	sp, r7
 802555e:	bd80      	pop	{r7, pc}

08025560 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 8025560:	b580      	push	{r7, lr}
 8025562:	b082      	sub	sp, #8
 8025564:	af00      	add	r7, sp, #0
 8025566:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 8025568:	687b      	ldr	r3, [r7, #4]
 802556a:	2200      	movs	r2, #0
 802556c:	601a      	str	r2, [r3, #0]
 802556e:	687b      	ldr	r3, [r7, #4]
 8025570:	2200      	movs	r2, #0
 8025572:	605a      	str	r2, [r3, #4]
 8025574:	687b      	ldr	r3, [r7, #4]
 8025576:	3308      	adds	r3, #8
 8025578:	4618      	mov	r0, r3
 802557a:	f001 fa16 	bl	80269aa <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1Ev>
 802557e:	687b      	ldr	r3, [r7, #4]
 8025580:	3318      	adds	r3, #24
 8025582:	4618      	mov	r0, r3
 8025584:	f001 fa11 	bl	80269aa <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1Ev>
	{ }
 8025588:	687b      	ldr	r3, [r7, #4]
 802558a:	4618      	mov	r0, r3
 802558c:	3708      	adds	r7, #8
 802558e:	46bd      	mov	sp, r7
 8025590:	bd80      	pop	{r7, pc}

08025592 <_ZN9__gnu_cxx13new_allocatorI8ResponceED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8025592:	b480      	push	{r7}
 8025594:	b083      	sub	sp, #12
 8025596:	af00      	add	r7, sp, #0
 8025598:	6078      	str	r0, [r7, #4]
 802559a:	687b      	ldr	r3, [r7, #4]
 802559c:	4618      	mov	r0, r3
 802559e:	370c      	adds	r7, #12
 80255a0:	46bd      	mov	sp, r7
 80255a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80255a6:	4770      	bx	lr

080255a8 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 80255a8:	b590      	push	{r4, r7, lr}
 80255aa:	b085      	sub	sp, #20
 80255ac:	af00      	add	r7, sp, #0
 80255ae:	6078      	str	r0, [r7, #4]
 80255b0:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 80255b2:	f107 030c 	add.w	r3, r7, #12
 80255b6:	6879      	ldr	r1, [r7, #4]
 80255b8:	4618      	mov	r0, r3
 80255ba:	f000 f858 	bl	802566e <_ZNKSt11_Deque_baseI8ResponceSaIS0_EE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 80255be:	f107 030c 	add.w	r3, r7, #12
 80255c2:	6839      	ldr	r1, [r7, #0]
 80255c4:	4618      	mov	r0, r3
 80255c6:	f001 fa07 	bl	80269d8 <_ZNSt16allocator_traitsISaIP8ResponceEE8allocateERS2_j>
 80255ca:	4604      	mov	r4, r0
 80255cc:	bf00      	nop
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 80255ce:	f107 030c 	add.w	r3, r7, #12
 80255d2:	4618      	mov	r0, r3
 80255d4:	f000 f85c 	bl	8025690 <_ZNSaIP8ResponceED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 80255d8:	4623      	mov	r3, r4
      }
 80255da:	4618      	mov	r0, r3
 80255dc:	3714      	adds	r7, #20
 80255de:	46bd      	mov	sp, r7
 80255e0:	bd90      	pop	{r4, r7, pc}

080255e2 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE15_M_create_nodesEPPS0_S4_>:
    _Deque_base<_Tp, _Alloc>::
 80255e2:	b580      	push	{r7, lr}
 80255e4:	b086      	sub	sp, #24
 80255e6:	af00      	add	r7, sp, #0
 80255e8:	60f8      	str	r0, [r7, #12]
 80255ea:	60b9      	str	r1, [r7, #8]
 80255ec:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 80255ee:	68bb      	ldr	r3, [r7, #8]
 80255f0:	617b      	str	r3, [r7, #20]
 80255f2:	697a      	ldr	r2, [r7, #20]
 80255f4:	687b      	ldr	r3, [r7, #4]
 80255f6:	429a      	cmp	r2, r3
 80255f8:	d209      	bcs.n	802560e <_ZNSt11_Deque_baseI8ResponceSaIS0_EE15_M_create_nodesEPPS0_S4_+0x2c>
	    *__cur = this->_M_allocate_node();
 80255fa:	68f8      	ldr	r0, [r7, #12]
 80255fc:	f000 f9cc 	bl	8025998 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_M_allocate_nodeEv>
 8025600:	4602      	mov	r2, r0
 8025602:	697b      	ldr	r3, [r7, #20]
 8025604:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8025606:	697b      	ldr	r3, [r7, #20]
 8025608:	3304      	adds	r3, #4
 802560a:	617b      	str	r3, [r7, #20]
 802560c:	e7f1      	b.n	80255f2 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE15_M_create_nodesEPPS0_S4_+0x10>
    }
 802560e:	bf00      	nop
 8025610:	3718      	adds	r7, #24
 8025612:	46bd      	mov	sp, r7
 8025614:	bd80      	pop	{r7, pc}

08025616 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E11_M_set_nodeEPS2_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 8025616:	b590      	push	{r4, r7, lr}
 8025618:	b083      	sub	sp, #12
 802561a:	af00      	add	r7, sp, #0
 802561c:	6078      	str	r0, [r7, #4]
 802561e:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 8025620:	687b      	ldr	r3, [r7, #4]
 8025622:	683a      	ldr	r2, [r7, #0]
 8025624:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 8025626:	683b      	ldr	r3, [r7, #0]
 8025628:	681a      	ldr	r2, [r3, #0]
 802562a:	687b      	ldr	r3, [r7, #4]
 802562c:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 802562e:	687b      	ldr	r3, [r7, #4]
 8025630:	685c      	ldr	r4, [r3, #4]
 8025632:	f000 facf 	bl	8025bd4 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E14_S_buffer_sizeEv>
 8025636:	4603      	mov	r3, r0
 8025638:	011b      	lsls	r3, r3, #4
 802563a:	18e2      	adds	r2, r4, r3
 802563c:	687b      	ldr	r3, [r7, #4]
 802563e:	609a      	str	r2, [r3, #8]
      }
 8025640:	bf00      	nop
 8025642:	370c      	adds	r7, #12
 8025644:	46bd      	mov	sp, r7
 8025646:	bd90      	pop	{r4, r7, pc}

08025648 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE18_M_deallocate_nodeEPS0_>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 8025648:	b590      	push	{r4, r7, lr}
 802564a:	b083      	sub	sp, #12
 802564c:	af00      	add	r7, sp, #0
 802564e:	6078      	str	r0, [r7, #4]
 8025650:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 8025652:	687c      	ldr	r4, [r7, #4]
 8025654:	2010      	movs	r0, #16
 8025656:	f7fb fc14 	bl	8020e82 <_ZSt16__deque_buf_sizej>
 802565a:	4603      	mov	r3, r0
 802565c:	461a      	mov	r2, r3
 802565e:	6839      	ldr	r1, [r7, #0]
 8025660:	4620      	mov	r0, r4
 8025662:	f001 f9c8 	bl	80269f6 <_ZNSt16allocator_traitsISaI8ResponceEE10deallocateERS1_PS0_j>
      }
 8025666:	bf00      	nop
 8025668:	370c      	adds	r7, #12
 802566a:	46bd      	mov	sp, r7
 802566c:	bd90      	pop	{r4, r7, pc}

0802566e <_ZNKSt11_Deque_baseI8ResponceSaIS0_EE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 802566e:	b580      	push	{r7, lr}
 8025670:	b082      	sub	sp, #8
 8025672:	af00      	add	r7, sp, #0
 8025674:	6078      	str	r0, [r7, #4]
 8025676:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 8025678:	6838      	ldr	r0, [r7, #0]
 802567a:	f001 f9cb 	bl	8026a14 <_ZNKSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 802567e:	4603      	mov	r3, r0
 8025680:	4619      	mov	r1, r3
 8025682:	6878      	ldr	r0, [r7, #4]
 8025684:	f001 f9d1 	bl	8026a2a <_ZNSaIP8ResponceEC1IS_EERKSaIT_E>
 8025688:	6878      	ldr	r0, [r7, #4]
 802568a:	3708      	adds	r7, #8
 802568c:	46bd      	mov	sp, r7
 802568e:	bd80      	pop	{r7, pc}

08025690 <_ZNSaIP8ResponceED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8025690:	b580      	push	{r7, lr}
 8025692:	b082      	sub	sp, #8
 8025694:	af00      	add	r7, sp, #0
 8025696:	6078      	str	r0, [r7, #4]
 8025698:	6878      	ldr	r0, [r7, #4]
 802569a:	f001 f9d3 	bl	8026a44 <_ZN9__gnu_cxx13new_allocatorIP8ResponceED1Ev>
 802569e:	687b      	ldr	r3, [r7, #4]
 80256a0:	4618      	mov	r0, r3
 80256a2:	3708      	adds	r7, #8
 80256a4:	46bd      	mov	sp, r7
 80256a6:	bd80      	pop	{r7, pc}

080256a8 <_ZNSt16allocator_traitsISaIP8ResponceEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80256a8:	b580      	push	{r7, lr}
 80256aa:	b084      	sub	sp, #16
 80256ac:	af00      	add	r7, sp, #0
 80256ae:	60f8      	str	r0, [r7, #12]
 80256b0:	60b9      	str	r1, [r7, #8]
 80256b2:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80256b4:	687a      	ldr	r2, [r7, #4]
 80256b6:	68b9      	ldr	r1, [r7, #8]
 80256b8:	68f8      	ldr	r0, [r7, #12]
 80256ba:	f001 f9ce 	bl	8026a5a <_ZN9__gnu_cxx13new_allocatorIP8ResponceE10deallocateEPS2_j>
 80256be:	bf00      	nop
 80256c0:	3710      	adds	r7, #16
 80256c2:	46bd      	mov	sp, r7
 80256c4:	bd80      	pop	{r7, pc}

080256c6 <_ZNSt5dequeI8ResponceSaIS0_EE14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 80256c6:	b580      	push	{r7, lr}
 80256c8:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 80256ca:	2010      	movs	r0, #16
 80256cc:	f7fb fbd9 	bl	8020e82 <_ZSt16__deque_buf_sizej>
 80256d0:	4603      	mov	r3, r0
 80256d2:	4618      	mov	r0, r3
 80256d4:	bd80      	pop	{r7, pc}

080256d6 <_ZSt8_DestroyIP8ResponceS0_EvT_S2_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80256d6:	b580      	push	{r7, lr}
 80256d8:	b084      	sub	sp, #16
 80256da:	af00      	add	r7, sp, #0
 80256dc:	60f8      	str	r0, [r7, #12]
 80256de:	60b9      	str	r1, [r7, #8]
 80256e0:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 80256e2:	68b9      	ldr	r1, [r7, #8]
 80256e4:	68f8      	ldr	r0, [r7, #12]
 80256e6:	f001 f9c8 	bl	8026a7a <_ZSt8_DestroyIP8ResponceEvT_S2_>
    }
 80256ea:	bf00      	nop
 80256ec:	3710      	adds	r7, #16
 80256ee:	46bd      	mov	sp, r7
 80256f0:	bd80      	pop	{r7, pc}

080256f2 <_ZN9__gnu_cxx13new_allocatorIhE10deallocateEPhj>:
      deallocate(_Tp* __p, size_type __t)
 80256f2:	b580      	push	{r7, lr}
 80256f4:	b084      	sub	sp, #16
 80256f6:	af00      	add	r7, sp, #0
 80256f8:	60f8      	str	r0, [r7, #12]
 80256fa:	60b9      	str	r1, [r7, #8]
 80256fc:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80256fe:	6879      	ldr	r1, [r7, #4]
 8025700:	68b8      	ldr	r0, [r7, #8]
 8025702:	f017 fbaf 	bl	803ce64 <_ZdlPvj>
      }
 8025706:	bf00      	nop
 8025708:	3710      	adds	r7, #16
 802570a:	46bd      	mov	sp, r7
 802570c:	bd80      	pop	{r7, pc}

0802570e <_ZNSt12_Destroy_auxILb1EE9__destroyIPhEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 802570e:	b480      	push	{r7}
 8025710:	b083      	sub	sp, #12
 8025712:	af00      	add	r7, sp, #0
 8025714:	6078      	str	r0, [r7, #4]
 8025716:	6039      	str	r1, [r7, #0]
 8025718:	bf00      	nop
 802571a:	370c      	adds	r7, #12
 802571c:	46bd      	mov	sp, r7
 802571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025722:	4770      	bx	lr

08025724 <_ZNSt5dequeI7RequestSaIS0_EE11_S_max_sizeERKS1_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8025724:	b580      	push	{r7, lr}
 8025726:	b084      	sub	sp, #16
 8025728:	af00      	add	r7, sp, #0
 802572a:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 802572c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8025730:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8025732:	6878      	ldr	r0, [r7, #4]
 8025734:	f001 f9ae 	bl	8026a94 <_ZNSt16allocator_traitsISaI7RequestEE8max_sizeERKS1_>
 8025738:	4603      	mov	r3, r0
 802573a:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 802573c:	f107 0208 	add.w	r2, r7, #8
 8025740:	f107 030c 	add.w	r3, r7, #12
 8025744:	4611      	mov	r1, r2
 8025746:	4618      	mov	r0, r3
 8025748:	f001 f9b0 	bl	8026aac <_ZSt3minIjERKT_S2_S2_>
 802574c:	4603      	mov	r3, r0
 802574e:	681b      	ldr	r3, [r3, #0]
      }
 8025750:	4618      	mov	r0, r3
 8025752:	3710      	adds	r7, #16
 8025754:	46bd      	mov	sp, r7
 8025756:	bd80      	pop	{r7, pc}

08025758 <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb>:
	}
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
 8025758:	b590      	push	{r4, r7, lr}
 802575a:	b08b      	sub	sp, #44	; 0x2c
 802575c:	af00      	add	r7, sp, #0
 802575e:	60f8      	str	r0, [r7, #12]
 8025760:	60b9      	str	r1, [r7, #8]
 8025762:	4613      	mov	r3, r2
 8025764:	71fb      	strb	r3, [r7, #7]
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 8025766:	68fb      	ldr	r3, [r7, #12]
 8025768:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 802576a:	68fb      	ldr	r3, [r7, #12]
 802576c:	695b      	ldr	r3, [r3, #20]
 802576e:	1ad3      	subs	r3, r2, r3
 8025770:	109b      	asrs	r3, r3, #2
 8025772:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 8025774:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 8025776:	68bb      	ldr	r3, [r7, #8]
 8025778:	6a3a      	ldr	r2, [r7, #32]
 802577a:	4413      	add	r3, r2
 802577c:	61fb      	str	r3, [r7, #28]

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 802577e:	68fb      	ldr	r3, [r7, #12]
 8025780:	685a      	ldr	r2, [r3, #4]
 8025782:	69fb      	ldr	r3, [r7, #28]
 8025784:	005b      	lsls	r3, r3, #1
 8025786:	429a      	cmp	r2, r3
 8025788:	d92d      	bls.n	80257e6 <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb+0x8e>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 802578a:	68fb      	ldr	r3, [r7, #12]
 802578c:	681a      	ldr	r2, [r3, #0]
 802578e:	68fb      	ldr	r3, [r7, #12]
 8025790:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 8025792:	69fb      	ldr	r3, [r7, #28]
 8025794:	1acb      	subs	r3, r1, r3
 8025796:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8025798:	0099      	lsls	r1, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 802579a:	79fb      	ldrb	r3, [r7, #7]
 802579c:	2b00      	cmp	r3, #0
 802579e:	d002      	beq.n	80257a6 <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb+0x4e>
 80257a0:	68bb      	ldr	r3, [r7, #8]
 80257a2:	009b      	lsls	r3, r3, #2
 80257a4:	e000      	b.n	80257a8 <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb+0x50>
 80257a6:	2300      	movs	r3, #0
 80257a8:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 80257aa:	4413      	add	r3, r2
 80257ac:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 80257ae:	68fb      	ldr	r3, [r7, #12]
 80257b0:	695b      	ldr	r3, [r3, #20]
 80257b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80257b4:	429a      	cmp	r2, r3
 80257b6:	d209      	bcs.n	80257cc <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 80257b8:	68fb      	ldr	r3, [r7, #12]
 80257ba:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 80257bc:	68fb      	ldr	r3, [r7, #12]
 80257be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 80257c0:	3304      	adds	r3, #4
 80257c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80257c4:	4619      	mov	r1, r3
 80257c6:	f001 f985 	bl	8026ad4 <_ZSt4copyIPP7RequestS2_ET0_T_S4_S3_>
 80257ca:	e048      	b.n	802585e <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb+0x106>
		      __new_nstart);
	  else
	    std::copy_backward(this->_M_impl._M_start._M_node,
 80257cc:	68fb      	ldr	r3, [r7, #12]
 80257ce:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 80257d0:	68fb      	ldr	r3, [r7, #12]
 80257d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 80257d4:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 80257d6:	6a3b      	ldr	r3, [r7, #32]
 80257d8:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 80257da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80257dc:	4413      	add	r3, r2
 80257de:	461a      	mov	r2, r3
 80257e0:	f001 f990 	bl	8026b04 <_ZSt13copy_backwardIPP7RequestS2_ET0_T_S4_S3_>
 80257e4:	e03b      	b.n	802585e <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb+0x106>
	}
      else
	{
	  size_type __new_map_size = this->_M_impl._M_map_size
 80257e6:	68fb      	ldr	r3, [r7, #12]
 80257e8:	685c      	ldr	r4, [r3, #4]
				     + std::max(this->_M_impl._M_map_size,
 80257ea:	68fb      	ldr	r3, [r7, #12]
 80257ec:	3304      	adds	r3, #4
 80257ee:	f107 0208 	add.w	r2, r7, #8
 80257f2:	4611      	mov	r1, r2
 80257f4:	4618      	mov	r0, r3
 80257f6:	f7fe fe04 	bl	8024402 <_ZSt3maxIjERKT_S2_S2_>
 80257fa:	4603      	mov	r3, r0
 80257fc:	681b      	ldr	r3, [r3, #0]
 80257fe:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 8025800:	3302      	adds	r3, #2
 8025802:	61bb      	str	r3, [r7, #24]
						__nodes_to_add) + 2;

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 8025804:	68fb      	ldr	r3, [r7, #12]
 8025806:	69b9      	ldr	r1, [r7, #24]
 8025808:	4618      	mov	r0, r3
 802580a:	f7fe fe0e 	bl	802442a <_ZNSt11_Deque_baseI7RequestSaIS0_EE15_M_allocate_mapEj>
 802580e:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8025810:	69ba      	ldr	r2, [r7, #24]
 8025812:	69fb      	ldr	r3, [r7, #28]
 8025814:	1ad3      	subs	r3, r2, r3
 8025816:	085b      	lsrs	r3, r3, #1
 8025818:	009a      	lsls	r2, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 802581a:	79fb      	ldrb	r3, [r7, #7]
 802581c:	2b00      	cmp	r3, #0
 802581e:	d002      	beq.n	8025826 <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb+0xce>
 8025820:	68bb      	ldr	r3, [r7, #8]
 8025822:	009b      	lsls	r3, r3, #2
 8025824:	e000      	b.n	8025828 <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb+0xd0>
 8025826:	2300      	movs	r3, #0
 8025828:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 802582a:	697a      	ldr	r2, [r7, #20]
 802582c:	4413      	add	r3, r2
 802582e:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8025830:	68fb      	ldr	r3, [r7, #12]
 8025832:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 8025834:	68fb      	ldr	r3, [r7, #12]
 8025836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8025838:	3304      	adds	r3, #4
 802583a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802583c:	4619      	mov	r1, r3
 802583e:	f001 f949 	bl	8026ad4 <_ZSt4copyIPP7RequestS2_ET0_T_S4_S3_>
		    __new_nstart);
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8025842:	68f8      	ldr	r0, [r7, #12]
 8025844:	68fb      	ldr	r3, [r7, #12]
 8025846:	6819      	ldr	r1, [r3, #0]
 8025848:	68fb      	ldr	r3, [r7, #12]
 802584a:	685b      	ldr	r3, [r3, #4]
 802584c:	461a      	mov	r2, r3
 802584e:	f7fd fd3e 	bl	80232ce <_ZNSt11_Deque_baseI7RequestSaIS0_EE17_M_deallocate_mapEPPS0_j>

	  this->_M_impl._M_map = __new_map;
 8025852:	68fb      	ldr	r3, [r7, #12]
 8025854:	697a      	ldr	r2, [r7, #20]
 8025856:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 8025858:	68fb      	ldr	r3, [r7, #12]
 802585a:	69ba      	ldr	r2, [r7, #24]
 802585c:	605a      	str	r2, [r3, #4]
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
 802585e:	68fb      	ldr	r3, [r7, #12]
 8025860:	3308      	adds	r3, #8
 8025862:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8025864:	4618      	mov	r0, r3
 8025866:	f7fe fe17 	bl	8024498 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 802586a:	68fb      	ldr	r3, [r7, #12]
 802586c:	f103 0018 	add.w	r0, r3, #24
 8025870:	6a3a      	ldr	r2, [r7, #32]
 8025872:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8025876:	4413      	add	r3, r2
 8025878:	009b      	lsls	r3, r3, #2
 802587a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802587c:	4413      	add	r3, r2
 802587e:	4619      	mov	r1, r3
 8025880:	f7fe fe0a 	bl	8024498 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E11_M_set_nodeEPS2_>
    }
 8025884:	bf00      	nop
 8025886:	372c      	adds	r7, #44	; 0x2c
 8025888:	46bd      	mov	sp, r7
 802588a:	bd90      	pop	{r4, r7, pc}

0802588c <_ZNSt16allocator_traitsISaI7RequestEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 802588c:	b580      	push	{r7, lr}
 802588e:	b082      	sub	sp, #8
 8025890:	af00      	add	r7, sp, #0
 8025892:	6078      	str	r0, [r7, #4]
 8025894:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8025896:	2200      	movs	r2, #0
 8025898:	6839      	ldr	r1, [r7, #0]
 802589a:	6878      	ldr	r0, [r7, #4]
 802589c:	f001 f94a 	bl	8026b34 <_ZN9__gnu_cxx13new_allocatorI7RequestE8allocateEjPKv>
 80258a0:	4603      	mov	r3, r0
 80258a2:	4618      	mov	r0, r3
 80258a4:	3708      	adds	r7, #8
 80258a6:	46bd      	mov	sp, r7
 80258a8:	bd80      	pop	{r7, pc}

080258aa <_ZNSt12_Vector_baseIhSaIhEEC1ERKS0_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 80258aa:	b580      	push	{r7, lr}
 80258ac:	b082      	sub	sp, #8
 80258ae:	af00      	add	r7, sp, #0
 80258b0:	6078      	str	r0, [r7, #4]
 80258b2:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 80258b4:	687b      	ldr	r3, [r7, #4]
 80258b6:	6839      	ldr	r1, [r7, #0]
 80258b8:	4618      	mov	r0, r3
 80258ba:	f001 f95c 	bl	8026b76 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1ERKS0_>
 80258be:	687b      	ldr	r3, [r7, #4]
 80258c0:	4618      	mov	r0, r3
 80258c2:	3708      	adds	r7, #8
 80258c4:	46bd      	mov	sp, r7
 80258c6:	bd80      	pop	{r7, pc}

080258c8 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_data12_M_copy_dataERKS2_>:
	_M_copy_data(_Vector_impl_data const& __x) _GLIBCXX_NOEXCEPT
 80258c8:	b480      	push	{r7}
 80258ca:	b083      	sub	sp, #12
 80258cc:	af00      	add	r7, sp, #0
 80258ce:	6078      	str	r0, [r7, #4]
 80258d0:	6039      	str	r1, [r7, #0]
	  _M_start = __x._M_start;
 80258d2:	683b      	ldr	r3, [r7, #0]
 80258d4:	681a      	ldr	r2, [r3, #0]
 80258d6:	687b      	ldr	r3, [r7, #4]
 80258d8:	601a      	str	r2, [r3, #0]
	  _M_finish = __x._M_finish;
 80258da:	683b      	ldr	r3, [r7, #0]
 80258dc:	685a      	ldr	r2, [r3, #4]
 80258de:	687b      	ldr	r3, [r7, #4]
 80258e0:	605a      	str	r2, [r3, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 80258e2:	683b      	ldr	r3, [r7, #0]
 80258e4:	689a      	ldr	r2, [r3, #8]
 80258e6:	687b      	ldr	r3, [r7, #4]
 80258e8:	609a      	str	r2, [r3, #8]
	}
 80258ea:	bf00      	nop
 80258ec:	370c      	adds	r7, #12
 80258ee:	46bd      	mov	sp, r7
 80258f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80258f4:	4770      	bx	lr

080258f6 <_ZSt18__do_alloc_on_moveISaIhEEvRT_S2_St17integral_constantIbLb1EE>:
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 80258f6:	b580      	push	{r7, lr}
 80258f8:	b084      	sub	sp, #16
 80258fa:	af00      	add	r7, sp, #0
 80258fc:	60f8      	str	r0, [r7, #12]
 80258fe:	60b9      	str	r1, [r7, #8]
 8025900:	713a      	strb	r2, [r7, #4]
    { __one = std::move(__two); }
 8025902:	68b8      	ldr	r0, [r7, #8]
 8025904:	f001 f949 	bl	8026b9a <_ZSt4moveIRSaIhEEONSt16remove_referenceIT_E4typeEOS3_>
 8025908:	bf00      	nop
 802590a:	3710      	adds	r7, #16
 802590c:	46bd      	mov	sp, r7
 802590e:	bd80      	pop	{r7, pc}

08025910 <_ZN9__gnu_cxx13new_allocatorI8ResponceE9constructIS1_JS1_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8025910:	b590      	push	{r4, r7, lr}
 8025912:	b085      	sub	sp, #20
 8025914:	af00      	add	r7, sp, #0
 8025916:	60f8      	str	r0, [r7, #12]
 8025918:	60b9      	str	r1, [r7, #8]
 802591a:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 802591c:	6878      	ldr	r0, [r7, #4]
 802591e:	f7fd ff10 	bl	8023742 <_ZSt7forwardI8ResponceEOT_RNSt16remove_referenceIS1_E4typeE>
 8025922:	4604      	mov	r4, r0
 8025924:	68bb      	ldr	r3, [r7, #8]
 8025926:	4619      	mov	r1, r3
 8025928:	2010      	movs	r0, #16
 802592a:	f7fb fa9e 	bl	8020e6a <_ZnwjPv>
 802592e:	4603      	mov	r3, r0
 8025930:	4621      	mov	r1, r4
 8025932:	4618      	mov	r0, r3
 8025934:	f7fb fc67 	bl	8021206 <_ZN8ResponceC1EOS_>
 8025938:	bf00      	nop
 802593a:	3714      	adds	r7, #20
 802593c:	46bd      	mov	sp, r7
 802593e:	bd90      	pop	{r4, r7, pc}

08025940 <_ZNKSt5dequeI8ResponceSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8025940:	b580      	push	{r7, lr}
 8025942:	b082      	sub	sp, #8
 8025944:	af00      	add	r7, sp, #0
 8025946:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8025948:	687b      	ldr	r3, [r7, #4]
 802594a:	4618      	mov	r0, r3
 802594c:	f001 f862 	bl	8026a14 <_ZNKSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 8025950:	4603      	mov	r3, r0
 8025952:	4618      	mov	r0, r3
 8025954:	f001 f92c 	bl	8026bb0 <_ZNSt5dequeI8ResponceSaIS0_EE11_S_max_sizeERKS1_>
 8025958:	4603      	mov	r3, r0
 802595a:	4618      	mov	r0, r3
 802595c:	3708      	adds	r7, #8
 802595e:	46bd      	mov	sp, r7
 8025960:	bd80      	pop	{r7, pc}

08025962 <_ZNSt5dequeI8ResponceSaIS0_EE22_M_reserve_map_at_backEj>:
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 8025962:	b580      	push	{r7, lr}
 8025964:	b082      	sub	sp, #8
 8025966:	af00      	add	r7, sp, #0
 8025968:	6078      	str	r0, [r7, #4]
 802596a:	6039      	str	r1, [r7, #0]
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 802596c:	683b      	ldr	r3, [r7, #0]
 802596e:	1c5a      	adds	r2, r3, #1
 8025970:	687b      	ldr	r3, [r7, #4]
 8025972:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 8025974:	6879      	ldr	r1, [r7, #4]
 8025976:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8025978:	6879      	ldr	r1, [r7, #4]
 802597a:	6809      	ldr	r1, [r1, #0]
 802597c:	1a41      	subs	r1, r0, r1
 802597e:	1089      	asrs	r1, r1, #2
 8025980:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8025982:	429a      	cmp	r2, r3
 8025984:	d904      	bls.n	8025990 <_ZNSt5dequeI8ResponceSaIS0_EE22_M_reserve_map_at_backEj+0x2e>
	  _M_reallocate_map(__nodes_to_add, false);
 8025986:	2200      	movs	r2, #0
 8025988:	6839      	ldr	r1, [r7, #0]
 802598a:	6878      	ldr	r0, [r7, #4]
 802598c:	f001 f92a 	bl	8026be4 <_ZNSt5dequeI8ResponceSaIS0_EE17_M_reallocate_mapEjb>
      }
 8025990:	bf00      	nop
 8025992:	3708      	adds	r7, #8
 8025994:	46bd      	mov	sp, r7
 8025996:	bd80      	pop	{r7, pc}

08025998 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_M_allocate_nodeEv>:
      _M_allocate_node()
 8025998:	b590      	push	{r4, r7, lr}
 802599a:	b083      	sub	sp, #12
 802599c:	af00      	add	r7, sp, #0
 802599e:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 80259a0:	687c      	ldr	r4, [r7, #4]
 80259a2:	2010      	movs	r0, #16
 80259a4:	f7fb fa6d 	bl	8020e82 <_ZSt16__deque_buf_sizej>
 80259a8:	4603      	mov	r3, r0
 80259aa:	4619      	mov	r1, r3
 80259ac:	4620      	mov	r0, r4
 80259ae:	f001 f9b3 	bl	8026d18 <_ZNSt16allocator_traitsISaI8ResponceEE8allocateERS1_j>
 80259b2:	4603      	mov	r3, r0
      }
 80259b4:	4618      	mov	r0, r3
 80259b6:	370c      	adds	r7, #12
 80259b8:	46bd      	mov	sp, r7
 80259ba:	bd90      	pop	{r4, r7, pc}

080259bc <_ZN9__gnu_cxx13new_allocatorI8ResponceE7destroyIS1_EEvPT_>:
	destroy(_Up* __p)
 80259bc:	b580      	push	{r7, lr}
 80259be:	b082      	sub	sp, #8
 80259c0:	af00      	add	r7, sp, #0
 80259c2:	6078      	str	r0, [r7, #4]
 80259c4:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 80259c6:	6838      	ldr	r0, [r7, #0]
 80259c8:	f7fb fb86 	bl	80210d8 <_ZN8ResponceD1Ev>
 80259cc:	bf00      	nop
 80259ce:	3708      	adds	r7, #8
 80259d0:	46bd      	mov	sp, r7
 80259d2:	bd80      	pop	{r7, pc}

080259d4 <_ZNSt6vectorIhSaIhEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 80259d4:	b580      	push	{r7, lr}
 80259d6:	b084      	sub	sp, #16
 80259d8:	af00      	add	r7, sp, #0
 80259da:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 80259dc:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80259e0:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 80259e2:	6878      	ldr	r0, [r7, #4]
 80259e4:	f001 f9a7 	bl	8026d36 <_ZNSt16allocator_traitsISaIhEE8max_sizeERKS0_>
 80259e8:	4603      	mov	r3, r0
 80259ea:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 80259ec:	f107 0208 	add.w	r2, r7, #8
 80259f0:	f107 030c 	add.w	r3, r7, #12
 80259f4:	4611      	mov	r1, r2
 80259f6:	4618      	mov	r0, r3
 80259f8:	f001 f858 	bl	8026aac <_ZSt3minIjERKT_S2_S2_>
 80259fc:	4603      	mov	r3, r0
 80259fe:	681b      	ldr	r3, [r3, #0]
      }
 8025a00:	4618      	mov	r0, r3
 8025a02:	3710      	adds	r7, #16
 8025a04:	46bd      	mov	sp, r7
 8025a06:	bd80      	pop	{r7, pc}

08025a08 <_ZSt25__uninitialized_default_nIPhjET_S1_T0_>:
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
 8025a08:	b580      	push	{r7, lr}
 8025a0a:	b084      	sub	sp, #16
 8025a0c:	af00      	add	r7, sp, #0
 8025a0e:	6078      	str	r0, [r7, #4]
 8025a10:	6039      	str	r1, [r7, #0]
      const bool __assignable = is_copy_assignable<_ValueType>::value;
 8025a12:	2301      	movs	r3, #1
 8025a14:	73fb      	strb	r3, [r7, #15]
	__uninit_default_n(__first, __n);
 8025a16:	6839      	ldr	r1, [r7, #0]
 8025a18:	6878      	ldr	r0, [r7, #4]
 8025a1a:	f001 f998 	bl	8026d4e <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPhjEET_S3_T0_>
 8025a1e:	4603      	mov	r3, r0
    }
 8025a20:	4618      	mov	r0, r3
 8025a22:	3710      	adds	r7, #16
 8025a24:	46bd      	mov	sp, r7
 8025a26:	bd80      	pop	{r7, pc}

08025a28 <_ZNSt16allocator_traitsISaIhEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8025a28:	b580      	push	{r7, lr}
 8025a2a:	b082      	sub	sp, #8
 8025a2c:	af00      	add	r7, sp, #0
 8025a2e:	6078      	str	r0, [r7, #4]
 8025a30:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8025a32:	2200      	movs	r2, #0
 8025a34:	6839      	ldr	r1, [r7, #0]
 8025a36:	6878      	ldr	r0, [r7, #4]
 8025a38:	f001 f99c 	bl	8026d74 <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv>
 8025a3c:	4603      	mov	r3, r0
 8025a3e:	4618      	mov	r0, r3
 8025a40:	3708      	adds	r7, #8
 8025a42:	46bd      	mov	sp, r7
 8025a44:	bd80      	pop	{r7, pc}

08025a46 <_ZNSt6vectorIhSaIhEE14_S_do_relocateEPhS2_S2_RS0_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8025a46:	b580      	push	{r7, lr}
 8025a48:	b084      	sub	sp, #16
 8025a4a:	af00      	add	r7, sp, #0
 8025a4c:	60f8      	str	r0, [r7, #12]
 8025a4e:	60b9      	str	r1, [r7, #8]
 8025a50:	607a      	str	r2, [r7, #4]
 8025a52:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8025a54:	683b      	ldr	r3, [r7, #0]
 8025a56:	687a      	ldr	r2, [r7, #4]
 8025a58:	68b9      	ldr	r1, [r7, #8]
 8025a5a:	68f8      	ldr	r0, [r7, #12]
 8025a5c:	f001 f9a6 	bl	8026dac <_ZSt12__relocate_aIPhS0_SaIhEET0_T_S3_S2_RT1_>
 8025a60:	4603      	mov	r3, r0
      }
 8025a62:	4618      	mov	r0, r3
 8025a64:	3710      	adds	r7, #16
 8025a66:	46bd      	mov	sp, r7
 8025a68:	bd80      	pop	{r7, pc}

08025a6a <_ZSt32__make_move_if_noexcept_iteratorIhSt13move_iteratorIPhEET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 8025a6a:	b580      	push	{r7, lr}
 8025a6c:	b084      	sub	sp, #16
 8025a6e:	af00      	add	r7, sp, #0
 8025a70:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8025a72:	f107 030c 	add.w	r3, r7, #12
 8025a76:	6879      	ldr	r1, [r7, #4]
 8025a78:	4618      	mov	r0, r3
 8025a7a:	f001 f9b4 	bl	8026de6 <_ZNSt13move_iteratorIPhEC1ES0_>
 8025a7e:	68fb      	ldr	r3, [r7, #12]
 8025a80:	4618      	mov	r0, r3
 8025a82:	3710      	adds	r7, #16
 8025a84:	46bd      	mov	sp, r7
 8025a86:	bd80      	pop	{r7, pc}

08025a88 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPhES1_hET0_T_S4_S3_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8025a88:	b580      	push	{r7, lr}
 8025a8a:	b084      	sub	sp, #16
 8025a8c:	af00      	add	r7, sp, #0
 8025a8e:	60f8      	str	r0, [r7, #12]
 8025a90:	60b9      	str	r1, [r7, #8]
 8025a92:	607a      	str	r2, [r7, #4]
 8025a94:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8025a96:	687a      	ldr	r2, [r7, #4]
 8025a98:	68b9      	ldr	r1, [r7, #8]
 8025a9a:	68f8      	ldr	r0, [r7, #12]
 8025a9c:	f001 f9b5 	bl	8026e0a <_ZSt18uninitialized_copyISt13move_iteratorIPhES1_ET0_T_S4_S3_>
 8025aa0:	4603      	mov	r3, r0
 8025aa2:	4618      	mov	r0, r3
 8025aa4:	3710      	adds	r7, #16
 8025aa6:	46bd      	mov	sp, r7
 8025aa8:	bd80      	pop	{r7, pc}

08025aaa <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8025aaa:	b580      	push	{r7, lr}
 8025aac:	b086      	sub	sp, #24
 8025aae:	af00      	add	r7, sp, #0
 8025ab0:	60f8      	str	r0, [r7, #12]
 8025ab2:	60b9      	str	r1, [r7, #8]
 8025ab4:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8025ab6:	2301      	movs	r3, #1
 8025ab8:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8025aba:	687a      	ldr	r2, [r7, #4]
 8025abc:	68b9      	ldr	r1, [r7, #8]
 8025abe:	68f8      	ldr	r0, [r7, #12]
 8025ac0:	f001 f9b5 	bl	8026e2e <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhEET0_T_SC_SB_>
 8025ac4:	4603      	mov	r3, r0
    }
 8025ac6:	4618      	mov	r0, r3
 8025ac8:	3718      	adds	r7, #24
 8025aca:	46bd      	mov	sp, r7
 8025acc:	bd80      	pop	{r7, pc}

08025ace <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8025ace:	b580      	push	{r7, lr}
 8025ad0:	b082      	sub	sp, #8
 8025ad2:	af00      	add	r7, sp, #0
 8025ad4:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 8025ad6:	1d3b      	adds	r3, r7, #4
 8025ad8:	4618      	mov	r0, r3
 8025ada:	f001 f9b8 	bl	8026e4e <_ZNK9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEE4baseEv>
 8025ade:	4603      	mov	r3, r0
 8025ae0:	681b      	ldr	r3, [r3, #0]
 8025ae2:	4618      	mov	r0, r3
 8025ae4:	3708      	adds	r7, #8
 8025ae6:	46bd      	mov	sp, r7
 8025ae8:	bd80      	pop	{r7, pc}

08025aea <_ZSt12__niter_baseIPhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8025aea:	b580      	push	{r7, lr}
 8025aec:	b082      	sub	sp, #8
 8025aee:	af00      	add	r7, sp, #0
 8025af0:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 8025af2:	1d3b      	adds	r3, r7, #4
 8025af4:	4618      	mov	r0, r3
 8025af6:	f001 f9b5 	bl	8026e64 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 8025afa:	4603      	mov	r3, r0
 8025afc:	681b      	ldr	r3, [r3, #0]
 8025afe:	4618      	mov	r0, r3
 8025b00:	3708      	adds	r7, #8
 8025b02:	46bd      	mov	sp, r7
 8025b04:	bd80      	pop	{r7, pc}

08025b06 <_ZSt14__copy_move_a1ILb0EPKhPhET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8025b06:	b580      	push	{r7, lr}
 8025b08:	b084      	sub	sp, #16
 8025b0a:	af00      	add	r7, sp, #0
 8025b0c:	60f8      	str	r0, [r7, #12]
 8025b0e:	60b9      	str	r1, [r7, #8]
 8025b10:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8025b12:	687a      	ldr	r2, [r7, #4]
 8025b14:	68b9      	ldr	r1, [r7, #8]
 8025b16:	68f8      	ldr	r0, [r7, #12]
 8025b18:	f001 f9af 	bl	8026e7a <_ZSt14__copy_move_a2ILb0EPKhPhET1_T0_S4_S3_>
 8025b1c:	4603      	mov	r3, r0
 8025b1e:	4618      	mov	r0, r3
 8025b20:	3710      	adds	r7, #16
 8025b22:	46bd      	mov	sp, r7
 8025b24:	bd80      	pop	{r7, pc}

08025b26 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEES2_ET_S7_T0_>:
    __niter_wrap(_From __from, _To __res)
 8025b26:	b580      	push	{r7, lr}
 8025b28:	b082      	sub	sp, #8
 8025b2a:	af00      	add	r7, sp, #0
 8025b2c:	6078      	str	r0, [r7, #4]
 8025b2e:	6039      	str	r1, [r7, #0]
    { return __from + (__res - std::__niter_base(__from)); }
 8025b30:	6878      	ldr	r0, [r7, #4]
 8025b32:	f7ff ffda 	bl	8025aea <_ZSt12__niter_baseIPhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 8025b36:	4602      	mov	r2, r0
 8025b38:	683b      	ldr	r3, [r7, #0]
 8025b3a:	1a9a      	subs	r2, r3, r2
 8025b3c:	1d3b      	adds	r3, r7, #4
 8025b3e:	4611      	mov	r1, r2
 8025b40:	4618      	mov	r0, r3
 8025b42:	f001 f9aa 	bl	8026e9a <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEplEi>
 8025b46:	4603      	mov	r3, r0
 8025b48:	4618      	mov	r0, r3
 8025b4a:	3708      	adds	r7, #8
 8025b4c:	46bd      	mov	sp, r7
 8025b4e:	bd80      	pop	{r7, pc}

08025b50 <_ZNSt12_Destroy_auxILb1EE9__destroyIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEEvT_S9_>:
 8025b50:	b480      	push	{r7}
 8025b52:	b083      	sub	sp, #12
 8025b54:	af00      	add	r7, sp, #0
 8025b56:	6078      	str	r0, [r7, #4]
 8025b58:	6039      	str	r1, [r7, #0]
 8025b5a:	bf00      	nop
 8025b5c:	370c      	adds	r7, #12
 8025b5e:	46bd      	mov	sp, r7
 8025b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025b64:	4770      	bx	lr

08025b66 <_ZSt12__niter_baseIPhET_S1_>:
    __niter_base(_Iterator __it)
 8025b66:	b480      	push	{r7}
 8025b68:	b083      	sub	sp, #12
 8025b6a:	af00      	add	r7, sp, #0
 8025b6c:	6078      	str	r0, [r7, #4]
    { return __it; }
 8025b6e:	687b      	ldr	r3, [r7, #4]
 8025b70:	4618      	mov	r0, r3
 8025b72:	370c      	adds	r7, #12
 8025b74:	46bd      	mov	sp, r7
 8025b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025b7a:	4770      	bx	lr

08025b7c <_ZSt14__copy_move_a1ILb0EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8025b7c:	b580      	push	{r7, lr}
 8025b7e:	b084      	sub	sp, #16
 8025b80:	af00      	add	r7, sp, #0
 8025b82:	60f8      	str	r0, [r7, #12]
 8025b84:	60b9      	str	r1, [r7, #8]
 8025b86:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8025b88:	687a      	ldr	r2, [r7, #4]
 8025b8a:	68b9      	ldr	r1, [r7, #8]
 8025b8c:	68f8      	ldr	r0, [r7, #12]
 8025b8e:	f001 f99b 	bl	8026ec8 <_ZSt14__copy_move_a2ILb0EPhS0_ET1_T0_S2_S1_>
 8025b92:	4603      	mov	r3, r0
 8025b94:	4618      	mov	r0, r3
 8025b96:	3710      	adds	r7, #16
 8025b98:	46bd      	mov	sp, r7
 8025b9a:	bd80      	pop	{r7, pc}

08025b9c <_ZSt12__niter_wrapIPhET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8025b9c:	b480      	push	{r7}
 8025b9e:	b083      	sub	sp, #12
 8025ba0:	af00      	add	r7, sp, #0
 8025ba2:	6078      	str	r0, [r7, #4]
 8025ba4:	6039      	str	r1, [r7, #0]
    { return __res; }
 8025ba6:	683b      	ldr	r3, [r7, #0]
 8025ba8:	4618      	mov	r0, r3
 8025baa:	370c      	adds	r7, #12
 8025bac:	46bd      	mov	sp, r7
 8025bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025bb2:	4770      	bx	lr

08025bb4 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPhS2_EET0_T_S4_S3_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8025bb4:	b580      	push	{r7, lr}
 8025bb6:	b084      	sub	sp, #16
 8025bb8:	af00      	add	r7, sp, #0
 8025bba:	60f8      	str	r0, [r7, #12]
 8025bbc:	60b9      	str	r1, [r7, #8]
 8025bbe:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8025bc0:	687a      	ldr	r2, [r7, #4]
 8025bc2:	68b9      	ldr	r1, [r7, #8]
 8025bc4:	68f8      	ldr	r0, [r7, #12]
 8025bc6:	f7fe f87a 	bl	8023cbe <_ZSt4copyIPhS0_ET0_T_S2_S1_>
 8025bca:	4603      	mov	r3, r0
 8025bcc:	4618      	mov	r0, r3
 8025bce:	3710      	adds	r7, #16
 8025bd0:	46bd      	mov	sp, r7
 8025bd2:	bd80      	pop	{r7, pc}

08025bd4 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 8025bd4:	b580      	push	{r7, lr}
 8025bd6:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 8025bd8:	2010      	movs	r0, #16
 8025bda:	f7fb f952 	bl	8020e82 <_ZSt16__deque_buf_sizej>
 8025bde:	4603      	mov	r3, r0
 8025be0:	4618      	mov	r0, r3
 8025be2:	bd80      	pop	{r7, pc}

08025be4 <_ZSt10__distanceIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E15difference_typeES5_S5_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8025be4:	b480      	push	{r7}
 8025be6:	b085      	sub	sp, #20
 8025be8:	af00      	add	r7, sp, #0
 8025bea:	60f8      	str	r0, [r7, #12]
 8025bec:	60b9      	str	r1, [r7, #8]
 8025bee:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8025bf0:	68ba      	ldr	r2, [r7, #8]
 8025bf2:	68fb      	ldr	r3, [r7, #12]
 8025bf4:	1ad3      	subs	r3, r2, r3
 8025bf6:	109b      	asrs	r3, r3, #2
 8025bf8:	4a04      	ldr	r2, [pc, #16]	; (8025c0c <_ZSt10__distanceIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E15difference_typeES5_S5_St26random_access_iterator_tag+0x28>)
 8025bfa:	fb02 f303 	mul.w	r3, r2, r3
    }
 8025bfe:	4618      	mov	r0, r3
 8025c00:	3714      	adds	r7, #20
 8025c02:	46bd      	mov	sp, r7
 8025c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025c08:	4770      	bx	lr
 8025c0a:	bf00      	nop
 8025c0c:	cccccccd 	.word	0xcccccccd

08025c10 <_ZSt9__advanceIPKN10BHYWrapper8BHYFrameEiEvRT_T0_St26random_access_iterator_tag>:
    __advance(_RandomAccessIterator& __i, _Distance __n,
 8025c10:	b480      	push	{r7}
 8025c12:	b085      	sub	sp, #20
 8025c14:	af00      	add	r7, sp, #0
 8025c16:	60f8      	str	r0, [r7, #12]
 8025c18:	60b9      	str	r1, [r7, #8]
 8025c1a:	713a      	strb	r2, [r7, #4]
	__i += __n;
 8025c1c:	68fb      	ldr	r3, [r7, #12]
 8025c1e:	6819      	ldr	r1, [r3, #0]
 8025c20:	68ba      	ldr	r2, [r7, #8]
 8025c22:	4613      	mov	r3, r2
 8025c24:	009b      	lsls	r3, r3, #2
 8025c26:	4413      	add	r3, r2
 8025c28:	009b      	lsls	r3, r3, #2
 8025c2a:	18ca      	adds	r2, r1, r3
 8025c2c:	68fb      	ldr	r3, [r7, #12]
 8025c2e:	601a      	str	r2, [r3, #0]
    }
 8025c30:	bf00      	nop
 8025c32:	3714      	adds	r7, #20
 8025c34:	46bd      	mov	sp, r7
 8025c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025c3a:	4770      	bx	lr

08025c3c <_ZSt12__miter_baseIPKN10BHYWrapper8BHYFrameEET_S4_>:
    __miter_base(_Iterator __it)
 8025c3c:	b480      	push	{r7}
 8025c3e:	b083      	sub	sp, #12
 8025c40:	af00      	add	r7, sp, #0
 8025c42:	6078      	str	r0, [r7, #4]
    { return __it; }
 8025c44:	687b      	ldr	r3, [r7, #4]
 8025c46:	4618      	mov	r0, r3
 8025c48:	370c      	adds	r7, #12
 8025c4a:	46bd      	mov	sp, r7
 8025c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025c50:	4770      	bx	lr

08025c52 <_ZSt13__copy_move_aILb0EPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET1_T0_S9_S8_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8025c52:	b5b0      	push	{r4, r5, r7, lr}
 8025c54:	b090      	sub	sp, #64	; 0x40
 8025c56:	af00      	add	r7, sp, #0
 8025c58:	60f8      	str	r0, [r7, #12]
 8025c5a:	60b9      	str	r1, [r7, #8]
 8025c5c:	607a      	str	r2, [r7, #4]
 8025c5e:	603b      	str	r3, [r7, #0]
					     std::__niter_base(__result)));
 8025c60:	68b8      	ldr	r0, [r7, #8]
 8025c62:	f001 f941 	bl	8026ee8 <_ZSt12__niter_baseIPKN10BHYWrapper8BHYFrameEET_S4_>
 8025c66:	4604      	mov	r4, r0
 8025c68:	6878      	ldr	r0, [r7, #4]
 8025c6a:	f001 f93d 	bl	8026ee8 <_ZSt12__niter_baseIPKN10BHYWrapper8BHYFrameEET_S4_>
 8025c6e:	4605      	mov	r5, r0
 8025c70:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8025c74:	6839      	ldr	r1, [r7, #0]
 8025c76:	4618      	mov	r0, r3
 8025c78:	f7fe fae6 	bl	8024248 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8025c7c:	f107 0320 	add.w	r3, r7, #32
 8025c80:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8025c84:	4611      	mov	r1, r2
 8025c86:	4618      	mov	r0, r3
 8025c88:	f001 f939 	bl	8026efe <_ZSt12__niter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 8025c8c:	f107 0010 	add.w	r0, r7, #16
 8025c90:	f107 0320 	add.w	r3, r7, #32
 8025c94:	462a      	mov	r2, r5
 8025c96:	4621      	mov	r1, r4
 8025c98:	f001 f952 	bl	8026f40 <_ZSt14__copy_move_a1ILb0EPKN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS7_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSD_PSD_EE6__typeES7_S7_SG_>
 8025c9c:	68fb      	ldr	r3, [r7, #12]
 8025c9e:	f107 0210 	add.w	r2, r7, #16
 8025ca2:	6839      	ldr	r1, [r7, #0]
 8025ca4:	4618      	mov	r0, r3
 8025ca6:	f001 f99d 	bl	8026fe4 <_ZSt12__niter_wrapISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_RKS6_S6_>
    }
 8025caa:	68f8      	ldr	r0, [r7, #12]
 8025cac:	3740      	adds	r7, #64	; 0x40
 8025cae:	46bd      	mov	sp, r7
 8025cb0:	bdb0      	pop	{r4, r5, r7, pc}
	...

08025cb4 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE28_M_reserve_elements_at_frontEj>:
      _M_reserve_elements_at_front(size_type __n)
 8025cb4:	b580      	push	{r7, lr}
 8025cb6:	b086      	sub	sp, #24
 8025cb8:	af00      	add	r7, sp, #0
 8025cba:	60f8      	str	r0, [r7, #12]
 8025cbc:	60b9      	str	r1, [r7, #8]
 8025cbe:	607a      	str	r2, [r7, #4]
	const size_type __vacancies = this->_M_impl._M_start._M_cur
 8025cc0:	68bb      	ldr	r3, [r7, #8]
 8025cc2:	689a      	ldr	r2, [r3, #8]
				      - this->_M_impl._M_start._M_first;
 8025cc4:	68bb      	ldr	r3, [r7, #8]
 8025cc6:	68db      	ldr	r3, [r3, #12]
 8025cc8:	1ad3      	subs	r3, r2, r3
 8025cca:	109b      	asrs	r3, r3, #2
 8025ccc:	4a0d      	ldr	r2, [pc, #52]	; (8025d04 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE28_M_reserve_elements_at_frontEj+0x50>)
 8025cce:	fb02 f303 	mul.w	r3, r2, r3
	const size_type __vacancies = this->_M_impl._M_start._M_cur
 8025cd2:	617b      	str	r3, [r7, #20]
	if (__n > __vacancies)
 8025cd4:	687a      	ldr	r2, [r7, #4]
 8025cd6:	697b      	ldr	r3, [r7, #20]
 8025cd8:	429a      	cmp	r2, r3
 8025cda:	d906      	bls.n	8025cea <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE28_M_reserve_elements_at_frontEj+0x36>
	  _M_new_elements_at_front(__n - __vacancies);
 8025cdc:	687a      	ldr	r2, [r7, #4]
 8025cde:	697b      	ldr	r3, [r7, #20]
 8025ce0:	1ad3      	subs	r3, r2, r3
 8025ce2:	4619      	mov	r1, r3
 8025ce4:	68b8      	ldr	r0, [r7, #8]
 8025ce6:	f001 f98b 	bl	8027000 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE24_M_new_elements_at_frontEj>
	return this->_M_impl._M_start - difference_type(__n);
 8025cea:	68bb      	ldr	r3, [r7, #8]
 8025cec:	f103 0108 	add.w	r1, r3, #8
 8025cf0:	687a      	ldr	r2, [r7, #4]
 8025cf2:	68fb      	ldr	r3, [r7, #12]
 8025cf4:	4618      	mov	r0, r3
 8025cf6:	f001 f9c9 	bl	802708c <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>
      }
 8025cfa:	68f8      	ldr	r0, [r7, #12]
 8025cfc:	3718      	adds	r7, #24
 8025cfe:	46bd      	mov	sp, r7
 8025d00:	bd80      	pop	{r7, pc}
 8025d02:	bf00      	nop
 8025d04:	cccccccd 	.word	0xcccccccd

08025d08 <_ZSt22__uninitialized_copy_aIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_ES1_ET0_T_S9_S8_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8025d08:	b580      	push	{r7, lr}
 8025d0a:	b088      	sub	sp, #32
 8025d0c:	af00      	add	r7, sp, #0
 8025d0e:	60f8      	str	r0, [r7, #12]
 8025d10:	60b9      	str	r1, [r7, #8]
 8025d12:	607a      	str	r2, [r7, #4]
 8025d14:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8025d16:	f107 0310 	add.w	r3, r7, #16
 8025d1a:	6839      	ldr	r1, [r7, #0]
 8025d1c:	4618      	mov	r0, r3
 8025d1e:	f7fe fa93 	bl	8024248 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8025d22:	68f8      	ldr	r0, [r7, #12]
 8025d24:	f107 0310 	add.w	r3, r7, #16
 8025d28:	687a      	ldr	r2, [r7, #4]
 8025d2a:	68b9      	ldr	r1, [r7, #8]
 8025d2c:	f001 f9c1 	bl	80270b2 <_ZSt18uninitialized_copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>
 8025d30:	68f8      	ldr	r0, [r7, #12]
 8025d32:	3720      	adds	r7, #32
 8025d34:	46bd      	mov	sp, r7
 8025d36:	bd80      	pop	{r7, pc}

08025d38 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE27_M_reserve_elements_at_backEj>:
      _M_reserve_elements_at_back(size_type __n)
 8025d38:	b580      	push	{r7, lr}
 8025d3a:	b086      	sub	sp, #24
 8025d3c:	af00      	add	r7, sp, #0
 8025d3e:	60f8      	str	r0, [r7, #12]
 8025d40:	60b9      	str	r1, [r7, #8]
 8025d42:	607a      	str	r2, [r7, #4]
	const size_type __vacancies = (this->_M_impl._M_finish._M_last
 8025d44:	68bb      	ldr	r3, [r7, #8]
 8025d46:	6a1a      	ldr	r2, [r3, #32]
				       - this->_M_impl._M_finish._M_cur) - 1;
 8025d48:	68bb      	ldr	r3, [r7, #8]
 8025d4a:	699b      	ldr	r3, [r3, #24]
 8025d4c:	1ad3      	subs	r3, r2, r3
 8025d4e:	109b      	asrs	r3, r3, #2
 8025d50:	4a0d      	ldr	r2, [pc, #52]	; (8025d88 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE27_M_reserve_elements_at_backEj+0x50>)
 8025d52:	fb02 f303 	mul.w	r3, r2, r3
 8025d56:	3b01      	subs	r3, #1
	const size_type __vacancies = (this->_M_impl._M_finish._M_last
 8025d58:	617b      	str	r3, [r7, #20]
	if (__n > __vacancies)
 8025d5a:	687a      	ldr	r2, [r7, #4]
 8025d5c:	697b      	ldr	r3, [r7, #20]
 8025d5e:	429a      	cmp	r2, r3
 8025d60:	d906      	bls.n	8025d70 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE27_M_reserve_elements_at_backEj+0x38>
	  _M_new_elements_at_back(__n - __vacancies);
 8025d62:	687a      	ldr	r2, [r7, #4]
 8025d64:	697b      	ldr	r3, [r7, #20]
 8025d66:	1ad3      	subs	r3, r2, r3
 8025d68:	4619      	mov	r1, r3
 8025d6a:	68b8      	ldr	r0, [r7, #8]
 8025d6c:	f001 f9bc 	bl	80270e8 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_new_elements_at_backEj>
	return this->_M_impl._M_finish + difference_type(__n);
 8025d70:	68bb      	ldr	r3, [r7, #8]
 8025d72:	f103 0118 	add.w	r1, r3, #24
 8025d76:	687a      	ldr	r2, [r7, #4]
 8025d78:	68fb      	ldr	r3, [r7, #12]
 8025d7a:	4618      	mov	r0, r3
 8025d7c:	f7ff fa1c 	bl	80251b8 <_ZStplRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>
      }
 8025d80:	68f8      	ldr	r0, [r7, #12]
 8025d82:	3718      	adds	r7, #24
 8025d84:	46bd      	mov	sp, r7
 8025d86:	bd80      	pop	{r7, pc}
 8025d88:	cccccccd 	.word	0xcccccccd

08025d8c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_j>:
      deque<_Tp, _Alloc>::
 8025d8c:	b5b0      	push	{r4, r5, r7, lr}
 8025d8e:	f5ad 7d2e 	sub.w	sp, sp, #696	; 0x2b8
 8025d92:	af04      	add	r7, sp, #16
 8025d94:	f507 742a 	add.w	r4, r7, #680	; 0x2a8
 8025d98:	f5a4 7427 	sub.w	r4, r4, #668	; 0x29c
 8025d9c:	6020      	str	r0, [r4, #0]
 8025d9e:	f507 702a 	add.w	r0, r7, #680	; 0x2a8
 8025da2:	f5a0 7028 	sub.w	r0, r0, #672	; 0x2a0
 8025da6:	6001      	str	r1, [r0, #0]
 8025da8:	f507 712a 	add.w	r1, r7, #680	; 0x2a8
 8025dac:	f5a1 7129 	sub.w	r1, r1, #676	; 0x2a4
 8025db0:	600a      	str	r2, [r1, #0]
 8025db2:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8025db6:	f5a2 722a 	sub.w	r2, r2, #680	; 0x2a8
 8025dba:	6013      	str	r3, [r2, #0]
	const difference_type __elemsbefore = __pos - this->_M_impl._M_start;
 8025dbc:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025dc0:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8025dc4:	681b      	ldr	r3, [r3, #0]
 8025dc6:	f103 0208 	add.w	r2, r3, #8
 8025dca:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025dce:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8025dd2:	4611      	mov	r1, r2
 8025dd4:	6818      	ldr	r0, [r3, #0]
 8025dd6:	f7fe f8c9 	bl	8023f6c <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_ES6_>
 8025dda:	f8c7 02a4 	str.w	r0, [r7, #676]	; 0x2a4
	const size_type __length = size();
 8025dde:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025de2:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8025de6:	6818      	ldr	r0, [r3, #0]
 8025de8:	f7fd f8e0 	bl	8022fac <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8025dec:	f8c7 02a0 	str.w	r0, [r7, #672]	; 0x2a0
	if (static_cast<size_type>(__elemsbefore) < __length / 2)
 8025df0:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 8025df4:	085a      	lsrs	r2, r3, #1
 8025df6:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 8025dfa:	429a      	cmp	r2, r3
 8025dfc:	f240 8158 	bls.w	80260b0 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_j+0x324>
	    iterator __new_start = _M_reserve_elements_at_front(__n);
 8025e00:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025e04:	f5a3 700f 	sub.w	r0, r3, #572	; 0x23c
 8025e08:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025e0c:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8025e10:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 8025e14:	6819      	ldr	r1, [r3, #0]
 8025e16:	f7ff ff4d 	bl	8025cb4 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE28_M_reserve_elements_at_frontEj>
	    iterator __old_start = this->_M_impl._M_start;
 8025e1a:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025e1e:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8025e22:	681b      	ldr	r3, [r3, #0]
 8025e24:	f103 0208 	add.w	r2, r3, #8
 8025e28:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8025e2c:	4611      	mov	r1, r2
 8025e2e:	4618      	mov	r0, r3
 8025e30:	f7fe fa0a 	bl	8024248 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
	    __pos = this->_M_impl._M_start + __elemsbefore;
 8025e34:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025e38:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8025e3c:	681b      	ldr	r3, [r3, #0]
 8025e3e:	f103 0108 	add.w	r1, r3, #8
 8025e42:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025e46:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8025e4a:	f8d7 22a4 	ldr.w	r2, [r7, #676]	; 0x2a4
 8025e4e:	4618      	mov	r0, r3
 8025e50:	f7ff f9b2 	bl	80251b8 <_ZStplRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>
 8025e54:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025e58:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8025e5c:	681a      	ldr	r2, [r3, #0]
 8025e5e:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025e62:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8025e66:	4614      	mov	r4, r2
 8025e68:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8025e6a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		if (__elemsbefore >= difference_type(__n))
 8025e6e:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 8025e72:	f8d7 22a4 	ldr.w	r2, [r7, #676]	; 0x2a4
 8025e76:	429a      	cmp	r2, r3
 8025e78:	f2c0 8098 	blt.w	8025fac <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_j+0x220>
		    iterator __start_n = (this->_M_impl._M_start
 8025e7c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025e80:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8025e84:	681b      	ldr	r3, [r3, #0]
 8025e86:	f103 0108 	add.w	r1, r3, #8
 8025e8a:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 8025e8e:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025e92:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8025e96:	4618      	mov	r0, r3
 8025e98:	f7ff f98e 	bl	80251b8 <_ZStplRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>
		    std::__uninitialized_move_a(this->_M_impl._M_start,
 8025e9c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025ea0:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8025ea4:	681b      	ldr	r3, [r3, #0]
 8025ea6:	f103 0208 	add.w	r2, r3, #8
 8025eaa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8025eae:	4611      	mov	r1, r2
 8025eb0:	4618      	mov	r0, r3
 8025eb2:	f7fe f9c9 	bl	8024248 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8025eb6:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8025eba:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8025ebe:	4611      	mov	r1, r2
 8025ec0:	4618      	mov	r0, r3
 8025ec2:	f7fe f9c1 	bl	8024248 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8025ec6:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8025eca:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8025ece:	4611      	mov	r1, r2
 8025ed0:	4618      	mov	r0, r3
 8025ed2:	f7fe f9b9 	bl	8024248 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
						_M_get_Tp_allocator());
 8025ed6:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025eda:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8025ede:	681b      	ldr	r3, [r3, #0]
 8025ee0:	4618      	mov	r0, r3
 8025ee2:	f7fe f86f 	bl	8023fc4 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 8025ee6:	4604      	mov	r4, r0
		    std::__uninitialized_move_a(this->_M_impl._M_start,
 8025ee8:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025eec:	f5a3 7007 	sub.w	r0, r3, #540	; 0x21c
 8025ef0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8025ef4:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8025ef8:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 8025efc:	9400      	str	r4, [sp, #0]
 8025efe:	f001 f937 	bl	8027170 <_ZSt22__uninitialized_move_aISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_SaIS2_EET0_T_S8_S7_RT1_>
		    this->_M_impl._M_start = __new_start;
 8025f02:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025f06:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8025f0a:	681b      	ldr	r3, [r3, #0]
 8025f0c:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8025f10:	f5a2 720f 	sub.w	r2, r2, #572	; 0x23c
 8025f14:	f103 0408 	add.w	r4, r3, #8
 8025f18:	4613      	mov	r3, r2
 8025f1a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8025f1c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		    _GLIBCXX_MOVE3(__start_n, __pos, __old_start);
 8025f20:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8025f24:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8025f28:	4611      	mov	r1, r2
 8025f2a:	4618      	mov	r0, r3
 8025f2c:	f7fe f98c 	bl	8024248 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8025f30:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025f34:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8025f38:	f107 02ec 	add.w	r2, r7, #236	; 0xec
 8025f3c:	6819      	ldr	r1, [r3, #0]
 8025f3e:	4610      	mov	r0, r2
 8025f40:	f7fe f982 	bl	8024248 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8025f44:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8025f48:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8025f4c:	4611      	mov	r1, r2
 8025f4e:	4618      	mov	r0, r3
 8025f50:	f7fe f97a 	bl	8024248 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8025f54:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025f58:	f5a3 70ee 	sub.w	r0, r3, #476	; 0x1dc
 8025f5c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8025f60:	f107 02ec 	add.w	r2, r7, #236	; 0xec
 8025f64:	f107 01dc 	add.w	r1, r7, #220	; 0xdc
 8025f68:	f001 f93b 	bl	80271e2 <_ZSt4moveISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_ET0_T_S7_S6_>
		    std::copy(__first, __last, __pos - difference_type(__n));
 8025f6c:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 8025f70:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025f74:	f5a3 70c6 	sub.w	r0, r3, #396	; 0x18c
 8025f78:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025f7c:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8025f80:	6819      	ldr	r1, [r3, #0]
 8025f82:	f001 f883 	bl	802708c <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>
 8025f86:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025f8a:	f5a3 70ce 	sub.w	r0, r3, #412	; 0x19c
 8025f8e:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8025f92:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8025f96:	f5a2 722a 	sub.w	r2, r2, #680	; 0x2a8
 8025f9a:	f507 712a 	add.w	r1, r7, #680	; 0x2a8
 8025f9e:	f5a1 7129 	sub.w	r1, r1, #676	; 0x2a4
 8025fa2:	6812      	ldr	r2, [r2, #0]
 8025fa4:	6809      	ldr	r1, [r1, #0]
 8025fa6:	f7fe ff8b 	bl	8024ec0 <_ZSt4copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>
      }
 8025faa:	e1dd      	b.n	8026368 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_j+0x5dc>
		    _ForwardIterator __mid = __first;
 8025fac:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025fb0:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8025fb4:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8025fb8:	f5a2 7229 	sub.w	r2, r2, #676	; 0x2a4
 8025fbc:	6812      	ldr	r2, [r2, #0]
 8025fbe:	601a      	str	r2, [r3, #0]
		    std::advance(__mid, difference_type(__n) - __elemsbefore);
 8025fc0:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 8025fc4:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 8025fc8:	1ad2      	subs	r2, r2, r3
 8025fca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8025fce:	4611      	mov	r1, r2
 8025fd0:	4618      	mov	r0, r3
 8025fd2:	f001 f93c 	bl	802724e <_ZSt7advanceIPKN10BHYWrapper8BHYFrameEiEvRT_T0_>
		    std::__uninitialized_move_copy(this->_M_impl._M_start,
 8025fd6:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025fda:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8025fde:	681b      	ldr	r3, [r3, #0]
 8025fe0:	f103 0208 	add.w	r2, r3, #8
 8025fe4:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8025fe8:	4611      	mov	r1, r2
 8025fea:	4618      	mov	r0, r3
 8025fec:	f7fe f92c 	bl	8024248 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8025ff0:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025ff4:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8025ff8:	f507 72a6 	add.w	r2, r7, #332	; 0x14c
 8025ffc:	6819      	ldr	r1, [r3, #0]
 8025ffe:	4610      	mov	r0, r2
 8026000:	f7fe f922 	bl	8024248 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026004:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8026008:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 802600c:	681c      	ldr	r4, [r3, #0]
 802600e:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8026012:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8026016:	4611      	mov	r1, r2
 8026018:	4618      	mov	r0, r3
 802601a:	f7fe f915 	bl	8024248 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
						   _M_get_Tp_allocator());
 802601e:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8026022:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8026026:	681b      	ldr	r3, [r3, #0]
 8026028:	4618      	mov	r0, r3
 802602a:	f7fd ffcb 	bl	8023fc4 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 802602e:	4602      	mov	r2, r0
		    std::__uninitialized_move_copy(this->_M_impl._M_start,
 8026030:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8026034:	f5a3 70be 	sub.w	r0, r3, #380	; 0x17c
 8026038:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802603c:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 8026040:	f507 75a6 	add.w	r5, r7, #332	; 0x14c
 8026044:	f507 719e 	add.w	r1, r7, #316	; 0x13c
 8026048:	9202      	str	r2, [sp, #8]
 802604a:	f507 72ae 	add.w	r2, r7, #348	; 0x15c
 802604e:	9201      	str	r2, [sp, #4]
 8026050:	9400      	str	r4, [sp, #0]
 8026052:	681b      	ldr	r3, [r3, #0]
 8026054:	462a      	mov	r2, r5
 8026056:	f001 f90d 	bl	8027274 <_ZSt25__uninitialized_move_copyISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EPKS2_S5_SaIS2_EET1_T_SA_T0_SB_S9_RT2_>
		    this->_M_impl._M_start = __new_start;
 802605a:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802605e:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8026062:	681b      	ldr	r3, [r3, #0]
 8026064:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8026068:	f5a2 720f 	sub.w	r2, r2, #572	; 0x23c
 802606c:	f103 0408 	add.w	r4, r3, #8
 8026070:	4613      	mov	r3, r2
 8026072:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8026074:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		    std::copy(__mid, __last, __old_start);
 8026078:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802607c:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8026080:	681c      	ldr	r4, [r3, #0]
 8026082:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8026086:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 802608a:	4611      	mov	r1, r2
 802608c:	4618      	mov	r0, r3
 802608e:	f7fe f8db 	bl	8024248 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026092:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8026096:	f5a3 709e 	sub.w	r0, r3, #316	; 0x13c
 802609a:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 802609e:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 80260a2:	f5a2 722a 	sub.w	r2, r2, #680	; 0x2a8
 80260a6:	6812      	ldr	r2, [r2, #0]
 80260a8:	4621      	mov	r1, r4
 80260aa:	f7fe ff09 	bl	8024ec0 <_ZSt4copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>
      }
 80260ae:	e15b      	b.n	8026368 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_j+0x5dc>
	  iterator __new_finish = _M_reserve_elements_at_back(__n);
 80260b0:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80260b4:	f5a3 701c 	sub.w	r0, r3, #624	; 0x270
 80260b8:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80260bc:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80260c0:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 80260c4:	6819      	ldr	r1, [r3, #0]
 80260c6:	f7ff fe37 	bl	8025d38 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE27_M_reserve_elements_at_backEj>
	  iterator __old_finish = this->_M_impl._M_finish;
 80260ca:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80260ce:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80260d2:	681b      	ldr	r3, [r3, #0]
 80260d4:	f103 0218 	add.w	r2, r3, #24
 80260d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80260dc:	4611      	mov	r1, r2
 80260de:	4618      	mov	r0, r3
 80260e0:	f7fe f8b2 	bl	8024248 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
	    difference_type(__length) - __elemsbefore;
 80260e4:	f8d7 22a0 	ldr.w	r2, [r7, #672]	; 0x2a0
	  const difference_type __elemsafter =
 80260e8:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 80260ec:	1ad3      	subs	r3, r2, r3
 80260ee:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
	  __pos = this->_M_impl._M_finish - __elemsafter;
 80260f2:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80260f6:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80260fa:	681b      	ldr	r3, [r3, #0]
 80260fc:	f103 0118 	add.w	r1, r3, #24
 8026100:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8026104:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8026108:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 802610c:	4618      	mov	r0, r3
 802610e:	f000 ffbd 	bl	802708c <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>
 8026112:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8026116:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 802611a:	681a      	ldr	r2, [r3, #0]
 802611c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8026120:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8026124:	4614      	mov	r4, r2
 8026126:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8026128:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	      if (__elemsafter > difference_type(__n))
 802612c:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 8026130:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8026134:	429a      	cmp	r2, r3
 8026136:	f340 8096 	ble.w	8026266 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_j+0x4da>
		  iterator __finish_n = (this->_M_impl._M_finish
 802613a:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802613e:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8026142:	681b      	ldr	r3, [r3, #0]
 8026144:	f103 0118 	add.w	r1, r3, #24
 8026148:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 802614c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8026150:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8026154:	4618      	mov	r0, r3
 8026156:	f000 ff99 	bl	802708c <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>
		  std::__uninitialized_move_a(__finish_n,
 802615a:	f107 0218 	add.w	r2, r7, #24
 802615e:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8026162:	4611      	mov	r1, r2
 8026164:	4618      	mov	r0, r3
 8026166:	f7fe f86f 	bl	8024248 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
					      this->_M_impl._M_finish,
 802616a:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802616e:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8026172:	681b      	ldr	r3, [r3, #0]
 8026174:	f103 0218 	add.w	r2, r3, #24
		  std::__uninitialized_move_a(__finish_n,
 8026178:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 802617c:	4611      	mov	r1, r2
 802617e:	4618      	mov	r0, r3
 8026180:	f7fe f862 	bl	8024248 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
					      this->_M_impl._M_finish,
 8026184:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8026188:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 802618c:	681b      	ldr	r3, [r3, #0]
 802618e:	f103 0218 	add.w	r2, r3, #24
		  std::__uninitialized_move_a(__finish_n,
 8026192:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 8026196:	4611      	mov	r1, r2
 8026198:	4618      	mov	r0, r3
 802619a:	f7fe f855 	bl	8024248 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
					      _M_get_Tp_allocator());
 802619e:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80261a2:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80261a6:	681b      	ldr	r3, [r3, #0]
 80261a8:	4618      	mov	r0, r3
 80261aa:	f7fd ff0b 	bl	8023fc4 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 80261ae:	4604      	mov	r4, r0
		  std::__uninitialized_move_a(__finish_n,
 80261b0:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80261b4:	f5a3 7086 	sub.w	r0, r3, #268	; 0x10c
 80261b8:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 80261bc:	f507 72de 	add.w	r2, r7, #444	; 0x1bc
 80261c0:	f507 71d6 	add.w	r1, r7, #428	; 0x1ac
 80261c4:	9400      	str	r4, [sp, #0]
 80261c6:	f000 ffd3 	bl	8027170 <_ZSt22__uninitialized_move_aISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_SaIS2_EET0_T_S8_S7_RT1_>
		  this->_M_impl._M_finish = __new_finish;
 80261ca:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80261ce:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80261d2:	681b      	ldr	r3, [r3, #0]
 80261d4:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 80261d8:	f5a2 721c 	sub.w	r2, r2, #624	; 0x270
 80261dc:	f103 0418 	add.w	r4, r3, #24
 80261e0:	4613      	mov	r3, r2
 80261e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80261e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		  _GLIBCXX_MOVE_BACKWARD3(__pos, __finish_n, __old_finish);
 80261e8:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80261ec:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 80261f0:	f507 72f6 	add.w	r2, r7, #492	; 0x1ec
 80261f4:	6819      	ldr	r1, [r3, #0]
 80261f6:	4610      	mov	r0, r2
 80261f8:	f7fe f826 	bl	8024248 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80261fc:	f107 0218 	add.w	r2, r7, #24
 8026200:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8026204:	4611      	mov	r1, r2
 8026206:	4618      	mov	r0, r3
 8026208:	f7fe f81e 	bl	8024248 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802620c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8026210:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8026214:	4611      	mov	r1, r2
 8026216:	4618      	mov	r0, r3
 8026218:	f7fe f816 	bl	8024248 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802621c:	f507 70ee 	add.w	r0, r7, #476	; 0x1dc
 8026220:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8026224:	f507 72fe 	add.w	r2, r7, #508	; 0x1fc
 8026228:	f507 71f6 	add.w	r1, r7, #492	; 0x1ec
 802622c:	f001 f862 	bl	80272f4 <_ZSt13move_backwardISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_ET0_T_S7_S6_>
		  std::copy(__first, __last, __pos);
 8026230:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8026234:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8026238:	f507 720b 	add.w	r2, r7, #556	; 0x22c
 802623c:	6819      	ldr	r1, [r3, #0]
 802623e:	4610      	mov	r0, r2
 8026240:	f7fe f802 	bl	8024248 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026244:	f507 7007 	add.w	r0, r7, #540	; 0x21c
 8026248:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 802624c:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8026250:	f5a2 722a 	sub.w	r2, r2, #680	; 0x2a8
 8026254:	f507 712a 	add.w	r1, r7, #680	; 0x2a8
 8026258:	f5a1 7129 	sub.w	r1, r1, #676	; 0x2a4
 802625c:	6812      	ldr	r2, [r2, #0]
 802625e:	6809      	ldr	r1, [r1, #0]
 8026260:	f7fe fe2e 	bl	8024ec0 <_ZSt4copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>
      }
 8026264:	e080      	b.n	8026368 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_j+0x5dc>
		  _ForwardIterator __mid = __first;
 8026266:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802626a:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 802626e:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8026272:	f5a2 7229 	sub.w	r2, r2, #676	; 0x2a4
 8026276:	6812      	ldr	r2, [r2, #0]
 8026278:	601a      	str	r2, [r3, #0]
		  std::advance(__mid, __elemsafter);
 802627a:	f107 0314 	add.w	r3, r7, #20
 802627e:	f8d7 129c 	ldr.w	r1, [r7, #668]	; 0x29c
 8026282:	4618      	mov	r0, r3
 8026284:	f000 ffe3 	bl	802724e <_ZSt7advanceIPKN10BHYWrapper8BHYFrameEiEvRT_T0_>
		  std::__uninitialized_copy_move(__mid, __last, __pos,
 8026288:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802628c:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8026290:	681c      	ldr	r4, [r3, #0]
 8026292:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8026296:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 802629a:	f507 7213 	add.w	r2, r7, #588	; 0x24c
 802629e:	6819      	ldr	r1, [r3, #0]
 80262a0:	4610      	mov	r0, r2
 80262a2:	f7fd ffd1 	bl	8024248 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
						 this->_M_impl._M_finish,
 80262a6:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80262aa:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80262ae:	681b      	ldr	r3, [r3, #0]
 80262b0:	f103 0218 	add.w	r2, r3, #24
		  std::__uninitialized_copy_move(__mid, __last, __pos,
 80262b4:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 80262b8:	4611      	mov	r1, r2
 80262ba:	4618      	mov	r0, r3
 80262bc:	f7fd ffc4 	bl	8024248 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
						 this->_M_impl._M_finish,
 80262c0:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80262c4:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80262c8:	681b      	ldr	r3, [r3, #0]
 80262ca:	f103 0218 	add.w	r2, r3, #24
		  std::__uninitialized_copy_move(__mid, __last, __pos,
 80262ce:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 80262d2:	4611      	mov	r1, r2
 80262d4:	4618      	mov	r0, r3
 80262d6:	f7fd ffb7 	bl	8024248 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
						 _M_get_Tp_allocator());
 80262da:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80262de:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80262e2:	681b      	ldr	r3, [r3, #0]
 80262e4:	4618      	mov	r0, r3
 80262e6:	f7fd fe6d 	bl	8023fc4 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 80262ea:	4603      	mov	r3, r0
		  std::__uninitialized_copy_move(__mid, __last, __pos,
 80262ec:	f507 700f 	add.w	r0, r7, #572	; 0x23c
 80262f0:	f507 7113 	add.w	r1, r7, #588	; 0x24c
 80262f4:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 80262f8:	f5a2 722a 	sub.w	r2, r2, #680	; 0x2a8
 80262fc:	9302      	str	r3, [sp, #8]
 80262fe:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 8026302:	9301      	str	r3, [sp, #4]
 8026304:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 8026308:	9300      	str	r3, [sp, #0]
 802630a:	460b      	mov	r3, r1
 802630c:	6812      	ldr	r2, [r2, #0]
 802630e:	4621      	mov	r1, r4
 8026310:	f001 f826 	bl	8027360 <_ZSt25__uninitialized_copy_moveIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_ES7_SaIS1_EET1_T_SA_T0_SB_S9_RT2_>
		  this->_M_impl._M_finish = __new_finish;
 8026314:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8026318:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 802631c:	681b      	ldr	r3, [r3, #0]
 802631e:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8026322:	f5a2 721c 	sub.w	r2, r2, #624	; 0x270
 8026326:	f103 0418 	add.w	r4, r3, #24
 802632a:	4613      	mov	r3, r2
 802632c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802632e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		  std::copy(__first, __mid, __pos);
 8026332:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8026336:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 802633a:	681c      	ldr	r4, [r3, #0]
 802633c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8026340:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8026344:	f507 7223 	add.w	r2, r7, #652	; 0x28c
 8026348:	6819      	ldr	r1, [r3, #0]
 802634a:	4610      	mov	r0, r2
 802634c:	f7fd ff7c 	bl	8024248 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026350:	f507 701f 	add.w	r0, r7, #636	; 0x27c
 8026354:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 8026358:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 802635c:	f5a2 7129 	sub.w	r1, r2, #676	; 0x2a4
 8026360:	4622      	mov	r2, r4
 8026362:	6809      	ldr	r1, [r1, #0]
 8026364:	f7fe fdac 	bl	8024ec0 <_ZSt4copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>
      }
 8026368:	bf00      	nop
 802636a:	f507 772a 	add.w	r7, r7, #680	; 0x2a8
 802636e:	46bd      	mov	sp, r7
 8026370:	bdb0      	pop	{r4, r5, r7, pc}

08026372 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8026372:	b580      	push	{r7, lr}
 8026374:	b084      	sub	sp, #16
 8026376:	af00      	add	r7, sp, #0
 8026378:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 802637a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 802637e:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8026380:	6878      	ldr	r0, [r7, #4]
 8026382:	f001 f82d 	bl	80273e0 <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE8max_sizeERKS2_>
 8026386:	4603      	mov	r3, r0
 8026388:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 802638a:	f107 0208 	add.w	r2, r7, #8
 802638e:	f107 030c 	add.w	r3, r7, #12
 8026392:	4611      	mov	r1, r2
 8026394:	4618      	mov	r0, r3
 8026396:	f000 fb89 	bl	8026aac <_ZSt3minIjERKT_S2_S2_>
 802639a:	4603      	mov	r3, r0
 802639c:	681b      	ldr	r3, [r3, #0]
      }
 802639e:	4618      	mov	r0, r3
 80263a0:	3710      	adds	r7, #16
 80263a2:	46bd      	mov	sp, r7
 80263a4:	bd80      	pop	{r7, pc}

080263a6 <_ZNKSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80263a6:	b480      	push	{r7}
 80263a8:	b083      	sub	sp, #12
 80263aa:	af00      	add	r7, sp, #0
 80263ac:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80263ae:	687b      	ldr	r3, [r7, #4]
 80263b0:	4618      	mov	r0, r3
 80263b2:	370c      	adds	r7, #12
 80263b4:	46bd      	mov	sp, r7
 80263b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80263ba:	4770      	bx	lr

080263bc <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb>:
    deque<_Tp, _Alloc>::
 80263bc:	b590      	push	{r4, r7, lr}
 80263be:	b08b      	sub	sp, #44	; 0x2c
 80263c0:	af00      	add	r7, sp, #0
 80263c2:	60f8      	str	r0, [r7, #12]
 80263c4:	60b9      	str	r1, [r7, #8]
 80263c6:	4613      	mov	r3, r2
 80263c8:	71fb      	strb	r3, [r7, #7]
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 80263ca:	68fb      	ldr	r3, [r7, #12]
 80263cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80263ce:	68fb      	ldr	r3, [r7, #12]
 80263d0:	695b      	ldr	r3, [r3, #20]
 80263d2:	1ad3      	subs	r3, r2, r3
 80263d4:	109b      	asrs	r3, r3, #2
 80263d6:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 80263d8:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 80263da:	68bb      	ldr	r3, [r7, #8]
 80263dc:	6a3a      	ldr	r2, [r7, #32]
 80263de:	4413      	add	r3, r2
 80263e0:	61fb      	str	r3, [r7, #28]
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 80263e2:	68fb      	ldr	r3, [r7, #12]
 80263e4:	685a      	ldr	r2, [r3, #4]
 80263e6:	69fb      	ldr	r3, [r7, #28]
 80263e8:	005b      	lsls	r3, r3, #1
 80263ea:	429a      	cmp	r2, r3
 80263ec:	d92d      	bls.n	802644a <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb+0x8e>
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 80263ee:	68fb      	ldr	r3, [r7, #12]
 80263f0:	681a      	ldr	r2, [r3, #0]
 80263f2:	68fb      	ldr	r3, [r7, #12]
 80263f4:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 80263f6:	69fb      	ldr	r3, [r7, #28]
 80263f8:	1acb      	subs	r3, r1, r3
 80263fa:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 80263fc:	0099      	lsls	r1, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 80263fe:	79fb      	ldrb	r3, [r7, #7]
 8026400:	2b00      	cmp	r3, #0
 8026402:	d002      	beq.n	802640a <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb+0x4e>
 8026404:	68bb      	ldr	r3, [r7, #8]
 8026406:	009b      	lsls	r3, r3, #2
 8026408:	e000      	b.n	802640c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb+0x50>
 802640a:	2300      	movs	r3, #0
 802640c:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 802640e:	4413      	add	r3, r2
 8026410:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 8026412:	68fb      	ldr	r3, [r7, #12]
 8026414:	695b      	ldr	r3, [r3, #20]
 8026416:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8026418:	429a      	cmp	r2, r3
 802641a:	d209      	bcs.n	8026430 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 802641c:	68fb      	ldr	r3, [r7, #12]
 802641e:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 8026420:	68fb      	ldr	r3, [r7, #12]
 8026422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 8026424:	3304      	adds	r3, #4
 8026426:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8026428:	4619      	mov	r1, r3
 802642a:	f000 ffe5 	bl	80273f8 <_ZSt4copyIPPN10BHYWrapper8BHYFrameES3_ET0_T_S5_S4_>
 802642e:	e048      	b.n	80264c2 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb+0x106>
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8026430:	68fb      	ldr	r3, [r7, #12]
 8026432:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 8026434:	68fb      	ldr	r3, [r7, #12]
 8026436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8026438:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 802643a:	6a3b      	ldr	r3, [r7, #32]
 802643c:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 802643e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8026440:	4413      	add	r3, r2
 8026442:	461a      	mov	r2, r3
 8026444:	f000 fff0 	bl	8027428 <_ZSt13copy_backwardIPPN10BHYWrapper8BHYFrameES3_ET0_T_S5_S4_>
 8026448:	e03b      	b.n	80264c2 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb+0x106>
	  size_type __new_map_size = this->_M_impl._M_map_size
 802644a:	68fb      	ldr	r3, [r7, #12]
 802644c:	685c      	ldr	r4, [r3, #4]
				     + std::max(this->_M_impl._M_map_size,
 802644e:	68fb      	ldr	r3, [r7, #12]
 8026450:	3304      	adds	r3, #4
 8026452:	f107 0208 	add.w	r2, r7, #8
 8026456:	4611      	mov	r1, r2
 8026458:	4618      	mov	r0, r3
 802645a:	f7fd ffd2 	bl	8024402 <_ZSt3maxIjERKT_S2_S2_>
 802645e:	4603      	mov	r3, r0
 8026460:	681b      	ldr	r3, [r3, #0]
 8026462:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 8026464:	3302      	adds	r3, #2
 8026466:	61bb      	str	r3, [r7, #24]
	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 8026468:	68fb      	ldr	r3, [r7, #12]
 802646a:	69b9      	ldr	r1, [r7, #24]
 802646c:	4618      	mov	r0, r3
 802646e:	f7fe fef2 	bl	8025256 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE15_M_allocate_mapEj>
 8026472:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8026474:	69ba      	ldr	r2, [r7, #24]
 8026476:	69fb      	ldr	r3, [r7, #28]
 8026478:	1ad3      	subs	r3, r2, r3
 802647a:	085b      	lsrs	r3, r3, #1
 802647c:	009a      	lsls	r2, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 802647e:	79fb      	ldrb	r3, [r7, #7]
 8026480:	2b00      	cmp	r3, #0
 8026482:	d002      	beq.n	802648a <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb+0xce>
 8026484:	68bb      	ldr	r3, [r7, #8]
 8026486:	009b      	lsls	r3, r3, #2
 8026488:	e000      	b.n	802648c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb+0xd0>
 802648a:	2300      	movs	r3, #0
 802648c:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 802648e:	697a      	ldr	r2, [r7, #20]
 8026490:	4413      	add	r3, r2
 8026492:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8026494:	68fb      	ldr	r3, [r7, #12]
 8026496:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 8026498:	68fb      	ldr	r3, [r7, #12]
 802649a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 802649c:	3304      	adds	r3, #4
 802649e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80264a0:	4619      	mov	r1, r3
 80264a2:	f000 ffa9 	bl	80273f8 <_ZSt4copyIPPN10BHYWrapper8BHYFrameES3_ET0_T_S5_S4_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 80264a6:	68f8      	ldr	r0, [r7, #12]
 80264a8:	68fb      	ldr	r3, [r7, #12]
 80264aa:	6819      	ldr	r1, [r3, #0]
 80264ac:	68fb      	ldr	r3, [r7, #12]
 80264ae:	685b      	ldr	r3, [r3, #4]
 80264b0:	461a      	mov	r2, r3
 80264b2:	f7fd fe8f 	bl	80241d4 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE17_M_deallocate_mapEPPS1_j>
	  this->_M_impl._M_map = __new_map;
 80264b6:	68fb      	ldr	r3, [r7, #12]
 80264b8:	697a      	ldr	r2, [r7, #20]
 80264ba:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 80264bc:	68fb      	ldr	r3, [r7, #12]
 80264be:	69ba      	ldr	r2, [r7, #24]
 80264c0:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_start._M_set_node(__new_nstart);
 80264c2:	68fb      	ldr	r3, [r7, #12]
 80264c4:	3308      	adds	r3, #8
 80264c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80264c8:	4618      	mov	r0, r3
 80264ca:	f7fe fe33 	bl	8025134 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 80264ce:	68fb      	ldr	r3, [r7, #12]
 80264d0:	f103 0018 	add.w	r0, r3, #24
 80264d4:	6a3a      	ldr	r2, [r7, #32]
 80264d6:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80264da:	4413      	add	r3, r2
 80264dc:	009b      	lsls	r3, r3, #2
 80264de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80264e0:	4413      	add	r3, r2
 80264e2:	4619      	mov	r1, r3
 80264e4:	f7fe fe26 	bl	8025134 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E11_M_set_nodeEPS3_>
    }
 80264e8:	bf00      	nop
 80264ea:	372c      	adds	r7, #44	; 0x2c
 80264ec:	46bd      	mov	sp, r7
 80264ee:	bd90      	pop	{r4, r7, pc}

080264f0 <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 80264f0:	b580      	push	{r7, lr}
 80264f2:	b082      	sub	sp, #8
 80264f4:	af00      	add	r7, sp, #0
 80264f6:	6078      	str	r0, [r7, #4]
 80264f8:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80264fa:	2200      	movs	r2, #0
 80264fc:	6839      	ldr	r1, [r7, #0]
 80264fe:	6878      	ldr	r0, [r7, #4]
 8026500:	f000 ffaa 	bl	8027458 <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE8allocateEjPKv>
 8026504:	4603      	mov	r3, r0
 8026506:	4618      	mov	r0, r3
 8026508:	3708      	adds	r7, #8
 802650a:	46bd      	mov	sp, r7
 802650c:	bd80      	pop	{r7, pc}

0802650e <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 802650e:	b580      	push	{r7, lr}
 8026510:	b084      	sub	sp, #16
 8026512:	af00      	add	r7, sp, #0
 8026514:	60f8      	str	r0, [r7, #12]
 8026516:	60b9      	str	r1, [r7, #8]
 8026518:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 802651a:	687a      	ldr	r2, [r7, #4]
 802651c:	68b9      	ldr	r1, [r7, #8]
 802651e:	68f8      	ldr	r0, [r7, #12]
 8026520:	f000 ffbb 	bl	802749a <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE10deallocateEPS2_j>
 8026524:	bf00      	nop
 8026526:	3710      	adds	r7, #16
 8026528:	46bd      	mov	sp, r7
 802652a:	bd80      	pop	{r7, pc}

0802652c <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi>:
      operator+=(difference_type __n) _GLIBCXX_NOEXCEPT
 802652c:	b590      	push	{r4, r7, lr}
 802652e:	b085      	sub	sp, #20
 8026530:	af00      	add	r7, sp, #0
 8026532:	6078      	str	r0, [r7, #4]
 8026534:	6039      	str	r1, [r7, #0]
	const difference_type __offset = __n + (_M_cur - _M_first);
 8026536:	687b      	ldr	r3, [r7, #4]
 8026538:	681a      	ldr	r2, [r3, #0]
 802653a:	687b      	ldr	r3, [r7, #4]
 802653c:	685b      	ldr	r3, [r3, #4]
 802653e:	1ad3      	subs	r3, r2, r3
 8026540:	109b      	asrs	r3, r3, #2
 8026542:	4a2b      	ldr	r2, [pc, #172]	; (80265f0 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi+0xc4>)
 8026544:	fb02 f303 	mul.w	r3, r2, r3
 8026548:	461a      	mov	r2, r3
 802654a:	683b      	ldr	r3, [r7, #0]
 802654c:	4413      	add	r3, r2
 802654e:	60fb      	str	r3, [r7, #12]
	if (__offset >= 0 && __offset < difference_type(_S_buffer_size()))
 8026550:	68fb      	ldr	r3, [r7, #12]
 8026552:	2b00      	cmp	r3, #0
 8026554:	db08      	blt.n	8026568 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi+0x3c>
 8026556:	f7fe fe1c 	bl	8025192 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 802655a:	4603      	mov	r3, r0
 802655c:	461a      	mov	r2, r3
 802655e:	68fb      	ldr	r3, [r7, #12]
 8026560:	4293      	cmp	r3, r2
 8026562:	da01      	bge.n	8026568 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi+0x3c>
 8026564:	2301      	movs	r3, #1
 8026566:	e000      	b.n	802656a <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi+0x3e>
 8026568:	2300      	movs	r3, #0
 802656a:	2b00      	cmp	r3, #0
 802656c:	d00a      	beq.n	8026584 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi+0x58>
	  _M_cur += __n;
 802656e:	687b      	ldr	r3, [r7, #4]
 8026570:	6819      	ldr	r1, [r3, #0]
 8026572:	683a      	ldr	r2, [r7, #0]
 8026574:	4613      	mov	r3, r2
 8026576:	009b      	lsls	r3, r3, #2
 8026578:	4413      	add	r3, r2
 802657a:	009b      	lsls	r3, r3, #2
 802657c:	18ca      	adds	r2, r1, r3
 802657e:	687b      	ldr	r3, [r7, #4]
 8026580:	601a      	str	r2, [r3, #0]
 8026582:	e02f      	b.n	80265e4 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi+0xb8>
	      __offset > 0 ? __offset / difference_type(_S_buffer_size())
 8026584:	68fb      	ldr	r3, [r7, #12]
 8026586:	2b00      	cmp	r3, #0
 8026588:	dd07      	ble.n	802659a <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi+0x6e>
 802658a:	f7fe fe02 	bl	8025192 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 802658e:	4603      	mov	r3, r0
 8026590:	461a      	mov	r2, r3
 8026592:	68fb      	ldr	r3, [r7, #12]
 8026594:	fb93 f3f2 	sdiv	r3, r3, r2
 8026598:	e007      	b.n	80265aa <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi+0x7e>
			   : -difference_type((-__offset - 1)
 802659a:	68fb      	ldr	r3, [r7, #12]
 802659c:	43dc      	mvns	r4, r3
					      / _S_buffer_size()) - 1;
 802659e:	f7fe fdf8 	bl	8025192 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 80265a2:	4603      	mov	r3, r0
 80265a4:	fbb4 f3f3 	udiv	r3, r4, r3
	      __offset > 0 ? __offset / difference_type(_S_buffer_size())
 80265a8:	43db      	mvns	r3, r3
	    const difference_type __node_offset =
 80265aa:	60bb      	str	r3, [r7, #8]
	    _M_set_node(_M_node + __node_offset);
 80265ac:	687b      	ldr	r3, [r7, #4]
 80265ae:	68da      	ldr	r2, [r3, #12]
 80265b0:	68bb      	ldr	r3, [r7, #8]
 80265b2:	009b      	lsls	r3, r3, #2
 80265b4:	4413      	add	r3, r2
 80265b6:	4619      	mov	r1, r3
 80265b8:	6878      	ldr	r0, [r7, #4]
 80265ba:	f7fe fdbb 	bl	8025134 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E11_M_set_nodeEPS3_>
	    _M_cur = _M_first + (__offset - __node_offset
 80265be:	687b      	ldr	r3, [r7, #4]
 80265c0:	685c      	ldr	r4, [r3, #4]
				 * difference_type(_S_buffer_size()));
 80265c2:	f7fe fde6 	bl	8025192 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 80265c6:	4603      	mov	r3, r0
 80265c8:	461a      	mov	r2, r3
 80265ca:	68bb      	ldr	r3, [r7, #8]
 80265cc:	fb02 f303 	mul.w	r3, r2, r3
	    _M_cur = _M_first + (__offset - __node_offset
 80265d0:	68fa      	ldr	r2, [r7, #12]
 80265d2:	1ad3      	subs	r3, r2, r3
 80265d4:	461a      	mov	r2, r3
 80265d6:	4613      	mov	r3, r2
 80265d8:	009b      	lsls	r3, r3, #2
 80265da:	4413      	add	r3, r2
 80265dc:	009b      	lsls	r3, r3, #2
 80265de:	18e2      	adds	r2, r4, r3
 80265e0:	687b      	ldr	r3, [r7, #4]
 80265e2:	601a      	str	r2, [r3, #0]
	return *this;
 80265e4:	687b      	ldr	r3, [r7, #4]
      }
 80265e6:	4618      	mov	r0, r3
 80265e8:	3714      	adds	r7, #20
 80265ea:	46bd      	mov	sp, r7
 80265ec:	bd90      	pop	{r4, r7, pc}
 80265ee:	bf00      	nop
 80265f0:	cccccccd 	.word	0xcccccccd

080265f4 <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80265f4:	b480      	push	{r7}
 80265f6:	b083      	sub	sp, #12
 80265f8:	af00      	add	r7, sp, #0
 80265fa:	6078      	str	r0, [r7, #4]
 80265fc:	687b      	ldr	r3, [r7, #4]
 80265fe:	4618      	mov	r0, r3
 8026600:	370c      	adds	r7, #12
 8026602:	46bd      	mov	sp, r7
 8026604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026608:	4770      	bx	lr

0802660a <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 802660a:	b480      	push	{r7}
 802660c:	b083      	sub	sp, #12
 802660e:	af00      	add	r7, sp, #0
 8026610:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 8026612:	687b      	ldr	r3, [r7, #4]
 8026614:	2200      	movs	r2, #0
 8026616:	601a      	str	r2, [r3, #0]
 8026618:	687b      	ldr	r3, [r7, #4]
 802661a:	2200      	movs	r2, #0
 802661c:	605a      	str	r2, [r3, #4]
 802661e:	687b      	ldr	r3, [r7, #4]
 8026620:	2200      	movs	r2, #0
 8026622:	609a      	str	r2, [r3, #8]
 8026624:	687b      	ldr	r3, [r7, #4]
 8026626:	2200      	movs	r2, #0
 8026628:	60da      	str	r2, [r3, #12]
 802662a:	687b      	ldr	r3, [r7, #4]
 802662c:	4618      	mov	r0, r3
 802662e:	370c      	adds	r7, #12
 8026630:	46bd      	mov	sp, r7
 8026632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026636:	4770      	bx	lr

08026638 <_ZNSt16allocator_traitsISaIPN10BHYWrapper8BHYFrameEEE8allocateERS3_j>:
      allocate(allocator_type& __a, size_type __n)
 8026638:	b580      	push	{r7, lr}
 802663a:	b082      	sub	sp, #8
 802663c:	af00      	add	r7, sp, #0
 802663e:	6078      	str	r0, [r7, #4]
 8026640:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8026642:	2200      	movs	r2, #0
 8026644:	6839      	ldr	r1, [r7, #0]
 8026646:	6878      	ldr	r0, [r7, #4]
 8026648:	f000 ff3a 	bl	80274c0 <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEE8allocateEjPKv>
 802664c:	4603      	mov	r3, r0
 802664e:	4618      	mov	r0, r3
 8026650:	3708      	adds	r7, #8
 8026652:	46bd      	mov	sp, r7
 8026654:	bd80      	pop	{r7, pc}

08026656 <_ZNSaIPN10BHYWrapper8BHYFrameEEC1IS0_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8026656:	b580      	push	{r7, lr}
 8026658:	b082      	sub	sp, #8
 802665a:	af00      	add	r7, sp, #0
 802665c:	6078      	str	r0, [r7, #4]
 802665e:	6039      	str	r1, [r7, #0]
 8026660:	6878      	ldr	r0, [r7, #4]
 8026662:	f000 ff4b 	bl	80274fc <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEEC1Ev>
 8026666:	687b      	ldr	r3, [r7, #4]
 8026668:	4618      	mov	r0, r3
 802666a:	3708      	adds	r7, #8
 802666c:	46bd      	mov	sp, r7
 802666e:	bd80      	pop	{r7, pc}

08026670 <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8026670:	b480      	push	{r7}
 8026672:	b083      	sub	sp, #12
 8026674:	af00      	add	r7, sp, #0
 8026676:	6078      	str	r0, [r7, #4]
 8026678:	687b      	ldr	r3, [r7, #4]
 802667a:	4618      	mov	r0, r3
 802667c:	370c      	adds	r7, #12
 802667e:	46bd      	mov	sp, r7
 8026680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026684:	4770      	bx	lr

08026686 <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEE10deallocateEPS3_j>:
      deallocate(_Tp* __p, size_type __t)
 8026686:	b580      	push	{r7, lr}
 8026688:	b084      	sub	sp, #16
 802668a:	af00      	add	r7, sp, #0
 802668c:	60f8      	str	r0, [r7, #12]
 802668e:	60b9      	str	r1, [r7, #8]
 8026690:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8026692:	687b      	ldr	r3, [r7, #4]
 8026694:	009b      	lsls	r3, r3, #2
 8026696:	4619      	mov	r1, r3
 8026698:	68b8      	ldr	r0, [r7, #8]
 802669a:	f016 fbe3 	bl	803ce64 <_ZdlPvj>
      }
 802669e:	bf00      	nop
 80266a0:	3710      	adds	r7, #16
 80266a2:	46bd      	mov	sp, r7
 80266a4:	bd80      	pop	{r7, pc}

080266a6 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 80266a6:	b580      	push	{r7, lr}
 80266a8:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 80266aa:	2014      	movs	r0, #20
 80266ac:	f7fa fbe9 	bl	8020e82 <_ZSt16__deque_buf_sizej>
 80266b0:	4603      	mov	r3, r0
 80266b2:	4618      	mov	r0, r3
 80266b4:	bd80      	pop	{r7, pc}

080266b6 <_ZSt4swapINSt11_Deque_baseI7RequestSaIS1_EE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 80266b6:	b5b0      	push	{r4, r5, r7, lr}
 80266b8:	b08c      	sub	sp, #48	; 0x30
 80266ba:	af00      	add	r7, sp, #0
 80266bc:	6078      	str	r0, [r7, #4]
 80266be:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80266c0:	6878      	ldr	r0, [r7, #4]
 80266c2:	f000 ff26 	bl	8027512 <_ZSt4moveIRNSt11_Deque_baseI7RequestSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 80266c6:	4602      	mov	r2, r0
 80266c8:	f107 0308 	add.w	r3, r7, #8
 80266cc:	4611      	mov	r1, r2
 80266ce:	4618      	mov	r0, r3
 80266d0:	f000 ff4e 	bl	8027570 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_Deque_impl_dataC1EOS3_>
      __a = _GLIBCXX_MOVE(__b);
 80266d4:	6838      	ldr	r0, [r7, #0]
 80266d6:	f000 ff1c 	bl	8027512 <_ZSt4moveIRNSt11_Deque_baseI7RequestSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 80266da:	4602      	mov	r2, r0
 80266dc:	687b      	ldr	r3, [r7, #4]
 80266de:	461c      	mov	r4, r3
 80266e0:	4615      	mov	r5, r2
 80266e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80266e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80266e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80266e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80266ea:	e895 0003 	ldmia.w	r5, {r0, r1}
 80266ee:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80266f2:	f107 0308 	add.w	r3, r7, #8
 80266f6:	4618      	mov	r0, r3
 80266f8:	f000 ff0b 	bl	8027512 <_ZSt4moveIRNSt11_Deque_baseI7RequestSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 80266fc:	4602      	mov	r2, r0
 80266fe:	683b      	ldr	r3, [r7, #0]
 8026700:	461c      	mov	r4, r3
 8026702:	4615      	mov	r5, r2
 8026704:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8026706:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8026708:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802670a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802670c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8026710:	e884 0003 	stmia.w	r4, {r0, r1}
    }
 8026714:	bf00      	nop
 8026716:	3730      	adds	r7, #48	; 0x30
 8026718:	46bd      	mov	sp, r7
 802671a:	bdb0      	pop	{r4, r5, r7, pc}

0802671c <_ZNSt5dequeI7RequestSaIS0_EE15_M_erase_at_endESt15_Deque_iteratorIS0_RS0_PS0_E>:
      _M_erase_at_end(iterator __pos)
 802671c:	b590      	push	{r4, r7, lr}
 802671e:	b08b      	sub	sp, #44	; 0x2c
 8026720:	af00      	add	r7, sp, #0
 8026722:	6078      	str	r0, [r7, #4]
 8026724:	6039      	str	r1, [r7, #0]
	_M_destroy_data(__pos, end(), _M_get_Tp_allocator());
 8026726:	f107 0308 	add.w	r3, r7, #8
 802672a:	6839      	ldr	r1, [r7, #0]
 802672c:	4618      	mov	r0, r3
 802672e:	f7fc fe13 	bl	8023358 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1ERKS3_>
 8026732:	f107 0318 	add.w	r3, r7, #24
 8026736:	6879      	ldr	r1, [r7, #4]
 8026738:	4618      	mov	r0, r3
 802673a:	f7fc fdf3 	bl	8023324 <_ZNSt5dequeI7RequestSaIS0_EE3endEv>
 802673e:	687b      	ldr	r3, [r7, #4]
 8026740:	4618      	mov	r0, r3
 8026742:	f7fc fdfe 	bl	8023342 <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 8026746:	4603      	mov	r3, r0
 8026748:	f107 0218 	add.w	r2, r7, #24
 802674c:	f107 0108 	add.w	r1, r7, #8
 8026750:	6878      	ldr	r0, [r7, #4]
 8026752:	f7fc fe1d 	bl	8023390 <_ZNSt5dequeI7RequestSaIS0_EE15_M_destroy_dataESt15_Deque_iteratorIS0_RS0_PS0_ES6_RKS1_>
	_M_destroy_nodes(__pos._M_node + 1,
 8026756:	6878      	ldr	r0, [r7, #4]
 8026758:	683b      	ldr	r3, [r7, #0]
 802675a:	68db      	ldr	r3, [r3, #12]
 802675c:	1d19      	adds	r1, r3, #4
			 this->_M_impl._M_finish._M_node + 1);
 802675e:	687b      	ldr	r3, [r7, #4]
 8026760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	_M_destroy_nodes(__pos._M_node + 1,
 8026762:	3304      	adds	r3, #4
 8026764:	461a      	mov	r2, r3
 8026766:	f7fc fd98 	bl	802329a <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_M_destroy_nodesEPPS0_S4_>
	this->_M_impl._M_finish = __pos;
 802676a:	687b      	ldr	r3, [r7, #4]
 802676c:	683a      	ldr	r2, [r7, #0]
 802676e:	f103 0418 	add.w	r4, r3, #24
 8026772:	4613      	mov	r3, r2
 8026774:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8026776:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      }
 802677a:	bf00      	nop
 802677c:	372c      	adds	r7, #44	; 0x2c
 802677e:	46bd      	mov	sp, r7
 8026780:	bd90      	pop	{r4, r7, pc}

08026782 <_ZSt18__do_alloc_on_moveISaI7RequestEEvRT_S3_St17integral_constantIbLb1EE>:
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 8026782:	b580      	push	{r7, lr}
 8026784:	b084      	sub	sp, #16
 8026786:	af00      	add	r7, sp, #0
 8026788:	60f8      	str	r0, [r7, #12]
 802678a:	60b9      	str	r1, [r7, #8]
 802678c:	713a      	strb	r2, [r7, #4]
    { __one = std::move(__two); }
 802678e:	68b8      	ldr	r0, [r7, #8]
 8026790:	f000 ff0d 	bl	80275ae <_ZSt4moveIRSaI7RequestEEONSt16remove_referenceIT_E4typeEOS4_>
 8026794:	bf00      	nop
 8026796:	3710      	adds	r7, #16
 8026798:	46bd      	mov	sp, r7
 802679a:	bd80      	pop	{r7, pc}

0802679c <_ZSt4swapINSt11_Deque_baseI8ResponceSaIS1_EE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>:
    swap(_Tp& __a, _Tp& __b)
 802679c:	b5b0      	push	{r4, r5, r7, lr}
 802679e:	b08c      	sub	sp, #48	; 0x30
 80267a0:	af00      	add	r7, sp, #0
 80267a2:	6078      	str	r0, [r7, #4]
 80267a4:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80267a6:	6878      	ldr	r0, [r7, #4]
 80267a8:	f000 ff0c 	bl	80275c4 <_ZSt4moveIRNSt11_Deque_baseI8ResponceSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 80267ac:	4602      	mov	r2, r0
 80267ae:	f107 0308 	add.w	r3, r7, #8
 80267b2:	4611      	mov	r1, r2
 80267b4:	4618      	mov	r0, r3
 80267b6:	f000 ff34 	bl	8027622 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_Deque_impl_dataC1EOS3_>
      __a = _GLIBCXX_MOVE(__b);
 80267ba:	6838      	ldr	r0, [r7, #0]
 80267bc:	f000 ff02 	bl	80275c4 <_ZSt4moveIRNSt11_Deque_baseI8ResponceSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 80267c0:	4602      	mov	r2, r0
 80267c2:	687b      	ldr	r3, [r7, #4]
 80267c4:	461c      	mov	r4, r3
 80267c6:	4615      	mov	r5, r2
 80267c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80267ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80267cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80267ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80267d0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80267d4:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80267d8:	f107 0308 	add.w	r3, r7, #8
 80267dc:	4618      	mov	r0, r3
 80267de:	f000 fef1 	bl	80275c4 <_ZSt4moveIRNSt11_Deque_baseI8ResponceSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 80267e2:	4602      	mov	r2, r0
 80267e4:	683b      	ldr	r3, [r7, #0]
 80267e6:	461c      	mov	r4, r3
 80267e8:	4615      	mov	r5, r2
 80267ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80267ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80267ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80267f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80267f2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80267f6:	e884 0003 	stmia.w	r4, {r0, r1}
    }
 80267fa:	bf00      	nop
 80267fc:	3730      	adds	r7, #48	; 0x30
 80267fe:	46bd      	mov	sp, r7
 8026800:	bdb0      	pop	{r4, r5, r7, pc}

08026802 <_ZNSt5dequeI8ResponceSaIS0_EE15_M_erase_at_endESt15_Deque_iteratorIS0_RS0_PS0_E>:
      _M_erase_at_end(iterator __pos)
 8026802:	b590      	push	{r4, r7, lr}
 8026804:	b08b      	sub	sp, #44	; 0x2c
 8026806:	af00      	add	r7, sp, #0
 8026808:	6078      	str	r0, [r7, #4]
 802680a:	6039      	str	r1, [r7, #0]
	_M_destroy_data(__pos, end(), _M_get_Tp_allocator());
 802680c:	f107 0308 	add.w	r3, r7, #8
 8026810:	6839      	ldr	r1, [r7, #0]
 8026812:	4618      	mov	r0, r3
 8026814:	f7fc fe43 	bl	802349e <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1ERKS3_>
 8026818:	f107 0318 	add.w	r3, r7, #24
 802681c:	6879      	ldr	r1, [r7, #4]
 802681e:	4618      	mov	r0, r3
 8026820:	f7fc fe23 	bl	802346a <_ZNSt5dequeI8ResponceSaIS0_EE3endEv>
 8026824:	687b      	ldr	r3, [r7, #4]
 8026826:	4618      	mov	r0, r3
 8026828:	f7fc fe2e 	bl	8023488 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 802682c:	4603      	mov	r3, r0
 802682e:	f107 0218 	add.w	r2, r7, #24
 8026832:	f107 0108 	add.w	r1, r7, #8
 8026836:	6878      	ldr	r0, [r7, #4]
 8026838:	f7fc fe4d 	bl	80234d6 <_ZNSt5dequeI8ResponceSaIS0_EE15_M_destroy_dataESt15_Deque_iteratorIS0_RS0_PS0_ES6_RKS1_>
	_M_destroy_nodes(__pos._M_node + 1,
 802683c:	6878      	ldr	r0, [r7, #4]
 802683e:	683b      	ldr	r3, [r7, #0]
 8026840:	68db      	ldr	r3, [r3, #12]
 8026842:	1d19      	adds	r1, r3, #4
			 this->_M_impl._M_finish._M_node + 1);
 8026844:	687b      	ldr	r3, [r7, #4]
 8026846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	_M_destroy_nodes(__pos._M_node + 1,
 8026848:	3304      	adds	r3, #4
 802684a:	461a      	mov	r2, r3
 802684c:	f7fd ff5c 	bl	8024708 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_M_destroy_nodesEPPS0_S4_>
	this->_M_impl._M_finish = __pos;
 8026850:	687b      	ldr	r3, [r7, #4]
 8026852:	683a      	ldr	r2, [r7, #0]
 8026854:	f103 0418 	add.w	r4, r3, #24
 8026858:	4613      	mov	r3, r2
 802685a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802685c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      }
 8026860:	bf00      	nop
 8026862:	372c      	adds	r7, #44	; 0x2c
 8026864:	46bd      	mov	sp, r7
 8026866:	bd90      	pop	{r4, r7, pc}

08026868 <_ZSt18__do_alloc_on_moveISaI8ResponceEEvRT_S3_St17integral_constantIbLb1EE>:
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 8026868:	b580      	push	{r7, lr}
 802686a:	b084      	sub	sp, #16
 802686c:	af00      	add	r7, sp, #0
 802686e:	60f8      	str	r0, [r7, #12]
 8026870:	60b9      	str	r1, [r7, #8]
 8026872:	713a      	strb	r2, [r7, #4]
    { __one = std::move(__two); }
 8026874:	68b8      	ldr	r0, [r7, #8]
 8026876:	f000 fef3 	bl	8027660 <_ZSt4moveIRSaI8ResponceEEONSt16remove_referenceIT_E4typeEOS4_>
 802687a:	bf00      	nop
 802687c:	3710      	adds	r7, #16
 802687e:	46bd      	mov	sp, r7
 8026880:	bd80      	pop	{r7, pc}

08026882 <_ZSt4swapINSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS2_EE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISA_ESt18is_move_assignableISA_EEE5valueEvE4typeERSA_SK_>:
    swap(_Tp& __a, _Tp& __b)
 8026882:	b5b0      	push	{r4, r5, r7, lr}
 8026884:	b08c      	sub	sp, #48	; 0x30
 8026886:	af00      	add	r7, sp, #0
 8026888:	6078      	str	r0, [r7, #4]
 802688a:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 802688c:	6878      	ldr	r0, [r7, #4]
 802688e:	f000 fef2 	bl	8027676 <_ZSt4moveIRNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS2_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS8_>
 8026892:	4602      	mov	r2, r0
 8026894:	f107 0308 	add.w	r3, r7, #8
 8026898:	4611      	mov	r1, r2
 802689a:	4618      	mov	r0, r3
 802689c:	f000 ff1a 	bl	80276d4 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_dataC1EOS4_>
      __a = _GLIBCXX_MOVE(__b);
 80268a0:	6838      	ldr	r0, [r7, #0]
 80268a2:	f000 fee8 	bl	8027676 <_ZSt4moveIRNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS2_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS8_>
 80268a6:	4602      	mov	r2, r0
 80268a8:	687b      	ldr	r3, [r7, #4]
 80268aa:	461c      	mov	r4, r3
 80268ac:	4615      	mov	r5, r2
 80268ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80268b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80268b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80268b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80268b6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80268ba:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80268be:	f107 0308 	add.w	r3, r7, #8
 80268c2:	4618      	mov	r0, r3
 80268c4:	f000 fed7 	bl	8027676 <_ZSt4moveIRNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS2_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS8_>
 80268c8:	4602      	mov	r2, r0
 80268ca:	683b      	ldr	r3, [r7, #0]
 80268cc:	461c      	mov	r4, r3
 80268ce:	4615      	mov	r5, r2
 80268d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80268d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80268d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80268d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80268d8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80268dc:	e884 0003 	stmia.w	r4, {r0, r1}
    }
 80268e0:	bf00      	nop
 80268e2:	3730      	adds	r7, #48	; 0x30
 80268e4:	46bd      	mov	sp, r7
 80268e6:	bdb0      	pop	{r4, r5, r7, pc}

080268e8 <_ZSt18__do_alloc_on_moveISaIN10BHYWrapper8BHYFrameEEEvRT_S4_St17integral_constantIbLb1EE>:
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 80268e8:	b580      	push	{r7, lr}
 80268ea:	b084      	sub	sp, #16
 80268ec:	af00      	add	r7, sp, #0
 80268ee:	60f8      	str	r0, [r7, #12]
 80268f0:	60b9      	str	r1, [r7, #8]
 80268f2:	713a      	strb	r2, [r7, #4]
    { __one = std::move(__two); }
 80268f4:	68b8      	ldr	r0, [r7, #8]
 80268f6:	f000 ff0c 	bl	8027712 <_ZSt4moveIRSaIN10BHYWrapper8BHYFrameEEEONSt16remove_referenceIT_E4typeEOS5_>
 80268fa:	bf00      	nop
 80268fc:	3710      	adds	r7, #16
 80268fe:	46bd      	mov	sp, r7
 8026900:	bd80      	pop	{r7, pc}

08026902 <_ZN9__gnu_cxx13new_allocatorIP7RequestE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8026902:	b580      	push	{r7, lr}
 8026904:	b084      	sub	sp, #16
 8026906:	af00      	add	r7, sp, #0
 8026908:	60f8      	str	r0, [r7, #12]
 802690a:	60b9      	str	r1, [r7, #8]
 802690c:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 802690e:	68f8      	ldr	r0, [r7, #12]
 8026910:	f000 ff0a 	bl	8027728 <_ZNK9__gnu_cxx13new_allocatorIP7RequestE11_M_max_sizeEv>
 8026914:	4602      	mov	r2, r0
 8026916:	68bb      	ldr	r3, [r7, #8]
 8026918:	4293      	cmp	r3, r2
 802691a:	bf8c      	ite	hi
 802691c:	2301      	movhi	r3, #1
 802691e:	2300      	movls	r3, #0
 8026920:	b2db      	uxtb	r3, r3
 8026922:	2b00      	cmp	r3, #0
 8026924:	d001      	beq.n	802692a <_ZN9__gnu_cxx13new_allocatorIP7RequestE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8026926:	f016 fab0 	bl	803ce8a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 802692a:	68bb      	ldr	r3, [r7, #8]
 802692c:	009b      	lsls	r3, r3, #2
 802692e:	4618      	mov	r0, r3
 8026930:	f016 fa9a 	bl	803ce68 <_Znwj>
 8026934:	4603      	mov	r3, r0
      }
 8026936:	4618      	mov	r0, r3
 8026938:	3710      	adds	r7, #16
 802693a:	46bd      	mov	sp, r7
 802693c:	bd80      	pop	{r7, pc}

0802693e <_ZN9__gnu_cxx13new_allocatorI7RequestE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __t)
 802693e:	b580      	push	{r7, lr}
 8026940:	b084      	sub	sp, #16
 8026942:	af00      	add	r7, sp, #0
 8026944:	60f8      	str	r0, [r7, #12]
 8026946:	60b9      	str	r1, [r7, #8]
 8026948:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 802694a:	687a      	ldr	r2, [r7, #4]
 802694c:	4613      	mov	r3, r2
 802694e:	009b      	lsls	r3, r3, #2
 8026950:	4413      	add	r3, r2
 8026952:	009b      	lsls	r3, r3, #2
 8026954:	4619      	mov	r1, r3
 8026956:	68b8      	ldr	r0, [r7, #8]
 8026958:	f016 fa84 	bl	803ce64 <_ZdlPvj>
      }
 802695c:	bf00      	nop
 802695e:	3710      	adds	r7, #16
 8026960:	46bd      	mov	sp, r7
 8026962:	bd80      	pop	{r7, pc}

08026964 <_ZN9__gnu_cxx13new_allocatorIP7RequestEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8026964:	b480      	push	{r7}
 8026966:	b083      	sub	sp, #12
 8026968:	af00      	add	r7, sp, #0
 802696a:	6078      	str	r0, [r7, #4]
 802696c:	687b      	ldr	r3, [r7, #4]
 802696e:	4618      	mov	r0, r3
 8026970:	370c      	adds	r7, #12
 8026972:	46bd      	mov	sp, r7
 8026974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026978:	4770      	bx	lr

0802697a <_ZSt8_DestroyIP7RequestEvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 802697a:	b580      	push	{r7, lr}
 802697c:	b082      	sub	sp, #8
 802697e:	af00      	add	r7, sp, #0
 8026980:	6078      	str	r0, [r7, #4]
 8026982:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8026984:	6839      	ldr	r1, [r7, #0]
 8026986:	6878      	ldr	r0, [r7, #4]
 8026988:	f000 feda 	bl	8027740 <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RequestEEvT_S4_>
    }
 802698c:	bf00      	nop
 802698e:	3708      	adds	r7, #8
 8026990:	46bd      	mov	sp, r7
 8026992:	bd80      	pop	{r7, pc}

08026994 <_ZN9__gnu_cxx13new_allocatorI8ResponceEC1Ev>:
 8026994:	b480      	push	{r7}
 8026996:	b083      	sub	sp, #12
 8026998:	af00      	add	r7, sp, #0
 802699a:	6078      	str	r0, [r7, #4]
 802699c:	687b      	ldr	r3, [r7, #4]
 802699e:	4618      	mov	r0, r3
 80269a0:	370c      	adds	r7, #12
 80269a2:	46bd      	mov	sp, r7
 80269a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80269a8:	4770      	bx	lr

080269aa <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 80269aa:	b480      	push	{r7}
 80269ac:	b083      	sub	sp, #12
 80269ae:	af00      	add	r7, sp, #0
 80269b0:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 80269b2:	687b      	ldr	r3, [r7, #4]
 80269b4:	2200      	movs	r2, #0
 80269b6:	601a      	str	r2, [r3, #0]
 80269b8:	687b      	ldr	r3, [r7, #4]
 80269ba:	2200      	movs	r2, #0
 80269bc:	605a      	str	r2, [r3, #4]
 80269be:	687b      	ldr	r3, [r7, #4]
 80269c0:	2200      	movs	r2, #0
 80269c2:	609a      	str	r2, [r3, #8]
 80269c4:	687b      	ldr	r3, [r7, #4]
 80269c6:	2200      	movs	r2, #0
 80269c8:	60da      	str	r2, [r3, #12]
 80269ca:	687b      	ldr	r3, [r7, #4]
 80269cc:	4618      	mov	r0, r3
 80269ce:	370c      	adds	r7, #12
 80269d0:	46bd      	mov	sp, r7
 80269d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80269d6:	4770      	bx	lr

080269d8 <_ZNSt16allocator_traitsISaIP8ResponceEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 80269d8:	b580      	push	{r7, lr}
 80269da:	b082      	sub	sp, #8
 80269dc:	af00      	add	r7, sp, #0
 80269de:	6078      	str	r0, [r7, #4]
 80269e0:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80269e2:	2200      	movs	r2, #0
 80269e4:	6839      	ldr	r1, [r7, #0]
 80269e6:	6878      	ldr	r0, [r7, #4]
 80269e8:	f000 fec2 	bl	8027770 <_ZN9__gnu_cxx13new_allocatorIP8ResponceE8allocateEjPKv>
 80269ec:	4603      	mov	r3, r0
 80269ee:	4618      	mov	r0, r3
 80269f0:	3708      	adds	r7, #8
 80269f2:	46bd      	mov	sp, r7
 80269f4:	bd80      	pop	{r7, pc}

080269f6 <_ZNSt16allocator_traitsISaI8ResponceEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80269f6:	b580      	push	{r7, lr}
 80269f8:	b084      	sub	sp, #16
 80269fa:	af00      	add	r7, sp, #0
 80269fc:	60f8      	str	r0, [r7, #12]
 80269fe:	60b9      	str	r1, [r7, #8]
 8026a00:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8026a02:	687a      	ldr	r2, [r7, #4]
 8026a04:	68b9      	ldr	r1, [r7, #8]
 8026a06:	68f8      	ldr	r0, [r7, #12]
 8026a08:	f000 fed0 	bl	80277ac <_ZN9__gnu_cxx13new_allocatorI8ResponceE10deallocateEPS1_j>
 8026a0c:	bf00      	nop
 8026a0e:	3710      	adds	r7, #16
 8026a10:	46bd      	mov	sp, r7
 8026a12:	bd80      	pop	{r7, pc}

08026a14 <_ZNKSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8026a14:	b480      	push	{r7}
 8026a16:	b083      	sub	sp, #12
 8026a18:	af00      	add	r7, sp, #0
 8026a1a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8026a1c:	687b      	ldr	r3, [r7, #4]
 8026a1e:	4618      	mov	r0, r3
 8026a20:	370c      	adds	r7, #12
 8026a22:	46bd      	mov	sp, r7
 8026a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026a28:	4770      	bx	lr

08026a2a <_ZNSaIP8ResponceEC1IS_EERKSaIT_E>:
 8026a2a:	b580      	push	{r7, lr}
 8026a2c:	b082      	sub	sp, #8
 8026a2e:	af00      	add	r7, sp, #0
 8026a30:	6078      	str	r0, [r7, #4]
 8026a32:	6039      	str	r1, [r7, #0]
 8026a34:	6878      	ldr	r0, [r7, #4]
 8026a36:	f000 fec9 	bl	80277cc <_ZN9__gnu_cxx13new_allocatorIP8ResponceEC1Ev>
 8026a3a:	687b      	ldr	r3, [r7, #4]
 8026a3c:	4618      	mov	r0, r3
 8026a3e:	3708      	adds	r7, #8
 8026a40:	46bd      	mov	sp, r7
 8026a42:	bd80      	pop	{r7, pc}

08026a44 <_ZN9__gnu_cxx13new_allocatorIP8ResponceED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8026a44:	b480      	push	{r7}
 8026a46:	b083      	sub	sp, #12
 8026a48:	af00      	add	r7, sp, #0
 8026a4a:	6078      	str	r0, [r7, #4]
 8026a4c:	687b      	ldr	r3, [r7, #4]
 8026a4e:	4618      	mov	r0, r3
 8026a50:	370c      	adds	r7, #12
 8026a52:	46bd      	mov	sp, r7
 8026a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026a58:	4770      	bx	lr

08026a5a <_ZN9__gnu_cxx13new_allocatorIP8ResponceE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 8026a5a:	b580      	push	{r7, lr}
 8026a5c:	b084      	sub	sp, #16
 8026a5e:	af00      	add	r7, sp, #0
 8026a60:	60f8      	str	r0, [r7, #12]
 8026a62:	60b9      	str	r1, [r7, #8]
 8026a64:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8026a66:	687b      	ldr	r3, [r7, #4]
 8026a68:	009b      	lsls	r3, r3, #2
 8026a6a:	4619      	mov	r1, r3
 8026a6c:	68b8      	ldr	r0, [r7, #8]
 8026a6e:	f016 f9f9 	bl	803ce64 <_ZdlPvj>
      }
 8026a72:	bf00      	nop
 8026a74:	3710      	adds	r7, #16
 8026a76:	46bd      	mov	sp, r7
 8026a78:	bd80      	pop	{r7, pc}

08026a7a <_ZSt8_DestroyIP8ResponceEvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8026a7a:	b580      	push	{r7, lr}
 8026a7c:	b082      	sub	sp, #8
 8026a7e:	af00      	add	r7, sp, #0
 8026a80:	6078      	str	r0, [r7, #4]
 8026a82:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8026a84:	6839      	ldr	r1, [r7, #0]
 8026a86:	6878      	ldr	r0, [r7, #4]
 8026a88:	f000 feab 	bl	80277e2 <_ZNSt12_Destroy_auxILb0EE9__destroyIP8ResponceEEvT_S4_>
    }
 8026a8c:	bf00      	nop
 8026a8e:	3708      	adds	r7, #8
 8026a90:	46bd      	mov	sp, r7
 8026a92:	bd80      	pop	{r7, pc}

08026a94 <_ZNSt16allocator_traitsISaI7RequestEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8026a94:	b580      	push	{r7, lr}
 8026a96:	b082      	sub	sp, #8
 8026a98:	af00      	add	r7, sp, #0
 8026a9a:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8026a9c:	6878      	ldr	r0, [r7, #4]
 8026a9e:	f000 feb8 	bl	8027812 <_ZNK9__gnu_cxx13new_allocatorI7RequestE8max_sizeEv>
 8026aa2:	4603      	mov	r3, r0
      }
 8026aa4:	4618      	mov	r0, r3
 8026aa6:	3708      	adds	r7, #8
 8026aa8:	46bd      	mov	sp, r7
 8026aaa:	bd80      	pop	{r7, pc}

08026aac <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8026aac:	b480      	push	{r7}
 8026aae:	b083      	sub	sp, #12
 8026ab0:	af00      	add	r7, sp, #0
 8026ab2:	6078      	str	r0, [r7, #4]
 8026ab4:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8026ab6:	683b      	ldr	r3, [r7, #0]
 8026ab8:	681a      	ldr	r2, [r3, #0]
 8026aba:	687b      	ldr	r3, [r7, #4]
 8026abc:	681b      	ldr	r3, [r3, #0]
 8026abe:	429a      	cmp	r2, r3
 8026ac0:	d201      	bcs.n	8026ac6 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8026ac2:	683b      	ldr	r3, [r7, #0]
 8026ac4:	e000      	b.n	8026ac8 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8026ac6:	687b      	ldr	r3, [r7, #4]
    }
 8026ac8:	4618      	mov	r0, r3
 8026aca:	370c      	adds	r7, #12
 8026acc:	46bd      	mov	sp, r7
 8026ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026ad2:	4770      	bx	lr

08026ad4 <_ZSt4copyIPP7RequestS2_ET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 8026ad4:	b590      	push	{r4, r7, lr}
 8026ad6:	b085      	sub	sp, #20
 8026ad8:	af00      	add	r7, sp, #0
 8026ada:	60f8      	str	r0, [r7, #12]
 8026adc:	60b9      	str	r1, [r7, #8]
 8026ade:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8026ae0:	68f8      	ldr	r0, [r7, #12]
 8026ae2:	f000 fea2 	bl	802782a <_ZSt12__miter_baseIPP7RequestET_S3_>
 8026ae6:	4604      	mov	r4, r0
 8026ae8:	68b8      	ldr	r0, [r7, #8]
 8026aea:	f000 fe9e 	bl	802782a <_ZSt12__miter_baseIPP7RequestET_S3_>
 8026aee:	4603      	mov	r3, r0
 8026af0:	687a      	ldr	r2, [r7, #4]
 8026af2:	4619      	mov	r1, r3
 8026af4:	4620      	mov	r0, r4
 8026af6:	f000 fea3 	bl	8027840 <_ZSt13__copy_move_aILb0EPP7RequestS2_ET1_T0_S4_S3_>
 8026afa:	4603      	mov	r3, r0
    }
 8026afc:	4618      	mov	r0, r3
 8026afe:	3714      	adds	r7, #20
 8026b00:	46bd      	mov	sp, r7
 8026b02:	bd90      	pop	{r4, r7, pc}

08026b04 <_ZSt13copy_backwardIPP7RequestS2_ET0_T_S4_S3_>:
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8026b04:	b590      	push	{r4, r7, lr}
 8026b06:	b085      	sub	sp, #20
 8026b08:	af00      	add	r7, sp, #0
 8026b0a:	60f8      	str	r0, [r7, #12]
 8026b0c:	60b9      	str	r1, [r7, #8]
 8026b0e:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8026b10:	68f8      	ldr	r0, [r7, #12]
 8026b12:	f000 fe8a 	bl	802782a <_ZSt12__miter_baseIPP7RequestET_S3_>
 8026b16:	4604      	mov	r4, r0
 8026b18:	68b8      	ldr	r0, [r7, #8]
 8026b1a:	f000 fe86 	bl	802782a <_ZSt12__miter_baseIPP7RequestET_S3_>
 8026b1e:	4603      	mov	r3, r0
 8026b20:	687a      	ldr	r2, [r7, #4]
 8026b22:	4619      	mov	r1, r3
 8026b24:	4620      	mov	r0, r4
 8026b26:	f000 feae 	bl	8027886 <_ZSt22__copy_move_backward_aILb0EPP7RequestS2_ET1_T0_S4_S3_>
 8026b2a:	4603      	mov	r3, r0
    }
 8026b2c:	4618      	mov	r0, r3
 8026b2e:	3714      	adds	r7, #20
 8026b30:	46bd      	mov	sp, r7
 8026b32:	bd90      	pop	{r4, r7, pc}

08026b34 <_ZN9__gnu_cxx13new_allocatorI7RequestE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8026b34:	b580      	push	{r7, lr}
 8026b36:	b084      	sub	sp, #16
 8026b38:	af00      	add	r7, sp, #0
 8026b3a:	60f8      	str	r0, [r7, #12]
 8026b3c:	60b9      	str	r1, [r7, #8]
 8026b3e:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8026b40:	68f8      	ldr	r0, [r7, #12]
 8026b42:	f000 fec3 	bl	80278cc <_ZNK9__gnu_cxx13new_allocatorI7RequestE11_M_max_sizeEv>
 8026b46:	4602      	mov	r2, r0
 8026b48:	68bb      	ldr	r3, [r7, #8]
 8026b4a:	4293      	cmp	r3, r2
 8026b4c:	bf8c      	ite	hi
 8026b4e:	2301      	movhi	r3, #1
 8026b50:	2300      	movls	r3, #0
 8026b52:	b2db      	uxtb	r3, r3
 8026b54:	2b00      	cmp	r3, #0
 8026b56:	d001      	beq.n	8026b5c <_ZN9__gnu_cxx13new_allocatorI7RequestE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8026b58:	f016 f997 	bl	803ce8a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8026b5c:	68ba      	ldr	r2, [r7, #8]
 8026b5e:	4613      	mov	r3, r2
 8026b60:	009b      	lsls	r3, r3, #2
 8026b62:	4413      	add	r3, r2
 8026b64:	009b      	lsls	r3, r3, #2
 8026b66:	4618      	mov	r0, r3
 8026b68:	f016 f97e 	bl	803ce68 <_Znwj>
 8026b6c:	4603      	mov	r3, r0
      }
 8026b6e:	4618      	mov	r0, r3
 8026b70:	3710      	adds	r7, #16
 8026b72:	46bd      	mov	sp, r7
 8026b74:	bd80      	pop	{r7, pc}

08026b76 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 8026b76:	b580      	push	{r7, lr}
 8026b78:	b082      	sub	sp, #8
 8026b7a:	af00      	add	r7, sp, #0
 8026b7c:	6078      	str	r0, [r7, #4]
 8026b7e:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 8026b80:	6839      	ldr	r1, [r7, #0]
 8026b82:	6878      	ldr	r0, [r7, #4]
 8026b84:	f7fc fe44 	bl	8023810 <_ZNSaIhEC1ERKS_>
 8026b88:	687b      	ldr	r3, [r7, #4]
 8026b8a:	4618      	mov	r0, r3
 8026b8c:	f7fc fcce 	bl	802352c <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1Ev>
	{ }
 8026b90:	687b      	ldr	r3, [r7, #4]
 8026b92:	4618      	mov	r0, r3
 8026b94:	3708      	adds	r7, #8
 8026b96:	46bd      	mov	sp, r7
 8026b98:	bd80      	pop	{r7, pc}

08026b9a <_ZSt4moveIRSaIhEEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8026b9a:	b480      	push	{r7}
 8026b9c:	b083      	sub	sp, #12
 8026b9e:	af00      	add	r7, sp, #0
 8026ba0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8026ba2:	687b      	ldr	r3, [r7, #4]
 8026ba4:	4618      	mov	r0, r3
 8026ba6:	370c      	adds	r7, #12
 8026ba8:	46bd      	mov	sp, r7
 8026baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026bae:	4770      	bx	lr

08026bb0 <_ZNSt5dequeI8ResponceSaIS0_EE11_S_max_sizeERKS1_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8026bb0:	b580      	push	{r7, lr}
 8026bb2:	b084      	sub	sp, #16
 8026bb4:	af00      	add	r7, sp, #0
 8026bb6:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 8026bb8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8026bbc:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8026bbe:	6878      	ldr	r0, [r7, #4]
 8026bc0:	f000 fe92 	bl	80278e8 <_ZNSt16allocator_traitsISaI8ResponceEE8max_sizeERKS1_>
 8026bc4:	4603      	mov	r3, r0
 8026bc6:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8026bc8:	f107 0208 	add.w	r2, r7, #8
 8026bcc:	f107 030c 	add.w	r3, r7, #12
 8026bd0:	4611      	mov	r1, r2
 8026bd2:	4618      	mov	r0, r3
 8026bd4:	f7ff ff6a 	bl	8026aac <_ZSt3minIjERKT_S2_S2_>
 8026bd8:	4603      	mov	r3, r0
 8026bda:	681b      	ldr	r3, [r3, #0]
      }
 8026bdc:	4618      	mov	r0, r3
 8026bde:	3710      	adds	r7, #16
 8026be0:	46bd      	mov	sp, r7
 8026be2:	bd80      	pop	{r7, pc}

08026be4 <_ZNSt5dequeI8ResponceSaIS0_EE17_M_reallocate_mapEjb>:
    deque<_Tp, _Alloc>::
 8026be4:	b590      	push	{r4, r7, lr}
 8026be6:	b08b      	sub	sp, #44	; 0x2c
 8026be8:	af00      	add	r7, sp, #0
 8026bea:	60f8      	str	r0, [r7, #12]
 8026bec:	60b9      	str	r1, [r7, #8]
 8026bee:	4613      	mov	r3, r2
 8026bf0:	71fb      	strb	r3, [r7, #7]
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 8026bf2:	68fb      	ldr	r3, [r7, #12]
 8026bf4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8026bf6:	68fb      	ldr	r3, [r7, #12]
 8026bf8:	695b      	ldr	r3, [r3, #20]
 8026bfa:	1ad3      	subs	r3, r2, r3
 8026bfc:	109b      	asrs	r3, r3, #2
 8026bfe:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 8026c00:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 8026c02:	68bb      	ldr	r3, [r7, #8]
 8026c04:	6a3a      	ldr	r2, [r7, #32]
 8026c06:	4413      	add	r3, r2
 8026c08:	61fb      	str	r3, [r7, #28]
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 8026c0a:	68fb      	ldr	r3, [r7, #12]
 8026c0c:	685a      	ldr	r2, [r3, #4]
 8026c0e:	69fb      	ldr	r3, [r7, #28]
 8026c10:	005b      	lsls	r3, r3, #1
 8026c12:	429a      	cmp	r2, r3
 8026c14:	d92d      	bls.n	8026c72 <_ZNSt5dequeI8ResponceSaIS0_EE17_M_reallocate_mapEjb+0x8e>
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8026c16:	68fb      	ldr	r3, [r7, #12]
 8026c18:	681a      	ldr	r2, [r3, #0]
 8026c1a:	68fb      	ldr	r3, [r7, #12]
 8026c1c:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 8026c1e:	69fb      	ldr	r3, [r7, #28]
 8026c20:	1acb      	subs	r3, r1, r3
 8026c22:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8026c24:	0099      	lsls	r1, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8026c26:	79fb      	ldrb	r3, [r7, #7]
 8026c28:	2b00      	cmp	r3, #0
 8026c2a:	d002      	beq.n	8026c32 <_ZNSt5dequeI8ResponceSaIS0_EE17_M_reallocate_mapEjb+0x4e>
 8026c2c:	68bb      	ldr	r3, [r7, #8]
 8026c2e:	009b      	lsls	r3, r3, #2
 8026c30:	e000      	b.n	8026c34 <_ZNSt5dequeI8ResponceSaIS0_EE17_M_reallocate_mapEjb+0x50>
 8026c32:	2300      	movs	r3, #0
 8026c34:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8026c36:	4413      	add	r3, r2
 8026c38:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 8026c3a:	68fb      	ldr	r3, [r7, #12]
 8026c3c:	695b      	ldr	r3, [r3, #20]
 8026c3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8026c40:	429a      	cmp	r2, r3
 8026c42:	d209      	bcs.n	8026c58 <_ZNSt5dequeI8ResponceSaIS0_EE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 8026c44:	68fb      	ldr	r3, [r7, #12]
 8026c46:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 8026c48:	68fb      	ldr	r3, [r7, #12]
 8026c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 8026c4c:	3304      	adds	r3, #4
 8026c4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8026c50:	4619      	mov	r1, r3
 8026c52:	f000 fe55 	bl	8027900 <_ZSt4copyIPP8ResponceS2_ET0_T_S4_S3_>
 8026c56:	e048      	b.n	8026cea <_ZNSt5dequeI8ResponceSaIS0_EE17_M_reallocate_mapEjb+0x106>
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8026c58:	68fb      	ldr	r3, [r7, #12]
 8026c5a:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 8026c5c:	68fb      	ldr	r3, [r7, #12]
 8026c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8026c60:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 8026c62:	6a3b      	ldr	r3, [r7, #32]
 8026c64:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8026c66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8026c68:	4413      	add	r3, r2
 8026c6a:	461a      	mov	r2, r3
 8026c6c:	f000 fe60 	bl	8027930 <_ZSt13copy_backwardIPP8ResponceS2_ET0_T_S4_S3_>
 8026c70:	e03b      	b.n	8026cea <_ZNSt5dequeI8ResponceSaIS0_EE17_M_reallocate_mapEjb+0x106>
	  size_type __new_map_size = this->_M_impl._M_map_size
 8026c72:	68fb      	ldr	r3, [r7, #12]
 8026c74:	685c      	ldr	r4, [r3, #4]
				     + std::max(this->_M_impl._M_map_size,
 8026c76:	68fb      	ldr	r3, [r7, #12]
 8026c78:	3304      	adds	r3, #4
 8026c7a:	f107 0208 	add.w	r2, r7, #8
 8026c7e:	4611      	mov	r1, r2
 8026c80:	4618      	mov	r0, r3
 8026c82:	f7fd fbbe 	bl	8024402 <_ZSt3maxIjERKT_S2_S2_>
 8026c86:	4603      	mov	r3, r0
 8026c88:	681b      	ldr	r3, [r3, #0]
 8026c8a:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 8026c8c:	3302      	adds	r3, #2
 8026c8e:	61bb      	str	r3, [r7, #24]
	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 8026c90:	68fb      	ldr	r3, [r7, #12]
 8026c92:	69b9      	ldr	r1, [r7, #24]
 8026c94:	4618      	mov	r0, r3
 8026c96:	f7fe fc87 	bl	80255a8 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE15_M_allocate_mapEj>
 8026c9a:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8026c9c:	69ba      	ldr	r2, [r7, #24]
 8026c9e:	69fb      	ldr	r3, [r7, #28]
 8026ca0:	1ad3      	subs	r3, r2, r3
 8026ca2:	085b      	lsrs	r3, r3, #1
 8026ca4:	009a      	lsls	r2, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8026ca6:	79fb      	ldrb	r3, [r7, #7]
 8026ca8:	2b00      	cmp	r3, #0
 8026caa:	d002      	beq.n	8026cb2 <_ZNSt5dequeI8ResponceSaIS0_EE17_M_reallocate_mapEjb+0xce>
 8026cac:	68bb      	ldr	r3, [r7, #8]
 8026cae:	009b      	lsls	r3, r3, #2
 8026cb0:	e000      	b.n	8026cb4 <_ZNSt5dequeI8ResponceSaIS0_EE17_M_reallocate_mapEjb+0xd0>
 8026cb2:	2300      	movs	r3, #0
 8026cb4:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8026cb6:	697a      	ldr	r2, [r7, #20]
 8026cb8:	4413      	add	r3, r2
 8026cba:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8026cbc:	68fb      	ldr	r3, [r7, #12]
 8026cbe:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 8026cc0:	68fb      	ldr	r3, [r7, #12]
 8026cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8026cc4:	3304      	adds	r3, #4
 8026cc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8026cc8:	4619      	mov	r1, r3
 8026cca:	f000 fe19 	bl	8027900 <_ZSt4copyIPP8ResponceS2_ET0_T_S4_S3_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8026cce:	68f8      	ldr	r0, [r7, #12]
 8026cd0:	68fb      	ldr	r3, [r7, #12]
 8026cd2:	6819      	ldr	r1, [r3, #0]
 8026cd4:	68fb      	ldr	r3, [r7, #12]
 8026cd6:	685b      	ldr	r3, [r3, #4]
 8026cd8:	461a      	mov	r2, r3
 8026cda:	f7fd fd2f 	bl	802473c <_ZNSt11_Deque_baseI8ResponceSaIS0_EE17_M_deallocate_mapEPPS0_j>
	  this->_M_impl._M_map = __new_map;
 8026cde:	68fb      	ldr	r3, [r7, #12]
 8026ce0:	697a      	ldr	r2, [r7, #20]
 8026ce2:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 8026ce4:	68fb      	ldr	r3, [r7, #12]
 8026ce6:	69ba      	ldr	r2, [r7, #24]
 8026ce8:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_start._M_set_node(__new_nstart);
 8026cea:	68fb      	ldr	r3, [r7, #12]
 8026cec:	3308      	adds	r3, #8
 8026cee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8026cf0:	4618      	mov	r0, r3
 8026cf2:	f7fe fc90 	bl	8025616 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 8026cf6:	68fb      	ldr	r3, [r7, #12]
 8026cf8:	f103 0018 	add.w	r0, r3, #24
 8026cfc:	6a3a      	ldr	r2, [r7, #32]
 8026cfe:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8026d02:	4413      	add	r3, r2
 8026d04:	009b      	lsls	r3, r3, #2
 8026d06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8026d08:	4413      	add	r3, r2
 8026d0a:	4619      	mov	r1, r3
 8026d0c:	f7fe fc83 	bl	8025616 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E11_M_set_nodeEPS2_>
    }
 8026d10:	bf00      	nop
 8026d12:	372c      	adds	r7, #44	; 0x2c
 8026d14:	46bd      	mov	sp, r7
 8026d16:	bd90      	pop	{r4, r7, pc}

08026d18 <_ZNSt16allocator_traitsISaI8ResponceEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 8026d18:	b580      	push	{r7, lr}
 8026d1a:	b082      	sub	sp, #8
 8026d1c:	af00      	add	r7, sp, #0
 8026d1e:	6078      	str	r0, [r7, #4]
 8026d20:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8026d22:	2200      	movs	r2, #0
 8026d24:	6839      	ldr	r1, [r7, #0]
 8026d26:	6878      	ldr	r0, [r7, #4]
 8026d28:	f000 fe1a 	bl	8027960 <_ZN9__gnu_cxx13new_allocatorI8ResponceE8allocateEjPKv>
 8026d2c:	4603      	mov	r3, r0
 8026d2e:	4618      	mov	r0, r3
 8026d30:	3708      	adds	r7, #8
 8026d32:	46bd      	mov	sp, r7
 8026d34:	bd80      	pop	{r7, pc}

08026d36 <_ZNSt16allocator_traitsISaIhEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8026d36:	b580      	push	{r7, lr}
 8026d38:	b082      	sub	sp, #8
 8026d3a:	af00      	add	r7, sp, #0
 8026d3c:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8026d3e:	6878      	ldr	r0, [r7, #4]
 8026d40:	f000 fe2c 	bl	802799c <_ZNK9__gnu_cxx13new_allocatorIhE8max_sizeEv>
 8026d44:	4603      	mov	r3, r0
      }
 8026d46:	4618      	mov	r0, r3
 8026d48:	3708      	adds	r7, #8
 8026d4a:	46bd      	mov	sp, r7
 8026d4c:	bd80      	pop	{r7, pc}

08026d4e <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPhjEET_S3_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
 8026d4e:	b580      	push	{r7, lr}
 8026d50:	b084      	sub	sp, #16
 8026d52:	af00      	add	r7, sp, #0
 8026d54:	6078      	str	r0, [r7, #4]
 8026d56:	6039      	str	r1, [r7, #0]
	  return std::fill_n(__first, __n, _ValueType());
 8026d58:	2300      	movs	r3, #0
 8026d5a:	73fb      	strb	r3, [r7, #15]
 8026d5c:	f107 030f 	add.w	r3, r7, #15
 8026d60:	461a      	mov	r2, r3
 8026d62:	6839      	ldr	r1, [r7, #0]
 8026d64:	6878      	ldr	r0, [r7, #4]
 8026d66:	f000 fe25 	bl	80279b4 <_ZSt6fill_nIPhjhET_S1_T0_RKT1_>
 8026d6a:	4603      	mov	r3, r0
	}
 8026d6c:	4618      	mov	r0, r3
 8026d6e:	3710      	adds	r7, #16
 8026d70:	46bd      	mov	sp, r7
 8026d72:	bd80      	pop	{r7, pc}

08026d74 <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8026d74:	b580      	push	{r7, lr}
 8026d76:	b084      	sub	sp, #16
 8026d78:	af00      	add	r7, sp, #0
 8026d7a:	60f8      	str	r0, [r7, #12]
 8026d7c:	60b9      	str	r1, [r7, #8]
 8026d7e:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8026d80:	68f8      	ldr	r0, [r7, #12]
 8026d82:	f000 fe32 	bl	80279ea <_ZNK9__gnu_cxx13new_allocatorIhE11_M_max_sizeEv>
 8026d86:	4602      	mov	r2, r0
 8026d88:	68bb      	ldr	r3, [r7, #8]
 8026d8a:	4293      	cmp	r3, r2
 8026d8c:	bf8c      	ite	hi
 8026d8e:	2301      	movhi	r3, #1
 8026d90:	2300      	movls	r3, #0
 8026d92:	b2db      	uxtb	r3, r3
 8026d94:	2b00      	cmp	r3, #0
 8026d96:	d001      	beq.n	8026d9c <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8026d98:	f016 f877 	bl	803ce8a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8026d9c:	68b8      	ldr	r0, [r7, #8]
 8026d9e:	f016 f863 	bl	803ce68 <_Znwj>
 8026da2:	4603      	mov	r3, r0
      }
 8026da4:	4618      	mov	r0, r3
 8026da6:	3710      	adds	r7, #16
 8026da8:	46bd      	mov	sp, r7
 8026daa:	bd80      	pop	{r7, pc}

08026dac <_ZSt12__relocate_aIPhS0_SaIhEET0_T_S3_S2_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8026dac:	b5b0      	push	{r4, r5, r7, lr}
 8026dae:	b084      	sub	sp, #16
 8026db0:	af00      	add	r7, sp, #0
 8026db2:	60f8      	str	r0, [r7, #12]
 8026db4:	60b9      	str	r1, [r7, #8]
 8026db6:	607a      	str	r2, [r7, #4]
 8026db8:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 8026dba:	68f8      	ldr	r0, [r7, #12]
 8026dbc:	f7fe fed3 	bl	8025b66 <_ZSt12__niter_baseIPhET_S1_>
 8026dc0:	4604      	mov	r4, r0
 8026dc2:	68b8      	ldr	r0, [r7, #8]
 8026dc4:	f7fe fecf 	bl	8025b66 <_ZSt12__niter_baseIPhET_S1_>
 8026dc8:	4605      	mov	r5, r0
 8026dca:	6878      	ldr	r0, [r7, #4]
 8026dcc:	f7fe fecb 	bl	8025b66 <_ZSt12__niter_baseIPhET_S1_>
 8026dd0:	4602      	mov	r2, r0
 8026dd2:	683b      	ldr	r3, [r7, #0]
 8026dd4:	4629      	mov	r1, r5
 8026dd6:	4620      	mov	r0, r4
 8026dd8:	f000 fe13 	bl	8027a02 <_ZSt14__relocate_a_1IhhENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>
 8026ddc:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 8026dde:	4618      	mov	r0, r3
 8026de0:	3710      	adds	r7, #16
 8026de2:	46bd      	mov	sp, r7
 8026de4:	bdb0      	pop	{r4, r5, r7, pc}

08026de6 <_ZNSt13move_iteratorIPhEC1ES0_>:
      move_iterator(iterator_type __i)
 8026de6:	b580      	push	{r7, lr}
 8026de8:	b082      	sub	sp, #8
 8026dea:	af00      	add	r7, sp, #0
 8026dec:	6078      	str	r0, [r7, #4]
 8026dee:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 8026df0:	463b      	mov	r3, r7
 8026df2:	4618      	mov	r0, r3
 8026df4:	f000 fe20 	bl	8027a38 <_ZSt4moveIRPhEONSt16remove_referenceIT_E4typeEOS3_>
 8026df8:	4603      	mov	r3, r0
 8026dfa:	681a      	ldr	r2, [r3, #0]
 8026dfc:	687b      	ldr	r3, [r7, #4]
 8026dfe:	601a      	str	r2, [r3, #0]
 8026e00:	687b      	ldr	r3, [r7, #4]
 8026e02:	4618      	mov	r0, r3
 8026e04:	3708      	adds	r7, #8
 8026e06:	46bd      	mov	sp, r7
 8026e08:	bd80      	pop	{r7, pc}

08026e0a <_ZSt18uninitialized_copyISt13move_iteratorIPhES1_ET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8026e0a:	b580      	push	{r7, lr}
 8026e0c:	b086      	sub	sp, #24
 8026e0e:	af00      	add	r7, sp, #0
 8026e10:	60f8      	str	r0, [r7, #12]
 8026e12:	60b9      	str	r1, [r7, #8]
 8026e14:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8026e16:	2301      	movs	r3, #1
 8026e18:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8026e1a:	687a      	ldr	r2, [r7, #4]
 8026e1c:	68b9      	ldr	r1, [r7, #8]
 8026e1e:	68f8      	ldr	r0, [r7, #12]
 8026e20:	f000 fe15 	bl	8027a4e <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPhES3_EET0_T_S6_S5_>
 8026e24:	4603      	mov	r3, r0
    }
 8026e26:	4618      	mov	r0, r3
 8026e28:	3718      	adds	r7, #24
 8026e2a:	46bd      	mov	sp, r7
 8026e2c:	bd80      	pop	{r7, pc}

08026e2e <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhEET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8026e2e:	b580      	push	{r7, lr}
 8026e30:	b084      	sub	sp, #16
 8026e32:	af00      	add	r7, sp, #0
 8026e34:	60f8      	str	r0, [r7, #12]
 8026e36:	60b9      	str	r1, [r7, #8]
 8026e38:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8026e3a:	687a      	ldr	r2, [r7, #4]
 8026e3c:	68b9      	ldr	r1, [r7, #8]
 8026e3e:	68f8      	ldr	r0, [r7, #12]
 8026e40:	f000 fe15 	bl	8027a6e <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET0_T_SA_S9_>
 8026e44:	4603      	mov	r3, r0
 8026e46:	4618      	mov	r0, r3
 8026e48:	3710      	adds	r7, #16
 8026e4a:	46bd      	mov	sp, r7
 8026e4c:	bd80      	pop	{r7, pc}

08026e4e <_ZNK9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8026e4e:	b480      	push	{r7}
 8026e50:	b083      	sub	sp, #12
 8026e52:	af00      	add	r7, sp, #0
 8026e54:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8026e56:	687b      	ldr	r3, [r7, #4]
 8026e58:	4618      	mov	r0, r3
 8026e5a:	370c      	adds	r7, #12
 8026e5c:	46bd      	mov	sp, r7
 8026e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026e62:	4770      	bx	lr

08026e64 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8026e64:	b480      	push	{r7}
 8026e66:	b083      	sub	sp, #12
 8026e68:	af00      	add	r7, sp, #0
 8026e6a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8026e6c:	687b      	ldr	r3, [r7, #4]
 8026e6e:	4618      	mov	r0, r3
 8026e70:	370c      	adds	r7, #12
 8026e72:	46bd      	mov	sp, r7
 8026e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026e78:	4770      	bx	lr

08026e7a <_ZSt14__copy_move_a2ILb0EPKhPhET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8026e7a:	b580      	push	{r7, lr}
 8026e7c:	b084      	sub	sp, #16
 8026e7e:	af00      	add	r7, sp, #0
 8026e80:	60f8      	str	r0, [r7, #12]
 8026e82:	60b9      	str	r1, [r7, #8]
 8026e84:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8026e86:	687a      	ldr	r2, [r7, #4]
 8026e88:	68b9      	ldr	r1, [r7, #8]
 8026e8a:	68f8      	ldr	r0, [r7, #12]
 8026e8c:	f000 fe07 	bl	8027a9e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8026e90:	4603      	mov	r3, r0
    }
 8026e92:	4618      	mov	r0, r3
 8026e94:	3710      	adds	r7, #16
 8026e96:	46bd      	mov	sp, r7
 8026e98:	bd80      	pop	{r7, pc}

08026e9a <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 8026e9a:	b580      	push	{r7, lr}
 8026e9c:	b084      	sub	sp, #16
 8026e9e:	af00      	add	r7, sp, #0
 8026ea0:	6078      	str	r0, [r7, #4]
 8026ea2:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 8026ea4:	687b      	ldr	r3, [r7, #4]
 8026ea6:	681a      	ldr	r2, [r3, #0]
 8026ea8:	683b      	ldr	r3, [r7, #0]
 8026eaa:	4413      	add	r3, r2
 8026eac:	60fb      	str	r3, [r7, #12]
 8026eae:	f107 020c 	add.w	r2, r7, #12
 8026eb2:	f107 0308 	add.w	r3, r7, #8
 8026eb6:	4611      	mov	r1, r2
 8026eb8:	4618      	mov	r0, r3
 8026eba:	f7fd ff19 	bl	8024cf0 <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>
 8026ebe:	68bb      	ldr	r3, [r7, #8]
 8026ec0:	4618      	mov	r0, r3
 8026ec2:	3710      	adds	r7, #16
 8026ec4:	46bd      	mov	sp, r7
 8026ec6:	bd80      	pop	{r7, pc}

08026ec8 <_ZSt14__copy_move_a2ILb0EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8026ec8:	b580      	push	{r7, lr}
 8026eca:	b084      	sub	sp, #16
 8026ecc:	af00      	add	r7, sp, #0
 8026ece:	60f8      	str	r0, [r7, #12]
 8026ed0:	60b9      	str	r1, [r7, #8]
 8026ed2:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8026ed4:	687a      	ldr	r2, [r7, #4]
 8026ed6:	68b9      	ldr	r1, [r7, #8]
 8026ed8:	68f8      	ldr	r0, [r7, #12]
 8026eda:	f000 fde0 	bl	8027a9e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8026ede:	4603      	mov	r3, r0
    }
 8026ee0:	4618      	mov	r0, r3
 8026ee2:	3710      	adds	r7, #16
 8026ee4:	46bd      	mov	sp, r7
 8026ee6:	bd80      	pop	{r7, pc}

08026ee8 <_ZSt12__niter_baseIPKN10BHYWrapper8BHYFrameEET_S4_>:
    __niter_base(_Iterator __it)
 8026ee8:	b480      	push	{r7}
 8026eea:	b083      	sub	sp, #12
 8026eec:	af00      	add	r7, sp, #0
 8026eee:	6078      	str	r0, [r7, #4]
    { return __it; }
 8026ef0:	687b      	ldr	r3, [r7, #4]
 8026ef2:	4618      	mov	r0, r3
 8026ef4:	370c      	adds	r7, #12
 8026ef6:	46bd      	mov	sp, r7
 8026ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026efc:	4770      	bx	lr

08026efe <_ZSt12__niter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>:
    __niter_base(_Iterator __it)
 8026efe:	b580      	push	{r7, lr}
 8026f00:	b082      	sub	sp, #8
 8026f02:	af00      	add	r7, sp, #0
 8026f04:	6078      	str	r0, [r7, #4]
 8026f06:	6039      	str	r1, [r7, #0]
    { return __it; }
 8026f08:	6839      	ldr	r1, [r7, #0]
 8026f0a:	6878      	ldr	r0, [r7, #4]
 8026f0c:	f7fd f99c 	bl	8024248 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026f10:	6878      	ldr	r0, [r7, #4]
 8026f12:	3708      	adds	r7, #8
 8026f14:	46bd      	mov	sp, r7
 8026f16:	bd80      	pop	{r7, pc}

08026f18 <_ZSt3minIiERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8026f18:	b480      	push	{r7}
 8026f1a:	b083      	sub	sp, #12
 8026f1c:	af00      	add	r7, sp, #0
 8026f1e:	6078      	str	r0, [r7, #4]
 8026f20:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8026f22:	683b      	ldr	r3, [r7, #0]
 8026f24:	681a      	ldr	r2, [r3, #0]
 8026f26:	687b      	ldr	r3, [r7, #4]
 8026f28:	681b      	ldr	r3, [r3, #0]
 8026f2a:	429a      	cmp	r2, r3
 8026f2c:	da01      	bge.n	8026f32 <_ZSt3minIiERKT_S2_S2_+0x1a>
	return __b;
 8026f2e:	683b      	ldr	r3, [r7, #0]
 8026f30:	e000      	b.n	8026f34 <_ZSt3minIiERKT_S2_S2_+0x1c>
      return __a;
 8026f32:	687b      	ldr	r3, [r7, #4]
    }
 8026f34:	4618      	mov	r0, r3
 8026f36:	370c      	adds	r7, #12
 8026f38:	46bd      	mov	sp, r7
 8026f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026f3e:	4770      	bx	lr

08026f40 <_ZSt14__copy_move_a1ILb0EPKN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS7_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSD_PSD_EE6__typeES7_S7_SG_>:

  template<bool _IsMove, typename _II, typename _Tp>
    typename __gnu_cxx::__enable_if<
      __is_random_access_iter<_II>::__value,
      _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> >::__type
    __copy_move_a1(_II __first, _II __last,
 8026f40:	b580      	push	{r7, lr}
 8026f42:	b088      	sub	sp, #32
 8026f44:	af00      	add	r7, sp, #0
 8026f46:	60f8      	str	r0, [r7, #12]
 8026f48:	60b9      	str	r1, [r7, #8]
 8026f4a:	607a      	str	r2, [r7, #4]
 8026f4c:	603b      	str	r3, [r7, #0]
		   _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> __result)
    {
      typedef _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> _Iter;
      typedef typename _Iter::difference_type difference_type;

      difference_type __len = __last - __first;
 8026f4e:	687a      	ldr	r2, [r7, #4]
 8026f50:	68bb      	ldr	r3, [r7, #8]
 8026f52:	1ad3      	subs	r3, r2, r3
 8026f54:	109b      	asrs	r3, r3, #2
 8026f56:	4a22      	ldr	r2, [pc, #136]	; (8026fe0 <_ZSt14__copy_move_a1ILb0EPKN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS7_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSD_PSD_EE6__typeES7_S7_SG_+0xa0>)
 8026f58:	fb02 f303 	mul.w	r3, r2, r3
 8026f5c:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 8026f5e:	697b      	ldr	r3, [r7, #20]
 8026f60:	2b00      	cmp	r3, #0
 8026f62:	dd34      	ble.n	8026fce <_ZSt14__copy_move_a1ILb0EPKN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS7_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSD_PSD_EE6__typeES7_S7_SG_+0x8e>
	{
	  const difference_type __clen
	    = std::min(__len, __result._M_last - __result._M_cur);
 8026f64:	683b      	ldr	r3, [r7, #0]
 8026f66:	689a      	ldr	r2, [r3, #8]
 8026f68:	683b      	ldr	r3, [r7, #0]
 8026f6a:	681b      	ldr	r3, [r3, #0]
 8026f6c:	1ad3      	subs	r3, r2, r3
 8026f6e:	109b      	asrs	r3, r3, #2
 8026f70:	4a1b      	ldr	r2, [pc, #108]	; (8026fe0 <_ZSt14__copy_move_a1ILb0EPKN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS7_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSD_PSD_EE6__typeES7_S7_SG_+0xa0>)
 8026f72:	fb02 f303 	mul.w	r3, r2, r3
 8026f76:	61bb      	str	r3, [r7, #24]
 8026f78:	f107 0218 	add.w	r2, r7, #24
 8026f7c:	f107 0314 	add.w	r3, r7, #20
 8026f80:	4611      	mov	r1, r2
 8026f82:	4618      	mov	r0, r3
 8026f84:	f7ff ffc8 	bl	8026f18 <_ZSt3minIiERKT_S2_S2_>
 8026f88:	4603      	mov	r3, r0
	  const difference_type __clen
 8026f8a:	681b      	ldr	r3, [r3, #0]
 8026f8c:	61fb      	str	r3, [r7, #28]
	  std::__copy_move_a1<_IsMove>(__first, __first + __clen,
 8026f8e:	69fa      	ldr	r2, [r7, #28]
 8026f90:	4613      	mov	r3, r2
 8026f92:	009b      	lsls	r3, r3, #2
 8026f94:	4413      	add	r3, r2
 8026f96:	009b      	lsls	r3, r3, #2
 8026f98:	461a      	mov	r2, r3
 8026f9a:	68bb      	ldr	r3, [r7, #8]
 8026f9c:	1899      	adds	r1, r3, r2
 8026f9e:	683b      	ldr	r3, [r7, #0]
 8026fa0:	681b      	ldr	r3, [r3, #0]
 8026fa2:	461a      	mov	r2, r3
 8026fa4:	68b8      	ldr	r0, [r7, #8]
 8026fa6:	f000 fd94 	bl	8027ad2 <_ZSt14__copy_move_a1ILb0EPKN10BHYWrapper8BHYFrameEPS1_ET1_T0_S6_S5_>
				       __result._M_cur);

	  __first += __clen;
 8026faa:	69fa      	ldr	r2, [r7, #28]
 8026fac:	4613      	mov	r3, r2
 8026fae:	009b      	lsls	r3, r3, #2
 8026fb0:	4413      	add	r3, r2
 8026fb2:	009b      	lsls	r3, r3, #2
 8026fb4:	461a      	mov	r2, r3
 8026fb6:	68bb      	ldr	r3, [r7, #8]
 8026fb8:	4413      	add	r3, r2
 8026fba:	60bb      	str	r3, [r7, #8]
	  __result += __clen;
 8026fbc:	69f9      	ldr	r1, [r7, #28]
 8026fbe:	6838      	ldr	r0, [r7, #0]
 8026fc0:	f7ff fab4 	bl	802652c <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi>
	  __len -= __clen;
 8026fc4:	697a      	ldr	r2, [r7, #20]
 8026fc6:	69fb      	ldr	r3, [r7, #28]
 8026fc8:	1ad3      	subs	r3, r2, r3
 8026fca:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 8026fcc:	e7c7      	b.n	8026f5e <_ZSt14__copy_move_a1ILb0EPKN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS7_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSD_PSD_EE6__typeES7_S7_SG_+0x1e>
	}

      return __result;
 8026fce:	6839      	ldr	r1, [r7, #0]
 8026fd0:	68f8      	ldr	r0, [r7, #12]
 8026fd2:	f7fd f939 	bl	8024248 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
    }
 8026fd6:	68f8      	ldr	r0, [r7, #12]
 8026fd8:	3720      	adds	r7, #32
 8026fda:	46bd      	mov	sp, r7
 8026fdc:	bd80      	pop	{r7, pc}
 8026fde:	bf00      	nop
 8026fe0:	cccccccd 	.word	0xcccccccd

08026fe4 <_ZSt12__niter_wrapISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_RKS6_S6_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8026fe4:	b580      	push	{r7, lr}
 8026fe6:	b084      	sub	sp, #16
 8026fe8:	af00      	add	r7, sp, #0
 8026fea:	60f8      	str	r0, [r7, #12]
 8026fec:	60b9      	str	r1, [r7, #8]
 8026fee:	607a      	str	r2, [r7, #4]
    { return __res; }
 8026ff0:	6879      	ldr	r1, [r7, #4]
 8026ff2:	68f8      	ldr	r0, [r7, #12]
 8026ff4:	f7fd f928 	bl	8024248 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026ff8:	68f8      	ldr	r0, [r7, #12]
 8026ffa:	3710      	adds	r7, #16
 8026ffc:	46bd      	mov	sp, r7
 8026ffe:	bd80      	pop	{r7, pc}

08027000 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE24_M_new_elements_at_frontEj>:
    deque<_Tp, _Alloc>::
 8027000:	b590      	push	{r4, r7, lr}
 8027002:	b085      	sub	sp, #20
 8027004:	af00      	add	r7, sp, #0
 8027006:	6078      	str	r0, [r7, #4]
 8027008:	6039      	str	r1, [r7, #0]
      if (this->max_size() - this->size() < __new_elems)
 802700a:	6878      	ldr	r0, [r7, #4]
 802700c:	f7fe f857 	bl	80250be <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE8max_sizeEv>
 8027010:	4604      	mov	r4, r0
 8027012:	6878      	ldr	r0, [r7, #4]
 8027014:	f7fb ffca 	bl	8022fac <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8027018:	4603      	mov	r3, r0
 802701a:	1ae3      	subs	r3, r4, r3
 802701c:	683a      	ldr	r2, [r7, #0]
 802701e:	429a      	cmp	r2, r3
 8027020:	bf8c      	ite	hi
 8027022:	2301      	movhi	r3, #1
 8027024:	2300      	movls	r3, #0
 8027026:	b2db      	uxtb	r3, r3
 8027028:	2b00      	cmp	r3, #0
 802702a:	d002      	beq.n	8027032 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE24_M_new_elements_at_frontEj+0x32>
	__throw_length_error(__N("deque::_M_new_elements_at_front"));
 802702c:	4816      	ldr	r0, [pc, #88]	; (8027088 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE24_M_new_elements_at_frontEj+0x88>)
 802702e:	f015 ff2f 	bl	803ce90 <_ZSt20__throw_length_errorPKc>
      const size_type __new_nodes = ((__new_elems + _S_buffer_size() - 1)
 8027032:	f7ff fb38 	bl	80266a6 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE14_S_buffer_sizeEv>
 8027036:	4602      	mov	r2, r0
 8027038:	683b      	ldr	r3, [r7, #0]
 802703a:	4413      	add	r3, r2
 802703c:	1e5c      	subs	r4, r3, #1
				     / _S_buffer_size());
 802703e:	f7ff fb32 	bl	80266a6 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE14_S_buffer_sizeEv>
 8027042:	4603      	mov	r3, r0
      const size_type __new_nodes = ((__new_elems + _S_buffer_size() - 1)
 8027044:	fbb4 f3f3 	udiv	r3, r4, r3
 8027048:	60bb      	str	r3, [r7, #8]
      _M_reserve_map_at_front(__new_nodes);
 802704a:	68b9      	ldr	r1, [r7, #8]
 802704c:	6878      	ldr	r0, [r7, #4]
 802704e:	f7fe f847 	bl	80250e0 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_reserve_map_at_frontEj>
	  for (__i = 1; __i <= __new_nodes; ++__i)
 8027052:	2301      	movs	r3, #1
 8027054:	60fb      	str	r3, [r7, #12]
 8027056:	68fa      	ldr	r2, [r7, #12]
 8027058:	68bb      	ldr	r3, [r7, #8]
 802705a:	429a      	cmp	r2, r3
 802705c:	d80f      	bhi.n	802707e <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE24_M_new_elements_at_frontEj+0x7e>
	    *(this->_M_impl._M_start._M_node - __i) = this->_M_allocate_node();
 802705e:	6879      	ldr	r1, [r7, #4]
 8027060:	687b      	ldr	r3, [r7, #4]
 8027062:	695a      	ldr	r2, [r3, #20]
 8027064:	68fb      	ldr	r3, [r7, #12]
 8027066:	009b      	lsls	r3, r3, #2
 8027068:	425b      	negs	r3, r3
 802706a:	18d4      	adds	r4, r2, r3
 802706c:	4608      	mov	r0, r1
 802706e:	f7fe f84f 	bl	8025110 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_allocate_nodeEv>
 8027072:	4603      	mov	r3, r0
 8027074:	6023      	str	r3, [r4, #0]
	  for (__i = 1; __i <= __new_nodes; ++__i)
 8027076:	68fb      	ldr	r3, [r7, #12]
 8027078:	3301      	adds	r3, #1
 802707a:	60fb      	str	r3, [r7, #12]
 802707c:	e7eb      	b.n	8027056 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE24_M_new_elements_at_frontEj+0x56>
    }
 802707e:	bf00      	nop
 8027080:	3714      	adds	r7, #20
 8027082:	46bd      	mov	sp, r7
 8027084:	bd90      	pop	{r4, r7, pc}
 8027086:	bf00      	nop
 8027088:	0803e6f8 	.word	0x0803e6f8

0802708c <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>:
      operator-(const _Self& __x, difference_type __n) _GLIBCXX_NOEXCEPT
 802708c:	b580      	push	{r7, lr}
 802708e:	b084      	sub	sp, #16
 8027090:	af00      	add	r7, sp, #0
 8027092:	60f8      	str	r0, [r7, #12]
 8027094:	60b9      	str	r1, [r7, #8]
 8027096:	607a      	str	r2, [r7, #4]
	_Self __tmp = __x;
 8027098:	68b9      	ldr	r1, [r7, #8]
 802709a:	68f8      	ldr	r0, [r7, #12]
 802709c:	f7fd f8d4 	bl	8024248 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
	__tmp -= __n;
 80270a0:	6879      	ldr	r1, [r7, #4]
 80270a2:	68f8      	ldr	r0, [r7, #12]
 80270a4:	f000 fd25 	bl	8027af2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EmIEi>
	return __tmp;
 80270a8:	bf00      	nop
      }
 80270aa:	68f8      	ldr	r0, [r7, #12]
 80270ac:	3710      	adds	r7, #16
 80270ae:	46bd      	mov	sp, r7
 80270b0:	bd80      	pop	{r7, pc}

080270b2 <_ZSt18uninitialized_copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 80270b2:	b580      	push	{r7, lr}
 80270b4:	b08a      	sub	sp, #40	; 0x28
 80270b6:	af00      	add	r7, sp, #0
 80270b8:	60f8      	str	r0, [r7, #12]
 80270ba:	60b9      	str	r1, [r7, #8]
 80270bc:	607a      	str	r2, [r7, #4]
 80270be:	603b      	str	r3, [r7, #0]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 80270c0:	2301      	movs	r3, #1
 80270c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	__uninit_copy(__first, __last, __result);
 80270c6:	f107 0314 	add.w	r3, r7, #20
 80270ca:	6839      	ldr	r1, [r7, #0]
 80270cc:	4618      	mov	r0, r3
 80270ce:	f7fd f8bb 	bl	8024248 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80270d2:	68f8      	ldr	r0, [r7, #12]
 80270d4:	f107 0314 	add.w	r3, r7, #20
 80270d8:	687a      	ldr	r2, [r7, #4]
 80270da:	68b9      	ldr	r1, [r7, #8]
 80270dc:	f000 fd19 	bl	8027b12 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS3_RS3_PS3_EEET0_T_SB_SA_>
    }
 80270e0:	68f8      	ldr	r0, [r7, #12]
 80270e2:	3728      	adds	r7, #40	; 0x28
 80270e4:	46bd      	mov	sp, r7
 80270e6:	bd80      	pop	{r7, pc}

080270e8 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_new_elements_at_backEj>:
    deque<_Tp, _Alloc>::
 80270e8:	b590      	push	{r4, r7, lr}
 80270ea:	b085      	sub	sp, #20
 80270ec:	af00      	add	r7, sp, #0
 80270ee:	6078      	str	r0, [r7, #4]
 80270f0:	6039      	str	r1, [r7, #0]
      if (this->max_size() - this->size() < __new_elems)
 80270f2:	6878      	ldr	r0, [r7, #4]
 80270f4:	f7fd ffe3 	bl	80250be <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE8max_sizeEv>
 80270f8:	4604      	mov	r4, r0
 80270fa:	6878      	ldr	r0, [r7, #4]
 80270fc:	f7fb ff56 	bl	8022fac <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8027100:	4603      	mov	r3, r0
 8027102:	1ae3      	subs	r3, r4, r3
 8027104:	683a      	ldr	r2, [r7, #0]
 8027106:	429a      	cmp	r2, r3
 8027108:	bf8c      	ite	hi
 802710a:	2301      	movhi	r3, #1
 802710c:	2300      	movls	r3, #0
 802710e:	b2db      	uxtb	r3, r3
 8027110:	2b00      	cmp	r3, #0
 8027112:	d002      	beq.n	802711a <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_new_elements_at_backEj+0x32>
	__throw_length_error(__N("deque::_M_new_elements_at_back"));
 8027114:	4815      	ldr	r0, [pc, #84]	; (802716c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_new_elements_at_backEj+0x84>)
 8027116:	f015 febb 	bl	803ce90 <_ZSt20__throw_length_errorPKc>
      const size_type __new_nodes = ((__new_elems + _S_buffer_size() - 1)
 802711a:	f7ff fac4 	bl	80266a6 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE14_S_buffer_sizeEv>
 802711e:	4602      	mov	r2, r0
 8027120:	683b      	ldr	r3, [r7, #0]
 8027122:	4413      	add	r3, r2
 8027124:	1e5c      	subs	r4, r3, #1
				     / _S_buffer_size());
 8027126:	f7ff fabe 	bl	80266a6 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE14_S_buffer_sizeEv>
 802712a:	4603      	mov	r3, r0
      const size_type __new_nodes = ((__new_elems + _S_buffer_size() - 1)
 802712c:	fbb4 f3f3 	udiv	r3, r4, r3
 8027130:	60bb      	str	r3, [r7, #8]
      _M_reserve_map_at_back(__new_nodes);
 8027132:	68b9      	ldr	r1, [r7, #8]
 8027134:	6878      	ldr	r0, [r7, #4]
 8027136:	f000 fd04 	bl	8027b42 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE22_M_reserve_map_at_backEj>
	  for (__i = 1; __i <= __new_nodes; ++__i)
 802713a:	2301      	movs	r3, #1
 802713c:	60fb      	str	r3, [r7, #12]
 802713e:	68fa      	ldr	r2, [r7, #12]
 8027140:	68bb      	ldr	r3, [r7, #8]
 8027142:	429a      	cmp	r2, r3
 8027144:	d80e      	bhi.n	8027164 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_new_elements_at_backEj+0x7c>
	    *(this->_M_impl._M_finish._M_node + __i) = this->_M_allocate_node();
 8027146:	6879      	ldr	r1, [r7, #4]
 8027148:	687b      	ldr	r3, [r7, #4]
 802714a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 802714c:	68fb      	ldr	r3, [r7, #12]
 802714e:	009b      	lsls	r3, r3, #2
 8027150:	18d4      	adds	r4, r2, r3
 8027152:	4608      	mov	r0, r1
 8027154:	f7fd ffdc 	bl	8025110 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_allocate_nodeEv>
 8027158:	4603      	mov	r3, r0
 802715a:	6023      	str	r3, [r4, #0]
	  for (__i = 1; __i <= __new_nodes; ++__i)
 802715c:	68fb      	ldr	r3, [r7, #12]
 802715e:	3301      	adds	r3, #1
 8027160:	60fb      	str	r3, [r7, #12]
 8027162:	e7ec      	b.n	802713e <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_new_elements_at_backEj+0x56>
    }
 8027164:	bf00      	nop
 8027166:	3714      	adds	r7, #20
 8027168:	46bd      	mov	sp, r7
 802716a:	bd90      	pop	{r4, r7, pc}
 802716c:	0803e718 	.word	0x0803e718

08027170 <_ZSt22__uninitialized_move_aISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_SaIS2_EET0_T_S8_S7_RT1_>:
    __uninitialized_move_a(_InputIterator __first, _InputIterator __last,
 8027170:	b590      	push	{r4, r7, lr}
 8027172:	b09b      	sub	sp, #108	; 0x6c
 8027174:	af02      	add	r7, sp, #8
 8027176:	60f8      	str	r0, [r7, #12]
 8027178:	60b9      	str	r1, [r7, #8]
 802717a:	607a      	str	r2, [r7, #4]
 802717c:	603b      	str	r3, [r7, #0]
					 __result, __alloc);
 802717e:	f107 0320 	add.w	r3, r7, #32
 8027182:	68b9      	ldr	r1, [r7, #8]
 8027184:	4618      	mov	r0, r3
 8027186:	f7fd f85f 	bl	8024248 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802718a:	f107 0310 	add.w	r3, r7, #16
 802718e:	f107 0220 	add.w	r2, r7, #32
 8027192:	4611      	mov	r1, r2
 8027194:	4618      	mov	r0, r3
 8027196:	f000 fcef 	bl	8027b78 <_ZSt18make_move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EESt13move_iteratorIT_ES7_>
 802719a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 802719e:	6879      	ldr	r1, [r7, #4]
 80271a0:	4618      	mov	r0, r3
 80271a2:	f7fd f851 	bl	8024248 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80271a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80271aa:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80271ae:	4611      	mov	r1, r2
 80271b0:	4618      	mov	r0, r3
 80271b2:	f000 fce1 	bl	8027b78 <_ZSt18make_move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EESt13move_iteratorIT_ES7_>
 80271b6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80271ba:	6839      	ldr	r1, [r7, #0]
 80271bc:	4618      	mov	r0, r3
 80271be:	f7fd f843 	bl	8024248 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80271c2:	68f8      	ldr	r0, [r7, #12]
 80271c4:	f107 0450 	add.w	r4, r7, #80	; 0x50
 80271c8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80271cc:	f107 0110 	add.w	r1, r7, #16
 80271d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80271d2:	9300      	str	r3, [sp, #0]
 80271d4:	4623      	mov	r3, r4
 80271d6:	f000 fcf8 	bl	8027bca <_ZSt22__uninitialized_copy_aISt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS3_PS3_EES6_S3_ET0_T_S9_S8_RSaIT1_E>
    }
 80271da:	68f8      	ldr	r0, [r7, #12]
 80271dc:	3764      	adds	r7, #100	; 0x64
 80271de:	46bd      	mov	sp, r7
 80271e0:	bd90      	pop	{r4, r7, pc}

080271e2 <_ZSt4moveISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_ET0_T_S7_S6_>:
    move(_II __first, _II __last, _OI __result)
 80271e2:	b580      	push	{r7, lr}
 80271e4:	b098      	sub	sp, #96	; 0x60
 80271e6:	af00      	add	r7, sp, #0
 80271e8:	60f8      	str	r0, [r7, #12]
 80271ea:	60b9      	str	r1, [r7, #8]
 80271ec:	607a      	str	r2, [r7, #4]
 80271ee:	603b      	str	r3, [r7, #0]
				      std::__miter_base(__last), __result);
 80271f0:	f107 0320 	add.w	r3, r7, #32
 80271f4:	68b9      	ldr	r1, [r7, #8]
 80271f6:	4618      	mov	r0, r3
 80271f8:	f7fd f826 	bl	8024248 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80271fc:	f107 0310 	add.w	r3, r7, #16
 8027200:	f107 0220 	add.w	r2, r7, #32
 8027204:	4611      	mov	r1, r2
 8027206:	4618      	mov	r0, r3
 8027208:	f000 fd05 	bl	8027c16 <_ZSt12__miter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 802720c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8027210:	6879      	ldr	r1, [r7, #4]
 8027212:	4618      	mov	r0, r3
 8027214:	f7fd f818 	bl	8024248 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8027218:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802721c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8027220:	4611      	mov	r1, r2
 8027222:	4618      	mov	r0, r3
 8027224:	f000 fcf7 	bl	8027c16 <_ZSt12__miter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 8027228:	f107 0350 	add.w	r3, r7, #80	; 0x50
 802722c:	6839      	ldr	r1, [r7, #0]
 802722e:	4618      	mov	r0, r3
 8027230:	f7fd f80a 	bl	8024248 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8027234:	68f8      	ldr	r0, [r7, #12]
 8027236:	f107 0350 	add.w	r3, r7, #80	; 0x50
 802723a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 802723e:	f107 0110 	add.w	r1, r7, #16
 8027242:	f000 fcf5 	bl	8027c30 <_ZSt13__copy_move_aILb1ESt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_ET1_T0_S7_S6_>
    }
 8027246:	68f8      	ldr	r0, [r7, #12]
 8027248:	3760      	adds	r7, #96	; 0x60
 802724a:	46bd      	mov	sp, r7
 802724c:	bd80      	pop	{r7, pc}

0802724e <_ZSt7advanceIPKN10BHYWrapper8BHYFrameEiEvRT_T0_>:
    advance(_InputIterator& __i, _Distance __n)
 802724e:	b590      	push	{r4, r7, lr}
 8027250:	b085      	sub	sp, #20
 8027252:	af00      	add	r7, sp, #0
 8027254:	6078      	str	r0, [r7, #4]
 8027256:	6039      	str	r1, [r7, #0]
      typename iterator_traits<_InputIterator>::difference_type __d = __n;
 8027258:	683b      	ldr	r3, [r7, #0]
 802725a:	60fb      	str	r3, [r7, #12]
      std::__advance(__i, __d, std::__iterator_category(__i));
 802725c:	6878      	ldr	r0, [r7, #4]
 802725e:	f7fd fe4f 	bl	8024f00 <_ZSt19__iterator_categoryIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E17iterator_categoryERKS5_>
 8027262:	4622      	mov	r2, r4
 8027264:	68f9      	ldr	r1, [r7, #12]
 8027266:	6878      	ldr	r0, [r7, #4]
 8027268:	f7fe fcd2 	bl	8025c10 <_ZSt9__advanceIPKN10BHYWrapper8BHYFrameEiEvRT_T0_St26random_access_iterator_tag>
    }
 802726c:	bf00      	nop
 802726e:	3714      	adds	r7, #20
 8027270:	46bd      	mov	sp, r7
 8027272:	bd90      	pop	{r4, r7, pc}

08027274 <_ZSt25__uninitialized_move_copyISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EPKS2_S5_SaIS2_EET1_T_SA_T0_SB_S9_RT2_>:
    __uninitialized_move_copy(_InputIterator1 __first1,
 8027274:	b590      	push	{r4, r7, lr}
 8027276:	b0a3      	sub	sp, #140	; 0x8c
 8027278:	af02      	add	r7, sp, #8
 802727a:	60f8      	str	r0, [r7, #12]
 802727c:	60b9      	str	r1, [r7, #8]
 802727e:	607a      	str	r2, [r7, #4]
 8027280:	603b      	str	r3, [r7, #0]
      _ForwardIterator __mid = std::__uninitialized_move_a(__first1, __last1,
 8027282:	f107 0320 	add.w	r3, r7, #32
 8027286:	68b9      	ldr	r1, [r7, #8]
 8027288:	4618      	mov	r0, r3
 802728a:	f7fc ffdd 	bl	8024248 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802728e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8027292:	6879      	ldr	r1, [r7, #4]
 8027294:	4618      	mov	r0, r3
 8027296:	f7fc ffd7 	bl	8024248 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802729a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 802729e:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 80272a2:	4618      	mov	r0, r3
 80272a4:	f7fc ffd0 	bl	8024248 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80272a8:	f107 0010 	add.w	r0, r7, #16
 80272ac:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80272b0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80272b4:	f107 0120 	add.w	r1, r7, #32
 80272b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80272bc:	9300      	str	r3, [sp, #0]
 80272be:	4623      	mov	r3, r4
 80272c0:	f7ff ff56 	bl	8027170 <_ZSt22__uninitialized_move_aISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_SaIS2_EET0_T_S8_S7_RT1_>
	  return std::__uninitialized_copy_a(__first2, __last2, __mid, __alloc);
 80272c4:	f107 0210 	add.w	r2, r7, #16
 80272c8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80272cc:	4611      	mov	r1, r2
 80272ce:	4618      	mov	r0, r3
 80272d0:	f7fc ffba 	bl	8024248 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80272d4:	68f8      	ldr	r0, [r7, #12]
 80272d6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80272da:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80272de:	9300      	str	r3, [sp, #0]
 80272e0:	4613      	mov	r3, r2
 80272e2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80272e6:	6839      	ldr	r1, [r7, #0]
 80272e8:	f7fe fd0e 	bl	8025d08 <_ZSt22__uninitialized_copy_aIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_ES1_ET0_T_S9_S8_RSaIT1_E>
    }
 80272ec:	68f8      	ldr	r0, [r7, #12]
 80272ee:	3784      	adds	r7, #132	; 0x84
 80272f0:	46bd      	mov	sp, r7
 80272f2:	bd90      	pop	{r4, r7, pc}

080272f4 <_ZSt13move_backwardISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_ET0_T_S7_S6_>:
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 80272f4:	b580      	push	{r7, lr}
 80272f6:	b098      	sub	sp, #96	; 0x60
 80272f8:	af00      	add	r7, sp, #0
 80272fa:	60f8      	str	r0, [r7, #12]
 80272fc:	60b9      	str	r1, [r7, #8]
 80272fe:	607a      	str	r2, [r7, #4]
 8027300:	603b      	str	r3, [r7, #0]
					       __result);
 8027302:	f107 0320 	add.w	r3, r7, #32
 8027306:	68b9      	ldr	r1, [r7, #8]
 8027308:	4618      	mov	r0, r3
 802730a:	f7fc ff9d 	bl	8024248 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802730e:	f107 0310 	add.w	r3, r7, #16
 8027312:	f107 0220 	add.w	r2, r7, #32
 8027316:	4611      	mov	r1, r2
 8027318:	4618      	mov	r0, r3
 802731a:	f000 fc7c 	bl	8027c16 <_ZSt12__miter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 802731e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8027322:	6879      	ldr	r1, [r7, #4]
 8027324:	4618      	mov	r0, r3
 8027326:	f7fc ff8f 	bl	8024248 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802732a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802732e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8027332:	4611      	mov	r1, r2
 8027334:	4618      	mov	r0, r3
 8027336:	f000 fc6e 	bl	8027c16 <_ZSt12__miter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 802733a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 802733e:	6839      	ldr	r1, [r7, #0]
 8027340:	4618      	mov	r0, r3
 8027342:	f7fc ff81 	bl	8024248 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8027346:	68f8      	ldr	r0, [r7, #12]
 8027348:	f107 0350 	add.w	r3, r7, #80	; 0x50
 802734c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8027350:	f107 0110 	add.w	r1, r7, #16
 8027354:	f000 fcb2 	bl	8027cbc <_ZSt22__copy_move_backward_aILb1ESt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_ET1_T0_S7_S6_>
    }
 8027358:	68f8      	ldr	r0, [r7, #12]
 802735a:	3760      	adds	r7, #96	; 0x60
 802735c:	46bd      	mov	sp, r7
 802735e:	bd80      	pop	{r7, pc}

08027360 <_ZSt25__uninitialized_copy_moveIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_ES7_SaIS1_EET1_T_SA_T0_SB_S9_RT2_>:
    __uninitialized_copy_move(_InputIterator1 __first1,
 8027360:	b590      	push	{r4, r7, lr}
 8027362:	b0a3      	sub	sp, #140	; 0x8c
 8027364:	af02      	add	r7, sp, #8
 8027366:	60f8      	str	r0, [r7, #12]
 8027368:	60b9      	str	r1, [r7, #8]
 802736a:	607a      	str	r2, [r7, #4]
 802736c:	603b      	str	r3, [r7, #0]
      _ForwardIterator __mid = std::__uninitialized_copy_a(__first1, __last1,
 802736e:	f107 0320 	add.w	r3, r7, #32
 8027372:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8027376:	4618      	mov	r0, r3
 8027378:	f7fc ff66 	bl	8024248 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802737c:	f107 0010 	add.w	r0, r7, #16
 8027380:	f107 0220 	add.w	r2, r7, #32
 8027384:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8027388:	9300      	str	r3, [sp, #0]
 802738a:	4613      	mov	r3, r2
 802738c:	687a      	ldr	r2, [r7, #4]
 802738e:	68b9      	ldr	r1, [r7, #8]
 8027390:	f7fe fcba 	bl	8025d08 <_ZSt22__uninitialized_copy_aIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_ES1_ET0_T_S9_S8_RSaIT1_E>
	  return std::__uninitialized_move_a(__first2, __last2, __mid, __alloc);
 8027394:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8027398:	6839      	ldr	r1, [r7, #0]
 802739a:	4618      	mov	r0, r3
 802739c:	f7fc ff54 	bl	8024248 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80273a0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80273a4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80273a8:	4618      	mov	r0, r3
 80273aa:	f7fc ff4d 	bl	8024248 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80273ae:	f107 0210 	add.w	r2, r7, #16
 80273b2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80273b6:	4611      	mov	r1, r2
 80273b8:	4618      	mov	r0, r3
 80273ba:	f7fc ff45 	bl	8024248 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80273be:	68f8      	ldr	r0, [r7, #12]
 80273c0:	f107 0450 	add.w	r4, r7, #80	; 0x50
 80273c4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80273c8:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80273cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80273d0:	9300      	str	r3, [sp, #0]
 80273d2:	4623      	mov	r3, r4
 80273d4:	f7ff fecc 	bl	8027170 <_ZSt22__uninitialized_move_aISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_SaIS2_EET0_T_S8_S7_RT1_>
    }
 80273d8:	68f8      	ldr	r0, [r7, #12]
 80273da:	3784      	adds	r7, #132	; 0x84
 80273dc:	46bd      	mov	sp, r7
 80273de:	bd90      	pop	{r4, r7, pc}

080273e0 <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 80273e0:	b580      	push	{r7, lr}
 80273e2:	b082      	sub	sp, #8
 80273e4:	af00      	add	r7, sp, #0
 80273e6:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 80273e8:	6878      	ldr	r0, [r7, #4]
 80273ea:	f000 fcad 	bl	8027d48 <_ZNK9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE8max_sizeEv>
 80273ee:	4603      	mov	r3, r0
      }
 80273f0:	4618      	mov	r0, r3
 80273f2:	3708      	adds	r7, #8
 80273f4:	46bd      	mov	sp, r7
 80273f6:	bd80      	pop	{r7, pc}

080273f8 <_ZSt4copyIPPN10BHYWrapper8BHYFrameES3_ET0_T_S5_S4_>:
    copy(_II __first, _II __last, _OI __result)
 80273f8:	b590      	push	{r4, r7, lr}
 80273fa:	b085      	sub	sp, #20
 80273fc:	af00      	add	r7, sp, #0
 80273fe:	60f8      	str	r0, [r7, #12]
 8027400:	60b9      	str	r1, [r7, #8]
 8027402:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8027404:	68f8      	ldr	r0, [r7, #12]
 8027406:	f000 fcab 	bl	8027d60 <_ZSt12__miter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 802740a:	4604      	mov	r4, r0
 802740c:	68b8      	ldr	r0, [r7, #8]
 802740e:	f000 fca7 	bl	8027d60 <_ZSt12__miter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 8027412:	4603      	mov	r3, r0
 8027414:	687a      	ldr	r2, [r7, #4]
 8027416:	4619      	mov	r1, r3
 8027418:	4620      	mov	r0, r4
 802741a:	f000 fcac 	bl	8027d76 <_ZSt13__copy_move_aILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>
 802741e:	4603      	mov	r3, r0
    }
 8027420:	4618      	mov	r0, r3
 8027422:	3714      	adds	r7, #20
 8027424:	46bd      	mov	sp, r7
 8027426:	bd90      	pop	{r4, r7, pc}

08027428 <_ZSt13copy_backwardIPPN10BHYWrapper8BHYFrameES3_ET0_T_S5_S4_>:
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8027428:	b590      	push	{r4, r7, lr}
 802742a:	b085      	sub	sp, #20
 802742c:	af00      	add	r7, sp, #0
 802742e:	60f8      	str	r0, [r7, #12]
 8027430:	60b9      	str	r1, [r7, #8]
 8027432:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8027434:	68f8      	ldr	r0, [r7, #12]
 8027436:	f000 fc93 	bl	8027d60 <_ZSt12__miter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 802743a:	4604      	mov	r4, r0
 802743c:	68b8      	ldr	r0, [r7, #8]
 802743e:	f000 fc8f 	bl	8027d60 <_ZSt12__miter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 8027442:	4603      	mov	r3, r0
 8027444:	687a      	ldr	r2, [r7, #4]
 8027446:	4619      	mov	r1, r3
 8027448:	4620      	mov	r0, r4
 802744a:	f000 fcb7 	bl	8027dbc <_ZSt22__copy_move_backward_aILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>
 802744e:	4603      	mov	r3, r0
    }
 8027450:	4618      	mov	r0, r3
 8027452:	3714      	adds	r7, #20
 8027454:	46bd      	mov	sp, r7
 8027456:	bd90      	pop	{r4, r7, pc}

08027458 <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8027458:	b580      	push	{r7, lr}
 802745a:	b084      	sub	sp, #16
 802745c:	af00      	add	r7, sp, #0
 802745e:	60f8      	str	r0, [r7, #12]
 8027460:	60b9      	str	r1, [r7, #8]
 8027462:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8027464:	68f8      	ldr	r0, [r7, #12]
 8027466:	f000 fccd 	bl	8027e04 <_ZNK9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE11_M_max_sizeEv>
 802746a:	4602      	mov	r2, r0
 802746c:	68bb      	ldr	r3, [r7, #8]
 802746e:	4293      	cmp	r3, r2
 8027470:	bf8c      	ite	hi
 8027472:	2301      	movhi	r3, #1
 8027474:	2300      	movls	r3, #0
 8027476:	b2db      	uxtb	r3, r3
 8027478:	2b00      	cmp	r3, #0
 802747a:	d001      	beq.n	8027480 <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 802747c:	f015 fd05 	bl	803ce8a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8027480:	68ba      	ldr	r2, [r7, #8]
 8027482:	4613      	mov	r3, r2
 8027484:	009b      	lsls	r3, r3, #2
 8027486:	4413      	add	r3, r2
 8027488:	009b      	lsls	r3, r3, #2
 802748a:	4618      	mov	r0, r3
 802748c:	f015 fcec 	bl	803ce68 <_Znwj>
 8027490:	4603      	mov	r3, r0
      }
 8027492:	4618      	mov	r0, r3
 8027494:	3710      	adds	r7, #16
 8027496:	46bd      	mov	sp, r7
 8027498:	bd80      	pop	{r7, pc}

0802749a <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 802749a:	b580      	push	{r7, lr}
 802749c:	b084      	sub	sp, #16
 802749e:	af00      	add	r7, sp, #0
 80274a0:	60f8      	str	r0, [r7, #12]
 80274a2:	60b9      	str	r1, [r7, #8]
 80274a4:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80274a6:	687a      	ldr	r2, [r7, #4]
 80274a8:	4613      	mov	r3, r2
 80274aa:	009b      	lsls	r3, r3, #2
 80274ac:	4413      	add	r3, r2
 80274ae:	009b      	lsls	r3, r3, #2
 80274b0:	4619      	mov	r1, r3
 80274b2:	68b8      	ldr	r0, [r7, #8]
 80274b4:	f015 fcd6 	bl	803ce64 <_ZdlPvj>
      }
 80274b8:	bf00      	nop
 80274ba:	3710      	adds	r7, #16
 80274bc:	46bd      	mov	sp, r7
 80274be:	bd80      	pop	{r7, pc}

080274c0 <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80274c0:	b580      	push	{r7, lr}
 80274c2:	b084      	sub	sp, #16
 80274c4:	af00      	add	r7, sp, #0
 80274c6:	60f8      	str	r0, [r7, #12]
 80274c8:	60b9      	str	r1, [r7, #8]
 80274ca:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80274cc:	68f8      	ldr	r0, [r7, #12]
 80274ce:	f000 fca7 	bl	8027e20 <_ZNK9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEE11_M_max_sizeEv>
 80274d2:	4602      	mov	r2, r0
 80274d4:	68bb      	ldr	r3, [r7, #8]
 80274d6:	4293      	cmp	r3, r2
 80274d8:	bf8c      	ite	hi
 80274da:	2301      	movhi	r3, #1
 80274dc:	2300      	movls	r3, #0
 80274de:	b2db      	uxtb	r3, r3
 80274e0:	2b00      	cmp	r3, #0
 80274e2:	d001      	beq.n	80274e8 <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80274e4:	f015 fcd1 	bl	803ce8a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80274e8:	68bb      	ldr	r3, [r7, #8]
 80274ea:	009b      	lsls	r3, r3, #2
 80274ec:	4618      	mov	r0, r3
 80274ee:	f015 fcbb 	bl	803ce68 <_Znwj>
 80274f2:	4603      	mov	r3, r0
      }
 80274f4:	4618      	mov	r0, r3
 80274f6:	3710      	adds	r7, #16
 80274f8:	46bd      	mov	sp, r7
 80274fa:	bd80      	pop	{r7, pc}

080274fc <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80274fc:	b480      	push	{r7}
 80274fe:	b083      	sub	sp, #12
 8027500:	af00      	add	r7, sp, #0
 8027502:	6078      	str	r0, [r7, #4]
 8027504:	687b      	ldr	r3, [r7, #4]
 8027506:	4618      	mov	r0, r3
 8027508:	370c      	adds	r7, #12
 802750a:	46bd      	mov	sp, r7
 802750c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027510:	4770      	bx	lr

08027512 <_ZSt4moveIRNSt11_Deque_baseI7RequestSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 8027512:	b480      	push	{r7}
 8027514:	b083      	sub	sp, #12
 8027516:	af00      	add	r7, sp, #0
 8027518:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 802751a:	687b      	ldr	r3, [r7, #4]
 802751c:	4618      	mov	r0, r3
 802751e:	370c      	adds	r7, #12
 8027520:	46bd      	mov	sp, r7
 8027522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027526:	4770      	bx	lr

08027528 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_Deque_impl_dataC1ERKS3_>:
	_Deque_impl_data(const _Deque_impl_data&) = default;
 8027528:	b580      	push	{r7, lr}
 802752a:	b082      	sub	sp, #8
 802752c:	af00      	add	r7, sp, #0
 802752e:	6078      	str	r0, [r7, #4]
 8027530:	6039      	str	r1, [r7, #0]
 8027532:	683b      	ldr	r3, [r7, #0]
 8027534:	681a      	ldr	r2, [r3, #0]
 8027536:	687b      	ldr	r3, [r7, #4]
 8027538:	601a      	str	r2, [r3, #0]
 802753a:	683b      	ldr	r3, [r7, #0]
 802753c:	685a      	ldr	r2, [r3, #4]
 802753e:	687b      	ldr	r3, [r7, #4]
 8027540:	605a      	str	r2, [r3, #4]
 8027542:	687b      	ldr	r3, [r7, #4]
 8027544:	f103 0208 	add.w	r2, r3, #8
 8027548:	683b      	ldr	r3, [r7, #0]
 802754a:	3308      	adds	r3, #8
 802754c:	4619      	mov	r1, r3
 802754e:	4610      	mov	r0, r2
 8027550:	f7fb ff02 	bl	8023358 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1ERKS3_>
 8027554:	687b      	ldr	r3, [r7, #4]
 8027556:	f103 0218 	add.w	r2, r3, #24
 802755a:	683b      	ldr	r3, [r7, #0]
 802755c:	3318      	adds	r3, #24
 802755e:	4619      	mov	r1, r3
 8027560:	4610      	mov	r0, r2
 8027562:	f7fb fef9 	bl	8023358 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1ERKS3_>
 8027566:	687b      	ldr	r3, [r7, #4]
 8027568:	4618      	mov	r0, r3
 802756a:	3708      	adds	r7, #8
 802756c:	46bd      	mov	sp, r7
 802756e:	bd80      	pop	{r7, pc}

08027570 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_Deque_impl_dataC1EOS3_>:
	_Deque_impl_data(_Deque_impl_data&& __x) noexcept
 8027570:	b5b0      	push	{r4, r5, r7, lr}
 8027572:	b08c      	sub	sp, #48	; 0x30
 8027574:	af00      	add	r7, sp, #0
 8027576:	6078      	str	r0, [r7, #4]
 8027578:	6039      	str	r1, [r7, #0]
	: _Deque_impl_data(__x)
 802757a:	6839      	ldr	r1, [r7, #0]
 802757c:	6878      	ldr	r0, [r7, #4]
 802757e:	f7ff ffd3 	bl	8027528 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_Deque_impl_dataC1ERKS3_>
	{ __x = _Deque_impl_data(); }
 8027582:	f107 0308 	add.w	r3, r7, #8
 8027586:	4618      	mov	r0, r3
 8027588:	f7fc ff17 	bl	80243ba <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_Deque_impl_dataC1Ev>
 802758c:	683b      	ldr	r3, [r7, #0]
 802758e:	461d      	mov	r5, r3
 8027590:	f107 0408 	add.w	r4, r7, #8
 8027594:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8027596:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8027598:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 802759a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 802759c:	e894 0003 	ldmia.w	r4, {r0, r1}
 80275a0:	e885 0003 	stmia.w	r5, {r0, r1}
 80275a4:	687b      	ldr	r3, [r7, #4]
 80275a6:	4618      	mov	r0, r3
 80275a8:	3730      	adds	r7, #48	; 0x30
 80275aa:	46bd      	mov	sp, r7
 80275ac:	bdb0      	pop	{r4, r5, r7, pc}

080275ae <_ZSt4moveIRSaI7RequestEEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 80275ae:	b480      	push	{r7}
 80275b0:	b083      	sub	sp, #12
 80275b2:	af00      	add	r7, sp, #0
 80275b4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80275b6:	687b      	ldr	r3, [r7, #4]
 80275b8:	4618      	mov	r0, r3
 80275ba:	370c      	adds	r7, #12
 80275bc:	46bd      	mov	sp, r7
 80275be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80275c2:	4770      	bx	lr

080275c4 <_ZSt4moveIRNSt11_Deque_baseI8ResponceSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 80275c4:	b480      	push	{r7}
 80275c6:	b083      	sub	sp, #12
 80275c8:	af00      	add	r7, sp, #0
 80275ca:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80275cc:	687b      	ldr	r3, [r7, #4]
 80275ce:	4618      	mov	r0, r3
 80275d0:	370c      	adds	r7, #12
 80275d2:	46bd      	mov	sp, r7
 80275d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80275d8:	4770      	bx	lr

080275da <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_Deque_impl_dataC1ERKS3_>:
	_Deque_impl_data(const _Deque_impl_data&) = default;
 80275da:	b580      	push	{r7, lr}
 80275dc:	b082      	sub	sp, #8
 80275de:	af00      	add	r7, sp, #0
 80275e0:	6078      	str	r0, [r7, #4]
 80275e2:	6039      	str	r1, [r7, #0]
 80275e4:	683b      	ldr	r3, [r7, #0]
 80275e6:	681a      	ldr	r2, [r3, #0]
 80275e8:	687b      	ldr	r3, [r7, #4]
 80275ea:	601a      	str	r2, [r3, #0]
 80275ec:	683b      	ldr	r3, [r7, #0]
 80275ee:	685a      	ldr	r2, [r3, #4]
 80275f0:	687b      	ldr	r3, [r7, #4]
 80275f2:	605a      	str	r2, [r3, #4]
 80275f4:	687b      	ldr	r3, [r7, #4]
 80275f6:	f103 0208 	add.w	r2, r3, #8
 80275fa:	683b      	ldr	r3, [r7, #0]
 80275fc:	3308      	adds	r3, #8
 80275fe:	4619      	mov	r1, r3
 8027600:	4610      	mov	r0, r2
 8027602:	f7fb ff4c 	bl	802349e <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1ERKS3_>
 8027606:	687b      	ldr	r3, [r7, #4]
 8027608:	f103 0218 	add.w	r2, r3, #24
 802760c:	683b      	ldr	r3, [r7, #0]
 802760e:	3318      	adds	r3, #24
 8027610:	4619      	mov	r1, r3
 8027612:	4610      	mov	r0, r2
 8027614:	f7fb ff43 	bl	802349e <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1ERKS3_>
 8027618:	687b      	ldr	r3, [r7, #4]
 802761a:	4618      	mov	r0, r3
 802761c:	3708      	adds	r7, #8
 802761e:	46bd      	mov	sp, r7
 8027620:	bd80      	pop	{r7, pc}

08027622 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_Deque_impl_dataC1EOS3_>:
	_Deque_impl_data(_Deque_impl_data&& __x) noexcept
 8027622:	b5b0      	push	{r4, r5, r7, lr}
 8027624:	b08c      	sub	sp, #48	; 0x30
 8027626:	af00      	add	r7, sp, #0
 8027628:	6078      	str	r0, [r7, #4]
 802762a:	6039      	str	r1, [r7, #0]
	: _Deque_impl_data(__x)
 802762c:	6839      	ldr	r1, [r7, #0]
 802762e:	6878      	ldr	r0, [r7, #4]
 8027630:	f7ff ffd3 	bl	80275da <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_Deque_impl_dataC1ERKS3_>
	{ __x = _Deque_impl_data(); }
 8027634:	f107 0308 	add.w	r3, r7, #8
 8027638:	4618      	mov	r0, r3
 802763a:	f7fd ff91 	bl	8025560 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_Deque_impl_dataC1Ev>
 802763e:	683b      	ldr	r3, [r7, #0]
 8027640:	461d      	mov	r5, r3
 8027642:	f107 0408 	add.w	r4, r7, #8
 8027646:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8027648:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 802764a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 802764c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 802764e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8027652:	e885 0003 	stmia.w	r5, {r0, r1}
 8027656:	687b      	ldr	r3, [r7, #4]
 8027658:	4618      	mov	r0, r3
 802765a:	3730      	adds	r7, #48	; 0x30
 802765c:	46bd      	mov	sp, r7
 802765e:	bdb0      	pop	{r4, r5, r7, pc}

08027660 <_ZSt4moveIRSaI8ResponceEEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8027660:	b480      	push	{r7}
 8027662:	b083      	sub	sp, #12
 8027664:	af00      	add	r7, sp, #0
 8027666:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8027668:	687b      	ldr	r3, [r7, #4]
 802766a:	4618      	mov	r0, r3
 802766c:	370c      	adds	r7, #12
 802766e:	46bd      	mov	sp, r7
 8027670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027674:	4770      	bx	lr

08027676 <_ZSt4moveIRNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS2_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 8027676:	b480      	push	{r7}
 8027678:	b083      	sub	sp, #12
 802767a:	af00      	add	r7, sp, #0
 802767c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 802767e:	687b      	ldr	r3, [r7, #4]
 8027680:	4618      	mov	r0, r3
 8027682:	370c      	adds	r7, #12
 8027684:	46bd      	mov	sp, r7
 8027686:	f85d 7b04 	ldr.w	r7, [sp], #4
 802768a:	4770      	bx	lr

0802768c <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_dataC1ERKS4_>:
	_Deque_impl_data(const _Deque_impl_data&) = default;
 802768c:	b580      	push	{r7, lr}
 802768e:	b082      	sub	sp, #8
 8027690:	af00      	add	r7, sp, #0
 8027692:	6078      	str	r0, [r7, #4]
 8027694:	6039      	str	r1, [r7, #0]
 8027696:	683b      	ldr	r3, [r7, #0]
 8027698:	681a      	ldr	r2, [r3, #0]
 802769a:	687b      	ldr	r3, [r7, #4]
 802769c:	601a      	str	r2, [r3, #0]
 802769e:	683b      	ldr	r3, [r7, #0]
 80276a0:	685a      	ldr	r2, [r3, #4]
 80276a2:	687b      	ldr	r3, [r7, #4]
 80276a4:	605a      	str	r2, [r3, #4]
 80276a6:	687b      	ldr	r3, [r7, #4]
 80276a8:	f103 0208 	add.w	r2, r3, #8
 80276ac:	683b      	ldr	r3, [r7, #0]
 80276ae:	3308      	adds	r3, #8
 80276b0:	4619      	mov	r1, r3
 80276b2:	4610      	mov	r0, r2
 80276b4:	f7fc fdc8 	bl	8024248 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80276b8:	687b      	ldr	r3, [r7, #4]
 80276ba:	f103 0218 	add.w	r2, r3, #24
 80276be:	683b      	ldr	r3, [r7, #0]
 80276c0:	3318      	adds	r3, #24
 80276c2:	4619      	mov	r1, r3
 80276c4:	4610      	mov	r0, r2
 80276c6:	f7fc fdbf 	bl	8024248 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80276ca:	687b      	ldr	r3, [r7, #4]
 80276cc:	4618      	mov	r0, r3
 80276ce:	3708      	adds	r7, #8
 80276d0:	46bd      	mov	sp, r7
 80276d2:	bd80      	pop	{r7, pc}

080276d4 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_dataC1EOS4_>:
	_Deque_impl_data(_Deque_impl_data&& __x) noexcept
 80276d4:	b5b0      	push	{r4, r5, r7, lr}
 80276d6:	b08c      	sub	sp, #48	; 0x30
 80276d8:	af00      	add	r7, sp, #0
 80276da:	6078      	str	r0, [r7, #4]
 80276dc:	6039      	str	r1, [r7, #0]
	: _Deque_impl_data(__x)
 80276de:	6839      	ldr	r1, [r7, #0]
 80276e0:	6878      	ldr	r0, [r7, #4]
 80276e2:	f7ff ffd3 	bl	802768c <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_dataC1ERKS4_>
	{ __x = _Deque_impl_data(); }
 80276e6:	f107 0308 	add.w	r3, r7, #8
 80276ea:	4618      	mov	r0, r3
 80276ec:	f7fd fd8f 	bl	802520e <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_dataC1Ev>
 80276f0:	683b      	ldr	r3, [r7, #0]
 80276f2:	461d      	mov	r5, r3
 80276f4:	f107 0408 	add.w	r4, r7, #8
 80276f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80276fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80276fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80276fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8027700:	e894 0003 	ldmia.w	r4, {r0, r1}
 8027704:	e885 0003 	stmia.w	r5, {r0, r1}
 8027708:	687b      	ldr	r3, [r7, #4]
 802770a:	4618      	mov	r0, r3
 802770c:	3730      	adds	r7, #48	; 0x30
 802770e:	46bd      	mov	sp, r7
 8027710:	bdb0      	pop	{r4, r5, r7, pc}

08027712 <_ZSt4moveIRSaIN10BHYWrapper8BHYFrameEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8027712:	b480      	push	{r7}
 8027714:	b083      	sub	sp, #12
 8027716:	af00      	add	r7, sp, #0
 8027718:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 802771a:	687b      	ldr	r3, [r7, #4]
 802771c:	4618      	mov	r0, r3
 802771e:	370c      	adds	r7, #12
 8027720:	46bd      	mov	sp, r7
 8027722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027726:	4770      	bx	lr

08027728 <_ZNK9__gnu_cxx13new_allocatorIP7RequestE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8027728:	b480      	push	{r7}
 802772a:	b083      	sub	sp, #12
 802772c:	af00      	add	r7, sp, #0
 802772e:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8027730:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8027734:	4618      	mov	r0, r3
 8027736:	370c      	adds	r7, #12
 8027738:	46bd      	mov	sp, r7
 802773a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802773e:	4770      	bx	lr

08027740 <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RequestEEvT_S4_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 8027740:	b580      	push	{r7, lr}
 8027742:	b082      	sub	sp, #8
 8027744:	af00      	add	r7, sp, #0
 8027746:	6078      	str	r0, [r7, #4]
 8027748:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 802774a:	687a      	ldr	r2, [r7, #4]
 802774c:	683b      	ldr	r3, [r7, #0]
 802774e:	429a      	cmp	r2, r3
 8027750:	d00a      	beq.n	8027768 <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RequestEEvT_S4_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 8027752:	6878      	ldr	r0, [r7, #4]
 8027754:	f000 fb70 	bl	8027e38 <_ZSt11__addressofI7RequestEPT_RS1_>
 8027758:	4603      	mov	r3, r0
 802775a:	4618      	mov	r0, r3
 802775c:	f000 fb77 	bl	8027e4e <_ZSt8_DestroyI7RequestEvPT_>
	  for (; __first != __last; ++__first)
 8027760:	687b      	ldr	r3, [r7, #4]
 8027762:	3314      	adds	r3, #20
 8027764:	607b      	str	r3, [r7, #4]
 8027766:	e7f0      	b.n	802774a <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RequestEEvT_S4_+0xa>
	}
 8027768:	bf00      	nop
 802776a:	3708      	adds	r7, #8
 802776c:	46bd      	mov	sp, r7
 802776e:	bd80      	pop	{r7, pc}

08027770 <_ZN9__gnu_cxx13new_allocatorIP8ResponceE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8027770:	b580      	push	{r7, lr}
 8027772:	b084      	sub	sp, #16
 8027774:	af00      	add	r7, sp, #0
 8027776:	60f8      	str	r0, [r7, #12]
 8027778:	60b9      	str	r1, [r7, #8]
 802777a:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 802777c:	68f8      	ldr	r0, [r7, #12]
 802777e:	f000 fb71 	bl	8027e64 <_ZNK9__gnu_cxx13new_allocatorIP8ResponceE11_M_max_sizeEv>
 8027782:	4602      	mov	r2, r0
 8027784:	68bb      	ldr	r3, [r7, #8]
 8027786:	4293      	cmp	r3, r2
 8027788:	bf8c      	ite	hi
 802778a:	2301      	movhi	r3, #1
 802778c:	2300      	movls	r3, #0
 802778e:	b2db      	uxtb	r3, r3
 8027790:	2b00      	cmp	r3, #0
 8027792:	d001      	beq.n	8027798 <_ZN9__gnu_cxx13new_allocatorIP8ResponceE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8027794:	f015 fb79 	bl	803ce8a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8027798:	68bb      	ldr	r3, [r7, #8]
 802779a:	009b      	lsls	r3, r3, #2
 802779c:	4618      	mov	r0, r3
 802779e:	f015 fb63 	bl	803ce68 <_Znwj>
 80277a2:	4603      	mov	r3, r0
      }
 80277a4:	4618      	mov	r0, r3
 80277a6:	3710      	adds	r7, #16
 80277a8:	46bd      	mov	sp, r7
 80277aa:	bd80      	pop	{r7, pc}

080277ac <_ZN9__gnu_cxx13new_allocatorI8ResponceE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __t)
 80277ac:	b580      	push	{r7, lr}
 80277ae:	b084      	sub	sp, #16
 80277b0:	af00      	add	r7, sp, #0
 80277b2:	60f8      	str	r0, [r7, #12]
 80277b4:	60b9      	str	r1, [r7, #8]
 80277b6:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80277b8:	687b      	ldr	r3, [r7, #4]
 80277ba:	011b      	lsls	r3, r3, #4
 80277bc:	4619      	mov	r1, r3
 80277be:	68b8      	ldr	r0, [r7, #8]
 80277c0:	f015 fb50 	bl	803ce64 <_ZdlPvj>
      }
 80277c4:	bf00      	nop
 80277c6:	3710      	adds	r7, #16
 80277c8:	46bd      	mov	sp, r7
 80277ca:	bd80      	pop	{r7, pc}

080277cc <_ZN9__gnu_cxx13new_allocatorIP8ResponceEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80277cc:	b480      	push	{r7}
 80277ce:	b083      	sub	sp, #12
 80277d0:	af00      	add	r7, sp, #0
 80277d2:	6078      	str	r0, [r7, #4]
 80277d4:	687b      	ldr	r3, [r7, #4]
 80277d6:	4618      	mov	r0, r3
 80277d8:	370c      	adds	r7, #12
 80277da:	46bd      	mov	sp, r7
 80277dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80277e0:	4770      	bx	lr

080277e2 <_ZNSt12_Destroy_auxILb0EE9__destroyIP8ResponceEEvT_S4_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 80277e2:	b580      	push	{r7, lr}
 80277e4:	b082      	sub	sp, #8
 80277e6:	af00      	add	r7, sp, #0
 80277e8:	6078      	str	r0, [r7, #4]
 80277ea:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 80277ec:	687a      	ldr	r2, [r7, #4]
 80277ee:	683b      	ldr	r3, [r7, #0]
 80277f0:	429a      	cmp	r2, r3
 80277f2:	d00a      	beq.n	802780a <_ZNSt12_Destroy_auxILb0EE9__destroyIP8ResponceEEvT_S4_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 80277f4:	6878      	ldr	r0, [r7, #4]
 80277f6:	f000 fb41 	bl	8027e7c <_ZSt11__addressofI8ResponceEPT_RS1_>
 80277fa:	4603      	mov	r3, r0
 80277fc:	4618      	mov	r0, r3
 80277fe:	f000 fb48 	bl	8027e92 <_ZSt8_DestroyI8ResponceEvPT_>
	  for (; __first != __last; ++__first)
 8027802:	687b      	ldr	r3, [r7, #4]
 8027804:	3310      	adds	r3, #16
 8027806:	607b      	str	r3, [r7, #4]
 8027808:	e7f0      	b.n	80277ec <_ZNSt12_Destroy_auxILb0EE9__destroyIP8ResponceEEvT_S4_+0xa>
	}
 802780a:	bf00      	nop
 802780c:	3708      	adds	r7, #8
 802780e:	46bd      	mov	sp, r7
 8027810:	bd80      	pop	{r7, pc}

08027812 <_ZNK9__gnu_cxx13new_allocatorI7RequestE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8027812:	b580      	push	{r7, lr}
 8027814:	b082      	sub	sp, #8
 8027816:	af00      	add	r7, sp, #0
 8027818:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 802781a:	6878      	ldr	r0, [r7, #4]
 802781c:	f000 f856 	bl	80278cc <_ZNK9__gnu_cxx13new_allocatorI7RequestE11_M_max_sizeEv>
 8027820:	4603      	mov	r3, r0
 8027822:	4618      	mov	r0, r3
 8027824:	3708      	adds	r7, #8
 8027826:	46bd      	mov	sp, r7
 8027828:	bd80      	pop	{r7, pc}

0802782a <_ZSt12__miter_baseIPP7RequestET_S3_>:
    __miter_base(_Iterator __it)
 802782a:	b480      	push	{r7}
 802782c:	b083      	sub	sp, #12
 802782e:	af00      	add	r7, sp, #0
 8027830:	6078      	str	r0, [r7, #4]
    { return __it; }
 8027832:	687b      	ldr	r3, [r7, #4]
 8027834:	4618      	mov	r0, r3
 8027836:	370c      	adds	r7, #12
 8027838:	46bd      	mov	sp, r7
 802783a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802783e:	4770      	bx	lr

08027840 <_ZSt13__copy_move_aILb0EPP7RequestS2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8027840:	b5b0      	push	{r4, r5, r7, lr}
 8027842:	b084      	sub	sp, #16
 8027844:	af00      	add	r7, sp, #0
 8027846:	60f8      	str	r0, [r7, #12]
 8027848:	60b9      	str	r1, [r7, #8]
 802784a:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 802784c:	68f8      	ldr	r0, [r7, #12]
 802784e:	f000 fb2b 	bl	8027ea8 <_ZSt12__niter_baseIPP7RequestET_S3_>
 8027852:	4604      	mov	r4, r0
 8027854:	68b8      	ldr	r0, [r7, #8]
 8027856:	f000 fb27 	bl	8027ea8 <_ZSt12__niter_baseIPP7RequestET_S3_>
 802785a:	4605      	mov	r5, r0
 802785c:	687b      	ldr	r3, [r7, #4]
 802785e:	4618      	mov	r0, r3
 8027860:	f000 fb22 	bl	8027ea8 <_ZSt12__niter_baseIPP7RequestET_S3_>
 8027864:	4603      	mov	r3, r0
 8027866:	461a      	mov	r2, r3
 8027868:	4629      	mov	r1, r5
 802786a:	4620      	mov	r0, r4
 802786c:	f000 fb27 	bl	8027ebe <_ZSt14__copy_move_a1ILb0EPP7RequestS2_ET1_T0_S4_S3_>
 8027870:	4602      	mov	r2, r0
 8027872:	1d3b      	adds	r3, r7, #4
 8027874:	4611      	mov	r1, r2
 8027876:	4618      	mov	r0, r3
 8027878:	f000 fb31 	bl	8027ede <_ZSt12__niter_wrapIPP7RequestET_RKS3_S3_>
 802787c:	4603      	mov	r3, r0
    }
 802787e:	4618      	mov	r0, r3
 8027880:	3710      	adds	r7, #16
 8027882:	46bd      	mov	sp, r7
 8027884:	bdb0      	pop	{r4, r5, r7, pc}

08027886 <_ZSt22__copy_move_backward_aILb0EPP7RequestS2_ET1_T0_S4_S3_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 8027886:	b5b0      	push	{r4, r5, r7, lr}
 8027888:	b084      	sub	sp, #16
 802788a:	af00      	add	r7, sp, #0
 802788c:	60f8      	str	r0, [r7, #12]
 802788e:	60b9      	str	r1, [r7, #8]
 8027890:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8027892:	68f8      	ldr	r0, [r7, #12]
 8027894:	f000 fb08 	bl	8027ea8 <_ZSt12__niter_baseIPP7RequestET_S3_>
 8027898:	4604      	mov	r4, r0
 802789a:	68b8      	ldr	r0, [r7, #8]
 802789c:	f000 fb04 	bl	8027ea8 <_ZSt12__niter_baseIPP7RequestET_S3_>
 80278a0:	4605      	mov	r5, r0
 80278a2:	687b      	ldr	r3, [r7, #4]
 80278a4:	4618      	mov	r0, r3
 80278a6:	f000 faff 	bl	8027ea8 <_ZSt12__niter_baseIPP7RequestET_S3_>
 80278aa:	4603      	mov	r3, r0
 80278ac:	461a      	mov	r2, r3
 80278ae:	4629      	mov	r1, r5
 80278b0:	4620      	mov	r0, r4
 80278b2:	f000 fb20 	bl	8027ef6 <_ZSt23__copy_move_backward_a1ILb0EPP7RequestS2_ET1_T0_S4_S3_>
 80278b6:	4602      	mov	r2, r0
 80278b8:	1d3b      	adds	r3, r7, #4
 80278ba:	4611      	mov	r1, r2
 80278bc:	4618      	mov	r0, r3
 80278be:	f000 fb0e 	bl	8027ede <_ZSt12__niter_wrapIPP7RequestET_RKS3_S3_>
 80278c2:	4603      	mov	r3, r0
    }
 80278c4:	4618      	mov	r0, r3
 80278c6:	3710      	adds	r7, #16
 80278c8:	46bd      	mov	sp, r7
 80278ca:	bdb0      	pop	{r4, r5, r7, pc}

080278cc <_ZNK9__gnu_cxx13new_allocatorI7RequestE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80278cc:	b480      	push	{r7}
 80278ce:	b083      	sub	sp, #12
 80278d0:	af00      	add	r7, sp, #0
 80278d2:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80278d4:	4b03      	ldr	r3, [pc, #12]	; (80278e4 <_ZNK9__gnu_cxx13new_allocatorI7RequestE11_M_max_sizeEv+0x18>)
      }
 80278d6:	4618      	mov	r0, r3
 80278d8:	370c      	adds	r7, #12
 80278da:	46bd      	mov	sp, r7
 80278dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80278e0:	4770      	bx	lr
 80278e2:	bf00      	nop
 80278e4:	06666666 	.word	0x06666666

080278e8 <_ZNSt16allocator_traitsISaI8ResponceEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 80278e8:	b580      	push	{r7, lr}
 80278ea:	b082      	sub	sp, #8
 80278ec:	af00      	add	r7, sp, #0
 80278ee:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 80278f0:	6878      	ldr	r0, [r7, #4]
 80278f2:	f000 fb10 	bl	8027f16 <_ZNK9__gnu_cxx13new_allocatorI8ResponceE8max_sizeEv>
 80278f6:	4603      	mov	r3, r0
      }
 80278f8:	4618      	mov	r0, r3
 80278fa:	3708      	adds	r7, #8
 80278fc:	46bd      	mov	sp, r7
 80278fe:	bd80      	pop	{r7, pc}

08027900 <_ZSt4copyIPP8ResponceS2_ET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 8027900:	b590      	push	{r4, r7, lr}
 8027902:	b085      	sub	sp, #20
 8027904:	af00      	add	r7, sp, #0
 8027906:	60f8      	str	r0, [r7, #12]
 8027908:	60b9      	str	r1, [r7, #8]
 802790a:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 802790c:	68f8      	ldr	r0, [r7, #12]
 802790e:	f000 fb0e 	bl	8027f2e <_ZSt12__miter_baseIPP8ResponceET_S3_>
 8027912:	4604      	mov	r4, r0
 8027914:	68b8      	ldr	r0, [r7, #8]
 8027916:	f000 fb0a 	bl	8027f2e <_ZSt12__miter_baseIPP8ResponceET_S3_>
 802791a:	4603      	mov	r3, r0
 802791c:	687a      	ldr	r2, [r7, #4]
 802791e:	4619      	mov	r1, r3
 8027920:	4620      	mov	r0, r4
 8027922:	f000 fb0f 	bl	8027f44 <_ZSt13__copy_move_aILb0EPP8ResponceS2_ET1_T0_S4_S3_>
 8027926:	4603      	mov	r3, r0
    }
 8027928:	4618      	mov	r0, r3
 802792a:	3714      	adds	r7, #20
 802792c:	46bd      	mov	sp, r7
 802792e:	bd90      	pop	{r4, r7, pc}

08027930 <_ZSt13copy_backwardIPP8ResponceS2_ET0_T_S4_S3_>:
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8027930:	b590      	push	{r4, r7, lr}
 8027932:	b085      	sub	sp, #20
 8027934:	af00      	add	r7, sp, #0
 8027936:	60f8      	str	r0, [r7, #12]
 8027938:	60b9      	str	r1, [r7, #8]
 802793a:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 802793c:	68f8      	ldr	r0, [r7, #12]
 802793e:	f000 faf6 	bl	8027f2e <_ZSt12__miter_baseIPP8ResponceET_S3_>
 8027942:	4604      	mov	r4, r0
 8027944:	68b8      	ldr	r0, [r7, #8]
 8027946:	f000 faf2 	bl	8027f2e <_ZSt12__miter_baseIPP8ResponceET_S3_>
 802794a:	4603      	mov	r3, r0
 802794c:	687a      	ldr	r2, [r7, #4]
 802794e:	4619      	mov	r1, r3
 8027950:	4620      	mov	r0, r4
 8027952:	f000 fb1a 	bl	8027f8a <_ZSt22__copy_move_backward_aILb0EPP8ResponceS2_ET1_T0_S4_S3_>
 8027956:	4603      	mov	r3, r0
    }
 8027958:	4618      	mov	r0, r3
 802795a:	3714      	adds	r7, #20
 802795c:	46bd      	mov	sp, r7
 802795e:	bd90      	pop	{r4, r7, pc}

08027960 <_ZN9__gnu_cxx13new_allocatorI8ResponceE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8027960:	b580      	push	{r7, lr}
 8027962:	b084      	sub	sp, #16
 8027964:	af00      	add	r7, sp, #0
 8027966:	60f8      	str	r0, [r7, #12]
 8027968:	60b9      	str	r1, [r7, #8]
 802796a:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 802796c:	68f8      	ldr	r0, [r7, #12]
 802796e:	f000 fb2f 	bl	8027fd0 <_ZNK9__gnu_cxx13new_allocatorI8ResponceE11_M_max_sizeEv>
 8027972:	4602      	mov	r2, r0
 8027974:	68bb      	ldr	r3, [r7, #8]
 8027976:	4293      	cmp	r3, r2
 8027978:	bf8c      	ite	hi
 802797a:	2301      	movhi	r3, #1
 802797c:	2300      	movls	r3, #0
 802797e:	b2db      	uxtb	r3, r3
 8027980:	2b00      	cmp	r3, #0
 8027982:	d001      	beq.n	8027988 <_ZN9__gnu_cxx13new_allocatorI8ResponceE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8027984:	f015 fa81 	bl	803ce8a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8027988:	68bb      	ldr	r3, [r7, #8]
 802798a:	011b      	lsls	r3, r3, #4
 802798c:	4618      	mov	r0, r3
 802798e:	f015 fa6b 	bl	803ce68 <_Znwj>
 8027992:	4603      	mov	r3, r0
      }
 8027994:	4618      	mov	r0, r3
 8027996:	3710      	adds	r7, #16
 8027998:	46bd      	mov	sp, r7
 802799a:	bd80      	pop	{r7, pc}

0802799c <_ZNK9__gnu_cxx13new_allocatorIhE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 802799c:	b580      	push	{r7, lr}
 802799e:	b082      	sub	sp, #8
 80279a0:	af00      	add	r7, sp, #0
 80279a2:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 80279a4:	6878      	ldr	r0, [r7, #4]
 80279a6:	f000 f820 	bl	80279ea <_ZNK9__gnu_cxx13new_allocatorIhE11_M_max_sizeEv>
 80279aa:	4603      	mov	r3, r0
 80279ac:	4618      	mov	r0, r3
 80279ae:	3708      	adds	r7, #8
 80279b0:	46bd      	mov	sp, r7
 80279b2:	bd80      	pop	{r7, pc}

080279b4 <_ZSt6fill_nIPhjhET_S1_T0_RKT1_>:
  // DR 865. More algorithms that throw away information
  // DR 426. search_n(), fill_n(), and generate_n() with negative n
  template<typename _OI, typename _Size, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    fill_n(_OI __first, _Size __n, const _Tp& __value)
 80279b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80279b6:	b085      	sub	sp, #20
 80279b8:	af00      	add	r7, sp, #0
 80279ba:	60f8      	str	r0, [r7, #12]
 80279bc:	60b9      	str	r1, [r7, #8]
 80279be:	607a      	str	r2, [r7, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_OutputIteratorConcept<_OI, _Tp>)

      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
 80279c0:	68fc      	ldr	r4, [r7, #12]
 80279c2:	68b8      	ldr	r0, [r7, #8]
 80279c4:	f7f9 fa46 	bl	8020e54 <_ZSt17__size_to_integerj>
 80279c8:	4605      	mov	r5, r0
			       std::__iterator_category(__first));
 80279ca:	f107 030c 	add.w	r3, r7, #12
 80279ce:	4618      	mov	r0, r3
 80279d0:	f000 fb0a 	bl	8027fe8 <_ZSt19__iterator_categoryIPhENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
 80279d4:	4633      	mov	r3, r6
 80279d6:	687a      	ldr	r2, [r7, #4]
 80279d8:	4629      	mov	r1, r5
 80279da:	4620      	mov	r0, r4
 80279dc:	f000 fb0f 	bl	8027ffe <_ZSt10__fill_n_aIPhjhET_S1_T0_RKT1_St26random_access_iterator_tag>
 80279e0:	4603      	mov	r3, r0
    }
 80279e2:	4618      	mov	r0, r3
 80279e4:	3714      	adds	r7, #20
 80279e6:	46bd      	mov	sp, r7
 80279e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080279ea <_ZNK9__gnu_cxx13new_allocatorIhE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80279ea:	b480      	push	{r7}
 80279ec:	b083      	sub	sp, #12
 80279ee:	af00      	add	r7, sp, #0
 80279f0:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80279f2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
      }
 80279f6:	4618      	mov	r0, r3
 80279f8:	370c      	adds	r7, #12
 80279fa:	46bd      	mov	sp, r7
 80279fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027a00:	4770      	bx	lr

08027a02 <_ZSt14__relocate_a_1IhhENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8027a02:	b580      	push	{r7, lr}
 8027a04:	b086      	sub	sp, #24
 8027a06:	af00      	add	r7, sp, #0
 8027a08:	60f8      	str	r0, [r7, #12]
 8027a0a:	60b9      	str	r1, [r7, #8]
 8027a0c:	607a      	str	r2, [r7, #4]
 8027a0e:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8027a10:	68ba      	ldr	r2, [r7, #8]
 8027a12:	68fb      	ldr	r3, [r7, #12]
 8027a14:	1ad3      	subs	r3, r2, r3
 8027a16:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8027a18:	697b      	ldr	r3, [r7, #20]
 8027a1a:	2b00      	cmp	r3, #0
 8027a1c:	dd05      	ble.n	8027a2a <_ZSt14__relocate_a_1IhhENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E+0x28>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8027a1e:	697b      	ldr	r3, [r7, #20]
 8027a20:	461a      	mov	r2, r3
 8027a22:	68f9      	ldr	r1, [r7, #12]
 8027a24:	6878      	ldr	r0, [r7, #4]
 8027a26:	f015 fac1 	bl	803cfac <memmove>
      return __result + __count;
 8027a2a:	697b      	ldr	r3, [r7, #20]
 8027a2c:	687a      	ldr	r2, [r7, #4]
 8027a2e:	4413      	add	r3, r2
    }
 8027a30:	4618      	mov	r0, r3
 8027a32:	3718      	adds	r7, #24
 8027a34:	46bd      	mov	sp, r7
 8027a36:	bd80      	pop	{r7, pc}

08027a38 <_ZSt4moveIRPhEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8027a38:	b480      	push	{r7}
 8027a3a:	b083      	sub	sp, #12
 8027a3c:	af00      	add	r7, sp, #0
 8027a3e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8027a40:	687b      	ldr	r3, [r7, #4]
 8027a42:	4618      	mov	r0, r3
 8027a44:	370c      	adds	r7, #12
 8027a46:	46bd      	mov	sp, r7
 8027a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027a4c:	4770      	bx	lr

08027a4e <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPhES3_EET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8027a4e:	b580      	push	{r7, lr}
 8027a50:	b084      	sub	sp, #16
 8027a52:	af00      	add	r7, sp, #0
 8027a54:	60f8      	str	r0, [r7, #12]
 8027a56:	60b9      	str	r1, [r7, #8]
 8027a58:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8027a5a:	687a      	ldr	r2, [r7, #4]
 8027a5c:	68b9      	ldr	r1, [r7, #8]
 8027a5e:	68f8      	ldr	r0, [r7, #12]
 8027a60:	f000 fae8 	bl	8028034 <_ZSt4copyISt13move_iteratorIPhES1_ET0_T_S4_S3_>
 8027a64:	4603      	mov	r3, r0
 8027a66:	4618      	mov	r0, r3
 8027a68:	3710      	adds	r7, #16
 8027a6a:	46bd      	mov	sp, r7
 8027a6c:	bd80      	pop	{r7, pc}

08027a6e <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET0_T_SA_S9_>:
    copy(_II __first, _II __last, _OI __result)
 8027a6e:	b590      	push	{r4, r7, lr}
 8027a70:	b085      	sub	sp, #20
 8027a72:	af00      	add	r7, sp, #0
 8027a74:	60f8      	str	r0, [r7, #12]
 8027a76:	60b9      	str	r1, [r7, #8]
 8027a78:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8027a7a:	68f8      	ldr	r0, [r7, #12]
 8027a7c:	f7fd f948 	bl	8024d10 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEET_S8_>
 8027a80:	4604      	mov	r4, r0
 8027a82:	68b8      	ldr	r0, [r7, #8]
 8027a84:	f7fd f944 	bl	8024d10 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEET_S8_>
 8027a88:	4603      	mov	r3, r0
 8027a8a:	687a      	ldr	r2, [r7, #4]
 8027a8c:	4619      	mov	r1, r3
 8027a8e:	4620      	mov	r0, r4
 8027a90:	f000 fae8 	bl	8028064 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET1_T0_SA_S9_>
 8027a94:	4603      	mov	r3, r0
    }
 8027a96:	4618      	mov	r0, r3
 8027a98:	3714      	adds	r7, #20
 8027a9a:	46bd      	mov	sp, r7
 8027a9c:	bd90      	pop	{r4, r7, pc}

08027a9e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8027a9e:	b580      	push	{r7, lr}
 8027aa0:	b086      	sub	sp, #24
 8027aa2:	af00      	add	r7, sp, #0
 8027aa4:	60f8      	str	r0, [r7, #12]
 8027aa6:	60b9      	str	r1, [r7, #8]
 8027aa8:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8027aaa:	68ba      	ldr	r2, [r7, #8]
 8027aac:	68fb      	ldr	r3, [r7, #12]
 8027aae:	1ad3      	subs	r3, r2, r3
 8027ab0:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8027ab2:	697b      	ldr	r3, [r7, #20]
 8027ab4:	2b00      	cmp	r3, #0
 8027ab6:	d005      	beq.n	8027ac4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_+0x26>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8027ab8:	697b      	ldr	r3, [r7, #20]
 8027aba:	461a      	mov	r2, r3
 8027abc:	68f9      	ldr	r1, [r7, #12]
 8027abe:	6878      	ldr	r0, [r7, #4]
 8027ac0:	f015 fa74 	bl	803cfac <memmove>
	  return __result + _Num;
 8027ac4:	697b      	ldr	r3, [r7, #20]
 8027ac6:	687a      	ldr	r2, [r7, #4]
 8027ac8:	4413      	add	r3, r2
	}
 8027aca:	4618      	mov	r0, r3
 8027acc:	3718      	adds	r7, #24
 8027ace:	46bd      	mov	sp, r7
 8027ad0:	bd80      	pop	{r7, pc}

08027ad2 <_ZSt14__copy_move_a1ILb0EPKN10BHYWrapper8BHYFrameEPS1_ET1_T0_S6_S5_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8027ad2:	b580      	push	{r7, lr}
 8027ad4:	b084      	sub	sp, #16
 8027ad6:	af00      	add	r7, sp, #0
 8027ad8:	60f8      	str	r0, [r7, #12]
 8027ada:	60b9      	str	r1, [r7, #8]
 8027adc:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8027ade:	687a      	ldr	r2, [r7, #4]
 8027ae0:	68b9      	ldr	r1, [r7, #8]
 8027ae2:	68f8      	ldr	r0, [r7, #12]
 8027ae4:	f000 fae1 	bl	80280aa <_ZSt14__copy_move_a2ILb0EPKN10BHYWrapper8BHYFrameEPS1_ET1_T0_S6_S5_>
 8027ae8:	4603      	mov	r3, r0
 8027aea:	4618      	mov	r0, r3
 8027aec:	3710      	adds	r7, #16
 8027aee:	46bd      	mov	sp, r7
 8027af0:	bd80      	pop	{r7, pc}

08027af2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EmIEi>:
      operator-=(difference_type __n) _GLIBCXX_NOEXCEPT
 8027af2:	b580      	push	{r7, lr}
 8027af4:	b082      	sub	sp, #8
 8027af6:	af00      	add	r7, sp, #0
 8027af8:	6078      	str	r0, [r7, #4]
 8027afa:	6039      	str	r1, [r7, #0]
      { return *this += -__n; }
 8027afc:	683b      	ldr	r3, [r7, #0]
 8027afe:	425b      	negs	r3, r3
 8027b00:	4619      	mov	r1, r3
 8027b02:	6878      	ldr	r0, [r7, #4]
 8027b04:	f7fe fd12 	bl	802652c <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi>
 8027b08:	4603      	mov	r3, r0
 8027b0a:	4618      	mov	r0, r3
 8027b0c:	3708      	adds	r7, #8
 8027b0e:	46bd      	mov	sp, r7
 8027b10:	bd80      	pop	{r7, pc}

08027b12 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS3_RS3_PS3_EEET0_T_SB_SA_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8027b12:	b580      	push	{r7, lr}
 8027b14:	b088      	sub	sp, #32
 8027b16:	af00      	add	r7, sp, #0
 8027b18:	60f8      	str	r0, [r7, #12]
 8027b1a:	60b9      	str	r1, [r7, #8]
 8027b1c:	607a      	str	r2, [r7, #4]
 8027b1e:	603b      	str	r3, [r7, #0]
        { return std::copy(__first, __last, __result); }
 8027b20:	f107 0310 	add.w	r3, r7, #16
 8027b24:	6839      	ldr	r1, [r7, #0]
 8027b26:	4618      	mov	r0, r3
 8027b28:	f7fc fb8e 	bl	8024248 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8027b2c:	68f8      	ldr	r0, [r7, #12]
 8027b2e:	f107 0310 	add.w	r3, r7, #16
 8027b32:	687a      	ldr	r2, [r7, #4]
 8027b34:	68b9      	ldr	r1, [r7, #8]
 8027b36:	f7fd f9c3 	bl	8024ec0 <_ZSt4copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>
 8027b3a:	68f8      	ldr	r0, [r7, #12]
 8027b3c:	3720      	adds	r7, #32
 8027b3e:	46bd      	mov	sp, r7
 8027b40:	bd80      	pop	{r7, pc}

08027b42 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE22_M_reserve_map_at_backEj>:
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 8027b42:	b580      	push	{r7, lr}
 8027b44:	b082      	sub	sp, #8
 8027b46:	af00      	add	r7, sp, #0
 8027b48:	6078      	str	r0, [r7, #4]
 8027b4a:	6039      	str	r1, [r7, #0]
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8027b4c:	683b      	ldr	r3, [r7, #0]
 8027b4e:	1c5a      	adds	r2, r3, #1
 8027b50:	687b      	ldr	r3, [r7, #4]
 8027b52:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 8027b54:	6879      	ldr	r1, [r7, #4]
 8027b56:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8027b58:	6879      	ldr	r1, [r7, #4]
 8027b5a:	6809      	ldr	r1, [r1, #0]
 8027b5c:	1a41      	subs	r1, r0, r1
 8027b5e:	1089      	asrs	r1, r1, #2
 8027b60:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8027b62:	429a      	cmp	r2, r3
 8027b64:	d904      	bls.n	8027b70 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE22_M_reserve_map_at_backEj+0x2e>
	  _M_reallocate_map(__nodes_to_add, false);
 8027b66:	2200      	movs	r2, #0
 8027b68:	6839      	ldr	r1, [r7, #0]
 8027b6a:	6878      	ldr	r0, [r7, #4]
 8027b6c:	f7fe fc26 	bl	80263bc <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb>
      }
 8027b70:	bf00      	nop
 8027b72:	3708      	adds	r7, #8
 8027b74:	46bd      	mov	sp, r7
 8027b76:	bd80      	pop	{r7, pc}

08027b78 <_ZSt18make_move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EESt13move_iteratorIT_ES7_>:
    make_move_iterator(_Iterator __i)
 8027b78:	b580      	push	{r7, lr}
 8027b7a:	b086      	sub	sp, #24
 8027b7c:	af00      	add	r7, sp, #0
 8027b7e:	6078      	str	r0, [r7, #4]
 8027b80:	6039      	str	r1, [r7, #0]
    { return move_iterator<_Iterator>(std::move(__i)); }
 8027b82:	6838      	ldr	r0, [r7, #0]
 8027b84:	f000 faa1 	bl	80280ca <_ZSt4moveIRSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEONSt16remove_referenceIT_E4typeEOS8_>
 8027b88:	4602      	mov	r2, r0
 8027b8a:	f107 0308 	add.w	r3, r7, #8
 8027b8e:	4611      	mov	r1, r2
 8027b90:	4618      	mov	r0, r3
 8027b92:	f7fc fb59 	bl	8024248 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8027b96:	f107 0308 	add.w	r3, r7, #8
 8027b9a:	4619      	mov	r1, r3
 8027b9c:	6878      	ldr	r0, [r7, #4]
 8027b9e:	f000 fa9f 	bl	80280e0 <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ES5_>
 8027ba2:	6878      	ldr	r0, [r7, #4]
 8027ba4:	3718      	adds	r7, #24
 8027ba6:	46bd      	mov	sp, r7
 8027ba8:	bd80      	pop	{r7, pc}

08027baa <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ERKS6_>:
    class move_iterator
 8027baa:	b580      	push	{r7, lr}
 8027bac:	b082      	sub	sp, #8
 8027bae:	af00      	add	r7, sp, #0
 8027bb0:	6078      	str	r0, [r7, #4]
 8027bb2:	6039      	str	r1, [r7, #0]
 8027bb4:	687b      	ldr	r3, [r7, #4]
 8027bb6:	683a      	ldr	r2, [r7, #0]
 8027bb8:	4611      	mov	r1, r2
 8027bba:	4618      	mov	r0, r3
 8027bbc:	f7fc fb44 	bl	8024248 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8027bc0:	687b      	ldr	r3, [r7, #4]
 8027bc2:	4618      	mov	r0, r3
 8027bc4:	3708      	adds	r7, #8
 8027bc6:	46bd      	mov	sp, r7
 8027bc8:	bd80      	pop	{r7, pc}

08027bca <_ZSt22__uninitialized_copy_aISt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS3_PS3_EES6_S3_ET0_T_S9_S8_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8027bca:	b580      	push	{r7, lr}
 8027bcc:	b090      	sub	sp, #64	; 0x40
 8027bce:	af00      	add	r7, sp, #0
 8027bd0:	60f8      	str	r0, [r7, #12]
 8027bd2:	60b9      	str	r1, [r7, #8]
 8027bd4:	607a      	str	r2, [r7, #4]
 8027bd6:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8027bd8:	f107 0310 	add.w	r3, r7, #16
 8027bdc:	68b9      	ldr	r1, [r7, #8]
 8027bde:	4618      	mov	r0, r3
 8027be0:	f7ff ffe3 	bl	8027baa <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ERKS6_>
 8027be4:	f107 0320 	add.w	r3, r7, #32
 8027be8:	6879      	ldr	r1, [r7, #4]
 8027bea:	4618      	mov	r0, r3
 8027bec:	f7ff ffdd 	bl	8027baa <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ERKS6_>
 8027bf0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8027bf4:	6839      	ldr	r1, [r7, #0]
 8027bf6:	4618      	mov	r0, r3
 8027bf8:	f7fc fb26 	bl	8024248 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8027bfc:	68f8      	ldr	r0, [r7, #12]
 8027bfe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8027c02:	f107 0220 	add.w	r2, r7, #32
 8027c06:	f107 0110 	add.w	r1, r7, #16
 8027c0a:	f000 fa7c 	bl	8028106 <_ZSt18uninitialized_copyISt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS3_PS3_EES6_ET0_T_S9_S8_>
 8027c0e:	68f8      	ldr	r0, [r7, #12]
 8027c10:	3740      	adds	r7, #64	; 0x40
 8027c12:	46bd      	mov	sp, r7
 8027c14:	bd80      	pop	{r7, pc}

08027c16 <_ZSt12__miter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>:
    __miter_base(_Iterator __it)
 8027c16:	b580      	push	{r7, lr}
 8027c18:	b082      	sub	sp, #8
 8027c1a:	af00      	add	r7, sp, #0
 8027c1c:	6078      	str	r0, [r7, #4]
 8027c1e:	6039      	str	r1, [r7, #0]
    { return __it; }
 8027c20:	6839      	ldr	r1, [r7, #0]
 8027c22:	6878      	ldr	r0, [r7, #4]
 8027c24:	f7fc fb10 	bl	8024248 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8027c28:	6878      	ldr	r0, [r7, #4]
 8027c2a:	3708      	adds	r7, #8
 8027c2c:	46bd      	mov	sp, r7
 8027c2e:	bd80      	pop	{r7, pc}

08027c30 <_ZSt13__copy_move_aILb1ESt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_ET1_T0_S7_S6_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8027c30:	b580      	push	{r7, lr}
 8027c32:	b0a0      	sub	sp, #128	; 0x80
 8027c34:	af00      	add	r7, sp, #0
 8027c36:	60f8      	str	r0, [r7, #12]
 8027c38:	60b9      	str	r1, [r7, #8]
 8027c3a:	607a      	str	r2, [r7, #4]
 8027c3c:	603b      	str	r3, [r7, #0]
					     std::__niter_base(__result)));
 8027c3e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8027c42:	68b9      	ldr	r1, [r7, #8]
 8027c44:	4618      	mov	r0, r3
 8027c46:	f7fc faff 	bl	8024248 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8027c4a:	f107 0320 	add.w	r3, r7, #32
 8027c4e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8027c52:	4611      	mov	r1, r2
 8027c54:	4618      	mov	r0, r3
 8027c56:	f7ff f952 	bl	8026efe <_ZSt12__niter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 8027c5a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8027c5e:	6879      	ldr	r1, [r7, #4]
 8027c60:	4618      	mov	r0, r3
 8027c62:	f7fc faf1 	bl	8024248 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8027c66:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8027c6a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8027c6e:	4611      	mov	r1, r2
 8027c70:	4618      	mov	r0, r3
 8027c72:	f7ff f944 	bl	8026efe <_ZSt12__niter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 8027c76:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8027c7a:	6839      	ldr	r1, [r7, #0]
 8027c7c:	4618      	mov	r0, r3
 8027c7e:	f7fc fae3 	bl	8024248 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8027c82:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8027c86:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8027c8a:	4611      	mov	r1, r2
 8027c8c:	4618      	mov	r0, r3
 8027c8e:	f7ff f936 	bl	8026efe <_ZSt12__niter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 8027c92:	f107 0010 	add.w	r0, r7, #16
 8027c96:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8027c9a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8027c9e:	f107 0120 	add.w	r1, r7, #32
 8027ca2:	f000 fa59 	bl	8028158 <_ZSt14__copy_move_a1ILb1EN10BHYWrapper8BHYFrameERS1_PS1_S1_ESt15_Deque_iteratorIT3_RS5_PS5_ES4_IT0_T1_T2_ESC_S8_>
 8027ca6:	68fb      	ldr	r3, [r7, #12]
 8027ca8:	f107 0210 	add.w	r2, r7, #16
 8027cac:	6839      	ldr	r1, [r7, #0]
 8027cae:	4618      	mov	r0, r3
 8027cb0:	f7ff f998 	bl	8026fe4 <_ZSt12__niter_wrapISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_RKS6_S6_>
    }
 8027cb4:	68f8      	ldr	r0, [r7, #12]
 8027cb6:	3780      	adds	r7, #128	; 0x80
 8027cb8:	46bd      	mov	sp, r7
 8027cba:	bd80      	pop	{r7, pc}

08027cbc <_ZSt22__copy_move_backward_aILb1ESt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_ET1_T0_S7_S6_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 8027cbc:	b580      	push	{r7, lr}
 8027cbe:	b0a0      	sub	sp, #128	; 0x80
 8027cc0:	af00      	add	r7, sp, #0
 8027cc2:	60f8      	str	r0, [r7, #12]
 8027cc4:	60b9      	str	r1, [r7, #8]
 8027cc6:	607a      	str	r2, [r7, #4]
 8027cc8:	603b      	str	r3, [r7, #0]
		   std::__niter_base(__result)));
 8027cca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8027cce:	68b9      	ldr	r1, [r7, #8]
 8027cd0:	4618      	mov	r0, r3
 8027cd2:	f7fc fab9 	bl	8024248 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8027cd6:	f107 0320 	add.w	r3, r7, #32
 8027cda:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8027cde:	4611      	mov	r1, r2
 8027ce0:	4618      	mov	r0, r3
 8027ce2:	f7ff f90c 	bl	8026efe <_ZSt12__niter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 8027ce6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8027cea:	6879      	ldr	r1, [r7, #4]
 8027cec:	4618      	mov	r0, r3
 8027cee:	f7fc faab 	bl	8024248 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8027cf2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8027cf6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8027cfa:	4611      	mov	r1, r2
 8027cfc:	4618      	mov	r0, r3
 8027cfe:	f7ff f8fe 	bl	8026efe <_ZSt12__niter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 8027d02:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8027d06:	6839      	ldr	r1, [r7, #0]
 8027d08:	4618      	mov	r0, r3
 8027d0a:	f7fc fa9d 	bl	8024248 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8027d0e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8027d12:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8027d16:	4611      	mov	r1, r2
 8027d18:	4618      	mov	r0, r3
 8027d1a:	f7ff f8f0 	bl	8026efe <_ZSt12__niter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 8027d1e:	f107 0010 	add.w	r0, r7, #16
 8027d22:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8027d26:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8027d2a:	f107 0120 	add.w	r1, r7, #32
 8027d2e:	f000 fa39 	bl	80281a4 <_ZSt23__copy_move_backward_a1ILb1EN10BHYWrapper8BHYFrameERS1_PS1_S1_ESt15_Deque_iteratorIT3_RS5_PS5_ES4_IT0_T1_T2_ESC_S8_>
 8027d32:	68fb      	ldr	r3, [r7, #12]
 8027d34:	f107 0210 	add.w	r2, r7, #16
 8027d38:	6839      	ldr	r1, [r7, #0]
 8027d3a:	4618      	mov	r0, r3
 8027d3c:	f7ff f952 	bl	8026fe4 <_ZSt12__niter_wrapISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_RKS6_S6_>
    }
 8027d40:	68f8      	ldr	r0, [r7, #12]
 8027d42:	3780      	adds	r7, #128	; 0x80
 8027d44:	46bd      	mov	sp, r7
 8027d46:	bd80      	pop	{r7, pc}

08027d48 <_ZNK9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8027d48:	b580      	push	{r7, lr}
 8027d4a:	b082      	sub	sp, #8
 8027d4c:	af00      	add	r7, sp, #0
 8027d4e:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8027d50:	6878      	ldr	r0, [r7, #4]
 8027d52:	f000 f857 	bl	8027e04 <_ZNK9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE11_M_max_sizeEv>
 8027d56:	4603      	mov	r3, r0
 8027d58:	4618      	mov	r0, r3
 8027d5a:	3708      	adds	r7, #8
 8027d5c:	46bd      	mov	sp, r7
 8027d5e:	bd80      	pop	{r7, pc}

08027d60 <_ZSt12__miter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>:
    __miter_base(_Iterator __it)
 8027d60:	b480      	push	{r7}
 8027d62:	b083      	sub	sp, #12
 8027d64:	af00      	add	r7, sp, #0
 8027d66:	6078      	str	r0, [r7, #4]
    { return __it; }
 8027d68:	687b      	ldr	r3, [r7, #4]
 8027d6a:	4618      	mov	r0, r3
 8027d6c:	370c      	adds	r7, #12
 8027d6e:	46bd      	mov	sp, r7
 8027d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027d74:	4770      	bx	lr

08027d76 <_ZSt13__copy_move_aILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8027d76:	b5b0      	push	{r4, r5, r7, lr}
 8027d78:	b084      	sub	sp, #16
 8027d7a:	af00      	add	r7, sp, #0
 8027d7c:	60f8      	str	r0, [r7, #12]
 8027d7e:	60b9      	str	r1, [r7, #8]
 8027d80:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8027d82:	68f8      	ldr	r0, [r7, #12]
 8027d84:	f000 fa34 	bl	80281f0 <_ZSt12__niter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 8027d88:	4604      	mov	r4, r0
 8027d8a:	68b8      	ldr	r0, [r7, #8]
 8027d8c:	f000 fa30 	bl	80281f0 <_ZSt12__niter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 8027d90:	4605      	mov	r5, r0
 8027d92:	687b      	ldr	r3, [r7, #4]
 8027d94:	4618      	mov	r0, r3
 8027d96:	f000 fa2b 	bl	80281f0 <_ZSt12__niter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 8027d9a:	4603      	mov	r3, r0
 8027d9c:	461a      	mov	r2, r3
 8027d9e:	4629      	mov	r1, r5
 8027da0:	4620      	mov	r0, r4
 8027da2:	f000 fa30 	bl	8028206 <_ZSt14__copy_move_a1ILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>
 8027da6:	4602      	mov	r2, r0
 8027da8:	1d3b      	adds	r3, r7, #4
 8027daa:	4611      	mov	r1, r2
 8027dac:	4618      	mov	r0, r3
 8027dae:	f000 fa3a 	bl	8028226 <_ZSt12__niter_wrapIPPN10BHYWrapper8BHYFrameEET_RKS4_S4_>
 8027db2:	4603      	mov	r3, r0
    }
 8027db4:	4618      	mov	r0, r3
 8027db6:	3710      	adds	r7, #16
 8027db8:	46bd      	mov	sp, r7
 8027dba:	bdb0      	pop	{r4, r5, r7, pc}

08027dbc <_ZSt22__copy_move_backward_aILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 8027dbc:	b5b0      	push	{r4, r5, r7, lr}
 8027dbe:	b084      	sub	sp, #16
 8027dc0:	af00      	add	r7, sp, #0
 8027dc2:	60f8      	str	r0, [r7, #12]
 8027dc4:	60b9      	str	r1, [r7, #8]
 8027dc6:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8027dc8:	68f8      	ldr	r0, [r7, #12]
 8027dca:	f000 fa11 	bl	80281f0 <_ZSt12__niter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 8027dce:	4604      	mov	r4, r0
 8027dd0:	68b8      	ldr	r0, [r7, #8]
 8027dd2:	f000 fa0d 	bl	80281f0 <_ZSt12__niter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 8027dd6:	4605      	mov	r5, r0
 8027dd8:	687b      	ldr	r3, [r7, #4]
 8027dda:	4618      	mov	r0, r3
 8027ddc:	f000 fa08 	bl	80281f0 <_ZSt12__niter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 8027de0:	4603      	mov	r3, r0
 8027de2:	461a      	mov	r2, r3
 8027de4:	4629      	mov	r1, r5
 8027de6:	4620      	mov	r0, r4
 8027de8:	f000 fa29 	bl	802823e <_ZSt23__copy_move_backward_a1ILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>
 8027dec:	4602      	mov	r2, r0
 8027dee:	1d3b      	adds	r3, r7, #4
 8027df0:	4611      	mov	r1, r2
 8027df2:	4618      	mov	r0, r3
 8027df4:	f000 fa17 	bl	8028226 <_ZSt12__niter_wrapIPPN10BHYWrapper8BHYFrameEET_RKS4_S4_>
 8027df8:	4603      	mov	r3, r0
    }
 8027dfa:	4618      	mov	r0, r3
 8027dfc:	3710      	adds	r7, #16
 8027dfe:	46bd      	mov	sp, r7
 8027e00:	bdb0      	pop	{r4, r5, r7, pc}
	...

08027e04 <_ZNK9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8027e04:	b480      	push	{r7}
 8027e06:	b083      	sub	sp, #12
 8027e08:	af00      	add	r7, sp, #0
 8027e0a:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8027e0c:	4b03      	ldr	r3, [pc, #12]	; (8027e1c <_ZNK9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE11_M_max_sizeEv+0x18>)
      }
 8027e0e:	4618      	mov	r0, r3
 8027e10:	370c      	adds	r7, #12
 8027e12:	46bd      	mov	sp, r7
 8027e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027e18:	4770      	bx	lr
 8027e1a:	bf00      	nop
 8027e1c:	06666666 	.word	0x06666666

08027e20 <_ZNK9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8027e20:	b480      	push	{r7}
 8027e22:	b083      	sub	sp, #12
 8027e24:	af00      	add	r7, sp, #0
 8027e26:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8027e28:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8027e2c:	4618      	mov	r0, r3
 8027e2e:	370c      	adds	r7, #12
 8027e30:	46bd      	mov	sp, r7
 8027e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027e36:	4770      	bx	lr

08027e38 <_ZSt11__addressofI7RequestEPT_RS1_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8027e38:	b480      	push	{r7}
 8027e3a:	b083      	sub	sp, #12
 8027e3c:	af00      	add	r7, sp, #0
 8027e3e:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8027e40:	687b      	ldr	r3, [r7, #4]
 8027e42:	4618      	mov	r0, r3
 8027e44:	370c      	adds	r7, #12
 8027e46:	46bd      	mov	sp, r7
 8027e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027e4c:	4770      	bx	lr

08027e4e <_ZSt8_DestroyI7RequestEvPT_>:
    _Destroy(_Tp* __pointer)
 8027e4e:	b580      	push	{r7, lr}
 8027e50:	b082      	sub	sp, #8
 8027e52:	af00      	add	r7, sp, #0
 8027e54:	6078      	str	r0, [r7, #4]
      __pointer->~_Tp();
 8027e56:	6878      	ldr	r0, [r7, #4]
 8027e58:	f7f9 f8d1 	bl	8020ffe <_ZN7RequestD1Ev>
    }
 8027e5c:	bf00      	nop
 8027e5e:	3708      	adds	r7, #8
 8027e60:	46bd      	mov	sp, r7
 8027e62:	bd80      	pop	{r7, pc}

08027e64 <_ZNK9__gnu_cxx13new_allocatorIP8ResponceE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8027e64:	b480      	push	{r7}
 8027e66:	b083      	sub	sp, #12
 8027e68:	af00      	add	r7, sp, #0
 8027e6a:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8027e6c:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8027e70:	4618      	mov	r0, r3
 8027e72:	370c      	adds	r7, #12
 8027e74:	46bd      	mov	sp, r7
 8027e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027e7a:	4770      	bx	lr

08027e7c <_ZSt11__addressofI8ResponceEPT_RS1_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8027e7c:	b480      	push	{r7}
 8027e7e:	b083      	sub	sp, #12
 8027e80:	af00      	add	r7, sp, #0
 8027e82:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8027e84:	687b      	ldr	r3, [r7, #4]
 8027e86:	4618      	mov	r0, r3
 8027e88:	370c      	adds	r7, #12
 8027e8a:	46bd      	mov	sp, r7
 8027e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027e90:	4770      	bx	lr

08027e92 <_ZSt8_DestroyI8ResponceEvPT_>:
    _Destroy(_Tp* __pointer)
 8027e92:	b580      	push	{r7, lr}
 8027e94:	b082      	sub	sp, #8
 8027e96:	af00      	add	r7, sp, #0
 8027e98:	6078      	str	r0, [r7, #4]
      __pointer->~_Tp();
 8027e9a:	6878      	ldr	r0, [r7, #4]
 8027e9c:	f7f9 f91c 	bl	80210d8 <_ZN8ResponceD1Ev>
    }
 8027ea0:	bf00      	nop
 8027ea2:	3708      	adds	r7, #8
 8027ea4:	46bd      	mov	sp, r7
 8027ea6:	bd80      	pop	{r7, pc}

08027ea8 <_ZSt12__niter_baseIPP7RequestET_S3_>:
    __niter_base(_Iterator __it)
 8027ea8:	b480      	push	{r7}
 8027eaa:	b083      	sub	sp, #12
 8027eac:	af00      	add	r7, sp, #0
 8027eae:	6078      	str	r0, [r7, #4]
    { return __it; }
 8027eb0:	687b      	ldr	r3, [r7, #4]
 8027eb2:	4618      	mov	r0, r3
 8027eb4:	370c      	adds	r7, #12
 8027eb6:	46bd      	mov	sp, r7
 8027eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027ebc:	4770      	bx	lr

08027ebe <_ZSt14__copy_move_a1ILb0EPP7RequestS2_ET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8027ebe:	b580      	push	{r7, lr}
 8027ec0:	b084      	sub	sp, #16
 8027ec2:	af00      	add	r7, sp, #0
 8027ec4:	60f8      	str	r0, [r7, #12]
 8027ec6:	60b9      	str	r1, [r7, #8]
 8027ec8:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8027eca:	687a      	ldr	r2, [r7, #4]
 8027ecc:	68b9      	ldr	r1, [r7, #8]
 8027ece:	68f8      	ldr	r0, [r7, #12]
 8027ed0:	f000 f9c5 	bl	802825e <_ZSt14__copy_move_a2ILb0EPP7RequestS2_ET1_T0_S4_S3_>
 8027ed4:	4603      	mov	r3, r0
 8027ed6:	4618      	mov	r0, r3
 8027ed8:	3710      	adds	r7, #16
 8027eda:	46bd      	mov	sp, r7
 8027edc:	bd80      	pop	{r7, pc}

08027ede <_ZSt12__niter_wrapIPP7RequestET_RKS3_S3_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8027ede:	b480      	push	{r7}
 8027ee0:	b083      	sub	sp, #12
 8027ee2:	af00      	add	r7, sp, #0
 8027ee4:	6078      	str	r0, [r7, #4]
 8027ee6:	6039      	str	r1, [r7, #0]
    { return __res; }
 8027ee8:	683b      	ldr	r3, [r7, #0]
 8027eea:	4618      	mov	r0, r3
 8027eec:	370c      	adds	r7, #12
 8027eee:	46bd      	mov	sp, r7
 8027ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027ef4:	4770      	bx	lr

08027ef6 <_ZSt23__copy_move_backward_a1ILb0EPP7RequestS2_ET1_T0_S4_S3_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 8027ef6:	b580      	push	{r7, lr}
 8027ef8:	b084      	sub	sp, #16
 8027efa:	af00      	add	r7, sp, #0
 8027efc:	60f8      	str	r0, [r7, #12]
 8027efe:	60b9      	str	r1, [r7, #8]
 8027f00:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 8027f02:	687a      	ldr	r2, [r7, #4]
 8027f04:	68b9      	ldr	r1, [r7, #8]
 8027f06:	68f8      	ldr	r0, [r7, #12]
 8027f08:	f000 f9b9 	bl	802827e <_ZSt23__copy_move_backward_a2ILb0EPP7RequestS2_ET1_T0_S4_S3_>
 8027f0c:	4603      	mov	r3, r0
 8027f0e:	4618      	mov	r0, r3
 8027f10:	3710      	adds	r7, #16
 8027f12:	46bd      	mov	sp, r7
 8027f14:	bd80      	pop	{r7, pc}

08027f16 <_ZNK9__gnu_cxx13new_allocatorI8ResponceE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8027f16:	b580      	push	{r7, lr}
 8027f18:	b082      	sub	sp, #8
 8027f1a:	af00      	add	r7, sp, #0
 8027f1c:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8027f1e:	6878      	ldr	r0, [r7, #4]
 8027f20:	f000 f856 	bl	8027fd0 <_ZNK9__gnu_cxx13new_allocatorI8ResponceE11_M_max_sizeEv>
 8027f24:	4603      	mov	r3, r0
 8027f26:	4618      	mov	r0, r3
 8027f28:	3708      	adds	r7, #8
 8027f2a:	46bd      	mov	sp, r7
 8027f2c:	bd80      	pop	{r7, pc}

08027f2e <_ZSt12__miter_baseIPP8ResponceET_S3_>:
    __miter_base(_Iterator __it)
 8027f2e:	b480      	push	{r7}
 8027f30:	b083      	sub	sp, #12
 8027f32:	af00      	add	r7, sp, #0
 8027f34:	6078      	str	r0, [r7, #4]
    { return __it; }
 8027f36:	687b      	ldr	r3, [r7, #4]
 8027f38:	4618      	mov	r0, r3
 8027f3a:	370c      	adds	r7, #12
 8027f3c:	46bd      	mov	sp, r7
 8027f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027f42:	4770      	bx	lr

08027f44 <_ZSt13__copy_move_aILb0EPP8ResponceS2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8027f44:	b5b0      	push	{r4, r5, r7, lr}
 8027f46:	b084      	sub	sp, #16
 8027f48:	af00      	add	r7, sp, #0
 8027f4a:	60f8      	str	r0, [r7, #12]
 8027f4c:	60b9      	str	r1, [r7, #8]
 8027f4e:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8027f50:	68f8      	ldr	r0, [r7, #12]
 8027f52:	f000 f9a4 	bl	802829e <_ZSt12__niter_baseIPP8ResponceET_S3_>
 8027f56:	4604      	mov	r4, r0
 8027f58:	68b8      	ldr	r0, [r7, #8]
 8027f5a:	f000 f9a0 	bl	802829e <_ZSt12__niter_baseIPP8ResponceET_S3_>
 8027f5e:	4605      	mov	r5, r0
 8027f60:	687b      	ldr	r3, [r7, #4]
 8027f62:	4618      	mov	r0, r3
 8027f64:	f000 f99b 	bl	802829e <_ZSt12__niter_baseIPP8ResponceET_S3_>
 8027f68:	4603      	mov	r3, r0
 8027f6a:	461a      	mov	r2, r3
 8027f6c:	4629      	mov	r1, r5
 8027f6e:	4620      	mov	r0, r4
 8027f70:	f000 f9a0 	bl	80282b4 <_ZSt14__copy_move_a1ILb0EPP8ResponceS2_ET1_T0_S4_S3_>
 8027f74:	4602      	mov	r2, r0
 8027f76:	1d3b      	adds	r3, r7, #4
 8027f78:	4611      	mov	r1, r2
 8027f7a:	4618      	mov	r0, r3
 8027f7c:	f000 f9aa 	bl	80282d4 <_ZSt12__niter_wrapIPP8ResponceET_RKS3_S3_>
 8027f80:	4603      	mov	r3, r0
    }
 8027f82:	4618      	mov	r0, r3
 8027f84:	3710      	adds	r7, #16
 8027f86:	46bd      	mov	sp, r7
 8027f88:	bdb0      	pop	{r4, r5, r7, pc}

08027f8a <_ZSt22__copy_move_backward_aILb0EPP8ResponceS2_ET1_T0_S4_S3_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 8027f8a:	b5b0      	push	{r4, r5, r7, lr}
 8027f8c:	b084      	sub	sp, #16
 8027f8e:	af00      	add	r7, sp, #0
 8027f90:	60f8      	str	r0, [r7, #12]
 8027f92:	60b9      	str	r1, [r7, #8]
 8027f94:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8027f96:	68f8      	ldr	r0, [r7, #12]
 8027f98:	f000 f981 	bl	802829e <_ZSt12__niter_baseIPP8ResponceET_S3_>
 8027f9c:	4604      	mov	r4, r0
 8027f9e:	68b8      	ldr	r0, [r7, #8]
 8027fa0:	f000 f97d 	bl	802829e <_ZSt12__niter_baseIPP8ResponceET_S3_>
 8027fa4:	4605      	mov	r5, r0
 8027fa6:	687b      	ldr	r3, [r7, #4]
 8027fa8:	4618      	mov	r0, r3
 8027faa:	f000 f978 	bl	802829e <_ZSt12__niter_baseIPP8ResponceET_S3_>
 8027fae:	4603      	mov	r3, r0
 8027fb0:	461a      	mov	r2, r3
 8027fb2:	4629      	mov	r1, r5
 8027fb4:	4620      	mov	r0, r4
 8027fb6:	f000 f999 	bl	80282ec <_ZSt23__copy_move_backward_a1ILb0EPP8ResponceS2_ET1_T0_S4_S3_>
 8027fba:	4602      	mov	r2, r0
 8027fbc:	1d3b      	adds	r3, r7, #4
 8027fbe:	4611      	mov	r1, r2
 8027fc0:	4618      	mov	r0, r3
 8027fc2:	f000 f987 	bl	80282d4 <_ZSt12__niter_wrapIPP8ResponceET_RKS3_S3_>
 8027fc6:	4603      	mov	r3, r0
    }
 8027fc8:	4618      	mov	r0, r3
 8027fca:	3710      	adds	r7, #16
 8027fcc:	46bd      	mov	sp, r7
 8027fce:	bdb0      	pop	{r4, r5, r7, pc}

08027fd0 <_ZNK9__gnu_cxx13new_allocatorI8ResponceE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8027fd0:	b480      	push	{r7}
 8027fd2:	b083      	sub	sp, #12
 8027fd4:	af00      	add	r7, sp, #0
 8027fd6:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8027fd8:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
      }
 8027fdc:	4618      	mov	r0, r3
 8027fde:	370c      	adds	r7, #12
 8027fe0:	46bd      	mov	sp, r7
 8027fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027fe6:	4770      	bx	lr

08027fe8 <_ZSt19__iterator_categoryIPhENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
    __iterator_category(const _Iter&)
 8027fe8:	b480      	push	{r7}
 8027fea:	b083      	sub	sp, #12
 8027fec:	af00      	add	r7, sp, #0
 8027fee:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8027ff0:	bf00      	nop
 8027ff2:	4618      	mov	r0, r3
 8027ff4:	370c      	adds	r7, #12
 8027ff6:	46bd      	mov	sp, r7
 8027ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027ffc:	4770      	bx	lr

08027ffe <_ZSt10__fill_n_aIPhjhET_S1_T0_RKT1_St26random_access_iterator_tag>:
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
 8027ffe:	b580      	push	{r7, lr}
 8028000:	b084      	sub	sp, #16
 8028002:	af00      	add	r7, sp, #0
 8028004:	60f8      	str	r0, [r7, #12]
 8028006:	60b9      	str	r1, [r7, #8]
 8028008:	607a      	str	r2, [r7, #4]
 802800a:	703b      	strb	r3, [r7, #0]
      if (__n <= 0)
 802800c:	68bb      	ldr	r3, [r7, #8]
 802800e:	2b00      	cmp	r3, #0
 8028010:	d101      	bne.n	8028016 <_ZSt10__fill_n_aIPhjhET_S1_T0_RKT1_St26random_access_iterator_tag+0x18>
	return __first;
 8028012:	68fb      	ldr	r3, [r7, #12]
 8028014:	e00a      	b.n	802802c <_ZSt10__fill_n_aIPhjhET_S1_T0_RKT1_St26random_access_iterator_tag+0x2e>
      std::__fill_a(__first, __first + __n, __value);
 8028016:	68fa      	ldr	r2, [r7, #12]
 8028018:	68bb      	ldr	r3, [r7, #8]
 802801a:	4413      	add	r3, r2
 802801c:	687a      	ldr	r2, [r7, #4]
 802801e:	4619      	mov	r1, r3
 8028020:	68f8      	ldr	r0, [r7, #12]
 8028022:	f000 f973 	bl	802830c <_ZSt8__fill_aIPhhEvT_S1_RKT0_>
      return __first + __n;
 8028026:	68fa      	ldr	r2, [r7, #12]
 8028028:	68bb      	ldr	r3, [r7, #8]
 802802a:	4413      	add	r3, r2
    }
 802802c:	4618      	mov	r0, r3
 802802e:	3710      	adds	r7, #16
 8028030:	46bd      	mov	sp, r7
 8028032:	bd80      	pop	{r7, pc}

08028034 <_ZSt4copyISt13move_iteratorIPhES1_ET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 8028034:	b590      	push	{r4, r7, lr}
 8028036:	b085      	sub	sp, #20
 8028038:	af00      	add	r7, sp, #0
 802803a:	60f8      	str	r0, [r7, #12]
 802803c:	60b9      	str	r1, [r7, #8]
 802803e:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8028040:	68f8      	ldr	r0, [r7, #12]
 8028042:	f000 f972 	bl	802832a <_ZSt12__miter_baseIPhEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8028046:	4604      	mov	r4, r0
 8028048:	68b8      	ldr	r0, [r7, #8]
 802804a:	f000 f96e 	bl	802832a <_ZSt12__miter_baseIPhEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 802804e:	4603      	mov	r3, r0
 8028050:	687a      	ldr	r2, [r7, #4]
 8028052:	4619      	mov	r1, r3
 8028054:	4620      	mov	r0, r4
 8028056:	f000 f979 	bl	802834c <_ZSt13__copy_move_aILb1EPhS0_ET1_T0_S2_S1_>
 802805a:	4603      	mov	r3, r0
    }
 802805c:	4618      	mov	r0, r3
 802805e:	3714      	adds	r7, #20
 8028060:	46bd      	mov	sp, r7
 8028062:	bd90      	pop	{r4, r7, pc}

08028064 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET1_T0_SA_S9_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8028064:	b5b0      	push	{r4, r5, r7, lr}
 8028066:	b084      	sub	sp, #16
 8028068:	af00      	add	r7, sp, #0
 802806a:	60f8      	str	r0, [r7, #12]
 802806c:	60b9      	str	r1, [r7, #8]
 802806e:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8028070:	68f8      	ldr	r0, [r7, #12]
 8028072:	f7fd fd2c 	bl	8025ace <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8028076:	4604      	mov	r4, r0
 8028078:	68b8      	ldr	r0, [r7, #8]
 802807a:	f7fd fd28 	bl	8025ace <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 802807e:	4605      	mov	r5, r0
 8028080:	687b      	ldr	r3, [r7, #4]
 8028082:	4618      	mov	r0, r3
 8028084:	f7fd fd6f 	bl	8025b66 <_ZSt12__niter_baseIPhET_S1_>
 8028088:	4603      	mov	r3, r0
 802808a:	461a      	mov	r2, r3
 802808c:	4629      	mov	r1, r5
 802808e:	4620      	mov	r0, r4
 8028090:	f7fd fd39 	bl	8025b06 <_ZSt14__copy_move_a1ILb0EPKhPhET1_T0_S4_S3_>
 8028094:	4602      	mov	r2, r0
 8028096:	1d3b      	adds	r3, r7, #4
 8028098:	4611      	mov	r1, r2
 802809a:	4618      	mov	r0, r3
 802809c:	f7fd fd7e 	bl	8025b9c <_ZSt12__niter_wrapIPhET_RKS1_S1_>
 80280a0:	4603      	mov	r3, r0
    }
 80280a2:	4618      	mov	r0, r3
 80280a4:	3710      	adds	r7, #16
 80280a6:	46bd      	mov	sp, r7
 80280a8:	bdb0      	pop	{r4, r5, r7, pc}

080280aa <_ZSt14__copy_move_a2ILb0EPKN10BHYWrapper8BHYFrameEPS1_ET1_T0_S6_S5_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80280aa:	b580      	push	{r7, lr}
 80280ac:	b084      	sub	sp, #16
 80280ae:	af00      	add	r7, sp, #0
 80280b0:	60f8      	str	r0, [r7, #12]
 80280b2:	60b9      	str	r1, [r7, #8]
 80280b4:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 80280b6:	687a      	ldr	r2, [r7, #4]
 80280b8:	68b9      	ldr	r1, [r7, #8]
 80280ba:	68f8      	ldr	r0, [r7, #12]
 80280bc:	f000 f96a 	bl	8028394 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_>
 80280c0:	4603      	mov	r3, r0
    }
 80280c2:	4618      	mov	r0, r3
 80280c4:	3710      	adds	r7, #16
 80280c6:	46bd      	mov	sp, r7
 80280c8:	bd80      	pop	{r7, pc}

080280ca <_ZSt4moveIRSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 80280ca:	b480      	push	{r7}
 80280cc:	b083      	sub	sp, #12
 80280ce:	af00      	add	r7, sp, #0
 80280d0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80280d2:	687b      	ldr	r3, [r7, #4]
 80280d4:	4618      	mov	r0, r3
 80280d6:	370c      	adds	r7, #12
 80280d8:	46bd      	mov	sp, r7
 80280da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80280de:	4770      	bx	lr

080280e0 <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ES5_>:
      move_iterator(iterator_type __i)
 80280e0:	b590      	push	{r4, r7, lr}
 80280e2:	b083      	sub	sp, #12
 80280e4:	af00      	add	r7, sp, #0
 80280e6:	6078      	str	r0, [r7, #4]
 80280e8:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 80280ea:	687c      	ldr	r4, [r7, #4]
 80280ec:	6838      	ldr	r0, [r7, #0]
 80280ee:	f7ff ffec 	bl	80280ca <_ZSt4moveIRSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEONSt16remove_referenceIT_E4typeEOS8_>
 80280f2:	4603      	mov	r3, r0
 80280f4:	4619      	mov	r1, r3
 80280f6:	4620      	mov	r0, r4
 80280f8:	f7fc f8a6 	bl	8024248 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80280fc:	687b      	ldr	r3, [r7, #4]
 80280fe:	4618      	mov	r0, r3
 8028100:	370c      	adds	r7, #12
 8028102:	46bd      	mov	sp, r7
 8028104:	bd90      	pop	{r4, r7, pc}

08028106 <_ZSt18uninitialized_copyISt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS3_PS3_EES6_ET0_T_S9_S8_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8028106:	b580      	push	{r7, lr}
 8028108:	b092      	sub	sp, #72	; 0x48
 802810a:	af00      	add	r7, sp, #0
 802810c:	60f8      	str	r0, [r7, #12]
 802810e:	60b9      	str	r1, [r7, #8]
 8028110:	607a      	str	r2, [r7, #4]
 8028112:	603b      	str	r3, [r7, #0]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8028114:	2301      	movs	r3, #1
 8028116:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	__uninit_copy(__first, __last, __result);
 802811a:	f107 0314 	add.w	r3, r7, #20
 802811e:	68b9      	ldr	r1, [r7, #8]
 8028120:	4618      	mov	r0, r3
 8028122:	f7ff fd42 	bl	8027baa <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ERKS6_>
 8028126:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802812a:	6879      	ldr	r1, [r7, #4]
 802812c:	4618      	mov	r0, r3
 802812e:	f7ff fd3c 	bl	8027baa <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ERKS6_>
 8028132:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8028136:	6839      	ldr	r1, [r7, #0]
 8028138:	4618      	mov	r0, r3
 802813a:	f7fc f885 	bl	8024248 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802813e:	68f8      	ldr	r0, [r7, #12]
 8028140:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8028144:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8028148:	f107 0114 	add.w	r1, r7, #20
 802814c:	f000 f94c 	bl	80283e8 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS5_PS5_EES8_EET0_T_SB_SA_>
    }
 8028150:	68f8      	ldr	r0, [r7, #12]
 8028152:	3748      	adds	r7, #72	; 0x48
 8028154:	46bd      	mov	sp, r7
 8028156:	bd80      	pop	{r7, pc}

08028158 <_ZSt14__copy_move_a1ILb1EN10BHYWrapper8BHYFrameERS1_PS1_S1_ESt15_Deque_iteratorIT3_RS5_PS5_ES4_IT0_T1_T2_ESC_S8_>:
    __copy_move_a1(_GLIBCXX_STD_C::_Deque_iterator<_ITp, _IRef, _IPtr> __first,
 8028158:	b580      	push	{r7, lr}
 802815a:	b090      	sub	sp, #64	; 0x40
 802815c:	af00      	add	r7, sp, #0
 802815e:	60f8      	str	r0, [r7, #12]
 8028160:	60b9      	str	r1, [r7, #8]
 8028162:	607a      	str	r2, [r7, #4]
 8028164:	603b      	str	r3, [r7, #0]
    { return __copy_move_dit<_IsMove>(__first, __last, __result); }
 8028166:	f107 0310 	add.w	r3, r7, #16
 802816a:	68b9      	ldr	r1, [r7, #8]
 802816c:	4618      	mov	r0, r3
 802816e:	f7fc f86b 	bl	8024248 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8028172:	f107 0320 	add.w	r3, r7, #32
 8028176:	6879      	ldr	r1, [r7, #4]
 8028178:	4618      	mov	r0, r3
 802817a:	f7fc f865 	bl	8024248 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802817e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8028182:	6839      	ldr	r1, [r7, #0]
 8028184:	4618      	mov	r0, r3
 8028186:	f7fc f85f 	bl	8024248 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802818a:	68f8      	ldr	r0, [r7, #12]
 802818c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8028190:	f107 0220 	add.w	r2, r7, #32
 8028194:	f107 0110 	add.w	r1, r7, #16
 8028198:	f000 f94c 	bl	8028434 <_ZSt15__copy_move_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_>
 802819c:	68f8      	ldr	r0, [r7, #12]
 802819e:	3740      	adds	r7, #64	; 0x40
 80281a0:	46bd      	mov	sp, r7
 80281a2:	bd80      	pop	{r7, pc}

080281a4 <_ZSt23__copy_move_backward_a1ILb1EN10BHYWrapper8BHYFrameERS1_PS1_S1_ESt15_Deque_iteratorIT3_RS5_PS5_ES4_IT0_T1_T2_ESC_S8_>:
    { return __copy_move_backward_dit<_IsMove>(__first, __last, __result); }

  template<bool _IsMove,
	   typename _ITp, typename _IRef, typename _IPtr, typename _OTp>
    _GLIBCXX_STD_C::_Deque_iterator<_OTp, _OTp&, _OTp*>
    __copy_move_backward_a1(
 80281a4:	b580      	push	{r7, lr}
 80281a6:	b090      	sub	sp, #64	; 0x40
 80281a8:	af00      	add	r7, sp, #0
 80281aa:	60f8      	str	r0, [r7, #12]
 80281ac:	60b9      	str	r1, [r7, #8]
 80281ae:	607a      	str	r2, [r7, #4]
 80281b0:	603b      	str	r3, [r7, #0]
		_GLIBCXX_STD_C::_Deque_iterator<_ITp, _IRef, _IPtr> __first,
		_GLIBCXX_STD_C::_Deque_iterator<_ITp, _IRef, _IPtr> __last,
		_GLIBCXX_STD_C::_Deque_iterator<_OTp, _OTp&, _OTp*> __result)
    { return __copy_move_backward_dit<_IsMove>(__first, __last, __result); }
 80281b2:	f107 0310 	add.w	r3, r7, #16
 80281b6:	68b9      	ldr	r1, [r7, #8]
 80281b8:	4618      	mov	r0, r3
 80281ba:	f7fc f845 	bl	8024248 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80281be:	f107 0320 	add.w	r3, r7, #32
 80281c2:	6879      	ldr	r1, [r7, #4]
 80281c4:	4618      	mov	r0, r3
 80281c6:	f7fc f83f 	bl	8024248 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80281ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80281ce:	6839      	ldr	r1, [r7, #0]
 80281d0:	4618      	mov	r0, r3
 80281d2:	f7fc f839 	bl	8024248 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80281d6:	68f8      	ldr	r0, [r7, #12]
 80281d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80281dc:	f107 0220 	add.w	r2, r7, #32
 80281e0:	f107 0110 	add.w	r1, r7, #16
 80281e4:	f000 f9a1 	bl	802852a <_ZSt24__copy_move_backward_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_>
 80281e8:	68f8      	ldr	r0, [r7, #12]
 80281ea:	3740      	adds	r7, #64	; 0x40
 80281ec:	46bd      	mov	sp, r7
 80281ee:	bd80      	pop	{r7, pc}

080281f0 <_ZSt12__niter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>:
    __niter_base(_Iterator __it)
 80281f0:	b480      	push	{r7}
 80281f2:	b083      	sub	sp, #12
 80281f4:	af00      	add	r7, sp, #0
 80281f6:	6078      	str	r0, [r7, #4]
    { return __it; }
 80281f8:	687b      	ldr	r3, [r7, #4]
 80281fa:	4618      	mov	r0, r3
 80281fc:	370c      	adds	r7, #12
 80281fe:	46bd      	mov	sp, r7
 8028200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028204:	4770      	bx	lr

08028206 <_ZSt14__copy_move_a1ILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8028206:	b580      	push	{r7, lr}
 8028208:	b084      	sub	sp, #16
 802820a:	af00      	add	r7, sp, #0
 802820c:	60f8      	str	r0, [r7, #12]
 802820e:	60b9      	str	r1, [r7, #8]
 8028210:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8028212:	687a      	ldr	r2, [r7, #4]
 8028214:	68b9      	ldr	r1, [r7, #8]
 8028216:	68f8      	ldr	r0, [r7, #12]
 8028218:	f000 fa02 	bl	8028620 <_ZSt14__copy_move_a2ILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>
 802821c:	4603      	mov	r3, r0
 802821e:	4618      	mov	r0, r3
 8028220:	3710      	adds	r7, #16
 8028222:	46bd      	mov	sp, r7
 8028224:	bd80      	pop	{r7, pc}

08028226 <_ZSt12__niter_wrapIPPN10BHYWrapper8BHYFrameEET_RKS4_S4_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8028226:	b480      	push	{r7}
 8028228:	b083      	sub	sp, #12
 802822a:	af00      	add	r7, sp, #0
 802822c:	6078      	str	r0, [r7, #4]
 802822e:	6039      	str	r1, [r7, #0]
    { return __res; }
 8028230:	683b      	ldr	r3, [r7, #0]
 8028232:	4618      	mov	r0, r3
 8028234:	370c      	adds	r7, #12
 8028236:	46bd      	mov	sp, r7
 8028238:	f85d 7b04 	ldr.w	r7, [sp], #4
 802823c:	4770      	bx	lr

0802823e <_ZSt23__copy_move_backward_a1ILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 802823e:	b580      	push	{r7, lr}
 8028240:	b084      	sub	sp, #16
 8028242:	af00      	add	r7, sp, #0
 8028244:	60f8      	str	r0, [r7, #12]
 8028246:	60b9      	str	r1, [r7, #8]
 8028248:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 802824a:	687a      	ldr	r2, [r7, #4]
 802824c:	68b9      	ldr	r1, [r7, #8]
 802824e:	68f8      	ldr	r0, [r7, #12]
 8028250:	f000 f9f6 	bl	8028640 <_ZSt23__copy_move_backward_a2ILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>
 8028254:	4603      	mov	r3, r0
 8028256:	4618      	mov	r0, r3
 8028258:	3710      	adds	r7, #16
 802825a:	46bd      	mov	sp, r7
 802825c:	bd80      	pop	{r7, pc}

0802825e <_ZSt14__copy_move_a2ILb0EPP7RequestS2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 802825e:	b580      	push	{r7, lr}
 8028260:	b084      	sub	sp, #16
 8028262:	af00      	add	r7, sp, #0
 8028264:	60f8      	str	r0, [r7, #12]
 8028266:	60b9      	str	r1, [r7, #8]
 8028268:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 802826a:	687a      	ldr	r2, [r7, #4]
 802826c:	68b9      	ldr	r1, [r7, #8]
 802826e:	68f8      	ldr	r0, [r7, #12]
 8028270:	f000 f9f6 	bl	8028660 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP7RequestEEPT_PKS5_S8_S6_>
 8028274:	4603      	mov	r3, r0
    }
 8028276:	4618      	mov	r0, r3
 8028278:	3710      	adds	r7, #16
 802827a:	46bd      	mov	sp, r7
 802827c:	bd80      	pop	{r7, pc}

0802827e <_ZSt23__copy_move_backward_a2ILb0EPP7RequestS2_ET1_T0_S4_S3_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 802827e:	b580      	push	{r7, lr}
 8028280:	b084      	sub	sp, #16
 8028282:	af00      	add	r7, sp, #0
 8028284:	60f8      	str	r0, [r7, #12]
 8028286:	60b9      	str	r1, [r7, #8]
 8028288:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 802828a:	687a      	ldr	r2, [r7, #4]
 802828c:	68b9      	ldr	r1, [r7, #8]
 802828e:	68f8      	ldr	r0, [r7, #12]
 8028290:	f000 fa03 	bl	802869a <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIP7RequestEEPT_PKS5_S8_S6_>
 8028294:	4603      	mov	r3, r0
    }
 8028296:	4618      	mov	r0, r3
 8028298:	3710      	adds	r7, #16
 802829a:	46bd      	mov	sp, r7
 802829c:	bd80      	pop	{r7, pc}

0802829e <_ZSt12__niter_baseIPP8ResponceET_S3_>:
    __niter_base(_Iterator __it)
 802829e:	b480      	push	{r7}
 80282a0:	b083      	sub	sp, #12
 80282a2:	af00      	add	r7, sp, #0
 80282a4:	6078      	str	r0, [r7, #4]
    { return __it; }
 80282a6:	687b      	ldr	r3, [r7, #4]
 80282a8:	4618      	mov	r0, r3
 80282aa:	370c      	adds	r7, #12
 80282ac:	46bd      	mov	sp, r7
 80282ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80282b2:	4770      	bx	lr

080282b4 <_ZSt14__copy_move_a1ILb0EPP8ResponceS2_ET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 80282b4:	b580      	push	{r7, lr}
 80282b6:	b084      	sub	sp, #16
 80282b8:	af00      	add	r7, sp, #0
 80282ba:	60f8      	str	r0, [r7, #12]
 80282bc:	60b9      	str	r1, [r7, #8]
 80282be:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 80282c0:	687a      	ldr	r2, [r7, #4]
 80282c2:	68b9      	ldr	r1, [r7, #8]
 80282c4:	68f8      	ldr	r0, [r7, #12]
 80282c6:	f000 fa0a 	bl	80286de <_ZSt14__copy_move_a2ILb0EPP8ResponceS2_ET1_T0_S4_S3_>
 80282ca:	4603      	mov	r3, r0
 80282cc:	4618      	mov	r0, r3
 80282ce:	3710      	adds	r7, #16
 80282d0:	46bd      	mov	sp, r7
 80282d2:	bd80      	pop	{r7, pc}

080282d4 <_ZSt12__niter_wrapIPP8ResponceET_RKS3_S3_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 80282d4:	b480      	push	{r7}
 80282d6:	b083      	sub	sp, #12
 80282d8:	af00      	add	r7, sp, #0
 80282da:	6078      	str	r0, [r7, #4]
 80282dc:	6039      	str	r1, [r7, #0]
    { return __res; }
 80282de:	683b      	ldr	r3, [r7, #0]
 80282e0:	4618      	mov	r0, r3
 80282e2:	370c      	adds	r7, #12
 80282e4:	46bd      	mov	sp, r7
 80282e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80282ea:	4770      	bx	lr

080282ec <_ZSt23__copy_move_backward_a1ILb0EPP8ResponceS2_ET1_T0_S4_S3_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 80282ec:	b580      	push	{r7, lr}
 80282ee:	b084      	sub	sp, #16
 80282f0:	af00      	add	r7, sp, #0
 80282f2:	60f8      	str	r0, [r7, #12]
 80282f4:	60b9      	str	r1, [r7, #8]
 80282f6:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 80282f8:	687a      	ldr	r2, [r7, #4]
 80282fa:	68b9      	ldr	r1, [r7, #8]
 80282fc:	68f8      	ldr	r0, [r7, #12]
 80282fe:	f000 f9fe 	bl	80286fe <_ZSt23__copy_move_backward_a2ILb0EPP8ResponceS2_ET1_T0_S4_S3_>
 8028302:	4603      	mov	r3, r0
 8028304:	4618      	mov	r0, r3
 8028306:	3710      	adds	r7, #16
 8028308:	46bd      	mov	sp, r7
 802830a:	bd80      	pop	{r7, pc}

0802830c <_ZSt8__fill_aIPhhEvT_S1_RKT0_>:
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
 802830c:	b580      	push	{r7, lr}
 802830e:	b084      	sub	sp, #16
 8028310:	af00      	add	r7, sp, #0
 8028312:	60f8      	str	r0, [r7, #12]
 8028314:	60b9      	str	r1, [r7, #8]
 8028316:	607a      	str	r2, [r7, #4]
    { std::__fill_a1(__first, __last, __value); }
 8028318:	687a      	ldr	r2, [r7, #4]
 802831a:	68b9      	ldr	r1, [r7, #8]
 802831c:	68f8      	ldr	r0, [r7, #12]
 802831e:	f000 f9fe 	bl	802871e <_ZSt9__fill_a1IhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_>
 8028322:	bf00      	nop
 8028324:	3710      	adds	r7, #16
 8028326:	46bd      	mov	sp, r7
 8028328:	bd80      	pop	{r7, pc}

0802832a <_ZSt12__miter_baseIPhEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 802832a:	b580      	push	{r7, lr}
 802832c:	b082      	sub	sp, #8
 802832e:	af00      	add	r7, sp, #0
 8028330:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 8028332:	1d3b      	adds	r3, r7, #4
 8028334:	4618      	mov	r0, r3
 8028336:	f000 fa0c 	bl	8028752 <_ZNKSt13move_iteratorIPhE4baseEv>
 802833a:	4603      	mov	r3, r0
 802833c:	4618      	mov	r0, r3
 802833e:	f7fc fd20 	bl	8024d82 <_ZSt12__miter_baseIPhET_S1_>
 8028342:	4603      	mov	r3, r0
 8028344:	4618      	mov	r0, r3
 8028346:	3708      	adds	r7, #8
 8028348:	46bd      	mov	sp, r7
 802834a:	bd80      	pop	{r7, pc}

0802834c <_ZSt13__copy_move_aILb1EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 802834c:	b5b0      	push	{r4, r5, r7, lr}
 802834e:	b084      	sub	sp, #16
 8028350:	af00      	add	r7, sp, #0
 8028352:	60f8      	str	r0, [r7, #12]
 8028354:	60b9      	str	r1, [r7, #8]
 8028356:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8028358:	68f8      	ldr	r0, [r7, #12]
 802835a:	f7fd fc04 	bl	8025b66 <_ZSt12__niter_baseIPhET_S1_>
 802835e:	4604      	mov	r4, r0
 8028360:	68b8      	ldr	r0, [r7, #8]
 8028362:	f7fd fc00 	bl	8025b66 <_ZSt12__niter_baseIPhET_S1_>
 8028366:	4605      	mov	r5, r0
 8028368:	687b      	ldr	r3, [r7, #4]
 802836a:	4618      	mov	r0, r3
 802836c:	f7fd fbfb 	bl	8025b66 <_ZSt12__niter_baseIPhET_S1_>
 8028370:	4603      	mov	r3, r0
 8028372:	461a      	mov	r2, r3
 8028374:	4629      	mov	r1, r5
 8028376:	4620      	mov	r0, r4
 8028378:	f000 f9f7 	bl	802876a <_ZSt14__copy_move_a1ILb1EPhS0_ET1_T0_S2_S1_>
 802837c:	4602      	mov	r2, r0
 802837e:	1d3b      	adds	r3, r7, #4
 8028380:	4611      	mov	r1, r2
 8028382:	4618      	mov	r0, r3
 8028384:	f7fd fc0a 	bl	8025b9c <_ZSt12__niter_wrapIPhET_RKS1_S1_>
 8028388:	4603      	mov	r3, r0
    }
 802838a:	4618      	mov	r0, r3
 802838c:	3710      	adds	r7, #16
 802838e:	46bd      	mov	sp, r7
 8028390:	bdb0      	pop	{r4, r5, r7, pc}
	...

08028394 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8028394:	b580      	push	{r7, lr}
 8028396:	b086      	sub	sp, #24
 8028398:	af00      	add	r7, sp, #0
 802839a:	60f8      	str	r0, [r7, #12]
 802839c:	60b9      	str	r1, [r7, #8]
 802839e:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80283a0:	68ba      	ldr	r2, [r7, #8]
 80283a2:	68fb      	ldr	r3, [r7, #12]
 80283a4:	1ad3      	subs	r3, r2, r3
 80283a6:	109b      	asrs	r3, r3, #2
 80283a8:	4a0e      	ldr	r2, [pc, #56]	; (80283e4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_+0x50>)
 80283aa:	fb02 f303 	mul.w	r3, r2, r3
 80283ae:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80283b0:	697b      	ldr	r3, [r7, #20]
 80283b2:	2b00      	cmp	r3, #0
 80283b4:	d009      	beq.n	80283ca <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_+0x36>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80283b6:	697a      	ldr	r2, [r7, #20]
 80283b8:	4613      	mov	r3, r2
 80283ba:	009b      	lsls	r3, r3, #2
 80283bc:	4413      	add	r3, r2
 80283be:	009b      	lsls	r3, r3, #2
 80283c0:	461a      	mov	r2, r3
 80283c2:	68f9      	ldr	r1, [r7, #12]
 80283c4:	6878      	ldr	r0, [r7, #4]
 80283c6:	f014 fdf1 	bl	803cfac <memmove>
	  return __result + _Num;
 80283ca:	697a      	ldr	r2, [r7, #20]
 80283cc:	4613      	mov	r3, r2
 80283ce:	009b      	lsls	r3, r3, #2
 80283d0:	4413      	add	r3, r2
 80283d2:	009b      	lsls	r3, r3, #2
 80283d4:	461a      	mov	r2, r3
 80283d6:	687b      	ldr	r3, [r7, #4]
 80283d8:	4413      	add	r3, r2
	}
 80283da:	4618      	mov	r0, r3
 80283dc:	3718      	adds	r7, #24
 80283de:	46bd      	mov	sp, r7
 80283e0:	bd80      	pop	{r7, pc}
 80283e2:	bf00      	nop
 80283e4:	cccccccd 	.word	0xcccccccd

080283e8 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS5_PS5_EES8_EET0_T_SB_SA_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80283e8:	b580      	push	{r7, lr}
 80283ea:	b090      	sub	sp, #64	; 0x40
 80283ec:	af00      	add	r7, sp, #0
 80283ee:	60f8      	str	r0, [r7, #12]
 80283f0:	60b9      	str	r1, [r7, #8]
 80283f2:	607a      	str	r2, [r7, #4]
 80283f4:	603b      	str	r3, [r7, #0]
        { return std::copy(__first, __last, __result); }
 80283f6:	f107 0310 	add.w	r3, r7, #16
 80283fa:	68b9      	ldr	r1, [r7, #8]
 80283fc:	4618      	mov	r0, r3
 80283fe:	f7ff fbd4 	bl	8027baa <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ERKS6_>
 8028402:	f107 0320 	add.w	r3, r7, #32
 8028406:	6879      	ldr	r1, [r7, #4]
 8028408:	4618      	mov	r0, r3
 802840a:	f7ff fbce 	bl	8027baa <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ERKS6_>
 802840e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8028412:	6839      	ldr	r1, [r7, #0]
 8028414:	4618      	mov	r0, r3
 8028416:	f7fb ff17 	bl	8024248 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802841a:	68f8      	ldr	r0, [r7, #12]
 802841c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8028420:	f107 0220 	add.w	r2, r7, #32
 8028424:	f107 0110 	add.w	r1, r7, #16
 8028428:	f000 f9af 	bl	802878a <_ZSt4copyISt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS3_PS3_EES6_ET0_T_S9_S8_>
 802842c:	68f8      	ldr	r0, [r7, #12]
 802842e:	3740      	adds	r7, #64	; 0x40
 8028430:	46bd      	mov	sp, r7
 8028432:	bd80      	pop	{r7, pc}

08028434 <_ZSt15__copy_move_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_>:
    __copy_move_dit(_GLIBCXX_STD_C::_Deque_iterator<_Tp, _Ref, _Ptr> __first,
 8028434:	b5b0      	push	{r4, r5, r7, lr}
 8028436:	b09e      	sub	sp, #120	; 0x78
 8028438:	af00      	add	r7, sp, #0
 802843a:	60f8      	str	r0, [r7, #12]
 802843c:	60b9      	str	r1, [r7, #8]
 802843e:	607a      	str	r2, [r7, #4]
 8028440:	603b      	str	r3, [r7, #0]
      if (__first._M_node != __last._M_node)
 8028442:	68bb      	ldr	r3, [r7, #8]
 8028444:	68da      	ldr	r2, [r3, #12]
 8028446:	687b      	ldr	r3, [r7, #4]
 8028448:	68db      	ldr	r3, [r3, #12]
 802844a:	429a      	cmp	r2, r3
 802844c:	d058      	beq.n	8028500 <_ZSt15__copy_move_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_+0xcc>
	  __result
 802844e:	68bb      	ldr	r3, [r7, #8]
 8028450:	681c      	ldr	r4, [r3, #0]
 8028452:	68bb      	ldr	r3, [r7, #8]
 8028454:	689d      	ldr	r5, [r3, #8]
 8028456:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802845a:	6839      	ldr	r1, [r7, #0]
 802845c:	4618      	mov	r0, r3
 802845e:	f7fb fef3 	bl	8024248 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8028462:	f107 0014 	add.w	r0, r7, #20
 8028466:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802846a:	462a      	mov	r2, r5
 802846c:	4621      	mov	r1, r4
 802846e:	f000 f9c3 	bl	80287f8 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>
 8028472:	683b      	ldr	r3, [r7, #0]
 8028474:	461c      	mov	r4, r3
 8028476:	f107 0314 	add.w	r3, r7, #20
 802847a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802847c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  for (typename _Iter::_Map_pointer __node = __first._M_node + 1;
 8028480:	68bb      	ldr	r3, [r7, #8]
 8028482:	68db      	ldr	r3, [r3, #12]
 8028484:	3304      	adds	r3, #4
 8028486:	677b      	str	r3, [r7, #116]	; 0x74
	       __node != __last._M_node; ++__node)
 8028488:	687b      	ldr	r3, [r7, #4]
 802848a:	68db      	ldr	r3, [r3, #12]
 802848c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 802848e:	429a      	cmp	r2, r3
 8028490:	d024      	beq.n	80284dc <_ZSt15__copy_move_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_+0xa8>
	    __result
 8028492:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8028494:	681d      	ldr	r5, [r3, #0]
 8028496:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8028498:	681c      	ldr	r4, [r3, #0]
					     *__node + _Iter::_S_buffer_size(),
 802849a:	f7fc fe7a 	bl	8025192 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 802849e:	4602      	mov	r2, r0
 80284a0:	4613      	mov	r3, r2
 80284a2:	009b      	lsls	r3, r3, #2
 80284a4:	4413      	add	r3, r2
 80284a6:	009b      	lsls	r3, r3, #2
	    __result
 80284a8:	441c      	add	r4, r3
 80284aa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80284ae:	6839      	ldr	r1, [r7, #0]
 80284b0:	4618      	mov	r0, r3
 80284b2:	f7fb fec9 	bl	8024248 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80284b6:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80284ba:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80284be:	4622      	mov	r2, r4
 80284c0:	4629      	mov	r1, r5
 80284c2:	f000 f999 	bl	80287f8 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>
 80284c6:	683b      	ldr	r3, [r7, #0]
 80284c8:	461c      	mov	r4, r3
 80284ca:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80284ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80284d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  for (typename _Iter::_Map_pointer __node = __first._M_node + 1;
 80284d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80284d6:	3304      	adds	r3, #4
 80284d8:	677b      	str	r3, [r7, #116]	; 0x74
 80284da:	e7d5      	b.n	8028488 <_ZSt15__copy_move_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_+0x54>
					      __result);
 80284dc:	687b      	ldr	r3, [r7, #4]
 80284de:	685c      	ldr	r4, [r3, #4]
 80284e0:	687b      	ldr	r3, [r7, #4]
 80284e2:	681d      	ldr	r5, [r3, #0]
 80284e4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80284e8:	6839      	ldr	r1, [r7, #0]
 80284ea:	4618      	mov	r0, r3
 80284ec:	f7fb feac 	bl	8024248 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80284f0:	68f8      	ldr	r0, [r7, #12]
 80284f2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80284f6:	462a      	mov	r2, r5
 80284f8:	4621      	mov	r1, r4
 80284fa:	f000 f97d 	bl	80287f8 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>
    }
 80284fe:	e010      	b.n	8028522 <_ZSt15__copy_move_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_+0xee>
					  __result);
 8028500:	68bb      	ldr	r3, [r7, #8]
 8028502:	681c      	ldr	r4, [r3, #0]
 8028504:	687b      	ldr	r3, [r7, #4]
 8028506:	681d      	ldr	r5, [r3, #0]
 8028508:	f107 0364 	add.w	r3, r7, #100	; 0x64
 802850c:	6839      	ldr	r1, [r7, #0]
 802850e:	4618      	mov	r0, r3
 8028510:	f7fb fe9a 	bl	8024248 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8028514:	68f8      	ldr	r0, [r7, #12]
 8028516:	f107 0364 	add.w	r3, r7, #100	; 0x64
 802851a:	462a      	mov	r2, r5
 802851c:	4621      	mov	r1, r4
 802851e:	f000 f96b 	bl	80287f8 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>
    }
 8028522:	68f8      	ldr	r0, [r7, #12]
 8028524:	3778      	adds	r7, #120	; 0x78
 8028526:	46bd      	mov	sp, r7
 8028528:	bdb0      	pop	{r4, r5, r7, pc}

0802852a <_ZSt24__copy_move_backward_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_>:
    __copy_move_backward_dit(
 802852a:	b5b0      	push	{r4, r5, r7, lr}
 802852c:	b09e      	sub	sp, #120	; 0x78
 802852e:	af00      	add	r7, sp, #0
 8028530:	60f8      	str	r0, [r7, #12]
 8028532:	60b9      	str	r1, [r7, #8]
 8028534:	607a      	str	r2, [r7, #4]
 8028536:	603b      	str	r3, [r7, #0]
      if (__first._M_node != __last._M_node)
 8028538:	68bb      	ldr	r3, [r7, #8]
 802853a:	68da      	ldr	r2, [r3, #12]
 802853c:	687b      	ldr	r3, [r7, #4]
 802853e:	68db      	ldr	r3, [r3, #12]
 8028540:	429a      	cmp	r2, r3
 8028542:	d058      	beq.n	80285f6 <_ZSt24__copy_move_backward_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_+0xcc>
	  __result = std::__copy_move_backward_a1<_IsMove>(
 8028544:	687b      	ldr	r3, [r7, #4]
 8028546:	685c      	ldr	r4, [r3, #4]
 8028548:	687b      	ldr	r3, [r7, #4]
 802854a:	681d      	ldr	r5, [r3, #0]
 802854c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8028550:	6839      	ldr	r1, [r7, #0]
 8028552:	4618      	mov	r0, r3
 8028554:	f7fb fe78 	bl	8024248 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8028558:	f107 0014 	add.w	r0, r7, #20
 802855c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8028560:	462a      	mov	r2, r5
 8028562:	4621      	mov	r1, r4
 8028564:	f000 f99a 	bl	802889c <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>
 8028568:	683b      	ldr	r3, [r7, #0]
 802856a:	461c      	mov	r4, r3
 802856c:	f107 0314 	add.w	r3, r7, #20
 8028570:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8028572:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  for (typename _Iter::_Map_pointer __node = __last._M_node - 1;
 8028576:	687b      	ldr	r3, [r7, #4]
 8028578:	68db      	ldr	r3, [r3, #12]
 802857a:	3b04      	subs	r3, #4
 802857c:	677b      	str	r3, [r7, #116]	; 0x74
	       __node != __first._M_node; --__node)
 802857e:	68bb      	ldr	r3, [r7, #8]
 8028580:	68db      	ldr	r3, [r3, #12]
 8028582:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8028584:	429a      	cmp	r2, r3
 8028586:	d024      	beq.n	80285d2 <_ZSt24__copy_move_backward_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_+0xa8>
	    __result = std::__copy_move_backward_a1<_IsMove>(
 8028588:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802858a:	681d      	ldr	r5, [r3, #0]
 802858c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802858e:	681c      	ldr	r4, [r3, #0]
		*__node, *__node + _Iter::_S_buffer_size(), __result);
 8028590:	f7fc fdff 	bl	8025192 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 8028594:	4602      	mov	r2, r0
 8028596:	4613      	mov	r3, r2
 8028598:	009b      	lsls	r3, r3, #2
 802859a:	4413      	add	r3, r2
 802859c:	009b      	lsls	r3, r3, #2
	    __result = std::__copy_move_backward_a1<_IsMove>(
 802859e:	441c      	add	r4, r3
 80285a0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80285a4:	6839      	ldr	r1, [r7, #0]
 80285a6:	4618      	mov	r0, r3
 80285a8:	f7fb fe4e 	bl	8024248 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80285ac:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80285b0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80285b4:	4622      	mov	r2, r4
 80285b6:	4629      	mov	r1, r5
 80285b8:	f000 f970 	bl	802889c <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>
 80285bc:	683b      	ldr	r3, [r7, #0]
 80285be:	461c      	mov	r4, r3
 80285c0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80285c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80285c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  for (typename _Iter::_Map_pointer __node = __last._M_node - 1;
 80285ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80285cc:	3b04      	subs	r3, #4
 80285ce:	677b      	str	r3, [r7, #116]	; 0x74
 80285d0:	e7d5      	b.n	802857e <_ZSt24__copy_move_backward_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_+0x54>
			__first._M_cur, __first._M_last, __result);
 80285d2:	68bb      	ldr	r3, [r7, #8]
 80285d4:	681c      	ldr	r4, [r3, #0]
 80285d6:	68bb      	ldr	r3, [r7, #8]
 80285d8:	689d      	ldr	r5, [r3, #8]
 80285da:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80285de:	6839      	ldr	r1, [r7, #0]
 80285e0:	4618      	mov	r0, r3
 80285e2:	f7fb fe31 	bl	8024248 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80285e6:	68f8      	ldr	r0, [r7, #12]
 80285e8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80285ec:	462a      	mov	r2, r5
 80285ee:	4621      	mov	r1, r4
 80285f0:	f000 f954 	bl	802889c <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>
    }
 80285f4:	e010      	b.n	8028618 <_ZSt24__copy_move_backward_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_+0xee>
		__first._M_cur, __last._M_cur, __result);
 80285f6:	68bb      	ldr	r3, [r7, #8]
 80285f8:	681c      	ldr	r4, [r3, #0]
 80285fa:	687b      	ldr	r3, [r7, #4]
 80285fc:	681d      	ldr	r5, [r3, #0]
 80285fe:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8028602:	6839      	ldr	r1, [r7, #0]
 8028604:	4618      	mov	r0, r3
 8028606:	f7fb fe1f 	bl	8024248 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802860a:	68f8      	ldr	r0, [r7, #12]
 802860c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8028610:	462a      	mov	r2, r5
 8028612:	4621      	mov	r1, r4
 8028614:	f000 f942 	bl	802889c <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>
    }
 8028618:	68f8      	ldr	r0, [r7, #12]
 802861a:	3778      	adds	r7, #120	; 0x78
 802861c:	46bd      	mov	sp, r7
 802861e:	bdb0      	pop	{r4, r5, r7, pc}

08028620 <_ZSt14__copy_move_a2ILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8028620:	b580      	push	{r7, lr}
 8028622:	b084      	sub	sp, #16
 8028624:	af00      	add	r7, sp, #0
 8028626:	60f8      	str	r0, [r7, #12]
 8028628:	60b9      	str	r1, [r7, #8]
 802862a:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 802862c:	687a      	ldr	r2, [r7, #4]
 802862e:	68b9      	ldr	r1, [r7, #8]
 8028630:	68f8      	ldr	r0, [r7, #12]
 8028632:	f000 f999 	bl	8028968 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN10BHYWrapper8BHYFrameEEEPT_PKS6_S9_S7_>
 8028636:	4603      	mov	r3, r0
    }
 8028638:	4618      	mov	r0, r3
 802863a:	3710      	adds	r7, #16
 802863c:	46bd      	mov	sp, r7
 802863e:	bd80      	pop	{r7, pc}

08028640 <_ZSt23__copy_move_backward_a2ILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 8028640:	b580      	push	{r7, lr}
 8028642:	b084      	sub	sp, #16
 8028644:	af00      	add	r7, sp, #0
 8028646:	60f8      	str	r0, [r7, #12]
 8028648:	60b9      	str	r1, [r7, #8]
 802864a:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 802864c:	687a      	ldr	r2, [r7, #4]
 802864e:	68b9      	ldr	r1, [r7, #8]
 8028650:	68f8      	ldr	r0, [r7, #12]
 8028652:	f000 f9a6 	bl	80289a2 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN10BHYWrapper8BHYFrameEEEPT_PKS6_S9_S7_>
 8028656:	4603      	mov	r3, r0
    }
 8028658:	4618      	mov	r0, r3
 802865a:	3710      	adds	r7, #16
 802865c:	46bd      	mov	sp, r7
 802865e:	bd80      	pop	{r7, pc}

08028660 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP7RequestEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8028660:	b580      	push	{r7, lr}
 8028662:	b086      	sub	sp, #24
 8028664:	af00      	add	r7, sp, #0
 8028666:	60f8      	str	r0, [r7, #12]
 8028668:	60b9      	str	r1, [r7, #8]
 802866a:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 802866c:	68ba      	ldr	r2, [r7, #8]
 802866e:	68fb      	ldr	r3, [r7, #12]
 8028670:	1ad3      	subs	r3, r2, r3
 8028672:	109b      	asrs	r3, r3, #2
 8028674:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8028676:	697b      	ldr	r3, [r7, #20]
 8028678:	2b00      	cmp	r3, #0
 802867a:	d006      	beq.n	802868a <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP7RequestEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 802867c:	697b      	ldr	r3, [r7, #20]
 802867e:	009b      	lsls	r3, r3, #2
 8028680:	461a      	mov	r2, r3
 8028682:	68f9      	ldr	r1, [r7, #12]
 8028684:	6878      	ldr	r0, [r7, #4]
 8028686:	f014 fc91 	bl	803cfac <memmove>
	  return __result + _Num;
 802868a:	697b      	ldr	r3, [r7, #20]
 802868c:	009b      	lsls	r3, r3, #2
 802868e:	687a      	ldr	r2, [r7, #4]
 8028690:	4413      	add	r3, r2
	}
 8028692:	4618      	mov	r0, r3
 8028694:	3718      	adds	r7, #24
 8028696:	46bd      	mov	sp, r7
 8028698:	bd80      	pop	{r7, pc}

0802869a <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIP7RequestEEPT_PKS5_S8_S6_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 802869a:	b580      	push	{r7, lr}
 802869c:	b086      	sub	sp, #24
 802869e:	af00      	add	r7, sp, #0
 80286a0:	60f8      	str	r0, [r7, #12]
 80286a2:	60b9      	str	r1, [r7, #8]
 80286a4:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80286a6:	68ba      	ldr	r2, [r7, #8]
 80286a8:	68fb      	ldr	r3, [r7, #12]
 80286aa:	1ad3      	subs	r3, r2, r3
 80286ac:	109b      	asrs	r3, r3, #2
 80286ae:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80286b0:	697b      	ldr	r3, [r7, #20]
 80286b2:	2b00      	cmp	r3, #0
 80286b4:	d00a      	beq.n	80286cc <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIP7RequestEEPT_PKS5_S8_S6_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 80286b6:	697b      	ldr	r3, [r7, #20]
 80286b8:	009b      	lsls	r3, r3, #2
 80286ba:	425b      	negs	r3, r3
 80286bc:	687a      	ldr	r2, [r7, #4]
 80286be:	18d0      	adds	r0, r2, r3
 80286c0:	697b      	ldr	r3, [r7, #20]
 80286c2:	009b      	lsls	r3, r3, #2
 80286c4:	461a      	mov	r2, r3
 80286c6:	68f9      	ldr	r1, [r7, #12]
 80286c8:	f014 fc70 	bl	803cfac <memmove>
	  return __result - _Num;
 80286cc:	697b      	ldr	r3, [r7, #20]
 80286ce:	009b      	lsls	r3, r3, #2
 80286d0:	425b      	negs	r3, r3
 80286d2:	687a      	ldr	r2, [r7, #4]
 80286d4:	4413      	add	r3, r2
	}
 80286d6:	4618      	mov	r0, r3
 80286d8:	3718      	adds	r7, #24
 80286da:	46bd      	mov	sp, r7
 80286dc:	bd80      	pop	{r7, pc}

080286de <_ZSt14__copy_move_a2ILb0EPP8ResponceS2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80286de:	b580      	push	{r7, lr}
 80286e0:	b084      	sub	sp, #16
 80286e2:	af00      	add	r7, sp, #0
 80286e4:	60f8      	str	r0, [r7, #12]
 80286e6:	60b9      	str	r1, [r7, #8]
 80286e8:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 80286ea:	687a      	ldr	r2, [r7, #4]
 80286ec:	68b9      	ldr	r1, [r7, #8]
 80286ee:	68f8      	ldr	r0, [r7, #12]
 80286f0:	f000 f979 	bl	80289e6 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP8ResponceEEPT_PKS5_S8_S6_>
 80286f4:	4603      	mov	r3, r0
    }
 80286f6:	4618      	mov	r0, r3
 80286f8:	3710      	adds	r7, #16
 80286fa:	46bd      	mov	sp, r7
 80286fc:	bd80      	pop	{r7, pc}

080286fe <_ZSt23__copy_move_backward_a2ILb0EPP8ResponceS2_ET1_T0_S4_S3_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 80286fe:	b580      	push	{r7, lr}
 8028700:	b084      	sub	sp, #16
 8028702:	af00      	add	r7, sp, #0
 8028704:	60f8      	str	r0, [r7, #12]
 8028706:	60b9      	str	r1, [r7, #8]
 8028708:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 802870a:	687a      	ldr	r2, [r7, #4]
 802870c:	68b9      	ldr	r1, [r7, #8]
 802870e:	68f8      	ldr	r0, [r7, #12]
 8028710:	f000 f986 	bl	8028a20 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIP8ResponceEEPT_PKS5_S8_S6_>
 8028714:	4603      	mov	r3, r0
    }
 8028716:	4618      	mov	r0, r3
 8028718:	3710      	adds	r7, #16
 802871a:	46bd      	mov	sp, r7
 802871c:	bd80      	pop	{r7, pc}

0802871e <_ZSt9__fill_a1IhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_>:
    __fill_a1(_Tp* __first, _Tp* __last, const _Tp& __c)
 802871e:	b580      	push	{r7, lr}
 8028720:	b086      	sub	sp, #24
 8028722:	af00      	add	r7, sp, #0
 8028724:	60f8      	str	r0, [r7, #12]
 8028726:	60b9      	str	r1, [r7, #8]
 8028728:	607a      	str	r2, [r7, #4]
      const _Tp __tmp = __c;
 802872a:	687b      	ldr	r3, [r7, #4]
 802872c:	781b      	ldrb	r3, [r3, #0]
 802872e:	75fb      	strb	r3, [r7, #23]
      if (const size_t __len = __last - __first)
 8028730:	68ba      	ldr	r2, [r7, #8]
 8028732:	68fb      	ldr	r3, [r7, #12]
 8028734:	1ad3      	subs	r3, r2, r3
 8028736:	613b      	str	r3, [r7, #16]
 8028738:	693b      	ldr	r3, [r7, #16]
 802873a:	2b00      	cmp	r3, #0
 802873c:	d005      	beq.n	802874a <_ZSt9__fill_a1IhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_+0x2c>
	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
 802873e:	7dfb      	ldrb	r3, [r7, #23]
 8028740:	693a      	ldr	r2, [r7, #16]
 8028742:	4619      	mov	r1, r3
 8028744:	68f8      	ldr	r0, [r7, #12]
 8028746:	f014 fc4b 	bl	803cfe0 <memset>
    }
 802874a:	bf00      	nop
 802874c:	3718      	adds	r7, #24
 802874e:	46bd      	mov	sp, r7
 8028750:	bd80      	pop	{r7, pc}

08028752 <_ZNKSt13move_iteratorIPhE4baseEv>:
      base() const
 8028752:	b480      	push	{r7}
 8028754:	b083      	sub	sp, #12
 8028756:	af00      	add	r7, sp, #0
 8028758:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 802875a:	687b      	ldr	r3, [r7, #4]
 802875c:	681b      	ldr	r3, [r3, #0]
 802875e:	4618      	mov	r0, r3
 8028760:	370c      	adds	r7, #12
 8028762:	46bd      	mov	sp, r7
 8028764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028768:	4770      	bx	lr

0802876a <_ZSt14__copy_move_a1ILb1EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 802876a:	b580      	push	{r7, lr}
 802876c:	b084      	sub	sp, #16
 802876e:	af00      	add	r7, sp, #0
 8028770:	60f8      	str	r0, [r7, #12]
 8028772:	60b9      	str	r1, [r7, #8]
 8028774:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8028776:	687a      	ldr	r2, [r7, #4]
 8028778:	68b9      	ldr	r1, [r7, #8]
 802877a:	68f8      	ldr	r0, [r7, #12]
 802877c:	f000 f972 	bl	8028a64 <_ZSt14__copy_move_a2ILb1EPhS0_ET1_T0_S2_S1_>
 8028780:	4603      	mov	r3, r0
 8028782:	4618      	mov	r0, r3
 8028784:	3710      	adds	r7, #16
 8028786:	46bd      	mov	sp, r7
 8028788:	bd80      	pop	{r7, pc}

0802878a <_ZSt4copyISt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS3_PS3_EES6_ET0_T_S9_S8_>:
    copy(_II __first, _II __last, _OI __result)
 802878a:	b580      	push	{r7, lr}
 802878c:	b098      	sub	sp, #96	; 0x60
 802878e:	af00      	add	r7, sp, #0
 8028790:	60f8      	str	r0, [r7, #12]
 8028792:	60b9      	str	r1, [r7, #8]
 8028794:	607a      	str	r2, [r7, #4]
 8028796:	603b      	str	r3, [r7, #0]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8028798:	f107 0320 	add.w	r3, r7, #32
 802879c:	68b9      	ldr	r1, [r7, #8]
 802879e:	4618      	mov	r0, r3
 80287a0:	f7ff fa03 	bl	8027baa <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ERKS6_>
 80287a4:	f107 0310 	add.w	r3, r7, #16
 80287a8:	f107 0220 	add.w	r2, r7, #32
 80287ac:	4611      	mov	r1, r2
 80287ae:	4618      	mov	r0, r3
 80287b0:	f000 f968 	bl	8028a84 <_ZSt12__miter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 80287b4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80287b8:	6879      	ldr	r1, [r7, #4]
 80287ba:	4618      	mov	r0, r3
 80287bc:	f7ff f9f5 	bl	8027baa <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ERKS6_>
 80287c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80287c4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80287c8:	4611      	mov	r1, r2
 80287ca:	4618      	mov	r0, r3
 80287cc:	f000 f95a 	bl	8028a84 <_ZSt12__miter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 80287d0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80287d4:	6839      	ldr	r1, [r7, #0]
 80287d6:	4618      	mov	r0, r3
 80287d8:	f7fb fd36 	bl	8024248 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80287dc:	68f8      	ldr	r0, [r7, #12]
 80287de:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80287e2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80287e6:	f107 0110 	add.w	r1, r7, #16
 80287ea:	f7ff fa21 	bl	8027c30 <_ZSt13__copy_move_aILb1ESt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_ET1_T0_S7_S6_>
    }
 80287ee:	68f8      	ldr	r0, [r7, #12]
 80287f0:	3760      	adds	r7, #96	; 0x60
 80287f2:	46bd      	mov	sp, r7
 80287f4:	bd80      	pop	{r7, pc}
	...

080287f8 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>:
    __copy_move_a1(_II __first, _II __last,
 80287f8:	b580      	push	{r7, lr}
 80287fa:	b088      	sub	sp, #32
 80287fc:	af00      	add	r7, sp, #0
 80287fe:	60f8      	str	r0, [r7, #12]
 8028800:	60b9      	str	r1, [r7, #8]
 8028802:	607a      	str	r2, [r7, #4]
 8028804:	603b      	str	r3, [r7, #0]
      difference_type __len = __last - __first;
 8028806:	687a      	ldr	r2, [r7, #4]
 8028808:	68bb      	ldr	r3, [r7, #8]
 802880a:	1ad3      	subs	r3, r2, r3
 802880c:	109b      	asrs	r3, r3, #2
 802880e:	4a22      	ldr	r2, [pc, #136]	; (8028898 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0xa0>)
 8028810:	fb02 f303 	mul.w	r3, r2, r3
 8028814:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 8028816:	697b      	ldr	r3, [r7, #20]
 8028818:	2b00      	cmp	r3, #0
 802881a:	dd34      	ble.n	8028886 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0x8e>
	    = std::min(__len, __result._M_last - __result._M_cur);
 802881c:	683b      	ldr	r3, [r7, #0]
 802881e:	689a      	ldr	r2, [r3, #8]
 8028820:	683b      	ldr	r3, [r7, #0]
 8028822:	681b      	ldr	r3, [r3, #0]
 8028824:	1ad3      	subs	r3, r2, r3
 8028826:	109b      	asrs	r3, r3, #2
 8028828:	4a1b      	ldr	r2, [pc, #108]	; (8028898 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0xa0>)
 802882a:	fb02 f303 	mul.w	r3, r2, r3
 802882e:	61bb      	str	r3, [r7, #24]
 8028830:	f107 0218 	add.w	r2, r7, #24
 8028834:	f107 0314 	add.w	r3, r7, #20
 8028838:	4611      	mov	r1, r2
 802883a:	4618      	mov	r0, r3
 802883c:	f7fe fb6c 	bl	8026f18 <_ZSt3minIiERKT_S2_S2_>
 8028840:	4603      	mov	r3, r0
	  const difference_type __clen
 8028842:	681b      	ldr	r3, [r3, #0]
 8028844:	61fb      	str	r3, [r7, #28]
	  std::__copy_move_a1<_IsMove>(__first, __first + __clen,
 8028846:	69fa      	ldr	r2, [r7, #28]
 8028848:	4613      	mov	r3, r2
 802884a:	009b      	lsls	r3, r3, #2
 802884c:	4413      	add	r3, r2
 802884e:	009b      	lsls	r3, r3, #2
 8028850:	461a      	mov	r2, r3
 8028852:	68bb      	ldr	r3, [r7, #8]
 8028854:	1899      	adds	r1, r3, r2
 8028856:	683b      	ldr	r3, [r7, #0]
 8028858:	681b      	ldr	r3, [r3, #0]
 802885a:	461a      	mov	r2, r3
 802885c:	68b8      	ldr	r0, [r7, #8]
 802885e:	f000 f927 	bl	8028ab0 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES2_ET1_T0_S4_S3_>
	  __first += __clen;
 8028862:	69fa      	ldr	r2, [r7, #28]
 8028864:	4613      	mov	r3, r2
 8028866:	009b      	lsls	r3, r3, #2
 8028868:	4413      	add	r3, r2
 802886a:	009b      	lsls	r3, r3, #2
 802886c:	461a      	mov	r2, r3
 802886e:	68bb      	ldr	r3, [r7, #8]
 8028870:	4413      	add	r3, r2
 8028872:	60bb      	str	r3, [r7, #8]
	  __result += __clen;
 8028874:	69f9      	ldr	r1, [r7, #28]
 8028876:	6838      	ldr	r0, [r7, #0]
 8028878:	f7fd fe58 	bl	802652c <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi>
	  __len -= __clen;
 802887c:	697a      	ldr	r2, [r7, #20]
 802887e:	69fb      	ldr	r3, [r7, #28]
 8028880:	1ad3      	subs	r3, r2, r3
 8028882:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 8028884:	e7c7      	b.n	8028816 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0x1e>
      return __result;
 8028886:	6839      	ldr	r1, [r7, #0]
 8028888:	68f8      	ldr	r0, [r7, #12]
 802888a:	f7fb fcdd 	bl	8024248 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
    }
 802888e:	68f8      	ldr	r0, [r7, #12]
 8028890:	3720      	adds	r7, #32
 8028892:	46bd      	mov	sp, r7
 8028894:	bd80      	pop	{r7, pc}
 8028896:	bf00      	nop
 8028898:	cccccccd 	.word	0xcccccccd

0802889c <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>:

  template<bool _IsMove, typename _II, typename _Tp>
    typename __gnu_cxx::__enable_if<
      __is_random_access_iter<_II>::__value,
      _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> >::__type
    __copy_move_backward_a1(_II __first, _II __last,
 802889c:	b580      	push	{r7, lr}
 802889e:	b088      	sub	sp, #32
 80288a0:	af00      	add	r7, sp, #0
 80288a2:	60f8      	str	r0, [r7, #12]
 80288a4:	60b9      	str	r1, [r7, #8]
 80288a6:	607a      	str	r2, [r7, #4]
 80288a8:	603b      	str	r3, [r7, #0]
		_GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> __result)
    {
      typedef _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> _Iter;
      typedef typename _Iter::difference_type difference_type;

      difference_type __len = __last - __first;
 80288aa:	687a      	ldr	r2, [r7, #4]
 80288ac:	68bb      	ldr	r3, [r7, #8]
 80288ae:	1ad3      	subs	r3, r2, r3
 80288b0:	109b      	asrs	r3, r3, #2
 80288b2:	4a2c      	ldr	r2, [pc, #176]	; (8028964 <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0xc8>)
 80288b4:	fb02 f303 	mul.w	r3, r2, r3
 80288b8:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 80288ba:	697b      	ldr	r3, [r7, #20]
 80288bc:	2b00      	cmp	r3, #0
 80288be:	dd49      	ble.n	8028954 <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0xb8>
	{
	  difference_type __rlen = __result._M_cur - __result._M_first;
 80288c0:	683b      	ldr	r3, [r7, #0]
 80288c2:	681a      	ldr	r2, [r3, #0]
 80288c4:	683b      	ldr	r3, [r7, #0]
 80288c6:	685b      	ldr	r3, [r3, #4]
 80288c8:	1ad3      	subs	r3, r2, r3
 80288ca:	109b      	asrs	r3, r3, #2
 80288cc:	4a25      	ldr	r2, [pc, #148]	; (8028964 <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0xc8>)
 80288ce:	fb02 f303 	mul.w	r3, r2, r3
 80288d2:	613b      	str	r3, [r7, #16]
	  _Tp* __rend = __result._M_cur;
 80288d4:	683b      	ldr	r3, [r7, #0]
 80288d6:	681b      	ldr	r3, [r3, #0]
 80288d8:	61fb      	str	r3, [r7, #28]
	  if (!__rlen)
 80288da:	693b      	ldr	r3, [r7, #16]
 80288dc:	2b00      	cmp	r3, #0
 80288de:	d10f      	bne.n	8028900 <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0x64>
	    {
	      __rlen = _Iter::_S_buffer_size();
 80288e0:	f7fc fc57 	bl	8025192 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 80288e4:	4603      	mov	r3, r0
 80288e6:	613b      	str	r3, [r7, #16]
	      __rend = *(__result._M_node - 1) + __rlen;
 80288e8:	683b      	ldr	r3, [r7, #0]
 80288ea:	68db      	ldr	r3, [r3, #12]
 80288ec:	3b04      	subs	r3, #4
 80288ee:	681a      	ldr	r2, [r3, #0]
 80288f0:	693b      	ldr	r3, [r7, #16]
 80288f2:	4619      	mov	r1, r3
 80288f4:	460b      	mov	r3, r1
 80288f6:	009b      	lsls	r3, r3, #2
 80288f8:	440b      	add	r3, r1
 80288fa:	009b      	lsls	r3, r3, #2
 80288fc:	4413      	add	r3, r2
 80288fe:	61fb      	str	r3, [r7, #28]
	    }

	  const difference_type __clen = std::min(__len, __rlen);
 8028900:	f107 0210 	add.w	r2, r7, #16
 8028904:	f107 0314 	add.w	r3, r7, #20
 8028908:	4611      	mov	r1, r2
 802890a:	4618      	mov	r0, r3
 802890c:	f7fe fb04 	bl	8026f18 <_ZSt3minIiERKT_S2_S2_>
 8028910:	4603      	mov	r3, r0
 8028912:	681b      	ldr	r3, [r3, #0]
 8028914:	61bb      	str	r3, [r7, #24]
	  std::__copy_move_backward_a1<_IsMove>(__last - __clen, __last, __rend);
 8028916:	69ba      	ldr	r2, [r7, #24]
 8028918:	4613      	mov	r3, r2
 802891a:	009b      	lsls	r3, r3, #2
 802891c:	4413      	add	r3, r2
 802891e:	009b      	lsls	r3, r3, #2
 8028920:	425b      	negs	r3, r3
 8028922:	687a      	ldr	r2, [r7, #4]
 8028924:	4413      	add	r3, r2
 8028926:	69fa      	ldr	r2, [r7, #28]
 8028928:	6879      	ldr	r1, [r7, #4]
 802892a:	4618      	mov	r0, r3
 802892c:	f000 f8d0 	bl	8028ad0 <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES2_ET1_T0_S4_S3_>

	  __last -= __clen;
 8028930:	69ba      	ldr	r2, [r7, #24]
 8028932:	4613      	mov	r3, r2
 8028934:	009b      	lsls	r3, r3, #2
 8028936:	4413      	add	r3, r2
 8028938:	009b      	lsls	r3, r3, #2
 802893a:	425b      	negs	r3, r3
 802893c:	687a      	ldr	r2, [r7, #4]
 802893e:	4413      	add	r3, r2
 8028940:	607b      	str	r3, [r7, #4]
	  __result -= __clen;
 8028942:	69b9      	ldr	r1, [r7, #24]
 8028944:	6838      	ldr	r0, [r7, #0]
 8028946:	f7ff f8d4 	bl	8027af2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EmIEi>
	  __len -= __clen;
 802894a:	697a      	ldr	r2, [r7, #20]
 802894c:	69bb      	ldr	r3, [r7, #24]
 802894e:	1ad3      	subs	r3, r2, r3
 8028950:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 8028952:	e7b2      	b.n	80288ba <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0x1e>
	}

      return __result;
 8028954:	6839      	ldr	r1, [r7, #0]
 8028956:	68f8      	ldr	r0, [r7, #12]
 8028958:	f7fb fc76 	bl	8024248 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
    }
 802895c:	68f8      	ldr	r0, [r7, #12]
 802895e:	3720      	adds	r7, #32
 8028960:	46bd      	mov	sp, r7
 8028962:	bd80      	pop	{r7, pc}
 8028964:	cccccccd 	.word	0xcccccccd

08028968 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN10BHYWrapper8BHYFrameEEEPT_PKS6_S9_S7_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8028968:	b580      	push	{r7, lr}
 802896a:	b086      	sub	sp, #24
 802896c:	af00      	add	r7, sp, #0
 802896e:	60f8      	str	r0, [r7, #12]
 8028970:	60b9      	str	r1, [r7, #8]
 8028972:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8028974:	68ba      	ldr	r2, [r7, #8]
 8028976:	68fb      	ldr	r3, [r7, #12]
 8028978:	1ad3      	subs	r3, r2, r3
 802897a:	109b      	asrs	r3, r3, #2
 802897c:	617b      	str	r3, [r7, #20]
	  if (_Num)
 802897e:	697b      	ldr	r3, [r7, #20]
 8028980:	2b00      	cmp	r3, #0
 8028982:	d006      	beq.n	8028992 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN10BHYWrapper8BHYFrameEEEPT_PKS6_S9_S7_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8028984:	697b      	ldr	r3, [r7, #20]
 8028986:	009b      	lsls	r3, r3, #2
 8028988:	461a      	mov	r2, r3
 802898a:	68f9      	ldr	r1, [r7, #12]
 802898c:	6878      	ldr	r0, [r7, #4]
 802898e:	f014 fb0d 	bl	803cfac <memmove>
	  return __result + _Num;
 8028992:	697b      	ldr	r3, [r7, #20]
 8028994:	009b      	lsls	r3, r3, #2
 8028996:	687a      	ldr	r2, [r7, #4]
 8028998:	4413      	add	r3, r2
	}
 802899a:	4618      	mov	r0, r3
 802899c:	3718      	adds	r7, #24
 802899e:	46bd      	mov	sp, r7
 80289a0:	bd80      	pop	{r7, pc}

080289a2 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN10BHYWrapper8BHYFrameEEEPT_PKS6_S9_S7_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80289a2:	b580      	push	{r7, lr}
 80289a4:	b086      	sub	sp, #24
 80289a6:	af00      	add	r7, sp, #0
 80289a8:	60f8      	str	r0, [r7, #12]
 80289aa:	60b9      	str	r1, [r7, #8]
 80289ac:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80289ae:	68ba      	ldr	r2, [r7, #8]
 80289b0:	68fb      	ldr	r3, [r7, #12]
 80289b2:	1ad3      	subs	r3, r2, r3
 80289b4:	109b      	asrs	r3, r3, #2
 80289b6:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80289b8:	697b      	ldr	r3, [r7, #20]
 80289ba:	2b00      	cmp	r3, #0
 80289bc:	d00a      	beq.n	80289d4 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN10BHYWrapper8BHYFrameEEEPT_PKS6_S9_S7_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 80289be:	697b      	ldr	r3, [r7, #20]
 80289c0:	009b      	lsls	r3, r3, #2
 80289c2:	425b      	negs	r3, r3
 80289c4:	687a      	ldr	r2, [r7, #4]
 80289c6:	18d0      	adds	r0, r2, r3
 80289c8:	697b      	ldr	r3, [r7, #20]
 80289ca:	009b      	lsls	r3, r3, #2
 80289cc:	461a      	mov	r2, r3
 80289ce:	68f9      	ldr	r1, [r7, #12]
 80289d0:	f014 faec 	bl	803cfac <memmove>
	  return __result - _Num;
 80289d4:	697b      	ldr	r3, [r7, #20]
 80289d6:	009b      	lsls	r3, r3, #2
 80289d8:	425b      	negs	r3, r3
 80289da:	687a      	ldr	r2, [r7, #4]
 80289dc:	4413      	add	r3, r2
	}
 80289de:	4618      	mov	r0, r3
 80289e0:	3718      	adds	r7, #24
 80289e2:	46bd      	mov	sp, r7
 80289e4:	bd80      	pop	{r7, pc}

080289e6 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP8ResponceEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80289e6:	b580      	push	{r7, lr}
 80289e8:	b086      	sub	sp, #24
 80289ea:	af00      	add	r7, sp, #0
 80289ec:	60f8      	str	r0, [r7, #12]
 80289ee:	60b9      	str	r1, [r7, #8]
 80289f0:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80289f2:	68ba      	ldr	r2, [r7, #8]
 80289f4:	68fb      	ldr	r3, [r7, #12]
 80289f6:	1ad3      	subs	r3, r2, r3
 80289f8:	109b      	asrs	r3, r3, #2
 80289fa:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80289fc:	697b      	ldr	r3, [r7, #20]
 80289fe:	2b00      	cmp	r3, #0
 8028a00:	d006      	beq.n	8028a10 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP8ResponceEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8028a02:	697b      	ldr	r3, [r7, #20]
 8028a04:	009b      	lsls	r3, r3, #2
 8028a06:	461a      	mov	r2, r3
 8028a08:	68f9      	ldr	r1, [r7, #12]
 8028a0a:	6878      	ldr	r0, [r7, #4]
 8028a0c:	f014 face 	bl	803cfac <memmove>
	  return __result + _Num;
 8028a10:	697b      	ldr	r3, [r7, #20]
 8028a12:	009b      	lsls	r3, r3, #2
 8028a14:	687a      	ldr	r2, [r7, #4]
 8028a16:	4413      	add	r3, r2
	}
 8028a18:	4618      	mov	r0, r3
 8028a1a:	3718      	adds	r7, #24
 8028a1c:	46bd      	mov	sp, r7
 8028a1e:	bd80      	pop	{r7, pc}

08028a20 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIP8ResponceEEPT_PKS5_S8_S6_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8028a20:	b580      	push	{r7, lr}
 8028a22:	b086      	sub	sp, #24
 8028a24:	af00      	add	r7, sp, #0
 8028a26:	60f8      	str	r0, [r7, #12]
 8028a28:	60b9      	str	r1, [r7, #8]
 8028a2a:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8028a2c:	68ba      	ldr	r2, [r7, #8]
 8028a2e:	68fb      	ldr	r3, [r7, #12]
 8028a30:	1ad3      	subs	r3, r2, r3
 8028a32:	109b      	asrs	r3, r3, #2
 8028a34:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8028a36:	697b      	ldr	r3, [r7, #20]
 8028a38:	2b00      	cmp	r3, #0
 8028a3a:	d00a      	beq.n	8028a52 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIP8ResponceEEPT_PKS5_S8_S6_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8028a3c:	697b      	ldr	r3, [r7, #20]
 8028a3e:	009b      	lsls	r3, r3, #2
 8028a40:	425b      	negs	r3, r3
 8028a42:	687a      	ldr	r2, [r7, #4]
 8028a44:	18d0      	adds	r0, r2, r3
 8028a46:	697b      	ldr	r3, [r7, #20]
 8028a48:	009b      	lsls	r3, r3, #2
 8028a4a:	461a      	mov	r2, r3
 8028a4c:	68f9      	ldr	r1, [r7, #12]
 8028a4e:	f014 faad 	bl	803cfac <memmove>
	  return __result - _Num;
 8028a52:	697b      	ldr	r3, [r7, #20]
 8028a54:	009b      	lsls	r3, r3, #2
 8028a56:	425b      	negs	r3, r3
 8028a58:	687a      	ldr	r2, [r7, #4]
 8028a5a:	4413      	add	r3, r2
	}
 8028a5c:	4618      	mov	r0, r3
 8028a5e:	3718      	adds	r7, #24
 8028a60:	46bd      	mov	sp, r7
 8028a62:	bd80      	pop	{r7, pc}

08028a64 <_ZSt14__copy_move_a2ILb1EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8028a64:	b580      	push	{r7, lr}
 8028a66:	b084      	sub	sp, #16
 8028a68:	af00      	add	r7, sp, #0
 8028a6a:	60f8      	str	r0, [r7, #12]
 8028a6c:	60b9      	str	r1, [r7, #8]
 8028a6e:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8028a70:	687a      	ldr	r2, [r7, #4]
 8028a72:	68b9      	ldr	r1, [r7, #8]
 8028a74:	68f8      	ldr	r0, [r7, #12]
 8028a76:	f000 f83b 	bl	8028af0 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8028a7a:	4603      	mov	r3, r0
    }
 8028a7c:	4618      	mov	r0, r3
 8028a7e:	3710      	adds	r7, #16
 8028a80:	46bd      	mov	sp, r7
 8028a82:	bd80      	pop	{r7, pc}

08028a84 <_ZSt12__miter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
    __miter_base(move_iterator<_Iterator> __it)
 8028a84:	b580      	push	{r7, lr}
 8028a86:	b086      	sub	sp, #24
 8028a88:	af00      	add	r7, sp, #0
 8028a8a:	6078      	str	r0, [r7, #4]
 8028a8c:	6039      	str	r1, [r7, #0]
    { return __miter_base(__it.base()); }
 8028a8e:	f107 0308 	add.w	r3, r7, #8
 8028a92:	6839      	ldr	r1, [r7, #0]
 8028a94:	4618      	mov	r0, r3
 8028a96:	f000 f845 	bl	8028b24 <_ZNKSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EE4baseEv>
 8028a9a:	687b      	ldr	r3, [r7, #4]
 8028a9c:	f107 0208 	add.w	r2, r7, #8
 8028aa0:	4611      	mov	r1, r2
 8028aa2:	4618      	mov	r0, r3
 8028aa4:	f7ff f8b7 	bl	8027c16 <_ZSt12__miter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 8028aa8:	6878      	ldr	r0, [r7, #4]
 8028aaa:	3718      	adds	r7, #24
 8028aac:	46bd      	mov	sp, r7
 8028aae:	bd80      	pop	{r7, pc}

08028ab0 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES2_ET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8028ab0:	b580      	push	{r7, lr}
 8028ab2:	b084      	sub	sp, #16
 8028ab4:	af00      	add	r7, sp, #0
 8028ab6:	60f8      	str	r0, [r7, #12]
 8028ab8:	60b9      	str	r1, [r7, #8]
 8028aba:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8028abc:	687a      	ldr	r2, [r7, #4]
 8028abe:	68b9      	ldr	r1, [r7, #8]
 8028ac0:	68f8      	ldr	r0, [r7, #12]
 8028ac2:	f000 f83d 	bl	8028b40 <_ZSt14__copy_move_a2ILb1EPN10BHYWrapper8BHYFrameES2_ET1_T0_S4_S3_>
 8028ac6:	4603      	mov	r3, r0
 8028ac8:	4618      	mov	r0, r3
 8028aca:	3710      	adds	r7, #16
 8028acc:	46bd      	mov	sp, r7
 8028ace:	bd80      	pop	{r7, pc}

08028ad0 <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES2_ET1_T0_S4_S3_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 8028ad0:	b580      	push	{r7, lr}
 8028ad2:	b084      	sub	sp, #16
 8028ad4:	af00      	add	r7, sp, #0
 8028ad6:	60f8      	str	r0, [r7, #12]
 8028ad8:	60b9      	str	r1, [r7, #8]
 8028ada:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 8028adc:	687a      	ldr	r2, [r7, #4]
 8028ade:	68b9      	ldr	r1, [r7, #8]
 8028ae0:	68f8      	ldr	r0, [r7, #12]
 8028ae2:	f000 f83d 	bl	8028b60 <_ZSt23__copy_move_backward_a2ILb1EPN10BHYWrapper8BHYFrameES2_ET1_T0_S4_S3_>
 8028ae6:	4603      	mov	r3, r0
 8028ae8:	4618      	mov	r0, r3
 8028aea:	3710      	adds	r7, #16
 8028aec:	46bd      	mov	sp, r7
 8028aee:	bd80      	pop	{r7, pc}

08028af0 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8028af0:	b580      	push	{r7, lr}
 8028af2:	b086      	sub	sp, #24
 8028af4:	af00      	add	r7, sp, #0
 8028af6:	60f8      	str	r0, [r7, #12]
 8028af8:	60b9      	str	r1, [r7, #8]
 8028afa:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8028afc:	68ba      	ldr	r2, [r7, #8]
 8028afe:	68fb      	ldr	r3, [r7, #12]
 8028b00:	1ad3      	subs	r3, r2, r3
 8028b02:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8028b04:	697b      	ldr	r3, [r7, #20]
 8028b06:	2b00      	cmp	r3, #0
 8028b08:	d005      	beq.n	8028b16 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_+0x26>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8028b0a:	697b      	ldr	r3, [r7, #20]
 8028b0c:	461a      	mov	r2, r3
 8028b0e:	68f9      	ldr	r1, [r7, #12]
 8028b10:	6878      	ldr	r0, [r7, #4]
 8028b12:	f014 fa4b 	bl	803cfac <memmove>
	  return __result + _Num;
 8028b16:	697b      	ldr	r3, [r7, #20]
 8028b18:	687a      	ldr	r2, [r7, #4]
 8028b1a:	4413      	add	r3, r2
	}
 8028b1c:	4618      	mov	r0, r3
 8028b1e:	3718      	adds	r7, #24
 8028b20:	46bd      	mov	sp, r7
 8028b22:	bd80      	pop	{r7, pc}

08028b24 <_ZNKSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EE4baseEv>:
      base() const
 8028b24:	b580      	push	{r7, lr}
 8028b26:	b082      	sub	sp, #8
 8028b28:	af00      	add	r7, sp, #0
 8028b2a:	6078      	str	r0, [r7, #4]
 8028b2c:	6039      	str	r1, [r7, #0]
      { return _M_current; }
 8028b2e:	683b      	ldr	r3, [r7, #0]
 8028b30:	4619      	mov	r1, r3
 8028b32:	6878      	ldr	r0, [r7, #4]
 8028b34:	f7fb fb88 	bl	8024248 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8028b38:	6878      	ldr	r0, [r7, #4]
 8028b3a:	3708      	adds	r7, #8
 8028b3c:	46bd      	mov	sp, r7
 8028b3e:	bd80      	pop	{r7, pc}

08028b40 <_ZSt14__copy_move_a2ILb1EPN10BHYWrapper8BHYFrameES2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8028b40:	b580      	push	{r7, lr}
 8028b42:	b084      	sub	sp, #16
 8028b44:	af00      	add	r7, sp, #0
 8028b46:	60f8      	str	r0, [r7, #12]
 8028b48:	60b9      	str	r1, [r7, #8]
 8028b4a:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8028b4c:	687a      	ldr	r2, [r7, #4]
 8028b4e:	68b9      	ldr	r1, [r7, #8]
 8028b50:	68f8      	ldr	r0, [r7, #12]
 8028b52:	f000 f815 	bl	8028b80 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_>
 8028b56:	4603      	mov	r3, r0
    }
 8028b58:	4618      	mov	r0, r3
 8028b5a:	3710      	adds	r7, #16
 8028b5c:	46bd      	mov	sp, r7
 8028b5e:	bd80      	pop	{r7, pc}

08028b60 <_ZSt23__copy_move_backward_a2ILb1EPN10BHYWrapper8BHYFrameES2_ET1_T0_S4_S3_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 8028b60:	b580      	push	{r7, lr}
 8028b62:	b084      	sub	sp, #16
 8028b64:	af00      	add	r7, sp, #0
 8028b66:	60f8      	str	r0, [r7, #12]
 8028b68:	60b9      	str	r1, [r7, #8]
 8028b6a:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 8028b6c:	687a      	ldr	r2, [r7, #4]
 8028b6e:	68b9      	ldr	r1, [r7, #8]
 8028b70:	68f8      	ldr	r0, [r7, #12]
 8028b72:	f000 f82f 	bl	8028bd4 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_>
 8028b76:	4603      	mov	r3, r0
    }
 8028b78:	4618      	mov	r0, r3
 8028b7a:	3710      	adds	r7, #16
 8028b7c:	46bd      	mov	sp, r7
 8028b7e:	bd80      	pop	{r7, pc}

08028b80 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8028b80:	b580      	push	{r7, lr}
 8028b82:	b086      	sub	sp, #24
 8028b84:	af00      	add	r7, sp, #0
 8028b86:	60f8      	str	r0, [r7, #12]
 8028b88:	60b9      	str	r1, [r7, #8]
 8028b8a:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8028b8c:	68ba      	ldr	r2, [r7, #8]
 8028b8e:	68fb      	ldr	r3, [r7, #12]
 8028b90:	1ad3      	subs	r3, r2, r3
 8028b92:	109b      	asrs	r3, r3, #2
 8028b94:	4a0e      	ldr	r2, [pc, #56]	; (8028bd0 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_+0x50>)
 8028b96:	fb02 f303 	mul.w	r3, r2, r3
 8028b9a:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8028b9c:	697b      	ldr	r3, [r7, #20]
 8028b9e:	2b00      	cmp	r3, #0
 8028ba0:	d009      	beq.n	8028bb6 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_+0x36>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8028ba2:	697a      	ldr	r2, [r7, #20]
 8028ba4:	4613      	mov	r3, r2
 8028ba6:	009b      	lsls	r3, r3, #2
 8028ba8:	4413      	add	r3, r2
 8028baa:	009b      	lsls	r3, r3, #2
 8028bac:	461a      	mov	r2, r3
 8028bae:	68f9      	ldr	r1, [r7, #12]
 8028bb0:	6878      	ldr	r0, [r7, #4]
 8028bb2:	f014 f9fb 	bl	803cfac <memmove>
	  return __result + _Num;
 8028bb6:	697a      	ldr	r2, [r7, #20]
 8028bb8:	4613      	mov	r3, r2
 8028bba:	009b      	lsls	r3, r3, #2
 8028bbc:	4413      	add	r3, r2
 8028bbe:	009b      	lsls	r3, r3, #2
 8028bc0:	461a      	mov	r2, r3
 8028bc2:	687b      	ldr	r3, [r7, #4]
 8028bc4:	4413      	add	r3, r2
	}
 8028bc6:	4618      	mov	r0, r3
 8028bc8:	3718      	adds	r7, #24
 8028bca:	46bd      	mov	sp, r7
 8028bcc:	bd80      	pop	{r7, pc}
 8028bce:	bf00      	nop
 8028bd0:	cccccccd 	.word	0xcccccccd

08028bd4 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8028bd4:	b580      	push	{r7, lr}
 8028bd6:	b086      	sub	sp, #24
 8028bd8:	af00      	add	r7, sp, #0
 8028bda:	60f8      	str	r0, [r7, #12]
 8028bdc:	60b9      	str	r1, [r7, #8]
 8028bde:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8028be0:	68ba      	ldr	r2, [r7, #8]
 8028be2:	68fb      	ldr	r3, [r7, #12]
 8028be4:	1ad3      	subs	r3, r2, r3
 8028be6:	109b      	asrs	r3, r3, #2
 8028be8:	4a11      	ldr	r2, [pc, #68]	; (8028c30 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_+0x5c>)
 8028bea:	fb02 f303 	mul.w	r3, r2, r3
 8028bee:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8028bf0:	697b      	ldr	r3, [r7, #20]
 8028bf2:	2b00      	cmp	r3, #0
 8028bf4:	d010      	beq.n	8028c18 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_+0x44>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8028bf6:	697a      	ldr	r2, [r7, #20]
 8028bf8:	4613      	mov	r3, r2
 8028bfa:	009b      	lsls	r3, r3, #2
 8028bfc:	4413      	add	r3, r2
 8028bfe:	009b      	lsls	r3, r3, #2
 8028c00:	425b      	negs	r3, r3
 8028c02:	687a      	ldr	r2, [r7, #4]
 8028c04:	18d0      	adds	r0, r2, r3
 8028c06:	697a      	ldr	r2, [r7, #20]
 8028c08:	4613      	mov	r3, r2
 8028c0a:	009b      	lsls	r3, r3, #2
 8028c0c:	4413      	add	r3, r2
 8028c0e:	009b      	lsls	r3, r3, #2
 8028c10:	461a      	mov	r2, r3
 8028c12:	68f9      	ldr	r1, [r7, #12]
 8028c14:	f014 f9ca 	bl	803cfac <memmove>
	  return __result - _Num;
 8028c18:	697a      	ldr	r2, [r7, #20]
 8028c1a:	4613      	mov	r3, r2
 8028c1c:	009b      	lsls	r3, r3, #2
 8028c1e:	4413      	add	r3, r2
 8028c20:	009b      	lsls	r3, r3, #2
 8028c22:	425b      	negs	r3, r3
 8028c24:	687a      	ldr	r2, [r7, #4]
 8028c26:	4413      	add	r3, r2
	}
 8028c28:	4618      	mov	r0, r3
 8028c2a:	3718      	adds	r7, #24
 8028c2c:	46bd      	mov	sp, r7
 8028c2e:	bd80      	pop	{r7, pc}
 8028c30:	cccccccd 	.word	0xcccccccd

08028c34 <_Z41__static_initialization_and_destruction_0ii>:
 8028c34:	b580      	push	{r7, lr}
 8028c36:	b082      	sub	sp, #8
 8028c38:	af00      	add	r7, sp, #0
 8028c3a:	6078      	str	r0, [r7, #4]
 8028c3c:	6039      	str	r1, [r7, #0]
 8028c3e:	687b      	ldr	r3, [r7, #4]
 8028c40:	2b01      	cmp	r3, #1
 8028c42:	d107      	bne.n	8028c54 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8028c44:	683b      	ldr	r3, [r7, #0]
 8028c46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8028c4a:	4293      	cmp	r3, r2
 8028c4c:	d102      	bne.n	8028c54 <_Z41__static_initialization_and_destruction_0ii+0x20>
static MotherboardContext mbctx;
 8028c4e:	4809      	ldr	r0, [pc, #36]	; (8028c74 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8028c50:	f7f9 fb3c 	bl	80222cc <_ZN18MotherboardContextC1Ev>
 8028c54:	687b      	ldr	r3, [r7, #4]
 8028c56:	2b00      	cmp	r3, #0
 8028c58:	d107      	bne.n	8028c6a <_Z41__static_initialization_and_destruction_0ii+0x36>
 8028c5a:	683b      	ldr	r3, [r7, #0]
 8028c5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8028c60:	4293      	cmp	r3, r2
 8028c62:	d102      	bne.n	8028c6a <_Z41__static_initialization_and_destruction_0ii+0x36>
 8028c64:	4803      	ldr	r0, [pc, #12]	; (8028c74 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8028c66:	f7f9 fb5b 	bl	8022320 <_ZN18MotherboardContextD1Ev>
}
 8028c6a:	bf00      	nop
 8028c6c:	3708      	adds	r7, #8
 8028c6e:	46bd      	mov	sp, r7
 8028c70:	bd80      	pop	{r7, pc}
 8028c72:	bf00      	nop
 8028c74:	240001d0 	.word	0x240001d0

08028c78 <_GLOBAL__sub_I_MotherboardInit>:
 8028c78:	b580      	push	{r7, lr}
 8028c7a:	af00      	add	r7, sp, #0
 8028c7c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8028c80:	2001      	movs	r0, #1
 8028c82:	f7ff ffd7 	bl	8028c34 <_Z41__static_initialization_and_destruction_0ii>
 8028c86:	bd80      	pop	{r7, pc}

08028c88 <_GLOBAL__sub_D_MotherboardInit>:
 8028c88:	b580      	push	{r7, lr}
 8028c8a:	af00      	add	r7, sp, #0
 8028c8c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8028c90:	2000      	movs	r0, #0
 8028c92:	f7ff ffcf 	bl	8028c34 <_Z41__static_initialization_and_destruction_0ii>
 8028c96:	bd80      	pop	{r7, pc}

08028c98 <bhy2_get_regs>:
static int8_t get_callback_info(uint8_t sensor_id,
                                struct bhy2_fifo_parse_callback_table *info,
                                const struct bhy2_dev *dev);

int8_t bhy2_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t length, struct bhy2_dev *dev)
{
 8028c98:	b580      	push	{r7, lr}
 8028c9a:	b086      	sub	sp, #24
 8028c9c:	af00      	add	r7, sp, #0
 8028c9e:	60b9      	str	r1, [r7, #8]
 8028ca0:	607b      	str	r3, [r7, #4]
 8028ca2:	4603      	mov	r3, r0
 8028ca4:	73fb      	strb	r3, [r7, #15]
 8028ca6:	4613      	mov	r3, r2
 8028ca8:	81bb      	strh	r3, [r7, #12]
    int8_t rslt = BHY2_OK;
 8028caa:	2300      	movs	r3, #0
 8028cac:	75fb      	strb	r3, [r7, #23]

    if (dev != NULL)
 8028cae:	687b      	ldr	r3, [r7, #4]
 8028cb0:	2b00      	cmp	r3, #0
 8028cb2:	d008      	beq.n	8028cc6 <bhy2_get_regs+0x2e>
    {
        rslt = bhy2_hif_get_regs(reg_addr, reg_data, length, &dev->hif);
 8028cb4:	89ba      	ldrh	r2, [r7, #12]
 8028cb6:	687b      	ldr	r3, [r7, #4]
 8028cb8:	7bf8      	ldrb	r0, [r7, #15]
 8028cba:	68b9      	ldr	r1, [r7, #8]
 8028cbc:	f001 f925 	bl	8029f0a <bhy2_hif_get_regs>
 8028cc0:	4603      	mov	r3, r0
 8028cc2:	75fb      	strb	r3, [r7, #23]
 8028cc4:	e001      	b.n	8028cca <bhy2_get_regs+0x32>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8028cc6:	23ff      	movs	r3, #255	; 0xff
 8028cc8:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8028cca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8028cce:	4618      	mov	r0, r3
 8028cd0:	3718      	adds	r7, #24
 8028cd2:	46bd      	mov	sp, r7
 8028cd4:	bd80      	pop	{r7, pc}

08028cd6 <bhy2_get_and_process_fifo>:

    return rslt;
}

int8_t bhy2_get_and_process_fifo(uint8_t *work_buffer, uint32_t buffer_size, struct bhy2_dev *dev)
{
 8028cd6:	b590      	push	{r4, r7, lr}
 8028cd8:	b08f      	sub	sp, #60	; 0x3c
 8028cda:	af02      	add	r7, sp, #8
 8028cdc:	60f8      	str	r0, [r7, #12]
 8028cde:	60b9      	str	r1, [r7, #8]
 8028ce0:	607a      	str	r2, [r7, #4]
    uint8_t int_status, int_status_bak;
    uint32_t bytes_read = 0;
 8028ce2:	2300      	movs	r3, #0
 8028ce4:	62bb      	str	r3, [r7, #40]	; 0x28
    int8_t rslt;
    struct bhy2_fifo_buffer fifos;

    if ((dev == NULL) || (work_buffer == NULL))
 8028ce6:	687b      	ldr	r3, [r7, #4]
 8028ce8:	2b00      	cmp	r3, #0
 8028cea:	d002      	beq.n	8028cf2 <bhy2_get_and_process_fifo+0x1c>
 8028cec:	68fb      	ldr	r3, [r7, #12]
 8028cee:	2b00      	cmp	r3, #0
 8028cf0:	d102      	bne.n	8028cf8 <bhy2_get_and_process_fifo+0x22>
    {
        return BHY2_E_NULL_PTR;
 8028cf2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8028cf6:	e11b      	b.n	8028f30 <bhy2_get_and_process_fifo+0x25a>
    }

    if (buffer_size == 0)
 8028cf8:	68bb      	ldr	r3, [r7, #8]
 8028cfa:	2b00      	cmp	r3, #0
 8028cfc:	d102      	bne.n	8028d04 <bhy2_get_and_process_fifo+0x2e>
    {
        return BHY2_E_BUFFER;
 8028cfe:	f06f 0305 	mvn.w	r3, #5
 8028d02:	e115      	b.n	8028f30 <bhy2_get_and_process_fifo+0x25a>
    }

    memset(work_buffer, 0, buffer_size);
 8028d04:	68ba      	ldr	r2, [r7, #8]
 8028d06:	2100      	movs	r1, #0
 8028d08:	68f8      	ldr	r0, [r7, #12]
 8028d0a:	f014 f969 	bl	803cfe0 <memset>
    memset(&fifos, 0, sizeof(struct bhy2_fifo_buffer));
 8028d0e:	f107 0314 	add.w	r3, r7, #20
 8028d12:	2214      	movs	r2, #20
 8028d14:	2100      	movs	r1, #0
 8028d16:	4618      	mov	r0, r3
 8028d18:	f014 f962 	bl	803cfe0 <memset>

    fifos.buffer = work_buffer;
 8028d1c:	68fb      	ldr	r3, [r7, #12]
 8028d1e:	627b      	str	r3, [r7, #36]	; 0x24
    fifos.buffer_size = buffer_size;
 8028d20:	68bb      	ldr	r3, [r7, #8]
 8028d22:	623b      	str	r3, [r7, #32]

    rslt = bhy2_hif_get_interrupt_status(&int_status_bak, &dev->hif);
 8028d24:	687a      	ldr	r2, [r7, #4]
 8028d26:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 8028d2a:	4611      	mov	r1, r2
 8028d2c:	4618      	mov	r0, r3
 8028d2e:	f001 fa5f 	bl	802a1f0 <bhy2_hif_get_interrupt_status>
 8028d32:	4603      	mov	r3, r0
 8028d34:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    if (rslt != BHY2_OK)
 8028d38:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8028d3c:	2b00      	cmp	r3, #0
 8028d3e:	d002      	beq.n	8028d46 <bhy2_get_and_process_fifo+0x70>
    {
        return rslt;
 8028d40:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8028d44:	e0f4      	b.n	8028f30 <bhy2_get_and_process_fifo+0x25a>
    }

    /* Get and process the Wake up FIFO */
    fifos.read_length = 0;
 8028d46:	2300      	movs	r3, #0
 8028d48:	61bb      	str	r3, [r7, #24]
    int_status = int_status_bak;
 8028d4a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8028d4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 8028d52:	e042      	b.n	8028dda <bhy2_get_and_process_fifo+0x104>
    {
        if (((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_DRDY) ||
 8028d54:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8028d58:	f003 0306 	and.w	r3, r3, #6
 8028d5c:	2b02      	cmp	r3, #2
 8028d5e:	d00e      	beq.n	8028d7e <bhy2_get_and_process_fifo+0xa8>
            ((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_LTCY) ||
 8028d60:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8028d64:	f003 0306 	and.w	r3, r3, #6
        if (((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_DRDY) ||
 8028d68:	2b04      	cmp	r3, #4
 8028d6a:	d008      	beq.n	8028d7e <bhy2_get_and_process_fifo+0xa8>
            ((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_WM) || (fifos.remain_length))
 8028d6c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8028d70:	f003 0306 	and.w	r3, r3, #6
            ((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_LTCY) ||
 8028d74:	2b06      	cmp	r3, #6
 8028d76:	d002      	beq.n	8028d7e <bhy2_get_and_process_fifo+0xa8>
            ((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_WM) || (fifos.remain_length))
 8028d78:	69fb      	ldr	r3, [r7, #28]
 8028d7a:	2b00      	cmp	r3, #0
 8028d7c:	d020      	beq.n	8028dc0 <bhy2_get_and_process_fifo+0xea>
        {
            /* Reset read_pos to the start of the buffer */
            fifos.read_pos = 0;
 8028d7e:	2300      	movs	r3, #0
 8028d80:	617b      	str	r3, [r7, #20]

            /* Append data into the work_buffer linked through fifos */
            rslt = bhy2_hif_get_wakeup_fifo(&fifos.buffer[fifos.read_length],
 8028d82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8028d84:	69bb      	ldr	r3, [r7, #24]
 8028d86:	18d0      	adds	r0, r2, r3
                                            (fifos.buffer_size - fifos.read_length),
 8028d88:	6a3a      	ldr	r2, [r7, #32]
 8028d8a:	69bb      	ldr	r3, [r7, #24]
            rslt = bhy2_hif_get_wakeup_fifo(&fifos.buffer[fifos.read_length],
 8028d8c:	1ad1      	subs	r1, r2, r3
 8028d8e:	687b      	ldr	r3, [r7, #4]
 8028d90:	f107 0214 	add.w	r2, r7, #20
 8028d94:	f102 0408 	add.w	r4, r2, #8
 8028d98:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8028d9c:	9300      	str	r3, [sp, #0]
 8028d9e:	4623      	mov	r3, r4
 8028da0:	f001 fad7 	bl	802a352 <bhy2_hif_get_wakeup_fifo>
 8028da4:	4603      	mov	r3, r0
 8028da6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                                            &bytes_read,
                                            &fifos.remain_length,
                                            &dev->hif);
            if (rslt != BHY2_OK)
 8028daa:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8028dae:	2b00      	cmp	r3, #0
 8028db0:	d002      	beq.n	8028db8 <bhy2_get_and_process_fifo+0xe2>
            {
                return rslt;
 8028db2:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8028db6:	e0bb      	b.n	8028f30 <bhy2_get_and_process_fifo+0x25a>
            }
            fifos.read_length += bytes_read;
 8028db8:	69ba      	ldr	r2, [r7, #24]
 8028dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028dbc:	4413      	add	r3, r2
 8028dbe:	61bb      	str	r3, [r7, #24]
        }

        rslt = parse_fifo(BHY2_FIFO_TYPE_WAKEUP, &fifos, dev);
 8028dc0:	f107 0314 	add.w	r3, r7, #20
 8028dc4:	687a      	ldr	r2, [r7, #4]
 8028dc6:	4619      	mov	r1, r3
 8028dc8:	2000      	movs	r0, #0
 8028dca:	f000 fbad 	bl	8029528 <parse_fifo>
 8028dce:	4603      	mov	r3, r0
 8028dd0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        int_status = 0;
 8028dd4:	2300      	movs	r3, #0
 8028dd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 8028dda:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8028dde:	2b00      	cmp	r3, #0
 8028de0:	d102      	bne.n	8028de8 <bhy2_get_and_process_fifo+0x112>
 8028de2:	69fb      	ldr	r3, [r7, #28]
 8028de4:	2b00      	cmp	r3, #0
 8028de6:	d003      	beq.n	8028df0 <bhy2_get_and_process_fifo+0x11a>
 8028de8:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8028dec:	2b00      	cmp	r3, #0
 8028dee:	d0b1      	beq.n	8028d54 <bhy2_get_and_process_fifo+0x7e>
    }

    /* Get and process the Non Wake-up FIFO */
    fifos.read_length = 0;
 8028df0:	2300      	movs	r3, #0
 8028df2:	61bb      	str	r3, [r7, #24]
    int_status = int_status_bak;
 8028df4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8028df8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 8028dfc:	e042      	b.n	8028e84 <bhy2_get_and_process_fifo+0x1ae>
    {
        if (((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_DRDY) ||
 8028dfe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8028e02:	f003 0318 	and.w	r3, r3, #24
 8028e06:	2b08      	cmp	r3, #8
 8028e08:	d00e      	beq.n	8028e28 <bhy2_get_and_process_fifo+0x152>
            ((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_LTCY) ||
 8028e0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8028e0e:	f003 0318 	and.w	r3, r3, #24
        if (((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_DRDY) ||
 8028e12:	2b10      	cmp	r3, #16
 8028e14:	d008      	beq.n	8028e28 <bhy2_get_and_process_fifo+0x152>
            ((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_WM) || (fifos.remain_length))
 8028e16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8028e1a:	f003 0318 	and.w	r3, r3, #24
            ((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_LTCY) ||
 8028e1e:	2b18      	cmp	r3, #24
 8028e20:	d002      	beq.n	8028e28 <bhy2_get_and_process_fifo+0x152>
            ((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_WM) || (fifos.remain_length))
 8028e22:	69fb      	ldr	r3, [r7, #28]
 8028e24:	2b00      	cmp	r3, #0
 8028e26:	d020      	beq.n	8028e6a <bhy2_get_and_process_fifo+0x194>
        {
            /* Reset read_pos to the start of the buffer */
            fifos.read_pos = 0;
 8028e28:	2300      	movs	r3, #0
 8028e2a:	617b      	str	r3, [r7, #20]

            /* Append data into the work_buffer linked through fifos */
            rslt = bhy2_hif_get_nonwakeup_fifo(&fifos.buffer[fifos.read_length],
 8028e2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8028e2e:	69bb      	ldr	r3, [r7, #24]
 8028e30:	18d0      	adds	r0, r2, r3
                                               (fifos.buffer_size - fifos.read_length),
 8028e32:	6a3a      	ldr	r2, [r7, #32]
 8028e34:	69bb      	ldr	r3, [r7, #24]
            rslt = bhy2_hif_get_nonwakeup_fifo(&fifos.buffer[fifos.read_length],
 8028e36:	1ad1      	subs	r1, r2, r3
 8028e38:	687b      	ldr	r3, [r7, #4]
 8028e3a:	f107 0214 	add.w	r2, r7, #20
 8028e3e:	f102 0408 	add.w	r4, r2, #8
 8028e42:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8028e46:	9300      	str	r3, [sp, #0]
 8028e48:	4623      	mov	r3, r4
 8028e4a:	f001 fa98 	bl	802a37e <bhy2_hif_get_nonwakeup_fifo>
 8028e4e:	4603      	mov	r3, r0
 8028e50:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                                               &bytes_read,
                                               &fifos.remain_length,
                                               &dev->hif);
            if (rslt != BHY2_OK)
 8028e54:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8028e58:	2b00      	cmp	r3, #0
 8028e5a:	d002      	beq.n	8028e62 <bhy2_get_and_process_fifo+0x18c>
            {
                return rslt;
 8028e5c:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8028e60:	e066      	b.n	8028f30 <bhy2_get_and_process_fifo+0x25a>
            }
            fifos.read_length += bytes_read;
 8028e62:	69ba      	ldr	r2, [r7, #24]
 8028e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028e66:	4413      	add	r3, r2
 8028e68:	61bb      	str	r3, [r7, #24]
        }

        rslt = parse_fifo(BHY2_FIFO_TYPE_NON_WAKEUP, &fifos, dev);
 8028e6a:	f107 0314 	add.w	r3, r7, #20
 8028e6e:	687a      	ldr	r2, [r7, #4]
 8028e70:	4619      	mov	r1, r3
 8028e72:	2001      	movs	r0, #1
 8028e74:	f000 fb58 	bl	8029528 <parse_fifo>
 8028e78:	4603      	mov	r3, r0
 8028e7a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        int_status = 0;
 8028e7e:	2300      	movs	r3, #0
 8028e80:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 8028e84:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8028e88:	2b00      	cmp	r3, #0
 8028e8a:	d102      	bne.n	8028e92 <bhy2_get_and_process_fifo+0x1bc>
 8028e8c:	69fb      	ldr	r3, [r7, #28]
 8028e8e:	2b00      	cmp	r3, #0
 8028e90:	d003      	beq.n	8028e9a <bhy2_get_and_process_fifo+0x1c4>
 8028e92:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8028e96:	2b00      	cmp	r3, #0
 8028e98:	d0b1      	beq.n	8028dfe <bhy2_get_and_process_fifo+0x128>
    }

    /* Get and process the Status fifo */
    fifos.read_length = 0;
 8028e9a:	2300      	movs	r3, #0
 8028e9c:	61bb      	str	r3, [r7, #24]
    int_status = int_status_bak;
 8028e9e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8028ea2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 8028ea6:	e036      	b.n	8028f16 <bhy2_get_and_process_fifo+0x240>
    {
        if ((((BHY2_IS_INT_ASYNC_STATUS(int_status)) == BHY2_IST_MASK_DEBUG) || (fifos.remain_length)))
 8028ea8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8028eac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8028eb0:	2b00      	cmp	r3, #0
 8028eb2:	d102      	bne.n	8028eba <bhy2_get_and_process_fifo+0x1e4>
 8028eb4:	69fb      	ldr	r3, [r7, #28]
 8028eb6:	2b00      	cmp	r3, #0
 8028eb8:	d020      	beq.n	8028efc <bhy2_get_and_process_fifo+0x226>
        {
            fifos.read_pos = 0;
 8028eba:	2300      	movs	r3, #0
 8028ebc:	617b      	str	r3, [r7, #20]
            rslt =
                bhy2_hif_get_status_fifo_async(&fifos.buffer[fifos.read_length],
 8028ebe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8028ec0:	69bb      	ldr	r3, [r7, #24]
 8028ec2:	18d0      	adds	r0, r2, r3
                                               (fifos.buffer_size - fifos.read_length),
 8028ec4:	6a3a      	ldr	r2, [r7, #32]
 8028ec6:	69bb      	ldr	r3, [r7, #24]
                bhy2_hif_get_status_fifo_async(&fifos.buffer[fifos.read_length],
 8028ec8:	1ad1      	subs	r1, r2, r3
 8028eca:	687b      	ldr	r3, [r7, #4]
 8028ecc:	f107 0214 	add.w	r2, r7, #20
 8028ed0:	f102 0408 	add.w	r4, r2, #8
 8028ed4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8028ed8:	9300      	str	r3, [sp, #0]
 8028eda:	4623      	mov	r3, r4
 8028edc:	f001 fab0 	bl	802a440 <bhy2_hif_get_status_fifo_async>
 8028ee0:	4603      	mov	r3, r0
 8028ee2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                                               &bytes_read,
                                               &fifos.remain_length,
                                               &dev->hif);
            if (rslt != BHY2_OK)
 8028ee6:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8028eea:	2b00      	cmp	r3, #0
 8028eec:	d002      	beq.n	8028ef4 <bhy2_get_and_process_fifo+0x21e>
            {
                return rslt;
 8028eee:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8028ef2:	e01d      	b.n	8028f30 <bhy2_get_and_process_fifo+0x25a>
            }
            fifos.read_length += bytes_read;
 8028ef4:	69ba      	ldr	r2, [r7, #24]
 8028ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028ef8:	4413      	add	r3, r2
 8028efa:	61bb      	str	r3, [r7, #24]
        }

        rslt = parse_fifo(BHY2_FIFO_TYPE_STATUS, &fifos, dev);
 8028efc:	f107 0314 	add.w	r3, r7, #20
 8028f00:	687a      	ldr	r2, [r7, #4]
 8028f02:	4619      	mov	r1, r3
 8028f04:	2002      	movs	r0, #2
 8028f06:	f000 fb0f 	bl	8029528 <parse_fifo>
 8028f0a:	4603      	mov	r3, r0
 8028f0c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        int_status = 0;
 8028f10:	2300      	movs	r3, #0
 8028f12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 8028f16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8028f1a:	2b00      	cmp	r3, #0
 8028f1c:	d102      	bne.n	8028f24 <bhy2_get_and_process_fifo+0x24e>
 8028f1e:	69fb      	ldr	r3, [r7, #28]
 8028f20:	2b00      	cmp	r3, #0
 8028f22:	d003      	beq.n	8028f2c <bhy2_get_and_process_fifo+0x256>
 8028f24:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8028f28:	2b00      	cmp	r3, #0
 8028f2a:	d0bd      	beq.n	8028ea8 <bhy2_get_and_process_fifo+0x1d2>
    }

    return rslt;
 8028f2c:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
}
 8028f30:	4618      	mov	r0, r3
 8028f32:	3734      	adds	r7, #52	; 0x34
 8028f34:	46bd      	mov	sp, r7
 8028f36:	bd90      	pop	{r4, r7, pc}

08028f38 <bhy2_set_virt_sensor_cfg>:

    return rslt;
}

int8_t bhy2_set_virt_sensor_cfg(uint8_t sensor_id, bhy2_float sample_rate, uint32_t latency, struct bhy2_dev *dev)
{
 8028f38:	b580      	push	{r7, lr}
 8028f3a:	b086      	sub	sp, #24
 8028f3c:	af00      	add	r7, sp, #0
 8028f3e:	4603      	mov	r3, r0
 8028f40:	ed87 0a02 	vstr	s0, [r7, #8]
 8028f44:	6079      	str	r1, [r7, #4]
 8028f46:	603a      	str	r2, [r7, #0]
 8028f48:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8028f4a:	2300      	movs	r3, #0
 8028f4c:	75fb      	strb	r3, [r7, #23]

    if (dev != NULL)
 8028f4e:	683b      	ldr	r3, [r7, #0]
 8028f50:	2b00      	cmp	r3, #0
 8028f52:	d00a      	beq.n	8028f6a <bhy2_set_virt_sensor_cfg+0x32>
    {
        rslt = bhy2_hif_exec_sensor_conf_cmd(sensor_id, sample_rate, latency, &dev->hif);
 8028f54:	683a      	ldr	r2, [r7, #0]
 8028f56:	7bfb      	ldrb	r3, [r7, #15]
 8028f58:	6879      	ldr	r1, [r7, #4]
 8028f5a:	ed97 0a02 	vldr	s0, [r7, #8]
 8028f5e:	4618      	mov	r0, r3
 8028f60:	f001 fa84 	bl	802a46c <bhy2_hif_exec_sensor_conf_cmd>
 8028f64:	4603      	mov	r3, r0
 8028f66:	75fb      	strb	r3, [r7, #23]
 8028f68:	e001      	b.n	8028f6e <bhy2_set_virt_sensor_cfg+0x36>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8028f6a:	23ff      	movs	r3, #255	; 0xff
 8028f6c:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8028f6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8028f72:	4618      	mov	r0, r3
 8028f74:	3718      	adds	r7, #24
 8028f76:	46bd      	mov	sp, r7
 8028f78:	bd80      	pop	{r7, pc}

08028f7a <bhy2_get_product_id>:

    return rslt;
}

int8_t bhy2_get_product_id(uint8_t *product_id, struct bhy2_dev *dev)
{
 8028f7a:	b580      	push	{r7, lr}
 8028f7c:	b084      	sub	sp, #16
 8028f7e:	af00      	add	r7, sp, #0
 8028f80:	6078      	str	r0, [r7, #4]
 8028f82:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8028f84:	2300      	movs	r3, #0
 8028f86:	73fb      	strb	r3, [r7, #15]

    if (dev != NULL)
 8028f88:	683b      	ldr	r3, [r7, #0]
 8028f8a:	2b00      	cmp	r3, #0
 8028f8c:	d007      	beq.n	8028f9e <bhy2_get_product_id+0x24>
    {
        rslt = bhy2_hif_get_product_id(product_id, &dev->hif);
 8028f8e:	683b      	ldr	r3, [r7, #0]
 8028f90:	4619      	mov	r1, r3
 8028f92:	6878      	ldr	r0, [r7, #4]
 8028f94:	f001 f8e8 	bl	802a168 <bhy2_hif_get_product_id>
 8028f98:	4603      	mov	r3, r0
 8028f9a:	73fb      	strb	r3, [r7, #15]
 8028f9c:	e001      	b.n	8028fa2 <bhy2_get_product_id+0x28>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8028f9e:	23ff      	movs	r3, #255	; 0xff
 8028fa0:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8028fa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8028fa6:	4618      	mov	r0, r3
 8028fa8:	3710      	adds	r7, #16
 8028faa:	46bd      	mov	sp, r7
 8028fac:	bd80      	pop	{r7, pc}

08028fae <bhy2_get_kernel_version>:

    return rslt;
}

int8_t bhy2_get_kernel_version(uint16_t *kernel_version, struct bhy2_dev *dev)
{
 8028fae:	b580      	push	{r7, lr}
 8028fb0:	b084      	sub	sp, #16
 8028fb2:	af00      	add	r7, sp, #0
 8028fb4:	6078      	str	r0, [r7, #4]
 8028fb6:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8028fb8:	2300      	movs	r3, #0
 8028fba:	73fb      	strb	r3, [r7, #15]

    if (dev != NULL)
 8028fbc:	683b      	ldr	r3, [r7, #0]
 8028fbe:	2b00      	cmp	r3, #0
 8028fc0:	d007      	beq.n	8028fd2 <bhy2_get_kernel_version+0x24>
    {
        rslt = bhy2_hif_get_kernel_version(kernel_version, &dev->hif);
 8028fc2:	683b      	ldr	r3, [r7, #0]
 8028fc4:	4619      	mov	r1, r3
 8028fc6:	6878      	ldr	r0, [r7, #4]
 8028fc8:	f001 f8de 	bl	802a188 <bhy2_hif_get_kernel_version>
 8028fcc:	4603      	mov	r3, r0
 8028fce:	73fb      	strb	r3, [r7, #15]
 8028fd0:	e001      	b.n	8028fd6 <bhy2_get_kernel_version+0x28>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8028fd2:	23ff      	movs	r3, #255	; 0xff
 8028fd4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8028fd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8028fda:	4618      	mov	r0, r3
 8028fdc:	3710      	adds	r7, #16
 8028fde:	46bd      	mov	sp, r7
 8028fe0:	bd80      	pop	{r7, pc}

08028fe2 <bhy2_get_boot_status>:

    return rslt;
}

int8_t bhy2_get_boot_status(uint8_t *boot_status, struct bhy2_dev *dev)
{
 8028fe2:	b580      	push	{r7, lr}
 8028fe4:	b084      	sub	sp, #16
 8028fe6:	af00      	add	r7, sp, #0
 8028fe8:	6078      	str	r0, [r7, #4]
 8028fea:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8028fec:	2300      	movs	r3, #0
 8028fee:	73fb      	strb	r3, [r7, #15]

    if (dev != NULL)
 8028ff0:	683b      	ldr	r3, [r7, #0]
 8028ff2:	2b00      	cmp	r3, #0
 8028ff4:	d007      	beq.n	8029006 <bhy2_get_boot_status+0x24>
    {
        rslt = bhy2_hif_get_boot_status(boot_status, &dev->hif);
 8028ff6:	683b      	ldr	r3, [r7, #0]
 8028ff8:	4619      	mov	r1, r3
 8028ffa:	6878      	ldr	r0, [r7, #4]
 8028ffc:	f001 f8e8 	bl	802a1d0 <bhy2_hif_get_boot_status>
 8029000:	4603      	mov	r3, r0
 8029002:	73fb      	strb	r3, [r7, #15]
 8029004:	e001      	b.n	802900a <bhy2_get_boot_status+0x28>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8029006:	23ff      	movs	r3, #255	; 0xff
 8029008:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 802900a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 802900e:	4618      	mov	r0, r3
 8029010:	3710      	adds	r7, #16
 8029012:	46bd      	mov	sp, r7
 8029014:	bd80      	pop	{r7, pc}

08029016 <bhy2_get_virt_sensor_list>:

    return rslt;
}

int8_t bhy2_get_virt_sensor_list(uint8_t *sensor_list, struct bhy2_dev *dev)
{
 8029016:	b580      	push	{r7, lr}
 8029018:	b086      	sub	sp, #24
 802901a:	af02      	add	r7, sp, #8
 802901c:	6078      	str	r0, [r7, #4]
 802901e:	6039      	str	r1, [r7, #0]
    uint32_t bytes_read = 0;
 8029020:	2300      	movs	r3, #0
 8029022:	60bb      	str	r3, [r7, #8]
    int8_t rslt = 0;
 8029024:	2300      	movs	r3, #0
 8029026:	73fb      	strb	r3, [r7, #15]

    if (dev != NULL)
 8029028:	683b      	ldr	r3, [r7, #0]
 802902a:	2b00      	cmp	r3, #0
 802902c:	d00d      	beq.n	802904a <bhy2_get_virt_sensor_list+0x34>
    {
        rslt = bhy2_hif_get_parameter(BHY2_PARAM_SYS_VIRT_SENSOR_PRESENT, sensor_list, 32, &bytes_read, &dev->hif);
 802902e:	683b      	ldr	r3, [r7, #0]
 8029030:	f107 0208 	add.w	r2, r7, #8
 8029034:	9300      	str	r3, [sp, #0]
 8029036:	4613      	mov	r3, r2
 8029038:	2220      	movs	r2, #32
 802903a:	6879      	ldr	r1, [r7, #4]
 802903c:	f240 101f 	movw	r0, #287	; 0x11f
 8029040:	f001 f80a 	bl	802a058 <bhy2_hif_get_parameter>
 8029044:	4603      	mov	r3, r0
 8029046:	73fb      	strb	r3, [r7, #15]
 8029048:	e001      	b.n	802904e <bhy2_get_virt_sensor_list+0x38>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 802904a:	23ff      	movs	r3, #255	; 0xff
 802904c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 802904e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8029052:	4618      	mov	r0, r3
 8029054:	3710      	adds	r7, #16
 8029056:	46bd      	mov	sp, r7
 8029058:	bd80      	pop	{r7, pc}

0802905a <bhy2_upload_firmware_to_ram>:

int8_t bhy2_upload_firmware_to_ram(const uint8_t *firmware, uint32_t length, struct bhy2_dev *dev)
{
 802905a:	b580      	push	{r7, lr}
 802905c:	b086      	sub	sp, #24
 802905e:	af00      	add	r7, sp, #0
 8029060:	60f8      	str	r0, [r7, #12]
 8029062:	60b9      	str	r1, [r7, #8]
 8029064:	607a      	str	r2, [r7, #4]
    int8_t rslt = BHY2_OK;
 8029066:	2300      	movs	r3, #0
 8029068:	75fb      	strb	r3, [r7, #23]

    if ((dev == NULL) || (firmware == NULL))
 802906a:	687b      	ldr	r3, [r7, #4]
 802906c:	2b00      	cmp	r3, #0
 802906e:	d002      	beq.n	8029076 <bhy2_upload_firmware_to_ram+0x1c>
 8029070:	68fb      	ldr	r3, [r7, #12]
 8029072:	2b00      	cmp	r3, #0
 8029074:	d102      	bne.n	802907c <bhy2_upload_firmware_to_ram+0x22>
    {
        rslt = BHY2_E_NULL_PTR;
 8029076:	23ff      	movs	r3, #255	; 0xff
 8029078:	75fb      	strb	r3, [r7, #23]
 802907a:	e007      	b.n	802908c <bhy2_upload_firmware_to_ram+0x32>
    }
    else
    {
        rslt = bhy2_hif_upload_firmware_to_ram(firmware, length, &dev->hif);
 802907c:	687b      	ldr	r3, [r7, #4]
 802907e:	461a      	mov	r2, r3
 8029080:	68b9      	ldr	r1, [r7, #8]
 8029082:	68f8      	ldr	r0, [r7, #12]
 8029084:	f001 f90d 	bl	802a2a2 <bhy2_hif_upload_firmware_to_ram>
 8029088:	4603      	mov	r3, r0
 802908a:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 802908c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8029090:	4618      	mov	r0, r3
 8029092:	3718      	adds	r7, #24
 8029094:	46bd      	mov	sp, r7
 8029096:	bd80      	pop	{r7, pc}

08029098 <bhy2_boot_from_ram>:

    return rslt;
}

int8_t bhy2_boot_from_ram(struct bhy2_dev *dev)
{
 8029098:	b580      	push	{r7, lr}
 802909a:	b084      	sub	sp, #16
 802909c:	af00      	add	r7, sp, #0
 802909e:	6078      	str	r0, [r7, #4]
    int8_t rslt = BHY2_OK;
 80290a0:	2300      	movs	r3, #0
 80290a2:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 80290a4:	687b      	ldr	r3, [r7, #4]
 80290a6:	2b00      	cmp	r3, #0
 80290a8:	d102      	bne.n	80290b0 <bhy2_boot_from_ram+0x18>
    {
        rslt = BHY2_E_NULL_PTR;
 80290aa:	23ff      	movs	r3, #255	; 0xff
 80290ac:	73fb      	strb	r3, [r7, #15]
 80290ae:	e005      	b.n	80290bc <bhy2_boot_from_ram+0x24>
    }
    else
    {
        rslt = bhy2_hif_boot_program_ram(&dev->hif);
 80290b0:	687b      	ldr	r3, [r7, #4]
 80290b2:	4618      	mov	r0, r3
 80290b4:	f001 f932 	bl	802a31c <bhy2_hif_boot_program_ram>
 80290b8:	4603      	mov	r3, r0
 80290ba:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80290bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80290c0:	4618      	mov	r0, r3
 80290c2:	3710      	adds	r7, #16
 80290c4:	46bd      	mov	sp, r7
 80290c6:	bd80      	pop	{r7, pc}

080290c8 <bhy2_set_host_interrupt_ctrl>:

    return rslt;
}

int8_t bhy2_set_host_interrupt_ctrl(uint8_t hintr_ctrl, struct bhy2_dev *dev)
{
 80290c8:	b580      	push	{r7, lr}
 80290ca:	b084      	sub	sp, #16
 80290cc:	af00      	add	r7, sp, #0
 80290ce:	4603      	mov	r3, r0
 80290d0:	6039      	str	r1, [r7, #0]
 80290d2:	71fb      	strb	r3, [r7, #7]
    int8_t rslt = BHY2_OK;
 80290d4:	2300      	movs	r3, #0
 80290d6:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 80290d8:	683b      	ldr	r3, [r7, #0]
 80290da:	2b00      	cmp	r3, #0
 80290dc:	d102      	bne.n	80290e4 <bhy2_set_host_interrupt_ctrl+0x1c>
    {
        rslt = BHY2_E_NULL_PTR;
 80290de:	23ff      	movs	r3, #255	; 0xff
 80290e0:	73fb      	strb	r3, [r7, #15]
 80290e2:	e007      	b.n	80290f4 <bhy2_set_host_interrupt_ctrl+0x2c>
    }
    else
    {
        rslt = bhy2_hif_set_regs(BHY2_REG_HOST_INTERRUPT_CTRL, &hintr_ctrl, 1, &dev->hif);
 80290e4:	683b      	ldr	r3, [r7, #0]
 80290e6:	1df9      	adds	r1, r7, #7
 80290e8:	2201      	movs	r2, #1
 80290ea:	2007      	movs	r0, #7
 80290ec:	f000 ff45 	bl	8029f7a <bhy2_hif_set_regs>
 80290f0:	4603      	mov	r3, r0
 80290f2:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80290f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80290f8:	4618      	mov	r0, r3
 80290fa:	3710      	adds	r7, #16
 80290fc:	46bd      	mov	sp, r7
 80290fe:	bd80      	pop	{r7, pc}

08029100 <bhy2_get_host_interrupt_ctrl>:

int8_t bhy2_get_host_interrupt_ctrl(uint8_t *hintr_ctrl, struct bhy2_dev *dev)
{
 8029100:	b580      	push	{r7, lr}
 8029102:	b084      	sub	sp, #16
 8029104:	af00      	add	r7, sp, #0
 8029106:	6078      	str	r0, [r7, #4]
 8029108:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 802910a:	2300      	movs	r3, #0
 802910c:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 802910e:	683b      	ldr	r3, [r7, #0]
 8029110:	2b00      	cmp	r3, #0
 8029112:	d102      	bne.n	802911a <bhy2_get_host_interrupt_ctrl+0x1a>
    {
        rslt = BHY2_E_NULL_PTR;
 8029114:	23ff      	movs	r3, #255	; 0xff
 8029116:	73fb      	strb	r3, [r7, #15]
 8029118:	e007      	b.n	802912a <bhy2_get_host_interrupt_ctrl+0x2a>
    }
    else
    {
        rslt = bhy2_hif_get_regs(BHY2_REG_HOST_INTERRUPT_CTRL, hintr_ctrl, 1, &dev->hif);
 802911a:	683b      	ldr	r3, [r7, #0]
 802911c:	2201      	movs	r2, #1
 802911e:	6879      	ldr	r1, [r7, #4]
 8029120:	2007      	movs	r0, #7
 8029122:	f000 fef2 	bl	8029f0a <bhy2_hif_get_regs>
 8029126:	4603      	mov	r3, r0
 8029128:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 802912a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 802912e:	4618      	mov	r0, r3
 8029130:	3710      	adds	r7, #16
 8029132:	46bd      	mov	sp, r7
 8029134:	bd80      	pop	{r7, pc}

08029136 <bhy2_get_interrupt_status>:

int8_t bhy2_get_interrupt_status(uint8_t *int_status, struct bhy2_dev *dev)
{
 8029136:	b580      	push	{r7, lr}
 8029138:	b084      	sub	sp, #16
 802913a:	af00      	add	r7, sp, #0
 802913c:	6078      	str	r0, [r7, #4]
 802913e:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8029140:	2300      	movs	r3, #0
 8029142:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 8029144:	683b      	ldr	r3, [r7, #0]
 8029146:	2b00      	cmp	r3, #0
 8029148:	d102      	bne.n	8029150 <bhy2_get_interrupt_status+0x1a>
    {
        rslt = BHY2_E_NULL_PTR;
 802914a:	23ff      	movs	r3, #255	; 0xff
 802914c:	73fb      	strb	r3, [r7, #15]
 802914e:	e006      	b.n	802915e <bhy2_get_interrupt_status+0x28>
    }
    else
    {
        rslt = bhy2_hif_get_interrupt_status(int_status, &dev->hif);
 8029150:	683b      	ldr	r3, [r7, #0]
 8029152:	4619      	mov	r1, r3
 8029154:	6878      	ldr	r0, [r7, #4]
 8029156:	f001 f84b 	bl	802a1f0 <bhy2_hif_get_interrupt_status>
 802915a:	4603      	mov	r3, r0
 802915c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 802915e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8029162:	4618      	mov	r0, r3
 8029164:	3710      	adds	r7, #16
 8029166:	46bd      	mov	sp, r7
 8029168:	bd80      	pop	{r7, pc}

0802916a <bhy2_set_host_intf_ctrl>:

int8_t bhy2_set_host_intf_ctrl(uint8_t hintf_ctrl, struct bhy2_dev *dev)
{
 802916a:	b580      	push	{r7, lr}
 802916c:	b084      	sub	sp, #16
 802916e:	af00      	add	r7, sp, #0
 8029170:	4603      	mov	r3, r0
 8029172:	6039      	str	r1, [r7, #0]
 8029174:	71fb      	strb	r3, [r7, #7]
    int8_t rslt = BHY2_OK;
 8029176:	2300      	movs	r3, #0
 8029178:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 802917a:	683b      	ldr	r3, [r7, #0]
 802917c:	2b00      	cmp	r3, #0
 802917e:	d102      	bne.n	8029186 <bhy2_set_host_intf_ctrl+0x1c>
    {
        rslt = BHY2_E_NULL_PTR;
 8029180:	23ff      	movs	r3, #255	; 0xff
 8029182:	73fb      	strb	r3, [r7, #15]
 8029184:	e007      	b.n	8029196 <bhy2_set_host_intf_ctrl+0x2c>
    }
    else
    {
        rslt = bhy2_hif_set_regs(BHY2_REG_HOST_INTERFACE_CTRL, &hintf_ctrl, 1, &dev->hif);
 8029186:	683b      	ldr	r3, [r7, #0]
 8029188:	1df9      	adds	r1, r7, #7
 802918a:	2201      	movs	r2, #1
 802918c:	2006      	movs	r0, #6
 802918e:	f000 fef4 	bl	8029f7a <bhy2_hif_set_regs>
 8029192:	4603      	mov	r3, r0
 8029194:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8029196:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 802919a:	4618      	mov	r0, r3
 802919c:	3710      	adds	r7, #16
 802919e:	46bd      	mov	sp, r7
 80291a0:	bd80      	pop	{r7, pc}

080291a2 <bhy2_soft_reset>:

    return rslt;
}

int8_t bhy2_soft_reset(struct bhy2_dev *dev)
{
 80291a2:	b580      	push	{r7, lr}
 80291a4:	b084      	sub	sp, #16
 80291a6:	af00      	add	r7, sp, #0
 80291a8:	6078      	str	r0, [r7, #4]
    int8_t rslt = BHY2_OK;
 80291aa:	2300      	movs	r3, #0
 80291ac:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 80291ae:	687b      	ldr	r3, [r7, #4]
 80291b0:	2b00      	cmp	r3, #0
 80291b2:	d102      	bne.n	80291ba <bhy2_soft_reset+0x18>
    {
        rslt = BHY2_E_NULL_PTR;
 80291b4:	23ff      	movs	r3, #255	; 0xff
 80291b6:	73fb      	strb	r3, [r7, #15]
 80291b8:	e005      	b.n	80291c6 <bhy2_soft_reset+0x24>
    }
    else
    {
        rslt = bhy2_hif_reset(&dev->hif);
 80291ba:	687b      	ldr	r3, [r7, #4]
 80291bc:	4618      	mov	r0, r3
 80291be:	f001 f827 	bl	802a210 <bhy2_hif_reset>
 80291c2:	4603      	mov	r3, r0
 80291c4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80291c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80291ca:	4618      	mov	r0, r3
 80291cc:	3710      	adds	r7, #16
 80291ce:	46bd      	mov	sp, r7
 80291d0:	bd80      	pop	{r7, pc}

080291d2 <bhy2_init>:
                 bhy2_write_fptr_t write,
                 bhy2_delay_us_fptr_t delay_us,
                 uint32_t read_write_len,
                 void *intf_ptr,
                 struct bhy2_dev *dev)
{
 80291d2:	b580      	push	{r7, lr}
 80291d4:	b08a      	sub	sp, #40	; 0x28
 80291d6:	af04      	add	r7, sp, #16
 80291d8:	60b9      	str	r1, [r7, #8]
 80291da:	607a      	str	r2, [r7, #4]
 80291dc:	603b      	str	r3, [r7, #0]
 80291de:	4603      	mov	r3, r0
 80291e0:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 80291e2:	2300      	movs	r3, #0
 80291e4:	75fb      	strb	r3, [r7, #23]

    if (dev != NULL)
 80291e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80291e8:	2b00      	cmp	r3, #0
 80291ea:	d014      	beq.n	8029216 <bhy2_init+0x44>
    {
        memset(dev, 0, sizeof(struct bhy2_dev));
 80291ec:	f640 1238 	movw	r2, #2360	; 0x938
 80291f0:	2100      	movs	r1, #0
 80291f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80291f4:	f013 fef4 	bl	803cfe0 <memset>

        rslt = bhy2_hif_init(intf, read, write, delay_us, read_write_len, intf_ptr, &dev->hif);
 80291f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80291fa:	7bf8      	ldrb	r0, [r7, #15]
 80291fc:	9302      	str	r3, [sp, #8]
 80291fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029200:	9301      	str	r3, [sp, #4]
 8029202:	6a3b      	ldr	r3, [r7, #32]
 8029204:	9300      	str	r3, [sp, #0]
 8029206:	683b      	ldr	r3, [r7, #0]
 8029208:	687a      	ldr	r2, [r7, #4]
 802920a:	68b9      	ldr	r1, [r7, #8]
 802920c:	f000 fe3e 	bl	8029e8c <bhy2_hif_init>
 8029210:	4603      	mov	r3, r0
 8029212:	75fb      	strb	r3, [r7, #23]
 8029214:	e001      	b.n	802921a <bhy2_init+0x48>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8029216:	23ff      	movs	r3, #255	; 0xff
 8029218:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 802921a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 802921e:	4618      	mov	r0, r3
 8029220:	3718      	adds	r7, #24
 8029222:	46bd      	mov	sp, r7
 8029224:	bd80      	pop	{r7, pc}

08029226 <bhy2_register_fifo_parse_callback>:

int8_t bhy2_register_fifo_parse_callback(uint8_t sensor_id,
                                         bhy2_fifo_parse_callback_t callback,
                                         void *callback_ref,
                                         struct bhy2_dev *dev)
{
 8029226:	b480      	push	{r7}
 8029228:	b087      	sub	sp, #28
 802922a:	af00      	add	r7, sp, #0
 802922c:	60b9      	str	r1, [r7, #8]
 802922e:	607a      	str	r2, [r7, #4]
 8029230:	603b      	str	r3, [r7, #0]
 8029232:	4603      	mov	r3, r0
 8029234:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8029236:	2300      	movs	r3, #0
 8029238:	75fb      	strb	r3, [r7, #23]

    if ((dev == NULL) || (callback == NULL))
 802923a:	683b      	ldr	r3, [r7, #0]
 802923c:	2b00      	cmp	r3, #0
 802923e:	d002      	beq.n	8029246 <bhy2_register_fifo_parse_callback+0x20>
 8029240:	68bb      	ldr	r3, [r7, #8]
 8029242:	2b00      	cmp	r3, #0
 8029244:	d102      	bne.n	802924c <bhy2_register_fifo_parse_callback+0x26>
    {
        rslt = BHY2_E_NULL_PTR;
 8029246:	23ff      	movs	r3, #255	; 0xff
 8029248:	75fb      	strb	r3, [r7, #23]
 802924a:	e013      	b.n	8029274 <bhy2_register_fifo_parse_callback+0x4e>
    }
    else
    {
        dev->table[sensor_id].callback = callback;
 802924c:	7bfa      	ldrb	r2, [r7, #15]
 802924e:	6839      	ldr	r1, [r7, #0]
 8029250:	4613      	mov	r3, r2
 8029252:	00db      	lsls	r3, r3, #3
 8029254:	4413      	add	r3, r2
 8029256:	440b      	add	r3, r1
 8029258:	3318      	adds	r3, #24
 802925a:	68ba      	ldr	r2, [r7, #8]
 802925c:	f8c3 2005 	str.w	r2, [r3, #5]
        dev->table[sensor_id].callback_ref = callback_ref;
 8029260:	7bfa      	ldrb	r2, [r7, #15]
 8029262:	6839      	ldr	r1, [r7, #0]
 8029264:	4613      	mov	r3, r2
 8029266:	00db      	lsls	r3, r3, #3
 8029268:	4413      	add	r3, r2
 802926a:	440b      	add	r3, r1
 802926c:	3318      	adds	r3, #24
 802926e:	687a      	ldr	r2, [r7, #4]
 8029270:	f8c3 2009 	str.w	r2, [r3, #9]
    }

    return rslt;
 8029274:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8029278:	4618      	mov	r0, r3
 802927a:	371c      	adds	r7, #28
 802927c:	46bd      	mov	sp, r7
 802927e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029282:	4770      	bx	lr

08029284 <bhy2_update_virtual_sensor_list>:

int8_t bhy2_update_virtual_sensor_list(struct bhy2_dev *dev)
{
 8029284:	b580      	push	{r7, lr}
 8029286:	b092      	sub	sp, #72	; 0x48
 8029288:	af00      	add	r7, sp, #0
 802928a:	6078      	str	r0, [r7, #4]
    struct bhy2_sensor_info info;
    uint8_t present_buff[32];
    uint8_t sensor_index;
    uint8_t bit_mask;

    if (dev == NULL)
 802928c:	687b      	ldr	r3, [r7, #4]
 802928e:	2b00      	cmp	r3, #0
 8029290:	d103      	bne.n	802929a <bhy2_update_virtual_sensor_list+0x16>
    {
        rslt = BHY2_E_NULL_PTR;
 8029292:	23ff      	movs	r3, #255	; 0xff
 8029294:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8029298:	e079      	b.n	802938e <bhy2_update_virtual_sensor_list+0x10a>
    }
    else
    {
        /* Each bit corresponds to presence of Virtual sensor */
        rslt = bhy2_get_virt_sensor_list(present_buff, dev);
 802929a:	f107 0308 	add.w	r3, r7, #8
 802929e:	6879      	ldr	r1, [r7, #4]
 80292a0:	4618      	mov	r0, r3
 80292a2:	f7ff feb8 	bl	8029016 <bhy2_get_virt_sensor_list>
 80292a6:	4603      	mov	r3, r0
 80292a8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if (rslt == BHY2_OK)
 80292ac:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80292b0:	2b00      	cmp	r3, #0
 80292b2:	d16c      	bne.n	802938e <bhy2_update_virtual_sensor_list+0x10a>
        {
            /* Padding: Sensor id*/
            dev->table[0].event_size = 1;
 80292b4:	687b      	ldr	r3, [r7, #4]
 80292b6:	2201      	movs	r2, #1
 80292b8:	771a      	strb	r2, [r3, #28]

            for (sensor_id = 1; (sensor_id < BHY2_SPECIAL_SENSOR_ID_OFFSET) && (rslt == BHY2_OK); sensor_id++)
 80292ba:	2301      	movs	r3, #1
 80292bc:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80292c0:	e041      	b.n	8029346 <bhy2_update_virtual_sensor_list+0xc2>
            {
                sensor_index = (uint8_t)(sensor_id / 8);
 80292c2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80292c6:	08db      	lsrs	r3, r3, #3
 80292c8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
                bit_mask = (uint8_t)(0x01 << (sensor_id % 8));
 80292cc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80292d0:	f003 0307 	and.w	r3, r3, #7
 80292d4:	2201      	movs	r2, #1
 80292d6:	fa02 f303 	lsl.w	r3, r2, r3
 80292da:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

                if (present_buff[sensor_index] & bit_mask)
 80292de:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80292e2:	3348      	adds	r3, #72	; 0x48
 80292e4:	443b      	add	r3, r7
 80292e6:	f813 2c40 	ldrb.w	r2, [r3, #-64]
 80292ea:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80292ee:	4013      	ands	r3, r2
 80292f0:	b2db      	uxtb	r3, r3
 80292f2:	2b00      	cmp	r3, #0
 80292f4:	d022      	beq.n	802933c <bhy2_update_virtual_sensor_list+0xb8>
                {
                    rslt = bhy2_hif_get_sensor_info(sensor_id, &info, &dev->hif);
 80292f6:	687a      	ldr	r2, [r7, #4]
 80292f8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80292fc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8029300:	4618      	mov	r0, r3
 8029302:	f001 f8e6 	bl	802a4d2 <bhy2_hif_get_sensor_info>
 8029306:	4603      	mov	r3, r0
 8029308:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                    if (rslt == BHY2_OK)
 802930c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8029310:	2b00      	cmp	r3, #0
 8029312:	d113      	bne.n	802933c <bhy2_update_virtual_sensor_list+0xb8>
                    {
                        if (info.event_size == 0)
 8029314:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8029318:	2b00      	cmp	r3, #0
 802931a:	d103      	bne.n	8029324 <bhy2_update_virtual_sensor_list+0xa0>
                        {
                            rslt = BHY2_E_INVALID_EVENT_SIZE;
 802931c:	23f8      	movs	r3, #248	; 0xf8
 802931e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                            break;
 8029322:	e018      	b.n	8029356 <bhy2_update_virtual_sensor_list+0xd2>
                        }
                        else
                        {
                            dev->table[sensor_id].event_size = info.event_size;
 8029324:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8029328:	f897 003c 	ldrb.w	r0, [r7, #60]	; 0x3c
 802932c:	6879      	ldr	r1, [r7, #4]
 802932e:	4613      	mov	r3, r2
 8029330:	00db      	lsls	r3, r3, #3
 8029332:	4413      	add	r3, r2
 8029334:	440b      	add	r3, r1
 8029336:	331c      	adds	r3, #28
 8029338:	4602      	mov	r2, r0
 802933a:	701a      	strb	r2, [r3, #0]
            for (sensor_id = 1; (sensor_id < BHY2_SPECIAL_SENSOR_ID_OFFSET) && (rslt == BHY2_OK); sensor_id++)
 802933c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8029340:	3301      	adds	r3, #1
 8029342:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8029346:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 802934a:	2bf4      	cmp	r3, #244	; 0xf4
 802934c:	d803      	bhi.n	8029356 <bhy2_update_virtual_sensor_list+0xd2>
 802934e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8029352:	2b00      	cmp	r3, #0
 8029354:	d0b5      	beq.n	80292c2 <bhy2_update_virtual_sensor_list+0x3e>
                        }
                    }
                }
            }

            for (sensor_id = BHY2_N_VIRTUAL_SENSOR_MAX - 1; sensor_id >= BHY2_SPECIAL_SENSOR_ID_OFFSET; sensor_id--)
 8029356:	23ff      	movs	r3, #255	; 0xff
 8029358:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 802935c:	e013      	b.n	8029386 <bhy2_update_virtual_sensor_list+0x102>
            {
                dev->table[sensor_id].event_size = bhy2_sysid_event_size[sensor_id - BHY2_SPECIAL_SENSOR_ID_OFFSET];
 802935e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8029362:	3bf5      	subs	r3, #245	; 0xf5
 8029364:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8029368:	490c      	ldr	r1, [pc, #48]	; (802939c <bhy2_update_virtual_sensor_list+0x118>)
 802936a:	5cc8      	ldrb	r0, [r1, r3]
 802936c:	6879      	ldr	r1, [r7, #4]
 802936e:	4613      	mov	r3, r2
 8029370:	00db      	lsls	r3, r3, #3
 8029372:	4413      	add	r3, r2
 8029374:	440b      	add	r3, r1
 8029376:	331c      	adds	r3, #28
 8029378:	4602      	mov	r2, r0
 802937a:	701a      	strb	r2, [r3, #0]
            for (sensor_id = BHY2_N_VIRTUAL_SENSOR_MAX - 1; sensor_id >= BHY2_SPECIAL_SENSOR_ID_OFFSET; sensor_id--)
 802937c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8029380:	3b01      	subs	r3, #1
 8029382:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8029386:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 802938a:	2bf4      	cmp	r3, #244	; 0xf4
 802938c:	d8e7      	bhi.n	802935e <bhy2_update_virtual_sensor_list+0xda>
            }
        }
    }

    return rslt;
 802938e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8029392:	4618      	mov	r0, r3
 8029394:	3748      	adds	r7, #72	; 0x48
 8029396:	46bd      	mov	sp, r7
 8029398:	bd80      	pop	{r7, pc}
 802939a:	bf00      	nop
 802939c:	08058dec 	.word	0x08058dec

080293a0 <bhy2_get_error_value>:

    return rslt;
}

int8_t bhy2_get_error_value(uint8_t *error_value, struct bhy2_dev *dev)
{
 80293a0:	b580      	push	{r7, lr}
 80293a2:	b084      	sub	sp, #16
 80293a4:	af00      	add	r7, sp, #0
 80293a6:	6078      	str	r0, [r7, #4]
 80293a8:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 80293aa:	2300      	movs	r3, #0
 80293ac:	73fb      	strb	r3, [r7, #15]

    if ((dev == NULL) || (error_value == NULL))
 80293ae:	683b      	ldr	r3, [r7, #0]
 80293b0:	2b00      	cmp	r3, #0
 80293b2:	d002      	beq.n	80293ba <bhy2_get_error_value+0x1a>
 80293b4:	687b      	ldr	r3, [r7, #4]
 80293b6:	2b00      	cmp	r3, #0
 80293b8:	d102      	bne.n	80293c0 <bhy2_get_error_value+0x20>
    {
        rslt = BHY2_E_NULL_PTR;
 80293ba:	23ff      	movs	r3, #255	; 0xff
 80293bc:	73fb      	strb	r3, [r7, #15]
 80293be:	e007      	b.n	80293d0 <bhy2_get_error_value+0x30>
    }
    else
    {
        rslt = bhy2_get_regs(BHY2_REG_ERROR_VALUE, error_value, 1, dev);
 80293c0:	683b      	ldr	r3, [r7, #0]
 80293c2:	2201      	movs	r2, #1
 80293c4:	6879      	ldr	r1, [r7, #4]
 80293c6:	202e      	movs	r0, #46	; 0x2e
 80293c8:	f7ff fc66 	bl	8028c98 <bhy2_get_regs>
 80293cc:	4603      	mov	r3, r0
 80293ce:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80293d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80293d4:	4618      	mov	r0, r3
 80293d6:	3710      	adds	r7, #16
 80293d8:	46bd      	mov	sp, r7
 80293da:	bd80      	pop	{r7, pc}

080293dc <get_callback_info>:
}

static int8_t get_callback_info(uint8_t sensor_id,
                                struct bhy2_fifo_parse_callback_table *info,
                                const struct bhy2_dev *dev)
{
 80293dc:	b480      	push	{r7}
 80293de:	b087      	sub	sp, #28
 80293e0:	af00      	add	r7, sp, #0
 80293e2:	4603      	mov	r3, r0
 80293e4:	60b9      	str	r1, [r7, #8]
 80293e6:	607a      	str	r2, [r7, #4]
 80293e8:	73fb      	strb	r3, [r7, #15]

    int8_t rslt = BHY2_OK;
 80293ea:	2300      	movs	r3, #0
 80293ec:	75fb      	strb	r3, [r7, #23]

    if ((dev != NULL) && (info != NULL))
 80293ee:	687b      	ldr	r3, [r7, #4]
 80293f0:	2b00      	cmp	r3, #0
 80293f2:	d04e      	beq.n	8029492 <get_callback_info+0xb6>
 80293f4:	68bb      	ldr	r3, [r7, #8]
 80293f6:	2b00      	cmp	r3, #0
 80293f8:	d04b      	beq.n	8029492 <get_callback_info+0xb6>
    {
        *info = dev->table[sensor_id];
 80293fa:	7bfa      	ldrb	r2, [r7, #15]
 80293fc:	68b8      	ldr	r0, [r7, #8]
 80293fe:	6879      	ldr	r1, [r7, #4]
 8029400:	4613      	mov	r3, r2
 8029402:	00db      	lsls	r3, r3, #3
 8029404:	4413      	add	r3, r2
 8029406:	440b      	add	r3, r1
 8029408:	3318      	adds	r3, #24
 802940a:	4602      	mov	r2, r0
 802940c:	3304      	adds	r3, #4
 802940e:	6818      	ldr	r0, [r3, #0]
 8029410:	6859      	ldr	r1, [r3, #4]
 8029412:	6010      	str	r0, [r2, #0]
 8029414:	6051      	str	r1, [r2, #4]
 8029416:	7a1b      	ldrb	r3, [r3, #8]
 8029418:	7213      	strb	r3, [r2, #8]
        if ((sensor_id >= BHY2_SPECIAL_SENSOR_ID_OFFSET) && (info->event_size == 0))
 802941a:	7bfb      	ldrb	r3, [r7, #15]
 802941c:	2bf4      	cmp	r3, #244	; 0xf4
 802941e:	d91b      	bls.n	8029458 <get_callback_info+0x7c>
 8029420:	68bb      	ldr	r3, [r7, #8]
 8029422:	781b      	ldrb	r3, [r3, #0]
 8029424:	2b00      	cmp	r3, #0
 8029426:	d117      	bne.n	8029458 <get_callback_info+0x7c>
        {
            info->callback = NULL;
 8029428:	68bb      	ldr	r3, [r7, #8]
 802942a:	2200      	movs	r2, #0
 802942c:	705a      	strb	r2, [r3, #1]
 802942e:	2200      	movs	r2, #0
 8029430:	709a      	strb	r2, [r3, #2]
 8029432:	2200      	movs	r2, #0
 8029434:	70da      	strb	r2, [r3, #3]
 8029436:	2200      	movs	r2, #0
 8029438:	711a      	strb	r2, [r3, #4]
            info->callback_ref = NULL;
 802943a:	68bb      	ldr	r3, [r7, #8]
 802943c:	2200      	movs	r2, #0
 802943e:	715a      	strb	r2, [r3, #5]
 8029440:	2200      	movs	r2, #0
 8029442:	719a      	strb	r2, [r3, #6]
 8029444:	2200      	movs	r2, #0
 8029446:	71da      	strb	r2, [r3, #7]
 8029448:	2200      	movs	r2, #0
 802944a:	721a      	strb	r2, [r3, #8]
            info->event_size = bhy2_sysid_event_size[sensor_id - BHY2_SPECIAL_SENSOR_ID_OFFSET];
 802944c:	7bfb      	ldrb	r3, [r7, #15]
 802944e:	3bf5      	subs	r3, #245	; 0xf5
 8029450:	4a16      	ldr	r2, [pc, #88]	; (80294ac <get_callback_info+0xd0>)
 8029452:	5cd2      	ldrb	r2, [r2, r3]
 8029454:	68bb      	ldr	r3, [r7, #8]
 8029456:	701a      	strb	r2, [r3, #0]
        }
        if ((sensor_id == 0) && (info->event_size == 0))
 8029458:	7bfb      	ldrb	r3, [r7, #15]
 802945a:	2b00      	cmp	r3, #0
 802945c:	d11c      	bne.n	8029498 <get_callback_info+0xbc>
 802945e:	68bb      	ldr	r3, [r7, #8]
 8029460:	781b      	ldrb	r3, [r3, #0]
 8029462:	2b00      	cmp	r3, #0
 8029464:	d118      	bne.n	8029498 <get_callback_info+0xbc>
        {
            info->callback = NULL;
 8029466:	68bb      	ldr	r3, [r7, #8]
 8029468:	2200      	movs	r2, #0
 802946a:	705a      	strb	r2, [r3, #1]
 802946c:	2200      	movs	r2, #0
 802946e:	709a      	strb	r2, [r3, #2]
 8029470:	2200      	movs	r2, #0
 8029472:	70da      	strb	r2, [r3, #3]
 8029474:	2200      	movs	r2, #0
 8029476:	711a      	strb	r2, [r3, #4]
            info->callback_ref = NULL;
 8029478:	68bb      	ldr	r3, [r7, #8]
 802947a:	2200      	movs	r2, #0
 802947c:	715a      	strb	r2, [r3, #5]
 802947e:	2200      	movs	r2, #0
 8029480:	719a      	strb	r2, [r3, #6]
 8029482:	2200      	movs	r2, #0
 8029484:	71da      	strb	r2, [r3, #7]
 8029486:	2200      	movs	r2, #0
 8029488:	721a      	strb	r2, [r3, #8]
            info->event_size = 1;
 802948a:	68bb      	ldr	r3, [r7, #8]
 802948c:	2201      	movs	r2, #1
 802948e:	701a      	strb	r2, [r3, #0]
        if ((sensor_id == 0) && (info->event_size == 0))
 8029490:	e002      	b.n	8029498 <get_callback_info+0xbc>
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8029492:	23ff      	movs	r3, #255	; 0xff
 8029494:	75fb      	strb	r3, [r7, #23]
 8029496:	e000      	b.n	802949a <get_callback_info+0xbe>
        if ((sensor_id == 0) && (info->event_size == 0))
 8029498:	bf00      	nop
    }

    return rslt;
 802949a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 802949e:	4618      	mov	r0, r3
 80294a0:	371c      	adds	r7, #28
 80294a2:	46bd      	mov	sp, r7
 80294a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80294a8:	4770      	bx	lr
 80294aa:	bf00      	nop
 80294ac:	08058dec 	.word	0x08058dec

080294b0 <get_buffer_status>:

static int8_t get_buffer_status(const struct bhy2_fifo_buffer *fifo_p, uint8_t event_size, buffer_status_t *status)
{
 80294b0:	b480      	push	{r7}
 80294b2:	b085      	sub	sp, #20
 80294b4:	af00      	add	r7, sp, #0
 80294b6:	60f8      	str	r0, [r7, #12]
 80294b8:	460b      	mov	r3, r1
 80294ba:	607a      	str	r2, [r7, #4]
 80294bc:	72fb      	strb	r3, [r7, #11]
    if ((fifo_p->read_pos + event_size) <= fifo_p->read_length)
 80294be:	68fb      	ldr	r3, [r7, #12]
 80294c0:	681a      	ldr	r2, [r3, #0]
 80294c2:	7afb      	ldrb	r3, [r7, #11]
 80294c4:	441a      	add	r2, r3
 80294c6:	68fb      	ldr	r3, [r7, #12]
 80294c8:	685b      	ldr	r3, [r3, #4]
 80294ca:	429a      	cmp	r2, r3
 80294cc:	d803      	bhi.n	80294d6 <get_buffer_status+0x26>
    {
        *status = BHY2_BUFFER_STATUS_OK;
 80294ce:	687b      	ldr	r3, [r7, #4]
 80294d0:	2200      	movs	r2, #0
 80294d2:	701a      	strb	r2, [r3, #0]
 80294d4:	e002      	b.n	80294dc <get_buffer_status+0x2c>
    }
    else
    {
        *status = BHY2_BUFFER_STATUS_RELOAD;
 80294d6:	687b      	ldr	r3, [r7, #4]
 80294d8:	2201      	movs	r2, #1
 80294da:	701a      	strb	r2, [r3, #0]
    }

    return BHY2_OK;
 80294dc:	2300      	movs	r3, #0
}
 80294de:	4618      	mov	r0, r3
 80294e0:	3714      	adds	r7, #20
 80294e2:	46bd      	mov	sp, r7
 80294e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80294e8:	4770      	bx	lr

080294ea <get_time_stamp>:

static int8_t get_time_stamp(enum bhy2_fifo_type source, uint64_t **time_stamp, struct bhy2_dev *dev)
{
 80294ea:	b480      	push	{r7}
 80294ec:	b087      	sub	sp, #28
 80294ee:	af00      	add	r7, sp, #0
 80294f0:	4603      	mov	r3, r0
 80294f2:	60b9      	str	r1, [r7, #8]
 80294f4:	607a      	str	r2, [r7, #4]
 80294f6:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 80294f8:	2300      	movs	r3, #0
 80294fa:	75fb      	strb	r3, [r7, #23]

    if (source < BHY2_FIFO_TYPE_MAX)
 80294fc:	7bfb      	ldrb	r3, [r7, #15]
 80294fe:	2b02      	cmp	r3, #2
 8029500:	d808      	bhi.n	8029514 <get_time_stamp+0x2a>
    {
        *time_stamp = &dev->last_time_stamp[source];
 8029502:	7bfb      	ldrb	r3, [r7, #15]
 8029504:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8029508:	00db      	lsls	r3, r3, #3
 802950a:	687a      	ldr	r2, [r7, #4]
 802950c:	441a      	add	r2, r3
 802950e:	68bb      	ldr	r3, [r7, #8]
 8029510:	601a      	str	r2, [r3, #0]
 8029512:	e001      	b.n	8029518 <get_time_stamp+0x2e>
    }
    else
    {
        rslt = BHY2_E_INVALID_FIFO_TYPE;
 8029514:	23f9      	movs	r3, #249	; 0xf9
 8029516:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8029518:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 802951c:	4618      	mov	r0, r3
 802951e:	371c      	adds	r7, #28
 8029520:	46bd      	mov	sp, r7
 8029522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029526:	4770      	bx	lr

08029528 <parse_fifo>:

static int8_t parse_fifo(enum bhy2_fifo_type source, struct bhy2_fifo_buffer *fifo_p, struct bhy2_dev *dev)
{
 8029528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802952c:	b099      	sub	sp, #100	; 0x64
 802952e:	af00      	add	r7, sp, #0
 8029530:	4603      	mov	r3, r0
 8029532:	62b9      	str	r1, [r7, #40]	; 0x28
 8029534:	627a      	str	r2, [r7, #36]	; 0x24
 8029536:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    uint8_t tmp_sensor_id = 0;
 802953a:	2300      	movs	r3, #0
 802953c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    int8_t rslt = BHY2_OK;
 8029540:	2300      	movs	r3, #0
 8029542:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    uint16_t i = 0;
 8029546:	2300      	movs	r3, #0
 8029548:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    uint32_t tmp_read_pos;
    struct bhy2_fifo_parse_data_info data_info;
    uint64_t *time_stamp;
    struct bhy2_fifo_parse_callback_table info;
    buffer_status_t status = BHY2_BUFFER_STATUS_OK;
 802954c:	2300      	movs	r3, #0
 802954e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    for (; (fifo_p->read_pos < fifo_p->read_length) && (status == BHY2_BUFFER_STATUS_OK);)
 8029552:	e16a      	b.n	802982a <parse_fifo+0x302>
    {
        tmp_read_pos = fifo_p->read_pos;
 8029554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029556:	681b      	ldr	r3, [r3, #0]
 8029558:	657b      	str	r3, [r7, #84]	; 0x54
        tmp_sensor_id = fifo_p->buffer[tmp_read_pos];
 802955a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802955c:	691a      	ldr	r2, [r3, #16]
 802955e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8029560:	4413      	add	r3, r2
 8029562:	781b      	ldrb	r3, [r3, #0]
 8029564:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

        rslt = get_time_stamp(source, &time_stamp, dev);
 8029568:	f107 0144 	add.w	r1, r7, #68	; 0x44
 802956c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8029570:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8029572:	4618      	mov	r0, r3
 8029574:	f7ff ffb9 	bl	80294ea <get_time_stamp>
 8029578:	4603      	mov	r3, r0
 802957a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        if (rslt != BHY2_OK)
 802957e:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8029582:	2b00      	cmp	r3, #0
 8029584:	d002      	beq.n	802958c <parse_fifo+0x64>
        {
            return rslt;
 8029586:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 802958a:	e191      	b.n	80298b0 <parse_fifo+0x388>
        }
        switch (tmp_sensor_id)
 802958c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8029590:	2b00      	cmp	r3, #0
 8029592:	d025      	beq.n	80295e0 <parse_fifo+0xb8>
 8029594:	2b00      	cmp	r3, #0
 8029596:	f2c0 80f6 	blt.w	8029786 <parse_fifo+0x25e>
 802959a:	2bff      	cmp	r3, #255	; 0xff
 802959c:	f300 80f3 	bgt.w	8029786 <parse_fifo+0x25e>
 80295a0:	2bf5      	cmp	r3, #245	; 0xf5
 80295a2:	f2c0 80f0 	blt.w	8029786 <parse_fifo+0x25e>
 80295a6:	3bf5      	subs	r3, #245	; 0xf5
 80295a8:	2b0a      	cmp	r3, #10
 80295aa:	f200 80ec 	bhi.w	8029786 <parse_fifo+0x25e>
 80295ae:	a201      	add	r2, pc, #4	; (adr r2, 80295b4 <parse_fifo+0x8c>)
 80295b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80295b4:	080295ed 	.word	0x080295ed
 80295b8:	08029655 	.word	0x08029655
 80295bc:	080296d3 	.word	0x080296d3
 80295c0:	08029787 	.word	0x08029787
 80295c4:	08029787 	.word	0x08029787
 80295c8:	08029787 	.word	0x08029787
 80295cc:	080295ed 	.word	0x080295ed
 80295d0:	08029655 	.word	0x08029655
 80295d4:	080296d3 	.word	0x080296d3
 80295d8:	08029787 	.word	0x08029787
 80295dc:	080295e1 	.word	0x080295e1
        {
            case BHY2_SYS_ID_FILLER:
            case BHY2_SYS_ID_PADDING:
                fifo_p->read_pos += 1;
 80295e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80295e2:	681b      	ldr	r3, [r3, #0]
 80295e4:	1c5a      	adds	r2, r3, #1
 80295e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80295e8:	601a      	str	r2, [r3, #0]
                break;
 80295ea:	e11e      	b.n	802982a <parse_fifo+0x302>
            case BHY2_SYS_ID_TS_SMALL_DELTA_WU:
            case BHY2_SYS_ID_TS_SMALL_DELTA:
                rslt = get_buffer_status(fifo_p, 2, &status);
 80295ec:	f107 0337 	add.w	r3, r7, #55	; 0x37
 80295f0:	461a      	mov	r2, r3
 80295f2:	2102      	movs	r1, #2
 80295f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80295f6:	f7ff ff5b 	bl	80294b0 <get_buffer_status>
 80295fa:	4603      	mov	r3, r0
 80295fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                if (rslt != BHY2_OK)
 8029600:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8029604:	2b00      	cmp	r3, #0
 8029606:	d002      	beq.n	802960e <parse_fifo+0xe6>
                {
                    return rslt;
 8029608:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 802960c:	e150      	b.n	80298b0 <parse_fifo+0x388>
                }
                if (status != BHY2_BUFFER_STATUS_OK)
 802960e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8029612:	2b00      	cmp	r3, #0
 8029614:	d000      	beq.n	8029618 <parse_fifo+0xf0>
                {
                    break;
 8029616:	e108      	b.n	802982a <parse_fifo+0x302>
                }
                *time_stamp += fifo_p->buffer[tmp_read_pos + 1];
 8029618:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802961a:	e9d3 0100 	ldrd	r0, r1, [r3]
 802961e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029620:	691a      	ldr	r2, [r3, #16]
 8029622:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8029624:	3301      	adds	r3, #1
 8029626:	4413      	add	r3, r2
 8029628:	781b      	ldrb	r3, [r3, #0]
 802962a:	b2db      	uxtb	r3, r3
 802962c:	2200      	movs	r2, #0
 802962e:	469a      	mov	sl, r3
 8029630:	4693      	mov	fp, r2
 8029632:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8029634:	eb10 020a 	adds.w	r2, r0, sl
 8029638:	61ba      	str	r2, [r7, #24]
 802963a:	eb41 020b 	adc.w	r2, r1, fp
 802963e:	61fa      	str	r2, [r7, #28]
 8029640:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8029644:	e9c3 1200 	strd	r1, r2, [r3]
                fifo_p->read_pos += 2;
 8029648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802964a:	681b      	ldr	r3, [r3, #0]
 802964c:	1c9a      	adds	r2, r3, #2
 802964e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029650:	601a      	str	r2, [r3, #0]
                break;
 8029652:	e0ea      	b.n	802982a <parse_fifo+0x302>
            case BHY2_SYS_ID_TS_LARGE_DELTA:
            case BHY2_SYS_ID_TS_LARGE_DELTA_WU:
                rslt = get_buffer_status(fifo_p, 3, &status);
 8029654:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8029658:	461a      	mov	r2, r3
 802965a:	2103      	movs	r1, #3
 802965c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802965e:	f7ff ff27 	bl	80294b0 <get_buffer_status>
 8029662:	4603      	mov	r3, r0
 8029664:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                if (rslt != BHY2_OK)
 8029668:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 802966c:	2b00      	cmp	r3, #0
 802966e:	d002      	beq.n	8029676 <parse_fifo+0x14e>
                {
                    return rslt;
 8029670:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8029674:	e11c      	b.n	80298b0 <parse_fifo+0x388>
                }
                if (status != BHY2_BUFFER_STATUS_OK)
 8029676:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 802967a:	2b00      	cmp	r3, #0
 802967c:	d000      	beq.n	8029680 <parse_fifo+0x158>
                {
                    break;
 802967e:	e0d4      	b.n	802982a <parse_fifo+0x302>
                }
                *time_stamp += BHY2_LE2U16(fifo_p->buffer + tmp_read_pos + 1);
 8029680:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8029682:	e9d3 0100 	ldrd	r0, r1, [r3]
 8029686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029688:	691a      	ldr	r2, [r3, #16]
 802968a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802968c:	3301      	adds	r3, #1
 802968e:	4413      	add	r3, r2
 8029690:	781b      	ldrb	r3, [r3, #0]
 8029692:	b21c      	sxth	r4, r3
 8029694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029696:	691a      	ldr	r2, [r3, #16]
 8029698:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802969a:	3302      	adds	r3, #2
 802969c:	4413      	add	r3, r2
 802969e:	781b      	ldrb	r3, [r3, #0]
 80296a0:	021b      	lsls	r3, r3, #8
 80296a2:	b21b      	sxth	r3, r3
 80296a4:	4323      	orrs	r3, r4
 80296a6:	b21b      	sxth	r3, r3
 80296a8:	b29b      	uxth	r3, r3
 80296aa:	b29b      	uxth	r3, r3
 80296ac:	2200      	movs	r2, #0
 80296ae:	461d      	mov	r5, r3
 80296b0:	4616      	mov	r6, r2
 80296b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80296b4:	1942      	adds	r2, r0, r5
 80296b6:	613a      	str	r2, [r7, #16]
 80296b8:	eb41 0206 	adc.w	r2, r1, r6
 80296bc:	617a      	str	r2, [r7, #20]
 80296be:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80296c2:	e9c3 1200 	strd	r1, r2, [r3]
                fifo_p->read_pos += 3;
 80296c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80296c8:	681b      	ldr	r3, [r3, #0]
 80296ca:	1cda      	adds	r2, r3, #3
 80296cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80296ce:	601a      	str	r2, [r3, #0]
                break;
 80296d0:	e0ab      	b.n	802982a <parse_fifo+0x302>
            case BHY2_SYS_ID_TS_FULL:
            case BHY2_SYS_ID_TS_FULL_WU:
                rslt = get_buffer_status(fifo_p, 6, &status);
 80296d2:	f107 0337 	add.w	r3, r7, #55	; 0x37
 80296d6:	461a      	mov	r2, r3
 80296d8:	2106      	movs	r1, #6
 80296da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80296dc:	f7ff fee8 	bl	80294b0 <get_buffer_status>
 80296e0:	4603      	mov	r3, r0
 80296e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                if (rslt != BHY2_OK)
 80296e6:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80296ea:	2b00      	cmp	r3, #0
 80296ec:	d002      	beq.n	80296f4 <parse_fifo+0x1cc>
                {
                    return rslt;
 80296ee:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80296f2:	e0dd      	b.n	80298b0 <parse_fifo+0x388>
                }
                if (status != BHY2_BUFFER_STATUS_OK)
 80296f4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80296f8:	2b00      	cmp	r3, #0
 80296fa:	d000      	beq.n	80296fe <parse_fifo+0x1d6>
                {
                    break;
 80296fc:	e095      	b.n	802982a <parse_fifo+0x302>
                }
                *time_stamp = BHY2_LE2U40(fifo_p->buffer + tmp_read_pos + UINT8_C(1));
 80296fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029700:	691a      	ldr	r2, [r3, #16]
 8029702:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8029704:	3301      	adds	r3, #1
 8029706:	4413      	add	r3, r2
 8029708:	781b      	ldrb	r3, [r3, #0]
 802970a:	4619      	mov	r1, r3
 802970c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802970e:	691a      	ldr	r2, [r3, #16]
 8029710:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8029712:	3302      	adds	r3, #2
 8029714:	4413      	add	r3, r2
 8029716:	781b      	ldrb	r3, [r3, #0]
 8029718:	021b      	lsls	r3, r3, #8
 802971a:	4319      	orrs	r1, r3
 802971c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802971e:	691a      	ldr	r2, [r3, #16]
 8029720:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8029722:	3303      	adds	r3, #3
 8029724:	4413      	add	r3, r2
 8029726:	781b      	ldrb	r3, [r3, #0]
 8029728:	041b      	lsls	r3, r3, #16
 802972a:	4319      	orrs	r1, r3
 802972c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802972e:	691a      	ldr	r2, [r3, #16]
 8029730:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8029732:	3304      	adds	r3, #4
 8029734:	4413      	add	r3, r2
 8029736:	781b      	ldrb	r3, [r3, #0]
 8029738:	061b      	lsls	r3, r3, #24
 802973a:	430b      	orrs	r3, r1
 802973c:	2200      	movs	r2, #0
 802973e:	4698      	mov	r8, r3
 8029740:	4691      	mov	r9, r2
 8029742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029744:	691a      	ldr	r2, [r3, #16]
 8029746:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8029748:	3305      	adds	r3, #5
 802974a:	4413      	add	r3, r2
 802974c:	781b      	ldrb	r3, [r3, #0]
 802974e:	b2db      	uxtb	r3, r3
 8029750:	2200      	movs	r2, #0
 8029752:	60bb      	str	r3, [r7, #8]
 8029754:	60fa      	str	r2, [r7, #12]
 8029756:	f04f 0200 	mov.w	r2, #0
 802975a:	f04f 0300 	mov.w	r3, #0
 802975e:	68b9      	ldr	r1, [r7, #8]
 8029760:	000b      	movs	r3, r1
 8029762:	2200      	movs	r2, #0
 8029764:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8029766:	ea48 0002 	orr.w	r0, r8, r2
 802976a:	6038      	str	r0, [r7, #0]
 802976c:	ea49 0303 	orr.w	r3, r9, r3
 8029770:	607b      	str	r3, [r7, #4]
 8029772:	e9d7 3400 	ldrd	r3, r4, [r7]
 8029776:	e9c1 3400 	strd	r3, r4, [r1]
                fifo_p->read_pos += 6;
 802977a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802977c:	681b      	ldr	r3, [r3, #0]
 802977e:	1d9a      	adds	r2, r3, #6
 8029780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029782:	601a      	str	r2, [r3, #0]
                break;
 8029784:	e051      	b.n	802982a <parse_fifo+0x302>
            default:

                rslt = get_callback_info(tmp_sensor_id, &info, dev);
 8029786:	f107 0138 	add.w	r1, r7, #56	; 0x38
 802978a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 802978e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8029790:	4618      	mov	r0, r3
 8029792:	f7ff fe23 	bl	80293dc <get_callback_info>
 8029796:	4603      	mov	r3, r0
 8029798:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

                if (rslt != BHY2_OK)
 802979c:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80297a0:	2b00      	cmp	r3, #0
 80297a2:	d002      	beq.n	80297aa <parse_fifo+0x282>
                {
                    return rslt;
 80297a4:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80297a8:	e082      	b.n	80298b0 <parse_fifo+0x388>
                }
                rslt = get_buffer_status(fifo_p, info.event_size, &status);
 80297aa:	f897 1038 	ldrb.w	r1, [r7, #56]	; 0x38
 80297ae:	f107 0337 	add.w	r3, r7, #55	; 0x37
 80297b2:	461a      	mov	r2, r3
 80297b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80297b6:	f7ff fe7b 	bl	80294b0 <get_buffer_status>
 80297ba:	4603      	mov	r3, r0
 80297bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                if (rslt != BHY2_OK)
 80297c0:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80297c4:	2b00      	cmp	r3, #0
 80297c6:	d002      	beq.n	80297ce <parse_fifo+0x2a6>
                {
                    return rslt;
 80297c8:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80297cc:	e070      	b.n	80298b0 <parse_fifo+0x388>
                }
                if (status != BHY2_BUFFER_STATUS_OK)
 80297ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80297d2:	2b00      	cmp	r3, #0
 80297d4:	d000      	beq.n	80297d8 <parse_fifo+0x2b0>
                {
                    break;
 80297d6:	e028      	b.n	802982a <parse_fifo+0x302>
                }
                if (info.callback != NULL)
 80297d8:	f8d7 3039 	ldr.w	r3, [r7, #57]	; 0x39
 80297dc:	2b00      	cmp	r3, #0
 80297de:	d01c      	beq.n	802981a <parse_fifo+0x2f2>
                {
                    /* Read position is incremented by 1 to exclude sensor id */
                    data_info.data_ptr = &fifo_p->buffer[tmp_read_pos + 1];
 80297e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80297e2:	691a      	ldr	r2, [r3, #16]
 80297e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80297e6:	3301      	adds	r3, #1
 80297e8:	4413      	add	r3, r2
 80297ea:	64fb      	str	r3, [r7, #76]	; 0x4c
                    data_info.fifo_type = source;
 80297ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80297f0:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
                    data_info.time_stamp = time_stamp;
 80297f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80297f6:	653b      	str	r3, [r7, #80]	; 0x50
                    data_info.sensor_id = tmp_sensor_id;
 80297f8:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80297fc:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                    data_info.data_size = info.event_size;
 8029800:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8029804:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
                    info.callback(&data_info, info.callback_ref);
 8029808:	f8d7 4039 	ldr.w	r4, [r7, #57]	; 0x39
 802980c:	f8d7 203d 	ldr.w	r2, [r7, #61]	; 0x3d
 8029810:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8029814:	4611      	mov	r1, r2
 8029816:	4618      	mov	r0, r3
 8029818:	47a0      	blx	r4

                }
                fifo_p->read_pos += info.event_size;
 802981a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802981c:	681a      	ldr	r2, [r3, #0]
 802981e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8029822:	441a      	add	r2, r3
 8029824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029826:	601a      	str	r2, [r3, #0]
                break;
 8029828:	bf00      	nop
    for (; (fifo_p->read_pos < fifo_p->read_length) && (status == BHY2_BUFFER_STATUS_OK);)
 802982a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802982c:	681a      	ldr	r2, [r3, #0]
 802982e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029830:	685b      	ldr	r3, [r3, #4]
 8029832:	429a      	cmp	r2, r3
 8029834:	d204      	bcs.n	8029840 <parse_fifo+0x318>
 8029836:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 802983a:	2b00      	cmp	r3, #0
 802983c:	f43f ae8a 	beq.w	8029554 <parse_fifo+0x2c>
        }
    }
    if (fifo_p->read_length)
 8029840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029842:	685b      	ldr	r3, [r3, #4]
 8029844:	2b00      	cmp	r3, #0
 8029846:	d031      	beq.n	80298ac <parse_fifo+0x384>
    {
        if (fifo_p->read_length < fifo_p->read_pos)
 8029848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802984a:	685a      	ldr	r2, [r3, #4]
 802984c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802984e:	681b      	ldr	r3, [r3, #0]
 8029850:	429a      	cmp	r2, r3
 8029852:	d202      	bcs.n	802985a <parse_fifo+0x332>
        {
            return BHY2_E_INVALID_PARAM;
 8029854:	f06f 0301 	mvn.w	r3, #1
 8029858:	e02a      	b.n	80298b0 <parse_fifo+0x388>
        }
        fifo_p->read_length -= fifo_p->read_pos;
 802985a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802985c:	685a      	ldr	r2, [r3, #4]
 802985e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029860:	681b      	ldr	r3, [r3, #0]
 8029862:	1ad2      	subs	r2, r2, r3
 8029864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029866:	605a      	str	r2, [r3, #4]
        if (fifo_p->read_length)
 8029868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802986a:	685b      	ldr	r3, [r3, #4]
 802986c:	2b00      	cmp	r3, #0
 802986e:	d01d      	beq.n	80298ac <parse_fifo+0x384>
        {
            for (i = 0; i < fifo_p->read_length; i++)
 8029870:	2300      	movs	r3, #0
 8029872:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8029876:	e013      	b.n	80298a0 <parse_fifo+0x378>
            {
                fifo_p->buffer[i] = fifo_p->buffer[fifo_p->read_pos + i];
 8029878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802987a:	691a      	ldr	r2, [r3, #16]
 802987c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802987e:	6819      	ldr	r1, [r3, #0]
 8029880:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8029884:	440b      	add	r3, r1
 8029886:	441a      	add	r2, r3
 8029888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802988a:	6919      	ldr	r1, [r3, #16]
 802988c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8029890:	440b      	add	r3, r1
 8029892:	7812      	ldrb	r2, [r2, #0]
 8029894:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < fifo_p->read_length; i++)
 8029896:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 802989a:	3301      	adds	r3, #1
 802989c:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80298a0:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 80298a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80298a6:	685b      	ldr	r3, [r3, #4]
 80298a8:	429a      	cmp	r2, r3
 80298aa:	d3e5      	bcc.n	8029878 <parse_fifo+0x350>
            }
        }
    }

    return rslt;
 80298ac:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 80298b0:	4618      	mov	r0, r3
 80298b2:	3764      	adds	r7, #100	; 0x64
 80298b4:	46bd      	mov	sp, r7
 80298b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80298ba:	bf00      	nop

080298bc <bhy2_hif_exec_cmd_generic>:
                                        uint32_t length,
                                        const uint8_t *pre_payload,
                                        uint32_t pre_length,
                                        uint32_t cmd_length,
                                        struct bhy2_hif_dev *hif)
{
 80298bc:	b590      	push	{r4, r7, lr}
 80298be:	b0cf      	sub	sp, #316	; 0x13c
 80298c0:	af00      	add	r7, sp, #0
 80298c2:	4604      	mov	r4, r0
 80298c4:	f507 709c 	add.w	r0, r7, #312	; 0x138
 80298c8:	f5a0 7098 	sub.w	r0, r0, #304	; 0x130
 80298cc:	6001      	str	r1, [r0, #0]
 80298ce:	f507 719c 	add.w	r1, r7, #312	; 0x138
 80298d2:	f5a1 719a 	sub.w	r1, r1, #308	; 0x134
 80298d6:	600a      	str	r2, [r1, #0]
 80298d8:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80298dc:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 80298e0:	6013      	str	r3, [r2, #0]
 80298e2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80298e6:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80298ea:	4622      	mov	r2, r4
 80298ec:	801a      	strh	r2, [r3, #0]
    int8_t rslt = BHY2_OK;
 80298ee:	2300      	movs	r3, #0
 80298f0:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
    uint32_t remain, trans_len, copy_len, pos, total_len, temp_total_len, loop_remain_len, max_len;
    uint8_t command_buf[BHY2_COMMAND_PACKET_LEN];

    if ((hif != NULL) && !((length != 0) && (payload == NULL)) && !((pre_length != 0) && (pre_payload == NULL)))
 80298f4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80298f8:	2b00      	cmp	r3, #0
 80298fa:	f000 81af 	beq.w	8029c5c <bhy2_hif_exec_cmd_generic+0x3a0>
 80298fe:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8029902:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8029906:	681b      	ldr	r3, [r3, #0]
 8029908:	2b00      	cmp	r3, #0
 802990a:	d007      	beq.n	802991c <bhy2_hif_exec_cmd_generic+0x60>
 802990c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8029910:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8029914:	681b      	ldr	r3, [r3, #0]
 8029916:	2b00      	cmp	r3, #0
 8029918:	f000 81a0 	beq.w	8029c5c <bhy2_hif_exec_cmd_generic+0x3a0>
 802991c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8029920:	2b00      	cmp	r3, #0
 8029922:	d007      	beq.n	8029934 <bhy2_hif_exec_cmd_generic+0x78>
 8029924:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8029928:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 802992c:	681b      	ldr	r3, [r3, #0]
 802992e:	2b00      	cmp	r3, #0
 8029930:	f000 8194 	beq.w	8029c5c <bhy2_hif_exec_cmd_generic+0x3a0>
    {
        if (hif->read_write_len != 0)
 8029934:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8029938:	699b      	ldr	r3, [r3, #24]
 802993a:	2b00      	cmp	r3, #0
 802993c:	f000 8188 	beq.w	8029c50 <bhy2_hif_exec_cmd_generic+0x394>
        {
            total_len = pre_length + length;
 8029940:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8029944:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8029948:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 802994c:	681b      	ldr	r3, [r3, #0]
 802994e:	4413      	add	r3, r2
 8029950:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

            if (cmd_length)
 8029954:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8029958:	2b00      	cmp	r3, #0
 802995a:	d007      	beq.n	802996c <bhy2_hif_exec_cmd_generic+0xb0>
            {
                temp_total_len = pre_length + cmd_length;
 802995c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8029960:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8029964:	4413      	add	r3, r2
 8029966:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 802996a:	e003      	b.n	8029974 <bhy2_hif_exec_cmd_generic+0xb8>
            }
            else
            {
                temp_total_len = total_len;
 802996c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8029970:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
            }

            /* Align 4 bytes */
            if (temp_total_len % 4)
 8029974:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8029978:	f003 0303 	and.w	r3, r3, #3
 802997c:	2b00      	cmp	r3, #0
 802997e:	d006      	beq.n	802998e <bhy2_hif_exec_cmd_generic+0xd2>
            {
                temp_total_len = ((temp_total_len >> 2) + 1) << 2;
 8029980:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8029984:	089b      	lsrs	r3, r3, #2
 8029986:	3301      	adds	r3, #1
 8029988:	009b      	lsls	r3, r3, #2
 802998a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
            }

            command_buf[0] = (uint8_t)(cmd & 0xFF);
 802998e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8029992:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8029996:	881b      	ldrh	r3, [r3, #0]
 8029998:	b2da      	uxtb	r2, r3
 802999a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 802999e:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80299a2:	701a      	strb	r2, [r3, #0]
            command_buf[1] = (uint8_t)((cmd >> 8) & 0xFF);
 80299a4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80299a8:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80299ac:	881b      	ldrh	r3, [r3, #0]
 80299ae:	0a1b      	lsrs	r3, r3, #8
 80299b0:	b29b      	uxth	r3, r3
 80299b2:	b2da      	uxtb	r2, r3
 80299b4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80299b8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80299bc:	705a      	strb	r2, [r3, #1]

            /* Length in word */
            if (cmd == BHY2_CMD_UPLOAD_TO_PROGRAM_RAM)
 80299be:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80299c2:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80299c6:	881b      	ldrh	r3, [r3, #0]
 80299c8:	2b02      	cmp	r3, #2
 80299ca:	d113      	bne.n	80299f4 <bhy2_hif_exec_cmd_generic+0x138>
            {
                command_buf[2] = (temp_total_len / 4) & 0xFF;
 80299cc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80299d0:	089b      	lsrs	r3, r3, #2
 80299d2:	b2da      	uxtb	r2, r3
 80299d4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80299d8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80299dc:	709a      	strb	r2, [r3, #2]
                command_buf[3] = ((temp_total_len / 4) >> 8) & 0xFF;
 80299de:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80299e2:	089b      	lsrs	r3, r3, #2
 80299e4:	0a1b      	lsrs	r3, r3, #8
 80299e6:	b2da      	uxtb	r2, r3
 80299e8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80299ec:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80299f0:	70da      	strb	r2, [r3, #3]
 80299f2:	e010      	b.n	8029a16 <bhy2_hif_exec_cmd_generic+0x15a>
            }
            /* Length in byte */
            else
            {
                command_buf[2] = temp_total_len & 0xFF;
 80299f4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80299f8:	b2da      	uxtb	r2, r3
 80299fa:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80299fe:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8029a02:	709a      	strb	r2, [r3, #2]
                command_buf[3] = (temp_total_len >> 8) & 0xFF;
 8029a04:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8029a08:	0a1b      	lsrs	r3, r3, #8
 8029a0a:	b2da      	uxtb	r2, r3
 8029a0c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8029a10:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8029a14:	70da      	strb	r2, [r3, #3]
            }

            pos = 4;
 8029a16:	2304      	movs	r3, #4
 8029a18:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
            remain = total_len;
 8029a1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8029a20:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
            loop_remain_len = remain + pos;
 8029a24:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8029a28:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8029a2c:	4413      	add	r3, r2
 8029a2e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
            max_len = BHY2_COMMAND_PACKET_LEN;
 8029a32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8029a36:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

            if (hif->read_write_len < max_len)
 8029a3a:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8029a3e:	699b      	ldr	r3, [r3, #24]
 8029a40:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8029a44:	429a      	cmp	r2, r3
 8029a46:	f240 80f9 	bls.w	8029c3c <bhy2_hif_exec_cmd_generic+0x380>
            {
                max_len = hif->read_write_len;
 8029a4a:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8029a4e:	699b      	ldr	r3, [r3, #24]
 8029a50:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
            }

            while ((loop_remain_len > 0) && (rslt == BHY2_OK))
 8029a54:	e0f2      	b.n	8029c3c <bhy2_hif_exec_cmd_generic+0x380>
            {
                if ((remain + pos) > max_len)
 8029a56:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8029a5a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8029a5e:	4413      	add	r3, r2
 8029a60:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8029a64:	429a      	cmp	r2, r3
 8029a66:	d20b      	bcs.n	8029a80 <bhy2_hif_exec_cmd_generic+0x1c4>
                {
                    trans_len = max_len;
 8029a68:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8029a6c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    copy_len = max_len - pos;
 8029a70:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8029a74:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8029a78:	1ad3      	subs	r3, r2, r3
 8029a7a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8029a7e:	e020      	b.n	8029ac2 <bhy2_hif_exec_cmd_generic+0x206>
                }
                else
                {
                    trans_len = remain + pos;
 8029a80:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8029a84:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8029a88:	4413      	add	r3, r2
 8029a8a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    copy_len = remain;
 8029a8e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8029a92:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

                    /* Align to 4 bytes */
                    if (trans_len % 4)
 8029a96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8029a9a:	f003 0303 	and.w	r3, r3, #3
 8029a9e:	2b00      	cmp	r3, #0
 8029aa0:	d006      	beq.n	8029ab0 <bhy2_hif_exec_cmd_generic+0x1f4>
                    {
                        trans_len = ((trans_len >> 2) + 1) << 2;
 8029aa2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8029aa6:	089b      	lsrs	r3, r3, #2
 8029aa8:	3301      	adds	r3, #1
 8029aaa:	009b      	lsls	r3, r3, #2
 8029aac:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    }

                    if (trans_len > BHY2_COMMAND_PACKET_LEN)
 8029ab0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8029ab4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8029ab8:	d903      	bls.n	8029ac2 <bhy2_hif_exec_cmd_generic+0x206>
                    {
                        trans_len = BHY2_COMMAND_PACKET_LEN;
 8029aba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8029abe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    }
                }

                if (copy_len > 0)
 8029ac2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8029ac6:	2b00      	cmp	r3, #0
 8029ac8:	d07e      	beq.n	8029bc8 <bhy2_hif_exec_cmd_generic+0x30c>
                {
                    if (remain >= (length + copy_len))
 8029aca:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8029ace:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8029ad2:	681a      	ldr	r2, [r3, #0]
 8029ad4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8029ad8:	4413      	add	r3, r2
 8029ada:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8029ade:	429a      	cmp	r2, r3
 8029ae0:	d315      	bcc.n	8029b0e <bhy2_hif_exec_cmd_generic+0x252>
                    {
                        memcpy(&command_buf[pos], &pre_payload[total_len - remain], copy_len);
 8029ae2:	f107 0214 	add.w	r2, r7, #20
 8029ae6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8029aea:	18d0      	adds	r0, r2, r3
 8029aec:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8029af0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8029af4:	1ad3      	subs	r3, r2, r3
 8029af6:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8029afa:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8029afe:	6812      	ldr	r2, [r2, #0]
 8029b00:	4413      	add	r3, r2
 8029b02:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8029b06:	4619      	mov	r1, r3
 8029b08:	f013 fa42 	bl	803cf90 <memcpy>
 8029b0c:	e05c      	b.n	8029bc8 <bhy2_hif_exec_cmd_generic+0x30c>
                    }
                    else if (remain > length)
 8029b0e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8029b12:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8029b16:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8029b1a:	681b      	ldr	r3, [r3, #0]
 8029b1c:	429a      	cmp	r2, r3
 8029b1e:	d93b      	bls.n	8029b98 <bhy2_hif_exec_cmd_generic+0x2dc>
                    {
                        memcpy(&command_buf[pos], &pre_payload[total_len - remain], remain - length);
 8029b20:	f107 0214 	add.w	r2, r7, #20
 8029b24:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8029b28:	18d0      	adds	r0, r2, r3
 8029b2a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8029b2e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8029b32:	1ad3      	subs	r3, r2, r3
 8029b34:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8029b38:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8029b3c:	6812      	ldr	r2, [r2, #0]
 8029b3e:	18d1      	adds	r1, r2, r3
 8029b40:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8029b44:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8029b48:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8029b4c:	681b      	ldr	r3, [r3, #0]
 8029b4e:	1ad3      	subs	r3, r2, r3
 8029b50:	461a      	mov	r2, r3
 8029b52:	f013 fa1d 	bl	803cf90 <memcpy>
                        memcpy(&command_buf[pos + remain - length], payload, copy_len - (remain - length));
 8029b56:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8029b5a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8029b5e:	441a      	add	r2, r3
 8029b60:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8029b64:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8029b68:	681b      	ldr	r3, [r3, #0]
 8029b6a:	1ad3      	subs	r3, r2, r3
 8029b6c:	f107 0214 	add.w	r2, r7, #20
 8029b70:	18d0      	adds	r0, r2, r3
 8029b72:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8029b76:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8029b7a:	681a      	ldr	r2, [r3, #0]
 8029b7c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8029b80:	1ad2      	subs	r2, r2, r3
 8029b82:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8029b86:	441a      	add	r2, r3
 8029b88:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8029b8c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8029b90:	6819      	ldr	r1, [r3, #0]
 8029b92:	f013 f9fd 	bl	803cf90 <memcpy>
 8029b96:	e017      	b.n	8029bc8 <bhy2_hif_exec_cmd_generic+0x30c>
                    }
                    else
                    {
                        memcpy(&command_buf[pos], &payload[length - remain], copy_len);
 8029b98:	f107 0214 	add.w	r2, r7, #20
 8029b9c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8029ba0:	18d0      	adds	r0, r2, r3
 8029ba2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8029ba6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8029baa:	681a      	ldr	r2, [r3, #0]
 8029bac:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8029bb0:	1ad3      	subs	r3, r2, r3
 8029bb2:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8029bb6:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8029bba:	6812      	ldr	r2, [r2, #0]
 8029bbc:	4413      	add	r3, r2
 8029bbe:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8029bc2:	4619      	mov	r1, r3
 8029bc4:	f013 f9e4 	bl	803cf90 <memcpy>
                    }
                }

                if ((trans_len - (pos + copy_len)) > 0)
 8029bc8:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8029bcc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8029bd0:	4413      	add	r3, r2
 8029bd2:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8029bd6:	429a      	cmp	r2, r3
 8029bd8:	d012      	beq.n	8029c00 <bhy2_hif_exec_cmd_generic+0x344>
                {
                    memset(&command_buf[pos + copy_len], 0, BHY2_COMMAND_PACKET_LEN - (pos + copy_len));
 8029bda:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8029bde:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8029be2:	4413      	add	r3, r2
 8029be4:	f107 0214 	add.w	r2, r7, #20
 8029be8:	18d0      	adds	r0, r2, r3
 8029bea:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8029bee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8029bf2:	4413      	add	r3, r2
 8029bf4:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8029bf8:	461a      	mov	r2, r3
 8029bfa:	2100      	movs	r1, #0
 8029bfc:	f013 f9f0 	bl	803cfe0 <memset>
                }

                rslt = bhy2_hif_set_regs(BHY2_REG_CHAN_CMD, command_buf, trans_len, hif);
 8029c00:	f107 0114 	add.w	r1, r7, #20
 8029c04:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8029c08:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8029c0c:	2000      	movs	r0, #0
 8029c0e:	f000 f9b4 	bl	8029f7a <bhy2_hif_set_regs>
 8029c12:	4603      	mov	r3, r0
 8029c14:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
                if (rslt != BHY2_OK)
 8029c18:	f997 3137 	ldrsb.w	r3, [r7, #311]	; 0x137
 8029c1c:	2b00      	cmp	r3, #0
 8029c1e:	d11b      	bne.n	8029c58 <bhy2_hif_exec_cmd_generic+0x39c>
                {
                    break;
                }
                pos = 0;
 8029c20:	2300      	movs	r3, #0
 8029c22:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
                remain -= copy_len;
 8029c26:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8029c2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8029c2e:	1ad3      	subs	r3, r2, r3
 8029c30:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
                loop_remain_len = remain;
 8029c34:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8029c38:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
            while ((loop_remain_len > 0) && (rslt == BHY2_OK))
 8029c3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8029c40:	2b00      	cmp	r3, #0
 8029c42:	d00f      	beq.n	8029c64 <bhy2_hif_exec_cmd_generic+0x3a8>
 8029c44:	f997 3137 	ldrsb.w	r3, [r7, #311]	; 0x137
 8029c48:	2b00      	cmp	r3, #0
 8029c4a:	f43f af04 	beq.w	8029a56 <bhy2_hif_exec_cmd_generic+0x19a>
        if (hif->read_write_len != 0)
 8029c4e:	e009      	b.n	8029c64 <bhy2_hif_exec_cmd_generic+0x3a8>
            }

        }
        else
        {
            rslt = BHY2_E_INVALID_PARAM;
 8029c50:	23fe      	movs	r3, #254	; 0xfe
 8029c52:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
        if (hif->read_write_len != 0)
 8029c56:	e005      	b.n	8029c64 <bhy2_hif_exec_cmd_generic+0x3a8>
                    break;
 8029c58:	bf00      	nop
        if (hif->read_write_len != 0)
 8029c5a:	e003      	b.n	8029c64 <bhy2_hif_exec_cmd_generic+0x3a8>
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8029c5c:	23ff      	movs	r3, #255	; 0xff
 8029c5e:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8029c62:	e000      	b.n	8029c66 <bhy2_hif_exec_cmd_generic+0x3aa>
        if (hif->read_write_len != 0)
 8029c64:	bf00      	nop
    }

    return rslt;
 8029c66:	f997 3137 	ldrsb.w	r3, [r7, #311]	; 0x137
}
 8029c6a:	4618      	mov	r0, r3
 8029c6c:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8029c70:	46bd      	mov	sp, r7
 8029c72:	bd90      	pop	{r4, r7, pc}

08029c74 <bhy2_wait_status_ready>:

static int8_t bhy2_wait_status_ready(struct bhy2_hif_dev *hif)
{
 8029c74:	b580      	push	{r7, lr}
 8029c76:	b084      	sub	sp, #16
 8029c78:	af00      	add	r7, sp, #0
 8029c7a:	6078      	str	r0, [r7, #4]
    uint16_t retry;
    uint8_t int_status;
    int8_t rslt;

    /* Wait status ready */
    for (retry = 0; retry < BHY2_QUERY_PARAM_STATUS_READY_MAX_RETRY; ++retry)
 8029c7c:	2300      	movs	r3, #0
 8029c7e:	81fb      	strh	r3, [r7, #14]
 8029c80:	e027      	b.n	8029cd2 <bhy2_wait_status_ready+0x5e>
    {
        rslt = bhy2_hif_get_interrupt_status(&int_status, hif);
 8029c82:	f107 030c 	add.w	r3, r7, #12
 8029c86:	6879      	ldr	r1, [r7, #4]
 8029c88:	4618      	mov	r0, r3
 8029c8a:	f000 fab1 	bl	802a1f0 <bhy2_hif_get_interrupt_status>
 8029c8e:	4603      	mov	r3, r0
 8029c90:	737b      	strb	r3, [r7, #13]
        if (rslt == BHY2_OK)
 8029c92:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8029c96:	2b00      	cmp	r3, #0
 8029c98:	d115      	bne.n	8029cc6 <bhy2_wait_status_ready+0x52>
        {
            if (int_status & BHY2_IST_MASK_STATUS)
 8029c9a:	7b3b      	ldrb	r3, [r7, #12]
 8029c9c:	f003 0320 	and.w	r3, r3, #32
 8029ca0:	2b00      	cmp	r3, #0
 8029ca2:	d002      	beq.n	8029caa <bhy2_wait_status_ready+0x36>
            {
                rslt = BHY2_OK;
 8029ca4:	2300      	movs	r3, #0
 8029ca6:	737b      	strb	r3, [r7, #13]
                break;
 8029ca8:	e017      	b.n	8029cda <bhy2_wait_status_ready+0x66>
            }

            /* 10ms */
            rslt = bhy2_hif_delay_us(10000, hif);
 8029caa:	6879      	ldr	r1, [r7, #4]
 8029cac:	f242 7010 	movw	r0, #10000	; 0x2710
 8029cb0:	f000 f99b 	bl	8029fea <bhy2_hif_delay_us>
 8029cb4:	4603      	mov	r3, r0
 8029cb6:	737b      	strb	r3, [r7, #13]
            if (rslt != BHY2_OK)
 8029cb8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8029cbc:	2b00      	cmp	r3, #0
 8029cbe:	d005      	beq.n	8029ccc <bhy2_wait_status_ready+0x58>
            {
                return rslt;
 8029cc0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8029cc4:	e00b      	b.n	8029cde <bhy2_wait_status_ready+0x6a>
            }
        }
        else
        {
            return rslt; /*break; */
 8029cc6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8029cca:	e008      	b.n	8029cde <bhy2_wait_status_ready+0x6a>
    for (retry = 0; retry < BHY2_QUERY_PARAM_STATUS_READY_MAX_RETRY; ++retry)
 8029ccc:	89fb      	ldrh	r3, [r7, #14]
 8029cce:	3301      	adds	r3, #1
 8029cd0:	81fb      	strh	r3, [r7, #14]
 8029cd2:	89fb      	ldrh	r3, [r7, #14]
 8029cd4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8029cd8:	d3d3      	bcc.n	8029c82 <bhy2_wait_status_ready+0xe>
        }
    }

    return rslt;
 8029cda:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 8029cde:	4618      	mov	r0, r3
 8029ce0:	3710      	adds	r7, #16
 8029ce2:	46bd      	mov	sp, r7
 8029ce4:	bd80      	pop	{r7, pc}

08029ce6 <bhy2_hif_check_boot_status_ram>:

static int8_t bhy2_hif_check_boot_status_ram(struct bhy2_hif_dev *hif)
{
 8029ce6:	b580      	push	{r7, lr}
 8029ce8:	b084      	sub	sp, #16
 8029cea:	af00      	add	r7, sp, #0
 8029cec:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint16_t i;
    uint8_t boot_status;

    /* total 5s */
    for (i = 0; i < BHY2_BST_CHECK_RETRY; ++i)
 8029cee:	2300      	movs	r3, #0
 8029cf0:	81fb      	strh	r3, [r7, #14]
 8029cf2:	e02f      	b.n	8029d54 <bhy2_hif_check_boot_status_ram+0x6e>
    {
        /* 50ms */
        rslt = bhy2_hif_delay_us(50000, hif);
 8029cf4:	6879      	ldr	r1, [r7, #4]
 8029cf6:	f24c 3050 	movw	r0, #50000	; 0xc350
 8029cfa:	f000 f976 	bl	8029fea <bhy2_hif_delay_us>
 8029cfe:	4603      	mov	r3, r0
 8029d00:	737b      	strb	r3, [r7, #13]
        if (rslt < 0)
 8029d02:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8029d06:	2b00      	cmp	r3, #0
 8029d08:	da02      	bge.n	8029d10 <bhy2_hif_check_boot_status_ram+0x2a>
        {
            return rslt;
 8029d0a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8029d0e:	e02d      	b.n	8029d6c <bhy2_hif_check_boot_status_ram+0x86>
        }

        rslt = bhy2_hif_get_regs(BHY2_REG_BOOT_STATUS, &boot_status, sizeof(boot_status), hif);
 8029d10:	f107 010c 	add.w	r1, r7, #12
 8029d14:	687b      	ldr	r3, [r7, #4]
 8029d16:	2201      	movs	r2, #1
 8029d18:	2025      	movs	r0, #37	; 0x25
 8029d1a:	f000 f8f6 	bl	8029f0a <bhy2_hif_get_regs>
 8029d1e:	4603      	mov	r3, r0
 8029d20:	737b      	strb	r3, [r7, #13]
        if (rslt < 0)
 8029d22:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8029d26:	2b00      	cmp	r3, #0
 8029d28:	da02      	bge.n	8029d30 <bhy2_hif_check_boot_status_ram+0x4a>
        {
            return rslt;
 8029d2a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8029d2e:	e01d      	b.n	8029d6c <bhy2_hif_check_boot_status_ram+0x86>
        }

        if ((boot_status & BHY2_BST_HOST_INTERFACE_READY) && (boot_status & BHY2_BST_HOST_FW_VERIFY_DONE) &&
 8029d30:	7b3b      	ldrb	r3, [r7, #12]
 8029d32:	f003 0310 	and.w	r3, r3, #16
 8029d36:	2b00      	cmp	r3, #0
 8029d38:	d009      	beq.n	8029d4e <bhy2_hif_check_boot_status_ram+0x68>
 8029d3a:	7b3b      	ldrb	r3, [r7, #12]
 8029d3c:	f003 0320 	and.w	r3, r3, #32
 8029d40:	2b00      	cmp	r3, #0
 8029d42:	d004      	beq.n	8029d4e <bhy2_hif_check_boot_status_ram+0x68>
            (!(boot_status & BHY2_BST_HOST_FW_VERIFY_ERROR)))
 8029d44:	7b3b      	ldrb	r3, [r7, #12]
 8029d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
        if ((boot_status & BHY2_BST_HOST_INTERFACE_READY) && (boot_status & BHY2_BST_HOST_FW_VERIFY_DONE) &&
 8029d4a:	2b00      	cmp	r3, #0
 8029d4c:	d006      	beq.n	8029d5c <bhy2_hif_check_boot_status_ram+0x76>
    for (i = 0; i < BHY2_BST_CHECK_RETRY; ++i)
 8029d4e:	89fb      	ldrh	r3, [r7, #14]
 8029d50:	3301      	adds	r3, #1
 8029d52:	81fb      	strh	r3, [r7, #14]
 8029d54:	89fb      	ldrh	r3, [r7, #14]
 8029d56:	2b63      	cmp	r3, #99	; 0x63
 8029d58:	d9cc      	bls.n	8029cf4 <bhy2_hif_check_boot_status_ram+0xe>
 8029d5a:	e000      	b.n	8029d5e <bhy2_hif_check_boot_status_ram+0x78>
        {
            break;
 8029d5c:	bf00      	nop
        }
    }

    if (i == BHY2_BST_CHECK_RETRY)
 8029d5e:	89fb      	ldrh	r3, [r7, #14]
 8029d60:	2b64      	cmp	r3, #100	; 0x64
 8029d62:	d102      	bne.n	8029d6a <bhy2_hif_check_boot_status_ram+0x84>
    {
        return BHY2_E_TIMEOUT;
 8029d64:	f06f 0304 	mvn.w	r3, #4
 8029d68:	e000      	b.n	8029d6c <bhy2_hif_check_boot_status_ram+0x86>
    }

    return BHY2_OK;
 8029d6a:	2300      	movs	r3, #0
}
 8029d6c:	4618      	mov	r0, r3
 8029d6e:	3710      	adds	r7, #16
 8029d70:	46bd      	mov	sp, r7
 8029d72:	bd80      	pop	{r7, pc}

08029d74 <bhy2_hif_get_fifo>:
                                uint8_t *fifo,
                                uint32_t fifo_len,
                                uint32_t *bytes_read,
                                uint32_t *bytes_remain,
                                struct bhy2_hif_dev *hif)
{
 8029d74:	b580      	push	{r7, lr}
 8029d76:	b08a      	sub	sp, #40	; 0x28
 8029d78:	af00      	add	r7, sp, #0
 8029d7a:	60b9      	str	r1, [r7, #8]
 8029d7c:	607a      	str	r2, [r7, #4]
 8029d7e:	603b      	str	r3, [r7, #0]
 8029d80:	4603      	mov	r3, r0
 8029d82:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8029d84:	2300      	movs	r3, #0
 8029d86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint8_t n_bytes[2];
    uint32_t read_len;
    uint32_t read_write_len;
    uint32_t offset;

    if ((hif != NULL) && (fifo != NULL) && (bytes_read != NULL) && (bytes_remain != NULL))
 8029d8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8029d8c:	2b00      	cmp	r3, #0
 8029d8e:	d072      	beq.n	8029e76 <bhy2_hif_get_fifo+0x102>
 8029d90:	68bb      	ldr	r3, [r7, #8]
 8029d92:	2b00      	cmp	r3, #0
 8029d94:	d06f      	beq.n	8029e76 <bhy2_hif_get_fifo+0x102>
 8029d96:	683b      	ldr	r3, [r7, #0]
 8029d98:	2b00      	cmp	r3, #0
 8029d9a:	d06c      	beq.n	8029e76 <bhy2_hif_get_fifo+0x102>
 8029d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8029d9e:	2b00      	cmp	r3, #0
 8029da0:	d069      	beq.n	8029e76 <bhy2_hif_get_fifo+0x102>
    {
        read_write_len = hif->read_write_len;
 8029da2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8029da4:	699b      	ldr	r3, [r3, #24]
 8029da6:	61bb      	str	r3, [r7, #24]

        if (*bytes_remain == 0)
 8029da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8029daa:	681b      	ldr	r3, [r3, #0]
 8029dac:	2b00      	cmp	r3, #0
 8029dae:	d114      	bne.n	8029dda <bhy2_hif_get_fifo+0x66>
        {
            rslt = bhy2_hif_get_regs(reg, n_bytes, 2, hif); /* Read the the available size */
 8029db0:	f107 0114 	add.w	r1, r7, #20
 8029db4:	7bf8      	ldrb	r0, [r7, #15]
 8029db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8029db8:	2202      	movs	r2, #2
 8029dba:	f000 f8a6 	bl	8029f0a <bhy2_hif_get_regs>
 8029dbe:	4603      	mov	r3, r0
 8029dc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            *bytes_remain = BHY2_LE2U16(n_bytes);
 8029dc4:	7d3b      	ldrb	r3, [r7, #20]
 8029dc6:	b21a      	sxth	r2, r3
 8029dc8:	7d7b      	ldrb	r3, [r7, #21]
 8029dca:	021b      	lsls	r3, r3, #8
 8029dcc:	b21b      	sxth	r3, r3
 8029dce:	4313      	orrs	r3, r2
 8029dd0:	b21b      	sxth	r3, r3
 8029dd2:	b29b      	uxth	r3, r3
 8029dd4:	461a      	mov	r2, r3
 8029dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8029dd8:	601a      	str	r2, [r3, #0]
        }

        if ((*bytes_remain != 0) && (rslt == BHY2_OK))
 8029dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8029ddc:	681b      	ldr	r3, [r3, #0]
 8029dde:	2b00      	cmp	r3, #0
 8029de0:	d04d      	beq.n	8029e7e <bhy2_hif_get_fifo+0x10a>
 8029de2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8029de6:	2b00      	cmp	r3, #0
 8029de8:	d149      	bne.n	8029e7e <bhy2_hif_get_fifo+0x10a>
        {
            if (fifo_len < *bytes_remain)
 8029dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8029dec:	681b      	ldr	r3, [r3, #0]
 8029dee:	687a      	ldr	r2, [r7, #4]
 8029df0:	429a      	cmp	r2, r3
 8029df2:	d203      	bcs.n	8029dfc <bhy2_hif_get_fifo+0x88>
            {
                *bytes_read = fifo_len;
 8029df4:	683b      	ldr	r3, [r7, #0]
 8029df6:	687a      	ldr	r2, [r7, #4]
 8029df8:	601a      	str	r2, [r3, #0]
 8029dfa:	e003      	b.n	8029e04 <bhy2_hif_get_fifo+0x90>
            }
            else
            {
                *bytes_read = *bytes_remain;
 8029dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8029dfe:	681a      	ldr	r2, [r3, #0]
 8029e00:	683b      	ldr	r3, [r7, #0]
 8029e02:	601a      	str	r2, [r3, #0]
            }
            read_len = *bytes_read;
 8029e04:	683b      	ldr	r3, [r7, #0]
 8029e06:	681b      	ldr	r3, [r3, #0]
 8029e08:	623b      	str	r3, [r7, #32]
            offset = 0;
 8029e0a:	2300      	movs	r3, #0
 8029e0c:	61fb      	str	r3, [r7, #28]
            while (read_len > read_write_len)
 8029e0e:	e016      	b.n	8029e3e <bhy2_hif_get_fifo+0xca>
            {
                rslt = bhy2_hif_get_regs(reg, &fifo[offset], read_write_len, hif);
 8029e10:	68ba      	ldr	r2, [r7, #8]
 8029e12:	69fb      	ldr	r3, [r7, #28]
 8029e14:	18d1      	adds	r1, r2, r3
 8029e16:	7bf8      	ldrb	r0, [r7, #15]
 8029e18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8029e1a:	69ba      	ldr	r2, [r7, #24]
 8029e1c:	f000 f875 	bl	8029f0a <bhy2_hif_get_regs>
 8029e20:	4603      	mov	r3, r0
 8029e22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                if (rslt != BHY2_OK)
 8029e26:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8029e2a:	2b00      	cmp	r3, #0
 8029e2c:	d10c      	bne.n	8029e48 <bhy2_hif_get_fifo+0xd4>
                {
                    break;
                }
                read_len -= read_write_len;
 8029e2e:	6a3a      	ldr	r2, [r7, #32]
 8029e30:	69bb      	ldr	r3, [r7, #24]
 8029e32:	1ad3      	subs	r3, r2, r3
 8029e34:	623b      	str	r3, [r7, #32]
                offset += read_write_len;
 8029e36:	69fa      	ldr	r2, [r7, #28]
 8029e38:	69bb      	ldr	r3, [r7, #24]
 8029e3a:	4413      	add	r3, r2
 8029e3c:	61fb      	str	r3, [r7, #28]
            while (read_len > read_write_len)
 8029e3e:	6a3a      	ldr	r2, [r7, #32]
 8029e40:	69bb      	ldr	r3, [r7, #24]
 8029e42:	429a      	cmp	r2, r3
 8029e44:	d8e4      	bhi.n	8029e10 <bhy2_hif_get_fifo+0x9c>
 8029e46:	e000      	b.n	8029e4a <bhy2_hif_get_fifo+0xd6>
                    break;
 8029e48:	bf00      	nop
            }

            if (read_len != 0)
 8029e4a:	6a3b      	ldr	r3, [r7, #32]
 8029e4c:	2b00      	cmp	r3, #0
 8029e4e:	d00a      	beq.n	8029e66 <bhy2_hif_get_fifo+0xf2>
            {
                rslt = bhy2_hif_get_regs(reg, &fifo[offset], read_len, hif);
 8029e50:	68ba      	ldr	r2, [r7, #8]
 8029e52:	69fb      	ldr	r3, [r7, #28]
 8029e54:	18d1      	adds	r1, r2, r3
 8029e56:	7bf8      	ldrb	r0, [r7, #15]
 8029e58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8029e5a:	6a3a      	ldr	r2, [r7, #32]
 8029e5c:	f000 f855 	bl	8029f0a <bhy2_hif_get_regs>
 8029e60:	4603      	mov	r3, r0
 8029e62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            *bytes_remain -= *bytes_read;
 8029e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8029e68:	681a      	ldr	r2, [r3, #0]
 8029e6a:	683b      	ldr	r3, [r7, #0]
 8029e6c:	681b      	ldr	r3, [r3, #0]
 8029e6e:	1ad2      	subs	r2, r2, r3
 8029e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8029e72:	601a      	str	r2, [r3, #0]
        if ((*bytes_remain != 0) && (rslt == BHY2_OK))
 8029e74:	e003      	b.n	8029e7e <bhy2_hif_get_fifo+0x10a>
        }

    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8029e76:	23ff      	movs	r3, #255	; 0xff
 8029e78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8029e7c:	e000      	b.n	8029e80 <bhy2_hif_get_fifo+0x10c>
        if ((*bytes_remain != 0) && (rslt == BHY2_OK))
 8029e7e:	bf00      	nop
    }

    return rslt;
 8029e80:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8029e84:	4618      	mov	r0, r3
 8029e86:	3728      	adds	r7, #40	; 0x28
 8029e88:	46bd      	mov	sp, r7
 8029e8a:	bd80      	pop	{r7, pc}

08029e8c <bhy2_hif_init>:
                     bhy2_write_fptr_t write,
                     bhy2_delay_us_fptr_t delay_us,
                     uint32_t read_write_len,
                     void *intf_ptr,
                     struct bhy2_hif_dev *hif)
{
 8029e8c:	b480      	push	{r7}
 8029e8e:	b087      	sub	sp, #28
 8029e90:	af00      	add	r7, sp, #0
 8029e92:	60b9      	str	r1, [r7, #8]
 8029e94:	607a      	str	r2, [r7, #4]
 8029e96:	603b      	str	r3, [r7, #0]
 8029e98:	4603      	mov	r3, r0
 8029e9a:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8029e9c:	2300      	movs	r3, #0
 8029e9e:	75fb      	strb	r3, [r7, #23]

    if ((hif != NULL) && (read != NULL) && (write != NULL) && (delay_us != NULL))
 8029ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029ea2:	2b00      	cmp	r3, #0
 8029ea4:	d027      	beq.n	8029ef6 <bhy2_hif_init+0x6a>
 8029ea6:	68bb      	ldr	r3, [r7, #8]
 8029ea8:	2b00      	cmp	r3, #0
 8029eaa:	d024      	beq.n	8029ef6 <bhy2_hif_init+0x6a>
 8029eac:	687b      	ldr	r3, [r7, #4]
 8029eae:	2b00      	cmp	r3, #0
 8029eb0:	d021      	beq.n	8029ef6 <bhy2_hif_init+0x6a>
 8029eb2:	683b      	ldr	r3, [r7, #0]
 8029eb4:	2b00      	cmp	r3, #0
 8029eb6:	d01e      	beq.n	8029ef6 <bhy2_hif_init+0x6a>
    {
        hif->read = read;
 8029eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029eba:	68ba      	ldr	r2, [r7, #8]
 8029ebc:	601a      	str	r2, [r3, #0]
        hif->write = write;
 8029ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029ec0:	687a      	ldr	r2, [r7, #4]
 8029ec2:	605a      	str	r2, [r3, #4]
        hif->delay_us = delay_us;
 8029ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029ec6:	683a      	ldr	r2, [r7, #0]
 8029ec8:	609a      	str	r2, [r3, #8]
        hif->intf_ptr = intf_ptr;
 8029eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029ecc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8029ece:	611a      	str	r2, [r3, #16]
        hif->intf = intf;
 8029ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029ed2:	7bfa      	ldrb	r2, [r7, #15]
 8029ed4:	731a      	strb	r2, [r3, #12]
        if (read_write_len % 4)
 8029ed6:	6a3b      	ldr	r3, [r7, #32]
 8029ed8:	f003 0303 	and.w	r3, r3, #3
 8029edc:	2b00      	cmp	r3, #0
 8029ede:	d006      	beq.n	8029eee <bhy2_hif_init+0x62>
        {
            hif->read_write_len = ((read_write_len >> 2) + 1) << 2;
 8029ee0:	6a3b      	ldr	r3, [r7, #32]
 8029ee2:	089b      	lsrs	r3, r3, #2
 8029ee4:	3301      	adds	r3, #1
 8029ee6:	009a      	lsls	r2, r3, #2
 8029ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029eea:	619a      	str	r2, [r3, #24]
        if (read_write_len % 4)
 8029eec:	e005      	b.n	8029efa <bhy2_hif_init+0x6e>
        }
        else
        {
            hif->read_write_len = read_write_len;
 8029eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029ef0:	6a3a      	ldr	r2, [r7, #32]
 8029ef2:	619a      	str	r2, [r3, #24]
        if (read_write_len % 4)
 8029ef4:	e001      	b.n	8029efa <bhy2_hif_init+0x6e>
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8029ef6:	23ff      	movs	r3, #255	; 0xff
 8029ef8:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8029efa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8029efe:	4618      	mov	r0, r3
 8029f00:	371c      	adds	r7, #28
 8029f02:	46bd      	mov	sp, r7
 8029f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029f08:	4770      	bx	lr

08029f0a <bhy2_hif_get_regs>:

int8_t bhy2_hif_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, struct bhy2_hif_dev *hif)
{
 8029f0a:	b590      	push	{r4, r7, lr}
 8029f0c:	b087      	sub	sp, #28
 8029f0e:	af00      	add	r7, sp, #0
 8029f10:	60b9      	str	r1, [r7, #8]
 8029f12:	607a      	str	r2, [r7, #4]
 8029f14:	603b      	str	r3, [r7, #0]
 8029f16:	4603      	mov	r3, r0
 8029f18:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8029f1a:	2300      	movs	r3, #0
 8029f1c:	75fb      	strb	r3, [r7, #23]

    if ((hif != NULL) && (hif->read != NULL) && (reg_data != NULL))
 8029f1e:	683b      	ldr	r3, [r7, #0]
 8029f20:	2b00      	cmp	r3, #0
 8029f22:	d022      	beq.n	8029f6a <bhy2_hif_get_regs+0x60>
 8029f24:	683b      	ldr	r3, [r7, #0]
 8029f26:	681b      	ldr	r3, [r3, #0]
 8029f28:	2b00      	cmp	r3, #0
 8029f2a:	d01e      	beq.n	8029f6a <bhy2_hif_get_regs+0x60>
 8029f2c:	68bb      	ldr	r3, [r7, #8]
 8029f2e:	2b00      	cmp	r3, #0
 8029f30:	d01b      	beq.n	8029f6a <bhy2_hif_get_regs+0x60>
    {
        if (hif->intf == BHY2_SPI_INTERFACE)
 8029f32:	683b      	ldr	r3, [r7, #0]
 8029f34:	7b1b      	ldrb	r3, [r3, #12]
 8029f36:	2b01      	cmp	r3, #1
 8029f38:	d103      	bne.n	8029f42 <bhy2_hif_get_regs+0x38>
        {
            reg_addr |= BHY2_SPI_RD_MASK;
 8029f3a:	7bfb      	ldrb	r3, [r7, #15]
 8029f3c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8029f40:	73fb      	strb	r3, [r7, #15]
        }

        hif->intf_rslt = hif->read(reg_addr, reg_data, length, hif->intf_ptr);
 8029f42:	683b      	ldr	r3, [r7, #0]
 8029f44:	681c      	ldr	r4, [r3, #0]
 8029f46:	683b      	ldr	r3, [r7, #0]
 8029f48:	691b      	ldr	r3, [r3, #16]
 8029f4a:	7bf8      	ldrb	r0, [r7, #15]
 8029f4c:	687a      	ldr	r2, [r7, #4]
 8029f4e:	68b9      	ldr	r1, [r7, #8]
 8029f50:	47a0      	blx	r4
 8029f52:	4603      	mov	r3, r0
 8029f54:	461a      	mov	r2, r3
 8029f56:	683b      	ldr	r3, [r7, #0]
 8029f58:	751a      	strb	r2, [r3, #20]
        if (hif->intf_rslt != BHY2_INTF_RET_SUCCESS)
 8029f5a:	683b      	ldr	r3, [r7, #0]
 8029f5c:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8029f60:	2b00      	cmp	r3, #0
 8029f62:	d004      	beq.n	8029f6e <bhy2_hif_get_regs+0x64>
        {
            rslt = BHY2_E_IO;
 8029f64:	23fd      	movs	r3, #253	; 0xfd
 8029f66:	75fb      	strb	r3, [r7, #23]
        if (hif->intf_rslt != BHY2_INTF_RET_SUCCESS)
 8029f68:	e001      	b.n	8029f6e <bhy2_hif_get_regs+0x64>
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8029f6a:	23ff      	movs	r3, #255	; 0xff
 8029f6c:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8029f6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8029f72:	4618      	mov	r0, r3
 8029f74:	371c      	adds	r7, #28
 8029f76:	46bd      	mov	sp, r7
 8029f78:	bd90      	pop	{r4, r7, pc}

08029f7a <bhy2_hif_set_regs>:

int8_t bhy2_hif_set_regs(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, struct bhy2_hif_dev *hif)
{
 8029f7a:	b590      	push	{r4, r7, lr}
 8029f7c:	b087      	sub	sp, #28
 8029f7e:	af00      	add	r7, sp, #0
 8029f80:	60b9      	str	r1, [r7, #8]
 8029f82:	607a      	str	r2, [r7, #4]
 8029f84:	603b      	str	r3, [r7, #0]
 8029f86:	4603      	mov	r3, r0
 8029f88:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8029f8a:	2300      	movs	r3, #0
 8029f8c:	75fb      	strb	r3, [r7, #23]

    if ((hif != NULL) && (hif->read != NULL) && (reg_data != NULL))
 8029f8e:	683b      	ldr	r3, [r7, #0]
 8029f90:	2b00      	cmp	r3, #0
 8029f92:	d022      	beq.n	8029fda <bhy2_hif_set_regs+0x60>
 8029f94:	683b      	ldr	r3, [r7, #0]
 8029f96:	681b      	ldr	r3, [r3, #0]
 8029f98:	2b00      	cmp	r3, #0
 8029f9a:	d01e      	beq.n	8029fda <bhy2_hif_set_regs+0x60>
 8029f9c:	68bb      	ldr	r3, [r7, #8]
 8029f9e:	2b00      	cmp	r3, #0
 8029fa0:	d01b      	beq.n	8029fda <bhy2_hif_set_regs+0x60>
    {
        if (hif->intf == BHY2_SPI_INTERFACE)
 8029fa2:	683b      	ldr	r3, [r7, #0]
 8029fa4:	7b1b      	ldrb	r3, [r3, #12]
 8029fa6:	2b01      	cmp	r3, #1
 8029fa8:	d103      	bne.n	8029fb2 <bhy2_hif_set_regs+0x38>
        {
            reg_addr &= BHY2_SPI_WR_MASK;
 8029faa:	7bfb      	ldrb	r3, [r7, #15]
 8029fac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8029fb0:	73fb      	strb	r3, [r7, #15]
        }

        hif->intf_rslt = hif->write(reg_addr, reg_data, length, hif->intf_ptr);
 8029fb2:	683b      	ldr	r3, [r7, #0]
 8029fb4:	685c      	ldr	r4, [r3, #4]
 8029fb6:	683b      	ldr	r3, [r7, #0]
 8029fb8:	691b      	ldr	r3, [r3, #16]
 8029fba:	7bf8      	ldrb	r0, [r7, #15]
 8029fbc:	687a      	ldr	r2, [r7, #4]
 8029fbe:	68b9      	ldr	r1, [r7, #8]
 8029fc0:	47a0      	blx	r4
 8029fc2:	4603      	mov	r3, r0
 8029fc4:	461a      	mov	r2, r3
 8029fc6:	683b      	ldr	r3, [r7, #0]
 8029fc8:	751a      	strb	r2, [r3, #20]
        if (hif->intf_rslt != BHY2_INTF_RET_SUCCESS)
 8029fca:	683b      	ldr	r3, [r7, #0]
 8029fcc:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8029fd0:	2b00      	cmp	r3, #0
 8029fd2:	d004      	beq.n	8029fde <bhy2_hif_set_regs+0x64>
        {
            rslt = BHY2_E_IO;
 8029fd4:	23fd      	movs	r3, #253	; 0xfd
 8029fd6:	75fb      	strb	r3, [r7, #23]
        if (hif->intf_rslt != BHY2_INTF_RET_SUCCESS)
 8029fd8:	e001      	b.n	8029fde <bhy2_hif_set_regs+0x64>
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8029fda:	23ff      	movs	r3, #255	; 0xff
 8029fdc:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8029fde:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8029fe2:	4618      	mov	r0, r3
 8029fe4:	371c      	adds	r7, #28
 8029fe6:	46bd      	mov	sp, r7
 8029fe8:	bd90      	pop	{r4, r7, pc}

08029fea <bhy2_hif_delay_us>:

int8_t bhy2_hif_delay_us(uint32_t period_us, const struct bhy2_hif_dev *hif)
{
 8029fea:	b580      	push	{r7, lr}
 8029fec:	b084      	sub	sp, #16
 8029fee:	af00      	add	r7, sp, #0
 8029ff0:	6078      	str	r0, [r7, #4]
 8029ff2:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8029ff4:	2300      	movs	r3, #0
 8029ff6:	73fb      	strb	r3, [r7, #15]

    if ((hif != NULL) && (hif->delay_us != NULL))
 8029ff8:	683b      	ldr	r3, [r7, #0]
 8029ffa:	2b00      	cmp	r3, #0
 8029ffc:	d00b      	beq.n	802a016 <bhy2_hif_delay_us+0x2c>
 8029ffe:	683b      	ldr	r3, [r7, #0]
 802a000:	689b      	ldr	r3, [r3, #8]
 802a002:	2b00      	cmp	r3, #0
 802a004:	d007      	beq.n	802a016 <bhy2_hif_delay_us+0x2c>
    {
        hif->delay_us(period_us, hif->intf_ptr);
 802a006:	683b      	ldr	r3, [r7, #0]
 802a008:	689b      	ldr	r3, [r3, #8]
 802a00a:	683a      	ldr	r2, [r7, #0]
 802a00c:	6912      	ldr	r2, [r2, #16]
 802a00e:	4611      	mov	r1, r2
 802a010:	6878      	ldr	r0, [r7, #4]
 802a012:	4798      	blx	r3
 802a014:	e001      	b.n	802a01a <bhy2_hif_delay_us+0x30>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 802a016:	23ff      	movs	r3, #255	; 0xff
 802a018:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 802a01a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 802a01e:	4618      	mov	r0, r3
 802a020:	3710      	adds	r7, #16
 802a022:	46bd      	mov	sp, r7
 802a024:	bd80      	pop	{r7, pc}

0802a026 <bhy2_hif_exec_cmd>:

int8_t bhy2_hif_exec_cmd(uint16_t cmd, const uint8_t *payload, uint32_t length, struct bhy2_hif_dev *hif)
{
 802a026:	b580      	push	{r7, lr}
 802a028:	b088      	sub	sp, #32
 802a02a:	af04      	add	r7, sp, #16
 802a02c:	60b9      	str	r1, [r7, #8]
 802a02e:	607a      	str	r2, [r7, #4]
 802a030:	603b      	str	r3, [r7, #0]
 802a032:	4603      	mov	r3, r0
 802a034:	81fb      	strh	r3, [r7, #14]
    return bhy2_hif_exec_cmd_generic(cmd, payload, length, NULL, 0, 0, hif);
 802a036:	89f8      	ldrh	r0, [r7, #14]
 802a038:	683b      	ldr	r3, [r7, #0]
 802a03a:	9302      	str	r3, [sp, #8]
 802a03c:	2300      	movs	r3, #0
 802a03e:	9301      	str	r3, [sp, #4]
 802a040:	2300      	movs	r3, #0
 802a042:	9300      	str	r3, [sp, #0]
 802a044:	2300      	movs	r3, #0
 802a046:	687a      	ldr	r2, [r7, #4]
 802a048:	68b9      	ldr	r1, [r7, #8]
 802a04a:	f7ff fc37 	bl	80298bc <bhy2_hif_exec_cmd_generic>
 802a04e:	4603      	mov	r3, r0
}
 802a050:	4618      	mov	r0, r3
 802a052:	3710      	adds	r7, #16
 802a054:	46bd      	mov	sp, r7
 802a056:	bd80      	pop	{r7, pc}

0802a058 <bhy2_hif_get_parameter>:
int8_t bhy2_hif_get_parameter(uint16_t param,
                              uint8_t *payload,
                              uint32_t payload_len,
                              uint32_t *actual_len,
                              struct bhy2_hif_dev *hif)
{
 802a058:	b580      	push	{r7, lr}
 802a05a:	b088      	sub	sp, #32
 802a05c:	af02      	add	r7, sp, #8
 802a05e:	60b9      	str	r1, [r7, #8]
 802a060:	607a      	str	r2, [r7, #4]
 802a062:	603b      	str	r3, [r7, #0]
 802a064:	4603      	mov	r3, r0
 802a066:	81fb      	strh	r3, [r7, #14]
    uint16_t code = 0;
 802a068:	2300      	movs	r3, #0
 802a06a:	82bb      	strh	r3, [r7, #20]
    uint8_t prev_hif_ctrl, hif_ctrl;
    int8_t rslt = BHY2_OK;
 802a06c:	2300      	movs	r3, #0
 802a06e:	75fb      	strb	r3, [r7, #23]

    if ((hif != NULL) && (payload != NULL) && (actual_len != NULL))
 802a070:	6a3b      	ldr	r3, [r7, #32]
 802a072:	2b00      	cmp	r3, #0
 802a074:	d06e      	beq.n	802a154 <bhy2_hif_get_parameter+0xfc>
 802a076:	68bb      	ldr	r3, [r7, #8]
 802a078:	2b00      	cmp	r3, #0
 802a07a:	d06b      	beq.n	802a154 <bhy2_hif_get_parameter+0xfc>
 802a07c:	683b      	ldr	r3, [r7, #0]
 802a07e:	2b00      	cmp	r3, #0
 802a080:	d068      	beq.n	802a154 <bhy2_hif_get_parameter+0xfc>
    {
        *actual_len = 0;
 802a082:	683b      	ldr	r3, [r7, #0]
 802a084:	2200      	movs	r2, #0
 802a086:	601a      	str	r2, [r3, #0]

        rslt = bhy2_hif_get_regs(BHY2_REG_HOST_INTERFACE_CTRL, &hif_ctrl, 1, hif);
 802a088:	f107 0113 	add.w	r1, r7, #19
 802a08c:	6a3b      	ldr	r3, [r7, #32]
 802a08e:	2201      	movs	r2, #1
 802a090:	2006      	movs	r0, #6
 802a092:	f7ff ff3a 	bl	8029f0a <bhy2_hif_get_regs>
 802a096:	4603      	mov	r3, r0
 802a098:	75fb      	strb	r3, [r7, #23]
        if (rslt == BHY2_OK)
 802a09a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 802a09e:	2b00      	cmp	r3, #0
 802a0a0:	d15b      	bne.n	802a15a <bhy2_hif_get_parameter+0x102>
        {
            prev_hif_ctrl = hif_ctrl;
 802a0a2:	7cfb      	ldrb	r3, [r7, #19]
 802a0a4:	75bb      	strb	r3, [r7, #22]
            hif_ctrl &= (uint8_t)(~(BHY2_HIF_CTRL_ASYNC_STATUS_CHANNEL)); /* Change the Status FIFO to synchronous mode
 802a0a6:	7cfb      	ldrb	r3, [r7, #19]
 802a0a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802a0ac:	b2db      	uxtb	r3, r3
 802a0ae:	74fb      	strb	r3, [r7, #19]
                                                                           * */
            if (hif_ctrl != prev_hif_ctrl)
 802a0b0:	7cfb      	ldrb	r3, [r7, #19]
 802a0b2:	7dba      	ldrb	r2, [r7, #22]
 802a0b4:	429a      	cmp	r2, r3
 802a0b6:	d008      	beq.n	802a0ca <bhy2_hif_get_parameter+0x72>
            {
                rslt = bhy2_hif_set_regs(BHY2_REG_HOST_INTERFACE_CTRL, &hif_ctrl, 1, hif);
 802a0b8:	f107 0113 	add.w	r1, r7, #19
 802a0bc:	6a3b      	ldr	r3, [r7, #32]
 802a0be:	2201      	movs	r2, #1
 802a0c0:	2006      	movs	r0, #6
 802a0c2:	f7ff ff5a 	bl	8029f7a <bhy2_hif_set_regs>
 802a0c6:	4603      	mov	r3, r0
 802a0c8:	75fb      	strb	r3, [r7, #23]
            }

            if (rslt == BHY2_OK)
 802a0ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 802a0ce:	2b00      	cmp	r3, #0
 802a0d0:	d143      	bne.n	802a15a <bhy2_hif_get_parameter+0x102>
            {
                rslt = bhy2_hif_exec_cmd(param | BHY2_PARAM_READ_MASK, NULL, 0, hif);
 802a0d2:	89fb      	ldrh	r3, [r7, #14]
 802a0d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 802a0d8:	b298      	uxth	r0, r3
 802a0da:	6a3b      	ldr	r3, [r7, #32]
 802a0dc:	2200      	movs	r2, #0
 802a0de:	2100      	movs	r1, #0
 802a0e0:	f7ff ffa1 	bl	802a026 <bhy2_hif_exec_cmd>
 802a0e4:	4603      	mov	r3, r0
 802a0e6:	75fb      	strb	r3, [r7, #23]

                if (rslt == BHY2_OK)
 802a0e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 802a0ec:	2b00      	cmp	r3, #0
 802a0ee:	d134      	bne.n	802a15a <bhy2_hif_get_parameter+0x102>
                {
                    rslt = bhy2_wait_status_ready(hif);
 802a0f0:	6a38      	ldr	r0, [r7, #32]
 802a0f2:	f7ff fdbf 	bl	8029c74 <bhy2_wait_status_ready>
 802a0f6:	4603      	mov	r3, r0
 802a0f8:	75fb      	strb	r3, [r7, #23]

                    if (rslt == BHY2_OK)
 802a0fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 802a0fe:	2b00      	cmp	r3, #0
 802a100:	d12b      	bne.n	802a15a <bhy2_hif_get_parameter+0x102>
                    {
                        rslt = bhy2_hif_get_status_fifo(&code, payload, payload_len, actual_len, hif);
 802a102:	f107 0014 	add.w	r0, r7, #20
 802a106:	6a3b      	ldr	r3, [r7, #32]
 802a108:	9300      	str	r3, [sp, #0]
 802a10a:	683b      	ldr	r3, [r7, #0]
 802a10c:	687a      	ldr	r2, [r7, #4]
 802a10e:	68b9      	ldr	r1, [r7, #8]
 802a110:	f000 f94b 	bl	802a3aa <bhy2_hif_get_status_fifo>
 802a114:	4603      	mov	r3, r0
 802a116:	75fb      	strb	r3, [r7, #23]

                        if (rslt == BHY2_OK)
 802a118:	f997 3017 	ldrsb.w	r3, [r7, #23]
 802a11c:	2b00      	cmp	r3, #0
 802a11e:	d11c      	bne.n	802a15a <bhy2_hif_get_parameter+0x102>
                        {
                            if (hif_ctrl != prev_hif_ctrl)
 802a120:	7cfb      	ldrb	r3, [r7, #19]
 802a122:	7dba      	ldrb	r2, [r7, #22]
 802a124:	429a      	cmp	r2, r3
 802a126:	d00a      	beq.n	802a13e <bhy2_hif_get_parameter+0xe6>
                            {
                                hif_ctrl = prev_hif_ctrl;
 802a128:	7dbb      	ldrb	r3, [r7, #22]
 802a12a:	74fb      	strb	r3, [r7, #19]
                                rslt = bhy2_hif_set_regs(BHY2_REG_HOST_INTERFACE_CTRL, &hif_ctrl, 1, hif);
 802a12c:	f107 0113 	add.w	r1, r7, #19
 802a130:	6a3b      	ldr	r3, [r7, #32]
 802a132:	2201      	movs	r2, #1
 802a134:	2006      	movs	r0, #6
 802a136:	f7ff ff20 	bl	8029f7a <bhy2_hif_set_regs>
 802a13a:	4603      	mov	r3, r0
 802a13c:	75fb      	strb	r3, [r7, #23]
                            }

                            if (rslt == BHY2_OK)
 802a13e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 802a142:	2b00      	cmp	r3, #0
 802a144:	d109      	bne.n	802a15a <bhy2_hif_get_parameter+0x102>
                            {
                                if (code != param)
 802a146:	8abb      	ldrh	r3, [r7, #20]
 802a148:	89fa      	ldrh	r2, [r7, #14]
 802a14a:	429a      	cmp	r2, r3
 802a14c:	d005      	beq.n	802a15a <bhy2_hif_get_parameter+0x102>
                                {
                                    rslt = BHY2_E_TIMEOUT;
 802a14e:	23fb      	movs	r3, #251	; 0xfb
 802a150:	75fb      	strb	r3, [r7, #23]
        if (rslt == BHY2_OK)
 802a152:	e002      	b.n	802a15a <bhy2_hif_get_parameter+0x102>
            }
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 802a154:	23ff      	movs	r3, #255	; 0xff
 802a156:	75fb      	strb	r3, [r7, #23]
 802a158:	e000      	b.n	802a15c <bhy2_hif_get_parameter+0x104>
        if (rslt == BHY2_OK)
 802a15a:	bf00      	nop
    }

    return rslt;
 802a15c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 802a160:	4618      	mov	r0, r3
 802a162:	3718      	adds	r7, #24
 802a164:	46bd      	mov	sp, r7
 802a166:	bd80      	pop	{r7, pc}

0802a168 <bhy2_hif_get_product_id>:
{
    return bhy2_hif_exec_cmd(param, payload, length, hif);
}

int8_t bhy2_hif_get_product_id(uint8_t *product_id, struct bhy2_hif_dev *hif)
{
 802a168:	b580      	push	{r7, lr}
 802a16a:	b082      	sub	sp, #8
 802a16c:	af00      	add	r7, sp, #0
 802a16e:	6078      	str	r0, [r7, #4]
 802a170:	6039      	str	r1, [r7, #0]
    return bhy2_hif_get_regs(BHY2_REG_PRODUCT_ID, product_id, 1, hif);
 802a172:	683b      	ldr	r3, [r7, #0]
 802a174:	2201      	movs	r2, #1
 802a176:	6879      	ldr	r1, [r7, #4]
 802a178:	201c      	movs	r0, #28
 802a17a:	f7ff fec6 	bl	8029f0a <bhy2_hif_get_regs>
 802a17e:	4603      	mov	r3, r0
}
 802a180:	4618      	mov	r0, r3
 802a182:	3708      	adds	r7, #8
 802a184:	46bd      	mov	sp, r7
 802a186:	bd80      	pop	{r7, pc}

0802a188 <bhy2_hif_get_kernel_version>:

    return rslt;
}

int8_t bhy2_hif_get_kernel_version(uint16_t *kernel_version, struct bhy2_hif_dev *hif)
{
 802a188:	b580      	push	{r7, lr}
 802a18a:	b084      	sub	sp, #16
 802a18c:	af00      	add	r7, sp, #0
 802a18e:	6078      	str	r0, [r7, #4]
 802a190:	6039      	str	r1, [r7, #0]
    uint8_t buffer[2];
    int8_t rslt;

    if (kernel_version != NULL)
 802a192:	687b      	ldr	r3, [r7, #4]
 802a194:	2b00      	cmp	r3, #0
 802a196:	d013      	beq.n	802a1c0 <bhy2_hif_get_kernel_version+0x38>
    {
        rslt = bhy2_hif_get_regs(BHY2_REG_KERNEL_VERSION_0, buffer, 2, hif);
 802a198:	f107 010c 	add.w	r1, r7, #12
 802a19c:	683b      	ldr	r3, [r7, #0]
 802a19e:	2202      	movs	r2, #2
 802a1a0:	2020      	movs	r0, #32
 802a1a2:	f7ff feb2 	bl	8029f0a <bhy2_hif_get_regs>
 802a1a6:	4603      	mov	r3, r0
 802a1a8:	73fb      	strb	r3, [r7, #15]
        *kernel_version = BHY2_LE2U16(buffer);
 802a1aa:	7b3b      	ldrb	r3, [r7, #12]
 802a1ac:	b21a      	sxth	r2, r3
 802a1ae:	7b7b      	ldrb	r3, [r7, #13]
 802a1b0:	021b      	lsls	r3, r3, #8
 802a1b2:	b21b      	sxth	r3, r3
 802a1b4:	4313      	orrs	r3, r2
 802a1b6:	b21b      	sxth	r3, r3
 802a1b8:	b29a      	uxth	r2, r3
 802a1ba:	687b      	ldr	r3, [r7, #4]
 802a1bc:	801a      	strh	r2, [r3, #0]
 802a1be:	e001      	b.n	802a1c4 <bhy2_hif_get_kernel_version+0x3c>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 802a1c0:	23ff      	movs	r3, #255	; 0xff
 802a1c2:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 802a1c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 802a1c8:	4618      	mov	r0, r3
 802a1ca:	3710      	adds	r7, #16
 802a1cc:	46bd      	mov	sp, r7
 802a1ce:	bd80      	pop	{r7, pc}

0802a1d0 <bhy2_hif_get_boot_status>:

    return rslt;
}

int8_t bhy2_hif_get_boot_status(uint8_t *boot_status, struct bhy2_hif_dev *hif)
{
 802a1d0:	b580      	push	{r7, lr}
 802a1d2:	b082      	sub	sp, #8
 802a1d4:	af00      	add	r7, sp, #0
 802a1d6:	6078      	str	r0, [r7, #4]
 802a1d8:	6039      	str	r1, [r7, #0]
    return bhy2_hif_get_regs(BHY2_REG_BOOT_STATUS, boot_status, 1, hif);
 802a1da:	683b      	ldr	r3, [r7, #0]
 802a1dc:	2201      	movs	r2, #1
 802a1de:	6879      	ldr	r1, [r7, #4]
 802a1e0:	2025      	movs	r0, #37	; 0x25
 802a1e2:	f7ff fe92 	bl	8029f0a <bhy2_hif_get_regs>
 802a1e6:	4603      	mov	r3, r0
}
 802a1e8:	4618      	mov	r0, r3
 802a1ea:	3708      	adds	r7, #8
 802a1ec:	46bd      	mov	sp, r7
 802a1ee:	bd80      	pop	{r7, pc}

0802a1f0 <bhy2_hif_get_interrupt_status>:
{
    return bhy2_hif_get_regs(BHY2_REG_HOST_STATUS, host_status, 1, hif);
}

int8_t bhy2_hif_get_interrupt_status(uint8_t *int_status, struct bhy2_hif_dev *hif)
{
 802a1f0:	b580      	push	{r7, lr}
 802a1f2:	b082      	sub	sp, #8
 802a1f4:	af00      	add	r7, sp, #0
 802a1f6:	6078      	str	r0, [r7, #4]
 802a1f8:	6039      	str	r1, [r7, #0]
    return bhy2_hif_get_regs(BHY2_REG_INT_STATUS, int_status, 1, hif);
 802a1fa:	683b      	ldr	r3, [r7, #0]
 802a1fc:	2201      	movs	r2, #1
 802a1fe:	6879      	ldr	r1, [r7, #4]
 802a200:	202d      	movs	r0, #45	; 0x2d
 802a202:	f7ff fe82 	bl	8029f0a <bhy2_hif_get_regs>
 802a206:	4603      	mov	r3, r0
}
 802a208:	4618      	mov	r0, r3
 802a20a:	3708      	adds	r7, #8
 802a20c:	46bd      	mov	sp, r7
 802a20e:	bd80      	pop	{r7, pc}

0802a210 <bhy2_hif_reset>:
{
    return bhy2_hif_get_regs(BHY2_REG_ERROR_VALUE, fw_error, 1, hif);
}

int8_t bhy2_hif_reset(struct bhy2_hif_dev *hif)
{
 802a210:	b580      	push	{r7, lr}
 802a212:	b084      	sub	sp, #16
 802a214:	af00      	add	r7, sp, #0
 802a216:	6078      	str	r0, [r7, #4]
    uint8_t reset_req = BHY2_REQUEST_RESET;
 802a218:	2301      	movs	r3, #1
 802a21a:	72fb      	strb	r3, [r7, #11]
    uint8_t boot_status = 0;
 802a21c:	2300      	movs	r3, #0
 802a21e:	72bb      	strb	r3, [r7, #10]
    int8_t rslt;

    /* Timeout at 150ms (15 * 10000 microseconds) */
    uint16_t count = 15;
 802a220:	230f      	movs	r3, #15
 802a222:	81bb      	strh	r3, [r7, #12]

    rslt = bhy2_hif_set_regs(BHY2_REG_RESET_REQ, &reset_req, 1, hif);
 802a224:	f107 010b 	add.w	r1, r7, #11
 802a228:	687b      	ldr	r3, [r7, #4]
 802a22a:	2201      	movs	r2, #1
 802a22c:	2014      	movs	r0, #20
 802a22e:	f7ff fea4 	bl	8029f7a <bhy2_hif_set_regs>
 802a232:	4603      	mov	r3, r0
 802a234:	73fb      	strb	r3, [r7, #15]
    if (rslt == BHY2_OK)
 802a236:	f997 300f 	ldrsb.w	r3, [r7, #15]
 802a23a:	2b00      	cmp	r3, #0
 802a23c:	d12b      	bne.n	802a296 <bhy2_hif_reset+0x86>
    {
        while (count--)
 802a23e:	e01c      	b.n	802a27a <bhy2_hif_reset+0x6a>
        {
            rslt = bhy2_hif_delay_us(10000, hif);
 802a240:	6879      	ldr	r1, [r7, #4]
 802a242:	f242 7010 	movw	r0, #10000	; 0x2710
 802a246:	f7ff fed0 	bl	8029fea <bhy2_hif_delay_us>
 802a24a:	4603      	mov	r3, r0
 802a24c:	73fb      	strb	r3, [r7, #15]
            if (rslt == BHY2_OK)
 802a24e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 802a252:	2b00      	cmp	r3, #0
 802a254:	d111      	bne.n	802a27a <bhy2_hif_reset+0x6a>
            {
                rslt = bhy2_hif_get_regs(BHY2_REG_BOOT_STATUS, &boot_status, 1, hif);
 802a256:	f107 010a 	add.w	r1, r7, #10
 802a25a:	687b      	ldr	r3, [r7, #4]
 802a25c:	2201      	movs	r2, #1
 802a25e:	2025      	movs	r0, #37	; 0x25
 802a260:	f7ff fe53 	bl	8029f0a <bhy2_hif_get_regs>
 802a264:	4603      	mov	r3, r0
 802a266:	73fb      	strb	r3, [r7, #15]
                if (rslt == BHY2_OK)
 802a268:	f997 300f 	ldrsb.w	r3, [r7, #15]
 802a26c:	2b00      	cmp	r3, #0
 802a26e:	d104      	bne.n	802a27a <bhy2_hif_reset+0x6a>
                {
                    if (boot_status & BHY2_BST_HOST_INTERFACE_READY)
 802a270:	7abb      	ldrb	r3, [r7, #10]
 802a272:	f003 0310 	and.w	r3, r3, #16
 802a276:	2b00      	cmp	r3, #0
 802a278:	d105      	bne.n	802a286 <bhy2_hif_reset+0x76>
        while (count--)
 802a27a:	89bb      	ldrh	r3, [r7, #12]
 802a27c:	1e5a      	subs	r2, r3, #1
 802a27e:	81ba      	strh	r2, [r7, #12]
 802a280:	2b00      	cmp	r3, #0
 802a282:	d1dd      	bne.n	802a240 <bhy2_hif_reset+0x30>
 802a284:	e000      	b.n	802a288 <bhy2_hif_reset+0x78>
                    {
                        break;
 802a286:	bf00      	nop
                }
            }

        }

        if (!(boot_status & BHY2_BST_HOST_INTERFACE_READY))
 802a288:	7abb      	ldrb	r3, [r7, #10]
 802a28a:	f003 0310 	and.w	r3, r3, #16
 802a28e:	2b00      	cmp	r3, #0
 802a290:	d101      	bne.n	802a296 <bhy2_hif_reset+0x86>
        {
            rslt = BHY2_E_TIMEOUT;
 802a292:	23fb      	movs	r3, #251	; 0xfb
 802a294:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 802a296:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 802a29a:	4618      	mov	r0, r3
 802a29c:	3710      	adds	r7, #16
 802a29e:	46bd      	mov	sp, r7
 802a2a0:	bd80      	pop	{r7, pc}

0802a2a2 <bhy2_hif_upload_firmware_to_ram>:

int8_t bhy2_hif_upload_firmware_to_ram(const uint8_t *firmware, uint32_t length, struct bhy2_hif_dev *hif)
{
 802a2a2:	b580      	push	{r7, lr}
 802a2a4:	b086      	sub	sp, #24
 802a2a6:	af00      	add	r7, sp, #0
 802a2a8:	60f8      	str	r0, [r7, #12]
 802a2aa:	60b9      	str	r1, [r7, #8]
 802a2ac:	607a      	str	r2, [r7, #4]
    int8_t rslt = BHY2_OK;
 802a2ae:	2300      	movs	r3, #0
 802a2b0:	75fb      	strb	r3, [r7, #23]
    uint16_t magic;

    if ((hif != NULL) && (firmware != NULL))
 802a2b2:	687b      	ldr	r3, [r7, #4]
 802a2b4:	2b00      	cmp	r3, #0
 802a2b6:	d027      	beq.n	802a308 <bhy2_hif_upload_firmware_to_ram+0x66>
 802a2b8:	68fb      	ldr	r3, [r7, #12]
 802a2ba:	2b00      	cmp	r3, #0
 802a2bc:	d024      	beq.n	802a308 <bhy2_hif_upload_firmware_to_ram+0x66>
    {
        magic = BHY2_LE2U16(firmware);
 802a2be:	68fb      	ldr	r3, [r7, #12]
 802a2c0:	781b      	ldrb	r3, [r3, #0]
 802a2c2:	b21a      	sxth	r2, r3
 802a2c4:	68fb      	ldr	r3, [r7, #12]
 802a2c6:	3301      	adds	r3, #1
 802a2c8:	781b      	ldrb	r3, [r3, #0]
 802a2ca:	021b      	lsls	r3, r3, #8
 802a2cc:	b21b      	sxth	r3, r3
 802a2ce:	4313      	orrs	r3, r2
 802a2d0:	b21b      	sxth	r3, r3
 802a2d2:	82bb      	strh	r3, [r7, #20]
        if (magic != BHY2_FW_MAGIC)
 802a2d4:	8abb      	ldrh	r3, [r7, #20]
 802a2d6:	f246 622b 	movw	r2, #26155	; 0x662b
 802a2da:	4293      	cmp	r3, r2
 802a2dc:	d002      	beq.n	802a2e4 <bhy2_hif_upload_firmware_to_ram+0x42>
        {
            rslt = BHY2_E_MAGIC;
 802a2de:	23fc      	movs	r3, #252	; 0xfc
 802a2e0:	75fb      	strb	r3, [r7, #23]
        if (magic != BHY2_FW_MAGIC)
 802a2e2:	e014      	b.n	802a30e <bhy2_hif_upload_firmware_to_ram+0x6c>
        }
        else
        {
            rslt = bhy2_hif_exec_cmd(BHY2_CMD_UPLOAD_TO_PROGRAM_RAM, firmware, length, hif);
 802a2e4:	687b      	ldr	r3, [r7, #4]
 802a2e6:	68ba      	ldr	r2, [r7, #8]
 802a2e8:	68f9      	ldr	r1, [r7, #12]
 802a2ea:	2002      	movs	r0, #2
 802a2ec:	f7ff fe9b 	bl	802a026 <bhy2_hif_exec_cmd>
 802a2f0:	4603      	mov	r3, r0
 802a2f2:	75fb      	strb	r3, [r7, #23]
            if (rslt == BHY2_OK)
 802a2f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 802a2f8:	2b00      	cmp	r3, #0
 802a2fa:	d108      	bne.n	802a30e <bhy2_hif_upload_firmware_to_ram+0x6c>
            {
                rslt = bhy2_hif_check_boot_status_ram(hif);
 802a2fc:	6878      	ldr	r0, [r7, #4]
 802a2fe:	f7ff fcf2 	bl	8029ce6 <bhy2_hif_check_boot_status_ram>
 802a302:	4603      	mov	r3, r0
 802a304:	75fb      	strb	r3, [r7, #23]
        if (magic != BHY2_FW_MAGIC)
 802a306:	e002      	b.n	802a30e <bhy2_hif_upload_firmware_to_ram+0x6c>
            }
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 802a308:	23ff      	movs	r3, #255	; 0xff
 802a30a:	75fb      	strb	r3, [r7, #23]
 802a30c:	e000      	b.n	802a310 <bhy2_hif_upload_firmware_to_ram+0x6e>
        if (magic != BHY2_FW_MAGIC)
 802a30e:	bf00      	nop
    }

    return rslt;
 802a310:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 802a314:	4618      	mov	r0, r3
 802a316:	3718      	adds	r7, #24
 802a318:	46bd      	mov	sp, r7
 802a31a:	bd80      	pop	{r7, pc}

0802a31c <bhy2_hif_boot_program_ram>:

    return rslt;
}

int8_t bhy2_hif_boot_program_ram(struct bhy2_hif_dev *hif)
{
 802a31c:	b580      	push	{r7, lr}
 802a31e:	b084      	sub	sp, #16
 802a320:	af00      	add	r7, sp, #0
 802a322:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    rslt = bhy2_hif_exec_cmd(BHY2_CMD_BOOT_PROGRAM_RAM, NULL, 0, hif);
 802a324:	687b      	ldr	r3, [r7, #4]
 802a326:	2200      	movs	r2, #0
 802a328:	2100      	movs	r1, #0
 802a32a:	2003      	movs	r0, #3
 802a32c:	f7ff fe7b 	bl	802a026 <bhy2_hif_exec_cmd>
 802a330:	4603      	mov	r3, r0
 802a332:	73fb      	strb	r3, [r7, #15]
    if (rslt == BHY2_OK)
 802a334:	f997 300f 	ldrsb.w	r3, [r7, #15]
 802a338:	2b00      	cmp	r3, #0
 802a33a:	d104      	bne.n	802a346 <bhy2_hif_boot_program_ram+0x2a>
    {
        rslt = bhy2_hif_check_boot_status_ram(hif);
 802a33c:	6878      	ldr	r0, [r7, #4]
 802a33e:	f7ff fcd2 	bl	8029ce6 <bhy2_hif_check_boot_status_ram>
 802a342:	4603      	mov	r3, r0
 802a344:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 802a346:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 802a34a:	4618      	mov	r0, r3
 802a34c:	3710      	adds	r7, #16
 802a34e:	46bd      	mov	sp, r7
 802a350:	bd80      	pop	{r7, pc}

0802a352 <bhy2_hif_get_wakeup_fifo>:
int8_t bhy2_hif_get_wakeup_fifo(uint8_t *fifo,
                                uint32_t fifo_len,
                                uint32_t *bytes_read,
                                uint32_t *bytes_remain,
                                struct bhy2_hif_dev *hif)
{
 802a352:	b580      	push	{r7, lr}
 802a354:	b086      	sub	sp, #24
 802a356:	af02      	add	r7, sp, #8
 802a358:	60f8      	str	r0, [r7, #12]
 802a35a:	60b9      	str	r1, [r7, #8]
 802a35c:	607a      	str	r2, [r7, #4]
 802a35e:	603b      	str	r3, [r7, #0]
    return bhy2_hif_get_fifo(BHY2_REG_CHAN_FIFO_W, fifo, fifo_len, bytes_read, bytes_remain, hif);
 802a360:	69bb      	ldr	r3, [r7, #24]
 802a362:	9301      	str	r3, [sp, #4]
 802a364:	683b      	ldr	r3, [r7, #0]
 802a366:	9300      	str	r3, [sp, #0]
 802a368:	687b      	ldr	r3, [r7, #4]
 802a36a:	68ba      	ldr	r2, [r7, #8]
 802a36c:	68f9      	ldr	r1, [r7, #12]
 802a36e:	2001      	movs	r0, #1
 802a370:	f7ff fd00 	bl	8029d74 <bhy2_hif_get_fifo>
 802a374:	4603      	mov	r3, r0
}
 802a376:	4618      	mov	r0, r3
 802a378:	3710      	adds	r7, #16
 802a37a:	46bd      	mov	sp, r7
 802a37c:	bd80      	pop	{r7, pc}

0802a37e <bhy2_hif_get_nonwakeup_fifo>:
int8_t bhy2_hif_get_nonwakeup_fifo(uint8_t *fifo,
                                   uint32_t fifo_len,
                                   uint32_t *bytes_read,
                                   uint32_t *bytes_remain,
                                   struct bhy2_hif_dev *hif)
{
 802a37e:	b580      	push	{r7, lr}
 802a380:	b086      	sub	sp, #24
 802a382:	af02      	add	r7, sp, #8
 802a384:	60f8      	str	r0, [r7, #12]
 802a386:	60b9      	str	r1, [r7, #8]
 802a388:	607a      	str	r2, [r7, #4]
 802a38a:	603b      	str	r3, [r7, #0]
    return bhy2_hif_get_fifo(BHY2_REG_CHAN_FIFO_NW, fifo, fifo_len, bytes_read, bytes_remain, hif);
 802a38c:	69bb      	ldr	r3, [r7, #24]
 802a38e:	9301      	str	r3, [sp, #4]
 802a390:	683b      	ldr	r3, [r7, #0]
 802a392:	9300      	str	r3, [sp, #0]
 802a394:	687b      	ldr	r3, [r7, #4]
 802a396:	68ba      	ldr	r2, [r7, #8]
 802a398:	68f9      	ldr	r1, [r7, #12]
 802a39a:	2002      	movs	r0, #2
 802a39c:	f7ff fcea 	bl	8029d74 <bhy2_hif_get_fifo>
 802a3a0:	4603      	mov	r3, r0
}
 802a3a2:	4618      	mov	r0, r3
 802a3a4:	3710      	adds	r7, #16
 802a3a6:	46bd      	mov	sp, r7
 802a3a8:	bd80      	pop	{r7, pc}

0802a3aa <bhy2_hif_get_status_fifo>:
int8_t bhy2_hif_get_status_fifo(uint16_t *status_code,
                                uint8_t *fifo,
                                uint32_t fifo_len,
                                uint32_t *bytes_remain,
                                struct bhy2_hif_dev *hif)
{
 802a3aa:	b580      	push	{r7, lr}
 802a3ac:	b086      	sub	sp, #24
 802a3ae:	af00      	add	r7, sp, #0
 802a3b0:	60f8      	str	r0, [r7, #12]
 802a3b2:	60b9      	str	r1, [r7, #8]
 802a3b4:	607a      	str	r2, [r7, #4]
 802a3b6:	603b      	str	r3, [r7, #0]
    int8_t rslt;
    uint8_t tmp_fifo[4];

    rslt = bhy2_hif_get_regs(BHY2_REG_CHAN_STATUS, tmp_fifo, 4, hif);
 802a3b8:	f107 0110 	add.w	r1, r7, #16
 802a3bc:	6a3b      	ldr	r3, [r7, #32]
 802a3be:	2204      	movs	r2, #4
 802a3c0:	2003      	movs	r0, #3
 802a3c2:	f7ff fda2 	bl	8029f0a <bhy2_hif_get_regs>
 802a3c6:	4603      	mov	r3, r0
 802a3c8:	75fb      	strb	r3, [r7, #23]
    if (rslt == BHY2_OK)
 802a3ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 802a3ce:	2b00      	cmp	r3, #0
 802a3d0:	d130      	bne.n	802a434 <bhy2_hif_get_status_fifo+0x8a>
    {
        *status_code = BHY2_LE2U16(&tmp_fifo[0]);
 802a3d2:	7c3b      	ldrb	r3, [r7, #16]
 802a3d4:	b21a      	sxth	r2, r3
 802a3d6:	f107 0310 	add.w	r3, r7, #16
 802a3da:	3301      	adds	r3, #1
 802a3dc:	781b      	ldrb	r3, [r3, #0]
 802a3de:	021b      	lsls	r3, r3, #8
 802a3e0:	b21b      	sxth	r3, r3
 802a3e2:	4313      	orrs	r3, r2
 802a3e4:	b21b      	sxth	r3, r3
 802a3e6:	b29a      	uxth	r2, r3
 802a3e8:	68fb      	ldr	r3, [r7, #12]
 802a3ea:	801a      	strh	r2, [r3, #0]
        *bytes_remain = BHY2_LE2U16(&tmp_fifo[2]);
 802a3ec:	7cbb      	ldrb	r3, [r7, #18]
 802a3ee:	b21a      	sxth	r2, r3
 802a3f0:	f107 0310 	add.w	r3, r7, #16
 802a3f4:	3302      	adds	r3, #2
 802a3f6:	3301      	adds	r3, #1
 802a3f8:	781b      	ldrb	r3, [r3, #0]
 802a3fa:	021b      	lsls	r3, r3, #8
 802a3fc:	b21b      	sxth	r3, r3
 802a3fe:	4313      	orrs	r3, r2
 802a400:	b21b      	sxth	r3, r3
 802a402:	b29b      	uxth	r3, r3
 802a404:	461a      	mov	r2, r3
 802a406:	683b      	ldr	r3, [r7, #0]
 802a408:	601a      	str	r2, [r3, #0]
        if (*bytes_remain != 0)
 802a40a:	683b      	ldr	r3, [r7, #0]
 802a40c:	681b      	ldr	r3, [r3, #0]
 802a40e:	2b00      	cmp	r3, #0
 802a410:	d010      	beq.n	802a434 <bhy2_hif_get_status_fifo+0x8a>
        {
            if (fifo_len < *bytes_remain)
 802a412:	683b      	ldr	r3, [r7, #0]
 802a414:	681b      	ldr	r3, [r3, #0]
 802a416:	687a      	ldr	r2, [r7, #4]
 802a418:	429a      	cmp	r2, r3
 802a41a:	d202      	bcs.n	802a422 <bhy2_hif_get_status_fifo+0x78>
            {
                rslt = BHY2_E_BUFFER;
 802a41c:	23fa      	movs	r3, #250	; 0xfa
 802a41e:	75fb      	strb	r3, [r7, #23]
 802a420:	e008      	b.n	802a434 <bhy2_hif_get_status_fifo+0x8a>
            }
            else
            {
                rslt = bhy2_hif_get_regs(BHY2_REG_CHAN_STATUS, fifo, *bytes_remain, hif);
 802a422:	683b      	ldr	r3, [r7, #0]
 802a424:	681a      	ldr	r2, [r3, #0]
 802a426:	6a3b      	ldr	r3, [r7, #32]
 802a428:	68b9      	ldr	r1, [r7, #8]
 802a42a:	2003      	movs	r0, #3
 802a42c:	f7ff fd6d 	bl	8029f0a <bhy2_hif_get_regs>
 802a430:	4603      	mov	r3, r0
 802a432:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    return rslt;
 802a434:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 802a438:	4618      	mov	r0, r3
 802a43a:	3718      	adds	r7, #24
 802a43c:	46bd      	mov	sp, r7
 802a43e:	bd80      	pop	{r7, pc}

0802a440 <bhy2_hif_get_status_fifo_async>:
int8_t bhy2_hif_get_status_fifo_async(uint8_t *fifo,
                                      uint32_t fifo_len,
                                      uint32_t *bytes_read,
                                      uint32_t *bytes_remain,
                                      struct bhy2_hif_dev *hif)
{
 802a440:	b580      	push	{r7, lr}
 802a442:	b086      	sub	sp, #24
 802a444:	af02      	add	r7, sp, #8
 802a446:	60f8      	str	r0, [r7, #12]
 802a448:	60b9      	str	r1, [r7, #8]
 802a44a:	607a      	str	r2, [r7, #4]
 802a44c:	603b      	str	r3, [r7, #0]
    return bhy2_hif_get_fifo(BHY2_REG_CHAN_STATUS, fifo, fifo_len, bytes_read, bytes_remain, hif);
 802a44e:	69bb      	ldr	r3, [r7, #24]
 802a450:	9301      	str	r3, [sp, #4]
 802a452:	683b      	ldr	r3, [r7, #0]
 802a454:	9300      	str	r3, [sp, #0]
 802a456:	687b      	ldr	r3, [r7, #4]
 802a458:	68ba      	ldr	r2, [r7, #8]
 802a45a:	68f9      	ldr	r1, [r7, #12]
 802a45c:	2003      	movs	r0, #3
 802a45e:	f7ff fc89 	bl	8029d74 <bhy2_hif_get_fifo>
 802a462:	4603      	mov	r3, r0
}
 802a464:	4618      	mov	r0, r3
 802a466:	3710      	adds	r7, #16
 802a468:	46bd      	mov	sp, r7
 802a46a:	bd80      	pop	{r7, pc}

0802a46c <bhy2_hif_exec_sensor_conf_cmd>:

int8_t bhy2_hif_exec_sensor_conf_cmd(uint8_t sensor_id,
                                     bhy2_float sample_rate,
                                     uint32_t latency,
                                     struct bhy2_hif_dev *hif)
{
 802a46c:	b580      	push	{r7, lr}
 802a46e:	b088      	sub	sp, #32
 802a470:	af00      	add	r7, sp, #0
 802a472:	4603      	mov	r3, r0
 802a474:	ed87 0a02 	vstr	s0, [r7, #8]
 802a478:	6079      	str	r1, [r7, #4]
 802a47a:	603a      	str	r2, [r7, #0]
 802a47c:	73fb      	strb	r3, [r7, #15]
    uint8_t tmp_buf[8];
    union bhy2_hif_float_u32 sample_rate_u;

    sample_rate_u.as_float = sample_rate;
 802a47e:	68bb      	ldr	r3, [r7, #8]
 802a480:	617b      	str	r3, [r7, #20]

    /* Sample rate is 32bits, latency is 24bits */
    tmp_buf[0] = sensor_id;
 802a482:	7bfb      	ldrb	r3, [r7, #15]
 802a484:	763b      	strb	r3, [r7, #24]
    tmp_buf[1] = (uint8_t)(sample_rate_u.reg & 0xFF);
 802a486:	697b      	ldr	r3, [r7, #20]
 802a488:	b2db      	uxtb	r3, r3
 802a48a:	767b      	strb	r3, [r7, #25]
    tmp_buf[2] = (uint8_t)((sample_rate_u.reg >> 8) & 0xFF);
 802a48c:	697b      	ldr	r3, [r7, #20]
 802a48e:	0a1b      	lsrs	r3, r3, #8
 802a490:	b2db      	uxtb	r3, r3
 802a492:	76bb      	strb	r3, [r7, #26]
    tmp_buf[3] = (uint8_t)((sample_rate_u.reg >> 16) & 0xFF);
 802a494:	697b      	ldr	r3, [r7, #20]
 802a496:	0c1b      	lsrs	r3, r3, #16
 802a498:	b2db      	uxtb	r3, r3
 802a49a:	76fb      	strb	r3, [r7, #27]
    tmp_buf[4] = (uint8_t)((sample_rate_u.reg >> 24) & 0xFF);
 802a49c:	697b      	ldr	r3, [r7, #20]
 802a49e:	0e1b      	lsrs	r3, r3, #24
 802a4a0:	b2db      	uxtb	r3, r3
 802a4a2:	773b      	strb	r3, [r7, #28]
    tmp_buf[5] = (uint8_t)(latency & 0xFF);
 802a4a4:	687b      	ldr	r3, [r7, #4]
 802a4a6:	b2db      	uxtb	r3, r3
 802a4a8:	777b      	strb	r3, [r7, #29]
    tmp_buf[6] = (uint8_t)((latency >> 8) & 0xFF);
 802a4aa:	687b      	ldr	r3, [r7, #4]
 802a4ac:	0a1b      	lsrs	r3, r3, #8
 802a4ae:	b2db      	uxtb	r3, r3
 802a4b0:	77bb      	strb	r3, [r7, #30]
    tmp_buf[7] = (uint8_t)((latency >> 16) & 0xFF);
 802a4b2:	687b      	ldr	r3, [r7, #4]
 802a4b4:	0c1b      	lsrs	r3, r3, #16
 802a4b6:	b2db      	uxtb	r3, r3
 802a4b8:	77fb      	strb	r3, [r7, #31]

    return bhy2_hif_exec_cmd(BHY2_CMD_CONFIG_SENSOR, tmp_buf, 8, hif);
 802a4ba:	f107 0118 	add.w	r1, r7, #24
 802a4be:	683b      	ldr	r3, [r7, #0]
 802a4c0:	2208      	movs	r2, #8
 802a4c2:	200d      	movs	r0, #13
 802a4c4:	f7ff fdaf 	bl	802a026 <bhy2_hif_exec_cmd>
 802a4c8:	4603      	mov	r3, r0
}
 802a4ca:	4618      	mov	r0, r3
 802a4cc:	3720      	adds	r7, #32
 802a4ce:	46bd      	mov	sp, r7
 802a4d0:	bd80      	pop	{r7, pc}

0802a4d2 <bhy2_hif_get_sensor_info>:

    return rslt;
}

int8_t bhy2_hif_get_sensor_info(uint8_t sensor_id, struct bhy2_sensor_info *info, struct bhy2_hif_dev *hif)
{
 802a4d2:	b580      	push	{r7, lr}
 802a4d4:	b090      	sub	sp, #64	; 0x40
 802a4d6:	af02      	add	r7, sp, #8
 802a4d8:	4603      	mov	r3, r0
 802a4da:	60b9      	str	r1, [r7, #8]
 802a4dc:	607a      	str	r2, [r7, #4]
 802a4de:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint32_t length;
    uint8_t bytes[28];

    if (info != NULL)
 802a4e0:	68bb      	ldr	r3, [r7, #8]
 802a4e2:	2b00      	cmp	r3, #0
 802a4e4:	f000 80da 	beq.w	802a69c <bhy2_hif_get_sensor_info+0x1ca>
    {
        /* Checking for a valid sensor ID */
        if (sensor_id > BHY2_SPECIAL_SENSOR_ID_OFFSET)
 802a4e8:	7bfb      	ldrb	r3, [r7, #15]
 802a4ea:	2bf5      	cmp	r3, #245	; 0xf5
 802a4ec:	d903      	bls.n	802a4f6 <bhy2_hif_get_sensor_info+0x24>
        {
            rslt = BHY2_E_INVALID_PARAM;
 802a4ee:	23fe      	movs	r3, #254	; 0xfe
 802a4f0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 802a4f4:	e0d5      	b.n	802a6a2 <bhy2_hif_get_sensor_info+0x1d0>
        }
        else
        {
            rslt = bhy2_hif_get_parameter((uint16_t)(BHY2_PARAM_SENSOR_INFO_0 + sensor_id), bytes, 28, &length, hif);
 802a4f6:	7bfb      	ldrb	r3, [r7, #15]
 802a4f8:	b29b      	uxth	r3, r3
 802a4fa:	f503 7340 	add.w	r3, r3, #768	; 0x300
 802a4fe:	b298      	uxth	r0, r3
 802a500:	f107 0230 	add.w	r2, r7, #48	; 0x30
 802a504:	f107 0114 	add.w	r1, r7, #20
 802a508:	687b      	ldr	r3, [r7, #4]
 802a50a:	9300      	str	r3, [sp, #0]
 802a50c:	4613      	mov	r3, r2
 802a50e:	221c      	movs	r2, #28
 802a510:	f7ff fda2 	bl	802a058 <bhy2_hif_get_parameter>
 802a514:	4603      	mov	r3, r0
 802a516:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            if (rslt == BHY2_OK)
 802a51a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 802a51e:	2b00      	cmp	r3, #0
 802a520:	f040 80bf 	bne.w	802a6a2 <bhy2_hif_get_sensor_info+0x1d0>
            {
                if (length != 28)
 802a524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802a526:	2b1c      	cmp	r3, #28
 802a528:	d003      	beq.n	802a532 <bhy2_hif_get_sensor_info+0x60>
                {
                    rslt = BHY2_E_INVALID_PARAM;
 802a52a:	23fe      	movs	r3, #254	; 0xfe
 802a52c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 802a530:	e0b7      	b.n	802a6a2 <bhy2_hif_get_sensor_info+0x1d0>
                }
                else
                {
                    info->sensor_type = bytes[0];
 802a532:	7d3a      	ldrb	r2, [r7, #20]
 802a534:	68bb      	ldr	r3, [r7, #8]
 802a536:	701a      	strb	r2, [r3, #0]
                    info->driver_id = bytes[1];
 802a538:	7d7a      	ldrb	r2, [r7, #21]
 802a53a:	68bb      	ldr	r3, [r7, #8]
 802a53c:	705a      	strb	r2, [r3, #1]
                    info->driver_version = bytes[2];
 802a53e:	7dba      	ldrb	r2, [r7, #22]
 802a540:	68bb      	ldr	r3, [r7, #8]
 802a542:	709a      	strb	r2, [r3, #2]
                    info->power = bytes[3];
 802a544:	7dfa      	ldrb	r2, [r7, #23]
 802a546:	68bb      	ldr	r3, [r7, #8]
 802a548:	70da      	strb	r2, [r3, #3]
                    info->max_range.bytes[0] = bytes[4];
 802a54a:	7e3a      	ldrb	r2, [r7, #24]
 802a54c:	68bb      	ldr	r3, [r7, #8]
 802a54e:	711a      	strb	r2, [r3, #4]
                    info->max_range.bytes[1] = bytes[5];
 802a550:	7e7a      	ldrb	r2, [r7, #25]
 802a552:	68bb      	ldr	r3, [r7, #8]
 802a554:	715a      	strb	r2, [r3, #5]
                    info->resolution.bytes[0] = bytes[6];
 802a556:	7eba      	ldrb	r2, [r7, #26]
 802a558:	68bb      	ldr	r3, [r7, #8]
 802a55a:	719a      	strb	r2, [r3, #6]
                    info->resolution.bytes[1] = bytes[7];
 802a55c:	7efa      	ldrb	r2, [r7, #27]
 802a55e:	68bb      	ldr	r3, [r7, #8]
 802a560:	71da      	strb	r2, [r3, #7]
                    info->max_rate.bytes[0] = bytes[8];
 802a562:	7f3a      	ldrb	r2, [r7, #28]
 802a564:	68bb      	ldr	r3, [r7, #8]
 802a566:	721a      	strb	r2, [r3, #8]
                    info->max_rate.bytes[1] = bytes[9];
 802a568:	7f7a      	ldrb	r2, [r7, #29]
 802a56a:	68bb      	ldr	r3, [r7, #8]
 802a56c:	725a      	strb	r2, [r3, #9]
                    info->max_rate.bytes[2] = bytes[10];
 802a56e:	7fba      	ldrb	r2, [r7, #30]
 802a570:	68bb      	ldr	r3, [r7, #8]
 802a572:	729a      	strb	r2, [r3, #10]
                    info->max_rate.bytes[3] = bytes[11];
 802a574:	7ffa      	ldrb	r2, [r7, #31]
 802a576:	68bb      	ldr	r3, [r7, #8]
 802a578:	72da      	strb	r2, [r3, #11]
                    info->fifo_reserved.bytes[0] = bytes[12];
 802a57a:	f897 2020 	ldrb.w	r2, [r7, #32]
 802a57e:	68bb      	ldr	r3, [r7, #8]
 802a580:	731a      	strb	r2, [r3, #12]
                    info->fifo_reserved.bytes[1] = bytes[13];
 802a582:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 802a586:	68bb      	ldr	r3, [r7, #8]
 802a588:	735a      	strb	r2, [r3, #13]
                    info->fifo_reserved.bytes[2] = bytes[14];
 802a58a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 802a58e:	68bb      	ldr	r3, [r7, #8]
 802a590:	739a      	strb	r2, [r3, #14]
                    info->fifo_reserved.bytes[3] = bytes[15];
 802a592:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 802a596:	68bb      	ldr	r3, [r7, #8]
 802a598:	73da      	strb	r2, [r3, #15]
                    info->fifo_max.bytes[0] = bytes[16];
 802a59a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 802a59e:	68bb      	ldr	r3, [r7, #8]
 802a5a0:	741a      	strb	r2, [r3, #16]
                    info->fifo_max.bytes[1] = bytes[17];
 802a5a2:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 802a5a6:	68bb      	ldr	r3, [r7, #8]
 802a5a8:	745a      	strb	r2, [r3, #17]
                    info->fifo_max.bytes[2] = bytes[18];
 802a5aa:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 802a5ae:	68bb      	ldr	r3, [r7, #8]
 802a5b0:	749a      	strb	r2, [r3, #18]
                    info->fifo_max.bytes[3] = bytes[19];
 802a5b2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 802a5b6:	68bb      	ldr	r3, [r7, #8]
 802a5b8:	74da      	strb	r2, [r3, #19]
                    info->event_size = bytes[20];
 802a5ba:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 802a5be:	68bb      	ldr	r3, [r7, #8]
 802a5c0:	751a      	strb	r2, [r3, #20]
                    info->min_rate.bytes[0] = bytes[21];
 802a5c2:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 802a5c6:	68bb      	ldr	r3, [r7, #8]
 802a5c8:	761a      	strb	r2, [r3, #24]
                    info->min_rate.bytes[1] = bytes[22];
 802a5ca:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 802a5ce:	68bb      	ldr	r3, [r7, #8]
 802a5d0:	765a      	strb	r2, [r3, #25]
                    info->min_rate.bytes[2] = bytes[23];
 802a5d2:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 802a5d6:	68bb      	ldr	r3, [r7, #8]
 802a5d8:	769a      	strb	r2, [r3, #26]
                    info->min_rate.bytes[3] = bytes[24];
 802a5da:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 802a5de:	68bb      	ldr	r3, [r7, #8]
 802a5e0:	76da      	strb	r2, [r3, #27]
                    info->max_range.u16_val = BHY2_LE2U16(info->max_range.bytes);
 802a5e2:	68bb      	ldr	r3, [r7, #8]
 802a5e4:	791b      	ldrb	r3, [r3, #4]
 802a5e6:	b21a      	sxth	r2, r3
 802a5e8:	68bb      	ldr	r3, [r7, #8]
 802a5ea:	795b      	ldrb	r3, [r3, #5]
 802a5ec:	021b      	lsls	r3, r3, #8
 802a5ee:	b21b      	sxth	r3, r3
 802a5f0:	4313      	orrs	r3, r2
 802a5f2:	b21b      	sxth	r3, r3
 802a5f4:	b29a      	uxth	r2, r3
 802a5f6:	68bb      	ldr	r3, [r7, #8]
 802a5f8:	809a      	strh	r2, [r3, #4]
                    info->resolution.u16_val = BHY2_LE2U16(info->resolution.bytes);
 802a5fa:	68bb      	ldr	r3, [r7, #8]
 802a5fc:	799b      	ldrb	r3, [r3, #6]
 802a5fe:	b21a      	sxth	r2, r3
 802a600:	68bb      	ldr	r3, [r7, #8]
 802a602:	79db      	ldrb	r3, [r3, #7]
 802a604:	021b      	lsls	r3, r3, #8
 802a606:	b21b      	sxth	r3, r3
 802a608:	4313      	orrs	r3, r2
 802a60a:	b21b      	sxth	r3, r3
 802a60c:	b29a      	uxth	r2, r3
 802a60e:	68bb      	ldr	r3, [r7, #8]
 802a610:	80da      	strh	r2, [r3, #6]
                    info->max_rate.u32_val = BHY2_LE2U32(info->max_rate.bytes);
 802a612:	68bb      	ldr	r3, [r7, #8]
 802a614:	7a1b      	ldrb	r3, [r3, #8]
 802a616:	461a      	mov	r2, r3
 802a618:	68bb      	ldr	r3, [r7, #8]
 802a61a:	7a5b      	ldrb	r3, [r3, #9]
 802a61c:	021b      	lsls	r3, r3, #8
 802a61e:	431a      	orrs	r2, r3
 802a620:	68bb      	ldr	r3, [r7, #8]
 802a622:	7a9b      	ldrb	r3, [r3, #10]
 802a624:	041b      	lsls	r3, r3, #16
 802a626:	431a      	orrs	r2, r3
 802a628:	68bb      	ldr	r3, [r7, #8]
 802a62a:	7adb      	ldrb	r3, [r3, #11]
 802a62c:	061b      	lsls	r3, r3, #24
 802a62e:	431a      	orrs	r2, r3
 802a630:	68bb      	ldr	r3, [r7, #8]
 802a632:	609a      	str	r2, [r3, #8]
                    info->fifo_reserved.u32_val = BHY2_LE2U32(info->fifo_reserved.bytes);
 802a634:	68bb      	ldr	r3, [r7, #8]
 802a636:	7b1b      	ldrb	r3, [r3, #12]
 802a638:	461a      	mov	r2, r3
 802a63a:	68bb      	ldr	r3, [r7, #8]
 802a63c:	7b5b      	ldrb	r3, [r3, #13]
 802a63e:	021b      	lsls	r3, r3, #8
 802a640:	431a      	orrs	r2, r3
 802a642:	68bb      	ldr	r3, [r7, #8]
 802a644:	7b9b      	ldrb	r3, [r3, #14]
 802a646:	041b      	lsls	r3, r3, #16
 802a648:	431a      	orrs	r2, r3
 802a64a:	68bb      	ldr	r3, [r7, #8]
 802a64c:	7bdb      	ldrb	r3, [r3, #15]
 802a64e:	061b      	lsls	r3, r3, #24
 802a650:	431a      	orrs	r2, r3
 802a652:	68bb      	ldr	r3, [r7, #8]
 802a654:	60da      	str	r2, [r3, #12]
                    info->fifo_max.u32_val = BHY2_LE2U32(info->fifo_max.bytes);
 802a656:	68bb      	ldr	r3, [r7, #8]
 802a658:	7c1b      	ldrb	r3, [r3, #16]
 802a65a:	461a      	mov	r2, r3
 802a65c:	68bb      	ldr	r3, [r7, #8]
 802a65e:	7c5b      	ldrb	r3, [r3, #17]
 802a660:	021b      	lsls	r3, r3, #8
 802a662:	431a      	orrs	r2, r3
 802a664:	68bb      	ldr	r3, [r7, #8]
 802a666:	7c9b      	ldrb	r3, [r3, #18]
 802a668:	041b      	lsls	r3, r3, #16
 802a66a:	431a      	orrs	r2, r3
 802a66c:	68bb      	ldr	r3, [r7, #8]
 802a66e:	7cdb      	ldrb	r3, [r3, #19]
 802a670:	061b      	lsls	r3, r3, #24
 802a672:	431a      	orrs	r2, r3
 802a674:	68bb      	ldr	r3, [r7, #8]
 802a676:	611a      	str	r2, [r3, #16]
                    info->min_rate.u32_val = BHY2_LE2U32(info->min_rate.bytes);
 802a678:	68bb      	ldr	r3, [r7, #8]
 802a67a:	7e1b      	ldrb	r3, [r3, #24]
 802a67c:	461a      	mov	r2, r3
 802a67e:	68bb      	ldr	r3, [r7, #8]
 802a680:	7e5b      	ldrb	r3, [r3, #25]
 802a682:	021b      	lsls	r3, r3, #8
 802a684:	431a      	orrs	r2, r3
 802a686:	68bb      	ldr	r3, [r7, #8]
 802a688:	7e9b      	ldrb	r3, [r3, #26]
 802a68a:	041b      	lsls	r3, r3, #16
 802a68c:	431a      	orrs	r2, r3
 802a68e:	68bb      	ldr	r3, [r7, #8]
 802a690:	7edb      	ldrb	r3, [r3, #27]
 802a692:	061b      	lsls	r3, r3, #24
 802a694:	431a      	orrs	r2, r3
 802a696:	68bb      	ldr	r3, [r7, #8]
 802a698:	619a      	str	r2, [r3, #24]
 802a69a:	e002      	b.n	802a6a2 <bhy2_hif_get_sensor_info+0x1d0>
            }
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 802a69c:	23ff      	movs	r3, #255	; 0xff
 802a69e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    }

    return rslt;
 802a6a2:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 802a6a6:	4618      	mov	r0, r3
 802a6a8:	3738      	adds	r7, #56	; 0x38
 802a6aa:	46bd      	mov	sp, r7
 802a6ac:	bd80      	pop	{r7, pc}

0802a6ae <bhy2_parse_quaternion>:
{
    *altitude = (float)(data[0] | ((uint32_t)data[1] << 8) | ((uint32_t)data[2] << 16) | ((uint32_t)data[3] << 24));
}

void bhy2_parse_quaternion(const uint8_t *data, struct bhy2_data_quaternion *quaternion)
{
 802a6ae:	b480      	push	{r7}
 802a6b0:	b083      	sub	sp, #12
 802a6b2:	af00      	add	r7, sp, #0
 802a6b4:	6078      	str	r0, [r7, #4]
 802a6b6:	6039      	str	r1, [r7, #0]
    quaternion->x = BHY2_LE2S16(data);
 802a6b8:	687b      	ldr	r3, [r7, #4]
 802a6ba:	781b      	ldrb	r3, [r3, #0]
 802a6bc:	b21a      	sxth	r2, r3
 802a6be:	687b      	ldr	r3, [r7, #4]
 802a6c0:	3301      	adds	r3, #1
 802a6c2:	781b      	ldrb	r3, [r3, #0]
 802a6c4:	021b      	lsls	r3, r3, #8
 802a6c6:	b21b      	sxth	r3, r3
 802a6c8:	4313      	orrs	r3, r2
 802a6ca:	b21a      	sxth	r2, r3
 802a6cc:	683b      	ldr	r3, [r7, #0]
 802a6ce:	801a      	strh	r2, [r3, #0]
    quaternion->y = BHY2_LE2S16(data + 2);
 802a6d0:	687b      	ldr	r3, [r7, #4]
 802a6d2:	3302      	adds	r3, #2
 802a6d4:	781b      	ldrb	r3, [r3, #0]
 802a6d6:	b21a      	sxth	r2, r3
 802a6d8:	687b      	ldr	r3, [r7, #4]
 802a6da:	3303      	adds	r3, #3
 802a6dc:	781b      	ldrb	r3, [r3, #0]
 802a6de:	021b      	lsls	r3, r3, #8
 802a6e0:	b21b      	sxth	r3, r3
 802a6e2:	4313      	orrs	r3, r2
 802a6e4:	b21a      	sxth	r2, r3
 802a6e6:	683b      	ldr	r3, [r7, #0]
 802a6e8:	805a      	strh	r2, [r3, #2]
    quaternion->z = BHY2_LE2S16(data + 4);
 802a6ea:	687b      	ldr	r3, [r7, #4]
 802a6ec:	3304      	adds	r3, #4
 802a6ee:	781b      	ldrb	r3, [r3, #0]
 802a6f0:	b21a      	sxth	r2, r3
 802a6f2:	687b      	ldr	r3, [r7, #4]
 802a6f4:	3305      	adds	r3, #5
 802a6f6:	781b      	ldrb	r3, [r3, #0]
 802a6f8:	021b      	lsls	r3, r3, #8
 802a6fa:	b21b      	sxth	r3, r3
 802a6fc:	4313      	orrs	r3, r2
 802a6fe:	b21a      	sxth	r2, r3
 802a700:	683b      	ldr	r3, [r7, #0]
 802a702:	809a      	strh	r2, [r3, #4]
    quaternion->w = BHY2_LE2S16(data + 6);
 802a704:	687b      	ldr	r3, [r7, #4]
 802a706:	3306      	adds	r3, #6
 802a708:	781b      	ldrb	r3, [r3, #0]
 802a70a:	b21a      	sxth	r2, r3
 802a70c:	687b      	ldr	r3, [r7, #4]
 802a70e:	3307      	adds	r3, #7
 802a710:	781b      	ldrb	r3, [r3, #0]
 802a712:	021b      	lsls	r3, r3, #8
 802a714:	b21b      	sxth	r3, r3
 802a716:	4313      	orrs	r3, r2
 802a718:	b21a      	sxth	r2, r3
 802a71a:	683b      	ldr	r3, [r7, #0]
 802a71c:	80da      	strh	r2, [r3, #6]
    quaternion->accuracy = BHY2_LE2U16(data + 8);
 802a71e:	687b      	ldr	r3, [r7, #4]
 802a720:	3308      	adds	r3, #8
 802a722:	781b      	ldrb	r3, [r3, #0]
 802a724:	b21a      	sxth	r2, r3
 802a726:	687b      	ldr	r3, [r7, #4]
 802a728:	3309      	adds	r3, #9
 802a72a:	781b      	ldrb	r3, [r3, #0]
 802a72c:	021b      	lsls	r3, r3, #8
 802a72e:	b21b      	sxth	r3, r3
 802a730:	4313      	orrs	r3, r2
 802a732:	b21b      	sxth	r3, r3
 802a734:	b29a      	uxth	r2, r3
 802a736:	683b      	ldr	r3, [r7, #0]
 802a738:	811a      	strh	r2, [r3, #8]
}
 802a73a:	bf00      	nop
 802a73c:	370c      	adds	r7, #12
 802a73e:	46bd      	mov	sp, r7
 802a740:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a744:	4770      	bx	lr
	...

0802a748 <MX_COMP2_Init>:

COMP_HandleTypeDef hcomp2;

/* COMP2 init function */
void MX_COMP2_Init(void)
{
 802a748:	b580      	push	{r7, lr}
 802a74a:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 802a74c:	4b12      	ldr	r3, [pc, #72]	; (802a798 <MX_COMP2_Init+0x50>)
 802a74e:	4a13      	ldr	r2, [pc, #76]	; (802a79c <MX_COMP2_Init+0x54>)
 802a750:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INPUT_MINUS_DAC1_CH1;
 802a752:	4b11      	ldr	r3, [pc, #68]	; (802a798 <MX_COMP2_Init+0x50>)
 802a754:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 802a758:	611a      	str	r2, [r3, #16]
  hcomp2.Init.NonInvertingInput = COMP_INPUT_PLUS_IO1;
 802a75a:	4b0f      	ldr	r3, [pc, #60]	; (802a798 <MX_COMP2_Init+0x50>)
 802a75c:	2200      	movs	r2, #0
 802a75e:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 802a760:	4b0d      	ldr	r3, [pc, #52]	; (802a798 <MX_COMP2_Init+0x50>)
 802a762:	2200      	movs	r2, #0
 802a764:	619a      	str	r2, [r3, #24]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 802a766:	4b0c      	ldr	r3, [pc, #48]	; (802a798 <MX_COMP2_Init+0x50>)
 802a768:	2200      	movs	r2, #0
 802a76a:	615a      	str	r2, [r3, #20]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 802a76c:	4b0a      	ldr	r3, [pc, #40]	; (802a798 <MX_COMP2_Init+0x50>)
 802a76e:	2200      	movs	r2, #0
 802a770:	61da      	str	r2, [r3, #28]
  hcomp2.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 802a772:	4b09      	ldr	r3, [pc, #36]	; (802a798 <MX_COMP2_Init+0x50>)
 802a774:	2200      	movs	r2, #0
 802a776:	609a      	str	r2, [r3, #8]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 802a778:	4b07      	ldr	r3, [pc, #28]	; (802a798 <MX_COMP2_Init+0x50>)
 802a77a:	2200      	movs	r2, #0
 802a77c:	605a      	str	r2, [r3, #4]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING;
 802a77e:	4b06      	ldr	r3, [pc, #24]	; (802a798 <MX_COMP2_Init+0x50>)
 802a780:	2211      	movs	r2, #17
 802a782:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 802a784:	4804      	ldr	r0, [pc, #16]	; (802a798 <MX_COMP2_Init+0x50>)
 802a786:	f001 fd0f 	bl	802c1a8 <HAL_COMP_Init>
 802a78a:	4603      	mov	r3, r0
 802a78c:	2b00      	cmp	r3, #0
 802a78e:	d001      	beq.n	802a794 <MX_COMP2_Init+0x4c>
  {
    Error_Handler();
 802a790:	f000 fc18 	bl	802afc4 <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 802a794:	bf00      	nop
 802a796:	bd80      	pop	{r7, pc}
 802a798:	24001498 	.word	0x24001498
 802a79c:	58003810 	.word	0x58003810

0802a7a0 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 802a7a0:	b580      	push	{r7, lr}
 802a7a2:	b08a      	sub	sp, #40	; 0x28
 802a7a4:	af00      	add	r7, sp, #0
 802a7a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802a7a8:	f107 0314 	add.w	r3, r7, #20
 802a7ac:	2200      	movs	r2, #0
 802a7ae:	601a      	str	r2, [r3, #0]
 802a7b0:	605a      	str	r2, [r3, #4]
 802a7b2:	609a      	str	r2, [r3, #8]
 802a7b4:	60da      	str	r2, [r3, #12]
 802a7b6:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP2)
 802a7b8:	687b      	ldr	r3, [r7, #4]
 802a7ba:	681b      	ldr	r3, [r3, #0]
 802a7bc:	4a1c      	ldr	r2, [pc, #112]	; (802a830 <HAL_COMP_MspInit+0x90>)
 802a7be:	4293      	cmp	r3, r2
 802a7c0:	d132      	bne.n	802a828 <HAL_COMP_MspInit+0x88>
  {
  /* USER CODE BEGIN COMP2_MspInit 0 */

  /* USER CODE END COMP2_MspInit 0 */
    /* COMP2 clock enable */
    __HAL_RCC_COMP12_CLK_ENABLE();
 802a7c2:	4b1c      	ldr	r3, [pc, #112]	; (802a834 <HAL_COMP_MspInit+0x94>)
 802a7c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 802a7c8:	4a1a      	ldr	r2, [pc, #104]	; (802a834 <HAL_COMP_MspInit+0x94>)
 802a7ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 802a7ce:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 802a7d2:	4b18      	ldr	r3, [pc, #96]	; (802a834 <HAL_COMP_MspInit+0x94>)
 802a7d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 802a7d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 802a7dc:	613b      	str	r3, [r7, #16]
 802a7de:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 802a7e0:	4b14      	ldr	r3, [pc, #80]	; (802a834 <HAL_COMP_MspInit+0x94>)
 802a7e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802a7e6:	4a13      	ldr	r2, [pc, #76]	; (802a834 <HAL_COMP_MspInit+0x94>)
 802a7e8:	f043 0310 	orr.w	r3, r3, #16
 802a7ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802a7f0:	4b10      	ldr	r3, [pc, #64]	; (802a834 <HAL_COMP_MspInit+0x94>)
 802a7f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802a7f6:	f003 0310 	and.w	r3, r3, #16
 802a7fa:	60fb      	str	r3, [r7, #12]
 802a7fc:	68fb      	ldr	r3, [r7, #12]
    /**COMP2 GPIO Configuration
    PE9     ------> COMP2_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 802a7fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 802a802:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 802a804:	2303      	movs	r3, #3
 802a806:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802a808:	2300      	movs	r3, #0
 802a80a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 802a80c:	f107 0314 	add.w	r3, r7, #20
 802a810:	4619      	mov	r1, r3
 802a812:	4809      	ldr	r0, [pc, #36]	; (802a838 <HAL_COMP_MspInit+0x98>)
 802a814:	f004 ffde 	bl	802f7d4 <HAL_GPIO_Init>

    /* COMP2 interrupt Init */
    HAL_NVIC_SetPriority(COMP_IRQn, 0, 0);
 802a818:	2200      	movs	r2, #0
 802a81a:	2100      	movs	r1, #0
 802a81c:	2089      	movs	r0, #137	; 0x89
 802a81e:	f001 ff86 	bl	802c72e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP_IRQn);
 802a822:	2089      	movs	r0, #137	; 0x89
 802a824:	f001 ff9d 	bl	802c762 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }
}
 802a828:	bf00      	nop
 802a82a:	3728      	adds	r7, #40	; 0x28
 802a82c:	46bd      	mov	sp, r7
 802a82e:	bd80      	pop	{r7, pc}
 802a830:	58003810 	.word	0x58003810
 802a834:	58024400 	.word	0x58024400
 802a838:	58021000 	.word	0x58021000

0802a83c <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 802a83c:	b580      	push	{r7, lr}
 802a83e:	b08a      	sub	sp, #40	; 0x28
 802a840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 802a842:	1d3b      	adds	r3, r7, #4
 802a844:	2224      	movs	r2, #36	; 0x24
 802a846:	2100      	movs	r1, #0
 802a848:	4618      	mov	r0, r3
 802a84a:	f012 fbc9 	bl	803cfe0 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 802a84e:	4b12      	ldr	r3, [pc, #72]	; (802a898 <MX_DAC1_Init+0x5c>)
 802a850:	4a12      	ldr	r2, [pc, #72]	; (802a89c <MX_DAC1_Init+0x60>)
 802a852:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 802a854:	4810      	ldr	r0, [pc, #64]	; (802a898 <MX_DAC1_Init+0x5c>)
 802a856:	f001 ff9e 	bl	802c796 <HAL_DAC_Init>
 802a85a:	4603      	mov	r3, r0
 802a85c:	2b00      	cmp	r3, #0
 802a85e:	d001      	beq.n	802a864 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 802a860:	f000 fbb0 	bl	802afc4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 802a864:	2300      	movs	r3, #0
 802a866:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 802a868:	2300      	movs	r3, #0
 802a86a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 802a86c:	2302      	movs	r3, #2
 802a86e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 802a870:	2302      	movs	r3, #2
 802a872:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 802a874:	2300      	movs	r3, #0
 802a876:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 802a878:	1d3b      	adds	r3, r7, #4
 802a87a:	2200      	movs	r2, #0
 802a87c:	4619      	mov	r1, r3
 802a87e:	4806      	ldr	r0, [pc, #24]	; (802a898 <MX_DAC1_Init+0x5c>)
 802a880:	f002 f822 	bl	802c8c8 <HAL_DAC_ConfigChannel>
 802a884:	4603      	mov	r3, r0
 802a886:	2b00      	cmp	r3, #0
 802a888:	d001      	beq.n	802a88e <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 802a88a:	f000 fb9b 	bl	802afc4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 802a88e:	bf00      	nop
 802a890:	3728      	adds	r7, #40	; 0x28
 802a892:	46bd      	mov	sp, r7
 802a894:	bd80      	pop	{r7, pc}
 802a896:	bf00      	nop
 802a898:	240014c4 	.word	0x240014c4
 802a89c:	40007400 	.word	0x40007400

0802a8a0 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 802a8a0:	b480      	push	{r7}
 802a8a2:	b085      	sub	sp, #20
 802a8a4:	af00      	add	r7, sp, #0
 802a8a6:	6078      	str	r0, [r7, #4]

  if(dacHandle->Instance==DAC1)
 802a8a8:	687b      	ldr	r3, [r7, #4]
 802a8aa:	681b      	ldr	r3, [r3, #0]
 802a8ac:	4a0b      	ldr	r2, [pc, #44]	; (802a8dc <HAL_DAC_MspInit+0x3c>)
 802a8ae:	4293      	cmp	r3, r2
 802a8b0:	d10e      	bne.n	802a8d0 <HAL_DAC_MspInit+0x30>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 802a8b2:	4b0b      	ldr	r3, [pc, #44]	; (802a8e0 <HAL_DAC_MspInit+0x40>)
 802a8b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802a8b8:	4a09      	ldr	r2, [pc, #36]	; (802a8e0 <HAL_DAC_MspInit+0x40>)
 802a8ba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 802a8be:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 802a8c2:	4b07      	ldr	r3, [pc, #28]	; (802a8e0 <HAL_DAC_MspInit+0x40>)
 802a8c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802a8c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 802a8cc:	60fb      	str	r3, [r7, #12]
 802a8ce:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 802a8d0:	bf00      	nop
 802a8d2:	3714      	adds	r7, #20
 802a8d4:	46bd      	mov	sp, r7
 802a8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a8da:	4770      	bx	lr
 802a8dc:	40007400 	.word	0x40007400
 802a8e0:	58024400 	.word	0x58024400

0802a8e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 802a8e4:	b580      	push	{r7, lr}
 802a8e6:	b082      	sub	sp, #8
 802a8e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 802a8ea:	4b19      	ldr	r3, [pc, #100]	; (802a950 <MX_DMA_Init+0x6c>)
 802a8ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 802a8f0:	4a17      	ldr	r2, [pc, #92]	; (802a950 <MX_DMA_Init+0x6c>)
 802a8f2:	f043 0301 	orr.w	r3, r3, #1
 802a8f6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 802a8fa:	4b15      	ldr	r3, [pc, #84]	; (802a950 <MX_DMA_Init+0x6c>)
 802a8fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 802a900:	f003 0301 	and.w	r3, r3, #1
 802a904:	607b      	str	r3, [r7, #4]
 802a906:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 802a908:	2200      	movs	r2, #0
 802a90a:	2100      	movs	r1, #0
 802a90c:	200b      	movs	r0, #11
 802a90e:	f001 ff0e 	bl	802c72e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 802a912:	200b      	movs	r0, #11
 802a914:	f001 ff25 	bl	802c762 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 802a918:	2200      	movs	r2, #0
 802a91a:	2100      	movs	r1, #0
 802a91c:	200c      	movs	r0, #12
 802a91e:	f001 ff06 	bl	802c72e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 802a922:	200c      	movs	r0, #12
 802a924:	f001 ff1d 	bl	802c762 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 802a928:	2200      	movs	r2, #0
 802a92a:	2100      	movs	r1, #0
 802a92c:	200f      	movs	r0, #15
 802a92e:	f001 fefe 	bl	802c72e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 802a932:	200f      	movs	r0, #15
 802a934:	f001 ff15 	bl	802c762 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 802a938:	2200      	movs	r2, #0
 802a93a:	2100      	movs	r1, #0
 802a93c:	2010      	movs	r0, #16
 802a93e:	f001 fef6 	bl	802c72e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 802a942:	2010      	movs	r0, #16
 802a944:	f001 ff0d 	bl	802c762 <HAL_NVIC_EnableIRQ>

}
 802a948:	bf00      	nop
 802a94a:	3708      	adds	r7, #8
 802a94c:	46bd      	mov	sp, r7
 802a94e:	bd80      	pop	{r7, pc}
 802a950:	58024400 	.word	0x58024400

0802a954 <MX_GPIO_Init>:
/** Configure pins
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 802a954:	b580      	push	{r7, lr}
 802a956:	b08a      	sub	sp, #40	; 0x28
 802a958:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802a95a:	f107 0314 	add.w	r3, r7, #20
 802a95e:	2200      	movs	r2, #0
 802a960:	601a      	str	r2, [r3, #0]
 802a962:	605a      	str	r2, [r3, #4]
 802a964:	609a      	str	r2, [r3, #8]
 802a966:	60da      	str	r2, [r3, #12]
 802a968:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 802a96a:	4b3b      	ldr	r3, [pc, #236]	; (802aa58 <MX_GPIO_Init+0x104>)
 802a96c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802a970:	4a39      	ldr	r2, [pc, #228]	; (802aa58 <MX_GPIO_Init+0x104>)
 802a972:	f043 0304 	orr.w	r3, r3, #4
 802a976:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802a97a:	4b37      	ldr	r3, [pc, #220]	; (802aa58 <MX_GPIO_Init+0x104>)
 802a97c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802a980:	f003 0304 	and.w	r3, r3, #4
 802a984:	613b      	str	r3, [r7, #16]
 802a986:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 802a988:	4b33      	ldr	r3, [pc, #204]	; (802aa58 <MX_GPIO_Init+0x104>)
 802a98a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802a98e:	4a32      	ldr	r2, [pc, #200]	; (802aa58 <MX_GPIO_Init+0x104>)
 802a990:	f043 0301 	orr.w	r3, r3, #1
 802a994:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802a998:	4b2f      	ldr	r3, [pc, #188]	; (802aa58 <MX_GPIO_Init+0x104>)
 802a99a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802a99e:	f003 0301 	and.w	r3, r3, #1
 802a9a2:	60fb      	str	r3, [r7, #12]
 802a9a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 802a9a6:	4b2c      	ldr	r3, [pc, #176]	; (802aa58 <MX_GPIO_Init+0x104>)
 802a9a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802a9ac:	4a2a      	ldr	r2, [pc, #168]	; (802aa58 <MX_GPIO_Init+0x104>)
 802a9ae:	f043 0310 	orr.w	r3, r3, #16
 802a9b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802a9b6:	4b28      	ldr	r3, [pc, #160]	; (802aa58 <MX_GPIO_Init+0x104>)
 802a9b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802a9bc:	f003 0310 	and.w	r3, r3, #16
 802a9c0:	60bb      	str	r3, [r7, #8]
 802a9c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 802a9c4:	4b24      	ldr	r3, [pc, #144]	; (802aa58 <MX_GPIO_Init+0x104>)
 802a9c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802a9ca:	4a23      	ldr	r2, [pc, #140]	; (802aa58 <MX_GPIO_Init+0x104>)
 802a9cc:	f043 0302 	orr.w	r3, r3, #2
 802a9d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802a9d4:	4b20      	ldr	r3, [pc, #128]	; (802aa58 <MX_GPIO_Init+0x104>)
 802a9d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802a9da:	f003 0302 	and.w	r3, r3, #2
 802a9de:	607b      	str	r3, [r7, #4]
 802a9e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 802a9e2:	4b1d      	ldr	r3, [pc, #116]	; (802aa58 <MX_GPIO_Init+0x104>)
 802a9e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802a9e8:	4a1b      	ldr	r2, [pc, #108]	; (802aa58 <MX_GPIO_Init+0x104>)
 802a9ea:	f043 0308 	orr.w	r3, r3, #8
 802a9ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802a9f2:	4b19      	ldr	r3, [pc, #100]	; (802aa58 <MX_GPIO_Init+0x104>)
 802a9f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802a9f8:	f003 0308 	and.w	r3, r3, #8
 802a9fc:	603b      	str	r3, [r7, #0]
 802a9fe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAM_SYNC_GPIO_Port, CAM_SYNC_Pin, GPIO_PIN_RESET);
 802aa00:	2200      	movs	r2, #0
 802aa02:	2101      	movs	r1, #1
 802aa04:	4815      	ldr	r0, [pc, #84]	; (802aa5c <MX_GPIO_Init+0x108>)
 802aa06:	f005 f895 	bl	802fb34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_CS_GPIO_Port, IMU_CS_Pin, GPIO_PIN_RESET);
 802aa0a:	2200      	movs	r2, #0
 802aa0c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 802aa10:	4813      	ldr	r0, [pc, #76]	; (802aa60 <MX_GPIO_Init+0x10c>)
 802aa12:	f005 f88f 	bl	802fb34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAM_SYNC_Pin;
 802aa16:	2301      	movs	r3, #1
 802aa18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 802aa1a:	2301      	movs	r3, #1
 802aa1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 802aa1e:	2302      	movs	r3, #2
 802aa20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 802aa22:	2303      	movs	r3, #3
 802aa24:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CAM_SYNC_GPIO_Port, &GPIO_InitStruct);
 802aa26:	f107 0314 	add.w	r3, r7, #20
 802aa2a:	4619      	mov	r1, r3
 802aa2c:	480b      	ldr	r0, [pc, #44]	; (802aa5c <MX_GPIO_Init+0x108>)
 802aa2e:	f004 fed1 	bl	802f7d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_CS_Pin;
 802aa32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 802aa36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 802aa38:	2301      	movs	r3, #1
 802aa3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 802aa3c:	2302      	movs	r3, #2
 802aa3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 802aa40:	2303      	movs	r3, #3
 802aa42:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IMU_CS_GPIO_Port, &GPIO_InitStruct);
 802aa44:	f107 0314 	add.w	r3, r7, #20
 802aa48:	4619      	mov	r1, r3
 802aa4a:	4805      	ldr	r0, [pc, #20]	; (802aa60 <MX_GPIO_Init+0x10c>)
 802aa4c:	f004 fec2 	bl	802f7d4 <HAL_GPIO_Init>

}
 802aa50:	bf00      	nop
 802aa52:	3728      	adds	r7, #40	; 0x28
 802aa54:	46bd      	mov	sp, r7
 802aa56:	bd80      	pop	{r7, pc}
 802aa58:	58024400 	.word	0x58024400
 802aa5c:	58020800 	.word	0x58020800
 802aa60:	58021000 	.word	0x58021000

0802aa64 <MX_I2C2_Init>:
DMA_HandleTypeDef hdma_i2c2_rx;
DMA_HandleTypeDef hdma_i2c2_tx;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 802aa64:	b580      	push	{r7, lr}
 802aa66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 802aa68:	4b1b      	ldr	r3, [pc, #108]	; (802aad8 <MX_I2C2_Init+0x74>)
 802aa6a:	4a1c      	ldr	r2, [pc, #112]	; (802aadc <MX_I2C2_Init+0x78>)
 802aa6c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00B03FDB;
 802aa6e:	4b1a      	ldr	r3, [pc, #104]	; (802aad8 <MX_I2C2_Init+0x74>)
 802aa70:	4a1b      	ldr	r2, [pc, #108]	; (802aae0 <MX_I2C2_Init+0x7c>)
 802aa72:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 802aa74:	4b18      	ldr	r3, [pc, #96]	; (802aad8 <MX_I2C2_Init+0x74>)
 802aa76:	2200      	movs	r2, #0
 802aa78:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 802aa7a:	4b17      	ldr	r3, [pc, #92]	; (802aad8 <MX_I2C2_Init+0x74>)
 802aa7c:	2201      	movs	r2, #1
 802aa7e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 802aa80:	4b15      	ldr	r3, [pc, #84]	; (802aad8 <MX_I2C2_Init+0x74>)
 802aa82:	2200      	movs	r2, #0
 802aa84:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 802aa86:	4b14      	ldr	r3, [pc, #80]	; (802aad8 <MX_I2C2_Init+0x74>)
 802aa88:	2200      	movs	r2, #0
 802aa8a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 802aa8c:	4b12      	ldr	r3, [pc, #72]	; (802aad8 <MX_I2C2_Init+0x74>)
 802aa8e:	2200      	movs	r2, #0
 802aa90:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 802aa92:	4b11      	ldr	r3, [pc, #68]	; (802aad8 <MX_I2C2_Init+0x74>)
 802aa94:	2200      	movs	r2, #0
 802aa96:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 802aa98:	4b0f      	ldr	r3, [pc, #60]	; (802aad8 <MX_I2C2_Init+0x74>)
 802aa9a:	2200      	movs	r2, #0
 802aa9c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 802aa9e:	480e      	ldr	r0, [pc, #56]	; (802aad8 <MX_I2C2_Init+0x74>)
 802aaa0:	f005 f862 	bl	802fb68 <HAL_I2C_Init>
 802aaa4:	4603      	mov	r3, r0
 802aaa6:	2b00      	cmp	r3, #0
 802aaa8:	d001      	beq.n	802aaae <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 802aaaa:	f000 fa8b 	bl	802afc4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 802aaae:	2100      	movs	r1, #0
 802aab0:	4809      	ldr	r0, [pc, #36]	; (802aad8 <MX_I2C2_Init+0x74>)
 802aab2:	f005 ff6e 	bl	8030992 <HAL_I2CEx_ConfigAnalogFilter>
 802aab6:	4603      	mov	r3, r0
 802aab8:	2b00      	cmp	r3, #0
 802aaba:	d001      	beq.n	802aac0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 802aabc:	f000 fa82 	bl	802afc4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 802aac0:	2100      	movs	r1, #0
 802aac2:	4805      	ldr	r0, [pc, #20]	; (802aad8 <MX_I2C2_Init+0x74>)
 802aac4:	f005 ffb0 	bl	8030a28 <HAL_I2CEx_ConfigDigitalFilter>
 802aac8:	4603      	mov	r3, r0
 802aaca:	2b00      	cmp	r3, #0
 802aacc:	d001      	beq.n	802aad2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 802aace:	f000 fa79 	bl	802afc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 802aad2:	bf00      	nop
 802aad4:	bd80      	pop	{r7, pc}
 802aad6:	bf00      	nop
 802aad8:	240014d8 	.word	0x240014d8
 802aadc:	40005800 	.word	0x40005800
 802aae0:	00b03fdb 	.word	0x00b03fdb

0802aae4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 802aae4:	b580      	push	{r7, lr}
 802aae6:	b0b8      	sub	sp, #224	; 0xe0
 802aae8:	af00      	add	r7, sp, #0
 802aaea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802aaec:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 802aaf0:	2200      	movs	r2, #0
 802aaf2:	601a      	str	r2, [r3, #0]
 802aaf4:	605a      	str	r2, [r3, #4]
 802aaf6:	609a      	str	r2, [r3, #8]
 802aaf8:	60da      	str	r2, [r3, #12]
 802aafa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 802aafc:	f107 0310 	add.w	r3, r7, #16
 802ab00:	22bc      	movs	r2, #188	; 0xbc
 802ab02:	2100      	movs	r1, #0
 802ab04:	4618      	mov	r0, r3
 802ab06:	f012 fa6b 	bl	803cfe0 <memset>
  if(i2cHandle->Instance==I2C2)
 802ab0a:	687b      	ldr	r3, [r7, #4]
 802ab0c:	681b      	ldr	r3, [r3, #0]
 802ab0e:	4a5a      	ldr	r2, [pc, #360]	; (802ac78 <HAL_I2C_MspInit+0x194>)
 802ab10:	4293      	cmp	r3, r2
 802ab12:	f040 80ad 	bne.w	802ac70 <HAL_I2C_MspInit+0x18c>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 802ab16:	2308      	movs	r3, #8
 802ab18:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 802ab1a:	2300      	movs	r3, #0
 802ab1c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 802ab20:	f107 0310 	add.w	r3, r7, #16
 802ab24:	4618      	mov	r0, r3
 802ab26:	f008 faa5 	bl	8033074 <HAL_RCCEx_PeriphCLKConfig>
 802ab2a:	4603      	mov	r3, r0
 802ab2c:	2b00      	cmp	r3, #0
 802ab2e:	d001      	beq.n	802ab34 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 802ab30:	f000 fa48 	bl	802afc4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 802ab34:	4b51      	ldr	r3, [pc, #324]	; (802ac7c <HAL_I2C_MspInit+0x198>)
 802ab36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802ab3a:	4a50      	ldr	r2, [pc, #320]	; (802ac7c <HAL_I2C_MspInit+0x198>)
 802ab3c:	f043 0302 	orr.w	r3, r3, #2
 802ab40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802ab44:	4b4d      	ldr	r3, [pc, #308]	; (802ac7c <HAL_I2C_MspInit+0x198>)
 802ab46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802ab4a:	f003 0302 	and.w	r3, r3, #2
 802ab4e:	60fb      	str	r3, [r7, #12]
 802ab50:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 802ab52:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 802ab56:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 802ab5a:	2312      	movs	r3, #18
 802ab5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802ab60:	2300      	movs	r3, #0
 802ab62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802ab66:	2300      	movs	r3, #0
 802ab68:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 802ab6c:	2304      	movs	r3, #4
 802ab6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 802ab72:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 802ab76:	4619      	mov	r1, r3
 802ab78:	4841      	ldr	r0, [pc, #260]	; (802ac80 <HAL_I2C_MspInit+0x19c>)
 802ab7a:	f004 fe2b 	bl	802f7d4 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 802ab7e:	4b3f      	ldr	r3, [pc, #252]	; (802ac7c <HAL_I2C_MspInit+0x198>)
 802ab80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802ab84:	4a3d      	ldr	r2, [pc, #244]	; (802ac7c <HAL_I2C_MspInit+0x198>)
 802ab86:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 802ab8a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 802ab8e:	4b3b      	ldr	r3, [pc, #236]	; (802ac7c <HAL_I2C_MspInit+0x198>)
 802ab90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802ab94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 802ab98:	60bb      	str	r3, [r7, #8]
 802ab9a:	68bb      	ldr	r3, [r7, #8]

    /* I2C2 DMA Init */
    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Stream0;
 802ab9c:	4b39      	ldr	r3, [pc, #228]	; (802ac84 <HAL_I2C_MspInit+0x1a0>)
 802ab9e:	4a3a      	ldr	r2, [pc, #232]	; (802ac88 <HAL_I2C_MspInit+0x1a4>)
 802aba0:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Request = DMA_REQUEST_I2C2_RX;
 802aba2:	4b38      	ldr	r3, [pc, #224]	; (802ac84 <HAL_I2C_MspInit+0x1a0>)
 802aba4:	2223      	movs	r2, #35	; 0x23
 802aba6:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 802aba8:	4b36      	ldr	r3, [pc, #216]	; (802ac84 <HAL_I2C_MspInit+0x1a0>)
 802abaa:	2200      	movs	r2, #0
 802abac:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 802abae:	4b35      	ldr	r3, [pc, #212]	; (802ac84 <HAL_I2C_MspInit+0x1a0>)
 802abb0:	2200      	movs	r2, #0
 802abb2:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 802abb4:	4b33      	ldr	r3, [pc, #204]	; (802ac84 <HAL_I2C_MspInit+0x1a0>)
 802abb6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 802abba:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 802abbc:	4b31      	ldr	r3, [pc, #196]	; (802ac84 <HAL_I2C_MspInit+0x1a0>)
 802abbe:	2200      	movs	r2, #0
 802abc0:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 802abc2:	4b30      	ldr	r3, [pc, #192]	; (802ac84 <HAL_I2C_MspInit+0x1a0>)
 802abc4:	2200      	movs	r2, #0
 802abc6:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 802abc8:	4b2e      	ldr	r3, [pc, #184]	; (802ac84 <HAL_I2C_MspInit+0x1a0>)
 802abca:	2200      	movs	r2, #0
 802abcc:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 802abce:	4b2d      	ldr	r3, [pc, #180]	; (802ac84 <HAL_I2C_MspInit+0x1a0>)
 802abd0:	2200      	movs	r2, #0
 802abd2:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 802abd4:	4b2b      	ldr	r3, [pc, #172]	; (802ac84 <HAL_I2C_MspInit+0x1a0>)
 802abd6:	2200      	movs	r2, #0
 802abd8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 802abda:	482a      	ldr	r0, [pc, #168]	; (802ac84 <HAL_I2C_MspInit+0x1a0>)
 802abdc:	f001 ffa4 	bl	802cb28 <HAL_DMA_Init>
 802abe0:	4603      	mov	r3, r0
 802abe2:	2b00      	cmp	r3, #0
 802abe4:	d001      	beq.n	802abea <HAL_I2C_MspInit+0x106>
    {
      Error_Handler();
 802abe6:	f000 f9ed 	bl	802afc4 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 802abea:	687b      	ldr	r3, [r7, #4]
 802abec:	4a25      	ldr	r2, [pc, #148]	; (802ac84 <HAL_I2C_MspInit+0x1a0>)
 802abee:	63da      	str	r2, [r3, #60]	; 0x3c
 802abf0:	4a24      	ldr	r2, [pc, #144]	; (802ac84 <HAL_I2C_MspInit+0x1a0>)
 802abf2:	687b      	ldr	r3, [r7, #4]
 802abf4:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Stream1;
 802abf6:	4b25      	ldr	r3, [pc, #148]	; (802ac8c <HAL_I2C_MspInit+0x1a8>)
 802abf8:	4a25      	ldr	r2, [pc, #148]	; (802ac90 <HAL_I2C_MspInit+0x1ac>)
 802abfa:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Request = DMA_REQUEST_I2C2_TX;
 802abfc:	4b23      	ldr	r3, [pc, #140]	; (802ac8c <HAL_I2C_MspInit+0x1a8>)
 802abfe:	2224      	movs	r2, #36	; 0x24
 802ac00:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 802ac02:	4b22      	ldr	r3, [pc, #136]	; (802ac8c <HAL_I2C_MspInit+0x1a8>)
 802ac04:	2240      	movs	r2, #64	; 0x40
 802ac06:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 802ac08:	4b20      	ldr	r3, [pc, #128]	; (802ac8c <HAL_I2C_MspInit+0x1a8>)
 802ac0a:	2200      	movs	r2, #0
 802ac0c:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 802ac0e:	4b1f      	ldr	r3, [pc, #124]	; (802ac8c <HAL_I2C_MspInit+0x1a8>)
 802ac10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 802ac14:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 802ac16:	4b1d      	ldr	r3, [pc, #116]	; (802ac8c <HAL_I2C_MspInit+0x1a8>)
 802ac18:	2200      	movs	r2, #0
 802ac1a:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 802ac1c:	4b1b      	ldr	r3, [pc, #108]	; (802ac8c <HAL_I2C_MspInit+0x1a8>)
 802ac1e:	2200      	movs	r2, #0
 802ac20:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 802ac22:	4b1a      	ldr	r3, [pc, #104]	; (802ac8c <HAL_I2C_MspInit+0x1a8>)
 802ac24:	2200      	movs	r2, #0
 802ac26:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 802ac28:	4b18      	ldr	r3, [pc, #96]	; (802ac8c <HAL_I2C_MspInit+0x1a8>)
 802ac2a:	2200      	movs	r2, #0
 802ac2c:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 802ac2e:	4b17      	ldr	r3, [pc, #92]	; (802ac8c <HAL_I2C_MspInit+0x1a8>)
 802ac30:	2200      	movs	r2, #0
 802ac32:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 802ac34:	4815      	ldr	r0, [pc, #84]	; (802ac8c <HAL_I2C_MspInit+0x1a8>)
 802ac36:	f001 ff77 	bl	802cb28 <HAL_DMA_Init>
 802ac3a:	4603      	mov	r3, r0
 802ac3c:	2b00      	cmp	r3, #0
 802ac3e:	d001      	beq.n	802ac44 <HAL_I2C_MspInit+0x160>
    {
      Error_Handler();
 802ac40:	f000 f9c0 	bl	802afc4 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 802ac44:	687b      	ldr	r3, [r7, #4]
 802ac46:	4a11      	ldr	r2, [pc, #68]	; (802ac8c <HAL_I2C_MspInit+0x1a8>)
 802ac48:	639a      	str	r2, [r3, #56]	; 0x38
 802ac4a:	4a10      	ldr	r2, [pc, #64]	; (802ac8c <HAL_I2C_MspInit+0x1a8>)
 802ac4c:	687b      	ldr	r3, [r7, #4]
 802ac4e:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 802ac50:	2200      	movs	r2, #0
 802ac52:	2100      	movs	r1, #0
 802ac54:	2021      	movs	r0, #33	; 0x21
 802ac56:	f001 fd6a 	bl	802c72e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 802ac5a:	2021      	movs	r0, #33	; 0x21
 802ac5c:	f001 fd81 	bl	802c762 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 802ac60:	2200      	movs	r2, #0
 802ac62:	2100      	movs	r1, #0
 802ac64:	2022      	movs	r0, #34	; 0x22
 802ac66:	f001 fd62 	bl	802c72e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 802ac6a:	2022      	movs	r0, #34	; 0x22
 802ac6c:	f001 fd79 	bl	802c762 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 802ac70:	bf00      	nop
 802ac72:	37e0      	adds	r7, #224	; 0xe0
 802ac74:	46bd      	mov	sp, r7
 802ac76:	bd80      	pop	{r7, pc}
 802ac78:	40005800 	.word	0x40005800
 802ac7c:	58024400 	.word	0x58024400
 802ac80:	58020400 	.word	0x58020400
 802ac84:	24001524 	.word	0x24001524
 802ac88:	40020010 	.word	0x40020010
 802ac8c:	2400159c 	.word	0x2400159c
 802ac90:	40020028 	.word	0x40020028

0802ac94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 802ac94:	b590      	push	{r4, r7, lr}
 802ac96:	b08d      	sub	sp, #52	; 0x34
 802ac98:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
	SCB->VTOR = (FLASH_BASE | 0x20000);
 802ac9a:	4b30      	ldr	r3, [pc, #192]	; (802ad5c <main+0xc8>)
 802ac9c:	4a30      	ldr	r2, [pc, #192]	; (802ad60 <main+0xcc>)
 802ac9e:	609a      	str	r2, [r3, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 802aca0:	f001 f9c0 	bl	802c024 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 802aca4:	f000 f86e 	bl	802ad84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 802aca8:	f7ff fe54 	bl	802a954 <MX_GPIO_Init>
  MX_DMA_Init();
 802acac:	f7ff fe1a 	bl	802a8e4 <MX_DMA_Init>
  MX_I2C2_Init();
 802acb0:	f7ff fed8 	bl	802aa64 <MX_I2C2_Init>
  MX_SPI1_Init();
 802acb4:	f000 f98c 	bl	802afd0 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 802acb8:	f011 fbb4 	bl	803c424 <MX_USB_DEVICE_Init>
  MX_USART2_UART_Init();
 802acbc:	f000 ff3a 	bl	802bb34 <MX_USART2_UART_Init>
  MX_UART4_Init();
 802acc0:	f000 fe42 	bl	802b948 <MX_UART4_Init>
  MX_UART7_Init();
 802acc4:	f000 fe92 	bl	802b9ec <MX_UART7_Init>
  MX_UART8_Init();
 802acc8:	f000 fede 	bl	802ba88 <MX_UART8_Init>
  MX_USART3_UART_Init();
 802accc:	f000 ff7e 	bl	802bbcc <MX_USART3_UART_Init>
  MX_TIM3_Init();
 802acd0:	f000 fd3a 	bl	802b748 <MX_TIM3_Init>
  MX_TIM2_Init();
 802acd4:	f000 fcea 	bl	802b6ac <MX_TIM2_Init>
  MX_TIM4_Init();
 802acd8:	f000 fd84 	bl	802b7e4 <MX_TIM4_Init>
  MX_COMP2_Init();
 802acdc:	f7ff fd34 	bl	802a748 <MX_COMP2_Init>
  MX_DAC1_Init();
 802ace0:	f7ff fdac 	bl	802a83c <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */
	HAL_DAC_Start(&hdac1, DAC1_CHANNEL_1);
 802ace4:	2100      	movs	r1, #0
 802ace6:	481f      	ldr	r0, [pc, #124]	; (802ad64 <main+0xd0>)
 802ace8:	f001 fd77 	bl	802c7da <HAL_DAC_Start>
	HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, 4095 * (1 / 3.3));
 802acec:	f44f 639b 	mov.w	r3, #1240	; 0x4d8
 802acf0:	2200      	movs	r2, #0
 802acf2:	2100      	movs	r1, #0
 802acf4:	481b      	ldr	r0, [pc, #108]	; (802ad64 <main+0xd0>)
 802acf6:	f001 fdc2 	bl	802c87e <HAL_DAC_SetValue>
	HAL_TIM_Base_Start_IT(&htim3);
 802acfa:	481b      	ldr	r0, [pc, #108]	; (802ad68 <main+0xd4>)
 802acfc:	f00a fea6 	bl	8035a4c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 802ad00:	481a      	ldr	r0, [pc, #104]	; (802ad6c <main+0xd8>)
 802ad02:	f00a fea3 	bl	8035a4c <HAL_TIM_Base_Start_IT>
	HAL_COMP_Start(&hcomp2);
 802ad06:	481a      	ldr	r0, [pc, #104]	; (802ad70 <main+0xdc>)
 802ad08:	f001 fb78 	bl	802c3fc <HAL_COMP_Start>

	struct MotherboardConfig config;

	config.HeadServiceUart = &huart3;
 802ad0c:	4b19      	ldr	r3, [pc, #100]	; (802ad74 <main+0xe0>)
 802ad0e:	607b      	str	r3, [r7, #4]
	config.HeadStreamUart = &huart4;
 802ad10:	4b19      	ldr	r3, [pc, #100]	; (802ad78 <main+0xe4>)
 802ad12:	60bb      	str	r3, [r7, #8]

	config.HeadTimeout = 10;
 802ad14:	230a      	movs	r3, #10
 802ad16:	60fb      	str	r3, [r7, #12]

	config.BodyUart = &huart8;
 802ad18:	4b18      	ldr	r3, [pc, #96]	; (802ad7c <main+0xe8>)
 802ad1a:	613b      	str	r3, [r7, #16]
	config.BodyTimeout = 10;
 802ad1c:	230a      	movs	r3, #10
 802ad1e:	617b      	str	r3, [r7, #20]

	config.IMUSpi = &hspi1;
 802ad20:	4b17      	ldr	r3, [pc, #92]	; (802ad80 <main+0xec>)
 802ad22:	61bb      	str	r3, [r7, #24]

	config.VersionMajor = 0;
 802ad24:	2300      	movs	r3, #0
 802ad26:	773b      	strb	r3, [r7, #28]
	config.VersionMinor = 1;
 802ad28:	2301      	movs	r3, #1
 802ad2a:	777b      	strb	r3, [r7, #29]

	if (MotherboardInit(config))
 802ad2c:	466c      	mov	r4, sp
 802ad2e:	f107 0314 	add.w	r3, r7, #20
 802ad32:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 802ad36:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 802ad3a:	1d3b      	adds	r3, r7, #4
 802ad3c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802ad3e:	f7f7 fc09 	bl	8022554 <MotherboardInit>
 802ad42:	4603      	mov	r3, r0
 802ad44:	2b00      	cmp	r3, #0
 802ad46:	d001      	beq.n	802ad4c <main+0xb8>
		return 1;
 802ad48:	2301      	movs	r3, #1
 802ad4a:	e002      	b.n	802ad52 <main+0xbe>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		MotherboardTick();
 802ad4c:	f7f7 fc54 	bl	80225f8 <MotherboardTick>
 802ad50:	e7fc      	b.n	802ad4c <main+0xb8>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	}
  /* USER CODE END 3 */
}
 802ad52:	4618      	mov	r0, r3
 802ad54:	3724      	adds	r7, #36	; 0x24
 802ad56:	46bd      	mov	sp, r7
 802ad58:	bd90      	pop	{r4, r7, pc}
 802ad5a:	bf00      	nop
 802ad5c:	e000ed00 	.word	0xe000ed00
 802ad60:	08020000 	.word	0x08020000
 802ad64:	240014c4 	.word	0x240014c4
 802ad68:	240017dc 	.word	0x240017dc
 802ad6c:	24001790 	.word	0x24001790
 802ad70:	24001498 	.word	0x24001498
 802ad74:	24001ab4 	.word	0x24001ab4
 802ad78:	24001874 	.word	0x24001874
 802ad7c:	24001994 	.word	0x24001994
 802ad80:	24001614 	.word	0x24001614

0802ad84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 802ad84:	b580      	push	{r7, lr}
 802ad86:	b09e      	sub	sp, #120	; 0x78
 802ad88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 802ad8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 802ad8e:	224c      	movs	r2, #76	; 0x4c
 802ad90:	2100      	movs	r1, #0
 802ad92:	4618      	mov	r0, r3
 802ad94:	f012 f924 	bl	803cfe0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 802ad98:	f107 030c 	add.w	r3, r7, #12
 802ad9c:	2220      	movs	r2, #32
 802ad9e:	2100      	movs	r1, #0
 802ada0:	4618      	mov	r0, r3
 802ada2:	f012 f91d 	bl	803cfe0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 802ada6:	2002      	movs	r0, #2
 802ada8:	f007 f960 	bl	803206c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 802adac:	2300      	movs	r3, #0
 802adae:	60bb      	str	r3, [r7, #8]
 802adb0:	4b4d      	ldr	r3, [pc, #308]	; (802aee8 <SystemClock_Config+0x164>)
 802adb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802adb4:	4a4c      	ldr	r2, [pc, #304]	; (802aee8 <SystemClock_Config+0x164>)
 802adb6:	f023 0301 	bic.w	r3, r3, #1
 802adba:	62d3      	str	r3, [r2, #44]	; 0x2c
 802adbc:	4b4a      	ldr	r3, [pc, #296]	; (802aee8 <SystemClock_Config+0x164>)
 802adbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802adc0:	f003 0301 	and.w	r3, r3, #1
 802adc4:	60bb      	str	r3, [r7, #8]
 802adc6:	4b49      	ldr	r3, [pc, #292]	; (802aeec <SystemClock_Config+0x168>)
 802adc8:	699b      	ldr	r3, [r3, #24]
 802adca:	4a48      	ldr	r2, [pc, #288]	; (802aeec <SystemClock_Config+0x168>)
 802adcc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 802add0:	6193      	str	r3, [r2, #24]
 802add2:	4b46      	ldr	r3, [pc, #280]	; (802aeec <SystemClock_Config+0x168>)
 802add4:	699b      	ldr	r3, [r3, #24]
 802add6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 802adda:	60bb      	str	r3, [r7, #8]
 802addc:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 802adde:	bf00      	nop
 802ade0:	4b42      	ldr	r3, [pc, #264]	; (802aeec <SystemClock_Config+0x168>)
 802ade2:	699b      	ldr	r3, [r3, #24]
 802ade4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 802ade8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802adec:	d1f8      	bne.n	802ade0 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 802adee:	4b40      	ldr	r3, [pc, #256]	; (802aef0 <SystemClock_Config+0x16c>)
 802adf0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 802adf4:	4a3e      	ldr	r2, [pc, #248]	; (802aef0 <SystemClock_Config+0x16c>)
 802adf6:	f043 0302 	orr.w	r3, r3, #2
 802adfa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 802adfe:	4b3c      	ldr	r3, [pc, #240]	; (802aef0 <SystemClock_Config+0x16c>)
 802ae00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 802ae04:	f003 0302 	and.w	r3, r3, #2
 802ae08:	607b      	str	r3, [r7, #4]
 802ae0a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 802ae0c:	2300      	movs	r3, #0
 802ae0e:	603b      	str	r3, [r7, #0]
 802ae10:	4b36      	ldr	r3, [pc, #216]	; (802aeec <SystemClock_Config+0x168>)
 802ae12:	699b      	ldr	r3, [r3, #24]
 802ae14:	4a35      	ldr	r2, [pc, #212]	; (802aeec <SystemClock_Config+0x168>)
 802ae16:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 802ae1a:	6193      	str	r3, [r2, #24]
 802ae1c:	4b33      	ldr	r3, [pc, #204]	; (802aeec <SystemClock_Config+0x168>)
 802ae1e:	699b      	ldr	r3, [r3, #24]
 802ae20:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 802ae24:	603b      	str	r3, [r7, #0]
 802ae26:	4b30      	ldr	r3, [pc, #192]	; (802aee8 <SystemClock_Config+0x164>)
 802ae28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802ae2a:	4a2f      	ldr	r2, [pc, #188]	; (802aee8 <SystemClock_Config+0x164>)
 802ae2c:	f043 0301 	orr.w	r3, r3, #1
 802ae30:	62d3      	str	r3, [r2, #44]	; 0x2c
 802ae32:	4b2d      	ldr	r3, [pc, #180]	; (802aee8 <SystemClock_Config+0x164>)
 802ae34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802ae36:	f003 0301 	and.w	r3, r3, #1
 802ae3a:	603b      	str	r3, [r7, #0]
 802ae3c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 802ae3e:	bf00      	nop
 802ae40:	4b2a      	ldr	r3, [pc, #168]	; (802aeec <SystemClock_Config+0x168>)
 802ae42:	699b      	ldr	r3, [r3, #24]
 802ae44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 802ae48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802ae4c:	d1f8      	bne.n	802ae40 <SystemClock_Config+0xbc>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 802ae4e:	4b28      	ldr	r3, [pc, #160]	; (802aef0 <SystemClock_Config+0x16c>)
 802ae50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802ae52:	4a27      	ldr	r2, [pc, #156]	; (802aef0 <SystemClock_Config+0x16c>)
 802ae54:	f023 0303 	bic.w	r3, r3, #3
 802ae58:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 802ae5a:	2322      	movs	r3, #34	; 0x22
 802ae5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 802ae5e:	2301      	movs	r3, #1
 802ae60:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 802ae62:	2340      	movs	r3, #64	; 0x40
 802ae64:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 802ae66:	2301      	movs	r3, #1
 802ae68:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 802ae6a:	2302      	movs	r3, #2
 802ae6c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 802ae6e:	2300      	movs	r3, #0
 802ae70:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 802ae72:	2304      	movs	r3, #4
 802ae74:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 60;
 802ae76:	233c      	movs	r3, #60	; 0x3c
 802ae78:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 802ae7a:	2302      	movs	r3, #2
 802ae7c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 5;
 802ae7e:	2305      	movs	r3, #5
 802ae80:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 802ae82:	2302      	movs	r3, #2
 802ae84:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 802ae86:	230c      	movs	r3, #12
 802ae88:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 802ae8a:	2300      	movs	r3, #0
 802ae8c:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 802ae8e:	2300      	movs	r3, #0
 802ae90:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 802ae92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 802ae96:	4618      	mov	r0, r3
 802ae98:	f007 f932 	bl	8032100 <HAL_RCC_OscConfig>
 802ae9c:	4603      	mov	r3, r0
 802ae9e:	2b00      	cmp	r3, #0
 802aea0:	d001      	beq.n	802aea6 <SystemClock_Config+0x122>
  {
    Error_Handler();
 802aea2:	f000 f88f 	bl	802afc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 802aea6:	233f      	movs	r3, #63	; 0x3f
 802aea8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 802aeaa:	2303      	movs	r3, #3
 802aeac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 802aeae:	2300      	movs	r3, #0
 802aeb0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 802aeb2:	2308      	movs	r3, #8
 802aeb4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 802aeb6:	2340      	movs	r3, #64	; 0x40
 802aeb8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 802aeba:	2340      	movs	r3, #64	; 0x40
 802aebc:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 802aebe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802aec2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 802aec4:	2340      	movs	r3, #64	; 0x40
 802aec6:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 802aec8:	f107 030c 	add.w	r3, r7, #12
 802aecc:	2104      	movs	r1, #4
 802aece:	4618      	mov	r0, r3
 802aed0:	f007 fd44 	bl	803295c <HAL_RCC_ClockConfig>
 802aed4:	4603      	mov	r3, r0
 802aed6:	2b00      	cmp	r3, #0
 802aed8:	d001      	beq.n	802aede <SystemClock_Config+0x15a>
  {
    Error_Handler();
 802aeda:	f000 f873 	bl	802afc4 <Error_Handler>
  }
}
 802aede:	bf00      	nop
 802aee0:	3778      	adds	r7, #120	; 0x78
 802aee2:	46bd      	mov	sp, r7
 802aee4:	bd80      	pop	{r7, pc}
 802aee6:	bf00      	nop
 802aee8:	58000400 	.word	0x58000400
 802aeec:	58024800 	.word	0x58024800
 802aef0:	58024400 	.word	0x58024400

0802aef4 <HAL_COMP_TriggerCallback>:

/* USER CODE BEGIN 4 */

void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp) {
 802aef4:	b580      	push	{r7, lr}
 802aef6:	b082      	sub	sp, #8
 802aef8:	af00      	add	r7, sp, #0
 802aefa:	6078      	str	r0, [r7, #4]
	if (hcomp->Instance == COMP2) {
 802aefc:	687b      	ldr	r3, [r7, #4]
 802aefe:	681b      	ldr	r3, [r3, #0]
 802af00:	4a04      	ldr	r2, [pc, #16]	; (802af14 <HAL_COMP_TriggerCallback+0x20>)
 802af02:	4293      	cmp	r3, r2
 802af04:	d101      	bne.n	802af0a <HAL_COMP_TriggerCallback+0x16>
		MotherboardOnStrobe();
 802af06:	f7f7 fc01 	bl	802270c <MotherboardOnStrobe>
	}
}
 802af0a:	bf00      	nop
 802af0c:	3708      	adds	r7, #8
 802af0e:	46bd      	mov	sp, r7
 802af10:	bd80      	pop	{r7, pc}
 802af12:	bf00      	nop
 802af14:	58003810 	.word	0x58003810

0802af18 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 802af18:	b580      	push	{r7, lr}
 802af1a:	b082      	sub	sp, #8
 802af1c:	af00      	add	r7, sp, #0
 802af1e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {
 802af20:	687b      	ldr	r3, [r7, #4]
 802af22:	681b      	ldr	r3, [r3, #0]
 802af24:	4a0b      	ldr	r2, [pc, #44]	; (802af54 <HAL_UART_RxCpltCallback+0x3c>)
 802af26:	4293      	cmp	r3, r2
 802af28:	d101      	bne.n	802af2e <HAL_UART_RxCpltCallback+0x16>
		MotherboardOnHeadServiceRecieveComplete();
 802af2a:	f7f7 fc0f 	bl	802274c <MotherboardOnHeadServiceRecieveComplete>
	}
	if (huart->Instance == UART4) {
 802af2e:	687b      	ldr	r3, [r7, #4]
 802af30:	681b      	ldr	r3, [r3, #0]
 802af32:	4a09      	ldr	r2, [pc, #36]	; (802af58 <HAL_UART_RxCpltCallback+0x40>)
 802af34:	4293      	cmp	r3, r2
 802af36:	d101      	bne.n	802af3c <HAL_UART_RxCpltCallback+0x24>
		MotherboardOnHeadStreamRecieveComplete();
 802af38:	f7f7 fc12 	bl	8022760 <MotherboardOnHeadStreamRecieveComplete>
	}
	if (huart->Instance == UART8) {
 802af3c:	687b      	ldr	r3, [r7, #4]
 802af3e:	681b      	ldr	r3, [r3, #0]
 802af40:	4a06      	ldr	r2, [pc, #24]	; (802af5c <HAL_UART_RxCpltCallback+0x44>)
 802af42:	4293      	cmp	r3, r2
 802af44:	d101      	bne.n	802af4a <HAL_UART_RxCpltCallback+0x32>
		MotherboardOnBodyRecieveComplete();
 802af46:	f7f7 fbf7 	bl	8022738 <MotherboardOnBodyRecieveComplete>
	}
}
 802af4a:	bf00      	nop
 802af4c:	3708      	adds	r7, #8
 802af4e:	46bd      	mov	sp, r7
 802af50:	bd80      	pop	{r7, pc}
 802af52:	bf00      	nop
 802af54:	40004800 	.word	0x40004800
 802af58:	40004c00 	.word	0x40004c00
 802af5c:	40007c00 	.word	0x40007c00

0802af60 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 802af60:	b580      	push	{r7, lr}
 802af62:	b082      	sub	sp, #8
 802af64:	af00      	add	r7, sp, #0
 802af66:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {
 802af68:	687b      	ldr	r3, [r7, #4]
 802af6a:	681b      	ldr	r3, [r3, #0]
 802af6c:	4a07      	ldr	r2, [pc, #28]	; (802af8c <HAL_UART_TxCpltCallback+0x2c>)
 802af6e:	4293      	cmp	r3, r2
 802af70:	d101      	bne.n	802af76 <HAL_UART_TxCpltCallback+0x16>
		MotherboardOnHeadServiceTransmitComplete();
 802af72:	f7f7 fbff 	bl	8022774 <MotherboardOnHeadServiceTransmitComplete>
	}
	if (huart->Instance == UART4) {
 802af76:	687b      	ldr	r3, [r7, #4]
 802af78:	681b      	ldr	r3, [r3, #0]
 802af7a:	4a05      	ldr	r2, [pc, #20]	; (802af90 <HAL_UART_TxCpltCallback+0x30>)
 802af7c:	4293      	cmp	r3, r2
 802af7e:	d101      	bne.n	802af84 <HAL_UART_TxCpltCallback+0x24>
		MotherboardOnHeadStreamTransmitComplete();
 802af80:	f7f7 fc02 	bl	8022788 <MotherboardOnHeadStreamTransmitComplete>
	}
}
 802af84:	bf00      	nop
 802af86:	3708      	adds	r7, #8
 802af88:	46bd      	mov	sp, r7
 802af8a:	bd80      	pop	{r7, pc}
 802af8c:	40004800 	.word	0x40004800
 802af90:	40004c00 	.word	0x40004c00

0802af94 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 802af94:	b580      	push	{r7, lr}
 802af96:	b082      	sub	sp, #8
 802af98:	af00      	add	r7, sp, #0
 802af9a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3)
 802af9c:	687b      	ldr	r3, [r7, #4]
 802af9e:	681b      	ldr	r3, [r3, #0]
 802afa0:	4a07      	ldr	r2, [pc, #28]	; (802afc0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 802afa2:	4293      	cmp	r3, r2
 802afa4:	d101      	bne.n	802afaa <HAL_TIM_PeriodElapsedCallback+0x16>
		MotherboardOnBodyTimerTick();
 802afa6:	f7f7 fbf9 	bl	802279c <MotherboardOnBodyTimerTick>

	if (htim->Instance == TIM2)
 802afaa:	687b      	ldr	r3, [r7, #4]
 802afac:	681b      	ldr	r3, [r3, #0]
 802afae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802afb2:	d101      	bne.n	802afb8 <HAL_TIM_PeriodElapsedCallback+0x24>
		MotherboardOnImuTimerTick();
 802afb4:	f7f7 fbfe 	bl	80227b4 <MotherboardOnImuTimerTick>
}
 802afb8:	bf00      	nop
 802afba:	3708      	adds	r7, #8
 802afbc:	46bd      	mov	sp, r7
 802afbe:	bd80      	pop	{r7, pc}
 802afc0:	40000400 	.word	0x40000400

0802afc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 802afc4:	b480      	push	{r7}
 802afc6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 802afc8:	b672      	cpsid	i
}
 802afca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 802afcc:	e7fe      	b.n	802afcc <Error_Handler+0x8>
	...

0802afd0 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_tx;
DMA_HandleTypeDef hdma_spi1_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 802afd0:	b580      	push	{r7, lr}
 802afd2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 802afd4:	4b28      	ldr	r3, [pc, #160]	; (802b078 <MX_SPI1_Init+0xa8>)
 802afd6:	4a29      	ldr	r2, [pc, #164]	; (802b07c <MX_SPI1_Init+0xac>)
 802afd8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 802afda:	4b27      	ldr	r3, [pc, #156]	; (802b078 <MX_SPI1_Init+0xa8>)
 802afdc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 802afe0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 802afe2:	4b25      	ldr	r3, [pc, #148]	; (802b078 <MX_SPI1_Init+0xa8>)
 802afe4:	2200      	movs	r2, #0
 802afe6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 802afe8:	4b23      	ldr	r3, [pc, #140]	; (802b078 <MX_SPI1_Init+0xa8>)
 802afea:	2207      	movs	r2, #7
 802afec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 802afee:	4b22      	ldr	r3, [pc, #136]	; (802b078 <MX_SPI1_Init+0xa8>)
 802aff0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 802aff4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 802aff6:	4b20      	ldr	r3, [pc, #128]	; (802b078 <MX_SPI1_Init+0xa8>)
 802aff8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 802affc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 802affe:	4b1e      	ldr	r3, [pc, #120]	; (802b078 <MX_SPI1_Init+0xa8>)
 802b000:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 802b004:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 802b006:	4b1c      	ldr	r3, [pc, #112]	; (802b078 <MX_SPI1_Init+0xa8>)
 802b008:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 802b00c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 802b00e:	4b1a      	ldr	r3, [pc, #104]	; (802b078 <MX_SPI1_Init+0xa8>)
 802b010:	2200      	movs	r2, #0
 802b012:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 802b014:	4b18      	ldr	r3, [pc, #96]	; (802b078 <MX_SPI1_Init+0xa8>)
 802b016:	2200      	movs	r2, #0
 802b018:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 802b01a:	4b17      	ldr	r3, [pc, #92]	; (802b078 <MX_SPI1_Init+0xa8>)
 802b01c:	2200      	movs	r2, #0
 802b01e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 802b020:	4b15      	ldr	r3, [pc, #84]	; (802b078 <MX_SPI1_Init+0xa8>)
 802b022:	2200      	movs	r2, #0
 802b024:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 802b026:	4b14      	ldr	r3, [pc, #80]	; (802b078 <MX_SPI1_Init+0xa8>)
 802b028:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 802b02c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 802b02e:	4b12      	ldr	r3, [pc, #72]	; (802b078 <MX_SPI1_Init+0xa8>)
 802b030:	2200      	movs	r2, #0
 802b032:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 802b034:	4b10      	ldr	r3, [pc, #64]	; (802b078 <MX_SPI1_Init+0xa8>)
 802b036:	2200      	movs	r2, #0
 802b038:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 802b03a:	4b0f      	ldr	r3, [pc, #60]	; (802b078 <MX_SPI1_Init+0xa8>)
 802b03c:	2200      	movs	r2, #0
 802b03e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 802b040:	4b0d      	ldr	r3, [pc, #52]	; (802b078 <MX_SPI1_Init+0xa8>)
 802b042:	2200      	movs	r2, #0
 802b044:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 802b046:	4b0c      	ldr	r3, [pc, #48]	; (802b078 <MX_SPI1_Init+0xa8>)
 802b048:	2200      	movs	r2, #0
 802b04a:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 802b04c:	4b0a      	ldr	r3, [pc, #40]	; (802b078 <MX_SPI1_Init+0xa8>)
 802b04e:	2200      	movs	r2, #0
 802b050:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 802b052:	4b09      	ldr	r3, [pc, #36]	; (802b078 <MX_SPI1_Init+0xa8>)
 802b054:	2200      	movs	r2, #0
 802b056:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 802b058:	4b07      	ldr	r3, [pc, #28]	; (802b078 <MX_SPI1_Init+0xa8>)
 802b05a:	2200      	movs	r2, #0
 802b05c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 802b05e:	4b06      	ldr	r3, [pc, #24]	; (802b078 <MX_SPI1_Init+0xa8>)
 802b060:	2200      	movs	r2, #0
 802b062:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 802b064:	4804      	ldr	r0, [pc, #16]	; (802b078 <MX_SPI1_Init+0xa8>)
 802b066:	f009 fb6d 	bl	8034744 <HAL_SPI_Init>
 802b06a:	4603      	mov	r3, r0
 802b06c:	2b00      	cmp	r3, #0
 802b06e:	d001      	beq.n	802b074 <MX_SPI1_Init+0xa4>
  {
    Error_Handler();
 802b070:	f7ff ffa8 	bl	802afc4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 802b074:	bf00      	nop
 802b076:	bd80      	pop	{r7, pc}
 802b078:	24001614 	.word	0x24001614
 802b07c:	40013000 	.word	0x40013000

0802b080 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 802b080:	b580      	push	{r7, lr}
 802b082:	b0b8      	sub	sp, #224	; 0xe0
 802b084:	af00      	add	r7, sp, #0
 802b086:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802b088:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 802b08c:	2200      	movs	r2, #0
 802b08e:	601a      	str	r2, [r3, #0]
 802b090:	605a      	str	r2, [r3, #4]
 802b092:	609a      	str	r2, [r3, #8]
 802b094:	60da      	str	r2, [r3, #12]
 802b096:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 802b098:	f107 0310 	add.w	r3, r7, #16
 802b09c:	22bc      	movs	r2, #188	; 0xbc
 802b09e:	2100      	movs	r1, #0
 802b0a0:	4618      	mov	r0, r3
 802b0a2:	f011 ff9d 	bl	803cfe0 <memset>
  if(spiHandle->Instance==SPI1)
 802b0a6:	687b      	ldr	r3, [r7, #4]
 802b0a8:	681b      	ldr	r3, [r3, #0]
 802b0aa:	4a60      	ldr	r2, [pc, #384]	; (802b22c <HAL_SPI_MspInit+0x1ac>)
 802b0ac:	4293      	cmp	r3, r2
 802b0ae:	f040 80b8 	bne.w	802b222 <HAL_SPI_MspInit+0x1a2>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 802b0b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 802b0b6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 32;
 802b0b8:	2320      	movs	r3, #32
 802b0ba:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 129;
 802b0bc:	2381      	movs	r3, #129	; 0x81
 802b0be:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 802b0c0:	2302      	movs	r3, #2
 802b0c2:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 802b0c4:	2302      	movs	r3, #2
 802b0c6:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 802b0c8:	2302      	movs	r3, #2
 802b0ca:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_1;
 802b0cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802b0d0:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 802b0d2:	2300      	movs	r3, #0
 802b0d4:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 802b0d6:	2300      	movs	r3, #0
 802b0d8:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 802b0da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 802b0de:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 802b0e0:	f107 0310 	add.w	r3, r7, #16
 802b0e4:	4618      	mov	r0, r3
 802b0e6:	f007 ffc5 	bl	8033074 <HAL_RCCEx_PeriphCLKConfig>
 802b0ea:	4603      	mov	r3, r0
 802b0ec:	2b00      	cmp	r3, #0
 802b0ee:	d001      	beq.n	802b0f4 <HAL_SPI_MspInit+0x74>
    {
      Error_Handler();
 802b0f0:	f7ff ff68 	bl	802afc4 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 802b0f4:	4b4e      	ldr	r3, [pc, #312]	; (802b230 <HAL_SPI_MspInit+0x1b0>)
 802b0f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 802b0fa:	4a4d      	ldr	r2, [pc, #308]	; (802b230 <HAL_SPI_MspInit+0x1b0>)
 802b0fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 802b100:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 802b104:	4b4a      	ldr	r3, [pc, #296]	; (802b230 <HAL_SPI_MspInit+0x1b0>)
 802b106:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 802b10a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 802b10e:	60fb      	str	r3, [r7, #12]
 802b110:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 802b112:	4b47      	ldr	r3, [pc, #284]	; (802b230 <HAL_SPI_MspInit+0x1b0>)
 802b114:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802b118:	4a45      	ldr	r2, [pc, #276]	; (802b230 <HAL_SPI_MspInit+0x1b0>)
 802b11a:	f043 0301 	orr.w	r3, r3, #1
 802b11e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802b122:	4b43      	ldr	r3, [pc, #268]	; (802b230 <HAL_SPI_MspInit+0x1b0>)
 802b124:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802b128:	f003 0301 	and.w	r3, r3, #1
 802b12c:	60bb      	str	r3, [r7, #8]
 802b12e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 802b130:	23e0      	movs	r3, #224	; 0xe0
 802b132:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802b136:	2302      	movs	r3, #2
 802b138:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802b13c:	2300      	movs	r3, #0
 802b13e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802b142:	2300      	movs	r3, #0
 802b144:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 802b148:	2305      	movs	r3, #5
 802b14a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802b14e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 802b152:	4619      	mov	r1, r3
 802b154:	4837      	ldr	r0, [pc, #220]	; (802b234 <HAL_SPI_MspInit+0x1b4>)
 802b156:	f004 fb3d 	bl	802f7d4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream4;
 802b15a:	4b37      	ldr	r3, [pc, #220]	; (802b238 <HAL_SPI_MspInit+0x1b8>)
 802b15c:	4a37      	ldr	r2, [pc, #220]	; (802b23c <HAL_SPI_MspInit+0x1bc>)
 802b15e:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 802b160:	4b35      	ldr	r3, [pc, #212]	; (802b238 <HAL_SPI_MspInit+0x1b8>)
 802b162:	2226      	movs	r2, #38	; 0x26
 802b164:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 802b166:	4b34      	ldr	r3, [pc, #208]	; (802b238 <HAL_SPI_MspInit+0x1b8>)
 802b168:	2240      	movs	r2, #64	; 0x40
 802b16a:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 802b16c:	4b32      	ldr	r3, [pc, #200]	; (802b238 <HAL_SPI_MspInit+0x1b8>)
 802b16e:	2200      	movs	r2, #0
 802b170:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 802b172:	4b31      	ldr	r3, [pc, #196]	; (802b238 <HAL_SPI_MspInit+0x1b8>)
 802b174:	f44f 6280 	mov.w	r2, #1024	; 0x400
 802b178:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 802b17a:	4b2f      	ldr	r3, [pc, #188]	; (802b238 <HAL_SPI_MspInit+0x1b8>)
 802b17c:	2200      	movs	r2, #0
 802b17e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 802b180:	4b2d      	ldr	r3, [pc, #180]	; (802b238 <HAL_SPI_MspInit+0x1b8>)
 802b182:	2200      	movs	r2, #0
 802b184:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 802b186:	4b2c      	ldr	r3, [pc, #176]	; (802b238 <HAL_SPI_MspInit+0x1b8>)
 802b188:	2200      	movs	r2, #0
 802b18a:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 802b18c:	4b2a      	ldr	r3, [pc, #168]	; (802b238 <HAL_SPI_MspInit+0x1b8>)
 802b18e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 802b192:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 802b194:	4b28      	ldr	r3, [pc, #160]	; (802b238 <HAL_SPI_MspInit+0x1b8>)
 802b196:	2200      	movs	r2, #0
 802b198:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 802b19a:	4827      	ldr	r0, [pc, #156]	; (802b238 <HAL_SPI_MspInit+0x1b8>)
 802b19c:	f001 fcc4 	bl	802cb28 <HAL_DMA_Init>
 802b1a0:	4603      	mov	r3, r0
 802b1a2:	2b00      	cmp	r3, #0
 802b1a4:	d001      	beq.n	802b1aa <HAL_SPI_MspInit+0x12a>
    {
      Error_Handler();
 802b1a6:	f7ff ff0d 	bl	802afc4 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 802b1aa:	687b      	ldr	r3, [r7, #4]
 802b1ac:	4a22      	ldr	r2, [pc, #136]	; (802b238 <HAL_SPI_MspInit+0x1b8>)
 802b1ae:	679a      	str	r2, [r3, #120]	; 0x78
 802b1b0:	4a21      	ldr	r2, [pc, #132]	; (802b238 <HAL_SPI_MspInit+0x1b8>)
 802b1b2:	687b      	ldr	r3, [r7, #4]
 802b1b4:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream5;
 802b1b6:	4b22      	ldr	r3, [pc, #136]	; (802b240 <HAL_SPI_MspInit+0x1c0>)
 802b1b8:	4a22      	ldr	r2, [pc, #136]	; (802b244 <HAL_SPI_MspInit+0x1c4>)
 802b1ba:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 802b1bc:	4b20      	ldr	r3, [pc, #128]	; (802b240 <HAL_SPI_MspInit+0x1c0>)
 802b1be:	2225      	movs	r2, #37	; 0x25
 802b1c0:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 802b1c2:	4b1f      	ldr	r3, [pc, #124]	; (802b240 <HAL_SPI_MspInit+0x1c0>)
 802b1c4:	2200      	movs	r2, #0
 802b1c6:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 802b1c8:	4b1d      	ldr	r3, [pc, #116]	; (802b240 <HAL_SPI_MspInit+0x1c0>)
 802b1ca:	2200      	movs	r2, #0
 802b1cc:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 802b1ce:	4b1c      	ldr	r3, [pc, #112]	; (802b240 <HAL_SPI_MspInit+0x1c0>)
 802b1d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 802b1d4:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 802b1d6:	4b1a      	ldr	r3, [pc, #104]	; (802b240 <HAL_SPI_MspInit+0x1c0>)
 802b1d8:	2200      	movs	r2, #0
 802b1da:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 802b1dc:	4b18      	ldr	r3, [pc, #96]	; (802b240 <HAL_SPI_MspInit+0x1c0>)
 802b1de:	2200      	movs	r2, #0
 802b1e0:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 802b1e2:	4b17      	ldr	r3, [pc, #92]	; (802b240 <HAL_SPI_MspInit+0x1c0>)
 802b1e4:	2200      	movs	r2, #0
 802b1e6:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 802b1e8:	4b15      	ldr	r3, [pc, #84]	; (802b240 <HAL_SPI_MspInit+0x1c0>)
 802b1ea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 802b1ee:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 802b1f0:	4b13      	ldr	r3, [pc, #76]	; (802b240 <HAL_SPI_MspInit+0x1c0>)
 802b1f2:	2200      	movs	r2, #0
 802b1f4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 802b1f6:	4812      	ldr	r0, [pc, #72]	; (802b240 <HAL_SPI_MspInit+0x1c0>)
 802b1f8:	f001 fc96 	bl	802cb28 <HAL_DMA_Init>
 802b1fc:	4603      	mov	r3, r0
 802b1fe:	2b00      	cmp	r3, #0
 802b200:	d001      	beq.n	802b206 <HAL_SPI_MspInit+0x186>
    {
      Error_Handler();
 802b202:	f7ff fedf 	bl	802afc4 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 802b206:	687b      	ldr	r3, [r7, #4]
 802b208:	4a0d      	ldr	r2, [pc, #52]	; (802b240 <HAL_SPI_MspInit+0x1c0>)
 802b20a:	67da      	str	r2, [r3, #124]	; 0x7c
 802b20c:	4a0c      	ldr	r2, [pc, #48]	; (802b240 <HAL_SPI_MspInit+0x1c0>)
 802b20e:	687b      	ldr	r3, [r7, #4]
 802b210:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 802b212:	2200      	movs	r2, #0
 802b214:	2100      	movs	r1, #0
 802b216:	2023      	movs	r0, #35	; 0x23
 802b218:	f001 fa89 	bl	802c72e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 802b21c:	2023      	movs	r0, #35	; 0x23
 802b21e:	f001 faa0 	bl	802c762 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 802b222:	bf00      	nop
 802b224:	37e0      	adds	r7, #224	; 0xe0
 802b226:	46bd      	mov	sp, r7
 802b228:	bd80      	pop	{r7, pc}
 802b22a:	bf00      	nop
 802b22c:	40013000 	.word	0x40013000
 802b230:	58024400 	.word	0x58024400
 802b234:	58020000 	.word	0x58020000
 802b238:	2400169c 	.word	0x2400169c
 802b23c:	40020070 	.word	0x40020070
 802b240:	24001714 	.word	0x24001714
 802b244:	40020088 	.word	0x40020088

0802b248 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 802b248:	b480      	push	{r7}
 802b24a:	b083      	sub	sp, #12
 802b24c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 802b24e:	4b0a      	ldr	r3, [pc, #40]	; (802b278 <HAL_MspInit+0x30>)
 802b250:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 802b254:	4a08      	ldr	r2, [pc, #32]	; (802b278 <HAL_MspInit+0x30>)
 802b256:	f043 0302 	orr.w	r3, r3, #2
 802b25a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 802b25e:	4b06      	ldr	r3, [pc, #24]	; (802b278 <HAL_MspInit+0x30>)
 802b260:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 802b264:	f003 0302 	and.w	r3, r3, #2
 802b268:	607b      	str	r3, [r7, #4]
 802b26a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 802b26c:	bf00      	nop
 802b26e:	370c      	adds	r7, #12
 802b270:	46bd      	mov	sp, r7
 802b272:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b276:	4770      	bx	lr
 802b278:	58024400 	.word	0x58024400

0802b27c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 802b27c:	b480      	push	{r7}
 802b27e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 802b280:	e7fe      	b.n	802b280 <NMI_Handler+0x4>

0802b282 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 802b282:	b480      	push	{r7}
 802b284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 802b286:	e7fe      	b.n	802b286 <HardFault_Handler+0x4>

0802b288 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 802b288:	b480      	push	{r7}
 802b28a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 802b28c:	e7fe      	b.n	802b28c <MemManage_Handler+0x4>

0802b28e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 802b28e:	b480      	push	{r7}
 802b290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 802b292:	e7fe      	b.n	802b292 <BusFault_Handler+0x4>

0802b294 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 802b294:	b480      	push	{r7}
 802b296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 802b298:	e7fe      	b.n	802b298 <UsageFault_Handler+0x4>

0802b29a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 802b29a:	b480      	push	{r7}
 802b29c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 802b29e:	bf00      	nop
 802b2a0:	46bd      	mov	sp, r7
 802b2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b2a6:	4770      	bx	lr

0802b2a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 802b2a8:	b480      	push	{r7}
 802b2aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 802b2ac:	bf00      	nop
 802b2ae:	46bd      	mov	sp, r7
 802b2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b2b4:	4770      	bx	lr

0802b2b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 802b2b6:	b480      	push	{r7}
 802b2b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 802b2ba:	bf00      	nop
 802b2bc:	46bd      	mov	sp, r7
 802b2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b2c2:	4770      	bx	lr

0802b2c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 802b2c4:	b580      	push	{r7, lr}
 802b2c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 802b2c8:	f000 ff1e 	bl	802c108 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 802b2cc:	bf00      	nop
 802b2ce:	bd80      	pop	{r7, pc}

0802b2d0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 802b2d0:	b580      	push	{r7, lr}
 802b2d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 802b2d4:	4802      	ldr	r0, [pc, #8]	; (802b2e0 <DMA1_Stream0_IRQHandler+0x10>)
 802b2d6:	f002 ff51 	bl	802e17c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 802b2da:	bf00      	nop
 802b2dc:	bd80      	pop	{r7, pc}
 802b2de:	bf00      	nop
 802b2e0:	24001524 	.word	0x24001524

0802b2e4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 802b2e4:	b580      	push	{r7, lr}
 802b2e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 802b2e8:	4802      	ldr	r0, [pc, #8]	; (802b2f4 <DMA1_Stream1_IRQHandler+0x10>)
 802b2ea:	f002 ff47 	bl	802e17c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 802b2ee:	bf00      	nop
 802b2f0:	bd80      	pop	{r7, pc}
 802b2f2:	bf00      	nop
 802b2f4:	2400159c 	.word	0x2400159c

0802b2f8 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 802b2f8:	b580      	push	{r7, lr}
 802b2fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 802b2fc:	4802      	ldr	r0, [pc, #8]	; (802b308 <DMA1_Stream4_IRQHandler+0x10>)
 802b2fe:	f002 ff3d 	bl	802e17c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 802b302:	bf00      	nop
 802b304:	bd80      	pop	{r7, pc}
 802b306:	bf00      	nop
 802b308:	2400169c 	.word	0x2400169c

0802b30c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 802b30c:	b580      	push	{r7, lr}
 802b30e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 802b310:	4802      	ldr	r0, [pc, #8]	; (802b31c <DMA1_Stream5_IRQHandler+0x10>)
 802b312:	f002 ff33 	bl	802e17c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 802b316:	bf00      	nop
 802b318:	bd80      	pop	{r7, pc}
 802b31a:	bf00      	nop
 802b31c:	24001714 	.word	0x24001714

0802b320 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 802b320:	b580      	push	{r7, lr}
 802b322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 802b324:	4802      	ldr	r0, [pc, #8]	; (802b330 <TIM2_IRQHandler+0x10>)
 802b326:	f00a fc09 	bl	8035b3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 802b32a:	bf00      	nop
 802b32c:	bd80      	pop	{r7, pc}
 802b32e:	bf00      	nop
 802b330:	24001790 	.word	0x24001790

0802b334 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 802b334:	b580      	push	{r7, lr}
 802b336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 802b338:	4802      	ldr	r0, [pc, #8]	; (802b344 <TIM3_IRQHandler+0x10>)
 802b33a:	f00a fbff 	bl	8035b3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 802b33e:	bf00      	nop
 802b340:	bd80      	pop	{r7, pc}
 802b342:	bf00      	nop
 802b344:	240017dc 	.word	0x240017dc

0802b348 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 802b348:	b580      	push	{r7, lr}
 802b34a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 802b34c:	4802      	ldr	r0, [pc, #8]	; (802b358 <TIM4_IRQHandler+0x10>)
 802b34e:	f00a fbf5 	bl	8035b3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 802b352:	bf00      	nop
 802b354:	bd80      	pop	{r7, pc}
 802b356:	bf00      	nop
 802b358:	24001828 	.word	0x24001828

0802b35c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 802b35c:	b580      	push	{r7, lr}
 802b35e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 802b360:	4802      	ldr	r0, [pc, #8]	; (802b36c <I2C2_EV_IRQHandler+0x10>)
 802b362:	f004 fc91 	bl	802fc88 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 802b366:	bf00      	nop
 802b368:	bd80      	pop	{r7, pc}
 802b36a:	bf00      	nop
 802b36c:	240014d8 	.word	0x240014d8

0802b370 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 802b370:	b580      	push	{r7, lr}
 802b372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 802b374:	4802      	ldr	r0, [pc, #8]	; (802b380 <I2C2_ER_IRQHandler+0x10>)
 802b376:	f004 fca1 	bl	802fcbc <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 802b37a:	bf00      	nop
 802b37c:	bd80      	pop	{r7, pc}
 802b37e:	bf00      	nop
 802b380:	240014d8 	.word	0x240014d8

0802b384 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 802b384:	b580      	push	{r7, lr}
 802b386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 802b388:	4802      	ldr	r0, [pc, #8]	; (802b394 <SPI1_IRQHandler+0x10>)
 802b38a:	f009 ff5d 	bl	8035248 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 802b38e:	bf00      	nop
 802b390:	bd80      	pop	{r7, pc}
 802b392:	bf00      	nop
 802b394:	24001614 	.word	0x24001614

0802b398 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 802b398:	b580      	push	{r7, lr}
 802b39a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 802b39c:	4802      	ldr	r0, [pc, #8]	; (802b3a8 <USART3_IRQHandler+0x10>)
 802b39e:	f00b fa01 	bl	80367a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 802b3a2:	bf00      	nop
 802b3a4:	bd80      	pop	{r7, pc}
 802b3a6:	bf00      	nop
 802b3a8:	24001ab4 	.word	0x24001ab4

0802b3ac <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 802b3ac:	b580      	push	{r7, lr}
 802b3ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 802b3b0:	4802      	ldr	r0, [pc, #8]	; (802b3bc <UART4_IRQHandler+0x10>)
 802b3b2:	f00b f9f7 	bl	80367a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 802b3b6:	bf00      	nop
 802b3b8:	bd80      	pop	{r7, pc}
 802b3ba:	bf00      	nop
 802b3bc:	24001874 	.word	0x24001874

0802b3c0 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 802b3c0:	b580      	push	{r7, lr}
 802b3c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 802b3c4:	4802      	ldr	r0, [pc, #8]	; (802b3d0 <UART8_IRQHandler+0x10>)
 802b3c6:	f00b f9ed 	bl	80367a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 802b3ca:	bf00      	nop
 802b3cc:	bd80      	pop	{r7, pc}
 802b3ce:	bf00      	nop
 802b3d0:	24001994 	.word	0x24001994

0802b3d4 <OTG_FS_EP1_OUT_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS End Point 1 Out global interrupt.
  */
void OTG_FS_EP1_OUT_IRQHandler(void)
{
 802b3d4:	b580      	push	{r7, lr}
 802b3d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_EP1_OUT_IRQn 0 */

  /* USER CODE END OTG_FS_EP1_OUT_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 802b3d8:	4802      	ldr	r0, [pc, #8]	; (802b3e4 <OTG_FS_EP1_OUT_IRQHandler+0x10>)
 802b3da:	f005 fcc8 	bl	8030d6e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_EP1_OUT_IRQn 1 */

  /* USER CODE END OTG_FS_EP1_OUT_IRQn 1 */
}
 802b3de:	bf00      	nop
 802b3e0:	bd80      	pop	{r7, pc}
 802b3e2:	bf00      	nop
 802b3e4:	24003028 	.word	0x24003028

0802b3e8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 802b3e8:	b580      	push	{r7, lr}
 802b3ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 802b3ec:	4802      	ldr	r0, [pc, #8]	; (802b3f8 <OTG_FS_IRQHandler+0x10>)
 802b3ee:	f005 fcbe 	bl	8030d6e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 802b3f2:	bf00      	nop
 802b3f4:	bd80      	pop	{r7, pc}
 802b3f6:	bf00      	nop
 802b3f8:	24003028 	.word	0x24003028

0802b3fc <COMP1_IRQHandler>:

/**
  * @brief This function handles COMP1 and COMP2 interrupts through EXTI lines 20 and 21.
  */
void COMP_IRQHandler(void)
{
 802b3fc:	b580      	push	{r7, lr}
 802b3fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP_IRQn 0 */

  /* USER CODE END COMP_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp2);
 802b400:	4802      	ldr	r0, [pc, #8]	; (802b40c <COMP1_IRQHandler+0x10>)
 802b402:	f001 f845 	bl	802c490 <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP_IRQn 1 */

  /* USER CODE END COMP_IRQn 1 */
}
 802b406:	bf00      	nop
 802b408:	bd80      	pop	{r7, pc}
 802b40a:	bf00      	nop
 802b40c:	24001498 	.word	0x24001498

0802b410 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 802b410:	b480      	push	{r7}
 802b412:	af00      	add	r7, sp, #0
	return 1;
 802b414:	2301      	movs	r3, #1
}
 802b416:	4618      	mov	r0, r3
 802b418:	46bd      	mov	sp, r7
 802b41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b41e:	4770      	bx	lr

0802b420 <_kill>:

int _kill(int pid, int sig)
{
 802b420:	b580      	push	{r7, lr}
 802b422:	b082      	sub	sp, #8
 802b424:	af00      	add	r7, sp, #0
 802b426:	6078      	str	r0, [r7, #4]
 802b428:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 802b42a:	f011 fd65 	bl	803cef8 <__errno>
 802b42e:	4603      	mov	r3, r0
 802b430:	2216      	movs	r2, #22
 802b432:	601a      	str	r2, [r3, #0]
	return -1;
 802b434:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 802b438:	4618      	mov	r0, r3
 802b43a:	3708      	adds	r7, #8
 802b43c:	46bd      	mov	sp, r7
 802b43e:	bd80      	pop	{r7, pc}

0802b440 <_exit>:

void _exit (int status)
{
 802b440:	b580      	push	{r7, lr}
 802b442:	b082      	sub	sp, #8
 802b444:	af00      	add	r7, sp, #0
 802b446:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 802b448:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 802b44c:	6878      	ldr	r0, [r7, #4]
 802b44e:	f7ff ffe7 	bl	802b420 <_kill>
	while (1) {}		/* Make sure we hang here */
 802b452:	e7fe      	b.n	802b452 <_exit+0x12>

0802b454 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 802b454:	b580      	push	{r7, lr}
 802b456:	b086      	sub	sp, #24
 802b458:	af00      	add	r7, sp, #0
 802b45a:	60f8      	str	r0, [r7, #12]
 802b45c:	60b9      	str	r1, [r7, #8]
 802b45e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 802b460:	2300      	movs	r3, #0
 802b462:	617b      	str	r3, [r7, #20]
 802b464:	e00a      	b.n	802b47c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 802b466:	f3af 8000 	nop.w
 802b46a:	4601      	mov	r1, r0
 802b46c:	68bb      	ldr	r3, [r7, #8]
 802b46e:	1c5a      	adds	r2, r3, #1
 802b470:	60ba      	str	r2, [r7, #8]
 802b472:	b2ca      	uxtb	r2, r1
 802b474:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 802b476:	697b      	ldr	r3, [r7, #20]
 802b478:	3301      	adds	r3, #1
 802b47a:	617b      	str	r3, [r7, #20]
 802b47c:	697a      	ldr	r2, [r7, #20]
 802b47e:	687b      	ldr	r3, [r7, #4]
 802b480:	429a      	cmp	r2, r3
 802b482:	dbf0      	blt.n	802b466 <_read+0x12>
	}

return len;
 802b484:	687b      	ldr	r3, [r7, #4]
}
 802b486:	4618      	mov	r0, r3
 802b488:	3718      	adds	r7, #24
 802b48a:	46bd      	mov	sp, r7
 802b48c:	bd80      	pop	{r7, pc}

0802b48e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 802b48e:	b580      	push	{r7, lr}
 802b490:	b086      	sub	sp, #24
 802b492:	af00      	add	r7, sp, #0
 802b494:	60f8      	str	r0, [r7, #12]
 802b496:	60b9      	str	r1, [r7, #8]
 802b498:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 802b49a:	2300      	movs	r3, #0
 802b49c:	617b      	str	r3, [r7, #20]
 802b49e:	e009      	b.n	802b4b4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 802b4a0:	68bb      	ldr	r3, [r7, #8]
 802b4a2:	1c5a      	adds	r2, r3, #1
 802b4a4:	60ba      	str	r2, [r7, #8]
 802b4a6:	781b      	ldrb	r3, [r3, #0]
 802b4a8:	4618      	mov	r0, r3
 802b4aa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 802b4ae:	697b      	ldr	r3, [r7, #20]
 802b4b0:	3301      	adds	r3, #1
 802b4b2:	617b      	str	r3, [r7, #20]
 802b4b4:	697a      	ldr	r2, [r7, #20]
 802b4b6:	687b      	ldr	r3, [r7, #4]
 802b4b8:	429a      	cmp	r2, r3
 802b4ba:	dbf1      	blt.n	802b4a0 <_write+0x12>
	}
	return len;
 802b4bc:	687b      	ldr	r3, [r7, #4]
}
 802b4be:	4618      	mov	r0, r3
 802b4c0:	3718      	adds	r7, #24
 802b4c2:	46bd      	mov	sp, r7
 802b4c4:	bd80      	pop	{r7, pc}

0802b4c6 <_close>:

int _close(int file)
{
 802b4c6:	b480      	push	{r7}
 802b4c8:	b083      	sub	sp, #12
 802b4ca:	af00      	add	r7, sp, #0
 802b4cc:	6078      	str	r0, [r7, #4]
	return -1;
 802b4ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 802b4d2:	4618      	mov	r0, r3
 802b4d4:	370c      	adds	r7, #12
 802b4d6:	46bd      	mov	sp, r7
 802b4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b4dc:	4770      	bx	lr

0802b4de <_fstat>:


int _fstat(int file, struct stat *st)
{
 802b4de:	b480      	push	{r7}
 802b4e0:	b083      	sub	sp, #12
 802b4e2:	af00      	add	r7, sp, #0
 802b4e4:	6078      	str	r0, [r7, #4]
 802b4e6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 802b4e8:	683b      	ldr	r3, [r7, #0]
 802b4ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 802b4ee:	605a      	str	r2, [r3, #4]
	return 0;
 802b4f0:	2300      	movs	r3, #0
}
 802b4f2:	4618      	mov	r0, r3
 802b4f4:	370c      	adds	r7, #12
 802b4f6:	46bd      	mov	sp, r7
 802b4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b4fc:	4770      	bx	lr

0802b4fe <_isatty>:

int _isatty(int file)
{
 802b4fe:	b480      	push	{r7}
 802b500:	b083      	sub	sp, #12
 802b502:	af00      	add	r7, sp, #0
 802b504:	6078      	str	r0, [r7, #4]
	return 1;
 802b506:	2301      	movs	r3, #1
}
 802b508:	4618      	mov	r0, r3
 802b50a:	370c      	adds	r7, #12
 802b50c:	46bd      	mov	sp, r7
 802b50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b512:	4770      	bx	lr

0802b514 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 802b514:	b480      	push	{r7}
 802b516:	b085      	sub	sp, #20
 802b518:	af00      	add	r7, sp, #0
 802b51a:	60f8      	str	r0, [r7, #12]
 802b51c:	60b9      	str	r1, [r7, #8]
 802b51e:	607a      	str	r2, [r7, #4]
	return 0;
 802b520:	2300      	movs	r3, #0
}
 802b522:	4618      	mov	r0, r3
 802b524:	3714      	adds	r7, #20
 802b526:	46bd      	mov	sp, r7
 802b528:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b52c:	4770      	bx	lr
	...

0802b530 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 802b530:	b580      	push	{r7, lr}
 802b532:	b086      	sub	sp, #24
 802b534:	af00      	add	r7, sp, #0
 802b536:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 802b538:	4a14      	ldr	r2, [pc, #80]	; (802b58c <_sbrk+0x5c>)
 802b53a:	4b15      	ldr	r3, [pc, #84]	; (802b590 <_sbrk+0x60>)
 802b53c:	1ad3      	subs	r3, r2, r3
 802b53e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 802b540:	697b      	ldr	r3, [r7, #20]
 802b542:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 802b544:	4b13      	ldr	r3, [pc, #76]	; (802b594 <_sbrk+0x64>)
 802b546:	681b      	ldr	r3, [r3, #0]
 802b548:	2b00      	cmp	r3, #0
 802b54a:	d102      	bne.n	802b552 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 802b54c:	4b11      	ldr	r3, [pc, #68]	; (802b594 <_sbrk+0x64>)
 802b54e:	4a12      	ldr	r2, [pc, #72]	; (802b598 <_sbrk+0x68>)
 802b550:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 802b552:	4b10      	ldr	r3, [pc, #64]	; (802b594 <_sbrk+0x64>)
 802b554:	681a      	ldr	r2, [r3, #0]
 802b556:	687b      	ldr	r3, [r7, #4]
 802b558:	4413      	add	r3, r2
 802b55a:	693a      	ldr	r2, [r7, #16]
 802b55c:	429a      	cmp	r2, r3
 802b55e:	d207      	bcs.n	802b570 <_sbrk+0x40>
  {
    errno = ENOMEM;
 802b560:	f011 fcca 	bl	803cef8 <__errno>
 802b564:	4603      	mov	r3, r0
 802b566:	220c      	movs	r2, #12
 802b568:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 802b56a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802b56e:	e009      	b.n	802b584 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 802b570:	4b08      	ldr	r3, [pc, #32]	; (802b594 <_sbrk+0x64>)
 802b572:	681b      	ldr	r3, [r3, #0]
 802b574:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 802b576:	4b07      	ldr	r3, [pc, #28]	; (802b594 <_sbrk+0x64>)
 802b578:	681a      	ldr	r2, [r3, #0]
 802b57a:	687b      	ldr	r3, [r7, #4]
 802b57c:	4413      	add	r3, r2
 802b57e:	4a05      	ldr	r2, [pc, #20]	; (802b594 <_sbrk+0x64>)
 802b580:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 802b582:	68fb      	ldr	r3, [r7, #12]
}
 802b584:	4618      	mov	r0, r3
 802b586:	3718      	adds	r7, #24
 802b588:	46bd      	mov	sp, r7
 802b58a:	bd80      	pop	{r7, pc}
 802b58c:	24080000 	.word	0x24080000
 802b590:	00000400 	.word	0x00000400
 802b594:	2400178c 	.word	0x2400178c
 802b598:	24003768 	.word	0x24003768

0802b59c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 802b59c:	b480      	push	{r7}
 802b59e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 802b5a0:	4b37      	ldr	r3, [pc, #220]	; (802b680 <SystemInit+0xe4>)
 802b5a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 802b5a6:	4a36      	ldr	r2, [pc, #216]	; (802b680 <SystemInit+0xe4>)
 802b5a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 802b5ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 802b5b0:	4b34      	ldr	r3, [pc, #208]	; (802b684 <SystemInit+0xe8>)
 802b5b2:	681b      	ldr	r3, [r3, #0]
 802b5b4:	f003 030f 	and.w	r3, r3, #15
 802b5b8:	2b06      	cmp	r3, #6
 802b5ba:	d807      	bhi.n	802b5cc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 802b5bc:	4b31      	ldr	r3, [pc, #196]	; (802b684 <SystemInit+0xe8>)
 802b5be:	681b      	ldr	r3, [r3, #0]
 802b5c0:	f023 030f 	bic.w	r3, r3, #15
 802b5c4:	4a2f      	ldr	r2, [pc, #188]	; (802b684 <SystemInit+0xe8>)
 802b5c6:	f043 0307 	orr.w	r3, r3, #7
 802b5ca:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 802b5cc:	4b2e      	ldr	r3, [pc, #184]	; (802b688 <SystemInit+0xec>)
 802b5ce:	681b      	ldr	r3, [r3, #0]
 802b5d0:	4a2d      	ldr	r2, [pc, #180]	; (802b688 <SystemInit+0xec>)
 802b5d2:	f043 0301 	orr.w	r3, r3, #1
 802b5d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 802b5d8:	4b2b      	ldr	r3, [pc, #172]	; (802b688 <SystemInit+0xec>)
 802b5da:	2200      	movs	r2, #0
 802b5dc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 802b5de:	4b2a      	ldr	r3, [pc, #168]	; (802b688 <SystemInit+0xec>)
 802b5e0:	681a      	ldr	r2, [r3, #0]
 802b5e2:	4929      	ldr	r1, [pc, #164]	; (802b688 <SystemInit+0xec>)
 802b5e4:	4b29      	ldr	r3, [pc, #164]	; (802b68c <SystemInit+0xf0>)
 802b5e6:	4013      	ands	r3, r2
 802b5e8:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 802b5ea:	4b26      	ldr	r3, [pc, #152]	; (802b684 <SystemInit+0xe8>)
 802b5ec:	681b      	ldr	r3, [r3, #0]
 802b5ee:	f003 0308 	and.w	r3, r3, #8
 802b5f2:	2b00      	cmp	r3, #0
 802b5f4:	d007      	beq.n	802b606 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 802b5f6:	4b23      	ldr	r3, [pc, #140]	; (802b684 <SystemInit+0xe8>)
 802b5f8:	681b      	ldr	r3, [r3, #0]
 802b5fa:	f023 030f 	bic.w	r3, r3, #15
 802b5fe:	4a21      	ldr	r2, [pc, #132]	; (802b684 <SystemInit+0xe8>)
 802b600:	f043 0307 	orr.w	r3, r3, #7
 802b604:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 802b606:	4b20      	ldr	r3, [pc, #128]	; (802b688 <SystemInit+0xec>)
 802b608:	2200      	movs	r2, #0
 802b60a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 802b60c:	4b1e      	ldr	r3, [pc, #120]	; (802b688 <SystemInit+0xec>)
 802b60e:	2200      	movs	r2, #0
 802b610:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 802b612:	4b1d      	ldr	r3, [pc, #116]	; (802b688 <SystemInit+0xec>)
 802b614:	2200      	movs	r2, #0
 802b616:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 802b618:	4b1b      	ldr	r3, [pc, #108]	; (802b688 <SystemInit+0xec>)
 802b61a:	4a1d      	ldr	r2, [pc, #116]	; (802b690 <SystemInit+0xf4>)
 802b61c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 802b61e:	4b1a      	ldr	r3, [pc, #104]	; (802b688 <SystemInit+0xec>)
 802b620:	4a1c      	ldr	r2, [pc, #112]	; (802b694 <SystemInit+0xf8>)
 802b622:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 802b624:	4b18      	ldr	r3, [pc, #96]	; (802b688 <SystemInit+0xec>)
 802b626:	4a1c      	ldr	r2, [pc, #112]	; (802b698 <SystemInit+0xfc>)
 802b628:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 802b62a:	4b17      	ldr	r3, [pc, #92]	; (802b688 <SystemInit+0xec>)
 802b62c:	2200      	movs	r2, #0
 802b62e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 802b630:	4b15      	ldr	r3, [pc, #84]	; (802b688 <SystemInit+0xec>)
 802b632:	4a19      	ldr	r2, [pc, #100]	; (802b698 <SystemInit+0xfc>)
 802b634:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 802b636:	4b14      	ldr	r3, [pc, #80]	; (802b688 <SystemInit+0xec>)
 802b638:	2200      	movs	r2, #0
 802b63a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 802b63c:	4b12      	ldr	r3, [pc, #72]	; (802b688 <SystemInit+0xec>)
 802b63e:	4a16      	ldr	r2, [pc, #88]	; (802b698 <SystemInit+0xfc>)
 802b640:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 802b642:	4b11      	ldr	r3, [pc, #68]	; (802b688 <SystemInit+0xec>)
 802b644:	2200      	movs	r2, #0
 802b646:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 802b648:	4b0f      	ldr	r3, [pc, #60]	; (802b688 <SystemInit+0xec>)
 802b64a:	681b      	ldr	r3, [r3, #0]
 802b64c:	4a0e      	ldr	r2, [pc, #56]	; (802b688 <SystemInit+0xec>)
 802b64e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 802b652:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 802b654:	4b0c      	ldr	r3, [pc, #48]	; (802b688 <SystemInit+0xec>)
 802b656:	2200      	movs	r2, #0
 802b658:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 802b65a:	4b10      	ldr	r3, [pc, #64]	; (802b69c <SystemInit+0x100>)
 802b65c:	681a      	ldr	r2, [r3, #0]
 802b65e:	4b10      	ldr	r3, [pc, #64]	; (802b6a0 <SystemInit+0x104>)
 802b660:	4013      	ands	r3, r2
 802b662:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 802b666:	d202      	bcs.n	802b66e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 802b668:	4b0e      	ldr	r3, [pc, #56]	; (802b6a4 <SystemInit+0x108>)
 802b66a:	2201      	movs	r2, #1
 802b66c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 802b66e:	4b0e      	ldr	r3, [pc, #56]	; (802b6a8 <SystemInit+0x10c>)
 802b670:	f243 02d2 	movw	r2, #12498	; 0x30d2
 802b674:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 802b676:	bf00      	nop
 802b678:	46bd      	mov	sp, r7
 802b67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b67e:	4770      	bx	lr
 802b680:	e000ed00 	.word	0xe000ed00
 802b684:	52002000 	.word	0x52002000
 802b688:	58024400 	.word	0x58024400
 802b68c:	eaf6ed7f 	.word	0xeaf6ed7f
 802b690:	02020200 	.word	0x02020200
 802b694:	01ff0000 	.word	0x01ff0000
 802b698:	01010280 	.word	0x01010280
 802b69c:	5c001000 	.word	0x5c001000
 802b6a0:	ffff0000 	.word	0xffff0000
 802b6a4:	51008108 	.word	0x51008108
 802b6a8:	52004000 	.word	0x52004000

0802b6ac <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 802b6ac:	b580      	push	{r7, lr}
 802b6ae:	b088      	sub	sp, #32
 802b6b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 802b6b2:	f107 0310 	add.w	r3, r7, #16
 802b6b6:	2200      	movs	r2, #0
 802b6b8:	601a      	str	r2, [r3, #0]
 802b6ba:	605a      	str	r2, [r3, #4]
 802b6bc:	609a      	str	r2, [r3, #8]
 802b6be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 802b6c0:	1d3b      	adds	r3, r7, #4
 802b6c2:	2200      	movs	r2, #0
 802b6c4:	601a      	str	r2, [r3, #0]
 802b6c6:	605a      	str	r2, [r3, #4]
 802b6c8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 802b6ca:	4b1e      	ldr	r3, [pc, #120]	; (802b744 <MX_TIM2_Init+0x98>)
 802b6cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 802b6d0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 24000;
 802b6d2:	4b1c      	ldr	r3, [pc, #112]	; (802b744 <MX_TIM2_Init+0x98>)
 802b6d4:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 802b6d8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 802b6da:	4b1a      	ldr	r3, [pc, #104]	; (802b744 <MX_TIM2_Init+0x98>)
 802b6dc:	2200      	movs	r2, #0
 802b6de:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 802b6e0:	4b18      	ldr	r3, [pc, #96]	; (802b744 <MX_TIM2_Init+0x98>)
 802b6e2:	2264      	movs	r2, #100	; 0x64
 802b6e4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 802b6e6:	4b17      	ldr	r3, [pc, #92]	; (802b744 <MX_TIM2_Init+0x98>)
 802b6e8:	2200      	movs	r2, #0
 802b6ea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 802b6ec:	4b15      	ldr	r3, [pc, #84]	; (802b744 <MX_TIM2_Init+0x98>)
 802b6ee:	2200      	movs	r2, #0
 802b6f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 802b6f2:	4814      	ldr	r0, [pc, #80]	; (802b744 <MX_TIM2_Init+0x98>)
 802b6f4:	f00a f953 	bl	803599e <HAL_TIM_Base_Init>
 802b6f8:	4603      	mov	r3, r0
 802b6fa:	2b00      	cmp	r3, #0
 802b6fc:	d001      	beq.n	802b702 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 802b6fe:	f7ff fc61 	bl	802afc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 802b702:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 802b706:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 802b708:	f107 0310 	add.w	r3, r7, #16
 802b70c:	4619      	mov	r1, r3
 802b70e:	480d      	ldr	r0, [pc, #52]	; (802b744 <MX_TIM2_Init+0x98>)
 802b710:	f00a fb34 	bl	8035d7c <HAL_TIM_ConfigClockSource>
 802b714:	4603      	mov	r3, r0
 802b716:	2b00      	cmp	r3, #0
 802b718:	d001      	beq.n	802b71e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 802b71a:	f7ff fc53 	bl	802afc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 802b71e:	2300      	movs	r3, #0
 802b720:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 802b722:	2300      	movs	r3, #0
 802b724:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 802b726:	1d3b      	adds	r3, r7, #4
 802b728:	4619      	mov	r1, r3
 802b72a:	4806      	ldr	r0, [pc, #24]	; (802b744 <MX_TIM2_Init+0x98>)
 802b72c:	f00a fd7e 	bl	803622c <HAL_TIMEx_MasterConfigSynchronization>
 802b730:	4603      	mov	r3, r0
 802b732:	2b00      	cmp	r3, #0
 802b734:	d001      	beq.n	802b73a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 802b736:	f7ff fc45 	bl	802afc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 802b73a:	bf00      	nop
 802b73c:	3720      	adds	r7, #32
 802b73e:	46bd      	mov	sp, r7
 802b740:	bd80      	pop	{r7, pc}
 802b742:	bf00      	nop
 802b744:	24001790 	.word	0x24001790

0802b748 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 802b748:	b580      	push	{r7, lr}
 802b74a:	b088      	sub	sp, #32
 802b74c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 802b74e:	f107 0310 	add.w	r3, r7, #16
 802b752:	2200      	movs	r2, #0
 802b754:	601a      	str	r2, [r3, #0]
 802b756:	605a      	str	r2, [r3, #4]
 802b758:	609a      	str	r2, [r3, #8]
 802b75a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 802b75c:	1d3b      	adds	r3, r7, #4
 802b75e:	2200      	movs	r2, #0
 802b760:	601a      	str	r2, [r3, #0]
 802b762:	605a      	str	r2, [r3, #4]
 802b764:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 802b766:	4b1d      	ldr	r3, [pc, #116]	; (802b7dc <MX_TIM3_Init+0x94>)
 802b768:	4a1d      	ldr	r2, [pc, #116]	; (802b7e0 <MX_TIM3_Init+0x98>)
 802b76a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 24000;
 802b76c:	4b1b      	ldr	r3, [pc, #108]	; (802b7dc <MX_TIM3_Init+0x94>)
 802b76e:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 802b772:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 802b774:	4b19      	ldr	r3, [pc, #100]	; (802b7dc <MX_TIM3_Init+0x94>)
 802b776:	2200      	movs	r2, #0
 802b778:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 802b77a:	4b18      	ldr	r3, [pc, #96]	; (802b7dc <MX_TIM3_Init+0x94>)
 802b77c:	2264      	movs	r2, #100	; 0x64
 802b77e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 802b780:	4b16      	ldr	r3, [pc, #88]	; (802b7dc <MX_TIM3_Init+0x94>)
 802b782:	2200      	movs	r2, #0
 802b784:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 802b786:	4b15      	ldr	r3, [pc, #84]	; (802b7dc <MX_TIM3_Init+0x94>)
 802b788:	2200      	movs	r2, #0
 802b78a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 802b78c:	4813      	ldr	r0, [pc, #76]	; (802b7dc <MX_TIM3_Init+0x94>)
 802b78e:	f00a f906 	bl	803599e <HAL_TIM_Base_Init>
 802b792:	4603      	mov	r3, r0
 802b794:	2b00      	cmp	r3, #0
 802b796:	d001      	beq.n	802b79c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 802b798:	f7ff fc14 	bl	802afc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 802b79c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 802b7a0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 802b7a2:	f107 0310 	add.w	r3, r7, #16
 802b7a6:	4619      	mov	r1, r3
 802b7a8:	480c      	ldr	r0, [pc, #48]	; (802b7dc <MX_TIM3_Init+0x94>)
 802b7aa:	f00a fae7 	bl	8035d7c <HAL_TIM_ConfigClockSource>
 802b7ae:	4603      	mov	r3, r0
 802b7b0:	2b00      	cmp	r3, #0
 802b7b2:	d001      	beq.n	802b7b8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 802b7b4:	f7ff fc06 	bl	802afc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 802b7b8:	2300      	movs	r3, #0
 802b7ba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 802b7bc:	2300      	movs	r3, #0
 802b7be:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 802b7c0:	1d3b      	adds	r3, r7, #4
 802b7c2:	4619      	mov	r1, r3
 802b7c4:	4805      	ldr	r0, [pc, #20]	; (802b7dc <MX_TIM3_Init+0x94>)
 802b7c6:	f00a fd31 	bl	803622c <HAL_TIMEx_MasterConfigSynchronization>
 802b7ca:	4603      	mov	r3, r0
 802b7cc:	2b00      	cmp	r3, #0
 802b7ce:	d001      	beq.n	802b7d4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 802b7d0:	f7ff fbf8 	bl	802afc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 802b7d4:	bf00      	nop
 802b7d6:	3720      	adds	r7, #32
 802b7d8:	46bd      	mov	sp, r7
 802b7da:	bd80      	pop	{r7, pc}
 802b7dc:	240017dc 	.word	0x240017dc
 802b7e0:	40000400 	.word	0x40000400

0802b7e4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 802b7e4:	b580      	push	{r7, lr}
 802b7e6:	b088      	sub	sp, #32
 802b7e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 802b7ea:	f107 0310 	add.w	r3, r7, #16
 802b7ee:	2200      	movs	r2, #0
 802b7f0:	601a      	str	r2, [r3, #0]
 802b7f2:	605a      	str	r2, [r3, #4]
 802b7f4:	609a      	str	r2, [r3, #8]
 802b7f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 802b7f8:	1d3b      	adds	r3, r7, #4
 802b7fa:	2200      	movs	r2, #0
 802b7fc:	601a      	str	r2, [r3, #0]
 802b7fe:	605a      	str	r2, [r3, #4]
 802b800:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 802b802:	4b1d      	ldr	r3, [pc, #116]	; (802b878 <MX_TIM4_Init+0x94>)
 802b804:	4a1d      	ldr	r2, [pc, #116]	; (802b87c <MX_TIM4_Init+0x98>)
 802b806:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 24000;
 802b808:	4b1b      	ldr	r3, [pc, #108]	; (802b878 <MX_TIM4_Init+0x94>)
 802b80a:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 802b80e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 802b810:	4b19      	ldr	r3, [pc, #100]	; (802b878 <MX_TIM4_Init+0x94>)
 802b812:	2200      	movs	r2, #0
 802b814:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 802b816:	4b18      	ldr	r3, [pc, #96]	; (802b878 <MX_TIM4_Init+0x94>)
 802b818:	2264      	movs	r2, #100	; 0x64
 802b81a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 802b81c:	4b16      	ldr	r3, [pc, #88]	; (802b878 <MX_TIM4_Init+0x94>)
 802b81e:	2200      	movs	r2, #0
 802b820:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 802b822:	4b15      	ldr	r3, [pc, #84]	; (802b878 <MX_TIM4_Init+0x94>)
 802b824:	2200      	movs	r2, #0
 802b826:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 802b828:	4813      	ldr	r0, [pc, #76]	; (802b878 <MX_TIM4_Init+0x94>)
 802b82a:	f00a f8b8 	bl	803599e <HAL_TIM_Base_Init>
 802b82e:	4603      	mov	r3, r0
 802b830:	2b00      	cmp	r3, #0
 802b832:	d001      	beq.n	802b838 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 802b834:	f7ff fbc6 	bl	802afc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 802b838:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 802b83c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 802b83e:	f107 0310 	add.w	r3, r7, #16
 802b842:	4619      	mov	r1, r3
 802b844:	480c      	ldr	r0, [pc, #48]	; (802b878 <MX_TIM4_Init+0x94>)
 802b846:	f00a fa99 	bl	8035d7c <HAL_TIM_ConfigClockSource>
 802b84a:	4603      	mov	r3, r0
 802b84c:	2b00      	cmp	r3, #0
 802b84e:	d001      	beq.n	802b854 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 802b850:	f7ff fbb8 	bl	802afc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 802b854:	2300      	movs	r3, #0
 802b856:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 802b858:	2300      	movs	r3, #0
 802b85a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 802b85c:	1d3b      	adds	r3, r7, #4
 802b85e:	4619      	mov	r1, r3
 802b860:	4805      	ldr	r0, [pc, #20]	; (802b878 <MX_TIM4_Init+0x94>)
 802b862:	f00a fce3 	bl	803622c <HAL_TIMEx_MasterConfigSynchronization>
 802b866:	4603      	mov	r3, r0
 802b868:	2b00      	cmp	r3, #0
 802b86a:	d001      	beq.n	802b870 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 802b86c:	f7ff fbaa 	bl	802afc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 802b870:	bf00      	nop
 802b872:	3720      	adds	r7, #32
 802b874:	46bd      	mov	sp, r7
 802b876:	bd80      	pop	{r7, pc}
 802b878:	24001828 	.word	0x24001828
 802b87c:	40000800 	.word	0x40000800

0802b880 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 802b880:	b580      	push	{r7, lr}
 802b882:	b086      	sub	sp, #24
 802b884:	af00      	add	r7, sp, #0
 802b886:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 802b888:	687b      	ldr	r3, [r7, #4]
 802b88a:	681b      	ldr	r3, [r3, #0]
 802b88c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802b890:	d117      	bne.n	802b8c2 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 802b892:	4b2a      	ldr	r3, [pc, #168]	; (802b93c <HAL_TIM_Base_MspInit+0xbc>)
 802b894:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802b898:	4a28      	ldr	r2, [pc, #160]	; (802b93c <HAL_TIM_Base_MspInit+0xbc>)
 802b89a:	f043 0301 	orr.w	r3, r3, #1
 802b89e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 802b8a2:	4b26      	ldr	r3, [pc, #152]	; (802b93c <HAL_TIM_Base_MspInit+0xbc>)
 802b8a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802b8a8:	f003 0301 	and.w	r3, r3, #1
 802b8ac:	617b      	str	r3, [r7, #20]
 802b8ae:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 802b8b0:	2200      	movs	r2, #0
 802b8b2:	2100      	movs	r1, #0
 802b8b4:	201c      	movs	r0, #28
 802b8b6:	f000 ff3a 	bl	802c72e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 802b8ba:	201c      	movs	r0, #28
 802b8bc:	f000 ff51 	bl	802c762 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 802b8c0:	e038      	b.n	802b934 <HAL_TIM_Base_MspInit+0xb4>
  else if(tim_baseHandle->Instance==TIM3)
 802b8c2:	687b      	ldr	r3, [r7, #4]
 802b8c4:	681b      	ldr	r3, [r3, #0]
 802b8c6:	4a1e      	ldr	r2, [pc, #120]	; (802b940 <HAL_TIM_Base_MspInit+0xc0>)
 802b8c8:	4293      	cmp	r3, r2
 802b8ca:	d117      	bne.n	802b8fc <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 802b8cc:	4b1b      	ldr	r3, [pc, #108]	; (802b93c <HAL_TIM_Base_MspInit+0xbc>)
 802b8ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802b8d2:	4a1a      	ldr	r2, [pc, #104]	; (802b93c <HAL_TIM_Base_MspInit+0xbc>)
 802b8d4:	f043 0302 	orr.w	r3, r3, #2
 802b8d8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 802b8dc:	4b17      	ldr	r3, [pc, #92]	; (802b93c <HAL_TIM_Base_MspInit+0xbc>)
 802b8de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802b8e2:	f003 0302 	and.w	r3, r3, #2
 802b8e6:	613b      	str	r3, [r7, #16]
 802b8e8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 802b8ea:	2200      	movs	r2, #0
 802b8ec:	2100      	movs	r1, #0
 802b8ee:	201d      	movs	r0, #29
 802b8f0:	f000 ff1d 	bl	802c72e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 802b8f4:	201d      	movs	r0, #29
 802b8f6:	f000 ff34 	bl	802c762 <HAL_NVIC_EnableIRQ>
}
 802b8fa:	e01b      	b.n	802b934 <HAL_TIM_Base_MspInit+0xb4>
  else if(tim_baseHandle->Instance==TIM4)
 802b8fc:	687b      	ldr	r3, [r7, #4]
 802b8fe:	681b      	ldr	r3, [r3, #0]
 802b900:	4a10      	ldr	r2, [pc, #64]	; (802b944 <HAL_TIM_Base_MspInit+0xc4>)
 802b902:	4293      	cmp	r3, r2
 802b904:	d116      	bne.n	802b934 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 802b906:	4b0d      	ldr	r3, [pc, #52]	; (802b93c <HAL_TIM_Base_MspInit+0xbc>)
 802b908:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802b90c:	4a0b      	ldr	r2, [pc, #44]	; (802b93c <HAL_TIM_Base_MspInit+0xbc>)
 802b90e:	f043 0304 	orr.w	r3, r3, #4
 802b912:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 802b916:	4b09      	ldr	r3, [pc, #36]	; (802b93c <HAL_TIM_Base_MspInit+0xbc>)
 802b918:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802b91c:	f003 0304 	and.w	r3, r3, #4
 802b920:	60fb      	str	r3, [r7, #12]
 802b922:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 802b924:	2200      	movs	r2, #0
 802b926:	2100      	movs	r1, #0
 802b928:	201e      	movs	r0, #30
 802b92a:	f000 ff00 	bl	802c72e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 802b92e:	201e      	movs	r0, #30
 802b930:	f000 ff17 	bl	802c762 <HAL_NVIC_EnableIRQ>
}
 802b934:	bf00      	nop
 802b936:	3718      	adds	r7, #24
 802b938:	46bd      	mov	sp, r7
 802b93a:	bd80      	pop	{r7, pc}
 802b93c:	58024400 	.word	0x58024400
 802b940:	40000400 	.word	0x40000400
 802b944:	40000800 	.word	0x40000800

0802b948 <MX_UART4_Init>:
UART_HandleTypeDef huart2;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 802b948:	b580      	push	{r7, lr}
 802b94a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 802b94c:	4b25      	ldr	r3, [pc, #148]	; (802b9e4 <MX_UART4_Init+0x9c>)
 802b94e:	4a26      	ldr	r2, [pc, #152]	; (802b9e8 <MX_UART4_Init+0xa0>)
 802b950:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 802b952:	4b24      	ldr	r3, [pc, #144]	; (802b9e4 <MX_UART4_Init+0x9c>)
 802b954:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 802b958:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_9B;
 802b95a:	4b22      	ldr	r3, [pc, #136]	; (802b9e4 <MX_UART4_Init+0x9c>)
 802b95c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 802b960:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 802b962:	4b20      	ldr	r3, [pc, #128]	; (802b9e4 <MX_UART4_Init+0x9c>)
 802b964:	2200      	movs	r2, #0
 802b966:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_EVEN;
 802b968:	4b1e      	ldr	r3, [pc, #120]	; (802b9e4 <MX_UART4_Init+0x9c>)
 802b96a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 802b96e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 802b970:	4b1c      	ldr	r3, [pc, #112]	; (802b9e4 <MX_UART4_Init+0x9c>)
 802b972:	220c      	movs	r2, #12
 802b974:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 802b976:	4b1b      	ldr	r3, [pc, #108]	; (802b9e4 <MX_UART4_Init+0x9c>)
 802b978:	2200      	movs	r2, #0
 802b97a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 802b97c:	4b19      	ldr	r3, [pc, #100]	; (802b9e4 <MX_UART4_Init+0x9c>)
 802b97e:	2200      	movs	r2, #0
 802b980:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 802b982:	4b18      	ldr	r3, [pc, #96]	; (802b9e4 <MX_UART4_Init+0x9c>)
 802b984:	2200      	movs	r2, #0
 802b986:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 802b988:	4b16      	ldr	r3, [pc, #88]	; (802b9e4 <MX_UART4_Init+0x9c>)
 802b98a:	2200      	movs	r2, #0
 802b98c:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 802b98e:	4b15      	ldr	r3, [pc, #84]	; (802b9e4 <MX_UART4_Init+0x9c>)
 802b990:	2220      	movs	r2, #32
 802b992:	629a      	str	r2, [r3, #40]	; 0x28
  huart4.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 802b994:	4b13      	ldr	r3, [pc, #76]	; (802b9e4 <MX_UART4_Init+0x9c>)
 802b996:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 802b99a:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_UART_Init(&huart4) != HAL_OK)
 802b99c:	4811      	ldr	r0, [pc, #68]	; (802b9e4 <MX_UART4_Init+0x9c>)
 802b99e:	f00a fcf1 	bl	8036384 <HAL_UART_Init>
 802b9a2:	4603      	mov	r3, r0
 802b9a4:	2b00      	cmp	r3, #0
 802b9a6:	d001      	beq.n	802b9ac <MX_UART4_Init+0x64>
  {
    Error_Handler();
 802b9a8:	f7ff fb0c 	bl	802afc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 802b9ac:	2100      	movs	r1, #0
 802b9ae:	480d      	ldr	r0, [pc, #52]	; (802b9e4 <MX_UART4_Init+0x9c>)
 802b9b0:	f00d f88a 	bl	8038ac8 <HAL_UARTEx_SetTxFifoThreshold>
 802b9b4:	4603      	mov	r3, r0
 802b9b6:	2b00      	cmp	r3, #0
 802b9b8:	d001      	beq.n	802b9be <MX_UART4_Init+0x76>
  {
    Error_Handler();
 802b9ba:	f7ff fb03 	bl	802afc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 802b9be:	2100      	movs	r1, #0
 802b9c0:	4808      	ldr	r0, [pc, #32]	; (802b9e4 <MX_UART4_Init+0x9c>)
 802b9c2:	f00d f8bf 	bl	8038b44 <HAL_UARTEx_SetRxFifoThreshold>
 802b9c6:	4603      	mov	r3, r0
 802b9c8:	2b00      	cmp	r3, #0
 802b9ca:	d001      	beq.n	802b9d0 <MX_UART4_Init+0x88>
  {
    Error_Handler();
 802b9cc:	f7ff fafa 	bl	802afc4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 802b9d0:	4804      	ldr	r0, [pc, #16]	; (802b9e4 <MX_UART4_Init+0x9c>)
 802b9d2:	f00d f840 	bl	8038a56 <HAL_UARTEx_DisableFifoMode>
 802b9d6:	4603      	mov	r3, r0
 802b9d8:	2b00      	cmp	r3, #0
 802b9da:	d001      	beq.n	802b9e0 <MX_UART4_Init+0x98>
  {
    Error_Handler();
 802b9dc:	f7ff faf2 	bl	802afc4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 802b9e0:	bf00      	nop
 802b9e2:	bd80      	pop	{r7, pc}
 802b9e4:	24001874 	.word	0x24001874
 802b9e8:	40004c00 	.word	0x40004c00

0802b9ec <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 802b9ec:	b580      	push	{r7, lr}
 802b9ee:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 802b9f0:	4b22      	ldr	r3, [pc, #136]	; (802ba7c <MX_UART7_Init+0x90>)
 802b9f2:	4a23      	ldr	r2, [pc, #140]	; (802ba80 <MX_UART7_Init+0x94>)
 802b9f4:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 1250000;
 802b9f6:	4b21      	ldr	r3, [pc, #132]	; (802ba7c <MX_UART7_Init+0x90>)
 802b9f8:	4a22      	ldr	r2, [pc, #136]	; (802ba84 <MX_UART7_Init+0x98>)
 802b9fa:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 802b9fc:	4b1f      	ldr	r3, [pc, #124]	; (802ba7c <MX_UART7_Init+0x90>)
 802b9fe:	2200      	movs	r2, #0
 802ba00:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 802ba02:	4b1e      	ldr	r3, [pc, #120]	; (802ba7c <MX_UART7_Init+0x90>)
 802ba04:	2200      	movs	r2, #0
 802ba06:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 802ba08:	4b1c      	ldr	r3, [pc, #112]	; (802ba7c <MX_UART7_Init+0x90>)
 802ba0a:	2200      	movs	r2, #0
 802ba0c:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 802ba0e:	4b1b      	ldr	r3, [pc, #108]	; (802ba7c <MX_UART7_Init+0x90>)
 802ba10:	220c      	movs	r2, #12
 802ba12:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 802ba14:	4b19      	ldr	r3, [pc, #100]	; (802ba7c <MX_UART7_Init+0x90>)
 802ba16:	2200      	movs	r2, #0
 802ba18:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 802ba1a:	4b18      	ldr	r3, [pc, #96]	; (802ba7c <MX_UART7_Init+0x90>)
 802ba1c:	2200      	movs	r2, #0
 802ba1e:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 802ba20:	4b16      	ldr	r3, [pc, #88]	; (802ba7c <MX_UART7_Init+0x90>)
 802ba22:	2200      	movs	r2, #0
 802ba24:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 802ba26:	4b15      	ldr	r3, [pc, #84]	; (802ba7c <MX_UART7_Init+0x90>)
 802ba28:	2200      	movs	r2, #0
 802ba2a:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 802ba2c:	4b13      	ldr	r3, [pc, #76]	; (802ba7c <MX_UART7_Init+0x90>)
 802ba2e:	2200      	movs	r2, #0
 802ba30:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 802ba32:	4812      	ldr	r0, [pc, #72]	; (802ba7c <MX_UART7_Init+0x90>)
 802ba34:	f00a fca6 	bl	8036384 <HAL_UART_Init>
 802ba38:	4603      	mov	r3, r0
 802ba3a:	2b00      	cmp	r3, #0
 802ba3c:	d001      	beq.n	802ba42 <MX_UART7_Init+0x56>
  {
    Error_Handler();
 802ba3e:	f7ff fac1 	bl	802afc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 802ba42:	2100      	movs	r1, #0
 802ba44:	480d      	ldr	r0, [pc, #52]	; (802ba7c <MX_UART7_Init+0x90>)
 802ba46:	f00d f83f 	bl	8038ac8 <HAL_UARTEx_SetTxFifoThreshold>
 802ba4a:	4603      	mov	r3, r0
 802ba4c:	2b00      	cmp	r3, #0
 802ba4e:	d001      	beq.n	802ba54 <MX_UART7_Init+0x68>
  {
    Error_Handler();
 802ba50:	f7ff fab8 	bl	802afc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 802ba54:	2100      	movs	r1, #0
 802ba56:	4809      	ldr	r0, [pc, #36]	; (802ba7c <MX_UART7_Init+0x90>)
 802ba58:	f00d f874 	bl	8038b44 <HAL_UARTEx_SetRxFifoThreshold>
 802ba5c:	4603      	mov	r3, r0
 802ba5e:	2b00      	cmp	r3, #0
 802ba60:	d001      	beq.n	802ba66 <MX_UART7_Init+0x7a>
  {
    Error_Handler();
 802ba62:	f7ff faaf 	bl	802afc4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 802ba66:	4805      	ldr	r0, [pc, #20]	; (802ba7c <MX_UART7_Init+0x90>)
 802ba68:	f00c fff5 	bl	8038a56 <HAL_UARTEx_DisableFifoMode>
 802ba6c:	4603      	mov	r3, r0
 802ba6e:	2b00      	cmp	r3, #0
 802ba70:	d001      	beq.n	802ba76 <MX_UART7_Init+0x8a>
  {
    Error_Handler();
 802ba72:	f7ff faa7 	bl	802afc4 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 802ba76:	bf00      	nop
 802ba78:	bd80      	pop	{r7, pc}
 802ba7a:	bf00      	nop
 802ba7c:	24001904 	.word	0x24001904
 802ba80:	40007800 	.word	0x40007800
 802ba84:	001312d0 	.word	0x001312d0

0802ba88 <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{
 802ba88:	b580      	push	{r7, lr}
 802ba8a:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 802ba8c:	4b26      	ldr	r3, [pc, #152]	; (802bb28 <MX_UART8_Init+0xa0>)
 802ba8e:	4a27      	ldr	r2, [pc, #156]	; (802bb2c <MX_UART8_Init+0xa4>)
 802ba90:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 1250000;
 802ba92:	4b25      	ldr	r3, [pc, #148]	; (802bb28 <MX_UART8_Init+0xa0>)
 802ba94:	4a26      	ldr	r2, [pc, #152]	; (802bb30 <MX_UART8_Init+0xa8>)
 802ba96:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_9B;
 802ba98:	4b23      	ldr	r3, [pc, #140]	; (802bb28 <MX_UART8_Init+0xa0>)
 802ba9a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 802ba9e:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 802baa0:	4b21      	ldr	r3, [pc, #132]	; (802bb28 <MX_UART8_Init+0xa0>)
 802baa2:	2200      	movs	r2, #0
 802baa4:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_EVEN;
 802baa6:	4b20      	ldr	r3, [pc, #128]	; (802bb28 <MX_UART8_Init+0xa0>)
 802baa8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 802baac:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 802baae:	4b1e      	ldr	r3, [pc, #120]	; (802bb28 <MX_UART8_Init+0xa0>)
 802bab0:	220c      	movs	r2, #12
 802bab2:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 802bab4:	4b1c      	ldr	r3, [pc, #112]	; (802bb28 <MX_UART8_Init+0xa0>)
 802bab6:	2200      	movs	r2, #0
 802bab8:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 802baba:	4b1b      	ldr	r3, [pc, #108]	; (802bb28 <MX_UART8_Init+0xa0>)
 802babc:	2200      	movs	r2, #0
 802babe:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 802bac0:	4b19      	ldr	r3, [pc, #100]	; (802bb28 <MX_UART8_Init+0xa0>)
 802bac2:	2200      	movs	r2, #0
 802bac4:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 802bac6:	4b18      	ldr	r3, [pc, #96]	; (802bb28 <MX_UART8_Init+0xa0>)
 802bac8:	2200      	movs	r2, #0
 802baca:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 802bacc:	4b16      	ldr	r3, [pc, #88]	; (802bb28 <MX_UART8_Init+0xa0>)
 802bace:	2220      	movs	r2, #32
 802bad0:	629a      	str	r2, [r3, #40]	; 0x28
  huart8.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 802bad2:	4b15      	ldr	r3, [pc, #84]	; (802bb28 <MX_UART8_Init+0xa0>)
 802bad4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 802bad8:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_UART_Init(&huart8) != HAL_OK)
 802bada:	4813      	ldr	r0, [pc, #76]	; (802bb28 <MX_UART8_Init+0xa0>)
 802badc:	f00a fc52 	bl	8036384 <HAL_UART_Init>
 802bae0:	4603      	mov	r3, r0
 802bae2:	2b00      	cmp	r3, #0
 802bae4:	d001      	beq.n	802baea <MX_UART8_Init+0x62>
  {
    Error_Handler();
 802bae6:	f7ff fa6d 	bl	802afc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 802baea:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 802baee:	480e      	ldr	r0, [pc, #56]	; (802bb28 <MX_UART8_Init+0xa0>)
 802baf0:	f00c ffea 	bl	8038ac8 <HAL_UARTEx_SetTxFifoThreshold>
 802baf4:	4603      	mov	r3, r0
 802baf6:	2b00      	cmp	r3, #0
 802baf8:	d001      	beq.n	802bafe <MX_UART8_Init+0x76>
  {
    Error_Handler();
 802bafa:	f7ff fa63 	bl	802afc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 802bafe:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 802bb02:	4809      	ldr	r0, [pc, #36]	; (802bb28 <MX_UART8_Init+0xa0>)
 802bb04:	f00d f81e 	bl	8038b44 <HAL_UARTEx_SetRxFifoThreshold>
 802bb08:	4603      	mov	r3, r0
 802bb0a:	2b00      	cmp	r3, #0
 802bb0c:	d001      	beq.n	802bb12 <MX_UART8_Init+0x8a>
  {
    Error_Handler();
 802bb0e:	f7ff fa59 	bl	802afc4 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart8) != HAL_OK)
 802bb12:	4805      	ldr	r0, [pc, #20]	; (802bb28 <MX_UART8_Init+0xa0>)
 802bb14:	f00c ff64 	bl	80389e0 <HAL_UARTEx_EnableFifoMode>
 802bb18:	4603      	mov	r3, r0
 802bb1a:	2b00      	cmp	r3, #0
 802bb1c:	d001      	beq.n	802bb22 <MX_UART8_Init+0x9a>
  {
    Error_Handler();
 802bb1e:	f7ff fa51 	bl	802afc4 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 802bb22:	bf00      	nop
 802bb24:	bd80      	pop	{r7, pc}
 802bb26:	bf00      	nop
 802bb28:	24001994 	.word	0x24001994
 802bb2c:	40007c00 	.word	0x40007c00
 802bb30:	001312d0 	.word	0x001312d0

0802bb34 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 802bb34:	b580      	push	{r7, lr}
 802bb36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 802bb38:	4b22      	ldr	r3, [pc, #136]	; (802bbc4 <MX_USART2_UART_Init+0x90>)
 802bb3a:	4a23      	ldr	r2, [pc, #140]	; (802bbc8 <MX_USART2_UART_Init+0x94>)
 802bb3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 802bb3e:	4b21      	ldr	r3, [pc, #132]	; (802bbc4 <MX_USART2_UART_Init+0x90>)
 802bb40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 802bb44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 802bb46:	4b1f      	ldr	r3, [pc, #124]	; (802bbc4 <MX_USART2_UART_Init+0x90>)
 802bb48:	2200      	movs	r2, #0
 802bb4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 802bb4c:	4b1d      	ldr	r3, [pc, #116]	; (802bbc4 <MX_USART2_UART_Init+0x90>)
 802bb4e:	2200      	movs	r2, #0
 802bb50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 802bb52:	4b1c      	ldr	r3, [pc, #112]	; (802bbc4 <MX_USART2_UART_Init+0x90>)
 802bb54:	2200      	movs	r2, #0
 802bb56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 802bb58:	4b1a      	ldr	r3, [pc, #104]	; (802bbc4 <MX_USART2_UART_Init+0x90>)
 802bb5a:	220c      	movs	r2, #12
 802bb5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 802bb5e:	4b19      	ldr	r3, [pc, #100]	; (802bbc4 <MX_USART2_UART_Init+0x90>)
 802bb60:	2200      	movs	r2, #0
 802bb62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 802bb64:	4b17      	ldr	r3, [pc, #92]	; (802bbc4 <MX_USART2_UART_Init+0x90>)
 802bb66:	2200      	movs	r2, #0
 802bb68:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 802bb6a:	4b16      	ldr	r3, [pc, #88]	; (802bbc4 <MX_USART2_UART_Init+0x90>)
 802bb6c:	2200      	movs	r2, #0
 802bb6e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 802bb70:	4b14      	ldr	r3, [pc, #80]	; (802bbc4 <MX_USART2_UART_Init+0x90>)
 802bb72:	2200      	movs	r2, #0
 802bb74:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 802bb76:	4b13      	ldr	r3, [pc, #76]	; (802bbc4 <MX_USART2_UART_Init+0x90>)
 802bb78:	2200      	movs	r2, #0
 802bb7a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 802bb7c:	4811      	ldr	r0, [pc, #68]	; (802bbc4 <MX_USART2_UART_Init+0x90>)
 802bb7e:	f00a fc01 	bl	8036384 <HAL_UART_Init>
 802bb82:	4603      	mov	r3, r0
 802bb84:	2b00      	cmp	r3, #0
 802bb86:	d001      	beq.n	802bb8c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 802bb88:	f7ff fa1c 	bl	802afc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 802bb8c:	2100      	movs	r1, #0
 802bb8e:	480d      	ldr	r0, [pc, #52]	; (802bbc4 <MX_USART2_UART_Init+0x90>)
 802bb90:	f00c ff9a 	bl	8038ac8 <HAL_UARTEx_SetTxFifoThreshold>
 802bb94:	4603      	mov	r3, r0
 802bb96:	2b00      	cmp	r3, #0
 802bb98:	d001      	beq.n	802bb9e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 802bb9a:	f7ff fa13 	bl	802afc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 802bb9e:	2100      	movs	r1, #0
 802bba0:	4808      	ldr	r0, [pc, #32]	; (802bbc4 <MX_USART2_UART_Init+0x90>)
 802bba2:	f00c ffcf 	bl	8038b44 <HAL_UARTEx_SetRxFifoThreshold>
 802bba6:	4603      	mov	r3, r0
 802bba8:	2b00      	cmp	r3, #0
 802bbaa:	d001      	beq.n	802bbb0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 802bbac:	f7ff fa0a 	bl	802afc4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 802bbb0:	4804      	ldr	r0, [pc, #16]	; (802bbc4 <MX_USART2_UART_Init+0x90>)
 802bbb2:	f00c ff50 	bl	8038a56 <HAL_UARTEx_DisableFifoMode>
 802bbb6:	4603      	mov	r3, r0
 802bbb8:	2b00      	cmp	r3, #0
 802bbba:	d001      	beq.n	802bbc0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 802bbbc:	f7ff fa02 	bl	802afc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 802bbc0:	bf00      	nop
 802bbc2:	bd80      	pop	{r7, pc}
 802bbc4:	24001a24 	.word	0x24001a24
 802bbc8:	40004400 	.word	0x40004400

0802bbcc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 802bbcc:	b580      	push	{r7, lr}
 802bbce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 802bbd0:	4b26      	ldr	r3, [pc, #152]	; (802bc6c <MX_USART3_UART_Init+0xa0>)
 802bbd2:	4a27      	ldr	r2, [pc, #156]	; (802bc70 <MX_USART3_UART_Init+0xa4>)
 802bbd4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 1250000;
 802bbd6:	4b25      	ldr	r3, [pc, #148]	; (802bc6c <MX_USART3_UART_Init+0xa0>)
 802bbd8:	4a26      	ldr	r2, [pc, #152]	; (802bc74 <MX_USART3_UART_Init+0xa8>)
 802bbda:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_9B;
 802bbdc:	4b23      	ldr	r3, [pc, #140]	; (802bc6c <MX_USART3_UART_Init+0xa0>)
 802bbde:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 802bbe2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 802bbe4:	4b21      	ldr	r3, [pc, #132]	; (802bc6c <MX_USART3_UART_Init+0xa0>)
 802bbe6:	2200      	movs	r2, #0
 802bbe8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_EVEN;
 802bbea:	4b20      	ldr	r3, [pc, #128]	; (802bc6c <MX_USART3_UART_Init+0xa0>)
 802bbec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 802bbf0:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 802bbf2:	4b1e      	ldr	r3, [pc, #120]	; (802bc6c <MX_USART3_UART_Init+0xa0>)
 802bbf4:	220c      	movs	r2, #12
 802bbf6:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 802bbf8:	4b1c      	ldr	r3, [pc, #112]	; (802bc6c <MX_USART3_UART_Init+0xa0>)
 802bbfa:	2200      	movs	r2, #0
 802bbfc:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 802bbfe:	4b1b      	ldr	r3, [pc, #108]	; (802bc6c <MX_USART3_UART_Init+0xa0>)
 802bc00:	2200      	movs	r2, #0
 802bc02:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 802bc04:	4b19      	ldr	r3, [pc, #100]	; (802bc6c <MX_USART3_UART_Init+0xa0>)
 802bc06:	2200      	movs	r2, #0
 802bc08:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 802bc0a:	4b18      	ldr	r3, [pc, #96]	; (802bc6c <MX_USART3_UART_Init+0xa0>)
 802bc0c:	2200      	movs	r2, #0
 802bc0e:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 802bc10:	4b16      	ldr	r3, [pc, #88]	; (802bc6c <MX_USART3_UART_Init+0xa0>)
 802bc12:	2220      	movs	r2, #32
 802bc14:	629a      	str	r2, [r3, #40]	; 0x28
  huart3.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 802bc16:	4b15      	ldr	r3, [pc, #84]	; (802bc6c <MX_USART3_UART_Init+0xa0>)
 802bc18:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 802bc1c:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_UART_Init(&huart3) != HAL_OK)
 802bc1e:	4813      	ldr	r0, [pc, #76]	; (802bc6c <MX_USART3_UART_Init+0xa0>)
 802bc20:	f00a fbb0 	bl	8036384 <HAL_UART_Init>
 802bc24:	4603      	mov	r3, r0
 802bc26:	2b00      	cmp	r3, #0
 802bc28:	d001      	beq.n	802bc2e <MX_USART3_UART_Init+0x62>
  {
    Error_Handler();
 802bc2a:	f7ff f9cb 	bl	802afc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 802bc2e:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 802bc32:	480e      	ldr	r0, [pc, #56]	; (802bc6c <MX_USART3_UART_Init+0xa0>)
 802bc34:	f00c ff48 	bl	8038ac8 <HAL_UARTEx_SetTxFifoThreshold>
 802bc38:	4603      	mov	r3, r0
 802bc3a:	2b00      	cmp	r3, #0
 802bc3c:	d001      	beq.n	802bc42 <MX_USART3_UART_Init+0x76>
  {
    Error_Handler();
 802bc3e:	f7ff f9c1 	bl	802afc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 802bc42:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 802bc46:	4809      	ldr	r0, [pc, #36]	; (802bc6c <MX_USART3_UART_Init+0xa0>)
 802bc48:	f00c ff7c 	bl	8038b44 <HAL_UARTEx_SetRxFifoThreshold>
 802bc4c:	4603      	mov	r3, r0
 802bc4e:	2b00      	cmp	r3, #0
 802bc50:	d001      	beq.n	802bc56 <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 802bc52:	f7ff f9b7 	bl	802afc4 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart3) != HAL_OK)
 802bc56:	4805      	ldr	r0, [pc, #20]	; (802bc6c <MX_USART3_UART_Init+0xa0>)
 802bc58:	f00c fec2 	bl	80389e0 <HAL_UARTEx_EnableFifoMode>
 802bc5c:	4603      	mov	r3, r0
 802bc5e:	2b00      	cmp	r3, #0
 802bc60:	d001      	beq.n	802bc66 <MX_USART3_UART_Init+0x9a>
  {
    Error_Handler();
 802bc62:	f7ff f9af 	bl	802afc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 802bc66:	bf00      	nop
 802bc68:	bd80      	pop	{r7, pc}
 802bc6a:	bf00      	nop
 802bc6c:	24001ab4 	.word	0x24001ab4
 802bc70:	40004800 	.word	0x40004800
 802bc74:	001312d0 	.word	0x001312d0

0802bc78 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 802bc78:	b580      	push	{r7, lr}
 802bc7a:	b0c0      	sub	sp, #256	; 0x100
 802bc7c:	af00      	add	r7, sp, #0
 802bc7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802bc80:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 802bc84:	2200      	movs	r2, #0
 802bc86:	601a      	str	r2, [r3, #0]
 802bc88:	605a      	str	r2, [r3, #4]
 802bc8a:	609a      	str	r2, [r3, #8]
 802bc8c:	60da      	str	r2, [r3, #12]
 802bc8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 802bc90:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802bc94:	22bc      	movs	r2, #188	; 0xbc
 802bc96:	2100      	movs	r1, #0
 802bc98:	4618      	mov	r0, r3
 802bc9a:	f011 f9a1 	bl	803cfe0 <memset>
  if(uartHandle->Instance==UART4)
 802bc9e:	687b      	ldr	r3, [r7, #4]
 802bca0:	681b      	ldr	r3, [r3, #0]
 802bca2:	4ac2      	ldr	r2, [pc, #776]	; (802bfac <HAL_UART_MspInit+0x334>)
 802bca4:	4293      	cmp	r3, r2
 802bca6:	d14a      	bne.n	802bd3e <HAL_UART_MspInit+0xc6>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 802bca8:	2302      	movs	r3, #2
 802bcaa:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 802bcac:	2300      	movs	r3, #0
 802bcae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 802bcb2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802bcb6:	4618      	mov	r0, r3
 802bcb8:	f007 f9dc 	bl	8033074 <HAL_RCCEx_PeriphCLKConfig>
 802bcbc:	4603      	mov	r3, r0
 802bcbe:	2b00      	cmp	r3, #0
 802bcc0:	d001      	beq.n	802bcc6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 802bcc2:	f7ff f97f 	bl	802afc4 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 802bcc6:	4bba      	ldr	r3, [pc, #744]	; (802bfb0 <HAL_UART_MspInit+0x338>)
 802bcc8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802bccc:	4ab8      	ldr	r2, [pc, #736]	; (802bfb0 <HAL_UART_MspInit+0x338>)
 802bcce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 802bcd2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 802bcd6:	4bb6      	ldr	r3, [pc, #728]	; (802bfb0 <HAL_UART_MspInit+0x338>)
 802bcd8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802bcdc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 802bce0:	62fb      	str	r3, [r7, #44]	; 0x2c
 802bce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    __HAL_RCC_GPIOA_CLK_ENABLE();
 802bce4:	4bb2      	ldr	r3, [pc, #712]	; (802bfb0 <HAL_UART_MspInit+0x338>)
 802bce6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802bcea:	4ab1      	ldr	r2, [pc, #708]	; (802bfb0 <HAL_UART_MspInit+0x338>)
 802bcec:	f043 0301 	orr.w	r3, r3, #1
 802bcf0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802bcf4:	4bae      	ldr	r3, [pc, #696]	; (802bfb0 <HAL_UART_MspInit+0x338>)
 802bcf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802bcfa:	f003 0301 	and.w	r3, r3, #1
 802bcfe:	62bb      	str	r3, [r7, #40]	; 0x28
 802bd00:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 802bd02:	2303      	movs	r3, #3
 802bd04:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802bd08:	2302      	movs	r3, #2
 802bd0a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802bd0e:	2300      	movs	r3, #0
 802bd10:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802bd14:	2300      	movs	r3, #0
 802bd16:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 802bd1a:	2308      	movs	r3, #8
 802bd1c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802bd20:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 802bd24:	4619      	mov	r1, r3
 802bd26:	48a3      	ldr	r0, [pc, #652]	; (802bfb4 <HAL_UART_MspInit+0x33c>)
 802bd28:	f003 fd54 	bl	802f7d4 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 802bd2c:	2200      	movs	r2, #0
 802bd2e:	2100      	movs	r1, #0
 802bd30:	2034      	movs	r0, #52	; 0x34
 802bd32:	f000 fcfc 	bl	802c72e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 802bd36:	2034      	movs	r0, #52	; 0x34
 802bd38:	f000 fd13 	bl	802c762 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 802bd3c:	e130      	b.n	802bfa0 <HAL_UART_MspInit+0x328>
  else if(uartHandle->Instance==UART7)
 802bd3e:	687b      	ldr	r3, [r7, #4]
 802bd40:	681b      	ldr	r3, [r3, #0]
 802bd42:	4a9d      	ldr	r2, [pc, #628]	; (802bfb8 <HAL_UART_MspInit+0x340>)
 802bd44:	4293      	cmp	r3, r2
 802bd46:	d143      	bne.n	802bdd0 <HAL_UART_MspInit+0x158>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 802bd48:	2302      	movs	r3, #2
 802bd4a:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 802bd4c:	2300      	movs	r3, #0
 802bd4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 802bd52:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802bd56:	4618      	mov	r0, r3
 802bd58:	f007 f98c 	bl	8033074 <HAL_RCCEx_PeriphCLKConfig>
 802bd5c:	4603      	mov	r3, r0
 802bd5e:	2b00      	cmp	r3, #0
 802bd60:	d001      	beq.n	802bd66 <HAL_UART_MspInit+0xee>
      Error_Handler();
 802bd62:	f7ff f92f 	bl	802afc4 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 802bd66:	4b92      	ldr	r3, [pc, #584]	; (802bfb0 <HAL_UART_MspInit+0x338>)
 802bd68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802bd6c:	4a90      	ldr	r2, [pc, #576]	; (802bfb0 <HAL_UART_MspInit+0x338>)
 802bd6e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802bd72:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 802bd76:	4b8e      	ldr	r3, [pc, #568]	; (802bfb0 <HAL_UART_MspInit+0x338>)
 802bd78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802bd7c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 802bd80:	627b      	str	r3, [r7, #36]	; 0x24
 802bd82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 802bd84:	4b8a      	ldr	r3, [pc, #552]	; (802bfb0 <HAL_UART_MspInit+0x338>)
 802bd86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802bd8a:	4a89      	ldr	r2, [pc, #548]	; (802bfb0 <HAL_UART_MspInit+0x338>)
 802bd8c:	f043 0310 	orr.w	r3, r3, #16
 802bd90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802bd94:	4b86      	ldr	r3, [pc, #536]	; (802bfb0 <HAL_UART_MspInit+0x338>)
 802bd96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802bd9a:	f003 0310 	and.w	r3, r3, #16
 802bd9e:	623b      	str	r3, [r7, #32]
 802bda0:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 802bda2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 802bda6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802bdaa:	2302      	movs	r3, #2
 802bdac:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802bdb0:	2300      	movs	r3, #0
 802bdb2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802bdb6:	2300      	movs	r3, #0
 802bdb8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 802bdbc:	2307      	movs	r3, #7
 802bdbe:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 802bdc2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 802bdc6:	4619      	mov	r1, r3
 802bdc8:	487c      	ldr	r0, [pc, #496]	; (802bfbc <HAL_UART_MspInit+0x344>)
 802bdca:	f003 fd03 	bl	802f7d4 <HAL_GPIO_Init>
}
 802bdce:	e0e7      	b.n	802bfa0 <HAL_UART_MspInit+0x328>
  else if(uartHandle->Instance==UART8)
 802bdd0:	687b      	ldr	r3, [r7, #4]
 802bdd2:	681b      	ldr	r3, [r3, #0]
 802bdd4:	4a7a      	ldr	r2, [pc, #488]	; (802bfc0 <HAL_UART_MspInit+0x348>)
 802bdd6:	4293      	cmp	r3, r2
 802bdd8:	d14a      	bne.n	802be70 <HAL_UART_MspInit+0x1f8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 802bdda:	2302      	movs	r3, #2
 802bddc:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 802bdde:	2300      	movs	r3, #0
 802bde0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 802bde4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802bde8:	4618      	mov	r0, r3
 802bdea:	f007 f943 	bl	8033074 <HAL_RCCEx_PeriphCLKConfig>
 802bdee:	4603      	mov	r3, r0
 802bdf0:	2b00      	cmp	r3, #0
 802bdf2:	d001      	beq.n	802bdf8 <HAL_UART_MspInit+0x180>
      Error_Handler();
 802bdf4:	f7ff f8e6 	bl	802afc4 <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 802bdf8:	4b6d      	ldr	r3, [pc, #436]	; (802bfb0 <HAL_UART_MspInit+0x338>)
 802bdfa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802bdfe:	4a6c      	ldr	r2, [pc, #432]	; (802bfb0 <HAL_UART_MspInit+0x338>)
 802be00:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802be04:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 802be08:	4b69      	ldr	r3, [pc, #420]	; (802bfb0 <HAL_UART_MspInit+0x338>)
 802be0a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802be0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802be12:	61fb      	str	r3, [r7, #28]
 802be14:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 802be16:	4b66      	ldr	r3, [pc, #408]	; (802bfb0 <HAL_UART_MspInit+0x338>)
 802be18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802be1c:	4a64      	ldr	r2, [pc, #400]	; (802bfb0 <HAL_UART_MspInit+0x338>)
 802be1e:	f043 0310 	orr.w	r3, r3, #16
 802be22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802be26:	4b62      	ldr	r3, [pc, #392]	; (802bfb0 <HAL_UART_MspInit+0x338>)
 802be28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802be2c:	f003 0310 	and.w	r3, r3, #16
 802be30:	61bb      	str	r3, [r7, #24]
 802be32:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 802be34:	2303      	movs	r3, #3
 802be36:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802be3a:	2302      	movs	r3, #2
 802be3c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802be40:	2300      	movs	r3, #0
 802be42:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802be46:	2300      	movs	r3, #0
 802be48:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 802be4c:	2308      	movs	r3, #8
 802be4e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 802be52:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 802be56:	4619      	mov	r1, r3
 802be58:	4858      	ldr	r0, [pc, #352]	; (802bfbc <HAL_UART_MspInit+0x344>)
 802be5a:	f003 fcbb 	bl	802f7d4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 802be5e:	2200      	movs	r2, #0
 802be60:	2100      	movs	r1, #0
 802be62:	2053      	movs	r0, #83	; 0x53
 802be64:	f000 fc63 	bl	802c72e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 802be68:	2053      	movs	r0, #83	; 0x53
 802be6a:	f000 fc7a 	bl	802c762 <HAL_NVIC_EnableIRQ>
}
 802be6e:	e097      	b.n	802bfa0 <HAL_UART_MspInit+0x328>
  else if(uartHandle->Instance==USART2)
 802be70:	687b      	ldr	r3, [r7, #4]
 802be72:	681b      	ldr	r3, [r3, #0]
 802be74:	4a53      	ldr	r2, [pc, #332]	; (802bfc4 <HAL_UART_MspInit+0x34c>)
 802be76:	4293      	cmp	r3, r2
 802be78:	d142      	bne.n	802bf00 <HAL_UART_MspInit+0x288>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 802be7a:	2302      	movs	r3, #2
 802be7c:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 802be7e:	2300      	movs	r3, #0
 802be80:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 802be84:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802be88:	4618      	mov	r0, r3
 802be8a:	f007 f8f3 	bl	8033074 <HAL_RCCEx_PeriphCLKConfig>
 802be8e:	4603      	mov	r3, r0
 802be90:	2b00      	cmp	r3, #0
 802be92:	d001      	beq.n	802be98 <HAL_UART_MspInit+0x220>
      Error_Handler();
 802be94:	f7ff f896 	bl	802afc4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 802be98:	4b45      	ldr	r3, [pc, #276]	; (802bfb0 <HAL_UART_MspInit+0x338>)
 802be9a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802be9e:	4a44      	ldr	r2, [pc, #272]	; (802bfb0 <HAL_UART_MspInit+0x338>)
 802bea0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 802bea4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 802bea8:	4b41      	ldr	r3, [pc, #260]	; (802bfb0 <HAL_UART_MspInit+0x338>)
 802beaa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802beae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802beb2:	617b      	str	r3, [r7, #20]
 802beb4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 802beb6:	4b3e      	ldr	r3, [pc, #248]	; (802bfb0 <HAL_UART_MspInit+0x338>)
 802beb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802bebc:	4a3c      	ldr	r2, [pc, #240]	; (802bfb0 <HAL_UART_MspInit+0x338>)
 802bebe:	f043 0301 	orr.w	r3, r3, #1
 802bec2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802bec6:	4b3a      	ldr	r3, [pc, #232]	; (802bfb0 <HAL_UART_MspInit+0x338>)
 802bec8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802becc:	f003 0301 	and.w	r3, r3, #1
 802bed0:	613b      	str	r3, [r7, #16]
 802bed2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 802bed4:	230c      	movs	r3, #12
 802bed6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802beda:	2302      	movs	r3, #2
 802bedc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802bee0:	2300      	movs	r3, #0
 802bee2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802bee6:	2300      	movs	r3, #0
 802bee8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 802beec:	2307      	movs	r3, #7
 802beee:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802bef2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 802bef6:	4619      	mov	r1, r3
 802bef8:	482e      	ldr	r0, [pc, #184]	; (802bfb4 <HAL_UART_MspInit+0x33c>)
 802befa:	f003 fc6b 	bl	802f7d4 <HAL_GPIO_Init>
}
 802befe:	e04f      	b.n	802bfa0 <HAL_UART_MspInit+0x328>
  else if(uartHandle->Instance==USART3)
 802bf00:	687b      	ldr	r3, [r7, #4]
 802bf02:	681b      	ldr	r3, [r3, #0]
 802bf04:	4a30      	ldr	r2, [pc, #192]	; (802bfc8 <HAL_UART_MspInit+0x350>)
 802bf06:	4293      	cmp	r3, r2
 802bf08:	d14a      	bne.n	802bfa0 <HAL_UART_MspInit+0x328>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 802bf0a:	2302      	movs	r3, #2
 802bf0c:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 802bf0e:	2300      	movs	r3, #0
 802bf10:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 802bf14:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802bf18:	4618      	mov	r0, r3
 802bf1a:	f007 f8ab 	bl	8033074 <HAL_RCCEx_PeriphCLKConfig>
 802bf1e:	4603      	mov	r3, r0
 802bf20:	2b00      	cmp	r3, #0
 802bf22:	d001      	beq.n	802bf28 <HAL_UART_MspInit+0x2b0>
      Error_Handler();
 802bf24:	f7ff f84e 	bl	802afc4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 802bf28:	4b21      	ldr	r3, [pc, #132]	; (802bfb0 <HAL_UART_MspInit+0x338>)
 802bf2a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802bf2e:	4a20      	ldr	r2, [pc, #128]	; (802bfb0 <HAL_UART_MspInit+0x338>)
 802bf30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 802bf34:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 802bf38:	4b1d      	ldr	r3, [pc, #116]	; (802bfb0 <HAL_UART_MspInit+0x338>)
 802bf3a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802bf3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 802bf42:	60fb      	str	r3, [r7, #12]
 802bf44:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 802bf46:	4b1a      	ldr	r3, [pc, #104]	; (802bfb0 <HAL_UART_MspInit+0x338>)
 802bf48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802bf4c:	4a18      	ldr	r2, [pc, #96]	; (802bfb0 <HAL_UART_MspInit+0x338>)
 802bf4e:	f043 0308 	orr.w	r3, r3, #8
 802bf52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802bf56:	4b16      	ldr	r3, [pc, #88]	; (802bfb0 <HAL_UART_MspInit+0x338>)
 802bf58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802bf5c:	f003 0308 	and.w	r3, r3, #8
 802bf60:	60bb      	str	r3, [r7, #8]
 802bf62:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 802bf64:	f44f 7340 	mov.w	r3, #768	; 0x300
 802bf68:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802bf6c:	2302      	movs	r3, #2
 802bf6e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802bf72:	2300      	movs	r3, #0
 802bf74:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802bf78:	2300      	movs	r3, #0
 802bf7a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 802bf7e:	2307      	movs	r3, #7
 802bf80:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 802bf84:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 802bf88:	4619      	mov	r1, r3
 802bf8a:	4810      	ldr	r0, [pc, #64]	; (802bfcc <HAL_UART_MspInit+0x354>)
 802bf8c:	f003 fc22 	bl	802f7d4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 802bf90:	2200      	movs	r2, #0
 802bf92:	2100      	movs	r1, #0
 802bf94:	2027      	movs	r0, #39	; 0x27
 802bf96:	f000 fbca 	bl	802c72e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 802bf9a:	2027      	movs	r0, #39	; 0x27
 802bf9c:	f000 fbe1 	bl	802c762 <HAL_NVIC_EnableIRQ>
}
 802bfa0:	bf00      	nop
 802bfa2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 802bfa6:	46bd      	mov	sp, r7
 802bfa8:	bd80      	pop	{r7, pc}
 802bfaa:	bf00      	nop
 802bfac:	40004c00 	.word	0x40004c00
 802bfb0:	58024400 	.word	0x58024400
 802bfb4:	58020000 	.word	0x58020000
 802bfb8:	40007800 	.word	0x40007800
 802bfbc:	58021000 	.word	0x58021000
 802bfc0:	40007c00 	.word	0x40007c00
 802bfc4:	40004400 	.word	0x40004400
 802bfc8:	40004800 	.word	0x40004800
 802bfcc:	58020c00 	.word	0x58020c00

0802bfd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 802bfd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 802c008 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 802bfd4:	f7ff fae2 	bl	802b59c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 802bfd8:	480c      	ldr	r0, [pc, #48]	; (802c00c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 802bfda:	490d      	ldr	r1, [pc, #52]	; (802c010 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 802bfdc:	4a0d      	ldr	r2, [pc, #52]	; (802c014 <LoopFillZerobss+0x1a>)
  movs r3, #0
 802bfde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 802bfe0:	e002      	b.n	802bfe8 <LoopCopyDataInit>

0802bfe2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 802bfe2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 802bfe4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 802bfe6:	3304      	adds	r3, #4

0802bfe8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 802bfe8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 802bfea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 802bfec:	d3f9      	bcc.n	802bfe2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 802bfee:	4a0a      	ldr	r2, [pc, #40]	; (802c018 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 802bff0:	4c0a      	ldr	r4, [pc, #40]	; (802c01c <LoopFillZerobss+0x22>)
  movs r3, #0
 802bff2:	2300      	movs	r3, #0
  b LoopFillZerobss
 802bff4:	e001      	b.n	802bffa <LoopFillZerobss>

0802bff6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 802bff6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 802bff8:	3204      	adds	r2, #4

0802bffa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 802bffa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 802bffc:	d3fb      	bcc.n	802bff6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 802bffe:	f010 ff93 	bl	803cf28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 802c002:	f7fe fe47 	bl	802ac94 <main>
  bx  lr
 802c006:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 802c008:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 802c00c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 802c010:	24000164 	.word	0x24000164
  ldr r2, =_sidata
 802c014:	08058f24 	.word	0x08058f24
  ldr r2, =_sbss
 802c018:	24000168 	.word	0x24000168
  ldr r4, =_ebss
 802c01c:	24003768 	.word	0x24003768

0802c020 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 802c020:	e7fe      	b.n	802c020 <ADC3_IRQHandler>
	...

0802c024 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 802c024:	b580      	push	{r7, lr}
 802c026:	b082      	sub	sp, #8
 802c028:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 802c02a:	2003      	movs	r0, #3
 802c02c:	f000 fb74 	bl	802c718 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 802c030:	f006 fe4a 	bl	8032cc8 <HAL_RCC_GetSysClockFreq>
 802c034:	4602      	mov	r2, r0
 802c036:	4b15      	ldr	r3, [pc, #84]	; (802c08c <HAL_Init+0x68>)
 802c038:	699b      	ldr	r3, [r3, #24]
 802c03a:	0a1b      	lsrs	r3, r3, #8
 802c03c:	f003 030f 	and.w	r3, r3, #15
 802c040:	4913      	ldr	r1, [pc, #76]	; (802c090 <HAL_Init+0x6c>)
 802c042:	5ccb      	ldrb	r3, [r1, r3]
 802c044:	f003 031f 	and.w	r3, r3, #31
 802c048:	fa22 f303 	lsr.w	r3, r2, r3
 802c04c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 802c04e:	4b0f      	ldr	r3, [pc, #60]	; (802c08c <HAL_Init+0x68>)
 802c050:	699b      	ldr	r3, [r3, #24]
 802c052:	f003 030f 	and.w	r3, r3, #15
 802c056:	4a0e      	ldr	r2, [pc, #56]	; (802c090 <HAL_Init+0x6c>)
 802c058:	5cd3      	ldrb	r3, [r2, r3]
 802c05a:	f003 031f 	and.w	r3, r3, #31
 802c05e:	687a      	ldr	r2, [r7, #4]
 802c060:	fa22 f303 	lsr.w	r3, r2, r3
 802c064:	4a0b      	ldr	r2, [pc, #44]	; (802c094 <HAL_Init+0x70>)
 802c066:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 802c068:	4a0b      	ldr	r2, [pc, #44]	; (802c098 <HAL_Init+0x74>)
 802c06a:	687b      	ldr	r3, [r7, #4]
 802c06c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 802c06e:	200f      	movs	r0, #15
 802c070:	f000 f814 	bl	802c09c <HAL_InitTick>
 802c074:	4603      	mov	r3, r0
 802c076:	2b00      	cmp	r3, #0
 802c078:	d001      	beq.n	802c07e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 802c07a:	2301      	movs	r3, #1
 802c07c:	e002      	b.n	802c084 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 802c07e:	f7ff f8e3 	bl	802b248 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 802c082:	2300      	movs	r3, #0
}
 802c084:	4618      	mov	r0, r3
 802c086:	3708      	adds	r7, #8
 802c088:	46bd      	mov	sp, r7
 802c08a:	bd80      	pop	{r7, pc}
 802c08c:	58024400 	.word	0x58024400
 802c090:	08058df8 	.word	0x08058df8
 802c094:	24000004 	.word	0x24000004
 802c098:	24000000 	.word	0x24000000

0802c09c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 802c09c:	b580      	push	{r7, lr}
 802c09e:	b082      	sub	sp, #8
 802c0a0:	af00      	add	r7, sp, #0
 802c0a2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 802c0a4:	4b15      	ldr	r3, [pc, #84]	; (802c0fc <HAL_InitTick+0x60>)
 802c0a6:	781b      	ldrb	r3, [r3, #0]
 802c0a8:	2b00      	cmp	r3, #0
 802c0aa:	d101      	bne.n	802c0b0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 802c0ac:	2301      	movs	r3, #1
 802c0ae:	e021      	b.n	802c0f4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 802c0b0:	4b13      	ldr	r3, [pc, #76]	; (802c100 <HAL_InitTick+0x64>)
 802c0b2:	681a      	ldr	r2, [r3, #0]
 802c0b4:	4b11      	ldr	r3, [pc, #68]	; (802c0fc <HAL_InitTick+0x60>)
 802c0b6:	781b      	ldrb	r3, [r3, #0]
 802c0b8:	4619      	mov	r1, r3
 802c0ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 802c0be:	fbb3 f3f1 	udiv	r3, r3, r1
 802c0c2:	fbb2 f3f3 	udiv	r3, r2, r3
 802c0c6:	4618      	mov	r0, r3
 802c0c8:	f000 fb59 	bl	802c77e <HAL_SYSTICK_Config>
 802c0cc:	4603      	mov	r3, r0
 802c0ce:	2b00      	cmp	r3, #0
 802c0d0:	d001      	beq.n	802c0d6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 802c0d2:	2301      	movs	r3, #1
 802c0d4:	e00e      	b.n	802c0f4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 802c0d6:	687b      	ldr	r3, [r7, #4]
 802c0d8:	2b0f      	cmp	r3, #15
 802c0da:	d80a      	bhi.n	802c0f2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 802c0dc:	2200      	movs	r2, #0
 802c0de:	6879      	ldr	r1, [r7, #4]
 802c0e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802c0e4:	f000 fb23 	bl	802c72e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 802c0e8:	4a06      	ldr	r2, [pc, #24]	; (802c104 <HAL_InitTick+0x68>)
 802c0ea:	687b      	ldr	r3, [r7, #4]
 802c0ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 802c0ee:	2300      	movs	r3, #0
 802c0f0:	e000      	b.n	802c0f4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 802c0f2:	2301      	movs	r3, #1
}
 802c0f4:	4618      	mov	r0, r3
 802c0f6:	3708      	adds	r7, #8
 802c0f8:	46bd      	mov	sp, r7
 802c0fa:	bd80      	pop	{r7, pc}
 802c0fc:	2400000c 	.word	0x2400000c
 802c100:	24000000 	.word	0x24000000
 802c104:	24000008 	.word	0x24000008

0802c108 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 802c108:	b480      	push	{r7}
 802c10a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 802c10c:	4b06      	ldr	r3, [pc, #24]	; (802c128 <HAL_IncTick+0x20>)
 802c10e:	781b      	ldrb	r3, [r3, #0]
 802c110:	461a      	mov	r2, r3
 802c112:	4b06      	ldr	r3, [pc, #24]	; (802c12c <HAL_IncTick+0x24>)
 802c114:	681b      	ldr	r3, [r3, #0]
 802c116:	4413      	add	r3, r2
 802c118:	4a04      	ldr	r2, [pc, #16]	; (802c12c <HAL_IncTick+0x24>)
 802c11a:	6013      	str	r3, [r2, #0]
}
 802c11c:	bf00      	nop
 802c11e:	46bd      	mov	sp, r7
 802c120:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c124:	4770      	bx	lr
 802c126:	bf00      	nop
 802c128:	2400000c 	.word	0x2400000c
 802c12c:	24001b44 	.word	0x24001b44

0802c130 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 802c130:	b480      	push	{r7}
 802c132:	af00      	add	r7, sp, #0
  return uwTick;
 802c134:	4b03      	ldr	r3, [pc, #12]	; (802c144 <HAL_GetTick+0x14>)
 802c136:	681b      	ldr	r3, [r3, #0]
}
 802c138:	4618      	mov	r0, r3
 802c13a:	46bd      	mov	sp, r7
 802c13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c140:	4770      	bx	lr
 802c142:	bf00      	nop
 802c144:	24001b44 	.word	0x24001b44

0802c148 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 802c148:	b580      	push	{r7, lr}
 802c14a:	b084      	sub	sp, #16
 802c14c:	af00      	add	r7, sp, #0
 802c14e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 802c150:	f7ff ffee 	bl	802c130 <HAL_GetTick>
 802c154:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 802c156:	687b      	ldr	r3, [r7, #4]
 802c158:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 802c15a:	68fb      	ldr	r3, [r7, #12]
 802c15c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 802c160:	d005      	beq.n	802c16e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 802c162:	4b0a      	ldr	r3, [pc, #40]	; (802c18c <HAL_Delay+0x44>)
 802c164:	781b      	ldrb	r3, [r3, #0]
 802c166:	461a      	mov	r2, r3
 802c168:	68fb      	ldr	r3, [r7, #12]
 802c16a:	4413      	add	r3, r2
 802c16c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 802c16e:	bf00      	nop
 802c170:	f7ff ffde 	bl	802c130 <HAL_GetTick>
 802c174:	4602      	mov	r2, r0
 802c176:	68bb      	ldr	r3, [r7, #8]
 802c178:	1ad3      	subs	r3, r2, r3
 802c17a:	68fa      	ldr	r2, [r7, #12]
 802c17c:	429a      	cmp	r2, r3
 802c17e:	d8f7      	bhi.n	802c170 <HAL_Delay+0x28>
  {
  }
}
 802c180:	bf00      	nop
 802c182:	bf00      	nop
 802c184:	3710      	adds	r7, #16
 802c186:	46bd      	mov	sp, r7
 802c188:	bd80      	pop	{r7, pc}
 802c18a:	bf00      	nop
 802c18c:	2400000c 	.word	0x2400000c

0802c190 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 802c190:	b480      	push	{r7}
 802c192:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 802c194:	4b03      	ldr	r3, [pc, #12]	; (802c1a4 <HAL_GetREVID+0x14>)
 802c196:	681b      	ldr	r3, [r3, #0]
 802c198:	0c1b      	lsrs	r3, r3, #16
}
 802c19a:	4618      	mov	r0, r3
 802c19c:	46bd      	mov	sp, r7
 802c19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c1a2:	4770      	bx	lr
 802c1a4:	5c001000 	.word	0x5c001000

0802c1a8 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 802c1a8:	b580      	push	{r7, lr}
 802c1aa:	b088      	sub	sp, #32
 802c1ac:	af00      	add	r7, sp, #0
 802c1ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr ;
  uint32_t exti_line ;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" is comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 802c1b0:	2300      	movs	r3, #0
 802c1b2:	60fb      	str	r3, [r7, #12]

  HAL_StatusTypeDef status = HAL_OK;
 802c1b4:	2300      	movs	r3, #0
 802c1b6:	77fb      	strb	r3, [r7, #31]
  
  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 802c1b8:	687b      	ldr	r3, [r7, #4]
 802c1ba:	2b00      	cmp	r3, #0
 802c1bc:	d102      	bne.n	802c1c4 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 802c1be:	2301      	movs	r3, #1
 802c1c0:	77fb      	strb	r3, [r7, #31]
 802c1c2:	e10e      	b.n	802c3e2 <HAL_COMP_Init+0x23a>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 802c1c4:	687b      	ldr	r3, [r7, #4]
 802c1c6:	681b      	ldr	r3, [r3, #0]
 802c1c8:	681b      	ldr	r3, [r3, #0]
 802c1ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802c1ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802c1d2:	d102      	bne.n	802c1da <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 802c1d4:	2301      	movs	r3, #1
 802c1d6:	77fb      	strb	r3, [r7, #31]
 802c1d8:	e103      	b.n	802c3e2 <HAL_COMP_Init+0x23a>
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRCE(hcomp->Init.BlankingSrce)); 
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 802c1da:	687b      	ldr	r3, [r7, #4]
 802c1dc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 802c1e0:	b2db      	uxtb	r3, r3
 802c1e2:	2b00      	cmp	r3, #0
 802c1e4:	d109      	bne.n	802c1fa <HAL_COMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 802c1e6:	687b      	ldr	r3, [r7, #4]
 802c1e8:	2200      	movs	r2, #0
 802c1ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	  
	  /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 802c1ee:	687b      	ldr	r3, [r7, #4]
 802c1f0:	2200      	movs	r2, #0
 802c1f2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
	 /* Init the low level hardware */
      HAL_COMP_MspInit(hcomp);
 802c1f4:	6878      	ldr	r0, [r7, #4]
 802c1f6:	f7fe fad3 	bl	802a7a0 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }
    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN);
 802c1fa:	687b      	ldr	r3, [r7, #4]
 802c1fc:	681b      	ldr	r3, [r3, #0]
 802c1fe:	681b      	ldr	r3, [r3, #0]
 802c200:	f003 0304 	and.w	r3, r3, #4
 802c204:	61bb      	str	r3, [r7, #24]
    /*     Set BLANKING bits according to hcomp->Init.BlankingSrce value       */
    /*     Set HYST bits according to hcomp->Init.Hysteresis value             */
    /*     Set POLARITY bit according to hcomp->Init.OutputPol value           */
    /*     Set POWERMODE bits according to hcomp->Init.Mode value              */
   
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 802c206:	687b      	ldr	r3, [r7, #4]
 802c208:	691a      	ldr	r2, [r3, #16]
              hcomp->Init.NonInvertingInput  |  \
 802c20a:	687b      	ldr	r3, [r7, #4]
 802c20c:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 802c20e:	431a      	orrs	r2, r3
              hcomp->Init.BlankingSrce       |  \
 802c210:	687b      	ldr	r3, [r7, #4]
 802c212:	69db      	ldr	r3, [r3, #28]
              hcomp->Init.NonInvertingInput  |  \
 802c214:	431a      	orrs	r2, r3
              hcomp->Init.Hysteresis         |  \
 802c216:	687b      	ldr	r3, [r7, #4]
 802c218:	695b      	ldr	r3, [r3, #20]
              hcomp->Init.BlankingSrce       |  \
 802c21a:	431a      	orrs	r2, r3
              hcomp->Init.OutputPol          |  \
 802c21c:	687b      	ldr	r3, [r7, #4]
 802c21e:	699b      	ldr	r3, [r3, #24]
              hcomp->Init.Hysteresis         |  \
 802c220:	431a      	orrs	r2, r3
              hcomp->Init.Mode                );
 802c222:	687b      	ldr	r3, [r7, #4]
 802c224:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 802c226:	4313      	orrs	r3, r2
 802c228:	617b      	str	r3, [r7, #20]
               COMP_CFGRx_INP2SEL  | COMP_CFGRx_WINMODE  | COMP_CFGRx_POLARITY | COMP_CFGRx_HYST    |
               COMP_CFGRx_BLANKING | COMP_CFGRx_BRGEN    | COMP_CFGRx_SCALEN,
               tmp_csr
              );
#else
    MODIFY_REG(hcomp->Instance->CFGR,
 802c22a:	687b      	ldr	r3, [r7, #4]
 802c22c:	681b      	ldr	r3, [r3, #0]
 802c22e:	681a      	ldr	r2, [r3, #0]
 802c230:	4b6e      	ldr	r3, [pc, #440]	; (802c3ec <HAL_COMP_Init+0x244>)
 802c232:	4013      	ands	r3, r2
 802c234:	687a      	ldr	r2, [r7, #4]
 802c236:	6812      	ldr	r2, [r2, #0]
 802c238:	6979      	ldr	r1, [r7, #20]
 802c23a:	430b      	orrs	r3, r1
 802c23c:	6013      	str	r3, [r2, #0]
#endif
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 802c23e:	687b      	ldr	r3, [r7, #4]
 802c240:	685b      	ldr	r3, [r3, #4]
 802c242:	2b10      	cmp	r3, #16
 802c244:	d108      	bne.n	802c258 <HAL_COMP_Init+0xb0>
    {
      SET_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 802c246:	687b      	ldr	r3, [r7, #4]
 802c248:	681b      	ldr	r3, [r3, #0]
 802c24a:	681a      	ldr	r2, [r3, #0]
 802c24c:	687b      	ldr	r3, [r7, #4]
 802c24e:	681b      	ldr	r3, [r3, #0]
 802c250:	f042 0210 	orr.w	r2, r2, #16
 802c254:	601a      	str	r2, [r3, #0]
 802c256:	e007      	b.n	802c268 <HAL_COMP_Init+0xc0>
    }
    else
    {
      CLEAR_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 802c258:	687b      	ldr	r3, [r7, #4]
 802c25a:	681b      	ldr	r3, [r3, #0]
 802c25c:	681a      	ldr	r2, [r3, #0]
 802c25e:	687b      	ldr	r3, [r7, #4]
 802c260:	681b      	ldr	r3, [r3, #0]
 802c262:	f022 0210 	bic.w	r2, r2, #16
 802c266:	601a      	str	r2, [r3, #0]
    }
    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is enabled for the first time */
    if ((READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN) != 0UL) &&
 802c268:	687b      	ldr	r3, [r7, #4]
 802c26a:	681b      	ldr	r3, [r3, #0]
 802c26c:	681b      	ldr	r3, [r3, #0]
 802c26e:	f003 0304 	and.w	r3, r3, #4
 802c272:	2b00      	cmp	r3, #0
 802c274:	d016      	beq.n	802c2a4 <HAL_COMP_Init+0xfc>
 802c276:	69bb      	ldr	r3, [r7, #24]
 802c278:	2b00      	cmp	r3, #0
 802c27a:	d013      	beq.n	802c2a4 <HAL_COMP_Init+0xfc>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially                  */
      /*       CPU processing cycles.*/

     wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 802c27c:	4b5c      	ldr	r3, [pc, #368]	; (802c3f0 <HAL_COMP_Init+0x248>)
 802c27e:	681b      	ldr	r3, [r3, #0]
 802c280:	099b      	lsrs	r3, r3, #6
 802c282:	4a5c      	ldr	r2, [pc, #368]	; (802c3f4 <HAL_COMP_Init+0x24c>)
 802c284:	fba2 2303 	umull	r2, r3, r2, r3
 802c288:	099b      	lsrs	r3, r3, #6
 802c28a:	1c5a      	adds	r2, r3, #1
 802c28c:	4613      	mov	r3, r2
 802c28e:	009b      	lsls	r3, r3, #2
 802c290:	4413      	add	r3, r2
 802c292:	009b      	lsls	r3, r3, #2
 802c294:	60fb      	str	r3, [r7, #12]

     while(wait_loop_index != 0UL)
 802c296:	e002      	b.n	802c29e <HAL_COMP_Init+0xf6>
     {
       wait_loop_index --;
 802c298:	68fb      	ldr	r3, [r7, #12]
 802c29a:	3b01      	subs	r3, #1
 802c29c:	60fb      	str	r3, [r7, #12]
     while(wait_loop_index != 0UL)
 802c29e:	68fb      	ldr	r3, [r7, #12]
 802c2a0:	2b00      	cmp	r3, #0
 802c2a2:	d1f9      	bne.n	802c298 <HAL_COMP_Init+0xf0>
     }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 802c2a4:	687b      	ldr	r3, [r7, #4]
 802c2a6:	681b      	ldr	r3, [r3, #0]
 802c2a8:	4a53      	ldr	r2, [pc, #332]	; (802c3f8 <HAL_COMP_Init+0x250>)
 802c2aa:	4293      	cmp	r3, r2
 802c2ac:	d102      	bne.n	802c2b4 <HAL_COMP_Init+0x10c>
 802c2ae:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 802c2b2:	e001      	b.n	802c2b8 <HAL_COMP_Init+0x110>
 802c2b4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 802c2b8:	613b      	str	r3, [r7, #16]
    
    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL) 
 802c2ba:	687b      	ldr	r3, [r7, #4]
 802c2bc:	6a1b      	ldr	r3, [r3, #32]
 802c2be:	f003 0303 	and.w	r3, r3, #3
 802c2c2:	2b00      	cmp	r3, #0
 802c2c4:	d06d      	beq.n	802c3a2 <HAL_COMP_Init+0x1fa>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 802c2c6:	687b      	ldr	r3, [r7, #4]
 802c2c8:	6a1b      	ldr	r3, [r3, #32]
 802c2ca:	f003 0310 	and.w	r3, r3, #16
 802c2ce:	2b00      	cmp	r3, #0
 802c2d0:	d008      	beq.n	802c2e4 <HAL_COMP_Init+0x13c>
      {
        SET_BIT(EXTI->RTSR1, exti_line);
 802c2d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802c2d6:	681a      	ldr	r2, [r3, #0]
 802c2d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802c2dc:	693b      	ldr	r3, [r7, #16]
 802c2de:	4313      	orrs	r3, r2
 802c2e0:	600b      	str	r3, [r1, #0]
 802c2e2:	e008      	b.n	802c2f6 <HAL_COMP_Init+0x14e>
      }
      else
      {
        CLEAR_BIT(EXTI->RTSR1, exti_line);
 802c2e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802c2e8:	681a      	ldr	r2, [r3, #0]
 802c2ea:	693b      	ldr	r3, [r7, #16]
 802c2ec:	43db      	mvns	r3, r3
 802c2ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802c2f2:	4013      	ands	r3, r2
 802c2f4:	600b      	str	r3, [r1, #0]
      }
      
      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 802c2f6:	687b      	ldr	r3, [r7, #4]
 802c2f8:	6a1b      	ldr	r3, [r3, #32]
 802c2fa:	f003 0320 	and.w	r3, r3, #32
 802c2fe:	2b00      	cmp	r3, #0
 802c300:	d008      	beq.n	802c314 <HAL_COMP_Init+0x16c>
      {
        SET_BIT(EXTI->FTSR1, exti_line);
 802c302:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802c306:	685a      	ldr	r2, [r3, #4]
 802c308:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802c30c:	693b      	ldr	r3, [r7, #16]
 802c30e:	4313      	orrs	r3, r2
 802c310:	604b      	str	r3, [r1, #4]
 802c312:	e008      	b.n	802c326 <HAL_COMP_Init+0x17e>
      }
      else
      {
        CLEAR_BIT(EXTI->FTSR1, exti_line);
 802c314:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802c318:	685a      	ldr	r2, [r3, #4]
 802c31a:	693b      	ldr	r3, [r7, #16]
 802c31c:	43db      	mvns	r3, r3
 802c31e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802c322:	4013      	ands	r3, r2
 802c324:	604b      	str	r3, [r1, #4]
      }
     
#if !defined (CORE_CM4)
      /* Clear COMP EXTI pending bit (if any) */
      WRITE_REG(EXTI->PR1, exti_line);
 802c326:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 802c32a:	693b      	ldr	r3, [r7, #16]
 802c32c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 802c330:	687b      	ldr	r3, [r7, #4]
 802c332:	6a1b      	ldr	r3, [r3, #32]
 802c334:	f003 0302 	and.w	r3, r3, #2
 802c338:	2b00      	cmp	r3, #0
 802c33a:	d00a      	beq.n	802c352 <HAL_COMP_Init+0x1aa>
      {
        SET_BIT(EXTI->EMR1, exti_line);
 802c33c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802c340:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 802c344:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802c348:	693b      	ldr	r3, [r7, #16]
 802c34a:	4313      	orrs	r3, r2
 802c34c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
 802c350:	e00a      	b.n	802c368 <HAL_COMP_Init+0x1c0>
      }
      else
      {
        CLEAR_BIT(EXTI->EMR1, exti_line);
 802c352:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802c356:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 802c35a:	693b      	ldr	r3, [r7, #16]
 802c35c:	43db      	mvns	r3, r3
 802c35e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802c362:	4013      	ands	r3, r2
 802c364:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      }
      
       /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 802c368:	687b      	ldr	r3, [r7, #4]
 802c36a:	6a1b      	ldr	r3, [r3, #32]
 802c36c:	f003 0301 	and.w	r3, r3, #1
 802c370:	2b00      	cmp	r3, #0
 802c372:	d00a      	beq.n	802c38a <HAL_COMP_Init+0x1e2>
      {
        SET_BIT(EXTI->IMR1, exti_line);
 802c374:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802c378:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 802c37c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802c380:	693b      	ldr	r3, [r7, #16]
 802c382:	4313      	orrs	r3, r2
 802c384:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
 802c388:	e021      	b.n	802c3ce <HAL_COMP_Init+0x226>
      }
      else
      {
        CLEAR_BIT(EXTI->IMR1, exti_line);
 802c38a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802c38e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 802c392:	693b      	ldr	r3, [r7, #16]
 802c394:	43db      	mvns	r3, r3
 802c396:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802c39a:	4013      	ands	r3, r2
 802c39c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
 802c3a0:	e015      	b.n	802c3ce <HAL_COMP_Init+0x226>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      CLEAR_BIT(EXTI->EMR1, exti_line);
 802c3a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802c3a6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 802c3aa:	693b      	ldr	r3, [r7, #16]
 802c3ac:	43db      	mvns	r3, r3
 802c3ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802c3b2:	4013      	ands	r3, r2
 802c3b4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      
      /* Disable EXTI interrupt mode */
      CLEAR_BIT(EXTI->IMR1, exti_line);
 802c3b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802c3bc:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 802c3c0:	693b      	ldr	r3, [r7, #16]
 802c3c2:	43db      	mvns	r3, r3
 802c3c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802c3c8:	4013      	ands	r3, r2
 802c3ca:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
    }
#endif
    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 802c3ce:	687b      	ldr	r3, [r7, #4]
 802c3d0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 802c3d4:	b2db      	uxtb	r3, r3
 802c3d6:	2b00      	cmp	r3, #0
 802c3d8:	d103      	bne.n	802c3e2 <HAL_COMP_Init+0x23a>
    {
     
      hcomp->State = HAL_COMP_STATE_READY;
 802c3da:	687b      	ldr	r3, [r7, #4]
 802c3dc:	2201      	movs	r2, #1
 802c3de:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
   
  }
  
  return status;
 802c3e2:	7ffb      	ldrb	r3, [r7, #31]
}
 802c3e4:	4618      	mov	r0, r3
 802c3e6:	3720      	adds	r7, #32
 802c3e8:	46bd      	mov	sp, r7
 802c3ea:	bd80      	pop	{r7, pc}
 802c3ec:	f0e8cce1 	.word	0xf0e8cce1
 802c3f0:	24000000 	.word	0x24000000
 802c3f4:	053e2d63 	.word	0x053e2d63
 802c3f8:	5800380c 	.word	0x5800380c

0802c3fc <HAL_COMP_Start>:
  * @brief  Start the comparator. 
  * @param  hcomp COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{ 
 802c3fc:	b480      	push	{r7}
 802c3fe:	b085      	sub	sp, #20
 802c400:	af00      	add	r7, sp, #0
 802c402:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 802c404:	2300      	movs	r3, #0
 802c406:	60bb      	str	r3, [r7, #8]

  HAL_StatusTypeDef status = HAL_OK;
 802c408:	2300      	movs	r3, #0
 802c40a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 802c40c:	687b      	ldr	r3, [r7, #4]
 802c40e:	2b00      	cmp	r3, #0
 802c410:	d102      	bne.n	802c418 <HAL_COMP_Start+0x1c>
  {
    status = HAL_ERROR;
 802c412:	2301      	movs	r3, #1
 802c414:	73fb      	strb	r3, [r7, #15]
 802c416:	e030      	b.n	802c47a <HAL_COMP_Start+0x7e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 802c418:	687b      	ldr	r3, [r7, #4]
 802c41a:	681b      	ldr	r3, [r3, #0]
 802c41c:	681b      	ldr	r3, [r3, #0]
 802c41e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802c422:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802c426:	d102      	bne.n	802c42e <HAL_COMP_Start+0x32>
  {
    status = HAL_ERROR;
 802c428:	2301      	movs	r3, #1
 802c42a:	73fb      	strb	r3, [r7, #15]
 802c42c:	e025      	b.n	802c47a <HAL_COMP_Start+0x7e>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_READY)
 802c42e:	687b      	ldr	r3, [r7, #4]
 802c430:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 802c434:	b2db      	uxtb	r3, r3
 802c436:	2b01      	cmp	r3, #1
 802c438:	d11d      	bne.n	802c476 <HAL_COMP_Start+0x7a>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CFGR, COMP_CFGRx_EN);
 802c43a:	687b      	ldr	r3, [r7, #4]
 802c43c:	681b      	ldr	r3, [r3, #0]
 802c43e:	681a      	ldr	r2, [r3, #0]
 802c440:	687b      	ldr	r3, [r7, #4]
 802c442:	681b      	ldr	r3, [r3, #0]
 802c444:	f042 0201 	orr.w	r2, r2, #1
 802c448:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 802c44a:	687b      	ldr	r3, [r7, #4]
 802c44c:	2202      	movs	r2, #2
 802c44e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
     /* Delay for COMP startup time */
     /* Wait loop initialization and execution */
     /* Note: Variable divided by 2 to compensate partially    */
     /*       CPU processing cycles.                           */
    
     wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 802c452:	4b0d      	ldr	r3, [pc, #52]	; (802c488 <HAL_COMP_Start+0x8c>)
 802c454:	681b      	ldr	r3, [r3, #0]
 802c456:	099b      	lsrs	r3, r3, #6
 802c458:	4a0c      	ldr	r2, [pc, #48]	; (802c48c <HAL_COMP_Start+0x90>)
 802c45a:	fba2 2303 	umull	r2, r3, r2, r3
 802c45e:	099b      	lsrs	r3, r3, #6
 802c460:	3301      	adds	r3, #1
 802c462:	00db      	lsls	r3, r3, #3
 802c464:	60bb      	str	r3, [r7, #8]
     while(wait_loop_index != 0UL)
 802c466:	e002      	b.n	802c46e <HAL_COMP_Start+0x72>
     {
       wait_loop_index--;
 802c468:	68bb      	ldr	r3, [r7, #8]
 802c46a:	3b01      	subs	r3, #1
 802c46c:	60bb      	str	r3, [r7, #8]
     while(wait_loop_index != 0UL)
 802c46e:	68bb      	ldr	r3, [r7, #8]
 802c470:	2b00      	cmp	r3, #0
 802c472:	d1f9      	bne.n	802c468 <HAL_COMP_Start+0x6c>
 802c474:	e001      	b.n	802c47a <HAL_COMP_Start+0x7e>
     }      
    }
    else
    {
      status = HAL_ERROR;
 802c476:	2301      	movs	r3, #1
 802c478:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 802c47a:	7bfb      	ldrb	r3, [r7, #15]
}
 802c47c:	4618      	mov	r0, r3
 802c47e:	3714      	adds	r7, #20
 802c480:	46bd      	mov	sp, r7
 802c482:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c486:	4770      	bx	lr
 802c488:	24000000 	.word	0x24000000
 802c48c:	053e2d63 	.word	0x053e2d63

0802c490 <HAL_COMP_IRQHandler>:
  * @brief  Comparator IRQ Handler. 
  * @param  hcomp COMP handle
  * @retval HAL status
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
 802c490:	b580      	push	{r7, lr}
 802c492:	b084      	sub	sp, #16
 802c494:	af00      	add	r7, sp, #0
 802c496:	6078      	str	r0, [r7, #4]
  /* Get the EXTI line corresponding to the selected COMP instance */
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 802c498:	687b      	ldr	r3, [r7, #4]
 802c49a:	681b      	ldr	r3, [r3, #0]
 802c49c:	4a33      	ldr	r2, [pc, #204]	; (802c56c <HAL_COMP_IRQHandler+0xdc>)
 802c49e:	4293      	cmp	r3, r2
 802c4a0:	d102      	bne.n	802c4a8 <HAL_COMP_IRQHandler+0x18>
 802c4a2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 802c4a6:	e001      	b.n	802c4ac <HAL_COMP_IRQHandler+0x1c>
 802c4a8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 802c4ac:	60fb      	str	r3, [r7, #12]

 
 } 
#else
    /* Check COMP EXTI flag */
    if(READ_BIT(EXTI->PR1, exti_line) != 0UL)
 802c4ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802c4b2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 802c4b6:	68fb      	ldr	r3, [r7, #12]
 802c4b8:	4013      	ands	r3, r2
 802c4ba:	2b00      	cmp	r3, #0
 802c4bc:	d014      	beq.n	802c4e8 <HAL_COMP_IRQHandler+0x58>
    {    
       /* Check whether comparator is in independent or window mode */
        if(READ_BIT(COMP12_COMMON->CFGR, COMP_CFGRx_WINMODE) != 0UL)
 802c4be:	4b2c      	ldr	r3, [pc, #176]	; (802c570 <HAL_COMP_IRQHandler+0xe0>)
 802c4c0:	681b      	ldr	r3, [r3, #0]
 802c4c2:	f003 0310 	and.w	r3, r3, #16
 802c4c6:	2b00      	cmp	r3, #0
 802c4c8:	d006      	beq.n	802c4d8 <HAL_COMP_IRQHandler+0x48>
          /* Note: Pair of comparators in window mode can both trig IRQ when      */
          /*       input voltage is changing from "out of window" area            */
          /*       (low or high ) to the other "out of window" area (high or low).*/
          /*       Both flags must be cleared to call comparator trigger          */
          /*       callback is called once.                                       */
          WRITE_REG(EXTI->PR1, (COMP_EXTI_LINE_COMP1 | COMP_EXTI_LINE_COMP2));
 802c4ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802c4ce:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 802c4d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 802c4d6:	e004      	b.n	802c4e2 <HAL_COMP_IRQHandler+0x52>
        }
        else
        {
          /* Clear COMP EXTI line pending bit */
          WRITE_REG(EXTI->PR1, exti_line);
 802c4d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 802c4dc:	68fb      	ldr	r3, [r7, #12]
 802c4de:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 802c4e2:	6878      	ldr	r0, [r7, #4]
 802c4e4:	f7fe fd06 	bl	802aef4 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }
#endif /*DUAL_CORE*/

   /* Get COMP interrupt source */
  if (__HAL_COMP_GET_IT_SOURCE(hcomp, COMP_IT_EN) != RESET)
 802c4e8:	687b      	ldr	r3, [r7, #4]
 802c4ea:	681b      	ldr	r3, [r3, #0]
 802c4ec:	681b      	ldr	r3, [r3, #0]
 802c4ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802c4f2:	2b40      	cmp	r3, #64	; 0x40
 802c4f4:	d136      	bne.n	802c564 <HAL_COMP_IRQHandler+0xd4>
  {

    if((__HAL_COMP_GET_FLAG( COMP_FLAG_C1I)) != 0UL)
 802c4f6:	4b1f      	ldr	r3, [pc, #124]	; (802c574 <HAL_COMP_IRQHandler+0xe4>)
 802c4f8:	681b      	ldr	r3, [r3, #0]
 802c4fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 802c4fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802c502:	d101      	bne.n	802c508 <HAL_COMP_IRQHandler+0x78>
 802c504:	2301      	movs	r3, #1
 802c506:	e000      	b.n	802c50a <HAL_COMP_IRQHandler+0x7a>
 802c508:	2300      	movs	r3, #0
 802c50a:	2b00      	cmp	r3, #0
 802c50c:	d00b      	beq.n	802c526 <HAL_COMP_IRQHandler+0x96>
    {
      /* Clear the COMP channel 1 interrupt flag */
         __HAL_COMP_CLEAR_C1IFLAG();
 802c50e:	4b19      	ldr	r3, [pc, #100]	; (802c574 <HAL_COMP_IRQHandler+0xe4>)
 802c510:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 802c514:	605a      	str	r2, [r3, #4]
   
      /* Disable COMP interrupt */
       __HAL_COMP_DISABLE_IT(hcomp,COMP_IT_EN);
 802c516:	687b      	ldr	r3, [r7, #4]
 802c518:	681b      	ldr	r3, [r3, #0]
 802c51a:	681a      	ldr	r2, [r3, #0]
 802c51c:	687b      	ldr	r3, [r7, #4]
 802c51e:	681b      	ldr	r3, [r3, #0]
 802c520:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802c524:	601a      	str	r2, [r3, #0]
   
    }
    if((__HAL_COMP_GET_FLAG( COMP_FLAG_C2I)) != 0UL)
 802c526:	4b13      	ldr	r3, [pc, #76]	; (802c574 <HAL_COMP_IRQHandler+0xe4>)
 802c528:	681b      	ldr	r3, [r3, #0]
 802c52a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802c52e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 802c532:	d101      	bne.n	802c538 <HAL_COMP_IRQHandler+0xa8>
 802c534:	2301      	movs	r3, #1
 802c536:	e000      	b.n	802c53a <HAL_COMP_IRQHandler+0xaa>
 802c538:	2300      	movs	r3, #0
 802c53a:	2b00      	cmp	r3, #0
 802c53c:	d00b      	beq.n	802c556 <HAL_COMP_IRQHandler+0xc6>
    {
     /* Clear the COMP channel 2 interrupt flag */
       __HAL_COMP_CLEAR_C2IFLAG();
 802c53e:	4b0d      	ldr	r3, [pc, #52]	; (802c574 <HAL_COMP_IRQHandler+0xe4>)
 802c540:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 802c544:	605a      	str	r2, [r3, #4]
   
     /* Disable COMP interrupt */
     __HAL_COMP_DISABLE_IT(hcomp,COMP_IT_EN);
 802c546:	687b      	ldr	r3, [r7, #4]
 802c548:	681b      	ldr	r3, [r3, #0]
 802c54a:	681a      	ldr	r2, [r3, #0]
 802c54c:	687b      	ldr	r3, [r7, #4]
 802c54e:	681b      	ldr	r3, [r3, #0]
 802c550:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802c554:	601a      	str	r2, [r3, #0]
       
    }

    /* Change COMP state */
    hcomp->State = HAL_COMP_STATE_READY;
 802c556:	687b      	ldr	r3, [r7, #4]
 802c558:	2201      	movs	r2, #1
 802c55a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 802c55e:	6878      	ldr	r0, [r7, #4]
 802c560:	f7fe fcc8 	bl	802aef4 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
  }    
 

}
 802c564:	bf00      	nop
 802c566:	3710      	adds	r7, #16
 802c568:	46bd      	mov	sp, r7
 802c56a:	bd80      	pop	{r7, pc}
 802c56c:	5800380c 	.word	0x5800380c
 802c570:	58003810 	.word	0x58003810
 802c574:	58003800 	.word	0x58003800

0802c578 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 802c578:	b480      	push	{r7}
 802c57a:	b085      	sub	sp, #20
 802c57c:	af00      	add	r7, sp, #0
 802c57e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 802c580:	687b      	ldr	r3, [r7, #4]
 802c582:	f003 0307 	and.w	r3, r3, #7
 802c586:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 802c588:	4b0b      	ldr	r3, [pc, #44]	; (802c5b8 <__NVIC_SetPriorityGrouping+0x40>)
 802c58a:	68db      	ldr	r3, [r3, #12]
 802c58c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 802c58e:	68ba      	ldr	r2, [r7, #8]
 802c590:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 802c594:	4013      	ands	r3, r2
 802c596:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 802c598:	68fb      	ldr	r3, [r7, #12]
 802c59a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 802c59c:	68bb      	ldr	r3, [r7, #8]
 802c59e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 802c5a0:	4b06      	ldr	r3, [pc, #24]	; (802c5bc <__NVIC_SetPriorityGrouping+0x44>)
 802c5a2:	4313      	orrs	r3, r2
 802c5a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 802c5a6:	4a04      	ldr	r2, [pc, #16]	; (802c5b8 <__NVIC_SetPriorityGrouping+0x40>)
 802c5a8:	68bb      	ldr	r3, [r7, #8]
 802c5aa:	60d3      	str	r3, [r2, #12]
}
 802c5ac:	bf00      	nop
 802c5ae:	3714      	adds	r7, #20
 802c5b0:	46bd      	mov	sp, r7
 802c5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c5b6:	4770      	bx	lr
 802c5b8:	e000ed00 	.word	0xe000ed00
 802c5bc:	05fa0000 	.word	0x05fa0000

0802c5c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 802c5c0:	b480      	push	{r7}
 802c5c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 802c5c4:	4b04      	ldr	r3, [pc, #16]	; (802c5d8 <__NVIC_GetPriorityGrouping+0x18>)
 802c5c6:	68db      	ldr	r3, [r3, #12]
 802c5c8:	0a1b      	lsrs	r3, r3, #8
 802c5ca:	f003 0307 	and.w	r3, r3, #7
}
 802c5ce:	4618      	mov	r0, r3
 802c5d0:	46bd      	mov	sp, r7
 802c5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c5d6:	4770      	bx	lr
 802c5d8:	e000ed00 	.word	0xe000ed00

0802c5dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 802c5dc:	b480      	push	{r7}
 802c5de:	b083      	sub	sp, #12
 802c5e0:	af00      	add	r7, sp, #0
 802c5e2:	4603      	mov	r3, r0
 802c5e4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 802c5e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 802c5ea:	2b00      	cmp	r3, #0
 802c5ec:	db0b      	blt.n	802c606 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 802c5ee:	88fb      	ldrh	r3, [r7, #6]
 802c5f0:	f003 021f 	and.w	r2, r3, #31
 802c5f4:	4907      	ldr	r1, [pc, #28]	; (802c614 <__NVIC_EnableIRQ+0x38>)
 802c5f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 802c5fa:	095b      	lsrs	r3, r3, #5
 802c5fc:	2001      	movs	r0, #1
 802c5fe:	fa00 f202 	lsl.w	r2, r0, r2
 802c602:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 802c606:	bf00      	nop
 802c608:	370c      	adds	r7, #12
 802c60a:	46bd      	mov	sp, r7
 802c60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c610:	4770      	bx	lr
 802c612:	bf00      	nop
 802c614:	e000e100 	.word	0xe000e100

0802c618 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 802c618:	b480      	push	{r7}
 802c61a:	b083      	sub	sp, #12
 802c61c:	af00      	add	r7, sp, #0
 802c61e:	4603      	mov	r3, r0
 802c620:	6039      	str	r1, [r7, #0]
 802c622:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 802c624:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 802c628:	2b00      	cmp	r3, #0
 802c62a:	db0a      	blt.n	802c642 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 802c62c:	683b      	ldr	r3, [r7, #0]
 802c62e:	b2da      	uxtb	r2, r3
 802c630:	490c      	ldr	r1, [pc, #48]	; (802c664 <__NVIC_SetPriority+0x4c>)
 802c632:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 802c636:	0112      	lsls	r2, r2, #4
 802c638:	b2d2      	uxtb	r2, r2
 802c63a:	440b      	add	r3, r1
 802c63c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 802c640:	e00a      	b.n	802c658 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 802c642:	683b      	ldr	r3, [r7, #0]
 802c644:	b2da      	uxtb	r2, r3
 802c646:	4908      	ldr	r1, [pc, #32]	; (802c668 <__NVIC_SetPriority+0x50>)
 802c648:	88fb      	ldrh	r3, [r7, #6]
 802c64a:	f003 030f 	and.w	r3, r3, #15
 802c64e:	3b04      	subs	r3, #4
 802c650:	0112      	lsls	r2, r2, #4
 802c652:	b2d2      	uxtb	r2, r2
 802c654:	440b      	add	r3, r1
 802c656:	761a      	strb	r2, [r3, #24]
}
 802c658:	bf00      	nop
 802c65a:	370c      	adds	r7, #12
 802c65c:	46bd      	mov	sp, r7
 802c65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c662:	4770      	bx	lr
 802c664:	e000e100 	.word	0xe000e100
 802c668:	e000ed00 	.word	0xe000ed00

0802c66c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 802c66c:	b480      	push	{r7}
 802c66e:	b089      	sub	sp, #36	; 0x24
 802c670:	af00      	add	r7, sp, #0
 802c672:	60f8      	str	r0, [r7, #12]
 802c674:	60b9      	str	r1, [r7, #8]
 802c676:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 802c678:	68fb      	ldr	r3, [r7, #12]
 802c67a:	f003 0307 	and.w	r3, r3, #7
 802c67e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 802c680:	69fb      	ldr	r3, [r7, #28]
 802c682:	f1c3 0307 	rsb	r3, r3, #7
 802c686:	2b04      	cmp	r3, #4
 802c688:	bf28      	it	cs
 802c68a:	2304      	movcs	r3, #4
 802c68c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 802c68e:	69fb      	ldr	r3, [r7, #28]
 802c690:	3304      	adds	r3, #4
 802c692:	2b06      	cmp	r3, #6
 802c694:	d902      	bls.n	802c69c <NVIC_EncodePriority+0x30>
 802c696:	69fb      	ldr	r3, [r7, #28]
 802c698:	3b03      	subs	r3, #3
 802c69a:	e000      	b.n	802c69e <NVIC_EncodePriority+0x32>
 802c69c:	2300      	movs	r3, #0
 802c69e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 802c6a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802c6a4:	69bb      	ldr	r3, [r7, #24]
 802c6a6:	fa02 f303 	lsl.w	r3, r2, r3
 802c6aa:	43da      	mvns	r2, r3
 802c6ac:	68bb      	ldr	r3, [r7, #8]
 802c6ae:	401a      	ands	r2, r3
 802c6b0:	697b      	ldr	r3, [r7, #20]
 802c6b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 802c6b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 802c6b8:	697b      	ldr	r3, [r7, #20]
 802c6ba:	fa01 f303 	lsl.w	r3, r1, r3
 802c6be:	43d9      	mvns	r1, r3
 802c6c0:	687b      	ldr	r3, [r7, #4]
 802c6c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 802c6c4:	4313      	orrs	r3, r2
         );
}
 802c6c6:	4618      	mov	r0, r3
 802c6c8:	3724      	adds	r7, #36	; 0x24
 802c6ca:	46bd      	mov	sp, r7
 802c6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c6d0:	4770      	bx	lr
	...

0802c6d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 802c6d4:	b580      	push	{r7, lr}
 802c6d6:	b082      	sub	sp, #8
 802c6d8:	af00      	add	r7, sp, #0
 802c6da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 802c6dc:	687b      	ldr	r3, [r7, #4]
 802c6de:	3b01      	subs	r3, #1
 802c6e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 802c6e4:	d301      	bcc.n	802c6ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 802c6e6:	2301      	movs	r3, #1
 802c6e8:	e00f      	b.n	802c70a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 802c6ea:	4a0a      	ldr	r2, [pc, #40]	; (802c714 <SysTick_Config+0x40>)
 802c6ec:	687b      	ldr	r3, [r7, #4]
 802c6ee:	3b01      	subs	r3, #1
 802c6f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 802c6f2:	210f      	movs	r1, #15
 802c6f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802c6f8:	f7ff ff8e 	bl	802c618 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 802c6fc:	4b05      	ldr	r3, [pc, #20]	; (802c714 <SysTick_Config+0x40>)
 802c6fe:	2200      	movs	r2, #0
 802c700:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 802c702:	4b04      	ldr	r3, [pc, #16]	; (802c714 <SysTick_Config+0x40>)
 802c704:	2207      	movs	r2, #7
 802c706:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 802c708:	2300      	movs	r3, #0
}
 802c70a:	4618      	mov	r0, r3
 802c70c:	3708      	adds	r7, #8
 802c70e:	46bd      	mov	sp, r7
 802c710:	bd80      	pop	{r7, pc}
 802c712:	bf00      	nop
 802c714:	e000e010 	.word	0xe000e010

0802c718 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 802c718:	b580      	push	{r7, lr}
 802c71a:	b082      	sub	sp, #8
 802c71c:	af00      	add	r7, sp, #0
 802c71e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 802c720:	6878      	ldr	r0, [r7, #4]
 802c722:	f7ff ff29 	bl	802c578 <__NVIC_SetPriorityGrouping>
}
 802c726:	bf00      	nop
 802c728:	3708      	adds	r7, #8
 802c72a:	46bd      	mov	sp, r7
 802c72c:	bd80      	pop	{r7, pc}

0802c72e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 802c72e:	b580      	push	{r7, lr}
 802c730:	b086      	sub	sp, #24
 802c732:	af00      	add	r7, sp, #0
 802c734:	4603      	mov	r3, r0
 802c736:	60b9      	str	r1, [r7, #8]
 802c738:	607a      	str	r2, [r7, #4]
 802c73a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 802c73c:	f7ff ff40 	bl	802c5c0 <__NVIC_GetPriorityGrouping>
 802c740:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 802c742:	687a      	ldr	r2, [r7, #4]
 802c744:	68b9      	ldr	r1, [r7, #8]
 802c746:	6978      	ldr	r0, [r7, #20]
 802c748:	f7ff ff90 	bl	802c66c <NVIC_EncodePriority>
 802c74c:	4602      	mov	r2, r0
 802c74e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 802c752:	4611      	mov	r1, r2
 802c754:	4618      	mov	r0, r3
 802c756:	f7ff ff5f 	bl	802c618 <__NVIC_SetPriority>
}
 802c75a:	bf00      	nop
 802c75c:	3718      	adds	r7, #24
 802c75e:	46bd      	mov	sp, r7
 802c760:	bd80      	pop	{r7, pc}

0802c762 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 802c762:	b580      	push	{r7, lr}
 802c764:	b082      	sub	sp, #8
 802c766:	af00      	add	r7, sp, #0
 802c768:	4603      	mov	r3, r0
 802c76a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 802c76c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 802c770:	4618      	mov	r0, r3
 802c772:	f7ff ff33 	bl	802c5dc <__NVIC_EnableIRQ>
}
 802c776:	bf00      	nop
 802c778:	3708      	adds	r7, #8
 802c77a:	46bd      	mov	sp, r7
 802c77c:	bd80      	pop	{r7, pc}

0802c77e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 802c77e:	b580      	push	{r7, lr}
 802c780:	b082      	sub	sp, #8
 802c782:	af00      	add	r7, sp, #0
 802c784:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 802c786:	6878      	ldr	r0, [r7, #4]
 802c788:	f7ff ffa4 	bl	802c6d4 <SysTick_Config>
 802c78c:	4603      	mov	r3, r0
}
 802c78e:	4618      	mov	r0, r3
 802c790:	3708      	adds	r7, #8
 802c792:	46bd      	mov	sp, r7
 802c794:	bd80      	pop	{r7, pc}

0802c796 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 802c796:	b580      	push	{r7, lr}
 802c798:	b082      	sub	sp, #8
 802c79a:	af00      	add	r7, sp, #0
 802c79c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 802c79e:	687b      	ldr	r3, [r7, #4]
 802c7a0:	2b00      	cmp	r3, #0
 802c7a2:	d101      	bne.n	802c7a8 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 802c7a4:	2301      	movs	r3, #1
 802c7a6:	e014      	b.n	802c7d2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 802c7a8:	687b      	ldr	r3, [r7, #4]
 802c7aa:	791b      	ldrb	r3, [r3, #4]
 802c7ac:	b2db      	uxtb	r3, r3
 802c7ae:	2b00      	cmp	r3, #0
 802c7b0:	d105      	bne.n	802c7be <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 802c7b2:	687b      	ldr	r3, [r7, #4]
 802c7b4:	2200      	movs	r2, #0
 802c7b6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 802c7b8:	6878      	ldr	r0, [r7, #4]
 802c7ba:	f7fe f871 	bl	802a8a0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 802c7be:	687b      	ldr	r3, [r7, #4]
 802c7c0:	2202      	movs	r2, #2
 802c7c2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 802c7c4:	687b      	ldr	r3, [r7, #4]
 802c7c6:	2200      	movs	r2, #0
 802c7c8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 802c7ca:	687b      	ldr	r3, [r7, #4]
 802c7cc:	2201      	movs	r2, #1
 802c7ce:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 802c7d0:	2300      	movs	r3, #0
}
 802c7d2:	4618      	mov	r0, r3
 802c7d4:	3708      	adds	r7, #8
 802c7d6:	46bd      	mov	sp, r7
 802c7d8:	bd80      	pop	{r7, pc}

0802c7da <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 802c7da:	b480      	push	{r7}
 802c7dc:	b083      	sub	sp, #12
 802c7de:	af00      	add	r7, sp, #0
 802c7e0:	6078      	str	r0, [r7, #4]
 802c7e2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 802c7e4:	687b      	ldr	r3, [r7, #4]
 802c7e6:	795b      	ldrb	r3, [r3, #5]
 802c7e8:	2b01      	cmp	r3, #1
 802c7ea:	d101      	bne.n	802c7f0 <HAL_DAC_Start+0x16>
 802c7ec:	2302      	movs	r3, #2
 802c7ee:	e040      	b.n	802c872 <HAL_DAC_Start+0x98>
 802c7f0:	687b      	ldr	r3, [r7, #4]
 802c7f2:	2201      	movs	r2, #1
 802c7f4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 802c7f6:	687b      	ldr	r3, [r7, #4]
 802c7f8:	2202      	movs	r2, #2
 802c7fa:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 802c7fc:	687b      	ldr	r3, [r7, #4]
 802c7fe:	681b      	ldr	r3, [r3, #0]
 802c800:	6819      	ldr	r1, [r3, #0]
 802c802:	683b      	ldr	r3, [r7, #0]
 802c804:	f003 0310 	and.w	r3, r3, #16
 802c808:	2201      	movs	r2, #1
 802c80a:	409a      	lsls	r2, r3
 802c80c:	687b      	ldr	r3, [r7, #4]
 802c80e:	681b      	ldr	r3, [r3, #0]
 802c810:	430a      	orrs	r2, r1
 802c812:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 802c814:	683b      	ldr	r3, [r7, #0]
 802c816:	2b00      	cmp	r3, #0
 802c818:	d10f      	bne.n	802c83a <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 802c81a:	687b      	ldr	r3, [r7, #4]
 802c81c:	681b      	ldr	r3, [r3, #0]
 802c81e:	681b      	ldr	r3, [r3, #0]
 802c820:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 802c824:	2b02      	cmp	r3, #2
 802c826:	d11d      	bne.n	802c864 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 802c828:	687b      	ldr	r3, [r7, #4]
 802c82a:	681b      	ldr	r3, [r3, #0]
 802c82c:	685a      	ldr	r2, [r3, #4]
 802c82e:	687b      	ldr	r3, [r7, #4]
 802c830:	681b      	ldr	r3, [r3, #0]
 802c832:	f042 0201 	orr.w	r2, r2, #1
 802c836:	605a      	str	r2, [r3, #4]
 802c838:	e014      	b.n	802c864 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 802c83a:	687b      	ldr	r3, [r7, #4]
 802c83c:	681b      	ldr	r3, [r3, #0]
 802c83e:	681b      	ldr	r3, [r3, #0]
 802c840:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 802c844:	683b      	ldr	r3, [r7, #0]
 802c846:	f003 0310 	and.w	r3, r3, #16
 802c84a:	2102      	movs	r1, #2
 802c84c:	fa01 f303 	lsl.w	r3, r1, r3
 802c850:	429a      	cmp	r2, r3
 802c852:	d107      	bne.n	802c864 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 802c854:	687b      	ldr	r3, [r7, #4]
 802c856:	681b      	ldr	r3, [r3, #0]
 802c858:	685a      	ldr	r2, [r3, #4]
 802c85a:	687b      	ldr	r3, [r7, #4]
 802c85c:	681b      	ldr	r3, [r3, #0]
 802c85e:	f042 0202 	orr.w	r2, r2, #2
 802c862:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 802c864:	687b      	ldr	r3, [r7, #4]
 802c866:	2201      	movs	r2, #1
 802c868:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 802c86a:	687b      	ldr	r3, [r7, #4]
 802c86c:	2200      	movs	r2, #0
 802c86e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 802c870:	2300      	movs	r3, #0
}
 802c872:	4618      	mov	r0, r3
 802c874:	370c      	adds	r7, #12
 802c876:	46bd      	mov	sp, r7
 802c878:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c87c:	4770      	bx	lr

0802c87e <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 802c87e:	b480      	push	{r7}
 802c880:	b087      	sub	sp, #28
 802c882:	af00      	add	r7, sp, #0
 802c884:	60f8      	str	r0, [r7, #12]
 802c886:	60b9      	str	r1, [r7, #8]
 802c888:	607a      	str	r2, [r7, #4]
 802c88a:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 802c88c:	2300      	movs	r3, #0
 802c88e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 802c890:	68fb      	ldr	r3, [r7, #12]
 802c892:	681b      	ldr	r3, [r3, #0]
 802c894:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 802c896:	68bb      	ldr	r3, [r7, #8]
 802c898:	2b00      	cmp	r3, #0
 802c89a:	d105      	bne.n	802c8a8 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 802c89c:	697a      	ldr	r2, [r7, #20]
 802c89e:	687b      	ldr	r3, [r7, #4]
 802c8a0:	4413      	add	r3, r2
 802c8a2:	3308      	adds	r3, #8
 802c8a4:	617b      	str	r3, [r7, #20]
 802c8a6:	e004      	b.n	802c8b2 <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 802c8a8:	697a      	ldr	r2, [r7, #20]
 802c8aa:	687b      	ldr	r3, [r7, #4]
 802c8ac:	4413      	add	r3, r2
 802c8ae:	3314      	adds	r3, #20
 802c8b0:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 802c8b2:	697b      	ldr	r3, [r7, #20]
 802c8b4:	461a      	mov	r2, r3
 802c8b6:	683b      	ldr	r3, [r7, #0]
 802c8b8:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 802c8ba:	2300      	movs	r3, #0
}
 802c8bc:	4618      	mov	r0, r3
 802c8be:	371c      	adds	r7, #28
 802c8c0:	46bd      	mov	sp, r7
 802c8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c8c6:	4770      	bx	lr

0802c8c8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 802c8c8:	b580      	push	{r7, lr}
 802c8ca:	b088      	sub	sp, #32
 802c8cc:	af00      	add	r7, sp, #0
 802c8ce:	60f8      	str	r0, [r7, #12]
 802c8d0:	60b9      	str	r1, [r7, #8]
 802c8d2:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 802c8d4:	68fb      	ldr	r3, [r7, #12]
 802c8d6:	795b      	ldrb	r3, [r3, #5]
 802c8d8:	2b01      	cmp	r3, #1
 802c8da:	d101      	bne.n	802c8e0 <HAL_DAC_ConfigChannel+0x18>
 802c8dc:	2302      	movs	r3, #2
 802c8de:	e11d      	b.n	802cb1c <HAL_DAC_ConfigChannel+0x254>
 802c8e0:	68fb      	ldr	r3, [r7, #12]
 802c8e2:	2201      	movs	r2, #1
 802c8e4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 802c8e6:	68fb      	ldr	r3, [r7, #12]
 802c8e8:	2202      	movs	r2, #2
 802c8ea:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 802c8ec:	68bb      	ldr	r3, [r7, #8]
 802c8ee:	681b      	ldr	r3, [r3, #0]
 802c8f0:	2b04      	cmp	r3, #4
 802c8f2:	d174      	bne.n	802c9de <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 802c8f4:	f7ff fc1c 	bl	802c130 <HAL_GetTick>
 802c8f8:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 802c8fa:	687b      	ldr	r3, [r7, #4]
 802c8fc:	2b00      	cmp	r3, #0
 802c8fe:	d134      	bne.n	802c96a <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 802c900:	e011      	b.n	802c926 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 802c902:	f7ff fc15 	bl	802c130 <HAL_GetTick>
 802c906:	4602      	mov	r2, r0
 802c908:	69bb      	ldr	r3, [r7, #24]
 802c90a:	1ad3      	subs	r3, r2, r3
 802c90c:	2b01      	cmp	r3, #1
 802c90e:	d90a      	bls.n	802c926 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 802c910:	68fb      	ldr	r3, [r7, #12]
 802c912:	691b      	ldr	r3, [r3, #16]
 802c914:	f043 0208 	orr.w	r2, r3, #8
 802c918:	68fb      	ldr	r3, [r7, #12]
 802c91a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 802c91c:	68fb      	ldr	r3, [r7, #12]
 802c91e:	2203      	movs	r2, #3
 802c920:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 802c922:	2303      	movs	r3, #3
 802c924:	e0fa      	b.n	802cb1c <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 802c926:	68fb      	ldr	r3, [r7, #12]
 802c928:	681b      	ldr	r3, [r3, #0]
 802c92a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 802c92c:	4b7d      	ldr	r3, [pc, #500]	; (802cb24 <HAL_DAC_ConfigChannel+0x25c>)
 802c92e:	4013      	ands	r3, r2
 802c930:	2b00      	cmp	r3, #0
 802c932:	d1e6      	bne.n	802c902 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 802c934:	2001      	movs	r0, #1
 802c936:	f7ff fc07 	bl	802c148 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 802c93a:	68fb      	ldr	r3, [r7, #12]
 802c93c:	681b      	ldr	r3, [r3, #0]
 802c93e:	68ba      	ldr	r2, [r7, #8]
 802c940:	6992      	ldr	r2, [r2, #24]
 802c942:	641a      	str	r2, [r3, #64]	; 0x40
 802c944:	e01e      	b.n	802c984 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 802c946:	f7ff fbf3 	bl	802c130 <HAL_GetTick>
 802c94a:	4602      	mov	r2, r0
 802c94c:	69bb      	ldr	r3, [r7, #24]
 802c94e:	1ad3      	subs	r3, r2, r3
 802c950:	2b01      	cmp	r3, #1
 802c952:	d90a      	bls.n	802c96a <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 802c954:	68fb      	ldr	r3, [r7, #12]
 802c956:	691b      	ldr	r3, [r3, #16]
 802c958:	f043 0208 	orr.w	r2, r3, #8
 802c95c:	68fb      	ldr	r3, [r7, #12]
 802c95e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 802c960:	68fb      	ldr	r3, [r7, #12]
 802c962:	2203      	movs	r2, #3
 802c964:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 802c966:	2303      	movs	r3, #3
 802c968:	e0d8      	b.n	802cb1c <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 802c96a:	68fb      	ldr	r3, [r7, #12]
 802c96c:	681b      	ldr	r3, [r3, #0]
 802c96e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802c970:	2b00      	cmp	r3, #0
 802c972:	dbe8      	blt.n	802c946 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 802c974:	2001      	movs	r0, #1
 802c976:	f7ff fbe7 	bl	802c148 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 802c97a:	68fb      	ldr	r3, [r7, #12]
 802c97c:	681b      	ldr	r3, [r3, #0]
 802c97e:	68ba      	ldr	r2, [r7, #8]
 802c980:	6992      	ldr	r2, [r2, #24]
 802c982:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 802c984:	68fb      	ldr	r3, [r7, #12]
 802c986:	681b      	ldr	r3, [r3, #0]
 802c988:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 802c98a:	687b      	ldr	r3, [r7, #4]
 802c98c:	f003 0310 	and.w	r3, r3, #16
 802c990:	f240 31ff 	movw	r1, #1023	; 0x3ff
 802c994:	fa01 f303 	lsl.w	r3, r1, r3
 802c998:	43db      	mvns	r3, r3
 802c99a:	ea02 0103 	and.w	r1, r2, r3
 802c99e:	68bb      	ldr	r3, [r7, #8]
 802c9a0:	69da      	ldr	r2, [r3, #28]
 802c9a2:	687b      	ldr	r3, [r7, #4]
 802c9a4:	f003 0310 	and.w	r3, r3, #16
 802c9a8:	409a      	lsls	r2, r3
 802c9aa:	68fb      	ldr	r3, [r7, #12]
 802c9ac:	681b      	ldr	r3, [r3, #0]
 802c9ae:	430a      	orrs	r2, r1
 802c9b0:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 802c9b2:	68fb      	ldr	r3, [r7, #12]
 802c9b4:	681b      	ldr	r3, [r3, #0]
 802c9b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 802c9b8:	687b      	ldr	r3, [r7, #4]
 802c9ba:	f003 0310 	and.w	r3, r3, #16
 802c9be:	21ff      	movs	r1, #255	; 0xff
 802c9c0:	fa01 f303 	lsl.w	r3, r1, r3
 802c9c4:	43db      	mvns	r3, r3
 802c9c6:	ea02 0103 	and.w	r1, r2, r3
 802c9ca:	68bb      	ldr	r3, [r7, #8]
 802c9cc:	6a1a      	ldr	r2, [r3, #32]
 802c9ce:	687b      	ldr	r3, [r7, #4]
 802c9d0:	f003 0310 	and.w	r3, r3, #16
 802c9d4:	409a      	lsls	r2, r3
 802c9d6:	68fb      	ldr	r3, [r7, #12]
 802c9d8:	681b      	ldr	r3, [r3, #0]
 802c9da:	430a      	orrs	r2, r1
 802c9dc:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 802c9de:	68bb      	ldr	r3, [r7, #8]
 802c9e0:	691b      	ldr	r3, [r3, #16]
 802c9e2:	2b01      	cmp	r3, #1
 802c9e4:	d11d      	bne.n	802ca22 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 802c9e6:	68fb      	ldr	r3, [r7, #12]
 802c9e8:	681b      	ldr	r3, [r3, #0]
 802c9ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802c9ec:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 802c9ee:	687b      	ldr	r3, [r7, #4]
 802c9f0:	f003 0310 	and.w	r3, r3, #16
 802c9f4:	221f      	movs	r2, #31
 802c9f6:	fa02 f303 	lsl.w	r3, r2, r3
 802c9fa:	43db      	mvns	r3, r3
 802c9fc:	697a      	ldr	r2, [r7, #20]
 802c9fe:	4013      	ands	r3, r2
 802ca00:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 802ca02:	68bb      	ldr	r3, [r7, #8]
 802ca04:	695b      	ldr	r3, [r3, #20]
 802ca06:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 802ca08:	687b      	ldr	r3, [r7, #4]
 802ca0a:	f003 0310 	and.w	r3, r3, #16
 802ca0e:	693a      	ldr	r2, [r7, #16]
 802ca10:	fa02 f303 	lsl.w	r3, r2, r3
 802ca14:	697a      	ldr	r2, [r7, #20]
 802ca16:	4313      	orrs	r3, r2
 802ca18:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 802ca1a:	68fb      	ldr	r3, [r7, #12]
 802ca1c:	681b      	ldr	r3, [r3, #0]
 802ca1e:	697a      	ldr	r2, [r7, #20]
 802ca20:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 802ca22:	68fb      	ldr	r3, [r7, #12]
 802ca24:	681b      	ldr	r3, [r3, #0]
 802ca26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802ca28:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 802ca2a:	687b      	ldr	r3, [r7, #4]
 802ca2c:	f003 0310 	and.w	r3, r3, #16
 802ca30:	2207      	movs	r2, #7
 802ca32:	fa02 f303 	lsl.w	r3, r2, r3
 802ca36:	43db      	mvns	r3, r3
 802ca38:	697a      	ldr	r2, [r7, #20]
 802ca3a:	4013      	ands	r3, r2
 802ca3c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 802ca3e:	68bb      	ldr	r3, [r7, #8]
 802ca40:	68db      	ldr	r3, [r3, #12]
 802ca42:	2b01      	cmp	r3, #1
 802ca44:	d102      	bne.n	802ca4c <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 802ca46:	2300      	movs	r3, #0
 802ca48:	61fb      	str	r3, [r7, #28]
 802ca4a:	e00f      	b.n	802ca6c <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 802ca4c:	68bb      	ldr	r3, [r7, #8]
 802ca4e:	68db      	ldr	r3, [r3, #12]
 802ca50:	2b02      	cmp	r3, #2
 802ca52:	d102      	bne.n	802ca5a <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 802ca54:	2301      	movs	r3, #1
 802ca56:	61fb      	str	r3, [r7, #28]
 802ca58:	e008      	b.n	802ca6c <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 802ca5a:	68bb      	ldr	r3, [r7, #8]
 802ca5c:	689b      	ldr	r3, [r3, #8]
 802ca5e:	2b00      	cmp	r3, #0
 802ca60:	d102      	bne.n	802ca68 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 802ca62:	2301      	movs	r3, #1
 802ca64:	61fb      	str	r3, [r7, #28]
 802ca66:	e001      	b.n	802ca6c <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 802ca68:	2300      	movs	r3, #0
 802ca6a:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 802ca6c:	68bb      	ldr	r3, [r7, #8]
 802ca6e:	681a      	ldr	r2, [r3, #0]
 802ca70:	68bb      	ldr	r3, [r7, #8]
 802ca72:	689b      	ldr	r3, [r3, #8]
 802ca74:	4313      	orrs	r3, r2
 802ca76:	69fa      	ldr	r2, [r7, #28]
 802ca78:	4313      	orrs	r3, r2
 802ca7a:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 802ca7c:	687b      	ldr	r3, [r7, #4]
 802ca7e:	f003 0310 	and.w	r3, r3, #16
 802ca82:	693a      	ldr	r2, [r7, #16]
 802ca84:	fa02 f303 	lsl.w	r3, r2, r3
 802ca88:	697a      	ldr	r2, [r7, #20]
 802ca8a:	4313      	orrs	r3, r2
 802ca8c:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 802ca8e:	68fb      	ldr	r3, [r7, #12]
 802ca90:	681b      	ldr	r3, [r3, #0]
 802ca92:	697a      	ldr	r2, [r7, #20]
 802ca94:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 802ca96:	68fb      	ldr	r3, [r7, #12]
 802ca98:	681b      	ldr	r3, [r3, #0]
 802ca9a:	6819      	ldr	r1, [r3, #0]
 802ca9c:	687b      	ldr	r3, [r7, #4]
 802ca9e:	f003 0310 	and.w	r3, r3, #16
 802caa2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 802caa6:	fa02 f303 	lsl.w	r3, r2, r3
 802caaa:	43da      	mvns	r2, r3
 802caac:	68fb      	ldr	r3, [r7, #12]
 802caae:	681b      	ldr	r3, [r3, #0]
 802cab0:	400a      	ands	r2, r1
 802cab2:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 802cab4:	68fb      	ldr	r3, [r7, #12]
 802cab6:	681b      	ldr	r3, [r3, #0]
 802cab8:	681b      	ldr	r3, [r3, #0]
 802caba:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 802cabc:	687b      	ldr	r3, [r7, #4]
 802cabe:	f003 0310 	and.w	r3, r3, #16
 802cac2:	f640 72fe 	movw	r2, #4094	; 0xffe
 802cac6:	fa02 f303 	lsl.w	r3, r2, r3
 802caca:	43db      	mvns	r3, r3
 802cacc:	697a      	ldr	r2, [r7, #20]
 802cace:	4013      	ands	r3, r2
 802cad0:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 802cad2:	68bb      	ldr	r3, [r7, #8]
 802cad4:	685b      	ldr	r3, [r3, #4]
 802cad6:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 802cad8:	687b      	ldr	r3, [r7, #4]
 802cada:	f003 0310 	and.w	r3, r3, #16
 802cade:	693a      	ldr	r2, [r7, #16]
 802cae0:	fa02 f303 	lsl.w	r3, r2, r3
 802cae4:	697a      	ldr	r2, [r7, #20]
 802cae6:	4313      	orrs	r3, r2
 802cae8:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 802caea:	68fb      	ldr	r3, [r7, #12]
 802caec:	681b      	ldr	r3, [r3, #0]
 802caee:	697a      	ldr	r2, [r7, #20]
 802caf0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 802caf2:	68fb      	ldr	r3, [r7, #12]
 802caf4:	681b      	ldr	r3, [r3, #0]
 802caf6:	6819      	ldr	r1, [r3, #0]
 802caf8:	687b      	ldr	r3, [r7, #4]
 802cafa:	f003 0310 	and.w	r3, r3, #16
 802cafe:	22c0      	movs	r2, #192	; 0xc0
 802cb00:	fa02 f303 	lsl.w	r3, r2, r3
 802cb04:	43da      	mvns	r2, r3
 802cb06:	68fb      	ldr	r3, [r7, #12]
 802cb08:	681b      	ldr	r3, [r3, #0]
 802cb0a:	400a      	ands	r2, r1
 802cb0c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 802cb0e:	68fb      	ldr	r3, [r7, #12]
 802cb10:	2201      	movs	r2, #1
 802cb12:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 802cb14:	68fb      	ldr	r3, [r7, #12]
 802cb16:	2200      	movs	r2, #0
 802cb18:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 802cb1a:	2300      	movs	r3, #0
}
 802cb1c:	4618      	mov	r0, r3
 802cb1e:	3720      	adds	r7, #32
 802cb20:	46bd      	mov	sp, r7
 802cb22:	bd80      	pop	{r7, pc}
 802cb24:	20008000 	.word	0x20008000

0802cb28 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 802cb28:	b580      	push	{r7, lr}
 802cb2a:	b086      	sub	sp, #24
 802cb2c:	af00      	add	r7, sp, #0
 802cb2e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 802cb30:	f7ff fafe 	bl	802c130 <HAL_GetTick>
 802cb34:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 802cb36:	687b      	ldr	r3, [r7, #4]
 802cb38:	2b00      	cmp	r3, #0
 802cb3a:	d101      	bne.n	802cb40 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 802cb3c:	2301      	movs	r3, #1
 802cb3e:	e316      	b.n	802d16e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 802cb40:	687b      	ldr	r3, [r7, #4]
 802cb42:	681b      	ldr	r3, [r3, #0]
 802cb44:	4a66      	ldr	r2, [pc, #408]	; (802cce0 <HAL_DMA_Init+0x1b8>)
 802cb46:	4293      	cmp	r3, r2
 802cb48:	d04a      	beq.n	802cbe0 <HAL_DMA_Init+0xb8>
 802cb4a:	687b      	ldr	r3, [r7, #4]
 802cb4c:	681b      	ldr	r3, [r3, #0]
 802cb4e:	4a65      	ldr	r2, [pc, #404]	; (802cce4 <HAL_DMA_Init+0x1bc>)
 802cb50:	4293      	cmp	r3, r2
 802cb52:	d045      	beq.n	802cbe0 <HAL_DMA_Init+0xb8>
 802cb54:	687b      	ldr	r3, [r7, #4]
 802cb56:	681b      	ldr	r3, [r3, #0]
 802cb58:	4a63      	ldr	r2, [pc, #396]	; (802cce8 <HAL_DMA_Init+0x1c0>)
 802cb5a:	4293      	cmp	r3, r2
 802cb5c:	d040      	beq.n	802cbe0 <HAL_DMA_Init+0xb8>
 802cb5e:	687b      	ldr	r3, [r7, #4]
 802cb60:	681b      	ldr	r3, [r3, #0]
 802cb62:	4a62      	ldr	r2, [pc, #392]	; (802ccec <HAL_DMA_Init+0x1c4>)
 802cb64:	4293      	cmp	r3, r2
 802cb66:	d03b      	beq.n	802cbe0 <HAL_DMA_Init+0xb8>
 802cb68:	687b      	ldr	r3, [r7, #4]
 802cb6a:	681b      	ldr	r3, [r3, #0]
 802cb6c:	4a60      	ldr	r2, [pc, #384]	; (802ccf0 <HAL_DMA_Init+0x1c8>)
 802cb6e:	4293      	cmp	r3, r2
 802cb70:	d036      	beq.n	802cbe0 <HAL_DMA_Init+0xb8>
 802cb72:	687b      	ldr	r3, [r7, #4]
 802cb74:	681b      	ldr	r3, [r3, #0]
 802cb76:	4a5f      	ldr	r2, [pc, #380]	; (802ccf4 <HAL_DMA_Init+0x1cc>)
 802cb78:	4293      	cmp	r3, r2
 802cb7a:	d031      	beq.n	802cbe0 <HAL_DMA_Init+0xb8>
 802cb7c:	687b      	ldr	r3, [r7, #4]
 802cb7e:	681b      	ldr	r3, [r3, #0]
 802cb80:	4a5d      	ldr	r2, [pc, #372]	; (802ccf8 <HAL_DMA_Init+0x1d0>)
 802cb82:	4293      	cmp	r3, r2
 802cb84:	d02c      	beq.n	802cbe0 <HAL_DMA_Init+0xb8>
 802cb86:	687b      	ldr	r3, [r7, #4]
 802cb88:	681b      	ldr	r3, [r3, #0]
 802cb8a:	4a5c      	ldr	r2, [pc, #368]	; (802ccfc <HAL_DMA_Init+0x1d4>)
 802cb8c:	4293      	cmp	r3, r2
 802cb8e:	d027      	beq.n	802cbe0 <HAL_DMA_Init+0xb8>
 802cb90:	687b      	ldr	r3, [r7, #4]
 802cb92:	681b      	ldr	r3, [r3, #0]
 802cb94:	4a5a      	ldr	r2, [pc, #360]	; (802cd00 <HAL_DMA_Init+0x1d8>)
 802cb96:	4293      	cmp	r3, r2
 802cb98:	d022      	beq.n	802cbe0 <HAL_DMA_Init+0xb8>
 802cb9a:	687b      	ldr	r3, [r7, #4]
 802cb9c:	681b      	ldr	r3, [r3, #0]
 802cb9e:	4a59      	ldr	r2, [pc, #356]	; (802cd04 <HAL_DMA_Init+0x1dc>)
 802cba0:	4293      	cmp	r3, r2
 802cba2:	d01d      	beq.n	802cbe0 <HAL_DMA_Init+0xb8>
 802cba4:	687b      	ldr	r3, [r7, #4]
 802cba6:	681b      	ldr	r3, [r3, #0]
 802cba8:	4a57      	ldr	r2, [pc, #348]	; (802cd08 <HAL_DMA_Init+0x1e0>)
 802cbaa:	4293      	cmp	r3, r2
 802cbac:	d018      	beq.n	802cbe0 <HAL_DMA_Init+0xb8>
 802cbae:	687b      	ldr	r3, [r7, #4]
 802cbb0:	681b      	ldr	r3, [r3, #0]
 802cbb2:	4a56      	ldr	r2, [pc, #344]	; (802cd0c <HAL_DMA_Init+0x1e4>)
 802cbb4:	4293      	cmp	r3, r2
 802cbb6:	d013      	beq.n	802cbe0 <HAL_DMA_Init+0xb8>
 802cbb8:	687b      	ldr	r3, [r7, #4]
 802cbba:	681b      	ldr	r3, [r3, #0]
 802cbbc:	4a54      	ldr	r2, [pc, #336]	; (802cd10 <HAL_DMA_Init+0x1e8>)
 802cbbe:	4293      	cmp	r3, r2
 802cbc0:	d00e      	beq.n	802cbe0 <HAL_DMA_Init+0xb8>
 802cbc2:	687b      	ldr	r3, [r7, #4]
 802cbc4:	681b      	ldr	r3, [r3, #0]
 802cbc6:	4a53      	ldr	r2, [pc, #332]	; (802cd14 <HAL_DMA_Init+0x1ec>)
 802cbc8:	4293      	cmp	r3, r2
 802cbca:	d009      	beq.n	802cbe0 <HAL_DMA_Init+0xb8>
 802cbcc:	687b      	ldr	r3, [r7, #4]
 802cbce:	681b      	ldr	r3, [r3, #0]
 802cbd0:	4a51      	ldr	r2, [pc, #324]	; (802cd18 <HAL_DMA_Init+0x1f0>)
 802cbd2:	4293      	cmp	r3, r2
 802cbd4:	d004      	beq.n	802cbe0 <HAL_DMA_Init+0xb8>
 802cbd6:	687b      	ldr	r3, [r7, #4]
 802cbd8:	681b      	ldr	r3, [r3, #0]
 802cbda:	4a50      	ldr	r2, [pc, #320]	; (802cd1c <HAL_DMA_Init+0x1f4>)
 802cbdc:	4293      	cmp	r3, r2
 802cbde:	d101      	bne.n	802cbe4 <HAL_DMA_Init+0xbc>
 802cbe0:	2301      	movs	r3, #1
 802cbe2:	e000      	b.n	802cbe6 <HAL_DMA_Init+0xbe>
 802cbe4:	2300      	movs	r3, #0
 802cbe6:	2b00      	cmp	r3, #0
 802cbe8:	f000 813b 	beq.w	802ce62 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 802cbec:	687b      	ldr	r3, [r7, #4]
 802cbee:	2202      	movs	r2, #2
 802cbf0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 802cbf4:	687b      	ldr	r3, [r7, #4]
 802cbf6:	2200      	movs	r2, #0
 802cbf8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 802cbfc:	687b      	ldr	r3, [r7, #4]
 802cbfe:	681b      	ldr	r3, [r3, #0]
 802cc00:	4a37      	ldr	r2, [pc, #220]	; (802cce0 <HAL_DMA_Init+0x1b8>)
 802cc02:	4293      	cmp	r3, r2
 802cc04:	d04a      	beq.n	802cc9c <HAL_DMA_Init+0x174>
 802cc06:	687b      	ldr	r3, [r7, #4]
 802cc08:	681b      	ldr	r3, [r3, #0]
 802cc0a:	4a36      	ldr	r2, [pc, #216]	; (802cce4 <HAL_DMA_Init+0x1bc>)
 802cc0c:	4293      	cmp	r3, r2
 802cc0e:	d045      	beq.n	802cc9c <HAL_DMA_Init+0x174>
 802cc10:	687b      	ldr	r3, [r7, #4]
 802cc12:	681b      	ldr	r3, [r3, #0]
 802cc14:	4a34      	ldr	r2, [pc, #208]	; (802cce8 <HAL_DMA_Init+0x1c0>)
 802cc16:	4293      	cmp	r3, r2
 802cc18:	d040      	beq.n	802cc9c <HAL_DMA_Init+0x174>
 802cc1a:	687b      	ldr	r3, [r7, #4]
 802cc1c:	681b      	ldr	r3, [r3, #0]
 802cc1e:	4a33      	ldr	r2, [pc, #204]	; (802ccec <HAL_DMA_Init+0x1c4>)
 802cc20:	4293      	cmp	r3, r2
 802cc22:	d03b      	beq.n	802cc9c <HAL_DMA_Init+0x174>
 802cc24:	687b      	ldr	r3, [r7, #4]
 802cc26:	681b      	ldr	r3, [r3, #0]
 802cc28:	4a31      	ldr	r2, [pc, #196]	; (802ccf0 <HAL_DMA_Init+0x1c8>)
 802cc2a:	4293      	cmp	r3, r2
 802cc2c:	d036      	beq.n	802cc9c <HAL_DMA_Init+0x174>
 802cc2e:	687b      	ldr	r3, [r7, #4]
 802cc30:	681b      	ldr	r3, [r3, #0]
 802cc32:	4a30      	ldr	r2, [pc, #192]	; (802ccf4 <HAL_DMA_Init+0x1cc>)
 802cc34:	4293      	cmp	r3, r2
 802cc36:	d031      	beq.n	802cc9c <HAL_DMA_Init+0x174>
 802cc38:	687b      	ldr	r3, [r7, #4]
 802cc3a:	681b      	ldr	r3, [r3, #0]
 802cc3c:	4a2e      	ldr	r2, [pc, #184]	; (802ccf8 <HAL_DMA_Init+0x1d0>)
 802cc3e:	4293      	cmp	r3, r2
 802cc40:	d02c      	beq.n	802cc9c <HAL_DMA_Init+0x174>
 802cc42:	687b      	ldr	r3, [r7, #4]
 802cc44:	681b      	ldr	r3, [r3, #0]
 802cc46:	4a2d      	ldr	r2, [pc, #180]	; (802ccfc <HAL_DMA_Init+0x1d4>)
 802cc48:	4293      	cmp	r3, r2
 802cc4a:	d027      	beq.n	802cc9c <HAL_DMA_Init+0x174>
 802cc4c:	687b      	ldr	r3, [r7, #4]
 802cc4e:	681b      	ldr	r3, [r3, #0]
 802cc50:	4a2b      	ldr	r2, [pc, #172]	; (802cd00 <HAL_DMA_Init+0x1d8>)
 802cc52:	4293      	cmp	r3, r2
 802cc54:	d022      	beq.n	802cc9c <HAL_DMA_Init+0x174>
 802cc56:	687b      	ldr	r3, [r7, #4]
 802cc58:	681b      	ldr	r3, [r3, #0]
 802cc5a:	4a2a      	ldr	r2, [pc, #168]	; (802cd04 <HAL_DMA_Init+0x1dc>)
 802cc5c:	4293      	cmp	r3, r2
 802cc5e:	d01d      	beq.n	802cc9c <HAL_DMA_Init+0x174>
 802cc60:	687b      	ldr	r3, [r7, #4]
 802cc62:	681b      	ldr	r3, [r3, #0]
 802cc64:	4a28      	ldr	r2, [pc, #160]	; (802cd08 <HAL_DMA_Init+0x1e0>)
 802cc66:	4293      	cmp	r3, r2
 802cc68:	d018      	beq.n	802cc9c <HAL_DMA_Init+0x174>
 802cc6a:	687b      	ldr	r3, [r7, #4]
 802cc6c:	681b      	ldr	r3, [r3, #0]
 802cc6e:	4a27      	ldr	r2, [pc, #156]	; (802cd0c <HAL_DMA_Init+0x1e4>)
 802cc70:	4293      	cmp	r3, r2
 802cc72:	d013      	beq.n	802cc9c <HAL_DMA_Init+0x174>
 802cc74:	687b      	ldr	r3, [r7, #4]
 802cc76:	681b      	ldr	r3, [r3, #0]
 802cc78:	4a25      	ldr	r2, [pc, #148]	; (802cd10 <HAL_DMA_Init+0x1e8>)
 802cc7a:	4293      	cmp	r3, r2
 802cc7c:	d00e      	beq.n	802cc9c <HAL_DMA_Init+0x174>
 802cc7e:	687b      	ldr	r3, [r7, #4]
 802cc80:	681b      	ldr	r3, [r3, #0]
 802cc82:	4a24      	ldr	r2, [pc, #144]	; (802cd14 <HAL_DMA_Init+0x1ec>)
 802cc84:	4293      	cmp	r3, r2
 802cc86:	d009      	beq.n	802cc9c <HAL_DMA_Init+0x174>
 802cc88:	687b      	ldr	r3, [r7, #4]
 802cc8a:	681b      	ldr	r3, [r3, #0]
 802cc8c:	4a22      	ldr	r2, [pc, #136]	; (802cd18 <HAL_DMA_Init+0x1f0>)
 802cc8e:	4293      	cmp	r3, r2
 802cc90:	d004      	beq.n	802cc9c <HAL_DMA_Init+0x174>
 802cc92:	687b      	ldr	r3, [r7, #4]
 802cc94:	681b      	ldr	r3, [r3, #0]
 802cc96:	4a21      	ldr	r2, [pc, #132]	; (802cd1c <HAL_DMA_Init+0x1f4>)
 802cc98:	4293      	cmp	r3, r2
 802cc9a:	d108      	bne.n	802ccae <HAL_DMA_Init+0x186>
 802cc9c:	687b      	ldr	r3, [r7, #4]
 802cc9e:	681b      	ldr	r3, [r3, #0]
 802cca0:	681a      	ldr	r2, [r3, #0]
 802cca2:	687b      	ldr	r3, [r7, #4]
 802cca4:	681b      	ldr	r3, [r3, #0]
 802cca6:	f022 0201 	bic.w	r2, r2, #1
 802ccaa:	601a      	str	r2, [r3, #0]
 802ccac:	e007      	b.n	802ccbe <HAL_DMA_Init+0x196>
 802ccae:	687b      	ldr	r3, [r7, #4]
 802ccb0:	681b      	ldr	r3, [r3, #0]
 802ccb2:	681a      	ldr	r2, [r3, #0]
 802ccb4:	687b      	ldr	r3, [r7, #4]
 802ccb6:	681b      	ldr	r3, [r3, #0]
 802ccb8:	f022 0201 	bic.w	r2, r2, #1
 802ccbc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 802ccbe:	e02f      	b.n	802cd20 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 802ccc0:	f7ff fa36 	bl	802c130 <HAL_GetTick>
 802ccc4:	4602      	mov	r2, r0
 802ccc6:	693b      	ldr	r3, [r7, #16]
 802ccc8:	1ad3      	subs	r3, r2, r3
 802ccca:	2b05      	cmp	r3, #5
 802cccc:	d928      	bls.n	802cd20 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 802ccce:	687b      	ldr	r3, [r7, #4]
 802ccd0:	2220      	movs	r2, #32
 802ccd2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 802ccd4:	687b      	ldr	r3, [r7, #4]
 802ccd6:	2203      	movs	r2, #3
 802ccd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 802ccdc:	2301      	movs	r3, #1
 802ccde:	e246      	b.n	802d16e <HAL_DMA_Init+0x646>
 802cce0:	40020010 	.word	0x40020010
 802cce4:	40020028 	.word	0x40020028
 802cce8:	40020040 	.word	0x40020040
 802ccec:	40020058 	.word	0x40020058
 802ccf0:	40020070 	.word	0x40020070
 802ccf4:	40020088 	.word	0x40020088
 802ccf8:	400200a0 	.word	0x400200a0
 802ccfc:	400200b8 	.word	0x400200b8
 802cd00:	40020410 	.word	0x40020410
 802cd04:	40020428 	.word	0x40020428
 802cd08:	40020440 	.word	0x40020440
 802cd0c:	40020458 	.word	0x40020458
 802cd10:	40020470 	.word	0x40020470
 802cd14:	40020488 	.word	0x40020488
 802cd18:	400204a0 	.word	0x400204a0
 802cd1c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 802cd20:	687b      	ldr	r3, [r7, #4]
 802cd22:	681b      	ldr	r3, [r3, #0]
 802cd24:	681b      	ldr	r3, [r3, #0]
 802cd26:	f003 0301 	and.w	r3, r3, #1
 802cd2a:	2b00      	cmp	r3, #0
 802cd2c:	d1c8      	bne.n	802ccc0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 802cd2e:	687b      	ldr	r3, [r7, #4]
 802cd30:	681b      	ldr	r3, [r3, #0]
 802cd32:	681b      	ldr	r3, [r3, #0]
 802cd34:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 802cd36:	697a      	ldr	r2, [r7, #20]
 802cd38:	4b83      	ldr	r3, [pc, #524]	; (802cf48 <HAL_DMA_Init+0x420>)
 802cd3a:	4013      	ands	r3, r2
 802cd3c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 802cd3e:	687b      	ldr	r3, [r7, #4]
 802cd40:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 802cd42:	687b      	ldr	r3, [r7, #4]
 802cd44:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 802cd46:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 802cd48:	687b      	ldr	r3, [r7, #4]
 802cd4a:	691b      	ldr	r3, [r3, #16]
 802cd4c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 802cd4e:	687b      	ldr	r3, [r7, #4]
 802cd50:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 802cd52:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 802cd54:	687b      	ldr	r3, [r7, #4]
 802cd56:	699b      	ldr	r3, [r3, #24]
 802cd58:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 802cd5a:	687b      	ldr	r3, [r7, #4]
 802cd5c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 802cd5e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 802cd60:	687b      	ldr	r3, [r7, #4]
 802cd62:	6a1b      	ldr	r3, [r3, #32]
 802cd64:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 802cd66:	697a      	ldr	r2, [r7, #20]
 802cd68:	4313      	orrs	r3, r2
 802cd6a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 802cd6c:	687b      	ldr	r3, [r7, #4]
 802cd6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802cd70:	2b04      	cmp	r3, #4
 802cd72:	d107      	bne.n	802cd84 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 802cd74:	687b      	ldr	r3, [r7, #4]
 802cd76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802cd78:	687b      	ldr	r3, [r7, #4]
 802cd7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802cd7c:	4313      	orrs	r3, r2
 802cd7e:	697a      	ldr	r2, [r7, #20]
 802cd80:	4313      	orrs	r3, r2
 802cd82:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 802cd84:	4b71      	ldr	r3, [pc, #452]	; (802cf4c <HAL_DMA_Init+0x424>)
 802cd86:	681a      	ldr	r2, [r3, #0]
 802cd88:	4b71      	ldr	r3, [pc, #452]	; (802cf50 <HAL_DMA_Init+0x428>)
 802cd8a:	4013      	ands	r3, r2
 802cd8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 802cd90:	d328      	bcc.n	802cde4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 802cd92:	687b      	ldr	r3, [r7, #4]
 802cd94:	685b      	ldr	r3, [r3, #4]
 802cd96:	2b28      	cmp	r3, #40	; 0x28
 802cd98:	d903      	bls.n	802cda2 <HAL_DMA_Init+0x27a>
 802cd9a:	687b      	ldr	r3, [r7, #4]
 802cd9c:	685b      	ldr	r3, [r3, #4]
 802cd9e:	2b2e      	cmp	r3, #46	; 0x2e
 802cda0:	d917      	bls.n	802cdd2 <HAL_DMA_Init+0x2aa>
 802cda2:	687b      	ldr	r3, [r7, #4]
 802cda4:	685b      	ldr	r3, [r3, #4]
 802cda6:	2b3e      	cmp	r3, #62	; 0x3e
 802cda8:	d903      	bls.n	802cdb2 <HAL_DMA_Init+0x28a>
 802cdaa:	687b      	ldr	r3, [r7, #4]
 802cdac:	685b      	ldr	r3, [r3, #4]
 802cdae:	2b42      	cmp	r3, #66	; 0x42
 802cdb0:	d90f      	bls.n	802cdd2 <HAL_DMA_Init+0x2aa>
 802cdb2:	687b      	ldr	r3, [r7, #4]
 802cdb4:	685b      	ldr	r3, [r3, #4]
 802cdb6:	2b46      	cmp	r3, #70	; 0x46
 802cdb8:	d903      	bls.n	802cdc2 <HAL_DMA_Init+0x29a>
 802cdba:	687b      	ldr	r3, [r7, #4]
 802cdbc:	685b      	ldr	r3, [r3, #4]
 802cdbe:	2b48      	cmp	r3, #72	; 0x48
 802cdc0:	d907      	bls.n	802cdd2 <HAL_DMA_Init+0x2aa>
 802cdc2:	687b      	ldr	r3, [r7, #4]
 802cdc4:	685b      	ldr	r3, [r3, #4]
 802cdc6:	2b4e      	cmp	r3, #78	; 0x4e
 802cdc8:	d905      	bls.n	802cdd6 <HAL_DMA_Init+0x2ae>
 802cdca:	687b      	ldr	r3, [r7, #4]
 802cdcc:	685b      	ldr	r3, [r3, #4]
 802cdce:	2b52      	cmp	r3, #82	; 0x52
 802cdd0:	d801      	bhi.n	802cdd6 <HAL_DMA_Init+0x2ae>
 802cdd2:	2301      	movs	r3, #1
 802cdd4:	e000      	b.n	802cdd8 <HAL_DMA_Init+0x2b0>
 802cdd6:	2300      	movs	r3, #0
 802cdd8:	2b00      	cmp	r3, #0
 802cdda:	d003      	beq.n	802cde4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 802cddc:	697b      	ldr	r3, [r7, #20]
 802cdde:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802cde2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 802cde4:	687b      	ldr	r3, [r7, #4]
 802cde6:	681b      	ldr	r3, [r3, #0]
 802cde8:	697a      	ldr	r2, [r7, #20]
 802cdea:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 802cdec:	687b      	ldr	r3, [r7, #4]
 802cdee:	681b      	ldr	r3, [r3, #0]
 802cdf0:	695b      	ldr	r3, [r3, #20]
 802cdf2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 802cdf4:	697b      	ldr	r3, [r7, #20]
 802cdf6:	f023 0307 	bic.w	r3, r3, #7
 802cdfa:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 802cdfc:	687b      	ldr	r3, [r7, #4]
 802cdfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802ce00:	697a      	ldr	r2, [r7, #20]
 802ce02:	4313      	orrs	r3, r2
 802ce04:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 802ce06:	687b      	ldr	r3, [r7, #4]
 802ce08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802ce0a:	2b04      	cmp	r3, #4
 802ce0c:	d117      	bne.n	802ce3e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 802ce0e:	687b      	ldr	r3, [r7, #4]
 802ce10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802ce12:	697a      	ldr	r2, [r7, #20]
 802ce14:	4313      	orrs	r3, r2
 802ce16:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 802ce18:	687b      	ldr	r3, [r7, #4]
 802ce1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802ce1c:	2b00      	cmp	r3, #0
 802ce1e:	d00e      	beq.n	802ce3e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 802ce20:	6878      	ldr	r0, [r7, #4]
 802ce22:	f002 fb4d 	bl	802f4c0 <DMA_CheckFifoParam>
 802ce26:	4603      	mov	r3, r0
 802ce28:	2b00      	cmp	r3, #0
 802ce2a:	d008      	beq.n	802ce3e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 802ce2c:	687b      	ldr	r3, [r7, #4]
 802ce2e:	2240      	movs	r2, #64	; 0x40
 802ce30:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 802ce32:	687b      	ldr	r3, [r7, #4]
 802ce34:	2201      	movs	r2, #1
 802ce36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 802ce3a:	2301      	movs	r3, #1
 802ce3c:	e197      	b.n	802d16e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 802ce3e:	687b      	ldr	r3, [r7, #4]
 802ce40:	681b      	ldr	r3, [r3, #0]
 802ce42:	697a      	ldr	r2, [r7, #20]
 802ce44:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 802ce46:	6878      	ldr	r0, [r7, #4]
 802ce48:	f002 fa88 	bl	802f35c <DMA_CalcBaseAndBitshift>
 802ce4c:	4603      	mov	r3, r0
 802ce4e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 802ce50:	687b      	ldr	r3, [r7, #4]
 802ce52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802ce54:	f003 031f 	and.w	r3, r3, #31
 802ce58:	223f      	movs	r2, #63	; 0x3f
 802ce5a:	409a      	lsls	r2, r3
 802ce5c:	68bb      	ldr	r3, [r7, #8]
 802ce5e:	609a      	str	r2, [r3, #8]
 802ce60:	e0cd      	b.n	802cffe <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 802ce62:	687b      	ldr	r3, [r7, #4]
 802ce64:	681b      	ldr	r3, [r3, #0]
 802ce66:	4a3b      	ldr	r2, [pc, #236]	; (802cf54 <HAL_DMA_Init+0x42c>)
 802ce68:	4293      	cmp	r3, r2
 802ce6a:	d022      	beq.n	802ceb2 <HAL_DMA_Init+0x38a>
 802ce6c:	687b      	ldr	r3, [r7, #4]
 802ce6e:	681b      	ldr	r3, [r3, #0]
 802ce70:	4a39      	ldr	r2, [pc, #228]	; (802cf58 <HAL_DMA_Init+0x430>)
 802ce72:	4293      	cmp	r3, r2
 802ce74:	d01d      	beq.n	802ceb2 <HAL_DMA_Init+0x38a>
 802ce76:	687b      	ldr	r3, [r7, #4]
 802ce78:	681b      	ldr	r3, [r3, #0]
 802ce7a:	4a38      	ldr	r2, [pc, #224]	; (802cf5c <HAL_DMA_Init+0x434>)
 802ce7c:	4293      	cmp	r3, r2
 802ce7e:	d018      	beq.n	802ceb2 <HAL_DMA_Init+0x38a>
 802ce80:	687b      	ldr	r3, [r7, #4]
 802ce82:	681b      	ldr	r3, [r3, #0]
 802ce84:	4a36      	ldr	r2, [pc, #216]	; (802cf60 <HAL_DMA_Init+0x438>)
 802ce86:	4293      	cmp	r3, r2
 802ce88:	d013      	beq.n	802ceb2 <HAL_DMA_Init+0x38a>
 802ce8a:	687b      	ldr	r3, [r7, #4]
 802ce8c:	681b      	ldr	r3, [r3, #0]
 802ce8e:	4a35      	ldr	r2, [pc, #212]	; (802cf64 <HAL_DMA_Init+0x43c>)
 802ce90:	4293      	cmp	r3, r2
 802ce92:	d00e      	beq.n	802ceb2 <HAL_DMA_Init+0x38a>
 802ce94:	687b      	ldr	r3, [r7, #4]
 802ce96:	681b      	ldr	r3, [r3, #0]
 802ce98:	4a33      	ldr	r2, [pc, #204]	; (802cf68 <HAL_DMA_Init+0x440>)
 802ce9a:	4293      	cmp	r3, r2
 802ce9c:	d009      	beq.n	802ceb2 <HAL_DMA_Init+0x38a>
 802ce9e:	687b      	ldr	r3, [r7, #4]
 802cea0:	681b      	ldr	r3, [r3, #0]
 802cea2:	4a32      	ldr	r2, [pc, #200]	; (802cf6c <HAL_DMA_Init+0x444>)
 802cea4:	4293      	cmp	r3, r2
 802cea6:	d004      	beq.n	802ceb2 <HAL_DMA_Init+0x38a>
 802cea8:	687b      	ldr	r3, [r7, #4]
 802ceaa:	681b      	ldr	r3, [r3, #0]
 802ceac:	4a30      	ldr	r2, [pc, #192]	; (802cf70 <HAL_DMA_Init+0x448>)
 802ceae:	4293      	cmp	r3, r2
 802ceb0:	d101      	bne.n	802ceb6 <HAL_DMA_Init+0x38e>
 802ceb2:	2301      	movs	r3, #1
 802ceb4:	e000      	b.n	802ceb8 <HAL_DMA_Init+0x390>
 802ceb6:	2300      	movs	r3, #0
 802ceb8:	2b00      	cmp	r3, #0
 802ceba:	f000 8097 	beq.w	802cfec <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 802cebe:	687b      	ldr	r3, [r7, #4]
 802cec0:	681b      	ldr	r3, [r3, #0]
 802cec2:	4a24      	ldr	r2, [pc, #144]	; (802cf54 <HAL_DMA_Init+0x42c>)
 802cec4:	4293      	cmp	r3, r2
 802cec6:	d021      	beq.n	802cf0c <HAL_DMA_Init+0x3e4>
 802cec8:	687b      	ldr	r3, [r7, #4]
 802ceca:	681b      	ldr	r3, [r3, #0]
 802cecc:	4a22      	ldr	r2, [pc, #136]	; (802cf58 <HAL_DMA_Init+0x430>)
 802cece:	4293      	cmp	r3, r2
 802ced0:	d01c      	beq.n	802cf0c <HAL_DMA_Init+0x3e4>
 802ced2:	687b      	ldr	r3, [r7, #4]
 802ced4:	681b      	ldr	r3, [r3, #0]
 802ced6:	4a21      	ldr	r2, [pc, #132]	; (802cf5c <HAL_DMA_Init+0x434>)
 802ced8:	4293      	cmp	r3, r2
 802ceda:	d017      	beq.n	802cf0c <HAL_DMA_Init+0x3e4>
 802cedc:	687b      	ldr	r3, [r7, #4]
 802cede:	681b      	ldr	r3, [r3, #0]
 802cee0:	4a1f      	ldr	r2, [pc, #124]	; (802cf60 <HAL_DMA_Init+0x438>)
 802cee2:	4293      	cmp	r3, r2
 802cee4:	d012      	beq.n	802cf0c <HAL_DMA_Init+0x3e4>
 802cee6:	687b      	ldr	r3, [r7, #4]
 802cee8:	681b      	ldr	r3, [r3, #0]
 802ceea:	4a1e      	ldr	r2, [pc, #120]	; (802cf64 <HAL_DMA_Init+0x43c>)
 802ceec:	4293      	cmp	r3, r2
 802ceee:	d00d      	beq.n	802cf0c <HAL_DMA_Init+0x3e4>
 802cef0:	687b      	ldr	r3, [r7, #4]
 802cef2:	681b      	ldr	r3, [r3, #0]
 802cef4:	4a1c      	ldr	r2, [pc, #112]	; (802cf68 <HAL_DMA_Init+0x440>)
 802cef6:	4293      	cmp	r3, r2
 802cef8:	d008      	beq.n	802cf0c <HAL_DMA_Init+0x3e4>
 802cefa:	687b      	ldr	r3, [r7, #4]
 802cefc:	681b      	ldr	r3, [r3, #0]
 802cefe:	4a1b      	ldr	r2, [pc, #108]	; (802cf6c <HAL_DMA_Init+0x444>)
 802cf00:	4293      	cmp	r3, r2
 802cf02:	d003      	beq.n	802cf0c <HAL_DMA_Init+0x3e4>
 802cf04:	687b      	ldr	r3, [r7, #4]
 802cf06:	681b      	ldr	r3, [r3, #0]
 802cf08:	4a19      	ldr	r2, [pc, #100]	; (802cf70 <HAL_DMA_Init+0x448>)
 802cf0a:	4293      	cmp	r3, r2
 802cf0c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 802cf0e:	687b      	ldr	r3, [r7, #4]
 802cf10:	2202      	movs	r2, #2
 802cf12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 802cf16:	687b      	ldr	r3, [r7, #4]
 802cf18:	2200      	movs	r2, #0
 802cf1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 802cf1e:	687b      	ldr	r3, [r7, #4]
 802cf20:	681b      	ldr	r3, [r3, #0]
 802cf22:	681b      	ldr	r3, [r3, #0]
 802cf24:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 802cf26:	697a      	ldr	r2, [r7, #20]
 802cf28:	4b12      	ldr	r3, [pc, #72]	; (802cf74 <HAL_DMA_Init+0x44c>)
 802cf2a:	4013      	ands	r3, r2
 802cf2c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 802cf2e:	687b      	ldr	r3, [r7, #4]
 802cf30:	689b      	ldr	r3, [r3, #8]
 802cf32:	2b40      	cmp	r3, #64	; 0x40
 802cf34:	d020      	beq.n	802cf78 <HAL_DMA_Init+0x450>
 802cf36:	687b      	ldr	r3, [r7, #4]
 802cf38:	689b      	ldr	r3, [r3, #8]
 802cf3a:	2b80      	cmp	r3, #128	; 0x80
 802cf3c:	d102      	bne.n	802cf44 <HAL_DMA_Init+0x41c>
 802cf3e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 802cf42:	e01a      	b.n	802cf7a <HAL_DMA_Init+0x452>
 802cf44:	2300      	movs	r3, #0
 802cf46:	e018      	b.n	802cf7a <HAL_DMA_Init+0x452>
 802cf48:	fe10803f 	.word	0xfe10803f
 802cf4c:	5c001000 	.word	0x5c001000
 802cf50:	ffff0000 	.word	0xffff0000
 802cf54:	58025408 	.word	0x58025408
 802cf58:	5802541c 	.word	0x5802541c
 802cf5c:	58025430 	.word	0x58025430
 802cf60:	58025444 	.word	0x58025444
 802cf64:	58025458 	.word	0x58025458
 802cf68:	5802546c 	.word	0x5802546c
 802cf6c:	58025480 	.word	0x58025480
 802cf70:	58025494 	.word	0x58025494
 802cf74:	fffe000f 	.word	0xfffe000f
 802cf78:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 802cf7a:	687a      	ldr	r2, [r7, #4]
 802cf7c:	68d2      	ldr	r2, [r2, #12]
 802cf7e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 802cf80:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 802cf82:	687b      	ldr	r3, [r7, #4]
 802cf84:	691b      	ldr	r3, [r3, #16]
 802cf86:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 802cf88:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 802cf8a:	687b      	ldr	r3, [r7, #4]
 802cf8c:	695b      	ldr	r3, [r3, #20]
 802cf8e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 802cf90:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 802cf92:	687b      	ldr	r3, [r7, #4]
 802cf94:	699b      	ldr	r3, [r3, #24]
 802cf96:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 802cf98:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 802cf9a:	687b      	ldr	r3, [r7, #4]
 802cf9c:	69db      	ldr	r3, [r3, #28]
 802cf9e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 802cfa0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 802cfa2:	687b      	ldr	r3, [r7, #4]
 802cfa4:	6a1b      	ldr	r3, [r3, #32]
 802cfa6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 802cfa8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 802cfaa:	697a      	ldr	r2, [r7, #20]
 802cfac:	4313      	orrs	r3, r2
 802cfae:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 802cfb0:	687b      	ldr	r3, [r7, #4]
 802cfb2:	681b      	ldr	r3, [r3, #0]
 802cfb4:	697a      	ldr	r2, [r7, #20]
 802cfb6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 802cfb8:	687b      	ldr	r3, [r7, #4]
 802cfba:	681b      	ldr	r3, [r3, #0]
 802cfbc:	461a      	mov	r2, r3
 802cfbe:	4b6e      	ldr	r3, [pc, #440]	; (802d178 <HAL_DMA_Init+0x650>)
 802cfc0:	4413      	add	r3, r2
 802cfc2:	4a6e      	ldr	r2, [pc, #440]	; (802d17c <HAL_DMA_Init+0x654>)
 802cfc4:	fba2 2303 	umull	r2, r3, r2, r3
 802cfc8:	091b      	lsrs	r3, r3, #4
 802cfca:	009a      	lsls	r2, r3, #2
 802cfcc:	687b      	ldr	r3, [r7, #4]
 802cfce:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 802cfd0:	6878      	ldr	r0, [r7, #4]
 802cfd2:	f002 f9c3 	bl	802f35c <DMA_CalcBaseAndBitshift>
 802cfd6:	4603      	mov	r3, r0
 802cfd8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 802cfda:	687b      	ldr	r3, [r7, #4]
 802cfdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802cfde:	f003 031f 	and.w	r3, r3, #31
 802cfe2:	2201      	movs	r2, #1
 802cfe4:	409a      	lsls	r2, r3
 802cfe6:	68fb      	ldr	r3, [r7, #12]
 802cfe8:	605a      	str	r2, [r3, #4]
 802cfea:	e008      	b.n	802cffe <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 802cfec:	687b      	ldr	r3, [r7, #4]
 802cfee:	2240      	movs	r2, #64	; 0x40
 802cff0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 802cff2:	687b      	ldr	r3, [r7, #4]
 802cff4:	2203      	movs	r2, #3
 802cff6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 802cffa:	2301      	movs	r3, #1
 802cffc:	e0b7      	b.n	802d16e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 802cffe:	687b      	ldr	r3, [r7, #4]
 802d000:	681b      	ldr	r3, [r3, #0]
 802d002:	4a5f      	ldr	r2, [pc, #380]	; (802d180 <HAL_DMA_Init+0x658>)
 802d004:	4293      	cmp	r3, r2
 802d006:	d072      	beq.n	802d0ee <HAL_DMA_Init+0x5c6>
 802d008:	687b      	ldr	r3, [r7, #4]
 802d00a:	681b      	ldr	r3, [r3, #0]
 802d00c:	4a5d      	ldr	r2, [pc, #372]	; (802d184 <HAL_DMA_Init+0x65c>)
 802d00e:	4293      	cmp	r3, r2
 802d010:	d06d      	beq.n	802d0ee <HAL_DMA_Init+0x5c6>
 802d012:	687b      	ldr	r3, [r7, #4]
 802d014:	681b      	ldr	r3, [r3, #0]
 802d016:	4a5c      	ldr	r2, [pc, #368]	; (802d188 <HAL_DMA_Init+0x660>)
 802d018:	4293      	cmp	r3, r2
 802d01a:	d068      	beq.n	802d0ee <HAL_DMA_Init+0x5c6>
 802d01c:	687b      	ldr	r3, [r7, #4]
 802d01e:	681b      	ldr	r3, [r3, #0]
 802d020:	4a5a      	ldr	r2, [pc, #360]	; (802d18c <HAL_DMA_Init+0x664>)
 802d022:	4293      	cmp	r3, r2
 802d024:	d063      	beq.n	802d0ee <HAL_DMA_Init+0x5c6>
 802d026:	687b      	ldr	r3, [r7, #4]
 802d028:	681b      	ldr	r3, [r3, #0]
 802d02a:	4a59      	ldr	r2, [pc, #356]	; (802d190 <HAL_DMA_Init+0x668>)
 802d02c:	4293      	cmp	r3, r2
 802d02e:	d05e      	beq.n	802d0ee <HAL_DMA_Init+0x5c6>
 802d030:	687b      	ldr	r3, [r7, #4]
 802d032:	681b      	ldr	r3, [r3, #0]
 802d034:	4a57      	ldr	r2, [pc, #348]	; (802d194 <HAL_DMA_Init+0x66c>)
 802d036:	4293      	cmp	r3, r2
 802d038:	d059      	beq.n	802d0ee <HAL_DMA_Init+0x5c6>
 802d03a:	687b      	ldr	r3, [r7, #4]
 802d03c:	681b      	ldr	r3, [r3, #0]
 802d03e:	4a56      	ldr	r2, [pc, #344]	; (802d198 <HAL_DMA_Init+0x670>)
 802d040:	4293      	cmp	r3, r2
 802d042:	d054      	beq.n	802d0ee <HAL_DMA_Init+0x5c6>
 802d044:	687b      	ldr	r3, [r7, #4]
 802d046:	681b      	ldr	r3, [r3, #0]
 802d048:	4a54      	ldr	r2, [pc, #336]	; (802d19c <HAL_DMA_Init+0x674>)
 802d04a:	4293      	cmp	r3, r2
 802d04c:	d04f      	beq.n	802d0ee <HAL_DMA_Init+0x5c6>
 802d04e:	687b      	ldr	r3, [r7, #4]
 802d050:	681b      	ldr	r3, [r3, #0]
 802d052:	4a53      	ldr	r2, [pc, #332]	; (802d1a0 <HAL_DMA_Init+0x678>)
 802d054:	4293      	cmp	r3, r2
 802d056:	d04a      	beq.n	802d0ee <HAL_DMA_Init+0x5c6>
 802d058:	687b      	ldr	r3, [r7, #4]
 802d05a:	681b      	ldr	r3, [r3, #0]
 802d05c:	4a51      	ldr	r2, [pc, #324]	; (802d1a4 <HAL_DMA_Init+0x67c>)
 802d05e:	4293      	cmp	r3, r2
 802d060:	d045      	beq.n	802d0ee <HAL_DMA_Init+0x5c6>
 802d062:	687b      	ldr	r3, [r7, #4]
 802d064:	681b      	ldr	r3, [r3, #0]
 802d066:	4a50      	ldr	r2, [pc, #320]	; (802d1a8 <HAL_DMA_Init+0x680>)
 802d068:	4293      	cmp	r3, r2
 802d06a:	d040      	beq.n	802d0ee <HAL_DMA_Init+0x5c6>
 802d06c:	687b      	ldr	r3, [r7, #4]
 802d06e:	681b      	ldr	r3, [r3, #0]
 802d070:	4a4e      	ldr	r2, [pc, #312]	; (802d1ac <HAL_DMA_Init+0x684>)
 802d072:	4293      	cmp	r3, r2
 802d074:	d03b      	beq.n	802d0ee <HAL_DMA_Init+0x5c6>
 802d076:	687b      	ldr	r3, [r7, #4]
 802d078:	681b      	ldr	r3, [r3, #0]
 802d07a:	4a4d      	ldr	r2, [pc, #308]	; (802d1b0 <HAL_DMA_Init+0x688>)
 802d07c:	4293      	cmp	r3, r2
 802d07e:	d036      	beq.n	802d0ee <HAL_DMA_Init+0x5c6>
 802d080:	687b      	ldr	r3, [r7, #4]
 802d082:	681b      	ldr	r3, [r3, #0]
 802d084:	4a4b      	ldr	r2, [pc, #300]	; (802d1b4 <HAL_DMA_Init+0x68c>)
 802d086:	4293      	cmp	r3, r2
 802d088:	d031      	beq.n	802d0ee <HAL_DMA_Init+0x5c6>
 802d08a:	687b      	ldr	r3, [r7, #4]
 802d08c:	681b      	ldr	r3, [r3, #0]
 802d08e:	4a4a      	ldr	r2, [pc, #296]	; (802d1b8 <HAL_DMA_Init+0x690>)
 802d090:	4293      	cmp	r3, r2
 802d092:	d02c      	beq.n	802d0ee <HAL_DMA_Init+0x5c6>
 802d094:	687b      	ldr	r3, [r7, #4]
 802d096:	681b      	ldr	r3, [r3, #0]
 802d098:	4a48      	ldr	r2, [pc, #288]	; (802d1bc <HAL_DMA_Init+0x694>)
 802d09a:	4293      	cmp	r3, r2
 802d09c:	d027      	beq.n	802d0ee <HAL_DMA_Init+0x5c6>
 802d09e:	687b      	ldr	r3, [r7, #4]
 802d0a0:	681b      	ldr	r3, [r3, #0]
 802d0a2:	4a47      	ldr	r2, [pc, #284]	; (802d1c0 <HAL_DMA_Init+0x698>)
 802d0a4:	4293      	cmp	r3, r2
 802d0a6:	d022      	beq.n	802d0ee <HAL_DMA_Init+0x5c6>
 802d0a8:	687b      	ldr	r3, [r7, #4]
 802d0aa:	681b      	ldr	r3, [r3, #0]
 802d0ac:	4a45      	ldr	r2, [pc, #276]	; (802d1c4 <HAL_DMA_Init+0x69c>)
 802d0ae:	4293      	cmp	r3, r2
 802d0b0:	d01d      	beq.n	802d0ee <HAL_DMA_Init+0x5c6>
 802d0b2:	687b      	ldr	r3, [r7, #4]
 802d0b4:	681b      	ldr	r3, [r3, #0]
 802d0b6:	4a44      	ldr	r2, [pc, #272]	; (802d1c8 <HAL_DMA_Init+0x6a0>)
 802d0b8:	4293      	cmp	r3, r2
 802d0ba:	d018      	beq.n	802d0ee <HAL_DMA_Init+0x5c6>
 802d0bc:	687b      	ldr	r3, [r7, #4]
 802d0be:	681b      	ldr	r3, [r3, #0]
 802d0c0:	4a42      	ldr	r2, [pc, #264]	; (802d1cc <HAL_DMA_Init+0x6a4>)
 802d0c2:	4293      	cmp	r3, r2
 802d0c4:	d013      	beq.n	802d0ee <HAL_DMA_Init+0x5c6>
 802d0c6:	687b      	ldr	r3, [r7, #4]
 802d0c8:	681b      	ldr	r3, [r3, #0]
 802d0ca:	4a41      	ldr	r2, [pc, #260]	; (802d1d0 <HAL_DMA_Init+0x6a8>)
 802d0cc:	4293      	cmp	r3, r2
 802d0ce:	d00e      	beq.n	802d0ee <HAL_DMA_Init+0x5c6>
 802d0d0:	687b      	ldr	r3, [r7, #4]
 802d0d2:	681b      	ldr	r3, [r3, #0]
 802d0d4:	4a3f      	ldr	r2, [pc, #252]	; (802d1d4 <HAL_DMA_Init+0x6ac>)
 802d0d6:	4293      	cmp	r3, r2
 802d0d8:	d009      	beq.n	802d0ee <HAL_DMA_Init+0x5c6>
 802d0da:	687b      	ldr	r3, [r7, #4]
 802d0dc:	681b      	ldr	r3, [r3, #0]
 802d0de:	4a3e      	ldr	r2, [pc, #248]	; (802d1d8 <HAL_DMA_Init+0x6b0>)
 802d0e0:	4293      	cmp	r3, r2
 802d0e2:	d004      	beq.n	802d0ee <HAL_DMA_Init+0x5c6>
 802d0e4:	687b      	ldr	r3, [r7, #4]
 802d0e6:	681b      	ldr	r3, [r3, #0]
 802d0e8:	4a3c      	ldr	r2, [pc, #240]	; (802d1dc <HAL_DMA_Init+0x6b4>)
 802d0ea:	4293      	cmp	r3, r2
 802d0ec:	d101      	bne.n	802d0f2 <HAL_DMA_Init+0x5ca>
 802d0ee:	2301      	movs	r3, #1
 802d0f0:	e000      	b.n	802d0f4 <HAL_DMA_Init+0x5cc>
 802d0f2:	2300      	movs	r3, #0
 802d0f4:	2b00      	cmp	r3, #0
 802d0f6:	d032      	beq.n	802d15e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 802d0f8:	6878      	ldr	r0, [r7, #4]
 802d0fa:	f002 fa5d 	bl	802f5b8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 802d0fe:	687b      	ldr	r3, [r7, #4]
 802d100:	689b      	ldr	r3, [r3, #8]
 802d102:	2b80      	cmp	r3, #128	; 0x80
 802d104:	d102      	bne.n	802d10c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 802d106:	687b      	ldr	r3, [r7, #4]
 802d108:	2200      	movs	r2, #0
 802d10a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 802d10c:	687b      	ldr	r3, [r7, #4]
 802d10e:	685a      	ldr	r2, [r3, #4]
 802d110:	687b      	ldr	r3, [r7, #4]
 802d112:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802d114:	b2d2      	uxtb	r2, r2
 802d116:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 802d118:	687b      	ldr	r3, [r7, #4]
 802d11a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802d11c:	687a      	ldr	r2, [r7, #4]
 802d11e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 802d120:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 802d122:	687b      	ldr	r3, [r7, #4]
 802d124:	685b      	ldr	r3, [r3, #4]
 802d126:	2b00      	cmp	r3, #0
 802d128:	d010      	beq.n	802d14c <HAL_DMA_Init+0x624>
 802d12a:	687b      	ldr	r3, [r7, #4]
 802d12c:	685b      	ldr	r3, [r3, #4]
 802d12e:	2b08      	cmp	r3, #8
 802d130:	d80c      	bhi.n	802d14c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 802d132:	6878      	ldr	r0, [r7, #4]
 802d134:	f002 fada 	bl	802f6ec <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 802d138:	687b      	ldr	r3, [r7, #4]
 802d13a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802d13c:	2200      	movs	r2, #0
 802d13e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 802d140:	687b      	ldr	r3, [r7, #4]
 802d142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802d144:	687a      	ldr	r2, [r7, #4]
 802d146:	6f52      	ldr	r2, [r2, #116]	; 0x74
 802d148:	605a      	str	r2, [r3, #4]
 802d14a:	e008      	b.n	802d15e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 802d14c:	687b      	ldr	r3, [r7, #4]
 802d14e:	2200      	movs	r2, #0
 802d150:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 802d152:	687b      	ldr	r3, [r7, #4]
 802d154:	2200      	movs	r2, #0
 802d156:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 802d158:	687b      	ldr	r3, [r7, #4]
 802d15a:	2200      	movs	r2, #0
 802d15c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 802d15e:	687b      	ldr	r3, [r7, #4]
 802d160:	2200      	movs	r2, #0
 802d162:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 802d164:	687b      	ldr	r3, [r7, #4]
 802d166:	2201      	movs	r2, #1
 802d168:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 802d16c:	2300      	movs	r3, #0
}
 802d16e:	4618      	mov	r0, r3
 802d170:	3718      	adds	r7, #24
 802d172:	46bd      	mov	sp, r7
 802d174:	bd80      	pop	{r7, pc}
 802d176:	bf00      	nop
 802d178:	a7fdabf8 	.word	0xa7fdabf8
 802d17c:	cccccccd 	.word	0xcccccccd
 802d180:	40020010 	.word	0x40020010
 802d184:	40020028 	.word	0x40020028
 802d188:	40020040 	.word	0x40020040
 802d18c:	40020058 	.word	0x40020058
 802d190:	40020070 	.word	0x40020070
 802d194:	40020088 	.word	0x40020088
 802d198:	400200a0 	.word	0x400200a0
 802d19c:	400200b8 	.word	0x400200b8
 802d1a0:	40020410 	.word	0x40020410
 802d1a4:	40020428 	.word	0x40020428
 802d1a8:	40020440 	.word	0x40020440
 802d1ac:	40020458 	.word	0x40020458
 802d1b0:	40020470 	.word	0x40020470
 802d1b4:	40020488 	.word	0x40020488
 802d1b8:	400204a0 	.word	0x400204a0
 802d1bc:	400204b8 	.word	0x400204b8
 802d1c0:	58025408 	.word	0x58025408
 802d1c4:	5802541c 	.word	0x5802541c
 802d1c8:	58025430 	.word	0x58025430
 802d1cc:	58025444 	.word	0x58025444
 802d1d0:	58025458 	.word	0x58025458
 802d1d4:	5802546c 	.word	0x5802546c
 802d1d8:	58025480 	.word	0x58025480
 802d1dc:	58025494 	.word	0x58025494

0802d1e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 802d1e0:	b580      	push	{r7, lr}
 802d1e2:	b086      	sub	sp, #24
 802d1e4:	af00      	add	r7, sp, #0
 802d1e6:	60f8      	str	r0, [r7, #12]
 802d1e8:	60b9      	str	r1, [r7, #8]
 802d1ea:	607a      	str	r2, [r7, #4]
 802d1ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 802d1ee:	2300      	movs	r3, #0
 802d1f0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 802d1f2:	68fb      	ldr	r3, [r7, #12]
 802d1f4:	2b00      	cmp	r3, #0
 802d1f6:	d101      	bne.n	802d1fc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 802d1f8:	2301      	movs	r3, #1
 802d1fa:	e226      	b.n	802d64a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 802d1fc:	68fb      	ldr	r3, [r7, #12]
 802d1fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 802d202:	2b01      	cmp	r3, #1
 802d204:	d101      	bne.n	802d20a <HAL_DMA_Start_IT+0x2a>
 802d206:	2302      	movs	r3, #2
 802d208:	e21f      	b.n	802d64a <HAL_DMA_Start_IT+0x46a>
 802d20a:	68fb      	ldr	r3, [r7, #12]
 802d20c:	2201      	movs	r2, #1
 802d20e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 802d212:	68fb      	ldr	r3, [r7, #12]
 802d214:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 802d218:	b2db      	uxtb	r3, r3
 802d21a:	2b01      	cmp	r3, #1
 802d21c:	f040 820a 	bne.w	802d634 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 802d220:	68fb      	ldr	r3, [r7, #12]
 802d222:	2202      	movs	r2, #2
 802d224:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 802d228:	68fb      	ldr	r3, [r7, #12]
 802d22a:	2200      	movs	r2, #0
 802d22c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 802d22e:	68fb      	ldr	r3, [r7, #12]
 802d230:	681b      	ldr	r3, [r3, #0]
 802d232:	4a68      	ldr	r2, [pc, #416]	; (802d3d4 <HAL_DMA_Start_IT+0x1f4>)
 802d234:	4293      	cmp	r3, r2
 802d236:	d04a      	beq.n	802d2ce <HAL_DMA_Start_IT+0xee>
 802d238:	68fb      	ldr	r3, [r7, #12]
 802d23a:	681b      	ldr	r3, [r3, #0]
 802d23c:	4a66      	ldr	r2, [pc, #408]	; (802d3d8 <HAL_DMA_Start_IT+0x1f8>)
 802d23e:	4293      	cmp	r3, r2
 802d240:	d045      	beq.n	802d2ce <HAL_DMA_Start_IT+0xee>
 802d242:	68fb      	ldr	r3, [r7, #12]
 802d244:	681b      	ldr	r3, [r3, #0]
 802d246:	4a65      	ldr	r2, [pc, #404]	; (802d3dc <HAL_DMA_Start_IT+0x1fc>)
 802d248:	4293      	cmp	r3, r2
 802d24a:	d040      	beq.n	802d2ce <HAL_DMA_Start_IT+0xee>
 802d24c:	68fb      	ldr	r3, [r7, #12]
 802d24e:	681b      	ldr	r3, [r3, #0]
 802d250:	4a63      	ldr	r2, [pc, #396]	; (802d3e0 <HAL_DMA_Start_IT+0x200>)
 802d252:	4293      	cmp	r3, r2
 802d254:	d03b      	beq.n	802d2ce <HAL_DMA_Start_IT+0xee>
 802d256:	68fb      	ldr	r3, [r7, #12]
 802d258:	681b      	ldr	r3, [r3, #0]
 802d25a:	4a62      	ldr	r2, [pc, #392]	; (802d3e4 <HAL_DMA_Start_IT+0x204>)
 802d25c:	4293      	cmp	r3, r2
 802d25e:	d036      	beq.n	802d2ce <HAL_DMA_Start_IT+0xee>
 802d260:	68fb      	ldr	r3, [r7, #12]
 802d262:	681b      	ldr	r3, [r3, #0]
 802d264:	4a60      	ldr	r2, [pc, #384]	; (802d3e8 <HAL_DMA_Start_IT+0x208>)
 802d266:	4293      	cmp	r3, r2
 802d268:	d031      	beq.n	802d2ce <HAL_DMA_Start_IT+0xee>
 802d26a:	68fb      	ldr	r3, [r7, #12]
 802d26c:	681b      	ldr	r3, [r3, #0]
 802d26e:	4a5f      	ldr	r2, [pc, #380]	; (802d3ec <HAL_DMA_Start_IT+0x20c>)
 802d270:	4293      	cmp	r3, r2
 802d272:	d02c      	beq.n	802d2ce <HAL_DMA_Start_IT+0xee>
 802d274:	68fb      	ldr	r3, [r7, #12]
 802d276:	681b      	ldr	r3, [r3, #0]
 802d278:	4a5d      	ldr	r2, [pc, #372]	; (802d3f0 <HAL_DMA_Start_IT+0x210>)
 802d27a:	4293      	cmp	r3, r2
 802d27c:	d027      	beq.n	802d2ce <HAL_DMA_Start_IT+0xee>
 802d27e:	68fb      	ldr	r3, [r7, #12]
 802d280:	681b      	ldr	r3, [r3, #0]
 802d282:	4a5c      	ldr	r2, [pc, #368]	; (802d3f4 <HAL_DMA_Start_IT+0x214>)
 802d284:	4293      	cmp	r3, r2
 802d286:	d022      	beq.n	802d2ce <HAL_DMA_Start_IT+0xee>
 802d288:	68fb      	ldr	r3, [r7, #12]
 802d28a:	681b      	ldr	r3, [r3, #0]
 802d28c:	4a5a      	ldr	r2, [pc, #360]	; (802d3f8 <HAL_DMA_Start_IT+0x218>)
 802d28e:	4293      	cmp	r3, r2
 802d290:	d01d      	beq.n	802d2ce <HAL_DMA_Start_IT+0xee>
 802d292:	68fb      	ldr	r3, [r7, #12]
 802d294:	681b      	ldr	r3, [r3, #0]
 802d296:	4a59      	ldr	r2, [pc, #356]	; (802d3fc <HAL_DMA_Start_IT+0x21c>)
 802d298:	4293      	cmp	r3, r2
 802d29a:	d018      	beq.n	802d2ce <HAL_DMA_Start_IT+0xee>
 802d29c:	68fb      	ldr	r3, [r7, #12]
 802d29e:	681b      	ldr	r3, [r3, #0]
 802d2a0:	4a57      	ldr	r2, [pc, #348]	; (802d400 <HAL_DMA_Start_IT+0x220>)
 802d2a2:	4293      	cmp	r3, r2
 802d2a4:	d013      	beq.n	802d2ce <HAL_DMA_Start_IT+0xee>
 802d2a6:	68fb      	ldr	r3, [r7, #12]
 802d2a8:	681b      	ldr	r3, [r3, #0]
 802d2aa:	4a56      	ldr	r2, [pc, #344]	; (802d404 <HAL_DMA_Start_IT+0x224>)
 802d2ac:	4293      	cmp	r3, r2
 802d2ae:	d00e      	beq.n	802d2ce <HAL_DMA_Start_IT+0xee>
 802d2b0:	68fb      	ldr	r3, [r7, #12]
 802d2b2:	681b      	ldr	r3, [r3, #0]
 802d2b4:	4a54      	ldr	r2, [pc, #336]	; (802d408 <HAL_DMA_Start_IT+0x228>)
 802d2b6:	4293      	cmp	r3, r2
 802d2b8:	d009      	beq.n	802d2ce <HAL_DMA_Start_IT+0xee>
 802d2ba:	68fb      	ldr	r3, [r7, #12]
 802d2bc:	681b      	ldr	r3, [r3, #0]
 802d2be:	4a53      	ldr	r2, [pc, #332]	; (802d40c <HAL_DMA_Start_IT+0x22c>)
 802d2c0:	4293      	cmp	r3, r2
 802d2c2:	d004      	beq.n	802d2ce <HAL_DMA_Start_IT+0xee>
 802d2c4:	68fb      	ldr	r3, [r7, #12]
 802d2c6:	681b      	ldr	r3, [r3, #0]
 802d2c8:	4a51      	ldr	r2, [pc, #324]	; (802d410 <HAL_DMA_Start_IT+0x230>)
 802d2ca:	4293      	cmp	r3, r2
 802d2cc:	d108      	bne.n	802d2e0 <HAL_DMA_Start_IT+0x100>
 802d2ce:	68fb      	ldr	r3, [r7, #12]
 802d2d0:	681b      	ldr	r3, [r3, #0]
 802d2d2:	681a      	ldr	r2, [r3, #0]
 802d2d4:	68fb      	ldr	r3, [r7, #12]
 802d2d6:	681b      	ldr	r3, [r3, #0]
 802d2d8:	f022 0201 	bic.w	r2, r2, #1
 802d2dc:	601a      	str	r2, [r3, #0]
 802d2de:	e007      	b.n	802d2f0 <HAL_DMA_Start_IT+0x110>
 802d2e0:	68fb      	ldr	r3, [r7, #12]
 802d2e2:	681b      	ldr	r3, [r3, #0]
 802d2e4:	681a      	ldr	r2, [r3, #0]
 802d2e6:	68fb      	ldr	r3, [r7, #12]
 802d2e8:	681b      	ldr	r3, [r3, #0]
 802d2ea:	f022 0201 	bic.w	r2, r2, #1
 802d2ee:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 802d2f0:	683b      	ldr	r3, [r7, #0]
 802d2f2:	687a      	ldr	r2, [r7, #4]
 802d2f4:	68b9      	ldr	r1, [r7, #8]
 802d2f6:	68f8      	ldr	r0, [r7, #12]
 802d2f8:	f001 fe84 	bl	802f004 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 802d2fc:	68fb      	ldr	r3, [r7, #12]
 802d2fe:	681b      	ldr	r3, [r3, #0]
 802d300:	4a34      	ldr	r2, [pc, #208]	; (802d3d4 <HAL_DMA_Start_IT+0x1f4>)
 802d302:	4293      	cmp	r3, r2
 802d304:	d04a      	beq.n	802d39c <HAL_DMA_Start_IT+0x1bc>
 802d306:	68fb      	ldr	r3, [r7, #12]
 802d308:	681b      	ldr	r3, [r3, #0]
 802d30a:	4a33      	ldr	r2, [pc, #204]	; (802d3d8 <HAL_DMA_Start_IT+0x1f8>)
 802d30c:	4293      	cmp	r3, r2
 802d30e:	d045      	beq.n	802d39c <HAL_DMA_Start_IT+0x1bc>
 802d310:	68fb      	ldr	r3, [r7, #12]
 802d312:	681b      	ldr	r3, [r3, #0]
 802d314:	4a31      	ldr	r2, [pc, #196]	; (802d3dc <HAL_DMA_Start_IT+0x1fc>)
 802d316:	4293      	cmp	r3, r2
 802d318:	d040      	beq.n	802d39c <HAL_DMA_Start_IT+0x1bc>
 802d31a:	68fb      	ldr	r3, [r7, #12]
 802d31c:	681b      	ldr	r3, [r3, #0]
 802d31e:	4a30      	ldr	r2, [pc, #192]	; (802d3e0 <HAL_DMA_Start_IT+0x200>)
 802d320:	4293      	cmp	r3, r2
 802d322:	d03b      	beq.n	802d39c <HAL_DMA_Start_IT+0x1bc>
 802d324:	68fb      	ldr	r3, [r7, #12]
 802d326:	681b      	ldr	r3, [r3, #0]
 802d328:	4a2e      	ldr	r2, [pc, #184]	; (802d3e4 <HAL_DMA_Start_IT+0x204>)
 802d32a:	4293      	cmp	r3, r2
 802d32c:	d036      	beq.n	802d39c <HAL_DMA_Start_IT+0x1bc>
 802d32e:	68fb      	ldr	r3, [r7, #12]
 802d330:	681b      	ldr	r3, [r3, #0]
 802d332:	4a2d      	ldr	r2, [pc, #180]	; (802d3e8 <HAL_DMA_Start_IT+0x208>)
 802d334:	4293      	cmp	r3, r2
 802d336:	d031      	beq.n	802d39c <HAL_DMA_Start_IT+0x1bc>
 802d338:	68fb      	ldr	r3, [r7, #12]
 802d33a:	681b      	ldr	r3, [r3, #0]
 802d33c:	4a2b      	ldr	r2, [pc, #172]	; (802d3ec <HAL_DMA_Start_IT+0x20c>)
 802d33e:	4293      	cmp	r3, r2
 802d340:	d02c      	beq.n	802d39c <HAL_DMA_Start_IT+0x1bc>
 802d342:	68fb      	ldr	r3, [r7, #12]
 802d344:	681b      	ldr	r3, [r3, #0]
 802d346:	4a2a      	ldr	r2, [pc, #168]	; (802d3f0 <HAL_DMA_Start_IT+0x210>)
 802d348:	4293      	cmp	r3, r2
 802d34a:	d027      	beq.n	802d39c <HAL_DMA_Start_IT+0x1bc>
 802d34c:	68fb      	ldr	r3, [r7, #12]
 802d34e:	681b      	ldr	r3, [r3, #0]
 802d350:	4a28      	ldr	r2, [pc, #160]	; (802d3f4 <HAL_DMA_Start_IT+0x214>)
 802d352:	4293      	cmp	r3, r2
 802d354:	d022      	beq.n	802d39c <HAL_DMA_Start_IT+0x1bc>
 802d356:	68fb      	ldr	r3, [r7, #12]
 802d358:	681b      	ldr	r3, [r3, #0]
 802d35a:	4a27      	ldr	r2, [pc, #156]	; (802d3f8 <HAL_DMA_Start_IT+0x218>)
 802d35c:	4293      	cmp	r3, r2
 802d35e:	d01d      	beq.n	802d39c <HAL_DMA_Start_IT+0x1bc>
 802d360:	68fb      	ldr	r3, [r7, #12]
 802d362:	681b      	ldr	r3, [r3, #0]
 802d364:	4a25      	ldr	r2, [pc, #148]	; (802d3fc <HAL_DMA_Start_IT+0x21c>)
 802d366:	4293      	cmp	r3, r2
 802d368:	d018      	beq.n	802d39c <HAL_DMA_Start_IT+0x1bc>
 802d36a:	68fb      	ldr	r3, [r7, #12]
 802d36c:	681b      	ldr	r3, [r3, #0]
 802d36e:	4a24      	ldr	r2, [pc, #144]	; (802d400 <HAL_DMA_Start_IT+0x220>)
 802d370:	4293      	cmp	r3, r2
 802d372:	d013      	beq.n	802d39c <HAL_DMA_Start_IT+0x1bc>
 802d374:	68fb      	ldr	r3, [r7, #12]
 802d376:	681b      	ldr	r3, [r3, #0]
 802d378:	4a22      	ldr	r2, [pc, #136]	; (802d404 <HAL_DMA_Start_IT+0x224>)
 802d37a:	4293      	cmp	r3, r2
 802d37c:	d00e      	beq.n	802d39c <HAL_DMA_Start_IT+0x1bc>
 802d37e:	68fb      	ldr	r3, [r7, #12]
 802d380:	681b      	ldr	r3, [r3, #0]
 802d382:	4a21      	ldr	r2, [pc, #132]	; (802d408 <HAL_DMA_Start_IT+0x228>)
 802d384:	4293      	cmp	r3, r2
 802d386:	d009      	beq.n	802d39c <HAL_DMA_Start_IT+0x1bc>
 802d388:	68fb      	ldr	r3, [r7, #12]
 802d38a:	681b      	ldr	r3, [r3, #0]
 802d38c:	4a1f      	ldr	r2, [pc, #124]	; (802d40c <HAL_DMA_Start_IT+0x22c>)
 802d38e:	4293      	cmp	r3, r2
 802d390:	d004      	beq.n	802d39c <HAL_DMA_Start_IT+0x1bc>
 802d392:	68fb      	ldr	r3, [r7, #12]
 802d394:	681b      	ldr	r3, [r3, #0]
 802d396:	4a1e      	ldr	r2, [pc, #120]	; (802d410 <HAL_DMA_Start_IT+0x230>)
 802d398:	4293      	cmp	r3, r2
 802d39a:	d101      	bne.n	802d3a0 <HAL_DMA_Start_IT+0x1c0>
 802d39c:	2301      	movs	r3, #1
 802d39e:	e000      	b.n	802d3a2 <HAL_DMA_Start_IT+0x1c2>
 802d3a0:	2300      	movs	r3, #0
 802d3a2:	2b00      	cmp	r3, #0
 802d3a4:	d036      	beq.n	802d414 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 802d3a6:	68fb      	ldr	r3, [r7, #12]
 802d3a8:	681b      	ldr	r3, [r3, #0]
 802d3aa:	681b      	ldr	r3, [r3, #0]
 802d3ac:	f023 021e 	bic.w	r2, r3, #30
 802d3b0:	68fb      	ldr	r3, [r7, #12]
 802d3b2:	681b      	ldr	r3, [r3, #0]
 802d3b4:	f042 0216 	orr.w	r2, r2, #22
 802d3b8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 802d3ba:	68fb      	ldr	r3, [r7, #12]
 802d3bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802d3be:	2b00      	cmp	r3, #0
 802d3c0:	d03e      	beq.n	802d440 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 802d3c2:	68fb      	ldr	r3, [r7, #12]
 802d3c4:	681b      	ldr	r3, [r3, #0]
 802d3c6:	681a      	ldr	r2, [r3, #0]
 802d3c8:	68fb      	ldr	r3, [r7, #12]
 802d3ca:	681b      	ldr	r3, [r3, #0]
 802d3cc:	f042 0208 	orr.w	r2, r2, #8
 802d3d0:	601a      	str	r2, [r3, #0]
 802d3d2:	e035      	b.n	802d440 <HAL_DMA_Start_IT+0x260>
 802d3d4:	40020010 	.word	0x40020010
 802d3d8:	40020028 	.word	0x40020028
 802d3dc:	40020040 	.word	0x40020040
 802d3e0:	40020058 	.word	0x40020058
 802d3e4:	40020070 	.word	0x40020070
 802d3e8:	40020088 	.word	0x40020088
 802d3ec:	400200a0 	.word	0x400200a0
 802d3f0:	400200b8 	.word	0x400200b8
 802d3f4:	40020410 	.word	0x40020410
 802d3f8:	40020428 	.word	0x40020428
 802d3fc:	40020440 	.word	0x40020440
 802d400:	40020458 	.word	0x40020458
 802d404:	40020470 	.word	0x40020470
 802d408:	40020488 	.word	0x40020488
 802d40c:	400204a0 	.word	0x400204a0
 802d410:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 802d414:	68fb      	ldr	r3, [r7, #12]
 802d416:	681b      	ldr	r3, [r3, #0]
 802d418:	681b      	ldr	r3, [r3, #0]
 802d41a:	f023 020e 	bic.w	r2, r3, #14
 802d41e:	68fb      	ldr	r3, [r7, #12]
 802d420:	681b      	ldr	r3, [r3, #0]
 802d422:	f042 020a 	orr.w	r2, r2, #10
 802d426:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 802d428:	68fb      	ldr	r3, [r7, #12]
 802d42a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802d42c:	2b00      	cmp	r3, #0
 802d42e:	d007      	beq.n	802d440 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 802d430:	68fb      	ldr	r3, [r7, #12]
 802d432:	681b      	ldr	r3, [r3, #0]
 802d434:	681a      	ldr	r2, [r3, #0]
 802d436:	68fb      	ldr	r3, [r7, #12]
 802d438:	681b      	ldr	r3, [r3, #0]
 802d43a:	f042 0204 	orr.w	r2, r2, #4
 802d43e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 802d440:	68fb      	ldr	r3, [r7, #12]
 802d442:	681b      	ldr	r3, [r3, #0]
 802d444:	4a83      	ldr	r2, [pc, #524]	; (802d654 <HAL_DMA_Start_IT+0x474>)
 802d446:	4293      	cmp	r3, r2
 802d448:	d072      	beq.n	802d530 <HAL_DMA_Start_IT+0x350>
 802d44a:	68fb      	ldr	r3, [r7, #12]
 802d44c:	681b      	ldr	r3, [r3, #0]
 802d44e:	4a82      	ldr	r2, [pc, #520]	; (802d658 <HAL_DMA_Start_IT+0x478>)
 802d450:	4293      	cmp	r3, r2
 802d452:	d06d      	beq.n	802d530 <HAL_DMA_Start_IT+0x350>
 802d454:	68fb      	ldr	r3, [r7, #12]
 802d456:	681b      	ldr	r3, [r3, #0]
 802d458:	4a80      	ldr	r2, [pc, #512]	; (802d65c <HAL_DMA_Start_IT+0x47c>)
 802d45a:	4293      	cmp	r3, r2
 802d45c:	d068      	beq.n	802d530 <HAL_DMA_Start_IT+0x350>
 802d45e:	68fb      	ldr	r3, [r7, #12]
 802d460:	681b      	ldr	r3, [r3, #0]
 802d462:	4a7f      	ldr	r2, [pc, #508]	; (802d660 <HAL_DMA_Start_IT+0x480>)
 802d464:	4293      	cmp	r3, r2
 802d466:	d063      	beq.n	802d530 <HAL_DMA_Start_IT+0x350>
 802d468:	68fb      	ldr	r3, [r7, #12]
 802d46a:	681b      	ldr	r3, [r3, #0]
 802d46c:	4a7d      	ldr	r2, [pc, #500]	; (802d664 <HAL_DMA_Start_IT+0x484>)
 802d46e:	4293      	cmp	r3, r2
 802d470:	d05e      	beq.n	802d530 <HAL_DMA_Start_IT+0x350>
 802d472:	68fb      	ldr	r3, [r7, #12]
 802d474:	681b      	ldr	r3, [r3, #0]
 802d476:	4a7c      	ldr	r2, [pc, #496]	; (802d668 <HAL_DMA_Start_IT+0x488>)
 802d478:	4293      	cmp	r3, r2
 802d47a:	d059      	beq.n	802d530 <HAL_DMA_Start_IT+0x350>
 802d47c:	68fb      	ldr	r3, [r7, #12]
 802d47e:	681b      	ldr	r3, [r3, #0]
 802d480:	4a7a      	ldr	r2, [pc, #488]	; (802d66c <HAL_DMA_Start_IT+0x48c>)
 802d482:	4293      	cmp	r3, r2
 802d484:	d054      	beq.n	802d530 <HAL_DMA_Start_IT+0x350>
 802d486:	68fb      	ldr	r3, [r7, #12]
 802d488:	681b      	ldr	r3, [r3, #0]
 802d48a:	4a79      	ldr	r2, [pc, #484]	; (802d670 <HAL_DMA_Start_IT+0x490>)
 802d48c:	4293      	cmp	r3, r2
 802d48e:	d04f      	beq.n	802d530 <HAL_DMA_Start_IT+0x350>
 802d490:	68fb      	ldr	r3, [r7, #12]
 802d492:	681b      	ldr	r3, [r3, #0]
 802d494:	4a77      	ldr	r2, [pc, #476]	; (802d674 <HAL_DMA_Start_IT+0x494>)
 802d496:	4293      	cmp	r3, r2
 802d498:	d04a      	beq.n	802d530 <HAL_DMA_Start_IT+0x350>
 802d49a:	68fb      	ldr	r3, [r7, #12]
 802d49c:	681b      	ldr	r3, [r3, #0]
 802d49e:	4a76      	ldr	r2, [pc, #472]	; (802d678 <HAL_DMA_Start_IT+0x498>)
 802d4a0:	4293      	cmp	r3, r2
 802d4a2:	d045      	beq.n	802d530 <HAL_DMA_Start_IT+0x350>
 802d4a4:	68fb      	ldr	r3, [r7, #12]
 802d4a6:	681b      	ldr	r3, [r3, #0]
 802d4a8:	4a74      	ldr	r2, [pc, #464]	; (802d67c <HAL_DMA_Start_IT+0x49c>)
 802d4aa:	4293      	cmp	r3, r2
 802d4ac:	d040      	beq.n	802d530 <HAL_DMA_Start_IT+0x350>
 802d4ae:	68fb      	ldr	r3, [r7, #12]
 802d4b0:	681b      	ldr	r3, [r3, #0]
 802d4b2:	4a73      	ldr	r2, [pc, #460]	; (802d680 <HAL_DMA_Start_IT+0x4a0>)
 802d4b4:	4293      	cmp	r3, r2
 802d4b6:	d03b      	beq.n	802d530 <HAL_DMA_Start_IT+0x350>
 802d4b8:	68fb      	ldr	r3, [r7, #12]
 802d4ba:	681b      	ldr	r3, [r3, #0]
 802d4bc:	4a71      	ldr	r2, [pc, #452]	; (802d684 <HAL_DMA_Start_IT+0x4a4>)
 802d4be:	4293      	cmp	r3, r2
 802d4c0:	d036      	beq.n	802d530 <HAL_DMA_Start_IT+0x350>
 802d4c2:	68fb      	ldr	r3, [r7, #12]
 802d4c4:	681b      	ldr	r3, [r3, #0]
 802d4c6:	4a70      	ldr	r2, [pc, #448]	; (802d688 <HAL_DMA_Start_IT+0x4a8>)
 802d4c8:	4293      	cmp	r3, r2
 802d4ca:	d031      	beq.n	802d530 <HAL_DMA_Start_IT+0x350>
 802d4cc:	68fb      	ldr	r3, [r7, #12]
 802d4ce:	681b      	ldr	r3, [r3, #0]
 802d4d0:	4a6e      	ldr	r2, [pc, #440]	; (802d68c <HAL_DMA_Start_IT+0x4ac>)
 802d4d2:	4293      	cmp	r3, r2
 802d4d4:	d02c      	beq.n	802d530 <HAL_DMA_Start_IT+0x350>
 802d4d6:	68fb      	ldr	r3, [r7, #12]
 802d4d8:	681b      	ldr	r3, [r3, #0]
 802d4da:	4a6d      	ldr	r2, [pc, #436]	; (802d690 <HAL_DMA_Start_IT+0x4b0>)
 802d4dc:	4293      	cmp	r3, r2
 802d4de:	d027      	beq.n	802d530 <HAL_DMA_Start_IT+0x350>
 802d4e0:	68fb      	ldr	r3, [r7, #12]
 802d4e2:	681b      	ldr	r3, [r3, #0]
 802d4e4:	4a6b      	ldr	r2, [pc, #428]	; (802d694 <HAL_DMA_Start_IT+0x4b4>)
 802d4e6:	4293      	cmp	r3, r2
 802d4e8:	d022      	beq.n	802d530 <HAL_DMA_Start_IT+0x350>
 802d4ea:	68fb      	ldr	r3, [r7, #12]
 802d4ec:	681b      	ldr	r3, [r3, #0]
 802d4ee:	4a6a      	ldr	r2, [pc, #424]	; (802d698 <HAL_DMA_Start_IT+0x4b8>)
 802d4f0:	4293      	cmp	r3, r2
 802d4f2:	d01d      	beq.n	802d530 <HAL_DMA_Start_IT+0x350>
 802d4f4:	68fb      	ldr	r3, [r7, #12]
 802d4f6:	681b      	ldr	r3, [r3, #0]
 802d4f8:	4a68      	ldr	r2, [pc, #416]	; (802d69c <HAL_DMA_Start_IT+0x4bc>)
 802d4fa:	4293      	cmp	r3, r2
 802d4fc:	d018      	beq.n	802d530 <HAL_DMA_Start_IT+0x350>
 802d4fe:	68fb      	ldr	r3, [r7, #12]
 802d500:	681b      	ldr	r3, [r3, #0]
 802d502:	4a67      	ldr	r2, [pc, #412]	; (802d6a0 <HAL_DMA_Start_IT+0x4c0>)
 802d504:	4293      	cmp	r3, r2
 802d506:	d013      	beq.n	802d530 <HAL_DMA_Start_IT+0x350>
 802d508:	68fb      	ldr	r3, [r7, #12]
 802d50a:	681b      	ldr	r3, [r3, #0]
 802d50c:	4a65      	ldr	r2, [pc, #404]	; (802d6a4 <HAL_DMA_Start_IT+0x4c4>)
 802d50e:	4293      	cmp	r3, r2
 802d510:	d00e      	beq.n	802d530 <HAL_DMA_Start_IT+0x350>
 802d512:	68fb      	ldr	r3, [r7, #12]
 802d514:	681b      	ldr	r3, [r3, #0]
 802d516:	4a64      	ldr	r2, [pc, #400]	; (802d6a8 <HAL_DMA_Start_IT+0x4c8>)
 802d518:	4293      	cmp	r3, r2
 802d51a:	d009      	beq.n	802d530 <HAL_DMA_Start_IT+0x350>
 802d51c:	68fb      	ldr	r3, [r7, #12]
 802d51e:	681b      	ldr	r3, [r3, #0]
 802d520:	4a62      	ldr	r2, [pc, #392]	; (802d6ac <HAL_DMA_Start_IT+0x4cc>)
 802d522:	4293      	cmp	r3, r2
 802d524:	d004      	beq.n	802d530 <HAL_DMA_Start_IT+0x350>
 802d526:	68fb      	ldr	r3, [r7, #12]
 802d528:	681b      	ldr	r3, [r3, #0]
 802d52a:	4a61      	ldr	r2, [pc, #388]	; (802d6b0 <HAL_DMA_Start_IT+0x4d0>)
 802d52c:	4293      	cmp	r3, r2
 802d52e:	d101      	bne.n	802d534 <HAL_DMA_Start_IT+0x354>
 802d530:	2301      	movs	r3, #1
 802d532:	e000      	b.n	802d536 <HAL_DMA_Start_IT+0x356>
 802d534:	2300      	movs	r3, #0
 802d536:	2b00      	cmp	r3, #0
 802d538:	d01a      	beq.n	802d570 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 802d53a:	68fb      	ldr	r3, [r7, #12]
 802d53c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802d53e:	681b      	ldr	r3, [r3, #0]
 802d540:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 802d544:	2b00      	cmp	r3, #0
 802d546:	d007      	beq.n	802d558 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 802d548:	68fb      	ldr	r3, [r7, #12]
 802d54a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802d54c:	681a      	ldr	r2, [r3, #0]
 802d54e:	68fb      	ldr	r3, [r7, #12]
 802d550:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802d552:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 802d556:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 802d558:	68fb      	ldr	r3, [r7, #12]
 802d55a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802d55c:	2b00      	cmp	r3, #0
 802d55e:	d007      	beq.n	802d570 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 802d560:	68fb      	ldr	r3, [r7, #12]
 802d562:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802d564:	681a      	ldr	r2, [r3, #0]
 802d566:	68fb      	ldr	r3, [r7, #12]
 802d568:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802d56a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 802d56e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 802d570:	68fb      	ldr	r3, [r7, #12]
 802d572:	681b      	ldr	r3, [r3, #0]
 802d574:	4a37      	ldr	r2, [pc, #220]	; (802d654 <HAL_DMA_Start_IT+0x474>)
 802d576:	4293      	cmp	r3, r2
 802d578:	d04a      	beq.n	802d610 <HAL_DMA_Start_IT+0x430>
 802d57a:	68fb      	ldr	r3, [r7, #12]
 802d57c:	681b      	ldr	r3, [r3, #0]
 802d57e:	4a36      	ldr	r2, [pc, #216]	; (802d658 <HAL_DMA_Start_IT+0x478>)
 802d580:	4293      	cmp	r3, r2
 802d582:	d045      	beq.n	802d610 <HAL_DMA_Start_IT+0x430>
 802d584:	68fb      	ldr	r3, [r7, #12]
 802d586:	681b      	ldr	r3, [r3, #0]
 802d588:	4a34      	ldr	r2, [pc, #208]	; (802d65c <HAL_DMA_Start_IT+0x47c>)
 802d58a:	4293      	cmp	r3, r2
 802d58c:	d040      	beq.n	802d610 <HAL_DMA_Start_IT+0x430>
 802d58e:	68fb      	ldr	r3, [r7, #12]
 802d590:	681b      	ldr	r3, [r3, #0]
 802d592:	4a33      	ldr	r2, [pc, #204]	; (802d660 <HAL_DMA_Start_IT+0x480>)
 802d594:	4293      	cmp	r3, r2
 802d596:	d03b      	beq.n	802d610 <HAL_DMA_Start_IT+0x430>
 802d598:	68fb      	ldr	r3, [r7, #12]
 802d59a:	681b      	ldr	r3, [r3, #0]
 802d59c:	4a31      	ldr	r2, [pc, #196]	; (802d664 <HAL_DMA_Start_IT+0x484>)
 802d59e:	4293      	cmp	r3, r2
 802d5a0:	d036      	beq.n	802d610 <HAL_DMA_Start_IT+0x430>
 802d5a2:	68fb      	ldr	r3, [r7, #12]
 802d5a4:	681b      	ldr	r3, [r3, #0]
 802d5a6:	4a30      	ldr	r2, [pc, #192]	; (802d668 <HAL_DMA_Start_IT+0x488>)
 802d5a8:	4293      	cmp	r3, r2
 802d5aa:	d031      	beq.n	802d610 <HAL_DMA_Start_IT+0x430>
 802d5ac:	68fb      	ldr	r3, [r7, #12]
 802d5ae:	681b      	ldr	r3, [r3, #0]
 802d5b0:	4a2e      	ldr	r2, [pc, #184]	; (802d66c <HAL_DMA_Start_IT+0x48c>)
 802d5b2:	4293      	cmp	r3, r2
 802d5b4:	d02c      	beq.n	802d610 <HAL_DMA_Start_IT+0x430>
 802d5b6:	68fb      	ldr	r3, [r7, #12]
 802d5b8:	681b      	ldr	r3, [r3, #0]
 802d5ba:	4a2d      	ldr	r2, [pc, #180]	; (802d670 <HAL_DMA_Start_IT+0x490>)
 802d5bc:	4293      	cmp	r3, r2
 802d5be:	d027      	beq.n	802d610 <HAL_DMA_Start_IT+0x430>
 802d5c0:	68fb      	ldr	r3, [r7, #12]
 802d5c2:	681b      	ldr	r3, [r3, #0]
 802d5c4:	4a2b      	ldr	r2, [pc, #172]	; (802d674 <HAL_DMA_Start_IT+0x494>)
 802d5c6:	4293      	cmp	r3, r2
 802d5c8:	d022      	beq.n	802d610 <HAL_DMA_Start_IT+0x430>
 802d5ca:	68fb      	ldr	r3, [r7, #12]
 802d5cc:	681b      	ldr	r3, [r3, #0]
 802d5ce:	4a2a      	ldr	r2, [pc, #168]	; (802d678 <HAL_DMA_Start_IT+0x498>)
 802d5d0:	4293      	cmp	r3, r2
 802d5d2:	d01d      	beq.n	802d610 <HAL_DMA_Start_IT+0x430>
 802d5d4:	68fb      	ldr	r3, [r7, #12]
 802d5d6:	681b      	ldr	r3, [r3, #0]
 802d5d8:	4a28      	ldr	r2, [pc, #160]	; (802d67c <HAL_DMA_Start_IT+0x49c>)
 802d5da:	4293      	cmp	r3, r2
 802d5dc:	d018      	beq.n	802d610 <HAL_DMA_Start_IT+0x430>
 802d5de:	68fb      	ldr	r3, [r7, #12]
 802d5e0:	681b      	ldr	r3, [r3, #0]
 802d5e2:	4a27      	ldr	r2, [pc, #156]	; (802d680 <HAL_DMA_Start_IT+0x4a0>)
 802d5e4:	4293      	cmp	r3, r2
 802d5e6:	d013      	beq.n	802d610 <HAL_DMA_Start_IT+0x430>
 802d5e8:	68fb      	ldr	r3, [r7, #12]
 802d5ea:	681b      	ldr	r3, [r3, #0]
 802d5ec:	4a25      	ldr	r2, [pc, #148]	; (802d684 <HAL_DMA_Start_IT+0x4a4>)
 802d5ee:	4293      	cmp	r3, r2
 802d5f0:	d00e      	beq.n	802d610 <HAL_DMA_Start_IT+0x430>
 802d5f2:	68fb      	ldr	r3, [r7, #12]
 802d5f4:	681b      	ldr	r3, [r3, #0]
 802d5f6:	4a24      	ldr	r2, [pc, #144]	; (802d688 <HAL_DMA_Start_IT+0x4a8>)
 802d5f8:	4293      	cmp	r3, r2
 802d5fa:	d009      	beq.n	802d610 <HAL_DMA_Start_IT+0x430>
 802d5fc:	68fb      	ldr	r3, [r7, #12]
 802d5fe:	681b      	ldr	r3, [r3, #0]
 802d600:	4a22      	ldr	r2, [pc, #136]	; (802d68c <HAL_DMA_Start_IT+0x4ac>)
 802d602:	4293      	cmp	r3, r2
 802d604:	d004      	beq.n	802d610 <HAL_DMA_Start_IT+0x430>
 802d606:	68fb      	ldr	r3, [r7, #12]
 802d608:	681b      	ldr	r3, [r3, #0]
 802d60a:	4a21      	ldr	r2, [pc, #132]	; (802d690 <HAL_DMA_Start_IT+0x4b0>)
 802d60c:	4293      	cmp	r3, r2
 802d60e:	d108      	bne.n	802d622 <HAL_DMA_Start_IT+0x442>
 802d610:	68fb      	ldr	r3, [r7, #12]
 802d612:	681b      	ldr	r3, [r3, #0]
 802d614:	681a      	ldr	r2, [r3, #0]
 802d616:	68fb      	ldr	r3, [r7, #12]
 802d618:	681b      	ldr	r3, [r3, #0]
 802d61a:	f042 0201 	orr.w	r2, r2, #1
 802d61e:	601a      	str	r2, [r3, #0]
 802d620:	e012      	b.n	802d648 <HAL_DMA_Start_IT+0x468>
 802d622:	68fb      	ldr	r3, [r7, #12]
 802d624:	681b      	ldr	r3, [r3, #0]
 802d626:	681a      	ldr	r2, [r3, #0]
 802d628:	68fb      	ldr	r3, [r7, #12]
 802d62a:	681b      	ldr	r3, [r3, #0]
 802d62c:	f042 0201 	orr.w	r2, r2, #1
 802d630:	601a      	str	r2, [r3, #0]
 802d632:	e009      	b.n	802d648 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 802d634:	68fb      	ldr	r3, [r7, #12]
 802d636:	f44f 6200 	mov.w	r2, #2048	; 0x800
 802d63a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 802d63c:	68fb      	ldr	r3, [r7, #12]
 802d63e:	2200      	movs	r2, #0
 802d640:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 802d644:	2301      	movs	r3, #1
 802d646:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 802d648:	7dfb      	ldrb	r3, [r7, #23]
}
 802d64a:	4618      	mov	r0, r3
 802d64c:	3718      	adds	r7, #24
 802d64e:	46bd      	mov	sp, r7
 802d650:	bd80      	pop	{r7, pc}
 802d652:	bf00      	nop
 802d654:	40020010 	.word	0x40020010
 802d658:	40020028 	.word	0x40020028
 802d65c:	40020040 	.word	0x40020040
 802d660:	40020058 	.word	0x40020058
 802d664:	40020070 	.word	0x40020070
 802d668:	40020088 	.word	0x40020088
 802d66c:	400200a0 	.word	0x400200a0
 802d670:	400200b8 	.word	0x400200b8
 802d674:	40020410 	.word	0x40020410
 802d678:	40020428 	.word	0x40020428
 802d67c:	40020440 	.word	0x40020440
 802d680:	40020458 	.word	0x40020458
 802d684:	40020470 	.word	0x40020470
 802d688:	40020488 	.word	0x40020488
 802d68c:	400204a0 	.word	0x400204a0
 802d690:	400204b8 	.word	0x400204b8
 802d694:	58025408 	.word	0x58025408
 802d698:	5802541c 	.word	0x5802541c
 802d69c:	58025430 	.word	0x58025430
 802d6a0:	58025444 	.word	0x58025444
 802d6a4:	58025458 	.word	0x58025458
 802d6a8:	5802546c 	.word	0x5802546c
 802d6ac:	58025480 	.word	0x58025480
 802d6b0:	58025494 	.word	0x58025494

0802d6b4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 802d6b4:	b580      	push	{r7, lr}
 802d6b6:	b086      	sub	sp, #24
 802d6b8:	af00      	add	r7, sp, #0
 802d6ba:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 802d6bc:	f7fe fd38 	bl	802c130 <HAL_GetTick>
 802d6c0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 802d6c2:	687b      	ldr	r3, [r7, #4]
 802d6c4:	2b00      	cmp	r3, #0
 802d6c6:	d101      	bne.n	802d6cc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 802d6c8:	2301      	movs	r3, #1
 802d6ca:	e2dc      	b.n	802dc86 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 802d6cc:	687b      	ldr	r3, [r7, #4]
 802d6ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 802d6d2:	b2db      	uxtb	r3, r3
 802d6d4:	2b02      	cmp	r3, #2
 802d6d6:	d008      	beq.n	802d6ea <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 802d6d8:	687b      	ldr	r3, [r7, #4]
 802d6da:	2280      	movs	r2, #128	; 0x80
 802d6dc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 802d6de:	687b      	ldr	r3, [r7, #4]
 802d6e0:	2200      	movs	r2, #0
 802d6e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 802d6e6:	2301      	movs	r3, #1
 802d6e8:	e2cd      	b.n	802dc86 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 802d6ea:	687b      	ldr	r3, [r7, #4]
 802d6ec:	681b      	ldr	r3, [r3, #0]
 802d6ee:	4a76      	ldr	r2, [pc, #472]	; (802d8c8 <HAL_DMA_Abort+0x214>)
 802d6f0:	4293      	cmp	r3, r2
 802d6f2:	d04a      	beq.n	802d78a <HAL_DMA_Abort+0xd6>
 802d6f4:	687b      	ldr	r3, [r7, #4]
 802d6f6:	681b      	ldr	r3, [r3, #0]
 802d6f8:	4a74      	ldr	r2, [pc, #464]	; (802d8cc <HAL_DMA_Abort+0x218>)
 802d6fa:	4293      	cmp	r3, r2
 802d6fc:	d045      	beq.n	802d78a <HAL_DMA_Abort+0xd6>
 802d6fe:	687b      	ldr	r3, [r7, #4]
 802d700:	681b      	ldr	r3, [r3, #0]
 802d702:	4a73      	ldr	r2, [pc, #460]	; (802d8d0 <HAL_DMA_Abort+0x21c>)
 802d704:	4293      	cmp	r3, r2
 802d706:	d040      	beq.n	802d78a <HAL_DMA_Abort+0xd6>
 802d708:	687b      	ldr	r3, [r7, #4]
 802d70a:	681b      	ldr	r3, [r3, #0]
 802d70c:	4a71      	ldr	r2, [pc, #452]	; (802d8d4 <HAL_DMA_Abort+0x220>)
 802d70e:	4293      	cmp	r3, r2
 802d710:	d03b      	beq.n	802d78a <HAL_DMA_Abort+0xd6>
 802d712:	687b      	ldr	r3, [r7, #4]
 802d714:	681b      	ldr	r3, [r3, #0]
 802d716:	4a70      	ldr	r2, [pc, #448]	; (802d8d8 <HAL_DMA_Abort+0x224>)
 802d718:	4293      	cmp	r3, r2
 802d71a:	d036      	beq.n	802d78a <HAL_DMA_Abort+0xd6>
 802d71c:	687b      	ldr	r3, [r7, #4]
 802d71e:	681b      	ldr	r3, [r3, #0]
 802d720:	4a6e      	ldr	r2, [pc, #440]	; (802d8dc <HAL_DMA_Abort+0x228>)
 802d722:	4293      	cmp	r3, r2
 802d724:	d031      	beq.n	802d78a <HAL_DMA_Abort+0xd6>
 802d726:	687b      	ldr	r3, [r7, #4]
 802d728:	681b      	ldr	r3, [r3, #0]
 802d72a:	4a6d      	ldr	r2, [pc, #436]	; (802d8e0 <HAL_DMA_Abort+0x22c>)
 802d72c:	4293      	cmp	r3, r2
 802d72e:	d02c      	beq.n	802d78a <HAL_DMA_Abort+0xd6>
 802d730:	687b      	ldr	r3, [r7, #4]
 802d732:	681b      	ldr	r3, [r3, #0]
 802d734:	4a6b      	ldr	r2, [pc, #428]	; (802d8e4 <HAL_DMA_Abort+0x230>)
 802d736:	4293      	cmp	r3, r2
 802d738:	d027      	beq.n	802d78a <HAL_DMA_Abort+0xd6>
 802d73a:	687b      	ldr	r3, [r7, #4]
 802d73c:	681b      	ldr	r3, [r3, #0]
 802d73e:	4a6a      	ldr	r2, [pc, #424]	; (802d8e8 <HAL_DMA_Abort+0x234>)
 802d740:	4293      	cmp	r3, r2
 802d742:	d022      	beq.n	802d78a <HAL_DMA_Abort+0xd6>
 802d744:	687b      	ldr	r3, [r7, #4]
 802d746:	681b      	ldr	r3, [r3, #0]
 802d748:	4a68      	ldr	r2, [pc, #416]	; (802d8ec <HAL_DMA_Abort+0x238>)
 802d74a:	4293      	cmp	r3, r2
 802d74c:	d01d      	beq.n	802d78a <HAL_DMA_Abort+0xd6>
 802d74e:	687b      	ldr	r3, [r7, #4]
 802d750:	681b      	ldr	r3, [r3, #0]
 802d752:	4a67      	ldr	r2, [pc, #412]	; (802d8f0 <HAL_DMA_Abort+0x23c>)
 802d754:	4293      	cmp	r3, r2
 802d756:	d018      	beq.n	802d78a <HAL_DMA_Abort+0xd6>
 802d758:	687b      	ldr	r3, [r7, #4]
 802d75a:	681b      	ldr	r3, [r3, #0]
 802d75c:	4a65      	ldr	r2, [pc, #404]	; (802d8f4 <HAL_DMA_Abort+0x240>)
 802d75e:	4293      	cmp	r3, r2
 802d760:	d013      	beq.n	802d78a <HAL_DMA_Abort+0xd6>
 802d762:	687b      	ldr	r3, [r7, #4]
 802d764:	681b      	ldr	r3, [r3, #0]
 802d766:	4a64      	ldr	r2, [pc, #400]	; (802d8f8 <HAL_DMA_Abort+0x244>)
 802d768:	4293      	cmp	r3, r2
 802d76a:	d00e      	beq.n	802d78a <HAL_DMA_Abort+0xd6>
 802d76c:	687b      	ldr	r3, [r7, #4]
 802d76e:	681b      	ldr	r3, [r3, #0]
 802d770:	4a62      	ldr	r2, [pc, #392]	; (802d8fc <HAL_DMA_Abort+0x248>)
 802d772:	4293      	cmp	r3, r2
 802d774:	d009      	beq.n	802d78a <HAL_DMA_Abort+0xd6>
 802d776:	687b      	ldr	r3, [r7, #4]
 802d778:	681b      	ldr	r3, [r3, #0]
 802d77a:	4a61      	ldr	r2, [pc, #388]	; (802d900 <HAL_DMA_Abort+0x24c>)
 802d77c:	4293      	cmp	r3, r2
 802d77e:	d004      	beq.n	802d78a <HAL_DMA_Abort+0xd6>
 802d780:	687b      	ldr	r3, [r7, #4]
 802d782:	681b      	ldr	r3, [r3, #0]
 802d784:	4a5f      	ldr	r2, [pc, #380]	; (802d904 <HAL_DMA_Abort+0x250>)
 802d786:	4293      	cmp	r3, r2
 802d788:	d101      	bne.n	802d78e <HAL_DMA_Abort+0xda>
 802d78a:	2301      	movs	r3, #1
 802d78c:	e000      	b.n	802d790 <HAL_DMA_Abort+0xdc>
 802d78e:	2300      	movs	r3, #0
 802d790:	2b00      	cmp	r3, #0
 802d792:	d013      	beq.n	802d7bc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 802d794:	687b      	ldr	r3, [r7, #4]
 802d796:	681b      	ldr	r3, [r3, #0]
 802d798:	681a      	ldr	r2, [r3, #0]
 802d79a:	687b      	ldr	r3, [r7, #4]
 802d79c:	681b      	ldr	r3, [r3, #0]
 802d79e:	f022 021e 	bic.w	r2, r2, #30
 802d7a2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 802d7a4:	687b      	ldr	r3, [r7, #4]
 802d7a6:	681b      	ldr	r3, [r3, #0]
 802d7a8:	695a      	ldr	r2, [r3, #20]
 802d7aa:	687b      	ldr	r3, [r7, #4]
 802d7ac:	681b      	ldr	r3, [r3, #0]
 802d7ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 802d7b2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 802d7b4:	687b      	ldr	r3, [r7, #4]
 802d7b6:	681b      	ldr	r3, [r3, #0]
 802d7b8:	617b      	str	r3, [r7, #20]
 802d7ba:	e00a      	b.n	802d7d2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 802d7bc:	687b      	ldr	r3, [r7, #4]
 802d7be:	681b      	ldr	r3, [r3, #0]
 802d7c0:	681a      	ldr	r2, [r3, #0]
 802d7c2:	687b      	ldr	r3, [r7, #4]
 802d7c4:	681b      	ldr	r3, [r3, #0]
 802d7c6:	f022 020e 	bic.w	r2, r2, #14
 802d7ca:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 802d7cc:	687b      	ldr	r3, [r7, #4]
 802d7ce:	681b      	ldr	r3, [r3, #0]
 802d7d0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 802d7d2:	687b      	ldr	r3, [r7, #4]
 802d7d4:	681b      	ldr	r3, [r3, #0]
 802d7d6:	4a3c      	ldr	r2, [pc, #240]	; (802d8c8 <HAL_DMA_Abort+0x214>)
 802d7d8:	4293      	cmp	r3, r2
 802d7da:	d072      	beq.n	802d8c2 <HAL_DMA_Abort+0x20e>
 802d7dc:	687b      	ldr	r3, [r7, #4]
 802d7de:	681b      	ldr	r3, [r3, #0]
 802d7e0:	4a3a      	ldr	r2, [pc, #232]	; (802d8cc <HAL_DMA_Abort+0x218>)
 802d7e2:	4293      	cmp	r3, r2
 802d7e4:	d06d      	beq.n	802d8c2 <HAL_DMA_Abort+0x20e>
 802d7e6:	687b      	ldr	r3, [r7, #4]
 802d7e8:	681b      	ldr	r3, [r3, #0]
 802d7ea:	4a39      	ldr	r2, [pc, #228]	; (802d8d0 <HAL_DMA_Abort+0x21c>)
 802d7ec:	4293      	cmp	r3, r2
 802d7ee:	d068      	beq.n	802d8c2 <HAL_DMA_Abort+0x20e>
 802d7f0:	687b      	ldr	r3, [r7, #4]
 802d7f2:	681b      	ldr	r3, [r3, #0]
 802d7f4:	4a37      	ldr	r2, [pc, #220]	; (802d8d4 <HAL_DMA_Abort+0x220>)
 802d7f6:	4293      	cmp	r3, r2
 802d7f8:	d063      	beq.n	802d8c2 <HAL_DMA_Abort+0x20e>
 802d7fa:	687b      	ldr	r3, [r7, #4]
 802d7fc:	681b      	ldr	r3, [r3, #0]
 802d7fe:	4a36      	ldr	r2, [pc, #216]	; (802d8d8 <HAL_DMA_Abort+0x224>)
 802d800:	4293      	cmp	r3, r2
 802d802:	d05e      	beq.n	802d8c2 <HAL_DMA_Abort+0x20e>
 802d804:	687b      	ldr	r3, [r7, #4]
 802d806:	681b      	ldr	r3, [r3, #0]
 802d808:	4a34      	ldr	r2, [pc, #208]	; (802d8dc <HAL_DMA_Abort+0x228>)
 802d80a:	4293      	cmp	r3, r2
 802d80c:	d059      	beq.n	802d8c2 <HAL_DMA_Abort+0x20e>
 802d80e:	687b      	ldr	r3, [r7, #4]
 802d810:	681b      	ldr	r3, [r3, #0]
 802d812:	4a33      	ldr	r2, [pc, #204]	; (802d8e0 <HAL_DMA_Abort+0x22c>)
 802d814:	4293      	cmp	r3, r2
 802d816:	d054      	beq.n	802d8c2 <HAL_DMA_Abort+0x20e>
 802d818:	687b      	ldr	r3, [r7, #4]
 802d81a:	681b      	ldr	r3, [r3, #0]
 802d81c:	4a31      	ldr	r2, [pc, #196]	; (802d8e4 <HAL_DMA_Abort+0x230>)
 802d81e:	4293      	cmp	r3, r2
 802d820:	d04f      	beq.n	802d8c2 <HAL_DMA_Abort+0x20e>
 802d822:	687b      	ldr	r3, [r7, #4]
 802d824:	681b      	ldr	r3, [r3, #0]
 802d826:	4a30      	ldr	r2, [pc, #192]	; (802d8e8 <HAL_DMA_Abort+0x234>)
 802d828:	4293      	cmp	r3, r2
 802d82a:	d04a      	beq.n	802d8c2 <HAL_DMA_Abort+0x20e>
 802d82c:	687b      	ldr	r3, [r7, #4]
 802d82e:	681b      	ldr	r3, [r3, #0]
 802d830:	4a2e      	ldr	r2, [pc, #184]	; (802d8ec <HAL_DMA_Abort+0x238>)
 802d832:	4293      	cmp	r3, r2
 802d834:	d045      	beq.n	802d8c2 <HAL_DMA_Abort+0x20e>
 802d836:	687b      	ldr	r3, [r7, #4]
 802d838:	681b      	ldr	r3, [r3, #0]
 802d83a:	4a2d      	ldr	r2, [pc, #180]	; (802d8f0 <HAL_DMA_Abort+0x23c>)
 802d83c:	4293      	cmp	r3, r2
 802d83e:	d040      	beq.n	802d8c2 <HAL_DMA_Abort+0x20e>
 802d840:	687b      	ldr	r3, [r7, #4]
 802d842:	681b      	ldr	r3, [r3, #0]
 802d844:	4a2b      	ldr	r2, [pc, #172]	; (802d8f4 <HAL_DMA_Abort+0x240>)
 802d846:	4293      	cmp	r3, r2
 802d848:	d03b      	beq.n	802d8c2 <HAL_DMA_Abort+0x20e>
 802d84a:	687b      	ldr	r3, [r7, #4]
 802d84c:	681b      	ldr	r3, [r3, #0]
 802d84e:	4a2a      	ldr	r2, [pc, #168]	; (802d8f8 <HAL_DMA_Abort+0x244>)
 802d850:	4293      	cmp	r3, r2
 802d852:	d036      	beq.n	802d8c2 <HAL_DMA_Abort+0x20e>
 802d854:	687b      	ldr	r3, [r7, #4]
 802d856:	681b      	ldr	r3, [r3, #0]
 802d858:	4a28      	ldr	r2, [pc, #160]	; (802d8fc <HAL_DMA_Abort+0x248>)
 802d85a:	4293      	cmp	r3, r2
 802d85c:	d031      	beq.n	802d8c2 <HAL_DMA_Abort+0x20e>
 802d85e:	687b      	ldr	r3, [r7, #4]
 802d860:	681b      	ldr	r3, [r3, #0]
 802d862:	4a27      	ldr	r2, [pc, #156]	; (802d900 <HAL_DMA_Abort+0x24c>)
 802d864:	4293      	cmp	r3, r2
 802d866:	d02c      	beq.n	802d8c2 <HAL_DMA_Abort+0x20e>
 802d868:	687b      	ldr	r3, [r7, #4]
 802d86a:	681b      	ldr	r3, [r3, #0]
 802d86c:	4a25      	ldr	r2, [pc, #148]	; (802d904 <HAL_DMA_Abort+0x250>)
 802d86e:	4293      	cmp	r3, r2
 802d870:	d027      	beq.n	802d8c2 <HAL_DMA_Abort+0x20e>
 802d872:	687b      	ldr	r3, [r7, #4]
 802d874:	681b      	ldr	r3, [r3, #0]
 802d876:	4a24      	ldr	r2, [pc, #144]	; (802d908 <HAL_DMA_Abort+0x254>)
 802d878:	4293      	cmp	r3, r2
 802d87a:	d022      	beq.n	802d8c2 <HAL_DMA_Abort+0x20e>
 802d87c:	687b      	ldr	r3, [r7, #4]
 802d87e:	681b      	ldr	r3, [r3, #0]
 802d880:	4a22      	ldr	r2, [pc, #136]	; (802d90c <HAL_DMA_Abort+0x258>)
 802d882:	4293      	cmp	r3, r2
 802d884:	d01d      	beq.n	802d8c2 <HAL_DMA_Abort+0x20e>
 802d886:	687b      	ldr	r3, [r7, #4]
 802d888:	681b      	ldr	r3, [r3, #0]
 802d88a:	4a21      	ldr	r2, [pc, #132]	; (802d910 <HAL_DMA_Abort+0x25c>)
 802d88c:	4293      	cmp	r3, r2
 802d88e:	d018      	beq.n	802d8c2 <HAL_DMA_Abort+0x20e>
 802d890:	687b      	ldr	r3, [r7, #4]
 802d892:	681b      	ldr	r3, [r3, #0]
 802d894:	4a1f      	ldr	r2, [pc, #124]	; (802d914 <HAL_DMA_Abort+0x260>)
 802d896:	4293      	cmp	r3, r2
 802d898:	d013      	beq.n	802d8c2 <HAL_DMA_Abort+0x20e>
 802d89a:	687b      	ldr	r3, [r7, #4]
 802d89c:	681b      	ldr	r3, [r3, #0]
 802d89e:	4a1e      	ldr	r2, [pc, #120]	; (802d918 <HAL_DMA_Abort+0x264>)
 802d8a0:	4293      	cmp	r3, r2
 802d8a2:	d00e      	beq.n	802d8c2 <HAL_DMA_Abort+0x20e>
 802d8a4:	687b      	ldr	r3, [r7, #4]
 802d8a6:	681b      	ldr	r3, [r3, #0]
 802d8a8:	4a1c      	ldr	r2, [pc, #112]	; (802d91c <HAL_DMA_Abort+0x268>)
 802d8aa:	4293      	cmp	r3, r2
 802d8ac:	d009      	beq.n	802d8c2 <HAL_DMA_Abort+0x20e>
 802d8ae:	687b      	ldr	r3, [r7, #4]
 802d8b0:	681b      	ldr	r3, [r3, #0]
 802d8b2:	4a1b      	ldr	r2, [pc, #108]	; (802d920 <HAL_DMA_Abort+0x26c>)
 802d8b4:	4293      	cmp	r3, r2
 802d8b6:	d004      	beq.n	802d8c2 <HAL_DMA_Abort+0x20e>
 802d8b8:	687b      	ldr	r3, [r7, #4]
 802d8ba:	681b      	ldr	r3, [r3, #0]
 802d8bc:	4a19      	ldr	r2, [pc, #100]	; (802d924 <HAL_DMA_Abort+0x270>)
 802d8be:	4293      	cmp	r3, r2
 802d8c0:	d132      	bne.n	802d928 <HAL_DMA_Abort+0x274>
 802d8c2:	2301      	movs	r3, #1
 802d8c4:	e031      	b.n	802d92a <HAL_DMA_Abort+0x276>
 802d8c6:	bf00      	nop
 802d8c8:	40020010 	.word	0x40020010
 802d8cc:	40020028 	.word	0x40020028
 802d8d0:	40020040 	.word	0x40020040
 802d8d4:	40020058 	.word	0x40020058
 802d8d8:	40020070 	.word	0x40020070
 802d8dc:	40020088 	.word	0x40020088
 802d8e0:	400200a0 	.word	0x400200a0
 802d8e4:	400200b8 	.word	0x400200b8
 802d8e8:	40020410 	.word	0x40020410
 802d8ec:	40020428 	.word	0x40020428
 802d8f0:	40020440 	.word	0x40020440
 802d8f4:	40020458 	.word	0x40020458
 802d8f8:	40020470 	.word	0x40020470
 802d8fc:	40020488 	.word	0x40020488
 802d900:	400204a0 	.word	0x400204a0
 802d904:	400204b8 	.word	0x400204b8
 802d908:	58025408 	.word	0x58025408
 802d90c:	5802541c 	.word	0x5802541c
 802d910:	58025430 	.word	0x58025430
 802d914:	58025444 	.word	0x58025444
 802d918:	58025458 	.word	0x58025458
 802d91c:	5802546c 	.word	0x5802546c
 802d920:	58025480 	.word	0x58025480
 802d924:	58025494 	.word	0x58025494
 802d928:	2300      	movs	r3, #0
 802d92a:	2b00      	cmp	r3, #0
 802d92c:	d007      	beq.n	802d93e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 802d92e:	687b      	ldr	r3, [r7, #4]
 802d930:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802d932:	681a      	ldr	r2, [r3, #0]
 802d934:	687b      	ldr	r3, [r7, #4]
 802d936:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802d938:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 802d93c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 802d93e:	687b      	ldr	r3, [r7, #4]
 802d940:	681b      	ldr	r3, [r3, #0]
 802d942:	4a6d      	ldr	r2, [pc, #436]	; (802daf8 <HAL_DMA_Abort+0x444>)
 802d944:	4293      	cmp	r3, r2
 802d946:	d04a      	beq.n	802d9de <HAL_DMA_Abort+0x32a>
 802d948:	687b      	ldr	r3, [r7, #4]
 802d94a:	681b      	ldr	r3, [r3, #0]
 802d94c:	4a6b      	ldr	r2, [pc, #428]	; (802dafc <HAL_DMA_Abort+0x448>)
 802d94e:	4293      	cmp	r3, r2
 802d950:	d045      	beq.n	802d9de <HAL_DMA_Abort+0x32a>
 802d952:	687b      	ldr	r3, [r7, #4]
 802d954:	681b      	ldr	r3, [r3, #0]
 802d956:	4a6a      	ldr	r2, [pc, #424]	; (802db00 <HAL_DMA_Abort+0x44c>)
 802d958:	4293      	cmp	r3, r2
 802d95a:	d040      	beq.n	802d9de <HAL_DMA_Abort+0x32a>
 802d95c:	687b      	ldr	r3, [r7, #4]
 802d95e:	681b      	ldr	r3, [r3, #0]
 802d960:	4a68      	ldr	r2, [pc, #416]	; (802db04 <HAL_DMA_Abort+0x450>)
 802d962:	4293      	cmp	r3, r2
 802d964:	d03b      	beq.n	802d9de <HAL_DMA_Abort+0x32a>
 802d966:	687b      	ldr	r3, [r7, #4]
 802d968:	681b      	ldr	r3, [r3, #0]
 802d96a:	4a67      	ldr	r2, [pc, #412]	; (802db08 <HAL_DMA_Abort+0x454>)
 802d96c:	4293      	cmp	r3, r2
 802d96e:	d036      	beq.n	802d9de <HAL_DMA_Abort+0x32a>
 802d970:	687b      	ldr	r3, [r7, #4]
 802d972:	681b      	ldr	r3, [r3, #0]
 802d974:	4a65      	ldr	r2, [pc, #404]	; (802db0c <HAL_DMA_Abort+0x458>)
 802d976:	4293      	cmp	r3, r2
 802d978:	d031      	beq.n	802d9de <HAL_DMA_Abort+0x32a>
 802d97a:	687b      	ldr	r3, [r7, #4]
 802d97c:	681b      	ldr	r3, [r3, #0]
 802d97e:	4a64      	ldr	r2, [pc, #400]	; (802db10 <HAL_DMA_Abort+0x45c>)
 802d980:	4293      	cmp	r3, r2
 802d982:	d02c      	beq.n	802d9de <HAL_DMA_Abort+0x32a>
 802d984:	687b      	ldr	r3, [r7, #4]
 802d986:	681b      	ldr	r3, [r3, #0]
 802d988:	4a62      	ldr	r2, [pc, #392]	; (802db14 <HAL_DMA_Abort+0x460>)
 802d98a:	4293      	cmp	r3, r2
 802d98c:	d027      	beq.n	802d9de <HAL_DMA_Abort+0x32a>
 802d98e:	687b      	ldr	r3, [r7, #4]
 802d990:	681b      	ldr	r3, [r3, #0]
 802d992:	4a61      	ldr	r2, [pc, #388]	; (802db18 <HAL_DMA_Abort+0x464>)
 802d994:	4293      	cmp	r3, r2
 802d996:	d022      	beq.n	802d9de <HAL_DMA_Abort+0x32a>
 802d998:	687b      	ldr	r3, [r7, #4]
 802d99a:	681b      	ldr	r3, [r3, #0]
 802d99c:	4a5f      	ldr	r2, [pc, #380]	; (802db1c <HAL_DMA_Abort+0x468>)
 802d99e:	4293      	cmp	r3, r2
 802d9a0:	d01d      	beq.n	802d9de <HAL_DMA_Abort+0x32a>
 802d9a2:	687b      	ldr	r3, [r7, #4]
 802d9a4:	681b      	ldr	r3, [r3, #0]
 802d9a6:	4a5e      	ldr	r2, [pc, #376]	; (802db20 <HAL_DMA_Abort+0x46c>)
 802d9a8:	4293      	cmp	r3, r2
 802d9aa:	d018      	beq.n	802d9de <HAL_DMA_Abort+0x32a>
 802d9ac:	687b      	ldr	r3, [r7, #4]
 802d9ae:	681b      	ldr	r3, [r3, #0]
 802d9b0:	4a5c      	ldr	r2, [pc, #368]	; (802db24 <HAL_DMA_Abort+0x470>)
 802d9b2:	4293      	cmp	r3, r2
 802d9b4:	d013      	beq.n	802d9de <HAL_DMA_Abort+0x32a>
 802d9b6:	687b      	ldr	r3, [r7, #4]
 802d9b8:	681b      	ldr	r3, [r3, #0]
 802d9ba:	4a5b      	ldr	r2, [pc, #364]	; (802db28 <HAL_DMA_Abort+0x474>)
 802d9bc:	4293      	cmp	r3, r2
 802d9be:	d00e      	beq.n	802d9de <HAL_DMA_Abort+0x32a>
 802d9c0:	687b      	ldr	r3, [r7, #4]
 802d9c2:	681b      	ldr	r3, [r3, #0]
 802d9c4:	4a59      	ldr	r2, [pc, #356]	; (802db2c <HAL_DMA_Abort+0x478>)
 802d9c6:	4293      	cmp	r3, r2
 802d9c8:	d009      	beq.n	802d9de <HAL_DMA_Abort+0x32a>
 802d9ca:	687b      	ldr	r3, [r7, #4]
 802d9cc:	681b      	ldr	r3, [r3, #0]
 802d9ce:	4a58      	ldr	r2, [pc, #352]	; (802db30 <HAL_DMA_Abort+0x47c>)
 802d9d0:	4293      	cmp	r3, r2
 802d9d2:	d004      	beq.n	802d9de <HAL_DMA_Abort+0x32a>
 802d9d4:	687b      	ldr	r3, [r7, #4]
 802d9d6:	681b      	ldr	r3, [r3, #0]
 802d9d8:	4a56      	ldr	r2, [pc, #344]	; (802db34 <HAL_DMA_Abort+0x480>)
 802d9da:	4293      	cmp	r3, r2
 802d9dc:	d108      	bne.n	802d9f0 <HAL_DMA_Abort+0x33c>
 802d9de:	687b      	ldr	r3, [r7, #4]
 802d9e0:	681b      	ldr	r3, [r3, #0]
 802d9e2:	681a      	ldr	r2, [r3, #0]
 802d9e4:	687b      	ldr	r3, [r7, #4]
 802d9e6:	681b      	ldr	r3, [r3, #0]
 802d9e8:	f022 0201 	bic.w	r2, r2, #1
 802d9ec:	601a      	str	r2, [r3, #0]
 802d9ee:	e007      	b.n	802da00 <HAL_DMA_Abort+0x34c>
 802d9f0:	687b      	ldr	r3, [r7, #4]
 802d9f2:	681b      	ldr	r3, [r3, #0]
 802d9f4:	681a      	ldr	r2, [r3, #0]
 802d9f6:	687b      	ldr	r3, [r7, #4]
 802d9f8:	681b      	ldr	r3, [r3, #0]
 802d9fa:	f022 0201 	bic.w	r2, r2, #1
 802d9fe:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 802da00:	e013      	b.n	802da2a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 802da02:	f7fe fb95 	bl	802c130 <HAL_GetTick>
 802da06:	4602      	mov	r2, r0
 802da08:	693b      	ldr	r3, [r7, #16]
 802da0a:	1ad3      	subs	r3, r2, r3
 802da0c:	2b05      	cmp	r3, #5
 802da0e:	d90c      	bls.n	802da2a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 802da10:	687b      	ldr	r3, [r7, #4]
 802da12:	2220      	movs	r2, #32
 802da14:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 802da16:	687b      	ldr	r3, [r7, #4]
 802da18:	2203      	movs	r2, #3
 802da1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 802da1e:	687b      	ldr	r3, [r7, #4]
 802da20:	2200      	movs	r2, #0
 802da22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 802da26:	2301      	movs	r3, #1
 802da28:	e12d      	b.n	802dc86 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 802da2a:	697b      	ldr	r3, [r7, #20]
 802da2c:	681b      	ldr	r3, [r3, #0]
 802da2e:	f003 0301 	and.w	r3, r3, #1
 802da32:	2b00      	cmp	r3, #0
 802da34:	d1e5      	bne.n	802da02 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 802da36:	687b      	ldr	r3, [r7, #4]
 802da38:	681b      	ldr	r3, [r3, #0]
 802da3a:	4a2f      	ldr	r2, [pc, #188]	; (802daf8 <HAL_DMA_Abort+0x444>)
 802da3c:	4293      	cmp	r3, r2
 802da3e:	d04a      	beq.n	802dad6 <HAL_DMA_Abort+0x422>
 802da40:	687b      	ldr	r3, [r7, #4]
 802da42:	681b      	ldr	r3, [r3, #0]
 802da44:	4a2d      	ldr	r2, [pc, #180]	; (802dafc <HAL_DMA_Abort+0x448>)
 802da46:	4293      	cmp	r3, r2
 802da48:	d045      	beq.n	802dad6 <HAL_DMA_Abort+0x422>
 802da4a:	687b      	ldr	r3, [r7, #4]
 802da4c:	681b      	ldr	r3, [r3, #0]
 802da4e:	4a2c      	ldr	r2, [pc, #176]	; (802db00 <HAL_DMA_Abort+0x44c>)
 802da50:	4293      	cmp	r3, r2
 802da52:	d040      	beq.n	802dad6 <HAL_DMA_Abort+0x422>
 802da54:	687b      	ldr	r3, [r7, #4]
 802da56:	681b      	ldr	r3, [r3, #0]
 802da58:	4a2a      	ldr	r2, [pc, #168]	; (802db04 <HAL_DMA_Abort+0x450>)
 802da5a:	4293      	cmp	r3, r2
 802da5c:	d03b      	beq.n	802dad6 <HAL_DMA_Abort+0x422>
 802da5e:	687b      	ldr	r3, [r7, #4]
 802da60:	681b      	ldr	r3, [r3, #0]
 802da62:	4a29      	ldr	r2, [pc, #164]	; (802db08 <HAL_DMA_Abort+0x454>)
 802da64:	4293      	cmp	r3, r2
 802da66:	d036      	beq.n	802dad6 <HAL_DMA_Abort+0x422>
 802da68:	687b      	ldr	r3, [r7, #4]
 802da6a:	681b      	ldr	r3, [r3, #0]
 802da6c:	4a27      	ldr	r2, [pc, #156]	; (802db0c <HAL_DMA_Abort+0x458>)
 802da6e:	4293      	cmp	r3, r2
 802da70:	d031      	beq.n	802dad6 <HAL_DMA_Abort+0x422>
 802da72:	687b      	ldr	r3, [r7, #4]
 802da74:	681b      	ldr	r3, [r3, #0]
 802da76:	4a26      	ldr	r2, [pc, #152]	; (802db10 <HAL_DMA_Abort+0x45c>)
 802da78:	4293      	cmp	r3, r2
 802da7a:	d02c      	beq.n	802dad6 <HAL_DMA_Abort+0x422>
 802da7c:	687b      	ldr	r3, [r7, #4]
 802da7e:	681b      	ldr	r3, [r3, #0]
 802da80:	4a24      	ldr	r2, [pc, #144]	; (802db14 <HAL_DMA_Abort+0x460>)
 802da82:	4293      	cmp	r3, r2
 802da84:	d027      	beq.n	802dad6 <HAL_DMA_Abort+0x422>
 802da86:	687b      	ldr	r3, [r7, #4]
 802da88:	681b      	ldr	r3, [r3, #0]
 802da8a:	4a23      	ldr	r2, [pc, #140]	; (802db18 <HAL_DMA_Abort+0x464>)
 802da8c:	4293      	cmp	r3, r2
 802da8e:	d022      	beq.n	802dad6 <HAL_DMA_Abort+0x422>
 802da90:	687b      	ldr	r3, [r7, #4]
 802da92:	681b      	ldr	r3, [r3, #0]
 802da94:	4a21      	ldr	r2, [pc, #132]	; (802db1c <HAL_DMA_Abort+0x468>)
 802da96:	4293      	cmp	r3, r2
 802da98:	d01d      	beq.n	802dad6 <HAL_DMA_Abort+0x422>
 802da9a:	687b      	ldr	r3, [r7, #4]
 802da9c:	681b      	ldr	r3, [r3, #0]
 802da9e:	4a20      	ldr	r2, [pc, #128]	; (802db20 <HAL_DMA_Abort+0x46c>)
 802daa0:	4293      	cmp	r3, r2
 802daa2:	d018      	beq.n	802dad6 <HAL_DMA_Abort+0x422>
 802daa4:	687b      	ldr	r3, [r7, #4]
 802daa6:	681b      	ldr	r3, [r3, #0]
 802daa8:	4a1e      	ldr	r2, [pc, #120]	; (802db24 <HAL_DMA_Abort+0x470>)
 802daaa:	4293      	cmp	r3, r2
 802daac:	d013      	beq.n	802dad6 <HAL_DMA_Abort+0x422>
 802daae:	687b      	ldr	r3, [r7, #4]
 802dab0:	681b      	ldr	r3, [r3, #0]
 802dab2:	4a1d      	ldr	r2, [pc, #116]	; (802db28 <HAL_DMA_Abort+0x474>)
 802dab4:	4293      	cmp	r3, r2
 802dab6:	d00e      	beq.n	802dad6 <HAL_DMA_Abort+0x422>
 802dab8:	687b      	ldr	r3, [r7, #4]
 802daba:	681b      	ldr	r3, [r3, #0]
 802dabc:	4a1b      	ldr	r2, [pc, #108]	; (802db2c <HAL_DMA_Abort+0x478>)
 802dabe:	4293      	cmp	r3, r2
 802dac0:	d009      	beq.n	802dad6 <HAL_DMA_Abort+0x422>
 802dac2:	687b      	ldr	r3, [r7, #4]
 802dac4:	681b      	ldr	r3, [r3, #0]
 802dac6:	4a1a      	ldr	r2, [pc, #104]	; (802db30 <HAL_DMA_Abort+0x47c>)
 802dac8:	4293      	cmp	r3, r2
 802daca:	d004      	beq.n	802dad6 <HAL_DMA_Abort+0x422>
 802dacc:	687b      	ldr	r3, [r7, #4]
 802dace:	681b      	ldr	r3, [r3, #0]
 802dad0:	4a18      	ldr	r2, [pc, #96]	; (802db34 <HAL_DMA_Abort+0x480>)
 802dad2:	4293      	cmp	r3, r2
 802dad4:	d101      	bne.n	802dada <HAL_DMA_Abort+0x426>
 802dad6:	2301      	movs	r3, #1
 802dad8:	e000      	b.n	802dadc <HAL_DMA_Abort+0x428>
 802dada:	2300      	movs	r3, #0
 802dadc:	2b00      	cmp	r3, #0
 802dade:	d02b      	beq.n	802db38 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 802dae0:	687b      	ldr	r3, [r7, #4]
 802dae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802dae4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 802dae6:	687b      	ldr	r3, [r7, #4]
 802dae8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802daea:	f003 031f 	and.w	r3, r3, #31
 802daee:	223f      	movs	r2, #63	; 0x3f
 802daf0:	409a      	lsls	r2, r3
 802daf2:	68bb      	ldr	r3, [r7, #8]
 802daf4:	609a      	str	r2, [r3, #8]
 802daf6:	e02a      	b.n	802db4e <HAL_DMA_Abort+0x49a>
 802daf8:	40020010 	.word	0x40020010
 802dafc:	40020028 	.word	0x40020028
 802db00:	40020040 	.word	0x40020040
 802db04:	40020058 	.word	0x40020058
 802db08:	40020070 	.word	0x40020070
 802db0c:	40020088 	.word	0x40020088
 802db10:	400200a0 	.word	0x400200a0
 802db14:	400200b8 	.word	0x400200b8
 802db18:	40020410 	.word	0x40020410
 802db1c:	40020428 	.word	0x40020428
 802db20:	40020440 	.word	0x40020440
 802db24:	40020458 	.word	0x40020458
 802db28:	40020470 	.word	0x40020470
 802db2c:	40020488 	.word	0x40020488
 802db30:	400204a0 	.word	0x400204a0
 802db34:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 802db38:	687b      	ldr	r3, [r7, #4]
 802db3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802db3c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 802db3e:	687b      	ldr	r3, [r7, #4]
 802db40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802db42:	f003 031f 	and.w	r3, r3, #31
 802db46:	2201      	movs	r2, #1
 802db48:	409a      	lsls	r2, r3
 802db4a:	68fb      	ldr	r3, [r7, #12]
 802db4c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 802db4e:	687b      	ldr	r3, [r7, #4]
 802db50:	681b      	ldr	r3, [r3, #0]
 802db52:	4a4f      	ldr	r2, [pc, #316]	; (802dc90 <HAL_DMA_Abort+0x5dc>)
 802db54:	4293      	cmp	r3, r2
 802db56:	d072      	beq.n	802dc3e <HAL_DMA_Abort+0x58a>
 802db58:	687b      	ldr	r3, [r7, #4]
 802db5a:	681b      	ldr	r3, [r3, #0]
 802db5c:	4a4d      	ldr	r2, [pc, #308]	; (802dc94 <HAL_DMA_Abort+0x5e0>)
 802db5e:	4293      	cmp	r3, r2
 802db60:	d06d      	beq.n	802dc3e <HAL_DMA_Abort+0x58a>
 802db62:	687b      	ldr	r3, [r7, #4]
 802db64:	681b      	ldr	r3, [r3, #0]
 802db66:	4a4c      	ldr	r2, [pc, #304]	; (802dc98 <HAL_DMA_Abort+0x5e4>)
 802db68:	4293      	cmp	r3, r2
 802db6a:	d068      	beq.n	802dc3e <HAL_DMA_Abort+0x58a>
 802db6c:	687b      	ldr	r3, [r7, #4]
 802db6e:	681b      	ldr	r3, [r3, #0]
 802db70:	4a4a      	ldr	r2, [pc, #296]	; (802dc9c <HAL_DMA_Abort+0x5e8>)
 802db72:	4293      	cmp	r3, r2
 802db74:	d063      	beq.n	802dc3e <HAL_DMA_Abort+0x58a>
 802db76:	687b      	ldr	r3, [r7, #4]
 802db78:	681b      	ldr	r3, [r3, #0]
 802db7a:	4a49      	ldr	r2, [pc, #292]	; (802dca0 <HAL_DMA_Abort+0x5ec>)
 802db7c:	4293      	cmp	r3, r2
 802db7e:	d05e      	beq.n	802dc3e <HAL_DMA_Abort+0x58a>
 802db80:	687b      	ldr	r3, [r7, #4]
 802db82:	681b      	ldr	r3, [r3, #0]
 802db84:	4a47      	ldr	r2, [pc, #284]	; (802dca4 <HAL_DMA_Abort+0x5f0>)
 802db86:	4293      	cmp	r3, r2
 802db88:	d059      	beq.n	802dc3e <HAL_DMA_Abort+0x58a>
 802db8a:	687b      	ldr	r3, [r7, #4]
 802db8c:	681b      	ldr	r3, [r3, #0]
 802db8e:	4a46      	ldr	r2, [pc, #280]	; (802dca8 <HAL_DMA_Abort+0x5f4>)
 802db90:	4293      	cmp	r3, r2
 802db92:	d054      	beq.n	802dc3e <HAL_DMA_Abort+0x58a>
 802db94:	687b      	ldr	r3, [r7, #4]
 802db96:	681b      	ldr	r3, [r3, #0]
 802db98:	4a44      	ldr	r2, [pc, #272]	; (802dcac <HAL_DMA_Abort+0x5f8>)
 802db9a:	4293      	cmp	r3, r2
 802db9c:	d04f      	beq.n	802dc3e <HAL_DMA_Abort+0x58a>
 802db9e:	687b      	ldr	r3, [r7, #4]
 802dba0:	681b      	ldr	r3, [r3, #0]
 802dba2:	4a43      	ldr	r2, [pc, #268]	; (802dcb0 <HAL_DMA_Abort+0x5fc>)
 802dba4:	4293      	cmp	r3, r2
 802dba6:	d04a      	beq.n	802dc3e <HAL_DMA_Abort+0x58a>
 802dba8:	687b      	ldr	r3, [r7, #4]
 802dbaa:	681b      	ldr	r3, [r3, #0]
 802dbac:	4a41      	ldr	r2, [pc, #260]	; (802dcb4 <HAL_DMA_Abort+0x600>)
 802dbae:	4293      	cmp	r3, r2
 802dbb0:	d045      	beq.n	802dc3e <HAL_DMA_Abort+0x58a>
 802dbb2:	687b      	ldr	r3, [r7, #4]
 802dbb4:	681b      	ldr	r3, [r3, #0]
 802dbb6:	4a40      	ldr	r2, [pc, #256]	; (802dcb8 <HAL_DMA_Abort+0x604>)
 802dbb8:	4293      	cmp	r3, r2
 802dbba:	d040      	beq.n	802dc3e <HAL_DMA_Abort+0x58a>
 802dbbc:	687b      	ldr	r3, [r7, #4]
 802dbbe:	681b      	ldr	r3, [r3, #0]
 802dbc0:	4a3e      	ldr	r2, [pc, #248]	; (802dcbc <HAL_DMA_Abort+0x608>)
 802dbc2:	4293      	cmp	r3, r2
 802dbc4:	d03b      	beq.n	802dc3e <HAL_DMA_Abort+0x58a>
 802dbc6:	687b      	ldr	r3, [r7, #4]
 802dbc8:	681b      	ldr	r3, [r3, #0]
 802dbca:	4a3d      	ldr	r2, [pc, #244]	; (802dcc0 <HAL_DMA_Abort+0x60c>)
 802dbcc:	4293      	cmp	r3, r2
 802dbce:	d036      	beq.n	802dc3e <HAL_DMA_Abort+0x58a>
 802dbd0:	687b      	ldr	r3, [r7, #4]
 802dbd2:	681b      	ldr	r3, [r3, #0]
 802dbd4:	4a3b      	ldr	r2, [pc, #236]	; (802dcc4 <HAL_DMA_Abort+0x610>)
 802dbd6:	4293      	cmp	r3, r2
 802dbd8:	d031      	beq.n	802dc3e <HAL_DMA_Abort+0x58a>
 802dbda:	687b      	ldr	r3, [r7, #4]
 802dbdc:	681b      	ldr	r3, [r3, #0]
 802dbde:	4a3a      	ldr	r2, [pc, #232]	; (802dcc8 <HAL_DMA_Abort+0x614>)
 802dbe0:	4293      	cmp	r3, r2
 802dbe2:	d02c      	beq.n	802dc3e <HAL_DMA_Abort+0x58a>
 802dbe4:	687b      	ldr	r3, [r7, #4]
 802dbe6:	681b      	ldr	r3, [r3, #0]
 802dbe8:	4a38      	ldr	r2, [pc, #224]	; (802dccc <HAL_DMA_Abort+0x618>)
 802dbea:	4293      	cmp	r3, r2
 802dbec:	d027      	beq.n	802dc3e <HAL_DMA_Abort+0x58a>
 802dbee:	687b      	ldr	r3, [r7, #4]
 802dbf0:	681b      	ldr	r3, [r3, #0]
 802dbf2:	4a37      	ldr	r2, [pc, #220]	; (802dcd0 <HAL_DMA_Abort+0x61c>)
 802dbf4:	4293      	cmp	r3, r2
 802dbf6:	d022      	beq.n	802dc3e <HAL_DMA_Abort+0x58a>
 802dbf8:	687b      	ldr	r3, [r7, #4]
 802dbfa:	681b      	ldr	r3, [r3, #0]
 802dbfc:	4a35      	ldr	r2, [pc, #212]	; (802dcd4 <HAL_DMA_Abort+0x620>)
 802dbfe:	4293      	cmp	r3, r2
 802dc00:	d01d      	beq.n	802dc3e <HAL_DMA_Abort+0x58a>
 802dc02:	687b      	ldr	r3, [r7, #4]
 802dc04:	681b      	ldr	r3, [r3, #0]
 802dc06:	4a34      	ldr	r2, [pc, #208]	; (802dcd8 <HAL_DMA_Abort+0x624>)
 802dc08:	4293      	cmp	r3, r2
 802dc0a:	d018      	beq.n	802dc3e <HAL_DMA_Abort+0x58a>
 802dc0c:	687b      	ldr	r3, [r7, #4]
 802dc0e:	681b      	ldr	r3, [r3, #0]
 802dc10:	4a32      	ldr	r2, [pc, #200]	; (802dcdc <HAL_DMA_Abort+0x628>)
 802dc12:	4293      	cmp	r3, r2
 802dc14:	d013      	beq.n	802dc3e <HAL_DMA_Abort+0x58a>
 802dc16:	687b      	ldr	r3, [r7, #4]
 802dc18:	681b      	ldr	r3, [r3, #0]
 802dc1a:	4a31      	ldr	r2, [pc, #196]	; (802dce0 <HAL_DMA_Abort+0x62c>)
 802dc1c:	4293      	cmp	r3, r2
 802dc1e:	d00e      	beq.n	802dc3e <HAL_DMA_Abort+0x58a>
 802dc20:	687b      	ldr	r3, [r7, #4]
 802dc22:	681b      	ldr	r3, [r3, #0]
 802dc24:	4a2f      	ldr	r2, [pc, #188]	; (802dce4 <HAL_DMA_Abort+0x630>)
 802dc26:	4293      	cmp	r3, r2
 802dc28:	d009      	beq.n	802dc3e <HAL_DMA_Abort+0x58a>
 802dc2a:	687b      	ldr	r3, [r7, #4]
 802dc2c:	681b      	ldr	r3, [r3, #0]
 802dc2e:	4a2e      	ldr	r2, [pc, #184]	; (802dce8 <HAL_DMA_Abort+0x634>)
 802dc30:	4293      	cmp	r3, r2
 802dc32:	d004      	beq.n	802dc3e <HAL_DMA_Abort+0x58a>
 802dc34:	687b      	ldr	r3, [r7, #4]
 802dc36:	681b      	ldr	r3, [r3, #0]
 802dc38:	4a2c      	ldr	r2, [pc, #176]	; (802dcec <HAL_DMA_Abort+0x638>)
 802dc3a:	4293      	cmp	r3, r2
 802dc3c:	d101      	bne.n	802dc42 <HAL_DMA_Abort+0x58e>
 802dc3e:	2301      	movs	r3, #1
 802dc40:	e000      	b.n	802dc44 <HAL_DMA_Abort+0x590>
 802dc42:	2300      	movs	r3, #0
 802dc44:	2b00      	cmp	r3, #0
 802dc46:	d015      	beq.n	802dc74 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 802dc48:	687b      	ldr	r3, [r7, #4]
 802dc4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802dc4c:	687a      	ldr	r2, [r7, #4]
 802dc4e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 802dc50:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 802dc52:	687b      	ldr	r3, [r7, #4]
 802dc54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802dc56:	2b00      	cmp	r3, #0
 802dc58:	d00c      	beq.n	802dc74 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 802dc5a:	687b      	ldr	r3, [r7, #4]
 802dc5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802dc5e:	681a      	ldr	r2, [r3, #0]
 802dc60:	687b      	ldr	r3, [r7, #4]
 802dc62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802dc64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 802dc68:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 802dc6a:	687b      	ldr	r3, [r7, #4]
 802dc6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802dc6e:	687a      	ldr	r2, [r7, #4]
 802dc70:	6f52      	ldr	r2, [r2, #116]	; 0x74
 802dc72:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 802dc74:	687b      	ldr	r3, [r7, #4]
 802dc76:	2201      	movs	r2, #1
 802dc78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 802dc7c:	687b      	ldr	r3, [r7, #4]
 802dc7e:	2200      	movs	r2, #0
 802dc80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 802dc84:	2300      	movs	r3, #0
}
 802dc86:	4618      	mov	r0, r3
 802dc88:	3718      	adds	r7, #24
 802dc8a:	46bd      	mov	sp, r7
 802dc8c:	bd80      	pop	{r7, pc}
 802dc8e:	bf00      	nop
 802dc90:	40020010 	.word	0x40020010
 802dc94:	40020028 	.word	0x40020028
 802dc98:	40020040 	.word	0x40020040
 802dc9c:	40020058 	.word	0x40020058
 802dca0:	40020070 	.word	0x40020070
 802dca4:	40020088 	.word	0x40020088
 802dca8:	400200a0 	.word	0x400200a0
 802dcac:	400200b8 	.word	0x400200b8
 802dcb0:	40020410 	.word	0x40020410
 802dcb4:	40020428 	.word	0x40020428
 802dcb8:	40020440 	.word	0x40020440
 802dcbc:	40020458 	.word	0x40020458
 802dcc0:	40020470 	.word	0x40020470
 802dcc4:	40020488 	.word	0x40020488
 802dcc8:	400204a0 	.word	0x400204a0
 802dccc:	400204b8 	.word	0x400204b8
 802dcd0:	58025408 	.word	0x58025408
 802dcd4:	5802541c 	.word	0x5802541c
 802dcd8:	58025430 	.word	0x58025430
 802dcdc:	58025444 	.word	0x58025444
 802dce0:	58025458 	.word	0x58025458
 802dce4:	5802546c 	.word	0x5802546c
 802dce8:	58025480 	.word	0x58025480
 802dcec:	58025494 	.word	0x58025494

0802dcf0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 802dcf0:	b580      	push	{r7, lr}
 802dcf2:	b084      	sub	sp, #16
 802dcf4:	af00      	add	r7, sp, #0
 802dcf6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 802dcf8:	687b      	ldr	r3, [r7, #4]
 802dcfa:	2b00      	cmp	r3, #0
 802dcfc:	d101      	bne.n	802dd02 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 802dcfe:	2301      	movs	r3, #1
 802dd00:	e237      	b.n	802e172 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 802dd02:	687b      	ldr	r3, [r7, #4]
 802dd04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 802dd08:	b2db      	uxtb	r3, r3
 802dd0a:	2b02      	cmp	r3, #2
 802dd0c:	d004      	beq.n	802dd18 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 802dd0e:	687b      	ldr	r3, [r7, #4]
 802dd10:	2280      	movs	r2, #128	; 0x80
 802dd12:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 802dd14:	2301      	movs	r3, #1
 802dd16:	e22c      	b.n	802e172 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 802dd18:	687b      	ldr	r3, [r7, #4]
 802dd1a:	681b      	ldr	r3, [r3, #0]
 802dd1c:	4a5c      	ldr	r2, [pc, #368]	; (802de90 <HAL_DMA_Abort_IT+0x1a0>)
 802dd1e:	4293      	cmp	r3, r2
 802dd20:	d04a      	beq.n	802ddb8 <HAL_DMA_Abort_IT+0xc8>
 802dd22:	687b      	ldr	r3, [r7, #4]
 802dd24:	681b      	ldr	r3, [r3, #0]
 802dd26:	4a5b      	ldr	r2, [pc, #364]	; (802de94 <HAL_DMA_Abort_IT+0x1a4>)
 802dd28:	4293      	cmp	r3, r2
 802dd2a:	d045      	beq.n	802ddb8 <HAL_DMA_Abort_IT+0xc8>
 802dd2c:	687b      	ldr	r3, [r7, #4]
 802dd2e:	681b      	ldr	r3, [r3, #0]
 802dd30:	4a59      	ldr	r2, [pc, #356]	; (802de98 <HAL_DMA_Abort_IT+0x1a8>)
 802dd32:	4293      	cmp	r3, r2
 802dd34:	d040      	beq.n	802ddb8 <HAL_DMA_Abort_IT+0xc8>
 802dd36:	687b      	ldr	r3, [r7, #4]
 802dd38:	681b      	ldr	r3, [r3, #0]
 802dd3a:	4a58      	ldr	r2, [pc, #352]	; (802de9c <HAL_DMA_Abort_IT+0x1ac>)
 802dd3c:	4293      	cmp	r3, r2
 802dd3e:	d03b      	beq.n	802ddb8 <HAL_DMA_Abort_IT+0xc8>
 802dd40:	687b      	ldr	r3, [r7, #4]
 802dd42:	681b      	ldr	r3, [r3, #0]
 802dd44:	4a56      	ldr	r2, [pc, #344]	; (802dea0 <HAL_DMA_Abort_IT+0x1b0>)
 802dd46:	4293      	cmp	r3, r2
 802dd48:	d036      	beq.n	802ddb8 <HAL_DMA_Abort_IT+0xc8>
 802dd4a:	687b      	ldr	r3, [r7, #4]
 802dd4c:	681b      	ldr	r3, [r3, #0]
 802dd4e:	4a55      	ldr	r2, [pc, #340]	; (802dea4 <HAL_DMA_Abort_IT+0x1b4>)
 802dd50:	4293      	cmp	r3, r2
 802dd52:	d031      	beq.n	802ddb8 <HAL_DMA_Abort_IT+0xc8>
 802dd54:	687b      	ldr	r3, [r7, #4]
 802dd56:	681b      	ldr	r3, [r3, #0]
 802dd58:	4a53      	ldr	r2, [pc, #332]	; (802dea8 <HAL_DMA_Abort_IT+0x1b8>)
 802dd5a:	4293      	cmp	r3, r2
 802dd5c:	d02c      	beq.n	802ddb8 <HAL_DMA_Abort_IT+0xc8>
 802dd5e:	687b      	ldr	r3, [r7, #4]
 802dd60:	681b      	ldr	r3, [r3, #0]
 802dd62:	4a52      	ldr	r2, [pc, #328]	; (802deac <HAL_DMA_Abort_IT+0x1bc>)
 802dd64:	4293      	cmp	r3, r2
 802dd66:	d027      	beq.n	802ddb8 <HAL_DMA_Abort_IT+0xc8>
 802dd68:	687b      	ldr	r3, [r7, #4]
 802dd6a:	681b      	ldr	r3, [r3, #0]
 802dd6c:	4a50      	ldr	r2, [pc, #320]	; (802deb0 <HAL_DMA_Abort_IT+0x1c0>)
 802dd6e:	4293      	cmp	r3, r2
 802dd70:	d022      	beq.n	802ddb8 <HAL_DMA_Abort_IT+0xc8>
 802dd72:	687b      	ldr	r3, [r7, #4]
 802dd74:	681b      	ldr	r3, [r3, #0]
 802dd76:	4a4f      	ldr	r2, [pc, #316]	; (802deb4 <HAL_DMA_Abort_IT+0x1c4>)
 802dd78:	4293      	cmp	r3, r2
 802dd7a:	d01d      	beq.n	802ddb8 <HAL_DMA_Abort_IT+0xc8>
 802dd7c:	687b      	ldr	r3, [r7, #4]
 802dd7e:	681b      	ldr	r3, [r3, #0]
 802dd80:	4a4d      	ldr	r2, [pc, #308]	; (802deb8 <HAL_DMA_Abort_IT+0x1c8>)
 802dd82:	4293      	cmp	r3, r2
 802dd84:	d018      	beq.n	802ddb8 <HAL_DMA_Abort_IT+0xc8>
 802dd86:	687b      	ldr	r3, [r7, #4]
 802dd88:	681b      	ldr	r3, [r3, #0]
 802dd8a:	4a4c      	ldr	r2, [pc, #304]	; (802debc <HAL_DMA_Abort_IT+0x1cc>)
 802dd8c:	4293      	cmp	r3, r2
 802dd8e:	d013      	beq.n	802ddb8 <HAL_DMA_Abort_IT+0xc8>
 802dd90:	687b      	ldr	r3, [r7, #4]
 802dd92:	681b      	ldr	r3, [r3, #0]
 802dd94:	4a4a      	ldr	r2, [pc, #296]	; (802dec0 <HAL_DMA_Abort_IT+0x1d0>)
 802dd96:	4293      	cmp	r3, r2
 802dd98:	d00e      	beq.n	802ddb8 <HAL_DMA_Abort_IT+0xc8>
 802dd9a:	687b      	ldr	r3, [r7, #4]
 802dd9c:	681b      	ldr	r3, [r3, #0]
 802dd9e:	4a49      	ldr	r2, [pc, #292]	; (802dec4 <HAL_DMA_Abort_IT+0x1d4>)
 802dda0:	4293      	cmp	r3, r2
 802dda2:	d009      	beq.n	802ddb8 <HAL_DMA_Abort_IT+0xc8>
 802dda4:	687b      	ldr	r3, [r7, #4]
 802dda6:	681b      	ldr	r3, [r3, #0]
 802dda8:	4a47      	ldr	r2, [pc, #284]	; (802dec8 <HAL_DMA_Abort_IT+0x1d8>)
 802ddaa:	4293      	cmp	r3, r2
 802ddac:	d004      	beq.n	802ddb8 <HAL_DMA_Abort_IT+0xc8>
 802ddae:	687b      	ldr	r3, [r7, #4]
 802ddb0:	681b      	ldr	r3, [r3, #0]
 802ddb2:	4a46      	ldr	r2, [pc, #280]	; (802decc <HAL_DMA_Abort_IT+0x1dc>)
 802ddb4:	4293      	cmp	r3, r2
 802ddb6:	d101      	bne.n	802ddbc <HAL_DMA_Abort_IT+0xcc>
 802ddb8:	2301      	movs	r3, #1
 802ddba:	e000      	b.n	802ddbe <HAL_DMA_Abort_IT+0xce>
 802ddbc:	2300      	movs	r3, #0
 802ddbe:	2b00      	cmp	r3, #0
 802ddc0:	f000 8086 	beq.w	802ded0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 802ddc4:	687b      	ldr	r3, [r7, #4]
 802ddc6:	2204      	movs	r2, #4
 802ddc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 802ddcc:	687b      	ldr	r3, [r7, #4]
 802ddce:	681b      	ldr	r3, [r3, #0]
 802ddd0:	4a2f      	ldr	r2, [pc, #188]	; (802de90 <HAL_DMA_Abort_IT+0x1a0>)
 802ddd2:	4293      	cmp	r3, r2
 802ddd4:	d04a      	beq.n	802de6c <HAL_DMA_Abort_IT+0x17c>
 802ddd6:	687b      	ldr	r3, [r7, #4]
 802ddd8:	681b      	ldr	r3, [r3, #0]
 802ddda:	4a2e      	ldr	r2, [pc, #184]	; (802de94 <HAL_DMA_Abort_IT+0x1a4>)
 802dddc:	4293      	cmp	r3, r2
 802ddde:	d045      	beq.n	802de6c <HAL_DMA_Abort_IT+0x17c>
 802dde0:	687b      	ldr	r3, [r7, #4]
 802dde2:	681b      	ldr	r3, [r3, #0]
 802dde4:	4a2c      	ldr	r2, [pc, #176]	; (802de98 <HAL_DMA_Abort_IT+0x1a8>)
 802dde6:	4293      	cmp	r3, r2
 802dde8:	d040      	beq.n	802de6c <HAL_DMA_Abort_IT+0x17c>
 802ddea:	687b      	ldr	r3, [r7, #4]
 802ddec:	681b      	ldr	r3, [r3, #0]
 802ddee:	4a2b      	ldr	r2, [pc, #172]	; (802de9c <HAL_DMA_Abort_IT+0x1ac>)
 802ddf0:	4293      	cmp	r3, r2
 802ddf2:	d03b      	beq.n	802de6c <HAL_DMA_Abort_IT+0x17c>
 802ddf4:	687b      	ldr	r3, [r7, #4]
 802ddf6:	681b      	ldr	r3, [r3, #0]
 802ddf8:	4a29      	ldr	r2, [pc, #164]	; (802dea0 <HAL_DMA_Abort_IT+0x1b0>)
 802ddfa:	4293      	cmp	r3, r2
 802ddfc:	d036      	beq.n	802de6c <HAL_DMA_Abort_IT+0x17c>
 802ddfe:	687b      	ldr	r3, [r7, #4]
 802de00:	681b      	ldr	r3, [r3, #0]
 802de02:	4a28      	ldr	r2, [pc, #160]	; (802dea4 <HAL_DMA_Abort_IT+0x1b4>)
 802de04:	4293      	cmp	r3, r2
 802de06:	d031      	beq.n	802de6c <HAL_DMA_Abort_IT+0x17c>
 802de08:	687b      	ldr	r3, [r7, #4]
 802de0a:	681b      	ldr	r3, [r3, #0]
 802de0c:	4a26      	ldr	r2, [pc, #152]	; (802dea8 <HAL_DMA_Abort_IT+0x1b8>)
 802de0e:	4293      	cmp	r3, r2
 802de10:	d02c      	beq.n	802de6c <HAL_DMA_Abort_IT+0x17c>
 802de12:	687b      	ldr	r3, [r7, #4]
 802de14:	681b      	ldr	r3, [r3, #0]
 802de16:	4a25      	ldr	r2, [pc, #148]	; (802deac <HAL_DMA_Abort_IT+0x1bc>)
 802de18:	4293      	cmp	r3, r2
 802de1a:	d027      	beq.n	802de6c <HAL_DMA_Abort_IT+0x17c>
 802de1c:	687b      	ldr	r3, [r7, #4]
 802de1e:	681b      	ldr	r3, [r3, #0]
 802de20:	4a23      	ldr	r2, [pc, #140]	; (802deb0 <HAL_DMA_Abort_IT+0x1c0>)
 802de22:	4293      	cmp	r3, r2
 802de24:	d022      	beq.n	802de6c <HAL_DMA_Abort_IT+0x17c>
 802de26:	687b      	ldr	r3, [r7, #4]
 802de28:	681b      	ldr	r3, [r3, #0]
 802de2a:	4a22      	ldr	r2, [pc, #136]	; (802deb4 <HAL_DMA_Abort_IT+0x1c4>)
 802de2c:	4293      	cmp	r3, r2
 802de2e:	d01d      	beq.n	802de6c <HAL_DMA_Abort_IT+0x17c>
 802de30:	687b      	ldr	r3, [r7, #4]
 802de32:	681b      	ldr	r3, [r3, #0]
 802de34:	4a20      	ldr	r2, [pc, #128]	; (802deb8 <HAL_DMA_Abort_IT+0x1c8>)
 802de36:	4293      	cmp	r3, r2
 802de38:	d018      	beq.n	802de6c <HAL_DMA_Abort_IT+0x17c>
 802de3a:	687b      	ldr	r3, [r7, #4]
 802de3c:	681b      	ldr	r3, [r3, #0]
 802de3e:	4a1f      	ldr	r2, [pc, #124]	; (802debc <HAL_DMA_Abort_IT+0x1cc>)
 802de40:	4293      	cmp	r3, r2
 802de42:	d013      	beq.n	802de6c <HAL_DMA_Abort_IT+0x17c>
 802de44:	687b      	ldr	r3, [r7, #4]
 802de46:	681b      	ldr	r3, [r3, #0]
 802de48:	4a1d      	ldr	r2, [pc, #116]	; (802dec0 <HAL_DMA_Abort_IT+0x1d0>)
 802de4a:	4293      	cmp	r3, r2
 802de4c:	d00e      	beq.n	802de6c <HAL_DMA_Abort_IT+0x17c>
 802de4e:	687b      	ldr	r3, [r7, #4]
 802de50:	681b      	ldr	r3, [r3, #0]
 802de52:	4a1c      	ldr	r2, [pc, #112]	; (802dec4 <HAL_DMA_Abort_IT+0x1d4>)
 802de54:	4293      	cmp	r3, r2
 802de56:	d009      	beq.n	802de6c <HAL_DMA_Abort_IT+0x17c>
 802de58:	687b      	ldr	r3, [r7, #4]
 802de5a:	681b      	ldr	r3, [r3, #0]
 802de5c:	4a1a      	ldr	r2, [pc, #104]	; (802dec8 <HAL_DMA_Abort_IT+0x1d8>)
 802de5e:	4293      	cmp	r3, r2
 802de60:	d004      	beq.n	802de6c <HAL_DMA_Abort_IT+0x17c>
 802de62:	687b      	ldr	r3, [r7, #4]
 802de64:	681b      	ldr	r3, [r3, #0]
 802de66:	4a19      	ldr	r2, [pc, #100]	; (802decc <HAL_DMA_Abort_IT+0x1dc>)
 802de68:	4293      	cmp	r3, r2
 802de6a:	d108      	bne.n	802de7e <HAL_DMA_Abort_IT+0x18e>
 802de6c:	687b      	ldr	r3, [r7, #4]
 802de6e:	681b      	ldr	r3, [r3, #0]
 802de70:	681a      	ldr	r2, [r3, #0]
 802de72:	687b      	ldr	r3, [r7, #4]
 802de74:	681b      	ldr	r3, [r3, #0]
 802de76:	f022 0201 	bic.w	r2, r2, #1
 802de7a:	601a      	str	r2, [r3, #0]
 802de7c:	e178      	b.n	802e170 <HAL_DMA_Abort_IT+0x480>
 802de7e:	687b      	ldr	r3, [r7, #4]
 802de80:	681b      	ldr	r3, [r3, #0]
 802de82:	681a      	ldr	r2, [r3, #0]
 802de84:	687b      	ldr	r3, [r7, #4]
 802de86:	681b      	ldr	r3, [r3, #0]
 802de88:	f022 0201 	bic.w	r2, r2, #1
 802de8c:	601a      	str	r2, [r3, #0]
 802de8e:	e16f      	b.n	802e170 <HAL_DMA_Abort_IT+0x480>
 802de90:	40020010 	.word	0x40020010
 802de94:	40020028 	.word	0x40020028
 802de98:	40020040 	.word	0x40020040
 802de9c:	40020058 	.word	0x40020058
 802dea0:	40020070 	.word	0x40020070
 802dea4:	40020088 	.word	0x40020088
 802dea8:	400200a0 	.word	0x400200a0
 802deac:	400200b8 	.word	0x400200b8
 802deb0:	40020410 	.word	0x40020410
 802deb4:	40020428 	.word	0x40020428
 802deb8:	40020440 	.word	0x40020440
 802debc:	40020458 	.word	0x40020458
 802dec0:	40020470 	.word	0x40020470
 802dec4:	40020488 	.word	0x40020488
 802dec8:	400204a0 	.word	0x400204a0
 802decc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 802ded0:	687b      	ldr	r3, [r7, #4]
 802ded2:	681b      	ldr	r3, [r3, #0]
 802ded4:	681a      	ldr	r2, [r3, #0]
 802ded6:	687b      	ldr	r3, [r7, #4]
 802ded8:	681b      	ldr	r3, [r3, #0]
 802deda:	f022 020e 	bic.w	r2, r2, #14
 802dede:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 802dee0:	687b      	ldr	r3, [r7, #4]
 802dee2:	681b      	ldr	r3, [r3, #0]
 802dee4:	4a6c      	ldr	r2, [pc, #432]	; (802e098 <HAL_DMA_Abort_IT+0x3a8>)
 802dee6:	4293      	cmp	r3, r2
 802dee8:	d04a      	beq.n	802df80 <HAL_DMA_Abort_IT+0x290>
 802deea:	687b      	ldr	r3, [r7, #4]
 802deec:	681b      	ldr	r3, [r3, #0]
 802deee:	4a6b      	ldr	r2, [pc, #428]	; (802e09c <HAL_DMA_Abort_IT+0x3ac>)
 802def0:	4293      	cmp	r3, r2
 802def2:	d045      	beq.n	802df80 <HAL_DMA_Abort_IT+0x290>
 802def4:	687b      	ldr	r3, [r7, #4]
 802def6:	681b      	ldr	r3, [r3, #0]
 802def8:	4a69      	ldr	r2, [pc, #420]	; (802e0a0 <HAL_DMA_Abort_IT+0x3b0>)
 802defa:	4293      	cmp	r3, r2
 802defc:	d040      	beq.n	802df80 <HAL_DMA_Abort_IT+0x290>
 802defe:	687b      	ldr	r3, [r7, #4]
 802df00:	681b      	ldr	r3, [r3, #0]
 802df02:	4a68      	ldr	r2, [pc, #416]	; (802e0a4 <HAL_DMA_Abort_IT+0x3b4>)
 802df04:	4293      	cmp	r3, r2
 802df06:	d03b      	beq.n	802df80 <HAL_DMA_Abort_IT+0x290>
 802df08:	687b      	ldr	r3, [r7, #4]
 802df0a:	681b      	ldr	r3, [r3, #0]
 802df0c:	4a66      	ldr	r2, [pc, #408]	; (802e0a8 <HAL_DMA_Abort_IT+0x3b8>)
 802df0e:	4293      	cmp	r3, r2
 802df10:	d036      	beq.n	802df80 <HAL_DMA_Abort_IT+0x290>
 802df12:	687b      	ldr	r3, [r7, #4]
 802df14:	681b      	ldr	r3, [r3, #0]
 802df16:	4a65      	ldr	r2, [pc, #404]	; (802e0ac <HAL_DMA_Abort_IT+0x3bc>)
 802df18:	4293      	cmp	r3, r2
 802df1a:	d031      	beq.n	802df80 <HAL_DMA_Abort_IT+0x290>
 802df1c:	687b      	ldr	r3, [r7, #4]
 802df1e:	681b      	ldr	r3, [r3, #0]
 802df20:	4a63      	ldr	r2, [pc, #396]	; (802e0b0 <HAL_DMA_Abort_IT+0x3c0>)
 802df22:	4293      	cmp	r3, r2
 802df24:	d02c      	beq.n	802df80 <HAL_DMA_Abort_IT+0x290>
 802df26:	687b      	ldr	r3, [r7, #4]
 802df28:	681b      	ldr	r3, [r3, #0]
 802df2a:	4a62      	ldr	r2, [pc, #392]	; (802e0b4 <HAL_DMA_Abort_IT+0x3c4>)
 802df2c:	4293      	cmp	r3, r2
 802df2e:	d027      	beq.n	802df80 <HAL_DMA_Abort_IT+0x290>
 802df30:	687b      	ldr	r3, [r7, #4]
 802df32:	681b      	ldr	r3, [r3, #0]
 802df34:	4a60      	ldr	r2, [pc, #384]	; (802e0b8 <HAL_DMA_Abort_IT+0x3c8>)
 802df36:	4293      	cmp	r3, r2
 802df38:	d022      	beq.n	802df80 <HAL_DMA_Abort_IT+0x290>
 802df3a:	687b      	ldr	r3, [r7, #4]
 802df3c:	681b      	ldr	r3, [r3, #0]
 802df3e:	4a5f      	ldr	r2, [pc, #380]	; (802e0bc <HAL_DMA_Abort_IT+0x3cc>)
 802df40:	4293      	cmp	r3, r2
 802df42:	d01d      	beq.n	802df80 <HAL_DMA_Abort_IT+0x290>
 802df44:	687b      	ldr	r3, [r7, #4]
 802df46:	681b      	ldr	r3, [r3, #0]
 802df48:	4a5d      	ldr	r2, [pc, #372]	; (802e0c0 <HAL_DMA_Abort_IT+0x3d0>)
 802df4a:	4293      	cmp	r3, r2
 802df4c:	d018      	beq.n	802df80 <HAL_DMA_Abort_IT+0x290>
 802df4e:	687b      	ldr	r3, [r7, #4]
 802df50:	681b      	ldr	r3, [r3, #0]
 802df52:	4a5c      	ldr	r2, [pc, #368]	; (802e0c4 <HAL_DMA_Abort_IT+0x3d4>)
 802df54:	4293      	cmp	r3, r2
 802df56:	d013      	beq.n	802df80 <HAL_DMA_Abort_IT+0x290>
 802df58:	687b      	ldr	r3, [r7, #4]
 802df5a:	681b      	ldr	r3, [r3, #0]
 802df5c:	4a5a      	ldr	r2, [pc, #360]	; (802e0c8 <HAL_DMA_Abort_IT+0x3d8>)
 802df5e:	4293      	cmp	r3, r2
 802df60:	d00e      	beq.n	802df80 <HAL_DMA_Abort_IT+0x290>
 802df62:	687b      	ldr	r3, [r7, #4]
 802df64:	681b      	ldr	r3, [r3, #0]
 802df66:	4a59      	ldr	r2, [pc, #356]	; (802e0cc <HAL_DMA_Abort_IT+0x3dc>)
 802df68:	4293      	cmp	r3, r2
 802df6a:	d009      	beq.n	802df80 <HAL_DMA_Abort_IT+0x290>
 802df6c:	687b      	ldr	r3, [r7, #4]
 802df6e:	681b      	ldr	r3, [r3, #0]
 802df70:	4a57      	ldr	r2, [pc, #348]	; (802e0d0 <HAL_DMA_Abort_IT+0x3e0>)
 802df72:	4293      	cmp	r3, r2
 802df74:	d004      	beq.n	802df80 <HAL_DMA_Abort_IT+0x290>
 802df76:	687b      	ldr	r3, [r7, #4]
 802df78:	681b      	ldr	r3, [r3, #0]
 802df7a:	4a56      	ldr	r2, [pc, #344]	; (802e0d4 <HAL_DMA_Abort_IT+0x3e4>)
 802df7c:	4293      	cmp	r3, r2
 802df7e:	d108      	bne.n	802df92 <HAL_DMA_Abort_IT+0x2a2>
 802df80:	687b      	ldr	r3, [r7, #4]
 802df82:	681b      	ldr	r3, [r3, #0]
 802df84:	681a      	ldr	r2, [r3, #0]
 802df86:	687b      	ldr	r3, [r7, #4]
 802df88:	681b      	ldr	r3, [r3, #0]
 802df8a:	f022 0201 	bic.w	r2, r2, #1
 802df8e:	601a      	str	r2, [r3, #0]
 802df90:	e007      	b.n	802dfa2 <HAL_DMA_Abort_IT+0x2b2>
 802df92:	687b      	ldr	r3, [r7, #4]
 802df94:	681b      	ldr	r3, [r3, #0]
 802df96:	681a      	ldr	r2, [r3, #0]
 802df98:	687b      	ldr	r3, [r7, #4]
 802df9a:	681b      	ldr	r3, [r3, #0]
 802df9c:	f022 0201 	bic.w	r2, r2, #1
 802dfa0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 802dfa2:	687b      	ldr	r3, [r7, #4]
 802dfa4:	681b      	ldr	r3, [r3, #0]
 802dfa6:	4a3c      	ldr	r2, [pc, #240]	; (802e098 <HAL_DMA_Abort_IT+0x3a8>)
 802dfa8:	4293      	cmp	r3, r2
 802dfaa:	d072      	beq.n	802e092 <HAL_DMA_Abort_IT+0x3a2>
 802dfac:	687b      	ldr	r3, [r7, #4]
 802dfae:	681b      	ldr	r3, [r3, #0]
 802dfb0:	4a3a      	ldr	r2, [pc, #232]	; (802e09c <HAL_DMA_Abort_IT+0x3ac>)
 802dfb2:	4293      	cmp	r3, r2
 802dfb4:	d06d      	beq.n	802e092 <HAL_DMA_Abort_IT+0x3a2>
 802dfb6:	687b      	ldr	r3, [r7, #4]
 802dfb8:	681b      	ldr	r3, [r3, #0]
 802dfba:	4a39      	ldr	r2, [pc, #228]	; (802e0a0 <HAL_DMA_Abort_IT+0x3b0>)
 802dfbc:	4293      	cmp	r3, r2
 802dfbe:	d068      	beq.n	802e092 <HAL_DMA_Abort_IT+0x3a2>
 802dfc0:	687b      	ldr	r3, [r7, #4]
 802dfc2:	681b      	ldr	r3, [r3, #0]
 802dfc4:	4a37      	ldr	r2, [pc, #220]	; (802e0a4 <HAL_DMA_Abort_IT+0x3b4>)
 802dfc6:	4293      	cmp	r3, r2
 802dfc8:	d063      	beq.n	802e092 <HAL_DMA_Abort_IT+0x3a2>
 802dfca:	687b      	ldr	r3, [r7, #4]
 802dfcc:	681b      	ldr	r3, [r3, #0]
 802dfce:	4a36      	ldr	r2, [pc, #216]	; (802e0a8 <HAL_DMA_Abort_IT+0x3b8>)
 802dfd0:	4293      	cmp	r3, r2
 802dfd2:	d05e      	beq.n	802e092 <HAL_DMA_Abort_IT+0x3a2>
 802dfd4:	687b      	ldr	r3, [r7, #4]
 802dfd6:	681b      	ldr	r3, [r3, #0]
 802dfd8:	4a34      	ldr	r2, [pc, #208]	; (802e0ac <HAL_DMA_Abort_IT+0x3bc>)
 802dfda:	4293      	cmp	r3, r2
 802dfdc:	d059      	beq.n	802e092 <HAL_DMA_Abort_IT+0x3a2>
 802dfde:	687b      	ldr	r3, [r7, #4]
 802dfe0:	681b      	ldr	r3, [r3, #0]
 802dfe2:	4a33      	ldr	r2, [pc, #204]	; (802e0b0 <HAL_DMA_Abort_IT+0x3c0>)
 802dfe4:	4293      	cmp	r3, r2
 802dfe6:	d054      	beq.n	802e092 <HAL_DMA_Abort_IT+0x3a2>
 802dfe8:	687b      	ldr	r3, [r7, #4]
 802dfea:	681b      	ldr	r3, [r3, #0]
 802dfec:	4a31      	ldr	r2, [pc, #196]	; (802e0b4 <HAL_DMA_Abort_IT+0x3c4>)
 802dfee:	4293      	cmp	r3, r2
 802dff0:	d04f      	beq.n	802e092 <HAL_DMA_Abort_IT+0x3a2>
 802dff2:	687b      	ldr	r3, [r7, #4]
 802dff4:	681b      	ldr	r3, [r3, #0]
 802dff6:	4a30      	ldr	r2, [pc, #192]	; (802e0b8 <HAL_DMA_Abort_IT+0x3c8>)
 802dff8:	4293      	cmp	r3, r2
 802dffa:	d04a      	beq.n	802e092 <HAL_DMA_Abort_IT+0x3a2>
 802dffc:	687b      	ldr	r3, [r7, #4]
 802dffe:	681b      	ldr	r3, [r3, #0]
 802e000:	4a2e      	ldr	r2, [pc, #184]	; (802e0bc <HAL_DMA_Abort_IT+0x3cc>)
 802e002:	4293      	cmp	r3, r2
 802e004:	d045      	beq.n	802e092 <HAL_DMA_Abort_IT+0x3a2>
 802e006:	687b      	ldr	r3, [r7, #4]
 802e008:	681b      	ldr	r3, [r3, #0]
 802e00a:	4a2d      	ldr	r2, [pc, #180]	; (802e0c0 <HAL_DMA_Abort_IT+0x3d0>)
 802e00c:	4293      	cmp	r3, r2
 802e00e:	d040      	beq.n	802e092 <HAL_DMA_Abort_IT+0x3a2>
 802e010:	687b      	ldr	r3, [r7, #4]
 802e012:	681b      	ldr	r3, [r3, #0]
 802e014:	4a2b      	ldr	r2, [pc, #172]	; (802e0c4 <HAL_DMA_Abort_IT+0x3d4>)
 802e016:	4293      	cmp	r3, r2
 802e018:	d03b      	beq.n	802e092 <HAL_DMA_Abort_IT+0x3a2>
 802e01a:	687b      	ldr	r3, [r7, #4]
 802e01c:	681b      	ldr	r3, [r3, #0]
 802e01e:	4a2a      	ldr	r2, [pc, #168]	; (802e0c8 <HAL_DMA_Abort_IT+0x3d8>)
 802e020:	4293      	cmp	r3, r2
 802e022:	d036      	beq.n	802e092 <HAL_DMA_Abort_IT+0x3a2>
 802e024:	687b      	ldr	r3, [r7, #4]
 802e026:	681b      	ldr	r3, [r3, #0]
 802e028:	4a28      	ldr	r2, [pc, #160]	; (802e0cc <HAL_DMA_Abort_IT+0x3dc>)
 802e02a:	4293      	cmp	r3, r2
 802e02c:	d031      	beq.n	802e092 <HAL_DMA_Abort_IT+0x3a2>
 802e02e:	687b      	ldr	r3, [r7, #4]
 802e030:	681b      	ldr	r3, [r3, #0]
 802e032:	4a27      	ldr	r2, [pc, #156]	; (802e0d0 <HAL_DMA_Abort_IT+0x3e0>)
 802e034:	4293      	cmp	r3, r2
 802e036:	d02c      	beq.n	802e092 <HAL_DMA_Abort_IT+0x3a2>
 802e038:	687b      	ldr	r3, [r7, #4]
 802e03a:	681b      	ldr	r3, [r3, #0]
 802e03c:	4a25      	ldr	r2, [pc, #148]	; (802e0d4 <HAL_DMA_Abort_IT+0x3e4>)
 802e03e:	4293      	cmp	r3, r2
 802e040:	d027      	beq.n	802e092 <HAL_DMA_Abort_IT+0x3a2>
 802e042:	687b      	ldr	r3, [r7, #4]
 802e044:	681b      	ldr	r3, [r3, #0]
 802e046:	4a24      	ldr	r2, [pc, #144]	; (802e0d8 <HAL_DMA_Abort_IT+0x3e8>)
 802e048:	4293      	cmp	r3, r2
 802e04a:	d022      	beq.n	802e092 <HAL_DMA_Abort_IT+0x3a2>
 802e04c:	687b      	ldr	r3, [r7, #4]
 802e04e:	681b      	ldr	r3, [r3, #0]
 802e050:	4a22      	ldr	r2, [pc, #136]	; (802e0dc <HAL_DMA_Abort_IT+0x3ec>)
 802e052:	4293      	cmp	r3, r2
 802e054:	d01d      	beq.n	802e092 <HAL_DMA_Abort_IT+0x3a2>
 802e056:	687b      	ldr	r3, [r7, #4]
 802e058:	681b      	ldr	r3, [r3, #0]
 802e05a:	4a21      	ldr	r2, [pc, #132]	; (802e0e0 <HAL_DMA_Abort_IT+0x3f0>)
 802e05c:	4293      	cmp	r3, r2
 802e05e:	d018      	beq.n	802e092 <HAL_DMA_Abort_IT+0x3a2>
 802e060:	687b      	ldr	r3, [r7, #4]
 802e062:	681b      	ldr	r3, [r3, #0]
 802e064:	4a1f      	ldr	r2, [pc, #124]	; (802e0e4 <HAL_DMA_Abort_IT+0x3f4>)
 802e066:	4293      	cmp	r3, r2
 802e068:	d013      	beq.n	802e092 <HAL_DMA_Abort_IT+0x3a2>
 802e06a:	687b      	ldr	r3, [r7, #4]
 802e06c:	681b      	ldr	r3, [r3, #0]
 802e06e:	4a1e      	ldr	r2, [pc, #120]	; (802e0e8 <HAL_DMA_Abort_IT+0x3f8>)
 802e070:	4293      	cmp	r3, r2
 802e072:	d00e      	beq.n	802e092 <HAL_DMA_Abort_IT+0x3a2>
 802e074:	687b      	ldr	r3, [r7, #4]
 802e076:	681b      	ldr	r3, [r3, #0]
 802e078:	4a1c      	ldr	r2, [pc, #112]	; (802e0ec <HAL_DMA_Abort_IT+0x3fc>)
 802e07a:	4293      	cmp	r3, r2
 802e07c:	d009      	beq.n	802e092 <HAL_DMA_Abort_IT+0x3a2>
 802e07e:	687b      	ldr	r3, [r7, #4]
 802e080:	681b      	ldr	r3, [r3, #0]
 802e082:	4a1b      	ldr	r2, [pc, #108]	; (802e0f0 <HAL_DMA_Abort_IT+0x400>)
 802e084:	4293      	cmp	r3, r2
 802e086:	d004      	beq.n	802e092 <HAL_DMA_Abort_IT+0x3a2>
 802e088:	687b      	ldr	r3, [r7, #4]
 802e08a:	681b      	ldr	r3, [r3, #0]
 802e08c:	4a19      	ldr	r2, [pc, #100]	; (802e0f4 <HAL_DMA_Abort_IT+0x404>)
 802e08e:	4293      	cmp	r3, r2
 802e090:	d132      	bne.n	802e0f8 <HAL_DMA_Abort_IT+0x408>
 802e092:	2301      	movs	r3, #1
 802e094:	e031      	b.n	802e0fa <HAL_DMA_Abort_IT+0x40a>
 802e096:	bf00      	nop
 802e098:	40020010 	.word	0x40020010
 802e09c:	40020028 	.word	0x40020028
 802e0a0:	40020040 	.word	0x40020040
 802e0a4:	40020058 	.word	0x40020058
 802e0a8:	40020070 	.word	0x40020070
 802e0ac:	40020088 	.word	0x40020088
 802e0b0:	400200a0 	.word	0x400200a0
 802e0b4:	400200b8 	.word	0x400200b8
 802e0b8:	40020410 	.word	0x40020410
 802e0bc:	40020428 	.word	0x40020428
 802e0c0:	40020440 	.word	0x40020440
 802e0c4:	40020458 	.word	0x40020458
 802e0c8:	40020470 	.word	0x40020470
 802e0cc:	40020488 	.word	0x40020488
 802e0d0:	400204a0 	.word	0x400204a0
 802e0d4:	400204b8 	.word	0x400204b8
 802e0d8:	58025408 	.word	0x58025408
 802e0dc:	5802541c 	.word	0x5802541c
 802e0e0:	58025430 	.word	0x58025430
 802e0e4:	58025444 	.word	0x58025444
 802e0e8:	58025458 	.word	0x58025458
 802e0ec:	5802546c 	.word	0x5802546c
 802e0f0:	58025480 	.word	0x58025480
 802e0f4:	58025494 	.word	0x58025494
 802e0f8:	2300      	movs	r3, #0
 802e0fa:	2b00      	cmp	r3, #0
 802e0fc:	d028      	beq.n	802e150 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 802e0fe:	687b      	ldr	r3, [r7, #4]
 802e100:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802e102:	681a      	ldr	r2, [r3, #0]
 802e104:	687b      	ldr	r3, [r7, #4]
 802e106:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802e108:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 802e10c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 802e10e:	687b      	ldr	r3, [r7, #4]
 802e110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802e112:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 802e114:	687b      	ldr	r3, [r7, #4]
 802e116:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802e118:	f003 031f 	and.w	r3, r3, #31
 802e11c:	2201      	movs	r2, #1
 802e11e:	409a      	lsls	r2, r3
 802e120:	68fb      	ldr	r3, [r7, #12]
 802e122:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 802e124:	687b      	ldr	r3, [r7, #4]
 802e126:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802e128:	687a      	ldr	r2, [r7, #4]
 802e12a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 802e12c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 802e12e:	687b      	ldr	r3, [r7, #4]
 802e130:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802e132:	2b00      	cmp	r3, #0
 802e134:	d00c      	beq.n	802e150 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 802e136:	687b      	ldr	r3, [r7, #4]
 802e138:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802e13a:	681a      	ldr	r2, [r3, #0]
 802e13c:	687b      	ldr	r3, [r7, #4]
 802e13e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802e140:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 802e144:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 802e146:	687b      	ldr	r3, [r7, #4]
 802e148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802e14a:	687a      	ldr	r2, [r7, #4]
 802e14c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 802e14e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 802e150:	687b      	ldr	r3, [r7, #4]
 802e152:	2201      	movs	r2, #1
 802e154:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 802e158:	687b      	ldr	r3, [r7, #4]
 802e15a:	2200      	movs	r2, #0
 802e15c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 802e160:	687b      	ldr	r3, [r7, #4]
 802e162:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802e164:	2b00      	cmp	r3, #0
 802e166:	d003      	beq.n	802e170 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 802e168:	687b      	ldr	r3, [r7, #4]
 802e16a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802e16c:	6878      	ldr	r0, [r7, #4]
 802e16e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 802e170:	2300      	movs	r3, #0
}
 802e172:	4618      	mov	r0, r3
 802e174:	3710      	adds	r7, #16
 802e176:	46bd      	mov	sp, r7
 802e178:	bd80      	pop	{r7, pc}
 802e17a:	bf00      	nop

0802e17c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 802e17c:	b580      	push	{r7, lr}
 802e17e:	b08a      	sub	sp, #40	; 0x28
 802e180:	af00      	add	r7, sp, #0
 802e182:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 802e184:	2300      	movs	r3, #0
 802e186:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 802e188:	4b67      	ldr	r3, [pc, #412]	; (802e328 <HAL_DMA_IRQHandler+0x1ac>)
 802e18a:	681b      	ldr	r3, [r3, #0]
 802e18c:	4a67      	ldr	r2, [pc, #412]	; (802e32c <HAL_DMA_IRQHandler+0x1b0>)
 802e18e:	fba2 2303 	umull	r2, r3, r2, r3
 802e192:	0a9b      	lsrs	r3, r3, #10
 802e194:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 802e196:	687b      	ldr	r3, [r7, #4]
 802e198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802e19a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 802e19c:	687b      	ldr	r3, [r7, #4]
 802e19e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802e1a0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 802e1a2:	6a3b      	ldr	r3, [r7, #32]
 802e1a4:	681b      	ldr	r3, [r3, #0]
 802e1a6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 802e1a8:	69fb      	ldr	r3, [r7, #28]
 802e1aa:	681b      	ldr	r3, [r3, #0]
 802e1ac:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 802e1ae:	687b      	ldr	r3, [r7, #4]
 802e1b0:	681b      	ldr	r3, [r3, #0]
 802e1b2:	4a5f      	ldr	r2, [pc, #380]	; (802e330 <HAL_DMA_IRQHandler+0x1b4>)
 802e1b4:	4293      	cmp	r3, r2
 802e1b6:	d04a      	beq.n	802e24e <HAL_DMA_IRQHandler+0xd2>
 802e1b8:	687b      	ldr	r3, [r7, #4]
 802e1ba:	681b      	ldr	r3, [r3, #0]
 802e1bc:	4a5d      	ldr	r2, [pc, #372]	; (802e334 <HAL_DMA_IRQHandler+0x1b8>)
 802e1be:	4293      	cmp	r3, r2
 802e1c0:	d045      	beq.n	802e24e <HAL_DMA_IRQHandler+0xd2>
 802e1c2:	687b      	ldr	r3, [r7, #4]
 802e1c4:	681b      	ldr	r3, [r3, #0]
 802e1c6:	4a5c      	ldr	r2, [pc, #368]	; (802e338 <HAL_DMA_IRQHandler+0x1bc>)
 802e1c8:	4293      	cmp	r3, r2
 802e1ca:	d040      	beq.n	802e24e <HAL_DMA_IRQHandler+0xd2>
 802e1cc:	687b      	ldr	r3, [r7, #4]
 802e1ce:	681b      	ldr	r3, [r3, #0]
 802e1d0:	4a5a      	ldr	r2, [pc, #360]	; (802e33c <HAL_DMA_IRQHandler+0x1c0>)
 802e1d2:	4293      	cmp	r3, r2
 802e1d4:	d03b      	beq.n	802e24e <HAL_DMA_IRQHandler+0xd2>
 802e1d6:	687b      	ldr	r3, [r7, #4]
 802e1d8:	681b      	ldr	r3, [r3, #0]
 802e1da:	4a59      	ldr	r2, [pc, #356]	; (802e340 <HAL_DMA_IRQHandler+0x1c4>)
 802e1dc:	4293      	cmp	r3, r2
 802e1de:	d036      	beq.n	802e24e <HAL_DMA_IRQHandler+0xd2>
 802e1e0:	687b      	ldr	r3, [r7, #4]
 802e1e2:	681b      	ldr	r3, [r3, #0]
 802e1e4:	4a57      	ldr	r2, [pc, #348]	; (802e344 <HAL_DMA_IRQHandler+0x1c8>)
 802e1e6:	4293      	cmp	r3, r2
 802e1e8:	d031      	beq.n	802e24e <HAL_DMA_IRQHandler+0xd2>
 802e1ea:	687b      	ldr	r3, [r7, #4]
 802e1ec:	681b      	ldr	r3, [r3, #0]
 802e1ee:	4a56      	ldr	r2, [pc, #344]	; (802e348 <HAL_DMA_IRQHandler+0x1cc>)
 802e1f0:	4293      	cmp	r3, r2
 802e1f2:	d02c      	beq.n	802e24e <HAL_DMA_IRQHandler+0xd2>
 802e1f4:	687b      	ldr	r3, [r7, #4]
 802e1f6:	681b      	ldr	r3, [r3, #0]
 802e1f8:	4a54      	ldr	r2, [pc, #336]	; (802e34c <HAL_DMA_IRQHandler+0x1d0>)
 802e1fa:	4293      	cmp	r3, r2
 802e1fc:	d027      	beq.n	802e24e <HAL_DMA_IRQHandler+0xd2>
 802e1fe:	687b      	ldr	r3, [r7, #4]
 802e200:	681b      	ldr	r3, [r3, #0]
 802e202:	4a53      	ldr	r2, [pc, #332]	; (802e350 <HAL_DMA_IRQHandler+0x1d4>)
 802e204:	4293      	cmp	r3, r2
 802e206:	d022      	beq.n	802e24e <HAL_DMA_IRQHandler+0xd2>
 802e208:	687b      	ldr	r3, [r7, #4]
 802e20a:	681b      	ldr	r3, [r3, #0]
 802e20c:	4a51      	ldr	r2, [pc, #324]	; (802e354 <HAL_DMA_IRQHandler+0x1d8>)
 802e20e:	4293      	cmp	r3, r2
 802e210:	d01d      	beq.n	802e24e <HAL_DMA_IRQHandler+0xd2>
 802e212:	687b      	ldr	r3, [r7, #4]
 802e214:	681b      	ldr	r3, [r3, #0]
 802e216:	4a50      	ldr	r2, [pc, #320]	; (802e358 <HAL_DMA_IRQHandler+0x1dc>)
 802e218:	4293      	cmp	r3, r2
 802e21a:	d018      	beq.n	802e24e <HAL_DMA_IRQHandler+0xd2>
 802e21c:	687b      	ldr	r3, [r7, #4]
 802e21e:	681b      	ldr	r3, [r3, #0]
 802e220:	4a4e      	ldr	r2, [pc, #312]	; (802e35c <HAL_DMA_IRQHandler+0x1e0>)
 802e222:	4293      	cmp	r3, r2
 802e224:	d013      	beq.n	802e24e <HAL_DMA_IRQHandler+0xd2>
 802e226:	687b      	ldr	r3, [r7, #4]
 802e228:	681b      	ldr	r3, [r3, #0]
 802e22a:	4a4d      	ldr	r2, [pc, #308]	; (802e360 <HAL_DMA_IRQHandler+0x1e4>)
 802e22c:	4293      	cmp	r3, r2
 802e22e:	d00e      	beq.n	802e24e <HAL_DMA_IRQHandler+0xd2>
 802e230:	687b      	ldr	r3, [r7, #4]
 802e232:	681b      	ldr	r3, [r3, #0]
 802e234:	4a4b      	ldr	r2, [pc, #300]	; (802e364 <HAL_DMA_IRQHandler+0x1e8>)
 802e236:	4293      	cmp	r3, r2
 802e238:	d009      	beq.n	802e24e <HAL_DMA_IRQHandler+0xd2>
 802e23a:	687b      	ldr	r3, [r7, #4]
 802e23c:	681b      	ldr	r3, [r3, #0]
 802e23e:	4a4a      	ldr	r2, [pc, #296]	; (802e368 <HAL_DMA_IRQHandler+0x1ec>)
 802e240:	4293      	cmp	r3, r2
 802e242:	d004      	beq.n	802e24e <HAL_DMA_IRQHandler+0xd2>
 802e244:	687b      	ldr	r3, [r7, #4]
 802e246:	681b      	ldr	r3, [r3, #0]
 802e248:	4a48      	ldr	r2, [pc, #288]	; (802e36c <HAL_DMA_IRQHandler+0x1f0>)
 802e24a:	4293      	cmp	r3, r2
 802e24c:	d101      	bne.n	802e252 <HAL_DMA_IRQHandler+0xd6>
 802e24e:	2301      	movs	r3, #1
 802e250:	e000      	b.n	802e254 <HAL_DMA_IRQHandler+0xd8>
 802e252:	2300      	movs	r3, #0
 802e254:	2b00      	cmp	r3, #0
 802e256:	f000 842b 	beq.w	802eab0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 802e25a:	687b      	ldr	r3, [r7, #4]
 802e25c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802e25e:	f003 031f 	and.w	r3, r3, #31
 802e262:	2208      	movs	r2, #8
 802e264:	409a      	lsls	r2, r3
 802e266:	69bb      	ldr	r3, [r7, #24]
 802e268:	4013      	ands	r3, r2
 802e26a:	2b00      	cmp	r3, #0
 802e26c:	f000 80a2 	beq.w	802e3b4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 802e270:	687b      	ldr	r3, [r7, #4]
 802e272:	681b      	ldr	r3, [r3, #0]
 802e274:	4a2e      	ldr	r2, [pc, #184]	; (802e330 <HAL_DMA_IRQHandler+0x1b4>)
 802e276:	4293      	cmp	r3, r2
 802e278:	d04a      	beq.n	802e310 <HAL_DMA_IRQHandler+0x194>
 802e27a:	687b      	ldr	r3, [r7, #4]
 802e27c:	681b      	ldr	r3, [r3, #0]
 802e27e:	4a2d      	ldr	r2, [pc, #180]	; (802e334 <HAL_DMA_IRQHandler+0x1b8>)
 802e280:	4293      	cmp	r3, r2
 802e282:	d045      	beq.n	802e310 <HAL_DMA_IRQHandler+0x194>
 802e284:	687b      	ldr	r3, [r7, #4]
 802e286:	681b      	ldr	r3, [r3, #0]
 802e288:	4a2b      	ldr	r2, [pc, #172]	; (802e338 <HAL_DMA_IRQHandler+0x1bc>)
 802e28a:	4293      	cmp	r3, r2
 802e28c:	d040      	beq.n	802e310 <HAL_DMA_IRQHandler+0x194>
 802e28e:	687b      	ldr	r3, [r7, #4]
 802e290:	681b      	ldr	r3, [r3, #0]
 802e292:	4a2a      	ldr	r2, [pc, #168]	; (802e33c <HAL_DMA_IRQHandler+0x1c0>)
 802e294:	4293      	cmp	r3, r2
 802e296:	d03b      	beq.n	802e310 <HAL_DMA_IRQHandler+0x194>
 802e298:	687b      	ldr	r3, [r7, #4]
 802e29a:	681b      	ldr	r3, [r3, #0]
 802e29c:	4a28      	ldr	r2, [pc, #160]	; (802e340 <HAL_DMA_IRQHandler+0x1c4>)
 802e29e:	4293      	cmp	r3, r2
 802e2a0:	d036      	beq.n	802e310 <HAL_DMA_IRQHandler+0x194>
 802e2a2:	687b      	ldr	r3, [r7, #4]
 802e2a4:	681b      	ldr	r3, [r3, #0]
 802e2a6:	4a27      	ldr	r2, [pc, #156]	; (802e344 <HAL_DMA_IRQHandler+0x1c8>)
 802e2a8:	4293      	cmp	r3, r2
 802e2aa:	d031      	beq.n	802e310 <HAL_DMA_IRQHandler+0x194>
 802e2ac:	687b      	ldr	r3, [r7, #4]
 802e2ae:	681b      	ldr	r3, [r3, #0]
 802e2b0:	4a25      	ldr	r2, [pc, #148]	; (802e348 <HAL_DMA_IRQHandler+0x1cc>)
 802e2b2:	4293      	cmp	r3, r2
 802e2b4:	d02c      	beq.n	802e310 <HAL_DMA_IRQHandler+0x194>
 802e2b6:	687b      	ldr	r3, [r7, #4]
 802e2b8:	681b      	ldr	r3, [r3, #0]
 802e2ba:	4a24      	ldr	r2, [pc, #144]	; (802e34c <HAL_DMA_IRQHandler+0x1d0>)
 802e2bc:	4293      	cmp	r3, r2
 802e2be:	d027      	beq.n	802e310 <HAL_DMA_IRQHandler+0x194>
 802e2c0:	687b      	ldr	r3, [r7, #4]
 802e2c2:	681b      	ldr	r3, [r3, #0]
 802e2c4:	4a22      	ldr	r2, [pc, #136]	; (802e350 <HAL_DMA_IRQHandler+0x1d4>)
 802e2c6:	4293      	cmp	r3, r2
 802e2c8:	d022      	beq.n	802e310 <HAL_DMA_IRQHandler+0x194>
 802e2ca:	687b      	ldr	r3, [r7, #4]
 802e2cc:	681b      	ldr	r3, [r3, #0]
 802e2ce:	4a21      	ldr	r2, [pc, #132]	; (802e354 <HAL_DMA_IRQHandler+0x1d8>)
 802e2d0:	4293      	cmp	r3, r2
 802e2d2:	d01d      	beq.n	802e310 <HAL_DMA_IRQHandler+0x194>
 802e2d4:	687b      	ldr	r3, [r7, #4]
 802e2d6:	681b      	ldr	r3, [r3, #0]
 802e2d8:	4a1f      	ldr	r2, [pc, #124]	; (802e358 <HAL_DMA_IRQHandler+0x1dc>)
 802e2da:	4293      	cmp	r3, r2
 802e2dc:	d018      	beq.n	802e310 <HAL_DMA_IRQHandler+0x194>
 802e2de:	687b      	ldr	r3, [r7, #4]
 802e2e0:	681b      	ldr	r3, [r3, #0]
 802e2e2:	4a1e      	ldr	r2, [pc, #120]	; (802e35c <HAL_DMA_IRQHandler+0x1e0>)
 802e2e4:	4293      	cmp	r3, r2
 802e2e6:	d013      	beq.n	802e310 <HAL_DMA_IRQHandler+0x194>
 802e2e8:	687b      	ldr	r3, [r7, #4]
 802e2ea:	681b      	ldr	r3, [r3, #0]
 802e2ec:	4a1c      	ldr	r2, [pc, #112]	; (802e360 <HAL_DMA_IRQHandler+0x1e4>)
 802e2ee:	4293      	cmp	r3, r2
 802e2f0:	d00e      	beq.n	802e310 <HAL_DMA_IRQHandler+0x194>
 802e2f2:	687b      	ldr	r3, [r7, #4]
 802e2f4:	681b      	ldr	r3, [r3, #0]
 802e2f6:	4a1b      	ldr	r2, [pc, #108]	; (802e364 <HAL_DMA_IRQHandler+0x1e8>)
 802e2f8:	4293      	cmp	r3, r2
 802e2fa:	d009      	beq.n	802e310 <HAL_DMA_IRQHandler+0x194>
 802e2fc:	687b      	ldr	r3, [r7, #4]
 802e2fe:	681b      	ldr	r3, [r3, #0]
 802e300:	4a19      	ldr	r2, [pc, #100]	; (802e368 <HAL_DMA_IRQHandler+0x1ec>)
 802e302:	4293      	cmp	r3, r2
 802e304:	d004      	beq.n	802e310 <HAL_DMA_IRQHandler+0x194>
 802e306:	687b      	ldr	r3, [r7, #4]
 802e308:	681b      	ldr	r3, [r3, #0]
 802e30a:	4a18      	ldr	r2, [pc, #96]	; (802e36c <HAL_DMA_IRQHandler+0x1f0>)
 802e30c:	4293      	cmp	r3, r2
 802e30e:	d12f      	bne.n	802e370 <HAL_DMA_IRQHandler+0x1f4>
 802e310:	687b      	ldr	r3, [r7, #4]
 802e312:	681b      	ldr	r3, [r3, #0]
 802e314:	681b      	ldr	r3, [r3, #0]
 802e316:	f003 0304 	and.w	r3, r3, #4
 802e31a:	2b00      	cmp	r3, #0
 802e31c:	bf14      	ite	ne
 802e31e:	2301      	movne	r3, #1
 802e320:	2300      	moveq	r3, #0
 802e322:	b2db      	uxtb	r3, r3
 802e324:	e02e      	b.n	802e384 <HAL_DMA_IRQHandler+0x208>
 802e326:	bf00      	nop
 802e328:	24000000 	.word	0x24000000
 802e32c:	1b4e81b5 	.word	0x1b4e81b5
 802e330:	40020010 	.word	0x40020010
 802e334:	40020028 	.word	0x40020028
 802e338:	40020040 	.word	0x40020040
 802e33c:	40020058 	.word	0x40020058
 802e340:	40020070 	.word	0x40020070
 802e344:	40020088 	.word	0x40020088
 802e348:	400200a0 	.word	0x400200a0
 802e34c:	400200b8 	.word	0x400200b8
 802e350:	40020410 	.word	0x40020410
 802e354:	40020428 	.word	0x40020428
 802e358:	40020440 	.word	0x40020440
 802e35c:	40020458 	.word	0x40020458
 802e360:	40020470 	.word	0x40020470
 802e364:	40020488 	.word	0x40020488
 802e368:	400204a0 	.word	0x400204a0
 802e36c:	400204b8 	.word	0x400204b8
 802e370:	687b      	ldr	r3, [r7, #4]
 802e372:	681b      	ldr	r3, [r3, #0]
 802e374:	681b      	ldr	r3, [r3, #0]
 802e376:	f003 0308 	and.w	r3, r3, #8
 802e37a:	2b00      	cmp	r3, #0
 802e37c:	bf14      	ite	ne
 802e37e:	2301      	movne	r3, #1
 802e380:	2300      	moveq	r3, #0
 802e382:	b2db      	uxtb	r3, r3
 802e384:	2b00      	cmp	r3, #0
 802e386:	d015      	beq.n	802e3b4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 802e388:	687b      	ldr	r3, [r7, #4]
 802e38a:	681b      	ldr	r3, [r3, #0]
 802e38c:	681a      	ldr	r2, [r3, #0]
 802e38e:	687b      	ldr	r3, [r7, #4]
 802e390:	681b      	ldr	r3, [r3, #0]
 802e392:	f022 0204 	bic.w	r2, r2, #4
 802e396:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 802e398:	687b      	ldr	r3, [r7, #4]
 802e39a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802e39c:	f003 031f 	and.w	r3, r3, #31
 802e3a0:	2208      	movs	r2, #8
 802e3a2:	409a      	lsls	r2, r3
 802e3a4:	6a3b      	ldr	r3, [r7, #32]
 802e3a6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 802e3a8:	687b      	ldr	r3, [r7, #4]
 802e3aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802e3ac:	f043 0201 	orr.w	r2, r3, #1
 802e3b0:	687b      	ldr	r3, [r7, #4]
 802e3b2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 802e3b4:	687b      	ldr	r3, [r7, #4]
 802e3b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802e3b8:	f003 031f 	and.w	r3, r3, #31
 802e3bc:	69ba      	ldr	r2, [r7, #24]
 802e3be:	fa22 f303 	lsr.w	r3, r2, r3
 802e3c2:	f003 0301 	and.w	r3, r3, #1
 802e3c6:	2b00      	cmp	r3, #0
 802e3c8:	d06e      	beq.n	802e4a8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 802e3ca:	687b      	ldr	r3, [r7, #4]
 802e3cc:	681b      	ldr	r3, [r3, #0]
 802e3ce:	4a69      	ldr	r2, [pc, #420]	; (802e574 <HAL_DMA_IRQHandler+0x3f8>)
 802e3d0:	4293      	cmp	r3, r2
 802e3d2:	d04a      	beq.n	802e46a <HAL_DMA_IRQHandler+0x2ee>
 802e3d4:	687b      	ldr	r3, [r7, #4]
 802e3d6:	681b      	ldr	r3, [r3, #0]
 802e3d8:	4a67      	ldr	r2, [pc, #412]	; (802e578 <HAL_DMA_IRQHandler+0x3fc>)
 802e3da:	4293      	cmp	r3, r2
 802e3dc:	d045      	beq.n	802e46a <HAL_DMA_IRQHandler+0x2ee>
 802e3de:	687b      	ldr	r3, [r7, #4]
 802e3e0:	681b      	ldr	r3, [r3, #0]
 802e3e2:	4a66      	ldr	r2, [pc, #408]	; (802e57c <HAL_DMA_IRQHandler+0x400>)
 802e3e4:	4293      	cmp	r3, r2
 802e3e6:	d040      	beq.n	802e46a <HAL_DMA_IRQHandler+0x2ee>
 802e3e8:	687b      	ldr	r3, [r7, #4]
 802e3ea:	681b      	ldr	r3, [r3, #0]
 802e3ec:	4a64      	ldr	r2, [pc, #400]	; (802e580 <HAL_DMA_IRQHandler+0x404>)
 802e3ee:	4293      	cmp	r3, r2
 802e3f0:	d03b      	beq.n	802e46a <HAL_DMA_IRQHandler+0x2ee>
 802e3f2:	687b      	ldr	r3, [r7, #4]
 802e3f4:	681b      	ldr	r3, [r3, #0]
 802e3f6:	4a63      	ldr	r2, [pc, #396]	; (802e584 <HAL_DMA_IRQHandler+0x408>)
 802e3f8:	4293      	cmp	r3, r2
 802e3fa:	d036      	beq.n	802e46a <HAL_DMA_IRQHandler+0x2ee>
 802e3fc:	687b      	ldr	r3, [r7, #4]
 802e3fe:	681b      	ldr	r3, [r3, #0]
 802e400:	4a61      	ldr	r2, [pc, #388]	; (802e588 <HAL_DMA_IRQHandler+0x40c>)
 802e402:	4293      	cmp	r3, r2
 802e404:	d031      	beq.n	802e46a <HAL_DMA_IRQHandler+0x2ee>
 802e406:	687b      	ldr	r3, [r7, #4]
 802e408:	681b      	ldr	r3, [r3, #0]
 802e40a:	4a60      	ldr	r2, [pc, #384]	; (802e58c <HAL_DMA_IRQHandler+0x410>)
 802e40c:	4293      	cmp	r3, r2
 802e40e:	d02c      	beq.n	802e46a <HAL_DMA_IRQHandler+0x2ee>
 802e410:	687b      	ldr	r3, [r7, #4]
 802e412:	681b      	ldr	r3, [r3, #0]
 802e414:	4a5e      	ldr	r2, [pc, #376]	; (802e590 <HAL_DMA_IRQHandler+0x414>)
 802e416:	4293      	cmp	r3, r2
 802e418:	d027      	beq.n	802e46a <HAL_DMA_IRQHandler+0x2ee>
 802e41a:	687b      	ldr	r3, [r7, #4]
 802e41c:	681b      	ldr	r3, [r3, #0]
 802e41e:	4a5d      	ldr	r2, [pc, #372]	; (802e594 <HAL_DMA_IRQHandler+0x418>)
 802e420:	4293      	cmp	r3, r2
 802e422:	d022      	beq.n	802e46a <HAL_DMA_IRQHandler+0x2ee>
 802e424:	687b      	ldr	r3, [r7, #4]
 802e426:	681b      	ldr	r3, [r3, #0]
 802e428:	4a5b      	ldr	r2, [pc, #364]	; (802e598 <HAL_DMA_IRQHandler+0x41c>)
 802e42a:	4293      	cmp	r3, r2
 802e42c:	d01d      	beq.n	802e46a <HAL_DMA_IRQHandler+0x2ee>
 802e42e:	687b      	ldr	r3, [r7, #4]
 802e430:	681b      	ldr	r3, [r3, #0]
 802e432:	4a5a      	ldr	r2, [pc, #360]	; (802e59c <HAL_DMA_IRQHandler+0x420>)
 802e434:	4293      	cmp	r3, r2
 802e436:	d018      	beq.n	802e46a <HAL_DMA_IRQHandler+0x2ee>
 802e438:	687b      	ldr	r3, [r7, #4]
 802e43a:	681b      	ldr	r3, [r3, #0]
 802e43c:	4a58      	ldr	r2, [pc, #352]	; (802e5a0 <HAL_DMA_IRQHandler+0x424>)
 802e43e:	4293      	cmp	r3, r2
 802e440:	d013      	beq.n	802e46a <HAL_DMA_IRQHandler+0x2ee>
 802e442:	687b      	ldr	r3, [r7, #4]
 802e444:	681b      	ldr	r3, [r3, #0]
 802e446:	4a57      	ldr	r2, [pc, #348]	; (802e5a4 <HAL_DMA_IRQHandler+0x428>)
 802e448:	4293      	cmp	r3, r2
 802e44a:	d00e      	beq.n	802e46a <HAL_DMA_IRQHandler+0x2ee>
 802e44c:	687b      	ldr	r3, [r7, #4]
 802e44e:	681b      	ldr	r3, [r3, #0]
 802e450:	4a55      	ldr	r2, [pc, #340]	; (802e5a8 <HAL_DMA_IRQHandler+0x42c>)
 802e452:	4293      	cmp	r3, r2
 802e454:	d009      	beq.n	802e46a <HAL_DMA_IRQHandler+0x2ee>
 802e456:	687b      	ldr	r3, [r7, #4]
 802e458:	681b      	ldr	r3, [r3, #0]
 802e45a:	4a54      	ldr	r2, [pc, #336]	; (802e5ac <HAL_DMA_IRQHandler+0x430>)
 802e45c:	4293      	cmp	r3, r2
 802e45e:	d004      	beq.n	802e46a <HAL_DMA_IRQHandler+0x2ee>
 802e460:	687b      	ldr	r3, [r7, #4]
 802e462:	681b      	ldr	r3, [r3, #0]
 802e464:	4a52      	ldr	r2, [pc, #328]	; (802e5b0 <HAL_DMA_IRQHandler+0x434>)
 802e466:	4293      	cmp	r3, r2
 802e468:	d10a      	bne.n	802e480 <HAL_DMA_IRQHandler+0x304>
 802e46a:	687b      	ldr	r3, [r7, #4]
 802e46c:	681b      	ldr	r3, [r3, #0]
 802e46e:	695b      	ldr	r3, [r3, #20]
 802e470:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802e474:	2b00      	cmp	r3, #0
 802e476:	bf14      	ite	ne
 802e478:	2301      	movne	r3, #1
 802e47a:	2300      	moveq	r3, #0
 802e47c:	b2db      	uxtb	r3, r3
 802e47e:	e003      	b.n	802e488 <HAL_DMA_IRQHandler+0x30c>
 802e480:	687b      	ldr	r3, [r7, #4]
 802e482:	681b      	ldr	r3, [r3, #0]
 802e484:	681b      	ldr	r3, [r3, #0]
 802e486:	2300      	movs	r3, #0
 802e488:	2b00      	cmp	r3, #0
 802e48a:	d00d      	beq.n	802e4a8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 802e48c:	687b      	ldr	r3, [r7, #4]
 802e48e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802e490:	f003 031f 	and.w	r3, r3, #31
 802e494:	2201      	movs	r2, #1
 802e496:	409a      	lsls	r2, r3
 802e498:	6a3b      	ldr	r3, [r7, #32]
 802e49a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 802e49c:	687b      	ldr	r3, [r7, #4]
 802e49e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802e4a0:	f043 0202 	orr.w	r2, r3, #2
 802e4a4:	687b      	ldr	r3, [r7, #4]
 802e4a6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 802e4a8:	687b      	ldr	r3, [r7, #4]
 802e4aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802e4ac:	f003 031f 	and.w	r3, r3, #31
 802e4b0:	2204      	movs	r2, #4
 802e4b2:	409a      	lsls	r2, r3
 802e4b4:	69bb      	ldr	r3, [r7, #24]
 802e4b6:	4013      	ands	r3, r2
 802e4b8:	2b00      	cmp	r3, #0
 802e4ba:	f000 808f 	beq.w	802e5dc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 802e4be:	687b      	ldr	r3, [r7, #4]
 802e4c0:	681b      	ldr	r3, [r3, #0]
 802e4c2:	4a2c      	ldr	r2, [pc, #176]	; (802e574 <HAL_DMA_IRQHandler+0x3f8>)
 802e4c4:	4293      	cmp	r3, r2
 802e4c6:	d04a      	beq.n	802e55e <HAL_DMA_IRQHandler+0x3e2>
 802e4c8:	687b      	ldr	r3, [r7, #4]
 802e4ca:	681b      	ldr	r3, [r3, #0]
 802e4cc:	4a2a      	ldr	r2, [pc, #168]	; (802e578 <HAL_DMA_IRQHandler+0x3fc>)
 802e4ce:	4293      	cmp	r3, r2
 802e4d0:	d045      	beq.n	802e55e <HAL_DMA_IRQHandler+0x3e2>
 802e4d2:	687b      	ldr	r3, [r7, #4]
 802e4d4:	681b      	ldr	r3, [r3, #0]
 802e4d6:	4a29      	ldr	r2, [pc, #164]	; (802e57c <HAL_DMA_IRQHandler+0x400>)
 802e4d8:	4293      	cmp	r3, r2
 802e4da:	d040      	beq.n	802e55e <HAL_DMA_IRQHandler+0x3e2>
 802e4dc:	687b      	ldr	r3, [r7, #4]
 802e4de:	681b      	ldr	r3, [r3, #0]
 802e4e0:	4a27      	ldr	r2, [pc, #156]	; (802e580 <HAL_DMA_IRQHandler+0x404>)
 802e4e2:	4293      	cmp	r3, r2
 802e4e4:	d03b      	beq.n	802e55e <HAL_DMA_IRQHandler+0x3e2>
 802e4e6:	687b      	ldr	r3, [r7, #4]
 802e4e8:	681b      	ldr	r3, [r3, #0]
 802e4ea:	4a26      	ldr	r2, [pc, #152]	; (802e584 <HAL_DMA_IRQHandler+0x408>)
 802e4ec:	4293      	cmp	r3, r2
 802e4ee:	d036      	beq.n	802e55e <HAL_DMA_IRQHandler+0x3e2>
 802e4f0:	687b      	ldr	r3, [r7, #4]
 802e4f2:	681b      	ldr	r3, [r3, #0]
 802e4f4:	4a24      	ldr	r2, [pc, #144]	; (802e588 <HAL_DMA_IRQHandler+0x40c>)
 802e4f6:	4293      	cmp	r3, r2
 802e4f8:	d031      	beq.n	802e55e <HAL_DMA_IRQHandler+0x3e2>
 802e4fa:	687b      	ldr	r3, [r7, #4]
 802e4fc:	681b      	ldr	r3, [r3, #0]
 802e4fe:	4a23      	ldr	r2, [pc, #140]	; (802e58c <HAL_DMA_IRQHandler+0x410>)
 802e500:	4293      	cmp	r3, r2
 802e502:	d02c      	beq.n	802e55e <HAL_DMA_IRQHandler+0x3e2>
 802e504:	687b      	ldr	r3, [r7, #4]
 802e506:	681b      	ldr	r3, [r3, #0]
 802e508:	4a21      	ldr	r2, [pc, #132]	; (802e590 <HAL_DMA_IRQHandler+0x414>)
 802e50a:	4293      	cmp	r3, r2
 802e50c:	d027      	beq.n	802e55e <HAL_DMA_IRQHandler+0x3e2>
 802e50e:	687b      	ldr	r3, [r7, #4]
 802e510:	681b      	ldr	r3, [r3, #0]
 802e512:	4a20      	ldr	r2, [pc, #128]	; (802e594 <HAL_DMA_IRQHandler+0x418>)
 802e514:	4293      	cmp	r3, r2
 802e516:	d022      	beq.n	802e55e <HAL_DMA_IRQHandler+0x3e2>
 802e518:	687b      	ldr	r3, [r7, #4]
 802e51a:	681b      	ldr	r3, [r3, #0]
 802e51c:	4a1e      	ldr	r2, [pc, #120]	; (802e598 <HAL_DMA_IRQHandler+0x41c>)
 802e51e:	4293      	cmp	r3, r2
 802e520:	d01d      	beq.n	802e55e <HAL_DMA_IRQHandler+0x3e2>
 802e522:	687b      	ldr	r3, [r7, #4]
 802e524:	681b      	ldr	r3, [r3, #0]
 802e526:	4a1d      	ldr	r2, [pc, #116]	; (802e59c <HAL_DMA_IRQHandler+0x420>)
 802e528:	4293      	cmp	r3, r2
 802e52a:	d018      	beq.n	802e55e <HAL_DMA_IRQHandler+0x3e2>
 802e52c:	687b      	ldr	r3, [r7, #4]
 802e52e:	681b      	ldr	r3, [r3, #0]
 802e530:	4a1b      	ldr	r2, [pc, #108]	; (802e5a0 <HAL_DMA_IRQHandler+0x424>)
 802e532:	4293      	cmp	r3, r2
 802e534:	d013      	beq.n	802e55e <HAL_DMA_IRQHandler+0x3e2>
 802e536:	687b      	ldr	r3, [r7, #4]
 802e538:	681b      	ldr	r3, [r3, #0]
 802e53a:	4a1a      	ldr	r2, [pc, #104]	; (802e5a4 <HAL_DMA_IRQHandler+0x428>)
 802e53c:	4293      	cmp	r3, r2
 802e53e:	d00e      	beq.n	802e55e <HAL_DMA_IRQHandler+0x3e2>
 802e540:	687b      	ldr	r3, [r7, #4]
 802e542:	681b      	ldr	r3, [r3, #0]
 802e544:	4a18      	ldr	r2, [pc, #96]	; (802e5a8 <HAL_DMA_IRQHandler+0x42c>)
 802e546:	4293      	cmp	r3, r2
 802e548:	d009      	beq.n	802e55e <HAL_DMA_IRQHandler+0x3e2>
 802e54a:	687b      	ldr	r3, [r7, #4]
 802e54c:	681b      	ldr	r3, [r3, #0]
 802e54e:	4a17      	ldr	r2, [pc, #92]	; (802e5ac <HAL_DMA_IRQHandler+0x430>)
 802e550:	4293      	cmp	r3, r2
 802e552:	d004      	beq.n	802e55e <HAL_DMA_IRQHandler+0x3e2>
 802e554:	687b      	ldr	r3, [r7, #4]
 802e556:	681b      	ldr	r3, [r3, #0]
 802e558:	4a15      	ldr	r2, [pc, #84]	; (802e5b0 <HAL_DMA_IRQHandler+0x434>)
 802e55a:	4293      	cmp	r3, r2
 802e55c:	d12a      	bne.n	802e5b4 <HAL_DMA_IRQHandler+0x438>
 802e55e:	687b      	ldr	r3, [r7, #4]
 802e560:	681b      	ldr	r3, [r3, #0]
 802e562:	681b      	ldr	r3, [r3, #0]
 802e564:	f003 0302 	and.w	r3, r3, #2
 802e568:	2b00      	cmp	r3, #0
 802e56a:	bf14      	ite	ne
 802e56c:	2301      	movne	r3, #1
 802e56e:	2300      	moveq	r3, #0
 802e570:	b2db      	uxtb	r3, r3
 802e572:	e023      	b.n	802e5bc <HAL_DMA_IRQHandler+0x440>
 802e574:	40020010 	.word	0x40020010
 802e578:	40020028 	.word	0x40020028
 802e57c:	40020040 	.word	0x40020040
 802e580:	40020058 	.word	0x40020058
 802e584:	40020070 	.word	0x40020070
 802e588:	40020088 	.word	0x40020088
 802e58c:	400200a0 	.word	0x400200a0
 802e590:	400200b8 	.word	0x400200b8
 802e594:	40020410 	.word	0x40020410
 802e598:	40020428 	.word	0x40020428
 802e59c:	40020440 	.word	0x40020440
 802e5a0:	40020458 	.word	0x40020458
 802e5a4:	40020470 	.word	0x40020470
 802e5a8:	40020488 	.word	0x40020488
 802e5ac:	400204a0 	.word	0x400204a0
 802e5b0:	400204b8 	.word	0x400204b8
 802e5b4:	687b      	ldr	r3, [r7, #4]
 802e5b6:	681b      	ldr	r3, [r3, #0]
 802e5b8:	681b      	ldr	r3, [r3, #0]
 802e5ba:	2300      	movs	r3, #0
 802e5bc:	2b00      	cmp	r3, #0
 802e5be:	d00d      	beq.n	802e5dc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 802e5c0:	687b      	ldr	r3, [r7, #4]
 802e5c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802e5c4:	f003 031f 	and.w	r3, r3, #31
 802e5c8:	2204      	movs	r2, #4
 802e5ca:	409a      	lsls	r2, r3
 802e5cc:	6a3b      	ldr	r3, [r7, #32]
 802e5ce:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 802e5d0:	687b      	ldr	r3, [r7, #4]
 802e5d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802e5d4:	f043 0204 	orr.w	r2, r3, #4
 802e5d8:	687b      	ldr	r3, [r7, #4]
 802e5da:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 802e5dc:	687b      	ldr	r3, [r7, #4]
 802e5de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802e5e0:	f003 031f 	and.w	r3, r3, #31
 802e5e4:	2210      	movs	r2, #16
 802e5e6:	409a      	lsls	r2, r3
 802e5e8:	69bb      	ldr	r3, [r7, #24]
 802e5ea:	4013      	ands	r3, r2
 802e5ec:	2b00      	cmp	r3, #0
 802e5ee:	f000 80a6 	beq.w	802e73e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 802e5f2:	687b      	ldr	r3, [r7, #4]
 802e5f4:	681b      	ldr	r3, [r3, #0]
 802e5f6:	4a85      	ldr	r2, [pc, #532]	; (802e80c <HAL_DMA_IRQHandler+0x690>)
 802e5f8:	4293      	cmp	r3, r2
 802e5fa:	d04a      	beq.n	802e692 <HAL_DMA_IRQHandler+0x516>
 802e5fc:	687b      	ldr	r3, [r7, #4]
 802e5fe:	681b      	ldr	r3, [r3, #0]
 802e600:	4a83      	ldr	r2, [pc, #524]	; (802e810 <HAL_DMA_IRQHandler+0x694>)
 802e602:	4293      	cmp	r3, r2
 802e604:	d045      	beq.n	802e692 <HAL_DMA_IRQHandler+0x516>
 802e606:	687b      	ldr	r3, [r7, #4]
 802e608:	681b      	ldr	r3, [r3, #0]
 802e60a:	4a82      	ldr	r2, [pc, #520]	; (802e814 <HAL_DMA_IRQHandler+0x698>)
 802e60c:	4293      	cmp	r3, r2
 802e60e:	d040      	beq.n	802e692 <HAL_DMA_IRQHandler+0x516>
 802e610:	687b      	ldr	r3, [r7, #4]
 802e612:	681b      	ldr	r3, [r3, #0]
 802e614:	4a80      	ldr	r2, [pc, #512]	; (802e818 <HAL_DMA_IRQHandler+0x69c>)
 802e616:	4293      	cmp	r3, r2
 802e618:	d03b      	beq.n	802e692 <HAL_DMA_IRQHandler+0x516>
 802e61a:	687b      	ldr	r3, [r7, #4]
 802e61c:	681b      	ldr	r3, [r3, #0]
 802e61e:	4a7f      	ldr	r2, [pc, #508]	; (802e81c <HAL_DMA_IRQHandler+0x6a0>)
 802e620:	4293      	cmp	r3, r2
 802e622:	d036      	beq.n	802e692 <HAL_DMA_IRQHandler+0x516>
 802e624:	687b      	ldr	r3, [r7, #4]
 802e626:	681b      	ldr	r3, [r3, #0]
 802e628:	4a7d      	ldr	r2, [pc, #500]	; (802e820 <HAL_DMA_IRQHandler+0x6a4>)
 802e62a:	4293      	cmp	r3, r2
 802e62c:	d031      	beq.n	802e692 <HAL_DMA_IRQHandler+0x516>
 802e62e:	687b      	ldr	r3, [r7, #4]
 802e630:	681b      	ldr	r3, [r3, #0]
 802e632:	4a7c      	ldr	r2, [pc, #496]	; (802e824 <HAL_DMA_IRQHandler+0x6a8>)
 802e634:	4293      	cmp	r3, r2
 802e636:	d02c      	beq.n	802e692 <HAL_DMA_IRQHandler+0x516>
 802e638:	687b      	ldr	r3, [r7, #4]
 802e63a:	681b      	ldr	r3, [r3, #0]
 802e63c:	4a7a      	ldr	r2, [pc, #488]	; (802e828 <HAL_DMA_IRQHandler+0x6ac>)
 802e63e:	4293      	cmp	r3, r2
 802e640:	d027      	beq.n	802e692 <HAL_DMA_IRQHandler+0x516>
 802e642:	687b      	ldr	r3, [r7, #4]
 802e644:	681b      	ldr	r3, [r3, #0]
 802e646:	4a79      	ldr	r2, [pc, #484]	; (802e82c <HAL_DMA_IRQHandler+0x6b0>)
 802e648:	4293      	cmp	r3, r2
 802e64a:	d022      	beq.n	802e692 <HAL_DMA_IRQHandler+0x516>
 802e64c:	687b      	ldr	r3, [r7, #4]
 802e64e:	681b      	ldr	r3, [r3, #0]
 802e650:	4a77      	ldr	r2, [pc, #476]	; (802e830 <HAL_DMA_IRQHandler+0x6b4>)
 802e652:	4293      	cmp	r3, r2
 802e654:	d01d      	beq.n	802e692 <HAL_DMA_IRQHandler+0x516>
 802e656:	687b      	ldr	r3, [r7, #4]
 802e658:	681b      	ldr	r3, [r3, #0]
 802e65a:	4a76      	ldr	r2, [pc, #472]	; (802e834 <HAL_DMA_IRQHandler+0x6b8>)
 802e65c:	4293      	cmp	r3, r2
 802e65e:	d018      	beq.n	802e692 <HAL_DMA_IRQHandler+0x516>
 802e660:	687b      	ldr	r3, [r7, #4]
 802e662:	681b      	ldr	r3, [r3, #0]
 802e664:	4a74      	ldr	r2, [pc, #464]	; (802e838 <HAL_DMA_IRQHandler+0x6bc>)
 802e666:	4293      	cmp	r3, r2
 802e668:	d013      	beq.n	802e692 <HAL_DMA_IRQHandler+0x516>
 802e66a:	687b      	ldr	r3, [r7, #4]
 802e66c:	681b      	ldr	r3, [r3, #0]
 802e66e:	4a73      	ldr	r2, [pc, #460]	; (802e83c <HAL_DMA_IRQHandler+0x6c0>)
 802e670:	4293      	cmp	r3, r2
 802e672:	d00e      	beq.n	802e692 <HAL_DMA_IRQHandler+0x516>
 802e674:	687b      	ldr	r3, [r7, #4]
 802e676:	681b      	ldr	r3, [r3, #0]
 802e678:	4a71      	ldr	r2, [pc, #452]	; (802e840 <HAL_DMA_IRQHandler+0x6c4>)
 802e67a:	4293      	cmp	r3, r2
 802e67c:	d009      	beq.n	802e692 <HAL_DMA_IRQHandler+0x516>
 802e67e:	687b      	ldr	r3, [r7, #4]
 802e680:	681b      	ldr	r3, [r3, #0]
 802e682:	4a70      	ldr	r2, [pc, #448]	; (802e844 <HAL_DMA_IRQHandler+0x6c8>)
 802e684:	4293      	cmp	r3, r2
 802e686:	d004      	beq.n	802e692 <HAL_DMA_IRQHandler+0x516>
 802e688:	687b      	ldr	r3, [r7, #4]
 802e68a:	681b      	ldr	r3, [r3, #0]
 802e68c:	4a6e      	ldr	r2, [pc, #440]	; (802e848 <HAL_DMA_IRQHandler+0x6cc>)
 802e68e:	4293      	cmp	r3, r2
 802e690:	d10a      	bne.n	802e6a8 <HAL_DMA_IRQHandler+0x52c>
 802e692:	687b      	ldr	r3, [r7, #4]
 802e694:	681b      	ldr	r3, [r3, #0]
 802e696:	681b      	ldr	r3, [r3, #0]
 802e698:	f003 0308 	and.w	r3, r3, #8
 802e69c:	2b00      	cmp	r3, #0
 802e69e:	bf14      	ite	ne
 802e6a0:	2301      	movne	r3, #1
 802e6a2:	2300      	moveq	r3, #0
 802e6a4:	b2db      	uxtb	r3, r3
 802e6a6:	e009      	b.n	802e6bc <HAL_DMA_IRQHandler+0x540>
 802e6a8:	687b      	ldr	r3, [r7, #4]
 802e6aa:	681b      	ldr	r3, [r3, #0]
 802e6ac:	681b      	ldr	r3, [r3, #0]
 802e6ae:	f003 0304 	and.w	r3, r3, #4
 802e6b2:	2b00      	cmp	r3, #0
 802e6b4:	bf14      	ite	ne
 802e6b6:	2301      	movne	r3, #1
 802e6b8:	2300      	moveq	r3, #0
 802e6ba:	b2db      	uxtb	r3, r3
 802e6bc:	2b00      	cmp	r3, #0
 802e6be:	d03e      	beq.n	802e73e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 802e6c0:	687b      	ldr	r3, [r7, #4]
 802e6c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802e6c4:	f003 031f 	and.w	r3, r3, #31
 802e6c8:	2210      	movs	r2, #16
 802e6ca:	409a      	lsls	r2, r3
 802e6cc:	6a3b      	ldr	r3, [r7, #32]
 802e6ce:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 802e6d0:	687b      	ldr	r3, [r7, #4]
 802e6d2:	681b      	ldr	r3, [r3, #0]
 802e6d4:	681b      	ldr	r3, [r3, #0]
 802e6d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 802e6da:	2b00      	cmp	r3, #0
 802e6dc:	d018      	beq.n	802e710 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 802e6de:	687b      	ldr	r3, [r7, #4]
 802e6e0:	681b      	ldr	r3, [r3, #0]
 802e6e2:	681b      	ldr	r3, [r3, #0]
 802e6e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 802e6e8:	2b00      	cmp	r3, #0
 802e6ea:	d108      	bne.n	802e6fe <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 802e6ec:	687b      	ldr	r3, [r7, #4]
 802e6ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802e6f0:	2b00      	cmp	r3, #0
 802e6f2:	d024      	beq.n	802e73e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 802e6f4:	687b      	ldr	r3, [r7, #4]
 802e6f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802e6f8:	6878      	ldr	r0, [r7, #4]
 802e6fa:	4798      	blx	r3
 802e6fc:	e01f      	b.n	802e73e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 802e6fe:	687b      	ldr	r3, [r7, #4]
 802e700:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802e702:	2b00      	cmp	r3, #0
 802e704:	d01b      	beq.n	802e73e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 802e706:	687b      	ldr	r3, [r7, #4]
 802e708:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802e70a:	6878      	ldr	r0, [r7, #4]
 802e70c:	4798      	blx	r3
 802e70e:	e016      	b.n	802e73e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 802e710:	687b      	ldr	r3, [r7, #4]
 802e712:	681b      	ldr	r3, [r3, #0]
 802e714:	681b      	ldr	r3, [r3, #0]
 802e716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802e71a:	2b00      	cmp	r3, #0
 802e71c:	d107      	bne.n	802e72e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 802e71e:	687b      	ldr	r3, [r7, #4]
 802e720:	681b      	ldr	r3, [r3, #0]
 802e722:	681a      	ldr	r2, [r3, #0]
 802e724:	687b      	ldr	r3, [r7, #4]
 802e726:	681b      	ldr	r3, [r3, #0]
 802e728:	f022 0208 	bic.w	r2, r2, #8
 802e72c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 802e72e:	687b      	ldr	r3, [r7, #4]
 802e730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802e732:	2b00      	cmp	r3, #0
 802e734:	d003      	beq.n	802e73e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 802e736:	687b      	ldr	r3, [r7, #4]
 802e738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802e73a:	6878      	ldr	r0, [r7, #4]
 802e73c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 802e73e:	687b      	ldr	r3, [r7, #4]
 802e740:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802e742:	f003 031f 	and.w	r3, r3, #31
 802e746:	2220      	movs	r2, #32
 802e748:	409a      	lsls	r2, r3
 802e74a:	69bb      	ldr	r3, [r7, #24]
 802e74c:	4013      	ands	r3, r2
 802e74e:	2b00      	cmp	r3, #0
 802e750:	f000 8110 	beq.w	802e974 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 802e754:	687b      	ldr	r3, [r7, #4]
 802e756:	681b      	ldr	r3, [r3, #0]
 802e758:	4a2c      	ldr	r2, [pc, #176]	; (802e80c <HAL_DMA_IRQHandler+0x690>)
 802e75a:	4293      	cmp	r3, r2
 802e75c:	d04a      	beq.n	802e7f4 <HAL_DMA_IRQHandler+0x678>
 802e75e:	687b      	ldr	r3, [r7, #4]
 802e760:	681b      	ldr	r3, [r3, #0]
 802e762:	4a2b      	ldr	r2, [pc, #172]	; (802e810 <HAL_DMA_IRQHandler+0x694>)
 802e764:	4293      	cmp	r3, r2
 802e766:	d045      	beq.n	802e7f4 <HAL_DMA_IRQHandler+0x678>
 802e768:	687b      	ldr	r3, [r7, #4]
 802e76a:	681b      	ldr	r3, [r3, #0]
 802e76c:	4a29      	ldr	r2, [pc, #164]	; (802e814 <HAL_DMA_IRQHandler+0x698>)
 802e76e:	4293      	cmp	r3, r2
 802e770:	d040      	beq.n	802e7f4 <HAL_DMA_IRQHandler+0x678>
 802e772:	687b      	ldr	r3, [r7, #4]
 802e774:	681b      	ldr	r3, [r3, #0]
 802e776:	4a28      	ldr	r2, [pc, #160]	; (802e818 <HAL_DMA_IRQHandler+0x69c>)
 802e778:	4293      	cmp	r3, r2
 802e77a:	d03b      	beq.n	802e7f4 <HAL_DMA_IRQHandler+0x678>
 802e77c:	687b      	ldr	r3, [r7, #4]
 802e77e:	681b      	ldr	r3, [r3, #0]
 802e780:	4a26      	ldr	r2, [pc, #152]	; (802e81c <HAL_DMA_IRQHandler+0x6a0>)
 802e782:	4293      	cmp	r3, r2
 802e784:	d036      	beq.n	802e7f4 <HAL_DMA_IRQHandler+0x678>
 802e786:	687b      	ldr	r3, [r7, #4]
 802e788:	681b      	ldr	r3, [r3, #0]
 802e78a:	4a25      	ldr	r2, [pc, #148]	; (802e820 <HAL_DMA_IRQHandler+0x6a4>)
 802e78c:	4293      	cmp	r3, r2
 802e78e:	d031      	beq.n	802e7f4 <HAL_DMA_IRQHandler+0x678>
 802e790:	687b      	ldr	r3, [r7, #4]
 802e792:	681b      	ldr	r3, [r3, #0]
 802e794:	4a23      	ldr	r2, [pc, #140]	; (802e824 <HAL_DMA_IRQHandler+0x6a8>)
 802e796:	4293      	cmp	r3, r2
 802e798:	d02c      	beq.n	802e7f4 <HAL_DMA_IRQHandler+0x678>
 802e79a:	687b      	ldr	r3, [r7, #4]
 802e79c:	681b      	ldr	r3, [r3, #0]
 802e79e:	4a22      	ldr	r2, [pc, #136]	; (802e828 <HAL_DMA_IRQHandler+0x6ac>)
 802e7a0:	4293      	cmp	r3, r2
 802e7a2:	d027      	beq.n	802e7f4 <HAL_DMA_IRQHandler+0x678>
 802e7a4:	687b      	ldr	r3, [r7, #4]
 802e7a6:	681b      	ldr	r3, [r3, #0]
 802e7a8:	4a20      	ldr	r2, [pc, #128]	; (802e82c <HAL_DMA_IRQHandler+0x6b0>)
 802e7aa:	4293      	cmp	r3, r2
 802e7ac:	d022      	beq.n	802e7f4 <HAL_DMA_IRQHandler+0x678>
 802e7ae:	687b      	ldr	r3, [r7, #4]
 802e7b0:	681b      	ldr	r3, [r3, #0]
 802e7b2:	4a1f      	ldr	r2, [pc, #124]	; (802e830 <HAL_DMA_IRQHandler+0x6b4>)
 802e7b4:	4293      	cmp	r3, r2
 802e7b6:	d01d      	beq.n	802e7f4 <HAL_DMA_IRQHandler+0x678>
 802e7b8:	687b      	ldr	r3, [r7, #4]
 802e7ba:	681b      	ldr	r3, [r3, #0]
 802e7bc:	4a1d      	ldr	r2, [pc, #116]	; (802e834 <HAL_DMA_IRQHandler+0x6b8>)
 802e7be:	4293      	cmp	r3, r2
 802e7c0:	d018      	beq.n	802e7f4 <HAL_DMA_IRQHandler+0x678>
 802e7c2:	687b      	ldr	r3, [r7, #4]
 802e7c4:	681b      	ldr	r3, [r3, #0]
 802e7c6:	4a1c      	ldr	r2, [pc, #112]	; (802e838 <HAL_DMA_IRQHandler+0x6bc>)
 802e7c8:	4293      	cmp	r3, r2
 802e7ca:	d013      	beq.n	802e7f4 <HAL_DMA_IRQHandler+0x678>
 802e7cc:	687b      	ldr	r3, [r7, #4]
 802e7ce:	681b      	ldr	r3, [r3, #0]
 802e7d0:	4a1a      	ldr	r2, [pc, #104]	; (802e83c <HAL_DMA_IRQHandler+0x6c0>)
 802e7d2:	4293      	cmp	r3, r2
 802e7d4:	d00e      	beq.n	802e7f4 <HAL_DMA_IRQHandler+0x678>
 802e7d6:	687b      	ldr	r3, [r7, #4]
 802e7d8:	681b      	ldr	r3, [r3, #0]
 802e7da:	4a19      	ldr	r2, [pc, #100]	; (802e840 <HAL_DMA_IRQHandler+0x6c4>)
 802e7dc:	4293      	cmp	r3, r2
 802e7de:	d009      	beq.n	802e7f4 <HAL_DMA_IRQHandler+0x678>
 802e7e0:	687b      	ldr	r3, [r7, #4]
 802e7e2:	681b      	ldr	r3, [r3, #0]
 802e7e4:	4a17      	ldr	r2, [pc, #92]	; (802e844 <HAL_DMA_IRQHandler+0x6c8>)
 802e7e6:	4293      	cmp	r3, r2
 802e7e8:	d004      	beq.n	802e7f4 <HAL_DMA_IRQHandler+0x678>
 802e7ea:	687b      	ldr	r3, [r7, #4]
 802e7ec:	681b      	ldr	r3, [r3, #0]
 802e7ee:	4a16      	ldr	r2, [pc, #88]	; (802e848 <HAL_DMA_IRQHandler+0x6cc>)
 802e7f0:	4293      	cmp	r3, r2
 802e7f2:	d12b      	bne.n	802e84c <HAL_DMA_IRQHandler+0x6d0>
 802e7f4:	687b      	ldr	r3, [r7, #4]
 802e7f6:	681b      	ldr	r3, [r3, #0]
 802e7f8:	681b      	ldr	r3, [r3, #0]
 802e7fa:	f003 0310 	and.w	r3, r3, #16
 802e7fe:	2b00      	cmp	r3, #0
 802e800:	bf14      	ite	ne
 802e802:	2301      	movne	r3, #1
 802e804:	2300      	moveq	r3, #0
 802e806:	b2db      	uxtb	r3, r3
 802e808:	e02a      	b.n	802e860 <HAL_DMA_IRQHandler+0x6e4>
 802e80a:	bf00      	nop
 802e80c:	40020010 	.word	0x40020010
 802e810:	40020028 	.word	0x40020028
 802e814:	40020040 	.word	0x40020040
 802e818:	40020058 	.word	0x40020058
 802e81c:	40020070 	.word	0x40020070
 802e820:	40020088 	.word	0x40020088
 802e824:	400200a0 	.word	0x400200a0
 802e828:	400200b8 	.word	0x400200b8
 802e82c:	40020410 	.word	0x40020410
 802e830:	40020428 	.word	0x40020428
 802e834:	40020440 	.word	0x40020440
 802e838:	40020458 	.word	0x40020458
 802e83c:	40020470 	.word	0x40020470
 802e840:	40020488 	.word	0x40020488
 802e844:	400204a0 	.word	0x400204a0
 802e848:	400204b8 	.word	0x400204b8
 802e84c:	687b      	ldr	r3, [r7, #4]
 802e84e:	681b      	ldr	r3, [r3, #0]
 802e850:	681b      	ldr	r3, [r3, #0]
 802e852:	f003 0302 	and.w	r3, r3, #2
 802e856:	2b00      	cmp	r3, #0
 802e858:	bf14      	ite	ne
 802e85a:	2301      	movne	r3, #1
 802e85c:	2300      	moveq	r3, #0
 802e85e:	b2db      	uxtb	r3, r3
 802e860:	2b00      	cmp	r3, #0
 802e862:	f000 8087 	beq.w	802e974 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 802e866:	687b      	ldr	r3, [r7, #4]
 802e868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802e86a:	f003 031f 	and.w	r3, r3, #31
 802e86e:	2220      	movs	r2, #32
 802e870:	409a      	lsls	r2, r3
 802e872:	6a3b      	ldr	r3, [r7, #32]
 802e874:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 802e876:	687b      	ldr	r3, [r7, #4]
 802e878:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 802e87c:	b2db      	uxtb	r3, r3
 802e87e:	2b04      	cmp	r3, #4
 802e880:	d139      	bne.n	802e8f6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 802e882:	687b      	ldr	r3, [r7, #4]
 802e884:	681b      	ldr	r3, [r3, #0]
 802e886:	681a      	ldr	r2, [r3, #0]
 802e888:	687b      	ldr	r3, [r7, #4]
 802e88a:	681b      	ldr	r3, [r3, #0]
 802e88c:	f022 0216 	bic.w	r2, r2, #22
 802e890:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 802e892:	687b      	ldr	r3, [r7, #4]
 802e894:	681b      	ldr	r3, [r3, #0]
 802e896:	695a      	ldr	r2, [r3, #20]
 802e898:	687b      	ldr	r3, [r7, #4]
 802e89a:	681b      	ldr	r3, [r3, #0]
 802e89c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 802e8a0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 802e8a2:	687b      	ldr	r3, [r7, #4]
 802e8a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802e8a6:	2b00      	cmp	r3, #0
 802e8a8:	d103      	bne.n	802e8b2 <HAL_DMA_IRQHandler+0x736>
 802e8aa:	687b      	ldr	r3, [r7, #4]
 802e8ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802e8ae:	2b00      	cmp	r3, #0
 802e8b0:	d007      	beq.n	802e8c2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 802e8b2:	687b      	ldr	r3, [r7, #4]
 802e8b4:	681b      	ldr	r3, [r3, #0]
 802e8b6:	681a      	ldr	r2, [r3, #0]
 802e8b8:	687b      	ldr	r3, [r7, #4]
 802e8ba:	681b      	ldr	r3, [r3, #0]
 802e8bc:	f022 0208 	bic.w	r2, r2, #8
 802e8c0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 802e8c2:	687b      	ldr	r3, [r7, #4]
 802e8c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802e8c6:	f003 031f 	and.w	r3, r3, #31
 802e8ca:	223f      	movs	r2, #63	; 0x3f
 802e8cc:	409a      	lsls	r2, r3
 802e8ce:	6a3b      	ldr	r3, [r7, #32]
 802e8d0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 802e8d2:	687b      	ldr	r3, [r7, #4]
 802e8d4:	2201      	movs	r2, #1
 802e8d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 802e8da:	687b      	ldr	r3, [r7, #4]
 802e8dc:	2200      	movs	r2, #0
 802e8de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 802e8e2:	687b      	ldr	r3, [r7, #4]
 802e8e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802e8e6:	2b00      	cmp	r3, #0
 802e8e8:	f000 834a 	beq.w	802ef80 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 802e8ec:	687b      	ldr	r3, [r7, #4]
 802e8ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802e8f0:	6878      	ldr	r0, [r7, #4]
 802e8f2:	4798      	blx	r3
          }
          return;
 802e8f4:	e344      	b.n	802ef80 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 802e8f6:	687b      	ldr	r3, [r7, #4]
 802e8f8:	681b      	ldr	r3, [r3, #0]
 802e8fa:	681b      	ldr	r3, [r3, #0]
 802e8fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 802e900:	2b00      	cmp	r3, #0
 802e902:	d018      	beq.n	802e936 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 802e904:	687b      	ldr	r3, [r7, #4]
 802e906:	681b      	ldr	r3, [r3, #0]
 802e908:	681b      	ldr	r3, [r3, #0]
 802e90a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 802e90e:	2b00      	cmp	r3, #0
 802e910:	d108      	bne.n	802e924 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 802e912:	687b      	ldr	r3, [r7, #4]
 802e914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802e916:	2b00      	cmp	r3, #0
 802e918:	d02c      	beq.n	802e974 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 802e91a:	687b      	ldr	r3, [r7, #4]
 802e91c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802e91e:	6878      	ldr	r0, [r7, #4]
 802e920:	4798      	blx	r3
 802e922:	e027      	b.n	802e974 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 802e924:	687b      	ldr	r3, [r7, #4]
 802e926:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802e928:	2b00      	cmp	r3, #0
 802e92a:	d023      	beq.n	802e974 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 802e92c:	687b      	ldr	r3, [r7, #4]
 802e92e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802e930:	6878      	ldr	r0, [r7, #4]
 802e932:	4798      	blx	r3
 802e934:	e01e      	b.n	802e974 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 802e936:	687b      	ldr	r3, [r7, #4]
 802e938:	681b      	ldr	r3, [r3, #0]
 802e93a:	681b      	ldr	r3, [r3, #0]
 802e93c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802e940:	2b00      	cmp	r3, #0
 802e942:	d10f      	bne.n	802e964 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 802e944:	687b      	ldr	r3, [r7, #4]
 802e946:	681b      	ldr	r3, [r3, #0]
 802e948:	681a      	ldr	r2, [r3, #0]
 802e94a:	687b      	ldr	r3, [r7, #4]
 802e94c:	681b      	ldr	r3, [r3, #0]
 802e94e:	f022 0210 	bic.w	r2, r2, #16
 802e952:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 802e954:	687b      	ldr	r3, [r7, #4]
 802e956:	2201      	movs	r2, #1
 802e958:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 802e95c:	687b      	ldr	r3, [r7, #4]
 802e95e:	2200      	movs	r2, #0
 802e960:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 802e964:	687b      	ldr	r3, [r7, #4]
 802e966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802e968:	2b00      	cmp	r3, #0
 802e96a:	d003      	beq.n	802e974 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 802e96c:	687b      	ldr	r3, [r7, #4]
 802e96e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802e970:	6878      	ldr	r0, [r7, #4]
 802e972:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 802e974:	687b      	ldr	r3, [r7, #4]
 802e976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802e978:	2b00      	cmp	r3, #0
 802e97a:	f000 8306 	beq.w	802ef8a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 802e97e:	687b      	ldr	r3, [r7, #4]
 802e980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802e982:	f003 0301 	and.w	r3, r3, #1
 802e986:	2b00      	cmp	r3, #0
 802e988:	f000 8088 	beq.w	802ea9c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 802e98c:	687b      	ldr	r3, [r7, #4]
 802e98e:	2204      	movs	r2, #4
 802e990:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 802e994:	687b      	ldr	r3, [r7, #4]
 802e996:	681b      	ldr	r3, [r3, #0]
 802e998:	4a7a      	ldr	r2, [pc, #488]	; (802eb84 <HAL_DMA_IRQHandler+0xa08>)
 802e99a:	4293      	cmp	r3, r2
 802e99c:	d04a      	beq.n	802ea34 <HAL_DMA_IRQHandler+0x8b8>
 802e99e:	687b      	ldr	r3, [r7, #4]
 802e9a0:	681b      	ldr	r3, [r3, #0]
 802e9a2:	4a79      	ldr	r2, [pc, #484]	; (802eb88 <HAL_DMA_IRQHandler+0xa0c>)
 802e9a4:	4293      	cmp	r3, r2
 802e9a6:	d045      	beq.n	802ea34 <HAL_DMA_IRQHandler+0x8b8>
 802e9a8:	687b      	ldr	r3, [r7, #4]
 802e9aa:	681b      	ldr	r3, [r3, #0]
 802e9ac:	4a77      	ldr	r2, [pc, #476]	; (802eb8c <HAL_DMA_IRQHandler+0xa10>)
 802e9ae:	4293      	cmp	r3, r2
 802e9b0:	d040      	beq.n	802ea34 <HAL_DMA_IRQHandler+0x8b8>
 802e9b2:	687b      	ldr	r3, [r7, #4]
 802e9b4:	681b      	ldr	r3, [r3, #0]
 802e9b6:	4a76      	ldr	r2, [pc, #472]	; (802eb90 <HAL_DMA_IRQHandler+0xa14>)
 802e9b8:	4293      	cmp	r3, r2
 802e9ba:	d03b      	beq.n	802ea34 <HAL_DMA_IRQHandler+0x8b8>
 802e9bc:	687b      	ldr	r3, [r7, #4]
 802e9be:	681b      	ldr	r3, [r3, #0]
 802e9c0:	4a74      	ldr	r2, [pc, #464]	; (802eb94 <HAL_DMA_IRQHandler+0xa18>)
 802e9c2:	4293      	cmp	r3, r2
 802e9c4:	d036      	beq.n	802ea34 <HAL_DMA_IRQHandler+0x8b8>
 802e9c6:	687b      	ldr	r3, [r7, #4]
 802e9c8:	681b      	ldr	r3, [r3, #0]
 802e9ca:	4a73      	ldr	r2, [pc, #460]	; (802eb98 <HAL_DMA_IRQHandler+0xa1c>)
 802e9cc:	4293      	cmp	r3, r2
 802e9ce:	d031      	beq.n	802ea34 <HAL_DMA_IRQHandler+0x8b8>
 802e9d0:	687b      	ldr	r3, [r7, #4]
 802e9d2:	681b      	ldr	r3, [r3, #0]
 802e9d4:	4a71      	ldr	r2, [pc, #452]	; (802eb9c <HAL_DMA_IRQHandler+0xa20>)
 802e9d6:	4293      	cmp	r3, r2
 802e9d8:	d02c      	beq.n	802ea34 <HAL_DMA_IRQHandler+0x8b8>
 802e9da:	687b      	ldr	r3, [r7, #4]
 802e9dc:	681b      	ldr	r3, [r3, #0]
 802e9de:	4a70      	ldr	r2, [pc, #448]	; (802eba0 <HAL_DMA_IRQHandler+0xa24>)
 802e9e0:	4293      	cmp	r3, r2
 802e9e2:	d027      	beq.n	802ea34 <HAL_DMA_IRQHandler+0x8b8>
 802e9e4:	687b      	ldr	r3, [r7, #4]
 802e9e6:	681b      	ldr	r3, [r3, #0]
 802e9e8:	4a6e      	ldr	r2, [pc, #440]	; (802eba4 <HAL_DMA_IRQHandler+0xa28>)
 802e9ea:	4293      	cmp	r3, r2
 802e9ec:	d022      	beq.n	802ea34 <HAL_DMA_IRQHandler+0x8b8>
 802e9ee:	687b      	ldr	r3, [r7, #4]
 802e9f0:	681b      	ldr	r3, [r3, #0]
 802e9f2:	4a6d      	ldr	r2, [pc, #436]	; (802eba8 <HAL_DMA_IRQHandler+0xa2c>)
 802e9f4:	4293      	cmp	r3, r2
 802e9f6:	d01d      	beq.n	802ea34 <HAL_DMA_IRQHandler+0x8b8>
 802e9f8:	687b      	ldr	r3, [r7, #4]
 802e9fa:	681b      	ldr	r3, [r3, #0]
 802e9fc:	4a6b      	ldr	r2, [pc, #428]	; (802ebac <HAL_DMA_IRQHandler+0xa30>)
 802e9fe:	4293      	cmp	r3, r2
 802ea00:	d018      	beq.n	802ea34 <HAL_DMA_IRQHandler+0x8b8>
 802ea02:	687b      	ldr	r3, [r7, #4]
 802ea04:	681b      	ldr	r3, [r3, #0]
 802ea06:	4a6a      	ldr	r2, [pc, #424]	; (802ebb0 <HAL_DMA_IRQHandler+0xa34>)
 802ea08:	4293      	cmp	r3, r2
 802ea0a:	d013      	beq.n	802ea34 <HAL_DMA_IRQHandler+0x8b8>
 802ea0c:	687b      	ldr	r3, [r7, #4]
 802ea0e:	681b      	ldr	r3, [r3, #0]
 802ea10:	4a68      	ldr	r2, [pc, #416]	; (802ebb4 <HAL_DMA_IRQHandler+0xa38>)
 802ea12:	4293      	cmp	r3, r2
 802ea14:	d00e      	beq.n	802ea34 <HAL_DMA_IRQHandler+0x8b8>
 802ea16:	687b      	ldr	r3, [r7, #4]
 802ea18:	681b      	ldr	r3, [r3, #0]
 802ea1a:	4a67      	ldr	r2, [pc, #412]	; (802ebb8 <HAL_DMA_IRQHandler+0xa3c>)
 802ea1c:	4293      	cmp	r3, r2
 802ea1e:	d009      	beq.n	802ea34 <HAL_DMA_IRQHandler+0x8b8>
 802ea20:	687b      	ldr	r3, [r7, #4]
 802ea22:	681b      	ldr	r3, [r3, #0]
 802ea24:	4a65      	ldr	r2, [pc, #404]	; (802ebbc <HAL_DMA_IRQHandler+0xa40>)
 802ea26:	4293      	cmp	r3, r2
 802ea28:	d004      	beq.n	802ea34 <HAL_DMA_IRQHandler+0x8b8>
 802ea2a:	687b      	ldr	r3, [r7, #4]
 802ea2c:	681b      	ldr	r3, [r3, #0]
 802ea2e:	4a64      	ldr	r2, [pc, #400]	; (802ebc0 <HAL_DMA_IRQHandler+0xa44>)
 802ea30:	4293      	cmp	r3, r2
 802ea32:	d108      	bne.n	802ea46 <HAL_DMA_IRQHandler+0x8ca>
 802ea34:	687b      	ldr	r3, [r7, #4]
 802ea36:	681b      	ldr	r3, [r3, #0]
 802ea38:	681a      	ldr	r2, [r3, #0]
 802ea3a:	687b      	ldr	r3, [r7, #4]
 802ea3c:	681b      	ldr	r3, [r3, #0]
 802ea3e:	f022 0201 	bic.w	r2, r2, #1
 802ea42:	601a      	str	r2, [r3, #0]
 802ea44:	e007      	b.n	802ea56 <HAL_DMA_IRQHandler+0x8da>
 802ea46:	687b      	ldr	r3, [r7, #4]
 802ea48:	681b      	ldr	r3, [r3, #0]
 802ea4a:	681a      	ldr	r2, [r3, #0]
 802ea4c:	687b      	ldr	r3, [r7, #4]
 802ea4e:	681b      	ldr	r3, [r3, #0]
 802ea50:	f022 0201 	bic.w	r2, r2, #1
 802ea54:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 802ea56:	68fb      	ldr	r3, [r7, #12]
 802ea58:	3301      	adds	r3, #1
 802ea5a:	60fb      	str	r3, [r7, #12]
 802ea5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802ea5e:	429a      	cmp	r2, r3
 802ea60:	d307      	bcc.n	802ea72 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 802ea62:	687b      	ldr	r3, [r7, #4]
 802ea64:	681b      	ldr	r3, [r3, #0]
 802ea66:	681b      	ldr	r3, [r3, #0]
 802ea68:	f003 0301 	and.w	r3, r3, #1
 802ea6c:	2b00      	cmp	r3, #0
 802ea6e:	d1f2      	bne.n	802ea56 <HAL_DMA_IRQHandler+0x8da>
 802ea70:	e000      	b.n	802ea74 <HAL_DMA_IRQHandler+0x8f8>
            break;
 802ea72:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 802ea74:	687b      	ldr	r3, [r7, #4]
 802ea76:	681b      	ldr	r3, [r3, #0]
 802ea78:	681b      	ldr	r3, [r3, #0]
 802ea7a:	f003 0301 	and.w	r3, r3, #1
 802ea7e:	2b00      	cmp	r3, #0
 802ea80:	d004      	beq.n	802ea8c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 802ea82:	687b      	ldr	r3, [r7, #4]
 802ea84:	2203      	movs	r2, #3
 802ea86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 802ea8a:	e003      	b.n	802ea94 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 802ea8c:	687b      	ldr	r3, [r7, #4]
 802ea8e:	2201      	movs	r2, #1
 802ea90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 802ea94:	687b      	ldr	r3, [r7, #4]
 802ea96:	2200      	movs	r2, #0
 802ea98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 802ea9c:	687b      	ldr	r3, [r7, #4]
 802ea9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802eaa0:	2b00      	cmp	r3, #0
 802eaa2:	f000 8272 	beq.w	802ef8a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 802eaa6:	687b      	ldr	r3, [r7, #4]
 802eaa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802eaaa:	6878      	ldr	r0, [r7, #4]
 802eaac:	4798      	blx	r3
 802eaae:	e26c      	b.n	802ef8a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 802eab0:	687b      	ldr	r3, [r7, #4]
 802eab2:	681b      	ldr	r3, [r3, #0]
 802eab4:	4a43      	ldr	r2, [pc, #268]	; (802ebc4 <HAL_DMA_IRQHandler+0xa48>)
 802eab6:	4293      	cmp	r3, r2
 802eab8:	d022      	beq.n	802eb00 <HAL_DMA_IRQHandler+0x984>
 802eaba:	687b      	ldr	r3, [r7, #4]
 802eabc:	681b      	ldr	r3, [r3, #0]
 802eabe:	4a42      	ldr	r2, [pc, #264]	; (802ebc8 <HAL_DMA_IRQHandler+0xa4c>)
 802eac0:	4293      	cmp	r3, r2
 802eac2:	d01d      	beq.n	802eb00 <HAL_DMA_IRQHandler+0x984>
 802eac4:	687b      	ldr	r3, [r7, #4]
 802eac6:	681b      	ldr	r3, [r3, #0]
 802eac8:	4a40      	ldr	r2, [pc, #256]	; (802ebcc <HAL_DMA_IRQHandler+0xa50>)
 802eaca:	4293      	cmp	r3, r2
 802eacc:	d018      	beq.n	802eb00 <HAL_DMA_IRQHandler+0x984>
 802eace:	687b      	ldr	r3, [r7, #4]
 802ead0:	681b      	ldr	r3, [r3, #0]
 802ead2:	4a3f      	ldr	r2, [pc, #252]	; (802ebd0 <HAL_DMA_IRQHandler+0xa54>)
 802ead4:	4293      	cmp	r3, r2
 802ead6:	d013      	beq.n	802eb00 <HAL_DMA_IRQHandler+0x984>
 802ead8:	687b      	ldr	r3, [r7, #4]
 802eada:	681b      	ldr	r3, [r3, #0]
 802eadc:	4a3d      	ldr	r2, [pc, #244]	; (802ebd4 <HAL_DMA_IRQHandler+0xa58>)
 802eade:	4293      	cmp	r3, r2
 802eae0:	d00e      	beq.n	802eb00 <HAL_DMA_IRQHandler+0x984>
 802eae2:	687b      	ldr	r3, [r7, #4]
 802eae4:	681b      	ldr	r3, [r3, #0]
 802eae6:	4a3c      	ldr	r2, [pc, #240]	; (802ebd8 <HAL_DMA_IRQHandler+0xa5c>)
 802eae8:	4293      	cmp	r3, r2
 802eaea:	d009      	beq.n	802eb00 <HAL_DMA_IRQHandler+0x984>
 802eaec:	687b      	ldr	r3, [r7, #4]
 802eaee:	681b      	ldr	r3, [r3, #0]
 802eaf0:	4a3a      	ldr	r2, [pc, #232]	; (802ebdc <HAL_DMA_IRQHandler+0xa60>)
 802eaf2:	4293      	cmp	r3, r2
 802eaf4:	d004      	beq.n	802eb00 <HAL_DMA_IRQHandler+0x984>
 802eaf6:	687b      	ldr	r3, [r7, #4]
 802eaf8:	681b      	ldr	r3, [r3, #0]
 802eafa:	4a39      	ldr	r2, [pc, #228]	; (802ebe0 <HAL_DMA_IRQHandler+0xa64>)
 802eafc:	4293      	cmp	r3, r2
 802eafe:	d101      	bne.n	802eb04 <HAL_DMA_IRQHandler+0x988>
 802eb00:	2301      	movs	r3, #1
 802eb02:	e000      	b.n	802eb06 <HAL_DMA_IRQHandler+0x98a>
 802eb04:	2300      	movs	r3, #0
 802eb06:	2b00      	cmp	r3, #0
 802eb08:	f000 823f 	beq.w	802ef8a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 802eb0c:	687b      	ldr	r3, [r7, #4]
 802eb0e:	681b      	ldr	r3, [r3, #0]
 802eb10:	681b      	ldr	r3, [r3, #0]
 802eb12:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 802eb14:	687b      	ldr	r3, [r7, #4]
 802eb16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802eb18:	f003 031f 	and.w	r3, r3, #31
 802eb1c:	2204      	movs	r2, #4
 802eb1e:	409a      	lsls	r2, r3
 802eb20:	697b      	ldr	r3, [r7, #20]
 802eb22:	4013      	ands	r3, r2
 802eb24:	2b00      	cmp	r3, #0
 802eb26:	f000 80cd 	beq.w	802ecc4 <HAL_DMA_IRQHandler+0xb48>
 802eb2a:	693b      	ldr	r3, [r7, #16]
 802eb2c:	f003 0304 	and.w	r3, r3, #4
 802eb30:	2b00      	cmp	r3, #0
 802eb32:	f000 80c7 	beq.w	802ecc4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 802eb36:	687b      	ldr	r3, [r7, #4]
 802eb38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802eb3a:	f003 031f 	and.w	r3, r3, #31
 802eb3e:	2204      	movs	r2, #4
 802eb40:	409a      	lsls	r2, r3
 802eb42:	69fb      	ldr	r3, [r7, #28]
 802eb44:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 802eb46:	693b      	ldr	r3, [r7, #16]
 802eb48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 802eb4c:	2b00      	cmp	r3, #0
 802eb4e:	d049      	beq.n	802ebe4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 802eb50:	693b      	ldr	r3, [r7, #16]
 802eb52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 802eb56:	2b00      	cmp	r3, #0
 802eb58:	d109      	bne.n	802eb6e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 802eb5a:	687b      	ldr	r3, [r7, #4]
 802eb5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802eb5e:	2b00      	cmp	r3, #0
 802eb60:	f000 8210 	beq.w	802ef84 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 802eb64:	687b      	ldr	r3, [r7, #4]
 802eb66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802eb68:	6878      	ldr	r0, [r7, #4]
 802eb6a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 802eb6c:	e20a      	b.n	802ef84 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 802eb6e:	687b      	ldr	r3, [r7, #4]
 802eb70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802eb72:	2b00      	cmp	r3, #0
 802eb74:	f000 8206 	beq.w	802ef84 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 802eb78:	687b      	ldr	r3, [r7, #4]
 802eb7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802eb7c:	6878      	ldr	r0, [r7, #4]
 802eb7e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 802eb80:	e200      	b.n	802ef84 <HAL_DMA_IRQHandler+0xe08>
 802eb82:	bf00      	nop
 802eb84:	40020010 	.word	0x40020010
 802eb88:	40020028 	.word	0x40020028
 802eb8c:	40020040 	.word	0x40020040
 802eb90:	40020058 	.word	0x40020058
 802eb94:	40020070 	.word	0x40020070
 802eb98:	40020088 	.word	0x40020088
 802eb9c:	400200a0 	.word	0x400200a0
 802eba0:	400200b8 	.word	0x400200b8
 802eba4:	40020410 	.word	0x40020410
 802eba8:	40020428 	.word	0x40020428
 802ebac:	40020440 	.word	0x40020440
 802ebb0:	40020458 	.word	0x40020458
 802ebb4:	40020470 	.word	0x40020470
 802ebb8:	40020488 	.word	0x40020488
 802ebbc:	400204a0 	.word	0x400204a0
 802ebc0:	400204b8 	.word	0x400204b8
 802ebc4:	58025408 	.word	0x58025408
 802ebc8:	5802541c 	.word	0x5802541c
 802ebcc:	58025430 	.word	0x58025430
 802ebd0:	58025444 	.word	0x58025444
 802ebd4:	58025458 	.word	0x58025458
 802ebd8:	5802546c 	.word	0x5802546c
 802ebdc:	58025480 	.word	0x58025480
 802ebe0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 802ebe4:	693b      	ldr	r3, [r7, #16]
 802ebe6:	f003 0320 	and.w	r3, r3, #32
 802ebea:	2b00      	cmp	r3, #0
 802ebec:	d160      	bne.n	802ecb0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 802ebee:	687b      	ldr	r3, [r7, #4]
 802ebf0:	681b      	ldr	r3, [r3, #0]
 802ebf2:	4a7f      	ldr	r2, [pc, #508]	; (802edf0 <HAL_DMA_IRQHandler+0xc74>)
 802ebf4:	4293      	cmp	r3, r2
 802ebf6:	d04a      	beq.n	802ec8e <HAL_DMA_IRQHandler+0xb12>
 802ebf8:	687b      	ldr	r3, [r7, #4]
 802ebfa:	681b      	ldr	r3, [r3, #0]
 802ebfc:	4a7d      	ldr	r2, [pc, #500]	; (802edf4 <HAL_DMA_IRQHandler+0xc78>)
 802ebfe:	4293      	cmp	r3, r2
 802ec00:	d045      	beq.n	802ec8e <HAL_DMA_IRQHandler+0xb12>
 802ec02:	687b      	ldr	r3, [r7, #4]
 802ec04:	681b      	ldr	r3, [r3, #0]
 802ec06:	4a7c      	ldr	r2, [pc, #496]	; (802edf8 <HAL_DMA_IRQHandler+0xc7c>)
 802ec08:	4293      	cmp	r3, r2
 802ec0a:	d040      	beq.n	802ec8e <HAL_DMA_IRQHandler+0xb12>
 802ec0c:	687b      	ldr	r3, [r7, #4]
 802ec0e:	681b      	ldr	r3, [r3, #0]
 802ec10:	4a7a      	ldr	r2, [pc, #488]	; (802edfc <HAL_DMA_IRQHandler+0xc80>)
 802ec12:	4293      	cmp	r3, r2
 802ec14:	d03b      	beq.n	802ec8e <HAL_DMA_IRQHandler+0xb12>
 802ec16:	687b      	ldr	r3, [r7, #4]
 802ec18:	681b      	ldr	r3, [r3, #0]
 802ec1a:	4a79      	ldr	r2, [pc, #484]	; (802ee00 <HAL_DMA_IRQHandler+0xc84>)
 802ec1c:	4293      	cmp	r3, r2
 802ec1e:	d036      	beq.n	802ec8e <HAL_DMA_IRQHandler+0xb12>
 802ec20:	687b      	ldr	r3, [r7, #4]
 802ec22:	681b      	ldr	r3, [r3, #0]
 802ec24:	4a77      	ldr	r2, [pc, #476]	; (802ee04 <HAL_DMA_IRQHandler+0xc88>)
 802ec26:	4293      	cmp	r3, r2
 802ec28:	d031      	beq.n	802ec8e <HAL_DMA_IRQHandler+0xb12>
 802ec2a:	687b      	ldr	r3, [r7, #4]
 802ec2c:	681b      	ldr	r3, [r3, #0]
 802ec2e:	4a76      	ldr	r2, [pc, #472]	; (802ee08 <HAL_DMA_IRQHandler+0xc8c>)
 802ec30:	4293      	cmp	r3, r2
 802ec32:	d02c      	beq.n	802ec8e <HAL_DMA_IRQHandler+0xb12>
 802ec34:	687b      	ldr	r3, [r7, #4]
 802ec36:	681b      	ldr	r3, [r3, #0]
 802ec38:	4a74      	ldr	r2, [pc, #464]	; (802ee0c <HAL_DMA_IRQHandler+0xc90>)
 802ec3a:	4293      	cmp	r3, r2
 802ec3c:	d027      	beq.n	802ec8e <HAL_DMA_IRQHandler+0xb12>
 802ec3e:	687b      	ldr	r3, [r7, #4]
 802ec40:	681b      	ldr	r3, [r3, #0]
 802ec42:	4a73      	ldr	r2, [pc, #460]	; (802ee10 <HAL_DMA_IRQHandler+0xc94>)
 802ec44:	4293      	cmp	r3, r2
 802ec46:	d022      	beq.n	802ec8e <HAL_DMA_IRQHandler+0xb12>
 802ec48:	687b      	ldr	r3, [r7, #4]
 802ec4a:	681b      	ldr	r3, [r3, #0]
 802ec4c:	4a71      	ldr	r2, [pc, #452]	; (802ee14 <HAL_DMA_IRQHandler+0xc98>)
 802ec4e:	4293      	cmp	r3, r2
 802ec50:	d01d      	beq.n	802ec8e <HAL_DMA_IRQHandler+0xb12>
 802ec52:	687b      	ldr	r3, [r7, #4]
 802ec54:	681b      	ldr	r3, [r3, #0]
 802ec56:	4a70      	ldr	r2, [pc, #448]	; (802ee18 <HAL_DMA_IRQHandler+0xc9c>)
 802ec58:	4293      	cmp	r3, r2
 802ec5a:	d018      	beq.n	802ec8e <HAL_DMA_IRQHandler+0xb12>
 802ec5c:	687b      	ldr	r3, [r7, #4]
 802ec5e:	681b      	ldr	r3, [r3, #0]
 802ec60:	4a6e      	ldr	r2, [pc, #440]	; (802ee1c <HAL_DMA_IRQHandler+0xca0>)
 802ec62:	4293      	cmp	r3, r2
 802ec64:	d013      	beq.n	802ec8e <HAL_DMA_IRQHandler+0xb12>
 802ec66:	687b      	ldr	r3, [r7, #4]
 802ec68:	681b      	ldr	r3, [r3, #0]
 802ec6a:	4a6d      	ldr	r2, [pc, #436]	; (802ee20 <HAL_DMA_IRQHandler+0xca4>)
 802ec6c:	4293      	cmp	r3, r2
 802ec6e:	d00e      	beq.n	802ec8e <HAL_DMA_IRQHandler+0xb12>
 802ec70:	687b      	ldr	r3, [r7, #4]
 802ec72:	681b      	ldr	r3, [r3, #0]
 802ec74:	4a6b      	ldr	r2, [pc, #428]	; (802ee24 <HAL_DMA_IRQHandler+0xca8>)
 802ec76:	4293      	cmp	r3, r2
 802ec78:	d009      	beq.n	802ec8e <HAL_DMA_IRQHandler+0xb12>
 802ec7a:	687b      	ldr	r3, [r7, #4]
 802ec7c:	681b      	ldr	r3, [r3, #0]
 802ec7e:	4a6a      	ldr	r2, [pc, #424]	; (802ee28 <HAL_DMA_IRQHandler+0xcac>)
 802ec80:	4293      	cmp	r3, r2
 802ec82:	d004      	beq.n	802ec8e <HAL_DMA_IRQHandler+0xb12>
 802ec84:	687b      	ldr	r3, [r7, #4]
 802ec86:	681b      	ldr	r3, [r3, #0]
 802ec88:	4a68      	ldr	r2, [pc, #416]	; (802ee2c <HAL_DMA_IRQHandler+0xcb0>)
 802ec8a:	4293      	cmp	r3, r2
 802ec8c:	d108      	bne.n	802eca0 <HAL_DMA_IRQHandler+0xb24>
 802ec8e:	687b      	ldr	r3, [r7, #4]
 802ec90:	681b      	ldr	r3, [r3, #0]
 802ec92:	681a      	ldr	r2, [r3, #0]
 802ec94:	687b      	ldr	r3, [r7, #4]
 802ec96:	681b      	ldr	r3, [r3, #0]
 802ec98:	f022 0208 	bic.w	r2, r2, #8
 802ec9c:	601a      	str	r2, [r3, #0]
 802ec9e:	e007      	b.n	802ecb0 <HAL_DMA_IRQHandler+0xb34>
 802eca0:	687b      	ldr	r3, [r7, #4]
 802eca2:	681b      	ldr	r3, [r3, #0]
 802eca4:	681a      	ldr	r2, [r3, #0]
 802eca6:	687b      	ldr	r3, [r7, #4]
 802eca8:	681b      	ldr	r3, [r3, #0]
 802ecaa:	f022 0204 	bic.w	r2, r2, #4
 802ecae:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 802ecb0:	687b      	ldr	r3, [r7, #4]
 802ecb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802ecb4:	2b00      	cmp	r3, #0
 802ecb6:	f000 8165 	beq.w	802ef84 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 802ecba:	687b      	ldr	r3, [r7, #4]
 802ecbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802ecbe:	6878      	ldr	r0, [r7, #4]
 802ecc0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 802ecc2:	e15f      	b.n	802ef84 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 802ecc4:	687b      	ldr	r3, [r7, #4]
 802ecc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802ecc8:	f003 031f 	and.w	r3, r3, #31
 802eccc:	2202      	movs	r2, #2
 802ecce:	409a      	lsls	r2, r3
 802ecd0:	697b      	ldr	r3, [r7, #20]
 802ecd2:	4013      	ands	r3, r2
 802ecd4:	2b00      	cmp	r3, #0
 802ecd6:	f000 80c5 	beq.w	802ee64 <HAL_DMA_IRQHandler+0xce8>
 802ecda:	693b      	ldr	r3, [r7, #16]
 802ecdc:	f003 0302 	and.w	r3, r3, #2
 802ece0:	2b00      	cmp	r3, #0
 802ece2:	f000 80bf 	beq.w	802ee64 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 802ece6:	687b      	ldr	r3, [r7, #4]
 802ece8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802ecea:	f003 031f 	and.w	r3, r3, #31
 802ecee:	2202      	movs	r2, #2
 802ecf0:	409a      	lsls	r2, r3
 802ecf2:	69fb      	ldr	r3, [r7, #28]
 802ecf4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 802ecf6:	693b      	ldr	r3, [r7, #16]
 802ecf8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 802ecfc:	2b00      	cmp	r3, #0
 802ecfe:	d018      	beq.n	802ed32 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 802ed00:	693b      	ldr	r3, [r7, #16]
 802ed02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 802ed06:	2b00      	cmp	r3, #0
 802ed08:	d109      	bne.n	802ed1e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 802ed0a:	687b      	ldr	r3, [r7, #4]
 802ed0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802ed0e:	2b00      	cmp	r3, #0
 802ed10:	f000 813a 	beq.w	802ef88 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 802ed14:	687b      	ldr	r3, [r7, #4]
 802ed16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802ed18:	6878      	ldr	r0, [r7, #4]
 802ed1a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 802ed1c:	e134      	b.n	802ef88 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 802ed1e:	687b      	ldr	r3, [r7, #4]
 802ed20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802ed22:	2b00      	cmp	r3, #0
 802ed24:	f000 8130 	beq.w	802ef88 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 802ed28:	687b      	ldr	r3, [r7, #4]
 802ed2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802ed2c:	6878      	ldr	r0, [r7, #4]
 802ed2e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 802ed30:	e12a      	b.n	802ef88 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 802ed32:	693b      	ldr	r3, [r7, #16]
 802ed34:	f003 0320 	and.w	r3, r3, #32
 802ed38:	2b00      	cmp	r3, #0
 802ed3a:	f040 8089 	bne.w	802ee50 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 802ed3e:	687b      	ldr	r3, [r7, #4]
 802ed40:	681b      	ldr	r3, [r3, #0]
 802ed42:	4a2b      	ldr	r2, [pc, #172]	; (802edf0 <HAL_DMA_IRQHandler+0xc74>)
 802ed44:	4293      	cmp	r3, r2
 802ed46:	d04a      	beq.n	802edde <HAL_DMA_IRQHandler+0xc62>
 802ed48:	687b      	ldr	r3, [r7, #4]
 802ed4a:	681b      	ldr	r3, [r3, #0]
 802ed4c:	4a29      	ldr	r2, [pc, #164]	; (802edf4 <HAL_DMA_IRQHandler+0xc78>)
 802ed4e:	4293      	cmp	r3, r2
 802ed50:	d045      	beq.n	802edde <HAL_DMA_IRQHandler+0xc62>
 802ed52:	687b      	ldr	r3, [r7, #4]
 802ed54:	681b      	ldr	r3, [r3, #0]
 802ed56:	4a28      	ldr	r2, [pc, #160]	; (802edf8 <HAL_DMA_IRQHandler+0xc7c>)
 802ed58:	4293      	cmp	r3, r2
 802ed5a:	d040      	beq.n	802edde <HAL_DMA_IRQHandler+0xc62>
 802ed5c:	687b      	ldr	r3, [r7, #4]
 802ed5e:	681b      	ldr	r3, [r3, #0]
 802ed60:	4a26      	ldr	r2, [pc, #152]	; (802edfc <HAL_DMA_IRQHandler+0xc80>)
 802ed62:	4293      	cmp	r3, r2
 802ed64:	d03b      	beq.n	802edde <HAL_DMA_IRQHandler+0xc62>
 802ed66:	687b      	ldr	r3, [r7, #4]
 802ed68:	681b      	ldr	r3, [r3, #0]
 802ed6a:	4a25      	ldr	r2, [pc, #148]	; (802ee00 <HAL_DMA_IRQHandler+0xc84>)
 802ed6c:	4293      	cmp	r3, r2
 802ed6e:	d036      	beq.n	802edde <HAL_DMA_IRQHandler+0xc62>
 802ed70:	687b      	ldr	r3, [r7, #4]
 802ed72:	681b      	ldr	r3, [r3, #0]
 802ed74:	4a23      	ldr	r2, [pc, #140]	; (802ee04 <HAL_DMA_IRQHandler+0xc88>)
 802ed76:	4293      	cmp	r3, r2
 802ed78:	d031      	beq.n	802edde <HAL_DMA_IRQHandler+0xc62>
 802ed7a:	687b      	ldr	r3, [r7, #4]
 802ed7c:	681b      	ldr	r3, [r3, #0]
 802ed7e:	4a22      	ldr	r2, [pc, #136]	; (802ee08 <HAL_DMA_IRQHandler+0xc8c>)
 802ed80:	4293      	cmp	r3, r2
 802ed82:	d02c      	beq.n	802edde <HAL_DMA_IRQHandler+0xc62>
 802ed84:	687b      	ldr	r3, [r7, #4]
 802ed86:	681b      	ldr	r3, [r3, #0]
 802ed88:	4a20      	ldr	r2, [pc, #128]	; (802ee0c <HAL_DMA_IRQHandler+0xc90>)
 802ed8a:	4293      	cmp	r3, r2
 802ed8c:	d027      	beq.n	802edde <HAL_DMA_IRQHandler+0xc62>
 802ed8e:	687b      	ldr	r3, [r7, #4]
 802ed90:	681b      	ldr	r3, [r3, #0]
 802ed92:	4a1f      	ldr	r2, [pc, #124]	; (802ee10 <HAL_DMA_IRQHandler+0xc94>)
 802ed94:	4293      	cmp	r3, r2
 802ed96:	d022      	beq.n	802edde <HAL_DMA_IRQHandler+0xc62>
 802ed98:	687b      	ldr	r3, [r7, #4]
 802ed9a:	681b      	ldr	r3, [r3, #0]
 802ed9c:	4a1d      	ldr	r2, [pc, #116]	; (802ee14 <HAL_DMA_IRQHandler+0xc98>)
 802ed9e:	4293      	cmp	r3, r2
 802eda0:	d01d      	beq.n	802edde <HAL_DMA_IRQHandler+0xc62>
 802eda2:	687b      	ldr	r3, [r7, #4]
 802eda4:	681b      	ldr	r3, [r3, #0]
 802eda6:	4a1c      	ldr	r2, [pc, #112]	; (802ee18 <HAL_DMA_IRQHandler+0xc9c>)
 802eda8:	4293      	cmp	r3, r2
 802edaa:	d018      	beq.n	802edde <HAL_DMA_IRQHandler+0xc62>
 802edac:	687b      	ldr	r3, [r7, #4]
 802edae:	681b      	ldr	r3, [r3, #0]
 802edb0:	4a1a      	ldr	r2, [pc, #104]	; (802ee1c <HAL_DMA_IRQHandler+0xca0>)
 802edb2:	4293      	cmp	r3, r2
 802edb4:	d013      	beq.n	802edde <HAL_DMA_IRQHandler+0xc62>
 802edb6:	687b      	ldr	r3, [r7, #4]
 802edb8:	681b      	ldr	r3, [r3, #0]
 802edba:	4a19      	ldr	r2, [pc, #100]	; (802ee20 <HAL_DMA_IRQHandler+0xca4>)
 802edbc:	4293      	cmp	r3, r2
 802edbe:	d00e      	beq.n	802edde <HAL_DMA_IRQHandler+0xc62>
 802edc0:	687b      	ldr	r3, [r7, #4]
 802edc2:	681b      	ldr	r3, [r3, #0]
 802edc4:	4a17      	ldr	r2, [pc, #92]	; (802ee24 <HAL_DMA_IRQHandler+0xca8>)
 802edc6:	4293      	cmp	r3, r2
 802edc8:	d009      	beq.n	802edde <HAL_DMA_IRQHandler+0xc62>
 802edca:	687b      	ldr	r3, [r7, #4]
 802edcc:	681b      	ldr	r3, [r3, #0]
 802edce:	4a16      	ldr	r2, [pc, #88]	; (802ee28 <HAL_DMA_IRQHandler+0xcac>)
 802edd0:	4293      	cmp	r3, r2
 802edd2:	d004      	beq.n	802edde <HAL_DMA_IRQHandler+0xc62>
 802edd4:	687b      	ldr	r3, [r7, #4]
 802edd6:	681b      	ldr	r3, [r3, #0]
 802edd8:	4a14      	ldr	r2, [pc, #80]	; (802ee2c <HAL_DMA_IRQHandler+0xcb0>)
 802edda:	4293      	cmp	r3, r2
 802eddc:	d128      	bne.n	802ee30 <HAL_DMA_IRQHandler+0xcb4>
 802edde:	687b      	ldr	r3, [r7, #4]
 802ede0:	681b      	ldr	r3, [r3, #0]
 802ede2:	681a      	ldr	r2, [r3, #0]
 802ede4:	687b      	ldr	r3, [r7, #4]
 802ede6:	681b      	ldr	r3, [r3, #0]
 802ede8:	f022 0214 	bic.w	r2, r2, #20
 802edec:	601a      	str	r2, [r3, #0]
 802edee:	e027      	b.n	802ee40 <HAL_DMA_IRQHandler+0xcc4>
 802edf0:	40020010 	.word	0x40020010
 802edf4:	40020028 	.word	0x40020028
 802edf8:	40020040 	.word	0x40020040
 802edfc:	40020058 	.word	0x40020058
 802ee00:	40020070 	.word	0x40020070
 802ee04:	40020088 	.word	0x40020088
 802ee08:	400200a0 	.word	0x400200a0
 802ee0c:	400200b8 	.word	0x400200b8
 802ee10:	40020410 	.word	0x40020410
 802ee14:	40020428 	.word	0x40020428
 802ee18:	40020440 	.word	0x40020440
 802ee1c:	40020458 	.word	0x40020458
 802ee20:	40020470 	.word	0x40020470
 802ee24:	40020488 	.word	0x40020488
 802ee28:	400204a0 	.word	0x400204a0
 802ee2c:	400204b8 	.word	0x400204b8
 802ee30:	687b      	ldr	r3, [r7, #4]
 802ee32:	681b      	ldr	r3, [r3, #0]
 802ee34:	681a      	ldr	r2, [r3, #0]
 802ee36:	687b      	ldr	r3, [r7, #4]
 802ee38:	681b      	ldr	r3, [r3, #0]
 802ee3a:	f022 020a 	bic.w	r2, r2, #10
 802ee3e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 802ee40:	687b      	ldr	r3, [r7, #4]
 802ee42:	2201      	movs	r2, #1
 802ee44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 802ee48:	687b      	ldr	r3, [r7, #4]
 802ee4a:	2200      	movs	r2, #0
 802ee4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 802ee50:	687b      	ldr	r3, [r7, #4]
 802ee52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802ee54:	2b00      	cmp	r3, #0
 802ee56:	f000 8097 	beq.w	802ef88 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 802ee5a:	687b      	ldr	r3, [r7, #4]
 802ee5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802ee5e:	6878      	ldr	r0, [r7, #4]
 802ee60:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 802ee62:	e091      	b.n	802ef88 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 802ee64:	687b      	ldr	r3, [r7, #4]
 802ee66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802ee68:	f003 031f 	and.w	r3, r3, #31
 802ee6c:	2208      	movs	r2, #8
 802ee6e:	409a      	lsls	r2, r3
 802ee70:	697b      	ldr	r3, [r7, #20]
 802ee72:	4013      	ands	r3, r2
 802ee74:	2b00      	cmp	r3, #0
 802ee76:	f000 8088 	beq.w	802ef8a <HAL_DMA_IRQHandler+0xe0e>
 802ee7a:	693b      	ldr	r3, [r7, #16]
 802ee7c:	f003 0308 	and.w	r3, r3, #8
 802ee80:	2b00      	cmp	r3, #0
 802ee82:	f000 8082 	beq.w	802ef8a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 802ee86:	687b      	ldr	r3, [r7, #4]
 802ee88:	681b      	ldr	r3, [r3, #0]
 802ee8a:	4a41      	ldr	r2, [pc, #260]	; (802ef90 <HAL_DMA_IRQHandler+0xe14>)
 802ee8c:	4293      	cmp	r3, r2
 802ee8e:	d04a      	beq.n	802ef26 <HAL_DMA_IRQHandler+0xdaa>
 802ee90:	687b      	ldr	r3, [r7, #4]
 802ee92:	681b      	ldr	r3, [r3, #0]
 802ee94:	4a3f      	ldr	r2, [pc, #252]	; (802ef94 <HAL_DMA_IRQHandler+0xe18>)
 802ee96:	4293      	cmp	r3, r2
 802ee98:	d045      	beq.n	802ef26 <HAL_DMA_IRQHandler+0xdaa>
 802ee9a:	687b      	ldr	r3, [r7, #4]
 802ee9c:	681b      	ldr	r3, [r3, #0]
 802ee9e:	4a3e      	ldr	r2, [pc, #248]	; (802ef98 <HAL_DMA_IRQHandler+0xe1c>)
 802eea0:	4293      	cmp	r3, r2
 802eea2:	d040      	beq.n	802ef26 <HAL_DMA_IRQHandler+0xdaa>
 802eea4:	687b      	ldr	r3, [r7, #4]
 802eea6:	681b      	ldr	r3, [r3, #0]
 802eea8:	4a3c      	ldr	r2, [pc, #240]	; (802ef9c <HAL_DMA_IRQHandler+0xe20>)
 802eeaa:	4293      	cmp	r3, r2
 802eeac:	d03b      	beq.n	802ef26 <HAL_DMA_IRQHandler+0xdaa>
 802eeae:	687b      	ldr	r3, [r7, #4]
 802eeb0:	681b      	ldr	r3, [r3, #0]
 802eeb2:	4a3b      	ldr	r2, [pc, #236]	; (802efa0 <HAL_DMA_IRQHandler+0xe24>)
 802eeb4:	4293      	cmp	r3, r2
 802eeb6:	d036      	beq.n	802ef26 <HAL_DMA_IRQHandler+0xdaa>
 802eeb8:	687b      	ldr	r3, [r7, #4]
 802eeba:	681b      	ldr	r3, [r3, #0]
 802eebc:	4a39      	ldr	r2, [pc, #228]	; (802efa4 <HAL_DMA_IRQHandler+0xe28>)
 802eebe:	4293      	cmp	r3, r2
 802eec0:	d031      	beq.n	802ef26 <HAL_DMA_IRQHandler+0xdaa>
 802eec2:	687b      	ldr	r3, [r7, #4]
 802eec4:	681b      	ldr	r3, [r3, #0]
 802eec6:	4a38      	ldr	r2, [pc, #224]	; (802efa8 <HAL_DMA_IRQHandler+0xe2c>)
 802eec8:	4293      	cmp	r3, r2
 802eeca:	d02c      	beq.n	802ef26 <HAL_DMA_IRQHandler+0xdaa>
 802eecc:	687b      	ldr	r3, [r7, #4]
 802eece:	681b      	ldr	r3, [r3, #0]
 802eed0:	4a36      	ldr	r2, [pc, #216]	; (802efac <HAL_DMA_IRQHandler+0xe30>)
 802eed2:	4293      	cmp	r3, r2
 802eed4:	d027      	beq.n	802ef26 <HAL_DMA_IRQHandler+0xdaa>
 802eed6:	687b      	ldr	r3, [r7, #4]
 802eed8:	681b      	ldr	r3, [r3, #0]
 802eeda:	4a35      	ldr	r2, [pc, #212]	; (802efb0 <HAL_DMA_IRQHandler+0xe34>)
 802eedc:	4293      	cmp	r3, r2
 802eede:	d022      	beq.n	802ef26 <HAL_DMA_IRQHandler+0xdaa>
 802eee0:	687b      	ldr	r3, [r7, #4]
 802eee2:	681b      	ldr	r3, [r3, #0]
 802eee4:	4a33      	ldr	r2, [pc, #204]	; (802efb4 <HAL_DMA_IRQHandler+0xe38>)
 802eee6:	4293      	cmp	r3, r2
 802eee8:	d01d      	beq.n	802ef26 <HAL_DMA_IRQHandler+0xdaa>
 802eeea:	687b      	ldr	r3, [r7, #4]
 802eeec:	681b      	ldr	r3, [r3, #0]
 802eeee:	4a32      	ldr	r2, [pc, #200]	; (802efb8 <HAL_DMA_IRQHandler+0xe3c>)
 802eef0:	4293      	cmp	r3, r2
 802eef2:	d018      	beq.n	802ef26 <HAL_DMA_IRQHandler+0xdaa>
 802eef4:	687b      	ldr	r3, [r7, #4]
 802eef6:	681b      	ldr	r3, [r3, #0]
 802eef8:	4a30      	ldr	r2, [pc, #192]	; (802efbc <HAL_DMA_IRQHandler+0xe40>)
 802eefa:	4293      	cmp	r3, r2
 802eefc:	d013      	beq.n	802ef26 <HAL_DMA_IRQHandler+0xdaa>
 802eefe:	687b      	ldr	r3, [r7, #4]
 802ef00:	681b      	ldr	r3, [r3, #0]
 802ef02:	4a2f      	ldr	r2, [pc, #188]	; (802efc0 <HAL_DMA_IRQHandler+0xe44>)
 802ef04:	4293      	cmp	r3, r2
 802ef06:	d00e      	beq.n	802ef26 <HAL_DMA_IRQHandler+0xdaa>
 802ef08:	687b      	ldr	r3, [r7, #4]
 802ef0a:	681b      	ldr	r3, [r3, #0]
 802ef0c:	4a2d      	ldr	r2, [pc, #180]	; (802efc4 <HAL_DMA_IRQHandler+0xe48>)
 802ef0e:	4293      	cmp	r3, r2
 802ef10:	d009      	beq.n	802ef26 <HAL_DMA_IRQHandler+0xdaa>
 802ef12:	687b      	ldr	r3, [r7, #4]
 802ef14:	681b      	ldr	r3, [r3, #0]
 802ef16:	4a2c      	ldr	r2, [pc, #176]	; (802efc8 <HAL_DMA_IRQHandler+0xe4c>)
 802ef18:	4293      	cmp	r3, r2
 802ef1a:	d004      	beq.n	802ef26 <HAL_DMA_IRQHandler+0xdaa>
 802ef1c:	687b      	ldr	r3, [r7, #4]
 802ef1e:	681b      	ldr	r3, [r3, #0]
 802ef20:	4a2a      	ldr	r2, [pc, #168]	; (802efcc <HAL_DMA_IRQHandler+0xe50>)
 802ef22:	4293      	cmp	r3, r2
 802ef24:	d108      	bne.n	802ef38 <HAL_DMA_IRQHandler+0xdbc>
 802ef26:	687b      	ldr	r3, [r7, #4]
 802ef28:	681b      	ldr	r3, [r3, #0]
 802ef2a:	681a      	ldr	r2, [r3, #0]
 802ef2c:	687b      	ldr	r3, [r7, #4]
 802ef2e:	681b      	ldr	r3, [r3, #0]
 802ef30:	f022 021c 	bic.w	r2, r2, #28
 802ef34:	601a      	str	r2, [r3, #0]
 802ef36:	e007      	b.n	802ef48 <HAL_DMA_IRQHandler+0xdcc>
 802ef38:	687b      	ldr	r3, [r7, #4]
 802ef3a:	681b      	ldr	r3, [r3, #0]
 802ef3c:	681a      	ldr	r2, [r3, #0]
 802ef3e:	687b      	ldr	r3, [r7, #4]
 802ef40:	681b      	ldr	r3, [r3, #0]
 802ef42:	f022 020e 	bic.w	r2, r2, #14
 802ef46:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 802ef48:	687b      	ldr	r3, [r7, #4]
 802ef4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802ef4c:	f003 031f 	and.w	r3, r3, #31
 802ef50:	2201      	movs	r2, #1
 802ef52:	409a      	lsls	r2, r3
 802ef54:	69fb      	ldr	r3, [r7, #28]
 802ef56:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 802ef58:	687b      	ldr	r3, [r7, #4]
 802ef5a:	2201      	movs	r2, #1
 802ef5c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 802ef5e:	687b      	ldr	r3, [r7, #4]
 802ef60:	2201      	movs	r2, #1
 802ef62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 802ef66:	687b      	ldr	r3, [r7, #4]
 802ef68:	2200      	movs	r2, #0
 802ef6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 802ef6e:	687b      	ldr	r3, [r7, #4]
 802ef70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802ef72:	2b00      	cmp	r3, #0
 802ef74:	d009      	beq.n	802ef8a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 802ef76:	687b      	ldr	r3, [r7, #4]
 802ef78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802ef7a:	6878      	ldr	r0, [r7, #4]
 802ef7c:	4798      	blx	r3
 802ef7e:	e004      	b.n	802ef8a <HAL_DMA_IRQHandler+0xe0e>
          return;
 802ef80:	bf00      	nop
 802ef82:	e002      	b.n	802ef8a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 802ef84:	bf00      	nop
 802ef86:	e000      	b.n	802ef8a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 802ef88:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 802ef8a:	3728      	adds	r7, #40	; 0x28
 802ef8c:	46bd      	mov	sp, r7
 802ef8e:	bd80      	pop	{r7, pc}
 802ef90:	40020010 	.word	0x40020010
 802ef94:	40020028 	.word	0x40020028
 802ef98:	40020040 	.word	0x40020040
 802ef9c:	40020058 	.word	0x40020058
 802efa0:	40020070 	.word	0x40020070
 802efa4:	40020088 	.word	0x40020088
 802efa8:	400200a0 	.word	0x400200a0
 802efac:	400200b8 	.word	0x400200b8
 802efb0:	40020410 	.word	0x40020410
 802efb4:	40020428 	.word	0x40020428
 802efb8:	40020440 	.word	0x40020440
 802efbc:	40020458 	.word	0x40020458
 802efc0:	40020470 	.word	0x40020470
 802efc4:	40020488 	.word	0x40020488
 802efc8:	400204a0 	.word	0x400204a0
 802efcc:	400204b8 	.word	0x400204b8

0802efd0 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 802efd0:	b480      	push	{r7}
 802efd2:	b083      	sub	sp, #12
 802efd4:	af00      	add	r7, sp, #0
 802efd6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 802efd8:	687b      	ldr	r3, [r7, #4]
 802efda:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 802efde:	b2db      	uxtb	r3, r3
}
 802efe0:	4618      	mov	r0, r3
 802efe2:	370c      	adds	r7, #12
 802efe4:	46bd      	mov	sp, r7
 802efe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802efea:	4770      	bx	lr

0802efec <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 802efec:	b480      	push	{r7}
 802efee:	b083      	sub	sp, #12
 802eff0:	af00      	add	r7, sp, #0
 802eff2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 802eff4:	687b      	ldr	r3, [r7, #4]
 802eff6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 802eff8:	4618      	mov	r0, r3
 802effa:	370c      	adds	r7, #12
 802effc:	46bd      	mov	sp, r7
 802effe:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f002:	4770      	bx	lr

0802f004 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 802f004:	b480      	push	{r7}
 802f006:	b087      	sub	sp, #28
 802f008:	af00      	add	r7, sp, #0
 802f00a:	60f8      	str	r0, [r7, #12]
 802f00c:	60b9      	str	r1, [r7, #8]
 802f00e:	607a      	str	r2, [r7, #4]
 802f010:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 802f012:	68fb      	ldr	r3, [r7, #12]
 802f014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802f016:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 802f018:	68fb      	ldr	r3, [r7, #12]
 802f01a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802f01c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 802f01e:	68fb      	ldr	r3, [r7, #12]
 802f020:	681b      	ldr	r3, [r3, #0]
 802f022:	4a7f      	ldr	r2, [pc, #508]	; (802f220 <DMA_SetConfig+0x21c>)
 802f024:	4293      	cmp	r3, r2
 802f026:	d072      	beq.n	802f10e <DMA_SetConfig+0x10a>
 802f028:	68fb      	ldr	r3, [r7, #12]
 802f02a:	681b      	ldr	r3, [r3, #0]
 802f02c:	4a7d      	ldr	r2, [pc, #500]	; (802f224 <DMA_SetConfig+0x220>)
 802f02e:	4293      	cmp	r3, r2
 802f030:	d06d      	beq.n	802f10e <DMA_SetConfig+0x10a>
 802f032:	68fb      	ldr	r3, [r7, #12]
 802f034:	681b      	ldr	r3, [r3, #0]
 802f036:	4a7c      	ldr	r2, [pc, #496]	; (802f228 <DMA_SetConfig+0x224>)
 802f038:	4293      	cmp	r3, r2
 802f03a:	d068      	beq.n	802f10e <DMA_SetConfig+0x10a>
 802f03c:	68fb      	ldr	r3, [r7, #12]
 802f03e:	681b      	ldr	r3, [r3, #0]
 802f040:	4a7a      	ldr	r2, [pc, #488]	; (802f22c <DMA_SetConfig+0x228>)
 802f042:	4293      	cmp	r3, r2
 802f044:	d063      	beq.n	802f10e <DMA_SetConfig+0x10a>
 802f046:	68fb      	ldr	r3, [r7, #12]
 802f048:	681b      	ldr	r3, [r3, #0]
 802f04a:	4a79      	ldr	r2, [pc, #484]	; (802f230 <DMA_SetConfig+0x22c>)
 802f04c:	4293      	cmp	r3, r2
 802f04e:	d05e      	beq.n	802f10e <DMA_SetConfig+0x10a>
 802f050:	68fb      	ldr	r3, [r7, #12]
 802f052:	681b      	ldr	r3, [r3, #0]
 802f054:	4a77      	ldr	r2, [pc, #476]	; (802f234 <DMA_SetConfig+0x230>)
 802f056:	4293      	cmp	r3, r2
 802f058:	d059      	beq.n	802f10e <DMA_SetConfig+0x10a>
 802f05a:	68fb      	ldr	r3, [r7, #12]
 802f05c:	681b      	ldr	r3, [r3, #0]
 802f05e:	4a76      	ldr	r2, [pc, #472]	; (802f238 <DMA_SetConfig+0x234>)
 802f060:	4293      	cmp	r3, r2
 802f062:	d054      	beq.n	802f10e <DMA_SetConfig+0x10a>
 802f064:	68fb      	ldr	r3, [r7, #12]
 802f066:	681b      	ldr	r3, [r3, #0]
 802f068:	4a74      	ldr	r2, [pc, #464]	; (802f23c <DMA_SetConfig+0x238>)
 802f06a:	4293      	cmp	r3, r2
 802f06c:	d04f      	beq.n	802f10e <DMA_SetConfig+0x10a>
 802f06e:	68fb      	ldr	r3, [r7, #12]
 802f070:	681b      	ldr	r3, [r3, #0]
 802f072:	4a73      	ldr	r2, [pc, #460]	; (802f240 <DMA_SetConfig+0x23c>)
 802f074:	4293      	cmp	r3, r2
 802f076:	d04a      	beq.n	802f10e <DMA_SetConfig+0x10a>
 802f078:	68fb      	ldr	r3, [r7, #12]
 802f07a:	681b      	ldr	r3, [r3, #0]
 802f07c:	4a71      	ldr	r2, [pc, #452]	; (802f244 <DMA_SetConfig+0x240>)
 802f07e:	4293      	cmp	r3, r2
 802f080:	d045      	beq.n	802f10e <DMA_SetConfig+0x10a>
 802f082:	68fb      	ldr	r3, [r7, #12]
 802f084:	681b      	ldr	r3, [r3, #0]
 802f086:	4a70      	ldr	r2, [pc, #448]	; (802f248 <DMA_SetConfig+0x244>)
 802f088:	4293      	cmp	r3, r2
 802f08a:	d040      	beq.n	802f10e <DMA_SetConfig+0x10a>
 802f08c:	68fb      	ldr	r3, [r7, #12]
 802f08e:	681b      	ldr	r3, [r3, #0]
 802f090:	4a6e      	ldr	r2, [pc, #440]	; (802f24c <DMA_SetConfig+0x248>)
 802f092:	4293      	cmp	r3, r2
 802f094:	d03b      	beq.n	802f10e <DMA_SetConfig+0x10a>
 802f096:	68fb      	ldr	r3, [r7, #12]
 802f098:	681b      	ldr	r3, [r3, #0]
 802f09a:	4a6d      	ldr	r2, [pc, #436]	; (802f250 <DMA_SetConfig+0x24c>)
 802f09c:	4293      	cmp	r3, r2
 802f09e:	d036      	beq.n	802f10e <DMA_SetConfig+0x10a>
 802f0a0:	68fb      	ldr	r3, [r7, #12]
 802f0a2:	681b      	ldr	r3, [r3, #0]
 802f0a4:	4a6b      	ldr	r2, [pc, #428]	; (802f254 <DMA_SetConfig+0x250>)
 802f0a6:	4293      	cmp	r3, r2
 802f0a8:	d031      	beq.n	802f10e <DMA_SetConfig+0x10a>
 802f0aa:	68fb      	ldr	r3, [r7, #12]
 802f0ac:	681b      	ldr	r3, [r3, #0]
 802f0ae:	4a6a      	ldr	r2, [pc, #424]	; (802f258 <DMA_SetConfig+0x254>)
 802f0b0:	4293      	cmp	r3, r2
 802f0b2:	d02c      	beq.n	802f10e <DMA_SetConfig+0x10a>
 802f0b4:	68fb      	ldr	r3, [r7, #12]
 802f0b6:	681b      	ldr	r3, [r3, #0]
 802f0b8:	4a68      	ldr	r2, [pc, #416]	; (802f25c <DMA_SetConfig+0x258>)
 802f0ba:	4293      	cmp	r3, r2
 802f0bc:	d027      	beq.n	802f10e <DMA_SetConfig+0x10a>
 802f0be:	68fb      	ldr	r3, [r7, #12]
 802f0c0:	681b      	ldr	r3, [r3, #0]
 802f0c2:	4a67      	ldr	r2, [pc, #412]	; (802f260 <DMA_SetConfig+0x25c>)
 802f0c4:	4293      	cmp	r3, r2
 802f0c6:	d022      	beq.n	802f10e <DMA_SetConfig+0x10a>
 802f0c8:	68fb      	ldr	r3, [r7, #12]
 802f0ca:	681b      	ldr	r3, [r3, #0]
 802f0cc:	4a65      	ldr	r2, [pc, #404]	; (802f264 <DMA_SetConfig+0x260>)
 802f0ce:	4293      	cmp	r3, r2
 802f0d0:	d01d      	beq.n	802f10e <DMA_SetConfig+0x10a>
 802f0d2:	68fb      	ldr	r3, [r7, #12]
 802f0d4:	681b      	ldr	r3, [r3, #0]
 802f0d6:	4a64      	ldr	r2, [pc, #400]	; (802f268 <DMA_SetConfig+0x264>)
 802f0d8:	4293      	cmp	r3, r2
 802f0da:	d018      	beq.n	802f10e <DMA_SetConfig+0x10a>
 802f0dc:	68fb      	ldr	r3, [r7, #12]
 802f0de:	681b      	ldr	r3, [r3, #0]
 802f0e0:	4a62      	ldr	r2, [pc, #392]	; (802f26c <DMA_SetConfig+0x268>)
 802f0e2:	4293      	cmp	r3, r2
 802f0e4:	d013      	beq.n	802f10e <DMA_SetConfig+0x10a>
 802f0e6:	68fb      	ldr	r3, [r7, #12]
 802f0e8:	681b      	ldr	r3, [r3, #0]
 802f0ea:	4a61      	ldr	r2, [pc, #388]	; (802f270 <DMA_SetConfig+0x26c>)
 802f0ec:	4293      	cmp	r3, r2
 802f0ee:	d00e      	beq.n	802f10e <DMA_SetConfig+0x10a>
 802f0f0:	68fb      	ldr	r3, [r7, #12]
 802f0f2:	681b      	ldr	r3, [r3, #0]
 802f0f4:	4a5f      	ldr	r2, [pc, #380]	; (802f274 <DMA_SetConfig+0x270>)
 802f0f6:	4293      	cmp	r3, r2
 802f0f8:	d009      	beq.n	802f10e <DMA_SetConfig+0x10a>
 802f0fa:	68fb      	ldr	r3, [r7, #12]
 802f0fc:	681b      	ldr	r3, [r3, #0]
 802f0fe:	4a5e      	ldr	r2, [pc, #376]	; (802f278 <DMA_SetConfig+0x274>)
 802f100:	4293      	cmp	r3, r2
 802f102:	d004      	beq.n	802f10e <DMA_SetConfig+0x10a>
 802f104:	68fb      	ldr	r3, [r7, #12]
 802f106:	681b      	ldr	r3, [r3, #0]
 802f108:	4a5c      	ldr	r2, [pc, #368]	; (802f27c <DMA_SetConfig+0x278>)
 802f10a:	4293      	cmp	r3, r2
 802f10c:	d101      	bne.n	802f112 <DMA_SetConfig+0x10e>
 802f10e:	2301      	movs	r3, #1
 802f110:	e000      	b.n	802f114 <DMA_SetConfig+0x110>
 802f112:	2300      	movs	r3, #0
 802f114:	2b00      	cmp	r3, #0
 802f116:	d00d      	beq.n	802f134 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 802f118:	68fb      	ldr	r3, [r7, #12]
 802f11a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802f11c:	68fa      	ldr	r2, [r7, #12]
 802f11e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 802f120:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 802f122:	68fb      	ldr	r3, [r7, #12]
 802f124:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802f126:	2b00      	cmp	r3, #0
 802f128:	d004      	beq.n	802f134 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 802f12a:	68fb      	ldr	r3, [r7, #12]
 802f12c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802f12e:	68fa      	ldr	r2, [r7, #12]
 802f130:	6f52      	ldr	r2, [r2, #116]	; 0x74
 802f132:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 802f134:	68fb      	ldr	r3, [r7, #12]
 802f136:	681b      	ldr	r3, [r3, #0]
 802f138:	4a39      	ldr	r2, [pc, #228]	; (802f220 <DMA_SetConfig+0x21c>)
 802f13a:	4293      	cmp	r3, r2
 802f13c:	d04a      	beq.n	802f1d4 <DMA_SetConfig+0x1d0>
 802f13e:	68fb      	ldr	r3, [r7, #12]
 802f140:	681b      	ldr	r3, [r3, #0]
 802f142:	4a38      	ldr	r2, [pc, #224]	; (802f224 <DMA_SetConfig+0x220>)
 802f144:	4293      	cmp	r3, r2
 802f146:	d045      	beq.n	802f1d4 <DMA_SetConfig+0x1d0>
 802f148:	68fb      	ldr	r3, [r7, #12]
 802f14a:	681b      	ldr	r3, [r3, #0]
 802f14c:	4a36      	ldr	r2, [pc, #216]	; (802f228 <DMA_SetConfig+0x224>)
 802f14e:	4293      	cmp	r3, r2
 802f150:	d040      	beq.n	802f1d4 <DMA_SetConfig+0x1d0>
 802f152:	68fb      	ldr	r3, [r7, #12]
 802f154:	681b      	ldr	r3, [r3, #0]
 802f156:	4a35      	ldr	r2, [pc, #212]	; (802f22c <DMA_SetConfig+0x228>)
 802f158:	4293      	cmp	r3, r2
 802f15a:	d03b      	beq.n	802f1d4 <DMA_SetConfig+0x1d0>
 802f15c:	68fb      	ldr	r3, [r7, #12]
 802f15e:	681b      	ldr	r3, [r3, #0]
 802f160:	4a33      	ldr	r2, [pc, #204]	; (802f230 <DMA_SetConfig+0x22c>)
 802f162:	4293      	cmp	r3, r2
 802f164:	d036      	beq.n	802f1d4 <DMA_SetConfig+0x1d0>
 802f166:	68fb      	ldr	r3, [r7, #12]
 802f168:	681b      	ldr	r3, [r3, #0]
 802f16a:	4a32      	ldr	r2, [pc, #200]	; (802f234 <DMA_SetConfig+0x230>)
 802f16c:	4293      	cmp	r3, r2
 802f16e:	d031      	beq.n	802f1d4 <DMA_SetConfig+0x1d0>
 802f170:	68fb      	ldr	r3, [r7, #12]
 802f172:	681b      	ldr	r3, [r3, #0]
 802f174:	4a30      	ldr	r2, [pc, #192]	; (802f238 <DMA_SetConfig+0x234>)
 802f176:	4293      	cmp	r3, r2
 802f178:	d02c      	beq.n	802f1d4 <DMA_SetConfig+0x1d0>
 802f17a:	68fb      	ldr	r3, [r7, #12]
 802f17c:	681b      	ldr	r3, [r3, #0]
 802f17e:	4a2f      	ldr	r2, [pc, #188]	; (802f23c <DMA_SetConfig+0x238>)
 802f180:	4293      	cmp	r3, r2
 802f182:	d027      	beq.n	802f1d4 <DMA_SetConfig+0x1d0>
 802f184:	68fb      	ldr	r3, [r7, #12]
 802f186:	681b      	ldr	r3, [r3, #0]
 802f188:	4a2d      	ldr	r2, [pc, #180]	; (802f240 <DMA_SetConfig+0x23c>)
 802f18a:	4293      	cmp	r3, r2
 802f18c:	d022      	beq.n	802f1d4 <DMA_SetConfig+0x1d0>
 802f18e:	68fb      	ldr	r3, [r7, #12]
 802f190:	681b      	ldr	r3, [r3, #0]
 802f192:	4a2c      	ldr	r2, [pc, #176]	; (802f244 <DMA_SetConfig+0x240>)
 802f194:	4293      	cmp	r3, r2
 802f196:	d01d      	beq.n	802f1d4 <DMA_SetConfig+0x1d0>
 802f198:	68fb      	ldr	r3, [r7, #12]
 802f19a:	681b      	ldr	r3, [r3, #0]
 802f19c:	4a2a      	ldr	r2, [pc, #168]	; (802f248 <DMA_SetConfig+0x244>)
 802f19e:	4293      	cmp	r3, r2
 802f1a0:	d018      	beq.n	802f1d4 <DMA_SetConfig+0x1d0>
 802f1a2:	68fb      	ldr	r3, [r7, #12]
 802f1a4:	681b      	ldr	r3, [r3, #0]
 802f1a6:	4a29      	ldr	r2, [pc, #164]	; (802f24c <DMA_SetConfig+0x248>)
 802f1a8:	4293      	cmp	r3, r2
 802f1aa:	d013      	beq.n	802f1d4 <DMA_SetConfig+0x1d0>
 802f1ac:	68fb      	ldr	r3, [r7, #12]
 802f1ae:	681b      	ldr	r3, [r3, #0]
 802f1b0:	4a27      	ldr	r2, [pc, #156]	; (802f250 <DMA_SetConfig+0x24c>)
 802f1b2:	4293      	cmp	r3, r2
 802f1b4:	d00e      	beq.n	802f1d4 <DMA_SetConfig+0x1d0>
 802f1b6:	68fb      	ldr	r3, [r7, #12]
 802f1b8:	681b      	ldr	r3, [r3, #0]
 802f1ba:	4a26      	ldr	r2, [pc, #152]	; (802f254 <DMA_SetConfig+0x250>)
 802f1bc:	4293      	cmp	r3, r2
 802f1be:	d009      	beq.n	802f1d4 <DMA_SetConfig+0x1d0>
 802f1c0:	68fb      	ldr	r3, [r7, #12]
 802f1c2:	681b      	ldr	r3, [r3, #0]
 802f1c4:	4a24      	ldr	r2, [pc, #144]	; (802f258 <DMA_SetConfig+0x254>)
 802f1c6:	4293      	cmp	r3, r2
 802f1c8:	d004      	beq.n	802f1d4 <DMA_SetConfig+0x1d0>
 802f1ca:	68fb      	ldr	r3, [r7, #12]
 802f1cc:	681b      	ldr	r3, [r3, #0]
 802f1ce:	4a23      	ldr	r2, [pc, #140]	; (802f25c <DMA_SetConfig+0x258>)
 802f1d0:	4293      	cmp	r3, r2
 802f1d2:	d101      	bne.n	802f1d8 <DMA_SetConfig+0x1d4>
 802f1d4:	2301      	movs	r3, #1
 802f1d6:	e000      	b.n	802f1da <DMA_SetConfig+0x1d6>
 802f1d8:	2300      	movs	r3, #0
 802f1da:	2b00      	cmp	r3, #0
 802f1dc:	d059      	beq.n	802f292 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 802f1de:	68fb      	ldr	r3, [r7, #12]
 802f1e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802f1e2:	f003 031f 	and.w	r3, r3, #31
 802f1e6:	223f      	movs	r2, #63	; 0x3f
 802f1e8:	409a      	lsls	r2, r3
 802f1ea:	697b      	ldr	r3, [r7, #20]
 802f1ec:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 802f1ee:	68fb      	ldr	r3, [r7, #12]
 802f1f0:	681b      	ldr	r3, [r3, #0]
 802f1f2:	681a      	ldr	r2, [r3, #0]
 802f1f4:	68fb      	ldr	r3, [r7, #12]
 802f1f6:	681b      	ldr	r3, [r3, #0]
 802f1f8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 802f1fc:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 802f1fe:	68fb      	ldr	r3, [r7, #12]
 802f200:	681b      	ldr	r3, [r3, #0]
 802f202:	683a      	ldr	r2, [r7, #0]
 802f204:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 802f206:	68fb      	ldr	r3, [r7, #12]
 802f208:	689b      	ldr	r3, [r3, #8]
 802f20a:	2b40      	cmp	r3, #64	; 0x40
 802f20c:	d138      	bne.n	802f280 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 802f20e:	68fb      	ldr	r3, [r7, #12]
 802f210:	681b      	ldr	r3, [r3, #0]
 802f212:	687a      	ldr	r2, [r7, #4]
 802f214:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 802f216:	68fb      	ldr	r3, [r7, #12]
 802f218:	681b      	ldr	r3, [r3, #0]
 802f21a:	68ba      	ldr	r2, [r7, #8]
 802f21c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 802f21e:	e086      	b.n	802f32e <DMA_SetConfig+0x32a>
 802f220:	40020010 	.word	0x40020010
 802f224:	40020028 	.word	0x40020028
 802f228:	40020040 	.word	0x40020040
 802f22c:	40020058 	.word	0x40020058
 802f230:	40020070 	.word	0x40020070
 802f234:	40020088 	.word	0x40020088
 802f238:	400200a0 	.word	0x400200a0
 802f23c:	400200b8 	.word	0x400200b8
 802f240:	40020410 	.word	0x40020410
 802f244:	40020428 	.word	0x40020428
 802f248:	40020440 	.word	0x40020440
 802f24c:	40020458 	.word	0x40020458
 802f250:	40020470 	.word	0x40020470
 802f254:	40020488 	.word	0x40020488
 802f258:	400204a0 	.word	0x400204a0
 802f25c:	400204b8 	.word	0x400204b8
 802f260:	58025408 	.word	0x58025408
 802f264:	5802541c 	.word	0x5802541c
 802f268:	58025430 	.word	0x58025430
 802f26c:	58025444 	.word	0x58025444
 802f270:	58025458 	.word	0x58025458
 802f274:	5802546c 	.word	0x5802546c
 802f278:	58025480 	.word	0x58025480
 802f27c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 802f280:	68fb      	ldr	r3, [r7, #12]
 802f282:	681b      	ldr	r3, [r3, #0]
 802f284:	68ba      	ldr	r2, [r7, #8]
 802f286:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 802f288:	68fb      	ldr	r3, [r7, #12]
 802f28a:	681b      	ldr	r3, [r3, #0]
 802f28c:	687a      	ldr	r2, [r7, #4]
 802f28e:	60da      	str	r2, [r3, #12]
}
 802f290:	e04d      	b.n	802f32e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 802f292:	68fb      	ldr	r3, [r7, #12]
 802f294:	681b      	ldr	r3, [r3, #0]
 802f296:	4a29      	ldr	r2, [pc, #164]	; (802f33c <DMA_SetConfig+0x338>)
 802f298:	4293      	cmp	r3, r2
 802f29a:	d022      	beq.n	802f2e2 <DMA_SetConfig+0x2de>
 802f29c:	68fb      	ldr	r3, [r7, #12]
 802f29e:	681b      	ldr	r3, [r3, #0]
 802f2a0:	4a27      	ldr	r2, [pc, #156]	; (802f340 <DMA_SetConfig+0x33c>)
 802f2a2:	4293      	cmp	r3, r2
 802f2a4:	d01d      	beq.n	802f2e2 <DMA_SetConfig+0x2de>
 802f2a6:	68fb      	ldr	r3, [r7, #12]
 802f2a8:	681b      	ldr	r3, [r3, #0]
 802f2aa:	4a26      	ldr	r2, [pc, #152]	; (802f344 <DMA_SetConfig+0x340>)
 802f2ac:	4293      	cmp	r3, r2
 802f2ae:	d018      	beq.n	802f2e2 <DMA_SetConfig+0x2de>
 802f2b0:	68fb      	ldr	r3, [r7, #12]
 802f2b2:	681b      	ldr	r3, [r3, #0]
 802f2b4:	4a24      	ldr	r2, [pc, #144]	; (802f348 <DMA_SetConfig+0x344>)
 802f2b6:	4293      	cmp	r3, r2
 802f2b8:	d013      	beq.n	802f2e2 <DMA_SetConfig+0x2de>
 802f2ba:	68fb      	ldr	r3, [r7, #12]
 802f2bc:	681b      	ldr	r3, [r3, #0]
 802f2be:	4a23      	ldr	r2, [pc, #140]	; (802f34c <DMA_SetConfig+0x348>)
 802f2c0:	4293      	cmp	r3, r2
 802f2c2:	d00e      	beq.n	802f2e2 <DMA_SetConfig+0x2de>
 802f2c4:	68fb      	ldr	r3, [r7, #12]
 802f2c6:	681b      	ldr	r3, [r3, #0]
 802f2c8:	4a21      	ldr	r2, [pc, #132]	; (802f350 <DMA_SetConfig+0x34c>)
 802f2ca:	4293      	cmp	r3, r2
 802f2cc:	d009      	beq.n	802f2e2 <DMA_SetConfig+0x2de>
 802f2ce:	68fb      	ldr	r3, [r7, #12]
 802f2d0:	681b      	ldr	r3, [r3, #0]
 802f2d2:	4a20      	ldr	r2, [pc, #128]	; (802f354 <DMA_SetConfig+0x350>)
 802f2d4:	4293      	cmp	r3, r2
 802f2d6:	d004      	beq.n	802f2e2 <DMA_SetConfig+0x2de>
 802f2d8:	68fb      	ldr	r3, [r7, #12]
 802f2da:	681b      	ldr	r3, [r3, #0]
 802f2dc:	4a1e      	ldr	r2, [pc, #120]	; (802f358 <DMA_SetConfig+0x354>)
 802f2de:	4293      	cmp	r3, r2
 802f2e0:	d101      	bne.n	802f2e6 <DMA_SetConfig+0x2e2>
 802f2e2:	2301      	movs	r3, #1
 802f2e4:	e000      	b.n	802f2e8 <DMA_SetConfig+0x2e4>
 802f2e6:	2300      	movs	r3, #0
 802f2e8:	2b00      	cmp	r3, #0
 802f2ea:	d020      	beq.n	802f32e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 802f2ec:	68fb      	ldr	r3, [r7, #12]
 802f2ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802f2f0:	f003 031f 	and.w	r3, r3, #31
 802f2f4:	2201      	movs	r2, #1
 802f2f6:	409a      	lsls	r2, r3
 802f2f8:	693b      	ldr	r3, [r7, #16]
 802f2fa:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 802f2fc:	68fb      	ldr	r3, [r7, #12]
 802f2fe:	681b      	ldr	r3, [r3, #0]
 802f300:	683a      	ldr	r2, [r7, #0]
 802f302:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 802f304:	68fb      	ldr	r3, [r7, #12]
 802f306:	689b      	ldr	r3, [r3, #8]
 802f308:	2b40      	cmp	r3, #64	; 0x40
 802f30a:	d108      	bne.n	802f31e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 802f30c:	68fb      	ldr	r3, [r7, #12]
 802f30e:	681b      	ldr	r3, [r3, #0]
 802f310:	687a      	ldr	r2, [r7, #4]
 802f312:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 802f314:	68fb      	ldr	r3, [r7, #12]
 802f316:	681b      	ldr	r3, [r3, #0]
 802f318:	68ba      	ldr	r2, [r7, #8]
 802f31a:	60da      	str	r2, [r3, #12]
}
 802f31c:	e007      	b.n	802f32e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 802f31e:	68fb      	ldr	r3, [r7, #12]
 802f320:	681b      	ldr	r3, [r3, #0]
 802f322:	68ba      	ldr	r2, [r7, #8]
 802f324:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 802f326:	68fb      	ldr	r3, [r7, #12]
 802f328:	681b      	ldr	r3, [r3, #0]
 802f32a:	687a      	ldr	r2, [r7, #4]
 802f32c:	60da      	str	r2, [r3, #12]
}
 802f32e:	bf00      	nop
 802f330:	371c      	adds	r7, #28
 802f332:	46bd      	mov	sp, r7
 802f334:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f338:	4770      	bx	lr
 802f33a:	bf00      	nop
 802f33c:	58025408 	.word	0x58025408
 802f340:	5802541c 	.word	0x5802541c
 802f344:	58025430 	.word	0x58025430
 802f348:	58025444 	.word	0x58025444
 802f34c:	58025458 	.word	0x58025458
 802f350:	5802546c 	.word	0x5802546c
 802f354:	58025480 	.word	0x58025480
 802f358:	58025494 	.word	0x58025494

0802f35c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 802f35c:	b480      	push	{r7}
 802f35e:	b085      	sub	sp, #20
 802f360:	af00      	add	r7, sp, #0
 802f362:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 802f364:	687b      	ldr	r3, [r7, #4]
 802f366:	681b      	ldr	r3, [r3, #0]
 802f368:	4a42      	ldr	r2, [pc, #264]	; (802f474 <DMA_CalcBaseAndBitshift+0x118>)
 802f36a:	4293      	cmp	r3, r2
 802f36c:	d04a      	beq.n	802f404 <DMA_CalcBaseAndBitshift+0xa8>
 802f36e:	687b      	ldr	r3, [r7, #4]
 802f370:	681b      	ldr	r3, [r3, #0]
 802f372:	4a41      	ldr	r2, [pc, #260]	; (802f478 <DMA_CalcBaseAndBitshift+0x11c>)
 802f374:	4293      	cmp	r3, r2
 802f376:	d045      	beq.n	802f404 <DMA_CalcBaseAndBitshift+0xa8>
 802f378:	687b      	ldr	r3, [r7, #4]
 802f37a:	681b      	ldr	r3, [r3, #0]
 802f37c:	4a3f      	ldr	r2, [pc, #252]	; (802f47c <DMA_CalcBaseAndBitshift+0x120>)
 802f37e:	4293      	cmp	r3, r2
 802f380:	d040      	beq.n	802f404 <DMA_CalcBaseAndBitshift+0xa8>
 802f382:	687b      	ldr	r3, [r7, #4]
 802f384:	681b      	ldr	r3, [r3, #0]
 802f386:	4a3e      	ldr	r2, [pc, #248]	; (802f480 <DMA_CalcBaseAndBitshift+0x124>)
 802f388:	4293      	cmp	r3, r2
 802f38a:	d03b      	beq.n	802f404 <DMA_CalcBaseAndBitshift+0xa8>
 802f38c:	687b      	ldr	r3, [r7, #4]
 802f38e:	681b      	ldr	r3, [r3, #0]
 802f390:	4a3c      	ldr	r2, [pc, #240]	; (802f484 <DMA_CalcBaseAndBitshift+0x128>)
 802f392:	4293      	cmp	r3, r2
 802f394:	d036      	beq.n	802f404 <DMA_CalcBaseAndBitshift+0xa8>
 802f396:	687b      	ldr	r3, [r7, #4]
 802f398:	681b      	ldr	r3, [r3, #0]
 802f39a:	4a3b      	ldr	r2, [pc, #236]	; (802f488 <DMA_CalcBaseAndBitshift+0x12c>)
 802f39c:	4293      	cmp	r3, r2
 802f39e:	d031      	beq.n	802f404 <DMA_CalcBaseAndBitshift+0xa8>
 802f3a0:	687b      	ldr	r3, [r7, #4]
 802f3a2:	681b      	ldr	r3, [r3, #0]
 802f3a4:	4a39      	ldr	r2, [pc, #228]	; (802f48c <DMA_CalcBaseAndBitshift+0x130>)
 802f3a6:	4293      	cmp	r3, r2
 802f3a8:	d02c      	beq.n	802f404 <DMA_CalcBaseAndBitshift+0xa8>
 802f3aa:	687b      	ldr	r3, [r7, #4]
 802f3ac:	681b      	ldr	r3, [r3, #0]
 802f3ae:	4a38      	ldr	r2, [pc, #224]	; (802f490 <DMA_CalcBaseAndBitshift+0x134>)
 802f3b0:	4293      	cmp	r3, r2
 802f3b2:	d027      	beq.n	802f404 <DMA_CalcBaseAndBitshift+0xa8>
 802f3b4:	687b      	ldr	r3, [r7, #4]
 802f3b6:	681b      	ldr	r3, [r3, #0]
 802f3b8:	4a36      	ldr	r2, [pc, #216]	; (802f494 <DMA_CalcBaseAndBitshift+0x138>)
 802f3ba:	4293      	cmp	r3, r2
 802f3bc:	d022      	beq.n	802f404 <DMA_CalcBaseAndBitshift+0xa8>
 802f3be:	687b      	ldr	r3, [r7, #4]
 802f3c0:	681b      	ldr	r3, [r3, #0]
 802f3c2:	4a35      	ldr	r2, [pc, #212]	; (802f498 <DMA_CalcBaseAndBitshift+0x13c>)
 802f3c4:	4293      	cmp	r3, r2
 802f3c6:	d01d      	beq.n	802f404 <DMA_CalcBaseAndBitshift+0xa8>
 802f3c8:	687b      	ldr	r3, [r7, #4]
 802f3ca:	681b      	ldr	r3, [r3, #0]
 802f3cc:	4a33      	ldr	r2, [pc, #204]	; (802f49c <DMA_CalcBaseAndBitshift+0x140>)
 802f3ce:	4293      	cmp	r3, r2
 802f3d0:	d018      	beq.n	802f404 <DMA_CalcBaseAndBitshift+0xa8>
 802f3d2:	687b      	ldr	r3, [r7, #4]
 802f3d4:	681b      	ldr	r3, [r3, #0]
 802f3d6:	4a32      	ldr	r2, [pc, #200]	; (802f4a0 <DMA_CalcBaseAndBitshift+0x144>)
 802f3d8:	4293      	cmp	r3, r2
 802f3da:	d013      	beq.n	802f404 <DMA_CalcBaseAndBitshift+0xa8>
 802f3dc:	687b      	ldr	r3, [r7, #4]
 802f3de:	681b      	ldr	r3, [r3, #0]
 802f3e0:	4a30      	ldr	r2, [pc, #192]	; (802f4a4 <DMA_CalcBaseAndBitshift+0x148>)
 802f3e2:	4293      	cmp	r3, r2
 802f3e4:	d00e      	beq.n	802f404 <DMA_CalcBaseAndBitshift+0xa8>
 802f3e6:	687b      	ldr	r3, [r7, #4]
 802f3e8:	681b      	ldr	r3, [r3, #0]
 802f3ea:	4a2f      	ldr	r2, [pc, #188]	; (802f4a8 <DMA_CalcBaseAndBitshift+0x14c>)
 802f3ec:	4293      	cmp	r3, r2
 802f3ee:	d009      	beq.n	802f404 <DMA_CalcBaseAndBitshift+0xa8>
 802f3f0:	687b      	ldr	r3, [r7, #4]
 802f3f2:	681b      	ldr	r3, [r3, #0]
 802f3f4:	4a2d      	ldr	r2, [pc, #180]	; (802f4ac <DMA_CalcBaseAndBitshift+0x150>)
 802f3f6:	4293      	cmp	r3, r2
 802f3f8:	d004      	beq.n	802f404 <DMA_CalcBaseAndBitshift+0xa8>
 802f3fa:	687b      	ldr	r3, [r7, #4]
 802f3fc:	681b      	ldr	r3, [r3, #0]
 802f3fe:	4a2c      	ldr	r2, [pc, #176]	; (802f4b0 <DMA_CalcBaseAndBitshift+0x154>)
 802f400:	4293      	cmp	r3, r2
 802f402:	d101      	bne.n	802f408 <DMA_CalcBaseAndBitshift+0xac>
 802f404:	2301      	movs	r3, #1
 802f406:	e000      	b.n	802f40a <DMA_CalcBaseAndBitshift+0xae>
 802f408:	2300      	movs	r3, #0
 802f40a:	2b00      	cmp	r3, #0
 802f40c:	d024      	beq.n	802f458 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 802f40e:	687b      	ldr	r3, [r7, #4]
 802f410:	681b      	ldr	r3, [r3, #0]
 802f412:	b2db      	uxtb	r3, r3
 802f414:	3b10      	subs	r3, #16
 802f416:	4a27      	ldr	r2, [pc, #156]	; (802f4b4 <DMA_CalcBaseAndBitshift+0x158>)
 802f418:	fba2 2303 	umull	r2, r3, r2, r3
 802f41c:	091b      	lsrs	r3, r3, #4
 802f41e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 802f420:	68fb      	ldr	r3, [r7, #12]
 802f422:	f003 0307 	and.w	r3, r3, #7
 802f426:	4a24      	ldr	r2, [pc, #144]	; (802f4b8 <DMA_CalcBaseAndBitshift+0x15c>)
 802f428:	5cd3      	ldrb	r3, [r2, r3]
 802f42a:	461a      	mov	r2, r3
 802f42c:	687b      	ldr	r3, [r7, #4]
 802f42e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 802f430:	68fb      	ldr	r3, [r7, #12]
 802f432:	2b03      	cmp	r3, #3
 802f434:	d908      	bls.n	802f448 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 802f436:	687b      	ldr	r3, [r7, #4]
 802f438:	681b      	ldr	r3, [r3, #0]
 802f43a:	461a      	mov	r2, r3
 802f43c:	4b1f      	ldr	r3, [pc, #124]	; (802f4bc <DMA_CalcBaseAndBitshift+0x160>)
 802f43e:	4013      	ands	r3, r2
 802f440:	1d1a      	adds	r2, r3, #4
 802f442:	687b      	ldr	r3, [r7, #4]
 802f444:	659a      	str	r2, [r3, #88]	; 0x58
 802f446:	e00d      	b.n	802f464 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 802f448:	687b      	ldr	r3, [r7, #4]
 802f44a:	681b      	ldr	r3, [r3, #0]
 802f44c:	461a      	mov	r2, r3
 802f44e:	4b1b      	ldr	r3, [pc, #108]	; (802f4bc <DMA_CalcBaseAndBitshift+0x160>)
 802f450:	4013      	ands	r3, r2
 802f452:	687a      	ldr	r2, [r7, #4]
 802f454:	6593      	str	r3, [r2, #88]	; 0x58
 802f456:	e005      	b.n	802f464 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 802f458:	687b      	ldr	r3, [r7, #4]
 802f45a:	681b      	ldr	r3, [r3, #0]
 802f45c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 802f460:	687b      	ldr	r3, [r7, #4]
 802f462:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 802f464:	687b      	ldr	r3, [r7, #4]
 802f466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 802f468:	4618      	mov	r0, r3
 802f46a:	3714      	adds	r7, #20
 802f46c:	46bd      	mov	sp, r7
 802f46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f472:	4770      	bx	lr
 802f474:	40020010 	.word	0x40020010
 802f478:	40020028 	.word	0x40020028
 802f47c:	40020040 	.word	0x40020040
 802f480:	40020058 	.word	0x40020058
 802f484:	40020070 	.word	0x40020070
 802f488:	40020088 	.word	0x40020088
 802f48c:	400200a0 	.word	0x400200a0
 802f490:	400200b8 	.word	0x400200b8
 802f494:	40020410 	.word	0x40020410
 802f498:	40020428 	.word	0x40020428
 802f49c:	40020440 	.word	0x40020440
 802f4a0:	40020458 	.word	0x40020458
 802f4a4:	40020470 	.word	0x40020470
 802f4a8:	40020488 	.word	0x40020488
 802f4ac:	400204a0 	.word	0x400204a0
 802f4b0:	400204b8 	.word	0x400204b8
 802f4b4:	aaaaaaab 	.word	0xaaaaaaab
 802f4b8:	08058e08 	.word	0x08058e08
 802f4bc:	fffffc00 	.word	0xfffffc00

0802f4c0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 802f4c0:	b480      	push	{r7}
 802f4c2:	b085      	sub	sp, #20
 802f4c4:	af00      	add	r7, sp, #0
 802f4c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 802f4c8:	2300      	movs	r3, #0
 802f4ca:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 802f4cc:	687b      	ldr	r3, [r7, #4]
 802f4ce:	699b      	ldr	r3, [r3, #24]
 802f4d0:	2b00      	cmp	r3, #0
 802f4d2:	d120      	bne.n	802f516 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 802f4d4:	687b      	ldr	r3, [r7, #4]
 802f4d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802f4d8:	2b03      	cmp	r3, #3
 802f4da:	d858      	bhi.n	802f58e <DMA_CheckFifoParam+0xce>
 802f4dc:	a201      	add	r2, pc, #4	; (adr r2, 802f4e4 <DMA_CheckFifoParam+0x24>)
 802f4de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802f4e2:	bf00      	nop
 802f4e4:	0802f4f5 	.word	0x0802f4f5
 802f4e8:	0802f507 	.word	0x0802f507
 802f4ec:	0802f4f5 	.word	0x0802f4f5
 802f4f0:	0802f58f 	.word	0x0802f58f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 802f4f4:	687b      	ldr	r3, [r7, #4]
 802f4f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802f4f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 802f4fc:	2b00      	cmp	r3, #0
 802f4fe:	d048      	beq.n	802f592 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 802f500:	2301      	movs	r3, #1
 802f502:	73fb      	strb	r3, [r7, #15]
        }
        break;
 802f504:	e045      	b.n	802f592 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 802f506:	687b      	ldr	r3, [r7, #4]
 802f508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802f50a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 802f50e:	d142      	bne.n	802f596 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 802f510:	2301      	movs	r3, #1
 802f512:	73fb      	strb	r3, [r7, #15]
        }
        break;
 802f514:	e03f      	b.n	802f596 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 802f516:	687b      	ldr	r3, [r7, #4]
 802f518:	699b      	ldr	r3, [r3, #24]
 802f51a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802f51e:	d123      	bne.n	802f568 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 802f520:	687b      	ldr	r3, [r7, #4]
 802f522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802f524:	2b03      	cmp	r3, #3
 802f526:	d838      	bhi.n	802f59a <DMA_CheckFifoParam+0xda>
 802f528:	a201      	add	r2, pc, #4	; (adr r2, 802f530 <DMA_CheckFifoParam+0x70>)
 802f52a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802f52e:	bf00      	nop
 802f530:	0802f541 	.word	0x0802f541
 802f534:	0802f547 	.word	0x0802f547
 802f538:	0802f541 	.word	0x0802f541
 802f53c:	0802f559 	.word	0x0802f559
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 802f540:	2301      	movs	r3, #1
 802f542:	73fb      	strb	r3, [r7, #15]
        break;
 802f544:	e030      	b.n	802f5a8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 802f546:	687b      	ldr	r3, [r7, #4]
 802f548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802f54a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 802f54e:	2b00      	cmp	r3, #0
 802f550:	d025      	beq.n	802f59e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 802f552:	2301      	movs	r3, #1
 802f554:	73fb      	strb	r3, [r7, #15]
        }
        break;
 802f556:	e022      	b.n	802f59e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 802f558:	687b      	ldr	r3, [r7, #4]
 802f55a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802f55c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 802f560:	d11f      	bne.n	802f5a2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 802f562:	2301      	movs	r3, #1
 802f564:	73fb      	strb	r3, [r7, #15]
        }
        break;
 802f566:	e01c      	b.n	802f5a2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 802f568:	687b      	ldr	r3, [r7, #4]
 802f56a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802f56c:	2b02      	cmp	r3, #2
 802f56e:	d902      	bls.n	802f576 <DMA_CheckFifoParam+0xb6>
 802f570:	2b03      	cmp	r3, #3
 802f572:	d003      	beq.n	802f57c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 802f574:	e018      	b.n	802f5a8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 802f576:	2301      	movs	r3, #1
 802f578:	73fb      	strb	r3, [r7, #15]
        break;
 802f57a:	e015      	b.n	802f5a8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 802f57c:	687b      	ldr	r3, [r7, #4]
 802f57e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802f580:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 802f584:	2b00      	cmp	r3, #0
 802f586:	d00e      	beq.n	802f5a6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 802f588:	2301      	movs	r3, #1
 802f58a:	73fb      	strb	r3, [r7, #15]
    break;
 802f58c:	e00b      	b.n	802f5a6 <DMA_CheckFifoParam+0xe6>
        break;
 802f58e:	bf00      	nop
 802f590:	e00a      	b.n	802f5a8 <DMA_CheckFifoParam+0xe8>
        break;
 802f592:	bf00      	nop
 802f594:	e008      	b.n	802f5a8 <DMA_CheckFifoParam+0xe8>
        break;
 802f596:	bf00      	nop
 802f598:	e006      	b.n	802f5a8 <DMA_CheckFifoParam+0xe8>
        break;
 802f59a:	bf00      	nop
 802f59c:	e004      	b.n	802f5a8 <DMA_CheckFifoParam+0xe8>
        break;
 802f59e:	bf00      	nop
 802f5a0:	e002      	b.n	802f5a8 <DMA_CheckFifoParam+0xe8>
        break;
 802f5a2:	bf00      	nop
 802f5a4:	e000      	b.n	802f5a8 <DMA_CheckFifoParam+0xe8>
    break;
 802f5a6:	bf00      	nop
    }
  }

  return status;
 802f5a8:	7bfb      	ldrb	r3, [r7, #15]
}
 802f5aa:	4618      	mov	r0, r3
 802f5ac:	3714      	adds	r7, #20
 802f5ae:	46bd      	mov	sp, r7
 802f5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f5b4:	4770      	bx	lr
 802f5b6:	bf00      	nop

0802f5b8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 802f5b8:	b480      	push	{r7}
 802f5ba:	b085      	sub	sp, #20
 802f5bc:	af00      	add	r7, sp, #0
 802f5be:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 802f5c0:	687b      	ldr	r3, [r7, #4]
 802f5c2:	681b      	ldr	r3, [r3, #0]
 802f5c4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 802f5c6:	687b      	ldr	r3, [r7, #4]
 802f5c8:	681b      	ldr	r3, [r3, #0]
 802f5ca:	4a38      	ldr	r2, [pc, #224]	; (802f6ac <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 802f5cc:	4293      	cmp	r3, r2
 802f5ce:	d022      	beq.n	802f616 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 802f5d0:	687b      	ldr	r3, [r7, #4]
 802f5d2:	681b      	ldr	r3, [r3, #0]
 802f5d4:	4a36      	ldr	r2, [pc, #216]	; (802f6b0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 802f5d6:	4293      	cmp	r3, r2
 802f5d8:	d01d      	beq.n	802f616 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 802f5da:	687b      	ldr	r3, [r7, #4]
 802f5dc:	681b      	ldr	r3, [r3, #0]
 802f5de:	4a35      	ldr	r2, [pc, #212]	; (802f6b4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 802f5e0:	4293      	cmp	r3, r2
 802f5e2:	d018      	beq.n	802f616 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 802f5e4:	687b      	ldr	r3, [r7, #4]
 802f5e6:	681b      	ldr	r3, [r3, #0]
 802f5e8:	4a33      	ldr	r2, [pc, #204]	; (802f6b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 802f5ea:	4293      	cmp	r3, r2
 802f5ec:	d013      	beq.n	802f616 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 802f5ee:	687b      	ldr	r3, [r7, #4]
 802f5f0:	681b      	ldr	r3, [r3, #0]
 802f5f2:	4a32      	ldr	r2, [pc, #200]	; (802f6bc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 802f5f4:	4293      	cmp	r3, r2
 802f5f6:	d00e      	beq.n	802f616 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 802f5f8:	687b      	ldr	r3, [r7, #4]
 802f5fa:	681b      	ldr	r3, [r3, #0]
 802f5fc:	4a30      	ldr	r2, [pc, #192]	; (802f6c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 802f5fe:	4293      	cmp	r3, r2
 802f600:	d009      	beq.n	802f616 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 802f602:	687b      	ldr	r3, [r7, #4]
 802f604:	681b      	ldr	r3, [r3, #0]
 802f606:	4a2f      	ldr	r2, [pc, #188]	; (802f6c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 802f608:	4293      	cmp	r3, r2
 802f60a:	d004      	beq.n	802f616 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 802f60c:	687b      	ldr	r3, [r7, #4]
 802f60e:	681b      	ldr	r3, [r3, #0]
 802f610:	4a2d      	ldr	r2, [pc, #180]	; (802f6c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 802f612:	4293      	cmp	r3, r2
 802f614:	d101      	bne.n	802f61a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 802f616:	2301      	movs	r3, #1
 802f618:	e000      	b.n	802f61c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 802f61a:	2300      	movs	r3, #0
 802f61c:	2b00      	cmp	r3, #0
 802f61e:	d01a      	beq.n	802f656 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 802f620:	687b      	ldr	r3, [r7, #4]
 802f622:	681b      	ldr	r3, [r3, #0]
 802f624:	b2db      	uxtb	r3, r3
 802f626:	3b08      	subs	r3, #8
 802f628:	4a28      	ldr	r2, [pc, #160]	; (802f6cc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 802f62a:	fba2 2303 	umull	r2, r3, r2, r3
 802f62e:	091b      	lsrs	r3, r3, #4
 802f630:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 802f632:	68fa      	ldr	r2, [r7, #12]
 802f634:	4b26      	ldr	r3, [pc, #152]	; (802f6d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 802f636:	4413      	add	r3, r2
 802f638:	009b      	lsls	r3, r3, #2
 802f63a:	461a      	mov	r2, r3
 802f63c:	687b      	ldr	r3, [r7, #4]
 802f63e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 802f640:	687b      	ldr	r3, [r7, #4]
 802f642:	4a24      	ldr	r2, [pc, #144]	; (802f6d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 802f644:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 802f646:	68fb      	ldr	r3, [r7, #12]
 802f648:	f003 031f 	and.w	r3, r3, #31
 802f64c:	2201      	movs	r2, #1
 802f64e:	409a      	lsls	r2, r3
 802f650:	687b      	ldr	r3, [r7, #4]
 802f652:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 802f654:	e024      	b.n	802f6a0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 802f656:	687b      	ldr	r3, [r7, #4]
 802f658:	681b      	ldr	r3, [r3, #0]
 802f65a:	b2db      	uxtb	r3, r3
 802f65c:	3b10      	subs	r3, #16
 802f65e:	4a1e      	ldr	r2, [pc, #120]	; (802f6d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 802f660:	fba2 2303 	umull	r2, r3, r2, r3
 802f664:	091b      	lsrs	r3, r3, #4
 802f666:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 802f668:	68bb      	ldr	r3, [r7, #8]
 802f66a:	4a1c      	ldr	r2, [pc, #112]	; (802f6dc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 802f66c:	4293      	cmp	r3, r2
 802f66e:	d806      	bhi.n	802f67e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 802f670:	68bb      	ldr	r3, [r7, #8]
 802f672:	4a1b      	ldr	r2, [pc, #108]	; (802f6e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 802f674:	4293      	cmp	r3, r2
 802f676:	d902      	bls.n	802f67e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 802f678:	68fb      	ldr	r3, [r7, #12]
 802f67a:	3308      	adds	r3, #8
 802f67c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 802f67e:	68fa      	ldr	r2, [r7, #12]
 802f680:	4b18      	ldr	r3, [pc, #96]	; (802f6e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 802f682:	4413      	add	r3, r2
 802f684:	009b      	lsls	r3, r3, #2
 802f686:	461a      	mov	r2, r3
 802f688:	687b      	ldr	r3, [r7, #4]
 802f68a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 802f68c:	687b      	ldr	r3, [r7, #4]
 802f68e:	4a16      	ldr	r2, [pc, #88]	; (802f6e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 802f690:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 802f692:	68fb      	ldr	r3, [r7, #12]
 802f694:	f003 031f 	and.w	r3, r3, #31
 802f698:	2201      	movs	r2, #1
 802f69a:	409a      	lsls	r2, r3
 802f69c:	687b      	ldr	r3, [r7, #4]
 802f69e:	669a      	str	r2, [r3, #104]	; 0x68
}
 802f6a0:	bf00      	nop
 802f6a2:	3714      	adds	r7, #20
 802f6a4:	46bd      	mov	sp, r7
 802f6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f6aa:	4770      	bx	lr
 802f6ac:	58025408 	.word	0x58025408
 802f6b0:	5802541c 	.word	0x5802541c
 802f6b4:	58025430 	.word	0x58025430
 802f6b8:	58025444 	.word	0x58025444
 802f6bc:	58025458 	.word	0x58025458
 802f6c0:	5802546c 	.word	0x5802546c
 802f6c4:	58025480 	.word	0x58025480
 802f6c8:	58025494 	.word	0x58025494
 802f6cc:	cccccccd 	.word	0xcccccccd
 802f6d0:	16009600 	.word	0x16009600
 802f6d4:	58025880 	.word	0x58025880
 802f6d8:	aaaaaaab 	.word	0xaaaaaaab
 802f6dc:	400204b8 	.word	0x400204b8
 802f6e0:	4002040f 	.word	0x4002040f
 802f6e4:	10008200 	.word	0x10008200
 802f6e8:	40020880 	.word	0x40020880

0802f6ec <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 802f6ec:	b480      	push	{r7}
 802f6ee:	b085      	sub	sp, #20
 802f6f0:	af00      	add	r7, sp, #0
 802f6f2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 802f6f4:	687b      	ldr	r3, [r7, #4]
 802f6f6:	685b      	ldr	r3, [r3, #4]
 802f6f8:	b2db      	uxtb	r3, r3
 802f6fa:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 802f6fc:	68fb      	ldr	r3, [r7, #12]
 802f6fe:	2b00      	cmp	r3, #0
 802f700:	d04a      	beq.n	802f798 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 802f702:	68fb      	ldr	r3, [r7, #12]
 802f704:	2b08      	cmp	r3, #8
 802f706:	d847      	bhi.n	802f798 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 802f708:	687b      	ldr	r3, [r7, #4]
 802f70a:	681b      	ldr	r3, [r3, #0]
 802f70c:	4a25      	ldr	r2, [pc, #148]	; (802f7a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 802f70e:	4293      	cmp	r3, r2
 802f710:	d022      	beq.n	802f758 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 802f712:	687b      	ldr	r3, [r7, #4]
 802f714:	681b      	ldr	r3, [r3, #0]
 802f716:	4a24      	ldr	r2, [pc, #144]	; (802f7a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 802f718:	4293      	cmp	r3, r2
 802f71a:	d01d      	beq.n	802f758 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 802f71c:	687b      	ldr	r3, [r7, #4]
 802f71e:	681b      	ldr	r3, [r3, #0]
 802f720:	4a22      	ldr	r2, [pc, #136]	; (802f7ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 802f722:	4293      	cmp	r3, r2
 802f724:	d018      	beq.n	802f758 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 802f726:	687b      	ldr	r3, [r7, #4]
 802f728:	681b      	ldr	r3, [r3, #0]
 802f72a:	4a21      	ldr	r2, [pc, #132]	; (802f7b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 802f72c:	4293      	cmp	r3, r2
 802f72e:	d013      	beq.n	802f758 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 802f730:	687b      	ldr	r3, [r7, #4]
 802f732:	681b      	ldr	r3, [r3, #0]
 802f734:	4a1f      	ldr	r2, [pc, #124]	; (802f7b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 802f736:	4293      	cmp	r3, r2
 802f738:	d00e      	beq.n	802f758 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 802f73a:	687b      	ldr	r3, [r7, #4]
 802f73c:	681b      	ldr	r3, [r3, #0]
 802f73e:	4a1e      	ldr	r2, [pc, #120]	; (802f7b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 802f740:	4293      	cmp	r3, r2
 802f742:	d009      	beq.n	802f758 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 802f744:	687b      	ldr	r3, [r7, #4]
 802f746:	681b      	ldr	r3, [r3, #0]
 802f748:	4a1c      	ldr	r2, [pc, #112]	; (802f7bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 802f74a:	4293      	cmp	r3, r2
 802f74c:	d004      	beq.n	802f758 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 802f74e:	687b      	ldr	r3, [r7, #4]
 802f750:	681b      	ldr	r3, [r3, #0]
 802f752:	4a1b      	ldr	r2, [pc, #108]	; (802f7c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 802f754:	4293      	cmp	r3, r2
 802f756:	d101      	bne.n	802f75c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 802f758:	2301      	movs	r3, #1
 802f75a:	e000      	b.n	802f75e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 802f75c:	2300      	movs	r3, #0
 802f75e:	2b00      	cmp	r3, #0
 802f760:	d00a      	beq.n	802f778 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 802f762:	68fa      	ldr	r2, [r7, #12]
 802f764:	4b17      	ldr	r3, [pc, #92]	; (802f7c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 802f766:	4413      	add	r3, r2
 802f768:	009b      	lsls	r3, r3, #2
 802f76a:	461a      	mov	r2, r3
 802f76c:	687b      	ldr	r3, [r7, #4]
 802f76e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 802f770:	687b      	ldr	r3, [r7, #4]
 802f772:	4a15      	ldr	r2, [pc, #84]	; (802f7c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 802f774:	671a      	str	r2, [r3, #112]	; 0x70
 802f776:	e009      	b.n	802f78c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 802f778:	68fa      	ldr	r2, [r7, #12]
 802f77a:	4b14      	ldr	r3, [pc, #80]	; (802f7cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 802f77c:	4413      	add	r3, r2
 802f77e:	009b      	lsls	r3, r3, #2
 802f780:	461a      	mov	r2, r3
 802f782:	687b      	ldr	r3, [r7, #4]
 802f784:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 802f786:	687b      	ldr	r3, [r7, #4]
 802f788:	4a11      	ldr	r2, [pc, #68]	; (802f7d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 802f78a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 802f78c:	68fb      	ldr	r3, [r7, #12]
 802f78e:	3b01      	subs	r3, #1
 802f790:	2201      	movs	r2, #1
 802f792:	409a      	lsls	r2, r3
 802f794:	687b      	ldr	r3, [r7, #4]
 802f796:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 802f798:	bf00      	nop
 802f79a:	3714      	adds	r7, #20
 802f79c:	46bd      	mov	sp, r7
 802f79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f7a2:	4770      	bx	lr
 802f7a4:	58025408 	.word	0x58025408
 802f7a8:	5802541c 	.word	0x5802541c
 802f7ac:	58025430 	.word	0x58025430
 802f7b0:	58025444 	.word	0x58025444
 802f7b4:	58025458 	.word	0x58025458
 802f7b8:	5802546c 	.word	0x5802546c
 802f7bc:	58025480 	.word	0x58025480
 802f7c0:	58025494 	.word	0x58025494
 802f7c4:	1600963f 	.word	0x1600963f
 802f7c8:	58025940 	.word	0x58025940
 802f7cc:	1000823f 	.word	0x1000823f
 802f7d0:	40020940 	.word	0x40020940

0802f7d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 802f7d4:	b480      	push	{r7}
 802f7d6:	b089      	sub	sp, #36	; 0x24
 802f7d8:	af00      	add	r7, sp, #0
 802f7da:	6078      	str	r0, [r7, #4]
 802f7dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 802f7de:	2300      	movs	r3, #0
 802f7e0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 802f7e2:	4b89      	ldr	r3, [pc, #548]	; (802fa08 <HAL_GPIO_Init+0x234>)
 802f7e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 802f7e6:	e194      	b.n	802fb12 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 802f7e8:	683b      	ldr	r3, [r7, #0]
 802f7ea:	681a      	ldr	r2, [r3, #0]
 802f7ec:	2101      	movs	r1, #1
 802f7ee:	69fb      	ldr	r3, [r7, #28]
 802f7f0:	fa01 f303 	lsl.w	r3, r1, r3
 802f7f4:	4013      	ands	r3, r2
 802f7f6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 802f7f8:	693b      	ldr	r3, [r7, #16]
 802f7fa:	2b00      	cmp	r3, #0
 802f7fc:	f000 8186 	beq.w	802fb0c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 802f800:	683b      	ldr	r3, [r7, #0]
 802f802:	685b      	ldr	r3, [r3, #4]
 802f804:	f003 0303 	and.w	r3, r3, #3
 802f808:	2b01      	cmp	r3, #1
 802f80a:	d005      	beq.n	802f818 <HAL_GPIO_Init+0x44>
 802f80c:	683b      	ldr	r3, [r7, #0]
 802f80e:	685b      	ldr	r3, [r3, #4]
 802f810:	f003 0303 	and.w	r3, r3, #3
 802f814:	2b02      	cmp	r3, #2
 802f816:	d130      	bne.n	802f87a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 802f818:	687b      	ldr	r3, [r7, #4]
 802f81a:	689b      	ldr	r3, [r3, #8]
 802f81c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 802f81e:	69fb      	ldr	r3, [r7, #28]
 802f820:	005b      	lsls	r3, r3, #1
 802f822:	2203      	movs	r2, #3
 802f824:	fa02 f303 	lsl.w	r3, r2, r3
 802f828:	43db      	mvns	r3, r3
 802f82a:	69ba      	ldr	r2, [r7, #24]
 802f82c:	4013      	ands	r3, r2
 802f82e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 802f830:	683b      	ldr	r3, [r7, #0]
 802f832:	68da      	ldr	r2, [r3, #12]
 802f834:	69fb      	ldr	r3, [r7, #28]
 802f836:	005b      	lsls	r3, r3, #1
 802f838:	fa02 f303 	lsl.w	r3, r2, r3
 802f83c:	69ba      	ldr	r2, [r7, #24]
 802f83e:	4313      	orrs	r3, r2
 802f840:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 802f842:	687b      	ldr	r3, [r7, #4]
 802f844:	69ba      	ldr	r2, [r7, #24]
 802f846:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 802f848:	687b      	ldr	r3, [r7, #4]
 802f84a:	685b      	ldr	r3, [r3, #4]
 802f84c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 802f84e:	2201      	movs	r2, #1
 802f850:	69fb      	ldr	r3, [r7, #28]
 802f852:	fa02 f303 	lsl.w	r3, r2, r3
 802f856:	43db      	mvns	r3, r3
 802f858:	69ba      	ldr	r2, [r7, #24]
 802f85a:	4013      	ands	r3, r2
 802f85c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 802f85e:	683b      	ldr	r3, [r7, #0]
 802f860:	685b      	ldr	r3, [r3, #4]
 802f862:	091b      	lsrs	r3, r3, #4
 802f864:	f003 0201 	and.w	r2, r3, #1
 802f868:	69fb      	ldr	r3, [r7, #28]
 802f86a:	fa02 f303 	lsl.w	r3, r2, r3
 802f86e:	69ba      	ldr	r2, [r7, #24]
 802f870:	4313      	orrs	r3, r2
 802f872:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 802f874:	687b      	ldr	r3, [r7, #4]
 802f876:	69ba      	ldr	r2, [r7, #24]
 802f878:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 802f87a:	683b      	ldr	r3, [r7, #0]
 802f87c:	685b      	ldr	r3, [r3, #4]
 802f87e:	f003 0303 	and.w	r3, r3, #3
 802f882:	2b03      	cmp	r3, #3
 802f884:	d017      	beq.n	802f8b6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 802f886:	687b      	ldr	r3, [r7, #4]
 802f888:	68db      	ldr	r3, [r3, #12]
 802f88a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 802f88c:	69fb      	ldr	r3, [r7, #28]
 802f88e:	005b      	lsls	r3, r3, #1
 802f890:	2203      	movs	r2, #3
 802f892:	fa02 f303 	lsl.w	r3, r2, r3
 802f896:	43db      	mvns	r3, r3
 802f898:	69ba      	ldr	r2, [r7, #24]
 802f89a:	4013      	ands	r3, r2
 802f89c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 802f89e:	683b      	ldr	r3, [r7, #0]
 802f8a0:	689a      	ldr	r2, [r3, #8]
 802f8a2:	69fb      	ldr	r3, [r7, #28]
 802f8a4:	005b      	lsls	r3, r3, #1
 802f8a6:	fa02 f303 	lsl.w	r3, r2, r3
 802f8aa:	69ba      	ldr	r2, [r7, #24]
 802f8ac:	4313      	orrs	r3, r2
 802f8ae:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 802f8b0:	687b      	ldr	r3, [r7, #4]
 802f8b2:	69ba      	ldr	r2, [r7, #24]
 802f8b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 802f8b6:	683b      	ldr	r3, [r7, #0]
 802f8b8:	685b      	ldr	r3, [r3, #4]
 802f8ba:	f003 0303 	and.w	r3, r3, #3
 802f8be:	2b02      	cmp	r3, #2
 802f8c0:	d123      	bne.n	802f90a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 802f8c2:	69fb      	ldr	r3, [r7, #28]
 802f8c4:	08da      	lsrs	r2, r3, #3
 802f8c6:	687b      	ldr	r3, [r7, #4]
 802f8c8:	3208      	adds	r2, #8
 802f8ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802f8ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 802f8d0:	69fb      	ldr	r3, [r7, #28]
 802f8d2:	f003 0307 	and.w	r3, r3, #7
 802f8d6:	009b      	lsls	r3, r3, #2
 802f8d8:	220f      	movs	r2, #15
 802f8da:	fa02 f303 	lsl.w	r3, r2, r3
 802f8de:	43db      	mvns	r3, r3
 802f8e0:	69ba      	ldr	r2, [r7, #24]
 802f8e2:	4013      	ands	r3, r2
 802f8e4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 802f8e6:	683b      	ldr	r3, [r7, #0]
 802f8e8:	691a      	ldr	r2, [r3, #16]
 802f8ea:	69fb      	ldr	r3, [r7, #28]
 802f8ec:	f003 0307 	and.w	r3, r3, #7
 802f8f0:	009b      	lsls	r3, r3, #2
 802f8f2:	fa02 f303 	lsl.w	r3, r2, r3
 802f8f6:	69ba      	ldr	r2, [r7, #24]
 802f8f8:	4313      	orrs	r3, r2
 802f8fa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 802f8fc:	69fb      	ldr	r3, [r7, #28]
 802f8fe:	08da      	lsrs	r2, r3, #3
 802f900:	687b      	ldr	r3, [r7, #4]
 802f902:	3208      	adds	r2, #8
 802f904:	69b9      	ldr	r1, [r7, #24]
 802f906:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 802f90a:	687b      	ldr	r3, [r7, #4]
 802f90c:	681b      	ldr	r3, [r3, #0]
 802f90e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 802f910:	69fb      	ldr	r3, [r7, #28]
 802f912:	005b      	lsls	r3, r3, #1
 802f914:	2203      	movs	r2, #3
 802f916:	fa02 f303 	lsl.w	r3, r2, r3
 802f91a:	43db      	mvns	r3, r3
 802f91c:	69ba      	ldr	r2, [r7, #24]
 802f91e:	4013      	ands	r3, r2
 802f920:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 802f922:	683b      	ldr	r3, [r7, #0]
 802f924:	685b      	ldr	r3, [r3, #4]
 802f926:	f003 0203 	and.w	r2, r3, #3
 802f92a:	69fb      	ldr	r3, [r7, #28]
 802f92c:	005b      	lsls	r3, r3, #1
 802f92e:	fa02 f303 	lsl.w	r3, r2, r3
 802f932:	69ba      	ldr	r2, [r7, #24]
 802f934:	4313      	orrs	r3, r2
 802f936:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 802f938:	687b      	ldr	r3, [r7, #4]
 802f93a:	69ba      	ldr	r2, [r7, #24]
 802f93c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 802f93e:	683b      	ldr	r3, [r7, #0]
 802f940:	685b      	ldr	r3, [r3, #4]
 802f942:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 802f946:	2b00      	cmp	r3, #0
 802f948:	f000 80e0 	beq.w	802fb0c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 802f94c:	4b2f      	ldr	r3, [pc, #188]	; (802fa0c <HAL_GPIO_Init+0x238>)
 802f94e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 802f952:	4a2e      	ldr	r2, [pc, #184]	; (802fa0c <HAL_GPIO_Init+0x238>)
 802f954:	f043 0302 	orr.w	r3, r3, #2
 802f958:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 802f95c:	4b2b      	ldr	r3, [pc, #172]	; (802fa0c <HAL_GPIO_Init+0x238>)
 802f95e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 802f962:	f003 0302 	and.w	r3, r3, #2
 802f966:	60fb      	str	r3, [r7, #12]
 802f968:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 802f96a:	4a29      	ldr	r2, [pc, #164]	; (802fa10 <HAL_GPIO_Init+0x23c>)
 802f96c:	69fb      	ldr	r3, [r7, #28]
 802f96e:	089b      	lsrs	r3, r3, #2
 802f970:	3302      	adds	r3, #2
 802f972:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802f976:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 802f978:	69fb      	ldr	r3, [r7, #28]
 802f97a:	f003 0303 	and.w	r3, r3, #3
 802f97e:	009b      	lsls	r3, r3, #2
 802f980:	220f      	movs	r2, #15
 802f982:	fa02 f303 	lsl.w	r3, r2, r3
 802f986:	43db      	mvns	r3, r3
 802f988:	69ba      	ldr	r2, [r7, #24]
 802f98a:	4013      	ands	r3, r2
 802f98c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 802f98e:	687b      	ldr	r3, [r7, #4]
 802f990:	4a20      	ldr	r2, [pc, #128]	; (802fa14 <HAL_GPIO_Init+0x240>)
 802f992:	4293      	cmp	r3, r2
 802f994:	d052      	beq.n	802fa3c <HAL_GPIO_Init+0x268>
 802f996:	687b      	ldr	r3, [r7, #4]
 802f998:	4a1f      	ldr	r2, [pc, #124]	; (802fa18 <HAL_GPIO_Init+0x244>)
 802f99a:	4293      	cmp	r3, r2
 802f99c:	d031      	beq.n	802fa02 <HAL_GPIO_Init+0x22e>
 802f99e:	687b      	ldr	r3, [r7, #4]
 802f9a0:	4a1e      	ldr	r2, [pc, #120]	; (802fa1c <HAL_GPIO_Init+0x248>)
 802f9a2:	4293      	cmp	r3, r2
 802f9a4:	d02b      	beq.n	802f9fe <HAL_GPIO_Init+0x22a>
 802f9a6:	687b      	ldr	r3, [r7, #4]
 802f9a8:	4a1d      	ldr	r2, [pc, #116]	; (802fa20 <HAL_GPIO_Init+0x24c>)
 802f9aa:	4293      	cmp	r3, r2
 802f9ac:	d025      	beq.n	802f9fa <HAL_GPIO_Init+0x226>
 802f9ae:	687b      	ldr	r3, [r7, #4]
 802f9b0:	4a1c      	ldr	r2, [pc, #112]	; (802fa24 <HAL_GPIO_Init+0x250>)
 802f9b2:	4293      	cmp	r3, r2
 802f9b4:	d01f      	beq.n	802f9f6 <HAL_GPIO_Init+0x222>
 802f9b6:	687b      	ldr	r3, [r7, #4]
 802f9b8:	4a1b      	ldr	r2, [pc, #108]	; (802fa28 <HAL_GPIO_Init+0x254>)
 802f9ba:	4293      	cmp	r3, r2
 802f9bc:	d019      	beq.n	802f9f2 <HAL_GPIO_Init+0x21e>
 802f9be:	687b      	ldr	r3, [r7, #4]
 802f9c0:	4a1a      	ldr	r2, [pc, #104]	; (802fa2c <HAL_GPIO_Init+0x258>)
 802f9c2:	4293      	cmp	r3, r2
 802f9c4:	d013      	beq.n	802f9ee <HAL_GPIO_Init+0x21a>
 802f9c6:	687b      	ldr	r3, [r7, #4]
 802f9c8:	4a19      	ldr	r2, [pc, #100]	; (802fa30 <HAL_GPIO_Init+0x25c>)
 802f9ca:	4293      	cmp	r3, r2
 802f9cc:	d00d      	beq.n	802f9ea <HAL_GPIO_Init+0x216>
 802f9ce:	687b      	ldr	r3, [r7, #4]
 802f9d0:	4a18      	ldr	r2, [pc, #96]	; (802fa34 <HAL_GPIO_Init+0x260>)
 802f9d2:	4293      	cmp	r3, r2
 802f9d4:	d007      	beq.n	802f9e6 <HAL_GPIO_Init+0x212>
 802f9d6:	687b      	ldr	r3, [r7, #4]
 802f9d8:	4a17      	ldr	r2, [pc, #92]	; (802fa38 <HAL_GPIO_Init+0x264>)
 802f9da:	4293      	cmp	r3, r2
 802f9dc:	d101      	bne.n	802f9e2 <HAL_GPIO_Init+0x20e>
 802f9de:	2309      	movs	r3, #9
 802f9e0:	e02d      	b.n	802fa3e <HAL_GPIO_Init+0x26a>
 802f9e2:	230a      	movs	r3, #10
 802f9e4:	e02b      	b.n	802fa3e <HAL_GPIO_Init+0x26a>
 802f9e6:	2308      	movs	r3, #8
 802f9e8:	e029      	b.n	802fa3e <HAL_GPIO_Init+0x26a>
 802f9ea:	2307      	movs	r3, #7
 802f9ec:	e027      	b.n	802fa3e <HAL_GPIO_Init+0x26a>
 802f9ee:	2306      	movs	r3, #6
 802f9f0:	e025      	b.n	802fa3e <HAL_GPIO_Init+0x26a>
 802f9f2:	2305      	movs	r3, #5
 802f9f4:	e023      	b.n	802fa3e <HAL_GPIO_Init+0x26a>
 802f9f6:	2304      	movs	r3, #4
 802f9f8:	e021      	b.n	802fa3e <HAL_GPIO_Init+0x26a>
 802f9fa:	2303      	movs	r3, #3
 802f9fc:	e01f      	b.n	802fa3e <HAL_GPIO_Init+0x26a>
 802f9fe:	2302      	movs	r3, #2
 802fa00:	e01d      	b.n	802fa3e <HAL_GPIO_Init+0x26a>
 802fa02:	2301      	movs	r3, #1
 802fa04:	e01b      	b.n	802fa3e <HAL_GPIO_Init+0x26a>
 802fa06:	bf00      	nop
 802fa08:	58000080 	.word	0x58000080
 802fa0c:	58024400 	.word	0x58024400
 802fa10:	58000400 	.word	0x58000400
 802fa14:	58020000 	.word	0x58020000
 802fa18:	58020400 	.word	0x58020400
 802fa1c:	58020800 	.word	0x58020800
 802fa20:	58020c00 	.word	0x58020c00
 802fa24:	58021000 	.word	0x58021000
 802fa28:	58021400 	.word	0x58021400
 802fa2c:	58021800 	.word	0x58021800
 802fa30:	58021c00 	.word	0x58021c00
 802fa34:	58022000 	.word	0x58022000
 802fa38:	58022400 	.word	0x58022400
 802fa3c:	2300      	movs	r3, #0
 802fa3e:	69fa      	ldr	r2, [r7, #28]
 802fa40:	f002 0203 	and.w	r2, r2, #3
 802fa44:	0092      	lsls	r2, r2, #2
 802fa46:	4093      	lsls	r3, r2
 802fa48:	69ba      	ldr	r2, [r7, #24]
 802fa4a:	4313      	orrs	r3, r2
 802fa4c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 802fa4e:	4938      	ldr	r1, [pc, #224]	; (802fb30 <HAL_GPIO_Init+0x35c>)
 802fa50:	69fb      	ldr	r3, [r7, #28]
 802fa52:	089b      	lsrs	r3, r3, #2
 802fa54:	3302      	adds	r3, #2
 802fa56:	69ba      	ldr	r2, [r7, #24]
 802fa58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 802fa5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802fa60:	681b      	ldr	r3, [r3, #0]
 802fa62:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 802fa64:	693b      	ldr	r3, [r7, #16]
 802fa66:	43db      	mvns	r3, r3
 802fa68:	69ba      	ldr	r2, [r7, #24]
 802fa6a:	4013      	ands	r3, r2
 802fa6c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 802fa6e:	683b      	ldr	r3, [r7, #0]
 802fa70:	685b      	ldr	r3, [r3, #4]
 802fa72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 802fa76:	2b00      	cmp	r3, #0
 802fa78:	d003      	beq.n	802fa82 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 802fa7a:	69ba      	ldr	r2, [r7, #24]
 802fa7c:	693b      	ldr	r3, [r7, #16]
 802fa7e:	4313      	orrs	r3, r2
 802fa80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 802fa82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 802fa86:	69bb      	ldr	r3, [r7, #24]
 802fa88:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 802fa8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802fa8e:	685b      	ldr	r3, [r3, #4]
 802fa90:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 802fa92:	693b      	ldr	r3, [r7, #16]
 802fa94:	43db      	mvns	r3, r3
 802fa96:	69ba      	ldr	r2, [r7, #24]
 802fa98:	4013      	ands	r3, r2
 802fa9a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 802fa9c:	683b      	ldr	r3, [r7, #0]
 802fa9e:	685b      	ldr	r3, [r3, #4]
 802faa0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 802faa4:	2b00      	cmp	r3, #0
 802faa6:	d003      	beq.n	802fab0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 802faa8:	69ba      	ldr	r2, [r7, #24]
 802faaa:	693b      	ldr	r3, [r7, #16]
 802faac:	4313      	orrs	r3, r2
 802faae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 802fab0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 802fab4:	69bb      	ldr	r3, [r7, #24]
 802fab6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 802fab8:	697b      	ldr	r3, [r7, #20]
 802faba:	685b      	ldr	r3, [r3, #4]
 802fabc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 802fabe:	693b      	ldr	r3, [r7, #16]
 802fac0:	43db      	mvns	r3, r3
 802fac2:	69ba      	ldr	r2, [r7, #24]
 802fac4:	4013      	ands	r3, r2
 802fac6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 802fac8:	683b      	ldr	r3, [r7, #0]
 802faca:	685b      	ldr	r3, [r3, #4]
 802facc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802fad0:	2b00      	cmp	r3, #0
 802fad2:	d003      	beq.n	802fadc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 802fad4:	69ba      	ldr	r2, [r7, #24]
 802fad6:	693b      	ldr	r3, [r7, #16]
 802fad8:	4313      	orrs	r3, r2
 802fada:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 802fadc:	697b      	ldr	r3, [r7, #20]
 802fade:	69ba      	ldr	r2, [r7, #24]
 802fae0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 802fae2:	697b      	ldr	r3, [r7, #20]
 802fae4:	681b      	ldr	r3, [r3, #0]
 802fae6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 802fae8:	693b      	ldr	r3, [r7, #16]
 802faea:	43db      	mvns	r3, r3
 802faec:	69ba      	ldr	r2, [r7, #24]
 802faee:	4013      	ands	r3, r2
 802faf0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 802faf2:	683b      	ldr	r3, [r7, #0]
 802faf4:	685b      	ldr	r3, [r3, #4]
 802faf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 802fafa:	2b00      	cmp	r3, #0
 802fafc:	d003      	beq.n	802fb06 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 802fafe:	69ba      	ldr	r2, [r7, #24]
 802fb00:	693b      	ldr	r3, [r7, #16]
 802fb02:	4313      	orrs	r3, r2
 802fb04:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 802fb06:	697b      	ldr	r3, [r7, #20]
 802fb08:	69ba      	ldr	r2, [r7, #24]
 802fb0a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 802fb0c:	69fb      	ldr	r3, [r7, #28]
 802fb0e:	3301      	adds	r3, #1
 802fb10:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 802fb12:	683b      	ldr	r3, [r7, #0]
 802fb14:	681a      	ldr	r2, [r3, #0]
 802fb16:	69fb      	ldr	r3, [r7, #28]
 802fb18:	fa22 f303 	lsr.w	r3, r2, r3
 802fb1c:	2b00      	cmp	r3, #0
 802fb1e:	f47f ae63 	bne.w	802f7e8 <HAL_GPIO_Init+0x14>
  }
}
 802fb22:	bf00      	nop
 802fb24:	bf00      	nop
 802fb26:	3724      	adds	r7, #36	; 0x24
 802fb28:	46bd      	mov	sp, r7
 802fb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802fb2e:	4770      	bx	lr
 802fb30:	58000400 	.word	0x58000400

0802fb34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 802fb34:	b480      	push	{r7}
 802fb36:	b083      	sub	sp, #12
 802fb38:	af00      	add	r7, sp, #0
 802fb3a:	6078      	str	r0, [r7, #4]
 802fb3c:	460b      	mov	r3, r1
 802fb3e:	807b      	strh	r3, [r7, #2]
 802fb40:	4613      	mov	r3, r2
 802fb42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 802fb44:	787b      	ldrb	r3, [r7, #1]
 802fb46:	2b00      	cmp	r3, #0
 802fb48:	d003      	beq.n	802fb52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 802fb4a:	887a      	ldrh	r2, [r7, #2]
 802fb4c:	687b      	ldr	r3, [r7, #4]
 802fb4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 802fb50:	e003      	b.n	802fb5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 802fb52:	887b      	ldrh	r3, [r7, #2]
 802fb54:	041a      	lsls	r2, r3, #16
 802fb56:	687b      	ldr	r3, [r7, #4]
 802fb58:	619a      	str	r2, [r3, #24]
}
 802fb5a:	bf00      	nop
 802fb5c:	370c      	adds	r7, #12
 802fb5e:	46bd      	mov	sp, r7
 802fb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 802fb64:	4770      	bx	lr
	...

0802fb68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 802fb68:	b580      	push	{r7, lr}
 802fb6a:	b082      	sub	sp, #8
 802fb6c:	af00      	add	r7, sp, #0
 802fb6e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 802fb70:	687b      	ldr	r3, [r7, #4]
 802fb72:	2b00      	cmp	r3, #0
 802fb74:	d101      	bne.n	802fb7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 802fb76:	2301      	movs	r3, #1
 802fb78:	e07f      	b.n	802fc7a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 802fb7a:	687b      	ldr	r3, [r7, #4]
 802fb7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802fb80:	b2db      	uxtb	r3, r3
 802fb82:	2b00      	cmp	r3, #0
 802fb84:	d106      	bne.n	802fb94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 802fb86:	687b      	ldr	r3, [r7, #4]
 802fb88:	2200      	movs	r2, #0
 802fb8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 802fb8e:	6878      	ldr	r0, [r7, #4]
 802fb90:	f7fa ffa8 	bl	802aae4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 802fb94:	687b      	ldr	r3, [r7, #4]
 802fb96:	2224      	movs	r2, #36	; 0x24
 802fb98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 802fb9c:	687b      	ldr	r3, [r7, #4]
 802fb9e:	681b      	ldr	r3, [r3, #0]
 802fba0:	681a      	ldr	r2, [r3, #0]
 802fba2:	687b      	ldr	r3, [r7, #4]
 802fba4:	681b      	ldr	r3, [r3, #0]
 802fba6:	f022 0201 	bic.w	r2, r2, #1
 802fbaa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 802fbac:	687b      	ldr	r3, [r7, #4]
 802fbae:	685a      	ldr	r2, [r3, #4]
 802fbb0:	687b      	ldr	r3, [r7, #4]
 802fbb2:	681b      	ldr	r3, [r3, #0]
 802fbb4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 802fbb8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 802fbba:	687b      	ldr	r3, [r7, #4]
 802fbbc:	681b      	ldr	r3, [r3, #0]
 802fbbe:	689a      	ldr	r2, [r3, #8]
 802fbc0:	687b      	ldr	r3, [r7, #4]
 802fbc2:	681b      	ldr	r3, [r3, #0]
 802fbc4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 802fbc8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 802fbca:	687b      	ldr	r3, [r7, #4]
 802fbcc:	68db      	ldr	r3, [r3, #12]
 802fbce:	2b01      	cmp	r3, #1
 802fbd0:	d107      	bne.n	802fbe2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 802fbd2:	687b      	ldr	r3, [r7, #4]
 802fbd4:	689a      	ldr	r2, [r3, #8]
 802fbd6:	687b      	ldr	r3, [r7, #4]
 802fbd8:	681b      	ldr	r3, [r3, #0]
 802fbda:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 802fbde:	609a      	str	r2, [r3, #8]
 802fbe0:	e006      	b.n	802fbf0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 802fbe2:	687b      	ldr	r3, [r7, #4]
 802fbe4:	689a      	ldr	r2, [r3, #8]
 802fbe6:	687b      	ldr	r3, [r7, #4]
 802fbe8:	681b      	ldr	r3, [r3, #0]
 802fbea:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 802fbee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 802fbf0:	687b      	ldr	r3, [r7, #4]
 802fbf2:	68db      	ldr	r3, [r3, #12]
 802fbf4:	2b02      	cmp	r3, #2
 802fbf6:	d104      	bne.n	802fc02 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 802fbf8:	687b      	ldr	r3, [r7, #4]
 802fbfa:	681b      	ldr	r3, [r3, #0]
 802fbfc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 802fc00:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 802fc02:	687b      	ldr	r3, [r7, #4]
 802fc04:	681b      	ldr	r3, [r3, #0]
 802fc06:	6859      	ldr	r1, [r3, #4]
 802fc08:	687b      	ldr	r3, [r7, #4]
 802fc0a:	681a      	ldr	r2, [r3, #0]
 802fc0c:	4b1d      	ldr	r3, [pc, #116]	; (802fc84 <HAL_I2C_Init+0x11c>)
 802fc0e:	430b      	orrs	r3, r1
 802fc10:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 802fc12:	687b      	ldr	r3, [r7, #4]
 802fc14:	681b      	ldr	r3, [r3, #0]
 802fc16:	68da      	ldr	r2, [r3, #12]
 802fc18:	687b      	ldr	r3, [r7, #4]
 802fc1a:	681b      	ldr	r3, [r3, #0]
 802fc1c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 802fc20:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 802fc22:	687b      	ldr	r3, [r7, #4]
 802fc24:	691a      	ldr	r2, [r3, #16]
 802fc26:	687b      	ldr	r3, [r7, #4]
 802fc28:	695b      	ldr	r3, [r3, #20]
 802fc2a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 802fc2e:	687b      	ldr	r3, [r7, #4]
 802fc30:	699b      	ldr	r3, [r3, #24]
 802fc32:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 802fc34:	687b      	ldr	r3, [r7, #4]
 802fc36:	681b      	ldr	r3, [r3, #0]
 802fc38:	430a      	orrs	r2, r1
 802fc3a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 802fc3c:	687b      	ldr	r3, [r7, #4]
 802fc3e:	69d9      	ldr	r1, [r3, #28]
 802fc40:	687b      	ldr	r3, [r7, #4]
 802fc42:	6a1a      	ldr	r2, [r3, #32]
 802fc44:	687b      	ldr	r3, [r7, #4]
 802fc46:	681b      	ldr	r3, [r3, #0]
 802fc48:	430a      	orrs	r2, r1
 802fc4a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 802fc4c:	687b      	ldr	r3, [r7, #4]
 802fc4e:	681b      	ldr	r3, [r3, #0]
 802fc50:	681a      	ldr	r2, [r3, #0]
 802fc52:	687b      	ldr	r3, [r7, #4]
 802fc54:	681b      	ldr	r3, [r3, #0]
 802fc56:	f042 0201 	orr.w	r2, r2, #1
 802fc5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 802fc5c:	687b      	ldr	r3, [r7, #4]
 802fc5e:	2200      	movs	r2, #0
 802fc60:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 802fc62:	687b      	ldr	r3, [r7, #4]
 802fc64:	2220      	movs	r2, #32
 802fc66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 802fc6a:	687b      	ldr	r3, [r7, #4]
 802fc6c:	2200      	movs	r2, #0
 802fc6e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 802fc70:	687b      	ldr	r3, [r7, #4]
 802fc72:	2200      	movs	r2, #0
 802fc74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 802fc78:	2300      	movs	r3, #0
}
 802fc7a:	4618      	mov	r0, r3
 802fc7c:	3708      	adds	r7, #8
 802fc7e:	46bd      	mov	sp, r7
 802fc80:	bd80      	pop	{r7, pc}
 802fc82:	bf00      	nop
 802fc84:	02008000 	.word	0x02008000

0802fc88 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 802fc88:	b580      	push	{r7, lr}
 802fc8a:	b084      	sub	sp, #16
 802fc8c:	af00      	add	r7, sp, #0
 802fc8e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 802fc90:	687b      	ldr	r3, [r7, #4]
 802fc92:	681b      	ldr	r3, [r3, #0]
 802fc94:	699b      	ldr	r3, [r3, #24]
 802fc96:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 802fc98:	687b      	ldr	r3, [r7, #4]
 802fc9a:	681b      	ldr	r3, [r3, #0]
 802fc9c:	681b      	ldr	r3, [r3, #0]
 802fc9e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 802fca0:	687b      	ldr	r3, [r7, #4]
 802fca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802fca4:	2b00      	cmp	r3, #0
 802fca6:	d005      	beq.n	802fcb4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 802fca8:	687b      	ldr	r3, [r7, #4]
 802fcaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802fcac:	68ba      	ldr	r2, [r7, #8]
 802fcae:	68f9      	ldr	r1, [r7, #12]
 802fcb0:	6878      	ldr	r0, [r7, #4]
 802fcb2:	4798      	blx	r3
  }
}
 802fcb4:	bf00      	nop
 802fcb6:	3710      	adds	r7, #16
 802fcb8:	46bd      	mov	sp, r7
 802fcba:	bd80      	pop	{r7, pc}

0802fcbc <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 802fcbc:	b580      	push	{r7, lr}
 802fcbe:	b086      	sub	sp, #24
 802fcc0:	af00      	add	r7, sp, #0
 802fcc2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 802fcc4:	687b      	ldr	r3, [r7, #4]
 802fcc6:	681b      	ldr	r3, [r3, #0]
 802fcc8:	699b      	ldr	r3, [r3, #24]
 802fcca:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 802fccc:	687b      	ldr	r3, [r7, #4]
 802fcce:	681b      	ldr	r3, [r3, #0]
 802fcd0:	681b      	ldr	r3, [r3, #0]
 802fcd2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 802fcd4:	697b      	ldr	r3, [r7, #20]
 802fcd6:	0a1b      	lsrs	r3, r3, #8
 802fcd8:	f003 0301 	and.w	r3, r3, #1
 802fcdc:	2b00      	cmp	r3, #0
 802fcde:	d010      	beq.n	802fd02 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 802fce0:	693b      	ldr	r3, [r7, #16]
 802fce2:	09db      	lsrs	r3, r3, #7
 802fce4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 802fce8:	2b00      	cmp	r3, #0
 802fcea:	d00a      	beq.n	802fd02 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 802fcec:	687b      	ldr	r3, [r7, #4]
 802fcee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802fcf0:	f043 0201 	orr.w	r2, r3, #1
 802fcf4:	687b      	ldr	r3, [r7, #4]
 802fcf6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 802fcf8:	687b      	ldr	r3, [r7, #4]
 802fcfa:	681b      	ldr	r3, [r3, #0]
 802fcfc:	f44f 7280 	mov.w	r2, #256	; 0x100
 802fd00:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 802fd02:	697b      	ldr	r3, [r7, #20]
 802fd04:	0a9b      	lsrs	r3, r3, #10
 802fd06:	f003 0301 	and.w	r3, r3, #1
 802fd0a:	2b00      	cmp	r3, #0
 802fd0c:	d010      	beq.n	802fd30 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 802fd0e:	693b      	ldr	r3, [r7, #16]
 802fd10:	09db      	lsrs	r3, r3, #7
 802fd12:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 802fd16:	2b00      	cmp	r3, #0
 802fd18:	d00a      	beq.n	802fd30 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 802fd1a:	687b      	ldr	r3, [r7, #4]
 802fd1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802fd1e:	f043 0208 	orr.w	r2, r3, #8
 802fd22:	687b      	ldr	r3, [r7, #4]
 802fd24:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 802fd26:	687b      	ldr	r3, [r7, #4]
 802fd28:	681b      	ldr	r3, [r3, #0]
 802fd2a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 802fd2e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 802fd30:	697b      	ldr	r3, [r7, #20]
 802fd32:	0a5b      	lsrs	r3, r3, #9
 802fd34:	f003 0301 	and.w	r3, r3, #1
 802fd38:	2b00      	cmp	r3, #0
 802fd3a:	d010      	beq.n	802fd5e <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 802fd3c:	693b      	ldr	r3, [r7, #16]
 802fd3e:	09db      	lsrs	r3, r3, #7
 802fd40:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 802fd44:	2b00      	cmp	r3, #0
 802fd46:	d00a      	beq.n	802fd5e <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 802fd48:	687b      	ldr	r3, [r7, #4]
 802fd4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802fd4c:	f043 0202 	orr.w	r2, r3, #2
 802fd50:	687b      	ldr	r3, [r7, #4]
 802fd52:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 802fd54:	687b      	ldr	r3, [r7, #4]
 802fd56:	681b      	ldr	r3, [r3, #0]
 802fd58:	f44f 7200 	mov.w	r2, #512	; 0x200
 802fd5c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 802fd5e:	687b      	ldr	r3, [r7, #4]
 802fd60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802fd62:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 802fd64:	68fb      	ldr	r3, [r7, #12]
 802fd66:	f003 030b 	and.w	r3, r3, #11
 802fd6a:	2b00      	cmp	r3, #0
 802fd6c:	d003      	beq.n	802fd76 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 802fd6e:	68f9      	ldr	r1, [r7, #12]
 802fd70:	6878      	ldr	r0, [r7, #4]
 802fd72:	f000 fc77 	bl	8030664 <I2C_ITError>
  }
}
 802fd76:	bf00      	nop
 802fd78:	3718      	adds	r7, #24
 802fd7a:	46bd      	mov	sp, r7
 802fd7c:	bd80      	pop	{r7, pc}

0802fd7e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 802fd7e:	b480      	push	{r7}
 802fd80:	b083      	sub	sp, #12
 802fd82:	af00      	add	r7, sp, #0
 802fd84:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 802fd86:	bf00      	nop
 802fd88:	370c      	adds	r7, #12
 802fd8a:	46bd      	mov	sp, r7
 802fd8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802fd90:	4770      	bx	lr

0802fd92 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 802fd92:	b480      	push	{r7}
 802fd94:	b083      	sub	sp, #12
 802fd96:	af00      	add	r7, sp, #0
 802fd98:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 802fd9a:	bf00      	nop
 802fd9c:	370c      	adds	r7, #12
 802fd9e:	46bd      	mov	sp, r7
 802fda0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802fda4:	4770      	bx	lr

0802fda6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 802fda6:	b480      	push	{r7}
 802fda8:	b083      	sub	sp, #12
 802fdaa:	af00      	add	r7, sp, #0
 802fdac:	6078      	str	r0, [r7, #4]
 802fdae:	460b      	mov	r3, r1
 802fdb0:	70fb      	strb	r3, [r7, #3]
 802fdb2:	4613      	mov	r3, r2
 802fdb4:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 802fdb6:	bf00      	nop
 802fdb8:	370c      	adds	r7, #12
 802fdba:	46bd      	mov	sp, r7
 802fdbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 802fdc0:	4770      	bx	lr

0802fdc2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 802fdc2:	b480      	push	{r7}
 802fdc4:	b083      	sub	sp, #12
 802fdc6:	af00      	add	r7, sp, #0
 802fdc8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 802fdca:	bf00      	nop
 802fdcc:	370c      	adds	r7, #12
 802fdce:	46bd      	mov	sp, r7
 802fdd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802fdd4:	4770      	bx	lr

0802fdd6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 802fdd6:	b480      	push	{r7}
 802fdd8:	b083      	sub	sp, #12
 802fdda:	af00      	add	r7, sp, #0
 802fddc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 802fdde:	bf00      	nop
 802fde0:	370c      	adds	r7, #12
 802fde2:	46bd      	mov	sp, r7
 802fde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802fde8:	4770      	bx	lr

0802fdea <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 802fdea:	b480      	push	{r7}
 802fdec:	b083      	sub	sp, #12
 802fdee:	af00      	add	r7, sp, #0
 802fdf0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 802fdf2:	bf00      	nop
 802fdf4:	370c      	adds	r7, #12
 802fdf6:	46bd      	mov	sp, r7
 802fdf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802fdfc:	4770      	bx	lr

0802fdfe <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 802fdfe:	b580      	push	{r7, lr}
 802fe00:	b086      	sub	sp, #24
 802fe02:	af00      	add	r7, sp, #0
 802fe04:	60f8      	str	r0, [r7, #12]
 802fe06:	60b9      	str	r1, [r7, #8]
 802fe08:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 802fe0a:	68fb      	ldr	r3, [r7, #12]
 802fe0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802fe0e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 802fe10:	68bb      	ldr	r3, [r7, #8]
 802fe12:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 802fe14:	68fb      	ldr	r3, [r7, #12]
 802fe16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 802fe1a:	2b01      	cmp	r3, #1
 802fe1c:	d101      	bne.n	802fe22 <I2C_Slave_ISR_IT+0x24>
 802fe1e:	2302      	movs	r3, #2
 802fe20:	e0ec      	b.n	802fffc <I2C_Slave_ISR_IT+0x1fe>
 802fe22:	68fb      	ldr	r3, [r7, #12]
 802fe24:	2201      	movs	r2, #1
 802fe26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 802fe2a:	693b      	ldr	r3, [r7, #16]
 802fe2c:	095b      	lsrs	r3, r3, #5
 802fe2e:	f003 0301 	and.w	r3, r3, #1
 802fe32:	2b00      	cmp	r3, #0
 802fe34:	d009      	beq.n	802fe4a <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 802fe36:	687b      	ldr	r3, [r7, #4]
 802fe38:	095b      	lsrs	r3, r3, #5
 802fe3a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 802fe3e:	2b00      	cmp	r3, #0
 802fe40:	d003      	beq.n	802fe4a <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 802fe42:	6939      	ldr	r1, [r7, #16]
 802fe44:	68f8      	ldr	r0, [r7, #12]
 802fe46:	f000 f9bf 	bl	80301c8 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 802fe4a:	693b      	ldr	r3, [r7, #16]
 802fe4c:	091b      	lsrs	r3, r3, #4
 802fe4e:	f003 0301 	and.w	r3, r3, #1
 802fe52:	2b00      	cmp	r3, #0
 802fe54:	d04d      	beq.n	802fef2 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 802fe56:	687b      	ldr	r3, [r7, #4]
 802fe58:	091b      	lsrs	r3, r3, #4
 802fe5a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 802fe5e:	2b00      	cmp	r3, #0
 802fe60:	d047      	beq.n	802fef2 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 802fe62:	68fb      	ldr	r3, [r7, #12]
 802fe64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802fe66:	b29b      	uxth	r3, r3
 802fe68:	2b00      	cmp	r3, #0
 802fe6a:	d128      	bne.n	802febe <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 802fe6c:	68fb      	ldr	r3, [r7, #12]
 802fe6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802fe72:	b2db      	uxtb	r3, r3
 802fe74:	2b28      	cmp	r3, #40	; 0x28
 802fe76:	d108      	bne.n	802fe8a <I2C_Slave_ISR_IT+0x8c>
 802fe78:	697b      	ldr	r3, [r7, #20]
 802fe7a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 802fe7e:	d104      	bne.n	802fe8a <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 802fe80:	6939      	ldr	r1, [r7, #16]
 802fe82:	68f8      	ldr	r0, [r7, #12]
 802fe84:	f000 fb98 	bl	80305b8 <I2C_ITListenCplt>
 802fe88:	e032      	b.n	802fef0 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 802fe8a:	68fb      	ldr	r3, [r7, #12]
 802fe8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802fe90:	b2db      	uxtb	r3, r3
 802fe92:	2b29      	cmp	r3, #41	; 0x29
 802fe94:	d10e      	bne.n	802feb4 <I2C_Slave_ISR_IT+0xb6>
 802fe96:	697b      	ldr	r3, [r7, #20]
 802fe98:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 802fe9c:	d00a      	beq.n	802feb4 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 802fe9e:	68fb      	ldr	r3, [r7, #12]
 802fea0:	681b      	ldr	r3, [r3, #0]
 802fea2:	2210      	movs	r2, #16
 802fea4:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 802fea6:	68f8      	ldr	r0, [r7, #12]
 802fea8:	f000 fcd3 	bl	8030852 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 802feac:	68f8      	ldr	r0, [r7, #12]
 802feae:	f000 f92d 	bl	803010c <I2C_ITSlaveSeqCplt>
 802feb2:	e01d      	b.n	802fef0 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 802feb4:	68fb      	ldr	r3, [r7, #12]
 802feb6:	681b      	ldr	r3, [r3, #0]
 802feb8:	2210      	movs	r2, #16
 802feba:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 802febc:	e096      	b.n	802ffec <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 802febe:	68fb      	ldr	r3, [r7, #12]
 802fec0:	681b      	ldr	r3, [r3, #0]
 802fec2:	2210      	movs	r2, #16
 802fec4:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 802fec6:	68fb      	ldr	r3, [r7, #12]
 802fec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802feca:	f043 0204 	orr.w	r2, r3, #4
 802fece:	68fb      	ldr	r3, [r7, #12]
 802fed0:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 802fed2:	697b      	ldr	r3, [r7, #20]
 802fed4:	2b00      	cmp	r3, #0
 802fed6:	d004      	beq.n	802fee2 <I2C_Slave_ISR_IT+0xe4>
 802fed8:	697b      	ldr	r3, [r7, #20]
 802feda:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 802fede:	f040 8085 	bne.w	802ffec <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 802fee2:	68fb      	ldr	r3, [r7, #12]
 802fee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802fee6:	4619      	mov	r1, r3
 802fee8:	68f8      	ldr	r0, [r7, #12]
 802feea:	f000 fbbb 	bl	8030664 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 802feee:	e07d      	b.n	802ffec <I2C_Slave_ISR_IT+0x1ee>
 802fef0:	e07c      	b.n	802ffec <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 802fef2:	693b      	ldr	r3, [r7, #16]
 802fef4:	089b      	lsrs	r3, r3, #2
 802fef6:	f003 0301 	and.w	r3, r3, #1
 802fefa:	2b00      	cmp	r3, #0
 802fefc:	d030      	beq.n	802ff60 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 802fefe:	687b      	ldr	r3, [r7, #4]
 802ff00:	089b      	lsrs	r3, r3, #2
 802ff02:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 802ff06:	2b00      	cmp	r3, #0
 802ff08:	d02a      	beq.n	802ff60 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 802ff0a:	68fb      	ldr	r3, [r7, #12]
 802ff0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802ff0e:	b29b      	uxth	r3, r3
 802ff10:	2b00      	cmp	r3, #0
 802ff12:	d018      	beq.n	802ff46 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 802ff14:	68fb      	ldr	r3, [r7, #12]
 802ff16:	681b      	ldr	r3, [r3, #0]
 802ff18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 802ff1a:	68fb      	ldr	r3, [r7, #12]
 802ff1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802ff1e:	b2d2      	uxtb	r2, r2
 802ff20:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 802ff22:	68fb      	ldr	r3, [r7, #12]
 802ff24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802ff26:	1c5a      	adds	r2, r3, #1
 802ff28:	68fb      	ldr	r3, [r7, #12]
 802ff2a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 802ff2c:	68fb      	ldr	r3, [r7, #12]
 802ff2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802ff30:	3b01      	subs	r3, #1
 802ff32:	b29a      	uxth	r2, r3
 802ff34:	68fb      	ldr	r3, [r7, #12]
 802ff36:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 802ff38:	68fb      	ldr	r3, [r7, #12]
 802ff3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802ff3c:	b29b      	uxth	r3, r3
 802ff3e:	3b01      	subs	r3, #1
 802ff40:	b29a      	uxth	r2, r3
 802ff42:	68fb      	ldr	r3, [r7, #12]
 802ff44:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 802ff46:	68fb      	ldr	r3, [r7, #12]
 802ff48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802ff4a:	b29b      	uxth	r3, r3
 802ff4c:	2b00      	cmp	r3, #0
 802ff4e:	d14f      	bne.n	802fff0 <I2C_Slave_ISR_IT+0x1f2>
 802ff50:	697b      	ldr	r3, [r7, #20]
 802ff52:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 802ff56:	d04b      	beq.n	802fff0 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 802ff58:	68f8      	ldr	r0, [r7, #12]
 802ff5a:	f000 f8d7 	bl	803010c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 802ff5e:	e047      	b.n	802fff0 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 802ff60:	693b      	ldr	r3, [r7, #16]
 802ff62:	08db      	lsrs	r3, r3, #3
 802ff64:	f003 0301 	and.w	r3, r3, #1
 802ff68:	2b00      	cmp	r3, #0
 802ff6a:	d00a      	beq.n	802ff82 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 802ff6c:	687b      	ldr	r3, [r7, #4]
 802ff6e:	08db      	lsrs	r3, r3, #3
 802ff70:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 802ff74:	2b00      	cmp	r3, #0
 802ff76:	d004      	beq.n	802ff82 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 802ff78:	6939      	ldr	r1, [r7, #16]
 802ff7a:	68f8      	ldr	r0, [r7, #12]
 802ff7c:	f000 f842 	bl	8030004 <I2C_ITAddrCplt>
 802ff80:	e037      	b.n	802fff2 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 802ff82:	693b      	ldr	r3, [r7, #16]
 802ff84:	085b      	lsrs	r3, r3, #1
 802ff86:	f003 0301 	and.w	r3, r3, #1
 802ff8a:	2b00      	cmp	r3, #0
 802ff8c:	d031      	beq.n	802fff2 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 802ff8e:	687b      	ldr	r3, [r7, #4]
 802ff90:	085b      	lsrs	r3, r3, #1
 802ff92:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 802ff96:	2b00      	cmp	r3, #0
 802ff98:	d02b      	beq.n	802fff2 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 802ff9a:	68fb      	ldr	r3, [r7, #12]
 802ff9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802ff9e:	b29b      	uxth	r3, r3
 802ffa0:	2b00      	cmp	r3, #0
 802ffa2:	d018      	beq.n	802ffd6 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 802ffa4:	68fb      	ldr	r3, [r7, #12]
 802ffa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802ffa8:	781a      	ldrb	r2, [r3, #0]
 802ffaa:	68fb      	ldr	r3, [r7, #12]
 802ffac:	681b      	ldr	r3, [r3, #0]
 802ffae:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 802ffb0:	68fb      	ldr	r3, [r7, #12]
 802ffb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802ffb4:	1c5a      	adds	r2, r3, #1
 802ffb6:	68fb      	ldr	r3, [r7, #12]
 802ffb8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 802ffba:	68fb      	ldr	r3, [r7, #12]
 802ffbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802ffbe:	b29b      	uxth	r3, r3
 802ffc0:	3b01      	subs	r3, #1
 802ffc2:	b29a      	uxth	r2, r3
 802ffc4:	68fb      	ldr	r3, [r7, #12]
 802ffc6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 802ffc8:	68fb      	ldr	r3, [r7, #12]
 802ffca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802ffcc:	3b01      	subs	r3, #1
 802ffce:	b29a      	uxth	r2, r3
 802ffd0:	68fb      	ldr	r3, [r7, #12]
 802ffd2:	851a      	strh	r2, [r3, #40]	; 0x28
 802ffd4:	e00d      	b.n	802fff2 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 802ffd6:	697b      	ldr	r3, [r7, #20]
 802ffd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 802ffdc:	d002      	beq.n	802ffe4 <I2C_Slave_ISR_IT+0x1e6>
 802ffde:	697b      	ldr	r3, [r7, #20]
 802ffe0:	2b00      	cmp	r3, #0
 802ffe2:	d106      	bne.n	802fff2 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 802ffe4:	68f8      	ldr	r0, [r7, #12]
 802ffe6:	f000 f891 	bl	803010c <I2C_ITSlaveSeqCplt>
 802ffea:	e002      	b.n	802fff2 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 802ffec:	bf00      	nop
 802ffee:	e000      	b.n	802fff2 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 802fff0:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 802fff2:	68fb      	ldr	r3, [r7, #12]
 802fff4:	2200      	movs	r2, #0
 802fff6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 802fffa:	2300      	movs	r3, #0
}
 802fffc:	4618      	mov	r0, r3
 802fffe:	3718      	adds	r7, #24
 8030000:	46bd      	mov	sp, r7
 8030002:	bd80      	pop	{r7, pc}

08030004 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8030004:	b580      	push	{r7, lr}
 8030006:	b084      	sub	sp, #16
 8030008:	af00      	add	r7, sp, #0
 803000a:	6078      	str	r0, [r7, #4]
 803000c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 803000e:	687b      	ldr	r3, [r7, #4]
 8030010:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8030014:	b2db      	uxtb	r3, r3
 8030016:	f003 0328 	and.w	r3, r3, #40	; 0x28
 803001a:	2b28      	cmp	r3, #40	; 0x28
 803001c:	d16a      	bne.n	80300f4 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 803001e:	687b      	ldr	r3, [r7, #4]
 8030020:	681b      	ldr	r3, [r3, #0]
 8030022:	699b      	ldr	r3, [r3, #24]
 8030024:	0c1b      	lsrs	r3, r3, #16
 8030026:	b2db      	uxtb	r3, r3
 8030028:	f003 0301 	and.w	r3, r3, #1
 803002c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 803002e:	687b      	ldr	r3, [r7, #4]
 8030030:	681b      	ldr	r3, [r3, #0]
 8030032:	699b      	ldr	r3, [r3, #24]
 8030034:	0c1b      	lsrs	r3, r3, #16
 8030036:	b29b      	uxth	r3, r3
 8030038:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 803003c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 803003e:	687b      	ldr	r3, [r7, #4]
 8030040:	681b      	ldr	r3, [r3, #0]
 8030042:	689b      	ldr	r3, [r3, #8]
 8030044:	b29b      	uxth	r3, r3
 8030046:	f3c3 0309 	ubfx	r3, r3, #0, #10
 803004a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 803004c:	687b      	ldr	r3, [r7, #4]
 803004e:	681b      	ldr	r3, [r3, #0]
 8030050:	68db      	ldr	r3, [r3, #12]
 8030052:	b29b      	uxth	r3, r3
 8030054:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8030058:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 803005a:	687b      	ldr	r3, [r7, #4]
 803005c:	68db      	ldr	r3, [r3, #12]
 803005e:	2b02      	cmp	r3, #2
 8030060:	d138      	bne.n	80300d4 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8030062:	897b      	ldrh	r3, [r7, #10]
 8030064:	09db      	lsrs	r3, r3, #7
 8030066:	b29a      	uxth	r2, r3
 8030068:	89bb      	ldrh	r3, [r7, #12]
 803006a:	4053      	eors	r3, r2
 803006c:	b29b      	uxth	r3, r3
 803006e:	f003 0306 	and.w	r3, r3, #6
 8030072:	2b00      	cmp	r3, #0
 8030074:	d11c      	bne.n	80300b0 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8030076:	897b      	ldrh	r3, [r7, #10]
 8030078:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 803007a:	687b      	ldr	r3, [r7, #4]
 803007c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 803007e:	1c5a      	adds	r2, r3, #1
 8030080:	687b      	ldr	r3, [r7, #4]
 8030082:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8030084:	687b      	ldr	r3, [r7, #4]
 8030086:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8030088:	2b02      	cmp	r3, #2
 803008a:	d13b      	bne.n	8030104 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 803008c:	687b      	ldr	r3, [r7, #4]
 803008e:	2200      	movs	r2, #0
 8030090:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8030092:	687b      	ldr	r3, [r7, #4]
 8030094:	681b      	ldr	r3, [r3, #0]
 8030096:	2208      	movs	r2, #8
 8030098:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 803009a:	687b      	ldr	r3, [r7, #4]
 803009c:	2200      	movs	r2, #0
 803009e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80300a2:	89ba      	ldrh	r2, [r7, #12]
 80300a4:	7bfb      	ldrb	r3, [r7, #15]
 80300a6:	4619      	mov	r1, r3
 80300a8:	6878      	ldr	r0, [r7, #4]
 80300aa:	f7ff fe7c 	bl	802fda6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80300ae:	e029      	b.n	8030104 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80300b0:	893b      	ldrh	r3, [r7, #8]
 80300b2:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80300b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80300b8:	6878      	ldr	r0, [r7, #4]
 80300ba:	f000 fc0c 	bl	80308d6 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80300be:	687b      	ldr	r3, [r7, #4]
 80300c0:	2200      	movs	r2, #0
 80300c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80300c6:	89ba      	ldrh	r2, [r7, #12]
 80300c8:	7bfb      	ldrb	r3, [r7, #15]
 80300ca:	4619      	mov	r1, r3
 80300cc:	6878      	ldr	r0, [r7, #4]
 80300ce:	f7ff fe6a 	bl	802fda6 <HAL_I2C_AddrCallback>
}
 80300d2:	e017      	b.n	8030104 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80300d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80300d8:	6878      	ldr	r0, [r7, #4]
 80300da:	f000 fbfc 	bl	80308d6 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80300de:	687b      	ldr	r3, [r7, #4]
 80300e0:	2200      	movs	r2, #0
 80300e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80300e6:	89ba      	ldrh	r2, [r7, #12]
 80300e8:	7bfb      	ldrb	r3, [r7, #15]
 80300ea:	4619      	mov	r1, r3
 80300ec:	6878      	ldr	r0, [r7, #4]
 80300ee:	f7ff fe5a 	bl	802fda6 <HAL_I2C_AddrCallback>
}
 80300f2:	e007      	b.n	8030104 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80300f4:	687b      	ldr	r3, [r7, #4]
 80300f6:	681b      	ldr	r3, [r3, #0]
 80300f8:	2208      	movs	r2, #8
 80300fa:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80300fc:	687b      	ldr	r3, [r7, #4]
 80300fe:	2200      	movs	r2, #0
 8030100:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8030104:	bf00      	nop
 8030106:	3710      	adds	r7, #16
 8030108:	46bd      	mov	sp, r7
 803010a:	bd80      	pop	{r7, pc}

0803010c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 803010c:	b580      	push	{r7, lr}
 803010e:	b084      	sub	sp, #16
 8030110:	af00      	add	r7, sp, #0
 8030112:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8030114:	687b      	ldr	r3, [r7, #4]
 8030116:	681b      	ldr	r3, [r3, #0]
 8030118:	681b      	ldr	r3, [r3, #0]
 803011a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 803011c:	687b      	ldr	r3, [r7, #4]
 803011e:	2200      	movs	r2, #0
 8030120:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8030124:	68fb      	ldr	r3, [r7, #12]
 8030126:	0b9b      	lsrs	r3, r3, #14
 8030128:	f003 0301 	and.w	r3, r3, #1
 803012c:	2b00      	cmp	r3, #0
 803012e:	d008      	beq.n	8030142 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8030130:	687b      	ldr	r3, [r7, #4]
 8030132:	681b      	ldr	r3, [r3, #0]
 8030134:	681a      	ldr	r2, [r3, #0]
 8030136:	687b      	ldr	r3, [r7, #4]
 8030138:	681b      	ldr	r3, [r3, #0]
 803013a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 803013e:	601a      	str	r2, [r3, #0]
 8030140:	e00d      	b.n	803015e <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8030142:	68fb      	ldr	r3, [r7, #12]
 8030144:	0bdb      	lsrs	r3, r3, #15
 8030146:	f003 0301 	and.w	r3, r3, #1
 803014a:	2b00      	cmp	r3, #0
 803014c:	d007      	beq.n	803015e <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 803014e:	687b      	ldr	r3, [r7, #4]
 8030150:	681b      	ldr	r3, [r3, #0]
 8030152:	681a      	ldr	r2, [r3, #0]
 8030154:	687b      	ldr	r3, [r7, #4]
 8030156:	681b      	ldr	r3, [r3, #0]
 8030158:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 803015c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 803015e:	687b      	ldr	r3, [r7, #4]
 8030160:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8030164:	b2db      	uxtb	r3, r3
 8030166:	2b29      	cmp	r3, #41	; 0x29
 8030168:	d112      	bne.n	8030190 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 803016a:	687b      	ldr	r3, [r7, #4]
 803016c:	2228      	movs	r2, #40	; 0x28
 803016e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8030172:	687b      	ldr	r3, [r7, #4]
 8030174:	2221      	movs	r2, #33	; 0x21
 8030176:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8030178:	2101      	movs	r1, #1
 803017a:	6878      	ldr	r0, [r7, #4]
 803017c:	f000 fbab 	bl	80308d6 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8030180:	687b      	ldr	r3, [r7, #4]
 8030182:	2200      	movs	r2, #0
 8030184:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8030188:	6878      	ldr	r0, [r7, #4]
 803018a:	f7ff fdf8 	bl	802fd7e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 803018e:	e017      	b.n	80301c0 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8030190:	687b      	ldr	r3, [r7, #4]
 8030192:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8030196:	b2db      	uxtb	r3, r3
 8030198:	2b2a      	cmp	r3, #42	; 0x2a
 803019a:	d111      	bne.n	80301c0 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 803019c:	687b      	ldr	r3, [r7, #4]
 803019e:	2228      	movs	r2, #40	; 0x28
 80301a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80301a4:	687b      	ldr	r3, [r7, #4]
 80301a6:	2222      	movs	r2, #34	; 0x22
 80301a8:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80301aa:	2102      	movs	r1, #2
 80301ac:	6878      	ldr	r0, [r7, #4]
 80301ae:	f000 fb92 	bl	80308d6 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80301b2:	687b      	ldr	r3, [r7, #4]
 80301b4:	2200      	movs	r2, #0
 80301b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80301ba:	6878      	ldr	r0, [r7, #4]
 80301bc:	f7ff fde9 	bl	802fd92 <HAL_I2C_SlaveRxCpltCallback>
}
 80301c0:	bf00      	nop
 80301c2:	3710      	adds	r7, #16
 80301c4:	46bd      	mov	sp, r7
 80301c6:	bd80      	pop	{r7, pc}

080301c8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80301c8:	b580      	push	{r7, lr}
 80301ca:	b086      	sub	sp, #24
 80301cc:	af00      	add	r7, sp, #0
 80301ce:	6078      	str	r0, [r7, #4]
 80301d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80301d2:	687b      	ldr	r3, [r7, #4]
 80301d4:	681b      	ldr	r3, [r3, #0]
 80301d6:	681b      	ldr	r3, [r3, #0]
 80301d8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80301da:	683b      	ldr	r3, [r7, #0]
 80301dc:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80301de:	687b      	ldr	r3, [r7, #4]
 80301e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80301e4:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80301e6:	687b      	ldr	r3, [r7, #4]
 80301e8:	681b      	ldr	r3, [r3, #0]
 80301ea:	2220      	movs	r2, #32
 80301ec:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80301ee:	7bfb      	ldrb	r3, [r7, #15]
 80301f0:	2b21      	cmp	r3, #33	; 0x21
 80301f2:	d002      	beq.n	80301fa <I2C_ITSlaveCplt+0x32>
 80301f4:	7bfb      	ldrb	r3, [r7, #15]
 80301f6:	2b29      	cmp	r3, #41	; 0x29
 80301f8:	d108      	bne.n	803020c <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80301fa:	f248 0101 	movw	r1, #32769	; 0x8001
 80301fe:	6878      	ldr	r0, [r7, #4]
 8030200:	f000 fb69 	bl	80308d6 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8030204:	687b      	ldr	r3, [r7, #4]
 8030206:	2221      	movs	r2, #33	; 0x21
 8030208:	631a      	str	r2, [r3, #48]	; 0x30
 803020a:	e00d      	b.n	8030228 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 803020c:	7bfb      	ldrb	r3, [r7, #15]
 803020e:	2b22      	cmp	r3, #34	; 0x22
 8030210:	d002      	beq.n	8030218 <I2C_ITSlaveCplt+0x50>
 8030212:	7bfb      	ldrb	r3, [r7, #15]
 8030214:	2b2a      	cmp	r3, #42	; 0x2a
 8030216:	d107      	bne.n	8030228 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8030218:	f248 0102 	movw	r1, #32770	; 0x8002
 803021c:	6878      	ldr	r0, [r7, #4]
 803021e:	f000 fb5a 	bl	80308d6 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8030222:	687b      	ldr	r3, [r7, #4]
 8030224:	2222      	movs	r2, #34	; 0x22
 8030226:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8030228:	687b      	ldr	r3, [r7, #4]
 803022a:	681b      	ldr	r3, [r3, #0]
 803022c:	685a      	ldr	r2, [r3, #4]
 803022e:	687b      	ldr	r3, [r7, #4]
 8030230:	681b      	ldr	r3, [r3, #0]
 8030232:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8030236:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8030238:	687b      	ldr	r3, [r7, #4]
 803023a:	681b      	ldr	r3, [r3, #0]
 803023c:	6859      	ldr	r1, [r3, #4]
 803023e:	687b      	ldr	r3, [r7, #4]
 8030240:	681a      	ldr	r2, [r3, #0]
 8030242:	4b80      	ldr	r3, [pc, #512]	; (8030444 <I2C_ITSlaveCplt+0x27c>)
 8030244:	400b      	ands	r3, r1
 8030246:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8030248:	6878      	ldr	r0, [r7, #4]
 803024a:	f000 fb02 	bl	8030852 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 803024e:	693b      	ldr	r3, [r7, #16]
 8030250:	0b9b      	lsrs	r3, r3, #14
 8030252:	f003 0301 	and.w	r3, r3, #1
 8030256:	2b00      	cmp	r3, #0
 8030258:	d07a      	beq.n	8030350 <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 803025a:	687b      	ldr	r3, [r7, #4]
 803025c:	681b      	ldr	r3, [r3, #0]
 803025e:	681a      	ldr	r2, [r3, #0]
 8030260:	687b      	ldr	r3, [r7, #4]
 8030262:	681b      	ldr	r3, [r3, #0]
 8030264:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8030268:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 803026a:	687b      	ldr	r3, [r7, #4]
 803026c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 803026e:	2b00      	cmp	r3, #0
 8030270:	f000 8111 	beq.w	8030496 <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8030274:	687b      	ldr	r3, [r7, #4]
 8030276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8030278:	681b      	ldr	r3, [r3, #0]
 803027a:	4a73      	ldr	r2, [pc, #460]	; (8030448 <I2C_ITSlaveCplt+0x280>)
 803027c:	4293      	cmp	r3, r2
 803027e:	d059      	beq.n	8030334 <I2C_ITSlaveCplt+0x16c>
 8030280:	687b      	ldr	r3, [r7, #4]
 8030282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8030284:	681b      	ldr	r3, [r3, #0]
 8030286:	4a71      	ldr	r2, [pc, #452]	; (803044c <I2C_ITSlaveCplt+0x284>)
 8030288:	4293      	cmp	r3, r2
 803028a:	d053      	beq.n	8030334 <I2C_ITSlaveCplt+0x16c>
 803028c:	687b      	ldr	r3, [r7, #4]
 803028e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8030290:	681b      	ldr	r3, [r3, #0]
 8030292:	4a6f      	ldr	r2, [pc, #444]	; (8030450 <I2C_ITSlaveCplt+0x288>)
 8030294:	4293      	cmp	r3, r2
 8030296:	d04d      	beq.n	8030334 <I2C_ITSlaveCplt+0x16c>
 8030298:	687b      	ldr	r3, [r7, #4]
 803029a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 803029c:	681b      	ldr	r3, [r3, #0]
 803029e:	4a6d      	ldr	r2, [pc, #436]	; (8030454 <I2C_ITSlaveCplt+0x28c>)
 80302a0:	4293      	cmp	r3, r2
 80302a2:	d047      	beq.n	8030334 <I2C_ITSlaveCplt+0x16c>
 80302a4:	687b      	ldr	r3, [r7, #4]
 80302a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80302a8:	681b      	ldr	r3, [r3, #0]
 80302aa:	4a6b      	ldr	r2, [pc, #428]	; (8030458 <I2C_ITSlaveCplt+0x290>)
 80302ac:	4293      	cmp	r3, r2
 80302ae:	d041      	beq.n	8030334 <I2C_ITSlaveCplt+0x16c>
 80302b0:	687b      	ldr	r3, [r7, #4]
 80302b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80302b4:	681b      	ldr	r3, [r3, #0]
 80302b6:	4a69      	ldr	r2, [pc, #420]	; (803045c <I2C_ITSlaveCplt+0x294>)
 80302b8:	4293      	cmp	r3, r2
 80302ba:	d03b      	beq.n	8030334 <I2C_ITSlaveCplt+0x16c>
 80302bc:	687b      	ldr	r3, [r7, #4]
 80302be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80302c0:	681b      	ldr	r3, [r3, #0]
 80302c2:	4a67      	ldr	r2, [pc, #412]	; (8030460 <I2C_ITSlaveCplt+0x298>)
 80302c4:	4293      	cmp	r3, r2
 80302c6:	d035      	beq.n	8030334 <I2C_ITSlaveCplt+0x16c>
 80302c8:	687b      	ldr	r3, [r7, #4]
 80302ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80302cc:	681b      	ldr	r3, [r3, #0]
 80302ce:	4a65      	ldr	r2, [pc, #404]	; (8030464 <I2C_ITSlaveCplt+0x29c>)
 80302d0:	4293      	cmp	r3, r2
 80302d2:	d02f      	beq.n	8030334 <I2C_ITSlaveCplt+0x16c>
 80302d4:	687b      	ldr	r3, [r7, #4]
 80302d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80302d8:	681b      	ldr	r3, [r3, #0]
 80302da:	4a63      	ldr	r2, [pc, #396]	; (8030468 <I2C_ITSlaveCplt+0x2a0>)
 80302dc:	4293      	cmp	r3, r2
 80302de:	d029      	beq.n	8030334 <I2C_ITSlaveCplt+0x16c>
 80302e0:	687b      	ldr	r3, [r7, #4]
 80302e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80302e4:	681b      	ldr	r3, [r3, #0]
 80302e6:	4a61      	ldr	r2, [pc, #388]	; (803046c <I2C_ITSlaveCplt+0x2a4>)
 80302e8:	4293      	cmp	r3, r2
 80302ea:	d023      	beq.n	8030334 <I2C_ITSlaveCplt+0x16c>
 80302ec:	687b      	ldr	r3, [r7, #4]
 80302ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80302f0:	681b      	ldr	r3, [r3, #0]
 80302f2:	4a5f      	ldr	r2, [pc, #380]	; (8030470 <I2C_ITSlaveCplt+0x2a8>)
 80302f4:	4293      	cmp	r3, r2
 80302f6:	d01d      	beq.n	8030334 <I2C_ITSlaveCplt+0x16c>
 80302f8:	687b      	ldr	r3, [r7, #4]
 80302fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80302fc:	681b      	ldr	r3, [r3, #0]
 80302fe:	4a5d      	ldr	r2, [pc, #372]	; (8030474 <I2C_ITSlaveCplt+0x2ac>)
 8030300:	4293      	cmp	r3, r2
 8030302:	d017      	beq.n	8030334 <I2C_ITSlaveCplt+0x16c>
 8030304:	687b      	ldr	r3, [r7, #4]
 8030306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8030308:	681b      	ldr	r3, [r3, #0]
 803030a:	4a5b      	ldr	r2, [pc, #364]	; (8030478 <I2C_ITSlaveCplt+0x2b0>)
 803030c:	4293      	cmp	r3, r2
 803030e:	d011      	beq.n	8030334 <I2C_ITSlaveCplt+0x16c>
 8030310:	687b      	ldr	r3, [r7, #4]
 8030312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8030314:	681b      	ldr	r3, [r3, #0]
 8030316:	4a59      	ldr	r2, [pc, #356]	; (803047c <I2C_ITSlaveCplt+0x2b4>)
 8030318:	4293      	cmp	r3, r2
 803031a:	d00b      	beq.n	8030334 <I2C_ITSlaveCplt+0x16c>
 803031c:	687b      	ldr	r3, [r7, #4]
 803031e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8030320:	681b      	ldr	r3, [r3, #0]
 8030322:	4a57      	ldr	r2, [pc, #348]	; (8030480 <I2C_ITSlaveCplt+0x2b8>)
 8030324:	4293      	cmp	r3, r2
 8030326:	d005      	beq.n	8030334 <I2C_ITSlaveCplt+0x16c>
 8030328:	687b      	ldr	r3, [r7, #4]
 803032a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 803032c:	681b      	ldr	r3, [r3, #0]
 803032e:	4a55      	ldr	r2, [pc, #340]	; (8030484 <I2C_ITSlaveCplt+0x2bc>)
 8030330:	4293      	cmp	r3, r2
 8030332:	d105      	bne.n	8030340 <I2C_ITSlaveCplt+0x178>
 8030334:	687b      	ldr	r3, [r7, #4]
 8030336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8030338:	681b      	ldr	r3, [r3, #0]
 803033a:	685b      	ldr	r3, [r3, #4]
 803033c:	b29b      	uxth	r3, r3
 803033e:	e004      	b.n	803034a <I2C_ITSlaveCplt+0x182>
 8030340:	687b      	ldr	r3, [r7, #4]
 8030342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8030344:	681b      	ldr	r3, [r3, #0]
 8030346:	685b      	ldr	r3, [r3, #4]
 8030348:	b29b      	uxth	r3, r3
 803034a:	687a      	ldr	r2, [r7, #4]
 803034c:	8553      	strh	r3, [r2, #42]	; 0x2a
 803034e:	e0a2      	b.n	8030496 <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8030350:	693b      	ldr	r3, [r7, #16]
 8030352:	0bdb      	lsrs	r3, r3, #15
 8030354:	f003 0301 	and.w	r3, r3, #1
 8030358:	2b00      	cmp	r3, #0
 803035a:	f000 809c 	beq.w	8030496 <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 803035e:	687b      	ldr	r3, [r7, #4]
 8030360:	681b      	ldr	r3, [r3, #0]
 8030362:	681a      	ldr	r2, [r3, #0]
 8030364:	687b      	ldr	r3, [r7, #4]
 8030366:	681b      	ldr	r3, [r3, #0]
 8030368:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 803036c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 803036e:	687b      	ldr	r3, [r7, #4]
 8030370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8030372:	2b00      	cmp	r3, #0
 8030374:	f000 808f 	beq.w	8030496 <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8030378:	687b      	ldr	r3, [r7, #4]
 803037a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 803037c:	681b      	ldr	r3, [r3, #0]
 803037e:	4a32      	ldr	r2, [pc, #200]	; (8030448 <I2C_ITSlaveCplt+0x280>)
 8030380:	4293      	cmp	r3, r2
 8030382:	d059      	beq.n	8030438 <I2C_ITSlaveCplt+0x270>
 8030384:	687b      	ldr	r3, [r7, #4]
 8030386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8030388:	681b      	ldr	r3, [r3, #0]
 803038a:	4a30      	ldr	r2, [pc, #192]	; (803044c <I2C_ITSlaveCplt+0x284>)
 803038c:	4293      	cmp	r3, r2
 803038e:	d053      	beq.n	8030438 <I2C_ITSlaveCplt+0x270>
 8030390:	687b      	ldr	r3, [r7, #4]
 8030392:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8030394:	681b      	ldr	r3, [r3, #0]
 8030396:	4a2e      	ldr	r2, [pc, #184]	; (8030450 <I2C_ITSlaveCplt+0x288>)
 8030398:	4293      	cmp	r3, r2
 803039a:	d04d      	beq.n	8030438 <I2C_ITSlaveCplt+0x270>
 803039c:	687b      	ldr	r3, [r7, #4]
 803039e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80303a0:	681b      	ldr	r3, [r3, #0]
 80303a2:	4a2c      	ldr	r2, [pc, #176]	; (8030454 <I2C_ITSlaveCplt+0x28c>)
 80303a4:	4293      	cmp	r3, r2
 80303a6:	d047      	beq.n	8030438 <I2C_ITSlaveCplt+0x270>
 80303a8:	687b      	ldr	r3, [r7, #4]
 80303aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80303ac:	681b      	ldr	r3, [r3, #0]
 80303ae:	4a2a      	ldr	r2, [pc, #168]	; (8030458 <I2C_ITSlaveCplt+0x290>)
 80303b0:	4293      	cmp	r3, r2
 80303b2:	d041      	beq.n	8030438 <I2C_ITSlaveCplt+0x270>
 80303b4:	687b      	ldr	r3, [r7, #4]
 80303b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80303b8:	681b      	ldr	r3, [r3, #0]
 80303ba:	4a28      	ldr	r2, [pc, #160]	; (803045c <I2C_ITSlaveCplt+0x294>)
 80303bc:	4293      	cmp	r3, r2
 80303be:	d03b      	beq.n	8030438 <I2C_ITSlaveCplt+0x270>
 80303c0:	687b      	ldr	r3, [r7, #4]
 80303c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80303c4:	681b      	ldr	r3, [r3, #0]
 80303c6:	4a26      	ldr	r2, [pc, #152]	; (8030460 <I2C_ITSlaveCplt+0x298>)
 80303c8:	4293      	cmp	r3, r2
 80303ca:	d035      	beq.n	8030438 <I2C_ITSlaveCplt+0x270>
 80303cc:	687b      	ldr	r3, [r7, #4]
 80303ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80303d0:	681b      	ldr	r3, [r3, #0]
 80303d2:	4a24      	ldr	r2, [pc, #144]	; (8030464 <I2C_ITSlaveCplt+0x29c>)
 80303d4:	4293      	cmp	r3, r2
 80303d6:	d02f      	beq.n	8030438 <I2C_ITSlaveCplt+0x270>
 80303d8:	687b      	ldr	r3, [r7, #4]
 80303da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80303dc:	681b      	ldr	r3, [r3, #0]
 80303de:	4a22      	ldr	r2, [pc, #136]	; (8030468 <I2C_ITSlaveCplt+0x2a0>)
 80303e0:	4293      	cmp	r3, r2
 80303e2:	d029      	beq.n	8030438 <I2C_ITSlaveCplt+0x270>
 80303e4:	687b      	ldr	r3, [r7, #4]
 80303e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80303e8:	681b      	ldr	r3, [r3, #0]
 80303ea:	4a20      	ldr	r2, [pc, #128]	; (803046c <I2C_ITSlaveCplt+0x2a4>)
 80303ec:	4293      	cmp	r3, r2
 80303ee:	d023      	beq.n	8030438 <I2C_ITSlaveCplt+0x270>
 80303f0:	687b      	ldr	r3, [r7, #4]
 80303f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80303f4:	681b      	ldr	r3, [r3, #0]
 80303f6:	4a1e      	ldr	r2, [pc, #120]	; (8030470 <I2C_ITSlaveCplt+0x2a8>)
 80303f8:	4293      	cmp	r3, r2
 80303fa:	d01d      	beq.n	8030438 <I2C_ITSlaveCplt+0x270>
 80303fc:	687b      	ldr	r3, [r7, #4]
 80303fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8030400:	681b      	ldr	r3, [r3, #0]
 8030402:	4a1c      	ldr	r2, [pc, #112]	; (8030474 <I2C_ITSlaveCplt+0x2ac>)
 8030404:	4293      	cmp	r3, r2
 8030406:	d017      	beq.n	8030438 <I2C_ITSlaveCplt+0x270>
 8030408:	687b      	ldr	r3, [r7, #4]
 803040a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 803040c:	681b      	ldr	r3, [r3, #0]
 803040e:	4a1a      	ldr	r2, [pc, #104]	; (8030478 <I2C_ITSlaveCplt+0x2b0>)
 8030410:	4293      	cmp	r3, r2
 8030412:	d011      	beq.n	8030438 <I2C_ITSlaveCplt+0x270>
 8030414:	687b      	ldr	r3, [r7, #4]
 8030416:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8030418:	681b      	ldr	r3, [r3, #0]
 803041a:	4a18      	ldr	r2, [pc, #96]	; (803047c <I2C_ITSlaveCplt+0x2b4>)
 803041c:	4293      	cmp	r3, r2
 803041e:	d00b      	beq.n	8030438 <I2C_ITSlaveCplt+0x270>
 8030420:	687b      	ldr	r3, [r7, #4]
 8030422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8030424:	681b      	ldr	r3, [r3, #0]
 8030426:	4a16      	ldr	r2, [pc, #88]	; (8030480 <I2C_ITSlaveCplt+0x2b8>)
 8030428:	4293      	cmp	r3, r2
 803042a:	d005      	beq.n	8030438 <I2C_ITSlaveCplt+0x270>
 803042c:	687b      	ldr	r3, [r7, #4]
 803042e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8030430:	681b      	ldr	r3, [r3, #0]
 8030432:	4a14      	ldr	r2, [pc, #80]	; (8030484 <I2C_ITSlaveCplt+0x2bc>)
 8030434:	4293      	cmp	r3, r2
 8030436:	d127      	bne.n	8030488 <I2C_ITSlaveCplt+0x2c0>
 8030438:	687b      	ldr	r3, [r7, #4]
 803043a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 803043c:	681b      	ldr	r3, [r3, #0]
 803043e:	685b      	ldr	r3, [r3, #4]
 8030440:	b29b      	uxth	r3, r3
 8030442:	e026      	b.n	8030492 <I2C_ITSlaveCplt+0x2ca>
 8030444:	fe00e800 	.word	0xfe00e800
 8030448:	40020010 	.word	0x40020010
 803044c:	40020028 	.word	0x40020028
 8030450:	40020040 	.word	0x40020040
 8030454:	40020058 	.word	0x40020058
 8030458:	40020070 	.word	0x40020070
 803045c:	40020088 	.word	0x40020088
 8030460:	400200a0 	.word	0x400200a0
 8030464:	400200b8 	.word	0x400200b8
 8030468:	40020410 	.word	0x40020410
 803046c:	40020428 	.word	0x40020428
 8030470:	40020440 	.word	0x40020440
 8030474:	40020458 	.word	0x40020458
 8030478:	40020470 	.word	0x40020470
 803047c:	40020488 	.word	0x40020488
 8030480:	400204a0 	.word	0x400204a0
 8030484:	400204b8 	.word	0x400204b8
 8030488:	687b      	ldr	r3, [r7, #4]
 803048a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 803048c:	681b      	ldr	r3, [r3, #0]
 803048e:	685b      	ldr	r3, [r3, #4]
 8030490:	b29b      	uxth	r3, r3
 8030492:	687a      	ldr	r2, [r7, #4]
 8030494:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8030496:	697b      	ldr	r3, [r7, #20]
 8030498:	089b      	lsrs	r3, r3, #2
 803049a:	f003 0301 	and.w	r3, r3, #1
 803049e:	2b00      	cmp	r3, #0
 80304a0:	d020      	beq.n	80304e4 <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80304a2:	697b      	ldr	r3, [r7, #20]
 80304a4:	f023 0304 	bic.w	r3, r3, #4
 80304a8:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80304aa:	687b      	ldr	r3, [r7, #4]
 80304ac:	681b      	ldr	r3, [r3, #0]
 80304ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80304b0:	687b      	ldr	r3, [r7, #4]
 80304b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80304b4:	b2d2      	uxtb	r2, r2
 80304b6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80304b8:	687b      	ldr	r3, [r7, #4]
 80304ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80304bc:	1c5a      	adds	r2, r3, #1
 80304be:	687b      	ldr	r3, [r7, #4]
 80304c0:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80304c2:	687b      	ldr	r3, [r7, #4]
 80304c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80304c6:	2b00      	cmp	r3, #0
 80304c8:	d00c      	beq.n	80304e4 <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 80304ca:	687b      	ldr	r3, [r7, #4]
 80304cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80304ce:	3b01      	subs	r3, #1
 80304d0:	b29a      	uxth	r2, r3
 80304d2:	687b      	ldr	r3, [r7, #4]
 80304d4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80304d6:	687b      	ldr	r3, [r7, #4]
 80304d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80304da:	b29b      	uxth	r3, r3
 80304dc:	3b01      	subs	r3, #1
 80304de:	b29a      	uxth	r2, r3
 80304e0:	687b      	ldr	r3, [r7, #4]
 80304e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80304e4:	687b      	ldr	r3, [r7, #4]
 80304e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80304e8:	b29b      	uxth	r3, r3
 80304ea:	2b00      	cmp	r3, #0
 80304ec:	d005      	beq.n	80304fa <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80304ee:	687b      	ldr	r3, [r7, #4]
 80304f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80304f2:	f043 0204 	orr.w	r2, r3, #4
 80304f6:	687b      	ldr	r3, [r7, #4]
 80304f8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80304fa:	687b      	ldr	r3, [r7, #4]
 80304fc:	2200      	movs	r2, #0
 80304fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8030502:	687b      	ldr	r3, [r7, #4]
 8030504:	2200      	movs	r2, #0
 8030506:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8030508:	687b      	ldr	r3, [r7, #4]
 803050a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 803050c:	2b00      	cmp	r3, #0
 803050e:	d010      	beq.n	8030532 <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8030510:	687b      	ldr	r3, [r7, #4]
 8030512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8030514:	4619      	mov	r1, r3
 8030516:	6878      	ldr	r0, [r7, #4]
 8030518:	f000 f8a4 	bl	8030664 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 803051c:	687b      	ldr	r3, [r7, #4]
 803051e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8030522:	b2db      	uxtb	r3, r3
 8030524:	2b28      	cmp	r3, #40	; 0x28
 8030526:	d141      	bne.n	80305ac <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8030528:	6979      	ldr	r1, [r7, #20]
 803052a:	6878      	ldr	r0, [r7, #4]
 803052c:	f000 f844 	bl	80305b8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8030530:	e03c      	b.n	80305ac <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8030532:	687b      	ldr	r3, [r7, #4]
 8030534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8030536:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 803053a:	d014      	beq.n	8030566 <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 803053c:	6878      	ldr	r0, [r7, #4]
 803053e:	f7ff fde5 	bl	803010c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8030542:	687b      	ldr	r3, [r7, #4]
 8030544:	4a1b      	ldr	r2, [pc, #108]	; (80305b4 <I2C_ITSlaveCplt+0x3ec>)
 8030546:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8030548:	687b      	ldr	r3, [r7, #4]
 803054a:	2220      	movs	r2, #32
 803054c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8030550:	687b      	ldr	r3, [r7, #4]
 8030552:	2200      	movs	r2, #0
 8030554:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8030556:	687b      	ldr	r3, [r7, #4]
 8030558:	2200      	movs	r2, #0
 803055a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 803055e:	6878      	ldr	r0, [r7, #4]
 8030560:	f7ff fc2f 	bl	802fdc2 <HAL_I2C_ListenCpltCallback>
}
 8030564:	e022      	b.n	80305ac <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8030566:	687b      	ldr	r3, [r7, #4]
 8030568:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 803056c:	b2db      	uxtb	r3, r3
 803056e:	2b22      	cmp	r3, #34	; 0x22
 8030570:	d10e      	bne.n	8030590 <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 8030572:	687b      	ldr	r3, [r7, #4]
 8030574:	2220      	movs	r2, #32
 8030576:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 803057a:	687b      	ldr	r3, [r7, #4]
 803057c:	2200      	movs	r2, #0
 803057e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8030580:	687b      	ldr	r3, [r7, #4]
 8030582:	2200      	movs	r2, #0
 8030584:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8030588:	6878      	ldr	r0, [r7, #4]
 803058a:	f7ff fc02 	bl	802fd92 <HAL_I2C_SlaveRxCpltCallback>
}
 803058e:	e00d      	b.n	80305ac <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 8030590:	687b      	ldr	r3, [r7, #4]
 8030592:	2220      	movs	r2, #32
 8030594:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8030598:	687b      	ldr	r3, [r7, #4]
 803059a:	2200      	movs	r2, #0
 803059c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 803059e:	687b      	ldr	r3, [r7, #4]
 80305a0:	2200      	movs	r2, #0
 80305a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80305a6:	6878      	ldr	r0, [r7, #4]
 80305a8:	f7ff fbe9 	bl	802fd7e <HAL_I2C_SlaveTxCpltCallback>
}
 80305ac:	bf00      	nop
 80305ae:	3718      	adds	r7, #24
 80305b0:	46bd      	mov	sp, r7
 80305b2:	bd80      	pop	{r7, pc}
 80305b4:	ffff0000 	.word	0xffff0000

080305b8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80305b8:	b580      	push	{r7, lr}
 80305ba:	b082      	sub	sp, #8
 80305bc:	af00      	add	r7, sp, #0
 80305be:	6078      	str	r0, [r7, #4]
 80305c0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80305c2:	687b      	ldr	r3, [r7, #4]
 80305c4:	4a26      	ldr	r2, [pc, #152]	; (8030660 <I2C_ITListenCplt+0xa8>)
 80305c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80305c8:	687b      	ldr	r3, [r7, #4]
 80305ca:	2200      	movs	r2, #0
 80305cc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80305ce:	687b      	ldr	r3, [r7, #4]
 80305d0:	2220      	movs	r2, #32
 80305d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80305d6:	687b      	ldr	r3, [r7, #4]
 80305d8:	2200      	movs	r2, #0
 80305da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80305de:	687b      	ldr	r3, [r7, #4]
 80305e0:	2200      	movs	r2, #0
 80305e2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80305e4:	683b      	ldr	r3, [r7, #0]
 80305e6:	089b      	lsrs	r3, r3, #2
 80305e8:	f003 0301 	and.w	r3, r3, #1
 80305ec:	2b00      	cmp	r3, #0
 80305ee:	d022      	beq.n	8030636 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80305f0:	687b      	ldr	r3, [r7, #4]
 80305f2:	681b      	ldr	r3, [r3, #0]
 80305f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80305f6:	687b      	ldr	r3, [r7, #4]
 80305f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80305fa:	b2d2      	uxtb	r2, r2
 80305fc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80305fe:	687b      	ldr	r3, [r7, #4]
 8030600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8030602:	1c5a      	adds	r2, r3, #1
 8030604:	687b      	ldr	r3, [r7, #4]
 8030606:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8030608:	687b      	ldr	r3, [r7, #4]
 803060a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 803060c:	2b00      	cmp	r3, #0
 803060e:	d012      	beq.n	8030636 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8030610:	687b      	ldr	r3, [r7, #4]
 8030612:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8030614:	3b01      	subs	r3, #1
 8030616:	b29a      	uxth	r2, r3
 8030618:	687b      	ldr	r3, [r7, #4]
 803061a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 803061c:	687b      	ldr	r3, [r7, #4]
 803061e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8030620:	b29b      	uxth	r3, r3
 8030622:	3b01      	subs	r3, #1
 8030624:	b29a      	uxth	r2, r3
 8030626:	687b      	ldr	r3, [r7, #4]
 8030628:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 803062a:	687b      	ldr	r3, [r7, #4]
 803062c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 803062e:	f043 0204 	orr.w	r2, r3, #4
 8030632:	687b      	ldr	r3, [r7, #4]
 8030634:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8030636:	f248 0103 	movw	r1, #32771	; 0x8003
 803063a:	6878      	ldr	r0, [r7, #4]
 803063c:	f000 f94b 	bl	80308d6 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8030640:	687b      	ldr	r3, [r7, #4]
 8030642:	681b      	ldr	r3, [r3, #0]
 8030644:	2210      	movs	r2, #16
 8030646:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8030648:	687b      	ldr	r3, [r7, #4]
 803064a:	2200      	movs	r2, #0
 803064c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8030650:	6878      	ldr	r0, [r7, #4]
 8030652:	f7ff fbb6 	bl	802fdc2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8030656:	bf00      	nop
 8030658:	3708      	adds	r7, #8
 803065a:	46bd      	mov	sp, r7
 803065c:	bd80      	pop	{r7, pc}
 803065e:	bf00      	nop
 8030660:	ffff0000 	.word	0xffff0000

08030664 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8030664:	b580      	push	{r7, lr}
 8030666:	b084      	sub	sp, #16
 8030668:	af00      	add	r7, sp, #0
 803066a:	6078      	str	r0, [r7, #4]
 803066c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 803066e:	687b      	ldr	r3, [r7, #4]
 8030670:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8030674:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8030676:	687b      	ldr	r3, [r7, #4]
 8030678:	2200      	movs	r2, #0
 803067a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 803067e:	687b      	ldr	r3, [r7, #4]
 8030680:	4a5d      	ldr	r2, [pc, #372]	; (80307f8 <I2C_ITError+0x194>)
 8030682:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8030684:	687b      	ldr	r3, [r7, #4]
 8030686:	2200      	movs	r2, #0
 8030688:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 803068a:	687b      	ldr	r3, [r7, #4]
 803068c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 803068e:	683b      	ldr	r3, [r7, #0]
 8030690:	431a      	orrs	r2, r3
 8030692:	687b      	ldr	r3, [r7, #4]
 8030694:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8030696:	7bfb      	ldrb	r3, [r7, #15]
 8030698:	2b28      	cmp	r3, #40	; 0x28
 803069a:	d005      	beq.n	80306a8 <I2C_ITError+0x44>
 803069c:	7bfb      	ldrb	r3, [r7, #15]
 803069e:	2b29      	cmp	r3, #41	; 0x29
 80306a0:	d002      	beq.n	80306a8 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80306a2:	7bfb      	ldrb	r3, [r7, #15]
 80306a4:	2b2a      	cmp	r3, #42	; 0x2a
 80306a6:	d10b      	bne.n	80306c0 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80306a8:	2103      	movs	r1, #3
 80306aa:	6878      	ldr	r0, [r7, #4]
 80306ac:	f000 f913 	bl	80308d6 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80306b0:	687b      	ldr	r3, [r7, #4]
 80306b2:	2228      	movs	r2, #40	; 0x28
 80306b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80306b8:	687b      	ldr	r3, [r7, #4]
 80306ba:	4a50      	ldr	r2, [pc, #320]	; (80307fc <I2C_ITError+0x198>)
 80306bc:	635a      	str	r2, [r3, #52]	; 0x34
 80306be:	e011      	b.n	80306e4 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80306c0:	f248 0103 	movw	r1, #32771	; 0x8003
 80306c4:	6878      	ldr	r0, [r7, #4]
 80306c6:	f000 f906 	bl	80308d6 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80306ca:	687b      	ldr	r3, [r7, #4]
 80306cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80306d0:	b2db      	uxtb	r3, r3
 80306d2:	2b60      	cmp	r3, #96	; 0x60
 80306d4:	d003      	beq.n	80306de <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80306d6:	687b      	ldr	r3, [r7, #4]
 80306d8:	2220      	movs	r2, #32
 80306da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 80306de:	687b      	ldr	r3, [r7, #4]
 80306e0:	2200      	movs	r2, #0
 80306e2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80306e4:	687b      	ldr	r3, [r7, #4]
 80306e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80306e8:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80306ea:	687b      	ldr	r3, [r7, #4]
 80306ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80306ee:	2b00      	cmp	r3, #0
 80306f0:	d039      	beq.n	8030766 <I2C_ITError+0x102>
 80306f2:	68bb      	ldr	r3, [r7, #8]
 80306f4:	2b11      	cmp	r3, #17
 80306f6:	d002      	beq.n	80306fe <I2C_ITError+0x9a>
 80306f8:	68bb      	ldr	r3, [r7, #8]
 80306fa:	2b21      	cmp	r3, #33	; 0x21
 80306fc:	d133      	bne.n	8030766 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80306fe:	687b      	ldr	r3, [r7, #4]
 8030700:	681b      	ldr	r3, [r3, #0]
 8030702:	681b      	ldr	r3, [r3, #0]
 8030704:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8030708:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 803070c:	d107      	bne.n	803071e <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 803070e:	687b      	ldr	r3, [r7, #4]
 8030710:	681b      	ldr	r3, [r3, #0]
 8030712:	681a      	ldr	r2, [r3, #0]
 8030714:	687b      	ldr	r3, [r7, #4]
 8030716:	681b      	ldr	r3, [r3, #0]
 8030718:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 803071c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 803071e:	687b      	ldr	r3, [r7, #4]
 8030720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8030722:	4618      	mov	r0, r3
 8030724:	f7fe fc54 	bl	802efd0 <HAL_DMA_GetState>
 8030728:	4603      	mov	r3, r0
 803072a:	2b01      	cmp	r3, #1
 803072c:	d017      	beq.n	803075e <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 803072e:	687b      	ldr	r3, [r7, #4]
 8030730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8030732:	4a33      	ldr	r2, [pc, #204]	; (8030800 <I2C_ITError+0x19c>)
 8030734:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8030736:	687b      	ldr	r3, [r7, #4]
 8030738:	2200      	movs	r2, #0
 803073a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 803073e:	687b      	ldr	r3, [r7, #4]
 8030740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8030742:	4618      	mov	r0, r3
 8030744:	f7fd fad4 	bl	802dcf0 <HAL_DMA_Abort_IT>
 8030748:	4603      	mov	r3, r0
 803074a:	2b00      	cmp	r3, #0
 803074c:	d04d      	beq.n	80307ea <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 803074e:	687b      	ldr	r3, [r7, #4]
 8030750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8030752:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8030754:	687a      	ldr	r2, [r7, #4]
 8030756:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8030758:	4610      	mov	r0, r2
 803075a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 803075c:	e045      	b.n	80307ea <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 803075e:	6878      	ldr	r0, [r7, #4]
 8030760:	f000 f850 	bl	8030804 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8030764:	e041      	b.n	80307ea <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8030766:	687b      	ldr	r3, [r7, #4]
 8030768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 803076a:	2b00      	cmp	r3, #0
 803076c:	d039      	beq.n	80307e2 <I2C_ITError+0x17e>
 803076e:	68bb      	ldr	r3, [r7, #8]
 8030770:	2b12      	cmp	r3, #18
 8030772:	d002      	beq.n	803077a <I2C_ITError+0x116>
 8030774:	68bb      	ldr	r3, [r7, #8]
 8030776:	2b22      	cmp	r3, #34	; 0x22
 8030778:	d133      	bne.n	80307e2 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 803077a:	687b      	ldr	r3, [r7, #4]
 803077c:	681b      	ldr	r3, [r3, #0]
 803077e:	681b      	ldr	r3, [r3, #0]
 8030780:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8030784:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8030788:	d107      	bne.n	803079a <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 803078a:	687b      	ldr	r3, [r7, #4]
 803078c:	681b      	ldr	r3, [r3, #0]
 803078e:	681a      	ldr	r2, [r3, #0]
 8030790:	687b      	ldr	r3, [r7, #4]
 8030792:	681b      	ldr	r3, [r3, #0]
 8030794:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8030798:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 803079a:	687b      	ldr	r3, [r7, #4]
 803079c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 803079e:	4618      	mov	r0, r3
 80307a0:	f7fe fc16 	bl	802efd0 <HAL_DMA_GetState>
 80307a4:	4603      	mov	r3, r0
 80307a6:	2b01      	cmp	r3, #1
 80307a8:	d017      	beq.n	80307da <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80307aa:	687b      	ldr	r3, [r7, #4]
 80307ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80307ae:	4a14      	ldr	r2, [pc, #80]	; (8030800 <I2C_ITError+0x19c>)
 80307b0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80307b2:	687b      	ldr	r3, [r7, #4]
 80307b4:	2200      	movs	r2, #0
 80307b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80307ba:	687b      	ldr	r3, [r7, #4]
 80307bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80307be:	4618      	mov	r0, r3
 80307c0:	f7fd fa96 	bl	802dcf0 <HAL_DMA_Abort_IT>
 80307c4:	4603      	mov	r3, r0
 80307c6:	2b00      	cmp	r3, #0
 80307c8:	d011      	beq.n	80307ee <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80307ca:	687b      	ldr	r3, [r7, #4]
 80307cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80307ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80307d0:	687a      	ldr	r2, [r7, #4]
 80307d2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80307d4:	4610      	mov	r0, r2
 80307d6:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80307d8:	e009      	b.n	80307ee <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80307da:	6878      	ldr	r0, [r7, #4]
 80307dc:	f000 f812 	bl	8030804 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80307e0:	e005      	b.n	80307ee <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80307e2:	6878      	ldr	r0, [r7, #4]
 80307e4:	f000 f80e 	bl	8030804 <I2C_TreatErrorCallback>
  }
}
 80307e8:	e002      	b.n	80307f0 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80307ea:	bf00      	nop
 80307ec:	e000      	b.n	80307f0 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80307ee:	bf00      	nop
}
 80307f0:	bf00      	nop
 80307f2:	3710      	adds	r7, #16
 80307f4:	46bd      	mov	sp, r7
 80307f6:	bd80      	pop	{r7, pc}
 80307f8:	ffff0000 	.word	0xffff0000
 80307fc:	0802fdff 	.word	0x0802fdff
 8030800:	0803089b 	.word	0x0803089b

08030804 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8030804:	b580      	push	{r7, lr}
 8030806:	b082      	sub	sp, #8
 8030808:	af00      	add	r7, sp, #0
 803080a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 803080c:	687b      	ldr	r3, [r7, #4]
 803080e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8030812:	b2db      	uxtb	r3, r3
 8030814:	2b60      	cmp	r3, #96	; 0x60
 8030816:	d10e      	bne.n	8030836 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8030818:	687b      	ldr	r3, [r7, #4]
 803081a:	2220      	movs	r2, #32
 803081c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8030820:	687b      	ldr	r3, [r7, #4]
 8030822:	2200      	movs	r2, #0
 8030824:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8030826:	687b      	ldr	r3, [r7, #4]
 8030828:	2200      	movs	r2, #0
 803082a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 803082e:	6878      	ldr	r0, [r7, #4]
 8030830:	f7ff fadb 	bl	802fdea <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8030834:	e009      	b.n	803084a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8030836:	687b      	ldr	r3, [r7, #4]
 8030838:	2200      	movs	r2, #0
 803083a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 803083c:	687b      	ldr	r3, [r7, #4]
 803083e:	2200      	movs	r2, #0
 8030840:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8030844:	6878      	ldr	r0, [r7, #4]
 8030846:	f7ff fac6 	bl	802fdd6 <HAL_I2C_ErrorCallback>
}
 803084a:	bf00      	nop
 803084c:	3708      	adds	r7, #8
 803084e:	46bd      	mov	sp, r7
 8030850:	bd80      	pop	{r7, pc}

08030852 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8030852:	b480      	push	{r7}
 8030854:	b083      	sub	sp, #12
 8030856:	af00      	add	r7, sp, #0
 8030858:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 803085a:	687b      	ldr	r3, [r7, #4]
 803085c:	681b      	ldr	r3, [r3, #0]
 803085e:	699b      	ldr	r3, [r3, #24]
 8030860:	f003 0302 	and.w	r3, r3, #2
 8030864:	2b02      	cmp	r3, #2
 8030866:	d103      	bne.n	8030870 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8030868:	687b      	ldr	r3, [r7, #4]
 803086a:	681b      	ldr	r3, [r3, #0]
 803086c:	2200      	movs	r2, #0
 803086e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8030870:	687b      	ldr	r3, [r7, #4]
 8030872:	681b      	ldr	r3, [r3, #0]
 8030874:	699b      	ldr	r3, [r3, #24]
 8030876:	f003 0301 	and.w	r3, r3, #1
 803087a:	2b01      	cmp	r3, #1
 803087c:	d007      	beq.n	803088e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 803087e:	687b      	ldr	r3, [r7, #4]
 8030880:	681b      	ldr	r3, [r3, #0]
 8030882:	699a      	ldr	r2, [r3, #24]
 8030884:	687b      	ldr	r3, [r7, #4]
 8030886:	681b      	ldr	r3, [r3, #0]
 8030888:	f042 0201 	orr.w	r2, r2, #1
 803088c:	619a      	str	r2, [r3, #24]
  }
}
 803088e:	bf00      	nop
 8030890:	370c      	adds	r7, #12
 8030892:	46bd      	mov	sp, r7
 8030894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030898:	4770      	bx	lr

0803089a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 803089a:	b580      	push	{r7, lr}
 803089c:	b084      	sub	sp, #16
 803089e:	af00      	add	r7, sp, #0
 80308a0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80308a2:	687b      	ldr	r3, [r7, #4]
 80308a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80308a6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80308a8:	68fb      	ldr	r3, [r7, #12]
 80308aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80308ac:	2b00      	cmp	r3, #0
 80308ae:	d003      	beq.n	80308b8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80308b0:	68fb      	ldr	r3, [r7, #12]
 80308b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80308b4:	2200      	movs	r2, #0
 80308b6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80308b8:	68fb      	ldr	r3, [r7, #12]
 80308ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80308bc:	2b00      	cmp	r3, #0
 80308be:	d003      	beq.n	80308c8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80308c0:	68fb      	ldr	r3, [r7, #12]
 80308c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80308c4:	2200      	movs	r2, #0
 80308c6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 80308c8:	68f8      	ldr	r0, [r7, #12]
 80308ca:	f7ff ff9b 	bl	8030804 <I2C_TreatErrorCallback>
}
 80308ce:	bf00      	nop
 80308d0:	3710      	adds	r7, #16
 80308d2:	46bd      	mov	sp, r7
 80308d4:	bd80      	pop	{r7, pc}

080308d6 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80308d6:	b480      	push	{r7}
 80308d8:	b085      	sub	sp, #20
 80308da:	af00      	add	r7, sp, #0
 80308dc:	6078      	str	r0, [r7, #4]
 80308de:	460b      	mov	r3, r1
 80308e0:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80308e2:	2300      	movs	r3, #0
 80308e4:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80308e6:	887b      	ldrh	r3, [r7, #2]
 80308e8:	f003 0301 	and.w	r3, r3, #1
 80308ec:	2b00      	cmp	r3, #0
 80308ee:	d00f      	beq.n	8030910 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80308f0:	68fb      	ldr	r3, [r7, #12]
 80308f2:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80308f6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80308f8:	687b      	ldr	r3, [r7, #4]
 80308fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80308fe:	b2db      	uxtb	r3, r3
 8030900:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8030904:	2b28      	cmp	r3, #40	; 0x28
 8030906:	d003      	beq.n	8030910 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8030908:	68fb      	ldr	r3, [r7, #12]
 803090a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 803090e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8030910:	887b      	ldrh	r3, [r7, #2]
 8030912:	f003 0302 	and.w	r3, r3, #2
 8030916:	2b00      	cmp	r3, #0
 8030918:	d00f      	beq.n	803093a <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 803091a:	68fb      	ldr	r3, [r7, #12]
 803091c:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8030920:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8030922:	687b      	ldr	r3, [r7, #4]
 8030924:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8030928:	b2db      	uxtb	r3, r3
 803092a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 803092e:	2b28      	cmp	r3, #40	; 0x28
 8030930:	d003      	beq.n	803093a <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8030932:	68fb      	ldr	r3, [r7, #12]
 8030934:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8030938:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 803093a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 803093e:	2b00      	cmp	r3, #0
 8030940:	da03      	bge.n	803094a <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8030942:	68fb      	ldr	r3, [r7, #12]
 8030944:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8030948:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 803094a:	887b      	ldrh	r3, [r7, #2]
 803094c:	2b10      	cmp	r3, #16
 803094e:	d103      	bne.n	8030958 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8030950:	68fb      	ldr	r3, [r7, #12]
 8030952:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8030956:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8030958:	887b      	ldrh	r3, [r7, #2]
 803095a:	2b20      	cmp	r3, #32
 803095c:	d103      	bne.n	8030966 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 803095e:	68fb      	ldr	r3, [r7, #12]
 8030960:	f043 0320 	orr.w	r3, r3, #32
 8030964:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8030966:	887b      	ldrh	r3, [r7, #2]
 8030968:	2b40      	cmp	r3, #64	; 0x40
 803096a:	d103      	bne.n	8030974 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 803096c:	68fb      	ldr	r3, [r7, #12]
 803096e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8030972:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8030974:	687b      	ldr	r3, [r7, #4]
 8030976:	681b      	ldr	r3, [r3, #0]
 8030978:	6819      	ldr	r1, [r3, #0]
 803097a:	68fb      	ldr	r3, [r7, #12]
 803097c:	43da      	mvns	r2, r3
 803097e:	687b      	ldr	r3, [r7, #4]
 8030980:	681b      	ldr	r3, [r3, #0]
 8030982:	400a      	ands	r2, r1
 8030984:	601a      	str	r2, [r3, #0]
}
 8030986:	bf00      	nop
 8030988:	3714      	adds	r7, #20
 803098a:	46bd      	mov	sp, r7
 803098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030990:	4770      	bx	lr

08030992 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8030992:	b480      	push	{r7}
 8030994:	b083      	sub	sp, #12
 8030996:	af00      	add	r7, sp, #0
 8030998:	6078      	str	r0, [r7, #4]
 803099a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 803099c:	687b      	ldr	r3, [r7, #4]
 803099e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80309a2:	b2db      	uxtb	r3, r3
 80309a4:	2b20      	cmp	r3, #32
 80309a6:	d138      	bne.n	8030a1a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80309a8:	687b      	ldr	r3, [r7, #4]
 80309aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80309ae:	2b01      	cmp	r3, #1
 80309b0:	d101      	bne.n	80309b6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80309b2:	2302      	movs	r3, #2
 80309b4:	e032      	b.n	8030a1c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80309b6:	687b      	ldr	r3, [r7, #4]
 80309b8:	2201      	movs	r2, #1
 80309ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80309be:	687b      	ldr	r3, [r7, #4]
 80309c0:	2224      	movs	r2, #36	; 0x24
 80309c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80309c6:	687b      	ldr	r3, [r7, #4]
 80309c8:	681b      	ldr	r3, [r3, #0]
 80309ca:	681a      	ldr	r2, [r3, #0]
 80309cc:	687b      	ldr	r3, [r7, #4]
 80309ce:	681b      	ldr	r3, [r3, #0]
 80309d0:	f022 0201 	bic.w	r2, r2, #1
 80309d4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80309d6:	687b      	ldr	r3, [r7, #4]
 80309d8:	681b      	ldr	r3, [r3, #0]
 80309da:	681a      	ldr	r2, [r3, #0]
 80309dc:	687b      	ldr	r3, [r7, #4]
 80309de:	681b      	ldr	r3, [r3, #0]
 80309e0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80309e4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80309e6:	687b      	ldr	r3, [r7, #4]
 80309e8:	681b      	ldr	r3, [r3, #0]
 80309ea:	6819      	ldr	r1, [r3, #0]
 80309ec:	687b      	ldr	r3, [r7, #4]
 80309ee:	681b      	ldr	r3, [r3, #0]
 80309f0:	683a      	ldr	r2, [r7, #0]
 80309f2:	430a      	orrs	r2, r1
 80309f4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80309f6:	687b      	ldr	r3, [r7, #4]
 80309f8:	681b      	ldr	r3, [r3, #0]
 80309fa:	681a      	ldr	r2, [r3, #0]
 80309fc:	687b      	ldr	r3, [r7, #4]
 80309fe:	681b      	ldr	r3, [r3, #0]
 8030a00:	f042 0201 	orr.w	r2, r2, #1
 8030a04:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8030a06:	687b      	ldr	r3, [r7, #4]
 8030a08:	2220      	movs	r2, #32
 8030a0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8030a0e:	687b      	ldr	r3, [r7, #4]
 8030a10:	2200      	movs	r2, #0
 8030a12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8030a16:	2300      	movs	r3, #0
 8030a18:	e000      	b.n	8030a1c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8030a1a:	2302      	movs	r3, #2
  }
}
 8030a1c:	4618      	mov	r0, r3
 8030a1e:	370c      	adds	r7, #12
 8030a20:	46bd      	mov	sp, r7
 8030a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030a26:	4770      	bx	lr

08030a28 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8030a28:	b480      	push	{r7}
 8030a2a:	b085      	sub	sp, #20
 8030a2c:	af00      	add	r7, sp, #0
 8030a2e:	6078      	str	r0, [r7, #4]
 8030a30:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8030a32:	687b      	ldr	r3, [r7, #4]
 8030a34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8030a38:	b2db      	uxtb	r3, r3
 8030a3a:	2b20      	cmp	r3, #32
 8030a3c:	d139      	bne.n	8030ab2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8030a3e:	687b      	ldr	r3, [r7, #4]
 8030a40:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8030a44:	2b01      	cmp	r3, #1
 8030a46:	d101      	bne.n	8030a4c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8030a48:	2302      	movs	r3, #2
 8030a4a:	e033      	b.n	8030ab4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8030a4c:	687b      	ldr	r3, [r7, #4]
 8030a4e:	2201      	movs	r2, #1
 8030a50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8030a54:	687b      	ldr	r3, [r7, #4]
 8030a56:	2224      	movs	r2, #36	; 0x24
 8030a58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8030a5c:	687b      	ldr	r3, [r7, #4]
 8030a5e:	681b      	ldr	r3, [r3, #0]
 8030a60:	681a      	ldr	r2, [r3, #0]
 8030a62:	687b      	ldr	r3, [r7, #4]
 8030a64:	681b      	ldr	r3, [r3, #0]
 8030a66:	f022 0201 	bic.w	r2, r2, #1
 8030a6a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8030a6c:	687b      	ldr	r3, [r7, #4]
 8030a6e:	681b      	ldr	r3, [r3, #0]
 8030a70:	681b      	ldr	r3, [r3, #0]
 8030a72:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8030a74:	68fb      	ldr	r3, [r7, #12]
 8030a76:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8030a7a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8030a7c:	683b      	ldr	r3, [r7, #0]
 8030a7e:	021b      	lsls	r3, r3, #8
 8030a80:	68fa      	ldr	r2, [r7, #12]
 8030a82:	4313      	orrs	r3, r2
 8030a84:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8030a86:	687b      	ldr	r3, [r7, #4]
 8030a88:	681b      	ldr	r3, [r3, #0]
 8030a8a:	68fa      	ldr	r2, [r7, #12]
 8030a8c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8030a8e:	687b      	ldr	r3, [r7, #4]
 8030a90:	681b      	ldr	r3, [r3, #0]
 8030a92:	681a      	ldr	r2, [r3, #0]
 8030a94:	687b      	ldr	r3, [r7, #4]
 8030a96:	681b      	ldr	r3, [r3, #0]
 8030a98:	f042 0201 	orr.w	r2, r2, #1
 8030a9c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8030a9e:	687b      	ldr	r3, [r7, #4]
 8030aa0:	2220      	movs	r2, #32
 8030aa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8030aa6:	687b      	ldr	r3, [r7, #4]
 8030aa8:	2200      	movs	r2, #0
 8030aaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8030aae:	2300      	movs	r3, #0
 8030ab0:	e000      	b.n	8030ab4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8030ab2:	2302      	movs	r3, #2
  }
}
 8030ab4:	4618      	mov	r0, r3
 8030ab6:	3714      	adds	r7, #20
 8030ab8:	46bd      	mov	sp, r7
 8030aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030abe:	4770      	bx	lr

08030ac0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8030ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8030ac2:	b08f      	sub	sp, #60	; 0x3c
 8030ac4:	af0a      	add	r7, sp, #40	; 0x28
 8030ac6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8030ac8:	687b      	ldr	r3, [r7, #4]
 8030aca:	2b00      	cmp	r3, #0
 8030acc:	d101      	bne.n	8030ad2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8030ace:	2301      	movs	r3, #1
 8030ad0:	e116      	b.n	8030d00 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8030ad2:	687b      	ldr	r3, [r7, #4]
 8030ad4:	681b      	ldr	r3, [r3, #0]
 8030ad6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8030ad8:	687b      	ldr	r3, [r7, #4]
 8030ada:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8030ade:	b2db      	uxtb	r3, r3
 8030ae0:	2b00      	cmp	r3, #0
 8030ae2:	d106      	bne.n	8030af2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8030ae4:	687b      	ldr	r3, [r7, #4]
 8030ae6:	2200      	movs	r2, #0
 8030ae8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8030aec:	6878      	ldr	r0, [r7, #4]
 8030aee:	f00b fe7b 	bl	803c7e8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8030af2:	687b      	ldr	r3, [r7, #4]
 8030af4:	2203      	movs	r2, #3
 8030af6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8030afa:	68bb      	ldr	r3, [r7, #8]
 8030afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8030afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8030b02:	2b00      	cmp	r3, #0
 8030b04:	d102      	bne.n	8030b0c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8030b06:	687b      	ldr	r3, [r7, #4]
 8030b08:	2200      	movs	r2, #0
 8030b0a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8030b0c:	687b      	ldr	r3, [r7, #4]
 8030b0e:	681b      	ldr	r3, [r3, #0]
 8030b10:	4618      	mov	r0, r3
 8030b12:	f008 f9c4 	bl	8038e9e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8030b16:	687b      	ldr	r3, [r7, #4]
 8030b18:	681b      	ldr	r3, [r3, #0]
 8030b1a:	603b      	str	r3, [r7, #0]
 8030b1c:	687e      	ldr	r6, [r7, #4]
 8030b1e:	466d      	mov	r5, sp
 8030b20:	f106 0410 	add.w	r4, r6, #16
 8030b24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8030b26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8030b28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8030b2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8030b2c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8030b30:	e885 0003 	stmia.w	r5, {r0, r1}
 8030b34:	1d33      	adds	r3, r6, #4
 8030b36:	cb0e      	ldmia	r3, {r1, r2, r3}
 8030b38:	6838      	ldr	r0, [r7, #0]
 8030b3a:	f008 f88f 	bl	8038c5c <USB_CoreInit>
 8030b3e:	4603      	mov	r3, r0
 8030b40:	2b00      	cmp	r3, #0
 8030b42:	d005      	beq.n	8030b50 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8030b44:	687b      	ldr	r3, [r7, #4]
 8030b46:	2202      	movs	r2, #2
 8030b48:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8030b4c:	2301      	movs	r3, #1
 8030b4e:	e0d7      	b.n	8030d00 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8030b50:	687b      	ldr	r3, [r7, #4]
 8030b52:	681b      	ldr	r3, [r3, #0]
 8030b54:	2100      	movs	r1, #0
 8030b56:	4618      	mov	r0, r3
 8030b58:	f008 f9b2 	bl	8038ec0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8030b5c:	2300      	movs	r3, #0
 8030b5e:	73fb      	strb	r3, [r7, #15]
 8030b60:	e04a      	b.n	8030bf8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8030b62:	7bfa      	ldrb	r2, [r7, #15]
 8030b64:	6879      	ldr	r1, [r7, #4]
 8030b66:	4613      	mov	r3, r2
 8030b68:	00db      	lsls	r3, r3, #3
 8030b6a:	4413      	add	r3, r2
 8030b6c:	009b      	lsls	r3, r3, #2
 8030b6e:	440b      	add	r3, r1
 8030b70:	333d      	adds	r3, #61	; 0x3d
 8030b72:	2201      	movs	r2, #1
 8030b74:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8030b76:	7bfa      	ldrb	r2, [r7, #15]
 8030b78:	6879      	ldr	r1, [r7, #4]
 8030b7a:	4613      	mov	r3, r2
 8030b7c:	00db      	lsls	r3, r3, #3
 8030b7e:	4413      	add	r3, r2
 8030b80:	009b      	lsls	r3, r3, #2
 8030b82:	440b      	add	r3, r1
 8030b84:	333c      	adds	r3, #60	; 0x3c
 8030b86:	7bfa      	ldrb	r2, [r7, #15]
 8030b88:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8030b8a:	7bfa      	ldrb	r2, [r7, #15]
 8030b8c:	7bfb      	ldrb	r3, [r7, #15]
 8030b8e:	b298      	uxth	r0, r3
 8030b90:	6879      	ldr	r1, [r7, #4]
 8030b92:	4613      	mov	r3, r2
 8030b94:	00db      	lsls	r3, r3, #3
 8030b96:	4413      	add	r3, r2
 8030b98:	009b      	lsls	r3, r3, #2
 8030b9a:	440b      	add	r3, r1
 8030b9c:	3344      	adds	r3, #68	; 0x44
 8030b9e:	4602      	mov	r2, r0
 8030ba0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8030ba2:	7bfa      	ldrb	r2, [r7, #15]
 8030ba4:	6879      	ldr	r1, [r7, #4]
 8030ba6:	4613      	mov	r3, r2
 8030ba8:	00db      	lsls	r3, r3, #3
 8030baa:	4413      	add	r3, r2
 8030bac:	009b      	lsls	r3, r3, #2
 8030bae:	440b      	add	r3, r1
 8030bb0:	3340      	adds	r3, #64	; 0x40
 8030bb2:	2200      	movs	r2, #0
 8030bb4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8030bb6:	7bfa      	ldrb	r2, [r7, #15]
 8030bb8:	6879      	ldr	r1, [r7, #4]
 8030bba:	4613      	mov	r3, r2
 8030bbc:	00db      	lsls	r3, r3, #3
 8030bbe:	4413      	add	r3, r2
 8030bc0:	009b      	lsls	r3, r3, #2
 8030bc2:	440b      	add	r3, r1
 8030bc4:	3348      	adds	r3, #72	; 0x48
 8030bc6:	2200      	movs	r2, #0
 8030bc8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8030bca:	7bfa      	ldrb	r2, [r7, #15]
 8030bcc:	6879      	ldr	r1, [r7, #4]
 8030bce:	4613      	mov	r3, r2
 8030bd0:	00db      	lsls	r3, r3, #3
 8030bd2:	4413      	add	r3, r2
 8030bd4:	009b      	lsls	r3, r3, #2
 8030bd6:	440b      	add	r3, r1
 8030bd8:	334c      	adds	r3, #76	; 0x4c
 8030bda:	2200      	movs	r2, #0
 8030bdc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8030bde:	7bfa      	ldrb	r2, [r7, #15]
 8030be0:	6879      	ldr	r1, [r7, #4]
 8030be2:	4613      	mov	r3, r2
 8030be4:	00db      	lsls	r3, r3, #3
 8030be6:	4413      	add	r3, r2
 8030be8:	009b      	lsls	r3, r3, #2
 8030bea:	440b      	add	r3, r1
 8030bec:	3354      	adds	r3, #84	; 0x54
 8030bee:	2200      	movs	r2, #0
 8030bf0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8030bf2:	7bfb      	ldrb	r3, [r7, #15]
 8030bf4:	3301      	adds	r3, #1
 8030bf6:	73fb      	strb	r3, [r7, #15]
 8030bf8:	7bfa      	ldrb	r2, [r7, #15]
 8030bfa:	687b      	ldr	r3, [r7, #4]
 8030bfc:	685b      	ldr	r3, [r3, #4]
 8030bfe:	429a      	cmp	r2, r3
 8030c00:	d3af      	bcc.n	8030b62 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8030c02:	2300      	movs	r3, #0
 8030c04:	73fb      	strb	r3, [r7, #15]
 8030c06:	e044      	b.n	8030c92 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8030c08:	7bfa      	ldrb	r2, [r7, #15]
 8030c0a:	6879      	ldr	r1, [r7, #4]
 8030c0c:	4613      	mov	r3, r2
 8030c0e:	00db      	lsls	r3, r3, #3
 8030c10:	4413      	add	r3, r2
 8030c12:	009b      	lsls	r3, r3, #2
 8030c14:	440b      	add	r3, r1
 8030c16:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8030c1a:	2200      	movs	r2, #0
 8030c1c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8030c1e:	7bfa      	ldrb	r2, [r7, #15]
 8030c20:	6879      	ldr	r1, [r7, #4]
 8030c22:	4613      	mov	r3, r2
 8030c24:	00db      	lsls	r3, r3, #3
 8030c26:	4413      	add	r3, r2
 8030c28:	009b      	lsls	r3, r3, #2
 8030c2a:	440b      	add	r3, r1
 8030c2c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8030c30:	7bfa      	ldrb	r2, [r7, #15]
 8030c32:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8030c34:	7bfa      	ldrb	r2, [r7, #15]
 8030c36:	6879      	ldr	r1, [r7, #4]
 8030c38:	4613      	mov	r3, r2
 8030c3a:	00db      	lsls	r3, r3, #3
 8030c3c:	4413      	add	r3, r2
 8030c3e:	009b      	lsls	r3, r3, #2
 8030c40:	440b      	add	r3, r1
 8030c42:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8030c46:	2200      	movs	r2, #0
 8030c48:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8030c4a:	7bfa      	ldrb	r2, [r7, #15]
 8030c4c:	6879      	ldr	r1, [r7, #4]
 8030c4e:	4613      	mov	r3, r2
 8030c50:	00db      	lsls	r3, r3, #3
 8030c52:	4413      	add	r3, r2
 8030c54:	009b      	lsls	r3, r3, #2
 8030c56:	440b      	add	r3, r1
 8030c58:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8030c5c:	2200      	movs	r2, #0
 8030c5e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8030c60:	7bfa      	ldrb	r2, [r7, #15]
 8030c62:	6879      	ldr	r1, [r7, #4]
 8030c64:	4613      	mov	r3, r2
 8030c66:	00db      	lsls	r3, r3, #3
 8030c68:	4413      	add	r3, r2
 8030c6a:	009b      	lsls	r3, r3, #2
 8030c6c:	440b      	add	r3, r1
 8030c6e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8030c72:	2200      	movs	r2, #0
 8030c74:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8030c76:	7bfa      	ldrb	r2, [r7, #15]
 8030c78:	6879      	ldr	r1, [r7, #4]
 8030c7a:	4613      	mov	r3, r2
 8030c7c:	00db      	lsls	r3, r3, #3
 8030c7e:	4413      	add	r3, r2
 8030c80:	009b      	lsls	r3, r3, #2
 8030c82:	440b      	add	r3, r1
 8030c84:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8030c88:	2200      	movs	r2, #0
 8030c8a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8030c8c:	7bfb      	ldrb	r3, [r7, #15]
 8030c8e:	3301      	adds	r3, #1
 8030c90:	73fb      	strb	r3, [r7, #15]
 8030c92:	7bfa      	ldrb	r2, [r7, #15]
 8030c94:	687b      	ldr	r3, [r7, #4]
 8030c96:	685b      	ldr	r3, [r3, #4]
 8030c98:	429a      	cmp	r2, r3
 8030c9a:	d3b5      	bcc.n	8030c08 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8030c9c:	687b      	ldr	r3, [r7, #4]
 8030c9e:	681b      	ldr	r3, [r3, #0]
 8030ca0:	603b      	str	r3, [r7, #0]
 8030ca2:	687e      	ldr	r6, [r7, #4]
 8030ca4:	466d      	mov	r5, sp
 8030ca6:	f106 0410 	add.w	r4, r6, #16
 8030caa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8030cac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8030cae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8030cb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8030cb2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8030cb6:	e885 0003 	stmia.w	r5, {r0, r1}
 8030cba:	1d33      	adds	r3, r6, #4
 8030cbc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8030cbe:	6838      	ldr	r0, [r7, #0]
 8030cc0:	f008 f94a 	bl	8038f58 <USB_DevInit>
 8030cc4:	4603      	mov	r3, r0
 8030cc6:	2b00      	cmp	r3, #0
 8030cc8:	d005      	beq.n	8030cd6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8030cca:	687b      	ldr	r3, [r7, #4]
 8030ccc:	2202      	movs	r2, #2
 8030cce:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8030cd2:	2301      	movs	r3, #1
 8030cd4:	e014      	b.n	8030d00 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8030cd6:	687b      	ldr	r3, [r7, #4]
 8030cd8:	2200      	movs	r2, #0
 8030cda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8030cde:	687b      	ldr	r3, [r7, #4]
 8030ce0:	2201      	movs	r2, #1
 8030ce2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8030ce6:	687b      	ldr	r3, [r7, #4]
 8030ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8030cea:	2b01      	cmp	r3, #1
 8030cec:	d102      	bne.n	8030cf4 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8030cee:	6878      	ldr	r0, [r7, #4]
 8030cf0:	f001 f98c 	bl	803200c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8030cf4:	687b      	ldr	r3, [r7, #4]
 8030cf6:	681b      	ldr	r3, [r3, #0]
 8030cf8:	4618      	mov	r0, r3
 8030cfa:	f009 fa98 	bl	803a22e <USB_DevDisconnect>

  return HAL_OK;
 8030cfe:	2300      	movs	r3, #0
}
 8030d00:	4618      	mov	r0, r3
 8030d02:	3714      	adds	r7, #20
 8030d04:	46bd      	mov	sp, r7
 8030d06:	bdf0      	pop	{r4, r5, r6, r7, pc}

08030d08 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8030d08:	b580      	push	{r7, lr}
 8030d0a:	b084      	sub	sp, #16
 8030d0c:	af00      	add	r7, sp, #0
 8030d0e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8030d10:	687b      	ldr	r3, [r7, #4]
 8030d12:	681b      	ldr	r3, [r3, #0]
 8030d14:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8030d16:	687b      	ldr	r3, [r7, #4]
 8030d18:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8030d1c:	2b01      	cmp	r3, #1
 8030d1e:	d101      	bne.n	8030d24 <HAL_PCD_Start+0x1c>
 8030d20:	2302      	movs	r3, #2
 8030d22:	e020      	b.n	8030d66 <HAL_PCD_Start+0x5e>
 8030d24:	687b      	ldr	r3, [r7, #4]
 8030d26:	2201      	movs	r2, #1
 8030d28:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8030d2c:	687b      	ldr	r3, [r7, #4]
 8030d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8030d30:	2b01      	cmp	r3, #1
 8030d32:	d109      	bne.n	8030d48 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8030d34:	687b      	ldr	r3, [r7, #4]
 8030d36:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8030d38:	2b01      	cmp	r3, #1
 8030d3a:	d005      	beq.n	8030d48 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8030d3c:	68fb      	ldr	r3, [r7, #12]
 8030d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8030d40:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8030d44:	68fb      	ldr	r3, [r7, #12]
 8030d46:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8030d48:	687b      	ldr	r3, [r7, #4]
 8030d4a:	681b      	ldr	r3, [r3, #0]
 8030d4c:	4618      	mov	r0, r3
 8030d4e:	f008 f895 	bl	8038e7c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8030d52:	687b      	ldr	r3, [r7, #4]
 8030d54:	681b      	ldr	r3, [r3, #0]
 8030d56:	4618      	mov	r0, r3
 8030d58:	f009 fa48 	bl	803a1ec <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8030d5c:	687b      	ldr	r3, [r7, #4]
 8030d5e:	2200      	movs	r2, #0
 8030d60:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8030d64:	2300      	movs	r3, #0
}
 8030d66:	4618      	mov	r0, r3
 8030d68:	3710      	adds	r7, #16
 8030d6a:	46bd      	mov	sp, r7
 8030d6c:	bd80      	pop	{r7, pc}

08030d6e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8030d6e:	b590      	push	{r4, r7, lr}
 8030d70:	b08d      	sub	sp, #52	; 0x34
 8030d72:	af00      	add	r7, sp, #0
 8030d74:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8030d76:	687b      	ldr	r3, [r7, #4]
 8030d78:	681b      	ldr	r3, [r3, #0]
 8030d7a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8030d7c:	6a3b      	ldr	r3, [r7, #32]
 8030d7e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8030d80:	687b      	ldr	r3, [r7, #4]
 8030d82:	681b      	ldr	r3, [r3, #0]
 8030d84:	4618      	mov	r0, r3
 8030d86:	f009 fb06 	bl	803a396 <USB_GetMode>
 8030d8a:	4603      	mov	r3, r0
 8030d8c:	2b00      	cmp	r3, #0
 8030d8e:	f040 84b7 	bne.w	8031700 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8030d92:	687b      	ldr	r3, [r7, #4]
 8030d94:	681b      	ldr	r3, [r3, #0]
 8030d96:	4618      	mov	r0, r3
 8030d98:	f009 fa6a 	bl	803a270 <USB_ReadInterrupts>
 8030d9c:	4603      	mov	r3, r0
 8030d9e:	2b00      	cmp	r3, #0
 8030da0:	f000 84ad 	beq.w	80316fe <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8030da4:	69fb      	ldr	r3, [r7, #28]
 8030da6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8030daa:	689b      	ldr	r3, [r3, #8]
 8030dac:	0a1b      	lsrs	r3, r3, #8
 8030dae:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8030db2:	687b      	ldr	r3, [r7, #4]
 8030db4:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8030db8:	687b      	ldr	r3, [r7, #4]
 8030dba:	681b      	ldr	r3, [r3, #0]
 8030dbc:	4618      	mov	r0, r3
 8030dbe:	f009 fa57 	bl	803a270 <USB_ReadInterrupts>
 8030dc2:	4603      	mov	r3, r0
 8030dc4:	f003 0302 	and.w	r3, r3, #2
 8030dc8:	2b02      	cmp	r3, #2
 8030dca:	d107      	bne.n	8030ddc <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8030dcc:	687b      	ldr	r3, [r7, #4]
 8030dce:	681b      	ldr	r3, [r3, #0]
 8030dd0:	695a      	ldr	r2, [r3, #20]
 8030dd2:	687b      	ldr	r3, [r7, #4]
 8030dd4:	681b      	ldr	r3, [r3, #0]
 8030dd6:	f002 0202 	and.w	r2, r2, #2
 8030dda:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8030ddc:	687b      	ldr	r3, [r7, #4]
 8030dde:	681b      	ldr	r3, [r3, #0]
 8030de0:	4618      	mov	r0, r3
 8030de2:	f009 fa45 	bl	803a270 <USB_ReadInterrupts>
 8030de6:	4603      	mov	r3, r0
 8030de8:	f003 0310 	and.w	r3, r3, #16
 8030dec:	2b10      	cmp	r3, #16
 8030dee:	d161      	bne.n	8030eb4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8030df0:	687b      	ldr	r3, [r7, #4]
 8030df2:	681b      	ldr	r3, [r3, #0]
 8030df4:	699a      	ldr	r2, [r3, #24]
 8030df6:	687b      	ldr	r3, [r7, #4]
 8030df8:	681b      	ldr	r3, [r3, #0]
 8030dfa:	f022 0210 	bic.w	r2, r2, #16
 8030dfe:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8030e00:	6a3b      	ldr	r3, [r7, #32]
 8030e02:	6a1b      	ldr	r3, [r3, #32]
 8030e04:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8030e06:	69bb      	ldr	r3, [r7, #24]
 8030e08:	f003 020f 	and.w	r2, r3, #15
 8030e0c:	4613      	mov	r3, r2
 8030e0e:	00db      	lsls	r3, r3, #3
 8030e10:	4413      	add	r3, r2
 8030e12:	009b      	lsls	r3, r3, #2
 8030e14:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8030e18:	687a      	ldr	r2, [r7, #4]
 8030e1a:	4413      	add	r3, r2
 8030e1c:	3304      	adds	r3, #4
 8030e1e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8030e20:	69bb      	ldr	r3, [r7, #24]
 8030e22:	0c5b      	lsrs	r3, r3, #17
 8030e24:	f003 030f 	and.w	r3, r3, #15
 8030e28:	2b02      	cmp	r3, #2
 8030e2a:	d124      	bne.n	8030e76 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8030e2c:	69ba      	ldr	r2, [r7, #24]
 8030e2e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8030e32:	4013      	ands	r3, r2
 8030e34:	2b00      	cmp	r3, #0
 8030e36:	d035      	beq.n	8030ea4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8030e38:	697b      	ldr	r3, [r7, #20]
 8030e3a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8030e3c:	69bb      	ldr	r3, [r7, #24]
 8030e3e:	091b      	lsrs	r3, r3, #4
 8030e40:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8030e42:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8030e46:	b29b      	uxth	r3, r3
 8030e48:	461a      	mov	r2, r3
 8030e4a:	6a38      	ldr	r0, [r7, #32]
 8030e4c:	f009 f87c 	bl	8039f48 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8030e50:	697b      	ldr	r3, [r7, #20]
 8030e52:	691a      	ldr	r2, [r3, #16]
 8030e54:	69bb      	ldr	r3, [r7, #24]
 8030e56:	091b      	lsrs	r3, r3, #4
 8030e58:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8030e5c:	441a      	add	r2, r3
 8030e5e:	697b      	ldr	r3, [r7, #20]
 8030e60:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8030e62:	697b      	ldr	r3, [r7, #20]
 8030e64:	6a1a      	ldr	r2, [r3, #32]
 8030e66:	69bb      	ldr	r3, [r7, #24]
 8030e68:	091b      	lsrs	r3, r3, #4
 8030e6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8030e6e:	441a      	add	r2, r3
 8030e70:	697b      	ldr	r3, [r7, #20]
 8030e72:	621a      	str	r2, [r3, #32]
 8030e74:	e016      	b.n	8030ea4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8030e76:	69bb      	ldr	r3, [r7, #24]
 8030e78:	0c5b      	lsrs	r3, r3, #17
 8030e7a:	f003 030f 	and.w	r3, r3, #15
 8030e7e:	2b06      	cmp	r3, #6
 8030e80:	d110      	bne.n	8030ea4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8030e82:	687b      	ldr	r3, [r7, #4]
 8030e84:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8030e88:	2208      	movs	r2, #8
 8030e8a:	4619      	mov	r1, r3
 8030e8c:	6a38      	ldr	r0, [r7, #32]
 8030e8e:	f009 f85b 	bl	8039f48 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8030e92:	697b      	ldr	r3, [r7, #20]
 8030e94:	6a1a      	ldr	r2, [r3, #32]
 8030e96:	69bb      	ldr	r3, [r7, #24]
 8030e98:	091b      	lsrs	r3, r3, #4
 8030e9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8030e9e:	441a      	add	r2, r3
 8030ea0:	697b      	ldr	r3, [r7, #20]
 8030ea2:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8030ea4:	687b      	ldr	r3, [r7, #4]
 8030ea6:	681b      	ldr	r3, [r3, #0]
 8030ea8:	699a      	ldr	r2, [r3, #24]
 8030eaa:	687b      	ldr	r3, [r7, #4]
 8030eac:	681b      	ldr	r3, [r3, #0]
 8030eae:	f042 0210 	orr.w	r2, r2, #16
 8030eb2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8030eb4:	687b      	ldr	r3, [r7, #4]
 8030eb6:	681b      	ldr	r3, [r3, #0]
 8030eb8:	4618      	mov	r0, r3
 8030eba:	f009 f9d9 	bl	803a270 <USB_ReadInterrupts>
 8030ebe:	4603      	mov	r3, r0
 8030ec0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8030ec4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8030ec8:	f040 80a7 	bne.w	803101a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8030ecc:	2300      	movs	r3, #0
 8030ece:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8030ed0:	687b      	ldr	r3, [r7, #4]
 8030ed2:	681b      	ldr	r3, [r3, #0]
 8030ed4:	4618      	mov	r0, r3
 8030ed6:	f009 f9de 	bl	803a296 <USB_ReadDevAllOutEpInterrupt>
 8030eda:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8030edc:	e099      	b.n	8031012 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8030ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8030ee0:	f003 0301 	and.w	r3, r3, #1
 8030ee4:	2b00      	cmp	r3, #0
 8030ee6:	f000 808e 	beq.w	8031006 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8030eea:	687b      	ldr	r3, [r7, #4]
 8030eec:	681b      	ldr	r3, [r3, #0]
 8030eee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8030ef0:	b2d2      	uxtb	r2, r2
 8030ef2:	4611      	mov	r1, r2
 8030ef4:	4618      	mov	r0, r3
 8030ef6:	f009 fa02 	bl	803a2fe <USB_ReadDevOutEPInterrupt>
 8030efa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8030efc:	693b      	ldr	r3, [r7, #16]
 8030efe:	f003 0301 	and.w	r3, r3, #1
 8030f02:	2b00      	cmp	r3, #0
 8030f04:	d00c      	beq.n	8030f20 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8030f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8030f08:	015a      	lsls	r2, r3, #5
 8030f0a:	69fb      	ldr	r3, [r7, #28]
 8030f0c:	4413      	add	r3, r2
 8030f0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8030f12:	461a      	mov	r2, r3
 8030f14:	2301      	movs	r3, #1
 8030f16:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8030f18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8030f1a:	6878      	ldr	r0, [r7, #4]
 8030f1c:	f000 fef0 	bl	8031d00 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8030f20:	693b      	ldr	r3, [r7, #16]
 8030f22:	f003 0308 	and.w	r3, r3, #8
 8030f26:	2b00      	cmp	r3, #0
 8030f28:	d00c      	beq.n	8030f44 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8030f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8030f2c:	015a      	lsls	r2, r3, #5
 8030f2e:	69fb      	ldr	r3, [r7, #28]
 8030f30:	4413      	add	r3, r2
 8030f32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8030f36:	461a      	mov	r2, r3
 8030f38:	2308      	movs	r3, #8
 8030f3a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8030f3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8030f3e:	6878      	ldr	r0, [r7, #4]
 8030f40:	f000 ffc6 	bl	8031ed0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8030f44:	693b      	ldr	r3, [r7, #16]
 8030f46:	f003 0310 	and.w	r3, r3, #16
 8030f4a:	2b00      	cmp	r3, #0
 8030f4c:	d008      	beq.n	8030f60 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8030f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8030f50:	015a      	lsls	r2, r3, #5
 8030f52:	69fb      	ldr	r3, [r7, #28]
 8030f54:	4413      	add	r3, r2
 8030f56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8030f5a:	461a      	mov	r2, r3
 8030f5c:	2310      	movs	r3, #16
 8030f5e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8030f60:	693b      	ldr	r3, [r7, #16]
 8030f62:	f003 0302 	and.w	r3, r3, #2
 8030f66:	2b00      	cmp	r3, #0
 8030f68:	d030      	beq.n	8030fcc <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8030f6a:	6a3b      	ldr	r3, [r7, #32]
 8030f6c:	695b      	ldr	r3, [r3, #20]
 8030f6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8030f72:	2b80      	cmp	r3, #128	; 0x80
 8030f74:	d109      	bne.n	8030f8a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8030f76:	69fb      	ldr	r3, [r7, #28]
 8030f78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8030f7c:	685b      	ldr	r3, [r3, #4]
 8030f7e:	69fa      	ldr	r2, [r7, #28]
 8030f80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8030f84:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8030f88:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8030f8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8030f8c:	4613      	mov	r3, r2
 8030f8e:	00db      	lsls	r3, r3, #3
 8030f90:	4413      	add	r3, r2
 8030f92:	009b      	lsls	r3, r3, #2
 8030f94:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8030f98:	687a      	ldr	r2, [r7, #4]
 8030f9a:	4413      	add	r3, r2
 8030f9c:	3304      	adds	r3, #4
 8030f9e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8030fa0:	697b      	ldr	r3, [r7, #20]
 8030fa2:	78db      	ldrb	r3, [r3, #3]
 8030fa4:	2b01      	cmp	r3, #1
 8030fa6:	d108      	bne.n	8030fba <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8030fa8:	697b      	ldr	r3, [r7, #20]
 8030faa:	2200      	movs	r2, #0
 8030fac:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8030fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8030fb0:	b2db      	uxtb	r3, r3
 8030fb2:	4619      	mov	r1, r3
 8030fb4:	6878      	ldr	r0, [r7, #4]
 8030fb6:	f00b fd43 	bl	803ca40 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8030fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8030fbc:	015a      	lsls	r2, r3, #5
 8030fbe:	69fb      	ldr	r3, [r7, #28]
 8030fc0:	4413      	add	r3, r2
 8030fc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8030fc6:	461a      	mov	r2, r3
 8030fc8:	2302      	movs	r3, #2
 8030fca:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8030fcc:	693b      	ldr	r3, [r7, #16]
 8030fce:	f003 0320 	and.w	r3, r3, #32
 8030fd2:	2b00      	cmp	r3, #0
 8030fd4:	d008      	beq.n	8030fe8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8030fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8030fd8:	015a      	lsls	r2, r3, #5
 8030fda:	69fb      	ldr	r3, [r7, #28]
 8030fdc:	4413      	add	r3, r2
 8030fde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8030fe2:	461a      	mov	r2, r3
 8030fe4:	2320      	movs	r3, #32
 8030fe6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8030fe8:	693b      	ldr	r3, [r7, #16]
 8030fea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8030fee:	2b00      	cmp	r3, #0
 8030ff0:	d009      	beq.n	8031006 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8030ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8030ff4:	015a      	lsls	r2, r3, #5
 8030ff6:	69fb      	ldr	r3, [r7, #28]
 8030ff8:	4413      	add	r3, r2
 8030ffa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8030ffe:	461a      	mov	r2, r3
 8031000:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8031004:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8031006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8031008:	3301      	adds	r3, #1
 803100a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 803100c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803100e:	085b      	lsrs	r3, r3, #1
 8031010:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8031012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8031014:	2b00      	cmp	r3, #0
 8031016:	f47f af62 	bne.w	8030ede <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 803101a:	687b      	ldr	r3, [r7, #4]
 803101c:	681b      	ldr	r3, [r3, #0]
 803101e:	4618      	mov	r0, r3
 8031020:	f009 f926 	bl	803a270 <USB_ReadInterrupts>
 8031024:	4603      	mov	r3, r0
 8031026:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 803102a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 803102e:	f040 80db 	bne.w	80311e8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8031032:	687b      	ldr	r3, [r7, #4]
 8031034:	681b      	ldr	r3, [r3, #0]
 8031036:	4618      	mov	r0, r3
 8031038:	f009 f947 	bl	803a2ca <USB_ReadDevAllInEpInterrupt>
 803103c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 803103e:	2300      	movs	r3, #0
 8031040:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8031042:	e0cd      	b.n	80311e0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8031044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8031046:	f003 0301 	and.w	r3, r3, #1
 803104a:	2b00      	cmp	r3, #0
 803104c:	f000 80c2 	beq.w	80311d4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8031050:	687b      	ldr	r3, [r7, #4]
 8031052:	681b      	ldr	r3, [r3, #0]
 8031054:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8031056:	b2d2      	uxtb	r2, r2
 8031058:	4611      	mov	r1, r2
 803105a:	4618      	mov	r0, r3
 803105c:	f009 f96d 	bl	803a33a <USB_ReadDevInEPInterrupt>
 8031060:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8031062:	693b      	ldr	r3, [r7, #16]
 8031064:	f003 0301 	and.w	r3, r3, #1
 8031068:	2b00      	cmp	r3, #0
 803106a:	d057      	beq.n	803111c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 803106c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803106e:	f003 030f 	and.w	r3, r3, #15
 8031072:	2201      	movs	r2, #1
 8031074:	fa02 f303 	lsl.w	r3, r2, r3
 8031078:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 803107a:	69fb      	ldr	r3, [r7, #28]
 803107c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8031080:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8031082:	68fb      	ldr	r3, [r7, #12]
 8031084:	43db      	mvns	r3, r3
 8031086:	69f9      	ldr	r1, [r7, #28]
 8031088:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 803108c:	4013      	ands	r3, r2
 803108e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8031090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8031092:	015a      	lsls	r2, r3, #5
 8031094:	69fb      	ldr	r3, [r7, #28]
 8031096:	4413      	add	r3, r2
 8031098:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803109c:	461a      	mov	r2, r3
 803109e:	2301      	movs	r3, #1
 80310a0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80310a2:	687b      	ldr	r3, [r7, #4]
 80310a4:	691b      	ldr	r3, [r3, #16]
 80310a6:	2b01      	cmp	r3, #1
 80310a8:	d132      	bne.n	8031110 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80310aa:	6879      	ldr	r1, [r7, #4]
 80310ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80310ae:	4613      	mov	r3, r2
 80310b0:	00db      	lsls	r3, r3, #3
 80310b2:	4413      	add	r3, r2
 80310b4:	009b      	lsls	r3, r3, #2
 80310b6:	440b      	add	r3, r1
 80310b8:	334c      	adds	r3, #76	; 0x4c
 80310ba:	6819      	ldr	r1, [r3, #0]
 80310bc:	6878      	ldr	r0, [r7, #4]
 80310be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80310c0:	4613      	mov	r3, r2
 80310c2:	00db      	lsls	r3, r3, #3
 80310c4:	4413      	add	r3, r2
 80310c6:	009b      	lsls	r3, r3, #2
 80310c8:	4403      	add	r3, r0
 80310ca:	3348      	adds	r3, #72	; 0x48
 80310cc:	681b      	ldr	r3, [r3, #0]
 80310ce:	4419      	add	r1, r3
 80310d0:	6878      	ldr	r0, [r7, #4]
 80310d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80310d4:	4613      	mov	r3, r2
 80310d6:	00db      	lsls	r3, r3, #3
 80310d8:	4413      	add	r3, r2
 80310da:	009b      	lsls	r3, r3, #2
 80310dc:	4403      	add	r3, r0
 80310de:	334c      	adds	r3, #76	; 0x4c
 80310e0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80310e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80310e4:	2b00      	cmp	r3, #0
 80310e6:	d113      	bne.n	8031110 <HAL_PCD_IRQHandler+0x3a2>
 80310e8:	6879      	ldr	r1, [r7, #4]
 80310ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80310ec:	4613      	mov	r3, r2
 80310ee:	00db      	lsls	r3, r3, #3
 80310f0:	4413      	add	r3, r2
 80310f2:	009b      	lsls	r3, r3, #2
 80310f4:	440b      	add	r3, r1
 80310f6:	3354      	adds	r3, #84	; 0x54
 80310f8:	681b      	ldr	r3, [r3, #0]
 80310fa:	2b00      	cmp	r3, #0
 80310fc:	d108      	bne.n	8031110 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80310fe:	687b      	ldr	r3, [r7, #4]
 8031100:	6818      	ldr	r0, [r3, #0]
 8031102:	687b      	ldr	r3, [r7, #4]
 8031104:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8031108:	461a      	mov	r2, r3
 803110a:	2101      	movs	r1, #1
 803110c:	f009 f976 	bl	803a3fc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8031110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8031112:	b2db      	uxtb	r3, r3
 8031114:	4619      	mov	r1, r3
 8031116:	6878      	ldr	r0, [r7, #4]
 8031118:	f00b fc0d 	bl	803c936 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 803111c:	693b      	ldr	r3, [r7, #16]
 803111e:	f003 0308 	and.w	r3, r3, #8
 8031122:	2b00      	cmp	r3, #0
 8031124:	d008      	beq.n	8031138 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8031126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8031128:	015a      	lsls	r2, r3, #5
 803112a:	69fb      	ldr	r3, [r7, #28]
 803112c:	4413      	add	r3, r2
 803112e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8031132:	461a      	mov	r2, r3
 8031134:	2308      	movs	r3, #8
 8031136:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8031138:	693b      	ldr	r3, [r7, #16]
 803113a:	f003 0310 	and.w	r3, r3, #16
 803113e:	2b00      	cmp	r3, #0
 8031140:	d008      	beq.n	8031154 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8031142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8031144:	015a      	lsls	r2, r3, #5
 8031146:	69fb      	ldr	r3, [r7, #28]
 8031148:	4413      	add	r3, r2
 803114a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803114e:	461a      	mov	r2, r3
 8031150:	2310      	movs	r3, #16
 8031152:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8031154:	693b      	ldr	r3, [r7, #16]
 8031156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 803115a:	2b00      	cmp	r3, #0
 803115c:	d008      	beq.n	8031170 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 803115e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8031160:	015a      	lsls	r2, r3, #5
 8031162:	69fb      	ldr	r3, [r7, #28]
 8031164:	4413      	add	r3, r2
 8031166:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803116a:	461a      	mov	r2, r3
 803116c:	2340      	movs	r3, #64	; 0x40
 803116e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8031170:	693b      	ldr	r3, [r7, #16]
 8031172:	f003 0302 	and.w	r3, r3, #2
 8031176:	2b00      	cmp	r3, #0
 8031178:	d023      	beq.n	80311c2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 803117a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 803117c:	6a38      	ldr	r0, [r7, #32]
 803117e:	f008 f849 	bl	8039214 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8031182:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8031184:	4613      	mov	r3, r2
 8031186:	00db      	lsls	r3, r3, #3
 8031188:	4413      	add	r3, r2
 803118a:	009b      	lsls	r3, r3, #2
 803118c:	3338      	adds	r3, #56	; 0x38
 803118e:	687a      	ldr	r2, [r7, #4]
 8031190:	4413      	add	r3, r2
 8031192:	3304      	adds	r3, #4
 8031194:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8031196:	697b      	ldr	r3, [r7, #20]
 8031198:	78db      	ldrb	r3, [r3, #3]
 803119a:	2b01      	cmp	r3, #1
 803119c:	d108      	bne.n	80311b0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 803119e:	697b      	ldr	r3, [r7, #20]
 80311a0:	2200      	movs	r2, #0
 80311a2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80311a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80311a6:	b2db      	uxtb	r3, r3
 80311a8:	4619      	mov	r1, r3
 80311aa:	6878      	ldr	r0, [r7, #4]
 80311ac:	f00b fc5a 	bl	803ca64 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80311b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80311b2:	015a      	lsls	r2, r3, #5
 80311b4:	69fb      	ldr	r3, [r7, #28]
 80311b6:	4413      	add	r3, r2
 80311b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80311bc:	461a      	mov	r2, r3
 80311be:	2302      	movs	r3, #2
 80311c0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80311c2:	693b      	ldr	r3, [r7, #16]
 80311c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80311c8:	2b00      	cmp	r3, #0
 80311ca:	d003      	beq.n	80311d4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80311cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80311ce:	6878      	ldr	r0, [r7, #4]
 80311d0:	f000 fd08 	bl	8031be4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80311d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80311d6:	3301      	adds	r3, #1
 80311d8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80311da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80311dc:	085b      	lsrs	r3, r3, #1
 80311de:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80311e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80311e2:	2b00      	cmp	r3, #0
 80311e4:	f47f af2e 	bne.w	8031044 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80311e8:	687b      	ldr	r3, [r7, #4]
 80311ea:	681b      	ldr	r3, [r3, #0]
 80311ec:	4618      	mov	r0, r3
 80311ee:	f009 f83f 	bl	803a270 <USB_ReadInterrupts>
 80311f2:	4603      	mov	r3, r0
 80311f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80311f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80311fc:	d122      	bne.n	8031244 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80311fe:	69fb      	ldr	r3, [r7, #28]
 8031200:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8031204:	685b      	ldr	r3, [r3, #4]
 8031206:	69fa      	ldr	r2, [r7, #28]
 8031208:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 803120c:	f023 0301 	bic.w	r3, r3, #1
 8031210:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8031212:	687b      	ldr	r3, [r7, #4]
 8031214:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8031218:	2b01      	cmp	r3, #1
 803121a:	d108      	bne.n	803122e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 803121c:	687b      	ldr	r3, [r7, #4]
 803121e:	2200      	movs	r2, #0
 8031220:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8031224:	2100      	movs	r1, #0
 8031226:	6878      	ldr	r0, [r7, #4]
 8031228:	f000 ff14 	bl	8032054 <HAL_PCDEx_LPM_Callback>
 803122c:	e002      	b.n	8031234 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 803122e:	6878      	ldr	r0, [r7, #4]
 8031230:	f00b fbf8 	bl	803ca24 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8031234:	687b      	ldr	r3, [r7, #4]
 8031236:	681b      	ldr	r3, [r3, #0]
 8031238:	695a      	ldr	r2, [r3, #20]
 803123a:	687b      	ldr	r3, [r7, #4]
 803123c:	681b      	ldr	r3, [r3, #0]
 803123e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8031242:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8031244:	687b      	ldr	r3, [r7, #4]
 8031246:	681b      	ldr	r3, [r3, #0]
 8031248:	4618      	mov	r0, r3
 803124a:	f009 f811 	bl	803a270 <USB_ReadInterrupts>
 803124e:	4603      	mov	r3, r0
 8031250:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8031254:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8031258:	d112      	bne.n	8031280 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 803125a:	69fb      	ldr	r3, [r7, #28]
 803125c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8031260:	689b      	ldr	r3, [r3, #8]
 8031262:	f003 0301 	and.w	r3, r3, #1
 8031266:	2b01      	cmp	r3, #1
 8031268:	d102      	bne.n	8031270 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 803126a:	6878      	ldr	r0, [r7, #4]
 803126c:	f00b fbb4 	bl	803c9d8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8031270:	687b      	ldr	r3, [r7, #4]
 8031272:	681b      	ldr	r3, [r3, #0]
 8031274:	695a      	ldr	r2, [r3, #20]
 8031276:	687b      	ldr	r3, [r7, #4]
 8031278:	681b      	ldr	r3, [r3, #0]
 803127a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 803127e:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8031280:	687b      	ldr	r3, [r7, #4]
 8031282:	681b      	ldr	r3, [r3, #0]
 8031284:	4618      	mov	r0, r3
 8031286:	f008 fff3 	bl	803a270 <USB_ReadInterrupts>
 803128a:	4603      	mov	r3, r0
 803128c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8031290:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8031294:	d121      	bne.n	80312da <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8031296:	687b      	ldr	r3, [r7, #4]
 8031298:	681b      	ldr	r3, [r3, #0]
 803129a:	695a      	ldr	r2, [r3, #20]
 803129c:	687b      	ldr	r3, [r7, #4]
 803129e:	681b      	ldr	r3, [r3, #0]
 80312a0:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80312a4:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80312a6:	687b      	ldr	r3, [r7, #4]
 80312a8:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80312ac:	2b00      	cmp	r3, #0
 80312ae:	d111      	bne.n	80312d4 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80312b0:	687b      	ldr	r3, [r7, #4]
 80312b2:	2201      	movs	r2, #1
 80312b4:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80312b8:	687b      	ldr	r3, [r7, #4]
 80312ba:	681b      	ldr	r3, [r3, #0]
 80312bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80312be:	089b      	lsrs	r3, r3, #2
 80312c0:	f003 020f 	and.w	r2, r3, #15
 80312c4:	687b      	ldr	r3, [r7, #4]
 80312c6:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80312ca:	2101      	movs	r1, #1
 80312cc:	6878      	ldr	r0, [r7, #4]
 80312ce:	f000 fec1 	bl	8032054 <HAL_PCDEx_LPM_Callback>
 80312d2:	e002      	b.n	80312da <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80312d4:	6878      	ldr	r0, [r7, #4]
 80312d6:	f00b fb7f 	bl	803c9d8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80312da:	687b      	ldr	r3, [r7, #4]
 80312dc:	681b      	ldr	r3, [r3, #0]
 80312de:	4618      	mov	r0, r3
 80312e0:	f008 ffc6 	bl	803a270 <USB_ReadInterrupts>
 80312e4:	4603      	mov	r3, r0
 80312e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80312ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80312ee:	f040 80b7 	bne.w	8031460 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80312f2:	69fb      	ldr	r3, [r7, #28]
 80312f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80312f8:	685b      	ldr	r3, [r3, #4]
 80312fa:	69fa      	ldr	r2, [r7, #28]
 80312fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8031300:	f023 0301 	bic.w	r3, r3, #1
 8031304:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8031306:	687b      	ldr	r3, [r7, #4]
 8031308:	681b      	ldr	r3, [r3, #0]
 803130a:	2110      	movs	r1, #16
 803130c:	4618      	mov	r0, r3
 803130e:	f007 ff81 	bl	8039214 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8031312:	2300      	movs	r3, #0
 8031314:	62fb      	str	r3, [r7, #44]	; 0x2c
 8031316:	e046      	b.n	80313a6 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8031318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 803131a:	015a      	lsls	r2, r3, #5
 803131c:	69fb      	ldr	r3, [r7, #28]
 803131e:	4413      	add	r3, r2
 8031320:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8031324:	461a      	mov	r2, r3
 8031326:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 803132a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 803132c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 803132e:	015a      	lsls	r2, r3, #5
 8031330:	69fb      	ldr	r3, [r7, #28]
 8031332:	4413      	add	r3, r2
 8031334:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8031338:	681b      	ldr	r3, [r3, #0]
 803133a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 803133c:	0151      	lsls	r1, r2, #5
 803133e:	69fa      	ldr	r2, [r7, #28]
 8031340:	440a      	add	r2, r1
 8031342:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8031346:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 803134a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 803134c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 803134e:	015a      	lsls	r2, r3, #5
 8031350:	69fb      	ldr	r3, [r7, #28]
 8031352:	4413      	add	r3, r2
 8031354:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8031358:	461a      	mov	r2, r3
 803135a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 803135e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8031360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8031362:	015a      	lsls	r2, r3, #5
 8031364:	69fb      	ldr	r3, [r7, #28]
 8031366:	4413      	add	r3, r2
 8031368:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803136c:	681b      	ldr	r3, [r3, #0]
 803136e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8031370:	0151      	lsls	r1, r2, #5
 8031372:	69fa      	ldr	r2, [r7, #28]
 8031374:	440a      	add	r2, r1
 8031376:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803137a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 803137e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8031380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8031382:	015a      	lsls	r2, r3, #5
 8031384:	69fb      	ldr	r3, [r7, #28]
 8031386:	4413      	add	r3, r2
 8031388:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803138c:	681b      	ldr	r3, [r3, #0]
 803138e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8031390:	0151      	lsls	r1, r2, #5
 8031392:	69fa      	ldr	r2, [r7, #28]
 8031394:	440a      	add	r2, r1
 8031396:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803139a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 803139e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80313a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80313a2:	3301      	adds	r3, #1
 80313a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80313a6:	687b      	ldr	r3, [r7, #4]
 80313a8:	685b      	ldr	r3, [r3, #4]
 80313aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80313ac:	429a      	cmp	r2, r3
 80313ae:	d3b3      	bcc.n	8031318 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80313b0:	69fb      	ldr	r3, [r7, #28]
 80313b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80313b6:	69db      	ldr	r3, [r3, #28]
 80313b8:	69fa      	ldr	r2, [r7, #28]
 80313ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80313be:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80313c2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80313c4:	687b      	ldr	r3, [r7, #4]
 80313c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80313c8:	2b00      	cmp	r3, #0
 80313ca:	d016      	beq.n	80313fa <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80313cc:	69fb      	ldr	r3, [r7, #28]
 80313ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80313d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80313d6:	69fa      	ldr	r2, [r7, #28]
 80313d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80313dc:	f043 030b 	orr.w	r3, r3, #11
 80313e0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80313e4:	69fb      	ldr	r3, [r7, #28]
 80313e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80313ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80313ec:	69fa      	ldr	r2, [r7, #28]
 80313ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80313f2:	f043 030b 	orr.w	r3, r3, #11
 80313f6:	6453      	str	r3, [r2, #68]	; 0x44
 80313f8:	e015      	b.n	8031426 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80313fa:	69fb      	ldr	r3, [r7, #28]
 80313fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8031400:	695a      	ldr	r2, [r3, #20]
 8031402:	69fb      	ldr	r3, [r7, #28]
 8031404:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8031408:	4619      	mov	r1, r3
 803140a:	f242 032b 	movw	r3, #8235	; 0x202b
 803140e:	4313      	orrs	r3, r2
 8031410:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8031412:	69fb      	ldr	r3, [r7, #28]
 8031414:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8031418:	691b      	ldr	r3, [r3, #16]
 803141a:	69fa      	ldr	r2, [r7, #28]
 803141c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8031420:	f043 030b 	orr.w	r3, r3, #11
 8031424:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8031426:	69fb      	ldr	r3, [r7, #28]
 8031428:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803142c:	681b      	ldr	r3, [r3, #0]
 803142e:	69fa      	ldr	r2, [r7, #28]
 8031430:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8031434:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8031438:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 803143a:	687b      	ldr	r3, [r7, #4]
 803143c:	6818      	ldr	r0, [r3, #0]
 803143e:	687b      	ldr	r3, [r7, #4]
 8031440:	691b      	ldr	r3, [r3, #16]
 8031442:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8031444:	687b      	ldr	r3, [r7, #4]
 8031446:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 803144a:	461a      	mov	r2, r3
 803144c:	f008 ffd6 	bl	803a3fc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8031450:	687b      	ldr	r3, [r7, #4]
 8031452:	681b      	ldr	r3, [r3, #0]
 8031454:	695a      	ldr	r2, [r3, #20]
 8031456:	687b      	ldr	r3, [r7, #4]
 8031458:	681b      	ldr	r3, [r3, #0]
 803145a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 803145e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8031460:	687b      	ldr	r3, [r7, #4]
 8031462:	681b      	ldr	r3, [r3, #0]
 8031464:	4618      	mov	r0, r3
 8031466:	f008 ff03 	bl	803a270 <USB_ReadInterrupts>
 803146a:	4603      	mov	r3, r0
 803146c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8031470:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8031474:	d124      	bne.n	80314c0 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8031476:	687b      	ldr	r3, [r7, #4]
 8031478:	681b      	ldr	r3, [r3, #0]
 803147a:	4618      	mov	r0, r3
 803147c:	f008 ff9a 	bl	803a3b4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8031480:	687b      	ldr	r3, [r7, #4]
 8031482:	681b      	ldr	r3, [r3, #0]
 8031484:	4618      	mov	r0, r3
 8031486:	f007 ff42 	bl	803930e <USB_GetDevSpeed>
 803148a:	4603      	mov	r3, r0
 803148c:	461a      	mov	r2, r3
 803148e:	687b      	ldr	r3, [r7, #4]
 8031490:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8031492:	687b      	ldr	r3, [r7, #4]
 8031494:	681c      	ldr	r4, [r3, #0]
 8031496:	f001 fd91 	bl	8032fbc <HAL_RCC_GetHCLKFreq>
 803149a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 803149c:	687b      	ldr	r3, [r7, #4]
 803149e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80314a0:	b2db      	uxtb	r3, r3
 80314a2:	461a      	mov	r2, r3
 80314a4:	4620      	mov	r0, r4
 80314a6:	f007 fc47 	bl	8038d38 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80314aa:	6878      	ldr	r0, [r7, #4]
 80314ac:	f00b fa6b 	bl	803c986 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80314b0:	687b      	ldr	r3, [r7, #4]
 80314b2:	681b      	ldr	r3, [r3, #0]
 80314b4:	695a      	ldr	r2, [r3, #20]
 80314b6:	687b      	ldr	r3, [r7, #4]
 80314b8:	681b      	ldr	r3, [r3, #0]
 80314ba:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80314be:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80314c0:	687b      	ldr	r3, [r7, #4]
 80314c2:	681b      	ldr	r3, [r3, #0]
 80314c4:	4618      	mov	r0, r3
 80314c6:	f008 fed3 	bl	803a270 <USB_ReadInterrupts>
 80314ca:	4603      	mov	r3, r0
 80314cc:	f003 0308 	and.w	r3, r3, #8
 80314d0:	2b08      	cmp	r3, #8
 80314d2:	d10a      	bne.n	80314ea <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80314d4:	6878      	ldr	r0, [r7, #4]
 80314d6:	f00b fa48 	bl	803c96a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80314da:	687b      	ldr	r3, [r7, #4]
 80314dc:	681b      	ldr	r3, [r3, #0]
 80314de:	695a      	ldr	r2, [r3, #20]
 80314e0:	687b      	ldr	r3, [r7, #4]
 80314e2:	681b      	ldr	r3, [r3, #0]
 80314e4:	f002 0208 	and.w	r2, r2, #8
 80314e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80314ea:	687b      	ldr	r3, [r7, #4]
 80314ec:	681b      	ldr	r3, [r3, #0]
 80314ee:	4618      	mov	r0, r3
 80314f0:	f008 febe 	bl	803a270 <USB_ReadInterrupts>
 80314f4:	4603      	mov	r3, r0
 80314f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80314fa:	2b80      	cmp	r3, #128	; 0x80
 80314fc:	d122      	bne.n	8031544 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80314fe:	6a3b      	ldr	r3, [r7, #32]
 8031500:	699b      	ldr	r3, [r3, #24]
 8031502:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8031506:	6a3b      	ldr	r3, [r7, #32]
 8031508:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 803150a:	2301      	movs	r3, #1
 803150c:	627b      	str	r3, [r7, #36]	; 0x24
 803150e:	e014      	b.n	803153a <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8031510:	6879      	ldr	r1, [r7, #4]
 8031512:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8031514:	4613      	mov	r3, r2
 8031516:	00db      	lsls	r3, r3, #3
 8031518:	4413      	add	r3, r2
 803151a:	009b      	lsls	r3, r3, #2
 803151c:	440b      	add	r3, r1
 803151e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8031522:	781b      	ldrb	r3, [r3, #0]
 8031524:	2b01      	cmp	r3, #1
 8031526:	d105      	bne.n	8031534 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8031528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803152a:	b2db      	uxtb	r3, r3
 803152c:	4619      	mov	r1, r3
 803152e:	6878      	ldr	r0, [r7, #4]
 8031530:	f000 fb27 	bl	8031b82 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8031534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8031536:	3301      	adds	r3, #1
 8031538:	627b      	str	r3, [r7, #36]	; 0x24
 803153a:	687b      	ldr	r3, [r7, #4]
 803153c:	685b      	ldr	r3, [r3, #4]
 803153e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8031540:	429a      	cmp	r2, r3
 8031542:	d3e5      	bcc.n	8031510 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8031544:	687b      	ldr	r3, [r7, #4]
 8031546:	681b      	ldr	r3, [r3, #0]
 8031548:	4618      	mov	r0, r3
 803154a:	f008 fe91 	bl	803a270 <USB_ReadInterrupts>
 803154e:	4603      	mov	r3, r0
 8031550:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8031554:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8031558:	d13b      	bne.n	80315d2 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 803155a:	2301      	movs	r3, #1
 803155c:	627b      	str	r3, [r7, #36]	; 0x24
 803155e:	e02b      	b.n	80315b8 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8031560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8031562:	015a      	lsls	r2, r3, #5
 8031564:	69fb      	ldr	r3, [r7, #28]
 8031566:	4413      	add	r3, r2
 8031568:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803156c:	681b      	ldr	r3, [r3, #0]
 803156e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8031570:	6879      	ldr	r1, [r7, #4]
 8031572:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8031574:	4613      	mov	r3, r2
 8031576:	00db      	lsls	r3, r3, #3
 8031578:	4413      	add	r3, r2
 803157a:	009b      	lsls	r3, r3, #2
 803157c:	440b      	add	r3, r1
 803157e:	3340      	adds	r3, #64	; 0x40
 8031580:	781b      	ldrb	r3, [r3, #0]
 8031582:	2b01      	cmp	r3, #1
 8031584:	d115      	bne.n	80315b2 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8031586:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8031588:	2b00      	cmp	r3, #0
 803158a:	da12      	bge.n	80315b2 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 803158c:	6879      	ldr	r1, [r7, #4]
 803158e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8031590:	4613      	mov	r3, r2
 8031592:	00db      	lsls	r3, r3, #3
 8031594:	4413      	add	r3, r2
 8031596:	009b      	lsls	r3, r3, #2
 8031598:	440b      	add	r3, r1
 803159a:	333f      	adds	r3, #63	; 0x3f
 803159c:	2201      	movs	r2, #1
 803159e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80315a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80315a2:	b2db      	uxtb	r3, r3
 80315a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80315a8:	b2db      	uxtb	r3, r3
 80315aa:	4619      	mov	r1, r3
 80315ac:	6878      	ldr	r0, [r7, #4]
 80315ae:	f000 fae8 	bl	8031b82 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80315b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80315b4:	3301      	adds	r3, #1
 80315b6:	627b      	str	r3, [r7, #36]	; 0x24
 80315b8:	687b      	ldr	r3, [r7, #4]
 80315ba:	685b      	ldr	r3, [r3, #4]
 80315bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80315be:	429a      	cmp	r2, r3
 80315c0:	d3ce      	bcc.n	8031560 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80315c2:	687b      	ldr	r3, [r7, #4]
 80315c4:	681b      	ldr	r3, [r3, #0]
 80315c6:	695a      	ldr	r2, [r3, #20]
 80315c8:	687b      	ldr	r3, [r7, #4]
 80315ca:	681b      	ldr	r3, [r3, #0]
 80315cc:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80315d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80315d2:	687b      	ldr	r3, [r7, #4]
 80315d4:	681b      	ldr	r3, [r3, #0]
 80315d6:	4618      	mov	r0, r3
 80315d8:	f008 fe4a 	bl	803a270 <USB_ReadInterrupts>
 80315dc:	4603      	mov	r3, r0
 80315de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80315e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80315e6:	d155      	bne.n	8031694 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80315e8:	2301      	movs	r3, #1
 80315ea:	627b      	str	r3, [r7, #36]	; 0x24
 80315ec:	e045      	b.n	803167a <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80315ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80315f0:	015a      	lsls	r2, r3, #5
 80315f2:	69fb      	ldr	r3, [r7, #28]
 80315f4:	4413      	add	r3, r2
 80315f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80315fa:	681b      	ldr	r3, [r3, #0]
 80315fc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80315fe:	6879      	ldr	r1, [r7, #4]
 8031600:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8031602:	4613      	mov	r3, r2
 8031604:	00db      	lsls	r3, r3, #3
 8031606:	4413      	add	r3, r2
 8031608:	009b      	lsls	r3, r3, #2
 803160a:	440b      	add	r3, r1
 803160c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8031610:	781b      	ldrb	r3, [r3, #0]
 8031612:	2b01      	cmp	r3, #1
 8031614:	d12e      	bne.n	8031674 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8031616:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8031618:	2b00      	cmp	r3, #0
 803161a:	da2b      	bge.n	8031674 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 803161c:	69bb      	ldr	r3, [r7, #24]
 803161e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8031622:	687b      	ldr	r3, [r7, #4]
 8031624:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8031628:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 803162c:	429a      	cmp	r2, r3
 803162e:	d121      	bne.n	8031674 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8031630:	6879      	ldr	r1, [r7, #4]
 8031632:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8031634:	4613      	mov	r3, r2
 8031636:	00db      	lsls	r3, r3, #3
 8031638:	4413      	add	r3, r2
 803163a:	009b      	lsls	r3, r3, #2
 803163c:	440b      	add	r3, r1
 803163e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8031642:	2201      	movs	r2, #1
 8031644:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8031646:	6a3b      	ldr	r3, [r7, #32]
 8031648:	699b      	ldr	r3, [r3, #24]
 803164a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 803164e:	6a3b      	ldr	r3, [r7, #32]
 8031650:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8031652:	6a3b      	ldr	r3, [r7, #32]
 8031654:	695b      	ldr	r3, [r3, #20]
 8031656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 803165a:	2b00      	cmp	r3, #0
 803165c:	d10a      	bne.n	8031674 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 803165e:	69fb      	ldr	r3, [r7, #28]
 8031660:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8031664:	685b      	ldr	r3, [r3, #4]
 8031666:	69fa      	ldr	r2, [r7, #28]
 8031668:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 803166c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8031670:	6053      	str	r3, [r2, #4]
            break;
 8031672:	e007      	b.n	8031684 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8031674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8031676:	3301      	adds	r3, #1
 8031678:	627b      	str	r3, [r7, #36]	; 0x24
 803167a:	687b      	ldr	r3, [r7, #4]
 803167c:	685b      	ldr	r3, [r3, #4]
 803167e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8031680:	429a      	cmp	r2, r3
 8031682:	d3b4      	bcc.n	80315ee <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8031684:	687b      	ldr	r3, [r7, #4]
 8031686:	681b      	ldr	r3, [r3, #0]
 8031688:	695a      	ldr	r2, [r3, #20]
 803168a:	687b      	ldr	r3, [r7, #4]
 803168c:	681b      	ldr	r3, [r3, #0]
 803168e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8031692:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8031694:	687b      	ldr	r3, [r7, #4]
 8031696:	681b      	ldr	r3, [r3, #0]
 8031698:	4618      	mov	r0, r3
 803169a:	f008 fde9 	bl	803a270 <USB_ReadInterrupts>
 803169e:	4603      	mov	r3, r0
 80316a0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80316a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80316a8:	d10a      	bne.n	80316c0 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80316aa:	6878      	ldr	r0, [r7, #4]
 80316ac:	f00b f9ec 	bl	803ca88 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80316b0:	687b      	ldr	r3, [r7, #4]
 80316b2:	681b      	ldr	r3, [r3, #0]
 80316b4:	695a      	ldr	r2, [r3, #20]
 80316b6:	687b      	ldr	r3, [r7, #4]
 80316b8:	681b      	ldr	r3, [r3, #0]
 80316ba:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80316be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80316c0:	687b      	ldr	r3, [r7, #4]
 80316c2:	681b      	ldr	r3, [r3, #0]
 80316c4:	4618      	mov	r0, r3
 80316c6:	f008 fdd3 	bl	803a270 <USB_ReadInterrupts>
 80316ca:	4603      	mov	r3, r0
 80316cc:	f003 0304 	and.w	r3, r3, #4
 80316d0:	2b04      	cmp	r3, #4
 80316d2:	d115      	bne.n	8031700 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80316d4:	687b      	ldr	r3, [r7, #4]
 80316d6:	681b      	ldr	r3, [r3, #0]
 80316d8:	685b      	ldr	r3, [r3, #4]
 80316da:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80316dc:	69bb      	ldr	r3, [r7, #24]
 80316de:	f003 0304 	and.w	r3, r3, #4
 80316e2:	2b00      	cmp	r3, #0
 80316e4:	d002      	beq.n	80316ec <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80316e6:	6878      	ldr	r0, [r7, #4]
 80316e8:	f00b f9dc 	bl	803caa4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80316ec:	687b      	ldr	r3, [r7, #4]
 80316ee:	681b      	ldr	r3, [r3, #0]
 80316f0:	6859      	ldr	r1, [r3, #4]
 80316f2:	687b      	ldr	r3, [r7, #4]
 80316f4:	681b      	ldr	r3, [r3, #0]
 80316f6:	69ba      	ldr	r2, [r7, #24]
 80316f8:	430a      	orrs	r2, r1
 80316fa:	605a      	str	r2, [r3, #4]
 80316fc:	e000      	b.n	8031700 <HAL_PCD_IRQHandler+0x992>
      return;
 80316fe:	bf00      	nop
    }
  }
}
 8031700:	3734      	adds	r7, #52	; 0x34
 8031702:	46bd      	mov	sp, r7
 8031704:	bd90      	pop	{r4, r7, pc}

08031706 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8031706:	b580      	push	{r7, lr}
 8031708:	b082      	sub	sp, #8
 803170a:	af00      	add	r7, sp, #0
 803170c:	6078      	str	r0, [r7, #4]
 803170e:	460b      	mov	r3, r1
 8031710:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8031712:	687b      	ldr	r3, [r7, #4]
 8031714:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8031718:	2b01      	cmp	r3, #1
 803171a:	d101      	bne.n	8031720 <HAL_PCD_SetAddress+0x1a>
 803171c:	2302      	movs	r3, #2
 803171e:	e013      	b.n	8031748 <HAL_PCD_SetAddress+0x42>
 8031720:	687b      	ldr	r3, [r7, #4]
 8031722:	2201      	movs	r2, #1
 8031724:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8031728:	687b      	ldr	r3, [r7, #4]
 803172a:	78fa      	ldrb	r2, [r7, #3]
 803172c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8031730:	687b      	ldr	r3, [r7, #4]
 8031732:	681b      	ldr	r3, [r3, #0]
 8031734:	78fa      	ldrb	r2, [r7, #3]
 8031736:	4611      	mov	r1, r2
 8031738:	4618      	mov	r0, r3
 803173a:	f008 fd31 	bl	803a1a0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 803173e:	687b      	ldr	r3, [r7, #4]
 8031740:	2200      	movs	r2, #0
 8031742:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8031746:	2300      	movs	r3, #0
}
 8031748:	4618      	mov	r0, r3
 803174a:	3708      	adds	r7, #8
 803174c:	46bd      	mov	sp, r7
 803174e:	bd80      	pop	{r7, pc}

08031750 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8031750:	b580      	push	{r7, lr}
 8031752:	b084      	sub	sp, #16
 8031754:	af00      	add	r7, sp, #0
 8031756:	6078      	str	r0, [r7, #4]
 8031758:	4608      	mov	r0, r1
 803175a:	4611      	mov	r1, r2
 803175c:	461a      	mov	r2, r3
 803175e:	4603      	mov	r3, r0
 8031760:	70fb      	strb	r3, [r7, #3]
 8031762:	460b      	mov	r3, r1
 8031764:	803b      	strh	r3, [r7, #0]
 8031766:	4613      	mov	r3, r2
 8031768:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 803176a:	2300      	movs	r3, #0
 803176c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 803176e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8031772:	2b00      	cmp	r3, #0
 8031774:	da0f      	bge.n	8031796 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8031776:	78fb      	ldrb	r3, [r7, #3]
 8031778:	f003 020f 	and.w	r2, r3, #15
 803177c:	4613      	mov	r3, r2
 803177e:	00db      	lsls	r3, r3, #3
 8031780:	4413      	add	r3, r2
 8031782:	009b      	lsls	r3, r3, #2
 8031784:	3338      	adds	r3, #56	; 0x38
 8031786:	687a      	ldr	r2, [r7, #4]
 8031788:	4413      	add	r3, r2
 803178a:	3304      	adds	r3, #4
 803178c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 803178e:	68fb      	ldr	r3, [r7, #12]
 8031790:	2201      	movs	r2, #1
 8031792:	705a      	strb	r2, [r3, #1]
 8031794:	e00f      	b.n	80317b6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8031796:	78fb      	ldrb	r3, [r7, #3]
 8031798:	f003 020f 	and.w	r2, r3, #15
 803179c:	4613      	mov	r3, r2
 803179e:	00db      	lsls	r3, r3, #3
 80317a0:	4413      	add	r3, r2
 80317a2:	009b      	lsls	r3, r3, #2
 80317a4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80317a8:	687a      	ldr	r2, [r7, #4]
 80317aa:	4413      	add	r3, r2
 80317ac:	3304      	adds	r3, #4
 80317ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80317b0:	68fb      	ldr	r3, [r7, #12]
 80317b2:	2200      	movs	r2, #0
 80317b4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80317b6:	78fb      	ldrb	r3, [r7, #3]
 80317b8:	f003 030f 	and.w	r3, r3, #15
 80317bc:	b2da      	uxtb	r2, r3
 80317be:	68fb      	ldr	r3, [r7, #12]
 80317c0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80317c2:	883a      	ldrh	r2, [r7, #0]
 80317c4:	68fb      	ldr	r3, [r7, #12]
 80317c6:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80317c8:	68fb      	ldr	r3, [r7, #12]
 80317ca:	78ba      	ldrb	r2, [r7, #2]
 80317cc:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80317ce:	68fb      	ldr	r3, [r7, #12]
 80317d0:	785b      	ldrb	r3, [r3, #1]
 80317d2:	2b00      	cmp	r3, #0
 80317d4:	d004      	beq.n	80317e0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80317d6:	68fb      	ldr	r3, [r7, #12]
 80317d8:	781b      	ldrb	r3, [r3, #0]
 80317da:	b29a      	uxth	r2, r3
 80317dc:	68fb      	ldr	r3, [r7, #12]
 80317de:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80317e0:	78bb      	ldrb	r3, [r7, #2]
 80317e2:	2b02      	cmp	r3, #2
 80317e4:	d102      	bne.n	80317ec <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80317e6:	68fb      	ldr	r3, [r7, #12]
 80317e8:	2200      	movs	r2, #0
 80317ea:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80317ec:	687b      	ldr	r3, [r7, #4]
 80317ee:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80317f2:	2b01      	cmp	r3, #1
 80317f4:	d101      	bne.n	80317fa <HAL_PCD_EP_Open+0xaa>
 80317f6:	2302      	movs	r3, #2
 80317f8:	e00e      	b.n	8031818 <HAL_PCD_EP_Open+0xc8>
 80317fa:	687b      	ldr	r3, [r7, #4]
 80317fc:	2201      	movs	r2, #1
 80317fe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8031802:	687b      	ldr	r3, [r7, #4]
 8031804:	681b      	ldr	r3, [r3, #0]
 8031806:	68f9      	ldr	r1, [r7, #12]
 8031808:	4618      	mov	r0, r3
 803180a:	f007 fda5 	bl	8039358 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 803180e:	687b      	ldr	r3, [r7, #4]
 8031810:	2200      	movs	r2, #0
 8031812:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8031816:	7afb      	ldrb	r3, [r7, #11]
}
 8031818:	4618      	mov	r0, r3
 803181a:	3710      	adds	r7, #16
 803181c:	46bd      	mov	sp, r7
 803181e:	bd80      	pop	{r7, pc}

08031820 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8031820:	b580      	push	{r7, lr}
 8031822:	b084      	sub	sp, #16
 8031824:	af00      	add	r7, sp, #0
 8031826:	6078      	str	r0, [r7, #4]
 8031828:	460b      	mov	r3, r1
 803182a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 803182c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8031830:	2b00      	cmp	r3, #0
 8031832:	da0f      	bge.n	8031854 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8031834:	78fb      	ldrb	r3, [r7, #3]
 8031836:	f003 020f 	and.w	r2, r3, #15
 803183a:	4613      	mov	r3, r2
 803183c:	00db      	lsls	r3, r3, #3
 803183e:	4413      	add	r3, r2
 8031840:	009b      	lsls	r3, r3, #2
 8031842:	3338      	adds	r3, #56	; 0x38
 8031844:	687a      	ldr	r2, [r7, #4]
 8031846:	4413      	add	r3, r2
 8031848:	3304      	adds	r3, #4
 803184a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 803184c:	68fb      	ldr	r3, [r7, #12]
 803184e:	2201      	movs	r2, #1
 8031850:	705a      	strb	r2, [r3, #1]
 8031852:	e00f      	b.n	8031874 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8031854:	78fb      	ldrb	r3, [r7, #3]
 8031856:	f003 020f 	and.w	r2, r3, #15
 803185a:	4613      	mov	r3, r2
 803185c:	00db      	lsls	r3, r3, #3
 803185e:	4413      	add	r3, r2
 8031860:	009b      	lsls	r3, r3, #2
 8031862:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8031866:	687a      	ldr	r2, [r7, #4]
 8031868:	4413      	add	r3, r2
 803186a:	3304      	adds	r3, #4
 803186c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 803186e:	68fb      	ldr	r3, [r7, #12]
 8031870:	2200      	movs	r2, #0
 8031872:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8031874:	78fb      	ldrb	r3, [r7, #3]
 8031876:	f003 030f 	and.w	r3, r3, #15
 803187a:	b2da      	uxtb	r2, r3
 803187c:	68fb      	ldr	r3, [r7, #12]
 803187e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8031880:	687b      	ldr	r3, [r7, #4]
 8031882:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8031886:	2b01      	cmp	r3, #1
 8031888:	d101      	bne.n	803188e <HAL_PCD_EP_Close+0x6e>
 803188a:	2302      	movs	r3, #2
 803188c:	e00e      	b.n	80318ac <HAL_PCD_EP_Close+0x8c>
 803188e:	687b      	ldr	r3, [r7, #4]
 8031890:	2201      	movs	r2, #1
 8031892:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8031896:	687b      	ldr	r3, [r7, #4]
 8031898:	681b      	ldr	r3, [r3, #0]
 803189a:	68f9      	ldr	r1, [r7, #12]
 803189c:	4618      	mov	r0, r3
 803189e:	f007 fde3 	bl	8039468 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80318a2:	687b      	ldr	r3, [r7, #4]
 80318a4:	2200      	movs	r2, #0
 80318a6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80318aa:	2300      	movs	r3, #0
}
 80318ac:	4618      	mov	r0, r3
 80318ae:	3710      	adds	r7, #16
 80318b0:	46bd      	mov	sp, r7
 80318b2:	bd80      	pop	{r7, pc}

080318b4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80318b4:	b580      	push	{r7, lr}
 80318b6:	b086      	sub	sp, #24
 80318b8:	af00      	add	r7, sp, #0
 80318ba:	60f8      	str	r0, [r7, #12]
 80318bc:	607a      	str	r2, [r7, #4]
 80318be:	603b      	str	r3, [r7, #0]
 80318c0:	460b      	mov	r3, r1
 80318c2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80318c4:	7afb      	ldrb	r3, [r7, #11]
 80318c6:	f003 020f 	and.w	r2, r3, #15
 80318ca:	4613      	mov	r3, r2
 80318cc:	00db      	lsls	r3, r3, #3
 80318ce:	4413      	add	r3, r2
 80318d0:	009b      	lsls	r3, r3, #2
 80318d2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80318d6:	68fa      	ldr	r2, [r7, #12]
 80318d8:	4413      	add	r3, r2
 80318da:	3304      	adds	r3, #4
 80318dc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80318de:	697b      	ldr	r3, [r7, #20]
 80318e0:	687a      	ldr	r2, [r7, #4]
 80318e2:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80318e4:	697b      	ldr	r3, [r7, #20]
 80318e6:	683a      	ldr	r2, [r7, #0]
 80318e8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80318ea:	697b      	ldr	r3, [r7, #20]
 80318ec:	2200      	movs	r2, #0
 80318ee:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80318f0:	697b      	ldr	r3, [r7, #20]
 80318f2:	2200      	movs	r2, #0
 80318f4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80318f6:	7afb      	ldrb	r3, [r7, #11]
 80318f8:	f003 030f 	and.w	r3, r3, #15
 80318fc:	b2da      	uxtb	r2, r3
 80318fe:	697b      	ldr	r3, [r7, #20]
 8031900:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8031902:	68fb      	ldr	r3, [r7, #12]
 8031904:	691b      	ldr	r3, [r3, #16]
 8031906:	2b01      	cmp	r3, #1
 8031908:	d102      	bne.n	8031910 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 803190a:	687a      	ldr	r2, [r7, #4]
 803190c:	697b      	ldr	r3, [r7, #20]
 803190e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8031910:	7afb      	ldrb	r3, [r7, #11]
 8031912:	f003 030f 	and.w	r3, r3, #15
 8031916:	2b00      	cmp	r3, #0
 8031918:	d109      	bne.n	803192e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 803191a:	68fb      	ldr	r3, [r7, #12]
 803191c:	6818      	ldr	r0, [r3, #0]
 803191e:	68fb      	ldr	r3, [r7, #12]
 8031920:	691b      	ldr	r3, [r3, #16]
 8031922:	b2db      	uxtb	r3, r3
 8031924:	461a      	mov	r2, r3
 8031926:	6979      	ldr	r1, [r7, #20]
 8031928:	f008 f8ca 	bl	8039ac0 <USB_EP0StartXfer>
 803192c:	e008      	b.n	8031940 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 803192e:	68fb      	ldr	r3, [r7, #12]
 8031930:	6818      	ldr	r0, [r3, #0]
 8031932:	68fb      	ldr	r3, [r7, #12]
 8031934:	691b      	ldr	r3, [r3, #16]
 8031936:	b2db      	uxtb	r3, r3
 8031938:	461a      	mov	r2, r3
 803193a:	6979      	ldr	r1, [r7, #20]
 803193c:	f007 fe70 	bl	8039620 <USB_EPStartXfer>
  }

  return HAL_OK;
 8031940:	2300      	movs	r3, #0
}
 8031942:	4618      	mov	r0, r3
 8031944:	3718      	adds	r7, #24
 8031946:	46bd      	mov	sp, r7
 8031948:	bd80      	pop	{r7, pc}

0803194a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 803194a:	b480      	push	{r7}
 803194c:	b083      	sub	sp, #12
 803194e:	af00      	add	r7, sp, #0
 8031950:	6078      	str	r0, [r7, #4]
 8031952:	460b      	mov	r3, r1
 8031954:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8031956:	78fb      	ldrb	r3, [r7, #3]
 8031958:	f003 020f 	and.w	r2, r3, #15
 803195c:	6879      	ldr	r1, [r7, #4]
 803195e:	4613      	mov	r3, r2
 8031960:	00db      	lsls	r3, r3, #3
 8031962:	4413      	add	r3, r2
 8031964:	009b      	lsls	r3, r3, #2
 8031966:	440b      	add	r3, r1
 8031968:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 803196c:	681b      	ldr	r3, [r3, #0]
}
 803196e:	4618      	mov	r0, r3
 8031970:	370c      	adds	r7, #12
 8031972:	46bd      	mov	sp, r7
 8031974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031978:	4770      	bx	lr

0803197a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 803197a:	b580      	push	{r7, lr}
 803197c:	b086      	sub	sp, #24
 803197e:	af00      	add	r7, sp, #0
 8031980:	60f8      	str	r0, [r7, #12]
 8031982:	607a      	str	r2, [r7, #4]
 8031984:	603b      	str	r3, [r7, #0]
 8031986:	460b      	mov	r3, r1
 8031988:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 803198a:	7afb      	ldrb	r3, [r7, #11]
 803198c:	f003 020f 	and.w	r2, r3, #15
 8031990:	4613      	mov	r3, r2
 8031992:	00db      	lsls	r3, r3, #3
 8031994:	4413      	add	r3, r2
 8031996:	009b      	lsls	r3, r3, #2
 8031998:	3338      	adds	r3, #56	; 0x38
 803199a:	68fa      	ldr	r2, [r7, #12]
 803199c:	4413      	add	r3, r2
 803199e:	3304      	adds	r3, #4
 80319a0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80319a2:	697b      	ldr	r3, [r7, #20]
 80319a4:	687a      	ldr	r2, [r7, #4]
 80319a6:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80319a8:	697b      	ldr	r3, [r7, #20]
 80319aa:	683a      	ldr	r2, [r7, #0]
 80319ac:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80319ae:	697b      	ldr	r3, [r7, #20]
 80319b0:	2200      	movs	r2, #0
 80319b2:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80319b4:	697b      	ldr	r3, [r7, #20]
 80319b6:	2201      	movs	r2, #1
 80319b8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80319ba:	7afb      	ldrb	r3, [r7, #11]
 80319bc:	f003 030f 	and.w	r3, r3, #15
 80319c0:	b2da      	uxtb	r2, r3
 80319c2:	697b      	ldr	r3, [r7, #20]
 80319c4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80319c6:	68fb      	ldr	r3, [r7, #12]
 80319c8:	691b      	ldr	r3, [r3, #16]
 80319ca:	2b01      	cmp	r3, #1
 80319cc:	d102      	bne.n	80319d4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80319ce:	687a      	ldr	r2, [r7, #4]
 80319d0:	697b      	ldr	r3, [r7, #20]
 80319d2:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80319d4:	7afb      	ldrb	r3, [r7, #11]
 80319d6:	f003 030f 	and.w	r3, r3, #15
 80319da:	2b00      	cmp	r3, #0
 80319dc:	d109      	bne.n	80319f2 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80319de:	68fb      	ldr	r3, [r7, #12]
 80319e0:	6818      	ldr	r0, [r3, #0]
 80319e2:	68fb      	ldr	r3, [r7, #12]
 80319e4:	691b      	ldr	r3, [r3, #16]
 80319e6:	b2db      	uxtb	r3, r3
 80319e8:	461a      	mov	r2, r3
 80319ea:	6979      	ldr	r1, [r7, #20]
 80319ec:	f008 f868 	bl	8039ac0 <USB_EP0StartXfer>
 80319f0:	e008      	b.n	8031a04 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80319f2:	68fb      	ldr	r3, [r7, #12]
 80319f4:	6818      	ldr	r0, [r3, #0]
 80319f6:	68fb      	ldr	r3, [r7, #12]
 80319f8:	691b      	ldr	r3, [r3, #16]
 80319fa:	b2db      	uxtb	r3, r3
 80319fc:	461a      	mov	r2, r3
 80319fe:	6979      	ldr	r1, [r7, #20]
 8031a00:	f007 fe0e 	bl	8039620 <USB_EPStartXfer>
  }

  return HAL_OK;
 8031a04:	2300      	movs	r3, #0
}
 8031a06:	4618      	mov	r0, r3
 8031a08:	3718      	adds	r7, #24
 8031a0a:	46bd      	mov	sp, r7
 8031a0c:	bd80      	pop	{r7, pc}

08031a0e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8031a0e:	b580      	push	{r7, lr}
 8031a10:	b084      	sub	sp, #16
 8031a12:	af00      	add	r7, sp, #0
 8031a14:	6078      	str	r0, [r7, #4]
 8031a16:	460b      	mov	r3, r1
 8031a18:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8031a1a:	78fb      	ldrb	r3, [r7, #3]
 8031a1c:	f003 020f 	and.w	r2, r3, #15
 8031a20:	687b      	ldr	r3, [r7, #4]
 8031a22:	685b      	ldr	r3, [r3, #4]
 8031a24:	429a      	cmp	r2, r3
 8031a26:	d901      	bls.n	8031a2c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8031a28:	2301      	movs	r3, #1
 8031a2a:	e050      	b.n	8031ace <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8031a2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8031a30:	2b00      	cmp	r3, #0
 8031a32:	da0f      	bge.n	8031a54 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8031a34:	78fb      	ldrb	r3, [r7, #3]
 8031a36:	f003 020f 	and.w	r2, r3, #15
 8031a3a:	4613      	mov	r3, r2
 8031a3c:	00db      	lsls	r3, r3, #3
 8031a3e:	4413      	add	r3, r2
 8031a40:	009b      	lsls	r3, r3, #2
 8031a42:	3338      	adds	r3, #56	; 0x38
 8031a44:	687a      	ldr	r2, [r7, #4]
 8031a46:	4413      	add	r3, r2
 8031a48:	3304      	adds	r3, #4
 8031a4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8031a4c:	68fb      	ldr	r3, [r7, #12]
 8031a4e:	2201      	movs	r2, #1
 8031a50:	705a      	strb	r2, [r3, #1]
 8031a52:	e00d      	b.n	8031a70 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8031a54:	78fa      	ldrb	r2, [r7, #3]
 8031a56:	4613      	mov	r3, r2
 8031a58:	00db      	lsls	r3, r3, #3
 8031a5a:	4413      	add	r3, r2
 8031a5c:	009b      	lsls	r3, r3, #2
 8031a5e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8031a62:	687a      	ldr	r2, [r7, #4]
 8031a64:	4413      	add	r3, r2
 8031a66:	3304      	adds	r3, #4
 8031a68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8031a6a:	68fb      	ldr	r3, [r7, #12]
 8031a6c:	2200      	movs	r2, #0
 8031a6e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8031a70:	68fb      	ldr	r3, [r7, #12]
 8031a72:	2201      	movs	r2, #1
 8031a74:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8031a76:	78fb      	ldrb	r3, [r7, #3]
 8031a78:	f003 030f 	and.w	r3, r3, #15
 8031a7c:	b2da      	uxtb	r2, r3
 8031a7e:	68fb      	ldr	r3, [r7, #12]
 8031a80:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8031a82:	687b      	ldr	r3, [r7, #4]
 8031a84:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8031a88:	2b01      	cmp	r3, #1
 8031a8a:	d101      	bne.n	8031a90 <HAL_PCD_EP_SetStall+0x82>
 8031a8c:	2302      	movs	r3, #2
 8031a8e:	e01e      	b.n	8031ace <HAL_PCD_EP_SetStall+0xc0>
 8031a90:	687b      	ldr	r3, [r7, #4]
 8031a92:	2201      	movs	r2, #1
 8031a94:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8031a98:	687b      	ldr	r3, [r7, #4]
 8031a9a:	681b      	ldr	r3, [r3, #0]
 8031a9c:	68f9      	ldr	r1, [r7, #12]
 8031a9e:	4618      	mov	r0, r3
 8031aa0:	f008 faaa 	bl	8039ff8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8031aa4:	78fb      	ldrb	r3, [r7, #3]
 8031aa6:	f003 030f 	and.w	r3, r3, #15
 8031aaa:	2b00      	cmp	r3, #0
 8031aac:	d10a      	bne.n	8031ac4 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8031aae:	687b      	ldr	r3, [r7, #4]
 8031ab0:	6818      	ldr	r0, [r3, #0]
 8031ab2:	687b      	ldr	r3, [r7, #4]
 8031ab4:	691b      	ldr	r3, [r3, #16]
 8031ab6:	b2d9      	uxtb	r1, r3
 8031ab8:	687b      	ldr	r3, [r7, #4]
 8031aba:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8031abe:	461a      	mov	r2, r3
 8031ac0:	f008 fc9c 	bl	803a3fc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8031ac4:	687b      	ldr	r3, [r7, #4]
 8031ac6:	2200      	movs	r2, #0
 8031ac8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8031acc:	2300      	movs	r3, #0
}
 8031ace:	4618      	mov	r0, r3
 8031ad0:	3710      	adds	r7, #16
 8031ad2:	46bd      	mov	sp, r7
 8031ad4:	bd80      	pop	{r7, pc}

08031ad6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8031ad6:	b580      	push	{r7, lr}
 8031ad8:	b084      	sub	sp, #16
 8031ada:	af00      	add	r7, sp, #0
 8031adc:	6078      	str	r0, [r7, #4]
 8031ade:	460b      	mov	r3, r1
 8031ae0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8031ae2:	78fb      	ldrb	r3, [r7, #3]
 8031ae4:	f003 020f 	and.w	r2, r3, #15
 8031ae8:	687b      	ldr	r3, [r7, #4]
 8031aea:	685b      	ldr	r3, [r3, #4]
 8031aec:	429a      	cmp	r2, r3
 8031aee:	d901      	bls.n	8031af4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8031af0:	2301      	movs	r3, #1
 8031af2:	e042      	b.n	8031b7a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8031af4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8031af8:	2b00      	cmp	r3, #0
 8031afa:	da0f      	bge.n	8031b1c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8031afc:	78fb      	ldrb	r3, [r7, #3]
 8031afe:	f003 020f 	and.w	r2, r3, #15
 8031b02:	4613      	mov	r3, r2
 8031b04:	00db      	lsls	r3, r3, #3
 8031b06:	4413      	add	r3, r2
 8031b08:	009b      	lsls	r3, r3, #2
 8031b0a:	3338      	adds	r3, #56	; 0x38
 8031b0c:	687a      	ldr	r2, [r7, #4]
 8031b0e:	4413      	add	r3, r2
 8031b10:	3304      	adds	r3, #4
 8031b12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8031b14:	68fb      	ldr	r3, [r7, #12]
 8031b16:	2201      	movs	r2, #1
 8031b18:	705a      	strb	r2, [r3, #1]
 8031b1a:	e00f      	b.n	8031b3c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8031b1c:	78fb      	ldrb	r3, [r7, #3]
 8031b1e:	f003 020f 	and.w	r2, r3, #15
 8031b22:	4613      	mov	r3, r2
 8031b24:	00db      	lsls	r3, r3, #3
 8031b26:	4413      	add	r3, r2
 8031b28:	009b      	lsls	r3, r3, #2
 8031b2a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8031b2e:	687a      	ldr	r2, [r7, #4]
 8031b30:	4413      	add	r3, r2
 8031b32:	3304      	adds	r3, #4
 8031b34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8031b36:	68fb      	ldr	r3, [r7, #12]
 8031b38:	2200      	movs	r2, #0
 8031b3a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8031b3c:	68fb      	ldr	r3, [r7, #12]
 8031b3e:	2200      	movs	r2, #0
 8031b40:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8031b42:	78fb      	ldrb	r3, [r7, #3]
 8031b44:	f003 030f 	and.w	r3, r3, #15
 8031b48:	b2da      	uxtb	r2, r3
 8031b4a:	68fb      	ldr	r3, [r7, #12]
 8031b4c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8031b4e:	687b      	ldr	r3, [r7, #4]
 8031b50:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8031b54:	2b01      	cmp	r3, #1
 8031b56:	d101      	bne.n	8031b5c <HAL_PCD_EP_ClrStall+0x86>
 8031b58:	2302      	movs	r3, #2
 8031b5a:	e00e      	b.n	8031b7a <HAL_PCD_EP_ClrStall+0xa4>
 8031b5c:	687b      	ldr	r3, [r7, #4]
 8031b5e:	2201      	movs	r2, #1
 8031b60:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8031b64:	687b      	ldr	r3, [r7, #4]
 8031b66:	681b      	ldr	r3, [r3, #0]
 8031b68:	68f9      	ldr	r1, [r7, #12]
 8031b6a:	4618      	mov	r0, r3
 8031b6c:	f008 fab2 	bl	803a0d4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8031b70:	687b      	ldr	r3, [r7, #4]
 8031b72:	2200      	movs	r2, #0
 8031b74:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8031b78:	2300      	movs	r3, #0
}
 8031b7a:	4618      	mov	r0, r3
 8031b7c:	3710      	adds	r7, #16
 8031b7e:	46bd      	mov	sp, r7
 8031b80:	bd80      	pop	{r7, pc}

08031b82 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8031b82:	b580      	push	{r7, lr}
 8031b84:	b084      	sub	sp, #16
 8031b86:	af00      	add	r7, sp, #0
 8031b88:	6078      	str	r0, [r7, #4]
 8031b8a:	460b      	mov	r3, r1
 8031b8c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8031b8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8031b92:	2b00      	cmp	r3, #0
 8031b94:	da0c      	bge.n	8031bb0 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8031b96:	78fb      	ldrb	r3, [r7, #3]
 8031b98:	f003 020f 	and.w	r2, r3, #15
 8031b9c:	4613      	mov	r3, r2
 8031b9e:	00db      	lsls	r3, r3, #3
 8031ba0:	4413      	add	r3, r2
 8031ba2:	009b      	lsls	r3, r3, #2
 8031ba4:	3338      	adds	r3, #56	; 0x38
 8031ba6:	687a      	ldr	r2, [r7, #4]
 8031ba8:	4413      	add	r3, r2
 8031baa:	3304      	adds	r3, #4
 8031bac:	60fb      	str	r3, [r7, #12]
 8031bae:	e00c      	b.n	8031bca <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8031bb0:	78fb      	ldrb	r3, [r7, #3]
 8031bb2:	f003 020f 	and.w	r2, r3, #15
 8031bb6:	4613      	mov	r3, r2
 8031bb8:	00db      	lsls	r3, r3, #3
 8031bba:	4413      	add	r3, r2
 8031bbc:	009b      	lsls	r3, r3, #2
 8031bbe:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8031bc2:	687a      	ldr	r2, [r7, #4]
 8031bc4:	4413      	add	r3, r2
 8031bc6:	3304      	adds	r3, #4
 8031bc8:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8031bca:	687b      	ldr	r3, [r7, #4]
 8031bcc:	681b      	ldr	r3, [r3, #0]
 8031bce:	68f9      	ldr	r1, [r7, #12]
 8031bd0:	4618      	mov	r0, r3
 8031bd2:	f008 f8d1 	bl	8039d78 <USB_EPStopXfer>
 8031bd6:	4603      	mov	r3, r0
 8031bd8:	72fb      	strb	r3, [r7, #11]

  return ret;
 8031bda:	7afb      	ldrb	r3, [r7, #11]
}
 8031bdc:	4618      	mov	r0, r3
 8031bde:	3710      	adds	r7, #16
 8031be0:	46bd      	mov	sp, r7
 8031be2:	bd80      	pop	{r7, pc}

08031be4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8031be4:	b580      	push	{r7, lr}
 8031be6:	b08a      	sub	sp, #40	; 0x28
 8031be8:	af02      	add	r7, sp, #8
 8031bea:	6078      	str	r0, [r7, #4]
 8031bec:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8031bee:	687b      	ldr	r3, [r7, #4]
 8031bf0:	681b      	ldr	r3, [r3, #0]
 8031bf2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8031bf4:	697b      	ldr	r3, [r7, #20]
 8031bf6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8031bf8:	683a      	ldr	r2, [r7, #0]
 8031bfa:	4613      	mov	r3, r2
 8031bfc:	00db      	lsls	r3, r3, #3
 8031bfe:	4413      	add	r3, r2
 8031c00:	009b      	lsls	r3, r3, #2
 8031c02:	3338      	adds	r3, #56	; 0x38
 8031c04:	687a      	ldr	r2, [r7, #4]
 8031c06:	4413      	add	r3, r2
 8031c08:	3304      	adds	r3, #4
 8031c0a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8031c0c:	68fb      	ldr	r3, [r7, #12]
 8031c0e:	6a1a      	ldr	r2, [r3, #32]
 8031c10:	68fb      	ldr	r3, [r7, #12]
 8031c12:	699b      	ldr	r3, [r3, #24]
 8031c14:	429a      	cmp	r2, r3
 8031c16:	d901      	bls.n	8031c1c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8031c18:	2301      	movs	r3, #1
 8031c1a:	e06c      	b.n	8031cf6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8031c1c:	68fb      	ldr	r3, [r7, #12]
 8031c1e:	699a      	ldr	r2, [r3, #24]
 8031c20:	68fb      	ldr	r3, [r7, #12]
 8031c22:	6a1b      	ldr	r3, [r3, #32]
 8031c24:	1ad3      	subs	r3, r2, r3
 8031c26:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8031c28:	68fb      	ldr	r3, [r7, #12]
 8031c2a:	68db      	ldr	r3, [r3, #12]
 8031c2c:	69fa      	ldr	r2, [r7, #28]
 8031c2e:	429a      	cmp	r2, r3
 8031c30:	d902      	bls.n	8031c38 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8031c32:	68fb      	ldr	r3, [r7, #12]
 8031c34:	68db      	ldr	r3, [r3, #12]
 8031c36:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8031c38:	69fb      	ldr	r3, [r7, #28]
 8031c3a:	3303      	adds	r3, #3
 8031c3c:	089b      	lsrs	r3, r3, #2
 8031c3e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8031c40:	e02b      	b.n	8031c9a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8031c42:	68fb      	ldr	r3, [r7, #12]
 8031c44:	699a      	ldr	r2, [r3, #24]
 8031c46:	68fb      	ldr	r3, [r7, #12]
 8031c48:	6a1b      	ldr	r3, [r3, #32]
 8031c4a:	1ad3      	subs	r3, r2, r3
 8031c4c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8031c4e:	68fb      	ldr	r3, [r7, #12]
 8031c50:	68db      	ldr	r3, [r3, #12]
 8031c52:	69fa      	ldr	r2, [r7, #28]
 8031c54:	429a      	cmp	r2, r3
 8031c56:	d902      	bls.n	8031c5e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8031c58:	68fb      	ldr	r3, [r7, #12]
 8031c5a:	68db      	ldr	r3, [r3, #12]
 8031c5c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8031c5e:	69fb      	ldr	r3, [r7, #28]
 8031c60:	3303      	adds	r3, #3
 8031c62:	089b      	lsrs	r3, r3, #2
 8031c64:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8031c66:	68fb      	ldr	r3, [r7, #12]
 8031c68:	6919      	ldr	r1, [r3, #16]
 8031c6a:	683b      	ldr	r3, [r7, #0]
 8031c6c:	b2da      	uxtb	r2, r3
 8031c6e:	69fb      	ldr	r3, [r7, #28]
 8031c70:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8031c72:	687b      	ldr	r3, [r7, #4]
 8031c74:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8031c76:	b2db      	uxtb	r3, r3
 8031c78:	9300      	str	r3, [sp, #0]
 8031c7a:	4603      	mov	r3, r0
 8031c7c:	6978      	ldr	r0, [r7, #20]
 8031c7e:	f008 f925 	bl	8039ecc <USB_WritePacket>

    ep->xfer_buff  += len;
 8031c82:	68fb      	ldr	r3, [r7, #12]
 8031c84:	691a      	ldr	r2, [r3, #16]
 8031c86:	69fb      	ldr	r3, [r7, #28]
 8031c88:	441a      	add	r2, r3
 8031c8a:	68fb      	ldr	r3, [r7, #12]
 8031c8c:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8031c8e:	68fb      	ldr	r3, [r7, #12]
 8031c90:	6a1a      	ldr	r2, [r3, #32]
 8031c92:	69fb      	ldr	r3, [r7, #28]
 8031c94:	441a      	add	r2, r3
 8031c96:	68fb      	ldr	r3, [r7, #12]
 8031c98:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8031c9a:	683b      	ldr	r3, [r7, #0]
 8031c9c:	015a      	lsls	r2, r3, #5
 8031c9e:	693b      	ldr	r3, [r7, #16]
 8031ca0:	4413      	add	r3, r2
 8031ca2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8031ca6:	699b      	ldr	r3, [r3, #24]
 8031ca8:	b29b      	uxth	r3, r3
 8031caa:	69ba      	ldr	r2, [r7, #24]
 8031cac:	429a      	cmp	r2, r3
 8031cae:	d809      	bhi.n	8031cc4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8031cb0:	68fb      	ldr	r3, [r7, #12]
 8031cb2:	6a1a      	ldr	r2, [r3, #32]
 8031cb4:	68fb      	ldr	r3, [r7, #12]
 8031cb6:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8031cb8:	429a      	cmp	r2, r3
 8031cba:	d203      	bcs.n	8031cc4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8031cbc:	68fb      	ldr	r3, [r7, #12]
 8031cbe:	699b      	ldr	r3, [r3, #24]
 8031cc0:	2b00      	cmp	r3, #0
 8031cc2:	d1be      	bne.n	8031c42 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8031cc4:	68fb      	ldr	r3, [r7, #12]
 8031cc6:	699a      	ldr	r2, [r3, #24]
 8031cc8:	68fb      	ldr	r3, [r7, #12]
 8031cca:	6a1b      	ldr	r3, [r3, #32]
 8031ccc:	429a      	cmp	r2, r3
 8031cce:	d811      	bhi.n	8031cf4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8031cd0:	683b      	ldr	r3, [r7, #0]
 8031cd2:	f003 030f 	and.w	r3, r3, #15
 8031cd6:	2201      	movs	r2, #1
 8031cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8031cdc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8031cde:	693b      	ldr	r3, [r7, #16]
 8031ce0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8031ce4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8031ce6:	68bb      	ldr	r3, [r7, #8]
 8031ce8:	43db      	mvns	r3, r3
 8031cea:	6939      	ldr	r1, [r7, #16]
 8031cec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8031cf0:	4013      	ands	r3, r2
 8031cf2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8031cf4:	2300      	movs	r3, #0
}
 8031cf6:	4618      	mov	r0, r3
 8031cf8:	3720      	adds	r7, #32
 8031cfa:	46bd      	mov	sp, r7
 8031cfc:	bd80      	pop	{r7, pc}
	...

08031d00 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8031d00:	b580      	push	{r7, lr}
 8031d02:	b088      	sub	sp, #32
 8031d04:	af00      	add	r7, sp, #0
 8031d06:	6078      	str	r0, [r7, #4]
 8031d08:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8031d0a:	687b      	ldr	r3, [r7, #4]
 8031d0c:	681b      	ldr	r3, [r3, #0]
 8031d0e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8031d10:	69fb      	ldr	r3, [r7, #28]
 8031d12:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8031d14:	69fb      	ldr	r3, [r7, #28]
 8031d16:	333c      	adds	r3, #60	; 0x3c
 8031d18:	3304      	adds	r3, #4
 8031d1a:	681b      	ldr	r3, [r3, #0]
 8031d1c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8031d1e:	683b      	ldr	r3, [r7, #0]
 8031d20:	015a      	lsls	r2, r3, #5
 8031d22:	69bb      	ldr	r3, [r7, #24]
 8031d24:	4413      	add	r3, r2
 8031d26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8031d2a:	689b      	ldr	r3, [r3, #8]
 8031d2c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8031d2e:	687b      	ldr	r3, [r7, #4]
 8031d30:	691b      	ldr	r3, [r3, #16]
 8031d32:	2b01      	cmp	r3, #1
 8031d34:	d17b      	bne.n	8031e2e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8031d36:	693b      	ldr	r3, [r7, #16]
 8031d38:	f003 0308 	and.w	r3, r3, #8
 8031d3c:	2b00      	cmp	r3, #0
 8031d3e:	d015      	beq.n	8031d6c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8031d40:	697b      	ldr	r3, [r7, #20]
 8031d42:	4a61      	ldr	r2, [pc, #388]	; (8031ec8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8031d44:	4293      	cmp	r3, r2
 8031d46:	f240 80b9 	bls.w	8031ebc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8031d4a:	693b      	ldr	r3, [r7, #16]
 8031d4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8031d50:	2b00      	cmp	r3, #0
 8031d52:	f000 80b3 	beq.w	8031ebc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8031d56:	683b      	ldr	r3, [r7, #0]
 8031d58:	015a      	lsls	r2, r3, #5
 8031d5a:	69bb      	ldr	r3, [r7, #24]
 8031d5c:	4413      	add	r3, r2
 8031d5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8031d62:	461a      	mov	r2, r3
 8031d64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8031d68:	6093      	str	r3, [r2, #8]
 8031d6a:	e0a7      	b.n	8031ebc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8031d6c:	693b      	ldr	r3, [r7, #16]
 8031d6e:	f003 0320 	and.w	r3, r3, #32
 8031d72:	2b00      	cmp	r3, #0
 8031d74:	d009      	beq.n	8031d8a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8031d76:	683b      	ldr	r3, [r7, #0]
 8031d78:	015a      	lsls	r2, r3, #5
 8031d7a:	69bb      	ldr	r3, [r7, #24]
 8031d7c:	4413      	add	r3, r2
 8031d7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8031d82:	461a      	mov	r2, r3
 8031d84:	2320      	movs	r3, #32
 8031d86:	6093      	str	r3, [r2, #8]
 8031d88:	e098      	b.n	8031ebc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8031d8a:	693b      	ldr	r3, [r7, #16]
 8031d8c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8031d90:	2b00      	cmp	r3, #0
 8031d92:	f040 8093 	bne.w	8031ebc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8031d96:	697b      	ldr	r3, [r7, #20]
 8031d98:	4a4b      	ldr	r2, [pc, #300]	; (8031ec8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8031d9a:	4293      	cmp	r3, r2
 8031d9c:	d90f      	bls.n	8031dbe <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8031d9e:	693b      	ldr	r3, [r7, #16]
 8031da0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8031da4:	2b00      	cmp	r3, #0
 8031da6:	d00a      	beq.n	8031dbe <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8031da8:	683b      	ldr	r3, [r7, #0]
 8031daa:	015a      	lsls	r2, r3, #5
 8031dac:	69bb      	ldr	r3, [r7, #24]
 8031dae:	4413      	add	r3, r2
 8031db0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8031db4:	461a      	mov	r2, r3
 8031db6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8031dba:	6093      	str	r3, [r2, #8]
 8031dbc:	e07e      	b.n	8031ebc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8031dbe:	683a      	ldr	r2, [r7, #0]
 8031dc0:	4613      	mov	r3, r2
 8031dc2:	00db      	lsls	r3, r3, #3
 8031dc4:	4413      	add	r3, r2
 8031dc6:	009b      	lsls	r3, r3, #2
 8031dc8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8031dcc:	687a      	ldr	r2, [r7, #4]
 8031dce:	4413      	add	r3, r2
 8031dd0:	3304      	adds	r3, #4
 8031dd2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8031dd4:	68fb      	ldr	r3, [r7, #12]
 8031dd6:	69da      	ldr	r2, [r3, #28]
 8031dd8:	683b      	ldr	r3, [r7, #0]
 8031dda:	0159      	lsls	r1, r3, #5
 8031ddc:	69bb      	ldr	r3, [r7, #24]
 8031dde:	440b      	add	r3, r1
 8031de0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8031de4:	691b      	ldr	r3, [r3, #16]
 8031de6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8031dea:	1ad2      	subs	r2, r2, r3
 8031dec:	68fb      	ldr	r3, [r7, #12]
 8031dee:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8031df0:	683b      	ldr	r3, [r7, #0]
 8031df2:	2b00      	cmp	r3, #0
 8031df4:	d114      	bne.n	8031e20 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8031df6:	68fb      	ldr	r3, [r7, #12]
 8031df8:	699b      	ldr	r3, [r3, #24]
 8031dfa:	2b00      	cmp	r3, #0
 8031dfc:	d109      	bne.n	8031e12 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8031dfe:	687b      	ldr	r3, [r7, #4]
 8031e00:	6818      	ldr	r0, [r3, #0]
 8031e02:	687b      	ldr	r3, [r7, #4]
 8031e04:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8031e08:	461a      	mov	r2, r3
 8031e0a:	2101      	movs	r1, #1
 8031e0c:	f008 faf6 	bl	803a3fc <USB_EP0_OutStart>
 8031e10:	e006      	b.n	8031e20 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8031e12:	68fb      	ldr	r3, [r7, #12]
 8031e14:	691a      	ldr	r2, [r3, #16]
 8031e16:	68fb      	ldr	r3, [r7, #12]
 8031e18:	6a1b      	ldr	r3, [r3, #32]
 8031e1a:	441a      	add	r2, r3
 8031e1c:	68fb      	ldr	r3, [r7, #12]
 8031e1e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8031e20:	683b      	ldr	r3, [r7, #0]
 8031e22:	b2db      	uxtb	r3, r3
 8031e24:	4619      	mov	r1, r3
 8031e26:	6878      	ldr	r0, [r7, #4]
 8031e28:	f00a fd6a 	bl	803c900 <HAL_PCD_DataOutStageCallback>
 8031e2c:	e046      	b.n	8031ebc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8031e2e:	697b      	ldr	r3, [r7, #20]
 8031e30:	4a26      	ldr	r2, [pc, #152]	; (8031ecc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8031e32:	4293      	cmp	r3, r2
 8031e34:	d124      	bne.n	8031e80 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8031e36:	693b      	ldr	r3, [r7, #16]
 8031e38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8031e3c:	2b00      	cmp	r3, #0
 8031e3e:	d00a      	beq.n	8031e56 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8031e40:	683b      	ldr	r3, [r7, #0]
 8031e42:	015a      	lsls	r2, r3, #5
 8031e44:	69bb      	ldr	r3, [r7, #24]
 8031e46:	4413      	add	r3, r2
 8031e48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8031e4c:	461a      	mov	r2, r3
 8031e4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8031e52:	6093      	str	r3, [r2, #8]
 8031e54:	e032      	b.n	8031ebc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8031e56:	693b      	ldr	r3, [r7, #16]
 8031e58:	f003 0320 	and.w	r3, r3, #32
 8031e5c:	2b00      	cmp	r3, #0
 8031e5e:	d008      	beq.n	8031e72 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8031e60:	683b      	ldr	r3, [r7, #0]
 8031e62:	015a      	lsls	r2, r3, #5
 8031e64:	69bb      	ldr	r3, [r7, #24]
 8031e66:	4413      	add	r3, r2
 8031e68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8031e6c:	461a      	mov	r2, r3
 8031e6e:	2320      	movs	r3, #32
 8031e70:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8031e72:	683b      	ldr	r3, [r7, #0]
 8031e74:	b2db      	uxtb	r3, r3
 8031e76:	4619      	mov	r1, r3
 8031e78:	6878      	ldr	r0, [r7, #4]
 8031e7a:	f00a fd41 	bl	803c900 <HAL_PCD_DataOutStageCallback>
 8031e7e:	e01d      	b.n	8031ebc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8031e80:	683b      	ldr	r3, [r7, #0]
 8031e82:	2b00      	cmp	r3, #0
 8031e84:	d114      	bne.n	8031eb0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8031e86:	6879      	ldr	r1, [r7, #4]
 8031e88:	683a      	ldr	r2, [r7, #0]
 8031e8a:	4613      	mov	r3, r2
 8031e8c:	00db      	lsls	r3, r3, #3
 8031e8e:	4413      	add	r3, r2
 8031e90:	009b      	lsls	r3, r3, #2
 8031e92:	440b      	add	r3, r1
 8031e94:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8031e98:	681b      	ldr	r3, [r3, #0]
 8031e9a:	2b00      	cmp	r3, #0
 8031e9c:	d108      	bne.n	8031eb0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8031e9e:	687b      	ldr	r3, [r7, #4]
 8031ea0:	6818      	ldr	r0, [r3, #0]
 8031ea2:	687b      	ldr	r3, [r7, #4]
 8031ea4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8031ea8:	461a      	mov	r2, r3
 8031eaa:	2100      	movs	r1, #0
 8031eac:	f008 faa6 	bl	803a3fc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8031eb0:	683b      	ldr	r3, [r7, #0]
 8031eb2:	b2db      	uxtb	r3, r3
 8031eb4:	4619      	mov	r1, r3
 8031eb6:	6878      	ldr	r0, [r7, #4]
 8031eb8:	f00a fd22 	bl	803c900 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8031ebc:	2300      	movs	r3, #0
}
 8031ebe:	4618      	mov	r0, r3
 8031ec0:	3720      	adds	r7, #32
 8031ec2:	46bd      	mov	sp, r7
 8031ec4:	bd80      	pop	{r7, pc}
 8031ec6:	bf00      	nop
 8031ec8:	4f54300a 	.word	0x4f54300a
 8031ecc:	4f54310a 	.word	0x4f54310a

08031ed0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8031ed0:	b580      	push	{r7, lr}
 8031ed2:	b086      	sub	sp, #24
 8031ed4:	af00      	add	r7, sp, #0
 8031ed6:	6078      	str	r0, [r7, #4]
 8031ed8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8031eda:	687b      	ldr	r3, [r7, #4]
 8031edc:	681b      	ldr	r3, [r3, #0]
 8031ede:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8031ee0:	697b      	ldr	r3, [r7, #20]
 8031ee2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8031ee4:	697b      	ldr	r3, [r7, #20]
 8031ee6:	333c      	adds	r3, #60	; 0x3c
 8031ee8:	3304      	adds	r3, #4
 8031eea:	681b      	ldr	r3, [r3, #0]
 8031eec:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8031eee:	683b      	ldr	r3, [r7, #0]
 8031ef0:	015a      	lsls	r2, r3, #5
 8031ef2:	693b      	ldr	r3, [r7, #16]
 8031ef4:	4413      	add	r3, r2
 8031ef6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8031efa:	689b      	ldr	r3, [r3, #8]
 8031efc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8031efe:	68fb      	ldr	r3, [r7, #12]
 8031f00:	4a15      	ldr	r2, [pc, #84]	; (8031f58 <PCD_EP_OutSetupPacket_int+0x88>)
 8031f02:	4293      	cmp	r3, r2
 8031f04:	d90e      	bls.n	8031f24 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8031f06:	68bb      	ldr	r3, [r7, #8]
 8031f08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8031f0c:	2b00      	cmp	r3, #0
 8031f0e:	d009      	beq.n	8031f24 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8031f10:	683b      	ldr	r3, [r7, #0]
 8031f12:	015a      	lsls	r2, r3, #5
 8031f14:	693b      	ldr	r3, [r7, #16]
 8031f16:	4413      	add	r3, r2
 8031f18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8031f1c:	461a      	mov	r2, r3
 8031f1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8031f22:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8031f24:	6878      	ldr	r0, [r7, #4]
 8031f26:	f00a fcd9 	bl	803c8dc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8031f2a:	68fb      	ldr	r3, [r7, #12]
 8031f2c:	4a0a      	ldr	r2, [pc, #40]	; (8031f58 <PCD_EP_OutSetupPacket_int+0x88>)
 8031f2e:	4293      	cmp	r3, r2
 8031f30:	d90c      	bls.n	8031f4c <PCD_EP_OutSetupPacket_int+0x7c>
 8031f32:	687b      	ldr	r3, [r7, #4]
 8031f34:	691b      	ldr	r3, [r3, #16]
 8031f36:	2b01      	cmp	r3, #1
 8031f38:	d108      	bne.n	8031f4c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8031f3a:	687b      	ldr	r3, [r7, #4]
 8031f3c:	6818      	ldr	r0, [r3, #0]
 8031f3e:	687b      	ldr	r3, [r7, #4]
 8031f40:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8031f44:	461a      	mov	r2, r3
 8031f46:	2101      	movs	r1, #1
 8031f48:	f008 fa58 	bl	803a3fc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8031f4c:	2300      	movs	r3, #0
}
 8031f4e:	4618      	mov	r0, r3
 8031f50:	3718      	adds	r7, #24
 8031f52:	46bd      	mov	sp, r7
 8031f54:	bd80      	pop	{r7, pc}
 8031f56:	bf00      	nop
 8031f58:	4f54300a 	.word	0x4f54300a

08031f5c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8031f5c:	b480      	push	{r7}
 8031f5e:	b085      	sub	sp, #20
 8031f60:	af00      	add	r7, sp, #0
 8031f62:	6078      	str	r0, [r7, #4]
 8031f64:	460b      	mov	r3, r1
 8031f66:	70fb      	strb	r3, [r7, #3]
 8031f68:	4613      	mov	r3, r2
 8031f6a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8031f6c:	687b      	ldr	r3, [r7, #4]
 8031f6e:	681b      	ldr	r3, [r3, #0]
 8031f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8031f72:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8031f74:	78fb      	ldrb	r3, [r7, #3]
 8031f76:	2b00      	cmp	r3, #0
 8031f78:	d107      	bne.n	8031f8a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8031f7a:	883b      	ldrh	r3, [r7, #0]
 8031f7c:	0419      	lsls	r1, r3, #16
 8031f7e:	687b      	ldr	r3, [r7, #4]
 8031f80:	681b      	ldr	r3, [r3, #0]
 8031f82:	68ba      	ldr	r2, [r7, #8]
 8031f84:	430a      	orrs	r2, r1
 8031f86:	629a      	str	r2, [r3, #40]	; 0x28
 8031f88:	e028      	b.n	8031fdc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8031f8a:	687b      	ldr	r3, [r7, #4]
 8031f8c:	681b      	ldr	r3, [r3, #0]
 8031f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8031f90:	0c1b      	lsrs	r3, r3, #16
 8031f92:	68ba      	ldr	r2, [r7, #8]
 8031f94:	4413      	add	r3, r2
 8031f96:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8031f98:	2300      	movs	r3, #0
 8031f9a:	73fb      	strb	r3, [r7, #15]
 8031f9c:	e00d      	b.n	8031fba <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8031f9e:	687b      	ldr	r3, [r7, #4]
 8031fa0:	681a      	ldr	r2, [r3, #0]
 8031fa2:	7bfb      	ldrb	r3, [r7, #15]
 8031fa4:	3340      	adds	r3, #64	; 0x40
 8031fa6:	009b      	lsls	r3, r3, #2
 8031fa8:	4413      	add	r3, r2
 8031faa:	685b      	ldr	r3, [r3, #4]
 8031fac:	0c1b      	lsrs	r3, r3, #16
 8031fae:	68ba      	ldr	r2, [r7, #8]
 8031fb0:	4413      	add	r3, r2
 8031fb2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8031fb4:	7bfb      	ldrb	r3, [r7, #15]
 8031fb6:	3301      	adds	r3, #1
 8031fb8:	73fb      	strb	r3, [r7, #15]
 8031fba:	7bfa      	ldrb	r2, [r7, #15]
 8031fbc:	78fb      	ldrb	r3, [r7, #3]
 8031fbe:	3b01      	subs	r3, #1
 8031fc0:	429a      	cmp	r2, r3
 8031fc2:	d3ec      	bcc.n	8031f9e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8031fc4:	883b      	ldrh	r3, [r7, #0]
 8031fc6:	0418      	lsls	r0, r3, #16
 8031fc8:	687b      	ldr	r3, [r7, #4]
 8031fca:	6819      	ldr	r1, [r3, #0]
 8031fcc:	78fb      	ldrb	r3, [r7, #3]
 8031fce:	3b01      	subs	r3, #1
 8031fd0:	68ba      	ldr	r2, [r7, #8]
 8031fd2:	4302      	orrs	r2, r0
 8031fd4:	3340      	adds	r3, #64	; 0x40
 8031fd6:	009b      	lsls	r3, r3, #2
 8031fd8:	440b      	add	r3, r1
 8031fda:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8031fdc:	2300      	movs	r3, #0
}
 8031fde:	4618      	mov	r0, r3
 8031fe0:	3714      	adds	r7, #20
 8031fe2:	46bd      	mov	sp, r7
 8031fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031fe8:	4770      	bx	lr

08031fea <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8031fea:	b480      	push	{r7}
 8031fec:	b083      	sub	sp, #12
 8031fee:	af00      	add	r7, sp, #0
 8031ff0:	6078      	str	r0, [r7, #4]
 8031ff2:	460b      	mov	r3, r1
 8031ff4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8031ff6:	687b      	ldr	r3, [r7, #4]
 8031ff8:	681b      	ldr	r3, [r3, #0]
 8031ffa:	887a      	ldrh	r2, [r7, #2]
 8031ffc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8031ffe:	2300      	movs	r3, #0
}
 8032000:	4618      	mov	r0, r3
 8032002:	370c      	adds	r7, #12
 8032004:	46bd      	mov	sp, r7
 8032006:	f85d 7b04 	ldr.w	r7, [sp], #4
 803200a:	4770      	bx	lr

0803200c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 803200c:	b480      	push	{r7}
 803200e:	b085      	sub	sp, #20
 8032010:	af00      	add	r7, sp, #0
 8032012:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8032014:	687b      	ldr	r3, [r7, #4]
 8032016:	681b      	ldr	r3, [r3, #0]
 8032018:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 803201a:	687b      	ldr	r3, [r7, #4]
 803201c:	2201      	movs	r2, #1
 803201e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8032022:	687b      	ldr	r3, [r7, #4]
 8032024:	2200      	movs	r2, #0
 8032026:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 803202a:	68fb      	ldr	r3, [r7, #12]
 803202c:	699b      	ldr	r3, [r3, #24]
 803202e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8032032:	68fb      	ldr	r3, [r7, #12]
 8032034:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8032036:	68fb      	ldr	r3, [r7, #12]
 8032038:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 803203a:	4b05      	ldr	r3, [pc, #20]	; (8032050 <HAL_PCDEx_ActivateLPM+0x44>)
 803203c:	4313      	orrs	r3, r2
 803203e:	68fa      	ldr	r2, [r7, #12]
 8032040:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8032042:	2300      	movs	r3, #0
}
 8032044:	4618      	mov	r0, r3
 8032046:	3714      	adds	r7, #20
 8032048:	46bd      	mov	sp, r7
 803204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803204e:	4770      	bx	lr
 8032050:	10000003 	.word	0x10000003

08032054 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8032054:	b480      	push	{r7}
 8032056:	b083      	sub	sp, #12
 8032058:	af00      	add	r7, sp, #0
 803205a:	6078      	str	r0, [r7, #4]
 803205c:	460b      	mov	r3, r1
 803205e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8032060:	bf00      	nop
 8032062:	370c      	adds	r7, #12
 8032064:	46bd      	mov	sp, r7
 8032066:	f85d 7b04 	ldr.w	r7, [sp], #4
 803206a:	4770      	bx	lr

0803206c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 803206c:	b580      	push	{r7, lr}
 803206e:	b084      	sub	sp, #16
 8032070:	af00      	add	r7, sp, #0
 8032072:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8032074:	4b19      	ldr	r3, [pc, #100]	; (80320dc <HAL_PWREx_ConfigSupply+0x70>)
 8032076:	68db      	ldr	r3, [r3, #12]
 8032078:	f003 0304 	and.w	r3, r3, #4
 803207c:	2b04      	cmp	r3, #4
 803207e:	d00a      	beq.n	8032096 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8032080:	4b16      	ldr	r3, [pc, #88]	; (80320dc <HAL_PWREx_ConfigSupply+0x70>)
 8032082:	68db      	ldr	r3, [r3, #12]
 8032084:	f003 0307 	and.w	r3, r3, #7
 8032088:	687a      	ldr	r2, [r7, #4]
 803208a:	429a      	cmp	r2, r3
 803208c:	d001      	beq.n	8032092 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 803208e:	2301      	movs	r3, #1
 8032090:	e01f      	b.n	80320d2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8032092:	2300      	movs	r3, #0
 8032094:	e01d      	b.n	80320d2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8032096:	4b11      	ldr	r3, [pc, #68]	; (80320dc <HAL_PWREx_ConfigSupply+0x70>)
 8032098:	68db      	ldr	r3, [r3, #12]
 803209a:	f023 0207 	bic.w	r2, r3, #7
 803209e:	490f      	ldr	r1, [pc, #60]	; (80320dc <HAL_PWREx_ConfigSupply+0x70>)
 80320a0:	687b      	ldr	r3, [r7, #4]
 80320a2:	4313      	orrs	r3, r2
 80320a4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80320a6:	f7fa f843 	bl	802c130 <HAL_GetTick>
 80320aa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80320ac:	e009      	b.n	80320c2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80320ae:	f7fa f83f 	bl	802c130 <HAL_GetTick>
 80320b2:	4602      	mov	r2, r0
 80320b4:	68fb      	ldr	r3, [r7, #12]
 80320b6:	1ad3      	subs	r3, r2, r3
 80320b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80320bc:	d901      	bls.n	80320c2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80320be:	2301      	movs	r3, #1
 80320c0:	e007      	b.n	80320d2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80320c2:	4b06      	ldr	r3, [pc, #24]	; (80320dc <HAL_PWREx_ConfigSupply+0x70>)
 80320c4:	685b      	ldr	r3, [r3, #4]
 80320c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80320ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80320ce:	d1ee      	bne.n	80320ae <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80320d0:	2300      	movs	r3, #0
}
 80320d2:	4618      	mov	r0, r3
 80320d4:	3710      	adds	r7, #16
 80320d6:	46bd      	mov	sp, r7
 80320d8:	bd80      	pop	{r7, pc}
 80320da:	bf00      	nop
 80320dc:	58024800 	.word	0x58024800

080320e0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80320e0:	b480      	push	{r7}
 80320e2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80320e4:	4b05      	ldr	r3, [pc, #20]	; (80320fc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80320e6:	68db      	ldr	r3, [r3, #12]
 80320e8:	4a04      	ldr	r2, [pc, #16]	; (80320fc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80320ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80320ee:	60d3      	str	r3, [r2, #12]
}
 80320f0:	bf00      	nop
 80320f2:	46bd      	mov	sp, r7
 80320f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80320f8:	4770      	bx	lr
 80320fa:	bf00      	nop
 80320fc:	58024800 	.word	0x58024800

08032100 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8032100:	b580      	push	{r7, lr}
 8032102:	b08c      	sub	sp, #48	; 0x30
 8032104:	af00      	add	r7, sp, #0
 8032106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8032108:	687b      	ldr	r3, [r7, #4]
 803210a:	2b00      	cmp	r3, #0
 803210c:	d102      	bne.n	8032114 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 803210e:	2301      	movs	r3, #1
 8032110:	f000 bc1d 	b.w	803294e <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8032114:	687b      	ldr	r3, [r7, #4]
 8032116:	681b      	ldr	r3, [r3, #0]
 8032118:	f003 0301 	and.w	r3, r3, #1
 803211c:	2b00      	cmp	r3, #0
 803211e:	f000 8087 	beq.w	8032230 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8032122:	4b99      	ldr	r3, [pc, #612]	; (8032388 <HAL_RCC_OscConfig+0x288>)
 8032124:	691b      	ldr	r3, [r3, #16]
 8032126:	f003 0338 	and.w	r3, r3, #56	; 0x38
 803212a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 803212c:	4b96      	ldr	r3, [pc, #600]	; (8032388 <HAL_RCC_OscConfig+0x288>)
 803212e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8032130:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8032132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8032134:	2b10      	cmp	r3, #16
 8032136:	d007      	beq.n	8032148 <HAL_RCC_OscConfig+0x48>
 8032138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 803213a:	2b18      	cmp	r3, #24
 803213c:	d110      	bne.n	8032160 <HAL_RCC_OscConfig+0x60>
 803213e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8032140:	f003 0303 	and.w	r3, r3, #3
 8032144:	2b02      	cmp	r3, #2
 8032146:	d10b      	bne.n	8032160 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8032148:	4b8f      	ldr	r3, [pc, #572]	; (8032388 <HAL_RCC_OscConfig+0x288>)
 803214a:	681b      	ldr	r3, [r3, #0]
 803214c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8032150:	2b00      	cmp	r3, #0
 8032152:	d06c      	beq.n	803222e <HAL_RCC_OscConfig+0x12e>
 8032154:	687b      	ldr	r3, [r7, #4]
 8032156:	685b      	ldr	r3, [r3, #4]
 8032158:	2b00      	cmp	r3, #0
 803215a:	d168      	bne.n	803222e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 803215c:	2301      	movs	r3, #1
 803215e:	e3f6      	b.n	803294e <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8032160:	687b      	ldr	r3, [r7, #4]
 8032162:	685b      	ldr	r3, [r3, #4]
 8032164:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8032168:	d106      	bne.n	8032178 <HAL_RCC_OscConfig+0x78>
 803216a:	4b87      	ldr	r3, [pc, #540]	; (8032388 <HAL_RCC_OscConfig+0x288>)
 803216c:	681b      	ldr	r3, [r3, #0]
 803216e:	4a86      	ldr	r2, [pc, #536]	; (8032388 <HAL_RCC_OscConfig+0x288>)
 8032170:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8032174:	6013      	str	r3, [r2, #0]
 8032176:	e02e      	b.n	80321d6 <HAL_RCC_OscConfig+0xd6>
 8032178:	687b      	ldr	r3, [r7, #4]
 803217a:	685b      	ldr	r3, [r3, #4]
 803217c:	2b00      	cmp	r3, #0
 803217e:	d10c      	bne.n	803219a <HAL_RCC_OscConfig+0x9a>
 8032180:	4b81      	ldr	r3, [pc, #516]	; (8032388 <HAL_RCC_OscConfig+0x288>)
 8032182:	681b      	ldr	r3, [r3, #0]
 8032184:	4a80      	ldr	r2, [pc, #512]	; (8032388 <HAL_RCC_OscConfig+0x288>)
 8032186:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 803218a:	6013      	str	r3, [r2, #0]
 803218c:	4b7e      	ldr	r3, [pc, #504]	; (8032388 <HAL_RCC_OscConfig+0x288>)
 803218e:	681b      	ldr	r3, [r3, #0]
 8032190:	4a7d      	ldr	r2, [pc, #500]	; (8032388 <HAL_RCC_OscConfig+0x288>)
 8032192:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8032196:	6013      	str	r3, [r2, #0]
 8032198:	e01d      	b.n	80321d6 <HAL_RCC_OscConfig+0xd6>
 803219a:	687b      	ldr	r3, [r7, #4]
 803219c:	685b      	ldr	r3, [r3, #4]
 803219e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80321a2:	d10c      	bne.n	80321be <HAL_RCC_OscConfig+0xbe>
 80321a4:	4b78      	ldr	r3, [pc, #480]	; (8032388 <HAL_RCC_OscConfig+0x288>)
 80321a6:	681b      	ldr	r3, [r3, #0]
 80321a8:	4a77      	ldr	r2, [pc, #476]	; (8032388 <HAL_RCC_OscConfig+0x288>)
 80321aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80321ae:	6013      	str	r3, [r2, #0]
 80321b0:	4b75      	ldr	r3, [pc, #468]	; (8032388 <HAL_RCC_OscConfig+0x288>)
 80321b2:	681b      	ldr	r3, [r3, #0]
 80321b4:	4a74      	ldr	r2, [pc, #464]	; (8032388 <HAL_RCC_OscConfig+0x288>)
 80321b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80321ba:	6013      	str	r3, [r2, #0]
 80321bc:	e00b      	b.n	80321d6 <HAL_RCC_OscConfig+0xd6>
 80321be:	4b72      	ldr	r3, [pc, #456]	; (8032388 <HAL_RCC_OscConfig+0x288>)
 80321c0:	681b      	ldr	r3, [r3, #0]
 80321c2:	4a71      	ldr	r2, [pc, #452]	; (8032388 <HAL_RCC_OscConfig+0x288>)
 80321c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80321c8:	6013      	str	r3, [r2, #0]
 80321ca:	4b6f      	ldr	r3, [pc, #444]	; (8032388 <HAL_RCC_OscConfig+0x288>)
 80321cc:	681b      	ldr	r3, [r3, #0]
 80321ce:	4a6e      	ldr	r2, [pc, #440]	; (8032388 <HAL_RCC_OscConfig+0x288>)
 80321d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80321d4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80321d6:	687b      	ldr	r3, [r7, #4]
 80321d8:	685b      	ldr	r3, [r3, #4]
 80321da:	2b00      	cmp	r3, #0
 80321dc:	d013      	beq.n	8032206 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80321de:	f7f9 ffa7 	bl	802c130 <HAL_GetTick>
 80321e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80321e4:	e008      	b.n	80321f8 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80321e6:	f7f9 ffa3 	bl	802c130 <HAL_GetTick>
 80321ea:	4602      	mov	r2, r0
 80321ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80321ee:	1ad3      	subs	r3, r2, r3
 80321f0:	2b64      	cmp	r3, #100	; 0x64
 80321f2:	d901      	bls.n	80321f8 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80321f4:	2303      	movs	r3, #3
 80321f6:	e3aa      	b.n	803294e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80321f8:	4b63      	ldr	r3, [pc, #396]	; (8032388 <HAL_RCC_OscConfig+0x288>)
 80321fa:	681b      	ldr	r3, [r3, #0]
 80321fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8032200:	2b00      	cmp	r3, #0
 8032202:	d0f0      	beq.n	80321e6 <HAL_RCC_OscConfig+0xe6>
 8032204:	e014      	b.n	8032230 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8032206:	f7f9 ff93 	bl	802c130 <HAL_GetTick>
 803220a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 803220c:	e008      	b.n	8032220 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 803220e:	f7f9 ff8f 	bl	802c130 <HAL_GetTick>
 8032212:	4602      	mov	r2, r0
 8032214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8032216:	1ad3      	subs	r3, r2, r3
 8032218:	2b64      	cmp	r3, #100	; 0x64
 803221a:	d901      	bls.n	8032220 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 803221c:	2303      	movs	r3, #3
 803221e:	e396      	b.n	803294e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8032220:	4b59      	ldr	r3, [pc, #356]	; (8032388 <HAL_RCC_OscConfig+0x288>)
 8032222:	681b      	ldr	r3, [r3, #0]
 8032224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8032228:	2b00      	cmp	r3, #0
 803222a:	d1f0      	bne.n	803220e <HAL_RCC_OscConfig+0x10e>
 803222c:	e000      	b.n	8032230 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 803222e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8032230:	687b      	ldr	r3, [r7, #4]
 8032232:	681b      	ldr	r3, [r3, #0]
 8032234:	f003 0302 	and.w	r3, r3, #2
 8032238:	2b00      	cmp	r3, #0
 803223a:	f000 80cb 	beq.w	80323d4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 803223e:	4b52      	ldr	r3, [pc, #328]	; (8032388 <HAL_RCC_OscConfig+0x288>)
 8032240:	691b      	ldr	r3, [r3, #16]
 8032242:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8032246:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8032248:	4b4f      	ldr	r3, [pc, #316]	; (8032388 <HAL_RCC_OscConfig+0x288>)
 803224a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 803224c:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 803224e:	6a3b      	ldr	r3, [r7, #32]
 8032250:	2b00      	cmp	r3, #0
 8032252:	d007      	beq.n	8032264 <HAL_RCC_OscConfig+0x164>
 8032254:	6a3b      	ldr	r3, [r7, #32]
 8032256:	2b18      	cmp	r3, #24
 8032258:	d156      	bne.n	8032308 <HAL_RCC_OscConfig+0x208>
 803225a:	69fb      	ldr	r3, [r7, #28]
 803225c:	f003 0303 	and.w	r3, r3, #3
 8032260:	2b00      	cmp	r3, #0
 8032262:	d151      	bne.n	8032308 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8032264:	4b48      	ldr	r3, [pc, #288]	; (8032388 <HAL_RCC_OscConfig+0x288>)
 8032266:	681b      	ldr	r3, [r3, #0]
 8032268:	f003 0304 	and.w	r3, r3, #4
 803226c:	2b00      	cmp	r3, #0
 803226e:	d005      	beq.n	803227c <HAL_RCC_OscConfig+0x17c>
 8032270:	687b      	ldr	r3, [r7, #4]
 8032272:	68db      	ldr	r3, [r3, #12]
 8032274:	2b00      	cmp	r3, #0
 8032276:	d101      	bne.n	803227c <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8032278:	2301      	movs	r3, #1
 803227a:	e368      	b.n	803294e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 803227c:	4b42      	ldr	r3, [pc, #264]	; (8032388 <HAL_RCC_OscConfig+0x288>)
 803227e:	681b      	ldr	r3, [r3, #0]
 8032280:	f023 0219 	bic.w	r2, r3, #25
 8032284:	687b      	ldr	r3, [r7, #4]
 8032286:	68db      	ldr	r3, [r3, #12]
 8032288:	493f      	ldr	r1, [pc, #252]	; (8032388 <HAL_RCC_OscConfig+0x288>)
 803228a:	4313      	orrs	r3, r2
 803228c:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 803228e:	f7f9 ff4f 	bl	802c130 <HAL_GetTick>
 8032292:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8032294:	e008      	b.n	80322a8 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8032296:	f7f9 ff4b 	bl	802c130 <HAL_GetTick>
 803229a:	4602      	mov	r2, r0
 803229c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803229e:	1ad3      	subs	r3, r2, r3
 80322a0:	2b02      	cmp	r3, #2
 80322a2:	d901      	bls.n	80322a8 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80322a4:	2303      	movs	r3, #3
 80322a6:	e352      	b.n	803294e <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80322a8:	4b37      	ldr	r3, [pc, #220]	; (8032388 <HAL_RCC_OscConfig+0x288>)
 80322aa:	681b      	ldr	r3, [r3, #0]
 80322ac:	f003 0304 	and.w	r3, r3, #4
 80322b0:	2b00      	cmp	r3, #0
 80322b2:	d0f0      	beq.n	8032296 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80322b4:	f7f9 ff6c 	bl	802c190 <HAL_GetREVID>
 80322b8:	4603      	mov	r3, r0
 80322ba:	f241 0203 	movw	r2, #4099	; 0x1003
 80322be:	4293      	cmp	r3, r2
 80322c0:	d817      	bhi.n	80322f2 <HAL_RCC_OscConfig+0x1f2>
 80322c2:	687b      	ldr	r3, [r7, #4]
 80322c4:	691b      	ldr	r3, [r3, #16]
 80322c6:	2b40      	cmp	r3, #64	; 0x40
 80322c8:	d108      	bne.n	80322dc <HAL_RCC_OscConfig+0x1dc>
 80322ca:	4b2f      	ldr	r3, [pc, #188]	; (8032388 <HAL_RCC_OscConfig+0x288>)
 80322cc:	685b      	ldr	r3, [r3, #4]
 80322ce:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80322d2:	4a2d      	ldr	r2, [pc, #180]	; (8032388 <HAL_RCC_OscConfig+0x288>)
 80322d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80322d8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80322da:	e07b      	b.n	80323d4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80322dc:	4b2a      	ldr	r3, [pc, #168]	; (8032388 <HAL_RCC_OscConfig+0x288>)
 80322de:	685b      	ldr	r3, [r3, #4]
 80322e0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80322e4:	687b      	ldr	r3, [r7, #4]
 80322e6:	691b      	ldr	r3, [r3, #16]
 80322e8:	031b      	lsls	r3, r3, #12
 80322ea:	4927      	ldr	r1, [pc, #156]	; (8032388 <HAL_RCC_OscConfig+0x288>)
 80322ec:	4313      	orrs	r3, r2
 80322ee:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80322f0:	e070      	b.n	80323d4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80322f2:	4b25      	ldr	r3, [pc, #148]	; (8032388 <HAL_RCC_OscConfig+0x288>)
 80322f4:	685b      	ldr	r3, [r3, #4]
 80322f6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80322fa:	687b      	ldr	r3, [r7, #4]
 80322fc:	691b      	ldr	r3, [r3, #16]
 80322fe:	061b      	lsls	r3, r3, #24
 8032300:	4921      	ldr	r1, [pc, #132]	; (8032388 <HAL_RCC_OscConfig+0x288>)
 8032302:	4313      	orrs	r3, r2
 8032304:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8032306:	e065      	b.n	80323d4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8032308:	687b      	ldr	r3, [r7, #4]
 803230a:	68db      	ldr	r3, [r3, #12]
 803230c:	2b00      	cmp	r3, #0
 803230e:	d048      	beq.n	80323a2 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8032310:	4b1d      	ldr	r3, [pc, #116]	; (8032388 <HAL_RCC_OscConfig+0x288>)
 8032312:	681b      	ldr	r3, [r3, #0]
 8032314:	f023 0219 	bic.w	r2, r3, #25
 8032318:	687b      	ldr	r3, [r7, #4]
 803231a:	68db      	ldr	r3, [r3, #12]
 803231c:	491a      	ldr	r1, [pc, #104]	; (8032388 <HAL_RCC_OscConfig+0x288>)
 803231e:	4313      	orrs	r3, r2
 8032320:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8032322:	f7f9 ff05 	bl	802c130 <HAL_GetTick>
 8032326:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8032328:	e008      	b.n	803233c <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 803232a:	f7f9 ff01 	bl	802c130 <HAL_GetTick>
 803232e:	4602      	mov	r2, r0
 8032330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8032332:	1ad3      	subs	r3, r2, r3
 8032334:	2b02      	cmp	r3, #2
 8032336:	d901      	bls.n	803233c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8032338:	2303      	movs	r3, #3
 803233a:	e308      	b.n	803294e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 803233c:	4b12      	ldr	r3, [pc, #72]	; (8032388 <HAL_RCC_OscConfig+0x288>)
 803233e:	681b      	ldr	r3, [r3, #0]
 8032340:	f003 0304 	and.w	r3, r3, #4
 8032344:	2b00      	cmp	r3, #0
 8032346:	d0f0      	beq.n	803232a <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8032348:	f7f9 ff22 	bl	802c190 <HAL_GetREVID>
 803234c:	4603      	mov	r3, r0
 803234e:	f241 0203 	movw	r2, #4099	; 0x1003
 8032352:	4293      	cmp	r3, r2
 8032354:	d81a      	bhi.n	803238c <HAL_RCC_OscConfig+0x28c>
 8032356:	687b      	ldr	r3, [r7, #4]
 8032358:	691b      	ldr	r3, [r3, #16]
 803235a:	2b40      	cmp	r3, #64	; 0x40
 803235c:	d108      	bne.n	8032370 <HAL_RCC_OscConfig+0x270>
 803235e:	4b0a      	ldr	r3, [pc, #40]	; (8032388 <HAL_RCC_OscConfig+0x288>)
 8032360:	685b      	ldr	r3, [r3, #4]
 8032362:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8032366:	4a08      	ldr	r2, [pc, #32]	; (8032388 <HAL_RCC_OscConfig+0x288>)
 8032368:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 803236c:	6053      	str	r3, [r2, #4]
 803236e:	e031      	b.n	80323d4 <HAL_RCC_OscConfig+0x2d4>
 8032370:	4b05      	ldr	r3, [pc, #20]	; (8032388 <HAL_RCC_OscConfig+0x288>)
 8032372:	685b      	ldr	r3, [r3, #4]
 8032374:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8032378:	687b      	ldr	r3, [r7, #4]
 803237a:	691b      	ldr	r3, [r3, #16]
 803237c:	031b      	lsls	r3, r3, #12
 803237e:	4902      	ldr	r1, [pc, #8]	; (8032388 <HAL_RCC_OscConfig+0x288>)
 8032380:	4313      	orrs	r3, r2
 8032382:	604b      	str	r3, [r1, #4]
 8032384:	e026      	b.n	80323d4 <HAL_RCC_OscConfig+0x2d4>
 8032386:	bf00      	nop
 8032388:	58024400 	.word	0x58024400
 803238c:	4b9a      	ldr	r3, [pc, #616]	; (80325f8 <HAL_RCC_OscConfig+0x4f8>)
 803238e:	685b      	ldr	r3, [r3, #4]
 8032390:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8032394:	687b      	ldr	r3, [r7, #4]
 8032396:	691b      	ldr	r3, [r3, #16]
 8032398:	061b      	lsls	r3, r3, #24
 803239a:	4997      	ldr	r1, [pc, #604]	; (80325f8 <HAL_RCC_OscConfig+0x4f8>)
 803239c:	4313      	orrs	r3, r2
 803239e:	604b      	str	r3, [r1, #4]
 80323a0:	e018      	b.n	80323d4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80323a2:	4b95      	ldr	r3, [pc, #596]	; (80325f8 <HAL_RCC_OscConfig+0x4f8>)
 80323a4:	681b      	ldr	r3, [r3, #0]
 80323a6:	4a94      	ldr	r2, [pc, #592]	; (80325f8 <HAL_RCC_OscConfig+0x4f8>)
 80323a8:	f023 0301 	bic.w	r3, r3, #1
 80323ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80323ae:	f7f9 febf 	bl	802c130 <HAL_GetTick>
 80323b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80323b4:	e008      	b.n	80323c8 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80323b6:	f7f9 febb 	bl	802c130 <HAL_GetTick>
 80323ba:	4602      	mov	r2, r0
 80323bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80323be:	1ad3      	subs	r3, r2, r3
 80323c0:	2b02      	cmp	r3, #2
 80323c2:	d901      	bls.n	80323c8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80323c4:	2303      	movs	r3, #3
 80323c6:	e2c2      	b.n	803294e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80323c8:	4b8b      	ldr	r3, [pc, #556]	; (80325f8 <HAL_RCC_OscConfig+0x4f8>)
 80323ca:	681b      	ldr	r3, [r3, #0]
 80323cc:	f003 0304 	and.w	r3, r3, #4
 80323d0:	2b00      	cmp	r3, #0
 80323d2:	d1f0      	bne.n	80323b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80323d4:	687b      	ldr	r3, [r7, #4]
 80323d6:	681b      	ldr	r3, [r3, #0]
 80323d8:	f003 0310 	and.w	r3, r3, #16
 80323dc:	2b00      	cmp	r3, #0
 80323de:	f000 80a9 	beq.w	8032534 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80323e2:	4b85      	ldr	r3, [pc, #532]	; (80325f8 <HAL_RCC_OscConfig+0x4f8>)
 80323e4:	691b      	ldr	r3, [r3, #16]
 80323e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80323ea:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80323ec:	4b82      	ldr	r3, [pc, #520]	; (80325f8 <HAL_RCC_OscConfig+0x4f8>)
 80323ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80323f0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80323f2:	69bb      	ldr	r3, [r7, #24]
 80323f4:	2b08      	cmp	r3, #8
 80323f6:	d007      	beq.n	8032408 <HAL_RCC_OscConfig+0x308>
 80323f8:	69bb      	ldr	r3, [r7, #24]
 80323fa:	2b18      	cmp	r3, #24
 80323fc:	d13a      	bne.n	8032474 <HAL_RCC_OscConfig+0x374>
 80323fe:	697b      	ldr	r3, [r7, #20]
 8032400:	f003 0303 	and.w	r3, r3, #3
 8032404:	2b01      	cmp	r3, #1
 8032406:	d135      	bne.n	8032474 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8032408:	4b7b      	ldr	r3, [pc, #492]	; (80325f8 <HAL_RCC_OscConfig+0x4f8>)
 803240a:	681b      	ldr	r3, [r3, #0]
 803240c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8032410:	2b00      	cmp	r3, #0
 8032412:	d005      	beq.n	8032420 <HAL_RCC_OscConfig+0x320>
 8032414:	687b      	ldr	r3, [r7, #4]
 8032416:	69db      	ldr	r3, [r3, #28]
 8032418:	2b80      	cmp	r3, #128	; 0x80
 803241a:	d001      	beq.n	8032420 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 803241c:	2301      	movs	r3, #1
 803241e:	e296      	b.n	803294e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8032420:	f7f9 feb6 	bl	802c190 <HAL_GetREVID>
 8032424:	4603      	mov	r3, r0
 8032426:	f241 0203 	movw	r2, #4099	; 0x1003
 803242a:	4293      	cmp	r3, r2
 803242c:	d817      	bhi.n	803245e <HAL_RCC_OscConfig+0x35e>
 803242e:	687b      	ldr	r3, [r7, #4]
 8032430:	6a1b      	ldr	r3, [r3, #32]
 8032432:	2b20      	cmp	r3, #32
 8032434:	d108      	bne.n	8032448 <HAL_RCC_OscConfig+0x348>
 8032436:	4b70      	ldr	r3, [pc, #448]	; (80325f8 <HAL_RCC_OscConfig+0x4f8>)
 8032438:	685b      	ldr	r3, [r3, #4]
 803243a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 803243e:	4a6e      	ldr	r2, [pc, #440]	; (80325f8 <HAL_RCC_OscConfig+0x4f8>)
 8032440:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8032444:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8032446:	e075      	b.n	8032534 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8032448:	4b6b      	ldr	r3, [pc, #428]	; (80325f8 <HAL_RCC_OscConfig+0x4f8>)
 803244a:	685b      	ldr	r3, [r3, #4]
 803244c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8032450:	687b      	ldr	r3, [r7, #4]
 8032452:	6a1b      	ldr	r3, [r3, #32]
 8032454:	069b      	lsls	r3, r3, #26
 8032456:	4968      	ldr	r1, [pc, #416]	; (80325f8 <HAL_RCC_OscConfig+0x4f8>)
 8032458:	4313      	orrs	r3, r2
 803245a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 803245c:	e06a      	b.n	8032534 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 803245e:	4b66      	ldr	r3, [pc, #408]	; (80325f8 <HAL_RCC_OscConfig+0x4f8>)
 8032460:	68db      	ldr	r3, [r3, #12]
 8032462:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8032466:	687b      	ldr	r3, [r7, #4]
 8032468:	6a1b      	ldr	r3, [r3, #32]
 803246a:	061b      	lsls	r3, r3, #24
 803246c:	4962      	ldr	r1, [pc, #392]	; (80325f8 <HAL_RCC_OscConfig+0x4f8>)
 803246e:	4313      	orrs	r3, r2
 8032470:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8032472:	e05f      	b.n	8032534 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8032474:	687b      	ldr	r3, [r7, #4]
 8032476:	69db      	ldr	r3, [r3, #28]
 8032478:	2b00      	cmp	r3, #0
 803247a:	d042      	beq.n	8032502 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 803247c:	4b5e      	ldr	r3, [pc, #376]	; (80325f8 <HAL_RCC_OscConfig+0x4f8>)
 803247e:	681b      	ldr	r3, [r3, #0]
 8032480:	4a5d      	ldr	r2, [pc, #372]	; (80325f8 <HAL_RCC_OscConfig+0x4f8>)
 8032482:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8032486:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8032488:	f7f9 fe52 	bl	802c130 <HAL_GetTick>
 803248c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 803248e:	e008      	b.n	80324a2 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8032490:	f7f9 fe4e 	bl	802c130 <HAL_GetTick>
 8032494:	4602      	mov	r2, r0
 8032496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8032498:	1ad3      	subs	r3, r2, r3
 803249a:	2b02      	cmp	r3, #2
 803249c:	d901      	bls.n	80324a2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 803249e:	2303      	movs	r3, #3
 80324a0:	e255      	b.n	803294e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80324a2:	4b55      	ldr	r3, [pc, #340]	; (80325f8 <HAL_RCC_OscConfig+0x4f8>)
 80324a4:	681b      	ldr	r3, [r3, #0]
 80324a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80324aa:	2b00      	cmp	r3, #0
 80324ac:	d0f0      	beq.n	8032490 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80324ae:	f7f9 fe6f 	bl	802c190 <HAL_GetREVID>
 80324b2:	4603      	mov	r3, r0
 80324b4:	f241 0203 	movw	r2, #4099	; 0x1003
 80324b8:	4293      	cmp	r3, r2
 80324ba:	d817      	bhi.n	80324ec <HAL_RCC_OscConfig+0x3ec>
 80324bc:	687b      	ldr	r3, [r7, #4]
 80324be:	6a1b      	ldr	r3, [r3, #32]
 80324c0:	2b20      	cmp	r3, #32
 80324c2:	d108      	bne.n	80324d6 <HAL_RCC_OscConfig+0x3d6>
 80324c4:	4b4c      	ldr	r3, [pc, #304]	; (80325f8 <HAL_RCC_OscConfig+0x4f8>)
 80324c6:	685b      	ldr	r3, [r3, #4]
 80324c8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80324cc:	4a4a      	ldr	r2, [pc, #296]	; (80325f8 <HAL_RCC_OscConfig+0x4f8>)
 80324ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80324d2:	6053      	str	r3, [r2, #4]
 80324d4:	e02e      	b.n	8032534 <HAL_RCC_OscConfig+0x434>
 80324d6:	4b48      	ldr	r3, [pc, #288]	; (80325f8 <HAL_RCC_OscConfig+0x4f8>)
 80324d8:	685b      	ldr	r3, [r3, #4]
 80324da:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80324de:	687b      	ldr	r3, [r7, #4]
 80324e0:	6a1b      	ldr	r3, [r3, #32]
 80324e2:	069b      	lsls	r3, r3, #26
 80324e4:	4944      	ldr	r1, [pc, #272]	; (80325f8 <HAL_RCC_OscConfig+0x4f8>)
 80324e6:	4313      	orrs	r3, r2
 80324e8:	604b      	str	r3, [r1, #4]
 80324ea:	e023      	b.n	8032534 <HAL_RCC_OscConfig+0x434>
 80324ec:	4b42      	ldr	r3, [pc, #264]	; (80325f8 <HAL_RCC_OscConfig+0x4f8>)
 80324ee:	68db      	ldr	r3, [r3, #12]
 80324f0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80324f4:	687b      	ldr	r3, [r7, #4]
 80324f6:	6a1b      	ldr	r3, [r3, #32]
 80324f8:	061b      	lsls	r3, r3, #24
 80324fa:	493f      	ldr	r1, [pc, #252]	; (80325f8 <HAL_RCC_OscConfig+0x4f8>)
 80324fc:	4313      	orrs	r3, r2
 80324fe:	60cb      	str	r3, [r1, #12]
 8032500:	e018      	b.n	8032534 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8032502:	4b3d      	ldr	r3, [pc, #244]	; (80325f8 <HAL_RCC_OscConfig+0x4f8>)
 8032504:	681b      	ldr	r3, [r3, #0]
 8032506:	4a3c      	ldr	r2, [pc, #240]	; (80325f8 <HAL_RCC_OscConfig+0x4f8>)
 8032508:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 803250c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 803250e:	f7f9 fe0f 	bl	802c130 <HAL_GetTick>
 8032512:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8032514:	e008      	b.n	8032528 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8032516:	f7f9 fe0b 	bl	802c130 <HAL_GetTick>
 803251a:	4602      	mov	r2, r0
 803251c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803251e:	1ad3      	subs	r3, r2, r3
 8032520:	2b02      	cmp	r3, #2
 8032522:	d901      	bls.n	8032528 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8032524:	2303      	movs	r3, #3
 8032526:	e212      	b.n	803294e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8032528:	4b33      	ldr	r3, [pc, #204]	; (80325f8 <HAL_RCC_OscConfig+0x4f8>)
 803252a:	681b      	ldr	r3, [r3, #0]
 803252c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8032530:	2b00      	cmp	r3, #0
 8032532:	d1f0      	bne.n	8032516 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8032534:	687b      	ldr	r3, [r7, #4]
 8032536:	681b      	ldr	r3, [r3, #0]
 8032538:	f003 0308 	and.w	r3, r3, #8
 803253c:	2b00      	cmp	r3, #0
 803253e:	d036      	beq.n	80325ae <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8032540:	687b      	ldr	r3, [r7, #4]
 8032542:	695b      	ldr	r3, [r3, #20]
 8032544:	2b00      	cmp	r3, #0
 8032546:	d019      	beq.n	803257c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8032548:	4b2b      	ldr	r3, [pc, #172]	; (80325f8 <HAL_RCC_OscConfig+0x4f8>)
 803254a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 803254c:	4a2a      	ldr	r2, [pc, #168]	; (80325f8 <HAL_RCC_OscConfig+0x4f8>)
 803254e:	f043 0301 	orr.w	r3, r3, #1
 8032552:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8032554:	f7f9 fdec 	bl	802c130 <HAL_GetTick>
 8032558:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 803255a:	e008      	b.n	803256e <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 803255c:	f7f9 fde8 	bl	802c130 <HAL_GetTick>
 8032560:	4602      	mov	r2, r0
 8032562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8032564:	1ad3      	subs	r3, r2, r3
 8032566:	2b02      	cmp	r3, #2
 8032568:	d901      	bls.n	803256e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 803256a:	2303      	movs	r3, #3
 803256c:	e1ef      	b.n	803294e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 803256e:	4b22      	ldr	r3, [pc, #136]	; (80325f8 <HAL_RCC_OscConfig+0x4f8>)
 8032570:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8032572:	f003 0302 	and.w	r3, r3, #2
 8032576:	2b00      	cmp	r3, #0
 8032578:	d0f0      	beq.n	803255c <HAL_RCC_OscConfig+0x45c>
 803257a:	e018      	b.n	80325ae <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 803257c:	4b1e      	ldr	r3, [pc, #120]	; (80325f8 <HAL_RCC_OscConfig+0x4f8>)
 803257e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8032580:	4a1d      	ldr	r2, [pc, #116]	; (80325f8 <HAL_RCC_OscConfig+0x4f8>)
 8032582:	f023 0301 	bic.w	r3, r3, #1
 8032586:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8032588:	f7f9 fdd2 	bl	802c130 <HAL_GetTick>
 803258c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 803258e:	e008      	b.n	80325a2 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8032590:	f7f9 fdce 	bl	802c130 <HAL_GetTick>
 8032594:	4602      	mov	r2, r0
 8032596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8032598:	1ad3      	subs	r3, r2, r3
 803259a:	2b02      	cmp	r3, #2
 803259c:	d901      	bls.n	80325a2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 803259e:	2303      	movs	r3, #3
 80325a0:	e1d5      	b.n	803294e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80325a2:	4b15      	ldr	r3, [pc, #84]	; (80325f8 <HAL_RCC_OscConfig+0x4f8>)
 80325a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80325a6:	f003 0302 	and.w	r3, r3, #2
 80325aa:	2b00      	cmp	r3, #0
 80325ac:	d1f0      	bne.n	8032590 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80325ae:	687b      	ldr	r3, [r7, #4]
 80325b0:	681b      	ldr	r3, [r3, #0]
 80325b2:	f003 0320 	and.w	r3, r3, #32
 80325b6:	2b00      	cmp	r3, #0
 80325b8:	d039      	beq.n	803262e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80325ba:	687b      	ldr	r3, [r7, #4]
 80325bc:	699b      	ldr	r3, [r3, #24]
 80325be:	2b00      	cmp	r3, #0
 80325c0:	d01c      	beq.n	80325fc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80325c2:	4b0d      	ldr	r3, [pc, #52]	; (80325f8 <HAL_RCC_OscConfig+0x4f8>)
 80325c4:	681b      	ldr	r3, [r3, #0]
 80325c6:	4a0c      	ldr	r2, [pc, #48]	; (80325f8 <HAL_RCC_OscConfig+0x4f8>)
 80325c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80325cc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80325ce:	f7f9 fdaf 	bl	802c130 <HAL_GetTick>
 80325d2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80325d4:	e008      	b.n	80325e8 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80325d6:	f7f9 fdab 	bl	802c130 <HAL_GetTick>
 80325da:	4602      	mov	r2, r0
 80325dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80325de:	1ad3      	subs	r3, r2, r3
 80325e0:	2b02      	cmp	r3, #2
 80325e2:	d901      	bls.n	80325e8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80325e4:	2303      	movs	r3, #3
 80325e6:	e1b2      	b.n	803294e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80325e8:	4b03      	ldr	r3, [pc, #12]	; (80325f8 <HAL_RCC_OscConfig+0x4f8>)
 80325ea:	681b      	ldr	r3, [r3, #0]
 80325ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80325f0:	2b00      	cmp	r3, #0
 80325f2:	d0f0      	beq.n	80325d6 <HAL_RCC_OscConfig+0x4d6>
 80325f4:	e01b      	b.n	803262e <HAL_RCC_OscConfig+0x52e>
 80325f6:	bf00      	nop
 80325f8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80325fc:	4b9b      	ldr	r3, [pc, #620]	; (803286c <HAL_RCC_OscConfig+0x76c>)
 80325fe:	681b      	ldr	r3, [r3, #0]
 8032600:	4a9a      	ldr	r2, [pc, #616]	; (803286c <HAL_RCC_OscConfig+0x76c>)
 8032602:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8032606:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8032608:	f7f9 fd92 	bl	802c130 <HAL_GetTick>
 803260c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 803260e:	e008      	b.n	8032622 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8032610:	f7f9 fd8e 	bl	802c130 <HAL_GetTick>
 8032614:	4602      	mov	r2, r0
 8032616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8032618:	1ad3      	subs	r3, r2, r3
 803261a:	2b02      	cmp	r3, #2
 803261c:	d901      	bls.n	8032622 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 803261e:	2303      	movs	r3, #3
 8032620:	e195      	b.n	803294e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8032622:	4b92      	ldr	r3, [pc, #584]	; (803286c <HAL_RCC_OscConfig+0x76c>)
 8032624:	681b      	ldr	r3, [r3, #0]
 8032626:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 803262a:	2b00      	cmp	r3, #0
 803262c:	d1f0      	bne.n	8032610 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 803262e:	687b      	ldr	r3, [r7, #4]
 8032630:	681b      	ldr	r3, [r3, #0]
 8032632:	f003 0304 	and.w	r3, r3, #4
 8032636:	2b00      	cmp	r3, #0
 8032638:	f000 8081 	beq.w	803273e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 803263c:	4b8c      	ldr	r3, [pc, #560]	; (8032870 <HAL_RCC_OscConfig+0x770>)
 803263e:	681b      	ldr	r3, [r3, #0]
 8032640:	4a8b      	ldr	r2, [pc, #556]	; (8032870 <HAL_RCC_OscConfig+0x770>)
 8032642:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8032646:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8032648:	f7f9 fd72 	bl	802c130 <HAL_GetTick>
 803264c:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 803264e:	e008      	b.n	8032662 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8032650:	f7f9 fd6e 	bl	802c130 <HAL_GetTick>
 8032654:	4602      	mov	r2, r0
 8032656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8032658:	1ad3      	subs	r3, r2, r3
 803265a:	2b64      	cmp	r3, #100	; 0x64
 803265c:	d901      	bls.n	8032662 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 803265e:	2303      	movs	r3, #3
 8032660:	e175      	b.n	803294e <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8032662:	4b83      	ldr	r3, [pc, #524]	; (8032870 <HAL_RCC_OscConfig+0x770>)
 8032664:	681b      	ldr	r3, [r3, #0]
 8032666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 803266a:	2b00      	cmp	r3, #0
 803266c:	d0f0      	beq.n	8032650 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 803266e:	687b      	ldr	r3, [r7, #4]
 8032670:	689b      	ldr	r3, [r3, #8]
 8032672:	2b01      	cmp	r3, #1
 8032674:	d106      	bne.n	8032684 <HAL_RCC_OscConfig+0x584>
 8032676:	4b7d      	ldr	r3, [pc, #500]	; (803286c <HAL_RCC_OscConfig+0x76c>)
 8032678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 803267a:	4a7c      	ldr	r2, [pc, #496]	; (803286c <HAL_RCC_OscConfig+0x76c>)
 803267c:	f043 0301 	orr.w	r3, r3, #1
 8032680:	6713      	str	r3, [r2, #112]	; 0x70
 8032682:	e02d      	b.n	80326e0 <HAL_RCC_OscConfig+0x5e0>
 8032684:	687b      	ldr	r3, [r7, #4]
 8032686:	689b      	ldr	r3, [r3, #8]
 8032688:	2b00      	cmp	r3, #0
 803268a:	d10c      	bne.n	80326a6 <HAL_RCC_OscConfig+0x5a6>
 803268c:	4b77      	ldr	r3, [pc, #476]	; (803286c <HAL_RCC_OscConfig+0x76c>)
 803268e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8032690:	4a76      	ldr	r2, [pc, #472]	; (803286c <HAL_RCC_OscConfig+0x76c>)
 8032692:	f023 0301 	bic.w	r3, r3, #1
 8032696:	6713      	str	r3, [r2, #112]	; 0x70
 8032698:	4b74      	ldr	r3, [pc, #464]	; (803286c <HAL_RCC_OscConfig+0x76c>)
 803269a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 803269c:	4a73      	ldr	r2, [pc, #460]	; (803286c <HAL_RCC_OscConfig+0x76c>)
 803269e:	f023 0304 	bic.w	r3, r3, #4
 80326a2:	6713      	str	r3, [r2, #112]	; 0x70
 80326a4:	e01c      	b.n	80326e0 <HAL_RCC_OscConfig+0x5e0>
 80326a6:	687b      	ldr	r3, [r7, #4]
 80326a8:	689b      	ldr	r3, [r3, #8]
 80326aa:	2b05      	cmp	r3, #5
 80326ac:	d10c      	bne.n	80326c8 <HAL_RCC_OscConfig+0x5c8>
 80326ae:	4b6f      	ldr	r3, [pc, #444]	; (803286c <HAL_RCC_OscConfig+0x76c>)
 80326b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80326b2:	4a6e      	ldr	r2, [pc, #440]	; (803286c <HAL_RCC_OscConfig+0x76c>)
 80326b4:	f043 0304 	orr.w	r3, r3, #4
 80326b8:	6713      	str	r3, [r2, #112]	; 0x70
 80326ba:	4b6c      	ldr	r3, [pc, #432]	; (803286c <HAL_RCC_OscConfig+0x76c>)
 80326bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80326be:	4a6b      	ldr	r2, [pc, #428]	; (803286c <HAL_RCC_OscConfig+0x76c>)
 80326c0:	f043 0301 	orr.w	r3, r3, #1
 80326c4:	6713      	str	r3, [r2, #112]	; 0x70
 80326c6:	e00b      	b.n	80326e0 <HAL_RCC_OscConfig+0x5e0>
 80326c8:	4b68      	ldr	r3, [pc, #416]	; (803286c <HAL_RCC_OscConfig+0x76c>)
 80326ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80326cc:	4a67      	ldr	r2, [pc, #412]	; (803286c <HAL_RCC_OscConfig+0x76c>)
 80326ce:	f023 0301 	bic.w	r3, r3, #1
 80326d2:	6713      	str	r3, [r2, #112]	; 0x70
 80326d4:	4b65      	ldr	r3, [pc, #404]	; (803286c <HAL_RCC_OscConfig+0x76c>)
 80326d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80326d8:	4a64      	ldr	r2, [pc, #400]	; (803286c <HAL_RCC_OscConfig+0x76c>)
 80326da:	f023 0304 	bic.w	r3, r3, #4
 80326de:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80326e0:	687b      	ldr	r3, [r7, #4]
 80326e2:	689b      	ldr	r3, [r3, #8]
 80326e4:	2b00      	cmp	r3, #0
 80326e6:	d015      	beq.n	8032714 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80326e8:	f7f9 fd22 	bl	802c130 <HAL_GetTick>
 80326ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80326ee:	e00a      	b.n	8032706 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80326f0:	f7f9 fd1e 	bl	802c130 <HAL_GetTick>
 80326f4:	4602      	mov	r2, r0
 80326f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80326f8:	1ad3      	subs	r3, r2, r3
 80326fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80326fe:	4293      	cmp	r3, r2
 8032700:	d901      	bls.n	8032706 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8032702:	2303      	movs	r3, #3
 8032704:	e123      	b.n	803294e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8032706:	4b59      	ldr	r3, [pc, #356]	; (803286c <HAL_RCC_OscConfig+0x76c>)
 8032708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 803270a:	f003 0302 	and.w	r3, r3, #2
 803270e:	2b00      	cmp	r3, #0
 8032710:	d0ee      	beq.n	80326f0 <HAL_RCC_OscConfig+0x5f0>
 8032712:	e014      	b.n	803273e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8032714:	f7f9 fd0c 	bl	802c130 <HAL_GetTick>
 8032718:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 803271a:	e00a      	b.n	8032732 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 803271c:	f7f9 fd08 	bl	802c130 <HAL_GetTick>
 8032720:	4602      	mov	r2, r0
 8032722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8032724:	1ad3      	subs	r3, r2, r3
 8032726:	f241 3288 	movw	r2, #5000	; 0x1388
 803272a:	4293      	cmp	r3, r2
 803272c:	d901      	bls.n	8032732 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 803272e:	2303      	movs	r3, #3
 8032730:	e10d      	b.n	803294e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8032732:	4b4e      	ldr	r3, [pc, #312]	; (803286c <HAL_RCC_OscConfig+0x76c>)
 8032734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8032736:	f003 0302 	and.w	r3, r3, #2
 803273a:	2b00      	cmp	r3, #0
 803273c:	d1ee      	bne.n	803271c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 803273e:	687b      	ldr	r3, [r7, #4]
 8032740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8032742:	2b00      	cmp	r3, #0
 8032744:	f000 8102 	beq.w	803294c <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8032748:	4b48      	ldr	r3, [pc, #288]	; (803286c <HAL_RCC_OscConfig+0x76c>)
 803274a:	691b      	ldr	r3, [r3, #16]
 803274c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8032750:	2b18      	cmp	r3, #24
 8032752:	f000 80bd 	beq.w	80328d0 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8032756:	687b      	ldr	r3, [r7, #4]
 8032758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803275a:	2b02      	cmp	r3, #2
 803275c:	f040 809e 	bne.w	803289c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8032760:	4b42      	ldr	r3, [pc, #264]	; (803286c <HAL_RCC_OscConfig+0x76c>)
 8032762:	681b      	ldr	r3, [r3, #0]
 8032764:	4a41      	ldr	r2, [pc, #260]	; (803286c <HAL_RCC_OscConfig+0x76c>)
 8032766:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 803276a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 803276c:	f7f9 fce0 	bl	802c130 <HAL_GetTick>
 8032770:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8032772:	e008      	b.n	8032786 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8032774:	f7f9 fcdc 	bl	802c130 <HAL_GetTick>
 8032778:	4602      	mov	r2, r0
 803277a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803277c:	1ad3      	subs	r3, r2, r3
 803277e:	2b02      	cmp	r3, #2
 8032780:	d901      	bls.n	8032786 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8032782:	2303      	movs	r3, #3
 8032784:	e0e3      	b.n	803294e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8032786:	4b39      	ldr	r3, [pc, #228]	; (803286c <HAL_RCC_OscConfig+0x76c>)
 8032788:	681b      	ldr	r3, [r3, #0]
 803278a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 803278e:	2b00      	cmp	r3, #0
 8032790:	d1f0      	bne.n	8032774 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8032792:	4b36      	ldr	r3, [pc, #216]	; (803286c <HAL_RCC_OscConfig+0x76c>)
 8032794:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8032796:	4b37      	ldr	r3, [pc, #220]	; (8032874 <HAL_RCC_OscConfig+0x774>)
 8032798:	4013      	ands	r3, r2
 803279a:	687a      	ldr	r2, [r7, #4]
 803279c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 803279e:	687a      	ldr	r2, [r7, #4]
 80327a0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80327a2:	0112      	lsls	r2, r2, #4
 80327a4:	430a      	orrs	r2, r1
 80327a6:	4931      	ldr	r1, [pc, #196]	; (803286c <HAL_RCC_OscConfig+0x76c>)
 80327a8:	4313      	orrs	r3, r2
 80327aa:	628b      	str	r3, [r1, #40]	; 0x28
 80327ac:	687b      	ldr	r3, [r7, #4]
 80327ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80327b0:	3b01      	subs	r3, #1
 80327b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80327b6:	687b      	ldr	r3, [r7, #4]
 80327b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80327ba:	3b01      	subs	r3, #1
 80327bc:	025b      	lsls	r3, r3, #9
 80327be:	b29b      	uxth	r3, r3
 80327c0:	431a      	orrs	r2, r3
 80327c2:	687b      	ldr	r3, [r7, #4]
 80327c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80327c6:	3b01      	subs	r3, #1
 80327c8:	041b      	lsls	r3, r3, #16
 80327ca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80327ce:	431a      	orrs	r2, r3
 80327d0:	687b      	ldr	r3, [r7, #4]
 80327d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80327d4:	3b01      	subs	r3, #1
 80327d6:	061b      	lsls	r3, r3, #24
 80327d8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80327dc:	4923      	ldr	r1, [pc, #140]	; (803286c <HAL_RCC_OscConfig+0x76c>)
 80327de:	4313      	orrs	r3, r2
 80327e0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80327e2:	4b22      	ldr	r3, [pc, #136]	; (803286c <HAL_RCC_OscConfig+0x76c>)
 80327e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80327e6:	4a21      	ldr	r2, [pc, #132]	; (803286c <HAL_RCC_OscConfig+0x76c>)
 80327e8:	f023 0301 	bic.w	r3, r3, #1
 80327ec:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80327ee:	4b1f      	ldr	r3, [pc, #124]	; (803286c <HAL_RCC_OscConfig+0x76c>)
 80327f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80327f2:	4b21      	ldr	r3, [pc, #132]	; (8032878 <HAL_RCC_OscConfig+0x778>)
 80327f4:	4013      	ands	r3, r2
 80327f6:	687a      	ldr	r2, [r7, #4]
 80327f8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80327fa:	00d2      	lsls	r2, r2, #3
 80327fc:	491b      	ldr	r1, [pc, #108]	; (803286c <HAL_RCC_OscConfig+0x76c>)
 80327fe:	4313      	orrs	r3, r2
 8032800:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8032802:	4b1a      	ldr	r3, [pc, #104]	; (803286c <HAL_RCC_OscConfig+0x76c>)
 8032804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8032806:	f023 020c 	bic.w	r2, r3, #12
 803280a:	687b      	ldr	r3, [r7, #4]
 803280c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 803280e:	4917      	ldr	r1, [pc, #92]	; (803286c <HAL_RCC_OscConfig+0x76c>)
 8032810:	4313      	orrs	r3, r2
 8032812:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8032814:	4b15      	ldr	r3, [pc, #84]	; (803286c <HAL_RCC_OscConfig+0x76c>)
 8032816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8032818:	f023 0202 	bic.w	r2, r3, #2
 803281c:	687b      	ldr	r3, [r7, #4]
 803281e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8032820:	4912      	ldr	r1, [pc, #72]	; (803286c <HAL_RCC_OscConfig+0x76c>)
 8032822:	4313      	orrs	r3, r2
 8032824:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8032826:	4b11      	ldr	r3, [pc, #68]	; (803286c <HAL_RCC_OscConfig+0x76c>)
 8032828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803282a:	4a10      	ldr	r2, [pc, #64]	; (803286c <HAL_RCC_OscConfig+0x76c>)
 803282c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8032830:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8032832:	4b0e      	ldr	r3, [pc, #56]	; (803286c <HAL_RCC_OscConfig+0x76c>)
 8032834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8032836:	4a0d      	ldr	r2, [pc, #52]	; (803286c <HAL_RCC_OscConfig+0x76c>)
 8032838:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 803283c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 803283e:	4b0b      	ldr	r3, [pc, #44]	; (803286c <HAL_RCC_OscConfig+0x76c>)
 8032840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8032842:	4a0a      	ldr	r2, [pc, #40]	; (803286c <HAL_RCC_OscConfig+0x76c>)
 8032844:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8032848:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 803284a:	4b08      	ldr	r3, [pc, #32]	; (803286c <HAL_RCC_OscConfig+0x76c>)
 803284c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803284e:	4a07      	ldr	r2, [pc, #28]	; (803286c <HAL_RCC_OscConfig+0x76c>)
 8032850:	f043 0301 	orr.w	r3, r3, #1
 8032854:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8032856:	4b05      	ldr	r3, [pc, #20]	; (803286c <HAL_RCC_OscConfig+0x76c>)
 8032858:	681b      	ldr	r3, [r3, #0]
 803285a:	4a04      	ldr	r2, [pc, #16]	; (803286c <HAL_RCC_OscConfig+0x76c>)
 803285c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8032860:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8032862:	f7f9 fc65 	bl	802c130 <HAL_GetTick>
 8032866:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8032868:	e011      	b.n	803288e <HAL_RCC_OscConfig+0x78e>
 803286a:	bf00      	nop
 803286c:	58024400 	.word	0x58024400
 8032870:	58024800 	.word	0x58024800
 8032874:	fffffc0c 	.word	0xfffffc0c
 8032878:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 803287c:	f7f9 fc58 	bl	802c130 <HAL_GetTick>
 8032880:	4602      	mov	r2, r0
 8032882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8032884:	1ad3      	subs	r3, r2, r3
 8032886:	2b02      	cmp	r3, #2
 8032888:	d901      	bls.n	803288e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 803288a:	2303      	movs	r3, #3
 803288c:	e05f      	b.n	803294e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 803288e:	4b32      	ldr	r3, [pc, #200]	; (8032958 <HAL_RCC_OscConfig+0x858>)
 8032890:	681b      	ldr	r3, [r3, #0]
 8032892:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8032896:	2b00      	cmp	r3, #0
 8032898:	d0f0      	beq.n	803287c <HAL_RCC_OscConfig+0x77c>
 803289a:	e057      	b.n	803294c <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 803289c:	4b2e      	ldr	r3, [pc, #184]	; (8032958 <HAL_RCC_OscConfig+0x858>)
 803289e:	681b      	ldr	r3, [r3, #0]
 80328a0:	4a2d      	ldr	r2, [pc, #180]	; (8032958 <HAL_RCC_OscConfig+0x858>)
 80328a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80328a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80328a8:	f7f9 fc42 	bl	802c130 <HAL_GetTick>
 80328ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80328ae:	e008      	b.n	80328c2 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80328b0:	f7f9 fc3e 	bl	802c130 <HAL_GetTick>
 80328b4:	4602      	mov	r2, r0
 80328b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80328b8:	1ad3      	subs	r3, r2, r3
 80328ba:	2b02      	cmp	r3, #2
 80328bc:	d901      	bls.n	80328c2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80328be:	2303      	movs	r3, #3
 80328c0:	e045      	b.n	803294e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80328c2:	4b25      	ldr	r3, [pc, #148]	; (8032958 <HAL_RCC_OscConfig+0x858>)
 80328c4:	681b      	ldr	r3, [r3, #0]
 80328c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80328ca:	2b00      	cmp	r3, #0
 80328cc:	d1f0      	bne.n	80328b0 <HAL_RCC_OscConfig+0x7b0>
 80328ce:	e03d      	b.n	803294c <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80328d0:	4b21      	ldr	r3, [pc, #132]	; (8032958 <HAL_RCC_OscConfig+0x858>)
 80328d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80328d4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80328d6:	4b20      	ldr	r3, [pc, #128]	; (8032958 <HAL_RCC_OscConfig+0x858>)
 80328d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80328da:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80328dc:	687b      	ldr	r3, [r7, #4]
 80328de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80328e0:	2b01      	cmp	r3, #1
 80328e2:	d031      	beq.n	8032948 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80328e4:	693b      	ldr	r3, [r7, #16]
 80328e6:	f003 0203 	and.w	r2, r3, #3
 80328ea:	687b      	ldr	r3, [r7, #4]
 80328ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80328ee:	429a      	cmp	r2, r3
 80328f0:	d12a      	bne.n	8032948 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80328f2:	693b      	ldr	r3, [r7, #16]
 80328f4:	091b      	lsrs	r3, r3, #4
 80328f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80328fa:	687b      	ldr	r3, [r7, #4]
 80328fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80328fe:	429a      	cmp	r2, r3
 8032900:	d122      	bne.n	8032948 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8032902:	68fb      	ldr	r3, [r7, #12]
 8032904:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8032908:	687b      	ldr	r3, [r7, #4]
 803290a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 803290c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 803290e:	429a      	cmp	r2, r3
 8032910:	d11a      	bne.n	8032948 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8032912:	68fb      	ldr	r3, [r7, #12]
 8032914:	0a5b      	lsrs	r3, r3, #9
 8032916:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 803291a:	687b      	ldr	r3, [r7, #4]
 803291c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 803291e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8032920:	429a      	cmp	r2, r3
 8032922:	d111      	bne.n	8032948 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8032924:	68fb      	ldr	r3, [r7, #12]
 8032926:	0c1b      	lsrs	r3, r3, #16
 8032928:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 803292c:	687b      	ldr	r3, [r7, #4]
 803292e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8032930:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8032932:	429a      	cmp	r2, r3
 8032934:	d108      	bne.n	8032948 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8032936:	68fb      	ldr	r3, [r7, #12]
 8032938:	0e1b      	lsrs	r3, r3, #24
 803293a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 803293e:	687b      	ldr	r3, [r7, #4]
 8032940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8032942:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8032944:	429a      	cmp	r2, r3
 8032946:	d001      	beq.n	803294c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8032948:	2301      	movs	r3, #1
 803294a:	e000      	b.n	803294e <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 803294c:	2300      	movs	r3, #0
}
 803294e:	4618      	mov	r0, r3
 8032950:	3730      	adds	r7, #48	; 0x30
 8032952:	46bd      	mov	sp, r7
 8032954:	bd80      	pop	{r7, pc}
 8032956:	bf00      	nop
 8032958:	58024400 	.word	0x58024400

0803295c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 803295c:	b580      	push	{r7, lr}
 803295e:	b086      	sub	sp, #24
 8032960:	af00      	add	r7, sp, #0
 8032962:	6078      	str	r0, [r7, #4]
 8032964:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8032966:	687b      	ldr	r3, [r7, #4]
 8032968:	2b00      	cmp	r3, #0
 803296a:	d101      	bne.n	8032970 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 803296c:	2301      	movs	r3, #1
 803296e:	e19c      	b.n	8032caa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8032970:	4b8a      	ldr	r3, [pc, #552]	; (8032b9c <HAL_RCC_ClockConfig+0x240>)
 8032972:	681b      	ldr	r3, [r3, #0]
 8032974:	f003 030f 	and.w	r3, r3, #15
 8032978:	683a      	ldr	r2, [r7, #0]
 803297a:	429a      	cmp	r2, r3
 803297c:	d910      	bls.n	80329a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 803297e:	4b87      	ldr	r3, [pc, #540]	; (8032b9c <HAL_RCC_ClockConfig+0x240>)
 8032980:	681b      	ldr	r3, [r3, #0]
 8032982:	f023 020f 	bic.w	r2, r3, #15
 8032986:	4985      	ldr	r1, [pc, #532]	; (8032b9c <HAL_RCC_ClockConfig+0x240>)
 8032988:	683b      	ldr	r3, [r7, #0]
 803298a:	4313      	orrs	r3, r2
 803298c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 803298e:	4b83      	ldr	r3, [pc, #524]	; (8032b9c <HAL_RCC_ClockConfig+0x240>)
 8032990:	681b      	ldr	r3, [r3, #0]
 8032992:	f003 030f 	and.w	r3, r3, #15
 8032996:	683a      	ldr	r2, [r7, #0]
 8032998:	429a      	cmp	r2, r3
 803299a:	d001      	beq.n	80329a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 803299c:	2301      	movs	r3, #1
 803299e:	e184      	b.n	8032caa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80329a0:	687b      	ldr	r3, [r7, #4]
 80329a2:	681b      	ldr	r3, [r3, #0]
 80329a4:	f003 0304 	and.w	r3, r3, #4
 80329a8:	2b00      	cmp	r3, #0
 80329aa:	d010      	beq.n	80329ce <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80329ac:	687b      	ldr	r3, [r7, #4]
 80329ae:	691a      	ldr	r2, [r3, #16]
 80329b0:	4b7b      	ldr	r3, [pc, #492]	; (8032ba0 <HAL_RCC_ClockConfig+0x244>)
 80329b2:	699b      	ldr	r3, [r3, #24]
 80329b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80329b8:	429a      	cmp	r2, r3
 80329ba:	d908      	bls.n	80329ce <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80329bc:	4b78      	ldr	r3, [pc, #480]	; (8032ba0 <HAL_RCC_ClockConfig+0x244>)
 80329be:	699b      	ldr	r3, [r3, #24]
 80329c0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80329c4:	687b      	ldr	r3, [r7, #4]
 80329c6:	691b      	ldr	r3, [r3, #16]
 80329c8:	4975      	ldr	r1, [pc, #468]	; (8032ba0 <HAL_RCC_ClockConfig+0x244>)
 80329ca:	4313      	orrs	r3, r2
 80329cc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80329ce:	687b      	ldr	r3, [r7, #4]
 80329d0:	681b      	ldr	r3, [r3, #0]
 80329d2:	f003 0308 	and.w	r3, r3, #8
 80329d6:	2b00      	cmp	r3, #0
 80329d8:	d010      	beq.n	80329fc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80329da:	687b      	ldr	r3, [r7, #4]
 80329dc:	695a      	ldr	r2, [r3, #20]
 80329de:	4b70      	ldr	r3, [pc, #448]	; (8032ba0 <HAL_RCC_ClockConfig+0x244>)
 80329e0:	69db      	ldr	r3, [r3, #28]
 80329e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80329e6:	429a      	cmp	r2, r3
 80329e8:	d908      	bls.n	80329fc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80329ea:	4b6d      	ldr	r3, [pc, #436]	; (8032ba0 <HAL_RCC_ClockConfig+0x244>)
 80329ec:	69db      	ldr	r3, [r3, #28]
 80329ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80329f2:	687b      	ldr	r3, [r7, #4]
 80329f4:	695b      	ldr	r3, [r3, #20]
 80329f6:	496a      	ldr	r1, [pc, #424]	; (8032ba0 <HAL_RCC_ClockConfig+0x244>)
 80329f8:	4313      	orrs	r3, r2
 80329fa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80329fc:	687b      	ldr	r3, [r7, #4]
 80329fe:	681b      	ldr	r3, [r3, #0]
 8032a00:	f003 0310 	and.w	r3, r3, #16
 8032a04:	2b00      	cmp	r3, #0
 8032a06:	d010      	beq.n	8032a2a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8032a08:	687b      	ldr	r3, [r7, #4]
 8032a0a:	699a      	ldr	r2, [r3, #24]
 8032a0c:	4b64      	ldr	r3, [pc, #400]	; (8032ba0 <HAL_RCC_ClockConfig+0x244>)
 8032a0e:	69db      	ldr	r3, [r3, #28]
 8032a10:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8032a14:	429a      	cmp	r2, r3
 8032a16:	d908      	bls.n	8032a2a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8032a18:	4b61      	ldr	r3, [pc, #388]	; (8032ba0 <HAL_RCC_ClockConfig+0x244>)
 8032a1a:	69db      	ldr	r3, [r3, #28]
 8032a1c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8032a20:	687b      	ldr	r3, [r7, #4]
 8032a22:	699b      	ldr	r3, [r3, #24]
 8032a24:	495e      	ldr	r1, [pc, #376]	; (8032ba0 <HAL_RCC_ClockConfig+0x244>)
 8032a26:	4313      	orrs	r3, r2
 8032a28:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8032a2a:	687b      	ldr	r3, [r7, #4]
 8032a2c:	681b      	ldr	r3, [r3, #0]
 8032a2e:	f003 0320 	and.w	r3, r3, #32
 8032a32:	2b00      	cmp	r3, #0
 8032a34:	d010      	beq.n	8032a58 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8032a36:	687b      	ldr	r3, [r7, #4]
 8032a38:	69da      	ldr	r2, [r3, #28]
 8032a3a:	4b59      	ldr	r3, [pc, #356]	; (8032ba0 <HAL_RCC_ClockConfig+0x244>)
 8032a3c:	6a1b      	ldr	r3, [r3, #32]
 8032a3e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8032a42:	429a      	cmp	r2, r3
 8032a44:	d908      	bls.n	8032a58 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8032a46:	4b56      	ldr	r3, [pc, #344]	; (8032ba0 <HAL_RCC_ClockConfig+0x244>)
 8032a48:	6a1b      	ldr	r3, [r3, #32]
 8032a4a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8032a4e:	687b      	ldr	r3, [r7, #4]
 8032a50:	69db      	ldr	r3, [r3, #28]
 8032a52:	4953      	ldr	r1, [pc, #332]	; (8032ba0 <HAL_RCC_ClockConfig+0x244>)
 8032a54:	4313      	orrs	r3, r2
 8032a56:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8032a58:	687b      	ldr	r3, [r7, #4]
 8032a5a:	681b      	ldr	r3, [r3, #0]
 8032a5c:	f003 0302 	and.w	r3, r3, #2
 8032a60:	2b00      	cmp	r3, #0
 8032a62:	d010      	beq.n	8032a86 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8032a64:	687b      	ldr	r3, [r7, #4]
 8032a66:	68da      	ldr	r2, [r3, #12]
 8032a68:	4b4d      	ldr	r3, [pc, #308]	; (8032ba0 <HAL_RCC_ClockConfig+0x244>)
 8032a6a:	699b      	ldr	r3, [r3, #24]
 8032a6c:	f003 030f 	and.w	r3, r3, #15
 8032a70:	429a      	cmp	r2, r3
 8032a72:	d908      	bls.n	8032a86 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8032a74:	4b4a      	ldr	r3, [pc, #296]	; (8032ba0 <HAL_RCC_ClockConfig+0x244>)
 8032a76:	699b      	ldr	r3, [r3, #24]
 8032a78:	f023 020f 	bic.w	r2, r3, #15
 8032a7c:	687b      	ldr	r3, [r7, #4]
 8032a7e:	68db      	ldr	r3, [r3, #12]
 8032a80:	4947      	ldr	r1, [pc, #284]	; (8032ba0 <HAL_RCC_ClockConfig+0x244>)
 8032a82:	4313      	orrs	r3, r2
 8032a84:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8032a86:	687b      	ldr	r3, [r7, #4]
 8032a88:	681b      	ldr	r3, [r3, #0]
 8032a8a:	f003 0301 	and.w	r3, r3, #1
 8032a8e:	2b00      	cmp	r3, #0
 8032a90:	d055      	beq.n	8032b3e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8032a92:	4b43      	ldr	r3, [pc, #268]	; (8032ba0 <HAL_RCC_ClockConfig+0x244>)
 8032a94:	699b      	ldr	r3, [r3, #24]
 8032a96:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8032a9a:	687b      	ldr	r3, [r7, #4]
 8032a9c:	689b      	ldr	r3, [r3, #8]
 8032a9e:	4940      	ldr	r1, [pc, #256]	; (8032ba0 <HAL_RCC_ClockConfig+0x244>)
 8032aa0:	4313      	orrs	r3, r2
 8032aa2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8032aa4:	687b      	ldr	r3, [r7, #4]
 8032aa6:	685b      	ldr	r3, [r3, #4]
 8032aa8:	2b02      	cmp	r3, #2
 8032aaa:	d107      	bne.n	8032abc <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8032aac:	4b3c      	ldr	r3, [pc, #240]	; (8032ba0 <HAL_RCC_ClockConfig+0x244>)
 8032aae:	681b      	ldr	r3, [r3, #0]
 8032ab0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8032ab4:	2b00      	cmp	r3, #0
 8032ab6:	d121      	bne.n	8032afc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8032ab8:	2301      	movs	r3, #1
 8032aba:	e0f6      	b.n	8032caa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8032abc:	687b      	ldr	r3, [r7, #4]
 8032abe:	685b      	ldr	r3, [r3, #4]
 8032ac0:	2b03      	cmp	r3, #3
 8032ac2:	d107      	bne.n	8032ad4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8032ac4:	4b36      	ldr	r3, [pc, #216]	; (8032ba0 <HAL_RCC_ClockConfig+0x244>)
 8032ac6:	681b      	ldr	r3, [r3, #0]
 8032ac8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8032acc:	2b00      	cmp	r3, #0
 8032ace:	d115      	bne.n	8032afc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8032ad0:	2301      	movs	r3, #1
 8032ad2:	e0ea      	b.n	8032caa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8032ad4:	687b      	ldr	r3, [r7, #4]
 8032ad6:	685b      	ldr	r3, [r3, #4]
 8032ad8:	2b01      	cmp	r3, #1
 8032ada:	d107      	bne.n	8032aec <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8032adc:	4b30      	ldr	r3, [pc, #192]	; (8032ba0 <HAL_RCC_ClockConfig+0x244>)
 8032ade:	681b      	ldr	r3, [r3, #0]
 8032ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8032ae4:	2b00      	cmp	r3, #0
 8032ae6:	d109      	bne.n	8032afc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8032ae8:	2301      	movs	r3, #1
 8032aea:	e0de      	b.n	8032caa <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8032aec:	4b2c      	ldr	r3, [pc, #176]	; (8032ba0 <HAL_RCC_ClockConfig+0x244>)
 8032aee:	681b      	ldr	r3, [r3, #0]
 8032af0:	f003 0304 	and.w	r3, r3, #4
 8032af4:	2b00      	cmp	r3, #0
 8032af6:	d101      	bne.n	8032afc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8032af8:	2301      	movs	r3, #1
 8032afa:	e0d6      	b.n	8032caa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8032afc:	4b28      	ldr	r3, [pc, #160]	; (8032ba0 <HAL_RCC_ClockConfig+0x244>)
 8032afe:	691b      	ldr	r3, [r3, #16]
 8032b00:	f023 0207 	bic.w	r2, r3, #7
 8032b04:	687b      	ldr	r3, [r7, #4]
 8032b06:	685b      	ldr	r3, [r3, #4]
 8032b08:	4925      	ldr	r1, [pc, #148]	; (8032ba0 <HAL_RCC_ClockConfig+0x244>)
 8032b0a:	4313      	orrs	r3, r2
 8032b0c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8032b0e:	f7f9 fb0f 	bl	802c130 <HAL_GetTick>
 8032b12:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8032b14:	e00a      	b.n	8032b2c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8032b16:	f7f9 fb0b 	bl	802c130 <HAL_GetTick>
 8032b1a:	4602      	mov	r2, r0
 8032b1c:	697b      	ldr	r3, [r7, #20]
 8032b1e:	1ad3      	subs	r3, r2, r3
 8032b20:	f241 3288 	movw	r2, #5000	; 0x1388
 8032b24:	4293      	cmp	r3, r2
 8032b26:	d901      	bls.n	8032b2c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8032b28:	2303      	movs	r3, #3
 8032b2a:	e0be      	b.n	8032caa <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8032b2c:	4b1c      	ldr	r3, [pc, #112]	; (8032ba0 <HAL_RCC_ClockConfig+0x244>)
 8032b2e:	691b      	ldr	r3, [r3, #16]
 8032b30:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8032b34:	687b      	ldr	r3, [r7, #4]
 8032b36:	685b      	ldr	r3, [r3, #4]
 8032b38:	00db      	lsls	r3, r3, #3
 8032b3a:	429a      	cmp	r2, r3
 8032b3c:	d1eb      	bne.n	8032b16 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8032b3e:	687b      	ldr	r3, [r7, #4]
 8032b40:	681b      	ldr	r3, [r3, #0]
 8032b42:	f003 0302 	and.w	r3, r3, #2
 8032b46:	2b00      	cmp	r3, #0
 8032b48:	d010      	beq.n	8032b6c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8032b4a:	687b      	ldr	r3, [r7, #4]
 8032b4c:	68da      	ldr	r2, [r3, #12]
 8032b4e:	4b14      	ldr	r3, [pc, #80]	; (8032ba0 <HAL_RCC_ClockConfig+0x244>)
 8032b50:	699b      	ldr	r3, [r3, #24]
 8032b52:	f003 030f 	and.w	r3, r3, #15
 8032b56:	429a      	cmp	r2, r3
 8032b58:	d208      	bcs.n	8032b6c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8032b5a:	4b11      	ldr	r3, [pc, #68]	; (8032ba0 <HAL_RCC_ClockConfig+0x244>)
 8032b5c:	699b      	ldr	r3, [r3, #24]
 8032b5e:	f023 020f 	bic.w	r2, r3, #15
 8032b62:	687b      	ldr	r3, [r7, #4]
 8032b64:	68db      	ldr	r3, [r3, #12]
 8032b66:	490e      	ldr	r1, [pc, #56]	; (8032ba0 <HAL_RCC_ClockConfig+0x244>)
 8032b68:	4313      	orrs	r3, r2
 8032b6a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8032b6c:	4b0b      	ldr	r3, [pc, #44]	; (8032b9c <HAL_RCC_ClockConfig+0x240>)
 8032b6e:	681b      	ldr	r3, [r3, #0]
 8032b70:	f003 030f 	and.w	r3, r3, #15
 8032b74:	683a      	ldr	r2, [r7, #0]
 8032b76:	429a      	cmp	r2, r3
 8032b78:	d214      	bcs.n	8032ba4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8032b7a:	4b08      	ldr	r3, [pc, #32]	; (8032b9c <HAL_RCC_ClockConfig+0x240>)
 8032b7c:	681b      	ldr	r3, [r3, #0]
 8032b7e:	f023 020f 	bic.w	r2, r3, #15
 8032b82:	4906      	ldr	r1, [pc, #24]	; (8032b9c <HAL_RCC_ClockConfig+0x240>)
 8032b84:	683b      	ldr	r3, [r7, #0]
 8032b86:	4313      	orrs	r3, r2
 8032b88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8032b8a:	4b04      	ldr	r3, [pc, #16]	; (8032b9c <HAL_RCC_ClockConfig+0x240>)
 8032b8c:	681b      	ldr	r3, [r3, #0]
 8032b8e:	f003 030f 	and.w	r3, r3, #15
 8032b92:	683a      	ldr	r2, [r7, #0]
 8032b94:	429a      	cmp	r2, r3
 8032b96:	d005      	beq.n	8032ba4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8032b98:	2301      	movs	r3, #1
 8032b9a:	e086      	b.n	8032caa <HAL_RCC_ClockConfig+0x34e>
 8032b9c:	52002000 	.word	0x52002000
 8032ba0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8032ba4:	687b      	ldr	r3, [r7, #4]
 8032ba6:	681b      	ldr	r3, [r3, #0]
 8032ba8:	f003 0304 	and.w	r3, r3, #4
 8032bac:	2b00      	cmp	r3, #0
 8032bae:	d010      	beq.n	8032bd2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8032bb0:	687b      	ldr	r3, [r7, #4]
 8032bb2:	691a      	ldr	r2, [r3, #16]
 8032bb4:	4b3f      	ldr	r3, [pc, #252]	; (8032cb4 <HAL_RCC_ClockConfig+0x358>)
 8032bb6:	699b      	ldr	r3, [r3, #24]
 8032bb8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8032bbc:	429a      	cmp	r2, r3
 8032bbe:	d208      	bcs.n	8032bd2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8032bc0:	4b3c      	ldr	r3, [pc, #240]	; (8032cb4 <HAL_RCC_ClockConfig+0x358>)
 8032bc2:	699b      	ldr	r3, [r3, #24]
 8032bc4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8032bc8:	687b      	ldr	r3, [r7, #4]
 8032bca:	691b      	ldr	r3, [r3, #16]
 8032bcc:	4939      	ldr	r1, [pc, #228]	; (8032cb4 <HAL_RCC_ClockConfig+0x358>)
 8032bce:	4313      	orrs	r3, r2
 8032bd0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8032bd2:	687b      	ldr	r3, [r7, #4]
 8032bd4:	681b      	ldr	r3, [r3, #0]
 8032bd6:	f003 0308 	and.w	r3, r3, #8
 8032bda:	2b00      	cmp	r3, #0
 8032bdc:	d010      	beq.n	8032c00 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8032bde:	687b      	ldr	r3, [r7, #4]
 8032be0:	695a      	ldr	r2, [r3, #20]
 8032be2:	4b34      	ldr	r3, [pc, #208]	; (8032cb4 <HAL_RCC_ClockConfig+0x358>)
 8032be4:	69db      	ldr	r3, [r3, #28]
 8032be6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8032bea:	429a      	cmp	r2, r3
 8032bec:	d208      	bcs.n	8032c00 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8032bee:	4b31      	ldr	r3, [pc, #196]	; (8032cb4 <HAL_RCC_ClockConfig+0x358>)
 8032bf0:	69db      	ldr	r3, [r3, #28]
 8032bf2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8032bf6:	687b      	ldr	r3, [r7, #4]
 8032bf8:	695b      	ldr	r3, [r3, #20]
 8032bfa:	492e      	ldr	r1, [pc, #184]	; (8032cb4 <HAL_RCC_ClockConfig+0x358>)
 8032bfc:	4313      	orrs	r3, r2
 8032bfe:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8032c00:	687b      	ldr	r3, [r7, #4]
 8032c02:	681b      	ldr	r3, [r3, #0]
 8032c04:	f003 0310 	and.w	r3, r3, #16
 8032c08:	2b00      	cmp	r3, #0
 8032c0a:	d010      	beq.n	8032c2e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8032c0c:	687b      	ldr	r3, [r7, #4]
 8032c0e:	699a      	ldr	r2, [r3, #24]
 8032c10:	4b28      	ldr	r3, [pc, #160]	; (8032cb4 <HAL_RCC_ClockConfig+0x358>)
 8032c12:	69db      	ldr	r3, [r3, #28]
 8032c14:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8032c18:	429a      	cmp	r2, r3
 8032c1a:	d208      	bcs.n	8032c2e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8032c1c:	4b25      	ldr	r3, [pc, #148]	; (8032cb4 <HAL_RCC_ClockConfig+0x358>)
 8032c1e:	69db      	ldr	r3, [r3, #28]
 8032c20:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8032c24:	687b      	ldr	r3, [r7, #4]
 8032c26:	699b      	ldr	r3, [r3, #24]
 8032c28:	4922      	ldr	r1, [pc, #136]	; (8032cb4 <HAL_RCC_ClockConfig+0x358>)
 8032c2a:	4313      	orrs	r3, r2
 8032c2c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8032c2e:	687b      	ldr	r3, [r7, #4]
 8032c30:	681b      	ldr	r3, [r3, #0]
 8032c32:	f003 0320 	and.w	r3, r3, #32
 8032c36:	2b00      	cmp	r3, #0
 8032c38:	d010      	beq.n	8032c5c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8032c3a:	687b      	ldr	r3, [r7, #4]
 8032c3c:	69da      	ldr	r2, [r3, #28]
 8032c3e:	4b1d      	ldr	r3, [pc, #116]	; (8032cb4 <HAL_RCC_ClockConfig+0x358>)
 8032c40:	6a1b      	ldr	r3, [r3, #32]
 8032c42:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8032c46:	429a      	cmp	r2, r3
 8032c48:	d208      	bcs.n	8032c5c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8032c4a:	4b1a      	ldr	r3, [pc, #104]	; (8032cb4 <HAL_RCC_ClockConfig+0x358>)
 8032c4c:	6a1b      	ldr	r3, [r3, #32]
 8032c4e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8032c52:	687b      	ldr	r3, [r7, #4]
 8032c54:	69db      	ldr	r3, [r3, #28]
 8032c56:	4917      	ldr	r1, [pc, #92]	; (8032cb4 <HAL_RCC_ClockConfig+0x358>)
 8032c58:	4313      	orrs	r3, r2
 8032c5a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8032c5c:	f000 f834 	bl	8032cc8 <HAL_RCC_GetSysClockFreq>
 8032c60:	4602      	mov	r2, r0
 8032c62:	4b14      	ldr	r3, [pc, #80]	; (8032cb4 <HAL_RCC_ClockConfig+0x358>)
 8032c64:	699b      	ldr	r3, [r3, #24]
 8032c66:	0a1b      	lsrs	r3, r3, #8
 8032c68:	f003 030f 	and.w	r3, r3, #15
 8032c6c:	4912      	ldr	r1, [pc, #72]	; (8032cb8 <HAL_RCC_ClockConfig+0x35c>)
 8032c6e:	5ccb      	ldrb	r3, [r1, r3]
 8032c70:	f003 031f 	and.w	r3, r3, #31
 8032c74:	fa22 f303 	lsr.w	r3, r2, r3
 8032c78:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8032c7a:	4b0e      	ldr	r3, [pc, #56]	; (8032cb4 <HAL_RCC_ClockConfig+0x358>)
 8032c7c:	699b      	ldr	r3, [r3, #24]
 8032c7e:	f003 030f 	and.w	r3, r3, #15
 8032c82:	4a0d      	ldr	r2, [pc, #52]	; (8032cb8 <HAL_RCC_ClockConfig+0x35c>)
 8032c84:	5cd3      	ldrb	r3, [r2, r3]
 8032c86:	f003 031f 	and.w	r3, r3, #31
 8032c8a:	693a      	ldr	r2, [r7, #16]
 8032c8c:	fa22 f303 	lsr.w	r3, r2, r3
 8032c90:	4a0a      	ldr	r2, [pc, #40]	; (8032cbc <HAL_RCC_ClockConfig+0x360>)
 8032c92:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8032c94:	4a0a      	ldr	r2, [pc, #40]	; (8032cc0 <HAL_RCC_ClockConfig+0x364>)
 8032c96:	693b      	ldr	r3, [r7, #16]
 8032c98:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8032c9a:	4b0a      	ldr	r3, [pc, #40]	; (8032cc4 <HAL_RCC_ClockConfig+0x368>)
 8032c9c:	681b      	ldr	r3, [r3, #0]
 8032c9e:	4618      	mov	r0, r3
 8032ca0:	f7f9 f9fc 	bl	802c09c <HAL_InitTick>
 8032ca4:	4603      	mov	r3, r0
 8032ca6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8032ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8032caa:	4618      	mov	r0, r3
 8032cac:	3718      	adds	r7, #24
 8032cae:	46bd      	mov	sp, r7
 8032cb0:	bd80      	pop	{r7, pc}
 8032cb2:	bf00      	nop
 8032cb4:	58024400 	.word	0x58024400
 8032cb8:	08058df8 	.word	0x08058df8
 8032cbc:	24000004 	.word	0x24000004
 8032cc0:	24000000 	.word	0x24000000
 8032cc4:	24000008 	.word	0x24000008

08032cc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8032cc8:	b480      	push	{r7}
 8032cca:	b089      	sub	sp, #36	; 0x24
 8032ccc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8032cce:	4bb3      	ldr	r3, [pc, #716]	; (8032f9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8032cd0:	691b      	ldr	r3, [r3, #16]
 8032cd2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8032cd6:	2b18      	cmp	r3, #24
 8032cd8:	f200 8155 	bhi.w	8032f86 <HAL_RCC_GetSysClockFreq+0x2be>
 8032cdc:	a201      	add	r2, pc, #4	; (adr r2, 8032ce4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8032cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8032ce2:	bf00      	nop
 8032ce4:	08032d49 	.word	0x08032d49
 8032ce8:	08032f87 	.word	0x08032f87
 8032cec:	08032f87 	.word	0x08032f87
 8032cf0:	08032f87 	.word	0x08032f87
 8032cf4:	08032f87 	.word	0x08032f87
 8032cf8:	08032f87 	.word	0x08032f87
 8032cfc:	08032f87 	.word	0x08032f87
 8032d00:	08032f87 	.word	0x08032f87
 8032d04:	08032d6f 	.word	0x08032d6f
 8032d08:	08032f87 	.word	0x08032f87
 8032d0c:	08032f87 	.word	0x08032f87
 8032d10:	08032f87 	.word	0x08032f87
 8032d14:	08032f87 	.word	0x08032f87
 8032d18:	08032f87 	.word	0x08032f87
 8032d1c:	08032f87 	.word	0x08032f87
 8032d20:	08032f87 	.word	0x08032f87
 8032d24:	08032d75 	.word	0x08032d75
 8032d28:	08032f87 	.word	0x08032f87
 8032d2c:	08032f87 	.word	0x08032f87
 8032d30:	08032f87 	.word	0x08032f87
 8032d34:	08032f87 	.word	0x08032f87
 8032d38:	08032f87 	.word	0x08032f87
 8032d3c:	08032f87 	.word	0x08032f87
 8032d40:	08032f87 	.word	0x08032f87
 8032d44:	08032d7b 	.word	0x08032d7b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8032d48:	4b94      	ldr	r3, [pc, #592]	; (8032f9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8032d4a:	681b      	ldr	r3, [r3, #0]
 8032d4c:	f003 0320 	and.w	r3, r3, #32
 8032d50:	2b00      	cmp	r3, #0
 8032d52:	d009      	beq.n	8032d68 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8032d54:	4b91      	ldr	r3, [pc, #580]	; (8032f9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8032d56:	681b      	ldr	r3, [r3, #0]
 8032d58:	08db      	lsrs	r3, r3, #3
 8032d5a:	f003 0303 	and.w	r3, r3, #3
 8032d5e:	4a90      	ldr	r2, [pc, #576]	; (8032fa0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8032d60:	fa22 f303 	lsr.w	r3, r2, r3
 8032d64:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8032d66:	e111      	b.n	8032f8c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8032d68:	4b8d      	ldr	r3, [pc, #564]	; (8032fa0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8032d6a:	61bb      	str	r3, [r7, #24]
    break;
 8032d6c:	e10e      	b.n	8032f8c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8032d6e:	4b8d      	ldr	r3, [pc, #564]	; (8032fa4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8032d70:	61bb      	str	r3, [r7, #24]
    break;
 8032d72:	e10b      	b.n	8032f8c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8032d74:	4b8c      	ldr	r3, [pc, #560]	; (8032fa8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8032d76:	61bb      	str	r3, [r7, #24]
    break;
 8032d78:	e108      	b.n	8032f8c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8032d7a:	4b88      	ldr	r3, [pc, #544]	; (8032f9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8032d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8032d7e:	f003 0303 	and.w	r3, r3, #3
 8032d82:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8032d84:	4b85      	ldr	r3, [pc, #532]	; (8032f9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8032d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8032d88:	091b      	lsrs	r3, r3, #4
 8032d8a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8032d8e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8032d90:	4b82      	ldr	r3, [pc, #520]	; (8032f9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8032d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8032d94:	f003 0301 	and.w	r3, r3, #1
 8032d98:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8032d9a:	4b80      	ldr	r3, [pc, #512]	; (8032f9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8032d9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8032d9e:	08db      	lsrs	r3, r3, #3
 8032da0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8032da4:	68fa      	ldr	r2, [r7, #12]
 8032da6:	fb02 f303 	mul.w	r3, r2, r3
 8032daa:	ee07 3a90 	vmov	s15, r3
 8032dae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8032db2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8032db6:	693b      	ldr	r3, [r7, #16]
 8032db8:	2b00      	cmp	r3, #0
 8032dba:	f000 80e1 	beq.w	8032f80 <HAL_RCC_GetSysClockFreq+0x2b8>
 8032dbe:	697b      	ldr	r3, [r7, #20]
 8032dc0:	2b02      	cmp	r3, #2
 8032dc2:	f000 8083 	beq.w	8032ecc <HAL_RCC_GetSysClockFreq+0x204>
 8032dc6:	697b      	ldr	r3, [r7, #20]
 8032dc8:	2b02      	cmp	r3, #2
 8032dca:	f200 80a1 	bhi.w	8032f10 <HAL_RCC_GetSysClockFreq+0x248>
 8032dce:	697b      	ldr	r3, [r7, #20]
 8032dd0:	2b00      	cmp	r3, #0
 8032dd2:	d003      	beq.n	8032ddc <HAL_RCC_GetSysClockFreq+0x114>
 8032dd4:	697b      	ldr	r3, [r7, #20]
 8032dd6:	2b01      	cmp	r3, #1
 8032dd8:	d056      	beq.n	8032e88 <HAL_RCC_GetSysClockFreq+0x1c0>
 8032dda:	e099      	b.n	8032f10 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8032ddc:	4b6f      	ldr	r3, [pc, #444]	; (8032f9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8032dde:	681b      	ldr	r3, [r3, #0]
 8032de0:	f003 0320 	and.w	r3, r3, #32
 8032de4:	2b00      	cmp	r3, #0
 8032de6:	d02d      	beq.n	8032e44 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8032de8:	4b6c      	ldr	r3, [pc, #432]	; (8032f9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8032dea:	681b      	ldr	r3, [r3, #0]
 8032dec:	08db      	lsrs	r3, r3, #3
 8032dee:	f003 0303 	and.w	r3, r3, #3
 8032df2:	4a6b      	ldr	r2, [pc, #428]	; (8032fa0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8032df4:	fa22 f303 	lsr.w	r3, r2, r3
 8032df8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8032dfa:	687b      	ldr	r3, [r7, #4]
 8032dfc:	ee07 3a90 	vmov	s15, r3
 8032e00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8032e04:	693b      	ldr	r3, [r7, #16]
 8032e06:	ee07 3a90 	vmov	s15, r3
 8032e0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8032e0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8032e12:	4b62      	ldr	r3, [pc, #392]	; (8032f9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8032e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8032e16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8032e1a:	ee07 3a90 	vmov	s15, r3
 8032e1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8032e22:	ed97 6a02 	vldr	s12, [r7, #8]
 8032e26:	eddf 5a61 	vldr	s11, [pc, #388]	; 8032fac <HAL_RCC_GetSysClockFreq+0x2e4>
 8032e2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8032e2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8032e32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8032e36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8032e3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8032e3e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8032e42:	e087      	b.n	8032f54 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8032e44:	693b      	ldr	r3, [r7, #16]
 8032e46:	ee07 3a90 	vmov	s15, r3
 8032e4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8032e4e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8032fb0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8032e52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8032e56:	4b51      	ldr	r3, [pc, #324]	; (8032f9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8032e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8032e5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8032e5e:	ee07 3a90 	vmov	s15, r3
 8032e62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8032e66:	ed97 6a02 	vldr	s12, [r7, #8]
 8032e6a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8032fac <HAL_RCC_GetSysClockFreq+0x2e4>
 8032e6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8032e72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8032e76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8032e7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8032e7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8032e82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8032e86:	e065      	b.n	8032f54 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8032e88:	693b      	ldr	r3, [r7, #16]
 8032e8a:	ee07 3a90 	vmov	s15, r3
 8032e8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8032e92:	eddf 6a48 	vldr	s13, [pc, #288]	; 8032fb4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8032e96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8032e9a:	4b40      	ldr	r3, [pc, #256]	; (8032f9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8032e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8032e9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8032ea2:	ee07 3a90 	vmov	s15, r3
 8032ea6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8032eaa:	ed97 6a02 	vldr	s12, [r7, #8]
 8032eae:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8032fac <HAL_RCC_GetSysClockFreq+0x2e4>
 8032eb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8032eb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8032eba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8032ebe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8032ec2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8032ec6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8032eca:	e043      	b.n	8032f54 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8032ecc:	693b      	ldr	r3, [r7, #16]
 8032ece:	ee07 3a90 	vmov	s15, r3
 8032ed2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8032ed6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8032fb8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8032eda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8032ede:	4b2f      	ldr	r3, [pc, #188]	; (8032f9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8032ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8032ee2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8032ee6:	ee07 3a90 	vmov	s15, r3
 8032eea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8032eee:	ed97 6a02 	vldr	s12, [r7, #8]
 8032ef2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8032fac <HAL_RCC_GetSysClockFreq+0x2e4>
 8032ef6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8032efa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8032efe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8032f02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8032f06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8032f0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8032f0e:	e021      	b.n	8032f54 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8032f10:	693b      	ldr	r3, [r7, #16]
 8032f12:	ee07 3a90 	vmov	s15, r3
 8032f16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8032f1a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8032fb4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8032f1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8032f22:	4b1e      	ldr	r3, [pc, #120]	; (8032f9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8032f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8032f26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8032f2a:	ee07 3a90 	vmov	s15, r3
 8032f2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8032f32:	ed97 6a02 	vldr	s12, [r7, #8]
 8032f36:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8032fac <HAL_RCC_GetSysClockFreq+0x2e4>
 8032f3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8032f3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8032f42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8032f46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8032f4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8032f4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8032f52:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8032f54:	4b11      	ldr	r3, [pc, #68]	; (8032f9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8032f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8032f58:	0a5b      	lsrs	r3, r3, #9
 8032f5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8032f5e:	3301      	adds	r3, #1
 8032f60:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8032f62:	683b      	ldr	r3, [r7, #0]
 8032f64:	ee07 3a90 	vmov	s15, r3
 8032f68:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8032f6c:	edd7 6a07 	vldr	s13, [r7, #28]
 8032f70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8032f74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8032f78:	ee17 3a90 	vmov	r3, s15
 8032f7c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8032f7e:	e005      	b.n	8032f8c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8032f80:	2300      	movs	r3, #0
 8032f82:	61bb      	str	r3, [r7, #24]
    break;
 8032f84:	e002      	b.n	8032f8c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8032f86:	4b07      	ldr	r3, [pc, #28]	; (8032fa4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8032f88:	61bb      	str	r3, [r7, #24]
    break;
 8032f8a:	bf00      	nop
  }

  return sysclockfreq;
 8032f8c:	69bb      	ldr	r3, [r7, #24]
}
 8032f8e:	4618      	mov	r0, r3
 8032f90:	3724      	adds	r7, #36	; 0x24
 8032f92:	46bd      	mov	sp, r7
 8032f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032f98:	4770      	bx	lr
 8032f9a:	bf00      	nop
 8032f9c:	58024400 	.word	0x58024400
 8032fa0:	03d09000 	.word	0x03d09000
 8032fa4:	003d0900 	.word	0x003d0900
 8032fa8:	017d7840 	.word	0x017d7840
 8032fac:	46000000 	.word	0x46000000
 8032fb0:	4c742400 	.word	0x4c742400
 8032fb4:	4a742400 	.word	0x4a742400
 8032fb8:	4bbebc20 	.word	0x4bbebc20

08032fbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8032fbc:	b580      	push	{r7, lr}
 8032fbe:	b082      	sub	sp, #8
 8032fc0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8032fc2:	f7ff fe81 	bl	8032cc8 <HAL_RCC_GetSysClockFreq>
 8032fc6:	4602      	mov	r2, r0
 8032fc8:	4b10      	ldr	r3, [pc, #64]	; (803300c <HAL_RCC_GetHCLKFreq+0x50>)
 8032fca:	699b      	ldr	r3, [r3, #24]
 8032fcc:	0a1b      	lsrs	r3, r3, #8
 8032fce:	f003 030f 	and.w	r3, r3, #15
 8032fd2:	490f      	ldr	r1, [pc, #60]	; (8033010 <HAL_RCC_GetHCLKFreq+0x54>)
 8032fd4:	5ccb      	ldrb	r3, [r1, r3]
 8032fd6:	f003 031f 	and.w	r3, r3, #31
 8032fda:	fa22 f303 	lsr.w	r3, r2, r3
 8032fde:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8032fe0:	4b0a      	ldr	r3, [pc, #40]	; (803300c <HAL_RCC_GetHCLKFreq+0x50>)
 8032fe2:	699b      	ldr	r3, [r3, #24]
 8032fe4:	f003 030f 	and.w	r3, r3, #15
 8032fe8:	4a09      	ldr	r2, [pc, #36]	; (8033010 <HAL_RCC_GetHCLKFreq+0x54>)
 8032fea:	5cd3      	ldrb	r3, [r2, r3]
 8032fec:	f003 031f 	and.w	r3, r3, #31
 8032ff0:	687a      	ldr	r2, [r7, #4]
 8032ff2:	fa22 f303 	lsr.w	r3, r2, r3
 8032ff6:	4a07      	ldr	r2, [pc, #28]	; (8033014 <HAL_RCC_GetHCLKFreq+0x58>)
 8032ff8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8032ffa:	4a07      	ldr	r2, [pc, #28]	; (8033018 <HAL_RCC_GetHCLKFreq+0x5c>)
 8032ffc:	687b      	ldr	r3, [r7, #4]
 8032ffe:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8033000:	4b04      	ldr	r3, [pc, #16]	; (8033014 <HAL_RCC_GetHCLKFreq+0x58>)
 8033002:	681b      	ldr	r3, [r3, #0]
}
 8033004:	4618      	mov	r0, r3
 8033006:	3708      	adds	r7, #8
 8033008:	46bd      	mov	sp, r7
 803300a:	bd80      	pop	{r7, pc}
 803300c:	58024400 	.word	0x58024400
 8033010:	08058df8 	.word	0x08058df8
 8033014:	24000004 	.word	0x24000004
 8033018:	24000000 	.word	0x24000000

0803301c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 803301c:	b580      	push	{r7, lr}
 803301e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8033020:	f7ff ffcc 	bl	8032fbc <HAL_RCC_GetHCLKFreq>
 8033024:	4602      	mov	r2, r0
 8033026:	4b06      	ldr	r3, [pc, #24]	; (8033040 <HAL_RCC_GetPCLK1Freq+0x24>)
 8033028:	69db      	ldr	r3, [r3, #28]
 803302a:	091b      	lsrs	r3, r3, #4
 803302c:	f003 0307 	and.w	r3, r3, #7
 8033030:	4904      	ldr	r1, [pc, #16]	; (8033044 <HAL_RCC_GetPCLK1Freq+0x28>)
 8033032:	5ccb      	ldrb	r3, [r1, r3]
 8033034:	f003 031f 	and.w	r3, r3, #31
 8033038:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 803303c:	4618      	mov	r0, r3
 803303e:	bd80      	pop	{r7, pc}
 8033040:	58024400 	.word	0x58024400
 8033044:	08058df8 	.word	0x08058df8

08033048 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8033048:	b580      	push	{r7, lr}
 803304a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 803304c:	f7ff ffb6 	bl	8032fbc <HAL_RCC_GetHCLKFreq>
 8033050:	4602      	mov	r2, r0
 8033052:	4b06      	ldr	r3, [pc, #24]	; (803306c <HAL_RCC_GetPCLK2Freq+0x24>)
 8033054:	69db      	ldr	r3, [r3, #28]
 8033056:	0a1b      	lsrs	r3, r3, #8
 8033058:	f003 0307 	and.w	r3, r3, #7
 803305c:	4904      	ldr	r1, [pc, #16]	; (8033070 <HAL_RCC_GetPCLK2Freq+0x28>)
 803305e:	5ccb      	ldrb	r3, [r1, r3]
 8033060:	f003 031f 	and.w	r3, r3, #31
 8033064:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8033068:	4618      	mov	r0, r3
 803306a:	bd80      	pop	{r7, pc}
 803306c:	58024400 	.word	0x58024400
 8033070:	08058df8 	.word	0x08058df8

08033074 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8033074:	b580      	push	{r7, lr}
 8033076:	b086      	sub	sp, #24
 8033078:	af00      	add	r7, sp, #0
 803307a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 803307c:	2300      	movs	r3, #0
 803307e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8033080:	2300      	movs	r3, #0
 8033082:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8033084:	687b      	ldr	r3, [r7, #4]
 8033086:	681b      	ldr	r3, [r3, #0]
 8033088:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 803308c:	2b00      	cmp	r3, #0
 803308e:	d03f      	beq.n	8033110 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8033090:	687b      	ldr	r3, [r7, #4]
 8033092:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8033094:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8033098:	d02a      	beq.n	80330f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 803309a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 803309e:	d824      	bhi.n	80330ea <HAL_RCCEx_PeriphCLKConfig+0x76>
 80330a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80330a4:	d018      	beq.n	80330d8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80330a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80330aa:	d81e      	bhi.n	80330ea <HAL_RCCEx_PeriphCLKConfig+0x76>
 80330ac:	2b00      	cmp	r3, #0
 80330ae:	d003      	beq.n	80330b8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80330b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80330b4:	d007      	beq.n	80330c6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80330b6:	e018      	b.n	80330ea <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80330b8:	4ba3      	ldr	r3, [pc, #652]	; (8033348 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80330ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80330bc:	4aa2      	ldr	r2, [pc, #648]	; (8033348 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80330be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80330c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80330c4:	e015      	b.n	80330f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80330c6:	687b      	ldr	r3, [r7, #4]
 80330c8:	3304      	adds	r3, #4
 80330ca:	2102      	movs	r1, #2
 80330cc:	4618      	mov	r0, r3
 80330ce:	f001 f9d5 	bl	803447c <RCCEx_PLL2_Config>
 80330d2:	4603      	mov	r3, r0
 80330d4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80330d6:	e00c      	b.n	80330f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80330d8:	687b      	ldr	r3, [r7, #4]
 80330da:	3324      	adds	r3, #36	; 0x24
 80330dc:	2102      	movs	r1, #2
 80330de:	4618      	mov	r0, r3
 80330e0:	f001 fa7e 	bl	80345e0 <RCCEx_PLL3_Config>
 80330e4:	4603      	mov	r3, r0
 80330e6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80330e8:	e003      	b.n	80330f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80330ea:	2301      	movs	r3, #1
 80330ec:	75fb      	strb	r3, [r7, #23]
      break;
 80330ee:	e000      	b.n	80330f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80330f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80330f2:	7dfb      	ldrb	r3, [r7, #23]
 80330f4:	2b00      	cmp	r3, #0
 80330f6:	d109      	bne.n	803310c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80330f8:	4b93      	ldr	r3, [pc, #588]	; (8033348 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80330fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80330fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8033100:	687b      	ldr	r3, [r7, #4]
 8033102:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8033104:	4990      	ldr	r1, [pc, #576]	; (8033348 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8033106:	4313      	orrs	r3, r2
 8033108:	650b      	str	r3, [r1, #80]	; 0x50
 803310a:	e001      	b.n	8033110 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 803310c:	7dfb      	ldrb	r3, [r7, #23]
 803310e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8033110:	687b      	ldr	r3, [r7, #4]
 8033112:	681b      	ldr	r3, [r3, #0]
 8033114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8033118:	2b00      	cmp	r3, #0
 803311a:	d03d      	beq.n	8033198 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 803311c:	687b      	ldr	r3, [r7, #4]
 803311e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8033120:	2b04      	cmp	r3, #4
 8033122:	d826      	bhi.n	8033172 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8033124:	a201      	add	r2, pc, #4	; (adr r2, 803312c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8033126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803312a:	bf00      	nop
 803312c:	08033141 	.word	0x08033141
 8033130:	0803314f 	.word	0x0803314f
 8033134:	08033161 	.word	0x08033161
 8033138:	08033179 	.word	0x08033179
 803313c:	08033179 	.word	0x08033179
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8033140:	4b81      	ldr	r3, [pc, #516]	; (8033348 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8033142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8033144:	4a80      	ldr	r2, [pc, #512]	; (8033348 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8033146:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 803314a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 803314c:	e015      	b.n	803317a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 803314e:	687b      	ldr	r3, [r7, #4]
 8033150:	3304      	adds	r3, #4
 8033152:	2100      	movs	r1, #0
 8033154:	4618      	mov	r0, r3
 8033156:	f001 f991 	bl	803447c <RCCEx_PLL2_Config>
 803315a:	4603      	mov	r3, r0
 803315c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 803315e:	e00c      	b.n	803317a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8033160:	687b      	ldr	r3, [r7, #4]
 8033162:	3324      	adds	r3, #36	; 0x24
 8033164:	2100      	movs	r1, #0
 8033166:	4618      	mov	r0, r3
 8033168:	f001 fa3a 	bl	80345e0 <RCCEx_PLL3_Config>
 803316c:	4603      	mov	r3, r0
 803316e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8033170:	e003      	b.n	803317a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8033172:	2301      	movs	r3, #1
 8033174:	75fb      	strb	r3, [r7, #23]
      break;
 8033176:	e000      	b.n	803317a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8033178:	bf00      	nop
    }

    if(ret == HAL_OK)
 803317a:	7dfb      	ldrb	r3, [r7, #23]
 803317c:	2b00      	cmp	r3, #0
 803317e:	d109      	bne.n	8033194 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8033180:	4b71      	ldr	r3, [pc, #452]	; (8033348 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8033182:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8033184:	f023 0207 	bic.w	r2, r3, #7
 8033188:	687b      	ldr	r3, [r7, #4]
 803318a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 803318c:	496e      	ldr	r1, [pc, #440]	; (8033348 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 803318e:	4313      	orrs	r3, r2
 8033190:	650b      	str	r3, [r1, #80]	; 0x50
 8033192:	e001      	b.n	8033198 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8033194:	7dfb      	ldrb	r3, [r7, #23]
 8033196:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8033198:	687b      	ldr	r3, [r7, #4]
 803319a:	681b      	ldr	r3, [r3, #0]
 803319c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80331a0:	2b00      	cmp	r3, #0
 80331a2:	d042      	beq.n	803322a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80331a4:	687b      	ldr	r3, [r7, #4]
 80331a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80331a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80331ac:	d02b      	beq.n	8033206 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80331ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80331b2:	d825      	bhi.n	8033200 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80331b4:	2bc0      	cmp	r3, #192	; 0xc0
 80331b6:	d028      	beq.n	803320a <HAL_RCCEx_PeriphCLKConfig+0x196>
 80331b8:	2bc0      	cmp	r3, #192	; 0xc0
 80331ba:	d821      	bhi.n	8033200 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80331bc:	2b80      	cmp	r3, #128	; 0x80
 80331be:	d016      	beq.n	80331ee <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80331c0:	2b80      	cmp	r3, #128	; 0x80
 80331c2:	d81d      	bhi.n	8033200 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80331c4:	2b00      	cmp	r3, #0
 80331c6:	d002      	beq.n	80331ce <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80331c8:	2b40      	cmp	r3, #64	; 0x40
 80331ca:	d007      	beq.n	80331dc <HAL_RCCEx_PeriphCLKConfig+0x168>
 80331cc:	e018      	b.n	8033200 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80331ce:	4b5e      	ldr	r3, [pc, #376]	; (8033348 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80331d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80331d2:	4a5d      	ldr	r2, [pc, #372]	; (8033348 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80331d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80331d8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80331da:	e017      	b.n	803320c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80331dc:	687b      	ldr	r3, [r7, #4]
 80331de:	3304      	adds	r3, #4
 80331e0:	2100      	movs	r1, #0
 80331e2:	4618      	mov	r0, r3
 80331e4:	f001 f94a 	bl	803447c <RCCEx_PLL2_Config>
 80331e8:	4603      	mov	r3, r0
 80331ea:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80331ec:	e00e      	b.n	803320c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80331ee:	687b      	ldr	r3, [r7, #4]
 80331f0:	3324      	adds	r3, #36	; 0x24
 80331f2:	2100      	movs	r1, #0
 80331f4:	4618      	mov	r0, r3
 80331f6:	f001 f9f3 	bl	80345e0 <RCCEx_PLL3_Config>
 80331fa:	4603      	mov	r3, r0
 80331fc:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80331fe:	e005      	b.n	803320c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8033200:	2301      	movs	r3, #1
 8033202:	75fb      	strb	r3, [r7, #23]
      break;
 8033204:	e002      	b.n	803320c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8033206:	bf00      	nop
 8033208:	e000      	b.n	803320c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 803320a:	bf00      	nop
    }

    if(ret == HAL_OK)
 803320c:	7dfb      	ldrb	r3, [r7, #23]
 803320e:	2b00      	cmp	r3, #0
 8033210:	d109      	bne.n	8033226 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8033212:	4b4d      	ldr	r3, [pc, #308]	; (8033348 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8033214:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8033216:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 803321a:	687b      	ldr	r3, [r7, #4]
 803321c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 803321e:	494a      	ldr	r1, [pc, #296]	; (8033348 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8033220:	4313      	orrs	r3, r2
 8033222:	650b      	str	r3, [r1, #80]	; 0x50
 8033224:	e001      	b.n	803322a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8033226:	7dfb      	ldrb	r3, [r7, #23]
 8033228:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 803322a:	687b      	ldr	r3, [r7, #4]
 803322c:	681b      	ldr	r3, [r3, #0]
 803322e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8033232:	2b00      	cmp	r3, #0
 8033234:	d049      	beq.n	80332ca <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8033236:	687b      	ldr	r3, [r7, #4]
 8033238:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 803323c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8033240:	d030      	beq.n	80332a4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8033242:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8033246:	d82a      	bhi.n	803329e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8033248:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 803324c:	d02c      	beq.n	80332a8 <HAL_RCCEx_PeriphCLKConfig+0x234>
 803324e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8033252:	d824      	bhi.n	803329e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8033254:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8033258:	d018      	beq.n	803328c <HAL_RCCEx_PeriphCLKConfig+0x218>
 803325a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 803325e:	d81e      	bhi.n	803329e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8033260:	2b00      	cmp	r3, #0
 8033262:	d003      	beq.n	803326c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8033264:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8033268:	d007      	beq.n	803327a <HAL_RCCEx_PeriphCLKConfig+0x206>
 803326a:	e018      	b.n	803329e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 803326c:	4b36      	ldr	r3, [pc, #216]	; (8033348 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 803326e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8033270:	4a35      	ldr	r2, [pc, #212]	; (8033348 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8033272:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8033276:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8033278:	e017      	b.n	80332aa <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 803327a:	687b      	ldr	r3, [r7, #4]
 803327c:	3304      	adds	r3, #4
 803327e:	2100      	movs	r1, #0
 8033280:	4618      	mov	r0, r3
 8033282:	f001 f8fb 	bl	803447c <RCCEx_PLL2_Config>
 8033286:	4603      	mov	r3, r0
 8033288:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 803328a:	e00e      	b.n	80332aa <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 803328c:	687b      	ldr	r3, [r7, #4]
 803328e:	3324      	adds	r3, #36	; 0x24
 8033290:	2100      	movs	r1, #0
 8033292:	4618      	mov	r0, r3
 8033294:	f001 f9a4 	bl	80345e0 <RCCEx_PLL3_Config>
 8033298:	4603      	mov	r3, r0
 803329a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 803329c:	e005      	b.n	80332aa <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 803329e:	2301      	movs	r3, #1
 80332a0:	75fb      	strb	r3, [r7, #23]
      break;
 80332a2:	e002      	b.n	80332aa <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80332a4:	bf00      	nop
 80332a6:	e000      	b.n	80332aa <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80332a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80332aa:	7dfb      	ldrb	r3, [r7, #23]
 80332ac:	2b00      	cmp	r3, #0
 80332ae:	d10a      	bne.n	80332c6 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80332b0:	4b25      	ldr	r3, [pc, #148]	; (8033348 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80332b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80332b4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80332b8:	687b      	ldr	r3, [r7, #4]
 80332ba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80332be:	4922      	ldr	r1, [pc, #136]	; (8033348 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80332c0:	4313      	orrs	r3, r2
 80332c2:	658b      	str	r3, [r1, #88]	; 0x58
 80332c4:	e001      	b.n	80332ca <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80332c6:	7dfb      	ldrb	r3, [r7, #23]
 80332c8:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80332ca:	687b      	ldr	r3, [r7, #4]
 80332cc:	681b      	ldr	r3, [r3, #0]
 80332ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80332d2:	2b00      	cmp	r3, #0
 80332d4:	d04b      	beq.n	803336e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80332d6:	687b      	ldr	r3, [r7, #4]
 80332d8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80332dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80332e0:	d030      	beq.n	8033344 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80332e2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80332e6:	d82a      	bhi.n	803333e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80332e8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80332ec:	d02e      	beq.n	803334c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 80332ee:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80332f2:	d824      	bhi.n	803333e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80332f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80332f8:	d018      	beq.n	803332c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80332fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80332fe:	d81e      	bhi.n	803333e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8033300:	2b00      	cmp	r3, #0
 8033302:	d003      	beq.n	803330c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8033304:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8033308:	d007      	beq.n	803331a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 803330a:	e018      	b.n	803333e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 803330c:	4b0e      	ldr	r3, [pc, #56]	; (8033348 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 803330e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8033310:	4a0d      	ldr	r2, [pc, #52]	; (8033348 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8033312:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8033316:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8033318:	e019      	b.n	803334e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 803331a:	687b      	ldr	r3, [r7, #4]
 803331c:	3304      	adds	r3, #4
 803331e:	2100      	movs	r1, #0
 8033320:	4618      	mov	r0, r3
 8033322:	f001 f8ab 	bl	803447c <RCCEx_PLL2_Config>
 8033326:	4603      	mov	r3, r0
 8033328:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 803332a:	e010      	b.n	803334e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 803332c:	687b      	ldr	r3, [r7, #4]
 803332e:	3324      	adds	r3, #36	; 0x24
 8033330:	2100      	movs	r1, #0
 8033332:	4618      	mov	r0, r3
 8033334:	f001 f954 	bl	80345e0 <RCCEx_PLL3_Config>
 8033338:	4603      	mov	r3, r0
 803333a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 803333c:	e007      	b.n	803334e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 803333e:	2301      	movs	r3, #1
 8033340:	75fb      	strb	r3, [r7, #23]
      break;
 8033342:	e004      	b.n	803334e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8033344:	bf00      	nop
 8033346:	e002      	b.n	803334e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8033348:	58024400 	.word	0x58024400
      break;
 803334c:	bf00      	nop
    }

    if(ret == HAL_OK)
 803334e:	7dfb      	ldrb	r3, [r7, #23]
 8033350:	2b00      	cmp	r3, #0
 8033352:	d10a      	bne.n	803336a <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8033354:	4b99      	ldr	r3, [pc, #612]	; (80335bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8033356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8033358:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 803335c:	687b      	ldr	r3, [r7, #4]
 803335e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8033362:	4996      	ldr	r1, [pc, #600]	; (80335bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8033364:	4313      	orrs	r3, r2
 8033366:	658b      	str	r3, [r1, #88]	; 0x58
 8033368:	e001      	b.n	803336e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 803336a:	7dfb      	ldrb	r3, [r7, #23]
 803336c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 803336e:	687b      	ldr	r3, [r7, #4]
 8033370:	681b      	ldr	r3, [r3, #0]
 8033372:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8033376:	2b00      	cmp	r3, #0
 8033378:	d032      	beq.n	80333e0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 803337a:	687b      	ldr	r3, [r7, #4]
 803337c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 803337e:	2b30      	cmp	r3, #48	; 0x30
 8033380:	d01c      	beq.n	80333bc <HAL_RCCEx_PeriphCLKConfig+0x348>
 8033382:	2b30      	cmp	r3, #48	; 0x30
 8033384:	d817      	bhi.n	80333b6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8033386:	2b20      	cmp	r3, #32
 8033388:	d00c      	beq.n	80333a4 <HAL_RCCEx_PeriphCLKConfig+0x330>
 803338a:	2b20      	cmp	r3, #32
 803338c:	d813      	bhi.n	80333b6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 803338e:	2b00      	cmp	r3, #0
 8033390:	d016      	beq.n	80333c0 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8033392:	2b10      	cmp	r3, #16
 8033394:	d10f      	bne.n	80333b6 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8033396:	4b89      	ldr	r3, [pc, #548]	; (80335bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8033398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803339a:	4a88      	ldr	r2, [pc, #544]	; (80335bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 803339c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80333a0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80333a2:	e00e      	b.n	80333c2 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80333a4:	687b      	ldr	r3, [r7, #4]
 80333a6:	3304      	adds	r3, #4
 80333a8:	2102      	movs	r1, #2
 80333aa:	4618      	mov	r0, r3
 80333ac:	f001 f866 	bl	803447c <RCCEx_PLL2_Config>
 80333b0:	4603      	mov	r3, r0
 80333b2:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80333b4:	e005      	b.n	80333c2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80333b6:	2301      	movs	r3, #1
 80333b8:	75fb      	strb	r3, [r7, #23]
      break;
 80333ba:	e002      	b.n	80333c2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80333bc:	bf00      	nop
 80333be:	e000      	b.n	80333c2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80333c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80333c2:	7dfb      	ldrb	r3, [r7, #23]
 80333c4:	2b00      	cmp	r3, #0
 80333c6:	d109      	bne.n	80333dc <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80333c8:	4b7c      	ldr	r3, [pc, #496]	; (80335bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80333ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80333cc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80333d0:	687b      	ldr	r3, [r7, #4]
 80333d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80333d4:	4979      	ldr	r1, [pc, #484]	; (80335bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80333d6:	4313      	orrs	r3, r2
 80333d8:	64cb      	str	r3, [r1, #76]	; 0x4c
 80333da:	e001      	b.n	80333e0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80333dc:	7dfb      	ldrb	r3, [r7, #23]
 80333de:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80333e0:	687b      	ldr	r3, [r7, #4]
 80333e2:	681b      	ldr	r3, [r3, #0]
 80333e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80333e8:	2b00      	cmp	r3, #0
 80333ea:	d047      	beq.n	803347c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80333ec:	687b      	ldr	r3, [r7, #4]
 80333ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80333f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80333f4:	d030      	beq.n	8033458 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80333f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80333fa:	d82a      	bhi.n	8033452 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80333fc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8033400:	d02c      	beq.n	803345c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8033402:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8033406:	d824      	bhi.n	8033452 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8033408:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 803340c:	d018      	beq.n	8033440 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 803340e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8033412:	d81e      	bhi.n	8033452 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8033414:	2b00      	cmp	r3, #0
 8033416:	d003      	beq.n	8033420 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8033418:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 803341c:	d007      	beq.n	803342e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 803341e:	e018      	b.n	8033452 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8033420:	4b66      	ldr	r3, [pc, #408]	; (80335bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8033422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8033424:	4a65      	ldr	r2, [pc, #404]	; (80335bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8033426:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 803342a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 803342c:	e017      	b.n	803345e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 803342e:	687b      	ldr	r3, [r7, #4]
 8033430:	3304      	adds	r3, #4
 8033432:	2100      	movs	r1, #0
 8033434:	4618      	mov	r0, r3
 8033436:	f001 f821 	bl	803447c <RCCEx_PLL2_Config>
 803343a:	4603      	mov	r3, r0
 803343c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 803343e:	e00e      	b.n	803345e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8033440:	687b      	ldr	r3, [r7, #4]
 8033442:	3324      	adds	r3, #36	; 0x24
 8033444:	2100      	movs	r1, #0
 8033446:	4618      	mov	r0, r3
 8033448:	f001 f8ca 	bl	80345e0 <RCCEx_PLL3_Config>
 803344c:	4603      	mov	r3, r0
 803344e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8033450:	e005      	b.n	803345e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8033452:	2301      	movs	r3, #1
 8033454:	75fb      	strb	r3, [r7, #23]
      break;
 8033456:	e002      	b.n	803345e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8033458:	bf00      	nop
 803345a:	e000      	b.n	803345e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 803345c:	bf00      	nop
    }

    if(ret == HAL_OK)
 803345e:	7dfb      	ldrb	r3, [r7, #23]
 8033460:	2b00      	cmp	r3, #0
 8033462:	d109      	bne.n	8033478 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8033464:	4b55      	ldr	r3, [pc, #340]	; (80335bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8033466:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8033468:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 803346c:	687b      	ldr	r3, [r7, #4]
 803346e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8033470:	4952      	ldr	r1, [pc, #328]	; (80335bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8033472:	4313      	orrs	r3, r2
 8033474:	650b      	str	r3, [r1, #80]	; 0x50
 8033476:	e001      	b.n	803347c <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8033478:	7dfb      	ldrb	r3, [r7, #23]
 803347a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 803347c:	687b      	ldr	r3, [r7, #4]
 803347e:	681b      	ldr	r3, [r3, #0]
 8033480:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8033484:	2b00      	cmp	r3, #0
 8033486:	d049      	beq.n	803351c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8033488:	687b      	ldr	r3, [r7, #4]
 803348a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 803348c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8033490:	d02e      	beq.n	80334f0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8033492:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8033496:	d828      	bhi.n	80334ea <HAL_RCCEx_PeriphCLKConfig+0x476>
 8033498:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 803349c:	d02a      	beq.n	80334f4 <HAL_RCCEx_PeriphCLKConfig+0x480>
 803349e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80334a2:	d822      	bhi.n	80334ea <HAL_RCCEx_PeriphCLKConfig+0x476>
 80334a4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80334a8:	d026      	beq.n	80334f8 <HAL_RCCEx_PeriphCLKConfig+0x484>
 80334aa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80334ae:	d81c      	bhi.n	80334ea <HAL_RCCEx_PeriphCLKConfig+0x476>
 80334b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80334b4:	d010      	beq.n	80334d8 <HAL_RCCEx_PeriphCLKConfig+0x464>
 80334b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80334ba:	d816      	bhi.n	80334ea <HAL_RCCEx_PeriphCLKConfig+0x476>
 80334bc:	2b00      	cmp	r3, #0
 80334be:	d01d      	beq.n	80334fc <HAL_RCCEx_PeriphCLKConfig+0x488>
 80334c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80334c4:	d111      	bne.n	80334ea <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80334c6:	687b      	ldr	r3, [r7, #4]
 80334c8:	3304      	adds	r3, #4
 80334ca:	2101      	movs	r1, #1
 80334cc:	4618      	mov	r0, r3
 80334ce:	f000 ffd5 	bl	803447c <RCCEx_PLL2_Config>
 80334d2:	4603      	mov	r3, r0
 80334d4:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80334d6:	e012      	b.n	80334fe <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80334d8:	687b      	ldr	r3, [r7, #4]
 80334da:	3324      	adds	r3, #36	; 0x24
 80334dc:	2101      	movs	r1, #1
 80334de:	4618      	mov	r0, r3
 80334e0:	f001 f87e 	bl	80345e0 <RCCEx_PLL3_Config>
 80334e4:	4603      	mov	r3, r0
 80334e6:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80334e8:	e009      	b.n	80334fe <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80334ea:	2301      	movs	r3, #1
 80334ec:	75fb      	strb	r3, [r7, #23]
      break;
 80334ee:	e006      	b.n	80334fe <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80334f0:	bf00      	nop
 80334f2:	e004      	b.n	80334fe <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80334f4:	bf00      	nop
 80334f6:	e002      	b.n	80334fe <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80334f8:	bf00      	nop
 80334fa:	e000      	b.n	80334fe <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80334fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80334fe:	7dfb      	ldrb	r3, [r7, #23]
 8033500:	2b00      	cmp	r3, #0
 8033502:	d109      	bne.n	8033518 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8033504:	4b2d      	ldr	r3, [pc, #180]	; (80335bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8033506:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8033508:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 803350c:	687b      	ldr	r3, [r7, #4]
 803350e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8033510:	492a      	ldr	r1, [pc, #168]	; (80335bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8033512:	4313      	orrs	r3, r2
 8033514:	650b      	str	r3, [r1, #80]	; 0x50
 8033516:	e001      	b.n	803351c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8033518:	7dfb      	ldrb	r3, [r7, #23]
 803351a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 803351c:	687b      	ldr	r3, [r7, #4]
 803351e:	681b      	ldr	r3, [r3, #0]
 8033520:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8033524:	2b00      	cmp	r3, #0
 8033526:	d04d      	beq.n	80335c4 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8033528:	687b      	ldr	r3, [r7, #4]
 803352a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 803352e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8033532:	d02e      	beq.n	8033592 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8033534:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8033538:	d828      	bhi.n	803358c <HAL_RCCEx_PeriphCLKConfig+0x518>
 803353a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 803353e:	d02a      	beq.n	8033596 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8033540:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8033544:	d822      	bhi.n	803358c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8033546:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 803354a:	d026      	beq.n	803359a <HAL_RCCEx_PeriphCLKConfig+0x526>
 803354c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8033550:	d81c      	bhi.n	803358c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8033552:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8033556:	d010      	beq.n	803357a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8033558:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 803355c:	d816      	bhi.n	803358c <HAL_RCCEx_PeriphCLKConfig+0x518>
 803355e:	2b00      	cmp	r3, #0
 8033560:	d01d      	beq.n	803359e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8033562:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8033566:	d111      	bne.n	803358c <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8033568:	687b      	ldr	r3, [r7, #4]
 803356a:	3304      	adds	r3, #4
 803356c:	2101      	movs	r1, #1
 803356e:	4618      	mov	r0, r3
 8033570:	f000 ff84 	bl	803447c <RCCEx_PLL2_Config>
 8033574:	4603      	mov	r3, r0
 8033576:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8033578:	e012      	b.n	80335a0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 803357a:	687b      	ldr	r3, [r7, #4]
 803357c:	3324      	adds	r3, #36	; 0x24
 803357e:	2101      	movs	r1, #1
 8033580:	4618      	mov	r0, r3
 8033582:	f001 f82d 	bl	80345e0 <RCCEx_PLL3_Config>
 8033586:	4603      	mov	r3, r0
 8033588:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 803358a:	e009      	b.n	80335a0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 803358c:	2301      	movs	r3, #1
 803358e:	75fb      	strb	r3, [r7, #23]
      break;
 8033590:	e006      	b.n	80335a0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8033592:	bf00      	nop
 8033594:	e004      	b.n	80335a0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8033596:	bf00      	nop
 8033598:	e002      	b.n	80335a0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 803359a:	bf00      	nop
 803359c:	e000      	b.n	80335a0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 803359e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80335a0:	7dfb      	ldrb	r3, [r7, #23]
 80335a2:	2b00      	cmp	r3, #0
 80335a4:	d10c      	bne.n	80335c0 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80335a6:	4b05      	ldr	r3, [pc, #20]	; (80335bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80335a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80335aa:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80335ae:	687b      	ldr	r3, [r7, #4]
 80335b0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80335b4:	4901      	ldr	r1, [pc, #4]	; (80335bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80335b6:	4313      	orrs	r3, r2
 80335b8:	658b      	str	r3, [r1, #88]	; 0x58
 80335ba:	e003      	b.n	80335c4 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80335bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80335c0:	7dfb      	ldrb	r3, [r7, #23]
 80335c2:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80335c4:	687b      	ldr	r3, [r7, #4]
 80335c6:	681b      	ldr	r3, [r3, #0]
 80335c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80335cc:	2b00      	cmp	r3, #0
 80335ce:	d02f      	beq.n	8033630 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80335d0:	687b      	ldr	r3, [r7, #4]
 80335d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80335d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80335d8:	d00e      	beq.n	80335f8 <HAL_RCCEx_PeriphCLKConfig+0x584>
 80335da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80335de:	d814      	bhi.n	803360a <HAL_RCCEx_PeriphCLKConfig+0x596>
 80335e0:	2b00      	cmp	r3, #0
 80335e2:	d015      	beq.n	8033610 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 80335e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80335e8:	d10f      	bne.n	803360a <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80335ea:	4baf      	ldr	r3, [pc, #700]	; (80338a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80335ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80335ee:	4aae      	ldr	r2, [pc, #696]	; (80338a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80335f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80335f4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80335f6:	e00c      	b.n	8033612 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80335f8:	687b      	ldr	r3, [r7, #4]
 80335fa:	3304      	adds	r3, #4
 80335fc:	2101      	movs	r1, #1
 80335fe:	4618      	mov	r0, r3
 8033600:	f000 ff3c 	bl	803447c <RCCEx_PLL2_Config>
 8033604:	4603      	mov	r3, r0
 8033606:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8033608:	e003      	b.n	8033612 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 803360a:	2301      	movs	r3, #1
 803360c:	75fb      	strb	r3, [r7, #23]
      break;
 803360e:	e000      	b.n	8033612 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8033610:	bf00      	nop
    }

    if(ret == HAL_OK)
 8033612:	7dfb      	ldrb	r3, [r7, #23]
 8033614:	2b00      	cmp	r3, #0
 8033616:	d109      	bne.n	803362c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8033618:	4ba3      	ldr	r3, [pc, #652]	; (80338a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 803361a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 803361c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8033620:	687b      	ldr	r3, [r7, #4]
 8033622:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8033624:	49a0      	ldr	r1, [pc, #640]	; (80338a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8033626:	4313      	orrs	r3, r2
 8033628:	650b      	str	r3, [r1, #80]	; 0x50
 803362a:	e001      	b.n	8033630 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 803362c:	7dfb      	ldrb	r3, [r7, #23]
 803362e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8033630:	687b      	ldr	r3, [r7, #4]
 8033632:	681b      	ldr	r3, [r3, #0]
 8033634:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8033638:	2b00      	cmp	r3, #0
 803363a:	d032      	beq.n	80336a2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 803363c:	687b      	ldr	r3, [r7, #4]
 803363e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8033640:	2b03      	cmp	r3, #3
 8033642:	d81b      	bhi.n	803367c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8033644:	a201      	add	r2, pc, #4	; (adr r2, 803364c <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8033646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803364a:	bf00      	nop
 803364c:	08033683 	.word	0x08033683
 8033650:	0803365d 	.word	0x0803365d
 8033654:	0803366b 	.word	0x0803366b
 8033658:	08033683 	.word	0x08033683
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 803365c:	4b92      	ldr	r3, [pc, #584]	; (80338a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 803365e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8033660:	4a91      	ldr	r2, [pc, #580]	; (80338a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8033662:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8033666:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8033668:	e00c      	b.n	8033684 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 803366a:	687b      	ldr	r3, [r7, #4]
 803366c:	3304      	adds	r3, #4
 803366e:	2102      	movs	r1, #2
 8033670:	4618      	mov	r0, r3
 8033672:	f000 ff03 	bl	803447c <RCCEx_PLL2_Config>
 8033676:	4603      	mov	r3, r0
 8033678:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 803367a:	e003      	b.n	8033684 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 803367c:	2301      	movs	r3, #1
 803367e:	75fb      	strb	r3, [r7, #23]
      break;
 8033680:	e000      	b.n	8033684 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8033682:	bf00      	nop
    }

    if(ret == HAL_OK)
 8033684:	7dfb      	ldrb	r3, [r7, #23]
 8033686:	2b00      	cmp	r3, #0
 8033688:	d109      	bne.n	803369e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 803368a:	4b87      	ldr	r3, [pc, #540]	; (80338a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 803368c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 803368e:	f023 0203 	bic.w	r2, r3, #3
 8033692:	687b      	ldr	r3, [r7, #4]
 8033694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8033696:	4984      	ldr	r1, [pc, #528]	; (80338a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8033698:	4313      	orrs	r3, r2
 803369a:	64cb      	str	r3, [r1, #76]	; 0x4c
 803369c:	e001      	b.n	80336a2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 803369e:	7dfb      	ldrb	r3, [r7, #23]
 80336a0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80336a2:	687b      	ldr	r3, [r7, #4]
 80336a4:	681b      	ldr	r3, [r3, #0]
 80336a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80336aa:	2b00      	cmp	r3, #0
 80336ac:	f000 8086 	beq.w	80337bc <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80336b0:	4b7e      	ldr	r3, [pc, #504]	; (80338ac <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80336b2:	681b      	ldr	r3, [r3, #0]
 80336b4:	4a7d      	ldr	r2, [pc, #500]	; (80338ac <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80336b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80336ba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80336bc:	f7f8 fd38 	bl	802c130 <HAL_GetTick>
 80336c0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80336c2:	e009      	b.n	80336d8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80336c4:	f7f8 fd34 	bl	802c130 <HAL_GetTick>
 80336c8:	4602      	mov	r2, r0
 80336ca:	693b      	ldr	r3, [r7, #16]
 80336cc:	1ad3      	subs	r3, r2, r3
 80336ce:	2b64      	cmp	r3, #100	; 0x64
 80336d0:	d902      	bls.n	80336d8 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80336d2:	2303      	movs	r3, #3
 80336d4:	75fb      	strb	r3, [r7, #23]
        break;
 80336d6:	e005      	b.n	80336e4 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80336d8:	4b74      	ldr	r3, [pc, #464]	; (80338ac <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80336da:	681b      	ldr	r3, [r3, #0]
 80336dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80336e0:	2b00      	cmp	r3, #0
 80336e2:	d0ef      	beq.n	80336c4 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80336e4:	7dfb      	ldrb	r3, [r7, #23]
 80336e6:	2b00      	cmp	r3, #0
 80336e8:	d166      	bne.n	80337b8 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80336ea:	4b6f      	ldr	r3, [pc, #444]	; (80338a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80336ec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80336ee:	687b      	ldr	r3, [r7, #4]
 80336f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80336f4:	4053      	eors	r3, r2
 80336f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80336fa:	2b00      	cmp	r3, #0
 80336fc:	d013      	beq.n	8033726 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80336fe:	4b6a      	ldr	r3, [pc, #424]	; (80338a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8033700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8033702:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8033706:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8033708:	4b67      	ldr	r3, [pc, #412]	; (80338a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 803370a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 803370c:	4a66      	ldr	r2, [pc, #408]	; (80338a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 803370e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8033712:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8033714:	4b64      	ldr	r3, [pc, #400]	; (80338a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8033716:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8033718:	4a63      	ldr	r2, [pc, #396]	; (80338a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 803371a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 803371e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8033720:	4a61      	ldr	r2, [pc, #388]	; (80338a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8033722:	68fb      	ldr	r3, [r7, #12]
 8033724:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8033726:	687b      	ldr	r3, [r7, #4]
 8033728:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 803372c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8033730:	d115      	bne.n	803375e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8033732:	f7f8 fcfd 	bl	802c130 <HAL_GetTick>
 8033736:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8033738:	e00b      	b.n	8033752 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 803373a:	f7f8 fcf9 	bl	802c130 <HAL_GetTick>
 803373e:	4602      	mov	r2, r0
 8033740:	693b      	ldr	r3, [r7, #16]
 8033742:	1ad3      	subs	r3, r2, r3
 8033744:	f241 3288 	movw	r2, #5000	; 0x1388
 8033748:	4293      	cmp	r3, r2
 803374a:	d902      	bls.n	8033752 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 803374c:	2303      	movs	r3, #3
 803374e:	75fb      	strb	r3, [r7, #23]
            break;
 8033750:	e005      	b.n	803375e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8033752:	4b55      	ldr	r3, [pc, #340]	; (80338a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8033754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8033756:	f003 0302 	and.w	r3, r3, #2
 803375a:	2b00      	cmp	r3, #0
 803375c:	d0ed      	beq.n	803373a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 803375e:	7dfb      	ldrb	r3, [r7, #23]
 8033760:	2b00      	cmp	r3, #0
 8033762:	d126      	bne.n	80337b2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8033764:	687b      	ldr	r3, [r7, #4]
 8033766:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 803376a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 803376e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8033772:	d10d      	bne.n	8033790 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8033774:	4b4c      	ldr	r3, [pc, #304]	; (80338a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8033776:	691b      	ldr	r3, [r3, #16]
 8033778:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 803377c:	687b      	ldr	r3, [r7, #4]
 803377e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8033782:	0919      	lsrs	r1, r3, #4
 8033784:	4b4a      	ldr	r3, [pc, #296]	; (80338b0 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8033786:	400b      	ands	r3, r1
 8033788:	4947      	ldr	r1, [pc, #284]	; (80338a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 803378a:	4313      	orrs	r3, r2
 803378c:	610b      	str	r3, [r1, #16]
 803378e:	e005      	b.n	803379c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8033790:	4b45      	ldr	r3, [pc, #276]	; (80338a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8033792:	691b      	ldr	r3, [r3, #16]
 8033794:	4a44      	ldr	r2, [pc, #272]	; (80338a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8033796:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 803379a:	6113      	str	r3, [r2, #16]
 803379c:	4b42      	ldr	r3, [pc, #264]	; (80338a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 803379e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80337a0:	687b      	ldr	r3, [r7, #4]
 80337a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80337a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80337aa:	493f      	ldr	r1, [pc, #252]	; (80338a8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80337ac:	4313      	orrs	r3, r2
 80337ae:	670b      	str	r3, [r1, #112]	; 0x70
 80337b0:	e004      	b.n	80337bc <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80337b2:	7dfb      	ldrb	r3, [r7, #23]
 80337b4:	75bb      	strb	r3, [r7, #22]
 80337b6:	e001      	b.n	80337bc <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80337b8:	7dfb      	ldrb	r3, [r7, #23]
 80337ba:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80337bc:	687b      	ldr	r3, [r7, #4]
 80337be:	681b      	ldr	r3, [r3, #0]
 80337c0:	f003 0301 	and.w	r3, r3, #1
 80337c4:	2b00      	cmp	r3, #0
 80337c6:	f000 8085 	beq.w	80338d4 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80337ca:	687b      	ldr	r3, [r7, #4]
 80337cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80337ce:	2b28      	cmp	r3, #40	; 0x28
 80337d0:	d866      	bhi.n	80338a0 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80337d2:	a201      	add	r2, pc, #4	; (adr r2, 80337d8 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80337d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80337d8:	080338b5 	.word	0x080338b5
 80337dc:	080338a1 	.word	0x080338a1
 80337e0:	080338a1 	.word	0x080338a1
 80337e4:	080338a1 	.word	0x080338a1
 80337e8:	080338a1 	.word	0x080338a1
 80337ec:	080338a1 	.word	0x080338a1
 80337f0:	080338a1 	.word	0x080338a1
 80337f4:	080338a1 	.word	0x080338a1
 80337f8:	0803387d 	.word	0x0803387d
 80337fc:	080338a1 	.word	0x080338a1
 8033800:	080338a1 	.word	0x080338a1
 8033804:	080338a1 	.word	0x080338a1
 8033808:	080338a1 	.word	0x080338a1
 803380c:	080338a1 	.word	0x080338a1
 8033810:	080338a1 	.word	0x080338a1
 8033814:	080338a1 	.word	0x080338a1
 8033818:	0803388f 	.word	0x0803388f
 803381c:	080338a1 	.word	0x080338a1
 8033820:	080338a1 	.word	0x080338a1
 8033824:	080338a1 	.word	0x080338a1
 8033828:	080338a1 	.word	0x080338a1
 803382c:	080338a1 	.word	0x080338a1
 8033830:	080338a1 	.word	0x080338a1
 8033834:	080338a1 	.word	0x080338a1
 8033838:	080338b5 	.word	0x080338b5
 803383c:	080338a1 	.word	0x080338a1
 8033840:	080338a1 	.word	0x080338a1
 8033844:	080338a1 	.word	0x080338a1
 8033848:	080338a1 	.word	0x080338a1
 803384c:	080338a1 	.word	0x080338a1
 8033850:	080338a1 	.word	0x080338a1
 8033854:	080338a1 	.word	0x080338a1
 8033858:	080338b5 	.word	0x080338b5
 803385c:	080338a1 	.word	0x080338a1
 8033860:	080338a1 	.word	0x080338a1
 8033864:	080338a1 	.word	0x080338a1
 8033868:	080338a1 	.word	0x080338a1
 803386c:	080338a1 	.word	0x080338a1
 8033870:	080338a1 	.word	0x080338a1
 8033874:	080338a1 	.word	0x080338a1
 8033878:	080338b5 	.word	0x080338b5
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 803387c:	687b      	ldr	r3, [r7, #4]
 803387e:	3304      	adds	r3, #4
 8033880:	2101      	movs	r1, #1
 8033882:	4618      	mov	r0, r3
 8033884:	f000 fdfa 	bl	803447c <RCCEx_PLL2_Config>
 8033888:	4603      	mov	r3, r0
 803388a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 803388c:	e013      	b.n	80338b6 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 803388e:	687b      	ldr	r3, [r7, #4]
 8033890:	3324      	adds	r3, #36	; 0x24
 8033892:	2101      	movs	r1, #1
 8033894:	4618      	mov	r0, r3
 8033896:	f000 fea3 	bl	80345e0 <RCCEx_PLL3_Config>
 803389a:	4603      	mov	r3, r0
 803389c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 803389e:	e00a      	b.n	80338b6 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80338a0:	2301      	movs	r3, #1
 80338a2:	75fb      	strb	r3, [r7, #23]
      break;
 80338a4:	e007      	b.n	80338b6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80338a6:	bf00      	nop
 80338a8:	58024400 	.word	0x58024400
 80338ac:	58024800 	.word	0x58024800
 80338b0:	00ffffcf 	.word	0x00ffffcf
      break;
 80338b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80338b6:	7dfb      	ldrb	r3, [r7, #23]
 80338b8:	2b00      	cmp	r3, #0
 80338ba:	d109      	bne.n	80338d0 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80338bc:	4b96      	ldr	r3, [pc, #600]	; (8033b18 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80338be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80338c0:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80338c4:	687b      	ldr	r3, [r7, #4]
 80338c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80338c8:	4993      	ldr	r1, [pc, #588]	; (8033b18 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80338ca:	4313      	orrs	r3, r2
 80338cc:	654b      	str	r3, [r1, #84]	; 0x54
 80338ce:	e001      	b.n	80338d4 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80338d0:	7dfb      	ldrb	r3, [r7, #23]
 80338d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80338d4:	687b      	ldr	r3, [r7, #4]
 80338d6:	681b      	ldr	r3, [r3, #0]
 80338d8:	f003 0302 	and.w	r3, r3, #2
 80338dc:	2b00      	cmp	r3, #0
 80338de:	d038      	beq.n	8033952 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80338e0:	687b      	ldr	r3, [r7, #4]
 80338e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80338e4:	2b05      	cmp	r3, #5
 80338e6:	d821      	bhi.n	803392c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80338e8:	a201      	add	r2, pc, #4	; (adr r2, 80338f0 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 80338ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80338ee:	bf00      	nop
 80338f0:	08033933 	.word	0x08033933
 80338f4:	08033909 	.word	0x08033909
 80338f8:	0803391b 	.word	0x0803391b
 80338fc:	08033933 	.word	0x08033933
 8033900:	08033933 	.word	0x08033933
 8033904:	08033933 	.word	0x08033933
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8033908:	687b      	ldr	r3, [r7, #4]
 803390a:	3304      	adds	r3, #4
 803390c:	2101      	movs	r1, #1
 803390e:	4618      	mov	r0, r3
 8033910:	f000 fdb4 	bl	803447c <RCCEx_PLL2_Config>
 8033914:	4603      	mov	r3, r0
 8033916:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8033918:	e00c      	b.n	8033934 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 803391a:	687b      	ldr	r3, [r7, #4]
 803391c:	3324      	adds	r3, #36	; 0x24
 803391e:	2101      	movs	r1, #1
 8033920:	4618      	mov	r0, r3
 8033922:	f000 fe5d 	bl	80345e0 <RCCEx_PLL3_Config>
 8033926:	4603      	mov	r3, r0
 8033928:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 803392a:	e003      	b.n	8033934 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 803392c:	2301      	movs	r3, #1
 803392e:	75fb      	strb	r3, [r7, #23]
      break;
 8033930:	e000      	b.n	8033934 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8033932:	bf00      	nop
    }

    if(ret == HAL_OK)
 8033934:	7dfb      	ldrb	r3, [r7, #23]
 8033936:	2b00      	cmp	r3, #0
 8033938:	d109      	bne.n	803394e <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 803393a:	4b77      	ldr	r3, [pc, #476]	; (8033b18 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 803393c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 803393e:	f023 0207 	bic.w	r2, r3, #7
 8033942:	687b      	ldr	r3, [r7, #4]
 8033944:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8033946:	4974      	ldr	r1, [pc, #464]	; (8033b18 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8033948:	4313      	orrs	r3, r2
 803394a:	654b      	str	r3, [r1, #84]	; 0x54
 803394c:	e001      	b.n	8033952 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 803394e:	7dfb      	ldrb	r3, [r7, #23]
 8033950:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8033952:	687b      	ldr	r3, [r7, #4]
 8033954:	681b      	ldr	r3, [r3, #0]
 8033956:	f003 0304 	and.w	r3, r3, #4
 803395a:	2b00      	cmp	r3, #0
 803395c:	d03a      	beq.n	80339d4 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 803395e:	687b      	ldr	r3, [r7, #4]
 8033960:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8033964:	2b05      	cmp	r3, #5
 8033966:	d821      	bhi.n	80339ac <HAL_RCCEx_PeriphCLKConfig+0x938>
 8033968:	a201      	add	r2, pc, #4	; (adr r2, 8033970 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 803396a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803396e:	bf00      	nop
 8033970:	080339b3 	.word	0x080339b3
 8033974:	08033989 	.word	0x08033989
 8033978:	0803399b 	.word	0x0803399b
 803397c:	080339b3 	.word	0x080339b3
 8033980:	080339b3 	.word	0x080339b3
 8033984:	080339b3 	.word	0x080339b3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8033988:	687b      	ldr	r3, [r7, #4]
 803398a:	3304      	adds	r3, #4
 803398c:	2101      	movs	r1, #1
 803398e:	4618      	mov	r0, r3
 8033990:	f000 fd74 	bl	803447c <RCCEx_PLL2_Config>
 8033994:	4603      	mov	r3, r0
 8033996:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8033998:	e00c      	b.n	80339b4 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 803399a:	687b      	ldr	r3, [r7, #4]
 803399c:	3324      	adds	r3, #36	; 0x24
 803399e:	2101      	movs	r1, #1
 80339a0:	4618      	mov	r0, r3
 80339a2:	f000 fe1d 	bl	80345e0 <RCCEx_PLL3_Config>
 80339a6:	4603      	mov	r3, r0
 80339a8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80339aa:	e003      	b.n	80339b4 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80339ac:	2301      	movs	r3, #1
 80339ae:	75fb      	strb	r3, [r7, #23]
      break;
 80339b0:	e000      	b.n	80339b4 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 80339b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80339b4:	7dfb      	ldrb	r3, [r7, #23]
 80339b6:	2b00      	cmp	r3, #0
 80339b8:	d10a      	bne.n	80339d0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80339ba:	4b57      	ldr	r3, [pc, #348]	; (8033b18 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80339bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80339be:	f023 0207 	bic.w	r2, r3, #7
 80339c2:	687b      	ldr	r3, [r7, #4]
 80339c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80339c8:	4953      	ldr	r1, [pc, #332]	; (8033b18 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80339ca:	4313      	orrs	r3, r2
 80339cc:	658b      	str	r3, [r1, #88]	; 0x58
 80339ce:	e001      	b.n	80339d4 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80339d0:	7dfb      	ldrb	r3, [r7, #23]
 80339d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80339d4:	687b      	ldr	r3, [r7, #4]
 80339d6:	681b      	ldr	r3, [r3, #0]
 80339d8:	f003 0320 	and.w	r3, r3, #32
 80339dc:	2b00      	cmp	r3, #0
 80339de:	d04b      	beq.n	8033a78 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80339e0:	687b      	ldr	r3, [r7, #4]
 80339e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80339e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80339ea:	d02e      	beq.n	8033a4a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80339ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80339f0:	d828      	bhi.n	8033a44 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80339f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80339f6:	d02a      	beq.n	8033a4e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80339f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80339fc:	d822      	bhi.n	8033a44 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80339fe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8033a02:	d026      	beq.n	8033a52 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8033a04:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8033a08:	d81c      	bhi.n	8033a44 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8033a0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8033a0e:	d010      	beq.n	8033a32 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8033a10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8033a14:	d816      	bhi.n	8033a44 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8033a16:	2b00      	cmp	r3, #0
 8033a18:	d01d      	beq.n	8033a56 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8033a1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8033a1e:	d111      	bne.n	8033a44 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8033a20:	687b      	ldr	r3, [r7, #4]
 8033a22:	3304      	adds	r3, #4
 8033a24:	2100      	movs	r1, #0
 8033a26:	4618      	mov	r0, r3
 8033a28:	f000 fd28 	bl	803447c <RCCEx_PLL2_Config>
 8033a2c:	4603      	mov	r3, r0
 8033a2e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8033a30:	e012      	b.n	8033a58 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8033a32:	687b      	ldr	r3, [r7, #4]
 8033a34:	3324      	adds	r3, #36	; 0x24
 8033a36:	2102      	movs	r1, #2
 8033a38:	4618      	mov	r0, r3
 8033a3a:	f000 fdd1 	bl	80345e0 <RCCEx_PLL3_Config>
 8033a3e:	4603      	mov	r3, r0
 8033a40:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8033a42:	e009      	b.n	8033a58 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8033a44:	2301      	movs	r3, #1
 8033a46:	75fb      	strb	r3, [r7, #23]
      break;
 8033a48:	e006      	b.n	8033a58 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8033a4a:	bf00      	nop
 8033a4c:	e004      	b.n	8033a58 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8033a4e:	bf00      	nop
 8033a50:	e002      	b.n	8033a58 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8033a52:	bf00      	nop
 8033a54:	e000      	b.n	8033a58 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8033a56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8033a58:	7dfb      	ldrb	r3, [r7, #23]
 8033a5a:	2b00      	cmp	r3, #0
 8033a5c:	d10a      	bne.n	8033a74 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8033a5e:	4b2e      	ldr	r3, [pc, #184]	; (8033b18 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8033a60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8033a62:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8033a66:	687b      	ldr	r3, [r7, #4]
 8033a68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8033a6c:	492a      	ldr	r1, [pc, #168]	; (8033b18 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8033a6e:	4313      	orrs	r3, r2
 8033a70:	654b      	str	r3, [r1, #84]	; 0x54
 8033a72:	e001      	b.n	8033a78 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8033a74:	7dfb      	ldrb	r3, [r7, #23]
 8033a76:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8033a78:	687b      	ldr	r3, [r7, #4]
 8033a7a:	681b      	ldr	r3, [r3, #0]
 8033a7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8033a80:	2b00      	cmp	r3, #0
 8033a82:	d04d      	beq.n	8033b20 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8033a84:	687b      	ldr	r3, [r7, #4]
 8033a86:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8033a8a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8033a8e:	d02e      	beq.n	8033aee <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8033a90:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8033a94:	d828      	bhi.n	8033ae8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8033a96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8033a9a:	d02a      	beq.n	8033af2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8033a9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8033aa0:	d822      	bhi.n	8033ae8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8033aa2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8033aa6:	d026      	beq.n	8033af6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8033aa8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8033aac:	d81c      	bhi.n	8033ae8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8033aae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8033ab2:	d010      	beq.n	8033ad6 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8033ab4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8033ab8:	d816      	bhi.n	8033ae8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8033aba:	2b00      	cmp	r3, #0
 8033abc:	d01d      	beq.n	8033afa <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8033abe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8033ac2:	d111      	bne.n	8033ae8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8033ac4:	687b      	ldr	r3, [r7, #4]
 8033ac6:	3304      	adds	r3, #4
 8033ac8:	2100      	movs	r1, #0
 8033aca:	4618      	mov	r0, r3
 8033acc:	f000 fcd6 	bl	803447c <RCCEx_PLL2_Config>
 8033ad0:	4603      	mov	r3, r0
 8033ad2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8033ad4:	e012      	b.n	8033afc <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8033ad6:	687b      	ldr	r3, [r7, #4]
 8033ad8:	3324      	adds	r3, #36	; 0x24
 8033ada:	2102      	movs	r1, #2
 8033adc:	4618      	mov	r0, r3
 8033ade:	f000 fd7f 	bl	80345e0 <RCCEx_PLL3_Config>
 8033ae2:	4603      	mov	r3, r0
 8033ae4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8033ae6:	e009      	b.n	8033afc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8033ae8:	2301      	movs	r3, #1
 8033aea:	75fb      	strb	r3, [r7, #23]
      break;
 8033aec:	e006      	b.n	8033afc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8033aee:	bf00      	nop
 8033af0:	e004      	b.n	8033afc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8033af2:	bf00      	nop
 8033af4:	e002      	b.n	8033afc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8033af6:	bf00      	nop
 8033af8:	e000      	b.n	8033afc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8033afa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8033afc:	7dfb      	ldrb	r3, [r7, #23]
 8033afe:	2b00      	cmp	r3, #0
 8033b00:	d10c      	bne.n	8033b1c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8033b02:	4b05      	ldr	r3, [pc, #20]	; (8033b18 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8033b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8033b06:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8033b0a:	687b      	ldr	r3, [r7, #4]
 8033b0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8033b10:	4901      	ldr	r1, [pc, #4]	; (8033b18 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8033b12:	4313      	orrs	r3, r2
 8033b14:	658b      	str	r3, [r1, #88]	; 0x58
 8033b16:	e003      	b.n	8033b20 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8033b18:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8033b1c:	7dfb      	ldrb	r3, [r7, #23]
 8033b1e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8033b20:	687b      	ldr	r3, [r7, #4]
 8033b22:	681b      	ldr	r3, [r3, #0]
 8033b24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8033b28:	2b00      	cmp	r3, #0
 8033b2a:	d04b      	beq.n	8033bc4 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8033b2c:	687b      	ldr	r3, [r7, #4]
 8033b2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8033b32:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8033b36:	d02e      	beq.n	8033b96 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8033b38:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8033b3c:	d828      	bhi.n	8033b90 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8033b3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8033b42:	d02a      	beq.n	8033b9a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8033b44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8033b48:	d822      	bhi.n	8033b90 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8033b4a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8033b4e:	d026      	beq.n	8033b9e <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8033b50:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8033b54:	d81c      	bhi.n	8033b90 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8033b56:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8033b5a:	d010      	beq.n	8033b7e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8033b5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8033b60:	d816      	bhi.n	8033b90 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8033b62:	2b00      	cmp	r3, #0
 8033b64:	d01d      	beq.n	8033ba2 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8033b66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8033b6a:	d111      	bne.n	8033b90 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8033b6c:	687b      	ldr	r3, [r7, #4]
 8033b6e:	3304      	adds	r3, #4
 8033b70:	2100      	movs	r1, #0
 8033b72:	4618      	mov	r0, r3
 8033b74:	f000 fc82 	bl	803447c <RCCEx_PLL2_Config>
 8033b78:	4603      	mov	r3, r0
 8033b7a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8033b7c:	e012      	b.n	8033ba4 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8033b7e:	687b      	ldr	r3, [r7, #4]
 8033b80:	3324      	adds	r3, #36	; 0x24
 8033b82:	2102      	movs	r1, #2
 8033b84:	4618      	mov	r0, r3
 8033b86:	f000 fd2b 	bl	80345e0 <RCCEx_PLL3_Config>
 8033b8a:	4603      	mov	r3, r0
 8033b8c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8033b8e:	e009      	b.n	8033ba4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8033b90:	2301      	movs	r3, #1
 8033b92:	75fb      	strb	r3, [r7, #23]
      break;
 8033b94:	e006      	b.n	8033ba4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8033b96:	bf00      	nop
 8033b98:	e004      	b.n	8033ba4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8033b9a:	bf00      	nop
 8033b9c:	e002      	b.n	8033ba4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8033b9e:	bf00      	nop
 8033ba0:	e000      	b.n	8033ba4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8033ba2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8033ba4:	7dfb      	ldrb	r3, [r7, #23]
 8033ba6:	2b00      	cmp	r3, #0
 8033ba8:	d10a      	bne.n	8033bc0 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8033baa:	4b9d      	ldr	r3, [pc, #628]	; (8033e20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8033bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8033bae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8033bb2:	687b      	ldr	r3, [r7, #4]
 8033bb4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8033bb8:	4999      	ldr	r1, [pc, #612]	; (8033e20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8033bba:	4313      	orrs	r3, r2
 8033bbc:	658b      	str	r3, [r1, #88]	; 0x58
 8033bbe:	e001      	b.n	8033bc4 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8033bc0:	7dfb      	ldrb	r3, [r7, #23]
 8033bc2:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8033bc4:	687b      	ldr	r3, [r7, #4]
 8033bc6:	681b      	ldr	r3, [r3, #0]
 8033bc8:	f003 0308 	and.w	r3, r3, #8
 8033bcc:	2b00      	cmp	r3, #0
 8033bce:	d01a      	beq.n	8033c06 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8033bd0:	687b      	ldr	r3, [r7, #4]
 8033bd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8033bd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8033bda:	d10a      	bne.n	8033bf2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8033bdc:	687b      	ldr	r3, [r7, #4]
 8033bde:	3324      	adds	r3, #36	; 0x24
 8033be0:	2102      	movs	r1, #2
 8033be2:	4618      	mov	r0, r3
 8033be4:	f000 fcfc 	bl	80345e0 <RCCEx_PLL3_Config>
 8033be8:	4603      	mov	r3, r0
 8033bea:	2b00      	cmp	r3, #0
 8033bec:	d001      	beq.n	8033bf2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8033bee:	2301      	movs	r3, #1
 8033bf0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8033bf2:	4b8b      	ldr	r3, [pc, #556]	; (8033e20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8033bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8033bf6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8033bfa:	687b      	ldr	r3, [r7, #4]
 8033bfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8033c00:	4987      	ldr	r1, [pc, #540]	; (8033e20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8033c02:	4313      	orrs	r3, r2
 8033c04:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8033c06:	687b      	ldr	r3, [r7, #4]
 8033c08:	681b      	ldr	r3, [r3, #0]
 8033c0a:	f003 0310 	and.w	r3, r3, #16
 8033c0e:	2b00      	cmp	r3, #0
 8033c10:	d01a      	beq.n	8033c48 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8033c12:	687b      	ldr	r3, [r7, #4]
 8033c14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8033c18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8033c1c:	d10a      	bne.n	8033c34 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8033c1e:	687b      	ldr	r3, [r7, #4]
 8033c20:	3324      	adds	r3, #36	; 0x24
 8033c22:	2102      	movs	r1, #2
 8033c24:	4618      	mov	r0, r3
 8033c26:	f000 fcdb 	bl	80345e0 <RCCEx_PLL3_Config>
 8033c2a:	4603      	mov	r3, r0
 8033c2c:	2b00      	cmp	r3, #0
 8033c2e:	d001      	beq.n	8033c34 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8033c30:	2301      	movs	r3, #1
 8033c32:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8033c34:	4b7a      	ldr	r3, [pc, #488]	; (8033e20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8033c36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8033c38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8033c3c:	687b      	ldr	r3, [r7, #4]
 8033c3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8033c42:	4977      	ldr	r1, [pc, #476]	; (8033e20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8033c44:	4313      	orrs	r3, r2
 8033c46:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8033c48:	687b      	ldr	r3, [r7, #4]
 8033c4a:	681b      	ldr	r3, [r3, #0]
 8033c4c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8033c50:	2b00      	cmp	r3, #0
 8033c52:	d034      	beq.n	8033cbe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8033c54:	687b      	ldr	r3, [r7, #4]
 8033c56:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8033c5a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8033c5e:	d01d      	beq.n	8033c9c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8033c60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8033c64:	d817      	bhi.n	8033c96 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8033c66:	2b00      	cmp	r3, #0
 8033c68:	d003      	beq.n	8033c72 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8033c6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8033c6e:	d009      	beq.n	8033c84 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8033c70:	e011      	b.n	8033c96 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8033c72:	687b      	ldr	r3, [r7, #4]
 8033c74:	3304      	adds	r3, #4
 8033c76:	2100      	movs	r1, #0
 8033c78:	4618      	mov	r0, r3
 8033c7a:	f000 fbff 	bl	803447c <RCCEx_PLL2_Config>
 8033c7e:	4603      	mov	r3, r0
 8033c80:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8033c82:	e00c      	b.n	8033c9e <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8033c84:	687b      	ldr	r3, [r7, #4]
 8033c86:	3324      	adds	r3, #36	; 0x24
 8033c88:	2102      	movs	r1, #2
 8033c8a:	4618      	mov	r0, r3
 8033c8c:	f000 fca8 	bl	80345e0 <RCCEx_PLL3_Config>
 8033c90:	4603      	mov	r3, r0
 8033c92:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8033c94:	e003      	b.n	8033c9e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8033c96:	2301      	movs	r3, #1
 8033c98:	75fb      	strb	r3, [r7, #23]
      break;
 8033c9a:	e000      	b.n	8033c9e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8033c9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8033c9e:	7dfb      	ldrb	r3, [r7, #23]
 8033ca0:	2b00      	cmp	r3, #0
 8033ca2:	d10a      	bne.n	8033cba <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8033ca4:	4b5e      	ldr	r3, [pc, #376]	; (8033e20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8033ca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8033ca8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8033cac:	687b      	ldr	r3, [r7, #4]
 8033cae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8033cb2:	495b      	ldr	r1, [pc, #364]	; (8033e20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8033cb4:	4313      	orrs	r3, r2
 8033cb6:	658b      	str	r3, [r1, #88]	; 0x58
 8033cb8:	e001      	b.n	8033cbe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8033cba:	7dfb      	ldrb	r3, [r7, #23]
 8033cbc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8033cbe:	687b      	ldr	r3, [r7, #4]
 8033cc0:	681b      	ldr	r3, [r3, #0]
 8033cc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8033cc6:	2b00      	cmp	r3, #0
 8033cc8:	d033      	beq.n	8033d32 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8033cca:	687b      	ldr	r3, [r7, #4]
 8033ccc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8033cd0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8033cd4:	d01c      	beq.n	8033d10 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8033cd6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8033cda:	d816      	bhi.n	8033d0a <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8033cdc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8033ce0:	d003      	beq.n	8033cea <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8033ce2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8033ce6:	d007      	beq.n	8033cf8 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8033ce8:	e00f      	b.n	8033d0a <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8033cea:	4b4d      	ldr	r3, [pc, #308]	; (8033e20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8033cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8033cee:	4a4c      	ldr	r2, [pc, #304]	; (8033e20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8033cf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8033cf4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8033cf6:	e00c      	b.n	8033d12 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8033cf8:	687b      	ldr	r3, [r7, #4]
 8033cfa:	3324      	adds	r3, #36	; 0x24
 8033cfc:	2101      	movs	r1, #1
 8033cfe:	4618      	mov	r0, r3
 8033d00:	f000 fc6e 	bl	80345e0 <RCCEx_PLL3_Config>
 8033d04:	4603      	mov	r3, r0
 8033d06:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8033d08:	e003      	b.n	8033d12 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8033d0a:	2301      	movs	r3, #1
 8033d0c:	75fb      	strb	r3, [r7, #23]
      break;
 8033d0e:	e000      	b.n	8033d12 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8033d10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8033d12:	7dfb      	ldrb	r3, [r7, #23]
 8033d14:	2b00      	cmp	r3, #0
 8033d16:	d10a      	bne.n	8033d2e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8033d18:	4b41      	ldr	r3, [pc, #260]	; (8033e20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8033d1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8033d1c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8033d20:	687b      	ldr	r3, [r7, #4]
 8033d22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8033d26:	493e      	ldr	r1, [pc, #248]	; (8033e20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8033d28:	4313      	orrs	r3, r2
 8033d2a:	654b      	str	r3, [r1, #84]	; 0x54
 8033d2c:	e001      	b.n	8033d32 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8033d2e:	7dfb      	ldrb	r3, [r7, #23]
 8033d30:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8033d32:	687b      	ldr	r3, [r7, #4]
 8033d34:	681b      	ldr	r3, [r3, #0]
 8033d36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8033d3a:	2b00      	cmp	r3, #0
 8033d3c:	d029      	beq.n	8033d92 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8033d3e:	687b      	ldr	r3, [r7, #4]
 8033d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8033d42:	2b00      	cmp	r3, #0
 8033d44:	d003      	beq.n	8033d4e <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8033d46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8033d4a:	d007      	beq.n	8033d5c <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8033d4c:	e00f      	b.n	8033d6e <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8033d4e:	4b34      	ldr	r3, [pc, #208]	; (8033e20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8033d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8033d52:	4a33      	ldr	r2, [pc, #204]	; (8033e20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8033d54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8033d58:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8033d5a:	e00b      	b.n	8033d74 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8033d5c:	687b      	ldr	r3, [r7, #4]
 8033d5e:	3304      	adds	r3, #4
 8033d60:	2102      	movs	r1, #2
 8033d62:	4618      	mov	r0, r3
 8033d64:	f000 fb8a 	bl	803447c <RCCEx_PLL2_Config>
 8033d68:	4603      	mov	r3, r0
 8033d6a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8033d6c:	e002      	b.n	8033d74 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8033d6e:	2301      	movs	r3, #1
 8033d70:	75fb      	strb	r3, [r7, #23]
      break;
 8033d72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8033d74:	7dfb      	ldrb	r3, [r7, #23]
 8033d76:	2b00      	cmp	r3, #0
 8033d78:	d109      	bne.n	8033d8e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8033d7a:	4b29      	ldr	r3, [pc, #164]	; (8033e20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8033d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8033d7e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8033d82:	687b      	ldr	r3, [r7, #4]
 8033d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8033d86:	4926      	ldr	r1, [pc, #152]	; (8033e20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8033d88:	4313      	orrs	r3, r2
 8033d8a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8033d8c:	e001      	b.n	8033d92 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8033d8e:	7dfb      	ldrb	r3, [r7, #23]
 8033d90:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8033d92:	687b      	ldr	r3, [r7, #4]
 8033d94:	681b      	ldr	r3, [r3, #0]
 8033d96:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8033d9a:	2b00      	cmp	r3, #0
 8033d9c:	d00a      	beq.n	8033db4 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8033d9e:	687b      	ldr	r3, [r7, #4]
 8033da0:	3324      	adds	r3, #36	; 0x24
 8033da2:	2102      	movs	r1, #2
 8033da4:	4618      	mov	r0, r3
 8033da6:	f000 fc1b 	bl	80345e0 <RCCEx_PLL3_Config>
 8033daa:	4603      	mov	r3, r0
 8033dac:	2b00      	cmp	r3, #0
 8033dae:	d001      	beq.n	8033db4 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8033db0:	2301      	movs	r3, #1
 8033db2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8033db4:	687b      	ldr	r3, [r7, #4]
 8033db6:	681b      	ldr	r3, [r3, #0]
 8033db8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8033dbc:	2b00      	cmp	r3, #0
 8033dbe:	d033      	beq.n	8033e28 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8033dc0:	687b      	ldr	r3, [r7, #4]
 8033dc2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8033dc4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8033dc8:	d017      	beq.n	8033dfa <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8033dca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8033dce:	d811      	bhi.n	8033df4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8033dd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8033dd4:	d013      	beq.n	8033dfe <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8033dd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8033dda:	d80b      	bhi.n	8033df4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8033ddc:	2b00      	cmp	r3, #0
 8033dde:	d010      	beq.n	8033e02 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8033de0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8033de4:	d106      	bne.n	8033df4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8033de6:	4b0e      	ldr	r3, [pc, #56]	; (8033e20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8033de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8033dea:	4a0d      	ldr	r2, [pc, #52]	; (8033e20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8033dec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8033df0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8033df2:	e007      	b.n	8033e04 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8033df4:	2301      	movs	r3, #1
 8033df6:	75fb      	strb	r3, [r7, #23]
      break;
 8033df8:	e004      	b.n	8033e04 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8033dfa:	bf00      	nop
 8033dfc:	e002      	b.n	8033e04 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8033dfe:	bf00      	nop
 8033e00:	e000      	b.n	8033e04 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8033e02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8033e04:	7dfb      	ldrb	r3, [r7, #23]
 8033e06:	2b00      	cmp	r3, #0
 8033e08:	d10c      	bne.n	8033e24 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8033e0a:	4b05      	ldr	r3, [pc, #20]	; (8033e20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8033e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8033e0e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8033e12:	687b      	ldr	r3, [r7, #4]
 8033e14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8033e16:	4902      	ldr	r1, [pc, #8]	; (8033e20 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8033e18:	4313      	orrs	r3, r2
 8033e1a:	654b      	str	r3, [r1, #84]	; 0x54
 8033e1c:	e004      	b.n	8033e28 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8033e1e:	bf00      	nop
 8033e20:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8033e24:	7dfb      	ldrb	r3, [r7, #23]
 8033e26:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8033e28:	687b      	ldr	r3, [r7, #4]
 8033e2a:	681b      	ldr	r3, [r3, #0]
 8033e2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8033e30:	2b00      	cmp	r3, #0
 8033e32:	d008      	beq.n	8033e46 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8033e34:	4b31      	ldr	r3, [pc, #196]	; (8033efc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8033e36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8033e38:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8033e3c:	687b      	ldr	r3, [r7, #4]
 8033e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8033e40:	492e      	ldr	r1, [pc, #184]	; (8033efc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8033e42:	4313      	orrs	r3, r2
 8033e44:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8033e46:	687b      	ldr	r3, [r7, #4]
 8033e48:	681b      	ldr	r3, [r3, #0]
 8033e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8033e4e:	2b00      	cmp	r3, #0
 8033e50:	d009      	beq.n	8033e66 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8033e52:	4b2a      	ldr	r3, [pc, #168]	; (8033efc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8033e54:	691b      	ldr	r3, [r3, #16]
 8033e56:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8033e5a:	687b      	ldr	r3, [r7, #4]
 8033e5c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8033e60:	4926      	ldr	r1, [pc, #152]	; (8033efc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8033e62:	4313      	orrs	r3, r2
 8033e64:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8033e66:	687b      	ldr	r3, [r7, #4]
 8033e68:	681b      	ldr	r3, [r3, #0]
 8033e6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8033e6e:	2b00      	cmp	r3, #0
 8033e70:	d008      	beq.n	8033e84 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8033e72:	4b22      	ldr	r3, [pc, #136]	; (8033efc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8033e74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8033e76:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8033e7a:	687b      	ldr	r3, [r7, #4]
 8033e7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8033e7e:	491f      	ldr	r1, [pc, #124]	; (8033efc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8033e80:	4313      	orrs	r3, r2
 8033e82:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8033e84:	687b      	ldr	r3, [r7, #4]
 8033e86:	681b      	ldr	r3, [r3, #0]
 8033e88:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8033e8c:	2b00      	cmp	r3, #0
 8033e8e:	d00d      	beq.n	8033eac <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8033e90:	4b1a      	ldr	r3, [pc, #104]	; (8033efc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8033e92:	691b      	ldr	r3, [r3, #16]
 8033e94:	4a19      	ldr	r2, [pc, #100]	; (8033efc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8033e96:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8033e9a:	6113      	str	r3, [r2, #16]
 8033e9c:	4b17      	ldr	r3, [pc, #92]	; (8033efc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8033e9e:	691a      	ldr	r2, [r3, #16]
 8033ea0:	687b      	ldr	r3, [r7, #4]
 8033ea2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8033ea6:	4915      	ldr	r1, [pc, #84]	; (8033efc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8033ea8:	4313      	orrs	r3, r2
 8033eaa:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8033eac:	687b      	ldr	r3, [r7, #4]
 8033eae:	681b      	ldr	r3, [r3, #0]
 8033eb0:	2b00      	cmp	r3, #0
 8033eb2:	da08      	bge.n	8033ec6 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8033eb4:	4b11      	ldr	r3, [pc, #68]	; (8033efc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8033eb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8033eb8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8033ebc:	687b      	ldr	r3, [r7, #4]
 8033ebe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8033ec0:	490e      	ldr	r1, [pc, #56]	; (8033efc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8033ec2:	4313      	orrs	r3, r2
 8033ec4:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8033ec6:	687b      	ldr	r3, [r7, #4]
 8033ec8:	681b      	ldr	r3, [r3, #0]
 8033eca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8033ece:	2b00      	cmp	r3, #0
 8033ed0:	d009      	beq.n	8033ee6 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8033ed2:	4b0a      	ldr	r3, [pc, #40]	; (8033efc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8033ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8033ed6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8033eda:	687b      	ldr	r3, [r7, #4]
 8033edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8033ee0:	4906      	ldr	r1, [pc, #24]	; (8033efc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8033ee2:	4313      	orrs	r3, r2
 8033ee4:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8033ee6:	7dbb      	ldrb	r3, [r7, #22]
 8033ee8:	2b00      	cmp	r3, #0
 8033eea:	d101      	bne.n	8033ef0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8033eec:	2300      	movs	r3, #0
 8033eee:	e000      	b.n	8033ef2 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8033ef0:	2301      	movs	r3, #1
}
 8033ef2:	4618      	mov	r0, r3
 8033ef4:	3718      	adds	r7, #24
 8033ef6:	46bd      	mov	sp, r7
 8033ef8:	bd80      	pop	{r7, pc}
 8033efa:	bf00      	nop
 8033efc:	58024400 	.word	0x58024400

08033f00 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8033f00:	b580      	push	{r7, lr}
 8033f02:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8033f04:	f7ff f85a 	bl	8032fbc <HAL_RCC_GetHCLKFreq>
 8033f08:	4602      	mov	r2, r0
 8033f0a:	4b06      	ldr	r3, [pc, #24]	; (8033f24 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8033f0c:	6a1b      	ldr	r3, [r3, #32]
 8033f0e:	091b      	lsrs	r3, r3, #4
 8033f10:	f003 0307 	and.w	r3, r3, #7
 8033f14:	4904      	ldr	r1, [pc, #16]	; (8033f28 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8033f16:	5ccb      	ldrb	r3, [r1, r3]
 8033f18:	f003 031f 	and.w	r3, r3, #31
 8033f1c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8033f20:	4618      	mov	r0, r3
 8033f22:	bd80      	pop	{r7, pc}
 8033f24:	58024400 	.word	0x58024400
 8033f28:	08058df8 	.word	0x08058df8

08033f2c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8033f2c:	b480      	push	{r7}
 8033f2e:	b089      	sub	sp, #36	; 0x24
 8033f30:	af00      	add	r7, sp, #0
 8033f32:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8033f34:	4ba1      	ldr	r3, [pc, #644]	; (80341bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8033f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8033f38:	f003 0303 	and.w	r3, r3, #3
 8033f3c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8033f3e:	4b9f      	ldr	r3, [pc, #636]	; (80341bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8033f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8033f42:	0b1b      	lsrs	r3, r3, #12
 8033f44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8033f48:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8033f4a:	4b9c      	ldr	r3, [pc, #624]	; (80341bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8033f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8033f4e:	091b      	lsrs	r3, r3, #4
 8033f50:	f003 0301 	and.w	r3, r3, #1
 8033f54:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8033f56:	4b99      	ldr	r3, [pc, #612]	; (80341bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8033f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8033f5a:	08db      	lsrs	r3, r3, #3
 8033f5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8033f60:	693a      	ldr	r2, [r7, #16]
 8033f62:	fb02 f303 	mul.w	r3, r2, r3
 8033f66:	ee07 3a90 	vmov	s15, r3
 8033f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8033f6e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8033f72:	697b      	ldr	r3, [r7, #20]
 8033f74:	2b00      	cmp	r3, #0
 8033f76:	f000 8111 	beq.w	803419c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8033f7a:	69bb      	ldr	r3, [r7, #24]
 8033f7c:	2b02      	cmp	r3, #2
 8033f7e:	f000 8083 	beq.w	8034088 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8033f82:	69bb      	ldr	r3, [r7, #24]
 8033f84:	2b02      	cmp	r3, #2
 8033f86:	f200 80a1 	bhi.w	80340cc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8033f8a:	69bb      	ldr	r3, [r7, #24]
 8033f8c:	2b00      	cmp	r3, #0
 8033f8e:	d003      	beq.n	8033f98 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8033f90:	69bb      	ldr	r3, [r7, #24]
 8033f92:	2b01      	cmp	r3, #1
 8033f94:	d056      	beq.n	8034044 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8033f96:	e099      	b.n	80340cc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8033f98:	4b88      	ldr	r3, [pc, #544]	; (80341bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8033f9a:	681b      	ldr	r3, [r3, #0]
 8033f9c:	f003 0320 	and.w	r3, r3, #32
 8033fa0:	2b00      	cmp	r3, #0
 8033fa2:	d02d      	beq.n	8034000 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8033fa4:	4b85      	ldr	r3, [pc, #532]	; (80341bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8033fa6:	681b      	ldr	r3, [r3, #0]
 8033fa8:	08db      	lsrs	r3, r3, #3
 8033faa:	f003 0303 	and.w	r3, r3, #3
 8033fae:	4a84      	ldr	r2, [pc, #528]	; (80341c0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8033fb0:	fa22 f303 	lsr.w	r3, r2, r3
 8033fb4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8033fb6:	68bb      	ldr	r3, [r7, #8]
 8033fb8:	ee07 3a90 	vmov	s15, r3
 8033fbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8033fc0:	697b      	ldr	r3, [r7, #20]
 8033fc2:	ee07 3a90 	vmov	s15, r3
 8033fc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8033fca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8033fce:	4b7b      	ldr	r3, [pc, #492]	; (80341bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8033fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8033fd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8033fd6:	ee07 3a90 	vmov	s15, r3
 8033fda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8033fde:	ed97 6a03 	vldr	s12, [r7, #12]
 8033fe2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80341c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8033fe6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8033fea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8033fee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8033ff2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8033ff6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8033ffa:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8033ffe:	e087      	b.n	8034110 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8034000:	697b      	ldr	r3, [r7, #20]
 8034002:	ee07 3a90 	vmov	s15, r3
 8034006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 803400a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80341c8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 803400e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8034012:	4b6a      	ldr	r3, [pc, #424]	; (80341bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8034014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8034016:	f3c3 0308 	ubfx	r3, r3, #0, #9
 803401a:	ee07 3a90 	vmov	s15, r3
 803401e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8034022:	ed97 6a03 	vldr	s12, [r7, #12]
 8034026:	eddf 5a67 	vldr	s11, [pc, #412]	; 80341c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 803402a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 803402e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8034032:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8034036:	ee77 7aa6 	vadd.f32	s15, s15, s13
 803403a:	ee67 7a27 	vmul.f32	s15, s14, s15
 803403e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8034042:	e065      	b.n	8034110 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8034044:	697b      	ldr	r3, [r7, #20]
 8034046:	ee07 3a90 	vmov	s15, r3
 803404a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 803404e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80341cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8034052:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8034056:	4b59      	ldr	r3, [pc, #356]	; (80341bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8034058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 803405a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 803405e:	ee07 3a90 	vmov	s15, r3
 8034062:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8034066:	ed97 6a03 	vldr	s12, [r7, #12]
 803406a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80341c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 803406e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8034072:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8034076:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 803407a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 803407e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8034082:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8034086:	e043      	b.n	8034110 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8034088:	697b      	ldr	r3, [r7, #20]
 803408a:	ee07 3a90 	vmov	s15, r3
 803408e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8034092:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80341d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8034096:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 803409a:	4b48      	ldr	r3, [pc, #288]	; (80341bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 803409c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 803409e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80340a2:	ee07 3a90 	vmov	s15, r3
 80340a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80340aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80340ae:	eddf 5a45 	vldr	s11, [pc, #276]	; 80341c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80340b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80340b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80340ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80340be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80340c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80340c6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80340ca:	e021      	b.n	8034110 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80340cc:	697b      	ldr	r3, [r7, #20]
 80340ce:	ee07 3a90 	vmov	s15, r3
 80340d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80340d6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80341cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80340da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80340de:	4b37      	ldr	r3, [pc, #220]	; (80341bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80340e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80340e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80340e6:	ee07 3a90 	vmov	s15, r3
 80340ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80340ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80340f2:	eddf 5a34 	vldr	s11, [pc, #208]	; 80341c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80340f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80340fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80340fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8034102:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8034106:	ee67 7a27 	vmul.f32	s15, s14, s15
 803410a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 803410e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8034110:	4b2a      	ldr	r3, [pc, #168]	; (80341bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8034112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8034114:	0a5b      	lsrs	r3, r3, #9
 8034116:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 803411a:	ee07 3a90 	vmov	s15, r3
 803411e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8034122:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8034126:	ee37 7a87 	vadd.f32	s14, s15, s14
 803412a:	edd7 6a07 	vldr	s13, [r7, #28]
 803412e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8034132:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8034136:	ee17 2a90 	vmov	r2, s15
 803413a:	687b      	ldr	r3, [r7, #4]
 803413c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 803413e:	4b1f      	ldr	r3, [pc, #124]	; (80341bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8034140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8034142:	0c1b      	lsrs	r3, r3, #16
 8034144:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8034148:	ee07 3a90 	vmov	s15, r3
 803414c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8034150:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8034154:	ee37 7a87 	vadd.f32	s14, s15, s14
 8034158:	edd7 6a07 	vldr	s13, [r7, #28]
 803415c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8034160:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8034164:	ee17 2a90 	vmov	r2, s15
 8034168:	687b      	ldr	r3, [r7, #4]
 803416a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 803416c:	4b13      	ldr	r3, [pc, #76]	; (80341bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 803416e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8034170:	0e1b      	lsrs	r3, r3, #24
 8034172:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8034176:	ee07 3a90 	vmov	s15, r3
 803417a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 803417e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8034182:	ee37 7a87 	vadd.f32	s14, s15, s14
 8034186:	edd7 6a07 	vldr	s13, [r7, #28]
 803418a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 803418e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8034192:	ee17 2a90 	vmov	r2, s15
 8034196:	687b      	ldr	r3, [r7, #4]
 8034198:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 803419a:	e008      	b.n	80341ae <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 803419c:	687b      	ldr	r3, [r7, #4]
 803419e:	2200      	movs	r2, #0
 80341a0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80341a2:	687b      	ldr	r3, [r7, #4]
 80341a4:	2200      	movs	r2, #0
 80341a6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80341a8:	687b      	ldr	r3, [r7, #4]
 80341aa:	2200      	movs	r2, #0
 80341ac:	609a      	str	r2, [r3, #8]
}
 80341ae:	bf00      	nop
 80341b0:	3724      	adds	r7, #36	; 0x24
 80341b2:	46bd      	mov	sp, r7
 80341b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80341b8:	4770      	bx	lr
 80341ba:	bf00      	nop
 80341bc:	58024400 	.word	0x58024400
 80341c0:	03d09000 	.word	0x03d09000
 80341c4:	46000000 	.word	0x46000000
 80341c8:	4c742400 	.word	0x4c742400
 80341cc:	4a742400 	.word	0x4a742400
 80341d0:	4bbebc20 	.word	0x4bbebc20

080341d4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80341d4:	b480      	push	{r7}
 80341d6:	b089      	sub	sp, #36	; 0x24
 80341d8:	af00      	add	r7, sp, #0
 80341da:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80341dc:	4ba1      	ldr	r3, [pc, #644]	; (8034464 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80341de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80341e0:	f003 0303 	and.w	r3, r3, #3
 80341e4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80341e6:	4b9f      	ldr	r3, [pc, #636]	; (8034464 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80341e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80341ea:	0d1b      	lsrs	r3, r3, #20
 80341ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80341f0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80341f2:	4b9c      	ldr	r3, [pc, #624]	; (8034464 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80341f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80341f6:	0a1b      	lsrs	r3, r3, #8
 80341f8:	f003 0301 	and.w	r3, r3, #1
 80341fc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80341fe:	4b99      	ldr	r3, [pc, #612]	; (8034464 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8034200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8034202:	08db      	lsrs	r3, r3, #3
 8034204:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8034208:	693a      	ldr	r2, [r7, #16]
 803420a:	fb02 f303 	mul.w	r3, r2, r3
 803420e:	ee07 3a90 	vmov	s15, r3
 8034212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8034216:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 803421a:	697b      	ldr	r3, [r7, #20]
 803421c:	2b00      	cmp	r3, #0
 803421e:	f000 8111 	beq.w	8034444 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8034222:	69bb      	ldr	r3, [r7, #24]
 8034224:	2b02      	cmp	r3, #2
 8034226:	f000 8083 	beq.w	8034330 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 803422a:	69bb      	ldr	r3, [r7, #24]
 803422c:	2b02      	cmp	r3, #2
 803422e:	f200 80a1 	bhi.w	8034374 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8034232:	69bb      	ldr	r3, [r7, #24]
 8034234:	2b00      	cmp	r3, #0
 8034236:	d003      	beq.n	8034240 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8034238:	69bb      	ldr	r3, [r7, #24]
 803423a:	2b01      	cmp	r3, #1
 803423c:	d056      	beq.n	80342ec <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 803423e:	e099      	b.n	8034374 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8034240:	4b88      	ldr	r3, [pc, #544]	; (8034464 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8034242:	681b      	ldr	r3, [r3, #0]
 8034244:	f003 0320 	and.w	r3, r3, #32
 8034248:	2b00      	cmp	r3, #0
 803424a:	d02d      	beq.n	80342a8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 803424c:	4b85      	ldr	r3, [pc, #532]	; (8034464 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 803424e:	681b      	ldr	r3, [r3, #0]
 8034250:	08db      	lsrs	r3, r3, #3
 8034252:	f003 0303 	and.w	r3, r3, #3
 8034256:	4a84      	ldr	r2, [pc, #528]	; (8034468 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8034258:	fa22 f303 	lsr.w	r3, r2, r3
 803425c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 803425e:	68bb      	ldr	r3, [r7, #8]
 8034260:	ee07 3a90 	vmov	s15, r3
 8034264:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8034268:	697b      	ldr	r3, [r7, #20]
 803426a:	ee07 3a90 	vmov	s15, r3
 803426e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8034272:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8034276:	4b7b      	ldr	r3, [pc, #492]	; (8034464 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8034278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 803427a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 803427e:	ee07 3a90 	vmov	s15, r3
 8034282:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8034286:	ed97 6a03 	vldr	s12, [r7, #12]
 803428a:	eddf 5a78 	vldr	s11, [pc, #480]	; 803446c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 803428e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8034292:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8034296:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 803429a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 803429e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80342a2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80342a6:	e087      	b.n	80343b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80342a8:	697b      	ldr	r3, [r7, #20]
 80342aa:	ee07 3a90 	vmov	s15, r3
 80342ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80342b2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8034470 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80342b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80342ba:	4b6a      	ldr	r3, [pc, #424]	; (8034464 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80342bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80342be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80342c2:	ee07 3a90 	vmov	s15, r3
 80342c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80342ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80342ce:	eddf 5a67 	vldr	s11, [pc, #412]	; 803446c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80342d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80342d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80342da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80342de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80342e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80342e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80342ea:	e065      	b.n	80343b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80342ec:	697b      	ldr	r3, [r7, #20]
 80342ee:	ee07 3a90 	vmov	s15, r3
 80342f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80342f6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8034474 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80342fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80342fe:	4b59      	ldr	r3, [pc, #356]	; (8034464 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8034300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8034302:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8034306:	ee07 3a90 	vmov	s15, r3
 803430a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 803430e:	ed97 6a03 	vldr	s12, [r7, #12]
 8034312:	eddf 5a56 	vldr	s11, [pc, #344]	; 803446c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8034316:	eec6 7a25 	vdiv.f32	s15, s12, s11
 803431a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 803431e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8034322:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8034326:	ee67 7a27 	vmul.f32	s15, s14, s15
 803432a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 803432e:	e043      	b.n	80343b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8034330:	697b      	ldr	r3, [r7, #20]
 8034332:	ee07 3a90 	vmov	s15, r3
 8034336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 803433a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8034478 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 803433e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8034342:	4b48      	ldr	r3, [pc, #288]	; (8034464 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8034344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8034346:	f3c3 0308 	ubfx	r3, r3, #0, #9
 803434a:	ee07 3a90 	vmov	s15, r3
 803434e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8034352:	ed97 6a03 	vldr	s12, [r7, #12]
 8034356:	eddf 5a45 	vldr	s11, [pc, #276]	; 803446c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 803435a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 803435e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8034362:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8034366:	ee77 7aa6 	vadd.f32	s15, s15, s13
 803436a:	ee67 7a27 	vmul.f32	s15, s14, s15
 803436e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8034372:	e021      	b.n	80343b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8034374:	697b      	ldr	r3, [r7, #20]
 8034376:	ee07 3a90 	vmov	s15, r3
 803437a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 803437e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8034474 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8034382:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8034386:	4b37      	ldr	r3, [pc, #220]	; (8034464 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8034388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 803438a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 803438e:	ee07 3a90 	vmov	s15, r3
 8034392:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8034396:	ed97 6a03 	vldr	s12, [r7, #12]
 803439a:	eddf 5a34 	vldr	s11, [pc, #208]	; 803446c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 803439e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80343a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80343a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80343aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80343ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80343b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80343b6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80343b8:	4b2a      	ldr	r3, [pc, #168]	; (8034464 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80343ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80343bc:	0a5b      	lsrs	r3, r3, #9
 80343be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80343c2:	ee07 3a90 	vmov	s15, r3
 80343c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80343ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80343ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80343d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80343d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80343da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80343de:	ee17 2a90 	vmov	r2, s15
 80343e2:	687b      	ldr	r3, [r7, #4]
 80343e4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80343e6:	4b1f      	ldr	r3, [pc, #124]	; (8034464 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80343e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80343ea:	0c1b      	lsrs	r3, r3, #16
 80343ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80343f0:	ee07 3a90 	vmov	s15, r3
 80343f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80343f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80343fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8034400:	edd7 6a07 	vldr	s13, [r7, #28]
 8034404:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8034408:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 803440c:	ee17 2a90 	vmov	r2, s15
 8034410:	687b      	ldr	r3, [r7, #4]
 8034412:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8034414:	4b13      	ldr	r3, [pc, #76]	; (8034464 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8034416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8034418:	0e1b      	lsrs	r3, r3, #24
 803441a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 803441e:	ee07 3a90 	vmov	s15, r3
 8034422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8034426:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 803442a:	ee37 7a87 	vadd.f32	s14, s15, s14
 803442e:	edd7 6a07 	vldr	s13, [r7, #28]
 8034432:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8034436:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 803443a:	ee17 2a90 	vmov	r2, s15
 803443e:	687b      	ldr	r3, [r7, #4]
 8034440:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8034442:	e008      	b.n	8034456 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8034444:	687b      	ldr	r3, [r7, #4]
 8034446:	2200      	movs	r2, #0
 8034448:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 803444a:	687b      	ldr	r3, [r7, #4]
 803444c:	2200      	movs	r2, #0
 803444e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8034450:	687b      	ldr	r3, [r7, #4]
 8034452:	2200      	movs	r2, #0
 8034454:	609a      	str	r2, [r3, #8]
}
 8034456:	bf00      	nop
 8034458:	3724      	adds	r7, #36	; 0x24
 803445a:	46bd      	mov	sp, r7
 803445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034460:	4770      	bx	lr
 8034462:	bf00      	nop
 8034464:	58024400 	.word	0x58024400
 8034468:	03d09000 	.word	0x03d09000
 803446c:	46000000 	.word	0x46000000
 8034470:	4c742400 	.word	0x4c742400
 8034474:	4a742400 	.word	0x4a742400
 8034478:	4bbebc20 	.word	0x4bbebc20

0803447c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 803447c:	b580      	push	{r7, lr}
 803447e:	b084      	sub	sp, #16
 8034480:	af00      	add	r7, sp, #0
 8034482:	6078      	str	r0, [r7, #4]
 8034484:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8034486:	2300      	movs	r3, #0
 8034488:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 803448a:	4b53      	ldr	r3, [pc, #332]	; (80345d8 <RCCEx_PLL2_Config+0x15c>)
 803448c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 803448e:	f003 0303 	and.w	r3, r3, #3
 8034492:	2b03      	cmp	r3, #3
 8034494:	d101      	bne.n	803449a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8034496:	2301      	movs	r3, #1
 8034498:	e099      	b.n	80345ce <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 803449a:	4b4f      	ldr	r3, [pc, #316]	; (80345d8 <RCCEx_PLL2_Config+0x15c>)
 803449c:	681b      	ldr	r3, [r3, #0]
 803449e:	4a4e      	ldr	r2, [pc, #312]	; (80345d8 <RCCEx_PLL2_Config+0x15c>)
 80344a0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80344a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80344a6:	f7f7 fe43 	bl	802c130 <HAL_GetTick>
 80344aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80344ac:	e008      	b.n	80344c0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80344ae:	f7f7 fe3f 	bl	802c130 <HAL_GetTick>
 80344b2:	4602      	mov	r2, r0
 80344b4:	68bb      	ldr	r3, [r7, #8]
 80344b6:	1ad3      	subs	r3, r2, r3
 80344b8:	2b02      	cmp	r3, #2
 80344ba:	d901      	bls.n	80344c0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80344bc:	2303      	movs	r3, #3
 80344be:	e086      	b.n	80345ce <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80344c0:	4b45      	ldr	r3, [pc, #276]	; (80345d8 <RCCEx_PLL2_Config+0x15c>)
 80344c2:	681b      	ldr	r3, [r3, #0]
 80344c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80344c8:	2b00      	cmp	r3, #0
 80344ca:	d1f0      	bne.n	80344ae <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80344cc:	4b42      	ldr	r3, [pc, #264]	; (80345d8 <RCCEx_PLL2_Config+0x15c>)
 80344ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80344d0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80344d4:	687b      	ldr	r3, [r7, #4]
 80344d6:	681b      	ldr	r3, [r3, #0]
 80344d8:	031b      	lsls	r3, r3, #12
 80344da:	493f      	ldr	r1, [pc, #252]	; (80345d8 <RCCEx_PLL2_Config+0x15c>)
 80344dc:	4313      	orrs	r3, r2
 80344de:	628b      	str	r3, [r1, #40]	; 0x28
 80344e0:	687b      	ldr	r3, [r7, #4]
 80344e2:	685b      	ldr	r3, [r3, #4]
 80344e4:	3b01      	subs	r3, #1
 80344e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80344ea:	687b      	ldr	r3, [r7, #4]
 80344ec:	689b      	ldr	r3, [r3, #8]
 80344ee:	3b01      	subs	r3, #1
 80344f0:	025b      	lsls	r3, r3, #9
 80344f2:	b29b      	uxth	r3, r3
 80344f4:	431a      	orrs	r2, r3
 80344f6:	687b      	ldr	r3, [r7, #4]
 80344f8:	68db      	ldr	r3, [r3, #12]
 80344fa:	3b01      	subs	r3, #1
 80344fc:	041b      	lsls	r3, r3, #16
 80344fe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8034502:	431a      	orrs	r2, r3
 8034504:	687b      	ldr	r3, [r7, #4]
 8034506:	691b      	ldr	r3, [r3, #16]
 8034508:	3b01      	subs	r3, #1
 803450a:	061b      	lsls	r3, r3, #24
 803450c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8034510:	4931      	ldr	r1, [pc, #196]	; (80345d8 <RCCEx_PLL2_Config+0x15c>)
 8034512:	4313      	orrs	r3, r2
 8034514:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8034516:	4b30      	ldr	r3, [pc, #192]	; (80345d8 <RCCEx_PLL2_Config+0x15c>)
 8034518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803451a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 803451e:	687b      	ldr	r3, [r7, #4]
 8034520:	695b      	ldr	r3, [r3, #20]
 8034522:	492d      	ldr	r1, [pc, #180]	; (80345d8 <RCCEx_PLL2_Config+0x15c>)
 8034524:	4313      	orrs	r3, r2
 8034526:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8034528:	4b2b      	ldr	r3, [pc, #172]	; (80345d8 <RCCEx_PLL2_Config+0x15c>)
 803452a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803452c:	f023 0220 	bic.w	r2, r3, #32
 8034530:	687b      	ldr	r3, [r7, #4]
 8034532:	699b      	ldr	r3, [r3, #24]
 8034534:	4928      	ldr	r1, [pc, #160]	; (80345d8 <RCCEx_PLL2_Config+0x15c>)
 8034536:	4313      	orrs	r3, r2
 8034538:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 803453a:	4b27      	ldr	r3, [pc, #156]	; (80345d8 <RCCEx_PLL2_Config+0x15c>)
 803453c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803453e:	4a26      	ldr	r2, [pc, #152]	; (80345d8 <RCCEx_PLL2_Config+0x15c>)
 8034540:	f023 0310 	bic.w	r3, r3, #16
 8034544:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8034546:	4b24      	ldr	r3, [pc, #144]	; (80345d8 <RCCEx_PLL2_Config+0x15c>)
 8034548:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 803454a:	4b24      	ldr	r3, [pc, #144]	; (80345dc <RCCEx_PLL2_Config+0x160>)
 803454c:	4013      	ands	r3, r2
 803454e:	687a      	ldr	r2, [r7, #4]
 8034550:	69d2      	ldr	r2, [r2, #28]
 8034552:	00d2      	lsls	r2, r2, #3
 8034554:	4920      	ldr	r1, [pc, #128]	; (80345d8 <RCCEx_PLL2_Config+0x15c>)
 8034556:	4313      	orrs	r3, r2
 8034558:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 803455a:	4b1f      	ldr	r3, [pc, #124]	; (80345d8 <RCCEx_PLL2_Config+0x15c>)
 803455c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803455e:	4a1e      	ldr	r2, [pc, #120]	; (80345d8 <RCCEx_PLL2_Config+0x15c>)
 8034560:	f043 0310 	orr.w	r3, r3, #16
 8034564:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8034566:	683b      	ldr	r3, [r7, #0]
 8034568:	2b00      	cmp	r3, #0
 803456a:	d106      	bne.n	803457a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 803456c:	4b1a      	ldr	r3, [pc, #104]	; (80345d8 <RCCEx_PLL2_Config+0x15c>)
 803456e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8034570:	4a19      	ldr	r2, [pc, #100]	; (80345d8 <RCCEx_PLL2_Config+0x15c>)
 8034572:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8034576:	62d3      	str	r3, [r2, #44]	; 0x2c
 8034578:	e00f      	b.n	803459a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 803457a:	683b      	ldr	r3, [r7, #0]
 803457c:	2b01      	cmp	r3, #1
 803457e:	d106      	bne.n	803458e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8034580:	4b15      	ldr	r3, [pc, #84]	; (80345d8 <RCCEx_PLL2_Config+0x15c>)
 8034582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8034584:	4a14      	ldr	r2, [pc, #80]	; (80345d8 <RCCEx_PLL2_Config+0x15c>)
 8034586:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 803458a:	62d3      	str	r3, [r2, #44]	; 0x2c
 803458c:	e005      	b.n	803459a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 803458e:	4b12      	ldr	r3, [pc, #72]	; (80345d8 <RCCEx_PLL2_Config+0x15c>)
 8034590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8034592:	4a11      	ldr	r2, [pc, #68]	; (80345d8 <RCCEx_PLL2_Config+0x15c>)
 8034594:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8034598:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 803459a:	4b0f      	ldr	r3, [pc, #60]	; (80345d8 <RCCEx_PLL2_Config+0x15c>)
 803459c:	681b      	ldr	r3, [r3, #0]
 803459e:	4a0e      	ldr	r2, [pc, #56]	; (80345d8 <RCCEx_PLL2_Config+0x15c>)
 80345a0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80345a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80345a6:	f7f7 fdc3 	bl	802c130 <HAL_GetTick>
 80345aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80345ac:	e008      	b.n	80345c0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80345ae:	f7f7 fdbf 	bl	802c130 <HAL_GetTick>
 80345b2:	4602      	mov	r2, r0
 80345b4:	68bb      	ldr	r3, [r7, #8]
 80345b6:	1ad3      	subs	r3, r2, r3
 80345b8:	2b02      	cmp	r3, #2
 80345ba:	d901      	bls.n	80345c0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80345bc:	2303      	movs	r3, #3
 80345be:	e006      	b.n	80345ce <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80345c0:	4b05      	ldr	r3, [pc, #20]	; (80345d8 <RCCEx_PLL2_Config+0x15c>)
 80345c2:	681b      	ldr	r3, [r3, #0]
 80345c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80345c8:	2b00      	cmp	r3, #0
 80345ca:	d0f0      	beq.n	80345ae <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80345cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80345ce:	4618      	mov	r0, r3
 80345d0:	3710      	adds	r7, #16
 80345d2:	46bd      	mov	sp, r7
 80345d4:	bd80      	pop	{r7, pc}
 80345d6:	bf00      	nop
 80345d8:	58024400 	.word	0x58024400
 80345dc:	ffff0007 	.word	0xffff0007

080345e0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80345e0:	b580      	push	{r7, lr}
 80345e2:	b084      	sub	sp, #16
 80345e4:	af00      	add	r7, sp, #0
 80345e6:	6078      	str	r0, [r7, #4]
 80345e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80345ea:	2300      	movs	r3, #0
 80345ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80345ee:	4b53      	ldr	r3, [pc, #332]	; (803473c <RCCEx_PLL3_Config+0x15c>)
 80345f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80345f2:	f003 0303 	and.w	r3, r3, #3
 80345f6:	2b03      	cmp	r3, #3
 80345f8:	d101      	bne.n	80345fe <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80345fa:	2301      	movs	r3, #1
 80345fc:	e099      	b.n	8034732 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80345fe:	4b4f      	ldr	r3, [pc, #316]	; (803473c <RCCEx_PLL3_Config+0x15c>)
 8034600:	681b      	ldr	r3, [r3, #0]
 8034602:	4a4e      	ldr	r2, [pc, #312]	; (803473c <RCCEx_PLL3_Config+0x15c>)
 8034604:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8034608:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 803460a:	f7f7 fd91 	bl	802c130 <HAL_GetTick>
 803460e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8034610:	e008      	b.n	8034624 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8034612:	f7f7 fd8d 	bl	802c130 <HAL_GetTick>
 8034616:	4602      	mov	r2, r0
 8034618:	68bb      	ldr	r3, [r7, #8]
 803461a:	1ad3      	subs	r3, r2, r3
 803461c:	2b02      	cmp	r3, #2
 803461e:	d901      	bls.n	8034624 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8034620:	2303      	movs	r3, #3
 8034622:	e086      	b.n	8034732 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8034624:	4b45      	ldr	r3, [pc, #276]	; (803473c <RCCEx_PLL3_Config+0x15c>)
 8034626:	681b      	ldr	r3, [r3, #0]
 8034628:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 803462c:	2b00      	cmp	r3, #0
 803462e:	d1f0      	bne.n	8034612 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8034630:	4b42      	ldr	r3, [pc, #264]	; (803473c <RCCEx_PLL3_Config+0x15c>)
 8034632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8034634:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8034638:	687b      	ldr	r3, [r7, #4]
 803463a:	681b      	ldr	r3, [r3, #0]
 803463c:	051b      	lsls	r3, r3, #20
 803463e:	493f      	ldr	r1, [pc, #252]	; (803473c <RCCEx_PLL3_Config+0x15c>)
 8034640:	4313      	orrs	r3, r2
 8034642:	628b      	str	r3, [r1, #40]	; 0x28
 8034644:	687b      	ldr	r3, [r7, #4]
 8034646:	685b      	ldr	r3, [r3, #4]
 8034648:	3b01      	subs	r3, #1
 803464a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 803464e:	687b      	ldr	r3, [r7, #4]
 8034650:	689b      	ldr	r3, [r3, #8]
 8034652:	3b01      	subs	r3, #1
 8034654:	025b      	lsls	r3, r3, #9
 8034656:	b29b      	uxth	r3, r3
 8034658:	431a      	orrs	r2, r3
 803465a:	687b      	ldr	r3, [r7, #4]
 803465c:	68db      	ldr	r3, [r3, #12]
 803465e:	3b01      	subs	r3, #1
 8034660:	041b      	lsls	r3, r3, #16
 8034662:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8034666:	431a      	orrs	r2, r3
 8034668:	687b      	ldr	r3, [r7, #4]
 803466a:	691b      	ldr	r3, [r3, #16]
 803466c:	3b01      	subs	r3, #1
 803466e:	061b      	lsls	r3, r3, #24
 8034670:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8034674:	4931      	ldr	r1, [pc, #196]	; (803473c <RCCEx_PLL3_Config+0x15c>)
 8034676:	4313      	orrs	r3, r2
 8034678:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 803467a:	4b30      	ldr	r3, [pc, #192]	; (803473c <RCCEx_PLL3_Config+0x15c>)
 803467c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803467e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8034682:	687b      	ldr	r3, [r7, #4]
 8034684:	695b      	ldr	r3, [r3, #20]
 8034686:	492d      	ldr	r1, [pc, #180]	; (803473c <RCCEx_PLL3_Config+0x15c>)
 8034688:	4313      	orrs	r3, r2
 803468a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 803468c:	4b2b      	ldr	r3, [pc, #172]	; (803473c <RCCEx_PLL3_Config+0x15c>)
 803468e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8034690:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8034694:	687b      	ldr	r3, [r7, #4]
 8034696:	699b      	ldr	r3, [r3, #24]
 8034698:	4928      	ldr	r1, [pc, #160]	; (803473c <RCCEx_PLL3_Config+0x15c>)
 803469a:	4313      	orrs	r3, r2
 803469c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 803469e:	4b27      	ldr	r3, [pc, #156]	; (803473c <RCCEx_PLL3_Config+0x15c>)
 80346a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80346a2:	4a26      	ldr	r2, [pc, #152]	; (803473c <RCCEx_PLL3_Config+0x15c>)
 80346a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80346a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80346aa:	4b24      	ldr	r3, [pc, #144]	; (803473c <RCCEx_PLL3_Config+0x15c>)
 80346ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80346ae:	4b24      	ldr	r3, [pc, #144]	; (8034740 <RCCEx_PLL3_Config+0x160>)
 80346b0:	4013      	ands	r3, r2
 80346b2:	687a      	ldr	r2, [r7, #4]
 80346b4:	69d2      	ldr	r2, [r2, #28]
 80346b6:	00d2      	lsls	r2, r2, #3
 80346b8:	4920      	ldr	r1, [pc, #128]	; (803473c <RCCEx_PLL3_Config+0x15c>)
 80346ba:	4313      	orrs	r3, r2
 80346bc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80346be:	4b1f      	ldr	r3, [pc, #124]	; (803473c <RCCEx_PLL3_Config+0x15c>)
 80346c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80346c2:	4a1e      	ldr	r2, [pc, #120]	; (803473c <RCCEx_PLL3_Config+0x15c>)
 80346c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80346c8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80346ca:	683b      	ldr	r3, [r7, #0]
 80346cc:	2b00      	cmp	r3, #0
 80346ce:	d106      	bne.n	80346de <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80346d0:	4b1a      	ldr	r3, [pc, #104]	; (803473c <RCCEx_PLL3_Config+0x15c>)
 80346d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80346d4:	4a19      	ldr	r2, [pc, #100]	; (803473c <RCCEx_PLL3_Config+0x15c>)
 80346d6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80346da:	62d3      	str	r3, [r2, #44]	; 0x2c
 80346dc:	e00f      	b.n	80346fe <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80346de:	683b      	ldr	r3, [r7, #0]
 80346e0:	2b01      	cmp	r3, #1
 80346e2:	d106      	bne.n	80346f2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80346e4:	4b15      	ldr	r3, [pc, #84]	; (803473c <RCCEx_PLL3_Config+0x15c>)
 80346e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80346e8:	4a14      	ldr	r2, [pc, #80]	; (803473c <RCCEx_PLL3_Config+0x15c>)
 80346ea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80346ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 80346f0:	e005      	b.n	80346fe <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80346f2:	4b12      	ldr	r3, [pc, #72]	; (803473c <RCCEx_PLL3_Config+0x15c>)
 80346f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80346f6:	4a11      	ldr	r2, [pc, #68]	; (803473c <RCCEx_PLL3_Config+0x15c>)
 80346f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80346fc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80346fe:	4b0f      	ldr	r3, [pc, #60]	; (803473c <RCCEx_PLL3_Config+0x15c>)
 8034700:	681b      	ldr	r3, [r3, #0]
 8034702:	4a0e      	ldr	r2, [pc, #56]	; (803473c <RCCEx_PLL3_Config+0x15c>)
 8034704:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8034708:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 803470a:	f7f7 fd11 	bl	802c130 <HAL_GetTick>
 803470e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8034710:	e008      	b.n	8034724 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8034712:	f7f7 fd0d 	bl	802c130 <HAL_GetTick>
 8034716:	4602      	mov	r2, r0
 8034718:	68bb      	ldr	r3, [r7, #8]
 803471a:	1ad3      	subs	r3, r2, r3
 803471c:	2b02      	cmp	r3, #2
 803471e:	d901      	bls.n	8034724 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8034720:	2303      	movs	r3, #3
 8034722:	e006      	b.n	8034732 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8034724:	4b05      	ldr	r3, [pc, #20]	; (803473c <RCCEx_PLL3_Config+0x15c>)
 8034726:	681b      	ldr	r3, [r3, #0]
 8034728:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 803472c:	2b00      	cmp	r3, #0
 803472e:	d0f0      	beq.n	8034712 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8034730:	7bfb      	ldrb	r3, [r7, #15]
}
 8034732:	4618      	mov	r0, r3
 8034734:	3710      	adds	r7, #16
 8034736:	46bd      	mov	sp, r7
 8034738:	bd80      	pop	{r7, pc}
 803473a:	bf00      	nop
 803473c:	58024400 	.word	0x58024400
 8034740:	ffff0007 	.word	0xffff0007

08034744 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8034744:	b580      	push	{r7, lr}
 8034746:	b084      	sub	sp, #16
 8034748:	af00      	add	r7, sp, #0
 803474a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 803474c:	687b      	ldr	r3, [r7, #4]
 803474e:	2b00      	cmp	r3, #0
 8034750:	d101      	bne.n	8034756 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8034752:	2301      	movs	r3, #1
 8034754:	e0f1      	b.n	803493a <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8034756:	687b      	ldr	r3, [r7, #4]
 8034758:	2200      	movs	r2, #0
 803475a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 803475c:	687b      	ldr	r3, [r7, #4]
 803475e:	681b      	ldr	r3, [r3, #0]
 8034760:	4a78      	ldr	r2, [pc, #480]	; (8034944 <HAL_SPI_Init+0x200>)
 8034762:	4293      	cmp	r3, r2
 8034764:	d00f      	beq.n	8034786 <HAL_SPI_Init+0x42>
 8034766:	687b      	ldr	r3, [r7, #4]
 8034768:	681b      	ldr	r3, [r3, #0]
 803476a:	4a77      	ldr	r2, [pc, #476]	; (8034948 <HAL_SPI_Init+0x204>)
 803476c:	4293      	cmp	r3, r2
 803476e:	d00a      	beq.n	8034786 <HAL_SPI_Init+0x42>
 8034770:	687b      	ldr	r3, [r7, #4]
 8034772:	681b      	ldr	r3, [r3, #0]
 8034774:	4a75      	ldr	r2, [pc, #468]	; (803494c <HAL_SPI_Init+0x208>)
 8034776:	4293      	cmp	r3, r2
 8034778:	d005      	beq.n	8034786 <HAL_SPI_Init+0x42>
 803477a:	687b      	ldr	r3, [r7, #4]
 803477c:	68db      	ldr	r3, [r3, #12]
 803477e:	2b0f      	cmp	r3, #15
 8034780:	d901      	bls.n	8034786 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8034782:	2301      	movs	r3, #1
 8034784:	e0d9      	b.n	803493a <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8034786:	6878      	ldr	r0, [r7, #4]
 8034788:	f001 f8ee 	bl	8035968 <SPI_GetPacketSize>
 803478c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 803478e:	687b      	ldr	r3, [r7, #4]
 8034790:	681b      	ldr	r3, [r3, #0]
 8034792:	4a6c      	ldr	r2, [pc, #432]	; (8034944 <HAL_SPI_Init+0x200>)
 8034794:	4293      	cmp	r3, r2
 8034796:	d00c      	beq.n	80347b2 <HAL_SPI_Init+0x6e>
 8034798:	687b      	ldr	r3, [r7, #4]
 803479a:	681b      	ldr	r3, [r3, #0]
 803479c:	4a6a      	ldr	r2, [pc, #424]	; (8034948 <HAL_SPI_Init+0x204>)
 803479e:	4293      	cmp	r3, r2
 80347a0:	d007      	beq.n	80347b2 <HAL_SPI_Init+0x6e>
 80347a2:	687b      	ldr	r3, [r7, #4]
 80347a4:	681b      	ldr	r3, [r3, #0]
 80347a6:	4a69      	ldr	r2, [pc, #420]	; (803494c <HAL_SPI_Init+0x208>)
 80347a8:	4293      	cmp	r3, r2
 80347aa:	d002      	beq.n	80347b2 <HAL_SPI_Init+0x6e>
 80347ac:	68fb      	ldr	r3, [r7, #12]
 80347ae:	2b08      	cmp	r3, #8
 80347b0:	d811      	bhi.n	80347d6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80347b2:	687b      	ldr	r3, [r7, #4]
 80347b4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80347b6:	4a63      	ldr	r2, [pc, #396]	; (8034944 <HAL_SPI_Init+0x200>)
 80347b8:	4293      	cmp	r3, r2
 80347ba:	d009      	beq.n	80347d0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80347bc:	687b      	ldr	r3, [r7, #4]
 80347be:	681b      	ldr	r3, [r3, #0]
 80347c0:	4a61      	ldr	r2, [pc, #388]	; (8034948 <HAL_SPI_Init+0x204>)
 80347c2:	4293      	cmp	r3, r2
 80347c4:	d004      	beq.n	80347d0 <HAL_SPI_Init+0x8c>
 80347c6:	687b      	ldr	r3, [r7, #4]
 80347c8:	681b      	ldr	r3, [r3, #0]
 80347ca:	4a60      	ldr	r2, [pc, #384]	; (803494c <HAL_SPI_Init+0x208>)
 80347cc:	4293      	cmp	r3, r2
 80347ce:	d104      	bne.n	80347da <HAL_SPI_Init+0x96>
 80347d0:	68fb      	ldr	r3, [r7, #12]
 80347d2:	2b10      	cmp	r3, #16
 80347d4:	d901      	bls.n	80347da <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80347d6:	2301      	movs	r3, #1
 80347d8:	e0af      	b.n	803493a <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80347da:	687b      	ldr	r3, [r7, #4]
 80347dc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80347e0:	b2db      	uxtb	r3, r3
 80347e2:	2b00      	cmp	r3, #0
 80347e4:	d106      	bne.n	80347f4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80347e6:	687b      	ldr	r3, [r7, #4]
 80347e8:	2200      	movs	r2, #0
 80347ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80347ee:	6878      	ldr	r0, [r7, #4]
 80347f0:	f7f6 fc46 	bl	802b080 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80347f4:	687b      	ldr	r3, [r7, #4]
 80347f6:	2202      	movs	r2, #2
 80347f8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80347fc:	687b      	ldr	r3, [r7, #4]
 80347fe:	681b      	ldr	r3, [r3, #0]
 8034800:	681a      	ldr	r2, [r3, #0]
 8034802:	687b      	ldr	r3, [r7, #4]
 8034804:	681b      	ldr	r3, [r3, #0]
 8034806:	f022 0201 	bic.w	r2, r2, #1
 803480a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 803480c:	687b      	ldr	r3, [r7, #4]
 803480e:	681b      	ldr	r3, [r3, #0]
 8034810:	689b      	ldr	r3, [r3, #8]
 8034812:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8034816:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8034818:	687b      	ldr	r3, [r7, #4]
 803481a:	699b      	ldr	r3, [r3, #24]
 803481c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8034820:	d119      	bne.n	8034856 <HAL_SPI_Init+0x112>
 8034822:	687b      	ldr	r3, [r7, #4]
 8034824:	685b      	ldr	r3, [r3, #4]
 8034826:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 803482a:	d103      	bne.n	8034834 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 803482c:	687b      	ldr	r3, [r7, #4]
 803482e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8034830:	2b00      	cmp	r3, #0
 8034832:	d008      	beq.n	8034846 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8034834:	687b      	ldr	r3, [r7, #4]
 8034836:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8034838:	2b00      	cmp	r3, #0
 803483a:	d10c      	bne.n	8034856 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 803483c:	687b      	ldr	r3, [r7, #4]
 803483e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8034840:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8034844:	d107      	bne.n	8034856 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8034846:	687b      	ldr	r3, [r7, #4]
 8034848:	681b      	ldr	r3, [r3, #0]
 803484a:	681a      	ldr	r2, [r3, #0]
 803484c:	687b      	ldr	r3, [r7, #4]
 803484e:	681b      	ldr	r3, [r3, #0]
 8034850:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8034854:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8034856:	687b      	ldr	r3, [r7, #4]
 8034858:	69da      	ldr	r2, [r3, #28]
 803485a:	687b      	ldr	r3, [r7, #4]
 803485c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 803485e:	431a      	orrs	r2, r3
 8034860:	68bb      	ldr	r3, [r7, #8]
 8034862:	431a      	orrs	r2, r3
 8034864:	687b      	ldr	r3, [r7, #4]
 8034866:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8034868:	ea42 0103 	orr.w	r1, r2, r3
 803486c:	687b      	ldr	r3, [r7, #4]
 803486e:	68da      	ldr	r2, [r3, #12]
 8034870:	687b      	ldr	r3, [r7, #4]
 8034872:	681b      	ldr	r3, [r3, #0]
 8034874:	430a      	orrs	r2, r1
 8034876:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8034878:	687b      	ldr	r3, [r7, #4]
 803487a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 803487c:	687b      	ldr	r3, [r7, #4]
 803487e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8034880:	431a      	orrs	r2, r3
 8034882:	687b      	ldr	r3, [r7, #4]
 8034884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8034886:	431a      	orrs	r2, r3
 8034888:	687b      	ldr	r3, [r7, #4]
 803488a:	699b      	ldr	r3, [r3, #24]
 803488c:	431a      	orrs	r2, r3
 803488e:	687b      	ldr	r3, [r7, #4]
 8034890:	691b      	ldr	r3, [r3, #16]
 8034892:	431a      	orrs	r2, r3
 8034894:	687b      	ldr	r3, [r7, #4]
 8034896:	695b      	ldr	r3, [r3, #20]
 8034898:	431a      	orrs	r2, r3
 803489a:	687b      	ldr	r3, [r7, #4]
 803489c:	6a1b      	ldr	r3, [r3, #32]
 803489e:	431a      	orrs	r2, r3
 80348a0:	687b      	ldr	r3, [r7, #4]
 80348a2:	685b      	ldr	r3, [r3, #4]
 80348a4:	431a      	orrs	r2, r3
 80348a6:	687b      	ldr	r3, [r7, #4]
 80348a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80348aa:	431a      	orrs	r2, r3
 80348ac:	687b      	ldr	r3, [r7, #4]
 80348ae:	689b      	ldr	r3, [r3, #8]
 80348b0:	431a      	orrs	r2, r3
 80348b2:	687b      	ldr	r3, [r7, #4]
 80348b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80348b6:	ea42 0103 	orr.w	r1, r2, r3
 80348ba:	687b      	ldr	r3, [r7, #4]
 80348bc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80348be:	687b      	ldr	r3, [r7, #4]
 80348c0:	681b      	ldr	r3, [r3, #0]
 80348c2:	430a      	orrs	r2, r1
 80348c4:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80348c6:	687b      	ldr	r3, [r7, #4]
 80348c8:	685b      	ldr	r3, [r3, #4]
 80348ca:	2b00      	cmp	r3, #0
 80348cc:	d113      	bne.n	80348f6 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80348ce:	687b      	ldr	r3, [r7, #4]
 80348d0:	681b      	ldr	r3, [r3, #0]
 80348d2:	689b      	ldr	r3, [r3, #8]
 80348d4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80348d8:	687b      	ldr	r3, [r7, #4]
 80348da:	681b      	ldr	r3, [r3, #0]
 80348dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80348e0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80348e2:	687b      	ldr	r3, [r7, #4]
 80348e4:	681b      	ldr	r3, [r3, #0]
 80348e6:	689b      	ldr	r3, [r3, #8]
 80348e8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80348ec:	687b      	ldr	r3, [r7, #4]
 80348ee:	681b      	ldr	r3, [r3, #0]
 80348f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80348f4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80348f6:	687b      	ldr	r3, [r7, #4]
 80348f8:	681b      	ldr	r3, [r3, #0]
 80348fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80348fc:	687b      	ldr	r3, [r7, #4]
 80348fe:	681b      	ldr	r3, [r3, #0]
 8034900:	f022 0201 	bic.w	r2, r2, #1
 8034904:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8034906:	687b      	ldr	r3, [r7, #4]
 8034908:	685b      	ldr	r3, [r3, #4]
 803490a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 803490e:	2b00      	cmp	r3, #0
 8034910:	d00a      	beq.n	8034928 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8034912:	687b      	ldr	r3, [r7, #4]
 8034914:	681b      	ldr	r3, [r3, #0]
 8034916:	68db      	ldr	r3, [r3, #12]
 8034918:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 803491c:	687b      	ldr	r3, [r7, #4]
 803491e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8034920:	687b      	ldr	r3, [r7, #4]
 8034922:	681b      	ldr	r3, [r3, #0]
 8034924:	430a      	orrs	r2, r1
 8034926:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8034928:	687b      	ldr	r3, [r7, #4]
 803492a:	2200      	movs	r2, #0
 803492c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8034930:	687b      	ldr	r3, [r7, #4]
 8034932:	2201      	movs	r2, #1
 8034934:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8034938:	2300      	movs	r3, #0
}
 803493a:	4618      	mov	r0, r3
 803493c:	3710      	adds	r7, #16
 803493e:	46bd      	mov	sp, r7
 8034940:	bd80      	pop	{r7, pc}
 8034942:	bf00      	nop
 8034944:	40013000 	.word	0x40013000
 8034948:	40003800 	.word	0x40003800
 803494c:	40003c00 	.word	0x40003c00

08034950 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8034950:	b580      	push	{r7, lr}
 8034952:	b086      	sub	sp, #24
 8034954:	af00      	add	r7, sp, #0
 8034956:	60f8      	str	r0, [r7, #12]
 8034958:	60b9      	str	r1, [r7, #8]
 803495a:	4613      	mov	r3, r2
 803495c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 803495e:	2300      	movs	r3, #0
 8034960:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8034962:	68fb      	ldr	r3, [r7, #12]
 8034964:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8034968:	2b01      	cmp	r3, #1
 803496a:	d101      	bne.n	8034970 <HAL_SPI_Transmit_DMA+0x20>
 803496c:	2302      	movs	r3, #2
 803496e:	e12c      	b.n	8034bca <HAL_SPI_Transmit_DMA+0x27a>
 8034970:	68fb      	ldr	r3, [r7, #12]
 8034972:	2201      	movs	r2, #1
 8034974:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->State != HAL_SPI_STATE_READY)
 8034978:	68fb      	ldr	r3, [r7, #12]
 803497a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 803497e:	b2db      	uxtb	r3, r3
 8034980:	2b01      	cmp	r3, #1
 8034982:	d007      	beq.n	8034994 <HAL_SPI_Transmit_DMA+0x44>
  {
    errorcode = HAL_BUSY;
 8034984:	2302      	movs	r3, #2
 8034986:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8034988:	68fb      	ldr	r3, [r7, #12]
 803498a:	2200      	movs	r2, #0
 803498c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8034990:	7dfb      	ldrb	r3, [r7, #23]
 8034992:	e11a      	b.n	8034bca <HAL_SPI_Transmit_DMA+0x27a>
  }

  if ((pData == NULL) || (Size == 0UL))
 8034994:	68bb      	ldr	r3, [r7, #8]
 8034996:	2b00      	cmp	r3, #0
 8034998:	d002      	beq.n	80349a0 <HAL_SPI_Transmit_DMA+0x50>
 803499a:	88fb      	ldrh	r3, [r7, #6]
 803499c:	2b00      	cmp	r3, #0
 803499e:	d107      	bne.n	80349b0 <HAL_SPI_Transmit_DMA+0x60>
  {
    errorcode = HAL_ERROR;
 80349a0:	2301      	movs	r3, #1
 80349a2:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 80349a4:	68fb      	ldr	r3, [r7, #12]
 80349a6:	2200      	movs	r2, #0
 80349a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80349ac:	7dfb      	ldrb	r3, [r7, #23]
 80349ae:	e10c      	b.n	8034bca <HAL_SPI_Transmit_DMA+0x27a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80349b0:	68fb      	ldr	r3, [r7, #12]
 80349b2:	2203      	movs	r2, #3
 80349b4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80349b8:	68fb      	ldr	r3, [r7, #12]
 80349ba:	2200      	movs	r2, #0
 80349bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80349c0:	68fb      	ldr	r3, [r7, #12]
 80349c2:	68ba      	ldr	r2, [r7, #8]
 80349c4:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 80349c6:	68fb      	ldr	r3, [r7, #12]
 80349c8:	88fa      	ldrh	r2, [r7, #6]
 80349ca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 80349ce:	68fb      	ldr	r3, [r7, #12]
 80349d0:	88fa      	ldrh	r2, [r7, #6]
 80349d2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80349d6:	68fb      	ldr	r3, [r7, #12]
 80349d8:	2200      	movs	r2, #0
 80349da:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxISR       = NULL;
 80349dc:	68fb      	ldr	r3, [r7, #12]
 80349de:	2200      	movs	r2, #0
 80349e0:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 80349e2:	68fb      	ldr	r3, [r7, #12]
 80349e4:	2200      	movs	r2, #0
 80349e6:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 80349e8:	68fb      	ldr	r3, [r7, #12]
 80349ea:	2200      	movs	r2, #0
 80349ec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 80349f0:	68fb      	ldr	r3, [r7, #12]
 80349f2:	2200      	movs	r2, #0
 80349f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80349f8:	68fb      	ldr	r3, [r7, #12]
 80349fa:	689b      	ldr	r3, [r3, #8]
 80349fc:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8034a00:	d107      	bne.n	8034a12 <HAL_SPI_Transmit_DMA+0xc2>
  {
    SPI_1LINE_TX(hspi);
 8034a02:	68fb      	ldr	r3, [r7, #12]
 8034a04:	681b      	ldr	r3, [r3, #0]
 8034a06:	681a      	ldr	r2, [r3, #0]
 8034a08:	68fb      	ldr	r3, [r7, #12]
 8034a0a:	681b      	ldr	r3, [r3, #0]
 8034a0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8034a10:	601a      	str	r2, [r3, #0]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8034a12:	68fb      	ldr	r3, [r7, #12]
 8034a14:	68db      	ldr	r3, [r3, #12]
 8034a16:	2b0f      	cmp	r3, #15
 8034a18:	d905      	bls.n	8034a26 <HAL_SPI_Transmit_DMA+0xd6>
 8034a1a:	68fb      	ldr	r3, [r7, #12]
 8034a1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8034a1e:	699b      	ldr	r3, [r3, #24]
 8034a20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8034a24:	d10f      	bne.n	8034a46 <HAL_SPI_Transmit_DMA+0xf6>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8034a26:	68fb      	ldr	r3, [r7, #12]
 8034a28:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8034a2a:	2b07      	cmp	r3, #7
 8034a2c:	d913      	bls.n	8034a56 <HAL_SPI_Transmit_DMA+0x106>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8034a2e:	68fb      	ldr	r3, [r7, #12]
 8034a30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8034a32:	699b      	ldr	r3, [r3, #24]
 8034a34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8034a38:	d00d      	beq.n	8034a56 <HAL_SPI_Transmit_DMA+0x106>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8034a3a:	68fb      	ldr	r3, [r7, #12]
 8034a3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8034a3e:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8034a40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8034a44:	d007      	beq.n	8034a56 <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 8034a46:	2301      	movs	r3, #1
 8034a48:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8034a4a:	68fb      	ldr	r3, [r7, #12]
 8034a4c:	2200      	movs	r2, #0
 8034a4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8034a52:	7dfb      	ldrb	r3, [r7, #23]
 8034a54:	e0b9      	b.n	8034bca <HAL_SPI_Transmit_DMA+0x27a>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8034a56:	68fb      	ldr	r3, [r7, #12]
 8034a58:	68db      	ldr	r3, [r3, #12]
 8034a5a:	2b07      	cmp	r3, #7
 8034a5c:	d820      	bhi.n	8034aa0 <HAL_SPI_Transmit_DMA+0x150>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8034a5e:	68fb      	ldr	r3, [r7, #12]
 8034a60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8034a62:	699b      	ldr	r3, [r3, #24]
 8034a64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8034a68:	d109      	bne.n	8034a7e <HAL_SPI_Transmit_DMA+0x12e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8034a6a:	68fb      	ldr	r3, [r7, #12]
 8034a6c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8034a70:	b29b      	uxth	r3, r3
 8034a72:	3301      	adds	r3, #1
 8034a74:	105b      	asrs	r3, r3, #1
 8034a76:	b29a      	uxth	r2, r3
 8034a78:	68fb      	ldr	r3, [r7, #12]
 8034a7a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8034a7e:	68fb      	ldr	r3, [r7, #12]
 8034a80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8034a82:	699b      	ldr	r3, [r3, #24]
 8034a84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8034a88:	d11e      	bne.n	8034ac8 <HAL_SPI_Transmit_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8034a8a:	68fb      	ldr	r3, [r7, #12]
 8034a8c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8034a90:	b29b      	uxth	r3, r3
 8034a92:	3303      	adds	r3, #3
 8034a94:	109b      	asrs	r3, r3, #2
 8034a96:	b29a      	uxth	r2, r3
 8034a98:	68fb      	ldr	r3, [r7, #12]
 8034a9a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8034a9e:	e013      	b.n	8034ac8 <HAL_SPI_Transmit_DMA+0x178>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8034aa0:	68fb      	ldr	r3, [r7, #12]
 8034aa2:	68db      	ldr	r3, [r3, #12]
 8034aa4:	2b0f      	cmp	r3, #15
 8034aa6:	d80f      	bhi.n	8034ac8 <HAL_SPI_Transmit_DMA+0x178>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8034aa8:	68fb      	ldr	r3, [r7, #12]
 8034aaa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8034aac:	699b      	ldr	r3, [r3, #24]
 8034aae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8034ab2:	d109      	bne.n	8034ac8 <HAL_SPI_Transmit_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8034ab4:	68fb      	ldr	r3, [r7, #12]
 8034ab6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8034aba:	b29b      	uxth	r3, r3
 8034abc:	3301      	adds	r3, #1
 8034abe:	105b      	asrs	r3, r3, #1
 8034ac0:	b29a      	uxth	r2, r3
 8034ac2:	68fb      	ldr	r3, [r7, #12]
 8034ac4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8034ac8:	68fb      	ldr	r3, [r7, #12]
 8034aca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8034acc:	4a41      	ldr	r2, [pc, #260]	; (8034bd4 <HAL_SPI_Transmit_DMA+0x284>)
 8034ace:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8034ad0:	68fb      	ldr	r3, [r7, #12]
 8034ad2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8034ad4:	4a40      	ldr	r2, [pc, #256]	; (8034bd8 <HAL_SPI_Transmit_DMA+0x288>)
 8034ad6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8034ad8:	68fb      	ldr	r3, [r7, #12]
 8034ada:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8034adc:	4a3f      	ldr	r2, [pc, #252]	; (8034bdc <HAL_SPI_Transmit_DMA+0x28c>)
 8034ade:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8034ae0:	68fb      	ldr	r3, [r7, #12]
 8034ae2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8034ae4:	2200      	movs	r2, #0
 8034ae6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8034ae8:	68fb      	ldr	r3, [r7, #12]
 8034aea:	681b      	ldr	r3, [r3, #0]
 8034aec:	689a      	ldr	r2, [r3, #8]
 8034aee:	68fb      	ldr	r3, [r7, #12]
 8034af0:	681b      	ldr	r3, [r3, #0]
 8034af2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8034af6:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8034af8:	68fb      	ldr	r3, [r7, #12]
 8034afa:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8034afc:	68fb      	ldr	r3, [r7, #12]
 8034afe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8034b00:	4619      	mov	r1, r3
 8034b02:	68fb      	ldr	r3, [r7, #12]
 8034b04:	681b      	ldr	r3, [r3, #0]
 8034b06:	3320      	adds	r3, #32
 8034b08:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8034b0a:	68fb      	ldr	r3, [r7, #12]
 8034b0c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8034b10:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8034b12:	f7f8 fb65 	bl	802d1e0 <HAL_DMA_Start_IT>
 8034b16:	4603      	mov	r3, r0
 8034b18:	2b00      	cmp	r3, #0
 8034b1a:	d013      	beq.n	8034b44 <HAL_SPI_Transmit_DMA+0x1f4>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8034b1c:	68fb      	ldr	r3, [r7, #12]
 8034b1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8034b22:	f043 0210 	orr.w	r2, r3, #16
 8034b26:	68fb      	ldr	r3, [r7, #12]
 8034b28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8034b2c:	68fb      	ldr	r3, [r7, #12]
 8034b2e:	2200      	movs	r2, #0
 8034b30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 8034b34:	68fb      	ldr	r3, [r7, #12]
 8034b36:	2201      	movs	r2, #1
 8034b38:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 8034b3c:	2301      	movs	r3, #1
 8034b3e:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 8034b40:	7dfb      	ldrb	r3, [r7, #23]
 8034b42:	e042      	b.n	8034bca <HAL_SPI_Transmit_DMA+0x27a>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8034b44:	68fb      	ldr	r3, [r7, #12]
 8034b46:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8034b48:	69db      	ldr	r3, [r3, #28]
 8034b4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8034b4e:	d108      	bne.n	8034b62 <HAL_SPI_Transmit_DMA+0x212>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8034b50:	68fb      	ldr	r3, [r7, #12]
 8034b52:	681b      	ldr	r3, [r3, #0]
 8034b54:	6859      	ldr	r1, [r3, #4]
 8034b56:	68fb      	ldr	r3, [r7, #12]
 8034b58:	681a      	ldr	r2, [r3, #0]
 8034b5a:	4b21      	ldr	r3, [pc, #132]	; (8034be0 <HAL_SPI_Transmit_DMA+0x290>)
 8034b5c:	400b      	ands	r3, r1
 8034b5e:	6053      	str	r3, [r2, #4]
 8034b60:	e009      	b.n	8034b76 <HAL_SPI_Transmit_DMA+0x226>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8034b62:	68fb      	ldr	r3, [r7, #12]
 8034b64:	681b      	ldr	r3, [r3, #0]
 8034b66:	685a      	ldr	r2, [r3, #4]
 8034b68:	4b1d      	ldr	r3, [pc, #116]	; (8034be0 <HAL_SPI_Transmit_DMA+0x290>)
 8034b6a:	4013      	ands	r3, r2
 8034b6c:	88f9      	ldrh	r1, [r7, #6]
 8034b6e:	68fa      	ldr	r2, [r7, #12]
 8034b70:	6812      	ldr	r2, [r2, #0]
 8034b72:	430b      	orrs	r3, r1
 8034b74:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8034b76:	68fb      	ldr	r3, [r7, #12]
 8034b78:	681b      	ldr	r3, [r3, #0]
 8034b7a:	689a      	ldr	r2, [r3, #8]
 8034b7c:	68fb      	ldr	r3, [r7, #12]
 8034b7e:	681b      	ldr	r3, [r3, #0]
 8034b80:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8034b84:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8034b86:	68fb      	ldr	r3, [r7, #12]
 8034b88:	681b      	ldr	r3, [r3, #0]
 8034b8a:	691a      	ldr	r2, [r3, #16]
 8034b8c:	68fb      	ldr	r3, [r7, #12]
 8034b8e:	681b      	ldr	r3, [r3, #0]
 8034b90:	f442 7248 	orr.w	r2, r2, #800	; 0x320
 8034b94:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8034b96:	68fb      	ldr	r3, [r7, #12]
 8034b98:	681b      	ldr	r3, [r3, #0]
 8034b9a:	681a      	ldr	r2, [r3, #0]
 8034b9c:	68fb      	ldr	r3, [r7, #12]
 8034b9e:	681b      	ldr	r3, [r3, #0]
 8034ba0:	f042 0201 	orr.w	r2, r2, #1
 8034ba4:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8034ba6:	68fb      	ldr	r3, [r7, #12]
 8034ba8:	685b      	ldr	r3, [r3, #4]
 8034baa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8034bae:	d107      	bne.n	8034bc0 <HAL_SPI_Transmit_DMA+0x270>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8034bb0:	68fb      	ldr	r3, [r7, #12]
 8034bb2:	681b      	ldr	r3, [r3, #0]
 8034bb4:	681a      	ldr	r2, [r3, #0]
 8034bb6:	68fb      	ldr	r3, [r7, #12]
 8034bb8:	681b      	ldr	r3, [r3, #0]
 8034bba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8034bbe:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8034bc0:	68fb      	ldr	r3, [r7, #12]
 8034bc2:	2200      	movs	r2, #0
 8034bc4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 8034bc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8034bca:	4618      	mov	r0, r3
 8034bcc:	3718      	adds	r7, #24
 8034bce:	46bd      	mov	sp, r7
 8034bd0:	bd80      	pop	{r7, pc}
 8034bd2:	bf00      	nop
 8034bd4:	0803575b 	.word	0x0803575b
 8034bd8:	08035689 	.word	0x08035689
 8034bdc:	080357af 	.word	0x080357af
 8034be0:	ffff0000 	.word	0xffff0000

08034be4 <HAL_SPI_Receive_DMA>:
  * @param  Size : amount of data to be sent
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8034be4:	b580      	push	{r7, lr}
 8034be6:	b086      	sub	sp, #24
 8034be8:	af00      	add	r7, sp, #0
 8034bea:	60f8      	str	r0, [r7, #12]
 8034bec:	60b9      	str	r1, [r7, #8]
 8034bee:	4613      	mov	r3, r2
 8034bf0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8034bf2:	2300      	movs	r3, #0
 8034bf4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8034bf6:	68fb      	ldr	r3, [r7, #12]
 8034bf8:	689b      	ldr	r3, [r3, #8]
 8034bfa:	2b00      	cmp	r3, #0
 8034bfc:	d110      	bne.n	8034c20 <HAL_SPI_Receive_DMA+0x3c>
 8034bfe:	68fb      	ldr	r3, [r7, #12]
 8034c00:	685b      	ldr	r3, [r3, #4]
 8034c02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8034c06:	d10b      	bne.n	8034c20 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8034c08:	68fb      	ldr	r3, [r7, #12]
 8034c0a:	2204      	movs	r2, #4
 8034c0c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8034c10:	88fb      	ldrh	r3, [r7, #6]
 8034c12:	68ba      	ldr	r2, [r7, #8]
 8034c14:	68b9      	ldr	r1, [r7, #8]
 8034c16:	68f8      	ldr	r0, [r7, #12]
 8034c18:	f000 f940 	bl	8034e9c <HAL_SPI_TransmitReceive_DMA>
 8034c1c:	4603      	mov	r3, r0
 8034c1e:	e130      	b.n	8034e82 <HAL_SPI_Receive_DMA+0x29e>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8034c20:	68fb      	ldr	r3, [r7, #12]
 8034c22:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8034c26:	2b01      	cmp	r3, #1
 8034c28:	d101      	bne.n	8034c2e <HAL_SPI_Receive_DMA+0x4a>
 8034c2a:	2302      	movs	r3, #2
 8034c2c:	e129      	b.n	8034e82 <HAL_SPI_Receive_DMA+0x29e>
 8034c2e:	68fb      	ldr	r3, [r7, #12]
 8034c30:	2201      	movs	r2, #1
 8034c32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->State != HAL_SPI_STATE_READY)
 8034c36:	68fb      	ldr	r3, [r7, #12]
 8034c38:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8034c3c:	b2db      	uxtb	r3, r3
 8034c3e:	2b01      	cmp	r3, #1
 8034c40:	d007      	beq.n	8034c52 <HAL_SPI_Receive_DMA+0x6e>
  {
    errorcode = HAL_BUSY;
 8034c42:	2302      	movs	r3, #2
 8034c44:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8034c46:	68fb      	ldr	r3, [r7, #12]
 8034c48:	2200      	movs	r2, #0
 8034c4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8034c4e:	7dfb      	ldrb	r3, [r7, #23]
 8034c50:	e117      	b.n	8034e82 <HAL_SPI_Receive_DMA+0x29e>
  }

  if ((pData == NULL) || (Size == 0UL))
 8034c52:	68bb      	ldr	r3, [r7, #8]
 8034c54:	2b00      	cmp	r3, #0
 8034c56:	d002      	beq.n	8034c5e <HAL_SPI_Receive_DMA+0x7a>
 8034c58:	88fb      	ldrh	r3, [r7, #6]
 8034c5a:	2b00      	cmp	r3, #0
 8034c5c:	d107      	bne.n	8034c6e <HAL_SPI_Receive_DMA+0x8a>
  {
    errorcode = HAL_ERROR;
 8034c5e:	2301      	movs	r3, #1
 8034c60:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8034c62:	68fb      	ldr	r3, [r7, #12]
 8034c64:	2200      	movs	r2, #0
 8034c66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8034c6a:	7dfb      	ldrb	r3, [r7, #23]
 8034c6c:	e109      	b.n	8034e82 <HAL_SPI_Receive_DMA+0x29e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8034c6e:	68fb      	ldr	r3, [r7, #12]
 8034c70:	2204      	movs	r2, #4
 8034c72:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8034c76:	68fb      	ldr	r3, [r7, #12]
 8034c78:	2200      	movs	r2, #0
 8034c7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8034c7e:	68fb      	ldr	r3, [r7, #12]
 8034c80:	68ba      	ldr	r2, [r7, #8]
 8034c82:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8034c84:	68fb      	ldr	r3, [r7, #12]
 8034c86:	88fa      	ldrh	r2, [r7, #6]
 8034c88:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8034c8c:	68fb      	ldr	r3, [r7, #12]
 8034c8e:	88fa      	ldrh	r2, [r7, #6]
 8034c90:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8034c94:	68fb      	ldr	r3, [r7, #12]
 8034c96:	2200      	movs	r2, #0
 8034c98:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8034c9a:	68fb      	ldr	r3, [r7, #12]
 8034c9c:	2200      	movs	r2, #0
 8034c9e:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->TxXferSize  = (uint16_t) 0UL;
 8034ca0:	68fb      	ldr	r3, [r7, #12]
 8034ca2:	2200      	movs	r2, #0
 8034ca4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8034ca8:	68fb      	ldr	r3, [r7, #12]
 8034caa:	2200      	movs	r2, #0
 8034cac:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8034cb0:	68fb      	ldr	r3, [r7, #12]
 8034cb2:	689b      	ldr	r3, [r3, #8]
 8034cb4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8034cb8:	d107      	bne.n	8034cca <HAL_SPI_Receive_DMA+0xe6>
  {
    SPI_1LINE_RX(hspi);
 8034cba:	68fb      	ldr	r3, [r7, #12]
 8034cbc:	681b      	ldr	r3, [r3, #0]
 8034cbe:	681a      	ldr	r2, [r3, #0]
 8034cc0:	68fb      	ldr	r3, [r7, #12]
 8034cc2:	681b      	ldr	r3, [r3, #0]
 8034cc4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8034cc8:	601a      	str	r2, [r3, #0]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8034cca:	68fb      	ldr	r3, [r7, #12]
 8034ccc:	68db      	ldr	r3, [r3, #12]
 8034cce:	2b0f      	cmp	r3, #15
 8034cd0:	d905      	bls.n	8034cde <HAL_SPI_Receive_DMA+0xfa>
 8034cd2:	68fb      	ldr	r3, [r7, #12]
 8034cd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8034cd6:	699b      	ldr	r3, [r3, #24]
 8034cd8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8034cdc:	d10f      	bne.n	8034cfe <HAL_SPI_Receive_DMA+0x11a>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8034cde:	68fb      	ldr	r3, [r7, #12]
 8034ce0:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8034ce2:	2b07      	cmp	r3, #7
 8034ce4:	d913      	bls.n	8034d0e <HAL_SPI_Receive_DMA+0x12a>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8034ce6:	68fb      	ldr	r3, [r7, #12]
 8034ce8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8034cea:	699b      	ldr	r3, [r3, #24]
 8034cec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8034cf0:	d00d      	beq.n	8034d0e <HAL_SPI_Receive_DMA+0x12a>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8034cf2:	68fb      	ldr	r3, [r7, #12]
 8034cf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8034cf6:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8034cf8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8034cfc:	d007      	beq.n	8034d0e <HAL_SPI_Receive_DMA+0x12a>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 8034cfe:	2301      	movs	r3, #1
 8034d00:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8034d02:	68fb      	ldr	r3, [r7, #12]
 8034d04:	2200      	movs	r2, #0
 8034d06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8034d0a:	7dfb      	ldrb	r3, [r7, #23]
 8034d0c:	e0b9      	b.n	8034e82 <HAL_SPI_Receive_DMA+0x29e>
  }

  /* Clear RXDMAEN bit */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8034d0e:	68fb      	ldr	r3, [r7, #12]
 8034d10:	681b      	ldr	r3, [r3, #0]
 8034d12:	689a      	ldr	r2, [r3, #8]
 8034d14:	68fb      	ldr	r3, [r7, #12]
 8034d16:	681b      	ldr	r3, [r3, #0]
 8034d18:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8034d1c:	609a      	str	r2, [r3, #8]

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8034d1e:	68fb      	ldr	r3, [r7, #12]
 8034d20:	68db      	ldr	r3, [r3, #12]
 8034d22:	2b07      	cmp	r3, #7
 8034d24:	d820      	bhi.n	8034d68 <HAL_SPI_Receive_DMA+0x184>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8034d26:	68fb      	ldr	r3, [r7, #12]
 8034d28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8034d2a:	699b      	ldr	r3, [r3, #24]
 8034d2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8034d30:	d109      	bne.n	8034d46 <HAL_SPI_Receive_DMA+0x162>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8034d32:	68fb      	ldr	r3, [r7, #12]
 8034d34:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8034d38:	b29b      	uxth	r3, r3
 8034d3a:	3301      	adds	r3, #1
 8034d3c:	105b      	asrs	r3, r3, #1
 8034d3e:	b29a      	uxth	r2, r3
 8034d40:	68fb      	ldr	r3, [r7, #12]
 8034d42:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8034d46:	68fb      	ldr	r3, [r7, #12]
 8034d48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8034d4a:	699b      	ldr	r3, [r3, #24]
 8034d4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8034d50:	d11e      	bne.n	8034d90 <HAL_SPI_Receive_DMA+0x1ac>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 8034d52:	68fb      	ldr	r3, [r7, #12]
 8034d54:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8034d58:	b29b      	uxth	r3, r3
 8034d5a:	3303      	adds	r3, #3
 8034d5c:	109b      	asrs	r3, r3, #2
 8034d5e:	b29a      	uxth	r2, r3
 8034d60:	68fb      	ldr	r3, [r7, #12]
 8034d62:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8034d66:	e013      	b.n	8034d90 <HAL_SPI_Receive_DMA+0x1ac>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8034d68:	68fb      	ldr	r3, [r7, #12]
 8034d6a:	68db      	ldr	r3, [r3, #12]
 8034d6c:	2b0f      	cmp	r3, #15
 8034d6e:	d80f      	bhi.n	8034d90 <HAL_SPI_Receive_DMA+0x1ac>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8034d70:	68fb      	ldr	r3, [r7, #12]
 8034d72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8034d74:	699b      	ldr	r3, [r3, #24]
 8034d76:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8034d7a:	d109      	bne.n	8034d90 <HAL_SPI_Receive_DMA+0x1ac>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8034d7c:	68fb      	ldr	r3, [r7, #12]
 8034d7e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8034d82:	b29b      	uxth	r3, r3
 8034d84:	3301      	adds	r3, #1
 8034d86:	105b      	asrs	r3, r3, #1
 8034d88:	b29a      	uxth	r2, r3
 8034d8a:	68fb      	ldr	r3, [r7, #12]
 8034d8c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8034d90:	68fb      	ldr	r3, [r7, #12]
 8034d92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8034d94:	4a3d      	ldr	r2, [pc, #244]	; (8034e8c <HAL_SPI_Receive_DMA+0x2a8>)
 8034d96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8034d98:	68fb      	ldr	r3, [r7, #12]
 8034d9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8034d9c:	4a3c      	ldr	r2, [pc, #240]	; (8034e90 <HAL_SPI_Receive_DMA+0x2ac>)
 8034d9e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8034da0:	68fb      	ldr	r3, [r7, #12]
 8034da2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8034da4:	4a3b      	ldr	r2, [pc, #236]	; (8034e94 <HAL_SPI_Receive_DMA+0x2b0>)
 8034da6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8034da8:	68fb      	ldr	r3, [r7, #12]
 8034daa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8034dac:	2200      	movs	r2, #0
 8034dae:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8034db0:	68fb      	ldr	r3, [r7, #12]
 8034db2:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8034db4:	68fb      	ldr	r3, [r7, #12]
 8034db6:	681b      	ldr	r3, [r3, #0]
 8034db8:	3330      	adds	r3, #48	; 0x30
 8034dba:	4619      	mov	r1, r3
 8034dbc:	68fb      	ldr	r3, [r7, #12]
 8034dbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8034dc0:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8034dc2:	68fb      	ldr	r3, [r7, #12]
 8034dc4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8034dc8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8034dca:	f7f8 fa09 	bl	802d1e0 <HAL_DMA_Start_IT>
 8034dce:	4603      	mov	r3, r0
 8034dd0:	2b00      	cmp	r3, #0
 8034dd2:	d013      	beq.n	8034dfc <HAL_SPI_Receive_DMA+0x218>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8034dd4:	68fb      	ldr	r3, [r7, #12]
 8034dd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8034dda:	f043 0210 	orr.w	r2, r3, #16
 8034dde:	68fb      	ldr	r3, [r7, #12]
 8034de0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8034de4:	68fb      	ldr	r3, [r7, #12]
 8034de6:	2200      	movs	r2, #0
 8034de8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 8034dec:	68fb      	ldr	r3, [r7, #12]
 8034dee:	2201      	movs	r2, #1
 8034df0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 8034df4:	2301      	movs	r3, #1
 8034df6:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 8034df8:	7dfb      	ldrb	r3, [r7, #23]
 8034dfa:	e042      	b.n	8034e82 <HAL_SPI_Receive_DMA+0x29e>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 8034dfc:	68fb      	ldr	r3, [r7, #12]
 8034dfe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8034e00:	69db      	ldr	r3, [r3, #28]
 8034e02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8034e06:	d108      	bne.n	8034e1a <HAL_SPI_Receive_DMA+0x236>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8034e08:	68fb      	ldr	r3, [r7, #12]
 8034e0a:	681b      	ldr	r3, [r3, #0]
 8034e0c:	6859      	ldr	r1, [r3, #4]
 8034e0e:	68fb      	ldr	r3, [r7, #12]
 8034e10:	681a      	ldr	r2, [r3, #0]
 8034e12:	4b21      	ldr	r3, [pc, #132]	; (8034e98 <HAL_SPI_Receive_DMA+0x2b4>)
 8034e14:	400b      	ands	r3, r1
 8034e16:	6053      	str	r3, [r2, #4]
 8034e18:	e009      	b.n	8034e2e <HAL_SPI_Receive_DMA+0x24a>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8034e1a:	68fb      	ldr	r3, [r7, #12]
 8034e1c:	681b      	ldr	r3, [r3, #0]
 8034e1e:	685a      	ldr	r2, [r3, #4]
 8034e20:	4b1d      	ldr	r3, [pc, #116]	; (8034e98 <HAL_SPI_Receive_DMA+0x2b4>)
 8034e22:	4013      	ands	r3, r2
 8034e24:	88f9      	ldrh	r1, [r7, #6]
 8034e26:	68fa      	ldr	r2, [r7, #12]
 8034e28:	6812      	ldr	r2, [r2, #0]
 8034e2a:	430b      	orrs	r3, r1
 8034e2c:	6053      	str	r3, [r2, #4]
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8034e2e:	68fb      	ldr	r3, [r7, #12]
 8034e30:	681b      	ldr	r3, [r3, #0]
 8034e32:	689a      	ldr	r2, [r3, #8]
 8034e34:	68fb      	ldr	r3, [r7, #12]
 8034e36:	681b      	ldr	r3, [r3, #0]
 8034e38:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8034e3c:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8034e3e:	68fb      	ldr	r3, [r7, #12]
 8034e40:	681b      	ldr	r3, [r3, #0]
 8034e42:	691a      	ldr	r2, [r3, #16]
 8034e44:	68fb      	ldr	r3, [r7, #12]
 8034e46:	681b      	ldr	r3, [r3, #0]
 8034e48:	f442 7250 	orr.w	r2, r2, #832	; 0x340
 8034e4c:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8034e4e:	68fb      	ldr	r3, [r7, #12]
 8034e50:	681b      	ldr	r3, [r3, #0]
 8034e52:	681a      	ldr	r2, [r3, #0]
 8034e54:	68fb      	ldr	r3, [r7, #12]
 8034e56:	681b      	ldr	r3, [r3, #0]
 8034e58:	f042 0201 	orr.w	r2, r2, #1
 8034e5c:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8034e5e:	68fb      	ldr	r3, [r7, #12]
 8034e60:	685b      	ldr	r3, [r3, #4]
 8034e62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8034e66:	d107      	bne.n	8034e78 <HAL_SPI_Receive_DMA+0x294>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8034e68:	68fb      	ldr	r3, [r7, #12]
 8034e6a:	681b      	ldr	r3, [r3, #0]
 8034e6c:	681a      	ldr	r2, [r3, #0]
 8034e6e:	68fb      	ldr	r3, [r7, #12]
 8034e70:	681b      	ldr	r3, [r3, #0]
 8034e72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8034e76:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8034e78:	68fb      	ldr	r3, [r7, #12]
 8034e7a:	2200      	movs	r2, #0
 8034e7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 8034e80:	7dfb      	ldrb	r3, [r7, #23]
}
 8034e82:	4618      	mov	r0, r3
 8034e84:	3718      	adds	r7, #24
 8034e86:	46bd      	mov	sp, r7
 8034e88:	bd80      	pop	{r7, pc}
 8034e8a:	bf00      	nop
 8034e8c:	08035777 	.word	0x08035777
 8034e90:	080356cf 	.word	0x080356cf
 8034e94:	080357af 	.word	0x080357af
 8034e98:	ffff0000 	.word	0xffff0000

08034e9c <HAL_SPI_TransmitReceive_DMA>:
  * @note   When the CRC feature is enabled the pRxData Length must be Size + 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8034e9c:	b580      	push	{r7, lr}
 8034e9e:	b086      	sub	sp, #24
 8034ea0:	af00      	add	r7, sp, #0
 8034ea2:	60f8      	str	r0, [r7, #12]
 8034ea4:	60b9      	str	r1, [r7, #8]
 8034ea6:	607a      	str	r2, [r7, #4]
 8034ea8:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8034eaa:	2300      	movs	r3, #0
 8034eac:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8034eae:	68fb      	ldr	r3, [r7, #12]
 8034eb0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8034eb4:	2b01      	cmp	r3, #1
 8034eb6:	d101      	bne.n	8034ebc <HAL_SPI_TransmitReceive_DMA+0x20>
 8034eb8:	2302      	movs	r3, #2
 8034eba:	e1b4      	b.n	8035226 <HAL_SPI_TransmitReceive_DMA+0x38a>
 8034ebc:	68fb      	ldr	r3, [r7, #12]
 8034ebe:	2201      	movs	r2, #1
 8034ec0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init temporary variables */
  tmp_state   = hspi->State;
 8034ec4:	68fb      	ldr	r3, [r7, #12]
 8034ec6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8034eca:	75bb      	strb	r3, [r7, #22]
  tmp_mode    = hspi->Init.Mode;
 8034ecc:	68fb      	ldr	r3, [r7, #12]
 8034ece:	685b      	ldr	r3, [r3, #4]
 8034ed0:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8034ed2:	7dbb      	ldrb	r3, [r7, #22]
 8034ed4:	2b01      	cmp	r3, #1
 8034ed6:	d012      	beq.n	8034efe <HAL_SPI_TransmitReceive_DMA+0x62>
 8034ed8:	693b      	ldr	r3, [r7, #16]
 8034eda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8034ede:	d106      	bne.n	8034eee <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8034ee0:	68fb      	ldr	r3, [r7, #12]
 8034ee2:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 8034ee4:	2b00      	cmp	r3, #0
 8034ee6:	d102      	bne.n	8034eee <HAL_SPI_TransmitReceive_DMA+0x52>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8034ee8:	7dbb      	ldrb	r3, [r7, #22]
 8034eea:	2b04      	cmp	r3, #4
 8034eec:	d007      	beq.n	8034efe <HAL_SPI_TransmitReceive_DMA+0x62>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 8034eee:	2302      	movs	r3, #2
 8034ef0:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8034ef2:	68fb      	ldr	r3, [r7, #12]
 8034ef4:	2200      	movs	r2, #0
 8034ef6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8034efa:	7dfb      	ldrb	r3, [r7, #23]
 8034efc:	e193      	b.n	8035226 <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8034efe:	68bb      	ldr	r3, [r7, #8]
 8034f00:	2b00      	cmp	r3, #0
 8034f02:	d005      	beq.n	8034f10 <HAL_SPI_TransmitReceive_DMA+0x74>
 8034f04:	687b      	ldr	r3, [r7, #4]
 8034f06:	2b00      	cmp	r3, #0
 8034f08:	d002      	beq.n	8034f10 <HAL_SPI_TransmitReceive_DMA+0x74>
 8034f0a:	887b      	ldrh	r3, [r7, #2]
 8034f0c:	2b00      	cmp	r3, #0
 8034f0e:	d107      	bne.n	8034f20 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    errorcode = HAL_ERROR;
 8034f10:	2301      	movs	r3, #1
 8034f12:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8034f14:	68fb      	ldr	r3, [r7, #12]
 8034f16:	2200      	movs	r2, #0
 8034f18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8034f1c:	7dfb      	ldrb	r3, [r7, #23]
 8034f1e:	e182      	b.n	8035226 <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8034f20:	68fb      	ldr	r3, [r7, #12]
 8034f22:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8034f26:	b2db      	uxtb	r3, r3
 8034f28:	2b04      	cmp	r3, #4
 8034f2a:	d003      	beq.n	8034f34 <HAL_SPI_TransmitReceive_DMA+0x98>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8034f2c:	68fb      	ldr	r3, [r7, #12]
 8034f2e:	2205      	movs	r2, #5
 8034f30:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8034f34:	68fb      	ldr	r3, [r7, #12]
 8034f36:	2200      	movs	r2, #0
 8034f38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8034f3c:	68fb      	ldr	r3, [r7, #12]
 8034f3e:	68ba      	ldr	r2, [r7, #8]
 8034f40:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8034f42:	68fb      	ldr	r3, [r7, #12]
 8034f44:	887a      	ldrh	r2, [r7, #2]
 8034f46:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8034f4a:	68fb      	ldr	r3, [r7, #12]
 8034f4c:	887a      	ldrh	r2, [r7, #2]
 8034f4e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8034f52:	68fb      	ldr	r3, [r7, #12]
 8034f54:	687a      	ldr	r2, [r7, #4]
 8034f56:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8034f58:	68fb      	ldr	r3, [r7, #12]
 8034f5a:	887a      	ldrh	r2, [r7, #2]
 8034f5c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8034f60:	68fb      	ldr	r3, [r7, #12]
 8034f62:	887a      	ldrh	r2, [r7, #2]
 8034f64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8034f68:	68fb      	ldr	r3, [r7, #12]
 8034f6a:	2200      	movs	r2, #0
 8034f6c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8034f6e:	68fb      	ldr	r3, [r7, #12]
 8034f70:	2200      	movs	r2, #0
 8034f72:	675a      	str	r2, [r3, #116]	; 0x74

  /* Reset the Tx/Rx DMA bits */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8034f74:	68fb      	ldr	r3, [r7, #12]
 8034f76:	681b      	ldr	r3, [r3, #0]
 8034f78:	689a      	ldr	r2, [r3, #8]
 8034f7a:	68fb      	ldr	r3, [r7, #12]
 8034f7c:	681b      	ldr	r3, [r3, #0]
 8034f7e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8034f82:	609a      	str	r2, [r3, #8]

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8034f84:	68fb      	ldr	r3, [r7, #12]
 8034f86:	68db      	ldr	r3, [r3, #12]
 8034f88:	2b0f      	cmp	r3, #15
 8034f8a:	d905      	bls.n	8034f98 <HAL_SPI_TransmitReceive_DMA+0xfc>
 8034f8c:	68fb      	ldr	r3, [r7, #12]
 8034f8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8034f90:	699b      	ldr	r3, [r3, #24]
 8034f92:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8034f96:	d10f      	bne.n	8034fb8 <HAL_SPI_TransmitReceive_DMA+0x11c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8034f98:	68fb      	ldr	r3, [r7, #12]
 8034f9a:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8034f9c:	2b07      	cmp	r3, #7
 8034f9e:	d913      	bls.n	8034fc8 <HAL_SPI_TransmitReceive_DMA+0x12c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8034fa0:	68fb      	ldr	r3, [r7, #12]
 8034fa2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8034fa4:	699b      	ldr	r3, [r3, #24]
 8034fa6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8034faa:	d00d      	beq.n	8034fc8 <HAL_SPI_TransmitReceive_DMA+0x12c>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8034fac:	68fb      	ldr	r3, [r7, #12]
 8034fae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8034fb0:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8034fb2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8034fb6:	d007      	beq.n	8034fc8 <HAL_SPI_TransmitReceive_DMA+0x12c>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 8034fb8:	2301      	movs	r3, #1
 8034fba:	75fb      	strb	r3, [r7, #23]
    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8034fbc:	68fb      	ldr	r3, [r7, #12]
 8034fbe:	2200      	movs	r2, #0
 8034fc0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8034fc4:	7dfb      	ldrb	r3, [r7, #23]
 8034fc6:	e12e      	b.n	8035226 <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8034fc8:	68fb      	ldr	r3, [r7, #12]
 8034fca:	68db      	ldr	r3, [r3, #12]
 8034fcc:	2b07      	cmp	r3, #7
 8034fce:	d840      	bhi.n	8035052 <HAL_SPI_TransmitReceive_DMA+0x1b6>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8034fd0:	68fb      	ldr	r3, [r7, #12]
 8034fd2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8034fd4:	699b      	ldr	r3, [r3, #24]
 8034fd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8034fda:	d109      	bne.n	8034ff0 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8034fdc:	68fb      	ldr	r3, [r7, #12]
 8034fde:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8034fe2:	b29b      	uxth	r3, r3
 8034fe4:	3301      	adds	r3, #1
 8034fe6:	105b      	asrs	r3, r3, #1
 8034fe8:	b29a      	uxth	r2, r3
 8034fea:	68fb      	ldr	r3, [r7, #12]
 8034fec:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8034ff0:	68fb      	ldr	r3, [r7, #12]
 8034ff2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8034ff4:	699b      	ldr	r3, [r3, #24]
 8034ff6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8034ffa:	d109      	bne.n	8035010 <HAL_SPI_TransmitReceive_DMA+0x174>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8034ffc:	68fb      	ldr	r3, [r7, #12]
 8034ffe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8035002:	b29b      	uxth	r3, r3
 8035004:	3303      	adds	r3, #3
 8035006:	109b      	asrs	r3, r3, #2
 8035008:	b29a      	uxth	r2, r3
 803500a:	68fb      	ldr	r3, [r7, #12]
 803500c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8035010:	68fb      	ldr	r3, [r7, #12]
 8035012:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8035014:	699b      	ldr	r3, [r3, #24]
 8035016:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 803501a:	d109      	bne.n	8035030 <HAL_SPI_TransmitReceive_DMA+0x194>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 803501c:	68fb      	ldr	r3, [r7, #12]
 803501e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8035022:	b29b      	uxth	r3, r3
 8035024:	3301      	adds	r3, #1
 8035026:	105b      	asrs	r3, r3, #1
 8035028:	b29a      	uxth	r2, r3
 803502a:	68fb      	ldr	r3, [r7, #12]
 803502c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8035030:	68fb      	ldr	r3, [r7, #12]
 8035032:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8035034:	699b      	ldr	r3, [r3, #24]
 8035036:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 803503a:	d12e      	bne.n	803509a <HAL_SPI_TransmitReceive_DMA+0x1fe>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 803503c:	68fb      	ldr	r3, [r7, #12]
 803503e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8035042:	b29b      	uxth	r3, r3
 8035044:	3303      	adds	r3, #3
 8035046:	109b      	asrs	r3, r3, #2
 8035048:	b29a      	uxth	r2, r3
 803504a:	68fb      	ldr	r3, [r7, #12]
 803504c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8035050:	e023      	b.n	803509a <HAL_SPI_TransmitReceive_DMA+0x1fe>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8035052:	68fb      	ldr	r3, [r7, #12]
 8035054:	68db      	ldr	r3, [r3, #12]
 8035056:	2b0f      	cmp	r3, #15
 8035058:	d81f      	bhi.n	803509a <HAL_SPI_TransmitReceive_DMA+0x1fe>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 803505a:	68fb      	ldr	r3, [r7, #12]
 803505c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 803505e:	699b      	ldr	r3, [r3, #24]
 8035060:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8035064:	d109      	bne.n	803507a <HAL_SPI_TransmitReceive_DMA+0x1de>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8035066:	68fb      	ldr	r3, [r7, #12]
 8035068:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 803506c:	b29b      	uxth	r3, r3
 803506e:	3301      	adds	r3, #1
 8035070:	105b      	asrs	r3, r3, #1
 8035072:	b29a      	uxth	r2, r3
 8035074:	68fb      	ldr	r3, [r7, #12]
 8035076:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 803507a:	68fb      	ldr	r3, [r7, #12]
 803507c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 803507e:	699b      	ldr	r3, [r3, #24]
 8035080:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8035084:	d109      	bne.n	803509a <HAL_SPI_TransmitReceive_DMA+0x1fe>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8035086:	68fb      	ldr	r3, [r7, #12]
 8035088:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 803508c:	b29b      	uxth	r3, r3
 803508e:	3301      	adds	r3, #1
 8035090:	105b      	asrs	r3, r3, #1
 8035092:	b29a      	uxth	r2, r3
 8035094:	68fb      	ldr	r3, [r7, #12]
 8035096:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 803509a:	68fb      	ldr	r3, [r7, #12]
 803509c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80350a0:	b2db      	uxtb	r3, r3
 80350a2:	2b04      	cmp	r3, #4
 80350a4:	d108      	bne.n	80350b8 <HAL_SPI_TransmitReceive_DMA+0x21c>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80350a6:	68fb      	ldr	r3, [r7, #12]
 80350a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80350aa:	4a61      	ldr	r2, [pc, #388]	; (8035230 <HAL_SPI_TransmitReceive_DMA+0x394>)
 80350ac:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80350ae:	68fb      	ldr	r3, [r7, #12]
 80350b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80350b2:	4a60      	ldr	r2, [pc, #384]	; (8035234 <HAL_SPI_TransmitReceive_DMA+0x398>)
 80350b4:	63da      	str	r2, [r3, #60]	; 0x3c
 80350b6:	e007      	b.n	80350c8 <HAL_SPI_TransmitReceive_DMA+0x22c>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80350b8:	68fb      	ldr	r3, [r7, #12]
 80350ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80350bc:	4a5e      	ldr	r2, [pc, #376]	; (8035238 <HAL_SPI_TransmitReceive_DMA+0x39c>)
 80350be:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80350c0:	68fb      	ldr	r3, [r7, #12]
 80350c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80350c4:	4a5d      	ldr	r2, [pc, #372]	; (803523c <HAL_SPI_TransmitReceive_DMA+0x3a0>)
 80350c6:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80350c8:	68fb      	ldr	r3, [r7, #12]
 80350ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80350cc:	4a5c      	ldr	r2, [pc, #368]	; (8035240 <HAL_SPI_TransmitReceive_DMA+0x3a4>)
 80350ce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80350d0:	68fb      	ldr	r3, [r7, #12]
 80350d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80350d4:	2200      	movs	r2, #0
 80350d6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 80350d8:	68fb      	ldr	r3, [r7, #12]
 80350da:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80350dc:	68fb      	ldr	r3, [r7, #12]
 80350de:	681b      	ldr	r3, [r3, #0]
 80350e0:	3330      	adds	r3, #48	; 0x30
 80350e2:	4619      	mov	r1, r3
 80350e4:	68fb      	ldr	r3, [r7, #12]
 80350e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80350e8:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80350ea:	68fb      	ldr	r3, [r7, #12]
 80350ec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80350f0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 80350f2:	f7f8 f875 	bl	802d1e0 <HAL_DMA_Start_IT>
 80350f6:	4603      	mov	r3, r0
 80350f8:	2b00      	cmp	r3, #0
 80350fa:	d013      	beq.n	8035124 <HAL_SPI_TransmitReceive_DMA+0x288>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80350fc:	68fb      	ldr	r3, [r7, #12]
 80350fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8035102:	f043 0210 	orr.w	r2, r3, #16
 8035106:	68fb      	ldr	r3, [r7, #12]
 8035108:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 803510c:	68fb      	ldr	r3, [r7, #12]
 803510e:	2200      	movs	r2, #0
 8035110:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 8035114:	68fb      	ldr	r3, [r7, #12]
 8035116:	2201      	movs	r2, #1
 8035118:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 803511c:	2301      	movs	r3, #1
 803511e:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 8035120:	7dfb      	ldrb	r3, [r7, #23]
 8035122:	e080      	b.n	8035226 <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8035124:	68fb      	ldr	r3, [r7, #12]
 8035126:	681b      	ldr	r3, [r3, #0]
 8035128:	689a      	ldr	r2, [r3, #8]
 803512a:	68fb      	ldr	r3, [r7, #12]
 803512c:	681b      	ldr	r3, [r3, #0]
 803512e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8035132:	609a      	str	r2, [r3, #8]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8035134:	68fb      	ldr	r3, [r7, #12]
 8035136:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8035138:	2200      	movs	r2, #0
 803513a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 803513c:	68fb      	ldr	r3, [r7, #12]
 803513e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8035140:	2200      	movs	r2, #0
 8035142:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8035144:	68fb      	ldr	r3, [r7, #12]
 8035146:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8035148:	2200      	movs	r2, #0
 803514a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 803514c:	68fb      	ldr	r3, [r7, #12]
 803514e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8035150:	2200      	movs	r2, #0
 8035152:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8035154:	68fb      	ldr	r3, [r7, #12]
 8035156:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8035158:	68fb      	ldr	r3, [r7, #12]
 803515a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 803515c:	4619      	mov	r1, r3
 803515e:	68fb      	ldr	r3, [r7, #12]
 8035160:	681b      	ldr	r3, [r3, #0]
 8035162:	3320      	adds	r3, #32
 8035164:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8035166:	68fb      	ldr	r3, [r7, #12]
 8035168:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 803516c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 803516e:	f7f8 f837 	bl	802d1e0 <HAL_DMA_Start_IT>
 8035172:	4603      	mov	r3, r0
 8035174:	2b00      	cmp	r3, #0
 8035176:	d013      	beq.n	80351a0 <HAL_SPI_TransmitReceive_DMA+0x304>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8035178:	68fb      	ldr	r3, [r7, #12]
 803517a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 803517e:	f043 0210 	orr.w	r2, r3, #16
 8035182:	68fb      	ldr	r3, [r7, #12]
 8035184:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8035188:	68fb      	ldr	r3, [r7, #12]
 803518a:	2200      	movs	r2, #0
 803518c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 8035190:	68fb      	ldr	r3, [r7, #12]
 8035192:	2201      	movs	r2, #1
 8035194:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 8035198:	2301      	movs	r3, #1
 803519a:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 803519c:	7dfb      	ldrb	r3, [r7, #23]
 803519e:	e042      	b.n	8035226 <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 80351a0:	68fb      	ldr	r3, [r7, #12]
 80351a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80351a4:	69db      	ldr	r3, [r3, #28]
 80351a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80351aa:	d108      	bne.n	80351be <HAL_SPI_TransmitReceive_DMA+0x322>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 80351ac:	68fb      	ldr	r3, [r7, #12]
 80351ae:	681b      	ldr	r3, [r3, #0]
 80351b0:	6859      	ldr	r1, [r3, #4]
 80351b2:	68fb      	ldr	r3, [r7, #12]
 80351b4:	681a      	ldr	r2, [r3, #0]
 80351b6:	4b23      	ldr	r3, [pc, #140]	; (8035244 <HAL_SPI_TransmitReceive_DMA+0x3a8>)
 80351b8:	400b      	ands	r3, r1
 80351ba:	6053      	str	r3, [r2, #4]
 80351bc:	e009      	b.n	80351d2 <HAL_SPI_TransmitReceive_DMA+0x336>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80351be:	68fb      	ldr	r3, [r7, #12]
 80351c0:	681b      	ldr	r3, [r3, #0]
 80351c2:	685a      	ldr	r2, [r3, #4]
 80351c4:	4b1f      	ldr	r3, [pc, #124]	; (8035244 <HAL_SPI_TransmitReceive_DMA+0x3a8>)
 80351c6:	4013      	ands	r3, r2
 80351c8:	8879      	ldrh	r1, [r7, #2]
 80351ca:	68fa      	ldr	r2, [r7, #12]
 80351cc:	6812      	ldr	r2, [r2, #0]
 80351ce:	430b      	orrs	r3, r1
 80351d0:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 80351d2:	68fb      	ldr	r3, [r7, #12]
 80351d4:	681b      	ldr	r3, [r3, #0]
 80351d6:	689a      	ldr	r2, [r3, #8]
 80351d8:	68fb      	ldr	r3, [r7, #12]
 80351da:	681b      	ldr	r3, [r3, #0]
 80351dc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80351e0:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 80351e2:	68fb      	ldr	r3, [r7, #12]
 80351e4:	681b      	ldr	r3, [r3, #0]
 80351e6:	691a      	ldr	r2, [r3, #16]
 80351e8:	68fb      	ldr	r3, [r7, #12]
 80351ea:	681b      	ldr	r3, [r3, #0]
 80351ec:	f442 7258 	orr.w	r2, r2, #864	; 0x360
 80351f0:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80351f2:	68fb      	ldr	r3, [r7, #12]
 80351f4:	681b      	ldr	r3, [r3, #0]
 80351f6:	681a      	ldr	r2, [r3, #0]
 80351f8:	68fb      	ldr	r3, [r7, #12]
 80351fa:	681b      	ldr	r3, [r3, #0]
 80351fc:	f042 0201 	orr.w	r2, r2, #1
 8035200:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8035202:	68fb      	ldr	r3, [r7, #12]
 8035204:	685b      	ldr	r3, [r3, #4]
 8035206:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 803520a:	d107      	bne.n	803521c <HAL_SPI_TransmitReceive_DMA+0x380>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 803520c:	68fb      	ldr	r3, [r7, #12]
 803520e:	681b      	ldr	r3, [r3, #0]
 8035210:	681a      	ldr	r2, [r3, #0]
 8035212:	68fb      	ldr	r3, [r7, #12]
 8035214:	681b      	ldr	r3, [r3, #0]
 8035216:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 803521a:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 803521c:	68fb      	ldr	r3, [r7, #12]
 803521e:	2200      	movs	r2, #0
 8035220:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 8035224:	7dfb      	ldrb	r3, [r7, #23]
}
 8035226:	4618      	mov	r0, r3
 8035228:	3718      	adds	r7, #24
 803522a:	46bd      	mov	sp, r7
 803522c:	bd80      	pop	{r7, pc}
 803522e:	bf00      	nop
 8035230:	08035777 	.word	0x08035777
 8035234:	080356cf 	.word	0x080356cf
 8035238:	08035793 	.word	0x08035793
 803523c:	08035715 	.word	0x08035715
 8035240:	080357af 	.word	0x080357af
 8035244:	ffff0000 	.word	0xffff0000

08035248 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8035248:	b580      	push	{r7, lr}
 803524a:	b08a      	sub	sp, #40	; 0x28
 803524c:	af00      	add	r7, sp, #0
 803524e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8035250:	687b      	ldr	r3, [r7, #4]
 8035252:	681b      	ldr	r3, [r3, #0]
 8035254:	691b      	ldr	r3, [r3, #16]
 8035256:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8035258:	687b      	ldr	r3, [r7, #4]
 803525a:	681b      	ldr	r3, [r3, #0]
 803525c:	695b      	ldr	r3, [r3, #20]
 803525e:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8035260:	6a3a      	ldr	r2, [r7, #32]
 8035262:	69fb      	ldr	r3, [r7, #28]
 8035264:	4013      	ands	r3, r2
 8035266:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8035268:	687b      	ldr	r3, [r7, #4]
 803526a:	681b      	ldr	r3, [r3, #0]
 803526c:	689b      	ldr	r3, [r3, #8]
 803526e:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8035270:	2300      	movs	r3, #0
 8035272:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8035274:	687b      	ldr	r3, [r7, #4]
 8035276:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 803527a:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 803527c:	687b      	ldr	r3, [r7, #4]
 803527e:	681b      	ldr	r3, [r3, #0]
 8035280:	3330      	adds	r3, #48	; 0x30
 8035282:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8035284:	69bb      	ldr	r3, [r7, #24]
 8035286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 803528a:	2b00      	cmp	r3, #0
 803528c:	d113      	bne.n	80352b6 <HAL_SPI_IRQHandler+0x6e>
 803528e:	69bb      	ldr	r3, [r7, #24]
 8035290:	f003 0320 	and.w	r3, r3, #32
 8035294:	2b00      	cmp	r3, #0
 8035296:	d10e      	bne.n	80352b6 <HAL_SPI_IRQHandler+0x6e>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8035298:	69bb      	ldr	r3, [r7, #24]
 803529a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 803529e:	2b00      	cmp	r3, #0
 80352a0:	d009      	beq.n	80352b6 <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 80352a2:	687b      	ldr	r3, [r7, #4]
 80352a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80352a6:	6878      	ldr	r0, [r7, #4]
 80352a8:	4798      	blx	r3
    hspi->RxISR(hspi);
 80352aa:	687b      	ldr	r3, [r7, #4]
 80352ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80352ae:	6878      	ldr	r0, [r7, #4]
 80352b0:	4798      	blx	r3
    handled = 1UL;
 80352b2:	2301      	movs	r3, #1
 80352b4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80352b6:	69bb      	ldr	r3, [r7, #24]
 80352b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80352bc:	2b00      	cmp	r3, #0
 80352be:	d10f      	bne.n	80352e0 <HAL_SPI_IRQHandler+0x98>
 80352c0:	69bb      	ldr	r3, [r7, #24]
 80352c2:	f003 0301 	and.w	r3, r3, #1
 80352c6:	2b00      	cmp	r3, #0
 80352c8:	d00a      	beq.n	80352e0 <HAL_SPI_IRQHandler+0x98>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80352ca:	69bb      	ldr	r3, [r7, #24]
 80352cc:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80352d0:	2b00      	cmp	r3, #0
 80352d2:	d105      	bne.n	80352e0 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 80352d4:	687b      	ldr	r3, [r7, #4]
 80352d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80352d8:	6878      	ldr	r0, [r7, #4]
 80352da:	4798      	blx	r3
    handled = 1UL;
 80352dc:	2301      	movs	r3, #1
 80352de:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80352e0:	69bb      	ldr	r3, [r7, #24]
 80352e2:	f003 0320 	and.w	r3, r3, #32
 80352e6:	2b00      	cmp	r3, #0
 80352e8:	d10f      	bne.n	803530a <HAL_SPI_IRQHandler+0xc2>
 80352ea:	69bb      	ldr	r3, [r7, #24]
 80352ec:	f003 0302 	and.w	r3, r3, #2
 80352f0:	2b00      	cmp	r3, #0
 80352f2:	d00a      	beq.n	803530a <HAL_SPI_IRQHandler+0xc2>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80352f4:	69bb      	ldr	r3, [r7, #24]
 80352f6:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80352fa:	2b00      	cmp	r3, #0
 80352fc:	d105      	bne.n	803530a <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 80352fe:	687b      	ldr	r3, [r7, #4]
 8035300:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8035302:	6878      	ldr	r0, [r7, #4]
 8035304:	4798      	blx	r3
    handled = 1UL;
 8035306:	2301      	movs	r3, #1
 8035308:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 803530a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803530c:	2b00      	cmp	r3, #0
 803530e:	f040 815a 	bne.w	80355c6 <HAL_SPI_IRQHandler+0x37e>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8035312:	69bb      	ldr	r3, [r7, #24]
 8035314:	f003 0308 	and.w	r3, r3, #8
 8035318:	2b00      	cmp	r3, #0
 803531a:	f000 808b 	beq.w	8035434 <HAL_SPI_IRQHandler+0x1ec>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 803531e:	687b      	ldr	r3, [r7, #4]
 8035320:	681b      	ldr	r3, [r3, #0]
 8035322:	699a      	ldr	r2, [r3, #24]
 8035324:	687b      	ldr	r3, [r7, #4]
 8035326:	681b      	ldr	r3, [r3, #0]
 8035328:	f042 0208 	orr.w	r2, r2, #8
 803532c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 803532e:	687b      	ldr	r3, [r7, #4]
 8035330:	681b      	ldr	r3, [r3, #0]
 8035332:	699a      	ldr	r2, [r3, #24]
 8035334:	687b      	ldr	r3, [r7, #4]
 8035336:	681b      	ldr	r3, [r3, #0]
 8035338:	f042 0210 	orr.w	r2, r2, #16
 803533c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 803533e:	687b      	ldr	r3, [r7, #4]
 8035340:	681b      	ldr	r3, [r3, #0]
 8035342:	699a      	ldr	r2, [r3, #24]
 8035344:	687b      	ldr	r3, [r7, #4]
 8035346:	681b      	ldr	r3, [r3, #0]
 8035348:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 803534c:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 803534e:	687b      	ldr	r3, [r7, #4]
 8035350:	681b      	ldr	r3, [r3, #0]
 8035352:	691a      	ldr	r2, [r3, #16]
 8035354:	687b      	ldr	r3, [r7, #4]
 8035356:	681b      	ldr	r3, [r3, #0]
 8035358:	f022 0208 	bic.w	r2, r2, #8
 803535c:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 803535e:	687b      	ldr	r3, [r7, #4]
 8035360:	681b      	ldr	r3, [r3, #0]
 8035362:	689b      	ldr	r3, [r3, #8]
 8035364:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8035368:	2b00      	cmp	r3, #0
 803536a:	d13d      	bne.n	80353e8 <HAL_SPI_IRQHandler+0x1a0>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 803536c:	e036      	b.n	80353dc <HAL_SPI_IRQHandler+0x194>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 803536e:	687b      	ldr	r3, [r7, #4]
 8035370:	68db      	ldr	r3, [r3, #12]
 8035372:	2b0f      	cmp	r3, #15
 8035374:	d90b      	bls.n	803538e <HAL_SPI_IRQHandler+0x146>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8035376:	687b      	ldr	r3, [r7, #4]
 8035378:	681a      	ldr	r2, [r3, #0]
 803537a:	687b      	ldr	r3, [r7, #4]
 803537c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 803537e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8035380:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8035382:	687b      	ldr	r3, [r7, #4]
 8035384:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8035386:	1d1a      	adds	r2, r3, #4
 8035388:	687b      	ldr	r3, [r7, #4]
 803538a:	665a      	str	r2, [r3, #100]	; 0x64
 803538c:	e01d      	b.n	80353ca <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 803538e:	687b      	ldr	r3, [r7, #4]
 8035390:	68db      	ldr	r3, [r3, #12]
 8035392:	2b07      	cmp	r3, #7
 8035394:	d90b      	bls.n	80353ae <HAL_SPI_IRQHandler+0x166>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8035396:	687b      	ldr	r3, [r7, #4]
 8035398:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 803539a:	68fa      	ldr	r2, [r7, #12]
 803539c:	8812      	ldrh	r2, [r2, #0]
 803539e:	b292      	uxth	r2, r2
 80353a0:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80353a2:	687b      	ldr	r3, [r7, #4]
 80353a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80353a6:	1c9a      	adds	r2, r3, #2
 80353a8:	687b      	ldr	r3, [r7, #4]
 80353aa:	665a      	str	r2, [r3, #100]	; 0x64
 80353ac:	e00d      	b.n	80353ca <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80353ae:	687b      	ldr	r3, [r7, #4]
 80353b0:	681b      	ldr	r3, [r3, #0]
 80353b2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80353b6:	687b      	ldr	r3, [r7, #4]
 80353b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80353ba:	7812      	ldrb	r2, [r2, #0]
 80353bc:	b2d2      	uxtb	r2, r2
 80353be:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80353c0:	687b      	ldr	r3, [r7, #4]
 80353c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80353c4:	1c5a      	adds	r2, r3, #1
 80353c6:	687b      	ldr	r3, [r7, #4]
 80353c8:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 80353ca:	687b      	ldr	r3, [r7, #4]
 80353cc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80353d0:	b29b      	uxth	r3, r3
 80353d2:	3b01      	subs	r3, #1
 80353d4:	b29a      	uxth	r2, r3
 80353d6:	687b      	ldr	r3, [r7, #4]
 80353d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 80353dc:	687b      	ldr	r3, [r7, #4]
 80353de:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80353e2:	b29b      	uxth	r3, r3
 80353e4:	2b00      	cmp	r3, #0
 80353e6:	d1c2      	bne.n	803536e <HAL_SPI_IRQHandler+0x126>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 80353e8:	6878      	ldr	r0, [r7, #4]
 80353ea:	f000 fa1d 	bl	8035828 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 80353ee:	687b      	ldr	r3, [r7, #4]
 80353f0:	2201      	movs	r2, #1
 80353f2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80353f6:	687b      	ldr	r3, [r7, #4]
 80353f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80353fc:	2b00      	cmp	r3, #0
 80353fe:	d003      	beq.n	8035408 <HAL_SPI_IRQHandler+0x1c0>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8035400:	6878      	ldr	r0, [r7, #4]
 8035402:	f000 f929 	bl	8035658 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8035406:	e0e3      	b.n	80355d0 <HAL_SPI_IRQHandler+0x388>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8035408:	7cfb      	ldrb	r3, [r7, #19]
 803540a:	2b05      	cmp	r3, #5
 803540c:	d103      	bne.n	8035416 <HAL_SPI_IRQHandler+0x1ce>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 803540e:	6878      	ldr	r0, [r7, #4]
 8035410:	f000 f8fa 	bl	8035608 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8035414:	e0d9      	b.n	80355ca <HAL_SPI_IRQHandler+0x382>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8035416:	7cfb      	ldrb	r3, [r7, #19]
 8035418:	2b04      	cmp	r3, #4
 803541a:	d103      	bne.n	8035424 <HAL_SPI_IRQHandler+0x1dc>
      HAL_SPI_RxCpltCallback(hspi);
 803541c:	6878      	ldr	r0, [r7, #4]
 803541e:	f000 f8e9 	bl	80355f4 <HAL_SPI_RxCpltCallback>
    return;
 8035422:	e0d2      	b.n	80355ca <HAL_SPI_IRQHandler+0x382>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8035424:	7cfb      	ldrb	r3, [r7, #19]
 8035426:	2b03      	cmp	r3, #3
 8035428:	f040 80cf 	bne.w	80355ca <HAL_SPI_IRQHandler+0x382>
      HAL_SPI_TxCpltCallback(hspi);
 803542c:	6878      	ldr	r0, [r7, #4]
 803542e:	f000 f8d7 	bl	80355e0 <HAL_SPI_TxCpltCallback>
    return;
 8035432:	e0ca      	b.n	80355ca <HAL_SPI_IRQHandler+0x382>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8035434:	69fb      	ldr	r3, [r7, #28]
 8035436:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 803543a:	2b00      	cmp	r3, #0
 803543c:	d00d      	beq.n	803545a <HAL_SPI_IRQHandler+0x212>
 803543e:	6a3b      	ldr	r3, [r7, #32]
 8035440:	f003 0308 	and.w	r3, r3, #8
 8035444:	2b00      	cmp	r3, #0
 8035446:	d008      	beq.n	803545a <HAL_SPI_IRQHandler+0x212>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8035448:	687b      	ldr	r3, [r7, #4]
 803544a:	681b      	ldr	r3, [r3, #0]
 803544c:	699a      	ldr	r2, [r3, #24]
 803544e:	687b      	ldr	r3, [r7, #4]
 8035450:	681b      	ldr	r3, [r3, #0]
 8035452:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8035456:	619a      	str	r2, [r3, #24]

    return;
 8035458:	e0ba      	b.n	80355d0 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 803545a:	69bb      	ldr	r3, [r7, #24]
 803545c:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8035460:	2b00      	cmp	r3, #0
 8035462:	f000 80b5 	beq.w	80355d0 <HAL_SPI_IRQHandler+0x388>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8035466:	69bb      	ldr	r3, [r7, #24]
 8035468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 803546c:	2b00      	cmp	r3, #0
 803546e:	d00f      	beq.n	8035490 <HAL_SPI_IRQHandler+0x248>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8035470:	687b      	ldr	r3, [r7, #4]
 8035472:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8035476:	f043 0204 	orr.w	r2, r3, #4
 803547a:	687b      	ldr	r3, [r7, #4]
 803547c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8035480:	687b      	ldr	r3, [r7, #4]
 8035482:	681b      	ldr	r3, [r3, #0]
 8035484:	699a      	ldr	r2, [r3, #24]
 8035486:	687b      	ldr	r3, [r7, #4]
 8035488:	681b      	ldr	r3, [r3, #0]
 803548a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 803548e:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8035490:	69bb      	ldr	r3, [r7, #24]
 8035492:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8035496:	2b00      	cmp	r3, #0
 8035498:	d00f      	beq.n	80354ba <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 803549a:	687b      	ldr	r3, [r7, #4]
 803549c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80354a0:	f043 0201 	orr.w	r2, r3, #1
 80354a4:	687b      	ldr	r3, [r7, #4]
 80354a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80354aa:	687b      	ldr	r3, [r7, #4]
 80354ac:	681b      	ldr	r3, [r3, #0]
 80354ae:	699a      	ldr	r2, [r3, #24]
 80354b0:	687b      	ldr	r3, [r7, #4]
 80354b2:	681b      	ldr	r3, [r3, #0]
 80354b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80354b8:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 80354ba:	69bb      	ldr	r3, [r7, #24]
 80354bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80354c0:	2b00      	cmp	r3, #0
 80354c2:	d00f      	beq.n	80354e4 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80354c4:	687b      	ldr	r3, [r7, #4]
 80354c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80354ca:	f043 0208 	orr.w	r2, r3, #8
 80354ce:	687b      	ldr	r3, [r7, #4]
 80354d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80354d4:	687b      	ldr	r3, [r7, #4]
 80354d6:	681b      	ldr	r3, [r3, #0]
 80354d8:	699a      	ldr	r2, [r3, #24]
 80354da:	687b      	ldr	r3, [r7, #4]
 80354dc:	681b      	ldr	r3, [r3, #0]
 80354de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80354e2:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 80354e4:	69bb      	ldr	r3, [r7, #24]
 80354e6:	f003 0320 	and.w	r3, r3, #32
 80354ea:	2b00      	cmp	r3, #0
 80354ec:	d00f      	beq.n	803550e <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80354ee:	687b      	ldr	r3, [r7, #4]
 80354f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80354f4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80354f8:	687b      	ldr	r3, [r7, #4]
 80354fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80354fe:	687b      	ldr	r3, [r7, #4]
 8035500:	681b      	ldr	r3, [r3, #0]
 8035502:	699a      	ldr	r2, [r3, #24]
 8035504:	687b      	ldr	r3, [r7, #4]
 8035506:	681b      	ldr	r3, [r3, #0]
 8035508:	f042 0220 	orr.w	r2, r2, #32
 803550c:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 803550e:	687b      	ldr	r3, [r7, #4]
 8035510:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8035514:	2b00      	cmp	r3, #0
 8035516:	d05a      	beq.n	80355ce <HAL_SPI_IRQHandler+0x386>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8035518:	687b      	ldr	r3, [r7, #4]
 803551a:	681b      	ldr	r3, [r3, #0]
 803551c:	681a      	ldr	r2, [r3, #0]
 803551e:	687b      	ldr	r3, [r7, #4]
 8035520:	681b      	ldr	r3, [r3, #0]
 8035522:	f022 0201 	bic.w	r2, r2, #1
 8035526:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8035528:	687b      	ldr	r3, [r7, #4]
 803552a:	681b      	ldr	r3, [r3, #0]
 803552c:	6919      	ldr	r1, [r3, #16]
 803552e:	687b      	ldr	r3, [r7, #4]
 8035530:	681a      	ldr	r2, [r3, #0]
 8035532:	4b29      	ldr	r3, [pc, #164]	; (80355d8 <HAL_SPI_IRQHandler+0x390>)
 8035534:	400b      	ands	r3, r1
 8035536:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8035538:	697b      	ldr	r3, [r7, #20]
 803553a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 803553e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8035542:	d138      	bne.n	80355b6 <HAL_SPI_IRQHandler+0x36e>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8035544:	687b      	ldr	r3, [r7, #4]
 8035546:	681b      	ldr	r3, [r3, #0]
 8035548:	689a      	ldr	r2, [r3, #8]
 803554a:	687b      	ldr	r3, [r7, #4]
 803554c:	681b      	ldr	r3, [r3, #0]
 803554e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8035552:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8035554:	687b      	ldr	r3, [r7, #4]
 8035556:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8035558:	2b00      	cmp	r3, #0
 803555a:	d013      	beq.n	8035584 <HAL_SPI_IRQHandler+0x33c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 803555c:	687b      	ldr	r3, [r7, #4]
 803555e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8035560:	4a1e      	ldr	r2, [pc, #120]	; (80355dc <HAL_SPI_IRQHandler+0x394>)
 8035562:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8035564:	687b      	ldr	r3, [r7, #4]
 8035566:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8035568:	4618      	mov	r0, r3
 803556a:	f7f8 fbc1 	bl	802dcf0 <HAL_DMA_Abort_IT>
 803556e:	4603      	mov	r3, r0
 8035570:	2b00      	cmp	r3, #0
 8035572:	d007      	beq.n	8035584 <HAL_SPI_IRQHandler+0x33c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8035574:	687b      	ldr	r3, [r7, #4]
 8035576:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 803557a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 803557e:	687b      	ldr	r3, [r7, #4]
 8035580:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8035584:	687b      	ldr	r3, [r7, #4]
 8035586:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8035588:	2b00      	cmp	r3, #0
 803558a:	d020      	beq.n	80355ce <HAL_SPI_IRQHandler+0x386>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 803558c:	687b      	ldr	r3, [r7, #4]
 803558e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8035590:	4a12      	ldr	r2, [pc, #72]	; (80355dc <HAL_SPI_IRQHandler+0x394>)
 8035592:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8035594:	687b      	ldr	r3, [r7, #4]
 8035596:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8035598:	4618      	mov	r0, r3
 803559a:	f7f8 fba9 	bl	802dcf0 <HAL_DMA_Abort_IT>
 803559e:	4603      	mov	r3, r0
 80355a0:	2b00      	cmp	r3, #0
 80355a2:	d014      	beq.n	80355ce <HAL_SPI_IRQHandler+0x386>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80355a4:	687b      	ldr	r3, [r7, #4]
 80355a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80355aa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80355ae:	687b      	ldr	r3, [r7, #4]
 80355b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80355b4:	e00b      	b.n	80355ce <HAL_SPI_IRQHandler+0x386>
        hspi->State = HAL_SPI_STATE_READY;
 80355b6:	687b      	ldr	r3, [r7, #4]
 80355b8:	2201      	movs	r2, #1
 80355ba:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 80355be:	6878      	ldr	r0, [r7, #4]
 80355c0:	f000 f84a 	bl	8035658 <HAL_SPI_ErrorCallback>
    return;
 80355c4:	e003      	b.n	80355ce <HAL_SPI_IRQHandler+0x386>
    return;
 80355c6:	bf00      	nop
 80355c8:	e002      	b.n	80355d0 <HAL_SPI_IRQHandler+0x388>
    return;
 80355ca:	bf00      	nop
 80355cc:	e000      	b.n	80355d0 <HAL_SPI_IRQHandler+0x388>
    return;
 80355ce:	bf00      	nop
  }
}
 80355d0:	3728      	adds	r7, #40	; 0x28
 80355d2:	46bd      	mov	sp, r7
 80355d4:	bd80      	pop	{r7, pc}
 80355d6:	bf00      	nop
 80355d8:	fffffc94 	.word	0xfffffc94
 80355dc:	080357f5 	.word	0x080357f5

080355e0 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80355e0:	b480      	push	{r7}
 80355e2:	b083      	sub	sp, #12
 80355e4:	af00      	add	r7, sp, #0
 80355e6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80355e8:	bf00      	nop
 80355ea:	370c      	adds	r7, #12
 80355ec:	46bd      	mov	sp, r7
 80355ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80355f2:	4770      	bx	lr

080355f4 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80355f4:	b480      	push	{r7}
 80355f6:	b083      	sub	sp, #12
 80355f8:	af00      	add	r7, sp, #0
 80355fa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80355fc:	bf00      	nop
 80355fe:	370c      	adds	r7, #12
 8035600:	46bd      	mov	sp, r7
 8035602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8035606:	4770      	bx	lr

08035608 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8035608:	b480      	push	{r7}
 803560a:	b083      	sub	sp, #12
 803560c:	af00      	add	r7, sp, #0
 803560e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8035610:	bf00      	nop
 8035612:	370c      	adds	r7, #12
 8035614:	46bd      	mov	sp, r7
 8035616:	f85d 7b04 	ldr.w	r7, [sp], #4
 803561a:	4770      	bx	lr

0803561c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 803561c:	b480      	push	{r7}
 803561e:	b083      	sub	sp, #12
 8035620:	af00      	add	r7, sp, #0
 8035622:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8035624:	bf00      	nop
 8035626:	370c      	adds	r7, #12
 8035628:	46bd      	mov	sp, r7
 803562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803562e:	4770      	bx	lr

08035630 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8035630:	b480      	push	{r7}
 8035632:	b083      	sub	sp, #12
 8035634:	af00      	add	r7, sp, #0
 8035636:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8035638:	bf00      	nop
 803563a:	370c      	adds	r7, #12
 803563c:	46bd      	mov	sp, r7
 803563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8035642:	4770      	bx	lr

08035644 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8035644:	b480      	push	{r7}
 8035646:	b083      	sub	sp, #12
 8035648:	af00      	add	r7, sp, #0
 803564a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 803564c:	bf00      	nop
 803564e:	370c      	adds	r7, #12
 8035650:	46bd      	mov	sp, r7
 8035652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8035656:	4770      	bx	lr

08035658 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8035658:	b480      	push	{r7}
 803565a:	b083      	sub	sp, #12
 803565c:	af00      	add	r7, sp, #0
 803565e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8035660:	bf00      	nop
 8035662:	370c      	adds	r7, #12
 8035664:	46bd      	mov	sp, r7
 8035666:	f85d 7b04 	ldr.w	r7, [sp], #4
 803566a:	4770      	bx	lr

0803566c <HAL_SPI_GetState>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 803566c:	b480      	push	{r7}
 803566e:	b083      	sub	sp, #12
 8035670:	af00      	add	r7, sp, #0
 8035672:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8035674:	687b      	ldr	r3, [r7, #4]
 8035676:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 803567a:	b2db      	uxtb	r3, r3
}
 803567c:	4618      	mov	r0, r3
 803567e:	370c      	adds	r7, #12
 8035680:	46bd      	mov	sp, r7
 8035682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8035686:	4770      	bx	lr

08035688 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8035688:	b580      	push	{r7, lr}
 803568a:	b084      	sub	sp, #16
 803568c:	af00      	add	r7, sp, #0
 803568e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8035690:	687b      	ldr	r3, [r7, #4]
 8035692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8035694:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8035696:	68fb      	ldr	r3, [r7, #12]
 8035698:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 803569c:	b2db      	uxtb	r3, r3
 803569e:	2b07      	cmp	r3, #7
 80356a0:	d011      	beq.n	80356c6 <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 80356a2:	68fb      	ldr	r3, [r7, #12]
 80356a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80356a6:	69db      	ldr	r3, [r3, #28]
 80356a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80356ac:	d103      	bne.n	80356b6 <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 80356ae:	68f8      	ldr	r0, [r7, #12]
 80356b0:	f7ff ff96 	bl	80355e0 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 80356b4:	e007      	b.n	80356c6 <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 80356b6:	68fb      	ldr	r3, [r7, #12]
 80356b8:	681b      	ldr	r3, [r3, #0]
 80356ba:	691a      	ldr	r2, [r3, #16]
 80356bc:	68fb      	ldr	r3, [r7, #12]
 80356be:	681b      	ldr	r3, [r3, #0]
 80356c0:	f042 0208 	orr.w	r2, r2, #8
 80356c4:	611a      	str	r2, [r3, #16]
}
 80356c6:	bf00      	nop
 80356c8:	3710      	adds	r7, #16
 80356ca:	46bd      	mov	sp, r7
 80356cc:	bd80      	pop	{r7, pc}

080356ce <SPI_DMAReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80356ce:	b580      	push	{r7, lr}
 80356d0:	b084      	sub	sp, #16
 80356d2:	af00      	add	r7, sp, #0
 80356d4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80356d6:	687b      	ldr	r3, [r7, #4]
 80356d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80356da:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 80356dc:	68fb      	ldr	r3, [r7, #12]
 80356de:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80356e2:	b2db      	uxtb	r3, r3
 80356e4:	2b07      	cmp	r3, #7
 80356e6:	d011      	beq.n	803570c <SPI_DMAReceiveCplt+0x3e>
  {
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 80356e8:	68fb      	ldr	r3, [r7, #12]
 80356ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80356ec:	69db      	ldr	r3, [r3, #28]
 80356ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80356f2:	d103      	bne.n	80356fc <SPI_DMAReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 80356f4:	68f8      	ldr	r0, [r7, #12]
 80356f6:	f7ff ff7d 	bl	80355f4 <HAL_SPI_RxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 80356fa:	e007      	b.n	803570c <SPI_DMAReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 80356fc:	68fb      	ldr	r3, [r7, #12]
 80356fe:	681b      	ldr	r3, [r3, #0]
 8035700:	691a      	ldr	r2, [r3, #16]
 8035702:	68fb      	ldr	r3, [r7, #12]
 8035704:	681b      	ldr	r3, [r3, #0]
 8035706:	f042 0208 	orr.w	r2, r2, #8
 803570a:	611a      	str	r2, [r3, #16]
}
 803570c:	bf00      	nop
 803570e:	3710      	adds	r7, #16
 8035710:	46bd      	mov	sp, r7
 8035712:	bd80      	pop	{r7, pc}

08035714 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8035714:	b580      	push	{r7, lr}
 8035716:	b084      	sub	sp, #16
 8035718:	af00      	add	r7, sp, #0
 803571a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 803571c:	687b      	ldr	r3, [r7, #4]
 803571e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8035720:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8035722:	68fb      	ldr	r3, [r7, #12]
 8035724:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8035728:	b2db      	uxtb	r3, r3
 803572a:	2b07      	cmp	r3, #7
 803572c:	d011      	beq.n	8035752 <SPI_DMATransmitReceiveCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 803572e:	68fb      	ldr	r3, [r7, #12]
 8035730:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8035732:	69db      	ldr	r3, [r3, #28]
 8035734:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8035738:	d103      	bne.n	8035742 <SPI_DMATransmitReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxRxCpltCallback(hspi);
#else
      HAL_SPI_TxRxCpltCallback(hspi);
 803573a:	68f8      	ldr	r0, [r7, #12]
 803573c:	f7ff ff64 	bl	8035608 <HAL_SPI_TxRxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8035740:	e007      	b.n	8035752 <SPI_DMATransmitReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8035742:	68fb      	ldr	r3, [r7, #12]
 8035744:	681b      	ldr	r3, [r3, #0]
 8035746:	691a      	ldr	r2, [r3, #16]
 8035748:	68fb      	ldr	r3, [r7, #12]
 803574a:	681b      	ldr	r3, [r3, #0]
 803574c:	f042 0208 	orr.w	r2, r2, #8
 8035750:	611a      	str	r2, [r3, #16]
}
 8035752:	bf00      	nop
 8035754:	3710      	adds	r7, #16
 8035756:	46bd      	mov	sp, r7
 8035758:	bd80      	pop	{r7, pc}

0803575a <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 803575a:	b580      	push	{r7, lr}
 803575c:	b084      	sub	sp, #16
 803575e:	af00      	add	r7, sp, #0
 8035760:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8035762:	687b      	ldr	r3, [r7, #4]
 8035764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8035766:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8035768:	68f8      	ldr	r0, [r7, #12]
 803576a:	f7ff ff57 	bl	803561c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 803576e:	bf00      	nop
 8035770:	3710      	adds	r7, #16
 8035772:	46bd      	mov	sp, r7
 8035774:	bd80      	pop	{r7, pc}

08035776 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8035776:	b580      	push	{r7, lr}
 8035778:	b084      	sub	sp, #16
 803577a:	af00      	add	r7, sp, #0
 803577c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 803577e:	687b      	ldr	r3, [r7, #4]
 8035780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8035782:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8035784:	68f8      	ldr	r0, [r7, #12]
 8035786:	f7ff ff53 	bl	8035630 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 803578a:	bf00      	nop
 803578c:	3710      	adds	r7, #16
 803578e:	46bd      	mov	sp, r7
 8035790:	bd80      	pop	{r7, pc}

08035792 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8035792:	b580      	push	{r7, lr}
 8035794:	b084      	sub	sp, #16
 8035796:	af00      	add	r7, sp, #0
 8035798:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 803579a:	687b      	ldr	r3, [r7, #4]
 803579c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 803579e:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80357a0:	68f8      	ldr	r0, [r7, #12]
 80357a2:	f7ff ff4f 	bl	8035644 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80357a6:	bf00      	nop
 80357a8:	3710      	adds	r7, #16
 80357aa:	46bd      	mov	sp, r7
 80357ac:	bd80      	pop	{r7, pc}

080357ae <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80357ae:	b580      	push	{r7, lr}
 80357b0:	b084      	sub	sp, #16
 80357b2:	af00      	add	r7, sp, #0
 80357b4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80357b6:	687b      	ldr	r3, [r7, #4]
 80357b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80357ba:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80357bc:	6878      	ldr	r0, [r7, #4]
 80357be:	f7f9 fc15 	bl	802efec <HAL_DMA_GetError>
 80357c2:	4603      	mov	r3, r0
 80357c4:	2b02      	cmp	r3, #2
 80357c6:	d011      	beq.n	80357ec <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 80357c8:	68f8      	ldr	r0, [r7, #12]
 80357ca:	f000 f82d 	bl	8035828 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80357ce:	68fb      	ldr	r3, [r7, #12]
 80357d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80357d4:	f043 0210 	orr.w	r2, r3, #16
 80357d8:	68fb      	ldr	r3, [r7, #12]
 80357da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 80357de:	68fb      	ldr	r3, [r7, #12]
 80357e0:	2201      	movs	r2, #1
 80357e2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80357e6:	68f8      	ldr	r0, [r7, #12]
 80357e8:	f7ff ff36 	bl	8035658 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80357ec:	bf00      	nop
 80357ee:	3710      	adds	r7, #16
 80357f0:	46bd      	mov	sp, r7
 80357f2:	bd80      	pop	{r7, pc}

080357f4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80357f4:	b580      	push	{r7, lr}
 80357f6:	b084      	sub	sp, #16
 80357f8:	af00      	add	r7, sp, #0
 80357fa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80357fc:	687b      	ldr	r3, [r7, #4]
 80357fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8035800:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8035802:	68fb      	ldr	r3, [r7, #12]
 8035804:	2200      	movs	r2, #0
 8035806:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 803580a:	68fb      	ldr	r3, [r7, #12]
 803580c:	2200      	movs	r2, #0
 803580e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8035812:	68fb      	ldr	r3, [r7, #12]
 8035814:	2201      	movs	r2, #1
 8035816:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 803581a:	68f8      	ldr	r0, [r7, #12]
 803581c:	f7ff ff1c 	bl	8035658 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8035820:	bf00      	nop
 8035822:	3710      	adds	r7, #16
 8035824:	46bd      	mov	sp, r7
 8035826:	bd80      	pop	{r7, pc}

08035828 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8035828:	b480      	push	{r7}
 803582a:	b085      	sub	sp, #20
 803582c:	af00      	add	r7, sp, #0
 803582e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8035830:	687b      	ldr	r3, [r7, #4]
 8035832:	681b      	ldr	r3, [r3, #0]
 8035834:	695b      	ldr	r3, [r3, #20]
 8035836:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8035838:	687b      	ldr	r3, [r7, #4]
 803583a:	681b      	ldr	r3, [r3, #0]
 803583c:	699a      	ldr	r2, [r3, #24]
 803583e:	687b      	ldr	r3, [r7, #4]
 8035840:	681b      	ldr	r3, [r3, #0]
 8035842:	f042 0208 	orr.w	r2, r2, #8
 8035846:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8035848:	687b      	ldr	r3, [r7, #4]
 803584a:	681b      	ldr	r3, [r3, #0]
 803584c:	699a      	ldr	r2, [r3, #24]
 803584e:	687b      	ldr	r3, [r7, #4]
 8035850:	681b      	ldr	r3, [r3, #0]
 8035852:	f042 0210 	orr.w	r2, r2, #16
 8035856:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8035858:	687b      	ldr	r3, [r7, #4]
 803585a:	681b      	ldr	r3, [r3, #0]
 803585c:	681a      	ldr	r2, [r3, #0]
 803585e:	687b      	ldr	r3, [r7, #4]
 8035860:	681b      	ldr	r3, [r3, #0]
 8035862:	f022 0201 	bic.w	r2, r2, #1
 8035866:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8035868:	687b      	ldr	r3, [r7, #4]
 803586a:	681b      	ldr	r3, [r3, #0]
 803586c:	6919      	ldr	r1, [r3, #16]
 803586e:	687b      	ldr	r3, [r7, #4]
 8035870:	681a      	ldr	r2, [r3, #0]
 8035872:	4b3c      	ldr	r3, [pc, #240]	; (8035964 <SPI_CloseTransfer+0x13c>)
 8035874:	400b      	ands	r3, r1
 8035876:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8035878:	687b      	ldr	r3, [r7, #4]
 803587a:	681b      	ldr	r3, [r3, #0]
 803587c:	689a      	ldr	r2, [r3, #8]
 803587e:	687b      	ldr	r3, [r7, #4]
 8035880:	681b      	ldr	r3, [r3, #0]
 8035882:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8035886:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8035888:	687b      	ldr	r3, [r7, #4]
 803588a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 803588e:	b2db      	uxtb	r3, r3
 8035890:	2b04      	cmp	r3, #4
 8035892:	d014      	beq.n	80358be <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8035894:	68fb      	ldr	r3, [r7, #12]
 8035896:	f003 0320 	and.w	r3, r3, #32
 803589a:	2b00      	cmp	r3, #0
 803589c:	d00f      	beq.n	80358be <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 803589e:	687b      	ldr	r3, [r7, #4]
 80358a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80358a4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80358a8:	687b      	ldr	r3, [r7, #4]
 80358aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80358ae:	687b      	ldr	r3, [r7, #4]
 80358b0:	681b      	ldr	r3, [r3, #0]
 80358b2:	699a      	ldr	r2, [r3, #24]
 80358b4:	687b      	ldr	r3, [r7, #4]
 80358b6:	681b      	ldr	r3, [r3, #0]
 80358b8:	f042 0220 	orr.w	r2, r2, #32
 80358bc:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80358be:	687b      	ldr	r3, [r7, #4]
 80358c0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80358c4:	b2db      	uxtb	r3, r3
 80358c6:	2b03      	cmp	r3, #3
 80358c8:	d014      	beq.n	80358f4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80358ca:	68fb      	ldr	r3, [r7, #12]
 80358cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80358d0:	2b00      	cmp	r3, #0
 80358d2:	d00f      	beq.n	80358f4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80358d4:	687b      	ldr	r3, [r7, #4]
 80358d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80358da:	f043 0204 	orr.w	r2, r3, #4
 80358de:	687b      	ldr	r3, [r7, #4]
 80358e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80358e4:	687b      	ldr	r3, [r7, #4]
 80358e6:	681b      	ldr	r3, [r3, #0]
 80358e8:	699a      	ldr	r2, [r3, #24]
 80358ea:	687b      	ldr	r3, [r7, #4]
 80358ec:	681b      	ldr	r3, [r3, #0]
 80358ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80358f2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80358f4:	68fb      	ldr	r3, [r7, #12]
 80358f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80358fa:	2b00      	cmp	r3, #0
 80358fc:	d00f      	beq.n	803591e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80358fe:	687b      	ldr	r3, [r7, #4]
 8035900:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8035904:	f043 0201 	orr.w	r2, r3, #1
 8035908:	687b      	ldr	r3, [r7, #4]
 803590a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 803590e:	687b      	ldr	r3, [r7, #4]
 8035910:	681b      	ldr	r3, [r3, #0]
 8035912:	699a      	ldr	r2, [r3, #24]
 8035914:	687b      	ldr	r3, [r7, #4]
 8035916:	681b      	ldr	r3, [r3, #0]
 8035918:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 803591c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 803591e:	68fb      	ldr	r3, [r7, #12]
 8035920:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8035924:	2b00      	cmp	r3, #0
 8035926:	d00f      	beq.n	8035948 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8035928:	687b      	ldr	r3, [r7, #4]
 803592a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 803592e:	f043 0208 	orr.w	r2, r3, #8
 8035932:	687b      	ldr	r3, [r7, #4]
 8035934:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8035938:	687b      	ldr	r3, [r7, #4]
 803593a:	681b      	ldr	r3, [r3, #0]
 803593c:	699a      	ldr	r2, [r3, #24]
 803593e:	687b      	ldr	r3, [r7, #4]
 8035940:	681b      	ldr	r3, [r3, #0]
 8035942:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8035946:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8035948:	687b      	ldr	r3, [r7, #4]
 803594a:	2200      	movs	r2, #0
 803594c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8035950:	687b      	ldr	r3, [r7, #4]
 8035952:	2200      	movs	r2, #0
 8035954:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8035958:	bf00      	nop
 803595a:	3714      	adds	r7, #20
 803595c:	46bd      	mov	sp, r7
 803595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8035962:	4770      	bx	lr
 8035964:	fffffc90 	.word	0xfffffc90

08035968 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8035968:	b480      	push	{r7}
 803596a:	b085      	sub	sp, #20
 803596c:	af00      	add	r7, sp, #0
 803596e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8035970:	687b      	ldr	r3, [r7, #4]
 8035972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8035974:	095b      	lsrs	r3, r3, #5
 8035976:	3301      	adds	r3, #1
 8035978:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 803597a:	687b      	ldr	r3, [r7, #4]
 803597c:	68db      	ldr	r3, [r3, #12]
 803597e:	3301      	adds	r3, #1
 8035980:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8035982:	68bb      	ldr	r3, [r7, #8]
 8035984:	3307      	adds	r3, #7
 8035986:	08db      	lsrs	r3, r3, #3
 8035988:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 803598a:	68bb      	ldr	r3, [r7, #8]
 803598c:	68fa      	ldr	r2, [r7, #12]
 803598e:	fb02 f303 	mul.w	r3, r2, r3
}
 8035992:	4618      	mov	r0, r3
 8035994:	3714      	adds	r7, #20
 8035996:	46bd      	mov	sp, r7
 8035998:	f85d 7b04 	ldr.w	r7, [sp], #4
 803599c:	4770      	bx	lr

0803599e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 803599e:	b580      	push	{r7, lr}
 80359a0:	b082      	sub	sp, #8
 80359a2:	af00      	add	r7, sp, #0
 80359a4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80359a6:	687b      	ldr	r3, [r7, #4]
 80359a8:	2b00      	cmp	r3, #0
 80359aa:	d101      	bne.n	80359b0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80359ac:	2301      	movs	r3, #1
 80359ae:	e049      	b.n	8035a44 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80359b0:	687b      	ldr	r3, [r7, #4]
 80359b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80359b6:	b2db      	uxtb	r3, r3
 80359b8:	2b00      	cmp	r3, #0
 80359ba:	d106      	bne.n	80359ca <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80359bc:	687b      	ldr	r3, [r7, #4]
 80359be:	2200      	movs	r2, #0
 80359c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80359c4:	6878      	ldr	r0, [r7, #4]
 80359c6:	f7f5 ff5b 	bl	802b880 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80359ca:	687b      	ldr	r3, [r7, #4]
 80359cc:	2202      	movs	r2, #2
 80359ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80359d2:	687b      	ldr	r3, [r7, #4]
 80359d4:	681a      	ldr	r2, [r3, #0]
 80359d6:	687b      	ldr	r3, [r7, #4]
 80359d8:	3304      	adds	r3, #4
 80359da:	4619      	mov	r1, r3
 80359dc:	4610      	mov	r0, r2
 80359de:	f000 faed 	bl	8035fbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80359e2:	687b      	ldr	r3, [r7, #4]
 80359e4:	2201      	movs	r2, #1
 80359e6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80359ea:	687b      	ldr	r3, [r7, #4]
 80359ec:	2201      	movs	r2, #1
 80359ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80359f2:	687b      	ldr	r3, [r7, #4]
 80359f4:	2201      	movs	r2, #1
 80359f6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80359fa:	687b      	ldr	r3, [r7, #4]
 80359fc:	2201      	movs	r2, #1
 80359fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8035a02:	687b      	ldr	r3, [r7, #4]
 8035a04:	2201      	movs	r2, #1
 8035a06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8035a0a:	687b      	ldr	r3, [r7, #4]
 8035a0c:	2201      	movs	r2, #1
 8035a0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8035a12:	687b      	ldr	r3, [r7, #4]
 8035a14:	2201      	movs	r2, #1
 8035a16:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8035a1a:	687b      	ldr	r3, [r7, #4]
 8035a1c:	2201      	movs	r2, #1
 8035a1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8035a22:	687b      	ldr	r3, [r7, #4]
 8035a24:	2201      	movs	r2, #1
 8035a26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8035a2a:	687b      	ldr	r3, [r7, #4]
 8035a2c:	2201      	movs	r2, #1
 8035a2e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8035a32:	687b      	ldr	r3, [r7, #4]
 8035a34:	2201      	movs	r2, #1
 8035a36:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8035a3a:	687b      	ldr	r3, [r7, #4]
 8035a3c:	2201      	movs	r2, #1
 8035a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8035a42:	2300      	movs	r3, #0
}
 8035a44:	4618      	mov	r0, r3
 8035a46:	3708      	adds	r7, #8
 8035a48:	46bd      	mov	sp, r7
 8035a4a:	bd80      	pop	{r7, pc}

08035a4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8035a4c:	b480      	push	{r7}
 8035a4e:	b085      	sub	sp, #20
 8035a50:	af00      	add	r7, sp, #0
 8035a52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8035a54:	687b      	ldr	r3, [r7, #4]
 8035a56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8035a5a:	b2db      	uxtb	r3, r3
 8035a5c:	2b01      	cmp	r3, #1
 8035a5e:	d001      	beq.n	8035a64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8035a60:	2301      	movs	r3, #1
 8035a62:	e054      	b.n	8035b0e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8035a64:	687b      	ldr	r3, [r7, #4]
 8035a66:	2202      	movs	r2, #2
 8035a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8035a6c:	687b      	ldr	r3, [r7, #4]
 8035a6e:	681b      	ldr	r3, [r3, #0]
 8035a70:	68da      	ldr	r2, [r3, #12]
 8035a72:	687b      	ldr	r3, [r7, #4]
 8035a74:	681b      	ldr	r3, [r3, #0]
 8035a76:	f042 0201 	orr.w	r2, r2, #1
 8035a7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8035a7c:	687b      	ldr	r3, [r7, #4]
 8035a7e:	681b      	ldr	r3, [r3, #0]
 8035a80:	4a26      	ldr	r2, [pc, #152]	; (8035b1c <HAL_TIM_Base_Start_IT+0xd0>)
 8035a82:	4293      	cmp	r3, r2
 8035a84:	d022      	beq.n	8035acc <HAL_TIM_Base_Start_IT+0x80>
 8035a86:	687b      	ldr	r3, [r7, #4]
 8035a88:	681b      	ldr	r3, [r3, #0]
 8035a8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8035a8e:	d01d      	beq.n	8035acc <HAL_TIM_Base_Start_IT+0x80>
 8035a90:	687b      	ldr	r3, [r7, #4]
 8035a92:	681b      	ldr	r3, [r3, #0]
 8035a94:	4a22      	ldr	r2, [pc, #136]	; (8035b20 <HAL_TIM_Base_Start_IT+0xd4>)
 8035a96:	4293      	cmp	r3, r2
 8035a98:	d018      	beq.n	8035acc <HAL_TIM_Base_Start_IT+0x80>
 8035a9a:	687b      	ldr	r3, [r7, #4]
 8035a9c:	681b      	ldr	r3, [r3, #0]
 8035a9e:	4a21      	ldr	r2, [pc, #132]	; (8035b24 <HAL_TIM_Base_Start_IT+0xd8>)
 8035aa0:	4293      	cmp	r3, r2
 8035aa2:	d013      	beq.n	8035acc <HAL_TIM_Base_Start_IT+0x80>
 8035aa4:	687b      	ldr	r3, [r7, #4]
 8035aa6:	681b      	ldr	r3, [r3, #0]
 8035aa8:	4a1f      	ldr	r2, [pc, #124]	; (8035b28 <HAL_TIM_Base_Start_IT+0xdc>)
 8035aaa:	4293      	cmp	r3, r2
 8035aac:	d00e      	beq.n	8035acc <HAL_TIM_Base_Start_IT+0x80>
 8035aae:	687b      	ldr	r3, [r7, #4]
 8035ab0:	681b      	ldr	r3, [r3, #0]
 8035ab2:	4a1e      	ldr	r2, [pc, #120]	; (8035b2c <HAL_TIM_Base_Start_IT+0xe0>)
 8035ab4:	4293      	cmp	r3, r2
 8035ab6:	d009      	beq.n	8035acc <HAL_TIM_Base_Start_IT+0x80>
 8035ab8:	687b      	ldr	r3, [r7, #4]
 8035aba:	681b      	ldr	r3, [r3, #0]
 8035abc:	4a1c      	ldr	r2, [pc, #112]	; (8035b30 <HAL_TIM_Base_Start_IT+0xe4>)
 8035abe:	4293      	cmp	r3, r2
 8035ac0:	d004      	beq.n	8035acc <HAL_TIM_Base_Start_IT+0x80>
 8035ac2:	687b      	ldr	r3, [r7, #4]
 8035ac4:	681b      	ldr	r3, [r3, #0]
 8035ac6:	4a1b      	ldr	r2, [pc, #108]	; (8035b34 <HAL_TIM_Base_Start_IT+0xe8>)
 8035ac8:	4293      	cmp	r3, r2
 8035aca:	d115      	bne.n	8035af8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8035acc:	687b      	ldr	r3, [r7, #4]
 8035ace:	681b      	ldr	r3, [r3, #0]
 8035ad0:	689a      	ldr	r2, [r3, #8]
 8035ad2:	4b19      	ldr	r3, [pc, #100]	; (8035b38 <HAL_TIM_Base_Start_IT+0xec>)
 8035ad4:	4013      	ands	r3, r2
 8035ad6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8035ad8:	68fb      	ldr	r3, [r7, #12]
 8035ada:	2b06      	cmp	r3, #6
 8035adc:	d015      	beq.n	8035b0a <HAL_TIM_Base_Start_IT+0xbe>
 8035ade:	68fb      	ldr	r3, [r7, #12]
 8035ae0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8035ae4:	d011      	beq.n	8035b0a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8035ae6:	687b      	ldr	r3, [r7, #4]
 8035ae8:	681b      	ldr	r3, [r3, #0]
 8035aea:	681a      	ldr	r2, [r3, #0]
 8035aec:	687b      	ldr	r3, [r7, #4]
 8035aee:	681b      	ldr	r3, [r3, #0]
 8035af0:	f042 0201 	orr.w	r2, r2, #1
 8035af4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8035af6:	e008      	b.n	8035b0a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8035af8:	687b      	ldr	r3, [r7, #4]
 8035afa:	681b      	ldr	r3, [r3, #0]
 8035afc:	681a      	ldr	r2, [r3, #0]
 8035afe:	687b      	ldr	r3, [r7, #4]
 8035b00:	681b      	ldr	r3, [r3, #0]
 8035b02:	f042 0201 	orr.w	r2, r2, #1
 8035b06:	601a      	str	r2, [r3, #0]
 8035b08:	e000      	b.n	8035b0c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8035b0a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8035b0c:	2300      	movs	r3, #0
}
 8035b0e:	4618      	mov	r0, r3
 8035b10:	3714      	adds	r7, #20
 8035b12:	46bd      	mov	sp, r7
 8035b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8035b18:	4770      	bx	lr
 8035b1a:	bf00      	nop
 8035b1c:	40010000 	.word	0x40010000
 8035b20:	40000400 	.word	0x40000400
 8035b24:	40000800 	.word	0x40000800
 8035b28:	40000c00 	.word	0x40000c00
 8035b2c:	40010400 	.word	0x40010400
 8035b30:	40001800 	.word	0x40001800
 8035b34:	40014000 	.word	0x40014000
 8035b38:	00010007 	.word	0x00010007

08035b3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8035b3c:	b580      	push	{r7, lr}
 8035b3e:	b082      	sub	sp, #8
 8035b40:	af00      	add	r7, sp, #0
 8035b42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8035b44:	687b      	ldr	r3, [r7, #4]
 8035b46:	681b      	ldr	r3, [r3, #0]
 8035b48:	691b      	ldr	r3, [r3, #16]
 8035b4a:	f003 0302 	and.w	r3, r3, #2
 8035b4e:	2b02      	cmp	r3, #2
 8035b50:	d122      	bne.n	8035b98 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8035b52:	687b      	ldr	r3, [r7, #4]
 8035b54:	681b      	ldr	r3, [r3, #0]
 8035b56:	68db      	ldr	r3, [r3, #12]
 8035b58:	f003 0302 	and.w	r3, r3, #2
 8035b5c:	2b02      	cmp	r3, #2
 8035b5e:	d11b      	bne.n	8035b98 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8035b60:	687b      	ldr	r3, [r7, #4]
 8035b62:	681b      	ldr	r3, [r3, #0]
 8035b64:	f06f 0202 	mvn.w	r2, #2
 8035b68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8035b6a:	687b      	ldr	r3, [r7, #4]
 8035b6c:	2201      	movs	r2, #1
 8035b6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8035b70:	687b      	ldr	r3, [r7, #4]
 8035b72:	681b      	ldr	r3, [r3, #0]
 8035b74:	699b      	ldr	r3, [r3, #24]
 8035b76:	f003 0303 	and.w	r3, r3, #3
 8035b7a:	2b00      	cmp	r3, #0
 8035b7c:	d003      	beq.n	8035b86 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8035b7e:	6878      	ldr	r0, [r7, #4]
 8035b80:	f000 f9fe 	bl	8035f80 <HAL_TIM_IC_CaptureCallback>
 8035b84:	e005      	b.n	8035b92 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8035b86:	6878      	ldr	r0, [r7, #4]
 8035b88:	f000 f9f0 	bl	8035f6c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8035b8c:	6878      	ldr	r0, [r7, #4]
 8035b8e:	f000 fa01 	bl	8035f94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8035b92:	687b      	ldr	r3, [r7, #4]
 8035b94:	2200      	movs	r2, #0
 8035b96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8035b98:	687b      	ldr	r3, [r7, #4]
 8035b9a:	681b      	ldr	r3, [r3, #0]
 8035b9c:	691b      	ldr	r3, [r3, #16]
 8035b9e:	f003 0304 	and.w	r3, r3, #4
 8035ba2:	2b04      	cmp	r3, #4
 8035ba4:	d122      	bne.n	8035bec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8035ba6:	687b      	ldr	r3, [r7, #4]
 8035ba8:	681b      	ldr	r3, [r3, #0]
 8035baa:	68db      	ldr	r3, [r3, #12]
 8035bac:	f003 0304 	and.w	r3, r3, #4
 8035bb0:	2b04      	cmp	r3, #4
 8035bb2:	d11b      	bne.n	8035bec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8035bb4:	687b      	ldr	r3, [r7, #4]
 8035bb6:	681b      	ldr	r3, [r3, #0]
 8035bb8:	f06f 0204 	mvn.w	r2, #4
 8035bbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8035bbe:	687b      	ldr	r3, [r7, #4]
 8035bc0:	2202      	movs	r2, #2
 8035bc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8035bc4:	687b      	ldr	r3, [r7, #4]
 8035bc6:	681b      	ldr	r3, [r3, #0]
 8035bc8:	699b      	ldr	r3, [r3, #24]
 8035bca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8035bce:	2b00      	cmp	r3, #0
 8035bd0:	d003      	beq.n	8035bda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8035bd2:	6878      	ldr	r0, [r7, #4]
 8035bd4:	f000 f9d4 	bl	8035f80 <HAL_TIM_IC_CaptureCallback>
 8035bd8:	e005      	b.n	8035be6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8035bda:	6878      	ldr	r0, [r7, #4]
 8035bdc:	f000 f9c6 	bl	8035f6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8035be0:	6878      	ldr	r0, [r7, #4]
 8035be2:	f000 f9d7 	bl	8035f94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8035be6:	687b      	ldr	r3, [r7, #4]
 8035be8:	2200      	movs	r2, #0
 8035bea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8035bec:	687b      	ldr	r3, [r7, #4]
 8035bee:	681b      	ldr	r3, [r3, #0]
 8035bf0:	691b      	ldr	r3, [r3, #16]
 8035bf2:	f003 0308 	and.w	r3, r3, #8
 8035bf6:	2b08      	cmp	r3, #8
 8035bf8:	d122      	bne.n	8035c40 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8035bfa:	687b      	ldr	r3, [r7, #4]
 8035bfc:	681b      	ldr	r3, [r3, #0]
 8035bfe:	68db      	ldr	r3, [r3, #12]
 8035c00:	f003 0308 	and.w	r3, r3, #8
 8035c04:	2b08      	cmp	r3, #8
 8035c06:	d11b      	bne.n	8035c40 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8035c08:	687b      	ldr	r3, [r7, #4]
 8035c0a:	681b      	ldr	r3, [r3, #0]
 8035c0c:	f06f 0208 	mvn.w	r2, #8
 8035c10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8035c12:	687b      	ldr	r3, [r7, #4]
 8035c14:	2204      	movs	r2, #4
 8035c16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8035c18:	687b      	ldr	r3, [r7, #4]
 8035c1a:	681b      	ldr	r3, [r3, #0]
 8035c1c:	69db      	ldr	r3, [r3, #28]
 8035c1e:	f003 0303 	and.w	r3, r3, #3
 8035c22:	2b00      	cmp	r3, #0
 8035c24:	d003      	beq.n	8035c2e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8035c26:	6878      	ldr	r0, [r7, #4]
 8035c28:	f000 f9aa 	bl	8035f80 <HAL_TIM_IC_CaptureCallback>
 8035c2c:	e005      	b.n	8035c3a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8035c2e:	6878      	ldr	r0, [r7, #4]
 8035c30:	f000 f99c 	bl	8035f6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8035c34:	6878      	ldr	r0, [r7, #4]
 8035c36:	f000 f9ad 	bl	8035f94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8035c3a:	687b      	ldr	r3, [r7, #4]
 8035c3c:	2200      	movs	r2, #0
 8035c3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8035c40:	687b      	ldr	r3, [r7, #4]
 8035c42:	681b      	ldr	r3, [r3, #0]
 8035c44:	691b      	ldr	r3, [r3, #16]
 8035c46:	f003 0310 	and.w	r3, r3, #16
 8035c4a:	2b10      	cmp	r3, #16
 8035c4c:	d122      	bne.n	8035c94 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8035c4e:	687b      	ldr	r3, [r7, #4]
 8035c50:	681b      	ldr	r3, [r3, #0]
 8035c52:	68db      	ldr	r3, [r3, #12]
 8035c54:	f003 0310 	and.w	r3, r3, #16
 8035c58:	2b10      	cmp	r3, #16
 8035c5a:	d11b      	bne.n	8035c94 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8035c5c:	687b      	ldr	r3, [r7, #4]
 8035c5e:	681b      	ldr	r3, [r3, #0]
 8035c60:	f06f 0210 	mvn.w	r2, #16
 8035c64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8035c66:	687b      	ldr	r3, [r7, #4]
 8035c68:	2208      	movs	r2, #8
 8035c6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8035c6c:	687b      	ldr	r3, [r7, #4]
 8035c6e:	681b      	ldr	r3, [r3, #0]
 8035c70:	69db      	ldr	r3, [r3, #28]
 8035c72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8035c76:	2b00      	cmp	r3, #0
 8035c78:	d003      	beq.n	8035c82 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8035c7a:	6878      	ldr	r0, [r7, #4]
 8035c7c:	f000 f980 	bl	8035f80 <HAL_TIM_IC_CaptureCallback>
 8035c80:	e005      	b.n	8035c8e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8035c82:	6878      	ldr	r0, [r7, #4]
 8035c84:	f000 f972 	bl	8035f6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8035c88:	6878      	ldr	r0, [r7, #4]
 8035c8a:	f000 f983 	bl	8035f94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8035c8e:	687b      	ldr	r3, [r7, #4]
 8035c90:	2200      	movs	r2, #0
 8035c92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8035c94:	687b      	ldr	r3, [r7, #4]
 8035c96:	681b      	ldr	r3, [r3, #0]
 8035c98:	691b      	ldr	r3, [r3, #16]
 8035c9a:	f003 0301 	and.w	r3, r3, #1
 8035c9e:	2b01      	cmp	r3, #1
 8035ca0:	d10e      	bne.n	8035cc0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8035ca2:	687b      	ldr	r3, [r7, #4]
 8035ca4:	681b      	ldr	r3, [r3, #0]
 8035ca6:	68db      	ldr	r3, [r3, #12]
 8035ca8:	f003 0301 	and.w	r3, r3, #1
 8035cac:	2b01      	cmp	r3, #1
 8035cae:	d107      	bne.n	8035cc0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8035cb0:	687b      	ldr	r3, [r7, #4]
 8035cb2:	681b      	ldr	r3, [r3, #0]
 8035cb4:	f06f 0201 	mvn.w	r2, #1
 8035cb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8035cba:	6878      	ldr	r0, [r7, #4]
 8035cbc:	f7f5 f96a 	bl	802af94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8035cc0:	687b      	ldr	r3, [r7, #4]
 8035cc2:	681b      	ldr	r3, [r3, #0]
 8035cc4:	691b      	ldr	r3, [r3, #16]
 8035cc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8035cca:	2b80      	cmp	r3, #128	; 0x80
 8035ccc:	d10e      	bne.n	8035cec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8035cce:	687b      	ldr	r3, [r7, #4]
 8035cd0:	681b      	ldr	r3, [r3, #0]
 8035cd2:	68db      	ldr	r3, [r3, #12]
 8035cd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8035cd8:	2b80      	cmp	r3, #128	; 0x80
 8035cda:	d107      	bne.n	8035cec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8035cdc:	687b      	ldr	r3, [r7, #4]
 8035cde:	681b      	ldr	r3, [r3, #0]
 8035ce0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8035ce4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8035ce6:	6878      	ldr	r0, [r7, #4]
 8035ce8:	f000 fb38 	bl	803635c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8035cec:	687b      	ldr	r3, [r7, #4]
 8035cee:	681b      	ldr	r3, [r3, #0]
 8035cf0:	691b      	ldr	r3, [r3, #16]
 8035cf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8035cf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8035cfa:	d10e      	bne.n	8035d1a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8035cfc:	687b      	ldr	r3, [r7, #4]
 8035cfe:	681b      	ldr	r3, [r3, #0]
 8035d00:	68db      	ldr	r3, [r3, #12]
 8035d02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8035d06:	2b80      	cmp	r3, #128	; 0x80
 8035d08:	d107      	bne.n	8035d1a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8035d0a:	687b      	ldr	r3, [r7, #4]
 8035d0c:	681b      	ldr	r3, [r3, #0]
 8035d0e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8035d12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8035d14:	6878      	ldr	r0, [r7, #4]
 8035d16:	f000 fb2b 	bl	8036370 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8035d1a:	687b      	ldr	r3, [r7, #4]
 8035d1c:	681b      	ldr	r3, [r3, #0]
 8035d1e:	691b      	ldr	r3, [r3, #16]
 8035d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8035d24:	2b40      	cmp	r3, #64	; 0x40
 8035d26:	d10e      	bne.n	8035d46 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8035d28:	687b      	ldr	r3, [r7, #4]
 8035d2a:	681b      	ldr	r3, [r3, #0]
 8035d2c:	68db      	ldr	r3, [r3, #12]
 8035d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8035d32:	2b40      	cmp	r3, #64	; 0x40
 8035d34:	d107      	bne.n	8035d46 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8035d36:	687b      	ldr	r3, [r7, #4]
 8035d38:	681b      	ldr	r3, [r3, #0]
 8035d3a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8035d3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8035d40:	6878      	ldr	r0, [r7, #4]
 8035d42:	f000 f931 	bl	8035fa8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8035d46:	687b      	ldr	r3, [r7, #4]
 8035d48:	681b      	ldr	r3, [r3, #0]
 8035d4a:	691b      	ldr	r3, [r3, #16]
 8035d4c:	f003 0320 	and.w	r3, r3, #32
 8035d50:	2b20      	cmp	r3, #32
 8035d52:	d10e      	bne.n	8035d72 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8035d54:	687b      	ldr	r3, [r7, #4]
 8035d56:	681b      	ldr	r3, [r3, #0]
 8035d58:	68db      	ldr	r3, [r3, #12]
 8035d5a:	f003 0320 	and.w	r3, r3, #32
 8035d5e:	2b20      	cmp	r3, #32
 8035d60:	d107      	bne.n	8035d72 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8035d62:	687b      	ldr	r3, [r7, #4]
 8035d64:	681b      	ldr	r3, [r3, #0]
 8035d66:	f06f 0220 	mvn.w	r2, #32
 8035d6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8035d6c:	6878      	ldr	r0, [r7, #4]
 8035d6e:	f000 faeb 	bl	8036348 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8035d72:	bf00      	nop
 8035d74:	3708      	adds	r7, #8
 8035d76:	46bd      	mov	sp, r7
 8035d78:	bd80      	pop	{r7, pc}
	...

08035d7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8035d7c:	b580      	push	{r7, lr}
 8035d7e:	b084      	sub	sp, #16
 8035d80:	af00      	add	r7, sp, #0
 8035d82:	6078      	str	r0, [r7, #4]
 8035d84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8035d86:	2300      	movs	r3, #0
 8035d88:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8035d8a:	687b      	ldr	r3, [r7, #4]
 8035d8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8035d90:	2b01      	cmp	r3, #1
 8035d92:	d101      	bne.n	8035d98 <HAL_TIM_ConfigClockSource+0x1c>
 8035d94:	2302      	movs	r3, #2
 8035d96:	e0dc      	b.n	8035f52 <HAL_TIM_ConfigClockSource+0x1d6>
 8035d98:	687b      	ldr	r3, [r7, #4]
 8035d9a:	2201      	movs	r2, #1
 8035d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8035da0:	687b      	ldr	r3, [r7, #4]
 8035da2:	2202      	movs	r2, #2
 8035da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8035da8:	687b      	ldr	r3, [r7, #4]
 8035daa:	681b      	ldr	r3, [r3, #0]
 8035dac:	689b      	ldr	r3, [r3, #8]
 8035dae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8035db0:	68ba      	ldr	r2, [r7, #8]
 8035db2:	4b6a      	ldr	r3, [pc, #424]	; (8035f5c <HAL_TIM_ConfigClockSource+0x1e0>)
 8035db4:	4013      	ands	r3, r2
 8035db6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8035db8:	68bb      	ldr	r3, [r7, #8]
 8035dba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8035dbe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8035dc0:	687b      	ldr	r3, [r7, #4]
 8035dc2:	681b      	ldr	r3, [r3, #0]
 8035dc4:	68ba      	ldr	r2, [r7, #8]
 8035dc6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8035dc8:	683b      	ldr	r3, [r7, #0]
 8035dca:	681b      	ldr	r3, [r3, #0]
 8035dcc:	4a64      	ldr	r2, [pc, #400]	; (8035f60 <HAL_TIM_ConfigClockSource+0x1e4>)
 8035dce:	4293      	cmp	r3, r2
 8035dd0:	f000 80a9 	beq.w	8035f26 <HAL_TIM_ConfigClockSource+0x1aa>
 8035dd4:	4a62      	ldr	r2, [pc, #392]	; (8035f60 <HAL_TIM_ConfigClockSource+0x1e4>)
 8035dd6:	4293      	cmp	r3, r2
 8035dd8:	f200 80ae 	bhi.w	8035f38 <HAL_TIM_ConfigClockSource+0x1bc>
 8035ddc:	4a61      	ldr	r2, [pc, #388]	; (8035f64 <HAL_TIM_ConfigClockSource+0x1e8>)
 8035dde:	4293      	cmp	r3, r2
 8035de0:	f000 80a1 	beq.w	8035f26 <HAL_TIM_ConfigClockSource+0x1aa>
 8035de4:	4a5f      	ldr	r2, [pc, #380]	; (8035f64 <HAL_TIM_ConfigClockSource+0x1e8>)
 8035de6:	4293      	cmp	r3, r2
 8035de8:	f200 80a6 	bhi.w	8035f38 <HAL_TIM_ConfigClockSource+0x1bc>
 8035dec:	4a5e      	ldr	r2, [pc, #376]	; (8035f68 <HAL_TIM_ConfigClockSource+0x1ec>)
 8035dee:	4293      	cmp	r3, r2
 8035df0:	f000 8099 	beq.w	8035f26 <HAL_TIM_ConfigClockSource+0x1aa>
 8035df4:	4a5c      	ldr	r2, [pc, #368]	; (8035f68 <HAL_TIM_ConfigClockSource+0x1ec>)
 8035df6:	4293      	cmp	r3, r2
 8035df8:	f200 809e 	bhi.w	8035f38 <HAL_TIM_ConfigClockSource+0x1bc>
 8035dfc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8035e00:	f000 8091 	beq.w	8035f26 <HAL_TIM_ConfigClockSource+0x1aa>
 8035e04:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8035e08:	f200 8096 	bhi.w	8035f38 <HAL_TIM_ConfigClockSource+0x1bc>
 8035e0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8035e10:	f000 8089 	beq.w	8035f26 <HAL_TIM_ConfigClockSource+0x1aa>
 8035e14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8035e18:	f200 808e 	bhi.w	8035f38 <HAL_TIM_ConfigClockSource+0x1bc>
 8035e1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8035e20:	d03e      	beq.n	8035ea0 <HAL_TIM_ConfigClockSource+0x124>
 8035e22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8035e26:	f200 8087 	bhi.w	8035f38 <HAL_TIM_ConfigClockSource+0x1bc>
 8035e2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8035e2e:	f000 8086 	beq.w	8035f3e <HAL_TIM_ConfigClockSource+0x1c2>
 8035e32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8035e36:	d87f      	bhi.n	8035f38 <HAL_TIM_ConfigClockSource+0x1bc>
 8035e38:	2b70      	cmp	r3, #112	; 0x70
 8035e3a:	d01a      	beq.n	8035e72 <HAL_TIM_ConfigClockSource+0xf6>
 8035e3c:	2b70      	cmp	r3, #112	; 0x70
 8035e3e:	d87b      	bhi.n	8035f38 <HAL_TIM_ConfigClockSource+0x1bc>
 8035e40:	2b60      	cmp	r3, #96	; 0x60
 8035e42:	d050      	beq.n	8035ee6 <HAL_TIM_ConfigClockSource+0x16a>
 8035e44:	2b60      	cmp	r3, #96	; 0x60
 8035e46:	d877      	bhi.n	8035f38 <HAL_TIM_ConfigClockSource+0x1bc>
 8035e48:	2b50      	cmp	r3, #80	; 0x50
 8035e4a:	d03c      	beq.n	8035ec6 <HAL_TIM_ConfigClockSource+0x14a>
 8035e4c:	2b50      	cmp	r3, #80	; 0x50
 8035e4e:	d873      	bhi.n	8035f38 <HAL_TIM_ConfigClockSource+0x1bc>
 8035e50:	2b40      	cmp	r3, #64	; 0x40
 8035e52:	d058      	beq.n	8035f06 <HAL_TIM_ConfigClockSource+0x18a>
 8035e54:	2b40      	cmp	r3, #64	; 0x40
 8035e56:	d86f      	bhi.n	8035f38 <HAL_TIM_ConfigClockSource+0x1bc>
 8035e58:	2b30      	cmp	r3, #48	; 0x30
 8035e5a:	d064      	beq.n	8035f26 <HAL_TIM_ConfigClockSource+0x1aa>
 8035e5c:	2b30      	cmp	r3, #48	; 0x30
 8035e5e:	d86b      	bhi.n	8035f38 <HAL_TIM_ConfigClockSource+0x1bc>
 8035e60:	2b20      	cmp	r3, #32
 8035e62:	d060      	beq.n	8035f26 <HAL_TIM_ConfigClockSource+0x1aa>
 8035e64:	2b20      	cmp	r3, #32
 8035e66:	d867      	bhi.n	8035f38 <HAL_TIM_ConfigClockSource+0x1bc>
 8035e68:	2b00      	cmp	r3, #0
 8035e6a:	d05c      	beq.n	8035f26 <HAL_TIM_ConfigClockSource+0x1aa>
 8035e6c:	2b10      	cmp	r3, #16
 8035e6e:	d05a      	beq.n	8035f26 <HAL_TIM_ConfigClockSource+0x1aa>
 8035e70:	e062      	b.n	8035f38 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8035e72:	687b      	ldr	r3, [r7, #4]
 8035e74:	6818      	ldr	r0, [r3, #0]
 8035e76:	683b      	ldr	r3, [r7, #0]
 8035e78:	6899      	ldr	r1, [r3, #8]
 8035e7a:	683b      	ldr	r3, [r7, #0]
 8035e7c:	685a      	ldr	r2, [r3, #4]
 8035e7e:	683b      	ldr	r3, [r7, #0]
 8035e80:	68db      	ldr	r3, [r3, #12]
 8035e82:	f000 f9b3 	bl	80361ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8035e86:	687b      	ldr	r3, [r7, #4]
 8035e88:	681b      	ldr	r3, [r3, #0]
 8035e8a:	689b      	ldr	r3, [r3, #8]
 8035e8c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8035e8e:	68bb      	ldr	r3, [r7, #8]
 8035e90:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8035e94:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8035e96:	687b      	ldr	r3, [r7, #4]
 8035e98:	681b      	ldr	r3, [r3, #0]
 8035e9a:	68ba      	ldr	r2, [r7, #8]
 8035e9c:	609a      	str	r2, [r3, #8]
      break;
 8035e9e:	e04f      	b.n	8035f40 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8035ea0:	687b      	ldr	r3, [r7, #4]
 8035ea2:	6818      	ldr	r0, [r3, #0]
 8035ea4:	683b      	ldr	r3, [r7, #0]
 8035ea6:	6899      	ldr	r1, [r3, #8]
 8035ea8:	683b      	ldr	r3, [r7, #0]
 8035eaa:	685a      	ldr	r2, [r3, #4]
 8035eac:	683b      	ldr	r3, [r7, #0]
 8035eae:	68db      	ldr	r3, [r3, #12]
 8035eb0:	f000 f99c 	bl	80361ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8035eb4:	687b      	ldr	r3, [r7, #4]
 8035eb6:	681b      	ldr	r3, [r3, #0]
 8035eb8:	689a      	ldr	r2, [r3, #8]
 8035eba:	687b      	ldr	r3, [r7, #4]
 8035ebc:	681b      	ldr	r3, [r3, #0]
 8035ebe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8035ec2:	609a      	str	r2, [r3, #8]
      break;
 8035ec4:	e03c      	b.n	8035f40 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8035ec6:	687b      	ldr	r3, [r7, #4]
 8035ec8:	6818      	ldr	r0, [r3, #0]
 8035eca:	683b      	ldr	r3, [r7, #0]
 8035ecc:	6859      	ldr	r1, [r3, #4]
 8035ece:	683b      	ldr	r3, [r7, #0]
 8035ed0:	68db      	ldr	r3, [r3, #12]
 8035ed2:	461a      	mov	r2, r3
 8035ed4:	f000 f90c 	bl	80360f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8035ed8:	687b      	ldr	r3, [r7, #4]
 8035eda:	681b      	ldr	r3, [r3, #0]
 8035edc:	2150      	movs	r1, #80	; 0x50
 8035ede:	4618      	mov	r0, r3
 8035ee0:	f000 f966 	bl	80361b0 <TIM_ITRx_SetConfig>
      break;
 8035ee4:	e02c      	b.n	8035f40 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8035ee6:	687b      	ldr	r3, [r7, #4]
 8035ee8:	6818      	ldr	r0, [r3, #0]
 8035eea:	683b      	ldr	r3, [r7, #0]
 8035eec:	6859      	ldr	r1, [r3, #4]
 8035eee:	683b      	ldr	r3, [r7, #0]
 8035ef0:	68db      	ldr	r3, [r3, #12]
 8035ef2:	461a      	mov	r2, r3
 8035ef4:	f000 f92b 	bl	803614e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8035ef8:	687b      	ldr	r3, [r7, #4]
 8035efa:	681b      	ldr	r3, [r3, #0]
 8035efc:	2160      	movs	r1, #96	; 0x60
 8035efe:	4618      	mov	r0, r3
 8035f00:	f000 f956 	bl	80361b0 <TIM_ITRx_SetConfig>
      break;
 8035f04:	e01c      	b.n	8035f40 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8035f06:	687b      	ldr	r3, [r7, #4]
 8035f08:	6818      	ldr	r0, [r3, #0]
 8035f0a:	683b      	ldr	r3, [r7, #0]
 8035f0c:	6859      	ldr	r1, [r3, #4]
 8035f0e:	683b      	ldr	r3, [r7, #0]
 8035f10:	68db      	ldr	r3, [r3, #12]
 8035f12:	461a      	mov	r2, r3
 8035f14:	f000 f8ec 	bl	80360f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8035f18:	687b      	ldr	r3, [r7, #4]
 8035f1a:	681b      	ldr	r3, [r3, #0]
 8035f1c:	2140      	movs	r1, #64	; 0x40
 8035f1e:	4618      	mov	r0, r3
 8035f20:	f000 f946 	bl	80361b0 <TIM_ITRx_SetConfig>
      break;
 8035f24:	e00c      	b.n	8035f40 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8035f26:	687b      	ldr	r3, [r7, #4]
 8035f28:	681a      	ldr	r2, [r3, #0]
 8035f2a:	683b      	ldr	r3, [r7, #0]
 8035f2c:	681b      	ldr	r3, [r3, #0]
 8035f2e:	4619      	mov	r1, r3
 8035f30:	4610      	mov	r0, r2
 8035f32:	f000 f93d 	bl	80361b0 <TIM_ITRx_SetConfig>
      break;
 8035f36:	e003      	b.n	8035f40 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8035f38:	2301      	movs	r3, #1
 8035f3a:	73fb      	strb	r3, [r7, #15]
      break;
 8035f3c:	e000      	b.n	8035f40 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8035f3e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8035f40:	687b      	ldr	r3, [r7, #4]
 8035f42:	2201      	movs	r2, #1
 8035f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8035f48:	687b      	ldr	r3, [r7, #4]
 8035f4a:	2200      	movs	r2, #0
 8035f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8035f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8035f52:	4618      	mov	r0, r3
 8035f54:	3710      	adds	r7, #16
 8035f56:	46bd      	mov	sp, r7
 8035f58:	bd80      	pop	{r7, pc}
 8035f5a:	bf00      	nop
 8035f5c:	ffceff88 	.word	0xffceff88
 8035f60:	00100040 	.word	0x00100040
 8035f64:	00100030 	.word	0x00100030
 8035f68:	00100020 	.word	0x00100020

08035f6c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8035f6c:	b480      	push	{r7}
 8035f6e:	b083      	sub	sp, #12
 8035f70:	af00      	add	r7, sp, #0
 8035f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8035f74:	bf00      	nop
 8035f76:	370c      	adds	r7, #12
 8035f78:	46bd      	mov	sp, r7
 8035f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8035f7e:	4770      	bx	lr

08035f80 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8035f80:	b480      	push	{r7}
 8035f82:	b083      	sub	sp, #12
 8035f84:	af00      	add	r7, sp, #0
 8035f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8035f88:	bf00      	nop
 8035f8a:	370c      	adds	r7, #12
 8035f8c:	46bd      	mov	sp, r7
 8035f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8035f92:	4770      	bx	lr

08035f94 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8035f94:	b480      	push	{r7}
 8035f96:	b083      	sub	sp, #12
 8035f98:	af00      	add	r7, sp, #0
 8035f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8035f9c:	bf00      	nop
 8035f9e:	370c      	adds	r7, #12
 8035fa0:	46bd      	mov	sp, r7
 8035fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8035fa6:	4770      	bx	lr

08035fa8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8035fa8:	b480      	push	{r7}
 8035faa:	b083      	sub	sp, #12
 8035fac:	af00      	add	r7, sp, #0
 8035fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8035fb0:	bf00      	nop
 8035fb2:	370c      	adds	r7, #12
 8035fb4:	46bd      	mov	sp, r7
 8035fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8035fba:	4770      	bx	lr

08035fbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8035fbc:	b480      	push	{r7}
 8035fbe:	b085      	sub	sp, #20
 8035fc0:	af00      	add	r7, sp, #0
 8035fc2:	6078      	str	r0, [r7, #4]
 8035fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8035fc6:	687b      	ldr	r3, [r7, #4]
 8035fc8:	681b      	ldr	r3, [r3, #0]
 8035fca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8035fcc:	687b      	ldr	r3, [r7, #4]
 8035fce:	4a40      	ldr	r2, [pc, #256]	; (80360d0 <TIM_Base_SetConfig+0x114>)
 8035fd0:	4293      	cmp	r3, r2
 8035fd2:	d013      	beq.n	8035ffc <TIM_Base_SetConfig+0x40>
 8035fd4:	687b      	ldr	r3, [r7, #4]
 8035fd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8035fda:	d00f      	beq.n	8035ffc <TIM_Base_SetConfig+0x40>
 8035fdc:	687b      	ldr	r3, [r7, #4]
 8035fde:	4a3d      	ldr	r2, [pc, #244]	; (80360d4 <TIM_Base_SetConfig+0x118>)
 8035fe0:	4293      	cmp	r3, r2
 8035fe2:	d00b      	beq.n	8035ffc <TIM_Base_SetConfig+0x40>
 8035fe4:	687b      	ldr	r3, [r7, #4]
 8035fe6:	4a3c      	ldr	r2, [pc, #240]	; (80360d8 <TIM_Base_SetConfig+0x11c>)
 8035fe8:	4293      	cmp	r3, r2
 8035fea:	d007      	beq.n	8035ffc <TIM_Base_SetConfig+0x40>
 8035fec:	687b      	ldr	r3, [r7, #4]
 8035fee:	4a3b      	ldr	r2, [pc, #236]	; (80360dc <TIM_Base_SetConfig+0x120>)
 8035ff0:	4293      	cmp	r3, r2
 8035ff2:	d003      	beq.n	8035ffc <TIM_Base_SetConfig+0x40>
 8035ff4:	687b      	ldr	r3, [r7, #4]
 8035ff6:	4a3a      	ldr	r2, [pc, #232]	; (80360e0 <TIM_Base_SetConfig+0x124>)
 8035ff8:	4293      	cmp	r3, r2
 8035ffa:	d108      	bne.n	803600e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8035ffc:	68fb      	ldr	r3, [r7, #12]
 8035ffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8036002:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8036004:	683b      	ldr	r3, [r7, #0]
 8036006:	685b      	ldr	r3, [r3, #4]
 8036008:	68fa      	ldr	r2, [r7, #12]
 803600a:	4313      	orrs	r3, r2
 803600c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 803600e:	687b      	ldr	r3, [r7, #4]
 8036010:	4a2f      	ldr	r2, [pc, #188]	; (80360d0 <TIM_Base_SetConfig+0x114>)
 8036012:	4293      	cmp	r3, r2
 8036014:	d01f      	beq.n	8036056 <TIM_Base_SetConfig+0x9a>
 8036016:	687b      	ldr	r3, [r7, #4]
 8036018:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 803601c:	d01b      	beq.n	8036056 <TIM_Base_SetConfig+0x9a>
 803601e:	687b      	ldr	r3, [r7, #4]
 8036020:	4a2c      	ldr	r2, [pc, #176]	; (80360d4 <TIM_Base_SetConfig+0x118>)
 8036022:	4293      	cmp	r3, r2
 8036024:	d017      	beq.n	8036056 <TIM_Base_SetConfig+0x9a>
 8036026:	687b      	ldr	r3, [r7, #4]
 8036028:	4a2b      	ldr	r2, [pc, #172]	; (80360d8 <TIM_Base_SetConfig+0x11c>)
 803602a:	4293      	cmp	r3, r2
 803602c:	d013      	beq.n	8036056 <TIM_Base_SetConfig+0x9a>
 803602e:	687b      	ldr	r3, [r7, #4]
 8036030:	4a2a      	ldr	r2, [pc, #168]	; (80360dc <TIM_Base_SetConfig+0x120>)
 8036032:	4293      	cmp	r3, r2
 8036034:	d00f      	beq.n	8036056 <TIM_Base_SetConfig+0x9a>
 8036036:	687b      	ldr	r3, [r7, #4]
 8036038:	4a29      	ldr	r2, [pc, #164]	; (80360e0 <TIM_Base_SetConfig+0x124>)
 803603a:	4293      	cmp	r3, r2
 803603c:	d00b      	beq.n	8036056 <TIM_Base_SetConfig+0x9a>
 803603e:	687b      	ldr	r3, [r7, #4]
 8036040:	4a28      	ldr	r2, [pc, #160]	; (80360e4 <TIM_Base_SetConfig+0x128>)
 8036042:	4293      	cmp	r3, r2
 8036044:	d007      	beq.n	8036056 <TIM_Base_SetConfig+0x9a>
 8036046:	687b      	ldr	r3, [r7, #4]
 8036048:	4a27      	ldr	r2, [pc, #156]	; (80360e8 <TIM_Base_SetConfig+0x12c>)
 803604a:	4293      	cmp	r3, r2
 803604c:	d003      	beq.n	8036056 <TIM_Base_SetConfig+0x9a>
 803604e:	687b      	ldr	r3, [r7, #4]
 8036050:	4a26      	ldr	r2, [pc, #152]	; (80360ec <TIM_Base_SetConfig+0x130>)
 8036052:	4293      	cmp	r3, r2
 8036054:	d108      	bne.n	8036068 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8036056:	68fb      	ldr	r3, [r7, #12]
 8036058:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 803605c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 803605e:	683b      	ldr	r3, [r7, #0]
 8036060:	68db      	ldr	r3, [r3, #12]
 8036062:	68fa      	ldr	r2, [r7, #12]
 8036064:	4313      	orrs	r3, r2
 8036066:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8036068:	68fb      	ldr	r3, [r7, #12]
 803606a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 803606e:	683b      	ldr	r3, [r7, #0]
 8036070:	695b      	ldr	r3, [r3, #20]
 8036072:	4313      	orrs	r3, r2
 8036074:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8036076:	687b      	ldr	r3, [r7, #4]
 8036078:	68fa      	ldr	r2, [r7, #12]
 803607a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 803607c:	683b      	ldr	r3, [r7, #0]
 803607e:	689a      	ldr	r2, [r3, #8]
 8036080:	687b      	ldr	r3, [r7, #4]
 8036082:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8036084:	683b      	ldr	r3, [r7, #0]
 8036086:	681a      	ldr	r2, [r3, #0]
 8036088:	687b      	ldr	r3, [r7, #4]
 803608a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 803608c:	687b      	ldr	r3, [r7, #4]
 803608e:	4a10      	ldr	r2, [pc, #64]	; (80360d0 <TIM_Base_SetConfig+0x114>)
 8036090:	4293      	cmp	r3, r2
 8036092:	d00f      	beq.n	80360b4 <TIM_Base_SetConfig+0xf8>
 8036094:	687b      	ldr	r3, [r7, #4]
 8036096:	4a12      	ldr	r2, [pc, #72]	; (80360e0 <TIM_Base_SetConfig+0x124>)
 8036098:	4293      	cmp	r3, r2
 803609a:	d00b      	beq.n	80360b4 <TIM_Base_SetConfig+0xf8>
 803609c:	687b      	ldr	r3, [r7, #4]
 803609e:	4a11      	ldr	r2, [pc, #68]	; (80360e4 <TIM_Base_SetConfig+0x128>)
 80360a0:	4293      	cmp	r3, r2
 80360a2:	d007      	beq.n	80360b4 <TIM_Base_SetConfig+0xf8>
 80360a4:	687b      	ldr	r3, [r7, #4]
 80360a6:	4a10      	ldr	r2, [pc, #64]	; (80360e8 <TIM_Base_SetConfig+0x12c>)
 80360a8:	4293      	cmp	r3, r2
 80360aa:	d003      	beq.n	80360b4 <TIM_Base_SetConfig+0xf8>
 80360ac:	687b      	ldr	r3, [r7, #4]
 80360ae:	4a0f      	ldr	r2, [pc, #60]	; (80360ec <TIM_Base_SetConfig+0x130>)
 80360b0:	4293      	cmp	r3, r2
 80360b2:	d103      	bne.n	80360bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80360b4:	683b      	ldr	r3, [r7, #0]
 80360b6:	691a      	ldr	r2, [r3, #16]
 80360b8:	687b      	ldr	r3, [r7, #4]
 80360ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80360bc:	687b      	ldr	r3, [r7, #4]
 80360be:	2201      	movs	r2, #1
 80360c0:	615a      	str	r2, [r3, #20]
}
 80360c2:	bf00      	nop
 80360c4:	3714      	adds	r7, #20
 80360c6:	46bd      	mov	sp, r7
 80360c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80360cc:	4770      	bx	lr
 80360ce:	bf00      	nop
 80360d0:	40010000 	.word	0x40010000
 80360d4:	40000400 	.word	0x40000400
 80360d8:	40000800 	.word	0x40000800
 80360dc:	40000c00 	.word	0x40000c00
 80360e0:	40010400 	.word	0x40010400
 80360e4:	40014000 	.word	0x40014000
 80360e8:	40014400 	.word	0x40014400
 80360ec:	40014800 	.word	0x40014800

080360f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80360f0:	b480      	push	{r7}
 80360f2:	b087      	sub	sp, #28
 80360f4:	af00      	add	r7, sp, #0
 80360f6:	60f8      	str	r0, [r7, #12]
 80360f8:	60b9      	str	r1, [r7, #8]
 80360fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80360fc:	68fb      	ldr	r3, [r7, #12]
 80360fe:	6a1b      	ldr	r3, [r3, #32]
 8036100:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8036102:	68fb      	ldr	r3, [r7, #12]
 8036104:	6a1b      	ldr	r3, [r3, #32]
 8036106:	f023 0201 	bic.w	r2, r3, #1
 803610a:	68fb      	ldr	r3, [r7, #12]
 803610c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 803610e:	68fb      	ldr	r3, [r7, #12]
 8036110:	699b      	ldr	r3, [r3, #24]
 8036112:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8036114:	693b      	ldr	r3, [r7, #16]
 8036116:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 803611a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 803611c:	687b      	ldr	r3, [r7, #4]
 803611e:	011b      	lsls	r3, r3, #4
 8036120:	693a      	ldr	r2, [r7, #16]
 8036122:	4313      	orrs	r3, r2
 8036124:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8036126:	697b      	ldr	r3, [r7, #20]
 8036128:	f023 030a 	bic.w	r3, r3, #10
 803612c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 803612e:	697a      	ldr	r2, [r7, #20]
 8036130:	68bb      	ldr	r3, [r7, #8]
 8036132:	4313      	orrs	r3, r2
 8036134:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8036136:	68fb      	ldr	r3, [r7, #12]
 8036138:	693a      	ldr	r2, [r7, #16]
 803613a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 803613c:	68fb      	ldr	r3, [r7, #12]
 803613e:	697a      	ldr	r2, [r7, #20]
 8036140:	621a      	str	r2, [r3, #32]
}
 8036142:	bf00      	nop
 8036144:	371c      	adds	r7, #28
 8036146:	46bd      	mov	sp, r7
 8036148:	f85d 7b04 	ldr.w	r7, [sp], #4
 803614c:	4770      	bx	lr

0803614e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 803614e:	b480      	push	{r7}
 8036150:	b087      	sub	sp, #28
 8036152:	af00      	add	r7, sp, #0
 8036154:	60f8      	str	r0, [r7, #12]
 8036156:	60b9      	str	r1, [r7, #8]
 8036158:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 803615a:	68fb      	ldr	r3, [r7, #12]
 803615c:	6a1b      	ldr	r3, [r3, #32]
 803615e:	f023 0210 	bic.w	r2, r3, #16
 8036162:	68fb      	ldr	r3, [r7, #12]
 8036164:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8036166:	68fb      	ldr	r3, [r7, #12]
 8036168:	699b      	ldr	r3, [r3, #24]
 803616a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 803616c:	68fb      	ldr	r3, [r7, #12]
 803616e:	6a1b      	ldr	r3, [r3, #32]
 8036170:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8036172:	697b      	ldr	r3, [r7, #20]
 8036174:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8036178:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 803617a:	687b      	ldr	r3, [r7, #4]
 803617c:	031b      	lsls	r3, r3, #12
 803617e:	697a      	ldr	r2, [r7, #20]
 8036180:	4313      	orrs	r3, r2
 8036182:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8036184:	693b      	ldr	r3, [r7, #16]
 8036186:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 803618a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 803618c:	68bb      	ldr	r3, [r7, #8]
 803618e:	011b      	lsls	r3, r3, #4
 8036190:	693a      	ldr	r2, [r7, #16]
 8036192:	4313      	orrs	r3, r2
 8036194:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8036196:	68fb      	ldr	r3, [r7, #12]
 8036198:	697a      	ldr	r2, [r7, #20]
 803619a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 803619c:	68fb      	ldr	r3, [r7, #12]
 803619e:	693a      	ldr	r2, [r7, #16]
 80361a0:	621a      	str	r2, [r3, #32]
}
 80361a2:	bf00      	nop
 80361a4:	371c      	adds	r7, #28
 80361a6:	46bd      	mov	sp, r7
 80361a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80361ac:	4770      	bx	lr
	...

080361b0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80361b0:	b480      	push	{r7}
 80361b2:	b085      	sub	sp, #20
 80361b4:	af00      	add	r7, sp, #0
 80361b6:	6078      	str	r0, [r7, #4]
 80361b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80361ba:	687b      	ldr	r3, [r7, #4]
 80361bc:	689b      	ldr	r3, [r3, #8]
 80361be:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80361c0:	68fa      	ldr	r2, [r7, #12]
 80361c2:	4b09      	ldr	r3, [pc, #36]	; (80361e8 <TIM_ITRx_SetConfig+0x38>)
 80361c4:	4013      	ands	r3, r2
 80361c6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80361c8:	683a      	ldr	r2, [r7, #0]
 80361ca:	68fb      	ldr	r3, [r7, #12]
 80361cc:	4313      	orrs	r3, r2
 80361ce:	f043 0307 	orr.w	r3, r3, #7
 80361d2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80361d4:	687b      	ldr	r3, [r7, #4]
 80361d6:	68fa      	ldr	r2, [r7, #12]
 80361d8:	609a      	str	r2, [r3, #8]
}
 80361da:	bf00      	nop
 80361dc:	3714      	adds	r7, #20
 80361de:	46bd      	mov	sp, r7
 80361e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80361e4:	4770      	bx	lr
 80361e6:	bf00      	nop
 80361e8:	ffcfff8f 	.word	0xffcfff8f

080361ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80361ec:	b480      	push	{r7}
 80361ee:	b087      	sub	sp, #28
 80361f0:	af00      	add	r7, sp, #0
 80361f2:	60f8      	str	r0, [r7, #12]
 80361f4:	60b9      	str	r1, [r7, #8]
 80361f6:	607a      	str	r2, [r7, #4]
 80361f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80361fa:	68fb      	ldr	r3, [r7, #12]
 80361fc:	689b      	ldr	r3, [r3, #8]
 80361fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8036200:	697b      	ldr	r3, [r7, #20]
 8036202:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8036206:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8036208:	683b      	ldr	r3, [r7, #0]
 803620a:	021a      	lsls	r2, r3, #8
 803620c:	687b      	ldr	r3, [r7, #4]
 803620e:	431a      	orrs	r2, r3
 8036210:	68bb      	ldr	r3, [r7, #8]
 8036212:	4313      	orrs	r3, r2
 8036214:	697a      	ldr	r2, [r7, #20]
 8036216:	4313      	orrs	r3, r2
 8036218:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 803621a:	68fb      	ldr	r3, [r7, #12]
 803621c:	697a      	ldr	r2, [r7, #20]
 803621e:	609a      	str	r2, [r3, #8]
}
 8036220:	bf00      	nop
 8036222:	371c      	adds	r7, #28
 8036224:	46bd      	mov	sp, r7
 8036226:	f85d 7b04 	ldr.w	r7, [sp], #4
 803622a:	4770      	bx	lr

0803622c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 803622c:	b480      	push	{r7}
 803622e:	b085      	sub	sp, #20
 8036230:	af00      	add	r7, sp, #0
 8036232:	6078      	str	r0, [r7, #4]
 8036234:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8036236:	687b      	ldr	r3, [r7, #4]
 8036238:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 803623c:	2b01      	cmp	r3, #1
 803623e:	d101      	bne.n	8036244 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8036240:	2302      	movs	r3, #2
 8036242:	e06d      	b.n	8036320 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8036244:	687b      	ldr	r3, [r7, #4]
 8036246:	2201      	movs	r2, #1
 8036248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 803624c:	687b      	ldr	r3, [r7, #4]
 803624e:	2202      	movs	r2, #2
 8036250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8036254:	687b      	ldr	r3, [r7, #4]
 8036256:	681b      	ldr	r3, [r3, #0]
 8036258:	685b      	ldr	r3, [r3, #4]
 803625a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 803625c:	687b      	ldr	r3, [r7, #4]
 803625e:	681b      	ldr	r3, [r3, #0]
 8036260:	689b      	ldr	r3, [r3, #8]
 8036262:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8036264:	687b      	ldr	r3, [r7, #4]
 8036266:	681b      	ldr	r3, [r3, #0]
 8036268:	4a30      	ldr	r2, [pc, #192]	; (803632c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 803626a:	4293      	cmp	r3, r2
 803626c:	d004      	beq.n	8036278 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 803626e:	687b      	ldr	r3, [r7, #4]
 8036270:	681b      	ldr	r3, [r3, #0]
 8036272:	4a2f      	ldr	r2, [pc, #188]	; (8036330 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8036274:	4293      	cmp	r3, r2
 8036276:	d108      	bne.n	803628a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8036278:	68fb      	ldr	r3, [r7, #12]
 803627a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 803627e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8036280:	683b      	ldr	r3, [r7, #0]
 8036282:	685b      	ldr	r3, [r3, #4]
 8036284:	68fa      	ldr	r2, [r7, #12]
 8036286:	4313      	orrs	r3, r2
 8036288:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 803628a:	68fb      	ldr	r3, [r7, #12]
 803628c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8036290:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8036292:	683b      	ldr	r3, [r7, #0]
 8036294:	681b      	ldr	r3, [r3, #0]
 8036296:	68fa      	ldr	r2, [r7, #12]
 8036298:	4313      	orrs	r3, r2
 803629a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 803629c:	687b      	ldr	r3, [r7, #4]
 803629e:	681b      	ldr	r3, [r3, #0]
 80362a0:	68fa      	ldr	r2, [r7, #12]
 80362a2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80362a4:	687b      	ldr	r3, [r7, #4]
 80362a6:	681b      	ldr	r3, [r3, #0]
 80362a8:	4a20      	ldr	r2, [pc, #128]	; (803632c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80362aa:	4293      	cmp	r3, r2
 80362ac:	d022      	beq.n	80362f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80362ae:	687b      	ldr	r3, [r7, #4]
 80362b0:	681b      	ldr	r3, [r3, #0]
 80362b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80362b6:	d01d      	beq.n	80362f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80362b8:	687b      	ldr	r3, [r7, #4]
 80362ba:	681b      	ldr	r3, [r3, #0]
 80362bc:	4a1d      	ldr	r2, [pc, #116]	; (8036334 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80362be:	4293      	cmp	r3, r2
 80362c0:	d018      	beq.n	80362f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80362c2:	687b      	ldr	r3, [r7, #4]
 80362c4:	681b      	ldr	r3, [r3, #0]
 80362c6:	4a1c      	ldr	r2, [pc, #112]	; (8036338 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80362c8:	4293      	cmp	r3, r2
 80362ca:	d013      	beq.n	80362f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80362cc:	687b      	ldr	r3, [r7, #4]
 80362ce:	681b      	ldr	r3, [r3, #0]
 80362d0:	4a1a      	ldr	r2, [pc, #104]	; (803633c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80362d2:	4293      	cmp	r3, r2
 80362d4:	d00e      	beq.n	80362f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80362d6:	687b      	ldr	r3, [r7, #4]
 80362d8:	681b      	ldr	r3, [r3, #0]
 80362da:	4a15      	ldr	r2, [pc, #84]	; (8036330 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80362dc:	4293      	cmp	r3, r2
 80362de:	d009      	beq.n	80362f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80362e0:	687b      	ldr	r3, [r7, #4]
 80362e2:	681b      	ldr	r3, [r3, #0]
 80362e4:	4a16      	ldr	r2, [pc, #88]	; (8036340 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80362e6:	4293      	cmp	r3, r2
 80362e8:	d004      	beq.n	80362f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80362ea:	687b      	ldr	r3, [r7, #4]
 80362ec:	681b      	ldr	r3, [r3, #0]
 80362ee:	4a15      	ldr	r2, [pc, #84]	; (8036344 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80362f0:	4293      	cmp	r3, r2
 80362f2:	d10c      	bne.n	803630e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80362f4:	68bb      	ldr	r3, [r7, #8]
 80362f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80362fa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80362fc:	683b      	ldr	r3, [r7, #0]
 80362fe:	689b      	ldr	r3, [r3, #8]
 8036300:	68ba      	ldr	r2, [r7, #8]
 8036302:	4313      	orrs	r3, r2
 8036304:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8036306:	687b      	ldr	r3, [r7, #4]
 8036308:	681b      	ldr	r3, [r3, #0]
 803630a:	68ba      	ldr	r2, [r7, #8]
 803630c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 803630e:	687b      	ldr	r3, [r7, #4]
 8036310:	2201      	movs	r2, #1
 8036312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8036316:	687b      	ldr	r3, [r7, #4]
 8036318:	2200      	movs	r2, #0
 803631a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 803631e:	2300      	movs	r3, #0
}
 8036320:	4618      	mov	r0, r3
 8036322:	3714      	adds	r7, #20
 8036324:	46bd      	mov	sp, r7
 8036326:	f85d 7b04 	ldr.w	r7, [sp], #4
 803632a:	4770      	bx	lr
 803632c:	40010000 	.word	0x40010000
 8036330:	40010400 	.word	0x40010400
 8036334:	40000400 	.word	0x40000400
 8036338:	40000800 	.word	0x40000800
 803633c:	40000c00 	.word	0x40000c00
 8036340:	40001800 	.word	0x40001800
 8036344:	40014000 	.word	0x40014000

08036348 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8036348:	b480      	push	{r7}
 803634a:	b083      	sub	sp, #12
 803634c:	af00      	add	r7, sp, #0
 803634e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8036350:	bf00      	nop
 8036352:	370c      	adds	r7, #12
 8036354:	46bd      	mov	sp, r7
 8036356:	f85d 7b04 	ldr.w	r7, [sp], #4
 803635a:	4770      	bx	lr

0803635c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 803635c:	b480      	push	{r7}
 803635e:	b083      	sub	sp, #12
 8036360:	af00      	add	r7, sp, #0
 8036362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8036364:	bf00      	nop
 8036366:	370c      	adds	r7, #12
 8036368:	46bd      	mov	sp, r7
 803636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803636e:	4770      	bx	lr

08036370 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8036370:	b480      	push	{r7}
 8036372:	b083      	sub	sp, #12
 8036374:	af00      	add	r7, sp, #0
 8036376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8036378:	bf00      	nop
 803637a:	370c      	adds	r7, #12
 803637c:	46bd      	mov	sp, r7
 803637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8036382:	4770      	bx	lr

08036384 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8036384:	b580      	push	{r7, lr}
 8036386:	b082      	sub	sp, #8
 8036388:	af00      	add	r7, sp, #0
 803638a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 803638c:	687b      	ldr	r3, [r7, #4]
 803638e:	2b00      	cmp	r3, #0
 8036390:	d101      	bne.n	8036396 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8036392:	2301      	movs	r3, #1
 8036394:	e042      	b.n	803641c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8036396:	687b      	ldr	r3, [r7, #4]
 8036398:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 803639c:	2b00      	cmp	r3, #0
 803639e:	d106      	bne.n	80363ae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80363a0:	687b      	ldr	r3, [r7, #4]
 80363a2:	2200      	movs	r2, #0
 80363a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80363a8:	6878      	ldr	r0, [r7, #4]
 80363aa:	f7f5 fc65 	bl	802bc78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80363ae:	687b      	ldr	r3, [r7, #4]
 80363b0:	2224      	movs	r2, #36	; 0x24
 80363b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80363b6:	687b      	ldr	r3, [r7, #4]
 80363b8:	681b      	ldr	r3, [r3, #0]
 80363ba:	681a      	ldr	r2, [r3, #0]
 80363bc:	687b      	ldr	r3, [r7, #4]
 80363be:	681b      	ldr	r3, [r3, #0]
 80363c0:	f022 0201 	bic.w	r2, r2, #1
 80363c4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80363c6:	6878      	ldr	r0, [r7, #4]
 80363c8:	f000 fda0 	bl	8036f0c <UART_SetConfig>
 80363cc:	4603      	mov	r3, r0
 80363ce:	2b01      	cmp	r3, #1
 80363d0:	d101      	bne.n	80363d6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80363d2:	2301      	movs	r3, #1
 80363d4:	e022      	b.n	803641c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80363d6:	687b      	ldr	r3, [r7, #4]
 80363d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80363da:	2b00      	cmp	r3, #0
 80363dc:	d002      	beq.n	80363e4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80363de:	6878      	ldr	r0, [r7, #4]
 80363e0:	f001 fafc 	bl	80379dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80363e4:	687b      	ldr	r3, [r7, #4]
 80363e6:	681b      	ldr	r3, [r3, #0]
 80363e8:	685a      	ldr	r2, [r3, #4]
 80363ea:	687b      	ldr	r3, [r7, #4]
 80363ec:	681b      	ldr	r3, [r3, #0]
 80363ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80363f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80363f4:	687b      	ldr	r3, [r7, #4]
 80363f6:	681b      	ldr	r3, [r3, #0]
 80363f8:	689a      	ldr	r2, [r3, #8]
 80363fa:	687b      	ldr	r3, [r7, #4]
 80363fc:	681b      	ldr	r3, [r3, #0]
 80363fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8036402:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8036404:	687b      	ldr	r3, [r7, #4]
 8036406:	681b      	ldr	r3, [r3, #0]
 8036408:	681a      	ldr	r2, [r3, #0]
 803640a:	687b      	ldr	r3, [r7, #4]
 803640c:	681b      	ldr	r3, [r3, #0]
 803640e:	f042 0201 	orr.w	r2, r2, #1
 8036412:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8036414:	6878      	ldr	r0, [r7, #4]
 8036416:	f001 fb83 	bl	8037b20 <UART_CheckIdleState>
 803641a:	4603      	mov	r3, r0
}
 803641c:	4618      	mov	r0, r3
 803641e:	3708      	adds	r7, #8
 8036420:	46bd      	mov	sp, r7
 8036422:	bd80      	pop	{r7, pc}

08036424 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8036424:	b580      	push	{r7, lr}
 8036426:	b08a      	sub	sp, #40	; 0x28
 8036428:	af02      	add	r7, sp, #8
 803642a:	60f8      	str	r0, [r7, #12]
 803642c:	60b9      	str	r1, [r7, #8]
 803642e:	603b      	str	r3, [r7, #0]
 8036430:	4613      	mov	r3, r2
 8036432:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8036434:	68fb      	ldr	r3, [r7, #12]
 8036436:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 803643a:	2b20      	cmp	r3, #32
 803643c:	f040 8083 	bne.w	8036546 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8036440:	68bb      	ldr	r3, [r7, #8]
 8036442:	2b00      	cmp	r3, #0
 8036444:	d002      	beq.n	803644c <HAL_UART_Transmit+0x28>
 8036446:	88fb      	ldrh	r3, [r7, #6]
 8036448:	2b00      	cmp	r3, #0
 803644a:	d101      	bne.n	8036450 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 803644c:	2301      	movs	r3, #1
 803644e:	e07b      	b.n	8036548 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8036450:	68fb      	ldr	r3, [r7, #12]
 8036452:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8036456:	2b01      	cmp	r3, #1
 8036458:	d101      	bne.n	803645e <HAL_UART_Transmit+0x3a>
 803645a:	2302      	movs	r3, #2
 803645c:	e074      	b.n	8036548 <HAL_UART_Transmit+0x124>
 803645e:	68fb      	ldr	r3, [r7, #12]
 8036460:	2201      	movs	r2, #1
 8036462:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8036466:	68fb      	ldr	r3, [r7, #12]
 8036468:	2200      	movs	r2, #0
 803646a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 803646e:	68fb      	ldr	r3, [r7, #12]
 8036470:	2221      	movs	r2, #33	; 0x21
 8036472:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8036476:	f7f5 fe5b 	bl	802c130 <HAL_GetTick>
 803647a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 803647c:	68fb      	ldr	r3, [r7, #12]
 803647e:	88fa      	ldrh	r2, [r7, #6]
 8036480:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8036484:	68fb      	ldr	r3, [r7, #12]
 8036486:	88fa      	ldrh	r2, [r7, #6]
 8036488:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 803648c:	68fb      	ldr	r3, [r7, #12]
 803648e:	689b      	ldr	r3, [r3, #8]
 8036490:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8036494:	d108      	bne.n	80364a8 <HAL_UART_Transmit+0x84>
 8036496:	68fb      	ldr	r3, [r7, #12]
 8036498:	691b      	ldr	r3, [r3, #16]
 803649a:	2b00      	cmp	r3, #0
 803649c:	d104      	bne.n	80364a8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 803649e:	2300      	movs	r3, #0
 80364a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80364a2:	68bb      	ldr	r3, [r7, #8]
 80364a4:	61bb      	str	r3, [r7, #24]
 80364a6:	e003      	b.n	80364b0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80364a8:	68bb      	ldr	r3, [r7, #8]
 80364aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80364ac:	2300      	movs	r3, #0
 80364ae:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80364b0:	68fb      	ldr	r3, [r7, #12]
 80364b2:	2200      	movs	r2, #0
 80364b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80364b8:	e02c      	b.n	8036514 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80364ba:	683b      	ldr	r3, [r7, #0]
 80364bc:	9300      	str	r3, [sp, #0]
 80364be:	697b      	ldr	r3, [r7, #20]
 80364c0:	2200      	movs	r2, #0
 80364c2:	2180      	movs	r1, #128	; 0x80
 80364c4:	68f8      	ldr	r0, [r7, #12]
 80364c6:	f001 fb76 	bl	8037bb6 <UART_WaitOnFlagUntilTimeout>
 80364ca:	4603      	mov	r3, r0
 80364cc:	2b00      	cmp	r3, #0
 80364ce:	d001      	beq.n	80364d4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80364d0:	2303      	movs	r3, #3
 80364d2:	e039      	b.n	8036548 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80364d4:	69fb      	ldr	r3, [r7, #28]
 80364d6:	2b00      	cmp	r3, #0
 80364d8:	d10b      	bne.n	80364f2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80364da:	69bb      	ldr	r3, [r7, #24]
 80364dc:	881b      	ldrh	r3, [r3, #0]
 80364de:	461a      	mov	r2, r3
 80364e0:	68fb      	ldr	r3, [r7, #12]
 80364e2:	681b      	ldr	r3, [r3, #0]
 80364e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80364e8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80364ea:	69bb      	ldr	r3, [r7, #24]
 80364ec:	3302      	adds	r3, #2
 80364ee:	61bb      	str	r3, [r7, #24]
 80364f0:	e007      	b.n	8036502 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80364f2:	69fb      	ldr	r3, [r7, #28]
 80364f4:	781a      	ldrb	r2, [r3, #0]
 80364f6:	68fb      	ldr	r3, [r7, #12]
 80364f8:	681b      	ldr	r3, [r3, #0]
 80364fa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80364fc:	69fb      	ldr	r3, [r7, #28]
 80364fe:	3301      	adds	r3, #1
 8036500:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8036502:	68fb      	ldr	r3, [r7, #12]
 8036504:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8036508:	b29b      	uxth	r3, r3
 803650a:	3b01      	subs	r3, #1
 803650c:	b29a      	uxth	r2, r3
 803650e:	68fb      	ldr	r3, [r7, #12]
 8036510:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8036514:	68fb      	ldr	r3, [r7, #12]
 8036516:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 803651a:	b29b      	uxth	r3, r3
 803651c:	2b00      	cmp	r3, #0
 803651e:	d1cc      	bne.n	80364ba <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8036520:	683b      	ldr	r3, [r7, #0]
 8036522:	9300      	str	r3, [sp, #0]
 8036524:	697b      	ldr	r3, [r7, #20]
 8036526:	2200      	movs	r2, #0
 8036528:	2140      	movs	r1, #64	; 0x40
 803652a:	68f8      	ldr	r0, [r7, #12]
 803652c:	f001 fb43 	bl	8037bb6 <UART_WaitOnFlagUntilTimeout>
 8036530:	4603      	mov	r3, r0
 8036532:	2b00      	cmp	r3, #0
 8036534:	d001      	beq.n	803653a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8036536:	2303      	movs	r3, #3
 8036538:	e006      	b.n	8036548 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 803653a:	68fb      	ldr	r3, [r7, #12]
 803653c:	2220      	movs	r2, #32
 803653e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8036542:	2300      	movs	r3, #0
 8036544:	e000      	b.n	8036548 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8036546:	2302      	movs	r3, #2
  }
}
 8036548:	4618      	mov	r0, r3
 803654a:	3720      	adds	r7, #32
 803654c:	46bd      	mov	sp, r7
 803654e:	bd80      	pop	{r7, pc}

08036550 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8036550:	b580      	push	{r7, lr}
 8036552:	b08a      	sub	sp, #40	; 0x28
 8036554:	af02      	add	r7, sp, #8
 8036556:	60f8      	str	r0, [r7, #12]
 8036558:	60b9      	str	r1, [r7, #8]
 803655a:	603b      	str	r3, [r7, #0]
 803655c:	4613      	mov	r3, r2
 803655e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8036560:	68fb      	ldr	r3, [r7, #12]
 8036562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8036566:	2b20      	cmp	r3, #32
 8036568:	f040 80c0 	bne.w	80366ec <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 803656c:	68bb      	ldr	r3, [r7, #8]
 803656e:	2b00      	cmp	r3, #0
 8036570:	d002      	beq.n	8036578 <HAL_UART_Receive+0x28>
 8036572:	88fb      	ldrh	r3, [r7, #6]
 8036574:	2b00      	cmp	r3, #0
 8036576:	d101      	bne.n	803657c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8036578:	2301      	movs	r3, #1
 803657a:	e0b8      	b.n	80366ee <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 803657c:	68fb      	ldr	r3, [r7, #12]
 803657e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8036582:	2b01      	cmp	r3, #1
 8036584:	d101      	bne.n	803658a <HAL_UART_Receive+0x3a>
 8036586:	2302      	movs	r3, #2
 8036588:	e0b1      	b.n	80366ee <HAL_UART_Receive+0x19e>
 803658a:	68fb      	ldr	r3, [r7, #12]
 803658c:	2201      	movs	r2, #1
 803658e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8036592:	68fb      	ldr	r3, [r7, #12]
 8036594:	2200      	movs	r2, #0
 8036596:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 803659a:	68fb      	ldr	r3, [r7, #12]
 803659c:	2222      	movs	r2, #34	; 0x22
 803659e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80365a2:	68fb      	ldr	r3, [r7, #12]
 80365a4:	2200      	movs	r2, #0
 80365a6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80365a8:	f7f5 fdc2 	bl	802c130 <HAL_GetTick>
 80365ac:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80365ae:	68fb      	ldr	r3, [r7, #12]
 80365b0:	88fa      	ldrh	r2, [r7, #6]
 80365b2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80365b6:	68fb      	ldr	r3, [r7, #12]
 80365b8:	88fa      	ldrh	r2, [r7, #6]
 80365ba:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80365be:	68fb      	ldr	r3, [r7, #12]
 80365c0:	689b      	ldr	r3, [r3, #8]
 80365c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80365c6:	d10e      	bne.n	80365e6 <HAL_UART_Receive+0x96>
 80365c8:	68fb      	ldr	r3, [r7, #12]
 80365ca:	691b      	ldr	r3, [r3, #16]
 80365cc:	2b00      	cmp	r3, #0
 80365ce:	d105      	bne.n	80365dc <HAL_UART_Receive+0x8c>
 80365d0:	68fb      	ldr	r3, [r7, #12]
 80365d2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80365d6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80365da:	e02d      	b.n	8036638 <HAL_UART_Receive+0xe8>
 80365dc:	68fb      	ldr	r3, [r7, #12]
 80365de:	22ff      	movs	r2, #255	; 0xff
 80365e0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80365e4:	e028      	b.n	8036638 <HAL_UART_Receive+0xe8>
 80365e6:	68fb      	ldr	r3, [r7, #12]
 80365e8:	689b      	ldr	r3, [r3, #8]
 80365ea:	2b00      	cmp	r3, #0
 80365ec:	d10d      	bne.n	803660a <HAL_UART_Receive+0xba>
 80365ee:	68fb      	ldr	r3, [r7, #12]
 80365f0:	691b      	ldr	r3, [r3, #16]
 80365f2:	2b00      	cmp	r3, #0
 80365f4:	d104      	bne.n	8036600 <HAL_UART_Receive+0xb0>
 80365f6:	68fb      	ldr	r3, [r7, #12]
 80365f8:	22ff      	movs	r2, #255	; 0xff
 80365fa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80365fe:	e01b      	b.n	8036638 <HAL_UART_Receive+0xe8>
 8036600:	68fb      	ldr	r3, [r7, #12]
 8036602:	227f      	movs	r2, #127	; 0x7f
 8036604:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8036608:	e016      	b.n	8036638 <HAL_UART_Receive+0xe8>
 803660a:	68fb      	ldr	r3, [r7, #12]
 803660c:	689b      	ldr	r3, [r3, #8]
 803660e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8036612:	d10d      	bne.n	8036630 <HAL_UART_Receive+0xe0>
 8036614:	68fb      	ldr	r3, [r7, #12]
 8036616:	691b      	ldr	r3, [r3, #16]
 8036618:	2b00      	cmp	r3, #0
 803661a:	d104      	bne.n	8036626 <HAL_UART_Receive+0xd6>
 803661c:	68fb      	ldr	r3, [r7, #12]
 803661e:	227f      	movs	r2, #127	; 0x7f
 8036620:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8036624:	e008      	b.n	8036638 <HAL_UART_Receive+0xe8>
 8036626:	68fb      	ldr	r3, [r7, #12]
 8036628:	223f      	movs	r2, #63	; 0x3f
 803662a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 803662e:	e003      	b.n	8036638 <HAL_UART_Receive+0xe8>
 8036630:	68fb      	ldr	r3, [r7, #12]
 8036632:	2200      	movs	r2, #0
 8036634:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8036638:	68fb      	ldr	r3, [r7, #12]
 803663a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 803663e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8036640:	68fb      	ldr	r3, [r7, #12]
 8036642:	689b      	ldr	r3, [r3, #8]
 8036644:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8036648:	d108      	bne.n	803665c <HAL_UART_Receive+0x10c>
 803664a:	68fb      	ldr	r3, [r7, #12]
 803664c:	691b      	ldr	r3, [r3, #16]
 803664e:	2b00      	cmp	r3, #0
 8036650:	d104      	bne.n	803665c <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 8036652:	2300      	movs	r3, #0
 8036654:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8036656:	68bb      	ldr	r3, [r7, #8]
 8036658:	61bb      	str	r3, [r7, #24]
 803665a:	e003      	b.n	8036664 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 803665c:	68bb      	ldr	r3, [r7, #8]
 803665e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8036660:	2300      	movs	r3, #0
 8036662:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8036664:	68fb      	ldr	r3, [r7, #12]
 8036666:	2200      	movs	r2, #0
 8036668:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 803666c:	e032      	b.n	80366d4 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 803666e:	683b      	ldr	r3, [r7, #0]
 8036670:	9300      	str	r3, [sp, #0]
 8036672:	697b      	ldr	r3, [r7, #20]
 8036674:	2200      	movs	r2, #0
 8036676:	2120      	movs	r1, #32
 8036678:	68f8      	ldr	r0, [r7, #12]
 803667a:	f001 fa9c 	bl	8037bb6 <UART_WaitOnFlagUntilTimeout>
 803667e:	4603      	mov	r3, r0
 8036680:	2b00      	cmp	r3, #0
 8036682:	d001      	beq.n	8036688 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 8036684:	2303      	movs	r3, #3
 8036686:	e032      	b.n	80366ee <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 8036688:	69fb      	ldr	r3, [r7, #28]
 803668a:	2b00      	cmp	r3, #0
 803668c:	d10c      	bne.n	80366a8 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 803668e:	68fb      	ldr	r3, [r7, #12]
 8036690:	681b      	ldr	r3, [r3, #0]
 8036692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8036694:	b29a      	uxth	r2, r3
 8036696:	8a7b      	ldrh	r3, [r7, #18]
 8036698:	4013      	ands	r3, r2
 803669a:	b29a      	uxth	r2, r3
 803669c:	69bb      	ldr	r3, [r7, #24]
 803669e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80366a0:	69bb      	ldr	r3, [r7, #24]
 80366a2:	3302      	adds	r3, #2
 80366a4:	61bb      	str	r3, [r7, #24]
 80366a6:	e00c      	b.n	80366c2 <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80366a8:	68fb      	ldr	r3, [r7, #12]
 80366aa:	681b      	ldr	r3, [r3, #0]
 80366ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80366ae:	b2da      	uxtb	r2, r3
 80366b0:	8a7b      	ldrh	r3, [r7, #18]
 80366b2:	b2db      	uxtb	r3, r3
 80366b4:	4013      	ands	r3, r2
 80366b6:	b2da      	uxtb	r2, r3
 80366b8:	69fb      	ldr	r3, [r7, #28]
 80366ba:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80366bc:	69fb      	ldr	r3, [r7, #28]
 80366be:	3301      	adds	r3, #1
 80366c0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80366c2:	68fb      	ldr	r3, [r7, #12]
 80366c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80366c8:	b29b      	uxth	r3, r3
 80366ca:	3b01      	subs	r3, #1
 80366cc:	b29a      	uxth	r2, r3
 80366ce:	68fb      	ldr	r3, [r7, #12]
 80366d0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 80366d4:	68fb      	ldr	r3, [r7, #12]
 80366d6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80366da:	b29b      	uxth	r3, r3
 80366dc:	2b00      	cmp	r3, #0
 80366de:	d1c6      	bne.n	803666e <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80366e0:	68fb      	ldr	r3, [r7, #12]
 80366e2:	2220      	movs	r2, #32
 80366e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80366e8:	2300      	movs	r3, #0
 80366ea:	e000      	b.n	80366ee <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 80366ec:	2302      	movs	r3, #2
  }
}
 80366ee:	4618      	mov	r0, r3
 80366f0:	3720      	adds	r7, #32
 80366f2:	46bd      	mov	sp, r7
 80366f4:	bd80      	pop	{r7, pc}
	...

080366f8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80366f8:	b580      	push	{r7, lr}
 80366fa:	b08a      	sub	sp, #40	; 0x28
 80366fc:	af00      	add	r7, sp, #0
 80366fe:	60f8      	str	r0, [r7, #12]
 8036700:	60b9      	str	r1, [r7, #8]
 8036702:	4613      	mov	r3, r2
 8036704:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8036706:	68fb      	ldr	r3, [r7, #12]
 8036708:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 803670c:	2b20      	cmp	r3, #32
 803670e:	d142      	bne.n	8036796 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8036710:	68bb      	ldr	r3, [r7, #8]
 8036712:	2b00      	cmp	r3, #0
 8036714:	d002      	beq.n	803671c <HAL_UART_Receive_IT+0x24>
 8036716:	88fb      	ldrh	r3, [r7, #6]
 8036718:	2b00      	cmp	r3, #0
 803671a:	d101      	bne.n	8036720 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 803671c:	2301      	movs	r3, #1
 803671e:	e03b      	b.n	8036798 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8036720:	68fb      	ldr	r3, [r7, #12]
 8036722:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8036726:	2b01      	cmp	r3, #1
 8036728:	d101      	bne.n	803672e <HAL_UART_Receive_IT+0x36>
 803672a:	2302      	movs	r3, #2
 803672c:	e034      	b.n	8036798 <HAL_UART_Receive_IT+0xa0>
 803672e:	68fb      	ldr	r3, [r7, #12]
 8036730:	2201      	movs	r2, #1
 8036732:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8036736:	68fb      	ldr	r3, [r7, #12]
 8036738:	2200      	movs	r2, #0
 803673a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 803673c:	68fb      	ldr	r3, [r7, #12]
 803673e:	681b      	ldr	r3, [r3, #0]
 8036740:	4a17      	ldr	r2, [pc, #92]	; (80367a0 <HAL_UART_Receive_IT+0xa8>)
 8036742:	4293      	cmp	r3, r2
 8036744:	d01f      	beq.n	8036786 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8036746:	68fb      	ldr	r3, [r7, #12]
 8036748:	681b      	ldr	r3, [r3, #0]
 803674a:	685b      	ldr	r3, [r3, #4]
 803674c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8036750:	2b00      	cmp	r3, #0
 8036752:	d018      	beq.n	8036786 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8036754:	68fb      	ldr	r3, [r7, #12]
 8036756:	681b      	ldr	r3, [r3, #0]
 8036758:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803675a:	697b      	ldr	r3, [r7, #20]
 803675c:	e853 3f00 	ldrex	r3, [r3]
 8036760:	613b      	str	r3, [r7, #16]
   return(result);
 8036762:	693b      	ldr	r3, [r7, #16]
 8036764:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8036768:	627b      	str	r3, [r7, #36]	; 0x24
 803676a:	68fb      	ldr	r3, [r7, #12]
 803676c:	681b      	ldr	r3, [r3, #0]
 803676e:	461a      	mov	r2, r3
 8036770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8036772:	623b      	str	r3, [r7, #32]
 8036774:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036776:	69f9      	ldr	r1, [r7, #28]
 8036778:	6a3a      	ldr	r2, [r7, #32]
 803677a:	e841 2300 	strex	r3, r2, [r1]
 803677e:	61bb      	str	r3, [r7, #24]
   return(result);
 8036780:	69bb      	ldr	r3, [r7, #24]
 8036782:	2b00      	cmp	r3, #0
 8036784:	d1e6      	bne.n	8036754 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8036786:	88fb      	ldrh	r3, [r7, #6]
 8036788:	461a      	mov	r2, r3
 803678a:	68b9      	ldr	r1, [r7, #8]
 803678c:	68f8      	ldr	r0, [r7, #12]
 803678e:	f001 fadb 	bl	8037d48 <UART_Start_Receive_IT>
 8036792:	4603      	mov	r3, r0
 8036794:	e000      	b.n	8036798 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8036796:	2302      	movs	r3, #2
  }
}
 8036798:	4618      	mov	r0, r3
 803679a:	3728      	adds	r7, #40	; 0x28
 803679c:	46bd      	mov	sp, r7
 803679e:	bd80      	pop	{r7, pc}
 80367a0:	58000c00 	.word	0x58000c00

080367a4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80367a4:	b580      	push	{r7, lr}
 80367a6:	b0ba      	sub	sp, #232	; 0xe8
 80367a8:	af00      	add	r7, sp, #0
 80367aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80367ac:	687b      	ldr	r3, [r7, #4]
 80367ae:	681b      	ldr	r3, [r3, #0]
 80367b0:	69db      	ldr	r3, [r3, #28]
 80367b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80367b6:	687b      	ldr	r3, [r7, #4]
 80367b8:	681b      	ldr	r3, [r3, #0]
 80367ba:	681b      	ldr	r3, [r3, #0]
 80367bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80367c0:	687b      	ldr	r3, [r7, #4]
 80367c2:	681b      	ldr	r3, [r3, #0]
 80367c4:	689b      	ldr	r3, [r3, #8]
 80367c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80367ca:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80367ce:	f640 030f 	movw	r3, #2063	; 0x80f
 80367d2:	4013      	ands	r3, r2
 80367d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80367d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80367dc:	2b00      	cmp	r3, #0
 80367de:	d11b      	bne.n	8036818 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80367e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80367e4:	f003 0320 	and.w	r3, r3, #32
 80367e8:	2b00      	cmp	r3, #0
 80367ea:	d015      	beq.n	8036818 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80367ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80367f0:	f003 0320 	and.w	r3, r3, #32
 80367f4:	2b00      	cmp	r3, #0
 80367f6:	d105      	bne.n	8036804 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80367f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80367fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8036800:	2b00      	cmp	r3, #0
 8036802:	d009      	beq.n	8036818 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8036804:	687b      	ldr	r3, [r7, #4]
 8036806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8036808:	2b00      	cmp	r3, #0
 803680a:	f000 835a 	beq.w	8036ec2 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 803680e:	687b      	ldr	r3, [r7, #4]
 8036810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8036812:	6878      	ldr	r0, [r7, #4]
 8036814:	4798      	blx	r3
      }
      return;
 8036816:	e354      	b.n	8036ec2 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8036818:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 803681c:	2b00      	cmp	r3, #0
 803681e:	f000 811f 	beq.w	8036a60 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8036822:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8036826:	4b8b      	ldr	r3, [pc, #556]	; (8036a54 <HAL_UART_IRQHandler+0x2b0>)
 8036828:	4013      	ands	r3, r2
 803682a:	2b00      	cmp	r3, #0
 803682c:	d106      	bne.n	803683c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 803682e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8036832:	4b89      	ldr	r3, [pc, #548]	; (8036a58 <HAL_UART_IRQHandler+0x2b4>)
 8036834:	4013      	ands	r3, r2
 8036836:	2b00      	cmp	r3, #0
 8036838:	f000 8112 	beq.w	8036a60 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 803683c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8036840:	f003 0301 	and.w	r3, r3, #1
 8036844:	2b00      	cmp	r3, #0
 8036846:	d011      	beq.n	803686c <HAL_UART_IRQHandler+0xc8>
 8036848:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 803684c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8036850:	2b00      	cmp	r3, #0
 8036852:	d00b      	beq.n	803686c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8036854:	687b      	ldr	r3, [r7, #4]
 8036856:	681b      	ldr	r3, [r3, #0]
 8036858:	2201      	movs	r2, #1
 803685a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 803685c:	687b      	ldr	r3, [r7, #4]
 803685e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8036862:	f043 0201 	orr.w	r2, r3, #1
 8036866:	687b      	ldr	r3, [r7, #4]
 8036868:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 803686c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8036870:	f003 0302 	and.w	r3, r3, #2
 8036874:	2b00      	cmp	r3, #0
 8036876:	d011      	beq.n	803689c <HAL_UART_IRQHandler+0xf8>
 8036878:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 803687c:	f003 0301 	and.w	r3, r3, #1
 8036880:	2b00      	cmp	r3, #0
 8036882:	d00b      	beq.n	803689c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8036884:	687b      	ldr	r3, [r7, #4]
 8036886:	681b      	ldr	r3, [r3, #0]
 8036888:	2202      	movs	r2, #2
 803688a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 803688c:	687b      	ldr	r3, [r7, #4]
 803688e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8036892:	f043 0204 	orr.w	r2, r3, #4
 8036896:	687b      	ldr	r3, [r7, #4]
 8036898:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 803689c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80368a0:	f003 0304 	and.w	r3, r3, #4
 80368a4:	2b00      	cmp	r3, #0
 80368a6:	d011      	beq.n	80368cc <HAL_UART_IRQHandler+0x128>
 80368a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80368ac:	f003 0301 	and.w	r3, r3, #1
 80368b0:	2b00      	cmp	r3, #0
 80368b2:	d00b      	beq.n	80368cc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80368b4:	687b      	ldr	r3, [r7, #4]
 80368b6:	681b      	ldr	r3, [r3, #0]
 80368b8:	2204      	movs	r2, #4
 80368ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80368bc:	687b      	ldr	r3, [r7, #4]
 80368be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80368c2:	f043 0202 	orr.w	r2, r3, #2
 80368c6:	687b      	ldr	r3, [r7, #4]
 80368c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80368cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80368d0:	f003 0308 	and.w	r3, r3, #8
 80368d4:	2b00      	cmp	r3, #0
 80368d6:	d017      	beq.n	8036908 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80368d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80368dc:	f003 0320 	and.w	r3, r3, #32
 80368e0:	2b00      	cmp	r3, #0
 80368e2:	d105      	bne.n	80368f0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80368e4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80368e8:	4b5a      	ldr	r3, [pc, #360]	; (8036a54 <HAL_UART_IRQHandler+0x2b0>)
 80368ea:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80368ec:	2b00      	cmp	r3, #0
 80368ee:	d00b      	beq.n	8036908 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80368f0:	687b      	ldr	r3, [r7, #4]
 80368f2:	681b      	ldr	r3, [r3, #0]
 80368f4:	2208      	movs	r2, #8
 80368f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80368f8:	687b      	ldr	r3, [r7, #4]
 80368fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80368fe:	f043 0208 	orr.w	r2, r3, #8
 8036902:	687b      	ldr	r3, [r7, #4]
 8036904:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8036908:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 803690c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8036910:	2b00      	cmp	r3, #0
 8036912:	d012      	beq.n	803693a <HAL_UART_IRQHandler+0x196>
 8036914:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8036918:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 803691c:	2b00      	cmp	r3, #0
 803691e:	d00c      	beq.n	803693a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8036920:	687b      	ldr	r3, [r7, #4]
 8036922:	681b      	ldr	r3, [r3, #0]
 8036924:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8036928:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 803692a:	687b      	ldr	r3, [r7, #4]
 803692c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8036930:	f043 0220 	orr.w	r2, r3, #32
 8036934:	687b      	ldr	r3, [r7, #4]
 8036936:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 803693a:	687b      	ldr	r3, [r7, #4]
 803693c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8036940:	2b00      	cmp	r3, #0
 8036942:	f000 82c0 	beq.w	8036ec6 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8036946:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 803694a:	f003 0320 	and.w	r3, r3, #32
 803694e:	2b00      	cmp	r3, #0
 8036950:	d013      	beq.n	803697a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8036952:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8036956:	f003 0320 	and.w	r3, r3, #32
 803695a:	2b00      	cmp	r3, #0
 803695c:	d105      	bne.n	803696a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 803695e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8036962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8036966:	2b00      	cmp	r3, #0
 8036968:	d007      	beq.n	803697a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 803696a:	687b      	ldr	r3, [r7, #4]
 803696c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 803696e:	2b00      	cmp	r3, #0
 8036970:	d003      	beq.n	803697a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8036972:	687b      	ldr	r3, [r7, #4]
 8036974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8036976:	6878      	ldr	r0, [r7, #4]
 8036978:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 803697a:	687b      	ldr	r3, [r7, #4]
 803697c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8036980:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8036984:	687b      	ldr	r3, [r7, #4]
 8036986:	681b      	ldr	r3, [r3, #0]
 8036988:	689b      	ldr	r3, [r3, #8]
 803698a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 803698e:	2b40      	cmp	r3, #64	; 0x40
 8036990:	d005      	beq.n	803699e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8036992:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8036996:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 803699a:	2b00      	cmp	r3, #0
 803699c:	d04f      	beq.n	8036a3e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 803699e:	6878      	ldr	r0, [r7, #4]
 80369a0:	f001 fafc 	bl	8037f9c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80369a4:	687b      	ldr	r3, [r7, #4]
 80369a6:	681b      	ldr	r3, [r3, #0]
 80369a8:	689b      	ldr	r3, [r3, #8]
 80369aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80369ae:	2b40      	cmp	r3, #64	; 0x40
 80369b0:	d141      	bne.n	8036a36 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80369b2:	687b      	ldr	r3, [r7, #4]
 80369b4:	681b      	ldr	r3, [r3, #0]
 80369b6:	3308      	adds	r3, #8
 80369b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80369bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80369c0:	e853 3f00 	ldrex	r3, [r3]
 80369c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80369c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80369cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80369d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80369d4:	687b      	ldr	r3, [r7, #4]
 80369d6:	681b      	ldr	r3, [r3, #0]
 80369d8:	3308      	adds	r3, #8
 80369da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80369de:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80369e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80369e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80369ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80369ee:	e841 2300 	strex	r3, r2, [r1]
 80369f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80369f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80369fa:	2b00      	cmp	r3, #0
 80369fc:	d1d9      	bne.n	80369b2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80369fe:	687b      	ldr	r3, [r7, #4]
 8036a00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8036a02:	2b00      	cmp	r3, #0
 8036a04:	d013      	beq.n	8036a2e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8036a06:	687b      	ldr	r3, [r7, #4]
 8036a08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8036a0a:	4a14      	ldr	r2, [pc, #80]	; (8036a5c <HAL_UART_IRQHandler+0x2b8>)
 8036a0c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8036a0e:	687b      	ldr	r3, [r7, #4]
 8036a10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8036a12:	4618      	mov	r0, r3
 8036a14:	f7f7 f96c 	bl	802dcf0 <HAL_DMA_Abort_IT>
 8036a18:	4603      	mov	r3, r0
 8036a1a:	2b00      	cmp	r3, #0
 8036a1c:	d017      	beq.n	8036a4e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8036a1e:	687b      	ldr	r3, [r7, #4]
 8036a20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8036a22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8036a24:	687a      	ldr	r2, [r7, #4]
 8036a26:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8036a28:	4610      	mov	r0, r2
 8036a2a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8036a2c:	e00f      	b.n	8036a4e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8036a2e:	6878      	ldr	r0, [r7, #4]
 8036a30:	f000 fa56 	bl	8036ee0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8036a34:	e00b      	b.n	8036a4e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8036a36:	6878      	ldr	r0, [r7, #4]
 8036a38:	f000 fa52 	bl	8036ee0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8036a3c:	e007      	b.n	8036a4e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8036a3e:	6878      	ldr	r0, [r7, #4]
 8036a40:	f000 fa4e 	bl	8036ee0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8036a44:	687b      	ldr	r3, [r7, #4]
 8036a46:	2200      	movs	r2, #0
 8036a48:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8036a4c:	e23b      	b.n	8036ec6 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8036a4e:	bf00      	nop
    return;
 8036a50:	e239      	b.n	8036ec6 <HAL_UART_IRQHandler+0x722>
 8036a52:	bf00      	nop
 8036a54:	10000001 	.word	0x10000001
 8036a58:	04000120 	.word	0x04000120
 8036a5c:	08038069 	.word	0x08038069

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8036a60:	687b      	ldr	r3, [r7, #4]
 8036a62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8036a64:	2b01      	cmp	r3, #1
 8036a66:	f040 81ce 	bne.w	8036e06 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8036a6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8036a6e:	f003 0310 	and.w	r3, r3, #16
 8036a72:	2b00      	cmp	r3, #0
 8036a74:	f000 81c7 	beq.w	8036e06 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8036a78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8036a7c:	f003 0310 	and.w	r3, r3, #16
 8036a80:	2b00      	cmp	r3, #0
 8036a82:	f000 81c0 	beq.w	8036e06 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8036a86:	687b      	ldr	r3, [r7, #4]
 8036a88:	681b      	ldr	r3, [r3, #0]
 8036a8a:	2210      	movs	r2, #16
 8036a8c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8036a8e:	687b      	ldr	r3, [r7, #4]
 8036a90:	681b      	ldr	r3, [r3, #0]
 8036a92:	689b      	ldr	r3, [r3, #8]
 8036a94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8036a98:	2b40      	cmp	r3, #64	; 0x40
 8036a9a:	f040 813b 	bne.w	8036d14 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8036a9e:	687b      	ldr	r3, [r7, #4]
 8036aa0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8036aa2:	681b      	ldr	r3, [r3, #0]
 8036aa4:	4a8b      	ldr	r2, [pc, #556]	; (8036cd4 <HAL_UART_IRQHandler+0x530>)
 8036aa6:	4293      	cmp	r3, r2
 8036aa8:	d059      	beq.n	8036b5e <HAL_UART_IRQHandler+0x3ba>
 8036aaa:	687b      	ldr	r3, [r7, #4]
 8036aac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8036aae:	681b      	ldr	r3, [r3, #0]
 8036ab0:	4a89      	ldr	r2, [pc, #548]	; (8036cd8 <HAL_UART_IRQHandler+0x534>)
 8036ab2:	4293      	cmp	r3, r2
 8036ab4:	d053      	beq.n	8036b5e <HAL_UART_IRQHandler+0x3ba>
 8036ab6:	687b      	ldr	r3, [r7, #4]
 8036ab8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8036aba:	681b      	ldr	r3, [r3, #0]
 8036abc:	4a87      	ldr	r2, [pc, #540]	; (8036cdc <HAL_UART_IRQHandler+0x538>)
 8036abe:	4293      	cmp	r3, r2
 8036ac0:	d04d      	beq.n	8036b5e <HAL_UART_IRQHandler+0x3ba>
 8036ac2:	687b      	ldr	r3, [r7, #4]
 8036ac4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8036ac6:	681b      	ldr	r3, [r3, #0]
 8036ac8:	4a85      	ldr	r2, [pc, #532]	; (8036ce0 <HAL_UART_IRQHandler+0x53c>)
 8036aca:	4293      	cmp	r3, r2
 8036acc:	d047      	beq.n	8036b5e <HAL_UART_IRQHandler+0x3ba>
 8036ace:	687b      	ldr	r3, [r7, #4]
 8036ad0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8036ad2:	681b      	ldr	r3, [r3, #0]
 8036ad4:	4a83      	ldr	r2, [pc, #524]	; (8036ce4 <HAL_UART_IRQHandler+0x540>)
 8036ad6:	4293      	cmp	r3, r2
 8036ad8:	d041      	beq.n	8036b5e <HAL_UART_IRQHandler+0x3ba>
 8036ada:	687b      	ldr	r3, [r7, #4]
 8036adc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8036ade:	681b      	ldr	r3, [r3, #0]
 8036ae0:	4a81      	ldr	r2, [pc, #516]	; (8036ce8 <HAL_UART_IRQHandler+0x544>)
 8036ae2:	4293      	cmp	r3, r2
 8036ae4:	d03b      	beq.n	8036b5e <HAL_UART_IRQHandler+0x3ba>
 8036ae6:	687b      	ldr	r3, [r7, #4]
 8036ae8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8036aea:	681b      	ldr	r3, [r3, #0]
 8036aec:	4a7f      	ldr	r2, [pc, #508]	; (8036cec <HAL_UART_IRQHandler+0x548>)
 8036aee:	4293      	cmp	r3, r2
 8036af0:	d035      	beq.n	8036b5e <HAL_UART_IRQHandler+0x3ba>
 8036af2:	687b      	ldr	r3, [r7, #4]
 8036af4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8036af6:	681b      	ldr	r3, [r3, #0]
 8036af8:	4a7d      	ldr	r2, [pc, #500]	; (8036cf0 <HAL_UART_IRQHandler+0x54c>)
 8036afa:	4293      	cmp	r3, r2
 8036afc:	d02f      	beq.n	8036b5e <HAL_UART_IRQHandler+0x3ba>
 8036afe:	687b      	ldr	r3, [r7, #4]
 8036b00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8036b02:	681b      	ldr	r3, [r3, #0]
 8036b04:	4a7b      	ldr	r2, [pc, #492]	; (8036cf4 <HAL_UART_IRQHandler+0x550>)
 8036b06:	4293      	cmp	r3, r2
 8036b08:	d029      	beq.n	8036b5e <HAL_UART_IRQHandler+0x3ba>
 8036b0a:	687b      	ldr	r3, [r7, #4]
 8036b0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8036b0e:	681b      	ldr	r3, [r3, #0]
 8036b10:	4a79      	ldr	r2, [pc, #484]	; (8036cf8 <HAL_UART_IRQHandler+0x554>)
 8036b12:	4293      	cmp	r3, r2
 8036b14:	d023      	beq.n	8036b5e <HAL_UART_IRQHandler+0x3ba>
 8036b16:	687b      	ldr	r3, [r7, #4]
 8036b18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8036b1a:	681b      	ldr	r3, [r3, #0]
 8036b1c:	4a77      	ldr	r2, [pc, #476]	; (8036cfc <HAL_UART_IRQHandler+0x558>)
 8036b1e:	4293      	cmp	r3, r2
 8036b20:	d01d      	beq.n	8036b5e <HAL_UART_IRQHandler+0x3ba>
 8036b22:	687b      	ldr	r3, [r7, #4]
 8036b24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8036b26:	681b      	ldr	r3, [r3, #0]
 8036b28:	4a75      	ldr	r2, [pc, #468]	; (8036d00 <HAL_UART_IRQHandler+0x55c>)
 8036b2a:	4293      	cmp	r3, r2
 8036b2c:	d017      	beq.n	8036b5e <HAL_UART_IRQHandler+0x3ba>
 8036b2e:	687b      	ldr	r3, [r7, #4]
 8036b30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8036b32:	681b      	ldr	r3, [r3, #0]
 8036b34:	4a73      	ldr	r2, [pc, #460]	; (8036d04 <HAL_UART_IRQHandler+0x560>)
 8036b36:	4293      	cmp	r3, r2
 8036b38:	d011      	beq.n	8036b5e <HAL_UART_IRQHandler+0x3ba>
 8036b3a:	687b      	ldr	r3, [r7, #4]
 8036b3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8036b3e:	681b      	ldr	r3, [r3, #0]
 8036b40:	4a71      	ldr	r2, [pc, #452]	; (8036d08 <HAL_UART_IRQHandler+0x564>)
 8036b42:	4293      	cmp	r3, r2
 8036b44:	d00b      	beq.n	8036b5e <HAL_UART_IRQHandler+0x3ba>
 8036b46:	687b      	ldr	r3, [r7, #4]
 8036b48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8036b4a:	681b      	ldr	r3, [r3, #0]
 8036b4c:	4a6f      	ldr	r2, [pc, #444]	; (8036d0c <HAL_UART_IRQHandler+0x568>)
 8036b4e:	4293      	cmp	r3, r2
 8036b50:	d005      	beq.n	8036b5e <HAL_UART_IRQHandler+0x3ba>
 8036b52:	687b      	ldr	r3, [r7, #4]
 8036b54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8036b56:	681b      	ldr	r3, [r3, #0]
 8036b58:	4a6d      	ldr	r2, [pc, #436]	; (8036d10 <HAL_UART_IRQHandler+0x56c>)
 8036b5a:	4293      	cmp	r3, r2
 8036b5c:	d105      	bne.n	8036b6a <HAL_UART_IRQHandler+0x3c6>
 8036b5e:	687b      	ldr	r3, [r7, #4]
 8036b60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8036b62:	681b      	ldr	r3, [r3, #0]
 8036b64:	685b      	ldr	r3, [r3, #4]
 8036b66:	b29b      	uxth	r3, r3
 8036b68:	e004      	b.n	8036b74 <HAL_UART_IRQHandler+0x3d0>
 8036b6a:	687b      	ldr	r3, [r7, #4]
 8036b6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8036b6e:	681b      	ldr	r3, [r3, #0]
 8036b70:	685b      	ldr	r3, [r3, #4]
 8036b72:	b29b      	uxth	r3, r3
 8036b74:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8036b78:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8036b7c:	2b00      	cmp	r3, #0
 8036b7e:	f000 81a4 	beq.w	8036eca <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8036b82:	687b      	ldr	r3, [r7, #4]
 8036b84:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8036b88:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8036b8c:	429a      	cmp	r2, r3
 8036b8e:	f080 819c 	bcs.w	8036eca <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8036b92:	687b      	ldr	r3, [r7, #4]
 8036b94:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8036b98:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8036b9c:	687b      	ldr	r3, [r7, #4]
 8036b9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8036ba0:	69db      	ldr	r3, [r3, #28]
 8036ba2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8036ba6:	f000 8086 	beq.w	8036cb6 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8036baa:	687b      	ldr	r3, [r7, #4]
 8036bac:	681b      	ldr	r3, [r3, #0]
 8036bae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036bb2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8036bb6:	e853 3f00 	ldrex	r3, [r3]
 8036bba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8036bbe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8036bc2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8036bc6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8036bca:	687b      	ldr	r3, [r7, #4]
 8036bcc:	681b      	ldr	r3, [r3, #0]
 8036bce:	461a      	mov	r2, r3
 8036bd0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8036bd4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8036bd8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036bdc:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8036be0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8036be4:	e841 2300 	strex	r3, r2, [r1]
 8036be8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8036bec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8036bf0:	2b00      	cmp	r3, #0
 8036bf2:	d1da      	bne.n	8036baa <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8036bf4:	687b      	ldr	r3, [r7, #4]
 8036bf6:	681b      	ldr	r3, [r3, #0]
 8036bf8:	3308      	adds	r3, #8
 8036bfa:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036bfc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8036bfe:	e853 3f00 	ldrex	r3, [r3]
 8036c02:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8036c04:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8036c06:	f023 0301 	bic.w	r3, r3, #1
 8036c0a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8036c0e:	687b      	ldr	r3, [r7, #4]
 8036c10:	681b      	ldr	r3, [r3, #0]
 8036c12:	3308      	adds	r3, #8
 8036c14:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8036c18:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8036c1c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036c1e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8036c20:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8036c24:	e841 2300 	strex	r3, r2, [r1]
 8036c28:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8036c2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8036c2c:	2b00      	cmp	r3, #0
 8036c2e:	d1e1      	bne.n	8036bf4 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8036c30:	687b      	ldr	r3, [r7, #4]
 8036c32:	681b      	ldr	r3, [r3, #0]
 8036c34:	3308      	adds	r3, #8
 8036c36:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036c38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8036c3a:	e853 3f00 	ldrex	r3, [r3]
 8036c3e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8036c40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8036c42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8036c46:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8036c4a:	687b      	ldr	r3, [r7, #4]
 8036c4c:	681b      	ldr	r3, [r3, #0]
 8036c4e:	3308      	adds	r3, #8
 8036c50:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8036c54:	66fa      	str	r2, [r7, #108]	; 0x6c
 8036c56:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036c58:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8036c5a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8036c5c:	e841 2300 	strex	r3, r2, [r1]
 8036c60:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8036c62:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8036c64:	2b00      	cmp	r3, #0
 8036c66:	d1e3      	bne.n	8036c30 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8036c68:	687b      	ldr	r3, [r7, #4]
 8036c6a:	2220      	movs	r2, #32
 8036c6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8036c70:	687b      	ldr	r3, [r7, #4]
 8036c72:	2200      	movs	r2, #0
 8036c74:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8036c76:	687b      	ldr	r3, [r7, #4]
 8036c78:	681b      	ldr	r3, [r3, #0]
 8036c7a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036c7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8036c7e:	e853 3f00 	ldrex	r3, [r3]
 8036c82:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8036c84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8036c86:	f023 0310 	bic.w	r3, r3, #16
 8036c8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8036c8e:	687b      	ldr	r3, [r7, #4]
 8036c90:	681b      	ldr	r3, [r3, #0]
 8036c92:	461a      	mov	r2, r3
 8036c94:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8036c98:	65bb      	str	r3, [r7, #88]	; 0x58
 8036c9a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036c9c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8036c9e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8036ca0:	e841 2300 	strex	r3, r2, [r1]
 8036ca4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8036ca6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8036ca8:	2b00      	cmp	r3, #0
 8036caa:	d1e4      	bne.n	8036c76 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8036cac:	687b      	ldr	r3, [r7, #4]
 8036cae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8036cb0:	4618      	mov	r0, r3
 8036cb2:	f7f6 fcff 	bl	802d6b4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8036cb6:	687b      	ldr	r3, [r7, #4]
 8036cb8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8036cbc:	687b      	ldr	r3, [r7, #4]
 8036cbe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8036cc2:	b29b      	uxth	r3, r3
 8036cc4:	1ad3      	subs	r3, r2, r3
 8036cc6:	b29b      	uxth	r3, r3
 8036cc8:	4619      	mov	r1, r3
 8036cca:	6878      	ldr	r0, [r7, #4]
 8036ccc:	f000 f912 	bl	8036ef4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8036cd0:	e0fb      	b.n	8036eca <HAL_UART_IRQHandler+0x726>
 8036cd2:	bf00      	nop
 8036cd4:	40020010 	.word	0x40020010
 8036cd8:	40020028 	.word	0x40020028
 8036cdc:	40020040 	.word	0x40020040
 8036ce0:	40020058 	.word	0x40020058
 8036ce4:	40020070 	.word	0x40020070
 8036ce8:	40020088 	.word	0x40020088
 8036cec:	400200a0 	.word	0x400200a0
 8036cf0:	400200b8 	.word	0x400200b8
 8036cf4:	40020410 	.word	0x40020410
 8036cf8:	40020428 	.word	0x40020428
 8036cfc:	40020440 	.word	0x40020440
 8036d00:	40020458 	.word	0x40020458
 8036d04:	40020470 	.word	0x40020470
 8036d08:	40020488 	.word	0x40020488
 8036d0c:	400204a0 	.word	0x400204a0
 8036d10:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8036d14:	687b      	ldr	r3, [r7, #4]
 8036d16:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8036d1a:	687b      	ldr	r3, [r7, #4]
 8036d1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8036d20:	b29b      	uxth	r3, r3
 8036d22:	1ad3      	subs	r3, r2, r3
 8036d24:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8036d28:	687b      	ldr	r3, [r7, #4]
 8036d2a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8036d2e:	b29b      	uxth	r3, r3
 8036d30:	2b00      	cmp	r3, #0
 8036d32:	f000 80cc 	beq.w	8036ece <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 8036d36:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8036d3a:	2b00      	cmp	r3, #0
 8036d3c:	f000 80c7 	beq.w	8036ece <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8036d40:	687b      	ldr	r3, [r7, #4]
 8036d42:	681b      	ldr	r3, [r3, #0]
 8036d44:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8036d48:	e853 3f00 	ldrex	r3, [r3]
 8036d4c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8036d4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8036d50:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8036d54:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8036d58:	687b      	ldr	r3, [r7, #4]
 8036d5a:	681b      	ldr	r3, [r3, #0]
 8036d5c:	461a      	mov	r2, r3
 8036d5e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8036d62:	647b      	str	r3, [r7, #68]	; 0x44
 8036d64:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036d66:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8036d68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8036d6a:	e841 2300 	strex	r3, r2, [r1]
 8036d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8036d70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8036d72:	2b00      	cmp	r3, #0
 8036d74:	d1e4      	bne.n	8036d40 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8036d76:	687b      	ldr	r3, [r7, #4]
 8036d78:	681b      	ldr	r3, [r3, #0]
 8036d7a:	3308      	adds	r3, #8
 8036d7c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8036d80:	e853 3f00 	ldrex	r3, [r3]
 8036d84:	623b      	str	r3, [r7, #32]
   return(result);
 8036d86:	6a3a      	ldr	r2, [r7, #32]
 8036d88:	4b54      	ldr	r3, [pc, #336]	; (8036edc <HAL_UART_IRQHandler+0x738>)
 8036d8a:	4013      	ands	r3, r2
 8036d8c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8036d90:	687b      	ldr	r3, [r7, #4]
 8036d92:	681b      	ldr	r3, [r3, #0]
 8036d94:	3308      	adds	r3, #8
 8036d96:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8036d9a:	633a      	str	r2, [r7, #48]	; 0x30
 8036d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036d9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8036da0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8036da2:	e841 2300 	strex	r3, r2, [r1]
 8036da6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8036da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8036daa:	2b00      	cmp	r3, #0
 8036dac:	d1e3      	bne.n	8036d76 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8036dae:	687b      	ldr	r3, [r7, #4]
 8036db0:	2220      	movs	r2, #32
 8036db2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8036db6:	687b      	ldr	r3, [r7, #4]
 8036db8:	2200      	movs	r2, #0
 8036dba:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8036dbc:	687b      	ldr	r3, [r7, #4]
 8036dbe:	2200      	movs	r2, #0
 8036dc0:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8036dc2:	687b      	ldr	r3, [r7, #4]
 8036dc4:	681b      	ldr	r3, [r3, #0]
 8036dc6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036dc8:	693b      	ldr	r3, [r7, #16]
 8036dca:	e853 3f00 	ldrex	r3, [r3]
 8036dce:	60fb      	str	r3, [r7, #12]
   return(result);
 8036dd0:	68fb      	ldr	r3, [r7, #12]
 8036dd2:	f023 0310 	bic.w	r3, r3, #16
 8036dd6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8036dda:	687b      	ldr	r3, [r7, #4]
 8036ddc:	681b      	ldr	r3, [r3, #0]
 8036dde:	461a      	mov	r2, r3
 8036de0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8036de4:	61fb      	str	r3, [r7, #28]
 8036de6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036de8:	69b9      	ldr	r1, [r7, #24]
 8036dea:	69fa      	ldr	r2, [r7, #28]
 8036dec:	e841 2300 	strex	r3, r2, [r1]
 8036df0:	617b      	str	r3, [r7, #20]
   return(result);
 8036df2:	697b      	ldr	r3, [r7, #20]
 8036df4:	2b00      	cmp	r3, #0
 8036df6:	d1e4      	bne.n	8036dc2 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8036df8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8036dfc:	4619      	mov	r1, r3
 8036dfe:	6878      	ldr	r0, [r7, #4]
 8036e00:	f000 f878 	bl	8036ef4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8036e04:	e063      	b.n	8036ece <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8036e06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8036e0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8036e0e:	2b00      	cmp	r3, #0
 8036e10:	d00e      	beq.n	8036e30 <HAL_UART_IRQHandler+0x68c>
 8036e12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8036e16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8036e1a:	2b00      	cmp	r3, #0
 8036e1c:	d008      	beq.n	8036e30 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8036e1e:	687b      	ldr	r3, [r7, #4]
 8036e20:	681b      	ldr	r3, [r3, #0]
 8036e22:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8036e26:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8036e28:	6878      	ldr	r0, [r7, #4]
 8036e2a:	f001 fdbb 	bl	80389a4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8036e2e:	e051      	b.n	8036ed4 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8036e30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8036e34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8036e38:	2b00      	cmp	r3, #0
 8036e3a:	d014      	beq.n	8036e66 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8036e3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8036e40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8036e44:	2b00      	cmp	r3, #0
 8036e46:	d105      	bne.n	8036e54 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8036e48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8036e4c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8036e50:	2b00      	cmp	r3, #0
 8036e52:	d008      	beq.n	8036e66 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 8036e54:	687b      	ldr	r3, [r7, #4]
 8036e56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8036e58:	2b00      	cmp	r3, #0
 8036e5a:	d03a      	beq.n	8036ed2 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 8036e5c:	687b      	ldr	r3, [r7, #4]
 8036e5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8036e60:	6878      	ldr	r0, [r7, #4]
 8036e62:	4798      	blx	r3
    }
    return;
 8036e64:	e035      	b.n	8036ed2 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8036e66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8036e6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8036e6e:	2b00      	cmp	r3, #0
 8036e70:	d009      	beq.n	8036e86 <HAL_UART_IRQHandler+0x6e2>
 8036e72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8036e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8036e7a:	2b00      	cmp	r3, #0
 8036e7c:	d003      	beq.n	8036e86 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 8036e7e:	6878      	ldr	r0, [r7, #4]
 8036e80:	f001 f908 	bl	8038094 <UART_EndTransmit_IT>
    return;
 8036e84:	e026      	b.n	8036ed4 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8036e86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8036e8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8036e8e:	2b00      	cmp	r3, #0
 8036e90:	d009      	beq.n	8036ea6 <HAL_UART_IRQHandler+0x702>
 8036e92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8036e96:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8036e9a:	2b00      	cmp	r3, #0
 8036e9c:	d003      	beq.n	8036ea6 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8036e9e:	6878      	ldr	r0, [r7, #4]
 8036ea0:	f001 fd94 	bl	80389cc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8036ea4:	e016      	b.n	8036ed4 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8036ea6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8036eaa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8036eae:	2b00      	cmp	r3, #0
 8036eb0:	d010      	beq.n	8036ed4 <HAL_UART_IRQHandler+0x730>
 8036eb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8036eb6:	2b00      	cmp	r3, #0
 8036eb8:	da0c      	bge.n	8036ed4 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8036eba:	6878      	ldr	r0, [r7, #4]
 8036ebc:	f001 fd7c 	bl	80389b8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8036ec0:	e008      	b.n	8036ed4 <HAL_UART_IRQHandler+0x730>
      return;
 8036ec2:	bf00      	nop
 8036ec4:	e006      	b.n	8036ed4 <HAL_UART_IRQHandler+0x730>
    return;
 8036ec6:	bf00      	nop
 8036ec8:	e004      	b.n	8036ed4 <HAL_UART_IRQHandler+0x730>
      return;
 8036eca:	bf00      	nop
 8036ecc:	e002      	b.n	8036ed4 <HAL_UART_IRQHandler+0x730>
      return;
 8036ece:	bf00      	nop
 8036ed0:	e000      	b.n	8036ed4 <HAL_UART_IRQHandler+0x730>
    return;
 8036ed2:	bf00      	nop
  }
}
 8036ed4:	37e8      	adds	r7, #232	; 0xe8
 8036ed6:	46bd      	mov	sp, r7
 8036ed8:	bd80      	pop	{r7, pc}
 8036eda:	bf00      	nop
 8036edc:	effffffe 	.word	0xeffffffe

08036ee0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8036ee0:	b480      	push	{r7}
 8036ee2:	b083      	sub	sp, #12
 8036ee4:	af00      	add	r7, sp, #0
 8036ee6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8036ee8:	bf00      	nop
 8036eea:	370c      	adds	r7, #12
 8036eec:	46bd      	mov	sp, r7
 8036eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8036ef2:	4770      	bx	lr

08036ef4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8036ef4:	b480      	push	{r7}
 8036ef6:	b083      	sub	sp, #12
 8036ef8:	af00      	add	r7, sp, #0
 8036efa:	6078      	str	r0, [r7, #4]
 8036efc:	460b      	mov	r3, r1
 8036efe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8036f00:	bf00      	nop
 8036f02:	370c      	adds	r7, #12
 8036f04:	46bd      	mov	sp, r7
 8036f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8036f0a:	4770      	bx	lr

08036f0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8036f0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8036f10:	b092      	sub	sp, #72	; 0x48
 8036f12:	af00      	add	r7, sp, #0
 8036f14:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8036f16:	2300      	movs	r3, #0
 8036f18:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8036f1c:	697b      	ldr	r3, [r7, #20]
 8036f1e:	689a      	ldr	r2, [r3, #8]
 8036f20:	697b      	ldr	r3, [r7, #20]
 8036f22:	691b      	ldr	r3, [r3, #16]
 8036f24:	431a      	orrs	r2, r3
 8036f26:	697b      	ldr	r3, [r7, #20]
 8036f28:	695b      	ldr	r3, [r3, #20]
 8036f2a:	431a      	orrs	r2, r3
 8036f2c:	697b      	ldr	r3, [r7, #20]
 8036f2e:	69db      	ldr	r3, [r3, #28]
 8036f30:	4313      	orrs	r3, r2
 8036f32:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8036f34:	697b      	ldr	r3, [r7, #20]
 8036f36:	681b      	ldr	r3, [r3, #0]
 8036f38:	681a      	ldr	r2, [r3, #0]
 8036f3a:	4bbe      	ldr	r3, [pc, #760]	; (8037234 <UART_SetConfig+0x328>)
 8036f3c:	4013      	ands	r3, r2
 8036f3e:	697a      	ldr	r2, [r7, #20]
 8036f40:	6812      	ldr	r2, [r2, #0]
 8036f42:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8036f44:	430b      	orrs	r3, r1
 8036f46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8036f48:	697b      	ldr	r3, [r7, #20]
 8036f4a:	681b      	ldr	r3, [r3, #0]
 8036f4c:	685b      	ldr	r3, [r3, #4]
 8036f4e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8036f52:	697b      	ldr	r3, [r7, #20]
 8036f54:	68da      	ldr	r2, [r3, #12]
 8036f56:	697b      	ldr	r3, [r7, #20]
 8036f58:	681b      	ldr	r3, [r3, #0]
 8036f5a:	430a      	orrs	r2, r1
 8036f5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8036f5e:	697b      	ldr	r3, [r7, #20]
 8036f60:	699b      	ldr	r3, [r3, #24]
 8036f62:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8036f64:	697b      	ldr	r3, [r7, #20]
 8036f66:	681b      	ldr	r3, [r3, #0]
 8036f68:	4ab3      	ldr	r2, [pc, #716]	; (8037238 <UART_SetConfig+0x32c>)
 8036f6a:	4293      	cmp	r3, r2
 8036f6c:	d004      	beq.n	8036f78 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8036f6e:	697b      	ldr	r3, [r7, #20]
 8036f70:	6a1b      	ldr	r3, [r3, #32]
 8036f72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8036f74:	4313      	orrs	r3, r2
 8036f76:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8036f78:	697b      	ldr	r3, [r7, #20]
 8036f7a:	681b      	ldr	r3, [r3, #0]
 8036f7c:	689a      	ldr	r2, [r3, #8]
 8036f7e:	4baf      	ldr	r3, [pc, #700]	; (803723c <UART_SetConfig+0x330>)
 8036f80:	4013      	ands	r3, r2
 8036f82:	697a      	ldr	r2, [r7, #20]
 8036f84:	6812      	ldr	r2, [r2, #0]
 8036f86:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8036f88:	430b      	orrs	r3, r1
 8036f8a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8036f8c:	697b      	ldr	r3, [r7, #20]
 8036f8e:	681b      	ldr	r3, [r3, #0]
 8036f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8036f92:	f023 010f 	bic.w	r1, r3, #15
 8036f96:	697b      	ldr	r3, [r7, #20]
 8036f98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8036f9a:	697b      	ldr	r3, [r7, #20]
 8036f9c:	681b      	ldr	r3, [r3, #0]
 8036f9e:	430a      	orrs	r2, r1
 8036fa0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8036fa2:	697b      	ldr	r3, [r7, #20]
 8036fa4:	681b      	ldr	r3, [r3, #0]
 8036fa6:	4aa6      	ldr	r2, [pc, #664]	; (8037240 <UART_SetConfig+0x334>)
 8036fa8:	4293      	cmp	r3, r2
 8036faa:	d177      	bne.n	803709c <UART_SetConfig+0x190>
 8036fac:	4ba5      	ldr	r3, [pc, #660]	; (8037244 <UART_SetConfig+0x338>)
 8036fae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8036fb0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8036fb4:	2b28      	cmp	r3, #40	; 0x28
 8036fb6:	d86d      	bhi.n	8037094 <UART_SetConfig+0x188>
 8036fb8:	a201      	add	r2, pc, #4	; (adr r2, 8036fc0 <UART_SetConfig+0xb4>)
 8036fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8036fbe:	bf00      	nop
 8036fc0:	08037065 	.word	0x08037065
 8036fc4:	08037095 	.word	0x08037095
 8036fc8:	08037095 	.word	0x08037095
 8036fcc:	08037095 	.word	0x08037095
 8036fd0:	08037095 	.word	0x08037095
 8036fd4:	08037095 	.word	0x08037095
 8036fd8:	08037095 	.word	0x08037095
 8036fdc:	08037095 	.word	0x08037095
 8036fe0:	0803706d 	.word	0x0803706d
 8036fe4:	08037095 	.word	0x08037095
 8036fe8:	08037095 	.word	0x08037095
 8036fec:	08037095 	.word	0x08037095
 8036ff0:	08037095 	.word	0x08037095
 8036ff4:	08037095 	.word	0x08037095
 8036ff8:	08037095 	.word	0x08037095
 8036ffc:	08037095 	.word	0x08037095
 8037000:	08037075 	.word	0x08037075
 8037004:	08037095 	.word	0x08037095
 8037008:	08037095 	.word	0x08037095
 803700c:	08037095 	.word	0x08037095
 8037010:	08037095 	.word	0x08037095
 8037014:	08037095 	.word	0x08037095
 8037018:	08037095 	.word	0x08037095
 803701c:	08037095 	.word	0x08037095
 8037020:	0803707d 	.word	0x0803707d
 8037024:	08037095 	.word	0x08037095
 8037028:	08037095 	.word	0x08037095
 803702c:	08037095 	.word	0x08037095
 8037030:	08037095 	.word	0x08037095
 8037034:	08037095 	.word	0x08037095
 8037038:	08037095 	.word	0x08037095
 803703c:	08037095 	.word	0x08037095
 8037040:	08037085 	.word	0x08037085
 8037044:	08037095 	.word	0x08037095
 8037048:	08037095 	.word	0x08037095
 803704c:	08037095 	.word	0x08037095
 8037050:	08037095 	.word	0x08037095
 8037054:	08037095 	.word	0x08037095
 8037058:	08037095 	.word	0x08037095
 803705c:	08037095 	.word	0x08037095
 8037060:	0803708d 	.word	0x0803708d
 8037064:	2301      	movs	r3, #1
 8037066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803706a:	e222      	b.n	80374b2 <UART_SetConfig+0x5a6>
 803706c:	2304      	movs	r3, #4
 803706e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8037072:	e21e      	b.n	80374b2 <UART_SetConfig+0x5a6>
 8037074:	2308      	movs	r3, #8
 8037076:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803707a:	e21a      	b.n	80374b2 <UART_SetConfig+0x5a6>
 803707c:	2310      	movs	r3, #16
 803707e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8037082:	e216      	b.n	80374b2 <UART_SetConfig+0x5a6>
 8037084:	2320      	movs	r3, #32
 8037086:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803708a:	e212      	b.n	80374b2 <UART_SetConfig+0x5a6>
 803708c:	2340      	movs	r3, #64	; 0x40
 803708e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8037092:	e20e      	b.n	80374b2 <UART_SetConfig+0x5a6>
 8037094:	2380      	movs	r3, #128	; 0x80
 8037096:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803709a:	e20a      	b.n	80374b2 <UART_SetConfig+0x5a6>
 803709c:	697b      	ldr	r3, [r7, #20]
 803709e:	681b      	ldr	r3, [r3, #0]
 80370a0:	4a69      	ldr	r2, [pc, #420]	; (8037248 <UART_SetConfig+0x33c>)
 80370a2:	4293      	cmp	r3, r2
 80370a4:	d130      	bne.n	8037108 <UART_SetConfig+0x1fc>
 80370a6:	4b67      	ldr	r3, [pc, #412]	; (8037244 <UART_SetConfig+0x338>)
 80370a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80370aa:	f003 0307 	and.w	r3, r3, #7
 80370ae:	2b05      	cmp	r3, #5
 80370b0:	d826      	bhi.n	8037100 <UART_SetConfig+0x1f4>
 80370b2:	a201      	add	r2, pc, #4	; (adr r2, 80370b8 <UART_SetConfig+0x1ac>)
 80370b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80370b8:	080370d1 	.word	0x080370d1
 80370bc:	080370d9 	.word	0x080370d9
 80370c0:	080370e1 	.word	0x080370e1
 80370c4:	080370e9 	.word	0x080370e9
 80370c8:	080370f1 	.word	0x080370f1
 80370cc:	080370f9 	.word	0x080370f9
 80370d0:	2300      	movs	r3, #0
 80370d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80370d6:	e1ec      	b.n	80374b2 <UART_SetConfig+0x5a6>
 80370d8:	2304      	movs	r3, #4
 80370da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80370de:	e1e8      	b.n	80374b2 <UART_SetConfig+0x5a6>
 80370e0:	2308      	movs	r3, #8
 80370e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80370e6:	e1e4      	b.n	80374b2 <UART_SetConfig+0x5a6>
 80370e8:	2310      	movs	r3, #16
 80370ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80370ee:	e1e0      	b.n	80374b2 <UART_SetConfig+0x5a6>
 80370f0:	2320      	movs	r3, #32
 80370f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80370f6:	e1dc      	b.n	80374b2 <UART_SetConfig+0x5a6>
 80370f8:	2340      	movs	r3, #64	; 0x40
 80370fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80370fe:	e1d8      	b.n	80374b2 <UART_SetConfig+0x5a6>
 8037100:	2380      	movs	r3, #128	; 0x80
 8037102:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8037106:	e1d4      	b.n	80374b2 <UART_SetConfig+0x5a6>
 8037108:	697b      	ldr	r3, [r7, #20]
 803710a:	681b      	ldr	r3, [r3, #0]
 803710c:	4a4f      	ldr	r2, [pc, #316]	; (803724c <UART_SetConfig+0x340>)
 803710e:	4293      	cmp	r3, r2
 8037110:	d130      	bne.n	8037174 <UART_SetConfig+0x268>
 8037112:	4b4c      	ldr	r3, [pc, #304]	; (8037244 <UART_SetConfig+0x338>)
 8037114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8037116:	f003 0307 	and.w	r3, r3, #7
 803711a:	2b05      	cmp	r3, #5
 803711c:	d826      	bhi.n	803716c <UART_SetConfig+0x260>
 803711e:	a201      	add	r2, pc, #4	; (adr r2, 8037124 <UART_SetConfig+0x218>)
 8037120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8037124:	0803713d 	.word	0x0803713d
 8037128:	08037145 	.word	0x08037145
 803712c:	0803714d 	.word	0x0803714d
 8037130:	08037155 	.word	0x08037155
 8037134:	0803715d 	.word	0x0803715d
 8037138:	08037165 	.word	0x08037165
 803713c:	2300      	movs	r3, #0
 803713e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8037142:	e1b6      	b.n	80374b2 <UART_SetConfig+0x5a6>
 8037144:	2304      	movs	r3, #4
 8037146:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803714a:	e1b2      	b.n	80374b2 <UART_SetConfig+0x5a6>
 803714c:	2308      	movs	r3, #8
 803714e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8037152:	e1ae      	b.n	80374b2 <UART_SetConfig+0x5a6>
 8037154:	2310      	movs	r3, #16
 8037156:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803715a:	e1aa      	b.n	80374b2 <UART_SetConfig+0x5a6>
 803715c:	2320      	movs	r3, #32
 803715e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8037162:	e1a6      	b.n	80374b2 <UART_SetConfig+0x5a6>
 8037164:	2340      	movs	r3, #64	; 0x40
 8037166:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803716a:	e1a2      	b.n	80374b2 <UART_SetConfig+0x5a6>
 803716c:	2380      	movs	r3, #128	; 0x80
 803716e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8037172:	e19e      	b.n	80374b2 <UART_SetConfig+0x5a6>
 8037174:	697b      	ldr	r3, [r7, #20]
 8037176:	681b      	ldr	r3, [r3, #0]
 8037178:	4a35      	ldr	r2, [pc, #212]	; (8037250 <UART_SetConfig+0x344>)
 803717a:	4293      	cmp	r3, r2
 803717c:	d130      	bne.n	80371e0 <UART_SetConfig+0x2d4>
 803717e:	4b31      	ldr	r3, [pc, #196]	; (8037244 <UART_SetConfig+0x338>)
 8037180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8037182:	f003 0307 	and.w	r3, r3, #7
 8037186:	2b05      	cmp	r3, #5
 8037188:	d826      	bhi.n	80371d8 <UART_SetConfig+0x2cc>
 803718a:	a201      	add	r2, pc, #4	; (adr r2, 8037190 <UART_SetConfig+0x284>)
 803718c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8037190:	080371a9 	.word	0x080371a9
 8037194:	080371b1 	.word	0x080371b1
 8037198:	080371b9 	.word	0x080371b9
 803719c:	080371c1 	.word	0x080371c1
 80371a0:	080371c9 	.word	0x080371c9
 80371a4:	080371d1 	.word	0x080371d1
 80371a8:	2300      	movs	r3, #0
 80371aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80371ae:	e180      	b.n	80374b2 <UART_SetConfig+0x5a6>
 80371b0:	2304      	movs	r3, #4
 80371b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80371b6:	e17c      	b.n	80374b2 <UART_SetConfig+0x5a6>
 80371b8:	2308      	movs	r3, #8
 80371ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80371be:	e178      	b.n	80374b2 <UART_SetConfig+0x5a6>
 80371c0:	2310      	movs	r3, #16
 80371c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80371c6:	e174      	b.n	80374b2 <UART_SetConfig+0x5a6>
 80371c8:	2320      	movs	r3, #32
 80371ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80371ce:	e170      	b.n	80374b2 <UART_SetConfig+0x5a6>
 80371d0:	2340      	movs	r3, #64	; 0x40
 80371d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80371d6:	e16c      	b.n	80374b2 <UART_SetConfig+0x5a6>
 80371d8:	2380      	movs	r3, #128	; 0x80
 80371da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80371de:	e168      	b.n	80374b2 <UART_SetConfig+0x5a6>
 80371e0:	697b      	ldr	r3, [r7, #20]
 80371e2:	681b      	ldr	r3, [r3, #0]
 80371e4:	4a1b      	ldr	r2, [pc, #108]	; (8037254 <UART_SetConfig+0x348>)
 80371e6:	4293      	cmp	r3, r2
 80371e8:	d142      	bne.n	8037270 <UART_SetConfig+0x364>
 80371ea:	4b16      	ldr	r3, [pc, #88]	; (8037244 <UART_SetConfig+0x338>)
 80371ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80371ee:	f003 0307 	and.w	r3, r3, #7
 80371f2:	2b05      	cmp	r3, #5
 80371f4:	d838      	bhi.n	8037268 <UART_SetConfig+0x35c>
 80371f6:	a201      	add	r2, pc, #4	; (adr r2, 80371fc <UART_SetConfig+0x2f0>)
 80371f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80371fc:	08037215 	.word	0x08037215
 8037200:	0803721d 	.word	0x0803721d
 8037204:	08037225 	.word	0x08037225
 8037208:	0803722d 	.word	0x0803722d
 803720c:	08037259 	.word	0x08037259
 8037210:	08037261 	.word	0x08037261
 8037214:	2300      	movs	r3, #0
 8037216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803721a:	e14a      	b.n	80374b2 <UART_SetConfig+0x5a6>
 803721c:	2304      	movs	r3, #4
 803721e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8037222:	e146      	b.n	80374b2 <UART_SetConfig+0x5a6>
 8037224:	2308      	movs	r3, #8
 8037226:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803722a:	e142      	b.n	80374b2 <UART_SetConfig+0x5a6>
 803722c:	2310      	movs	r3, #16
 803722e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8037232:	e13e      	b.n	80374b2 <UART_SetConfig+0x5a6>
 8037234:	cfff69f3 	.word	0xcfff69f3
 8037238:	58000c00 	.word	0x58000c00
 803723c:	11fff4ff 	.word	0x11fff4ff
 8037240:	40011000 	.word	0x40011000
 8037244:	58024400 	.word	0x58024400
 8037248:	40004400 	.word	0x40004400
 803724c:	40004800 	.word	0x40004800
 8037250:	40004c00 	.word	0x40004c00
 8037254:	40005000 	.word	0x40005000
 8037258:	2320      	movs	r3, #32
 803725a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803725e:	e128      	b.n	80374b2 <UART_SetConfig+0x5a6>
 8037260:	2340      	movs	r3, #64	; 0x40
 8037262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8037266:	e124      	b.n	80374b2 <UART_SetConfig+0x5a6>
 8037268:	2380      	movs	r3, #128	; 0x80
 803726a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803726e:	e120      	b.n	80374b2 <UART_SetConfig+0x5a6>
 8037270:	697b      	ldr	r3, [r7, #20]
 8037272:	681b      	ldr	r3, [r3, #0]
 8037274:	4acb      	ldr	r2, [pc, #812]	; (80375a4 <UART_SetConfig+0x698>)
 8037276:	4293      	cmp	r3, r2
 8037278:	d176      	bne.n	8037368 <UART_SetConfig+0x45c>
 803727a:	4bcb      	ldr	r3, [pc, #812]	; (80375a8 <UART_SetConfig+0x69c>)
 803727c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 803727e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8037282:	2b28      	cmp	r3, #40	; 0x28
 8037284:	d86c      	bhi.n	8037360 <UART_SetConfig+0x454>
 8037286:	a201      	add	r2, pc, #4	; (adr r2, 803728c <UART_SetConfig+0x380>)
 8037288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803728c:	08037331 	.word	0x08037331
 8037290:	08037361 	.word	0x08037361
 8037294:	08037361 	.word	0x08037361
 8037298:	08037361 	.word	0x08037361
 803729c:	08037361 	.word	0x08037361
 80372a0:	08037361 	.word	0x08037361
 80372a4:	08037361 	.word	0x08037361
 80372a8:	08037361 	.word	0x08037361
 80372ac:	08037339 	.word	0x08037339
 80372b0:	08037361 	.word	0x08037361
 80372b4:	08037361 	.word	0x08037361
 80372b8:	08037361 	.word	0x08037361
 80372bc:	08037361 	.word	0x08037361
 80372c0:	08037361 	.word	0x08037361
 80372c4:	08037361 	.word	0x08037361
 80372c8:	08037361 	.word	0x08037361
 80372cc:	08037341 	.word	0x08037341
 80372d0:	08037361 	.word	0x08037361
 80372d4:	08037361 	.word	0x08037361
 80372d8:	08037361 	.word	0x08037361
 80372dc:	08037361 	.word	0x08037361
 80372e0:	08037361 	.word	0x08037361
 80372e4:	08037361 	.word	0x08037361
 80372e8:	08037361 	.word	0x08037361
 80372ec:	08037349 	.word	0x08037349
 80372f0:	08037361 	.word	0x08037361
 80372f4:	08037361 	.word	0x08037361
 80372f8:	08037361 	.word	0x08037361
 80372fc:	08037361 	.word	0x08037361
 8037300:	08037361 	.word	0x08037361
 8037304:	08037361 	.word	0x08037361
 8037308:	08037361 	.word	0x08037361
 803730c:	08037351 	.word	0x08037351
 8037310:	08037361 	.word	0x08037361
 8037314:	08037361 	.word	0x08037361
 8037318:	08037361 	.word	0x08037361
 803731c:	08037361 	.word	0x08037361
 8037320:	08037361 	.word	0x08037361
 8037324:	08037361 	.word	0x08037361
 8037328:	08037361 	.word	0x08037361
 803732c:	08037359 	.word	0x08037359
 8037330:	2301      	movs	r3, #1
 8037332:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8037336:	e0bc      	b.n	80374b2 <UART_SetConfig+0x5a6>
 8037338:	2304      	movs	r3, #4
 803733a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803733e:	e0b8      	b.n	80374b2 <UART_SetConfig+0x5a6>
 8037340:	2308      	movs	r3, #8
 8037342:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8037346:	e0b4      	b.n	80374b2 <UART_SetConfig+0x5a6>
 8037348:	2310      	movs	r3, #16
 803734a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803734e:	e0b0      	b.n	80374b2 <UART_SetConfig+0x5a6>
 8037350:	2320      	movs	r3, #32
 8037352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8037356:	e0ac      	b.n	80374b2 <UART_SetConfig+0x5a6>
 8037358:	2340      	movs	r3, #64	; 0x40
 803735a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803735e:	e0a8      	b.n	80374b2 <UART_SetConfig+0x5a6>
 8037360:	2380      	movs	r3, #128	; 0x80
 8037362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8037366:	e0a4      	b.n	80374b2 <UART_SetConfig+0x5a6>
 8037368:	697b      	ldr	r3, [r7, #20]
 803736a:	681b      	ldr	r3, [r3, #0]
 803736c:	4a8f      	ldr	r2, [pc, #572]	; (80375ac <UART_SetConfig+0x6a0>)
 803736e:	4293      	cmp	r3, r2
 8037370:	d130      	bne.n	80373d4 <UART_SetConfig+0x4c8>
 8037372:	4b8d      	ldr	r3, [pc, #564]	; (80375a8 <UART_SetConfig+0x69c>)
 8037374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8037376:	f003 0307 	and.w	r3, r3, #7
 803737a:	2b05      	cmp	r3, #5
 803737c:	d826      	bhi.n	80373cc <UART_SetConfig+0x4c0>
 803737e:	a201      	add	r2, pc, #4	; (adr r2, 8037384 <UART_SetConfig+0x478>)
 8037380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8037384:	0803739d 	.word	0x0803739d
 8037388:	080373a5 	.word	0x080373a5
 803738c:	080373ad 	.word	0x080373ad
 8037390:	080373b5 	.word	0x080373b5
 8037394:	080373bd 	.word	0x080373bd
 8037398:	080373c5 	.word	0x080373c5
 803739c:	2300      	movs	r3, #0
 803739e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80373a2:	e086      	b.n	80374b2 <UART_SetConfig+0x5a6>
 80373a4:	2304      	movs	r3, #4
 80373a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80373aa:	e082      	b.n	80374b2 <UART_SetConfig+0x5a6>
 80373ac:	2308      	movs	r3, #8
 80373ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80373b2:	e07e      	b.n	80374b2 <UART_SetConfig+0x5a6>
 80373b4:	2310      	movs	r3, #16
 80373b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80373ba:	e07a      	b.n	80374b2 <UART_SetConfig+0x5a6>
 80373bc:	2320      	movs	r3, #32
 80373be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80373c2:	e076      	b.n	80374b2 <UART_SetConfig+0x5a6>
 80373c4:	2340      	movs	r3, #64	; 0x40
 80373c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80373ca:	e072      	b.n	80374b2 <UART_SetConfig+0x5a6>
 80373cc:	2380      	movs	r3, #128	; 0x80
 80373ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80373d2:	e06e      	b.n	80374b2 <UART_SetConfig+0x5a6>
 80373d4:	697b      	ldr	r3, [r7, #20]
 80373d6:	681b      	ldr	r3, [r3, #0]
 80373d8:	4a75      	ldr	r2, [pc, #468]	; (80375b0 <UART_SetConfig+0x6a4>)
 80373da:	4293      	cmp	r3, r2
 80373dc:	d130      	bne.n	8037440 <UART_SetConfig+0x534>
 80373de:	4b72      	ldr	r3, [pc, #456]	; (80375a8 <UART_SetConfig+0x69c>)
 80373e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80373e2:	f003 0307 	and.w	r3, r3, #7
 80373e6:	2b05      	cmp	r3, #5
 80373e8:	d826      	bhi.n	8037438 <UART_SetConfig+0x52c>
 80373ea:	a201      	add	r2, pc, #4	; (adr r2, 80373f0 <UART_SetConfig+0x4e4>)
 80373ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80373f0:	08037409 	.word	0x08037409
 80373f4:	08037411 	.word	0x08037411
 80373f8:	08037419 	.word	0x08037419
 80373fc:	08037421 	.word	0x08037421
 8037400:	08037429 	.word	0x08037429
 8037404:	08037431 	.word	0x08037431
 8037408:	2300      	movs	r3, #0
 803740a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803740e:	e050      	b.n	80374b2 <UART_SetConfig+0x5a6>
 8037410:	2304      	movs	r3, #4
 8037412:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8037416:	e04c      	b.n	80374b2 <UART_SetConfig+0x5a6>
 8037418:	2308      	movs	r3, #8
 803741a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803741e:	e048      	b.n	80374b2 <UART_SetConfig+0x5a6>
 8037420:	2310      	movs	r3, #16
 8037422:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8037426:	e044      	b.n	80374b2 <UART_SetConfig+0x5a6>
 8037428:	2320      	movs	r3, #32
 803742a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803742e:	e040      	b.n	80374b2 <UART_SetConfig+0x5a6>
 8037430:	2340      	movs	r3, #64	; 0x40
 8037432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8037436:	e03c      	b.n	80374b2 <UART_SetConfig+0x5a6>
 8037438:	2380      	movs	r3, #128	; 0x80
 803743a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803743e:	e038      	b.n	80374b2 <UART_SetConfig+0x5a6>
 8037440:	697b      	ldr	r3, [r7, #20]
 8037442:	681b      	ldr	r3, [r3, #0]
 8037444:	4a5b      	ldr	r2, [pc, #364]	; (80375b4 <UART_SetConfig+0x6a8>)
 8037446:	4293      	cmp	r3, r2
 8037448:	d130      	bne.n	80374ac <UART_SetConfig+0x5a0>
 803744a:	4b57      	ldr	r3, [pc, #348]	; (80375a8 <UART_SetConfig+0x69c>)
 803744c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 803744e:	f003 0307 	and.w	r3, r3, #7
 8037452:	2b05      	cmp	r3, #5
 8037454:	d826      	bhi.n	80374a4 <UART_SetConfig+0x598>
 8037456:	a201      	add	r2, pc, #4	; (adr r2, 803745c <UART_SetConfig+0x550>)
 8037458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803745c:	08037475 	.word	0x08037475
 8037460:	0803747d 	.word	0x0803747d
 8037464:	08037485 	.word	0x08037485
 8037468:	0803748d 	.word	0x0803748d
 803746c:	08037495 	.word	0x08037495
 8037470:	0803749d 	.word	0x0803749d
 8037474:	2302      	movs	r3, #2
 8037476:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803747a:	e01a      	b.n	80374b2 <UART_SetConfig+0x5a6>
 803747c:	2304      	movs	r3, #4
 803747e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8037482:	e016      	b.n	80374b2 <UART_SetConfig+0x5a6>
 8037484:	2308      	movs	r3, #8
 8037486:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803748a:	e012      	b.n	80374b2 <UART_SetConfig+0x5a6>
 803748c:	2310      	movs	r3, #16
 803748e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8037492:	e00e      	b.n	80374b2 <UART_SetConfig+0x5a6>
 8037494:	2320      	movs	r3, #32
 8037496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803749a:	e00a      	b.n	80374b2 <UART_SetConfig+0x5a6>
 803749c:	2340      	movs	r3, #64	; 0x40
 803749e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80374a2:	e006      	b.n	80374b2 <UART_SetConfig+0x5a6>
 80374a4:	2380      	movs	r3, #128	; 0x80
 80374a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80374aa:	e002      	b.n	80374b2 <UART_SetConfig+0x5a6>
 80374ac:	2380      	movs	r3, #128	; 0x80
 80374ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80374b2:	697b      	ldr	r3, [r7, #20]
 80374b4:	681b      	ldr	r3, [r3, #0]
 80374b6:	4a3f      	ldr	r2, [pc, #252]	; (80375b4 <UART_SetConfig+0x6a8>)
 80374b8:	4293      	cmp	r3, r2
 80374ba:	f040 80f8 	bne.w	80376ae <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80374be:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80374c2:	2b20      	cmp	r3, #32
 80374c4:	dc46      	bgt.n	8037554 <UART_SetConfig+0x648>
 80374c6:	2b02      	cmp	r3, #2
 80374c8:	f2c0 8082 	blt.w	80375d0 <UART_SetConfig+0x6c4>
 80374cc:	3b02      	subs	r3, #2
 80374ce:	2b1e      	cmp	r3, #30
 80374d0:	d87e      	bhi.n	80375d0 <UART_SetConfig+0x6c4>
 80374d2:	a201      	add	r2, pc, #4	; (adr r2, 80374d8 <UART_SetConfig+0x5cc>)
 80374d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80374d8:	0803755b 	.word	0x0803755b
 80374dc:	080375d1 	.word	0x080375d1
 80374e0:	08037563 	.word	0x08037563
 80374e4:	080375d1 	.word	0x080375d1
 80374e8:	080375d1 	.word	0x080375d1
 80374ec:	080375d1 	.word	0x080375d1
 80374f0:	08037573 	.word	0x08037573
 80374f4:	080375d1 	.word	0x080375d1
 80374f8:	080375d1 	.word	0x080375d1
 80374fc:	080375d1 	.word	0x080375d1
 8037500:	080375d1 	.word	0x080375d1
 8037504:	080375d1 	.word	0x080375d1
 8037508:	080375d1 	.word	0x080375d1
 803750c:	080375d1 	.word	0x080375d1
 8037510:	08037583 	.word	0x08037583
 8037514:	080375d1 	.word	0x080375d1
 8037518:	080375d1 	.word	0x080375d1
 803751c:	080375d1 	.word	0x080375d1
 8037520:	080375d1 	.word	0x080375d1
 8037524:	080375d1 	.word	0x080375d1
 8037528:	080375d1 	.word	0x080375d1
 803752c:	080375d1 	.word	0x080375d1
 8037530:	080375d1 	.word	0x080375d1
 8037534:	080375d1 	.word	0x080375d1
 8037538:	080375d1 	.word	0x080375d1
 803753c:	080375d1 	.word	0x080375d1
 8037540:	080375d1 	.word	0x080375d1
 8037544:	080375d1 	.word	0x080375d1
 8037548:	080375d1 	.word	0x080375d1
 803754c:	080375d1 	.word	0x080375d1
 8037550:	080375c3 	.word	0x080375c3
 8037554:	2b40      	cmp	r3, #64	; 0x40
 8037556:	d037      	beq.n	80375c8 <UART_SetConfig+0x6bc>
 8037558:	e03a      	b.n	80375d0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 803755a:	f7fc fcd1 	bl	8033f00 <HAL_RCCEx_GetD3PCLK1Freq>
 803755e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8037560:	e03c      	b.n	80375dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8037562:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8037566:	4618      	mov	r0, r3
 8037568:	f7fc fce0 	bl	8033f2c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 803756c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803756e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8037570:	e034      	b.n	80375dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8037572:	f107 0318 	add.w	r3, r7, #24
 8037576:	4618      	mov	r0, r3
 8037578:	f7fc fe2c 	bl	80341d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 803757c:	69fb      	ldr	r3, [r7, #28]
 803757e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8037580:	e02c      	b.n	80375dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8037582:	4b09      	ldr	r3, [pc, #36]	; (80375a8 <UART_SetConfig+0x69c>)
 8037584:	681b      	ldr	r3, [r3, #0]
 8037586:	f003 0320 	and.w	r3, r3, #32
 803758a:	2b00      	cmp	r3, #0
 803758c:	d016      	beq.n	80375bc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 803758e:	4b06      	ldr	r3, [pc, #24]	; (80375a8 <UART_SetConfig+0x69c>)
 8037590:	681b      	ldr	r3, [r3, #0]
 8037592:	08db      	lsrs	r3, r3, #3
 8037594:	f003 0303 	and.w	r3, r3, #3
 8037598:	4a07      	ldr	r2, [pc, #28]	; (80375b8 <UART_SetConfig+0x6ac>)
 803759a:	fa22 f303 	lsr.w	r3, r2, r3
 803759e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80375a0:	e01c      	b.n	80375dc <UART_SetConfig+0x6d0>
 80375a2:	bf00      	nop
 80375a4:	40011400 	.word	0x40011400
 80375a8:	58024400 	.word	0x58024400
 80375ac:	40007800 	.word	0x40007800
 80375b0:	40007c00 	.word	0x40007c00
 80375b4:	58000c00 	.word	0x58000c00
 80375b8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80375bc:	4b9d      	ldr	r3, [pc, #628]	; (8037834 <UART_SetConfig+0x928>)
 80375be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80375c0:	e00c      	b.n	80375dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80375c2:	4b9d      	ldr	r3, [pc, #628]	; (8037838 <UART_SetConfig+0x92c>)
 80375c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80375c6:	e009      	b.n	80375dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80375c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80375cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80375ce:	e005      	b.n	80375dc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80375d0:	2300      	movs	r3, #0
 80375d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80375d4:	2301      	movs	r3, #1
 80375d6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80375da:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80375dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80375de:	2b00      	cmp	r3, #0
 80375e0:	f000 81de 	beq.w	80379a0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80375e4:	697b      	ldr	r3, [r7, #20]
 80375e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80375e8:	4a94      	ldr	r2, [pc, #592]	; (803783c <UART_SetConfig+0x930>)
 80375ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80375ee:	461a      	mov	r2, r3
 80375f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80375f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80375f6:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80375f8:	697b      	ldr	r3, [r7, #20]
 80375fa:	685a      	ldr	r2, [r3, #4]
 80375fc:	4613      	mov	r3, r2
 80375fe:	005b      	lsls	r3, r3, #1
 8037600:	4413      	add	r3, r2
 8037602:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8037604:	429a      	cmp	r2, r3
 8037606:	d305      	bcc.n	8037614 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8037608:	697b      	ldr	r3, [r7, #20]
 803760a:	685b      	ldr	r3, [r3, #4]
 803760c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 803760e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8037610:	429a      	cmp	r2, r3
 8037612:	d903      	bls.n	803761c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8037614:	2301      	movs	r3, #1
 8037616:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 803761a:	e1c1      	b.n	80379a0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 803761c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 803761e:	2200      	movs	r2, #0
 8037620:	60bb      	str	r3, [r7, #8]
 8037622:	60fa      	str	r2, [r7, #12]
 8037624:	697b      	ldr	r3, [r7, #20]
 8037626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8037628:	4a84      	ldr	r2, [pc, #528]	; (803783c <UART_SetConfig+0x930>)
 803762a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 803762e:	b29b      	uxth	r3, r3
 8037630:	2200      	movs	r2, #0
 8037632:	603b      	str	r3, [r7, #0]
 8037634:	607a      	str	r2, [r7, #4]
 8037636:	e9d7 2300 	ldrd	r2, r3, [r7]
 803763a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 803763e:	f7e8 fe9f 	bl	8020380 <__aeabi_uldivmod>
 8037642:	4602      	mov	r2, r0
 8037644:	460b      	mov	r3, r1
 8037646:	4610      	mov	r0, r2
 8037648:	4619      	mov	r1, r3
 803764a:	f04f 0200 	mov.w	r2, #0
 803764e:	f04f 0300 	mov.w	r3, #0
 8037652:	020b      	lsls	r3, r1, #8
 8037654:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8037658:	0202      	lsls	r2, r0, #8
 803765a:	6979      	ldr	r1, [r7, #20]
 803765c:	6849      	ldr	r1, [r1, #4]
 803765e:	0849      	lsrs	r1, r1, #1
 8037660:	2000      	movs	r0, #0
 8037662:	460c      	mov	r4, r1
 8037664:	4605      	mov	r5, r0
 8037666:	eb12 0804 	adds.w	r8, r2, r4
 803766a:	eb43 0905 	adc.w	r9, r3, r5
 803766e:	697b      	ldr	r3, [r7, #20]
 8037670:	685b      	ldr	r3, [r3, #4]
 8037672:	2200      	movs	r2, #0
 8037674:	469a      	mov	sl, r3
 8037676:	4693      	mov	fp, r2
 8037678:	4652      	mov	r2, sl
 803767a:	465b      	mov	r3, fp
 803767c:	4640      	mov	r0, r8
 803767e:	4649      	mov	r1, r9
 8037680:	f7e8 fe7e 	bl	8020380 <__aeabi_uldivmod>
 8037684:	4602      	mov	r2, r0
 8037686:	460b      	mov	r3, r1
 8037688:	4613      	mov	r3, r2
 803768a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 803768c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803768e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8037692:	d308      	bcc.n	80376a6 <UART_SetConfig+0x79a>
 8037694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8037696:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 803769a:	d204      	bcs.n	80376a6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 803769c:	697b      	ldr	r3, [r7, #20]
 803769e:	681b      	ldr	r3, [r3, #0]
 80376a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80376a2:	60da      	str	r2, [r3, #12]
 80376a4:	e17c      	b.n	80379a0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80376a6:	2301      	movs	r3, #1
 80376a8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80376ac:	e178      	b.n	80379a0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80376ae:	697b      	ldr	r3, [r7, #20]
 80376b0:	69db      	ldr	r3, [r3, #28]
 80376b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80376b6:	f040 80c5 	bne.w	8037844 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80376ba:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80376be:	2b20      	cmp	r3, #32
 80376c0:	dc48      	bgt.n	8037754 <UART_SetConfig+0x848>
 80376c2:	2b00      	cmp	r3, #0
 80376c4:	db7b      	blt.n	80377be <UART_SetConfig+0x8b2>
 80376c6:	2b20      	cmp	r3, #32
 80376c8:	d879      	bhi.n	80377be <UART_SetConfig+0x8b2>
 80376ca:	a201      	add	r2, pc, #4	; (adr r2, 80376d0 <UART_SetConfig+0x7c4>)
 80376cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80376d0:	0803775b 	.word	0x0803775b
 80376d4:	08037763 	.word	0x08037763
 80376d8:	080377bf 	.word	0x080377bf
 80376dc:	080377bf 	.word	0x080377bf
 80376e0:	0803776b 	.word	0x0803776b
 80376e4:	080377bf 	.word	0x080377bf
 80376e8:	080377bf 	.word	0x080377bf
 80376ec:	080377bf 	.word	0x080377bf
 80376f0:	0803777b 	.word	0x0803777b
 80376f4:	080377bf 	.word	0x080377bf
 80376f8:	080377bf 	.word	0x080377bf
 80376fc:	080377bf 	.word	0x080377bf
 8037700:	080377bf 	.word	0x080377bf
 8037704:	080377bf 	.word	0x080377bf
 8037708:	080377bf 	.word	0x080377bf
 803770c:	080377bf 	.word	0x080377bf
 8037710:	0803778b 	.word	0x0803778b
 8037714:	080377bf 	.word	0x080377bf
 8037718:	080377bf 	.word	0x080377bf
 803771c:	080377bf 	.word	0x080377bf
 8037720:	080377bf 	.word	0x080377bf
 8037724:	080377bf 	.word	0x080377bf
 8037728:	080377bf 	.word	0x080377bf
 803772c:	080377bf 	.word	0x080377bf
 8037730:	080377bf 	.word	0x080377bf
 8037734:	080377bf 	.word	0x080377bf
 8037738:	080377bf 	.word	0x080377bf
 803773c:	080377bf 	.word	0x080377bf
 8037740:	080377bf 	.word	0x080377bf
 8037744:	080377bf 	.word	0x080377bf
 8037748:	080377bf 	.word	0x080377bf
 803774c:	080377bf 	.word	0x080377bf
 8037750:	080377b1 	.word	0x080377b1
 8037754:	2b40      	cmp	r3, #64	; 0x40
 8037756:	d02e      	beq.n	80377b6 <UART_SetConfig+0x8aa>
 8037758:	e031      	b.n	80377be <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 803775a:	f7fb fc5f 	bl	803301c <HAL_RCC_GetPCLK1Freq>
 803775e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8037760:	e033      	b.n	80377ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8037762:	f7fb fc71 	bl	8033048 <HAL_RCC_GetPCLK2Freq>
 8037766:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8037768:	e02f      	b.n	80377ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 803776a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 803776e:	4618      	mov	r0, r3
 8037770:	f7fc fbdc 	bl	8033f2c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8037774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8037776:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8037778:	e027      	b.n	80377ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 803777a:	f107 0318 	add.w	r3, r7, #24
 803777e:	4618      	mov	r0, r3
 8037780:	f7fc fd28 	bl	80341d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8037784:	69fb      	ldr	r3, [r7, #28]
 8037786:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8037788:	e01f      	b.n	80377ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 803778a:	4b2d      	ldr	r3, [pc, #180]	; (8037840 <UART_SetConfig+0x934>)
 803778c:	681b      	ldr	r3, [r3, #0]
 803778e:	f003 0320 	and.w	r3, r3, #32
 8037792:	2b00      	cmp	r3, #0
 8037794:	d009      	beq.n	80377aa <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8037796:	4b2a      	ldr	r3, [pc, #168]	; (8037840 <UART_SetConfig+0x934>)
 8037798:	681b      	ldr	r3, [r3, #0]
 803779a:	08db      	lsrs	r3, r3, #3
 803779c:	f003 0303 	and.w	r3, r3, #3
 80377a0:	4a24      	ldr	r2, [pc, #144]	; (8037834 <UART_SetConfig+0x928>)
 80377a2:	fa22 f303 	lsr.w	r3, r2, r3
 80377a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80377a8:	e00f      	b.n	80377ca <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80377aa:	4b22      	ldr	r3, [pc, #136]	; (8037834 <UART_SetConfig+0x928>)
 80377ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80377ae:	e00c      	b.n	80377ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80377b0:	4b21      	ldr	r3, [pc, #132]	; (8037838 <UART_SetConfig+0x92c>)
 80377b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80377b4:	e009      	b.n	80377ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80377b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80377ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80377bc:	e005      	b.n	80377ca <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80377be:	2300      	movs	r3, #0
 80377c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80377c2:	2301      	movs	r3, #1
 80377c4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80377c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80377ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80377cc:	2b00      	cmp	r3, #0
 80377ce:	f000 80e7 	beq.w	80379a0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80377d2:	697b      	ldr	r3, [r7, #20]
 80377d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80377d6:	4a19      	ldr	r2, [pc, #100]	; (803783c <UART_SetConfig+0x930>)
 80377d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80377dc:	461a      	mov	r2, r3
 80377de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80377e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80377e4:	005a      	lsls	r2, r3, #1
 80377e6:	697b      	ldr	r3, [r7, #20]
 80377e8:	685b      	ldr	r3, [r3, #4]
 80377ea:	085b      	lsrs	r3, r3, #1
 80377ec:	441a      	add	r2, r3
 80377ee:	697b      	ldr	r3, [r7, #20]
 80377f0:	685b      	ldr	r3, [r3, #4]
 80377f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80377f6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80377f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80377fa:	2b0f      	cmp	r3, #15
 80377fc:	d916      	bls.n	803782c <UART_SetConfig+0x920>
 80377fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8037800:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8037804:	d212      	bcs.n	803782c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8037806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8037808:	b29b      	uxth	r3, r3
 803780a:	f023 030f 	bic.w	r3, r3, #15
 803780e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8037810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8037812:	085b      	lsrs	r3, r3, #1
 8037814:	b29b      	uxth	r3, r3
 8037816:	f003 0307 	and.w	r3, r3, #7
 803781a:	b29a      	uxth	r2, r3
 803781c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 803781e:	4313      	orrs	r3, r2
 8037820:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8037822:	697b      	ldr	r3, [r7, #20]
 8037824:	681b      	ldr	r3, [r3, #0]
 8037826:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8037828:	60da      	str	r2, [r3, #12]
 803782a:	e0b9      	b.n	80379a0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 803782c:	2301      	movs	r3, #1
 803782e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8037832:	e0b5      	b.n	80379a0 <UART_SetConfig+0xa94>
 8037834:	03d09000 	.word	0x03d09000
 8037838:	003d0900 	.word	0x003d0900
 803783c:	08058e10 	.word	0x08058e10
 8037840:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8037844:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8037848:	2b20      	cmp	r3, #32
 803784a:	dc49      	bgt.n	80378e0 <UART_SetConfig+0x9d4>
 803784c:	2b00      	cmp	r3, #0
 803784e:	db7c      	blt.n	803794a <UART_SetConfig+0xa3e>
 8037850:	2b20      	cmp	r3, #32
 8037852:	d87a      	bhi.n	803794a <UART_SetConfig+0xa3e>
 8037854:	a201      	add	r2, pc, #4	; (adr r2, 803785c <UART_SetConfig+0x950>)
 8037856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803785a:	bf00      	nop
 803785c:	080378e7 	.word	0x080378e7
 8037860:	080378ef 	.word	0x080378ef
 8037864:	0803794b 	.word	0x0803794b
 8037868:	0803794b 	.word	0x0803794b
 803786c:	080378f7 	.word	0x080378f7
 8037870:	0803794b 	.word	0x0803794b
 8037874:	0803794b 	.word	0x0803794b
 8037878:	0803794b 	.word	0x0803794b
 803787c:	08037907 	.word	0x08037907
 8037880:	0803794b 	.word	0x0803794b
 8037884:	0803794b 	.word	0x0803794b
 8037888:	0803794b 	.word	0x0803794b
 803788c:	0803794b 	.word	0x0803794b
 8037890:	0803794b 	.word	0x0803794b
 8037894:	0803794b 	.word	0x0803794b
 8037898:	0803794b 	.word	0x0803794b
 803789c:	08037917 	.word	0x08037917
 80378a0:	0803794b 	.word	0x0803794b
 80378a4:	0803794b 	.word	0x0803794b
 80378a8:	0803794b 	.word	0x0803794b
 80378ac:	0803794b 	.word	0x0803794b
 80378b0:	0803794b 	.word	0x0803794b
 80378b4:	0803794b 	.word	0x0803794b
 80378b8:	0803794b 	.word	0x0803794b
 80378bc:	0803794b 	.word	0x0803794b
 80378c0:	0803794b 	.word	0x0803794b
 80378c4:	0803794b 	.word	0x0803794b
 80378c8:	0803794b 	.word	0x0803794b
 80378cc:	0803794b 	.word	0x0803794b
 80378d0:	0803794b 	.word	0x0803794b
 80378d4:	0803794b 	.word	0x0803794b
 80378d8:	0803794b 	.word	0x0803794b
 80378dc:	0803793d 	.word	0x0803793d
 80378e0:	2b40      	cmp	r3, #64	; 0x40
 80378e2:	d02e      	beq.n	8037942 <UART_SetConfig+0xa36>
 80378e4:	e031      	b.n	803794a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80378e6:	f7fb fb99 	bl	803301c <HAL_RCC_GetPCLK1Freq>
 80378ea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80378ec:	e033      	b.n	8037956 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80378ee:	f7fb fbab 	bl	8033048 <HAL_RCC_GetPCLK2Freq>
 80378f2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80378f4:	e02f      	b.n	8037956 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80378f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80378fa:	4618      	mov	r0, r3
 80378fc:	f7fc fb16 	bl	8033f2c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8037900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8037902:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8037904:	e027      	b.n	8037956 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8037906:	f107 0318 	add.w	r3, r7, #24
 803790a:	4618      	mov	r0, r3
 803790c:	f7fc fc62 	bl	80341d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8037910:	69fb      	ldr	r3, [r7, #28]
 8037912:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8037914:	e01f      	b.n	8037956 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8037916:	4b2d      	ldr	r3, [pc, #180]	; (80379cc <UART_SetConfig+0xac0>)
 8037918:	681b      	ldr	r3, [r3, #0]
 803791a:	f003 0320 	and.w	r3, r3, #32
 803791e:	2b00      	cmp	r3, #0
 8037920:	d009      	beq.n	8037936 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8037922:	4b2a      	ldr	r3, [pc, #168]	; (80379cc <UART_SetConfig+0xac0>)
 8037924:	681b      	ldr	r3, [r3, #0]
 8037926:	08db      	lsrs	r3, r3, #3
 8037928:	f003 0303 	and.w	r3, r3, #3
 803792c:	4a28      	ldr	r2, [pc, #160]	; (80379d0 <UART_SetConfig+0xac4>)
 803792e:	fa22 f303 	lsr.w	r3, r2, r3
 8037932:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8037934:	e00f      	b.n	8037956 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8037936:	4b26      	ldr	r3, [pc, #152]	; (80379d0 <UART_SetConfig+0xac4>)
 8037938:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 803793a:	e00c      	b.n	8037956 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 803793c:	4b25      	ldr	r3, [pc, #148]	; (80379d4 <UART_SetConfig+0xac8>)
 803793e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8037940:	e009      	b.n	8037956 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8037942:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8037946:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8037948:	e005      	b.n	8037956 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 803794a:	2300      	movs	r3, #0
 803794c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 803794e:	2301      	movs	r3, #1
 8037950:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8037954:	bf00      	nop
    }

    if (pclk != 0U)
 8037956:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8037958:	2b00      	cmp	r3, #0
 803795a:	d021      	beq.n	80379a0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 803795c:	697b      	ldr	r3, [r7, #20]
 803795e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8037960:	4a1d      	ldr	r2, [pc, #116]	; (80379d8 <UART_SetConfig+0xacc>)
 8037962:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8037966:	461a      	mov	r2, r3
 8037968:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 803796a:	fbb3 f2f2 	udiv	r2, r3, r2
 803796e:	697b      	ldr	r3, [r7, #20]
 8037970:	685b      	ldr	r3, [r3, #4]
 8037972:	085b      	lsrs	r3, r3, #1
 8037974:	441a      	add	r2, r3
 8037976:	697b      	ldr	r3, [r7, #20]
 8037978:	685b      	ldr	r3, [r3, #4]
 803797a:	fbb2 f3f3 	udiv	r3, r2, r3
 803797e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8037980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8037982:	2b0f      	cmp	r3, #15
 8037984:	d909      	bls.n	803799a <UART_SetConfig+0xa8e>
 8037986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8037988:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 803798c:	d205      	bcs.n	803799a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 803798e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8037990:	b29a      	uxth	r2, r3
 8037992:	697b      	ldr	r3, [r7, #20]
 8037994:	681b      	ldr	r3, [r3, #0]
 8037996:	60da      	str	r2, [r3, #12]
 8037998:	e002      	b.n	80379a0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 803799a:	2301      	movs	r3, #1
 803799c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80379a0:	697b      	ldr	r3, [r7, #20]
 80379a2:	2201      	movs	r2, #1
 80379a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80379a8:	697b      	ldr	r3, [r7, #20]
 80379aa:	2201      	movs	r2, #1
 80379ac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80379b0:	697b      	ldr	r3, [r7, #20]
 80379b2:	2200      	movs	r2, #0
 80379b4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80379b6:	697b      	ldr	r3, [r7, #20]
 80379b8:	2200      	movs	r2, #0
 80379ba:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80379bc:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80379c0:	4618      	mov	r0, r3
 80379c2:	3748      	adds	r7, #72	; 0x48
 80379c4:	46bd      	mov	sp, r7
 80379c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80379ca:	bf00      	nop
 80379cc:	58024400 	.word	0x58024400
 80379d0:	03d09000 	.word	0x03d09000
 80379d4:	003d0900 	.word	0x003d0900
 80379d8:	08058e10 	.word	0x08058e10

080379dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80379dc:	b480      	push	{r7}
 80379de:	b083      	sub	sp, #12
 80379e0:	af00      	add	r7, sp, #0
 80379e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80379e4:	687b      	ldr	r3, [r7, #4]
 80379e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80379e8:	f003 0301 	and.w	r3, r3, #1
 80379ec:	2b00      	cmp	r3, #0
 80379ee:	d00a      	beq.n	8037a06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80379f0:	687b      	ldr	r3, [r7, #4]
 80379f2:	681b      	ldr	r3, [r3, #0]
 80379f4:	685b      	ldr	r3, [r3, #4]
 80379f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80379fa:	687b      	ldr	r3, [r7, #4]
 80379fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80379fe:	687b      	ldr	r3, [r7, #4]
 8037a00:	681b      	ldr	r3, [r3, #0]
 8037a02:	430a      	orrs	r2, r1
 8037a04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8037a06:	687b      	ldr	r3, [r7, #4]
 8037a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8037a0a:	f003 0302 	and.w	r3, r3, #2
 8037a0e:	2b00      	cmp	r3, #0
 8037a10:	d00a      	beq.n	8037a28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8037a12:	687b      	ldr	r3, [r7, #4]
 8037a14:	681b      	ldr	r3, [r3, #0]
 8037a16:	685b      	ldr	r3, [r3, #4]
 8037a18:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8037a1c:	687b      	ldr	r3, [r7, #4]
 8037a1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8037a20:	687b      	ldr	r3, [r7, #4]
 8037a22:	681b      	ldr	r3, [r3, #0]
 8037a24:	430a      	orrs	r2, r1
 8037a26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8037a28:	687b      	ldr	r3, [r7, #4]
 8037a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8037a2c:	f003 0304 	and.w	r3, r3, #4
 8037a30:	2b00      	cmp	r3, #0
 8037a32:	d00a      	beq.n	8037a4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8037a34:	687b      	ldr	r3, [r7, #4]
 8037a36:	681b      	ldr	r3, [r3, #0]
 8037a38:	685b      	ldr	r3, [r3, #4]
 8037a3a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8037a3e:	687b      	ldr	r3, [r7, #4]
 8037a40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8037a42:	687b      	ldr	r3, [r7, #4]
 8037a44:	681b      	ldr	r3, [r3, #0]
 8037a46:	430a      	orrs	r2, r1
 8037a48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8037a4a:	687b      	ldr	r3, [r7, #4]
 8037a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8037a4e:	f003 0308 	and.w	r3, r3, #8
 8037a52:	2b00      	cmp	r3, #0
 8037a54:	d00a      	beq.n	8037a6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8037a56:	687b      	ldr	r3, [r7, #4]
 8037a58:	681b      	ldr	r3, [r3, #0]
 8037a5a:	685b      	ldr	r3, [r3, #4]
 8037a5c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8037a60:	687b      	ldr	r3, [r7, #4]
 8037a62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8037a64:	687b      	ldr	r3, [r7, #4]
 8037a66:	681b      	ldr	r3, [r3, #0]
 8037a68:	430a      	orrs	r2, r1
 8037a6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8037a6c:	687b      	ldr	r3, [r7, #4]
 8037a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8037a70:	f003 0310 	and.w	r3, r3, #16
 8037a74:	2b00      	cmp	r3, #0
 8037a76:	d00a      	beq.n	8037a8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8037a78:	687b      	ldr	r3, [r7, #4]
 8037a7a:	681b      	ldr	r3, [r3, #0]
 8037a7c:	689b      	ldr	r3, [r3, #8]
 8037a7e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8037a82:	687b      	ldr	r3, [r7, #4]
 8037a84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8037a86:	687b      	ldr	r3, [r7, #4]
 8037a88:	681b      	ldr	r3, [r3, #0]
 8037a8a:	430a      	orrs	r2, r1
 8037a8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8037a8e:	687b      	ldr	r3, [r7, #4]
 8037a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8037a92:	f003 0320 	and.w	r3, r3, #32
 8037a96:	2b00      	cmp	r3, #0
 8037a98:	d00a      	beq.n	8037ab0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8037a9a:	687b      	ldr	r3, [r7, #4]
 8037a9c:	681b      	ldr	r3, [r3, #0]
 8037a9e:	689b      	ldr	r3, [r3, #8]
 8037aa0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8037aa4:	687b      	ldr	r3, [r7, #4]
 8037aa6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8037aa8:	687b      	ldr	r3, [r7, #4]
 8037aaa:	681b      	ldr	r3, [r3, #0]
 8037aac:	430a      	orrs	r2, r1
 8037aae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8037ab0:	687b      	ldr	r3, [r7, #4]
 8037ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8037ab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8037ab8:	2b00      	cmp	r3, #0
 8037aba:	d01a      	beq.n	8037af2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8037abc:	687b      	ldr	r3, [r7, #4]
 8037abe:	681b      	ldr	r3, [r3, #0]
 8037ac0:	685b      	ldr	r3, [r3, #4]
 8037ac2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8037ac6:	687b      	ldr	r3, [r7, #4]
 8037ac8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8037aca:	687b      	ldr	r3, [r7, #4]
 8037acc:	681b      	ldr	r3, [r3, #0]
 8037ace:	430a      	orrs	r2, r1
 8037ad0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8037ad2:	687b      	ldr	r3, [r7, #4]
 8037ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8037ad6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8037ada:	d10a      	bne.n	8037af2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8037adc:	687b      	ldr	r3, [r7, #4]
 8037ade:	681b      	ldr	r3, [r3, #0]
 8037ae0:	685b      	ldr	r3, [r3, #4]
 8037ae2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8037ae6:	687b      	ldr	r3, [r7, #4]
 8037ae8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8037aea:	687b      	ldr	r3, [r7, #4]
 8037aec:	681b      	ldr	r3, [r3, #0]
 8037aee:	430a      	orrs	r2, r1
 8037af0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8037af2:	687b      	ldr	r3, [r7, #4]
 8037af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8037af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8037afa:	2b00      	cmp	r3, #0
 8037afc:	d00a      	beq.n	8037b14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8037afe:	687b      	ldr	r3, [r7, #4]
 8037b00:	681b      	ldr	r3, [r3, #0]
 8037b02:	685b      	ldr	r3, [r3, #4]
 8037b04:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8037b08:	687b      	ldr	r3, [r7, #4]
 8037b0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8037b0c:	687b      	ldr	r3, [r7, #4]
 8037b0e:	681b      	ldr	r3, [r3, #0]
 8037b10:	430a      	orrs	r2, r1
 8037b12:	605a      	str	r2, [r3, #4]
  }
}
 8037b14:	bf00      	nop
 8037b16:	370c      	adds	r7, #12
 8037b18:	46bd      	mov	sp, r7
 8037b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8037b1e:	4770      	bx	lr

08037b20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8037b20:	b580      	push	{r7, lr}
 8037b22:	b086      	sub	sp, #24
 8037b24:	af02      	add	r7, sp, #8
 8037b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8037b28:	687b      	ldr	r3, [r7, #4]
 8037b2a:	2200      	movs	r2, #0
 8037b2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8037b30:	f7f4 fafe 	bl	802c130 <HAL_GetTick>
 8037b34:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8037b36:	687b      	ldr	r3, [r7, #4]
 8037b38:	681b      	ldr	r3, [r3, #0]
 8037b3a:	681b      	ldr	r3, [r3, #0]
 8037b3c:	f003 0308 	and.w	r3, r3, #8
 8037b40:	2b08      	cmp	r3, #8
 8037b42:	d10e      	bne.n	8037b62 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8037b44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8037b48:	9300      	str	r3, [sp, #0]
 8037b4a:	68fb      	ldr	r3, [r7, #12]
 8037b4c:	2200      	movs	r2, #0
 8037b4e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8037b52:	6878      	ldr	r0, [r7, #4]
 8037b54:	f000 f82f 	bl	8037bb6 <UART_WaitOnFlagUntilTimeout>
 8037b58:	4603      	mov	r3, r0
 8037b5a:	2b00      	cmp	r3, #0
 8037b5c:	d001      	beq.n	8037b62 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8037b5e:	2303      	movs	r3, #3
 8037b60:	e025      	b.n	8037bae <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8037b62:	687b      	ldr	r3, [r7, #4]
 8037b64:	681b      	ldr	r3, [r3, #0]
 8037b66:	681b      	ldr	r3, [r3, #0]
 8037b68:	f003 0304 	and.w	r3, r3, #4
 8037b6c:	2b04      	cmp	r3, #4
 8037b6e:	d10e      	bne.n	8037b8e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8037b70:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8037b74:	9300      	str	r3, [sp, #0]
 8037b76:	68fb      	ldr	r3, [r7, #12]
 8037b78:	2200      	movs	r2, #0
 8037b7a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8037b7e:	6878      	ldr	r0, [r7, #4]
 8037b80:	f000 f819 	bl	8037bb6 <UART_WaitOnFlagUntilTimeout>
 8037b84:	4603      	mov	r3, r0
 8037b86:	2b00      	cmp	r3, #0
 8037b88:	d001      	beq.n	8037b8e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8037b8a:	2303      	movs	r3, #3
 8037b8c:	e00f      	b.n	8037bae <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8037b8e:	687b      	ldr	r3, [r7, #4]
 8037b90:	2220      	movs	r2, #32
 8037b92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8037b96:	687b      	ldr	r3, [r7, #4]
 8037b98:	2220      	movs	r2, #32
 8037b9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8037b9e:	687b      	ldr	r3, [r7, #4]
 8037ba0:	2200      	movs	r2, #0
 8037ba2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8037ba4:	687b      	ldr	r3, [r7, #4]
 8037ba6:	2200      	movs	r2, #0
 8037ba8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8037bac:	2300      	movs	r3, #0
}
 8037bae:	4618      	mov	r0, r3
 8037bb0:	3710      	adds	r7, #16
 8037bb2:	46bd      	mov	sp, r7
 8037bb4:	bd80      	pop	{r7, pc}

08037bb6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8037bb6:	b580      	push	{r7, lr}
 8037bb8:	b09c      	sub	sp, #112	; 0x70
 8037bba:	af00      	add	r7, sp, #0
 8037bbc:	60f8      	str	r0, [r7, #12]
 8037bbe:	60b9      	str	r1, [r7, #8]
 8037bc0:	603b      	str	r3, [r7, #0]
 8037bc2:	4613      	mov	r3, r2
 8037bc4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8037bc6:	e0a9      	b.n	8037d1c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8037bc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8037bca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8037bce:	f000 80a5 	beq.w	8037d1c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8037bd2:	f7f4 faad 	bl	802c130 <HAL_GetTick>
 8037bd6:	4602      	mov	r2, r0
 8037bd8:	683b      	ldr	r3, [r7, #0]
 8037bda:	1ad3      	subs	r3, r2, r3
 8037bdc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8037bde:	429a      	cmp	r2, r3
 8037be0:	d302      	bcc.n	8037be8 <UART_WaitOnFlagUntilTimeout+0x32>
 8037be2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8037be4:	2b00      	cmp	r3, #0
 8037be6:	d140      	bne.n	8037c6a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8037be8:	68fb      	ldr	r3, [r7, #12]
 8037bea:	681b      	ldr	r3, [r3, #0]
 8037bec:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8037bee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8037bf0:	e853 3f00 	ldrex	r3, [r3]
 8037bf4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8037bf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8037bf8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8037bfc:	667b      	str	r3, [r7, #100]	; 0x64
 8037bfe:	68fb      	ldr	r3, [r7, #12]
 8037c00:	681b      	ldr	r3, [r3, #0]
 8037c02:	461a      	mov	r2, r3
 8037c04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8037c06:	65fb      	str	r3, [r7, #92]	; 0x5c
 8037c08:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8037c0a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8037c0c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8037c0e:	e841 2300 	strex	r3, r2, [r1]
 8037c12:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8037c14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8037c16:	2b00      	cmp	r3, #0
 8037c18:	d1e6      	bne.n	8037be8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8037c1a:	68fb      	ldr	r3, [r7, #12]
 8037c1c:	681b      	ldr	r3, [r3, #0]
 8037c1e:	3308      	adds	r3, #8
 8037c20:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8037c22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8037c24:	e853 3f00 	ldrex	r3, [r3]
 8037c28:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8037c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8037c2c:	f023 0301 	bic.w	r3, r3, #1
 8037c30:	663b      	str	r3, [r7, #96]	; 0x60
 8037c32:	68fb      	ldr	r3, [r7, #12]
 8037c34:	681b      	ldr	r3, [r3, #0]
 8037c36:	3308      	adds	r3, #8
 8037c38:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8037c3a:	64ba      	str	r2, [r7, #72]	; 0x48
 8037c3c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8037c3e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8037c40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8037c42:	e841 2300 	strex	r3, r2, [r1]
 8037c46:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8037c48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8037c4a:	2b00      	cmp	r3, #0
 8037c4c:	d1e5      	bne.n	8037c1a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8037c4e:	68fb      	ldr	r3, [r7, #12]
 8037c50:	2220      	movs	r2, #32
 8037c52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8037c56:	68fb      	ldr	r3, [r7, #12]
 8037c58:	2220      	movs	r2, #32
 8037c5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8037c5e:	68fb      	ldr	r3, [r7, #12]
 8037c60:	2200      	movs	r2, #0
 8037c62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8037c66:	2303      	movs	r3, #3
 8037c68:	e069      	b.n	8037d3e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8037c6a:	68fb      	ldr	r3, [r7, #12]
 8037c6c:	681b      	ldr	r3, [r3, #0]
 8037c6e:	681b      	ldr	r3, [r3, #0]
 8037c70:	f003 0304 	and.w	r3, r3, #4
 8037c74:	2b00      	cmp	r3, #0
 8037c76:	d051      	beq.n	8037d1c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8037c78:	68fb      	ldr	r3, [r7, #12]
 8037c7a:	681b      	ldr	r3, [r3, #0]
 8037c7c:	69db      	ldr	r3, [r3, #28]
 8037c7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8037c82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8037c86:	d149      	bne.n	8037d1c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8037c88:	68fb      	ldr	r3, [r7, #12]
 8037c8a:	681b      	ldr	r3, [r3, #0]
 8037c8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8037c90:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8037c92:	68fb      	ldr	r3, [r7, #12]
 8037c94:	681b      	ldr	r3, [r3, #0]
 8037c96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8037c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8037c9a:	e853 3f00 	ldrex	r3, [r3]
 8037c9e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8037ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8037ca2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8037ca6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8037ca8:	68fb      	ldr	r3, [r7, #12]
 8037caa:	681b      	ldr	r3, [r3, #0]
 8037cac:	461a      	mov	r2, r3
 8037cae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8037cb0:	637b      	str	r3, [r7, #52]	; 0x34
 8037cb2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8037cb4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8037cb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8037cb8:	e841 2300 	strex	r3, r2, [r1]
 8037cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8037cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8037cc0:	2b00      	cmp	r3, #0
 8037cc2:	d1e6      	bne.n	8037c92 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8037cc4:	68fb      	ldr	r3, [r7, #12]
 8037cc6:	681b      	ldr	r3, [r3, #0]
 8037cc8:	3308      	adds	r3, #8
 8037cca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8037ccc:	697b      	ldr	r3, [r7, #20]
 8037cce:	e853 3f00 	ldrex	r3, [r3]
 8037cd2:	613b      	str	r3, [r7, #16]
   return(result);
 8037cd4:	693b      	ldr	r3, [r7, #16]
 8037cd6:	f023 0301 	bic.w	r3, r3, #1
 8037cda:	66bb      	str	r3, [r7, #104]	; 0x68
 8037cdc:	68fb      	ldr	r3, [r7, #12]
 8037cde:	681b      	ldr	r3, [r3, #0]
 8037ce0:	3308      	adds	r3, #8
 8037ce2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8037ce4:	623a      	str	r2, [r7, #32]
 8037ce6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8037ce8:	69f9      	ldr	r1, [r7, #28]
 8037cea:	6a3a      	ldr	r2, [r7, #32]
 8037cec:	e841 2300 	strex	r3, r2, [r1]
 8037cf0:	61bb      	str	r3, [r7, #24]
   return(result);
 8037cf2:	69bb      	ldr	r3, [r7, #24]
 8037cf4:	2b00      	cmp	r3, #0
 8037cf6:	d1e5      	bne.n	8037cc4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8037cf8:	68fb      	ldr	r3, [r7, #12]
 8037cfa:	2220      	movs	r2, #32
 8037cfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8037d00:	68fb      	ldr	r3, [r7, #12]
 8037d02:	2220      	movs	r2, #32
 8037d04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8037d08:	68fb      	ldr	r3, [r7, #12]
 8037d0a:	2220      	movs	r2, #32
 8037d0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8037d10:	68fb      	ldr	r3, [r7, #12]
 8037d12:	2200      	movs	r2, #0
 8037d14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8037d18:	2303      	movs	r3, #3
 8037d1a:	e010      	b.n	8037d3e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8037d1c:	68fb      	ldr	r3, [r7, #12]
 8037d1e:	681b      	ldr	r3, [r3, #0]
 8037d20:	69da      	ldr	r2, [r3, #28]
 8037d22:	68bb      	ldr	r3, [r7, #8]
 8037d24:	4013      	ands	r3, r2
 8037d26:	68ba      	ldr	r2, [r7, #8]
 8037d28:	429a      	cmp	r2, r3
 8037d2a:	bf0c      	ite	eq
 8037d2c:	2301      	moveq	r3, #1
 8037d2e:	2300      	movne	r3, #0
 8037d30:	b2db      	uxtb	r3, r3
 8037d32:	461a      	mov	r2, r3
 8037d34:	79fb      	ldrb	r3, [r7, #7]
 8037d36:	429a      	cmp	r2, r3
 8037d38:	f43f af46 	beq.w	8037bc8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8037d3c:	2300      	movs	r3, #0
}
 8037d3e:	4618      	mov	r0, r3
 8037d40:	3770      	adds	r7, #112	; 0x70
 8037d42:	46bd      	mov	sp, r7
 8037d44:	bd80      	pop	{r7, pc}
	...

08037d48 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8037d48:	b480      	push	{r7}
 8037d4a:	b0a3      	sub	sp, #140	; 0x8c
 8037d4c:	af00      	add	r7, sp, #0
 8037d4e:	60f8      	str	r0, [r7, #12]
 8037d50:	60b9      	str	r1, [r7, #8]
 8037d52:	4613      	mov	r3, r2
 8037d54:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8037d56:	68fb      	ldr	r3, [r7, #12]
 8037d58:	68ba      	ldr	r2, [r7, #8]
 8037d5a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8037d5c:	68fb      	ldr	r3, [r7, #12]
 8037d5e:	88fa      	ldrh	r2, [r7, #6]
 8037d60:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8037d64:	68fb      	ldr	r3, [r7, #12]
 8037d66:	88fa      	ldrh	r2, [r7, #6]
 8037d68:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8037d6c:	68fb      	ldr	r3, [r7, #12]
 8037d6e:	2200      	movs	r2, #0
 8037d70:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8037d72:	68fb      	ldr	r3, [r7, #12]
 8037d74:	689b      	ldr	r3, [r3, #8]
 8037d76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8037d7a:	d10e      	bne.n	8037d9a <UART_Start_Receive_IT+0x52>
 8037d7c:	68fb      	ldr	r3, [r7, #12]
 8037d7e:	691b      	ldr	r3, [r3, #16]
 8037d80:	2b00      	cmp	r3, #0
 8037d82:	d105      	bne.n	8037d90 <UART_Start_Receive_IT+0x48>
 8037d84:	68fb      	ldr	r3, [r7, #12]
 8037d86:	f240 12ff 	movw	r2, #511	; 0x1ff
 8037d8a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8037d8e:	e02d      	b.n	8037dec <UART_Start_Receive_IT+0xa4>
 8037d90:	68fb      	ldr	r3, [r7, #12]
 8037d92:	22ff      	movs	r2, #255	; 0xff
 8037d94:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8037d98:	e028      	b.n	8037dec <UART_Start_Receive_IT+0xa4>
 8037d9a:	68fb      	ldr	r3, [r7, #12]
 8037d9c:	689b      	ldr	r3, [r3, #8]
 8037d9e:	2b00      	cmp	r3, #0
 8037da0:	d10d      	bne.n	8037dbe <UART_Start_Receive_IT+0x76>
 8037da2:	68fb      	ldr	r3, [r7, #12]
 8037da4:	691b      	ldr	r3, [r3, #16]
 8037da6:	2b00      	cmp	r3, #0
 8037da8:	d104      	bne.n	8037db4 <UART_Start_Receive_IT+0x6c>
 8037daa:	68fb      	ldr	r3, [r7, #12]
 8037dac:	22ff      	movs	r2, #255	; 0xff
 8037dae:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8037db2:	e01b      	b.n	8037dec <UART_Start_Receive_IT+0xa4>
 8037db4:	68fb      	ldr	r3, [r7, #12]
 8037db6:	227f      	movs	r2, #127	; 0x7f
 8037db8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8037dbc:	e016      	b.n	8037dec <UART_Start_Receive_IT+0xa4>
 8037dbe:	68fb      	ldr	r3, [r7, #12]
 8037dc0:	689b      	ldr	r3, [r3, #8]
 8037dc2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8037dc6:	d10d      	bne.n	8037de4 <UART_Start_Receive_IT+0x9c>
 8037dc8:	68fb      	ldr	r3, [r7, #12]
 8037dca:	691b      	ldr	r3, [r3, #16]
 8037dcc:	2b00      	cmp	r3, #0
 8037dce:	d104      	bne.n	8037dda <UART_Start_Receive_IT+0x92>
 8037dd0:	68fb      	ldr	r3, [r7, #12]
 8037dd2:	227f      	movs	r2, #127	; 0x7f
 8037dd4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8037dd8:	e008      	b.n	8037dec <UART_Start_Receive_IT+0xa4>
 8037dda:	68fb      	ldr	r3, [r7, #12]
 8037ddc:	223f      	movs	r2, #63	; 0x3f
 8037dde:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8037de2:	e003      	b.n	8037dec <UART_Start_Receive_IT+0xa4>
 8037de4:	68fb      	ldr	r3, [r7, #12]
 8037de6:	2200      	movs	r2, #0
 8037de8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8037dec:	68fb      	ldr	r3, [r7, #12]
 8037dee:	2200      	movs	r2, #0
 8037df0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8037df4:	68fb      	ldr	r3, [r7, #12]
 8037df6:	2222      	movs	r2, #34	; 0x22
 8037df8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8037dfc:	68fb      	ldr	r3, [r7, #12]
 8037dfe:	681b      	ldr	r3, [r3, #0]
 8037e00:	3308      	adds	r3, #8
 8037e02:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8037e04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8037e06:	e853 3f00 	ldrex	r3, [r3]
 8037e0a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8037e0c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8037e0e:	f043 0301 	orr.w	r3, r3, #1
 8037e12:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8037e16:	68fb      	ldr	r3, [r7, #12]
 8037e18:	681b      	ldr	r3, [r3, #0]
 8037e1a:	3308      	adds	r3, #8
 8037e1c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8037e20:	673a      	str	r2, [r7, #112]	; 0x70
 8037e22:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8037e24:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8037e26:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8037e28:	e841 2300 	strex	r3, r2, [r1]
 8037e2c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8037e2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8037e30:	2b00      	cmp	r3, #0
 8037e32:	d1e3      	bne.n	8037dfc <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8037e34:	68fb      	ldr	r3, [r7, #12]
 8037e36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8037e38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8037e3c:	d153      	bne.n	8037ee6 <UART_Start_Receive_IT+0x19e>
 8037e3e:	68fb      	ldr	r3, [r7, #12]
 8037e40:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8037e44:	88fa      	ldrh	r2, [r7, #6]
 8037e46:	429a      	cmp	r2, r3
 8037e48:	d34d      	bcc.n	8037ee6 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8037e4a:	68fb      	ldr	r3, [r7, #12]
 8037e4c:	689b      	ldr	r3, [r3, #8]
 8037e4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8037e52:	d107      	bne.n	8037e64 <UART_Start_Receive_IT+0x11c>
 8037e54:	68fb      	ldr	r3, [r7, #12]
 8037e56:	691b      	ldr	r3, [r3, #16]
 8037e58:	2b00      	cmp	r3, #0
 8037e5a:	d103      	bne.n	8037e64 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8037e5c:	68fb      	ldr	r3, [r7, #12]
 8037e5e:	4a4b      	ldr	r2, [pc, #300]	; (8037f8c <UART_Start_Receive_IT+0x244>)
 8037e60:	671a      	str	r2, [r3, #112]	; 0x70
 8037e62:	e002      	b.n	8037e6a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8037e64:	68fb      	ldr	r3, [r7, #12]
 8037e66:	4a4a      	ldr	r2, [pc, #296]	; (8037f90 <UART_Start_Receive_IT+0x248>)
 8037e68:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8037e6a:	68fb      	ldr	r3, [r7, #12]
 8037e6c:	2200      	movs	r2, #0
 8037e6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8037e72:	68fb      	ldr	r3, [r7, #12]
 8037e74:	691b      	ldr	r3, [r3, #16]
 8037e76:	2b00      	cmp	r3, #0
 8037e78:	d01a      	beq.n	8037eb0 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8037e7a:	68fb      	ldr	r3, [r7, #12]
 8037e7c:	681b      	ldr	r3, [r3, #0]
 8037e7e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8037e80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8037e82:	e853 3f00 	ldrex	r3, [r3]
 8037e86:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8037e88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8037e8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8037e8e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8037e92:	68fb      	ldr	r3, [r7, #12]
 8037e94:	681b      	ldr	r3, [r3, #0]
 8037e96:	461a      	mov	r2, r3
 8037e98:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8037e9c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8037e9e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8037ea0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8037ea2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8037ea4:	e841 2300 	strex	r3, r2, [r1]
 8037ea8:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8037eaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8037eac:	2b00      	cmp	r3, #0
 8037eae:	d1e4      	bne.n	8037e7a <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8037eb0:	68fb      	ldr	r3, [r7, #12]
 8037eb2:	681b      	ldr	r3, [r3, #0]
 8037eb4:	3308      	adds	r3, #8
 8037eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8037eb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8037eba:	e853 3f00 	ldrex	r3, [r3]
 8037ebe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8037ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8037ec2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8037ec6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8037ec8:	68fb      	ldr	r3, [r7, #12]
 8037eca:	681b      	ldr	r3, [r3, #0]
 8037ecc:	3308      	adds	r3, #8
 8037ece:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8037ed0:	64ba      	str	r2, [r7, #72]	; 0x48
 8037ed2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8037ed4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8037ed6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8037ed8:	e841 2300 	strex	r3, r2, [r1]
 8037edc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8037ede:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8037ee0:	2b00      	cmp	r3, #0
 8037ee2:	d1e5      	bne.n	8037eb0 <UART_Start_Receive_IT+0x168>
 8037ee4:	e04a      	b.n	8037f7c <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8037ee6:	68fb      	ldr	r3, [r7, #12]
 8037ee8:	689b      	ldr	r3, [r3, #8]
 8037eea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8037eee:	d107      	bne.n	8037f00 <UART_Start_Receive_IT+0x1b8>
 8037ef0:	68fb      	ldr	r3, [r7, #12]
 8037ef2:	691b      	ldr	r3, [r3, #16]
 8037ef4:	2b00      	cmp	r3, #0
 8037ef6:	d103      	bne.n	8037f00 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8037ef8:	68fb      	ldr	r3, [r7, #12]
 8037efa:	4a26      	ldr	r2, [pc, #152]	; (8037f94 <UART_Start_Receive_IT+0x24c>)
 8037efc:	671a      	str	r2, [r3, #112]	; 0x70
 8037efe:	e002      	b.n	8037f06 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8037f00:	68fb      	ldr	r3, [r7, #12]
 8037f02:	4a25      	ldr	r2, [pc, #148]	; (8037f98 <UART_Start_Receive_IT+0x250>)
 8037f04:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8037f06:	68fb      	ldr	r3, [r7, #12]
 8037f08:	2200      	movs	r2, #0
 8037f0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8037f0e:	68fb      	ldr	r3, [r7, #12]
 8037f10:	691b      	ldr	r3, [r3, #16]
 8037f12:	2b00      	cmp	r3, #0
 8037f14:	d019      	beq.n	8037f4a <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8037f16:	68fb      	ldr	r3, [r7, #12]
 8037f18:	681b      	ldr	r3, [r3, #0]
 8037f1a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8037f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8037f1e:	e853 3f00 	ldrex	r3, [r3]
 8037f22:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8037f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8037f26:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8037f2a:	677b      	str	r3, [r7, #116]	; 0x74
 8037f2c:	68fb      	ldr	r3, [r7, #12]
 8037f2e:	681b      	ldr	r3, [r3, #0]
 8037f30:	461a      	mov	r2, r3
 8037f32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8037f34:	637b      	str	r3, [r7, #52]	; 0x34
 8037f36:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8037f38:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8037f3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8037f3c:	e841 2300 	strex	r3, r2, [r1]
 8037f40:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8037f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8037f44:	2b00      	cmp	r3, #0
 8037f46:	d1e6      	bne.n	8037f16 <UART_Start_Receive_IT+0x1ce>
 8037f48:	e018      	b.n	8037f7c <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8037f4a:	68fb      	ldr	r3, [r7, #12]
 8037f4c:	681b      	ldr	r3, [r3, #0]
 8037f4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8037f50:	697b      	ldr	r3, [r7, #20]
 8037f52:	e853 3f00 	ldrex	r3, [r3]
 8037f56:	613b      	str	r3, [r7, #16]
   return(result);
 8037f58:	693b      	ldr	r3, [r7, #16]
 8037f5a:	f043 0320 	orr.w	r3, r3, #32
 8037f5e:	67bb      	str	r3, [r7, #120]	; 0x78
 8037f60:	68fb      	ldr	r3, [r7, #12]
 8037f62:	681b      	ldr	r3, [r3, #0]
 8037f64:	461a      	mov	r2, r3
 8037f66:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8037f68:	623b      	str	r3, [r7, #32]
 8037f6a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8037f6c:	69f9      	ldr	r1, [r7, #28]
 8037f6e:	6a3a      	ldr	r2, [r7, #32]
 8037f70:	e841 2300 	strex	r3, r2, [r1]
 8037f74:	61bb      	str	r3, [r7, #24]
   return(result);
 8037f76:	69bb      	ldr	r3, [r7, #24]
 8037f78:	2b00      	cmp	r3, #0
 8037f7a:	d1e6      	bne.n	8037f4a <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 8037f7c:	2300      	movs	r3, #0
}
 8037f7e:	4618      	mov	r0, r3
 8037f80:	378c      	adds	r7, #140	; 0x8c
 8037f82:	46bd      	mov	sp, r7
 8037f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8037f88:	4770      	bx	lr
 8037f8a:	bf00      	nop
 8037f8c:	080386a5 	.word	0x080386a5
 8037f90:	080383ad 	.word	0x080383ad
 8037f94:	0803824b 	.word	0x0803824b
 8037f98:	080380eb 	.word	0x080380eb

08037f9c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8037f9c:	b480      	push	{r7}
 8037f9e:	b095      	sub	sp, #84	; 0x54
 8037fa0:	af00      	add	r7, sp, #0
 8037fa2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8037fa4:	687b      	ldr	r3, [r7, #4]
 8037fa6:	681b      	ldr	r3, [r3, #0]
 8037fa8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8037faa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8037fac:	e853 3f00 	ldrex	r3, [r3]
 8037fb0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8037fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8037fb4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8037fb8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8037fba:	687b      	ldr	r3, [r7, #4]
 8037fbc:	681b      	ldr	r3, [r3, #0]
 8037fbe:	461a      	mov	r2, r3
 8037fc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8037fc2:	643b      	str	r3, [r7, #64]	; 0x40
 8037fc4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8037fc6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8037fc8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8037fca:	e841 2300 	strex	r3, r2, [r1]
 8037fce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8037fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8037fd2:	2b00      	cmp	r3, #0
 8037fd4:	d1e6      	bne.n	8037fa4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8037fd6:	687b      	ldr	r3, [r7, #4]
 8037fd8:	681b      	ldr	r3, [r3, #0]
 8037fda:	3308      	adds	r3, #8
 8037fdc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8037fde:	6a3b      	ldr	r3, [r7, #32]
 8037fe0:	e853 3f00 	ldrex	r3, [r3]
 8037fe4:	61fb      	str	r3, [r7, #28]
   return(result);
 8037fe6:	69fa      	ldr	r2, [r7, #28]
 8037fe8:	4b1e      	ldr	r3, [pc, #120]	; (8038064 <UART_EndRxTransfer+0xc8>)
 8037fea:	4013      	ands	r3, r2
 8037fec:	64bb      	str	r3, [r7, #72]	; 0x48
 8037fee:	687b      	ldr	r3, [r7, #4]
 8037ff0:	681b      	ldr	r3, [r3, #0]
 8037ff2:	3308      	adds	r3, #8
 8037ff4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8037ff6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8037ff8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8037ffa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8037ffc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8037ffe:	e841 2300 	strex	r3, r2, [r1]
 8038002:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8038004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8038006:	2b00      	cmp	r3, #0
 8038008:	d1e5      	bne.n	8037fd6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 803800a:	687b      	ldr	r3, [r7, #4]
 803800c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 803800e:	2b01      	cmp	r3, #1
 8038010:	d118      	bne.n	8038044 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8038012:	687b      	ldr	r3, [r7, #4]
 8038014:	681b      	ldr	r3, [r3, #0]
 8038016:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8038018:	68fb      	ldr	r3, [r7, #12]
 803801a:	e853 3f00 	ldrex	r3, [r3]
 803801e:	60bb      	str	r3, [r7, #8]
   return(result);
 8038020:	68bb      	ldr	r3, [r7, #8]
 8038022:	f023 0310 	bic.w	r3, r3, #16
 8038026:	647b      	str	r3, [r7, #68]	; 0x44
 8038028:	687b      	ldr	r3, [r7, #4]
 803802a:	681b      	ldr	r3, [r3, #0]
 803802c:	461a      	mov	r2, r3
 803802e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8038030:	61bb      	str	r3, [r7, #24]
 8038032:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8038034:	6979      	ldr	r1, [r7, #20]
 8038036:	69ba      	ldr	r2, [r7, #24]
 8038038:	e841 2300 	strex	r3, r2, [r1]
 803803c:	613b      	str	r3, [r7, #16]
   return(result);
 803803e:	693b      	ldr	r3, [r7, #16]
 8038040:	2b00      	cmp	r3, #0
 8038042:	d1e6      	bne.n	8038012 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8038044:	687b      	ldr	r3, [r7, #4]
 8038046:	2220      	movs	r2, #32
 8038048:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 803804c:	687b      	ldr	r3, [r7, #4]
 803804e:	2200      	movs	r2, #0
 8038050:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8038052:	687b      	ldr	r3, [r7, #4]
 8038054:	2200      	movs	r2, #0
 8038056:	671a      	str	r2, [r3, #112]	; 0x70
}
 8038058:	bf00      	nop
 803805a:	3754      	adds	r7, #84	; 0x54
 803805c:	46bd      	mov	sp, r7
 803805e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8038062:	4770      	bx	lr
 8038064:	effffffe 	.word	0xeffffffe

08038068 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8038068:	b580      	push	{r7, lr}
 803806a:	b084      	sub	sp, #16
 803806c:	af00      	add	r7, sp, #0
 803806e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8038070:	687b      	ldr	r3, [r7, #4]
 8038072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8038074:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8038076:	68fb      	ldr	r3, [r7, #12]
 8038078:	2200      	movs	r2, #0
 803807a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 803807e:	68fb      	ldr	r3, [r7, #12]
 8038080:	2200      	movs	r2, #0
 8038082:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8038086:	68f8      	ldr	r0, [r7, #12]
 8038088:	f7fe ff2a 	bl	8036ee0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 803808c:	bf00      	nop
 803808e:	3710      	adds	r7, #16
 8038090:	46bd      	mov	sp, r7
 8038092:	bd80      	pop	{r7, pc}

08038094 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8038094:	b580      	push	{r7, lr}
 8038096:	b088      	sub	sp, #32
 8038098:	af00      	add	r7, sp, #0
 803809a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 803809c:	687b      	ldr	r3, [r7, #4]
 803809e:	681b      	ldr	r3, [r3, #0]
 80380a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80380a2:	68fb      	ldr	r3, [r7, #12]
 80380a4:	e853 3f00 	ldrex	r3, [r3]
 80380a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80380aa:	68bb      	ldr	r3, [r7, #8]
 80380ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80380b0:	61fb      	str	r3, [r7, #28]
 80380b2:	687b      	ldr	r3, [r7, #4]
 80380b4:	681b      	ldr	r3, [r3, #0]
 80380b6:	461a      	mov	r2, r3
 80380b8:	69fb      	ldr	r3, [r7, #28]
 80380ba:	61bb      	str	r3, [r7, #24]
 80380bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80380be:	6979      	ldr	r1, [r7, #20]
 80380c0:	69ba      	ldr	r2, [r7, #24]
 80380c2:	e841 2300 	strex	r3, r2, [r1]
 80380c6:	613b      	str	r3, [r7, #16]
   return(result);
 80380c8:	693b      	ldr	r3, [r7, #16]
 80380ca:	2b00      	cmp	r3, #0
 80380cc:	d1e6      	bne.n	803809c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80380ce:	687b      	ldr	r3, [r7, #4]
 80380d0:	2220      	movs	r2, #32
 80380d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80380d6:	687b      	ldr	r3, [r7, #4]
 80380d8:	2200      	movs	r2, #0
 80380da:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80380dc:	6878      	ldr	r0, [r7, #4]
 80380de:	f7f2 ff3f 	bl	802af60 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80380e2:	bf00      	nop
 80380e4:	3720      	adds	r7, #32
 80380e6:	46bd      	mov	sp, r7
 80380e8:	bd80      	pop	{r7, pc}

080380ea <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80380ea:	b580      	push	{r7, lr}
 80380ec:	b096      	sub	sp, #88	; 0x58
 80380ee:	af00      	add	r7, sp, #0
 80380f0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80380f2:	687b      	ldr	r3, [r7, #4]
 80380f4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80380f8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80380fc:	687b      	ldr	r3, [r7, #4]
 80380fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8038102:	2b22      	cmp	r3, #34	; 0x22
 8038104:	f040 8095 	bne.w	8038232 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8038108:	687b      	ldr	r3, [r7, #4]
 803810a:	681b      	ldr	r3, [r3, #0]
 803810c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803810e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8038112:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8038116:	b2d9      	uxtb	r1, r3
 8038118:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 803811c:	b2da      	uxtb	r2, r3
 803811e:	687b      	ldr	r3, [r7, #4]
 8038120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8038122:	400a      	ands	r2, r1
 8038124:	b2d2      	uxtb	r2, r2
 8038126:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8038128:	687b      	ldr	r3, [r7, #4]
 803812a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 803812c:	1c5a      	adds	r2, r3, #1
 803812e:	687b      	ldr	r3, [r7, #4]
 8038130:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8038132:	687b      	ldr	r3, [r7, #4]
 8038134:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8038138:	b29b      	uxth	r3, r3
 803813a:	3b01      	subs	r3, #1
 803813c:	b29a      	uxth	r2, r3
 803813e:	687b      	ldr	r3, [r7, #4]
 8038140:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8038144:	687b      	ldr	r3, [r7, #4]
 8038146:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 803814a:	b29b      	uxth	r3, r3
 803814c:	2b00      	cmp	r3, #0
 803814e:	d178      	bne.n	8038242 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8038150:	687b      	ldr	r3, [r7, #4]
 8038152:	681b      	ldr	r3, [r3, #0]
 8038154:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8038156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8038158:	e853 3f00 	ldrex	r3, [r3]
 803815c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 803815e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8038160:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8038164:	653b      	str	r3, [r7, #80]	; 0x50
 8038166:	687b      	ldr	r3, [r7, #4]
 8038168:	681b      	ldr	r3, [r3, #0]
 803816a:	461a      	mov	r2, r3
 803816c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 803816e:	647b      	str	r3, [r7, #68]	; 0x44
 8038170:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8038172:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8038174:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8038176:	e841 2300 	strex	r3, r2, [r1]
 803817a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 803817c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 803817e:	2b00      	cmp	r3, #0
 8038180:	d1e6      	bne.n	8038150 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8038182:	687b      	ldr	r3, [r7, #4]
 8038184:	681b      	ldr	r3, [r3, #0]
 8038186:	3308      	adds	r3, #8
 8038188:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803818a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803818c:	e853 3f00 	ldrex	r3, [r3]
 8038190:	623b      	str	r3, [r7, #32]
   return(result);
 8038192:	6a3b      	ldr	r3, [r7, #32]
 8038194:	f023 0301 	bic.w	r3, r3, #1
 8038198:	64fb      	str	r3, [r7, #76]	; 0x4c
 803819a:	687b      	ldr	r3, [r7, #4]
 803819c:	681b      	ldr	r3, [r3, #0]
 803819e:	3308      	adds	r3, #8
 80381a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80381a2:	633a      	str	r2, [r7, #48]	; 0x30
 80381a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80381a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80381a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80381aa:	e841 2300 	strex	r3, r2, [r1]
 80381ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80381b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80381b2:	2b00      	cmp	r3, #0
 80381b4:	d1e5      	bne.n	8038182 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80381b6:	687b      	ldr	r3, [r7, #4]
 80381b8:	2220      	movs	r2, #32
 80381ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80381be:	687b      	ldr	r3, [r7, #4]
 80381c0:	2200      	movs	r2, #0
 80381c2:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80381c4:	687b      	ldr	r3, [r7, #4]
 80381c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80381c8:	2b01      	cmp	r3, #1
 80381ca:	d12e      	bne.n	803822a <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80381cc:	687b      	ldr	r3, [r7, #4]
 80381ce:	2200      	movs	r2, #0
 80381d0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80381d2:	687b      	ldr	r3, [r7, #4]
 80381d4:	681b      	ldr	r3, [r3, #0]
 80381d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80381d8:	693b      	ldr	r3, [r7, #16]
 80381da:	e853 3f00 	ldrex	r3, [r3]
 80381de:	60fb      	str	r3, [r7, #12]
   return(result);
 80381e0:	68fb      	ldr	r3, [r7, #12]
 80381e2:	f023 0310 	bic.w	r3, r3, #16
 80381e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80381e8:	687b      	ldr	r3, [r7, #4]
 80381ea:	681b      	ldr	r3, [r3, #0]
 80381ec:	461a      	mov	r2, r3
 80381ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80381f0:	61fb      	str	r3, [r7, #28]
 80381f2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80381f4:	69b9      	ldr	r1, [r7, #24]
 80381f6:	69fa      	ldr	r2, [r7, #28]
 80381f8:	e841 2300 	strex	r3, r2, [r1]
 80381fc:	617b      	str	r3, [r7, #20]
   return(result);
 80381fe:	697b      	ldr	r3, [r7, #20]
 8038200:	2b00      	cmp	r3, #0
 8038202:	d1e6      	bne.n	80381d2 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8038204:	687b      	ldr	r3, [r7, #4]
 8038206:	681b      	ldr	r3, [r3, #0]
 8038208:	69db      	ldr	r3, [r3, #28]
 803820a:	f003 0310 	and.w	r3, r3, #16
 803820e:	2b10      	cmp	r3, #16
 8038210:	d103      	bne.n	803821a <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8038212:	687b      	ldr	r3, [r7, #4]
 8038214:	681b      	ldr	r3, [r3, #0]
 8038216:	2210      	movs	r2, #16
 8038218:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 803821a:	687b      	ldr	r3, [r7, #4]
 803821c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8038220:	4619      	mov	r1, r3
 8038222:	6878      	ldr	r0, [r7, #4]
 8038224:	f7fe fe66 	bl	8036ef4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8038228:	e00b      	b.n	8038242 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 803822a:	6878      	ldr	r0, [r7, #4]
 803822c:	f7f2 fe74 	bl	802af18 <HAL_UART_RxCpltCallback>
}
 8038230:	e007      	b.n	8038242 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8038232:	687b      	ldr	r3, [r7, #4]
 8038234:	681b      	ldr	r3, [r3, #0]
 8038236:	699a      	ldr	r2, [r3, #24]
 8038238:	687b      	ldr	r3, [r7, #4]
 803823a:	681b      	ldr	r3, [r3, #0]
 803823c:	f042 0208 	orr.w	r2, r2, #8
 8038240:	619a      	str	r2, [r3, #24]
}
 8038242:	bf00      	nop
 8038244:	3758      	adds	r7, #88	; 0x58
 8038246:	46bd      	mov	sp, r7
 8038248:	bd80      	pop	{r7, pc}

0803824a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 803824a:	b580      	push	{r7, lr}
 803824c:	b096      	sub	sp, #88	; 0x58
 803824e:	af00      	add	r7, sp, #0
 8038250:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8038252:	687b      	ldr	r3, [r7, #4]
 8038254:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8038258:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 803825c:	687b      	ldr	r3, [r7, #4]
 803825e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8038262:	2b22      	cmp	r3, #34	; 0x22
 8038264:	f040 8095 	bne.w	8038392 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8038268:	687b      	ldr	r3, [r7, #4]
 803826a:	681b      	ldr	r3, [r3, #0]
 803826c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803826e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8038272:	687b      	ldr	r3, [r7, #4]
 8038274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8038276:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8038278:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 803827c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8038280:	4013      	ands	r3, r2
 8038282:	b29a      	uxth	r2, r3
 8038284:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8038286:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8038288:	687b      	ldr	r3, [r7, #4]
 803828a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 803828c:	1c9a      	adds	r2, r3, #2
 803828e:	687b      	ldr	r3, [r7, #4]
 8038290:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8038292:	687b      	ldr	r3, [r7, #4]
 8038294:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8038298:	b29b      	uxth	r3, r3
 803829a:	3b01      	subs	r3, #1
 803829c:	b29a      	uxth	r2, r3
 803829e:	687b      	ldr	r3, [r7, #4]
 80382a0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80382a4:	687b      	ldr	r3, [r7, #4]
 80382a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80382aa:	b29b      	uxth	r3, r3
 80382ac:	2b00      	cmp	r3, #0
 80382ae:	d178      	bne.n	80383a2 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80382b0:	687b      	ldr	r3, [r7, #4]
 80382b2:	681b      	ldr	r3, [r3, #0]
 80382b4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80382b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80382b8:	e853 3f00 	ldrex	r3, [r3]
 80382bc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80382be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80382c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80382c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80382c6:	687b      	ldr	r3, [r7, #4]
 80382c8:	681b      	ldr	r3, [r3, #0]
 80382ca:	461a      	mov	r2, r3
 80382cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80382ce:	643b      	str	r3, [r7, #64]	; 0x40
 80382d0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80382d2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80382d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80382d6:	e841 2300 	strex	r3, r2, [r1]
 80382da:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80382dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80382de:	2b00      	cmp	r3, #0
 80382e0:	d1e6      	bne.n	80382b0 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80382e2:	687b      	ldr	r3, [r7, #4]
 80382e4:	681b      	ldr	r3, [r3, #0]
 80382e6:	3308      	adds	r3, #8
 80382e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80382ea:	6a3b      	ldr	r3, [r7, #32]
 80382ec:	e853 3f00 	ldrex	r3, [r3]
 80382f0:	61fb      	str	r3, [r7, #28]
   return(result);
 80382f2:	69fb      	ldr	r3, [r7, #28]
 80382f4:	f023 0301 	bic.w	r3, r3, #1
 80382f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80382fa:	687b      	ldr	r3, [r7, #4]
 80382fc:	681b      	ldr	r3, [r3, #0]
 80382fe:	3308      	adds	r3, #8
 8038300:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8038302:	62fa      	str	r2, [r7, #44]	; 0x2c
 8038304:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8038306:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8038308:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 803830a:	e841 2300 	strex	r3, r2, [r1]
 803830e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8038310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8038312:	2b00      	cmp	r3, #0
 8038314:	d1e5      	bne.n	80382e2 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8038316:	687b      	ldr	r3, [r7, #4]
 8038318:	2220      	movs	r2, #32
 803831a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 803831e:	687b      	ldr	r3, [r7, #4]
 8038320:	2200      	movs	r2, #0
 8038322:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8038324:	687b      	ldr	r3, [r7, #4]
 8038326:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8038328:	2b01      	cmp	r3, #1
 803832a:	d12e      	bne.n	803838a <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 803832c:	687b      	ldr	r3, [r7, #4]
 803832e:	2200      	movs	r2, #0
 8038330:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8038332:	687b      	ldr	r3, [r7, #4]
 8038334:	681b      	ldr	r3, [r3, #0]
 8038336:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8038338:	68fb      	ldr	r3, [r7, #12]
 803833a:	e853 3f00 	ldrex	r3, [r3]
 803833e:	60bb      	str	r3, [r7, #8]
   return(result);
 8038340:	68bb      	ldr	r3, [r7, #8]
 8038342:	f023 0310 	bic.w	r3, r3, #16
 8038346:	647b      	str	r3, [r7, #68]	; 0x44
 8038348:	687b      	ldr	r3, [r7, #4]
 803834a:	681b      	ldr	r3, [r3, #0]
 803834c:	461a      	mov	r2, r3
 803834e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8038350:	61bb      	str	r3, [r7, #24]
 8038352:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8038354:	6979      	ldr	r1, [r7, #20]
 8038356:	69ba      	ldr	r2, [r7, #24]
 8038358:	e841 2300 	strex	r3, r2, [r1]
 803835c:	613b      	str	r3, [r7, #16]
   return(result);
 803835e:	693b      	ldr	r3, [r7, #16]
 8038360:	2b00      	cmp	r3, #0
 8038362:	d1e6      	bne.n	8038332 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8038364:	687b      	ldr	r3, [r7, #4]
 8038366:	681b      	ldr	r3, [r3, #0]
 8038368:	69db      	ldr	r3, [r3, #28]
 803836a:	f003 0310 	and.w	r3, r3, #16
 803836e:	2b10      	cmp	r3, #16
 8038370:	d103      	bne.n	803837a <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8038372:	687b      	ldr	r3, [r7, #4]
 8038374:	681b      	ldr	r3, [r3, #0]
 8038376:	2210      	movs	r2, #16
 8038378:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 803837a:	687b      	ldr	r3, [r7, #4]
 803837c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8038380:	4619      	mov	r1, r3
 8038382:	6878      	ldr	r0, [r7, #4]
 8038384:	f7fe fdb6 	bl	8036ef4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8038388:	e00b      	b.n	80383a2 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 803838a:	6878      	ldr	r0, [r7, #4]
 803838c:	f7f2 fdc4 	bl	802af18 <HAL_UART_RxCpltCallback>
}
 8038390:	e007      	b.n	80383a2 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8038392:	687b      	ldr	r3, [r7, #4]
 8038394:	681b      	ldr	r3, [r3, #0]
 8038396:	699a      	ldr	r2, [r3, #24]
 8038398:	687b      	ldr	r3, [r7, #4]
 803839a:	681b      	ldr	r3, [r3, #0]
 803839c:	f042 0208 	orr.w	r2, r2, #8
 80383a0:	619a      	str	r2, [r3, #24]
}
 80383a2:	bf00      	nop
 80383a4:	3758      	adds	r7, #88	; 0x58
 80383a6:	46bd      	mov	sp, r7
 80383a8:	bd80      	pop	{r7, pc}
	...

080383ac <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80383ac:	b580      	push	{r7, lr}
 80383ae:	b0a6      	sub	sp, #152	; 0x98
 80383b0:	af00      	add	r7, sp, #0
 80383b2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80383b4:	687b      	ldr	r3, [r7, #4]
 80383b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80383ba:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80383be:	687b      	ldr	r3, [r7, #4]
 80383c0:	681b      	ldr	r3, [r3, #0]
 80383c2:	69db      	ldr	r3, [r3, #28]
 80383c4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80383c8:	687b      	ldr	r3, [r7, #4]
 80383ca:	681b      	ldr	r3, [r3, #0]
 80383cc:	681b      	ldr	r3, [r3, #0]
 80383ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80383d2:	687b      	ldr	r3, [r7, #4]
 80383d4:	681b      	ldr	r3, [r3, #0]
 80383d6:	689b      	ldr	r3, [r3, #8]
 80383d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80383dc:	687b      	ldr	r3, [r7, #4]
 80383de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80383e2:	2b22      	cmp	r3, #34	; 0x22
 80383e4:	f040 814d 	bne.w	8038682 <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80383e8:	687b      	ldr	r3, [r7, #4]
 80383ea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80383ee:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80383f2:	e0f4      	b.n	80385de <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80383f4:	687b      	ldr	r3, [r7, #4]
 80383f6:	681b      	ldr	r3, [r3, #0]
 80383f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80383fa:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80383fe:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8038402:	b2d9      	uxtb	r1, r3
 8038404:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8038408:	b2da      	uxtb	r2, r3
 803840a:	687b      	ldr	r3, [r7, #4]
 803840c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 803840e:	400a      	ands	r2, r1
 8038410:	b2d2      	uxtb	r2, r2
 8038412:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8038414:	687b      	ldr	r3, [r7, #4]
 8038416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8038418:	1c5a      	adds	r2, r3, #1
 803841a:	687b      	ldr	r3, [r7, #4]
 803841c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 803841e:	687b      	ldr	r3, [r7, #4]
 8038420:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8038424:	b29b      	uxth	r3, r3
 8038426:	3b01      	subs	r3, #1
 8038428:	b29a      	uxth	r2, r3
 803842a:	687b      	ldr	r3, [r7, #4]
 803842c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8038430:	687b      	ldr	r3, [r7, #4]
 8038432:	681b      	ldr	r3, [r3, #0]
 8038434:	69db      	ldr	r3, [r3, #28]
 8038436:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 803843a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 803843e:	f003 0307 	and.w	r3, r3, #7
 8038442:	2b00      	cmp	r3, #0
 8038444:	d053      	beq.n	80384ee <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8038446:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 803844a:	f003 0301 	and.w	r3, r3, #1
 803844e:	2b00      	cmp	r3, #0
 8038450:	d011      	beq.n	8038476 <UART_RxISR_8BIT_FIFOEN+0xca>
 8038452:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8038456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 803845a:	2b00      	cmp	r3, #0
 803845c:	d00b      	beq.n	8038476 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 803845e:	687b      	ldr	r3, [r7, #4]
 8038460:	681b      	ldr	r3, [r3, #0]
 8038462:	2201      	movs	r2, #1
 8038464:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8038466:	687b      	ldr	r3, [r7, #4]
 8038468:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 803846c:	f043 0201 	orr.w	r2, r3, #1
 8038470:	687b      	ldr	r3, [r7, #4]
 8038472:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8038476:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 803847a:	f003 0302 	and.w	r3, r3, #2
 803847e:	2b00      	cmp	r3, #0
 8038480:	d011      	beq.n	80384a6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8038482:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8038486:	f003 0301 	and.w	r3, r3, #1
 803848a:	2b00      	cmp	r3, #0
 803848c:	d00b      	beq.n	80384a6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 803848e:	687b      	ldr	r3, [r7, #4]
 8038490:	681b      	ldr	r3, [r3, #0]
 8038492:	2202      	movs	r2, #2
 8038494:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8038496:	687b      	ldr	r3, [r7, #4]
 8038498:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 803849c:	f043 0204 	orr.w	r2, r3, #4
 80384a0:	687b      	ldr	r3, [r7, #4]
 80384a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80384a6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80384aa:	f003 0304 	and.w	r3, r3, #4
 80384ae:	2b00      	cmp	r3, #0
 80384b0:	d011      	beq.n	80384d6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80384b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80384b6:	f003 0301 	and.w	r3, r3, #1
 80384ba:	2b00      	cmp	r3, #0
 80384bc:	d00b      	beq.n	80384d6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80384be:	687b      	ldr	r3, [r7, #4]
 80384c0:	681b      	ldr	r3, [r3, #0]
 80384c2:	2204      	movs	r2, #4
 80384c4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80384c6:	687b      	ldr	r3, [r7, #4]
 80384c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80384cc:	f043 0202 	orr.w	r2, r3, #2
 80384d0:	687b      	ldr	r3, [r7, #4]
 80384d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80384d6:	687b      	ldr	r3, [r7, #4]
 80384d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80384dc:	2b00      	cmp	r3, #0
 80384de:	d006      	beq.n	80384ee <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80384e0:	6878      	ldr	r0, [r7, #4]
 80384e2:	f7fe fcfd 	bl	8036ee0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80384e6:	687b      	ldr	r3, [r7, #4]
 80384e8:	2200      	movs	r2, #0
 80384ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80384ee:	687b      	ldr	r3, [r7, #4]
 80384f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80384f4:	b29b      	uxth	r3, r3
 80384f6:	2b00      	cmp	r3, #0
 80384f8:	d171      	bne.n	80385de <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80384fa:	687b      	ldr	r3, [r7, #4]
 80384fc:	681b      	ldr	r3, [r3, #0]
 80384fe:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8038500:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8038502:	e853 3f00 	ldrex	r3, [r3]
 8038506:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8038508:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 803850a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 803850e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8038512:	687b      	ldr	r3, [r7, #4]
 8038514:	681b      	ldr	r3, [r3, #0]
 8038516:	461a      	mov	r2, r3
 8038518:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 803851c:	66bb      	str	r3, [r7, #104]	; 0x68
 803851e:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8038520:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8038522:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8038524:	e841 2300 	strex	r3, r2, [r1]
 8038528:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 803852a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 803852c:	2b00      	cmp	r3, #0
 803852e:	d1e4      	bne.n	80384fa <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8038530:	687b      	ldr	r3, [r7, #4]
 8038532:	681b      	ldr	r3, [r3, #0]
 8038534:	3308      	adds	r3, #8
 8038536:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8038538:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 803853a:	e853 3f00 	ldrex	r3, [r3]
 803853e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8038540:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8038542:	4b56      	ldr	r3, [pc, #344]	; (803869c <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 8038544:	4013      	ands	r3, r2
 8038546:	67fb      	str	r3, [r7, #124]	; 0x7c
 8038548:	687b      	ldr	r3, [r7, #4]
 803854a:	681b      	ldr	r3, [r3, #0]
 803854c:	3308      	adds	r3, #8
 803854e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8038550:	657a      	str	r2, [r7, #84]	; 0x54
 8038552:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8038554:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8038556:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8038558:	e841 2300 	strex	r3, r2, [r1]
 803855c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 803855e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8038560:	2b00      	cmp	r3, #0
 8038562:	d1e5      	bne.n	8038530 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8038564:	687b      	ldr	r3, [r7, #4]
 8038566:	2220      	movs	r2, #32
 8038568:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 803856c:	687b      	ldr	r3, [r7, #4]
 803856e:	2200      	movs	r2, #0
 8038570:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8038572:	687b      	ldr	r3, [r7, #4]
 8038574:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8038576:	2b01      	cmp	r3, #1
 8038578:	d12e      	bne.n	80385d8 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 803857a:	687b      	ldr	r3, [r7, #4]
 803857c:	2200      	movs	r2, #0
 803857e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8038580:	687b      	ldr	r3, [r7, #4]
 8038582:	681b      	ldr	r3, [r3, #0]
 8038584:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8038586:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8038588:	e853 3f00 	ldrex	r3, [r3]
 803858c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 803858e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8038590:	f023 0310 	bic.w	r3, r3, #16
 8038594:	67bb      	str	r3, [r7, #120]	; 0x78
 8038596:	687b      	ldr	r3, [r7, #4]
 8038598:	681b      	ldr	r3, [r3, #0]
 803859a:	461a      	mov	r2, r3
 803859c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 803859e:	643b      	str	r3, [r7, #64]	; 0x40
 80385a0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80385a2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80385a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80385a6:	e841 2300 	strex	r3, r2, [r1]
 80385aa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80385ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80385ae:	2b00      	cmp	r3, #0
 80385b0:	d1e6      	bne.n	8038580 <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80385b2:	687b      	ldr	r3, [r7, #4]
 80385b4:	681b      	ldr	r3, [r3, #0]
 80385b6:	69db      	ldr	r3, [r3, #28]
 80385b8:	f003 0310 	and.w	r3, r3, #16
 80385bc:	2b10      	cmp	r3, #16
 80385be:	d103      	bne.n	80385c8 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80385c0:	687b      	ldr	r3, [r7, #4]
 80385c2:	681b      	ldr	r3, [r3, #0]
 80385c4:	2210      	movs	r2, #16
 80385c6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80385c8:	687b      	ldr	r3, [r7, #4]
 80385ca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80385ce:	4619      	mov	r1, r3
 80385d0:	6878      	ldr	r0, [r7, #4]
 80385d2:	f7fe fc8f 	bl	8036ef4 <HAL_UARTEx_RxEventCallback>
 80385d6:	e002      	b.n	80385de <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80385d8:	6878      	ldr	r0, [r7, #4]
 80385da:	f7f2 fc9d 	bl	802af18 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80385de:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80385e2:	2b00      	cmp	r3, #0
 80385e4:	d006      	beq.n	80385f4 <UART_RxISR_8BIT_FIFOEN+0x248>
 80385e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80385ea:	f003 0320 	and.w	r3, r3, #32
 80385ee:	2b00      	cmp	r3, #0
 80385f0:	f47f af00 	bne.w	80383f4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80385f4:	687b      	ldr	r3, [r7, #4]
 80385f6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80385fa:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80385fe:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8038602:	2b00      	cmp	r3, #0
 8038604:	d045      	beq.n	8038692 <UART_RxISR_8BIT_FIFOEN+0x2e6>
 8038606:	687b      	ldr	r3, [r7, #4]
 8038608:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 803860c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8038610:	429a      	cmp	r2, r3
 8038612:	d23e      	bcs.n	8038692 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8038614:	687b      	ldr	r3, [r7, #4]
 8038616:	681b      	ldr	r3, [r3, #0]
 8038618:	3308      	adds	r3, #8
 803861a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803861c:	6a3b      	ldr	r3, [r7, #32]
 803861e:	e853 3f00 	ldrex	r3, [r3]
 8038622:	61fb      	str	r3, [r7, #28]
   return(result);
 8038624:	69fb      	ldr	r3, [r7, #28]
 8038626:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 803862a:	673b      	str	r3, [r7, #112]	; 0x70
 803862c:	687b      	ldr	r3, [r7, #4]
 803862e:	681b      	ldr	r3, [r3, #0]
 8038630:	3308      	adds	r3, #8
 8038632:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8038634:	62fa      	str	r2, [r7, #44]	; 0x2c
 8038636:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8038638:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 803863a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 803863c:	e841 2300 	strex	r3, r2, [r1]
 8038640:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8038642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8038644:	2b00      	cmp	r3, #0
 8038646:	d1e5      	bne.n	8038614 <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8038648:	687b      	ldr	r3, [r7, #4]
 803864a:	4a15      	ldr	r2, [pc, #84]	; (80386a0 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 803864c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 803864e:	687b      	ldr	r3, [r7, #4]
 8038650:	681b      	ldr	r3, [r3, #0]
 8038652:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8038654:	68fb      	ldr	r3, [r7, #12]
 8038656:	e853 3f00 	ldrex	r3, [r3]
 803865a:	60bb      	str	r3, [r7, #8]
   return(result);
 803865c:	68bb      	ldr	r3, [r7, #8]
 803865e:	f043 0320 	orr.w	r3, r3, #32
 8038662:	66fb      	str	r3, [r7, #108]	; 0x6c
 8038664:	687b      	ldr	r3, [r7, #4]
 8038666:	681b      	ldr	r3, [r3, #0]
 8038668:	461a      	mov	r2, r3
 803866a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 803866c:	61bb      	str	r3, [r7, #24]
 803866e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8038670:	6979      	ldr	r1, [r7, #20]
 8038672:	69ba      	ldr	r2, [r7, #24]
 8038674:	e841 2300 	strex	r3, r2, [r1]
 8038678:	613b      	str	r3, [r7, #16]
   return(result);
 803867a:	693b      	ldr	r3, [r7, #16]
 803867c:	2b00      	cmp	r3, #0
 803867e:	d1e6      	bne.n	803864e <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8038680:	e007      	b.n	8038692 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8038682:	687b      	ldr	r3, [r7, #4]
 8038684:	681b      	ldr	r3, [r3, #0]
 8038686:	699a      	ldr	r2, [r3, #24]
 8038688:	687b      	ldr	r3, [r7, #4]
 803868a:	681b      	ldr	r3, [r3, #0]
 803868c:	f042 0208 	orr.w	r2, r2, #8
 8038690:	619a      	str	r2, [r3, #24]
}
 8038692:	bf00      	nop
 8038694:	3798      	adds	r7, #152	; 0x98
 8038696:	46bd      	mov	sp, r7
 8038698:	bd80      	pop	{r7, pc}
 803869a:	bf00      	nop
 803869c:	effffffe 	.word	0xeffffffe
 80386a0:	080380eb 	.word	0x080380eb

080386a4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80386a4:	b580      	push	{r7, lr}
 80386a6:	b0a8      	sub	sp, #160	; 0xa0
 80386a8:	af00      	add	r7, sp, #0
 80386aa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80386ac:	687b      	ldr	r3, [r7, #4]
 80386ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80386b2:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80386b6:	687b      	ldr	r3, [r7, #4]
 80386b8:	681b      	ldr	r3, [r3, #0]
 80386ba:	69db      	ldr	r3, [r3, #28]
 80386bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80386c0:	687b      	ldr	r3, [r7, #4]
 80386c2:	681b      	ldr	r3, [r3, #0]
 80386c4:	681b      	ldr	r3, [r3, #0]
 80386c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80386ca:	687b      	ldr	r3, [r7, #4]
 80386cc:	681b      	ldr	r3, [r3, #0]
 80386ce:	689b      	ldr	r3, [r3, #8]
 80386d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80386d4:	687b      	ldr	r3, [r7, #4]
 80386d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80386da:	2b22      	cmp	r3, #34	; 0x22
 80386dc:	f040 8151 	bne.w	8038982 <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80386e0:	687b      	ldr	r3, [r7, #4]
 80386e2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80386e6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80386ea:	e0f8      	b.n	80388de <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80386ec:	687b      	ldr	r3, [r7, #4]
 80386ee:	681b      	ldr	r3, [r3, #0]
 80386f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80386f2:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80386f6:	687b      	ldr	r3, [r7, #4]
 80386f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80386fa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 80386fe:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8038702:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8038706:	4013      	ands	r3, r2
 8038708:	b29a      	uxth	r2, r3
 803870a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 803870e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8038710:	687b      	ldr	r3, [r7, #4]
 8038712:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8038714:	1c9a      	adds	r2, r3, #2
 8038716:	687b      	ldr	r3, [r7, #4]
 8038718:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 803871a:	687b      	ldr	r3, [r7, #4]
 803871c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8038720:	b29b      	uxth	r3, r3
 8038722:	3b01      	subs	r3, #1
 8038724:	b29a      	uxth	r2, r3
 8038726:	687b      	ldr	r3, [r7, #4]
 8038728:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 803872c:	687b      	ldr	r3, [r7, #4]
 803872e:	681b      	ldr	r3, [r3, #0]
 8038730:	69db      	ldr	r3, [r3, #28]
 8038732:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8038736:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 803873a:	f003 0307 	and.w	r3, r3, #7
 803873e:	2b00      	cmp	r3, #0
 8038740:	d053      	beq.n	80387ea <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8038742:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8038746:	f003 0301 	and.w	r3, r3, #1
 803874a:	2b00      	cmp	r3, #0
 803874c:	d011      	beq.n	8038772 <UART_RxISR_16BIT_FIFOEN+0xce>
 803874e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8038752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8038756:	2b00      	cmp	r3, #0
 8038758:	d00b      	beq.n	8038772 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 803875a:	687b      	ldr	r3, [r7, #4]
 803875c:	681b      	ldr	r3, [r3, #0]
 803875e:	2201      	movs	r2, #1
 8038760:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8038762:	687b      	ldr	r3, [r7, #4]
 8038764:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8038768:	f043 0201 	orr.w	r2, r3, #1
 803876c:	687b      	ldr	r3, [r7, #4]
 803876e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8038772:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8038776:	f003 0302 	and.w	r3, r3, #2
 803877a:	2b00      	cmp	r3, #0
 803877c:	d011      	beq.n	80387a2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 803877e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8038782:	f003 0301 	and.w	r3, r3, #1
 8038786:	2b00      	cmp	r3, #0
 8038788:	d00b      	beq.n	80387a2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 803878a:	687b      	ldr	r3, [r7, #4]
 803878c:	681b      	ldr	r3, [r3, #0]
 803878e:	2202      	movs	r2, #2
 8038790:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8038792:	687b      	ldr	r3, [r7, #4]
 8038794:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8038798:	f043 0204 	orr.w	r2, r3, #4
 803879c:	687b      	ldr	r3, [r7, #4]
 803879e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80387a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80387a6:	f003 0304 	and.w	r3, r3, #4
 80387aa:	2b00      	cmp	r3, #0
 80387ac:	d011      	beq.n	80387d2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80387ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80387b2:	f003 0301 	and.w	r3, r3, #1
 80387b6:	2b00      	cmp	r3, #0
 80387b8:	d00b      	beq.n	80387d2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80387ba:	687b      	ldr	r3, [r7, #4]
 80387bc:	681b      	ldr	r3, [r3, #0]
 80387be:	2204      	movs	r2, #4
 80387c0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80387c2:	687b      	ldr	r3, [r7, #4]
 80387c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80387c8:	f043 0202 	orr.w	r2, r3, #2
 80387cc:	687b      	ldr	r3, [r7, #4]
 80387ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80387d2:	687b      	ldr	r3, [r7, #4]
 80387d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80387d8:	2b00      	cmp	r3, #0
 80387da:	d006      	beq.n	80387ea <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80387dc:	6878      	ldr	r0, [r7, #4]
 80387de:	f7fe fb7f 	bl	8036ee0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80387e2:	687b      	ldr	r3, [r7, #4]
 80387e4:	2200      	movs	r2, #0
 80387e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80387ea:	687b      	ldr	r3, [r7, #4]
 80387ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80387f0:	b29b      	uxth	r3, r3
 80387f2:	2b00      	cmp	r3, #0
 80387f4:	d173      	bne.n	80388de <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80387f6:	687b      	ldr	r3, [r7, #4]
 80387f8:	681b      	ldr	r3, [r3, #0]
 80387fa:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80387fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80387fe:	e853 3f00 	ldrex	r3, [r3]
 8038802:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8038804:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8038806:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 803880a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 803880e:	687b      	ldr	r3, [r7, #4]
 8038810:	681b      	ldr	r3, [r3, #0]
 8038812:	461a      	mov	r2, r3
 8038814:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8038818:	66fb      	str	r3, [r7, #108]	; 0x6c
 803881a:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803881c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 803881e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8038820:	e841 2300 	strex	r3, r2, [r1]
 8038824:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8038826:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8038828:	2b00      	cmp	r3, #0
 803882a:	d1e4      	bne.n	80387f6 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 803882c:	687b      	ldr	r3, [r7, #4]
 803882e:	681b      	ldr	r3, [r3, #0]
 8038830:	3308      	adds	r3, #8
 8038832:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8038834:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8038836:	e853 3f00 	ldrex	r3, [r3]
 803883a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 803883c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 803883e:	4b57      	ldr	r3, [pc, #348]	; (803899c <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 8038840:	4013      	ands	r3, r2
 8038842:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8038846:	687b      	ldr	r3, [r7, #4]
 8038848:	681b      	ldr	r3, [r3, #0]
 803884a:	3308      	adds	r3, #8
 803884c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8038850:	65ba      	str	r2, [r7, #88]	; 0x58
 8038852:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8038854:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8038856:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8038858:	e841 2300 	strex	r3, r2, [r1]
 803885c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 803885e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8038860:	2b00      	cmp	r3, #0
 8038862:	d1e3      	bne.n	803882c <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8038864:	687b      	ldr	r3, [r7, #4]
 8038866:	2220      	movs	r2, #32
 8038868:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 803886c:	687b      	ldr	r3, [r7, #4]
 803886e:	2200      	movs	r2, #0
 8038870:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8038872:	687b      	ldr	r3, [r7, #4]
 8038874:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8038876:	2b01      	cmp	r3, #1
 8038878:	d12e      	bne.n	80388d8 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 803887a:	687b      	ldr	r3, [r7, #4]
 803887c:	2200      	movs	r2, #0
 803887e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8038880:	687b      	ldr	r3, [r7, #4]
 8038882:	681b      	ldr	r3, [r3, #0]
 8038884:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8038886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8038888:	e853 3f00 	ldrex	r3, [r3]
 803888c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 803888e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8038890:	f023 0310 	bic.w	r3, r3, #16
 8038894:	67fb      	str	r3, [r7, #124]	; 0x7c
 8038896:	687b      	ldr	r3, [r7, #4]
 8038898:	681b      	ldr	r3, [r3, #0]
 803889a:	461a      	mov	r2, r3
 803889c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 803889e:	647b      	str	r3, [r7, #68]	; 0x44
 80388a0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80388a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80388a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80388a6:	e841 2300 	strex	r3, r2, [r1]
 80388aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80388ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80388ae:	2b00      	cmp	r3, #0
 80388b0:	d1e6      	bne.n	8038880 <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80388b2:	687b      	ldr	r3, [r7, #4]
 80388b4:	681b      	ldr	r3, [r3, #0]
 80388b6:	69db      	ldr	r3, [r3, #28]
 80388b8:	f003 0310 	and.w	r3, r3, #16
 80388bc:	2b10      	cmp	r3, #16
 80388be:	d103      	bne.n	80388c8 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80388c0:	687b      	ldr	r3, [r7, #4]
 80388c2:	681b      	ldr	r3, [r3, #0]
 80388c4:	2210      	movs	r2, #16
 80388c6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80388c8:	687b      	ldr	r3, [r7, #4]
 80388ca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80388ce:	4619      	mov	r1, r3
 80388d0:	6878      	ldr	r0, [r7, #4]
 80388d2:	f7fe fb0f 	bl	8036ef4 <HAL_UARTEx_RxEventCallback>
 80388d6:	e002      	b.n	80388de <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80388d8:	6878      	ldr	r0, [r7, #4]
 80388da:	f7f2 fb1d 	bl	802af18 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80388de:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80388e2:	2b00      	cmp	r3, #0
 80388e4:	d006      	beq.n	80388f4 <UART_RxISR_16BIT_FIFOEN+0x250>
 80388e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80388ea:	f003 0320 	and.w	r3, r3, #32
 80388ee:	2b00      	cmp	r3, #0
 80388f0:	f47f aefc 	bne.w	80386ec <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80388f4:	687b      	ldr	r3, [r7, #4]
 80388f6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80388fa:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80388fe:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8038902:	2b00      	cmp	r3, #0
 8038904:	d045      	beq.n	8038992 <UART_RxISR_16BIT_FIFOEN+0x2ee>
 8038906:	687b      	ldr	r3, [r7, #4]
 8038908:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 803890c:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8038910:	429a      	cmp	r2, r3
 8038912:	d23e      	bcs.n	8038992 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8038914:	687b      	ldr	r3, [r7, #4]
 8038916:	681b      	ldr	r3, [r3, #0]
 8038918:	3308      	adds	r3, #8
 803891a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803891c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803891e:	e853 3f00 	ldrex	r3, [r3]
 8038922:	623b      	str	r3, [r7, #32]
   return(result);
 8038924:	6a3b      	ldr	r3, [r7, #32]
 8038926:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 803892a:	677b      	str	r3, [r7, #116]	; 0x74
 803892c:	687b      	ldr	r3, [r7, #4]
 803892e:	681b      	ldr	r3, [r3, #0]
 8038930:	3308      	adds	r3, #8
 8038932:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8038934:	633a      	str	r2, [r7, #48]	; 0x30
 8038936:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8038938:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 803893a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 803893c:	e841 2300 	strex	r3, r2, [r1]
 8038940:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8038942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8038944:	2b00      	cmp	r3, #0
 8038946:	d1e5      	bne.n	8038914 <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8038948:	687b      	ldr	r3, [r7, #4]
 803894a:	4a15      	ldr	r2, [pc, #84]	; (80389a0 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 803894c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 803894e:	687b      	ldr	r3, [r7, #4]
 8038950:	681b      	ldr	r3, [r3, #0]
 8038952:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8038954:	693b      	ldr	r3, [r7, #16]
 8038956:	e853 3f00 	ldrex	r3, [r3]
 803895a:	60fb      	str	r3, [r7, #12]
   return(result);
 803895c:	68fb      	ldr	r3, [r7, #12]
 803895e:	f043 0320 	orr.w	r3, r3, #32
 8038962:	673b      	str	r3, [r7, #112]	; 0x70
 8038964:	687b      	ldr	r3, [r7, #4]
 8038966:	681b      	ldr	r3, [r3, #0]
 8038968:	461a      	mov	r2, r3
 803896a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 803896c:	61fb      	str	r3, [r7, #28]
 803896e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8038970:	69b9      	ldr	r1, [r7, #24]
 8038972:	69fa      	ldr	r2, [r7, #28]
 8038974:	e841 2300 	strex	r3, r2, [r1]
 8038978:	617b      	str	r3, [r7, #20]
   return(result);
 803897a:	697b      	ldr	r3, [r7, #20]
 803897c:	2b00      	cmp	r3, #0
 803897e:	d1e6      	bne.n	803894e <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8038980:	e007      	b.n	8038992 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8038982:	687b      	ldr	r3, [r7, #4]
 8038984:	681b      	ldr	r3, [r3, #0]
 8038986:	699a      	ldr	r2, [r3, #24]
 8038988:	687b      	ldr	r3, [r7, #4]
 803898a:	681b      	ldr	r3, [r3, #0]
 803898c:	f042 0208 	orr.w	r2, r2, #8
 8038990:	619a      	str	r2, [r3, #24]
}
 8038992:	bf00      	nop
 8038994:	37a0      	adds	r7, #160	; 0xa0
 8038996:	46bd      	mov	sp, r7
 8038998:	bd80      	pop	{r7, pc}
 803899a:	bf00      	nop
 803899c:	effffffe 	.word	0xeffffffe
 80389a0:	0803824b 	.word	0x0803824b

080389a4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80389a4:	b480      	push	{r7}
 80389a6:	b083      	sub	sp, #12
 80389a8:	af00      	add	r7, sp, #0
 80389aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80389ac:	bf00      	nop
 80389ae:	370c      	adds	r7, #12
 80389b0:	46bd      	mov	sp, r7
 80389b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80389b6:	4770      	bx	lr

080389b8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80389b8:	b480      	push	{r7}
 80389ba:	b083      	sub	sp, #12
 80389bc:	af00      	add	r7, sp, #0
 80389be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80389c0:	bf00      	nop
 80389c2:	370c      	adds	r7, #12
 80389c4:	46bd      	mov	sp, r7
 80389c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80389ca:	4770      	bx	lr

080389cc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80389cc:	b480      	push	{r7}
 80389ce:	b083      	sub	sp, #12
 80389d0:	af00      	add	r7, sp, #0
 80389d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80389d4:	bf00      	nop
 80389d6:	370c      	adds	r7, #12
 80389d8:	46bd      	mov	sp, r7
 80389da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80389de:	4770      	bx	lr

080389e0 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 80389e0:	b580      	push	{r7, lr}
 80389e2:	b084      	sub	sp, #16
 80389e4:	af00      	add	r7, sp, #0
 80389e6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80389e8:	687b      	ldr	r3, [r7, #4]
 80389ea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80389ee:	2b01      	cmp	r3, #1
 80389f0:	d101      	bne.n	80389f6 <HAL_UARTEx_EnableFifoMode+0x16>
 80389f2:	2302      	movs	r3, #2
 80389f4:	e02b      	b.n	8038a4e <HAL_UARTEx_EnableFifoMode+0x6e>
 80389f6:	687b      	ldr	r3, [r7, #4]
 80389f8:	2201      	movs	r2, #1
 80389fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80389fe:	687b      	ldr	r3, [r7, #4]
 8038a00:	2224      	movs	r2, #36	; 0x24
 8038a02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8038a06:	687b      	ldr	r3, [r7, #4]
 8038a08:	681b      	ldr	r3, [r3, #0]
 8038a0a:	681b      	ldr	r3, [r3, #0]
 8038a0c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8038a0e:	687b      	ldr	r3, [r7, #4]
 8038a10:	681b      	ldr	r3, [r3, #0]
 8038a12:	681a      	ldr	r2, [r3, #0]
 8038a14:	687b      	ldr	r3, [r7, #4]
 8038a16:	681b      	ldr	r3, [r3, #0]
 8038a18:	f022 0201 	bic.w	r2, r2, #1
 8038a1c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8038a1e:	68fb      	ldr	r3, [r7, #12]
 8038a20:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8038a24:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8038a26:	687b      	ldr	r3, [r7, #4]
 8038a28:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8038a2c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8038a2e:	687b      	ldr	r3, [r7, #4]
 8038a30:	681b      	ldr	r3, [r3, #0]
 8038a32:	68fa      	ldr	r2, [r7, #12]
 8038a34:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8038a36:	6878      	ldr	r0, [r7, #4]
 8038a38:	f000 f8c2 	bl	8038bc0 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8038a3c:	687b      	ldr	r3, [r7, #4]
 8038a3e:	2220      	movs	r2, #32
 8038a40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8038a44:	687b      	ldr	r3, [r7, #4]
 8038a46:	2200      	movs	r2, #0
 8038a48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8038a4c:	2300      	movs	r3, #0
}
 8038a4e:	4618      	mov	r0, r3
 8038a50:	3710      	adds	r7, #16
 8038a52:	46bd      	mov	sp, r7
 8038a54:	bd80      	pop	{r7, pc}

08038a56 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8038a56:	b480      	push	{r7}
 8038a58:	b085      	sub	sp, #20
 8038a5a:	af00      	add	r7, sp, #0
 8038a5c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8038a5e:	687b      	ldr	r3, [r7, #4]
 8038a60:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8038a64:	2b01      	cmp	r3, #1
 8038a66:	d101      	bne.n	8038a6c <HAL_UARTEx_DisableFifoMode+0x16>
 8038a68:	2302      	movs	r3, #2
 8038a6a:	e027      	b.n	8038abc <HAL_UARTEx_DisableFifoMode+0x66>
 8038a6c:	687b      	ldr	r3, [r7, #4]
 8038a6e:	2201      	movs	r2, #1
 8038a70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8038a74:	687b      	ldr	r3, [r7, #4]
 8038a76:	2224      	movs	r2, #36	; 0x24
 8038a78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8038a7c:	687b      	ldr	r3, [r7, #4]
 8038a7e:	681b      	ldr	r3, [r3, #0]
 8038a80:	681b      	ldr	r3, [r3, #0]
 8038a82:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8038a84:	687b      	ldr	r3, [r7, #4]
 8038a86:	681b      	ldr	r3, [r3, #0]
 8038a88:	681a      	ldr	r2, [r3, #0]
 8038a8a:	687b      	ldr	r3, [r7, #4]
 8038a8c:	681b      	ldr	r3, [r3, #0]
 8038a8e:	f022 0201 	bic.w	r2, r2, #1
 8038a92:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8038a94:	68fb      	ldr	r3, [r7, #12]
 8038a96:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8038a9a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8038a9c:	687b      	ldr	r3, [r7, #4]
 8038a9e:	2200      	movs	r2, #0
 8038aa0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8038aa2:	687b      	ldr	r3, [r7, #4]
 8038aa4:	681b      	ldr	r3, [r3, #0]
 8038aa6:	68fa      	ldr	r2, [r7, #12]
 8038aa8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8038aaa:	687b      	ldr	r3, [r7, #4]
 8038aac:	2220      	movs	r2, #32
 8038aae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8038ab2:	687b      	ldr	r3, [r7, #4]
 8038ab4:	2200      	movs	r2, #0
 8038ab6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8038aba:	2300      	movs	r3, #0
}
 8038abc:	4618      	mov	r0, r3
 8038abe:	3714      	adds	r7, #20
 8038ac0:	46bd      	mov	sp, r7
 8038ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8038ac6:	4770      	bx	lr

08038ac8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8038ac8:	b580      	push	{r7, lr}
 8038aca:	b084      	sub	sp, #16
 8038acc:	af00      	add	r7, sp, #0
 8038ace:	6078      	str	r0, [r7, #4]
 8038ad0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8038ad2:	687b      	ldr	r3, [r7, #4]
 8038ad4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8038ad8:	2b01      	cmp	r3, #1
 8038ada:	d101      	bne.n	8038ae0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8038adc:	2302      	movs	r3, #2
 8038ade:	e02d      	b.n	8038b3c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8038ae0:	687b      	ldr	r3, [r7, #4]
 8038ae2:	2201      	movs	r2, #1
 8038ae4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8038ae8:	687b      	ldr	r3, [r7, #4]
 8038aea:	2224      	movs	r2, #36	; 0x24
 8038aec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8038af0:	687b      	ldr	r3, [r7, #4]
 8038af2:	681b      	ldr	r3, [r3, #0]
 8038af4:	681b      	ldr	r3, [r3, #0]
 8038af6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8038af8:	687b      	ldr	r3, [r7, #4]
 8038afa:	681b      	ldr	r3, [r3, #0]
 8038afc:	681a      	ldr	r2, [r3, #0]
 8038afe:	687b      	ldr	r3, [r7, #4]
 8038b00:	681b      	ldr	r3, [r3, #0]
 8038b02:	f022 0201 	bic.w	r2, r2, #1
 8038b06:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8038b08:	687b      	ldr	r3, [r7, #4]
 8038b0a:	681b      	ldr	r3, [r3, #0]
 8038b0c:	689b      	ldr	r3, [r3, #8]
 8038b0e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8038b12:	687b      	ldr	r3, [r7, #4]
 8038b14:	681b      	ldr	r3, [r3, #0]
 8038b16:	683a      	ldr	r2, [r7, #0]
 8038b18:	430a      	orrs	r2, r1
 8038b1a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8038b1c:	6878      	ldr	r0, [r7, #4]
 8038b1e:	f000 f84f 	bl	8038bc0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8038b22:	687b      	ldr	r3, [r7, #4]
 8038b24:	681b      	ldr	r3, [r3, #0]
 8038b26:	68fa      	ldr	r2, [r7, #12]
 8038b28:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8038b2a:	687b      	ldr	r3, [r7, #4]
 8038b2c:	2220      	movs	r2, #32
 8038b2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8038b32:	687b      	ldr	r3, [r7, #4]
 8038b34:	2200      	movs	r2, #0
 8038b36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8038b3a:	2300      	movs	r3, #0
}
 8038b3c:	4618      	mov	r0, r3
 8038b3e:	3710      	adds	r7, #16
 8038b40:	46bd      	mov	sp, r7
 8038b42:	bd80      	pop	{r7, pc}

08038b44 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8038b44:	b580      	push	{r7, lr}
 8038b46:	b084      	sub	sp, #16
 8038b48:	af00      	add	r7, sp, #0
 8038b4a:	6078      	str	r0, [r7, #4]
 8038b4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8038b4e:	687b      	ldr	r3, [r7, #4]
 8038b50:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8038b54:	2b01      	cmp	r3, #1
 8038b56:	d101      	bne.n	8038b5c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8038b58:	2302      	movs	r3, #2
 8038b5a:	e02d      	b.n	8038bb8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8038b5c:	687b      	ldr	r3, [r7, #4]
 8038b5e:	2201      	movs	r2, #1
 8038b60:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8038b64:	687b      	ldr	r3, [r7, #4]
 8038b66:	2224      	movs	r2, #36	; 0x24
 8038b68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8038b6c:	687b      	ldr	r3, [r7, #4]
 8038b6e:	681b      	ldr	r3, [r3, #0]
 8038b70:	681b      	ldr	r3, [r3, #0]
 8038b72:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8038b74:	687b      	ldr	r3, [r7, #4]
 8038b76:	681b      	ldr	r3, [r3, #0]
 8038b78:	681a      	ldr	r2, [r3, #0]
 8038b7a:	687b      	ldr	r3, [r7, #4]
 8038b7c:	681b      	ldr	r3, [r3, #0]
 8038b7e:	f022 0201 	bic.w	r2, r2, #1
 8038b82:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8038b84:	687b      	ldr	r3, [r7, #4]
 8038b86:	681b      	ldr	r3, [r3, #0]
 8038b88:	689b      	ldr	r3, [r3, #8]
 8038b8a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8038b8e:	687b      	ldr	r3, [r7, #4]
 8038b90:	681b      	ldr	r3, [r3, #0]
 8038b92:	683a      	ldr	r2, [r7, #0]
 8038b94:	430a      	orrs	r2, r1
 8038b96:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8038b98:	6878      	ldr	r0, [r7, #4]
 8038b9a:	f000 f811 	bl	8038bc0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8038b9e:	687b      	ldr	r3, [r7, #4]
 8038ba0:	681b      	ldr	r3, [r3, #0]
 8038ba2:	68fa      	ldr	r2, [r7, #12]
 8038ba4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8038ba6:	687b      	ldr	r3, [r7, #4]
 8038ba8:	2220      	movs	r2, #32
 8038baa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8038bae:	687b      	ldr	r3, [r7, #4]
 8038bb0:	2200      	movs	r2, #0
 8038bb2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8038bb6:	2300      	movs	r3, #0
}
 8038bb8:	4618      	mov	r0, r3
 8038bba:	3710      	adds	r7, #16
 8038bbc:	46bd      	mov	sp, r7
 8038bbe:	bd80      	pop	{r7, pc}

08038bc0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8038bc0:	b480      	push	{r7}
 8038bc2:	b085      	sub	sp, #20
 8038bc4:	af00      	add	r7, sp, #0
 8038bc6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8038bc8:	687b      	ldr	r3, [r7, #4]
 8038bca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8038bcc:	2b00      	cmp	r3, #0
 8038bce:	d108      	bne.n	8038be2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8038bd0:	687b      	ldr	r3, [r7, #4]
 8038bd2:	2201      	movs	r2, #1
 8038bd4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8038bd8:	687b      	ldr	r3, [r7, #4]
 8038bda:	2201      	movs	r2, #1
 8038bdc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8038be0:	e031      	b.n	8038c46 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8038be2:	2310      	movs	r3, #16
 8038be4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8038be6:	2310      	movs	r3, #16
 8038be8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8038bea:	687b      	ldr	r3, [r7, #4]
 8038bec:	681b      	ldr	r3, [r3, #0]
 8038bee:	689b      	ldr	r3, [r3, #8]
 8038bf0:	0e5b      	lsrs	r3, r3, #25
 8038bf2:	b2db      	uxtb	r3, r3
 8038bf4:	f003 0307 	and.w	r3, r3, #7
 8038bf8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8038bfa:	687b      	ldr	r3, [r7, #4]
 8038bfc:	681b      	ldr	r3, [r3, #0]
 8038bfe:	689b      	ldr	r3, [r3, #8]
 8038c00:	0f5b      	lsrs	r3, r3, #29
 8038c02:	b2db      	uxtb	r3, r3
 8038c04:	f003 0307 	and.w	r3, r3, #7
 8038c08:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8038c0a:	7bbb      	ldrb	r3, [r7, #14]
 8038c0c:	7b3a      	ldrb	r2, [r7, #12]
 8038c0e:	4911      	ldr	r1, [pc, #68]	; (8038c54 <UARTEx_SetNbDataToProcess+0x94>)
 8038c10:	5c8a      	ldrb	r2, [r1, r2]
 8038c12:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8038c16:	7b3a      	ldrb	r2, [r7, #12]
 8038c18:	490f      	ldr	r1, [pc, #60]	; (8038c58 <UARTEx_SetNbDataToProcess+0x98>)
 8038c1a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8038c1c:	fb93 f3f2 	sdiv	r3, r3, r2
 8038c20:	b29a      	uxth	r2, r3
 8038c22:	687b      	ldr	r3, [r7, #4]
 8038c24:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8038c28:	7bfb      	ldrb	r3, [r7, #15]
 8038c2a:	7b7a      	ldrb	r2, [r7, #13]
 8038c2c:	4909      	ldr	r1, [pc, #36]	; (8038c54 <UARTEx_SetNbDataToProcess+0x94>)
 8038c2e:	5c8a      	ldrb	r2, [r1, r2]
 8038c30:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8038c34:	7b7a      	ldrb	r2, [r7, #13]
 8038c36:	4908      	ldr	r1, [pc, #32]	; (8038c58 <UARTEx_SetNbDataToProcess+0x98>)
 8038c38:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8038c3a:	fb93 f3f2 	sdiv	r3, r3, r2
 8038c3e:	b29a      	uxth	r2, r3
 8038c40:	687b      	ldr	r3, [r7, #4]
 8038c42:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8038c46:	bf00      	nop
 8038c48:	3714      	adds	r7, #20
 8038c4a:	46bd      	mov	sp, r7
 8038c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8038c50:	4770      	bx	lr
 8038c52:	bf00      	nop
 8038c54:	08058e28 	.word	0x08058e28
 8038c58:	08058e30 	.word	0x08058e30

08038c5c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8038c5c:	b084      	sub	sp, #16
 8038c5e:	b580      	push	{r7, lr}
 8038c60:	b084      	sub	sp, #16
 8038c62:	af00      	add	r7, sp, #0
 8038c64:	6078      	str	r0, [r7, #4]
 8038c66:	f107 001c 	add.w	r0, r7, #28
 8038c6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8038c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8038c70:	2b01      	cmp	r3, #1
 8038c72:	d120      	bne.n	8038cb6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8038c74:	687b      	ldr	r3, [r7, #4]
 8038c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8038c78:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8038c7c:	687b      	ldr	r3, [r7, #4]
 8038c7e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8038c80:	687b      	ldr	r3, [r7, #4]
 8038c82:	68da      	ldr	r2, [r3, #12]
 8038c84:	4b2a      	ldr	r3, [pc, #168]	; (8038d30 <USB_CoreInit+0xd4>)
 8038c86:	4013      	ands	r3, r2
 8038c88:	687a      	ldr	r2, [r7, #4]
 8038c8a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8038c8c:	687b      	ldr	r3, [r7, #4]
 8038c8e:	68db      	ldr	r3, [r3, #12]
 8038c90:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8038c94:	687b      	ldr	r3, [r7, #4]
 8038c96:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8038c98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8038c9a:	2b01      	cmp	r3, #1
 8038c9c:	d105      	bne.n	8038caa <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8038c9e:	687b      	ldr	r3, [r7, #4]
 8038ca0:	68db      	ldr	r3, [r3, #12]
 8038ca2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8038ca6:	687b      	ldr	r3, [r7, #4]
 8038ca8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8038caa:	6878      	ldr	r0, [r7, #4]
 8038cac:	f001 fc04 	bl	803a4b8 <USB_CoreReset>
 8038cb0:	4603      	mov	r3, r0
 8038cb2:	73fb      	strb	r3, [r7, #15]
 8038cb4:	e01a      	b.n	8038cec <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8038cb6:	687b      	ldr	r3, [r7, #4]
 8038cb8:	68db      	ldr	r3, [r3, #12]
 8038cba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8038cbe:	687b      	ldr	r3, [r7, #4]
 8038cc0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8038cc2:	6878      	ldr	r0, [r7, #4]
 8038cc4:	f001 fbf8 	bl	803a4b8 <USB_CoreReset>
 8038cc8:	4603      	mov	r3, r0
 8038cca:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8038ccc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8038cce:	2b00      	cmp	r3, #0
 8038cd0:	d106      	bne.n	8038ce0 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8038cd2:	687b      	ldr	r3, [r7, #4]
 8038cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8038cd6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8038cda:	687b      	ldr	r3, [r7, #4]
 8038cdc:	639a      	str	r2, [r3, #56]	; 0x38
 8038cde:	e005      	b.n	8038cec <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8038ce0:	687b      	ldr	r3, [r7, #4]
 8038ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8038ce4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8038ce8:	687b      	ldr	r3, [r7, #4]
 8038cea:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8038cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8038cee:	2b01      	cmp	r3, #1
 8038cf0:	d116      	bne.n	8038d20 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8038cf2:	687b      	ldr	r3, [r7, #4]
 8038cf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8038cf6:	b29a      	uxth	r2, r3
 8038cf8:	687b      	ldr	r3, [r7, #4]
 8038cfa:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8038cfc:	687b      	ldr	r3, [r7, #4]
 8038cfe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8038d00:	4b0c      	ldr	r3, [pc, #48]	; (8038d34 <USB_CoreInit+0xd8>)
 8038d02:	4313      	orrs	r3, r2
 8038d04:	687a      	ldr	r2, [r7, #4]
 8038d06:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8038d08:	687b      	ldr	r3, [r7, #4]
 8038d0a:	689b      	ldr	r3, [r3, #8]
 8038d0c:	f043 0206 	orr.w	r2, r3, #6
 8038d10:	687b      	ldr	r3, [r7, #4]
 8038d12:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8038d14:	687b      	ldr	r3, [r7, #4]
 8038d16:	689b      	ldr	r3, [r3, #8]
 8038d18:	f043 0220 	orr.w	r2, r3, #32
 8038d1c:	687b      	ldr	r3, [r7, #4]
 8038d1e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8038d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8038d22:	4618      	mov	r0, r3
 8038d24:	3710      	adds	r7, #16
 8038d26:	46bd      	mov	sp, r7
 8038d28:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8038d2c:	b004      	add	sp, #16
 8038d2e:	4770      	bx	lr
 8038d30:	ffbdffbf 	.word	0xffbdffbf
 8038d34:	03ee0000 	.word	0x03ee0000

08038d38 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8038d38:	b480      	push	{r7}
 8038d3a:	b087      	sub	sp, #28
 8038d3c:	af00      	add	r7, sp, #0
 8038d3e:	60f8      	str	r0, [r7, #12]
 8038d40:	60b9      	str	r1, [r7, #8]
 8038d42:	4613      	mov	r3, r2
 8038d44:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8038d46:	79fb      	ldrb	r3, [r7, #7]
 8038d48:	2b02      	cmp	r3, #2
 8038d4a:	d165      	bne.n	8038e18 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8038d4c:	68bb      	ldr	r3, [r7, #8]
 8038d4e:	4a41      	ldr	r2, [pc, #260]	; (8038e54 <USB_SetTurnaroundTime+0x11c>)
 8038d50:	4293      	cmp	r3, r2
 8038d52:	d906      	bls.n	8038d62 <USB_SetTurnaroundTime+0x2a>
 8038d54:	68bb      	ldr	r3, [r7, #8]
 8038d56:	4a40      	ldr	r2, [pc, #256]	; (8038e58 <USB_SetTurnaroundTime+0x120>)
 8038d58:	4293      	cmp	r3, r2
 8038d5a:	d202      	bcs.n	8038d62 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8038d5c:	230f      	movs	r3, #15
 8038d5e:	617b      	str	r3, [r7, #20]
 8038d60:	e062      	b.n	8038e28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8038d62:	68bb      	ldr	r3, [r7, #8]
 8038d64:	4a3c      	ldr	r2, [pc, #240]	; (8038e58 <USB_SetTurnaroundTime+0x120>)
 8038d66:	4293      	cmp	r3, r2
 8038d68:	d306      	bcc.n	8038d78 <USB_SetTurnaroundTime+0x40>
 8038d6a:	68bb      	ldr	r3, [r7, #8]
 8038d6c:	4a3b      	ldr	r2, [pc, #236]	; (8038e5c <USB_SetTurnaroundTime+0x124>)
 8038d6e:	4293      	cmp	r3, r2
 8038d70:	d202      	bcs.n	8038d78 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8038d72:	230e      	movs	r3, #14
 8038d74:	617b      	str	r3, [r7, #20]
 8038d76:	e057      	b.n	8038e28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8038d78:	68bb      	ldr	r3, [r7, #8]
 8038d7a:	4a38      	ldr	r2, [pc, #224]	; (8038e5c <USB_SetTurnaroundTime+0x124>)
 8038d7c:	4293      	cmp	r3, r2
 8038d7e:	d306      	bcc.n	8038d8e <USB_SetTurnaroundTime+0x56>
 8038d80:	68bb      	ldr	r3, [r7, #8]
 8038d82:	4a37      	ldr	r2, [pc, #220]	; (8038e60 <USB_SetTurnaroundTime+0x128>)
 8038d84:	4293      	cmp	r3, r2
 8038d86:	d202      	bcs.n	8038d8e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8038d88:	230d      	movs	r3, #13
 8038d8a:	617b      	str	r3, [r7, #20]
 8038d8c:	e04c      	b.n	8038e28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8038d8e:	68bb      	ldr	r3, [r7, #8]
 8038d90:	4a33      	ldr	r2, [pc, #204]	; (8038e60 <USB_SetTurnaroundTime+0x128>)
 8038d92:	4293      	cmp	r3, r2
 8038d94:	d306      	bcc.n	8038da4 <USB_SetTurnaroundTime+0x6c>
 8038d96:	68bb      	ldr	r3, [r7, #8]
 8038d98:	4a32      	ldr	r2, [pc, #200]	; (8038e64 <USB_SetTurnaroundTime+0x12c>)
 8038d9a:	4293      	cmp	r3, r2
 8038d9c:	d802      	bhi.n	8038da4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8038d9e:	230c      	movs	r3, #12
 8038da0:	617b      	str	r3, [r7, #20]
 8038da2:	e041      	b.n	8038e28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8038da4:	68bb      	ldr	r3, [r7, #8]
 8038da6:	4a2f      	ldr	r2, [pc, #188]	; (8038e64 <USB_SetTurnaroundTime+0x12c>)
 8038da8:	4293      	cmp	r3, r2
 8038daa:	d906      	bls.n	8038dba <USB_SetTurnaroundTime+0x82>
 8038dac:	68bb      	ldr	r3, [r7, #8]
 8038dae:	4a2e      	ldr	r2, [pc, #184]	; (8038e68 <USB_SetTurnaroundTime+0x130>)
 8038db0:	4293      	cmp	r3, r2
 8038db2:	d802      	bhi.n	8038dba <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8038db4:	230b      	movs	r3, #11
 8038db6:	617b      	str	r3, [r7, #20]
 8038db8:	e036      	b.n	8038e28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8038dba:	68bb      	ldr	r3, [r7, #8]
 8038dbc:	4a2a      	ldr	r2, [pc, #168]	; (8038e68 <USB_SetTurnaroundTime+0x130>)
 8038dbe:	4293      	cmp	r3, r2
 8038dc0:	d906      	bls.n	8038dd0 <USB_SetTurnaroundTime+0x98>
 8038dc2:	68bb      	ldr	r3, [r7, #8]
 8038dc4:	4a29      	ldr	r2, [pc, #164]	; (8038e6c <USB_SetTurnaroundTime+0x134>)
 8038dc6:	4293      	cmp	r3, r2
 8038dc8:	d802      	bhi.n	8038dd0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8038dca:	230a      	movs	r3, #10
 8038dcc:	617b      	str	r3, [r7, #20]
 8038dce:	e02b      	b.n	8038e28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8038dd0:	68bb      	ldr	r3, [r7, #8]
 8038dd2:	4a26      	ldr	r2, [pc, #152]	; (8038e6c <USB_SetTurnaroundTime+0x134>)
 8038dd4:	4293      	cmp	r3, r2
 8038dd6:	d906      	bls.n	8038de6 <USB_SetTurnaroundTime+0xae>
 8038dd8:	68bb      	ldr	r3, [r7, #8]
 8038dda:	4a25      	ldr	r2, [pc, #148]	; (8038e70 <USB_SetTurnaroundTime+0x138>)
 8038ddc:	4293      	cmp	r3, r2
 8038dde:	d202      	bcs.n	8038de6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8038de0:	2309      	movs	r3, #9
 8038de2:	617b      	str	r3, [r7, #20]
 8038de4:	e020      	b.n	8038e28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8038de6:	68bb      	ldr	r3, [r7, #8]
 8038de8:	4a21      	ldr	r2, [pc, #132]	; (8038e70 <USB_SetTurnaroundTime+0x138>)
 8038dea:	4293      	cmp	r3, r2
 8038dec:	d306      	bcc.n	8038dfc <USB_SetTurnaroundTime+0xc4>
 8038dee:	68bb      	ldr	r3, [r7, #8]
 8038df0:	4a20      	ldr	r2, [pc, #128]	; (8038e74 <USB_SetTurnaroundTime+0x13c>)
 8038df2:	4293      	cmp	r3, r2
 8038df4:	d802      	bhi.n	8038dfc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8038df6:	2308      	movs	r3, #8
 8038df8:	617b      	str	r3, [r7, #20]
 8038dfa:	e015      	b.n	8038e28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8038dfc:	68bb      	ldr	r3, [r7, #8]
 8038dfe:	4a1d      	ldr	r2, [pc, #116]	; (8038e74 <USB_SetTurnaroundTime+0x13c>)
 8038e00:	4293      	cmp	r3, r2
 8038e02:	d906      	bls.n	8038e12 <USB_SetTurnaroundTime+0xda>
 8038e04:	68bb      	ldr	r3, [r7, #8]
 8038e06:	4a1c      	ldr	r2, [pc, #112]	; (8038e78 <USB_SetTurnaroundTime+0x140>)
 8038e08:	4293      	cmp	r3, r2
 8038e0a:	d202      	bcs.n	8038e12 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8038e0c:	2307      	movs	r3, #7
 8038e0e:	617b      	str	r3, [r7, #20]
 8038e10:	e00a      	b.n	8038e28 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8038e12:	2306      	movs	r3, #6
 8038e14:	617b      	str	r3, [r7, #20]
 8038e16:	e007      	b.n	8038e28 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8038e18:	79fb      	ldrb	r3, [r7, #7]
 8038e1a:	2b00      	cmp	r3, #0
 8038e1c:	d102      	bne.n	8038e24 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8038e1e:	2309      	movs	r3, #9
 8038e20:	617b      	str	r3, [r7, #20]
 8038e22:	e001      	b.n	8038e28 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8038e24:	2309      	movs	r3, #9
 8038e26:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8038e28:	68fb      	ldr	r3, [r7, #12]
 8038e2a:	68db      	ldr	r3, [r3, #12]
 8038e2c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8038e30:	68fb      	ldr	r3, [r7, #12]
 8038e32:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8038e34:	68fb      	ldr	r3, [r7, #12]
 8038e36:	68da      	ldr	r2, [r3, #12]
 8038e38:	697b      	ldr	r3, [r7, #20]
 8038e3a:	029b      	lsls	r3, r3, #10
 8038e3c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8038e40:	431a      	orrs	r2, r3
 8038e42:	68fb      	ldr	r3, [r7, #12]
 8038e44:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8038e46:	2300      	movs	r3, #0
}
 8038e48:	4618      	mov	r0, r3
 8038e4a:	371c      	adds	r7, #28
 8038e4c:	46bd      	mov	sp, r7
 8038e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8038e52:	4770      	bx	lr
 8038e54:	00d8acbf 	.word	0x00d8acbf
 8038e58:	00e4e1c0 	.word	0x00e4e1c0
 8038e5c:	00f42400 	.word	0x00f42400
 8038e60:	01067380 	.word	0x01067380
 8038e64:	011a499f 	.word	0x011a499f
 8038e68:	01312cff 	.word	0x01312cff
 8038e6c:	014ca43f 	.word	0x014ca43f
 8038e70:	016e3600 	.word	0x016e3600
 8038e74:	01a6ab1f 	.word	0x01a6ab1f
 8038e78:	01e84800 	.word	0x01e84800

08038e7c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8038e7c:	b480      	push	{r7}
 8038e7e:	b083      	sub	sp, #12
 8038e80:	af00      	add	r7, sp, #0
 8038e82:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8038e84:	687b      	ldr	r3, [r7, #4]
 8038e86:	689b      	ldr	r3, [r3, #8]
 8038e88:	f043 0201 	orr.w	r2, r3, #1
 8038e8c:	687b      	ldr	r3, [r7, #4]
 8038e8e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8038e90:	2300      	movs	r3, #0
}
 8038e92:	4618      	mov	r0, r3
 8038e94:	370c      	adds	r7, #12
 8038e96:	46bd      	mov	sp, r7
 8038e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8038e9c:	4770      	bx	lr

08038e9e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8038e9e:	b480      	push	{r7}
 8038ea0:	b083      	sub	sp, #12
 8038ea2:	af00      	add	r7, sp, #0
 8038ea4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8038ea6:	687b      	ldr	r3, [r7, #4]
 8038ea8:	689b      	ldr	r3, [r3, #8]
 8038eaa:	f023 0201 	bic.w	r2, r3, #1
 8038eae:	687b      	ldr	r3, [r7, #4]
 8038eb0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8038eb2:	2300      	movs	r3, #0
}
 8038eb4:	4618      	mov	r0, r3
 8038eb6:	370c      	adds	r7, #12
 8038eb8:	46bd      	mov	sp, r7
 8038eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8038ebe:	4770      	bx	lr

08038ec0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8038ec0:	b580      	push	{r7, lr}
 8038ec2:	b084      	sub	sp, #16
 8038ec4:	af00      	add	r7, sp, #0
 8038ec6:	6078      	str	r0, [r7, #4]
 8038ec8:	460b      	mov	r3, r1
 8038eca:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8038ecc:	2300      	movs	r3, #0
 8038ece:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8038ed0:	687b      	ldr	r3, [r7, #4]
 8038ed2:	68db      	ldr	r3, [r3, #12]
 8038ed4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8038ed8:	687b      	ldr	r3, [r7, #4]
 8038eda:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8038edc:	78fb      	ldrb	r3, [r7, #3]
 8038ede:	2b01      	cmp	r3, #1
 8038ee0:	d115      	bne.n	8038f0e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8038ee2:	687b      	ldr	r3, [r7, #4]
 8038ee4:	68db      	ldr	r3, [r3, #12]
 8038ee6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8038eea:	687b      	ldr	r3, [r7, #4]
 8038eec:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8038eee:	2001      	movs	r0, #1
 8038ef0:	f7f3 f92a 	bl	802c148 <HAL_Delay>
      ms++;
 8038ef4:	68fb      	ldr	r3, [r7, #12]
 8038ef6:	3301      	adds	r3, #1
 8038ef8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8038efa:	6878      	ldr	r0, [r7, #4]
 8038efc:	f001 fa4b 	bl	803a396 <USB_GetMode>
 8038f00:	4603      	mov	r3, r0
 8038f02:	2b01      	cmp	r3, #1
 8038f04:	d01e      	beq.n	8038f44 <USB_SetCurrentMode+0x84>
 8038f06:	68fb      	ldr	r3, [r7, #12]
 8038f08:	2b31      	cmp	r3, #49	; 0x31
 8038f0a:	d9f0      	bls.n	8038eee <USB_SetCurrentMode+0x2e>
 8038f0c:	e01a      	b.n	8038f44 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8038f0e:	78fb      	ldrb	r3, [r7, #3]
 8038f10:	2b00      	cmp	r3, #0
 8038f12:	d115      	bne.n	8038f40 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8038f14:	687b      	ldr	r3, [r7, #4]
 8038f16:	68db      	ldr	r3, [r3, #12]
 8038f18:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8038f1c:	687b      	ldr	r3, [r7, #4]
 8038f1e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8038f20:	2001      	movs	r0, #1
 8038f22:	f7f3 f911 	bl	802c148 <HAL_Delay>
      ms++;
 8038f26:	68fb      	ldr	r3, [r7, #12]
 8038f28:	3301      	adds	r3, #1
 8038f2a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8038f2c:	6878      	ldr	r0, [r7, #4]
 8038f2e:	f001 fa32 	bl	803a396 <USB_GetMode>
 8038f32:	4603      	mov	r3, r0
 8038f34:	2b00      	cmp	r3, #0
 8038f36:	d005      	beq.n	8038f44 <USB_SetCurrentMode+0x84>
 8038f38:	68fb      	ldr	r3, [r7, #12]
 8038f3a:	2b31      	cmp	r3, #49	; 0x31
 8038f3c:	d9f0      	bls.n	8038f20 <USB_SetCurrentMode+0x60>
 8038f3e:	e001      	b.n	8038f44 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8038f40:	2301      	movs	r3, #1
 8038f42:	e005      	b.n	8038f50 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8038f44:	68fb      	ldr	r3, [r7, #12]
 8038f46:	2b32      	cmp	r3, #50	; 0x32
 8038f48:	d101      	bne.n	8038f4e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8038f4a:	2301      	movs	r3, #1
 8038f4c:	e000      	b.n	8038f50 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8038f4e:	2300      	movs	r3, #0
}
 8038f50:	4618      	mov	r0, r3
 8038f52:	3710      	adds	r7, #16
 8038f54:	46bd      	mov	sp, r7
 8038f56:	bd80      	pop	{r7, pc}

08038f58 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8038f58:	b084      	sub	sp, #16
 8038f5a:	b580      	push	{r7, lr}
 8038f5c:	b086      	sub	sp, #24
 8038f5e:	af00      	add	r7, sp, #0
 8038f60:	6078      	str	r0, [r7, #4]
 8038f62:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8038f66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8038f6a:	2300      	movs	r3, #0
 8038f6c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8038f6e:	687b      	ldr	r3, [r7, #4]
 8038f70:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8038f72:	2300      	movs	r3, #0
 8038f74:	613b      	str	r3, [r7, #16]
 8038f76:	e009      	b.n	8038f8c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8038f78:	687a      	ldr	r2, [r7, #4]
 8038f7a:	693b      	ldr	r3, [r7, #16]
 8038f7c:	3340      	adds	r3, #64	; 0x40
 8038f7e:	009b      	lsls	r3, r3, #2
 8038f80:	4413      	add	r3, r2
 8038f82:	2200      	movs	r2, #0
 8038f84:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8038f86:	693b      	ldr	r3, [r7, #16]
 8038f88:	3301      	adds	r3, #1
 8038f8a:	613b      	str	r3, [r7, #16]
 8038f8c:	693b      	ldr	r3, [r7, #16]
 8038f8e:	2b0e      	cmp	r3, #14
 8038f90:	d9f2      	bls.n	8038f78 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8038f92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8038f94:	2b00      	cmp	r3, #0
 8038f96:	d11c      	bne.n	8038fd2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8038f98:	68fb      	ldr	r3, [r7, #12]
 8038f9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8038f9e:	685b      	ldr	r3, [r3, #4]
 8038fa0:	68fa      	ldr	r2, [r7, #12]
 8038fa2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8038fa6:	f043 0302 	orr.w	r3, r3, #2
 8038faa:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8038fac:	687b      	ldr	r3, [r7, #4]
 8038fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8038fb0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8038fb4:	687b      	ldr	r3, [r7, #4]
 8038fb6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8038fb8:	687b      	ldr	r3, [r7, #4]
 8038fba:	681b      	ldr	r3, [r3, #0]
 8038fbc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8038fc0:	687b      	ldr	r3, [r7, #4]
 8038fc2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8038fc4:	687b      	ldr	r3, [r7, #4]
 8038fc6:	681b      	ldr	r3, [r3, #0]
 8038fc8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8038fcc:	687b      	ldr	r3, [r7, #4]
 8038fce:	601a      	str	r2, [r3, #0]
 8038fd0:	e005      	b.n	8038fde <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8038fd2:	687b      	ldr	r3, [r7, #4]
 8038fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8038fd6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8038fda:	687b      	ldr	r3, [r7, #4]
 8038fdc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8038fde:	68fb      	ldr	r3, [r7, #12]
 8038fe0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8038fe4:	461a      	mov	r2, r3
 8038fe6:	2300      	movs	r3, #0
 8038fe8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8038fea:	68fb      	ldr	r3, [r7, #12]
 8038fec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8038ff0:	4619      	mov	r1, r3
 8038ff2:	68fb      	ldr	r3, [r7, #12]
 8038ff4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8038ff8:	461a      	mov	r2, r3
 8038ffa:	680b      	ldr	r3, [r1, #0]
 8038ffc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8038ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8039000:	2b01      	cmp	r3, #1
 8039002:	d10c      	bne.n	803901e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8039004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8039006:	2b00      	cmp	r3, #0
 8039008:	d104      	bne.n	8039014 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 803900a:	2100      	movs	r1, #0
 803900c:	6878      	ldr	r0, [r7, #4]
 803900e:	f000 f965 	bl	80392dc <USB_SetDevSpeed>
 8039012:	e008      	b.n	8039026 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8039014:	2101      	movs	r1, #1
 8039016:	6878      	ldr	r0, [r7, #4]
 8039018:	f000 f960 	bl	80392dc <USB_SetDevSpeed>
 803901c:	e003      	b.n	8039026 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 803901e:	2103      	movs	r1, #3
 8039020:	6878      	ldr	r0, [r7, #4]
 8039022:	f000 f95b 	bl	80392dc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8039026:	2110      	movs	r1, #16
 8039028:	6878      	ldr	r0, [r7, #4]
 803902a:	f000 f8f3 	bl	8039214 <USB_FlushTxFifo>
 803902e:	4603      	mov	r3, r0
 8039030:	2b00      	cmp	r3, #0
 8039032:	d001      	beq.n	8039038 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8039034:	2301      	movs	r3, #1
 8039036:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8039038:	6878      	ldr	r0, [r7, #4]
 803903a:	f000 f91f 	bl	803927c <USB_FlushRxFifo>
 803903e:	4603      	mov	r3, r0
 8039040:	2b00      	cmp	r3, #0
 8039042:	d001      	beq.n	8039048 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8039044:	2301      	movs	r3, #1
 8039046:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8039048:	68fb      	ldr	r3, [r7, #12]
 803904a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803904e:	461a      	mov	r2, r3
 8039050:	2300      	movs	r3, #0
 8039052:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8039054:	68fb      	ldr	r3, [r7, #12]
 8039056:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803905a:	461a      	mov	r2, r3
 803905c:	2300      	movs	r3, #0
 803905e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8039060:	68fb      	ldr	r3, [r7, #12]
 8039062:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8039066:	461a      	mov	r2, r3
 8039068:	2300      	movs	r3, #0
 803906a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 803906c:	2300      	movs	r3, #0
 803906e:	613b      	str	r3, [r7, #16]
 8039070:	e043      	b.n	80390fa <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8039072:	693b      	ldr	r3, [r7, #16]
 8039074:	015a      	lsls	r2, r3, #5
 8039076:	68fb      	ldr	r3, [r7, #12]
 8039078:	4413      	add	r3, r2
 803907a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803907e:	681b      	ldr	r3, [r3, #0]
 8039080:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8039084:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8039088:	d118      	bne.n	80390bc <USB_DevInit+0x164>
    {
      if (i == 0U)
 803908a:	693b      	ldr	r3, [r7, #16]
 803908c:	2b00      	cmp	r3, #0
 803908e:	d10a      	bne.n	80390a6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8039090:	693b      	ldr	r3, [r7, #16]
 8039092:	015a      	lsls	r2, r3, #5
 8039094:	68fb      	ldr	r3, [r7, #12]
 8039096:	4413      	add	r3, r2
 8039098:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803909c:	461a      	mov	r2, r3
 803909e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80390a2:	6013      	str	r3, [r2, #0]
 80390a4:	e013      	b.n	80390ce <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80390a6:	693b      	ldr	r3, [r7, #16]
 80390a8:	015a      	lsls	r2, r3, #5
 80390aa:	68fb      	ldr	r3, [r7, #12]
 80390ac:	4413      	add	r3, r2
 80390ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80390b2:	461a      	mov	r2, r3
 80390b4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80390b8:	6013      	str	r3, [r2, #0]
 80390ba:	e008      	b.n	80390ce <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80390bc:	693b      	ldr	r3, [r7, #16]
 80390be:	015a      	lsls	r2, r3, #5
 80390c0:	68fb      	ldr	r3, [r7, #12]
 80390c2:	4413      	add	r3, r2
 80390c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80390c8:	461a      	mov	r2, r3
 80390ca:	2300      	movs	r3, #0
 80390cc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80390ce:	693b      	ldr	r3, [r7, #16]
 80390d0:	015a      	lsls	r2, r3, #5
 80390d2:	68fb      	ldr	r3, [r7, #12]
 80390d4:	4413      	add	r3, r2
 80390d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80390da:	461a      	mov	r2, r3
 80390dc:	2300      	movs	r3, #0
 80390de:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80390e0:	693b      	ldr	r3, [r7, #16]
 80390e2:	015a      	lsls	r2, r3, #5
 80390e4:	68fb      	ldr	r3, [r7, #12]
 80390e6:	4413      	add	r3, r2
 80390e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80390ec:	461a      	mov	r2, r3
 80390ee:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80390f2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80390f4:	693b      	ldr	r3, [r7, #16]
 80390f6:	3301      	adds	r3, #1
 80390f8:	613b      	str	r3, [r7, #16]
 80390fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80390fc:	693a      	ldr	r2, [r7, #16]
 80390fe:	429a      	cmp	r2, r3
 8039100:	d3b7      	bcc.n	8039072 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8039102:	2300      	movs	r3, #0
 8039104:	613b      	str	r3, [r7, #16]
 8039106:	e043      	b.n	8039190 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8039108:	693b      	ldr	r3, [r7, #16]
 803910a:	015a      	lsls	r2, r3, #5
 803910c:	68fb      	ldr	r3, [r7, #12]
 803910e:	4413      	add	r3, r2
 8039110:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8039114:	681b      	ldr	r3, [r3, #0]
 8039116:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 803911a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 803911e:	d118      	bne.n	8039152 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8039120:	693b      	ldr	r3, [r7, #16]
 8039122:	2b00      	cmp	r3, #0
 8039124:	d10a      	bne.n	803913c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8039126:	693b      	ldr	r3, [r7, #16]
 8039128:	015a      	lsls	r2, r3, #5
 803912a:	68fb      	ldr	r3, [r7, #12]
 803912c:	4413      	add	r3, r2
 803912e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8039132:	461a      	mov	r2, r3
 8039134:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8039138:	6013      	str	r3, [r2, #0]
 803913a:	e013      	b.n	8039164 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 803913c:	693b      	ldr	r3, [r7, #16]
 803913e:	015a      	lsls	r2, r3, #5
 8039140:	68fb      	ldr	r3, [r7, #12]
 8039142:	4413      	add	r3, r2
 8039144:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8039148:	461a      	mov	r2, r3
 803914a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 803914e:	6013      	str	r3, [r2, #0]
 8039150:	e008      	b.n	8039164 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8039152:	693b      	ldr	r3, [r7, #16]
 8039154:	015a      	lsls	r2, r3, #5
 8039156:	68fb      	ldr	r3, [r7, #12]
 8039158:	4413      	add	r3, r2
 803915a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803915e:	461a      	mov	r2, r3
 8039160:	2300      	movs	r3, #0
 8039162:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8039164:	693b      	ldr	r3, [r7, #16]
 8039166:	015a      	lsls	r2, r3, #5
 8039168:	68fb      	ldr	r3, [r7, #12]
 803916a:	4413      	add	r3, r2
 803916c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8039170:	461a      	mov	r2, r3
 8039172:	2300      	movs	r3, #0
 8039174:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8039176:	693b      	ldr	r3, [r7, #16]
 8039178:	015a      	lsls	r2, r3, #5
 803917a:	68fb      	ldr	r3, [r7, #12]
 803917c:	4413      	add	r3, r2
 803917e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8039182:	461a      	mov	r2, r3
 8039184:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8039188:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 803918a:	693b      	ldr	r3, [r7, #16]
 803918c:	3301      	adds	r3, #1
 803918e:	613b      	str	r3, [r7, #16]
 8039190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8039192:	693a      	ldr	r2, [r7, #16]
 8039194:	429a      	cmp	r2, r3
 8039196:	d3b7      	bcc.n	8039108 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8039198:	68fb      	ldr	r3, [r7, #12]
 803919a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803919e:	691b      	ldr	r3, [r3, #16]
 80391a0:	68fa      	ldr	r2, [r7, #12]
 80391a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80391a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80391aa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80391ac:	687b      	ldr	r3, [r7, #4]
 80391ae:	2200      	movs	r2, #0
 80391b0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80391b2:	687b      	ldr	r3, [r7, #4]
 80391b4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80391b8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80391ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80391bc:	2b00      	cmp	r3, #0
 80391be:	d105      	bne.n	80391cc <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80391c0:	687b      	ldr	r3, [r7, #4]
 80391c2:	699b      	ldr	r3, [r3, #24]
 80391c4:	f043 0210 	orr.w	r2, r3, #16
 80391c8:	687b      	ldr	r3, [r7, #4]
 80391ca:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80391cc:	687b      	ldr	r3, [r7, #4]
 80391ce:	699a      	ldr	r2, [r3, #24]
 80391d0:	4b0e      	ldr	r3, [pc, #56]	; (803920c <USB_DevInit+0x2b4>)
 80391d2:	4313      	orrs	r3, r2
 80391d4:	687a      	ldr	r2, [r7, #4]
 80391d6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80391d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80391da:	2b00      	cmp	r3, #0
 80391dc:	d005      	beq.n	80391ea <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80391de:	687b      	ldr	r3, [r7, #4]
 80391e0:	699b      	ldr	r3, [r3, #24]
 80391e2:	f043 0208 	orr.w	r2, r3, #8
 80391e6:	687b      	ldr	r3, [r7, #4]
 80391e8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80391ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80391ec:	2b01      	cmp	r3, #1
 80391ee:	d105      	bne.n	80391fc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80391f0:	687b      	ldr	r3, [r7, #4]
 80391f2:	699a      	ldr	r2, [r3, #24]
 80391f4:	4b06      	ldr	r3, [pc, #24]	; (8039210 <USB_DevInit+0x2b8>)
 80391f6:	4313      	orrs	r3, r2
 80391f8:	687a      	ldr	r2, [r7, #4]
 80391fa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80391fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80391fe:	4618      	mov	r0, r3
 8039200:	3718      	adds	r7, #24
 8039202:	46bd      	mov	sp, r7
 8039204:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8039208:	b004      	add	sp, #16
 803920a:	4770      	bx	lr
 803920c:	803c3800 	.word	0x803c3800
 8039210:	40000004 	.word	0x40000004

08039214 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8039214:	b480      	push	{r7}
 8039216:	b085      	sub	sp, #20
 8039218:	af00      	add	r7, sp, #0
 803921a:	6078      	str	r0, [r7, #4]
 803921c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 803921e:	2300      	movs	r3, #0
 8039220:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8039222:	68fb      	ldr	r3, [r7, #12]
 8039224:	3301      	adds	r3, #1
 8039226:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8039228:	68fb      	ldr	r3, [r7, #12]
 803922a:	4a13      	ldr	r2, [pc, #76]	; (8039278 <USB_FlushTxFifo+0x64>)
 803922c:	4293      	cmp	r3, r2
 803922e:	d901      	bls.n	8039234 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8039230:	2303      	movs	r3, #3
 8039232:	e01b      	b.n	803926c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8039234:	687b      	ldr	r3, [r7, #4]
 8039236:	691b      	ldr	r3, [r3, #16]
 8039238:	2b00      	cmp	r3, #0
 803923a:	daf2      	bge.n	8039222 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 803923c:	2300      	movs	r3, #0
 803923e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8039240:	683b      	ldr	r3, [r7, #0]
 8039242:	019b      	lsls	r3, r3, #6
 8039244:	f043 0220 	orr.w	r2, r3, #32
 8039248:	687b      	ldr	r3, [r7, #4]
 803924a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 803924c:	68fb      	ldr	r3, [r7, #12]
 803924e:	3301      	adds	r3, #1
 8039250:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8039252:	68fb      	ldr	r3, [r7, #12]
 8039254:	4a08      	ldr	r2, [pc, #32]	; (8039278 <USB_FlushTxFifo+0x64>)
 8039256:	4293      	cmp	r3, r2
 8039258:	d901      	bls.n	803925e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 803925a:	2303      	movs	r3, #3
 803925c:	e006      	b.n	803926c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 803925e:	687b      	ldr	r3, [r7, #4]
 8039260:	691b      	ldr	r3, [r3, #16]
 8039262:	f003 0320 	and.w	r3, r3, #32
 8039266:	2b20      	cmp	r3, #32
 8039268:	d0f0      	beq.n	803924c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 803926a:	2300      	movs	r3, #0
}
 803926c:	4618      	mov	r0, r3
 803926e:	3714      	adds	r7, #20
 8039270:	46bd      	mov	sp, r7
 8039272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039276:	4770      	bx	lr
 8039278:	00030d40 	.word	0x00030d40

0803927c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 803927c:	b480      	push	{r7}
 803927e:	b085      	sub	sp, #20
 8039280:	af00      	add	r7, sp, #0
 8039282:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8039284:	2300      	movs	r3, #0
 8039286:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8039288:	68fb      	ldr	r3, [r7, #12]
 803928a:	3301      	adds	r3, #1
 803928c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 803928e:	68fb      	ldr	r3, [r7, #12]
 8039290:	4a11      	ldr	r2, [pc, #68]	; (80392d8 <USB_FlushRxFifo+0x5c>)
 8039292:	4293      	cmp	r3, r2
 8039294:	d901      	bls.n	803929a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8039296:	2303      	movs	r3, #3
 8039298:	e018      	b.n	80392cc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 803929a:	687b      	ldr	r3, [r7, #4]
 803929c:	691b      	ldr	r3, [r3, #16]
 803929e:	2b00      	cmp	r3, #0
 80392a0:	daf2      	bge.n	8039288 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80392a2:	2300      	movs	r3, #0
 80392a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80392a6:	687b      	ldr	r3, [r7, #4]
 80392a8:	2210      	movs	r2, #16
 80392aa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80392ac:	68fb      	ldr	r3, [r7, #12]
 80392ae:	3301      	adds	r3, #1
 80392b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80392b2:	68fb      	ldr	r3, [r7, #12]
 80392b4:	4a08      	ldr	r2, [pc, #32]	; (80392d8 <USB_FlushRxFifo+0x5c>)
 80392b6:	4293      	cmp	r3, r2
 80392b8:	d901      	bls.n	80392be <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80392ba:	2303      	movs	r3, #3
 80392bc:	e006      	b.n	80392cc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80392be:	687b      	ldr	r3, [r7, #4]
 80392c0:	691b      	ldr	r3, [r3, #16]
 80392c2:	f003 0310 	and.w	r3, r3, #16
 80392c6:	2b10      	cmp	r3, #16
 80392c8:	d0f0      	beq.n	80392ac <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80392ca:	2300      	movs	r3, #0
}
 80392cc:	4618      	mov	r0, r3
 80392ce:	3714      	adds	r7, #20
 80392d0:	46bd      	mov	sp, r7
 80392d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80392d6:	4770      	bx	lr
 80392d8:	00030d40 	.word	0x00030d40

080392dc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80392dc:	b480      	push	{r7}
 80392de:	b085      	sub	sp, #20
 80392e0:	af00      	add	r7, sp, #0
 80392e2:	6078      	str	r0, [r7, #4]
 80392e4:	460b      	mov	r3, r1
 80392e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80392e8:	687b      	ldr	r3, [r7, #4]
 80392ea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80392ec:	68fb      	ldr	r3, [r7, #12]
 80392ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80392f2:	681a      	ldr	r2, [r3, #0]
 80392f4:	78fb      	ldrb	r3, [r7, #3]
 80392f6:	68f9      	ldr	r1, [r7, #12]
 80392f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80392fc:	4313      	orrs	r3, r2
 80392fe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8039300:	2300      	movs	r3, #0
}
 8039302:	4618      	mov	r0, r3
 8039304:	3714      	adds	r7, #20
 8039306:	46bd      	mov	sp, r7
 8039308:	f85d 7b04 	ldr.w	r7, [sp], #4
 803930c:	4770      	bx	lr

0803930e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 803930e:	b480      	push	{r7}
 8039310:	b087      	sub	sp, #28
 8039312:	af00      	add	r7, sp, #0
 8039314:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8039316:	687b      	ldr	r3, [r7, #4]
 8039318:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 803931a:	693b      	ldr	r3, [r7, #16]
 803931c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8039320:	689b      	ldr	r3, [r3, #8]
 8039322:	f003 0306 	and.w	r3, r3, #6
 8039326:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8039328:	68fb      	ldr	r3, [r7, #12]
 803932a:	2b00      	cmp	r3, #0
 803932c:	d102      	bne.n	8039334 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 803932e:	2300      	movs	r3, #0
 8039330:	75fb      	strb	r3, [r7, #23]
 8039332:	e00a      	b.n	803934a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8039334:	68fb      	ldr	r3, [r7, #12]
 8039336:	2b02      	cmp	r3, #2
 8039338:	d002      	beq.n	8039340 <USB_GetDevSpeed+0x32>
 803933a:	68fb      	ldr	r3, [r7, #12]
 803933c:	2b06      	cmp	r3, #6
 803933e:	d102      	bne.n	8039346 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8039340:	2302      	movs	r3, #2
 8039342:	75fb      	strb	r3, [r7, #23]
 8039344:	e001      	b.n	803934a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8039346:	230f      	movs	r3, #15
 8039348:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 803934a:	7dfb      	ldrb	r3, [r7, #23]
}
 803934c:	4618      	mov	r0, r3
 803934e:	371c      	adds	r7, #28
 8039350:	46bd      	mov	sp, r7
 8039352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039356:	4770      	bx	lr

08039358 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8039358:	b480      	push	{r7}
 803935a:	b085      	sub	sp, #20
 803935c:	af00      	add	r7, sp, #0
 803935e:	6078      	str	r0, [r7, #4]
 8039360:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8039362:	687b      	ldr	r3, [r7, #4]
 8039364:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8039366:	683b      	ldr	r3, [r7, #0]
 8039368:	781b      	ldrb	r3, [r3, #0]
 803936a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 803936c:	683b      	ldr	r3, [r7, #0]
 803936e:	785b      	ldrb	r3, [r3, #1]
 8039370:	2b01      	cmp	r3, #1
 8039372:	d139      	bne.n	80393e8 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8039374:	68fb      	ldr	r3, [r7, #12]
 8039376:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803937a:	69da      	ldr	r2, [r3, #28]
 803937c:	683b      	ldr	r3, [r7, #0]
 803937e:	781b      	ldrb	r3, [r3, #0]
 8039380:	f003 030f 	and.w	r3, r3, #15
 8039384:	2101      	movs	r1, #1
 8039386:	fa01 f303 	lsl.w	r3, r1, r3
 803938a:	b29b      	uxth	r3, r3
 803938c:	68f9      	ldr	r1, [r7, #12]
 803938e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8039392:	4313      	orrs	r3, r2
 8039394:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8039396:	68bb      	ldr	r3, [r7, #8]
 8039398:	015a      	lsls	r2, r3, #5
 803939a:	68fb      	ldr	r3, [r7, #12]
 803939c:	4413      	add	r3, r2
 803939e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80393a2:	681b      	ldr	r3, [r3, #0]
 80393a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80393a8:	2b00      	cmp	r3, #0
 80393aa:	d153      	bne.n	8039454 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80393ac:	68bb      	ldr	r3, [r7, #8]
 80393ae:	015a      	lsls	r2, r3, #5
 80393b0:	68fb      	ldr	r3, [r7, #12]
 80393b2:	4413      	add	r3, r2
 80393b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80393b8:	681a      	ldr	r2, [r3, #0]
 80393ba:	683b      	ldr	r3, [r7, #0]
 80393bc:	68db      	ldr	r3, [r3, #12]
 80393be:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80393c2:	683b      	ldr	r3, [r7, #0]
 80393c4:	791b      	ldrb	r3, [r3, #4]
 80393c6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80393c8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80393ca:	68bb      	ldr	r3, [r7, #8]
 80393cc:	059b      	lsls	r3, r3, #22
 80393ce:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80393d0:	431a      	orrs	r2, r3
 80393d2:	68bb      	ldr	r3, [r7, #8]
 80393d4:	0159      	lsls	r1, r3, #5
 80393d6:	68fb      	ldr	r3, [r7, #12]
 80393d8:	440b      	add	r3, r1
 80393da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80393de:	4619      	mov	r1, r3
 80393e0:	4b20      	ldr	r3, [pc, #128]	; (8039464 <USB_ActivateEndpoint+0x10c>)
 80393e2:	4313      	orrs	r3, r2
 80393e4:	600b      	str	r3, [r1, #0]
 80393e6:	e035      	b.n	8039454 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80393e8:	68fb      	ldr	r3, [r7, #12]
 80393ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80393ee:	69da      	ldr	r2, [r3, #28]
 80393f0:	683b      	ldr	r3, [r7, #0]
 80393f2:	781b      	ldrb	r3, [r3, #0]
 80393f4:	f003 030f 	and.w	r3, r3, #15
 80393f8:	2101      	movs	r1, #1
 80393fa:	fa01 f303 	lsl.w	r3, r1, r3
 80393fe:	041b      	lsls	r3, r3, #16
 8039400:	68f9      	ldr	r1, [r7, #12]
 8039402:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8039406:	4313      	orrs	r3, r2
 8039408:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 803940a:	68bb      	ldr	r3, [r7, #8]
 803940c:	015a      	lsls	r2, r3, #5
 803940e:	68fb      	ldr	r3, [r7, #12]
 8039410:	4413      	add	r3, r2
 8039412:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8039416:	681b      	ldr	r3, [r3, #0]
 8039418:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 803941c:	2b00      	cmp	r3, #0
 803941e:	d119      	bne.n	8039454 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8039420:	68bb      	ldr	r3, [r7, #8]
 8039422:	015a      	lsls	r2, r3, #5
 8039424:	68fb      	ldr	r3, [r7, #12]
 8039426:	4413      	add	r3, r2
 8039428:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803942c:	681a      	ldr	r2, [r3, #0]
 803942e:	683b      	ldr	r3, [r7, #0]
 8039430:	68db      	ldr	r3, [r3, #12]
 8039432:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8039436:	683b      	ldr	r3, [r7, #0]
 8039438:	791b      	ldrb	r3, [r3, #4]
 803943a:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 803943c:	430b      	orrs	r3, r1
 803943e:	431a      	orrs	r2, r3
 8039440:	68bb      	ldr	r3, [r7, #8]
 8039442:	0159      	lsls	r1, r3, #5
 8039444:	68fb      	ldr	r3, [r7, #12]
 8039446:	440b      	add	r3, r1
 8039448:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803944c:	4619      	mov	r1, r3
 803944e:	4b05      	ldr	r3, [pc, #20]	; (8039464 <USB_ActivateEndpoint+0x10c>)
 8039450:	4313      	orrs	r3, r2
 8039452:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8039454:	2300      	movs	r3, #0
}
 8039456:	4618      	mov	r0, r3
 8039458:	3714      	adds	r7, #20
 803945a:	46bd      	mov	sp, r7
 803945c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039460:	4770      	bx	lr
 8039462:	bf00      	nop
 8039464:	10008000 	.word	0x10008000

08039468 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8039468:	b480      	push	{r7}
 803946a:	b085      	sub	sp, #20
 803946c:	af00      	add	r7, sp, #0
 803946e:	6078      	str	r0, [r7, #4]
 8039470:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8039472:	687b      	ldr	r3, [r7, #4]
 8039474:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8039476:	683b      	ldr	r3, [r7, #0]
 8039478:	781b      	ldrb	r3, [r3, #0]
 803947a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 803947c:	683b      	ldr	r3, [r7, #0]
 803947e:	785b      	ldrb	r3, [r3, #1]
 8039480:	2b01      	cmp	r3, #1
 8039482:	d161      	bne.n	8039548 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8039484:	68bb      	ldr	r3, [r7, #8]
 8039486:	015a      	lsls	r2, r3, #5
 8039488:	68fb      	ldr	r3, [r7, #12]
 803948a:	4413      	add	r3, r2
 803948c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8039490:	681b      	ldr	r3, [r3, #0]
 8039492:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8039496:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 803949a:	d11f      	bne.n	80394dc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 803949c:	68bb      	ldr	r3, [r7, #8]
 803949e:	015a      	lsls	r2, r3, #5
 80394a0:	68fb      	ldr	r3, [r7, #12]
 80394a2:	4413      	add	r3, r2
 80394a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80394a8:	681b      	ldr	r3, [r3, #0]
 80394aa:	68ba      	ldr	r2, [r7, #8]
 80394ac:	0151      	lsls	r1, r2, #5
 80394ae:	68fa      	ldr	r2, [r7, #12]
 80394b0:	440a      	add	r2, r1
 80394b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80394b6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80394ba:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80394bc:	68bb      	ldr	r3, [r7, #8]
 80394be:	015a      	lsls	r2, r3, #5
 80394c0:	68fb      	ldr	r3, [r7, #12]
 80394c2:	4413      	add	r3, r2
 80394c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80394c8:	681b      	ldr	r3, [r3, #0]
 80394ca:	68ba      	ldr	r2, [r7, #8]
 80394cc:	0151      	lsls	r1, r2, #5
 80394ce:	68fa      	ldr	r2, [r7, #12]
 80394d0:	440a      	add	r2, r1
 80394d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80394d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80394da:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80394dc:	68fb      	ldr	r3, [r7, #12]
 80394de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80394e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80394e4:	683b      	ldr	r3, [r7, #0]
 80394e6:	781b      	ldrb	r3, [r3, #0]
 80394e8:	f003 030f 	and.w	r3, r3, #15
 80394ec:	2101      	movs	r1, #1
 80394ee:	fa01 f303 	lsl.w	r3, r1, r3
 80394f2:	b29b      	uxth	r3, r3
 80394f4:	43db      	mvns	r3, r3
 80394f6:	68f9      	ldr	r1, [r7, #12]
 80394f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80394fc:	4013      	ands	r3, r2
 80394fe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8039500:	68fb      	ldr	r3, [r7, #12]
 8039502:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8039506:	69da      	ldr	r2, [r3, #28]
 8039508:	683b      	ldr	r3, [r7, #0]
 803950a:	781b      	ldrb	r3, [r3, #0]
 803950c:	f003 030f 	and.w	r3, r3, #15
 8039510:	2101      	movs	r1, #1
 8039512:	fa01 f303 	lsl.w	r3, r1, r3
 8039516:	b29b      	uxth	r3, r3
 8039518:	43db      	mvns	r3, r3
 803951a:	68f9      	ldr	r1, [r7, #12]
 803951c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8039520:	4013      	ands	r3, r2
 8039522:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8039524:	68bb      	ldr	r3, [r7, #8]
 8039526:	015a      	lsls	r2, r3, #5
 8039528:	68fb      	ldr	r3, [r7, #12]
 803952a:	4413      	add	r3, r2
 803952c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8039530:	681a      	ldr	r2, [r3, #0]
 8039532:	68bb      	ldr	r3, [r7, #8]
 8039534:	0159      	lsls	r1, r3, #5
 8039536:	68fb      	ldr	r3, [r7, #12]
 8039538:	440b      	add	r3, r1
 803953a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803953e:	4619      	mov	r1, r3
 8039540:	4b35      	ldr	r3, [pc, #212]	; (8039618 <USB_DeactivateEndpoint+0x1b0>)
 8039542:	4013      	ands	r3, r2
 8039544:	600b      	str	r3, [r1, #0]
 8039546:	e060      	b.n	803960a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8039548:	68bb      	ldr	r3, [r7, #8]
 803954a:	015a      	lsls	r2, r3, #5
 803954c:	68fb      	ldr	r3, [r7, #12]
 803954e:	4413      	add	r3, r2
 8039550:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8039554:	681b      	ldr	r3, [r3, #0]
 8039556:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 803955a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 803955e:	d11f      	bne.n	80395a0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8039560:	68bb      	ldr	r3, [r7, #8]
 8039562:	015a      	lsls	r2, r3, #5
 8039564:	68fb      	ldr	r3, [r7, #12]
 8039566:	4413      	add	r3, r2
 8039568:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803956c:	681b      	ldr	r3, [r3, #0]
 803956e:	68ba      	ldr	r2, [r7, #8]
 8039570:	0151      	lsls	r1, r2, #5
 8039572:	68fa      	ldr	r2, [r7, #12]
 8039574:	440a      	add	r2, r1
 8039576:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803957a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 803957e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8039580:	68bb      	ldr	r3, [r7, #8]
 8039582:	015a      	lsls	r2, r3, #5
 8039584:	68fb      	ldr	r3, [r7, #12]
 8039586:	4413      	add	r3, r2
 8039588:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803958c:	681b      	ldr	r3, [r3, #0]
 803958e:	68ba      	ldr	r2, [r7, #8]
 8039590:	0151      	lsls	r1, r2, #5
 8039592:	68fa      	ldr	r2, [r7, #12]
 8039594:	440a      	add	r2, r1
 8039596:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803959a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 803959e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80395a0:	68fb      	ldr	r3, [r7, #12]
 80395a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80395a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80395a8:	683b      	ldr	r3, [r7, #0]
 80395aa:	781b      	ldrb	r3, [r3, #0]
 80395ac:	f003 030f 	and.w	r3, r3, #15
 80395b0:	2101      	movs	r1, #1
 80395b2:	fa01 f303 	lsl.w	r3, r1, r3
 80395b6:	041b      	lsls	r3, r3, #16
 80395b8:	43db      	mvns	r3, r3
 80395ba:	68f9      	ldr	r1, [r7, #12]
 80395bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80395c0:	4013      	ands	r3, r2
 80395c2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80395c4:	68fb      	ldr	r3, [r7, #12]
 80395c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80395ca:	69da      	ldr	r2, [r3, #28]
 80395cc:	683b      	ldr	r3, [r7, #0]
 80395ce:	781b      	ldrb	r3, [r3, #0]
 80395d0:	f003 030f 	and.w	r3, r3, #15
 80395d4:	2101      	movs	r1, #1
 80395d6:	fa01 f303 	lsl.w	r3, r1, r3
 80395da:	041b      	lsls	r3, r3, #16
 80395dc:	43db      	mvns	r3, r3
 80395de:	68f9      	ldr	r1, [r7, #12]
 80395e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80395e4:	4013      	ands	r3, r2
 80395e6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80395e8:	68bb      	ldr	r3, [r7, #8]
 80395ea:	015a      	lsls	r2, r3, #5
 80395ec:	68fb      	ldr	r3, [r7, #12]
 80395ee:	4413      	add	r3, r2
 80395f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80395f4:	681a      	ldr	r2, [r3, #0]
 80395f6:	68bb      	ldr	r3, [r7, #8]
 80395f8:	0159      	lsls	r1, r3, #5
 80395fa:	68fb      	ldr	r3, [r7, #12]
 80395fc:	440b      	add	r3, r1
 80395fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8039602:	4619      	mov	r1, r3
 8039604:	4b05      	ldr	r3, [pc, #20]	; (803961c <USB_DeactivateEndpoint+0x1b4>)
 8039606:	4013      	ands	r3, r2
 8039608:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 803960a:	2300      	movs	r3, #0
}
 803960c:	4618      	mov	r0, r3
 803960e:	3714      	adds	r7, #20
 8039610:	46bd      	mov	sp, r7
 8039612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039616:	4770      	bx	lr
 8039618:	ec337800 	.word	0xec337800
 803961c:	eff37800 	.word	0xeff37800

08039620 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8039620:	b580      	push	{r7, lr}
 8039622:	b08a      	sub	sp, #40	; 0x28
 8039624:	af02      	add	r7, sp, #8
 8039626:	60f8      	str	r0, [r7, #12]
 8039628:	60b9      	str	r1, [r7, #8]
 803962a:	4613      	mov	r3, r2
 803962c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803962e:	68fb      	ldr	r3, [r7, #12]
 8039630:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8039632:	68bb      	ldr	r3, [r7, #8]
 8039634:	781b      	ldrb	r3, [r3, #0]
 8039636:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8039638:	68bb      	ldr	r3, [r7, #8]
 803963a:	785b      	ldrb	r3, [r3, #1]
 803963c:	2b01      	cmp	r3, #1
 803963e:	f040 8163 	bne.w	8039908 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8039642:	68bb      	ldr	r3, [r7, #8]
 8039644:	699b      	ldr	r3, [r3, #24]
 8039646:	2b00      	cmp	r3, #0
 8039648:	d132      	bne.n	80396b0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 803964a:	69bb      	ldr	r3, [r7, #24]
 803964c:	015a      	lsls	r2, r3, #5
 803964e:	69fb      	ldr	r3, [r7, #28]
 8039650:	4413      	add	r3, r2
 8039652:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8039656:	691a      	ldr	r2, [r3, #16]
 8039658:	69bb      	ldr	r3, [r7, #24]
 803965a:	0159      	lsls	r1, r3, #5
 803965c:	69fb      	ldr	r3, [r7, #28]
 803965e:	440b      	add	r3, r1
 8039660:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8039664:	4619      	mov	r1, r3
 8039666:	4ba5      	ldr	r3, [pc, #660]	; (80398fc <USB_EPStartXfer+0x2dc>)
 8039668:	4013      	ands	r3, r2
 803966a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 803966c:	69bb      	ldr	r3, [r7, #24]
 803966e:	015a      	lsls	r2, r3, #5
 8039670:	69fb      	ldr	r3, [r7, #28]
 8039672:	4413      	add	r3, r2
 8039674:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8039678:	691b      	ldr	r3, [r3, #16]
 803967a:	69ba      	ldr	r2, [r7, #24]
 803967c:	0151      	lsls	r1, r2, #5
 803967e:	69fa      	ldr	r2, [r7, #28]
 8039680:	440a      	add	r2, r1
 8039682:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8039686:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 803968a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 803968c:	69bb      	ldr	r3, [r7, #24]
 803968e:	015a      	lsls	r2, r3, #5
 8039690:	69fb      	ldr	r3, [r7, #28]
 8039692:	4413      	add	r3, r2
 8039694:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8039698:	691a      	ldr	r2, [r3, #16]
 803969a:	69bb      	ldr	r3, [r7, #24]
 803969c:	0159      	lsls	r1, r3, #5
 803969e:	69fb      	ldr	r3, [r7, #28]
 80396a0:	440b      	add	r3, r1
 80396a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80396a6:	4619      	mov	r1, r3
 80396a8:	4b95      	ldr	r3, [pc, #596]	; (8039900 <USB_EPStartXfer+0x2e0>)
 80396aa:	4013      	ands	r3, r2
 80396ac:	610b      	str	r3, [r1, #16]
 80396ae:	e074      	b.n	803979a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80396b0:	69bb      	ldr	r3, [r7, #24]
 80396b2:	015a      	lsls	r2, r3, #5
 80396b4:	69fb      	ldr	r3, [r7, #28]
 80396b6:	4413      	add	r3, r2
 80396b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80396bc:	691a      	ldr	r2, [r3, #16]
 80396be:	69bb      	ldr	r3, [r7, #24]
 80396c0:	0159      	lsls	r1, r3, #5
 80396c2:	69fb      	ldr	r3, [r7, #28]
 80396c4:	440b      	add	r3, r1
 80396c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80396ca:	4619      	mov	r1, r3
 80396cc:	4b8c      	ldr	r3, [pc, #560]	; (8039900 <USB_EPStartXfer+0x2e0>)
 80396ce:	4013      	ands	r3, r2
 80396d0:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80396d2:	69bb      	ldr	r3, [r7, #24]
 80396d4:	015a      	lsls	r2, r3, #5
 80396d6:	69fb      	ldr	r3, [r7, #28]
 80396d8:	4413      	add	r3, r2
 80396da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80396de:	691a      	ldr	r2, [r3, #16]
 80396e0:	69bb      	ldr	r3, [r7, #24]
 80396e2:	0159      	lsls	r1, r3, #5
 80396e4:	69fb      	ldr	r3, [r7, #28]
 80396e6:	440b      	add	r3, r1
 80396e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80396ec:	4619      	mov	r1, r3
 80396ee:	4b83      	ldr	r3, [pc, #524]	; (80398fc <USB_EPStartXfer+0x2dc>)
 80396f0:	4013      	ands	r3, r2
 80396f2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80396f4:	69bb      	ldr	r3, [r7, #24]
 80396f6:	015a      	lsls	r2, r3, #5
 80396f8:	69fb      	ldr	r3, [r7, #28]
 80396fa:	4413      	add	r3, r2
 80396fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8039700:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8039702:	68bb      	ldr	r3, [r7, #8]
 8039704:	6999      	ldr	r1, [r3, #24]
 8039706:	68bb      	ldr	r3, [r7, #8]
 8039708:	68db      	ldr	r3, [r3, #12]
 803970a:	440b      	add	r3, r1
 803970c:	1e59      	subs	r1, r3, #1
 803970e:	68bb      	ldr	r3, [r7, #8]
 8039710:	68db      	ldr	r3, [r3, #12]
 8039712:	fbb1 f3f3 	udiv	r3, r1, r3
 8039716:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8039718:	4b7a      	ldr	r3, [pc, #488]	; (8039904 <USB_EPStartXfer+0x2e4>)
 803971a:	400b      	ands	r3, r1
 803971c:	69b9      	ldr	r1, [r7, #24]
 803971e:	0148      	lsls	r0, r1, #5
 8039720:	69f9      	ldr	r1, [r7, #28]
 8039722:	4401      	add	r1, r0
 8039724:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8039728:	4313      	orrs	r3, r2
 803972a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 803972c:	69bb      	ldr	r3, [r7, #24]
 803972e:	015a      	lsls	r2, r3, #5
 8039730:	69fb      	ldr	r3, [r7, #28]
 8039732:	4413      	add	r3, r2
 8039734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8039738:	691a      	ldr	r2, [r3, #16]
 803973a:	68bb      	ldr	r3, [r7, #8]
 803973c:	699b      	ldr	r3, [r3, #24]
 803973e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8039742:	69b9      	ldr	r1, [r7, #24]
 8039744:	0148      	lsls	r0, r1, #5
 8039746:	69f9      	ldr	r1, [r7, #28]
 8039748:	4401      	add	r1, r0
 803974a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 803974e:	4313      	orrs	r3, r2
 8039750:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8039752:	68bb      	ldr	r3, [r7, #8]
 8039754:	791b      	ldrb	r3, [r3, #4]
 8039756:	2b01      	cmp	r3, #1
 8039758:	d11f      	bne.n	803979a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 803975a:	69bb      	ldr	r3, [r7, #24]
 803975c:	015a      	lsls	r2, r3, #5
 803975e:	69fb      	ldr	r3, [r7, #28]
 8039760:	4413      	add	r3, r2
 8039762:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8039766:	691b      	ldr	r3, [r3, #16]
 8039768:	69ba      	ldr	r2, [r7, #24]
 803976a:	0151      	lsls	r1, r2, #5
 803976c:	69fa      	ldr	r2, [r7, #28]
 803976e:	440a      	add	r2, r1
 8039770:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8039774:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8039778:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 803977a:	69bb      	ldr	r3, [r7, #24]
 803977c:	015a      	lsls	r2, r3, #5
 803977e:	69fb      	ldr	r3, [r7, #28]
 8039780:	4413      	add	r3, r2
 8039782:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8039786:	691b      	ldr	r3, [r3, #16]
 8039788:	69ba      	ldr	r2, [r7, #24]
 803978a:	0151      	lsls	r1, r2, #5
 803978c:	69fa      	ldr	r2, [r7, #28]
 803978e:	440a      	add	r2, r1
 8039790:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8039794:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8039798:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 803979a:	79fb      	ldrb	r3, [r7, #7]
 803979c:	2b01      	cmp	r3, #1
 803979e:	d14b      	bne.n	8039838 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80397a0:	68bb      	ldr	r3, [r7, #8]
 80397a2:	695b      	ldr	r3, [r3, #20]
 80397a4:	2b00      	cmp	r3, #0
 80397a6:	d009      	beq.n	80397bc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80397a8:	69bb      	ldr	r3, [r7, #24]
 80397aa:	015a      	lsls	r2, r3, #5
 80397ac:	69fb      	ldr	r3, [r7, #28]
 80397ae:	4413      	add	r3, r2
 80397b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80397b4:	461a      	mov	r2, r3
 80397b6:	68bb      	ldr	r3, [r7, #8]
 80397b8:	695b      	ldr	r3, [r3, #20]
 80397ba:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80397bc:	68bb      	ldr	r3, [r7, #8]
 80397be:	791b      	ldrb	r3, [r3, #4]
 80397c0:	2b01      	cmp	r3, #1
 80397c2:	d128      	bne.n	8039816 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80397c4:	69fb      	ldr	r3, [r7, #28]
 80397c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80397ca:	689b      	ldr	r3, [r3, #8]
 80397cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80397d0:	2b00      	cmp	r3, #0
 80397d2:	d110      	bne.n	80397f6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80397d4:	69bb      	ldr	r3, [r7, #24]
 80397d6:	015a      	lsls	r2, r3, #5
 80397d8:	69fb      	ldr	r3, [r7, #28]
 80397da:	4413      	add	r3, r2
 80397dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80397e0:	681b      	ldr	r3, [r3, #0]
 80397e2:	69ba      	ldr	r2, [r7, #24]
 80397e4:	0151      	lsls	r1, r2, #5
 80397e6:	69fa      	ldr	r2, [r7, #28]
 80397e8:	440a      	add	r2, r1
 80397ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80397ee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80397f2:	6013      	str	r3, [r2, #0]
 80397f4:	e00f      	b.n	8039816 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80397f6:	69bb      	ldr	r3, [r7, #24]
 80397f8:	015a      	lsls	r2, r3, #5
 80397fa:	69fb      	ldr	r3, [r7, #28]
 80397fc:	4413      	add	r3, r2
 80397fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8039802:	681b      	ldr	r3, [r3, #0]
 8039804:	69ba      	ldr	r2, [r7, #24]
 8039806:	0151      	lsls	r1, r2, #5
 8039808:	69fa      	ldr	r2, [r7, #28]
 803980a:	440a      	add	r2, r1
 803980c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8039810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8039814:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8039816:	69bb      	ldr	r3, [r7, #24]
 8039818:	015a      	lsls	r2, r3, #5
 803981a:	69fb      	ldr	r3, [r7, #28]
 803981c:	4413      	add	r3, r2
 803981e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8039822:	681b      	ldr	r3, [r3, #0]
 8039824:	69ba      	ldr	r2, [r7, #24]
 8039826:	0151      	lsls	r1, r2, #5
 8039828:	69fa      	ldr	r2, [r7, #28]
 803982a:	440a      	add	r2, r1
 803982c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8039830:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8039834:	6013      	str	r3, [r2, #0]
 8039836:	e137      	b.n	8039aa8 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8039838:	69bb      	ldr	r3, [r7, #24]
 803983a:	015a      	lsls	r2, r3, #5
 803983c:	69fb      	ldr	r3, [r7, #28]
 803983e:	4413      	add	r3, r2
 8039840:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8039844:	681b      	ldr	r3, [r3, #0]
 8039846:	69ba      	ldr	r2, [r7, #24]
 8039848:	0151      	lsls	r1, r2, #5
 803984a:	69fa      	ldr	r2, [r7, #28]
 803984c:	440a      	add	r2, r1
 803984e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8039852:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8039856:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8039858:	68bb      	ldr	r3, [r7, #8]
 803985a:	791b      	ldrb	r3, [r3, #4]
 803985c:	2b01      	cmp	r3, #1
 803985e:	d015      	beq.n	803988c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8039860:	68bb      	ldr	r3, [r7, #8]
 8039862:	699b      	ldr	r3, [r3, #24]
 8039864:	2b00      	cmp	r3, #0
 8039866:	f000 811f 	beq.w	8039aa8 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 803986a:	69fb      	ldr	r3, [r7, #28]
 803986c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8039870:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8039872:	68bb      	ldr	r3, [r7, #8]
 8039874:	781b      	ldrb	r3, [r3, #0]
 8039876:	f003 030f 	and.w	r3, r3, #15
 803987a:	2101      	movs	r1, #1
 803987c:	fa01 f303 	lsl.w	r3, r1, r3
 8039880:	69f9      	ldr	r1, [r7, #28]
 8039882:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8039886:	4313      	orrs	r3, r2
 8039888:	634b      	str	r3, [r1, #52]	; 0x34
 803988a:	e10d      	b.n	8039aa8 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 803988c:	69fb      	ldr	r3, [r7, #28]
 803988e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8039892:	689b      	ldr	r3, [r3, #8]
 8039894:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8039898:	2b00      	cmp	r3, #0
 803989a:	d110      	bne.n	80398be <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 803989c:	69bb      	ldr	r3, [r7, #24]
 803989e:	015a      	lsls	r2, r3, #5
 80398a0:	69fb      	ldr	r3, [r7, #28]
 80398a2:	4413      	add	r3, r2
 80398a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80398a8:	681b      	ldr	r3, [r3, #0]
 80398aa:	69ba      	ldr	r2, [r7, #24]
 80398ac:	0151      	lsls	r1, r2, #5
 80398ae:	69fa      	ldr	r2, [r7, #28]
 80398b0:	440a      	add	r2, r1
 80398b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80398b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80398ba:	6013      	str	r3, [r2, #0]
 80398bc:	e00f      	b.n	80398de <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80398be:	69bb      	ldr	r3, [r7, #24]
 80398c0:	015a      	lsls	r2, r3, #5
 80398c2:	69fb      	ldr	r3, [r7, #28]
 80398c4:	4413      	add	r3, r2
 80398c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80398ca:	681b      	ldr	r3, [r3, #0]
 80398cc:	69ba      	ldr	r2, [r7, #24]
 80398ce:	0151      	lsls	r1, r2, #5
 80398d0:	69fa      	ldr	r2, [r7, #28]
 80398d2:	440a      	add	r2, r1
 80398d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80398d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80398dc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80398de:	68bb      	ldr	r3, [r7, #8]
 80398e0:	6919      	ldr	r1, [r3, #16]
 80398e2:	68bb      	ldr	r3, [r7, #8]
 80398e4:	781a      	ldrb	r2, [r3, #0]
 80398e6:	68bb      	ldr	r3, [r7, #8]
 80398e8:	699b      	ldr	r3, [r3, #24]
 80398ea:	b298      	uxth	r0, r3
 80398ec:	79fb      	ldrb	r3, [r7, #7]
 80398ee:	9300      	str	r3, [sp, #0]
 80398f0:	4603      	mov	r3, r0
 80398f2:	68f8      	ldr	r0, [r7, #12]
 80398f4:	f000 faea 	bl	8039ecc <USB_WritePacket>
 80398f8:	e0d6      	b.n	8039aa8 <USB_EPStartXfer+0x488>
 80398fa:	bf00      	nop
 80398fc:	e007ffff 	.word	0xe007ffff
 8039900:	fff80000 	.word	0xfff80000
 8039904:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8039908:	69bb      	ldr	r3, [r7, #24]
 803990a:	015a      	lsls	r2, r3, #5
 803990c:	69fb      	ldr	r3, [r7, #28]
 803990e:	4413      	add	r3, r2
 8039910:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8039914:	691a      	ldr	r2, [r3, #16]
 8039916:	69bb      	ldr	r3, [r7, #24]
 8039918:	0159      	lsls	r1, r3, #5
 803991a:	69fb      	ldr	r3, [r7, #28]
 803991c:	440b      	add	r3, r1
 803991e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8039922:	4619      	mov	r1, r3
 8039924:	4b63      	ldr	r3, [pc, #396]	; (8039ab4 <USB_EPStartXfer+0x494>)
 8039926:	4013      	ands	r3, r2
 8039928:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 803992a:	69bb      	ldr	r3, [r7, #24]
 803992c:	015a      	lsls	r2, r3, #5
 803992e:	69fb      	ldr	r3, [r7, #28]
 8039930:	4413      	add	r3, r2
 8039932:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8039936:	691a      	ldr	r2, [r3, #16]
 8039938:	69bb      	ldr	r3, [r7, #24]
 803993a:	0159      	lsls	r1, r3, #5
 803993c:	69fb      	ldr	r3, [r7, #28]
 803993e:	440b      	add	r3, r1
 8039940:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8039944:	4619      	mov	r1, r3
 8039946:	4b5c      	ldr	r3, [pc, #368]	; (8039ab8 <USB_EPStartXfer+0x498>)
 8039948:	4013      	ands	r3, r2
 803994a:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 803994c:	68bb      	ldr	r3, [r7, #8]
 803994e:	699b      	ldr	r3, [r3, #24]
 8039950:	2b00      	cmp	r3, #0
 8039952:	d123      	bne.n	803999c <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8039954:	69bb      	ldr	r3, [r7, #24]
 8039956:	015a      	lsls	r2, r3, #5
 8039958:	69fb      	ldr	r3, [r7, #28]
 803995a:	4413      	add	r3, r2
 803995c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8039960:	691a      	ldr	r2, [r3, #16]
 8039962:	68bb      	ldr	r3, [r7, #8]
 8039964:	68db      	ldr	r3, [r3, #12]
 8039966:	f3c3 0312 	ubfx	r3, r3, #0, #19
 803996a:	69b9      	ldr	r1, [r7, #24]
 803996c:	0148      	lsls	r0, r1, #5
 803996e:	69f9      	ldr	r1, [r7, #28]
 8039970:	4401      	add	r1, r0
 8039972:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8039976:	4313      	orrs	r3, r2
 8039978:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 803997a:	69bb      	ldr	r3, [r7, #24]
 803997c:	015a      	lsls	r2, r3, #5
 803997e:	69fb      	ldr	r3, [r7, #28]
 8039980:	4413      	add	r3, r2
 8039982:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8039986:	691b      	ldr	r3, [r3, #16]
 8039988:	69ba      	ldr	r2, [r7, #24]
 803998a:	0151      	lsls	r1, r2, #5
 803998c:	69fa      	ldr	r2, [r7, #28]
 803998e:	440a      	add	r2, r1
 8039990:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8039994:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8039998:	6113      	str	r3, [r2, #16]
 803999a:	e037      	b.n	8039a0c <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 803999c:	68bb      	ldr	r3, [r7, #8]
 803999e:	699a      	ldr	r2, [r3, #24]
 80399a0:	68bb      	ldr	r3, [r7, #8]
 80399a2:	68db      	ldr	r3, [r3, #12]
 80399a4:	4413      	add	r3, r2
 80399a6:	1e5a      	subs	r2, r3, #1
 80399a8:	68bb      	ldr	r3, [r7, #8]
 80399aa:	68db      	ldr	r3, [r3, #12]
 80399ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80399b0:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80399b2:	68bb      	ldr	r3, [r7, #8]
 80399b4:	68db      	ldr	r3, [r3, #12]
 80399b6:	8afa      	ldrh	r2, [r7, #22]
 80399b8:	fb03 f202 	mul.w	r2, r3, r2
 80399bc:	68bb      	ldr	r3, [r7, #8]
 80399be:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80399c0:	69bb      	ldr	r3, [r7, #24]
 80399c2:	015a      	lsls	r2, r3, #5
 80399c4:	69fb      	ldr	r3, [r7, #28]
 80399c6:	4413      	add	r3, r2
 80399c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80399cc:	691a      	ldr	r2, [r3, #16]
 80399ce:	8afb      	ldrh	r3, [r7, #22]
 80399d0:	04d9      	lsls	r1, r3, #19
 80399d2:	4b3a      	ldr	r3, [pc, #232]	; (8039abc <USB_EPStartXfer+0x49c>)
 80399d4:	400b      	ands	r3, r1
 80399d6:	69b9      	ldr	r1, [r7, #24]
 80399d8:	0148      	lsls	r0, r1, #5
 80399da:	69f9      	ldr	r1, [r7, #28]
 80399dc:	4401      	add	r1, r0
 80399de:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80399e2:	4313      	orrs	r3, r2
 80399e4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80399e6:	69bb      	ldr	r3, [r7, #24]
 80399e8:	015a      	lsls	r2, r3, #5
 80399ea:	69fb      	ldr	r3, [r7, #28]
 80399ec:	4413      	add	r3, r2
 80399ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80399f2:	691a      	ldr	r2, [r3, #16]
 80399f4:	68bb      	ldr	r3, [r7, #8]
 80399f6:	69db      	ldr	r3, [r3, #28]
 80399f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80399fc:	69b9      	ldr	r1, [r7, #24]
 80399fe:	0148      	lsls	r0, r1, #5
 8039a00:	69f9      	ldr	r1, [r7, #28]
 8039a02:	4401      	add	r1, r0
 8039a04:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8039a08:	4313      	orrs	r3, r2
 8039a0a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8039a0c:	79fb      	ldrb	r3, [r7, #7]
 8039a0e:	2b01      	cmp	r3, #1
 8039a10:	d10d      	bne.n	8039a2e <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8039a12:	68bb      	ldr	r3, [r7, #8]
 8039a14:	691b      	ldr	r3, [r3, #16]
 8039a16:	2b00      	cmp	r3, #0
 8039a18:	d009      	beq.n	8039a2e <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8039a1a:	68bb      	ldr	r3, [r7, #8]
 8039a1c:	6919      	ldr	r1, [r3, #16]
 8039a1e:	69bb      	ldr	r3, [r7, #24]
 8039a20:	015a      	lsls	r2, r3, #5
 8039a22:	69fb      	ldr	r3, [r7, #28]
 8039a24:	4413      	add	r3, r2
 8039a26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8039a2a:	460a      	mov	r2, r1
 8039a2c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8039a2e:	68bb      	ldr	r3, [r7, #8]
 8039a30:	791b      	ldrb	r3, [r3, #4]
 8039a32:	2b01      	cmp	r3, #1
 8039a34:	d128      	bne.n	8039a88 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8039a36:	69fb      	ldr	r3, [r7, #28]
 8039a38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8039a3c:	689b      	ldr	r3, [r3, #8]
 8039a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8039a42:	2b00      	cmp	r3, #0
 8039a44:	d110      	bne.n	8039a68 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8039a46:	69bb      	ldr	r3, [r7, #24]
 8039a48:	015a      	lsls	r2, r3, #5
 8039a4a:	69fb      	ldr	r3, [r7, #28]
 8039a4c:	4413      	add	r3, r2
 8039a4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8039a52:	681b      	ldr	r3, [r3, #0]
 8039a54:	69ba      	ldr	r2, [r7, #24]
 8039a56:	0151      	lsls	r1, r2, #5
 8039a58:	69fa      	ldr	r2, [r7, #28]
 8039a5a:	440a      	add	r2, r1
 8039a5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8039a60:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8039a64:	6013      	str	r3, [r2, #0]
 8039a66:	e00f      	b.n	8039a88 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8039a68:	69bb      	ldr	r3, [r7, #24]
 8039a6a:	015a      	lsls	r2, r3, #5
 8039a6c:	69fb      	ldr	r3, [r7, #28]
 8039a6e:	4413      	add	r3, r2
 8039a70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8039a74:	681b      	ldr	r3, [r3, #0]
 8039a76:	69ba      	ldr	r2, [r7, #24]
 8039a78:	0151      	lsls	r1, r2, #5
 8039a7a:	69fa      	ldr	r2, [r7, #28]
 8039a7c:	440a      	add	r2, r1
 8039a7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8039a82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8039a86:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8039a88:	69bb      	ldr	r3, [r7, #24]
 8039a8a:	015a      	lsls	r2, r3, #5
 8039a8c:	69fb      	ldr	r3, [r7, #28]
 8039a8e:	4413      	add	r3, r2
 8039a90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8039a94:	681b      	ldr	r3, [r3, #0]
 8039a96:	69ba      	ldr	r2, [r7, #24]
 8039a98:	0151      	lsls	r1, r2, #5
 8039a9a:	69fa      	ldr	r2, [r7, #28]
 8039a9c:	440a      	add	r2, r1
 8039a9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8039aa2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8039aa6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8039aa8:	2300      	movs	r3, #0
}
 8039aaa:	4618      	mov	r0, r3
 8039aac:	3720      	adds	r7, #32
 8039aae:	46bd      	mov	sp, r7
 8039ab0:	bd80      	pop	{r7, pc}
 8039ab2:	bf00      	nop
 8039ab4:	fff80000 	.word	0xfff80000
 8039ab8:	e007ffff 	.word	0xe007ffff
 8039abc:	1ff80000 	.word	0x1ff80000

08039ac0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8039ac0:	b480      	push	{r7}
 8039ac2:	b087      	sub	sp, #28
 8039ac4:	af00      	add	r7, sp, #0
 8039ac6:	60f8      	str	r0, [r7, #12]
 8039ac8:	60b9      	str	r1, [r7, #8]
 8039aca:	4613      	mov	r3, r2
 8039acc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8039ace:	68fb      	ldr	r3, [r7, #12]
 8039ad0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8039ad2:	68bb      	ldr	r3, [r7, #8]
 8039ad4:	781b      	ldrb	r3, [r3, #0]
 8039ad6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8039ad8:	68bb      	ldr	r3, [r7, #8]
 8039ada:	785b      	ldrb	r3, [r3, #1]
 8039adc:	2b01      	cmp	r3, #1
 8039ade:	f040 80ce 	bne.w	8039c7e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8039ae2:	68bb      	ldr	r3, [r7, #8]
 8039ae4:	699b      	ldr	r3, [r3, #24]
 8039ae6:	2b00      	cmp	r3, #0
 8039ae8:	d132      	bne.n	8039b50 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8039aea:	693b      	ldr	r3, [r7, #16]
 8039aec:	015a      	lsls	r2, r3, #5
 8039aee:	697b      	ldr	r3, [r7, #20]
 8039af0:	4413      	add	r3, r2
 8039af2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8039af6:	691a      	ldr	r2, [r3, #16]
 8039af8:	693b      	ldr	r3, [r7, #16]
 8039afa:	0159      	lsls	r1, r3, #5
 8039afc:	697b      	ldr	r3, [r7, #20]
 8039afe:	440b      	add	r3, r1
 8039b00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8039b04:	4619      	mov	r1, r3
 8039b06:	4b9a      	ldr	r3, [pc, #616]	; (8039d70 <USB_EP0StartXfer+0x2b0>)
 8039b08:	4013      	ands	r3, r2
 8039b0a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8039b0c:	693b      	ldr	r3, [r7, #16]
 8039b0e:	015a      	lsls	r2, r3, #5
 8039b10:	697b      	ldr	r3, [r7, #20]
 8039b12:	4413      	add	r3, r2
 8039b14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8039b18:	691b      	ldr	r3, [r3, #16]
 8039b1a:	693a      	ldr	r2, [r7, #16]
 8039b1c:	0151      	lsls	r1, r2, #5
 8039b1e:	697a      	ldr	r2, [r7, #20]
 8039b20:	440a      	add	r2, r1
 8039b22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8039b26:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8039b2a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8039b2c:	693b      	ldr	r3, [r7, #16]
 8039b2e:	015a      	lsls	r2, r3, #5
 8039b30:	697b      	ldr	r3, [r7, #20]
 8039b32:	4413      	add	r3, r2
 8039b34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8039b38:	691a      	ldr	r2, [r3, #16]
 8039b3a:	693b      	ldr	r3, [r7, #16]
 8039b3c:	0159      	lsls	r1, r3, #5
 8039b3e:	697b      	ldr	r3, [r7, #20]
 8039b40:	440b      	add	r3, r1
 8039b42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8039b46:	4619      	mov	r1, r3
 8039b48:	4b8a      	ldr	r3, [pc, #552]	; (8039d74 <USB_EP0StartXfer+0x2b4>)
 8039b4a:	4013      	ands	r3, r2
 8039b4c:	610b      	str	r3, [r1, #16]
 8039b4e:	e04e      	b.n	8039bee <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8039b50:	693b      	ldr	r3, [r7, #16]
 8039b52:	015a      	lsls	r2, r3, #5
 8039b54:	697b      	ldr	r3, [r7, #20]
 8039b56:	4413      	add	r3, r2
 8039b58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8039b5c:	691a      	ldr	r2, [r3, #16]
 8039b5e:	693b      	ldr	r3, [r7, #16]
 8039b60:	0159      	lsls	r1, r3, #5
 8039b62:	697b      	ldr	r3, [r7, #20]
 8039b64:	440b      	add	r3, r1
 8039b66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8039b6a:	4619      	mov	r1, r3
 8039b6c:	4b81      	ldr	r3, [pc, #516]	; (8039d74 <USB_EP0StartXfer+0x2b4>)
 8039b6e:	4013      	ands	r3, r2
 8039b70:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8039b72:	693b      	ldr	r3, [r7, #16]
 8039b74:	015a      	lsls	r2, r3, #5
 8039b76:	697b      	ldr	r3, [r7, #20]
 8039b78:	4413      	add	r3, r2
 8039b7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8039b7e:	691a      	ldr	r2, [r3, #16]
 8039b80:	693b      	ldr	r3, [r7, #16]
 8039b82:	0159      	lsls	r1, r3, #5
 8039b84:	697b      	ldr	r3, [r7, #20]
 8039b86:	440b      	add	r3, r1
 8039b88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8039b8c:	4619      	mov	r1, r3
 8039b8e:	4b78      	ldr	r3, [pc, #480]	; (8039d70 <USB_EP0StartXfer+0x2b0>)
 8039b90:	4013      	ands	r3, r2
 8039b92:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8039b94:	68bb      	ldr	r3, [r7, #8]
 8039b96:	699a      	ldr	r2, [r3, #24]
 8039b98:	68bb      	ldr	r3, [r7, #8]
 8039b9a:	68db      	ldr	r3, [r3, #12]
 8039b9c:	429a      	cmp	r2, r3
 8039b9e:	d903      	bls.n	8039ba8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8039ba0:	68bb      	ldr	r3, [r7, #8]
 8039ba2:	68da      	ldr	r2, [r3, #12]
 8039ba4:	68bb      	ldr	r3, [r7, #8]
 8039ba6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8039ba8:	693b      	ldr	r3, [r7, #16]
 8039baa:	015a      	lsls	r2, r3, #5
 8039bac:	697b      	ldr	r3, [r7, #20]
 8039bae:	4413      	add	r3, r2
 8039bb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8039bb4:	691b      	ldr	r3, [r3, #16]
 8039bb6:	693a      	ldr	r2, [r7, #16]
 8039bb8:	0151      	lsls	r1, r2, #5
 8039bba:	697a      	ldr	r2, [r7, #20]
 8039bbc:	440a      	add	r2, r1
 8039bbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8039bc2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8039bc6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8039bc8:	693b      	ldr	r3, [r7, #16]
 8039bca:	015a      	lsls	r2, r3, #5
 8039bcc:	697b      	ldr	r3, [r7, #20]
 8039bce:	4413      	add	r3, r2
 8039bd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8039bd4:	691a      	ldr	r2, [r3, #16]
 8039bd6:	68bb      	ldr	r3, [r7, #8]
 8039bd8:	699b      	ldr	r3, [r3, #24]
 8039bda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8039bde:	6939      	ldr	r1, [r7, #16]
 8039be0:	0148      	lsls	r0, r1, #5
 8039be2:	6979      	ldr	r1, [r7, #20]
 8039be4:	4401      	add	r1, r0
 8039be6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8039bea:	4313      	orrs	r3, r2
 8039bec:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8039bee:	79fb      	ldrb	r3, [r7, #7]
 8039bf0:	2b01      	cmp	r3, #1
 8039bf2:	d11e      	bne.n	8039c32 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8039bf4:	68bb      	ldr	r3, [r7, #8]
 8039bf6:	695b      	ldr	r3, [r3, #20]
 8039bf8:	2b00      	cmp	r3, #0
 8039bfa:	d009      	beq.n	8039c10 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8039bfc:	693b      	ldr	r3, [r7, #16]
 8039bfe:	015a      	lsls	r2, r3, #5
 8039c00:	697b      	ldr	r3, [r7, #20]
 8039c02:	4413      	add	r3, r2
 8039c04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8039c08:	461a      	mov	r2, r3
 8039c0a:	68bb      	ldr	r3, [r7, #8]
 8039c0c:	695b      	ldr	r3, [r3, #20]
 8039c0e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8039c10:	693b      	ldr	r3, [r7, #16]
 8039c12:	015a      	lsls	r2, r3, #5
 8039c14:	697b      	ldr	r3, [r7, #20]
 8039c16:	4413      	add	r3, r2
 8039c18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8039c1c:	681b      	ldr	r3, [r3, #0]
 8039c1e:	693a      	ldr	r2, [r7, #16]
 8039c20:	0151      	lsls	r1, r2, #5
 8039c22:	697a      	ldr	r2, [r7, #20]
 8039c24:	440a      	add	r2, r1
 8039c26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8039c2a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8039c2e:	6013      	str	r3, [r2, #0]
 8039c30:	e097      	b.n	8039d62 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8039c32:	693b      	ldr	r3, [r7, #16]
 8039c34:	015a      	lsls	r2, r3, #5
 8039c36:	697b      	ldr	r3, [r7, #20]
 8039c38:	4413      	add	r3, r2
 8039c3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8039c3e:	681b      	ldr	r3, [r3, #0]
 8039c40:	693a      	ldr	r2, [r7, #16]
 8039c42:	0151      	lsls	r1, r2, #5
 8039c44:	697a      	ldr	r2, [r7, #20]
 8039c46:	440a      	add	r2, r1
 8039c48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8039c4c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8039c50:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8039c52:	68bb      	ldr	r3, [r7, #8]
 8039c54:	699b      	ldr	r3, [r3, #24]
 8039c56:	2b00      	cmp	r3, #0
 8039c58:	f000 8083 	beq.w	8039d62 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8039c5c:	697b      	ldr	r3, [r7, #20]
 8039c5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8039c62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8039c64:	68bb      	ldr	r3, [r7, #8]
 8039c66:	781b      	ldrb	r3, [r3, #0]
 8039c68:	f003 030f 	and.w	r3, r3, #15
 8039c6c:	2101      	movs	r1, #1
 8039c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8039c72:	6979      	ldr	r1, [r7, #20]
 8039c74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8039c78:	4313      	orrs	r3, r2
 8039c7a:	634b      	str	r3, [r1, #52]	; 0x34
 8039c7c:	e071      	b.n	8039d62 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8039c7e:	693b      	ldr	r3, [r7, #16]
 8039c80:	015a      	lsls	r2, r3, #5
 8039c82:	697b      	ldr	r3, [r7, #20]
 8039c84:	4413      	add	r3, r2
 8039c86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8039c8a:	691a      	ldr	r2, [r3, #16]
 8039c8c:	693b      	ldr	r3, [r7, #16]
 8039c8e:	0159      	lsls	r1, r3, #5
 8039c90:	697b      	ldr	r3, [r7, #20]
 8039c92:	440b      	add	r3, r1
 8039c94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8039c98:	4619      	mov	r1, r3
 8039c9a:	4b36      	ldr	r3, [pc, #216]	; (8039d74 <USB_EP0StartXfer+0x2b4>)
 8039c9c:	4013      	ands	r3, r2
 8039c9e:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8039ca0:	693b      	ldr	r3, [r7, #16]
 8039ca2:	015a      	lsls	r2, r3, #5
 8039ca4:	697b      	ldr	r3, [r7, #20]
 8039ca6:	4413      	add	r3, r2
 8039ca8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8039cac:	691a      	ldr	r2, [r3, #16]
 8039cae:	693b      	ldr	r3, [r7, #16]
 8039cb0:	0159      	lsls	r1, r3, #5
 8039cb2:	697b      	ldr	r3, [r7, #20]
 8039cb4:	440b      	add	r3, r1
 8039cb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8039cba:	4619      	mov	r1, r3
 8039cbc:	4b2c      	ldr	r3, [pc, #176]	; (8039d70 <USB_EP0StartXfer+0x2b0>)
 8039cbe:	4013      	ands	r3, r2
 8039cc0:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8039cc2:	68bb      	ldr	r3, [r7, #8]
 8039cc4:	699b      	ldr	r3, [r3, #24]
 8039cc6:	2b00      	cmp	r3, #0
 8039cc8:	d003      	beq.n	8039cd2 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8039cca:	68bb      	ldr	r3, [r7, #8]
 8039ccc:	68da      	ldr	r2, [r3, #12]
 8039cce:	68bb      	ldr	r3, [r7, #8]
 8039cd0:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8039cd2:	68bb      	ldr	r3, [r7, #8]
 8039cd4:	68da      	ldr	r2, [r3, #12]
 8039cd6:	68bb      	ldr	r3, [r7, #8]
 8039cd8:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8039cda:	693b      	ldr	r3, [r7, #16]
 8039cdc:	015a      	lsls	r2, r3, #5
 8039cde:	697b      	ldr	r3, [r7, #20]
 8039ce0:	4413      	add	r3, r2
 8039ce2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8039ce6:	691b      	ldr	r3, [r3, #16]
 8039ce8:	693a      	ldr	r2, [r7, #16]
 8039cea:	0151      	lsls	r1, r2, #5
 8039cec:	697a      	ldr	r2, [r7, #20]
 8039cee:	440a      	add	r2, r1
 8039cf0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8039cf4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8039cf8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8039cfa:	693b      	ldr	r3, [r7, #16]
 8039cfc:	015a      	lsls	r2, r3, #5
 8039cfe:	697b      	ldr	r3, [r7, #20]
 8039d00:	4413      	add	r3, r2
 8039d02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8039d06:	691a      	ldr	r2, [r3, #16]
 8039d08:	68bb      	ldr	r3, [r7, #8]
 8039d0a:	69db      	ldr	r3, [r3, #28]
 8039d0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8039d10:	6939      	ldr	r1, [r7, #16]
 8039d12:	0148      	lsls	r0, r1, #5
 8039d14:	6979      	ldr	r1, [r7, #20]
 8039d16:	4401      	add	r1, r0
 8039d18:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8039d1c:	4313      	orrs	r3, r2
 8039d1e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8039d20:	79fb      	ldrb	r3, [r7, #7]
 8039d22:	2b01      	cmp	r3, #1
 8039d24:	d10d      	bne.n	8039d42 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8039d26:	68bb      	ldr	r3, [r7, #8]
 8039d28:	691b      	ldr	r3, [r3, #16]
 8039d2a:	2b00      	cmp	r3, #0
 8039d2c:	d009      	beq.n	8039d42 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8039d2e:	68bb      	ldr	r3, [r7, #8]
 8039d30:	6919      	ldr	r1, [r3, #16]
 8039d32:	693b      	ldr	r3, [r7, #16]
 8039d34:	015a      	lsls	r2, r3, #5
 8039d36:	697b      	ldr	r3, [r7, #20]
 8039d38:	4413      	add	r3, r2
 8039d3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8039d3e:	460a      	mov	r2, r1
 8039d40:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8039d42:	693b      	ldr	r3, [r7, #16]
 8039d44:	015a      	lsls	r2, r3, #5
 8039d46:	697b      	ldr	r3, [r7, #20]
 8039d48:	4413      	add	r3, r2
 8039d4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8039d4e:	681b      	ldr	r3, [r3, #0]
 8039d50:	693a      	ldr	r2, [r7, #16]
 8039d52:	0151      	lsls	r1, r2, #5
 8039d54:	697a      	ldr	r2, [r7, #20]
 8039d56:	440a      	add	r2, r1
 8039d58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8039d5c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8039d60:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8039d62:	2300      	movs	r3, #0
}
 8039d64:	4618      	mov	r0, r3
 8039d66:	371c      	adds	r7, #28
 8039d68:	46bd      	mov	sp, r7
 8039d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039d6e:	4770      	bx	lr
 8039d70:	e007ffff 	.word	0xe007ffff
 8039d74:	fff80000 	.word	0xfff80000

08039d78 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8039d78:	b480      	push	{r7}
 8039d7a:	b087      	sub	sp, #28
 8039d7c:	af00      	add	r7, sp, #0
 8039d7e:	6078      	str	r0, [r7, #4]
 8039d80:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8039d82:	2300      	movs	r3, #0
 8039d84:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8039d86:	2300      	movs	r3, #0
 8039d88:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8039d8a:	687b      	ldr	r3, [r7, #4]
 8039d8c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8039d8e:	683b      	ldr	r3, [r7, #0]
 8039d90:	785b      	ldrb	r3, [r3, #1]
 8039d92:	2b01      	cmp	r3, #1
 8039d94:	d14a      	bne.n	8039e2c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8039d96:	683b      	ldr	r3, [r7, #0]
 8039d98:	781b      	ldrb	r3, [r3, #0]
 8039d9a:	015a      	lsls	r2, r3, #5
 8039d9c:	693b      	ldr	r3, [r7, #16]
 8039d9e:	4413      	add	r3, r2
 8039da0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8039da4:	681b      	ldr	r3, [r3, #0]
 8039da6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8039daa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8039dae:	f040 8086 	bne.w	8039ebe <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8039db2:	683b      	ldr	r3, [r7, #0]
 8039db4:	781b      	ldrb	r3, [r3, #0]
 8039db6:	015a      	lsls	r2, r3, #5
 8039db8:	693b      	ldr	r3, [r7, #16]
 8039dba:	4413      	add	r3, r2
 8039dbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8039dc0:	681b      	ldr	r3, [r3, #0]
 8039dc2:	683a      	ldr	r2, [r7, #0]
 8039dc4:	7812      	ldrb	r2, [r2, #0]
 8039dc6:	0151      	lsls	r1, r2, #5
 8039dc8:	693a      	ldr	r2, [r7, #16]
 8039dca:	440a      	add	r2, r1
 8039dcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8039dd0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8039dd4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8039dd6:	683b      	ldr	r3, [r7, #0]
 8039dd8:	781b      	ldrb	r3, [r3, #0]
 8039dda:	015a      	lsls	r2, r3, #5
 8039ddc:	693b      	ldr	r3, [r7, #16]
 8039dde:	4413      	add	r3, r2
 8039de0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8039de4:	681b      	ldr	r3, [r3, #0]
 8039de6:	683a      	ldr	r2, [r7, #0]
 8039de8:	7812      	ldrb	r2, [r2, #0]
 8039dea:	0151      	lsls	r1, r2, #5
 8039dec:	693a      	ldr	r2, [r7, #16]
 8039dee:	440a      	add	r2, r1
 8039df0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8039df4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8039df8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8039dfa:	68fb      	ldr	r3, [r7, #12]
 8039dfc:	3301      	adds	r3, #1
 8039dfe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8039e00:	68fb      	ldr	r3, [r7, #12]
 8039e02:	f242 7210 	movw	r2, #10000	; 0x2710
 8039e06:	4293      	cmp	r3, r2
 8039e08:	d902      	bls.n	8039e10 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8039e0a:	2301      	movs	r3, #1
 8039e0c:	75fb      	strb	r3, [r7, #23]
          break;
 8039e0e:	e056      	b.n	8039ebe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8039e10:	683b      	ldr	r3, [r7, #0]
 8039e12:	781b      	ldrb	r3, [r3, #0]
 8039e14:	015a      	lsls	r2, r3, #5
 8039e16:	693b      	ldr	r3, [r7, #16]
 8039e18:	4413      	add	r3, r2
 8039e1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8039e1e:	681b      	ldr	r3, [r3, #0]
 8039e20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8039e24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8039e28:	d0e7      	beq.n	8039dfa <USB_EPStopXfer+0x82>
 8039e2a:	e048      	b.n	8039ebe <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8039e2c:	683b      	ldr	r3, [r7, #0]
 8039e2e:	781b      	ldrb	r3, [r3, #0]
 8039e30:	015a      	lsls	r2, r3, #5
 8039e32:	693b      	ldr	r3, [r7, #16]
 8039e34:	4413      	add	r3, r2
 8039e36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8039e3a:	681b      	ldr	r3, [r3, #0]
 8039e3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8039e40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8039e44:	d13b      	bne.n	8039ebe <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8039e46:	683b      	ldr	r3, [r7, #0]
 8039e48:	781b      	ldrb	r3, [r3, #0]
 8039e4a:	015a      	lsls	r2, r3, #5
 8039e4c:	693b      	ldr	r3, [r7, #16]
 8039e4e:	4413      	add	r3, r2
 8039e50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8039e54:	681b      	ldr	r3, [r3, #0]
 8039e56:	683a      	ldr	r2, [r7, #0]
 8039e58:	7812      	ldrb	r2, [r2, #0]
 8039e5a:	0151      	lsls	r1, r2, #5
 8039e5c:	693a      	ldr	r2, [r7, #16]
 8039e5e:	440a      	add	r2, r1
 8039e60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8039e64:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8039e68:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8039e6a:	683b      	ldr	r3, [r7, #0]
 8039e6c:	781b      	ldrb	r3, [r3, #0]
 8039e6e:	015a      	lsls	r2, r3, #5
 8039e70:	693b      	ldr	r3, [r7, #16]
 8039e72:	4413      	add	r3, r2
 8039e74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8039e78:	681b      	ldr	r3, [r3, #0]
 8039e7a:	683a      	ldr	r2, [r7, #0]
 8039e7c:	7812      	ldrb	r2, [r2, #0]
 8039e7e:	0151      	lsls	r1, r2, #5
 8039e80:	693a      	ldr	r2, [r7, #16]
 8039e82:	440a      	add	r2, r1
 8039e84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8039e88:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8039e8c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8039e8e:	68fb      	ldr	r3, [r7, #12]
 8039e90:	3301      	adds	r3, #1
 8039e92:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8039e94:	68fb      	ldr	r3, [r7, #12]
 8039e96:	f242 7210 	movw	r2, #10000	; 0x2710
 8039e9a:	4293      	cmp	r3, r2
 8039e9c:	d902      	bls.n	8039ea4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8039e9e:	2301      	movs	r3, #1
 8039ea0:	75fb      	strb	r3, [r7, #23]
          break;
 8039ea2:	e00c      	b.n	8039ebe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8039ea4:	683b      	ldr	r3, [r7, #0]
 8039ea6:	781b      	ldrb	r3, [r3, #0]
 8039ea8:	015a      	lsls	r2, r3, #5
 8039eaa:	693b      	ldr	r3, [r7, #16]
 8039eac:	4413      	add	r3, r2
 8039eae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8039eb2:	681b      	ldr	r3, [r3, #0]
 8039eb4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8039eb8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8039ebc:	d0e7      	beq.n	8039e8e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8039ebe:	7dfb      	ldrb	r3, [r7, #23]
}
 8039ec0:	4618      	mov	r0, r3
 8039ec2:	371c      	adds	r7, #28
 8039ec4:	46bd      	mov	sp, r7
 8039ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039eca:	4770      	bx	lr

08039ecc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8039ecc:	b480      	push	{r7}
 8039ece:	b089      	sub	sp, #36	; 0x24
 8039ed0:	af00      	add	r7, sp, #0
 8039ed2:	60f8      	str	r0, [r7, #12]
 8039ed4:	60b9      	str	r1, [r7, #8]
 8039ed6:	4611      	mov	r1, r2
 8039ed8:	461a      	mov	r2, r3
 8039eda:	460b      	mov	r3, r1
 8039edc:	71fb      	strb	r3, [r7, #7]
 8039ede:	4613      	mov	r3, r2
 8039ee0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8039ee2:	68fb      	ldr	r3, [r7, #12]
 8039ee4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8039ee6:	68bb      	ldr	r3, [r7, #8]
 8039ee8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8039eea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8039eee:	2b00      	cmp	r3, #0
 8039ef0:	d123      	bne.n	8039f3a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8039ef2:	88bb      	ldrh	r3, [r7, #4]
 8039ef4:	3303      	adds	r3, #3
 8039ef6:	089b      	lsrs	r3, r3, #2
 8039ef8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8039efa:	2300      	movs	r3, #0
 8039efc:	61bb      	str	r3, [r7, #24]
 8039efe:	e018      	b.n	8039f32 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8039f00:	79fb      	ldrb	r3, [r7, #7]
 8039f02:	031a      	lsls	r2, r3, #12
 8039f04:	697b      	ldr	r3, [r7, #20]
 8039f06:	4413      	add	r3, r2
 8039f08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8039f0c:	461a      	mov	r2, r3
 8039f0e:	69fb      	ldr	r3, [r7, #28]
 8039f10:	681b      	ldr	r3, [r3, #0]
 8039f12:	6013      	str	r3, [r2, #0]
      pSrc++;
 8039f14:	69fb      	ldr	r3, [r7, #28]
 8039f16:	3301      	adds	r3, #1
 8039f18:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8039f1a:	69fb      	ldr	r3, [r7, #28]
 8039f1c:	3301      	adds	r3, #1
 8039f1e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8039f20:	69fb      	ldr	r3, [r7, #28]
 8039f22:	3301      	adds	r3, #1
 8039f24:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8039f26:	69fb      	ldr	r3, [r7, #28]
 8039f28:	3301      	adds	r3, #1
 8039f2a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8039f2c:	69bb      	ldr	r3, [r7, #24]
 8039f2e:	3301      	adds	r3, #1
 8039f30:	61bb      	str	r3, [r7, #24]
 8039f32:	69ba      	ldr	r2, [r7, #24]
 8039f34:	693b      	ldr	r3, [r7, #16]
 8039f36:	429a      	cmp	r2, r3
 8039f38:	d3e2      	bcc.n	8039f00 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8039f3a:	2300      	movs	r3, #0
}
 8039f3c:	4618      	mov	r0, r3
 8039f3e:	3724      	adds	r7, #36	; 0x24
 8039f40:	46bd      	mov	sp, r7
 8039f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039f46:	4770      	bx	lr

08039f48 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8039f48:	b480      	push	{r7}
 8039f4a:	b08b      	sub	sp, #44	; 0x2c
 8039f4c:	af00      	add	r7, sp, #0
 8039f4e:	60f8      	str	r0, [r7, #12]
 8039f50:	60b9      	str	r1, [r7, #8]
 8039f52:	4613      	mov	r3, r2
 8039f54:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8039f56:	68fb      	ldr	r3, [r7, #12]
 8039f58:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8039f5a:	68bb      	ldr	r3, [r7, #8]
 8039f5c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8039f5e:	88fb      	ldrh	r3, [r7, #6]
 8039f60:	089b      	lsrs	r3, r3, #2
 8039f62:	b29b      	uxth	r3, r3
 8039f64:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8039f66:	88fb      	ldrh	r3, [r7, #6]
 8039f68:	f003 0303 	and.w	r3, r3, #3
 8039f6c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8039f6e:	2300      	movs	r3, #0
 8039f70:	623b      	str	r3, [r7, #32]
 8039f72:	e014      	b.n	8039f9e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8039f74:	69bb      	ldr	r3, [r7, #24]
 8039f76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8039f7a:	681a      	ldr	r2, [r3, #0]
 8039f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8039f7e:	601a      	str	r2, [r3, #0]
    pDest++;
 8039f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8039f82:	3301      	adds	r3, #1
 8039f84:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8039f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8039f88:	3301      	adds	r3, #1
 8039f8a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8039f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8039f8e:	3301      	adds	r3, #1
 8039f90:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8039f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8039f94:	3301      	adds	r3, #1
 8039f96:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8039f98:	6a3b      	ldr	r3, [r7, #32]
 8039f9a:	3301      	adds	r3, #1
 8039f9c:	623b      	str	r3, [r7, #32]
 8039f9e:	6a3a      	ldr	r2, [r7, #32]
 8039fa0:	697b      	ldr	r3, [r7, #20]
 8039fa2:	429a      	cmp	r2, r3
 8039fa4:	d3e6      	bcc.n	8039f74 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8039fa6:	8bfb      	ldrh	r3, [r7, #30]
 8039fa8:	2b00      	cmp	r3, #0
 8039faa:	d01e      	beq.n	8039fea <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8039fac:	2300      	movs	r3, #0
 8039fae:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8039fb0:	69bb      	ldr	r3, [r7, #24]
 8039fb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8039fb6:	461a      	mov	r2, r3
 8039fb8:	f107 0310 	add.w	r3, r7, #16
 8039fbc:	6812      	ldr	r2, [r2, #0]
 8039fbe:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8039fc0:	693a      	ldr	r2, [r7, #16]
 8039fc2:	6a3b      	ldr	r3, [r7, #32]
 8039fc4:	b2db      	uxtb	r3, r3
 8039fc6:	00db      	lsls	r3, r3, #3
 8039fc8:	fa22 f303 	lsr.w	r3, r2, r3
 8039fcc:	b2da      	uxtb	r2, r3
 8039fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8039fd0:	701a      	strb	r2, [r3, #0]
      i++;
 8039fd2:	6a3b      	ldr	r3, [r7, #32]
 8039fd4:	3301      	adds	r3, #1
 8039fd6:	623b      	str	r3, [r7, #32]
      pDest++;
 8039fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8039fda:	3301      	adds	r3, #1
 8039fdc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8039fde:	8bfb      	ldrh	r3, [r7, #30]
 8039fe0:	3b01      	subs	r3, #1
 8039fe2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8039fe4:	8bfb      	ldrh	r3, [r7, #30]
 8039fe6:	2b00      	cmp	r3, #0
 8039fe8:	d1ea      	bne.n	8039fc0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8039fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8039fec:	4618      	mov	r0, r3
 8039fee:	372c      	adds	r7, #44	; 0x2c
 8039ff0:	46bd      	mov	sp, r7
 8039ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039ff6:	4770      	bx	lr

08039ff8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8039ff8:	b480      	push	{r7}
 8039ffa:	b085      	sub	sp, #20
 8039ffc:	af00      	add	r7, sp, #0
 8039ffe:	6078      	str	r0, [r7, #4]
 803a000:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803a002:	687b      	ldr	r3, [r7, #4]
 803a004:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 803a006:	683b      	ldr	r3, [r7, #0]
 803a008:	781b      	ldrb	r3, [r3, #0]
 803a00a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 803a00c:	683b      	ldr	r3, [r7, #0]
 803a00e:	785b      	ldrb	r3, [r3, #1]
 803a010:	2b01      	cmp	r3, #1
 803a012:	d12c      	bne.n	803a06e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 803a014:	68bb      	ldr	r3, [r7, #8]
 803a016:	015a      	lsls	r2, r3, #5
 803a018:	68fb      	ldr	r3, [r7, #12]
 803a01a:	4413      	add	r3, r2
 803a01c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803a020:	681b      	ldr	r3, [r3, #0]
 803a022:	2b00      	cmp	r3, #0
 803a024:	db12      	blt.n	803a04c <USB_EPSetStall+0x54>
 803a026:	68bb      	ldr	r3, [r7, #8]
 803a028:	2b00      	cmp	r3, #0
 803a02a:	d00f      	beq.n	803a04c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 803a02c:	68bb      	ldr	r3, [r7, #8]
 803a02e:	015a      	lsls	r2, r3, #5
 803a030:	68fb      	ldr	r3, [r7, #12]
 803a032:	4413      	add	r3, r2
 803a034:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803a038:	681b      	ldr	r3, [r3, #0]
 803a03a:	68ba      	ldr	r2, [r7, #8]
 803a03c:	0151      	lsls	r1, r2, #5
 803a03e:	68fa      	ldr	r2, [r7, #12]
 803a040:	440a      	add	r2, r1
 803a042:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 803a046:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 803a04a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 803a04c:	68bb      	ldr	r3, [r7, #8]
 803a04e:	015a      	lsls	r2, r3, #5
 803a050:	68fb      	ldr	r3, [r7, #12]
 803a052:	4413      	add	r3, r2
 803a054:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803a058:	681b      	ldr	r3, [r3, #0]
 803a05a:	68ba      	ldr	r2, [r7, #8]
 803a05c:	0151      	lsls	r1, r2, #5
 803a05e:	68fa      	ldr	r2, [r7, #12]
 803a060:	440a      	add	r2, r1
 803a062:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 803a066:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 803a06a:	6013      	str	r3, [r2, #0]
 803a06c:	e02b      	b.n	803a0c6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 803a06e:	68bb      	ldr	r3, [r7, #8]
 803a070:	015a      	lsls	r2, r3, #5
 803a072:	68fb      	ldr	r3, [r7, #12]
 803a074:	4413      	add	r3, r2
 803a076:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803a07a:	681b      	ldr	r3, [r3, #0]
 803a07c:	2b00      	cmp	r3, #0
 803a07e:	db12      	blt.n	803a0a6 <USB_EPSetStall+0xae>
 803a080:	68bb      	ldr	r3, [r7, #8]
 803a082:	2b00      	cmp	r3, #0
 803a084:	d00f      	beq.n	803a0a6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 803a086:	68bb      	ldr	r3, [r7, #8]
 803a088:	015a      	lsls	r2, r3, #5
 803a08a:	68fb      	ldr	r3, [r7, #12]
 803a08c:	4413      	add	r3, r2
 803a08e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803a092:	681b      	ldr	r3, [r3, #0]
 803a094:	68ba      	ldr	r2, [r7, #8]
 803a096:	0151      	lsls	r1, r2, #5
 803a098:	68fa      	ldr	r2, [r7, #12]
 803a09a:	440a      	add	r2, r1
 803a09c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803a0a0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 803a0a4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 803a0a6:	68bb      	ldr	r3, [r7, #8]
 803a0a8:	015a      	lsls	r2, r3, #5
 803a0aa:	68fb      	ldr	r3, [r7, #12]
 803a0ac:	4413      	add	r3, r2
 803a0ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803a0b2:	681b      	ldr	r3, [r3, #0]
 803a0b4:	68ba      	ldr	r2, [r7, #8]
 803a0b6:	0151      	lsls	r1, r2, #5
 803a0b8:	68fa      	ldr	r2, [r7, #12]
 803a0ba:	440a      	add	r2, r1
 803a0bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803a0c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 803a0c4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 803a0c6:	2300      	movs	r3, #0
}
 803a0c8:	4618      	mov	r0, r3
 803a0ca:	3714      	adds	r7, #20
 803a0cc:	46bd      	mov	sp, r7
 803a0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a0d2:	4770      	bx	lr

0803a0d4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 803a0d4:	b480      	push	{r7}
 803a0d6:	b085      	sub	sp, #20
 803a0d8:	af00      	add	r7, sp, #0
 803a0da:	6078      	str	r0, [r7, #4]
 803a0dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803a0de:	687b      	ldr	r3, [r7, #4]
 803a0e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 803a0e2:	683b      	ldr	r3, [r7, #0]
 803a0e4:	781b      	ldrb	r3, [r3, #0]
 803a0e6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 803a0e8:	683b      	ldr	r3, [r7, #0]
 803a0ea:	785b      	ldrb	r3, [r3, #1]
 803a0ec:	2b01      	cmp	r3, #1
 803a0ee:	d128      	bne.n	803a142 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 803a0f0:	68bb      	ldr	r3, [r7, #8]
 803a0f2:	015a      	lsls	r2, r3, #5
 803a0f4:	68fb      	ldr	r3, [r7, #12]
 803a0f6:	4413      	add	r3, r2
 803a0f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803a0fc:	681b      	ldr	r3, [r3, #0]
 803a0fe:	68ba      	ldr	r2, [r7, #8]
 803a100:	0151      	lsls	r1, r2, #5
 803a102:	68fa      	ldr	r2, [r7, #12]
 803a104:	440a      	add	r2, r1
 803a106:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 803a10a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 803a10e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 803a110:	683b      	ldr	r3, [r7, #0]
 803a112:	791b      	ldrb	r3, [r3, #4]
 803a114:	2b03      	cmp	r3, #3
 803a116:	d003      	beq.n	803a120 <USB_EPClearStall+0x4c>
 803a118:	683b      	ldr	r3, [r7, #0]
 803a11a:	791b      	ldrb	r3, [r3, #4]
 803a11c:	2b02      	cmp	r3, #2
 803a11e:	d138      	bne.n	803a192 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 803a120:	68bb      	ldr	r3, [r7, #8]
 803a122:	015a      	lsls	r2, r3, #5
 803a124:	68fb      	ldr	r3, [r7, #12]
 803a126:	4413      	add	r3, r2
 803a128:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803a12c:	681b      	ldr	r3, [r3, #0]
 803a12e:	68ba      	ldr	r2, [r7, #8]
 803a130:	0151      	lsls	r1, r2, #5
 803a132:	68fa      	ldr	r2, [r7, #12]
 803a134:	440a      	add	r2, r1
 803a136:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 803a13a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 803a13e:	6013      	str	r3, [r2, #0]
 803a140:	e027      	b.n	803a192 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 803a142:	68bb      	ldr	r3, [r7, #8]
 803a144:	015a      	lsls	r2, r3, #5
 803a146:	68fb      	ldr	r3, [r7, #12]
 803a148:	4413      	add	r3, r2
 803a14a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803a14e:	681b      	ldr	r3, [r3, #0]
 803a150:	68ba      	ldr	r2, [r7, #8]
 803a152:	0151      	lsls	r1, r2, #5
 803a154:	68fa      	ldr	r2, [r7, #12]
 803a156:	440a      	add	r2, r1
 803a158:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803a15c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 803a160:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 803a162:	683b      	ldr	r3, [r7, #0]
 803a164:	791b      	ldrb	r3, [r3, #4]
 803a166:	2b03      	cmp	r3, #3
 803a168:	d003      	beq.n	803a172 <USB_EPClearStall+0x9e>
 803a16a:	683b      	ldr	r3, [r7, #0]
 803a16c:	791b      	ldrb	r3, [r3, #4]
 803a16e:	2b02      	cmp	r3, #2
 803a170:	d10f      	bne.n	803a192 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 803a172:	68bb      	ldr	r3, [r7, #8]
 803a174:	015a      	lsls	r2, r3, #5
 803a176:	68fb      	ldr	r3, [r7, #12]
 803a178:	4413      	add	r3, r2
 803a17a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803a17e:	681b      	ldr	r3, [r3, #0]
 803a180:	68ba      	ldr	r2, [r7, #8]
 803a182:	0151      	lsls	r1, r2, #5
 803a184:	68fa      	ldr	r2, [r7, #12]
 803a186:	440a      	add	r2, r1
 803a188:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803a18c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 803a190:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 803a192:	2300      	movs	r3, #0
}
 803a194:	4618      	mov	r0, r3
 803a196:	3714      	adds	r7, #20
 803a198:	46bd      	mov	sp, r7
 803a19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a19e:	4770      	bx	lr

0803a1a0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 803a1a0:	b480      	push	{r7}
 803a1a2:	b085      	sub	sp, #20
 803a1a4:	af00      	add	r7, sp, #0
 803a1a6:	6078      	str	r0, [r7, #4]
 803a1a8:	460b      	mov	r3, r1
 803a1aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803a1ac:	687b      	ldr	r3, [r7, #4]
 803a1ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 803a1b0:	68fb      	ldr	r3, [r7, #12]
 803a1b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803a1b6:	681b      	ldr	r3, [r3, #0]
 803a1b8:	68fa      	ldr	r2, [r7, #12]
 803a1ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 803a1be:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 803a1c2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 803a1c4:	68fb      	ldr	r3, [r7, #12]
 803a1c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803a1ca:	681a      	ldr	r2, [r3, #0]
 803a1cc:	78fb      	ldrb	r3, [r7, #3]
 803a1ce:	011b      	lsls	r3, r3, #4
 803a1d0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 803a1d4:	68f9      	ldr	r1, [r7, #12]
 803a1d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 803a1da:	4313      	orrs	r3, r2
 803a1dc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 803a1de:	2300      	movs	r3, #0
}
 803a1e0:	4618      	mov	r0, r3
 803a1e2:	3714      	adds	r7, #20
 803a1e4:	46bd      	mov	sp, r7
 803a1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a1ea:	4770      	bx	lr

0803a1ec <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 803a1ec:	b480      	push	{r7}
 803a1ee:	b085      	sub	sp, #20
 803a1f0:	af00      	add	r7, sp, #0
 803a1f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803a1f4:	687b      	ldr	r3, [r7, #4]
 803a1f6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 803a1f8:	68fb      	ldr	r3, [r7, #12]
 803a1fa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 803a1fe:	681b      	ldr	r3, [r3, #0]
 803a200:	68fa      	ldr	r2, [r7, #12]
 803a202:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 803a206:	f023 0303 	bic.w	r3, r3, #3
 803a20a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 803a20c:	68fb      	ldr	r3, [r7, #12]
 803a20e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803a212:	685b      	ldr	r3, [r3, #4]
 803a214:	68fa      	ldr	r2, [r7, #12]
 803a216:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 803a21a:	f023 0302 	bic.w	r3, r3, #2
 803a21e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 803a220:	2300      	movs	r3, #0
}
 803a222:	4618      	mov	r0, r3
 803a224:	3714      	adds	r7, #20
 803a226:	46bd      	mov	sp, r7
 803a228:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a22c:	4770      	bx	lr

0803a22e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 803a22e:	b480      	push	{r7}
 803a230:	b085      	sub	sp, #20
 803a232:	af00      	add	r7, sp, #0
 803a234:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803a236:	687b      	ldr	r3, [r7, #4]
 803a238:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 803a23a:	68fb      	ldr	r3, [r7, #12]
 803a23c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 803a240:	681b      	ldr	r3, [r3, #0]
 803a242:	68fa      	ldr	r2, [r7, #12]
 803a244:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 803a248:	f023 0303 	bic.w	r3, r3, #3
 803a24c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 803a24e:	68fb      	ldr	r3, [r7, #12]
 803a250:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803a254:	685b      	ldr	r3, [r3, #4]
 803a256:	68fa      	ldr	r2, [r7, #12]
 803a258:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 803a25c:	f043 0302 	orr.w	r3, r3, #2
 803a260:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 803a262:	2300      	movs	r3, #0
}
 803a264:	4618      	mov	r0, r3
 803a266:	3714      	adds	r7, #20
 803a268:	46bd      	mov	sp, r7
 803a26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a26e:	4770      	bx	lr

0803a270 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 803a270:	b480      	push	{r7}
 803a272:	b085      	sub	sp, #20
 803a274:	af00      	add	r7, sp, #0
 803a276:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 803a278:	687b      	ldr	r3, [r7, #4]
 803a27a:	695b      	ldr	r3, [r3, #20]
 803a27c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 803a27e:	687b      	ldr	r3, [r7, #4]
 803a280:	699b      	ldr	r3, [r3, #24]
 803a282:	68fa      	ldr	r2, [r7, #12]
 803a284:	4013      	ands	r3, r2
 803a286:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 803a288:	68fb      	ldr	r3, [r7, #12]
}
 803a28a:	4618      	mov	r0, r3
 803a28c:	3714      	adds	r7, #20
 803a28e:	46bd      	mov	sp, r7
 803a290:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a294:	4770      	bx	lr

0803a296 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 803a296:	b480      	push	{r7}
 803a298:	b085      	sub	sp, #20
 803a29a:	af00      	add	r7, sp, #0
 803a29c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803a29e:	687b      	ldr	r3, [r7, #4]
 803a2a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 803a2a2:	68fb      	ldr	r3, [r7, #12]
 803a2a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803a2a8:	699b      	ldr	r3, [r3, #24]
 803a2aa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 803a2ac:	68fb      	ldr	r3, [r7, #12]
 803a2ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803a2b2:	69db      	ldr	r3, [r3, #28]
 803a2b4:	68ba      	ldr	r2, [r7, #8]
 803a2b6:	4013      	ands	r3, r2
 803a2b8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 803a2ba:	68bb      	ldr	r3, [r7, #8]
 803a2bc:	0c1b      	lsrs	r3, r3, #16
}
 803a2be:	4618      	mov	r0, r3
 803a2c0:	3714      	adds	r7, #20
 803a2c2:	46bd      	mov	sp, r7
 803a2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a2c8:	4770      	bx	lr

0803a2ca <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 803a2ca:	b480      	push	{r7}
 803a2cc:	b085      	sub	sp, #20
 803a2ce:	af00      	add	r7, sp, #0
 803a2d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803a2d2:	687b      	ldr	r3, [r7, #4]
 803a2d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 803a2d6:	68fb      	ldr	r3, [r7, #12]
 803a2d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803a2dc:	699b      	ldr	r3, [r3, #24]
 803a2de:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 803a2e0:	68fb      	ldr	r3, [r7, #12]
 803a2e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803a2e6:	69db      	ldr	r3, [r3, #28]
 803a2e8:	68ba      	ldr	r2, [r7, #8]
 803a2ea:	4013      	ands	r3, r2
 803a2ec:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 803a2ee:	68bb      	ldr	r3, [r7, #8]
 803a2f0:	b29b      	uxth	r3, r3
}
 803a2f2:	4618      	mov	r0, r3
 803a2f4:	3714      	adds	r7, #20
 803a2f6:	46bd      	mov	sp, r7
 803a2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a2fc:	4770      	bx	lr

0803a2fe <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 803a2fe:	b480      	push	{r7}
 803a300:	b085      	sub	sp, #20
 803a302:	af00      	add	r7, sp, #0
 803a304:	6078      	str	r0, [r7, #4]
 803a306:	460b      	mov	r3, r1
 803a308:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803a30a:	687b      	ldr	r3, [r7, #4]
 803a30c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 803a30e:	78fb      	ldrb	r3, [r7, #3]
 803a310:	015a      	lsls	r2, r3, #5
 803a312:	68fb      	ldr	r3, [r7, #12]
 803a314:	4413      	add	r3, r2
 803a316:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803a31a:	689b      	ldr	r3, [r3, #8]
 803a31c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 803a31e:	68fb      	ldr	r3, [r7, #12]
 803a320:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803a324:	695b      	ldr	r3, [r3, #20]
 803a326:	68ba      	ldr	r2, [r7, #8]
 803a328:	4013      	ands	r3, r2
 803a32a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 803a32c:	68bb      	ldr	r3, [r7, #8]
}
 803a32e:	4618      	mov	r0, r3
 803a330:	3714      	adds	r7, #20
 803a332:	46bd      	mov	sp, r7
 803a334:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a338:	4770      	bx	lr

0803a33a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 803a33a:	b480      	push	{r7}
 803a33c:	b087      	sub	sp, #28
 803a33e:	af00      	add	r7, sp, #0
 803a340:	6078      	str	r0, [r7, #4]
 803a342:	460b      	mov	r3, r1
 803a344:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803a346:	687b      	ldr	r3, [r7, #4]
 803a348:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 803a34a:	697b      	ldr	r3, [r7, #20]
 803a34c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803a350:	691b      	ldr	r3, [r3, #16]
 803a352:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 803a354:	697b      	ldr	r3, [r7, #20]
 803a356:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803a35a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 803a35c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 803a35e:	78fb      	ldrb	r3, [r7, #3]
 803a360:	f003 030f 	and.w	r3, r3, #15
 803a364:	68fa      	ldr	r2, [r7, #12]
 803a366:	fa22 f303 	lsr.w	r3, r2, r3
 803a36a:	01db      	lsls	r3, r3, #7
 803a36c:	b2db      	uxtb	r3, r3
 803a36e:	693a      	ldr	r2, [r7, #16]
 803a370:	4313      	orrs	r3, r2
 803a372:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 803a374:	78fb      	ldrb	r3, [r7, #3]
 803a376:	015a      	lsls	r2, r3, #5
 803a378:	697b      	ldr	r3, [r7, #20]
 803a37a:	4413      	add	r3, r2
 803a37c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803a380:	689b      	ldr	r3, [r3, #8]
 803a382:	693a      	ldr	r2, [r7, #16]
 803a384:	4013      	ands	r3, r2
 803a386:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 803a388:	68bb      	ldr	r3, [r7, #8]
}
 803a38a:	4618      	mov	r0, r3
 803a38c:	371c      	adds	r7, #28
 803a38e:	46bd      	mov	sp, r7
 803a390:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a394:	4770      	bx	lr

0803a396 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 803a396:	b480      	push	{r7}
 803a398:	b083      	sub	sp, #12
 803a39a:	af00      	add	r7, sp, #0
 803a39c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 803a39e:	687b      	ldr	r3, [r7, #4]
 803a3a0:	695b      	ldr	r3, [r3, #20]
 803a3a2:	f003 0301 	and.w	r3, r3, #1
}
 803a3a6:	4618      	mov	r0, r3
 803a3a8:	370c      	adds	r7, #12
 803a3aa:	46bd      	mov	sp, r7
 803a3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a3b0:	4770      	bx	lr
	...

0803a3b4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 803a3b4:	b480      	push	{r7}
 803a3b6:	b085      	sub	sp, #20
 803a3b8:	af00      	add	r7, sp, #0
 803a3ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803a3bc:	687b      	ldr	r3, [r7, #4]
 803a3be:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 803a3c0:	68fb      	ldr	r3, [r7, #12]
 803a3c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803a3c6:	681a      	ldr	r2, [r3, #0]
 803a3c8:	68fb      	ldr	r3, [r7, #12]
 803a3ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803a3ce:	4619      	mov	r1, r3
 803a3d0:	4b09      	ldr	r3, [pc, #36]	; (803a3f8 <USB_ActivateSetup+0x44>)
 803a3d2:	4013      	ands	r3, r2
 803a3d4:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 803a3d6:	68fb      	ldr	r3, [r7, #12]
 803a3d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803a3dc:	685b      	ldr	r3, [r3, #4]
 803a3de:	68fa      	ldr	r2, [r7, #12]
 803a3e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 803a3e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 803a3e8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 803a3ea:	2300      	movs	r3, #0
}
 803a3ec:	4618      	mov	r0, r3
 803a3ee:	3714      	adds	r7, #20
 803a3f0:	46bd      	mov	sp, r7
 803a3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a3f6:	4770      	bx	lr
 803a3f8:	fffff800 	.word	0xfffff800

0803a3fc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 803a3fc:	b480      	push	{r7}
 803a3fe:	b087      	sub	sp, #28
 803a400:	af00      	add	r7, sp, #0
 803a402:	60f8      	str	r0, [r7, #12]
 803a404:	460b      	mov	r3, r1
 803a406:	607a      	str	r2, [r7, #4]
 803a408:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803a40a:	68fb      	ldr	r3, [r7, #12]
 803a40c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 803a40e:	68fb      	ldr	r3, [r7, #12]
 803a410:	333c      	adds	r3, #60	; 0x3c
 803a412:	3304      	adds	r3, #4
 803a414:	681b      	ldr	r3, [r3, #0]
 803a416:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 803a418:	693b      	ldr	r3, [r7, #16]
 803a41a:	4a26      	ldr	r2, [pc, #152]	; (803a4b4 <USB_EP0_OutStart+0xb8>)
 803a41c:	4293      	cmp	r3, r2
 803a41e:	d90a      	bls.n	803a436 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 803a420:	697b      	ldr	r3, [r7, #20]
 803a422:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803a426:	681b      	ldr	r3, [r3, #0]
 803a428:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 803a42c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 803a430:	d101      	bne.n	803a436 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 803a432:	2300      	movs	r3, #0
 803a434:	e037      	b.n	803a4a6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 803a436:	697b      	ldr	r3, [r7, #20]
 803a438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803a43c:	461a      	mov	r2, r3
 803a43e:	2300      	movs	r3, #0
 803a440:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 803a442:	697b      	ldr	r3, [r7, #20]
 803a444:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803a448:	691b      	ldr	r3, [r3, #16]
 803a44a:	697a      	ldr	r2, [r7, #20]
 803a44c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803a450:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 803a454:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 803a456:	697b      	ldr	r3, [r7, #20]
 803a458:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803a45c:	691b      	ldr	r3, [r3, #16]
 803a45e:	697a      	ldr	r2, [r7, #20]
 803a460:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803a464:	f043 0318 	orr.w	r3, r3, #24
 803a468:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 803a46a:	697b      	ldr	r3, [r7, #20]
 803a46c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803a470:	691b      	ldr	r3, [r3, #16]
 803a472:	697a      	ldr	r2, [r7, #20]
 803a474:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803a478:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 803a47c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 803a47e:	7afb      	ldrb	r3, [r7, #11]
 803a480:	2b01      	cmp	r3, #1
 803a482:	d10f      	bne.n	803a4a4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 803a484:	697b      	ldr	r3, [r7, #20]
 803a486:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803a48a:	461a      	mov	r2, r3
 803a48c:	687b      	ldr	r3, [r7, #4]
 803a48e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 803a490:	697b      	ldr	r3, [r7, #20]
 803a492:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803a496:	681b      	ldr	r3, [r3, #0]
 803a498:	697a      	ldr	r2, [r7, #20]
 803a49a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803a49e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 803a4a2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 803a4a4:	2300      	movs	r3, #0
}
 803a4a6:	4618      	mov	r0, r3
 803a4a8:	371c      	adds	r7, #28
 803a4aa:	46bd      	mov	sp, r7
 803a4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a4b0:	4770      	bx	lr
 803a4b2:	bf00      	nop
 803a4b4:	4f54300a 	.word	0x4f54300a

0803a4b8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 803a4b8:	b480      	push	{r7}
 803a4ba:	b085      	sub	sp, #20
 803a4bc:	af00      	add	r7, sp, #0
 803a4be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 803a4c0:	2300      	movs	r3, #0
 803a4c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 803a4c4:	68fb      	ldr	r3, [r7, #12]
 803a4c6:	3301      	adds	r3, #1
 803a4c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 803a4ca:	68fb      	ldr	r3, [r7, #12]
 803a4cc:	4a13      	ldr	r2, [pc, #76]	; (803a51c <USB_CoreReset+0x64>)
 803a4ce:	4293      	cmp	r3, r2
 803a4d0:	d901      	bls.n	803a4d6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 803a4d2:	2303      	movs	r3, #3
 803a4d4:	e01b      	b.n	803a50e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 803a4d6:	687b      	ldr	r3, [r7, #4]
 803a4d8:	691b      	ldr	r3, [r3, #16]
 803a4da:	2b00      	cmp	r3, #0
 803a4dc:	daf2      	bge.n	803a4c4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 803a4de:	2300      	movs	r3, #0
 803a4e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 803a4e2:	687b      	ldr	r3, [r7, #4]
 803a4e4:	691b      	ldr	r3, [r3, #16]
 803a4e6:	f043 0201 	orr.w	r2, r3, #1
 803a4ea:	687b      	ldr	r3, [r7, #4]
 803a4ec:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 803a4ee:	68fb      	ldr	r3, [r7, #12]
 803a4f0:	3301      	adds	r3, #1
 803a4f2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 803a4f4:	68fb      	ldr	r3, [r7, #12]
 803a4f6:	4a09      	ldr	r2, [pc, #36]	; (803a51c <USB_CoreReset+0x64>)
 803a4f8:	4293      	cmp	r3, r2
 803a4fa:	d901      	bls.n	803a500 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 803a4fc:	2303      	movs	r3, #3
 803a4fe:	e006      	b.n	803a50e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 803a500:	687b      	ldr	r3, [r7, #4]
 803a502:	691b      	ldr	r3, [r3, #16]
 803a504:	f003 0301 	and.w	r3, r3, #1
 803a508:	2b01      	cmp	r3, #1
 803a50a:	d0f0      	beq.n	803a4ee <USB_CoreReset+0x36>

  return HAL_OK;
 803a50c:	2300      	movs	r3, #0
}
 803a50e:	4618      	mov	r0, r3
 803a510:	3714      	adds	r7, #20
 803a512:	46bd      	mov	sp, r7
 803a514:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a518:	4770      	bx	lr
 803a51a:	bf00      	nop
 803a51c:	00030d40 	.word	0x00030d40

0803a520 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 803a520:	b580      	push	{r7, lr}
 803a522:	b084      	sub	sp, #16
 803a524:	af00      	add	r7, sp, #0
 803a526:	6078      	str	r0, [r7, #4]
 803a528:	460b      	mov	r3, r1
 803a52a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 803a52c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 803a530:	f002 fc54 	bl	803cddc <USBD_static_malloc>
 803a534:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 803a536:	68fb      	ldr	r3, [r7, #12]
 803a538:	2b00      	cmp	r3, #0
 803a53a:	d109      	bne.n	803a550 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 803a53c:	687b      	ldr	r3, [r7, #4]
 803a53e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803a542:	687b      	ldr	r3, [r7, #4]
 803a544:	32b0      	adds	r2, #176	; 0xb0
 803a546:	2100      	movs	r1, #0
 803a548:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 803a54c:	2302      	movs	r3, #2
 803a54e:	e0d4      	b.n	803a6fa <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 803a550:	f44f 7207 	mov.w	r2, #540	; 0x21c
 803a554:	2100      	movs	r1, #0
 803a556:	68f8      	ldr	r0, [r7, #12]
 803a558:	f002 fd42 	bl	803cfe0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 803a55c:	687b      	ldr	r3, [r7, #4]
 803a55e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803a562:	687b      	ldr	r3, [r7, #4]
 803a564:	32b0      	adds	r2, #176	; 0xb0
 803a566:	68f9      	ldr	r1, [r7, #12]
 803a568:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 803a56c:	687b      	ldr	r3, [r7, #4]
 803a56e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803a572:	687b      	ldr	r3, [r7, #4]
 803a574:	32b0      	adds	r2, #176	; 0xb0
 803a576:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 803a57a:	687b      	ldr	r3, [r7, #4]
 803a57c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 803a580:	687b      	ldr	r3, [r7, #4]
 803a582:	7c1b      	ldrb	r3, [r3, #16]
 803a584:	2b00      	cmp	r3, #0
 803a586:	d138      	bne.n	803a5fa <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 803a588:	4b5e      	ldr	r3, [pc, #376]	; (803a704 <USBD_CDC_Init+0x1e4>)
 803a58a:	7819      	ldrb	r1, [r3, #0]
 803a58c:	f44f 7300 	mov.w	r3, #512	; 0x200
 803a590:	2202      	movs	r2, #2
 803a592:	6878      	ldr	r0, [r7, #4]
 803a594:	f002 faff 	bl	803cb96 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 803a598:	4b5a      	ldr	r3, [pc, #360]	; (803a704 <USBD_CDC_Init+0x1e4>)
 803a59a:	781b      	ldrb	r3, [r3, #0]
 803a59c:	f003 020f 	and.w	r2, r3, #15
 803a5a0:	6879      	ldr	r1, [r7, #4]
 803a5a2:	4613      	mov	r3, r2
 803a5a4:	009b      	lsls	r3, r3, #2
 803a5a6:	4413      	add	r3, r2
 803a5a8:	009b      	lsls	r3, r3, #2
 803a5aa:	440b      	add	r3, r1
 803a5ac:	3324      	adds	r3, #36	; 0x24
 803a5ae:	2201      	movs	r2, #1
 803a5b0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 803a5b2:	4b55      	ldr	r3, [pc, #340]	; (803a708 <USBD_CDC_Init+0x1e8>)
 803a5b4:	7819      	ldrb	r1, [r3, #0]
 803a5b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 803a5ba:	2202      	movs	r2, #2
 803a5bc:	6878      	ldr	r0, [r7, #4]
 803a5be:	f002 faea 	bl	803cb96 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 803a5c2:	4b51      	ldr	r3, [pc, #324]	; (803a708 <USBD_CDC_Init+0x1e8>)
 803a5c4:	781b      	ldrb	r3, [r3, #0]
 803a5c6:	f003 020f 	and.w	r2, r3, #15
 803a5ca:	6879      	ldr	r1, [r7, #4]
 803a5cc:	4613      	mov	r3, r2
 803a5ce:	009b      	lsls	r3, r3, #2
 803a5d0:	4413      	add	r3, r2
 803a5d2:	009b      	lsls	r3, r3, #2
 803a5d4:	440b      	add	r3, r1
 803a5d6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 803a5da:	2201      	movs	r2, #1
 803a5dc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 803a5de:	4b4b      	ldr	r3, [pc, #300]	; (803a70c <USBD_CDC_Init+0x1ec>)
 803a5e0:	781b      	ldrb	r3, [r3, #0]
 803a5e2:	f003 020f 	and.w	r2, r3, #15
 803a5e6:	6879      	ldr	r1, [r7, #4]
 803a5e8:	4613      	mov	r3, r2
 803a5ea:	009b      	lsls	r3, r3, #2
 803a5ec:	4413      	add	r3, r2
 803a5ee:	009b      	lsls	r3, r3, #2
 803a5f0:	440b      	add	r3, r1
 803a5f2:	3326      	adds	r3, #38	; 0x26
 803a5f4:	2210      	movs	r2, #16
 803a5f6:	801a      	strh	r2, [r3, #0]
 803a5f8:	e035      	b.n	803a666 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 803a5fa:	4b42      	ldr	r3, [pc, #264]	; (803a704 <USBD_CDC_Init+0x1e4>)
 803a5fc:	7819      	ldrb	r1, [r3, #0]
 803a5fe:	2340      	movs	r3, #64	; 0x40
 803a600:	2202      	movs	r2, #2
 803a602:	6878      	ldr	r0, [r7, #4]
 803a604:	f002 fac7 	bl	803cb96 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 803a608:	4b3e      	ldr	r3, [pc, #248]	; (803a704 <USBD_CDC_Init+0x1e4>)
 803a60a:	781b      	ldrb	r3, [r3, #0]
 803a60c:	f003 020f 	and.w	r2, r3, #15
 803a610:	6879      	ldr	r1, [r7, #4]
 803a612:	4613      	mov	r3, r2
 803a614:	009b      	lsls	r3, r3, #2
 803a616:	4413      	add	r3, r2
 803a618:	009b      	lsls	r3, r3, #2
 803a61a:	440b      	add	r3, r1
 803a61c:	3324      	adds	r3, #36	; 0x24
 803a61e:	2201      	movs	r2, #1
 803a620:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 803a622:	4b39      	ldr	r3, [pc, #228]	; (803a708 <USBD_CDC_Init+0x1e8>)
 803a624:	7819      	ldrb	r1, [r3, #0]
 803a626:	2340      	movs	r3, #64	; 0x40
 803a628:	2202      	movs	r2, #2
 803a62a:	6878      	ldr	r0, [r7, #4]
 803a62c:	f002 fab3 	bl	803cb96 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 803a630:	4b35      	ldr	r3, [pc, #212]	; (803a708 <USBD_CDC_Init+0x1e8>)
 803a632:	781b      	ldrb	r3, [r3, #0]
 803a634:	f003 020f 	and.w	r2, r3, #15
 803a638:	6879      	ldr	r1, [r7, #4]
 803a63a:	4613      	mov	r3, r2
 803a63c:	009b      	lsls	r3, r3, #2
 803a63e:	4413      	add	r3, r2
 803a640:	009b      	lsls	r3, r3, #2
 803a642:	440b      	add	r3, r1
 803a644:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 803a648:	2201      	movs	r2, #1
 803a64a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 803a64c:	4b2f      	ldr	r3, [pc, #188]	; (803a70c <USBD_CDC_Init+0x1ec>)
 803a64e:	781b      	ldrb	r3, [r3, #0]
 803a650:	f003 020f 	and.w	r2, r3, #15
 803a654:	6879      	ldr	r1, [r7, #4]
 803a656:	4613      	mov	r3, r2
 803a658:	009b      	lsls	r3, r3, #2
 803a65a:	4413      	add	r3, r2
 803a65c:	009b      	lsls	r3, r3, #2
 803a65e:	440b      	add	r3, r1
 803a660:	3326      	adds	r3, #38	; 0x26
 803a662:	2210      	movs	r2, #16
 803a664:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 803a666:	4b29      	ldr	r3, [pc, #164]	; (803a70c <USBD_CDC_Init+0x1ec>)
 803a668:	7819      	ldrb	r1, [r3, #0]
 803a66a:	2308      	movs	r3, #8
 803a66c:	2203      	movs	r2, #3
 803a66e:	6878      	ldr	r0, [r7, #4]
 803a670:	f002 fa91 	bl	803cb96 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 803a674:	4b25      	ldr	r3, [pc, #148]	; (803a70c <USBD_CDC_Init+0x1ec>)
 803a676:	781b      	ldrb	r3, [r3, #0]
 803a678:	f003 020f 	and.w	r2, r3, #15
 803a67c:	6879      	ldr	r1, [r7, #4]
 803a67e:	4613      	mov	r3, r2
 803a680:	009b      	lsls	r3, r3, #2
 803a682:	4413      	add	r3, r2
 803a684:	009b      	lsls	r3, r3, #2
 803a686:	440b      	add	r3, r1
 803a688:	3324      	adds	r3, #36	; 0x24
 803a68a:	2201      	movs	r2, #1
 803a68c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 803a68e:	68fb      	ldr	r3, [r7, #12]
 803a690:	2200      	movs	r2, #0
 803a692:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 803a696:	687b      	ldr	r3, [r7, #4]
 803a698:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 803a69c:	687a      	ldr	r2, [r7, #4]
 803a69e:	33b0      	adds	r3, #176	; 0xb0
 803a6a0:	009b      	lsls	r3, r3, #2
 803a6a2:	4413      	add	r3, r2
 803a6a4:	685b      	ldr	r3, [r3, #4]
 803a6a6:	681b      	ldr	r3, [r3, #0]
 803a6a8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 803a6aa:	68fb      	ldr	r3, [r7, #12]
 803a6ac:	2200      	movs	r2, #0
 803a6ae:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 803a6b2:	68fb      	ldr	r3, [r7, #12]
 803a6b4:	2200      	movs	r2, #0
 803a6b6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 803a6ba:	68fb      	ldr	r3, [r7, #12]
 803a6bc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 803a6c0:	2b00      	cmp	r3, #0
 803a6c2:	d101      	bne.n	803a6c8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 803a6c4:	2302      	movs	r3, #2
 803a6c6:	e018      	b.n	803a6fa <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 803a6c8:	687b      	ldr	r3, [r7, #4]
 803a6ca:	7c1b      	ldrb	r3, [r3, #16]
 803a6cc:	2b00      	cmp	r3, #0
 803a6ce:	d10a      	bne.n	803a6e6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 803a6d0:	4b0d      	ldr	r3, [pc, #52]	; (803a708 <USBD_CDC_Init+0x1e8>)
 803a6d2:	7819      	ldrb	r1, [r3, #0]
 803a6d4:	68fb      	ldr	r3, [r7, #12]
 803a6d6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 803a6da:	f44f 7300 	mov.w	r3, #512	; 0x200
 803a6de:	6878      	ldr	r0, [r7, #4]
 803a6e0:	f002 fb48 	bl	803cd74 <USBD_LL_PrepareReceive>
 803a6e4:	e008      	b.n	803a6f8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 803a6e6:	4b08      	ldr	r3, [pc, #32]	; (803a708 <USBD_CDC_Init+0x1e8>)
 803a6e8:	7819      	ldrb	r1, [r3, #0]
 803a6ea:	68fb      	ldr	r3, [r7, #12]
 803a6ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 803a6f0:	2340      	movs	r3, #64	; 0x40
 803a6f2:	6878      	ldr	r0, [r7, #4]
 803a6f4:	f002 fb3e 	bl	803cd74 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 803a6f8:	2300      	movs	r3, #0
}
 803a6fa:	4618      	mov	r0, r3
 803a6fc:	3710      	adds	r7, #16
 803a6fe:	46bd      	mov	sp, r7
 803a700:	bd80      	pop	{r7, pc}
 803a702:	bf00      	nop
 803a704:	24000097 	.word	0x24000097
 803a708:	24000098 	.word	0x24000098
 803a70c:	24000099 	.word	0x24000099

0803a710 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 803a710:	b580      	push	{r7, lr}
 803a712:	b082      	sub	sp, #8
 803a714:	af00      	add	r7, sp, #0
 803a716:	6078      	str	r0, [r7, #4]
 803a718:	460b      	mov	r3, r1
 803a71a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 803a71c:	4b3a      	ldr	r3, [pc, #232]	; (803a808 <USBD_CDC_DeInit+0xf8>)
 803a71e:	781b      	ldrb	r3, [r3, #0]
 803a720:	4619      	mov	r1, r3
 803a722:	6878      	ldr	r0, [r7, #4]
 803a724:	f002 fa5d 	bl	803cbe2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 803a728:	4b37      	ldr	r3, [pc, #220]	; (803a808 <USBD_CDC_DeInit+0xf8>)
 803a72a:	781b      	ldrb	r3, [r3, #0]
 803a72c:	f003 020f 	and.w	r2, r3, #15
 803a730:	6879      	ldr	r1, [r7, #4]
 803a732:	4613      	mov	r3, r2
 803a734:	009b      	lsls	r3, r3, #2
 803a736:	4413      	add	r3, r2
 803a738:	009b      	lsls	r3, r3, #2
 803a73a:	440b      	add	r3, r1
 803a73c:	3324      	adds	r3, #36	; 0x24
 803a73e:	2200      	movs	r2, #0
 803a740:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 803a742:	4b32      	ldr	r3, [pc, #200]	; (803a80c <USBD_CDC_DeInit+0xfc>)
 803a744:	781b      	ldrb	r3, [r3, #0]
 803a746:	4619      	mov	r1, r3
 803a748:	6878      	ldr	r0, [r7, #4]
 803a74a:	f002 fa4a 	bl	803cbe2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 803a74e:	4b2f      	ldr	r3, [pc, #188]	; (803a80c <USBD_CDC_DeInit+0xfc>)
 803a750:	781b      	ldrb	r3, [r3, #0]
 803a752:	f003 020f 	and.w	r2, r3, #15
 803a756:	6879      	ldr	r1, [r7, #4]
 803a758:	4613      	mov	r3, r2
 803a75a:	009b      	lsls	r3, r3, #2
 803a75c:	4413      	add	r3, r2
 803a75e:	009b      	lsls	r3, r3, #2
 803a760:	440b      	add	r3, r1
 803a762:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 803a766:	2200      	movs	r2, #0
 803a768:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 803a76a:	4b29      	ldr	r3, [pc, #164]	; (803a810 <USBD_CDC_DeInit+0x100>)
 803a76c:	781b      	ldrb	r3, [r3, #0]
 803a76e:	4619      	mov	r1, r3
 803a770:	6878      	ldr	r0, [r7, #4]
 803a772:	f002 fa36 	bl	803cbe2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 803a776:	4b26      	ldr	r3, [pc, #152]	; (803a810 <USBD_CDC_DeInit+0x100>)
 803a778:	781b      	ldrb	r3, [r3, #0]
 803a77a:	f003 020f 	and.w	r2, r3, #15
 803a77e:	6879      	ldr	r1, [r7, #4]
 803a780:	4613      	mov	r3, r2
 803a782:	009b      	lsls	r3, r3, #2
 803a784:	4413      	add	r3, r2
 803a786:	009b      	lsls	r3, r3, #2
 803a788:	440b      	add	r3, r1
 803a78a:	3324      	adds	r3, #36	; 0x24
 803a78c:	2200      	movs	r2, #0
 803a78e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 803a790:	4b1f      	ldr	r3, [pc, #124]	; (803a810 <USBD_CDC_DeInit+0x100>)
 803a792:	781b      	ldrb	r3, [r3, #0]
 803a794:	f003 020f 	and.w	r2, r3, #15
 803a798:	6879      	ldr	r1, [r7, #4]
 803a79a:	4613      	mov	r3, r2
 803a79c:	009b      	lsls	r3, r3, #2
 803a79e:	4413      	add	r3, r2
 803a7a0:	009b      	lsls	r3, r3, #2
 803a7a2:	440b      	add	r3, r1
 803a7a4:	3326      	adds	r3, #38	; 0x26
 803a7a6:	2200      	movs	r2, #0
 803a7a8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 803a7aa:	687b      	ldr	r3, [r7, #4]
 803a7ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803a7b0:	687b      	ldr	r3, [r7, #4]
 803a7b2:	32b0      	adds	r2, #176	; 0xb0
 803a7b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803a7b8:	2b00      	cmp	r3, #0
 803a7ba:	d01f      	beq.n	803a7fc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 803a7bc:	687b      	ldr	r3, [r7, #4]
 803a7be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 803a7c2:	687a      	ldr	r2, [r7, #4]
 803a7c4:	33b0      	adds	r3, #176	; 0xb0
 803a7c6:	009b      	lsls	r3, r3, #2
 803a7c8:	4413      	add	r3, r2
 803a7ca:	685b      	ldr	r3, [r3, #4]
 803a7cc:	685b      	ldr	r3, [r3, #4]
 803a7ce:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 803a7d0:	687b      	ldr	r3, [r7, #4]
 803a7d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803a7d6:	687b      	ldr	r3, [r7, #4]
 803a7d8:	32b0      	adds	r2, #176	; 0xb0
 803a7da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803a7de:	4618      	mov	r0, r3
 803a7e0:	f002 fb0a 	bl	803cdf8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 803a7e4:	687b      	ldr	r3, [r7, #4]
 803a7e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803a7ea:	687b      	ldr	r3, [r7, #4]
 803a7ec:	32b0      	adds	r2, #176	; 0xb0
 803a7ee:	2100      	movs	r1, #0
 803a7f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 803a7f4:	687b      	ldr	r3, [r7, #4]
 803a7f6:	2200      	movs	r2, #0
 803a7f8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 803a7fc:	2300      	movs	r3, #0
}
 803a7fe:	4618      	mov	r0, r3
 803a800:	3708      	adds	r7, #8
 803a802:	46bd      	mov	sp, r7
 803a804:	bd80      	pop	{r7, pc}
 803a806:	bf00      	nop
 803a808:	24000097 	.word	0x24000097
 803a80c:	24000098 	.word	0x24000098
 803a810:	24000099 	.word	0x24000099

0803a814 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 803a814:	b580      	push	{r7, lr}
 803a816:	b086      	sub	sp, #24
 803a818:	af00      	add	r7, sp, #0
 803a81a:	6078      	str	r0, [r7, #4]
 803a81c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 803a81e:	687b      	ldr	r3, [r7, #4]
 803a820:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803a824:	687b      	ldr	r3, [r7, #4]
 803a826:	32b0      	adds	r2, #176	; 0xb0
 803a828:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803a82c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 803a82e:	2300      	movs	r3, #0
 803a830:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 803a832:	2300      	movs	r3, #0
 803a834:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 803a836:	2300      	movs	r3, #0
 803a838:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 803a83a:	693b      	ldr	r3, [r7, #16]
 803a83c:	2b00      	cmp	r3, #0
 803a83e:	d101      	bne.n	803a844 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 803a840:	2303      	movs	r3, #3
 803a842:	e0bf      	b.n	803a9c4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 803a844:	683b      	ldr	r3, [r7, #0]
 803a846:	781b      	ldrb	r3, [r3, #0]
 803a848:	f003 0360 	and.w	r3, r3, #96	; 0x60
 803a84c:	2b00      	cmp	r3, #0
 803a84e:	d050      	beq.n	803a8f2 <USBD_CDC_Setup+0xde>
 803a850:	2b20      	cmp	r3, #32
 803a852:	f040 80af 	bne.w	803a9b4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 803a856:	683b      	ldr	r3, [r7, #0]
 803a858:	88db      	ldrh	r3, [r3, #6]
 803a85a:	2b00      	cmp	r3, #0
 803a85c:	d03a      	beq.n	803a8d4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 803a85e:	683b      	ldr	r3, [r7, #0]
 803a860:	781b      	ldrb	r3, [r3, #0]
 803a862:	b25b      	sxtb	r3, r3
 803a864:	2b00      	cmp	r3, #0
 803a866:	da1b      	bge.n	803a8a0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 803a868:	687b      	ldr	r3, [r7, #4]
 803a86a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 803a86e:	687a      	ldr	r2, [r7, #4]
 803a870:	33b0      	adds	r3, #176	; 0xb0
 803a872:	009b      	lsls	r3, r3, #2
 803a874:	4413      	add	r3, r2
 803a876:	685b      	ldr	r3, [r3, #4]
 803a878:	689b      	ldr	r3, [r3, #8]
 803a87a:	683a      	ldr	r2, [r7, #0]
 803a87c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 803a87e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 803a880:	683a      	ldr	r2, [r7, #0]
 803a882:	88d2      	ldrh	r2, [r2, #6]
 803a884:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 803a886:	683b      	ldr	r3, [r7, #0]
 803a888:	88db      	ldrh	r3, [r3, #6]
 803a88a:	2b07      	cmp	r3, #7
 803a88c:	bf28      	it	cs
 803a88e:	2307      	movcs	r3, #7
 803a890:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 803a892:	693b      	ldr	r3, [r7, #16]
 803a894:	89fa      	ldrh	r2, [r7, #14]
 803a896:	4619      	mov	r1, r3
 803a898:	6878      	ldr	r0, [r7, #4]
 803a89a:	f001 fd43 	bl	803c324 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 803a89e:	e090      	b.n	803a9c2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 803a8a0:	683b      	ldr	r3, [r7, #0]
 803a8a2:	785a      	ldrb	r2, [r3, #1]
 803a8a4:	693b      	ldr	r3, [r7, #16]
 803a8a6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 803a8aa:	683b      	ldr	r3, [r7, #0]
 803a8ac:	88db      	ldrh	r3, [r3, #6]
 803a8ae:	2b3f      	cmp	r3, #63	; 0x3f
 803a8b0:	d803      	bhi.n	803a8ba <USBD_CDC_Setup+0xa6>
 803a8b2:	683b      	ldr	r3, [r7, #0]
 803a8b4:	88db      	ldrh	r3, [r3, #6]
 803a8b6:	b2da      	uxtb	r2, r3
 803a8b8:	e000      	b.n	803a8bc <USBD_CDC_Setup+0xa8>
 803a8ba:	2240      	movs	r2, #64	; 0x40
 803a8bc:	693b      	ldr	r3, [r7, #16]
 803a8be:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 803a8c2:	6939      	ldr	r1, [r7, #16]
 803a8c4:	693b      	ldr	r3, [r7, #16]
 803a8c6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 803a8ca:	461a      	mov	r2, r3
 803a8cc:	6878      	ldr	r0, [r7, #4]
 803a8ce:	f001 fd55 	bl	803c37c <USBD_CtlPrepareRx>
      break;
 803a8d2:	e076      	b.n	803a9c2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 803a8d4:	687b      	ldr	r3, [r7, #4]
 803a8d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 803a8da:	687a      	ldr	r2, [r7, #4]
 803a8dc:	33b0      	adds	r3, #176	; 0xb0
 803a8de:	009b      	lsls	r3, r3, #2
 803a8e0:	4413      	add	r3, r2
 803a8e2:	685b      	ldr	r3, [r3, #4]
 803a8e4:	689b      	ldr	r3, [r3, #8]
 803a8e6:	683a      	ldr	r2, [r7, #0]
 803a8e8:	7850      	ldrb	r0, [r2, #1]
 803a8ea:	2200      	movs	r2, #0
 803a8ec:	6839      	ldr	r1, [r7, #0]
 803a8ee:	4798      	blx	r3
      break;
 803a8f0:	e067      	b.n	803a9c2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 803a8f2:	683b      	ldr	r3, [r7, #0]
 803a8f4:	785b      	ldrb	r3, [r3, #1]
 803a8f6:	2b0b      	cmp	r3, #11
 803a8f8:	d851      	bhi.n	803a99e <USBD_CDC_Setup+0x18a>
 803a8fa:	a201      	add	r2, pc, #4	; (adr r2, 803a900 <USBD_CDC_Setup+0xec>)
 803a8fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803a900:	0803a931 	.word	0x0803a931
 803a904:	0803a9ad 	.word	0x0803a9ad
 803a908:	0803a99f 	.word	0x0803a99f
 803a90c:	0803a99f 	.word	0x0803a99f
 803a910:	0803a99f 	.word	0x0803a99f
 803a914:	0803a99f 	.word	0x0803a99f
 803a918:	0803a99f 	.word	0x0803a99f
 803a91c:	0803a99f 	.word	0x0803a99f
 803a920:	0803a99f 	.word	0x0803a99f
 803a924:	0803a99f 	.word	0x0803a99f
 803a928:	0803a95b 	.word	0x0803a95b
 803a92c:	0803a985 	.word	0x0803a985
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803a930:	687b      	ldr	r3, [r7, #4]
 803a932:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803a936:	b2db      	uxtb	r3, r3
 803a938:	2b03      	cmp	r3, #3
 803a93a:	d107      	bne.n	803a94c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 803a93c:	f107 030a 	add.w	r3, r7, #10
 803a940:	2202      	movs	r2, #2
 803a942:	4619      	mov	r1, r3
 803a944:	6878      	ldr	r0, [r7, #4]
 803a946:	f001 fced 	bl	803c324 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 803a94a:	e032      	b.n	803a9b2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 803a94c:	6839      	ldr	r1, [r7, #0]
 803a94e:	6878      	ldr	r0, [r7, #4]
 803a950:	f001 fc77 	bl	803c242 <USBD_CtlError>
            ret = USBD_FAIL;
 803a954:	2303      	movs	r3, #3
 803a956:	75fb      	strb	r3, [r7, #23]
          break;
 803a958:	e02b      	b.n	803a9b2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803a95a:	687b      	ldr	r3, [r7, #4]
 803a95c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803a960:	b2db      	uxtb	r3, r3
 803a962:	2b03      	cmp	r3, #3
 803a964:	d107      	bne.n	803a976 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 803a966:	f107 030d 	add.w	r3, r7, #13
 803a96a:	2201      	movs	r2, #1
 803a96c:	4619      	mov	r1, r3
 803a96e:	6878      	ldr	r0, [r7, #4]
 803a970:	f001 fcd8 	bl	803c324 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 803a974:	e01d      	b.n	803a9b2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 803a976:	6839      	ldr	r1, [r7, #0]
 803a978:	6878      	ldr	r0, [r7, #4]
 803a97a:	f001 fc62 	bl	803c242 <USBD_CtlError>
            ret = USBD_FAIL;
 803a97e:	2303      	movs	r3, #3
 803a980:	75fb      	strb	r3, [r7, #23]
          break;
 803a982:	e016      	b.n	803a9b2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 803a984:	687b      	ldr	r3, [r7, #4]
 803a986:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803a98a:	b2db      	uxtb	r3, r3
 803a98c:	2b03      	cmp	r3, #3
 803a98e:	d00f      	beq.n	803a9b0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 803a990:	6839      	ldr	r1, [r7, #0]
 803a992:	6878      	ldr	r0, [r7, #4]
 803a994:	f001 fc55 	bl	803c242 <USBD_CtlError>
            ret = USBD_FAIL;
 803a998:	2303      	movs	r3, #3
 803a99a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 803a99c:	e008      	b.n	803a9b0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 803a99e:	6839      	ldr	r1, [r7, #0]
 803a9a0:	6878      	ldr	r0, [r7, #4]
 803a9a2:	f001 fc4e 	bl	803c242 <USBD_CtlError>
          ret = USBD_FAIL;
 803a9a6:	2303      	movs	r3, #3
 803a9a8:	75fb      	strb	r3, [r7, #23]
          break;
 803a9aa:	e002      	b.n	803a9b2 <USBD_CDC_Setup+0x19e>
          break;
 803a9ac:	bf00      	nop
 803a9ae:	e008      	b.n	803a9c2 <USBD_CDC_Setup+0x1ae>
          break;
 803a9b0:	bf00      	nop
      }
      break;
 803a9b2:	e006      	b.n	803a9c2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 803a9b4:	6839      	ldr	r1, [r7, #0]
 803a9b6:	6878      	ldr	r0, [r7, #4]
 803a9b8:	f001 fc43 	bl	803c242 <USBD_CtlError>
      ret = USBD_FAIL;
 803a9bc:	2303      	movs	r3, #3
 803a9be:	75fb      	strb	r3, [r7, #23]
      break;
 803a9c0:	bf00      	nop
  }

  return (uint8_t)ret;
 803a9c2:	7dfb      	ldrb	r3, [r7, #23]
}
 803a9c4:	4618      	mov	r0, r3
 803a9c6:	3718      	adds	r7, #24
 803a9c8:	46bd      	mov	sp, r7
 803a9ca:	bd80      	pop	{r7, pc}

0803a9cc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 803a9cc:	b580      	push	{r7, lr}
 803a9ce:	b084      	sub	sp, #16
 803a9d0:	af00      	add	r7, sp, #0
 803a9d2:	6078      	str	r0, [r7, #4]
 803a9d4:	460b      	mov	r3, r1
 803a9d6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 803a9d8:	687b      	ldr	r3, [r7, #4]
 803a9da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 803a9de:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 803a9e0:	687b      	ldr	r3, [r7, #4]
 803a9e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803a9e6:	687b      	ldr	r3, [r7, #4]
 803a9e8:	32b0      	adds	r2, #176	; 0xb0
 803a9ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803a9ee:	2b00      	cmp	r3, #0
 803a9f0:	d101      	bne.n	803a9f6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 803a9f2:	2303      	movs	r3, #3
 803a9f4:	e065      	b.n	803aac2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 803a9f6:	687b      	ldr	r3, [r7, #4]
 803a9f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803a9fc:	687b      	ldr	r3, [r7, #4]
 803a9fe:	32b0      	adds	r2, #176	; 0xb0
 803aa00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803aa04:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 803aa06:	78fb      	ldrb	r3, [r7, #3]
 803aa08:	f003 020f 	and.w	r2, r3, #15
 803aa0c:	6879      	ldr	r1, [r7, #4]
 803aa0e:	4613      	mov	r3, r2
 803aa10:	009b      	lsls	r3, r3, #2
 803aa12:	4413      	add	r3, r2
 803aa14:	009b      	lsls	r3, r3, #2
 803aa16:	440b      	add	r3, r1
 803aa18:	3318      	adds	r3, #24
 803aa1a:	681b      	ldr	r3, [r3, #0]
 803aa1c:	2b00      	cmp	r3, #0
 803aa1e:	d02f      	beq.n	803aa80 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 803aa20:	78fb      	ldrb	r3, [r7, #3]
 803aa22:	f003 020f 	and.w	r2, r3, #15
 803aa26:	6879      	ldr	r1, [r7, #4]
 803aa28:	4613      	mov	r3, r2
 803aa2a:	009b      	lsls	r3, r3, #2
 803aa2c:	4413      	add	r3, r2
 803aa2e:	009b      	lsls	r3, r3, #2
 803aa30:	440b      	add	r3, r1
 803aa32:	3318      	adds	r3, #24
 803aa34:	681a      	ldr	r2, [r3, #0]
 803aa36:	78fb      	ldrb	r3, [r7, #3]
 803aa38:	f003 010f 	and.w	r1, r3, #15
 803aa3c:	68f8      	ldr	r0, [r7, #12]
 803aa3e:	460b      	mov	r3, r1
 803aa40:	00db      	lsls	r3, r3, #3
 803aa42:	440b      	add	r3, r1
 803aa44:	009b      	lsls	r3, r3, #2
 803aa46:	4403      	add	r3, r0
 803aa48:	3348      	adds	r3, #72	; 0x48
 803aa4a:	681b      	ldr	r3, [r3, #0]
 803aa4c:	fbb2 f1f3 	udiv	r1, r2, r3
 803aa50:	fb01 f303 	mul.w	r3, r1, r3
 803aa54:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 803aa56:	2b00      	cmp	r3, #0
 803aa58:	d112      	bne.n	803aa80 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 803aa5a:	78fb      	ldrb	r3, [r7, #3]
 803aa5c:	f003 020f 	and.w	r2, r3, #15
 803aa60:	6879      	ldr	r1, [r7, #4]
 803aa62:	4613      	mov	r3, r2
 803aa64:	009b      	lsls	r3, r3, #2
 803aa66:	4413      	add	r3, r2
 803aa68:	009b      	lsls	r3, r3, #2
 803aa6a:	440b      	add	r3, r1
 803aa6c:	3318      	adds	r3, #24
 803aa6e:	2200      	movs	r2, #0
 803aa70:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 803aa72:	78f9      	ldrb	r1, [r7, #3]
 803aa74:	2300      	movs	r3, #0
 803aa76:	2200      	movs	r2, #0
 803aa78:	6878      	ldr	r0, [r7, #4]
 803aa7a:	f002 f95a 	bl	803cd32 <USBD_LL_Transmit>
 803aa7e:	e01f      	b.n	803aac0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 803aa80:	68bb      	ldr	r3, [r7, #8]
 803aa82:	2200      	movs	r2, #0
 803aa84:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 803aa88:	687b      	ldr	r3, [r7, #4]
 803aa8a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 803aa8e:	687a      	ldr	r2, [r7, #4]
 803aa90:	33b0      	adds	r3, #176	; 0xb0
 803aa92:	009b      	lsls	r3, r3, #2
 803aa94:	4413      	add	r3, r2
 803aa96:	685b      	ldr	r3, [r3, #4]
 803aa98:	691b      	ldr	r3, [r3, #16]
 803aa9a:	2b00      	cmp	r3, #0
 803aa9c:	d010      	beq.n	803aac0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 803aa9e:	687b      	ldr	r3, [r7, #4]
 803aaa0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 803aaa4:	687a      	ldr	r2, [r7, #4]
 803aaa6:	33b0      	adds	r3, #176	; 0xb0
 803aaa8:	009b      	lsls	r3, r3, #2
 803aaaa:	4413      	add	r3, r2
 803aaac:	685b      	ldr	r3, [r3, #4]
 803aaae:	691b      	ldr	r3, [r3, #16]
 803aab0:	68ba      	ldr	r2, [r7, #8]
 803aab2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 803aab6:	68ba      	ldr	r2, [r7, #8]
 803aab8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 803aabc:	78fa      	ldrb	r2, [r7, #3]
 803aabe:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 803aac0:	2300      	movs	r3, #0
}
 803aac2:	4618      	mov	r0, r3
 803aac4:	3710      	adds	r7, #16
 803aac6:	46bd      	mov	sp, r7
 803aac8:	bd80      	pop	{r7, pc}

0803aaca <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 803aaca:	b580      	push	{r7, lr}
 803aacc:	b084      	sub	sp, #16
 803aace:	af00      	add	r7, sp, #0
 803aad0:	6078      	str	r0, [r7, #4]
 803aad2:	460b      	mov	r3, r1
 803aad4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 803aad6:	687b      	ldr	r3, [r7, #4]
 803aad8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803aadc:	687b      	ldr	r3, [r7, #4]
 803aade:	32b0      	adds	r2, #176	; 0xb0
 803aae0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803aae4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 803aae6:	687b      	ldr	r3, [r7, #4]
 803aae8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803aaec:	687b      	ldr	r3, [r7, #4]
 803aaee:	32b0      	adds	r2, #176	; 0xb0
 803aaf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803aaf4:	2b00      	cmp	r3, #0
 803aaf6:	d101      	bne.n	803aafc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 803aaf8:	2303      	movs	r3, #3
 803aafa:	e01a      	b.n	803ab32 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 803aafc:	78fb      	ldrb	r3, [r7, #3]
 803aafe:	4619      	mov	r1, r3
 803ab00:	6878      	ldr	r0, [r7, #4]
 803ab02:	f002 f958 	bl	803cdb6 <USBD_LL_GetRxDataSize>
 803ab06:	4602      	mov	r2, r0
 803ab08:	68fb      	ldr	r3, [r7, #12]
 803ab0a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 803ab0e:	687b      	ldr	r3, [r7, #4]
 803ab10:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 803ab14:	687a      	ldr	r2, [r7, #4]
 803ab16:	33b0      	adds	r3, #176	; 0xb0
 803ab18:	009b      	lsls	r3, r3, #2
 803ab1a:	4413      	add	r3, r2
 803ab1c:	685b      	ldr	r3, [r3, #4]
 803ab1e:	68db      	ldr	r3, [r3, #12]
 803ab20:	68fa      	ldr	r2, [r7, #12]
 803ab22:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 803ab26:	68fa      	ldr	r2, [r7, #12]
 803ab28:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 803ab2c:	4611      	mov	r1, r2
 803ab2e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 803ab30:	2300      	movs	r3, #0
}
 803ab32:	4618      	mov	r0, r3
 803ab34:	3710      	adds	r7, #16
 803ab36:	46bd      	mov	sp, r7
 803ab38:	bd80      	pop	{r7, pc}

0803ab3a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 803ab3a:	b580      	push	{r7, lr}
 803ab3c:	b084      	sub	sp, #16
 803ab3e:	af00      	add	r7, sp, #0
 803ab40:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 803ab42:	687b      	ldr	r3, [r7, #4]
 803ab44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803ab48:	687b      	ldr	r3, [r7, #4]
 803ab4a:	32b0      	adds	r2, #176	; 0xb0
 803ab4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803ab50:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 803ab52:	68fb      	ldr	r3, [r7, #12]
 803ab54:	2b00      	cmp	r3, #0
 803ab56:	d101      	bne.n	803ab5c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 803ab58:	2303      	movs	r3, #3
 803ab5a:	e025      	b.n	803aba8 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 803ab5c:	687b      	ldr	r3, [r7, #4]
 803ab5e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 803ab62:	687a      	ldr	r2, [r7, #4]
 803ab64:	33b0      	adds	r3, #176	; 0xb0
 803ab66:	009b      	lsls	r3, r3, #2
 803ab68:	4413      	add	r3, r2
 803ab6a:	685b      	ldr	r3, [r3, #4]
 803ab6c:	2b00      	cmp	r3, #0
 803ab6e:	d01a      	beq.n	803aba6 <USBD_CDC_EP0_RxReady+0x6c>
 803ab70:	68fb      	ldr	r3, [r7, #12]
 803ab72:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 803ab76:	2bff      	cmp	r3, #255	; 0xff
 803ab78:	d015      	beq.n	803aba6 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 803ab7a:	687b      	ldr	r3, [r7, #4]
 803ab7c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 803ab80:	687a      	ldr	r2, [r7, #4]
 803ab82:	33b0      	adds	r3, #176	; 0xb0
 803ab84:	009b      	lsls	r3, r3, #2
 803ab86:	4413      	add	r3, r2
 803ab88:	685b      	ldr	r3, [r3, #4]
 803ab8a:	689b      	ldr	r3, [r3, #8]
 803ab8c:	68fa      	ldr	r2, [r7, #12]
 803ab8e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 803ab92:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 803ab94:	68fa      	ldr	r2, [r7, #12]
 803ab96:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 803ab9a:	b292      	uxth	r2, r2
 803ab9c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 803ab9e:	68fb      	ldr	r3, [r7, #12]
 803aba0:	22ff      	movs	r2, #255	; 0xff
 803aba2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 803aba6:	2300      	movs	r3, #0
}
 803aba8:	4618      	mov	r0, r3
 803abaa:	3710      	adds	r7, #16
 803abac:	46bd      	mov	sp, r7
 803abae:	bd80      	pop	{r7, pc}

0803abb0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 803abb0:	b580      	push	{r7, lr}
 803abb2:	b086      	sub	sp, #24
 803abb4:	af00      	add	r7, sp, #0
 803abb6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 803abb8:	2182      	movs	r1, #130	; 0x82
 803abba:	4818      	ldr	r0, [pc, #96]	; (803ac1c <USBD_CDC_GetFSCfgDesc+0x6c>)
 803abbc:	f000 fd09 	bl	803b5d2 <USBD_GetEpDesc>
 803abc0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 803abc2:	2101      	movs	r1, #1
 803abc4:	4815      	ldr	r0, [pc, #84]	; (803ac1c <USBD_CDC_GetFSCfgDesc+0x6c>)
 803abc6:	f000 fd04 	bl	803b5d2 <USBD_GetEpDesc>
 803abca:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 803abcc:	2181      	movs	r1, #129	; 0x81
 803abce:	4813      	ldr	r0, [pc, #76]	; (803ac1c <USBD_CDC_GetFSCfgDesc+0x6c>)
 803abd0:	f000 fcff 	bl	803b5d2 <USBD_GetEpDesc>
 803abd4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 803abd6:	697b      	ldr	r3, [r7, #20]
 803abd8:	2b00      	cmp	r3, #0
 803abda:	d002      	beq.n	803abe2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 803abdc:	697b      	ldr	r3, [r7, #20]
 803abde:	2210      	movs	r2, #16
 803abe0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 803abe2:	693b      	ldr	r3, [r7, #16]
 803abe4:	2b00      	cmp	r3, #0
 803abe6:	d006      	beq.n	803abf6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 803abe8:	693b      	ldr	r3, [r7, #16]
 803abea:	2200      	movs	r2, #0
 803abec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 803abf0:	711a      	strb	r2, [r3, #4]
 803abf2:	2200      	movs	r2, #0
 803abf4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 803abf6:	68fb      	ldr	r3, [r7, #12]
 803abf8:	2b00      	cmp	r3, #0
 803abfa:	d006      	beq.n	803ac0a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 803abfc:	68fb      	ldr	r3, [r7, #12]
 803abfe:	2200      	movs	r2, #0
 803ac00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 803ac04:	711a      	strb	r2, [r3, #4]
 803ac06:	2200      	movs	r2, #0
 803ac08:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 803ac0a:	687b      	ldr	r3, [r7, #4]
 803ac0c:	2243      	movs	r2, #67	; 0x43
 803ac0e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 803ac10:	4b02      	ldr	r3, [pc, #8]	; (803ac1c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 803ac12:	4618      	mov	r0, r3
 803ac14:	3718      	adds	r7, #24
 803ac16:	46bd      	mov	sp, r7
 803ac18:	bd80      	pop	{r7, pc}
 803ac1a:	bf00      	nop
 803ac1c:	24000054 	.word	0x24000054

0803ac20 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 803ac20:	b580      	push	{r7, lr}
 803ac22:	b086      	sub	sp, #24
 803ac24:	af00      	add	r7, sp, #0
 803ac26:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 803ac28:	2182      	movs	r1, #130	; 0x82
 803ac2a:	4818      	ldr	r0, [pc, #96]	; (803ac8c <USBD_CDC_GetHSCfgDesc+0x6c>)
 803ac2c:	f000 fcd1 	bl	803b5d2 <USBD_GetEpDesc>
 803ac30:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 803ac32:	2101      	movs	r1, #1
 803ac34:	4815      	ldr	r0, [pc, #84]	; (803ac8c <USBD_CDC_GetHSCfgDesc+0x6c>)
 803ac36:	f000 fccc 	bl	803b5d2 <USBD_GetEpDesc>
 803ac3a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 803ac3c:	2181      	movs	r1, #129	; 0x81
 803ac3e:	4813      	ldr	r0, [pc, #76]	; (803ac8c <USBD_CDC_GetHSCfgDesc+0x6c>)
 803ac40:	f000 fcc7 	bl	803b5d2 <USBD_GetEpDesc>
 803ac44:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 803ac46:	697b      	ldr	r3, [r7, #20]
 803ac48:	2b00      	cmp	r3, #0
 803ac4a:	d002      	beq.n	803ac52 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 803ac4c:	697b      	ldr	r3, [r7, #20]
 803ac4e:	2210      	movs	r2, #16
 803ac50:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 803ac52:	693b      	ldr	r3, [r7, #16]
 803ac54:	2b00      	cmp	r3, #0
 803ac56:	d006      	beq.n	803ac66 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 803ac58:	693b      	ldr	r3, [r7, #16]
 803ac5a:	2200      	movs	r2, #0
 803ac5c:	711a      	strb	r2, [r3, #4]
 803ac5e:	2200      	movs	r2, #0
 803ac60:	f042 0202 	orr.w	r2, r2, #2
 803ac64:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 803ac66:	68fb      	ldr	r3, [r7, #12]
 803ac68:	2b00      	cmp	r3, #0
 803ac6a:	d006      	beq.n	803ac7a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 803ac6c:	68fb      	ldr	r3, [r7, #12]
 803ac6e:	2200      	movs	r2, #0
 803ac70:	711a      	strb	r2, [r3, #4]
 803ac72:	2200      	movs	r2, #0
 803ac74:	f042 0202 	orr.w	r2, r2, #2
 803ac78:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 803ac7a:	687b      	ldr	r3, [r7, #4]
 803ac7c:	2243      	movs	r2, #67	; 0x43
 803ac7e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 803ac80:	4b02      	ldr	r3, [pc, #8]	; (803ac8c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 803ac82:	4618      	mov	r0, r3
 803ac84:	3718      	adds	r7, #24
 803ac86:	46bd      	mov	sp, r7
 803ac88:	bd80      	pop	{r7, pc}
 803ac8a:	bf00      	nop
 803ac8c:	24000054 	.word	0x24000054

0803ac90 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 803ac90:	b580      	push	{r7, lr}
 803ac92:	b086      	sub	sp, #24
 803ac94:	af00      	add	r7, sp, #0
 803ac96:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 803ac98:	2182      	movs	r1, #130	; 0x82
 803ac9a:	4818      	ldr	r0, [pc, #96]	; (803acfc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 803ac9c:	f000 fc99 	bl	803b5d2 <USBD_GetEpDesc>
 803aca0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 803aca2:	2101      	movs	r1, #1
 803aca4:	4815      	ldr	r0, [pc, #84]	; (803acfc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 803aca6:	f000 fc94 	bl	803b5d2 <USBD_GetEpDesc>
 803acaa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 803acac:	2181      	movs	r1, #129	; 0x81
 803acae:	4813      	ldr	r0, [pc, #76]	; (803acfc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 803acb0:	f000 fc8f 	bl	803b5d2 <USBD_GetEpDesc>
 803acb4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 803acb6:	697b      	ldr	r3, [r7, #20]
 803acb8:	2b00      	cmp	r3, #0
 803acba:	d002      	beq.n	803acc2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 803acbc:	697b      	ldr	r3, [r7, #20]
 803acbe:	2210      	movs	r2, #16
 803acc0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 803acc2:	693b      	ldr	r3, [r7, #16]
 803acc4:	2b00      	cmp	r3, #0
 803acc6:	d006      	beq.n	803acd6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 803acc8:	693b      	ldr	r3, [r7, #16]
 803acca:	2200      	movs	r2, #0
 803accc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 803acd0:	711a      	strb	r2, [r3, #4]
 803acd2:	2200      	movs	r2, #0
 803acd4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 803acd6:	68fb      	ldr	r3, [r7, #12]
 803acd8:	2b00      	cmp	r3, #0
 803acda:	d006      	beq.n	803acea <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 803acdc:	68fb      	ldr	r3, [r7, #12]
 803acde:	2200      	movs	r2, #0
 803ace0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 803ace4:	711a      	strb	r2, [r3, #4]
 803ace6:	2200      	movs	r2, #0
 803ace8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 803acea:	687b      	ldr	r3, [r7, #4]
 803acec:	2243      	movs	r2, #67	; 0x43
 803acee:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 803acf0:	4b02      	ldr	r3, [pc, #8]	; (803acfc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 803acf2:	4618      	mov	r0, r3
 803acf4:	3718      	adds	r7, #24
 803acf6:	46bd      	mov	sp, r7
 803acf8:	bd80      	pop	{r7, pc}
 803acfa:	bf00      	nop
 803acfc:	24000054 	.word	0x24000054

0803ad00 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 803ad00:	b480      	push	{r7}
 803ad02:	b083      	sub	sp, #12
 803ad04:	af00      	add	r7, sp, #0
 803ad06:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 803ad08:	687b      	ldr	r3, [r7, #4]
 803ad0a:	220a      	movs	r2, #10
 803ad0c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 803ad0e:	4b03      	ldr	r3, [pc, #12]	; (803ad1c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 803ad10:	4618      	mov	r0, r3
 803ad12:	370c      	adds	r7, #12
 803ad14:	46bd      	mov	sp, r7
 803ad16:	f85d 7b04 	ldr.w	r7, [sp], #4
 803ad1a:	4770      	bx	lr
 803ad1c:	24000010 	.word	0x24000010

0803ad20 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 803ad20:	b480      	push	{r7}
 803ad22:	b083      	sub	sp, #12
 803ad24:	af00      	add	r7, sp, #0
 803ad26:	6078      	str	r0, [r7, #4]
 803ad28:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 803ad2a:	683b      	ldr	r3, [r7, #0]
 803ad2c:	2b00      	cmp	r3, #0
 803ad2e:	d101      	bne.n	803ad34 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 803ad30:	2303      	movs	r3, #3
 803ad32:	e009      	b.n	803ad48 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 803ad34:	687b      	ldr	r3, [r7, #4]
 803ad36:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 803ad3a:	687a      	ldr	r2, [r7, #4]
 803ad3c:	33b0      	adds	r3, #176	; 0xb0
 803ad3e:	009b      	lsls	r3, r3, #2
 803ad40:	4413      	add	r3, r2
 803ad42:	683a      	ldr	r2, [r7, #0]
 803ad44:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 803ad46:	2300      	movs	r3, #0
}
 803ad48:	4618      	mov	r0, r3
 803ad4a:	370c      	adds	r7, #12
 803ad4c:	46bd      	mov	sp, r7
 803ad4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 803ad52:	4770      	bx	lr

0803ad54 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 803ad54:	b480      	push	{r7}
 803ad56:	b087      	sub	sp, #28
 803ad58:	af00      	add	r7, sp, #0
 803ad5a:	60f8      	str	r0, [r7, #12]
 803ad5c:	60b9      	str	r1, [r7, #8]
 803ad5e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 803ad60:	68fb      	ldr	r3, [r7, #12]
 803ad62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803ad66:	68fb      	ldr	r3, [r7, #12]
 803ad68:	32b0      	adds	r2, #176	; 0xb0
 803ad6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803ad6e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 803ad70:	697b      	ldr	r3, [r7, #20]
 803ad72:	2b00      	cmp	r3, #0
 803ad74:	d101      	bne.n	803ad7a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 803ad76:	2303      	movs	r3, #3
 803ad78:	e008      	b.n	803ad8c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 803ad7a:	697b      	ldr	r3, [r7, #20]
 803ad7c:	68ba      	ldr	r2, [r7, #8]
 803ad7e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 803ad82:	697b      	ldr	r3, [r7, #20]
 803ad84:	687a      	ldr	r2, [r7, #4]
 803ad86:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 803ad8a:	2300      	movs	r3, #0
}
 803ad8c:	4618      	mov	r0, r3
 803ad8e:	371c      	adds	r7, #28
 803ad90:	46bd      	mov	sp, r7
 803ad92:	f85d 7b04 	ldr.w	r7, [sp], #4
 803ad96:	4770      	bx	lr

0803ad98 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 803ad98:	b480      	push	{r7}
 803ad9a:	b085      	sub	sp, #20
 803ad9c:	af00      	add	r7, sp, #0
 803ad9e:	6078      	str	r0, [r7, #4]
 803ada0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 803ada2:	687b      	ldr	r3, [r7, #4]
 803ada4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803ada8:	687b      	ldr	r3, [r7, #4]
 803adaa:	32b0      	adds	r2, #176	; 0xb0
 803adac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803adb0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 803adb2:	68fb      	ldr	r3, [r7, #12]
 803adb4:	2b00      	cmp	r3, #0
 803adb6:	d101      	bne.n	803adbc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 803adb8:	2303      	movs	r3, #3
 803adba:	e004      	b.n	803adc6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 803adbc:	68fb      	ldr	r3, [r7, #12]
 803adbe:	683a      	ldr	r2, [r7, #0]
 803adc0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 803adc4:	2300      	movs	r3, #0
}
 803adc6:	4618      	mov	r0, r3
 803adc8:	3714      	adds	r7, #20
 803adca:	46bd      	mov	sp, r7
 803adcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 803add0:	4770      	bx	lr
	...

0803add4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 803add4:	b580      	push	{r7, lr}
 803add6:	b084      	sub	sp, #16
 803add8:	af00      	add	r7, sp, #0
 803adda:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 803addc:	687b      	ldr	r3, [r7, #4]
 803adde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803ade2:	687b      	ldr	r3, [r7, #4]
 803ade4:	32b0      	adds	r2, #176	; 0xb0
 803ade6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803adea:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 803adec:	687b      	ldr	r3, [r7, #4]
 803adee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803adf2:	687b      	ldr	r3, [r7, #4]
 803adf4:	32b0      	adds	r2, #176	; 0xb0
 803adf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803adfa:	2b00      	cmp	r3, #0
 803adfc:	d101      	bne.n	803ae02 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 803adfe:	2303      	movs	r3, #3
 803ae00:	e018      	b.n	803ae34 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 803ae02:	687b      	ldr	r3, [r7, #4]
 803ae04:	7c1b      	ldrb	r3, [r3, #16]
 803ae06:	2b00      	cmp	r3, #0
 803ae08:	d10a      	bne.n	803ae20 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 803ae0a:	4b0c      	ldr	r3, [pc, #48]	; (803ae3c <USBD_CDC_ReceivePacket+0x68>)
 803ae0c:	7819      	ldrb	r1, [r3, #0]
 803ae0e:	68fb      	ldr	r3, [r7, #12]
 803ae10:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 803ae14:	f44f 7300 	mov.w	r3, #512	; 0x200
 803ae18:	6878      	ldr	r0, [r7, #4]
 803ae1a:	f001 ffab 	bl	803cd74 <USBD_LL_PrepareReceive>
 803ae1e:	e008      	b.n	803ae32 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 803ae20:	4b06      	ldr	r3, [pc, #24]	; (803ae3c <USBD_CDC_ReceivePacket+0x68>)
 803ae22:	7819      	ldrb	r1, [r3, #0]
 803ae24:	68fb      	ldr	r3, [r7, #12]
 803ae26:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 803ae2a:	2340      	movs	r3, #64	; 0x40
 803ae2c:	6878      	ldr	r0, [r7, #4]
 803ae2e:	f001 ffa1 	bl	803cd74 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 803ae32:	2300      	movs	r3, #0
}
 803ae34:	4618      	mov	r0, r3
 803ae36:	3710      	adds	r7, #16
 803ae38:	46bd      	mov	sp, r7
 803ae3a:	bd80      	pop	{r7, pc}
 803ae3c:	24000098 	.word	0x24000098

0803ae40 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 803ae40:	b580      	push	{r7, lr}
 803ae42:	b086      	sub	sp, #24
 803ae44:	af00      	add	r7, sp, #0
 803ae46:	60f8      	str	r0, [r7, #12]
 803ae48:	60b9      	str	r1, [r7, #8]
 803ae4a:	4613      	mov	r3, r2
 803ae4c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 803ae4e:	68fb      	ldr	r3, [r7, #12]
 803ae50:	2b00      	cmp	r3, #0
 803ae52:	d101      	bne.n	803ae58 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 803ae54:	2303      	movs	r3, #3
 803ae56:	e01f      	b.n	803ae98 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 803ae58:	68fb      	ldr	r3, [r7, #12]
 803ae5a:	2200      	movs	r2, #0
 803ae5c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 803ae60:	68fb      	ldr	r3, [r7, #12]
 803ae62:	2200      	movs	r2, #0
 803ae64:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 803ae68:	68fb      	ldr	r3, [r7, #12]
 803ae6a:	2200      	movs	r2, #0
 803ae6c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 803ae70:	68bb      	ldr	r3, [r7, #8]
 803ae72:	2b00      	cmp	r3, #0
 803ae74:	d003      	beq.n	803ae7e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 803ae76:	68fb      	ldr	r3, [r7, #12]
 803ae78:	68ba      	ldr	r2, [r7, #8]
 803ae7a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 803ae7e:	68fb      	ldr	r3, [r7, #12]
 803ae80:	2201      	movs	r2, #1
 803ae82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 803ae86:	68fb      	ldr	r3, [r7, #12]
 803ae88:	79fa      	ldrb	r2, [r7, #7]
 803ae8a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 803ae8c:	68f8      	ldr	r0, [r7, #12]
 803ae8e:	f001 fe17 	bl	803cac0 <USBD_LL_Init>
 803ae92:	4603      	mov	r3, r0
 803ae94:	75fb      	strb	r3, [r7, #23]

  return ret;
 803ae96:	7dfb      	ldrb	r3, [r7, #23]
}
 803ae98:	4618      	mov	r0, r3
 803ae9a:	3718      	adds	r7, #24
 803ae9c:	46bd      	mov	sp, r7
 803ae9e:	bd80      	pop	{r7, pc}

0803aea0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 803aea0:	b580      	push	{r7, lr}
 803aea2:	b084      	sub	sp, #16
 803aea4:	af00      	add	r7, sp, #0
 803aea6:	6078      	str	r0, [r7, #4]
 803aea8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 803aeaa:	2300      	movs	r3, #0
 803aeac:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 803aeae:	683b      	ldr	r3, [r7, #0]
 803aeb0:	2b00      	cmp	r3, #0
 803aeb2:	d101      	bne.n	803aeb8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 803aeb4:	2303      	movs	r3, #3
 803aeb6:	e025      	b.n	803af04 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 803aeb8:	687b      	ldr	r3, [r7, #4]
 803aeba:	683a      	ldr	r2, [r7, #0]
 803aebc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 803aec0:	687b      	ldr	r3, [r7, #4]
 803aec2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803aec6:	687b      	ldr	r3, [r7, #4]
 803aec8:	32ae      	adds	r2, #174	; 0xae
 803aeca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803aece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803aed0:	2b00      	cmp	r3, #0
 803aed2:	d00f      	beq.n	803aef4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 803aed4:	687b      	ldr	r3, [r7, #4]
 803aed6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803aeda:	687b      	ldr	r3, [r7, #4]
 803aedc:	32ae      	adds	r2, #174	; 0xae
 803aede:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803aee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803aee4:	f107 020e 	add.w	r2, r7, #14
 803aee8:	4610      	mov	r0, r2
 803aeea:	4798      	blx	r3
 803aeec:	4602      	mov	r2, r0
 803aeee:	687b      	ldr	r3, [r7, #4]
 803aef0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 803aef4:	687b      	ldr	r3, [r7, #4]
 803aef6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 803aefa:	1c5a      	adds	r2, r3, #1
 803aefc:	687b      	ldr	r3, [r7, #4]
 803aefe:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 803af02:	2300      	movs	r3, #0
}
 803af04:	4618      	mov	r0, r3
 803af06:	3710      	adds	r7, #16
 803af08:	46bd      	mov	sp, r7
 803af0a:	bd80      	pop	{r7, pc}

0803af0c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 803af0c:	b580      	push	{r7, lr}
 803af0e:	b082      	sub	sp, #8
 803af10:	af00      	add	r7, sp, #0
 803af12:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 803af14:	6878      	ldr	r0, [r7, #4]
 803af16:	f001 fe23 	bl	803cb60 <USBD_LL_Start>
 803af1a:	4603      	mov	r3, r0
}
 803af1c:	4618      	mov	r0, r3
 803af1e:	3708      	adds	r7, #8
 803af20:	46bd      	mov	sp, r7
 803af22:	bd80      	pop	{r7, pc}

0803af24 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 803af24:	b480      	push	{r7}
 803af26:	b083      	sub	sp, #12
 803af28:	af00      	add	r7, sp, #0
 803af2a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 803af2c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 803af2e:	4618      	mov	r0, r3
 803af30:	370c      	adds	r7, #12
 803af32:	46bd      	mov	sp, r7
 803af34:	f85d 7b04 	ldr.w	r7, [sp], #4
 803af38:	4770      	bx	lr

0803af3a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 803af3a:	b580      	push	{r7, lr}
 803af3c:	b084      	sub	sp, #16
 803af3e:	af00      	add	r7, sp, #0
 803af40:	6078      	str	r0, [r7, #4]
 803af42:	460b      	mov	r3, r1
 803af44:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 803af46:	2300      	movs	r3, #0
 803af48:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 803af4a:	687b      	ldr	r3, [r7, #4]
 803af4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803af50:	2b00      	cmp	r3, #0
 803af52:	d009      	beq.n	803af68 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 803af54:	687b      	ldr	r3, [r7, #4]
 803af56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803af5a:	681b      	ldr	r3, [r3, #0]
 803af5c:	78fa      	ldrb	r2, [r7, #3]
 803af5e:	4611      	mov	r1, r2
 803af60:	6878      	ldr	r0, [r7, #4]
 803af62:	4798      	blx	r3
 803af64:	4603      	mov	r3, r0
 803af66:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 803af68:	7bfb      	ldrb	r3, [r7, #15]
}
 803af6a:	4618      	mov	r0, r3
 803af6c:	3710      	adds	r7, #16
 803af6e:	46bd      	mov	sp, r7
 803af70:	bd80      	pop	{r7, pc}

0803af72 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 803af72:	b580      	push	{r7, lr}
 803af74:	b084      	sub	sp, #16
 803af76:	af00      	add	r7, sp, #0
 803af78:	6078      	str	r0, [r7, #4]
 803af7a:	460b      	mov	r3, r1
 803af7c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 803af7e:	2300      	movs	r3, #0
 803af80:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 803af82:	687b      	ldr	r3, [r7, #4]
 803af84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803af88:	685b      	ldr	r3, [r3, #4]
 803af8a:	78fa      	ldrb	r2, [r7, #3]
 803af8c:	4611      	mov	r1, r2
 803af8e:	6878      	ldr	r0, [r7, #4]
 803af90:	4798      	blx	r3
 803af92:	4603      	mov	r3, r0
 803af94:	2b00      	cmp	r3, #0
 803af96:	d001      	beq.n	803af9c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 803af98:	2303      	movs	r3, #3
 803af9a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 803af9c:	7bfb      	ldrb	r3, [r7, #15]
}
 803af9e:	4618      	mov	r0, r3
 803afa0:	3710      	adds	r7, #16
 803afa2:	46bd      	mov	sp, r7
 803afa4:	bd80      	pop	{r7, pc}

0803afa6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 803afa6:	b580      	push	{r7, lr}
 803afa8:	b084      	sub	sp, #16
 803afaa:	af00      	add	r7, sp, #0
 803afac:	6078      	str	r0, [r7, #4]
 803afae:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 803afb0:	687b      	ldr	r3, [r7, #4]
 803afb2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 803afb6:	6839      	ldr	r1, [r7, #0]
 803afb8:	4618      	mov	r0, r3
 803afba:	f001 f908 	bl	803c1ce <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 803afbe:	687b      	ldr	r3, [r7, #4]
 803afc0:	2201      	movs	r2, #1
 803afc2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 803afc6:	687b      	ldr	r3, [r7, #4]
 803afc8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 803afcc:	461a      	mov	r2, r3
 803afce:	687b      	ldr	r3, [r7, #4]
 803afd0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 803afd4:	687b      	ldr	r3, [r7, #4]
 803afd6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 803afda:	f003 031f 	and.w	r3, r3, #31
 803afde:	2b02      	cmp	r3, #2
 803afe0:	d01a      	beq.n	803b018 <USBD_LL_SetupStage+0x72>
 803afe2:	2b02      	cmp	r3, #2
 803afe4:	d822      	bhi.n	803b02c <USBD_LL_SetupStage+0x86>
 803afe6:	2b00      	cmp	r3, #0
 803afe8:	d002      	beq.n	803aff0 <USBD_LL_SetupStage+0x4a>
 803afea:	2b01      	cmp	r3, #1
 803afec:	d00a      	beq.n	803b004 <USBD_LL_SetupStage+0x5e>
 803afee:	e01d      	b.n	803b02c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 803aff0:	687b      	ldr	r3, [r7, #4]
 803aff2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 803aff6:	4619      	mov	r1, r3
 803aff8:	6878      	ldr	r0, [r7, #4]
 803affa:	f000 fb5f 	bl	803b6bc <USBD_StdDevReq>
 803affe:	4603      	mov	r3, r0
 803b000:	73fb      	strb	r3, [r7, #15]
      break;
 803b002:	e020      	b.n	803b046 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 803b004:	687b      	ldr	r3, [r7, #4]
 803b006:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 803b00a:	4619      	mov	r1, r3
 803b00c:	6878      	ldr	r0, [r7, #4]
 803b00e:	f000 fbc7 	bl	803b7a0 <USBD_StdItfReq>
 803b012:	4603      	mov	r3, r0
 803b014:	73fb      	strb	r3, [r7, #15]
      break;
 803b016:	e016      	b.n	803b046 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 803b018:	687b      	ldr	r3, [r7, #4]
 803b01a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 803b01e:	4619      	mov	r1, r3
 803b020:	6878      	ldr	r0, [r7, #4]
 803b022:	f000 fc29 	bl	803b878 <USBD_StdEPReq>
 803b026:	4603      	mov	r3, r0
 803b028:	73fb      	strb	r3, [r7, #15]
      break;
 803b02a:	e00c      	b.n	803b046 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 803b02c:	687b      	ldr	r3, [r7, #4]
 803b02e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 803b032:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 803b036:	b2db      	uxtb	r3, r3
 803b038:	4619      	mov	r1, r3
 803b03a:	6878      	ldr	r0, [r7, #4]
 803b03c:	f001 fdf0 	bl	803cc20 <USBD_LL_StallEP>
 803b040:	4603      	mov	r3, r0
 803b042:	73fb      	strb	r3, [r7, #15]
      break;
 803b044:	bf00      	nop
  }

  return ret;
 803b046:	7bfb      	ldrb	r3, [r7, #15]
}
 803b048:	4618      	mov	r0, r3
 803b04a:	3710      	adds	r7, #16
 803b04c:	46bd      	mov	sp, r7
 803b04e:	bd80      	pop	{r7, pc}

0803b050 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 803b050:	b580      	push	{r7, lr}
 803b052:	b086      	sub	sp, #24
 803b054:	af00      	add	r7, sp, #0
 803b056:	60f8      	str	r0, [r7, #12]
 803b058:	460b      	mov	r3, r1
 803b05a:	607a      	str	r2, [r7, #4]
 803b05c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 803b05e:	2300      	movs	r3, #0
 803b060:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 803b062:	7afb      	ldrb	r3, [r7, #11]
 803b064:	2b00      	cmp	r3, #0
 803b066:	d16e      	bne.n	803b146 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 803b068:	68fb      	ldr	r3, [r7, #12]
 803b06a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 803b06e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 803b070:	68fb      	ldr	r3, [r7, #12]
 803b072:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 803b076:	2b03      	cmp	r3, #3
 803b078:	f040 8098 	bne.w	803b1ac <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 803b07c:	693b      	ldr	r3, [r7, #16]
 803b07e:	689a      	ldr	r2, [r3, #8]
 803b080:	693b      	ldr	r3, [r7, #16]
 803b082:	68db      	ldr	r3, [r3, #12]
 803b084:	429a      	cmp	r2, r3
 803b086:	d913      	bls.n	803b0b0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 803b088:	693b      	ldr	r3, [r7, #16]
 803b08a:	689a      	ldr	r2, [r3, #8]
 803b08c:	693b      	ldr	r3, [r7, #16]
 803b08e:	68db      	ldr	r3, [r3, #12]
 803b090:	1ad2      	subs	r2, r2, r3
 803b092:	693b      	ldr	r3, [r7, #16]
 803b094:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 803b096:	693b      	ldr	r3, [r7, #16]
 803b098:	68da      	ldr	r2, [r3, #12]
 803b09a:	693b      	ldr	r3, [r7, #16]
 803b09c:	689b      	ldr	r3, [r3, #8]
 803b09e:	4293      	cmp	r3, r2
 803b0a0:	bf28      	it	cs
 803b0a2:	4613      	movcs	r3, r2
 803b0a4:	461a      	mov	r2, r3
 803b0a6:	6879      	ldr	r1, [r7, #4]
 803b0a8:	68f8      	ldr	r0, [r7, #12]
 803b0aa:	f001 f984 	bl	803c3b6 <USBD_CtlContinueRx>
 803b0ae:	e07d      	b.n	803b1ac <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 803b0b0:	68fb      	ldr	r3, [r7, #12]
 803b0b2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 803b0b6:	f003 031f 	and.w	r3, r3, #31
 803b0ba:	2b02      	cmp	r3, #2
 803b0bc:	d014      	beq.n	803b0e8 <USBD_LL_DataOutStage+0x98>
 803b0be:	2b02      	cmp	r3, #2
 803b0c0:	d81d      	bhi.n	803b0fe <USBD_LL_DataOutStage+0xae>
 803b0c2:	2b00      	cmp	r3, #0
 803b0c4:	d002      	beq.n	803b0cc <USBD_LL_DataOutStage+0x7c>
 803b0c6:	2b01      	cmp	r3, #1
 803b0c8:	d003      	beq.n	803b0d2 <USBD_LL_DataOutStage+0x82>
 803b0ca:	e018      	b.n	803b0fe <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 803b0cc:	2300      	movs	r3, #0
 803b0ce:	75bb      	strb	r3, [r7, #22]
            break;
 803b0d0:	e018      	b.n	803b104 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 803b0d2:	68fb      	ldr	r3, [r7, #12]
 803b0d4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 803b0d8:	b2db      	uxtb	r3, r3
 803b0da:	4619      	mov	r1, r3
 803b0dc:	68f8      	ldr	r0, [r7, #12]
 803b0de:	f000 fa5e 	bl	803b59e <USBD_CoreFindIF>
 803b0e2:	4603      	mov	r3, r0
 803b0e4:	75bb      	strb	r3, [r7, #22]
            break;
 803b0e6:	e00d      	b.n	803b104 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 803b0e8:	68fb      	ldr	r3, [r7, #12]
 803b0ea:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 803b0ee:	b2db      	uxtb	r3, r3
 803b0f0:	4619      	mov	r1, r3
 803b0f2:	68f8      	ldr	r0, [r7, #12]
 803b0f4:	f000 fa60 	bl	803b5b8 <USBD_CoreFindEP>
 803b0f8:	4603      	mov	r3, r0
 803b0fa:	75bb      	strb	r3, [r7, #22]
            break;
 803b0fc:	e002      	b.n	803b104 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 803b0fe:	2300      	movs	r3, #0
 803b100:	75bb      	strb	r3, [r7, #22]
            break;
 803b102:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 803b104:	7dbb      	ldrb	r3, [r7, #22]
 803b106:	2b00      	cmp	r3, #0
 803b108:	d119      	bne.n	803b13e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803b10a:	68fb      	ldr	r3, [r7, #12]
 803b10c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803b110:	b2db      	uxtb	r3, r3
 803b112:	2b03      	cmp	r3, #3
 803b114:	d113      	bne.n	803b13e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 803b116:	7dba      	ldrb	r2, [r7, #22]
 803b118:	68fb      	ldr	r3, [r7, #12]
 803b11a:	32ae      	adds	r2, #174	; 0xae
 803b11c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803b120:	691b      	ldr	r3, [r3, #16]
 803b122:	2b00      	cmp	r3, #0
 803b124:	d00b      	beq.n	803b13e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 803b126:	7dba      	ldrb	r2, [r7, #22]
 803b128:	68fb      	ldr	r3, [r7, #12]
 803b12a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 803b12e:	7dba      	ldrb	r2, [r7, #22]
 803b130:	68fb      	ldr	r3, [r7, #12]
 803b132:	32ae      	adds	r2, #174	; 0xae
 803b134:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803b138:	691b      	ldr	r3, [r3, #16]
 803b13a:	68f8      	ldr	r0, [r7, #12]
 803b13c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 803b13e:	68f8      	ldr	r0, [r7, #12]
 803b140:	f001 f94a 	bl	803c3d8 <USBD_CtlSendStatus>
 803b144:	e032      	b.n	803b1ac <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 803b146:	7afb      	ldrb	r3, [r7, #11]
 803b148:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 803b14c:	b2db      	uxtb	r3, r3
 803b14e:	4619      	mov	r1, r3
 803b150:	68f8      	ldr	r0, [r7, #12]
 803b152:	f000 fa31 	bl	803b5b8 <USBD_CoreFindEP>
 803b156:	4603      	mov	r3, r0
 803b158:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 803b15a:	7dbb      	ldrb	r3, [r7, #22]
 803b15c:	2bff      	cmp	r3, #255	; 0xff
 803b15e:	d025      	beq.n	803b1ac <USBD_LL_DataOutStage+0x15c>
 803b160:	7dbb      	ldrb	r3, [r7, #22]
 803b162:	2b00      	cmp	r3, #0
 803b164:	d122      	bne.n	803b1ac <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803b166:	68fb      	ldr	r3, [r7, #12]
 803b168:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803b16c:	b2db      	uxtb	r3, r3
 803b16e:	2b03      	cmp	r3, #3
 803b170:	d117      	bne.n	803b1a2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 803b172:	7dba      	ldrb	r2, [r7, #22]
 803b174:	68fb      	ldr	r3, [r7, #12]
 803b176:	32ae      	adds	r2, #174	; 0xae
 803b178:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803b17c:	699b      	ldr	r3, [r3, #24]
 803b17e:	2b00      	cmp	r3, #0
 803b180:	d00f      	beq.n	803b1a2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 803b182:	7dba      	ldrb	r2, [r7, #22]
 803b184:	68fb      	ldr	r3, [r7, #12]
 803b186:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 803b18a:	7dba      	ldrb	r2, [r7, #22]
 803b18c:	68fb      	ldr	r3, [r7, #12]
 803b18e:	32ae      	adds	r2, #174	; 0xae
 803b190:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803b194:	699b      	ldr	r3, [r3, #24]
 803b196:	7afa      	ldrb	r2, [r7, #11]
 803b198:	4611      	mov	r1, r2
 803b19a:	68f8      	ldr	r0, [r7, #12]
 803b19c:	4798      	blx	r3
 803b19e:	4603      	mov	r3, r0
 803b1a0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 803b1a2:	7dfb      	ldrb	r3, [r7, #23]
 803b1a4:	2b00      	cmp	r3, #0
 803b1a6:	d001      	beq.n	803b1ac <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 803b1a8:	7dfb      	ldrb	r3, [r7, #23]
 803b1aa:	e000      	b.n	803b1ae <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 803b1ac:	2300      	movs	r3, #0
}
 803b1ae:	4618      	mov	r0, r3
 803b1b0:	3718      	adds	r7, #24
 803b1b2:	46bd      	mov	sp, r7
 803b1b4:	bd80      	pop	{r7, pc}

0803b1b6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 803b1b6:	b580      	push	{r7, lr}
 803b1b8:	b086      	sub	sp, #24
 803b1ba:	af00      	add	r7, sp, #0
 803b1bc:	60f8      	str	r0, [r7, #12]
 803b1be:	460b      	mov	r3, r1
 803b1c0:	607a      	str	r2, [r7, #4]
 803b1c2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 803b1c4:	7afb      	ldrb	r3, [r7, #11]
 803b1c6:	2b00      	cmp	r3, #0
 803b1c8:	d16f      	bne.n	803b2aa <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 803b1ca:	68fb      	ldr	r3, [r7, #12]
 803b1cc:	3314      	adds	r3, #20
 803b1ce:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 803b1d0:	68fb      	ldr	r3, [r7, #12]
 803b1d2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 803b1d6:	2b02      	cmp	r3, #2
 803b1d8:	d15a      	bne.n	803b290 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 803b1da:	693b      	ldr	r3, [r7, #16]
 803b1dc:	689a      	ldr	r2, [r3, #8]
 803b1de:	693b      	ldr	r3, [r7, #16]
 803b1e0:	68db      	ldr	r3, [r3, #12]
 803b1e2:	429a      	cmp	r2, r3
 803b1e4:	d914      	bls.n	803b210 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 803b1e6:	693b      	ldr	r3, [r7, #16]
 803b1e8:	689a      	ldr	r2, [r3, #8]
 803b1ea:	693b      	ldr	r3, [r7, #16]
 803b1ec:	68db      	ldr	r3, [r3, #12]
 803b1ee:	1ad2      	subs	r2, r2, r3
 803b1f0:	693b      	ldr	r3, [r7, #16]
 803b1f2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 803b1f4:	693b      	ldr	r3, [r7, #16]
 803b1f6:	689b      	ldr	r3, [r3, #8]
 803b1f8:	461a      	mov	r2, r3
 803b1fa:	6879      	ldr	r1, [r7, #4]
 803b1fc:	68f8      	ldr	r0, [r7, #12]
 803b1fe:	f001 f8ac 	bl	803c35a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 803b202:	2300      	movs	r3, #0
 803b204:	2200      	movs	r2, #0
 803b206:	2100      	movs	r1, #0
 803b208:	68f8      	ldr	r0, [r7, #12]
 803b20a:	f001 fdb3 	bl	803cd74 <USBD_LL_PrepareReceive>
 803b20e:	e03f      	b.n	803b290 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 803b210:	693b      	ldr	r3, [r7, #16]
 803b212:	68da      	ldr	r2, [r3, #12]
 803b214:	693b      	ldr	r3, [r7, #16]
 803b216:	689b      	ldr	r3, [r3, #8]
 803b218:	429a      	cmp	r2, r3
 803b21a:	d11c      	bne.n	803b256 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 803b21c:	693b      	ldr	r3, [r7, #16]
 803b21e:	685a      	ldr	r2, [r3, #4]
 803b220:	693b      	ldr	r3, [r7, #16]
 803b222:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 803b224:	429a      	cmp	r2, r3
 803b226:	d316      	bcc.n	803b256 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 803b228:	693b      	ldr	r3, [r7, #16]
 803b22a:	685a      	ldr	r2, [r3, #4]
 803b22c:	68fb      	ldr	r3, [r7, #12]
 803b22e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 803b232:	429a      	cmp	r2, r3
 803b234:	d20f      	bcs.n	803b256 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 803b236:	2200      	movs	r2, #0
 803b238:	2100      	movs	r1, #0
 803b23a:	68f8      	ldr	r0, [r7, #12]
 803b23c:	f001 f88d 	bl	803c35a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 803b240:	68fb      	ldr	r3, [r7, #12]
 803b242:	2200      	movs	r2, #0
 803b244:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 803b248:	2300      	movs	r3, #0
 803b24a:	2200      	movs	r2, #0
 803b24c:	2100      	movs	r1, #0
 803b24e:	68f8      	ldr	r0, [r7, #12]
 803b250:	f001 fd90 	bl	803cd74 <USBD_LL_PrepareReceive>
 803b254:	e01c      	b.n	803b290 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803b256:	68fb      	ldr	r3, [r7, #12]
 803b258:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803b25c:	b2db      	uxtb	r3, r3
 803b25e:	2b03      	cmp	r3, #3
 803b260:	d10f      	bne.n	803b282 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 803b262:	68fb      	ldr	r3, [r7, #12]
 803b264:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803b268:	68db      	ldr	r3, [r3, #12]
 803b26a:	2b00      	cmp	r3, #0
 803b26c:	d009      	beq.n	803b282 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 803b26e:	68fb      	ldr	r3, [r7, #12]
 803b270:	2200      	movs	r2, #0
 803b272:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 803b276:	68fb      	ldr	r3, [r7, #12]
 803b278:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803b27c:	68db      	ldr	r3, [r3, #12]
 803b27e:	68f8      	ldr	r0, [r7, #12]
 803b280:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 803b282:	2180      	movs	r1, #128	; 0x80
 803b284:	68f8      	ldr	r0, [r7, #12]
 803b286:	f001 fccb 	bl	803cc20 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 803b28a:	68f8      	ldr	r0, [r7, #12]
 803b28c:	f001 f8b7 	bl	803c3fe <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 803b290:	68fb      	ldr	r3, [r7, #12]
 803b292:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 803b296:	2b00      	cmp	r3, #0
 803b298:	d03a      	beq.n	803b310 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 803b29a:	68f8      	ldr	r0, [r7, #12]
 803b29c:	f7ff fe42 	bl	803af24 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 803b2a0:	68fb      	ldr	r3, [r7, #12]
 803b2a2:	2200      	movs	r2, #0
 803b2a4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 803b2a8:	e032      	b.n	803b310 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 803b2aa:	7afb      	ldrb	r3, [r7, #11]
 803b2ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 803b2b0:	b2db      	uxtb	r3, r3
 803b2b2:	4619      	mov	r1, r3
 803b2b4:	68f8      	ldr	r0, [r7, #12]
 803b2b6:	f000 f97f 	bl	803b5b8 <USBD_CoreFindEP>
 803b2ba:	4603      	mov	r3, r0
 803b2bc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 803b2be:	7dfb      	ldrb	r3, [r7, #23]
 803b2c0:	2bff      	cmp	r3, #255	; 0xff
 803b2c2:	d025      	beq.n	803b310 <USBD_LL_DataInStage+0x15a>
 803b2c4:	7dfb      	ldrb	r3, [r7, #23]
 803b2c6:	2b00      	cmp	r3, #0
 803b2c8:	d122      	bne.n	803b310 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803b2ca:	68fb      	ldr	r3, [r7, #12]
 803b2cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803b2d0:	b2db      	uxtb	r3, r3
 803b2d2:	2b03      	cmp	r3, #3
 803b2d4:	d11c      	bne.n	803b310 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 803b2d6:	7dfa      	ldrb	r2, [r7, #23]
 803b2d8:	68fb      	ldr	r3, [r7, #12]
 803b2da:	32ae      	adds	r2, #174	; 0xae
 803b2dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803b2e0:	695b      	ldr	r3, [r3, #20]
 803b2e2:	2b00      	cmp	r3, #0
 803b2e4:	d014      	beq.n	803b310 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 803b2e6:	7dfa      	ldrb	r2, [r7, #23]
 803b2e8:	68fb      	ldr	r3, [r7, #12]
 803b2ea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 803b2ee:	7dfa      	ldrb	r2, [r7, #23]
 803b2f0:	68fb      	ldr	r3, [r7, #12]
 803b2f2:	32ae      	adds	r2, #174	; 0xae
 803b2f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803b2f8:	695b      	ldr	r3, [r3, #20]
 803b2fa:	7afa      	ldrb	r2, [r7, #11]
 803b2fc:	4611      	mov	r1, r2
 803b2fe:	68f8      	ldr	r0, [r7, #12]
 803b300:	4798      	blx	r3
 803b302:	4603      	mov	r3, r0
 803b304:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 803b306:	7dbb      	ldrb	r3, [r7, #22]
 803b308:	2b00      	cmp	r3, #0
 803b30a:	d001      	beq.n	803b310 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 803b30c:	7dbb      	ldrb	r3, [r7, #22]
 803b30e:	e000      	b.n	803b312 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 803b310:	2300      	movs	r3, #0
}
 803b312:	4618      	mov	r0, r3
 803b314:	3718      	adds	r7, #24
 803b316:	46bd      	mov	sp, r7
 803b318:	bd80      	pop	{r7, pc}

0803b31a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 803b31a:	b580      	push	{r7, lr}
 803b31c:	b084      	sub	sp, #16
 803b31e:	af00      	add	r7, sp, #0
 803b320:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 803b322:	2300      	movs	r3, #0
 803b324:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 803b326:	687b      	ldr	r3, [r7, #4]
 803b328:	2201      	movs	r2, #1
 803b32a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 803b32e:	687b      	ldr	r3, [r7, #4]
 803b330:	2200      	movs	r2, #0
 803b332:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 803b336:	687b      	ldr	r3, [r7, #4]
 803b338:	2200      	movs	r2, #0
 803b33a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 803b33c:	687b      	ldr	r3, [r7, #4]
 803b33e:	2200      	movs	r2, #0
 803b340:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 803b344:	687b      	ldr	r3, [r7, #4]
 803b346:	2200      	movs	r2, #0
 803b348:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 803b34c:	687b      	ldr	r3, [r7, #4]
 803b34e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803b352:	2b00      	cmp	r3, #0
 803b354:	d014      	beq.n	803b380 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 803b356:	687b      	ldr	r3, [r7, #4]
 803b358:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803b35c:	685b      	ldr	r3, [r3, #4]
 803b35e:	2b00      	cmp	r3, #0
 803b360:	d00e      	beq.n	803b380 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 803b362:	687b      	ldr	r3, [r7, #4]
 803b364:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803b368:	685b      	ldr	r3, [r3, #4]
 803b36a:	687a      	ldr	r2, [r7, #4]
 803b36c:	6852      	ldr	r2, [r2, #4]
 803b36e:	b2d2      	uxtb	r2, r2
 803b370:	4611      	mov	r1, r2
 803b372:	6878      	ldr	r0, [r7, #4]
 803b374:	4798      	blx	r3
 803b376:	4603      	mov	r3, r0
 803b378:	2b00      	cmp	r3, #0
 803b37a:	d001      	beq.n	803b380 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 803b37c:	2303      	movs	r3, #3
 803b37e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 803b380:	2340      	movs	r3, #64	; 0x40
 803b382:	2200      	movs	r2, #0
 803b384:	2100      	movs	r1, #0
 803b386:	6878      	ldr	r0, [r7, #4]
 803b388:	f001 fc05 	bl	803cb96 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 803b38c:	687b      	ldr	r3, [r7, #4]
 803b38e:	2201      	movs	r2, #1
 803b390:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 803b394:	687b      	ldr	r3, [r7, #4]
 803b396:	2240      	movs	r2, #64	; 0x40
 803b398:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 803b39c:	2340      	movs	r3, #64	; 0x40
 803b39e:	2200      	movs	r2, #0
 803b3a0:	2180      	movs	r1, #128	; 0x80
 803b3a2:	6878      	ldr	r0, [r7, #4]
 803b3a4:	f001 fbf7 	bl	803cb96 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 803b3a8:	687b      	ldr	r3, [r7, #4]
 803b3aa:	2201      	movs	r2, #1
 803b3ac:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 803b3ae:	687b      	ldr	r3, [r7, #4]
 803b3b0:	2240      	movs	r2, #64	; 0x40
 803b3b2:	621a      	str	r2, [r3, #32]

  return ret;
 803b3b4:	7bfb      	ldrb	r3, [r7, #15]
}
 803b3b6:	4618      	mov	r0, r3
 803b3b8:	3710      	adds	r7, #16
 803b3ba:	46bd      	mov	sp, r7
 803b3bc:	bd80      	pop	{r7, pc}

0803b3be <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 803b3be:	b480      	push	{r7}
 803b3c0:	b083      	sub	sp, #12
 803b3c2:	af00      	add	r7, sp, #0
 803b3c4:	6078      	str	r0, [r7, #4]
 803b3c6:	460b      	mov	r3, r1
 803b3c8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 803b3ca:	687b      	ldr	r3, [r7, #4]
 803b3cc:	78fa      	ldrb	r2, [r7, #3]
 803b3ce:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 803b3d0:	2300      	movs	r3, #0
}
 803b3d2:	4618      	mov	r0, r3
 803b3d4:	370c      	adds	r7, #12
 803b3d6:	46bd      	mov	sp, r7
 803b3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b3dc:	4770      	bx	lr

0803b3de <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 803b3de:	b480      	push	{r7}
 803b3e0:	b083      	sub	sp, #12
 803b3e2:	af00      	add	r7, sp, #0
 803b3e4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 803b3e6:	687b      	ldr	r3, [r7, #4]
 803b3e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803b3ec:	b2da      	uxtb	r2, r3
 803b3ee:	687b      	ldr	r3, [r7, #4]
 803b3f0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 803b3f4:	687b      	ldr	r3, [r7, #4]
 803b3f6:	2204      	movs	r2, #4
 803b3f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 803b3fc:	2300      	movs	r3, #0
}
 803b3fe:	4618      	mov	r0, r3
 803b400:	370c      	adds	r7, #12
 803b402:	46bd      	mov	sp, r7
 803b404:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b408:	4770      	bx	lr

0803b40a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 803b40a:	b480      	push	{r7}
 803b40c:	b083      	sub	sp, #12
 803b40e:	af00      	add	r7, sp, #0
 803b410:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 803b412:	687b      	ldr	r3, [r7, #4]
 803b414:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803b418:	b2db      	uxtb	r3, r3
 803b41a:	2b04      	cmp	r3, #4
 803b41c:	d106      	bne.n	803b42c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 803b41e:	687b      	ldr	r3, [r7, #4]
 803b420:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 803b424:	b2da      	uxtb	r2, r3
 803b426:	687b      	ldr	r3, [r7, #4]
 803b428:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 803b42c:	2300      	movs	r3, #0
}
 803b42e:	4618      	mov	r0, r3
 803b430:	370c      	adds	r7, #12
 803b432:	46bd      	mov	sp, r7
 803b434:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b438:	4770      	bx	lr

0803b43a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 803b43a:	b580      	push	{r7, lr}
 803b43c:	b082      	sub	sp, #8
 803b43e:	af00      	add	r7, sp, #0
 803b440:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803b442:	687b      	ldr	r3, [r7, #4]
 803b444:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803b448:	b2db      	uxtb	r3, r3
 803b44a:	2b03      	cmp	r3, #3
 803b44c:	d110      	bne.n	803b470 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 803b44e:	687b      	ldr	r3, [r7, #4]
 803b450:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803b454:	2b00      	cmp	r3, #0
 803b456:	d00b      	beq.n	803b470 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 803b458:	687b      	ldr	r3, [r7, #4]
 803b45a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803b45e:	69db      	ldr	r3, [r3, #28]
 803b460:	2b00      	cmp	r3, #0
 803b462:	d005      	beq.n	803b470 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 803b464:	687b      	ldr	r3, [r7, #4]
 803b466:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803b46a:	69db      	ldr	r3, [r3, #28]
 803b46c:	6878      	ldr	r0, [r7, #4]
 803b46e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 803b470:	2300      	movs	r3, #0
}
 803b472:	4618      	mov	r0, r3
 803b474:	3708      	adds	r7, #8
 803b476:	46bd      	mov	sp, r7
 803b478:	bd80      	pop	{r7, pc}

0803b47a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 803b47a:	b580      	push	{r7, lr}
 803b47c:	b082      	sub	sp, #8
 803b47e:	af00      	add	r7, sp, #0
 803b480:	6078      	str	r0, [r7, #4]
 803b482:	460b      	mov	r3, r1
 803b484:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 803b486:	687b      	ldr	r3, [r7, #4]
 803b488:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803b48c:	687b      	ldr	r3, [r7, #4]
 803b48e:	32ae      	adds	r2, #174	; 0xae
 803b490:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803b494:	2b00      	cmp	r3, #0
 803b496:	d101      	bne.n	803b49c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 803b498:	2303      	movs	r3, #3
 803b49a:	e01c      	b.n	803b4d6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803b49c:	687b      	ldr	r3, [r7, #4]
 803b49e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803b4a2:	b2db      	uxtb	r3, r3
 803b4a4:	2b03      	cmp	r3, #3
 803b4a6:	d115      	bne.n	803b4d4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 803b4a8:	687b      	ldr	r3, [r7, #4]
 803b4aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803b4ae:	687b      	ldr	r3, [r7, #4]
 803b4b0:	32ae      	adds	r2, #174	; 0xae
 803b4b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803b4b6:	6a1b      	ldr	r3, [r3, #32]
 803b4b8:	2b00      	cmp	r3, #0
 803b4ba:	d00b      	beq.n	803b4d4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 803b4bc:	687b      	ldr	r3, [r7, #4]
 803b4be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803b4c2:	687b      	ldr	r3, [r7, #4]
 803b4c4:	32ae      	adds	r2, #174	; 0xae
 803b4c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803b4ca:	6a1b      	ldr	r3, [r3, #32]
 803b4cc:	78fa      	ldrb	r2, [r7, #3]
 803b4ce:	4611      	mov	r1, r2
 803b4d0:	6878      	ldr	r0, [r7, #4]
 803b4d2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 803b4d4:	2300      	movs	r3, #0
}
 803b4d6:	4618      	mov	r0, r3
 803b4d8:	3708      	adds	r7, #8
 803b4da:	46bd      	mov	sp, r7
 803b4dc:	bd80      	pop	{r7, pc}

0803b4de <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 803b4de:	b580      	push	{r7, lr}
 803b4e0:	b082      	sub	sp, #8
 803b4e2:	af00      	add	r7, sp, #0
 803b4e4:	6078      	str	r0, [r7, #4]
 803b4e6:	460b      	mov	r3, r1
 803b4e8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 803b4ea:	687b      	ldr	r3, [r7, #4]
 803b4ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803b4f0:	687b      	ldr	r3, [r7, #4]
 803b4f2:	32ae      	adds	r2, #174	; 0xae
 803b4f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803b4f8:	2b00      	cmp	r3, #0
 803b4fa:	d101      	bne.n	803b500 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 803b4fc:	2303      	movs	r3, #3
 803b4fe:	e01c      	b.n	803b53a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803b500:	687b      	ldr	r3, [r7, #4]
 803b502:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803b506:	b2db      	uxtb	r3, r3
 803b508:	2b03      	cmp	r3, #3
 803b50a:	d115      	bne.n	803b538 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 803b50c:	687b      	ldr	r3, [r7, #4]
 803b50e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803b512:	687b      	ldr	r3, [r7, #4]
 803b514:	32ae      	adds	r2, #174	; 0xae
 803b516:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803b51a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803b51c:	2b00      	cmp	r3, #0
 803b51e:	d00b      	beq.n	803b538 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 803b520:	687b      	ldr	r3, [r7, #4]
 803b522:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803b526:	687b      	ldr	r3, [r7, #4]
 803b528:	32ae      	adds	r2, #174	; 0xae
 803b52a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803b52e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803b530:	78fa      	ldrb	r2, [r7, #3]
 803b532:	4611      	mov	r1, r2
 803b534:	6878      	ldr	r0, [r7, #4]
 803b536:	4798      	blx	r3
    }
  }

  return USBD_OK;
 803b538:	2300      	movs	r3, #0
}
 803b53a:	4618      	mov	r0, r3
 803b53c:	3708      	adds	r7, #8
 803b53e:	46bd      	mov	sp, r7
 803b540:	bd80      	pop	{r7, pc}

0803b542 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 803b542:	b480      	push	{r7}
 803b544:	b083      	sub	sp, #12
 803b546:	af00      	add	r7, sp, #0
 803b548:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 803b54a:	2300      	movs	r3, #0
}
 803b54c:	4618      	mov	r0, r3
 803b54e:	370c      	adds	r7, #12
 803b550:	46bd      	mov	sp, r7
 803b552:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b556:	4770      	bx	lr

0803b558 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 803b558:	b580      	push	{r7, lr}
 803b55a:	b084      	sub	sp, #16
 803b55c:	af00      	add	r7, sp, #0
 803b55e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 803b560:	2300      	movs	r3, #0
 803b562:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 803b564:	687b      	ldr	r3, [r7, #4]
 803b566:	2201      	movs	r2, #1
 803b568:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 803b56c:	687b      	ldr	r3, [r7, #4]
 803b56e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803b572:	2b00      	cmp	r3, #0
 803b574:	d00e      	beq.n	803b594 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 803b576:	687b      	ldr	r3, [r7, #4]
 803b578:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803b57c:	685b      	ldr	r3, [r3, #4]
 803b57e:	687a      	ldr	r2, [r7, #4]
 803b580:	6852      	ldr	r2, [r2, #4]
 803b582:	b2d2      	uxtb	r2, r2
 803b584:	4611      	mov	r1, r2
 803b586:	6878      	ldr	r0, [r7, #4]
 803b588:	4798      	blx	r3
 803b58a:	4603      	mov	r3, r0
 803b58c:	2b00      	cmp	r3, #0
 803b58e:	d001      	beq.n	803b594 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 803b590:	2303      	movs	r3, #3
 803b592:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 803b594:	7bfb      	ldrb	r3, [r7, #15]
}
 803b596:	4618      	mov	r0, r3
 803b598:	3710      	adds	r7, #16
 803b59a:	46bd      	mov	sp, r7
 803b59c:	bd80      	pop	{r7, pc}

0803b59e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 803b59e:	b480      	push	{r7}
 803b5a0:	b083      	sub	sp, #12
 803b5a2:	af00      	add	r7, sp, #0
 803b5a4:	6078      	str	r0, [r7, #4]
 803b5a6:	460b      	mov	r3, r1
 803b5a8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 803b5aa:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 803b5ac:	4618      	mov	r0, r3
 803b5ae:	370c      	adds	r7, #12
 803b5b0:	46bd      	mov	sp, r7
 803b5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b5b6:	4770      	bx	lr

0803b5b8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 803b5b8:	b480      	push	{r7}
 803b5ba:	b083      	sub	sp, #12
 803b5bc:	af00      	add	r7, sp, #0
 803b5be:	6078      	str	r0, [r7, #4]
 803b5c0:	460b      	mov	r3, r1
 803b5c2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 803b5c4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 803b5c6:	4618      	mov	r0, r3
 803b5c8:	370c      	adds	r7, #12
 803b5ca:	46bd      	mov	sp, r7
 803b5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b5d0:	4770      	bx	lr

0803b5d2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 803b5d2:	b580      	push	{r7, lr}
 803b5d4:	b086      	sub	sp, #24
 803b5d6:	af00      	add	r7, sp, #0
 803b5d8:	6078      	str	r0, [r7, #4]
 803b5da:	460b      	mov	r3, r1
 803b5dc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 803b5de:	687b      	ldr	r3, [r7, #4]
 803b5e0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 803b5e2:	687b      	ldr	r3, [r7, #4]
 803b5e4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 803b5e6:	2300      	movs	r3, #0
 803b5e8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 803b5ea:	68fb      	ldr	r3, [r7, #12]
 803b5ec:	885b      	ldrh	r3, [r3, #2]
 803b5ee:	b29a      	uxth	r2, r3
 803b5f0:	68fb      	ldr	r3, [r7, #12]
 803b5f2:	781b      	ldrb	r3, [r3, #0]
 803b5f4:	b29b      	uxth	r3, r3
 803b5f6:	429a      	cmp	r2, r3
 803b5f8:	d920      	bls.n	803b63c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 803b5fa:	68fb      	ldr	r3, [r7, #12]
 803b5fc:	781b      	ldrb	r3, [r3, #0]
 803b5fe:	b29b      	uxth	r3, r3
 803b600:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 803b602:	e013      	b.n	803b62c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 803b604:	f107 030a 	add.w	r3, r7, #10
 803b608:	4619      	mov	r1, r3
 803b60a:	6978      	ldr	r0, [r7, #20]
 803b60c:	f000 f81b 	bl	803b646 <USBD_GetNextDesc>
 803b610:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 803b612:	697b      	ldr	r3, [r7, #20]
 803b614:	785b      	ldrb	r3, [r3, #1]
 803b616:	2b05      	cmp	r3, #5
 803b618:	d108      	bne.n	803b62c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 803b61a:	697b      	ldr	r3, [r7, #20]
 803b61c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 803b61e:	693b      	ldr	r3, [r7, #16]
 803b620:	789b      	ldrb	r3, [r3, #2]
 803b622:	78fa      	ldrb	r2, [r7, #3]
 803b624:	429a      	cmp	r2, r3
 803b626:	d008      	beq.n	803b63a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 803b628:	2300      	movs	r3, #0
 803b62a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 803b62c:	68fb      	ldr	r3, [r7, #12]
 803b62e:	885b      	ldrh	r3, [r3, #2]
 803b630:	b29a      	uxth	r2, r3
 803b632:	897b      	ldrh	r3, [r7, #10]
 803b634:	429a      	cmp	r2, r3
 803b636:	d8e5      	bhi.n	803b604 <USBD_GetEpDesc+0x32>
 803b638:	e000      	b.n	803b63c <USBD_GetEpDesc+0x6a>
          break;
 803b63a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 803b63c:	693b      	ldr	r3, [r7, #16]
}
 803b63e:	4618      	mov	r0, r3
 803b640:	3718      	adds	r7, #24
 803b642:	46bd      	mov	sp, r7
 803b644:	bd80      	pop	{r7, pc}

0803b646 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 803b646:	b480      	push	{r7}
 803b648:	b085      	sub	sp, #20
 803b64a:	af00      	add	r7, sp, #0
 803b64c:	6078      	str	r0, [r7, #4]
 803b64e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 803b650:	687b      	ldr	r3, [r7, #4]
 803b652:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 803b654:	683b      	ldr	r3, [r7, #0]
 803b656:	881a      	ldrh	r2, [r3, #0]
 803b658:	68fb      	ldr	r3, [r7, #12]
 803b65a:	781b      	ldrb	r3, [r3, #0]
 803b65c:	b29b      	uxth	r3, r3
 803b65e:	4413      	add	r3, r2
 803b660:	b29a      	uxth	r2, r3
 803b662:	683b      	ldr	r3, [r7, #0]
 803b664:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 803b666:	68fb      	ldr	r3, [r7, #12]
 803b668:	781b      	ldrb	r3, [r3, #0]
 803b66a:	461a      	mov	r2, r3
 803b66c:	687b      	ldr	r3, [r7, #4]
 803b66e:	4413      	add	r3, r2
 803b670:	60fb      	str	r3, [r7, #12]

  return (pnext);
 803b672:	68fb      	ldr	r3, [r7, #12]
}
 803b674:	4618      	mov	r0, r3
 803b676:	3714      	adds	r7, #20
 803b678:	46bd      	mov	sp, r7
 803b67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b67e:	4770      	bx	lr

0803b680 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 803b680:	b480      	push	{r7}
 803b682:	b087      	sub	sp, #28
 803b684:	af00      	add	r7, sp, #0
 803b686:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 803b688:	687b      	ldr	r3, [r7, #4]
 803b68a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 803b68c:	697b      	ldr	r3, [r7, #20]
 803b68e:	781b      	ldrb	r3, [r3, #0]
 803b690:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 803b692:	697b      	ldr	r3, [r7, #20]
 803b694:	3301      	adds	r3, #1
 803b696:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 803b698:	697b      	ldr	r3, [r7, #20]
 803b69a:	781b      	ldrb	r3, [r3, #0]
 803b69c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 803b69e:	8a3b      	ldrh	r3, [r7, #16]
 803b6a0:	021b      	lsls	r3, r3, #8
 803b6a2:	b21a      	sxth	r2, r3
 803b6a4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 803b6a8:	4313      	orrs	r3, r2
 803b6aa:	b21b      	sxth	r3, r3
 803b6ac:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 803b6ae:	89fb      	ldrh	r3, [r7, #14]
}
 803b6b0:	4618      	mov	r0, r3
 803b6b2:	371c      	adds	r7, #28
 803b6b4:	46bd      	mov	sp, r7
 803b6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b6ba:	4770      	bx	lr

0803b6bc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803b6bc:	b580      	push	{r7, lr}
 803b6be:	b084      	sub	sp, #16
 803b6c0:	af00      	add	r7, sp, #0
 803b6c2:	6078      	str	r0, [r7, #4]
 803b6c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 803b6c6:	2300      	movs	r3, #0
 803b6c8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 803b6ca:	683b      	ldr	r3, [r7, #0]
 803b6cc:	781b      	ldrb	r3, [r3, #0]
 803b6ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 803b6d2:	2b40      	cmp	r3, #64	; 0x40
 803b6d4:	d005      	beq.n	803b6e2 <USBD_StdDevReq+0x26>
 803b6d6:	2b40      	cmp	r3, #64	; 0x40
 803b6d8:	d857      	bhi.n	803b78a <USBD_StdDevReq+0xce>
 803b6da:	2b00      	cmp	r3, #0
 803b6dc:	d00f      	beq.n	803b6fe <USBD_StdDevReq+0x42>
 803b6de:	2b20      	cmp	r3, #32
 803b6e0:	d153      	bne.n	803b78a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 803b6e2:	687b      	ldr	r3, [r7, #4]
 803b6e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803b6e8:	687b      	ldr	r3, [r7, #4]
 803b6ea:	32ae      	adds	r2, #174	; 0xae
 803b6ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803b6f0:	689b      	ldr	r3, [r3, #8]
 803b6f2:	6839      	ldr	r1, [r7, #0]
 803b6f4:	6878      	ldr	r0, [r7, #4]
 803b6f6:	4798      	blx	r3
 803b6f8:	4603      	mov	r3, r0
 803b6fa:	73fb      	strb	r3, [r7, #15]
      break;
 803b6fc:	e04a      	b.n	803b794 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 803b6fe:	683b      	ldr	r3, [r7, #0]
 803b700:	785b      	ldrb	r3, [r3, #1]
 803b702:	2b09      	cmp	r3, #9
 803b704:	d83b      	bhi.n	803b77e <USBD_StdDevReq+0xc2>
 803b706:	a201      	add	r2, pc, #4	; (adr r2, 803b70c <USBD_StdDevReq+0x50>)
 803b708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803b70c:	0803b761 	.word	0x0803b761
 803b710:	0803b775 	.word	0x0803b775
 803b714:	0803b77f 	.word	0x0803b77f
 803b718:	0803b76b 	.word	0x0803b76b
 803b71c:	0803b77f 	.word	0x0803b77f
 803b720:	0803b73f 	.word	0x0803b73f
 803b724:	0803b735 	.word	0x0803b735
 803b728:	0803b77f 	.word	0x0803b77f
 803b72c:	0803b757 	.word	0x0803b757
 803b730:	0803b749 	.word	0x0803b749
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 803b734:	6839      	ldr	r1, [r7, #0]
 803b736:	6878      	ldr	r0, [r7, #4]
 803b738:	f000 fa3c 	bl	803bbb4 <USBD_GetDescriptor>
          break;
 803b73c:	e024      	b.n	803b788 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 803b73e:	6839      	ldr	r1, [r7, #0]
 803b740:	6878      	ldr	r0, [r7, #4]
 803b742:	f000 fba1 	bl	803be88 <USBD_SetAddress>
          break;
 803b746:	e01f      	b.n	803b788 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 803b748:	6839      	ldr	r1, [r7, #0]
 803b74a:	6878      	ldr	r0, [r7, #4]
 803b74c:	f000 fbe0 	bl	803bf10 <USBD_SetConfig>
 803b750:	4603      	mov	r3, r0
 803b752:	73fb      	strb	r3, [r7, #15]
          break;
 803b754:	e018      	b.n	803b788 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 803b756:	6839      	ldr	r1, [r7, #0]
 803b758:	6878      	ldr	r0, [r7, #4]
 803b75a:	f000 fc83 	bl	803c064 <USBD_GetConfig>
          break;
 803b75e:	e013      	b.n	803b788 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 803b760:	6839      	ldr	r1, [r7, #0]
 803b762:	6878      	ldr	r0, [r7, #4]
 803b764:	f000 fcb4 	bl	803c0d0 <USBD_GetStatus>
          break;
 803b768:	e00e      	b.n	803b788 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 803b76a:	6839      	ldr	r1, [r7, #0]
 803b76c:	6878      	ldr	r0, [r7, #4]
 803b76e:	f000 fce3 	bl	803c138 <USBD_SetFeature>
          break;
 803b772:	e009      	b.n	803b788 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 803b774:	6839      	ldr	r1, [r7, #0]
 803b776:	6878      	ldr	r0, [r7, #4]
 803b778:	f000 fd07 	bl	803c18a <USBD_ClrFeature>
          break;
 803b77c:	e004      	b.n	803b788 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 803b77e:	6839      	ldr	r1, [r7, #0]
 803b780:	6878      	ldr	r0, [r7, #4]
 803b782:	f000 fd5e 	bl	803c242 <USBD_CtlError>
          break;
 803b786:	bf00      	nop
      }
      break;
 803b788:	e004      	b.n	803b794 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 803b78a:	6839      	ldr	r1, [r7, #0]
 803b78c:	6878      	ldr	r0, [r7, #4]
 803b78e:	f000 fd58 	bl	803c242 <USBD_CtlError>
      break;
 803b792:	bf00      	nop
  }

  return ret;
 803b794:	7bfb      	ldrb	r3, [r7, #15]
}
 803b796:	4618      	mov	r0, r3
 803b798:	3710      	adds	r7, #16
 803b79a:	46bd      	mov	sp, r7
 803b79c:	bd80      	pop	{r7, pc}
 803b79e:	bf00      	nop

0803b7a0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803b7a0:	b580      	push	{r7, lr}
 803b7a2:	b084      	sub	sp, #16
 803b7a4:	af00      	add	r7, sp, #0
 803b7a6:	6078      	str	r0, [r7, #4]
 803b7a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 803b7aa:	2300      	movs	r3, #0
 803b7ac:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 803b7ae:	683b      	ldr	r3, [r7, #0]
 803b7b0:	781b      	ldrb	r3, [r3, #0]
 803b7b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 803b7b6:	2b40      	cmp	r3, #64	; 0x40
 803b7b8:	d005      	beq.n	803b7c6 <USBD_StdItfReq+0x26>
 803b7ba:	2b40      	cmp	r3, #64	; 0x40
 803b7bc:	d852      	bhi.n	803b864 <USBD_StdItfReq+0xc4>
 803b7be:	2b00      	cmp	r3, #0
 803b7c0:	d001      	beq.n	803b7c6 <USBD_StdItfReq+0x26>
 803b7c2:	2b20      	cmp	r3, #32
 803b7c4:	d14e      	bne.n	803b864 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 803b7c6:	687b      	ldr	r3, [r7, #4]
 803b7c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803b7cc:	b2db      	uxtb	r3, r3
 803b7ce:	3b01      	subs	r3, #1
 803b7d0:	2b02      	cmp	r3, #2
 803b7d2:	d840      	bhi.n	803b856 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 803b7d4:	683b      	ldr	r3, [r7, #0]
 803b7d6:	889b      	ldrh	r3, [r3, #4]
 803b7d8:	b2db      	uxtb	r3, r3
 803b7da:	2b01      	cmp	r3, #1
 803b7dc:	d836      	bhi.n	803b84c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 803b7de:	683b      	ldr	r3, [r7, #0]
 803b7e0:	889b      	ldrh	r3, [r3, #4]
 803b7e2:	b2db      	uxtb	r3, r3
 803b7e4:	4619      	mov	r1, r3
 803b7e6:	6878      	ldr	r0, [r7, #4]
 803b7e8:	f7ff fed9 	bl	803b59e <USBD_CoreFindIF>
 803b7ec:	4603      	mov	r3, r0
 803b7ee:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 803b7f0:	7bbb      	ldrb	r3, [r7, #14]
 803b7f2:	2bff      	cmp	r3, #255	; 0xff
 803b7f4:	d01d      	beq.n	803b832 <USBD_StdItfReq+0x92>
 803b7f6:	7bbb      	ldrb	r3, [r7, #14]
 803b7f8:	2b00      	cmp	r3, #0
 803b7fa:	d11a      	bne.n	803b832 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 803b7fc:	7bba      	ldrb	r2, [r7, #14]
 803b7fe:	687b      	ldr	r3, [r7, #4]
 803b800:	32ae      	adds	r2, #174	; 0xae
 803b802:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803b806:	689b      	ldr	r3, [r3, #8]
 803b808:	2b00      	cmp	r3, #0
 803b80a:	d00f      	beq.n	803b82c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 803b80c:	7bba      	ldrb	r2, [r7, #14]
 803b80e:	687b      	ldr	r3, [r7, #4]
 803b810:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 803b814:	7bba      	ldrb	r2, [r7, #14]
 803b816:	687b      	ldr	r3, [r7, #4]
 803b818:	32ae      	adds	r2, #174	; 0xae
 803b81a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803b81e:	689b      	ldr	r3, [r3, #8]
 803b820:	6839      	ldr	r1, [r7, #0]
 803b822:	6878      	ldr	r0, [r7, #4]
 803b824:	4798      	blx	r3
 803b826:	4603      	mov	r3, r0
 803b828:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 803b82a:	e004      	b.n	803b836 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 803b82c:	2303      	movs	r3, #3
 803b82e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 803b830:	e001      	b.n	803b836 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 803b832:	2303      	movs	r3, #3
 803b834:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 803b836:	683b      	ldr	r3, [r7, #0]
 803b838:	88db      	ldrh	r3, [r3, #6]
 803b83a:	2b00      	cmp	r3, #0
 803b83c:	d110      	bne.n	803b860 <USBD_StdItfReq+0xc0>
 803b83e:	7bfb      	ldrb	r3, [r7, #15]
 803b840:	2b00      	cmp	r3, #0
 803b842:	d10d      	bne.n	803b860 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 803b844:	6878      	ldr	r0, [r7, #4]
 803b846:	f000 fdc7 	bl	803c3d8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 803b84a:	e009      	b.n	803b860 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 803b84c:	6839      	ldr	r1, [r7, #0]
 803b84e:	6878      	ldr	r0, [r7, #4]
 803b850:	f000 fcf7 	bl	803c242 <USBD_CtlError>
          break;
 803b854:	e004      	b.n	803b860 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 803b856:	6839      	ldr	r1, [r7, #0]
 803b858:	6878      	ldr	r0, [r7, #4]
 803b85a:	f000 fcf2 	bl	803c242 <USBD_CtlError>
          break;
 803b85e:	e000      	b.n	803b862 <USBD_StdItfReq+0xc2>
          break;
 803b860:	bf00      	nop
      }
      break;
 803b862:	e004      	b.n	803b86e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 803b864:	6839      	ldr	r1, [r7, #0]
 803b866:	6878      	ldr	r0, [r7, #4]
 803b868:	f000 fceb 	bl	803c242 <USBD_CtlError>
      break;
 803b86c:	bf00      	nop
  }

  return ret;
 803b86e:	7bfb      	ldrb	r3, [r7, #15]
}
 803b870:	4618      	mov	r0, r3
 803b872:	3710      	adds	r7, #16
 803b874:	46bd      	mov	sp, r7
 803b876:	bd80      	pop	{r7, pc}

0803b878 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803b878:	b580      	push	{r7, lr}
 803b87a:	b084      	sub	sp, #16
 803b87c:	af00      	add	r7, sp, #0
 803b87e:	6078      	str	r0, [r7, #4]
 803b880:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 803b882:	2300      	movs	r3, #0
 803b884:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 803b886:	683b      	ldr	r3, [r7, #0]
 803b888:	889b      	ldrh	r3, [r3, #4]
 803b88a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 803b88c:	683b      	ldr	r3, [r7, #0]
 803b88e:	781b      	ldrb	r3, [r3, #0]
 803b890:	f003 0360 	and.w	r3, r3, #96	; 0x60
 803b894:	2b40      	cmp	r3, #64	; 0x40
 803b896:	d007      	beq.n	803b8a8 <USBD_StdEPReq+0x30>
 803b898:	2b40      	cmp	r3, #64	; 0x40
 803b89a:	f200 817f 	bhi.w	803bb9c <USBD_StdEPReq+0x324>
 803b89e:	2b00      	cmp	r3, #0
 803b8a0:	d02a      	beq.n	803b8f8 <USBD_StdEPReq+0x80>
 803b8a2:	2b20      	cmp	r3, #32
 803b8a4:	f040 817a 	bne.w	803bb9c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 803b8a8:	7bbb      	ldrb	r3, [r7, #14]
 803b8aa:	4619      	mov	r1, r3
 803b8ac:	6878      	ldr	r0, [r7, #4]
 803b8ae:	f7ff fe83 	bl	803b5b8 <USBD_CoreFindEP>
 803b8b2:	4603      	mov	r3, r0
 803b8b4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 803b8b6:	7b7b      	ldrb	r3, [r7, #13]
 803b8b8:	2bff      	cmp	r3, #255	; 0xff
 803b8ba:	f000 8174 	beq.w	803bba6 <USBD_StdEPReq+0x32e>
 803b8be:	7b7b      	ldrb	r3, [r7, #13]
 803b8c0:	2b00      	cmp	r3, #0
 803b8c2:	f040 8170 	bne.w	803bba6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 803b8c6:	7b7a      	ldrb	r2, [r7, #13]
 803b8c8:	687b      	ldr	r3, [r7, #4]
 803b8ca:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 803b8ce:	7b7a      	ldrb	r2, [r7, #13]
 803b8d0:	687b      	ldr	r3, [r7, #4]
 803b8d2:	32ae      	adds	r2, #174	; 0xae
 803b8d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803b8d8:	689b      	ldr	r3, [r3, #8]
 803b8da:	2b00      	cmp	r3, #0
 803b8dc:	f000 8163 	beq.w	803bba6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 803b8e0:	7b7a      	ldrb	r2, [r7, #13]
 803b8e2:	687b      	ldr	r3, [r7, #4]
 803b8e4:	32ae      	adds	r2, #174	; 0xae
 803b8e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803b8ea:	689b      	ldr	r3, [r3, #8]
 803b8ec:	6839      	ldr	r1, [r7, #0]
 803b8ee:	6878      	ldr	r0, [r7, #4]
 803b8f0:	4798      	blx	r3
 803b8f2:	4603      	mov	r3, r0
 803b8f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 803b8f6:	e156      	b.n	803bba6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 803b8f8:	683b      	ldr	r3, [r7, #0]
 803b8fa:	785b      	ldrb	r3, [r3, #1]
 803b8fc:	2b03      	cmp	r3, #3
 803b8fe:	d008      	beq.n	803b912 <USBD_StdEPReq+0x9a>
 803b900:	2b03      	cmp	r3, #3
 803b902:	f300 8145 	bgt.w	803bb90 <USBD_StdEPReq+0x318>
 803b906:	2b00      	cmp	r3, #0
 803b908:	f000 809b 	beq.w	803ba42 <USBD_StdEPReq+0x1ca>
 803b90c:	2b01      	cmp	r3, #1
 803b90e:	d03c      	beq.n	803b98a <USBD_StdEPReq+0x112>
 803b910:	e13e      	b.n	803bb90 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 803b912:	687b      	ldr	r3, [r7, #4]
 803b914:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803b918:	b2db      	uxtb	r3, r3
 803b91a:	2b02      	cmp	r3, #2
 803b91c:	d002      	beq.n	803b924 <USBD_StdEPReq+0xac>
 803b91e:	2b03      	cmp	r3, #3
 803b920:	d016      	beq.n	803b950 <USBD_StdEPReq+0xd8>
 803b922:	e02c      	b.n	803b97e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 803b924:	7bbb      	ldrb	r3, [r7, #14]
 803b926:	2b00      	cmp	r3, #0
 803b928:	d00d      	beq.n	803b946 <USBD_StdEPReq+0xce>
 803b92a:	7bbb      	ldrb	r3, [r7, #14]
 803b92c:	2b80      	cmp	r3, #128	; 0x80
 803b92e:	d00a      	beq.n	803b946 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 803b930:	7bbb      	ldrb	r3, [r7, #14]
 803b932:	4619      	mov	r1, r3
 803b934:	6878      	ldr	r0, [r7, #4]
 803b936:	f001 f973 	bl	803cc20 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 803b93a:	2180      	movs	r1, #128	; 0x80
 803b93c:	6878      	ldr	r0, [r7, #4]
 803b93e:	f001 f96f 	bl	803cc20 <USBD_LL_StallEP>
 803b942:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 803b944:	e020      	b.n	803b988 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 803b946:	6839      	ldr	r1, [r7, #0]
 803b948:	6878      	ldr	r0, [r7, #4]
 803b94a:	f000 fc7a 	bl	803c242 <USBD_CtlError>
              break;
 803b94e:	e01b      	b.n	803b988 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 803b950:	683b      	ldr	r3, [r7, #0]
 803b952:	885b      	ldrh	r3, [r3, #2]
 803b954:	2b00      	cmp	r3, #0
 803b956:	d10e      	bne.n	803b976 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 803b958:	7bbb      	ldrb	r3, [r7, #14]
 803b95a:	2b00      	cmp	r3, #0
 803b95c:	d00b      	beq.n	803b976 <USBD_StdEPReq+0xfe>
 803b95e:	7bbb      	ldrb	r3, [r7, #14]
 803b960:	2b80      	cmp	r3, #128	; 0x80
 803b962:	d008      	beq.n	803b976 <USBD_StdEPReq+0xfe>
 803b964:	683b      	ldr	r3, [r7, #0]
 803b966:	88db      	ldrh	r3, [r3, #6]
 803b968:	2b00      	cmp	r3, #0
 803b96a:	d104      	bne.n	803b976 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 803b96c:	7bbb      	ldrb	r3, [r7, #14]
 803b96e:	4619      	mov	r1, r3
 803b970:	6878      	ldr	r0, [r7, #4]
 803b972:	f001 f955 	bl	803cc20 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 803b976:	6878      	ldr	r0, [r7, #4]
 803b978:	f000 fd2e 	bl	803c3d8 <USBD_CtlSendStatus>

              break;
 803b97c:	e004      	b.n	803b988 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 803b97e:	6839      	ldr	r1, [r7, #0]
 803b980:	6878      	ldr	r0, [r7, #4]
 803b982:	f000 fc5e 	bl	803c242 <USBD_CtlError>
              break;
 803b986:	bf00      	nop
          }
          break;
 803b988:	e107      	b.n	803bb9a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 803b98a:	687b      	ldr	r3, [r7, #4]
 803b98c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803b990:	b2db      	uxtb	r3, r3
 803b992:	2b02      	cmp	r3, #2
 803b994:	d002      	beq.n	803b99c <USBD_StdEPReq+0x124>
 803b996:	2b03      	cmp	r3, #3
 803b998:	d016      	beq.n	803b9c8 <USBD_StdEPReq+0x150>
 803b99a:	e04b      	b.n	803ba34 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 803b99c:	7bbb      	ldrb	r3, [r7, #14]
 803b99e:	2b00      	cmp	r3, #0
 803b9a0:	d00d      	beq.n	803b9be <USBD_StdEPReq+0x146>
 803b9a2:	7bbb      	ldrb	r3, [r7, #14]
 803b9a4:	2b80      	cmp	r3, #128	; 0x80
 803b9a6:	d00a      	beq.n	803b9be <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 803b9a8:	7bbb      	ldrb	r3, [r7, #14]
 803b9aa:	4619      	mov	r1, r3
 803b9ac:	6878      	ldr	r0, [r7, #4]
 803b9ae:	f001 f937 	bl	803cc20 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 803b9b2:	2180      	movs	r1, #128	; 0x80
 803b9b4:	6878      	ldr	r0, [r7, #4]
 803b9b6:	f001 f933 	bl	803cc20 <USBD_LL_StallEP>
 803b9ba:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 803b9bc:	e040      	b.n	803ba40 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 803b9be:	6839      	ldr	r1, [r7, #0]
 803b9c0:	6878      	ldr	r0, [r7, #4]
 803b9c2:	f000 fc3e 	bl	803c242 <USBD_CtlError>
              break;
 803b9c6:	e03b      	b.n	803ba40 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 803b9c8:	683b      	ldr	r3, [r7, #0]
 803b9ca:	885b      	ldrh	r3, [r3, #2]
 803b9cc:	2b00      	cmp	r3, #0
 803b9ce:	d136      	bne.n	803ba3e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 803b9d0:	7bbb      	ldrb	r3, [r7, #14]
 803b9d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 803b9d6:	2b00      	cmp	r3, #0
 803b9d8:	d004      	beq.n	803b9e4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 803b9da:	7bbb      	ldrb	r3, [r7, #14]
 803b9dc:	4619      	mov	r1, r3
 803b9de:	6878      	ldr	r0, [r7, #4]
 803b9e0:	f001 f93d 	bl	803cc5e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 803b9e4:	6878      	ldr	r0, [r7, #4]
 803b9e6:	f000 fcf7 	bl	803c3d8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 803b9ea:	7bbb      	ldrb	r3, [r7, #14]
 803b9ec:	4619      	mov	r1, r3
 803b9ee:	6878      	ldr	r0, [r7, #4]
 803b9f0:	f7ff fde2 	bl	803b5b8 <USBD_CoreFindEP>
 803b9f4:	4603      	mov	r3, r0
 803b9f6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 803b9f8:	7b7b      	ldrb	r3, [r7, #13]
 803b9fa:	2bff      	cmp	r3, #255	; 0xff
 803b9fc:	d01f      	beq.n	803ba3e <USBD_StdEPReq+0x1c6>
 803b9fe:	7b7b      	ldrb	r3, [r7, #13]
 803ba00:	2b00      	cmp	r3, #0
 803ba02:	d11c      	bne.n	803ba3e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 803ba04:	7b7a      	ldrb	r2, [r7, #13]
 803ba06:	687b      	ldr	r3, [r7, #4]
 803ba08:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 803ba0c:	7b7a      	ldrb	r2, [r7, #13]
 803ba0e:	687b      	ldr	r3, [r7, #4]
 803ba10:	32ae      	adds	r2, #174	; 0xae
 803ba12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803ba16:	689b      	ldr	r3, [r3, #8]
 803ba18:	2b00      	cmp	r3, #0
 803ba1a:	d010      	beq.n	803ba3e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 803ba1c:	7b7a      	ldrb	r2, [r7, #13]
 803ba1e:	687b      	ldr	r3, [r7, #4]
 803ba20:	32ae      	adds	r2, #174	; 0xae
 803ba22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803ba26:	689b      	ldr	r3, [r3, #8]
 803ba28:	6839      	ldr	r1, [r7, #0]
 803ba2a:	6878      	ldr	r0, [r7, #4]
 803ba2c:	4798      	blx	r3
 803ba2e:	4603      	mov	r3, r0
 803ba30:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 803ba32:	e004      	b.n	803ba3e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 803ba34:	6839      	ldr	r1, [r7, #0]
 803ba36:	6878      	ldr	r0, [r7, #4]
 803ba38:	f000 fc03 	bl	803c242 <USBD_CtlError>
              break;
 803ba3c:	e000      	b.n	803ba40 <USBD_StdEPReq+0x1c8>
              break;
 803ba3e:	bf00      	nop
          }
          break;
 803ba40:	e0ab      	b.n	803bb9a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 803ba42:	687b      	ldr	r3, [r7, #4]
 803ba44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803ba48:	b2db      	uxtb	r3, r3
 803ba4a:	2b02      	cmp	r3, #2
 803ba4c:	d002      	beq.n	803ba54 <USBD_StdEPReq+0x1dc>
 803ba4e:	2b03      	cmp	r3, #3
 803ba50:	d032      	beq.n	803bab8 <USBD_StdEPReq+0x240>
 803ba52:	e097      	b.n	803bb84 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 803ba54:	7bbb      	ldrb	r3, [r7, #14]
 803ba56:	2b00      	cmp	r3, #0
 803ba58:	d007      	beq.n	803ba6a <USBD_StdEPReq+0x1f2>
 803ba5a:	7bbb      	ldrb	r3, [r7, #14]
 803ba5c:	2b80      	cmp	r3, #128	; 0x80
 803ba5e:	d004      	beq.n	803ba6a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 803ba60:	6839      	ldr	r1, [r7, #0]
 803ba62:	6878      	ldr	r0, [r7, #4]
 803ba64:	f000 fbed 	bl	803c242 <USBD_CtlError>
                break;
 803ba68:	e091      	b.n	803bb8e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 803ba6a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 803ba6e:	2b00      	cmp	r3, #0
 803ba70:	da0b      	bge.n	803ba8a <USBD_StdEPReq+0x212>
 803ba72:	7bbb      	ldrb	r3, [r7, #14]
 803ba74:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 803ba78:	4613      	mov	r3, r2
 803ba7a:	009b      	lsls	r3, r3, #2
 803ba7c:	4413      	add	r3, r2
 803ba7e:	009b      	lsls	r3, r3, #2
 803ba80:	3310      	adds	r3, #16
 803ba82:	687a      	ldr	r2, [r7, #4]
 803ba84:	4413      	add	r3, r2
 803ba86:	3304      	adds	r3, #4
 803ba88:	e00b      	b.n	803baa2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 803ba8a:	7bbb      	ldrb	r3, [r7, #14]
 803ba8c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 803ba90:	4613      	mov	r3, r2
 803ba92:	009b      	lsls	r3, r3, #2
 803ba94:	4413      	add	r3, r2
 803ba96:	009b      	lsls	r3, r3, #2
 803ba98:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 803ba9c:	687a      	ldr	r2, [r7, #4]
 803ba9e:	4413      	add	r3, r2
 803baa0:	3304      	adds	r3, #4
 803baa2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 803baa4:	68bb      	ldr	r3, [r7, #8]
 803baa6:	2200      	movs	r2, #0
 803baa8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 803baaa:	68bb      	ldr	r3, [r7, #8]
 803baac:	2202      	movs	r2, #2
 803baae:	4619      	mov	r1, r3
 803bab0:	6878      	ldr	r0, [r7, #4]
 803bab2:	f000 fc37 	bl	803c324 <USBD_CtlSendData>
              break;
 803bab6:	e06a      	b.n	803bb8e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 803bab8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 803babc:	2b00      	cmp	r3, #0
 803babe:	da11      	bge.n	803bae4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 803bac0:	7bbb      	ldrb	r3, [r7, #14]
 803bac2:	f003 020f 	and.w	r2, r3, #15
 803bac6:	6879      	ldr	r1, [r7, #4]
 803bac8:	4613      	mov	r3, r2
 803baca:	009b      	lsls	r3, r3, #2
 803bacc:	4413      	add	r3, r2
 803bace:	009b      	lsls	r3, r3, #2
 803bad0:	440b      	add	r3, r1
 803bad2:	3324      	adds	r3, #36	; 0x24
 803bad4:	881b      	ldrh	r3, [r3, #0]
 803bad6:	2b00      	cmp	r3, #0
 803bad8:	d117      	bne.n	803bb0a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 803bada:	6839      	ldr	r1, [r7, #0]
 803badc:	6878      	ldr	r0, [r7, #4]
 803bade:	f000 fbb0 	bl	803c242 <USBD_CtlError>
                  break;
 803bae2:	e054      	b.n	803bb8e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 803bae4:	7bbb      	ldrb	r3, [r7, #14]
 803bae6:	f003 020f 	and.w	r2, r3, #15
 803baea:	6879      	ldr	r1, [r7, #4]
 803baec:	4613      	mov	r3, r2
 803baee:	009b      	lsls	r3, r3, #2
 803baf0:	4413      	add	r3, r2
 803baf2:	009b      	lsls	r3, r3, #2
 803baf4:	440b      	add	r3, r1
 803baf6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 803bafa:	881b      	ldrh	r3, [r3, #0]
 803bafc:	2b00      	cmp	r3, #0
 803bafe:	d104      	bne.n	803bb0a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 803bb00:	6839      	ldr	r1, [r7, #0]
 803bb02:	6878      	ldr	r0, [r7, #4]
 803bb04:	f000 fb9d 	bl	803c242 <USBD_CtlError>
                  break;
 803bb08:	e041      	b.n	803bb8e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 803bb0a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 803bb0e:	2b00      	cmp	r3, #0
 803bb10:	da0b      	bge.n	803bb2a <USBD_StdEPReq+0x2b2>
 803bb12:	7bbb      	ldrb	r3, [r7, #14]
 803bb14:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 803bb18:	4613      	mov	r3, r2
 803bb1a:	009b      	lsls	r3, r3, #2
 803bb1c:	4413      	add	r3, r2
 803bb1e:	009b      	lsls	r3, r3, #2
 803bb20:	3310      	adds	r3, #16
 803bb22:	687a      	ldr	r2, [r7, #4]
 803bb24:	4413      	add	r3, r2
 803bb26:	3304      	adds	r3, #4
 803bb28:	e00b      	b.n	803bb42 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 803bb2a:	7bbb      	ldrb	r3, [r7, #14]
 803bb2c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 803bb30:	4613      	mov	r3, r2
 803bb32:	009b      	lsls	r3, r3, #2
 803bb34:	4413      	add	r3, r2
 803bb36:	009b      	lsls	r3, r3, #2
 803bb38:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 803bb3c:	687a      	ldr	r2, [r7, #4]
 803bb3e:	4413      	add	r3, r2
 803bb40:	3304      	adds	r3, #4
 803bb42:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 803bb44:	7bbb      	ldrb	r3, [r7, #14]
 803bb46:	2b00      	cmp	r3, #0
 803bb48:	d002      	beq.n	803bb50 <USBD_StdEPReq+0x2d8>
 803bb4a:	7bbb      	ldrb	r3, [r7, #14]
 803bb4c:	2b80      	cmp	r3, #128	; 0x80
 803bb4e:	d103      	bne.n	803bb58 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 803bb50:	68bb      	ldr	r3, [r7, #8]
 803bb52:	2200      	movs	r2, #0
 803bb54:	601a      	str	r2, [r3, #0]
 803bb56:	e00e      	b.n	803bb76 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 803bb58:	7bbb      	ldrb	r3, [r7, #14]
 803bb5a:	4619      	mov	r1, r3
 803bb5c:	6878      	ldr	r0, [r7, #4]
 803bb5e:	f001 f89d 	bl	803cc9c <USBD_LL_IsStallEP>
 803bb62:	4603      	mov	r3, r0
 803bb64:	2b00      	cmp	r3, #0
 803bb66:	d003      	beq.n	803bb70 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 803bb68:	68bb      	ldr	r3, [r7, #8]
 803bb6a:	2201      	movs	r2, #1
 803bb6c:	601a      	str	r2, [r3, #0]
 803bb6e:	e002      	b.n	803bb76 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 803bb70:	68bb      	ldr	r3, [r7, #8]
 803bb72:	2200      	movs	r2, #0
 803bb74:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 803bb76:	68bb      	ldr	r3, [r7, #8]
 803bb78:	2202      	movs	r2, #2
 803bb7a:	4619      	mov	r1, r3
 803bb7c:	6878      	ldr	r0, [r7, #4]
 803bb7e:	f000 fbd1 	bl	803c324 <USBD_CtlSendData>
              break;
 803bb82:	e004      	b.n	803bb8e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 803bb84:	6839      	ldr	r1, [r7, #0]
 803bb86:	6878      	ldr	r0, [r7, #4]
 803bb88:	f000 fb5b 	bl	803c242 <USBD_CtlError>
              break;
 803bb8c:	bf00      	nop
          }
          break;
 803bb8e:	e004      	b.n	803bb9a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 803bb90:	6839      	ldr	r1, [r7, #0]
 803bb92:	6878      	ldr	r0, [r7, #4]
 803bb94:	f000 fb55 	bl	803c242 <USBD_CtlError>
          break;
 803bb98:	bf00      	nop
      }
      break;
 803bb9a:	e005      	b.n	803bba8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 803bb9c:	6839      	ldr	r1, [r7, #0]
 803bb9e:	6878      	ldr	r0, [r7, #4]
 803bba0:	f000 fb4f 	bl	803c242 <USBD_CtlError>
      break;
 803bba4:	e000      	b.n	803bba8 <USBD_StdEPReq+0x330>
      break;
 803bba6:	bf00      	nop
  }

  return ret;
 803bba8:	7bfb      	ldrb	r3, [r7, #15]
}
 803bbaa:	4618      	mov	r0, r3
 803bbac:	3710      	adds	r7, #16
 803bbae:	46bd      	mov	sp, r7
 803bbb0:	bd80      	pop	{r7, pc}
	...

0803bbb4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803bbb4:	b580      	push	{r7, lr}
 803bbb6:	b084      	sub	sp, #16
 803bbb8:	af00      	add	r7, sp, #0
 803bbba:	6078      	str	r0, [r7, #4]
 803bbbc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 803bbbe:	2300      	movs	r3, #0
 803bbc0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 803bbc2:	2300      	movs	r3, #0
 803bbc4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 803bbc6:	2300      	movs	r3, #0
 803bbc8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 803bbca:	683b      	ldr	r3, [r7, #0]
 803bbcc:	885b      	ldrh	r3, [r3, #2]
 803bbce:	0a1b      	lsrs	r3, r3, #8
 803bbd0:	b29b      	uxth	r3, r3
 803bbd2:	3b01      	subs	r3, #1
 803bbd4:	2b06      	cmp	r3, #6
 803bbd6:	f200 8128 	bhi.w	803be2a <USBD_GetDescriptor+0x276>
 803bbda:	a201      	add	r2, pc, #4	; (adr r2, 803bbe0 <USBD_GetDescriptor+0x2c>)
 803bbdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803bbe0:	0803bbfd 	.word	0x0803bbfd
 803bbe4:	0803bc15 	.word	0x0803bc15
 803bbe8:	0803bc55 	.word	0x0803bc55
 803bbec:	0803be2b 	.word	0x0803be2b
 803bbf0:	0803be2b 	.word	0x0803be2b
 803bbf4:	0803bdcb 	.word	0x0803bdcb
 803bbf8:	0803bdf7 	.word	0x0803bdf7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 803bbfc:	687b      	ldr	r3, [r7, #4]
 803bbfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803bc02:	681b      	ldr	r3, [r3, #0]
 803bc04:	687a      	ldr	r2, [r7, #4]
 803bc06:	7c12      	ldrb	r2, [r2, #16]
 803bc08:	f107 0108 	add.w	r1, r7, #8
 803bc0c:	4610      	mov	r0, r2
 803bc0e:	4798      	blx	r3
 803bc10:	60f8      	str	r0, [r7, #12]
      break;
 803bc12:	e112      	b.n	803be3a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 803bc14:	687b      	ldr	r3, [r7, #4]
 803bc16:	7c1b      	ldrb	r3, [r3, #16]
 803bc18:	2b00      	cmp	r3, #0
 803bc1a:	d10d      	bne.n	803bc38 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 803bc1c:	687b      	ldr	r3, [r7, #4]
 803bc1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803bc22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 803bc24:	f107 0208 	add.w	r2, r7, #8
 803bc28:	4610      	mov	r0, r2
 803bc2a:	4798      	blx	r3
 803bc2c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 803bc2e:	68fb      	ldr	r3, [r7, #12]
 803bc30:	3301      	adds	r3, #1
 803bc32:	2202      	movs	r2, #2
 803bc34:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 803bc36:	e100      	b.n	803be3a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 803bc38:	687b      	ldr	r3, [r7, #4]
 803bc3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803bc3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803bc40:	f107 0208 	add.w	r2, r7, #8
 803bc44:	4610      	mov	r0, r2
 803bc46:	4798      	blx	r3
 803bc48:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 803bc4a:	68fb      	ldr	r3, [r7, #12]
 803bc4c:	3301      	adds	r3, #1
 803bc4e:	2202      	movs	r2, #2
 803bc50:	701a      	strb	r2, [r3, #0]
      break;
 803bc52:	e0f2      	b.n	803be3a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 803bc54:	683b      	ldr	r3, [r7, #0]
 803bc56:	885b      	ldrh	r3, [r3, #2]
 803bc58:	b2db      	uxtb	r3, r3
 803bc5a:	2b05      	cmp	r3, #5
 803bc5c:	f200 80ac 	bhi.w	803bdb8 <USBD_GetDescriptor+0x204>
 803bc60:	a201      	add	r2, pc, #4	; (adr r2, 803bc68 <USBD_GetDescriptor+0xb4>)
 803bc62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803bc66:	bf00      	nop
 803bc68:	0803bc81 	.word	0x0803bc81
 803bc6c:	0803bcb5 	.word	0x0803bcb5
 803bc70:	0803bce9 	.word	0x0803bce9
 803bc74:	0803bd1d 	.word	0x0803bd1d
 803bc78:	0803bd51 	.word	0x0803bd51
 803bc7c:	0803bd85 	.word	0x0803bd85
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 803bc80:	687b      	ldr	r3, [r7, #4]
 803bc82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803bc86:	685b      	ldr	r3, [r3, #4]
 803bc88:	2b00      	cmp	r3, #0
 803bc8a:	d00b      	beq.n	803bca4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 803bc8c:	687b      	ldr	r3, [r7, #4]
 803bc8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803bc92:	685b      	ldr	r3, [r3, #4]
 803bc94:	687a      	ldr	r2, [r7, #4]
 803bc96:	7c12      	ldrb	r2, [r2, #16]
 803bc98:	f107 0108 	add.w	r1, r7, #8
 803bc9c:	4610      	mov	r0, r2
 803bc9e:	4798      	blx	r3
 803bca0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 803bca2:	e091      	b.n	803bdc8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 803bca4:	6839      	ldr	r1, [r7, #0]
 803bca6:	6878      	ldr	r0, [r7, #4]
 803bca8:	f000 facb 	bl	803c242 <USBD_CtlError>
            err++;
 803bcac:	7afb      	ldrb	r3, [r7, #11]
 803bcae:	3301      	adds	r3, #1
 803bcb0:	72fb      	strb	r3, [r7, #11]
          break;
 803bcb2:	e089      	b.n	803bdc8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 803bcb4:	687b      	ldr	r3, [r7, #4]
 803bcb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803bcba:	689b      	ldr	r3, [r3, #8]
 803bcbc:	2b00      	cmp	r3, #0
 803bcbe:	d00b      	beq.n	803bcd8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 803bcc0:	687b      	ldr	r3, [r7, #4]
 803bcc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803bcc6:	689b      	ldr	r3, [r3, #8]
 803bcc8:	687a      	ldr	r2, [r7, #4]
 803bcca:	7c12      	ldrb	r2, [r2, #16]
 803bccc:	f107 0108 	add.w	r1, r7, #8
 803bcd0:	4610      	mov	r0, r2
 803bcd2:	4798      	blx	r3
 803bcd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 803bcd6:	e077      	b.n	803bdc8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 803bcd8:	6839      	ldr	r1, [r7, #0]
 803bcda:	6878      	ldr	r0, [r7, #4]
 803bcdc:	f000 fab1 	bl	803c242 <USBD_CtlError>
            err++;
 803bce0:	7afb      	ldrb	r3, [r7, #11]
 803bce2:	3301      	adds	r3, #1
 803bce4:	72fb      	strb	r3, [r7, #11]
          break;
 803bce6:	e06f      	b.n	803bdc8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 803bce8:	687b      	ldr	r3, [r7, #4]
 803bcea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803bcee:	68db      	ldr	r3, [r3, #12]
 803bcf0:	2b00      	cmp	r3, #0
 803bcf2:	d00b      	beq.n	803bd0c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 803bcf4:	687b      	ldr	r3, [r7, #4]
 803bcf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803bcfa:	68db      	ldr	r3, [r3, #12]
 803bcfc:	687a      	ldr	r2, [r7, #4]
 803bcfe:	7c12      	ldrb	r2, [r2, #16]
 803bd00:	f107 0108 	add.w	r1, r7, #8
 803bd04:	4610      	mov	r0, r2
 803bd06:	4798      	blx	r3
 803bd08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 803bd0a:	e05d      	b.n	803bdc8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 803bd0c:	6839      	ldr	r1, [r7, #0]
 803bd0e:	6878      	ldr	r0, [r7, #4]
 803bd10:	f000 fa97 	bl	803c242 <USBD_CtlError>
            err++;
 803bd14:	7afb      	ldrb	r3, [r7, #11]
 803bd16:	3301      	adds	r3, #1
 803bd18:	72fb      	strb	r3, [r7, #11]
          break;
 803bd1a:	e055      	b.n	803bdc8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 803bd1c:	687b      	ldr	r3, [r7, #4]
 803bd1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803bd22:	691b      	ldr	r3, [r3, #16]
 803bd24:	2b00      	cmp	r3, #0
 803bd26:	d00b      	beq.n	803bd40 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 803bd28:	687b      	ldr	r3, [r7, #4]
 803bd2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803bd2e:	691b      	ldr	r3, [r3, #16]
 803bd30:	687a      	ldr	r2, [r7, #4]
 803bd32:	7c12      	ldrb	r2, [r2, #16]
 803bd34:	f107 0108 	add.w	r1, r7, #8
 803bd38:	4610      	mov	r0, r2
 803bd3a:	4798      	blx	r3
 803bd3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 803bd3e:	e043      	b.n	803bdc8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 803bd40:	6839      	ldr	r1, [r7, #0]
 803bd42:	6878      	ldr	r0, [r7, #4]
 803bd44:	f000 fa7d 	bl	803c242 <USBD_CtlError>
            err++;
 803bd48:	7afb      	ldrb	r3, [r7, #11]
 803bd4a:	3301      	adds	r3, #1
 803bd4c:	72fb      	strb	r3, [r7, #11]
          break;
 803bd4e:	e03b      	b.n	803bdc8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 803bd50:	687b      	ldr	r3, [r7, #4]
 803bd52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803bd56:	695b      	ldr	r3, [r3, #20]
 803bd58:	2b00      	cmp	r3, #0
 803bd5a:	d00b      	beq.n	803bd74 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 803bd5c:	687b      	ldr	r3, [r7, #4]
 803bd5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803bd62:	695b      	ldr	r3, [r3, #20]
 803bd64:	687a      	ldr	r2, [r7, #4]
 803bd66:	7c12      	ldrb	r2, [r2, #16]
 803bd68:	f107 0108 	add.w	r1, r7, #8
 803bd6c:	4610      	mov	r0, r2
 803bd6e:	4798      	blx	r3
 803bd70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 803bd72:	e029      	b.n	803bdc8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 803bd74:	6839      	ldr	r1, [r7, #0]
 803bd76:	6878      	ldr	r0, [r7, #4]
 803bd78:	f000 fa63 	bl	803c242 <USBD_CtlError>
            err++;
 803bd7c:	7afb      	ldrb	r3, [r7, #11]
 803bd7e:	3301      	adds	r3, #1
 803bd80:	72fb      	strb	r3, [r7, #11]
          break;
 803bd82:	e021      	b.n	803bdc8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 803bd84:	687b      	ldr	r3, [r7, #4]
 803bd86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803bd8a:	699b      	ldr	r3, [r3, #24]
 803bd8c:	2b00      	cmp	r3, #0
 803bd8e:	d00b      	beq.n	803bda8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 803bd90:	687b      	ldr	r3, [r7, #4]
 803bd92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803bd96:	699b      	ldr	r3, [r3, #24]
 803bd98:	687a      	ldr	r2, [r7, #4]
 803bd9a:	7c12      	ldrb	r2, [r2, #16]
 803bd9c:	f107 0108 	add.w	r1, r7, #8
 803bda0:	4610      	mov	r0, r2
 803bda2:	4798      	blx	r3
 803bda4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 803bda6:	e00f      	b.n	803bdc8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 803bda8:	6839      	ldr	r1, [r7, #0]
 803bdaa:	6878      	ldr	r0, [r7, #4]
 803bdac:	f000 fa49 	bl	803c242 <USBD_CtlError>
            err++;
 803bdb0:	7afb      	ldrb	r3, [r7, #11]
 803bdb2:	3301      	adds	r3, #1
 803bdb4:	72fb      	strb	r3, [r7, #11]
          break;
 803bdb6:	e007      	b.n	803bdc8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 803bdb8:	6839      	ldr	r1, [r7, #0]
 803bdba:	6878      	ldr	r0, [r7, #4]
 803bdbc:	f000 fa41 	bl	803c242 <USBD_CtlError>
          err++;
 803bdc0:	7afb      	ldrb	r3, [r7, #11]
 803bdc2:	3301      	adds	r3, #1
 803bdc4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 803bdc6:	bf00      	nop
      }
      break;
 803bdc8:	e037      	b.n	803be3a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 803bdca:	687b      	ldr	r3, [r7, #4]
 803bdcc:	7c1b      	ldrb	r3, [r3, #16]
 803bdce:	2b00      	cmp	r3, #0
 803bdd0:	d109      	bne.n	803bde6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 803bdd2:	687b      	ldr	r3, [r7, #4]
 803bdd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803bdd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 803bdda:	f107 0208 	add.w	r2, r7, #8
 803bdde:	4610      	mov	r0, r2
 803bde0:	4798      	blx	r3
 803bde2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 803bde4:	e029      	b.n	803be3a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 803bde6:	6839      	ldr	r1, [r7, #0]
 803bde8:	6878      	ldr	r0, [r7, #4]
 803bdea:	f000 fa2a 	bl	803c242 <USBD_CtlError>
        err++;
 803bdee:	7afb      	ldrb	r3, [r7, #11]
 803bdf0:	3301      	adds	r3, #1
 803bdf2:	72fb      	strb	r3, [r7, #11]
      break;
 803bdf4:	e021      	b.n	803be3a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 803bdf6:	687b      	ldr	r3, [r7, #4]
 803bdf8:	7c1b      	ldrb	r3, [r3, #16]
 803bdfa:	2b00      	cmp	r3, #0
 803bdfc:	d10d      	bne.n	803be1a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 803bdfe:	687b      	ldr	r3, [r7, #4]
 803be00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803be04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 803be06:	f107 0208 	add.w	r2, r7, #8
 803be0a:	4610      	mov	r0, r2
 803be0c:	4798      	blx	r3
 803be0e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 803be10:	68fb      	ldr	r3, [r7, #12]
 803be12:	3301      	adds	r3, #1
 803be14:	2207      	movs	r2, #7
 803be16:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 803be18:	e00f      	b.n	803be3a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 803be1a:	6839      	ldr	r1, [r7, #0]
 803be1c:	6878      	ldr	r0, [r7, #4]
 803be1e:	f000 fa10 	bl	803c242 <USBD_CtlError>
        err++;
 803be22:	7afb      	ldrb	r3, [r7, #11]
 803be24:	3301      	adds	r3, #1
 803be26:	72fb      	strb	r3, [r7, #11]
      break;
 803be28:	e007      	b.n	803be3a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 803be2a:	6839      	ldr	r1, [r7, #0]
 803be2c:	6878      	ldr	r0, [r7, #4]
 803be2e:	f000 fa08 	bl	803c242 <USBD_CtlError>
      err++;
 803be32:	7afb      	ldrb	r3, [r7, #11]
 803be34:	3301      	adds	r3, #1
 803be36:	72fb      	strb	r3, [r7, #11]
      break;
 803be38:	bf00      	nop
  }

  if (err != 0U)
 803be3a:	7afb      	ldrb	r3, [r7, #11]
 803be3c:	2b00      	cmp	r3, #0
 803be3e:	d11e      	bne.n	803be7e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 803be40:	683b      	ldr	r3, [r7, #0]
 803be42:	88db      	ldrh	r3, [r3, #6]
 803be44:	2b00      	cmp	r3, #0
 803be46:	d016      	beq.n	803be76 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 803be48:	893b      	ldrh	r3, [r7, #8]
 803be4a:	2b00      	cmp	r3, #0
 803be4c:	d00e      	beq.n	803be6c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 803be4e:	683b      	ldr	r3, [r7, #0]
 803be50:	88da      	ldrh	r2, [r3, #6]
 803be52:	893b      	ldrh	r3, [r7, #8]
 803be54:	4293      	cmp	r3, r2
 803be56:	bf28      	it	cs
 803be58:	4613      	movcs	r3, r2
 803be5a:	b29b      	uxth	r3, r3
 803be5c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 803be5e:	893b      	ldrh	r3, [r7, #8]
 803be60:	461a      	mov	r2, r3
 803be62:	68f9      	ldr	r1, [r7, #12]
 803be64:	6878      	ldr	r0, [r7, #4]
 803be66:	f000 fa5d 	bl	803c324 <USBD_CtlSendData>
 803be6a:	e009      	b.n	803be80 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 803be6c:	6839      	ldr	r1, [r7, #0]
 803be6e:	6878      	ldr	r0, [r7, #4]
 803be70:	f000 f9e7 	bl	803c242 <USBD_CtlError>
 803be74:	e004      	b.n	803be80 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 803be76:	6878      	ldr	r0, [r7, #4]
 803be78:	f000 faae 	bl	803c3d8 <USBD_CtlSendStatus>
 803be7c:	e000      	b.n	803be80 <USBD_GetDescriptor+0x2cc>
    return;
 803be7e:	bf00      	nop
  }
}
 803be80:	3710      	adds	r7, #16
 803be82:	46bd      	mov	sp, r7
 803be84:	bd80      	pop	{r7, pc}
 803be86:	bf00      	nop

0803be88 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803be88:	b580      	push	{r7, lr}
 803be8a:	b084      	sub	sp, #16
 803be8c:	af00      	add	r7, sp, #0
 803be8e:	6078      	str	r0, [r7, #4]
 803be90:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 803be92:	683b      	ldr	r3, [r7, #0]
 803be94:	889b      	ldrh	r3, [r3, #4]
 803be96:	2b00      	cmp	r3, #0
 803be98:	d131      	bne.n	803befe <USBD_SetAddress+0x76>
 803be9a:	683b      	ldr	r3, [r7, #0]
 803be9c:	88db      	ldrh	r3, [r3, #6]
 803be9e:	2b00      	cmp	r3, #0
 803bea0:	d12d      	bne.n	803befe <USBD_SetAddress+0x76>
 803bea2:	683b      	ldr	r3, [r7, #0]
 803bea4:	885b      	ldrh	r3, [r3, #2]
 803bea6:	2b7f      	cmp	r3, #127	; 0x7f
 803bea8:	d829      	bhi.n	803befe <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 803beaa:	683b      	ldr	r3, [r7, #0]
 803beac:	885b      	ldrh	r3, [r3, #2]
 803beae:	b2db      	uxtb	r3, r3
 803beb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 803beb4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803beb6:	687b      	ldr	r3, [r7, #4]
 803beb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803bebc:	b2db      	uxtb	r3, r3
 803bebe:	2b03      	cmp	r3, #3
 803bec0:	d104      	bne.n	803becc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 803bec2:	6839      	ldr	r1, [r7, #0]
 803bec4:	6878      	ldr	r0, [r7, #4]
 803bec6:	f000 f9bc 	bl	803c242 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803beca:	e01d      	b.n	803bf08 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 803becc:	687b      	ldr	r3, [r7, #4]
 803bece:	7bfa      	ldrb	r2, [r7, #15]
 803bed0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 803bed4:	7bfb      	ldrb	r3, [r7, #15]
 803bed6:	4619      	mov	r1, r3
 803bed8:	6878      	ldr	r0, [r7, #4]
 803beda:	f000 ff0b 	bl	803ccf4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 803bede:	6878      	ldr	r0, [r7, #4]
 803bee0:	f000 fa7a 	bl	803c3d8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 803bee4:	7bfb      	ldrb	r3, [r7, #15]
 803bee6:	2b00      	cmp	r3, #0
 803bee8:	d004      	beq.n	803bef4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 803beea:	687b      	ldr	r3, [r7, #4]
 803beec:	2202      	movs	r2, #2
 803beee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803bef2:	e009      	b.n	803bf08 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 803bef4:	687b      	ldr	r3, [r7, #4]
 803bef6:	2201      	movs	r2, #1
 803bef8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803befc:	e004      	b.n	803bf08 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 803befe:	6839      	ldr	r1, [r7, #0]
 803bf00:	6878      	ldr	r0, [r7, #4]
 803bf02:	f000 f99e 	bl	803c242 <USBD_CtlError>
  }
}
 803bf06:	bf00      	nop
 803bf08:	bf00      	nop
 803bf0a:	3710      	adds	r7, #16
 803bf0c:	46bd      	mov	sp, r7
 803bf0e:	bd80      	pop	{r7, pc}

0803bf10 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803bf10:	b580      	push	{r7, lr}
 803bf12:	b084      	sub	sp, #16
 803bf14:	af00      	add	r7, sp, #0
 803bf16:	6078      	str	r0, [r7, #4]
 803bf18:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 803bf1a:	2300      	movs	r3, #0
 803bf1c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 803bf1e:	683b      	ldr	r3, [r7, #0]
 803bf20:	885b      	ldrh	r3, [r3, #2]
 803bf22:	b2da      	uxtb	r2, r3
 803bf24:	4b4e      	ldr	r3, [pc, #312]	; (803c060 <USBD_SetConfig+0x150>)
 803bf26:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 803bf28:	4b4d      	ldr	r3, [pc, #308]	; (803c060 <USBD_SetConfig+0x150>)
 803bf2a:	781b      	ldrb	r3, [r3, #0]
 803bf2c:	2b01      	cmp	r3, #1
 803bf2e:	d905      	bls.n	803bf3c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 803bf30:	6839      	ldr	r1, [r7, #0]
 803bf32:	6878      	ldr	r0, [r7, #4]
 803bf34:	f000 f985 	bl	803c242 <USBD_CtlError>
    return USBD_FAIL;
 803bf38:	2303      	movs	r3, #3
 803bf3a:	e08c      	b.n	803c056 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 803bf3c:	687b      	ldr	r3, [r7, #4]
 803bf3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803bf42:	b2db      	uxtb	r3, r3
 803bf44:	2b02      	cmp	r3, #2
 803bf46:	d002      	beq.n	803bf4e <USBD_SetConfig+0x3e>
 803bf48:	2b03      	cmp	r3, #3
 803bf4a:	d029      	beq.n	803bfa0 <USBD_SetConfig+0x90>
 803bf4c:	e075      	b.n	803c03a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 803bf4e:	4b44      	ldr	r3, [pc, #272]	; (803c060 <USBD_SetConfig+0x150>)
 803bf50:	781b      	ldrb	r3, [r3, #0]
 803bf52:	2b00      	cmp	r3, #0
 803bf54:	d020      	beq.n	803bf98 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 803bf56:	4b42      	ldr	r3, [pc, #264]	; (803c060 <USBD_SetConfig+0x150>)
 803bf58:	781b      	ldrb	r3, [r3, #0]
 803bf5a:	461a      	mov	r2, r3
 803bf5c:	687b      	ldr	r3, [r7, #4]
 803bf5e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 803bf60:	4b3f      	ldr	r3, [pc, #252]	; (803c060 <USBD_SetConfig+0x150>)
 803bf62:	781b      	ldrb	r3, [r3, #0]
 803bf64:	4619      	mov	r1, r3
 803bf66:	6878      	ldr	r0, [r7, #4]
 803bf68:	f7fe ffe7 	bl	803af3a <USBD_SetClassConfig>
 803bf6c:	4603      	mov	r3, r0
 803bf6e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 803bf70:	7bfb      	ldrb	r3, [r7, #15]
 803bf72:	2b00      	cmp	r3, #0
 803bf74:	d008      	beq.n	803bf88 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 803bf76:	6839      	ldr	r1, [r7, #0]
 803bf78:	6878      	ldr	r0, [r7, #4]
 803bf7a:	f000 f962 	bl	803c242 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 803bf7e:	687b      	ldr	r3, [r7, #4]
 803bf80:	2202      	movs	r2, #2
 803bf82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 803bf86:	e065      	b.n	803c054 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 803bf88:	6878      	ldr	r0, [r7, #4]
 803bf8a:	f000 fa25 	bl	803c3d8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 803bf8e:	687b      	ldr	r3, [r7, #4]
 803bf90:	2203      	movs	r2, #3
 803bf92:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 803bf96:	e05d      	b.n	803c054 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 803bf98:	6878      	ldr	r0, [r7, #4]
 803bf9a:	f000 fa1d 	bl	803c3d8 <USBD_CtlSendStatus>
      break;
 803bf9e:	e059      	b.n	803c054 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 803bfa0:	4b2f      	ldr	r3, [pc, #188]	; (803c060 <USBD_SetConfig+0x150>)
 803bfa2:	781b      	ldrb	r3, [r3, #0]
 803bfa4:	2b00      	cmp	r3, #0
 803bfa6:	d112      	bne.n	803bfce <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 803bfa8:	687b      	ldr	r3, [r7, #4]
 803bfaa:	2202      	movs	r2, #2
 803bfac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 803bfb0:	4b2b      	ldr	r3, [pc, #172]	; (803c060 <USBD_SetConfig+0x150>)
 803bfb2:	781b      	ldrb	r3, [r3, #0]
 803bfb4:	461a      	mov	r2, r3
 803bfb6:	687b      	ldr	r3, [r7, #4]
 803bfb8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 803bfba:	4b29      	ldr	r3, [pc, #164]	; (803c060 <USBD_SetConfig+0x150>)
 803bfbc:	781b      	ldrb	r3, [r3, #0]
 803bfbe:	4619      	mov	r1, r3
 803bfc0:	6878      	ldr	r0, [r7, #4]
 803bfc2:	f7fe ffd6 	bl	803af72 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 803bfc6:	6878      	ldr	r0, [r7, #4]
 803bfc8:	f000 fa06 	bl	803c3d8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 803bfcc:	e042      	b.n	803c054 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 803bfce:	4b24      	ldr	r3, [pc, #144]	; (803c060 <USBD_SetConfig+0x150>)
 803bfd0:	781b      	ldrb	r3, [r3, #0]
 803bfd2:	461a      	mov	r2, r3
 803bfd4:	687b      	ldr	r3, [r7, #4]
 803bfd6:	685b      	ldr	r3, [r3, #4]
 803bfd8:	429a      	cmp	r2, r3
 803bfda:	d02a      	beq.n	803c032 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 803bfdc:	687b      	ldr	r3, [r7, #4]
 803bfde:	685b      	ldr	r3, [r3, #4]
 803bfe0:	b2db      	uxtb	r3, r3
 803bfe2:	4619      	mov	r1, r3
 803bfe4:	6878      	ldr	r0, [r7, #4]
 803bfe6:	f7fe ffc4 	bl	803af72 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 803bfea:	4b1d      	ldr	r3, [pc, #116]	; (803c060 <USBD_SetConfig+0x150>)
 803bfec:	781b      	ldrb	r3, [r3, #0]
 803bfee:	461a      	mov	r2, r3
 803bff0:	687b      	ldr	r3, [r7, #4]
 803bff2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 803bff4:	4b1a      	ldr	r3, [pc, #104]	; (803c060 <USBD_SetConfig+0x150>)
 803bff6:	781b      	ldrb	r3, [r3, #0]
 803bff8:	4619      	mov	r1, r3
 803bffa:	6878      	ldr	r0, [r7, #4]
 803bffc:	f7fe ff9d 	bl	803af3a <USBD_SetClassConfig>
 803c000:	4603      	mov	r3, r0
 803c002:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 803c004:	7bfb      	ldrb	r3, [r7, #15]
 803c006:	2b00      	cmp	r3, #0
 803c008:	d00f      	beq.n	803c02a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 803c00a:	6839      	ldr	r1, [r7, #0]
 803c00c:	6878      	ldr	r0, [r7, #4]
 803c00e:	f000 f918 	bl	803c242 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 803c012:	687b      	ldr	r3, [r7, #4]
 803c014:	685b      	ldr	r3, [r3, #4]
 803c016:	b2db      	uxtb	r3, r3
 803c018:	4619      	mov	r1, r3
 803c01a:	6878      	ldr	r0, [r7, #4]
 803c01c:	f7fe ffa9 	bl	803af72 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 803c020:	687b      	ldr	r3, [r7, #4]
 803c022:	2202      	movs	r2, #2
 803c024:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 803c028:	e014      	b.n	803c054 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 803c02a:	6878      	ldr	r0, [r7, #4]
 803c02c:	f000 f9d4 	bl	803c3d8 <USBD_CtlSendStatus>
      break;
 803c030:	e010      	b.n	803c054 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 803c032:	6878      	ldr	r0, [r7, #4]
 803c034:	f000 f9d0 	bl	803c3d8 <USBD_CtlSendStatus>
      break;
 803c038:	e00c      	b.n	803c054 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 803c03a:	6839      	ldr	r1, [r7, #0]
 803c03c:	6878      	ldr	r0, [r7, #4]
 803c03e:	f000 f900 	bl	803c242 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 803c042:	4b07      	ldr	r3, [pc, #28]	; (803c060 <USBD_SetConfig+0x150>)
 803c044:	781b      	ldrb	r3, [r3, #0]
 803c046:	4619      	mov	r1, r3
 803c048:	6878      	ldr	r0, [r7, #4]
 803c04a:	f7fe ff92 	bl	803af72 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 803c04e:	2303      	movs	r3, #3
 803c050:	73fb      	strb	r3, [r7, #15]
      break;
 803c052:	bf00      	nop
  }

  return ret;
 803c054:	7bfb      	ldrb	r3, [r7, #15]
}
 803c056:	4618      	mov	r0, r3
 803c058:	3710      	adds	r7, #16
 803c05a:	46bd      	mov	sp, r7
 803c05c:	bd80      	pop	{r7, pc}
 803c05e:	bf00      	nop
 803c060:	24001b48 	.word	0x24001b48

0803c064 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803c064:	b580      	push	{r7, lr}
 803c066:	b082      	sub	sp, #8
 803c068:	af00      	add	r7, sp, #0
 803c06a:	6078      	str	r0, [r7, #4]
 803c06c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 803c06e:	683b      	ldr	r3, [r7, #0]
 803c070:	88db      	ldrh	r3, [r3, #6]
 803c072:	2b01      	cmp	r3, #1
 803c074:	d004      	beq.n	803c080 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 803c076:	6839      	ldr	r1, [r7, #0]
 803c078:	6878      	ldr	r0, [r7, #4]
 803c07a:	f000 f8e2 	bl	803c242 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 803c07e:	e023      	b.n	803c0c8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 803c080:	687b      	ldr	r3, [r7, #4]
 803c082:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803c086:	b2db      	uxtb	r3, r3
 803c088:	2b02      	cmp	r3, #2
 803c08a:	dc02      	bgt.n	803c092 <USBD_GetConfig+0x2e>
 803c08c:	2b00      	cmp	r3, #0
 803c08e:	dc03      	bgt.n	803c098 <USBD_GetConfig+0x34>
 803c090:	e015      	b.n	803c0be <USBD_GetConfig+0x5a>
 803c092:	2b03      	cmp	r3, #3
 803c094:	d00b      	beq.n	803c0ae <USBD_GetConfig+0x4a>
 803c096:	e012      	b.n	803c0be <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 803c098:	687b      	ldr	r3, [r7, #4]
 803c09a:	2200      	movs	r2, #0
 803c09c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 803c09e:	687b      	ldr	r3, [r7, #4]
 803c0a0:	3308      	adds	r3, #8
 803c0a2:	2201      	movs	r2, #1
 803c0a4:	4619      	mov	r1, r3
 803c0a6:	6878      	ldr	r0, [r7, #4]
 803c0a8:	f000 f93c 	bl	803c324 <USBD_CtlSendData>
        break;
 803c0ac:	e00c      	b.n	803c0c8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 803c0ae:	687b      	ldr	r3, [r7, #4]
 803c0b0:	3304      	adds	r3, #4
 803c0b2:	2201      	movs	r2, #1
 803c0b4:	4619      	mov	r1, r3
 803c0b6:	6878      	ldr	r0, [r7, #4]
 803c0b8:	f000 f934 	bl	803c324 <USBD_CtlSendData>
        break;
 803c0bc:	e004      	b.n	803c0c8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 803c0be:	6839      	ldr	r1, [r7, #0]
 803c0c0:	6878      	ldr	r0, [r7, #4]
 803c0c2:	f000 f8be 	bl	803c242 <USBD_CtlError>
        break;
 803c0c6:	bf00      	nop
}
 803c0c8:	bf00      	nop
 803c0ca:	3708      	adds	r7, #8
 803c0cc:	46bd      	mov	sp, r7
 803c0ce:	bd80      	pop	{r7, pc}

0803c0d0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803c0d0:	b580      	push	{r7, lr}
 803c0d2:	b082      	sub	sp, #8
 803c0d4:	af00      	add	r7, sp, #0
 803c0d6:	6078      	str	r0, [r7, #4]
 803c0d8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 803c0da:	687b      	ldr	r3, [r7, #4]
 803c0dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803c0e0:	b2db      	uxtb	r3, r3
 803c0e2:	3b01      	subs	r3, #1
 803c0e4:	2b02      	cmp	r3, #2
 803c0e6:	d81e      	bhi.n	803c126 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 803c0e8:	683b      	ldr	r3, [r7, #0]
 803c0ea:	88db      	ldrh	r3, [r3, #6]
 803c0ec:	2b02      	cmp	r3, #2
 803c0ee:	d004      	beq.n	803c0fa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 803c0f0:	6839      	ldr	r1, [r7, #0]
 803c0f2:	6878      	ldr	r0, [r7, #4]
 803c0f4:	f000 f8a5 	bl	803c242 <USBD_CtlError>
        break;
 803c0f8:	e01a      	b.n	803c130 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 803c0fa:	687b      	ldr	r3, [r7, #4]
 803c0fc:	2201      	movs	r2, #1
 803c0fe:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 803c100:	687b      	ldr	r3, [r7, #4]
 803c102:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 803c106:	2b00      	cmp	r3, #0
 803c108:	d005      	beq.n	803c116 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 803c10a:	687b      	ldr	r3, [r7, #4]
 803c10c:	68db      	ldr	r3, [r3, #12]
 803c10e:	f043 0202 	orr.w	r2, r3, #2
 803c112:	687b      	ldr	r3, [r7, #4]
 803c114:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 803c116:	687b      	ldr	r3, [r7, #4]
 803c118:	330c      	adds	r3, #12
 803c11a:	2202      	movs	r2, #2
 803c11c:	4619      	mov	r1, r3
 803c11e:	6878      	ldr	r0, [r7, #4]
 803c120:	f000 f900 	bl	803c324 <USBD_CtlSendData>
      break;
 803c124:	e004      	b.n	803c130 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 803c126:	6839      	ldr	r1, [r7, #0]
 803c128:	6878      	ldr	r0, [r7, #4]
 803c12a:	f000 f88a 	bl	803c242 <USBD_CtlError>
      break;
 803c12e:	bf00      	nop
  }
}
 803c130:	bf00      	nop
 803c132:	3708      	adds	r7, #8
 803c134:	46bd      	mov	sp, r7
 803c136:	bd80      	pop	{r7, pc}

0803c138 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803c138:	b580      	push	{r7, lr}
 803c13a:	b082      	sub	sp, #8
 803c13c:	af00      	add	r7, sp, #0
 803c13e:	6078      	str	r0, [r7, #4]
 803c140:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 803c142:	683b      	ldr	r3, [r7, #0]
 803c144:	885b      	ldrh	r3, [r3, #2]
 803c146:	2b01      	cmp	r3, #1
 803c148:	d107      	bne.n	803c15a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 803c14a:	687b      	ldr	r3, [r7, #4]
 803c14c:	2201      	movs	r2, #1
 803c14e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 803c152:	6878      	ldr	r0, [r7, #4]
 803c154:	f000 f940 	bl	803c3d8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 803c158:	e013      	b.n	803c182 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 803c15a:	683b      	ldr	r3, [r7, #0]
 803c15c:	885b      	ldrh	r3, [r3, #2]
 803c15e:	2b02      	cmp	r3, #2
 803c160:	d10b      	bne.n	803c17a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 803c162:	683b      	ldr	r3, [r7, #0]
 803c164:	889b      	ldrh	r3, [r3, #4]
 803c166:	0a1b      	lsrs	r3, r3, #8
 803c168:	b29b      	uxth	r3, r3
 803c16a:	b2da      	uxtb	r2, r3
 803c16c:	687b      	ldr	r3, [r7, #4]
 803c16e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 803c172:	6878      	ldr	r0, [r7, #4]
 803c174:	f000 f930 	bl	803c3d8 <USBD_CtlSendStatus>
}
 803c178:	e003      	b.n	803c182 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 803c17a:	6839      	ldr	r1, [r7, #0]
 803c17c:	6878      	ldr	r0, [r7, #4]
 803c17e:	f000 f860 	bl	803c242 <USBD_CtlError>
}
 803c182:	bf00      	nop
 803c184:	3708      	adds	r7, #8
 803c186:	46bd      	mov	sp, r7
 803c188:	bd80      	pop	{r7, pc}

0803c18a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803c18a:	b580      	push	{r7, lr}
 803c18c:	b082      	sub	sp, #8
 803c18e:	af00      	add	r7, sp, #0
 803c190:	6078      	str	r0, [r7, #4]
 803c192:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 803c194:	687b      	ldr	r3, [r7, #4]
 803c196:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803c19a:	b2db      	uxtb	r3, r3
 803c19c:	3b01      	subs	r3, #1
 803c19e:	2b02      	cmp	r3, #2
 803c1a0:	d80b      	bhi.n	803c1ba <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 803c1a2:	683b      	ldr	r3, [r7, #0]
 803c1a4:	885b      	ldrh	r3, [r3, #2]
 803c1a6:	2b01      	cmp	r3, #1
 803c1a8:	d10c      	bne.n	803c1c4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 803c1aa:	687b      	ldr	r3, [r7, #4]
 803c1ac:	2200      	movs	r2, #0
 803c1ae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 803c1b2:	6878      	ldr	r0, [r7, #4]
 803c1b4:	f000 f910 	bl	803c3d8 <USBD_CtlSendStatus>
      }
      break;
 803c1b8:	e004      	b.n	803c1c4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 803c1ba:	6839      	ldr	r1, [r7, #0]
 803c1bc:	6878      	ldr	r0, [r7, #4]
 803c1be:	f000 f840 	bl	803c242 <USBD_CtlError>
      break;
 803c1c2:	e000      	b.n	803c1c6 <USBD_ClrFeature+0x3c>
      break;
 803c1c4:	bf00      	nop
  }
}
 803c1c6:	bf00      	nop
 803c1c8:	3708      	adds	r7, #8
 803c1ca:	46bd      	mov	sp, r7
 803c1cc:	bd80      	pop	{r7, pc}

0803c1ce <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 803c1ce:	b580      	push	{r7, lr}
 803c1d0:	b084      	sub	sp, #16
 803c1d2:	af00      	add	r7, sp, #0
 803c1d4:	6078      	str	r0, [r7, #4]
 803c1d6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 803c1d8:	683b      	ldr	r3, [r7, #0]
 803c1da:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 803c1dc:	68fb      	ldr	r3, [r7, #12]
 803c1de:	781a      	ldrb	r2, [r3, #0]
 803c1e0:	687b      	ldr	r3, [r7, #4]
 803c1e2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 803c1e4:	68fb      	ldr	r3, [r7, #12]
 803c1e6:	3301      	adds	r3, #1
 803c1e8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 803c1ea:	68fb      	ldr	r3, [r7, #12]
 803c1ec:	781a      	ldrb	r2, [r3, #0]
 803c1ee:	687b      	ldr	r3, [r7, #4]
 803c1f0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 803c1f2:	68fb      	ldr	r3, [r7, #12]
 803c1f4:	3301      	adds	r3, #1
 803c1f6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 803c1f8:	68f8      	ldr	r0, [r7, #12]
 803c1fa:	f7ff fa41 	bl	803b680 <SWAPBYTE>
 803c1fe:	4603      	mov	r3, r0
 803c200:	461a      	mov	r2, r3
 803c202:	687b      	ldr	r3, [r7, #4]
 803c204:	805a      	strh	r2, [r3, #2]

  pbuff++;
 803c206:	68fb      	ldr	r3, [r7, #12]
 803c208:	3301      	adds	r3, #1
 803c20a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 803c20c:	68fb      	ldr	r3, [r7, #12]
 803c20e:	3301      	adds	r3, #1
 803c210:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 803c212:	68f8      	ldr	r0, [r7, #12]
 803c214:	f7ff fa34 	bl	803b680 <SWAPBYTE>
 803c218:	4603      	mov	r3, r0
 803c21a:	461a      	mov	r2, r3
 803c21c:	687b      	ldr	r3, [r7, #4]
 803c21e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 803c220:	68fb      	ldr	r3, [r7, #12]
 803c222:	3301      	adds	r3, #1
 803c224:	60fb      	str	r3, [r7, #12]
  pbuff++;
 803c226:	68fb      	ldr	r3, [r7, #12]
 803c228:	3301      	adds	r3, #1
 803c22a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 803c22c:	68f8      	ldr	r0, [r7, #12]
 803c22e:	f7ff fa27 	bl	803b680 <SWAPBYTE>
 803c232:	4603      	mov	r3, r0
 803c234:	461a      	mov	r2, r3
 803c236:	687b      	ldr	r3, [r7, #4]
 803c238:	80da      	strh	r2, [r3, #6]
}
 803c23a:	bf00      	nop
 803c23c:	3710      	adds	r7, #16
 803c23e:	46bd      	mov	sp, r7
 803c240:	bd80      	pop	{r7, pc}

0803c242 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803c242:	b580      	push	{r7, lr}
 803c244:	b082      	sub	sp, #8
 803c246:	af00      	add	r7, sp, #0
 803c248:	6078      	str	r0, [r7, #4]
 803c24a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 803c24c:	2180      	movs	r1, #128	; 0x80
 803c24e:	6878      	ldr	r0, [r7, #4]
 803c250:	f000 fce6 	bl	803cc20 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 803c254:	2100      	movs	r1, #0
 803c256:	6878      	ldr	r0, [r7, #4]
 803c258:	f000 fce2 	bl	803cc20 <USBD_LL_StallEP>
}
 803c25c:	bf00      	nop
 803c25e:	3708      	adds	r7, #8
 803c260:	46bd      	mov	sp, r7
 803c262:	bd80      	pop	{r7, pc}

0803c264 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 803c264:	b580      	push	{r7, lr}
 803c266:	b086      	sub	sp, #24
 803c268:	af00      	add	r7, sp, #0
 803c26a:	60f8      	str	r0, [r7, #12]
 803c26c:	60b9      	str	r1, [r7, #8]
 803c26e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 803c270:	2300      	movs	r3, #0
 803c272:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 803c274:	68fb      	ldr	r3, [r7, #12]
 803c276:	2b00      	cmp	r3, #0
 803c278:	d036      	beq.n	803c2e8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 803c27a:	68fb      	ldr	r3, [r7, #12]
 803c27c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 803c27e:	6938      	ldr	r0, [r7, #16]
 803c280:	f000 f836 	bl	803c2f0 <USBD_GetLen>
 803c284:	4603      	mov	r3, r0
 803c286:	3301      	adds	r3, #1
 803c288:	b29b      	uxth	r3, r3
 803c28a:	005b      	lsls	r3, r3, #1
 803c28c:	b29a      	uxth	r2, r3
 803c28e:	687b      	ldr	r3, [r7, #4]
 803c290:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 803c292:	7dfb      	ldrb	r3, [r7, #23]
 803c294:	68ba      	ldr	r2, [r7, #8]
 803c296:	4413      	add	r3, r2
 803c298:	687a      	ldr	r2, [r7, #4]
 803c29a:	7812      	ldrb	r2, [r2, #0]
 803c29c:	701a      	strb	r2, [r3, #0]
  idx++;
 803c29e:	7dfb      	ldrb	r3, [r7, #23]
 803c2a0:	3301      	adds	r3, #1
 803c2a2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 803c2a4:	7dfb      	ldrb	r3, [r7, #23]
 803c2a6:	68ba      	ldr	r2, [r7, #8]
 803c2a8:	4413      	add	r3, r2
 803c2aa:	2203      	movs	r2, #3
 803c2ac:	701a      	strb	r2, [r3, #0]
  idx++;
 803c2ae:	7dfb      	ldrb	r3, [r7, #23]
 803c2b0:	3301      	adds	r3, #1
 803c2b2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 803c2b4:	e013      	b.n	803c2de <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 803c2b6:	7dfb      	ldrb	r3, [r7, #23]
 803c2b8:	68ba      	ldr	r2, [r7, #8]
 803c2ba:	4413      	add	r3, r2
 803c2bc:	693a      	ldr	r2, [r7, #16]
 803c2be:	7812      	ldrb	r2, [r2, #0]
 803c2c0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 803c2c2:	693b      	ldr	r3, [r7, #16]
 803c2c4:	3301      	adds	r3, #1
 803c2c6:	613b      	str	r3, [r7, #16]
    idx++;
 803c2c8:	7dfb      	ldrb	r3, [r7, #23]
 803c2ca:	3301      	adds	r3, #1
 803c2cc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 803c2ce:	7dfb      	ldrb	r3, [r7, #23]
 803c2d0:	68ba      	ldr	r2, [r7, #8]
 803c2d2:	4413      	add	r3, r2
 803c2d4:	2200      	movs	r2, #0
 803c2d6:	701a      	strb	r2, [r3, #0]
    idx++;
 803c2d8:	7dfb      	ldrb	r3, [r7, #23]
 803c2da:	3301      	adds	r3, #1
 803c2dc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 803c2de:	693b      	ldr	r3, [r7, #16]
 803c2e0:	781b      	ldrb	r3, [r3, #0]
 803c2e2:	2b00      	cmp	r3, #0
 803c2e4:	d1e7      	bne.n	803c2b6 <USBD_GetString+0x52>
 803c2e6:	e000      	b.n	803c2ea <USBD_GetString+0x86>
    return;
 803c2e8:	bf00      	nop
  }
}
 803c2ea:	3718      	adds	r7, #24
 803c2ec:	46bd      	mov	sp, r7
 803c2ee:	bd80      	pop	{r7, pc}

0803c2f0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 803c2f0:	b480      	push	{r7}
 803c2f2:	b085      	sub	sp, #20
 803c2f4:	af00      	add	r7, sp, #0
 803c2f6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 803c2f8:	2300      	movs	r3, #0
 803c2fa:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 803c2fc:	687b      	ldr	r3, [r7, #4]
 803c2fe:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 803c300:	e005      	b.n	803c30e <USBD_GetLen+0x1e>
  {
    len++;
 803c302:	7bfb      	ldrb	r3, [r7, #15]
 803c304:	3301      	adds	r3, #1
 803c306:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 803c308:	68bb      	ldr	r3, [r7, #8]
 803c30a:	3301      	adds	r3, #1
 803c30c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 803c30e:	68bb      	ldr	r3, [r7, #8]
 803c310:	781b      	ldrb	r3, [r3, #0]
 803c312:	2b00      	cmp	r3, #0
 803c314:	d1f5      	bne.n	803c302 <USBD_GetLen+0x12>
  }

  return len;
 803c316:	7bfb      	ldrb	r3, [r7, #15]
}
 803c318:	4618      	mov	r0, r3
 803c31a:	3714      	adds	r7, #20
 803c31c:	46bd      	mov	sp, r7
 803c31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 803c322:	4770      	bx	lr

0803c324 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 803c324:	b580      	push	{r7, lr}
 803c326:	b084      	sub	sp, #16
 803c328:	af00      	add	r7, sp, #0
 803c32a:	60f8      	str	r0, [r7, #12]
 803c32c:	60b9      	str	r1, [r7, #8]
 803c32e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 803c330:	68fb      	ldr	r3, [r7, #12]
 803c332:	2202      	movs	r2, #2
 803c334:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 803c338:	68fb      	ldr	r3, [r7, #12]
 803c33a:	687a      	ldr	r2, [r7, #4]
 803c33c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 803c33e:	68fb      	ldr	r3, [r7, #12]
 803c340:	687a      	ldr	r2, [r7, #4]
 803c342:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 803c344:	687b      	ldr	r3, [r7, #4]
 803c346:	68ba      	ldr	r2, [r7, #8]
 803c348:	2100      	movs	r1, #0
 803c34a:	68f8      	ldr	r0, [r7, #12]
 803c34c:	f000 fcf1 	bl	803cd32 <USBD_LL_Transmit>

  return USBD_OK;
 803c350:	2300      	movs	r3, #0
}
 803c352:	4618      	mov	r0, r3
 803c354:	3710      	adds	r7, #16
 803c356:	46bd      	mov	sp, r7
 803c358:	bd80      	pop	{r7, pc}

0803c35a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 803c35a:	b580      	push	{r7, lr}
 803c35c:	b084      	sub	sp, #16
 803c35e:	af00      	add	r7, sp, #0
 803c360:	60f8      	str	r0, [r7, #12]
 803c362:	60b9      	str	r1, [r7, #8]
 803c364:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 803c366:	687b      	ldr	r3, [r7, #4]
 803c368:	68ba      	ldr	r2, [r7, #8]
 803c36a:	2100      	movs	r1, #0
 803c36c:	68f8      	ldr	r0, [r7, #12]
 803c36e:	f000 fce0 	bl	803cd32 <USBD_LL_Transmit>

  return USBD_OK;
 803c372:	2300      	movs	r3, #0
}
 803c374:	4618      	mov	r0, r3
 803c376:	3710      	adds	r7, #16
 803c378:	46bd      	mov	sp, r7
 803c37a:	bd80      	pop	{r7, pc}

0803c37c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 803c37c:	b580      	push	{r7, lr}
 803c37e:	b084      	sub	sp, #16
 803c380:	af00      	add	r7, sp, #0
 803c382:	60f8      	str	r0, [r7, #12]
 803c384:	60b9      	str	r1, [r7, #8]
 803c386:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 803c388:	68fb      	ldr	r3, [r7, #12]
 803c38a:	2203      	movs	r2, #3
 803c38c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 803c390:	68fb      	ldr	r3, [r7, #12]
 803c392:	687a      	ldr	r2, [r7, #4]
 803c394:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 803c398:	68fb      	ldr	r3, [r7, #12]
 803c39a:	687a      	ldr	r2, [r7, #4]
 803c39c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 803c3a0:	687b      	ldr	r3, [r7, #4]
 803c3a2:	68ba      	ldr	r2, [r7, #8]
 803c3a4:	2100      	movs	r1, #0
 803c3a6:	68f8      	ldr	r0, [r7, #12]
 803c3a8:	f000 fce4 	bl	803cd74 <USBD_LL_PrepareReceive>

  return USBD_OK;
 803c3ac:	2300      	movs	r3, #0
}
 803c3ae:	4618      	mov	r0, r3
 803c3b0:	3710      	adds	r7, #16
 803c3b2:	46bd      	mov	sp, r7
 803c3b4:	bd80      	pop	{r7, pc}

0803c3b6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 803c3b6:	b580      	push	{r7, lr}
 803c3b8:	b084      	sub	sp, #16
 803c3ba:	af00      	add	r7, sp, #0
 803c3bc:	60f8      	str	r0, [r7, #12]
 803c3be:	60b9      	str	r1, [r7, #8]
 803c3c0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 803c3c2:	687b      	ldr	r3, [r7, #4]
 803c3c4:	68ba      	ldr	r2, [r7, #8]
 803c3c6:	2100      	movs	r1, #0
 803c3c8:	68f8      	ldr	r0, [r7, #12]
 803c3ca:	f000 fcd3 	bl	803cd74 <USBD_LL_PrepareReceive>

  return USBD_OK;
 803c3ce:	2300      	movs	r3, #0
}
 803c3d0:	4618      	mov	r0, r3
 803c3d2:	3710      	adds	r7, #16
 803c3d4:	46bd      	mov	sp, r7
 803c3d6:	bd80      	pop	{r7, pc}

0803c3d8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 803c3d8:	b580      	push	{r7, lr}
 803c3da:	b082      	sub	sp, #8
 803c3dc:	af00      	add	r7, sp, #0
 803c3de:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 803c3e0:	687b      	ldr	r3, [r7, #4]
 803c3e2:	2204      	movs	r2, #4
 803c3e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 803c3e8:	2300      	movs	r3, #0
 803c3ea:	2200      	movs	r2, #0
 803c3ec:	2100      	movs	r1, #0
 803c3ee:	6878      	ldr	r0, [r7, #4]
 803c3f0:	f000 fc9f 	bl	803cd32 <USBD_LL_Transmit>

  return USBD_OK;
 803c3f4:	2300      	movs	r3, #0
}
 803c3f6:	4618      	mov	r0, r3
 803c3f8:	3708      	adds	r7, #8
 803c3fa:	46bd      	mov	sp, r7
 803c3fc:	bd80      	pop	{r7, pc}

0803c3fe <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 803c3fe:	b580      	push	{r7, lr}
 803c400:	b082      	sub	sp, #8
 803c402:	af00      	add	r7, sp, #0
 803c404:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 803c406:	687b      	ldr	r3, [r7, #4]
 803c408:	2205      	movs	r2, #5
 803c40a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 803c40e:	2300      	movs	r3, #0
 803c410:	2200      	movs	r2, #0
 803c412:	2100      	movs	r1, #0
 803c414:	6878      	ldr	r0, [r7, #4]
 803c416:	f000 fcad 	bl	803cd74 <USBD_LL_PrepareReceive>

  return USBD_OK;
 803c41a:	2300      	movs	r3, #0
}
 803c41c:	4618      	mov	r0, r3
 803c41e:	3708      	adds	r7, #8
 803c420:	46bd      	mov	sp, r7
 803c422:	bd80      	pop	{r7, pc}

0803c424 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 803c424:	b580      	push	{r7, lr}
 803c426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 803c428:	2200      	movs	r2, #0
 803c42a:	4913      	ldr	r1, [pc, #76]	; (803c478 <MX_USB_DEVICE_Init+0x54>)
 803c42c:	4813      	ldr	r0, [pc, #76]	; (803c47c <MX_USB_DEVICE_Init+0x58>)
 803c42e:	f7fe fd07 	bl	803ae40 <USBD_Init>
 803c432:	4603      	mov	r3, r0
 803c434:	2b00      	cmp	r3, #0
 803c436:	d001      	beq.n	803c43c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 803c438:	f7ee fdc4 	bl	802afc4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 803c43c:	4910      	ldr	r1, [pc, #64]	; (803c480 <MX_USB_DEVICE_Init+0x5c>)
 803c43e:	480f      	ldr	r0, [pc, #60]	; (803c47c <MX_USB_DEVICE_Init+0x58>)
 803c440:	f7fe fd2e 	bl	803aea0 <USBD_RegisterClass>
 803c444:	4603      	mov	r3, r0
 803c446:	2b00      	cmp	r3, #0
 803c448:	d001      	beq.n	803c44e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 803c44a:	f7ee fdbb 	bl	802afc4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 803c44e:	490d      	ldr	r1, [pc, #52]	; (803c484 <MX_USB_DEVICE_Init+0x60>)
 803c450:	480a      	ldr	r0, [pc, #40]	; (803c47c <MX_USB_DEVICE_Init+0x58>)
 803c452:	f7fe fc65 	bl	803ad20 <USBD_CDC_RegisterInterface>
 803c456:	4603      	mov	r3, r0
 803c458:	2b00      	cmp	r3, #0
 803c45a:	d001      	beq.n	803c460 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 803c45c:	f7ee fdb2 	bl	802afc4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 803c460:	4806      	ldr	r0, [pc, #24]	; (803c47c <MX_USB_DEVICE_Init+0x58>)
 803c462:	f7fe fd53 	bl	803af0c <USBD_Start>
 803c466:	4603      	mov	r3, r0
 803c468:	2b00      	cmp	r3, #0
 803c46a:	d001      	beq.n	803c470 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 803c46c:	f7ee fdaa 	bl	802afc4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 803c470:	f7f5 fe36 	bl	80320e0 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 803c474:	bf00      	nop
 803c476:	bd80      	pop	{r7, pc}
 803c478:	240000b0 	.word	0x240000b0
 803c47c:	24001b4c 	.word	0x24001b4c
 803c480:	2400001c 	.word	0x2400001c
 803c484:	2400009c 	.word	0x2400009c

0803c488 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 803c488:	b580      	push	{r7, lr}
 803c48a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 803c48c:	2200      	movs	r2, #0
 803c48e:	4905      	ldr	r1, [pc, #20]	; (803c4a4 <CDC_Init_FS+0x1c>)
 803c490:	4805      	ldr	r0, [pc, #20]	; (803c4a8 <CDC_Init_FS+0x20>)
 803c492:	f7fe fc5f 	bl	803ad54 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 803c496:	4905      	ldr	r1, [pc, #20]	; (803c4ac <CDC_Init_FS+0x24>)
 803c498:	4803      	ldr	r0, [pc, #12]	; (803c4a8 <CDC_Init_FS+0x20>)
 803c49a:	f7fe fc7d 	bl	803ad98 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 803c49e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 803c4a0:	4618      	mov	r0, r3
 803c4a2:	bd80      	pop	{r7, pc}
 803c4a4:	24002628 	.word	0x24002628
 803c4a8:	24001b4c 	.word	0x24001b4c
 803c4ac:	24001e28 	.word	0x24001e28

0803c4b0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 803c4b0:	b480      	push	{r7}
 803c4b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 803c4b4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 803c4b6:	4618      	mov	r0, r3
 803c4b8:	46bd      	mov	sp, r7
 803c4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 803c4be:	4770      	bx	lr

0803c4c0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 803c4c0:	b480      	push	{r7}
 803c4c2:	b083      	sub	sp, #12
 803c4c4:	af00      	add	r7, sp, #0
 803c4c6:	4603      	mov	r3, r0
 803c4c8:	6039      	str	r1, [r7, #0]
 803c4ca:	71fb      	strb	r3, [r7, #7]
 803c4cc:	4613      	mov	r3, r2
 803c4ce:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 803c4d0:	79fb      	ldrb	r3, [r7, #7]
 803c4d2:	2b23      	cmp	r3, #35	; 0x23
 803c4d4:	d84a      	bhi.n	803c56c <CDC_Control_FS+0xac>
 803c4d6:	a201      	add	r2, pc, #4	; (adr r2, 803c4dc <CDC_Control_FS+0x1c>)
 803c4d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803c4dc:	0803c56d 	.word	0x0803c56d
 803c4e0:	0803c56d 	.word	0x0803c56d
 803c4e4:	0803c56d 	.word	0x0803c56d
 803c4e8:	0803c56d 	.word	0x0803c56d
 803c4ec:	0803c56d 	.word	0x0803c56d
 803c4f0:	0803c56d 	.word	0x0803c56d
 803c4f4:	0803c56d 	.word	0x0803c56d
 803c4f8:	0803c56d 	.word	0x0803c56d
 803c4fc:	0803c56d 	.word	0x0803c56d
 803c500:	0803c56d 	.word	0x0803c56d
 803c504:	0803c56d 	.word	0x0803c56d
 803c508:	0803c56d 	.word	0x0803c56d
 803c50c:	0803c56d 	.word	0x0803c56d
 803c510:	0803c56d 	.word	0x0803c56d
 803c514:	0803c56d 	.word	0x0803c56d
 803c518:	0803c56d 	.word	0x0803c56d
 803c51c:	0803c56d 	.word	0x0803c56d
 803c520:	0803c56d 	.word	0x0803c56d
 803c524:	0803c56d 	.word	0x0803c56d
 803c528:	0803c56d 	.word	0x0803c56d
 803c52c:	0803c56d 	.word	0x0803c56d
 803c530:	0803c56d 	.word	0x0803c56d
 803c534:	0803c56d 	.word	0x0803c56d
 803c538:	0803c56d 	.word	0x0803c56d
 803c53c:	0803c56d 	.word	0x0803c56d
 803c540:	0803c56d 	.word	0x0803c56d
 803c544:	0803c56d 	.word	0x0803c56d
 803c548:	0803c56d 	.word	0x0803c56d
 803c54c:	0803c56d 	.word	0x0803c56d
 803c550:	0803c56d 	.word	0x0803c56d
 803c554:	0803c56d 	.word	0x0803c56d
 803c558:	0803c56d 	.word	0x0803c56d
 803c55c:	0803c56d 	.word	0x0803c56d
 803c560:	0803c56d 	.word	0x0803c56d
 803c564:	0803c56d 	.word	0x0803c56d
 803c568:	0803c56d 	.word	0x0803c56d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 803c56c:	bf00      	nop
  }

  return (USBD_OK);
 803c56e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 803c570:	4618      	mov	r0, r3
 803c572:	370c      	adds	r7, #12
 803c574:	46bd      	mov	sp, r7
 803c576:	f85d 7b04 	ldr.w	r7, [sp], #4
 803c57a:	4770      	bx	lr

0803c57c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 803c57c:	b580      	push	{r7, lr}
 803c57e:	b082      	sub	sp, #8
 803c580:	af00      	add	r7, sp, #0
 803c582:	6078      	str	r0, [r7, #4]
 803c584:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 803c586:	6879      	ldr	r1, [r7, #4]
 803c588:	4805      	ldr	r0, [pc, #20]	; (803c5a0 <CDC_Receive_FS+0x24>)
 803c58a:	f7fe fc05 	bl	803ad98 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 803c58e:	4804      	ldr	r0, [pc, #16]	; (803c5a0 <CDC_Receive_FS+0x24>)
 803c590:	f7fe fc20 	bl	803add4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 803c594:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 803c596:	4618      	mov	r0, r3
 803c598:	3708      	adds	r7, #8
 803c59a:	46bd      	mov	sp, r7
 803c59c:	bd80      	pop	{r7, pc}
 803c59e:	bf00      	nop
 803c5a0:	24001b4c 	.word	0x24001b4c

0803c5a4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 803c5a4:	b480      	push	{r7}
 803c5a6:	b087      	sub	sp, #28
 803c5a8:	af00      	add	r7, sp, #0
 803c5aa:	60f8      	str	r0, [r7, #12]
 803c5ac:	60b9      	str	r1, [r7, #8]
 803c5ae:	4613      	mov	r3, r2
 803c5b0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 803c5b2:	2300      	movs	r3, #0
 803c5b4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 803c5b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 803c5ba:	4618      	mov	r0, r3
 803c5bc:	371c      	adds	r7, #28
 803c5be:	46bd      	mov	sp, r7
 803c5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 803c5c4:	4770      	bx	lr
	...

0803c5c8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 803c5c8:	b480      	push	{r7}
 803c5ca:	b083      	sub	sp, #12
 803c5cc:	af00      	add	r7, sp, #0
 803c5ce:	4603      	mov	r3, r0
 803c5d0:	6039      	str	r1, [r7, #0]
 803c5d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 803c5d4:	683b      	ldr	r3, [r7, #0]
 803c5d6:	2212      	movs	r2, #18
 803c5d8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 803c5da:	4b03      	ldr	r3, [pc, #12]	; (803c5e8 <USBD_FS_DeviceDescriptor+0x20>)
}
 803c5dc:	4618      	mov	r0, r3
 803c5de:	370c      	adds	r7, #12
 803c5e0:	46bd      	mov	sp, r7
 803c5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 803c5e6:	4770      	bx	lr
 803c5e8:	240000cc 	.word	0x240000cc

0803c5ec <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 803c5ec:	b480      	push	{r7}
 803c5ee:	b083      	sub	sp, #12
 803c5f0:	af00      	add	r7, sp, #0
 803c5f2:	4603      	mov	r3, r0
 803c5f4:	6039      	str	r1, [r7, #0]
 803c5f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 803c5f8:	683b      	ldr	r3, [r7, #0]
 803c5fa:	2204      	movs	r2, #4
 803c5fc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 803c5fe:	4b03      	ldr	r3, [pc, #12]	; (803c60c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 803c600:	4618      	mov	r0, r3
 803c602:	370c      	adds	r7, #12
 803c604:	46bd      	mov	sp, r7
 803c606:	f85d 7b04 	ldr.w	r7, [sp], #4
 803c60a:	4770      	bx	lr
 803c60c:	240000e0 	.word	0x240000e0

0803c610 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 803c610:	b580      	push	{r7, lr}
 803c612:	b082      	sub	sp, #8
 803c614:	af00      	add	r7, sp, #0
 803c616:	4603      	mov	r3, r0
 803c618:	6039      	str	r1, [r7, #0]
 803c61a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 803c61c:	79fb      	ldrb	r3, [r7, #7]
 803c61e:	2b00      	cmp	r3, #0
 803c620:	d105      	bne.n	803c62e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 803c622:	683a      	ldr	r2, [r7, #0]
 803c624:	4907      	ldr	r1, [pc, #28]	; (803c644 <USBD_FS_ProductStrDescriptor+0x34>)
 803c626:	4808      	ldr	r0, [pc, #32]	; (803c648 <USBD_FS_ProductStrDescriptor+0x38>)
 803c628:	f7ff fe1c 	bl	803c264 <USBD_GetString>
 803c62c:	e004      	b.n	803c638 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 803c62e:	683a      	ldr	r2, [r7, #0]
 803c630:	4904      	ldr	r1, [pc, #16]	; (803c644 <USBD_FS_ProductStrDescriptor+0x34>)
 803c632:	4805      	ldr	r0, [pc, #20]	; (803c648 <USBD_FS_ProductStrDescriptor+0x38>)
 803c634:	f7ff fe16 	bl	803c264 <USBD_GetString>
  }
  return USBD_StrDesc;
 803c638:	4b02      	ldr	r3, [pc, #8]	; (803c644 <USBD_FS_ProductStrDescriptor+0x34>)
}
 803c63a:	4618      	mov	r0, r3
 803c63c:	3708      	adds	r7, #8
 803c63e:	46bd      	mov	sp, r7
 803c640:	bd80      	pop	{r7, pc}
 803c642:	bf00      	nop
 803c644:	24002e28 	.word	0x24002e28
 803c648:	0803e738 	.word	0x0803e738

0803c64c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 803c64c:	b580      	push	{r7, lr}
 803c64e:	b082      	sub	sp, #8
 803c650:	af00      	add	r7, sp, #0
 803c652:	4603      	mov	r3, r0
 803c654:	6039      	str	r1, [r7, #0]
 803c656:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 803c658:	683a      	ldr	r2, [r7, #0]
 803c65a:	4904      	ldr	r1, [pc, #16]	; (803c66c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 803c65c:	4804      	ldr	r0, [pc, #16]	; (803c670 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 803c65e:	f7ff fe01 	bl	803c264 <USBD_GetString>
  return USBD_StrDesc;
 803c662:	4b02      	ldr	r3, [pc, #8]	; (803c66c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 803c664:	4618      	mov	r0, r3
 803c666:	3708      	adds	r7, #8
 803c668:	46bd      	mov	sp, r7
 803c66a:	bd80      	pop	{r7, pc}
 803c66c:	24002e28 	.word	0x24002e28
 803c670:	0803e750 	.word	0x0803e750

0803c674 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 803c674:	b580      	push	{r7, lr}
 803c676:	b082      	sub	sp, #8
 803c678:	af00      	add	r7, sp, #0
 803c67a:	4603      	mov	r3, r0
 803c67c:	6039      	str	r1, [r7, #0]
 803c67e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 803c680:	683b      	ldr	r3, [r7, #0]
 803c682:	221a      	movs	r2, #26
 803c684:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 803c686:	f000 f843 	bl	803c710 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 803c68a:	4b02      	ldr	r3, [pc, #8]	; (803c694 <USBD_FS_SerialStrDescriptor+0x20>)
}
 803c68c:	4618      	mov	r0, r3
 803c68e:	3708      	adds	r7, #8
 803c690:	46bd      	mov	sp, r7
 803c692:	bd80      	pop	{r7, pc}
 803c694:	240000e4 	.word	0x240000e4

0803c698 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 803c698:	b580      	push	{r7, lr}
 803c69a:	b082      	sub	sp, #8
 803c69c:	af00      	add	r7, sp, #0
 803c69e:	4603      	mov	r3, r0
 803c6a0:	6039      	str	r1, [r7, #0]
 803c6a2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 803c6a4:	79fb      	ldrb	r3, [r7, #7]
 803c6a6:	2b00      	cmp	r3, #0
 803c6a8:	d105      	bne.n	803c6b6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 803c6aa:	683a      	ldr	r2, [r7, #0]
 803c6ac:	4907      	ldr	r1, [pc, #28]	; (803c6cc <USBD_FS_ConfigStrDescriptor+0x34>)
 803c6ae:	4808      	ldr	r0, [pc, #32]	; (803c6d0 <USBD_FS_ConfigStrDescriptor+0x38>)
 803c6b0:	f7ff fdd8 	bl	803c264 <USBD_GetString>
 803c6b4:	e004      	b.n	803c6c0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 803c6b6:	683a      	ldr	r2, [r7, #0]
 803c6b8:	4904      	ldr	r1, [pc, #16]	; (803c6cc <USBD_FS_ConfigStrDescriptor+0x34>)
 803c6ba:	4805      	ldr	r0, [pc, #20]	; (803c6d0 <USBD_FS_ConfigStrDescriptor+0x38>)
 803c6bc:	f7ff fdd2 	bl	803c264 <USBD_GetString>
  }
  return USBD_StrDesc;
 803c6c0:	4b02      	ldr	r3, [pc, #8]	; (803c6cc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 803c6c2:	4618      	mov	r0, r3
 803c6c4:	3708      	adds	r7, #8
 803c6c6:	46bd      	mov	sp, r7
 803c6c8:	bd80      	pop	{r7, pc}
 803c6ca:	bf00      	nop
 803c6cc:	24002e28 	.word	0x24002e28
 803c6d0:	0803e764 	.word	0x0803e764

0803c6d4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 803c6d4:	b580      	push	{r7, lr}
 803c6d6:	b082      	sub	sp, #8
 803c6d8:	af00      	add	r7, sp, #0
 803c6da:	4603      	mov	r3, r0
 803c6dc:	6039      	str	r1, [r7, #0]
 803c6de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 803c6e0:	79fb      	ldrb	r3, [r7, #7]
 803c6e2:	2b00      	cmp	r3, #0
 803c6e4:	d105      	bne.n	803c6f2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 803c6e6:	683a      	ldr	r2, [r7, #0]
 803c6e8:	4907      	ldr	r1, [pc, #28]	; (803c708 <USBD_FS_InterfaceStrDescriptor+0x34>)
 803c6ea:	4808      	ldr	r0, [pc, #32]	; (803c70c <USBD_FS_InterfaceStrDescriptor+0x38>)
 803c6ec:	f7ff fdba 	bl	803c264 <USBD_GetString>
 803c6f0:	e004      	b.n	803c6fc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 803c6f2:	683a      	ldr	r2, [r7, #0]
 803c6f4:	4904      	ldr	r1, [pc, #16]	; (803c708 <USBD_FS_InterfaceStrDescriptor+0x34>)
 803c6f6:	4805      	ldr	r0, [pc, #20]	; (803c70c <USBD_FS_InterfaceStrDescriptor+0x38>)
 803c6f8:	f7ff fdb4 	bl	803c264 <USBD_GetString>
  }
  return USBD_StrDesc;
 803c6fc:	4b02      	ldr	r3, [pc, #8]	; (803c708 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 803c6fe:	4618      	mov	r0, r3
 803c700:	3708      	adds	r7, #8
 803c702:	46bd      	mov	sp, r7
 803c704:	bd80      	pop	{r7, pc}
 803c706:	bf00      	nop
 803c708:	24002e28 	.word	0x24002e28
 803c70c:	0803e770 	.word	0x0803e770

0803c710 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 803c710:	b580      	push	{r7, lr}
 803c712:	b084      	sub	sp, #16
 803c714:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 803c716:	4b0f      	ldr	r3, [pc, #60]	; (803c754 <Get_SerialNum+0x44>)
 803c718:	681b      	ldr	r3, [r3, #0]
 803c71a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 803c71c:	4b0e      	ldr	r3, [pc, #56]	; (803c758 <Get_SerialNum+0x48>)
 803c71e:	681b      	ldr	r3, [r3, #0]
 803c720:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 803c722:	4b0e      	ldr	r3, [pc, #56]	; (803c75c <Get_SerialNum+0x4c>)
 803c724:	681b      	ldr	r3, [r3, #0]
 803c726:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 803c728:	68fa      	ldr	r2, [r7, #12]
 803c72a:	687b      	ldr	r3, [r7, #4]
 803c72c:	4413      	add	r3, r2
 803c72e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 803c730:	68fb      	ldr	r3, [r7, #12]
 803c732:	2b00      	cmp	r3, #0
 803c734:	d009      	beq.n	803c74a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 803c736:	2208      	movs	r2, #8
 803c738:	4909      	ldr	r1, [pc, #36]	; (803c760 <Get_SerialNum+0x50>)
 803c73a:	68f8      	ldr	r0, [r7, #12]
 803c73c:	f000 f814 	bl	803c768 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 803c740:	2204      	movs	r2, #4
 803c742:	4908      	ldr	r1, [pc, #32]	; (803c764 <Get_SerialNum+0x54>)
 803c744:	68b8      	ldr	r0, [r7, #8]
 803c746:	f000 f80f 	bl	803c768 <IntToUnicode>
  }
}
 803c74a:	bf00      	nop
 803c74c:	3710      	adds	r7, #16
 803c74e:	46bd      	mov	sp, r7
 803c750:	bd80      	pop	{r7, pc}
 803c752:	bf00      	nop
 803c754:	1ff1e800 	.word	0x1ff1e800
 803c758:	1ff1e804 	.word	0x1ff1e804
 803c75c:	1ff1e808 	.word	0x1ff1e808
 803c760:	240000e6 	.word	0x240000e6
 803c764:	240000f6 	.word	0x240000f6

0803c768 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 803c768:	b480      	push	{r7}
 803c76a:	b087      	sub	sp, #28
 803c76c:	af00      	add	r7, sp, #0
 803c76e:	60f8      	str	r0, [r7, #12]
 803c770:	60b9      	str	r1, [r7, #8]
 803c772:	4613      	mov	r3, r2
 803c774:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 803c776:	2300      	movs	r3, #0
 803c778:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 803c77a:	2300      	movs	r3, #0
 803c77c:	75fb      	strb	r3, [r7, #23]
 803c77e:	e027      	b.n	803c7d0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 803c780:	68fb      	ldr	r3, [r7, #12]
 803c782:	0f1b      	lsrs	r3, r3, #28
 803c784:	2b09      	cmp	r3, #9
 803c786:	d80b      	bhi.n	803c7a0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 803c788:	68fb      	ldr	r3, [r7, #12]
 803c78a:	0f1b      	lsrs	r3, r3, #28
 803c78c:	b2da      	uxtb	r2, r3
 803c78e:	7dfb      	ldrb	r3, [r7, #23]
 803c790:	005b      	lsls	r3, r3, #1
 803c792:	4619      	mov	r1, r3
 803c794:	68bb      	ldr	r3, [r7, #8]
 803c796:	440b      	add	r3, r1
 803c798:	3230      	adds	r2, #48	; 0x30
 803c79a:	b2d2      	uxtb	r2, r2
 803c79c:	701a      	strb	r2, [r3, #0]
 803c79e:	e00a      	b.n	803c7b6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 803c7a0:	68fb      	ldr	r3, [r7, #12]
 803c7a2:	0f1b      	lsrs	r3, r3, #28
 803c7a4:	b2da      	uxtb	r2, r3
 803c7a6:	7dfb      	ldrb	r3, [r7, #23]
 803c7a8:	005b      	lsls	r3, r3, #1
 803c7aa:	4619      	mov	r1, r3
 803c7ac:	68bb      	ldr	r3, [r7, #8]
 803c7ae:	440b      	add	r3, r1
 803c7b0:	3237      	adds	r2, #55	; 0x37
 803c7b2:	b2d2      	uxtb	r2, r2
 803c7b4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 803c7b6:	68fb      	ldr	r3, [r7, #12]
 803c7b8:	011b      	lsls	r3, r3, #4
 803c7ba:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 803c7bc:	7dfb      	ldrb	r3, [r7, #23]
 803c7be:	005b      	lsls	r3, r3, #1
 803c7c0:	3301      	adds	r3, #1
 803c7c2:	68ba      	ldr	r2, [r7, #8]
 803c7c4:	4413      	add	r3, r2
 803c7c6:	2200      	movs	r2, #0
 803c7c8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 803c7ca:	7dfb      	ldrb	r3, [r7, #23]
 803c7cc:	3301      	adds	r3, #1
 803c7ce:	75fb      	strb	r3, [r7, #23]
 803c7d0:	7dfa      	ldrb	r2, [r7, #23]
 803c7d2:	79fb      	ldrb	r3, [r7, #7]
 803c7d4:	429a      	cmp	r2, r3
 803c7d6:	d3d3      	bcc.n	803c780 <IntToUnicode+0x18>
  }
}
 803c7d8:	bf00      	nop
 803c7da:	bf00      	nop
 803c7dc:	371c      	adds	r7, #28
 803c7de:	46bd      	mov	sp, r7
 803c7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 803c7e4:	4770      	bx	lr
	...

0803c7e8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 803c7e8:	b580      	push	{r7, lr}
 803c7ea:	b0b8      	sub	sp, #224	; 0xe0
 803c7ec:	af00      	add	r7, sp, #0
 803c7ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 803c7f0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 803c7f4:	2200      	movs	r2, #0
 803c7f6:	601a      	str	r2, [r3, #0]
 803c7f8:	605a      	str	r2, [r3, #4]
 803c7fa:	609a      	str	r2, [r3, #8]
 803c7fc:	60da      	str	r2, [r3, #12]
 803c7fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 803c800:	f107 0310 	add.w	r3, r7, #16
 803c804:	22bc      	movs	r2, #188	; 0xbc
 803c806:	2100      	movs	r1, #0
 803c808:	4618      	mov	r0, r3
 803c80a:	f000 fbe9 	bl	803cfe0 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 803c80e:	687b      	ldr	r3, [r7, #4]
 803c810:	681b      	ldr	r3, [r3, #0]
 803c812:	4a2f      	ldr	r2, [pc, #188]	; (803c8d0 <HAL_PCD_MspInit+0xe8>)
 803c814:	4293      	cmp	r3, r2
 803c816:	d156      	bne.n	803c8c6 <HAL_PCD_MspInit+0xde>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 803c818:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 803c81c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 803c81e:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 803c822:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 803c826:	f107 0310 	add.w	r3, r7, #16
 803c82a:	4618      	mov	r0, r3
 803c82c:	f7f6 fc22 	bl	8033074 <HAL_RCCEx_PeriphCLKConfig>
 803c830:	4603      	mov	r3, r0
 803c832:	2b00      	cmp	r3, #0
 803c834:	d001      	beq.n	803c83a <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 803c836:	f7ee fbc5 	bl	802afc4 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 803c83a:	f7f5 fc51 	bl	80320e0 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 803c83e:	4b25      	ldr	r3, [pc, #148]	; (803c8d4 <HAL_PCD_MspInit+0xec>)
 803c840:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 803c844:	4a23      	ldr	r2, [pc, #140]	; (803c8d4 <HAL_PCD_MspInit+0xec>)
 803c846:	f043 0301 	orr.w	r3, r3, #1
 803c84a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 803c84e:	4b21      	ldr	r3, [pc, #132]	; (803c8d4 <HAL_PCD_MspInit+0xec>)
 803c850:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 803c854:	f003 0301 	and.w	r3, r3, #1
 803c858:	60fb      	str	r3, [r7, #12]
 803c85a:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 803c85c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 803c860:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 803c864:	2302      	movs	r3, #2
 803c866:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 803c86a:	2300      	movs	r3, #0
 803c86c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 803c870:	2300      	movs	r3, #0
 803c872:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 803c876:	230a      	movs	r3, #10
 803c878:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 803c87c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 803c880:	4619      	mov	r1, r3
 803c882:	4815      	ldr	r0, [pc, #84]	; (803c8d8 <HAL_PCD_MspInit+0xf0>)
 803c884:	f7f2 ffa6 	bl	802f7d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 803c888:	4b12      	ldr	r3, [pc, #72]	; (803c8d4 <HAL_PCD_MspInit+0xec>)
 803c88a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 803c88e:	4a11      	ldr	r2, [pc, #68]	; (803c8d4 <HAL_PCD_MspInit+0xec>)
 803c890:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 803c894:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 803c898:	4b0e      	ldr	r3, [pc, #56]	; (803c8d4 <HAL_PCD_MspInit+0xec>)
 803c89a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 803c89e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 803c8a2:	60bb      	str	r3, [r7, #8]
 803c8a4:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_EP1_OUT_IRQn, 0, 0);
 803c8a6:	2200      	movs	r2, #0
 803c8a8:	2100      	movs	r1, #0
 803c8aa:	2062      	movs	r0, #98	; 0x62
 803c8ac:	f7ef ff3f 	bl	802c72e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_EP1_OUT_IRQn);
 803c8b0:	2062      	movs	r0, #98	; 0x62
 803c8b2:	f7ef ff56 	bl	802c762 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 803c8b6:	2200      	movs	r2, #0
 803c8b8:	2100      	movs	r1, #0
 803c8ba:	2065      	movs	r0, #101	; 0x65
 803c8bc:	f7ef ff37 	bl	802c72e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 803c8c0:	2065      	movs	r0, #101	; 0x65
 803c8c2:	f7ef ff4e 	bl	802c762 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 803c8c6:	bf00      	nop
 803c8c8:	37e0      	adds	r7, #224	; 0xe0
 803c8ca:	46bd      	mov	sp, r7
 803c8cc:	bd80      	pop	{r7, pc}
 803c8ce:	bf00      	nop
 803c8d0:	40080000 	.word	0x40080000
 803c8d4:	58024400 	.word	0x58024400
 803c8d8:	58020000 	.word	0x58020000

0803c8dc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803c8dc:	b580      	push	{r7, lr}
 803c8de:	b082      	sub	sp, #8
 803c8e0:	af00      	add	r7, sp, #0
 803c8e2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 803c8e4:	687b      	ldr	r3, [r7, #4]
 803c8e6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 803c8ea:	687b      	ldr	r3, [r7, #4]
 803c8ec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 803c8f0:	4619      	mov	r1, r3
 803c8f2:	4610      	mov	r0, r2
 803c8f4:	f7fe fb57 	bl	803afa6 <USBD_LL_SetupStage>
}
 803c8f8:	bf00      	nop
 803c8fa:	3708      	adds	r7, #8
 803c8fc:	46bd      	mov	sp, r7
 803c8fe:	bd80      	pop	{r7, pc}

0803c900 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803c900:	b580      	push	{r7, lr}
 803c902:	b082      	sub	sp, #8
 803c904:	af00      	add	r7, sp, #0
 803c906:	6078      	str	r0, [r7, #4]
 803c908:	460b      	mov	r3, r1
 803c90a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 803c90c:	687b      	ldr	r3, [r7, #4]
 803c90e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 803c912:	78fa      	ldrb	r2, [r7, #3]
 803c914:	6879      	ldr	r1, [r7, #4]
 803c916:	4613      	mov	r3, r2
 803c918:	00db      	lsls	r3, r3, #3
 803c91a:	4413      	add	r3, r2
 803c91c:	009b      	lsls	r3, r3, #2
 803c91e:	440b      	add	r3, r1
 803c920:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 803c924:	681a      	ldr	r2, [r3, #0]
 803c926:	78fb      	ldrb	r3, [r7, #3]
 803c928:	4619      	mov	r1, r3
 803c92a:	f7fe fb91 	bl	803b050 <USBD_LL_DataOutStage>
}
 803c92e:	bf00      	nop
 803c930:	3708      	adds	r7, #8
 803c932:	46bd      	mov	sp, r7
 803c934:	bd80      	pop	{r7, pc}

0803c936 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803c936:	b580      	push	{r7, lr}
 803c938:	b082      	sub	sp, #8
 803c93a:	af00      	add	r7, sp, #0
 803c93c:	6078      	str	r0, [r7, #4]
 803c93e:	460b      	mov	r3, r1
 803c940:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 803c942:	687b      	ldr	r3, [r7, #4]
 803c944:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 803c948:	78fa      	ldrb	r2, [r7, #3]
 803c94a:	6879      	ldr	r1, [r7, #4]
 803c94c:	4613      	mov	r3, r2
 803c94e:	00db      	lsls	r3, r3, #3
 803c950:	4413      	add	r3, r2
 803c952:	009b      	lsls	r3, r3, #2
 803c954:	440b      	add	r3, r1
 803c956:	334c      	adds	r3, #76	; 0x4c
 803c958:	681a      	ldr	r2, [r3, #0]
 803c95a:	78fb      	ldrb	r3, [r7, #3]
 803c95c:	4619      	mov	r1, r3
 803c95e:	f7fe fc2a 	bl	803b1b6 <USBD_LL_DataInStage>
}
 803c962:	bf00      	nop
 803c964:	3708      	adds	r7, #8
 803c966:	46bd      	mov	sp, r7
 803c968:	bd80      	pop	{r7, pc}

0803c96a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803c96a:	b580      	push	{r7, lr}
 803c96c:	b082      	sub	sp, #8
 803c96e:	af00      	add	r7, sp, #0
 803c970:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 803c972:	687b      	ldr	r3, [r7, #4]
 803c974:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 803c978:	4618      	mov	r0, r3
 803c97a:	f7fe fd5e 	bl	803b43a <USBD_LL_SOF>
}
 803c97e:	bf00      	nop
 803c980:	3708      	adds	r7, #8
 803c982:	46bd      	mov	sp, r7
 803c984:	bd80      	pop	{r7, pc}

0803c986 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803c986:	b580      	push	{r7, lr}
 803c988:	b084      	sub	sp, #16
 803c98a:	af00      	add	r7, sp, #0
 803c98c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 803c98e:	2301      	movs	r3, #1
 803c990:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 803c992:	687b      	ldr	r3, [r7, #4]
 803c994:	68db      	ldr	r3, [r3, #12]
 803c996:	2b00      	cmp	r3, #0
 803c998:	d102      	bne.n	803c9a0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 803c99a:	2300      	movs	r3, #0
 803c99c:	73fb      	strb	r3, [r7, #15]
 803c99e:	e008      	b.n	803c9b2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 803c9a0:	687b      	ldr	r3, [r7, #4]
 803c9a2:	68db      	ldr	r3, [r3, #12]
 803c9a4:	2b02      	cmp	r3, #2
 803c9a6:	d102      	bne.n	803c9ae <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 803c9a8:	2301      	movs	r3, #1
 803c9aa:	73fb      	strb	r3, [r7, #15]
 803c9ac:	e001      	b.n	803c9b2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 803c9ae:	f7ee fb09 	bl	802afc4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 803c9b2:	687b      	ldr	r3, [r7, #4]
 803c9b4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 803c9b8:	7bfa      	ldrb	r2, [r7, #15]
 803c9ba:	4611      	mov	r1, r2
 803c9bc:	4618      	mov	r0, r3
 803c9be:	f7fe fcfe 	bl	803b3be <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 803c9c2:	687b      	ldr	r3, [r7, #4]
 803c9c4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 803c9c8:	4618      	mov	r0, r3
 803c9ca:	f7fe fca6 	bl	803b31a <USBD_LL_Reset>
}
 803c9ce:	bf00      	nop
 803c9d0:	3710      	adds	r7, #16
 803c9d2:	46bd      	mov	sp, r7
 803c9d4:	bd80      	pop	{r7, pc}
	...

0803c9d8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803c9d8:	b580      	push	{r7, lr}
 803c9da:	b082      	sub	sp, #8
 803c9dc:	af00      	add	r7, sp, #0
 803c9de:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 803c9e0:	687b      	ldr	r3, [r7, #4]
 803c9e2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 803c9e6:	4618      	mov	r0, r3
 803c9e8:	f7fe fcf9 	bl	803b3de <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 803c9ec:	687b      	ldr	r3, [r7, #4]
 803c9ee:	681b      	ldr	r3, [r3, #0]
 803c9f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 803c9f4:	681b      	ldr	r3, [r3, #0]
 803c9f6:	687a      	ldr	r2, [r7, #4]
 803c9f8:	6812      	ldr	r2, [r2, #0]
 803c9fa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 803c9fe:	f043 0301 	orr.w	r3, r3, #1
 803ca02:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 803ca04:	687b      	ldr	r3, [r7, #4]
 803ca06:	6a1b      	ldr	r3, [r3, #32]
 803ca08:	2b00      	cmp	r3, #0
 803ca0a:	d005      	beq.n	803ca18 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 803ca0c:	4b04      	ldr	r3, [pc, #16]	; (803ca20 <HAL_PCD_SuspendCallback+0x48>)
 803ca0e:	691b      	ldr	r3, [r3, #16]
 803ca10:	4a03      	ldr	r2, [pc, #12]	; (803ca20 <HAL_PCD_SuspendCallback+0x48>)
 803ca12:	f043 0306 	orr.w	r3, r3, #6
 803ca16:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 803ca18:	bf00      	nop
 803ca1a:	3708      	adds	r7, #8
 803ca1c:	46bd      	mov	sp, r7
 803ca1e:	bd80      	pop	{r7, pc}
 803ca20:	e000ed00 	.word	0xe000ed00

0803ca24 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803ca24:	b580      	push	{r7, lr}
 803ca26:	b082      	sub	sp, #8
 803ca28:	af00      	add	r7, sp, #0
 803ca2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 803ca2c:	687b      	ldr	r3, [r7, #4]
 803ca2e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 803ca32:	4618      	mov	r0, r3
 803ca34:	f7fe fce9 	bl	803b40a <USBD_LL_Resume>
}
 803ca38:	bf00      	nop
 803ca3a:	3708      	adds	r7, #8
 803ca3c:	46bd      	mov	sp, r7
 803ca3e:	bd80      	pop	{r7, pc}

0803ca40 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803ca40:	b580      	push	{r7, lr}
 803ca42:	b082      	sub	sp, #8
 803ca44:	af00      	add	r7, sp, #0
 803ca46:	6078      	str	r0, [r7, #4]
 803ca48:	460b      	mov	r3, r1
 803ca4a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 803ca4c:	687b      	ldr	r3, [r7, #4]
 803ca4e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 803ca52:	78fa      	ldrb	r2, [r7, #3]
 803ca54:	4611      	mov	r1, r2
 803ca56:	4618      	mov	r0, r3
 803ca58:	f7fe fd41 	bl	803b4de <USBD_LL_IsoOUTIncomplete>
}
 803ca5c:	bf00      	nop
 803ca5e:	3708      	adds	r7, #8
 803ca60:	46bd      	mov	sp, r7
 803ca62:	bd80      	pop	{r7, pc}

0803ca64 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803ca64:	b580      	push	{r7, lr}
 803ca66:	b082      	sub	sp, #8
 803ca68:	af00      	add	r7, sp, #0
 803ca6a:	6078      	str	r0, [r7, #4]
 803ca6c:	460b      	mov	r3, r1
 803ca6e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 803ca70:	687b      	ldr	r3, [r7, #4]
 803ca72:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 803ca76:	78fa      	ldrb	r2, [r7, #3]
 803ca78:	4611      	mov	r1, r2
 803ca7a:	4618      	mov	r0, r3
 803ca7c:	f7fe fcfd 	bl	803b47a <USBD_LL_IsoINIncomplete>
}
 803ca80:	bf00      	nop
 803ca82:	3708      	adds	r7, #8
 803ca84:	46bd      	mov	sp, r7
 803ca86:	bd80      	pop	{r7, pc}

0803ca88 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803ca88:	b580      	push	{r7, lr}
 803ca8a:	b082      	sub	sp, #8
 803ca8c:	af00      	add	r7, sp, #0
 803ca8e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 803ca90:	687b      	ldr	r3, [r7, #4]
 803ca92:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 803ca96:	4618      	mov	r0, r3
 803ca98:	f7fe fd53 	bl	803b542 <USBD_LL_DevConnected>
}
 803ca9c:	bf00      	nop
 803ca9e:	3708      	adds	r7, #8
 803caa0:	46bd      	mov	sp, r7
 803caa2:	bd80      	pop	{r7, pc}

0803caa4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803caa4:	b580      	push	{r7, lr}
 803caa6:	b082      	sub	sp, #8
 803caa8:	af00      	add	r7, sp, #0
 803caaa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 803caac:	687b      	ldr	r3, [r7, #4]
 803caae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 803cab2:	4618      	mov	r0, r3
 803cab4:	f7fe fd50 	bl	803b558 <USBD_LL_DevDisconnected>
}
 803cab8:	bf00      	nop
 803caba:	3708      	adds	r7, #8
 803cabc:	46bd      	mov	sp, r7
 803cabe:	bd80      	pop	{r7, pc}

0803cac0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 803cac0:	b580      	push	{r7, lr}
 803cac2:	b082      	sub	sp, #8
 803cac4:	af00      	add	r7, sp, #0
 803cac6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 803cac8:	687b      	ldr	r3, [r7, #4]
 803caca:	781b      	ldrb	r3, [r3, #0]
 803cacc:	2b00      	cmp	r3, #0
 803cace:	d13e      	bne.n	803cb4e <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 803cad0:	4a21      	ldr	r2, [pc, #132]	; (803cb58 <USBD_LL_Init+0x98>)
 803cad2:	687b      	ldr	r3, [r7, #4]
 803cad4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 803cad8:	687b      	ldr	r3, [r7, #4]
 803cada:	4a1f      	ldr	r2, [pc, #124]	; (803cb58 <USBD_LL_Init+0x98>)
 803cadc:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 803cae0:	4b1d      	ldr	r3, [pc, #116]	; (803cb58 <USBD_LL_Init+0x98>)
 803cae2:	4a1e      	ldr	r2, [pc, #120]	; (803cb5c <USBD_LL_Init+0x9c>)
 803cae4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 803cae6:	4b1c      	ldr	r3, [pc, #112]	; (803cb58 <USBD_LL_Init+0x98>)
 803cae8:	2209      	movs	r2, #9
 803caea:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 803caec:	4b1a      	ldr	r3, [pc, #104]	; (803cb58 <USBD_LL_Init+0x98>)
 803caee:	2202      	movs	r2, #2
 803caf0:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 803caf2:	4b19      	ldr	r3, [pc, #100]	; (803cb58 <USBD_LL_Init+0x98>)
 803caf4:	2200      	movs	r2, #0
 803caf6:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 803caf8:	4b17      	ldr	r3, [pc, #92]	; (803cb58 <USBD_LL_Init+0x98>)
 803cafa:	2202      	movs	r2, #2
 803cafc:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 803cafe:	4b16      	ldr	r3, [pc, #88]	; (803cb58 <USBD_LL_Init+0x98>)
 803cb00:	2200      	movs	r2, #0
 803cb02:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 803cb04:	4b14      	ldr	r3, [pc, #80]	; (803cb58 <USBD_LL_Init+0x98>)
 803cb06:	2200      	movs	r2, #0
 803cb08:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 803cb0a:	4b13      	ldr	r3, [pc, #76]	; (803cb58 <USBD_LL_Init+0x98>)
 803cb0c:	2200      	movs	r2, #0
 803cb0e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 803cb10:	4b11      	ldr	r3, [pc, #68]	; (803cb58 <USBD_LL_Init+0x98>)
 803cb12:	2200      	movs	r2, #0
 803cb14:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 803cb16:	4b10      	ldr	r3, [pc, #64]	; (803cb58 <USBD_LL_Init+0x98>)
 803cb18:	2200      	movs	r2, #0
 803cb1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 803cb1c:	4b0e      	ldr	r3, [pc, #56]	; (803cb58 <USBD_LL_Init+0x98>)
 803cb1e:	2200      	movs	r2, #0
 803cb20:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 803cb22:	480d      	ldr	r0, [pc, #52]	; (803cb58 <USBD_LL_Init+0x98>)
 803cb24:	f7f3 ffcc 	bl	8030ac0 <HAL_PCD_Init>
 803cb28:	4603      	mov	r3, r0
 803cb2a:	2b00      	cmp	r3, #0
 803cb2c:	d001      	beq.n	803cb32 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 803cb2e:	f7ee fa49 	bl	802afc4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 803cb32:	2180      	movs	r1, #128	; 0x80
 803cb34:	4808      	ldr	r0, [pc, #32]	; (803cb58 <USBD_LL_Init+0x98>)
 803cb36:	f7f5 fa58 	bl	8031fea <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 803cb3a:	2240      	movs	r2, #64	; 0x40
 803cb3c:	2100      	movs	r1, #0
 803cb3e:	4806      	ldr	r0, [pc, #24]	; (803cb58 <USBD_LL_Init+0x98>)
 803cb40:	f7f5 fa0c 	bl	8031f5c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 803cb44:	2280      	movs	r2, #128	; 0x80
 803cb46:	2101      	movs	r1, #1
 803cb48:	4803      	ldr	r0, [pc, #12]	; (803cb58 <USBD_LL_Init+0x98>)
 803cb4a:	f7f5 fa07 	bl	8031f5c <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 803cb4e:	2300      	movs	r3, #0
}
 803cb50:	4618      	mov	r0, r3
 803cb52:	3708      	adds	r7, #8
 803cb54:	46bd      	mov	sp, r7
 803cb56:	bd80      	pop	{r7, pc}
 803cb58:	24003028 	.word	0x24003028
 803cb5c:	40080000 	.word	0x40080000

0803cb60 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 803cb60:	b580      	push	{r7, lr}
 803cb62:	b084      	sub	sp, #16
 803cb64:	af00      	add	r7, sp, #0
 803cb66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 803cb68:	2300      	movs	r3, #0
 803cb6a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 803cb6c:	2300      	movs	r3, #0
 803cb6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 803cb70:	687b      	ldr	r3, [r7, #4]
 803cb72:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 803cb76:	4618      	mov	r0, r3
 803cb78:	f7f4 f8c6 	bl	8030d08 <HAL_PCD_Start>
 803cb7c:	4603      	mov	r3, r0
 803cb7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 803cb80:	7bfb      	ldrb	r3, [r7, #15]
 803cb82:	4618      	mov	r0, r3
 803cb84:	f000 f942 	bl	803ce0c <USBD_Get_USB_Status>
 803cb88:	4603      	mov	r3, r0
 803cb8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 803cb8c:	7bbb      	ldrb	r3, [r7, #14]
}
 803cb8e:	4618      	mov	r0, r3
 803cb90:	3710      	adds	r7, #16
 803cb92:	46bd      	mov	sp, r7
 803cb94:	bd80      	pop	{r7, pc}

0803cb96 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 803cb96:	b580      	push	{r7, lr}
 803cb98:	b084      	sub	sp, #16
 803cb9a:	af00      	add	r7, sp, #0
 803cb9c:	6078      	str	r0, [r7, #4]
 803cb9e:	4608      	mov	r0, r1
 803cba0:	4611      	mov	r1, r2
 803cba2:	461a      	mov	r2, r3
 803cba4:	4603      	mov	r3, r0
 803cba6:	70fb      	strb	r3, [r7, #3]
 803cba8:	460b      	mov	r3, r1
 803cbaa:	70bb      	strb	r3, [r7, #2]
 803cbac:	4613      	mov	r3, r2
 803cbae:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 803cbb0:	2300      	movs	r3, #0
 803cbb2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 803cbb4:	2300      	movs	r3, #0
 803cbb6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 803cbb8:	687b      	ldr	r3, [r7, #4]
 803cbba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 803cbbe:	78bb      	ldrb	r3, [r7, #2]
 803cbc0:	883a      	ldrh	r2, [r7, #0]
 803cbc2:	78f9      	ldrb	r1, [r7, #3]
 803cbc4:	f7f4 fdc4 	bl	8031750 <HAL_PCD_EP_Open>
 803cbc8:	4603      	mov	r3, r0
 803cbca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 803cbcc:	7bfb      	ldrb	r3, [r7, #15]
 803cbce:	4618      	mov	r0, r3
 803cbd0:	f000 f91c 	bl	803ce0c <USBD_Get_USB_Status>
 803cbd4:	4603      	mov	r3, r0
 803cbd6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 803cbd8:	7bbb      	ldrb	r3, [r7, #14]
}
 803cbda:	4618      	mov	r0, r3
 803cbdc:	3710      	adds	r7, #16
 803cbde:	46bd      	mov	sp, r7
 803cbe0:	bd80      	pop	{r7, pc}

0803cbe2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 803cbe2:	b580      	push	{r7, lr}
 803cbe4:	b084      	sub	sp, #16
 803cbe6:	af00      	add	r7, sp, #0
 803cbe8:	6078      	str	r0, [r7, #4]
 803cbea:	460b      	mov	r3, r1
 803cbec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 803cbee:	2300      	movs	r3, #0
 803cbf0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 803cbf2:	2300      	movs	r3, #0
 803cbf4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 803cbf6:	687b      	ldr	r3, [r7, #4]
 803cbf8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 803cbfc:	78fa      	ldrb	r2, [r7, #3]
 803cbfe:	4611      	mov	r1, r2
 803cc00:	4618      	mov	r0, r3
 803cc02:	f7f4 fe0d 	bl	8031820 <HAL_PCD_EP_Close>
 803cc06:	4603      	mov	r3, r0
 803cc08:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 803cc0a:	7bfb      	ldrb	r3, [r7, #15]
 803cc0c:	4618      	mov	r0, r3
 803cc0e:	f000 f8fd 	bl	803ce0c <USBD_Get_USB_Status>
 803cc12:	4603      	mov	r3, r0
 803cc14:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 803cc16:	7bbb      	ldrb	r3, [r7, #14]
}
 803cc18:	4618      	mov	r0, r3
 803cc1a:	3710      	adds	r7, #16
 803cc1c:	46bd      	mov	sp, r7
 803cc1e:	bd80      	pop	{r7, pc}

0803cc20 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 803cc20:	b580      	push	{r7, lr}
 803cc22:	b084      	sub	sp, #16
 803cc24:	af00      	add	r7, sp, #0
 803cc26:	6078      	str	r0, [r7, #4]
 803cc28:	460b      	mov	r3, r1
 803cc2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 803cc2c:	2300      	movs	r3, #0
 803cc2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 803cc30:	2300      	movs	r3, #0
 803cc32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 803cc34:	687b      	ldr	r3, [r7, #4]
 803cc36:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 803cc3a:	78fa      	ldrb	r2, [r7, #3]
 803cc3c:	4611      	mov	r1, r2
 803cc3e:	4618      	mov	r0, r3
 803cc40:	f7f4 fee5 	bl	8031a0e <HAL_PCD_EP_SetStall>
 803cc44:	4603      	mov	r3, r0
 803cc46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 803cc48:	7bfb      	ldrb	r3, [r7, #15]
 803cc4a:	4618      	mov	r0, r3
 803cc4c:	f000 f8de 	bl	803ce0c <USBD_Get_USB_Status>
 803cc50:	4603      	mov	r3, r0
 803cc52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 803cc54:	7bbb      	ldrb	r3, [r7, #14]
}
 803cc56:	4618      	mov	r0, r3
 803cc58:	3710      	adds	r7, #16
 803cc5a:	46bd      	mov	sp, r7
 803cc5c:	bd80      	pop	{r7, pc}

0803cc5e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 803cc5e:	b580      	push	{r7, lr}
 803cc60:	b084      	sub	sp, #16
 803cc62:	af00      	add	r7, sp, #0
 803cc64:	6078      	str	r0, [r7, #4]
 803cc66:	460b      	mov	r3, r1
 803cc68:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 803cc6a:	2300      	movs	r3, #0
 803cc6c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 803cc6e:	2300      	movs	r3, #0
 803cc70:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 803cc72:	687b      	ldr	r3, [r7, #4]
 803cc74:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 803cc78:	78fa      	ldrb	r2, [r7, #3]
 803cc7a:	4611      	mov	r1, r2
 803cc7c:	4618      	mov	r0, r3
 803cc7e:	f7f4 ff2a 	bl	8031ad6 <HAL_PCD_EP_ClrStall>
 803cc82:	4603      	mov	r3, r0
 803cc84:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 803cc86:	7bfb      	ldrb	r3, [r7, #15]
 803cc88:	4618      	mov	r0, r3
 803cc8a:	f000 f8bf 	bl	803ce0c <USBD_Get_USB_Status>
 803cc8e:	4603      	mov	r3, r0
 803cc90:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 803cc92:	7bbb      	ldrb	r3, [r7, #14]
}
 803cc94:	4618      	mov	r0, r3
 803cc96:	3710      	adds	r7, #16
 803cc98:	46bd      	mov	sp, r7
 803cc9a:	bd80      	pop	{r7, pc}

0803cc9c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 803cc9c:	b480      	push	{r7}
 803cc9e:	b085      	sub	sp, #20
 803cca0:	af00      	add	r7, sp, #0
 803cca2:	6078      	str	r0, [r7, #4]
 803cca4:	460b      	mov	r3, r1
 803cca6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 803cca8:	687b      	ldr	r3, [r7, #4]
 803ccaa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 803ccae:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 803ccb0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 803ccb4:	2b00      	cmp	r3, #0
 803ccb6:	da0b      	bge.n	803ccd0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 803ccb8:	78fb      	ldrb	r3, [r7, #3]
 803ccba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 803ccbe:	68f9      	ldr	r1, [r7, #12]
 803ccc0:	4613      	mov	r3, r2
 803ccc2:	00db      	lsls	r3, r3, #3
 803ccc4:	4413      	add	r3, r2
 803ccc6:	009b      	lsls	r3, r3, #2
 803ccc8:	440b      	add	r3, r1
 803ccca:	333e      	adds	r3, #62	; 0x3e
 803cccc:	781b      	ldrb	r3, [r3, #0]
 803ccce:	e00b      	b.n	803cce8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 803ccd0:	78fb      	ldrb	r3, [r7, #3]
 803ccd2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 803ccd6:	68f9      	ldr	r1, [r7, #12]
 803ccd8:	4613      	mov	r3, r2
 803ccda:	00db      	lsls	r3, r3, #3
 803ccdc:	4413      	add	r3, r2
 803ccde:	009b      	lsls	r3, r3, #2
 803cce0:	440b      	add	r3, r1
 803cce2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 803cce6:	781b      	ldrb	r3, [r3, #0]
  }
}
 803cce8:	4618      	mov	r0, r3
 803ccea:	3714      	adds	r7, #20
 803ccec:	46bd      	mov	sp, r7
 803ccee:	f85d 7b04 	ldr.w	r7, [sp], #4
 803ccf2:	4770      	bx	lr

0803ccf4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 803ccf4:	b580      	push	{r7, lr}
 803ccf6:	b084      	sub	sp, #16
 803ccf8:	af00      	add	r7, sp, #0
 803ccfa:	6078      	str	r0, [r7, #4]
 803ccfc:	460b      	mov	r3, r1
 803ccfe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 803cd00:	2300      	movs	r3, #0
 803cd02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 803cd04:	2300      	movs	r3, #0
 803cd06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 803cd08:	687b      	ldr	r3, [r7, #4]
 803cd0a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 803cd0e:	78fa      	ldrb	r2, [r7, #3]
 803cd10:	4611      	mov	r1, r2
 803cd12:	4618      	mov	r0, r3
 803cd14:	f7f4 fcf7 	bl	8031706 <HAL_PCD_SetAddress>
 803cd18:	4603      	mov	r3, r0
 803cd1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 803cd1c:	7bfb      	ldrb	r3, [r7, #15]
 803cd1e:	4618      	mov	r0, r3
 803cd20:	f000 f874 	bl	803ce0c <USBD_Get_USB_Status>
 803cd24:	4603      	mov	r3, r0
 803cd26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 803cd28:	7bbb      	ldrb	r3, [r7, #14]
}
 803cd2a:	4618      	mov	r0, r3
 803cd2c:	3710      	adds	r7, #16
 803cd2e:	46bd      	mov	sp, r7
 803cd30:	bd80      	pop	{r7, pc}

0803cd32 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 803cd32:	b580      	push	{r7, lr}
 803cd34:	b086      	sub	sp, #24
 803cd36:	af00      	add	r7, sp, #0
 803cd38:	60f8      	str	r0, [r7, #12]
 803cd3a:	607a      	str	r2, [r7, #4]
 803cd3c:	603b      	str	r3, [r7, #0]
 803cd3e:	460b      	mov	r3, r1
 803cd40:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 803cd42:	2300      	movs	r3, #0
 803cd44:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 803cd46:	2300      	movs	r3, #0
 803cd48:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 803cd4a:	68fb      	ldr	r3, [r7, #12]
 803cd4c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 803cd50:	7af9      	ldrb	r1, [r7, #11]
 803cd52:	683b      	ldr	r3, [r7, #0]
 803cd54:	687a      	ldr	r2, [r7, #4]
 803cd56:	f7f4 fe10 	bl	803197a <HAL_PCD_EP_Transmit>
 803cd5a:	4603      	mov	r3, r0
 803cd5c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 803cd5e:	7dfb      	ldrb	r3, [r7, #23]
 803cd60:	4618      	mov	r0, r3
 803cd62:	f000 f853 	bl	803ce0c <USBD_Get_USB_Status>
 803cd66:	4603      	mov	r3, r0
 803cd68:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 803cd6a:	7dbb      	ldrb	r3, [r7, #22]
}
 803cd6c:	4618      	mov	r0, r3
 803cd6e:	3718      	adds	r7, #24
 803cd70:	46bd      	mov	sp, r7
 803cd72:	bd80      	pop	{r7, pc}

0803cd74 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 803cd74:	b580      	push	{r7, lr}
 803cd76:	b086      	sub	sp, #24
 803cd78:	af00      	add	r7, sp, #0
 803cd7a:	60f8      	str	r0, [r7, #12]
 803cd7c:	607a      	str	r2, [r7, #4]
 803cd7e:	603b      	str	r3, [r7, #0]
 803cd80:	460b      	mov	r3, r1
 803cd82:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 803cd84:	2300      	movs	r3, #0
 803cd86:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 803cd88:	2300      	movs	r3, #0
 803cd8a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 803cd8c:	68fb      	ldr	r3, [r7, #12]
 803cd8e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 803cd92:	7af9      	ldrb	r1, [r7, #11]
 803cd94:	683b      	ldr	r3, [r7, #0]
 803cd96:	687a      	ldr	r2, [r7, #4]
 803cd98:	f7f4 fd8c 	bl	80318b4 <HAL_PCD_EP_Receive>
 803cd9c:	4603      	mov	r3, r0
 803cd9e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 803cda0:	7dfb      	ldrb	r3, [r7, #23]
 803cda2:	4618      	mov	r0, r3
 803cda4:	f000 f832 	bl	803ce0c <USBD_Get_USB_Status>
 803cda8:	4603      	mov	r3, r0
 803cdaa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 803cdac:	7dbb      	ldrb	r3, [r7, #22]
}
 803cdae:	4618      	mov	r0, r3
 803cdb0:	3718      	adds	r7, #24
 803cdb2:	46bd      	mov	sp, r7
 803cdb4:	bd80      	pop	{r7, pc}

0803cdb6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 803cdb6:	b580      	push	{r7, lr}
 803cdb8:	b082      	sub	sp, #8
 803cdba:	af00      	add	r7, sp, #0
 803cdbc:	6078      	str	r0, [r7, #4]
 803cdbe:	460b      	mov	r3, r1
 803cdc0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 803cdc2:	687b      	ldr	r3, [r7, #4]
 803cdc4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 803cdc8:	78fa      	ldrb	r2, [r7, #3]
 803cdca:	4611      	mov	r1, r2
 803cdcc:	4618      	mov	r0, r3
 803cdce:	f7f4 fdbc 	bl	803194a <HAL_PCD_EP_GetRxCount>
 803cdd2:	4603      	mov	r3, r0
}
 803cdd4:	4618      	mov	r0, r3
 803cdd6:	3708      	adds	r7, #8
 803cdd8:	46bd      	mov	sp, r7
 803cdda:	bd80      	pop	{r7, pc}

0803cddc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 803cddc:	b480      	push	{r7}
 803cdde:	b083      	sub	sp, #12
 803cde0:	af00      	add	r7, sp, #0
 803cde2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 803cde4:	4b03      	ldr	r3, [pc, #12]	; (803cdf4 <USBD_static_malloc+0x18>)
}
 803cde6:	4618      	mov	r0, r3
 803cde8:	370c      	adds	r7, #12
 803cdea:	46bd      	mov	sp, r7
 803cdec:	f85d 7b04 	ldr.w	r7, [sp], #4
 803cdf0:	4770      	bx	lr
 803cdf2:	bf00      	nop
 803cdf4:	24003534 	.word	0x24003534

0803cdf8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 803cdf8:	b480      	push	{r7}
 803cdfa:	b083      	sub	sp, #12
 803cdfc:	af00      	add	r7, sp, #0
 803cdfe:	6078      	str	r0, [r7, #4]

}
 803ce00:	bf00      	nop
 803ce02:	370c      	adds	r7, #12
 803ce04:	46bd      	mov	sp, r7
 803ce06:	f85d 7b04 	ldr.w	r7, [sp], #4
 803ce0a:	4770      	bx	lr

0803ce0c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 803ce0c:	b480      	push	{r7}
 803ce0e:	b085      	sub	sp, #20
 803ce10:	af00      	add	r7, sp, #0
 803ce12:	4603      	mov	r3, r0
 803ce14:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 803ce16:	2300      	movs	r3, #0
 803ce18:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 803ce1a:	79fb      	ldrb	r3, [r7, #7]
 803ce1c:	2b03      	cmp	r3, #3
 803ce1e:	d817      	bhi.n	803ce50 <USBD_Get_USB_Status+0x44>
 803ce20:	a201      	add	r2, pc, #4	; (adr r2, 803ce28 <USBD_Get_USB_Status+0x1c>)
 803ce22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803ce26:	bf00      	nop
 803ce28:	0803ce39 	.word	0x0803ce39
 803ce2c:	0803ce3f 	.word	0x0803ce3f
 803ce30:	0803ce45 	.word	0x0803ce45
 803ce34:	0803ce4b 	.word	0x0803ce4b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 803ce38:	2300      	movs	r3, #0
 803ce3a:	73fb      	strb	r3, [r7, #15]
    break;
 803ce3c:	e00b      	b.n	803ce56 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 803ce3e:	2303      	movs	r3, #3
 803ce40:	73fb      	strb	r3, [r7, #15]
    break;
 803ce42:	e008      	b.n	803ce56 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 803ce44:	2301      	movs	r3, #1
 803ce46:	73fb      	strb	r3, [r7, #15]
    break;
 803ce48:	e005      	b.n	803ce56 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 803ce4a:	2303      	movs	r3, #3
 803ce4c:	73fb      	strb	r3, [r7, #15]
    break;
 803ce4e:	e002      	b.n	803ce56 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 803ce50:	2303      	movs	r3, #3
 803ce52:	73fb      	strb	r3, [r7, #15]
    break;
 803ce54:	bf00      	nop
  }
  return usb_status;
 803ce56:	7bfb      	ldrb	r3, [r7, #15]
}
 803ce58:	4618      	mov	r0, r3
 803ce5a:	3714      	adds	r7, #20
 803ce5c:	46bd      	mov	sp, r7
 803ce5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 803ce62:	4770      	bx	lr

0803ce64 <_ZdlPvj>:
 803ce64:	f000 b817 	b.w	803ce96 <_ZdlPv>

0803ce68 <_Znwj>:
 803ce68:	2801      	cmp	r0, #1
 803ce6a:	bf38      	it	cc
 803ce6c:	2001      	movcc	r0, #1
 803ce6e:	b510      	push	{r4, lr}
 803ce70:	4604      	mov	r4, r0
 803ce72:	4620      	mov	r0, r4
 803ce74:	f000 f87c 	bl	803cf70 <malloc>
 803ce78:	b930      	cbnz	r0, 803ce88 <_Znwj+0x20>
 803ce7a:	f000 f80f 	bl	803ce9c <_ZSt15get_new_handlerv>
 803ce7e:	b908      	cbnz	r0, 803ce84 <_Znwj+0x1c>
 803ce80:	f000 f814 	bl	803ceac <abort>
 803ce84:	4780      	blx	r0
 803ce86:	e7f4      	b.n	803ce72 <_Znwj+0xa>
 803ce88:	bd10      	pop	{r4, pc}

0803ce8a <_ZSt17__throw_bad_allocv>:
 803ce8a:	b508      	push	{r3, lr}
 803ce8c:	f000 f80e 	bl	803ceac <abort>

0803ce90 <_ZSt20__throw_length_errorPKc>:
 803ce90:	b508      	push	{r3, lr}
 803ce92:	f000 f80b 	bl	803ceac <abort>

0803ce96 <_ZdlPv>:
 803ce96:	f000 b873 	b.w	803cf80 <free>
	...

0803ce9c <_ZSt15get_new_handlerv>:
 803ce9c:	4b02      	ldr	r3, [pc, #8]	; (803cea8 <_ZSt15get_new_handlerv+0xc>)
 803ce9e:	6818      	ldr	r0, [r3, #0]
 803cea0:	f3bf 8f5b 	dmb	ish
 803cea4:	4770      	bx	lr
 803cea6:	bf00      	nop
 803cea8:	24003754 	.word	0x24003754

0803ceac <abort>:
 803ceac:	b508      	push	{r3, lr}
 803ceae:	2006      	movs	r0, #6
 803ceb0:	f000 fca4 	bl	803d7fc <raise>
 803ceb4:	2001      	movs	r0, #1
 803ceb6:	f7ee fac3 	bl	802b440 <_exit>
	...

0803cebc <__assert_func>:
 803cebc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 803cebe:	4614      	mov	r4, r2
 803cec0:	461a      	mov	r2, r3
 803cec2:	4b09      	ldr	r3, [pc, #36]	; (803cee8 <__assert_func+0x2c>)
 803cec4:	681b      	ldr	r3, [r3, #0]
 803cec6:	4605      	mov	r5, r0
 803cec8:	68d8      	ldr	r0, [r3, #12]
 803ceca:	b14c      	cbz	r4, 803cee0 <__assert_func+0x24>
 803cecc:	4b07      	ldr	r3, [pc, #28]	; (803ceec <__assert_func+0x30>)
 803cece:	9100      	str	r1, [sp, #0]
 803ced0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 803ced4:	4906      	ldr	r1, [pc, #24]	; (803cef0 <__assert_func+0x34>)
 803ced6:	462b      	mov	r3, r5
 803ced8:	f000 f814 	bl	803cf04 <fiprintf>
 803cedc:	f7ff ffe6 	bl	803ceac <abort>
 803cee0:	4b04      	ldr	r3, [pc, #16]	; (803cef4 <__assert_func+0x38>)
 803cee2:	461c      	mov	r4, r3
 803cee4:	e7f3      	b.n	803cece <__assert_func+0x12>
 803cee6:	bf00      	nop
 803cee8:	24000100 	.word	0x24000100
 803ceec:	08058e38 	.word	0x08058e38
 803cef0:	08058e45 	.word	0x08058e45
 803cef4:	08058e73 	.word	0x08058e73

0803cef8 <__errno>:
 803cef8:	4b01      	ldr	r3, [pc, #4]	; (803cf00 <__errno+0x8>)
 803cefa:	6818      	ldr	r0, [r3, #0]
 803cefc:	4770      	bx	lr
 803cefe:	bf00      	nop
 803cf00:	24000100 	.word	0x24000100

0803cf04 <fiprintf>:
 803cf04:	b40e      	push	{r1, r2, r3}
 803cf06:	b503      	push	{r0, r1, lr}
 803cf08:	4601      	mov	r1, r0
 803cf0a:	ab03      	add	r3, sp, #12
 803cf0c:	4805      	ldr	r0, [pc, #20]	; (803cf24 <fiprintf+0x20>)
 803cf0e:	f853 2b04 	ldr.w	r2, [r3], #4
 803cf12:	6800      	ldr	r0, [r0, #0]
 803cf14:	9301      	str	r3, [sp, #4]
 803cf16:	f000 f975 	bl	803d204 <_vfiprintf_r>
 803cf1a:	b002      	add	sp, #8
 803cf1c:	f85d eb04 	ldr.w	lr, [sp], #4
 803cf20:	b003      	add	sp, #12
 803cf22:	4770      	bx	lr
 803cf24:	24000100 	.word	0x24000100

0803cf28 <__libc_init_array>:
 803cf28:	b570      	push	{r4, r5, r6, lr}
 803cf2a:	4d0d      	ldr	r5, [pc, #52]	; (803cf60 <__libc_init_array+0x38>)
 803cf2c:	4c0d      	ldr	r4, [pc, #52]	; (803cf64 <__libc_init_array+0x3c>)
 803cf2e:	1b64      	subs	r4, r4, r5
 803cf30:	10a4      	asrs	r4, r4, #2
 803cf32:	2600      	movs	r6, #0
 803cf34:	42a6      	cmp	r6, r4
 803cf36:	d109      	bne.n	803cf4c <__libc_init_array+0x24>
 803cf38:	4d0b      	ldr	r5, [pc, #44]	; (803cf68 <__libc_init_array+0x40>)
 803cf3a:	4c0c      	ldr	r4, [pc, #48]	; (803cf6c <__libc_init_array+0x44>)
 803cf3c:	f001 f812 	bl	803df64 <_init>
 803cf40:	1b64      	subs	r4, r4, r5
 803cf42:	10a4      	asrs	r4, r4, #2
 803cf44:	2600      	movs	r6, #0
 803cf46:	42a6      	cmp	r6, r4
 803cf48:	d105      	bne.n	803cf56 <__libc_init_array+0x2e>
 803cf4a:	bd70      	pop	{r4, r5, r6, pc}
 803cf4c:	f855 3b04 	ldr.w	r3, [r5], #4
 803cf50:	4798      	blx	r3
 803cf52:	3601      	adds	r6, #1
 803cf54:	e7ee      	b.n	803cf34 <__libc_init_array+0xc>
 803cf56:	f855 3b04 	ldr.w	r3, [r5], #4
 803cf5a:	4798      	blx	r3
 803cf5c:	3601      	adds	r6, #1
 803cf5e:	e7f2      	b.n	803cf46 <__libc_init_array+0x1e>
 803cf60:	08058f14 	.word	0x08058f14
 803cf64:	08058f14 	.word	0x08058f14
 803cf68:	08058f14 	.word	0x08058f14
 803cf6c:	08058f1c 	.word	0x08058f1c

0803cf70 <malloc>:
 803cf70:	4b02      	ldr	r3, [pc, #8]	; (803cf7c <malloc+0xc>)
 803cf72:	4601      	mov	r1, r0
 803cf74:	6818      	ldr	r0, [r3, #0]
 803cf76:	f000 b8a7 	b.w	803d0c8 <_malloc_r>
 803cf7a:	bf00      	nop
 803cf7c:	24000100 	.word	0x24000100

0803cf80 <free>:
 803cf80:	4b02      	ldr	r3, [pc, #8]	; (803cf8c <free+0xc>)
 803cf82:	4601      	mov	r1, r0
 803cf84:	6818      	ldr	r0, [r3, #0]
 803cf86:	f000 b833 	b.w	803cff0 <_free_r>
 803cf8a:	bf00      	nop
 803cf8c:	24000100 	.word	0x24000100

0803cf90 <memcpy>:
 803cf90:	440a      	add	r2, r1
 803cf92:	4291      	cmp	r1, r2
 803cf94:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 803cf98:	d100      	bne.n	803cf9c <memcpy+0xc>
 803cf9a:	4770      	bx	lr
 803cf9c:	b510      	push	{r4, lr}
 803cf9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 803cfa2:	f803 4f01 	strb.w	r4, [r3, #1]!
 803cfa6:	4291      	cmp	r1, r2
 803cfa8:	d1f9      	bne.n	803cf9e <memcpy+0xe>
 803cfaa:	bd10      	pop	{r4, pc}

0803cfac <memmove>:
 803cfac:	4288      	cmp	r0, r1
 803cfae:	b510      	push	{r4, lr}
 803cfb0:	eb01 0402 	add.w	r4, r1, r2
 803cfb4:	d902      	bls.n	803cfbc <memmove+0x10>
 803cfb6:	4284      	cmp	r4, r0
 803cfb8:	4623      	mov	r3, r4
 803cfba:	d807      	bhi.n	803cfcc <memmove+0x20>
 803cfbc:	1e43      	subs	r3, r0, #1
 803cfbe:	42a1      	cmp	r1, r4
 803cfc0:	d008      	beq.n	803cfd4 <memmove+0x28>
 803cfc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 803cfc6:	f803 2f01 	strb.w	r2, [r3, #1]!
 803cfca:	e7f8      	b.n	803cfbe <memmove+0x12>
 803cfcc:	4402      	add	r2, r0
 803cfce:	4601      	mov	r1, r0
 803cfd0:	428a      	cmp	r2, r1
 803cfd2:	d100      	bne.n	803cfd6 <memmove+0x2a>
 803cfd4:	bd10      	pop	{r4, pc}
 803cfd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 803cfda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 803cfde:	e7f7      	b.n	803cfd0 <memmove+0x24>

0803cfe0 <memset>:
 803cfe0:	4402      	add	r2, r0
 803cfe2:	4603      	mov	r3, r0
 803cfe4:	4293      	cmp	r3, r2
 803cfe6:	d100      	bne.n	803cfea <memset+0xa>
 803cfe8:	4770      	bx	lr
 803cfea:	f803 1b01 	strb.w	r1, [r3], #1
 803cfee:	e7f9      	b.n	803cfe4 <memset+0x4>

0803cff0 <_free_r>:
 803cff0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 803cff2:	2900      	cmp	r1, #0
 803cff4:	d044      	beq.n	803d080 <_free_r+0x90>
 803cff6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 803cffa:	9001      	str	r0, [sp, #4]
 803cffc:	2b00      	cmp	r3, #0
 803cffe:	f1a1 0404 	sub.w	r4, r1, #4
 803d002:	bfb8      	it	lt
 803d004:	18e4      	addlt	r4, r4, r3
 803d006:	f000 fef5 	bl	803ddf4 <__malloc_lock>
 803d00a:	4a1e      	ldr	r2, [pc, #120]	; (803d084 <_free_r+0x94>)
 803d00c:	9801      	ldr	r0, [sp, #4]
 803d00e:	6813      	ldr	r3, [r2, #0]
 803d010:	b933      	cbnz	r3, 803d020 <_free_r+0x30>
 803d012:	6063      	str	r3, [r4, #4]
 803d014:	6014      	str	r4, [r2, #0]
 803d016:	b003      	add	sp, #12
 803d018:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 803d01c:	f000 bef0 	b.w	803de00 <__malloc_unlock>
 803d020:	42a3      	cmp	r3, r4
 803d022:	d908      	bls.n	803d036 <_free_r+0x46>
 803d024:	6825      	ldr	r5, [r4, #0]
 803d026:	1961      	adds	r1, r4, r5
 803d028:	428b      	cmp	r3, r1
 803d02a:	bf01      	itttt	eq
 803d02c:	6819      	ldreq	r1, [r3, #0]
 803d02e:	685b      	ldreq	r3, [r3, #4]
 803d030:	1949      	addeq	r1, r1, r5
 803d032:	6021      	streq	r1, [r4, #0]
 803d034:	e7ed      	b.n	803d012 <_free_r+0x22>
 803d036:	461a      	mov	r2, r3
 803d038:	685b      	ldr	r3, [r3, #4]
 803d03a:	b10b      	cbz	r3, 803d040 <_free_r+0x50>
 803d03c:	42a3      	cmp	r3, r4
 803d03e:	d9fa      	bls.n	803d036 <_free_r+0x46>
 803d040:	6811      	ldr	r1, [r2, #0]
 803d042:	1855      	adds	r5, r2, r1
 803d044:	42a5      	cmp	r5, r4
 803d046:	d10b      	bne.n	803d060 <_free_r+0x70>
 803d048:	6824      	ldr	r4, [r4, #0]
 803d04a:	4421      	add	r1, r4
 803d04c:	1854      	adds	r4, r2, r1
 803d04e:	42a3      	cmp	r3, r4
 803d050:	6011      	str	r1, [r2, #0]
 803d052:	d1e0      	bne.n	803d016 <_free_r+0x26>
 803d054:	681c      	ldr	r4, [r3, #0]
 803d056:	685b      	ldr	r3, [r3, #4]
 803d058:	6053      	str	r3, [r2, #4]
 803d05a:	4421      	add	r1, r4
 803d05c:	6011      	str	r1, [r2, #0]
 803d05e:	e7da      	b.n	803d016 <_free_r+0x26>
 803d060:	d902      	bls.n	803d068 <_free_r+0x78>
 803d062:	230c      	movs	r3, #12
 803d064:	6003      	str	r3, [r0, #0]
 803d066:	e7d6      	b.n	803d016 <_free_r+0x26>
 803d068:	6825      	ldr	r5, [r4, #0]
 803d06a:	1961      	adds	r1, r4, r5
 803d06c:	428b      	cmp	r3, r1
 803d06e:	bf04      	itt	eq
 803d070:	6819      	ldreq	r1, [r3, #0]
 803d072:	685b      	ldreq	r3, [r3, #4]
 803d074:	6063      	str	r3, [r4, #4]
 803d076:	bf04      	itt	eq
 803d078:	1949      	addeq	r1, r1, r5
 803d07a:	6021      	streq	r1, [r4, #0]
 803d07c:	6054      	str	r4, [r2, #4]
 803d07e:	e7ca      	b.n	803d016 <_free_r+0x26>
 803d080:	b003      	add	sp, #12
 803d082:	bd30      	pop	{r4, r5, pc}
 803d084:	24003758 	.word	0x24003758

0803d088 <sbrk_aligned>:
 803d088:	b570      	push	{r4, r5, r6, lr}
 803d08a:	4e0e      	ldr	r6, [pc, #56]	; (803d0c4 <sbrk_aligned+0x3c>)
 803d08c:	460c      	mov	r4, r1
 803d08e:	6831      	ldr	r1, [r6, #0]
 803d090:	4605      	mov	r5, r0
 803d092:	b911      	cbnz	r1, 803d09a <sbrk_aligned+0x12>
 803d094:	f000 fb7a 	bl	803d78c <_sbrk_r>
 803d098:	6030      	str	r0, [r6, #0]
 803d09a:	4621      	mov	r1, r4
 803d09c:	4628      	mov	r0, r5
 803d09e:	f000 fb75 	bl	803d78c <_sbrk_r>
 803d0a2:	1c43      	adds	r3, r0, #1
 803d0a4:	d00a      	beq.n	803d0bc <sbrk_aligned+0x34>
 803d0a6:	1cc4      	adds	r4, r0, #3
 803d0a8:	f024 0403 	bic.w	r4, r4, #3
 803d0ac:	42a0      	cmp	r0, r4
 803d0ae:	d007      	beq.n	803d0c0 <sbrk_aligned+0x38>
 803d0b0:	1a21      	subs	r1, r4, r0
 803d0b2:	4628      	mov	r0, r5
 803d0b4:	f000 fb6a 	bl	803d78c <_sbrk_r>
 803d0b8:	3001      	adds	r0, #1
 803d0ba:	d101      	bne.n	803d0c0 <sbrk_aligned+0x38>
 803d0bc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 803d0c0:	4620      	mov	r0, r4
 803d0c2:	bd70      	pop	{r4, r5, r6, pc}
 803d0c4:	2400375c 	.word	0x2400375c

0803d0c8 <_malloc_r>:
 803d0c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 803d0cc:	1ccd      	adds	r5, r1, #3
 803d0ce:	f025 0503 	bic.w	r5, r5, #3
 803d0d2:	3508      	adds	r5, #8
 803d0d4:	2d0c      	cmp	r5, #12
 803d0d6:	bf38      	it	cc
 803d0d8:	250c      	movcc	r5, #12
 803d0da:	2d00      	cmp	r5, #0
 803d0dc:	4607      	mov	r7, r0
 803d0de:	db01      	blt.n	803d0e4 <_malloc_r+0x1c>
 803d0e0:	42a9      	cmp	r1, r5
 803d0e2:	d905      	bls.n	803d0f0 <_malloc_r+0x28>
 803d0e4:	230c      	movs	r3, #12
 803d0e6:	603b      	str	r3, [r7, #0]
 803d0e8:	2600      	movs	r6, #0
 803d0ea:	4630      	mov	r0, r6
 803d0ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 803d0f0:	4e2e      	ldr	r6, [pc, #184]	; (803d1ac <_malloc_r+0xe4>)
 803d0f2:	f000 fe7f 	bl	803ddf4 <__malloc_lock>
 803d0f6:	6833      	ldr	r3, [r6, #0]
 803d0f8:	461c      	mov	r4, r3
 803d0fa:	bb34      	cbnz	r4, 803d14a <_malloc_r+0x82>
 803d0fc:	4629      	mov	r1, r5
 803d0fe:	4638      	mov	r0, r7
 803d100:	f7ff ffc2 	bl	803d088 <sbrk_aligned>
 803d104:	1c43      	adds	r3, r0, #1
 803d106:	4604      	mov	r4, r0
 803d108:	d14d      	bne.n	803d1a6 <_malloc_r+0xde>
 803d10a:	6834      	ldr	r4, [r6, #0]
 803d10c:	4626      	mov	r6, r4
 803d10e:	2e00      	cmp	r6, #0
 803d110:	d140      	bne.n	803d194 <_malloc_r+0xcc>
 803d112:	6823      	ldr	r3, [r4, #0]
 803d114:	4631      	mov	r1, r6
 803d116:	4638      	mov	r0, r7
 803d118:	eb04 0803 	add.w	r8, r4, r3
 803d11c:	f000 fb36 	bl	803d78c <_sbrk_r>
 803d120:	4580      	cmp	r8, r0
 803d122:	d13a      	bne.n	803d19a <_malloc_r+0xd2>
 803d124:	6821      	ldr	r1, [r4, #0]
 803d126:	3503      	adds	r5, #3
 803d128:	1a6d      	subs	r5, r5, r1
 803d12a:	f025 0503 	bic.w	r5, r5, #3
 803d12e:	3508      	adds	r5, #8
 803d130:	2d0c      	cmp	r5, #12
 803d132:	bf38      	it	cc
 803d134:	250c      	movcc	r5, #12
 803d136:	4629      	mov	r1, r5
 803d138:	4638      	mov	r0, r7
 803d13a:	f7ff ffa5 	bl	803d088 <sbrk_aligned>
 803d13e:	3001      	adds	r0, #1
 803d140:	d02b      	beq.n	803d19a <_malloc_r+0xd2>
 803d142:	6823      	ldr	r3, [r4, #0]
 803d144:	442b      	add	r3, r5
 803d146:	6023      	str	r3, [r4, #0]
 803d148:	e00e      	b.n	803d168 <_malloc_r+0xa0>
 803d14a:	6822      	ldr	r2, [r4, #0]
 803d14c:	1b52      	subs	r2, r2, r5
 803d14e:	d41e      	bmi.n	803d18e <_malloc_r+0xc6>
 803d150:	2a0b      	cmp	r2, #11
 803d152:	d916      	bls.n	803d182 <_malloc_r+0xba>
 803d154:	1961      	adds	r1, r4, r5
 803d156:	42a3      	cmp	r3, r4
 803d158:	6025      	str	r5, [r4, #0]
 803d15a:	bf18      	it	ne
 803d15c:	6059      	strne	r1, [r3, #4]
 803d15e:	6863      	ldr	r3, [r4, #4]
 803d160:	bf08      	it	eq
 803d162:	6031      	streq	r1, [r6, #0]
 803d164:	5162      	str	r2, [r4, r5]
 803d166:	604b      	str	r3, [r1, #4]
 803d168:	4638      	mov	r0, r7
 803d16a:	f104 060b 	add.w	r6, r4, #11
 803d16e:	f000 fe47 	bl	803de00 <__malloc_unlock>
 803d172:	f026 0607 	bic.w	r6, r6, #7
 803d176:	1d23      	adds	r3, r4, #4
 803d178:	1af2      	subs	r2, r6, r3
 803d17a:	d0b6      	beq.n	803d0ea <_malloc_r+0x22>
 803d17c:	1b9b      	subs	r3, r3, r6
 803d17e:	50a3      	str	r3, [r4, r2]
 803d180:	e7b3      	b.n	803d0ea <_malloc_r+0x22>
 803d182:	6862      	ldr	r2, [r4, #4]
 803d184:	42a3      	cmp	r3, r4
 803d186:	bf0c      	ite	eq
 803d188:	6032      	streq	r2, [r6, #0]
 803d18a:	605a      	strne	r2, [r3, #4]
 803d18c:	e7ec      	b.n	803d168 <_malloc_r+0xa0>
 803d18e:	4623      	mov	r3, r4
 803d190:	6864      	ldr	r4, [r4, #4]
 803d192:	e7b2      	b.n	803d0fa <_malloc_r+0x32>
 803d194:	4634      	mov	r4, r6
 803d196:	6876      	ldr	r6, [r6, #4]
 803d198:	e7b9      	b.n	803d10e <_malloc_r+0x46>
 803d19a:	230c      	movs	r3, #12
 803d19c:	603b      	str	r3, [r7, #0]
 803d19e:	4638      	mov	r0, r7
 803d1a0:	f000 fe2e 	bl	803de00 <__malloc_unlock>
 803d1a4:	e7a1      	b.n	803d0ea <_malloc_r+0x22>
 803d1a6:	6025      	str	r5, [r4, #0]
 803d1a8:	e7de      	b.n	803d168 <_malloc_r+0xa0>
 803d1aa:	bf00      	nop
 803d1ac:	24003758 	.word	0x24003758

0803d1b0 <__sfputc_r>:
 803d1b0:	6893      	ldr	r3, [r2, #8]
 803d1b2:	3b01      	subs	r3, #1
 803d1b4:	2b00      	cmp	r3, #0
 803d1b6:	b410      	push	{r4}
 803d1b8:	6093      	str	r3, [r2, #8]
 803d1ba:	da08      	bge.n	803d1ce <__sfputc_r+0x1e>
 803d1bc:	6994      	ldr	r4, [r2, #24]
 803d1be:	42a3      	cmp	r3, r4
 803d1c0:	db01      	blt.n	803d1c6 <__sfputc_r+0x16>
 803d1c2:	290a      	cmp	r1, #10
 803d1c4:	d103      	bne.n	803d1ce <__sfputc_r+0x1e>
 803d1c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 803d1ca:	f000 bb33 	b.w	803d834 <__swbuf_r>
 803d1ce:	6813      	ldr	r3, [r2, #0]
 803d1d0:	1c58      	adds	r0, r3, #1
 803d1d2:	6010      	str	r0, [r2, #0]
 803d1d4:	7019      	strb	r1, [r3, #0]
 803d1d6:	4608      	mov	r0, r1
 803d1d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 803d1dc:	4770      	bx	lr

0803d1de <__sfputs_r>:
 803d1de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803d1e0:	4606      	mov	r6, r0
 803d1e2:	460f      	mov	r7, r1
 803d1e4:	4614      	mov	r4, r2
 803d1e6:	18d5      	adds	r5, r2, r3
 803d1e8:	42ac      	cmp	r4, r5
 803d1ea:	d101      	bne.n	803d1f0 <__sfputs_r+0x12>
 803d1ec:	2000      	movs	r0, #0
 803d1ee:	e007      	b.n	803d200 <__sfputs_r+0x22>
 803d1f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 803d1f4:	463a      	mov	r2, r7
 803d1f6:	4630      	mov	r0, r6
 803d1f8:	f7ff ffda 	bl	803d1b0 <__sfputc_r>
 803d1fc:	1c43      	adds	r3, r0, #1
 803d1fe:	d1f3      	bne.n	803d1e8 <__sfputs_r+0xa>
 803d200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0803d204 <_vfiprintf_r>:
 803d204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803d208:	460d      	mov	r5, r1
 803d20a:	b09d      	sub	sp, #116	; 0x74
 803d20c:	4614      	mov	r4, r2
 803d20e:	4698      	mov	r8, r3
 803d210:	4606      	mov	r6, r0
 803d212:	b118      	cbz	r0, 803d21c <_vfiprintf_r+0x18>
 803d214:	6983      	ldr	r3, [r0, #24]
 803d216:	b90b      	cbnz	r3, 803d21c <_vfiprintf_r+0x18>
 803d218:	f000 fce6 	bl	803dbe8 <__sinit>
 803d21c:	4b89      	ldr	r3, [pc, #548]	; (803d444 <_vfiprintf_r+0x240>)
 803d21e:	429d      	cmp	r5, r3
 803d220:	d11b      	bne.n	803d25a <_vfiprintf_r+0x56>
 803d222:	6875      	ldr	r5, [r6, #4]
 803d224:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 803d226:	07d9      	lsls	r1, r3, #31
 803d228:	d405      	bmi.n	803d236 <_vfiprintf_r+0x32>
 803d22a:	89ab      	ldrh	r3, [r5, #12]
 803d22c:	059a      	lsls	r2, r3, #22
 803d22e:	d402      	bmi.n	803d236 <_vfiprintf_r+0x32>
 803d230:	6da8      	ldr	r0, [r5, #88]	; 0x58
 803d232:	f000 fd77 	bl	803dd24 <__retarget_lock_acquire_recursive>
 803d236:	89ab      	ldrh	r3, [r5, #12]
 803d238:	071b      	lsls	r3, r3, #28
 803d23a:	d501      	bpl.n	803d240 <_vfiprintf_r+0x3c>
 803d23c:	692b      	ldr	r3, [r5, #16]
 803d23e:	b9eb      	cbnz	r3, 803d27c <_vfiprintf_r+0x78>
 803d240:	4629      	mov	r1, r5
 803d242:	4630      	mov	r0, r6
 803d244:	f000 fb48 	bl	803d8d8 <__swsetup_r>
 803d248:	b1c0      	cbz	r0, 803d27c <_vfiprintf_r+0x78>
 803d24a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 803d24c:	07dc      	lsls	r4, r3, #31
 803d24e:	d50e      	bpl.n	803d26e <_vfiprintf_r+0x6a>
 803d250:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 803d254:	b01d      	add	sp, #116	; 0x74
 803d256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803d25a:	4b7b      	ldr	r3, [pc, #492]	; (803d448 <_vfiprintf_r+0x244>)
 803d25c:	429d      	cmp	r5, r3
 803d25e:	d101      	bne.n	803d264 <_vfiprintf_r+0x60>
 803d260:	68b5      	ldr	r5, [r6, #8]
 803d262:	e7df      	b.n	803d224 <_vfiprintf_r+0x20>
 803d264:	4b79      	ldr	r3, [pc, #484]	; (803d44c <_vfiprintf_r+0x248>)
 803d266:	429d      	cmp	r5, r3
 803d268:	bf08      	it	eq
 803d26a:	68f5      	ldreq	r5, [r6, #12]
 803d26c:	e7da      	b.n	803d224 <_vfiprintf_r+0x20>
 803d26e:	89ab      	ldrh	r3, [r5, #12]
 803d270:	0598      	lsls	r0, r3, #22
 803d272:	d4ed      	bmi.n	803d250 <_vfiprintf_r+0x4c>
 803d274:	6da8      	ldr	r0, [r5, #88]	; 0x58
 803d276:	f000 fd56 	bl	803dd26 <__retarget_lock_release_recursive>
 803d27a:	e7e9      	b.n	803d250 <_vfiprintf_r+0x4c>
 803d27c:	2300      	movs	r3, #0
 803d27e:	9309      	str	r3, [sp, #36]	; 0x24
 803d280:	2320      	movs	r3, #32
 803d282:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 803d286:	f8cd 800c 	str.w	r8, [sp, #12]
 803d28a:	2330      	movs	r3, #48	; 0x30
 803d28c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 803d450 <_vfiprintf_r+0x24c>
 803d290:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 803d294:	f04f 0901 	mov.w	r9, #1
 803d298:	4623      	mov	r3, r4
 803d29a:	469a      	mov	sl, r3
 803d29c:	f813 2b01 	ldrb.w	r2, [r3], #1
 803d2a0:	b10a      	cbz	r2, 803d2a6 <_vfiprintf_r+0xa2>
 803d2a2:	2a25      	cmp	r2, #37	; 0x25
 803d2a4:	d1f9      	bne.n	803d29a <_vfiprintf_r+0x96>
 803d2a6:	ebba 0b04 	subs.w	fp, sl, r4
 803d2aa:	d00b      	beq.n	803d2c4 <_vfiprintf_r+0xc0>
 803d2ac:	465b      	mov	r3, fp
 803d2ae:	4622      	mov	r2, r4
 803d2b0:	4629      	mov	r1, r5
 803d2b2:	4630      	mov	r0, r6
 803d2b4:	f7ff ff93 	bl	803d1de <__sfputs_r>
 803d2b8:	3001      	adds	r0, #1
 803d2ba:	f000 80aa 	beq.w	803d412 <_vfiprintf_r+0x20e>
 803d2be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 803d2c0:	445a      	add	r2, fp
 803d2c2:	9209      	str	r2, [sp, #36]	; 0x24
 803d2c4:	f89a 3000 	ldrb.w	r3, [sl]
 803d2c8:	2b00      	cmp	r3, #0
 803d2ca:	f000 80a2 	beq.w	803d412 <_vfiprintf_r+0x20e>
 803d2ce:	2300      	movs	r3, #0
 803d2d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 803d2d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 803d2d8:	f10a 0a01 	add.w	sl, sl, #1
 803d2dc:	9304      	str	r3, [sp, #16]
 803d2de:	9307      	str	r3, [sp, #28]
 803d2e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 803d2e4:	931a      	str	r3, [sp, #104]	; 0x68
 803d2e6:	4654      	mov	r4, sl
 803d2e8:	2205      	movs	r2, #5
 803d2ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 803d2ee:	4858      	ldr	r0, [pc, #352]	; (803d450 <_vfiprintf_r+0x24c>)
 803d2f0:	f7e2 fff6 	bl	80202e0 <memchr>
 803d2f4:	9a04      	ldr	r2, [sp, #16]
 803d2f6:	b9d8      	cbnz	r0, 803d330 <_vfiprintf_r+0x12c>
 803d2f8:	06d1      	lsls	r1, r2, #27
 803d2fa:	bf44      	itt	mi
 803d2fc:	2320      	movmi	r3, #32
 803d2fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 803d302:	0713      	lsls	r3, r2, #28
 803d304:	bf44      	itt	mi
 803d306:	232b      	movmi	r3, #43	; 0x2b
 803d308:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 803d30c:	f89a 3000 	ldrb.w	r3, [sl]
 803d310:	2b2a      	cmp	r3, #42	; 0x2a
 803d312:	d015      	beq.n	803d340 <_vfiprintf_r+0x13c>
 803d314:	9a07      	ldr	r2, [sp, #28]
 803d316:	4654      	mov	r4, sl
 803d318:	2000      	movs	r0, #0
 803d31a:	f04f 0c0a 	mov.w	ip, #10
 803d31e:	4621      	mov	r1, r4
 803d320:	f811 3b01 	ldrb.w	r3, [r1], #1
 803d324:	3b30      	subs	r3, #48	; 0x30
 803d326:	2b09      	cmp	r3, #9
 803d328:	d94e      	bls.n	803d3c8 <_vfiprintf_r+0x1c4>
 803d32a:	b1b0      	cbz	r0, 803d35a <_vfiprintf_r+0x156>
 803d32c:	9207      	str	r2, [sp, #28]
 803d32e:	e014      	b.n	803d35a <_vfiprintf_r+0x156>
 803d330:	eba0 0308 	sub.w	r3, r0, r8
 803d334:	fa09 f303 	lsl.w	r3, r9, r3
 803d338:	4313      	orrs	r3, r2
 803d33a:	9304      	str	r3, [sp, #16]
 803d33c:	46a2      	mov	sl, r4
 803d33e:	e7d2      	b.n	803d2e6 <_vfiprintf_r+0xe2>
 803d340:	9b03      	ldr	r3, [sp, #12]
 803d342:	1d19      	adds	r1, r3, #4
 803d344:	681b      	ldr	r3, [r3, #0]
 803d346:	9103      	str	r1, [sp, #12]
 803d348:	2b00      	cmp	r3, #0
 803d34a:	bfbb      	ittet	lt
 803d34c:	425b      	neglt	r3, r3
 803d34e:	f042 0202 	orrlt.w	r2, r2, #2
 803d352:	9307      	strge	r3, [sp, #28]
 803d354:	9307      	strlt	r3, [sp, #28]
 803d356:	bfb8      	it	lt
 803d358:	9204      	strlt	r2, [sp, #16]
 803d35a:	7823      	ldrb	r3, [r4, #0]
 803d35c:	2b2e      	cmp	r3, #46	; 0x2e
 803d35e:	d10c      	bne.n	803d37a <_vfiprintf_r+0x176>
 803d360:	7863      	ldrb	r3, [r4, #1]
 803d362:	2b2a      	cmp	r3, #42	; 0x2a
 803d364:	d135      	bne.n	803d3d2 <_vfiprintf_r+0x1ce>
 803d366:	9b03      	ldr	r3, [sp, #12]
 803d368:	1d1a      	adds	r2, r3, #4
 803d36a:	681b      	ldr	r3, [r3, #0]
 803d36c:	9203      	str	r2, [sp, #12]
 803d36e:	2b00      	cmp	r3, #0
 803d370:	bfb8      	it	lt
 803d372:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 803d376:	3402      	adds	r4, #2
 803d378:	9305      	str	r3, [sp, #20]
 803d37a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 803d460 <_vfiprintf_r+0x25c>
 803d37e:	7821      	ldrb	r1, [r4, #0]
 803d380:	2203      	movs	r2, #3
 803d382:	4650      	mov	r0, sl
 803d384:	f7e2 ffac 	bl	80202e0 <memchr>
 803d388:	b140      	cbz	r0, 803d39c <_vfiprintf_r+0x198>
 803d38a:	2340      	movs	r3, #64	; 0x40
 803d38c:	eba0 000a 	sub.w	r0, r0, sl
 803d390:	fa03 f000 	lsl.w	r0, r3, r0
 803d394:	9b04      	ldr	r3, [sp, #16]
 803d396:	4303      	orrs	r3, r0
 803d398:	3401      	adds	r4, #1
 803d39a:	9304      	str	r3, [sp, #16]
 803d39c:	f814 1b01 	ldrb.w	r1, [r4], #1
 803d3a0:	482c      	ldr	r0, [pc, #176]	; (803d454 <_vfiprintf_r+0x250>)
 803d3a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 803d3a6:	2206      	movs	r2, #6
 803d3a8:	f7e2 ff9a 	bl	80202e0 <memchr>
 803d3ac:	2800      	cmp	r0, #0
 803d3ae:	d03f      	beq.n	803d430 <_vfiprintf_r+0x22c>
 803d3b0:	4b29      	ldr	r3, [pc, #164]	; (803d458 <_vfiprintf_r+0x254>)
 803d3b2:	bb1b      	cbnz	r3, 803d3fc <_vfiprintf_r+0x1f8>
 803d3b4:	9b03      	ldr	r3, [sp, #12]
 803d3b6:	3307      	adds	r3, #7
 803d3b8:	f023 0307 	bic.w	r3, r3, #7
 803d3bc:	3308      	adds	r3, #8
 803d3be:	9303      	str	r3, [sp, #12]
 803d3c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 803d3c2:	443b      	add	r3, r7
 803d3c4:	9309      	str	r3, [sp, #36]	; 0x24
 803d3c6:	e767      	b.n	803d298 <_vfiprintf_r+0x94>
 803d3c8:	fb0c 3202 	mla	r2, ip, r2, r3
 803d3cc:	460c      	mov	r4, r1
 803d3ce:	2001      	movs	r0, #1
 803d3d0:	e7a5      	b.n	803d31e <_vfiprintf_r+0x11a>
 803d3d2:	2300      	movs	r3, #0
 803d3d4:	3401      	adds	r4, #1
 803d3d6:	9305      	str	r3, [sp, #20]
 803d3d8:	4619      	mov	r1, r3
 803d3da:	f04f 0c0a 	mov.w	ip, #10
 803d3de:	4620      	mov	r0, r4
 803d3e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 803d3e4:	3a30      	subs	r2, #48	; 0x30
 803d3e6:	2a09      	cmp	r2, #9
 803d3e8:	d903      	bls.n	803d3f2 <_vfiprintf_r+0x1ee>
 803d3ea:	2b00      	cmp	r3, #0
 803d3ec:	d0c5      	beq.n	803d37a <_vfiprintf_r+0x176>
 803d3ee:	9105      	str	r1, [sp, #20]
 803d3f0:	e7c3      	b.n	803d37a <_vfiprintf_r+0x176>
 803d3f2:	fb0c 2101 	mla	r1, ip, r1, r2
 803d3f6:	4604      	mov	r4, r0
 803d3f8:	2301      	movs	r3, #1
 803d3fa:	e7f0      	b.n	803d3de <_vfiprintf_r+0x1da>
 803d3fc:	ab03      	add	r3, sp, #12
 803d3fe:	9300      	str	r3, [sp, #0]
 803d400:	462a      	mov	r2, r5
 803d402:	4b16      	ldr	r3, [pc, #88]	; (803d45c <_vfiprintf_r+0x258>)
 803d404:	a904      	add	r1, sp, #16
 803d406:	4630      	mov	r0, r6
 803d408:	f3af 8000 	nop.w
 803d40c:	4607      	mov	r7, r0
 803d40e:	1c78      	adds	r0, r7, #1
 803d410:	d1d6      	bne.n	803d3c0 <_vfiprintf_r+0x1bc>
 803d412:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 803d414:	07d9      	lsls	r1, r3, #31
 803d416:	d405      	bmi.n	803d424 <_vfiprintf_r+0x220>
 803d418:	89ab      	ldrh	r3, [r5, #12]
 803d41a:	059a      	lsls	r2, r3, #22
 803d41c:	d402      	bmi.n	803d424 <_vfiprintf_r+0x220>
 803d41e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 803d420:	f000 fc81 	bl	803dd26 <__retarget_lock_release_recursive>
 803d424:	89ab      	ldrh	r3, [r5, #12]
 803d426:	065b      	lsls	r3, r3, #25
 803d428:	f53f af12 	bmi.w	803d250 <_vfiprintf_r+0x4c>
 803d42c:	9809      	ldr	r0, [sp, #36]	; 0x24
 803d42e:	e711      	b.n	803d254 <_vfiprintf_r+0x50>
 803d430:	ab03      	add	r3, sp, #12
 803d432:	9300      	str	r3, [sp, #0]
 803d434:	462a      	mov	r2, r5
 803d436:	4b09      	ldr	r3, [pc, #36]	; (803d45c <_vfiprintf_r+0x258>)
 803d438:	a904      	add	r1, sp, #16
 803d43a:	4630      	mov	r0, r6
 803d43c:	f000 f880 	bl	803d540 <_printf_i>
 803d440:	e7e4      	b.n	803d40c <_vfiprintf_r+0x208>
 803d442:	bf00      	nop
 803d444:	08058ecc 	.word	0x08058ecc
 803d448:	08058eec 	.word	0x08058eec
 803d44c:	08058eac 	.word	0x08058eac
 803d450:	08058e78 	.word	0x08058e78
 803d454:	08058e82 	.word	0x08058e82
 803d458:	00000000 	.word	0x00000000
 803d45c:	0803d1df 	.word	0x0803d1df
 803d460:	08058e7e 	.word	0x08058e7e

0803d464 <_printf_common>:
 803d464:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 803d468:	4616      	mov	r6, r2
 803d46a:	4699      	mov	r9, r3
 803d46c:	688a      	ldr	r2, [r1, #8]
 803d46e:	690b      	ldr	r3, [r1, #16]
 803d470:	f8dd 8020 	ldr.w	r8, [sp, #32]
 803d474:	4293      	cmp	r3, r2
 803d476:	bfb8      	it	lt
 803d478:	4613      	movlt	r3, r2
 803d47a:	6033      	str	r3, [r6, #0]
 803d47c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 803d480:	4607      	mov	r7, r0
 803d482:	460c      	mov	r4, r1
 803d484:	b10a      	cbz	r2, 803d48a <_printf_common+0x26>
 803d486:	3301      	adds	r3, #1
 803d488:	6033      	str	r3, [r6, #0]
 803d48a:	6823      	ldr	r3, [r4, #0]
 803d48c:	0699      	lsls	r1, r3, #26
 803d48e:	bf42      	ittt	mi
 803d490:	6833      	ldrmi	r3, [r6, #0]
 803d492:	3302      	addmi	r3, #2
 803d494:	6033      	strmi	r3, [r6, #0]
 803d496:	6825      	ldr	r5, [r4, #0]
 803d498:	f015 0506 	ands.w	r5, r5, #6
 803d49c:	d106      	bne.n	803d4ac <_printf_common+0x48>
 803d49e:	f104 0a19 	add.w	sl, r4, #25
 803d4a2:	68e3      	ldr	r3, [r4, #12]
 803d4a4:	6832      	ldr	r2, [r6, #0]
 803d4a6:	1a9b      	subs	r3, r3, r2
 803d4a8:	42ab      	cmp	r3, r5
 803d4aa:	dc26      	bgt.n	803d4fa <_printf_common+0x96>
 803d4ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 803d4b0:	1e13      	subs	r3, r2, #0
 803d4b2:	6822      	ldr	r2, [r4, #0]
 803d4b4:	bf18      	it	ne
 803d4b6:	2301      	movne	r3, #1
 803d4b8:	0692      	lsls	r2, r2, #26
 803d4ba:	d42b      	bmi.n	803d514 <_printf_common+0xb0>
 803d4bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 803d4c0:	4649      	mov	r1, r9
 803d4c2:	4638      	mov	r0, r7
 803d4c4:	47c0      	blx	r8
 803d4c6:	3001      	adds	r0, #1
 803d4c8:	d01e      	beq.n	803d508 <_printf_common+0xa4>
 803d4ca:	6823      	ldr	r3, [r4, #0]
 803d4cc:	68e5      	ldr	r5, [r4, #12]
 803d4ce:	6832      	ldr	r2, [r6, #0]
 803d4d0:	f003 0306 	and.w	r3, r3, #6
 803d4d4:	2b04      	cmp	r3, #4
 803d4d6:	bf08      	it	eq
 803d4d8:	1aad      	subeq	r5, r5, r2
 803d4da:	68a3      	ldr	r3, [r4, #8]
 803d4dc:	6922      	ldr	r2, [r4, #16]
 803d4de:	bf0c      	ite	eq
 803d4e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 803d4e4:	2500      	movne	r5, #0
 803d4e6:	4293      	cmp	r3, r2
 803d4e8:	bfc4      	itt	gt
 803d4ea:	1a9b      	subgt	r3, r3, r2
 803d4ec:	18ed      	addgt	r5, r5, r3
 803d4ee:	2600      	movs	r6, #0
 803d4f0:	341a      	adds	r4, #26
 803d4f2:	42b5      	cmp	r5, r6
 803d4f4:	d11a      	bne.n	803d52c <_printf_common+0xc8>
 803d4f6:	2000      	movs	r0, #0
 803d4f8:	e008      	b.n	803d50c <_printf_common+0xa8>
 803d4fa:	2301      	movs	r3, #1
 803d4fc:	4652      	mov	r2, sl
 803d4fe:	4649      	mov	r1, r9
 803d500:	4638      	mov	r0, r7
 803d502:	47c0      	blx	r8
 803d504:	3001      	adds	r0, #1
 803d506:	d103      	bne.n	803d510 <_printf_common+0xac>
 803d508:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 803d50c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 803d510:	3501      	adds	r5, #1
 803d512:	e7c6      	b.n	803d4a2 <_printf_common+0x3e>
 803d514:	18e1      	adds	r1, r4, r3
 803d516:	1c5a      	adds	r2, r3, #1
 803d518:	2030      	movs	r0, #48	; 0x30
 803d51a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 803d51e:	4422      	add	r2, r4
 803d520:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 803d524:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 803d528:	3302      	adds	r3, #2
 803d52a:	e7c7      	b.n	803d4bc <_printf_common+0x58>
 803d52c:	2301      	movs	r3, #1
 803d52e:	4622      	mov	r2, r4
 803d530:	4649      	mov	r1, r9
 803d532:	4638      	mov	r0, r7
 803d534:	47c0      	blx	r8
 803d536:	3001      	adds	r0, #1
 803d538:	d0e6      	beq.n	803d508 <_printf_common+0xa4>
 803d53a:	3601      	adds	r6, #1
 803d53c:	e7d9      	b.n	803d4f2 <_printf_common+0x8e>
	...

0803d540 <_printf_i>:
 803d540:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 803d544:	7e0f      	ldrb	r7, [r1, #24]
 803d546:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 803d548:	2f78      	cmp	r7, #120	; 0x78
 803d54a:	4691      	mov	r9, r2
 803d54c:	4680      	mov	r8, r0
 803d54e:	460c      	mov	r4, r1
 803d550:	469a      	mov	sl, r3
 803d552:	f101 0243 	add.w	r2, r1, #67	; 0x43
 803d556:	d807      	bhi.n	803d568 <_printf_i+0x28>
 803d558:	2f62      	cmp	r7, #98	; 0x62
 803d55a:	d80a      	bhi.n	803d572 <_printf_i+0x32>
 803d55c:	2f00      	cmp	r7, #0
 803d55e:	f000 80d8 	beq.w	803d712 <_printf_i+0x1d2>
 803d562:	2f58      	cmp	r7, #88	; 0x58
 803d564:	f000 80a3 	beq.w	803d6ae <_printf_i+0x16e>
 803d568:	f104 0542 	add.w	r5, r4, #66	; 0x42
 803d56c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 803d570:	e03a      	b.n	803d5e8 <_printf_i+0xa8>
 803d572:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 803d576:	2b15      	cmp	r3, #21
 803d578:	d8f6      	bhi.n	803d568 <_printf_i+0x28>
 803d57a:	a101      	add	r1, pc, #4	; (adr r1, 803d580 <_printf_i+0x40>)
 803d57c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 803d580:	0803d5d9 	.word	0x0803d5d9
 803d584:	0803d5ed 	.word	0x0803d5ed
 803d588:	0803d569 	.word	0x0803d569
 803d58c:	0803d569 	.word	0x0803d569
 803d590:	0803d569 	.word	0x0803d569
 803d594:	0803d569 	.word	0x0803d569
 803d598:	0803d5ed 	.word	0x0803d5ed
 803d59c:	0803d569 	.word	0x0803d569
 803d5a0:	0803d569 	.word	0x0803d569
 803d5a4:	0803d569 	.word	0x0803d569
 803d5a8:	0803d569 	.word	0x0803d569
 803d5ac:	0803d6f9 	.word	0x0803d6f9
 803d5b0:	0803d61d 	.word	0x0803d61d
 803d5b4:	0803d6db 	.word	0x0803d6db
 803d5b8:	0803d569 	.word	0x0803d569
 803d5bc:	0803d569 	.word	0x0803d569
 803d5c0:	0803d71b 	.word	0x0803d71b
 803d5c4:	0803d569 	.word	0x0803d569
 803d5c8:	0803d61d 	.word	0x0803d61d
 803d5cc:	0803d569 	.word	0x0803d569
 803d5d0:	0803d569 	.word	0x0803d569
 803d5d4:	0803d6e3 	.word	0x0803d6e3
 803d5d8:	682b      	ldr	r3, [r5, #0]
 803d5da:	1d1a      	adds	r2, r3, #4
 803d5dc:	681b      	ldr	r3, [r3, #0]
 803d5de:	602a      	str	r2, [r5, #0]
 803d5e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 803d5e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 803d5e8:	2301      	movs	r3, #1
 803d5ea:	e0a3      	b.n	803d734 <_printf_i+0x1f4>
 803d5ec:	6820      	ldr	r0, [r4, #0]
 803d5ee:	6829      	ldr	r1, [r5, #0]
 803d5f0:	0606      	lsls	r6, r0, #24
 803d5f2:	f101 0304 	add.w	r3, r1, #4
 803d5f6:	d50a      	bpl.n	803d60e <_printf_i+0xce>
 803d5f8:	680e      	ldr	r6, [r1, #0]
 803d5fa:	602b      	str	r3, [r5, #0]
 803d5fc:	2e00      	cmp	r6, #0
 803d5fe:	da03      	bge.n	803d608 <_printf_i+0xc8>
 803d600:	232d      	movs	r3, #45	; 0x2d
 803d602:	4276      	negs	r6, r6
 803d604:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 803d608:	485e      	ldr	r0, [pc, #376]	; (803d784 <_printf_i+0x244>)
 803d60a:	230a      	movs	r3, #10
 803d60c:	e019      	b.n	803d642 <_printf_i+0x102>
 803d60e:	680e      	ldr	r6, [r1, #0]
 803d610:	602b      	str	r3, [r5, #0]
 803d612:	f010 0f40 	tst.w	r0, #64	; 0x40
 803d616:	bf18      	it	ne
 803d618:	b236      	sxthne	r6, r6
 803d61a:	e7ef      	b.n	803d5fc <_printf_i+0xbc>
 803d61c:	682b      	ldr	r3, [r5, #0]
 803d61e:	6820      	ldr	r0, [r4, #0]
 803d620:	1d19      	adds	r1, r3, #4
 803d622:	6029      	str	r1, [r5, #0]
 803d624:	0601      	lsls	r1, r0, #24
 803d626:	d501      	bpl.n	803d62c <_printf_i+0xec>
 803d628:	681e      	ldr	r6, [r3, #0]
 803d62a:	e002      	b.n	803d632 <_printf_i+0xf2>
 803d62c:	0646      	lsls	r6, r0, #25
 803d62e:	d5fb      	bpl.n	803d628 <_printf_i+0xe8>
 803d630:	881e      	ldrh	r6, [r3, #0]
 803d632:	4854      	ldr	r0, [pc, #336]	; (803d784 <_printf_i+0x244>)
 803d634:	2f6f      	cmp	r7, #111	; 0x6f
 803d636:	bf0c      	ite	eq
 803d638:	2308      	moveq	r3, #8
 803d63a:	230a      	movne	r3, #10
 803d63c:	2100      	movs	r1, #0
 803d63e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 803d642:	6865      	ldr	r5, [r4, #4]
 803d644:	60a5      	str	r5, [r4, #8]
 803d646:	2d00      	cmp	r5, #0
 803d648:	bfa2      	ittt	ge
 803d64a:	6821      	ldrge	r1, [r4, #0]
 803d64c:	f021 0104 	bicge.w	r1, r1, #4
 803d650:	6021      	strge	r1, [r4, #0]
 803d652:	b90e      	cbnz	r6, 803d658 <_printf_i+0x118>
 803d654:	2d00      	cmp	r5, #0
 803d656:	d04d      	beq.n	803d6f4 <_printf_i+0x1b4>
 803d658:	4615      	mov	r5, r2
 803d65a:	fbb6 f1f3 	udiv	r1, r6, r3
 803d65e:	fb03 6711 	mls	r7, r3, r1, r6
 803d662:	5dc7      	ldrb	r7, [r0, r7]
 803d664:	f805 7d01 	strb.w	r7, [r5, #-1]!
 803d668:	4637      	mov	r7, r6
 803d66a:	42bb      	cmp	r3, r7
 803d66c:	460e      	mov	r6, r1
 803d66e:	d9f4      	bls.n	803d65a <_printf_i+0x11a>
 803d670:	2b08      	cmp	r3, #8
 803d672:	d10b      	bne.n	803d68c <_printf_i+0x14c>
 803d674:	6823      	ldr	r3, [r4, #0]
 803d676:	07de      	lsls	r6, r3, #31
 803d678:	d508      	bpl.n	803d68c <_printf_i+0x14c>
 803d67a:	6923      	ldr	r3, [r4, #16]
 803d67c:	6861      	ldr	r1, [r4, #4]
 803d67e:	4299      	cmp	r1, r3
 803d680:	bfde      	ittt	le
 803d682:	2330      	movle	r3, #48	; 0x30
 803d684:	f805 3c01 	strble.w	r3, [r5, #-1]
 803d688:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 803d68c:	1b52      	subs	r2, r2, r5
 803d68e:	6122      	str	r2, [r4, #16]
 803d690:	f8cd a000 	str.w	sl, [sp]
 803d694:	464b      	mov	r3, r9
 803d696:	aa03      	add	r2, sp, #12
 803d698:	4621      	mov	r1, r4
 803d69a:	4640      	mov	r0, r8
 803d69c:	f7ff fee2 	bl	803d464 <_printf_common>
 803d6a0:	3001      	adds	r0, #1
 803d6a2:	d14c      	bne.n	803d73e <_printf_i+0x1fe>
 803d6a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 803d6a8:	b004      	add	sp, #16
 803d6aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 803d6ae:	4835      	ldr	r0, [pc, #212]	; (803d784 <_printf_i+0x244>)
 803d6b0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 803d6b4:	6829      	ldr	r1, [r5, #0]
 803d6b6:	6823      	ldr	r3, [r4, #0]
 803d6b8:	f851 6b04 	ldr.w	r6, [r1], #4
 803d6bc:	6029      	str	r1, [r5, #0]
 803d6be:	061d      	lsls	r5, r3, #24
 803d6c0:	d514      	bpl.n	803d6ec <_printf_i+0x1ac>
 803d6c2:	07df      	lsls	r7, r3, #31
 803d6c4:	bf44      	itt	mi
 803d6c6:	f043 0320 	orrmi.w	r3, r3, #32
 803d6ca:	6023      	strmi	r3, [r4, #0]
 803d6cc:	b91e      	cbnz	r6, 803d6d6 <_printf_i+0x196>
 803d6ce:	6823      	ldr	r3, [r4, #0]
 803d6d0:	f023 0320 	bic.w	r3, r3, #32
 803d6d4:	6023      	str	r3, [r4, #0]
 803d6d6:	2310      	movs	r3, #16
 803d6d8:	e7b0      	b.n	803d63c <_printf_i+0xfc>
 803d6da:	6823      	ldr	r3, [r4, #0]
 803d6dc:	f043 0320 	orr.w	r3, r3, #32
 803d6e0:	6023      	str	r3, [r4, #0]
 803d6e2:	2378      	movs	r3, #120	; 0x78
 803d6e4:	4828      	ldr	r0, [pc, #160]	; (803d788 <_printf_i+0x248>)
 803d6e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 803d6ea:	e7e3      	b.n	803d6b4 <_printf_i+0x174>
 803d6ec:	0659      	lsls	r1, r3, #25
 803d6ee:	bf48      	it	mi
 803d6f0:	b2b6      	uxthmi	r6, r6
 803d6f2:	e7e6      	b.n	803d6c2 <_printf_i+0x182>
 803d6f4:	4615      	mov	r5, r2
 803d6f6:	e7bb      	b.n	803d670 <_printf_i+0x130>
 803d6f8:	682b      	ldr	r3, [r5, #0]
 803d6fa:	6826      	ldr	r6, [r4, #0]
 803d6fc:	6961      	ldr	r1, [r4, #20]
 803d6fe:	1d18      	adds	r0, r3, #4
 803d700:	6028      	str	r0, [r5, #0]
 803d702:	0635      	lsls	r5, r6, #24
 803d704:	681b      	ldr	r3, [r3, #0]
 803d706:	d501      	bpl.n	803d70c <_printf_i+0x1cc>
 803d708:	6019      	str	r1, [r3, #0]
 803d70a:	e002      	b.n	803d712 <_printf_i+0x1d2>
 803d70c:	0670      	lsls	r0, r6, #25
 803d70e:	d5fb      	bpl.n	803d708 <_printf_i+0x1c8>
 803d710:	8019      	strh	r1, [r3, #0]
 803d712:	2300      	movs	r3, #0
 803d714:	6123      	str	r3, [r4, #16]
 803d716:	4615      	mov	r5, r2
 803d718:	e7ba      	b.n	803d690 <_printf_i+0x150>
 803d71a:	682b      	ldr	r3, [r5, #0]
 803d71c:	1d1a      	adds	r2, r3, #4
 803d71e:	602a      	str	r2, [r5, #0]
 803d720:	681d      	ldr	r5, [r3, #0]
 803d722:	6862      	ldr	r2, [r4, #4]
 803d724:	2100      	movs	r1, #0
 803d726:	4628      	mov	r0, r5
 803d728:	f7e2 fdda 	bl	80202e0 <memchr>
 803d72c:	b108      	cbz	r0, 803d732 <_printf_i+0x1f2>
 803d72e:	1b40      	subs	r0, r0, r5
 803d730:	6060      	str	r0, [r4, #4]
 803d732:	6863      	ldr	r3, [r4, #4]
 803d734:	6123      	str	r3, [r4, #16]
 803d736:	2300      	movs	r3, #0
 803d738:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 803d73c:	e7a8      	b.n	803d690 <_printf_i+0x150>
 803d73e:	6923      	ldr	r3, [r4, #16]
 803d740:	462a      	mov	r2, r5
 803d742:	4649      	mov	r1, r9
 803d744:	4640      	mov	r0, r8
 803d746:	47d0      	blx	sl
 803d748:	3001      	adds	r0, #1
 803d74a:	d0ab      	beq.n	803d6a4 <_printf_i+0x164>
 803d74c:	6823      	ldr	r3, [r4, #0]
 803d74e:	079b      	lsls	r3, r3, #30
 803d750:	d413      	bmi.n	803d77a <_printf_i+0x23a>
 803d752:	68e0      	ldr	r0, [r4, #12]
 803d754:	9b03      	ldr	r3, [sp, #12]
 803d756:	4298      	cmp	r0, r3
 803d758:	bfb8      	it	lt
 803d75a:	4618      	movlt	r0, r3
 803d75c:	e7a4      	b.n	803d6a8 <_printf_i+0x168>
 803d75e:	2301      	movs	r3, #1
 803d760:	4632      	mov	r2, r6
 803d762:	4649      	mov	r1, r9
 803d764:	4640      	mov	r0, r8
 803d766:	47d0      	blx	sl
 803d768:	3001      	adds	r0, #1
 803d76a:	d09b      	beq.n	803d6a4 <_printf_i+0x164>
 803d76c:	3501      	adds	r5, #1
 803d76e:	68e3      	ldr	r3, [r4, #12]
 803d770:	9903      	ldr	r1, [sp, #12]
 803d772:	1a5b      	subs	r3, r3, r1
 803d774:	42ab      	cmp	r3, r5
 803d776:	dcf2      	bgt.n	803d75e <_printf_i+0x21e>
 803d778:	e7eb      	b.n	803d752 <_printf_i+0x212>
 803d77a:	2500      	movs	r5, #0
 803d77c:	f104 0619 	add.w	r6, r4, #25
 803d780:	e7f5      	b.n	803d76e <_printf_i+0x22e>
 803d782:	bf00      	nop
 803d784:	08058e89 	.word	0x08058e89
 803d788:	08058e9a 	.word	0x08058e9a

0803d78c <_sbrk_r>:
 803d78c:	b538      	push	{r3, r4, r5, lr}
 803d78e:	4d06      	ldr	r5, [pc, #24]	; (803d7a8 <_sbrk_r+0x1c>)
 803d790:	2300      	movs	r3, #0
 803d792:	4604      	mov	r4, r0
 803d794:	4608      	mov	r0, r1
 803d796:	602b      	str	r3, [r5, #0]
 803d798:	f7ed feca 	bl	802b530 <_sbrk>
 803d79c:	1c43      	adds	r3, r0, #1
 803d79e:	d102      	bne.n	803d7a6 <_sbrk_r+0x1a>
 803d7a0:	682b      	ldr	r3, [r5, #0]
 803d7a2:	b103      	cbz	r3, 803d7a6 <_sbrk_r+0x1a>
 803d7a4:	6023      	str	r3, [r4, #0]
 803d7a6:	bd38      	pop	{r3, r4, r5, pc}
 803d7a8:	24003764 	.word	0x24003764

0803d7ac <_raise_r>:
 803d7ac:	291f      	cmp	r1, #31
 803d7ae:	b538      	push	{r3, r4, r5, lr}
 803d7b0:	4604      	mov	r4, r0
 803d7b2:	460d      	mov	r5, r1
 803d7b4:	d904      	bls.n	803d7c0 <_raise_r+0x14>
 803d7b6:	2316      	movs	r3, #22
 803d7b8:	6003      	str	r3, [r0, #0]
 803d7ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 803d7be:	bd38      	pop	{r3, r4, r5, pc}
 803d7c0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 803d7c2:	b112      	cbz	r2, 803d7ca <_raise_r+0x1e>
 803d7c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 803d7c8:	b94b      	cbnz	r3, 803d7de <_raise_r+0x32>
 803d7ca:	4620      	mov	r0, r4
 803d7cc:	f000 f830 	bl	803d830 <_getpid_r>
 803d7d0:	462a      	mov	r2, r5
 803d7d2:	4601      	mov	r1, r0
 803d7d4:	4620      	mov	r0, r4
 803d7d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 803d7da:	f000 b817 	b.w	803d80c <_kill_r>
 803d7de:	2b01      	cmp	r3, #1
 803d7e0:	d00a      	beq.n	803d7f8 <_raise_r+0x4c>
 803d7e2:	1c59      	adds	r1, r3, #1
 803d7e4:	d103      	bne.n	803d7ee <_raise_r+0x42>
 803d7e6:	2316      	movs	r3, #22
 803d7e8:	6003      	str	r3, [r0, #0]
 803d7ea:	2001      	movs	r0, #1
 803d7ec:	e7e7      	b.n	803d7be <_raise_r+0x12>
 803d7ee:	2400      	movs	r4, #0
 803d7f0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 803d7f4:	4628      	mov	r0, r5
 803d7f6:	4798      	blx	r3
 803d7f8:	2000      	movs	r0, #0
 803d7fa:	e7e0      	b.n	803d7be <_raise_r+0x12>

0803d7fc <raise>:
 803d7fc:	4b02      	ldr	r3, [pc, #8]	; (803d808 <raise+0xc>)
 803d7fe:	4601      	mov	r1, r0
 803d800:	6818      	ldr	r0, [r3, #0]
 803d802:	f7ff bfd3 	b.w	803d7ac <_raise_r>
 803d806:	bf00      	nop
 803d808:	24000100 	.word	0x24000100

0803d80c <_kill_r>:
 803d80c:	b538      	push	{r3, r4, r5, lr}
 803d80e:	4d07      	ldr	r5, [pc, #28]	; (803d82c <_kill_r+0x20>)
 803d810:	2300      	movs	r3, #0
 803d812:	4604      	mov	r4, r0
 803d814:	4608      	mov	r0, r1
 803d816:	4611      	mov	r1, r2
 803d818:	602b      	str	r3, [r5, #0]
 803d81a:	f7ed fe01 	bl	802b420 <_kill>
 803d81e:	1c43      	adds	r3, r0, #1
 803d820:	d102      	bne.n	803d828 <_kill_r+0x1c>
 803d822:	682b      	ldr	r3, [r5, #0]
 803d824:	b103      	cbz	r3, 803d828 <_kill_r+0x1c>
 803d826:	6023      	str	r3, [r4, #0]
 803d828:	bd38      	pop	{r3, r4, r5, pc}
 803d82a:	bf00      	nop
 803d82c:	24003764 	.word	0x24003764

0803d830 <_getpid_r>:
 803d830:	f7ed bdee 	b.w	802b410 <_getpid>

0803d834 <__swbuf_r>:
 803d834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803d836:	460e      	mov	r6, r1
 803d838:	4614      	mov	r4, r2
 803d83a:	4605      	mov	r5, r0
 803d83c:	b118      	cbz	r0, 803d846 <__swbuf_r+0x12>
 803d83e:	6983      	ldr	r3, [r0, #24]
 803d840:	b90b      	cbnz	r3, 803d846 <__swbuf_r+0x12>
 803d842:	f000 f9d1 	bl	803dbe8 <__sinit>
 803d846:	4b21      	ldr	r3, [pc, #132]	; (803d8cc <__swbuf_r+0x98>)
 803d848:	429c      	cmp	r4, r3
 803d84a:	d12b      	bne.n	803d8a4 <__swbuf_r+0x70>
 803d84c:	686c      	ldr	r4, [r5, #4]
 803d84e:	69a3      	ldr	r3, [r4, #24]
 803d850:	60a3      	str	r3, [r4, #8]
 803d852:	89a3      	ldrh	r3, [r4, #12]
 803d854:	071a      	lsls	r2, r3, #28
 803d856:	d52f      	bpl.n	803d8b8 <__swbuf_r+0x84>
 803d858:	6923      	ldr	r3, [r4, #16]
 803d85a:	b36b      	cbz	r3, 803d8b8 <__swbuf_r+0x84>
 803d85c:	6923      	ldr	r3, [r4, #16]
 803d85e:	6820      	ldr	r0, [r4, #0]
 803d860:	1ac0      	subs	r0, r0, r3
 803d862:	6963      	ldr	r3, [r4, #20]
 803d864:	b2f6      	uxtb	r6, r6
 803d866:	4283      	cmp	r3, r0
 803d868:	4637      	mov	r7, r6
 803d86a:	dc04      	bgt.n	803d876 <__swbuf_r+0x42>
 803d86c:	4621      	mov	r1, r4
 803d86e:	4628      	mov	r0, r5
 803d870:	f000 f926 	bl	803dac0 <_fflush_r>
 803d874:	bb30      	cbnz	r0, 803d8c4 <__swbuf_r+0x90>
 803d876:	68a3      	ldr	r3, [r4, #8]
 803d878:	3b01      	subs	r3, #1
 803d87a:	60a3      	str	r3, [r4, #8]
 803d87c:	6823      	ldr	r3, [r4, #0]
 803d87e:	1c5a      	adds	r2, r3, #1
 803d880:	6022      	str	r2, [r4, #0]
 803d882:	701e      	strb	r6, [r3, #0]
 803d884:	6963      	ldr	r3, [r4, #20]
 803d886:	3001      	adds	r0, #1
 803d888:	4283      	cmp	r3, r0
 803d88a:	d004      	beq.n	803d896 <__swbuf_r+0x62>
 803d88c:	89a3      	ldrh	r3, [r4, #12]
 803d88e:	07db      	lsls	r3, r3, #31
 803d890:	d506      	bpl.n	803d8a0 <__swbuf_r+0x6c>
 803d892:	2e0a      	cmp	r6, #10
 803d894:	d104      	bne.n	803d8a0 <__swbuf_r+0x6c>
 803d896:	4621      	mov	r1, r4
 803d898:	4628      	mov	r0, r5
 803d89a:	f000 f911 	bl	803dac0 <_fflush_r>
 803d89e:	b988      	cbnz	r0, 803d8c4 <__swbuf_r+0x90>
 803d8a0:	4638      	mov	r0, r7
 803d8a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 803d8a4:	4b0a      	ldr	r3, [pc, #40]	; (803d8d0 <__swbuf_r+0x9c>)
 803d8a6:	429c      	cmp	r4, r3
 803d8a8:	d101      	bne.n	803d8ae <__swbuf_r+0x7a>
 803d8aa:	68ac      	ldr	r4, [r5, #8]
 803d8ac:	e7cf      	b.n	803d84e <__swbuf_r+0x1a>
 803d8ae:	4b09      	ldr	r3, [pc, #36]	; (803d8d4 <__swbuf_r+0xa0>)
 803d8b0:	429c      	cmp	r4, r3
 803d8b2:	bf08      	it	eq
 803d8b4:	68ec      	ldreq	r4, [r5, #12]
 803d8b6:	e7ca      	b.n	803d84e <__swbuf_r+0x1a>
 803d8b8:	4621      	mov	r1, r4
 803d8ba:	4628      	mov	r0, r5
 803d8bc:	f000 f80c 	bl	803d8d8 <__swsetup_r>
 803d8c0:	2800      	cmp	r0, #0
 803d8c2:	d0cb      	beq.n	803d85c <__swbuf_r+0x28>
 803d8c4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 803d8c8:	e7ea      	b.n	803d8a0 <__swbuf_r+0x6c>
 803d8ca:	bf00      	nop
 803d8cc:	08058ecc 	.word	0x08058ecc
 803d8d0:	08058eec 	.word	0x08058eec
 803d8d4:	08058eac 	.word	0x08058eac

0803d8d8 <__swsetup_r>:
 803d8d8:	4b32      	ldr	r3, [pc, #200]	; (803d9a4 <__swsetup_r+0xcc>)
 803d8da:	b570      	push	{r4, r5, r6, lr}
 803d8dc:	681d      	ldr	r5, [r3, #0]
 803d8de:	4606      	mov	r6, r0
 803d8e0:	460c      	mov	r4, r1
 803d8e2:	b125      	cbz	r5, 803d8ee <__swsetup_r+0x16>
 803d8e4:	69ab      	ldr	r3, [r5, #24]
 803d8e6:	b913      	cbnz	r3, 803d8ee <__swsetup_r+0x16>
 803d8e8:	4628      	mov	r0, r5
 803d8ea:	f000 f97d 	bl	803dbe8 <__sinit>
 803d8ee:	4b2e      	ldr	r3, [pc, #184]	; (803d9a8 <__swsetup_r+0xd0>)
 803d8f0:	429c      	cmp	r4, r3
 803d8f2:	d10f      	bne.n	803d914 <__swsetup_r+0x3c>
 803d8f4:	686c      	ldr	r4, [r5, #4]
 803d8f6:	89a3      	ldrh	r3, [r4, #12]
 803d8f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 803d8fc:	0719      	lsls	r1, r3, #28
 803d8fe:	d42c      	bmi.n	803d95a <__swsetup_r+0x82>
 803d900:	06dd      	lsls	r5, r3, #27
 803d902:	d411      	bmi.n	803d928 <__swsetup_r+0x50>
 803d904:	2309      	movs	r3, #9
 803d906:	6033      	str	r3, [r6, #0]
 803d908:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 803d90c:	81a3      	strh	r3, [r4, #12]
 803d90e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 803d912:	e03e      	b.n	803d992 <__swsetup_r+0xba>
 803d914:	4b25      	ldr	r3, [pc, #148]	; (803d9ac <__swsetup_r+0xd4>)
 803d916:	429c      	cmp	r4, r3
 803d918:	d101      	bne.n	803d91e <__swsetup_r+0x46>
 803d91a:	68ac      	ldr	r4, [r5, #8]
 803d91c:	e7eb      	b.n	803d8f6 <__swsetup_r+0x1e>
 803d91e:	4b24      	ldr	r3, [pc, #144]	; (803d9b0 <__swsetup_r+0xd8>)
 803d920:	429c      	cmp	r4, r3
 803d922:	bf08      	it	eq
 803d924:	68ec      	ldreq	r4, [r5, #12]
 803d926:	e7e6      	b.n	803d8f6 <__swsetup_r+0x1e>
 803d928:	0758      	lsls	r0, r3, #29
 803d92a:	d512      	bpl.n	803d952 <__swsetup_r+0x7a>
 803d92c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 803d92e:	b141      	cbz	r1, 803d942 <__swsetup_r+0x6a>
 803d930:	f104 0344 	add.w	r3, r4, #68	; 0x44
 803d934:	4299      	cmp	r1, r3
 803d936:	d002      	beq.n	803d93e <__swsetup_r+0x66>
 803d938:	4630      	mov	r0, r6
 803d93a:	f7ff fb59 	bl	803cff0 <_free_r>
 803d93e:	2300      	movs	r3, #0
 803d940:	6363      	str	r3, [r4, #52]	; 0x34
 803d942:	89a3      	ldrh	r3, [r4, #12]
 803d944:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 803d948:	81a3      	strh	r3, [r4, #12]
 803d94a:	2300      	movs	r3, #0
 803d94c:	6063      	str	r3, [r4, #4]
 803d94e:	6923      	ldr	r3, [r4, #16]
 803d950:	6023      	str	r3, [r4, #0]
 803d952:	89a3      	ldrh	r3, [r4, #12]
 803d954:	f043 0308 	orr.w	r3, r3, #8
 803d958:	81a3      	strh	r3, [r4, #12]
 803d95a:	6923      	ldr	r3, [r4, #16]
 803d95c:	b94b      	cbnz	r3, 803d972 <__swsetup_r+0x9a>
 803d95e:	89a3      	ldrh	r3, [r4, #12]
 803d960:	f403 7320 	and.w	r3, r3, #640	; 0x280
 803d964:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 803d968:	d003      	beq.n	803d972 <__swsetup_r+0x9a>
 803d96a:	4621      	mov	r1, r4
 803d96c:	4630      	mov	r0, r6
 803d96e:	f000 fa01 	bl	803dd74 <__smakebuf_r>
 803d972:	89a0      	ldrh	r0, [r4, #12]
 803d974:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 803d978:	f010 0301 	ands.w	r3, r0, #1
 803d97c:	d00a      	beq.n	803d994 <__swsetup_r+0xbc>
 803d97e:	2300      	movs	r3, #0
 803d980:	60a3      	str	r3, [r4, #8]
 803d982:	6963      	ldr	r3, [r4, #20]
 803d984:	425b      	negs	r3, r3
 803d986:	61a3      	str	r3, [r4, #24]
 803d988:	6923      	ldr	r3, [r4, #16]
 803d98a:	b943      	cbnz	r3, 803d99e <__swsetup_r+0xc6>
 803d98c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 803d990:	d1ba      	bne.n	803d908 <__swsetup_r+0x30>
 803d992:	bd70      	pop	{r4, r5, r6, pc}
 803d994:	0781      	lsls	r1, r0, #30
 803d996:	bf58      	it	pl
 803d998:	6963      	ldrpl	r3, [r4, #20]
 803d99a:	60a3      	str	r3, [r4, #8]
 803d99c:	e7f4      	b.n	803d988 <__swsetup_r+0xb0>
 803d99e:	2000      	movs	r0, #0
 803d9a0:	e7f7      	b.n	803d992 <__swsetup_r+0xba>
 803d9a2:	bf00      	nop
 803d9a4:	24000100 	.word	0x24000100
 803d9a8:	08058ecc 	.word	0x08058ecc
 803d9ac:	08058eec 	.word	0x08058eec
 803d9b0:	08058eac 	.word	0x08058eac

0803d9b4 <__sflush_r>:
 803d9b4:	898a      	ldrh	r2, [r1, #12]
 803d9b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 803d9ba:	4605      	mov	r5, r0
 803d9bc:	0710      	lsls	r0, r2, #28
 803d9be:	460c      	mov	r4, r1
 803d9c0:	d458      	bmi.n	803da74 <__sflush_r+0xc0>
 803d9c2:	684b      	ldr	r3, [r1, #4]
 803d9c4:	2b00      	cmp	r3, #0
 803d9c6:	dc05      	bgt.n	803d9d4 <__sflush_r+0x20>
 803d9c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 803d9ca:	2b00      	cmp	r3, #0
 803d9cc:	dc02      	bgt.n	803d9d4 <__sflush_r+0x20>
 803d9ce:	2000      	movs	r0, #0
 803d9d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 803d9d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 803d9d6:	2e00      	cmp	r6, #0
 803d9d8:	d0f9      	beq.n	803d9ce <__sflush_r+0x1a>
 803d9da:	2300      	movs	r3, #0
 803d9dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 803d9e0:	682f      	ldr	r7, [r5, #0]
 803d9e2:	602b      	str	r3, [r5, #0]
 803d9e4:	d032      	beq.n	803da4c <__sflush_r+0x98>
 803d9e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 803d9e8:	89a3      	ldrh	r3, [r4, #12]
 803d9ea:	075a      	lsls	r2, r3, #29
 803d9ec:	d505      	bpl.n	803d9fa <__sflush_r+0x46>
 803d9ee:	6863      	ldr	r3, [r4, #4]
 803d9f0:	1ac0      	subs	r0, r0, r3
 803d9f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 803d9f4:	b10b      	cbz	r3, 803d9fa <__sflush_r+0x46>
 803d9f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 803d9f8:	1ac0      	subs	r0, r0, r3
 803d9fa:	2300      	movs	r3, #0
 803d9fc:	4602      	mov	r2, r0
 803d9fe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 803da00:	6a21      	ldr	r1, [r4, #32]
 803da02:	4628      	mov	r0, r5
 803da04:	47b0      	blx	r6
 803da06:	1c43      	adds	r3, r0, #1
 803da08:	89a3      	ldrh	r3, [r4, #12]
 803da0a:	d106      	bne.n	803da1a <__sflush_r+0x66>
 803da0c:	6829      	ldr	r1, [r5, #0]
 803da0e:	291d      	cmp	r1, #29
 803da10:	d82c      	bhi.n	803da6c <__sflush_r+0xb8>
 803da12:	4a2a      	ldr	r2, [pc, #168]	; (803dabc <__sflush_r+0x108>)
 803da14:	40ca      	lsrs	r2, r1
 803da16:	07d6      	lsls	r6, r2, #31
 803da18:	d528      	bpl.n	803da6c <__sflush_r+0xb8>
 803da1a:	2200      	movs	r2, #0
 803da1c:	6062      	str	r2, [r4, #4]
 803da1e:	04d9      	lsls	r1, r3, #19
 803da20:	6922      	ldr	r2, [r4, #16]
 803da22:	6022      	str	r2, [r4, #0]
 803da24:	d504      	bpl.n	803da30 <__sflush_r+0x7c>
 803da26:	1c42      	adds	r2, r0, #1
 803da28:	d101      	bne.n	803da2e <__sflush_r+0x7a>
 803da2a:	682b      	ldr	r3, [r5, #0]
 803da2c:	b903      	cbnz	r3, 803da30 <__sflush_r+0x7c>
 803da2e:	6560      	str	r0, [r4, #84]	; 0x54
 803da30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 803da32:	602f      	str	r7, [r5, #0]
 803da34:	2900      	cmp	r1, #0
 803da36:	d0ca      	beq.n	803d9ce <__sflush_r+0x1a>
 803da38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 803da3c:	4299      	cmp	r1, r3
 803da3e:	d002      	beq.n	803da46 <__sflush_r+0x92>
 803da40:	4628      	mov	r0, r5
 803da42:	f7ff fad5 	bl	803cff0 <_free_r>
 803da46:	2000      	movs	r0, #0
 803da48:	6360      	str	r0, [r4, #52]	; 0x34
 803da4a:	e7c1      	b.n	803d9d0 <__sflush_r+0x1c>
 803da4c:	6a21      	ldr	r1, [r4, #32]
 803da4e:	2301      	movs	r3, #1
 803da50:	4628      	mov	r0, r5
 803da52:	47b0      	blx	r6
 803da54:	1c41      	adds	r1, r0, #1
 803da56:	d1c7      	bne.n	803d9e8 <__sflush_r+0x34>
 803da58:	682b      	ldr	r3, [r5, #0]
 803da5a:	2b00      	cmp	r3, #0
 803da5c:	d0c4      	beq.n	803d9e8 <__sflush_r+0x34>
 803da5e:	2b1d      	cmp	r3, #29
 803da60:	d001      	beq.n	803da66 <__sflush_r+0xb2>
 803da62:	2b16      	cmp	r3, #22
 803da64:	d101      	bne.n	803da6a <__sflush_r+0xb6>
 803da66:	602f      	str	r7, [r5, #0]
 803da68:	e7b1      	b.n	803d9ce <__sflush_r+0x1a>
 803da6a:	89a3      	ldrh	r3, [r4, #12]
 803da6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 803da70:	81a3      	strh	r3, [r4, #12]
 803da72:	e7ad      	b.n	803d9d0 <__sflush_r+0x1c>
 803da74:	690f      	ldr	r7, [r1, #16]
 803da76:	2f00      	cmp	r7, #0
 803da78:	d0a9      	beq.n	803d9ce <__sflush_r+0x1a>
 803da7a:	0793      	lsls	r3, r2, #30
 803da7c:	680e      	ldr	r6, [r1, #0]
 803da7e:	bf08      	it	eq
 803da80:	694b      	ldreq	r3, [r1, #20]
 803da82:	600f      	str	r7, [r1, #0]
 803da84:	bf18      	it	ne
 803da86:	2300      	movne	r3, #0
 803da88:	eba6 0807 	sub.w	r8, r6, r7
 803da8c:	608b      	str	r3, [r1, #8]
 803da8e:	f1b8 0f00 	cmp.w	r8, #0
 803da92:	dd9c      	ble.n	803d9ce <__sflush_r+0x1a>
 803da94:	6a21      	ldr	r1, [r4, #32]
 803da96:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 803da98:	4643      	mov	r3, r8
 803da9a:	463a      	mov	r2, r7
 803da9c:	4628      	mov	r0, r5
 803da9e:	47b0      	blx	r6
 803daa0:	2800      	cmp	r0, #0
 803daa2:	dc06      	bgt.n	803dab2 <__sflush_r+0xfe>
 803daa4:	89a3      	ldrh	r3, [r4, #12]
 803daa6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 803daaa:	81a3      	strh	r3, [r4, #12]
 803daac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 803dab0:	e78e      	b.n	803d9d0 <__sflush_r+0x1c>
 803dab2:	4407      	add	r7, r0
 803dab4:	eba8 0800 	sub.w	r8, r8, r0
 803dab8:	e7e9      	b.n	803da8e <__sflush_r+0xda>
 803daba:	bf00      	nop
 803dabc:	20400001 	.word	0x20400001

0803dac0 <_fflush_r>:
 803dac0:	b538      	push	{r3, r4, r5, lr}
 803dac2:	690b      	ldr	r3, [r1, #16]
 803dac4:	4605      	mov	r5, r0
 803dac6:	460c      	mov	r4, r1
 803dac8:	b913      	cbnz	r3, 803dad0 <_fflush_r+0x10>
 803daca:	2500      	movs	r5, #0
 803dacc:	4628      	mov	r0, r5
 803dace:	bd38      	pop	{r3, r4, r5, pc}
 803dad0:	b118      	cbz	r0, 803dada <_fflush_r+0x1a>
 803dad2:	6983      	ldr	r3, [r0, #24]
 803dad4:	b90b      	cbnz	r3, 803dada <_fflush_r+0x1a>
 803dad6:	f000 f887 	bl	803dbe8 <__sinit>
 803dada:	4b14      	ldr	r3, [pc, #80]	; (803db2c <_fflush_r+0x6c>)
 803dadc:	429c      	cmp	r4, r3
 803dade:	d11b      	bne.n	803db18 <_fflush_r+0x58>
 803dae0:	686c      	ldr	r4, [r5, #4]
 803dae2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 803dae6:	2b00      	cmp	r3, #0
 803dae8:	d0ef      	beq.n	803daca <_fflush_r+0xa>
 803daea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 803daec:	07d0      	lsls	r0, r2, #31
 803daee:	d404      	bmi.n	803dafa <_fflush_r+0x3a>
 803daf0:	0599      	lsls	r1, r3, #22
 803daf2:	d402      	bmi.n	803dafa <_fflush_r+0x3a>
 803daf4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 803daf6:	f000 f915 	bl	803dd24 <__retarget_lock_acquire_recursive>
 803dafa:	4628      	mov	r0, r5
 803dafc:	4621      	mov	r1, r4
 803dafe:	f7ff ff59 	bl	803d9b4 <__sflush_r>
 803db02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 803db04:	07da      	lsls	r2, r3, #31
 803db06:	4605      	mov	r5, r0
 803db08:	d4e0      	bmi.n	803dacc <_fflush_r+0xc>
 803db0a:	89a3      	ldrh	r3, [r4, #12]
 803db0c:	059b      	lsls	r3, r3, #22
 803db0e:	d4dd      	bmi.n	803dacc <_fflush_r+0xc>
 803db10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 803db12:	f000 f908 	bl	803dd26 <__retarget_lock_release_recursive>
 803db16:	e7d9      	b.n	803dacc <_fflush_r+0xc>
 803db18:	4b05      	ldr	r3, [pc, #20]	; (803db30 <_fflush_r+0x70>)
 803db1a:	429c      	cmp	r4, r3
 803db1c:	d101      	bne.n	803db22 <_fflush_r+0x62>
 803db1e:	68ac      	ldr	r4, [r5, #8]
 803db20:	e7df      	b.n	803dae2 <_fflush_r+0x22>
 803db22:	4b04      	ldr	r3, [pc, #16]	; (803db34 <_fflush_r+0x74>)
 803db24:	429c      	cmp	r4, r3
 803db26:	bf08      	it	eq
 803db28:	68ec      	ldreq	r4, [r5, #12]
 803db2a:	e7da      	b.n	803dae2 <_fflush_r+0x22>
 803db2c:	08058ecc 	.word	0x08058ecc
 803db30:	08058eec 	.word	0x08058eec
 803db34:	08058eac 	.word	0x08058eac

0803db38 <std>:
 803db38:	2300      	movs	r3, #0
 803db3a:	b510      	push	{r4, lr}
 803db3c:	4604      	mov	r4, r0
 803db3e:	e9c0 3300 	strd	r3, r3, [r0]
 803db42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 803db46:	6083      	str	r3, [r0, #8]
 803db48:	8181      	strh	r1, [r0, #12]
 803db4a:	6643      	str	r3, [r0, #100]	; 0x64
 803db4c:	81c2      	strh	r2, [r0, #14]
 803db4e:	6183      	str	r3, [r0, #24]
 803db50:	4619      	mov	r1, r3
 803db52:	2208      	movs	r2, #8
 803db54:	305c      	adds	r0, #92	; 0x5c
 803db56:	f7ff fa43 	bl	803cfe0 <memset>
 803db5a:	4b05      	ldr	r3, [pc, #20]	; (803db70 <std+0x38>)
 803db5c:	6263      	str	r3, [r4, #36]	; 0x24
 803db5e:	4b05      	ldr	r3, [pc, #20]	; (803db74 <std+0x3c>)
 803db60:	62a3      	str	r3, [r4, #40]	; 0x28
 803db62:	4b05      	ldr	r3, [pc, #20]	; (803db78 <std+0x40>)
 803db64:	62e3      	str	r3, [r4, #44]	; 0x2c
 803db66:	4b05      	ldr	r3, [pc, #20]	; (803db7c <std+0x44>)
 803db68:	6224      	str	r4, [r4, #32]
 803db6a:	6323      	str	r3, [r4, #48]	; 0x30
 803db6c:	bd10      	pop	{r4, pc}
 803db6e:	bf00      	nop
 803db70:	0803de0d 	.word	0x0803de0d
 803db74:	0803de2f 	.word	0x0803de2f
 803db78:	0803de67 	.word	0x0803de67
 803db7c:	0803de8b 	.word	0x0803de8b

0803db80 <_cleanup_r>:
 803db80:	4901      	ldr	r1, [pc, #4]	; (803db88 <_cleanup_r+0x8>)
 803db82:	f000 b8af 	b.w	803dce4 <_fwalk_reent>
 803db86:	bf00      	nop
 803db88:	0803dac1 	.word	0x0803dac1

0803db8c <__sfmoreglue>:
 803db8c:	b570      	push	{r4, r5, r6, lr}
 803db8e:	2268      	movs	r2, #104	; 0x68
 803db90:	1e4d      	subs	r5, r1, #1
 803db92:	4355      	muls	r5, r2
 803db94:	460e      	mov	r6, r1
 803db96:	f105 0174 	add.w	r1, r5, #116	; 0x74
 803db9a:	f7ff fa95 	bl	803d0c8 <_malloc_r>
 803db9e:	4604      	mov	r4, r0
 803dba0:	b140      	cbz	r0, 803dbb4 <__sfmoreglue+0x28>
 803dba2:	2100      	movs	r1, #0
 803dba4:	e9c0 1600 	strd	r1, r6, [r0]
 803dba8:	300c      	adds	r0, #12
 803dbaa:	60a0      	str	r0, [r4, #8]
 803dbac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 803dbb0:	f7ff fa16 	bl	803cfe0 <memset>
 803dbb4:	4620      	mov	r0, r4
 803dbb6:	bd70      	pop	{r4, r5, r6, pc}

0803dbb8 <__sfp_lock_acquire>:
 803dbb8:	4801      	ldr	r0, [pc, #4]	; (803dbc0 <__sfp_lock_acquire+0x8>)
 803dbba:	f000 b8b3 	b.w	803dd24 <__retarget_lock_acquire_recursive>
 803dbbe:	bf00      	nop
 803dbc0:	24003761 	.word	0x24003761

0803dbc4 <__sfp_lock_release>:
 803dbc4:	4801      	ldr	r0, [pc, #4]	; (803dbcc <__sfp_lock_release+0x8>)
 803dbc6:	f000 b8ae 	b.w	803dd26 <__retarget_lock_release_recursive>
 803dbca:	bf00      	nop
 803dbcc:	24003761 	.word	0x24003761

0803dbd0 <__sinit_lock_acquire>:
 803dbd0:	4801      	ldr	r0, [pc, #4]	; (803dbd8 <__sinit_lock_acquire+0x8>)
 803dbd2:	f000 b8a7 	b.w	803dd24 <__retarget_lock_acquire_recursive>
 803dbd6:	bf00      	nop
 803dbd8:	24003762 	.word	0x24003762

0803dbdc <__sinit_lock_release>:
 803dbdc:	4801      	ldr	r0, [pc, #4]	; (803dbe4 <__sinit_lock_release+0x8>)
 803dbde:	f000 b8a2 	b.w	803dd26 <__retarget_lock_release_recursive>
 803dbe2:	bf00      	nop
 803dbe4:	24003762 	.word	0x24003762

0803dbe8 <__sinit>:
 803dbe8:	b510      	push	{r4, lr}
 803dbea:	4604      	mov	r4, r0
 803dbec:	f7ff fff0 	bl	803dbd0 <__sinit_lock_acquire>
 803dbf0:	69a3      	ldr	r3, [r4, #24]
 803dbf2:	b11b      	cbz	r3, 803dbfc <__sinit+0x14>
 803dbf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 803dbf8:	f7ff bff0 	b.w	803dbdc <__sinit_lock_release>
 803dbfc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 803dc00:	6523      	str	r3, [r4, #80]	; 0x50
 803dc02:	4b13      	ldr	r3, [pc, #76]	; (803dc50 <__sinit+0x68>)
 803dc04:	4a13      	ldr	r2, [pc, #76]	; (803dc54 <__sinit+0x6c>)
 803dc06:	681b      	ldr	r3, [r3, #0]
 803dc08:	62a2      	str	r2, [r4, #40]	; 0x28
 803dc0a:	42a3      	cmp	r3, r4
 803dc0c:	bf04      	itt	eq
 803dc0e:	2301      	moveq	r3, #1
 803dc10:	61a3      	streq	r3, [r4, #24]
 803dc12:	4620      	mov	r0, r4
 803dc14:	f000 f820 	bl	803dc58 <__sfp>
 803dc18:	6060      	str	r0, [r4, #4]
 803dc1a:	4620      	mov	r0, r4
 803dc1c:	f000 f81c 	bl	803dc58 <__sfp>
 803dc20:	60a0      	str	r0, [r4, #8]
 803dc22:	4620      	mov	r0, r4
 803dc24:	f000 f818 	bl	803dc58 <__sfp>
 803dc28:	2200      	movs	r2, #0
 803dc2a:	60e0      	str	r0, [r4, #12]
 803dc2c:	2104      	movs	r1, #4
 803dc2e:	6860      	ldr	r0, [r4, #4]
 803dc30:	f7ff ff82 	bl	803db38 <std>
 803dc34:	68a0      	ldr	r0, [r4, #8]
 803dc36:	2201      	movs	r2, #1
 803dc38:	2109      	movs	r1, #9
 803dc3a:	f7ff ff7d 	bl	803db38 <std>
 803dc3e:	68e0      	ldr	r0, [r4, #12]
 803dc40:	2202      	movs	r2, #2
 803dc42:	2112      	movs	r1, #18
 803dc44:	f7ff ff78 	bl	803db38 <std>
 803dc48:	2301      	movs	r3, #1
 803dc4a:	61a3      	str	r3, [r4, #24]
 803dc4c:	e7d2      	b.n	803dbf4 <__sinit+0xc>
 803dc4e:	bf00      	nop
 803dc50:	08058e74 	.word	0x08058e74
 803dc54:	0803db81 	.word	0x0803db81

0803dc58 <__sfp>:
 803dc58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803dc5a:	4607      	mov	r7, r0
 803dc5c:	f7ff ffac 	bl	803dbb8 <__sfp_lock_acquire>
 803dc60:	4b1e      	ldr	r3, [pc, #120]	; (803dcdc <__sfp+0x84>)
 803dc62:	681e      	ldr	r6, [r3, #0]
 803dc64:	69b3      	ldr	r3, [r6, #24]
 803dc66:	b913      	cbnz	r3, 803dc6e <__sfp+0x16>
 803dc68:	4630      	mov	r0, r6
 803dc6a:	f7ff ffbd 	bl	803dbe8 <__sinit>
 803dc6e:	3648      	adds	r6, #72	; 0x48
 803dc70:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 803dc74:	3b01      	subs	r3, #1
 803dc76:	d503      	bpl.n	803dc80 <__sfp+0x28>
 803dc78:	6833      	ldr	r3, [r6, #0]
 803dc7a:	b30b      	cbz	r3, 803dcc0 <__sfp+0x68>
 803dc7c:	6836      	ldr	r6, [r6, #0]
 803dc7e:	e7f7      	b.n	803dc70 <__sfp+0x18>
 803dc80:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 803dc84:	b9d5      	cbnz	r5, 803dcbc <__sfp+0x64>
 803dc86:	4b16      	ldr	r3, [pc, #88]	; (803dce0 <__sfp+0x88>)
 803dc88:	60e3      	str	r3, [r4, #12]
 803dc8a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 803dc8e:	6665      	str	r5, [r4, #100]	; 0x64
 803dc90:	f000 f847 	bl	803dd22 <__retarget_lock_init_recursive>
 803dc94:	f7ff ff96 	bl	803dbc4 <__sfp_lock_release>
 803dc98:	e9c4 5501 	strd	r5, r5, [r4, #4]
 803dc9c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 803dca0:	6025      	str	r5, [r4, #0]
 803dca2:	61a5      	str	r5, [r4, #24]
 803dca4:	2208      	movs	r2, #8
 803dca6:	4629      	mov	r1, r5
 803dca8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 803dcac:	f7ff f998 	bl	803cfe0 <memset>
 803dcb0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 803dcb4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 803dcb8:	4620      	mov	r0, r4
 803dcba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 803dcbc:	3468      	adds	r4, #104	; 0x68
 803dcbe:	e7d9      	b.n	803dc74 <__sfp+0x1c>
 803dcc0:	2104      	movs	r1, #4
 803dcc2:	4638      	mov	r0, r7
 803dcc4:	f7ff ff62 	bl	803db8c <__sfmoreglue>
 803dcc8:	4604      	mov	r4, r0
 803dcca:	6030      	str	r0, [r6, #0]
 803dccc:	2800      	cmp	r0, #0
 803dcce:	d1d5      	bne.n	803dc7c <__sfp+0x24>
 803dcd0:	f7ff ff78 	bl	803dbc4 <__sfp_lock_release>
 803dcd4:	230c      	movs	r3, #12
 803dcd6:	603b      	str	r3, [r7, #0]
 803dcd8:	e7ee      	b.n	803dcb8 <__sfp+0x60>
 803dcda:	bf00      	nop
 803dcdc:	08058e74 	.word	0x08058e74
 803dce0:	ffff0001 	.word	0xffff0001

0803dce4 <_fwalk_reent>:
 803dce4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 803dce8:	4606      	mov	r6, r0
 803dcea:	4688      	mov	r8, r1
 803dcec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 803dcf0:	2700      	movs	r7, #0
 803dcf2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 803dcf6:	f1b9 0901 	subs.w	r9, r9, #1
 803dcfa:	d505      	bpl.n	803dd08 <_fwalk_reent+0x24>
 803dcfc:	6824      	ldr	r4, [r4, #0]
 803dcfe:	2c00      	cmp	r4, #0
 803dd00:	d1f7      	bne.n	803dcf2 <_fwalk_reent+0xe>
 803dd02:	4638      	mov	r0, r7
 803dd04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 803dd08:	89ab      	ldrh	r3, [r5, #12]
 803dd0a:	2b01      	cmp	r3, #1
 803dd0c:	d907      	bls.n	803dd1e <_fwalk_reent+0x3a>
 803dd0e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 803dd12:	3301      	adds	r3, #1
 803dd14:	d003      	beq.n	803dd1e <_fwalk_reent+0x3a>
 803dd16:	4629      	mov	r1, r5
 803dd18:	4630      	mov	r0, r6
 803dd1a:	47c0      	blx	r8
 803dd1c:	4307      	orrs	r7, r0
 803dd1e:	3568      	adds	r5, #104	; 0x68
 803dd20:	e7e9      	b.n	803dcf6 <_fwalk_reent+0x12>

0803dd22 <__retarget_lock_init_recursive>:
 803dd22:	4770      	bx	lr

0803dd24 <__retarget_lock_acquire_recursive>:
 803dd24:	4770      	bx	lr

0803dd26 <__retarget_lock_release_recursive>:
 803dd26:	4770      	bx	lr

0803dd28 <__swhatbuf_r>:
 803dd28:	b570      	push	{r4, r5, r6, lr}
 803dd2a:	460e      	mov	r6, r1
 803dd2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 803dd30:	2900      	cmp	r1, #0
 803dd32:	b096      	sub	sp, #88	; 0x58
 803dd34:	4614      	mov	r4, r2
 803dd36:	461d      	mov	r5, r3
 803dd38:	da08      	bge.n	803dd4c <__swhatbuf_r+0x24>
 803dd3a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 803dd3e:	2200      	movs	r2, #0
 803dd40:	602a      	str	r2, [r5, #0]
 803dd42:	061a      	lsls	r2, r3, #24
 803dd44:	d410      	bmi.n	803dd68 <__swhatbuf_r+0x40>
 803dd46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 803dd4a:	e00e      	b.n	803dd6a <__swhatbuf_r+0x42>
 803dd4c:	466a      	mov	r2, sp
 803dd4e:	f000 f8c3 	bl	803ded8 <_fstat_r>
 803dd52:	2800      	cmp	r0, #0
 803dd54:	dbf1      	blt.n	803dd3a <__swhatbuf_r+0x12>
 803dd56:	9a01      	ldr	r2, [sp, #4]
 803dd58:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 803dd5c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 803dd60:	425a      	negs	r2, r3
 803dd62:	415a      	adcs	r2, r3
 803dd64:	602a      	str	r2, [r5, #0]
 803dd66:	e7ee      	b.n	803dd46 <__swhatbuf_r+0x1e>
 803dd68:	2340      	movs	r3, #64	; 0x40
 803dd6a:	2000      	movs	r0, #0
 803dd6c:	6023      	str	r3, [r4, #0]
 803dd6e:	b016      	add	sp, #88	; 0x58
 803dd70:	bd70      	pop	{r4, r5, r6, pc}
	...

0803dd74 <__smakebuf_r>:
 803dd74:	898b      	ldrh	r3, [r1, #12]
 803dd76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 803dd78:	079d      	lsls	r5, r3, #30
 803dd7a:	4606      	mov	r6, r0
 803dd7c:	460c      	mov	r4, r1
 803dd7e:	d507      	bpl.n	803dd90 <__smakebuf_r+0x1c>
 803dd80:	f104 0347 	add.w	r3, r4, #71	; 0x47
 803dd84:	6023      	str	r3, [r4, #0]
 803dd86:	6123      	str	r3, [r4, #16]
 803dd88:	2301      	movs	r3, #1
 803dd8a:	6163      	str	r3, [r4, #20]
 803dd8c:	b002      	add	sp, #8
 803dd8e:	bd70      	pop	{r4, r5, r6, pc}
 803dd90:	ab01      	add	r3, sp, #4
 803dd92:	466a      	mov	r2, sp
 803dd94:	f7ff ffc8 	bl	803dd28 <__swhatbuf_r>
 803dd98:	9900      	ldr	r1, [sp, #0]
 803dd9a:	4605      	mov	r5, r0
 803dd9c:	4630      	mov	r0, r6
 803dd9e:	f7ff f993 	bl	803d0c8 <_malloc_r>
 803dda2:	b948      	cbnz	r0, 803ddb8 <__smakebuf_r+0x44>
 803dda4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 803dda8:	059a      	lsls	r2, r3, #22
 803ddaa:	d4ef      	bmi.n	803dd8c <__smakebuf_r+0x18>
 803ddac:	f023 0303 	bic.w	r3, r3, #3
 803ddb0:	f043 0302 	orr.w	r3, r3, #2
 803ddb4:	81a3      	strh	r3, [r4, #12]
 803ddb6:	e7e3      	b.n	803dd80 <__smakebuf_r+0xc>
 803ddb8:	4b0d      	ldr	r3, [pc, #52]	; (803ddf0 <__smakebuf_r+0x7c>)
 803ddba:	62b3      	str	r3, [r6, #40]	; 0x28
 803ddbc:	89a3      	ldrh	r3, [r4, #12]
 803ddbe:	6020      	str	r0, [r4, #0]
 803ddc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 803ddc4:	81a3      	strh	r3, [r4, #12]
 803ddc6:	9b00      	ldr	r3, [sp, #0]
 803ddc8:	6163      	str	r3, [r4, #20]
 803ddca:	9b01      	ldr	r3, [sp, #4]
 803ddcc:	6120      	str	r0, [r4, #16]
 803ddce:	b15b      	cbz	r3, 803dde8 <__smakebuf_r+0x74>
 803ddd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 803ddd4:	4630      	mov	r0, r6
 803ddd6:	f000 f891 	bl	803defc <_isatty_r>
 803ddda:	b128      	cbz	r0, 803dde8 <__smakebuf_r+0x74>
 803dddc:	89a3      	ldrh	r3, [r4, #12]
 803ddde:	f023 0303 	bic.w	r3, r3, #3
 803dde2:	f043 0301 	orr.w	r3, r3, #1
 803dde6:	81a3      	strh	r3, [r4, #12]
 803dde8:	89a0      	ldrh	r0, [r4, #12]
 803ddea:	4305      	orrs	r5, r0
 803ddec:	81a5      	strh	r5, [r4, #12]
 803ddee:	e7cd      	b.n	803dd8c <__smakebuf_r+0x18>
 803ddf0:	0803db81 	.word	0x0803db81

0803ddf4 <__malloc_lock>:
 803ddf4:	4801      	ldr	r0, [pc, #4]	; (803ddfc <__malloc_lock+0x8>)
 803ddf6:	f7ff bf95 	b.w	803dd24 <__retarget_lock_acquire_recursive>
 803ddfa:	bf00      	nop
 803ddfc:	24003760 	.word	0x24003760

0803de00 <__malloc_unlock>:
 803de00:	4801      	ldr	r0, [pc, #4]	; (803de08 <__malloc_unlock+0x8>)
 803de02:	f7ff bf90 	b.w	803dd26 <__retarget_lock_release_recursive>
 803de06:	bf00      	nop
 803de08:	24003760 	.word	0x24003760

0803de0c <__sread>:
 803de0c:	b510      	push	{r4, lr}
 803de0e:	460c      	mov	r4, r1
 803de10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 803de14:	f000 f894 	bl	803df40 <_read_r>
 803de18:	2800      	cmp	r0, #0
 803de1a:	bfab      	itete	ge
 803de1c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 803de1e:	89a3      	ldrhlt	r3, [r4, #12]
 803de20:	181b      	addge	r3, r3, r0
 803de22:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 803de26:	bfac      	ite	ge
 803de28:	6563      	strge	r3, [r4, #84]	; 0x54
 803de2a:	81a3      	strhlt	r3, [r4, #12]
 803de2c:	bd10      	pop	{r4, pc}

0803de2e <__swrite>:
 803de2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 803de32:	461f      	mov	r7, r3
 803de34:	898b      	ldrh	r3, [r1, #12]
 803de36:	05db      	lsls	r3, r3, #23
 803de38:	4605      	mov	r5, r0
 803de3a:	460c      	mov	r4, r1
 803de3c:	4616      	mov	r6, r2
 803de3e:	d505      	bpl.n	803de4c <__swrite+0x1e>
 803de40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 803de44:	2302      	movs	r3, #2
 803de46:	2200      	movs	r2, #0
 803de48:	f000 f868 	bl	803df1c <_lseek_r>
 803de4c:	89a3      	ldrh	r3, [r4, #12]
 803de4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 803de52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 803de56:	81a3      	strh	r3, [r4, #12]
 803de58:	4632      	mov	r2, r6
 803de5a:	463b      	mov	r3, r7
 803de5c:	4628      	mov	r0, r5
 803de5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 803de62:	f000 b817 	b.w	803de94 <_write_r>

0803de66 <__sseek>:
 803de66:	b510      	push	{r4, lr}
 803de68:	460c      	mov	r4, r1
 803de6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 803de6e:	f000 f855 	bl	803df1c <_lseek_r>
 803de72:	1c43      	adds	r3, r0, #1
 803de74:	89a3      	ldrh	r3, [r4, #12]
 803de76:	bf15      	itete	ne
 803de78:	6560      	strne	r0, [r4, #84]	; 0x54
 803de7a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 803de7e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 803de82:	81a3      	strheq	r3, [r4, #12]
 803de84:	bf18      	it	ne
 803de86:	81a3      	strhne	r3, [r4, #12]
 803de88:	bd10      	pop	{r4, pc}

0803de8a <__sclose>:
 803de8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 803de8e:	f000 b813 	b.w	803deb8 <_close_r>
	...

0803de94 <_write_r>:
 803de94:	b538      	push	{r3, r4, r5, lr}
 803de96:	4d07      	ldr	r5, [pc, #28]	; (803deb4 <_write_r+0x20>)
 803de98:	4604      	mov	r4, r0
 803de9a:	4608      	mov	r0, r1
 803de9c:	4611      	mov	r1, r2
 803de9e:	2200      	movs	r2, #0
 803dea0:	602a      	str	r2, [r5, #0]
 803dea2:	461a      	mov	r2, r3
 803dea4:	f7ed faf3 	bl	802b48e <_write>
 803dea8:	1c43      	adds	r3, r0, #1
 803deaa:	d102      	bne.n	803deb2 <_write_r+0x1e>
 803deac:	682b      	ldr	r3, [r5, #0]
 803deae:	b103      	cbz	r3, 803deb2 <_write_r+0x1e>
 803deb0:	6023      	str	r3, [r4, #0]
 803deb2:	bd38      	pop	{r3, r4, r5, pc}
 803deb4:	24003764 	.word	0x24003764

0803deb8 <_close_r>:
 803deb8:	b538      	push	{r3, r4, r5, lr}
 803deba:	4d06      	ldr	r5, [pc, #24]	; (803ded4 <_close_r+0x1c>)
 803debc:	2300      	movs	r3, #0
 803debe:	4604      	mov	r4, r0
 803dec0:	4608      	mov	r0, r1
 803dec2:	602b      	str	r3, [r5, #0]
 803dec4:	f7ed faff 	bl	802b4c6 <_close>
 803dec8:	1c43      	adds	r3, r0, #1
 803deca:	d102      	bne.n	803ded2 <_close_r+0x1a>
 803decc:	682b      	ldr	r3, [r5, #0]
 803dece:	b103      	cbz	r3, 803ded2 <_close_r+0x1a>
 803ded0:	6023      	str	r3, [r4, #0]
 803ded2:	bd38      	pop	{r3, r4, r5, pc}
 803ded4:	24003764 	.word	0x24003764

0803ded8 <_fstat_r>:
 803ded8:	b538      	push	{r3, r4, r5, lr}
 803deda:	4d07      	ldr	r5, [pc, #28]	; (803def8 <_fstat_r+0x20>)
 803dedc:	2300      	movs	r3, #0
 803dede:	4604      	mov	r4, r0
 803dee0:	4608      	mov	r0, r1
 803dee2:	4611      	mov	r1, r2
 803dee4:	602b      	str	r3, [r5, #0]
 803dee6:	f7ed fafa 	bl	802b4de <_fstat>
 803deea:	1c43      	adds	r3, r0, #1
 803deec:	d102      	bne.n	803def4 <_fstat_r+0x1c>
 803deee:	682b      	ldr	r3, [r5, #0]
 803def0:	b103      	cbz	r3, 803def4 <_fstat_r+0x1c>
 803def2:	6023      	str	r3, [r4, #0]
 803def4:	bd38      	pop	{r3, r4, r5, pc}
 803def6:	bf00      	nop
 803def8:	24003764 	.word	0x24003764

0803defc <_isatty_r>:
 803defc:	b538      	push	{r3, r4, r5, lr}
 803defe:	4d06      	ldr	r5, [pc, #24]	; (803df18 <_isatty_r+0x1c>)
 803df00:	2300      	movs	r3, #0
 803df02:	4604      	mov	r4, r0
 803df04:	4608      	mov	r0, r1
 803df06:	602b      	str	r3, [r5, #0]
 803df08:	f7ed faf9 	bl	802b4fe <_isatty>
 803df0c:	1c43      	adds	r3, r0, #1
 803df0e:	d102      	bne.n	803df16 <_isatty_r+0x1a>
 803df10:	682b      	ldr	r3, [r5, #0]
 803df12:	b103      	cbz	r3, 803df16 <_isatty_r+0x1a>
 803df14:	6023      	str	r3, [r4, #0]
 803df16:	bd38      	pop	{r3, r4, r5, pc}
 803df18:	24003764 	.word	0x24003764

0803df1c <_lseek_r>:
 803df1c:	b538      	push	{r3, r4, r5, lr}
 803df1e:	4d07      	ldr	r5, [pc, #28]	; (803df3c <_lseek_r+0x20>)
 803df20:	4604      	mov	r4, r0
 803df22:	4608      	mov	r0, r1
 803df24:	4611      	mov	r1, r2
 803df26:	2200      	movs	r2, #0
 803df28:	602a      	str	r2, [r5, #0]
 803df2a:	461a      	mov	r2, r3
 803df2c:	f7ed faf2 	bl	802b514 <_lseek>
 803df30:	1c43      	adds	r3, r0, #1
 803df32:	d102      	bne.n	803df3a <_lseek_r+0x1e>
 803df34:	682b      	ldr	r3, [r5, #0]
 803df36:	b103      	cbz	r3, 803df3a <_lseek_r+0x1e>
 803df38:	6023      	str	r3, [r4, #0]
 803df3a:	bd38      	pop	{r3, r4, r5, pc}
 803df3c:	24003764 	.word	0x24003764

0803df40 <_read_r>:
 803df40:	b538      	push	{r3, r4, r5, lr}
 803df42:	4d07      	ldr	r5, [pc, #28]	; (803df60 <_read_r+0x20>)
 803df44:	4604      	mov	r4, r0
 803df46:	4608      	mov	r0, r1
 803df48:	4611      	mov	r1, r2
 803df4a:	2200      	movs	r2, #0
 803df4c:	602a      	str	r2, [r5, #0]
 803df4e:	461a      	mov	r2, r3
 803df50:	f7ed fa80 	bl	802b454 <_read>
 803df54:	1c43      	adds	r3, r0, #1
 803df56:	d102      	bne.n	803df5e <_read_r+0x1e>
 803df58:	682b      	ldr	r3, [r5, #0]
 803df5a:	b103      	cbz	r3, 803df5e <_read_r+0x1e>
 803df5c:	6023      	str	r3, [r4, #0]
 803df5e:	bd38      	pop	{r3, r4, r5, pc}
 803df60:	24003764 	.word	0x24003764

0803df64 <_init>:
 803df64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803df66:	bf00      	nop
 803df68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 803df6a:	bc08      	pop	{r3}
 803df6c:	469e      	mov	lr, r3
 803df6e:	4770      	bx	lr

0803df70 <_fini>:
 803df70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803df72:	bf00      	nop
 803df74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 803df76:	bc08      	pop	{r3}
 803df78:	469e      	mov	lr, r3
 803df7a:	4770      	bx	lr
