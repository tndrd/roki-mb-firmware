
roki-mb-firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08020000  08020000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001cacc  080202a0  080202a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001b7f0  0803cd6c  0803cd6c  0002cd6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0805855c  0805855c  0004855c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08058564  08058564  00048564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  0805856c  0805856c  0004856c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000168  24000000  08058574  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00026680  24000168  080586dc  00050168  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  240267e8  080586dc  000567e8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00050168  2**0
                  CONTENTS, READONLY
 10 .debug_info   0004c175  00000000  00000000  00050196  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000076d6  00000000  00000000  0009c30b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000030f0  00000000  00000000  000a39e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002e70  00000000  00000000  000a6ad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00045507  00000000  00000000  000a9948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00039956  00000000  00000000  000eee4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00189bb4  00000000  00000000  001287a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  002b2359  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000deec  00000000  00000000  002b23ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080202a0 <__do_global_dtors_aux>:
 80202a0:	b510      	push	{r4, lr}
 80202a2:	4c05      	ldr	r4, [pc, #20]	; (80202b8 <__do_global_dtors_aux+0x18>)
 80202a4:	7823      	ldrb	r3, [r4, #0]
 80202a6:	b933      	cbnz	r3, 80202b6 <__do_global_dtors_aux+0x16>
 80202a8:	4b04      	ldr	r3, [pc, #16]	; (80202bc <__do_global_dtors_aux+0x1c>)
 80202aa:	b113      	cbz	r3, 80202b2 <__do_global_dtors_aux+0x12>
 80202ac:	4804      	ldr	r0, [pc, #16]	; (80202c0 <__do_global_dtors_aux+0x20>)
 80202ae:	f3af 8000 	nop.w
 80202b2:	2301      	movs	r3, #1
 80202b4:	7023      	strb	r3, [r4, #0]
 80202b6:	bd10      	pop	{r4, pc}
 80202b8:	24000168 	.word	0x24000168
 80202bc:	00000000 	.word	0x00000000
 80202c0:	0803cd54 	.word	0x0803cd54

080202c4 <frame_dummy>:
 80202c4:	b508      	push	{r3, lr}
 80202c6:	4b03      	ldr	r3, [pc, #12]	; (80202d4 <frame_dummy+0x10>)
 80202c8:	b11b      	cbz	r3, 80202d2 <frame_dummy+0xe>
 80202ca:	4903      	ldr	r1, [pc, #12]	; (80202d8 <frame_dummy+0x14>)
 80202cc:	4803      	ldr	r0, [pc, #12]	; (80202dc <frame_dummy+0x18>)
 80202ce:	f3af 8000 	nop.w
 80202d2:	bd08      	pop	{r3, pc}
 80202d4:	00000000 	.word	0x00000000
 80202d8:	2400016c 	.word	0x2400016c
 80202dc:	0803cd54 	.word	0x0803cd54

080202e0 <memchr>:
 80202e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80202e4:	2a10      	cmp	r2, #16
 80202e6:	db2b      	blt.n	8020340 <memchr+0x60>
 80202e8:	f010 0f07 	tst.w	r0, #7
 80202ec:	d008      	beq.n	8020300 <memchr+0x20>
 80202ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80202f2:	3a01      	subs	r2, #1
 80202f4:	428b      	cmp	r3, r1
 80202f6:	d02d      	beq.n	8020354 <memchr+0x74>
 80202f8:	f010 0f07 	tst.w	r0, #7
 80202fc:	b342      	cbz	r2, 8020350 <memchr+0x70>
 80202fe:	d1f6      	bne.n	80202ee <memchr+0xe>
 8020300:	b4f0      	push	{r4, r5, r6, r7}
 8020302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8020306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 802030a:	f022 0407 	bic.w	r4, r2, #7
 802030e:	f07f 0700 	mvns.w	r7, #0
 8020312:	2300      	movs	r3, #0
 8020314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8020318:	3c08      	subs	r4, #8
 802031a:	ea85 0501 	eor.w	r5, r5, r1
 802031e:	ea86 0601 	eor.w	r6, r6, r1
 8020322:	fa85 f547 	uadd8	r5, r5, r7
 8020326:	faa3 f587 	sel	r5, r3, r7
 802032a:	fa86 f647 	uadd8	r6, r6, r7
 802032e:	faa5 f687 	sel	r6, r5, r7
 8020332:	b98e      	cbnz	r6, 8020358 <memchr+0x78>
 8020334:	d1ee      	bne.n	8020314 <memchr+0x34>
 8020336:	bcf0      	pop	{r4, r5, r6, r7}
 8020338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 802033c:	f002 0207 	and.w	r2, r2, #7
 8020340:	b132      	cbz	r2, 8020350 <memchr+0x70>
 8020342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020346:	3a01      	subs	r2, #1
 8020348:	ea83 0301 	eor.w	r3, r3, r1
 802034c:	b113      	cbz	r3, 8020354 <memchr+0x74>
 802034e:	d1f8      	bne.n	8020342 <memchr+0x62>
 8020350:	2000      	movs	r0, #0
 8020352:	4770      	bx	lr
 8020354:	3801      	subs	r0, #1
 8020356:	4770      	bx	lr
 8020358:	2d00      	cmp	r5, #0
 802035a:	bf06      	itte	eq
 802035c:	4635      	moveq	r5, r6
 802035e:	3803      	subeq	r0, #3
 8020360:	3807      	subne	r0, #7
 8020362:	f015 0f01 	tst.w	r5, #1
 8020366:	d107      	bne.n	8020378 <memchr+0x98>
 8020368:	3001      	adds	r0, #1
 802036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 802036e:	bf02      	ittt	eq
 8020370:	3001      	addeq	r0, #1
 8020372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8020376:	3001      	addeq	r0, #1
 8020378:	bcf0      	pop	{r4, r5, r6, r7}
 802037a:	3801      	subs	r0, #1
 802037c:	4770      	bx	lr
 802037e:	bf00      	nop

08020380 <__aeabi_uldivmod>:
 8020380:	b953      	cbnz	r3, 8020398 <__aeabi_uldivmod+0x18>
 8020382:	b94a      	cbnz	r2, 8020398 <__aeabi_uldivmod+0x18>
 8020384:	2900      	cmp	r1, #0
 8020386:	bf08      	it	eq
 8020388:	2800      	cmpeq	r0, #0
 802038a:	bf1c      	itt	ne
 802038c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8020390:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8020394:	f000 b974 	b.w	8020680 <__aeabi_idiv0>
 8020398:	f1ad 0c08 	sub.w	ip, sp, #8
 802039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80203a0:	f000 f806 	bl	80203b0 <__udivmoddi4>
 80203a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80203a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80203ac:	b004      	add	sp, #16
 80203ae:	4770      	bx	lr

080203b0 <__udivmoddi4>:
 80203b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80203b4:	9d08      	ldr	r5, [sp, #32]
 80203b6:	4604      	mov	r4, r0
 80203b8:	468e      	mov	lr, r1
 80203ba:	2b00      	cmp	r3, #0
 80203bc:	d14d      	bne.n	802045a <__udivmoddi4+0xaa>
 80203be:	428a      	cmp	r2, r1
 80203c0:	4694      	mov	ip, r2
 80203c2:	d969      	bls.n	8020498 <__udivmoddi4+0xe8>
 80203c4:	fab2 f282 	clz	r2, r2
 80203c8:	b152      	cbz	r2, 80203e0 <__udivmoddi4+0x30>
 80203ca:	fa01 f302 	lsl.w	r3, r1, r2
 80203ce:	f1c2 0120 	rsb	r1, r2, #32
 80203d2:	fa20 f101 	lsr.w	r1, r0, r1
 80203d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80203da:	ea41 0e03 	orr.w	lr, r1, r3
 80203de:	4094      	lsls	r4, r2
 80203e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80203e4:	0c21      	lsrs	r1, r4, #16
 80203e6:	fbbe f6f8 	udiv	r6, lr, r8
 80203ea:	fa1f f78c 	uxth.w	r7, ip
 80203ee:	fb08 e316 	mls	r3, r8, r6, lr
 80203f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80203f6:	fb06 f107 	mul.w	r1, r6, r7
 80203fa:	4299      	cmp	r1, r3
 80203fc:	d90a      	bls.n	8020414 <__udivmoddi4+0x64>
 80203fe:	eb1c 0303 	adds.w	r3, ip, r3
 8020402:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8020406:	f080 811f 	bcs.w	8020648 <__udivmoddi4+0x298>
 802040a:	4299      	cmp	r1, r3
 802040c:	f240 811c 	bls.w	8020648 <__udivmoddi4+0x298>
 8020410:	3e02      	subs	r6, #2
 8020412:	4463      	add	r3, ip
 8020414:	1a5b      	subs	r3, r3, r1
 8020416:	b2a4      	uxth	r4, r4
 8020418:	fbb3 f0f8 	udiv	r0, r3, r8
 802041c:	fb08 3310 	mls	r3, r8, r0, r3
 8020420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8020424:	fb00 f707 	mul.w	r7, r0, r7
 8020428:	42a7      	cmp	r7, r4
 802042a:	d90a      	bls.n	8020442 <__udivmoddi4+0x92>
 802042c:	eb1c 0404 	adds.w	r4, ip, r4
 8020430:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8020434:	f080 810a 	bcs.w	802064c <__udivmoddi4+0x29c>
 8020438:	42a7      	cmp	r7, r4
 802043a:	f240 8107 	bls.w	802064c <__udivmoddi4+0x29c>
 802043e:	4464      	add	r4, ip
 8020440:	3802      	subs	r0, #2
 8020442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8020446:	1be4      	subs	r4, r4, r7
 8020448:	2600      	movs	r6, #0
 802044a:	b11d      	cbz	r5, 8020454 <__udivmoddi4+0xa4>
 802044c:	40d4      	lsrs	r4, r2
 802044e:	2300      	movs	r3, #0
 8020450:	e9c5 4300 	strd	r4, r3, [r5]
 8020454:	4631      	mov	r1, r6
 8020456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802045a:	428b      	cmp	r3, r1
 802045c:	d909      	bls.n	8020472 <__udivmoddi4+0xc2>
 802045e:	2d00      	cmp	r5, #0
 8020460:	f000 80ef 	beq.w	8020642 <__udivmoddi4+0x292>
 8020464:	2600      	movs	r6, #0
 8020466:	e9c5 0100 	strd	r0, r1, [r5]
 802046a:	4630      	mov	r0, r6
 802046c:	4631      	mov	r1, r6
 802046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020472:	fab3 f683 	clz	r6, r3
 8020476:	2e00      	cmp	r6, #0
 8020478:	d14a      	bne.n	8020510 <__udivmoddi4+0x160>
 802047a:	428b      	cmp	r3, r1
 802047c:	d302      	bcc.n	8020484 <__udivmoddi4+0xd4>
 802047e:	4282      	cmp	r2, r0
 8020480:	f200 80f9 	bhi.w	8020676 <__udivmoddi4+0x2c6>
 8020484:	1a84      	subs	r4, r0, r2
 8020486:	eb61 0303 	sbc.w	r3, r1, r3
 802048a:	2001      	movs	r0, #1
 802048c:	469e      	mov	lr, r3
 802048e:	2d00      	cmp	r5, #0
 8020490:	d0e0      	beq.n	8020454 <__udivmoddi4+0xa4>
 8020492:	e9c5 4e00 	strd	r4, lr, [r5]
 8020496:	e7dd      	b.n	8020454 <__udivmoddi4+0xa4>
 8020498:	b902      	cbnz	r2, 802049c <__udivmoddi4+0xec>
 802049a:	deff      	udf	#255	; 0xff
 802049c:	fab2 f282 	clz	r2, r2
 80204a0:	2a00      	cmp	r2, #0
 80204a2:	f040 8092 	bne.w	80205ca <__udivmoddi4+0x21a>
 80204a6:	eba1 010c 	sub.w	r1, r1, ip
 80204aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80204ae:	fa1f fe8c 	uxth.w	lr, ip
 80204b2:	2601      	movs	r6, #1
 80204b4:	0c20      	lsrs	r0, r4, #16
 80204b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80204ba:	fb07 1113 	mls	r1, r7, r3, r1
 80204be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80204c2:	fb0e f003 	mul.w	r0, lr, r3
 80204c6:	4288      	cmp	r0, r1
 80204c8:	d908      	bls.n	80204dc <__udivmoddi4+0x12c>
 80204ca:	eb1c 0101 	adds.w	r1, ip, r1
 80204ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80204d2:	d202      	bcs.n	80204da <__udivmoddi4+0x12a>
 80204d4:	4288      	cmp	r0, r1
 80204d6:	f200 80cb 	bhi.w	8020670 <__udivmoddi4+0x2c0>
 80204da:	4643      	mov	r3, r8
 80204dc:	1a09      	subs	r1, r1, r0
 80204de:	b2a4      	uxth	r4, r4
 80204e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80204e4:	fb07 1110 	mls	r1, r7, r0, r1
 80204e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80204ec:	fb0e fe00 	mul.w	lr, lr, r0
 80204f0:	45a6      	cmp	lr, r4
 80204f2:	d908      	bls.n	8020506 <__udivmoddi4+0x156>
 80204f4:	eb1c 0404 	adds.w	r4, ip, r4
 80204f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80204fc:	d202      	bcs.n	8020504 <__udivmoddi4+0x154>
 80204fe:	45a6      	cmp	lr, r4
 8020500:	f200 80bb 	bhi.w	802067a <__udivmoddi4+0x2ca>
 8020504:	4608      	mov	r0, r1
 8020506:	eba4 040e 	sub.w	r4, r4, lr
 802050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 802050e:	e79c      	b.n	802044a <__udivmoddi4+0x9a>
 8020510:	f1c6 0720 	rsb	r7, r6, #32
 8020514:	40b3      	lsls	r3, r6
 8020516:	fa22 fc07 	lsr.w	ip, r2, r7
 802051a:	ea4c 0c03 	orr.w	ip, ip, r3
 802051e:	fa20 f407 	lsr.w	r4, r0, r7
 8020522:	fa01 f306 	lsl.w	r3, r1, r6
 8020526:	431c      	orrs	r4, r3
 8020528:	40f9      	lsrs	r1, r7
 802052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 802052e:	fa00 f306 	lsl.w	r3, r0, r6
 8020532:	fbb1 f8f9 	udiv	r8, r1, r9
 8020536:	0c20      	lsrs	r0, r4, #16
 8020538:	fa1f fe8c 	uxth.w	lr, ip
 802053c:	fb09 1118 	mls	r1, r9, r8, r1
 8020540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8020544:	fb08 f00e 	mul.w	r0, r8, lr
 8020548:	4288      	cmp	r0, r1
 802054a:	fa02 f206 	lsl.w	r2, r2, r6
 802054e:	d90b      	bls.n	8020568 <__udivmoddi4+0x1b8>
 8020550:	eb1c 0101 	adds.w	r1, ip, r1
 8020554:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8020558:	f080 8088 	bcs.w	802066c <__udivmoddi4+0x2bc>
 802055c:	4288      	cmp	r0, r1
 802055e:	f240 8085 	bls.w	802066c <__udivmoddi4+0x2bc>
 8020562:	f1a8 0802 	sub.w	r8, r8, #2
 8020566:	4461      	add	r1, ip
 8020568:	1a09      	subs	r1, r1, r0
 802056a:	b2a4      	uxth	r4, r4
 802056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8020570:	fb09 1110 	mls	r1, r9, r0, r1
 8020574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8020578:	fb00 fe0e 	mul.w	lr, r0, lr
 802057c:	458e      	cmp	lr, r1
 802057e:	d908      	bls.n	8020592 <__udivmoddi4+0x1e2>
 8020580:	eb1c 0101 	adds.w	r1, ip, r1
 8020584:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8020588:	d26c      	bcs.n	8020664 <__udivmoddi4+0x2b4>
 802058a:	458e      	cmp	lr, r1
 802058c:	d96a      	bls.n	8020664 <__udivmoddi4+0x2b4>
 802058e:	3802      	subs	r0, #2
 8020590:	4461      	add	r1, ip
 8020592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8020596:	fba0 9402 	umull	r9, r4, r0, r2
 802059a:	eba1 010e 	sub.w	r1, r1, lr
 802059e:	42a1      	cmp	r1, r4
 80205a0:	46c8      	mov	r8, r9
 80205a2:	46a6      	mov	lr, r4
 80205a4:	d356      	bcc.n	8020654 <__udivmoddi4+0x2a4>
 80205a6:	d053      	beq.n	8020650 <__udivmoddi4+0x2a0>
 80205a8:	b15d      	cbz	r5, 80205c2 <__udivmoddi4+0x212>
 80205aa:	ebb3 0208 	subs.w	r2, r3, r8
 80205ae:	eb61 010e 	sbc.w	r1, r1, lr
 80205b2:	fa01 f707 	lsl.w	r7, r1, r7
 80205b6:	fa22 f306 	lsr.w	r3, r2, r6
 80205ba:	40f1      	lsrs	r1, r6
 80205bc:	431f      	orrs	r7, r3
 80205be:	e9c5 7100 	strd	r7, r1, [r5]
 80205c2:	2600      	movs	r6, #0
 80205c4:	4631      	mov	r1, r6
 80205c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80205ca:	f1c2 0320 	rsb	r3, r2, #32
 80205ce:	40d8      	lsrs	r0, r3
 80205d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80205d4:	fa21 f303 	lsr.w	r3, r1, r3
 80205d8:	4091      	lsls	r1, r2
 80205da:	4301      	orrs	r1, r0
 80205dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80205e0:	fa1f fe8c 	uxth.w	lr, ip
 80205e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80205e8:	fb07 3610 	mls	r6, r7, r0, r3
 80205ec:	0c0b      	lsrs	r3, r1, #16
 80205ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80205f2:	fb00 f60e 	mul.w	r6, r0, lr
 80205f6:	429e      	cmp	r6, r3
 80205f8:	fa04 f402 	lsl.w	r4, r4, r2
 80205fc:	d908      	bls.n	8020610 <__udivmoddi4+0x260>
 80205fe:	eb1c 0303 	adds.w	r3, ip, r3
 8020602:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8020606:	d22f      	bcs.n	8020668 <__udivmoddi4+0x2b8>
 8020608:	429e      	cmp	r6, r3
 802060a:	d92d      	bls.n	8020668 <__udivmoddi4+0x2b8>
 802060c:	3802      	subs	r0, #2
 802060e:	4463      	add	r3, ip
 8020610:	1b9b      	subs	r3, r3, r6
 8020612:	b289      	uxth	r1, r1
 8020614:	fbb3 f6f7 	udiv	r6, r3, r7
 8020618:	fb07 3316 	mls	r3, r7, r6, r3
 802061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8020620:	fb06 f30e 	mul.w	r3, r6, lr
 8020624:	428b      	cmp	r3, r1
 8020626:	d908      	bls.n	802063a <__udivmoddi4+0x28a>
 8020628:	eb1c 0101 	adds.w	r1, ip, r1
 802062c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8020630:	d216      	bcs.n	8020660 <__udivmoddi4+0x2b0>
 8020632:	428b      	cmp	r3, r1
 8020634:	d914      	bls.n	8020660 <__udivmoddi4+0x2b0>
 8020636:	3e02      	subs	r6, #2
 8020638:	4461      	add	r1, ip
 802063a:	1ac9      	subs	r1, r1, r3
 802063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8020640:	e738      	b.n	80204b4 <__udivmoddi4+0x104>
 8020642:	462e      	mov	r6, r5
 8020644:	4628      	mov	r0, r5
 8020646:	e705      	b.n	8020454 <__udivmoddi4+0xa4>
 8020648:	4606      	mov	r6, r0
 802064a:	e6e3      	b.n	8020414 <__udivmoddi4+0x64>
 802064c:	4618      	mov	r0, r3
 802064e:	e6f8      	b.n	8020442 <__udivmoddi4+0x92>
 8020650:	454b      	cmp	r3, r9
 8020652:	d2a9      	bcs.n	80205a8 <__udivmoddi4+0x1f8>
 8020654:	ebb9 0802 	subs.w	r8, r9, r2
 8020658:	eb64 0e0c 	sbc.w	lr, r4, ip
 802065c:	3801      	subs	r0, #1
 802065e:	e7a3      	b.n	80205a8 <__udivmoddi4+0x1f8>
 8020660:	4646      	mov	r6, r8
 8020662:	e7ea      	b.n	802063a <__udivmoddi4+0x28a>
 8020664:	4620      	mov	r0, r4
 8020666:	e794      	b.n	8020592 <__udivmoddi4+0x1e2>
 8020668:	4640      	mov	r0, r8
 802066a:	e7d1      	b.n	8020610 <__udivmoddi4+0x260>
 802066c:	46d0      	mov	r8, sl
 802066e:	e77b      	b.n	8020568 <__udivmoddi4+0x1b8>
 8020670:	3b02      	subs	r3, #2
 8020672:	4461      	add	r1, ip
 8020674:	e732      	b.n	80204dc <__udivmoddi4+0x12c>
 8020676:	4630      	mov	r0, r6
 8020678:	e709      	b.n	802048e <__udivmoddi4+0xde>
 802067a:	4464      	add	r4, ip
 802067c:	3802      	subs	r0, #2
 802067e:	e742      	b.n	8020506 <__udivmoddi4+0x156>

08020680 <__aeabi_idiv0>:
 8020680:	4770      	bx	lr
 8020682:	bf00      	nop

08020684 <_ZN10BHYWrapperC1EP19__SPI_HandleTypeDef>:
 *      Author: tndrd
 */

#include "BHYWrapper.hpp"

BHYWrapper::BHYWrapper(SPI_HandleTypeDef *spiHandle) :
 8020684:	b580      	push	{r7, lr}
 8020686:	b082      	sub	sp, #8
 8020688:	af00      	add	r7, sp, #0
 802068a:	6078      	str	r0, [r7, #4]
 802068c:	6039      	str	r1, [r7, #0]
		SPIHandle { spiHandle } {
 802068e:	687b      	ldr	r3, [r7, #4]
 8020690:	683a      	ldr	r2, [r7, #0]
 8020692:	f8c3 2938 	str.w	r2, [r3, #2360]	; 0x938
 8020696:	687b      	ldr	r3, [r7, #4]
 8020698:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802069c:	461a      	mov	r2, r3
 802069e:	2300      	movs	r3, #0
 80206a0:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
	assert(spiHandle);
 80206a4:	683b      	ldr	r3, [r7, #0]
 80206a6:	2b00      	cmp	r3, #0
 80206a8:	d105      	bne.n	80206b6 <_ZN10BHYWrapperC1EP19__SPI_HandleTypeDef+0x32>
 80206aa:	4b05      	ldr	r3, [pc, #20]	; (80206c0 <_ZN10BHYWrapperC1EP19__SPI_HandleTypeDef+0x3c>)
 80206ac:	4a05      	ldr	r2, [pc, #20]	; (80206c4 <_ZN10BHYWrapperC1EP19__SPI_HandleTypeDef+0x40>)
 80206ae:	210c      	movs	r1, #12
 80206b0:	4805      	ldr	r0, [pc, #20]	; (80206c8 <_ZN10BHYWrapperC1EP19__SPI_HandleTypeDef+0x44>)
 80206b2:	f01b fafb 	bl	803bcac <__assert_func>
}
 80206b6:	687b      	ldr	r3, [r7, #4]
 80206b8:	4618      	mov	r0, r3
 80206ba:	3708      	adds	r7, #8
 80206bc:	46bd      	mov	sp, r7
 80206be:	bd80      	pop	{r7, pc}
 80206c0:	0803cd6c 	.word	0x0803cd6c
 80206c4:	0803cd78 	.word	0x0803cd78
 80206c8:	0803cda4 	.word	0x0803cda4

080206cc <_ZN10BHYWrapper4InitEfm>:

int BHYWrapper::Init(float sampleRate, uint32_t reportLatency) {
 80206cc:	b590      	push	{r4, r7, lr}
 80206ce:	b08b      	sub	sp, #44	; 0x2c
 80206d0:	af04      	add	r7, sp, #16
 80206d2:	60f8      	str	r0, [r7, #12]
 80206d4:	ed87 0a02 	vstr	s0, [r7, #8]
 80206d8:	6079      	str	r1, [r7, #4]
	uint8_t product_id = 0;
 80206da:	2300      	movs	r3, #0
 80206dc:	75bb      	strb	r3, [r7, #22]
	uint16_t bhy2KernelVersion;

	uint8_t hintr_ctrl = BHY2_ICTL_DISABLE_STATUS_FIFO | BHY2_ICTL_DISABLE_DEBUG;
 80206de:	230c      	movs	r3, #12
 80206e0:	74fb      	strb	r3, [r7, #19]

	uint8_t hif_ctrl = 0;
 80206e2:	2300      	movs	r3, #0
 80206e4:	75fb      	strb	r3, [r7, #23]
	uint8_t boot_status;
	uint8_t sensor_error;

	spi_init(SPIHandle);
 80206e6:	68fb      	ldr	r3, [r7, #12]
 80206e8:	f8d3 3938 	ldr.w	r3, [r3, #2360]	; 0x938
 80206ec:	4618      	mov	r0, r3
 80206ee:	f000 fac5 	bl	8020c7c <_Z8spi_initP19__SPI_HandleTypeDef>

	if (bhy2_init(BHY2_SPI_INTERFACE, bhy2_spi_read, bhy2_spi_write,
 80206f2:	68fb      	ldr	r3, [r7, #12]
 80206f4:	9302      	str	r3, [sp, #8]
 80206f6:	2300      	movs	r3, #0
 80206f8:	9301      	str	r3, [sp, #4]
 80206fa:	2340      	movs	r3, #64	; 0x40
 80206fc:	9300      	str	r3, [sp, #0]
 80206fe:	4b99      	ldr	r3, [pc, #612]	; (8020964 <_ZN10BHYWrapper4InitEfm+0x298>)
 8020700:	4a99      	ldr	r2, [pc, #612]	; (8020968 <_ZN10BHYWrapper4InitEfm+0x29c>)
 8020702:	499a      	ldr	r1, [pc, #616]	; (802096c <_ZN10BHYWrapper4InitEfm+0x2a0>)
 8020704:	2001      	movs	r0, #1
 8020706:	f007 fa98 	bl	8027c3a <bhy2_init>
 802070a:	4603      	mov	r3, r0
 802070c:	2b00      	cmp	r3, #0
 802070e:	bf14      	ite	ne
 8020710:	2301      	movne	r3, #1
 8020712:	2300      	moveq	r3, #0
 8020714:	b2db      	uxtb	r3, r3
 8020716:	2b00      	cmp	r3, #0
 8020718:	d001      	beq.n	802071e <_ZN10BHYWrapper4InitEfm+0x52>
			bhy2_delay_us, 64, NULL, &bhy2))
		return 1;
 802071a:	2301      	movs	r3, #1
 802071c:	e11d      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_soft_reset(&bhy2))
 802071e:	68fb      	ldr	r3, [r7, #12]
 8020720:	4618      	mov	r0, r3
 8020722:	f007 fa72 	bl	8027c0a <bhy2_soft_reset>
 8020726:	4603      	mov	r3, r0
 8020728:	2b00      	cmp	r3, #0
 802072a:	bf14      	ite	ne
 802072c:	2301      	movne	r3, #1
 802072e:	2300      	moveq	r3, #0
 8020730:	b2db      	uxtb	r3, r3
 8020732:	2b00      	cmp	r3, #0
 8020734:	d001      	beq.n	802073a <_ZN10BHYWrapper4InitEfm+0x6e>
		return 2;
 8020736:	2302      	movs	r3, #2
 8020738:	e10f      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_product_id(&product_id, &bhy2))
 802073a:	68fa      	ldr	r2, [r7, #12]
 802073c:	f107 0316 	add.w	r3, r7, #22
 8020740:	4611      	mov	r1, r2
 8020742:	4618      	mov	r0, r3
 8020744:	f007 f94d 	bl	80279e2 <bhy2_get_product_id>
 8020748:	4603      	mov	r3, r0
 802074a:	2b00      	cmp	r3, #0
 802074c:	bf14      	ite	ne
 802074e:	2301      	movne	r3, #1
 8020750:	2300      	moveq	r3, #0
 8020752:	b2db      	uxtb	r3, r3
 8020754:	2b00      	cmp	r3, #0
 8020756:	d001      	beq.n	802075c <_ZN10BHYWrapper4InitEfm+0x90>
		return 3;
 8020758:	2303      	movs	r3, #3
 802075a:	e0fe      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (product_id != BHY2_PRODUCT_ID)
 802075c:	7dbb      	ldrb	r3, [r7, #22]
 802075e:	2b89      	cmp	r3, #137	; 0x89
 8020760:	d001      	beq.n	8020766 <_ZN10BHYWrapper4InitEfm+0x9a>
		return 4;
 8020762:	2304      	movs	r3, #4
 8020764:	e0f9      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_set_host_interrupt_ctrl(hintr_ctrl, &bhy2))
 8020766:	7cfb      	ldrb	r3, [r7, #19]
 8020768:	68fa      	ldr	r2, [r7, #12]
 802076a:	4611      	mov	r1, r2
 802076c:	4618      	mov	r0, r3
 802076e:	f007 f9df 	bl	8027b30 <bhy2_set_host_interrupt_ctrl>
 8020772:	4603      	mov	r3, r0
 8020774:	2b00      	cmp	r3, #0
 8020776:	bf14      	ite	ne
 8020778:	2301      	movne	r3, #1
 802077a:	2300      	moveq	r3, #0
 802077c:	b2db      	uxtb	r3, r3
 802077e:	2b00      	cmp	r3, #0
 8020780:	d001      	beq.n	8020786 <_ZN10BHYWrapper4InitEfm+0xba>
		return 5;
 8020782:	2305      	movs	r3, #5
 8020784:	e0e9      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_host_interrupt_ctrl(&hintr_ctrl, &bhy2))
 8020786:	68fa      	ldr	r2, [r7, #12]
 8020788:	f107 0313 	add.w	r3, r7, #19
 802078c:	4611      	mov	r1, r2
 802078e:	4618      	mov	r0, r3
 8020790:	f007 f9ea 	bl	8027b68 <bhy2_get_host_interrupt_ctrl>
 8020794:	4603      	mov	r3, r0
 8020796:	2b00      	cmp	r3, #0
 8020798:	bf14      	ite	ne
 802079a:	2301      	movne	r3, #1
 802079c:	2300      	moveq	r3, #0
 802079e:	b2db      	uxtb	r3, r3
 80207a0:	2b00      	cmp	r3, #0
 80207a2:	d001      	beq.n	80207a8 <_ZN10BHYWrapper4InitEfm+0xdc>
		return 6;
 80207a4:	2306      	movs	r3, #6
 80207a6:	e0d8      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_set_host_intf_ctrl(hif_ctrl, &bhy2))
 80207a8:	68fa      	ldr	r2, [r7, #12]
 80207aa:	7dfb      	ldrb	r3, [r7, #23]
 80207ac:	4611      	mov	r1, r2
 80207ae:	4618      	mov	r0, r3
 80207b0:	f007 fa0f 	bl	8027bd2 <bhy2_set_host_intf_ctrl>
 80207b4:	4603      	mov	r3, r0
 80207b6:	2b00      	cmp	r3, #0
 80207b8:	bf14      	ite	ne
 80207ba:	2301      	movne	r3, #1
 80207bc:	2300      	moveq	r3, #0
 80207be:	b2db      	uxtb	r3, r3
 80207c0:	2b00      	cmp	r3, #0
 80207c2:	d001      	beq.n	80207c8 <_ZN10BHYWrapper4InitEfm+0xfc>
		return 7;
 80207c4:	2307      	movs	r3, #7
 80207c6:	e0c8      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_boot_status(&boot_status, &bhy2))
 80207c8:	68fa      	ldr	r2, [r7, #12]
 80207ca:	f107 0312 	add.w	r3, r7, #18
 80207ce:	4611      	mov	r1, r2
 80207d0:	4618      	mov	r0, r3
 80207d2:	f007 f93a 	bl	8027a4a <bhy2_get_boot_status>
 80207d6:	4603      	mov	r3, r0
 80207d8:	2b00      	cmp	r3, #0
 80207da:	bf14      	ite	ne
 80207dc:	2301      	movne	r3, #1
 80207de:	2300      	moveq	r3, #0
 80207e0:	b2db      	uxtb	r3, r3
 80207e2:	2b00      	cmp	r3, #0
 80207e4:	d001      	beq.n	80207ea <_ZN10BHYWrapper4InitEfm+0x11e>
		return 8;
 80207e6:	2308      	movs	r3, #8
 80207e8:	e0b7      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (!(boot_status & BHY2_BST_HOST_INTERFACE_READY))
 80207ea:	7cbb      	ldrb	r3, [r7, #18]
 80207ec:	f003 0310 	and.w	r3, r3, #16
 80207f0:	2b00      	cmp	r3, #0
 80207f2:	d101      	bne.n	80207f8 <_ZN10BHYWrapper4InitEfm+0x12c>
		return 9;
 80207f4:	2309      	movs	r3, #9
 80207f6:	e0b0      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_upload_firmware_to_ram(bhy2_firmware_image,
 80207f8:	68fb      	ldr	r3, [r7, #12]
 80207fa:	461a      	mov	r2, r3
 80207fc:	495c      	ldr	r1, [pc, #368]	; (8020970 <_ZN10BHYWrapper4InitEfm+0x2a4>)
 80207fe:	485d      	ldr	r0, [pc, #372]	; (8020974 <_ZN10BHYWrapper4InitEfm+0x2a8>)
 8020800:	f007 f95f 	bl	8027ac2 <bhy2_upload_firmware_to_ram>
 8020804:	4603      	mov	r3, r0
 8020806:	2b00      	cmp	r3, #0
 8020808:	bf14      	ite	ne
 802080a:	2301      	movne	r3, #1
 802080c:	2300      	moveq	r3, #0
 802080e:	b2db      	uxtb	r3, r3
 8020810:	2b00      	cmp	r3, #0
 8020812:	d001      	beq.n	8020818 <_ZN10BHYWrapper4InitEfm+0x14c>
			sizeof(bhy2_firmware_image), &bhy2))
		return 9;
 8020814:	2309      	movs	r3, #9
 8020816:	e0a0      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_error_value(&sensor_error, &bhy2))
 8020818:	68fa      	ldr	r2, [r7, #12]
 802081a:	f107 0311 	add.w	r3, r7, #17
 802081e:	4611      	mov	r1, r2
 8020820:	4618      	mov	r0, r3
 8020822:	f007 faf1 	bl	8027e08 <bhy2_get_error_value>
 8020826:	4603      	mov	r3, r0
 8020828:	2b00      	cmp	r3, #0
 802082a:	bf14      	ite	ne
 802082c:	2301      	movne	r3, #1
 802082e:	2300      	moveq	r3, #0
 8020830:	b2db      	uxtb	r3, r3
 8020832:	2b00      	cmp	r3, #0
 8020834:	d001      	beq.n	802083a <_ZN10BHYWrapper4InitEfm+0x16e>
		return 10;
 8020836:	230a      	movs	r3, #10
 8020838:	e08f      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (sensor_error)
 802083a:	7c7b      	ldrb	r3, [r7, #17]
 802083c:	2b00      	cmp	r3, #0
 802083e:	d001      	beq.n	8020844 <_ZN10BHYWrapper4InitEfm+0x178>
		return 11;
 8020840:	230b      	movs	r3, #11
 8020842:	e08a      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_boot_from_ram(&bhy2))
 8020844:	68fb      	ldr	r3, [r7, #12]
 8020846:	4618      	mov	r0, r3
 8020848:	f007 f95a 	bl	8027b00 <bhy2_boot_from_ram>
 802084c:	4603      	mov	r3, r0
 802084e:	2b00      	cmp	r3, #0
 8020850:	bf14      	ite	ne
 8020852:	2301      	movne	r3, #1
 8020854:	2300      	moveq	r3, #0
 8020856:	b2db      	uxtb	r3, r3
 8020858:	2b00      	cmp	r3, #0
 802085a:	d001      	beq.n	8020860 <_ZN10BHYWrapper4InitEfm+0x194>
		return 12;
 802085c:	230c      	movs	r3, #12
 802085e:	e07c      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_error_value(&sensor_error, &bhy2))
 8020860:	68fa      	ldr	r2, [r7, #12]
 8020862:	f107 0311 	add.w	r3, r7, #17
 8020866:	4611      	mov	r1, r2
 8020868:	4618      	mov	r0, r3
 802086a:	f007 facd 	bl	8027e08 <bhy2_get_error_value>
 802086e:	4603      	mov	r3, r0
 8020870:	2b00      	cmp	r3, #0
 8020872:	bf14      	ite	ne
 8020874:	2301      	movne	r3, #1
 8020876:	2300      	moveq	r3, #0
 8020878:	b2db      	uxtb	r3, r3
 802087a:	2b00      	cmp	r3, #0
 802087c:	d001      	beq.n	8020882 <_ZN10BHYWrapper4InitEfm+0x1b6>
		return 13;
 802087e:	230d      	movs	r3, #13
 8020880:	e06b      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (sensor_error)
 8020882:	7c7b      	ldrb	r3, [r7, #17]
 8020884:	2b00      	cmp	r3, #0
 8020886:	d001      	beq.n	802088c <_ZN10BHYWrapper4InitEfm+0x1c0>
		return 14;
 8020888:	230e      	movs	r3, #14
 802088a:	e066      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_kernel_version(&bhy2KernelVersion, &bhy2))
 802088c:	68fa      	ldr	r2, [r7, #12]
 802088e:	f107 0314 	add.w	r3, r7, #20
 8020892:	4611      	mov	r1, r2
 8020894:	4618      	mov	r0, r3
 8020896:	f007 f8be 	bl	8027a16 <bhy2_get_kernel_version>
 802089a:	4603      	mov	r3, r0
 802089c:	2b00      	cmp	r3, #0
 802089e:	bf14      	ite	ne
 80208a0:	2301      	movne	r3, #1
 80208a2:	2300      	moveq	r3, #0
 80208a4:	b2db      	uxtb	r3, r3
 80208a6:	2b00      	cmp	r3, #0
 80208a8:	d001      	beq.n	80208ae <_ZN10BHYWrapper4InitEfm+0x1e2>
		return 15;
 80208aa:	230f      	movs	r3, #15
 80208ac:	e055      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2KernelVersion == 0)
 80208ae:	8abb      	ldrh	r3, [r7, #20]
 80208b0:	2b00      	cmp	r3, #0
 80208b2:	d101      	bne.n	80208b8 <_ZN10BHYWrapper4InitEfm+0x1ec>
		return 16;
 80208b4:	2310      	movs	r3, #16
 80208b6:	e050      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_register_fifo_parse_callback(BHY2_SENSOR_ID_GAMERV,
			BHYWrapper::ParseFrame, &CurrentFrame, &bhy2))
 80208b8:	68fb      	ldr	r3, [r7, #12]
 80208ba:	f241 123c 	movw	r2, #4412	; 0x113c
 80208be:	441a      	add	r2, r3
	if (bhy2_register_fifo_parse_callback(BHY2_SENSOR_ID_GAMERV,
 80208c0:	68fb      	ldr	r3, [r7, #12]
 80208c2:	492d      	ldr	r1, [pc, #180]	; (8020978 <_ZN10BHYWrapper4InitEfm+0x2ac>)
 80208c4:	2025      	movs	r0, #37	; 0x25
 80208c6:	f007 f9e2 	bl	8027c8e <bhy2_register_fifo_parse_callback>
 80208ca:	4603      	mov	r3, r0
 80208cc:	2b00      	cmp	r3, #0
 80208ce:	bf14      	ite	ne
 80208d0:	2301      	movne	r3, #1
 80208d2:	2300      	moveq	r3, #0
 80208d4:	b2db      	uxtb	r3, r3
 80208d6:	2b00      	cmp	r3, #0
 80208d8:	d001      	beq.n	80208de <_ZN10BHYWrapper4InitEfm+0x212>
		return 17;
 80208da:	2311      	movs	r3, #17
 80208dc:	e03d      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_and_process_fifo(WorkBuffer.data(), WorkBuffer.size(), &bhy2))
 80208de:	68fb      	ldr	r3, [r7, #12]
 80208e0:	f603 133c 	addw	r3, r3, #2364	; 0x93c
 80208e4:	4618      	mov	r0, r3
 80208e6:	f000 f9a4 	bl	8020c32 <_ZNSt5arrayIhLj2048EE4dataEv>
 80208ea:	4604      	mov	r4, r0
 80208ec:	68fb      	ldr	r3, [r7, #12]
 80208ee:	f603 133c 	addw	r3, r3, #2364	; 0x93c
 80208f2:	4618      	mov	r0, r3
 80208f4:	f000 f9aa 	bl	8020c4c <_ZNKSt5arrayIhLj2048EE4sizeEv>
 80208f8:	4601      	mov	r1, r0
 80208fa:	68fb      	ldr	r3, [r7, #12]
 80208fc:	461a      	mov	r2, r3
 80208fe:	4620      	mov	r0, r4
 8020900:	f006 ff1d 	bl	802773e <bhy2_get_and_process_fifo>
 8020904:	4603      	mov	r3, r0
 8020906:	2b00      	cmp	r3, #0
 8020908:	bf14      	ite	ne
 802090a:	2301      	movne	r3, #1
 802090c:	2300      	moveq	r3, #0
 802090e:	b2db      	uxtb	r3, r3
 8020910:	2b00      	cmp	r3, #0
 8020912:	d001      	beq.n	8020918 <_ZN10BHYWrapper4InitEfm+0x24c>
		return 18;
 8020914:	2312      	movs	r3, #18
 8020916:	e020      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_update_virtual_sensor_list(&bhy2))
 8020918:	68fb      	ldr	r3, [r7, #12]
 802091a:	4618      	mov	r0, r3
 802091c:	f007 f9e6 	bl	8027cec <bhy2_update_virtual_sensor_list>
 8020920:	4603      	mov	r3, r0
 8020922:	2b00      	cmp	r3, #0
 8020924:	bf14      	ite	ne
 8020926:	2301      	movne	r3, #1
 8020928:	2300      	moveq	r3, #0
 802092a:	b2db      	uxtb	r3, r3
 802092c:	2b00      	cmp	r3, #0
 802092e:	d001      	beq.n	8020934 <_ZN10BHYWrapper4InitEfm+0x268>
		return 16;
 8020930:	2310      	movs	r3, #16
 8020932:	e012      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_set_virt_sensor_cfg(BHY2_SENSOR_ID_GAMERV, sampleRate,
 8020934:	68fb      	ldr	r3, [r7, #12]
 8020936:	461a      	mov	r2, r3
 8020938:	6879      	ldr	r1, [r7, #4]
 802093a:	ed97 0a02 	vldr	s0, [r7, #8]
 802093e:	2025      	movs	r0, #37	; 0x25
 8020940:	f007 f82e 	bl	80279a0 <bhy2_set_virt_sensor_cfg>
 8020944:	4603      	mov	r3, r0
 8020946:	2b00      	cmp	r3, #0
 8020948:	bf14      	ite	ne
 802094a:	2301      	movne	r3, #1
 802094c:	2300      	moveq	r3, #0
 802094e:	b2db      	uxtb	r3, r3
 8020950:	2b00      	cmp	r3, #0
 8020952:	d001      	beq.n	8020958 <_ZN10BHYWrapper4InitEfm+0x28c>
			reportLatency, &bhy2))
		return 17;
 8020954:	2311      	movs	r3, #17
 8020956:	e000      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	return 0;
 8020958:	2300      	movs	r3, #0
}
 802095a:	4618      	mov	r0, r3
 802095c:	371c      	adds	r7, #28
 802095e:	46bd      	mov	sp, r7
 8020960:	bd90      	pop	{r4, r7, pc}
 8020962:	bf00      	nop
 8020964:	08020e4d 	.word	0x08020e4d
 8020968:	08020dc9 	.word	0x08020dc9
 802096c:	08020d4d 	.word	0x08020d4d
 8020970:	0001a66c 	.word	0x0001a66c
 8020974:	0803ddd0 	.word	0x0803ddd0
 8020978:	08020a31 	.word	0x08020a31

0802097c <_ZN10BHYWrapper4PollEv>:

bool BHYWrapper::Poll() {
 802097c:	b590      	push	{r4, r7, lr}
 802097e:	b085      	sub	sp, #20
 8020980:	af00      	add	r7, sp, #0
 8020982:	6078      	str	r0, [r7, #4]
	uint8_t interruptStatus = 0;
 8020984:	2300      	movs	r3, #0
 8020986:	73fb      	strb	r3, [r7, #15]
	bhy2_get_interrupt_status(&interruptStatus, &bhy2);
 8020988:	687a      	ldr	r2, [r7, #4]
 802098a:	f107 030f 	add.w	r3, r7, #15
 802098e:	4611      	mov	r1, r2
 8020990:	4618      	mov	r0, r3
 8020992:	f007 f904 	bl	8027b9e <bhy2_get_interrupt_status>

	if (interruptStatus) {
 8020996:	7bfb      	ldrb	r3, [r7, #15]
 8020998:	2b00      	cmp	r3, #0
 802099a:	d028      	beq.n	80209ee <_ZN10BHYWrapper4PollEv+0x72>
		assert(
 802099c:	687b      	ldr	r3, [r7, #4]
 802099e:	f603 133c 	addw	r3, r3, #2364	; 0x93c
 80209a2:	4618      	mov	r0, r3
 80209a4:	f000 f945 	bl	8020c32 <_ZNSt5arrayIhLj2048EE4dataEv>
 80209a8:	4604      	mov	r4, r0
 80209aa:	687b      	ldr	r3, [r7, #4]
 80209ac:	f603 133c 	addw	r3, r3, #2364	; 0x93c
 80209b0:	4618      	mov	r0, r3
 80209b2:	f000 f94b 	bl	8020c4c <_ZNKSt5arrayIhLj2048EE4sizeEv>
 80209b6:	4601      	mov	r1, r0
 80209b8:	687b      	ldr	r3, [r7, #4]
 80209ba:	461a      	mov	r2, r3
 80209bc:	4620      	mov	r0, r4
 80209be:	f006 febe 	bl	802773e <bhy2_get_and_process_fifo>
 80209c2:	4603      	mov	r3, r0
 80209c4:	2b00      	cmp	r3, #0
 80209c6:	d005      	beq.n	80209d4 <_ZN10BHYWrapper4PollEv+0x58>
 80209c8:	4b0b      	ldr	r3, [pc, #44]	; (80209f8 <_ZN10BHYWrapper4PollEv+0x7c>)
 80209ca:	4a0c      	ldr	r2, [pc, #48]	; (80209fc <_ZN10BHYWrapper4PollEv+0x80>)
 80209cc:	2166      	movs	r1, #102	; 0x66
 80209ce:	480c      	ldr	r0, [pc, #48]	; (8020a00 <_ZN10BHYWrapper4PollEv+0x84>)
 80209d0:	f01b f96c 	bl	803bcac <__assert_func>
				bhy2_get_and_process_fifo(WorkBuffer.data(), WorkBuffer.size(), &bhy2) == BHY2_OK);
		frameSeq++;
 80209d4:	687b      	ldr	r3, [r7, #4]
 80209d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80209da:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80209de:	3301      	adds	r3, #1
 80209e0:	687a      	ldr	r2, [r7, #4]
 80209e2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80209e6:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
		return true;
 80209ea:	2301      	movs	r3, #1
 80209ec:	e000      	b.n	80209f0 <_ZN10BHYWrapper4PollEv+0x74>
	}

	return false;
 80209ee:	2300      	movs	r3, #0
}
 80209f0:	4618      	mov	r0, r3
 80209f2:	3714      	adds	r7, #20
 80209f4:	46bd      	mov	sp, r7
 80209f6:	bd90      	pop	{r4, r7, pc}
 80209f8:	0803cdc0 	.word	0x0803cdc0
 80209fc:	0803ce14 	.word	0x0803ce14
 8020a00:	0803cda4 	.word	0x0803cda4

08020a04 <_ZNK10BHYWrapper8GetFrameEv>:

BHYWrapper::BHYFrame BHYWrapper::GetFrame() const {
 8020a04:	b4b0      	push	{r4, r5, r7}
 8020a06:	b083      	sub	sp, #12
 8020a08:	af00      	add	r7, sp, #0
 8020a0a:	6078      	str	r0, [r7, #4]
 8020a0c:	6039      	str	r1, [r7, #0]
	return CurrentFrame;
 8020a0e:	687a      	ldr	r2, [r7, #4]
 8020a10:	683b      	ldr	r3, [r7, #0]
 8020a12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8020a16:	4615      	mov	r5, r2
 8020a18:	f503 749e 	add.w	r4, r3, #316	; 0x13c
 8020a1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8020a1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8020a20:	6823      	ldr	r3, [r4, #0]
 8020a22:	602b      	str	r3, [r5, #0]
}
 8020a24:	6878      	ldr	r0, [r7, #4]
 8020a26:	370c      	adds	r7, #12
 8020a28:	46bd      	mov	sp, r7
 8020a2a:	bcb0      	pop	{r4, r5, r7}
 8020a2c:	4770      	bx	lr
	...

08020a30 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv>:

void BHYWrapper::ParseFrame(const bhy2_fifo_parse_data_info *cbInfo,
		void *cbRef) {
 8020a30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8020a34:	b08e      	sub	sp, #56	; 0x38
 8020a36:	af00      	add	r7, sp, #0
 8020a38:	60f8      	str	r0, [r7, #12]
 8020a3a:	60b9      	str	r1, [r7, #8]
	BHYFrame *frame = reinterpret_cast<BHYFrame*>(cbRef);
 8020a3c:	68bb      	ldr	r3, [r7, #8]
 8020a3e:	637b      	str	r3, [r7, #52]	; 0x34
	bhy2_data_quaternion qtData;

	assert(frame);
 8020a40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020a42:	2b00      	cmp	r3, #0
 8020a44:	d105      	bne.n	8020a52 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x22>
 8020a46:	4b40      	ldr	r3, [pc, #256]	; (8020b48 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x118>)
 8020a48:	4a40      	ldr	r2, [pc, #256]	; (8020b4c <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x11c>)
 8020a4a:	2178      	movs	r1, #120	; 0x78
 8020a4c:	4840      	ldr	r0, [pc, #256]	; (8020b50 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x120>)
 8020a4e:	f01b f92d 	bl	803bcac <__assert_func>
	auto &timestamp = frame->Timestamp;
 8020a52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020a54:	3308      	adds	r3, #8
 8020a56:	633b      	str	r3, [r7, #48]	; 0x30
	auto &quaternion = frame->Orientation;
 8020a58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020a5a:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (cbInfo->data_size != CallbackDataSize)
 8020a5c:	68fb      	ldr	r3, [r7, #12]
 8020a5e:	789b      	ldrb	r3, [r3, #2]
 8020a60:	2b0b      	cmp	r3, #11
 8020a62:	d167      	bne.n	8020b34 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x104>
		return;

	bhy2_parse_quaternion(cbInfo->data_ptr, &qtData);
 8020a64:	68fb      	ldr	r3, [r7, #12]
 8020a66:	685b      	ldr	r3, [r3, #4]
 8020a68:	f107 0214 	add.w	r2, r7, #20
 8020a6c:	4611      	mov	r1, r2
 8020a6e:	4618      	mov	r0, r3
 8020a70:	f008 fb51 	bl	8029116 <bhy2_parse_quaternion>

	frame->SensorId = cbInfo->sensor_id;
 8020a74:	68fb      	ldr	r3, [r7, #12]
 8020a76:	781a      	ldrb	r2, [r3, #0]
 8020a78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020a7a:	741a      	strb	r2, [r3, #16]

	uint64_t timeData = *cbInfo->time_stamp * 15625; /* Store the last timestamp */
 8020a7c:	68fb      	ldr	r3, [r7, #12]
 8020a7e:	689b      	ldr	r3, [r3, #8]
 8020a80:	e9d3 0100 	ldrd	r0, r1, [r3]
 8020a84:	4602      	mov	r2, r0
 8020a86:	460b      	mov	r3, r1
 8020a88:	f04f 0a00 	mov.w	sl, #0
 8020a8c:	f04f 0b00 	mov.w	fp, #0
 8020a90:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8020a94:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8020a98:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8020a9c:	4652      	mov	r2, sl
 8020a9e:	465b      	mov	r3, fp
 8020aa0:	ebb2 0800 	subs.w	r8, r2, r0
 8020aa4:	eb63 0901 	sbc.w	r9, r3, r1
 8020aa8:	f04f 0200 	mov.w	r2, #0
 8020aac:	f04f 0300 	mov.w	r3, #0
 8020ab0:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8020ab4:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8020ab8:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8020abc:	ebb2 0408 	subs.w	r4, r2, r8
 8020ac0:	eb63 0509 	sbc.w	r5, r3, r9
 8020ac4:	f04f 0200 	mov.w	r2, #0
 8020ac8:	f04f 0300 	mov.w	r3, #0
 8020acc:	00eb      	lsls	r3, r5, #3
 8020ace:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8020ad2:	00e2      	lsls	r2, r4, #3
 8020ad4:	4614      	mov	r4, r2
 8020ad6:	461d      	mov	r5, r3
 8020ad8:	1823      	adds	r3, r4, r0
 8020ada:	603b      	str	r3, [r7, #0]
 8020adc:	eb45 0301 	adc.w	r3, r5, r1
 8020ae0:	607b      	str	r3, [r7, #4]
 8020ae2:	e9d7 3400 	ldrd	r3, r4, [r7]
 8020ae6:	e9c7 3408 	strd	r3, r4, [r7, #32]

	timestamp.TimeS = (timeData / UINT64_C(1000000000));
 8020aea:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8020aee:	a314      	add	r3, pc, #80	; (adr r3, 8020b40 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x110>)
 8020af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020af4:	f7ff fc44 	bl	8020380 <__aeabi_uldivmod>
 8020af8:	4602      	mov	r2, r0
 8020afa:	460b      	mov	r3, r1
 8020afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020afe:	601a      	str	r2, [r3, #0]
	timestamp.TimeNS = (timeData - (timestamp.TimeS * UINT64_C(1000000000)));
 8020b00:	6a3a      	ldr	r2, [r7, #32]
 8020b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020b04:	681b      	ldr	r3, [r3, #0]
 8020b06:	4913      	ldr	r1, [pc, #76]	; (8020b54 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x124>)
 8020b08:	fb01 f303 	mul.w	r3, r1, r3
 8020b0c:	1ad2      	subs	r2, r2, r3
 8020b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020b10:	605a      	str	r2, [r3, #4]
	quaternion.X = qtData.x;
 8020b12:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8020b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020b18:	801a      	strh	r2, [r3, #0]
	quaternion.Y = qtData.y;
 8020b1a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8020b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020b20:	805a      	strh	r2, [r3, #2]
	quaternion.Z = qtData.z;
 8020b22:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8020b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020b28:	809a      	strh	r2, [r3, #4]
	quaternion.W = qtData.w;
 8020b2a:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8020b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020b30:	80da      	strh	r2, [r3, #6]
 8020b32:	e000      	b.n	8020b36 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x106>
		return;
 8020b34:	bf00      	nop
	/*
	 quaternion.Accuracy = ((qtData.accuracy * 180.0f) / 16384.0f)
	 / 3.141592653589793f; */
}
 8020b36:	3738      	adds	r7, #56	; 0x38
 8020b38:	46bd      	mov	sp, r7
 8020b3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8020b3e:	bf00      	nop
 8020b40:	3b9aca00 	.word	0x3b9aca00
 8020b44:	00000000 	.word	0x00000000
 8020b48:	0803ce2c 	.word	0x0803ce2c
 8020b4c:	0803ce34 	.word	0x0803ce34
 8020b50:	0803cda4 	.word	0x0803cda4
 8020b54:	3b9aca00 	.word	0x3b9aca00

08020b58 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_>:

void BHYWrapper::BHYFrame::SerializeTo(uint8_t *dest, uint8_t *size) {
 8020b58:	b580      	push	{r7, lr}
 8020b5a:	b086      	sub	sp, #24
 8020b5c:	af00      	add	r7, sp, #0
 8020b5e:	60f8      	str	r0, [r7, #12]
 8020b60:	60b9      	str	r1, [r7, #8]
 8020b62:	607a      	str	r2, [r7, #4]
	assert(dest);
 8020b64:	68bb      	ldr	r3, [r7, #8]
 8020b66:	2b00      	cmp	r3, #0
 8020b68:	d105      	bne.n	8020b76 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0x1e>
 8020b6a:	4b26      	ldr	r3, [pc, #152]	; (8020c04 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0xac>)
 8020b6c:	4a26      	ldr	r2, [pc, #152]	; (8020c08 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0xb0>)
 8020b6e:	2191      	movs	r1, #145	; 0x91
 8020b70:	4826      	ldr	r0, [pc, #152]	; (8020c0c <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0xb4>)
 8020b72:	f01b f89b 	bl	803bcac <__assert_func>
	assert(size);
 8020b76:	687b      	ldr	r3, [r7, #4]
 8020b78:	2b00      	cmp	r3, #0
 8020b7a:	d105      	bne.n	8020b88 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0x30>
 8020b7c:	4b24      	ldr	r3, [pc, #144]	; (8020c10 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0xb8>)
 8020b7e:	4a22      	ldr	r2, [pc, #136]	; (8020c08 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0xb0>)
 8020b80:	2192      	movs	r1, #146	; 0x92
 8020b82:	4822      	ldr	r0, [pc, #136]	; (8020c0c <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0xb4>)
 8020b84:	f01b f892 	bl	803bcac <__assert_func>

	uint8_t *ptr = dest;
 8020b88:	68bb      	ldr	r3, [r7, #8]
 8020b8a:	617b      	str	r3, [r7, #20]

	*reinterpret_cast<int16_t*>(ptr) = Orientation.X;
 8020b8c:	68fb      	ldr	r3, [r7, #12]
 8020b8e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8020b92:	697b      	ldr	r3, [r7, #20]
 8020b94:	801a      	strh	r2, [r3, #0]
	ptr += sizeof(int16_t);
 8020b96:	697b      	ldr	r3, [r7, #20]
 8020b98:	3302      	adds	r3, #2
 8020b9a:	617b      	str	r3, [r7, #20]

	*reinterpret_cast<int16_t*>(ptr) = Orientation.Y;
 8020b9c:	68fb      	ldr	r3, [r7, #12]
 8020b9e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8020ba2:	697b      	ldr	r3, [r7, #20]
 8020ba4:	801a      	strh	r2, [r3, #0]
	ptr += sizeof(int16_t);
 8020ba6:	697b      	ldr	r3, [r7, #20]
 8020ba8:	3302      	adds	r3, #2
 8020baa:	617b      	str	r3, [r7, #20]

	*reinterpret_cast<int16_t*>(ptr) = Orientation.Z;
 8020bac:	68fb      	ldr	r3, [r7, #12]
 8020bae:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8020bb2:	697b      	ldr	r3, [r7, #20]
 8020bb4:	801a      	strh	r2, [r3, #0]
	ptr += sizeof(int16_t);
 8020bb6:	697b      	ldr	r3, [r7, #20]
 8020bb8:	3302      	adds	r3, #2
 8020bba:	617b      	str	r3, [r7, #20]

	*reinterpret_cast<int16_t*>(ptr) = Orientation.W;
 8020bbc:	68fb      	ldr	r3, [r7, #12]
 8020bbe:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8020bc2:	697b      	ldr	r3, [r7, #20]
 8020bc4:	801a      	strh	r2, [r3, #0]
	ptr += sizeof(int16_t);
 8020bc6:	697b      	ldr	r3, [r7, #20]
 8020bc8:	3302      	adds	r3, #2
 8020bca:	617b      	str	r3, [r7, #20]
	/*
	 *reinterpret_cast<float*>(ptr) = Orientation.Accuracy;
	 ptr += sizeof(float);
	 */

	*reinterpret_cast<uint32_t*>(ptr) = Timestamp.TimeS;
 8020bcc:	68fb      	ldr	r3, [r7, #12]
 8020bce:	689a      	ldr	r2, [r3, #8]
 8020bd0:	697b      	ldr	r3, [r7, #20]
 8020bd2:	601a      	str	r2, [r3, #0]
	ptr += sizeof(uint32_t);
 8020bd4:	697b      	ldr	r3, [r7, #20]
 8020bd6:	3304      	adds	r3, #4
 8020bd8:	617b      	str	r3, [r7, #20]

	*reinterpret_cast<uint32_t*>(ptr) = Timestamp.TimeNS;
 8020bda:	68fb      	ldr	r3, [r7, #12]
 8020bdc:	68da      	ldr	r2, [r3, #12]
 8020bde:	697b      	ldr	r3, [r7, #20]
 8020be0:	601a      	str	r2, [r3, #0]
	ptr += sizeof(uint32_t);
 8020be2:	697b      	ldr	r3, [r7, #20]
 8020be4:	3304      	adds	r3, #4
 8020be6:	617b      	str	r3, [r7, #20]

	*reinterpret_cast<uint8_t*>(ptr) = SensorId;
 8020be8:	68fb      	ldr	r3, [r7, #12]
 8020bea:	7c1a      	ldrb	r2, [r3, #16]
 8020bec:	697b      	ldr	r3, [r7, #20]
 8020bee:	701a      	strb	r2, [r3, #0]
	ptr += sizeof(uint8_t);
 8020bf0:	697b      	ldr	r3, [r7, #20]
 8020bf2:	3301      	adds	r3, #1
 8020bf4:	617b      	str	r3, [r7, #20]

	*size = Size;
 8020bf6:	687b      	ldr	r3, [r7, #4]
 8020bf8:	2211      	movs	r2, #17
 8020bfa:	701a      	strb	r2, [r3, #0]
}
 8020bfc:	bf00      	nop
 8020bfe:	3718      	adds	r7, #24
 8020c00:	46bd      	mov	sp, r7
 8020c02:	bd80      	pop	{r7, pc}
 8020c04:	0803ce80 	.word	0x0803ce80
 8020c08:	0803ce88 	.word	0x0803ce88
 8020c0c:	0803cda4 	.word	0x0803cda4
 8020c10:	0803cec4 	.word	0x0803cec4

08020c14 <_ZNK10BHYWrapper6GetSeqEv>:

size_t BHYWrapper::GetSeq() const {
 8020c14:	b480      	push	{r7}
 8020c16:	b083      	sub	sp, #12
 8020c18:	af00      	add	r7, sp, #0
 8020c1a:	6078      	str	r0, [r7, #4]
	return frameSeq;
 8020c1c:	687b      	ldr	r3, [r7, #4]
 8020c1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8020c22:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
}
 8020c26:	4618      	mov	r0, r3
 8020c28:	370c      	adds	r7, #12
 8020c2a:	46bd      	mov	sp, r7
 8020c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c30:	4770      	bx	lr

08020c32 <_ZNSt5arrayIhLj2048EE4dataEv>:
	return _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)
 	           : _AT_Type::_S_ref(_M_elems, 0);
      }

      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
 8020c32:	b580      	push	{r7, lr}
 8020c34:	b082      	sub	sp, #8
 8020c36:	af00      	add	r7, sp, #0
 8020c38:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8020c3a:	687b      	ldr	r3, [r7, #4]
 8020c3c:	4618      	mov	r0, r3
 8020c3e:	f000 f811 	bl	8020c64 <_ZNSt14__array_traitsIhLj2048EE6_S_ptrERA2048_Kh>
 8020c42:	4603      	mov	r3, r0
 8020c44:	4618      	mov	r0, r3
 8020c46:	3708      	adds	r7, #8
 8020c48:	46bd      	mov	sp, r7
 8020c4a:	bd80      	pop	{r7, pc}

08020c4c <_ZNKSt5arrayIhLj2048EE4sizeEv>:
      size() const noexcept { return _Nm; }
 8020c4c:	b480      	push	{r7}
 8020c4e:	b083      	sub	sp, #12
 8020c50:	af00      	add	r7, sp, #0
 8020c52:	6078      	str	r0, [r7, #4]
 8020c54:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8020c58:	4618      	mov	r0, r3
 8020c5a:	370c      	adds	r7, #12
 8020c5c:	46bd      	mov	sp, r7
 8020c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c62:	4770      	bx	lr

08020c64 <_ZNSt14__array_traitsIhLj2048EE6_S_ptrERA2048_Kh>:
      _S_ptr(const _Type& __t) noexcept
 8020c64:	b480      	push	{r7}
 8020c66:	b083      	sub	sp, #12
 8020c68:	af00      	add	r7, sp, #0
 8020c6a:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8020c6c:	687b      	ldr	r3, [r7, #4]
 8020c6e:	4618      	mov	r0, r3
 8020c70:	370c      	adds	r7, #12
 8020c72:	46bd      	mov	sp, r7
 8020c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c78:	4770      	bx	lr
	...

08020c7c <_Z8spi_initP19__SPI_HandleTypeDef>:

  CDC_Transmit_FS( (uint8_t*)line, strlen(line) );
  }

void spi_init( SPI_HandleTypeDef *hspi)
{
 8020c7c:	b480      	push	{r7}
 8020c7e:	b083      	sub	sp, #12
 8020c80:	af00      	add	r7, sp, #0
 8020c82:	6078      	str	r0, [r7, #4]
  mSPI = hspi;
 8020c84:	4a04      	ldr	r2, [pc, #16]	; (8020c98 <_Z8spi_initP19__SPI_HandleTypeDef+0x1c>)
 8020c86:	687b      	ldr	r3, [r7, #4]
 8020c88:	6013      	str	r3, [r2, #0]
}
 8020c8a:	bf00      	nop
 8020c8c:	370c      	adds	r7, #12
 8020c8e:	46bd      	mov	sp, r7
 8020c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c94:	4770      	bx	lr
 8020c96:	bf00      	nop
 8020c98:	24000184 	.word	0x24000184

08020c9c <_Z11spiTransmitPht>:
//! \param data        Данные для передачи
//! \param size        Количество байт для передачи
//! \return            true - если операция выполнена успешно
//!
int8_t spiTransmit( uint8_t *data, uint16_t size )
  {
 8020c9c:	b580      	push	{r7, lr}
 8020c9e:	b082      	sub	sp, #8
 8020ca0:	af00      	add	r7, sp, #0
 8020ca2:	6078      	str	r0, [r7, #4]
 8020ca4:	460b      	mov	r3, r1
 8020ca6:	807b      	strh	r3, [r7, #2]
  //Инициировать передачу по DMA
	HAL_SPI_Transmit_DMA( mSPI, data, size );
 8020ca8:	4b11      	ldr	r3, [pc, #68]	; (8020cf0 <_Z11spiTransmitPht+0x54>)
 8020caa:	681b      	ldr	r3, [r3, #0]
 8020cac:	887a      	ldrh	r2, [r7, #2]
 8020cae:	6879      	ldr	r1, [r7, #4]
 8020cb0:	4618      	mov	r0, r3
 8020cb2:	f012 fb91 	bl	80333d8 <HAL_SPI_Transmit_DMA>
	while (HAL_SPI_GetState(mSPI) != HAL_SPI_STATE_READY);
 8020cb6:	4b0e      	ldr	r3, [pc, #56]	; (8020cf0 <_Z11spiTransmitPht+0x54>)
 8020cb8:	681b      	ldr	r3, [r3, #0]
 8020cba:	4618      	mov	r0, r3
 8020cbc:	f013 fa1a 	bl	80340f4 <HAL_SPI_GetState>
 8020cc0:	4603      	mov	r3, r0
 8020cc2:	2b01      	cmp	r3, #1
 8020cc4:	bf14      	ite	ne
 8020cc6:	2301      	movne	r3, #1
 8020cc8:	2300      	moveq	r3, #0
 8020cca:	b2db      	uxtb	r3, r3
 8020ccc:	2b00      	cmp	r3, #0
 8020cce:	d000      	beq.n	8020cd2 <_Z11spiTransmitPht+0x36>
 8020cd0:	e7f1      	b.n	8020cb6 <_Z11spiTransmitPht+0x1a>
	//HAL_SPI_Transmit(mSPI, data, size, 5);
  //Возвращает истину при успешном завершении операции
  return mSPI->ErrorCode == HAL_SPI_ERROR_NONE;
 8020cd2:	4b07      	ldr	r3, [pc, #28]	; (8020cf0 <_Z11spiTransmitPht+0x54>)
 8020cd4:	681b      	ldr	r3, [r3, #0]
 8020cd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8020cda:	2b00      	cmp	r3, #0
 8020cdc:	bf0c      	ite	eq
 8020cde:	2301      	moveq	r3, #1
 8020ce0:	2300      	movne	r3, #0
 8020ce2:	b2db      	uxtb	r3, r3
 8020ce4:	b25b      	sxtb	r3, r3
  }
 8020ce6:	4618      	mov	r0, r3
 8020ce8:	3708      	adds	r7, #8
 8020cea:	46bd      	mov	sp, r7
 8020cec:	bd80      	pop	{r7, pc}
 8020cee:	bf00      	nop
 8020cf0:	24000184 	.word	0x24000184

08020cf4 <_Z9spiReceivPht>:
//! \param data      Указатель на буфер, в который размещаются принятые данные
//! \param size      Количество принимаемых байтов
//! \return            true - если операция выполнена успешно
//!
int8_t spiReceiv( uint8_t *data, uint16_t size )
  {
 8020cf4:	b580      	push	{r7, lr}
 8020cf6:	b082      	sub	sp, #8
 8020cf8:	af00      	add	r7, sp, #0
 8020cfa:	6078      	str	r0, [r7, #4]
 8020cfc:	460b      	mov	r3, r1
 8020cfe:	807b      	strh	r3, [r7, #2]
  //Инициировать передачу по DMA
	//HAL_SPI_Receive(mSPI, data, size,  5);
	HAL_SPI_Receive_DMA( mSPI, data, size );
 8020d00:	4b11      	ldr	r3, [pc, #68]	; (8020d48 <_Z9spiReceivPht+0x54>)
 8020d02:	681b      	ldr	r3, [r3, #0]
 8020d04:	887a      	ldrh	r2, [r7, #2]
 8020d06:	6879      	ldr	r1, [r7, #4]
 8020d08:	4618      	mov	r0, r3
 8020d0a:	f012 fcaf 	bl	803366c <HAL_SPI_Receive_DMA>
  //Ожидать завершения приема
	while (HAL_SPI_GetState(mSPI) != HAL_SPI_STATE_READY);
 8020d0e:	4b0e      	ldr	r3, [pc, #56]	; (8020d48 <_Z9spiReceivPht+0x54>)
 8020d10:	681b      	ldr	r3, [r3, #0]
 8020d12:	4618      	mov	r0, r3
 8020d14:	f013 f9ee 	bl	80340f4 <HAL_SPI_GetState>
 8020d18:	4603      	mov	r3, r0
 8020d1a:	2b01      	cmp	r3, #1
 8020d1c:	bf14      	ite	ne
 8020d1e:	2301      	movne	r3, #1
 8020d20:	2300      	moveq	r3, #0
 8020d22:	b2db      	uxtb	r3, r3
 8020d24:	2b00      	cmp	r3, #0
 8020d26:	d000      	beq.n	8020d2a <_Z9spiReceivPht+0x36>
 8020d28:	e7f1      	b.n	8020d0e <_Z9spiReceivPht+0x1a>
  //Возвращает истину при успешном завершении операции
  return mSPI->ErrorCode == HAL_SPI_ERROR_NONE;
 8020d2a:	4b07      	ldr	r3, [pc, #28]	; (8020d48 <_Z9spiReceivPht+0x54>)
 8020d2c:	681b      	ldr	r3, [r3, #0]
 8020d2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8020d32:	2b00      	cmp	r3, #0
 8020d34:	bf0c      	ite	eq
 8020d36:	2301      	moveq	r3, #1
 8020d38:	2300      	movne	r3, #0
 8020d3a:	b2db      	uxtb	r3, r3
 8020d3c:	b25b      	sxtb	r3, r3
  }
 8020d3e:	4618      	mov	r0, r3
 8020d40:	3708      	adds	r7, #8
 8020d42:	46bd      	mov	sp, r7
 8020d44:	bd80      	pop	{r7, pc}
 8020d46:	bf00      	nop
 8020d48:	24000184 	.word	0x24000184

08020d4c <_Z13bhy2_spi_readhPhmPv>:
//! \param length        Длина данных
//! \param intf_ptr      Указатель на интерфейс (не используем)
//! \return              Результат операции
//!
int8_t bhy2_spi_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr)
  {
 8020d4c:	b580      	push	{r7, lr}
 8020d4e:	b084      	sub	sp, #16
 8020d50:	af00      	add	r7, sp, #0
 8020d52:	60b9      	str	r1, [r7, #8]
 8020d54:	607a      	str	r2, [r7, #4]
 8020d56:	603b      	str	r3, [r7, #0]
 8020d58:	4603      	mov	r3, r0
 8020d5a:	73fb      	strb	r3, [r7, #15]
  //I2cDmaTransfer *i2cDmaTransfer = (I2cDmaTransfer*)intf_ptr;
  //Выставляем CS в 0
  //HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
  //GPIOA->BSRR = (uint32_t)SPI_CS_Pin << (16U);
  GPIOE->BSRR = (uint32_t)IMU_CS_Pin << (16U);
 8020d5c:	4b19      	ldr	r3, [pc, #100]	; (8020dc4 <_Z13bhy2_spi_readhPhmPv+0x78>)
 8020d5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8020d62:	619a      	str	r2, [r3, #24]

  //Записываем адрес регистра
  if( !spiTransmit( &reg_addr, 1 ) )
 8020d64:	f107 030f 	add.w	r3, r7, #15
 8020d68:	2101      	movs	r1, #1
 8020d6a:	4618      	mov	r0, r3
 8020d6c:	f7ff ff96 	bl	8020c9c <_Z11spiTransmitPht>
 8020d70:	4603      	mov	r3, r0
 8020d72:	2b00      	cmp	r3, #0
 8020d74:	bf0c      	ite	eq
 8020d76:	2301      	moveq	r3, #1
 8020d78:	2300      	movne	r3, #0
 8020d7a:	b2db      	uxtb	r3, r3
 8020d7c:	2b00      	cmp	r3, #0
 8020d7e:	d002      	beq.n	8020d86 <_Z13bhy2_spi_readhPhmPv+0x3a>
    return IMU_ERR_SPI;
 8020d80:	f06f 0301 	mvn.w	r3, #1
 8020d84:	e019      	b.n	8020dba <_Z13bhy2_spi_readhPhmPv+0x6e>

  //Читаем содержимое регистра
  if( spiReceiv( reg_data, length ) )
 8020d86:	687b      	ldr	r3, [r7, #4]
 8020d88:	b29b      	uxth	r3, r3
 8020d8a:	4619      	mov	r1, r3
 8020d8c:	68b8      	ldr	r0, [r7, #8]
 8020d8e:	f7ff ffb1 	bl	8020cf4 <_Z9spiReceivPht>
 8020d92:	4603      	mov	r3, r0
 8020d94:	2b00      	cmp	r3, #0
 8020d96:	bf14      	ite	ne
 8020d98:	2301      	movne	r3, #1
 8020d9a:	2300      	moveq	r3, #0
 8020d9c:	b2db      	uxtb	r3, r3
 8020d9e:	2b00      	cmp	r3, #0
 8020da0:	d005      	beq.n	8020dae <_Z13bhy2_spi_readhPhmPv+0x62>
  {
	  //Выставляем CS в 1
	  //SPI_CS_GPIO_Port->BSRR = (uint32_t)SPI_CS_Pin;
	  IMU_CS_GPIO_Port->BSRR = (uint32_t)IMU_CS_Pin;
 8020da2:	4b08      	ldr	r3, [pc, #32]	; (8020dc4 <_Z13bhy2_spi_readhPhmPv+0x78>)
 8020da4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8020da8:	619a      	str	r2, [r3, #24]
	  //Возвращаем успех операции
    return IMU_ERR_OK;
 8020daa:	2300      	movs	r3, #0
 8020dac:	e005      	b.n	8020dba <_Z13bhy2_spi_readhPhmPv+0x6e>
  }
  //SPI_CS_GPIO_Port->BSRR = (uint32_t)SPI_CS_Pin;
  IMU_CS_GPIO_Port->BSRR = (uint32_t)IMU_CS_Pin;
 8020dae:	4b05      	ldr	r3, [pc, #20]	; (8020dc4 <_Z13bhy2_spi_readhPhmPv+0x78>)
 8020db0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8020db4:	619a      	str	r2, [r3, #24]
  //Выставляем CS в 1


  return IMU_ERR_SPI;
 8020db6:	f06f 0301 	mvn.w	r3, #1
  }
 8020dba:	4618      	mov	r0, r3
 8020dbc:	3710      	adds	r7, #16
 8020dbe:	46bd      	mov	sp, r7
 8020dc0:	bd80      	pop	{r7, pc}
 8020dc2:	bf00      	nop
 8020dc4:	58021000 	.word	0x58021000

08020dc8 <_Z14bhy2_spi_writehPKhmPv>:
//! \param length         Длина данных
//! \param intf_ptr       Указатель на интерфейс (не используем)
//! \return               Результат операции
//!
int8_t bhy2_spi_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, void *intf_ptr)
  {
 8020dc8:	b580      	push	{r7, lr}
 8020dca:	b084      	sub	sp, #16
 8020dcc:	af00      	add	r7, sp, #0
 8020dce:	60b9      	str	r1, [r7, #8]
 8020dd0:	607a      	str	r2, [r7, #4]
 8020dd2:	603b      	str	r3, [r7, #0]
 8020dd4:	4603      	mov	r3, r0
 8020dd6:	73fb      	strb	r3, [r7, #15]
  //Промежуточный буфер нужен чтобы передать данные вместе с адресом регистра
  static uint8_t buffer[65];

  if( length > 64 )
 8020dd8:	687b      	ldr	r3, [r7, #4]
 8020dda:	2b40      	cmp	r3, #64	; 0x40
 8020ddc:	d902      	bls.n	8020de4 <_Z14bhy2_spi_writehPKhmPv+0x1c>
    return -4;
 8020dde:	f06f 0303 	mvn.w	r3, #3
 8020de2:	e028      	b.n	8020e36 <_Z14bhy2_spi_writehPKhmPv+0x6e>

  //I2cDmaTransfer *i2cDmaTransfer = (I2cDmaTransfer*)intf_ptr;

  buffer[0] = reg_addr; //записываем в старший бит адреса 0 для записи данных
 8020de4:	4a16      	ldr	r2, [pc, #88]	; (8020e40 <_Z14bhy2_spi_writehPKhmPv+0x78>)
 8020de6:	7bfb      	ldrb	r3, [r7, #15]
 8020de8:	7013      	strb	r3, [r2, #0]
  //Скопировать данные из исходного буфера в промежуточный, чтобы адрес регистра был частью буфера данных
  memcpy( buffer + 1, reg_data, length );
 8020dea:	4b16      	ldr	r3, [pc, #88]	; (8020e44 <_Z14bhy2_spi_writehPKhmPv+0x7c>)
 8020dec:	687a      	ldr	r2, [r7, #4]
 8020dee:	68b9      	ldr	r1, [r7, #8]
 8020df0:	4618      	mov	r0, r3
 8020df2:	f01a ffc5 	bl	803bd80 <memcpy>
  //memcpy( buffer + 1, reg_data, length );
  //Выставляем CS в 0
  //GPIOA->BSRR = (uint32_t)SPI_CS_Pin << (16U);
  GPIOE->BSRR = (uint32_t)IMU_CS_Pin << (16U);
 8020df6:	4b14      	ldr	r3, [pc, #80]	; (8020e48 <_Z14bhy2_spi_writehPKhmPv+0x80>)
 8020df8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8020dfc:	619a      	str	r2, [r3, #24]
  //if( spiTransmit( buffer + 1, length + 1 ) )
  if( spiTransmit( buffer, length + 1) )
 8020dfe:	687b      	ldr	r3, [r7, #4]
 8020e00:	b29b      	uxth	r3, r3
 8020e02:	3301      	adds	r3, #1
 8020e04:	b29b      	uxth	r3, r3
 8020e06:	4619      	mov	r1, r3
 8020e08:	480d      	ldr	r0, [pc, #52]	; (8020e40 <_Z14bhy2_spi_writehPKhmPv+0x78>)
 8020e0a:	f7ff ff47 	bl	8020c9c <_Z11spiTransmitPht>
 8020e0e:	4603      	mov	r3, r0
 8020e10:	2b00      	cmp	r3, #0
 8020e12:	bf14      	ite	ne
 8020e14:	2301      	movne	r3, #1
 8020e16:	2300      	moveq	r3, #0
 8020e18:	b2db      	uxtb	r3, r3
 8020e1a:	2b00      	cmp	r3, #0
 8020e1c:	d005      	beq.n	8020e2a <_Z14bhy2_spi_writehPKhmPv+0x62>
  {
	  //Выставляем CS в 1
	  //SPI_CS_GPIO_Port->BSRR = (uint32_t)SPI_CS_Pin;
	  IMU_CS_GPIO_Port->BSRR = (uint32_t)IMU_CS_Pin;
 8020e1e:	4b0a      	ldr	r3, [pc, #40]	; (8020e48 <_Z14bhy2_spi_writehPKhmPv+0x80>)
 8020e20:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8020e24:	619a      	str	r2, [r3, #24]
	  return IMU_ERR_OK;
 8020e26:	2300      	movs	r3, #0
 8020e28:	e005      	b.n	8020e36 <_Z14bhy2_spi_writehPKhmPv+0x6e>
  }
  //Выставляем CS в 1
  //SPI_CS_GPIO_Port->BSRR = (uint32_t)SPI_CS_Pin;
  IMU_CS_GPIO_Port->BSRR = (uint32_t)IMU_CS_Pin;
 8020e2a:	4b07      	ldr	r3, [pc, #28]	; (8020e48 <_Z14bhy2_spi_writehPKhmPv+0x80>)
 8020e2c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8020e30:	619a      	str	r2, [r3, #24]
  return IMU_ERR_I2C;
 8020e32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
 8020e36:	4618      	mov	r0, r3
 8020e38:	3710      	adds	r7, #16
 8020e3a:	46bd      	mov	sp, r7
 8020e3c:	bd80      	pop	{r7, pc}
 8020e3e:	bf00      	nop
 8020e40:	24000188 	.word	0x24000188
 8020e44:	24000189 	.word	0x24000189
 8020e48:	58021000 	.word	0x58021000

08020e4c <_Z13bhy2_delay_usmPv>:
//! \brief bhy2_delay_us Сформировать задержку на заданное количество мкс
//! \param us            Количество мкс, на которое нужно сформировать задержку
//! \param private_data  Неиспользуемый указатель на устройство
//!
void bhy2_delay_us(uint32_t us, void *private_data)
  {
 8020e4c:	b580      	push	{r7, lr}
 8020e4e:	b082      	sub	sp, #8
 8020e50:	af00      	add	r7, sp, #0
 8020e52:	6078      	str	r0, [r7, #4]
 8020e54:	6039      	str	r1, [r7, #0]
  //Чтобы компилятор не ругался на неиспользуемую переменную
  (void)private_data;
  //Если задержка превышает 1мс, то задерживаем средствами ОС
  if( us >= 1000 )
 8020e56:	687b      	ldr	r3, [r7, #4]
 8020e58:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8020e5c:	d308      	bcc.n	8020e70 <_Z13bhy2_delay_usmPv+0x24>
    HAL_Delay( us / 1000 );
 8020e5e:	687b      	ldr	r3, [r7, #4]
 8020e60:	4a0b      	ldr	r2, [pc, #44]	; (8020e90 <_Z13bhy2_delay_usmPv+0x44>)
 8020e62:	fba2 2303 	umull	r2, r3, r2, r3
 8020e66:	099b      	lsrs	r3, r3, #6
 8020e68:	4618      	mov	r0, r3
 8020e6a:	f009 feb1 	bl	802abd0 <HAL_Delay>
    //Задержка менее 1мс, делаем тупым счетом
    while( us-- ) {
      __NOP();
      }
    }
  }
 8020e6e:	e00b      	b.n	8020e88 <_Z13bhy2_delay_usmPv+0x3c>
    while( us-- ) {
 8020e70:	687b      	ldr	r3, [r7, #4]
 8020e72:	1e5a      	subs	r2, r3, #1
 8020e74:	607a      	str	r2, [r7, #4]
 8020e76:	2b00      	cmp	r3, #0
 8020e78:	bf14      	ite	ne
 8020e7a:	2301      	movne	r3, #1
 8020e7c:	2300      	moveq	r3, #0
 8020e7e:	b2db      	uxtb	r3, r3
 8020e80:	2b00      	cmp	r3, #0
 8020e82:	d001      	beq.n	8020e88 <_Z13bhy2_delay_usmPv+0x3c>
      __NOP();
 8020e84:	bf00      	nop
    while( us-- ) {
 8020e86:	e7f3      	b.n	8020e70 <_Z13bhy2_delay_usmPv+0x24>
  }
 8020e88:	bf00      	nop
 8020e8a:	3708      	adds	r7, #8
 8020e8c:	46bd      	mov	sp, r7
 8020e8e:	bd80      	pop	{r7, pc}
 8020e90:	10624dd3 	.word	0x10624dd3

08020e94 <_ZSt3absl>:

  using ::abs;

#ifndef __CORRECT_ISO_CPP_STDLIB_H_PROTO
  inline long
  abs(long __i) { return __builtin_labs(__i); }
 8020e94:	b480      	push	{r7}
 8020e96:	b083      	sub	sp, #12
 8020e98:	af00      	add	r7, sp, #0
 8020e9a:	6078      	str	r0, [r7, #4]
 8020e9c:	687b      	ldr	r3, [r7, #4]
 8020e9e:	2b00      	cmp	r3, #0
 8020ea0:	bfb8      	it	lt
 8020ea2:	425b      	neglt	r3, r3
 8020ea4:	4618      	mov	r0, r3
 8020ea6:	370c      	adds	r7, #12
 8020ea8:	46bd      	mov	sp, r7
 8020eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020eae:	4770      	bx	lr

08020eb0 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8020eb0:	b480      	push	{r7}
 8020eb2:	b083      	sub	sp, #12
 8020eb4:	af00      	add	r7, sp, #0
 8020eb6:	6078      	str	r0, [r7, #4]
 8020eb8:	6039      	str	r1, [r7, #0]
 8020eba:	683b      	ldr	r3, [r7, #0]
 8020ebc:	4618      	mov	r0, r3
 8020ebe:	370c      	adds	r7, #12
 8020ec0:	46bd      	mov	sp, r7
 8020ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ec6:	4770      	bx	lr

08020ec8 <_ZSt16__deque_buf_sizej>:
#define _GLIBCXX_DEQUE_BUF_SIZE 512
#endif

  _GLIBCXX_CONSTEXPR inline size_t
  __deque_buf_size(size_t __size)
  { return (__size < _GLIBCXX_DEQUE_BUF_SIZE
 8020ec8:	b480      	push	{r7}
 8020eca:	b083      	sub	sp, #12
 8020ecc:	af00      	add	r7, sp, #0
 8020ece:	6078      	str	r0, [r7, #4]
	    ? size_t(_GLIBCXX_DEQUE_BUF_SIZE / __size) : size_t(1)); }
 8020ed0:	687b      	ldr	r3, [r7, #4]
 8020ed2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8020ed6:	d205      	bcs.n	8020ee4 <_ZSt16__deque_buf_sizej+0x1c>
 8020ed8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8020edc:	687b      	ldr	r3, [r7, #4]
 8020ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8020ee2:	e000      	b.n	8020ee6 <_ZSt16__deque_buf_sizej+0x1e>
 8020ee4:	2301      	movs	r3, #1
 8020ee6:	4618      	mov	r0, r3
 8020ee8:	370c      	adds	r7, #12
 8020eea:	46bd      	mov	sp, r7
 8020eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ef0:	4770      	bx	lr

08020ef2 <_ZN11QueueSender11MessageMode9SerializeEh>:
		static constexpr Type Sync = 0;
		static constexpr Type Async = 1;
		static constexpr Type Info = 2;
		static constexpr Type SetPeriod = 3;

		static uint8_t Serialize(Type mode) {
 8020ef2:	b480      	push	{r7}
 8020ef4:	b083      	sub	sp, #12
 8020ef6:	af00      	add	r7, sp, #0
 8020ef8:	4603      	mov	r3, r0
 8020efa:	71fb      	strb	r3, [r7, #7]
			return mode;
 8020efc:	79fb      	ldrb	r3, [r7, #7]
		}
 8020efe:	4618      	mov	r0, r3
 8020f00:	370c      	adds	r7, #12
 8020f02:	46bd      	mov	sp, r7
 8020f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f08:	4770      	bx	lr

08020f0a <_ZN11QueueSender11MessageMode11DeserializeEh>:
		static Type Deserialize(uint8_t val) {
 8020f0a:	b480      	push	{r7}
 8020f0c:	b083      	sub	sp, #12
 8020f0e:	af00      	add	r7, sp, #0
 8020f10:	4603      	mov	r3, r0
 8020f12:	71fb      	strb	r3, [r7, #7]
			return val;
 8020f14:	79fb      	ldrb	r3, [r7, #7]
		}
 8020f16:	4618      	mov	r0, r3
 8020f18:	370c      	adds	r7, #12
 8020f1a:	46bd      	mov	sp, r7
 8020f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f20:	4770      	bx	lr

08020f22 <_ZN11QueueSender9ErrorCode9SerializeEh>:
		static constexpr Type NACK = 2;
		static constexpr Type Unknown = 3;
		static constexpr Type BadPeriod = 4;
		static constexpr Type QueueFull = 5;

		static uint8_t Serialize(Type error) {
 8020f22:	b480      	push	{r7}
 8020f24:	b083      	sub	sp, #12
 8020f26:	af00      	add	r7, sp, #0
 8020f28:	4603      	mov	r3, r0
 8020f2a:	71fb      	strb	r3, [r7, #7]
			return error;
 8020f2c:	79fb      	ldrb	r3, [r7, #7]
		}
 8020f2e:	4618      	mov	r0, r3
 8020f30:	370c      	adds	r7, #12
 8020f32:	46bd      	mov	sp, r7
 8020f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f38:	4770      	bx	lr
	...

08020f3c <_ZN11QueueSender4Info11SerializeToEPPh>:
		uint16_t NumRequests;
		uint16_t NumResponces;

		static constexpr size_t Size = 2 * sizeof(uint16_t);

		void SerializeTo(uint8_t **ptr) {
 8020f3c:	b580      	push	{r7, lr}
 8020f3e:	b082      	sub	sp, #8
 8020f40:	af00      	add	r7, sp, #0
 8020f42:	6078      	str	r0, [r7, #4]
 8020f44:	6039      	str	r1, [r7, #0]
			assert(ptr);
 8020f46:	683b      	ldr	r3, [r7, #0]
 8020f48:	2b00      	cmp	r3, #0
 8020f4a:	d105      	bne.n	8020f58 <_ZN11QueueSender4Info11SerializeToEPPh+0x1c>
 8020f4c:	4b13      	ldr	r3, [pc, #76]	; (8020f9c <_ZN11QueueSender4Info11SerializeToEPPh+0x60>)
 8020f4e:	4a14      	ldr	r2, [pc, #80]	; (8020fa0 <_ZN11QueueSender4Info11SerializeToEPPh+0x64>)
 8020f50:	21a1      	movs	r1, #161	; 0xa1
 8020f52:	4814      	ldr	r0, [pc, #80]	; (8020fa4 <_ZN11QueueSender4Info11SerializeToEPPh+0x68>)
 8020f54:	f01a feaa 	bl	803bcac <__assert_func>
			assert(*ptr);
 8020f58:	683b      	ldr	r3, [r7, #0]
 8020f5a:	681b      	ldr	r3, [r3, #0]
 8020f5c:	2b00      	cmp	r3, #0
 8020f5e:	d105      	bne.n	8020f6c <_ZN11QueueSender4Info11SerializeToEPPh+0x30>
 8020f60:	4b11      	ldr	r3, [pc, #68]	; (8020fa8 <_ZN11QueueSender4Info11SerializeToEPPh+0x6c>)
 8020f62:	4a0f      	ldr	r2, [pc, #60]	; (8020fa0 <_ZN11QueueSender4Info11SerializeToEPPh+0x64>)
 8020f64:	21a2      	movs	r1, #162	; 0xa2
 8020f66:	480f      	ldr	r0, [pc, #60]	; (8020fa4 <_ZN11QueueSender4Info11SerializeToEPPh+0x68>)
 8020f68:	f01a fea0 	bl	803bcac <__assert_func>

			*reinterpret_cast<uint16_t*>(*ptr) = NumRequests;
 8020f6c:	683b      	ldr	r3, [r7, #0]
 8020f6e:	681b      	ldr	r3, [r3, #0]
 8020f70:	687a      	ldr	r2, [r7, #4]
 8020f72:	8812      	ldrh	r2, [r2, #0]
 8020f74:	801a      	strh	r2, [r3, #0]
			*ptr += sizeof(uint16_t);
 8020f76:	683b      	ldr	r3, [r7, #0]
 8020f78:	681b      	ldr	r3, [r3, #0]
 8020f7a:	1c9a      	adds	r2, r3, #2
 8020f7c:	683b      	ldr	r3, [r7, #0]
 8020f7e:	601a      	str	r2, [r3, #0]

			*reinterpret_cast<uint16_t*>(*ptr) = NumResponces;
 8020f80:	683b      	ldr	r3, [r7, #0]
 8020f82:	681b      	ldr	r3, [r3, #0]
 8020f84:	687a      	ldr	r2, [r7, #4]
 8020f86:	8852      	ldrh	r2, [r2, #2]
 8020f88:	801a      	strh	r2, [r3, #0]
			*ptr += sizeof(uint16_t);
 8020f8a:	683b      	ldr	r3, [r7, #0]
 8020f8c:	681b      	ldr	r3, [r3, #0]
 8020f8e:	1c9a      	adds	r2, r3, #2
 8020f90:	683b      	ldr	r3, [r7, #0]
 8020f92:	601a      	str	r2, [r3, #0]
		}
 8020f94:	bf00      	nop
 8020f96:	3708      	adds	r7, #8
 8020f98:	46bd      	mov	sp, r7
 8020f9a:	bd80      	pop	{r7, pc}
 8020f9c:	0803cecc 	.word	0x0803cecc
 8020fa0:	0803ced0 	.word	0x0803ced0
 8020fa4:	0803cf00 	.word	0x0803cf00
 8020fa8:	0803cf1c 	.word	0x0803cf1c

08020fac <_ZN10FixedQueueI7RequestLj500EEC1Ev>:
class FixedQueue {
 8020fac:	b480      	push	{r7}
 8020fae:	b083      	sub	sp, #12
 8020fb0:	af00      	add	r7, sp, #0
 8020fb2:	6078      	str	r0, [r7, #4]
 8020fb4:	687b      	ldr	r3, [r7, #4]
 8020fb6:	2200      	movs	r2, #0
 8020fb8:	601a      	str	r2, [r3, #0]
 8020fba:	687b      	ldr	r3, [r7, #4]
 8020fbc:	2200      	movs	r2, #0
 8020fbe:	605a      	str	r2, [r3, #4]
 8020fc0:	687b      	ldr	r3, [r7, #4]
 8020fc2:	2200      	movs	r2, #0
 8020fc4:	609a      	str	r2, [r3, #8]
 8020fc6:	687b      	ldr	r3, [r7, #4]
 8020fc8:	4618      	mov	r0, r3
 8020fca:	370c      	adds	r7, #12
 8020fcc:	46bd      	mov	sp, r7
 8020fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020fd2:	4770      	bx	lr

08020fd4 <_ZN10FixedQueueI8ResponceLj10EEC1Ev>:
 8020fd4:	b480      	push	{r7}
 8020fd6:	b083      	sub	sp, #12
 8020fd8:	af00      	add	r7, sp, #0
 8020fda:	6078      	str	r0, [r7, #4]
 8020fdc:	687b      	ldr	r3, [r7, #4]
 8020fde:	2200      	movs	r2, #0
 8020fe0:	601a      	str	r2, [r3, #0]
 8020fe2:	687b      	ldr	r3, [r7, #4]
 8020fe4:	2200      	movs	r2, #0
 8020fe6:	605a      	str	r2, [r3, #4]
 8020fe8:	687b      	ldr	r3, [r7, #4]
 8020fea:	2200      	movs	r2, #0
 8020fec:	609a      	str	r2, [r3, #8]
 8020fee:	687b      	ldr	r3, [r7, #4]
 8020ff0:	4618      	mov	r0, r3
 8020ff2:	370c      	adds	r7, #12
 8020ff4:	46bd      	mov	sp, r7
 8020ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ffa:	4770      	bx	lr

08020ffc <_ZN11QueueSenderC1EP20__UART_HandleTypeDefjh>:
	};

public:
	QueueSender() = default;

	QueueSender(UART_HandleTypeDef *uart, size_t timeoutS, uint8_t sendPeriod) :
 8020ffc:	b580      	push	{r7, lr}
 8020ffe:	b084      	sub	sp, #16
 8021000:	af00      	add	r7, sp, #0
 8021002:	60f8      	str	r0, [r7, #12]
 8021004:	60b9      	str	r1, [r7, #8]
 8021006:	607a      	str	r2, [r7, #4]
 8021008:	70fb      	strb	r3, [r7, #3]
			UartHandle { uart }, TimeoutS { timeoutS }, SendPeriod { sendPeriod } {
 802100a:	68fb      	ldr	r3, [r7, #12]
 802100c:	4618      	mov	r0, r3
 802100e:	f7ff ffcd 	bl	8020fac <_ZN10FixedQueueI7RequestLj500EEC1Ev>
 8021012:	68fa      	ldr	r2, [r7, #12]
 8021014:	4b22      	ldr	r3, [pc, #136]	; (80210a0 <_ZN11QueueSenderC1EP20__UART_HandleTypeDefjh+0xa4>)
 8021016:	4413      	add	r3, r2
 8021018:	4618      	mov	r0, r3
 802101a:	f7ff ffdb 	bl	8020fd4 <_ZN10FixedQueueI8ResponceLj10EEC1Ev>
 802101e:	68fb      	ldr	r3, [r7, #12]
 8021020:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8021024:	2200      	movs	r2, #0
 8021026:	f883 26e4 	strb.w	r2, [r3, #1764]	; 0x6e4
 802102a:	68fb      	ldr	r3, [r7, #12]
 802102c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8021030:	2200      	movs	r2, #0
 8021032:	f883 26e5 	strb.w	r2, [r3, #1765]	; 0x6e5
 8021036:	68fb      	ldr	r3, [r7, #12]
 8021038:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 802103c:	461a      	mov	r2, r3
 802103e:	68bb      	ldr	r3, [r7, #8]
 8021040:	f8c2 37e8 	str.w	r3, [r2, #2024]	; 0x7e8
 8021044:	68fb      	ldr	r3, [r7, #12]
 8021046:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 802104a:	461a      	mov	r2, r3
 802104c:	687b      	ldr	r3, [r7, #4]
 802104e:	f8c2 37ec 	str.w	r3, [r2, #2028]	; 0x7ec
 8021052:	68fb      	ldr	r3, [r7, #12]
 8021054:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8021058:	461a      	mov	r2, r3
 802105a:	78fb      	ldrb	r3, [r7, #3]
 802105c:	f882 37f0 	strb.w	r3, [r2, #2032]	; 0x7f0
 8021060:	68fb      	ldr	r3, [r7, #12]
 8021062:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8021066:	2200      	movs	r2, #0
 8021068:	f883 27f1 	strb.w	r2, [r3, #2033]	; 0x7f1
 802106c:	68fb      	ldr	r3, [r7, #12]
 802106e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8021072:	2201      	movs	r2, #1
 8021074:	f883 27f2 	strb.w	r2, [r3, #2034]	; 0x7f2
 8021078:	68fb      	ldr	r3, [r7, #12]
 802107a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 802107e:	2200      	movs	r2, #0
 8021080:	f883 27f3 	strb.w	r2, [r3, #2035]	; 0x7f3
		assert(uart != NULL);
 8021084:	68bb      	ldr	r3, [r7, #8]
 8021086:	2b00      	cmp	r3, #0
 8021088:	d105      	bne.n	8021096 <_ZN11QueueSenderC1EP20__UART_HandleTypeDefjh+0x9a>
 802108a:	4b06      	ldr	r3, [pc, #24]	; (80210a4 <_ZN11QueueSenderC1EP20__UART_HandleTypeDefjh+0xa8>)
 802108c:	4a06      	ldr	r2, [pc, #24]	; (80210a8 <_ZN11QueueSenderC1EP20__UART_HandleTypeDefjh+0xac>)
 802108e:	21b1      	movs	r1, #177	; 0xb1
 8021090:	4806      	ldr	r0, [pc, #24]	; (80210ac <_ZN11QueueSenderC1EP20__UART_HandleTypeDefjh+0xb0>)
 8021092:	f01a fe0b 	bl	803bcac <__assert_func>
	}
 8021096:	68fb      	ldr	r3, [r7, #12]
 8021098:	4618      	mov	r0, r3
 802109a:	3710      	adds	r7, #16
 802109c:	46bd      	mov	sp, r7
 802109e:	bd80      	pop	{r7, pc}
 80210a0:	00020b7c 	.word	0x00020b7c
 80210a4:	0803cf24 	.word	0x0803cf24
 80210a8:	0803cf34 	.word	0x0803cf34
 80210ac:	0803cf00 	.word	0x0803cf00

080210b0 <_ZN11QueueSender10AddRequestERK7Request>:

	void AddRequest(const Request &request) {
 80210b0:	b590      	push	{r4, r7, lr}
 80210b2:	f5ad 7d49 	sub.w	sp, sp, #804	; 0x324
 80210b6:	af00      	add	r7, sp, #0
 80210b8:	f507 7348 	add.w	r3, r7, #800	; 0x320
 80210bc:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 80210c0:	6018      	str	r0, [r3, #0]
 80210c2:	f507 7348 	add.w	r3, r7, #800	; 0x320
 80210c6:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 80210ca:	6019      	str	r1, [r3, #0]
		switch (MessageMode::Deserialize(request.MetaInfo)) {
 80210cc:	f507 7348 	add.w	r3, r7, #800	; 0x320
 80210d0:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 80210d4:	681b      	ldr	r3, [r3, #0]
 80210d6:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 80210da:	4618      	mov	r0, r3
 80210dc:	f7ff ff15 	bl	8020f0a <_ZN11QueueSender11MessageMode11DeserializeEh>
 80210e0:	4603      	mov	r3, r0
 80210e2:	2b03      	cmp	r3, #3
 80210e4:	f200 808e 	bhi.w	8021204 <_ZN11QueueSender10AddRequestERK7Request+0x154>
 80210e8:	a201      	add	r2, pc, #4	; (adr r2, 80210f0 <_ZN11QueueSender10AddRequestERK7Request+0x40>)
 80210ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80210ee:	bf00      	nop
 80210f0:	0802113d 	.word	0x0802113d
 80210f4:	08021101 	.word	0x08021101
 80210f8:	08021193 	.word	0x08021193
 80210fc:	080211c7 	.word	0x080211c7
		case MessageMode::Async:
			Responces.Push(CreateAsyncResponce(request));
 8021100:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8021104:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 8021108:	681b      	ldr	r3, [r3, #0]
 802110a:	4c41      	ldr	r4, [pc, #260]	; (8021210 <_ZN11QueueSender10AddRequestERK7Request+0x160>)
 802110c:	441c      	add	r4, r3
 802110e:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8021112:	f5a3 7046 	sub.w	r0, r3, #792	; 0x318
 8021116:	f507 7348 	add.w	r3, r7, #800	; 0x320
 802111a:	f5a3 7248 	sub.w	r2, r3, #800	; 0x320
 802111e:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8021122:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 8021126:	6812      	ldr	r2, [r2, #0]
 8021128:	6819      	ldr	r1, [r3, #0]
 802112a:	f000 fc8d 	bl	8021a48 <_ZN11QueueSender19CreateAsyncResponceERK7Request>
 802112e:	f107 0308 	add.w	r3, r7, #8
 8021132:	4619      	mov	r1, r3
 8021134:	4620      	mov	r0, r4
 8021136:	f002 f99f 	bl	8023478 <_ZN10FixedQueueI8ResponceLj10EE4PushERKS0_>
			break;
 802113a:	e063      	b.n	8021204 <_ZN11QueueSender10AddRequestERK7Request+0x154>
		case MessageMode::Sync:
			if (HasPriorityRequest)
 802113c:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8021140:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 8021144:	681b      	ldr	r3, [r3, #0]
 8021146:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 802114a:	f893 36e4 	ldrb.w	r3, [r3, #1764]	; 0x6e4
 802114e:	2b00      	cmp	r3, #0
 8021150:	d157      	bne.n	8021202 <_ZN11QueueSender10AddRequestERK7Request+0x152>
				break;

			PriorityRequest = request;
 8021152:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8021156:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 802115a:	681b      	ldr	r3, [r3, #0]
 802115c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8021160:	4619      	mov	r1, r3
 8021162:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8021166:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 802116a:	681a      	ldr	r2, [r3, #0]
 802116c:	f501 63bb 	add.w	r3, r1, #1496	; 0x5d8
 8021170:	4611      	mov	r1, r2
 8021172:	f44f 7286 	mov.w	r2, #268	; 0x10c
 8021176:	4618      	mov	r0, r3
 8021178:	f01a fe02 	bl	803bd80 <memcpy>
			HasPriorityRequest = true;
 802117c:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8021180:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 8021184:	681b      	ldr	r3, [r3, #0]
 8021186:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 802118a:	2201      	movs	r2, #1
 802118c:	f883 26e4 	strb.w	r2, [r3, #1764]	; 0x6e4
			break;
 8021190:	e038      	b.n	8021204 <_ZN11QueueSender10AddRequestERK7Request+0x154>

		case MessageMode::Info:
			Responces.Push(CreateInfoResponce());
 8021192:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8021196:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 802119a:	681b      	ldr	r3, [r3, #0]
 802119c:	4c1c      	ldr	r4, [pc, #112]	; (8021210 <_ZN11QueueSender10AddRequestERK7Request+0x160>)
 802119e:	441c      	add	r4, r3
 80211a0:	f507 7348 	add.w	r3, r7, #800	; 0x320
 80211a4:	f5a3 7204 	sub.w	r2, r3, #528	; 0x210
 80211a8:	f507 7348 	add.w	r3, r7, #800	; 0x320
 80211ac:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 80211b0:	6819      	ldr	r1, [r3, #0]
 80211b2:	4610      	mov	r0, r2
 80211b4:	f000 fb87 	bl	80218c6 <_ZNK11QueueSender18CreateInfoResponceEv>
 80211b8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80211bc:	4619      	mov	r1, r3
 80211be:	4620      	mov	r0, r4
 80211c0:	f002 f95a 	bl	8023478 <_ZN10FixedQueueI8ResponceLj10EE4PushERKS0_>
			break;
 80211c4:	e01e      	b.n	8021204 <_ZN11QueueSender10AddRequestERK7Request+0x154>
		case MessageMode::SetPeriod:
			Responces.Push(ProcessSetPeriodRequest(request));
 80211c6:	f507 7348 	add.w	r3, r7, #800	; 0x320
 80211ca:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 80211ce:	681b      	ldr	r3, [r3, #0]
 80211d0:	4c0f      	ldr	r4, [pc, #60]	; (8021210 <_ZN11QueueSender10AddRequestERK7Request+0x160>)
 80211d2:	441c      	add	r4, r3
 80211d4:	f507 7348 	add.w	r3, r7, #800	; 0x320
 80211d8:	f5a3 7084 	sub.w	r0, r3, #264	; 0x108
 80211dc:	f507 7348 	add.w	r3, r7, #800	; 0x320
 80211e0:	f5a3 7248 	sub.w	r2, r3, #800	; 0x320
 80211e4:	f507 7348 	add.w	r3, r7, #800	; 0x320
 80211e8:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 80211ec:	6812      	ldr	r2, [r2, #0]
 80211ee:	6819      	ldr	r1, [r3, #0]
 80211f0:	f000 fbbe 	bl	8021970 <_ZN11QueueSender23ProcessSetPeriodRequestERK7Request>
 80211f4:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80211f8:	4619      	mov	r1, r3
 80211fa:	4620      	mov	r0, r4
 80211fc:	f002 f93c 	bl	8023478 <_ZN10FixedQueueI8ResponceLj10EE4PushERKS0_>
			break;
 8021200:	e000      	b.n	8021204 <_ZN11QueueSender10AddRequestERK7Request+0x154>
				break;
 8021202:	bf00      	nop
		}
	}
 8021204:	bf00      	nop
 8021206:	f507 7749 	add.w	r7, r7, #804	; 0x324
 802120a:	46bd      	mov	sp, r7
 802120c:	bd90      	pop	{r4, r7, pc}
 802120e:	bf00      	nop
 8021210:	00020b7c 	.word	0x00020b7c

08021214 <_ZNK11QueueSender11HasResponceEv>:

	bool HasResponce() const {
 8021214:	b580      	push	{r7, lr}
 8021216:	b082      	sub	sp, #8
 8021218:	af00      	add	r7, sp, #0
 802121a:	6078      	str	r0, [r7, #4]
		return !Responces.Empty();
 802121c:	687a      	ldr	r2, [r7, #4]
 802121e:	4b06      	ldr	r3, [pc, #24]	; (8021238 <_ZNK11QueueSender11HasResponceEv+0x24>)
 8021220:	4413      	add	r3, r2
 8021222:	4618      	mov	r0, r3
 8021224:	f002 f96a 	bl	80234fc <_ZNK10FixedQueueI8ResponceLj10EE5EmptyEv>
 8021228:	4603      	mov	r3, r0
 802122a:	f083 0301 	eor.w	r3, r3, #1
 802122e:	b2db      	uxtb	r3, r3
	}
 8021230:	4618      	mov	r0, r3
 8021232:	3708      	adds	r7, #8
 8021234:	46bd      	mov	sp, r7
 8021236:	bd80      	pop	{r7, pc}
 8021238:	00020b7c 	.word	0x00020b7c

0802123c <_ZN11QueueSender9TickTimerEv>:

	void TickTimer() {
 802123c:	b480      	push	{r7}
 802123e:	b083      	sub	sp, #12
 8021240:	af00      	add	r7, sp, #0
 8021242:	6078      	str	r0, [r7, #4]
		SendTick = (SendTick + 1) % SendPeriod;
 8021244:	687b      	ldr	r3, [r7, #4]
 8021246:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 802124a:	f893 37f1 	ldrb.w	r3, [r3, #2033]	; 0x7f1
 802124e:	3301      	adds	r3, #1
 8021250:	687a      	ldr	r2, [r7, #4]
 8021252:	f502 3204 	add.w	r2, r2, #135168	; 0x21000
 8021256:	f892 27f0 	ldrb.w	r2, [r2, #2032]	; 0x7f0
 802125a:	fb93 f1f2 	sdiv	r1, r3, r2
 802125e:	fb01 f202 	mul.w	r2, r1, r2
 8021262:	1a9b      	subs	r3, r3, r2
 8021264:	b2da      	uxtb	r2, r3
 8021266:	687b      	ldr	r3, [r7, #4]
 8021268:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 802126c:	f883 27f1 	strb.w	r2, [r3, #2033]	; 0x7f1
		if (SendTick != 0)
 8021270:	687b      	ldr	r3, [r7, #4]
 8021272:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8021276:	f893 37f1 	ldrb.w	r3, [r3, #2033]	; 0x7f1
 802127a:	2b00      	cmp	r3, #0
 802127c:	d106      	bne.n	802128c <_ZN11QueueSender9TickTimerEv+0x50>
			return;

		TimerReady = true;
 802127e:	687b      	ldr	r3, [r7, #4]
 8021280:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8021284:	2201      	movs	r2, #1
 8021286:	f883 27f3 	strb.w	r2, [r3, #2035]	; 0x7f3
 802128a:	e000      	b.n	802128e <_ZN11QueueSender9TickTimerEv+0x52>
			return;
 802128c:	bf00      	nop
	}
 802128e:	370c      	adds	r7, #12
 8021290:	46bd      	mov	sp, r7
 8021292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021296:	4770      	bx	lr

08021298 <_ZN11QueueSender13SetSendPeriodEh>:

	void SetSendPeriod(uint8_t periodMs) {
 8021298:	b580      	push	{r7, lr}
 802129a:	b082      	sub	sp, #8
 802129c:	af00      	add	r7, sp, #0
 802129e:	6078      	str	r0, [r7, #4]
 80212a0:	460b      	mov	r3, r1
 80212a2:	70fb      	strb	r3, [r7, #3]
		assert(periodMs);
 80212a4:	78fb      	ldrb	r3, [r7, #3]
 80212a6:	2b00      	cmp	r3, #0
 80212a8:	d105      	bne.n	80212b6 <_ZN11QueueSender13SetSendPeriodEh+0x1e>
 80212aa:	4b08      	ldr	r3, [pc, #32]	; (80212cc <_ZN11QueueSender13SetSendPeriodEh+0x34>)
 80212ac:	4a08      	ldr	r2, [pc, #32]	; (80212d0 <_ZN11QueueSender13SetSendPeriodEh+0x38>)
 80212ae:	21d7      	movs	r1, #215	; 0xd7
 80212b0:	4808      	ldr	r0, [pc, #32]	; (80212d4 <_ZN11QueueSender13SetSendPeriodEh+0x3c>)
 80212b2:	f01a fcfb 	bl	803bcac <__assert_func>
		SendPeriod = periodMs;
 80212b6:	687b      	ldr	r3, [r7, #4]
 80212b8:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80212bc:	461a      	mov	r2, r3
 80212be:	78fb      	ldrb	r3, [r7, #3]
 80212c0:	f882 37f0 	strb.w	r3, [r2, #2032]	; 0x7f0
	}
 80212c4:	bf00      	nop
 80212c6:	3708      	adds	r7, #8
 80212c8:	46bd      	mov	sp, r7
 80212ca:	bd80      	pop	{r7, pc}
 80212cc:	0803cf74 	.word	0x0803cf74
 80212d0:	0803cf80 	.word	0x0803cf80
 80212d4:	0803cf00 	.word	0x0803cf00

080212d8 <_ZN11QueueSender11GetResponceEv>:

	Responce GetResponce() {
 80212d8:	b580      	push	{r7, lr}
 80212da:	b082      	sub	sp, #8
 80212dc:	af00      	add	r7, sp, #0
 80212de:	6078      	str	r0, [r7, #4]
 80212e0:	6039      	str	r1, [r7, #0]
		assert(HasResponce());
 80212e2:	6838      	ldr	r0, [r7, #0]
 80212e4:	f7ff ff96 	bl	8021214 <_ZNK11QueueSender11HasResponceEv>
 80212e8:	4603      	mov	r3, r0
 80212ea:	2b00      	cmp	r3, #0
 80212ec:	d105      	bne.n	80212fa <_ZN11QueueSender11GetResponceEv+0x22>
 80212ee:	4b10      	ldr	r3, [pc, #64]	; (8021330 <_ZN11QueueSender11GetResponceEv+0x58>)
 80212f0:	4a10      	ldr	r2, [pc, #64]	; (8021334 <_ZN11QueueSender11GetResponceEv+0x5c>)
 80212f2:	21dc      	movs	r1, #220	; 0xdc
 80212f4:	4810      	ldr	r0, [pc, #64]	; (8021338 <_ZN11QueueSender11GetResponceEv+0x60>)
 80212f6:	f01a fcd9 	bl	803bcac <__assert_func>
		Responce responce = Responces.Front();
 80212fa:	683a      	ldr	r2, [r7, #0]
 80212fc:	4b0f      	ldr	r3, [pc, #60]	; (802133c <_ZN11QueueSender11GetResponceEv+0x64>)
 80212fe:	4413      	add	r3, r2
 8021300:	4618      	mov	r0, r3
 8021302:	f002 f90d 	bl	8023520 <_ZNK10FixedQueueI8ResponceLj10EE5FrontEv>
 8021306:	4602      	mov	r2, r0
 8021308:	687b      	ldr	r3, [r7, #4]
 802130a:	4618      	mov	r0, r3
 802130c:	4611      	mov	r1, r2
 802130e:	f44f 7384 	mov.w	r3, #264	; 0x108
 8021312:	461a      	mov	r2, r3
 8021314:	f01a fd34 	bl	803bd80 <memcpy>
		Responces.Pop();
 8021318:	683a      	ldr	r2, [r7, #0]
 802131a:	4b08      	ldr	r3, [pc, #32]	; (802133c <_ZN11QueueSender11GetResponceEv+0x64>)
 802131c:	4413      	add	r3, r2
 802131e:	4618      	mov	r0, r3
 8021320:	f002 f920 	bl	8023564 <_ZN10FixedQueueI8ResponceLj10EE3PopEv>
		return responce;
 8021324:	bf00      	nop
	}
 8021326:	6878      	ldr	r0, [r7, #4]
 8021328:	3708      	adds	r7, #8
 802132a:	46bd      	mov	sp, r7
 802132c:	bd80      	pop	{r7, pc}
 802132e:	bf00      	nop
 8021330:	0803cfac 	.word	0x0803cfac
 8021334:	0803cfbc 	.word	0x0803cfbc
 8021338:	0803cf00 	.word	0x0803cf00
 802133c:	00020b7c 	.word	0x00020b7c

08021340 <_ZN11QueueSender22ProcessPriorityRequestEv>:

	void ProcessPriorityRequest() {
 8021340:	b5b0      	push	{r4, r5, r7, lr}
 8021342:	b0cc      	sub	sp, #304	; 0x130
 8021344:	af02      	add	r7, sp, #8
 8021346:	f507 7394 	add.w	r3, r7, #296	; 0x128
 802134a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 802134e:	6018      	str	r0, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8021350:	b672      	cpsid	i
}
 8021352:	bf00      	nop
		__disable_irq();
		if (HasPriorityRequest && !WaitResponce && TransmitComplete) {
 8021354:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8021358:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 802135c:	681b      	ldr	r3, [r3, #0]
 802135e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8021362:	f893 36e4 	ldrb.w	r3, [r3, #1764]	; 0x6e4
 8021366:	2b00      	cmp	r3, #0
 8021368:	f000 80ef 	beq.w	802154a <_ZN11QueueSender22ProcessPriorityRequestEv+0x20a>
 802136c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8021370:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8021374:	681b      	ldr	r3, [r3, #0]
 8021376:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 802137a:	f893 36e5 	ldrb.w	r3, [r3, #1765]	; 0x6e5
 802137e:	f083 0301 	eor.w	r3, r3, #1
 8021382:	b2db      	uxtb	r3, r3
 8021384:	2b00      	cmp	r3, #0
 8021386:	f000 80e0 	beq.w	802154a <_ZN11QueueSender22ProcessPriorityRequestEv+0x20a>
 802138a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 802138e:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8021392:	681b      	ldr	r3, [r3, #0]
 8021394:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8021398:	f893 37f2 	ldrb.w	r3, [r3, #2034]	; 0x7f2
 802139c:	2b00      	cmp	r3, #0
 802139e:	f000 80d4 	beq.w	802154a <_ZN11QueueSender22ProcessPriorityRequestEv+0x20a>
			HasPriorityRequest = false;
 80213a2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80213a6:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80213aa:	681b      	ldr	r3, [r3, #0]
 80213ac:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80213b0:	2200      	movs	r2, #0
 80213b2:	f883 26e4 	strb.w	r2, [r3, #1764]	; 0x6e4
			WaitResponce = true;
 80213b6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80213ba:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80213be:	681b      	ldr	r3, [r3, #0]
 80213c0:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80213c4:	2201      	movs	r2, #1
 80213c6:	f883 26e5 	strb.w	r2, [r3, #1765]	; 0x6e5
  __ASM volatile ("cpsie i" : : : "memory");
 80213ca:	b662      	cpsie	i
}
 80213cc:	bf00      	nop
			__enable_irq();

			auto &request = PriorityRequest;
 80213ce:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80213d2:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80213d6:	681a      	ldr	r2, [r3, #0]
 80213d8:	4b5f      	ldr	r3, [pc, #380]	; (8021558 <_ZN11QueueSender22ProcessPriorityRequestEv+0x218>)
 80213da:	4413      	add	r3, r2
 80213dc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
			auto &data = request.Data;
 80213e0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80213e4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

			assert(
 80213e8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80213ec:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 80213f0:	4618      	mov	r0, r3
 80213f2:	f7ff fd8a 	bl	8020f0a <_ZN11QueueSender11MessageMode11DeserializeEh>
 80213f6:	4603      	mov	r3, r0
 80213f8:	2b00      	cmp	r3, #0
 80213fa:	d005      	beq.n	8021408 <_ZN11QueueSender22ProcessPriorityRequestEv+0xc8>
 80213fc:	4b57      	ldr	r3, [pc, #348]	; (802155c <_ZN11QueueSender22ProcessPriorityRequestEv+0x21c>)
 80213fe:	4a58      	ldr	r2, [pc, #352]	; (8021560 <_ZN11QueueSender22ProcessPriorityRequestEv+0x220>)
 8021400:	21ec      	movs	r1, #236	; 0xec
 8021402:	4858      	ldr	r0, [pc, #352]	; (8021564 <_ZN11QueueSender22ProcessPriorityRequestEv+0x224>)
 8021404:	f01a fc52 	bl	803bcac <__assert_func>
  __ASM volatile ("cpsid i" : : : "memory");
 8021408:	b672      	cpsid	i
}
 802140a:	bf00      	nop
					MessageMode::Deserialize(request.MetaInfo)
							== MessageMode::Sync);
			__disable_irq();
			TransmitComplete = false;
 802140c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8021410:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8021414:	681b      	ldr	r3, [r3, #0]
 8021416:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 802141a:	2200      	movs	r2, #0
 802141c:	f883 27f2 	strb.w	r2, [r3, #2034]	; 0x7f2
  __ASM volatile ("cpsie i" : : : "memory");
 8021420:	b662      	cpsie	i
}
 8021422:	bf00      	nop
			__enable_irq();

			assert(
 8021424:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8021428:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 802142c:	681b      	ldr	r3, [r3, #0]
 802142e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8021432:	f8d3 47e8 	ldr.w	r4, [r3, #2024]	; 0x7e8
 8021436:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 802143a:	f002 f8c1 	bl	80235c0 <_ZNSt5arrayIhLj256EE4dataEv>
 802143e:	4601      	mov	r1, r0
 8021440:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8021444:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8021448:	b29b      	uxth	r3, r3
 802144a:	461a      	mov	r2, r3
 802144c:	4620      	mov	r0, r4
 802144e:	f013 fe01 	bl	8035054 <HAL_UART_Transmit_IT>
 8021452:	4603      	mov	r3, r0
 8021454:	2b00      	cmp	r3, #0
 8021456:	d005      	beq.n	8021464 <_ZN11QueueSender22ProcessPriorityRequestEv+0x124>
 8021458:	4b43      	ldr	r3, [pc, #268]	; (8021568 <_ZN11QueueSender22ProcessPriorityRequestEv+0x228>)
 802145a:	4a41      	ldr	r2, [pc, #260]	; (8021560 <_ZN11QueueSender22ProcessPriorityRequestEv+0x220>)
 802145c:	21f3      	movs	r1, #243	; 0xf3
 802145e:	4841      	ldr	r0, [pc, #260]	; (8021564 <_ZN11QueueSender22ProcessPriorityRequestEv+0x224>)
 8021460:	f01a fc24 	bl	803bcac <__assert_func>
					HAL_UART_Transmit_IT(UartHandle, data.data(),
							request.RequestSize) == HAL_OK);

			while (!TransmitComplete)
 8021464:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8021468:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 802146c:	681b      	ldr	r3, [r3, #0]
 802146e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8021472:	f893 37f2 	ldrb.w	r3, [r3, #2034]	; 0x7f2
 8021476:	2b00      	cmp	r3, #0
 8021478:	d100      	bne.n	802147c <_ZN11QueueSender22ProcessPriorityRequestEv+0x13c>
 802147a:	e7f3      	b.n	8021464 <_ZN11QueueSender22ProcessPriorityRequestEv+0x124>
				;

			ErrorCode::Type error = Receive(request.ResponceSize);
 802147c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8021480:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8021484:	b2da      	uxtb	r2, r3
 8021486:	f507 7394 	add.w	r3, r7, #296	; 0x128
 802148a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 802148e:	4611      	mov	r1, r2
 8021490:	6818      	ldr	r0, [r3, #0]
 8021492:	f000 f93d 	bl	8021710 <_ZN11QueueSender7ReceiveEh>
 8021496:	4603      	mov	r3, r0
 8021498:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

			if (error == ErrorCode::NACK) {
 802149c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80214a0:	2b02      	cmp	r3, #2
 80214a2:	d11e      	bne.n	80214e2 <_ZN11QueueSender22ProcessPriorityRequestEv+0x1a2>
				uint32_t delayMS = 5;
 80214a4:	2305      	movs	r3, #5
 80214a6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
				HAL_Delay(delayMS);
 80214aa:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 80214ae:	f009 fb8f 	bl	802abd0 <HAL_Delay>

				uint8_t dummy;
				while (HAL_UART_Receive(UartHandle, &dummy, 1, 0) == HAL_OK)
 80214b2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80214b6:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80214ba:	681b      	ldr	r3, [r3, #0]
 80214bc:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80214c0:	f8d3 07e8 	ldr.w	r0, [r3, #2024]	; 0x7e8
 80214c4:	f107 010f 	add.w	r1, r7, #15
 80214c8:	2300      	movs	r3, #0
 80214ca:	2201      	movs	r2, #1
 80214cc:	f013 fcee 	bl	8034eac <HAL_UART_Receive>
 80214d0:	4603      	mov	r3, r0
 80214d2:	2b00      	cmp	r3, #0
 80214d4:	bf0c      	ite	eq
 80214d6:	2301      	moveq	r3, #1
 80214d8:	2300      	movne	r3, #0
 80214da:	b2db      	uxtb	r3, r3
 80214dc:	2b00      	cmp	r3, #0
 80214de:	d000      	beq.n	80214e2 <_ZN11QueueSender22ProcessPriorityRequestEv+0x1a2>
 80214e0:	e7e7      	b.n	80214b2 <_ZN11QueueSender22ProcessPriorityRequestEv+0x172>
					;
			}

			Responces.Push(
 80214e2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80214e6:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80214ea:	681b      	ldr	r3, [r3, #0]
 80214ec:	4c1f      	ldr	r4, [pc, #124]	; (802156c <_ZN11QueueSender22ProcessPriorityRequestEv+0x22c>)
 80214ee:	441c      	add	r4, r3
					CreateResponce(CurrentResponceBuffer, request.ResponceSize,
 80214f0:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80214f4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80214f8:	681b      	ldr	r3, [r3, #0]
 80214fa:	4a1d      	ldr	r2, [pc, #116]	; (8021570 <_ZN11QueueSender22ProcessPriorityRequestEv+0x230>)
 80214fc:	441a      	add	r2, r3
							MessageMode::Sync, error));
 80214fe:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8021502:	f8d3 5104 	ldr.w	r5, [r3, #260]	; 0x104
 8021506:	f507 7394 	add.w	r3, r7, #296	; 0x128
 802150a:	f5a3 708c 	sub.w	r0, r3, #280	; 0x118
 802150e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8021512:	f5a3 7192 	sub.w	r1, r3, #292	; 0x124
 8021516:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 802151a:	9301      	str	r3, [sp, #4]
 802151c:	2300      	movs	r3, #0
 802151e:	9300      	str	r3, [sp, #0]
 8021520:	462b      	mov	r3, r5
 8021522:	6809      	ldr	r1, [r1, #0]
 8021524:	f000 f9a0 	bl	8021868 <_ZNK11QueueSender14CreateResponceERKSt5arrayIhLj256EEjhh>
			Responces.Push(
 8021528:	f107 0310 	add.w	r3, r7, #16
 802152c:	4619      	mov	r1, r3
 802152e:	4620      	mov	r0, r4
 8021530:	f001 ffa2 	bl	8023478 <_ZN10FixedQueueI8ResponceLj10EE4PushERKS0_>

			WaitResponce = false;
 8021534:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8021538:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 802153c:	681b      	ldr	r3, [r3, #0]
 802153e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8021542:	2200      	movs	r2, #0
 8021544:	f883 26e5 	strb.w	r2, [r3, #1765]	; 0x6e5
 8021548:	e001      	b.n	802154e <_ZN11QueueSender22ProcessPriorityRequestEv+0x20e>
  __ASM volatile ("cpsie i" : : : "memory");
 802154a:	b662      	cpsie	i
}
 802154c:	bf00      	nop
		} else {
			__enable_irq();
		}
	}
 802154e:	bf00      	nop
 8021550:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8021554:	46bd      	mov	sp, r7
 8021556:	bdb0      	pop	{r4, r5, r7, pc}
 8021558:	000215d8 	.word	0x000215d8
 802155c:	0803cfe0 	.word	0x0803cfe0
 8021560:	0803d020 	.word	0x0803d020
 8021564:	0803cf00 	.word	0x0803cf00
 8021568:	0803d04c 	.word	0x0803d04c
 802156c:	00020b7c 	.word	0x00020b7c
 8021570:	000216e6 	.word	0x000216e6

08021574 <_ZN11QueueSender15ProcessRequestsEv>:

	void ProcessRequests() {
 8021574:	b590      	push	{r4, r7, lr}
 8021576:	b089      	sub	sp, #36	; 0x24
 8021578:	af00      	add	r7, sp, #0
 802157a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 802157c:	b672      	cpsid	i
}
 802157e:	bf00      	nop
		__disable_irq();
		if (TimerReady && !Requests.Empty() && !WaitResponce
 8021580:	687b      	ldr	r3, [r7, #4]
 8021582:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8021586:	f893 37f3 	ldrb.w	r3, [r3, #2035]	; 0x7f3
				&& TransmitComplete) {
 802158a:	2b00      	cmp	r3, #0
 802158c:	d01c      	beq.n	80215c8 <_ZN11QueueSender15ProcessRequestsEv+0x54>
		if (TimerReady && !Requests.Empty() && !WaitResponce
 802158e:	687b      	ldr	r3, [r7, #4]
 8021590:	4618      	mov	r0, r3
 8021592:	f002 f822 	bl	80235da <_ZNK10FixedQueueI7RequestLj500EE5EmptyEv>
 8021596:	4603      	mov	r3, r0
 8021598:	f083 0301 	eor.w	r3, r3, #1
 802159c:	b2db      	uxtb	r3, r3
 802159e:	2b00      	cmp	r3, #0
 80215a0:	d012      	beq.n	80215c8 <_ZN11QueueSender15ProcessRequestsEv+0x54>
 80215a2:	687b      	ldr	r3, [r7, #4]
 80215a4:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80215a8:	f893 36e5 	ldrb.w	r3, [r3, #1765]	; 0x6e5
 80215ac:	f083 0301 	eor.w	r3, r3, #1
 80215b0:	b2db      	uxtb	r3, r3
 80215b2:	2b00      	cmp	r3, #0
 80215b4:	d008      	beq.n	80215c8 <_ZN11QueueSender15ProcessRequestsEv+0x54>
				&& TransmitComplete) {
 80215b6:	687b      	ldr	r3, [r7, #4]
 80215b8:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80215bc:	f893 37f2 	ldrb.w	r3, [r3, #2034]	; 0x7f2
 80215c0:	2b00      	cmp	r3, #0
 80215c2:	d001      	beq.n	80215c8 <_ZN11QueueSender15ProcessRequestsEv+0x54>
 80215c4:	2301      	movs	r3, #1
 80215c6:	e000      	b.n	80215ca <_ZN11QueueSender15ProcessRequestsEv+0x56>
 80215c8:	2300      	movs	r3, #0
		if (TimerReady && !Requests.Empty() && !WaitResponce
 80215ca:	2b00      	cmp	r3, #0
 80215cc:	f000 8091 	beq.w	80216f2 <_ZN11QueueSender15ProcessRequestsEv+0x17e>

			WaitResponce = true;
 80215d0:	687b      	ldr	r3, [r7, #4]
 80215d2:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80215d6:	2201      	movs	r2, #1
 80215d8:	f883 26e5 	strb.w	r2, [r3, #1765]	; 0x6e5
  __ASM volatile ("cpsie i" : : : "memory");
 80215dc:	b662      	cpsie	i
}
 80215de:	bf00      	nop
			__enable_irq();

			auto &request = Requests.Front();
 80215e0:	687b      	ldr	r3, [r7, #4]
 80215e2:	4618      	mov	r0, r3
 80215e4:	f002 f80a 	bl	80235fc <_ZNK10FixedQueueI7RequestLj500EE5FrontEv>
 80215e8:	61b8      	str	r0, [r7, #24]
			auto &data = request.Data;
 80215ea:	69bb      	ldr	r3, [r7, #24]
 80215ec:	617b      	str	r3, [r7, #20]

			assert(
 80215ee:	69bb      	ldr	r3, [r7, #24]
 80215f0:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 80215f4:	4618      	mov	r0, r3
 80215f6:	f7ff fc88 	bl	8020f0a <_ZN11QueueSender11MessageMode11DeserializeEh>
 80215fa:	4603      	mov	r3, r0
 80215fc:	2b01      	cmp	r3, #1
 80215fe:	d006      	beq.n	802160e <_ZN11QueueSender15ProcessRequestsEv+0x9a>
 8021600:	4b3f      	ldr	r3, [pc, #252]	; (8021700 <_ZN11QueueSender15ProcessRequestsEv+0x18c>)
 8021602:	4a40      	ldr	r2, [pc, #256]	; (8021704 <_ZN11QueueSender15ProcessRequestsEv+0x190>)
 8021604:	f44f 718d 	mov.w	r1, #282	; 0x11a
 8021608:	483f      	ldr	r0, [pc, #252]	; (8021708 <_ZN11QueueSender15ProcessRequestsEv+0x194>)
 802160a:	f01a fb4f 	bl	803bcac <__assert_func>
					MessageMode::Deserialize(request.MetaInfo)
							== MessageMode::Async);

			const size_t nAttempts = 5;
 802160e:	2305      	movs	r3, #5
 8021610:	613b      	str	r3, [r7, #16]
			const uint32_t delayMS = 5;
 8021612:	2305      	movs	r3, #5
 8021614:	60fb      	str	r3, [r7, #12]
			size_t i = 0;
 8021616:	2300      	movs	r3, #0
 8021618:	61fb      	str	r3, [r7, #28]

			while (i++ < nAttempts) {
 802161a:	69fb      	ldr	r3, [r7, #28]
 802161c:	1c5a      	adds	r2, r3, #1
 802161e:	61fa      	str	r2, [r7, #28]
 8021620:	2b04      	cmp	r3, #4
 8021622:	bf94      	ite	ls
 8021624:	2301      	movls	r3, #1
 8021626:	2300      	movhi	r3, #0
 8021628:	b2db      	uxtb	r3, r3
 802162a:	2b00      	cmp	r3, #0
 802162c:	d050      	beq.n	80216d0 <_ZN11QueueSender15ProcessRequestsEv+0x15c>

				TransmitComplete = false;
 802162e:	687b      	ldr	r3, [r7, #4]
 8021630:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8021634:	2200      	movs	r2, #0
 8021636:	f883 27f2 	strb.w	r2, [r3, #2034]	; 0x7f2

				assert(
 802163a:	687b      	ldr	r3, [r7, #4]
 802163c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8021640:	f8d3 47e8 	ldr.w	r4, [r3, #2024]	; 0x7e8
 8021644:	6978      	ldr	r0, [r7, #20]
 8021646:	f001 fffb 	bl	8023640 <_ZNKSt5arrayIhLj256EE4dataEv>
 802164a:	4601      	mov	r1, r0
 802164c:	69bb      	ldr	r3, [r7, #24]
 802164e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8021652:	b29b      	uxth	r3, r3
 8021654:	461a      	mov	r2, r3
 8021656:	4620      	mov	r0, r4
 8021658:	f013 fcfc 	bl	8035054 <HAL_UART_Transmit_IT>
 802165c:	4603      	mov	r3, r0
 802165e:	2b00      	cmp	r3, #0
 8021660:	d006      	beq.n	8021670 <_ZN11QueueSender15ProcessRequestsEv+0xfc>
 8021662:	4b2a      	ldr	r3, [pc, #168]	; (802170c <_ZN11QueueSender15ProcessRequestsEv+0x198>)
 8021664:	4a27      	ldr	r2, [pc, #156]	; (8021704 <_ZN11QueueSender15ProcessRequestsEv+0x190>)
 8021666:	f44f 7193 	mov.w	r1, #294	; 0x126
 802166a:	4827      	ldr	r0, [pc, #156]	; (8021708 <_ZN11QueueSender15ProcessRequestsEv+0x194>)
 802166c:	f01a fb1e 	bl	803bcac <__assert_func>
						HAL_UART_Transmit_IT(UartHandle, data.data(),
								request.RequestSize) == HAL_OK);

				while (!TransmitComplete)
 8021670:	687b      	ldr	r3, [r7, #4]
 8021672:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8021676:	f893 37f2 	ldrb.w	r3, [r3, #2034]	; 0x7f2
 802167a:	2b00      	cmp	r3, #0
 802167c:	d100      	bne.n	8021680 <_ZN11QueueSender15ProcessRequestsEv+0x10c>
 802167e:	e7f7      	b.n	8021670 <_ZN11QueueSender15ProcessRequestsEv+0xfc>
					;

				ErrorCode::Type error = Receive(request.ResponceSize);
 8021680:	69bb      	ldr	r3, [r7, #24]
 8021682:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8021686:	b2db      	uxtb	r3, r3
 8021688:	4619      	mov	r1, r3
 802168a:	6878      	ldr	r0, [r7, #4]
 802168c:	f000 f840 	bl	8021710 <_ZN11QueueSender7ReceiveEh>
 8021690:	4603      	mov	r3, r0
 8021692:	72fb      	strb	r3, [r7, #11]
				if (error == ErrorCode::Success)
 8021694:	7afb      	ldrb	r3, [r7, #11]
 8021696:	2b00      	cmp	r3, #0
 8021698:	d019      	beq.n	80216ce <_ZN11QueueSender15ProcessRequestsEv+0x15a>
					break;
				HAL_Delay(delayMS);
 802169a:	2005      	movs	r0, #5
 802169c:	f009 fa98 	bl	802abd0 <HAL_Delay>
				if (error == ErrorCode::NACK) {
 80216a0:	7afb      	ldrb	r3, [r7, #11]
 80216a2:	2b02      	cmp	r3, #2
 80216a4:	d1b9      	bne.n	802161a <_ZN11QueueSender15ProcessRequestsEv+0xa6>
					uint8_t dummy;
					while (HAL_UART_Receive(UartHandle, &dummy, 1, 0) == HAL_OK)
 80216a6:	687b      	ldr	r3, [r7, #4]
 80216a8:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80216ac:	f8d3 07e8 	ldr.w	r0, [r3, #2024]	; 0x7e8
 80216b0:	f107 010a 	add.w	r1, r7, #10
 80216b4:	2300      	movs	r3, #0
 80216b6:	2201      	movs	r2, #1
 80216b8:	f013 fbf8 	bl	8034eac <HAL_UART_Receive>
 80216bc:	4603      	mov	r3, r0
 80216be:	2b00      	cmp	r3, #0
 80216c0:	bf0c      	ite	eq
 80216c2:	2301      	moveq	r3, #1
 80216c4:	2300      	movne	r3, #0
 80216c6:	b2db      	uxtb	r3, r3
 80216c8:	2b00      	cmp	r3, #0
 80216ca:	d0a6      	beq.n	802161a <_ZN11QueueSender15ProcessRequestsEv+0xa6>
 80216cc:	e7eb      	b.n	80216a6 <_ZN11QueueSender15ProcessRequestsEv+0x132>
					break;
 80216ce:	bf00      	nop
						;
				}
			}

			Requests.Pop();
 80216d0:	687b      	ldr	r3, [r7, #4]
 80216d2:	4618      	mov	r0, r3
 80216d4:	f001 ffc2 	bl	802365c <_ZN10FixedQueueI7RequestLj500EE3PopEv>
			WaitResponce = false;
 80216d8:	687b      	ldr	r3, [r7, #4]
 80216da:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80216de:	2200      	movs	r2, #0
 80216e0:	f883 26e5 	strb.w	r2, [r3, #1765]	; 0x6e5
			TimerReady = false;
 80216e4:	687b      	ldr	r3, [r7, #4]
 80216e6:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80216ea:	2200      	movs	r2, #0
 80216ec:	f883 27f3 	strb.w	r2, [r3, #2035]	; 0x7f3
		} else {
			__enable_irq();
		}
	}
 80216f0:	e001      	b.n	80216f6 <_ZN11QueueSender15ProcessRequestsEv+0x182>
  __ASM volatile ("cpsie i" : : : "memory");
 80216f2:	b662      	cpsie	i
}
 80216f4:	bf00      	nop
 80216f6:	bf00      	nop
 80216f8:	3724      	adds	r7, #36	; 0x24
 80216fa:	46bd      	mov	sp, r7
 80216fc:	bd90      	pop	{r4, r7, pc}
 80216fe:	bf00      	nop
 8021700:	0803d09c 	.word	0x0803d09c
 8021704:	0803d0e0 	.word	0x0803d0e0
 8021708:	0803cf00 	.word	0x0803cf00
 802170c:	0803d04c 	.word	0x0803d04c

08021710 <_ZN11QueueSender7ReceiveEh>:

	ErrorCode::Type Receive(uint8_t size) {
 8021710:	b590      	push	{r4, r7, lr}
 8021712:	b085      	sub	sp, #20
 8021714:	af00      	add	r7, sp, #0
 8021716:	6078      	str	r0, [r7, #4]
 8021718:	460b      	mov	r3, r1
 802171a:	70fb      	strb	r3, [r7, #3]
		assert(size >= 4);
 802171c:	78fb      	ldrb	r3, [r7, #3]
 802171e:	2b03      	cmp	r3, #3
 8021720:	d806      	bhi.n	8021730 <_ZN11QueueSender7ReceiveEh+0x20>
 8021722:	4b33      	ldr	r3, [pc, #204]	; (80217f0 <_ZN11QueueSender7ReceiveEh+0xe0>)
 8021724:	4a33      	ldr	r2, [pc, #204]	; (80217f4 <_ZN11QueueSender7ReceiveEh+0xe4>)
 8021726:	f240 1141 	movw	r1, #321	; 0x141
 802172a:	4833      	ldr	r0, [pc, #204]	; (80217f8 <_ZN11QueueSender7ReceiveEh+0xe8>)
 802172c:	f01a fabe 	bl	803bcac <__assert_func>

		auto ret = HAL_UART_Receive(UartHandle, CurrentResponceBuffer.data(), 4,
 8021730:	687b      	ldr	r3, [r7, #4]
 8021732:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8021736:	f8d3 47e8 	ldr.w	r4, [r3, #2024]	; 0x7e8
 802173a:	687a      	ldr	r2, [r7, #4]
 802173c:	4b2f      	ldr	r3, [pc, #188]	; (80217fc <_ZN11QueueSender7ReceiveEh+0xec>)
 802173e:	4413      	add	r3, r2
 8021740:	4618      	mov	r0, r3
 8021742:	f001 ff3d 	bl	80235c0 <_ZNSt5arrayIhLj256EE4dataEv>
 8021746:	4601      	mov	r1, r0
				TimeoutS);
 8021748:	687b      	ldr	r3, [r7, #4]
 802174a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 802174e:	f8d3 37ec 	ldr.w	r3, [r3, #2028]	; 0x7ec
		auto ret = HAL_UART_Receive(UartHandle, CurrentResponceBuffer.data(), 4,
 8021752:	2204      	movs	r2, #4
 8021754:	4620      	mov	r0, r4
 8021756:	f013 fba9 	bl	8034eac <HAL_UART_Receive>
 802175a:	4603      	mov	r3, r0
 802175c:	73fb      	strb	r3, [r7, #15]

		if (ret == HAL_TIMEOUT)
 802175e:	7bfb      	ldrb	r3, [r7, #15]
 8021760:	2b03      	cmp	r3, #3
 8021762:	d101      	bne.n	8021768 <_ZN11QueueSender7ReceiveEh+0x58>
			return ErrorCode::Timeout;
 8021764:	2301      	movs	r3, #1
 8021766:	e03f      	b.n	80217e8 <_ZN11QueueSender7ReceiveEh+0xd8>

		if (IsNack(CurrentResponceBuffer.data()))
 8021768:	687a      	ldr	r2, [r7, #4]
 802176a:	4b24      	ldr	r3, [pc, #144]	; (80217fc <_ZN11QueueSender7ReceiveEh+0xec>)
 802176c:	4413      	add	r3, r2
 802176e:	4618      	mov	r0, r3
 8021770:	f001 ff26 	bl	80235c0 <_ZNSt5arrayIhLj256EE4dataEv>
 8021774:	4603      	mov	r3, r0
 8021776:	4619      	mov	r1, r3
 8021778:	6878      	ldr	r0, [r7, #4]
 802177a:	f000 f841 	bl	8021800 <_ZN11QueueSender6IsNackEPKh>
 802177e:	4603      	mov	r3, r0
 8021780:	2b00      	cmp	r3, #0
 8021782:	d001      	beq.n	8021788 <_ZN11QueueSender7ReceiveEh+0x78>
			return ErrorCode::NACK;
 8021784:	2302      	movs	r3, #2
 8021786:	e02f      	b.n	80217e8 <_ZN11QueueSender7ReceiveEh+0xd8>

		if (ret != HAL_OK)
 8021788:	7bfb      	ldrb	r3, [r7, #15]
 802178a:	2b00      	cmp	r3, #0
 802178c:	d001      	beq.n	8021792 <_ZN11QueueSender7ReceiveEh+0x82>
			return ErrorCode::Unknown;
 802178e:	2303      	movs	r3, #3
 8021790:	e02a      	b.n	80217e8 <_ZN11QueueSender7ReceiveEh+0xd8>

		if (size == 4)
 8021792:	78fb      	ldrb	r3, [r7, #3]
 8021794:	2b04      	cmp	r3, #4
 8021796:	d101      	bne.n	802179c <_ZN11QueueSender7ReceiveEh+0x8c>
			return ErrorCode::Success;
 8021798:	2300      	movs	r3, #0
 802179a:	e025      	b.n	80217e8 <_ZN11QueueSender7ReceiveEh+0xd8>

		ret = HAL_UART_Receive(UartHandle, CurrentResponceBuffer.data() + 4,
 802179c:	687b      	ldr	r3, [r7, #4]
 802179e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80217a2:	f8d3 47e8 	ldr.w	r4, [r3, #2024]	; 0x7e8
 80217a6:	687a      	ldr	r2, [r7, #4]
 80217a8:	4b14      	ldr	r3, [pc, #80]	; (80217fc <_ZN11QueueSender7ReceiveEh+0xec>)
 80217aa:	4413      	add	r3, r2
 80217ac:	4618      	mov	r0, r3
 80217ae:	f001 ff07 	bl	80235c0 <_ZNSt5arrayIhLj256EE4dataEv>
 80217b2:	4603      	mov	r3, r0
 80217b4:	1d19      	adds	r1, r3, #4
 80217b6:	78fb      	ldrb	r3, [r7, #3]
 80217b8:	b29b      	uxth	r3, r3
 80217ba:	3b04      	subs	r3, #4
 80217bc:	b29a      	uxth	r2, r3
				size - 4, TimeoutS);
 80217be:	687b      	ldr	r3, [r7, #4]
 80217c0:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80217c4:	f8d3 37ec 	ldr.w	r3, [r3, #2028]	; 0x7ec
		ret = HAL_UART_Receive(UartHandle, CurrentResponceBuffer.data() + 4,
 80217c8:	4620      	mov	r0, r4
 80217ca:	f013 fb6f 	bl	8034eac <HAL_UART_Receive>
 80217ce:	4603      	mov	r3, r0
 80217d0:	73fb      	strb	r3, [r7, #15]

		if (ret == HAL_TIMEOUT)
 80217d2:	7bfb      	ldrb	r3, [r7, #15]
 80217d4:	2b03      	cmp	r3, #3
 80217d6:	d101      	bne.n	80217dc <_ZN11QueueSender7ReceiveEh+0xcc>
			return ErrorCode::Timeout;
 80217d8:	2301      	movs	r3, #1
 80217da:	e005      	b.n	80217e8 <_ZN11QueueSender7ReceiveEh+0xd8>

		if (ret != HAL_OK)
 80217dc:	7bfb      	ldrb	r3, [r7, #15]
 80217de:	2b00      	cmp	r3, #0
 80217e0:	d001      	beq.n	80217e6 <_ZN11QueueSender7ReceiveEh+0xd6>
			return ErrorCode::Unknown;
 80217e2:	2303      	movs	r3, #3
 80217e4:	e000      	b.n	80217e8 <_ZN11QueueSender7ReceiveEh+0xd8>

		return ErrorCode::Success;
 80217e6:	2300      	movs	r3, #0
	}
 80217e8:	4618      	mov	r0, r3
 80217ea:	3714      	adds	r7, #20
 80217ec:	46bd      	mov	sp, r7
 80217ee:	bd90      	pop	{r4, r7, pc}
 80217f0:	0803d104 	.word	0x0803d104
 80217f4:	0803d110 	.word	0x0803d110
 80217f8:	0803cf00 	.word	0x0803cf00
 80217fc:	000216e6 	.word	0x000216e6

08021800 <_ZN11QueueSender6IsNackEPKh>:

	bool IsNack(const uint8_t *data) {
 8021800:	b580      	push	{r7, lr}
 8021802:	b084      	sub	sp, #16
 8021804:	af00      	add	r7, sp, #0
 8021806:	6078      	str	r0, [r7, #4]
 8021808:	6039      	str	r1, [r7, #0]
		assert(data);
 802180a:	683b      	ldr	r3, [r7, #0]
 802180c:	2b00      	cmp	r3, #0
 802180e:	d106      	bne.n	802181e <_ZN11QueueSender6IsNackEPKh+0x1e>
 8021810:	4b11      	ldr	r3, [pc, #68]	; (8021858 <_ZN11QueueSender6IsNackEPKh+0x58>)
 8021812:	4a12      	ldr	r2, [pc, #72]	; (802185c <_ZN11QueueSender6IsNackEPKh+0x5c>)
 8021814:	f240 115f 	movw	r1, #351	; 0x15f
 8021818:	4811      	ldr	r0, [pc, #68]	; (8021860 <_ZN11QueueSender6IsNackEPKh+0x60>)
 802181a:	f01a fa47 	bl	803bcac <__assert_func>
		uint8_t kondoNACK[4] = { 0x4, 0xFE, 0x15, 0x17 };
 802181e:	4b11      	ldr	r3, [pc, #68]	; (8021864 <_ZN11QueueSender6IsNackEPKh+0x64>)
 8021820:	60bb      	str	r3, [r7, #8]

		for (int i = 0; i < 4; ++i)
 8021822:	2300      	movs	r3, #0
 8021824:	60fb      	str	r3, [r7, #12]
 8021826:	68fb      	ldr	r3, [r7, #12]
 8021828:	2b03      	cmp	r3, #3
 802182a:	dc10      	bgt.n	802184e <_ZN11QueueSender6IsNackEPKh+0x4e>
			if (data[i] != kondoNACK[i])
 802182c:	68fb      	ldr	r3, [r7, #12]
 802182e:	683a      	ldr	r2, [r7, #0]
 8021830:	4413      	add	r3, r2
 8021832:	781a      	ldrb	r2, [r3, #0]
 8021834:	f107 0108 	add.w	r1, r7, #8
 8021838:	68fb      	ldr	r3, [r7, #12]
 802183a:	440b      	add	r3, r1
 802183c:	781b      	ldrb	r3, [r3, #0]
 802183e:	429a      	cmp	r2, r3
 8021840:	d001      	beq.n	8021846 <_ZN11QueueSender6IsNackEPKh+0x46>
				return false;
 8021842:	2300      	movs	r3, #0
 8021844:	e004      	b.n	8021850 <_ZN11QueueSender6IsNackEPKh+0x50>
		for (int i = 0; i < 4; ++i)
 8021846:	68fb      	ldr	r3, [r7, #12]
 8021848:	3301      	adds	r3, #1
 802184a:	60fb      	str	r3, [r7, #12]
 802184c:	e7eb      	b.n	8021826 <_ZN11QueueSender6IsNackEPKh+0x26>

		return true;
 802184e:	2301      	movs	r3, #1
	}
 8021850:	4618      	mov	r0, r3
 8021852:	3710      	adds	r7, #16
 8021854:	46bd      	mov	sp, r7
 8021856:	bd80      	pop	{r7, pc}
 8021858:	0803d14c 	.word	0x0803d14c
 802185c:	0803d154 	.word	0x0803d154
 8021860:	0803cf00 	.word	0x0803cf00
 8021864:	1715fe04 	.word	0x1715fe04

08021868 <_ZNK11QueueSender14CreateResponceERKSt5arrayIhLj256EEjhh>:

	Responce CreateResponce(const Responce::BufferT &data, size_t ResponceSize,
 8021868:	b580      	push	{r7, lr}
 802186a:	b084      	sub	sp, #16
 802186c:	af00      	add	r7, sp, #0
 802186e:	60f8      	str	r0, [r7, #12]
 8021870:	60b9      	str	r1, [r7, #8]
 8021872:	607a      	str	r2, [r7, #4]
 8021874:	603b      	str	r3, [r7, #0]
			MessageMode::Type messageMode, ErrorCode::Type error) const {
		Responce responce;
		responce.Data = data;
 8021876:	68fa      	ldr	r2, [r7, #12]
 8021878:	687b      	ldr	r3, [r7, #4]
 802187a:	4610      	mov	r0, r2
 802187c:	4619      	mov	r1, r3
 802187e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8021882:	461a      	mov	r2, r3
 8021884:	f01a fa7c 	bl	803bd80 <memcpy>
		responce.ResponceSize = ResponceSize;
 8021888:	68fb      	ldr	r3, [r7, #12]
 802188a:	683a      	ldr	r2, [r7, #0]
 802188c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		responce.PeripheryID = Periphery::Body;
 8021890:	68fb      	ldr	r3, [r7, #12]
 8021892:	2200      	movs	r2, #0
 8021894:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
		responce.Error = ErrorCode::Serialize(error);
 8021898:	7f3b      	ldrb	r3, [r7, #28]
 802189a:	4618      	mov	r0, r3
 802189c:	f7ff fb41 	bl	8020f22 <_ZN11QueueSender9ErrorCode9SerializeEh>
 80218a0:	4603      	mov	r3, r0
 80218a2:	461a      	mov	r2, r3
 80218a4:	68fb      	ldr	r3, [r7, #12]
 80218a6:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
		responce.MetaInfo = MessageMode::Serialize(messageMode);
 80218aa:	7e3b      	ldrb	r3, [r7, #24]
 80218ac:	4618      	mov	r0, r3
 80218ae:	f7ff fb20 	bl	8020ef2 <_ZN11QueueSender11MessageMode9SerializeEh>
 80218b2:	4603      	mov	r3, r0
 80218b4:	461a      	mov	r2, r3
 80218b6:	68fb      	ldr	r3, [r7, #12]
 80218b8:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
		return responce;
 80218bc:	bf00      	nop
	}
 80218be:	68f8      	ldr	r0, [r7, #12]
 80218c0:	3710      	adds	r7, #16
 80218c2:	46bd      	mov	sp, r7
 80218c4:	bd80      	pop	{r7, pc}

080218c6 <_ZNK11QueueSender18CreateInfoResponceEv>:

	Responce CreateInfoResponce() const {
 80218c6:	b580      	push	{r7, lr}
 80218c8:	b0c6      	sub	sp, #280	; 0x118
 80218ca:	af02      	add	r7, sp, #8
 80218cc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80218d0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80218d4:	6018      	str	r0, [r3, #0]
 80218d6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80218da:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80218de:	6019      	str	r1, [r3, #0]
		Responce::BufferT data;
		uint8_t *ptr = data.data();
 80218e0:	f107 030c 	add.w	r3, r7, #12
 80218e4:	4618      	mov	r0, r3
 80218e6:	f001 fe6b 	bl	80235c0 <_ZNSt5arrayIhLj256EE4dataEv>
 80218ea:	4602      	mov	r2, r0
 80218ec:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80218f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80218f4:	601a      	str	r2, [r3, #0]
		GetInfo().SerializeTo(&ptr);
 80218f6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80218fa:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80218fe:	6818      	ldr	r0, [r3, #0]
 8021900:	f000 f930 	bl	8021b64 <_ZNK11QueueSender7GetInfoEv>
 8021904:	4603      	mov	r3, r0
 8021906:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 802190a:	f107 0208 	add.w	r2, r7, #8
 802190e:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8021912:	4611      	mov	r1, r2
 8021914:	4618      	mov	r0, r3
 8021916:	f7ff fb11 	bl	8020f3c <_ZN11QueueSender4Info11SerializeToEPPh>

		return CreateResponce(data, Info::Size, MessageMode::Info,
				ErrorCode::Success);
 802191a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 802191e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8021922:	6818      	ldr	r0, [r3, #0]
 8021924:	f107 020c 	add.w	r2, r7, #12
 8021928:	f507 7388 	add.w	r3, r7, #272	; 0x110
 802192c:	f5a3 7188 	sub.w	r1, r3, #272	; 0x110
 8021930:	2300      	movs	r3, #0
 8021932:	9301      	str	r3, [sp, #4]
 8021934:	2302      	movs	r3, #2
 8021936:	9300      	str	r3, [sp, #0]
 8021938:	2304      	movs	r3, #4
 802193a:	6809      	ldr	r1, [r1, #0]
 802193c:	f7ff ff94 	bl	8021868 <_ZNK11QueueSender14CreateResponceERKSt5arrayIhLj256EEjhh>
	}
 8021940:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8021944:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8021948:	6818      	ldr	r0, [r3, #0]
 802194a:	f507 7788 	add.w	r7, r7, #272	; 0x110
 802194e:	46bd      	mov	sp, r7
 8021950:	bd80      	pop	{r7, pc}

08021952 <_ZNKSt5arrayIhLj256EEixEj>:
      operator[](size_type __n) const noexcept
 8021952:	b580      	push	{r7, lr}
 8021954:	b082      	sub	sp, #8
 8021956:	af00      	add	r7, sp, #0
 8021958:	6078      	str	r0, [r7, #4]
 802195a:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 802195c:	687b      	ldr	r3, [r7, #4]
 802195e:	6839      	ldr	r1, [r7, #0]
 8021960:	4618      	mov	r0, r3
 8021962:	f001 fea9 	bl	80236b8 <_ZNSt14__array_traitsIhLj256EE6_S_refERA256_Khj>
 8021966:	4603      	mov	r3, r0
 8021968:	4618      	mov	r0, r3
 802196a:	3708      	adds	r7, #8
 802196c:	46bd      	mov	sp, r7
 802196e:	bd80      	pop	{r7, pc}

08021970 <_ZN11QueueSender23ProcessSetPeriodRequestERK7Request>:

	Responce ProcessSetPeriodRequest(const Request &request) {
 8021970:	b580      	push	{r7, lr}
 8021972:	b0c8      	sub	sp, #288	; 0x120
 8021974:	af02      	add	r7, sp, #8
 8021976:	f507 738c 	add.w	r3, r7, #280	; 0x118
 802197a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 802197e:	6018      	str	r0, [r3, #0]
 8021980:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021984:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8021988:	6019      	str	r1, [r3, #0]
 802198a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 802198e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8021992:	601a      	str	r2, [r3, #0]
		assert(
 8021994:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021998:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 802199c:	681b      	ldr	r3, [r3, #0]
 802199e:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 80219a2:	4618      	mov	r0, r3
 80219a4:	f7ff fab1 	bl	8020f0a <_ZN11QueueSender11MessageMode11DeserializeEh>
 80219a8:	4603      	mov	r3, r0
 80219aa:	2b03      	cmp	r3, #3
 80219ac:	d006      	beq.n	80219bc <_ZN11QueueSender23ProcessSetPeriodRequestERK7Request+0x4c>
 80219ae:	4b23      	ldr	r3, [pc, #140]	; (8021a3c <_ZN11QueueSender23ProcessSetPeriodRequestERK7Request+0xcc>)
 80219b0:	4a23      	ldr	r2, [pc, #140]	; (8021a40 <_ZN11QueueSender23ProcessSetPeriodRequestERK7Request+0xd0>)
 80219b2:	f44f 71bf 	mov.w	r1, #382	; 0x17e
 80219b6:	4823      	ldr	r0, [pc, #140]	; (8021a44 <_ZN11QueueSender23ProcessSetPeriodRequestERK7Request+0xd4>)
 80219b8:	f01a f978 	bl	803bcac <__assert_func>
				MessageMode::Deserialize(request.MetaInfo)
						== MessageMode::SetPeriod);
		Responce::BufferT data;

		uint8_t newPeriod = request.Data[0];
 80219bc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80219c0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80219c4:	681b      	ldr	r3, [r3, #0]
 80219c6:	2100      	movs	r1, #0
 80219c8:	4618      	mov	r0, r3
 80219ca:	f7ff ffc2 	bl	8021952 <_ZNKSt5arrayIhLj256EEixEj>
 80219ce:	4603      	mov	r3, r0
 80219d0:	781b      	ldrb	r3, [r3, #0]
 80219d2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

		ErrorCode::Type error = ErrorCode::Success;
 80219d6:	2300      	movs	r3, #0
 80219d8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

		if (newPeriod == 0)
 80219dc:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 80219e0:	2b00      	cmp	r3, #0
 80219e2:	d103      	bne.n	80219ec <_ZN11QueueSender23ProcessSetPeriodRequestERK7Request+0x7c>
			error = ErrorCode::BadPeriod;
 80219e4:	2304      	movs	r3, #4
 80219e6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 80219ea:	e009      	b.n	8021a00 <_ZN11QueueSender23ProcessSetPeriodRequestERK7Request+0x90>
		else
			SetSendPeriod(newPeriod);
 80219ec:	f897 2116 	ldrb.w	r2, [r7, #278]	; 0x116
 80219f0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80219f4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80219f8:	4611      	mov	r1, r2
 80219fa:	6818      	ldr	r0, [r3, #0]
 80219fc:	f7ff fc4c 	bl	8021298 <_ZN11QueueSender13SetSendPeriodEh>

		return CreateResponce(data, 1, MessageMode::SetPeriod, error);
 8021a00:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021a04:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8021a08:	6818      	ldr	r0, [r3, #0]
 8021a0a:	f107 0214 	add.w	r2, r7, #20
 8021a0e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021a12:	f5a3 7188 	sub.w	r1, r3, #272	; 0x110
 8021a16:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8021a1a:	9301      	str	r3, [sp, #4]
 8021a1c:	2303      	movs	r3, #3
 8021a1e:	9300      	str	r3, [sp, #0]
 8021a20:	2301      	movs	r3, #1
 8021a22:	6809      	ldr	r1, [r1, #0]
 8021a24:	f7ff ff20 	bl	8021868 <_ZNK11QueueSender14CreateResponceERKSt5arrayIhLj256EEjhh>
	}
 8021a28:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021a2c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8021a30:	6818      	ldr	r0, [r3, #0]
 8021a32:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8021a36:	46bd      	mov	sp, r7
 8021a38:	bd80      	pop	{r7, pc}
 8021a3a:	bf00      	nop
 8021a3c:	0803d180 	.word	0x0803d180
 8021a40:	0803d1c8 	.word	0x0803d1c8
 8021a44:	0803cf00 	.word	0x0803cf00

08021a48 <_ZN11QueueSender19CreateAsyncResponceERK7Request>:

	Responce CreateAsyncResponce(const Request &request) {
 8021a48:	b580      	push	{r7, lr}
 8021a4a:	b0c8      	sub	sp, #288	; 0x120
 8021a4c:	af02      	add	r7, sp, #8
 8021a4e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021a52:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8021a56:	6018      	str	r0, [r3, #0]
 8021a58:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021a5c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8021a60:	6019      	str	r1, [r3, #0]
 8021a62:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021a66:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8021a6a:	601a      	str	r2, [r3, #0]
		assert(
 8021a6c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021a70:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8021a74:	681b      	ldr	r3, [r3, #0]
 8021a76:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8021a7a:	4618      	mov	r0, r3
 8021a7c:	f7ff fa45 	bl	8020f0a <_ZN11QueueSender11MessageMode11DeserializeEh>
 8021a80:	4603      	mov	r3, r0
 8021a82:	2b01      	cmp	r3, #1
 8021a84:	d006      	beq.n	8021a94 <_ZN11QueueSender19CreateAsyncResponceERK7Request+0x4c>
 8021a86:	4b27      	ldr	r3, [pc, #156]	; (8021b24 <_ZN11QueueSender19CreateAsyncResponceERK7Request+0xdc>)
 8021a88:	4a27      	ldr	r2, [pc, #156]	; (8021b28 <_ZN11QueueSender19CreateAsyncResponceERK7Request+0xe0>)
 8021a8a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8021a8e:	4827      	ldr	r0, [pc, #156]	; (8021b2c <_ZN11QueueSender19CreateAsyncResponceERK7Request+0xe4>)
 8021a90:	f01a f90c 	bl	803bcac <__assert_func>
				MessageMode::Deserialize(request.MetaInfo)
						== MessageMode::Async);
		ErrorCode::Type error = ErrorCode::Success;
 8021a94:	2300      	movs	r3, #0
 8021a96:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

		if (Requests.Full())
 8021a9a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021a9e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8021aa2:	681b      	ldr	r3, [r3, #0]
 8021aa4:	4618      	mov	r0, r3
 8021aa6:	f001 fe15 	bl	80236d4 <_ZNK10FixedQueueI7RequestLj500EE4FullEv>
 8021aaa:	4603      	mov	r3, r0
 8021aac:	2b00      	cmp	r3, #0
 8021aae:	d003      	beq.n	8021ab8 <_ZN11QueueSender19CreateAsyncResponceERK7Request+0x70>
			error = ErrorCode::QueueFull;
 8021ab0:	2305      	movs	r3, #5
 8021ab2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8021ab6:	e00c      	b.n	8021ad2 <_ZN11QueueSender19CreateAsyncResponceERK7Request+0x8a>
		else
			Requests.Push(request);
 8021ab8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021abc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8021ac0:	681a      	ldr	r2, [r3, #0]
 8021ac2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021ac6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8021aca:	6819      	ldr	r1, [r3, #0]
 8021acc:	4610      	mov	r0, r2
 8021ace:	f001 fe13 	bl	80236f8 <_ZN10FixedQueueI7RequestLj500EE4PushERKS0_>

		return CreateResponce({0}, 1, MessageMode::Async, error);
 8021ad2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021ad6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8021ada:	4618      	mov	r0, r3
 8021adc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8021ae0:	461a      	mov	r2, r3
 8021ae2:	2100      	movs	r1, #0
 8021ae4:	f01a f974 	bl	803bdd0 <memset>
 8021ae8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021aec:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8021af0:	6818      	ldr	r0, [r3, #0]
 8021af2:	f107 0214 	add.w	r2, r7, #20
 8021af6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021afa:	f5a3 7188 	sub.w	r1, r3, #272	; 0x110
 8021afe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8021b02:	9301      	str	r3, [sp, #4]
 8021b04:	2301      	movs	r3, #1
 8021b06:	9300      	str	r3, [sp, #0]
 8021b08:	2301      	movs	r3, #1
 8021b0a:	6809      	ldr	r1, [r1, #0]
 8021b0c:	f7ff feac 	bl	8021868 <_ZNK11QueueSender14CreateResponceERKSt5arrayIhLj256EEjhh>
	}
 8021b10:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021b14:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8021b18:	6818      	ldr	r0, [r3, #0]
 8021b1a:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8021b1e:	46bd      	mov	sp, r7
 8021b20:	bd80      	pop	{r7, pc}
 8021b22:	bf00      	nop
 8021b24:	0803d09c 	.word	0x0803d09c
 8021b28:	0803d208 	.word	0x0803d208
 8021b2c:	0803cf00 	.word	0x0803cf00

08021b30 <_ZN11QueueSender16ProcessResponcesEv>:

	void ProcessResponces() {
 8021b30:	b480      	push	{r7}
 8021b32:	b083      	sub	sp, #12
 8021b34:	af00      	add	r7, sp, #0
 8021b36:	6078      	str	r0, [r7, #4]
		//WaitResponce = false;
	}
 8021b38:	bf00      	nop
 8021b3a:	370c      	adds	r7, #12
 8021b3c:	46bd      	mov	sp, r7
 8021b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021b42:	4770      	bx	lr

08021b44 <_ZN11QueueSender14FinishTransmitEv>:

	void FinishTransmit() {
 8021b44:	b480      	push	{r7}
 8021b46:	b083      	sub	sp, #12
 8021b48:	af00      	add	r7, sp, #0
 8021b4a:	6078      	str	r0, [r7, #4]
		TransmitComplete = true;
 8021b4c:	687b      	ldr	r3, [r7, #4]
 8021b4e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8021b52:	2201      	movs	r2, #1
 8021b54:	f883 27f2 	strb.w	r2, [r3, #2034]	; 0x7f2
	}
 8021b58:	bf00      	nop
 8021b5a:	370c      	adds	r7, #12
 8021b5c:	46bd      	mov	sp, r7
 8021b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021b62:	4770      	bx	lr

08021b64 <_ZNK11QueueSender7GetInfoEv>:

	Info GetInfo() const {
 8021b64:	b580      	push	{r7, lr}
 8021b66:	b084      	sub	sp, #16
 8021b68:	af00      	add	r7, sp, #0
 8021b6a:	6078      	str	r0, [r7, #4]
		return {Requests.GetSize(), Responces.GetSize()};
 8021b6c:	687b      	ldr	r3, [r7, #4]
 8021b6e:	4618      	mov	r0, r3
 8021b70:	f001 fe04 	bl	802377c <_ZNK10FixedQueueI7RequestLj500EE7GetSizeEv>
 8021b74:	4603      	mov	r3, r0
 8021b76:	b29b      	uxth	r3, r3
 8021b78:	81bb      	strh	r3, [r7, #12]
 8021b7a:	687a      	ldr	r2, [r7, #4]
 8021b7c:	4b09      	ldr	r3, [pc, #36]	; (8021ba4 <_ZNK11QueueSender7GetInfoEv+0x40>)
 8021b7e:	4413      	add	r3, r2
 8021b80:	4618      	mov	r0, r3
 8021b82:	f001 fe07 	bl	8023794 <_ZNK10FixedQueueI8ResponceLj10EE7GetSizeEv>
 8021b86:	4603      	mov	r3, r0
 8021b88:	b29b      	uxth	r3, r3
 8021b8a:	81fb      	strh	r3, [r7, #14]
 8021b8c:	2300      	movs	r3, #0
 8021b8e:	89ba      	ldrh	r2, [r7, #12]
 8021b90:	f362 030f 	bfi	r3, r2, #0, #16
 8021b94:	89fa      	ldrh	r2, [r7, #14]
 8021b96:	f362 431f 	bfi	r3, r2, #16, #16
	}
 8021b9a:	4618      	mov	r0, r3
 8021b9c:	3710      	adds	r7, #16
 8021b9e:	46bd      	mov	sp, r7
 8021ba0:	bd80      	pop	{r7, pc}
 8021ba2:	bf00      	nop
 8021ba4:	00020b7c 	.word	0x00020b7c

08021ba8 <_ZN10FixedQueueI7RequestLj10EEC1Ev>:
class FixedQueue {
 8021ba8:	b480      	push	{r7}
 8021baa:	b083      	sub	sp, #12
 8021bac:	af00      	add	r7, sp, #0
 8021bae:	6078      	str	r0, [r7, #4]
 8021bb0:	687b      	ldr	r3, [r7, #4]
 8021bb2:	2200      	movs	r2, #0
 8021bb4:	601a      	str	r2, [r3, #0]
 8021bb6:	687b      	ldr	r3, [r7, #4]
 8021bb8:	2200      	movs	r2, #0
 8021bba:	605a      	str	r2, [r3, #4]
 8021bbc:	687b      	ldr	r3, [r7, #4]
 8021bbe:	2200      	movs	r2, #0
 8021bc0:	609a      	str	r2, [r3, #8]
 8021bc2:	687b      	ldr	r3, [r7, #4]
 8021bc4:	4618      	mov	r0, r3
 8021bc6:	370c      	adds	r7, #12
 8021bc8:	46bd      	mov	sp, r7
 8021bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021bce:	4770      	bx	lr

08021bd0 <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj>:

	bool TransmitComplete = true;
public:
	HeadInterface() = default;

	HeadInterface(UART_HandleTypeDef *uart, size_t timeoutS) :
 8021bd0:	b580      	push	{r7, lr}
 8021bd2:	b084      	sub	sp, #16
 8021bd4:	af00      	add	r7, sp, #0
 8021bd6:	60f8      	str	r0, [r7, #12]
 8021bd8:	60b9      	str	r1, [r7, #8]
 8021bda:	607a      	str	r2, [r7, #4]
			UartHandle { uart }, TimeoutS { timeoutS } {
 8021bdc:	68fb      	ldr	r3, [r7, #12]
 8021bde:	4618      	mov	r0, r3
 8021be0:	f7ff ffe2 	bl	8021ba8 <_ZN10FixedQueueI7RequestLj10EEC1Ev>
 8021be4:	68fb      	ldr	r3, [r7, #12]
 8021be6:	68ba      	ldr	r2, [r7, #8]
 8021be8:	f8c3 2a84 	str.w	r2, [r3, #2692]	; 0xa84
 8021bec:	68fb      	ldr	r3, [r7, #12]
 8021bee:	687a      	ldr	r2, [r7, #4]
 8021bf0:	f8c3 2a88 	str.w	r2, [r3, #2696]	; 0xa88
 8021bf4:	68fb      	ldr	r3, [r7, #12]
 8021bf6:	2201      	movs	r2, #1
 8021bf8:	f883 2ca0 	strb.w	r2, [r3, #3232]	; 0xca0
		assert(uart != NULL);
 8021bfc:	68bb      	ldr	r3, [r7, #8]
 8021bfe:	2b00      	cmp	r3, #0
 8021c00:	d106      	bne.n	8021c10 <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj+0x40>
 8021c02:	4b06      	ldr	r3, [pc, #24]	; (8021c1c <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj+0x4c>)
 8021c04:	4a06      	ldr	r2, [pc, #24]	; (8021c20 <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj+0x50>)
 8021c06:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8021c0a:	4806      	ldr	r0, [pc, #24]	; (8021c24 <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj+0x54>)
 8021c0c:	f01a f84e 	bl	803bcac <__assert_func>
	}
 8021c10:	68fb      	ldr	r3, [r7, #12]
 8021c12:	4618      	mov	r0, r3
 8021c14:	3710      	adds	r7, #16
 8021c16:	46bd      	mov	sp, r7
 8021c18:	bd80      	pop	{r7, pc}
 8021c1a:	bf00      	nop
 8021c1c:	0803cf24 	.word	0x0803cf24
 8021c20:	0803d244 	.word	0x0803d244
 8021c24:	0803cf00 	.word	0x0803cf00

08021c28 <_ZN13HeadInterface14ResetReadStateEv>:

	void ResetReadState() {
 8021c28:	b580      	push	{r7, lr}
 8021c2a:	b082      	sub	sp, #8
 8021c2c:	af00      	add	r7, sp, #0
 8021c2e:	6078      	str	r0, [r7, #4]
		CurrentState = ReadState::SOM1;
 8021c30:	687b      	ldr	r3, [r7, #4]
 8021c32:	2200      	movs	r2, #0
 8021c34:	f8c3 2a90 	str.w	r2, [r3, #2704]	; 0xa90
		assert(HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1) == HAL_OK);
 8021c38:	687b      	ldr	r3, [r7, #4]
 8021c3a:	f8d3 0a84 	ldr.w	r0, [r3, #2692]	; 0xa84
 8021c3e:	687b      	ldr	r3, [r7, #4]
 8021c40:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 8021c44:	2201      	movs	r2, #1
 8021c46:	4619      	mov	r1, r3
 8021c48:	f013 faac 	bl	80351a4 <HAL_UART_Receive_IT>
 8021c4c:	4603      	mov	r3, r0
 8021c4e:	2b00      	cmp	r3, #0
 8021c50:	d006      	beq.n	8021c60 <_ZN13HeadInterface14ResetReadStateEv+0x38>
 8021c52:	4b05      	ldr	r3, [pc, #20]	; (8021c68 <_ZN13HeadInterface14ResetReadStateEv+0x40>)
 8021c54:	4a05      	ldr	r2, [pc, #20]	; (8021c6c <_ZN13HeadInterface14ResetReadStateEv+0x44>)
 8021c56:	f240 11c9 	movw	r1, #457	; 0x1c9
 8021c5a:	4805      	ldr	r0, [pc, #20]	; (8021c70 <_ZN13HeadInterface14ResetReadStateEv+0x48>)
 8021c5c:	f01a f826 	bl	803bcac <__assert_func>
	}
 8021c60:	bf00      	nop
 8021c62:	3708      	adds	r7, #8
 8021c64:	46bd      	mov	sp, r7
 8021c66:	bd80      	pop	{r7, pc}
 8021c68:	0803d280 	.word	0x0803d280
 8021c6c:	0803d2bc 	.word	0x0803d2bc
 8021c70:	0803cf00 	.word	0x0803cf00

08021c74 <_ZNK13HeadInterface10HasRequestEv>:

	bool HasRequest() const {
 8021c74:	b580      	push	{r7, lr}
 8021c76:	b082      	sub	sp, #8
 8021c78:	af00      	add	r7, sp, #0
 8021c7a:	6078      	str	r0, [r7, #4]
		return !Requests.Empty();
 8021c7c:	687b      	ldr	r3, [r7, #4]
 8021c7e:	4618      	mov	r0, r3
 8021c80:	f001 fd94 	bl	80237ac <_ZNK10FixedQueueI7RequestLj10EE5EmptyEv>
 8021c84:	4603      	mov	r3, r0
 8021c86:	f083 0301 	eor.w	r3, r3, #1
 8021c8a:	b2db      	uxtb	r3, r3
	}
 8021c8c:	4618      	mov	r0, r3
 8021c8e:	3708      	adds	r7, #8
 8021c90:	46bd      	mov	sp, r7
 8021c92:	bd80      	pop	{r7, pc}

08021c94 <_ZN13HeadInterface4SendERK8Responce>:

	void Send(const Responce &responce) {
 8021c94:	b590      	push	{r4, r7, lr}
 8021c96:	b095      	sub	sp, #84	; 0x54
 8021c98:	af00      	add	r7, sp, #0
 8021c9a:	6078      	str	r0, [r7, #4]
 8021c9c:	6039      	str	r1, [r7, #0]

		while (!TransmitComplete) {
 8021c9e:	687b      	ldr	r3, [r7, #4]
 8021ca0:	f893 3ca0 	ldrb.w	r3, [r3, #3232]	; 0xca0
 8021ca4:	2b00      	cmp	r3, #0
 8021ca6:	d100      	bne.n	8021caa <_ZN13HeadInterface4SendERK8Responce+0x16>
 8021ca8:	e7f9      	b.n	8021c9e <_ZN13HeadInterface4SendERK8Responce+0xa>
		}

		uint8_t *ptr = CurrentResponceBuffer.data();
 8021caa:	687b      	ldr	r3, [r7, #4]
 8021cac:	f503 633a 	add.w	r3, r3, #2976	; 0xba0
 8021cb0:	4618      	mov	r0, r3
 8021cb2:	f001 fc85 	bl	80235c0 <_ZNSt5arrayIhLj256EE4dataEv>
 8021cb6:	64f8      	str	r0, [r7, #76]	; 0x4c

		*(ptr++) = SOM1Val;
 8021cb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021cba:	1c5a      	adds	r2, r3, #1
 8021cbc:	64fa      	str	r2, [r7, #76]	; 0x4c
 8021cbe:	22ff      	movs	r2, #255	; 0xff
 8021cc0:	701a      	strb	r2, [r3, #0]
		*(ptr++) = SOM2Val;
 8021cc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021cc4:	1c5a      	adds	r2, r3, #1
 8021cc6:	64fa      	str	r2, [r7, #76]	; 0x4c
 8021cc8:	22aa      	movs	r2, #170	; 0xaa
 8021cca:	701a      	strb	r2, [r3, #0]
		*(ptr++) = responce.PeripheryID;
 8021ccc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021cce:	1c5a      	adds	r2, r3, #1
 8021cd0:	64fa      	str	r2, [r7, #76]	; 0x4c
 8021cd2:	683a      	ldr	r2, [r7, #0]
 8021cd4:	f892 2104 	ldrb.w	r2, [r2, #260]	; 0x104
 8021cd8:	701a      	strb	r2, [r3, #0]
		*(ptr++) = responce.MetaInfo;
 8021cda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021cdc:	1c5a      	adds	r2, r3, #1
 8021cde:	64fa      	str	r2, [r7, #76]	; 0x4c
 8021ce0:	683a      	ldr	r2, [r7, #0]
 8021ce2:	f892 2105 	ldrb.w	r2, [r2, #261]	; 0x105
 8021ce6:	701a      	strb	r2, [r3, #0]
		*(ptr++) = responce.Error;
 8021ce8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021cea:	1c5a      	adds	r2, r3, #1
 8021cec:	64fa      	str	r2, [r7, #76]	; 0x4c
 8021cee:	683a      	ldr	r2, [r7, #0]
 8021cf0:	f892 2106 	ldrb.w	r2, [r2, #262]	; 0x106
 8021cf4:	701a      	strb	r2, [r3, #0]

		memcpy(ptr, responce.Data.data(), responce.ResponceSize);
 8021cf6:	683b      	ldr	r3, [r7, #0]
 8021cf8:	4618      	mov	r0, r3
 8021cfa:	f001 fca1 	bl	8023640 <_ZNKSt5arrayIhLj256EE4dataEv>
 8021cfe:	4601      	mov	r1, r0
 8021d00:	683b      	ldr	r3, [r7, #0]
 8021d02:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8021d06:	461a      	mov	r2, r3
 8021d08:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8021d0a:	f01a f839 	bl	803bd80 <memcpy>

		ptr += responce.ResponceSize;
 8021d0e:	683b      	ldr	r3, [r7, #0]
 8021d10:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8021d14:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8021d16:	4413      	add	r3, r2
 8021d18:	64fb      	str	r3, [r7, #76]	; 0x4c
		*ptr = SOM3Val;
 8021d1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021d1c:	22af      	movs	r2, #175	; 0xaf
 8021d1e:	701a      	strb	r2, [r3, #0]

		//ResetReadState();

		TransmitComplete = false;
 8021d20:	687b      	ldr	r3, [r7, #4]
 8021d22:	2200      	movs	r2, #0
 8021d24:	f883 2ca0 	strb.w	r2, [r3, #3232]	; 0xca0

		size_t sz = responce.ResponceSize + 3 + 3;
 8021d28:	683b      	ldr	r3, [r7, #0]
 8021d2a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8021d2e:	3306      	adds	r3, #6
 8021d30:	64bb      	str	r3, [r7, #72]	; 0x48
		uint8_t testBuf[64];
		memcpy(testBuf, CurrentResponceBuffer.data(), sz);
 8021d32:	687b      	ldr	r3, [r7, #4]
 8021d34:	f503 633a 	add.w	r3, r3, #2976	; 0xba0
 8021d38:	4618      	mov	r0, r3
 8021d3a:	f001 fc41 	bl	80235c0 <_ZNSt5arrayIhLj256EE4dataEv>
 8021d3e:	4601      	mov	r1, r0
 8021d40:	f107 0308 	add.w	r3, r7, #8
 8021d44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8021d46:	4618      	mov	r0, r3
 8021d48:	f01a f81a 	bl	803bd80 <memcpy>

		assert(
 8021d4c:	687b      	ldr	r3, [r7, #4]
 8021d4e:	f8d3 4a84 	ldr.w	r4, [r3, #2692]	; 0xa84
 8021d52:	687b      	ldr	r3, [r7, #4]
 8021d54:	f503 633a 	add.w	r3, r3, #2976	; 0xba0
 8021d58:	4618      	mov	r0, r3
 8021d5a:	f001 fc31 	bl	80235c0 <_ZNSt5arrayIhLj256EE4dataEv>
 8021d5e:	4601      	mov	r1, r0
 8021d60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8021d62:	b29b      	uxth	r3, r3
 8021d64:	461a      	mov	r2, r3
 8021d66:	4620      	mov	r0, r4
 8021d68:	f013 f974 	bl	8035054 <HAL_UART_Transmit_IT>
 8021d6c:	4603      	mov	r3, r0
 8021d6e:	2b00      	cmp	r3, #0
 8021d70:	d006      	beq.n	8021d80 <_ZN13HeadInterface4SendERK8Responce+0xec>
 8021d72:	4b05      	ldr	r3, [pc, #20]	; (8021d88 <_ZN13HeadInterface4SendERK8Responce+0xf4>)
 8021d74:	4a05      	ldr	r2, [pc, #20]	; (8021d8c <_ZN13HeadInterface4SendERK8Responce+0xf8>)
 8021d76:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
 8021d7a:	4805      	ldr	r0, [pc, #20]	; (8021d90 <_ZN13HeadInterface4SendERK8Responce+0xfc>)
 8021d7c:	f019 ff96 	bl	803bcac <__assert_func>
				HAL_UART_Transmit_IT(UartHandle, CurrentResponceBuffer.data(),
						sz) == HAL_OK);
	}
 8021d80:	bf00      	nop
 8021d82:	3754      	adds	r7, #84	; 0x54
 8021d84:	46bd      	mov	sp, r7
 8021d86:	bd90      	pop	{r4, r7, pc}
 8021d88:	0803d2e4 	.word	0x0803d2e4
 8021d8c:	0803d334 	.word	0x0803d334
 8021d90:	0803cf00 	.word	0x0803cf00

08021d94 <_ZN13HeadInterface10GetRequestEv>:

	Request GetRequest() {
 8021d94:	b580      	push	{r7, lr}
 8021d96:	b082      	sub	sp, #8
 8021d98:	af00      	add	r7, sp, #0
 8021d9a:	6078      	str	r0, [r7, #4]
 8021d9c:	6039      	str	r1, [r7, #0]
		assert(HasRequest());
 8021d9e:	6838      	ldr	r0, [r7, #0]
 8021da0:	f7ff ff68 	bl	8021c74 <_ZNK13HeadInterface10HasRequestEv>
 8021da4:	4603      	mov	r3, r0
 8021da6:	2b00      	cmp	r3, #0
 8021da8:	d106      	bne.n	8021db8 <_ZN13HeadInterface10GetRequestEv+0x24>
 8021daa:	4b0e      	ldr	r3, [pc, #56]	; (8021de4 <_ZN13HeadInterface10GetRequestEv+0x50>)
 8021dac:	4a0e      	ldr	r2, [pc, #56]	; (8021de8 <_ZN13HeadInterface10GetRequestEv+0x54>)
 8021dae:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 8021db2:	480e      	ldr	r0, [pc, #56]	; (8021dec <_ZN13HeadInterface10GetRequestEv+0x58>)
 8021db4:	f019 ff7a 	bl	803bcac <__assert_func>
		Request request = Requests.Front();
 8021db8:	683b      	ldr	r3, [r7, #0]
 8021dba:	4618      	mov	r0, r3
 8021dbc:	f001 fd08 	bl	80237d0 <_ZNK10FixedQueueI7RequestLj10EE5FrontEv>
 8021dc0:	4602      	mov	r2, r0
 8021dc2:	687b      	ldr	r3, [r7, #4]
 8021dc4:	4618      	mov	r0, r3
 8021dc6:	4611      	mov	r1, r2
 8021dc8:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8021dcc:	461a      	mov	r2, r3
 8021dce:	f019 ffd7 	bl	803bd80 <memcpy>
		Requests.Pop();
 8021dd2:	683b      	ldr	r3, [r7, #0]
 8021dd4:	4618      	mov	r0, r3
 8021dd6:	f001 fd1d 	bl	8023814 <_ZN10FixedQueueI7RequestLj10EE3PopEv>
		return request;
 8021dda:	bf00      	nop
	}
 8021ddc:	6878      	ldr	r0, [r7, #4]
 8021dde:	3708      	adds	r7, #8
 8021de0:	46bd      	mov	sp, r7
 8021de2:	bd80      	pop	{r7, pc}
 8021de4:	0803d360 	.word	0x0803d360
 8021de8:	0803d370 	.word	0x0803d370
 8021dec:	0803cf00 	.word	0x0803cf00

08021df0 <_ZN13HeadInterface14FinishTransmitEv>:

	void FinishTransmit() {
 8021df0:	b480      	push	{r7}
 8021df2:	b083      	sub	sp, #12
 8021df4:	af00      	add	r7, sp, #0
 8021df6:	6078      	str	r0, [r7, #4]
		TransmitComplete = true;
 8021df8:	687b      	ldr	r3, [r7, #4]
 8021dfa:	2201      	movs	r2, #1
 8021dfc:	f883 2ca0 	strb.w	r2, [r3, #3232]	; 0xca0
	}
 8021e00:	bf00      	nop
 8021e02:	370c      	adds	r7, #12
 8021e04:	46bd      	mov	sp, r7
 8021e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021e0a:	4770      	bx	lr

08021e0c <_ZN13HeadInterface19ProcessRecievedDataEv>:

	void ProcessRecievedData() {
 8021e0c:	b590      	push	{r4, r7, lr}
 8021e0e:	b085      	sub	sp, #20
 8021e10:	af00      	add	r7, sp, #0
 8021e12:	6078      	str	r0, [r7, #4]
		static size_t nRequests = 0;

		switch (CurrentState) {
 8021e14:	687b      	ldr	r3, [r7, #4]
 8021e16:	f8d3 3a90 	ldr.w	r3, [r3, #2704]	; 0xa90
 8021e1a:	2b07      	cmp	r3, #7
 8021e1c:	f200 80cc 	bhi.w	8021fb8 <_ZN13HeadInterface19ProcessRecievedDataEv+0x1ac>
 8021e20:	a201      	add	r2, pc, #4	; (adr r2, 8021e28 <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c>)
 8021e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021e26:	bf00      	nop
 8021e28:	08021e49 	.word	0x08021e49
 8021e2c:	08021e79 	.word	0x08021e79
 8021e30:	08021ea9 	.word	0x08021ea9
 8021e34:	08021ed3 	.word	0x08021ed3
 8021e38:	08021eff 	.word	0x08021eff
 8021e3c:	08021f2b 	.word	0x08021f2b
 8021e40:	08021f65 	.word	0x08021f65
 8021e44:	08021f83 	.word	0x08021f83
		case ReadState::SOM1: {
			if (CurrentValue == SOM1Val) {
 8021e48:	687b      	ldr	r3, [r7, #4]
 8021e4a:	f893 3a8c 	ldrb.w	r3, [r3, #2700]	; 0xa8c
 8021e4e:	2bff      	cmp	r3, #255	; 0xff
 8021e50:	d10e      	bne.n	8021e70 <_ZN13HeadInterface19ProcessRecievedDataEv+0x64>
				CurrentState = ReadState::SOM2;
 8021e52:	687b      	ldr	r3, [r7, #4]
 8021e54:	2201      	movs	r2, #1
 8021e56:	f8c3 2a90 	str.w	r2, [r3, #2704]	; 0xa90
				HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 8021e5a:	687b      	ldr	r3, [r7, #4]
 8021e5c:	f8d3 0a84 	ldr.w	r0, [r3, #2692]	; 0xa84
 8021e60:	687b      	ldr	r3, [r7, #4]
 8021e62:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 8021e66:	2201      	movs	r2, #1
 8021e68:	4619      	mov	r1, r3
 8021e6a:	f013 f99b 	bl	80351a4 <HAL_UART_Receive_IT>
			} else
				ResetReadState();
			break;
 8021e6e:	e0a7      	b.n	8021fc0 <_ZN13HeadInterface19ProcessRecievedDataEv+0x1b4>
				ResetReadState();
 8021e70:	6878      	ldr	r0, [r7, #4]
 8021e72:	f7ff fed9 	bl	8021c28 <_ZN13HeadInterface14ResetReadStateEv>
			break;
 8021e76:	e0a3      	b.n	8021fc0 <_ZN13HeadInterface19ProcessRecievedDataEv+0x1b4>
		}
		case ReadState::SOM2: {
			if (CurrentValue == SOM2Val) {
 8021e78:	687b      	ldr	r3, [r7, #4]
 8021e7a:	f893 3a8c 	ldrb.w	r3, [r3, #2700]	; 0xa8c
 8021e7e:	2baa      	cmp	r3, #170	; 0xaa
 8021e80:	d10e      	bne.n	8021ea0 <_ZN13HeadInterface19ProcessRecievedDataEv+0x94>
				CurrentState = ReadState::PERIPHERY_ID;
 8021e82:	687b      	ldr	r3, [r7, #4]
 8021e84:	2202      	movs	r2, #2
 8021e86:	f8c3 2a90 	str.w	r2, [r3, #2704]	; 0xa90
				HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 8021e8a:	687b      	ldr	r3, [r7, #4]
 8021e8c:	f8d3 0a84 	ldr.w	r0, [r3, #2692]	; 0xa84
 8021e90:	687b      	ldr	r3, [r7, #4]
 8021e92:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 8021e96:	2201      	movs	r2, #1
 8021e98:	4619      	mov	r1, r3
 8021e9a:	f013 f983 	bl	80351a4 <HAL_UART_Receive_IT>
			} else
				ResetReadState();
			break;
 8021e9e:	e08f      	b.n	8021fc0 <_ZN13HeadInterface19ProcessRecievedDataEv+0x1b4>
				ResetReadState();
 8021ea0:	6878      	ldr	r0, [r7, #4]
 8021ea2:	f7ff fec1 	bl	8021c28 <_ZN13HeadInterface14ResetReadStateEv>
			break;
 8021ea6:	e08b      	b.n	8021fc0 <_ZN13HeadInterface19ProcessRecievedDataEv+0x1b4>
		}
		case ReadState::PERIPHERY_ID: {
			CurrentRequest.PeripheryID = CurrentValue;
 8021ea8:	687b      	ldr	r3, [r7, #4]
 8021eaa:	f893 2a8c 	ldrb.w	r2, [r3, #2700]	; 0xa8c
 8021eae:	687b      	ldr	r3, [r7, #4]
 8021eb0:	f883 2b9d 	strb.w	r2, [r3, #2973]	; 0xb9d
			CurrentState = ReadState::REQUEST_SIZE;
 8021eb4:	687b      	ldr	r3, [r7, #4]
 8021eb6:	2203      	movs	r2, #3
 8021eb8:	f8c3 2a90 	str.w	r2, [r3, #2704]	; 0xa90
			HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 8021ebc:	687b      	ldr	r3, [r7, #4]
 8021ebe:	f8d3 0a84 	ldr.w	r0, [r3, #2692]	; 0xa84
 8021ec2:	687b      	ldr	r3, [r7, #4]
 8021ec4:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 8021ec8:	2201      	movs	r2, #1
 8021eca:	4619      	mov	r1, r3
 8021ecc:	f013 f96a 	bl	80351a4 <HAL_UART_Receive_IT>
			break;
 8021ed0:	e076      	b.n	8021fc0 <_ZN13HeadInterface19ProcessRecievedDataEv+0x1b4>
		}
		case ReadState::REQUEST_SIZE: {
			CurrentRequest.RequestSize = CurrentValue;
 8021ed2:	687b      	ldr	r3, [r7, #4]
 8021ed4:	f893 3a8c 	ldrb.w	r3, [r3, #2700]	; 0xa8c
 8021ed8:	461a      	mov	r2, r3
 8021eda:	687b      	ldr	r3, [r7, #4]
 8021edc:	f8c3 2b94 	str.w	r2, [r3, #2964]	; 0xb94
			CurrentState = ReadState::RESPONCE_SIZE;
 8021ee0:	687b      	ldr	r3, [r7, #4]
 8021ee2:	2204      	movs	r2, #4
 8021ee4:	f8c3 2a90 	str.w	r2, [r3, #2704]	; 0xa90
			HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 8021ee8:	687b      	ldr	r3, [r7, #4]
 8021eea:	f8d3 0a84 	ldr.w	r0, [r3, #2692]	; 0xa84
 8021eee:	687b      	ldr	r3, [r7, #4]
 8021ef0:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 8021ef4:	2201      	movs	r2, #1
 8021ef6:	4619      	mov	r1, r3
 8021ef8:	f013 f954 	bl	80351a4 <HAL_UART_Receive_IT>
			break;
 8021efc:	e060      	b.n	8021fc0 <_ZN13HeadInterface19ProcessRecievedDataEv+0x1b4>
		}
		case ReadState::RESPONCE_SIZE: {
			CurrentRequest.ResponceSize = CurrentValue;
 8021efe:	687b      	ldr	r3, [r7, #4]
 8021f00:	f893 3a8c 	ldrb.w	r3, [r3, #2700]	; 0xa8c
 8021f04:	461a      	mov	r2, r3
 8021f06:	687b      	ldr	r3, [r7, #4]
 8021f08:	f8c3 2b98 	str.w	r2, [r3, #2968]	; 0xb98
			CurrentState = ReadState::META;
 8021f0c:	687b      	ldr	r3, [r7, #4]
 8021f0e:	2205      	movs	r2, #5
 8021f10:	f8c3 2a90 	str.w	r2, [r3, #2704]	; 0xa90
			HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 8021f14:	687b      	ldr	r3, [r7, #4]
 8021f16:	f8d3 0a84 	ldr.w	r0, [r3, #2692]	; 0xa84
 8021f1a:	687b      	ldr	r3, [r7, #4]
 8021f1c:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 8021f20:	2201      	movs	r2, #1
 8021f22:	4619      	mov	r1, r3
 8021f24:	f013 f93e 	bl	80351a4 <HAL_UART_Receive_IT>
			break;
 8021f28:	e04a      	b.n	8021fc0 <_ZN13HeadInterface19ProcessRecievedDataEv+0x1b4>
		}
		case ReadState::META: {
			CurrentRequest.MetaInfo = CurrentValue;
 8021f2a:	687b      	ldr	r3, [r7, #4]
 8021f2c:	f893 2a8c 	ldrb.w	r2, [r3, #2700]	; 0xa8c
 8021f30:	687b      	ldr	r3, [r7, #4]
 8021f32:	f883 2b9c 	strb.w	r2, [r3, #2972]	; 0xb9c
			CurrentState = ReadState::DATA;
 8021f36:	687b      	ldr	r3, [r7, #4]
 8021f38:	2206      	movs	r2, #6
 8021f3a:	f8c3 2a90 	str.w	r2, [r3, #2704]	; 0xa90
			HAL_UART_Receive_IT(UartHandle, CurrentRequest.Data.data(),
 8021f3e:	687b      	ldr	r3, [r7, #4]
 8021f40:	f8d3 4a84 	ldr.w	r4, [r3, #2692]	; 0xa84
 8021f44:	687b      	ldr	r3, [r7, #4]
 8021f46:	f603 2394 	addw	r3, r3, #2708	; 0xa94
 8021f4a:	4618      	mov	r0, r3
 8021f4c:	f001 fb38 	bl	80235c0 <_ZNSt5arrayIhLj256EE4dataEv>
 8021f50:	4601      	mov	r1, r0
					CurrentRequest.RequestSize);
 8021f52:	687b      	ldr	r3, [r7, #4]
 8021f54:	f8d3 3b94 	ldr.w	r3, [r3, #2964]	; 0xb94
			HAL_UART_Receive_IT(UartHandle, CurrentRequest.Data.data(),
 8021f58:	b29b      	uxth	r3, r3
 8021f5a:	461a      	mov	r2, r3
 8021f5c:	4620      	mov	r0, r4
 8021f5e:	f013 f921 	bl	80351a4 <HAL_UART_Receive_IT>
			break;
 8021f62:	e02d      	b.n	8021fc0 <_ZN13HeadInterface19ProcessRecievedDataEv+0x1b4>
		}
		case ReadState::DATA: {
			CurrentState = ReadState::SOM3;
 8021f64:	687b      	ldr	r3, [r7, #4]
 8021f66:	2207      	movs	r2, #7
 8021f68:	f8c3 2a90 	str.w	r2, [r3, #2704]	; 0xa90
			HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 8021f6c:	687b      	ldr	r3, [r7, #4]
 8021f6e:	f8d3 0a84 	ldr.w	r0, [r3, #2692]	; 0xa84
 8021f72:	687b      	ldr	r3, [r7, #4]
 8021f74:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 8021f78:	2201      	movs	r2, #1
 8021f7a:	4619      	mov	r1, r3
 8021f7c:	f013 f912 	bl	80351a4 <HAL_UART_Receive_IT>
			break;
 8021f80:	e01e      	b.n	8021fc0 <_ZN13HeadInterface19ProcessRecievedDataEv+0x1b4>
		}
		case ReadState::SOM3: {
			if (CurrentValue == SOM3Val) {
 8021f82:	687b      	ldr	r3, [r7, #4]
 8021f84:	f893 3a8c 	ldrb.w	r3, [r3, #2700]	; 0xa8c
 8021f88:	2baf      	cmp	r3, #175	; 0xaf
 8021f8a:	d111      	bne.n	8021fb0 <_ZN13HeadInterface19ProcessRecievedDataEv+0x1a4>
				size_t sz = Requests.GetSize();
 8021f8c:	687b      	ldr	r3, [r7, #4]
 8021f8e:	4618      	mov	r0, r3
 8021f90:	f001 fc6e 	bl	8023870 <_ZNK10FixedQueueI7RequestLj10EE7GetSizeEv>
 8021f94:	60f8      	str	r0, [r7, #12]
				Requests.Push(CurrentRequest);
 8021f96:	687a      	ldr	r2, [r7, #4]
 8021f98:	687b      	ldr	r3, [r7, #4]
 8021f9a:	f603 2394 	addw	r3, r3, #2708	; 0xa94
 8021f9e:	4619      	mov	r1, r3
 8021fa0:	4610      	mov	r0, r2
 8021fa2:	f001 fc71 	bl	8023888 <_ZN10FixedQueueI7RequestLj10EE4PushERKS0_>
				nRequests++;
 8021fa6:	4b08      	ldr	r3, [pc, #32]	; (8021fc8 <_ZN13HeadInterface19ProcessRecievedDataEv+0x1bc>)
 8021fa8:	681b      	ldr	r3, [r3, #0]
 8021faa:	3301      	adds	r3, #1
 8021fac:	4a06      	ldr	r2, [pc, #24]	; (8021fc8 <_ZN13HeadInterface19ProcessRecievedDataEv+0x1bc>)
 8021fae:	6013      	str	r3, [r2, #0]
				//CurrentRequest = { };
			}
			ResetReadState();
 8021fb0:	6878      	ldr	r0, [r7, #4]
 8021fb2:	f7ff fe39 	bl	8021c28 <_ZN13HeadInterface14ResetReadStateEv>
			break;
 8021fb6:	e003      	b.n	8021fc0 <_ZN13HeadInterface19ProcessRecievedDataEv+0x1b4>
		}
		default:
			ResetReadState();
 8021fb8:	6878      	ldr	r0, [r7, #4]
 8021fba:	f7ff fe35 	bl	8021c28 <_ZN13HeadInterface14ResetReadStateEv>
		}
	}
 8021fbe:	bf00      	nop
 8021fc0:	bf00      	nop
 8021fc2:	3714      	adds	r7, #20
 8021fc4:	46bd      	mov	sp, r7
 8021fc6:	bd90      	pop	{r4, r7, pc}
 8021fc8:	240001cc 	.word	0x240001cc

08021fcc <_ZN17IMUFrameContainer4Info11SerializeToEPPh>:
		uint16_t NumAv;
		uint16_t MaxFrames;

		static constexpr size_t Size = 3 * sizeof(uint16_t);

		void SerializeTo(uint8_t **ptr) {
 8021fcc:	b580      	push	{r7, lr}
 8021fce:	b082      	sub	sp, #8
 8021fd0:	af00      	add	r7, sp, #0
 8021fd2:	6078      	str	r0, [r7, #4]
 8021fd4:	6039      	str	r1, [r7, #0]
			assert(ptr);
 8021fd6:	683b      	ldr	r3, [r7, #0]
 8021fd8:	2b00      	cmp	r3, #0
 8021fda:	d106      	bne.n	8021fea <_ZN17IMUFrameContainer4Info11SerializeToEPPh+0x1e>
 8021fdc:	4b19      	ldr	r3, [pc, #100]	; (8022044 <_ZN17IMUFrameContainer4Info11SerializeToEPPh+0x78>)
 8021fde:	4a1a      	ldr	r2, [pc, #104]	; (8022048 <_ZN17IMUFrameContainer4Info11SerializeToEPPh+0x7c>)
 8021fe0:	f44f 7113 	mov.w	r1, #588	; 0x24c
 8021fe4:	4819      	ldr	r0, [pc, #100]	; (802204c <_ZN17IMUFrameContainer4Info11SerializeToEPPh+0x80>)
 8021fe6:	f019 fe61 	bl	803bcac <__assert_func>
			assert(*ptr);
 8021fea:	683b      	ldr	r3, [r7, #0]
 8021fec:	681b      	ldr	r3, [r3, #0]
 8021fee:	2b00      	cmp	r3, #0
 8021ff0:	d106      	bne.n	8022000 <_ZN17IMUFrameContainer4Info11SerializeToEPPh+0x34>
 8021ff2:	4b17      	ldr	r3, [pc, #92]	; (8022050 <_ZN17IMUFrameContainer4Info11SerializeToEPPh+0x84>)
 8021ff4:	4a14      	ldr	r2, [pc, #80]	; (8022048 <_ZN17IMUFrameContainer4Info11SerializeToEPPh+0x7c>)
 8021ff6:	f240 214d 	movw	r1, #589	; 0x24d
 8021ffa:	4814      	ldr	r0, [pc, #80]	; (802204c <_ZN17IMUFrameContainer4Info11SerializeToEPPh+0x80>)
 8021ffc:	f019 fe56 	bl	803bcac <__assert_func>

			*reinterpret_cast<uint16_t*>(*ptr) = First;
 8022000:	683b      	ldr	r3, [r7, #0]
 8022002:	681b      	ldr	r3, [r3, #0]
 8022004:	687a      	ldr	r2, [r7, #4]
 8022006:	8812      	ldrh	r2, [r2, #0]
 8022008:	801a      	strh	r2, [r3, #0]
			*ptr += sizeof(uint16_t);
 802200a:	683b      	ldr	r3, [r7, #0]
 802200c:	681b      	ldr	r3, [r3, #0]
 802200e:	1c9a      	adds	r2, r3, #2
 8022010:	683b      	ldr	r3, [r7, #0]
 8022012:	601a      	str	r2, [r3, #0]

			*reinterpret_cast<uint16_t*>(*ptr) = NumAv;
 8022014:	683b      	ldr	r3, [r7, #0]
 8022016:	681b      	ldr	r3, [r3, #0]
 8022018:	687a      	ldr	r2, [r7, #4]
 802201a:	8852      	ldrh	r2, [r2, #2]
 802201c:	801a      	strh	r2, [r3, #0]
			*ptr += sizeof(uint16_t);
 802201e:	683b      	ldr	r3, [r7, #0]
 8022020:	681b      	ldr	r3, [r3, #0]
 8022022:	1c9a      	adds	r2, r3, #2
 8022024:	683b      	ldr	r3, [r7, #0]
 8022026:	601a      	str	r2, [r3, #0]

			*reinterpret_cast<uint16_t*>(*ptr) = MaxFrames;
 8022028:	683b      	ldr	r3, [r7, #0]
 802202a:	681b      	ldr	r3, [r3, #0]
 802202c:	687a      	ldr	r2, [r7, #4]
 802202e:	8892      	ldrh	r2, [r2, #4]
 8022030:	801a      	strh	r2, [r3, #0]
			*ptr += sizeof(uint16_t);
 8022032:	683b      	ldr	r3, [r7, #0]
 8022034:	681b      	ldr	r3, [r3, #0]
 8022036:	1c9a      	adds	r2, r3, #2
 8022038:	683b      	ldr	r3, [r7, #0]
 802203a:	601a      	str	r2, [r3, #0]
		}
 802203c:	bf00      	nop
 802203e:	3708      	adds	r7, #8
 8022040:	46bd      	mov	sp, r7
 8022042:	bd80      	pop	{r7, pc}
 8022044:	0803cecc 	.word	0x0803cecc
 8022048:	0803d394 	.word	0x0803d394
 802204c:	0803cf00 	.word	0x0803cf00
 8022050:	0803cf1c 	.word	0x0803cf1c

08022054 <_ZN17IMUFrameContainer5ResetEv>:
	};

public:
	void Reset() {
 8022054:	b580      	push	{r7, lr}
 8022056:	b084      	sub	sp, #16
 8022058:	af00      	add	r7, sp, #0
 802205a:	6078      	str	r0, [r7, #4]
		FrameQueue = { };
 802205c:	6878      	ldr	r0, [r7, #4]
 802205e:	2300      	movs	r3, #0
 8022060:	60bb      	str	r3, [r7, #8]
 8022062:	2300      	movs	r3, #0
 8022064:	60fb      	str	r3, [r7, #12]
 8022066:	f107 0308 	add.w	r3, r7, #8
 802206a:	e893 0006 	ldmia.w	r3, {r1, r2}
 802206e:	f001 fc4d 	bl	802390c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEaSESt16initializer_listIS1_E>
		FirstSeq = 0;
 8022072:	687b      	ldr	r3, [r7, #4]
 8022074:	2200      	movs	r2, #0
 8022076:	629a      	str	r2, [r3, #40]	; 0x28
	}
 8022078:	bf00      	nop
 802207a:	3710      	adds	r7, #16
 802207c:	46bd      	mov	sp, r7
 802207e:	bd80      	pop	{r7, pc}

08022080 <_ZN17IMUFrameContainer3AddERKN10BHYWrapper8BHYFrameE>:

	void Add(const BHYWrapper::BHYFrame &frame) {
 8022080:	b580      	push	{r7, lr}
 8022082:	b082      	sub	sp, #8
 8022084:	af00      	add	r7, sp, #0
 8022086:	6078      	str	r0, [r7, #4]
 8022088:	6039      	str	r1, [r7, #0]
		FrameQueue.push_front(frame);
 802208a:	687b      	ldr	r3, [r7, #4]
 802208c:	6839      	ldr	r1, [r7, #0]
 802208e:	4618      	mov	r0, r3
 8022090:	f001 fc57 	bl	8023942 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE10push_frontERKS1_>
		if (FrameQueue.size() > MaxFrames)
 8022094:	687b      	ldr	r3, [r7, #4]
 8022096:	4618      	mov	r0, r3
 8022098:	f001 fc75 	bl	8023986 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 802209c:	4602      	mov	r2, r0
 802209e:	687b      	ldr	r3, [r7, #4]
 80220a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80220a2:	429a      	cmp	r2, r3
 80220a4:	bf8c      	ite	hi
 80220a6:	2301      	movhi	r3, #1
 80220a8:	2300      	movls	r3, #0
 80220aa:	b2db      	uxtb	r3, r3
 80220ac:	2b00      	cmp	r3, #0
 80220ae:	d002      	beq.n	80220b6 <_ZN17IMUFrameContainer3AddERKN10BHYWrapper8BHYFrameE+0x36>
			Remove();
 80220b0:	6878      	ldr	r0, [r7, #4]
 80220b2:	f000 f804 	bl	80220be <_ZN17IMUFrameContainer6RemoveEv>
	}
 80220b6:	bf00      	nop
 80220b8:	3708      	adds	r7, #8
 80220ba:	46bd      	mov	sp, r7
 80220bc:	bd80      	pop	{r7, pc}

080220be <_ZN17IMUFrameContainer6RemoveEv>:

	void Remove() {
 80220be:	b580      	push	{r7, lr}
 80220c0:	b082      	sub	sp, #8
 80220c2:	af00      	add	r7, sp, #0
 80220c4:	6078      	str	r0, [r7, #4]
		FrameQueue.pop_back();
 80220c6:	687b      	ldr	r3, [r7, #4]
 80220c8:	4618      	mov	r0, r3
 80220ca:	f001 fc6e 	bl	80239aa <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE8pop_backEv>
		FirstSeq++;
 80220ce:	687b      	ldr	r3, [r7, #4]
 80220d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80220d2:	1c5a      	adds	r2, r3, #1
 80220d4:	687b      	ldr	r3, [r7, #4]
 80220d6:	629a      	str	r2, [r3, #40]	; 0x28
	}
 80220d8:	bf00      	nop
 80220da:	3708      	adds	r7, #8
 80220dc:	46bd      	mov	sp, r7
 80220de:	bd80      	pop	{r7, pc}

080220e0 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE>:

	bool Get(size_t seq, BHYWrapper::BHYFrame &frame) const {
 80220e0:	b5b0      	push	{r4, r5, r7, lr}
 80220e2:	b08a      	sub	sp, #40	; 0x28
 80220e4:	af00      	add	r7, sp, #0
 80220e6:	60f8      	str	r0, [r7, #12]
 80220e8:	60b9      	str	r1, [r7, #8]
 80220ea:	607a      	str	r2, [r7, #4]
		if (FrameQueue.empty())
 80220ec:	68fb      	ldr	r3, [r7, #12]
 80220ee:	4618      	mov	r0, r3
 80220f0:	f001 fc7e 	bl	80239f0 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5emptyEv>
 80220f4:	4603      	mov	r3, r0
 80220f6:	2b00      	cmp	r3, #0
 80220f8:	d001      	beq.n	80220fe <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x1e>
			return false;
 80220fa:	2300      	movs	r3, #0
 80220fc:	e038      	b.n	8022170 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x90>

		if (seq < FirstSeq || seq > FrameQueue.size() + FirstSeq - 1)
 80220fe:	68fb      	ldr	r3, [r7, #12]
 8022100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022102:	68ba      	ldr	r2, [r7, #8]
 8022104:	429a      	cmp	r2, r3
 8022106:	d30b      	bcc.n	8022120 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x40>
 8022108:	68fb      	ldr	r3, [r7, #12]
 802210a:	4618      	mov	r0, r3
 802210c:	f001 fc3b 	bl	8023986 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8022110:	4602      	mov	r2, r0
 8022112:	68fb      	ldr	r3, [r7, #12]
 8022114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022116:	4413      	add	r3, r2
 8022118:	3b01      	subs	r3, #1
 802211a:	68ba      	ldr	r2, [r7, #8]
 802211c:	429a      	cmp	r2, r3
 802211e:	d901      	bls.n	8022124 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x44>
 8022120:	2301      	movs	r3, #1
 8022122:	e000      	b.n	8022126 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x46>
 8022124:	2300      	movs	r3, #0
 8022126:	2b00      	cmp	r3, #0
 8022128:	d001      	beq.n	802212e <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x4e>
			return false;
 802212a:	2300      	movs	r3, #0
 802212c:	e020      	b.n	8022170 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x90>

		auto imuFrame = FrameQueue[(FrameQueue.size() - 1) - (seq - FirstSeq)];
 802212e:	68fc      	ldr	r4, [r7, #12]
 8022130:	68fb      	ldr	r3, [r7, #12]
 8022132:	4618      	mov	r0, r3
 8022134:	f001 fc27 	bl	8023986 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8022138:	4601      	mov	r1, r0
 802213a:	68fb      	ldr	r3, [r7, #12]
 802213c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 802213e:	68bb      	ldr	r3, [r7, #8]
 8022140:	1ad3      	subs	r3, r2, r3
 8022142:	440b      	add	r3, r1
 8022144:	3b01      	subs	r3, #1
 8022146:	4619      	mov	r1, r3
 8022148:	4620      	mov	r0, r4
 802214a:	f001 fc63 	bl	8023a14 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEixEj>
 802214e:	4603      	mov	r3, r0
 8022150:	f107 0414 	add.w	r4, r7, #20
 8022154:	461d      	mov	r5, r3
 8022156:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8022158:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802215a:	682b      	ldr	r3, [r5, #0]
 802215c:	6023      	str	r3, [r4, #0]
		//assert(imuFrame.Seq == seq);

		frame = imuFrame;
 802215e:	687b      	ldr	r3, [r7, #4]
 8022160:	461d      	mov	r5, r3
 8022162:	f107 0414 	add.w	r4, r7, #20
 8022166:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8022168:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 802216a:	6823      	ldr	r3, [r4, #0]
 802216c:	602b      	str	r3, [r5, #0]
		return true;
 802216e:	2301      	movs	r3, #1
	}
 8022170:	4618      	mov	r0, r3
 8022172:	3728      	adds	r7, #40	; 0x28
 8022174:	46bd      	mov	sp, r7
 8022176:	bdb0      	pop	{r4, r5, r7, pc}

08022178 <_ZNK17IMUFrameContainer7GetInfoEv>:
		if (FrameQueue.empty())
			return false;
		return Get(FrameQueue.size() - 1, frame);
	}

	Info GetInfo() const {
 8022178:	b580      	push	{r7, lr}
 802217a:	b082      	sub	sp, #8
 802217c:	af00      	add	r7, sp, #0
 802217e:	6078      	str	r0, [r7, #4]
 8022180:	6039      	str	r1, [r7, #0]
		return {FirstSeq, FrameQueue.size(), MaxFrames};
 8022182:	683b      	ldr	r3, [r7, #0]
 8022184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022186:	b29a      	uxth	r2, r3
 8022188:	687b      	ldr	r3, [r7, #4]
 802218a:	801a      	strh	r2, [r3, #0]
 802218c:	683b      	ldr	r3, [r7, #0]
 802218e:	4618      	mov	r0, r3
 8022190:	f001 fbf9 	bl	8023986 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8022194:	4603      	mov	r3, r0
 8022196:	b29a      	uxth	r2, r3
 8022198:	687b      	ldr	r3, [r7, #4]
 802219a:	805a      	strh	r2, [r3, #2]
 802219c:	683b      	ldr	r3, [r7, #0]
 802219e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80221a0:	b29a      	uxth	r2, r3
 80221a2:	687b      	ldr	r3, [r7, #4]
 80221a4:	809a      	strh	r2, [r3, #4]
	}
 80221a6:	6878      	ldr	r0, [r7, #4]
 80221a8:	3708      	adds	r7, #8
 80221aa:	46bd      	mov	sp, r7
 80221ac:	bd80      	pop	{r7, pc}

080221ae <_ZN20StrobeDurationFilter13ProcessStrobeERK10BHYWrapper>:

	std::queue<size_t> StrobeQueue;
	size_t CurrentSeq = 0;

public:
	void ProcessStrobe(const BHYWrapper &IMU) {
 80221ae:	b580      	push	{r7, lr}
 80221b0:	b086      	sub	sp, #24
 80221b2:	af00      	add	r7, sp, #0
 80221b4:	6078      	str	r0, [r7, #4]
 80221b6:	6039      	str	r1, [r7, #0]
		uint32_t currentTime = HAL_GetTick();
 80221b8:	f008 fcfe 	bl	802abb8 <HAL_GetTick>
 80221bc:	6178      	str	r0, [r7, #20]

		switch (State) {
 80221be:	687b      	ldr	r3, [r7, #4]
 80221c0:	689b      	ldr	r3, [r3, #8]
 80221c2:	2b00      	cmp	r3, #0
 80221c4:	d04e      	beq.n	8022264 <_ZN20StrobeDurationFilter13ProcessStrobeERK10BHYWrapper+0xb6>
 80221c6:	2b01      	cmp	r3, #1
 80221c8:	d154      	bne.n	8022274 <_ZN20StrobeDurationFilter13ProcessStrobeERK10BHYWrapper+0xc6>
		case PulseState::Down: {
			State = PulseState::Up;
 80221ca:	687b      	ldr	r3, [r7, #4]
 80221cc:	2200      	movs	r2, #0
 80221ce:	609a      	str	r2, [r3, #8]

			uint32_t startTime = RiseTime;
 80221d0:	687b      	ldr	r3, [r7, #4]
 80221d2:	685b      	ldr	r3, [r3, #4]
 80221d4:	613b      	str	r3, [r7, #16]
			RiseTime = currentTime;
 80221d6:	687b      	ldr	r3, [r7, #4]
 80221d8:	697a      	ldr	r2, [r7, #20]
 80221da:	605a      	str	r2, [r3, #4]

			if (!FallTime || !RiseTime)
 80221dc:	687b      	ldr	r3, [r7, #4]
 80221de:	681b      	ldr	r3, [r3, #0]
 80221e0:	2b00      	cmp	r3, #0
 80221e2:	d046      	beq.n	8022272 <_ZN20StrobeDurationFilter13ProcessStrobeERK10BHYWrapper+0xc4>
 80221e4:	687b      	ldr	r3, [r7, #4]
 80221e6:	685b      	ldr	r3, [r3, #4]
 80221e8:	2b00      	cmp	r3, #0
 80221ea:	d042      	beq.n	8022272 <_ZN20StrobeDurationFilter13ProcessStrobeERK10BHYWrapper+0xc4>
				return;

			uint32_t duration = currentTime - startTime;
 80221ec:	697a      	ldr	r2, [r7, #20]
 80221ee:	693b      	ldr	r3, [r7, #16]
 80221f0:	1ad3      	subs	r3, r2, r3
 80221f2:	60fb      	str	r3, [r7, #12]

			StrobeDuration += duration;
 80221f4:	687b      	ldr	r3, [r7, #4]
 80221f6:	ed93 7a05 	vldr	s14, [r3, #20]
 80221fa:	68fb      	ldr	r3, [r7, #12]
 80221fc:	ee07 3a90 	vmov	s15, r3
 8022200:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8022204:	ee77 7a27 	vadd.f32	s15, s14, s15
 8022208:	687b      	ldr	r3, [r7, #4]
 802220a:	edc3 7a05 	vstr	s15, [r3, #20]
			StrobeDuration /= 2;
 802220e:	687b      	ldr	r3, [r7, #4]
 8022210:	ed93 7a05 	vldr	s14, [r3, #20]
 8022214:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8022218:	eec7 7a26 	vdiv.f32	s15, s14, s13
 802221c:	687b      	ldr	r3, [r7, #4]
 802221e:	edc3 7a05 	vstr	s15, [r3, #20]

			if (std::abs(long(duration - TargetDuration))
 8022222:	687b      	ldr	r3, [r7, #4]
 8022224:	691b      	ldr	r3, [r3, #16]
 8022226:	68fa      	ldr	r2, [r7, #12]
 8022228:	1ad3      	subs	r3, r2, r3
 802222a:	4618      	mov	r0, r3
 802222c:	f7fe fe32 	bl	8020e94 <_ZSt3absl>
 8022230:	4602      	mov	r2, r0
					< long(DurationThreshold))
 8022232:	687b      	ldr	r3, [r7, #4]
 8022234:	68db      	ldr	r3, [r3, #12]
 8022236:	429a      	cmp	r2, r3
 8022238:	bfb4      	ite	lt
 802223a:	2301      	movlt	r3, #1
 802223c:	2300      	movge	r3, #0
 802223e:	b2db      	uxtb	r3, r3
			if (std::abs(long(duration - TargetDuration))
 8022240:	2b00      	cmp	r3, #0
 8022242:	d008      	beq.n	8022256 <_ZN20StrobeDurationFilter13ProcessStrobeERK10BHYWrapper+0xa8>
				StrobeQueue.push(CurrentSeq);
 8022244:	687b      	ldr	r3, [r7, #4]
 8022246:	f103 0218 	add.w	r2, r3, #24
 802224a:	687b      	ldr	r3, [r7, #4]
 802224c:	3340      	adds	r3, #64	; 0x40
 802224e:	4619      	mov	r1, r3
 8022250:	4610      	mov	r0, r2
 8022252:	f001 fbf0 	bl	8023a36 <_ZNSt5queueIjSt5dequeIjSaIjEEE4pushERKj>

			CurrentSeq = IMU.GetSeq();
 8022256:	6838      	ldr	r0, [r7, #0]
 8022258:	f7fe fcdc 	bl	8020c14 <_ZNK10BHYWrapper6GetSeqEv>
 802225c:	4602      	mov	r2, r0
 802225e:	687b      	ldr	r3, [r7, #4]
 8022260:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 8022262:	e007      	b.n	8022274 <_ZN20StrobeDurationFilter13ProcessStrobeERK10BHYWrapper+0xc6>
		}
		case PulseState::Up:
			State = PulseState::Down;
 8022264:	687b      	ldr	r3, [r7, #4]
 8022266:	2201      	movs	r2, #1
 8022268:	609a      	str	r2, [r3, #8]
			FallTime = currentTime;
 802226a:	687b      	ldr	r3, [r7, #4]
 802226c:	697a      	ldr	r2, [r7, #20]
 802226e:	601a      	str	r2, [r3, #0]
			break;
 8022270:	e000      	b.n	8022274 <_ZN20StrobeDurationFilter13ProcessStrobeERK10BHYWrapper+0xc6>
				return;
 8022272:	bf00      	nop
		}
	}
 8022274:	3718      	adds	r7, #24
 8022276:	46bd      	mov	sp, r7
 8022278:	bd80      	pop	{r7, pc}

0802227a <_ZN20StrobeDurationFilter9ConfigureEhh>:

	void Configure(uint8_t targetDuration, uint8_t durationThreshold) {
 802227a:	b480      	push	{r7}
 802227c:	b083      	sub	sp, #12
 802227e:	af00      	add	r7, sp, #0
 8022280:	6078      	str	r0, [r7, #4]
 8022282:	460b      	mov	r3, r1
 8022284:	70fb      	strb	r3, [r7, #3]
 8022286:	4613      	mov	r3, r2
 8022288:	70bb      	strb	r3, [r7, #2]
		TargetDuration = targetDuration;
 802228a:	78fa      	ldrb	r2, [r7, #3]
 802228c:	687b      	ldr	r3, [r7, #4]
 802228e:	611a      	str	r2, [r3, #16]
		DurationThreshold = durationThreshold;
 8022290:	78ba      	ldrb	r2, [r7, #2]
 8022292:	687b      	ldr	r3, [r7, #4]
 8022294:	60da      	str	r2, [r3, #12]
	}
 8022296:	bf00      	nop
 8022298:	370c      	adds	r7, #12
 802229a:	46bd      	mov	sp, r7
 802229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80222a0:	4770      	bx	lr

080222a2 <_ZNK20StrobeDurationFilter17GetStrobeDurationEv>:

	float GetStrobeDuration() const {
 80222a2:	b480      	push	{r7}
 80222a4:	b083      	sub	sp, #12
 80222a6:	af00      	add	r7, sp, #0
 80222a8:	6078      	str	r0, [r7, #4]
		return StrobeDuration;
 80222aa:	687b      	ldr	r3, [r7, #4]
 80222ac:	695b      	ldr	r3, [r3, #20]
 80222ae:	ee07 3a90 	vmov	s15, r3
	}
 80222b2:	eeb0 0a67 	vmov.f32	s0, s15
 80222b6:	370c      	adds	r7, #12
 80222b8:	46bd      	mov	sp, r7
 80222ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80222be:	4770      	bx	lr

080222c0 <_ZN20StrobeDurationFilter19ResetStrobeDurationEv>:

	void ResetStrobeDuration() {
 80222c0:	b480      	push	{r7}
 80222c2:	b083      	sub	sp, #12
 80222c4:	af00      	add	r7, sp, #0
 80222c6:	6078      	str	r0, [r7, #4]
		StrobeDuration = 1;
 80222c8:	687b      	ldr	r3, [r7, #4]
 80222ca:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80222ce:	615a      	str	r2, [r3, #20]
	}
 80222d0:	bf00      	nop
 80222d2:	370c      	adds	r7, #12
 80222d4:	46bd      	mov	sp, r7
 80222d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80222da:	4770      	bx	lr

080222dc <_ZNK20StrobeDurationFilter9GetStrobeEv>:

	size_t GetStrobe() const {
 80222dc:	b580      	push	{r7, lr}
 80222de:	b082      	sub	sp, #8
 80222e0:	af00      	add	r7, sp, #0
 80222e2:	6078      	str	r0, [r7, #4]
		assert(HasStrobe());
 80222e4:	6878      	ldr	r0, [r7, #4]
 80222e6:	f000 f81b 	bl	8022320 <_ZNK20StrobeDurationFilter9HasStrobeEv>
 80222ea:	4603      	mov	r3, r0
 80222ec:	2b00      	cmp	r3, #0
 80222ee:	d106      	bne.n	80222fe <_ZNK20StrobeDurationFilter9GetStrobeEv+0x22>
 80222f0:	4b08      	ldr	r3, [pc, #32]	; (8022314 <_ZNK20StrobeDurationFilter9GetStrobeEv+0x38>)
 80222f2:	4a09      	ldr	r2, [pc, #36]	; (8022318 <_ZNK20StrobeDurationFilter9GetStrobeEv+0x3c>)
 80222f4:	f240 21c5 	movw	r1, #709	; 0x2c5
 80222f8:	4808      	ldr	r0, [pc, #32]	; (802231c <_ZNK20StrobeDurationFilter9GetStrobeEv+0x40>)
 80222fa:	f019 fcd7 	bl	803bcac <__assert_func>
		return StrobeQueue.front();
 80222fe:	687b      	ldr	r3, [r7, #4]
 8022300:	3318      	adds	r3, #24
 8022302:	4618      	mov	r0, r3
 8022304:	f001 fba5 	bl	8023a52 <_ZNKSt5queueIjSt5dequeIjSaIjEEE5frontEv>
 8022308:	4603      	mov	r3, r0
 802230a:	681b      	ldr	r3, [r3, #0]
	}
 802230c:	4618      	mov	r0, r3
 802230e:	3708      	adds	r7, #8
 8022310:	46bd      	mov	sp, r7
 8022312:	bd80      	pop	{r7, pc}
 8022314:	0803d3cc 	.word	0x0803d3cc
 8022318:	0803d3d8 	.word	0x0803d3d8
 802231c:	0803cf00 	.word	0x0803cf00

08022320 <_ZNK20StrobeDurationFilter9HasStrobeEv>:

	bool HasStrobe() const {
 8022320:	b580      	push	{r7, lr}
 8022322:	b082      	sub	sp, #8
 8022324:	af00      	add	r7, sp, #0
 8022326:	6078      	str	r0, [r7, #4]
		return !StrobeQueue.empty();
 8022328:	687b      	ldr	r3, [r7, #4]
 802232a:	3318      	adds	r3, #24
 802232c:	4618      	mov	r0, r3
 802232e:	f001 fb9d 	bl	8023a6c <_ZNKSt5queueIjSt5dequeIjSaIjEEE5emptyEv>
 8022332:	4603      	mov	r3, r0
 8022334:	f083 0301 	eor.w	r3, r3, #1
 8022338:	b2db      	uxtb	r3, r3
	}
 802233a:	4618      	mov	r0, r3
 802233c:	3708      	adds	r7, #8
 802233e:	46bd      	mov	sp, r7
 8022340:	bd80      	pop	{r7, pc}

08022342 <_ZN20StrobeDurationFilter9PopStrobeEv>:

	void PopStrobe() {
 8022342:	b580      	push	{r7, lr}
 8022344:	b082      	sub	sp, #8
 8022346:	af00      	add	r7, sp, #0
 8022348:	6078      	str	r0, [r7, #4]
		StrobeQueue.pop();
 802234a:	687b      	ldr	r3, [r7, #4]
 802234c:	3318      	adds	r3, #24
 802234e:	4618      	mov	r0, r3
 8022350:	f001 fb99 	bl	8023a86 <_ZNSt5queueIjSt5dequeIjSaIjEEE3popEv>
	}
 8022354:	bf00      	nop
 8022356:	3708      	adds	r7, #8
 8022358:	46bd      	mov	sp, r7
 802235a:	bd80      	pop	{r7, pc}

0802235c <_ZN17IMURequestHandler11RequestMode9SerializeEh>:
		static constexpr Type Reset = 3;
		static constexpr Type SetOffset = 4;
		static constexpr Type StrobeWidth = 5;
		static constexpr Type ConfigureFilter = 6;

		static uint8_t Serialize(Type mode) {
 802235c:	b480      	push	{r7}
 802235e:	b083      	sub	sp, #12
 8022360:	af00      	add	r7, sp, #0
 8022362:	4603      	mov	r3, r0
 8022364:	71fb      	strb	r3, [r7, #7]
			return mode;
 8022366:	79fb      	ldrb	r3, [r7, #7]
		}
 8022368:	4618      	mov	r0, r3
 802236a:	370c      	adds	r7, #12
 802236c:	46bd      	mov	sp, r7
 802236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022372:	4770      	bx	lr

08022374 <_ZN17IMURequestHandler11RequestMode11DeserializeEh>:
		static Type Deserialize(uint8_t meta) {
 8022374:	b480      	push	{r7}
 8022376:	b083      	sub	sp, #12
 8022378:	af00      	add	r7, sp, #0
 802237a:	4603      	mov	r3, r0
 802237c:	71fb      	strb	r3, [r7, #7]
			return meta;
 802237e:	79fb      	ldrb	r3, [r7, #7]
		}
 8022380:	4618      	mov	r0, r3
 8022382:	370c      	adds	r7, #12
 8022384:	46bd      	mov	sp, r7
 8022386:	f85d 7b04 	ldr.w	r7, [sp], #4
 802238a:	4770      	bx	lr

0802238c <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer>:
		static constexpr Type BadRequest = 3;
		static constexpr Type BadOffset = 4;
	};

private:
	Responce GetFrameBySeq(const Request &request,
 802238c:	b580      	push	{r7, lr}
 802238e:	b08c      	sub	sp, #48	; 0x30
 8022390:	af00      	add	r7, sp, #0
 8022392:	60f8      	str	r0, [r7, #12]
 8022394:	60b9      	str	r1, [r7, #8]
 8022396:	607a      	str	r2, [r7, #4]
 8022398:	603b      	str	r3, [r7, #0]
			const IMUFrameContainer &container) {
		assert(
 802239a:	687b      	ldr	r3, [r7, #4]
 802239c:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 80223a0:	4618      	mov	r0, r3
 80223a2:	f7ff ffe7 	bl	8022374 <_ZN17IMURequestHandler11RequestMode11DeserializeEh>
 80223a6:	4603      	mov	r3, r0
 80223a8:	2b00      	cmp	r3, #0
 80223aa:	d006      	beq.n	80223ba <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0x2e>
 80223ac:	4b28      	ldr	r3, [pc, #160]	; (8022450 <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0xc4>)
 80223ae:	4a29      	ldr	r2, [pc, #164]	; (8022454 <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0xc8>)
 80223b0:	f240 21f2 	movw	r1, #754	; 0x2f2
 80223b4:	4828      	ldr	r0, [pc, #160]	; (8022458 <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0xcc>)
 80223b6:	f019 fc79 	bl	803bcac <__assert_func>
				RequestMode::Deserialize(request.MetaInfo)
						== RequestMode::FrameBySeq);

		Responce responce;
		responce.PeripheryID = Periphery::Imu;
 80223ba:	68fb      	ldr	r3, [r7, #12]
 80223bc:	2201      	movs	r2, #1
 80223be:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
		responce.MetaInfo = RequestMode::Serialize(RequestMode::FrameBySeq);
 80223c2:	2000      	movs	r0, #0
 80223c4:	f7ff ffca 	bl	802235c <_ZN17IMURequestHandler11RequestMode9SerializeEh>
 80223c8:	4603      	mov	r3, r0
 80223ca:	461a      	mov	r2, r3
 80223cc:	68fb      	ldr	r3, [r7, #12]
 80223ce:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
		responce.ResponceSize = BHYWrapper::BHYFrame::Size;
 80223d2:	68fb      	ldr	r3, [r7, #12]
 80223d4:	2211      	movs	r2, #17
 80223d6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

		if (request.RequestSize != 2) {
 80223da:	687b      	ldr	r3, [r7, #4]
 80223dc:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80223e0:	2b02      	cmp	r3, #2
 80223e2:	d004      	beq.n	80223ee <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0x62>
			responce.Error = ErrorCodes::BadRequest;
 80223e4:	68fb      	ldr	r3, [r7, #12]
 80223e6:	2203      	movs	r2, #3
 80223e8:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
			return responce;
 80223ec:	e02c      	b.n	8022448 <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0xbc>
		}

		uint16_t frameSeq =
				*reinterpret_cast<const uint16_t*>(request.Data.data());
 80223ee:	687b      	ldr	r3, [r7, #4]
 80223f0:	4618      	mov	r0, r3
 80223f2:	f001 f925 	bl	8023640 <_ZNKSt5arrayIhLj256EE4dataEv>
 80223f6:	4603      	mov	r3, r0
 80223f8:	881b      	ldrh	r3, [r3, #0]
 80223fa:	85fb      	strh	r3, [r7, #46]	; 0x2e

		BHYWrapper::BHYFrame imuFrame;
		bool ok = container.Get(frameSeq, imuFrame);
 80223fc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80223fe:	f107 0218 	add.w	r2, r7, #24
 8022402:	4619      	mov	r1, r3
 8022404:	6838      	ldr	r0, [r7, #0]
 8022406:	f7ff fe6b 	bl	80220e0 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE>
 802240a:	4603      	mov	r3, r0
 802240c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

		if (!ok) {
 8022410:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8022414:	f083 0301 	eor.w	r3, r3, #1
 8022418:	b2db      	uxtb	r3, r3
 802241a:	2b00      	cmp	r3, #0
 802241c:	d004      	beq.n	8022428 <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0x9c>
			responce.Error = ErrorCodes::FrameUnavailable;
 802241e:	68fb      	ldr	r3, [r7, #12]
 8022420:	2201      	movs	r2, #1
 8022422:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
			return responce;
 8022426:	e00f      	b.n	8022448 <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0xbc>
		}

		uint8_t sz;
		imuFrame.SerializeTo(responce.Data.data(), &sz);
 8022428:	68f8      	ldr	r0, [r7, #12]
 802242a:	f001 f8c9 	bl	80235c0 <_ZNSt5arrayIhLj256EE4dataEv>
 802242e:	4601      	mov	r1, r0
 8022430:	f107 0217 	add.w	r2, r7, #23
 8022434:	f107 0318 	add.w	r3, r7, #24
 8022438:	4618      	mov	r0, r3
 802243a:	f7fe fb8d 	bl	8020b58 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_>
		responce.Error = ErrorCodes::Success;
 802243e:	68fb      	ldr	r3, [r7, #12]
 8022440:	2200      	movs	r2, #0
 8022442:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106

		return responce;
 8022446:	bf00      	nop
	}
 8022448:	68f8      	ldr	r0, [r7, #12]
 802244a:	3730      	adds	r7, #48	; 0x30
 802244c:	46bd      	mov	sp, r7
 802244e:	bd80      	pop	{r7, pc}
 8022450:	0803d408 	.word	0x0803d408
 8022454:	0803d450 	.word	0x0803d450
 8022458:	0803cf00 	.word	0x0803cf00

0802245c <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer>:

	Responce GetInfo(const Request &request,
 802245c:	b580      	push	{r7, lr}
 802245e:	b088      	sub	sp, #32
 8022460:	af00      	add	r7, sp, #0
 8022462:	60f8      	str	r0, [r7, #12]
 8022464:	60b9      	str	r1, [r7, #8]
 8022466:	607a      	str	r2, [r7, #4]
 8022468:	603b      	str	r3, [r7, #0]
			const IMUFrameContainer &container) {
		assert(RequestMode::Deserialize(request.MetaInfo) == RequestMode::Info);
 802246a:	687b      	ldr	r3, [r7, #4]
 802246c:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8022470:	4618      	mov	r0, r3
 8022472:	f7ff ff7f 	bl	8022374 <_ZN17IMURequestHandler11RequestMode11DeserializeEh>
 8022476:	4603      	mov	r3, r0
 8022478:	2b01      	cmp	r3, #1
 802247a:	d006      	beq.n	802248a <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer+0x2e>
 802247c:	4b1e      	ldr	r3, [pc, #120]	; (80224f8 <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer+0x9c>)
 802247e:	4a1f      	ldr	r2, [pc, #124]	; (80224fc <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer+0xa0>)
 8022480:	f44f 7145 	mov.w	r1, #788	; 0x314
 8022484:	481e      	ldr	r0, [pc, #120]	; (8022500 <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer+0xa4>)
 8022486:	f019 fc11 	bl	803bcac <__assert_func>

		Responce responce;
		responce.PeripheryID = Periphery::Imu;
 802248a:	68fb      	ldr	r3, [r7, #12]
 802248c:	2201      	movs	r2, #1
 802248e:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
		responce.MetaInfo = RequestMode::Serialize(RequestMode::Info);
 8022492:	2001      	movs	r0, #1
 8022494:	f7ff ff62 	bl	802235c <_ZN17IMURequestHandler11RequestMode9SerializeEh>
 8022498:	4603      	mov	r3, r0
 802249a:	461a      	mov	r2, r3
 802249c:	68fb      	ldr	r3, [r7, #12]
 802249e:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
		responce.ResponceSize = IMUFrameContainer::Info::Size;
 80224a2:	68fb      	ldr	r3, [r7, #12]
 80224a4:	2206      	movs	r2, #6
 80224a6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

		if (request.RequestSize != 1) {
 80224aa:	687b      	ldr	r3, [r7, #4]
 80224ac:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80224b0:	2b01      	cmp	r3, #1
 80224b2:	d004      	beq.n	80224be <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer+0x62>
			responce.Error = ErrorCodes::BadRequest;
 80224b4:	68fb      	ldr	r3, [r7, #12]
 80224b6:	2203      	movs	r2, #3
 80224b8:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
			return responce;
 80224bc:	e017      	b.n	80224ee <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer+0x92>
		}

		uint8_t *ptr = responce.Data.data();
 80224be:	68f8      	ldr	r0, [r7, #12]
 80224c0:	f001 f87e 	bl	80235c0 <_ZNSt5arrayIhLj256EE4dataEv>
 80224c4:	4603      	mov	r3, r0
 80224c6:	61fb      	str	r3, [r7, #28]
		auto info = container.GetInfo();
 80224c8:	f107 0314 	add.w	r3, r7, #20
 80224cc:	6839      	ldr	r1, [r7, #0]
 80224ce:	4618      	mov	r0, r3
 80224d0:	f7ff fe52 	bl	8022178 <_ZNK17IMUFrameContainer7GetInfoEv>

		info.SerializeTo(&ptr);
 80224d4:	f107 021c 	add.w	r2, r7, #28
 80224d8:	f107 0314 	add.w	r3, r7, #20
 80224dc:	4611      	mov	r1, r2
 80224de:	4618      	mov	r0, r3
 80224e0:	f7ff fd74 	bl	8021fcc <_ZN17IMUFrameContainer4Info11SerializeToEPPh>

		responce.Error = ErrorCodes::Success;
 80224e4:	68fb      	ldr	r3, [r7, #12]
 80224e6:	2200      	movs	r2, #0
 80224e8:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106

		return responce;
 80224ec:	bf00      	nop
	}
 80224ee:	68f8      	ldr	r0, [r7, #12]
 80224f0:	3720      	adds	r7, #32
 80224f2:	46bd      	mov	sp, r7
 80224f4:	bd80      	pop	{r7, pc}
 80224f6:	bf00      	nop
 80224f8:	0803d4a4 	.word	0x0803d4a4
 80224fc:	0803d4e4 	.word	0x0803d4e4
 8022500:	0803cf00 	.word	0x0803cf00

08022504 <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK10BHYWrapper>:

	Responce GetLatestFrame(const Request &request, const BHYWrapper &IMU) {
 8022504:	b580      	push	{r7, lr}
 8022506:	b08a      	sub	sp, #40	; 0x28
 8022508:	af00      	add	r7, sp, #0
 802250a:	60f8      	str	r0, [r7, #12]
 802250c:	60b9      	str	r1, [r7, #8]
 802250e:	607a      	str	r2, [r7, #4]
 8022510:	603b      	str	r3, [r7, #0]
		assert(
 8022512:	687b      	ldr	r3, [r7, #4]
 8022514:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8022518:	4618      	mov	r0, r3
 802251a:	f7ff ff2b 	bl	8022374 <_ZN17IMURequestHandler11RequestMode11DeserializeEh>
 802251e:	4603      	mov	r3, r0
 8022520:	2b02      	cmp	r3, #2
 8022522:	d006      	beq.n	8022532 <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK10BHYWrapper+0x2e>
 8022524:	4b1d      	ldr	r3, [pc, #116]	; (802259c <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK10BHYWrapper+0x98>)
 8022526:	4a1e      	ldr	r2, [pc, #120]	; (80225a0 <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK10BHYWrapper+0x9c>)
 8022528:	f240 312b 	movw	r1, #811	; 0x32b
 802252c:	481d      	ldr	r0, [pc, #116]	; (80225a4 <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK10BHYWrapper+0xa0>)
 802252e:	f019 fbbd 	bl	803bcac <__assert_func>
				RequestMode::Deserialize(request.MetaInfo)
						== RequestMode::LatestFrame);

		Responce responce;
		responce.PeripheryID = Periphery::Imu;
 8022532:	68fb      	ldr	r3, [r7, #12]
 8022534:	2201      	movs	r2, #1
 8022536:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
		responce.MetaInfo = RequestMode::Serialize(RequestMode::LatestFrame);
 802253a:	2002      	movs	r0, #2
 802253c:	f7ff ff0e 	bl	802235c <_ZN17IMURequestHandler11RequestMode9SerializeEh>
 8022540:	4603      	mov	r3, r0
 8022542:	461a      	mov	r2, r3
 8022544:	68fb      	ldr	r3, [r7, #12]
 8022546:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
		responce.ResponceSize = BHYWrapper::BHYFrame::Size;
 802254a:	68fb      	ldr	r3, [r7, #12]
 802254c:	2211      	movs	r2, #17
 802254e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

		if (request.RequestSize != 1) {
 8022552:	687b      	ldr	r3, [r7, #4]
 8022554:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8022558:	2b01      	cmp	r3, #1
 802255a:	d004      	beq.n	8022566 <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK10BHYWrapper+0x62>
			responce.Error = ErrorCodes::BadRequest;
 802255c:	68fb      	ldr	r3, [r7, #12]
 802255e:	2203      	movs	r2, #3
 8022560:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
			return responce;
 8022564:	e015      	b.n	8022592 <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK10BHYWrapper+0x8e>
		}

		BHYWrapper::BHYFrame imuFrame = IMU.GetFrame();
 8022566:	f107 0314 	add.w	r3, r7, #20
 802256a:	6839      	ldr	r1, [r7, #0]
 802256c:	4618      	mov	r0, r3
 802256e:	f7fe fa49 	bl	8020a04 <_ZNK10BHYWrapper8GetFrameEv>

		uint8_t sz;
		imuFrame.SerializeTo(responce.Data.data(), &sz);
 8022572:	68f8      	ldr	r0, [r7, #12]
 8022574:	f001 f824 	bl	80235c0 <_ZNSt5arrayIhLj256EE4dataEv>
 8022578:	4601      	mov	r1, r0
 802257a:	f107 0213 	add.w	r2, r7, #19
 802257e:	f107 0314 	add.w	r3, r7, #20
 8022582:	4618      	mov	r0, r3
 8022584:	f7fe fae8 	bl	8020b58 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_>

		responce.Error = ErrorCodes::Success;
 8022588:	68fb      	ldr	r3, [r7, #12]
 802258a:	2200      	movs	r2, #0
 802258c:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106

		return responce;
 8022590:	bf00      	nop
	}
 8022592:	68f8      	ldr	r0, [r7, #12]
 8022594:	3728      	adds	r7, #40	; 0x28
 8022596:	46bd      	mov	sp, r7
 8022598:	bd80      	pop	{r7, pc}
 802259a:	bf00      	nop
 802259c:	0803d534 	.word	0x0803d534
 80225a0:	0803d57c 	.word	0x0803d57c
 80225a4:	0803cf00 	.word	0x0803cf00

080225a8 <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainerR20StrobeDurationFilter>:

	Responce DoReset(const Request &request, IMUFrameContainer &container,
 80225a8:	b580      	push	{r7, lr}
 80225aa:	b084      	sub	sp, #16
 80225ac:	af00      	add	r7, sp, #0
 80225ae:	60f8      	str	r0, [r7, #12]
 80225b0:	60b9      	str	r1, [r7, #8]
 80225b2:	607a      	str	r2, [r7, #4]
 80225b4:	603b      	str	r3, [r7, #0]
			StrobeDurationFilter &sFilter) {
		assert(
 80225b6:	687b      	ldr	r3, [r7, #4]
 80225b8:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 80225bc:	4618      	mov	r0, r3
 80225be:	f7ff fed9 	bl	8022374 <_ZN17IMURequestHandler11RequestMode11DeserializeEh>
 80225c2:	4603      	mov	r3, r0
 80225c4:	2b03      	cmp	r3, #3
 80225c6:	d006      	beq.n	80225d6 <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainerR20StrobeDurationFilter+0x2e>
 80225c8:	4b17      	ldr	r3, [pc, #92]	; (8022628 <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainerR20StrobeDurationFilter+0x80>)
 80225ca:	4a18      	ldr	r2, [pc, #96]	; (802262c <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainerR20StrobeDurationFilter+0x84>)
 80225cc:	f240 3145 	movw	r1, #837	; 0x345
 80225d0:	4817      	ldr	r0, [pc, #92]	; (8022630 <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainerR20StrobeDurationFilter+0x88>)
 80225d2:	f019 fb6b 	bl	803bcac <__assert_func>
				RequestMode::Deserialize(request.MetaInfo)
						== RequestMode::Reset);

		Responce responce;
		responce.PeripheryID = Periphery::Imu;
 80225d6:	68fb      	ldr	r3, [r7, #12]
 80225d8:	2201      	movs	r2, #1
 80225da:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
		responce.MetaInfo = RequestMode::Serialize(RequestMode::Reset);
 80225de:	2003      	movs	r0, #3
 80225e0:	f7ff febc 	bl	802235c <_ZN17IMURequestHandler11RequestMode9SerializeEh>
 80225e4:	4603      	mov	r3, r0
 80225e6:	461a      	mov	r2, r3
 80225e8:	68fb      	ldr	r3, [r7, #12]
 80225ea:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
		responce.ResponceSize = 1;
 80225ee:	68fb      	ldr	r3, [r7, #12]
 80225f0:	2201      	movs	r2, #1
 80225f2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

		if (request.RequestSize != 1) {
 80225f6:	687b      	ldr	r3, [r7, #4]
 80225f8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80225fc:	2b01      	cmp	r3, #1
 80225fe:	d004      	beq.n	802260a <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainerR20StrobeDurationFilter+0x62>
			responce.Error = ErrorCodes::BadRequest;
 8022600:	68fb      	ldr	r3, [r7, #12]
 8022602:	2203      	movs	r2, #3
 8022604:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
			return responce;
 8022608:	e00a      	b.n	8022620 <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainerR20StrobeDurationFilter+0x78>
		}

		container.Reset();
 802260a:	6838      	ldr	r0, [r7, #0]
 802260c:	f7ff fd22 	bl	8022054 <_ZN17IMUFrameContainer5ResetEv>
		sFilter.ResetStrobeDuration();
 8022610:	69b8      	ldr	r0, [r7, #24]
 8022612:	f7ff fe55 	bl	80222c0 <_ZN20StrobeDurationFilter19ResetStrobeDurationEv>

		responce.Error = ErrorCodes::Success;
 8022616:	68fb      	ldr	r3, [r7, #12]
 8022618:	2200      	movs	r2, #0
 802261a:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106

		return responce;
 802261e:	bf00      	nop
	}
 8022620:	68f8      	ldr	r0, [r7, #12]
 8022622:	3710      	adds	r7, #16
 8022624:	46bd      	mov	sp, r7
 8022626:	bd80      	pop	{r7, pc}
 8022628:	0803d5cc 	.word	0x0803d5cc
 802262c:	0803d610 	.word	0x0803d610
 8022630:	0803cf00 	.word	0x0803cf00

08022634 <_ZN17IMURequestHandler9SetOffsetERK7RequestRj>:

	Responce SetOffset(const Request &request, size_t &strobeOffset) {
 8022634:	b580      	push	{r7, lr}
 8022636:	b086      	sub	sp, #24
 8022638:	af00      	add	r7, sp, #0
 802263a:	60f8      	str	r0, [r7, #12]
 802263c:	60b9      	str	r1, [r7, #8]
 802263e:	607a      	str	r2, [r7, #4]
 8022640:	603b      	str	r3, [r7, #0]
		assert(
 8022642:	687b      	ldr	r3, [r7, #4]
 8022644:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8022648:	4618      	mov	r0, r3
 802264a:	f7ff fe93 	bl	8022374 <_ZN17IMURequestHandler11RequestMode11DeserializeEh>
 802264e:	4603      	mov	r3, r0
 8022650:	2b04      	cmp	r3, #4
 8022652:	d006      	beq.n	8022662 <_ZN17IMURequestHandler9SetOffsetERK7RequestRj+0x2e>
 8022654:	4b1a      	ldr	r3, [pc, #104]	; (80226c0 <_ZN17IMURequestHandler9SetOffsetERK7RequestRj+0x8c>)
 8022656:	4a1b      	ldr	r2, [pc, #108]	; (80226c4 <_ZN17IMURequestHandler9SetOffsetERK7RequestRj+0x90>)
 8022658:	f44f 7157 	mov.w	r1, #860	; 0x35c
 802265c:	481a      	ldr	r0, [pc, #104]	; (80226c8 <_ZN17IMURequestHandler9SetOffsetERK7RequestRj+0x94>)
 802265e:	f019 fb25 	bl	803bcac <__assert_func>
				RequestMode::Deserialize(request.MetaInfo)
						== RequestMode::SetOffset);

		Responce responce;
		responce.PeripheryID = Periphery::Imu;
 8022662:	68fb      	ldr	r3, [r7, #12]
 8022664:	2201      	movs	r2, #1
 8022666:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
		responce.MetaInfo = RequestMode::Serialize(RequestMode::SetOffset);
 802266a:	2004      	movs	r0, #4
 802266c:	f7ff fe76 	bl	802235c <_ZN17IMURequestHandler11RequestMode9SerializeEh>
 8022670:	4603      	mov	r3, r0
 8022672:	461a      	mov	r2, r3
 8022674:	68fb      	ldr	r3, [r7, #12]
 8022676:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
		responce.ResponceSize = 1;
 802267a:	68fb      	ldr	r3, [r7, #12]
 802267c:	2201      	movs	r2, #1
 802267e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

		if (request.RequestSize != 1) {
 8022682:	687b      	ldr	r3, [r7, #4]
 8022684:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8022688:	2b01      	cmp	r3, #1
 802268a:	d004      	beq.n	8022696 <_ZN17IMURequestHandler9SetOffsetERK7RequestRj+0x62>
			responce.Error = ErrorCodes::BadRequest;
 802268c:	68fb      	ldr	r3, [r7, #12]
 802268e:	2203      	movs	r2, #3
 8022690:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
			return responce;
 8022694:	e00f      	b.n	80226b6 <_ZN17IMURequestHandler9SetOffsetERK7RequestRj+0x82>
		}

		uint8_t newOffset = request.Data[0];
 8022696:	687b      	ldr	r3, [r7, #4]
 8022698:	2100      	movs	r1, #0
 802269a:	4618      	mov	r0, r3
 802269c:	f7ff f959 	bl	8021952 <_ZNKSt5arrayIhLj256EEixEj>
 80226a0:	4603      	mov	r3, r0
 80226a2:	781b      	ldrb	r3, [r3, #0]
 80226a4:	75fb      	strb	r3, [r7, #23]

		strobeOffset = newOffset;
 80226a6:	7dfa      	ldrb	r2, [r7, #23]
 80226a8:	683b      	ldr	r3, [r7, #0]
 80226aa:	601a      	str	r2, [r3, #0]
		responce.Error = ErrorCodes::Success;
 80226ac:	68fb      	ldr	r3, [r7, #12]
 80226ae:	2200      	movs	r2, #0
 80226b0:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106

		return responce;
 80226b4:	bf00      	nop
	}
 80226b6:	68f8      	ldr	r0, [r7, #12]
 80226b8:	3718      	adds	r7, #24
 80226ba:	46bd      	mov	sp, r7
 80226bc:	bd80      	pop	{r7, pc}
 80226be:	bf00      	nop
 80226c0:	0803d670 	.word	0x0803d670
 80226c4:	0803d6b8 	.word	0x0803d6b8
 80226c8:	0803cf00 	.word	0x0803cf00

080226cc <_ZN17IMURequestHandler15ConfigureFilterERK7RequestR20StrobeDurationFilter>:

	Responce ConfigureFilter(const Request &request,
 80226cc:	b580      	push	{r7, lr}
 80226ce:	b086      	sub	sp, #24
 80226d0:	af00      	add	r7, sp, #0
 80226d2:	60f8      	str	r0, [r7, #12]
 80226d4:	60b9      	str	r1, [r7, #8]
 80226d6:	607a      	str	r2, [r7, #4]
 80226d8:	603b      	str	r3, [r7, #0]
			StrobeDurationFilter &sFilter) {
		assert(
 80226da:	687b      	ldr	r3, [r7, #4]
 80226dc:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 80226e0:	4618      	mov	r0, r3
 80226e2:	f7ff fe47 	bl	8022374 <_ZN17IMURequestHandler11RequestMode11DeserializeEh>
 80226e6:	4603      	mov	r3, r0
 80226e8:	2b06      	cmp	r3, #6
 80226ea:	d006      	beq.n	80226fa <_ZN17IMURequestHandler15ConfigureFilterERK7RequestR20StrobeDurationFilter+0x2e>
 80226ec:	4b1f      	ldr	r3, [pc, #124]	; (802276c <_ZN17IMURequestHandler15ConfigureFilterERK7RequestR20StrobeDurationFilter+0xa0>)
 80226ee:	4a20      	ldr	r2, [pc, #128]	; (8022770 <_ZN17IMURequestHandler15ConfigureFilterERK7RequestR20StrobeDurationFilter+0xa4>)
 80226f0:	f44f 715d 	mov.w	r1, #884	; 0x374
 80226f4:	481f      	ldr	r0, [pc, #124]	; (8022774 <_ZN17IMURequestHandler15ConfigureFilterERK7RequestR20StrobeDurationFilter+0xa8>)
 80226f6:	f019 fad9 	bl	803bcac <__assert_func>
				RequestMode::Deserialize(request.MetaInfo)
						== RequestMode::ConfigureFilter);

		Responce responce;
		responce.PeripheryID = Periphery::Imu;
 80226fa:	68fb      	ldr	r3, [r7, #12]
 80226fc:	2201      	movs	r2, #1
 80226fe:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
		responce.MetaInfo = RequestMode::Serialize(
 8022702:	2006      	movs	r0, #6
 8022704:	f7ff fe2a 	bl	802235c <_ZN17IMURequestHandler11RequestMode9SerializeEh>
 8022708:	4603      	mov	r3, r0
 802270a:	461a      	mov	r2, r3
 802270c:	68fb      	ldr	r3, [r7, #12]
 802270e:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
				RequestMode::ConfigureFilter);
		responce.ResponceSize = 1;
 8022712:	68fb      	ldr	r3, [r7, #12]
 8022714:	2201      	movs	r2, #1
 8022716:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

		if (request.RequestSize != 2) {
 802271a:	687b      	ldr	r3, [r7, #4]
 802271c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8022720:	2b02      	cmp	r3, #2
 8022722:	d004      	beq.n	802272e <_ZN17IMURequestHandler15ConfigureFilterERK7RequestR20StrobeDurationFilter+0x62>
			responce.Error = ErrorCodes::BadRequest;
 8022724:	68fb      	ldr	r3, [r7, #12]
 8022726:	2203      	movs	r2, #3
 8022728:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
			return responce;
 802272c:	e01a      	b.n	8022764 <_ZN17IMURequestHandler15ConfigureFilterERK7RequestR20StrobeDurationFilter+0x98>
		}

		uint8_t targetDuration = request.Data[0];
 802272e:	687b      	ldr	r3, [r7, #4]
 8022730:	2100      	movs	r1, #0
 8022732:	4618      	mov	r0, r3
 8022734:	f7ff f90d 	bl	8021952 <_ZNKSt5arrayIhLj256EEixEj>
 8022738:	4603      	mov	r3, r0
 802273a:	781b      	ldrb	r3, [r3, #0]
 802273c:	75fb      	strb	r3, [r7, #23]
		uint8_t durationThreshold = request.Data[1];
 802273e:	687b      	ldr	r3, [r7, #4]
 8022740:	2101      	movs	r1, #1
 8022742:	4618      	mov	r0, r3
 8022744:	f7ff f905 	bl	8021952 <_ZNKSt5arrayIhLj256EEixEj>
 8022748:	4603      	mov	r3, r0
 802274a:	781b      	ldrb	r3, [r3, #0]
 802274c:	75bb      	strb	r3, [r7, #22]

		sFilter.Configure(targetDuration, durationThreshold);
 802274e:	7dba      	ldrb	r2, [r7, #22]
 8022750:	7dfb      	ldrb	r3, [r7, #23]
 8022752:	4619      	mov	r1, r3
 8022754:	6838      	ldr	r0, [r7, #0]
 8022756:	f7ff fd90 	bl	802227a <_ZN20StrobeDurationFilter9ConfigureEhh>
		responce.Error = ErrorCodes::Success;
 802275a:	68fb      	ldr	r3, [r7, #12]
 802275c:	2200      	movs	r2, #0
 802275e:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106

		return responce;
 8022762:	bf00      	nop
	}
 8022764:	68f8      	ldr	r0, [r7, #12]
 8022766:	3718      	adds	r7, #24
 8022768:	46bd      	mov	sp, r7
 802276a:	bd80      	pop	{r7, pc}
 802276c:	0803d6f8 	.word	0x0803d6f8
 8022770:	0803d744 	.word	0x0803d744
 8022774:	0803cf00 	.word	0x0803cf00

08022778 <_ZN17IMURequestHandler11StrobeWidthERK7RequestRK20StrobeDurationFilter>:

	Responce StrobeWidth(const Request &request,
 8022778:	b580      	push	{r7, lr}
 802277a:	b088      	sub	sp, #32
 802277c:	af00      	add	r7, sp, #0
 802277e:	6178      	str	r0, [r7, #20]
 8022780:	6139      	str	r1, [r7, #16]
 8022782:	60fa      	str	r2, [r7, #12]
 8022784:	60bb      	str	r3, [r7, #8]
			const StrobeDurationFilter &sFilter) {
		assert(
 8022786:	68fb      	ldr	r3, [r7, #12]
 8022788:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 802278c:	4618      	mov	r0, r3
 802278e:	f7ff fdf1 	bl	8022374 <_ZN17IMURequestHandler11RequestMode11DeserializeEh>
 8022792:	4603      	mov	r3, r0
 8022794:	2b05      	cmp	r3, #5
 8022796:	d006      	beq.n	80227a6 <_ZN17IMURequestHandler11StrobeWidthERK7RequestRK20StrobeDurationFilter+0x2e>
 8022798:	4b28      	ldr	r3, [pc, #160]	; (802283c <_ZN17IMURequestHandler11StrobeWidthERK7RequestRK20StrobeDurationFilter+0xc4>)
 802279a:	4a29      	ldr	r2, [pc, #164]	; (8022840 <_ZN17IMURequestHandler11StrobeWidthERK7RequestRK20StrobeDurationFilter+0xc8>)
 802279c:	f240 318e 	movw	r1, #910	; 0x38e
 80227a0:	4828      	ldr	r0, [pc, #160]	; (8022844 <_ZN17IMURequestHandler11StrobeWidthERK7RequestRK20StrobeDurationFilter+0xcc>)
 80227a2:	f019 fa83 	bl	803bcac <__assert_func>
				RequestMode::Deserialize(request.MetaInfo)
						== RequestMode::StrobeWidth);

		Responce responce;
		responce.PeripheryID = Periphery::Imu;
 80227a6:	697b      	ldr	r3, [r7, #20]
 80227a8:	2201      	movs	r2, #1
 80227aa:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
		responce.MetaInfo = RequestMode::Serialize(RequestMode::StrobeWidth);
 80227ae:	2005      	movs	r0, #5
 80227b0:	f7ff fdd4 	bl	802235c <_ZN17IMURequestHandler11RequestMode9SerializeEh>
 80227b4:	4603      	mov	r3, r0
 80227b6:	461a      	mov	r2, r3
 80227b8:	697b      	ldr	r3, [r7, #20]
 80227ba:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
		responce.ResponceSize = 1;
 80227be:	697b      	ldr	r3, [r7, #20]
 80227c0:	2201      	movs	r2, #1
 80227c2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

		if (request.RequestSize != 1) {
 80227c6:	68fb      	ldr	r3, [r7, #12]
 80227c8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80227cc:	2b01      	cmp	r3, #1
 80227ce:	d004      	beq.n	80227da <_ZN17IMURequestHandler11StrobeWidthERK7RequestRK20StrobeDurationFilter+0x62>
			responce.Error = ErrorCodes::BadRequest;
 80227d0:	697b      	ldr	r3, [r7, #20]
 80227d2:	2203      	movs	r2, #3
 80227d4:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
			return responce;
 80227d8:	e02c      	b.n	8022834 <_ZN17IMURequestHandler11StrobeWidthERK7RequestRK20StrobeDurationFilter+0xbc>
		}

		float strobeWidth = sFilter.GetStrobeDuration();
 80227da:	68b8      	ldr	r0, [r7, #8]
 80227dc:	f7ff fd61 	bl	80222a2 <_ZNK20StrobeDurationFilter17GetStrobeDurationEv>
 80227e0:	ed87 0a07 	vstr	s0, [r7, #28]

		if (strobeWidth < 0)
 80227e4:	edd7 7a07 	vldr	s15, [r7, #28]
 80227e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80227ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80227f0:	d502      	bpl.n	80227f8 <_ZN17IMURequestHandler11StrobeWidthERK7RequestRK20StrobeDurationFilter+0x80>
			strobeWidth = 0;
 80227f2:	f04f 0300 	mov.w	r3, #0
 80227f6:	61fb      	str	r3, [r7, #28]
		if (strobeWidth > 255)
 80227f8:	edd7 7a07 	vldr	s15, [r7, #28]
 80227fc:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8022848 <_ZN17IMURequestHandler11StrobeWidthERK7RequestRK20StrobeDurationFilter+0xd0>
 8022800:	eef4 7ac7 	vcmpe.f32	s15, s14
 8022804:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022808:	dd01      	ble.n	802280e <_ZN17IMURequestHandler11StrobeWidthERK7RequestRK20StrobeDurationFilter+0x96>
			strobeWidth = 255;
 802280a:	4b10      	ldr	r3, [pc, #64]	; (802284c <_ZN17IMURequestHandler11StrobeWidthERK7RequestRK20StrobeDurationFilter+0xd4>)
 802280c:	61fb      	str	r3, [r7, #28]

		responce.Data[0] = static_cast<uint8_t>(strobeWidth);
 802280e:	2100      	movs	r1, #0
 8022810:	6978      	ldr	r0, [r7, #20]
 8022812:	f001 f944 	bl	8023a9e <_ZNSt5arrayIhLj256EEixEj>
 8022816:	4603      	mov	r3, r0
 8022818:	edd7 7a07 	vldr	s15, [r7, #28]
 802281c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8022820:	edc7 7a01 	vstr	s15, [r7, #4]
 8022824:	793a      	ldrb	r2, [r7, #4]
 8022826:	b2d2      	uxtb	r2, r2
 8022828:	701a      	strb	r2, [r3, #0]
		responce.Error = ErrorCodes::Success;
 802282a:	697b      	ldr	r3, [r7, #20]
 802282c:	2200      	movs	r2, #0
 802282e:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106

		return responce;
 8022832:	bf00      	nop
	}
 8022834:	6978      	ldr	r0, [r7, #20]
 8022836:	3720      	adds	r7, #32
 8022838:	46bd      	mov	sp, r7
 802283a:	bd80      	pop	{r7, pc}
 802283c:	0803d798 	.word	0x0803d798
 8022840:	0803d7e0 	.word	0x0803d7e0
 8022844:	0803cf00 	.word	0x0803cf00
 8022848:	437f0000 	.word	0x437f0000
 802284c:	437f0000 	.word	0x437f0000

08022850 <_ZN17IMURequestHandler19UnknownModeResponceERK7Request>:

	Responce UnknownModeResponce(const Request &request) {
 8022850:	b580      	push	{r7, lr}
 8022852:	b084      	sub	sp, #16
 8022854:	af00      	add	r7, sp, #0
 8022856:	60f8      	str	r0, [r7, #12]
 8022858:	60b9      	str	r1, [r7, #8]
 802285a:	607a      	str	r2, [r7, #4]
		Responce responce;
		responce.PeripheryID = Periphery::Imu;
 802285c:	68fb      	ldr	r3, [r7, #12]
 802285e:	2201      	movs	r2, #1
 8022860:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
		responce.MetaInfo = RequestMode::Serialize(
				RequestMode::Deserialize(request.MetaInfo));
 8022864:	687b      	ldr	r3, [r7, #4]
 8022866:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
		responce.MetaInfo = RequestMode::Serialize(
 802286a:	4618      	mov	r0, r3
 802286c:	f7ff fd82 	bl	8022374 <_ZN17IMURequestHandler11RequestMode11DeserializeEh>
 8022870:	4603      	mov	r3, r0
 8022872:	4618      	mov	r0, r3
 8022874:	f7ff fd72 	bl	802235c <_ZN17IMURequestHandler11RequestMode9SerializeEh>
 8022878:	4603      	mov	r3, r0
 802287a:	461a      	mov	r2, r3
 802287c:	68fb      	ldr	r3, [r7, #12]
 802287e:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
		responce.ResponceSize = request.ResponceSize;
 8022882:	687b      	ldr	r3, [r7, #4]
 8022884:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8022888:	68fb      	ldr	r3, [r7, #12]
 802288a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		responce.Error = ErrorCodes::UnknownMode;
 802288e:	68fb      	ldr	r3, [r7, #12]
 8022890:	2202      	movs	r2, #2
 8022892:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
		return responce;
 8022896:	bf00      	nop
	}
 8022898:	68f8      	ldr	r0, [r7, #12]
 802289a:	3710      	adds	r7, #16
 802289c:	46bd      	mov	sp, r7
 802289e:	bd80      	pop	{r7, pc}

080228a0 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter>:

public:
	Responce Handle(const Request &request, IMUFrameContainer &container,
 80228a0:	b580      	push	{r7, lr}
 80228a2:	b086      	sub	sp, #24
 80228a4:	af02      	add	r7, sp, #8
 80228a6:	60f8      	str	r0, [r7, #12]
 80228a8:	60b9      	str	r1, [r7, #8]
 80228aa:	607a      	str	r2, [r7, #4]
 80228ac:	603b      	str	r3, [r7, #0]
			const BHYWrapper &IMU, size_t &strobeOffset,
			StrobeDurationFilter &sFilter) {
		assert(request.PeripheryID == Periphery::Imu);
 80228ae:	687b      	ldr	r3, [r7, #4]
 80228b0:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
 80228b4:	2b01      	cmp	r3, #1
 80228b6:	d006      	beq.n	80228c6 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter+0x26>
 80228b8:	4b2f      	ldr	r3, [pc, #188]	; (8022978 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter+0xd8>)
 80228ba:	4a30      	ldr	r2, [pc, #192]	; (802297c <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter+0xdc>)
 80228bc:	f240 31b7 	movw	r1, #951	; 0x3b7
 80228c0:	482f      	ldr	r0, [pc, #188]	; (8022980 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter+0xe0>)
 80228c2:	f019 f9f3 	bl	803bcac <__assert_func>

		switch (RequestMode::Deserialize(request.MetaInfo)) {
 80228c6:	687b      	ldr	r3, [r7, #4]
 80228c8:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 80228cc:	4618      	mov	r0, r3
 80228ce:	f7ff fd51 	bl	8022374 <_ZN17IMURequestHandler11RequestMode11DeserializeEh>
 80228d2:	4603      	mov	r3, r0
 80228d4:	2b06      	cmp	r3, #6
 80228d6:	d844      	bhi.n	8022962 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter+0xc2>
 80228d8:	a201      	add	r2, pc, #4	; (adr r2, 80228e0 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter+0x40>)
 80228da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80228de:	bf00      	nop
 80228e0:	080228fd 	.word	0x080228fd
 80228e4:	0802290b 	.word	0x0802290b
 80228e8:	08022919 	.word	0x08022919
 80228ec:	08022927 	.word	0x08022927
 80228f0:	08022939 	.word	0x08022939
 80228f4:	08022947 	.word	0x08022947
 80228f8:	08022955 	.word	0x08022955
		case RequestMode::FrameBySeq:
			return GetFrameBySeq(request, container);
 80228fc:	68f8      	ldr	r0, [r7, #12]
 80228fe:	683b      	ldr	r3, [r7, #0]
 8022900:	687a      	ldr	r2, [r7, #4]
 8022902:	68b9      	ldr	r1, [r7, #8]
 8022904:	f7ff fd42 	bl	802238c <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer>
 8022908:	e031      	b.n	802296e <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter+0xce>
		case RequestMode::Info:
			return GetInfo(request, container);
 802290a:	68f8      	ldr	r0, [r7, #12]
 802290c:	683b      	ldr	r3, [r7, #0]
 802290e:	687a      	ldr	r2, [r7, #4]
 8022910:	68b9      	ldr	r1, [r7, #8]
 8022912:	f7ff fda3 	bl	802245c <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer>
 8022916:	e02a      	b.n	802296e <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter+0xce>
		case RequestMode::LatestFrame:
			return GetLatestFrame(request, IMU);
 8022918:	68f8      	ldr	r0, [r7, #12]
 802291a:	69bb      	ldr	r3, [r7, #24]
 802291c:	687a      	ldr	r2, [r7, #4]
 802291e:	68b9      	ldr	r1, [r7, #8]
 8022920:	f7ff fdf0 	bl	8022504 <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK10BHYWrapper>
 8022924:	e023      	b.n	802296e <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter+0xce>
		case RequestMode::Reset:
			return DoReset(request, container, sFilter);
 8022926:	68f8      	ldr	r0, [r7, #12]
 8022928:	6a3b      	ldr	r3, [r7, #32]
 802292a:	9300      	str	r3, [sp, #0]
 802292c:	683b      	ldr	r3, [r7, #0]
 802292e:	687a      	ldr	r2, [r7, #4]
 8022930:	68b9      	ldr	r1, [r7, #8]
 8022932:	f7ff fe39 	bl	80225a8 <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainerR20StrobeDurationFilter>
 8022936:	e01a      	b.n	802296e <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter+0xce>
		case RequestMode::SetOffset:
			return SetOffset(request, strobeOffset);
 8022938:	68f8      	ldr	r0, [r7, #12]
 802293a:	69fb      	ldr	r3, [r7, #28]
 802293c:	687a      	ldr	r2, [r7, #4]
 802293e:	68b9      	ldr	r1, [r7, #8]
 8022940:	f7ff fe78 	bl	8022634 <_ZN17IMURequestHandler9SetOffsetERK7RequestRj>
 8022944:	e013      	b.n	802296e <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter+0xce>
		case RequestMode::StrobeWidth:
			return StrobeWidth(request, sFilter);
 8022946:	68f8      	ldr	r0, [r7, #12]
 8022948:	6a3b      	ldr	r3, [r7, #32]
 802294a:	687a      	ldr	r2, [r7, #4]
 802294c:	68b9      	ldr	r1, [r7, #8]
 802294e:	f7ff ff13 	bl	8022778 <_ZN17IMURequestHandler11StrobeWidthERK7RequestRK20StrobeDurationFilter>
 8022952:	e00c      	b.n	802296e <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter+0xce>
		case RequestMode::ConfigureFilter:
			return ConfigureFilter(request, sFilter);
 8022954:	68f8      	ldr	r0, [r7, #12]
 8022956:	6a3b      	ldr	r3, [r7, #32]
 8022958:	687a      	ldr	r2, [r7, #4]
 802295a:	68b9      	ldr	r1, [r7, #8]
 802295c:	f7ff feb6 	bl	80226cc <_ZN17IMURequestHandler15ConfigureFilterERK7RequestR20StrobeDurationFilter>
 8022960:	e005      	b.n	802296e <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter+0xce>
		default:
			return UnknownModeResponce(request);
 8022962:	68fb      	ldr	r3, [r7, #12]
 8022964:	687a      	ldr	r2, [r7, #4]
 8022966:	68b9      	ldr	r1, [r7, #8]
 8022968:	4618      	mov	r0, r3
 802296a:	f7ff ff71 	bl	8022850 <_ZN17IMURequestHandler19UnknownModeResponceERK7Request>
		}
	}
 802296e:	68f8      	ldr	r0, [r7, #12]
 8022970:	3710      	adds	r7, #16
 8022972:	46bd      	mov	sp, r7
 8022974:	bd80      	pop	{r7, pc}
 8022976:	bf00      	nop
 8022978:	0803d838 	.word	0x0803d838
 802297c:	0803d860 	.word	0x0803d860
 8022980:	0803cf00 	.word	0x0803cf00

08022984 <_ZN12IMUFrameMemo3AddERKN10BHYWrapper8BHYFrameEj>:
	std::deque<BHYWrapper::BHYFrame> Queue;
	size_t MaxSize = 800 / 5;
	size_t FirstSeq = 0;

public:
	void Add(const BHYWrapper::BHYFrame &frame, size_t seq) {
 8022984:	b580      	push	{r7, lr}
 8022986:	b084      	sub	sp, #16
 8022988:	af00      	add	r7, sp, #0
 802298a:	60f8      	str	r0, [r7, #12]
 802298c:	60b9      	str	r1, [r7, #8]
 802298e:	607a      	str	r2, [r7, #4]
		if (Queue.empty()) {
 8022990:	68fb      	ldr	r3, [r7, #12]
 8022992:	4618      	mov	r0, r3
 8022994:	f001 f82c 	bl	80239f0 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5emptyEv>
 8022998:	4603      	mov	r3, r0
 802299a:	2b00      	cmp	r3, #0
 802299c:	d002      	beq.n	80229a4 <_ZN12IMUFrameMemo3AddERKN10BHYWrapper8BHYFrameEj+0x20>
			FirstSeq = seq;
 802299e:	68fb      	ldr	r3, [r7, #12]
 80229a0:	687a      	ldr	r2, [r7, #4]
 80229a2:	62da      	str	r2, [r3, #44]	; 0x2c
		}

		Queue.push_front(frame);
 80229a4:	68fb      	ldr	r3, [r7, #12]
 80229a6:	68b9      	ldr	r1, [r7, #8]
 80229a8:	4618      	mov	r0, r3
 80229aa:	f000 ffca 	bl	8023942 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE10push_frontERKS1_>

		if (Queue.size() > MaxSize) {
 80229ae:	68fb      	ldr	r3, [r7, #12]
 80229b0:	4618      	mov	r0, r3
 80229b2:	f000 ffe8 	bl	8023986 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 80229b6:	4602      	mov	r2, r0
 80229b8:	68fb      	ldr	r3, [r7, #12]
 80229ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80229bc:	429a      	cmp	r2, r3
 80229be:	bf8c      	ite	hi
 80229c0:	2301      	movhi	r3, #1
 80229c2:	2300      	movls	r3, #0
 80229c4:	b2db      	uxtb	r3, r3
 80229c6:	2b00      	cmp	r3, #0
 80229c8:	d008      	beq.n	80229dc <_ZN12IMUFrameMemo3AddERKN10BHYWrapper8BHYFrameEj+0x58>
			Queue.pop_back();
 80229ca:	68fb      	ldr	r3, [r7, #12]
 80229cc:	4618      	mov	r0, r3
 80229ce:	f000 ffec 	bl	80239aa <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE8pop_backEv>
			FirstSeq++;
 80229d2:	68fb      	ldr	r3, [r7, #12]
 80229d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80229d6:	1c5a      	adds	r2, r3, #1
 80229d8:	68fb      	ldr	r3, [r7, #12]
 80229da:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
 80229dc:	bf00      	nop
 80229de:	3710      	adds	r7, #16
 80229e0:	46bd      	mov	sp, r7
 80229e2:	bd80      	pop	{r7, pc}

080229e4 <_ZNK12IMUFrameMemo3HasEj>:

	bool Has(size_t seq) const {
 80229e4:	b590      	push	{r4, r7, lr}
 80229e6:	b083      	sub	sp, #12
 80229e8:	af00      	add	r7, sp, #0
 80229ea:	6078      	str	r0, [r7, #4]
 80229ec:	6039      	str	r1, [r7, #0]
		if (Queue.empty())
 80229ee:	687b      	ldr	r3, [r7, #4]
 80229f0:	4618      	mov	r0, r3
 80229f2:	f000 fffd 	bl	80239f0 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5emptyEv>
 80229f6:	4603      	mov	r3, r0
 80229f8:	2b00      	cmp	r3, #0
 80229fa:	d001      	beq.n	8022a00 <_ZNK12IMUFrameMemo3HasEj+0x1c>
			return false;
 80229fc:	2300      	movs	r3, #0
 80229fe:	e012      	b.n	8022a26 <_ZNK12IMUFrameMemo3HasEj+0x42>

		if (seq < FirstSeq + Queue.size())
 8022a00:	687b      	ldr	r3, [r7, #4]
 8022a02:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8022a04:	687b      	ldr	r3, [r7, #4]
 8022a06:	4618      	mov	r0, r3
 8022a08:	f000 ffbd 	bl	8023986 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8022a0c:	4603      	mov	r3, r0
 8022a0e:	4423      	add	r3, r4
 8022a10:	683a      	ldr	r2, [r7, #0]
 8022a12:	429a      	cmp	r2, r3
 8022a14:	bf34      	ite	cc
 8022a16:	2301      	movcc	r3, #1
 8022a18:	2300      	movcs	r3, #0
 8022a1a:	b2db      	uxtb	r3, r3
 8022a1c:	2b00      	cmp	r3, #0
 8022a1e:	d001      	beq.n	8022a24 <_ZNK12IMUFrameMemo3HasEj+0x40>
			return true;
 8022a20:	2301      	movs	r3, #1
 8022a22:	e000      	b.n	8022a26 <_ZNK12IMUFrameMemo3HasEj+0x42>

		return false;
 8022a24:	2300      	movs	r3, #0
	}
 8022a26:	4618      	mov	r0, r3
 8022a28:	370c      	adds	r7, #12
 8022a2a:	46bd      	mov	sp, r7
 8022a2c:	bd90      	pop	{r4, r7, pc}
	...

08022a30 <_ZNK12IMUFrameMemo3GetEj>:

	BHYWrapper::BHYFrame Get(size_t seq) const {
 8022a30:	b5b0      	push	{r4, r5, r7, lr}
 8022a32:	b084      	sub	sp, #16
 8022a34:	af00      	add	r7, sp, #0
 8022a36:	60f8      	str	r0, [r7, #12]
 8022a38:	60b9      	str	r1, [r7, #8]
 8022a3a:	607a      	str	r2, [r7, #4]
		assert(Has(seq));
 8022a3c:	6879      	ldr	r1, [r7, #4]
 8022a3e:	68b8      	ldr	r0, [r7, #8]
 8022a40:	f7ff ffd0 	bl	80229e4 <_ZNK12IMUFrameMemo3HasEj>
 8022a44:	4603      	mov	r3, r0
 8022a46:	2b00      	cmp	r3, #0
 8022a48:	d106      	bne.n	8022a58 <_ZNK12IMUFrameMemo3GetEj+0x28>
 8022a4a:	4b1a      	ldr	r3, [pc, #104]	; (8022ab4 <_ZNK12IMUFrameMemo3GetEj+0x84>)
 8022a4c:	4a1a      	ldr	r2, [pc, #104]	; (8022ab8 <_ZNK12IMUFrameMemo3GetEj+0x88>)
 8022a4e:	f44f 717b 	mov.w	r1, #1004	; 0x3ec
 8022a52:	481a      	ldr	r0, [pc, #104]	; (8022abc <_ZNK12IMUFrameMemo3GetEj+0x8c>)
 8022a54:	f019 f92a 	bl	803bcac <__assert_func>

		if (seq < FirstSeq) {
 8022a58:	68bb      	ldr	r3, [r7, #8]
 8022a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022a5c:	687a      	ldr	r2, [r7, #4]
 8022a5e:	429a      	cmp	r2, r3
 8022a60:	d20c      	bcs.n	8022a7c <_ZNK12IMUFrameMemo3GetEj+0x4c>
			return Queue.front();
 8022a62:	68bb      	ldr	r3, [r7, #8]
 8022a64:	4618      	mov	r0, r3
 8022a66:	f001 f829 	bl	8023abc <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5frontEv>
 8022a6a:	4602      	mov	r2, r0
 8022a6c:	68fb      	ldr	r3, [r7, #12]
 8022a6e:	461c      	mov	r4, r3
 8022a70:	4615      	mov	r5, r2
 8022a72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8022a74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8022a76:	682b      	ldr	r3, [r5, #0]
 8022a78:	6023      	str	r3, [r4, #0]
 8022a7a:	e017      	b.n	8022aac <_ZNK12IMUFrameMemo3GetEj+0x7c>
		}

		return Queue[(Queue.size() - 1) - (seq - FirstSeq)];
 8022a7c:	68bc      	ldr	r4, [r7, #8]
 8022a7e:	68bb      	ldr	r3, [r7, #8]
 8022a80:	4618      	mov	r0, r3
 8022a82:	f000 ff80 	bl	8023986 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8022a86:	4601      	mov	r1, r0
 8022a88:	68bb      	ldr	r3, [r7, #8]
 8022a8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022a8c:	687b      	ldr	r3, [r7, #4]
 8022a8e:	1ad3      	subs	r3, r2, r3
 8022a90:	440b      	add	r3, r1
 8022a92:	3b01      	subs	r3, #1
 8022a94:	4619      	mov	r1, r3
 8022a96:	4620      	mov	r0, r4
 8022a98:	f000 ffbc 	bl	8023a14 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEixEj>
 8022a9c:	4602      	mov	r2, r0
 8022a9e:	68fb      	ldr	r3, [r7, #12]
 8022aa0:	461c      	mov	r4, r3
 8022aa2:	4615      	mov	r5, r2
 8022aa4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8022aa6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8022aa8:	682b      	ldr	r3, [r5, #0]
 8022aaa:	6023      	str	r3, [r4, #0]
	}
 8022aac:	68f8      	ldr	r0, [r7, #12]
 8022aae:	3710      	adds	r7, #16
 8022ab0:	46bd      	mov	sp, r7
 8022ab2:	bdb0      	pop	{r4, r5, r7, pc}
 8022ab4:	0803d8dc 	.word	0x0803d8dc
 8022ab8:	0803d8e8 	.word	0x0803d8e8
 8022abc:	0803cf00 	.word	0x0803cf00

08022ac0 <_ZN18AcknowledgeHandler7Version11SerializeToEPPh>:
private:
	struct Version {
		uint8_t Major;
		uint8_t Minor;

		void SerializeTo(uint8_t **ptr) {
 8022ac0:	b580      	push	{r7, lr}
 8022ac2:	b082      	sub	sp, #8
 8022ac4:	af00      	add	r7, sp, #0
 8022ac6:	6078      	str	r0, [r7, #4]
 8022ac8:	6039      	str	r1, [r7, #0]
			assert(ptr);
 8022aca:	683b      	ldr	r3, [r7, #0]
 8022acc:	2b00      	cmp	r3, #0
 8022ace:	d106      	bne.n	8022ade <_ZN18AcknowledgeHandler7Version11SerializeToEPPh+0x1e>
 8022ad0:	4b14      	ldr	r3, [pc, #80]	; (8022b24 <_ZN18AcknowledgeHandler7Version11SerializeToEPPh+0x64>)
 8022ad2:	4a15      	ldr	r2, [pc, #84]	; (8022b28 <_ZN18AcknowledgeHandler7Version11SerializeToEPPh+0x68>)
 8022ad4:	f240 31fd 	movw	r1, #1021	; 0x3fd
 8022ad8:	4814      	ldr	r0, [pc, #80]	; (8022b2c <_ZN18AcknowledgeHandler7Version11SerializeToEPPh+0x6c>)
 8022ada:	f019 f8e7 	bl	803bcac <__assert_func>
			assert(*ptr);
 8022ade:	683b      	ldr	r3, [r7, #0]
 8022ae0:	681b      	ldr	r3, [r3, #0]
 8022ae2:	2b00      	cmp	r3, #0
 8022ae4:	d106      	bne.n	8022af4 <_ZN18AcknowledgeHandler7Version11SerializeToEPPh+0x34>
 8022ae6:	4b12      	ldr	r3, [pc, #72]	; (8022b30 <_ZN18AcknowledgeHandler7Version11SerializeToEPPh+0x70>)
 8022ae8:	4a0f      	ldr	r2, [pc, #60]	; (8022b28 <_ZN18AcknowledgeHandler7Version11SerializeToEPPh+0x68>)
 8022aea:	f240 31fe 	movw	r1, #1022	; 0x3fe
 8022aee:	480f      	ldr	r0, [pc, #60]	; (8022b2c <_ZN18AcknowledgeHandler7Version11SerializeToEPPh+0x6c>)
 8022af0:	f019 f8dc 	bl	803bcac <__assert_func>

			**ptr = Major;
 8022af4:	683b      	ldr	r3, [r7, #0]
 8022af6:	681b      	ldr	r3, [r3, #0]
 8022af8:	687a      	ldr	r2, [r7, #4]
 8022afa:	7812      	ldrb	r2, [r2, #0]
 8022afc:	701a      	strb	r2, [r3, #0]
			*ptr += sizeof(uint8_t);
 8022afe:	683b      	ldr	r3, [r7, #0]
 8022b00:	681b      	ldr	r3, [r3, #0]
 8022b02:	1c5a      	adds	r2, r3, #1
 8022b04:	683b      	ldr	r3, [r7, #0]
 8022b06:	601a      	str	r2, [r3, #0]

			**ptr = Minor;
 8022b08:	683b      	ldr	r3, [r7, #0]
 8022b0a:	681b      	ldr	r3, [r3, #0]
 8022b0c:	687a      	ldr	r2, [r7, #4]
 8022b0e:	7852      	ldrb	r2, [r2, #1]
 8022b10:	701a      	strb	r2, [r3, #0]
			*ptr += sizeof(uint8_t);
 8022b12:	683b      	ldr	r3, [r7, #0]
 8022b14:	681b      	ldr	r3, [r3, #0]
 8022b16:	1c5a      	adds	r2, r3, #1
 8022b18:	683b      	ldr	r3, [r7, #0]
 8022b1a:	601a      	str	r2, [r3, #0]
		}
 8022b1c:	bf00      	nop
 8022b1e:	3708      	adds	r7, #8
 8022b20:	46bd      	mov	sp, r7
 8022b22:	bd80      	pop	{r7, pc}
 8022b24:	0803cecc 	.word	0x0803cecc
 8022b28:	0803d920 	.word	0x0803d920
 8022b2c:	0803cf00 	.word	0x0803cf00
 8022b30:	0803cf1c 	.word	0x0803cf1c

08022b34 <_ZN18AcknowledgeHandlerC1Ehh>:
	};

	Version CurrentVersion;

public:
	AcknowledgeHandler(uint8_t versionMaj, uint8_t versionMin) {
 8022b34:	b480      	push	{r7}
 8022b36:	b083      	sub	sp, #12
 8022b38:	af00      	add	r7, sp, #0
 8022b3a:	6078      	str	r0, [r7, #4]
 8022b3c:	460b      	mov	r3, r1
 8022b3e:	70fb      	strb	r3, [r7, #3]
 8022b40:	4613      	mov	r3, r2
 8022b42:	70bb      	strb	r3, [r7, #2]
		CurrentVersion.Major = versionMaj;
 8022b44:	687b      	ldr	r3, [r7, #4]
 8022b46:	78fa      	ldrb	r2, [r7, #3]
 8022b48:	701a      	strb	r2, [r3, #0]
		CurrentVersion.Minor = versionMin;
 8022b4a:	687b      	ldr	r3, [r7, #4]
 8022b4c:	78ba      	ldrb	r2, [r7, #2]
 8022b4e:	705a      	strb	r2, [r3, #1]
	}
 8022b50:	687b      	ldr	r3, [r7, #4]
 8022b52:	4618      	mov	r0, r3
 8022b54:	370c      	adds	r7, #12
 8022b56:	46bd      	mov	sp, r7
 8022b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022b5c:	4770      	bx	lr
	...

08022b60 <_ZN18AcknowledgeHandler6HandleERK7Request>:

	Responce Handle(const Request &request) {
 8022b60:	b580      	push	{r7, lr}
 8022b62:	b086      	sub	sp, #24
 8022b64:	af00      	add	r7, sp, #0
 8022b66:	60f8      	str	r0, [r7, #12]
 8022b68:	60b9      	str	r1, [r7, #8]
 8022b6a:	607a      	str	r2, [r7, #4]
		assert(request.PeripheryID == Periphery::Ack);
 8022b6c:	687b      	ldr	r3, [r7, #4]
 8022b6e:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
 8022b72:	2b02      	cmp	r3, #2
 8022b74:	d006      	beq.n	8022b84 <_ZN18AcknowledgeHandler6HandleERK7Request+0x24>
 8022b76:	4b14      	ldr	r3, [pc, #80]	; (8022bc8 <_ZN18AcknowledgeHandler6HandleERK7Request+0x68>)
 8022b78:	4a14      	ldr	r2, [pc, #80]	; (8022bcc <_ZN18AcknowledgeHandler6HandleERK7Request+0x6c>)
 8022b7a:	f240 4111 	movw	r1, #1041	; 0x411
 8022b7e:	4814      	ldr	r0, [pc, #80]	; (8022bd0 <_ZN18AcknowledgeHandler6HandleERK7Request+0x70>)
 8022b80:	f019 f894 	bl	803bcac <__assert_func>

		Responce responce;
		responce.PeripheryID = Periphery::Ack;
 8022b84:	68fb      	ldr	r3, [r7, #12]
 8022b86:	2202      	movs	r2, #2
 8022b88:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
		responce.MetaInfo = 0;
 8022b8c:	68fb      	ldr	r3, [r7, #12]
 8022b8e:	2200      	movs	r2, #0
 8022b90:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
		responce.Error = 0;
 8022b94:	68fb      	ldr	r3, [r7, #12]
 8022b96:	2200      	movs	r2, #0
 8022b98:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
		responce.ResponceSize = 2;
 8022b9c:	68fb      	ldr	r3, [r7, #12]
 8022b9e:	2202      	movs	r2, #2
 8022ba0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

		uint8_t *ptr = responce.Data.data();
 8022ba4:	68f8      	ldr	r0, [r7, #12]
 8022ba6:	f000 fd0b 	bl	80235c0 <_ZNSt5arrayIhLj256EE4dataEv>
 8022baa:	4603      	mov	r3, r0
 8022bac:	617b      	str	r3, [r7, #20]
		CurrentVersion.SerializeTo(&ptr);
 8022bae:	68bb      	ldr	r3, [r7, #8]
 8022bb0:	f107 0214 	add.w	r2, r7, #20
 8022bb4:	4611      	mov	r1, r2
 8022bb6:	4618      	mov	r0, r3
 8022bb8:	f7ff ff82 	bl	8022ac0 <_ZN18AcknowledgeHandler7Version11SerializeToEPPh>

		return responce;
 8022bbc:	bf00      	nop
	}
 8022bbe:	68f8      	ldr	r0, [r7, #12]
 8022bc0:	3718      	adds	r7, #24
 8022bc2:	46bd      	mov	sp, r7
 8022bc4:	bd80      	pop	{r7, pc}
 8022bc6:	bf00      	nop
 8022bc8:	0803d95c 	.word	0x0803d95c
 8022bcc:	0803d984 	.word	0x0803d984
 8022bd0:	0803cf00 	.word	0x0803cf00

08022bd4 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEC1Ev>:

      /**
       *  @brief  Creates a %deque with no elements.
       */
#if __cplusplus >= 201103L
      deque() = default;
 8022bd4:	b580      	push	{r7, lr}
 8022bd6:	b082      	sub	sp, #8
 8022bd8:	af00      	add	r7, sp, #0
 8022bda:	6078      	str	r0, [r7, #4]
 8022bdc:	687b      	ldr	r3, [r7, #4]
 8022bde:	4618      	mov	r0, r3
 8022be0:	f000 ff8c 	bl	8023afc <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EEC1Ev>
 8022be4:	687b      	ldr	r3, [r7, #4]
 8022be6:	4618      	mov	r0, r3
 8022be8:	3708      	adds	r7, #8
 8022bea:	46bd      	mov	sp, r7
 8022bec:	bd80      	pop	{r7, pc}

08022bee <_ZN17IMUFrameContainerC1Ev>:
class IMUFrameContainer {
 8022bee:	b580      	push	{r7, lr}
 8022bf0:	b082      	sub	sp, #8
 8022bf2:	af00      	add	r7, sp, #0
 8022bf4:	6078      	str	r0, [r7, #4]
 8022bf6:	687b      	ldr	r3, [r7, #4]
 8022bf8:	4618      	mov	r0, r3
 8022bfa:	f7ff ffeb 	bl	8022bd4 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEC1Ev>
 8022bfe:	687b      	ldr	r3, [r7, #4]
 8022c00:	2200      	movs	r2, #0
 8022c02:	629a      	str	r2, [r3, #40]	; 0x28
 8022c04:	687b      	ldr	r3, [r7, #4]
 8022c06:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8022c0a:	62da      	str	r2, [r3, #44]	; 0x2c
 8022c0c:	687b      	ldr	r3, [r7, #4]
 8022c0e:	4618      	mov	r0, r3
 8022c10:	3708      	adds	r7, #8
 8022c12:	46bd      	mov	sp, r7
 8022c14:	bd80      	pop	{r7, pc}

08022c16 <_ZN17IMUFrameContainerD1Ev>:
 8022c16:	b580      	push	{r7, lr}
 8022c18:	b082      	sub	sp, #8
 8022c1a:	af00      	add	r7, sp, #0
 8022c1c:	6078      	str	r0, [r7, #4]
 8022c1e:	687b      	ldr	r3, [r7, #4]
 8022c20:	4618      	mov	r0, r3
 8022c22:	f000 ff9e 	bl	8023b62 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EED1Ev>
 8022c26:	687b      	ldr	r3, [r7, #4]
 8022c28:	4618      	mov	r0, r3
 8022c2a:	3708      	adds	r7, #8
 8022c2c:	46bd      	mov	sp, r7
 8022c2e:	bd80      	pop	{r7, pc}

08022c30 <_ZN12IMUFrameMemoC1Ev>:
class IMUFrameMemo {
 8022c30:	b580      	push	{r7, lr}
 8022c32:	b082      	sub	sp, #8
 8022c34:	af00      	add	r7, sp, #0
 8022c36:	6078      	str	r0, [r7, #4]
 8022c38:	687b      	ldr	r3, [r7, #4]
 8022c3a:	4618      	mov	r0, r3
 8022c3c:	f7ff ffca 	bl	8022bd4 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEC1Ev>
 8022c40:	687b      	ldr	r3, [r7, #4]
 8022c42:	22a0      	movs	r2, #160	; 0xa0
 8022c44:	629a      	str	r2, [r3, #40]	; 0x28
 8022c46:	687b      	ldr	r3, [r7, #4]
 8022c48:	2200      	movs	r2, #0
 8022c4a:	62da      	str	r2, [r3, #44]	; 0x2c
 8022c4c:	687b      	ldr	r3, [r7, #4]
 8022c4e:	4618      	mov	r0, r3
 8022c50:	3708      	adds	r7, #8
 8022c52:	46bd      	mov	sp, r7
 8022c54:	bd80      	pop	{r7, pc}

08022c56 <_ZN12IMUFrameMemoD1Ev>:
 8022c56:	b580      	push	{r7, lr}
 8022c58:	b082      	sub	sp, #8
 8022c5a:	af00      	add	r7, sp, #0
 8022c5c:	6078      	str	r0, [r7, #4]
 8022c5e:	687b      	ldr	r3, [r7, #4]
 8022c60:	4618      	mov	r0, r3
 8022c62:	f000 ff7e 	bl	8023b62 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EED1Ev>
 8022c66:	687b      	ldr	r3, [r7, #4]
 8022c68:	4618      	mov	r0, r3
 8022c6a:	3708      	adds	r7, #8
 8022c6c:	46bd      	mov	sp, r7
 8022c6e:	bd80      	pop	{r7, pc}

08022c70 <_ZNSt5queueIjSt5dequeIjSaIjEEED1Ev>:
   *  Members not found in @a normal containers are @c container_type,
   *  which is a typedef for the second Sequence parameter, and @c push and
   *  @c pop, which are standard %queue/FIFO operations.
  */
  template<typename _Tp, typename _Sequence = deque<_Tp> >
    class queue
 8022c70:	b580      	push	{r7, lr}
 8022c72:	b082      	sub	sp, #8
 8022c74:	af00      	add	r7, sp, #0
 8022c76:	6078      	str	r0, [r7, #4]
 8022c78:	687b      	ldr	r3, [r7, #4]
 8022c7a:	4618      	mov	r0, r3
 8022c7c:	f000 ffb7 	bl	8023bee <_ZNSt5dequeIjSaIjEED1Ev>
 8022c80:	687b      	ldr	r3, [r7, #4]
 8022c82:	4618      	mov	r0, r3
 8022c84:	3708      	adds	r7, #8
 8022c86:	46bd      	mov	sp, r7
 8022c88:	bd80      	pop	{r7, pc}

08022c8a <_ZN20StrobeDurationFilterC1Ev>:
class StrobeDurationFilter {
 8022c8a:	b580      	push	{r7, lr}
 8022c8c:	b082      	sub	sp, #8
 8022c8e:	af00      	add	r7, sp, #0
 8022c90:	6078      	str	r0, [r7, #4]
 8022c92:	687b      	ldr	r3, [r7, #4]
 8022c94:	2200      	movs	r2, #0
 8022c96:	601a      	str	r2, [r3, #0]
 8022c98:	687b      	ldr	r3, [r7, #4]
 8022c9a:	2200      	movs	r2, #0
 8022c9c:	605a      	str	r2, [r3, #4]
 8022c9e:	687b      	ldr	r3, [r7, #4]
 8022ca0:	2201      	movs	r2, #1
 8022ca2:	609a      	str	r2, [r3, #8]
 8022ca4:	687b      	ldr	r3, [r7, #4]
 8022ca6:	2200      	movs	r2, #0
 8022ca8:	60da      	str	r2, [r3, #12]
 8022caa:	687b      	ldr	r3, [r7, #4]
 8022cac:	2200      	movs	r2, #0
 8022cae:	611a      	str	r2, [r3, #16]
 8022cb0:	687b      	ldr	r3, [r7, #4]
 8022cb2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8022cb6:	615a      	str	r2, [r3, #20]
 8022cb8:	687b      	ldr	r3, [r7, #4]
 8022cba:	3318      	adds	r3, #24
 8022cbc:	4618      	mov	r0, r3
 8022cbe:	f000 ff82 	bl	8023bc6 <_ZNSt5queueIjSt5dequeIjSaIjEEEC1IS2_vEEv>
 8022cc2:	687b      	ldr	r3, [r7, #4]
 8022cc4:	2200      	movs	r2, #0
 8022cc6:	641a      	str	r2, [r3, #64]	; 0x40
 8022cc8:	687b      	ldr	r3, [r7, #4]
 8022cca:	4618      	mov	r0, r3
 8022ccc:	3708      	adds	r7, #8
 8022cce:	46bd      	mov	sp, r7
 8022cd0:	bd80      	pop	{r7, pc}

08022cd2 <_ZN20StrobeDurationFilterD1Ev>:
 8022cd2:	b580      	push	{r7, lr}
 8022cd4:	b082      	sub	sp, #8
 8022cd6:	af00      	add	r7, sp, #0
 8022cd8:	6078      	str	r0, [r7, #4]
 8022cda:	687b      	ldr	r3, [r7, #4]
 8022cdc:	3318      	adds	r3, #24
 8022cde:	4618      	mov	r0, r3
 8022ce0:	f7ff ffc6 	bl	8022c70 <_ZNSt5queueIjSt5dequeIjSaIjEEED1Ev>
 8022ce4:	687b      	ldr	r3, [r7, #4]
 8022ce6:	4618      	mov	r0, r3
 8022ce8:	3708      	adds	r7, #8
 8022cea:	46bd      	mov	sp, r7
 8022cec:	bd80      	pop	{r7, pc}
	...

08022cf0 <_ZN18MotherboardContextC1E17MotherboardConfig>:
	StrobeDurationFilter StrobeFilter;
	size_t StrobeOffset;

	bool UpdateIMU = false;

	MotherboardContext(MotherboardConfig conf) :
 8022cf0:	b084      	sub	sp, #16
 8022cf2:	b580      	push	{r7, lr}
 8022cf4:	b082      	sub	sp, #8
 8022cf6:	af00      	add	r7, sp, #0
 8022cf8:	6078      	str	r0, [r7, #4]
 8022cfa:	f107 0014 	add.w	r0, r7, #20
 8022cfe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
			HeadService { conf.HeadServiceUart, conf.HeadTimeout }, HeadStream {
					conf.HeadStreamUart, conf.HeadTimeout }, Body {
					conf.BodyUart, conf.BodyTimeout, conf.BodyPeriod }, FrameContainer { }, IMU {
					conf.IMUSpi }, IMUHandler { }, AckHandler {
					conf.VersionMajor, conf.VersionMinor }, StrobeOffset {
					conf.StrobeOffset } {
 8022d02:	687b      	ldr	r3, [r7, #4]
 8022d04:	6979      	ldr	r1, [r7, #20]
 8022d06:	69fa      	ldr	r2, [r7, #28]
 8022d08:	4618      	mov	r0, r3
 8022d0a:	f7fe ff61 	bl	8021bd0 <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj>
 8022d0e:	687b      	ldr	r3, [r7, #4]
 8022d10:	f603 43a4 	addw	r3, r3, #3236	; 0xca4
 8022d14:	69b9      	ldr	r1, [r7, #24]
 8022d16:	69fa      	ldr	r2, [r7, #28]
 8022d18:	4618      	mov	r0, r3
 8022d1a:	f7fe ff59 	bl	8021bd0 <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj>
 8022d1e:	687a      	ldr	r2, [r7, #4]
 8022d20:	f641 1348 	movw	r3, #6472	; 0x1948
 8022d24:	4413      	add	r3, r2
 8022d26:	f897 1034 	ldrb.w	r1, [r7, #52]	; 0x34
 8022d2a:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8022d2e:	4618      	mov	r0, r3
 8022d30:	f7ff ff00 	bl	8022b34 <_ZN18AcknowledgeHandlerC1Ehh>
 8022d34:	687b      	ldr	r3, [r7, #4]
 8022d36:	f641 104c 	movw	r0, #6476	; 0x194c
 8022d3a:	4418      	add	r0, r3
 8022d3c:	6a39      	ldr	r1, [r7, #32]
 8022d3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8022d40:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8022d44:	f7fe f95a 	bl	8020ffc <_ZN11QueueSenderC1EP20__UART_HandleTypeDefjh>
 8022d48:	687b      	ldr	r3, [r7, #4]
 8022d4a:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8022d4e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8022d52:	2230      	movs	r2, #48	; 0x30
 8022d54:	2100      	movs	r1, #0
 8022d56:	4618      	mov	r0, r3
 8022d58:	f019 f83a 	bl	803bdd0 <memset>
 8022d5c:	687a      	ldr	r2, [r7, #4]
 8022d5e:	4b16      	ldr	r3, [pc, #88]	; (8022db8 <_ZN18MotherboardContextC1E17MotherboardConfig+0xc8>)
 8022d60:	4413      	add	r3, r2
 8022d62:	4618      	mov	r0, r3
 8022d64:	f7ff ff43 	bl	8022bee <_ZN17IMUFrameContainerC1Ev>
 8022d68:	687a      	ldr	r2, [r7, #4]
 8022d6a:	4b14      	ldr	r3, [pc, #80]	; (8022dbc <_ZN18MotherboardContextC1E17MotherboardConfig+0xcc>)
 8022d6c:	4413      	add	r3, r2
 8022d6e:	4618      	mov	r0, r3
 8022d70:	f7ff ff5e 	bl	8022c30 <_ZN12IMUFrameMemoC1Ev>
 8022d74:	687a      	ldr	r2, [r7, #4]
 8022d76:	4b12      	ldr	r3, [pc, #72]	; (8022dc0 <_ZN18MotherboardContextC1E17MotherboardConfig+0xd0>)
 8022d78:	4413      	add	r3, r2
 8022d7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8022d7c:	4611      	mov	r1, r2
 8022d7e:	4618      	mov	r0, r3
 8022d80:	f7fd fc80 	bl	8020684 <_ZN10BHYWrapperC1EP19__SPI_HandleTypeDef>
 8022d84:	687a      	ldr	r2, [r7, #4]
 8022d86:	4b0f      	ldr	r3, [pc, #60]	; (8022dc4 <_ZN18MotherboardContextC1E17MotherboardConfig+0xd4>)
 8022d88:	4413      	add	r3, r2
 8022d8a:	4618      	mov	r0, r3
 8022d8c:	f7ff ff7d 	bl	8022c8a <_ZN20StrobeDurationFilterC1Ev>
 8022d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022d92:	687a      	ldr	r2, [r7, #4]
 8022d94:	f502 3210 	add.w	r2, r2, #147456	; 0x24000
 8022d98:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
 8022d9c:	687b      	ldr	r3, [r7, #4]
 8022d9e:	f503 3310 	add.w	r3, r3, #147456	; 0x24000
 8022da2:	2200      	movs	r2, #0
 8022da4:	f883 2344 	strb.w	r2, [r3, #836]	; 0x344
	}
 8022da8:	687b      	ldr	r3, [r7, #4]
 8022daa:	4618      	mov	r0, r3
 8022dac:	3708      	adds	r7, #8
 8022dae:	46bd      	mov	sp, r7
 8022db0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8022db4:	b004      	add	sp, #16
 8022db6:	4770      	bx	lr
 8022db8:	00023140 	.word	0x00023140
 8022dbc:	00023170 	.word	0x00023170
 8022dc0:	000231a0 	.word	0x000231a0
 8022dc4:	000242fc 	.word	0x000242fc

08022dc8 <_ZN13HeadInterfaceC1Ev>:
	HeadInterface() = default;
 8022dc8:	b580      	push	{r7, lr}
 8022dca:	b082      	sub	sp, #8
 8022dcc:	af00      	add	r7, sp, #0
 8022dce:	6078      	str	r0, [r7, #4]
 8022dd0:	687b      	ldr	r3, [r7, #4]
 8022dd2:	4618      	mov	r0, r3
 8022dd4:	f7fe fee8 	bl	8021ba8 <_ZN10FixedQueueI7RequestLj10EEC1Ev>
 8022dd8:	687b      	ldr	r3, [r7, #4]
 8022dda:	2201      	movs	r2, #1
 8022ddc:	f883 2ca0 	strb.w	r2, [r3, #3232]	; 0xca0
 8022de0:	687b      	ldr	r3, [r7, #4]
 8022de2:	4618      	mov	r0, r3
 8022de4:	3708      	adds	r7, #8
 8022de6:	46bd      	mov	sp, r7
 8022de8:	bd80      	pop	{r7, pc}
	...

08022dec <_ZN11QueueSenderC1Ev>:
	QueueSender() = default;
 8022dec:	b580      	push	{r7, lr}
 8022dee:	b082      	sub	sp, #8
 8022df0:	af00      	add	r7, sp, #0
 8022df2:	6078      	str	r0, [r7, #4]
 8022df4:	687b      	ldr	r3, [r7, #4]
 8022df6:	4618      	mov	r0, r3
 8022df8:	f7fe f8d8 	bl	8020fac <_ZN10FixedQueueI7RequestLj500EEC1Ev>
 8022dfc:	687a      	ldr	r2, [r7, #4]
 8022dfe:	4b17      	ldr	r3, [pc, #92]	; (8022e5c <_ZN11QueueSenderC1Ev+0x70>)
 8022e00:	4413      	add	r3, r2
 8022e02:	4618      	mov	r0, r3
 8022e04:	f7fe f8e6 	bl	8020fd4 <_ZN10FixedQueueI8ResponceLj10EEC1Ev>
 8022e08:	687b      	ldr	r3, [r7, #4]
 8022e0a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8022e0e:	2200      	movs	r2, #0
 8022e10:	f883 26e4 	strb.w	r2, [r3, #1764]	; 0x6e4
 8022e14:	687b      	ldr	r3, [r7, #4]
 8022e16:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8022e1a:	2200      	movs	r2, #0
 8022e1c:	f883 26e5 	strb.w	r2, [r3, #1765]	; 0x6e5
 8022e20:	687b      	ldr	r3, [r7, #4]
 8022e22:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8022e26:	2201      	movs	r2, #1
 8022e28:	f883 27f0 	strb.w	r2, [r3, #2032]	; 0x7f0
 8022e2c:	687b      	ldr	r3, [r7, #4]
 8022e2e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8022e32:	2200      	movs	r2, #0
 8022e34:	f883 27f1 	strb.w	r2, [r3, #2033]	; 0x7f1
 8022e38:	687b      	ldr	r3, [r7, #4]
 8022e3a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8022e3e:	2201      	movs	r2, #1
 8022e40:	f883 27f2 	strb.w	r2, [r3, #2034]	; 0x7f2
 8022e44:	687b      	ldr	r3, [r7, #4]
 8022e46:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8022e4a:	2200      	movs	r2, #0
 8022e4c:	f883 27f3 	strb.w	r2, [r3, #2035]	; 0x7f3
 8022e50:	687b      	ldr	r3, [r7, #4]
 8022e52:	4618      	mov	r0, r3
 8022e54:	3708      	adds	r7, #8
 8022e56:	46bd      	mov	sp, r7
 8022e58:	bd80      	pop	{r7, pc}
 8022e5a:	bf00      	nop
 8022e5c:	00020b7c 	.word	0x00020b7c

08022e60 <_ZN10BHYWrapperC1Ev>:

		void SerializeTo(uint8_t* dest, uint8_t* size);
	};

	BHYWrapper(SPI_HandleTypeDef *spiHandle);
	BHYWrapper() = default;
 8022e60:	b480      	push	{r7}
 8022e62:	b083      	sub	sp, #12
 8022e64:	af00      	add	r7, sp, #0
 8022e66:	6078      	str	r0, [r7, #4]
 8022e68:	687b      	ldr	r3, [r7, #4]
 8022e6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8022e6e:	461a      	mov	r2, r3
 8022e70:	2300      	movs	r3, #0
 8022e72:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8022e76:	687b      	ldr	r3, [r7, #4]
 8022e78:	4618      	mov	r0, r3
 8022e7a:	370c      	adds	r7, #12
 8022e7c:	46bd      	mov	sp, r7
 8022e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022e82:	4770      	bx	lr

08022e84 <_ZN18MotherboardContextC1Ev>:

	MotherboardContext() = default;
 8022e84:	b580      	push	{r7, lr}
 8022e86:	b082      	sub	sp, #8
 8022e88:	af00      	add	r7, sp, #0
 8022e8a:	6078      	str	r0, [r7, #4]
 8022e8c:	687b      	ldr	r3, [r7, #4]
 8022e8e:	4618      	mov	r0, r3
 8022e90:	f7ff ff9a 	bl	8022dc8 <_ZN13HeadInterfaceC1Ev>
 8022e94:	687b      	ldr	r3, [r7, #4]
 8022e96:	f603 43a4 	addw	r3, r3, #3236	; 0xca4
 8022e9a:	4618      	mov	r0, r3
 8022e9c:	f7ff ff94 	bl	8022dc8 <_ZN13HeadInterfaceC1Ev>
 8022ea0:	687a      	ldr	r2, [r7, #4]
 8022ea2:	f641 1348 	movw	r3, #6472	; 0x1948
 8022ea6:	4413      	add	r3, r2
 8022ea8:	2200      	movs	r2, #0
 8022eaa:	2100      	movs	r1, #0
 8022eac:	4618      	mov	r0, r3
 8022eae:	f7ff fe41 	bl	8022b34 <_ZN18AcknowledgeHandlerC1Ehh>
 8022eb2:	687a      	ldr	r2, [r7, #4]
 8022eb4:	f641 134c 	movw	r3, #6476	; 0x194c
 8022eb8:	4413      	add	r3, r2
 8022eba:	4618      	mov	r0, r3
 8022ebc:	f7ff ff96 	bl	8022dec <_ZN11QueueSenderC1Ev>
 8022ec0:	687a      	ldr	r2, [r7, #4]
 8022ec2:	4b11      	ldr	r3, [pc, #68]	; (8022f08 <_ZN18MotherboardContextC1Ev+0x84>)
 8022ec4:	4413      	add	r3, r2
 8022ec6:	4618      	mov	r0, r3
 8022ec8:	f7ff fe91 	bl	8022bee <_ZN17IMUFrameContainerC1Ev>
 8022ecc:	687a      	ldr	r2, [r7, #4]
 8022ece:	4b0f      	ldr	r3, [pc, #60]	; (8022f0c <_ZN18MotherboardContextC1Ev+0x88>)
 8022ed0:	4413      	add	r3, r2
 8022ed2:	4618      	mov	r0, r3
 8022ed4:	f7ff feac 	bl	8022c30 <_ZN12IMUFrameMemoC1Ev>
 8022ed8:	687a      	ldr	r2, [r7, #4]
 8022eda:	4b0d      	ldr	r3, [pc, #52]	; (8022f10 <_ZN18MotherboardContextC1Ev+0x8c>)
 8022edc:	4413      	add	r3, r2
 8022ede:	4618      	mov	r0, r3
 8022ee0:	f7ff ffbe 	bl	8022e60 <_ZN10BHYWrapperC1Ev>
 8022ee4:	687a      	ldr	r2, [r7, #4]
 8022ee6:	4b0b      	ldr	r3, [pc, #44]	; (8022f14 <_ZN18MotherboardContextC1Ev+0x90>)
 8022ee8:	4413      	add	r3, r2
 8022eea:	4618      	mov	r0, r3
 8022eec:	f7ff fecd 	bl	8022c8a <_ZN20StrobeDurationFilterC1Ev>
 8022ef0:	687b      	ldr	r3, [r7, #4]
 8022ef2:	f503 3310 	add.w	r3, r3, #147456	; 0x24000
 8022ef6:	2200      	movs	r2, #0
 8022ef8:	f883 2344 	strb.w	r2, [r3, #836]	; 0x344
 8022efc:	687b      	ldr	r3, [r7, #4]
 8022efe:	4618      	mov	r0, r3
 8022f00:	3708      	adds	r7, #8
 8022f02:	46bd      	mov	sp, r7
 8022f04:	bd80      	pop	{r7, pc}
 8022f06:	bf00      	nop
 8022f08:	00023140 	.word	0x00023140
 8022f0c:	00023170 	.word	0x00023170
 8022f10:	000231a0 	.word	0x000231a0
 8022f14:	000242fc 	.word	0x000242fc

08022f18 <_ZN18MotherboardContextD1Ev>:
struct MotherboardContext {
 8022f18:	b580      	push	{r7, lr}
 8022f1a:	b082      	sub	sp, #8
 8022f1c:	af00      	add	r7, sp, #0
 8022f1e:	6078      	str	r0, [r7, #4]
 8022f20:	687a      	ldr	r2, [r7, #4]
 8022f22:	4b0b      	ldr	r3, [pc, #44]	; (8022f50 <_ZN18MotherboardContextD1Ev+0x38>)
 8022f24:	4413      	add	r3, r2
 8022f26:	4618      	mov	r0, r3
 8022f28:	f7ff fed3 	bl	8022cd2 <_ZN20StrobeDurationFilterD1Ev>
 8022f2c:	687a      	ldr	r2, [r7, #4]
 8022f2e:	4b09      	ldr	r3, [pc, #36]	; (8022f54 <_ZN18MotherboardContextD1Ev+0x3c>)
 8022f30:	4413      	add	r3, r2
 8022f32:	4618      	mov	r0, r3
 8022f34:	f7ff fe8f 	bl	8022c56 <_ZN12IMUFrameMemoD1Ev>
 8022f38:	687a      	ldr	r2, [r7, #4]
 8022f3a:	4b07      	ldr	r3, [pc, #28]	; (8022f58 <_ZN18MotherboardContextD1Ev+0x40>)
 8022f3c:	4413      	add	r3, r2
 8022f3e:	4618      	mov	r0, r3
 8022f40:	f7ff fe69 	bl	8022c16 <_ZN17IMUFrameContainerD1Ev>
 8022f44:	687b      	ldr	r3, [r7, #4]
 8022f46:	4618      	mov	r0, r3
 8022f48:	3708      	adds	r7, #8
 8022f4a:	46bd      	mov	sp, r7
 8022f4c:	bd80      	pop	{r7, pc}
 8022f4e:	bf00      	nop
 8022f50:	000242fc 	.word	0x000242fc
 8022f54:	00023170 	.word	0x00023170
 8022f58:	00023140 	.word	0x00023140

08022f5c <_ZN17IMUFrameContaineraSEOS_>:
class IMUFrameContainer {
 8022f5c:	b580      	push	{r7, lr}
 8022f5e:	b082      	sub	sp, #8
 8022f60:	af00      	add	r7, sp, #0
 8022f62:	6078      	str	r0, [r7, #4]
 8022f64:	6039      	str	r1, [r7, #0]
 8022f66:	687b      	ldr	r3, [r7, #4]
 8022f68:	683a      	ldr	r2, [r7, #0]
 8022f6a:	4611      	mov	r1, r2
 8022f6c:	4618      	mov	r0, r3
 8022f6e:	f000 fe63 	bl	8023c38 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEaSEOS3_>
 8022f72:	683b      	ldr	r3, [r7, #0]
 8022f74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8022f76:	687b      	ldr	r3, [r7, #4]
 8022f78:	629a      	str	r2, [r3, #40]	; 0x28
 8022f7a:	683b      	ldr	r3, [r7, #0]
 8022f7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022f7e:	687b      	ldr	r3, [r7, #4]
 8022f80:	62da      	str	r2, [r3, #44]	; 0x2c
 8022f82:	687b      	ldr	r3, [r7, #4]
 8022f84:	4618      	mov	r0, r3
 8022f86:	3708      	adds	r7, #8
 8022f88:	46bd      	mov	sp, r7
 8022f8a:	bd80      	pop	{r7, pc}

08022f8c <_ZN12IMUFrameMemoaSEOS_>:
class IMUFrameMemo {
 8022f8c:	b580      	push	{r7, lr}
 8022f8e:	b082      	sub	sp, #8
 8022f90:	af00      	add	r7, sp, #0
 8022f92:	6078      	str	r0, [r7, #4]
 8022f94:	6039      	str	r1, [r7, #0]
 8022f96:	687b      	ldr	r3, [r7, #4]
 8022f98:	683a      	ldr	r2, [r7, #0]
 8022f9a:	4611      	mov	r1, r2
 8022f9c:	4618      	mov	r0, r3
 8022f9e:	f000 fe4b 	bl	8023c38 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEaSEOS3_>
 8022fa2:	683b      	ldr	r3, [r7, #0]
 8022fa4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8022fa6:	687b      	ldr	r3, [r7, #4]
 8022fa8:	629a      	str	r2, [r3, #40]	; 0x28
 8022faa:	683b      	ldr	r3, [r7, #0]
 8022fac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022fae:	687b      	ldr	r3, [r7, #4]
 8022fb0:	62da      	str	r2, [r3, #44]	; 0x2c
 8022fb2:	687b      	ldr	r3, [r7, #4]
 8022fb4:	4618      	mov	r0, r3
 8022fb6:	3708      	adds	r7, #8
 8022fb8:	46bd      	mov	sp, r7
 8022fba:	bd80      	pop	{r7, pc}

08022fbc <_ZNSt5queueIjSt5dequeIjSaIjEEEaSEOS3_>:
 8022fbc:	b580      	push	{r7, lr}
 8022fbe:	b082      	sub	sp, #8
 8022fc0:	af00      	add	r7, sp, #0
 8022fc2:	6078      	str	r0, [r7, #4]
 8022fc4:	6039      	str	r1, [r7, #0]
 8022fc6:	687b      	ldr	r3, [r7, #4]
 8022fc8:	683a      	ldr	r2, [r7, #0]
 8022fca:	4611      	mov	r1, r2
 8022fcc:	4618      	mov	r0, r3
 8022fce:	f000 fe46 	bl	8023c5e <_ZNSt5dequeIjSaIjEEaSEOS1_>
 8022fd2:	687b      	ldr	r3, [r7, #4]
 8022fd4:	4618      	mov	r0, r3
 8022fd6:	3708      	adds	r7, #8
 8022fd8:	46bd      	mov	sp, r7
 8022fda:	bd80      	pop	{r7, pc}

08022fdc <_ZN20StrobeDurationFilteraSEOS_>:
class StrobeDurationFilter {
 8022fdc:	b580      	push	{r7, lr}
 8022fde:	b082      	sub	sp, #8
 8022fe0:	af00      	add	r7, sp, #0
 8022fe2:	6078      	str	r0, [r7, #4]
 8022fe4:	6039      	str	r1, [r7, #0]
 8022fe6:	683b      	ldr	r3, [r7, #0]
 8022fe8:	681a      	ldr	r2, [r3, #0]
 8022fea:	687b      	ldr	r3, [r7, #4]
 8022fec:	601a      	str	r2, [r3, #0]
 8022fee:	683b      	ldr	r3, [r7, #0]
 8022ff0:	685a      	ldr	r2, [r3, #4]
 8022ff2:	687b      	ldr	r3, [r7, #4]
 8022ff4:	605a      	str	r2, [r3, #4]
 8022ff6:	683b      	ldr	r3, [r7, #0]
 8022ff8:	689a      	ldr	r2, [r3, #8]
 8022ffa:	687b      	ldr	r3, [r7, #4]
 8022ffc:	609a      	str	r2, [r3, #8]
 8022ffe:	683b      	ldr	r3, [r7, #0]
 8023000:	68da      	ldr	r2, [r3, #12]
 8023002:	687b      	ldr	r3, [r7, #4]
 8023004:	60da      	str	r2, [r3, #12]
 8023006:	683b      	ldr	r3, [r7, #0]
 8023008:	691a      	ldr	r2, [r3, #16]
 802300a:	687b      	ldr	r3, [r7, #4]
 802300c:	611a      	str	r2, [r3, #16]
 802300e:	683b      	ldr	r3, [r7, #0]
 8023010:	695a      	ldr	r2, [r3, #20]
 8023012:	687b      	ldr	r3, [r7, #4]
 8023014:	615a      	str	r2, [r3, #20]
 8023016:	687b      	ldr	r3, [r7, #4]
 8023018:	f103 0218 	add.w	r2, r3, #24
 802301c:	683b      	ldr	r3, [r7, #0]
 802301e:	3318      	adds	r3, #24
 8023020:	4619      	mov	r1, r3
 8023022:	4610      	mov	r0, r2
 8023024:	f7ff ffca 	bl	8022fbc <_ZNSt5queueIjSt5dequeIjSaIjEEEaSEOS3_>
 8023028:	683b      	ldr	r3, [r7, #0]
 802302a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 802302c:	687b      	ldr	r3, [r7, #4]
 802302e:	641a      	str	r2, [r3, #64]	; 0x40
 8023030:	687b      	ldr	r3, [r7, #4]
 8023032:	4618      	mov	r0, r3
 8023034:	3708      	adds	r7, #8
 8023036:	46bd      	mov	sp, r7
 8023038:	bd80      	pop	{r7, pc}
	...

0802303c <_ZN18MotherboardContextaSEOS_>:
 802303c:	b580      	push	{r7, lr}
 802303e:	b082      	sub	sp, #8
 8023040:	af00      	add	r7, sp, #0
 8023042:	6078      	str	r0, [r7, #4]
 8023044:	6039      	str	r1, [r7, #0]
 8023046:	687a      	ldr	r2, [r7, #4]
 8023048:	683b      	ldr	r3, [r7, #0]
 802304a:	4610      	mov	r0, r2
 802304c:	4619      	mov	r1, r3
 802304e:	f640 43a1 	movw	r3, #3233	; 0xca1
 8023052:	461a      	mov	r2, r3
 8023054:	f018 fe94 	bl	803bd80 <memcpy>
 8023058:	687a      	ldr	r2, [r7, #4]
 802305a:	683b      	ldr	r3, [r7, #0]
 802305c:	f602 40a4 	addw	r0, r2, #3236	; 0xca4
 8023060:	f603 43a4 	addw	r3, r3, #3236	; 0xca4
 8023064:	f640 42a1 	movw	r2, #3233	; 0xca1
 8023068:	4619      	mov	r1, r3
 802306a:	f018 fe89 	bl	803bd80 <memcpy>
 802306e:	687b      	ldr	r3, [r7, #4]
 8023070:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8023074:	461a      	mov	r2, r3
 8023076:	683b      	ldr	r3, [r7, #0]
 8023078:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802307c:	f8b3 3948 	ldrh.w	r3, [r3, #2376]	; 0x948
 8023080:	f8a2 3948 	strh.w	r3, [r2, #2376]	; 0x948
 8023084:	687b      	ldr	r3, [r7, #4]
 8023086:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802308a:	4619      	mov	r1, r3
 802308c:	683b      	ldr	r3, [r7, #0]
 802308e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8023092:	461a      	mov	r2, r3
 8023094:	f601 134c 	addw	r3, r1, #2380	; 0x94c
 8023098:	f602 114c 	addw	r1, r2, #2380	; 0x94c
 802309c:	4a25      	ldr	r2, [pc, #148]	; (8023134 <_ZN18MotherboardContextaSEOS_+0xf8>)
 802309e:	4618      	mov	r0, r3
 80230a0:	f018 fe6e 	bl	803bd80 <memcpy>
 80230a4:	687a      	ldr	r2, [r7, #4]
 80230a6:	4b24      	ldr	r3, [pc, #144]	; (8023138 <_ZN18MotherboardContextaSEOS_+0xfc>)
 80230a8:	4413      	add	r3, r2
 80230aa:	6839      	ldr	r1, [r7, #0]
 80230ac:	4a22      	ldr	r2, [pc, #136]	; (8023138 <_ZN18MotherboardContextaSEOS_+0xfc>)
 80230ae:	440a      	add	r2, r1
 80230b0:	4611      	mov	r1, r2
 80230b2:	4618      	mov	r0, r3
 80230b4:	f7ff ff52 	bl	8022f5c <_ZN17IMUFrameContaineraSEOS_>
 80230b8:	687a      	ldr	r2, [r7, #4]
 80230ba:	4b20      	ldr	r3, [pc, #128]	; (802313c <_ZN18MotherboardContextaSEOS_+0x100>)
 80230bc:	4413      	add	r3, r2
 80230be:	6839      	ldr	r1, [r7, #0]
 80230c0:	4a1e      	ldr	r2, [pc, #120]	; (802313c <_ZN18MotherboardContextaSEOS_+0x100>)
 80230c2:	440a      	add	r2, r1
 80230c4:	4611      	mov	r1, r2
 80230c6:	4618      	mov	r0, r3
 80230c8:	f7ff ff60 	bl	8022f8c <_ZN12IMUFrameMemoaSEOS_>
 80230cc:	687b      	ldr	r3, [r7, #4]
 80230ce:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 80230d2:	4619      	mov	r1, r3
 80230d4:	683b      	ldr	r3, [r7, #0]
 80230d6:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 80230da:	461a      	mov	r2, r3
 80230dc:	f501 73d0 	add.w	r3, r1, #416	; 0x1a0
 80230e0:	f502 71d0 	add.w	r1, r2, #416	; 0x1a0
 80230e4:	f241 1254 	movw	r2, #4436	; 0x1154
 80230e8:	4618      	mov	r0, r3
 80230ea:	f018 fe49 	bl	803bd80 <memcpy>
 80230ee:	687a      	ldr	r2, [r7, #4]
 80230f0:	4b13      	ldr	r3, [pc, #76]	; (8023140 <_ZN18MotherboardContextaSEOS_+0x104>)
 80230f2:	4413      	add	r3, r2
 80230f4:	6839      	ldr	r1, [r7, #0]
 80230f6:	4a12      	ldr	r2, [pc, #72]	; (8023140 <_ZN18MotherboardContextaSEOS_+0x104>)
 80230f8:	440a      	add	r2, r1
 80230fa:	4611      	mov	r1, r2
 80230fc:	4618      	mov	r0, r3
 80230fe:	f7ff ff6d 	bl	8022fdc <_ZN20StrobeDurationFilteraSEOS_>
 8023102:	683b      	ldr	r3, [r7, #0]
 8023104:	f503 3310 	add.w	r3, r3, #147456	; 0x24000
 8023108:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 802310c:	687a      	ldr	r2, [r7, #4]
 802310e:	f502 3210 	add.w	r2, r2, #147456	; 0x24000
 8023112:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
 8023116:	683b      	ldr	r3, [r7, #0]
 8023118:	f503 3310 	add.w	r3, r3, #147456	; 0x24000
 802311c:	f893 2344 	ldrb.w	r2, [r3, #836]	; 0x344
 8023120:	687b      	ldr	r3, [r7, #4]
 8023122:	f503 3310 	add.w	r3, r3, #147456	; 0x24000
 8023126:	f883 2344 	strb.w	r2, [r3, #836]	; 0x344
 802312a:	687b      	ldr	r3, [r7, #4]
 802312c:	4618      	mov	r0, r3
 802312e:	3708      	adds	r7, #8
 8023130:	46bd      	mov	sp, r7
 8023132:	bd80      	pop	{r7, pc}
 8023134:	000217f4 	.word	0x000217f4
 8023138:	00023140 	.word	0x00023140
 802313c:	00023170 	.word	0x00023170
 8023140:	000242fc 	.word	0x000242fc

08023144 <MotherboardInit>:
};

static MotherboardContext mbctx;

int MotherboardInit(MotherboardConfig conf) {
 8023144:	b084      	sub	sp, #16
 8023146:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023148:	f5ad 3d10 	sub.w	sp, sp, #147456	; 0x24000
 802314c:	f5ad 7d59 	sub.w	sp, sp, #868	; 0x364
 8023150:	af06      	add	r7, sp, #24
 8023152:	4c20      	ldr	r4, [pc, #128]	; (80231d4 <MotherboardInit+0x90>)
 8023154:	443c      	add	r4, r7
 8023156:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	mbctx = MotherboardContext { conf };
 802315a:	4e1f      	ldr	r6, [pc, #124]	; (80231d8 <MotherboardInit+0x94>)
 802315c:	4b1f      	ldr	r3, [pc, #124]	; (80231dc <MotherboardInit+0x98>)
 802315e:	4433      	add	r3, r6
 8023160:	19de      	adds	r6, r3, r7
 8023162:	466d      	mov	r5, sp
 8023164:	4c1e      	ldr	r4, [pc, #120]	; (80231e0 <MotherboardInit+0x9c>)
 8023166:	443c      	add	r4, r7
 8023168:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 802316a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 802316c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8023170:	e885 0003 	stmia.w	r5, {r0, r1}
 8023174:	4b17      	ldr	r3, [pc, #92]	; (80231d4 <MotherboardInit+0x90>)
 8023176:	443b      	add	r3, r7
 8023178:	cb0e      	ldmia	r3, {r1, r2, r3}
 802317a:	4630      	mov	r0, r6
 802317c:	f7ff fdb8 	bl	8022cf0 <_ZN18MotherboardContextC1E17MotherboardConfig>
 8023180:	4b15      	ldr	r3, [pc, #84]	; (80231d8 <MotherboardInit+0x94>)
 8023182:	f503 3310 	add.w	r3, r3, #147456	; 0x24000
 8023186:	f503 7352 	add.w	r3, r3, #840	; 0x348
 802318a:	443b      	add	r3, r7
 802318c:	4619      	mov	r1, r3
 802318e:	4815      	ldr	r0, [pc, #84]	; (80231e4 <MotherboardInit+0xa0>)
 8023190:	f7ff ff54 	bl	802303c <_ZN18MotherboardContextaSEOS_>
 8023194:	4b10      	ldr	r3, [pc, #64]	; (80231d8 <MotherboardInit+0x94>)
 8023196:	f503 3310 	add.w	r3, r3, #147456	; 0x24000
 802319a:	f503 7352 	add.w	r3, r3, #840	; 0x348
 802319e:	443b      	add	r3, r7
 80231a0:	4618      	mov	r0, r3
 80231a2:	f7ff feb9 	bl	8022f18 <_ZN18MotherboardContextD1Ev>

	mbctx.HeadService.ResetReadState();
 80231a6:	480f      	ldr	r0, [pc, #60]	; (80231e4 <MotherboardInit+0xa0>)
 80231a8:	f7fe fd3e 	bl	8021c28 <_ZN13HeadInterface14ResetReadStateEv>
	mbctx.HeadStream.ResetReadState();
 80231ac:	480e      	ldr	r0, [pc, #56]	; (80231e8 <MotherboardInit+0xa4>)
 80231ae:	f7fe fd3b 	bl	8021c28 <_ZN13HeadInterface14ResetReadStateEv>
	return mbctx.IMU.Init(800, 0);
 80231b2:	2100      	movs	r1, #0
 80231b4:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 80231ec <MotherboardInit+0xa8>
 80231b8:	480d      	ldr	r0, [pc, #52]	; (80231f0 <MotherboardInit+0xac>)
 80231ba:	f7fd fa87 	bl	80206cc <_ZN10BHYWrapper4InitEfm>
 80231be:	4603      	mov	r3, r0
}
 80231c0:	4618      	mov	r0, r3
 80231c2:	f507 3710 	add.w	r7, r7, #147456	; 0x24000
 80231c6:	f507 7753 	add.w	r7, r7, #844	; 0x34c
 80231ca:	46bd      	mov	sp, r7
 80231cc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80231d0:	b004      	add	sp, #16
 80231d2:	4770      	bx	lr
 80231d4:	00024360 	.word	0x00024360
 80231d8:	fffdbcb8 	.word	0xfffdbcb8
 80231dc:	00024348 	.word	0x00024348
 80231e0:	0002436c 	.word	0x0002436c
 80231e4:	240001d0 	.word	0x240001d0
 80231e8:	24000e74 	.word	0x24000e74
 80231ec:	44480000 	.word	0x44480000
 80231f0:	24023370 	.word	0x24023370

080231f4 <MotherboardTick>:

int MotherboardTick() {
 80231f4:	b580      	push	{r7, lr}
 80231f6:	f5ad 6d8c 	sub.w	sp, sp, #1120	; 0x460
 80231fa:	af04      	add	r7, sp, #16
	if (mbctx.StrobeFilter.HasStrobe()) {
 80231fc:	485f      	ldr	r0, [pc, #380]	; (802337c <MotherboardTick+0x188>)
 80231fe:	f7ff f88f 	bl	8022320 <_ZNK20StrobeDurationFilter9HasStrobeEv>
 8023202:	4603      	mov	r3, r0
 8023204:	2b00      	cmp	r3, #0
 8023206:	d026      	beq.n	8023256 <MotherboardTick+0x62>
		size_t targetSeq = mbctx.StrobeFilter.GetStrobe() + mbctx.StrobeOffset;
 8023208:	485c      	ldr	r0, [pc, #368]	; (802337c <MotherboardTick+0x188>)
 802320a:	f7ff f867 	bl	80222dc <_ZNK20StrobeDurationFilter9GetStrobeEv>
 802320e:	4602      	mov	r2, r0
 8023210:	4b5b      	ldr	r3, [pc, #364]	; (8023380 <MotherboardTick+0x18c>)
 8023212:	f503 3310 	add.w	r3, r3, #147456	; 0x24000
 8023216:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 802321a:	4413      	add	r3, r2
 802321c:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
		if (mbctx.FrameMemo.Has(targetSeq)) {
 8023220:	f8d7 144c 	ldr.w	r1, [r7, #1100]	; 0x44c
 8023224:	4857      	ldr	r0, [pc, #348]	; (8023384 <MotherboardTick+0x190>)
 8023226:	f7ff fbdd 	bl	80229e4 <_ZNK12IMUFrameMemo3HasEj>
 802322a:	4603      	mov	r3, r0
 802322c:	2b00      	cmp	r3, #0
 802322e:	d012      	beq.n	8023256 <MotherboardTick+0x62>
			mbctx.FrameContainer.Add(mbctx.FrameMemo.Get(targetSeq));
 8023230:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8023234:	f5a3 7351 	sub.w	r3, r3, #836	; 0x344
 8023238:	f8d7 244c 	ldr.w	r2, [r7, #1100]	; 0x44c
 802323c:	4951      	ldr	r1, [pc, #324]	; (8023384 <MotherboardTick+0x190>)
 802323e:	4618      	mov	r0, r3
 8023240:	f7ff fbf6 	bl	8022a30 <_ZNK12IMUFrameMemo3GetEj>
 8023244:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8023248:	4619      	mov	r1, r3
 802324a:	484f      	ldr	r0, [pc, #316]	; (8023388 <MotherboardTick+0x194>)
 802324c:	f7fe ff18 	bl	8022080 <_ZN17IMUFrameContainer3AddERKN10BHYWrapper8BHYFrameE>
			mbctx.StrobeFilter.PopStrobe();
 8023250:	484a      	ldr	r0, [pc, #296]	; (802337c <MotherboardTick+0x188>)
 8023252:	f7ff f876 	bl	8022342 <_ZN20StrobeDurationFilter9PopStrobeEv>
		}
	}

	if (mbctx.UpdateIMU && mbctx.IMU.Poll()) {
 8023256:	4b4a      	ldr	r3, [pc, #296]	; (8023380 <MotherboardTick+0x18c>)
 8023258:	f503 3310 	add.w	r3, r3, #147456	; 0x24000
 802325c:	f893 3344 	ldrb.w	r3, [r3, #836]	; 0x344
 8023260:	2b00      	cmp	r3, #0
 8023262:	d007      	beq.n	8023274 <MotherboardTick+0x80>
 8023264:	4849      	ldr	r0, [pc, #292]	; (802338c <MotherboardTick+0x198>)
 8023266:	f7fd fb89 	bl	802097c <_ZN10BHYWrapper4PollEv>
 802326a:	4603      	mov	r3, r0
 802326c:	2b00      	cmp	r3, #0
 802326e:	d001      	beq.n	8023274 <MotherboardTick+0x80>
 8023270:	2301      	movs	r3, #1
 8023272:	e000      	b.n	8023276 <MotherboardTick+0x82>
 8023274:	2300      	movs	r3, #0
 8023276:	2b00      	cmp	r3, #0
 8023278:	d017      	beq.n	80232aa <MotherboardTick+0xb6>
		mbctx.FrameMemo.Add(mbctx.IMU.GetFrame(), mbctx.IMU.GetSeq());
 802327a:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 802327e:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 8023282:	4942      	ldr	r1, [pc, #264]	; (802338c <MotherboardTick+0x198>)
 8023284:	4618      	mov	r0, r3
 8023286:	f7fd fbbd 	bl	8020a04 <_ZNK10BHYWrapper8GetFrameEv>
 802328a:	4840      	ldr	r0, [pc, #256]	; (802338c <MotherboardTick+0x198>)
 802328c:	f7fd fcc2 	bl	8020c14 <_ZNK10BHYWrapper6GetSeqEv>
 8023290:	4602      	mov	r2, r0
 8023292:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8023296:	4619      	mov	r1, r3
 8023298:	483a      	ldr	r0, [pc, #232]	; (8023384 <MotherboardTick+0x190>)
 802329a:	f7ff fb73 	bl	8022984 <_ZN12IMUFrameMemo3AddERKN10BHYWrapper8BHYFrameEj>
		mbctx.UpdateIMU = false;
 802329e:	4b38      	ldr	r3, [pc, #224]	; (8023380 <MotherboardTick+0x18c>)
 80232a0:	f503 3310 	add.w	r3, r3, #147456	; 0x24000
 80232a4:	2200      	movs	r2, #0
 80232a6:	f883 2344 	strb.w	r2, [r3, #836]	; 0x344
	}

	if (mbctx.HeadService.HasRequest()) {
 80232aa:	4835      	ldr	r0, [pc, #212]	; (8023380 <MotherboardTick+0x18c>)
 80232ac:	f7fe fce2 	bl	8021c74 <_ZNK13HeadInterface10HasRequestEv>
 80232b0:	4603      	mov	r3, r0
 80232b2:	2b00      	cmp	r3, #0
 80232b4:	d042      	beq.n	802333c <MotherboardTick+0x148>
		Request request = mbctx.HeadService.GetRequest();
 80232b6:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 80232ba:	f5a3 638a 	sub.w	r3, r3, #1104	; 0x450
 80232be:	4930      	ldr	r1, [pc, #192]	; (8023380 <MotherboardTick+0x18c>)
 80232c0:	4618      	mov	r0, r3
 80232c2:	f7fe fd67 	bl	8021d94 <_ZN13HeadInterface10GetRequestEv>

		switch (request.PeripheryID) {
 80232c6:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 80232ca:	f5a3 638a 	sub.w	r3, r3, #1104	; 0x450
 80232ce:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
 80232d2:	2b02      	cmp	r3, #2
 80232d4:	d006      	beq.n	80232e4 <MotherboardTick+0xf0>
 80232d6:	2b02      	cmp	r3, #2
 80232d8:	dc30      	bgt.n	802333c <MotherboardTick+0x148>
 80232da:	2b00      	cmp	r3, #0
 80232dc:	d012      	beq.n	8023304 <MotherboardTick+0x110>
 80232de:	2b01      	cmp	r3, #1
 80232e0:	d016      	beq.n	8023310 <MotherboardTick+0x11c>
 80232e2:	e02b      	b.n	802333c <MotherboardTick+0x148>
		case Periphery::Ack:
			mbctx.HeadService.Send(mbctx.AckHandler.Handle(request));
 80232e4:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 80232e8:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 80232ec:	463a      	mov	r2, r7
 80232ee:	4928      	ldr	r1, [pc, #160]	; (8023390 <MotherboardTick+0x19c>)
 80232f0:	4618      	mov	r0, r3
 80232f2:	f7ff fc35 	bl	8022b60 <_ZN18AcknowledgeHandler6HandleERK7Request>
 80232f6:	f507 739a 	add.w	r3, r7, #308	; 0x134
 80232fa:	4619      	mov	r1, r3
 80232fc:	4820      	ldr	r0, [pc, #128]	; (8023380 <MotherboardTick+0x18c>)
 80232fe:	f7fe fcc9 	bl	8021c94 <_ZN13HeadInterface4SendERK8Responce>
			break;
 8023302:	e01b      	b.n	802333c <MotherboardTick+0x148>

		case Periphery::Body:
			mbctx.Body.AddRequest(request);
 8023304:	463b      	mov	r3, r7
 8023306:	4619      	mov	r1, r3
 8023308:	4822      	ldr	r0, [pc, #136]	; (8023394 <MotherboardTick+0x1a0>)
 802330a:	f7fd fed1 	bl	80210b0 <_ZN11QueueSender10AddRequestERK7Request>
			break;
 802330e:	e015      	b.n	802333c <MotherboardTick+0x148>
		case Periphery::Imu:
			mbctx.HeadService.Send(
					mbctx.IMUHandler.Handle(request, mbctx.FrameContainer,
							mbctx.IMU, mbctx.StrobeOffset, mbctx.StrobeFilter));
 8023310:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8023314:	f5a3 7005 	sub.w	r0, r3, #532	; 0x214
 8023318:	463a      	mov	r2, r7
 802331a:	4b18      	ldr	r3, [pc, #96]	; (802337c <MotherboardTick+0x188>)
 802331c:	9302      	str	r3, [sp, #8]
 802331e:	4b1e      	ldr	r3, [pc, #120]	; (8023398 <MotherboardTick+0x1a4>)
 8023320:	9301      	str	r3, [sp, #4]
 8023322:	4b1a      	ldr	r3, [pc, #104]	; (802338c <MotherboardTick+0x198>)
 8023324:	9300      	str	r3, [sp, #0]
 8023326:	4b18      	ldr	r3, [pc, #96]	; (8023388 <MotherboardTick+0x194>)
 8023328:	491c      	ldr	r1, [pc, #112]	; (802339c <MotherboardTick+0x1a8>)
 802332a:	f7ff fab9 	bl	80228a0 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter>
			mbctx.HeadService.Send(
 802332e:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 8023332:	4619      	mov	r1, r3
 8023334:	4812      	ldr	r0, [pc, #72]	; (8023380 <MotherboardTick+0x18c>)
 8023336:	f7fe fcad 	bl	8021c94 <_ZN13HeadInterface4SendERK8Responce>
			break;
 802333a:	bf00      	nop
		}
	}

	if (mbctx.Body.HasResponce()) {
 802333c:	4815      	ldr	r0, [pc, #84]	; (8023394 <MotherboardTick+0x1a0>)
 802333e:	f7fd ff69 	bl	8021214 <_ZNK11QueueSender11HasResponceEv>
 8023342:	4603      	mov	r3, r0
 8023344:	2b00      	cmp	r3, #0
 8023346:	d00d      	beq.n	8023364 <MotherboardTick+0x170>
		mbctx.HeadService.Send(mbctx.Body.GetResponce());
 8023348:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 802334c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8023350:	4910      	ldr	r1, [pc, #64]	; (8023394 <MotherboardTick+0x1a0>)
 8023352:	4618      	mov	r0, r3
 8023354:	f7fd ffc0 	bl	80212d8 <_ZN11QueueSender11GetResponceEv>
 8023358:	f507 7351 	add.w	r3, r7, #836	; 0x344
 802335c:	4619      	mov	r1, r3
 802335e:	4808      	ldr	r0, [pc, #32]	; (8023380 <MotherboardTick+0x18c>)
 8023360:	f7fe fc98 	bl	8021c94 <_ZN13HeadInterface4SendERK8Responce>
	}

	mbctx.Body.ProcessPriorityRequest();
 8023364:	480b      	ldr	r0, [pc, #44]	; (8023394 <MotherboardTick+0x1a0>)
 8023366:	f7fd ffeb 	bl	8021340 <_ZN11QueueSender22ProcessPriorityRequestEv>
	mbctx.Body.ProcessRequests();
 802336a:	480a      	ldr	r0, [pc, #40]	; (8023394 <MotherboardTick+0x1a0>)
 802336c:	f7fe f902 	bl	8021574 <_ZN11QueueSender15ProcessRequestsEv>

	return 0;
 8023370:	2300      	movs	r3, #0
}
 8023372:	4618      	mov	r0, r3
 8023374:	f507 678a 	add.w	r7, r7, #1104	; 0x450
 8023378:	46bd      	mov	sp, r7
 802337a:	bd80      	pop	{r7, pc}
 802337c:	240244cc 	.word	0x240244cc
 8023380:	240001d0 	.word	0x240001d0
 8023384:	24023340 	.word	0x24023340
 8023388:	24023310 	.word	0x24023310
 802338c:	24023370 	.word	0x24023370
 8023390:	24001b18 	.word	0x24001b18
 8023394:	24001b1c 	.word	0x24001b1c
 8023398:	24024510 	.word	0x24024510
 802339c:	240244c8 	.word	0x240244c8

080233a0 <MotherboardOnStrobe>:

void MotherboardOnStrobe() {
 80233a0:	b580      	push	{r7, lr}
 80233a2:	af00      	add	r7, sp, #0
	static bool firstEntry = true;
	if (firstEntry) {
 80233a4:	4b06      	ldr	r3, [pc, #24]	; (80233c0 <MotherboardOnStrobe+0x20>)
 80233a6:	781b      	ldrb	r3, [r3, #0]
 80233a8:	2b00      	cmp	r3, #0
 80233aa:	d003      	beq.n	80233b4 <MotherboardOnStrobe+0x14>
		firstEntry = false;
 80233ac:	4b04      	ldr	r3, [pc, #16]	; (80233c0 <MotherboardOnStrobe+0x20>)
 80233ae:	2200      	movs	r2, #0
 80233b0:	701a      	strb	r2, [r3, #0]
		return;
 80233b2:	e003      	b.n	80233bc <MotherboardOnStrobe+0x1c>
	}

	mbctx.StrobeFilter.ProcessStrobe(mbctx.IMU);
 80233b4:	4903      	ldr	r1, [pc, #12]	; (80233c4 <MotherboardOnStrobe+0x24>)
 80233b6:	4804      	ldr	r0, [pc, #16]	; (80233c8 <MotherboardOnStrobe+0x28>)
 80233b8:	f7fe fef9 	bl	80221ae <_ZN20StrobeDurationFilter13ProcessStrobeERK10BHYWrapper>
}
 80233bc:	bd80      	pop	{r7, pc}
 80233be:	bf00      	nop
 80233c0:	24000000 	.word	0x24000000
 80233c4:	24023370 	.word	0x24023370
 80233c8:	240244cc 	.word	0x240244cc

080233cc <MotherboardOnBodyRecieveComplete>:

void MotherboardOnBodyRecieveComplete() {
 80233cc:	b580      	push	{r7, lr}
 80233ce:	af00      	add	r7, sp, #0
	mbctx.Body.ProcessResponces();
 80233d0:	4802      	ldr	r0, [pc, #8]	; (80233dc <MotherboardOnBodyRecieveComplete+0x10>)
 80233d2:	f7fe fbad 	bl	8021b30 <_ZN11QueueSender16ProcessResponcesEv>
}
 80233d6:	bf00      	nop
 80233d8:	bd80      	pop	{r7, pc}
 80233da:	bf00      	nop
 80233dc:	24001b1c 	.word	0x24001b1c

080233e0 <MotherboardOnHeadServiceRecieveComplete>:

void MotherboardOnHeadServiceRecieveComplete() {
 80233e0:	b580      	push	{r7, lr}
 80233e2:	af00      	add	r7, sp, #0
	mbctx.HeadService.ProcessRecievedData();
 80233e4:	4802      	ldr	r0, [pc, #8]	; (80233f0 <MotherboardOnHeadServiceRecieveComplete+0x10>)
 80233e6:	f7fe fd11 	bl	8021e0c <_ZN13HeadInterface19ProcessRecievedDataEv>
}
 80233ea:	bf00      	nop
 80233ec:	bd80      	pop	{r7, pc}
 80233ee:	bf00      	nop
 80233f0:	240001d0 	.word	0x240001d0

080233f4 <MotherboardOnHeadStreamRecieveComplete>:

void MotherboardOnHeadStreamRecieveComplete() {
 80233f4:	b580      	push	{r7, lr}
 80233f6:	af00      	add	r7, sp, #0
	mbctx.HeadStream.ProcessRecievedData();
 80233f8:	4802      	ldr	r0, [pc, #8]	; (8023404 <MotherboardOnHeadStreamRecieveComplete+0x10>)
 80233fa:	f7fe fd07 	bl	8021e0c <_ZN13HeadInterface19ProcessRecievedDataEv>
}
 80233fe:	bf00      	nop
 8023400:	bd80      	pop	{r7, pc}
 8023402:	bf00      	nop
 8023404:	24000e74 	.word	0x24000e74

08023408 <MotherboardOnHeadServiceTransmitComplete>:

void MotherboardOnHeadServiceTransmitComplete() {
 8023408:	b580      	push	{r7, lr}
 802340a:	af00      	add	r7, sp, #0
	mbctx.HeadService.FinishTransmit();
 802340c:	4802      	ldr	r0, [pc, #8]	; (8023418 <MotherboardOnHeadServiceTransmitComplete+0x10>)
 802340e:	f7fe fcef 	bl	8021df0 <_ZN13HeadInterface14FinishTransmitEv>
}
 8023412:	bf00      	nop
 8023414:	bd80      	pop	{r7, pc}
 8023416:	bf00      	nop
 8023418:	240001d0 	.word	0x240001d0

0802341c <MotherboardOnHeadStreamTransmitComplete>:

void MotherboardOnHeadStreamTransmitComplete() {
 802341c:	b580      	push	{r7, lr}
 802341e:	af00      	add	r7, sp, #0
	mbctx.HeadStream.FinishTransmit();
 8023420:	4802      	ldr	r0, [pc, #8]	; (802342c <MotherboardOnHeadStreamTransmitComplete+0x10>)
 8023422:	f7fe fce5 	bl	8021df0 <_ZN13HeadInterface14FinishTransmitEv>
}
 8023426:	bf00      	nop
 8023428:	bd80      	pop	{r7, pc}
 802342a:	bf00      	nop
 802342c:	24000e74 	.word	0x24000e74

08023430 <MotherboardOnBodyTransmitComplete>:

void MotherboardOnBodyTransmitComplete() {
 8023430:	b580      	push	{r7, lr}
 8023432:	af00      	add	r7, sp, #0
	mbctx.Body.FinishTransmit();
 8023434:	4802      	ldr	r0, [pc, #8]	; (8023440 <MotherboardOnBodyTransmitComplete+0x10>)
 8023436:	f7fe fb85 	bl	8021b44 <_ZN11QueueSender14FinishTransmitEv>
}
 802343a:	bf00      	nop
 802343c:	bd80      	pop	{r7, pc}
 802343e:	bf00      	nop
 8023440:	24001b1c 	.word	0x24001b1c

08023444 <MotherboardOnBodyTimerTick>:
void MotherboardOnBodyTimerTick() {
 8023444:	b580      	push	{r7, lr}
 8023446:	af00      	add	r7, sp, #0
	mbctx.Body.TickTimer();
 8023448:	4802      	ldr	r0, [pc, #8]	; (8023454 <MotherboardOnBodyTimerTick+0x10>)
 802344a:	f7fd fef7 	bl	802123c <_ZN11QueueSender9TickTimerEv>
}
 802344e:	bf00      	nop
 8023450:	bd80      	pop	{r7, pc}
 8023452:	bf00      	nop
 8023454:	24001b1c 	.word	0x24001b1c

08023458 <MotherboardOnImuTimerTick>:

void MotherboardOnImuTimerTick() {
 8023458:	b480      	push	{r7}
 802345a:	af00      	add	r7, sp, #0
	mbctx.UpdateIMU = true;
 802345c:	4b05      	ldr	r3, [pc, #20]	; (8023474 <MotherboardOnImuTimerTick+0x1c>)
 802345e:	f503 3310 	add.w	r3, r3, #147456	; 0x24000
 8023462:	2201      	movs	r2, #1
 8023464:	f883 2344 	strb.w	r2, [r3, #836]	; 0x344
}
 8023468:	bf00      	nop
 802346a:	46bd      	mov	sp, r7
 802346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023470:	4770      	bx	lr
 8023472:	bf00      	nop
 8023474:	240001d0 	.word	0x240001d0

08023478 <_ZN10FixedQueueI8ResponceLj10EE4PushERKS0_>:
	bool Push(const T &rhs) {
 8023478:	b580      	push	{r7, lr}
 802347a:	b082      	sub	sp, #8
 802347c:	af00      	add	r7, sp, #0
 802347e:	6078      	str	r0, [r7, #4]
 8023480:	6039      	str	r1, [r7, #0]
		assert(Size != Capacity);
 8023482:	687b      	ldr	r3, [r7, #4]
 8023484:	681b      	ldr	r3, [r3, #0]
 8023486:	2b0a      	cmp	r3, #10
 8023488:	d105      	bne.n	8023496 <_ZN10FixedQueueI8ResponceLj10EE4PushERKS0_+0x1e>
 802348a:	4b18      	ldr	r3, [pc, #96]	; (80234ec <_ZN10FixedQueueI8ResponceLj10EE4PushERKS0_+0x74>)
 802348c:	4a18      	ldr	r2, [pc, #96]	; (80234f0 <_ZN10FixedQueueI8ResponceLj10EE4PushERKS0_+0x78>)
 802348e:	2142      	movs	r1, #66	; 0x42
 8023490:	4818      	ldr	r0, [pc, #96]	; (80234f4 <_ZN10FixedQueueI8ResponceLj10EE4PushERKS0_+0x7c>)
 8023492:	f018 fc0b 	bl	803bcac <__assert_func>
		Buffer[Head] = rhs;
 8023496:	687b      	ldr	r3, [r7, #4]
 8023498:	f103 020c 	add.w	r2, r3, #12
 802349c:	687b      	ldr	r3, [r7, #4]
 802349e:	685b      	ldr	r3, [r3, #4]
 80234a0:	4619      	mov	r1, r3
 80234a2:	4610      	mov	r0, r2
 80234a4:	f000 fbee 	bl	8023c84 <_ZNSt5arrayI8ResponceLj10EEixEj>
 80234a8:	4602      	mov	r2, r0
 80234aa:	683b      	ldr	r3, [r7, #0]
 80234ac:	4610      	mov	r0, r2
 80234ae:	4619      	mov	r1, r3
 80234b0:	f44f 7384 	mov.w	r3, #264	; 0x108
 80234b4:	461a      	mov	r2, r3
 80234b6:	f018 fc63 	bl	803bd80 <memcpy>
		Head = (Head + 1) % Capacity;
 80234ba:	687b      	ldr	r3, [r7, #4]
 80234bc:	685b      	ldr	r3, [r3, #4]
 80234be:	1c59      	adds	r1, r3, #1
 80234c0:	4b0d      	ldr	r3, [pc, #52]	; (80234f8 <_ZN10FixedQueueI8ResponceLj10EE4PushERKS0_+0x80>)
 80234c2:	fba3 2301 	umull	r2, r3, r3, r1
 80234c6:	08da      	lsrs	r2, r3, #3
 80234c8:	4613      	mov	r3, r2
 80234ca:	009b      	lsls	r3, r3, #2
 80234cc:	4413      	add	r3, r2
 80234ce:	005b      	lsls	r3, r3, #1
 80234d0:	1aca      	subs	r2, r1, r3
 80234d2:	687b      	ldr	r3, [r7, #4]
 80234d4:	605a      	str	r2, [r3, #4]
		Size++;
 80234d6:	687b      	ldr	r3, [r7, #4]
 80234d8:	681b      	ldr	r3, [r3, #0]
 80234da:	1c5a      	adds	r2, r3, #1
 80234dc:	687b      	ldr	r3, [r7, #4]
 80234de:	601a      	str	r2, [r3, #0]
		return true;
 80234e0:	2301      	movs	r3, #1
	}
 80234e2:	4618      	mov	r0, r3
 80234e4:	3708      	adds	r7, #8
 80234e6:	46bd      	mov	sp, r7
 80234e8:	bd80      	pop	{r7, pc}
 80234ea:	bf00      	nop
 80234ec:	0803d9b8 	.word	0x0803d9b8
 80234f0:	0803d9cc 	.word	0x0803d9cc
 80234f4:	0803cf00 	.word	0x0803cf00
 80234f8:	cccccccd 	.word	0xcccccccd

080234fc <_ZNK10FixedQueueI8ResponceLj10EE5EmptyEv>:
	bool Empty() const {
 80234fc:	b480      	push	{r7}
 80234fe:	b083      	sub	sp, #12
 8023500:	af00      	add	r7, sp, #0
 8023502:	6078      	str	r0, [r7, #4]
		return Size == 0;
 8023504:	687b      	ldr	r3, [r7, #4]
 8023506:	681b      	ldr	r3, [r3, #0]
 8023508:	2b00      	cmp	r3, #0
 802350a:	bf0c      	ite	eq
 802350c:	2301      	moveq	r3, #1
 802350e:	2300      	movne	r3, #0
 8023510:	b2db      	uxtb	r3, r3
	}
 8023512:	4618      	mov	r0, r3
 8023514:	370c      	adds	r7, #12
 8023516:	46bd      	mov	sp, r7
 8023518:	f85d 7b04 	ldr.w	r7, [sp], #4
 802351c:	4770      	bx	lr
	...

08023520 <_ZNK10FixedQueueI8ResponceLj10EE5FrontEv>:
	const T& Front() const {
 8023520:	b580      	push	{r7, lr}
 8023522:	b082      	sub	sp, #8
 8023524:	af00      	add	r7, sp, #0
 8023526:	6078      	str	r0, [r7, #4]
		assert(Size);
 8023528:	687b      	ldr	r3, [r7, #4]
 802352a:	681b      	ldr	r3, [r3, #0]
 802352c:	2b00      	cmp	r3, #0
 802352e:	d105      	bne.n	802353c <_ZNK10FixedQueueI8ResponceLj10EE5FrontEv+0x1c>
 8023530:	4b09      	ldr	r3, [pc, #36]	; (8023558 <_ZNK10FixedQueueI8ResponceLj10EE5FrontEv+0x38>)
 8023532:	4a0a      	ldr	r2, [pc, #40]	; (802355c <_ZNK10FixedQueueI8ResponceLj10EE5FrontEv+0x3c>)
 8023534:	2152      	movs	r1, #82	; 0x52
 8023536:	480a      	ldr	r0, [pc, #40]	; (8023560 <_ZNK10FixedQueueI8ResponceLj10EE5FrontEv+0x40>)
 8023538:	f018 fbb8 	bl	803bcac <__assert_func>
		return Buffer[Tail];
 802353c:	687b      	ldr	r3, [r7, #4]
 802353e:	f103 020c 	add.w	r2, r3, #12
 8023542:	687b      	ldr	r3, [r7, #4]
 8023544:	689b      	ldr	r3, [r3, #8]
 8023546:	4619      	mov	r1, r3
 8023548:	4610      	mov	r0, r2
 802354a:	f000 fbaa 	bl	8023ca2 <_ZNKSt5arrayI8ResponceLj10EEixEj>
 802354e:	4603      	mov	r3, r0
	}
 8023550:	4618      	mov	r0, r3
 8023552:	3708      	adds	r7, #8
 8023554:	46bd      	mov	sp, r7
 8023556:	bd80      	pop	{r7, pc}
 8023558:	0803da2c 	.word	0x0803da2c
 802355c:	0803da34 	.word	0x0803da34
 8023560:	0803cf00 	.word	0x0803cf00

08023564 <_ZN10FixedQueueI8ResponceLj10EE3PopEv>:
	bool Pop() {
 8023564:	b580      	push	{r7, lr}
 8023566:	b082      	sub	sp, #8
 8023568:	af00      	add	r7, sp, #0
 802356a:	6078      	str	r0, [r7, #4]
		assert(Size != 0);
 802356c:	687b      	ldr	r3, [r7, #4]
 802356e:	681b      	ldr	r3, [r3, #0]
 8023570:	2b00      	cmp	r3, #0
 8023572:	d105      	bne.n	8023580 <_ZN10FixedQueueI8ResponceLj10EE3PopEv+0x1c>
 8023574:	4b0e      	ldr	r3, [pc, #56]	; (80235b0 <_ZN10FixedQueueI8ResponceLj10EE3PopEv+0x4c>)
 8023576:	4a0f      	ldr	r2, [pc, #60]	; (80235b4 <_ZN10FixedQueueI8ResponceLj10EE3PopEv+0x50>)
 8023578:	214c      	movs	r1, #76	; 0x4c
 802357a:	480f      	ldr	r0, [pc, #60]	; (80235b8 <_ZN10FixedQueueI8ResponceLj10EE3PopEv+0x54>)
 802357c:	f018 fb96 	bl	803bcac <__assert_func>
		Tail = (Tail + 1) % Capacity;
 8023580:	687b      	ldr	r3, [r7, #4]
 8023582:	689b      	ldr	r3, [r3, #8]
 8023584:	1c59      	adds	r1, r3, #1
 8023586:	4b0d      	ldr	r3, [pc, #52]	; (80235bc <_ZN10FixedQueueI8ResponceLj10EE3PopEv+0x58>)
 8023588:	fba3 2301 	umull	r2, r3, r3, r1
 802358c:	08da      	lsrs	r2, r3, #3
 802358e:	4613      	mov	r3, r2
 8023590:	009b      	lsls	r3, r3, #2
 8023592:	4413      	add	r3, r2
 8023594:	005b      	lsls	r3, r3, #1
 8023596:	1aca      	subs	r2, r1, r3
 8023598:	687b      	ldr	r3, [r7, #4]
 802359a:	609a      	str	r2, [r3, #8]
		Size--;
 802359c:	687b      	ldr	r3, [r7, #4]
 802359e:	681b      	ldr	r3, [r3, #0]
 80235a0:	1e5a      	subs	r2, r3, #1
 80235a2:	687b      	ldr	r3, [r7, #4]
 80235a4:	601a      	str	r2, [r3, #0]
	}
 80235a6:	bf00      	nop
 80235a8:	4618      	mov	r0, r3
 80235aa:	3708      	adds	r7, #8
 80235ac:	46bd      	mov	sp, r7
 80235ae:	bd80      	pop	{r7, pc}
 80235b0:	0803da94 	.word	0x0803da94
 80235b4:	0803daa0 	.word	0x0803daa0
 80235b8:	0803cf00 	.word	0x0803cf00
 80235bc:	cccccccd 	.word	0xcccccccd

080235c0 <_ZNSt5arrayIhLj256EE4dataEv>:
      data() noexcept
 80235c0:	b580      	push	{r7, lr}
 80235c2:	b082      	sub	sp, #8
 80235c4:	af00      	add	r7, sp, #0
 80235c6:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 80235c8:	687b      	ldr	r3, [r7, #4]
 80235ca:	4618      	mov	r0, r3
 80235cc:	f000 fb78 	bl	8023cc0 <_ZNSt14__array_traitsIhLj256EE6_S_ptrERA256_Kh>
 80235d0:	4603      	mov	r3, r0
 80235d2:	4618      	mov	r0, r3
 80235d4:	3708      	adds	r7, #8
 80235d6:	46bd      	mov	sp, r7
 80235d8:	bd80      	pop	{r7, pc}

080235da <_ZNK10FixedQueueI7RequestLj500EE5EmptyEv>:
	bool Empty() const {
 80235da:	b480      	push	{r7}
 80235dc:	b083      	sub	sp, #12
 80235de:	af00      	add	r7, sp, #0
 80235e0:	6078      	str	r0, [r7, #4]
		return Size == 0;
 80235e2:	687b      	ldr	r3, [r7, #4]
 80235e4:	681b      	ldr	r3, [r3, #0]
 80235e6:	2b00      	cmp	r3, #0
 80235e8:	bf0c      	ite	eq
 80235ea:	2301      	moveq	r3, #1
 80235ec:	2300      	movne	r3, #0
 80235ee:	b2db      	uxtb	r3, r3
	}
 80235f0:	4618      	mov	r0, r3
 80235f2:	370c      	adds	r7, #12
 80235f4:	46bd      	mov	sp, r7
 80235f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80235fa:	4770      	bx	lr

080235fc <_ZNK10FixedQueueI7RequestLj500EE5FrontEv>:
	const T& Front() const {
 80235fc:	b580      	push	{r7, lr}
 80235fe:	b082      	sub	sp, #8
 8023600:	af00      	add	r7, sp, #0
 8023602:	6078      	str	r0, [r7, #4]
		assert(Size);
 8023604:	687b      	ldr	r3, [r7, #4]
 8023606:	681b      	ldr	r3, [r3, #0]
 8023608:	2b00      	cmp	r3, #0
 802360a:	d105      	bne.n	8023618 <_ZNK10FixedQueueI7RequestLj500EE5FrontEv+0x1c>
 802360c:	4b09      	ldr	r3, [pc, #36]	; (8023634 <_ZNK10FixedQueueI7RequestLj500EE5FrontEv+0x38>)
 802360e:	4a0a      	ldr	r2, [pc, #40]	; (8023638 <_ZNK10FixedQueueI7RequestLj500EE5FrontEv+0x3c>)
 8023610:	2152      	movs	r1, #82	; 0x52
 8023612:	480a      	ldr	r0, [pc, #40]	; (802363c <_ZNK10FixedQueueI7RequestLj500EE5FrontEv+0x40>)
 8023614:	f018 fb4a 	bl	803bcac <__assert_func>
		return Buffer[Tail];
 8023618:	687b      	ldr	r3, [r7, #4]
 802361a:	f103 020c 	add.w	r2, r3, #12
 802361e:	687b      	ldr	r3, [r7, #4]
 8023620:	689b      	ldr	r3, [r3, #8]
 8023622:	4619      	mov	r1, r3
 8023624:	4610      	mov	r0, r2
 8023626:	f000 fb56 	bl	8023cd6 <_ZNKSt5arrayI7RequestLj500EEixEj>
 802362a:	4603      	mov	r3, r0
	}
 802362c:	4618      	mov	r0, r3
 802362e:	3708      	adds	r7, #8
 8023630:	46bd      	mov	sp, r7
 8023632:	bd80      	pop	{r7, pc}
 8023634:	0803da2c 	.word	0x0803da2c
 8023638:	0803daf4 	.word	0x0803daf4
 802363c:	0803cf00 	.word	0x0803cf00

08023640 <_ZNKSt5arrayIhLj256EE4dataEv>:

      _GLIBCXX17_CONSTEXPR const_pointer
      data() const noexcept
 8023640:	b580      	push	{r7, lr}
 8023642:	b082      	sub	sp, #8
 8023644:	af00      	add	r7, sp, #0
 8023646:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8023648:	687b      	ldr	r3, [r7, #4]
 802364a:	4618      	mov	r0, r3
 802364c:	f000 fb38 	bl	8023cc0 <_ZNSt14__array_traitsIhLj256EE6_S_ptrERA256_Kh>
 8023650:	4603      	mov	r3, r0
 8023652:	4618      	mov	r0, r3
 8023654:	3708      	adds	r7, #8
 8023656:	46bd      	mov	sp, r7
 8023658:	bd80      	pop	{r7, pc}
	...

0802365c <_ZN10FixedQueueI7RequestLj500EE3PopEv>:
	bool Pop() {
 802365c:	b580      	push	{r7, lr}
 802365e:	b082      	sub	sp, #8
 8023660:	af00      	add	r7, sp, #0
 8023662:	6078      	str	r0, [r7, #4]
		assert(Size != 0);
 8023664:	687b      	ldr	r3, [r7, #4]
 8023666:	681b      	ldr	r3, [r3, #0]
 8023668:	2b00      	cmp	r3, #0
 802366a:	d105      	bne.n	8023678 <_ZN10FixedQueueI7RequestLj500EE3PopEv+0x1c>
 802366c:	4b0e      	ldr	r3, [pc, #56]	; (80236a8 <_ZN10FixedQueueI7RequestLj500EE3PopEv+0x4c>)
 802366e:	4a0f      	ldr	r2, [pc, #60]	; (80236ac <_ZN10FixedQueueI7RequestLj500EE3PopEv+0x50>)
 8023670:	214c      	movs	r1, #76	; 0x4c
 8023672:	480f      	ldr	r0, [pc, #60]	; (80236b0 <_ZN10FixedQueueI7RequestLj500EE3PopEv+0x54>)
 8023674:	f018 fb1a 	bl	803bcac <__assert_func>
		Tail = (Tail + 1) % Capacity;
 8023678:	687b      	ldr	r3, [r7, #4]
 802367a:	689b      	ldr	r3, [r3, #8]
 802367c:	1c5a      	adds	r2, r3, #1
 802367e:	4b0d      	ldr	r3, [pc, #52]	; (80236b4 <_ZN10FixedQueueI7RequestLj500EE3PopEv+0x58>)
 8023680:	fba3 1302 	umull	r1, r3, r3, r2
 8023684:	095b      	lsrs	r3, r3, #5
 8023686:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 802368a:	fb01 f303 	mul.w	r3, r1, r3
 802368e:	1ad3      	subs	r3, r2, r3
 8023690:	687a      	ldr	r2, [r7, #4]
 8023692:	6093      	str	r3, [r2, #8]
		Size--;
 8023694:	687b      	ldr	r3, [r7, #4]
 8023696:	681b      	ldr	r3, [r3, #0]
 8023698:	1e5a      	subs	r2, r3, #1
 802369a:	687b      	ldr	r3, [r7, #4]
 802369c:	601a      	str	r2, [r3, #0]
	}
 802369e:	bf00      	nop
 80236a0:	4618      	mov	r0, r3
 80236a2:	3708      	adds	r7, #8
 80236a4:	46bd      	mov	sp, r7
 80236a6:	bd80      	pop	{r7, pc}
 80236a8:	0803da94 	.word	0x0803da94
 80236ac:	0803db54 	.word	0x0803db54
 80236b0:	0803cf00 	.word	0x0803cf00
 80236b4:	10624dd3 	.word	0x10624dd3

080236b8 <_ZNSt14__array_traitsIhLj256EE6_S_refERA256_Khj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 80236b8:	b480      	push	{r7}
 80236ba:	b083      	sub	sp, #12
 80236bc:	af00      	add	r7, sp, #0
 80236be:	6078      	str	r0, [r7, #4]
 80236c0:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 80236c2:	687a      	ldr	r2, [r7, #4]
 80236c4:	683b      	ldr	r3, [r7, #0]
 80236c6:	4413      	add	r3, r2
 80236c8:	4618      	mov	r0, r3
 80236ca:	370c      	adds	r7, #12
 80236cc:	46bd      	mov	sp, r7
 80236ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80236d2:	4770      	bx	lr

080236d4 <_ZNK10FixedQueueI7RequestLj500EE4FullEv>:
	bool Full() const {
 80236d4:	b480      	push	{r7}
 80236d6:	b083      	sub	sp, #12
 80236d8:	af00      	add	r7, sp, #0
 80236da:	6078      	str	r0, [r7, #4]
		return Size == Capacity;
 80236dc:	687b      	ldr	r3, [r7, #4]
 80236de:	681b      	ldr	r3, [r3, #0]
 80236e0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80236e4:	bf0c      	ite	eq
 80236e6:	2301      	moveq	r3, #1
 80236e8:	2300      	movne	r3, #0
 80236ea:	b2db      	uxtb	r3, r3
	}
 80236ec:	4618      	mov	r0, r3
 80236ee:	370c      	adds	r7, #12
 80236f0:	46bd      	mov	sp, r7
 80236f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80236f6:	4770      	bx	lr

080236f8 <_ZN10FixedQueueI7RequestLj500EE4PushERKS0_>:
	bool Push(const T &rhs) {
 80236f8:	b580      	push	{r7, lr}
 80236fa:	b082      	sub	sp, #8
 80236fc:	af00      	add	r7, sp, #0
 80236fe:	6078      	str	r0, [r7, #4]
 8023700:	6039      	str	r1, [r7, #0]
		assert(Size != Capacity);
 8023702:	687b      	ldr	r3, [r7, #4]
 8023704:	681b      	ldr	r3, [r3, #0]
 8023706:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 802370a:	d105      	bne.n	8023718 <_ZN10FixedQueueI7RequestLj500EE4PushERKS0_+0x20>
 802370c:	4b17      	ldr	r3, [pc, #92]	; (802376c <_ZN10FixedQueueI7RequestLj500EE4PushERKS0_+0x74>)
 802370e:	4a18      	ldr	r2, [pc, #96]	; (8023770 <_ZN10FixedQueueI7RequestLj500EE4PushERKS0_+0x78>)
 8023710:	2142      	movs	r1, #66	; 0x42
 8023712:	4818      	ldr	r0, [pc, #96]	; (8023774 <_ZN10FixedQueueI7RequestLj500EE4PushERKS0_+0x7c>)
 8023714:	f018 faca 	bl	803bcac <__assert_func>
		Buffer[Head] = rhs;
 8023718:	687b      	ldr	r3, [r7, #4]
 802371a:	f103 020c 	add.w	r2, r3, #12
 802371e:	687b      	ldr	r3, [r7, #4]
 8023720:	685b      	ldr	r3, [r3, #4]
 8023722:	4619      	mov	r1, r3
 8023724:	4610      	mov	r0, r2
 8023726:	f000 fae5 	bl	8023cf4 <_ZNSt5arrayI7RequestLj500EEixEj>
 802372a:	4602      	mov	r2, r0
 802372c:	683b      	ldr	r3, [r7, #0]
 802372e:	4610      	mov	r0, r2
 8023730:	4619      	mov	r1, r3
 8023732:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8023736:	461a      	mov	r2, r3
 8023738:	f018 fb22 	bl	803bd80 <memcpy>
		Head = (Head + 1) % Capacity;
 802373c:	687b      	ldr	r3, [r7, #4]
 802373e:	685b      	ldr	r3, [r3, #4]
 8023740:	1c5a      	adds	r2, r3, #1
 8023742:	4b0d      	ldr	r3, [pc, #52]	; (8023778 <_ZN10FixedQueueI7RequestLj500EE4PushERKS0_+0x80>)
 8023744:	fba3 1302 	umull	r1, r3, r3, r2
 8023748:	095b      	lsrs	r3, r3, #5
 802374a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 802374e:	fb01 f303 	mul.w	r3, r1, r3
 8023752:	1ad3      	subs	r3, r2, r3
 8023754:	687a      	ldr	r2, [r7, #4]
 8023756:	6053      	str	r3, [r2, #4]
		Size++;
 8023758:	687b      	ldr	r3, [r7, #4]
 802375a:	681b      	ldr	r3, [r3, #0]
 802375c:	1c5a      	adds	r2, r3, #1
 802375e:	687b      	ldr	r3, [r7, #4]
 8023760:	601a      	str	r2, [r3, #0]
		return true;
 8023762:	2301      	movs	r3, #1
	}
 8023764:	4618      	mov	r0, r3
 8023766:	3708      	adds	r7, #8
 8023768:	46bd      	mov	sp, r7
 802376a:	bd80      	pop	{r7, pc}
 802376c:	0803d9b8 	.word	0x0803d9b8
 8023770:	0803dba8 	.word	0x0803dba8
 8023774:	0803cf00 	.word	0x0803cf00
 8023778:	10624dd3 	.word	0x10624dd3

0802377c <_ZNK10FixedQueueI7RequestLj500EE7GetSizeEv>:
	size_t GetSize() const {
 802377c:	b480      	push	{r7}
 802377e:	b083      	sub	sp, #12
 8023780:	af00      	add	r7, sp, #0
 8023782:	6078      	str	r0, [r7, #4]
		return Size;
 8023784:	687b      	ldr	r3, [r7, #4]
 8023786:	681b      	ldr	r3, [r3, #0]
	}
 8023788:	4618      	mov	r0, r3
 802378a:	370c      	adds	r7, #12
 802378c:	46bd      	mov	sp, r7
 802378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023792:	4770      	bx	lr

08023794 <_ZNK10FixedQueueI8ResponceLj10EE7GetSizeEv>:
	size_t GetSize() const {
 8023794:	b480      	push	{r7}
 8023796:	b083      	sub	sp, #12
 8023798:	af00      	add	r7, sp, #0
 802379a:	6078      	str	r0, [r7, #4]
		return Size;
 802379c:	687b      	ldr	r3, [r7, #4]
 802379e:	681b      	ldr	r3, [r3, #0]
	}
 80237a0:	4618      	mov	r0, r3
 80237a2:	370c      	adds	r7, #12
 80237a4:	46bd      	mov	sp, r7
 80237a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80237aa:	4770      	bx	lr

080237ac <_ZNK10FixedQueueI7RequestLj10EE5EmptyEv>:
	bool Empty() const {
 80237ac:	b480      	push	{r7}
 80237ae:	b083      	sub	sp, #12
 80237b0:	af00      	add	r7, sp, #0
 80237b2:	6078      	str	r0, [r7, #4]
		return Size == 0;
 80237b4:	687b      	ldr	r3, [r7, #4]
 80237b6:	681b      	ldr	r3, [r3, #0]
 80237b8:	2b00      	cmp	r3, #0
 80237ba:	bf0c      	ite	eq
 80237bc:	2301      	moveq	r3, #1
 80237be:	2300      	movne	r3, #0
 80237c0:	b2db      	uxtb	r3, r3
	}
 80237c2:	4618      	mov	r0, r3
 80237c4:	370c      	adds	r7, #12
 80237c6:	46bd      	mov	sp, r7
 80237c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80237cc:	4770      	bx	lr
	...

080237d0 <_ZNK10FixedQueueI7RequestLj10EE5FrontEv>:
	const T& Front() const {
 80237d0:	b580      	push	{r7, lr}
 80237d2:	b082      	sub	sp, #8
 80237d4:	af00      	add	r7, sp, #0
 80237d6:	6078      	str	r0, [r7, #4]
		assert(Size);
 80237d8:	687b      	ldr	r3, [r7, #4]
 80237da:	681b      	ldr	r3, [r3, #0]
 80237dc:	2b00      	cmp	r3, #0
 80237de:	d105      	bne.n	80237ec <_ZNK10FixedQueueI7RequestLj10EE5FrontEv+0x1c>
 80237e0:	4b09      	ldr	r3, [pc, #36]	; (8023808 <_ZNK10FixedQueueI7RequestLj10EE5FrontEv+0x38>)
 80237e2:	4a0a      	ldr	r2, [pc, #40]	; (802380c <_ZNK10FixedQueueI7RequestLj10EE5FrontEv+0x3c>)
 80237e4:	2152      	movs	r1, #82	; 0x52
 80237e6:	480a      	ldr	r0, [pc, #40]	; (8023810 <_ZNK10FixedQueueI7RequestLj10EE5FrontEv+0x40>)
 80237e8:	f018 fa60 	bl	803bcac <__assert_func>
		return Buffer[Tail];
 80237ec:	687b      	ldr	r3, [r7, #4]
 80237ee:	f103 020c 	add.w	r2, r3, #12
 80237f2:	687b      	ldr	r3, [r7, #4]
 80237f4:	689b      	ldr	r3, [r3, #8]
 80237f6:	4619      	mov	r1, r3
 80237f8:	4610      	mov	r0, r2
 80237fa:	f000 fa8a 	bl	8023d12 <_ZNKSt5arrayI7RequestLj10EEixEj>
 80237fe:	4603      	mov	r3, r0
	}
 8023800:	4618      	mov	r0, r3
 8023802:	3708      	adds	r7, #8
 8023804:	46bd      	mov	sp, r7
 8023806:	bd80      	pop	{r7, pc}
 8023808:	0803da2c 	.word	0x0803da2c
 802380c:	0803dc08 	.word	0x0803dc08
 8023810:	0803cf00 	.word	0x0803cf00

08023814 <_ZN10FixedQueueI7RequestLj10EE3PopEv>:
	bool Pop() {
 8023814:	b580      	push	{r7, lr}
 8023816:	b082      	sub	sp, #8
 8023818:	af00      	add	r7, sp, #0
 802381a:	6078      	str	r0, [r7, #4]
		assert(Size != 0);
 802381c:	687b      	ldr	r3, [r7, #4]
 802381e:	681b      	ldr	r3, [r3, #0]
 8023820:	2b00      	cmp	r3, #0
 8023822:	d105      	bne.n	8023830 <_ZN10FixedQueueI7RequestLj10EE3PopEv+0x1c>
 8023824:	4b0e      	ldr	r3, [pc, #56]	; (8023860 <_ZN10FixedQueueI7RequestLj10EE3PopEv+0x4c>)
 8023826:	4a0f      	ldr	r2, [pc, #60]	; (8023864 <_ZN10FixedQueueI7RequestLj10EE3PopEv+0x50>)
 8023828:	214c      	movs	r1, #76	; 0x4c
 802382a:	480f      	ldr	r0, [pc, #60]	; (8023868 <_ZN10FixedQueueI7RequestLj10EE3PopEv+0x54>)
 802382c:	f018 fa3e 	bl	803bcac <__assert_func>
		Tail = (Tail + 1) % Capacity;
 8023830:	687b      	ldr	r3, [r7, #4]
 8023832:	689b      	ldr	r3, [r3, #8]
 8023834:	1c59      	adds	r1, r3, #1
 8023836:	4b0d      	ldr	r3, [pc, #52]	; (802386c <_ZN10FixedQueueI7RequestLj10EE3PopEv+0x58>)
 8023838:	fba3 2301 	umull	r2, r3, r3, r1
 802383c:	08da      	lsrs	r2, r3, #3
 802383e:	4613      	mov	r3, r2
 8023840:	009b      	lsls	r3, r3, #2
 8023842:	4413      	add	r3, r2
 8023844:	005b      	lsls	r3, r3, #1
 8023846:	1aca      	subs	r2, r1, r3
 8023848:	687b      	ldr	r3, [r7, #4]
 802384a:	609a      	str	r2, [r3, #8]
		Size--;
 802384c:	687b      	ldr	r3, [r7, #4]
 802384e:	681b      	ldr	r3, [r3, #0]
 8023850:	1e5a      	subs	r2, r3, #1
 8023852:	687b      	ldr	r3, [r7, #4]
 8023854:	601a      	str	r2, [r3, #0]
	}
 8023856:	bf00      	nop
 8023858:	4618      	mov	r0, r3
 802385a:	3708      	adds	r7, #8
 802385c:	46bd      	mov	sp, r7
 802385e:	bd80      	pop	{r7, pc}
 8023860:	0803da94 	.word	0x0803da94
 8023864:	0803dc68 	.word	0x0803dc68
 8023868:	0803cf00 	.word	0x0803cf00
 802386c:	cccccccd 	.word	0xcccccccd

08023870 <_ZNK10FixedQueueI7RequestLj10EE7GetSizeEv>:
	size_t GetSize() const {
 8023870:	b480      	push	{r7}
 8023872:	b083      	sub	sp, #12
 8023874:	af00      	add	r7, sp, #0
 8023876:	6078      	str	r0, [r7, #4]
		return Size;
 8023878:	687b      	ldr	r3, [r7, #4]
 802387a:	681b      	ldr	r3, [r3, #0]
	}
 802387c:	4618      	mov	r0, r3
 802387e:	370c      	adds	r7, #12
 8023880:	46bd      	mov	sp, r7
 8023882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023886:	4770      	bx	lr

08023888 <_ZN10FixedQueueI7RequestLj10EE4PushERKS0_>:
	bool Push(const T &rhs) {
 8023888:	b580      	push	{r7, lr}
 802388a:	b082      	sub	sp, #8
 802388c:	af00      	add	r7, sp, #0
 802388e:	6078      	str	r0, [r7, #4]
 8023890:	6039      	str	r1, [r7, #0]
		assert(Size != Capacity);
 8023892:	687b      	ldr	r3, [r7, #4]
 8023894:	681b      	ldr	r3, [r3, #0]
 8023896:	2b0a      	cmp	r3, #10
 8023898:	d105      	bne.n	80238a6 <_ZN10FixedQueueI7RequestLj10EE4PushERKS0_+0x1e>
 802389a:	4b18      	ldr	r3, [pc, #96]	; (80238fc <_ZN10FixedQueueI7RequestLj10EE4PushERKS0_+0x74>)
 802389c:	4a18      	ldr	r2, [pc, #96]	; (8023900 <_ZN10FixedQueueI7RequestLj10EE4PushERKS0_+0x78>)
 802389e:	2142      	movs	r1, #66	; 0x42
 80238a0:	4818      	ldr	r0, [pc, #96]	; (8023904 <_ZN10FixedQueueI7RequestLj10EE4PushERKS0_+0x7c>)
 80238a2:	f018 fa03 	bl	803bcac <__assert_func>
		Buffer[Head] = rhs;
 80238a6:	687b      	ldr	r3, [r7, #4]
 80238a8:	f103 020c 	add.w	r2, r3, #12
 80238ac:	687b      	ldr	r3, [r7, #4]
 80238ae:	685b      	ldr	r3, [r3, #4]
 80238b0:	4619      	mov	r1, r3
 80238b2:	4610      	mov	r0, r2
 80238b4:	f000 fa3c 	bl	8023d30 <_ZNSt5arrayI7RequestLj10EEixEj>
 80238b8:	4602      	mov	r2, r0
 80238ba:	683b      	ldr	r3, [r7, #0]
 80238bc:	4610      	mov	r0, r2
 80238be:	4619      	mov	r1, r3
 80238c0:	f44f 7386 	mov.w	r3, #268	; 0x10c
 80238c4:	461a      	mov	r2, r3
 80238c6:	f018 fa5b 	bl	803bd80 <memcpy>
		Head = (Head + 1) % Capacity;
 80238ca:	687b      	ldr	r3, [r7, #4]
 80238cc:	685b      	ldr	r3, [r3, #4]
 80238ce:	1c59      	adds	r1, r3, #1
 80238d0:	4b0d      	ldr	r3, [pc, #52]	; (8023908 <_ZN10FixedQueueI7RequestLj10EE4PushERKS0_+0x80>)
 80238d2:	fba3 2301 	umull	r2, r3, r3, r1
 80238d6:	08da      	lsrs	r2, r3, #3
 80238d8:	4613      	mov	r3, r2
 80238da:	009b      	lsls	r3, r3, #2
 80238dc:	4413      	add	r3, r2
 80238de:	005b      	lsls	r3, r3, #1
 80238e0:	1aca      	subs	r2, r1, r3
 80238e2:	687b      	ldr	r3, [r7, #4]
 80238e4:	605a      	str	r2, [r3, #4]
		Size++;
 80238e6:	687b      	ldr	r3, [r7, #4]
 80238e8:	681b      	ldr	r3, [r3, #0]
 80238ea:	1c5a      	adds	r2, r3, #1
 80238ec:	687b      	ldr	r3, [r7, #4]
 80238ee:	601a      	str	r2, [r3, #0]
		return true;
 80238f0:	2301      	movs	r3, #1
	}
 80238f2:	4618      	mov	r0, r3
 80238f4:	3708      	adds	r7, #8
 80238f6:	46bd      	mov	sp, r7
 80238f8:	bd80      	pop	{r7, pc}
 80238fa:	bf00      	nop
 80238fc:	0803d9b8 	.word	0x0803d9b8
 8023900:	0803dcbc 	.word	0x0803dcbc
 8023904:	0803cf00 	.word	0x0803cf00
 8023908:	cccccccd 	.word	0xcccccccd

0802390c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEaSESt16initializer_listIS1_E>:
       *  Note that the assignment completely changes the %deque and that the
       *  resulting %deque's size is the same as the number of elements
       *  assigned.
       */
      deque&
      operator=(initializer_list<value_type> __l)
 802390c:	b5b0      	push	{r4, r5, r7, lr}
 802390e:	b086      	sub	sp, #24
 8023910:	af00      	add	r7, sp, #0
 8023912:	60f8      	str	r0, [r7, #12]
 8023914:	1d3b      	adds	r3, r7, #4
 8023916:	e883 0006 	stmia.w	r3, {r1, r2}
      {
	_M_assign_aux(__l.begin(), __l.end(),
 802391a:	1d3b      	adds	r3, r7, #4
 802391c:	4618      	mov	r0, r3
 802391e:	f000 fa16 	bl	8023d4e <_ZNKSt16initializer_listIN10BHYWrapper8BHYFrameEE5beginEv>
 8023922:	4604      	mov	r4, r0
 8023924:	1d3b      	adds	r3, r7, #4
 8023926:	4618      	mov	r0, r3
 8023928:	f000 fa1d 	bl	8023d66 <_ZNKSt16initializer_listIN10BHYWrapper8BHYFrameEE3endEv>
 802392c:	4602      	mov	r2, r0
 802392e:	462b      	mov	r3, r5
 8023930:	4621      	mov	r1, r4
 8023932:	68f8      	ldr	r0, [r7, #12]
 8023934:	f000 fa2c 	bl	8023d90 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_assign_auxIPKS1_EEvT_S7_St20forward_iterator_tag>
		      random_access_iterator_tag());
	return *this;
 8023938:	68fb      	ldr	r3, [r7, #12]
      }
 802393a:	4618      	mov	r0, r3
 802393c:	3718      	adds	r7, #24
 802393e:	46bd      	mov	sp, r7
 8023940:	bdb0      	pop	{r4, r5, r7, pc}

08023942 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE10push_frontERKS1_>:
       *  element at the front of the %deque and assigns the given
       *  data to it.  Due to the nature of a %deque this operation
       *  can be done in constant time.
       */
      void
      push_front(const value_type& __x)
 8023942:	b580      	push	{r7, lr}
 8023944:	b082      	sub	sp, #8
 8023946:	af00      	add	r7, sp, #0
 8023948:	6078      	str	r0, [r7, #4]
 802394a:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_start._M_cur != this->_M_impl._M_start._M_first)
 802394c:	687b      	ldr	r3, [r7, #4]
 802394e:	689a      	ldr	r2, [r3, #8]
 8023950:	687b      	ldr	r3, [r7, #4]
 8023952:	68db      	ldr	r3, [r3, #12]
 8023954:	429a      	cmp	r2, r3
 8023956:	d00e      	beq.n	8023976 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE10push_frontERKS1_+0x34>
	  {
	    _Alloc_traits::construct(this->_M_impl,
 8023958:	6878      	ldr	r0, [r7, #4]
				     this->_M_impl._M_start._M_cur - 1,
 802395a:	687b      	ldr	r3, [r7, #4]
 802395c:	689b      	ldr	r3, [r3, #8]
	    _Alloc_traits::construct(this->_M_impl,
 802395e:	3b14      	subs	r3, #20
 8023960:	683a      	ldr	r2, [r7, #0]
 8023962:	4619      	mov	r1, r3
 8023964:	f000 fa79 	bl	8023e5a <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
				     __x);
	    --this->_M_impl._M_start._M_cur;
 8023968:	687b      	ldr	r3, [r7, #4]
 802396a:	689b      	ldr	r3, [r3, #8]
 802396c:	f1a3 0214 	sub.w	r2, r3, #20
 8023970:	687b      	ldr	r3, [r7, #4]
 8023972:	609a      	str	r2, [r3, #8]
	  }
	else
	  _M_push_front_aux(__x);
      }
 8023974:	e003      	b.n	802397e <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE10push_frontERKS1_+0x3c>
	  _M_push_front_aux(__x);
 8023976:	6839      	ldr	r1, [r7, #0]
 8023978:	6878      	ldr	r0, [r7, #4]
 802397a:	f000 fa81 	bl	8023e80 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_push_front_auxIJRKS1_EEEvDpOT_>
      }
 802397e:	bf00      	nop
 8023980:	3708      	adds	r7, #8
 8023982:	46bd      	mov	sp, r7
 8023984:	bd80      	pop	{r7, pc}

08023986 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8023986:	b580      	push	{r7, lr}
 8023988:	b082      	sub	sp, #8
 802398a:	af00      	add	r7, sp, #0
 802398c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 802398e:	687b      	ldr	r3, [r7, #4]
 8023990:	f103 0218 	add.w	r2, r3, #24
 8023994:	687b      	ldr	r3, [r7, #4]
 8023996:	3308      	adds	r3, #8
 8023998:	4619      	mov	r1, r3
 802399a:	4610      	mov	r0, r2
 802399c:	f000 fab6 	bl	8023f0c <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_ES6_>
 80239a0:	4603      	mov	r3, r0
 80239a2:	4618      	mov	r0, r3
 80239a4:	3708      	adds	r7, #8
 80239a6:	46bd      	mov	sp, r7
 80239a8:	bd80      	pop	{r7, pc}

080239aa <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE8pop_backEv>:
       *
       *  Note that no data is returned, and if the last element's data is
       *  needed, it should be retrieved before pop_back() is called.
       */
      void
      pop_back() _GLIBCXX_NOEXCEPT
 80239aa:	b580      	push	{r7, lr}
 80239ac:	b082      	sub	sp, #8
 80239ae:	af00      	add	r7, sp, #0
 80239b0:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	if (this->_M_impl._M_finish._M_cur
 80239b2:	687b      	ldr	r3, [r7, #4]
 80239b4:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_first)
 80239b6:	687b      	ldr	r3, [r7, #4]
 80239b8:	69db      	ldr	r3, [r3, #28]
	if (this->_M_impl._M_finish._M_cur
 80239ba:	429a      	cmp	r2, r3
 80239bc:	d011      	beq.n	80239e2 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE8pop_backEv+0x38>
	  {
	    --this->_M_impl._M_finish._M_cur;
 80239be:	687b      	ldr	r3, [r7, #4]
 80239c0:	699b      	ldr	r3, [r3, #24]
 80239c2:	f1a3 0214 	sub.w	r2, r3, #20
 80239c6:	687b      	ldr	r3, [r7, #4]
 80239c8:	619a      	str	r2, [r3, #24]
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
 80239ca:	687b      	ldr	r3, [r7, #4]
 80239cc:	4618      	mov	r0, r3
 80239ce:	f000 fac9 	bl	8023f64 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 80239d2:	4602      	mov	r2, r0
 80239d4:	687b      	ldr	r3, [r7, #4]
 80239d6:	699b      	ldr	r3, [r3, #24]
 80239d8:	4619      	mov	r1, r3
 80239da:	4610      	mov	r0, r2
 80239dc:	f000 facd 	bl	8023f7a <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE7destroyIS1_EEvRS2_PT_>
				   this->_M_impl._M_finish._M_cur);
	  }
	else
	  _M_pop_back_aux();
      }
 80239e0:	e002      	b.n	80239e8 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE8pop_backEv+0x3e>
	  _M_pop_back_aux();
 80239e2:	6878      	ldr	r0, [r7, #4]
 80239e4:	f000 fad6 	bl	8023f94 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_pop_back_auxEv>
      }
 80239e8:	bf00      	nop
 80239ea:	3708      	adds	r7, #8
 80239ec:	46bd      	mov	sp, r7
 80239ee:	bd80      	pop	{r7, pc}

080239f0 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 80239f0:	b580      	push	{r7, lr}
 80239f2:	b082      	sub	sp, #8
 80239f4:	af00      	add	r7, sp, #0
 80239f6:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
 80239f8:	687b      	ldr	r3, [r7, #4]
 80239fa:	f103 0218 	add.w	r2, r3, #24
 80239fe:	687b      	ldr	r3, [r7, #4]
 8023a00:	3308      	adds	r3, #8
 8023a02:	4619      	mov	r1, r3
 8023a04:	4610      	mov	r0, r2
 8023a06:	f000 faef 	bl	8023fe8 <_ZSteqRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_ES6_>
 8023a0a:	4603      	mov	r3, r0
 8023a0c:	4618      	mov	r0, r3
 8023a0e:	3708      	adds	r7, #8
 8023a10:	46bd      	mov	sp, r7
 8023a12:	bd80      	pop	{r7, pc}

08023a14 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEixEj>:
      operator[](size_type __n) const _GLIBCXX_NOEXCEPT
 8023a14:	b580      	push	{r7, lr}
 8023a16:	b082      	sub	sp, #8
 8023a18:	af00      	add	r7, sp, #0
 8023a1a:	6078      	str	r0, [r7, #4]
 8023a1c:	6039      	str	r1, [r7, #0]
	return this->_M_impl._M_start[difference_type(__n)];
 8023a1e:	687b      	ldr	r3, [r7, #4]
 8023a20:	3308      	adds	r3, #8
 8023a22:	683a      	ldr	r2, [r7, #0]
 8023a24:	4611      	mov	r1, r2
 8023a26:	4618      	mov	r0, r3
 8023a28:	f000 faf2 	bl	8024010 <_ZNKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EixEi>
 8023a2c:	4603      	mov	r3, r0
      }
 8023a2e:	4618      	mov	r0, r3
 8023a30:	3708      	adds	r7, #8
 8023a32:	46bd      	mov	sp, r7
 8023a34:	bd80      	pop	{r7, pc}

08023a36 <_ZNSt5queueIjSt5dequeIjSaIjEEE4pushERKj>:
       *  element at the end of the %queue and assigns the given data
       *  to it.  The time complexity of the operation depends on the
       *  underlying sequence.
       */
      void
      push(const value_type& __x)
 8023a36:	b580      	push	{r7, lr}
 8023a38:	b082      	sub	sp, #8
 8023a3a:	af00      	add	r7, sp, #0
 8023a3c:	6078      	str	r0, [r7, #4]
 8023a3e:	6039      	str	r1, [r7, #0]
      { c.push_back(__x); }
 8023a40:	687b      	ldr	r3, [r7, #4]
 8023a42:	6839      	ldr	r1, [r7, #0]
 8023a44:	4618      	mov	r0, r3
 8023a46:	f000 faf9 	bl	802403c <_ZNSt5dequeIjSaIjEE9push_backERKj>
 8023a4a:	bf00      	nop
 8023a4c:	3708      	adds	r7, #8
 8023a4e:	46bd      	mov	sp, r7
 8023a50:	bd80      	pop	{r7, pc}

08023a52 <_ZNKSt5queueIjSt5dequeIjSaIjEEE5frontEv>:
      front() const
 8023a52:	b580      	push	{r7, lr}
 8023a54:	b082      	sub	sp, #8
 8023a56:	af00      	add	r7, sp, #0
 8023a58:	6078      	str	r0, [r7, #4]
	return c.front();
 8023a5a:	687b      	ldr	r3, [r7, #4]
 8023a5c:	4618      	mov	r0, r3
 8023a5e:	f000 fb0e 	bl	802407e <_ZNKSt5dequeIjSaIjEE5frontEv>
 8023a62:	4603      	mov	r3, r0
      }
 8023a64:	4618      	mov	r0, r3
 8023a66:	3708      	adds	r7, #8
 8023a68:	46bd      	mov	sp, r7
 8023a6a:	bd80      	pop	{r7, pc}

08023a6c <_ZNKSt5queueIjSt5dequeIjSaIjEEE5emptyEv>:
      empty() const
 8023a6c:	b580      	push	{r7, lr}
 8023a6e:	b082      	sub	sp, #8
 8023a70:	af00      	add	r7, sp, #0
 8023a72:	6078      	str	r0, [r7, #4]
      { return c.empty(); }
 8023a74:	687b      	ldr	r3, [r7, #4]
 8023a76:	4618      	mov	r0, r3
 8023a78:	f000 fb15 	bl	80240a6 <_ZNKSt5dequeIjSaIjEE5emptyEv>
 8023a7c:	4603      	mov	r3, r0
 8023a7e:	4618      	mov	r0, r3
 8023a80:	3708      	adds	r7, #8
 8023a82:	46bd      	mov	sp, r7
 8023a84:	bd80      	pop	{r7, pc}

08023a86 <_ZNSt5queueIjSt5dequeIjSaIjEEE3popEv>:
       *  Note that no data is returned, and if the first element's
       *  data is needed, it should be retrieved before pop() is
       *  called.
       */
      void
      pop()
 8023a86:	b580      	push	{r7, lr}
 8023a88:	b082      	sub	sp, #8
 8023a8a:	af00      	add	r7, sp, #0
 8023a8c:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	c.pop_front();
 8023a8e:	687b      	ldr	r3, [r7, #4]
 8023a90:	4618      	mov	r0, r3
 8023a92:	f000 fb1a 	bl	80240ca <_ZNSt5dequeIjSaIjEE9pop_frontEv>
      }
 8023a96:	bf00      	nop
 8023a98:	3708      	adds	r7, #8
 8023a9a:	46bd      	mov	sp, r7
 8023a9c:	bd80      	pop	{r7, pc}

08023a9e <_ZNSt5arrayIhLj256EEixEj>:
      operator[](size_type __n) noexcept
 8023a9e:	b580      	push	{r7, lr}
 8023aa0:	b082      	sub	sp, #8
 8023aa2:	af00      	add	r7, sp, #0
 8023aa4:	6078      	str	r0, [r7, #4]
 8023aa6:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8023aa8:	687b      	ldr	r3, [r7, #4]
 8023aaa:	6839      	ldr	r1, [r7, #0]
 8023aac:	4618      	mov	r0, r3
 8023aae:	f7ff fe03 	bl	80236b8 <_ZNSt14__array_traitsIhLj256EE6_S_refERA256_Khj>
 8023ab2:	4603      	mov	r3, r0
 8023ab4:	4618      	mov	r0, r3
 8023ab6:	3708      	adds	r7, #8
 8023ab8:	46bd      	mov	sp, r7
 8023aba:	bd80      	pop	{r7, pc}

08023abc <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5frontEv>:
      front() const _GLIBCXX_NOEXCEPT
 8023abc:	b580      	push	{r7, lr}
 8023abe:	b086      	sub	sp, #24
 8023ac0:	af00      	add	r7, sp, #0
 8023ac2:	6078      	str	r0, [r7, #4]
	return *begin();
 8023ac4:	f107 0308 	add.w	r3, r7, #8
 8023ac8:	6879      	ldr	r1, [r7, #4]
 8023aca:	4618      	mov	r0, r3
 8023acc:	f000 fb20 	bl	8024110 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5beginEv>
 8023ad0:	f107 0308 	add.w	r3, r7, #8
 8023ad4:	4618      	mov	r0, r3
 8023ad6:	f000 fb2a 	bl	802412e <_ZNKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERKS1_PS2_EdeEv>
 8023ada:	4603      	mov	r3, r0
      }
 8023adc:	4618      	mov	r0, r3
 8023ade:	3718      	adds	r7, #24
 8023ae0:	46bd      	mov	sp, r7
 8023ae2:	bd80      	pop	{r7, pc}

08023ae4 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE11_Deque_implD1Ev>:
      struct _Deque_impl
 8023ae4:	b580      	push	{r7, lr}
 8023ae6:	b082      	sub	sp, #8
 8023ae8:	af00      	add	r7, sp, #0
 8023aea:	6078      	str	r0, [r7, #4]
 8023aec:	6878      	ldr	r0, [r7, #4]
 8023aee:	f000 fb3a 	bl	8024166 <_ZNSaIN10BHYWrapper8BHYFrameEED1Ev>
 8023af2:	687b      	ldr	r3, [r7, #4]
 8023af4:	4618      	mov	r0, r3
 8023af6:	3708      	adds	r7, #8
 8023af8:	46bd      	mov	sp, r7
 8023afa:	bd80      	pop	{r7, pc}

08023afc <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EEC1Ev>:
      _Deque_base()
 8023afc:	b580      	push	{r7, lr}
 8023afe:	b082      	sub	sp, #8
 8023b00:	af00      	add	r7, sp, #0
 8023b02:	6078      	str	r0, [r7, #4]
      : _M_impl()
 8023b04:	687b      	ldr	r3, [r7, #4]
 8023b06:	4618      	mov	r0, r3
 8023b08:	f000 fb1d 	bl	8024146 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 8023b0c:	2100      	movs	r1, #0
 8023b0e:	6878      	ldr	r0, [r7, #4]
 8023b10:	f000 fb35 	bl	802417e <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE17_M_initialize_mapEj>
 8023b14:	687b      	ldr	r3, [r7, #4]
 8023b16:	4618      	mov	r0, r3
 8023b18:	3708      	adds	r7, #8
 8023b1a:	46bd      	mov	sp, r7
 8023b1c:	bd80      	pop	{r7, pc}

08023b1e <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 8023b1e:	b580      	push	{r7, lr}
 8023b20:	b082      	sub	sp, #8
 8023b22:	af00      	add	r7, sp, #0
 8023b24:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 8023b26:	687b      	ldr	r3, [r7, #4]
 8023b28:	681b      	ldr	r3, [r3, #0]
 8023b2a:	2b00      	cmp	r3, #0
 8023b2c:	d010      	beq.n	8023b50 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8023b2e:	687b      	ldr	r3, [r7, #4]
 8023b30:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 8023b32:	687b      	ldr	r3, [r7, #4]
 8023b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8023b36:	3304      	adds	r3, #4
 8023b38:	461a      	mov	r2, r3
 8023b3a:	6878      	ldr	r0, [r7, #4]
 8023b3c:	f000 fb85 	bl	802424a <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_destroy_nodesEPPS1_S5_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8023b40:	687b      	ldr	r3, [r7, #4]
 8023b42:	6819      	ldr	r1, [r3, #0]
 8023b44:	687b      	ldr	r3, [r7, #4]
 8023b46:	685b      	ldr	r3, [r3, #4]
 8023b48:	461a      	mov	r2, r3
 8023b4a:	6878      	ldr	r0, [r7, #4]
 8023b4c:	f000 fb97 	bl	802427e <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE17_M_deallocate_mapEPPS1_j>
    }
 8023b50:	687b      	ldr	r3, [r7, #4]
 8023b52:	4618      	mov	r0, r3
 8023b54:	f7ff ffc6 	bl	8023ae4 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE11_Deque_implD1Ev>
 8023b58:	687b      	ldr	r3, [r7, #4]
 8023b5a:	4618      	mov	r0, r3
 8023b5c:	3708      	adds	r7, #8
 8023b5e:	46bd      	mov	sp, r7
 8023b60:	bd80      	pop	{r7, pc}

08023b62 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EED1Ev>:
      ~deque()
 8023b62:	b580      	push	{r7, lr}
 8023b64:	b08a      	sub	sp, #40	; 0x28
 8023b66:	af00      	add	r7, sp, #0
 8023b68:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 8023b6a:	f107 0308 	add.w	r3, r7, #8
 8023b6e:	6879      	ldr	r1, [r7, #4]
 8023b70:	4618      	mov	r0, r3
 8023b72:	f000 fba0 	bl	80242b6 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5beginEv>
 8023b76:	f107 0318 	add.w	r3, r7, #24
 8023b7a:	6879      	ldr	r1, [r7, #4]
 8023b7c:	4618      	mov	r0, r3
 8023b7e:	f000 fba9 	bl	80242d4 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE3endEv>
 8023b82:	687b      	ldr	r3, [r7, #4]
 8023b84:	4618      	mov	r0, r3
 8023b86:	f000 f9ed 	bl	8023f64 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 8023b8a:	4603      	mov	r3, r0
 8023b8c:	f107 0218 	add.w	r2, r7, #24
 8023b90:	f107 0108 	add.w	r1, r7, #8
 8023b94:	6878      	ldr	r0, [r7, #4]
 8023b96:	f000 fbc8 	bl	802432a <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_destroy_dataESt15_Deque_iteratorIS1_RS1_PS1_ES7_RKS2_>
 8023b9a:	687b      	ldr	r3, [r7, #4]
 8023b9c:	4618      	mov	r0, r3
 8023b9e:	f7ff ffbe 	bl	8023b1e <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EED1Ev>
 8023ba2:	687b      	ldr	r3, [r7, #4]
 8023ba4:	4618      	mov	r0, r3
 8023ba6:	3728      	adds	r7, #40	; 0x28
 8023ba8:	46bd      	mov	sp, r7
 8023baa:	bd80      	pop	{r7, pc}

08023bac <_ZNSt5dequeIjSaIjEEC1Ev>:
      deque() = default;
 8023bac:	b580      	push	{r7, lr}
 8023bae:	b082      	sub	sp, #8
 8023bb0:	af00      	add	r7, sp, #0
 8023bb2:	6078      	str	r0, [r7, #4]
 8023bb4:	687b      	ldr	r3, [r7, #4]
 8023bb6:	4618      	mov	r0, r3
 8023bb8:	f000 fbd0 	bl	802435c <_ZNSt11_Deque_baseIjSaIjEEC1Ev>
 8023bbc:	687b      	ldr	r3, [r7, #4]
 8023bbe:	4618      	mov	r0, r3
 8023bc0:	3708      	adds	r7, #8
 8023bc2:	46bd      	mov	sp, r7
 8023bc4:	bd80      	pop	{r7, pc}

08023bc6 <_ZNSt5queueIjSt5dequeIjSaIjEEEC1IS2_vEEv>:
	queue()
 8023bc6:	b580      	push	{r7, lr}
 8023bc8:	b082      	sub	sp, #8
 8023bca:	af00      	add	r7, sp, #0
 8023bcc:	6078      	str	r0, [r7, #4]
	: c() { }
 8023bce:	687b      	ldr	r3, [r7, #4]
 8023bd0:	4618      	mov	r0, r3
 8023bd2:	2328      	movs	r3, #40	; 0x28
 8023bd4:	461a      	mov	r2, r3
 8023bd6:	2100      	movs	r1, #0
 8023bd8:	f018 f8fa 	bl	803bdd0 <memset>
 8023bdc:	687b      	ldr	r3, [r7, #4]
 8023bde:	4618      	mov	r0, r3
 8023be0:	f7ff ffe4 	bl	8023bac <_ZNSt5dequeIjSaIjEEC1Ev>
 8023be4:	687b      	ldr	r3, [r7, #4]
 8023be6:	4618      	mov	r0, r3
 8023be8:	3708      	adds	r7, #8
 8023bea:	46bd      	mov	sp, r7
 8023bec:	bd80      	pop	{r7, pc}

08023bee <_ZNSt5dequeIjSaIjEED1Ev>:
      ~deque()
 8023bee:	b580      	push	{r7, lr}
 8023bf0:	b08a      	sub	sp, #40	; 0x28
 8023bf2:	af00      	add	r7, sp, #0
 8023bf4:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 8023bf6:	f107 0308 	add.w	r3, r7, #8
 8023bfa:	6879      	ldr	r1, [r7, #4]
 8023bfc:	4618      	mov	r0, r3
 8023bfe:	f000 fbe0 	bl	80243c2 <_ZNSt5dequeIjSaIjEE5beginEv>
 8023c02:	f107 0318 	add.w	r3, r7, #24
 8023c06:	6879      	ldr	r1, [r7, #4]
 8023c08:	4618      	mov	r0, r3
 8023c0a:	f000 fbe9 	bl	80243e0 <_ZNSt5dequeIjSaIjEE3endEv>
 8023c0e:	687b      	ldr	r3, [r7, #4]
 8023c10:	4618      	mov	r0, r3
 8023c12:	f000 fbf4 	bl	80243fe <_ZNSt11_Deque_baseIjSaIjEE19_M_get_Tp_allocatorEv>
 8023c16:	4603      	mov	r3, r0
 8023c18:	f107 0218 	add.w	r2, r7, #24
 8023c1c:	f107 0108 	add.w	r1, r7, #8
 8023c20:	6878      	ldr	r0, [r7, #4]
 8023c22:	f000 fc13 	bl	802444c <_ZNSt5dequeIjSaIjEE15_M_destroy_dataESt15_Deque_iteratorIjRjPjES5_RKS0_>
 8023c26:	687b      	ldr	r3, [r7, #4]
 8023c28:	4618      	mov	r0, r3
 8023c2a:	f000 fba8 	bl	802437e <_ZNSt11_Deque_baseIjSaIjEED1Ev>
 8023c2e:	687b      	ldr	r3, [r7, #4]
 8023c30:	4618      	mov	r0, r3
 8023c32:	3728      	adds	r7, #40	; 0x28
 8023c34:	46bd      	mov	sp, r7
 8023c36:	bd80      	pop	{r7, pc}

08023c38 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEaSEOS3_>:
      operator=(deque&& __x) noexcept(_Alloc_traits::_S_always_equal())
 8023c38:	b590      	push	{r4, r7, lr}
 8023c3a:	b083      	sub	sp, #12
 8023c3c:	af00      	add	r7, sp, #0
 8023c3e:	6078      	str	r0, [r7, #4]
 8023c40:	6039      	str	r1, [r7, #0]
	_M_move_assign1(std::move(__x), __always_equal{});
 8023c42:	6838      	ldr	r0, [r7, #0]
 8023c44:	f000 fc0f 	bl	8024466 <_ZSt4moveIRSt5dequeIN10BHYWrapper8BHYFrameESaIS2_EEEONSt16remove_referenceIT_E4typeEOS7_>
 8023c48:	4603      	mov	r3, r0
 8023c4a:	4622      	mov	r2, r4
 8023c4c:	4619      	mov	r1, r3
 8023c4e:	6878      	ldr	r0, [r7, #4]
 8023c50:	f000 fc14 	bl	802447c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_move_assign1EOS3_St17integral_constantIbLb1EE>
	return *this;
 8023c54:	687b      	ldr	r3, [r7, #4]
      }
 8023c56:	4618      	mov	r0, r3
 8023c58:	370c      	adds	r7, #12
 8023c5a:	46bd      	mov	sp, r7
 8023c5c:	bd90      	pop	{r4, r7, pc}

08023c5e <_ZNSt5dequeIjSaIjEEaSEOS1_>:
      operator=(deque&& __x) noexcept(_Alloc_traits::_S_always_equal())
 8023c5e:	b590      	push	{r4, r7, lr}
 8023c60:	b083      	sub	sp, #12
 8023c62:	af00      	add	r7, sp, #0
 8023c64:	6078      	str	r0, [r7, #4]
 8023c66:	6039      	str	r1, [r7, #0]
	_M_move_assign1(std::move(__x), __always_equal{});
 8023c68:	6838      	ldr	r0, [r7, #0]
 8023c6a:	f000 fc28 	bl	80244be <_ZSt4moveIRSt5dequeIjSaIjEEEONSt16remove_referenceIT_E4typeEOS5_>
 8023c6e:	4603      	mov	r3, r0
 8023c70:	4622      	mov	r2, r4
 8023c72:	4619      	mov	r1, r3
 8023c74:	6878      	ldr	r0, [r7, #4]
 8023c76:	f000 fc2d 	bl	80244d4 <_ZNSt5dequeIjSaIjEE15_M_move_assign1EOS1_St17integral_constantIbLb1EE>
	return *this;
 8023c7a:	687b      	ldr	r3, [r7, #4]
      }
 8023c7c:	4618      	mov	r0, r3
 8023c7e:	370c      	adds	r7, #12
 8023c80:	46bd      	mov	sp, r7
 8023c82:	bd90      	pop	{r4, r7, pc}

08023c84 <_ZNSt5arrayI8ResponceLj10EEixEj>:
      operator[](size_type __n) noexcept
 8023c84:	b580      	push	{r7, lr}
 8023c86:	b082      	sub	sp, #8
 8023c88:	af00      	add	r7, sp, #0
 8023c8a:	6078      	str	r0, [r7, #4]
 8023c8c:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8023c8e:	687b      	ldr	r3, [r7, #4]
 8023c90:	6839      	ldr	r1, [r7, #0]
 8023c92:	4618      	mov	r0, r3
 8023c94:	f000 fc3f 	bl	8024516 <_ZNSt14__array_traitsI8ResponceLj10EE6_S_refERA10_KS0_j>
 8023c98:	4603      	mov	r3, r0
 8023c9a:	4618      	mov	r0, r3
 8023c9c:	3708      	adds	r7, #8
 8023c9e:	46bd      	mov	sp, r7
 8023ca0:	bd80      	pop	{r7, pc}

08023ca2 <_ZNKSt5arrayI8ResponceLj10EEixEj>:
      operator[](size_type __n) const noexcept
 8023ca2:	b580      	push	{r7, lr}
 8023ca4:	b082      	sub	sp, #8
 8023ca6:	af00      	add	r7, sp, #0
 8023ca8:	6078      	str	r0, [r7, #4]
 8023caa:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8023cac:	687b      	ldr	r3, [r7, #4]
 8023cae:	6839      	ldr	r1, [r7, #0]
 8023cb0:	4618      	mov	r0, r3
 8023cb2:	f000 fc30 	bl	8024516 <_ZNSt14__array_traitsI8ResponceLj10EE6_S_refERA10_KS0_j>
 8023cb6:	4603      	mov	r3, r0
 8023cb8:	4618      	mov	r0, r3
 8023cba:	3708      	adds	r7, #8
 8023cbc:	46bd      	mov	sp, r7
 8023cbe:	bd80      	pop	{r7, pc}

08023cc0 <_ZNSt14__array_traitsIhLj256EE6_S_ptrERA256_Kh>:
      _S_ptr(const _Type& __t) noexcept
 8023cc0:	b480      	push	{r7}
 8023cc2:	b083      	sub	sp, #12
 8023cc4:	af00      	add	r7, sp, #0
 8023cc6:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8023cc8:	687b      	ldr	r3, [r7, #4]
 8023cca:	4618      	mov	r0, r3
 8023ccc:	370c      	adds	r7, #12
 8023cce:	46bd      	mov	sp, r7
 8023cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023cd4:	4770      	bx	lr

08023cd6 <_ZNKSt5arrayI7RequestLj500EEixEj>:
      operator[](size_type __n) const noexcept
 8023cd6:	b580      	push	{r7, lr}
 8023cd8:	b082      	sub	sp, #8
 8023cda:	af00      	add	r7, sp, #0
 8023cdc:	6078      	str	r0, [r7, #4]
 8023cde:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8023ce0:	687b      	ldr	r3, [r7, #4]
 8023ce2:	6839      	ldr	r1, [r7, #0]
 8023ce4:	4618      	mov	r0, r3
 8023ce6:	f000 fc28 	bl	802453a <_ZNSt14__array_traitsI7RequestLj500EE6_S_refERA500_KS0_j>
 8023cea:	4603      	mov	r3, r0
 8023cec:	4618      	mov	r0, r3
 8023cee:	3708      	adds	r7, #8
 8023cf0:	46bd      	mov	sp, r7
 8023cf2:	bd80      	pop	{r7, pc}

08023cf4 <_ZNSt5arrayI7RequestLj500EEixEj>:
      operator[](size_type __n) noexcept
 8023cf4:	b580      	push	{r7, lr}
 8023cf6:	b082      	sub	sp, #8
 8023cf8:	af00      	add	r7, sp, #0
 8023cfa:	6078      	str	r0, [r7, #4]
 8023cfc:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8023cfe:	687b      	ldr	r3, [r7, #4]
 8023d00:	6839      	ldr	r1, [r7, #0]
 8023d02:	4618      	mov	r0, r3
 8023d04:	f000 fc19 	bl	802453a <_ZNSt14__array_traitsI7RequestLj500EE6_S_refERA500_KS0_j>
 8023d08:	4603      	mov	r3, r0
 8023d0a:	4618      	mov	r0, r3
 8023d0c:	3708      	adds	r7, #8
 8023d0e:	46bd      	mov	sp, r7
 8023d10:	bd80      	pop	{r7, pc}

08023d12 <_ZNKSt5arrayI7RequestLj10EEixEj>:
      operator[](size_type __n) const noexcept
 8023d12:	b580      	push	{r7, lr}
 8023d14:	b082      	sub	sp, #8
 8023d16:	af00      	add	r7, sp, #0
 8023d18:	6078      	str	r0, [r7, #4]
 8023d1a:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8023d1c:	687b      	ldr	r3, [r7, #4]
 8023d1e:	6839      	ldr	r1, [r7, #0]
 8023d20:	4618      	mov	r0, r3
 8023d22:	f000 fc1c 	bl	802455e <_ZNSt14__array_traitsI7RequestLj10EE6_S_refERA10_KS0_j>
 8023d26:	4603      	mov	r3, r0
 8023d28:	4618      	mov	r0, r3
 8023d2a:	3708      	adds	r7, #8
 8023d2c:	46bd      	mov	sp, r7
 8023d2e:	bd80      	pop	{r7, pc}

08023d30 <_ZNSt5arrayI7RequestLj10EEixEj>:
      operator[](size_type __n) noexcept
 8023d30:	b580      	push	{r7, lr}
 8023d32:	b082      	sub	sp, #8
 8023d34:	af00      	add	r7, sp, #0
 8023d36:	6078      	str	r0, [r7, #4]
 8023d38:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8023d3a:	687b      	ldr	r3, [r7, #4]
 8023d3c:	6839      	ldr	r1, [r7, #0]
 8023d3e:	4618      	mov	r0, r3
 8023d40:	f000 fc0d 	bl	802455e <_ZNSt14__array_traitsI7RequestLj10EE6_S_refERA10_KS0_j>
 8023d44:	4603      	mov	r3, r0
 8023d46:	4618      	mov	r0, r3
 8023d48:	3708      	adds	r7, #8
 8023d4a:	46bd      	mov	sp, r7
 8023d4c:	bd80      	pop	{r7, pc}

08023d4e <_ZNKSt16initializer_listIN10BHYWrapper8BHYFrameEE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 8023d4e:	b480      	push	{r7}
 8023d50:	b083      	sub	sp, #12
 8023d52:	af00      	add	r7, sp, #0
 8023d54:	6078      	str	r0, [r7, #4]
 8023d56:	687b      	ldr	r3, [r7, #4]
 8023d58:	681b      	ldr	r3, [r3, #0]
 8023d5a:	4618      	mov	r0, r3
 8023d5c:	370c      	adds	r7, #12
 8023d5e:	46bd      	mov	sp, r7
 8023d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023d64:	4770      	bx	lr

08023d66 <_ZNKSt16initializer_listIN10BHYWrapper8BHYFrameEE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 8023d66:	b590      	push	{r4, r7, lr}
 8023d68:	b083      	sub	sp, #12
 8023d6a:	af00      	add	r7, sp, #0
 8023d6c:	6078      	str	r0, [r7, #4]
 8023d6e:	6878      	ldr	r0, [r7, #4]
 8023d70:	f7ff ffed 	bl	8023d4e <_ZNKSt16initializer_listIN10BHYWrapper8BHYFrameEE5beginEv>
 8023d74:	4604      	mov	r4, r0
 8023d76:	6878      	ldr	r0, [r7, #4]
 8023d78:	f000 fc03 	bl	8024582 <_ZNKSt16initializer_listIN10BHYWrapper8BHYFrameEE4sizeEv>
 8023d7c:	4602      	mov	r2, r0
 8023d7e:	4613      	mov	r3, r2
 8023d80:	009b      	lsls	r3, r3, #2
 8023d82:	4413      	add	r3, r2
 8023d84:	009b      	lsls	r3, r3, #2
 8023d86:	4423      	add	r3, r4
 8023d88:	4618      	mov	r0, r3
 8023d8a:	370c      	adds	r7, #12
 8023d8c:	46bd      	mov	sp, r7
 8023d8e:	bd90      	pop	{r4, r7, pc}

08023d90 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_assign_auxIPKS1_EEvT_S7_St20forward_iterator_tag>:
		      std::input_iterator_tag);

      // called by the second assign_dispatch above
      template<typename _ForwardIterator>
	void
	_M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
 8023d90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023d92:	b09f      	sub	sp, #124	; 0x7c
 8023d94:	af02      	add	r7, sp, #8
 8023d96:	60f8      	str	r0, [r7, #12]
 8023d98:	60b9      	str	r1, [r7, #8]
 8023d9a:	607a      	str	r2, [r7, #4]
 8023d9c:	703b      	strb	r3, [r7, #0]
		      std::forward_iterator_tag)
	{
	  const size_type __len = std::distance(__first, __last);
 8023d9e:	68bb      	ldr	r3, [r7, #8]
 8023da0:	6879      	ldr	r1, [r7, #4]
 8023da2:	4618      	mov	r0, r3
 8023da4:	f000 fbf9 	bl	802459a <_ZSt8distanceIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E15difference_typeES5_S5_>
 8023da8:	4603      	mov	r3, r0
 8023daa:	66fb      	str	r3, [r7, #108]	; 0x6c
	  if (__len > size())
 8023dac:	68f8      	ldr	r0, [r7, #12]
 8023dae:	f7ff fdea 	bl	8023986 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8023db2:	4602      	mov	r2, r0
 8023db4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8023db6:	4293      	cmp	r3, r2
 8023db8:	bf8c      	ite	hi
 8023dba:	2301      	movhi	r3, #1
 8023dbc:	2300      	movls	r3, #0
 8023dbe:	b2db      	uxtb	r3, r3
 8023dc0:	2b00      	cmp	r3, #0
 8023dc2:	d031      	beq.n	8023e28 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_assign_auxIPKS1_EEvT_S7_St20forward_iterator_tag+0x98>
	    {
	      _ForwardIterator __mid = __first;
 8023dc4:	68bb      	ldr	r3, [r7, #8]
 8023dc6:	617b      	str	r3, [r7, #20]
	      std::advance(__mid, size());
 8023dc8:	68f8      	ldr	r0, [r7, #12]
 8023dca:	f7ff fddc 	bl	8023986 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8023dce:	4602      	mov	r2, r0
 8023dd0:	f107 0314 	add.w	r3, r7, #20
 8023dd4:	4611      	mov	r1, r2
 8023dd6:	4618      	mov	r0, r3
 8023dd8:	f000 fbf3 	bl	80245c2 <_ZSt7advanceIPKN10BHYWrapper8BHYFrameEjEvRT_T0_>
	      std::copy(__first, __mid, begin());
 8023ddc:	68bc      	ldr	r4, [r7, #8]
 8023dde:	697d      	ldr	r5, [r7, #20]
 8023de0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8023de4:	68f9      	ldr	r1, [r7, #12]
 8023de6:	4618      	mov	r0, r3
 8023de8:	f000 fa65 	bl	80242b6 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5beginEv>
 8023dec:	f107 0018 	add.w	r0, r7, #24
 8023df0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8023df4:	462a      	mov	r2, r5
 8023df6:	4621      	mov	r1, r4
 8023df8:	f000 fbf6 	bl	80245e8 <_ZSt4copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>
	      _M_range_insert_aux(end(), __mid, __last,
 8023dfc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8023e00:	68f9      	ldr	r1, [r7, #12]
 8023e02:	4618      	mov	r0, r3
 8023e04:	f000 fa66 	bl	80242d4 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE3endEv>
 8023e08:	697c      	ldr	r4, [r7, #20]
				  std::__iterator_category(__first));
 8023e0a:	f107 0308 	add.w	r3, r7, #8
 8023e0e:	4618      	mov	r0, r3
 8023e10:	f000 fc0a 	bl	8024628 <_ZSt19__iterator_categoryIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E17iterator_categoryERKS5_>
	      _M_range_insert_aux(end(), __mid, __last,
 8023e14:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8023e18:	f88d 6000 	strb.w	r6, [sp]
 8023e1c:	687b      	ldr	r3, [r7, #4]
 8023e1e:	4622      	mov	r2, r4
 8023e20:	68f8      	ldr	r0, [r7, #12]
 8023e22:	f000 fc0c 	bl	802463e <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE19_M_range_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_St20forward_iterator_tag>
	    }
	  else
	    _M_erase_at_end(std::copy(__first, __last, begin()));
	}
 8023e26:	e014      	b.n	8023e52 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_assign_auxIPKS1_EEvT_S7_St20forward_iterator_tag+0xc2>
	    _M_erase_at_end(std::copy(__first, __last, begin()));
 8023e28:	68bc      	ldr	r4, [r7, #8]
 8023e2a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8023e2e:	68f9      	ldr	r1, [r7, #12]
 8023e30:	4618      	mov	r0, r3
 8023e32:	f000 fa40 	bl	80242b6 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5beginEv>
 8023e36:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8023e3a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8023e3e:	687a      	ldr	r2, [r7, #4]
 8023e40:	4621      	mov	r1, r4
 8023e42:	f000 fbd1 	bl	80245e8 <_ZSt4copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>
 8023e46:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8023e4a:	4619      	mov	r1, r3
 8023e4c:	68f8      	ldr	r0, [r7, #12]
 8023e4e:	f000 fc73 	bl	8024738 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_erase_at_endESt15_Deque_iteratorIS1_RS1_PS1_E>
	}
 8023e52:	bf00      	nop
 8023e54:	3774      	adds	r7, #116	; 0x74
 8023e56:	46bd      	mov	sp, r7
 8023e58:	bdf0      	pop	{r4, r5, r6, r7, pc}

08023e5a <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>:
       *  in C++11, C++14 and C++17. Changed in C++20 to call
       *  `std::construct_at(__p, std::forward<_Args>(__args)...)` instead.
      */
      template<typename _Up, typename... _Args>
	static _GLIBCXX20_CONSTEXPR void
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8023e5a:	b580      	push	{r7, lr}
 8023e5c:	b084      	sub	sp, #16
 8023e5e:	af00      	add	r7, sp, #0
 8023e60:	60f8      	str	r0, [r7, #12]
 8023e62:	60b9      	str	r1, [r7, #8]
 8023e64:	607a      	str	r2, [r7, #4]
		  _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{
#if __cplusplus <= 201703L
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8023e66:	6878      	ldr	r0, [r7, #4]
 8023e68:	f000 fc99 	bl	802479e <_ZSt7forwardIRKN10BHYWrapper8BHYFrameEEOT_RNSt16remove_referenceIS4_E4typeE>
 8023e6c:	4603      	mov	r3, r0
 8023e6e:	461a      	mov	r2, r3
 8023e70:	68b9      	ldr	r1, [r7, #8]
 8023e72:	68f8      	ldr	r0, [r7, #12]
 8023e74:	f000 fc9e 	bl	80247b4 <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE9constructIS2_JRKS2_EEEvPT_DpOT0_>
#else
	  std::construct_at(__p, std::forward<_Args>(__args)...);
#endif
	}
 8023e78:	bf00      	nop
 8023e7a:	3710      	adds	r7, #16
 8023e7c:	46bd      	mov	sp, r7
 8023e7e:	bd80      	pop	{r7, pc}

08023e80 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_push_front_auxIJRKS1_EEEvDpOT_>:
  // Called only if _M_impl._M_start._M_cur == _M_impl._M_start._M_first.
  template<typename _Tp, typename _Alloc>
#if __cplusplus >= 201103L
    template<typename... _Args>
      void
      deque<_Tp, _Alloc>::
 8023e80:	b5b0      	push	{r4, r5, r7, lr}
 8023e82:	b082      	sub	sp, #8
 8023e84:	af00      	add	r7, sp, #0
 8023e86:	6078      	str	r0, [r7, #4]
 8023e88:	6039      	str	r1, [r7, #0]
      void
      deque<_Tp, _Alloc>::
      _M_push_front_aux(const value_type& __t)
#endif
      {
	if (size() == max_size())
 8023e8a:	6878      	ldr	r0, [r7, #4]
 8023e8c:	f7ff fd7b 	bl	8023986 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8023e90:	4604      	mov	r4, r0
 8023e92:	6878      	ldr	r0, [r7, #4]
 8023e94:	f000 fca7 	bl	80247e6 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE8max_sizeEv>
 8023e98:	4603      	mov	r3, r0
 8023e9a:	429c      	cmp	r4, r3
 8023e9c:	bf0c      	ite	eq
 8023e9e:	2301      	moveq	r3, #1
 8023ea0:	2300      	movne	r3, #0
 8023ea2:	b2db      	uxtb	r3, r3
 8023ea4:	2b00      	cmp	r3, #0
 8023ea6:	d002      	beq.n	8023eae <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_push_front_auxIJRKS1_EEEvDpOT_+0x2e>
	  __throw_length_error(
 8023ea8:	4817      	ldr	r0, [pc, #92]	; (8023f08 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_push_front_auxIJRKS1_EEEvDpOT_+0x88>)
 8023eaa:	f017 fee9 	bl	803bc80 <_ZSt20__throw_length_errorPKc>
	      __N("cannot create std::deque larger than max_size()"));

	_M_reserve_map_at_front();
 8023eae:	2101      	movs	r1, #1
 8023eb0:	6878      	ldr	r0, [r7, #4]
 8023eb2:	f000 fca9 	bl	8024808 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_reserve_map_at_frontEj>
	*(this->_M_impl._M_start._M_node - 1) = this->_M_allocate_node();
 8023eb6:	687a      	ldr	r2, [r7, #4]
 8023eb8:	687b      	ldr	r3, [r7, #4]
 8023eba:	695b      	ldr	r3, [r3, #20]
 8023ebc:	1f1c      	subs	r4, r3, #4
 8023ebe:	4610      	mov	r0, r2
 8023ec0:	f000 fcba 	bl	8024838 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_allocate_nodeEv>
 8023ec4:	4603      	mov	r3, r0
 8023ec6:	6023      	str	r3, [r4, #0]
	__try
	  {
	    this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node
 8023ec8:	687b      	ldr	r3, [r7, #4]
 8023eca:	f103 0208 	add.w	r2, r3, #8
 8023ece:	687b      	ldr	r3, [r7, #4]
 8023ed0:	695b      	ldr	r3, [r3, #20]
 8023ed2:	3b04      	subs	r3, #4
 8023ed4:	4619      	mov	r1, r3
 8023ed6:	4610      	mov	r0, r2
 8023ed8:	f000 fcc0 	bl	802485c <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E11_M_set_nodeEPS3_>
					       - 1);
	    this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_last - 1;
 8023edc:	687b      	ldr	r3, [r7, #4]
 8023ede:	691b      	ldr	r3, [r3, #16]
 8023ee0:	f1a3 0214 	sub.w	r2, r3, #20
 8023ee4:	687b      	ldr	r3, [r7, #4]
 8023ee6:	609a      	str	r2, [r3, #8]
#if __cplusplus >= 201103L
	    _Alloc_traits::construct(this->_M_impl,
 8023ee8:	687c      	ldr	r4, [r7, #4]
 8023eea:	687b      	ldr	r3, [r7, #4]
 8023eec:	689d      	ldr	r5, [r3, #8]
 8023eee:	6838      	ldr	r0, [r7, #0]
 8023ef0:	f000 fc55 	bl	802479e <_ZSt7forwardIRKN10BHYWrapper8BHYFrameEEOT_RNSt16remove_referenceIS4_E4typeE>
 8023ef4:	4603      	mov	r3, r0
 8023ef6:	461a      	mov	r2, r3
 8023ef8:	4629      	mov	r1, r5
 8023efa:	4620      	mov	r0, r4
 8023efc:	f7ff ffad 	bl	8023e5a <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
	  {
	    ++this->_M_impl._M_start;
	    _M_deallocate_node(*(this->_M_impl._M_start._M_node - 1));
	    __throw_exception_again;
	  }
      }
 8023f00:	bf00      	nop
 8023f02:	3708      	adds	r7, #8
 8023f04:	46bd      	mov	sp, r7
 8023f06:	bdb0      	pop	{r4, r5, r7, pc}
 8023f08:	0803dd18 	.word	0x0803dd18

08023f0c <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_ES6_>:
      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8023f0c:	b580      	push	{r7, lr}
 8023f0e:	b082      	sub	sp, #8
 8023f10:	af00      	add	r7, sp, #0
 8023f12:	6078      	str	r0, [r7, #4]
 8023f14:	6039      	str	r1, [r7, #0]
	return difference_type(_S_buffer_size())
 8023f16:	f000 fcd0 	bl	80248ba <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 8023f1a:	4603      	mov	r3, r0
 8023f1c:	4619      	mov	r1, r3
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 8023f1e:	687b      	ldr	r3, [r7, #4]
 8023f20:	68da      	ldr	r2, [r3, #12]
 8023f22:	683b      	ldr	r3, [r7, #0]
 8023f24:	68db      	ldr	r3, [r3, #12]
 8023f26:	1ad3      	subs	r3, r2, r3
 8023f28:	109b      	asrs	r3, r3, #2
 8023f2a:	3b01      	subs	r3, #1
 8023f2c:	fb01 f303 	mul.w	r3, r1, r3
 8023f30:	687a      	ldr	r2, [r7, #4]
 8023f32:	6811      	ldr	r1, [r2, #0]
 8023f34:	687a      	ldr	r2, [r7, #4]
 8023f36:	6852      	ldr	r2, [r2, #4]
 8023f38:	1a8a      	subs	r2, r1, r2
 8023f3a:	1092      	asrs	r2, r2, #2
 8023f3c:	4908      	ldr	r1, [pc, #32]	; (8023f60 <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_ES6_+0x54>)
 8023f3e:	fb01 f202 	mul.w	r2, r1, r2
 8023f42:	4413      	add	r3, r2
	  + (__y._M_last - __y._M_cur);
 8023f44:	683a      	ldr	r2, [r7, #0]
 8023f46:	6891      	ldr	r1, [r2, #8]
 8023f48:	683a      	ldr	r2, [r7, #0]
 8023f4a:	6812      	ldr	r2, [r2, #0]
 8023f4c:	1a8a      	subs	r2, r1, r2
 8023f4e:	1092      	asrs	r2, r2, #2
 8023f50:	4903      	ldr	r1, [pc, #12]	; (8023f60 <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_ES6_+0x54>)
 8023f52:	fb01 f202 	mul.w	r2, r1, r2
 8023f56:	4413      	add	r3, r2
      }
 8023f58:	4618      	mov	r0, r3
 8023f5a:	3708      	adds	r7, #8
 8023f5c:	46bd      	mov	sp, r7
 8023f5e:	bd80      	pop	{r7, pc}
 8023f60:	cccccccd 	.word	0xcccccccd

08023f64 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8023f64:	b480      	push	{r7}
 8023f66:	b083      	sub	sp, #12
 8023f68:	af00      	add	r7, sp, #0
 8023f6a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8023f6c:	687b      	ldr	r3, [r7, #4]
 8023f6e:	4618      	mov	r0, r3
 8023f70:	370c      	adds	r7, #12
 8023f72:	46bd      	mov	sp, r7
 8023f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023f78:	4770      	bx	lr

08023f7a <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE7destroyIS1_EEvRS2_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static _GLIBCXX20_CONSTEXPR void
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8023f7a:	b580      	push	{r7, lr}
 8023f7c:	b082      	sub	sp, #8
 8023f7e:	af00      	add	r7, sp, #0
 8023f80:	6078      	str	r0, [r7, #4]
 8023f82:	6039      	str	r1, [r7, #0]
	noexcept(is_nothrow_destructible<_Up>::value)
	{
#if __cplusplus <= 201703L
	  __a.destroy(__p);
 8023f84:	6839      	ldr	r1, [r7, #0]
 8023f86:	6878      	ldr	r0, [r7, #4]
 8023f88:	f000 fc9f 	bl	80248ca <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE7destroyIS2_EEvPT_>
#else
	  std::destroy_at(__p);
#endif
	}
 8023f8c:	bf00      	nop
 8023f8e:	3708      	adds	r7, #8
 8023f90:	46bd      	mov	sp, r7
 8023f92:	bd80      	pop	{r7, pc}

08023f94 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_pop_back_auxEv>:

  // Called only if _M_impl._M_finish._M_cur == _M_impl._M_finish._M_first.
  template <typename _Tp, typename _Alloc>
    void deque<_Tp, _Alloc>::
 8023f94:	b580      	push	{r7, lr}
 8023f96:	b082      	sub	sp, #8
 8023f98:	af00      	add	r7, sp, #0
 8023f9a:	6078      	str	r0, [r7, #4]
    _M_pop_back_aux()
    {
      _M_deallocate_node(this->_M_impl._M_finish._M_first);
 8023f9c:	687a      	ldr	r2, [r7, #4]
 8023f9e:	687b      	ldr	r3, [r7, #4]
 8023fa0:	69db      	ldr	r3, [r3, #28]
 8023fa2:	4619      	mov	r1, r3
 8023fa4:	4610      	mov	r0, r2
 8023fa6:	f000 fc75 	bl	8024894 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE18_M_deallocate_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node - 1);
 8023faa:	687b      	ldr	r3, [r7, #4]
 8023fac:	f103 0218 	add.w	r2, r3, #24
 8023fb0:	687b      	ldr	r3, [r7, #4]
 8023fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023fb4:	3b04      	subs	r3, #4
 8023fb6:	4619      	mov	r1, r3
 8023fb8:	4610      	mov	r0, r2
 8023fba:	f000 fc4f 	bl	802485c <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_last - 1;
 8023fbe:	687b      	ldr	r3, [r7, #4]
 8023fc0:	6a1b      	ldr	r3, [r3, #32]
 8023fc2:	f1a3 0214 	sub.w	r2, r3, #20
 8023fc6:	687b      	ldr	r3, [r7, #4]
 8023fc8:	619a      	str	r2, [r3, #24]
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8023fca:	687b      	ldr	r3, [r7, #4]
 8023fcc:	4618      	mov	r0, r3
 8023fce:	f7ff ffc9 	bl	8023f64 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 8023fd2:	4602      	mov	r2, r0
 8023fd4:	687b      	ldr	r3, [r7, #4]
 8023fd6:	699b      	ldr	r3, [r3, #24]
 8023fd8:	4619      	mov	r1, r3
 8023fda:	4610      	mov	r0, r2
 8023fdc:	f7ff ffcd 	bl	8023f7a <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE7destroyIS1_EEvRS2_PT_>
			     this->_M_impl._M_finish._M_cur);
    }
 8023fe0:	bf00      	nop
 8023fe2:	3708      	adds	r7, #8
 8023fe4:	46bd      	mov	sp, r7
 8023fe6:	bd80      	pop	{r7, pc}

08023fe8 <_ZSteqRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_ES6_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8023fe8:	b480      	push	{r7}
 8023fea:	b083      	sub	sp, #12
 8023fec:	af00      	add	r7, sp, #0
 8023fee:	6078      	str	r0, [r7, #4]
 8023ff0:	6039      	str	r1, [r7, #0]
      { return __x._M_cur == __y._M_cur; }
 8023ff2:	687b      	ldr	r3, [r7, #4]
 8023ff4:	681a      	ldr	r2, [r3, #0]
 8023ff6:	683b      	ldr	r3, [r7, #0]
 8023ff8:	681b      	ldr	r3, [r3, #0]
 8023ffa:	429a      	cmp	r2, r3
 8023ffc:	bf0c      	ite	eq
 8023ffe:	2301      	moveq	r3, #1
 8024000:	2300      	movne	r3, #0
 8024002:	b2db      	uxtb	r3, r3
 8024004:	4618      	mov	r0, r3
 8024006:	370c      	adds	r7, #12
 8024008:	46bd      	mov	sp, r7
 802400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802400e:	4770      	bx	lr

08024010 <_ZNKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EixEi>:
      operator[](difference_type __n) const _GLIBCXX_NOEXCEPT
 8024010:	b580      	push	{r7, lr}
 8024012:	b086      	sub	sp, #24
 8024014:	af00      	add	r7, sp, #0
 8024016:	6078      	str	r0, [r7, #4]
 8024018:	6039      	str	r1, [r7, #0]
      { return *(*this + __n); }
 802401a:	f107 0308 	add.w	r3, r7, #8
 802401e:	683a      	ldr	r2, [r7, #0]
 8024020:	6879      	ldr	r1, [r7, #4]
 8024022:	4618      	mov	r0, r3
 8024024:	f000 fc5c 	bl	80248e0 <_ZStplRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>
 8024028:	f107 0308 	add.w	r3, r7, #8
 802402c:	4618      	mov	r0, r3
 802402e:	f000 fc6a 	bl	8024906 <_ZNKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EdeEv>
 8024032:	4603      	mov	r3, r0
 8024034:	4618      	mov	r0, r3
 8024036:	3718      	adds	r7, #24
 8024038:	46bd      	mov	sp, r7
 802403a:	bd80      	pop	{r7, pc}

0802403c <_ZNSt5dequeIjSaIjEE9push_backERKj>:
      push_back(const value_type& __x)
 802403c:	b580      	push	{r7, lr}
 802403e:	b082      	sub	sp, #8
 8024040:	af00      	add	r7, sp, #0
 8024042:	6078      	str	r0, [r7, #4]
 8024044:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish._M_cur
 8024046:	687b      	ldr	r3, [r7, #4]
 8024048:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 802404a:	687b      	ldr	r3, [r7, #4]
 802404c:	6a1b      	ldr	r3, [r3, #32]
 802404e:	3b04      	subs	r3, #4
	if (this->_M_impl._M_finish._M_cur
 8024050:	429a      	cmp	r2, r3
 8024052:	d00c      	beq.n	802406e <_ZNSt5dequeIjSaIjEE9push_backERKj+0x32>
	    _Alloc_traits::construct(this->_M_impl,
 8024054:	6878      	ldr	r0, [r7, #4]
 8024056:	687b      	ldr	r3, [r7, #4]
 8024058:	699b      	ldr	r3, [r3, #24]
 802405a:	683a      	ldr	r2, [r7, #0]
 802405c:	4619      	mov	r1, r3
 802405e:	f000 fc5e 	bl	802491e <_ZNSt16allocator_traitsISaIjEE9constructIjJRKjEEEvRS0_PT_DpOT0_>
	    ++this->_M_impl._M_finish._M_cur;
 8024062:	687b      	ldr	r3, [r7, #4]
 8024064:	699b      	ldr	r3, [r3, #24]
 8024066:	1d1a      	adds	r2, r3, #4
 8024068:	687b      	ldr	r3, [r7, #4]
 802406a:	619a      	str	r2, [r3, #24]
      }
 802406c:	e003      	b.n	8024076 <_ZNSt5dequeIjSaIjEE9push_backERKj+0x3a>
	  _M_push_back_aux(__x);
 802406e:	6839      	ldr	r1, [r7, #0]
 8024070:	6878      	ldr	r0, [r7, #4]
 8024072:	f000 fc67 	bl	8024944 <_ZNSt5dequeIjSaIjEE16_M_push_back_auxIJRKjEEEvDpOT_>
      }
 8024076:	bf00      	nop
 8024078:	3708      	adds	r7, #8
 802407a:	46bd      	mov	sp, r7
 802407c:	bd80      	pop	{r7, pc}

0802407e <_ZNKSt5dequeIjSaIjEE5frontEv>:
      front() const _GLIBCXX_NOEXCEPT
 802407e:	b580      	push	{r7, lr}
 8024080:	b086      	sub	sp, #24
 8024082:	af00      	add	r7, sp, #0
 8024084:	6078      	str	r0, [r7, #4]
	return *begin();
 8024086:	f107 0308 	add.w	r3, r7, #8
 802408a:	6879      	ldr	r1, [r7, #4]
 802408c:	4618      	mov	r0, r3
 802408e:	f000 fc9d 	bl	80249cc <_ZNKSt5dequeIjSaIjEE5beginEv>
 8024092:	f107 0308 	add.w	r3, r7, #8
 8024096:	4618      	mov	r0, r3
 8024098:	f000 fca7 	bl	80249ea <_ZNKSt15_Deque_iteratorIjRKjPS0_EdeEv>
 802409c:	4603      	mov	r3, r0
      }
 802409e:	4618      	mov	r0, r3
 80240a0:	3718      	adds	r7, #24
 80240a2:	46bd      	mov	sp, r7
 80240a4:	bd80      	pop	{r7, pc}

080240a6 <_ZNKSt5dequeIjSaIjEE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 80240a6:	b580      	push	{r7, lr}
 80240a8:	b082      	sub	sp, #8
 80240aa:	af00      	add	r7, sp, #0
 80240ac:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
 80240ae:	687b      	ldr	r3, [r7, #4]
 80240b0:	f103 0218 	add.w	r2, r3, #24
 80240b4:	687b      	ldr	r3, [r7, #4]
 80240b6:	3308      	adds	r3, #8
 80240b8:	4619      	mov	r1, r3
 80240ba:	4610      	mov	r0, r2
 80240bc:	f000 fca1 	bl	8024a02 <_ZSteqRKSt15_Deque_iteratorIjRjPjES4_>
 80240c0:	4603      	mov	r3, r0
 80240c2:	4618      	mov	r0, r3
 80240c4:	3708      	adds	r7, #8
 80240c6:	46bd      	mov	sp, r7
 80240c8:	bd80      	pop	{r7, pc}

080240ca <_ZNSt5dequeIjSaIjEE9pop_frontEv>:
      pop_front() _GLIBCXX_NOEXCEPT
 80240ca:	b580      	push	{r7, lr}
 80240cc:	b082      	sub	sp, #8
 80240ce:	af00      	add	r7, sp, #0
 80240d0:	6078      	str	r0, [r7, #4]
	if (this->_M_impl._M_start._M_cur
 80240d2:	687b      	ldr	r3, [r7, #4]
 80240d4:	689a      	ldr	r2, [r3, #8]
	    != this->_M_impl._M_start._M_last - 1)
 80240d6:	687b      	ldr	r3, [r7, #4]
 80240d8:	691b      	ldr	r3, [r3, #16]
 80240da:	3b04      	subs	r3, #4
	if (this->_M_impl._M_start._M_cur
 80240dc:	429a      	cmp	r2, r3
 80240de:	d010      	beq.n	8024102 <_ZNSt5dequeIjSaIjEE9pop_frontEv+0x38>
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
 80240e0:	687b      	ldr	r3, [r7, #4]
 80240e2:	4618      	mov	r0, r3
 80240e4:	f000 f98b 	bl	80243fe <_ZNSt11_Deque_baseIjSaIjEE19_M_get_Tp_allocatorEv>
 80240e8:	4602      	mov	r2, r0
 80240ea:	687b      	ldr	r3, [r7, #4]
 80240ec:	689b      	ldr	r3, [r3, #8]
 80240ee:	4619      	mov	r1, r3
 80240f0:	4610      	mov	r0, r2
 80240f2:	f000 fc9a 	bl	8024a2a <_ZNSt16allocator_traitsISaIjEE7destroyIjEEvRS0_PT_>
	    ++this->_M_impl._M_start._M_cur;
 80240f6:	687b      	ldr	r3, [r7, #4]
 80240f8:	689b      	ldr	r3, [r3, #8]
 80240fa:	1d1a      	adds	r2, r3, #4
 80240fc:	687b      	ldr	r3, [r7, #4]
 80240fe:	609a      	str	r2, [r3, #8]
      }
 8024100:	e002      	b.n	8024108 <_ZNSt5dequeIjSaIjEE9pop_frontEv+0x3e>
	  _M_pop_front_aux();
 8024102:	6878      	ldr	r0, [r7, #4]
 8024104:	f000 fc9e 	bl	8024a44 <_ZNSt5dequeIjSaIjEE16_M_pop_front_auxEv>
      }
 8024108:	bf00      	nop
 802410a:	3708      	adds	r7, #8
 802410c:	46bd      	mov	sp, r7
 802410e:	bd80      	pop	{r7, pc}

08024110 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8024110:	b580      	push	{r7, lr}
 8024112:	b082      	sub	sp, #8
 8024114:	af00      	add	r7, sp, #0
 8024116:	6078      	str	r0, [r7, #4]
 8024118:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 802411a:	683b      	ldr	r3, [r7, #0]
 802411c:	3308      	adds	r3, #8
 802411e:	4619      	mov	r1, r3
 8024120:	6878      	ldr	r0, [r7, #4]
 8024122:	f000 fcb7 	bl	8024a94 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERKS1_PS2_EC1IS_IS1_RS1_PS1_EvEERKT_>
 8024126:	6878      	ldr	r0, [r7, #4]
 8024128:	3708      	adds	r7, #8
 802412a:	46bd      	mov	sp, r7
 802412c:	bd80      	pop	{r7, pc}

0802412e <_ZNKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERKS1_PS2_EdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 802412e:	b480      	push	{r7}
 8024130:	b083      	sub	sp, #12
 8024132:	af00      	add	r7, sp, #0
 8024134:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 8024136:	687b      	ldr	r3, [r7, #4]
 8024138:	681b      	ldr	r3, [r3, #0]
 802413a:	4618      	mov	r0, r3
 802413c:	370c      	adds	r7, #12
 802413e:	46bd      	mov	sp, r7
 8024140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024144:	4770      	bx	lr

08024146 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 8024146:	b580      	push	{r7, lr}
 8024148:	b082      	sub	sp, #8
 802414a:	af00      	add	r7, sp, #0
 802414c:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 802414e:	6878      	ldr	r0, [r7, #4]
 8024150:	f000 fcbc 	bl	8024acc <_ZNSaIN10BHYWrapper8BHYFrameEEC1Ev>
 8024154:	687b      	ldr	r3, [r7, #4]
 8024156:	4618      	mov	r0, r3
 8024158:	f000 fcc4 	bl	8024ae4 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_dataC1Ev>
	{ }
 802415c:	687b      	ldr	r3, [r7, #4]
 802415e:	4618      	mov	r0, r3
 8024160:	3708      	adds	r7, #8
 8024162:	46bd      	mov	sp, r7
 8024164:	bd80      	pop	{r7, pc}

08024166 <_ZNSaIN10BHYWrapper8BHYFrameEED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8024166:	b580      	push	{r7, lr}
 8024168:	b082      	sub	sp, #8
 802416a:	af00      	add	r7, sp, #0
 802416c:	6078      	str	r0, [r7, #4]
 802416e:	6878      	ldr	r0, [r7, #4]
 8024170:	f000 fcd1 	bl	8024b16 <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEED1Ev>
 8024174:	687b      	ldr	r3, [r7, #4]
 8024176:	4618      	mov	r0, r3
 8024178:	3708      	adds	r7, #8
 802417a:	46bd      	mov	sp, r7
 802417c:	bd80      	pop	{r7, pc}

0802417e <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 802417e:	b590      	push	{r4, r7, lr}
 8024180:	b089      	sub	sp, #36	; 0x24
 8024182:	af00      	add	r7, sp, #0
 8024184:	6078      	str	r0, [r7, #4]
 8024186:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 8024188:	2014      	movs	r0, #20
 802418a:	f7fc fe9d 	bl	8020ec8 <_ZSt16__deque_buf_sizej>
 802418e:	4602      	mov	r2, r0
 8024190:	683b      	ldr	r3, [r7, #0]
 8024192:	fbb3 f3f2 	udiv	r3, r3, r2
 8024196:	3301      	adds	r3, #1
 8024198:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 802419a:	2308      	movs	r3, #8
 802419c:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 802419e:	69fb      	ldr	r3, [r7, #28]
 80241a0:	3302      	adds	r3, #2
 80241a2:	613b      	str	r3, [r7, #16]
 80241a4:	f107 0210 	add.w	r2, r7, #16
 80241a8:	f107 030c 	add.w	r3, r7, #12
 80241ac:	4611      	mov	r1, r2
 80241ae:	4618      	mov	r0, r3
 80241b0:	f000 fcbc 	bl	8024b2c <_ZSt3maxIjERKT_S2_S2_>
 80241b4:	4603      	mov	r3, r0
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 80241b6:	681a      	ldr	r2, [r3, #0]
 80241b8:	687b      	ldr	r3, [r7, #4]
 80241ba:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 80241bc:	687b      	ldr	r3, [r7, #4]
 80241be:	685b      	ldr	r3, [r3, #4]
 80241c0:	4619      	mov	r1, r3
 80241c2:	6878      	ldr	r0, [r7, #4]
 80241c4:	f000 fcc6 	bl	8024b54 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE15_M_allocate_mapEj>
 80241c8:	4602      	mov	r2, r0
 80241ca:	687b      	ldr	r3, [r7, #4]
 80241cc:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 80241ce:	687b      	ldr	r3, [r7, #4]
 80241d0:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 80241d2:	687b      	ldr	r3, [r7, #4]
 80241d4:	6859      	ldr	r1, [r3, #4]
 80241d6:	69fb      	ldr	r3, [r7, #28]
 80241d8:	1acb      	subs	r3, r1, r3
 80241da:	085b      	lsrs	r3, r3, #1
 80241dc:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 80241de:	4413      	add	r3, r2
 80241e0:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 80241e2:	69fb      	ldr	r3, [r7, #28]
 80241e4:	009b      	lsls	r3, r3, #2
 80241e6:	69ba      	ldr	r2, [r7, #24]
 80241e8:	4413      	add	r3, r2
 80241ea:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 80241ec:	697a      	ldr	r2, [r7, #20]
 80241ee:	69b9      	ldr	r1, [r7, #24]
 80241f0:	6878      	ldr	r0, [r7, #4]
 80241f2:	f000 fccc 	bl	8024b8e <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE15_M_create_nodesEPPS1_S5_>
      this->_M_impl._M_start._M_set_node(__nstart);
 80241f6:	687b      	ldr	r3, [r7, #4]
 80241f8:	3308      	adds	r3, #8
 80241fa:	69b9      	ldr	r1, [r7, #24]
 80241fc:	4618      	mov	r0, r3
 80241fe:	f000 fb2d 	bl	802485c <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 8024202:	687b      	ldr	r3, [r7, #4]
 8024204:	f103 0218 	add.w	r2, r3, #24
 8024208:	697b      	ldr	r3, [r7, #20]
 802420a:	3b04      	subs	r3, #4
 802420c:	4619      	mov	r1, r3
 802420e:	4610      	mov	r0, r2
 8024210:	f000 fb24 	bl	802485c <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 8024214:	687b      	ldr	r3, [r7, #4]
 8024216:	68da      	ldr	r2, [r3, #12]
 8024218:	687b      	ldr	r3, [r7, #4]
 802421a:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 802421c:	687b      	ldr	r3, [r7, #4]
 802421e:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 8024220:	2014      	movs	r0, #20
 8024222:	f7fc fe51 	bl	8020ec8 <_ZSt16__deque_buf_sizej>
 8024226:	4602      	mov	r2, r0
 8024228:	683b      	ldr	r3, [r7, #0]
 802422a:	fbb3 f1f2 	udiv	r1, r3, r2
 802422e:	fb01 f202 	mul.w	r2, r1, r2
 8024232:	1a9a      	subs	r2, r3, r2
					+ __num_elements
 8024234:	4613      	mov	r3, r2
 8024236:	009b      	lsls	r3, r3, #2
 8024238:	4413      	add	r3, r2
 802423a:	009b      	lsls	r3, r3, #2
 802423c:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 802423e:	687b      	ldr	r3, [r7, #4]
 8024240:	619a      	str	r2, [r3, #24]
    }
 8024242:	bf00      	nop
 8024244:	3724      	adds	r7, #36	; 0x24
 8024246:	46bd      	mov	sp, r7
 8024248:	bd90      	pop	{r4, r7, pc}

0802424a <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_destroy_nodesEPPS1_S5_>:
    _Deque_base<_Tp, _Alloc>::
 802424a:	b580      	push	{r7, lr}
 802424c:	b086      	sub	sp, #24
 802424e:	af00      	add	r7, sp, #0
 8024250:	60f8      	str	r0, [r7, #12]
 8024252:	60b9      	str	r1, [r7, #8]
 8024254:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8024256:	68bb      	ldr	r3, [r7, #8]
 8024258:	617b      	str	r3, [r7, #20]
 802425a:	697a      	ldr	r2, [r7, #20]
 802425c:	687b      	ldr	r3, [r7, #4]
 802425e:	429a      	cmp	r2, r3
 8024260:	d209      	bcs.n	8024276 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_destroy_nodesEPPS1_S5_+0x2c>
	_M_deallocate_node(*__n);
 8024262:	697b      	ldr	r3, [r7, #20]
 8024264:	681b      	ldr	r3, [r3, #0]
 8024266:	4619      	mov	r1, r3
 8024268:	68f8      	ldr	r0, [r7, #12]
 802426a:	f000 fb13 	bl	8024894 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE18_M_deallocate_nodeEPS1_>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 802426e:	697b      	ldr	r3, [r7, #20]
 8024270:	3304      	adds	r3, #4
 8024272:	617b      	str	r3, [r7, #20]
 8024274:	e7f1      	b.n	802425a <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_destroy_nodesEPPS1_S5_+0x10>
    }
 8024276:	bf00      	nop
 8024278:	3718      	adds	r7, #24
 802427a:	46bd      	mov	sp, r7
 802427c:	bd80      	pop	{r7, pc}

0802427e <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE17_M_deallocate_mapEPPS1_j>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 802427e:	b580      	push	{r7, lr}
 8024280:	b086      	sub	sp, #24
 8024282:	af00      	add	r7, sp, #0
 8024284:	60f8      	str	r0, [r7, #12]
 8024286:	60b9      	str	r1, [r7, #8]
 8024288:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 802428a:	f107 0314 	add.w	r3, r7, #20
 802428e:	68f9      	ldr	r1, [r7, #12]
 8024290:	4618      	mov	r0, r3
 8024292:	f000 fc96 	bl	8024bc2 <_ZNKSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 8024296:	f107 0314 	add.w	r3, r7, #20
 802429a:	687a      	ldr	r2, [r7, #4]
 802429c:	68b9      	ldr	r1, [r7, #8]
 802429e:	4618      	mov	r0, r3
 80242a0:	f000 fcac 	bl	8024bfc <_ZNSt16allocator_traitsISaIPN10BHYWrapper8BHYFrameEEE10deallocateERS3_PS2_j>
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 80242a4:	f107 0314 	add.w	r3, r7, #20
 80242a8:	4618      	mov	r0, r3
 80242aa:	f000 fc9b 	bl	8024be4 <_ZNSaIPN10BHYWrapper8BHYFrameEED1Ev>
      }
 80242ae:	bf00      	nop
 80242b0:	3718      	adds	r7, #24
 80242b2:	46bd      	mov	sp, r7
 80242b4:	bd80      	pop	{r7, pc}

080242b6 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80242b6:	b580      	push	{r7, lr}
 80242b8:	b082      	sub	sp, #8
 80242ba:	af00      	add	r7, sp, #0
 80242bc:	6078      	str	r0, [r7, #4]
 80242be:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 80242c0:	683b      	ldr	r3, [r7, #0]
 80242c2:	3308      	adds	r3, #8
 80242c4:	4619      	mov	r1, r3
 80242c6:	6878      	ldr	r0, [r7, #4]
 80242c8:	f000 f813 	bl	80242f2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80242cc:	6878      	ldr	r0, [r7, #4]
 80242ce:	3708      	adds	r7, #8
 80242d0:	46bd      	mov	sp, r7
 80242d2:	bd80      	pop	{r7, pc}

080242d4 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80242d4:	b580      	push	{r7, lr}
 80242d6:	b082      	sub	sp, #8
 80242d8:	af00      	add	r7, sp, #0
 80242da:	6078      	str	r0, [r7, #4]
 80242dc:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 80242de:	683b      	ldr	r3, [r7, #0]
 80242e0:	3318      	adds	r3, #24
 80242e2:	4619      	mov	r1, r3
 80242e4:	6878      	ldr	r0, [r7, #4]
 80242e6:	f000 f804 	bl	80242f2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80242ea:	6878      	ldr	r0, [r7, #4]
 80242ec:	3708      	adds	r7, #8
 80242ee:	46bd      	mov	sp, r7
 80242f0:	bd80      	pop	{r7, pc}

080242f2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 80242f2:	b480      	push	{r7}
 80242f4:	b083      	sub	sp, #12
 80242f6:	af00      	add	r7, sp, #0
 80242f8:	6078      	str	r0, [r7, #4]
 80242fa:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 80242fc:	683b      	ldr	r3, [r7, #0]
 80242fe:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8024300:	687b      	ldr	r3, [r7, #4]
 8024302:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8024304:	683b      	ldr	r3, [r7, #0]
 8024306:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8024308:	687b      	ldr	r3, [r7, #4]
 802430a:	605a      	str	r2, [r3, #4]
 802430c:	683b      	ldr	r3, [r7, #0]
 802430e:	689a      	ldr	r2, [r3, #8]
 8024310:	687b      	ldr	r3, [r7, #4]
 8024312:	609a      	str	r2, [r3, #8]
 8024314:	683b      	ldr	r3, [r7, #0]
 8024316:	68da      	ldr	r2, [r3, #12]
 8024318:	687b      	ldr	r3, [r7, #4]
 802431a:	60da      	str	r2, [r3, #12]
 802431c:	687b      	ldr	r3, [r7, #4]
 802431e:	4618      	mov	r0, r3
 8024320:	370c      	adds	r7, #12
 8024322:	46bd      	mov	sp, r7
 8024324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024328:	4770      	bx	lr

0802432a <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_destroy_dataESt15_Deque_iteratorIS1_RS1_PS1_ES7_RKS2_>:
	void
	_M_destroy_data(iterator __first, iterator __last, const _Alloc1&)
	{ _M_destroy_data_aux(__first, __last); }

      void
      _M_destroy_data(iterator __first, iterator __last,
 802432a:	b480      	push	{r7}
 802432c:	b08d      	sub	sp, #52	; 0x34
 802432e:	af00      	add	r7, sp, #0
 8024330:	60f8      	str	r0, [r7, #12]
 8024332:	60b9      	str	r1, [r7, #8]
 8024334:	607a      	str	r2, [r7, #4]
 8024336:	603b      	str	r3, [r7, #0]
		      const std::allocator<_Tp>&)
      {
	if (!__has_trivial_destructor(value_type))
	  _M_destroy_data_aux(__first, __last);
      }
 8024338:	bf00      	nop
 802433a:	3734      	adds	r7, #52	; 0x34
 802433c:	46bd      	mov	sp, r7
 802433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024342:	4770      	bx	lr

08024344 <_ZNSt11_Deque_baseIjSaIjEE11_Deque_implD1Ev>:
      struct _Deque_impl
 8024344:	b580      	push	{r7, lr}
 8024346:	b082      	sub	sp, #8
 8024348:	af00      	add	r7, sp, #0
 802434a:	6078      	str	r0, [r7, #4]
 802434c:	6878      	ldr	r0, [r7, #4]
 802434e:	f000 fc74 	bl	8024c3a <_ZNSaIjED1Ev>
 8024352:	687b      	ldr	r3, [r7, #4]
 8024354:	4618      	mov	r0, r3
 8024356:	3708      	adds	r7, #8
 8024358:	46bd      	mov	sp, r7
 802435a:	bd80      	pop	{r7, pc}

0802435c <_ZNSt11_Deque_baseIjSaIjEEC1Ev>:
      _Deque_base()
 802435c:	b580      	push	{r7, lr}
 802435e:	b082      	sub	sp, #8
 8024360:	af00      	add	r7, sp, #0
 8024362:	6078      	str	r0, [r7, #4]
      : _M_impl()
 8024364:	687b      	ldr	r3, [r7, #4]
 8024366:	4618      	mov	r0, r3
 8024368:	f000 fc57 	bl	8024c1a <_ZNSt11_Deque_baseIjSaIjEE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 802436c:	2100      	movs	r1, #0
 802436e:	6878      	ldr	r0, [r7, #4]
 8024370:	f000 fc6f 	bl	8024c52 <_ZNSt11_Deque_baseIjSaIjEE17_M_initialize_mapEj>
 8024374:	687b      	ldr	r3, [r7, #4]
 8024376:	4618      	mov	r0, r3
 8024378:	3708      	adds	r7, #8
 802437a:	46bd      	mov	sp, r7
 802437c:	bd80      	pop	{r7, pc}

0802437e <_ZNSt11_Deque_baseIjSaIjEED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 802437e:	b580      	push	{r7, lr}
 8024380:	b082      	sub	sp, #8
 8024382:	af00      	add	r7, sp, #0
 8024384:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 8024386:	687b      	ldr	r3, [r7, #4]
 8024388:	681b      	ldr	r3, [r3, #0]
 802438a:	2b00      	cmp	r3, #0
 802438c:	d010      	beq.n	80243b0 <_ZNSt11_Deque_baseIjSaIjEED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 802438e:	687b      	ldr	r3, [r7, #4]
 8024390:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 8024392:	687b      	ldr	r3, [r7, #4]
 8024394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8024396:	3304      	adds	r3, #4
 8024398:	461a      	mov	r2, r3
 802439a:	6878      	ldr	r0, [r7, #4]
 802439c:	f000 fcbc 	bl	8024d18 <_ZNSt11_Deque_baseIjSaIjEE16_M_destroy_nodesEPPjS3_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 80243a0:	687b      	ldr	r3, [r7, #4]
 80243a2:	6819      	ldr	r1, [r3, #0]
 80243a4:	687b      	ldr	r3, [r7, #4]
 80243a6:	685b      	ldr	r3, [r3, #4]
 80243a8:	461a      	mov	r2, r3
 80243aa:	6878      	ldr	r0, [r7, #4]
 80243ac:	f000 fcce 	bl	8024d4c <_ZNSt11_Deque_baseIjSaIjEE17_M_deallocate_mapEPPjj>
    }
 80243b0:	687b      	ldr	r3, [r7, #4]
 80243b2:	4618      	mov	r0, r3
 80243b4:	f7ff ffc6 	bl	8024344 <_ZNSt11_Deque_baseIjSaIjEE11_Deque_implD1Ev>
 80243b8:	687b      	ldr	r3, [r7, #4]
 80243ba:	4618      	mov	r0, r3
 80243bc:	3708      	adds	r7, #8
 80243be:	46bd      	mov	sp, r7
 80243c0:	bd80      	pop	{r7, pc}

080243c2 <_ZNSt5dequeIjSaIjEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80243c2:	b580      	push	{r7, lr}
 80243c4:	b082      	sub	sp, #8
 80243c6:	af00      	add	r7, sp, #0
 80243c8:	6078      	str	r0, [r7, #4]
 80243ca:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 80243cc:	683b      	ldr	r3, [r7, #0]
 80243ce:	3308      	adds	r3, #8
 80243d0:	4619      	mov	r1, r3
 80243d2:	6878      	ldr	r0, [r7, #4]
 80243d4:	f000 f81e 	bl	8024414 <_ZNSt15_Deque_iteratorIjRjPjEC1ERKS2_>
 80243d8:	6878      	ldr	r0, [r7, #4]
 80243da:	3708      	adds	r7, #8
 80243dc:	46bd      	mov	sp, r7
 80243de:	bd80      	pop	{r7, pc}

080243e0 <_ZNSt5dequeIjSaIjEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80243e0:	b580      	push	{r7, lr}
 80243e2:	b082      	sub	sp, #8
 80243e4:	af00      	add	r7, sp, #0
 80243e6:	6078      	str	r0, [r7, #4]
 80243e8:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 80243ea:	683b      	ldr	r3, [r7, #0]
 80243ec:	3318      	adds	r3, #24
 80243ee:	4619      	mov	r1, r3
 80243f0:	6878      	ldr	r0, [r7, #4]
 80243f2:	f000 f80f 	bl	8024414 <_ZNSt15_Deque_iteratorIjRjPjEC1ERKS2_>
 80243f6:	6878      	ldr	r0, [r7, #4]
 80243f8:	3708      	adds	r7, #8
 80243fa:	46bd      	mov	sp, r7
 80243fc:	bd80      	pop	{r7, pc}

080243fe <_ZNSt11_Deque_baseIjSaIjEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80243fe:	b480      	push	{r7}
 8024400:	b083      	sub	sp, #12
 8024402:	af00      	add	r7, sp, #0
 8024404:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8024406:	687b      	ldr	r3, [r7, #4]
 8024408:	4618      	mov	r0, r3
 802440a:	370c      	adds	r7, #12
 802440c:	46bd      	mov	sp, r7
 802440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024412:	4770      	bx	lr

08024414 <_ZNSt15_Deque_iteratorIjRjPjEC1ERKS2_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 8024414:	b480      	push	{r7}
 8024416:	b083      	sub	sp, #12
 8024418:	af00      	add	r7, sp, #0
 802441a:	6078      	str	r0, [r7, #4]
 802441c:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 802441e:	683b      	ldr	r3, [r7, #0]
 8024420:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8024422:	687b      	ldr	r3, [r7, #4]
 8024424:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8024426:	683b      	ldr	r3, [r7, #0]
 8024428:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 802442a:	687b      	ldr	r3, [r7, #4]
 802442c:	605a      	str	r2, [r3, #4]
 802442e:	683b      	ldr	r3, [r7, #0]
 8024430:	689a      	ldr	r2, [r3, #8]
 8024432:	687b      	ldr	r3, [r7, #4]
 8024434:	609a      	str	r2, [r3, #8]
 8024436:	683b      	ldr	r3, [r7, #0]
 8024438:	68da      	ldr	r2, [r3, #12]
 802443a:	687b      	ldr	r3, [r7, #4]
 802443c:	60da      	str	r2, [r3, #12]
 802443e:	687b      	ldr	r3, [r7, #4]
 8024440:	4618      	mov	r0, r3
 8024442:	370c      	adds	r7, #12
 8024444:	46bd      	mov	sp, r7
 8024446:	f85d 7b04 	ldr.w	r7, [sp], #4
 802444a:	4770      	bx	lr

0802444c <_ZNSt5dequeIjSaIjEE15_M_destroy_dataESt15_Deque_iteratorIjRjPjES5_RKS0_>:
      _M_destroy_data(iterator __first, iterator __last,
 802444c:	b480      	push	{r7}
 802444e:	b08d      	sub	sp, #52	; 0x34
 8024450:	af00      	add	r7, sp, #0
 8024452:	60f8      	str	r0, [r7, #12]
 8024454:	60b9      	str	r1, [r7, #8]
 8024456:	607a      	str	r2, [r7, #4]
 8024458:	603b      	str	r3, [r7, #0]
      }
 802445a:	bf00      	nop
 802445c:	3734      	adds	r7, #52	; 0x34
 802445e:	46bd      	mov	sp, r7
 8024460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024464:	4770      	bx	lr

08024466 <_ZSt4moveIRSt5dequeIN10BHYWrapper8BHYFrameESaIS2_EEEONSt16remove_referenceIT_E4typeEOS7_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8024466:	b480      	push	{r7}
 8024468:	b083      	sub	sp, #12
 802446a:	af00      	add	r7, sp, #0
 802446c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 802446e:	687b      	ldr	r3, [r7, #4]
 8024470:	4618      	mov	r0, r3
 8024472:	370c      	adds	r7, #12
 8024474:	46bd      	mov	sp, r7
 8024476:	f85d 7b04 	ldr.w	r7, [sp], #4
 802447a:	4770      	bx	lr

0802447c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_move_assign1EOS3_St17integral_constantIbLb1EE>:

#if __cplusplus >= 201103L
      // Constant-time, nothrow move assignment when source object's memory
      // can be moved because the allocators are equal.
      void
      _M_move_assign1(deque&& __x, /* always equal: */ true_type) noexcept
 802447c:	b590      	push	{r4, r7, lr}
 802447e:	b085      	sub	sp, #20
 8024480:	af00      	add	r7, sp, #0
 8024482:	60f8      	str	r0, [r7, #12]
 8024484:	60b9      	str	r1, [r7, #8]
 8024486:	713a      	strb	r2, [r7, #4]
      {
	this->_M_impl._M_swap_data(__x._M_impl);
 8024488:	68fb      	ldr	r3, [r7, #12]
 802448a:	68ba      	ldr	r2, [r7, #8]
 802448c:	4611      	mov	r1, r2
 802448e:	4618      	mov	r0, r3
 8024490:	f000 fc78 	bl	8024d84 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_data12_M_swap_dataERS4_>
	__x.clear();
 8024494:	68b8      	ldr	r0, [r7, #8]
 8024496:	f000 fc82 	bl	8024d9e <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5clearEv>
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
 802449a:	68fb      	ldr	r3, [r7, #12]
 802449c:	4618      	mov	r0, r3
 802449e:	f7ff fd61 	bl	8023f64 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 80244a2:	4604      	mov	r4, r0
 80244a4:	68bb      	ldr	r3, [r7, #8]
 80244a6:	4618      	mov	r0, r3
 80244a8:	f7ff fd5c 	bl	8023f64 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 80244ac:	4603      	mov	r3, r0
 80244ae:	4619      	mov	r1, r3
 80244b0:	4620      	mov	r0, r4
 80244b2:	f000 fc88 	bl	8024dc6 <_ZSt15__alloc_on_moveISaIN10BHYWrapper8BHYFrameEEEvRT_S4_>
      }
 80244b6:	bf00      	nop
 80244b8:	3714      	adds	r7, #20
 80244ba:	46bd      	mov	sp, r7
 80244bc:	bd90      	pop	{r4, r7, pc}

080244be <_ZSt4moveIRSt5dequeIjSaIjEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 80244be:	b480      	push	{r7}
 80244c0:	b083      	sub	sp, #12
 80244c2:	af00      	add	r7, sp, #0
 80244c4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80244c6:	687b      	ldr	r3, [r7, #4]
 80244c8:	4618      	mov	r0, r3
 80244ca:	370c      	adds	r7, #12
 80244cc:	46bd      	mov	sp, r7
 80244ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80244d2:	4770      	bx	lr

080244d4 <_ZNSt5dequeIjSaIjEE15_M_move_assign1EOS1_St17integral_constantIbLb1EE>:
      _M_move_assign1(deque&& __x, /* always equal: */ true_type) noexcept
 80244d4:	b590      	push	{r4, r7, lr}
 80244d6:	b085      	sub	sp, #20
 80244d8:	af00      	add	r7, sp, #0
 80244da:	60f8      	str	r0, [r7, #12]
 80244dc:	60b9      	str	r1, [r7, #8]
 80244de:	713a      	strb	r2, [r7, #4]
	this->_M_impl._M_swap_data(__x._M_impl);
 80244e0:	68fb      	ldr	r3, [r7, #12]
 80244e2:	68ba      	ldr	r2, [r7, #8]
 80244e4:	4611      	mov	r1, r2
 80244e6:	4618      	mov	r0, r3
 80244e8:	f000 fc7b 	bl	8024de2 <_ZNSt11_Deque_baseIjSaIjEE16_Deque_impl_data12_M_swap_dataERS2_>
	__x.clear();
 80244ec:	68b8      	ldr	r0, [r7, #8]
 80244ee:	f000 fc85 	bl	8024dfc <_ZNSt5dequeIjSaIjEE5clearEv>
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
 80244f2:	68fb      	ldr	r3, [r7, #12]
 80244f4:	4618      	mov	r0, r3
 80244f6:	f7ff ff82 	bl	80243fe <_ZNSt11_Deque_baseIjSaIjEE19_M_get_Tp_allocatorEv>
 80244fa:	4604      	mov	r4, r0
 80244fc:	68bb      	ldr	r3, [r7, #8]
 80244fe:	4618      	mov	r0, r3
 8024500:	f7ff ff7d 	bl	80243fe <_ZNSt11_Deque_baseIjSaIjEE19_M_get_Tp_allocatorEv>
 8024504:	4603      	mov	r3, r0
 8024506:	4619      	mov	r1, r3
 8024508:	4620      	mov	r0, r4
 802450a:	f000 fc8b 	bl	8024e24 <_ZSt15__alloc_on_moveISaIjEEvRT_S2_>
      }
 802450e:	bf00      	nop
 8024510:	3714      	adds	r7, #20
 8024512:	46bd      	mov	sp, r7
 8024514:	bd90      	pop	{r4, r7, pc}

08024516 <_ZNSt14__array_traitsI8ResponceLj10EE6_S_refERA10_KS0_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8024516:	b480      	push	{r7}
 8024518:	b083      	sub	sp, #12
 802451a:	af00      	add	r7, sp, #0
 802451c:	6078      	str	r0, [r7, #4]
 802451e:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8024520:	683a      	ldr	r2, [r7, #0]
 8024522:	4613      	mov	r3, r2
 8024524:	015b      	lsls	r3, r3, #5
 8024526:	4413      	add	r3, r2
 8024528:	00db      	lsls	r3, r3, #3
 802452a:	687a      	ldr	r2, [r7, #4]
 802452c:	4413      	add	r3, r2
 802452e:	4618      	mov	r0, r3
 8024530:	370c      	adds	r7, #12
 8024532:	46bd      	mov	sp, r7
 8024534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024538:	4770      	bx	lr

0802453a <_ZNSt14__array_traitsI7RequestLj500EE6_S_refERA500_KS0_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 802453a:	b480      	push	{r7}
 802453c:	b083      	sub	sp, #12
 802453e:	af00      	add	r7, sp, #0
 8024540:	6078      	str	r0, [r7, #4]
 8024542:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8024544:	683b      	ldr	r3, [r7, #0]
 8024546:	f44f 7286 	mov.w	r2, #268	; 0x10c
 802454a:	fb02 f303 	mul.w	r3, r2, r3
 802454e:	687a      	ldr	r2, [r7, #4]
 8024550:	4413      	add	r3, r2
 8024552:	4618      	mov	r0, r3
 8024554:	370c      	adds	r7, #12
 8024556:	46bd      	mov	sp, r7
 8024558:	f85d 7b04 	ldr.w	r7, [sp], #4
 802455c:	4770      	bx	lr

0802455e <_ZNSt14__array_traitsI7RequestLj10EE6_S_refERA10_KS0_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 802455e:	b480      	push	{r7}
 8024560:	b083      	sub	sp, #12
 8024562:	af00      	add	r7, sp, #0
 8024564:	6078      	str	r0, [r7, #4]
 8024566:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8024568:	683b      	ldr	r3, [r7, #0]
 802456a:	f44f 7286 	mov.w	r2, #268	; 0x10c
 802456e:	fb02 f303 	mul.w	r3, r2, r3
 8024572:	687a      	ldr	r2, [r7, #4]
 8024574:	4413      	add	r3, r2
 8024576:	4618      	mov	r0, r3
 8024578:	370c      	adds	r7, #12
 802457a:	46bd      	mov	sp, r7
 802457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024580:	4770      	bx	lr

08024582 <_ZNKSt16initializer_listIN10BHYWrapper8BHYFrameEE4sizeEv>:
      size() const noexcept { return _M_len; }
 8024582:	b480      	push	{r7}
 8024584:	b083      	sub	sp, #12
 8024586:	af00      	add	r7, sp, #0
 8024588:	6078      	str	r0, [r7, #4]
 802458a:	687b      	ldr	r3, [r7, #4]
 802458c:	685b      	ldr	r3, [r3, #4]
 802458e:	4618      	mov	r0, r3
 8024590:	370c      	adds	r7, #12
 8024592:	46bd      	mov	sp, r7
 8024594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024598:	4770      	bx	lr

0802459a <_ZSt8distanceIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E15difference_typeES5_S5_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 802459a:	b5b0      	push	{r4, r5, r7, lr}
 802459c:	b082      	sub	sp, #8
 802459e:	af00      	add	r7, sp, #0
 80245a0:	6078      	str	r0, [r7, #4]
 80245a2:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 80245a4:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 80245a6:	1d3b      	adds	r3, r7, #4
 80245a8:	4618      	mov	r0, r3
 80245aa:	f000 f83d 	bl	8024628 <_ZSt19__iterator_categoryIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E17iterator_categoryERKS5_>
      return std::__distance(__first, __last,
 80245ae:	462a      	mov	r2, r5
 80245b0:	6839      	ldr	r1, [r7, #0]
 80245b2:	4620      	mov	r0, r4
 80245b4:	f000 fc44 	bl	8024e40 <_ZSt10__distanceIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E15difference_typeES5_S5_St26random_access_iterator_tag>
 80245b8:	4603      	mov	r3, r0
    }
 80245ba:	4618      	mov	r0, r3
 80245bc:	3708      	adds	r7, #8
 80245be:	46bd      	mov	sp, r7
 80245c0:	bdb0      	pop	{r4, r5, r7, pc}

080245c2 <_ZSt7advanceIPKN10BHYWrapper8BHYFrameEjEvRT_T0_>:
   *  For random access iterators, this uses their @c + and @c - operations
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator, typename _Distance>
    inline _GLIBCXX17_CONSTEXPR void
    advance(_InputIterator& __i, _Distance __n)
 80245c2:	b590      	push	{r4, r7, lr}
 80245c4:	b085      	sub	sp, #20
 80245c6:	af00      	add	r7, sp, #0
 80245c8:	6078      	str	r0, [r7, #4]
 80245ca:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __advance
      typename iterator_traits<_InputIterator>::difference_type __d = __n;
 80245cc:	683b      	ldr	r3, [r7, #0]
 80245ce:	60fb      	str	r3, [r7, #12]
      std::__advance(__i, __d, std::__iterator_category(__i));
 80245d0:	6878      	ldr	r0, [r7, #4]
 80245d2:	f000 f829 	bl	8024628 <_ZSt19__iterator_categoryIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E17iterator_categoryERKS5_>
 80245d6:	4622      	mov	r2, r4
 80245d8:	68f9      	ldr	r1, [r7, #12]
 80245da:	6878      	ldr	r0, [r7, #4]
 80245dc:	f000 fc46 	bl	8024e6c <_ZSt9__advanceIPKN10BHYWrapper8BHYFrameEiEvRT_T0_St26random_access_iterator_tag>
    }
 80245e0:	bf00      	nop
 80245e2:	3714      	adds	r7, #20
 80245e4:	46bd      	mov	sp, r7
 80245e6:	bd90      	pop	{r4, r7, pc}

080245e8 <_ZSt4copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 80245e8:	b5b0      	push	{r4, r5, r7, lr}
 80245ea:	b088      	sub	sp, #32
 80245ec:	af00      	add	r7, sp, #0
 80245ee:	60f8      	str	r0, [r7, #12]
 80245f0:	60b9      	str	r1, [r7, #8]
 80245f2:	607a      	str	r2, [r7, #4]
 80245f4:	603b      	str	r3, [r7, #0]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80245f6:	68b8      	ldr	r0, [r7, #8]
 80245f8:	f000 fc4e 	bl	8024e98 <_ZSt12__miter_baseIPKN10BHYWrapper8BHYFrameEET_S4_>
 80245fc:	4604      	mov	r4, r0
 80245fe:	6878      	ldr	r0, [r7, #4]
 8024600:	f000 fc4a 	bl	8024e98 <_ZSt12__miter_baseIPKN10BHYWrapper8BHYFrameEET_S4_>
 8024604:	4605      	mov	r5, r0
 8024606:	f107 0310 	add.w	r3, r7, #16
 802460a:	6839      	ldr	r1, [r7, #0]
 802460c:	4618      	mov	r0, r3
 802460e:	f7ff fe70 	bl	80242f2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8024612:	68f8      	ldr	r0, [r7, #12]
 8024614:	f107 0310 	add.w	r3, r7, #16
 8024618:	462a      	mov	r2, r5
 802461a:	4621      	mov	r1, r4
 802461c:	f000 fc47 	bl	8024eae <_ZSt13__copy_move_aILb0EPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET1_T0_S9_S8_>
    }
 8024620:	68f8      	ldr	r0, [r7, #12]
 8024622:	3720      	adds	r7, #32
 8024624:	46bd      	mov	sp, r7
 8024626:	bdb0      	pop	{r4, r5, r7, pc}

08024628 <_ZSt19__iterator_categoryIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E17iterator_categoryERKS5_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8024628:	b480      	push	{r7}
 802462a:	b083      	sub	sp, #12
 802462c:	af00      	add	r7, sp, #0
 802462e:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8024630:	bf00      	nop
 8024632:	4618      	mov	r0, r3
 8024634:	370c      	adds	r7, #12
 8024636:	46bd      	mov	sp, r7
 8024638:	f85d 7b04 	ldr.w	r7, [sp], #4
 802463c:	4770      	bx	lr

0802463e <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE19_M_range_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_St20forward_iterator_tag>:
      { std::copy(__first, __last, std::inserter(*this, __pos)); }

  template <typename _Tp, typename _Alloc>
    template <typename _ForwardIterator>
      void
      deque<_Tp, _Alloc>::
 802463e:	b590      	push	{r4, r7, lr}
 8024640:	b0a5      	sub	sp, #148	; 0x94
 8024642:	af02      	add	r7, sp, #8
 8024644:	60f8      	str	r0, [r7, #12]
 8024646:	60b9      	str	r1, [r7, #8]
 8024648:	607a      	str	r2, [r7, #4]
 802464a:	603b      	str	r3, [r7, #0]
      _M_range_insert_aux(iterator __pos,
			  _ForwardIterator __first, _ForwardIterator __last,
			  std::forward_iterator_tag)
      {
	const size_type __n = std::distance(__first, __last);
 802464c:	6839      	ldr	r1, [r7, #0]
 802464e:	6878      	ldr	r0, [r7, #4]
 8024650:	f7ff ffa3 	bl	802459a <_ZSt8distanceIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E15difference_typeES5_S5_>
 8024654:	4603      	mov	r3, r0
 8024656:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	if (__pos._M_cur == this->_M_impl._M_start._M_cur)
 802465a:	68bb      	ldr	r3, [r7, #8]
 802465c:	681a      	ldr	r2, [r3, #0]
 802465e:	68fb      	ldr	r3, [r7, #12]
 8024660:	689b      	ldr	r3, [r3, #8]
 8024662:	429a      	cmp	r2, r3
 8024664:	d126      	bne.n	80246b4 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE19_M_range_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_St20forward_iterator_tag+0x76>
	  {
	    iterator __new_start = _M_reserve_elements_at_front(__n);
 8024666:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802466a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 802466e:	68f9      	ldr	r1, [r7, #12]
 8024670:	4618      	mov	r0, r3
 8024672:	f000 fc4d 	bl	8024f10 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE28_M_reserve_elements_at_frontEj>
	    __try
	      {
		std::__uninitialized_copy_a(__first, __last, __new_start,
 8024676:	f107 0224 	add.w	r2, r7, #36	; 0x24
 802467a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 802467e:	4611      	mov	r1, r2
 8024680:	4618      	mov	r0, r3
 8024682:	f7ff fe36 	bl	80242f2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
					    _M_get_Tp_allocator());
 8024686:	68fb      	ldr	r3, [r7, #12]
 8024688:	4618      	mov	r0, r3
 802468a:	f7ff fc6b 	bl	8023f64 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 802468e:	4602      	mov	r2, r0
		std::__uninitialized_copy_a(__first, __last, __new_start,
 8024690:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8024694:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8024698:	9200      	str	r2, [sp, #0]
 802469a:	683a      	ldr	r2, [r7, #0]
 802469c:	6879      	ldr	r1, [r7, #4]
 802469e:	f000 fc61 	bl	8024f64 <_ZSt22__uninitialized_copy_aIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_ES1_ET0_T_S9_S8_RSaIT1_E>
		this->_M_impl._M_start = __new_start;
 80246a2:	68fb      	ldr	r3, [r7, #12]
 80246a4:	f103 0408 	add.w	r4, r3, #8
 80246a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80246ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80246ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		__throw_exception_again;
	      }
	  }
	else
	  _M_insert_aux(__pos, __first, __last, __n);
      }
 80246b2:	e03d      	b.n	8024730 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE19_M_range_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_St20forward_iterator_tag+0xf2>
	else if (__pos._M_cur == this->_M_impl._M_finish._M_cur)
 80246b4:	68bb      	ldr	r3, [r7, #8]
 80246b6:	681a      	ldr	r2, [r3, #0]
 80246b8:	68fb      	ldr	r3, [r7, #12]
 80246ba:	699b      	ldr	r3, [r3, #24]
 80246bc:	429a      	cmp	r2, r3
 80246be:	d127      	bne.n	8024710 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE19_M_range_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_St20forward_iterator_tag+0xd2>
	    iterator __new_finish = _M_reserve_elements_at_back(__n);
 80246c0:	f107 0314 	add.w	r3, r7, #20
 80246c4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80246c8:	68f9      	ldr	r1, [r7, #12]
 80246ca:	4618      	mov	r0, r3
 80246cc:	f000 fc62 	bl	8024f94 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE27_M_reserve_elements_at_backEj>
					    this->_M_impl._M_finish,
 80246d0:	68fb      	ldr	r3, [r7, #12]
 80246d2:	f103 0218 	add.w	r2, r3, #24
		std::__uninitialized_copy_a(__first, __last,
 80246d6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80246da:	4611      	mov	r1, r2
 80246dc:	4618      	mov	r0, r3
 80246de:	f7ff fe08 	bl	80242f2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
					    _M_get_Tp_allocator());
 80246e2:	68fb      	ldr	r3, [r7, #12]
 80246e4:	4618      	mov	r0, r3
 80246e6:	f7ff fc3d 	bl	8023f64 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 80246ea:	4602      	mov	r2, r0
		std::__uninitialized_copy_a(__first, __last,
 80246ec:	f107 0054 	add.w	r0, r7, #84	; 0x54
 80246f0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80246f4:	9200      	str	r2, [sp, #0]
 80246f6:	683a      	ldr	r2, [r7, #0]
 80246f8:	6879      	ldr	r1, [r7, #4]
 80246fa:	f000 fc33 	bl	8024f64 <_ZSt22__uninitialized_copy_aIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_ES1_ET0_T_S9_S8_RSaIT1_E>
		this->_M_impl._M_finish = __new_finish;
 80246fe:	68fb      	ldr	r3, [r7, #12]
 8024700:	f103 0418 	add.w	r4, r3, #24
 8024704:	f107 0314 	add.w	r3, r7, #20
 8024708:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802470a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      }
 802470e:	e00f      	b.n	8024730 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE19_M_range_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_St20forward_iterator_tag+0xf2>
	  _M_insert_aux(__pos, __first, __last, __n);
 8024710:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8024714:	68b9      	ldr	r1, [r7, #8]
 8024716:	4618      	mov	r0, r3
 8024718:	f7ff fdeb 	bl	80242f2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802471c:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8024720:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8024724:	9300      	str	r3, [sp, #0]
 8024726:	683b      	ldr	r3, [r7, #0]
 8024728:	687a      	ldr	r2, [r7, #4]
 802472a:	68f8      	ldr	r0, [r7, #12]
 802472c:	f000 fc5c 	bl	8024fe8 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_j>
      }
 8024730:	bf00      	nop
 8024732:	378c      	adds	r7, #140	; 0x8c
 8024734:	46bd      	mov	sp, r7
 8024736:	bd90      	pop	{r4, r7, pc}

08024738 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_erase_at_endESt15_Deque_iteratorIS1_RS1_PS1_E>:
      _M_erase_at_end(iterator __pos)
 8024738:	b590      	push	{r4, r7, lr}
 802473a:	b08b      	sub	sp, #44	; 0x2c
 802473c:	af00      	add	r7, sp, #0
 802473e:	6078      	str	r0, [r7, #4]
 8024740:	6039      	str	r1, [r7, #0]
	_M_destroy_data(__pos, end(), _M_get_Tp_allocator());
 8024742:	f107 0308 	add.w	r3, r7, #8
 8024746:	6839      	ldr	r1, [r7, #0]
 8024748:	4618      	mov	r0, r3
 802474a:	f7ff fdd2 	bl	80242f2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802474e:	f107 0318 	add.w	r3, r7, #24
 8024752:	6879      	ldr	r1, [r7, #4]
 8024754:	4618      	mov	r0, r3
 8024756:	f7ff fdbd 	bl	80242d4 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE3endEv>
 802475a:	687b      	ldr	r3, [r7, #4]
 802475c:	4618      	mov	r0, r3
 802475e:	f7ff fc01 	bl	8023f64 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 8024762:	4603      	mov	r3, r0
 8024764:	f107 0218 	add.w	r2, r7, #24
 8024768:	f107 0108 	add.w	r1, r7, #8
 802476c:	6878      	ldr	r0, [r7, #4]
 802476e:	f7ff fddc 	bl	802432a <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_destroy_dataESt15_Deque_iteratorIS1_RS1_PS1_ES7_RKS2_>
	_M_destroy_nodes(__pos._M_node + 1,
 8024772:	6878      	ldr	r0, [r7, #4]
 8024774:	683b      	ldr	r3, [r7, #0]
 8024776:	68db      	ldr	r3, [r3, #12]
 8024778:	1d19      	adds	r1, r3, #4
			 this->_M_impl._M_finish._M_node + 1);
 802477a:	687b      	ldr	r3, [r7, #4]
 802477c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	_M_destroy_nodes(__pos._M_node + 1,
 802477e:	3304      	adds	r3, #4
 8024780:	461a      	mov	r2, r3
 8024782:	f7ff fd62 	bl	802424a <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_destroy_nodesEPPS1_S5_>
	this->_M_impl._M_finish = __pos;
 8024786:	687b      	ldr	r3, [r7, #4]
 8024788:	683a      	ldr	r2, [r7, #0]
 802478a:	f103 0418 	add.w	r4, r3, #24
 802478e:	4613      	mov	r3, r2
 8024790:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8024792:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      }
 8024796:	bf00      	nop
 8024798:	372c      	adds	r7, #44	; 0x2c
 802479a:	46bd      	mov	sp, r7
 802479c:	bd90      	pop	{r4, r7, pc}

0802479e <_ZSt7forwardIRKN10BHYWrapper8BHYFrameEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 802479e:	b480      	push	{r7}
 80247a0:	b083      	sub	sp, #12
 80247a2:	af00      	add	r7, sp, #0
 80247a4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80247a6:	687b      	ldr	r3, [r7, #4]
 80247a8:	4618      	mov	r0, r3
 80247aa:	370c      	adds	r7, #12
 80247ac:	46bd      	mov	sp, r7
 80247ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80247b2:	4770      	bx	lr

080247b4 <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE9constructIS2_JRKS2_EEEvPT_DpOT0_>:
      { return _M_max_size(); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 80247b4:	b5b0      	push	{r4, r5, r7, lr}
 80247b6:	b084      	sub	sp, #16
 80247b8:	af00      	add	r7, sp, #0
 80247ba:	60f8      	str	r0, [r7, #12]
 80247bc:	60b9      	str	r1, [r7, #8]
 80247be:	607a      	str	r2, [r7, #4]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80247c0:	6878      	ldr	r0, [r7, #4]
 80247c2:	f7ff ffec 	bl	802479e <_ZSt7forwardIRKN10BHYWrapper8BHYFrameEEOT_RNSt16remove_referenceIS4_E4typeE>
 80247c6:	4605      	mov	r5, r0
 80247c8:	68bb      	ldr	r3, [r7, #8]
 80247ca:	4619      	mov	r1, r3
 80247cc:	2014      	movs	r0, #20
 80247ce:	f7fc fb6f 	bl	8020eb0 <_ZnwjPv>
 80247d2:	4603      	mov	r3, r0
 80247d4:	461c      	mov	r4, r3
 80247d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80247d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80247da:	682b      	ldr	r3, [r5, #0]
 80247dc:	6023      	str	r3, [r4, #0]
 80247de:	bf00      	nop
 80247e0:	3710      	adds	r7, #16
 80247e2:	46bd      	mov	sp, r7
 80247e4:	bdb0      	pop	{r4, r5, r7, pc}

080247e6 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80247e6:	b580      	push	{r7, lr}
 80247e8:	b082      	sub	sp, #8
 80247ea:	af00      	add	r7, sp, #0
 80247ec:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 80247ee:	687b      	ldr	r3, [r7, #4]
 80247f0:	4618      	mov	r0, r3
 80247f2:	f000 ff06 	bl	8025602 <_ZNKSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 80247f6:	4603      	mov	r3, r0
 80247f8:	4618      	mov	r0, r3
 80247fa:	f000 fee8 	bl	80255ce <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE11_S_max_sizeERKS2_>
 80247fe:	4603      	mov	r3, r0
 8024800:	4618      	mov	r0, r3
 8024802:	3708      	adds	r7, #8
 8024804:	46bd      	mov	sp, r7
 8024806:	bd80      	pop	{r7, pc}

08024808 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_reserve_map_at_frontEj>:
      _M_reserve_map_at_front(size_type __nodes_to_add = 1)
 8024808:	b580      	push	{r7, lr}
 802480a:	b082      	sub	sp, #8
 802480c:	af00      	add	r7, sp, #0
 802480e:	6078      	str	r0, [r7, #4]
 8024810:	6039      	str	r1, [r7, #0]
	if (__nodes_to_add > size_type(this->_M_impl._M_start._M_node
 8024812:	687b      	ldr	r3, [r7, #4]
 8024814:	695a      	ldr	r2, [r3, #20]
				       - this->_M_impl._M_map))
 8024816:	687b      	ldr	r3, [r7, #4]
 8024818:	681b      	ldr	r3, [r3, #0]
 802481a:	1ad3      	subs	r3, r2, r3
 802481c:	109b      	asrs	r3, r3, #2
	if (__nodes_to_add > size_type(this->_M_impl._M_start._M_node
 802481e:	461a      	mov	r2, r3
 8024820:	683b      	ldr	r3, [r7, #0]
 8024822:	4293      	cmp	r3, r2
 8024824:	d904      	bls.n	8024830 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_reserve_map_at_frontEj+0x28>
	  _M_reallocate_map(__nodes_to_add, true);
 8024826:	2201      	movs	r2, #1
 8024828:	6839      	ldr	r1, [r7, #0]
 802482a:	6878      	ldr	r0, [r7, #4]
 802482c:	f000 fef4 	bl	8025618 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb>
      }
 8024830:	bf00      	nop
 8024832:	3708      	adds	r7, #8
 8024834:	46bd      	mov	sp, r7
 8024836:	bd80      	pop	{r7, pc}

08024838 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_allocate_nodeEv>:
      _M_allocate_node()
 8024838:	b590      	push	{r4, r7, lr}
 802483a:	b083      	sub	sp, #12
 802483c:	af00      	add	r7, sp, #0
 802483e:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 8024840:	687c      	ldr	r4, [r7, #4]
 8024842:	2014      	movs	r0, #20
 8024844:	f7fc fb40 	bl	8020ec8 <_ZSt16__deque_buf_sizej>
 8024848:	4603      	mov	r3, r0
 802484a:	4619      	mov	r1, r3
 802484c:	4620      	mov	r0, r4
 802484e:	f000 ff7d 	bl	802574c <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE8allocateERS2_j>
 8024852:	4603      	mov	r3, r0
      }
 8024854:	4618      	mov	r0, r3
 8024856:	370c      	adds	r7, #12
 8024858:	46bd      	mov	sp, r7
 802485a:	bd90      	pop	{r4, r7, pc}

0802485c <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E11_M_set_nodeEPS3_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 802485c:	b590      	push	{r4, r7, lr}
 802485e:	b083      	sub	sp, #12
 8024860:	af00      	add	r7, sp, #0
 8024862:	6078      	str	r0, [r7, #4]
 8024864:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 8024866:	687b      	ldr	r3, [r7, #4]
 8024868:	683a      	ldr	r2, [r7, #0]
 802486a:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 802486c:	683b      	ldr	r3, [r7, #0]
 802486e:	681a      	ldr	r2, [r3, #0]
 8024870:	687b      	ldr	r3, [r7, #4]
 8024872:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8024874:	687b      	ldr	r3, [r7, #4]
 8024876:	685c      	ldr	r4, [r3, #4]
 8024878:	f000 f81f 	bl	80248ba <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 802487c:	4602      	mov	r2, r0
 802487e:	4613      	mov	r3, r2
 8024880:	009b      	lsls	r3, r3, #2
 8024882:	4413      	add	r3, r2
 8024884:	009b      	lsls	r3, r3, #2
 8024886:	18e2      	adds	r2, r4, r3
 8024888:	687b      	ldr	r3, [r7, #4]
 802488a:	609a      	str	r2, [r3, #8]
      }
 802488c:	bf00      	nop
 802488e:	370c      	adds	r7, #12
 8024890:	46bd      	mov	sp, r7
 8024892:	bd90      	pop	{r4, r7, pc}

08024894 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE18_M_deallocate_nodeEPS1_>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 8024894:	b590      	push	{r4, r7, lr}
 8024896:	b083      	sub	sp, #12
 8024898:	af00      	add	r7, sp, #0
 802489a:	6078      	str	r0, [r7, #4]
 802489c:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 802489e:	687c      	ldr	r4, [r7, #4]
 80248a0:	2014      	movs	r0, #20
 80248a2:	f7fc fb11 	bl	8020ec8 <_ZSt16__deque_buf_sizej>
 80248a6:	4603      	mov	r3, r0
 80248a8:	461a      	mov	r2, r3
 80248aa:	6839      	ldr	r1, [r7, #0]
 80248ac:	4620      	mov	r0, r4
 80248ae:	f000 ff5c 	bl	802576a <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE10deallocateERS2_PS1_j>
      }
 80248b2:	bf00      	nop
 80248b4:	370c      	adds	r7, #12
 80248b6:	46bd      	mov	sp, r7
 80248b8:	bd90      	pop	{r4, r7, pc}

080248ba <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 80248ba:	b580      	push	{r7, lr}
 80248bc:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 80248be:	2014      	movs	r0, #20
 80248c0:	f7fc fb02 	bl	8020ec8 <_ZSt16__deque_buf_sizej>
 80248c4:	4603      	mov	r3, r0
 80248c6:	4618      	mov	r0, r3
 80248c8:	bd80      	pop	{r7, pc}

080248ca <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE7destroyIS2_EEvPT_>:

      template<typename _Up>
	void
	destroy(_Up* __p)
 80248ca:	b480      	push	{r7}
 80248cc:	b083      	sub	sp, #12
 80248ce:	af00      	add	r7, sp, #0
 80248d0:	6078      	str	r0, [r7, #4]
 80248d2:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 80248d4:	bf00      	nop
 80248d6:	370c      	adds	r7, #12
 80248d8:	46bd      	mov	sp, r7
 80248da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80248de:	4770      	bx	lr

080248e0 <_ZStplRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>:
      operator+(const _Self& __x, difference_type __n) _GLIBCXX_NOEXCEPT
 80248e0:	b580      	push	{r7, lr}
 80248e2:	b084      	sub	sp, #16
 80248e4:	af00      	add	r7, sp, #0
 80248e6:	60f8      	str	r0, [r7, #12]
 80248e8:	60b9      	str	r1, [r7, #8]
 80248ea:	607a      	str	r2, [r7, #4]
	_Self __tmp = __x;
 80248ec:	68b9      	ldr	r1, [r7, #8]
 80248ee:	68f8      	ldr	r0, [r7, #12]
 80248f0:	f7ff fcff 	bl	80242f2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
	__tmp += __n;
 80248f4:	6879      	ldr	r1, [r7, #4]
 80248f6:	68f8      	ldr	r0, [r7, #12]
 80248f8:	f000 ff46 	bl	8025788 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi>
	return __tmp;
 80248fc:	bf00      	nop
      }
 80248fe:	68f8      	ldr	r0, [r7, #12]
 8024900:	3710      	adds	r7, #16
 8024902:	46bd      	mov	sp, r7
 8024904:	bd80      	pop	{r7, pc}

08024906 <_ZNKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8024906:	b480      	push	{r7}
 8024908:	b083      	sub	sp, #12
 802490a:	af00      	add	r7, sp, #0
 802490c:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 802490e:	687b      	ldr	r3, [r7, #4]
 8024910:	681b      	ldr	r3, [r3, #0]
 8024912:	4618      	mov	r0, r3
 8024914:	370c      	adds	r7, #12
 8024916:	46bd      	mov	sp, r7
 8024918:	f85d 7b04 	ldr.w	r7, [sp], #4
 802491c:	4770      	bx	lr

0802491e <_ZNSt16allocator_traitsISaIjEE9constructIjJRKjEEEvRS0_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 802491e:	b580      	push	{r7, lr}
 8024920:	b084      	sub	sp, #16
 8024922:	af00      	add	r7, sp, #0
 8024924:	60f8      	str	r0, [r7, #12]
 8024926:	60b9      	str	r1, [r7, #8]
 8024928:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 802492a:	6878      	ldr	r0, [r7, #4]
 802492c:	f000 ff90 	bl	8025850 <_ZSt7forwardIRKjEOT_RNSt16remove_referenceIS2_E4typeE>
 8024930:	4603      	mov	r3, r0
 8024932:	461a      	mov	r2, r3
 8024934:	68b9      	ldr	r1, [r7, #8]
 8024936:	68f8      	ldr	r0, [r7, #12]
 8024938:	f000 ff95 	bl	8025866 <_ZN9__gnu_cxx13new_allocatorIjE9constructIjJRKjEEEvPT_DpOT0_>
	}
 802493c:	bf00      	nop
 802493e:	3710      	adds	r7, #16
 8024940:	46bd      	mov	sp, r7
 8024942:	bd80      	pop	{r7, pc}

08024944 <_ZNSt5dequeIjSaIjEE16_M_push_back_auxIJRKjEEEvDpOT_>:
      deque<_Tp, _Alloc>::
 8024944:	b5b0      	push	{r4, r5, r7, lr}
 8024946:	b082      	sub	sp, #8
 8024948:	af00      	add	r7, sp, #0
 802494a:	6078      	str	r0, [r7, #4]
 802494c:	6039      	str	r1, [r7, #0]
	if (size() == max_size())
 802494e:	6878      	ldr	r0, [r7, #4]
 8024950:	f000 ff9f 	bl	8025892 <_ZNKSt5dequeIjSaIjEE4sizeEv>
 8024954:	4604      	mov	r4, r0
 8024956:	6878      	ldr	r0, [r7, #4]
 8024958:	f000 ffad 	bl	80258b6 <_ZNKSt5dequeIjSaIjEE8max_sizeEv>
 802495c:	4603      	mov	r3, r0
 802495e:	429c      	cmp	r4, r3
 8024960:	bf0c      	ite	eq
 8024962:	2301      	moveq	r3, #1
 8024964:	2300      	movne	r3, #0
 8024966:	b2db      	uxtb	r3, r3
 8024968:	2b00      	cmp	r3, #0
 802496a:	d002      	beq.n	8024972 <_ZNSt5dequeIjSaIjEE16_M_push_back_auxIJRKjEEEvDpOT_+0x2e>
	  __throw_length_error(
 802496c:	4816      	ldr	r0, [pc, #88]	; (80249c8 <_ZNSt5dequeIjSaIjEE16_M_push_back_auxIJRKjEEEvDpOT_+0x84>)
 802496e:	f017 f987 	bl	803bc80 <_ZSt20__throw_length_errorPKc>
	_M_reserve_map_at_back();
 8024972:	2101      	movs	r1, #1
 8024974:	6878      	ldr	r0, [r7, #4]
 8024976:	f000 ffaf 	bl	80258d8 <_ZNSt5dequeIjSaIjEE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 802497a:	687a      	ldr	r2, [r7, #4]
 802497c:	687b      	ldr	r3, [r7, #4]
 802497e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024980:	1d1c      	adds	r4, r3, #4
 8024982:	4610      	mov	r0, r2
 8024984:	f000 ffc3 	bl	802590e <_ZNSt11_Deque_baseIjSaIjEE16_M_allocate_nodeEv>
 8024988:	4603      	mov	r3, r0
 802498a:	6023      	str	r3, [r4, #0]
	    _Alloc_traits::construct(this->_M_impl,
 802498c:	687c      	ldr	r4, [r7, #4]
 802498e:	687b      	ldr	r3, [r7, #4]
 8024990:	699d      	ldr	r5, [r3, #24]
 8024992:	6838      	ldr	r0, [r7, #0]
 8024994:	f000 ff5c 	bl	8025850 <_ZSt7forwardIRKjEOT_RNSt16remove_referenceIS2_E4typeE>
 8024998:	4603      	mov	r3, r0
 802499a:	461a      	mov	r2, r3
 802499c:	4629      	mov	r1, r5
 802499e:	4620      	mov	r0, r4
 80249a0:	f7ff ffbd 	bl	802491e <_ZNSt16allocator_traitsISaIjEE9constructIjJRKjEEEvRS0_PT_DpOT0_>
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 80249a4:	687b      	ldr	r3, [r7, #4]
 80249a6:	f103 0218 	add.w	r2, r3, #24
 80249aa:	687b      	ldr	r3, [r7, #4]
 80249ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80249ae:	3304      	adds	r3, #4
 80249b0:	4619      	mov	r1, r3
 80249b2:	4610      	mov	r0, r2
 80249b4:	f000 ffbd 	bl	8025932 <_ZNSt15_Deque_iteratorIjRjPjE11_M_set_nodeEPS1_>
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 80249b8:	687b      	ldr	r3, [r7, #4]
 80249ba:	69da      	ldr	r2, [r3, #28]
 80249bc:	687b      	ldr	r3, [r7, #4]
 80249be:	619a      	str	r2, [r3, #24]
      }
 80249c0:	bf00      	nop
 80249c2:	3708      	adds	r7, #8
 80249c4:	46bd      	mov	sp, r7
 80249c6:	bdb0      	pop	{r4, r5, r7, pc}
 80249c8:	0803dd18 	.word	0x0803dd18

080249cc <_ZNKSt5dequeIjSaIjEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 80249cc:	b580      	push	{r7, lr}
 80249ce:	b082      	sub	sp, #8
 80249d0:	af00      	add	r7, sp, #0
 80249d2:	6078      	str	r0, [r7, #4]
 80249d4:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 80249d6:	683b      	ldr	r3, [r7, #0]
 80249d8:	3308      	adds	r3, #8
 80249da:	4619      	mov	r1, r3
 80249dc:	6878      	ldr	r0, [r7, #4]
 80249de:	f000 ffd4 	bl	802598a <_ZNSt15_Deque_iteratorIjRKjPS0_EC1IS_IjRjPjEvEERKT_>
 80249e2:	6878      	ldr	r0, [r7, #4]
 80249e4:	3708      	adds	r7, #8
 80249e6:	46bd      	mov	sp, r7
 80249e8:	bd80      	pop	{r7, pc}

080249ea <_ZNKSt15_Deque_iteratorIjRKjPS0_EdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80249ea:	b480      	push	{r7}
 80249ec:	b083      	sub	sp, #12
 80249ee:	af00      	add	r7, sp, #0
 80249f0:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 80249f2:	687b      	ldr	r3, [r7, #4]
 80249f4:	681b      	ldr	r3, [r3, #0]
 80249f6:	4618      	mov	r0, r3
 80249f8:	370c      	adds	r7, #12
 80249fa:	46bd      	mov	sp, r7
 80249fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024a00:	4770      	bx	lr

08024a02 <_ZSteqRKSt15_Deque_iteratorIjRjPjES4_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8024a02:	b480      	push	{r7}
 8024a04:	b083      	sub	sp, #12
 8024a06:	af00      	add	r7, sp, #0
 8024a08:	6078      	str	r0, [r7, #4]
 8024a0a:	6039      	str	r1, [r7, #0]
      { return __x._M_cur == __y._M_cur; }
 8024a0c:	687b      	ldr	r3, [r7, #4]
 8024a0e:	681a      	ldr	r2, [r3, #0]
 8024a10:	683b      	ldr	r3, [r7, #0]
 8024a12:	681b      	ldr	r3, [r3, #0]
 8024a14:	429a      	cmp	r2, r3
 8024a16:	bf0c      	ite	eq
 8024a18:	2301      	moveq	r3, #1
 8024a1a:	2300      	movne	r3, #0
 8024a1c:	b2db      	uxtb	r3, r3
 8024a1e:	4618      	mov	r0, r3
 8024a20:	370c      	adds	r7, #12
 8024a22:	46bd      	mov	sp, r7
 8024a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024a28:	4770      	bx	lr

08024a2a <_ZNSt16allocator_traitsISaIjEE7destroyIjEEvRS0_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8024a2a:	b580      	push	{r7, lr}
 8024a2c:	b082      	sub	sp, #8
 8024a2e:	af00      	add	r7, sp, #0
 8024a30:	6078      	str	r0, [r7, #4]
 8024a32:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 8024a34:	6839      	ldr	r1, [r7, #0]
 8024a36:	6878      	ldr	r0, [r7, #4]
 8024a38:	f000 ffc3 	bl	80259c2 <_ZN9__gnu_cxx13new_allocatorIjE7destroyIjEEvPT_>
	}
 8024a3c:	bf00      	nop
 8024a3e:	3708      	adds	r7, #8
 8024a40:	46bd      	mov	sp, r7
 8024a42:	bd80      	pop	{r7, pc}

08024a44 <_ZNSt5dequeIjSaIjEE16_M_pop_front_auxEv>:
    void deque<_Tp, _Alloc>::
 8024a44:	b580      	push	{r7, lr}
 8024a46:	b082      	sub	sp, #8
 8024a48:	af00      	add	r7, sp, #0
 8024a4a:	6078      	str	r0, [r7, #4]
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8024a4c:	687b      	ldr	r3, [r7, #4]
 8024a4e:	4618      	mov	r0, r3
 8024a50:	f7ff fcd5 	bl	80243fe <_ZNSt11_Deque_baseIjSaIjEE19_M_get_Tp_allocatorEv>
 8024a54:	4602      	mov	r2, r0
 8024a56:	687b      	ldr	r3, [r7, #4]
 8024a58:	689b      	ldr	r3, [r3, #8]
 8024a5a:	4619      	mov	r1, r3
 8024a5c:	4610      	mov	r0, r2
 8024a5e:	f7ff ffe4 	bl	8024a2a <_ZNSt16allocator_traitsISaIjEE7destroyIjEEvRS0_PT_>
      _M_deallocate_node(this->_M_impl._M_start._M_first);
 8024a62:	687a      	ldr	r2, [r7, #4]
 8024a64:	687b      	ldr	r3, [r7, #4]
 8024a66:	68db      	ldr	r3, [r3, #12]
 8024a68:	4619      	mov	r1, r3
 8024a6a:	4610      	mov	r0, r2
 8024a6c:	f000 ff7a 	bl	8025964 <_ZNSt11_Deque_baseIjSaIjEE18_M_deallocate_nodeEPj>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 8024a70:	687b      	ldr	r3, [r7, #4]
 8024a72:	f103 0208 	add.w	r2, r3, #8
 8024a76:	687b      	ldr	r3, [r7, #4]
 8024a78:	695b      	ldr	r3, [r3, #20]
 8024a7a:	3304      	adds	r3, #4
 8024a7c:	4619      	mov	r1, r3
 8024a7e:	4610      	mov	r0, r2
 8024a80:	f000 ff57 	bl	8025932 <_ZNSt15_Deque_iteratorIjRjPjE11_M_set_nodeEPS1_>
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 8024a84:	687b      	ldr	r3, [r7, #4]
 8024a86:	68da      	ldr	r2, [r3, #12]
 8024a88:	687b      	ldr	r3, [r7, #4]
 8024a8a:	609a      	str	r2, [r3, #8]
    }
 8024a8c:	bf00      	nop
 8024a8e:	3708      	adds	r7, #8
 8024a90:	46bd      	mov	sp, r7
 8024a92:	bd80      	pop	{r7, pc}

08024a94 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERKS1_PS2_EC1IS_IS1_RS1_PS1_EvEERKT_>:
       _Deque_iterator(const _Iter& __x) noexcept
 8024a94:	b480      	push	{r7}
 8024a96:	b083      	sub	sp, #12
 8024a98:	af00      	add	r7, sp, #0
 8024a9a:	6078      	str	r0, [r7, #4]
 8024a9c:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8024a9e:	683b      	ldr	r3, [r7, #0]
 8024aa0:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8024aa2:	687b      	ldr	r3, [r7, #4]
 8024aa4:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8024aa6:	683b      	ldr	r3, [r7, #0]
 8024aa8:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8024aaa:	687b      	ldr	r3, [r7, #4]
 8024aac:	605a      	str	r2, [r3, #4]
 8024aae:	683b      	ldr	r3, [r7, #0]
 8024ab0:	689a      	ldr	r2, [r3, #8]
 8024ab2:	687b      	ldr	r3, [r7, #4]
 8024ab4:	609a      	str	r2, [r3, #8]
 8024ab6:	683b      	ldr	r3, [r7, #0]
 8024ab8:	68da      	ldr	r2, [r3, #12]
 8024aba:	687b      	ldr	r3, [r7, #4]
 8024abc:	60da      	str	r2, [r3, #12]
 8024abe:	687b      	ldr	r3, [r7, #4]
 8024ac0:	4618      	mov	r0, r3
 8024ac2:	370c      	adds	r7, #12
 8024ac4:	46bd      	mov	sp, r7
 8024ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024aca:	4770      	bx	lr

08024acc <_ZNSaIN10BHYWrapper8BHYFrameEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8024acc:	b580      	push	{r7, lr}
 8024ace:	b082      	sub	sp, #8
 8024ad0:	af00      	add	r7, sp, #0
 8024ad2:	6078      	str	r0, [r7, #4]
 8024ad4:	6878      	ldr	r0, [r7, #4]
 8024ad6:	f000 ff7f 	bl	80259d8 <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEEC1Ev>
 8024ada:	687b      	ldr	r3, [r7, #4]
 8024adc:	4618      	mov	r0, r3
 8024ade:	3708      	adds	r7, #8
 8024ae0:	46bd      	mov	sp, r7
 8024ae2:	bd80      	pop	{r7, pc}

08024ae4 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 8024ae4:	b580      	push	{r7, lr}
 8024ae6:	b082      	sub	sp, #8
 8024ae8:	af00      	add	r7, sp, #0
 8024aea:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 8024aec:	687b      	ldr	r3, [r7, #4]
 8024aee:	2200      	movs	r2, #0
 8024af0:	601a      	str	r2, [r3, #0]
 8024af2:	687b      	ldr	r3, [r7, #4]
 8024af4:	2200      	movs	r2, #0
 8024af6:	605a      	str	r2, [r3, #4]
 8024af8:	687b      	ldr	r3, [r7, #4]
 8024afa:	3308      	adds	r3, #8
 8024afc:	4618      	mov	r0, r3
 8024afe:	f000 ff76 	bl	80259ee <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1Ev>
 8024b02:	687b      	ldr	r3, [r7, #4]
 8024b04:	3318      	adds	r3, #24
 8024b06:	4618      	mov	r0, r3
 8024b08:	f000 ff71 	bl	80259ee <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1Ev>
	{ }
 8024b0c:	687b      	ldr	r3, [r7, #4]
 8024b0e:	4618      	mov	r0, r3
 8024b10:	3708      	adds	r7, #8
 8024b12:	46bd      	mov	sp, r7
 8024b14:	bd80      	pop	{r7, pc}

08024b16 <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8024b16:	b480      	push	{r7}
 8024b18:	b083      	sub	sp, #12
 8024b1a:	af00      	add	r7, sp, #0
 8024b1c:	6078      	str	r0, [r7, #4]
 8024b1e:	687b      	ldr	r3, [r7, #4]
 8024b20:	4618      	mov	r0, r3
 8024b22:	370c      	adds	r7, #12
 8024b24:	46bd      	mov	sp, r7
 8024b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024b2a:	4770      	bx	lr

08024b2c <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8024b2c:	b480      	push	{r7}
 8024b2e:	b083      	sub	sp, #12
 8024b30:	af00      	add	r7, sp, #0
 8024b32:	6078      	str	r0, [r7, #4]
 8024b34:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8024b36:	687b      	ldr	r3, [r7, #4]
 8024b38:	681a      	ldr	r2, [r3, #0]
 8024b3a:	683b      	ldr	r3, [r7, #0]
 8024b3c:	681b      	ldr	r3, [r3, #0]
 8024b3e:	429a      	cmp	r2, r3
 8024b40:	d201      	bcs.n	8024b46 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8024b42:	683b      	ldr	r3, [r7, #0]
 8024b44:	e000      	b.n	8024b48 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8024b46:	687b      	ldr	r3, [r7, #4]
    }
 8024b48:	4618      	mov	r0, r3
 8024b4a:	370c      	adds	r7, #12
 8024b4c:	46bd      	mov	sp, r7
 8024b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024b52:	4770      	bx	lr

08024b54 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 8024b54:	b590      	push	{r4, r7, lr}
 8024b56:	b085      	sub	sp, #20
 8024b58:	af00      	add	r7, sp, #0
 8024b5a:	6078      	str	r0, [r7, #4]
 8024b5c:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8024b5e:	f107 030c 	add.w	r3, r7, #12
 8024b62:	6879      	ldr	r1, [r7, #4]
 8024b64:	4618      	mov	r0, r3
 8024b66:	f000 f82c 	bl	8024bc2 <_ZNKSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8024b6a:	f107 030c 	add.w	r3, r7, #12
 8024b6e:	6839      	ldr	r1, [r7, #0]
 8024b70:	4618      	mov	r0, r3
 8024b72:	f000 ff53 	bl	8025a1c <_ZNSt16allocator_traitsISaIPN10BHYWrapper8BHYFrameEEE8allocateERS3_j>
 8024b76:	4604      	mov	r4, r0
 8024b78:	bf00      	nop
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8024b7a:	f107 030c 	add.w	r3, r7, #12
 8024b7e:	4618      	mov	r0, r3
 8024b80:	f000 f830 	bl	8024be4 <_ZNSaIPN10BHYWrapper8BHYFrameEED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8024b84:	4623      	mov	r3, r4
      }
 8024b86:	4618      	mov	r0, r3
 8024b88:	3714      	adds	r7, #20
 8024b8a:	46bd      	mov	sp, r7
 8024b8c:	bd90      	pop	{r4, r7, pc}

08024b8e <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE15_M_create_nodesEPPS1_S5_>:
    _Deque_base<_Tp, _Alloc>::
 8024b8e:	b580      	push	{r7, lr}
 8024b90:	b086      	sub	sp, #24
 8024b92:	af00      	add	r7, sp, #0
 8024b94:	60f8      	str	r0, [r7, #12]
 8024b96:	60b9      	str	r1, [r7, #8]
 8024b98:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8024b9a:	68bb      	ldr	r3, [r7, #8]
 8024b9c:	617b      	str	r3, [r7, #20]
 8024b9e:	697a      	ldr	r2, [r7, #20]
 8024ba0:	687b      	ldr	r3, [r7, #4]
 8024ba2:	429a      	cmp	r2, r3
 8024ba4:	d209      	bcs.n	8024bba <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE15_M_create_nodesEPPS1_S5_+0x2c>
	    *__cur = this->_M_allocate_node();
 8024ba6:	68f8      	ldr	r0, [r7, #12]
 8024ba8:	f7ff fe46 	bl	8024838 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_allocate_nodeEv>
 8024bac:	4602      	mov	r2, r0
 8024bae:	697b      	ldr	r3, [r7, #20]
 8024bb0:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8024bb2:	697b      	ldr	r3, [r7, #20]
 8024bb4:	3304      	adds	r3, #4
 8024bb6:	617b      	str	r3, [r7, #20]
 8024bb8:	e7f1      	b.n	8024b9e <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE15_M_create_nodesEPPS1_S5_+0x10>
    }
 8024bba:	bf00      	nop
 8024bbc:	3718      	adds	r7, #24
 8024bbe:	46bd      	mov	sp, r7
 8024bc0:	bd80      	pop	{r7, pc}

08024bc2 <_ZNKSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 8024bc2:	b580      	push	{r7, lr}
 8024bc4:	b082      	sub	sp, #8
 8024bc6:	af00      	add	r7, sp, #0
 8024bc8:	6078      	str	r0, [r7, #4]
 8024bca:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 8024bcc:	6838      	ldr	r0, [r7, #0]
 8024bce:	f000 fd18 	bl	8025602 <_ZNKSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 8024bd2:	4603      	mov	r3, r0
 8024bd4:	4619      	mov	r1, r3
 8024bd6:	6878      	ldr	r0, [r7, #4]
 8024bd8:	f000 ff2f 	bl	8025a3a <_ZNSaIPN10BHYWrapper8BHYFrameEEC1IS0_EERKSaIT_E>
 8024bdc:	6878      	ldr	r0, [r7, #4]
 8024bde:	3708      	adds	r7, #8
 8024be0:	46bd      	mov	sp, r7
 8024be2:	bd80      	pop	{r7, pc}

08024be4 <_ZNSaIPN10BHYWrapper8BHYFrameEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8024be4:	b580      	push	{r7, lr}
 8024be6:	b082      	sub	sp, #8
 8024be8:	af00      	add	r7, sp, #0
 8024bea:	6078      	str	r0, [r7, #4]
 8024bec:	6878      	ldr	r0, [r7, #4]
 8024bee:	f000 ff31 	bl	8025a54 <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEED1Ev>
 8024bf2:	687b      	ldr	r3, [r7, #4]
 8024bf4:	4618      	mov	r0, r3
 8024bf6:	3708      	adds	r7, #8
 8024bf8:	46bd      	mov	sp, r7
 8024bfa:	bd80      	pop	{r7, pc}

08024bfc <_ZNSt16allocator_traitsISaIPN10BHYWrapper8BHYFrameEEE10deallocateERS3_PS2_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8024bfc:	b580      	push	{r7, lr}
 8024bfe:	b084      	sub	sp, #16
 8024c00:	af00      	add	r7, sp, #0
 8024c02:	60f8      	str	r0, [r7, #12]
 8024c04:	60b9      	str	r1, [r7, #8]
 8024c06:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8024c08:	687a      	ldr	r2, [r7, #4]
 8024c0a:	68b9      	ldr	r1, [r7, #8]
 8024c0c:	68f8      	ldr	r0, [r7, #12]
 8024c0e:	f000 ff2c 	bl	8025a6a <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEE10deallocateEPS3_j>
 8024c12:	bf00      	nop
 8024c14:	3710      	adds	r7, #16
 8024c16:	46bd      	mov	sp, r7
 8024c18:	bd80      	pop	{r7, pc}

08024c1a <_ZNSt11_Deque_baseIjSaIjEE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 8024c1a:	b580      	push	{r7, lr}
 8024c1c:	b082      	sub	sp, #8
 8024c1e:	af00      	add	r7, sp, #0
 8024c20:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8024c22:	6878      	ldr	r0, [r7, #4]
 8024c24:	f000 ff39 	bl	8025a9a <_ZNSaIjEC1Ev>
 8024c28:	687b      	ldr	r3, [r7, #4]
 8024c2a:	4618      	mov	r0, r3
 8024c2c:	f000 ff41 	bl	8025ab2 <_ZNSt11_Deque_baseIjSaIjEE16_Deque_impl_dataC1Ev>
	{ }
 8024c30:	687b      	ldr	r3, [r7, #4]
 8024c32:	4618      	mov	r0, r3
 8024c34:	3708      	adds	r7, #8
 8024c36:	46bd      	mov	sp, r7
 8024c38:	bd80      	pop	{r7, pc}

08024c3a <_ZNSaIjED1Ev>:
 8024c3a:	b580      	push	{r7, lr}
 8024c3c:	b082      	sub	sp, #8
 8024c3e:	af00      	add	r7, sp, #0
 8024c40:	6078      	str	r0, [r7, #4]
 8024c42:	6878      	ldr	r0, [r7, #4]
 8024c44:	f000 ff4e 	bl	8025ae4 <_ZN9__gnu_cxx13new_allocatorIjED1Ev>
 8024c48:	687b      	ldr	r3, [r7, #4]
 8024c4a:	4618      	mov	r0, r3
 8024c4c:	3708      	adds	r7, #8
 8024c4e:	46bd      	mov	sp, r7
 8024c50:	bd80      	pop	{r7, pc}

08024c52 <_ZNSt11_Deque_baseIjSaIjEE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 8024c52:	b590      	push	{r4, r7, lr}
 8024c54:	b089      	sub	sp, #36	; 0x24
 8024c56:	af00      	add	r7, sp, #0
 8024c58:	6078      	str	r0, [r7, #4]
 8024c5a:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 8024c5c:	2004      	movs	r0, #4
 8024c5e:	f7fc f933 	bl	8020ec8 <_ZSt16__deque_buf_sizej>
 8024c62:	4602      	mov	r2, r0
 8024c64:	683b      	ldr	r3, [r7, #0]
 8024c66:	fbb3 f3f2 	udiv	r3, r3, r2
 8024c6a:	3301      	adds	r3, #1
 8024c6c:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8024c6e:	2308      	movs	r3, #8
 8024c70:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 8024c72:	69fb      	ldr	r3, [r7, #28]
 8024c74:	3302      	adds	r3, #2
 8024c76:	613b      	str	r3, [r7, #16]
 8024c78:	f107 0210 	add.w	r2, r7, #16
 8024c7c:	f107 030c 	add.w	r3, r7, #12
 8024c80:	4611      	mov	r1, r2
 8024c82:	4618      	mov	r0, r3
 8024c84:	f7ff ff52 	bl	8024b2c <_ZSt3maxIjERKT_S2_S2_>
 8024c88:	4603      	mov	r3, r0
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8024c8a:	681a      	ldr	r2, [r3, #0]
 8024c8c:	687b      	ldr	r3, [r7, #4]
 8024c8e:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 8024c90:	687b      	ldr	r3, [r7, #4]
 8024c92:	685b      	ldr	r3, [r3, #4]
 8024c94:	4619      	mov	r1, r3
 8024c96:	6878      	ldr	r0, [r7, #4]
 8024c98:	f000 ff2f 	bl	8025afa <_ZNSt11_Deque_baseIjSaIjEE15_M_allocate_mapEj>
 8024c9c:	4602      	mov	r2, r0
 8024c9e:	687b      	ldr	r3, [r7, #4]
 8024ca0:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 8024ca2:	687b      	ldr	r3, [r7, #4]
 8024ca4:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 8024ca6:	687b      	ldr	r3, [r7, #4]
 8024ca8:	6859      	ldr	r1, [r3, #4]
 8024caa:	69fb      	ldr	r3, [r7, #28]
 8024cac:	1acb      	subs	r3, r1, r3
 8024cae:	085b      	lsrs	r3, r3, #1
 8024cb0:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 8024cb2:	4413      	add	r3, r2
 8024cb4:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 8024cb6:	69fb      	ldr	r3, [r7, #28]
 8024cb8:	009b      	lsls	r3, r3, #2
 8024cba:	69ba      	ldr	r2, [r7, #24]
 8024cbc:	4413      	add	r3, r2
 8024cbe:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 8024cc0:	697a      	ldr	r2, [r7, #20]
 8024cc2:	69b9      	ldr	r1, [r7, #24]
 8024cc4:	6878      	ldr	r0, [r7, #4]
 8024cc6:	f000 ff35 	bl	8025b34 <_ZNSt11_Deque_baseIjSaIjEE15_M_create_nodesEPPjS3_>
      this->_M_impl._M_start._M_set_node(__nstart);
 8024cca:	687b      	ldr	r3, [r7, #4]
 8024ccc:	3308      	adds	r3, #8
 8024cce:	69b9      	ldr	r1, [r7, #24]
 8024cd0:	4618      	mov	r0, r3
 8024cd2:	f000 fe2e 	bl	8025932 <_ZNSt15_Deque_iteratorIjRjPjE11_M_set_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 8024cd6:	687b      	ldr	r3, [r7, #4]
 8024cd8:	f103 0218 	add.w	r2, r3, #24
 8024cdc:	697b      	ldr	r3, [r7, #20]
 8024cde:	3b04      	subs	r3, #4
 8024ce0:	4619      	mov	r1, r3
 8024ce2:	4610      	mov	r0, r2
 8024ce4:	f000 fe25 	bl	8025932 <_ZNSt15_Deque_iteratorIjRjPjE11_M_set_nodeEPS1_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 8024ce8:	687b      	ldr	r3, [r7, #4]
 8024cea:	68da      	ldr	r2, [r3, #12]
 8024cec:	687b      	ldr	r3, [r7, #4]
 8024cee:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8024cf0:	687b      	ldr	r3, [r7, #4]
 8024cf2:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 8024cf4:	2004      	movs	r0, #4
 8024cf6:	f7fc f8e7 	bl	8020ec8 <_ZSt16__deque_buf_sizej>
 8024cfa:	4602      	mov	r2, r0
 8024cfc:	683b      	ldr	r3, [r7, #0]
 8024cfe:	fbb3 f1f2 	udiv	r1, r3, r2
 8024d02:	fb01 f202 	mul.w	r2, r1, r2
 8024d06:	1a9b      	subs	r3, r3, r2
					+ __num_elements
 8024d08:	009b      	lsls	r3, r3, #2
 8024d0a:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8024d0c:	687b      	ldr	r3, [r7, #4]
 8024d0e:	619a      	str	r2, [r3, #24]
    }
 8024d10:	bf00      	nop
 8024d12:	3724      	adds	r7, #36	; 0x24
 8024d14:	46bd      	mov	sp, r7
 8024d16:	bd90      	pop	{r4, r7, pc}

08024d18 <_ZNSt11_Deque_baseIjSaIjEE16_M_destroy_nodesEPPjS3_>:
    _Deque_base<_Tp, _Alloc>::
 8024d18:	b580      	push	{r7, lr}
 8024d1a:	b086      	sub	sp, #24
 8024d1c:	af00      	add	r7, sp, #0
 8024d1e:	60f8      	str	r0, [r7, #12]
 8024d20:	60b9      	str	r1, [r7, #8]
 8024d22:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8024d24:	68bb      	ldr	r3, [r7, #8]
 8024d26:	617b      	str	r3, [r7, #20]
 8024d28:	697a      	ldr	r2, [r7, #20]
 8024d2a:	687b      	ldr	r3, [r7, #4]
 8024d2c:	429a      	cmp	r2, r3
 8024d2e:	d209      	bcs.n	8024d44 <_ZNSt11_Deque_baseIjSaIjEE16_M_destroy_nodesEPPjS3_+0x2c>
	_M_deallocate_node(*__n);
 8024d30:	697b      	ldr	r3, [r7, #20]
 8024d32:	681b      	ldr	r3, [r3, #0]
 8024d34:	4619      	mov	r1, r3
 8024d36:	68f8      	ldr	r0, [r7, #12]
 8024d38:	f000 fe14 	bl	8025964 <_ZNSt11_Deque_baseIjSaIjEE18_M_deallocate_nodeEPj>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8024d3c:	697b      	ldr	r3, [r7, #20]
 8024d3e:	3304      	adds	r3, #4
 8024d40:	617b      	str	r3, [r7, #20]
 8024d42:	e7f1      	b.n	8024d28 <_ZNSt11_Deque_baseIjSaIjEE16_M_destroy_nodesEPPjS3_+0x10>
    }
 8024d44:	bf00      	nop
 8024d46:	3718      	adds	r7, #24
 8024d48:	46bd      	mov	sp, r7
 8024d4a:	bd80      	pop	{r7, pc}

08024d4c <_ZNSt11_Deque_baseIjSaIjEE17_M_deallocate_mapEPPjj>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 8024d4c:	b580      	push	{r7, lr}
 8024d4e:	b086      	sub	sp, #24
 8024d50:	af00      	add	r7, sp, #0
 8024d52:	60f8      	str	r0, [r7, #12]
 8024d54:	60b9      	str	r1, [r7, #8]
 8024d56:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8024d58:	f107 0314 	add.w	r3, r7, #20
 8024d5c:	68f9      	ldr	r1, [r7, #12]
 8024d5e:	4618      	mov	r0, r3
 8024d60:	f000 ff02 	bl	8025b68 <_ZNKSt11_Deque_baseIjSaIjEE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 8024d64:	f107 0314 	add.w	r3, r7, #20
 8024d68:	687a      	ldr	r2, [r7, #4]
 8024d6a:	68b9      	ldr	r1, [r7, #8]
 8024d6c:	4618      	mov	r0, r3
 8024d6e:	f000 ff18 	bl	8025ba2 <_ZNSt16allocator_traitsISaIPjEE10deallocateERS1_PS0_j>
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8024d72:	f107 0314 	add.w	r3, r7, #20
 8024d76:	4618      	mov	r0, r3
 8024d78:	f000 ff07 	bl	8025b8a <_ZNSaIPjED1Ev>
      }
 8024d7c:	bf00      	nop
 8024d7e:	3718      	adds	r7, #24
 8024d80:	46bd      	mov	sp, r7
 8024d82:	bd80      	pop	{r7, pc}

08024d84 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_data12_M_swap_dataERS4_>:
	_M_swap_data(_Deque_impl_data& __x) _GLIBCXX_NOEXCEPT
 8024d84:	b580      	push	{r7, lr}
 8024d86:	b082      	sub	sp, #8
 8024d88:	af00      	add	r7, sp, #0
 8024d8a:	6078      	str	r0, [r7, #4]
 8024d8c:	6039      	str	r1, [r7, #0]
	  std::swap(*this, __x);
 8024d8e:	6839      	ldr	r1, [r7, #0]
 8024d90:	6878      	ldr	r0, [r7, #4]
 8024d92:	f000 ff15 	bl	8025bc0 <_ZSt4swapINSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS2_EE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISA_ESt18is_move_assignableISA_EEE5valueEvE4typeERSA_SK_>
	}
 8024d96:	bf00      	nop
 8024d98:	3708      	adds	r7, #8
 8024d9a:	46bd      	mov	sp, r7
 8024d9c:	bd80      	pop	{r7, pc}

08024d9e <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 8024d9e:	b580      	push	{r7, lr}
 8024da0:	b086      	sub	sp, #24
 8024da2:	af00      	add	r7, sp, #0
 8024da4:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(begin()); }
 8024da6:	f107 0308 	add.w	r3, r7, #8
 8024daa:	6879      	ldr	r1, [r7, #4]
 8024dac:	4618      	mov	r0, r3
 8024dae:	f7ff fa82 	bl	80242b6 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5beginEv>
 8024db2:	f107 0308 	add.w	r3, r7, #8
 8024db6:	4619      	mov	r1, r3
 8024db8:	6878      	ldr	r0, [r7, #4]
 8024dba:	f7ff fcbd 	bl	8024738 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_erase_at_endESt15_Deque_iteratorIS1_RS1_PS1_E>
 8024dbe:	bf00      	nop
 8024dc0:	3718      	adds	r7, #24
 8024dc2:	46bd      	mov	sp, r7
 8024dc4:	bd80      	pop	{r7, pc}

08024dc6 <_ZSt15__alloc_on_moveISaIN10BHYWrapper8BHYFrameEEEvRT_S4_>:
    { }
#endif

  template<typename _Alloc>
    _GLIBCXX14_CONSTEXPR inline void
    __alloc_on_move(_Alloc& __one, _Alloc& __two)
 8024dc6:	b580      	push	{r7, lr}
 8024dc8:	b082      	sub	sp, #8
 8024dca:	af00      	add	r7, sp, #0
 8024dcc:	6078      	str	r0, [r7, #4]
 8024dce:	6039      	str	r1, [r7, #0]
      typedef typename __traits::propagate_on_container_move_assignment __pocma;
#if __cplusplus >= 201703L
      if constexpr (__pocma::value)
	__one = std::move(__two);
#else
      __do_alloc_on_move(__one, __two, __pocma());
 8024dd0:	461a      	mov	r2, r3
 8024dd2:	6839      	ldr	r1, [r7, #0]
 8024dd4:	6878      	ldr	r0, [r7, #4]
 8024dd6:	f000 ff26 	bl	8025c26 <_ZSt18__do_alloc_on_moveISaIN10BHYWrapper8BHYFrameEEEvRT_S4_St17integral_constantIbLb1EE>
#endif
    }
 8024dda:	bf00      	nop
 8024ddc:	3708      	adds	r7, #8
 8024dde:	46bd      	mov	sp, r7
 8024de0:	bd80      	pop	{r7, pc}

08024de2 <_ZNSt11_Deque_baseIjSaIjEE16_Deque_impl_data12_M_swap_dataERS2_>:
	_M_swap_data(_Deque_impl_data& __x) _GLIBCXX_NOEXCEPT
 8024de2:	b580      	push	{r7, lr}
 8024de4:	b082      	sub	sp, #8
 8024de6:	af00      	add	r7, sp, #0
 8024de8:	6078      	str	r0, [r7, #4]
 8024dea:	6039      	str	r1, [r7, #0]
	  std::swap(*this, __x);
 8024dec:	6839      	ldr	r1, [r7, #0]
 8024dee:	6878      	ldr	r0, [r7, #4]
 8024df0:	f000 ff26 	bl	8025c40 <_ZSt4swapINSt11_Deque_baseIjSaIjEE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS8_ESt18is_move_assignableIS8_EEE5valueEvE4typeERS8_SI_>
	}
 8024df4:	bf00      	nop
 8024df6:	3708      	adds	r7, #8
 8024df8:	46bd      	mov	sp, r7
 8024dfa:	bd80      	pop	{r7, pc}

08024dfc <_ZNSt5dequeIjSaIjEE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 8024dfc:	b580      	push	{r7, lr}
 8024dfe:	b086      	sub	sp, #24
 8024e00:	af00      	add	r7, sp, #0
 8024e02:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(begin()); }
 8024e04:	f107 0308 	add.w	r3, r7, #8
 8024e08:	6879      	ldr	r1, [r7, #4]
 8024e0a:	4618      	mov	r0, r3
 8024e0c:	f7ff fad9 	bl	80243c2 <_ZNSt5dequeIjSaIjEE5beginEv>
 8024e10:	f107 0308 	add.w	r3, r7, #8
 8024e14:	4619      	mov	r1, r3
 8024e16:	6878      	ldr	r0, [r7, #4]
 8024e18:	f000 ff45 	bl	8025ca6 <_ZNSt5dequeIjSaIjEE15_M_erase_at_endESt15_Deque_iteratorIjRjPjE>
 8024e1c:	bf00      	nop
 8024e1e:	3718      	adds	r7, #24
 8024e20:	46bd      	mov	sp, r7
 8024e22:	bd80      	pop	{r7, pc}

08024e24 <_ZSt15__alloc_on_moveISaIjEEvRT_S2_>:
    __alloc_on_move(_Alloc& __one, _Alloc& __two)
 8024e24:	b580      	push	{r7, lr}
 8024e26:	b082      	sub	sp, #8
 8024e28:	af00      	add	r7, sp, #0
 8024e2a:	6078      	str	r0, [r7, #4]
 8024e2c:	6039      	str	r1, [r7, #0]
      __do_alloc_on_move(__one, __two, __pocma());
 8024e2e:	461a      	mov	r2, r3
 8024e30:	6839      	ldr	r1, [r7, #0]
 8024e32:	6878      	ldr	r0, [r7, #4]
 8024e34:	f000 ff6a 	bl	8025d0c <_ZSt18__do_alloc_on_moveISaIjEEvRT_S2_St17integral_constantIbLb1EE>
    }
 8024e38:	bf00      	nop
 8024e3a:	3708      	adds	r7, #8
 8024e3c:	46bd      	mov	sp, r7
 8024e3e:	bd80      	pop	{r7, pc}

08024e40 <_ZSt10__distanceIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E15difference_typeES5_S5_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8024e40:	b480      	push	{r7}
 8024e42:	b085      	sub	sp, #20
 8024e44:	af00      	add	r7, sp, #0
 8024e46:	60f8      	str	r0, [r7, #12]
 8024e48:	60b9      	str	r1, [r7, #8]
 8024e4a:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8024e4c:	68ba      	ldr	r2, [r7, #8]
 8024e4e:	68fb      	ldr	r3, [r7, #12]
 8024e50:	1ad3      	subs	r3, r2, r3
 8024e52:	109b      	asrs	r3, r3, #2
 8024e54:	4a04      	ldr	r2, [pc, #16]	; (8024e68 <_ZSt10__distanceIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E15difference_typeES5_S5_St26random_access_iterator_tag+0x28>)
 8024e56:	fb02 f303 	mul.w	r3, r2, r3
    }
 8024e5a:	4618      	mov	r0, r3
 8024e5c:	3714      	adds	r7, #20
 8024e5e:	46bd      	mov	sp, r7
 8024e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024e64:	4770      	bx	lr
 8024e66:	bf00      	nop
 8024e68:	cccccccd 	.word	0xcccccccd

08024e6c <_ZSt9__advanceIPKN10BHYWrapper8BHYFrameEiEvRT_T0_St26random_access_iterator_tag>:
    __advance(_RandomAccessIterator& __i, _Distance __n,
 8024e6c:	b480      	push	{r7}
 8024e6e:	b085      	sub	sp, #20
 8024e70:	af00      	add	r7, sp, #0
 8024e72:	60f8      	str	r0, [r7, #12]
 8024e74:	60b9      	str	r1, [r7, #8]
 8024e76:	713a      	strb	r2, [r7, #4]
	__i += __n;
 8024e78:	68fb      	ldr	r3, [r7, #12]
 8024e7a:	6819      	ldr	r1, [r3, #0]
 8024e7c:	68ba      	ldr	r2, [r7, #8]
 8024e7e:	4613      	mov	r3, r2
 8024e80:	009b      	lsls	r3, r3, #2
 8024e82:	4413      	add	r3, r2
 8024e84:	009b      	lsls	r3, r3, #2
 8024e86:	18ca      	adds	r2, r1, r3
 8024e88:	68fb      	ldr	r3, [r7, #12]
 8024e8a:	601a      	str	r2, [r3, #0]
    }
 8024e8c:	bf00      	nop
 8024e8e:	3714      	adds	r7, #20
 8024e90:	46bd      	mov	sp, r7
 8024e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024e96:	4770      	bx	lr

08024e98 <_ZSt12__miter_baseIPKN10BHYWrapper8BHYFrameEET_S4_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8024e98:	b480      	push	{r7}
 8024e9a:	b083      	sub	sp, #12
 8024e9c:	af00      	add	r7, sp, #0
 8024e9e:	6078      	str	r0, [r7, #4]
    { return __it; }
 8024ea0:	687b      	ldr	r3, [r7, #4]
 8024ea2:	4618      	mov	r0, r3
 8024ea4:	370c      	adds	r7, #12
 8024ea6:	46bd      	mov	sp, r7
 8024ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024eac:	4770      	bx	lr

08024eae <_ZSt13__copy_move_aILb0EPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET1_T0_S9_S8_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8024eae:	b5b0      	push	{r4, r5, r7, lr}
 8024eb0:	b090      	sub	sp, #64	; 0x40
 8024eb2:	af00      	add	r7, sp, #0
 8024eb4:	60f8      	str	r0, [r7, #12]
 8024eb6:	60b9      	str	r1, [r7, #8]
 8024eb8:	607a      	str	r2, [r7, #4]
 8024eba:	603b      	str	r3, [r7, #0]
					     std::__niter_base(__result)));
 8024ebc:	68b8      	ldr	r0, [r7, #8]
 8024ebe:	f000 ff32 	bl	8025d26 <_ZSt12__niter_baseIPKN10BHYWrapper8BHYFrameEET_S4_>
 8024ec2:	4604      	mov	r4, r0
 8024ec4:	6878      	ldr	r0, [r7, #4]
 8024ec6:	f000 ff2e 	bl	8025d26 <_ZSt12__niter_baseIPKN10BHYWrapper8BHYFrameEET_S4_>
 8024eca:	4605      	mov	r5, r0
 8024ecc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8024ed0:	6839      	ldr	r1, [r7, #0]
 8024ed2:	4618      	mov	r0, r3
 8024ed4:	f7ff fa0d 	bl	80242f2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8024ed8:	f107 0320 	add.w	r3, r7, #32
 8024edc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8024ee0:	4611      	mov	r1, r2
 8024ee2:	4618      	mov	r0, r3
 8024ee4:	f000 ff2a 	bl	8025d3c <_ZSt12__niter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 8024ee8:	f107 0010 	add.w	r0, r7, #16
 8024eec:	f107 0320 	add.w	r3, r7, #32
 8024ef0:	462a      	mov	r2, r5
 8024ef2:	4621      	mov	r1, r4
 8024ef4:	f000 ff44 	bl	8025d80 <_ZSt14__copy_move_a1ILb0EPKN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS7_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSD_PSD_EE6__typeES7_S7_SG_>
 8024ef8:	68fb      	ldr	r3, [r7, #12]
 8024efa:	f107 0210 	add.w	r2, r7, #16
 8024efe:	6839      	ldr	r1, [r7, #0]
 8024f00:	4618      	mov	r0, r3
 8024f02:	f000 ff8f 	bl	8025e24 <_ZSt12__niter_wrapISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_RKS6_S6_>
    }
 8024f06:	68f8      	ldr	r0, [r7, #12]
 8024f08:	3740      	adds	r7, #64	; 0x40
 8024f0a:	46bd      	mov	sp, r7
 8024f0c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08024f10 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE28_M_reserve_elements_at_frontEj>:
      _M_reserve_elements_at_front(size_type __n)
 8024f10:	b580      	push	{r7, lr}
 8024f12:	b086      	sub	sp, #24
 8024f14:	af00      	add	r7, sp, #0
 8024f16:	60f8      	str	r0, [r7, #12]
 8024f18:	60b9      	str	r1, [r7, #8]
 8024f1a:	607a      	str	r2, [r7, #4]
	const size_type __vacancies = this->_M_impl._M_start._M_cur
 8024f1c:	68bb      	ldr	r3, [r7, #8]
 8024f1e:	689a      	ldr	r2, [r3, #8]
				      - this->_M_impl._M_start._M_first;
 8024f20:	68bb      	ldr	r3, [r7, #8]
 8024f22:	68db      	ldr	r3, [r3, #12]
 8024f24:	1ad3      	subs	r3, r2, r3
 8024f26:	109b      	asrs	r3, r3, #2
 8024f28:	4a0d      	ldr	r2, [pc, #52]	; (8024f60 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE28_M_reserve_elements_at_frontEj+0x50>)
 8024f2a:	fb02 f303 	mul.w	r3, r2, r3
	const size_type __vacancies = this->_M_impl._M_start._M_cur
 8024f2e:	617b      	str	r3, [r7, #20]
	if (__n > __vacancies)
 8024f30:	687a      	ldr	r2, [r7, #4]
 8024f32:	697b      	ldr	r3, [r7, #20]
 8024f34:	429a      	cmp	r2, r3
 8024f36:	d906      	bls.n	8024f46 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE28_M_reserve_elements_at_frontEj+0x36>
	  _M_new_elements_at_front(__n - __vacancies);
 8024f38:	687a      	ldr	r2, [r7, #4]
 8024f3a:	697b      	ldr	r3, [r7, #20]
 8024f3c:	1ad3      	subs	r3, r2, r3
 8024f3e:	4619      	mov	r1, r3
 8024f40:	68b8      	ldr	r0, [r7, #8]
 8024f42:	f000 ff7d 	bl	8025e40 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE24_M_new_elements_at_frontEj>
	return this->_M_impl._M_start - difference_type(__n);
 8024f46:	68bb      	ldr	r3, [r7, #8]
 8024f48:	f103 0108 	add.w	r1, r3, #8
 8024f4c:	687a      	ldr	r2, [r7, #4]
 8024f4e:	68fb      	ldr	r3, [r7, #12]
 8024f50:	4618      	mov	r0, r3
 8024f52:	f000 ffbb 	bl	8025ecc <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>
      }
 8024f56:	68f8      	ldr	r0, [r7, #12]
 8024f58:	3718      	adds	r7, #24
 8024f5a:	46bd      	mov	sp, r7
 8024f5c:	bd80      	pop	{r7, pc}
 8024f5e:	bf00      	nop
 8024f60:	cccccccd 	.word	0xcccccccd

08024f64 <_ZSt22__uninitialized_copy_aIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_ES1_ET0_T_S9_S8_RSaIT1_E>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8024f64:	b580      	push	{r7, lr}
 8024f66:	b088      	sub	sp, #32
 8024f68:	af00      	add	r7, sp, #0
 8024f6a:	60f8      	str	r0, [r7, #12]
 8024f6c:	60b9      	str	r1, [r7, #8]
 8024f6e:	607a      	str	r2, [r7, #4]
 8024f70:	603b      	str	r3, [r7, #0]
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
 8024f72:	f107 0310 	add.w	r3, r7, #16
 8024f76:	6839      	ldr	r1, [r7, #0]
 8024f78:	4618      	mov	r0, r3
 8024f7a:	f7ff f9ba 	bl	80242f2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8024f7e:	68f8      	ldr	r0, [r7, #12]
 8024f80:	f107 0310 	add.w	r3, r7, #16
 8024f84:	687a      	ldr	r2, [r7, #4]
 8024f86:	68b9      	ldr	r1, [r7, #8]
 8024f88:	f000 ffb3 	bl	8025ef2 <_ZSt18uninitialized_copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>
 8024f8c:	68f8      	ldr	r0, [r7, #12]
 8024f8e:	3720      	adds	r7, #32
 8024f90:	46bd      	mov	sp, r7
 8024f92:	bd80      	pop	{r7, pc}

08024f94 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE27_M_reserve_elements_at_backEj>:
      _M_reserve_elements_at_back(size_type __n)
 8024f94:	b580      	push	{r7, lr}
 8024f96:	b086      	sub	sp, #24
 8024f98:	af00      	add	r7, sp, #0
 8024f9a:	60f8      	str	r0, [r7, #12]
 8024f9c:	60b9      	str	r1, [r7, #8]
 8024f9e:	607a      	str	r2, [r7, #4]
	const size_type __vacancies = (this->_M_impl._M_finish._M_last
 8024fa0:	68bb      	ldr	r3, [r7, #8]
 8024fa2:	6a1a      	ldr	r2, [r3, #32]
				       - this->_M_impl._M_finish._M_cur) - 1;
 8024fa4:	68bb      	ldr	r3, [r7, #8]
 8024fa6:	699b      	ldr	r3, [r3, #24]
 8024fa8:	1ad3      	subs	r3, r2, r3
 8024faa:	109b      	asrs	r3, r3, #2
 8024fac:	4a0d      	ldr	r2, [pc, #52]	; (8024fe4 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE27_M_reserve_elements_at_backEj+0x50>)
 8024fae:	fb02 f303 	mul.w	r3, r2, r3
 8024fb2:	3b01      	subs	r3, #1
	const size_type __vacancies = (this->_M_impl._M_finish._M_last
 8024fb4:	617b      	str	r3, [r7, #20]
	if (__n > __vacancies)
 8024fb6:	687a      	ldr	r2, [r7, #4]
 8024fb8:	697b      	ldr	r3, [r7, #20]
 8024fba:	429a      	cmp	r2, r3
 8024fbc:	d906      	bls.n	8024fcc <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE27_M_reserve_elements_at_backEj+0x38>
	  _M_new_elements_at_back(__n - __vacancies);
 8024fbe:	687a      	ldr	r2, [r7, #4]
 8024fc0:	697b      	ldr	r3, [r7, #20]
 8024fc2:	1ad3      	subs	r3, r2, r3
 8024fc4:	4619      	mov	r1, r3
 8024fc6:	68b8      	ldr	r0, [r7, #8]
 8024fc8:	f000 ffae 	bl	8025f28 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_new_elements_at_backEj>
	return this->_M_impl._M_finish + difference_type(__n);
 8024fcc:	68bb      	ldr	r3, [r7, #8]
 8024fce:	f103 0118 	add.w	r1, r3, #24
 8024fd2:	687a      	ldr	r2, [r7, #4]
 8024fd4:	68fb      	ldr	r3, [r7, #12]
 8024fd6:	4618      	mov	r0, r3
 8024fd8:	f7ff fc82 	bl	80248e0 <_ZStplRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>
      }
 8024fdc:	68f8      	ldr	r0, [r7, #12]
 8024fde:	3718      	adds	r7, #24
 8024fe0:	46bd      	mov	sp, r7
 8024fe2:	bd80      	pop	{r7, pc}
 8024fe4:	cccccccd 	.word	0xcccccccd

08024fe8 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_j>:
    }

  template <typename _Tp, typename _Alloc>
    template <typename _ForwardIterator>
      void
      deque<_Tp, _Alloc>::
 8024fe8:	b5b0      	push	{r4, r5, r7, lr}
 8024fea:	f5ad 7d2e 	sub.w	sp, sp, #696	; 0x2b8
 8024fee:	af04      	add	r7, sp, #16
 8024ff0:	f507 742a 	add.w	r4, r7, #680	; 0x2a8
 8024ff4:	f5a4 7427 	sub.w	r4, r4, #668	; 0x29c
 8024ff8:	6020      	str	r0, [r4, #0]
 8024ffa:	f507 702a 	add.w	r0, r7, #680	; 0x2a8
 8024ffe:	f5a0 7028 	sub.w	r0, r0, #672	; 0x2a0
 8025002:	6001      	str	r1, [r0, #0]
 8025004:	f507 712a 	add.w	r1, r7, #680	; 0x2a8
 8025008:	f5a1 7129 	sub.w	r1, r1, #676	; 0x2a4
 802500c:	600a      	str	r2, [r1, #0]
 802500e:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8025012:	f5a2 722a 	sub.w	r2, r2, #680	; 0x2a8
 8025016:	6013      	str	r3, [r2, #0]
      _M_insert_aux(iterator __pos,
		    _ForwardIterator __first, _ForwardIterator __last,
		    size_type __n)
      {
	const difference_type __elemsbefore = __pos - this->_M_impl._M_start;
 8025018:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802501c:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8025020:	681b      	ldr	r3, [r3, #0]
 8025022:	f103 0208 	add.w	r2, r3, #8
 8025026:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802502a:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 802502e:	4611      	mov	r1, r2
 8025030:	6818      	ldr	r0, [r3, #0]
 8025032:	f7fe ff6b 	bl	8023f0c <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_ES6_>
 8025036:	f8c7 02a4 	str.w	r0, [r7, #676]	; 0x2a4
	const size_type __length = size();
 802503a:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802503e:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8025042:	6818      	ldr	r0, [r3, #0]
 8025044:	f7fe fc9f 	bl	8023986 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8025048:	f8c7 02a0 	str.w	r0, [r7, #672]	; 0x2a0
	if (static_cast<size_type>(__elemsbefore) < __length / 2)
 802504c:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 8025050:	085a      	lsrs	r2, r3, #1
 8025052:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 8025056:	429a      	cmp	r2, r3
 8025058:	f240 8158 	bls.w	802530c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_j+0x324>
	  {
	    iterator __new_start = _M_reserve_elements_at_front(__n);
 802505c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025060:	f5a3 700f 	sub.w	r0, r3, #572	; 0x23c
 8025064:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025068:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 802506c:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 8025070:	6819      	ldr	r1, [r3, #0]
 8025072:	f7ff ff4d 	bl	8024f10 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE28_M_reserve_elements_at_frontEj>
	    iterator __old_start = this->_M_impl._M_start;
 8025076:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802507a:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 802507e:	681b      	ldr	r3, [r3, #0]
 8025080:	f103 0208 	add.w	r2, r3, #8
 8025084:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8025088:	4611      	mov	r1, r2
 802508a:	4618      	mov	r0, r3
 802508c:	f7ff f931 	bl	80242f2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
	    __pos = this->_M_impl._M_start + __elemsbefore;
 8025090:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025094:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8025098:	681b      	ldr	r3, [r3, #0]
 802509a:	f103 0108 	add.w	r1, r3, #8
 802509e:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80250a2:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80250a6:	f8d7 22a4 	ldr.w	r2, [r7, #676]	; 0x2a4
 80250aa:	4618      	mov	r0, r3
 80250ac:	f7ff fc18 	bl	80248e0 <_ZStplRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>
 80250b0:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80250b4:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 80250b8:	681a      	ldr	r2, [r3, #0]
 80250ba:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80250be:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80250c2:	4614      	mov	r4, r2
 80250c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80250c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	    __try
	      {
		if (__elemsbefore >= difference_type(__n))
 80250ca:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 80250ce:	f8d7 22a4 	ldr.w	r2, [r7, #676]	; 0x2a4
 80250d2:	429a      	cmp	r2, r3
 80250d4:	f2c0 8098 	blt.w	8025208 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_j+0x220>
		  {
		    iterator __start_n = (this->_M_impl._M_start
 80250d8:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80250dc:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80250e0:	681b      	ldr	r3, [r3, #0]
 80250e2:	f103 0108 	add.w	r1, r3, #8
 80250e6:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 80250ea:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80250ee:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80250f2:	4618      	mov	r0, r3
 80250f4:	f7ff fbf4 	bl	80248e0 <_ZStplRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>
					  + difference_type(__n));
		    std::__uninitialized_move_a(this->_M_impl._M_start,
 80250f8:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80250fc:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8025100:	681b      	ldr	r3, [r3, #0]
 8025102:	f103 0208 	add.w	r2, r3, #8
 8025106:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 802510a:	4611      	mov	r1, r2
 802510c:	4618      	mov	r0, r3
 802510e:	f7ff f8f0 	bl	80242f2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8025112:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8025116:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 802511a:	4611      	mov	r1, r2
 802511c:	4618      	mov	r0, r3
 802511e:	f7ff f8e8 	bl	80242f2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8025122:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8025126:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 802512a:	4611      	mov	r1, r2
 802512c:	4618      	mov	r0, r3
 802512e:	f7ff f8e0 	bl	80242f2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
						__start_n, __new_start,
						_M_get_Tp_allocator());
 8025132:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025136:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 802513a:	681b      	ldr	r3, [r3, #0]
 802513c:	4618      	mov	r0, r3
 802513e:	f7fe ff11 	bl	8023f64 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 8025142:	4604      	mov	r4, r0
		    std::__uninitialized_move_a(this->_M_impl._M_start,
 8025144:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025148:	f5a3 7007 	sub.w	r0, r3, #540	; 0x21c
 802514c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8025150:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8025154:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 8025158:	9400      	str	r4, [sp, #0]
 802515a:	f000 ff29 	bl	8025fb0 <_ZSt22__uninitialized_move_aISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_SaIS2_EET0_T_S8_S7_RT1_>
		    this->_M_impl._M_start = __new_start;
 802515e:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025162:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8025166:	681b      	ldr	r3, [r3, #0]
 8025168:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 802516c:	f5a2 720f 	sub.w	r2, r2, #572	; 0x23c
 8025170:	f103 0408 	add.w	r4, r3, #8
 8025174:	4613      	mov	r3, r2
 8025176:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8025178:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		    _GLIBCXX_MOVE3(__start_n, __pos, __old_start);
 802517c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8025180:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8025184:	4611      	mov	r1, r2
 8025186:	4618      	mov	r0, r3
 8025188:	f7ff f8b3 	bl	80242f2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802518c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025190:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8025194:	f107 02ec 	add.w	r2, r7, #236	; 0xec
 8025198:	6819      	ldr	r1, [r3, #0]
 802519a:	4610      	mov	r0, r2
 802519c:	f7ff f8a9 	bl	80242f2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80251a0:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80251a4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80251a8:	4611      	mov	r1, r2
 80251aa:	4618      	mov	r0, r3
 80251ac:	f7ff f8a1 	bl	80242f2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80251b0:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80251b4:	f5a3 70ee 	sub.w	r0, r3, #476	; 0x1dc
 80251b8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80251bc:	f107 02ec 	add.w	r2, r7, #236	; 0xec
 80251c0:	f107 01dc 	add.w	r1, r7, #220	; 0xdc
 80251c4:	f000 ff2d 	bl	8026022 <_ZSt4moveISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_ET0_T_S7_S6_>
		    std::copy(__first, __last, __pos - difference_type(__n));
 80251c8:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 80251cc:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80251d0:	f5a3 70c6 	sub.w	r0, r3, #396	; 0x18c
 80251d4:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80251d8:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 80251dc:	6819      	ldr	r1, [r3, #0]
 80251de:	f000 fe75 	bl	8025ecc <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>
 80251e2:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80251e6:	f5a3 70ce 	sub.w	r0, r3, #412	; 0x19c
 80251ea:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80251ee:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 80251f2:	f5a2 722a 	sub.w	r2, r2, #680	; 0x2a8
 80251f6:	f507 712a 	add.w	r1, r7, #680	; 0x2a8
 80251fa:	f5a1 7129 	sub.w	r1, r1, #676	; 0x2a4
 80251fe:	6812      	ldr	r2, [r2, #0]
 8025200:	6809      	ldr	r1, [r1, #0]
 8025202:	f7ff f9f1 	bl	80245e8 <_ZSt4copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>
	      _M_destroy_nodes(this->_M_impl._M_finish._M_node + 1,
			       __new_finish._M_node + 1);
	      __throw_exception_again;
	    }
	}
      }
 8025206:	e1dd      	b.n	80255c4 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_j+0x5dc>
		    _ForwardIterator __mid = __first;
 8025208:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802520c:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8025210:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8025214:	f5a2 7229 	sub.w	r2, r2, #676	; 0x2a4
 8025218:	6812      	ldr	r2, [r2, #0]
 802521a:	601a      	str	r2, [r3, #0]
		    std::advance(__mid, difference_type(__n) - __elemsbefore);
 802521c:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 8025220:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 8025224:	1ad2      	subs	r2, r2, r3
 8025226:	f107 0348 	add.w	r3, r7, #72	; 0x48
 802522a:	4611      	mov	r1, r2
 802522c:	4618      	mov	r0, r3
 802522e:	f000 ff2e 	bl	802608e <_ZSt7advanceIPKN10BHYWrapper8BHYFrameEiEvRT_T0_>
		    std::__uninitialized_move_copy(this->_M_impl._M_start,
 8025232:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025236:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 802523a:	681b      	ldr	r3, [r3, #0]
 802523c:	f103 0208 	add.w	r2, r3, #8
 8025240:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8025244:	4611      	mov	r1, r2
 8025246:	4618      	mov	r0, r3
 8025248:	f7ff f853 	bl	80242f2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802524c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025250:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8025254:	f507 72a6 	add.w	r2, r7, #332	; 0x14c
 8025258:	6819      	ldr	r1, [r3, #0]
 802525a:	4610      	mov	r0, r2
 802525c:	f7ff f849 	bl	80242f2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8025260:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025264:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8025268:	681c      	ldr	r4, [r3, #0]
 802526a:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 802526e:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8025272:	4611      	mov	r1, r2
 8025274:	4618      	mov	r0, r3
 8025276:	f7ff f83c 	bl	80242f2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
						   _M_get_Tp_allocator());
 802527a:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802527e:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8025282:	681b      	ldr	r3, [r3, #0]
 8025284:	4618      	mov	r0, r3
 8025286:	f7fe fe6d 	bl	8023f64 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 802528a:	4602      	mov	r2, r0
		    std::__uninitialized_move_copy(this->_M_impl._M_start,
 802528c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025290:	f5a3 70be 	sub.w	r0, r3, #380	; 0x17c
 8025294:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025298:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 802529c:	f507 75a6 	add.w	r5, r7, #332	; 0x14c
 80252a0:	f507 719e 	add.w	r1, r7, #316	; 0x13c
 80252a4:	9202      	str	r2, [sp, #8]
 80252a6:	f507 72ae 	add.w	r2, r7, #348	; 0x15c
 80252aa:	9201      	str	r2, [sp, #4]
 80252ac:	9400      	str	r4, [sp, #0]
 80252ae:	681b      	ldr	r3, [r3, #0]
 80252b0:	462a      	mov	r2, r5
 80252b2:	f000 feff 	bl	80260b4 <_ZSt25__uninitialized_move_copyISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EPKS2_S5_SaIS2_EET1_T_SA_T0_SB_S9_RT2_>
		    this->_M_impl._M_start = __new_start;
 80252b6:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80252ba:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80252be:	681b      	ldr	r3, [r3, #0]
 80252c0:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 80252c4:	f5a2 720f 	sub.w	r2, r2, #572	; 0x23c
 80252c8:	f103 0408 	add.w	r4, r3, #8
 80252cc:	4613      	mov	r3, r2
 80252ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80252d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		    std::copy(__mid, __last, __old_start);
 80252d4:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80252d8:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80252dc:	681c      	ldr	r4, [r3, #0]
 80252de:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80252e2:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 80252e6:	4611      	mov	r1, r2
 80252e8:	4618      	mov	r0, r3
 80252ea:	f7ff f802 	bl	80242f2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80252ee:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80252f2:	f5a3 709e 	sub.w	r0, r3, #316	; 0x13c
 80252f6:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 80252fa:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 80252fe:	f5a2 722a 	sub.w	r2, r2, #680	; 0x2a8
 8025302:	6812      	ldr	r2, [r2, #0]
 8025304:	4621      	mov	r1, r4
 8025306:	f7ff f96f 	bl	80245e8 <_ZSt4copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>
      }
 802530a:	e15b      	b.n	80255c4 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_j+0x5dc>
	  iterator __new_finish = _M_reserve_elements_at_back(__n);
 802530c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025310:	f5a3 701c 	sub.w	r0, r3, #624	; 0x270
 8025314:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025318:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 802531c:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 8025320:	6819      	ldr	r1, [r3, #0]
 8025322:	f7ff fe37 	bl	8024f94 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE27_M_reserve_elements_at_backEj>
	  iterator __old_finish = this->_M_impl._M_finish;
 8025326:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802532a:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 802532e:	681b      	ldr	r3, [r3, #0]
 8025330:	f103 0218 	add.w	r2, r3, #24
 8025334:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8025338:	4611      	mov	r1, r2
 802533a:	4618      	mov	r0, r3
 802533c:	f7fe ffd9 	bl	80242f2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
	    difference_type(__length) - __elemsbefore;
 8025340:	f8d7 22a0 	ldr.w	r2, [r7, #672]	; 0x2a0
	  const difference_type __elemsafter =
 8025344:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 8025348:	1ad3      	subs	r3, r2, r3
 802534a:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
	  __pos = this->_M_impl._M_finish - __elemsafter;
 802534e:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025352:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8025356:	681b      	ldr	r3, [r3, #0]
 8025358:	f103 0118 	add.w	r1, r3, #24
 802535c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025360:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8025364:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8025368:	4618      	mov	r0, r3
 802536a:	f000 fdaf 	bl	8025ecc <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>
 802536e:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025372:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8025376:	681a      	ldr	r2, [r3, #0]
 8025378:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802537c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8025380:	4614      	mov	r4, r2
 8025382:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8025384:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	      if (__elemsafter > difference_type(__n))
 8025388:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 802538c:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8025390:	429a      	cmp	r2, r3
 8025392:	f340 8096 	ble.w	80254c2 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_j+0x4da>
		  iterator __finish_n = (this->_M_impl._M_finish
 8025396:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802539a:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 802539e:	681b      	ldr	r3, [r3, #0]
 80253a0:	f103 0118 	add.w	r1, r3, #24
 80253a4:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 80253a8:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80253ac:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80253b0:	4618      	mov	r0, r3
 80253b2:	f000 fd8b 	bl	8025ecc <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>
		  std::__uninitialized_move_a(__finish_n,
 80253b6:	f107 0218 	add.w	r2, r7, #24
 80253ba:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 80253be:	4611      	mov	r1, r2
 80253c0:	4618      	mov	r0, r3
 80253c2:	f7fe ff96 	bl	80242f2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
					      this->_M_impl._M_finish,
 80253c6:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80253ca:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80253ce:	681b      	ldr	r3, [r3, #0]
 80253d0:	f103 0218 	add.w	r2, r3, #24
		  std::__uninitialized_move_a(__finish_n,
 80253d4:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 80253d8:	4611      	mov	r1, r2
 80253da:	4618      	mov	r0, r3
 80253dc:	f7fe ff89 	bl	80242f2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
					      this->_M_impl._M_finish,
 80253e0:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80253e4:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80253e8:	681b      	ldr	r3, [r3, #0]
 80253ea:	f103 0218 	add.w	r2, r3, #24
		  std::__uninitialized_move_a(__finish_n,
 80253ee:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 80253f2:	4611      	mov	r1, r2
 80253f4:	4618      	mov	r0, r3
 80253f6:	f7fe ff7c 	bl	80242f2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
					      _M_get_Tp_allocator());
 80253fa:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80253fe:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8025402:	681b      	ldr	r3, [r3, #0]
 8025404:	4618      	mov	r0, r3
 8025406:	f7fe fdad 	bl	8023f64 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 802540a:	4604      	mov	r4, r0
		  std::__uninitialized_move_a(__finish_n,
 802540c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025410:	f5a3 7086 	sub.w	r0, r3, #268	; 0x10c
 8025414:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 8025418:	f507 72de 	add.w	r2, r7, #444	; 0x1bc
 802541c:	f507 71d6 	add.w	r1, r7, #428	; 0x1ac
 8025420:	9400      	str	r4, [sp, #0]
 8025422:	f000 fdc5 	bl	8025fb0 <_ZSt22__uninitialized_move_aISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_SaIS2_EET0_T_S8_S7_RT1_>
		  this->_M_impl._M_finish = __new_finish;
 8025426:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802542a:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 802542e:	681b      	ldr	r3, [r3, #0]
 8025430:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8025434:	f5a2 721c 	sub.w	r2, r2, #624	; 0x270
 8025438:	f103 0418 	add.w	r4, r3, #24
 802543c:	4613      	mov	r3, r2
 802543e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8025440:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		  _GLIBCXX_MOVE_BACKWARD3(__pos, __finish_n, __old_finish);
 8025444:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025448:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 802544c:	f507 72f6 	add.w	r2, r7, #492	; 0x1ec
 8025450:	6819      	ldr	r1, [r3, #0]
 8025452:	4610      	mov	r0, r2
 8025454:	f7fe ff4d 	bl	80242f2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8025458:	f107 0218 	add.w	r2, r7, #24
 802545c:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8025460:	4611      	mov	r1, r2
 8025462:	4618      	mov	r0, r3
 8025464:	f7fe ff45 	bl	80242f2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8025468:	f107 0228 	add.w	r2, r7, #40	; 0x28
 802546c:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8025470:	4611      	mov	r1, r2
 8025472:	4618      	mov	r0, r3
 8025474:	f7fe ff3d 	bl	80242f2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8025478:	f507 70ee 	add.w	r0, r7, #476	; 0x1dc
 802547c:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8025480:	f507 72fe 	add.w	r2, r7, #508	; 0x1fc
 8025484:	f507 71f6 	add.w	r1, r7, #492	; 0x1ec
 8025488:	f000 fe54 	bl	8026134 <_ZSt13move_backwardISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_ET0_T_S7_S6_>
		  std::copy(__first, __last, __pos);
 802548c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025490:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8025494:	f507 720b 	add.w	r2, r7, #556	; 0x22c
 8025498:	6819      	ldr	r1, [r3, #0]
 802549a:	4610      	mov	r0, r2
 802549c:	f7fe ff29 	bl	80242f2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80254a0:	f507 7007 	add.w	r0, r7, #540	; 0x21c
 80254a4:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 80254a8:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 80254ac:	f5a2 722a 	sub.w	r2, r2, #680	; 0x2a8
 80254b0:	f507 712a 	add.w	r1, r7, #680	; 0x2a8
 80254b4:	f5a1 7129 	sub.w	r1, r1, #676	; 0x2a4
 80254b8:	6812      	ldr	r2, [r2, #0]
 80254ba:	6809      	ldr	r1, [r1, #0]
 80254bc:	f7ff f894 	bl	80245e8 <_ZSt4copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>
      }
 80254c0:	e080      	b.n	80255c4 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_j+0x5dc>
		  _ForwardIterator __mid = __first;
 80254c2:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80254c6:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 80254ca:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 80254ce:	f5a2 7229 	sub.w	r2, r2, #676	; 0x2a4
 80254d2:	6812      	ldr	r2, [r2, #0]
 80254d4:	601a      	str	r2, [r3, #0]
		  std::advance(__mid, __elemsafter);
 80254d6:	f107 0314 	add.w	r3, r7, #20
 80254da:	f8d7 129c 	ldr.w	r1, [r7, #668]	; 0x29c
 80254de:	4618      	mov	r0, r3
 80254e0:	f000 fdd5 	bl	802608e <_ZSt7advanceIPKN10BHYWrapper8BHYFrameEiEvRT_T0_>
		  std::__uninitialized_copy_move(__mid, __last, __pos,
 80254e4:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80254e8:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 80254ec:	681c      	ldr	r4, [r3, #0]
 80254ee:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80254f2:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 80254f6:	f507 7213 	add.w	r2, r7, #588	; 0x24c
 80254fa:	6819      	ldr	r1, [r3, #0]
 80254fc:	4610      	mov	r0, r2
 80254fe:	f7fe fef8 	bl	80242f2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
						 this->_M_impl._M_finish,
 8025502:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025506:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 802550a:	681b      	ldr	r3, [r3, #0]
 802550c:	f103 0218 	add.w	r2, r3, #24
		  std::__uninitialized_copy_move(__mid, __last, __pos,
 8025510:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 8025514:	4611      	mov	r1, r2
 8025516:	4618      	mov	r0, r3
 8025518:	f7fe feeb 	bl	80242f2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
						 this->_M_impl._M_finish,
 802551c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025520:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8025524:	681b      	ldr	r3, [r3, #0]
 8025526:	f103 0218 	add.w	r2, r3, #24
		  std::__uninitialized_copy_move(__mid, __last, __pos,
 802552a:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 802552e:	4611      	mov	r1, r2
 8025530:	4618      	mov	r0, r3
 8025532:	f7fe fede 	bl	80242f2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
						 _M_get_Tp_allocator());
 8025536:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802553a:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 802553e:	681b      	ldr	r3, [r3, #0]
 8025540:	4618      	mov	r0, r3
 8025542:	f7fe fd0f 	bl	8023f64 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 8025546:	4603      	mov	r3, r0
		  std::__uninitialized_copy_move(__mid, __last, __pos,
 8025548:	f507 700f 	add.w	r0, r7, #572	; 0x23c
 802554c:	f507 7113 	add.w	r1, r7, #588	; 0x24c
 8025550:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8025554:	f5a2 722a 	sub.w	r2, r2, #680	; 0x2a8
 8025558:	9302      	str	r3, [sp, #8]
 802555a:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 802555e:	9301      	str	r3, [sp, #4]
 8025560:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 8025564:	9300      	str	r3, [sp, #0]
 8025566:	460b      	mov	r3, r1
 8025568:	6812      	ldr	r2, [r2, #0]
 802556a:	4621      	mov	r1, r4
 802556c:	f000 fe18 	bl	80261a0 <_ZSt25__uninitialized_copy_moveIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_ES7_SaIS1_EET1_T_SA_T0_SB_S9_RT2_>
		  this->_M_impl._M_finish = __new_finish;
 8025570:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025574:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8025578:	681b      	ldr	r3, [r3, #0]
 802557a:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 802557e:	f5a2 721c 	sub.w	r2, r2, #624	; 0x270
 8025582:	f103 0418 	add.w	r4, r3, #24
 8025586:	4613      	mov	r3, r2
 8025588:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802558a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		  std::copy(__first, __mid, __pos);
 802558e:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025592:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8025596:	681c      	ldr	r4, [r3, #0]
 8025598:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802559c:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 80255a0:	f507 7223 	add.w	r2, r7, #652	; 0x28c
 80255a4:	6819      	ldr	r1, [r3, #0]
 80255a6:	4610      	mov	r0, r2
 80255a8:	f7fe fea3 	bl	80242f2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80255ac:	f507 701f 	add.w	r0, r7, #636	; 0x27c
 80255b0:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 80255b4:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 80255b8:	f5a2 7129 	sub.w	r1, r2, #676	; 0x2a4
 80255bc:	4622      	mov	r2, r4
 80255be:	6809      	ldr	r1, [r1, #0]
 80255c0:	f7ff f812 	bl	80245e8 <_ZSt4copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>
      }
 80255c4:	bf00      	nop
 80255c6:	f507 772a 	add.w	r7, r7, #680	; 0x2a8
 80255ca:	46bd      	mov	sp, r7
 80255cc:	bdb0      	pop	{r4, r5, r7, pc}

080255ce <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 80255ce:	b580      	push	{r7, lr}
 80255d0:	b084      	sub	sp, #16
 80255d2:	af00      	add	r7, sp, #0
 80255d4:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 80255d6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80255da:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 80255dc:	6878      	ldr	r0, [r7, #4]
 80255de:	f000 fe1f 	bl	8026220 <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE8max_sizeERKS2_>
 80255e2:	4603      	mov	r3, r0
 80255e4:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 80255e6:	f107 0208 	add.w	r2, r7, #8
 80255ea:	f107 030c 	add.w	r3, r7, #12
 80255ee:	4611      	mov	r1, r2
 80255f0:	4618      	mov	r0, r3
 80255f2:	f000 fe21 	bl	8026238 <_ZSt3minIjERKT_S2_S2_>
 80255f6:	4603      	mov	r3, r0
 80255f8:	681b      	ldr	r3, [r3, #0]
      }
 80255fa:	4618      	mov	r0, r3
 80255fc:	3710      	adds	r7, #16
 80255fe:	46bd      	mov	sp, r7
 8025600:	bd80      	pop	{r7, pc}

08025602 <_ZNKSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8025602:	b480      	push	{r7}
 8025604:	b083      	sub	sp, #12
 8025606:	af00      	add	r7, sp, #0
 8025608:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 802560a:	687b      	ldr	r3, [r7, #4]
 802560c:	4618      	mov	r0, r3
 802560e:	370c      	adds	r7, #12
 8025610:	46bd      	mov	sp, r7
 8025612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025616:	4770      	bx	lr

08025618 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb>:
	}
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
 8025618:	b590      	push	{r4, r7, lr}
 802561a:	b08b      	sub	sp, #44	; 0x2c
 802561c:	af00      	add	r7, sp, #0
 802561e:	60f8      	str	r0, [r7, #12]
 8025620:	60b9      	str	r1, [r7, #8]
 8025622:	4613      	mov	r3, r2
 8025624:	71fb      	strb	r3, [r7, #7]
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 8025626:	68fb      	ldr	r3, [r7, #12]
 8025628:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 802562a:	68fb      	ldr	r3, [r7, #12]
 802562c:	695b      	ldr	r3, [r3, #20]
 802562e:	1ad3      	subs	r3, r2, r3
 8025630:	109b      	asrs	r3, r3, #2
 8025632:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 8025634:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 8025636:	68bb      	ldr	r3, [r7, #8]
 8025638:	6a3a      	ldr	r2, [r7, #32]
 802563a:	4413      	add	r3, r2
 802563c:	61fb      	str	r3, [r7, #28]

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 802563e:	68fb      	ldr	r3, [r7, #12]
 8025640:	685a      	ldr	r2, [r3, #4]
 8025642:	69fb      	ldr	r3, [r7, #28]
 8025644:	005b      	lsls	r3, r3, #1
 8025646:	429a      	cmp	r2, r3
 8025648:	d92d      	bls.n	80256a6 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb+0x8e>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 802564a:	68fb      	ldr	r3, [r7, #12]
 802564c:	681a      	ldr	r2, [r3, #0]
 802564e:	68fb      	ldr	r3, [r7, #12]
 8025650:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 8025652:	69fb      	ldr	r3, [r7, #28]
 8025654:	1acb      	subs	r3, r1, r3
 8025656:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8025658:	0099      	lsls	r1, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 802565a:	79fb      	ldrb	r3, [r7, #7]
 802565c:	2b00      	cmp	r3, #0
 802565e:	d002      	beq.n	8025666 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb+0x4e>
 8025660:	68bb      	ldr	r3, [r7, #8]
 8025662:	009b      	lsls	r3, r3, #2
 8025664:	e000      	b.n	8025668 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb+0x50>
 8025666:	2300      	movs	r3, #0
 8025668:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 802566a:	4413      	add	r3, r2
 802566c:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 802566e:	68fb      	ldr	r3, [r7, #12]
 8025670:	695b      	ldr	r3, [r3, #20]
 8025672:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8025674:	429a      	cmp	r2, r3
 8025676:	d209      	bcs.n	802568c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 8025678:	68fb      	ldr	r3, [r7, #12]
 802567a:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 802567c:	68fb      	ldr	r3, [r7, #12]
 802567e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 8025680:	3304      	adds	r3, #4
 8025682:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8025684:	4619      	mov	r1, r3
 8025686:	f000 fdeb 	bl	8026260 <_ZSt4copyIPPN10BHYWrapper8BHYFrameES3_ET0_T_S5_S4_>
 802568a:	e048      	b.n	802571e <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb+0x106>
		      __new_nstart);
	  else
	    std::copy_backward(this->_M_impl._M_start._M_node,
 802568c:	68fb      	ldr	r3, [r7, #12]
 802568e:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 8025690:	68fb      	ldr	r3, [r7, #12]
 8025692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8025694:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 8025696:	6a3b      	ldr	r3, [r7, #32]
 8025698:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 802569a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802569c:	4413      	add	r3, r2
 802569e:	461a      	mov	r2, r3
 80256a0:	f000 fdf6 	bl	8026290 <_ZSt13copy_backwardIPPN10BHYWrapper8BHYFrameES3_ET0_T_S5_S4_>
 80256a4:	e03b      	b.n	802571e <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb+0x106>
	}
      else
	{
	  size_type __new_map_size = this->_M_impl._M_map_size
 80256a6:	68fb      	ldr	r3, [r7, #12]
 80256a8:	685c      	ldr	r4, [r3, #4]
				     + std::max(this->_M_impl._M_map_size,
 80256aa:	68fb      	ldr	r3, [r7, #12]
 80256ac:	3304      	adds	r3, #4
 80256ae:	f107 0208 	add.w	r2, r7, #8
 80256b2:	4611      	mov	r1, r2
 80256b4:	4618      	mov	r0, r3
 80256b6:	f7ff fa39 	bl	8024b2c <_ZSt3maxIjERKT_S2_S2_>
 80256ba:	4603      	mov	r3, r0
 80256bc:	681b      	ldr	r3, [r3, #0]
 80256be:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 80256c0:	3302      	adds	r3, #2
 80256c2:	61bb      	str	r3, [r7, #24]
						__nodes_to_add) + 2;

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 80256c4:	68fb      	ldr	r3, [r7, #12]
 80256c6:	69b9      	ldr	r1, [r7, #24]
 80256c8:	4618      	mov	r0, r3
 80256ca:	f7ff fa43 	bl	8024b54 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE15_M_allocate_mapEj>
 80256ce:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 80256d0:	69ba      	ldr	r2, [r7, #24]
 80256d2:	69fb      	ldr	r3, [r7, #28]
 80256d4:	1ad3      	subs	r3, r2, r3
 80256d6:	085b      	lsrs	r3, r3, #1
 80256d8:	009a      	lsls	r2, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 80256da:	79fb      	ldrb	r3, [r7, #7]
 80256dc:	2b00      	cmp	r3, #0
 80256de:	d002      	beq.n	80256e6 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb+0xce>
 80256e0:	68bb      	ldr	r3, [r7, #8]
 80256e2:	009b      	lsls	r3, r3, #2
 80256e4:	e000      	b.n	80256e8 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb+0xd0>
 80256e6:	2300      	movs	r3, #0
 80256e8:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 80256ea:	697a      	ldr	r2, [r7, #20]
 80256ec:	4413      	add	r3, r2
 80256ee:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 80256f0:	68fb      	ldr	r3, [r7, #12]
 80256f2:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 80256f4:	68fb      	ldr	r3, [r7, #12]
 80256f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 80256f8:	3304      	adds	r3, #4
 80256fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80256fc:	4619      	mov	r1, r3
 80256fe:	f000 fdaf 	bl	8026260 <_ZSt4copyIPPN10BHYWrapper8BHYFrameES3_ET0_T_S5_S4_>
		    __new_nstart);
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8025702:	68f8      	ldr	r0, [r7, #12]
 8025704:	68fb      	ldr	r3, [r7, #12]
 8025706:	6819      	ldr	r1, [r3, #0]
 8025708:	68fb      	ldr	r3, [r7, #12]
 802570a:	685b      	ldr	r3, [r3, #4]
 802570c:	461a      	mov	r2, r3
 802570e:	f7fe fdb6 	bl	802427e <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE17_M_deallocate_mapEPPS1_j>

	  this->_M_impl._M_map = __new_map;
 8025712:	68fb      	ldr	r3, [r7, #12]
 8025714:	697a      	ldr	r2, [r7, #20]
 8025716:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 8025718:	68fb      	ldr	r3, [r7, #12]
 802571a:	69ba      	ldr	r2, [r7, #24]
 802571c:	605a      	str	r2, [r3, #4]
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
 802571e:	68fb      	ldr	r3, [r7, #12]
 8025720:	3308      	adds	r3, #8
 8025722:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8025724:	4618      	mov	r0, r3
 8025726:	f7ff f899 	bl	802485c <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 802572a:	68fb      	ldr	r3, [r7, #12]
 802572c:	f103 0018 	add.w	r0, r3, #24
 8025730:	6a3a      	ldr	r2, [r7, #32]
 8025732:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8025736:	4413      	add	r3, r2
 8025738:	009b      	lsls	r3, r3, #2
 802573a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802573c:	4413      	add	r3, r2
 802573e:	4619      	mov	r1, r3
 8025740:	f7ff f88c 	bl	802485c <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E11_M_set_nodeEPS3_>
    }
 8025744:	bf00      	nop
 8025746:	372c      	adds	r7, #44	; 0x2c
 8025748:	46bd      	mov	sp, r7
 802574a:	bd90      	pop	{r4, r7, pc}

0802574c <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 802574c:	b580      	push	{r7, lr}
 802574e:	b082      	sub	sp, #8
 8025750:	af00      	add	r7, sp, #0
 8025752:	6078      	str	r0, [r7, #4]
 8025754:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8025756:	2200      	movs	r2, #0
 8025758:	6839      	ldr	r1, [r7, #0]
 802575a:	6878      	ldr	r0, [r7, #4]
 802575c:	f000 fdb0 	bl	80262c0 <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE8allocateEjPKv>
 8025760:	4603      	mov	r3, r0
 8025762:	4618      	mov	r0, r3
 8025764:	3708      	adds	r7, #8
 8025766:	46bd      	mov	sp, r7
 8025768:	bd80      	pop	{r7, pc}

0802576a <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 802576a:	b580      	push	{r7, lr}
 802576c:	b084      	sub	sp, #16
 802576e:	af00      	add	r7, sp, #0
 8025770:	60f8      	str	r0, [r7, #12]
 8025772:	60b9      	str	r1, [r7, #8]
 8025774:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8025776:	687a      	ldr	r2, [r7, #4]
 8025778:	68b9      	ldr	r1, [r7, #8]
 802577a:	68f8      	ldr	r0, [r7, #12]
 802577c:	f000 fdc1 	bl	8026302 <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE10deallocateEPS2_j>
 8025780:	bf00      	nop
 8025782:	3710      	adds	r7, #16
 8025784:	46bd      	mov	sp, r7
 8025786:	bd80      	pop	{r7, pc}

08025788 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi>:
      operator+=(difference_type __n) _GLIBCXX_NOEXCEPT
 8025788:	b590      	push	{r4, r7, lr}
 802578a:	b085      	sub	sp, #20
 802578c:	af00      	add	r7, sp, #0
 802578e:	6078      	str	r0, [r7, #4]
 8025790:	6039      	str	r1, [r7, #0]
	const difference_type __offset = __n + (_M_cur - _M_first);
 8025792:	687b      	ldr	r3, [r7, #4]
 8025794:	681a      	ldr	r2, [r3, #0]
 8025796:	687b      	ldr	r3, [r7, #4]
 8025798:	685b      	ldr	r3, [r3, #4]
 802579a:	1ad3      	subs	r3, r2, r3
 802579c:	109b      	asrs	r3, r3, #2
 802579e:	4a2b      	ldr	r2, [pc, #172]	; (802584c <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi+0xc4>)
 80257a0:	fb02 f303 	mul.w	r3, r2, r3
 80257a4:	461a      	mov	r2, r3
 80257a6:	683b      	ldr	r3, [r7, #0]
 80257a8:	4413      	add	r3, r2
 80257aa:	60fb      	str	r3, [r7, #12]
	if (__offset >= 0 && __offset < difference_type(_S_buffer_size()))
 80257ac:	68fb      	ldr	r3, [r7, #12]
 80257ae:	2b00      	cmp	r3, #0
 80257b0:	db08      	blt.n	80257c4 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi+0x3c>
 80257b2:	f7ff f882 	bl	80248ba <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 80257b6:	4603      	mov	r3, r0
 80257b8:	461a      	mov	r2, r3
 80257ba:	68fb      	ldr	r3, [r7, #12]
 80257bc:	4293      	cmp	r3, r2
 80257be:	da01      	bge.n	80257c4 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi+0x3c>
 80257c0:	2301      	movs	r3, #1
 80257c2:	e000      	b.n	80257c6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi+0x3e>
 80257c4:	2300      	movs	r3, #0
 80257c6:	2b00      	cmp	r3, #0
 80257c8:	d00a      	beq.n	80257e0 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi+0x58>
	  _M_cur += __n;
 80257ca:	687b      	ldr	r3, [r7, #4]
 80257cc:	6819      	ldr	r1, [r3, #0]
 80257ce:	683a      	ldr	r2, [r7, #0]
 80257d0:	4613      	mov	r3, r2
 80257d2:	009b      	lsls	r3, r3, #2
 80257d4:	4413      	add	r3, r2
 80257d6:	009b      	lsls	r3, r3, #2
 80257d8:	18ca      	adds	r2, r1, r3
 80257da:	687b      	ldr	r3, [r7, #4]
 80257dc:	601a      	str	r2, [r3, #0]
 80257de:	e02f      	b.n	8025840 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi+0xb8>
	      __offset > 0 ? __offset / difference_type(_S_buffer_size())
 80257e0:	68fb      	ldr	r3, [r7, #12]
 80257e2:	2b00      	cmp	r3, #0
 80257e4:	dd07      	ble.n	80257f6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi+0x6e>
 80257e6:	f7ff f868 	bl	80248ba <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 80257ea:	4603      	mov	r3, r0
 80257ec:	461a      	mov	r2, r3
 80257ee:	68fb      	ldr	r3, [r7, #12]
 80257f0:	fb93 f3f2 	sdiv	r3, r3, r2
 80257f4:	e007      	b.n	8025806 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi+0x7e>
			   : -difference_type((-__offset - 1)
 80257f6:	68fb      	ldr	r3, [r7, #12]
 80257f8:	43dc      	mvns	r4, r3
					      / _S_buffer_size()) - 1;
 80257fa:	f7ff f85e 	bl	80248ba <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 80257fe:	4603      	mov	r3, r0
 8025800:	fbb4 f3f3 	udiv	r3, r4, r3
	      __offset > 0 ? __offset / difference_type(_S_buffer_size())
 8025804:	43db      	mvns	r3, r3
	    const difference_type __node_offset =
 8025806:	60bb      	str	r3, [r7, #8]
	    _M_set_node(_M_node + __node_offset);
 8025808:	687b      	ldr	r3, [r7, #4]
 802580a:	68da      	ldr	r2, [r3, #12]
 802580c:	68bb      	ldr	r3, [r7, #8]
 802580e:	009b      	lsls	r3, r3, #2
 8025810:	4413      	add	r3, r2
 8025812:	4619      	mov	r1, r3
 8025814:	6878      	ldr	r0, [r7, #4]
 8025816:	f7ff f821 	bl	802485c <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E11_M_set_nodeEPS3_>
	    _M_cur = _M_first + (__offset - __node_offset
 802581a:	687b      	ldr	r3, [r7, #4]
 802581c:	685c      	ldr	r4, [r3, #4]
				 * difference_type(_S_buffer_size()));
 802581e:	f7ff f84c 	bl	80248ba <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 8025822:	4603      	mov	r3, r0
 8025824:	461a      	mov	r2, r3
 8025826:	68bb      	ldr	r3, [r7, #8]
 8025828:	fb02 f303 	mul.w	r3, r2, r3
	    _M_cur = _M_first + (__offset - __node_offset
 802582c:	68fa      	ldr	r2, [r7, #12]
 802582e:	1ad3      	subs	r3, r2, r3
 8025830:	461a      	mov	r2, r3
 8025832:	4613      	mov	r3, r2
 8025834:	009b      	lsls	r3, r3, #2
 8025836:	4413      	add	r3, r2
 8025838:	009b      	lsls	r3, r3, #2
 802583a:	18e2      	adds	r2, r4, r3
 802583c:	687b      	ldr	r3, [r7, #4]
 802583e:	601a      	str	r2, [r3, #0]
	return *this;
 8025840:	687b      	ldr	r3, [r7, #4]
      }
 8025842:	4618      	mov	r0, r3
 8025844:	3714      	adds	r7, #20
 8025846:	46bd      	mov	sp, r7
 8025848:	bd90      	pop	{r4, r7, pc}
 802584a:	bf00      	nop
 802584c:	cccccccd 	.word	0xcccccccd

08025850 <_ZSt7forwardIRKjEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8025850:	b480      	push	{r7}
 8025852:	b083      	sub	sp, #12
 8025854:	af00      	add	r7, sp, #0
 8025856:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8025858:	687b      	ldr	r3, [r7, #4]
 802585a:	4618      	mov	r0, r3
 802585c:	370c      	adds	r7, #12
 802585e:	46bd      	mov	sp, r7
 8025860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025864:	4770      	bx	lr

08025866 <_ZN9__gnu_cxx13new_allocatorIjE9constructIjJRKjEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8025866:	b590      	push	{r4, r7, lr}
 8025868:	b085      	sub	sp, #20
 802586a:	af00      	add	r7, sp, #0
 802586c:	60f8      	str	r0, [r7, #12]
 802586e:	60b9      	str	r1, [r7, #8]
 8025870:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8025872:	6878      	ldr	r0, [r7, #4]
 8025874:	f7ff ffec 	bl	8025850 <_ZSt7forwardIRKjEOT_RNSt16remove_referenceIS2_E4typeE>
 8025878:	4603      	mov	r3, r0
 802587a:	681c      	ldr	r4, [r3, #0]
 802587c:	68bb      	ldr	r3, [r7, #8]
 802587e:	4619      	mov	r1, r3
 8025880:	2004      	movs	r0, #4
 8025882:	f7fb fb15 	bl	8020eb0 <_ZnwjPv>
 8025886:	4603      	mov	r3, r0
 8025888:	601c      	str	r4, [r3, #0]
 802588a:	bf00      	nop
 802588c:	3714      	adds	r7, #20
 802588e:	46bd      	mov	sp, r7
 8025890:	bd90      	pop	{r4, r7, pc}

08025892 <_ZNKSt5dequeIjSaIjEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8025892:	b580      	push	{r7, lr}
 8025894:	b082      	sub	sp, #8
 8025896:	af00      	add	r7, sp, #0
 8025898:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 802589a:	687b      	ldr	r3, [r7, #4]
 802589c:	f103 0218 	add.w	r2, r3, #24
 80258a0:	687b      	ldr	r3, [r7, #4]
 80258a2:	3308      	adds	r3, #8
 80258a4:	4619      	mov	r1, r3
 80258a6:	4610      	mov	r0, r2
 80258a8:	f000 fd3e 	bl	8026328 <_ZStmiRKSt15_Deque_iteratorIjRjPjES4_>
 80258ac:	4603      	mov	r3, r0
 80258ae:	4618      	mov	r0, r3
 80258b0:	3708      	adds	r7, #8
 80258b2:	46bd      	mov	sp, r7
 80258b4:	bd80      	pop	{r7, pc}

080258b6 <_ZNKSt5dequeIjSaIjEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80258b6:	b580      	push	{r7, lr}
 80258b8:	b082      	sub	sp, #8
 80258ba:	af00      	add	r7, sp, #0
 80258bc:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 80258be:	687b      	ldr	r3, [r7, #4]
 80258c0:	4618      	mov	r0, r3
 80258c2:	f000 fd6f 	bl	80263a4 <_ZNKSt11_Deque_baseIjSaIjEE19_M_get_Tp_allocatorEv>
 80258c6:	4603      	mov	r3, r0
 80258c8:	4618      	mov	r0, r3
 80258ca:	f000 fd51 	bl	8026370 <_ZNSt5dequeIjSaIjEE11_S_max_sizeERKS0_>
 80258ce:	4603      	mov	r3, r0
 80258d0:	4618      	mov	r0, r3
 80258d2:	3708      	adds	r7, #8
 80258d4:	46bd      	mov	sp, r7
 80258d6:	bd80      	pop	{r7, pc}

080258d8 <_ZNSt5dequeIjSaIjEE22_M_reserve_map_at_backEj>:
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 80258d8:	b580      	push	{r7, lr}
 80258da:	b082      	sub	sp, #8
 80258dc:	af00      	add	r7, sp, #0
 80258de:	6078      	str	r0, [r7, #4]
 80258e0:	6039      	str	r1, [r7, #0]
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 80258e2:	683b      	ldr	r3, [r7, #0]
 80258e4:	1c5a      	adds	r2, r3, #1
 80258e6:	687b      	ldr	r3, [r7, #4]
 80258e8:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 80258ea:	6879      	ldr	r1, [r7, #4]
 80258ec:	6a48      	ldr	r0, [r1, #36]	; 0x24
 80258ee:	6879      	ldr	r1, [r7, #4]
 80258f0:	6809      	ldr	r1, [r1, #0]
 80258f2:	1a41      	subs	r1, r0, r1
 80258f4:	1089      	asrs	r1, r1, #2
 80258f6:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 80258f8:	429a      	cmp	r2, r3
 80258fa:	d904      	bls.n	8025906 <_ZNSt5dequeIjSaIjEE22_M_reserve_map_at_backEj+0x2e>
	  _M_reallocate_map(__nodes_to_add, false);
 80258fc:	2200      	movs	r2, #0
 80258fe:	6839      	ldr	r1, [r7, #0]
 8025900:	6878      	ldr	r0, [r7, #4]
 8025902:	f000 fd5a 	bl	80263ba <_ZNSt5dequeIjSaIjEE17_M_reallocate_mapEjb>
      }
 8025906:	bf00      	nop
 8025908:	3708      	adds	r7, #8
 802590a:	46bd      	mov	sp, r7
 802590c:	bd80      	pop	{r7, pc}

0802590e <_ZNSt11_Deque_baseIjSaIjEE16_M_allocate_nodeEv>:
      _M_allocate_node()
 802590e:	b590      	push	{r4, r7, lr}
 8025910:	b083      	sub	sp, #12
 8025912:	af00      	add	r7, sp, #0
 8025914:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 8025916:	687c      	ldr	r4, [r7, #4]
 8025918:	2004      	movs	r0, #4
 802591a:	f7fb fad5 	bl	8020ec8 <_ZSt16__deque_buf_sizej>
 802591e:	4603      	mov	r3, r0
 8025920:	4619      	mov	r1, r3
 8025922:	4620      	mov	r0, r4
 8025924:	f000 fde3 	bl	80264ee <_ZNSt16allocator_traitsISaIjEE8allocateERS0_j>
 8025928:	4603      	mov	r3, r0
      }
 802592a:	4618      	mov	r0, r3
 802592c:	370c      	adds	r7, #12
 802592e:	46bd      	mov	sp, r7
 8025930:	bd90      	pop	{r4, r7, pc}

08025932 <_ZNSt15_Deque_iteratorIjRjPjE11_M_set_nodeEPS1_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 8025932:	b590      	push	{r4, r7, lr}
 8025934:	b083      	sub	sp, #12
 8025936:	af00      	add	r7, sp, #0
 8025938:	6078      	str	r0, [r7, #4]
 802593a:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 802593c:	687b      	ldr	r3, [r7, #4]
 802593e:	683a      	ldr	r2, [r7, #0]
 8025940:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 8025942:	683b      	ldr	r3, [r7, #0]
 8025944:	681a      	ldr	r2, [r3, #0]
 8025946:	687b      	ldr	r3, [r7, #4]
 8025948:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 802594a:	687b      	ldr	r3, [r7, #4]
 802594c:	685c      	ldr	r4, [r3, #4]
 802594e:	f000 fddd 	bl	802650c <_ZNSt15_Deque_iteratorIjRjPjE14_S_buffer_sizeEv>
 8025952:	4603      	mov	r3, r0
 8025954:	009b      	lsls	r3, r3, #2
 8025956:	18e2      	adds	r2, r4, r3
 8025958:	687b      	ldr	r3, [r7, #4]
 802595a:	609a      	str	r2, [r3, #8]
      }
 802595c:	bf00      	nop
 802595e:	370c      	adds	r7, #12
 8025960:	46bd      	mov	sp, r7
 8025962:	bd90      	pop	{r4, r7, pc}

08025964 <_ZNSt11_Deque_baseIjSaIjEE18_M_deallocate_nodeEPj>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 8025964:	b590      	push	{r4, r7, lr}
 8025966:	b083      	sub	sp, #12
 8025968:	af00      	add	r7, sp, #0
 802596a:	6078      	str	r0, [r7, #4]
 802596c:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 802596e:	687c      	ldr	r4, [r7, #4]
 8025970:	2004      	movs	r0, #4
 8025972:	f7fb faa9 	bl	8020ec8 <_ZSt16__deque_buf_sizej>
 8025976:	4603      	mov	r3, r0
 8025978:	461a      	mov	r2, r3
 802597a:	6839      	ldr	r1, [r7, #0]
 802597c:	4620      	mov	r0, r4
 802597e:	f000 fdcd 	bl	802651c <_ZNSt16allocator_traitsISaIjEE10deallocateERS0_Pjj>
      }
 8025982:	bf00      	nop
 8025984:	370c      	adds	r7, #12
 8025986:	46bd      	mov	sp, r7
 8025988:	bd90      	pop	{r4, r7, pc}

0802598a <_ZNSt15_Deque_iteratorIjRKjPS0_EC1IS_IjRjPjEvEERKT_>:
       _Deque_iterator(const _Iter& __x) noexcept
 802598a:	b480      	push	{r7}
 802598c:	b083      	sub	sp, #12
 802598e:	af00      	add	r7, sp, #0
 8025990:	6078      	str	r0, [r7, #4]
 8025992:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8025994:	683b      	ldr	r3, [r7, #0]
 8025996:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8025998:	687b      	ldr	r3, [r7, #4]
 802599a:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 802599c:	683b      	ldr	r3, [r7, #0]
 802599e:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 80259a0:	687b      	ldr	r3, [r7, #4]
 80259a2:	605a      	str	r2, [r3, #4]
 80259a4:	683b      	ldr	r3, [r7, #0]
 80259a6:	689a      	ldr	r2, [r3, #8]
 80259a8:	687b      	ldr	r3, [r7, #4]
 80259aa:	609a      	str	r2, [r3, #8]
 80259ac:	683b      	ldr	r3, [r7, #0]
 80259ae:	68da      	ldr	r2, [r3, #12]
 80259b0:	687b      	ldr	r3, [r7, #4]
 80259b2:	60da      	str	r2, [r3, #12]
 80259b4:	687b      	ldr	r3, [r7, #4]
 80259b6:	4618      	mov	r0, r3
 80259b8:	370c      	adds	r7, #12
 80259ba:	46bd      	mov	sp, r7
 80259bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80259c0:	4770      	bx	lr

080259c2 <_ZN9__gnu_cxx13new_allocatorIjE7destroyIjEEvPT_>:
	destroy(_Up* __p)
 80259c2:	b480      	push	{r7}
 80259c4:	b083      	sub	sp, #12
 80259c6:	af00      	add	r7, sp, #0
 80259c8:	6078      	str	r0, [r7, #4]
 80259ca:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 80259cc:	bf00      	nop
 80259ce:	370c      	adds	r7, #12
 80259d0:	46bd      	mov	sp, r7
 80259d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80259d6:	4770      	bx	lr

080259d8 <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80259d8:	b480      	push	{r7}
 80259da:	b083      	sub	sp, #12
 80259dc:	af00      	add	r7, sp, #0
 80259de:	6078      	str	r0, [r7, #4]
 80259e0:	687b      	ldr	r3, [r7, #4]
 80259e2:	4618      	mov	r0, r3
 80259e4:	370c      	adds	r7, #12
 80259e6:	46bd      	mov	sp, r7
 80259e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80259ec:	4770      	bx	lr

080259ee <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 80259ee:	b480      	push	{r7}
 80259f0:	b083      	sub	sp, #12
 80259f2:	af00      	add	r7, sp, #0
 80259f4:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 80259f6:	687b      	ldr	r3, [r7, #4]
 80259f8:	2200      	movs	r2, #0
 80259fa:	601a      	str	r2, [r3, #0]
 80259fc:	687b      	ldr	r3, [r7, #4]
 80259fe:	2200      	movs	r2, #0
 8025a00:	605a      	str	r2, [r3, #4]
 8025a02:	687b      	ldr	r3, [r7, #4]
 8025a04:	2200      	movs	r2, #0
 8025a06:	609a      	str	r2, [r3, #8]
 8025a08:	687b      	ldr	r3, [r7, #4]
 8025a0a:	2200      	movs	r2, #0
 8025a0c:	60da      	str	r2, [r3, #12]
 8025a0e:	687b      	ldr	r3, [r7, #4]
 8025a10:	4618      	mov	r0, r3
 8025a12:	370c      	adds	r7, #12
 8025a14:	46bd      	mov	sp, r7
 8025a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025a1a:	4770      	bx	lr

08025a1c <_ZNSt16allocator_traitsISaIPN10BHYWrapper8BHYFrameEEE8allocateERS3_j>:
      allocate(allocator_type& __a, size_type __n)
 8025a1c:	b580      	push	{r7, lr}
 8025a1e:	b082      	sub	sp, #8
 8025a20:	af00      	add	r7, sp, #0
 8025a22:	6078      	str	r0, [r7, #4]
 8025a24:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8025a26:	2200      	movs	r2, #0
 8025a28:	6839      	ldr	r1, [r7, #0]
 8025a2a:	6878      	ldr	r0, [r7, #4]
 8025a2c:	f000 fd85 	bl	802653a <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEE8allocateEjPKv>
 8025a30:	4603      	mov	r3, r0
 8025a32:	4618      	mov	r0, r3
 8025a34:	3708      	adds	r7, #8
 8025a36:	46bd      	mov	sp, r7
 8025a38:	bd80      	pop	{r7, pc}

08025a3a <_ZNSaIPN10BHYWrapper8BHYFrameEEC1IS0_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8025a3a:	b580      	push	{r7, lr}
 8025a3c:	b082      	sub	sp, #8
 8025a3e:	af00      	add	r7, sp, #0
 8025a40:	6078      	str	r0, [r7, #4]
 8025a42:	6039      	str	r1, [r7, #0]
 8025a44:	6878      	ldr	r0, [r7, #4]
 8025a46:	f000 fd96 	bl	8026576 <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEEC1Ev>
 8025a4a:	687b      	ldr	r3, [r7, #4]
 8025a4c:	4618      	mov	r0, r3
 8025a4e:	3708      	adds	r7, #8
 8025a50:	46bd      	mov	sp, r7
 8025a52:	bd80      	pop	{r7, pc}

08025a54 <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8025a54:	b480      	push	{r7}
 8025a56:	b083      	sub	sp, #12
 8025a58:	af00      	add	r7, sp, #0
 8025a5a:	6078      	str	r0, [r7, #4]
 8025a5c:	687b      	ldr	r3, [r7, #4]
 8025a5e:	4618      	mov	r0, r3
 8025a60:	370c      	adds	r7, #12
 8025a62:	46bd      	mov	sp, r7
 8025a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025a68:	4770      	bx	lr

08025a6a <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEE10deallocateEPS3_j>:
      deallocate(_Tp* __p, size_type __t)
 8025a6a:	b580      	push	{r7, lr}
 8025a6c:	b084      	sub	sp, #16
 8025a6e:	af00      	add	r7, sp, #0
 8025a70:	60f8      	str	r0, [r7, #12]
 8025a72:	60b9      	str	r1, [r7, #8]
 8025a74:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8025a76:	687b      	ldr	r3, [r7, #4]
 8025a78:	009b      	lsls	r3, r3, #2
 8025a7a:	4619      	mov	r1, r3
 8025a7c:	68b8      	ldr	r0, [r7, #8]
 8025a7e:	f016 f8e9 	bl	803bc54 <_ZdlPvj>
      }
 8025a82:	bf00      	nop
 8025a84:	3710      	adds	r7, #16
 8025a86:	46bd      	mov	sp, r7
 8025a88:	bd80      	pop	{r7, pc}

08025a8a <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 8025a8a:	b580      	push	{r7, lr}
 8025a8c:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 8025a8e:	2014      	movs	r0, #20
 8025a90:	f7fb fa1a 	bl	8020ec8 <_ZSt16__deque_buf_sizej>
 8025a94:	4603      	mov	r3, r0
 8025a96:	4618      	mov	r0, r3
 8025a98:	bd80      	pop	{r7, pc}

08025a9a <_ZNSaIjEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8025a9a:	b580      	push	{r7, lr}
 8025a9c:	b082      	sub	sp, #8
 8025a9e:	af00      	add	r7, sp, #0
 8025aa0:	6078      	str	r0, [r7, #4]
 8025aa2:	6878      	ldr	r0, [r7, #4]
 8025aa4:	f000 fd72 	bl	802658c <_ZN9__gnu_cxx13new_allocatorIjEC1Ev>
 8025aa8:	687b      	ldr	r3, [r7, #4]
 8025aaa:	4618      	mov	r0, r3
 8025aac:	3708      	adds	r7, #8
 8025aae:	46bd      	mov	sp, r7
 8025ab0:	bd80      	pop	{r7, pc}

08025ab2 <_ZNSt11_Deque_baseIjSaIjEE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 8025ab2:	b580      	push	{r7, lr}
 8025ab4:	b082      	sub	sp, #8
 8025ab6:	af00      	add	r7, sp, #0
 8025ab8:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 8025aba:	687b      	ldr	r3, [r7, #4]
 8025abc:	2200      	movs	r2, #0
 8025abe:	601a      	str	r2, [r3, #0]
 8025ac0:	687b      	ldr	r3, [r7, #4]
 8025ac2:	2200      	movs	r2, #0
 8025ac4:	605a      	str	r2, [r3, #4]
 8025ac6:	687b      	ldr	r3, [r7, #4]
 8025ac8:	3308      	adds	r3, #8
 8025aca:	4618      	mov	r0, r3
 8025acc:	f000 fd69 	bl	80265a2 <_ZNSt15_Deque_iteratorIjRjPjEC1Ev>
 8025ad0:	687b      	ldr	r3, [r7, #4]
 8025ad2:	3318      	adds	r3, #24
 8025ad4:	4618      	mov	r0, r3
 8025ad6:	f000 fd64 	bl	80265a2 <_ZNSt15_Deque_iteratorIjRjPjEC1Ev>
	{ }
 8025ada:	687b      	ldr	r3, [r7, #4]
 8025adc:	4618      	mov	r0, r3
 8025ade:	3708      	adds	r7, #8
 8025ae0:	46bd      	mov	sp, r7
 8025ae2:	bd80      	pop	{r7, pc}

08025ae4 <_ZN9__gnu_cxx13new_allocatorIjED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8025ae4:	b480      	push	{r7}
 8025ae6:	b083      	sub	sp, #12
 8025ae8:	af00      	add	r7, sp, #0
 8025aea:	6078      	str	r0, [r7, #4]
 8025aec:	687b      	ldr	r3, [r7, #4]
 8025aee:	4618      	mov	r0, r3
 8025af0:	370c      	adds	r7, #12
 8025af2:	46bd      	mov	sp, r7
 8025af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025af8:	4770      	bx	lr

08025afa <_ZNSt11_Deque_baseIjSaIjEE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 8025afa:	b590      	push	{r4, r7, lr}
 8025afc:	b085      	sub	sp, #20
 8025afe:	af00      	add	r7, sp, #0
 8025b00:	6078      	str	r0, [r7, #4]
 8025b02:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8025b04:	f107 030c 	add.w	r3, r7, #12
 8025b08:	6879      	ldr	r1, [r7, #4]
 8025b0a:	4618      	mov	r0, r3
 8025b0c:	f000 f82c 	bl	8025b68 <_ZNKSt11_Deque_baseIjSaIjEE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8025b10:	f107 030c 	add.w	r3, r7, #12
 8025b14:	6839      	ldr	r1, [r7, #0]
 8025b16:	4618      	mov	r0, r3
 8025b18:	f000 fd5a 	bl	80265d0 <_ZNSt16allocator_traitsISaIPjEE8allocateERS1_j>
 8025b1c:	4604      	mov	r4, r0
 8025b1e:	bf00      	nop
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8025b20:	f107 030c 	add.w	r3, r7, #12
 8025b24:	4618      	mov	r0, r3
 8025b26:	f000 f830 	bl	8025b8a <_ZNSaIPjED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8025b2a:	4623      	mov	r3, r4
      }
 8025b2c:	4618      	mov	r0, r3
 8025b2e:	3714      	adds	r7, #20
 8025b30:	46bd      	mov	sp, r7
 8025b32:	bd90      	pop	{r4, r7, pc}

08025b34 <_ZNSt11_Deque_baseIjSaIjEE15_M_create_nodesEPPjS3_>:
    _Deque_base<_Tp, _Alloc>::
 8025b34:	b580      	push	{r7, lr}
 8025b36:	b086      	sub	sp, #24
 8025b38:	af00      	add	r7, sp, #0
 8025b3a:	60f8      	str	r0, [r7, #12]
 8025b3c:	60b9      	str	r1, [r7, #8]
 8025b3e:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8025b40:	68bb      	ldr	r3, [r7, #8]
 8025b42:	617b      	str	r3, [r7, #20]
 8025b44:	697a      	ldr	r2, [r7, #20]
 8025b46:	687b      	ldr	r3, [r7, #4]
 8025b48:	429a      	cmp	r2, r3
 8025b4a:	d209      	bcs.n	8025b60 <_ZNSt11_Deque_baseIjSaIjEE15_M_create_nodesEPPjS3_+0x2c>
	    *__cur = this->_M_allocate_node();
 8025b4c:	68f8      	ldr	r0, [r7, #12]
 8025b4e:	f7ff fede 	bl	802590e <_ZNSt11_Deque_baseIjSaIjEE16_M_allocate_nodeEv>
 8025b52:	4602      	mov	r2, r0
 8025b54:	697b      	ldr	r3, [r7, #20]
 8025b56:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8025b58:	697b      	ldr	r3, [r7, #20]
 8025b5a:	3304      	adds	r3, #4
 8025b5c:	617b      	str	r3, [r7, #20]
 8025b5e:	e7f1      	b.n	8025b44 <_ZNSt11_Deque_baseIjSaIjEE15_M_create_nodesEPPjS3_+0x10>
    }
 8025b60:	bf00      	nop
 8025b62:	3718      	adds	r7, #24
 8025b64:	46bd      	mov	sp, r7
 8025b66:	bd80      	pop	{r7, pc}

08025b68 <_ZNKSt11_Deque_baseIjSaIjEE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 8025b68:	b580      	push	{r7, lr}
 8025b6a:	b082      	sub	sp, #8
 8025b6c:	af00      	add	r7, sp, #0
 8025b6e:	6078      	str	r0, [r7, #4]
 8025b70:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 8025b72:	6838      	ldr	r0, [r7, #0]
 8025b74:	f000 fc16 	bl	80263a4 <_ZNKSt11_Deque_baseIjSaIjEE19_M_get_Tp_allocatorEv>
 8025b78:	4603      	mov	r3, r0
 8025b7a:	4619      	mov	r1, r3
 8025b7c:	6878      	ldr	r0, [r7, #4]
 8025b7e:	f000 fd36 	bl	80265ee <_ZNSaIPjEC1IjEERKSaIT_E>
 8025b82:	6878      	ldr	r0, [r7, #4]
 8025b84:	3708      	adds	r7, #8
 8025b86:	46bd      	mov	sp, r7
 8025b88:	bd80      	pop	{r7, pc}

08025b8a <_ZNSaIPjED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8025b8a:	b580      	push	{r7, lr}
 8025b8c:	b082      	sub	sp, #8
 8025b8e:	af00      	add	r7, sp, #0
 8025b90:	6078      	str	r0, [r7, #4]
 8025b92:	6878      	ldr	r0, [r7, #4]
 8025b94:	f000 fd38 	bl	8026608 <_ZN9__gnu_cxx13new_allocatorIPjED1Ev>
 8025b98:	687b      	ldr	r3, [r7, #4]
 8025b9a:	4618      	mov	r0, r3
 8025b9c:	3708      	adds	r7, #8
 8025b9e:	46bd      	mov	sp, r7
 8025ba0:	bd80      	pop	{r7, pc}

08025ba2 <_ZNSt16allocator_traitsISaIPjEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8025ba2:	b580      	push	{r7, lr}
 8025ba4:	b084      	sub	sp, #16
 8025ba6:	af00      	add	r7, sp, #0
 8025ba8:	60f8      	str	r0, [r7, #12]
 8025baa:	60b9      	str	r1, [r7, #8]
 8025bac:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8025bae:	687a      	ldr	r2, [r7, #4]
 8025bb0:	68b9      	ldr	r1, [r7, #8]
 8025bb2:	68f8      	ldr	r0, [r7, #12]
 8025bb4:	f000 fd33 	bl	802661e <_ZN9__gnu_cxx13new_allocatorIPjE10deallocateEPS1_j>
 8025bb8:	bf00      	nop
 8025bba:	3710      	adds	r7, #16
 8025bbc:	46bd      	mov	sp, r7
 8025bbe:	bd80      	pop	{r7, pc}

08025bc0 <_ZSt4swapINSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS2_EE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISA_ESt18is_move_assignableISA_EEE5valueEvE4typeERSA_SK_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 8025bc0:	b5b0      	push	{r4, r5, r7, lr}
 8025bc2:	b08c      	sub	sp, #48	; 0x30
 8025bc4:	af00      	add	r7, sp, #0
 8025bc6:	6078      	str	r0, [r7, #4]
 8025bc8:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8025bca:	6878      	ldr	r0, [r7, #4]
 8025bcc:	f000 fd37 	bl	802663e <_ZSt4moveIRNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS2_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS8_>
 8025bd0:	4602      	mov	r2, r0
 8025bd2:	f107 0308 	add.w	r3, r7, #8
 8025bd6:	4611      	mov	r1, r2
 8025bd8:	4618      	mov	r0, r3
 8025bda:	f000 fd5f 	bl	802669c <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_dataC1EOS4_>
      __a = _GLIBCXX_MOVE(__b);
 8025bde:	6838      	ldr	r0, [r7, #0]
 8025be0:	f000 fd2d 	bl	802663e <_ZSt4moveIRNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS2_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS8_>
 8025be4:	4602      	mov	r2, r0
 8025be6:	687b      	ldr	r3, [r7, #4]
 8025be8:	461c      	mov	r4, r3
 8025bea:	4615      	mov	r5, r2
 8025bec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8025bee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8025bf0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8025bf2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8025bf4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8025bf8:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8025bfc:	f107 0308 	add.w	r3, r7, #8
 8025c00:	4618      	mov	r0, r3
 8025c02:	f000 fd1c 	bl	802663e <_ZSt4moveIRNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS2_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS8_>
 8025c06:	4602      	mov	r2, r0
 8025c08:	683b      	ldr	r3, [r7, #0]
 8025c0a:	461c      	mov	r4, r3
 8025c0c:	4615      	mov	r5, r2
 8025c0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8025c10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8025c12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8025c14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8025c16:	e895 0003 	ldmia.w	r5, {r0, r1}
 8025c1a:	e884 0003 	stmia.w	r4, {r0, r1}
    }
 8025c1e:	bf00      	nop
 8025c20:	3730      	adds	r7, #48	; 0x30
 8025c22:	46bd      	mov	sp, r7
 8025c24:	bdb0      	pop	{r4, r5, r7, pc}

08025c26 <_ZSt18__do_alloc_on_moveISaIN10BHYWrapper8BHYFrameEEEvRT_S4_St17integral_constantIbLb1EE>:
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 8025c26:	b580      	push	{r7, lr}
 8025c28:	b084      	sub	sp, #16
 8025c2a:	af00      	add	r7, sp, #0
 8025c2c:	60f8      	str	r0, [r7, #12]
 8025c2e:	60b9      	str	r1, [r7, #8]
 8025c30:	713a      	strb	r2, [r7, #4]
    { __one = std::move(__two); }
 8025c32:	68b8      	ldr	r0, [r7, #8]
 8025c34:	f000 fd51 	bl	80266da <_ZSt4moveIRSaIN10BHYWrapper8BHYFrameEEEONSt16remove_referenceIT_E4typeEOS5_>
 8025c38:	bf00      	nop
 8025c3a:	3710      	adds	r7, #16
 8025c3c:	46bd      	mov	sp, r7
 8025c3e:	bd80      	pop	{r7, pc}

08025c40 <_ZSt4swapINSt11_Deque_baseIjSaIjEE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS8_ESt18is_move_assignableIS8_EEE5valueEvE4typeERS8_SI_>:
    swap(_Tp& __a, _Tp& __b)
 8025c40:	b5b0      	push	{r4, r5, r7, lr}
 8025c42:	b08c      	sub	sp, #48	; 0x30
 8025c44:	af00      	add	r7, sp, #0
 8025c46:	6078      	str	r0, [r7, #4]
 8025c48:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8025c4a:	6878      	ldr	r0, [r7, #4]
 8025c4c:	f000 fd50 	bl	80266f0 <_ZSt4moveIRNSt11_Deque_baseIjSaIjEE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS6_>
 8025c50:	4602      	mov	r2, r0
 8025c52:	f107 0308 	add.w	r3, r7, #8
 8025c56:	4611      	mov	r1, r2
 8025c58:	4618      	mov	r0, r3
 8025c5a:	f000 fd78 	bl	802674e <_ZNSt11_Deque_baseIjSaIjEE16_Deque_impl_dataC1EOS2_>
      __a = _GLIBCXX_MOVE(__b);
 8025c5e:	6838      	ldr	r0, [r7, #0]
 8025c60:	f000 fd46 	bl	80266f0 <_ZSt4moveIRNSt11_Deque_baseIjSaIjEE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS6_>
 8025c64:	4602      	mov	r2, r0
 8025c66:	687b      	ldr	r3, [r7, #4]
 8025c68:	461c      	mov	r4, r3
 8025c6a:	4615      	mov	r5, r2
 8025c6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8025c6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8025c70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8025c72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8025c74:	e895 0003 	ldmia.w	r5, {r0, r1}
 8025c78:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8025c7c:	f107 0308 	add.w	r3, r7, #8
 8025c80:	4618      	mov	r0, r3
 8025c82:	f000 fd35 	bl	80266f0 <_ZSt4moveIRNSt11_Deque_baseIjSaIjEE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS6_>
 8025c86:	4602      	mov	r2, r0
 8025c88:	683b      	ldr	r3, [r7, #0]
 8025c8a:	461c      	mov	r4, r3
 8025c8c:	4615      	mov	r5, r2
 8025c8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8025c90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8025c92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8025c94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8025c96:	e895 0003 	ldmia.w	r5, {r0, r1}
 8025c9a:	e884 0003 	stmia.w	r4, {r0, r1}
    }
 8025c9e:	bf00      	nop
 8025ca0:	3730      	adds	r7, #48	; 0x30
 8025ca2:	46bd      	mov	sp, r7
 8025ca4:	bdb0      	pop	{r4, r5, r7, pc}

08025ca6 <_ZNSt5dequeIjSaIjEE15_M_erase_at_endESt15_Deque_iteratorIjRjPjE>:
      _M_erase_at_end(iterator __pos)
 8025ca6:	b590      	push	{r4, r7, lr}
 8025ca8:	b08b      	sub	sp, #44	; 0x2c
 8025caa:	af00      	add	r7, sp, #0
 8025cac:	6078      	str	r0, [r7, #4]
 8025cae:	6039      	str	r1, [r7, #0]
	_M_destroy_data(__pos, end(), _M_get_Tp_allocator());
 8025cb0:	f107 0308 	add.w	r3, r7, #8
 8025cb4:	6839      	ldr	r1, [r7, #0]
 8025cb6:	4618      	mov	r0, r3
 8025cb8:	f7fe fbac 	bl	8024414 <_ZNSt15_Deque_iteratorIjRjPjEC1ERKS2_>
 8025cbc:	f107 0318 	add.w	r3, r7, #24
 8025cc0:	6879      	ldr	r1, [r7, #4]
 8025cc2:	4618      	mov	r0, r3
 8025cc4:	f7fe fb8c 	bl	80243e0 <_ZNSt5dequeIjSaIjEE3endEv>
 8025cc8:	687b      	ldr	r3, [r7, #4]
 8025cca:	4618      	mov	r0, r3
 8025ccc:	f7fe fb97 	bl	80243fe <_ZNSt11_Deque_baseIjSaIjEE19_M_get_Tp_allocatorEv>
 8025cd0:	4603      	mov	r3, r0
 8025cd2:	f107 0218 	add.w	r2, r7, #24
 8025cd6:	f107 0108 	add.w	r1, r7, #8
 8025cda:	6878      	ldr	r0, [r7, #4]
 8025cdc:	f7fe fbb6 	bl	802444c <_ZNSt5dequeIjSaIjEE15_M_destroy_dataESt15_Deque_iteratorIjRjPjES5_RKS0_>
	_M_destroy_nodes(__pos._M_node + 1,
 8025ce0:	6878      	ldr	r0, [r7, #4]
 8025ce2:	683b      	ldr	r3, [r7, #0]
 8025ce4:	68db      	ldr	r3, [r3, #12]
 8025ce6:	1d19      	adds	r1, r3, #4
			 this->_M_impl._M_finish._M_node + 1);
 8025ce8:	687b      	ldr	r3, [r7, #4]
 8025cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	_M_destroy_nodes(__pos._M_node + 1,
 8025cec:	3304      	adds	r3, #4
 8025cee:	461a      	mov	r2, r3
 8025cf0:	f7ff f812 	bl	8024d18 <_ZNSt11_Deque_baseIjSaIjEE16_M_destroy_nodesEPPjS3_>
	this->_M_impl._M_finish = __pos;
 8025cf4:	687b      	ldr	r3, [r7, #4]
 8025cf6:	683a      	ldr	r2, [r7, #0]
 8025cf8:	f103 0418 	add.w	r4, r3, #24
 8025cfc:	4613      	mov	r3, r2
 8025cfe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8025d00:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      }
 8025d04:	bf00      	nop
 8025d06:	372c      	adds	r7, #44	; 0x2c
 8025d08:	46bd      	mov	sp, r7
 8025d0a:	bd90      	pop	{r4, r7, pc}

08025d0c <_ZSt18__do_alloc_on_moveISaIjEEvRT_S2_St17integral_constantIbLb1EE>:
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 8025d0c:	b580      	push	{r7, lr}
 8025d0e:	b084      	sub	sp, #16
 8025d10:	af00      	add	r7, sp, #0
 8025d12:	60f8      	str	r0, [r7, #12]
 8025d14:	60b9      	str	r1, [r7, #8]
 8025d16:	713a      	strb	r2, [r7, #4]
    { __one = std::move(__two); }
 8025d18:	68b8      	ldr	r0, [r7, #8]
 8025d1a:	f000 fd37 	bl	802678c <_ZSt4moveIRSaIjEEONSt16remove_referenceIT_E4typeEOS3_>
 8025d1e:	bf00      	nop
 8025d20:	3710      	adds	r7, #16
 8025d22:	46bd      	mov	sp, r7
 8025d24:	bd80      	pop	{r7, pc}

08025d26 <_ZSt12__niter_baseIPKN10BHYWrapper8BHYFrameEET_S4_>:
    __niter_base(_Iterator __it)
 8025d26:	b480      	push	{r7}
 8025d28:	b083      	sub	sp, #12
 8025d2a:	af00      	add	r7, sp, #0
 8025d2c:	6078      	str	r0, [r7, #4]
    { return __it; }
 8025d2e:	687b      	ldr	r3, [r7, #4]
 8025d30:	4618      	mov	r0, r3
 8025d32:	370c      	adds	r7, #12
 8025d34:	46bd      	mov	sp, r7
 8025d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025d3a:	4770      	bx	lr

08025d3c <_ZSt12__niter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>:
    __niter_base(_Iterator __it)
 8025d3c:	b580      	push	{r7, lr}
 8025d3e:	b082      	sub	sp, #8
 8025d40:	af00      	add	r7, sp, #0
 8025d42:	6078      	str	r0, [r7, #4]
 8025d44:	6039      	str	r1, [r7, #0]
    { return __it; }
 8025d46:	6839      	ldr	r1, [r7, #0]
 8025d48:	6878      	ldr	r0, [r7, #4]
 8025d4a:	f7fe fad2 	bl	80242f2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8025d4e:	6878      	ldr	r0, [r7, #4]
 8025d50:	3708      	adds	r7, #8
 8025d52:	46bd      	mov	sp, r7
 8025d54:	bd80      	pop	{r7, pc}

08025d56 <_ZSt3minIiERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8025d56:	b480      	push	{r7}
 8025d58:	b083      	sub	sp, #12
 8025d5a:	af00      	add	r7, sp, #0
 8025d5c:	6078      	str	r0, [r7, #4]
 8025d5e:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8025d60:	683b      	ldr	r3, [r7, #0]
 8025d62:	681a      	ldr	r2, [r3, #0]
 8025d64:	687b      	ldr	r3, [r7, #4]
 8025d66:	681b      	ldr	r3, [r3, #0]
 8025d68:	429a      	cmp	r2, r3
 8025d6a:	da01      	bge.n	8025d70 <_ZSt3minIiERKT_S2_S2_+0x1a>
	return __b;
 8025d6c:	683b      	ldr	r3, [r7, #0]
 8025d6e:	e000      	b.n	8025d72 <_ZSt3minIiERKT_S2_S2_+0x1c>
      return __a;
 8025d70:	687b      	ldr	r3, [r7, #4]
    }
 8025d72:	4618      	mov	r0, r3
 8025d74:	370c      	adds	r7, #12
 8025d76:	46bd      	mov	sp, r7
 8025d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025d7c:	4770      	bx	lr
	...

08025d80 <_ZSt14__copy_move_a1ILb0EPKN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS7_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSD_PSD_EE6__typeES7_S7_SG_>:

  template<bool _IsMove, typename _II, typename _Tp>
    typename __gnu_cxx::__enable_if<
      __is_random_access_iter<_II>::__value,
      _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> >::__type
    __copy_move_a1(_II __first, _II __last,
 8025d80:	b580      	push	{r7, lr}
 8025d82:	b088      	sub	sp, #32
 8025d84:	af00      	add	r7, sp, #0
 8025d86:	60f8      	str	r0, [r7, #12]
 8025d88:	60b9      	str	r1, [r7, #8]
 8025d8a:	607a      	str	r2, [r7, #4]
 8025d8c:	603b      	str	r3, [r7, #0]
		   _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> __result)
    {
      typedef _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> _Iter;
      typedef typename _Iter::difference_type difference_type;

      difference_type __len = __last - __first;
 8025d8e:	687a      	ldr	r2, [r7, #4]
 8025d90:	68bb      	ldr	r3, [r7, #8]
 8025d92:	1ad3      	subs	r3, r2, r3
 8025d94:	109b      	asrs	r3, r3, #2
 8025d96:	4a22      	ldr	r2, [pc, #136]	; (8025e20 <_ZSt14__copy_move_a1ILb0EPKN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS7_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSD_PSD_EE6__typeES7_S7_SG_+0xa0>)
 8025d98:	fb02 f303 	mul.w	r3, r2, r3
 8025d9c:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 8025d9e:	697b      	ldr	r3, [r7, #20]
 8025da0:	2b00      	cmp	r3, #0
 8025da2:	dd34      	ble.n	8025e0e <_ZSt14__copy_move_a1ILb0EPKN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS7_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSD_PSD_EE6__typeES7_S7_SG_+0x8e>
	{
	  const difference_type __clen
	    = std::min(__len, __result._M_last - __result._M_cur);
 8025da4:	683b      	ldr	r3, [r7, #0]
 8025da6:	689a      	ldr	r2, [r3, #8]
 8025da8:	683b      	ldr	r3, [r7, #0]
 8025daa:	681b      	ldr	r3, [r3, #0]
 8025dac:	1ad3      	subs	r3, r2, r3
 8025dae:	109b      	asrs	r3, r3, #2
 8025db0:	4a1b      	ldr	r2, [pc, #108]	; (8025e20 <_ZSt14__copy_move_a1ILb0EPKN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS7_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSD_PSD_EE6__typeES7_S7_SG_+0xa0>)
 8025db2:	fb02 f303 	mul.w	r3, r2, r3
 8025db6:	61bb      	str	r3, [r7, #24]
 8025db8:	f107 0218 	add.w	r2, r7, #24
 8025dbc:	f107 0314 	add.w	r3, r7, #20
 8025dc0:	4611      	mov	r1, r2
 8025dc2:	4618      	mov	r0, r3
 8025dc4:	f7ff ffc7 	bl	8025d56 <_ZSt3minIiERKT_S2_S2_>
 8025dc8:	4603      	mov	r3, r0
	  const difference_type __clen
 8025dca:	681b      	ldr	r3, [r3, #0]
 8025dcc:	61fb      	str	r3, [r7, #28]
	  std::__copy_move_a1<_IsMove>(__first, __first + __clen,
 8025dce:	69fa      	ldr	r2, [r7, #28]
 8025dd0:	4613      	mov	r3, r2
 8025dd2:	009b      	lsls	r3, r3, #2
 8025dd4:	4413      	add	r3, r2
 8025dd6:	009b      	lsls	r3, r3, #2
 8025dd8:	461a      	mov	r2, r3
 8025dda:	68bb      	ldr	r3, [r7, #8]
 8025ddc:	1899      	adds	r1, r3, r2
 8025dde:	683b      	ldr	r3, [r7, #0]
 8025de0:	681b      	ldr	r3, [r3, #0]
 8025de2:	461a      	mov	r2, r3
 8025de4:	68b8      	ldr	r0, [r7, #8]
 8025de6:	f000 fcdc 	bl	80267a2 <_ZSt14__copy_move_a1ILb0EPKN10BHYWrapper8BHYFrameEPS1_ET1_T0_S6_S5_>
				       __result._M_cur);

	  __first += __clen;
 8025dea:	69fa      	ldr	r2, [r7, #28]
 8025dec:	4613      	mov	r3, r2
 8025dee:	009b      	lsls	r3, r3, #2
 8025df0:	4413      	add	r3, r2
 8025df2:	009b      	lsls	r3, r3, #2
 8025df4:	461a      	mov	r2, r3
 8025df6:	68bb      	ldr	r3, [r7, #8]
 8025df8:	4413      	add	r3, r2
 8025dfa:	60bb      	str	r3, [r7, #8]
	  __result += __clen;
 8025dfc:	69f9      	ldr	r1, [r7, #28]
 8025dfe:	6838      	ldr	r0, [r7, #0]
 8025e00:	f7ff fcc2 	bl	8025788 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi>
	  __len -= __clen;
 8025e04:	697a      	ldr	r2, [r7, #20]
 8025e06:	69fb      	ldr	r3, [r7, #28]
 8025e08:	1ad3      	subs	r3, r2, r3
 8025e0a:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 8025e0c:	e7c7      	b.n	8025d9e <_ZSt14__copy_move_a1ILb0EPKN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS7_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSD_PSD_EE6__typeES7_S7_SG_+0x1e>
	}

      return __result;
 8025e0e:	6839      	ldr	r1, [r7, #0]
 8025e10:	68f8      	ldr	r0, [r7, #12]
 8025e12:	f7fe fa6e 	bl	80242f2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
    }
 8025e16:	68f8      	ldr	r0, [r7, #12]
 8025e18:	3720      	adds	r7, #32
 8025e1a:	46bd      	mov	sp, r7
 8025e1c:	bd80      	pop	{r7, pc}
 8025e1e:	bf00      	nop
 8025e20:	cccccccd 	.word	0xcccccccd

08025e24 <_ZSt12__niter_wrapISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_RKS6_S6_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8025e24:	b580      	push	{r7, lr}
 8025e26:	b084      	sub	sp, #16
 8025e28:	af00      	add	r7, sp, #0
 8025e2a:	60f8      	str	r0, [r7, #12]
 8025e2c:	60b9      	str	r1, [r7, #8]
 8025e2e:	607a      	str	r2, [r7, #4]
    { return __res; }
 8025e30:	6879      	ldr	r1, [r7, #4]
 8025e32:	68f8      	ldr	r0, [r7, #12]
 8025e34:	f7fe fa5d 	bl	80242f2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8025e38:	68f8      	ldr	r0, [r7, #12]
 8025e3a:	3710      	adds	r7, #16
 8025e3c:	46bd      	mov	sp, r7
 8025e3e:	bd80      	pop	{r7, pc}

08025e40 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE24_M_new_elements_at_frontEj>:
    deque<_Tp, _Alloc>::
 8025e40:	b590      	push	{r4, r7, lr}
 8025e42:	b085      	sub	sp, #20
 8025e44:	af00      	add	r7, sp, #0
 8025e46:	6078      	str	r0, [r7, #4]
 8025e48:	6039      	str	r1, [r7, #0]
      if (this->max_size() - this->size() < __new_elems)
 8025e4a:	6878      	ldr	r0, [r7, #4]
 8025e4c:	f7fe fccb 	bl	80247e6 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE8max_sizeEv>
 8025e50:	4604      	mov	r4, r0
 8025e52:	6878      	ldr	r0, [r7, #4]
 8025e54:	f7fd fd97 	bl	8023986 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8025e58:	4603      	mov	r3, r0
 8025e5a:	1ae3      	subs	r3, r4, r3
 8025e5c:	683a      	ldr	r2, [r7, #0]
 8025e5e:	429a      	cmp	r2, r3
 8025e60:	bf8c      	ite	hi
 8025e62:	2301      	movhi	r3, #1
 8025e64:	2300      	movls	r3, #0
 8025e66:	b2db      	uxtb	r3, r3
 8025e68:	2b00      	cmp	r3, #0
 8025e6a:	d002      	beq.n	8025e72 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE24_M_new_elements_at_frontEj+0x32>
	__throw_length_error(__N("deque::_M_new_elements_at_front"));
 8025e6c:	4816      	ldr	r0, [pc, #88]	; (8025ec8 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE24_M_new_elements_at_frontEj+0x88>)
 8025e6e:	f015 ff07 	bl	803bc80 <_ZSt20__throw_length_errorPKc>
      const size_type __new_nodes = ((__new_elems + _S_buffer_size() - 1)
 8025e72:	f7ff fe0a 	bl	8025a8a <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE14_S_buffer_sizeEv>
 8025e76:	4602      	mov	r2, r0
 8025e78:	683b      	ldr	r3, [r7, #0]
 8025e7a:	4413      	add	r3, r2
 8025e7c:	1e5c      	subs	r4, r3, #1
				     / _S_buffer_size());
 8025e7e:	f7ff fe04 	bl	8025a8a <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE14_S_buffer_sizeEv>
 8025e82:	4603      	mov	r3, r0
      const size_type __new_nodes = ((__new_elems + _S_buffer_size() - 1)
 8025e84:	fbb4 f3f3 	udiv	r3, r4, r3
 8025e88:	60bb      	str	r3, [r7, #8]
      _M_reserve_map_at_front(__new_nodes);
 8025e8a:	68b9      	ldr	r1, [r7, #8]
 8025e8c:	6878      	ldr	r0, [r7, #4]
 8025e8e:	f7fe fcbb 	bl	8024808 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_reserve_map_at_frontEj>
	  for (__i = 1; __i <= __new_nodes; ++__i)
 8025e92:	2301      	movs	r3, #1
 8025e94:	60fb      	str	r3, [r7, #12]
 8025e96:	68fa      	ldr	r2, [r7, #12]
 8025e98:	68bb      	ldr	r3, [r7, #8]
 8025e9a:	429a      	cmp	r2, r3
 8025e9c:	d80f      	bhi.n	8025ebe <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE24_M_new_elements_at_frontEj+0x7e>
	    *(this->_M_impl._M_start._M_node - __i) = this->_M_allocate_node();
 8025e9e:	6879      	ldr	r1, [r7, #4]
 8025ea0:	687b      	ldr	r3, [r7, #4]
 8025ea2:	695a      	ldr	r2, [r3, #20]
 8025ea4:	68fb      	ldr	r3, [r7, #12]
 8025ea6:	009b      	lsls	r3, r3, #2
 8025ea8:	425b      	negs	r3, r3
 8025eaa:	18d4      	adds	r4, r2, r3
 8025eac:	4608      	mov	r0, r1
 8025eae:	f7fe fcc3 	bl	8024838 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_allocate_nodeEv>
 8025eb2:	4603      	mov	r3, r0
 8025eb4:	6023      	str	r3, [r4, #0]
	  for (__i = 1; __i <= __new_nodes; ++__i)
 8025eb6:	68fb      	ldr	r3, [r7, #12]
 8025eb8:	3301      	adds	r3, #1
 8025eba:	60fb      	str	r3, [r7, #12]
 8025ebc:	e7eb      	b.n	8025e96 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE24_M_new_elements_at_frontEj+0x56>
    }
 8025ebe:	bf00      	nop
 8025ec0:	3714      	adds	r7, #20
 8025ec2:	46bd      	mov	sp, r7
 8025ec4:	bd90      	pop	{r4, r7, pc}
 8025ec6:	bf00      	nop
 8025ec8:	0803dd48 	.word	0x0803dd48

08025ecc <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>:
      operator-(const _Self& __x, difference_type __n) _GLIBCXX_NOEXCEPT
 8025ecc:	b580      	push	{r7, lr}
 8025ece:	b084      	sub	sp, #16
 8025ed0:	af00      	add	r7, sp, #0
 8025ed2:	60f8      	str	r0, [r7, #12]
 8025ed4:	60b9      	str	r1, [r7, #8]
 8025ed6:	607a      	str	r2, [r7, #4]
	_Self __tmp = __x;
 8025ed8:	68b9      	ldr	r1, [r7, #8]
 8025eda:	68f8      	ldr	r0, [r7, #12]
 8025edc:	f7fe fa09 	bl	80242f2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
	__tmp -= __n;
 8025ee0:	6879      	ldr	r1, [r7, #4]
 8025ee2:	68f8      	ldr	r0, [r7, #12]
 8025ee4:	f000 fc6d 	bl	80267c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EmIEi>
	return __tmp;
 8025ee8:	bf00      	nop
      }
 8025eea:	68f8      	ldr	r0, [r7, #12]
 8025eec:	3710      	adds	r7, #16
 8025eee:	46bd      	mov	sp, r7
 8025ef0:	bd80      	pop	{r7, pc}

08025ef2 <_ZSt18uninitialized_copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8025ef2:	b580      	push	{r7, lr}
 8025ef4:	b08a      	sub	sp, #40	; 0x28
 8025ef6:	af00      	add	r7, sp, #0
 8025ef8:	60f8      	str	r0, [r7, #12]
 8025efa:	60b9      	str	r1, [r7, #8]
 8025efc:	607a      	str	r2, [r7, #4]
 8025efe:	603b      	str	r3, [r7, #0]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8025f00:	2301      	movs	r3, #1
 8025f02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	__uninit_copy(__first, __last, __result);
 8025f06:	f107 0314 	add.w	r3, r7, #20
 8025f0a:	6839      	ldr	r1, [r7, #0]
 8025f0c:	4618      	mov	r0, r3
 8025f0e:	f7fe f9f0 	bl	80242f2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8025f12:	68f8      	ldr	r0, [r7, #12]
 8025f14:	f107 0314 	add.w	r3, r7, #20
 8025f18:	687a      	ldr	r2, [r7, #4]
 8025f1a:	68b9      	ldr	r1, [r7, #8]
 8025f1c:	f000 fc61 	bl	80267e2 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS3_RS3_PS3_EEET0_T_SB_SA_>
    }
 8025f20:	68f8      	ldr	r0, [r7, #12]
 8025f22:	3728      	adds	r7, #40	; 0x28
 8025f24:	46bd      	mov	sp, r7
 8025f26:	bd80      	pop	{r7, pc}

08025f28 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_new_elements_at_backEj>:
    deque<_Tp, _Alloc>::
 8025f28:	b590      	push	{r4, r7, lr}
 8025f2a:	b085      	sub	sp, #20
 8025f2c:	af00      	add	r7, sp, #0
 8025f2e:	6078      	str	r0, [r7, #4]
 8025f30:	6039      	str	r1, [r7, #0]
      if (this->max_size() - this->size() < __new_elems)
 8025f32:	6878      	ldr	r0, [r7, #4]
 8025f34:	f7fe fc57 	bl	80247e6 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE8max_sizeEv>
 8025f38:	4604      	mov	r4, r0
 8025f3a:	6878      	ldr	r0, [r7, #4]
 8025f3c:	f7fd fd23 	bl	8023986 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8025f40:	4603      	mov	r3, r0
 8025f42:	1ae3      	subs	r3, r4, r3
 8025f44:	683a      	ldr	r2, [r7, #0]
 8025f46:	429a      	cmp	r2, r3
 8025f48:	bf8c      	ite	hi
 8025f4a:	2301      	movhi	r3, #1
 8025f4c:	2300      	movls	r3, #0
 8025f4e:	b2db      	uxtb	r3, r3
 8025f50:	2b00      	cmp	r3, #0
 8025f52:	d002      	beq.n	8025f5a <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_new_elements_at_backEj+0x32>
	__throw_length_error(__N("deque::_M_new_elements_at_back"));
 8025f54:	4815      	ldr	r0, [pc, #84]	; (8025fac <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_new_elements_at_backEj+0x84>)
 8025f56:	f015 fe93 	bl	803bc80 <_ZSt20__throw_length_errorPKc>
      const size_type __new_nodes = ((__new_elems + _S_buffer_size() - 1)
 8025f5a:	f7ff fd96 	bl	8025a8a <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE14_S_buffer_sizeEv>
 8025f5e:	4602      	mov	r2, r0
 8025f60:	683b      	ldr	r3, [r7, #0]
 8025f62:	4413      	add	r3, r2
 8025f64:	1e5c      	subs	r4, r3, #1
				     / _S_buffer_size());
 8025f66:	f7ff fd90 	bl	8025a8a <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE14_S_buffer_sizeEv>
 8025f6a:	4603      	mov	r3, r0
      const size_type __new_nodes = ((__new_elems + _S_buffer_size() - 1)
 8025f6c:	fbb4 f3f3 	udiv	r3, r4, r3
 8025f70:	60bb      	str	r3, [r7, #8]
      _M_reserve_map_at_back(__new_nodes);
 8025f72:	68b9      	ldr	r1, [r7, #8]
 8025f74:	6878      	ldr	r0, [r7, #4]
 8025f76:	f000 fc4c 	bl	8026812 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE22_M_reserve_map_at_backEj>
	  for (__i = 1; __i <= __new_nodes; ++__i)
 8025f7a:	2301      	movs	r3, #1
 8025f7c:	60fb      	str	r3, [r7, #12]
 8025f7e:	68fa      	ldr	r2, [r7, #12]
 8025f80:	68bb      	ldr	r3, [r7, #8]
 8025f82:	429a      	cmp	r2, r3
 8025f84:	d80e      	bhi.n	8025fa4 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_new_elements_at_backEj+0x7c>
	    *(this->_M_impl._M_finish._M_node + __i) = this->_M_allocate_node();
 8025f86:	6879      	ldr	r1, [r7, #4]
 8025f88:	687b      	ldr	r3, [r7, #4]
 8025f8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8025f8c:	68fb      	ldr	r3, [r7, #12]
 8025f8e:	009b      	lsls	r3, r3, #2
 8025f90:	18d4      	adds	r4, r2, r3
 8025f92:	4608      	mov	r0, r1
 8025f94:	f7fe fc50 	bl	8024838 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_allocate_nodeEv>
 8025f98:	4603      	mov	r3, r0
 8025f9a:	6023      	str	r3, [r4, #0]
	  for (__i = 1; __i <= __new_nodes; ++__i)
 8025f9c:	68fb      	ldr	r3, [r7, #12]
 8025f9e:	3301      	adds	r3, #1
 8025fa0:	60fb      	str	r3, [r7, #12]
 8025fa2:	e7ec      	b.n	8025f7e <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_new_elements_at_backEj+0x56>
    }
 8025fa4:	bf00      	nop
 8025fa6:	3714      	adds	r7, #20
 8025fa8:	46bd      	mov	sp, r7
 8025faa:	bd90      	pop	{r4, r7, pc}
 8025fac:	0803dd68 	.word	0x0803dd68

08025fb0 <_ZSt22__uninitialized_move_aISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_SaIS2_EET0_T_S8_S7_RT1_>:

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_a(_InputIterator __first, _InputIterator __last,
 8025fb0:	b590      	push	{r4, r7, lr}
 8025fb2:	b09b      	sub	sp, #108	; 0x6c
 8025fb4:	af02      	add	r7, sp, #8
 8025fb6:	60f8      	str	r0, [r7, #12]
 8025fb8:	60b9      	str	r1, [r7, #8]
 8025fba:	607a      	str	r2, [r7, #4]
 8025fbc:	603b      	str	r3, [r7, #0]
			   _ForwardIterator __result, _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a(_GLIBCXX_MAKE_MOVE_ITERATOR(__first),
					 _GLIBCXX_MAKE_MOVE_ITERATOR(__last),
					 __result, __alloc);
 8025fbe:	f107 0320 	add.w	r3, r7, #32
 8025fc2:	68b9      	ldr	r1, [r7, #8]
 8025fc4:	4618      	mov	r0, r3
 8025fc6:	f7fe f994 	bl	80242f2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8025fca:	f107 0310 	add.w	r3, r7, #16
 8025fce:	f107 0220 	add.w	r2, r7, #32
 8025fd2:	4611      	mov	r1, r2
 8025fd4:	4618      	mov	r0, r3
 8025fd6:	f000 fc37 	bl	8026848 <_ZSt18make_move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EESt13move_iteratorIT_ES7_>
 8025fda:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8025fde:	6879      	ldr	r1, [r7, #4]
 8025fe0:	4618      	mov	r0, r3
 8025fe2:	f7fe f986 	bl	80242f2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8025fe6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8025fea:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8025fee:	4611      	mov	r1, r2
 8025ff0:	4618      	mov	r0, r3
 8025ff2:	f000 fc29 	bl	8026848 <_ZSt18make_move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EESt13move_iteratorIT_ES7_>
 8025ff6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8025ffa:	6839      	ldr	r1, [r7, #0]
 8025ffc:	4618      	mov	r0, r3
 8025ffe:	f7fe f978 	bl	80242f2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026002:	68f8      	ldr	r0, [r7, #12]
 8026004:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8026008:	f107 0230 	add.w	r2, r7, #48	; 0x30
 802600c:	f107 0110 	add.w	r1, r7, #16
 8026010:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8026012:	9300      	str	r3, [sp, #0]
 8026014:	4623      	mov	r3, r4
 8026016:	f000 fc40 	bl	802689a <_ZSt22__uninitialized_copy_aISt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS3_PS3_EES6_S3_ET0_T_S9_S8_RSaIT1_E>
    }
 802601a:	68f8      	ldr	r0, [r7, #12]
 802601c:	3764      	adds	r7, #100	; 0x64
 802601e:	46bd      	mov	sp, r7
 8026020:	bd90      	pop	{r4, r7, pc}

08026022 <_ZSt4moveISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_ET0_T_S7_S6_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    move(_II __first, _II __last, _OI __result)
 8026022:	b580      	push	{r7, lr}
 8026024:	b098      	sub	sp, #96	; 0x60
 8026026:	af00      	add	r7, sp, #0
 8026028:	60f8      	str	r0, [r7, #12]
 802602a:	60b9      	str	r1, [r7, #8]
 802602c:	607a      	str	r2, [r7, #4]
 802602e:	603b      	str	r3, [r7, #0]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<true>(std::__miter_base(__first),
				      std::__miter_base(__last), __result);
 8026030:	f107 0320 	add.w	r3, r7, #32
 8026034:	68b9      	ldr	r1, [r7, #8]
 8026036:	4618      	mov	r0, r3
 8026038:	f7fe f95b 	bl	80242f2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802603c:	f107 0310 	add.w	r3, r7, #16
 8026040:	f107 0220 	add.w	r2, r7, #32
 8026044:	4611      	mov	r1, r2
 8026046:	4618      	mov	r0, r3
 8026048:	f000 fc4d 	bl	80268e6 <_ZSt12__miter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 802604c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8026050:	6879      	ldr	r1, [r7, #4]
 8026052:	4618      	mov	r0, r3
 8026054:	f7fe f94d 	bl	80242f2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026058:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802605c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8026060:	4611      	mov	r1, r2
 8026062:	4618      	mov	r0, r3
 8026064:	f000 fc3f 	bl	80268e6 <_ZSt12__miter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 8026068:	f107 0350 	add.w	r3, r7, #80	; 0x50
 802606c:	6839      	ldr	r1, [r7, #0]
 802606e:	4618      	mov	r0, r3
 8026070:	f7fe f93f 	bl	80242f2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026074:	68f8      	ldr	r0, [r7, #12]
 8026076:	f107 0350 	add.w	r3, r7, #80	; 0x50
 802607a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 802607e:	f107 0110 	add.w	r1, r7, #16
 8026082:	f000 fc3d 	bl	8026900 <_ZSt13__copy_move_aILb1ESt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_ET1_T0_S7_S6_>
    }
 8026086:	68f8      	ldr	r0, [r7, #12]
 8026088:	3760      	adds	r7, #96	; 0x60
 802608a:	46bd      	mov	sp, r7
 802608c:	bd80      	pop	{r7, pc}

0802608e <_ZSt7advanceIPKN10BHYWrapper8BHYFrameEiEvRT_T0_>:
    advance(_InputIterator& __i, _Distance __n)
 802608e:	b590      	push	{r4, r7, lr}
 8026090:	b085      	sub	sp, #20
 8026092:	af00      	add	r7, sp, #0
 8026094:	6078      	str	r0, [r7, #4]
 8026096:	6039      	str	r1, [r7, #0]
      typename iterator_traits<_InputIterator>::difference_type __d = __n;
 8026098:	683b      	ldr	r3, [r7, #0]
 802609a:	60fb      	str	r3, [r7, #12]
      std::__advance(__i, __d, std::__iterator_category(__i));
 802609c:	6878      	ldr	r0, [r7, #4]
 802609e:	f7fe fac3 	bl	8024628 <_ZSt19__iterator_categoryIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E17iterator_categoryERKS5_>
 80260a2:	4622      	mov	r2, r4
 80260a4:	68f9      	ldr	r1, [r7, #12]
 80260a6:	6878      	ldr	r0, [r7, #4]
 80260a8:	f7fe fee0 	bl	8024e6c <_ZSt9__advanceIPKN10BHYWrapper8BHYFrameEiEvRT_T0_St26random_access_iterator_tag>
    }
 80260ac:	bf00      	nop
 80260ae:	3714      	adds	r7, #20
 80260b0:	46bd      	mov	sp, r7
 80260b2:	bd90      	pop	{r4, r7, pc}

080260b4 <_ZSt25__uninitialized_move_copyISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EPKS2_S5_SaIS2_EET1_T_SA_T0_SB_S9_RT2_>:
  //  copies [first2, last2) into
  //  [result, result + (last1 - first1) + (last2 - first2)).
  template<typename _InputIterator1, typename _InputIterator2,
	   typename _ForwardIterator, typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_copy(_InputIterator1 __first1,
 80260b4:	b590      	push	{r4, r7, lr}
 80260b6:	b0a3      	sub	sp, #140	; 0x8c
 80260b8:	af02      	add	r7, sp, #8
 80260ba:	60f8      	str	r0, [r7, #12]
 80260bc:	60b9      	str	r1, [r7, #8]
 80260be:	607a      	str	r2, [r7, #4]
 80260c0:	603b      	str	r3, [r7, #0]
			      _InputIterator2 __first2,
			      _InputIterator2 __last2,
			      _ForwardIterator __result,
			      _Allocator& __alloc)
    {
      _ForwardIterator __mid = std::__uninitialized_move_a(__first1, __last1,
 80260c2:	f107 0320 	add.w	r3, r7, #32
 80260c6:	68b9      	ldr	r1, [r7, #8]
 80260c8:	4618      	mov	r0, r3
 80260ca:	f7fe f912 	bl	80242f2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80260ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80260d2:	6879      	ldr	r1, [r7, #4]
 80260d4:	4618      	mov	r0, r3
 80260d6:	f7fe f90c 	bl	80242f2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80260da:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80260de:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 80260e2:	4618      	mov	r0, r3
 80260e4:	f7fe f905 	bl	80242f2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80260e8:	f107 0010 	add.w	r0, r7, #16
 80260ec:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80260f0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80260f4:	f107 0120 	add.w	r1, r7, #32
 80260f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80260fc:	9300      	str	r3, [sp, #0]
 80260fe:	4623      	mov	r3, r4
 8026100:	f7ff ff56 	bl	8025fb0 <_ZSt22__uninitialized_move_aISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_SaIS2_EET0_T_S8_S7_RT1_>
							   __result,
							   __alloc);
      __try
	{
	  return std::__uninitialized_copy_a(__first2, __last2, __mid, __alloc);
 8026104:	f107 0210 	add.w	r2, r7, #16
 8026108:	f107 0350 	add.w	r3, r7, #80	; 0x50
 802610c:	4611      	mov	r1, r2
 802610e:	4618      	mov	r0, r3
 8026110:	f7fe f8ef 	bl	80242f2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026114:	68f8      	ldr	r0, [r7, #12]
 8026116:	f107 0250 	add.w	r2, r7, #80	; 0x50
 802611a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 802611e:	9300      	str	r3, [sp, #0]
 8026120:	4613      	mov	r3, r2
 8026122:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8026126:	6839      	ldr	r1, [r7, #0]
 8026128:	f7fe ff1c 	bl	8024f64 <_ZSt22__uninitialized_copy_aIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_ES1_ET0_T_S9_S8_RSaIT1_E>
      __catch(...)
	{
	  std::_Destroy(__result, __mid, __alloc);
	  __throw_exception_again;
	}
    }
 802612c:	68f8      	ldr	r0, [r7, #12]
 802612e:	3784      	adds	r7, #132	; 0x84
 8026130:	46bd      	mov	sp, r7
 8026132:	bd90      	pop	{r4, r7, pc}

08026134 <_ZSt13move_backwardISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_ET0_T_S7_S6_>:
   *  that the start of the output range may overlap [first,last).
  */
  template<typename _BI1, typename _BI2>
    _GLIBCXX20_CONSTEXPR
    inline _BI2
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8026134:	b580      	push	{r7, lr}
 8026136:	b098      	sub	sp, #96	; 0x60
 8026138:	af00      	add	r7, sp, #0
 802613a:	60f8      	str	r0, [r7, #12]
 802613c:	60b9      	str	r1, [r7, #8]
 802613e:	607a      	str	r2, [r7, #4]
 8026140:	603b      	str	r3, [r7, #0]
	    typename iterator_traits<_BI2>::value_type>)
      __glibcxx_requires_can_decrement_range(__first, __last, __result);

      return std::__copy_move_backward_a<true>(std::__miter_base(__first),
					       std::__miter_base(__last),
					       __result);
 8026142:	f107 0320 	add.w	r3, r7, #32
 8026146:	68b9      	ldr	r1, [r7, #8]
 8026148:	4618      	mov	r0, r3
 802614a:	f7fe f8d2 	bl	80242f2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802614e:	f107 0310 	add.w	r3, r7, #16
 8026152:	f107 0220 	add.w	r2, r7, #32
 8026156:	4611      	mov	r1, r2
 8026158:	4618      	mov	r0, r3
 802615a:	f000 fbc4 	bl	80268e6 <_ZSt12__miter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 802615e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8026162:	6879      	ldr	r1, [r7, #4]
 8026164:	4618      	mov	r0, r3
 8026166:	f7fe f8c4 	bl	80242f2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802616a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802616e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8026172:	4611      	mov	r1, r2
 8026174:	4618      	mov	r0, r3
 8026176:	f000 fbb6 	bl	80268e6 <_ZSt12__miter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 802617a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 802617e:	6839      	ldr	r1, [r7, #0]
 8026180:	4618      	mov	r0, r3
 8026182:	f7fe f8b6 	bl	80242f2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026186:	68f8      	ldr	r0, [r7, #12]
 8026188:	f107 0350 	add.w	r3, r7, #80	; 0x50
 802618c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8026190:	f107 0110 	add.w	r1, r7, #16
 8026194:	f000 fbfa 	bl	802698c <_ZSt22__copy_move_backward_aILb1ESt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_ET1_T0_S7_S6_>
    }
 8026198:	68f8      	ldr	r0, [r7, #12]
 802619a:	3760      	adds	r7, #96	; 0x60
 802619c:	46bd      	mov	sp, r7
 802619e:	bd80      	pop	{r7, pc}

080261a0 <_ZSt25__uninitialized_copy_moveIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_ES7_SaIS1_EET1_T_SA_T0_SB_S9_RT2_>:
    __uninitialized_copy_move(_InputIterator1 __first1,
 80261a0:	b590      	push	{r4, r7, lr}
 80261a2:	b0a3      	sub	sp, #140	; 0x8c
 80261a4:	af02      	add	r7, sp, #8
 80261a6:	60f8      	str	r0, [r7, #12]
 80261a8:	60b9      	str	r1, [r7, #8]
 80261aa:	607a      	str	r2, [r7, #4]
 80261ac:	603b      	str	r3, [r7, #0]
      _ForwardIterator __mid = std::__uninitialized_copy_a(__first1, __last1,
 80261ae:	f107 0320 	add.w	r3, r7, #32
 80261b2:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 80261b6:	4618      	mov	r0, r3
 80261b8:	f7fe f89b 	bl	80242f2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80261bc:	f107 0010 	add.w	r0, r7, #16
 80261c0:	f107 0220 	add.w	r2, r7, #32
 80261c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80261c8:	9300      	str	r3, [sp, #0]
 80261ca:	4613      	mov	r3, r2
 80261cc:	687a      	ldr	r2, [r7, #4]
 80261ce:	68b9      	ldr	r1, [r7, #8]
 80261d0:	f7fe fec8 	bl	8024f64 <_ZSt22__uninitialized_copy_aIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_ES1_ET0_T_S9_S8_RSaIT1_E>
	  return std::__uninitialized_move_a(__first2, __last2, __mid, __alloc);
 80261d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80261d8:	6839      	ldr	r1, [r7, #0]
 80261da:	4618      	mov	r0, r3
 80261dc:	f7fe f889 	bl	80242f2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80261e0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80261e4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80261e8:	4618      	mov	r0, r3
 80261ea:	f7fe f882 	bl	80242f2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80261ee:	f107 0210 	add.w	r2, r7, #16
 80261f2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80261f6:	4611      	mov	r1, r2
 80261f8:	4618      	mov	r0, r3
 80261fa:	f7fe f87a 	bl	80242f2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80261fe:	68f8      	ldr	r0, [r7, #12]
 8026200:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8026204:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8026208:	f107 0130 	add.w	r1, r7, #48	; 0x30
 802620c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8026210:	9300      	str	r3, [sp, #0]
 8026212:	4623      	mov	r3, r4
 8026214:	f7ff fecc 	bl	8025fb0 <_ZSt22__uninitialized_move_aISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_SaIS2_EET0_T_S8_S7_RT1_>
    }
 8026218:	68f8      	ldr	r0, [r7, #12]
 802621a:	3784      	adds	r7, #132	; 0x84
 802621c:	46bd      	mov	sp, r7
 802621e:	bd90      	pop	{r4, r7, pc}

08026220 <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8026220:	b580      	push	{r7, lr}
 8026222:	b082      	sub	sp, #8
 8026224:	af00      	add	r7, sp, #0
 8026226:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8026228:	6878      	ldr	r0, [r7, #4]
 802622a:	f000 fbf5 	bl	8026a18 <_ZNK9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE8max_sizeEv>
 802622e:	4603      	mov	r3, r0
      }
 8026230:	4618      	mov	r0, r3
 8026232:	3708      	adds	r7, #8
 8026234:	46bd      	mov	sp, r7
 8026236:	bd80      	pop	{r7, pc}

08026238 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8026238:	b480      	push	{r7}
 802623a:	b083      	sub	sp, #12
 802623c:	af00      	add	r7, sp, #0
 802623e:	6078      	str	r0, [r7, #4]
 8026240:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8026242:	683b      	ldr	r3, [r7, #0]
 8026244:	681a      	ldr	r2, [r3, #0]
 8026246:	687b      	ldr	r3, [r7, #4]
 8026248:	681b      	ldr	r3, [r3, #0]
 802624a:	429a      	cmp	r2, r3
 802624c:	d201      	bcs.n	8026252 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 802624e:	683b      	ldr	r3, [r7, #0]
 8026250:	e000      	b.n	8026254 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8026252:	687b      	ldr	r3, [r7, #4]
    }
 8026254:	4618      	mov	r0, r3
 8026256:	370c      	adds	r7, #12
 8026258:	46bd      	mov	sp, r7
 802625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802625e:	4770      	bx	lr

08026260 <_ZSt4copyIPPN10BHYWrapper8BHYFrameES3_ET0_T_S5_S4_>:
    copy(_II __first, _II __last, _OI __result)
 8026260:	b590      	push	{r4, r7, lr}
 8026262:	b085      	sub	sp, #20
 8026264:	af00      	add	r7, sp, #0
 8026266:	60f8      	str	r0, [r7, #12]
 8026268:	60b9      	str	r1, [r7, #8]
 802626a:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 802626c:	68f8      	ldr	r0, [r7, #12]
 802626e:	f000 fbdf 	bl	8026a30 <_ZSt12__miter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 8026272:	4604      	mov	r4, r0
 8026274:	68b8      	ldr	r0, [r7, #8]
 8026276:	f000 fbdb 	bl	8026a30 <_ZSt12__miter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 802627a:	4603      	mov	r3, r0
 802627c:	687a      	ldr	r2, [r7, #4]
 802627e:	4619      	mov	r1, r3
 8026280:	4620      	mov	r0, r4
 8026282:	f000 fbe0 	bl	8026a46 <_ZSt13__copy_move_aILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>
 8026286:	4603      	mov	r3, r0
    }
 8026288:	4618      	mov	r0, r3
 802628a:	3714      	adds	r7, #20
 802628c:	46bd      	mov	sp, r7
 802628e:	bd90      	pop	{r4, r7, pc}

08026290 <_ZSt13copy_backwardIPPN10BHYWrapper8BHYFrameES3_ET0_T_S5_S4_>:
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8026290:	b590      	push	{r4, r7, lr}
 8026292:	b085      	sub	sp, #20
 8026294:	af00      	add	r7, sp, #0
 8026296:	60f8      	str	r0, [r7, #12]
 8026298:	60b9      	str	r1, [r7, #8]
 802629a:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 802629c:	68f8      	ldr	r0, [r7, #12]
 802629e:	f000 fbc7 	bl	8026a30 <_ZSt12__miter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 80262a2:	4604      	mov	r4, r0
 80262a4:	68b8      	ldr	r0, [r7, #8]
 80262a6:	f000 fbc3 	bl	8026a30 <_ZSt12__miter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 80262aa:	4603      	mov	r3, r0
 80262ac:	687a      	ldr	r2, [r7, #4]
 80262ae:	4619      	mov	r1, r3
 80262b0:	4620      	mov	r0, r4
 80262b2:	f000 fbeb 	bl	8026a8c <_ZSt22__copy_move_backward_aILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>
 80262b6:	4603      	mov	r3, r0
    }
 80262b8:	4618      	mov	r0, r3
 80262ba:	3714      	adds	r7, #20
 80262bc:	46bd      	mov	sp, r7
 80262be:	bd90      	pop	{r4, r7, pc}

080262c0 <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80262c0:	b580      	push	{r7, lr}
 80262c2:	b084      	sub	sp, #16
 80262c4:	af00      	add	r7, sp, #0
 80262c6:	60f8      	str	r0, [r7, #12]
 80262c8:	60b9      	str	r1, [r7, #8]
 80262ca:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80262cc:	68f8      	ldr	r0, [r7, #12]
 80262ce:	f000 fc01 	bl	8026ad4 <_ZNK9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE11_M_max_sizeEv>
 80262d2:	4602      	mov	r2, r0
 80262d4:	68bb      	ldr	r3, [r7, #8]
 80262d6:	4293      	cmp	r3, r2
 80262d8:	bf8c      	ite	hi
 80262da:	2301      	movhi	r3, #1
 80262dc:	2300      	movls	r3, #0
 80262de:	b2db      	uxtb	r3, r3
 80262e0:	2b00      	cmp	r3, #0
 80262e2:	d001      	beq.n	80262e8 <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80262e4:	f015 fcc9 	bl	803bc7a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80262e8:	68ba      	ldr	r2, [r7, #8]
 80262ea:	4613      	mov	r3, r2
 80262ec:	009b      	lsls	r3, r3, #2
 80262ee:	4413      	add	r3, r2
 80262f0:	009b      	lsls	r3, r3, #2
 80262f2:	4618      	mov	r0, r3
 80262f4:	f015 fcb0 	bl	803bc58 <_Znwj>
 80262f8:	4603      	mov	r3, r0
      }
 80262fa:	4618      	mov	r0, r3
 80262fc:	3710      	adds	r7, #16
 80262fe:	46bd      	mov	sp, r7
 8026300:	bd80      	pop	{r7, pc}

08026302 <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 8026302:	b580      	push	{r7, lr}
 8026304:	b084      	sub	sp, #16
 8026306:	af00      	add	r7, sp, #0
 8026308:	60f8      	str	r0, [r7, #12]
 802630a:	60b9      	str	r1, [r7, #8]
 802630c:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 802630e:	687a      	ldr	r2, [r7, #4]
 8026310:	4613      	mov	r3, r2
 8026312:	009b      	lsls	r3, r3, #2
 8026314:	4413      	add	r3, r2
 8026316:	009b      	lsls	r3, r3, #2
 8026318:	4619      	mov	r1, r3
 802631a:	68b8      	ldr	r0, [r7, #8]
 802631c:	f015 fc9a 	bl	803bc54 <_ZdlPvj>
      }
 8026320:	bf00      	nop
 8026322:	3710      	adds	r7, #16
 8026324:	46bd      	mov	sp, r7
 8026326:	bd80      	pop	{r7, pc}

08026328 <_ZStmiRKSt15_Deque_iteratorIjRjPjES4_>:
      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8026328:	b580      	push	{r7, lr}
 802632a:	b082      	sub	sp, #8
 802632c:	af00      	add	r7, sp, #0
 802632e:	6078      	str	r0, [r7, #4]
 8026330:	6039      	str	r1, [r7, #0]
	return difference_type(_S_buffer_size())
 8026332:	f000 f8eb 	bl	802650c <_ZNSt15_Deque_iteratorIjRjPjE14_S_buffer_sizeEv>
 8026336:	4603      	mov	r3, r0
 8026338:	4619      	mov	r1, r3
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 802633a:	687b      	ldr	r3, [r7, #4]
 802633c:	68da      	ldr	r2, [r3, #12]
 802633e:	683b      	ldr	r3, [r7, #0]
 8026340:	68db      	ldr	r3, [r3, #12]
 8026342:	1ad3      	subs	r3, r2, r3
 8026344:	109b      	asrs	r3, r3, #2
 8026346:	3b01      	subs	r3, #1
 8026348:	fb01 f303 	mul.w	r3, r1, r3
 802634c:	687a      	ldr	r2, [r7, #4]
 802634e:	6811      	ldr	r1, [r2, #0]
 8026350:	687a      	ldr	r2, [r7, #4]
 8026352:	6852      	ldr	r2, [r2, #4]
 8026354:	1a8a      	subs	r2, r1, r2
 8026356:	1092      	asrs	r2, r2, #2
 8026358:	4413      	add	r3, r2
	  + (__y._M_last - __y._M_cur);
 802635a:	683a      	ldr	r2, [r7, #0]
 802635c:	6891      	ldr	r1, [r2, #8]
 802635e:	683a      	ldr	r2, [r7, #0]
 8026360:	6812      	ldr	r2, [r2, #0]
 8026362:	1a8a      	subs	r2, r1, r2
 8026364:	1092      	asrs	r2, r2, #2
 8026366:	4413      	add	r3, r2
      }
 8026368:	4618      	mov	r0, r3
 802636a:	3708      	adds	r7, #8
 802636c:	46bd      	mov	sp, r7
 802636e:	bd80      	pop	{r7, pc}

08026370 <_ZNSt5dequeIjSaIjEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8026370:	b580      	push	{r7, lr}
 8026372:	b084      	sub	sp, #16
 8026374:	af00      	add	r7, sp, #0
 8026376:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 8026378:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 802637c:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 802637e:	6878      	ldr	r0, [r7, #4]
 8026380:	f000 fbb6 	bl	8026af0 <_ZNSt16allocator_traitsISaIjEE8max_sizeERKS0_>
 8026384:	4603      	mov	r3, r0
 8026386:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8026388:	f107 0208 	add.w	r2, r7, #8
 802638c:	f107 030c 	add.w	r3, r7, #12
 8026390:	4611      	mov	r1, r2
 8026392:	4618      	mov	r0, r3
 8026394:	f7ff ff50 	bl	8026238 <_ZSt3minIjERKT_S2_S2_>
 8026398:	4603      	mov	r3, r0
 802639a:	681b      	ldr	r3, [r3, #0]
      }
 802639c:	4618      	mov	r0, r3
 802639e:	3710      	adds	r7, #16
 80263a0:	46bd      	mov	sp, r7
 80263a2:	bd80      	pop	{r7, pc}

080263a4 <_ZNKSt11_Deque_baseIjSaIjEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80263a4:	b480      	push	{r7}
 80263a6:	b083      	sub	sp, #12
 80263a8:	af00      	add	r7, sp, #0
 80263aa:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80263ac:	687b      	ldr	r3, [r7, #4]
 80263ae:	4618      	mov	r0, r3
 80263b0:	370c      	adds	r7, #12
 80263b2:	46bd      	mov	sp, r7
 80263b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80263b8:	4770      	bx	lr

080263ba <_ZNSt5dequeIjSaIjEE17_M_reallocate_mapEjb>:
    deque<_Tp, _Alloc>::
 80263ba:	b590      	push	{r4, r7, lr}
 80263bc:	b08b      	sub	sp, #44	; 0x2c
 80263be:	af00      	add	r7, sp, #0
 80263c0:	60f8      	str	r0, [r7, #12]
 80263c2:	60b9      	str	r1, [r7, #8]
 80263c4:	4613      	mov	r3, r2
 80263c6:	71fb      	strb	r3, [r7, #7]
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 80263c8:	68fb      	ldr	r3, [r7, #12]
 80263ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80263cc:	68fb      	ldr	r3, [r7, #12]
 80263ce:	695b      	ldr	r3, [r3, #20]
 80263d0:	1ad3      	subs	r3, r2, r3
 80263d2:	109b      	asrs	r3, r3, #2
 80263d4:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 80263d6:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 80263d8:	68bb      	ldr	r3, [r7, #8]
 80263da:	6a3a      	ldr	r2, [r7, #32]
 80263dc:	4413      	add	r3, r2
 80263de:	61fb      	str	r3, [r7, #28]
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 80263e0:	68fb      	ldr	r3, [r7, #12]
 80263e2:	685a      	ldr	r2, [r3, #4]
 80263e4:	69fb      	ldr	r3, [r7, #28]
 80263e6:	005b      	lsls	r3, r3, #1
 80263e8:	429a      	cmp	r2, r3
 80263ea:	d92d      	bls.n	8026448 <_ZNSt5dequeIjSaIjEE17_M_reallocate_mapEjb+0x8e>
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 80263ec:	68fb      	ldr	r3, [r7, #12]
 80263ee:	681a      	ldr	r2, [r3, #0]
 80263f0:	68fb      	ldr	r3, [r7, #12]
 80263f2:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 80263f4:	69fb      	ldr	r3, [r7, #28]
 80263f6:	1acb      	subs	r3, r1, r3
 80263f8:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 80263fa:	0099      	lsls	r1, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 80263fc:	79fb      	ldrb	r3, [r7, #7]
 80263fe:	2b00      	cmp	r3, #0
 8026400:	d002      	beq.n	8026408 <_ZNSt5dequeIjSaIjEE17_M_reallocate_mapEjb+0x4e>
 8026402:	68bb      	ldr	r3, [r7, #8]
 8026404:	009b      	lsls	r3, r3, #2
 8026406:	e000      	b.n	802640a <_ZNSt5dequeIjSaIjEE17_M_reallocate_mapEjb+0x50>
 8026408:	2300      	movs	r3, #0
 802640a:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 802640c:	4413      	add	r3, r2
 802640e:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 8026410:	68fb      	ldr	r3, [r7, #12]
 8026412:	695b      	ldr	r3, [r3, #20]
 8026414:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8026416:	429a      	cmp	r2, r3
 8026418:	d209      	bcs.n	802642e <_ZNSt5dequeIjSaIjEE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 802641a:	68fb      	ldr	r3, [r7, #12]
 802641c:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 802641e:	68fb      	ldr	r3, [r7, #12]
 8026420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 8026422:	3304      	adds	r3, #4
 8026424:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8026426:	4619      	mov	r1, r3
 8026428:	f000 fb6e 	bl	8026b08 <_ZSt4copyIPPjS1_ET0_T_S3_S2_>
 802642c:	e048      	b.n	80264c0 <_ZNSt5dequeIjSaIjEE17_M_reallocate_mapEjb+0x106>
	    std::copy_backward(this->_M_impl._M_start._M_node,
 802642e:	68fb      	ldr	r3, [r7, #12]
 8026430:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 8026432:	68fb      	ldr	r3, [r7, #12]
 8026434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8026436:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 8026438:	6a3b      	ldr	r3, [r7, #32]
 802643a:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 802643c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802643e:	4413      	add	r3, r2
 8026440:	461a      	mov	r2, r3
 8026442:	f000 fb79 	bl	8026b38 <_ZSt13copy_backwardIPPjS1_ET0_T_S3_S2_>
 8026446:	e03b      	b.n	80264c0 <_ZNSt5dequeIjSaIjEE17_M_reallocate_mapEjb+0x106>
	  size_type __new_map_size = this->_M_impl._M_map_size
 8026448:	68fb      	ldr	r3, [r7, #12]
 802644a:	685c      	ldr	r4, [r3, #4]
				     + std::max(this->_M_impl._M_map_size,
 802644c:	68fb      	ldr	r3, [r7, #12]
 802644e:	3304      	adds	r3, #4
 8026450:	f107 0208 	add.w	r2, r7, #8
 8026454:	4611      	mov	r1, r2
 8026456:	4618      	mov	r0, r3
 8026458:	f7fe fb68 	bl	8024b2c <_ZSt3maxIjERKT_S2_S2_>
 802645c:	4603      	mov	r3, r0
 802645e:	681b      	ldr	r3, [r3, #0]
 8026460:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 8026462:	3302      	adds	r3, #2
 8026464:	61bb      	str	r3, [r7, #24]
	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 8026466:	68fb      	ldr	r3, [r7, #12]
 8026468:	69b9      	ldr	r1, [r7, #24]
 802646a:	4618      	mov	r0, r3
 802646c:	f7ff fb45 	bl	8025afa <_ZNSt11_Deque_baseIjSaIjEE15_M_allocate_mapEj>
 8026470:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8026472:	69ba      	ldr	r2, [r7, #24]
 8026474:	69fb      	ldr	r3, [r7, #28]
 8026476:	1ad3      	subs	r3, r2, r3
 8026478:	085b      	lsrs	r3, r3, #1
 802647a:	009a      	lsls	r2, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 802647c:	79fb      	ldrb	r3, [r7, #7]
 802647e:	2b00      	cmp	r3, #0
 8026480:	d002      	beq.n	8026488 <_ZNSt5dequeIjSaIjEE17_M_reallocate_mapEjb+0xce>
 8026482:	68bb      	ldr	r3, [r7, #8]
 8026484:	009b      	lsls	r3, r3, #2
 8026486:	e000      	b.n	802648a <_ZNSt5dequeIjSaIjEE17_M_reallocate_mapEjb+0xd0>
 8026488:	2300      	movs	r3, #0
 802648a:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 802648c:	697a      	ldr	r2, [r7, #20]
 802648e:	4413      	add	r3, r2
 8026490:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8026492:	68fb      	ldr	r3, [r7, #12]
 8026494:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 8026496:	68fb      	ldr	r3, [r7, #12]
 8026498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 802649a:	3304      	adds	r3, #4
 802649c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802649e:	4619      	mov	r1, r3
 80264a0:	f000 fb32 	bl	8026b08 <_ZSt4copyIPPjS1_ET0_T_S3_S2_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 80264a4:	68f8      	ldr	r0, [r7, #12]
 80264a6:	68fb      	ldr	r3, [r7, #12]
 80264a8:	6819      	ldr	r1, [r3, #0]
 80264aa:	68fb      	ldr	r3, [r7, #12]
 80264ac:	685b      	ldr	r3, [r3, #4]
 80264ae:	461a      	mov	r2, r3
 80264b0:	f7fe fc4c 	bl	8024d4c <_ZNSt11_Deque_baseIjSaIjEE17_M_deallocate_mapEPPjj>
	  this->_M_impl._M_map = __new_map;
 80264b4:	68fb      	ldr	r3, [r7, #12]
 80264b6:	697a      	ldr	r2, [r7, #20]
 80264b8:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 80264ba:	68fb      	ldr	r3, [r7, #12]
 80264bc:	69ba      	ldr	r2, [r7, #24]
 80264be:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_start._M_set_node(__new_nstart);
 80264c0:	68fb      	ldr	r3, [r7, #12]
 80264c2:	3308      	adds	r3, #8
 80264c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80264c6:	4618      	mov	r0, r3
 80264c8:	f7ff fa33 	bl	8025932 <_ZNSt15_Deque_iteratorIjRjPjE11_M_set_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 80264cc:	68fb      	ldr	r3, [r7, #12]
 80264ce:	f103 0018 	add.w	r0, r3, #24
 80264d2:	6a3a      	ldr	r2, [r7, #32]
 80264d4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80264d8:	4413      	add	r3, r2
 80264da:	009b      	lsls	r3, r3, #2
 80264dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80264de:	4413      	add	r3, r2
 80264e0:	4619      	mov	r1, r3
 80264e2:	f7ff fa26 	bl	8025932 <_ZNSt15_Deque_iteratorIjRjPjE11_M_set_nodeEPS1_>
    }
 80264e6:	bf00      	nop
 80264e8:	372c      	adds	r7, #44	; 0x2c
 80264ea:	46bd      	mov	sp, r7
 80264ec:	bd90      	pop	{r4, r7, pc}

080264ee <_ZNSt16allocator_traitsISaIjEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 80264ee:	b580      	push	{r7, lr}
 80264f0:	b082      	sub	sp, #8
 80264f2:	af00      	add	r7, sp, #0
 80264f4:	6078      	str	r0, [r7, #4]
 80264f6:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80264f8:	2200      	movs	r2, #0
 80264fa:	6839      	ldr	r1, [r7, #0]
 80264fc:	6878      	ldr	r0, [r7, #4]
 80264fe:	f000 fb33 	bl	8026b68 <_ZN9__gnu_cxx13new_allocatorIjE8allocateEjPKv>
 8026502:	4603      	mov	r3, r0
 8026504:	4618      	mov	r0, r3
 8026506:	3708      	adds	r7, #8
 8026508:	46bd      	mov	sp, r7
 802650a:	bd80      	pop	{r7, pc}

0802650c <_ZNSt15_Deque_iteratorIjRjPjE14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 802650c:	b580      	push	{r7, lr}
 802650e:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 8026510:	2004      	movs	r0, #4
 8026512:	f7fa fcd9 	bl	8020ec8 <_ZSt16__deque_buf_sizej>
 8026516:	4603      	mov	r3, r0
 8026518:	4618      	mov	r0, r3
 802651a:	bd80      	pop	{r7, pc}

0802651c <_ZNSt16allocator_traitsISaIjEE10deallocateERS0_Pjj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 802651c:	b580      	push	{r7, lr}
 802651e:	b084      	sub	sp, #16
 8026520:	af00      	add	r7, sp, #0
 8026522:	60f8      	str	r0, [r7, #12]
 8026524:	60b9      	str	r1, [r7, #8]
 8026526:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8026528:	687a      	ldr	r2, [r7, #4]
 802652a:	68b9      	ldr	r1, [r7, #8]
 802652c:	68f8      	ldr	r0, [r7, #12]
 802652e:	f000 fb39 	bl	8026ba4 <_ZN9__gnu_cxx13new_allocatorIjE10deallocateEPjj>
 8026532:	bf00      	nop
 8026534:	3710      	adds	r7, #16
 8026536:	46bd      	mov	sp, r7
 8026538:	bd80      	pop	{r7, pc}

0802653a <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 802653a:	b580      	push	{r7, lr}
 802653c:	b084      	sub	sp, #16
 802653e:	af00      	add	r7, sp, #0
 8026540:	60f8      	str	r0, [r7, #12]
 8026542:	60b9      	str	r1, [r7, #8]
 8026544:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8026546:	68f8      	ldr	r0, [r7, #12]
 8026548:	f000 fb3c 	bl	8026bc4 <_ZNK9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEE11_M_max_sizeEv>
 802654c:	4602      	mov	r2, r0
 802654e:	68bb      	ldr	r3, [r7, #8]
 8026550:	4293      	cmp	r3, r2
 8026552:	bf8c      	ite	hi
 8026554:	2301      	movhi	r3, #1
 8026556:	2300      	movls	r3, #0
 8026558:	b2db      	uxtb	r3, r3
 802655a:	2b00      	cmp	r3, #0
 802655c:	d001      	beq.n	8026562 <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 802655e:	f015 fb8c 	bl	803bc7a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8026562:	68bb      	ldr	r3, [r7, #8]
 8026564:	009b      	lsls	r3, r3, #2
 8026566:	4618      	mov	r0, r3
 8026568:	f015 fb76 	bl	803bc58 <_Znwj>
 802656c:	4603      	mov	r3, r0
      }
 802656e:	4618      	mov	r0, r3
 8026570:	3710      	adds	r7, #16
 8026572:	46bd      	mov	sp, r7
 8026574:	bd80      	pop	{r7, pc}

08026576 <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8026576:	b480      	push	{r7}
 8026578:	b083      	sub	sp, #12
 802657a:	af00      	add	r7, sp, #0
 802657c:	6078      	str	r0, [r7, #4]
 802657e:	687b      	ldr	r3, [r7, #4]
 8026580:	4618      	mov	r0, r3
 8026582:	370c      	adds	r7, #12
 8026584:	46bd      	mov	sp, r7
 8026586:	f85d 7b04 	ldr.w	r7, [sp], #4
 802658a:	4770      	bx	lr

0802658c <_ZN9__gnu_cxx13new_allocatorIjEC1Ev>:
 802658c:	b480      	push	{r7}
 802658e:	b083      	sub	sp, #12
 8026590:	af00      	add	r7, sp, #0
 8026592:	6078      	str	r0, [r7, #4]
 8026594:	687b      	ldr	r3, [r7, #4]
 8026596:	4618      	mov	r0, r3
 8026598:	370c      	adds	r7, #12
 802659a:	46bd      	mov	sp, r7
 802659c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80265a0:	4770      	bx	lr

080265a2 <_ZNSt15_Deque_iteratorIjRjPjEC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 80265a2:	b480      	push	{r7}
 80265a4:	b083      	sub	sp, #12
 80265a6:	af00      	add	r7, sp, #0
 80265a8:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 80265aa:	687b      	ldr	r3, [r7, #4]
 80265ac:	2200      	movs	r2, #0
 80265ae:	601a      	str	r2, [r3, #0]
 80265b0:	687b      	ldr	r3, [r7, #4]
 80265b2:	2200      	movs	r2, #0
 80265b4:	605a      	str	r2, [r3, #4]
 80265b6:	687b      	ldr	r3, [r7, #4]
 80265b8:	2200      	movs	r2, #0
 80265ba:	609a      	str	r2, [r3, #8]
 80265bc:	687b      	ldr	r3, [r7, #4]
 80265be:	2200      	movs	r2, #0
 80265c0:	60da      	str	r2, [r3, #12]
 80265c2:	687b      	ldr	r3, [r7, #4]
 80265c4:	4618      	mov	r0, r3
 80265c6:	370c      	adds	r7, #12
 80265c8:	46bd      	mov	sp, r7
 80265ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80265ce:	4770      	bx	lr

080265d0 <_ZNSt16allocator_traitsISaIPjEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 80265d0:	b580      	push	{r7, lr}
 80265d2:	b082      	sub	sp, #8
 80265d4:	af00      	add	r7, sp, #0
 80265d6:	6078      	str	r0, [r7, #4]
 80265d8:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80265da:	2200      	movs	r2, #0
 80265dc:	6839      	ldr	r1, [r7, #0]
 80265de:	6878      	ldr	r0, [r7, #4]
 80265e0:	f000 fafc 	bl	8026bdc <_ZN9__gnu_cxx13new_allocatorIPjE8allocateEjPKv>
 80265e4:	4603      	mov	r3, r0
 80265e6:	4618      	mov	r0, r3
 80265e8:	3708      	adds	r7, #8
 80265ea:	46bd      	mov	sp, r7
 80265ec:	bd80      	pop	{r7, pc}

080265ee <_ZNSaIPjEC1IjEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 80265ee:	b580      	push	{r7, lr}
 80265f0:	b082      	sub	sp, #8
 80265f2:	af00      	add	r7, sp, #0
 80265f4:	6078      	str	r0, [r7, #4]
 80265f6:	6039      	str	r1, [r7, #0]
 80265f8:	6878      	ldr	r0, [r7, #4]
 80265fa:	f000 fb0d 	bl	8026c18 <_ZN9__gnu_cxx13new_allocatorIPjEC1Ev>
 80265fe:	687b      	ldr	r3, [r7, #4]
 8026600:	4618      	mov	r0, r3
 8026602:	3708      	adds	r7, #8
 8026604:	46bd      	mov	sp, r7
 8026606:	bd80      	pop	{r7, pc}

08026608 <_ZN9__gnu_cxx13new_allocatorIPjED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8026608:	b480      	push	{r7}
 802660a:	b083      	sub	sp, #12
 802660c:	af00      	add	r7, sp, #0
 802660e:	6078      	str	r0, [r7, #4]
 8026610:	687b      	ldr	r3, [r7, #4]
 8026612:	4618      	mov	r0, r3
 8026614:	370c      	adds	r7, #12
 8026616:	46bd      	mov	sp, r7
 8026618:	f85d 7b04 	ldr.w	r7, [sp], #4
 802661c:	4770      	bx	lr

0802661e <_ZN9__gnu_cxx13new_allocatorIPjE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __t)
 802661e:	b580      	push	{r7, lr}
 8026620:	b084      	sub	sp, #16
 8026622:	af00      	add	r7, sp, #0
 8026624:	60f8      	str	r0, [r7, #12]
 8026626:	60b9      	str	r1, [r7, #8]
 8026628:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 802662a:	687b      	ldr	r3, [r7, #4]
 802662c:	009b      	lsls	r3, r3, #2
 802662e:	4619      	mov	r1, r3
 8026630:	68b8      	ldr	r0, [r7, #8]
 8026632:	f015 fb0f 	bl	803bc54 <_ZdlPvj>
      }
 8026636:	bf00      	nop
 8026638:	3710      	adds	r7, #16
 802663a:	46bd      	mov	sp, r7
 802663c:	bd80      	pop	{r7, pc}

0802663e <_ZSt4moveIRNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS2_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 802663e:	b480      	push	{r7}
 8026640:	b083      	sub	sp, #12
 8026642:	af00      	add	r7, sp, #0
 8026644:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8026646:	687b      	ldr	r3, [r7, #4]
 8026648:	4618      	mov	r0, r3
 802664a:	370c      	adds	r7, #12
 802664c:	46bd      	mov	sp, r7
 802664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026652:	4770      	bx	lr

08026654 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_dataC1ERKS4_>:
	_Deque_impl_data(const _Deque_impl_data&) = default;
 8026654:	b580      	push	{r7, lr}
 8026656:	b082      	sub	sp, #8
 8026658:	af00      	add	r7, sp, #0
 802665a:	6078      	str	r0, [r7, #4]
 802665c:	6039      	str	r1, [r7, #0]
 802665e:	683b      	ldr	r3, [r7, #0]
 8026660:	681a      	ldr	r2, [r3, #0]
 8026662:	687b      	ldr	r3, [r7, #4]
 8026664:	601a      	str	r2, [r3, #0]
 8026666:	683b      	ldr	r3, [r7, #0]
 8026668:	685a      	ldr	r2, [r3, #4]
 802666a:	687b      	ldr	r3, [r7, #4]
 802666c:	605a      	str	r2, [r3, #4]
 802666e:	687b      	ldr	r3, [r7, #4]
 8026670:	f103 0208 	add.w	r2, r3, #8
 8026674:	683b      	ldr	r3, [r7, #0]
 8026676:	3308      	adds	r3, #8
 8026678:	4619      	mov	r1, r3
 802667a:	4610      	mov	r0, r2
 802667c:	f7fd fe39 	bl	80242f2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026680:	687b      	ldr	r3, [r7, #4]
 8026682:	f103 0218 	add.w	r2, r3, #24
 8026686:	683b      	ldr	r3, [r7, #0]
 8026688:	3318      	adds	r3, #24
 802668a:	4619      	mov	r1, r3
 802668c:	4610      	mov	r0, r2
 802668e:	f7fd fe30 	bl	80242f2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026692:	687b      	ldr	r3, [r7, #4]
 8026694:	4618      	mov	r0, r3
 8026696:	3708      	adds	r7, #8
 8026698:	46bd      	mov	sp, r7
 802669a:	bd80      	pop	{r7, pc}

0802669c <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_dataC1EOS4_>:
	_Deque_impl_data(_Deque_impl_data&& __x) noexcept
 802669c:	b5b0      	push	{r4, r5, r7, lr}
 802669e:	b08c      	sub	sp, #48	; 0x30
 80266a0:	af00      	add	r7, sp, #0
 80266a2:	6078      	str	r0, [r7, #4]
 80266a4:	6039      	str	r1, [r7, #0]
	: _Deque_impl_data(__x)
 80266a6:	6839      	ldr	r1, [r7, #0]
 80266a8:	6878      	ldr	r0, [r7, #4]
 80266aa:	f7ff ffd3 	bl	8026654 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_dataC1ERKS4_>
	{ __x = _Deque_impl_data(); }
 80266ae:	f107 0308 	add.w	r3, r7, #8
 80266b2:	4618      	mov	r0, r3
 80266b4:	f7fe fa16 	bl	8024ae4 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_dataC1Ev>
 80266b8:	683b      	ldr	r3, [r7, #0]
 80266ba:	461d      	mov	r5, r3
 80266bc:	f107 0408 	add.w	r4, r7, #8
 80266c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80266c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80266c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80266c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80266c8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80266cc:	e885 0003 	stmia.w	r5, {r0, r1}
 80266d0:	687b      	ldr	r3, [r7, #4]
 80266d2:	4618      	mov	r0, r3
 80266d4:	3730      	adds	r7, #48	; 0x30
 80266d6:	46bd      	mov	sp, r7
 80266d8:	bdb0      	pop	{r4, r5, r7, pc}

080266da <_ZSt4moveIRSaIN10BHYWrapper8BHYFrameEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 80266da:	b480      	push	{r7}
 80266dc:	b083      	sub	sp, #12
 80266de:	af00      	add	r7, sp, #0
 80266e0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80266e2:	687b      	ldr	r3, [r7, #4]
 80266e4:	4618      	mov	r0, r3
 80266e6:	370c      	adds	r7, #12
 80266e8:	46bd      	mov	sp, r7
 80266ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80266ee:	4770      	bx	lr

080266f0 <_ZSt4moveIRNSt11_Deque_baseIjSaIjEE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 80266f0:	b480      	push	{r7}
 80266f2:	b083      	sub	sp, #12
 80266f4:	af00      	add	r7, sp, #0
 80266f6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80266f8:	687b      	ldr	r3, [r7, #4]
 80266fa:	4618      	mov	r0, r3
 80266fc:	370c      	adds	r7, #12
 80266fe:	46bd      	mov	sp, r7
 8026700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026704:	4770      	bx	lr

08026706 <_ZNSt11_Deque_baseIjSaIjEE16_Deque_impl_dataC1ERKS2_>:
	_Deque_impl_data(const _Deque_impl_data&) = default;
 8026706:	b580      	push	{r7, lr}
 8026708:	b082      	sub	sp, #8
 802670a:	af00      	add	r7, sp, #0
 802670c:	6078      	str	r0, [r7, #4]
 802670e:	6039      	str	r1, [r7, #0]
 8026710:	683b      	ldr	r3, [r7, #0]
 8026712:	681a      	ldr	r2, [r3, #0]
 8026714:	687b      	ldr	r3, [r7, #4]
 8026716:	601a      	str	r2, [r3, #0]
 8026718:	683b      	ldr	r3, [r7, #0]
 802671a:	685a      	ldr	r2, [r3, #4]
 802671c:	687b      	ldr	r3, [r7, #4]
 802671e:	605a      	str	r2, [r3, #4]
 8026720:	687b      	ldr	r3, [r7, #4]
 8026722:	f103 0208 	add.w	r2, r3, #8
 8026726:	683b      	ldr	r3, [r7, #0]
 8026728:	3308      	adds	r3, #8
 802672a:	4619      	mov	r1, r3
 802672c:	4610      	mov	r0, r2
 802672e:	f7fd fe71 	bl	8024414 <_ZNSt15_Deque_iteratorIjRjPjEC1ERKS2_>
 8026732:	687b      	ldr	r3, [r7, #4]
 8026734:	f103 0218 	add.w	r2, r3, #24
 8026738:	683b      	ldr	r3, [r7, #0]
 802673a:	3318      	adds	r3, #24
 802673c:	4619      	mov	r1, r3
 802673e:	4610      	mov	r0, r2
 8026740:	f7fd fe68 	bl	8024414 <_ZNSt15_Deque_iteratorIjRjPjEC1ERKS2_>
 8026744:	687b      	ldr	r3, [r7, #4]
 8026746:	4618      	mov	r0, r3
 8026748:	3708      	adds	r7, #8
 802674a:	46bd      	mov	sp, r7
 802674c:	bd80      	pop	{r7, pc}

0802674e <_ZNSt11_Deque_baseIjSaIjEE16_Deque_impl_dataC1EOS2_>:
	_Deque_impl_data(_Deque_impl_data&& __x) noexcept
 802674e:	b5b0      	push	{r4, r5, r7, lr}
 8026750:	b08c      	sub	sp, #48	; 0x30
 8026752:	af00      	add	r7, sp, #0
 8026754:	6078      	str	r0, [r7, #4]
 8026756:	6039      	str	r1, [r7, #0]
	: _Deque_impl_data(__x)
 8026758:	6839      	ldr	r1, [r7, #0]
 802675a:	6878      	ldr	r0, [r7, #4]
 802675c:	f7ff ffd3 	bl	8026706 <_ZNSt11_Deque_baseIjSaIjEE16_Deque_impl_dataC1ERKS2_>
	{ __x = _Deque_impl_data(); }
 8026760:	f107 0308 	add.w	r3, r7, #8
 8026764:	4618      	mov	r0, r3
 8026766:	f7ff f9a4 	bl	8025ab2 <_ZNSt11_Deque_baseIjSaIjEE16_Deque_impl_dataC1Ev>
 802676a:	683b      	ldr	r3, [r7, #0]
 802676c:	461d      	mov	r5, r3
 802676e:	f107 0408 	add.w	r4, r7, #8
 8026772:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8026774:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8026776:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8026778:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 802677a:	e894 0003 	ldmia.w	r4, {r0, r1}
 802677e:	e885 0003 	stmia.w	r5, {r0, r1}
 8026782:	687b      	ldr	r3, [r7, #4]
 8026784:	4618      	mov	r0, r3
 8026786:	3730      	adds	r7, #48	; 0x30
 8026788:	46bd      	mov	sp, r7
 802678a:	bdb0      	pop	{r4, r5, r7, pc}

0802678c <_ZSt4moveIRSaIjEEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 802678c:	b480      	push	{r7}
 802678e:	b083      	sub	sp, #12
 8026790:	af00      	add	r7, sp, #0
 8026792:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8026794:	687b      	ldr	r3, [r7, #4]
 8026796:	4618      	mov	r0, r3
 8026798:	370c      	adds	r7, #12
 802679a:	46bd      	mov	sp, r7
 802679c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80267a0:	4770      	bx	lr

080267a2 <_ZSt14__copy_move_a1ILb0EPKN10BHYWrapper8BHYFrameEPS1_ET1_T0_S6_S5_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 80267a2:	b580      	push	{r7, lr}
 80267a4:	b084      	sub	sp, #16
 80267a6:	af00      	add	r7, sp, #0
 80267a8:	60f8      	str	r0, [r7, #12]
 80267aa:	60b9      	str	r1, [r7, #8]
 80267ac:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 80267ae:	687a      	ldr	r2, [r7, #4]
 80267b0:	68b9      	ldr	r1, [r7, #8]
 80267b2:	68f8      	ldr	r0, [r7, #12]
 80267b4:	f000 fa3b 	bl	8026c2e <_ZSt14__copy_move_a2ILb0EPKN10BHYWrapper8BHYFrameEPS1_ET1_T0_S6_S5_>
 80267b8:	4603      	mov	r3, r0
 80267ba:	4618      	mov	r0, r3
 80267bc:	3710      	adds	r7, #16
 80267be:	46bd      	mov	sp, r7
 80267c0:	bd80      	pop	{r7, pc}

080267c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EmIEi>:
      operator-=(difference_type __n) _GLIBCXX_NOEXCEPT
 80267c2:	b580      	push	{r7, lr}
 80267c4:	b082      	sub	sp, #8
 80267c6:	af00      	add	r7, sp, #0
 80267c8:	6078      	str	r0, [r7, #4]
 80267ca:	6039      	str	r1, [r7, #0]
      { return *this += -__n; }
 80267cc:	683b      	ldr	r3, [r7, #0]
 80267ce:	425b      	negs	r3, r3
 80267d0:	4619      	mov	r1, r3
 80267d2:	6878      	ldr	r0, [r7, #4]
 80267d4:	f7fe ffd8 	bl	8025788 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi>
 80267d8:	4603      	mov	r3, r0
 80267da:	4618      	mov	r0, r3
 80267dc:	3708      	adds	r7, #8
 80267de:	46bd      	mov	sp, r7
 80267e0:	bd80      	pop	{r7, pc}

080267e2 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS3_RS3_PS3_EEET0_T_SB_SA_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80267e2:	b580      	push	{r7, lr}
 80267e4:	b088      	sub	sp, #32
 80267e6:	af00      	add	r7, sp, #0
 80267e8:	60f8      	str	r0, [r7, #12]
 80267ea:	60b9      	str	r1, [r7, #8]
 80267ec:	607a      	str	r2, [r7, #4]
 80267ee:	603b      	str	r3, [r7, #0]
        { return std::copy(__first, __last, __result); }
 80267f0:	f107 0310 	add.w	r3, r7, #16
 80267f4:	6839      	ldr	r1, [r7, #0]
 80267f6:	4618      	mov	r0, r3
 80267f8:	f7fd fd7b 	bl	80242f2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80267fc:	68f8      	ldr	r0, [r7, #12]
 80267fe:	f107 0310 	add.w	r3, r7, #16
 8026802:	687a      	ldr	r2, [r7, #4]
 8026804:	68b9      	ldr	r1, [r7, #8]
 8026806:	f7fd feef 	bl	80245e8 <_ZSt4copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>
 802680a:	68f8      	ldr	r0, [r7, #12]
 802680c:	3720      	adds	r7, #32
 802680e:	46bd      	mov	sp, r7
 8026810:	bd80      	pop	{r7, pc}

08026812 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE22_M_reserve_map_at_backEj>:
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 8026812:	b580      	push	{r7, lr}
 8026814:	b082      	sub	sp, #8
 8026816:	af00      	add	r7, sp, #0
 8026818:	6078      	str	r0, [r7, #4]
 802681a:	6039      	str	r1, [r7, #0]
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 802681c:	683b      	ldr	r3, [r7, #0]
 802681e:	1c5a      	adds	r2, r3, #1
 8026820:	687b      	ldr	r3, [r7, #4]
 8026822:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 8026824:	6879      	ldr	r1, [r7, #4]
 8026826:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8026828:	6879      	ldr	r1, [r7, #4]
 802682a:	6809      	ldr	r1, [r1, #0]
 802682c:	1a41      	subs	r1, r0, r1
 802682e:	1089      	asrs	r1, r1, #2
 8026830:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8026832:	429a      	cmp	r2, r3
 8026834:	d904      	bls.n	8026840 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE22_M_reserve_map_at_backEj+0x2e>
	  _M_reallocate_map(__nodes_to_add, false);
 8026836:	2200      	movs	r2, #0
 8026838:	6839      	ldr	r1, [r7, #0]
 802683a:	6878      	ldr	r0, [r7, #4]
 802683c:	f7fe feec 	bl	8025618 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb>
      }
 8026840:	bf00      	nop
 8026842:	3708      	adds	r7, #8
 8026844:	46bd      	mov	sp, r7
 8026846:	bd80      	pop	{r7, pc}

08026848 <_ZSt18make_move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EESt13move_iteratorIT_ES7_>:
	      const move_iterator<_Iterator>& __x)
    { return __x + __n; }

  template<typename _Iterator>
    inline _GLIBCXX17_CONSTEXPR move_iterator<_Iterator>
    make_move_iterator(_Iterator __i)
 8026848:	b580      	push	{r7, lr}
 802684a:	b086      	sub	sp, #24
 802684c:	af00      	add	r7, sp, #0
 802684e:	6078      	str	r0, [r7, #4]
 8026850:	6039      	str	r1, [r7, #0]
    { return move_iterator<_Iterator>(std::move(__i)); }
 8026852:	6838      	ldr	r0, [r7, #0]
 8026854:	f000 f9fb 	bl	8026c4e <_ZSt4moveIRSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEONSt16remove_referenceIT_E4typeEOS8_>
 8026858:	4602      	mov	r2, r0
 802685a:	f107 0308 	add.w	r3, r7, #8
 802685e:	4611      	mov	r1, r2
 8026860:	4618      	mov	r0, r3
 8026862:	f7fd fd46 	bl	80242f2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026866:	f107 0308 	add.w	r3, r7, #8
 802686a:	4619      	mov	r1, r3
 802686c:	6878      	ldr	r0, [r7, #4]
 802686e:	f000 f9f9 	bl	8026c64 <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ES5_>
 8026872:	6878      	ldr	r0, [r7, #4]
 8026874:	3718      	adds	r7, #24
 8026876:	46bd      	mov	sp, r7
 8026878:	bd80      	pop	{r7, pc}

0802687a <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ERKS6_>:
    class move_iterator
 802687a:	b580      	push	{r7, lr}
 802687c:	b082      	sub	sp, #8
 802687e:	af00      	add	r7, sp, #0
 8026880:	6078      	str	r0, [r7, #4]
 8026882:	6039      	str	r1, [r7, #0]
 8026884:	687b      	ldr	r3, [r7, #4]
 8026886:	683a      	ldr	r2, [r7, #0]
 8026888:	4611      	mov	r1, r2
 802688a:	4618      	mov	r0, r3
 802688c:	f7fd fd31 	bl	80242f2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026890:	687b      	ldr	r3, [r7, #4]
 8026892:	4618      	mov	r0, r3
 8026894:	3708      	adds	r7, #8
 8026896:	46bd      	mov	sp, r7
 8026898:	bd80      	pop	{r7, pc}

0802689a <_ZSt22__uninitialized_copy_aISt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS3_PS3_EES6_S3_ET0_T_S9_S8_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 802689a:	b580      	push	{r7, lr}
 802689c:	b090      	sub	sp, #64	; 0x40
 802689e:	af00      	add	r7, sp, #0
 80268a0:	60f8      	str	r0, [r7, #12]
 80268a2:	60b9      	str	r1, [r7, #8]
 80268a4:	607a      	str	r2, [r7, #4]
 80268a6:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 80268a8:	f107 0310 	add.w	r3, r7, #16
 80268ac:	68b9      	ldr	r1, [r7, #8]
 80268ae:	4618      	mov	r0, r3
 80268b0:	f7ff ffe3 	bl	802687a <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ERKS6_>
 80268b4:	f107 0320 	add.w	r3, r7, #32
 80268b8:	6879      	ldr	r1, [r7, #4]
 80268ba:	4618      	mov	r0, r3
 80268bc:	f7ff ffdd 	bl	802687a <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ERKS6_>
 80268c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80268c4:	6839      	ldr	r1, [r7, #0]
 80268c6:	4618      	mov	r0, r3
 80268c8:	f7fd fd13 	bl	80242f2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80268cc:	68f8      	ldr	r0, [r7, #12]
 80268ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80268d2:	f107 0220 	add.w	r2, r7, #32
 80268d6:	f107 0110 	add.w	r1, r7, #16
 80268da:	f000 f9d6 	bl	8026c8a <_ZSt18uninitialized_copyISt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS3_PS3_EES6_ET0_T_S9_S8_>
 80268de:	68f8      	ldr	r0, [r7, #12]
 80268e0:	3740      	adds	r7, #64	; 0x40
 80268e2:	46bd      	mov	sp, r7
 80268e4:	bd80      	pop	{r7, pc}

080268e6 <_ZSt12__miter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>:
    __miter_base(_Iterator __it)
 80268e6:	b580      	push	{r7, lr}
 80268e8:	b082      	sub	sp, #8
 80268ea:	af00      	add	r7, sp, #0
 80268ec:	6078      	str	r0, [r7, #4]
 80268ee:	6039      	str	r1, [r7, #0]
    { return __it; }
 80268f0:	6839      	ldr	r1, [r7, #0]
 80268f2:	6878      	ldr	r0, [r7, #4]
 80268f4:	f7fd fcfd 	bl	80242f2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80268f8:	6878      	ldr	r0, [r7, #4]
 80268fa:	3708      	adds	r7, #8
 80268fc:	46bd      	mov	sp, r7
 80268fe:	bd80      	pop	{r7, pc}

08026900 <_ZSt13__copy_move_aILb1ESt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_ET1_T0_S7_S6_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8026900:	b580      	push	{r7, lr}
 8026902:	b0a0      	sub	sp, #128	; 0x80
 8026904:	af00      	add	r7, sp, #0
 8026906:	60f8      	str	r0, [r7, #12]
 8026908:	60b9      	str	r1, [r7, #8]
 802690a:	607a      	str	r2, [r7, #4]
 802690c:	603b      	str	r3, [r7, #0]
					     std::__niter_base(__result)));
 802690e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8026912:	68b9      	ldr	r1, [r7, #8]
 8026914:	4618      	mov	r0, r3
 8026916:	f7fd fcec 	bl	80242f2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802691a:	f107 0320 	add.w	r3, r7, #32
 802691e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8026922:	4611      	mov	r1, r2
 8026924:	4618      	mov	r0, r3
 8026926:	f7ff fa09 	bl	8025d3c <_ZSt12__niter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 802692a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 802692e:	6879      	ldr	r1, [r7, #4]
 8026930:	4618      	mov	r0, r3
 8026932:	f7fd fcde 	bl	80242f2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026936:	f107 0340 	add.w	r3, r7, #64	; 0x40
 802693a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 802693e:	4611      	mov	r1, r2
 8026940:	4618      	mov	r0, r3
 8026942:	f7ff f9fb 	bl	8025d3c <_ZSt12__niter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 8026946:	f107 0370 	add.w	r3, r7, #112	; 0x70
 802694a:	6839      	ldr	r1, [r7, #0]
 802694c:	4618      	mov	r0, r3
 802694e:	f7fd fcd0 	bl	80242f2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026952:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8026956:	f107 0270 	add.w	r2, r7, #112	; 0x70
 802695a:	4611      	mov	r1, r2
 802695c:	4618      	mov	r0, r3
 802695e:	f7ff f9ed 	bl	8025d3c <_ZSt12__niter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 8026962:	f107 0010 	add.w	r0, r7, #16
 8026966:	f107 0360 	add.w	r3, r7, #96	; 0x60
 802696a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 802696e:	f107 0120 	add.w	r1, r7, #32
 8026972:	f000 f9b3 	bl	8026cdc <_ZSt14__copy_move_a1ILb1EN10BHYWrapper8BHYFrameERS1_PS1_S1_ESt15_Deque_iteratorIT3_RS5_PS5_ES4_IT0_T1_T2_ESC_S8_>
 8026976:	68fb      	ldr	r3, [r7, #12]
 8026978:	f107 0210 	add.w	r2, r7, #16
 802697c:	6839      	ldr	r1, [r7, #0]
 802697e:	4618      	mov	r0, r3
 8026980:	f7ff fa50 	bl	8025e24 <_ZSt12__niter_wrapISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_RKS6_S6_>
    }
 8026984:	68f8      	ldr	r0, [r7, #12]
 8026986:	3780      	adds	r7, #128	; 0x80
 8026988:	46bd      	mov	sp, r7
 802698a:	bd80      	pop	{r7, pc}

0802698c <_ZSt22__copy_move_backward_aILb1ESt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_ET1_T0_S7_S6_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 802698c:	b580      	push	{r7, lr}
 802698e:	b0a0      	sub	sp, #128	; 0x80
 8026990:	af00      	add	r7, sp, #0
 8026992:	60f8      	str	r0, [r7, #12]
 8026994:	60b9      	str	r1, [r7, #8]
 8026996:	607a      	str	r2, [r7, #4]
 8026998:	603b      	str	r3, [r7, #0]
		   std::__niter_base(__result)));
 802699a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802699e:	68b9      	ldr	r1, [r7, #8]
 80269a0:	4618      	mov	r0, r3
 80269a2:	f7fd fca6 	bl	80242f2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80269a6:	f107 0320 	add.w	r3, r7, #32
 80269aa:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80269ae:	4611      	mov	r1, r2
 80269b0:	4618      	mov	r0, r3
 80269b2:	f7ff f9c3 	bl	8025d3c <_ZSt12__niter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 80269b6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80269ba:	6879      	ldr	r1, [r7, #4]
 80269bc:	4618      	mov	r0, r3
 80269be:	f7fd fc98 	bl	80242f2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80269c2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80269c6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80269ca:	4611      	mov	r1, r2
 80269cc:	4618      	mov	r0, r3
 80269ce:	f7ff f9b5 	bl	8025d3c <_ZSt12__niter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 80269d2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80269d6:	6839      	ldr	r1, [r7, #0]
 80269d8:	4618      	mov	r0, r3
 80269da:	f7fd fc8a 	bl	80242f2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80269de:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80269e2:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80269e6:	4611      	mov	r1, r2
 80269e8:	4618      	mov	r0, r3
 80269ea:	f7ff f9a7 	bl	8025d3c <_ZSt12__niter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 80269ee:	f107 0010 	add.w	r0, r7, #16
 80269f2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80269f6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80269fa:	f107 0120 	add.w	r1, r7, #32
 80269fe:	f000 f993 	bl	8026d28 <_ZSt23__copy_move_backward_a1ILb1EN10BHYWrapper8BHYFrameERS1_PS1_S1_ESt15_Deque_iteratorIT3_RS5_PS5_ES4_IT0_T1_T2_ESC_S8_>
 8026a02:	68fb      	ldr	r3, [r7, #12]
 8026a04:	f107 0210 	add.w	r2, r7, #16
 8026a08:	6839      	ldr	r1, [r7, #0]
 8026a0a:	4618      	mov	r0, r3
 8026a0c:	f7ff fa0a 	bl	8025e24 <_ZSt12__niter_wrapISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_RKS6_S6_>
    }
 8026a10:	68f8      	ldr	r0, [r7, #12]
 8026a12:	3780      	adds	r7, #128	; 0x80
 8026a14:	46bd      	mov	sp, r7
 8026a16:	bd80      	pop	{r7, pc}

08026a18 <_ZNK9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8026a18:	b580      	push	{r7, lr}
 8026a1a:	b082      	sub	sp, #8
 8026a1c:	af00      	add	r7, sp, #0
 8026a1e:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8026a20:	6878      	ldr	r0, [r7, #4]
 8026a22:	f000 f857 	bl	8026ad4 <_ZNK9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE11_M_max_sizeEv>
 8026a26:	4603      	mov	r3, r0
 8026a28:	4618      	mov	r0, r3
 8026a2a:	3708      	adds	r7, #8
 8026a2c:	46bd      	mov	sp, r7
 8026a2e:	bd80      	pop	{r7, pc}

08026a30 <_ZSt12__miter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>:
    __miter_base(_Iterator __it)
 8026a30:	b480      	push	{r7}
 8026a32:	b083      	sub	sp, #12
 8026a34:	af00      	add	r7, sp, #0
 8026a36:	6078      	str	r0, [r7, #4]
    { return __it; }
 8026a38:	687b      	ldr	r3, [r7, #4]
 8026a3a:	4618      	mov	r0, r3
 8026a3c:	370c      	adds	r7, #12
 8026a3e:	46bd      	mov	sp, r7
 8026a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026a44:	4770      	bx	lr

08026a46 <_ZSt13__copy_move_aILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8026a46:	b5b0      	push	{r4, r5, r7, lr}
 8026a48:	b084      	sub	sp, #16
 8026a4a:	af00      	add	r7, sp, #0
 8026a4c:	60f8      	str	r0, [r7, #12]
 8026a4e:	60b9      	str	r1, [r7, #8]
 8026a50:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8026a52:	68f8      	ldr	r0, [r7, #12]
 8026a54:	f000 f98e 	bl	8026d74 <_ZSt12__niter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 8026a58:	4604      	mov	r4, r0
 8026a5a:	68b8      	ldr	r0, [r7, #8]
 8026a5c:	f000 f98a 	bl	8026d74 <_ZSt12__niter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 8026a60:	4605      	mov	r5, r0
 8026a62:	687b      	ldr	r3, [r7, #4]
 8026a64:	4618      	mov	r0, r3
 8026a66:	f000 f985 	bl	8026d74 <_ZSt12__niter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 8026a6a:	4603      	mov	r3, r0
 8026a6c:	461a      	mov	r2, r3
 8026a6e:	4629      	mov	r1, r5
 8026a70:	4620      	mov	r0, r4
 8026a72:	f000 f98a 	bl	8026d8a <_ZSt14__copy_move_a1ILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>
 8026a76:	4602      	mov	r2, r0
 8026a78:	1d3b      	adds	r3, r7, #4
 8026a7a:	4611      	mov	r1, r2
 8026a7c:	4618      	mov	r0, r3
 8026a7e:	f000 f994 	bl	8026daa <_ZSt12__niter_wrapIPPN10BHYWrapper8BHYFrameEET_RKS4_S4_>
 8026a82:	4603      	mov	r3, r0
    }
 8026a84:	4618      	mov	r0, r3
 8026a86:	3710      	adds	r7, #16
 8026a88:	46bd      	mov	sp, r7
 8026a8a:	bdb0      	pop	{r4, r5, r7, pc}

08026a8c <_ZSt22__copy_move_backward_aILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 8026a8c:	b5b0      	push	{r4, r5, r7, lr}
 8026a8e:	b084      	sub	sp, #16
 8026a90:	af00      	add	r7, sp, #0
 8026a92:	60f8      	str	r0, [r7, #12]
 8026a94:	60b9      	str	r1, [r7, #8]
 8026a96:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8026a98:	68f8      	ldr	r0, [r7, #12]
 8026a9a:	f000 f96b 	bl	8026d74 <_ZSt12__niter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 8026a9e:	4604      	mov	r4, r0
 8026aa0:	68b8      	ldr	r0, [r7, #8]
 8026aa2:	f000 f967 	bl	8026d74 <_ZSt12__niter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 8026aa6:	4605      	mov	r5, r0
 8026aa8:	687b      	ldr	r3, [r7, #4]
 8026aaa:	4618      	mov	r0, r3
 8026aac:	f000 f962 	bl	8026d74 <_ZSt12__niter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 8026ab0:	4603      	mov	r3, r0
 8026ab2:	461a      	mov	r2, r3
 8026ab4:	4629      	mov	r1, r5
 8026ab6:	4620      	mov	r0, r4
 8026ab8:	f000 f983 	bl	8026dc2 <_ZSt23__copy_move_backward_a1ILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>
 8026abc:	4602      	mov	r2, r0
 8026abe:	1d3b      	adds	r3, r7, #4
 8026ac0:	4611      	mov	r1, r2
 8026ac2:	4618      	mov	r0, r3
 8026ac4:	f000 f971 	bl	8026daa <_ZSt12__niter_wrapIPPN10BHYWrapper8BHYFrameEET_RKS4_S4_>
 8026ac8:	4603      	mov	r3, r0
    }
 8026aca:	4618      	mov	r0, r3
 8026acc:	3710      	adds	r7, #16
 8026ace:	46bd      	mov	sp, r7
 8026ad0:	bdb0      	pop	{r4, r5, r7, pc}
	...

08026ad4 <_ZNK9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8026ad4:	b480      	push	{r7}
 8026ad6:	b083      	sub	sp, #12
 8026ad8:	af00      	add	r7, sp, #0
 8026ada:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8026adc:	4b03      	ldr	r3, [pc, #12]	; (8026aec <_ZNK9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE11_M_max_sizeEv+0x18>)
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8026ade:	4618      	mov	r0, r3
 8026ae0:	370c      	adds	r7, #12
 8026ae2:	46bd      	mov	sp, r7
 8026ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026ae8:	4770      	bx	lr
 8026aea:	bf00      	nop
 8026aec:	06666666 	.word	0x06666666

08026af0 <_ZNSt16allocator_traitsISaIjEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8026af0:	b580      	push	{r7, lr}
 8026af2:	b082      	sub	sp, #8
 8026af4:	af00      	add	r7, sp, #0
 8026af6:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8026af8:	6878      	ldr	r0, [r7, #4]
 8026afa:	f000 f972 	bl	8026de2 <_ZNK9__gnu_cxx13new_allocatorIjE8max_sizeEv>
 8026afe:	4603      	mov	r3, r0
      }
 8026b00:	4618      	mov	r0, r3
 8026b02:	3708      	adds	r7, #8
 8026b04:	46bd      	mov	sp, r7
 8026b06:	bd80      	pop	{r7, pc}

08026b08 <_ZSt4copyIPPjS1_ET0_T_S3_S2_>:
    copy(_II __first, _II __last, _OI __result)
 8026b08:	b590      	push	{r4, r7, lr}
 8026b0a:	b085      	sub	sp, #20
 8026b0c:	af00      	add	r7, sp, #0
 8026b0e:	60f8      	str	r0, [r7, #12]
 8026b10:	60b9      	str	r1, [r7, #8]
 8026b12:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8026b14:	68f8      	ldr	r0, [r7, #12]
 8026b16:	f000 f970 	bl	8026dfa <_ZSt12__miter_baseIPPjET_S2_>
 8026b1a:	4604      	mov	r4, r0
 8026b1c:	68b8      	ldr	r0, [r7, #8]
 8026b1e:	f000 f96c 	bl	8026dfa <_ZSt12__miter_baseIPPjET_S2_>
 8026b22:	4603      	mov	r3, r0
 8026b24:	687a      	ldr	r2, [r7, #4]
 8026b26:	4619      	mov	r1, r3
 8026b28:	4620      	mov	r0, r4
 8026b2a:	f000 f971 	bl	8026e10 <_ZSt13__copy_move_aILb0EPPjS1_ET1_T0_S3_S2_>
 8026b2e:	4603      	mov	r3, r0
    }
 8026b30:	4618      	mov	r0, r3
 8026b32:	3714      	adds	r7, #20
 8026b34:	46bd      	mov	sp, r7
 8026b36:	bd90      	pop	{r4, r7, pc}

08026b38 <_ZSt13copy_backwardIPPjS1_ET0_T_S3_S2_>:
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8026b38:	b590      	push	{r4, r7, lr}
 8026b3a:	b085      	sub	sp, #20
 8026b3c:	af00      	add	r7, sp, #0
 8026b3e:	60f8      	str	r0, [r7, #12]
 8026b40:	60b9      	str	r1, [r7, #8]
 8026b42:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8026b44:	68f8      	ldr	r0, [r7, #12]
 8026b46:	f000 f958 	bl	8026dfa <_ZSt12__miter_baseIPPjET_S2_>
 8026b4a:	4604      	mov	r4, r0
 8026b4c:	68b8      	ldr	r0, [r7, #8]
 8026b4e:	f000 f954 	bl	8026dfa <_ZSt12__miter_baseIPPjET_S2_>
 8026b52:	4603      	mov	r3, r0
 8026b54:	687a      	ldr	r2, [r7, #4]
 8026b56:	4619      	mov	r1, r3
 8026b58:	4620      	mov	r0, r4
 8026b5a:	f000 f97c 	bl	8026e56 <_ZSt22__copy_move_backward_aILb0EPPjS1_ET1_T0_S3_S2_>
 8026b5e:	4603      	mov	r3, r0
    }
 8026b60:	4618      	mov	r0, r3
 8026b62:	3714      	adds	r7, #20
 8026b64:	46bd      	mov	sp, r7
 8026b66:	bd90      	pop	{r4, r7, pc}

08026b68 <_ZN9__gnu_cxx13new_allocatorIjE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8026b68:	b580      	push	{r7, lr}
 8026b6a:	b084      	sub	sp, #16
 8026b6c:	af00      	add	r7, sp, #0
 8026b6e:	60f8      	str	r0, [r7, #12]
 8026b70:	60b9      	str	r1, [r7, #8]
 8026b72:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8026b74:	68f8      	ldr	r0, [r7, #12]
 8026b76:	f000 f991 	bl	8026e9c <_ZNK9__gnu_cxx13new_allocatorIjE11_M_max_sizeEv>
 8026b7a:	4602      	mov	r2, r0
 8026b7c:	68bb      	ldr	r3, [r7, #8]
 8026b7e:	4293      	cmp	r3, r2
 8026b80:	bf8c      	ite	hi
 8026b82:	2301      	movhi	r3, #1
 8026b84:	2300      	movls	r3, #0
 8026b86:	b2db      	uxtb	r3, r3
 8026b88:	2b00      	cmp	r3, #0
 8026b8a:	d001      	beq.n	8026b90 <_ZN9__gnu_cxx13new_allocatorIjE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8026b8c:	f015 f875 	bl	803bc7a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8026b90:	68bb      	ldr	r3, [r7, #8]
 8026b92:	009b      	lsls	r3, r3, #2
 8026b94:	4618      	mov	r0, r3
 8026b96:	f015 f85f 	bl	803bc58 <_Znwj>
 8026b9a:	4603      	mov	r3, r0
      }
 8026b9c:	4618      	mov	r0, r3
 8026b9e:	3710      	adds	r7, #16
 8026ba0:	46bd      	mov	sp, r7
 8026ba2:	bd80      	pop	{r7, pc}

08026ba4 <_ZN9__gnu_cxx13new_allocatorIjE10deallocateEPjj>:
      deallocate(_Tp* __p, size_type __t)
 8026ba4:	b580      	push	{r7, lr}
 8026ba6:	b084      	sub	sp, #16
 8026ba8:	af00      	add	r7, sp, #0
 8026baa:	60f8      	str	r0, [r7, #12]
 8026bac:	60b9      	str	r1, [r7, #8]
 8026bae:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8026bb0:	687b      	ldr	r3, [r7, #4]
 8026bb2:	009b      	lsls	r3, r3, #2
 8026bb4:	4619      	mov	r1, r3
 8026bb6:	68b8      	ldr	r0, [r7, #8]
 8026bb8:	f015 f84c 	bl	803bc54 <_ZdlPvj>
      }
 8026bbc:	bf00      	nop
 8026bbe:	3710      	adds	r7, #16
 8026bc0:	46bd      	mov	sp, r7
 8026bc2:	bd80      	pop	{r7, pc}

08026bc4 <_ZNK9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8026bc4:	b480      	push	{r7}
 8026bc6:	b083      	sub	sp, #12
 8026bc8:	af00      	add	r7, sp, #0
 8026bca:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8026bcc:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8026bd0:	4618      	mov	r0, r3
 8026bd2:	370c      	adds	r7, #12
 8026bd4:	46bd      	mov	sp, r7
 8026bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026bda:	4770      	bx	lr

08026bdc <_ZN9__gnu_cxx13new_allocatorIPjE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8026bdc:	b580      	push	{r7, lr}
 8026bde:	b084      	sub	sp, #16
 8026be0:	af00      	add	r7, sp, #0
 8026be2:	60f8      	str	r0, [r7, #12]
 8026be4:	60b9      	str	r1, [r7, #8]
 8026be6:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8026be8:	68f8      	ldr	r0, [r7, #12]
 8026bea:	f000 f963 	bl	8026eb4 <_ZNK9__gnu_cxx13new_allocatorIPjE11_M_max_sizeEv>
 8026bee:	4602      	mov	r2, r0
 8026bf0:	68bb      	ldr	r3, [r7, #8]
 8026bf2:	4293      	cmp	r3, r2
 8026bf4:	bf8c      	ite	hi
 8026bf6:	2301      	movhi	r3, #1
 8026bf8:	2300      	movls	r3, #0
 8026bfa:	b2db      	uxtb	r3, r3
 8026bfc:	2b00      	cmp	r3, #0
 8026bfe:	d001      	beq.n	8026c04 <_ZN9__gnu_cxx13new_allocatorIPjE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8026c00:	f015 f83b 	bl	803bc7a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8026c04:	68bb      	ldr	r3, [r7, #8]
 8026c06:	009b      	lsls	r3, r3, #2
 8026c08:	4618      	mov	r0, r3
 8026c0a:	f015 f825 	bl	803bc58 <_Znwj>
 8026c0e:	4603      	mov	r3, r0
      }
 8026c10:	4618      	mov	r0, r3
 8026c12:	3710      	adds	r7, #16
 8026c14:	46bd      	mov	sp, r7
 8026c16:	bd80      	pop	{r7, pc}

08026c18 <_ZN9__gnu_cxx13new_allocatorIPjEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8026c18:	b480      	push	{r7}
 8026c1a:	b083      	sub	sp, #12
 8026c1c:	af00      	add	r7, sp, #0
 8026c1e:	6078      	str	r0, [r7, #4]
 8026c20:	687b      	ldr	r3, [r7, #4]
 8026c22:	4618      	mov	r0, r3
 8026c24:	370c      	adds	r7, #12
 8026c26:	46bd      	mov	sp, r7
 8026c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026c2c:	4770      	bx	lr

08026c2e <_ZSt14__copy_move_a2ILb0EPKN10BHYWrapper8BHYFrameEPS1_ET1_T0_S6_S5_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8026c2e:	b580      	push	{r7, lr}
 8026c30:	b084      	sub	sp, #16
 8026c32:	af00      	add	r7, sp, #0
 8026c34:	60f8      	str	r0, [r7, #12]
 8026c36:	60b9      	str	r1, [r7, #8]
 8026c38:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8026c3a:	687a      	ldr	r2, [r7, #4]
 8026c3c:	68b9      	ldr	r1, [r7, #8]
 8026c3e:	68f8      	ldr	r0, [r7, #12]
 8026c40:	f000 f944 	bl	8026ecc <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_>
 8026c44:	4603      	mov	r3, r0
    }
 8026c46:	4618      	mov	r0, r3
 8026c48:	3710      	adds	r7, #16
 8026c4a:	46bd      	mov	sp, r7
 8026c4c:	bd80      	pop	{r7, pc}

08026c4e <_ZSt4moveIRSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 8026c4e:	b480      	push	{r7}
 8026c50:	b083      	sub	sp, #12
 8026c52:	af00      	add	r7, sp, #0
 8026c54:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8026c56:	687b      	ldr	r3, [r7, #4]
 8026c58:	4618      	mov	r0, r3
 8026c5a:	370c      	adds	r7, #12
 8026c5c:	46bd      	mov	sp, r7
 8026c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026c62:	4770      	bx	lr

08026c64 <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ES5_>:
      move_iterator(iterator_type __i)
 8026c64:	b590      	push	{r4, r7, lr}
 8026c66:	b083      	sub	sp, #12
 8026c68:	af00      	add	r7, sp, #0
 8026c6a:	6078      	str	r0, [r7, #4]
 8026c6c:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 8026c6e:	687c      	ldr	r4, [r7, #4]
 8026c70:	6838      	ldr	r0, [r7, #0]
 8026c72:	f7ff ffec 	bl	8026c4e <_ZSt4moveIRSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEONSt16remove_referenceIT_E4typeEOS8_>
 8026c76:	4603      	mov	r3, r0
 8026c78:	4619      	mov	r1, r3
 8026c7a:	4620      	mov	r0, r4
 8026c7c:	f7fd fb39 	bl	80242f2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026c80:	687b      	ldr	r3, [r7, #4]
 8026c82:	4618      	mov	r0, r3
 8026c84:	370c      	adds	r7, #12
 8026c86:	46bd      	mov	sp, r7
 8026c88:	bd90      	pop	{r4, r7, pc}

08026c8a <_ZSt18uninitialized_copyISt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS3_PS3_EES6_ET0_T_S9_S8_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8026c8a:	b580      	push	{r7, lr}
 8026c8c:	b092      	sub	sp, #72	; 0x48
 8026c8e:	af00      	add	r7, sp, #0
 8026c90:	60f8      	str	r0, [r7, #12]
 8026c92:	60b9      	str	r1, [r7, #8]
 8026c94:	607a      	str	r2, [r7, #4]
 8026c96:	603b      	str	r3, [r7, #0]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8026c98:	2301      	movs	r3, #1
 8026c9a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	__uninit_copy(__first, __last, __result);
 8026c9e:	f107 0314 	add.w	r3, r7, #20
 8026ca2:	68b9      	ldr	r1, [r7, #8]
 8026ca4:	4618      	mov	r0, r3
 8026ca6:	f7ff fde8 	bl	802687a <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ERKS6_>
 8026caa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8026cae:	6879      	ldr	r1, [r7, #4]
 8026cb0:	4618      	mov	r0, r3
 8026cb2:	f7ff fde2 	bl	802687a <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ERKS6_>
 8026cb6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8026cba:	6839      	ldr	r1, [r7, #0]
 8026cbc:	4618      	mov	r0, r3
 8026cbe:	f7fd fb18 	bl	80242f2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026cc2:	68f8      	ldr	r0, [r7, #12]
 8026cc4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8026cc8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8026ccc:	f107 0114 	add.w	r1, r7, #20
 8026cd0:	f000 f926 	bl	8026f20 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS5_PS5_EES8_EET0_T_SB_SA_>
    }
 8026cd4:	68f8      	ldr	r0, [r7, #12]
 8026cd6:	3748      	adds	r7, #72	; 0x48
 8026cd8:	46bd      	mov	sp, r7
 8026cda:	bd80      	pop	{r7, pc}

08026cdc <_ZSt14__copy_move_a1ILb1EN10BHYWrapper8BHYFrameERS1_PS1_S1_ESt15_Deque_iteratorIT3_RS5_PS5_ES4_IT0_T1_T2_ESC_S8_>:
    __copy_move_a1(_GLIBCXX_STD_C::_Deque_iterator<_ITp, _IRef, _IPtr> __first,
 8026cdc:	b580      	push	{r7, lr}
 8026cde:	b090      	sub	sp, #64	; 0x40
 8026ce0:	af00      	add	r7, sp, #0
 8026ce2:	60f8      	str	r0, [r7, #12]
 8026ce4:	60b9      	str	r1, [r7, #8]
 8026ce6:	607a      	str	r2, [r7, #4]
 8026ce8:	603b      	str	r3, [r7, #0]
    { return __copy_move_dit<_IsMove>(__first, __last, __result); }
 8026cea:	f107 0310 	add.w	r3, r7, #16
 8026cee:	68b9      	ldr	r1, [r7, #8]
 8026cf0:	4618      	mov	r0, r3
 8026cf2:	f7fd fafe 	bl	80242f2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026cf6:	f107 0320 	add.w	r3, r7, #32
 8026cfa:	6879      	ldr	r1, [r7, #4]
 8026cfc:	4618      	mov	r0, r3
 8026cfe:	f7fd faf8 	bl	80242f2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026d02:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8026d06:	6839      	ldr	r1, [r7, #0]
 8026d08:	4618      	mov	r0, r3
 8026d0a:	f7fd faf2 	bl	80242f2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026d0e:	68f8      	ldr	r0, [r7, #12]
 8026d10:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8026d14:	f107 0220 	add.w	r2, r7, #32
 8026d18:	f107 0110 	add.w	r1, r7, #16
 8026d1c:	f000 f926 	bl	8026f6c <_ZSt15__copy_move_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_>
 8026d20:	68f8      	ldr	r0, [r7, #12]
 8026d22:	3740      	adds	r7, #64	; 0x40
 8026d24:	46bd      	mov	sp, r7
 8026d26:	bd80      	pop	{r7, pc}

08026d28 <_ZSt23__copy_move_backward_a1ILb1EN10BHYWrapper8BHYFrameERS1_PS1_S1_ESt15_Deque_iteratorIT3_RS5_PS5_ES4_IT0_T1_T2_ESC_S8_>:
    { return __copy_move_backward_dit<_IsMove>(__first, __last, __result); }

  template<bool _IsMove,
	   typename _ITp, typename _IRef, typename _IPtr, typename _OTp>
    _GLIBCXX_STD_C::_Deque_iterator<_OTp, _OTp&, _OTp*>
    __copy_move_backward_a1(
 8026d28:	b580      	push	{r7, lr}
 8026d2a:	b090      	sub	sp, #64	; 0x40
 8026d2c:	af00      	add	r7, sp, #0
 8026d2e:	60f8      	str	r0, [r7, #12]
 8026d30:	60b9      	str	r1, [r7, #8]
 8026d32:	607a      	str	r2, [r7, #4]
 8026d34:	603b      	str	r3, [r7, #0]
		_GLIBCXX_STD_C::_Deque_iterator<_ITp, _IRef, _IPtr> __first,
		_GLIBCXX_STD_C::_Deque_iterator<_ITp, _IRef, _IPtr> __last,
		_GLIBCXX_STD_C::_Deque_iterator<_OTp, _OTp&, _OTp*> __result)
    { return __copy_move_backward_dit<_IsMove>(__first, __last, __result); }
 8026d36:	f107 0310 	add.w	r3, r7, #16
 8026d3a:	68b9      	ldr	r1, [r7, #8]
 8026d3c:	4618      	mov	r0, r3
 8026d3e:	f7fd fad8 	bl	80242f2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026d42:	f107 0320 	add.w	r3, r7, #32
 8026d46:	6879      	ldr	r1, [r7, #4]
 8026d48:	4618      	mov	r0, r3
 8026d4a:	f7fd fad2 	bl	80242f2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026d4e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8026d52:	6839      	ldr	r1, [r7, #0]
 8026d54:	4618      	mov	r0, r3
 8026d56:	f7fd facc 	bl	80242f2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026d5a:	68f8      	ldr	r0, [r7, #12]
 8026d5c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8026d60:	f107 0220 	add.w	r2, r7, #32
 8026d64:	f107 0110 	add.w	r1, r7, #16
 8026d68:	f000 f97b 	bl	8027062 <_ZSt24__copy_move_backward_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_>
 8026d6c:	68f8      	ldr	r0, [r7, #12]
 8026d6e:	3740      	adds	r7, #64	; 0x40
 8026d70:	46bd      	mov	sp, r7
 8026d72:	bd80      	pop	{r7, pc}

08026d74 <_ZSt12__niter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>:
    __niter_base(_Iterator __it)
 8026d74:	b480      	push	{r7}
 8026d76:	b083      	sub	sp, #12
 8026d78:	af00      	add	r7, sp, #0
 8026d7a:	6078      	str	r0, [r7, #4]
    { return __it; }
 8026d7c:	687b      	ldr	r3, [r7, #4]
 8026d7e:	4618      	mov	r0, r3
 8026d80:	370c      	adds	r7, #12
 8026d82:	46bd      	mov	sp, r7
 8026d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026d88:	4770      	bx	lr

08026d8a <_ZSt14__copy_move_a1ILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8026d8a:	b580      	push	{r7, lr}
 8026d8c:	b084      	sub	sp, #16
 8026d8e:	af00      	add	r7, sp, #0
 8026d90:	60f8      	str	r0, [r7, #12]
 8026d92:	60b9      	str	r1, [r7, #8]
 8026d94:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8026d96:	687a      	ldr	r2, [r7, #4]
 8026d98:	68b9      	ldr	r1, [r7, #8]
 8026d9a:	68f8      	ldr	r0, [r7, #12]
 8026d9c:	f000 f9dc 	bl	8027158 <_ZSt14__copy_move_a2ILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>
 8026da0:	4603      	mov	r3, r0
 8026da2:	4618      	mov	r0, r3
 8026da4:	3710      	adds	r7, #16
 8026da6:	46bd      	mov	sp, r7
 8026da8:	bd80      	pop	{r7, pc}

08026daa <_ZSt12__niter_wrapIPPN10BHYWrapper8BHYFrameEET_RKS4_S4_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8026daa:	b480      	push	{r7}
 8026dac:	b083      	sub	sp, #12
 8026dae:	af00      	add	r7, sp, #0
 8026db0:	6078      	str	r0, [r7, #4]
 8026db2:	6039      	str	r1, [r7, #0]
    { return __res; }
 8026db4:	683b      	ldr	r3, [r7, #0]
 8026db6:	4618      	mov	r0, r3
 8026db8:	370c      	adds	r7, #12
 8026dba:	46bd      	mov	sp, r7
 8026dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026dc0:	4770      	bx	lr

08026dc2 <_ZSt23__copy_move_backward_a1ILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 8026dc2:	b580      	push	{r7, lr}
 8026dc4:	b084      	sub	sp, #16
 8026dc6:	af00      	add	r7, sp, #0
 8026dc8:	60f8      	str	r0, [r7, #12]
 8026dca:	60b9      	str	r1, [r7, #8]
 8026dcc:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 8026dce:	687a      	ldr	r2, [r7, #4]
 8026dd0:	68b9      	ldr	r1, [r7, #8]
 8026dd2:	68f8      	ldr	r0, [r7, #12]
 8026dd4:	f000 f9d0 	bl	8027178 <_ZSt23__copy_move_backward_a2ILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>
 8026dd8:	4603      	mov	r3, r0
 8026dda:	4618      	mov	r0, r3
 8026ddc:	3710      	adds	r7, #16
 8026dde:	46bd      	mov	sp, r7
 8026de0:	bd80      	pop	{r7, pc}

08026de2 <_ZNK9__gnu_cxx13new_allocatorIjE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8026de2:	b580      	push	{r7, lr}
 8026de4:	b082      	sub	sp, #8
 8026de6:	af00      	add	r7, sp, #0
 8026de8:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8026dea:	6878      	ldr	r0, [r7, #4]
 8026dec:	f000 f856 	bl	8026e9c <_ZNK9__gnu_cxx13new_allocatorIjE11_M_max_sizeEv>
 8026df0:	4603      	mov	r3, r0
 8026df2:	4618      	mov	r0, r3
 8026df4:	3708      	adds	r7, #8
 8026df6:	46bd      	mov	sp, r7
 8026df8:	bd80      	pop	{r7, pc}

08026dfa <_ZSt12__miter_baseIPPjET_S2_>:
    __miter_base(_Iterator __it)
 8026dfa:	b480      	push	{r7}
 8026dfc:	b083      	sub	sp, #12
 8026dfe:	af00      	add	r7, sp, #0
 8026e00:	6078      	str	r0, [r7, #4]
    { return __it; }
 8026e02:	687b      	ldr	r3, [r7, #4]
 8026e04:	4618      	mov	r0, r3
 8026e06:	370c      	adds	r7, #12
 8026e08:	46bd      	mov	sp, r7
 8026e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026e0e:	4770      	bx	lr

08026e10 <_ZSt13__copy_move_aILb0EPPjS1_ET1_T0_S3_S2_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8026e10:	b5b0      	push	{r4, r5, r7, lr}
 8026e12:	b084      	sub	sp, #16
 8026e14:	af00      	add	r7, sp, #0
 8026e16:	60f8      	str	r0, [r7, #12]
 8026e18:	60b9      	str	r1, [r7, #8]
 8026e1a:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8026e1c:	68f8      	ldr	r0, [r7, #12]
 8026e1e:	f000 f9bb 	bl	8027198 <_ZSt12__niter_baseIPPjET_S2_>
 8026e22:	4604      	mov	r4, r0
 8026e24:	68b8      	ldr	r0, [r7, #8]
 8026e26:	f000 f9b7 	bl	8027198 <_ZSt12__niter_baseIPPjET_S2_>
 8026e2a:	4605      	mov	r5, r0
 8026e2c:	687b      	ldr	r3, [r7, #4]
 8026e2e:	4618      	mov	r0, r3
 8026e30:	f000 f9b2 	bl	8027198 <_ZSt12__niter_baseIPPjET_S2_>
 8026e34:	4603      	mov	r3, r0
 8026e36:	461a      	mov	r2, r3
 8026e38:	4629      	mov	r1, r5
 8026e3a:	4620      	mov	r0, r4
 8026e3c:	f000 f9b7 	bl	80271ae <_ZSt14__copy_move_a1ILb0EPPjS1_ET1_T0_S3_S2_>
 8026e40:	4602      	mov	r2, r0
 8026e42:	1d3b      	adds	r3, r7, #4
 8026e44:	4611      	mov	r1, r2
 8026e46:	4618      	mov	r0, r3
 8026e48:	f000 f9c1 	bl	80271ce <_ZSt12__niter_wrapIPPjET_RKS2_S2_>
 8026e4c:	4603      	mov	r3, r0
    }
 8026e4e:	4618      	mov	r0, r3
 8026e50:	3710      	adds	r7, #16
 8026e52:	46bd      	mov	sp, r7
 8026e54:	bdb0      	pop	{r4, r5, r7, pc}

08026e56 <_ZSt22__copy_move_backward_aILb0EPPjS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 8026e56:	b5b0      	push	{r4, r5, r7, lr}
 8026e58:	b084      	sub	sp, #16
 8026e5a:	af00      	add	r7, sp, #0
 8026e5c:	60f8      	str	r0, [r7, #12]
 8026e5e:	60b9      	str	r1, [r7, #8]
 8026e60:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8026e62:	68f8      	ldr	r0, [r7, #12]
 8026e64:	f000 f998 	bl	8027198 <_ZSt12__niter_baseIPPjET_S2_>
 8026e68:	4604      	mov	r4, r0
 8026e6a:	68b8      	ldr	r0, [r7, #8]
 8026e6c:	f000 f994 	bl	8027198 <_ZSt12__niter_baseIPPjET_S2_>
 8026e70:	4605      	mov	r5, r0
 8026e72:	687b      	ldr	r3, [r7, #4]
 8026e74:	4618      	mov	r0, r3
 8026e76:	f000 f98f 	bl	8027198 <_ZSt12__niter_baseIPPjET_S2_>
 8026e7a:	4603      	mov	r3, r0
 8026e7c:	461a      	mov	r2, r3
 8026e7e:	4629      	mov	r1, r5
 8026e80:	4620      	mov	r0, r4
 8026e82:	f000 f9b0 	bl	80271e6 <_ZSt23__copy_move_backward_a1ILb0EPPjS1_ET1_T0_S3_S2_>
 8026e86:	4602      	mov	r2, r0
 8026e88:	1d3b      	adds	r3, r7, #4
 8026e8a:	4611      	mov	r1, r2
 8026e8c:	4618      	mov	r0, r3
 8026e8e:	f000 f99e 	bl	80271ce <_ZSt12__niter_wrapIPPjET_RKS2_S2_>
 8026e92:	4603      	mov	r3, r0
    }
 8026e94:	4618      	mov	r0, r3
 8026e96:	3710      	adds	r7, #16
 8026e98:	46bd      	mov	sp, r7
 8026e9a:	bdb0      	pop	{r4, r5, r7, pc}

08026e9c <_ZNK9__gnu_cxx13new_allocatorIjE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8026e9c:	b480      	push	{r7}
 8026e9e:	b083      	sub	sp, #12
 8026ea0:	af00      	add	r7, sp, #0
 8026ea2:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8026ea4:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8026ea8:	4618      	mov	r0, r3
 8026eaa:	370c      	adds	r7, #12
 8026eac:	46bd      	mov	sp, r7
 8026eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026eb2:	4770      	bx	lr

08026eb4 <_ZNK9__gnu_cxx13new_allocatorIPjE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8026eb4:	b480      	push	{r7}
 8026eb6:	b083      	sub	sp, #12
 8026eb8:	af00      	add	r7, sp, #0
 8026eba:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8026ebc:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8026ec0:	4618      	mov	r0, r3
 8026ec2:	370c      	adds	r7, #12
 8026ec4:	46bd      	mov	sp, r7
 8026ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026eca:	4770      	bx	lr

08026ecc <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8026ecc:	b580      	push	{r7, lr}
 8026ece:	b086      	sub	sp, #24
 8026ed0:	af00      	add	r7, sp, #0
 8026ed2:	60f8      	str	r0, [r7, #12]
 8026ed4:	60b9      	str	r1, [r7, #8]
 8026ed6:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8026ed8:	68ba      	ldr	r2, [r7, #8]
 8026eda:	68fb      	ldr	r3, [r7, #12]
 8026edc:	1ad3      	subs	r3, r2, r3
 8026ede:	109b      	asrs	r3, r3, #2
 8026ee0:	4a0e      	ldr	r2, [pc, #56]	; (8026f1c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_+0x50>)
 8026ee2:	fb02 f303 	mul.w	r3, r2, r3
 8026ee6:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8026ee8:	697b      	ldr	r3, [r7, #20]
 8026eea:	2b00      	cmp	r3, #0
 8026eec:	d009      	beq.n	8026f02 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_+0x36>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8026eee:	697a      	ldr	r2, [r7, #20]
 8026ef0:	4613      	mov	r3, r2
 8026ef2:	009b      	lsls	r3, r3, #2
 8026ef4:	4413      	add	r3, r2
 8026ef6:	009b      	lsls	r3, r3, #2
 8026ef8:	461a      	mov	r2, r3
 8026efa:	68f9      	ldr	r1, [r7, #12]
 8026efc:	6878      	ldr	r0, [r7, #4]
 8026efe:	f014 ff4d 	bl	803bd9c <memmove>
	  return __result + _Num;
 8026f02:	697a      	ldr	r2, [r7, #20]
 8026f04:	4613      	mov	r3, r2
 8026f06:	009b      	lsls	r3, r3, #2
 8026f08:	4413      	add	r3, r2
 8026f0a:	009b      	lsls	r3, r3, #2
 8026f0c:	461a      	mov	r2, r3
 8026f0e:	687b      	ldr	r3, [r7, #4]
 8026f10:	4413      	add	r3, r2
	}
 8026f12:	4618      	mov	r0, r3
 8026f14:	3718      	adds	r7, #24
 8026f16:	46bd      	mov	sp, r7
 8026f18:	bd80      	pop	{r7, pc}
 8026f1a:	bf00      	nop
 8026f1c:	cccccccd 	.word	0xcccccccd

08026f20 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS5_PS5_EES8_EET0_T_SB_SA_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8026f20:	b580      	push	{r7, lr}
 8026f22:	b090      	sub	sp, #64	; 0x40
 8026f24:	af00      	add	r7, sp, #0
 8026f26:	60f8      	str	r0, [r7, #12]
 8026f28:	60b9      	str	r1, [r7, #8]
 8026f2a:	607a      	str	r2, [r7, #4]
 8026f2c:	603b      	str	r3, [r7, #0]
        { return std::copy(__first, __last, __result); }
 8026f2e:	f107 0310 	add.w	r3, r7, #16
 8026f32:	68b9      	ldr	r1, [r7, #8]
 8026f34:	4618      	mov	r0, r3
 8026f36:	f7ff fca0 	bl	802687a <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ERKS6_>
 8026f3a:	f107 0320 	add.w	r3, r7, #32
 8026f3e:	6879      	ldr	r1, [r7, #4]
 8026f40:	4618      	mov	r0, r3
 8026f42:	f7ff fc9a 	bl	802687a <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ERKS6_>
 8026f46:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8026f4a:	6839      	ldr	r1, [r7, #0]
 8026f4c:	4618      	mov	r0, r3
 8026f4e:	f7fd f9d0 	bl	80242f2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026f52:	68f8      	ldr	r0, [r7, #12]
 8026f54:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8026f58:	f107 0220 	add.w	r2, r7, #32
 8026f5c:	f107 0110 	add.w	r1, r7, #16
 8026f60:	f000 f951 	bl	8027206 <_ZSt4copyISt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS3_PS3_EES6_ET0_T_S9_S8_>
 8026f64:	68f8      	ldr	r0, [r7, #12]
 8026f66:	3740      	adds	r7, #64	; 0x40
 8026f68:	46bd      	mov	sp, r7
 8026f6a:	bd80      	pop	{r7, pc}

08026f6c <_ZSt15__copy_move_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_>:
    __copy_move_dit(_GLIBCXX_STD_C::_Deque_iterator<_Tp, _Ref, _Ptr> __first,
 8026f6c:	b5b0      	push	{r4, r5, r7, lr}
 8026f6e:	b09e      	sub	sp, #120	; 0x78
 8026f70:	af00      	add	r7, sp, #0
 8026f72:	60f8      	str	r0, [r7, #12]
 8026f74:	60b9      	str	r1, [r7, #8]
 8026f76:	607a      	str	r2, [r7, #4]
 8026f78:	603b      	str	r3, [r7, #0]
      if (__first._M_node != __last._M_node)
 8026f7a:	68bb      	ldr	r3, [r7, #8]
 8026f7c:	68da      	ldr	r2, [r3, #12]
 8026f7e:	687b      	ldr	r3, [r7, #4]
 8026f80:	68db      	ldr	r3, [r3, #12]
 8026f82:	429a      	cmp	r2, r3
 8026f84:	d058      	beq.n	8027038 <_ZSt15__copy_move_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_+0xcc>
	  __result
 8026f86:	68bb      	ldr	r3, [r7, #8]
 8026f88:	681c      	ldr	r4, [r3, #0]
 8026f8a:	68bb      	ldr	r3, [r7, #8]
 8026f8c:	689d      	ldr	r5, [r3, #8]
 8026f8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8026f92:	6839      	ldr	r1, [r7, #0]
 8026f94:	4618      	mov	r0, r3
 8026f96:	f7fd f9ac 	bl	80242f2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026f9a:	f107 0014 	add.w	r0, r7, #20
 8026f9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8026fa2:	462a      	mov	r2, r5
 8026fa4:	4621      	mov	r1, r4
 8026fa6:	f000 f965 	bl	8027274 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>
 8026faa:	683b      	ldr	r3, [r7, #0]
 8026fac:	461c      	mov	r4, r3
 8026fae:	f107 0314 	add.w	r3, r7, #20
 8026fb2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8026fb4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  for (typename _Iter::_Map_pointer __node = __first._M_node + 1;
 8026fb8:	68bb      	ldr	r3, [r7, #8]
 8026fba:	68db      	ldr	r3, [r3, #12]
 8026fbc:	3304      	adds	r3, #4
 8026fbe:	677b      	str	r3, [r7, #116]	; 0x74
	       __node != __last._M_node; ++__node)
 8026fc0:	687b      	ldr	r3, [r7, #4]
 8026fc2:	68db      	ldr	r3, [r3, #12]
 8026fc4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8026fc6:	429a      	cmp	r2, r3
 8026fc8:	d024      	beq.n	8027014 <_ZSt15__copy_move_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_+0xa8>
	    __result
 8026fca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8026fcc:	681d      	ldr	r5, [r3, #0]
 8026fce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8026fd0:	681c      	ldr	r4, [r3, #0]
					     *__node + _Iter::_S_buffer_size(),
 8026fd2:	f7fd fc72 	bl	80248ba <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 8026fd6:	4602      	mov	r2, r0
 8026fd8:	4613      	mov	r3, r2
 8026fda:	009b      	lsls	r3, r3, #2
 8026fdc:	4413      	add	r3, r2
 8026fde:	009b      	lsls	r3, r3, #2
	    __result
 8026fe0:	441c      	add	r4, r3
 8026fe2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8026fe6:	6839      	ldr	r1, [r7, #0]
 8026fe8:	4618      	mov	r0, r3
 8026fea:	f7fd f982 	bl	80242f2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026fee:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8026ff2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8026ff6:	4622      	mov	r2, r4
 8026ff8:	4629      	mov	r1, r5
 8026ffa:	f000 f93b 	bl	8027274 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>
 8026ffe:	683b      	ldr	r3, [r7, #0]
 8027000:	461c      	mov	r4, r3
 8027002:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8027006:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8027008:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  for (typename _Iter::_Map_pointer __node = __first._M_node + 1;
 802700c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802700e:	3304      	adds	r3, #4
 8027010:	677b      	str	r3, [r7, #116]	; 0x74
 8027012:	e7d5      	b.n	8026fc0 <_ZSt15__copy_move_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_+0x54>
					      __result);
 8027014:	687b      	ldr	r3, [r7, #4]
 8027016:	685c      	ldr	r4, [r3, #4]
 8027018:	687b      	ldr	r3, [r7, #4]
 802701a:	681d      	ldr	r5, [r3, #0]
 802701c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8027020:	6839      	ldr	r1, [r7, #0]
 8027022:	4618      	mov	r0, r3
 8027024:	f7fd f965 	bl	80242f2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8027028:	68f8      	ldr	r0, [r7, #12]
 802702a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 802702e:	462a      	mov	r2, r5
 8027030:	4621      	mov	r1, r4
 8027032:	f000 f91f 	bl	8027274 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>
    }
 8027036:	e010      	b.n	802705a <_ZSt15__copy_move_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_+0xee>
					  __result);
 8027038:	68bb      	ldr	r3, [r7, #8]
 802703a:	681c      	ldr	r4, [r3, #0]
 802703c:	687b      	ldr	r3, [r7, #4]
 802703e:	681d      	ldr	r5, [r3, #0]
 8027040:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8027044:	6839      	ldr	r1, [r7, #0]
 8027046:	4618      	mov	r0, r3
 8027048:	f7fd f953 	bl	80242f2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802704c:	68f8      	ldr	r0, [r7, #12]
 802704e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8027052:	462a      	mov	r2, r5
 8027054:	4621      	mov	r1, r4
 8027056:	f000 f90d 	bl	8027274 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>
    }
 802705a:	68f8      	ldr	r0, [r7, #12]
 802705c:	3778      	adds	r7, #120	; 0x78
 802705e:	46bd      	mov	sp, r7
 8027060:	bdb0      	pop	{r4, r5, r7, pc}

08027062 <_ZSt24__copy_move_backward_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_>:
    __copy_move_backward_dit(
 8027062:	b5b0      	push	{r4, r5, r7, lr}
 8027064:	b09e      	sub	sp, #120	; 0x78
 8027066:	af00      	add	r7, sp, #0
 8027068:	60f8      	str	r0, [r7, #12]
 802706a:	60b9      	str	r1, [r7, #8]
 802706c:	607a      	str	r2, [r7, #4]
 802706e:	603b      	str	r3, [r7, #0]
      if (__first._M_node != __last._M_node)
 8027070:	68bb      	ldr	r3, [r7, #8]
 8027072:	68da      	ldr	r2, [r3, #12]
 8027074:	687b      	ldr	r3, [r7, #4]
 8027076:	68db      	ldr	r3, [r3, #12]
 8027078:	429a      	cmp	r2, r3
 802707a:	d058      	beq.n	802712e <_ZSt24__copy_move_backward_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_+0xcc>
	  __result = std::__copy_move_backward_a1<_IsMove>(
 802707c:	687b      	ldr	r3, [r7, #4]
 802707e:	685c      	ldr	r4, [r3, #4]
 8027080:	687b      	ldr	r3, [r7, #4]
 8027082:	681d      	ldr	r5, [r3, #0]
 8027084:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8027088:	6839      	ldr	r1, [r7, #0]
 802708a:	4618      	mov	r0, r3
 802708c:	f7fd f931 	bl	80242f2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8027090:	f107 0014 	add.w	r0, r7, #20
 8027094:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8027098:	462a      	mov	r2, r5
 802709a:	4621      	mov	r1, r4
 802709c:	f000 f93c 	bl	8027318 <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>
 80270a0:	683b      	ldr	r3, [r7, #0]
 80270a2:	461c      	mov	r4, r3
 80270a4:	f107 0314 	add.w	r3, r7, #20
 80270a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80270aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  for (typename _Iter::_Map_pointer __node = __last._M_node - 1;
 80270ae:	687b      	ldr	r3, [r7, #4]
 80270b0:	68db      	ldr	r3, [r3, #12]
 80270b2:	3b04      	subs	r3, #4
 80270b4:	677b      	str	r3, [r7, #116]	; 0x74
	       __node != __first._M_node; --__node)
 80270b6:	68bb      	ldr	r3, [r7, #8]
 80270b8:	68db      	ldr	r3, [r3, #12]
 80270ba:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80270bc:	429a      	cmp	r2, r3
 80270be:	d024      	beq.n	802710a <_ZSt24__copy_move_backward_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_+0xa8>
	    __result = std::__copy_move_backward_a1<_IsMove>(
 80270c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80270c2:	681d      	ldr	r5, [r3, #0]
 80270c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80270c6:	681c      	ldr	r4, [r3, #0]
		*__node, *__node + _Iter::_S_buffer_size(), __result);
 80270c8:	f7fd fbf7 	bl	80248ba <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 80270cc:	4602      	mov	r2, r0
 80270ce:	4613      	mov	r3, r2
 80270d0:	009b      	lsls	r3, r3, #2
 80270d2:	4413      	add	r3, r2
 80270d4:	009b      	lsls	r3, r3, #2
	    __result = std::__copy_move_backward_a1<_IsMove>(
 80270d6:	441c      	add	r4, r3
 80270d8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80270dc:	6839      	ldr	r1, [r7, #0]
 80270de:	4618      	mov	r0, r3
 80270e0:	f7fd f907 	bl	80242f2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80270e4:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80270e8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80270ec:	4622      	mov	r2, r4
 80270ee:	4629      	mov	r1, r5
 80270f0:	f000 f912 	bl	8027318 <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>
 80270f4:	683b      	ldr	r3, [r7, #0]
 80270f6:	461c      	mov	r4, r3
 80270f8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80270fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80270fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  for (typename _Iter::_Map_pointer __node = __last._M_node - 1;
 8027102:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8027104:	3b04      	subs	r3, #4
 8027106:	677b      	str	r3, [r7, #116]	; 0x74
 8027108:	e7d5      	b.n	80270b6 <_ZSt24__copy_move_backward_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_+0x54>
			__first._M_cur, __first._M_last, __result);
 802710a:	68bb      	ldr	r3, [r7, #8]
 802710c:	681c      	ldr	r4, [r3, #0]
 802710e:	68bb      	ldr	r3, [r7, #8]
 8027110:	689d      	ldr	r5, [r3, #8]
 8027112:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8027116:	6839      	ldr	r1, [r7, #0]
 8027118:	4618      	mov	r0, r3
 802711a:	f7fd f8ea 	bl	80242f2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802711e:	68f8      	ldr	r0, [r7, #12]
 8027120:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8027124:	462a      	mov	r2, r5
 8027126:	4621      	mov	r1, r4
 8027128:	f000 f8f6 	bl	8027318 <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>
    }
 802712c:	e010      	b.n	8027150 <_ZSt24__copy_move_backward_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_+0xee>
		__first._M_cur, __last._M_cur, __result);
 802712e:	68bb      	ldr	r3, [r7, #8]
 8027130:	681c      	ldr	r4, [r3, #0]
 8027132:	687b      	ldr	r3, [r7, #4]
 8027134:	681d      	ldr	r5, [r3, #0]
 8027136:	f107 0364 	add.w	r3, r7, #100	; 0x64
 802713a:	6839      	ldr	r1, [r7, #0]
 802713c:	4618      	mov	r0, r3
 802713e:	f7fd f8d8 	bl	80242f2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8027142:	68f8      	ldr	r0, [r7, #12]
 8027144:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8027148:	462a      	mov	r2, r5
 802714a:	4621      	mov	r1, r4
 802714c:	f000 f8e4 	bl	8027318 <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>
    }
 8027150:	68f8      	ldr	r0, [r7, #12]
 8027152:	3778      	adds	r7, #120	; 0x78
 8027154:	46bd      	mov	sp, r7
 8027156:	bdb0      	pop	{r4, r5, r7, pc}

08027158 <_ZSt14__copy_move_a2ILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8027158:	b580      	push	{r7, lr}
 802715a:	b084      	sub	sp, #16
 802715c:	af00      	add	r7, sp, #0
 802715e:	60f8      	str	r0, [r7, #12]
 8027160:	60b9      	str	r1, [r7, #8]
 8027162:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8027164:	687a      	ldr	r2, [r7, #4]
 8027166:	68b9      	ldr	r1, [r7, #8]
 8027168:	68f8      	ldr	r0, [r7, #12]
 802716a:	f000 f93b 	bl	80273e4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN10BHYWrapper8BHYFrameEEEPT_PKS6_S9_S7_>
 802716e:	4603      	mov	r3, r0
    }
 8027170:	4618      	mov	r0, r3
 8027172:	3710      	adds	r7, #16
 8027174:	46bd      	mov	sp, r7
 8027176:	bd80      	pop	{r7, pc}

08027178 <_ZSt23__copy_move_backward_a2ILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 8027178:	b580      	push	{r7, lr}
 802717a:	b084      	sub	sp, #16
 802717c:	af00      	add	r7, sp, #0
 802717e:	60f8      	str	r0, [r7, #12]
 8027180:	60b9      	str	r1, [r7, #8]
 8027182:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 8027184:	687a      	ldr	r2, [r7, #4]
 8027186:	68b9      	ldr	r1, [r7, #8]
 8027188:	68f8      	ldr	r0, [r7, #12]
 802718a:	f000 f948 	bl	802741e <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN10BHYWrapper8BHYFrameEEEPT_PKS6_S9_S7_>
 802718e:	4603      	mov	r3, r0
    }
 8027190:	4618      	mov	r0, r3
 8027192:	3710      	adds	r7, #16
 8027194:	46bd      	mov	sp, r7
 8027196:	bd80      	pop	{r7, pc}

08027198 <_ZSt12__niter_baseIPPjET_S2_>:
    __niter_base(_Iterator __it)
 8027198:	b480      	push	{r7}
 802719a:	b083      	sub	sp, #12
 802719c:	af00      	add	r7, sp, #0
 802719e:	6078      	str	r0, [r7, #4]
    { return __it; }
 80271a0:	687b      	ldr	r3, [r7, #4]
 80271a2:	4618      	mov	r0, r3
 80271a4:	370c      	adds	r7, #12
 80271a6:	46bd      	mov	sp, r7
 80271a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80271ac:	4770      	bx	lr

080271ae <_ZSt14__copy_move_a1ILb0EPPjS1_ET1_T0_S3_S2_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 80271ae:	b580      	push	{r7, lr}
 80271b0:	b084      	sub	sp, #16
 80271b2:	af00      	add	r7, sp, #0
 80271b4:	60f8      	str	r0, [r7, #12]
 80271b6:	60b9      	str	r1, [r7, #8]
 80271b8:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 80271ba:	687a      	ldr	r2, [r7, #4]
 80271bc:	68b9      	ldr	r1, [r7, #8]
 80271be:	68f8      	ldr	r0, [r7, #12]
 80271c0:	f000 f94f 	bl	8027462 <_ZSt14__copy_move_a2ILb0EPPjS1_ET1_T0_S3_S2_>
 80271c4:	4603      	mov	r3, r0
 80271c6:	4618      	mov	r0, r3
 80271c8:	3710      	adds	r7, #16
 80271ca:	46bd      	mov	sp, r7
 80271cc:	bd80      	pop	{r7, pc}

080271ce <_ZSt12__niter_wrapIPPjET_RKS2_S2_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 80271ce:	b480      	push	{r7}
 80271d0:	b083      	sub	sp, #12
 80271d2:	af00      	add	r7, sp, #0
 80271d4:	6078      	str	r0, [r7, #4]
 80271d6:	6039      	str	r1, [r7, #0]
    { return __res; }
 80271d8:	683b      	ldr	r3, [r7, #0]
 80271da:	4618      	mov	r0, r3
 80271dc:	370c      	adds	r7, #12
 80271de:	46bd      	mov	sp, r7
 80271e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80271e4:	4770      	bx	lr

080271e6 <_ZSt23__copy_move_backward_a1ILb0EPPjS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 80271e6:	b580      	push	{r7, lr}
 80271e8:	b084      	sub	sp, #16
 80271ea:	af00      	add	r7, sp, #0
 80271ec:	60f8      	str	r0, [r7, #12]
 80271ee:	60b9      	str	r1, [r7, #8]
 80271f0:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 80271f2:	687a      	ldr	r2, [r7, #4]
 80271f4:	68b9      	ldr	r1, [r7, #8]
 80271f6:	68f8      	ldr	r0, [r7, #12]
 80271f8:	f000 f943 	bl	8027482 <_ZSt23__copy_move_backward_a2ILb0EPPjS1_ET1_T0_S3_S2_>
 80271fc:	4603      	mov	r3, r0
 80271fe:	4618      	mov	r0, r3
 8027200:	3710      	adds	r7, #16
 8027202:	46bd      	mov	sp, r7
 8027204:	bd80      	pop	{r7, pc}

08027206 <_ZSt4copyISt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS3_PS3_EES6_ET0_T_S9_S8_>:
    copy(_II __first, _II __last, _OI __result)
 8027206:	b580      	push	{r7, lr}
 8027208:	b098      	sub	sp, #96	; 0x60
 802720a:	af00      	add	r7, sp, #0
 802720c:	60f8      	str	r0, [r7, #12]
 802720e:	60b9      	str	r1, [r7, #8]
 8027210:	607a      	str	r2, [r7, #4]
 8027212:	603b      	str	r3, [r7, #0]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8027214:	f107 0320 	add.w	r3, r7, #32
 8027218:	68b9      	ldr	r1, [r7, #8]
 802721a:	4618      	mov	r0, r3
 802721c:	f7ff fb2d 	bl	802687a <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ERKS6_>
 8027220:	f107 0310 	add.w	r3, r7, #16
 8027224:	f107 0220 	add.w	r2, r7, #32
 8027228:	4611      	mov	r1, r2
 802722a:	4618      	mov	r0, r3
 802722c:	f000 f939 	bl	80274a2 <_ZSt12__miter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8027230:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8027234:	6879      	ldr	r1, [r7, #4]
 8027236:	4618      	mov	r0, r3
 8027238:	f7ff fb1f 	bl	802687a <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ERKS6_>
 802723c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8027240:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8027244:	4611      	mov	r1, r2
 8027246:	4618      	mov	r0, r3
 8027248:	f000 f92b 	bl	80274a2 <_ZSt12__miter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 802724c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8027250:	6839      	ldr	r1, [r7, #0]
 8027252:	4618      	mov	r0, r3
 8027254:	f7fd f84d 	bl	80242f2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8027258:	68f8      	ldr	r0, [r7, #12]
 802725a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 802725e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8027262:	f107 0110 	add.w	r1, r7, #16
 8027266:	f7ff fb4b 	bl	8026900 <_ZSt13__copy_move_aILb1ESt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_ET1_T0_S7_S6_>
    }
 802726a:	68f8      	ldr	r0, [r7, #12]
 802726c:	3760      	adds	r7, #96	; 0x60
 802726e:	46bd      	mov	sp, r7
 8027270:	bd80      	pop	{r7, pc}
	...

08027274 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>:
    __copy_move_a1(_II __first, _II __last,
 8027274:	b580      	push	{r7, lr}
 8027276:	b088      	sub	sp, #32
 8027278:	af00      	add	r7, sp, #0
 802727a:	60f8      	str	r0, [r7, #12]
 802727c:	60b9      	str	r1, [r7, #8]
 802727e:	607a      	str	r2, [r7, #4]
 8027280:	603b      	str	r3, [r7, #0]
      difference_type __len = __last - __first;
 8027282:	687a      	ldr	r2, [r7, #4]
 8027284:	68bb      	ldr	r3, [r7, #8]
 8027286:	1ad3      	subs	r3, r2, r3
 8027288:	109b      	asrs	r3, r3, #2
 802728a:	4a22      	ldr	r2, [pc, #136]	; (8027314 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0xa0>)
 802728c:	fb02 f303 	mul.w	r3, r2, r3
 8027290:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 8027292:	697b      	ldr	r3, [r7, #20]
 8027294:	2b00      	cmp	r3, #0
 8027296:	dd34      	ble.n	8027302 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0x8e>
	    = std::min(__len, __result._M_last - __result._M_cur);
 8027298:	683b      	ldr	r3, [r7, #0]
 802729a:	689a      	ldr	r2, [r3, #8]
 802729c:	683b      	ldr	r3, [r7, #0]
 802729e:	681b      	ldr	r3, [r3, #0]
 80272a0:	1ad3      	subs	r3, r2, r3
 80272a2:	109b      	asrs	r3, r3, #2
 80272a4:	4a1b      	ldr	r2, [pc, #108]	; (8027314 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0xa0>)
 80272a6:	fb02 f303 	mul.w	r3, r2, r3
 80272aa:	61bb      	str	r3, [r7, #24]
 80272ac:	f107 0218 	add.w	r2, r7, #24
 80272b0:	f107 0314 	add.w	r3, r7, #20
 80272b4:	4611      	mov	r1, r2
 80272b6:	4618      	mov	r0, r3
 80272b8:	f7fe fd4d 	bl	8025d56 <_ZSt3minIiERKT_S2_S2_>
 80272bc:	4603      	mov	r3, r0
	  const difference_type __clen
 80272be:	681b      	ldr	r3, [r3, #0]
 80272c0:	61fb      	str	r3, [r7, #28]
	  std::__copy_move_a1<_IsMove>(__first, __first + __clen,
 80272c2:	69fa      	ldr	r2, [r7, #28]
 80272c4:	4613      	mov	r3, r2
 80272c6:	009b      	lsls	r3, r3, #2
 80272c8:	4413      	add	r3, r2
 80272ca:	009b      	lsls	r3, r3, #2
 80272cc:	461a      	mov	r2, r3
 80272ce:	68bb      	ldr	r3, [r7, #8]
 80272d0:	1899      	adds	r1, r3, r2
 80272d2:	683b      	ldr	r3, [r7, #0]
 80272d4:	681b      	ldr	r3, [r3, #0]
 80272d6:	461a      	mov	r2, r3
 80272d8:	68b8      	ldr	r0, [r7, #8]
 80272da:	f000 f8f8 	bl	80274ce <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES2_ET1_T0_S4_S3_>
	  __first += __clen;
 80272de:	69fa      	ldr	r2, [r7, #28]
 80272e0:	4613      	mov	r3, r2
 80272e2:	009b      	lsls	r3, r3, #2
 80272e4:	4413      	add	r3, r2
 80272e6:	009b      	lsls	r3, r3, #2
 80272e8:	461a      	mov	r2, r3
 80272ea:	68bb      	ldr	r3, [r7, #8]
 80272ec:	4413      	add	r3, r2
 80272ee:	60bb      	str	r3, [r7, #8]
	  __result += __clen;
 80272f0:	69f9      	ldr	r1, [r7, #28]
 80272f2:	6838      	ldr	r0, [r7, #0]
 80272f4:	f7fe fa48 	bl	8025788 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi>
	  __len -= __clen;
 80272f8:	697a      	ldr	r2, [r7, #20]
 80272fa:	69fb      	ldr	r3, [r7, #28]
 80272fc:	1ad3      	subs	r3, r2, r3
 80272fe:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 8027300:	e7c7      	b.n	8027292 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0x1e>
      return __result;
 8027302:	6839      	ldr	r1, [r7, #0]
 8027304:	68f8      	ldr	r0, [r7, #12]
 8027306:	f7fc fff4 	bl	80242f2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
    }
 802730a:	68f8      	ldr	r0, [r7, #12]
 802730c:	3720      	adds	r7, #32
 802730e:	46bd      	mov	sp, r7
 8027310:	bd80      	pop	{r7, pc}
 8027312:	bf00      	nop
 8027314:	cccccccd 	.word	0xcccccccd

08027318 <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>:

  template<bool _IsMove, typename _II, typename _Tp>
    typename __gnu_cxx::__enable_if<
      __is_random_access_iter<_II>::__value,
      _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> >::__type
    __copy_move_backward_a1(_II __first, _II __last,
 8027318:	b580      	push	{r7, lr}
 802731a:	b088      	sub	sp, #32
 802731c:	af00      	add	r7, sp, #0
 802731e:	60f8      	str	r0, [r7, #12]
 8027320:	60b9      	str	r1, [r7, #8]
 8027322:	607a      	str	r2, [r7, #4]
 8027324:	603b      	str	r3, [r7, #0]
		_GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> __result)
    {
      typedef _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> _Iter;
      typedef typename _Iter::difference_type difference_type;

      difference_type __len = __last - __first;
 8027326:	687a      	ldr	r2, [r7, #4]
 8027328:	68bb      	ldr	r3, [r7, #8]
 802732a:	1ad3      	subs	r3, r2, r3
 802732c:	109b      	asrs	r3, r3, #2
 802732e:	4a2c      	ldr	r2, [pc, #176]	; (80273e0 <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0xc8>)
 8027330:	fb02 f303 	mul.w	r3, r2, r3
 8027334:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 8027336:	697b      	ldr	r3, [r7, #20]
 8027338:	2b00      	cmp	r3, #0
 802733a:	dd49      	ble.n	80273d0 <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0xb8>
	{
	  difference_type __rlen = __result._M_cur - __result._M_first;
 802733c:	683b      	ldr	r3, [r7, #0]
 802733e:	681a      	ldr	r2, [r3, #0]
 8027340:	683b      	ldr	r3, [r7, #0]
 8027342:	685b      	ldr	r3, [r3, #4]
 8027344:	1ad3      	subs	r3, r2, r3
 8027346:	109b      	asrs	r3, r3, #2
 8027348:	4a25      	ldr	r2, [pc, #148]	; (80273e0 <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0xc8>)
 802734a:	fb02 f303 	mul.w	r3, r2, r3
 802734e:	613b      	str	r3, [r7, #16]
	  _Tp* __rend = __result._M_cur;
 8027350:	683b      	ldr	r3, [r7, #0]
 8027352:	681b      	ldr	r3, [r3, #0]
 8027354:	61fb      	str	r3, [r7, #28]
	  if (!__rlen)
 8027356:	693b      	ldr	r3, [r7, #16]
 8027358:	2b00      	cmp	r3, #0
 802735a:	d10f      	bne.n	802737c <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0x64>
	    {
	      __rlen = _Iter::_S_buffer_size();
 802735c:	f7fd faad 	bl	80248ba <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 8027360:	4603      	mov	r3, r0
 8027362:	613b      	str	r3, [r7, #16]
	      __rend = *(__result._M_node - 1) + __rlen;
 8027364:	683b      	ldr	r3, [r7, #0]
 8027366:	68db      	ldr	r3, [r3, #12]
 8027368:	3b04      	subs	r3, #4
 802736a:	681a      	ldr	r2, [r3, #0]
 802736c:	693b      	ldr	r3, [r7, #16]
 802736e:	4619      	mov	r1, r3
 8027370:	460b      	mov	r3, r1
 8027372:	009b      	lsls	r3, r3, #2
 8027374:	440b      	add	r3, r1
 8027376:	009b      	lsls	r3, r3, #2
 8027378:	4413      	add	r3, r2
 802737a:	61fb      	str	r3, [r7, #28]
	    }

	  const difference_type __clen = std::min(__len, __rlen);
 802737c:	f107 0210 	add.w	r2, r7, #16
 8027380:	f107 0314 	add.w	r3, r7, #20
 8027384:	4611      	mov	r1, r2
 8027386:	4618      	mov	r0, r3
 8027388:	f7fe fce5 	bl	8025d56 <_ZSt3minIiERKT_S2_S2_>
 802738c:	4603      	mov	r3, r0
 802738e:	681b      	ldr	r3, [r3, #0]
 8027390:	61bb      	str	r3, [r7, #24]
	  std::__copy_move_backward_a1<_IsMove>(__last - __clen, __last, __rend);
 8027392:	69ba      	ldr	r2, [r7, #24]
 8027394:	4613      	mov	r3, r2
 8027396:	009b      	lsls	r3, r3, #2
 8027398:	4413      	add	r3, r2
 802739a:	009b      	lsls	r3, r3, #2
 802739c:	425b      	negs	r3, r3
 802739e:	687a      	ldr	r2, [r7, #4]
 80273a0:	4413      	add	r3, r2
 80273a2:	69fa      	ldr	r2, [r7, #28]
 80273a4:	6879      	ldr	r1, [r7, #4]
 80273a6:	4618      	mov	r0, r3
 80273a8:	f000 f8a1 	bl	80274ee <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES2_ET1_T0_S4_S3_>

	  __last -= __clen;
 80273ac:	69ba      	ldr	r2, [r7, #24]
 80273ae:	4613      	mov	r3, r2
 80273b0:	009b      	lsls	r3, r3, #2
 80273b2:	4413      	add	r3, r2
 80273b4:	009b      	lsls	r3, r3, #2
 80273b6:	425b      	negs	r3, r3
 80273b8:	687a      	ldr	r2, [r7, #4]
 80273ba:	4413      	add	r3, r2
 80273bc:	607b      	str	r3, [r7, #4]
	  __result -= __clen;
 80273be:	69b9      	ldr	r1, [r7, #24]
 80273c0:	6838      	ldr	r0, [r7, #0]
 80273c2:	f7ff f9fe 	bl	80267c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EmIEi>
	  __len -= __clen;
 80273c6:	697a      	ldr	r2, [r7, #20]
 80273c8:	69bb      	ldr	r3, [r7, #24]
 80273ca:	1ad3      	subs	r3, r2, r3
 80273cc:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 80273ce:	e7b2      	b.n	8027336 <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0x1e>
	}

      return __result;
 80273d0:	6839      	ldr	r1, [r7, #0]
 80273d2:	68f8      	ldr	r0, [r7, #12]
 80273d4:	f7fc ff8d 	bl	80242f2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
    }
 80273d8:	68f8      	ldr	r0, [r7, #12]
 80273da:	3720      	adds	r7, #32
 80273dc:	46bd      	mov	sp, r7
 80273de:	bd80      	pop	{r7, pc}
 80273e0:	cccccccd 	.word	0xcccccccd

080273e4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN10BHYWrapper8BHYFrameEEEPT_PKS6_S9_S7_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80273e4:	b580      	push	{r7, lr}
 80273e6:	b086      	sub	sp, #24
 80273e8:	af00      	add	r7, sp, #0
 80273ea:	60f8      	str	r0, [r7, #12]
 80273ec:	60b9      	str	r1, [r7, #8]
 80273ee:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80273f0:	68ba      	ldr	r2, [r7, #8]
 80273f2:	68fb      	ldr	r3, [r7, #12]
 80273f4:	1ad3      	subs	r3, r2, r3
 80273f6:	109b      	asrs	r3, r3, #2
 80273f8:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80273fa:	697b      	ldr	r3, [r7, #20]
 80273fc:	2b00      	cmp	r3, #0
 80273fe:	d006      	beq.n	802740e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN10BHYWrapper8BHYFrameEEEPT_PKS6_S9_S7_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8027400:	697b      	ldr	r3, [r7, #20]
 8027402:	009b      	lsls	r3, r3, #2
 8027404:	461a      	mov	r2, r3
 8027406:	68f9      	ldr	r1, [r7, #12]
 8027408:	6878      	ldr	r0, [r7, #4]
 802740a:	f014 fcc7 	bl	803bd9c <memmove>
	  return __result + _Num;
 802740e:	697b      	ldr	r3, [r7, #20]
 8027410:	009b      	lsls	r3, r3, #2
 8027412:	687a      	ldr	r2, [r7, #4]
 8027414:	4413      	add	r3, r2
	}
 8027416:	4618      	mov	r0, r3
 8027418:	3718      	adds	r7, #24
 802741a:	46bd      	mov	sp, r7
 802741c:	bd80      	pop	{r7, pc}

0802741e <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN10BHYWrapper8BHYFrameEEEPT_PKS6_S9_S7_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 802741e:	b580      	push	{r7, lr}
 8027420:	b086      	sub	sp, #24
 8027422:	af00      	add	r7, sp, #0
 8027424:	60f8      	str	r0, [r7, #12]
 8027426:	60b9      	str	r1, [r7, #8]
 8027428:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 802742a:	68ba      	ldr	r2, [r7, #8]
 802742c:	68fb      	ldr	r3, [r7, #12]
 802742e:	1ad3      	subs	r3, r2, r3
 8027430:	109b      	asrs	r3, r3, #2
 8027432:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8027434:	697b      	ldr	r3, [r7, #20]
 8027436:	2b00      	cmp	r3, #0
 8027438:	d00a      	beq.n	8027450 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN10BHYWrapper8BHYFrameEEEPT_PKS6_S9_S7_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 802743a:	697b      	ldr	r3, [r7, #20]
 802743c:	009b      	lsls	r3, r3, #2
 802743e:	425b      	negs	r3, r3
 8027440:	687a      	ldr	r2, [r7, #4]
 8027442:	18d0      	adds	r0, r2, r3
 8027444:	697b      	ldr	r3, [r7, #20]
 8027446:	009b      	lsls	r3, r3, #2
 8027448:	461a      	mov	r2, r3
 802744a:	68f9      	ldr	r1, [r7, #12]
 802744c:	f014 fca6 	bl	803bd9c <memmove>
	  return __result - _Num;
 8027450:	697b      	ldr	r3, [r7, #20]
 8027452:	009b      	lsls	r3, r3, #2
 8027454:	425b      	negs	r3, r3
 8027456:	687a      	ldr	r2, [r7, #4]
 8027458:	4413      	add	r3, r2
	}
 802745a:	4618      	mov	r0, r3
 802745c:	3718      	adds	r7, #24
 802745e:	46bd      	mov	sp, r7
 8027460:	bd80      	pop	{r7, pc}

08027462 <_ZSt14__copy_move_a2ILb0EPPjS1_ET1_T0_S3_S2_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8027462:	b580      	push	{r7, lr}
 8027464:	b084      	sub	sp, #16
 8027466:	af00      	add	r7, sp, #0
 8027468:	60f8      	str	r0, [r7, #12]
 802746a:	60b9      	str	r1, [r7, #8]
 802746c:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 802746e:	687a      	ldr	r2, [r7, #4]
 8027470:	68b9      	ldr	r1, [r7, #8]
 8027472:	68f8      	ldr	r0, [r7, #12]
 8027474:	f000 f84b 	bl	802750e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPjEEPT_PKS4_S7_S5_>
 8027478:	4603      	mov	r3, r0
    }
 802747a:	4618      	mov	r0, r3
 802747c:	3710      	adds	r7, #16
 802747e:	46bd      	mov	sp, r7
 8027480:	bd80      	pop	{r7, pc}

08027482 <_ZSt23__copy_move_backward_a2ILb0EPPjS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 8027482:	b580      	push	{r7, lr}
 8027484:	b084      	sub	sp, #16
 8027486:	af00      	add	r7, sp, #0
 8027488:	60f8      	str	r0, [r7, #12]
 802748a:	60b9      	str	r1, [r7, #8]
 802748c:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 802748e:	687a      	ldr	r2, [r7, #4]
 8027490:	68b9      	ldr	r1, [r7, #8]
 8027492:	68f8      	ldr	r0, [r7, #12]
 8027494:	f000 f858 	bl	8027548 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPjEEPT_PKS4_S7_S5_>
 8027498:	4603      	mov	r3, r0
    }
 802749a:	4618      	mov	r0, r3
 802749c:	3710      	adds	r7, #16
 802749e:	46bd      	mov	sp, r7
 80274a0:	bd80      	pop	{r7, pc}

080274a2 <_ZSt12__miter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 80274a2:	b580      	push	{r7, lr}
 80274a4:	b086      	sub	sp, #24
 80274a6:	af00      	add	r7, sp, #0
 80274a8:	6078      	str	r0, [r7, #4]
 80274aa:	6039      	str	r1, [r7, #0]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 80274ac:	f107 0308 	add.w	r3, r7, #8
 80274b0:	6839      	ldr	r1, [r7, #0]
 80274b2:	4618      	mov	r0, r3
 80274b4:	f000 f86a 	bl	802758c <_ZNKSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EE4baseEv>
 80274b8:	687b      	ldr	r3, [r7, #4]
 80274ba:	f107 0208 	add.w	r2, r7, #8
 80274be:	4611      	mov	r1, r2
 80274c0:	4618      	mov	r0, r3
 80274c2:	f7ff fa10 	bl	80268e6 <_ZSt12__miter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 80274c6:	6878      	ldr	r0, [r7, #4]
 80274c8:	3718      	adds	r7, #24
 80274ca:	46bd      	mov	sp, r7
 80274cc:	bd80      	pop	{r7, pc}

080274ce <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES2_ET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 80274ce:	b580      	push	{r7, lr}
 80274d0:	b084      	sub	sp, #16
 80274d2:	af00      	add	r7, sp, #0
 80274d4:	60f8      	str	r0, [r7, #12]
 80274d6:	60b9      	str	r1, [r7, #8]
 80274d8:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 80274da:	687a      	ldr	r2, [r7, #4]
 80274dc:	68b9      	ldr	r1, [r7, #8]
 80274de:	68f8      	ldr	r0, [r7, #12]
 80274e0:	f000 f862 	bl	80275a8 <_ZSt14__copy_move_a2ILb1EPN10BHYWrapper8BHYFrameES2_ET1_T0_S4_S3_>
 80274e4:	4603      	mov	r3, r0
 80274e6:	4618      	mov	r0, r3
 80274e8:	3710      	adds	r7, #16
 80274ea:	46bd      	mov	sp, r7
 80274ec:	bd80      	pop	{r7, pc}

080274ee <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES2_ET1_T0_S4_S3_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 80274ee:	b580      	push	{r7, lr}
 80274f0:	b084      	sub	sp, #16
 80274f2:	af00      	add	r7, sp, #0
 80274f4:	60f8      	str	r0, [r7, #12]
 80274f6:	60b9      	str	r1, [r7, #8]
 80274f8:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 80274fa:	687a      	ldr	r2, [r7, #4]
 80274fc:	68b9      	ldr	r1, [r7, #8]
 80274fe:	68f8      	ldr	r0, [r7, #12]
 8027500:	f000 f862 	bl	80275c8 <_ZSt23__copy_move_backward_a2ILb1EPN10BHYWrapper8BHYFrameES2_ET1_T0_S4_S3_>
 8027504:	4603      	mov	r3, r0
 8027506:	4618      	mov	r0, r3
 8027508:	3710      	adds	r7, #16
 802750a:	46bd      	mov	sp, r7
 802750c:	bd80      	pop	{r7, pc}

0802750e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPjEEPT_PKS4_S7_S5_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 802750e:	b580      	push	{r7, lr}
 8027510:	b086      	sub	sp, #24
 8027512:	af00      	add	r7, sp, #0
 8027514:	60f8      	str	r0, [r7, #12]
 8027516:	60b9      	str	r1, [r7, #8]
 8027518:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 802751a:	68ba      	ldr	r2, [r7, #8]
 802751c:	68fb      	ldr	r3, [r7, #12]
 802751e:	1ad3      	subs	r3, r2, r3
 8027520:	109b      	asrs	r3, r3, #2
 8027522:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8027524:	697b      	ldr	r3, [r7, #20]
 8027526:	2b00      	cmp	r3, #0
 8027528:	d006      	beq.n	8027538 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPjEEPT_PKS4_S7_S5_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 802752a:	697b      	ldr	r3, [r7, #20]
 802752c:	009b      	lsls	r3, r3, #2
 802752e:	461a      	mov	r2, r3
 8027530:	68f9      	ldr	r1, [r7, #12]
 8027532:	6878      	ldr	r0, [r7, #4]
 8027534:	f014 fc32 	bl	803bd9c <memmove>
	  return __result + _Num;
 8027538:	697b      	ldr	r3, [r7, #20]
 802753a:	009b      	lsls	r3, r3, #2
 802753c:	687a      	ldr	r2, [r7, #4]
 802753e:	4413      	add	r3, r2
	}
 8027540:	4618      	mov	r0, r3
 8027542:	3718      	adds	r7, #24
 8027544:	46bd      	mov	sp, r7
 8027546:	bd80      	pop	{r7, pc}

08027548 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPjEEPT_PKS4_S7_S5_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8027548:	b580      	push	{r7, lr}
 802754a:	b086      	sub	sp, #24
 802754c:	af00      	add	r7, sp, #0
 802754e:	60f8      	str	r0, [r7, #12]
 8027550:	60b9      	str	r1, [r7, #8]
 8027552:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8027554:	68ba      	ldr	r2, [r7, #8]
 8027556:	68fb      	ldr	r3, [r7, #12]
 8027558:	1ad3      	subs	r3, r2, r3
 802755a:	109b      	asrs	r3, r3, #2
 802755c:	617b      	str	r3, [r7, #20]
	  if (_Num)
 802755e:	697b      	ldr	r3, [r7, #20]
 8027560:	2b00      	cmp	r3, #0
 8027562:	d00a      	beq.n	802757a <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPjEEPT_PKS4_S7_S5_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8027564:	697b      	ldr	r3, [r7, #20]
 8027566:	009b      	lsls	r3, r3, #2
 8027568:	425b      	negs	r3, r3
 802756a:	687a      	ldr	r2, [r7, #4]
 802756c:	18d0      	adds	r0, r2, r3
 802756e:	697b      	ldr	r3, [r7, #20]
 8027570:	009b      	lsls	r3, r3, #2
 8027572:	461a      	mov	r2, r3
 8027574:	68f9      	ldr	r1, [r7, #12]
 8027576:	f014 fc11 	bl	803bd9c <memmove>
	  return __result - _Num;
 802757a:	697b      	ldr	r3, [r7, #20]
 802757c:	009b      	lsls	r3, r3, #2
 802757e:	425b      	negs	r3, r3
 8027580:	687a      	ldr	r2, [r7, #4]
 8027582:	4413      	add	r3, r2
	}
 8027584:	4618      	mov	r0, r3
 8027586:	3718      	adds	r7, #24
 8027588:	46bd      	mov	sp, r7
 802758a:	bd80      	pop	{r7, pc}

0802758c <_ZNKSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EE4baseEv>:
      base() const
 802758c:	b580      	push	{r7, lr}
 802758e:	b082      	sub	sp, #8
 8027590:	af00      	add	r7, sp, #0
 8027592:	6078      	str	r0, [r7, #4]
 8027594:	6039      	str	r1, [r7, #0]
      { return _M_current; }
 8027596:	683b      	ldr	r3, [r7, #0]
 8027598:	4619      	mov	r1, r3
 802759a:	6878      	ldr	r0, [r7, #4]
 802759c:	f7fc fea9 	bl	80242f2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80275a0:	6878      	ldr	r0, [r7, #4]
 80275a2:	3708      	adds	r7, #8
 80275a4:	46bd      	mov	sp, r7
 80275a6:	bd80      	pop	{r7, pc}

080275a8 <_ZSt14__copy_move_a2ILb1EPN10BHYWrapper8BHYFrameES2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80275a8:	b580      	push	{r7, lr}
 80275aa:	b084      	sub	sp, #16
 80275ac:	af00      	add	r7, sp, #0
 80275ae:	60f8      	str	r0, [r7, #12]
 80275b0:	60b9      	str	r1, [r7, #8]
 80275b2:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 80275b4:	687a      	ldr	r2, [r7, #4]
 80275b6:	68b9      	ldr	r1, [r7, #8]
 80275b8:	68f8      	ldr	r0, [r7, #12]
 80275ba:	f000 f815 	bl	80275e8 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_>
 80275be:	4603      	mov	r3, r0
    }
 80275c0:	4618      	mov	r0, r3
 80275c2:	3710      	adds	r7, #16
 80275c4:	46bd      	mov	sp, r7
 80275c6:	bd80      	pop	{r7, pc}

080275c8 <_ZSt23__copy_move_backward_a2ILb1EPN10BHYWrapper8BHYFrameES2_ET1_T0_S4_S3_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 80275c8:	b580      	push	{r7, lr}
 80275ca:	b084      	sub	sp, #16
 80275cc:	af00      	add	r7, sp, #0
 80275ce:	60f8      	str	r0, [r7, #12]
 80275d0:	60b9      	str	r1, [r7, #8]
 80275d2:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 80275d4:	687a      	ldr	r2, [r7, #4]
 80275d6:	68b9      	ldr	r1, [r7, #8]
 80275d8:	68f8      	ldr	r0, [r7, #12]
 80275da:	f000 f82f 	bl	802763c <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_>
 80275de:	4603      	mov	r3, r0
    }
 80275e0:	4618      	mov	r0, r3
 80275e2:	3710      	adds	r7, #16
 80275e4:	46bd      	mov	sp, r7
 80275e6:	bd80      	pop	{r7, pc}

080275e8 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80275e8:	b580      	push	{r7, lr}
 80275ea:	b086      	sub	sp, #24
 80275ec:	af00      	add	r7, sp, #0
 80275ee:	60f8      	str	r0, [r7, #12]
 80275f0:	60b9      	str	r1, [r7, #8]
 80275f2:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80275f4:	68ba      	ldr	r2, [r7, #8]
 80275f6:	68fb      	ldr	r3, [r7, #12]
 80275f8:	1ad3      	subs	r3, r2, r3
 80275fa:	109b      	asrs	r3, r3, #2
 80275fc:	4a0e      	ldr	r2, [pc, #56]	; (8027638 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_+0x50>)
 80275fe:	fb02 f303 	mul.w	r3, r2, r3
 8027602:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8027604:	697b      	ldr	r3, [r7, #20]
 8027606:	2b00      	cmp	r3, #0
 8027608:	d009      	beq.n	802761e <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_+0x36>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 802760a:	697a      	ldr	r2, [r7, #20]
 802760c:	4613      	mov	r3, r2
 802760e:	009b      	lsls	r3, r3, #2
 8027610:	4413      	add	r3, r2
 8027612:	009b      	lsls	r3, r3, #2
 8027614:	461a      	mov	r2, r3
 8027616:	68f9      	ldr	r1, [r7, #12]
 8027618:	6878      	ldr	r0, [r7, #4]
 802761a:	f014 fbbf 	bl	803bd9c <memmove>
	  return __result + _Num;
 802761e:	697a      	ldr	r2, [r7, #20]
 8027620:	4613      	mov	r3, r2
 8027622:	009b      	lsls	r3, r3, #2
 8027624:	4413      	add	r3, r2
 8027626:	009b      	lsls	r3, r3, #2
 8027628:	461a      	mov	r2, r3
 802762a:	687b      	ldr	r3, [r7, #4]
 802762c:	4413      	add	r3, r2
	}
 802762e:	4618      	mov	r0, r3
 8027630:	3718      	adds	r7, #24
 8027632:	46bd      	mov	sp, r7
 8027634:	bd80      	pop	{r7, pc}
 8027636:	bf00      	nop
 8027638:	cccccccd 	.word	0xcccccccd

0802763c <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 802763c:	b580      	push	{r7, lr}
 802763e:	b086      	sub	sp, #24
 8027640:	af00      	add	r7, sp, #0
 8027642:	60f8      	str	r0, [r7, #12]
 8027644:	60b9      	str	r1, [r7, #8]
 8027646:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8027648:	68ba      	ldr	r2, [r7, #8]
 802764a:	68fb      	ldr	r3, [r7, #12]
 802764c:	1ad3      	subs	r3, r2, r3
 802764e:	109b      	asrs	r3, r3, #2
 8027650:	4a11      	ldr	r2, [pc, #68]	; (8027698 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_+0x5c>)
 8027652:	fb02 f303 	mul.w	r3, r2, r3
 8027656:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8027658:	697b      	ldr	r3, [r7, #20]
 802765a:	2b00      	cmp	r3, #0
 802765c:	d010      	beq.n	8027680 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_+0x44>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 802765e:	697a      	ldr	r2, [r7, #20]
 8027660:	4613      	mov	r3, r2
 8027662:	009b      	lsls	r3, r3, #2
 8027664:	4413      	add	r3, r2
 8027666:	009b      	lsls	r3, r3, #2
 8027668:	425b      	negs	r3, r3
 802766a:	687a      	ldr	r2, [r7, #4]
 802766c:	18d0      	adds	r0, r2, r3
 802766e:	697a      	ldr	r2, [r7, #20]
 8027670:	4613      	mov	r3, r2
 8027672:	009b      	lsls	r3, r3, #2
 8027674:	4413      	add	r3, r2
 8027676:	009b      	lsls	r3, r3, #2
 8027678:	461a      	mov	r2, r3
 802767a:	68f9      	ldr	r1, [r7, #12]
 802767c:	f014 fb8e 	bl	803bd9c <memmove>
	  return __result - _Num;
 8027680:	697a      	ldr	r2, [r7, #20]
 8027682:	4613      	mov	r3, r2
 8027684:	009b      	lsls	r3, r3, #2
 8027686:	4413      	add	r3, r2
 8027688:	009b      	lsls	r3, r3, #2
 802768a:	425b      	negs	r3, r3
 802768c:	687a      	ldr	r2, [r7, #4]
 802768e:	4413      	add	r3, r2
	}
 8027690:	4618      	mov	r0, r3
 8027692:	3718      	adds	r7, #24
 8027694:	46bd      	mov	sp, r7
 8027696:	bd80      	pop	{r7, pc}
 8027698:	cccccccd 	.word	0xcccccccd

0802769c <_Z41__static_initialization_and_destruction_0ii>:
 802769c:	b580      	push	{r7, lr}
 802769e:	b082      	sub	sp, #8
 80276a0:	af00      	add	r7, sp, #0
 80276a2:	6078      	str	r0, [r7, #4]
 80276a4:	6039      	str	r1, [r7, #0]
 80276a6:	687b      	ldr	r3, [r7, #4]
 80276a8:	2b01      	cmp	r3, #1
 80276aa:	d107      	bne.n	80276bc <_Z41__static_initialization_and_destruction_0ii+0x20>
 80276ac:	683b      	ldr	r3, [r7, #0]
 80276ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80276b2:	4293      	cmp	r3, r2
 80276b4:	d102      	bne.n	80276bc <_Z41__static_initialization_and_destruction_0ii+0x20>
static MotherboardContext mbctx;
 80276b6:	4809      	ldr	r0, [pc, #36]	; (80276dc <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80276b8:	f7fb fbe4 	bl	8022e84 <_ZN18MotherboardContextC1Ev>
 80276bc:	687b      	ldr	r3, [r7, #4]
 80276be:	2b00      	cmp	r3, #0
 80276c0:	d107      	bne.n	80276d2 <_Z41__static_initialization_and_destruction_0ii+0x36>
 80276c2:	683b      	ldr	r3, [r7, #0]
 80276c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80276c8:	4293      	cmp	r3, r2
 80276ca:	d102      	bne.n	80276d2 <_Z41__static_initialization_and_destruction_0ii+0x36>
 80276cc:	4803      	ldr	r0, [pc, #12]	; (80276dc <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80276ce:	f7fb fc23 	bl	8022f18 <_ZN18MotherboardContextD1Ev>
}
 80276d2:	bf00      	nop
 80276d4:	3708      	adds	r7, #8
 80276d6:	46bd      	mov	sp, r7
 80276d8:	bd80      	pop	{r7, pc}
 80276da:	bf00      	nop
 80276dc:	240001d0 	.word	0x240001d0

080276e0 <_GLOBAL__sub_I_MotherboardInit>:
 80276e0:	b580      	push	{r7, lr}
 80276e2:	af00      	add	r7, sp, #0
 80276e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80276e8:	2001      	movs	r0, #1
 80276ea:	f7ff ffd7 	bl	802769c <_Z41__static_initialization_and_destruction_0ii>
 80276ee:	bd80      	pop	{r7, pc}

080276f0 <_GLOBAL__sub_D_MotherboardInit>:
 80276f0:	b580      	push	{r7, lr}
 80276f2:	af00      	add	r7, sp, #0
 80276f4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80276f8:	2000      	movs	r0, #0
 80276fa:	f7ff ffcf 	bl	802769c <_Z41__static_initialization_and_destruction_0ii>
 80276fe:	bd80      	pop	{r7, pc}

08027700 <bhy2_get_regs>:
static int8_t get_callback_info(uint8_t sensor_id,
                                struct bhy2_fifo_parse_callback_table *info,
                                const struct bhy2_dev *dev);

int8_t bhy2_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t length, struct bhy2_dev *dev)
{
 8027700:	b580      	push	{r7, lr}
 8027702:	b086      	sub	sp, #24
 8027704:	af00      	add	r7, sp, #0
 8027706:	60b9      	str	r1, [r7, #8]
 8027708:	607b      	str	r3, [r7, #4]
 802770a:	4603      	mov	r3, r0
 802770c:	73fb      	strb	r3, [r7, #15]
 802770e:	4613      	mov	r3, r2
 8027710:	81bb      	strh	r3, [r7, #12]
    int8_t rslt = BHY2_OK;
 8027712:	2300      	movs	r3, #0
 8027714:	75fb      	strb	r3, [r7, #23]

    if (dev != NULL)
 8027716:	687b      	ldr	r3, [r7, #4]
 8027718:	2b00      	cmp	r3, #0
 802771a:	d008      	beq.n	802772e <bhy2_get_regs+0x2e>
    {
        rslt = bhy2_hif_get_regs(reg_addr, reg_data, length, &dev->hif);
 802771c:	89ba      	ldrh	r2, [r7, #12]
 802771e:	687b      	ldr	r3, [r7, #4]
 8027720:	7bf8      	ldrb	r0, [r7, #15]
 8027722:	68b9      	ldr	r1, [r7, #8]
 8027724:	f001 f925 	bl	8028972 <bhy2_hif_get_regs>
 8027728:	4603      	mov	r3, r0
 802772a:	75fb      	strb	r3, [r7, #23]
 802772c:	e001      	b.n	8027732 <bhy2_get_regs+0x32>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 802772e:	23ff      	movs	r3, #255	; 0xff
 8027730:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8027732:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8027736:	4618      	mov	r0, r3
 8027738:	3718      	adds	r7, #24
 802773a:	46bd      	mov	sp, r7
 802773c:	bd80      	pop	{r7, pc}

0802773e <bhy2_get_and_process_fifo>:

    return rslt;
}

int8_t bhy2_get_and_process_fifo(uint8_t *work_buffer, uint32_t buffer_size, struct bhy2_dev *dev)
{
 802773e:	b590      	push	{r4, r7, lr}
 8027740:	b08f      	sub	sp, #60	; 0x3c
 8027742:	af02      	add	r7, sp, #8
 8027744:	60f8      	str	r0, [r7, #12]
 8027746:	60b9      	str	r1, [r7, #8]
 8027748:	607a      	str	r2, [r7, #4]
    uint8_t int_status, int_status_bak;
    uint32_t bytes_read = 0;
 802774a:	2300      	movs	r3, #0
 802774c:	62bb      	str	r3, [r7, #40]	; 0x28
    int8_t rslt;
    struct bhy2_fifo_buffer fifos;

    if ((dev == NULL) || (work_buffer == NULL))
 802774e:	687b      	ldr	r3, [r7, #4]
 8027750:	2b00      	cmp	r3, #0
 8027752:	d002      	beq.n	802775a <bhy2_get_and_process_fifo+0x1c>
 8027754:	68fb      	ldr	r3, [r7, #12]
 8027756:	2b00      	cmp	r3, #0
 8027758:	d102      	bne.n	8027760 <bhy2_get_and_process_fifo+0x22>
    {
        return BHY2_E_NULL_PTR;
 802775a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802775e:	e11b      	b.n	8027998 <bhy2_get_and_process_fifo+0x25a>
    }

    if (buffer_size == 0)
 8027760:	68bb      	ldr	r3, [r7, #8]
 8027762:	2b00      	cmp	r3, #0
 8027764:	d102      	bne.n	802776c <bhy2_get_and_process_fifo+0x2e>
    {
        return BHY2_E_BUFFER;
 8027766:	f06f 0305 	mvn.w	r3, #5
 802776a:	e115      	b.n	8027998 <bhy2_get_and_process_fifo+0x25a>
    }

    memset(work_buffer, 0, buffer_size);
 802776c:	68ba      	ldr	r2, [r7, #8]
 802776e:	2100      	movs	r1, #0
 8027770:	68f8      	ldr	r0, [r7, #12]
 8027772:	f014 fb2d 	bl	803bdd0 <memset>
    memset(&fifos, 0, sizeof(struct bhy2_fifo_buffer));
 8027776:	f107 0314 	add.w	r3, r7, #20
 802777a:	2214      	movs	r2, #20
 802777c:	2100      	movs	r1, #0
 802777e:	4618      	mov	r0, r3
 8027780:	f014 fb26 	bl	803bdd0 <memset>

    fifos.buffer = work_buffer;
 8027784:	68fb      	ldr	r3, [r7, #12]
 8027786:	627b      	str	r3, [r7, #36]	; 0x24
    fifos.buffer_size = buffer_size;
 8027788:	68bb      	ldr	r3, [r7, #8]
 802778a:	623b      	str	r3, [r7, #32]

    rslt = bhy2_hif_get_interrupt_status(&int_status_bak, &dev->hif);
 802778c:	687a      	ldr	r2, [r7, #4]
 802778e:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 8027792:	4611      	mov	r1, r2
 8027794:	4618      	mov	r0, r3
 8027796:	f001 fa5f 	bl	8028c58 <bhy2_hif_get_interrupt_status>
 802779a:	4603      	mov	r3, r0
 802779c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    if (rslt != BHY2_OK)
 80277a0:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 80277a4:	2b00      	cmp	r3, #0
 80277a6:	d002      	beq.n	80277ae <bhy2_get_and_process_fifo+0x70>
    {
        return rslt;
 80277a8:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 80277ac:	e0f4      	b.n	8027998 <bhy2_get_and_process_fifo+0x25a>
    }

    /* Get and process the Wake up FIFO */
    fifos.read_length = 0;
 80277ae:	2300      	movs	r3, #0
 80277b0:	61bb      	str	r3, [r7, #24]
    int_status = int_status_bak;
 80277b2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80277b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 80277ba:	e042      	b.n	8027842 <bhy2_get_and_process_fifo+0x104>
    {
        if (((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_DRDY) ||
 80277bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80277c0:	f003 0306 	and.w	r3, r3, #6
 80277c4:	2b02      	cmp	r3, #2
 80277c6:	d00e      	beq.n	80277e6 <bhy2_get_and_process_fifo+0xa8>
            ((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_LTCY) ||
 80277c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80277cc:	f003 0306 	and.w	r3, r3, #6
        if (((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_DRDY) ||
 80277d0:	2b04      	cmp	r3, #4
 80277d2:	d008      	beq.n	80277e6 <bhy2_get_and_process_fifo+0xa8>
            ((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_WM) || (fifos.remain_length))
 80277d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80277d8:	f003 0306 	and.w	r3, r3, #6
            ((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_LTCY) ||
 80277dc:	2b06      	cmp	r3, #6
 80277de:	d002      	beq.n	80277e6 <bhy2_get_and_process_fifo+0xa8>
            ((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_WM) || (fifos.remain_length))
 80277e0:	69fb      	ldr	r3, [r7, #28]
 80277e2:	2b00      	cmp	r3, #0
 80277e4:	d020      	beq.n	8027828 <bhy2_get_and_process_fifo+0xea>
        {
            /* Reset read_pos to the start of the buffer */
            fifos.read_pos = 0;
 80277e6:	2300      	movs	r3, #0
 80277e8:	617b      	str	r3, [r7, #20]

            /* Append data into the work_buffer linked through fifos */
            rslt = bhy2_hif_get_wakeup_fifo(&fifos.buffer[fifos.read_length],
 80277ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80277ec:	69bb      	ldr	r3, [r7, #24]
 80277ee:	18d0      	adds	r0, r2, r3
                                            (fifos.buffer_size - fifos.read_length),
 80277f0:	6a3a      	ldr	r2, [r7, #32]
 80277f2:	69bb      	ldr	r3, [r7, #24]
            rslt = bhy2_hif_get_wakeup_fifo(&fifos.buffer[fifos.read_length],
 80277f4:	1ad1      	subs	r1, r2, r3
 80277f6:	687b      	ldr	r3, [r7, #4]
 80277f8:	f107 0214 	add.w	r2, r7, #20
 80277fc:	f102 0408 	add.w	r4, r2, #8
 8027800:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8027804:	9300      	str	r3, [sp, #0]
 8027806:	4623      	mov	r3, r4
 8027808:	f001 fad7 	bl	8028dba <bhy2_hif_get_wakeup_fifo>
 802780c:	4603      	mov	r3, r0
 802780e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                                            &bytes_read,
                                            &fifos.remain_length,
                                            &dev->hif);
            if (rslt != BHY2_OK)
 8027812:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8027816:	2b00      	cmp	r3, #0
 8027818:	d002      	beq.n	8027820 <bhy2_get_and_process_fifo+0xe2>
            {
                return rslt;
 802781a:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 802781e:	e0bb      	b.n	8027998 <bhy2_get_and_process_fifo+0x25a>
            }
            fifos.read_length += bytes_read;
 8027820:	69ba      	ldr	r2, [r7, #24]
 8027822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8027824:	4413      	add	r3, r2
 8027826:	61bb      	str	r3, [r7, #24]
        }

        rslt = parse_fifo(BHY2_FIFO_TYPE_WAKEUP, &fifos, dev);
 8027828:	f107 0314 	add.w	r3, r7, #20
 802782c:	687a      	ldr	r2, [r7, #4]
 802782e:	4619      	mov	r1, r3
 8027830:	2000      	movs	r0, #0
 8027832:	f000 fbad 	bl	8027f90 <parse_fifo>
 8027836:	4603      	mov	r3, r0
 8027838:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        int_status = 0;
 802783c:	2300      	movs	r3, #0
 802783e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 8027842:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8027846:	2b00      	cmp	r3, #0
 8027848:	d102      	bne.n	8027850 <bhy2_get_and_process_fifo+0x112>
 802784a:	69fb      	ldr	r3, [r7, #28]
 802784c:	2b00      	cmp	r3, #0
 802784e:	d003      	beq.n	8027858 <bhy2_get_and_process_fifo+0x11a>
 8027850:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8027854:	2b00      	cmp	r3, #0
 8027856:	d0b1      	beq.n	80277bc <bhy2_get_and_process_fifo+0x7e>
    }

    /* Get and process the Non Wake-up FIFO */
    fifos.read_length = 0;
 8027858:	2300      	movs	r3, #0
 802785a:	61bb      	str	r3, [r7, #24]
    int_status = int_status_bak;
 802785c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8027860:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 8027864:	e042      	b.n	80278ec <bhy2_get_and_process_fifo+0x1ae>
    {
        if (((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_DRDY) ||
 8027866:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802786a:	f003 0318 	and.w	r3, r3, #24
 802786e:	2b08      	cmp	r3, #8
 8027870:	d00e      	beq.n	8027890 <bhy2_get_and_process_fifo+0x152>
            ((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_LTCY) ||
 8027872:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8027876:	f003 0318 	and.w	r3, r3, #24
        if (((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_DRDY) ||
 802787a:	2b10      	cmp	r3, #16
 802787c:	d008      	beq.n	8027890 <bhy2_get_and_process_fifo+0x152>
            ((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_WM) || (fifos.remain_length))
 802787e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8027882:	f003 0318 	and.w	r3, r3, #24
            ((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_LTCY) ||
 8027886:	2b18      	cmp	r3, #24
 8027888:	d002      	beq.n	8027890 <bhy2_get_and_process_fifo+0x152>
            ((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_WM) || (fifos.remain_length))
 802788a:	69fb      	ldr	r3, [r7, #28]
 802788c:	2b00      	cmp	r3, #0
 802788e:	d020      	beq.n	80278d2 <bhy2_get_and_process_fifo+0x194>
        {
            /* Reset read_pos to the start of the buffer */
            fifos.read_pos = 0;
 8027890:	2300      	movs	r3, #0
 8027892:	617b      	str	r3, [r7, #20]

            /* Append data into the work_buffer linked through fifos */
            rslt = bhy2_hif_get_nonwakeup_fifo(&fifos.buffer[fifos.read_length],
 8027894:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8027896:	69bb      	ldr	r3, [r7, #24]
 8027898:	18d0      	adds	r0, r2, r3
                                               (fifos.buffer_size - fifos.read_length),
 802789a:	6a3a      	ldr	r2, [r7, #32]
 802789c:	69bb      	ldr	r3, [r7, #24]
            rslt = bhy2_hif_get_nonwakeup_fifo(&fifos.buffer[fifos.read_length],
 802789e:	1ad1      	subs	r1, r2, r3
 80278a0:	687b      	ldr	r3, [r7, #4]
 80278a2:	f107 0214 	add.w	r2, r7, #20
 80278a6:	f102 0408 	add.w	r4, r2, #8
 80278aa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80278ae:	9300      	str	r3, [sp, #0]
 80278b0:	4623      	mov	r3, r4
 80278b2:	f001 fa98 	bl	8028de6 <bhy2_hif_get_nonwakeup_fifo>
 80278b6:	4603      	mov	r3, r0
 80278b8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                                               &bytes_read,
                                               &fifos.remain_length,
                                               &dev->hif);
            if (rslt != BHY2_OK)
 80278bc:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 80278c0:	2b00      	cmp	r3, #0
 80278c2:	d002      	beq.n	80278ca <bhy2_get_and_process_fifo+0x18c>
            {
                return rslt;
 80278c4:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 80278c8:	e066      	b.n	8027998 <bhy2_get_and_process_fifo+0x25a>
            }
            fifos.read_length += bytes_read;
 80278ca:	69ba      	ldr	r2, [r7, #24]
 80278cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80278ce:	4413      	add	r3, r2
 80278d0:	61bb      	str	r3, [r7, #24]
        }

        rslt = parse_fifo(BHY2_FIFO_TYPE_NON_WAKEUP, &fifos, dev);
 80278d2:	f107 0314 	add.w	r3, r7, #20
 80278d6:	687a      	ldr	r2, [r7, #4]
 80278d8:	4619      	mov	r1, r3
 80278da:	2001      	movs	r0, #1
 80278dc:	f000 fb58 	bl	8027f90 <parse_fifo>
 80278e0:	4603      	mov	r3, r0
 80278e2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        int_status = 0;
 80278e6:	2300      	movs	r3, #0
 80278e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 80278ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80278f0:	2b00      	cmp	r3, #0
 80278f2:	d102      	bne.n	80278fa <bhy2_get_and_process_fifo+0x1bc>
 80278f4:	69fb      	ldr	r3, [r7, #28]
 80278f6:	2b00      	cmp	r3, #0
 80278f8:	d003      	beq.n	8027902 <bhy2_get_and_process_fifo+0x1c4>
 80278fa:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 80278fe:	2b00      	cmp	r3, #0
 8027900:	d0b1      	beq.n	8027866 <bhy2_get_and_process_fifo+0x128>
    }

    /* Get and process the Status fifo */
    fifos.read_length = 0;
 8027902:	2300      	movs	r3, #0
 8027904:	61bb      	str	r3, [r7, #24]
    int_status = int_status_bak;
 8027906:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 802790a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 802790e:	e036      	b.n	802797e <bhy2_get_and_process_fifo+0x240>
    {
        if ((((BHY2_IS_INT_ASYNC_STATUS(int_status)) == BHY2_IST_MASK_DEBUG) || (fifos.remain_length)))
 8027910:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8027914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8027918:	2b00      	cmp	r3, #0
 802791a:	d102      	bne.n	8027922 <bhy2_get_and_process_fifo+0x1e4>
 802791c:	69fb      	ldr	r3, [r7, #28]
 802791e:	2b00      	cmp	r3, #0
 8027920:	d020      	beq.n	8027964 <bhy2_get_and_process_fifo+0x226>
        {
            fifos.read_pos = 0;
 8027922:	2300      	movs	r3, #0
 8027924:	617b      	str	r3, [r7, #20]
            rslt =
                bhy2_hif_get_status_fifo_async(&fifos.buffer[fifos.read_length],
 8027926:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8027928:	69bb      	ldr	r3, [r7, #24]
 802792a:	18d0      	adds	r0, r2, r3
                                               (fifos.buffer_size - fifos.read_length),
 802792c:	6a3a      	ldr	r2, [r7, #32]
 802792e:	69bb      	ldr	r3, [r7, #24]
                bhy2_hif_get_status_fifo_async(&fifos.buffer[fifos.read_length],
 8027930:	1ad1      	subs	r1, r2, r3
 8027932:	687b      	ldr	r3, [r7, #4]
 8027934:	f107 0214 	add.w	r2, r7, #20
 8027938:	f102 0408 	add.w	r4, r2, #8
 802793c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8027940:	9300      	str	r3, [sp, #0]
 8027942:	4623      	mov	r3, r4
 8027944:	f001 fab0 	bl	8028ea8 <bhy2_hif_get_status_fifo_async>
 8027948:	4603      	mov	r3, r0
 802794a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                                               &bytes_read,
                                               &fifos.remain_length,
                                               &dev->hif);
            if (rslt != BHY2_OK)
 802794e:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8027952:	2b00      	cmp	r3, #0
 8027954:	d002      	beq.n	802795c <bhy2_get_and_process_fifo+0x21e>
            {
                return rslt;
 8027956:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 802795a:	e01d      	b.n	8027998 <bhy2_get_and_process_fifo+0x25a>
            }
            fifos.read_length += bytes_read;
 802795c:	69ba      	ldr	r2, [r7, #24]
 802795e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8027960:	4413      	add	r3, r2
 8027962:	61bb      	str	r3, [r7, #24]
        }

        rslt = parse_fifo(BHY2_FIFO_TYPE_STATUS, &fifos, dev);
 8027964:	f107 0314 	add.w	r3, r7, #20
 8027968:	687a      	ldr	r2, [r7, #4]
 802796a:	4619      	mov	r1, r3
 802796c:	2002      	movs	r0, #2
 802796e:	f000 fb0f 	bl	8027f90 <parse_fifo>
 8027972:	4603      	mov	r3, r0
 8027974:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        int_status = 0;
 8027978:	2300      	movs	r3, #0
 802797a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 802797e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8027982:	2b00      	cmp	r3, #0
 8027984:	d102      	bne.n	802798c <bhy2_get_and_process_fifo+0x24e>
 8027986:	69fb      	ldr	r3, [r7, #28]
 8027988:	2b00      	cmp	r3, #0
 802798a:	d003      	beq.n	8027994 <bhy2_get_and_process_fifo+0x256>
 802798c:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8027990:	2b00      	cmp	r3, #0
 8027992:	d0bd      	beq.n	8027910 <bhy2_get_and_process_fifo+0x1d2>
    }

    return rslt;
 8027994:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
}
 8027998:	4618      	mov	r0, r3
 802799a:	3734      	adds	r7, #52	; 0x34
 802799c:	46bd      	mov	sp, r7
 802799e:	bd90      	pop	{r4, r7, pc}

080279a0 <bhy2_set_virt_sensor_cfg>:

    return rslt;
}

int8_t bhy2_set_virt_sensor_cfg(uint8_t sensor_id, bhy2_float sample_rate, uint32_t latency, struct bhy2_dev *dev)
{
 80279a0:	b580      	push	{r7, lr}
 80279a2:	b086      	sub	sp, #24
 80279a4:	af00      	add	r7, sp, #0
 80279a6:	4603      	mov	r3, r0
 80279a8:	ed87 0a02 	vstr	s0, [r7, #8]
 80279ac:	6079      	str	r1, [r7, #4]
 80279ae:	603a      	str	r2, [r7, #0]
 80279b0:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 80279b2:	2300      	movs	r3, #0
 80279b4:	75fb      	strb	r3, [r7, #23]

    if (dev != NULL)
 80279b6:	683b      	ldr	r3, [r7, #0]
 80279b8:	2b00      	cmp	r3, #0
 80279ba:	d00a      	beq.n	80279d2 <bhy2_set_virt_sensor_cfg+0x32>
    {
        rslt = bhy2_hif_exec_sensor_conf_cmd(sensor_id, sample_rate, latency, &dev->hif);
 80279bc:	683a      	ldr	r2, [r7, #0]
 80279be:	7bfb      	ldrb	r3, [r7, #15]
 80279c0:	6879      	ldr	r1, [r7, #4]
 80279c2:	ed97 0a02 	vldr	s0, [r7, #8]
 80279c6:	4618      	mov	r0, r3
 80279c8:	f001 fa84 	bl	8028ed4 <bhy2_hif_exec_sensor_conf_cmd>
 80279cc:	4603      	mov	r3, r0
 80279ce:	75fb      	strb	r3, [r7, #23]
 80279d0:	e001      	b.n	80279d6 <bhy2_set_virt_sensor_cfg+0x36>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 80279d2:	23ff      	movs	r3, #255	; 0xff
 80279d4:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80279d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80279da:	4618      	mov	r0, r3
 80279dc:	3718      	adds	r7, #24
 80279de:	46bd      	mov	sp, r7
 80279e0:	bd80      	pop	{r7, pc}

080279e2 <bhy2_get_product_id>:

    return rslt;
}

int8_t bhy2_get_product_id(uint8_t *product_id, struct bhy2_dev *dev)
{
 80279e2:	b580      	push	{r7, lr}
 80279e4:	b084      	sub	sp, #16
 80279e6:	af00      	add	r7, sp, #0
 80279e8:	6078      	str	r0, [r7, #4]
 80279ea:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 80279ec:	2300      	movs	r3, #0
 80279ee:	73fb      	strb	r3, [r7, #15]

    if (dev != NULL)
 80279f0:	683b      	ldr	r3, [r7, #0]
 80279f2:	2b00      	cmp	r3, #0
 80279f4:	d007      	beq.n	8027a06 <bhy2_get_product_id+0x24>
    {
        rslt = bhy2_hif_get_product_id(product_id, &dev->hif);
 80279f6:	683b      	ldr	r3, [r7, #0]
 80279f8:	4619      	mov	r1, r3
 80279fa:	6878      	ldr	r0, [r7, #4]
 80279fc:	f001 f8e8 	bl	8028bd0 <bhy2_hif_get_product_id>
 8027a00:	4603      	mov	r3, r0
 8027a02:	73fb      	strb	r3, [r7, #15]
 8027a04:	e001      	b.n	8027a0a <bhy2_get_product_id+0x28>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8027a06:	23ff      	movs	r3, #255	; 0xff
 8027a08:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8027a0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8027a0e:	4618      	mov	r0, r3
 8027a10:	3710      	adds	r7, #16
 8027a12:	46bd      	mov	sp, r7
 8027a14:	bd80      	pop	{r7, pc}

08027a16 <bhy2_get_kernel_version>:

    return rslt;
}

int8_t bhy2_get_kernel_version(uint16_t *kernel_version, struct bhy2_dev *dev)
{
 8027a16:	b580      	push	{r7, lr}
 8027a18:	b084      	sub	sp, #16
 8027a1a:	af00      	add	r7, sp, #0
 8027a1c:	6078      	str	r0, [r7, #4]
 8027a1e:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8027a20:	2300      	movs	r3, #0
 8027a22:	73fb      	strb	r3, [r7, #15]

    if (dev != NULL)
 8027a24:	683b      	ldr	r3, [r7, #0]
 8027a26:	2b00      	cmp	r3, #0
 8027a28:	d007      	beq.n	8027a3a <bhy2_get_kernel_version+0x24>
    {
        rslt = bhy2_hif_get_kernel_version(kernel_version, &dev->hif);
 8027a2a:	683b      	ldr	r3, [r7, #0]
 8027a2c:	4619      	mov	r1, r3
 8027a2e:	6878      	ldr	r0, [r7, #4]
 8027a30:	f001 f8de 	bl	8028bf0 <bhy2_hif_get_kernel_version>
 8027a34:	4603      	mov	r3, r0
 8027a36:	73fb      	strb	r3, [r7, #15]
 8027a38:	e001      	b.n	8027a3e <bhy2_get_kernel_version+0x28>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8027a3a:	23ff      	movs	r3, #255	; 0xff
 8027a3c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8027a3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8027a42:	4618      	mov	r0, r3
 8027a44:	3710      	adds	r7, #16
 8027a46:	46bd      	mov	sp, r7
 8027a48:	bd80      	pop	{r7, pc}

08027a4a <bhy2_get_boot_status>:

    return rslt;
}

int8_t bhy2_get_boot_status(uint8_t *boot_status, struct bhy2_dev *dev)
{
 8027a4a:	b580      	push	{r7, lr}
 8027a4c:	b084      	sub	sp, #16
 8027a4e:	af00      	add	r7, sp, #0
 8027a50:	6078      	str	r0, [r7, #4]
 8027a52:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8027a54:	2300      	movs	r3, #0
 8027a56:	73fb      	strb	r3, [r7, #15]

    if (dev != NULL)
 8027a58:	683b      	ldr	r3, [r7, #0]
 8027a5a:	2b00      	cmp	r3, #0
 8027a5c:	d007      	beq.n	8027a6e <bhy2_get_boot_status+0x24>
    {
        rslt = bhy2_hif_get_boot_status(boot_status, &dev->hif);
 8027a5e:	683b      	ldr	r3, [r7, #0]
 8027a60:	4619      	mov	r1, r3
 8027a62:	6878      	ldr	r0, [r7, #4]
 8027a64:	f001 f8e8 	bl	8028c38 <bhy2_hif_get_boot_status>
 8027a68:	4603      	mov	r3, r0
 8027a6a:	73fb      	strb	r3, [r7, #15]
 8027a6c:	e001      	b.n	8027a72 <bhy2_get_boot_status+0x28>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8027a6e:	23ff      	movs	r3, #255	; 0xff
 8027a70:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8027a72:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8027a76:	4618      	mov	r0, r3
 8027a78:	3710      	adds	r7, #16
 8027a7a:	46bd      	mov	sp, r7
 8027a7c:	bd80      	pop	{r7, pc}

08027a7e <bhy2_get_virt_sensor_list>:

    return rslt;
}

int8_t bhy2_get_virt_sensor_list(uint8_t *sensor_list, struct bhy2_dev *dev)
{
 8027a7e:	b580      	push	{r7, lr}
 8027a80:	b086      	sub	sp, #24
 8027a82:	af02      	add	r7, sp, #8
 8027a84:	6078      	str	r0, [r7, #4]
 8027a86:	6039      	str	r1, [r7, #0]
    uint32_t bytes_read = 0;
 8027a88:	2300      	movs	r3, #0
 8027a8a:	60bb      	str	r3, [r7, #8]
    int8_t rslt = 0;
 8027a8c:	2300      	movs	r3, #0
 8027a8e:	73fb      	strb	r3, [r7, #15]

    if (dev != NULL)
 8027a90:	683b      	ldr	r3, [r7, #0]
 8027a92:	2b00      	cmp	r3, #0
 8027a94:	d00d      	beq.n	8027ab2 <bhy2_get_virt_sensor_list+0x34>
    {
        rslt = bhy2_hif_get_parameter(BHY2_PARAM_SYS_VIRT_SENSOR_PRESENT, sensor_list, 32, &bytes_read, &dev->hif);
 8027a96:	683b      	ldr	r3, [r7, #0]
 8027a98:	f107 0208 	add.w	r2, r7, #8
 8027a9c:	9300      	str	r3, [sp, #0]
 8027a9e:	4613      	mov	r3, r2
 8027aa0:	2220      	movs	r2, #32
 8027aa2:	6879      	ldr	r1, [r7, #4]
 8027aa4:	f240 101f 	movw	r0, #287	; 0x11f
 8027aa8:	f001 f80a 	bl	8028ac0 <bhy2_hif_get_parameter>
 8027aac:	4603      	mov	r3, r0
 8027aae:	73fb      	strb	r3, [r7, #15]
 8027ab0:	e001      	b.n	8027ab6 <bhy2_get_virt_sensor_list+0x38>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8027ab2:	23ff      	movs	r3, #255	; 0xff
 8027ab4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8027ab6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8027aba:	4618      	mov	r0, r3
 8027abc:	3710      	adds	r7, #16
 8027abe:	46bd      	mov	sp, r7
 8027ac0:	bd80      	pop	{r7, pc}

08027ac2 <bhy2_upload_firmware_to_ram>:

int8_t bhy2_upload_firmware_to_ram(const uint8_t *firmware, uint32_t length, struct bhy2_dev *dev)
{
 8027ac2:	b580      	push	{r7, lr}
 8027ac4:	b086      	sub	sp, #24
 8027ac6:	af00      	add	r7, sp, #0
 8027ac8:	60f8      	str	r0, [r7, #12]
 8027aca:	60b9      	str	r1, [r7, #8]
 8027acc:	607a      	str	r2, [r7, #4]
    int8_t rslt = BHY2_OK;
 8027ace:	2300      	movs	r3, #0
 8027ad0:	75fb      	strb	r3, [r7, #23]

    if ((dev == NULL) || (firmware == NULL))
 8027ad2:	687b      	ldr	r3, [r7, #4]
 8027ad4:	2b00      	cmp	r3, #0
 8027ad6:	d002      	beq.n	8027ade <bhy2_upload_firmware_to_ram+0x1c>
 8027ad8:	68fb      	ldr	r3, [r7, #12]
 8027ada:	2b00      	cmp	r3, #0
 8027adc:	d102      	bne.n	8027ae4 <bhy2_upload_firmware_to_ram+0x22>
    {
        rslt = BHY2_E_NULL_PTR;
 8027ade:	23ff      	movs	r3, #255	; 0xff
 8027ae0:	75fb      	strb	r3, [r7, #23]
 8027ae2:	e007      	b.n	8027af4 <bhy2_upload_firmware_to_ram+0x32>
    }
    else
    {
        rslt = bhy2_hif_upload_firmware_to_ram(firmware, length, &dev->hif);
 8027ae4:	687b      	ldr	r3, [r7, #4]
 8027ae6:	461a      	mov	r2, r3
 8027ae8:	68b9      	ldr	r1, [r7, #8]
 8027aea:	68f8      	ldr	r0, [r7, #12]
 8027aec:	f001 f90d 	bl	8028d0a <bhy2_hif_upload_firmware_to_ram>
 8027af0:	4603      	mov	r3, r0
 8027af2:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8027af4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8027af8:	4618      	mov	r0, r3
 8027afa:	3718      	adds	r7, #24
 8027afc:	46bd      	mov	sp, r7
 8027afe:	bd80      	pop	{r7, pc}

08027b00 <bhy2_boot_from_ram>:

    return rslt;
}

int8_t bhy2_boot_from_ram(struct bhy2_dev *dev)
{
 8027b00:	b580      	push	{r7, lr}
 8027b02:	b084      	sub	sp, #16
 8027b04:	af00      	add	r7, sp, #0
 8027b06:	6078      	str	r0, [r7, #4]
    int8_t rslt = BHY2_OK;
 8027b08:	2300      	movs	r3, #0
 8027b0a:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 8027b0c:	687b      	ldr	r3, [r7, #4]
 8027b0e:	2b00      	cmp	r3, #0
 8027b10:	d102      	bne.n	8027b18 <bhy2_boot_from_ram+0x18>
    {
        rslt = BHY2_E_NULL_PTR;
 8027b12:	23ff      	movs	r3, #255	; 0xff
 8027b14:	73fb      	strb	r3, [r7, #15]
 8027b16:	e005      	b.n	8027b24 <bhy2_boot_from_ram+0x24>
    }
    else
    {
        rslt = bhy2_hif_boot_program_ram(&dev->hif);
 8027b18:	687b      	ldr	r3, [r7, #4]
 8027b1a:	4618      	mov	r0, r3
 8027b1c:	f001 f932 	bl	8028d84 <bhy2_hif_boot_program_ram>
 8027b20:	4603      	mov	r3, r0
 8027b22:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8027b24:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8027b28:	4618      	mov	r0, r3
 8027b2a:	3710      	adds	r7, #16
 8027b2c:	46bd      	mov	sp, r7
 8027b2e:	bd80      	pop	{r7, pc}

08027b30 <bhy2_set_host_interrupt_ctrl>:

    return rslt;
}

int8_t bhy2_set_host_interrupt_ctrl(uint8_t hintr_ctrl, struct bhy2_dev *dev)
{
 8027b30:	b580      	push	{r7, lr}
 8027b32:	b084      	sub	sp, #16
 8027b34:	af00      	add	r7, sp, #0
 8027b36:	4603      	mov	r3, r0
 8027b38:	6039      	str	r1, [r7, #0]
 8027b3a:	71fb      	strb	r3, [r7, #7]
    int8_t rslt = BHY2_OK;
 8027b3c:	2300      	movs	r3, #0
 8027b3e:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 8027b40:	683b      	ldr	r3, [r7, #0]
 8027b42:	2b00      	cmp	r3, #0
 8027b44:	d102      	bne.n	8027b4c <bhy2_set_host_interrupt_ctrl+0x1c>
    {
        rslt = BHY2_E_NULL_PTR;
 8027b46:	23ff      	movs	r3, #255	; 0xff
 8027b48:	73fb      	strb	r3, [r7, #15]
 8027b4a:	e007      	b.n	8027b5c <bhy2_set_host_interrupt_ctrl+0x2c>
    }
    else
    {
        rslt = bhy2_hif_set_regs(BHY2_REG_HOST_INTERRUPT_CTRL, &hintr_ctrl, 1, &dev->hif);
 8027b4c:	683b      	ldr	r3, [r7, #0]
 8027b4e:	1df9      	adds	r1, r7, #7
 8027b50:	2201      	movs	r2, #1
 8027b52:	2007      	movs	r0, #7
 8027b54:	f000 ff45 	bl	80289e2 <bhy2_hif_set_regs>
 8027b58:	4603      	mov	r3, r0
 8027b5a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8027b5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8027b60:	4618      	mov	r0, r3
 8027b62:	3710      	adds	r7, #16
 8027b64:	46bd      	mov	sp, r7
 8027b66:	bd80      	pop	{r7, pc}

08027b68 <bhy2_get_host_interrupt_ctrl>:

int8_t bhy2_get_host_interrupt_ctrl(uint8_t *hintr_ctrl, struct bhy2_dev *dev)
{
 8027b68:	b580      	push	{r7, lr}
 8027b6a:	b084      	sub	sp, #16
 8027b6c:	af00      	add	r7, sp, #0
 8027b6e:	6078      	str	r0, [r7, #4]
 8027b70:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8027b72:	2300      	movs	r3, #0
 8027b74:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 8027b76:	683b      	ldr	r3, [r7, #0]
 8027b78:	2b00      	cmp	r3, #0
 8027b7a:	d102      	bne.n	8027b82 <bhy2_get_host_interrupt_ctrl+0x1a>
    {
        rslt = BHY2_E_NULL_PTR;
 8027b7c:	23ff      	movs	r3, #255	; 0xff
 8027b7e:	73fb      	strb	r3, [r7, #15]
 8027b80:	e007      	b.n	8027b92 <bhy2_get_host_interrupt_ctrl+0x2a>
    }
    else
    {
        rslt = bhy2_hif_get_regs(BHY2_REG_HOST_INTERRUPT_CTRL, hintr_ctrl, 1, &dev->hif);
 8027b82:	683b      	ldr	r3, [r7, #0]
 8027b84:	2201      	movs	r2, #1
 8027b86:	6879      	ldr	r1, [r7, #4]
 8027b88:	2007      	movs	r0, #7
 8027b8a:	f000 fef2 	bl	8028972 <bhy2_hif_get_regs>
 8027b8e:	4603      	mov	r3, r0
 8027b90:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8027b92:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8027b96:	4618      	mov	r0, r3
 8027b98:	3710      	adds	r7, #16
 8027b9a:	46bd      	mov	sp, r7
 8027b9c:	bd80      	pop	{r7, pc}

08027b9e <bhy2_get_interrupt_status>:

int8_t bhy2_get_interrupt_status(uint8_t *int_status, struct bhy2_dev *dev)
{
 8027b9e:	b580      	push	{r7, lr}
 8027ba0:	b084      	sub	sp, #16
 8027ba2:	af00      	add	r7, sp, #0
 8027ba4:	6078      	str	r0, [r7, #4]
 8027ba6:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8027ba8:	2300      	movs	r3, #0
 8027baa:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 8027bac:	683b      	ldr	r3, [r7, #0]
 8027bae:	2b00      	cmp	r3, #0
 8027bb0:	d102      	bne.n	8027bb8 <bhy2_get_interrupt_status+0x1a>
    {
        rslt = BHY2_E_NULL_PTR;
 8027bb2:	23ff      	movs	r3, #255	; 0xff
 8027bb4:	73fb      	strb	r3, [r7, #15]
 8027bb6:	e006      	b.n	8027bc6 <bhy2_get_interrupt_status+0x28>
    }
    else
    {
        rslt = bhy2_hif_get_interrupt_status(int_status, &dev->hif);
 8027bb8:	683b      	ldr	r3, [r7, #0]
 8027bba:	4619      	mov	r1, r3
 8027bbc:	6878      	ldr	r0, [r7, #4]
 8027bbe:	f001 f84b 	bl	8028c58 <bhy2_hif_get_interrupt_status>
 8027bc2:	4603      	mov	r3, r0
 8027bc4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8027bc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8027bca:	4618      	mov	r0, r3
 8027bcc:	3710      	adds	r7, #16
 8027bce:	46bd      	mov	sp, r7
 8027bd0:	bd80      	pop	{r7, pc}

08027bd2 <bhy2_set_host_intf_ctrl>:

int8_t bhy2_set_host_intf_ctrl(uint8_t hintf_ctrl, struct bhy2_dev *dev)
{
 8027bd2:	b580      	push	{r7, lr}
 8027bd4:	b084      	sub	sp, #16
 8027bd6:	af00      	add	r7, sp, #0
 8027bd8:	4603      	mov	r3, r0
 8027bda:	6039      	str	r1, [r7, #0]
 8027bdc:	71fb      	strb	r3, [r7, #7]
    int8_t rslt = BHY2_OK;
 8027bde:	2300      	movs	r3, #0
 8027be0:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 8027be2:	683b      	ldr	r3, [r7, #0]
 8027be4:	2b00      	cmp	r3, #0
 8027be6:	d102      	bne.n	8027bee <bhy2_set_host_intf_ctrl+0x1c>
    {
        rslt = BHY2_E_NULL_PTR;
 8027be8:	23ff      	movs	r3, #255	; 0xff
 8027bea:	73fb      	strb	r3, [r7, #15]
 8027bec:	e007      	b.n	8027bfe <bhy2_set_host_intf_ctrl+0x2c>
    }
    else
    {
        rslt = bhy2_hif_set_regs(BHY2_REG_HOST_INTERFACE_CTRL, &hintf_ctrl, 1, &dev->hif);
 8027bee:	683b      	ldr	r3, [r7, #0]
 8027bf0:	1df9      	adds	r1, r7, #7
 8027bf2:	2201      	movs	r2, #1
 8027bf4:	2006      	movs	r0, #6
 8027bf6:	f000 fef4 	bl	80289e2 <bhy2_hif_set_regs>
 8027bfa:	4603      	mov	r3, r0
 8027bfc:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8027bfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8027c02:	4618      	mov	r0, r3
 8027c04:	3710      	adds	r7, #16
 8027c06:	46bd      	mov	sp, r7
 8027c08:	bd80      	pop	{r7, pc}

08027c0a <bhy2_soft_reset>:

    return rslt;
}

int8_t bhy2_soft_reset(struct bhy2_dev *dev)
{
 8027c0a:	b580      	push	{r7, lr}
 8027c0c:	b084      	sub	sp, #16
 8027c0e:	af00      	add	r7, sp, #0
 8027c10:	6078      	str	r0, [r7, #4]
    int8_t rslt = BHY2_OK;
 8027c12:	2300      	movs	r3, #0
 8027c14:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 8027c16:	687b      	ldr	r3, [r7, #4]
 8027c18:	2b00      	cmp	r3, #0
 8027c1a:	d102      	bne.n	8027c22 <bhy2_soft_reset+0x18>
    {
        rslt = BHY2_E_NULL_PTR;
 8027c1c:	23ff      	movs	r3, #255	; 0xff
 8027c1e:	73fb      	strb	r3, [r7, #15]
 8027c20:	e005      	b.n	8027c2e <bhy2_soft_reset+0x24>
    }
    else
    {
        rslt = bhy2_hif_reset(&dev->hif);
 8027c22:	687b      	ldr	r3, [r7, #4]
 8027c24:	4618      	mov	r0, r3
 8027c26:	f001 f827 	bl	8028c78 <bhy2_hif_reset>
 8027c2a:	4603      	mov	r3, r0
 8027c2c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8027c2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8027c32:	4618      	mov	r0, r3
 8027c34:	3710      	adds	r7, #16
 8027c36:	46bd      	mov	sp, r7
 8027c38:	bd80      	pop	{r7, pc}

08027c3a <bhy2_init>:
                 bhy2_write_fptr_t write,
                 bhy2_delay_us_fptr_t delay_us,
                 uint32_t read_write_len,
                 void *intf_ptr,
                 struct bhy2_dev *dev)
{
 8027c3a:	b580      	push	{r7, lr}
 8027c3c:	b08a      	sub	sp, #40	; 0x28
 8027c3e:	af04      	add	r7, sp, #16
 8027c40:	60b9      	str	r1, [r7, #8]
 8027c42:	607a      	str	r2, [r7, #4]
 8027c44:	603b      	str	r3, [r7, #0]
 8027c46:	4603      	mov	r3, r0
 8027c48:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8027c4a:	2300      	movs	r3, #0
 8027c4c:	75fb      	strb	r3, [r7, #23]

    if (dev != NULL)
 8027c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8027c50:	2b00      	cmp	r3, #0
 8027c52:	d014      	beq.n	8027c7e <bhy2_init+0x44>
    {
        memset(dev, 0, sizeof(struct bhy2_dev));
 8027c54:	f640 1238 	movw	r2, #2360	; 0x938
 8027c58:	2100      	movs	r1, #0
 8027c5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8027c5c:	f014 f8b8 	bl	803bdd0 <memset>

        rslt = bhy2_hif_init(intf, read, write, delay_us, read_write_len, intf_ptr, &dev->hif);
 8027c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8027c62:	7bf8      	ldrb	r0, [r7, #15]
 8027c64:	9302      	str	r3, [sp, #8]
 8027c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027c68:	9301      	str	r3, [sp, #4]
 8027c6a:	6a3b      	ldr	r3, [r7, #32]
 8027c6c:	9300      	str	r3, [sp, #0]
 8027c6e:	683b      	ldr	r3, [r7, #0]
 8027c70:	687a      	ldr	r2, [r7, #4]
 8027c72:	68b9      	ldr	r1, [r7, #8]
 8027c74:	f000 fe3e 	bl	80288f4 <bhy2_hif_init>
 8027c78:	4603      	mov	r3, r0
 8027c7a:	75fb      	strb	r3, [r7, #23]
 8027c7c:	e001      	b.n	8027c82 <bhy2_init+0x48>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8027c7e:	23ff      	movs	r3, #255	; 0xff
 8027c80:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8027c82:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8027c86:	4618      	mov	r0, r3
 8027c88:	3718      	adds	r7, #24
 8027c8a:	46bd      	mov	sp, r7
 8027c8c:	bd80      	pop	{r7, pc}

08027c8e <bhy2_register_fifo_parse_callback>:

int8_t bhy2_register_fifo_parse_callback(uint8_t sensor_id,
                                         bhy2_fifo_parse_callback_t callback,
                                         void *callback_ref,
                                         struct bhy2_dev *dev)
{
 8027c8e:	b480      	push	{r7}
 8027c90:	b087      	sub	sp, #28
 8027c92:	af00      	add	r7, sp, #0
 8027c94:	60b9      	str	r1, [r7, #8]
 8027c96:	607a      	str	r2, [r7, #4]
 8027c98:	603b      	str	r3, [r7, #0]
 8027c9a:	4603      	mov	r3, r0
 8027c9c:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8027c9e:	2300      	movs	r3, #0
 8027ca0:	75fb      	strb	r3, [r7, #23]

    if ((dev == NULL) || (callback == NULL))
 8027ca2:	683b      	ldr	r3, [r7, #0]
 8027ca4:	2b00      	cmp	r3, #0
 8027ca6:	d002      	beq.n	8027cae <bhy2_register_fifo_parse_callback+0x20>
 8027ca8:	68bb      	ldr	r3, [r7, #8]
 8027caa:	2b00      	cmp	r3, #0
 8027cac:	d102      	bne.n	8027cb4 <bhy2_register_fifo_parse_callback+0x26>
    {
        rslt = BHY2_E_NULL_PTR;
 8027cae:	23ff      	movs	r3, #255	; 0xff
 8027cb0:	75fb      	strb	r3, [r7, #23]
 8027cb2:	e013      	b.n	8027cdc <bhy2_register_fifo_parse_callback+0x4e>
    }
    else
    {
        dev->table[sensor_id].callback = callback;
 8027cb4:	7bfa      	ldrb	r2, [r7, #15]
 8027cb6:	6839      	ldr	r1, [r7, #0]
 8027cb8:	4613      	mov	r3, r2
 8027cba:	00db      	lsls	r3, r3, #3
 8027cbc:	4413      	add	r3, r2
 8027cbe:	440b      	add	r3, r1
 8027cc0:	3318      	adds	r3, #24
 8027cc2:	68ba      	ldr	r2, [r7, #8]
 8027cc4:	f8c3 2005 	str.w	r2, [r3, #5]
        dev->table[sensor_id].callback_ref = callback_ref;
 8027cc8:	7bfa      	ldrb	r2, [r7, #15]
 8027cca:	6839      	ldr	r1, [r7, #0]
 8027ccc:	4613      	mov	r3, r2
 8027cce:	00db      	lsls	r3, r3, #3
 8027cd0:	4413      	add	r3, r2
 8027cd2:	440b      	add	r3, r1
 8027cd4:	3318      	adds	r3, #24
 8027cd6:	687a      	ldr	r2, [r7, #4]
 8027cd8:	f8c3 2009 	str.w	r2, [r3, #9]
    }

    return rslt;
 8027cdc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8027ce0:	4618      	mov	r0, r3
 8027ce2:	371c      	adds	r7, #28
 8027ce4:	46bd      	mov	sp, r7
 8027ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027cea:	4770      	bx	lr

08027cec <bhy2_update_virtual_sensor_list>:

int8_t bhy2_update_virtual_sensor_list(struct bhy2_dev *dev)
{
 8027cec:	b580      	push	{r7, lr}
 8027cee:	b092      	sub	sp, #72	; 0x48
 8027cf0:	af00      	add	r7, sp, #0
 8027cf2:	6078      	str	r0, [r7, #4]
    struct bhy2_sensor_info info;
    uint8_t present_buff[32];
    uint8_t sensor_index;
    uint8_t bit_mask;

    if (dev == NULL)
 8027cf4:	687b      	ldr	r3, [r7, #4]
 8027cf6:	2b00      	cmp	r3, #0
 8027cf8:	d103      	bne.n	8027d02 <bhy2_update_virtual_sensor_list+0x16>
    {
        rslt = BHY2_E_NULL_PTR;
 8027cfa:	23ff      	movs	r3, #255	; 0xff
 8027cfc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8027d00:	e079      	b.n	8027df6 <bhy2_update_virtual_sensor_list+0x10a>
    }
    else
    {
        /* Each bit corresponds to presence of Virtual sensor */
        rslt = bhy2_get_virt_sensor_list(present_buff, dev);
 8027d02:	f107 0308 	add.w	r3, r7, #8
 8027d06:	6879      	ldr	r1, [r7, #4]
 8027d08:	4618      	mov	r0, r3
 8027d0a:	f7ff feb8 	bl	8027a7e <bhy2_get_virt_sensor_list>
 8027d0e:	4603      	mov	r3, r0
 8027d10:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if (rslt == BHY2_OK)
 8027d14:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8027d18:	2b00      	cmp	r3, #0
 8027d1a:	d16c      	bne.n	8027df6 <bhy2_update_virtual_sensor_list+0x10a>
        {
            /* Padding: Sensor id*/
            dev->table[0].event_size = 1;
 8027d1c:	687b      	ldr	r3, [r7, #4]
 8027d1e:	2201      	movs	r2, #1
 8027d20:	771a      	strb	r2, [r3, #28]

            for (sensor_id = 1; (sensor_id < BHY2_SPECIAL_SENSOR_ID_OFFSET) && (rslt == BHY2_OK); sensor_id++)
 8027d22:	2301      	movs	r3, #1
 8027d24:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8027d28:	e041      	b.n	8027dae <bhy2_update_virtual_sensor_list+0xc2>
            {
                sensor_index = (uint8_t)(sensor_id / 8);
 8027d2a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8027d2e:	08db      	lsrs	r3, r3, #3
 8027d30:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
                bit_mask = (uint8_t)(0x01 << (sensor_id % 8));
 8027d34:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8027d38:	f003 0307 	and.w	r3, r3, #7
 8027d3c:	2201      	movs	r2, #1
 8027d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8027d42:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

                if (present_buff[sensor_index] & bit_mask)
 8027d46:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8027d4a:	3348      	adds	r3, #72	; 0x48
 8027d4c:	443b      	add	r3, r7
 8027d4e:	f813 2c40 	ldrb.w	r2, [r3, #-64]
 8027d52:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8027d56:	4013      	ands	r3, r2
 8027d58:	b2db      	uxtb	r3, r3
 8027d5a:	2b00      	cmp	r3, #0
 8027d5c:	d022      	beq.n	8027da4 <bhy2_update_virtual_sensor_list+0xb8>
                {
                    rslt = bhy2_hif_get_sensor_info(sensor_id, &info, &dev->hif);
 8027d5e:	687a      	ldr	r2, [r7, #4]
 8027d60:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8027d64:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8027d68:	4618      	mov	r0, r3
 8027d6a:	f001 f8e6 	bl	8028f3a <bhy2_hif_get_sensor_info>
 8027d6e:	4603      	mov	r3, r0
 8027d70:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                    if (rslt == BHY2_OK)
 8027d74:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8027d78:	2b00      	cmp	r3, #0
 8027d7a:	d113      	bne.n	8027da4 <bhy2_update_virtual_sensor_list+0xb8>
                    {
                        if (info.event_size == 0)
 8027d7c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8027d80:	2b00      	cmp	r3, #0
 8027d82:	d103      	bne.n	8027d8c <bhy2_update_virtual_sensor_list+0xa0>
                        {
                            rslt = BHY2_E_INVALID_EVENT_SIZE;
 8027d84:	23f8      	movs	r3, #248	; 0xf8
 8027d86:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                            break;
 8027d8a:	e018      	b.n	8027dbe <bhy2_update_virtual_sensor_list+0xd2>
                        }
                        else
                        {
                            dev->table[sensor_id].event_size = info.event_size;
 8027d8c:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8027d90:	f897 003c 	ldrb.w	r0, [r7, #60]	; 0x3c
 8027d94:	6879      	ldr	r1, [r7, #4]
 8027d96:	4613      	mov	r3, r2
 8027d98:	00db      	lsls	r3, r3, #3
 8027d9a:	4413      	add	r3, r2
 8027d9c:	440b      	add	r3, r1
 8027d9e:	331c      	adds	r3, #28
 8027da0:	4602      	mov	r2, r0
 8027da2:	701a      	strb	r2, [r3, #0]
            for (sensor_id = 1; (sensor_id < BHY2_SPECIAL_SENSOR_ID_OFFSET) && (rslt == BHY2_OK); sensor_id++)
 8027da4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8027da8:	3301      	adds	r3, #1
 8027daa:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8027dae:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8027db2:	2bf4      	cmp	r3, #244	; 0xf4
 8027db4:	d803      	bhi.n	8027dbe <bhy2_update_virtual_sensor_list+0xd2>
 8027db6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8027dba:	2b00      	cmp	r3, #0
 8027dbc:	d0b5      	beq.n	8027d2a <bhy2_update_virtual_sensor_list+0x3e>
                        }
                    }
                }
            }

            for (sensor_id = BHY2_N_VIRTUAL_SENSOR_MAX - 1; sensor_id >= BHY2_SPECIAL_SENSOR_ID_OFFSET; sensor_id--)
 8027dbe:	23ff      	movs	r3, #255	; 0xff
 8027dc0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8027dc4:	e013      	b.n	8027dee <bhy2_update_virtual_sensor_list+0x102>
            {
                dev->table[sensor_id].event_size = bhy2_sysid_event_size[sensor_id - BHY2_SPECIAL_SENSOR_ID_OFFSET];
 8027dc6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8027dca:	3bf5      	subs	r3, #245	; 0xf5
 8027dcc:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8027dd0:	490c      	ldr	r1, [pc, #48]	; (8027e04 <bhy2_update_virtual_sensor_list+0x118>)
 8027dd2:	5cc8      	ldrb	r0, [r1, r3]
 8027dd4:	6879      	ldr	r1, [r7, #4]
 8027dd6:	4613      	mov	r3, r2
 8027dd8:	00db      	lsls	r3, r3, #3
 8027dda:	4413      	add	r3, r2
 8027ddc:	440b      	add	r3, r1
 8027dde:	331c      	adds	r3, #28
 8027de0:	4602      	mov	r2, r0
 8027de2:	701a      	strb	r2, [r3, #0]
            for (sensor_id = BHY2_N_VIRTUAL_SENSOR_MAX - 1; sensor_id >= BHY2_SPECIAL_SENSOR_ID_OFFSET; sensor_id--)
 8027de4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8027de8:	3b01      	subs	r3, #1
 8027dea:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8027dee:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8027df2:	2bf4      	cmp	r3, #244	; 0xf4
 8027df4:	d8e7      	bhi.n	8027dc6 <bhy2_update_virtual_sensor_list+0xda>
            }
        }
    }

    return rslt;
 8027df6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8027dfa:	4618      	mov	r0, r3
 8027dfc:	3748      	adds	r7, #72	; 0x48
 8027dfe:	46bd      	mov	sp, r7
 8027e00:	bd80      	pop	{r7, pc}
 8027e02:	bf00      	nop
 8027e04:	0805843c 	.word	0x0805843c

08027e08 <bhy2_get_error_value>:

    return rslt;
}

int8_t bhy2_get_error_value(uint8_t *error_value, struct bhy2_dev *dev)
{
 8027e08:	b580      	push	{r7, lr}
 8027e0a:	b084      	sub	sp, #16
 8027e0c:	af00      	add	r7, sp, #0
 8027e0e:	6078      	str	r0, [r7, #4]
 8027e10:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8027e12:	2300      	movs	r3, #0
 8027e14:	73fb      	strb	r3, [r7, #15]

    if ((dev == NULL) || (error_value == NULL))
 8027e16:	683b      	ldr	r3, [r7, #0]
 8027e18:	2b00      	cmp	r3, #0
 8027e1a:	d002      	beq.n	8027e22 <bhy2_get_error_value+0x1a>
 8027e1c:	687b      	ldr	r3, [r7, #4]
 8027e1e:	2b00      	cmp	r3, #0
 8027e20:	d102      	bne.n	8027e28 <bhy2_get_error_value+0x20>
    {
        rslt = BHY2_E_NULL_PTR;
 8027e22:	23ff      	movs	r3, #255	; 0xff
 8027e24:	73fb      	strb	r3, [r7, #15]
 8027e26:	e007      	b.n	8027e38 <bhy2_get_error_value+0x30>
    }
    else
    {
        rslt = bhy2_get_regs(BHY2_REG_ERROR_VALUE, error_value, 1, dev);
 8027e28:	683b      	ldr	r3, [r7, #0]
 8027e2a:	2201      	movs	r2, #1
 8027e2c:	6879      	ldr	r1, [r7, #4]
 8027e2e:	202e      	movs	r0, #46	; 0x2e
 8027e30:	f7ff fc66 	bl	8027700 <bhy2_get_regs>
 8027e34:	4603      	mov	r3, r0
 8027e36:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8027e38:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8027e3c:	4618      	mov	r0, r3
 8027e3e:	3710      	adds	r7, #16
 8027e40:	46bd      	mov	sp, r7
 8027e42:	bd80      	pop	{r7, pc}

08027e44 <get_callback_info>:
}

static int8_t get_callback_info(uint8_t sensor_id,
                                struct bhy2_fifo_parse_callback_table *info,
                                const struct bhy2_dev *dev)
{
 8027e44:	b480      	push	{r7}
 8027e46:	b087      	sub	sp, #28
 8027e48:	af00      	add	r7, sp, #0
 8027e4a:	4603      	mov	r3, r0
 8027e4c:	60b9      	str	r1, [r7, #8]
 8027e4e:	607a      	str	r2, [r7, #4]
 8027e50:	73fb      	strb	r3, [r7, #15]

    int8_t rslt = BHY2_OK;
 8027e52:	2300      	movs	r3, #0
 8027e54:	75fb      	strb	r3, [r7, #23]

    if ((dev != NULL) && (info != NULL))
 8027e56:	687b      	ldr	r3, [r7, #4]
 8027e58:	2b00      	cmp	r3, #0
 8027e5a:	d04e      	beq.n	8027efa <get_callback_info+0xb6>
 8027e5c:	68bb      	ldr	r3, [r7, #8]
 8027e5e:	2b00      	cmp	r3, #0
 8027e60:	d04b      	beq.n	8027efa <get_callback_info+0xb6>
    {
        *info = dev->table[sensor_id];
 8027e62:	7bfa      	ldrb	r2, [r7, #15]
 8027e64:	68b8      	ldr	r0, [r7, #8]
 8027e66:	6879      	ldr	r1, [r7, #4]
 8027e68:	4613      	mov	r3, r2
 8027e6a:	00db      	lsls	r3, r3, #3
 8027e6c:	4413      	add	r3, r2
 8027e6e:	440b      	add	r3, r1
 8027e70:	3318      	adds	r3, #24
 8027e72:	4602      	mov	r2, r0
 8027e74:	3304      	adds	r3, #4
 8027e76:	6818      	ldr	r0, [r3, #0]
 8027e78:	6859      	ldr	r1, [r3, #4]
 8027e7a:	6010      	str	r0, [r2, #0]
 8027e7c:	6051      	str	r1, [r2, #4]
 8027e7e:	7a1b      	ldrb	r3, [r3, #8]
 8027e80:	7213      	strb	r3, [r2, #8]
        if ((sensor_id >= BHY2_SPECIAL_SENSOR_ID_OFFSET) && (info->event_size == 0))
 8027e82:	7bfb      	ldrb	r3, [r7, #15]
 8027e84:	2bf4      	cmp	r3, #244	; 0xf4
 8027e86:	d91b      	bls.n	8027ec0 <get_callback_info+0x7c>
 8027e88:	68bb      	ldr	r3, [r7, #8]
 8027e8a:	781b      	ldrb	r3, [r3, #0]
 8027e8c:	2b00      	cmp	r3, #0
 8027e8e:	d117      	bne.n	8027ec0 <get_callback_info+0x7c>
        {
            info->callback = NULL;
 8027e90:	68bb      	ldr	r3, [r7, #8]
 8027e92:	2200      	movs	r2, #0
 8027e94:	705a      	strb	r2, [r3, #1]
 8027e96:	2200      	movs	r2, #0
 8027e98:	709a      	strb	r2, [r3, #2]
 8027e9a:	2200      	movs	r2, #0
 8027e9c:	70da      	strb	r2, [r3, #3]
 8027e9e:	2200      	movs	r2, #0
 8027ea0:	711a      	strb	r2, [r3, #4]
            info->callback_ref = NULL;
 8027ea2:	68bb      	ldr	r3, [r7, #8]
 8027ea4:	2200      	movs	r2, #0
 8027ea6:	715a      	strb	r2, [r3, #5]
 8027ea8:	2200      	movs	r2, #0
 8027eaa:	719a      	strb	r2, [r3, #6]
 8027eac:	2200      	movs	r2, #0
 8027eae:	71da      	strb	r2, [r3, #7]
 8027eb0:	2200      	movs	r2, #0
 8027eb2:	721a      	strb	r2, [r3, #8]
            info->event_size = bhy2_sysid_event_size[sensor_id - BHY2_SPECIAL_SENSOR_ID_OFFSET];
 8027eb4:	7bfb      	ldrb	r3, [r7, #15]
 8027eb6:	3bf5      	subs	r3, #245	; 0xf5
 8027eb8:	4a16      	ldr	r2, [pc, #88]	; (8027f14 <get_callback_info+0xd0>)
 8027eba:	5cd2      	ldrb	r2, [r2, r3]
 8027ebc:	68bb      	ldr	r3, [r7, #8]
 8027ebe:	701a      	strb	r2, [r3, #0]
        }
        if ((sensor_id == 0) && (info->event_size == 0))
 8027ec0:	7bfb      	ldrb	r3, [r7, #15]
 8027ec2:	2b00      	cmp	r3, #0
 8027ec4:	d11c      	bne.n	8027f00 <get_callback_info+0xbc>
 8027ec6:	68bb      	ldr	r3, [r7, #8]
 8027ec8:	781b      	ldrb	r3, [r3, #0]
 8027eca:	2b00      	cmp	r3, #0
 8027ecc:	d118      	bne.n	8027f00 <get_callback_info+0xbc>
        {
            info->callback = NULL;
 8027ece:	68bb      	ldr	r3, [r7, #8]
 8027ed0:	2200      	movs	r2, #0
 8027ed2:	705a      	strb	r2, [r3, #1]
 8027ed4:	2200      	movs	r2, #0
 8027ed6:	709a      	strb	r2, [r3, #2]
 8027ed8:	2200      	movs	r2, #0
 8027eda:	70da      	strb	r2, [r3, #3]
 8027edc:	2200      	movs	r2, #0
 8027ede:	711a      	strb	r2, [r3, #4]
            info->callback_ref = NULL;
 8027ee0:	68bb      	ldr	r3, [r7, #8]
 8027ee2:	2200      	movs	r2, #0
 8027ee4:	715a      	strb	r2, [r3, #5]
 8027ee6:	2200      	movs	r2, #0
 8027ee8:	719a      	strb	r2, [r3, #6]
 8027eea:	2200      	movs	r2, #0
 8027eec:	71da      	strb	r2, [r3, #7]
 8027eee:	2200      	movs	r2, #0
 8027ef0:	721a      	strb	r2, [r3, #8]
            info->event_size = 1;
 8027ef2:	68bb      	ldr	r3, [r7, #8]
 8027ef4:	2201      	movs	r2, #1
 8027ef6:	701a      	strb	r2, [r3, #0]
        if ((sensor_id == 0) && (info->event_size == 0))
 8027ef8:	e002      	b.n	8027f00 <get_callback_info+0xbc>
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8027efa:	23ff      	movs	r3, #255	; 0xff
 8027efc:	75fb      	strb	r3, [r7, #23]
 8027efe:	e000      	b.n	8027f02 <get_callback_info+0xbe>
        if ((sensor_id == 0) && (info->event_size == 0))
 8027f00:	bf00      	nop
    }

    return rslt;
 8027f02:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8027f06:	4618      	mov	r0, r3
 8027f08:	371c      	adds	r7, #28
 8027f0a:	46bd      	mov	sp, r7
 8027f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027f10:	4770      	bx	lr
 8027f12:	bf00      	nop
 8027f14:	0805843c 	.word	0x0805843c

08027f18 <get_buffer_status>:

static int8_t get_buffer_status(const struct bhy2_fifo_buffer *fifo_p, uint8_t event_size, buffer_status_t *status)
{
 8027f18:	b480      	push	{r7}
 8027f1a:	b085      	sub	sp, #20
 8027f1c:	af00      	add	r7, sp, #0
 8027f1e:	60f8      	str	r0, [r7, #12]
 8027f20:	460b      	mov	r3, r1
 8027f22:	607a      	str	r2, [r7, #4]
 8027f24:	72fb      	strb	r3, [r7, #11]
    if ((fifo_p->read_pos + event_size) <= fifo_p->read_length)
 8027f26:	68fb      	ldr	r3, [r7, #12]
 8027f28:	681a      	ldr	r2, [r3, #0]
 8027f2a:	7afb      	ldrb	r3, [r7, #11]
 8027f2c:	441a      	add	r2, r3
 8027f2e:	68fb      	ldr	r3, [r7, #12]
 8027f30:	685b      	ldr	r3, [r3, #4]
 8027f32:	429a      	cmp	r2, r3
 8027f34:	d803      	bhi.n	8027f3e <get_buffer_status+0x26>
    {
        *status = BHY2_BUFFER_STATUS_OK;
 8027f36:	687b      	ldr	r3, [r7, #4]
 8027f38:	2200      	movs	r2, #0
 8027f3a:	701a      	strb	r2, [r3, #0]
 8027f3c:	e002      	b.n	8027f44 <get_buffer_status+0x2c>
    }
    else
    {
        *status = BHY2_BUFFER_STATUS_RELOAD;
 8027f3e:	687b      	ldr	r3, [r7, #4]
 8027f40:	2201      	movs	r2, #1
 8027f42:	701a      	strb	r2, [r3, #0]
    }

    return BHY2_OK;
 8027f44:	2300      	movs	r3, #0
}
 8027f46:	4618      	mov	r0, r3
 8027f48:	3714      	adds	r7, #20
 8027f4a:	46bd      	mov	sp, r7
 8027f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027f50:	4770      	bx	lr

08027f52 <get_time_stamp>:

static int8_t get_time_stamp(enum bhy2_fifo_type source, uint64_t **time_stamp, struct bhy2_dev *dev)
{
 8027f52:	b480      	push	{r7}
 8027f54:	b087      	sub	sp, #28
 8027f56:	af00      	add	r7, sp, #0
 8027f58:	4603      	mov	r3, r0
 8027f5a:	60b9      	str	r1, [r7, #8]
 8027f5c:	607a      	str	r2, [r7, #4]
 8027f5e:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8027f60:	2300      	movs	r3, #0
 8027f62:	75fb      	strb	r3, [r7, #23]

    if (source < BHY2_FIFO_TYPE_MAX)
 8027f64:	7bfb      	ldrb	r3, [r7, #15]
 8027f66:	2b02      	cmp	r3, #2
 8027f68:	d808      	bhi.n	8027f7c <get_time_stamp+0x2a>
    {
        *time_stamp = &dev->last_time_stamp[source];
 8027f6a:	7bfb      	ldrb	r3, [r7, #15]
 8027f6c:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8027f70:	00db      	lsls	r3, r3, #3
 8027f72:	687a      	ldr	r2, [r7, #4]
 8027f74:	441a      	add	r2, r3
 8027f76:	68bb      	ldr	r3, [r7, #8]
 8027f78:	601a      	str	r2, [r3, #0]
 8027f7a:	e001      	b.n	8027f80 <get_time_stamp+0x2e>
    }
    else
    {
        rslt = BHY2_E_INVALID_FIFO_TYPE;
 8027f7c:	23f9      	movs	r3, #249	; 0xf9
 8027f7e:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8027f80:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8027f84:	4618      	mov	r0, r3
 8027f86:	371c      	adds	r7, #28
 8027f88:	46bd      	mov	sp, r7
 8027f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027f8e:	4770      	bx	lr

08027f90 <parse_fifo>:

static int8_t parse_fifo(enum bhy2_fifo_type source, struct bhy2_fifo_buffer *fifo_p, struct bhy2_dev *dev)
{
 8027f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027f94:	b099      	sub	sp, #100	; 0x64
 8027f96:	af00      	add	r7, sp, #0
 8027f98:	4603      	mov	r3, r0
 8027f9a:	62b9      	str	r1, [r7, #40]	; 0x28
 8027f9c:	627a      	str	r2, [r7, #36]	; 0x24
 8027f9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    uint8_t tmp_sensor_id = 0;
 8027fa2:	2300      	movs	r3, #0
 8027fa4:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    int8_t rslt = BHY2_OK;
 8027fa8:	2300      	movs	r3, #0
 8027faa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    uint16_t i = 0;
 8027fae:	2300      	movs	r3, #0
 8027fb0:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    uint32_t tmp_read_pos;
    struct bhy2_fifo_parse_data_info data_info;
    uint64_t *time_stamp;
    struct bhy2_fifo_parse_callback_table info;
    buffer_status_t status = BHY2_BUFFER_STATUS_OK;
 8027fb4:	2300      	movs	r3, #0
 8027fb6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    for (; (fifo_p->read_pos < fifo_p->read_length) && (status == BHY2_BUFFER_STATUS_OK);)
 8027fba:	e16a      	b.n	8028292 <parse_fifo+0x302>
    {
        tmp_read_pos = fifo_p->read_pos;
 8027fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8027fbe:	681b      	ldr	r3, [r3, #0]
 8027fc0:	657b      	str	r3, [r7, #84]	; 0x54
        tmp_sensor_id = fifo_p->buffer[tmp_read_pos];
 8027fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8027fc4:	691a      	ldr	r2, [r3, #16]
 8027fc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8027fc8:	4413      	add	r3, r2
 8027fca:	781b      	ldrb	r3, [r3, #0]
 8027fcc:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

        rslt = get_time_stamp(source, &time_stamp, dev);
 8027fd0:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8027fd4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8027fd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8027fda:	4618      	mov	r0, r3
 8027fdc:	f7ff ffb9 	bl	8027f52 <get_time_stamp>
 8027fe0:	4603      	mov	r3, r0
 8027fe2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        if (rslt != BHY2_OK)
 8027fe6:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8027fea:	2b00      	cmp	r3, #0
 8027fec:	d002      	beq.n	8027ff4 <parse_fifo+0x64>
        {
            return rslt;
 8027fee:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8027ff2:	e191      	b.n	8028318 <parse_fifo+0x388>
        }
        switch (tmp_sensor_id)
 8027ff4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8027ff8:	2b00      	cmp	r3, #0
 8027ffa:	d025      	beq.n	8028048 <parse_fifo+0xb8>
 8027ffc:	2b00      	cmp	r3, #0
 8027ffe:	f2c0 80f6 	blt.w	80281ee <parse_fifo+0x25e>
 8028002:	2bff      	cmp	r3, #255	; 0xff
 8028004:	f300 80f3 	bgt.w	80281ee <parse_fifo+0x25e>
 8028008:	2bf5      	cmp	r3, #245	; 0xf5
 802800a:	f2c0 80f0 	blt.w	80281ee <parse_fifo+0x25e>
 802800e:	3bf5      	subs	r3, #245	; 0xf5
 8028010:	2b0a      	cmp	r3, #10
 8028012:	f200 80ec 	bhi.w	80281ee <parse_fifo+0x25e>
 8028016:	a201      	add	r2, pc, #4	; (adr r2, 802801c <parse_fifo+0x8c>)
 8028018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802801c:	08028055 	.word	0x08028055
 8028020:	080280bd 	.word	0x080280bd
 8028024:	0802813b 	.word	0x0802813b
 8028028:	080281ef 	.word	0x080281ef
 802802c:	080281ef 	.word	0x080281ef
 8028030:	080281ef 	.word	0x080281ef
 8028034:	08028055 	.word	0x08028055
 8028038:	080280bd 	.word	0x080280bd
 802803c:	0802813b 	.word	0x0802813b
 8028040:	080281ef 	.word	0x080281ef
 8028044:	08028049 	.word	0x08028049
        {
            case BHY2_SYS_ID_FILLER:
            case BHY2_SYS_ID_PADDING:
                fifo_p->read_pos += 1;
 8028048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802804a:	681b      	ldr	r3, [r3, #0]
 802804c:	1c5a      	adds	r2, r3, #1
 802804e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028050:	601a      	str	r2, [r3, #0]
                break;
 8028052:	e11e      	b.n	8028292 <parse_fifo+0x302>
            case BHY2_SYS_ID_TS_SMALL_DELTA_WU:
            case BHY2_SYS_ID_TS_SMALL_DELTA:
                rslt = get_buffer_status(fifo_p, 2, &status);
 8028054:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8028058:	461a      	mov	r2, r3
 802805a:	2102      	movs	r1, #2
 802805c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802805e:	f7ff ff5b 	bl	8027f18 <get_buffer_status>
 8028062:	4603      	mov	r3, r0
 8028064:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                if (rslt != BHY2_OK)
 8028068:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 802806c:	2b00      	cmp	r3, #0
 802806e:	d002      	beq.n	8028076 <parse_fifo+0xe6>
                {
                    return rslt;
 8028070:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8028074:	e150      	b.n	8028318 <parse_fifo+0x388>
                }
                if (status != BHY2_BUFFER_STATUS_OK)
 8028076:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 802807a:	2b00      	cmp	r3, #0
 802807c:	d000      	beq.n	8028080 <parse_fifo+0xf0>
                {
                    break;
 802807e:	e108      	b.n	8028292 <parse_fifo+0x302>
                }
                *time_stamp += fifo_p->buffer[tmp_read_pos + 1];
 8028080:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8028082:	e9d3 0100 	ldrd	r0, r1, [r3]
 8028086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028088:	691a      	ldr	r2, [r3, #16]
 802808a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802808c:	3301      	adds	r3, #1
 802808e:	4413      	add	r3, r2
 8028090:	781b      	ldrb	r3, [r3, #0]
 8028092:	b2db      	uxtb	r3, r3
 8028094:	2200      	movs	r2, #0
 8028096:	469a      	mov	sl, r3
 8028098:	4693      	mov	fp, r2
 802809a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802809c:	eb10 020a 	adds.w	r2, r0, sl
 80280a0:	61ba      	str	r2, [r7, #24]
 80280a2:	eb41 020b 	adc.w	r2, r1, fp
 80280a6:	61fa      	str	r2, [r7, #28]
 80280a8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80280ac:	e9c3 1200 	strd	r1, r2, [r3]
                fifo_p->read_pos += 2;
 80280b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80280b2:	681b      	ldr	r3, [r3, #0]
 80280b4:	1c9a      	adds	r2, r3, #2
 80280b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80280b8:	601a      	str	r2, [r3, #0]
                break;
 80280ba:	e0ea      	b.n	8028292 <parse_fifo+0x302>
            case BHY2_SYS_ID_TS_LARGE_DELTA:
            case BHY2_SYS_ID_TS_LARGE_DELTA_WU:
                rslt = get_buffer_status(fifo_p, 3, &status);
 80280bc:	f107 0337 	add.w	r3, r7, #55	; 0x37
 80280c0:	461a      	mov	r2, r3
 80280c2:	2103      	movs	r1, #3
 80280c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80280c6:	f7ff ff27 	bl	8027f18 <get_buffer_status>
 80280ca:	4603      	mov	r3, r0
 80280cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                if (rslt != BHY2_OK)
 80280d0:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80280d4:	2b00      	cmp	r3, #0
 80280d6:	d002      	beq.n	80280de <parse_fifo+0x14e>
                {
                    return rslt;
 80280d8:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80280dc:	e11c      	b.n	8028318 <parse_fifo+0x388>
                }
                if (status != BHY2_BUFFER_STATUS_OK)
 80280de:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80280e2:	2b00      	cmp	r3, #0
 80280e4:	d000      	beq.n	80280e8 <parse_fifo+0x158>
                {
                    break;
 80280e6:	e0d4      	b.n	8028292 <parse_fifo+0x302>
                }
                *time_stamp += BHY2_LE2U16(fifo_p->buffer + tmp_read_pos + 1);
 80280e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80280ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80280ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80280f0:	691a      	ldr	r2, [r3, #16]
 80280f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80280f4:	3301      	adds	r3, #1
 80280f6:	4413      	add	r3, r2
 80280f8:	781b      	ldrb	r3, [r3, #0]
 80280fa:	b21c      	sxth	r4, r3
 80280fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80280fe:	691a      	ldr	r2, [r3, #16]
 8028100:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8028102:	3302      	adds	r3, #2
 8028104:	4413      	add	r3, r2
 8028106:	781b      	ldrb	r3, [r3, #0]
 8028108:	021b      	lsls	r3, r3, #8
 802810a:	b21b      	sxth	r3, r3
 802810c:	4323      	orrs	r3, r4
 802810e:	b21b      	sxth	r3, r3
 8028110:	b29b      	uxth	r3, r3
 8028112:	b29b      	uxth	r3, r3
 8028114:	2200      	movs	r2, #0
 8028116:	461d      	mov	r5, r3
 8028118:	4616      	mov	r6, r2
 802811a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802811c:	1942      	adds	r2, r0, r5
 802811e:	613a      	str	r2, [r7, #16]
 8028120:	eb41 0206 	adc.w	r2, r1, r6
 8028124:	617a      	str	r2, [r7, #20]
 8028126:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 802812a:	e9c3 1200 	strd	r1, r2, [r3]
                fifo_p->read_pos += 3;
 802812e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028130:	681b      	ldr	r3, [r3, #0]
 8028132:	1cda      	adds	r2, r3, #3
 8028134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028136:	601a      	str	r2, [r3, #0]
                break;
 8028138:	e0ab      	b.n	8028292 <parse_fifo+0x302>
            case BHY2_SYS_ID_TS_FULL:
            case BHY2_SYS_ID_TS_FULL_WU:
                rslt = get_buffer_status(fifo_p, 6, &status);
 802813a:	f107 0337 	add.w	r3, r7, #55	; 0x37
 802813e:	461a      	mov	r2, r3
 8028140:	2106      	movs	r1, #6
 8028142:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8028144:	f7ff fee8 	bl	8027f18 <get_buffer_status>
 8028148:	4603      	mov	r3, r0
 802814a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                if (rslt != BHY2_OK)
 802814e:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8028152:	2b00      	cmp	r3, #0
 8028154:	d002      	beq.n	802815c <parse_fifo+0x1cc>
                {
                    return rslt;
 8028156:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 802815a:	e0dd      	b.n	8028318 <parse_fifo+0x388>
                }
                if (status != BHY2_BUFFER_STATUS_OK)
 802815c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8028160:	2b00      	cmp	r3, #0
 8028162:	d000      	beq.n	8028166 <parse_fifo+0x1d6>
                {
                    break;
 8028164:	e095      	b.n	8028292 <parse_fifo+0x302>
                }
                *time_stamp = BHY2_LE2U40(fifo_p->buffer + tmp_read_pos + UINT8_C(1));
 8028166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028168:	691a      	ldr	r2, [r3, #16]
 802816a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802816c:	3301      	adds	r3, #1
 802816e:	4413      	add	r3, r2
 8028170:	781b      	ldrb	r3, [r3, #0]
 8028172:	4619      	mov	r1, r3
 8028174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028176:	691a      	ldr	r2, [r3, #16]
 8028178:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802817a:	3302      	adds	r3, #2
 802817c:	4413      	add	r3, r2
 802817e:	781b      	ldrb	r3, [r3, #0]
 8028180:	021b      	lsls	r3, r3, #8
 8028182:	4319      	orrs	r1, r3
 8028184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028186:	691a      	ldr	r2, [r3, #16]
 8028188:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802818a:	3303      	adds	r3, #3
 802818c:	4413      	add	r3, r2
 802818e:	781b      	ldrb	r3, [r3, #0]
 8028190:	041b      	lsls	r3, r3, #16
 8028192:	4319      	orrs	r1, r3
 8028194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028196:	691a      	ldr	r2, [r3, #16]
 8028198:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802819a:	3304      	adds	r3, #4
 802819c:	4413      	add	r3, r2
 802819e:	781b      	ldrb	r3, [r3, #0]
 80281a0:	061b      	lsls	r3, r3, #24
 80281a2:	430b      	orrs	r3, r1
 80281a4:	2200      	movs	r2, #0
 80281a6:	4698      	mov	r8, r3
 80281a8:	4691      	mov	r9, r2
 80281aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80281ac:	691a      	ldr	r2, [r3, #16]
 80281ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80281b0:	3305      	adds	r3, #5
 80281b2:	4413      	add	r3, r2
 80281b4:	781b      	ldrb	r3, [r3, #0]
 80281b6:	b2db      	uxtb	r3, r3
 80281b8:	2200      	movs	r2, #0
 80281ba:	60bb      	str	r3, [r7, #8]
 80281bc:	60fa      	str	r2, [r7, #12]
 80281be:	f04f 0200 	mov.w	r2, #0
 80281c2:	f04f 0300 	mov.w	r3, #0
 80281c6:	68b9      	ldr	r1, [r7, #8]
 80281c8:	000b      	movs	r3, r1
 80281ca:	2200      	movs	r2, #0
 80281cc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80281ce:	ea48 0002 	orr.w	r0, r8, r2
 80281d2:	6038      	str	r0, [r7, #0]
 80281d4:	ea49 0303 	orr.w	r3, r9, r3
 80281d8:	607b      	str	r3, [r7, #4]
 80281da:	e9d7 3400 	ldrd	r3, r4, [r7]
 80281de:	e9c1 3400 	strd	r3, r4, [r1]
                fifo_p->read_pos += 6;
 80281e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80281e4:	681b      	ldr	r3, [r3, #0]
 80281e6:	1d9a      	adds	r2, r3, #6
 80281e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80281ea:	601a      	str	r2, [r3, #0]
                break;
 80281ec:	e051      	b.n	8028292 <parse_fifo+0x302>
            default:

                rslt = get_callback_info(tmp_sensor_id, &info, dev);
 80281ee:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80281f2:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80281f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80281f8:	4618      	mov	r0, r3
 80281fa:	f7ff fe23 	bl	8027e44 <get_callback_info>
 80281fe:	4603      	mov	r3, r0
 8028200:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

                if (rslt != BHY2_OK)
 8028204:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8028208:	2b00      	cmp	r3, #0
 802820a:	d002      	beq.n	8028212 <parse_fifo+0x282>
                {
                    return rslt;
 802820c:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8028210:	e082      	b.n	8028318 <parse_fifo+0x388>
                }
                rslt = get_buffer_status(fifo_p, info.event_size, &status);
 8028212:	f897 1038 	ldrb.w	r1, [r7, #56]	; 0x38
 8028216:	f107 0337 	add.w	r3, r7, #55	; 0x37
 802821a:	461a      	mov	r2, r3
 802821c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802821e:	f7ff fe7b 	bl	8027f18 <get_buffer_status>
 8028222:	4603      	mov	r3, r0
 8028224:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                if (rslt != BHY2_OK)
 8028228:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 802822c:	2b00      	cmp	r3, #0
 802822e:	d002      	beq.n	8028236 <parse_fifo+0x2a6>
                {
                    return rslt;
 8028230:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8028234:	e070      	b.n	8028318 <parse_fifo+0x388>
                }
                if (status != BHY2_BUFFER_STATUS_OK)
 8028236:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 802823a:	2b00      	cmp	r3, #0
 802823c:	d000      	beq.n	8028240 <parse_fifo+0x2b0>
                {
                    break;
 802823e:	e028      	b.n	8028292 <parse_fifo+0x302>
                }
                if (info.callback != NULL)
 8028240:	f8d7 3039 	ldr.w	r3, [r7, #57]	; 0x39
 8028244:	2b00      	cmp	r3, #0
 8028246:	d01c      	beq.n	8028282 <parse_fifo+0x2f2>
                {
                    /* Read position is incremented by 1 to exclude sensor id */
                    data_info.data_ptr = &fifo_p->buffer[tmp_read_pos + 1];
 8028248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802824a:	691a      	ldr	r2, [r3, #16]
 802824c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802824e:	3301      	adds	r3, #1
 8028250:	4413      	add	r3, r2
 8028252:	64fb      	str	r3, [r7, #76]	; 0x4c
                    data_info.fifo_type = source;
 8028254:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8028258:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
                    data_info.time_stamp = time_stamp;
 802825c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802825e:	653b      	str	r3, [r7, #80]	; 0x50
                    data_info.sensor_id = tmp_sensor_id;
 8028260:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8028264:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                    data_info.data_size = info.event_size;
 8028268:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 802826c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
                    info.callback(&data_info, info.callback_ref);
 8028270:	f8d7 4039 	ldr.w	r4, [r7, #57]	; 0x39
 8028274:	f8d7 203d 	ldr.w	r2, [r7, #61]	; 0x3d
 8028278:	f107 0348 	add.w	r3, r7, #72	; 0x48
 802827c:	4611      	mov	r1, r2
 802827e:	4618      	mov	r0, r3
 8028280:	47a0      	blx	r4

                }
                fifo_p->read_pos += info.event_size;
 8028282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028284:	681a      	ldr	r2, [r3, #0]
 8028286:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 802828a:	441a      	add	r2, r3
 802828c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802828e:	601a      	str	r2, [r3, #0]
                break;
 8028290:	bf00      	nop
    for (; (fifo_p->read_pos < fifo_p->read_length) && (status == BHY2_BUFFER_STATUS_OK);)
 8028292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028294:	681a      	ldr	r2, [r3, #0]
 8028296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028298:	685b      	ldr	r3, [r3, #4]
 802829a:	429a      	cmp	r2, r3
 802829c:	d204      	bcs.n	80282a8 <parse_fifo+0x318>
 802829e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80282a2:	2b00      	cmp	r3, #0
 80282a4:	f43f ae8a 	beq.w	8027fbc <parse_fifo+0x2c>
        }
    }
    if (fifo_p->read_length)
 80282a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80282aa:	685b      	ldr	r3, [r3, #4]
 80282ac:	2b00      	cmp	r3, #0
 80282ae:	d031      	beq.n	8028314 <parse_fifo+0x384>
    {
        if (fifo_p->read_length < fifo_p->read_pos)
 80282b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80282b2:	685a      	ldr	r2, [r3, #4]
 80282b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80282b6:	681b      	ldr	r3, [r3, #0]
 80282b8:	429a      	cmp	r2, r3
 80282ba:	d202      	bcs.n	80282c2 <parse_fifo+0x332>
        {
            return BHY2_E_INVALID_PARAM;
 80282bc:	f06f 0301 	mvn.w	r3, #1
 80282c0:	e02a      	b.n	8028318 <parse_fifo+0x388>
        }
        fifo_p->read_length -= fifo_p->read_pos;
 80282c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80282c4:	685a      	ldr	r2, [r3, #4]
 80282c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80282c8:	681b      	ldr	r3, [r3, #0]
 80282ca:	1ad2      	subs	r2, r2, r3
 80282cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80282ce:	605a      	str	r2, [r3, #4]
        if (fifo_p->read_length)
 80282d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80282d2:	685b      	ldr	r3, [r3, #4]
 80282d4:	2b00      	cmp	r3, #0
 80282d6:	d01d      	beq.n	8028314 <parse_fifo+0x384>
        {
            for (i = 0; i < fifo_p->read_length; i++)
 80282d8:	2300      	movs	r3, #0
 80282da:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80282de:	e013      	b.n	8028308 <parse_fifo+0x378>
            {
                fifo_p->buffer[i] = fifo_p->buffer[fifo_p->read_pos + i];
 80282e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80282e2:	691a      	ldr	r2, [r3, #16]
 80282e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80282e6:	6819      	ldr	r1, [r3, #0]
 80282e8:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80282ec:	440b      	add	r3, r1
 80282ee:	441a      	add	r2, r3
 80282f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80282f2:	6919      	ldr	r1, [r3, #16]
 80282f4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80282f8:	440b      	add	r3, r1
 80282fa:	7812      	ldrb	r2, [r2, #0]
 80282fc:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < fifo_p->read_length; i++)
 80282fe:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8028302:	3301      	adds	r3, #1
 8028304:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8028308:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 802830c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802830e:	685b      	ldr	r3, [r3, #4]
 8028310:	429a      	cmp	r2, r3
 8028312:	d3e5      	bcc.n	80282e0 <parse_fifo+0x350>
            }
        }
    }

    return rslt;
 8028314:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 8028318:	4618      	mov	r0, r3
 802831a:	3764      	adds	r7, #100	; 0x64
 802831c:	46bd      	mov	sp, r7
 802831e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028322:	bf00      	nop

08028324 <bhy2_hif_exec_cmd_generic>:
                                        uint32_t length,
                                        const uint8_t *pre_payload,
                                        uint32_t pre_length,
                                        uint32_t cmd_length,
                                        struct bhy2_hif_dev *hif)
{
 8028324:	b590      	push	{r4, r7, lr}
 8028326:	b0cf      	sub	sp, #316	; 0x13c
 8028328:	af00      	add	r7, sp, #0
 802832a:	4604      	mov	r4, r0
 802832c:	f507 709c 	add.w	r0, r7, #312	; 0x138
 8028330:	f5a0 7098 	sub.w	r0, r0, #304	; 0x130
 8028334:	6001      	str	r1, [r0, #0]
 8028336:	f507 719c 	add.w	r1, r7, #312	; 0x138
 802833a:	f5a1 719a 	sub.w	r1, r1, #308	; 0x134
 802833e:	600a      	str	r2, [r1, #0]
 8028340:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8028344:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8028348:	6013      	str	r3, [r2, #0]
 802834a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 802834e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8028352:	4622      	mov	r2, r4
 8028354:	801a      	strh	r2, [r3, #0]
    int8_t rslt = BHY2_OK;
 8028356:	2300      	movs	r3, #0
 8028358:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
    uint32_t remain, trans_len, copy_len, pos, total_len, temp_total_len, loop_remain_len, max_len;
    uint8_t command_buf[BHY2_COMMAND_PACKET_LEN];

    if ((hif != NULL) && !((length != 0) && (payload == NULL)) && !((pre_length != 0) && (pre_payload == NULL)))
 802835c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8028360:	2b00      	cmp	r3, #0
 8028362:	f000 81af 	beq.w	80286c4 <bhy2_hif_exec_cmd_generic+0x3a0>
 8028366:	f507 739c 	add.w	r3, r7, #312	; 0x138
 802836a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 802836e:	681b      	ldr	r3, [r3, #0]
 8028370:	2b00      	cmp	r3, #0
 8028372:	d007      	beq.n	8028384 <bhy2_hif_exec_cmd_generic+0x60>
 8028374:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8028378:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 802837c:	681b      	ldr	r3, [r3, #0]
 802837e:	2b00      	cmp	r3, #0
 8028380:	f000 81a0 	beq.w	80286c4 <bhy2_hif_exec_cmd_generic+0x3a0>
 8028384:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8028388:	2b00      	cmp	r3, #0
 802838a:	d007      	beq.n	802839c <bhy2_hif_exec_cmd_generic+0x78>
 802838c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8028390:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8028394:	681b      	ldr	r3, [r3, #0]
 8028396:	2b00      	cmp	r3, #0
 8028398:	f000 8194 	beq.w	80286c4 <bhy2_hif_exec_cmd_generic+0x3a0>
    {
        if (hif->read_write_len != 0)
 802839c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80283a0:	699b      	ldr	r3, [r3, #24]
 80283a2:	2b00      	cmp	r3, #0
 80283a4:	f000 8188 	beq.w	80286b8 <bhy2_hif_exec_cmd_generic+0x394>
        {
            total_len = pre_length + length;
 80283a8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80283ac:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80283b0:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80283b4:	681b      	ldr	r3, [r3, #0]
 80283b6:	4413      	add	r3, r2
 80283b8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

            if (cmd_length)
 80283bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80283c0:	2b00      	cmp	r3, #0
 80283c2:	d007      	beq.n	80283d4 <bhy2_hif_exec_cmd_generic+0xb0>
            {
                temp_total_len = pre_length + cmd_length;
 80283c4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80283c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80283cc:	4413      	add	r3, r2
 80283ce:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80283d2:	e003      	b.n	80283dc <bhy2_hif_exec_cmd_generic+0xb8>
            }
            else
            {
                temp_total_len = total_len;
 80283d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80283d8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
            }

            /* Align 4 bytes */
            if (temp_total_len % 4)
 80283dc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80283e0:	f003 0303 	and.w	r3, r3, #3
 80283e4:	2b00      	cmp	r3, #0
 80283e6:	d006      	beq.n	80283f6 <bhy2_hif_exec_cmd_generic+0xd2>
            {
                temp_total_len = ((temp_total_len >> 2) + 1) << 2;
 80283e8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80283ec:	089b      	lsrs	r3, r3, #2
 80283ee:	3301      	adds	r3, #1
 80283f0:	009b      	lsls	r3, r3, #2
 80283f2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
            }

            command_buf[0] = (uint8_t)(cmd & 0xFF);
 80283f6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80283fa:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80283fe:	881b      	ldrh	r3, [r3, #0]
 8028400:	b2da      	uxtb	r2, r3
 8028402:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8028406:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 802840a:	701a      	strb	r2, [r3, #0]
            command_buf[1] = (uint8_t)((cmd >> 8) & 0xFF);
 802840c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8028410:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8028414:	881b      	ldrh	r3, [r3, #0]
 8028416:	0a1b      	lsrs	r3, r3, #8
 8028418:	b29b      	uxth	r3, r3
 802841a:	b2da      	uxtb	r2, r3
 802841c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8028420:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8028424:	705a      	strb	r2, [r3, #1]

            /* Length in word */
            if (cmd == BHY2_CMD_UPLOAD_TO_PROGRAM_RAM)
 8028426:	f507 739c 	add.w	r3, r7, #312	; 0x138
 802842a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 802842e:	881b      	ldrh	r3, [r3, #0]
 8028430:	2b02      	cmp	r3, #2
 8028432:	d113      	bne.n	802845c <bhy2_hif_exec_cmd_generic+0x138>
            {
                command_buf[2] = (temp_total_len / 4) & 0xFF;
 8028434:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8028438:	089b      	lsrs	r3, r3, #2
 802843a:	b2da      	uxtb	r2, r3
 802843c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8028440:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8028444:	709a      	strb	r2, [r3, #2]
                command_buf[3] = ((temp_total_len / 4) >> 8) & 0xFF;
 8028446:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 802844a:	089b      	lsrs	r3, r3, #2
 802844c:	0a1b      	lsrs	r3, r3, #8
 802844e:	b2da      	uxtb	r2, r3
 8028450:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8028454:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8028458:	70da      	strb	r2, [r3, #3]
 802845a:	e010      	b.n	802847e <bhy2_hif_exec_cmd_generic+0x15a>
            }
            /* Length in byte */
            else
            {
                command_buf[2] = temp_total_len & 0xFF;
 802845c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8028460:	b2da      	uxtb	r2, r3
 8028462:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8028466:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 802846a:	709a      	strb	r2, [r3, #2]
                command_buf[3] = (temp_total_len >> 8) & 0xFF;
 802846c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8028470:	0a1b      	lsrs	r3, r3, #8
 8028472:	b2da      	uxtb	r2, r3
 8028474:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8028478:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 802847c:	70da      	strb	r2, [r3, #3]
            }

            pos = 4;
 802847e:	2304      	movs	r3, #4
 8028480:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
            remain = total_len;
 8028484:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8028488:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
            loop_remain_len = remain + pos;
 802848c:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8028490:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8028494:	4413      	add	r3, r2
 8028496:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
            max_len = BHY2_COMMAND_PACKET_LEN;
 802849a:	f44f 7380 	mov.w	r3, #256	; 0x100
 802849e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

            if (hif->read_write_len < max_len)
 80284a2:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80284a6:	699b      	ldr	r3, [r3, #24]
 80284a8:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80284ac:	429a      	cmp	r2, r3
 80284ae:	f240 80f9 	bls.w	80286a4 <bhy2_hif_exec_cmd_generic+0x380>
            {
                max_len = hif->read_write_len;
 80284b2:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80284b6:	699b      	ldr	r3, [r3, #24]
 80284b8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
            }

            while ((loop_remain_len > 0) && (rslt == BHY2_OK))
 80284bc:	e0f2      	b.n	80286a4 <bhy2_hif_exec_cmd_generic+0x380>
            {
                if ((remain + pos) > max_len)
 80284be:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80284c2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80284c6:	4413      	add	r3, r2
 80284c8:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80284cc:	429a      	cmp	r2, r3
 80284ce:	d20b      	bcs.n	80284e8 <bhy2_hif_exec_cmd_generic+0x1c4>
                {
                    trans_len = max_len;
 80284d0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80284d4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    copy_len = max_len - pos;
 80284d8:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80284dc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80284e0:	1ad3      	subs	r3, r2, r3
 80284e2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80284e6:	e020      	b.n	802852a <bhy2_hif_exec_cmd_generic+0x206>
                }
                else
                {
                    trans_len = remain + pos;
 80284e8:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80284ec:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80284f0:	4413      	add	r3, r2
 80284f2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    copy_len = remain;
 80284f6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80284fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

                    /* Align to 4 bytes */
                    if (trans_len % 4)
 80284fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8028502:	f003 0303 	and.w	r3, r3, #3
 8028506:	2b00      	cmp	r3, #0
 8028508:	d006      	beq.n	8028518 <bhy2_hif_exec_cmd_generic+0x1f4>
                    {
                        trans_len = ((trans_len >> 2) + 1) << 2;
 802850a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 802850e:	089b      	lsrs	r3, r3, #2
 8028510:	3301      	adds	r3, #1
 8028512:	009b      	lsls	r3, r3, #2
 8028514:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    }

                    if (trans_len > BHY2_COMMAND_PACKET_LEN)
 8028518:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 802851c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8028520:	d903      	bls.n	802852a <bhy2_hif_exec_cmd_generic+0x206>
                    {
                        trans_len = BHY2_COMMAND_PACKET_LEN;
 8028522:	f44f 7380 	mov.w	r3, #256	; 0x100
 8028526:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    }
                }

                if (copy_len > 0)
 802852a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 802852e:	2b00      	cmp	r3, #0
 8028530:	d07e      	beq.n	8028630 <bhy2_hif_exec_cmd_generic+0x30c>
                {
                    if (remain >= (length + copy_len))
 8028532:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8028536:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 802853a:	681a      	ldr	r2, [r3, #0]
 802853c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8028540:	4413      	add	r3, r2
 8028542:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8028546:	429a      	cmp	r2, r3
 8028548:	d315      	bcc.n	8028576 <bhy2_hif_exec_cmd_generic+0x252>
                    {
                        memcpy(&command_buf[pos], &pre_payload[total_len - remain], copy_len);
 802854a:	f107 0214 	add.w	r2, r7, #20
 802854e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8028552:	18d0      	adds	r0, r2, r3
 8028554:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8028558:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 802855c:	1ad3      	subs	r3, r2, r3
 802855e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8028562:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8028566:	6812      	ldr	r2, [r2, #0]
 8028568:	4413      	add	r3, r2
 802856a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 802856e:	4619      	mov	r1, r3
 8028570:	f013 fc06 	bl	803bd80 <memcpy>
 8028574:	e05c      	b.n	8028630 <bhy2_hif_exec_cmd_generic+0x30c>
                    }
                    else if (remain > length)
 8028576:	f507 739c 	add.w	r3, r7, #312	; 0x138
 802857a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 802857e:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8028582:	681b      	ldr	r3, [r3, #0]
 8028584:	429a      	cmp	r2, r3
 8028586:	d93b      	bls.n	8028600 <bhy2_hif_exec_cmd_generic+0x2dc>
                    {
                        memcpy(&command_buf[pos], &pre_payload[total_len - remain], remain - length);
 8028588:	f107 0214 	add.w	r2, r7, #20
 802858c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8028590:	18d0      	adds	r0, r2, r3
 8028592:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8028596:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 802859a:	1ad3      	subs	r3, r2, r3
 802859c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80285a0:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 80285a4:	6812      	ldr	r2, [r2, #0]
 80285a6:	18d1      	adds	r1, r2, r3
 80285a8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80285ac:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80285b0:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80285b4:	681b      	ldr	r3, [r3, #0]
 80285b6:	1ad3      	subs	r3, r2, r3
 80285b8:	461a      	mov	r2, r3
 80285ba:	f013 fbe1 	bl	803bd80 <memcpy>
                        memcpy(&command_buf[pos + remain - length], payload, copy_len - (remain - length));
 80285be:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80285c2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80285c6:	441a      	add	r2, r3
 80285c8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80285cc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80285d0:	681b      	ldr	r3, [r3, #0]
 80285d2:	1ad3      	subs	r3, r2, r3
 80285d4:	f107 0214 	add.w	r2, r7, #20
 80285d8:	18d0      	adds	r0, r2, r3
 80285da:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80285de:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80285e2:	681a      	ldr	r2, [r3, #0]
 80285e4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80285e8:	1ad2      	subs	r2, r2, r3
 80285ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80285ee:	441a      	add	r2, r3
 80285f0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80285f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80285f8:	6819      	ldr	r1, [r3, #0]
 80285fa:	f013 fbc1 	bl	803bd80 <memcpy>
 80285fe:	e017      	b.n	8028630 <bhy2_hif_exec_cmd_generic+0x30c>
                    }
                    else
                    {
                        memcpy(&command_buf[pos], &payload[length - remain], copy_len);
 8028600:	f107 0214 	add.w	r2, r7, #20
 8028604:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8028608:	18d0      	adds	r0, r2, r3
 802860a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 802860e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8028612:	681a      	ldr	r2, [r3, #0]
 8028614:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8028618:	1ad3      	subs	r3, r2, r3
 802861a:	f507 729c 	add.w	r2, r7, #312	; 0x138
 802861e:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8028622:	6812      	ldr	r2, [r2, #0]
 8028624:	4413      	add	r3, r2
 8028626:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 802862a:	4619      	mov	r1, r3
 802862c:	f013 fba8 	bl	803bd80 <memcpy>
                    }
                }

                if ((trans_len - (pos + copy_len)) > 0)
 8028630:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8028634:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8028638:	4413      	add	r3, r2
 802863a:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 802863e:	429a      	cmp	r2, r3
 8028640:	d012      	beq.n	8028668 <bhy2_hif_exec_cmd_generic+0x344>
                {
                    memset(&command_buf[pos + copy_len], 0, BHY2_COMMAND_PACKET_LEN - (pos + copy_len));
 8028642:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8028646:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 802864a:	4413      	add	r3, r2
 802864c:	f107 0214 	add.w	r2, r7, #20
 8028650:	18d0      	adds	r0, r2, r3
 8028652:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8028656:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 802865a:	4413      	add	r3, r2
 802865c:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8028660:	461a      	mov	r2, r3
 8028662:	2100      	movs	r1, #0
 8028664:	f013 fbb4 	bl	803bdd0 <memset>
                }

                rslt = bhy2_hif_set_regs(BHY2_REG_CHAN_CMD, command_buf, trans_len, hif);
 8028668:	f107 0114 	add.w	r1, r7, #20
 802866c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8028670:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8028674:	2000      	movs	r0, #0
 8028676:	f000 f9b4 	bl	80289e2 <bhy2_hif_set_regs>
 802867a:	4603      	mov	r3, r0
 802867c:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
                if (rslt != BHY2_OK)
 8028680:	f997 3137 	ldrsb.w	r3, [r7, #311]	; 0x137
 8028684:	2b00      	cmp	r3, #0
 8028686:	d11b      	bne.n	80286c0 <bhy2_hif_exec_cmd_generic+0x39c>
                {
                    break;
                }
                pos = 0;
 8028688:	2300      	movs	r3, #0
 802868a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
                remain -= copy_len;
 802868e:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8028692:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8028696:	1ad3      	subs	r3, r2, r3
 8028698:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
                loop_remain_len = remain;
 802869c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80286a0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
            while ((loop_remain_len > 0) && (rslt == BHY2_OK))
 80286a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80286a8:	2b00      	cmp	r3, #0
 80286aa:	d00f      	beq.n	80286cc <bhy2_hif_exec_cmd_generic+0x3a8>
 80286ac:	f997 3137 	ldrsb.w	r3, [r7, #311]	; 0x137
 80286b0:	2b00      	cmp	r3, #0
 80286b2:	f43f af04 	beq.w	80284be <bhy2_hif_exec_cmd_generic+0x19a>
        if (hif->read_write_len != 0)
 80286b6:	e009      	b.n	80286cc <bhy2_hif_exec_cmd_generic+0x3a8>
            }

        }
        else
        {
            rslt = BHY2_E_INVALID_PARAM;
 80286b8:	23fe      	movs	r3, #254	; 0xfe
 80286ba:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
        if (hif->read_write_len != 0)
 80286be:	e005      	b.n	80286cc <bhy2_hif_exec_cmd_generic+0x3a8>
                    break;
 80286c0:	bf00      	nop
        if (hif->read_write_len != 0)
 80286c2:	e003      	b.n	80286cc <bhy2_hif_exec_cmd_generic+0x3a8>
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 80286c4:	23ff      	movs	r3, #255	; 0xff
 80286c6:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 80286ca:	e000      	b.n	80286ce <bhy2_hif_exec_cmd_generic+0x3aa>
        if (hif->read_write_len != 0)
 80286cc:	bf00      	nop
    }

    return rslt;
 80286ce:	f997 3137 	ldrsb.w	r3, [r7, #311]	; 0x137
}
 80286d2:	4618      	mov	r0, r3
 80286d4:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 80286d8:	46bd      	mov	sp, r7
 80286da:	bd90      	pop	{r4, r7, pc}

080286dc <bhy2_wait_status_ready>:

static int8_t bhy2_wait_status_ready(struct bhy2_hif_dev *hif)
{
 80286dc:	b580      	push	{r7, lr}
 80286de:	b084      	sub	sp, #16
 80286e0:	af00      	add	r7, sp, #0
 80286e2:	6078      	str	r0, [r7, #4]
    uint16_t retry;
    uint8_t int_status;
    int8_t rslt;

    /* Wait status ready */
    for (retry = 0; retry < BHY2_QUERY_PARAM_STATUS_READY_MAX_RETRY; ++retry)
 80286e4:	2300      	movs	r3, #0
 80286e6:	81fb      	strh	r3, [r7, #14]
 80286e8:	e027      	b.n	802873a <bhy2_wait_status_ready+0x5e>
    {
        rslt = bhy2_hif_get_interrupt_status(&int_status, hif);
 80286ea:	f107 030c 	add.w	r3, r7, #12
 80286ee:	6879      	ldr	r1, [r7, #4]
 80286f0:	4618      	mov	r0, r3
 80286f2:	f000 fab1 	bl	8028c58 <bhy2_hif_get_interrupt_status>
 80286f6:	4603      	mov	r3, r0
 80286f8:	737b      	strb	r3, [r7, #13]
        if (rslt == BHY2_OK)
 80286fa:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80286fe:	2b00      	cmp	r3, #0
 8028700:	d115      	bne.n	802872e <bhy2_wait_status_ready+0x52>
        {
            if (int_status & BHY2_IST_MASK_STATUS)
 8028702:	7b3b      	ldrb	r3, [r7, #12]
 8028704:	f003 0320 	and.w	r3, r3, #32
 8028708:	2b00      	cmp	r3, #0
 802870a:	d002      	beq.n	8028712 <bhy2_wait_status_ready+0x36>
            {
                rslt = BHY2_OK;
 802870c:	2300      	movs	r3, #0
 802870e:	737b      	strb	r3, [r7, #13]
                break;
 8028710:	e017      	b.n	8028742 <bhy2_wait_status_ready+0x66>
            }

            /* 10ms */
            rslt = bhy2_hif_delay_us(10000, hif);
 8028712:	6879      	ldr	r1, [r7, #4]
 8028714:	f242 7010 	movw	r0, #10000	; 0x2710
 8028718:	f000 f99b 	bl	8028a52 <bhy2_hif_delay_us>
 802871c:	4603      	mov	r3, r0
 802871e:	737b      	strb	r3, [r7, #13]
            if (rslt != BHY2_OK)
 8028720:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8028724:	2b00      	cmp	r3, #0
 8028726:	d005      	beq.n	8028734 <bhy2_wait_status_ready+0x58>
            {
                return rslt;
 8028728:	f997 300d 	ldrsb.w	r3, [r7, #13]
 802872c:	e00b      	b.n	8028746 <bhy2_wait_status_ready+0x6a>
            }
        }
        else
        {
            return rslt; /*break; */
 802872e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8028732:	e008      	b.n	8028746 <bhy2_wait_status_ready+0x6a>
    for (retry = 0; retry < BHY2_QUERY_PARAM_STATUS_READY_MAX_RETRY; ++retry)
 8028734:	89fb      	ldrh	r3, [r7, #14]
 8028736:	3301      	adds	r3, #1
 8028738:	81fb      	strh	r3, [r7, #14]
 802873a:	89fb      	ldrh	r3, [r7, #14]
 802873c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8028740:	d3d3      	bcc.n	80286ea <bhy2_wait_status_ready+0xe>
        }
    }

    return rslt;
 8028742:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 8028746:	4618      	mov	r0, r3
 8028748:	3710      	adds	r7, #16
 802874a:	46bd      	mov	sp, r7
 802874c:	bd80      	pop	{r7, pc}

0802874e <bhy2_hif_check_boot_status_ram>:

static int8_t bhy2_hif_check_boot_status_ram(struct bhy2_hif_dev *hif)
{
 802874e:	b580      	push	{r7, lr}
 8028750:	b084      	sub	sp, #16
 8028752:	af00      	add	r7, sp, #0
 8028754:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint16_t i;
    uint8_t boot_status;

    /* total 5s */
    for (i = 0; i < BHY2_BST_CHECK_RETRY; ++i)
 8028756:	2300      	movs	r3, #0
 8028758:	81fb      	strh	r3, [r7, #14]
 802875a:	e02f      	b.n	80287bc <bhy2_hif_check_boot_status_ram+0x6e>
    {
        /* 50ms */
        rslt = bhy2_hif_delay_us(50000, hif);
 802875c:	6879      	ldr	r1, [r7, #4]
 802875e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8028762:	f000 f976 	bl	8028a52 <bhy2_hif_delay_us>
 8028766:	4603      	mov	r3, r0
 8028768:	737b      	strb	r3, [r7, #13]
        if (rslt < 0)
 802876a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 802876e:	2b00      	cmp	r3, #0
 8028770:	da02      	bge.n	8028778 <bhy2_hif_check_boot_status_ram+0x2a>
        {
            return rslt;
 8028772:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8028776:	e02d      	b.n	80287d4 <bhy2_hif_check_boot_status_ram+0x86>
        }

        rslt = bhy2_hif_get_regs(BHY2_REG_BOOT_STATUS, &boot_status, sizeof(boot_status), hif);
 8028778:	f107 010c 	add.w	r1, r7, #12
 802877c:	687b      	ldr	r3, [r7, #4]
 802877e:	2201      	movs	r2, #1
 8028780:	2025      	movs	r0, #37	; 0x25
 8028782:	f000 f8f6 	bl	8028972 <bhy2_hif_get_regs>
 8028786:	4603      	mov	r3, r0
 8028788:	737b      	strb	r3, [r7, #13]
        if (rslt < 0)
 802878a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 802878e:	2b00      	cmp	r3, #0
 8028790:	da02      	bge.n	8028798 <bhy2_hif_check_boot_status_ram+0x4a>
        {
            return rslt;
 8028792:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8028796:	e01d      	b.n	80287d4 <bhy2_hif_check_boot_status_ram+0x86>
        }

        if ((boot_status & BHY2_BST_HOST_INTERFACE_READY) && (boot_status & BHY2_BST_HOST_FW_VERIFY_DONE) &&
 8028798:	7b3b      	ldrb	r3, [r7, #12]
 802879a:	f003 0310 	and.w	r3, r3, #16
 802879e:	2b00      	cmp	r3, #0
 80287a0:	d009      	beq.n	80287b6 <bhy2_hif_check_boot_status_ram+0x68>
 80287a2:	7b3b      	ldrb	r3, [r7, #12]
 80287a4:	f003 0320 	and.w	r3, r3, #32
 80287a8:	2b00      	cmp	r3, #0
 80287aa:	d004      	beq.n	80287b6 <bhy2_hif_check_boot_status_ram+0x68>
            (!(boot_status & BHY2_BST_HOST_FW_VERIFY_ERROR)))
 80287ac:	7b3b      	ldrb	r3, [r7, #12]
 80287ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
        if ((boot_status & BHY2_BST_HOST_INTERFACE_READY) && (boot_status & BHY2_BST_HOST_FW_VERIFY_DONE) &&
 80287b2:	2b00      	cmp	r3, #0
 80287b4:	d006      	beq.n	80287c4 <bhy2_hif_check_boot_status_ram+0x76>
    for (i = 0; i < BHY2_BST_CHECK_RETRY; ++i)
 80287b6:	89fb      	ldrh	r3, [r7, #14]
 80287b8:	3301      	adds	r3, #1
 80287ba:	81fb      	strh	r3, [r7, #14]
 80287bc:	89fb      	ldrh	r3, [r7, #14]
 80287be:	2b63      	cmp	r3, #99	; 0x63
 80287c0:	d9cc      	bls.n	802875c <bhy2_hif_check_boot_status_ram+0xe>
 80287c2:	e000      	b.n	80287c6 <bhy2_hif_check_boot_status_ram+0x78>
        {
            break;
 80287c4:	bf00      	nop
        }
    }

    if (i == BHY2_BST_CHECK_RETRY)
 80287c6:	89fb      	ldrh	r3, [r7, #14]
 80287c8:	2b64      	cmp	r3, #100	; 0x64
 80287ca:	d102      	bne.n	80287d2 <bhy2_hif_check_boot_status_ram+0x84>
    {
        return BHY2_E_TIMEOUT;
 80287cc:	f06f 0304 	mvn.w	r3, #4
 80287d0:	e000      	b.n	80287d4 <bhy2_hif_check_boot_status_ram+0x86>
    }

    return BHY2_OK;
 80287d2:	2300      	movs	r3, #0
}
 80287d4:	4618      	mov	r0, r3
 80287d6:	3710      	adds	r7, #16
 80287d8:	46bd      	mov	sp, r7
 80287da:	bd80      	pop	{r7, pc}

080287dc <bhy2_hif_get_fifo>:
                                uint8_t *fifo,
                                uint32_t fifo_len,
                                uint32_t *bytes_read,
                                uint32_t *bytes_remain,
                                struct bhy2_hif_dev *hif)
{
 80287dc:	b580      	push	{r7, lr}
 80287de:	b08a      	sub	sp, #40	; 0x28
 80287e0:	af00      	add	r7, sp, #0
 80287e2:	60b9      	str	r1, [r7, #8]
 80287e4:	607a      	str	r2, [r7, #4]
 80287e6:	603b      	str	r3, [r7, #0]
 80287e8:	4603      	mov	r3, r0
 80287ea:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 80287ec:	2300      	movs	r3, #0
 80287ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint8_t n_bytes[2];
    uint32_t read_len;
    uint32_t read_write_len;
    uint32_t offset;

    if ((hif != NULL) && (fifo != NULL) && (bytes_read != NULL) && (bytes_remain != NULL))
 80287f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80287f4:	2b00      	cmp	r3, #0
 80287f6:	d072      	beq.n	80288de <bhy2_hif_get_fifo+0x102>
 80287f8:	68bb      	ldr	r3, [r7, #8]
 80287fa:	2b00      	cmp	r3, #0
 80287fc:	d06f      	beq.n	80288de <bhy2_hif_get_fifo+0x102>
 80287fe:	683b      	ldr	r3, [r7, #0]
 8028800:	2b00      	cmp	r3, #0
 8028802:	d06c      	beq.n	80288de <bhy2_hif_get_fifo+0x102>
 8028804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8028806:	2b00      	cmp	r3, #0
 8028808:	d069      	beq.n	80288de <bhy2_hif_get_fifo+0x102>
    {
        read_write_len = hif->read_write_len;
 802880a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802880c:	699b      	ldr	r3, [r3, #24]
 802880e:	61bb      	str	r3, [r7, #24]

        if (*bytes_remain == 0)
 8028810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8028812:	681b      	ldr	r3, [r3, #0]
 8028814:	2b00      	cmp	r3, #0
 8028816:	d114      	bne.n	8028842 <bhy2_hif_get_fifo+0x66>
        {
            rslt = bhy2_hif_get_regs(reg, n_bytes, 2, hif); /* Read the the available size */
 8028818:	f107 0114 	add.w	r1, r7, #20
 802881c:	7bf8      	ldrb	r0, [r7, #15]
 802881e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8028820:	2202      	movs	r2, #2
 8028822:	f000 f8a6 	bl	8028972 <bhy2_hif_get_regs>
 8028826:	4603      	mov	r3, r0
 8028828:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            *bytes_remain = BHY2_LE2U16(n_bytes);
 802882c:	7d3b      	ldrb	r3, [r7, #20]
 802882e:	b21a      	sxth	r2, r3
 8028830:	7d7b      	ldrb	r3, [r7, #21]
 8028832:	021b      	lsls	r3, r3, #8
 8028834:	b21b      	sxth	r3, r3
 8028836:	4313      	orrs	r3, r2
 8028838:	b21b      	sxth	r3, r3
 802883a:	b29b      	uxth	r3, r3
 802883c:	461a      	mov	r2, r3
 802883e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8028840:	601a      	str	r2, [r3, #0]
        }

        if ((*bytes_remain != 0) && (rslt == BHY2_OK))
 8028842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8028844:	681b      	ldr	r3, [r3, #0]
 8028846:	2b00      	cmp	r3, #0
 8028848:	d04d      	beq.n	80288e6 <bhy2_hif_get_fifo+0x10a>
 802884a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 802884e:	2b00      	cmp	r3, #0
 8028850:	d149      	bne.n	80288e6 <bhy2_hif_get_fifo+0x10a>
        {
            if (fifo_len < *bytes_remain)
 8028852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8028854:	681b      	ldr	r3, [r3, #0]
 8028856:	687a      	ldr	r2, [r7, #4]
 8028858:	429a      	cmp	r2, r3
 802885a:	d203      	bcs.n	8028864 <bhy2_hif_get_fifo+0x88>
            {
                *bytes_read = fifo_len;
 802885c:	683b      	ldr	r3, [r7, #0]
 802885e:	687a      	ldr	r2, [r7, #4]
 8028860:	601a      	str	r2, [r3, #0]
 8028862:	e003      	b.n	802886c <bhy2_hif_get_fifo+0x90>
            }
            else
            {
                *bytes_read = *bytes_remain;
 8028864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8028866:	681a      	ldr	r2, [r3, #0]
 8028868:	683b      	ldr	r3, [r7, #0]
 802886a:	601a      	str	r2, [r3, #0]
            }
            read_len = *bytes_read;
 802886c:	683b      	ldr	r3, [r7, #0]
 802886e:	681b      	ldr	r3, [r3, #0]
 8028870:	623b      	str	r3, [r7, #32]
            offset = 0;
 8028872:	2300      	movs	r3, #0
 8028874:	61fb      	str	r3, [r7, #28]
            while (read_len > read_write_len)
 8028876:	e016      	b.n	80288a6 <bhy2_hif_get_fifo+0xca>
            {
                rslt = bhy2_hif_get_regs(reg, &fifo[offset], read_write_len, hif);
 8028878:	68ba      	ldr	r2, [r7, #8]
 802887a:	69fb      	ldr	r3, [r7, #28]
 802887c:	18d1      	adds	r1, r2, r3
 802887e:	7bf8      	ldrb	r0, [r7, #15]
 8028880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8028882:	69ba      	ldr	r2, [r7, #24]
 8028884:	f000 f875 	bl	8028972 <bhy2_hif_get_regs>
 8028888:	4603      	mov	r3, r0
 802888a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                if (rslt != BHY2_OK)
 802888e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8028892:	2b00      	cmp	r3, #0
 8028894:	d10c      	bne.n	80288b0 <bhy2_hif_get_fifo+0xd4>
                {
                    break;
                }
                read_len -= read_write_len;
 8028896:	6a3a      	ldr	r2, [r7, #32]
 8028898:	69bb      	ldr	r3, [r7, #24]
 802889a:	1ad3      	subs	r3, r2, r3
 802889c:	623b      	str	r3, [r7, #32]
                offset += read_write_len;
 802889e:	69fa      	ldr	r2, [r7, #28]
 80288a0:	69bb      	ldr	r3, [r7, #24]
 80288a2:	4413      	add	r3, r2
 80288a4:	61fb      	str	r3, [r7, #28]
            while (read_len > read_write_len)
 80288a6:	6a3a      	ldr	r2, [r7, #32]
 80288a8:	69bb      	ldr	r3, [r7, #24]
 80288aa:	429a      	cmp	r2, r3
 80288ac:	d8e4      	bhi.n	8028878 <bhy2_hif_get_fifo+0x9c>
 80288ae:	e000      	b.n	80288b2 <bhy2_hif_get_fifo+0xd6>
                    break;
 80288b0:	bf00      	nop
            }

            if (read_len != 0)
 80288b2:	6a3b      	ldr	r3, [r7, #32]
 80288b4:	2b00      	cmp	r3, #0
 80288b6:	d00a      	beq.n	80288ce <bhy2_hif_get_fifo+0xf2>
            {
                rslt = bhy2_hif_get_regs(reg, &fifo[offset], read_len, hif);
 80288b8:	68ba      	ldr	r2, [r7, #8]
 80288ba:	69fb      	ldr	r3, [r7, #28]
 80288bc:	18d1      	adds	r1, r2, r3
 80288be:	7bf8      	ldrb	r0, [r7, #15]
 80288c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80288c2:	6a3a      	ldr	r2, [r7, #32]
 80288c4:	f000 f855 	bl	8028972 <bhy2_hif_get_regs>
 80288c8:	4603      	mov	r3, r0
 80288ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            *bytes_remain -= *bytes_read;
 80288ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80288d0:	681a      	ldr	r2, [r3, #0]
 80288d2:	683b      	ldr	r3, [r7, #0]
 80288d4:	681b      	ldr	r3, [r3, #0]
 80288d6:	1ad2      	subs	r2, r2, r3
 80288d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80288da:	601a      	str	r2, [r3, #0]
        if ((*bytes_remain != 0) && (rslt == BHY2_OK))
 80288dc:	e003      	b.n	80288e6 <bhy2_hif_get_fifo+0x10a>
        }

    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 80288de:	23ff      	movs	r3, #255	; 0xff
 80288e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80288e4:	e000      	b.n	80288e8 <bhy2_hif_get_fifo+0x10c>
        if ((*bytes_remain != 0) && (rslt == BHY2_OK))
 80288e6:	bf00      	nop
    }

    return rslt;
 80288e8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80288ec:	4618      	mov	r0, r3
 80288ee:	3728      	adds	r7, #40	; 0x28
 80288f0:	46bd      	mov	sp, r7
 80288f2:	bd80      	pop	{r7, pc}

080288f4 <bhy2_hif_init>:
                     bhy2_write_fptr_t write,
                     bhy2_delay_us_fptr_t delay_us,
                     uint32_t read_write_len,
                     void *intf_ptr,
                     struct bhy2_hif_dev *hif)
{
 80288f4:	b480      	push	{r7}
 80288f6:	b087      	sub	sp, #28
 80288f8:	af00      	add	r7, sp, #0
 80288fa:	60b9      	str	r1, [r7, #8]
 80288fc:	607a      	str	r2, [r7, #4]
 80288fe:	603b      	str	r3, [r7, #0]
 8028900:	4603      	mov	r3, r0
 8028902:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8028904:	2300      	movs	r3, #0
 8028906:	75fb      	strb	r3, [r7, #23]

    if ((hif != NULL) && (read != NULL) && (write != NULL) && (delay_us != NULL))
 8028908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802890a:	2b00      	cmp	r3, #0
 802890c:	d027      	beq.n	802895e <bhy2_hif_init+0x6a>
 802890e:	68bb      	ldr	r3, [r7, #8]
 8028910:	2b00      	cmp	r3, #0
 8028912:	d024      	beq.n	802895e <bhy2_hif_init+0x6a>
 8028914:	687b      	ldr	r3, [r7, #4]
 8028916:	2b00      	cmp	r3, #0
 8028918:	d021      	beq.n	802895e <bhy2_hif_init+0x6a>
 802891a:	683b      	ldr	r3, [r7, #0]
 802891c:	2b00      	cmp	r3, #0
 802891e:	d01e      	beq.n	802895e <bhy2_hif_init+0x6a>
    {
        hif->read = read;
 8028920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028922:	68ba      	ldr	r2, [r7, #8]
 8028924:	601a      	str	r2, [r3, #0]
        hif->write = write;
 8028926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028928:	687a      	ldr	r2, [r7, #4]
 802892a:	605a      	str	r2, [r3, #4]
        hif->delay_us = delay_us;
 802892c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802892e:	683a      	ldr	r2, [r7, #0]
 8028930:	609a      	str	r2, [r3, #8]
        hif->intf_ptr = intf_ptr;
 8028932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028934:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8028936:	611a      	str	r2, [r3, #16]
        hif->intf = intf;
 8028938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802893a:	7bfa      	ldrb	r2, [r7, #15]
 802893c:	731a      	strb	r2, [r3, #12]
        if (read_write_len % 4)
 802893e:	6a3b      	ldr	r3, [r7, #32]
 8028940:	f003 0303 	and.w	r3, r3, #3
 8028944:	2b00      	cmp	r3, #0
 8028946:	d006      	beq.n	8028956 <bhy2_hif_init+0x62>
        {
            hif->read_write_len = ((read_write_len >> 2) + 1) << 2;
 8028948:	6a3b      	ldr	r3, [r7, #32]
 802894a:	089b      	lsrs	r3, r3, #2
 802894c:	3301      	adds	r3, #1
 802894e:	009a      	lsls	r2, r3, #2
 8028950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028952:	619a      	str	r2, [r3, #24]
        if (read_write_len % 4)
 8028954:	e005      	b.n	8028962 <bhy2_hif_init+0x6e>
        }
        else
        {
            hif->read_write_len = read_write_len;
 8028956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028958:	6a3a      	ldr	r2, [r7, #32]
 802895a:	619a      	str	r2, [r3, #24]
        if (read_write_len % 4)
 802895c:	e001      	b.n	8028962 <bhy2_hif_init+0x6e>
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 802895e:	23ff      	movs	r3, #255	; 0xff
 8028960:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8028962:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8028966:	4618      	mov	r0, r3
 8028968:	371c      	adds	r7, #28
 802896a:	46bd      	mov	sp, r7
 802896c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028970:	4770      	bx	lr

08028972 <bhy2_hif_get_regs>:

int8_t bhy2_hif_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, struct bhy2_hif_dev *hif)
{
 8028972:	b590      	push	{r4, r7, lr}
 8028974:	b087      	sub	sp, #28
 8028976:	af00      	add	r7, sp, #0
 8028978:	60b9      	str	r1, [r7, #8]
 802897a:	607a      	str	r2, [r7, #4]
 802897c:	603b      	str	r3, [r7, #0]
 802897e:	4603      	mov	r3, r0
 8028980:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8028982:	2300      	movs	r3, #0
 8028984:	75fb      	strb	r3, [r7, #23]

    if ((hif != NULL) && (hif->read != NULL) && (reg_data != NULL))
 8028986:	683b      	ldr	r3, [r7, #0]
 8028988:	2b00      	cmp	r3, #0
 802898a:	d022      	beq.n	80289d2 <bhy2_hif_get_regs+0x60>
 802898c:	683b      	ldr	r3, [r7, #0]
 802898e:	681b      	ldr	r3, [r3, #0]
 8028990:	2b00      	cmp	r3, #0
 8028992:	d01e      	beq.n	80289d2 <bhy2_hif_get_regs+0x60>
 8028994:	68bb      	ldr	r3, [r7, #8]
 8028996:	2b00      	cmp	r3, #0
 8028998:	d01b      	beq.n	80289d2 <bhy2_hif_get_regs+0x60>
    {
        if (hif->intf == BHY2_SPI_INTERFACE)
 802899a:	683b      	ldr	r3, [r7, #0]
 802899c:	7b1b      	ldrb	r3, [r3, #12]
 802899e:	2b01      	cmp	r3, #1
 80289a0:	d103      	bne.n	80289aa <bhy2_hif_get_regs+0x38>
        {
            reg_addr |= BHY2_SPI_RD_MASK;
 80289a2:	7bfb      	ldrb	r3, [r7, #15]
 80289a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80289a8:	73fb      	strb	r3, [r7, #15]
        }

        hif->intf_rslt = hif->read(reg_addr, reg_data, length, hif->intf_ptr);
 80289aa:	683b      	ldr	r3, [r7, #0]
 80289ac:	681c      	ldr	r4, [r3, #0]
 80289ae:	683b      	ldr	r3, [r7, #0]
 80289b0:	691b      	ldr	r3, [r3, #16]
 80289b2:	7bf8      	ldrb	r0, [r7, #15]
 80289b4:	687a      	ldr	r2, [r7, #4]
 80289b6:	68b9      	ldr	r1, [r7, #8]
 80289b8:	47a0      	blx	r4
 80289ba:	4603      	mov	r3, r0
 80289bc:	461a      	mov	r2, r3
 80289be:	683b      	ldr	r3, [r7, #0]
 80289c0:	751a      	strb	r2, [r3, #20]
        if (hif->intf_rslt != BHY2_INTF_RET_SUCCESS)
 80289c2:	683b      	ldr	r3, [r7, #0]
 80289c4:	f993 3014 	ldrsb.w	r3, [r3, #20]
 80289c8:	2b00      	cmp	r3, #0
 80289ca:	d004      	beq.n	80289d6 <bhy2_hif_get_regs+0x64>
        {
            rslt = BHY2_E_IO;
 80289cc:	23fd      	movs	r3, #253	; 0xfd
 80289ce:	75fb      	strb	r3, [r7, #23]
        if (hif->intf_rslt != BHY2_INTF_RET_SUCCESS)
 80289d0:	e001      	b.n	80289d6 <bhy2_hif_get_regs+0x64>
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 80289d2:	23ff      	movs	r3, #255	; 0xff
 80289d4:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80289d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80289da:	4618      	mov	r0, r3
 80289dc:	371c      	adds	r7, #28
 80289de:	46bd      	mov	sp, r7
 80289e0:	bd90      	pop	{r4, r7, pc}

080289e2 <bhy2_hif_set_regs>:

int8_t bhy2_hif_set_regs(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, struct bhy2_hif_dev *hif)
{
 80289e2:	b590      	push	{r4, r7, lr}
 80289e4:	b087      	sub	sp, #28
 80289e6:	af00      	add	r7, sp, #0
 80289e8:	60b9      	str	r1, [r7, #8]
 80289ea:	607a      	str	r2, [r7, #4]
 80289ec:	603b      	str	r3, [r7, #0]
 80289ee:	4603      	mov	r3, r0
 80289f0:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 80289f2:	2300      	movs	r3, #0
 80289f4:	75fb      	strb	r3, [r7, #23]

    if ((hif != NULL) && (hif->read != NULL) && (reg_data != NULL))
 80289f6:	683b      	ldr	r3, [r7, #0]
 80289f8:	2b00      	cmp	r3, #0
 80289fa:	d022      	beq.n	8028a42 <bhy2_hif_set_regs+0x60>
 80289fc:	683b      	ldr	r3, [r7, #0]
 80289fe:	681b      	ldr	r3, [r3, #0]
 8028a00:	2b00      	cmp	r3, #0
 8028a02:	d01e      	beq.n	8028a42 <bhy2_hif_set_regs+0x60>
 8028a04:	68bb      	ldr	r3, [r7, #8]
 8028a06:	2b00      	cmp	r3, #0
 8028a08:	d01b      	beq.n	8028a42 <bhy2_hif_set_regs+0x60>
    {
        if (hif->intf == BHY2_SPI_INTERFACE)
 8028a0a:	683b      	ldr	r3, [r7, #0]
 8028a0c:	7b1b      	ldrb	r3, [r3, #12]
 8028a0e:	2b01      	cmp	r3, #1
 8028a10:	d103      	bne.n	8028a1a <bhy2_hif_set_regs+0x38>
        {
            reg_addr &= BHY2_SPI_WR_MASK;
 8028a12:	7bfb      	ldrb	r3, [r7, #15]
 8028a14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8028a18:	73fb      	strb	r3, [r7, #15]
        }

        hif->intf_rslt = hif->write(reg_addr, reg_data, length, hif->intf_ptr);
 8028a1a:	683b      	ldr	r3, [r7, #0]
 8028a1c:	685c      	ldr	r4, [r3, #4]
 8028a1e:	683b      	ldr	r3, [r7, #0]
 8028a20:	691b      	ldr	r3, [r3, #16]
 8028a22:	7bf8      	ldrb	r0, [r7, #15]
 8028a24:	687a      	ldr	r2, [r7, #4]
 8028a26:	68b9      	ldr	r1, [r7, #8]
 8028a28:	47a0      	blx	r4
 8028a2a:	4603      	mov	r3, r0
 8028a2c:	461a      	mov	r2, r3
 8028a2e:	683b      	ldr	r3, [r7, #0]
 8028a30:	751a      	strb	r2, [r3, #20]
        if (hif->intf_rslt != BHY2_INTF_RET_SUCCESS)
 8028a32:	683b      	ldr	r3, [r7, #0]
 8028a34:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8028a38:	2b00      	cmp	r3, #0
 8028a3a:	d004      	beq.n	8028a46 <bhy2_hif_set_regs+0x64>
        {
            rslt = BHY2_E_IO;
 8028a3c:	23fd      	movs	r3, #253	; 0xfd
 8028a3e:	75fb      	strb	r3, [r7, #23]
        if (hif->intf_rslt != BHY2_INTF_RET_SUCCESS)
 8028a40:	e001      	b.n	8028a46 <bhy2_hif_set_regs+0x64>
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8028a42:	23ff      	movs	r3, #255	; 0xff
 8028a44:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8028a46:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8028a4a:	4618      	mov	r0, r3
 8028a4c:	371c      	adds	r7, #28
 8028a4e:	46bd      	mov	sp, r7
 8028a50:	bd90      	pop	{r4, r7, pc}

08028a52 <bhy2_hif_delay_us>:

int8_t bhy2_hif_delay_us(uint32_t period_us, const struct bhy2_hif_dev *hif)
{
 8028a52:	b580      	push	{r7, lr}
 8028a54:	b084      	sub	sp, #16
 8028a56:	af00      	add	r7, sp, #0
 8028a58:	6078      	str	r0, [r7, #4]
 8028a5a:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8028a5c:	2300      	movs	r3, #0
 8028a5e:	73fb      	strb	r3, [r7, #15]

    if ((hif != NULL) && (hif->delay_us != NULL))
 8028a60:	683b      	ldr	r3, [r7, #0]
 8028a62:	2b00      	cmp	r3, #0
 8028a64:	d00b      	beq.n	8028a7e <bhy2_hif_delay_us+0x2c>
 8028a66:	683b      	ldr	r3, [r7, #0]
 8028a68:	689b      	ldr	r3, [r3, #8]
 8028a6a:	2b00      	cmp	r3, #0
 8028a6c:	d007      	beq.n	8028a7e <bhy2_hif_delay_us+0x2c>
    {
        hif->delay_us(period_us, hif->intf_ptr);
 8028a6e:	683b      	ldr	r3, [r7, #0]
 8028a70:	689b      	ldr	r3, [r3, #8]
 8028a72:	683a      	ldr	r2, [r7, #0]
 8028a74:	6912      	ldr	r2, [r2, #16]
 8028a76:	4611      	mov	r1, r2
 8028a78:	6878      	ldr	r0, [r7, #4]
 8028a7a:	4798      	blx	r3
 8028a7c:	e001      	b.n	8028a82 <bhy2_hif_delay_us+0x30>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8028a7e:	23ff      	movs	r3, #255	; 0xff
 8028a80:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8028a82:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8028a86:	4618      	mov	r0, r3
 8028a88:	3710      	adds	r7, #16
 8028a8a:	46bd      	mov	sp, r7
 8028a8c:	bd80      	pop	{r7, pc}

08028a8e <bhy2_hif_exec_cmd>:

int8_t bhy2_hif_exec_cmd(uint16_t cmd, const uint8_t *payload, uint32_t length, struct bhy2_hif_dev *hif)
{
 8028a8e:	b580      	push	{r7, lr}
 8028a90:	b088      	sub	sp, #32
 8028a92:	af04      	add	r7, sp, #16
 8028a94:	60b9      	str	r1, [r7, #8]
 8028a96:	607a      	str	r2, [r7, #4]
 8028a98:	603b      	str	r3, [r7, #0]
 8028a9a:	4603      	mov	r3, r0
 8028a9c:	81fb      	strh	r3, [r7, #14]
    return bhy2_hif_exec_cmd_generic(cmd, payload, length, NULL, 0, 0, hif);
 8028a9e:	89f8      	ldrh	r0, [r7, #14]
 8028aa0:	683b      	ldr	r3, [r7, #0]
 8028aa2:	9302      	str	r3, [sp, #8]
 8028aa4:	2300      	movs	r3, #0
 8028aa6:	9301      	str	r3, [sp, #4]
 8028aa8:	2300      	movs	r3, #0
 8028aaa:	9300      	str	r3, [sp, #0]
 8028aac:	2300      	movs	r3, #0
 8028aae:	687a      	ldr	r2, [r7, #4]
 8028ab0:	68b9      	ldr	r1, [r7, #8]
 8028ab2:	f7ff fc37 	bl	8028324 <bhy2_hif_exec_cmd_generic>
 8028ab6:	4603      	mov	r3, r0
}
 8028ab8:	4618      	mov	r0, r3
 8028aba:	3710      	adds	r7, #16
 8028abc:	46bd      	mov	sp, r7
 8028abe:	bd80      	pop	{r7, pc}

08028ac0 <bhy2_hif_get_parameter>:
int8_t bhy2_hif_get_parameter(uint16_t param,
                              uint8_t *payload,
                              uint32_t payload_len,
                              uint32_t *actual_len,
                              struct bhy2_hif_dev *hif)
{
 8028ac0:	b580      	push	{r7, lr}
 8028ac2:	b088      	sub	sp, #32
 8028ac4:	af02      	add	r7, sp, #8
 8028ac6:	60b9      	str	r1, [r7, #8]
 8028ac8:	607a      	str	r2, [r7, #4]
 8028aca:	603b      	str	r3, [r7, #0]
 8028acc:	4603      	mov	r3, r0
 8028ace:	81fb      	strh	r3, [r7, #14]
    uint16_t code = 0;
 8028ad0:	2300      	movs	r3, #0
 8028ad2:	82bb      	strh	r3, [r7, #20]
    uint8_t prev_hif_ctrl, hif_ctrl;
    int8_t rslt = BHY2_OK;
 8028ad4:	2300      	movs	r3, #0
 8028ad6:	75fb      	strb	r3, [r7, #23]

    if ((hif != NULL) && (payload != NULL) && (actual_len != NULL))
 8028ad8:	6a3b      	ldr	r3, [r7, #32]
 8028ada:	2b00      	cmp	r3, #0
 8028adc:	d06e      	beq.n	8028bbc <bhy2_hif_get_parameter+0xfc>
 8028ade:	68bb      	ldr	r3, [r7, #8]
 8028ae0:	2b00      	cmp	r3, #0
 8028ae2:	d06b      	beq.n	8028bbc <bhy2_hif_get_parameter+0xfc>
 8028ae4:	683b      	ldr	r3, [r7, #0]
 8028ae6:	2b00      	cmp	r3, #0
 8028ae8:	d068      	beq.n	8028bbc <bhy2_hif_get_parameter+0xfc>
    {
        *actual_len = 0;
 8028aea:	683b      	ldr	r3, [r7, #0]
 8028aec:	2200      	movs	r2, #0
 8028aee:	601a      	str	r2, [r3, #0]

        rslt = bhy2_hif_get_regs(BHY2_REG_HOST_INTERFACE_CTRL, &hif_ctrl, 1, hif);
 8028af0:	f107 0113 	add.w	r1, r7, #19
 8028af4:	6a3b      	ldr	r3, [r7, #32]
 8028af6:	2201      	movs	r2, #1
 8028af8:	2006      	movs	r0, #6
 8028afa:	f7ff ff3a 	bl	8028972 <bhy2_hif_get_regs>
 8028afe:	4603      	mov	r3, r0
 8028b00:	75fb      	strb	r3, [r7, #23]
        if (rslt == BHY2_OK)
 8028b02:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8028b06:	2b00      	cmp	r3, #0
 8028b08:	d15b      	bne.n	8028bc2 <bhy2_hif_get_parameter+0x102>
        {
            prev_hif_ctrl = hif_ctrl;
 8028b0a:	7cfb      	ldrb	r3, [r7, #19]
 8028b0c:	75bb      	strb	r3, [r7, #22]
            hif_ctrl &= (uint8_t)(~(BHY2_HIF_CTRL_ASYNC_STATUS_CHANNEL)); /* Change the Status FIFO to synchronous mode
 8028b0e:	7cfb      	ldrb	r3, [r7, #19]
 8028b10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8028b14:	b2db      	uxtb	r3, r3
 8028b16:	74fb      	strb	r3, [r7, #19]
                                                                           * */
            if (hif_ctrl != prev_hif_ctrl)
 8028b18:	7cfb      	ldrb	r3, [r7, #19]
 8028b1a:	7dba      	ldrb	r2, [r7, #22]
 8028b1c:	429a      	cmp	r2, r3
 8028b1e:	d008      	beq.n	8028b32 <bhy2_hif_get_parameter+0x72>
            {
                rslt = bhy2_hif_set_regs(BHY2_REG_HOST_INTERFACE_CTRL, &hif_ctrl, 1, hif);
 8028b20:	f107 0113 	add.w	r1, r7, #19
 8028b24:	6a3b      	ldr	r3, [r7, #32]
 8028b26:	2201      	movs	r2, #1
 8028b28:	2006      	movs	r0, #6
 8028b2a:	f7ff ff5a 	bl	80289e2 <bhy2_hif_set_regs>
 8028b2e:	4603      	mov	r3, r0
 8028b30:	75fb      	strb	r3, [r7, #23]
            }

            if (rslt == BHY2_OK)
 8028b32:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8028b36:	2b00      	cmp	r3, #0
 8028b38:	d143      	bne.n	8028bc2 <bhy2_hif_get_parameter+0x102>
            {
                rslt = bhy2_hif_exec_cmd(param | BHY2_PARAM_READ_MASK, NULL, 0, hif);
 8028b3a:	89fb      	ldrh	r3, [r7, #14]
 8028b3c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8028b40:	b298      	uxth	r0, r3
 8028b42:	6a3b      	ldr	r3, [r7, #32]
 8028b44:	2200      	movs	r2, #0
 8028b46:	2100      	movs	r1, #0
 8028b48:	f7ff ffa1 	bl	8028a8e <bhy2_hif_exec_cmd>
 8028b4c:	4603      	mov	r3, r0
 8028b4e:	75fb      	strb	r3, [r7, #23]

                if (rslt == BHY2_OK)
 8028b50:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8028b54:	2b00      	cmp	r3, #0
 8028b56:	d134      	bne.n	8028bc2 <bhy2_hif_get_parameter+0x102>
                {
                    rslt = bhy2_wait_status_ready(hif);
 8028b58:	6a38      	ldr	r0, [r7, #32]
 8028b5a:	f7ff fdbf 	bl	80286dc <bhy2_wait_status_ready>
 8028b5e:	4603      	mov	r3, r0
 8028b60:	75fb      	strb	r3, [r7, #23]

                    if (rslt == BHY2_OK)
 8028b62:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8028b66:	2b00      	cmp	r3, #0
 8028b68:	d12b      	bne.n	8028bc2 <bhy2_hif_get_parameter+0x102>
                    {
                        rslt = bhy2_hif_get_status_fifo(&code, payload, payload_len, actual_len, hif);
 8028b6a:	f107 0014 	add.w	r0, r7, #20
 8028b6e:	6a3b      	ldr	r3, [r7, #32]
 8028b70:	9300      	str	r3, [sp, #0]
 8028b72:	683b      	ldr	r3, [r7, #0]
 8028b74:	687a      	ldr	r2, [r7, #4]
 8028b76:	68b9      	ldr	r1, [r7, #8]
 8028b78:	f000 f94b 	bl	8028e12 <bhy2_hif_get_status_fifo>
 8028b7c:	4603      	mov	r3, r0
 8028b7e:	75fb      	strb	r3, [r7, #23]

                        if (rslt == BHY2_OK)
 8028b80:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8028b84:	2b00      	cmp	r3, #0
 8028b86:	d11c      	bne.n	8028bc2 <bhy2_hif_get_parameter+0x102>
                        {
                            if (hif_ctrl != prev_hif_ctrl)
 8028b88:	7cfb      	ldrb	r3, [r7, #19]
 8028b8a:	7dba      	ldrb	r2, [r7, #22]
 8028b8c:	429a      	cmp	r2, r3
 8028b8e:	d00a      	beq.n	8028ba6 <bhy2_hif_get_parameter+0xe6>
                            {
                                hif_ctrl = prev_hif_ctrl;
 8028b90:	7dbb      	ldrb	r3, [r7, #22]
 8028b92:	74fb      	strb	r3, [r7, #19]
                                rslt = bhy2_hif_set_regs(BHY2_REG_HOST_INTERFACE_CTRL, &hif_ctrl, 1, hif);
 8028b94:	f107 0113 	add.w	r1, r7, #19
 8028b98:	6a3b      	ldr	r3, [r7, #32]
 8028b9a:	2201      	movs	r2, #1
 8028b9c:	2006      	movs	r0, #6
 8028b9e:	f7ff ff20 	bl	80289e2 <bhy2_hif_set_regs>
 8028ba2:	4603      	mov	r3, r0
 8028ba4:	75fb      	strb	r3, [r7, #23]
                            }

                            if (rslt == BHY2_OK)
 8028ba6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8028baa:	2b00      	cmp	r3, #0
 8028bac:	d109      	bne.n	8028bc2 <bhy2_hif_get_parameter+0x102>
                            {
                                if (code != param)
 8028bae:	8abb      	ldrh	r3, [r7, #20]
 8028bb0:	89fa      	ldrh	r2, [r7, #14]
 8028bb2:	429a      	cmp	r2, r3
 8028bb4:	d005      	beq.n	8028bc2 <bhy2_hif_get_parameter+0x102>
                                {
                                    rslt = BHY2_E_TIMEOUT;
 8028bb6:	23fb      	movs	r3, #251	; 0xfb
 8028bb8:	75fb      	strb	r3, [r7, #23]
        if (rslt == BHY2_OK)
 8028bba:	e002      	b.n	8028bc2 <bhy2_hif_get_parameter+0x102>
            }
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8028bbc:	23ff      	movs	r3, #255	; 0xff
 8028bbe:	75fb      	strb	r3, [r7, #23]
 8028bc0:	e000      	b.n	8028bc4 <bhy2_hif_get_parameter+0x104>
        if (rslt == BHY2_OK)
 8028bc2:	bf00      	nop
    }

    return rslt;
 8028bc4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8028bc8:	4618      	mov	r0, r3
 8028bca:	3718      	adds	r7, #24
 8028bcc:	46bd      	mov	sp, r7
 8028bce:	bd80      	pop	{r7, pc}

08028bd0 <bhy2_hif_get_product_id>:
{
    return bhy2_hif_exec_cmd(param, payload, length, hif);
}

int8_t bhy2_hif_get_product_id(uint8_t *product_id, struct bhy2_hif_dev *hif)
{
 8028bd0:	b580      	push	{r7, lr}
 8028bd2:	b082      	sub	sp, #8
 8028bd4:	af00      	add	r7, sp, #0
 8028bd6:	6078      	str	r0, [r7, #4]
 8028bd8:	6039      	str	r1, [r7, #0]
    return bhy2_hif_get_regs(BHY2_REG_PRODUCT_ID, product_id, 1, hif);
 8028bda:	683b      	ldr	r3, [r7, #0]
 8028bdc:	2201      	movs	r2, #1
 8028bde:	6879      	ldr	r1, [r7, #4]
 8028be0:	201c      	movs	r0, #28
 8028be2:	f7ff fec6 	bl	8028972 <bhy2_hif_get_regs>
 8028be6:	4603      	mov	r3, r0
}
 8028be8:	4618      	mov	r0, r3
 8028bea:	3708      	adds	r7, #8
 8028bec:	46bd      	mov	sp, r7
 8028bee:	bd80      	pop	{r7, pc}

08028bf0 <bhy2_hif_get_kernel_version>:

    return rslt;
}

int8_t bhy2_hif_get_kernel_version(uint16_t *kernel_version, struct bhy2_hif_dev *hif)
{
 8028bf0:	b580      	push	{r7, lr}
 8028bf2:	b084      	sub	sp, #16
 8028bf4:	af00      	add	r7, sp, #0
 8028bf6:	6078      	str	r0, [r7, #4]
 8028bf8:	6039      	str	r1, [r7, #0]
    uint8_t buffer[2];
    int8_t rslt;

    if (kernel_version != NULL)
 8028bfa:	687b      	ldr	r3, [r7, #4]
 8028bfc:	2b00      	cmp	r3, #0
 8028bfe:	d013      	beq.n	8028c28 <bhy2_hif_get_kernel_version+0x38>
    {
        rslt = bhy2_hif_get_regs(BHY2_REG_KERNEL_VERSION_0, buffer, 2, hif);
 8028c00:	f107 010c 	add.w	r1, r7, #12
 8028c04:	683b      	ldr	r3, [r7, #0]
 8028c06:	2202      	movs	r2, #2
 8028c08:	2020      	movs	r0, #32
 8028c0a:	f7ff feb2 	bl	8028972 <bhy2_hif_get_regs>
 8028c0e:	4603      	mov	r3, r0
 8028c10:	73fb      	strb	r3, [r7, #15]
        *kernel_version = BHY2_LE2U16(buffer);
 8028c12:	7b3b      	ldrb	r3, [r7, #12]
 8028c14:	b21a      	sxth	r2, r3
 8028c16:	7b7b      	ldrb	r3, [r7, #13]
 8028c18:	021b      	lsls	r3, r3, #8
 8028c1a:	b21b      	sxth	r3, r3
 8028c1c:	4313      	orrs	r3, r2
 8028c1e:	b21b      	sxth	r3, r3
 8028c20:	b29a      	uxth	r2, r3
 8028c22:	687b      	ldr	r3, [r7, #4]
 8028c24:	801a      	strh	r2, [r3, #0]
 8028c26:	e001      	b.n	8028c2c <bhy2_hif_get_kernel_version+0x3c>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8028c28:	23ff      	movs	r3, #255	; 0xff
 8028c2a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8028c2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8028c30:	4618      	mov	r0, r3
 8028c32:	3710      	adds	r7, #16
 8028c34:	46bd      	mov	sp, r7
 8028c36:	bd80      	pop	{r7, pc}

08028c38 <bhy2_hif_get_boot_status>:

    return rslt;
}

int8_t bhy2_hif_get_boot_status(uint8_t *boot_status, struct bhy2_hif_dev *hif)
{
 8028c38:	b580      	push	{r7, lr}
 8028c3a:	b082      	sub	sp, #8
 8028c3c:	af00      	add	r7, sp, #0
 8028c3e:	6078      	str	r0, [r7, #4]
 8028c40:	6039      	str	r1, [r7, #0]
    return bhy2_hif_get_regs(BHY2_REG_BOOT_STATUS, boot_status, 1, hif);
 8028c42:	683b      	ldr	r3, [r7, #0]
 8028c44:	2201      	movs	r2, #1
 8028c46:	6879      	ldr	r1, [r7, #4]
 8028c48:	2025      	movs	r0, #37	; 0x25
 8028c4a:	f7ff fe92 	bl	8028972 <bhy2_hif_get_regs>
 8028c4e:	4603      	mov	r3, r0
}
 8028c50:	4618      	mov	r0, r3
 8028c52:	3708      	adds	r7, #8
 8028c54:	46bd      	mov	sp, r7
 8028c56:	bd80      	pop	{r7, pc}

08028c58 <bhy2_hif_get_interrupt_status>:
{
    return bhy2_hif_get_regs(BHY2_REG_HOST_STATUS, host_status, 1, hif);
}

int8_t bhy2_hif_get_interrupt_status(uint8_t *int_status, struct bhy2_hif_dev *hif)
{
 8028c58:	b580      	push	{r7, lr}
 8028c5a:	b082      	sub	sp, #8
 8028c5c:	af00      	add	r7, sp, #0
 8028c5e:	6078      	str	r0, [r7, #4]
 8028c60:	6039      	str	r1, [r7, #0]
    return bhy2_hif_get_regs(BHY2_REG_INT_STATUS, int_status, 1, hif);
 8028c62:	683b      	ldr	r3, [r7, #0]
 8028c64:	2201      	movs	r2, #1
 8028c66:	6879      	ldr	r1, [r7, #4]
 8028c68:	202d      	movs	r0, #45	; 0x2d
 8028c6a:	f7ff fe82 	bl	8028972 <bhy2_hif_get_regs>
 8028c6e:	4603      	mov	r3, r0
}
 8028c70:	4618      	mov	r0, r3
 8028c72:	3708      	adds	r7, #8
 8028c74:	46bd      	mov	sp, r7
 8028c76:	bd80      	pop	{r7, pc}

08028c78 <bhy2_hif_reset>:
{
    return bhy2_hif_get_regs(BHY2_REG_ERROR_VALUE, fw_error, 1, hif);
}

int8_t bhy2_hif_reset(struct bhy2_hif_dev *hif)
{
 8028c78:	b580      	push	{r7, lr}
 8028c7a:	b084      	sub	sp, #16
 8028c7c:	af00      	add	r7, sp, #0
 8028c7e:	6078      	str	r0, [r7, #4]
    uint8_t reset_req = BHY2_REQUEST_RESET;
 8028c80:	2301      	movs	r3, #1
 8028c82:	72fb      	strb	r3, [r7, #11]
    uint8_t boot_status = 0;
 8028c84:	2300      	movs	r3, #0
 8028c86:	72bb      	strb	r3, [r7, #10]
    int8_t rslt;

    /* Timeout at 150ms (15 * 10000 microseconds) */
    uint16_t count = 15;
 8028c88:	230f      	movs	r3, #15
 8028c8a:	81bb      	strh	r3, [r7, #12]

    rslt = bhy2_hif_set_regs(BHY2_REG_RESET_REQ, &reset_req, 1, hif);
 8028c8c:	f107 010b 	add.w	r1, r7, #11
 8028c90:	687b      	ldr	r3, [r7, #4]
 8028c92:	2201      	movs	r2, #1
 8028c94:	2014      	movs	r0, #20
 8028c96:	f7ff fea4 	bl	80289e2 <bhy2_hif_set_regs>
 8028c9a:	4603      	mov	r3, r0
 8028c9c:	73fb      	strb	r3, [r7, #15]
    if (rslt == BHY2_OK)
 8028c9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8028ca2:	2b00      	cmp	r3, #0
 8028ca4:	d12b      	bne.n	8028cfe <bhy2_hif_reset+0x86>
    {
        while (count--)
 8028ca6:	e01c      	b.n	8028ce2 <bhy2_hif_reset+0x6a>
        {
            rslt = bhy2_hif_delay_us(10000, hif);
 8028ca8:	6879      	ldr	r1, [r7, #4]
 8028caa:	f242 7010 	movw	r0, #10000	; 0x2710
 8028cae:	f7ff fed0 	bl	8028a52 <bhy2_hif_delay_us>
 8028cb2:	4603      	mov	r3, r0
 8028cb4:	73fb      	strb	r3, [r7, #15]
            if (rslt == BHY2_OK)
 8028cb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8028cba:	2b00      	cmp	r3, #0
 8028cbc:	d111      	bne.n	8028ce2 <bhy2_hif_reset+0x6a>
            {
                rslt = bhy2_hif_get_regs(BHY2_REG_BOOT_STATUS, &boot_status, 1, hif);
 8028cbe:	f107 010a 	add.w	r1, r7, #10
 8028cc2:	687b      	ldr	r3, [r7, #4]
 8028cc4:	2201      	movs	r2, #1
 8028cc6:	2025      	movs	r0, #37	; 0x25
 8028cc8:	f7ff fe53 	bl	8028972 <bhy2_hif_get_regs>
 8028ccc:	4603      	mov	r3, r0
 8028cce:	73fb      	strb	r3, [r7, #15]
                if (rslt == BHY2_OK)
 8028cd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8028cd4:	2b00      	cmp	r3, #0
 8028cd6:	d104      	bne.n	8028ce2 <bhy2_hif_reset+0x6a>
                {
                    if (boot_status & BHY2_BST_HOST_INTERFACE_READY)
 8028cd8:	7abb      	ldrb	r3, [r7, #10]
 8028cda:	f003 0310 	and.w	r3, r3, #16
 8028cde:	2b00      	cmp	r3, #0
 8028ce0:	d105      	bne.n	8028cee <bhy2_hif_reset+0x76>
        while (count--)
 8028ce2:	89bb      	ldrh	r3, [r7, #12]
 8028ce4:	1e5a      	subs	r2, r3, #1
 8028ce6:	81ba      	strh	r2, [r7, #12]
 8028ce8:	2b00      	cmp	r3, #0
 8028cea:	d1dd      	bne.n	8028ca8 <bhy2_hif_reset+0x30>
 8028cec:	e000      	b.n	8028cf0 <bhy2_hif_reset+0x78>
                    {
                        break;
 8028cee:	bf00      	nop
                }
            }

        }

        if (!(boot_status & BHY2_BST_HOST_INTERFACE_READY))
 8028cf0:	7abb      	ldrb	r3, [r7, #10]
 8028cf2:	f003 0310 	and.w	r3, r3, #16
 8028cf6:	2b00      	cmp	r3, #0
 8028cf8:	d101      	bne.n	8028cfe <bhy2_hif_reset+0x86>
        {
            rslt = BHY2_E_TIMEOUT;
 8028cfa:	23fb      	movs	r3, #251	; 0xfb
 8028cfc:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8028cfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8028d02:	4618      	mov	r0, r3
 8028d04:	3710      	adds	r7, #16
 8028d06:	46bd      	mov	sp, r7
 8028d08:	bd80      	pop	{r7, pc}

08028d0a <bhy2_hif_upload_firmware_to_ram>:

int8_t bhy2_hif_upload_firmware_to_ram(const uint8_t *firmware, uint32_t length, struct bhy2_hif_dev *hif)
{
 8028d0a:	b580      	push	{r7, lr}
 8028d0c:	b086      	sub	sp, #24
 8028d0e:	af00      	add	r7, sp, #0
 8028d10:	60f8      	str	r0, [r7, #12]
 8028d12:	60b9      	str	r1, [r7, #8]
 8028d14:	607a      	str	r2, [r7, #4]
    int8_t rslt = BHY2_OK;
 8028d16:	2300      	movs	r3, #0
 8028d18:	75fb      	strb	r3, [r7, #23]
    uint16_t magic;

    if ((hif != NULL) && (firmware != NULL))
 8028d1a:	687b      	ldr	r3, [r7, #4]
 8028d1c:	2b00      	cmp	r3, #0
 8028d1e:	d027      	beq.n	8028d70 <bhy2_hif_upload_firmware_to_ram+0x66>
 8028d20:	68fb      	ldr	r3, [r7, #12]
 8028d22:	2b00      	cmp	r3, #0
 8028d24:	d024      	beq.n	8028d70 <bhy2_hif_upload_firmware_to_ram+0x66>
    {
        magic = BHY2_LE2U16(firmware);
 8028d26:	68fb      	ldr	r3, [r7, #12]
 8028d28:	781b      	ldrb	r3, [r3, #0]
 8028d2a:	b21a      	sxth	r2, r3
 8028d2c:	68fb      	ldr	r3, [r7, #12]
 8028d2e:	3301      	adds	r3, #1
 8028d30:	781b      	ldrb	r3, [r3, #0]
 8028d32:	021b      	lsls	r3, r3, #8
 8028d34:	b21b      	sxth	r3, r3
 8028d36:	4313      	orrs	r3, r2
 8028d38:	b21b      	sxth	r3, r3
 8028d3a:	82bb      	strh	r3, [r7, #20]
        if (magic != BHY2_FW_MAGIC)
 8028d3c:	8abb      	ldrh	r3, [r7, #20]
 8028d3e:	f246 622b 	movw	r2, #26155	; 0x662b
 8028d42:	4293      	cmp	r3, r2
 8028d44:	d002      	beq.n	8028d4c <bhy2_hif_upload_firmware_to_ram+0x42>
        {
            rslt = BHY2_E_MAGIC;
 8028d46:	23fc      	movs	r3, #252	; 0xfc
 8028d48:	75fb      	strb	r3, [r7, #23]
        if (magic != BHY2_FW_MAGIC)
 8028d4a:	e014      	b.n	8028d76 <bhy2_hif_upload_firmware_to_ram+0x6c>
        }
        else
        {
            rslt = bhy2_hif_exec_cmd(BHY2_CMD_UPLOAD_TO_PROGRAM_RAM, firmware, length, hif);
 8028d4c:	687b      	ldr	r3, [r7, #4]
 8028d4e:	68ba      	ldr	r2, [r7, #8]
 8028d50:	68f9      	ldr	r1, [r7, #12]
 8028d52:	2002      	movs	r0, #2
 8028d54:	f7ff fe9b 	bl	8028a8e <bhy2_hif_exec_cmd>
 8028d58:	4603      	mov	r3, r0
 8028d5a:	75fb      	strb	r3, [r7, #23]
            if (rslt == BHY2_OK)
 8028d5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8028d60:	2b00      	cmp	r3, #0
 8028d62:	d108      	bne.n	8028d76 <bhy2_hif_upload_firmware_to_ram+0x6c>
            {
                rslt = bhy2_hif_check_boot_status_ram(hif);
 8028d64:	6878      	ldr	r0, [r7, #4]
 8028d66:	f7ff fcf2 	bl	802874e <bhy2_hif_check_boot_status_ram>
 8028d6a:	4603      	mov	r3, r0
 8028d6c:	75fb      	strb	r3, [r7, #23]
        if (magic != BHY2_FW_MAGIC)
 8028d6e:	e002      	b.n	8028d76 <bhy2_hif_upload_firmware_to_ram+0x6c>
            }
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8028d70:	23ff      	movs	r3, #255	; 0xff
 8028d72:	75fb      	strb	r3, [r7, #23]
 8028d74:	e000      	b.n	8028d78 <bhy2_hif_upload_firmware_to_ram+0x6e>
        if (magic != BHY2_FW_MAGIC)
 8028d76:	bf00      	nop
    }

    return rslt;
 8028d78:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8028d7c:	4618      	mov	r0, r3
 8028d7e:	3718      	adds	r7, #24
 8028d80:	46bd      	mov	sp, r7
 8028d82:	bd80      	pop	{r7, pc}

08028d84 <bhy2_hif_boot_program_ram>:

    return rslt;
}

int8_t bhy2_hif_boot_program_ram(struct bhy2_hif_dev *hif)
{
 8028d84:	b580      	push	{r7, lr}
 8028d86:	b084      	sub	sp, #16
 8028d88:	af00      	add	r7, sp, #0
 8028d8a:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    rslt = bhy2_hif_exec_cmd(BHY2_CMD_BOOT_PROGRAM_RAM, NULL, 0, hif);
 8028d8c:	687b      	ldr	r3, [r7, #4]
 8028d8e:	2200      	movs	r2, #0
 8028d90:	2100      	movs	r1, #0
 8028d92:	2003      	movs	r0, #3
 8028d94:	f7ff fe7b 	bl	8028a8e <bhy2_hif_exec_cmd>
 8028d98:	4603      	mov	r3, r0
 8028d9a:	73fb      	strb	r3, [r7, #15]
    if (rslt == BHY2_OK)
 8028d9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8028da0:	2b00      	cmp	r3, #0
 8028da2:	d104      	bne.n	8028dae <bhy2_hif_boot_program_ram+0x2a>
    {
        rslt = bhy2_hif_check_boot_status_ram(hif);
 8028da4:	6878      	ldr	r0, [r7, #4]
 8028da6:	f7ff fcd2 	bl	802874e <bhy2_hif_check_boot_status_ram>
 8028daa:	4603      	mov	r3, r0
 8028dac:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8028dae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8028db2:	4618      	mov	r0, r3
 8028db4:	3710      	adds	r7, #16
 8028db6:	46bd      	mov	sp, r7
 8028db8:	bd80      	pop	{r7, pc}

08028dba <bhy2_hif_get_wakeup_fifo>:
int8_t bhy2_hif_get_wakeup_fifo(uint8_t *fifo,
                                uint32_t fifo_len,
                                uint32_t *bytes_read,
                                uint32_t *bytes_remain,
                                struct bhy2_hif_dev *hif)
{
 8028dba:	b580      	push	{r7, lr}
 8028dbc:	b086      	sub	sp, #24
 8028dbe:	af02      	add	r7, sp, #8
 8028dc0:	60f8      	str	r0, [r7, #12]
 8028dc2:	60b9      	str	r1, [r7, #8]
 8028dc4:	607a      	str	r2, [r7, #4]
 8028dc6:	603b      	str	r3, [r7, #0]
    return bhy2_hif_get_fifo(BHY2_REG_CHAN_FIFO_W, fifo, fifo_len, bytes_read, bytes_remain, hif);
 8028dc8:	69bb      	ldr	r3, [r7, #24]
 8028dca:	9301      	str	r3, [sp, #4]
 8028dcc:	683b      	ldr	r3, [r7, #0]
 8028dce:	9300      	str	r3, [sp, #0]
 8028dd0:	687b      	ldr	r3, [r7, #4]
 8028dd2:	68ba      	ldr	r2, [r7, #8]
 8028dd4:	68f9      	ldr	r1, [r7, #12]
 8028dd6:	2001      	movs	r0, #1
 8028dd8:	f7ff fd00 	bl	80287dc <bhy2_hif_get_fifo>
 8028ddc:	4603      	mov	r3, r0
}
 8028dde:	4618      	mov	r0, r3
 8028de0:	3710      	adds	r7, #16
 8028de2:	46bd      	mov	sp, r7
 8028de4:	bd80      	pop	{r7, pc}

08028de6 <bhy2_hif_get_nonwakeup_fifo>:
int8_t bhy2_hif_get_nonwakeup_fifo(uint8_t *fifo,
                                   uint32_t fifo_len,
                                   uint32_t *bytes_read,
                                   uint32_t *bytes_remain,
                                   struct bhy2_hif_dev *hif)
{
 8028de6:	b580      	push	{r7, lr}
 8028de8:	b086      	sub	sp, #24
 8028dea:	af02      	add	r7, sp, #8
 8028dec:	60f8      	str	r0, [r7, #12]
 8028dee:	60b9      	str	r1, [r7, #8]
 8028df0:	607a      	str	r2, [r7, #4]
 8028df2:	603b      	str	r3, [r7, #0]
    return bhy2_hif_get_fifo(BHY2_REG_CHAN_FIFO_NW, fifo, fifo_len, bytes_read, bytes_remain, hif);
 8028df4:	69bb      	ldr	r3, [r7, #24]
 8028df6:	9301      	str	r3, [sp, #4]
 8028df8:	683b      	ldr	r3, [r7, #0]
 8028dfa:	9300      	str	r3, [sp, #0]
 8028dfc:	687b      	ldr	r3, [r7, #4]
 8028dfe:	68ba      	ldr	r2, [r7, #8]
 8028e00:	68f9      	ldr	r1, [r7, #12]
 8028e02:	2002      	movs	r0, #2
 8028e04:	f7ff fcea 	bl	80287dc <bhy2_hif_get_fifo>
 8028e08:	4603      	mov	r3, r0
}
 8028e0a:	4618      	mov	r0, r3
 8028e0c:	3710      	adds	r7, #16
 8028e0e:	46bd      	mov	sp, r7
 8028e10:	bd80      	pop	{r7, pc}

08028e12 <bhy2_hif_get_status_fifo>:
int8_t bhy2_hif_get_status_fifo(uint16_t *status_code,
                                uint8_t *fifo,
                                uint32_t fifo_len,
                                uint32_t *bytes_remain,
                                struct bhy2_hif_dev *hif)
{
 8028e12:	b580      	push	{r7, lr}
 8028e14:	b086      	sub	sp, #24
 8028e16:	af00      	add	r7, sp, #0
 8028e18:	60f8      	str	r0, [r7, #12]
 8028e1a:	60b9      	str	r1, [r7, #8]
 8028e1c:	607a      	str	r2, [r7, #4]
 8028e1e:	603b      	str	r3, [r7, #0]
    int8_t rslt;
    uint8_t tmp_fifo[4];

    rslt = bhy2_hif_get_regs(BHY2_REG_CHAN_STATUS, tmp_fifo, 4, hif);
 8028e20:	f107 0110 	add.w	r1, r7, #16
 8028e24:	6a3b      	ldr	r3, [r7, #32]
 8028e26:	2204      	movs	r2, #4
 8028e28:	2003      	movs	r0, #3
 8028e2a:	f7ff fda2 	bl	8028972 <bhy2_hif_get_regs>
 8028e2e:	4603      	mov	r3, r0
 8028e30:	75fb      	strb	r3, [r7, #23]
    if (rslt == BHY2_OK)
 8028e32:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8028e36:	2b00      	cmp	r3, #0
 8028e38:	d130      	bne.n	8028e9c <bhy2_hif_get_status_fifo+0x8a>
    {
        *status_code = BHY2_LE2U16(&tmp_fifo[0]);
 8028e3a:	7c3b      	ldrb	r3, [r7, #16]
 8028e3c:	b21a      	sxth	r2, r3
 8028e3e:	f107 0310 	add.w	r3, r7, #16
 8028e42:	3301      	adds	r3, #1
 8028e44:	781b      	ldrb	r3, [r3, #0]
 8028e46:	021b      	lsls	r3, r3, #8
 8028e48:	b21b      	sxth	r3, r3
 8028e4a:	4313      	orrs	r3, r2
 8028e4c:	b21b      	sxth	r3, r3
 8028e4e:	b29a      	uxth	r2, r3
 8028e50:	68fb      	ldr	r3, [r7, #12]
 8028e52:	801a      	strh	r2, [r3, #0]
        *bytes_remain = BHY2_LE2U16(&tmp_fifo[2]);
 8028e54:	7cbb      	ldrb	r3, [r7, #18]
 8028e56:	b21a      	sxth	r2, r3
 8028e58:	f107 0310 	add.w	r3, r7, #16
 8028e5c:	3302      	adds	r3, #2
 8028e5e:	3301      	adds	r3, #1
 8028e60:	781b      	ldrb	r3, [r3, #0]
 8028e62:	021b      	lsls	r3, r3, #8
 8028e64:	b21b      	sxth	r3, r3
 8028e66:	4313      	orrs	r3, r2
 8028e68:	b21b      	sxth	r3, r3
 8028e6a:	b29b      	uxth	r3, r3
 8028e6c:	461a      	mov	r2, r3
 8028e6e:	683b      	ldr	r3, [r7, #0]
 8028e70:	601a      	str	r2, [r3, #0]
        if (*bytes_remain != 0)
 8028e72:	683b      	ldr	r3, [r7, #0]
 8028e74:	681b      	ldr	r3, [r3, #0]
 8028e76:	2b00      	cmp	r3, #0
 8028e78:	d010      	beq.n	8028e9c <bhy2_hif_get_status_fifo+0x8a>
        {
            if (fifo_len < *bytes_remain)
 8028e7a:	683b      	ldr	r3, [r7, #0]
 8028e7c:	681b      	ldr	r3, [r3, #0]
 8028e7e:	687a      	ldr	r2, [r7, #4]
 8028e80:	429a      	cmp	r2, r3
 8028e82:	d202      	bcs.n	8028e8a <bhy2_hif_get_status_fifo+0x78>
            {
                rslt = BHY2_E_BUFFER;
 8028e84:	23fa      	movs	r3, #250	; 0xfa
 8028e86:	75fb      	strb	r3, [r7, #23]
 8028e88:	e008      	b.n	8028e9c <bhy2_hif_get_status_fifo+0x8a>
            }
            else
            {
                rslt = bhy2_hif_get_regs(BHY2_REG_CHAN_STATUS, fifo, *bytes_remain, hif);
 8028e8a:	683b      	ldr	r3, [r7, #0]
 8028e8c:	681a      	ldr	r2, [r3, #0]
 8028e8e:	6a3b      	ldr	r3, [r7, #32]
 8028e90:	68b9      	ldr	r1, [r7, #8]
 8028e92:	2003      	movs	r0, #3
 8028e94:	f7ff fd6d 	bl	8028972 <bhy2_hif_get_regs>
 8028e98:	4603      	mov	r3, r0
 8028e9a:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    return rslt;
 8028e9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8028ea0:	4618      	mov	r0, r3
 8028ea2:	3718      	adds	r7, #24
 8028ea4:	46bd      	mov	sp, r7
 8028ea6:	bd80      	pop	{r7, pc}

08028ea8 <bhy2_hif_get_status_fifo_async>:
int8_t bhy2_hif_get_status_fifo_async(uint8_t *fifo,
                                      uint32_t fifo_len,
                                      uint32_t *bytes_read,
                                      uint32_t *bytes_remain,
                                      struct bhy2_hif_dev *hif)
{
 8028ea8:	b580      	push	{r7, lr}
 8028eaa:	b086      	sub	sp, #24
 8028eac:	af02      	add	r7, sp, #8
 8028eae:	60f8      	str	r0, [r7, #12]
 8028eb0:	60b9      	str	r1, [r7, #8]
 8028eb2:	607a      	str	r2, [r7, #4]
 8028eb4:	603b      	str	r3, [r7, #0]
    return bhy2_hif_get_fifo(BHY2_REG_CHAN_STATUS, fifo, fifo_len, bytes_read, bytes_remain, hif);
 8028eb6:	69bb      	ldr	r3, [r7, #24]
 8028eb8:	9301      	str	r3, [sp, #4]
 8028eba:	683b      	ldr	r3, [r7, #0]
 8028ebc:	9300      	str	r3, [sp, #0]
 8028ebe:	687b      	ldr	r3, [r7, #4]
 8028ec0:	68ba      	ldr	r2, [r7, #8]
 8028ec2:	68f9      	ldr	r1, [r7, #12]
 8028ec4:	2003      	movs	r0, #3
 8028ec6:	f7ff fc89 	bl	80287dc <bhy2_hif_get_fifo>
 8028eca:	4603      	mov	r3, r0
}
 8028ecc:	4618      	mov	r0, r3
 8028ece:	3710      	adds	r7, #16
 8028ed0:	46bd      	mov	sp, r7
 8028ed2:	bd80      	pop	{r7, pc}

08028ed4 <bhy2_hif_exec_sensor_conf_cmd>:

int8_t bhy2_hif_exec_sensor_conf_cmd(uint8_t sensor_id,
                                     bhy2_float sample_rate,
                                     uint32_t latency,
                                     struct bhy2_hif_dev *hif)
{
 8028ed4:	b580      	push	{r7, lr}
 8028ed6:	b088      	sub	sp, #32
 8028ed8:	af00      	add	r7, sp, #0
 8028eda:	4603      	mov	r3, r0
 8028edc:	ed87 0a02 	vstr	s0, [r7, #8]
 8028ee0:	6079      	str	r1, [r7, #4]
 8028ee2:	603a      	str	r2, [r7, #0]
 8028ee4:	73fb      	strb	r3, [r7, #15]
    uint8_t tmp_buf[8];
    union bhy2_hif_float_u32 sample_rate_u;

    sample_rate_u.as_float = sample_rate;
 8028ee6:	68bb      	ldr	r3, [r7, #8]
 8028ee8:	617b      	str	r3, [r7, #20]

    /* Sample rate is 32bits, latency is 24bits */
    tmp_buf[0] = sensor_id;
 8028eea:	7bfb      	ldrb	r3, [r7, #15]
 8028eec:	763b      	strb	r3, [r7, #24]
    tmp_buf[1] = (uint8_t)(sample_rate_u.reg & 0xFF);
 8028eee:	697b      	ldr	r3, [r7, #20]
 8028ef0:	b2db      	uxtb	r3, r3
 8028ef2:	767b      	strb	r3, [r7, #25]
    tmp_buf[2] = (uint8_t)((sample_rate_u.reg >> 8) & 0xFF);
 8028ef4:	697b      	ldr	r3, [r7, #20]
 8028ef6:	0a1b      	lsrs	r3, r3, #8
 8028ef8:	b2db      	uxtb	r3, r3
 8028efa:	76bb      	strb	r3, [r7, #26]
    tmp_buf[3] = (uint8_t)((sample_rate_u.reg >> 16) & 0xFF);
 8028efc:	697b      	ldr	r3, [r7, #20]
 8028efe:	0c1b      	lsrs	r3, r3, #16
 8028f00:	b2db      	uxtb	r3, r3
 8028f02:	76fb      	strb	r3, [r7, #27]
    tmp_buf[4] = (uint8_t)((sample_rate_u.reg >> 24) & 0xFF);
 8028f04:	697b      	ldr	r3, [r7, #20]
 8028f06:	0e1b      	lsrs	r3, r3, #24
 8028f08:	b2db      	uxtb	r3, r3
 8028f0a:	773b      	strb	r3, [r7, #28]
    tmp_buf[5] = (uint8_t)(latency & 0xFF);
 8028f0c:	687b      	ldr	r3, [r7, #4]
 8028f0e:	b2db      	uxtb	r3, r3
 8028f10:	777b      	strb	r3, [r7, #29]
    tmp_buf[6] = (uint8_t)((latency >> 8) & 0xFF);
 8028f12:	687b      	ldr	r3, [r7, #4]
 8028f14:	0a1b      	lsrs	r3, r3, #8
 8028f16:	b2db      	uxtb	r3, r3
 8028f18:	77bb      	strb	r3, [r7, #30]
    tmp_buf[7] = (uint8_t)((latency >> 16) & 0xFF);
 8028f1a:	687b      	ldr	r3, [r7, #4]
 8028f1c:	0c1b      	lsrs	r3, r3, #16
 8028f1e:	b2db      	uxtb	r3, r3
 8028f20:	77fb      	strb	r3, [r7, #31]

    return bhy2_hif_exec_cmd(BHY2_CMD_CONFIG_SENSOR, tmp_buf, 8, hif);
 8028f22:	f107 0118 	add.w	r1, r7, #24
 8028f26:	683b      	ldr	r3, [r7, #0]
 8028f28:	2208      	movs	r2, #8
 8028f2a:	200d      	movs	r0, #13
 8028f2c:	f7ff fdaf 	bl	8028a8e <bhy2_hif_exec_cmd>
 8028f30:	4603      	mov	r3, r0
}
 8028f32:	4618      	mov	r0, r3
 8028f34:	3720      	adds	r7, #32
 8028f36:	46bd      	mov	sp, r7
 8028f38:	bd80      	pop	{r7, pc}

08028f3a <bhy2_hif_get_sensor_info>:

    return rslt;
}

int8_t bhy2_hif_get_sensor_info(uint8_t sensor_id, struct bhy2_sensor_info *info, struct bhy2_hif_dev *hif)
{
 8028f3a:	b580      	push	{r7, lr}
 8028f3c:	b090      	sub	sp, #64	; 0x40
 8028f3e:	af02      	add	r7, sp, #8
 8028f40:	4603      	mov	r3, r0
 8028f42:	60b9      	str	r1, [r7, #8]
 8028f44:	607a      	str	r2, [r7, #4]
 8028f46:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint32_t length;
    uint8_t bytes[28];

    if (info != NULL)
 8028f48:	68bb      	ldr	r3, [r7, #8]
 8028f4a:	2b00      	cmp	r3, #0
 8028f4c:	f000 80da 	beq.w	8029104 <bhy2_hif_get_sensor_info+0x1ca>
    {
        /* Checking for a valid sensor ID */
        if (sensor_id > BHY2_SPECIAL_SENSOR_ID_OFFSET)
 8028f50:	7bfb      	ldrb	r3, [r7, #15]
 8028f52:	2bf5      	cmp	r3, #245	; 0xf5
 8028f54:	d903      	bls.n	8028f5e <bhy2_hif_get_sensor_info+0x24>
        {
            rslt = BHY2_E_INVALID_PARAM;
 8028f56:	23fe      	movs	r3, #254	; 0xfe
 8028f58:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8028f5c:	e0d5      	b.n	802910a <bhy2_hif_get_sensor_info+0x1d0>
        }
        else
        {
            rslt = bhy2_hif_get_parameter((uint16_t)(BHY2_PARAM_SENSOR_INFO_0 + sensor_id), bytes, 28, &length, hif);
 8028f5e:	7bfb      	ldrb	r3, [r7, #15]
 8028f60:	b29b      	uxth	r3, r3
 8028f62:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8028f66:	b298      	uxth	r0, r3
 8028f68:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8028f6c:	f107 0114 	add.w	r1, r7, #20
 8028f70:	687b      	ldr	r3, [r7, #4]
 8028f72:	9300      	str	r3, [sp, #0]
 8028f74:	4613      	mov	r3, r2
 8028f76:	221c      	movs	r2, #28
 8028f78:	f7ff fda2 	bl	8028ac0 <bhy2_hif_get_parameter>
 8028f7c:	4603      	mov	r3, r0
 8028f7e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            if (rslt == BHY2_OK)
 8028f82:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8028f86:	2b00      	cmp	r3, #0
 8028f88:	f040 80bf 	bne.w	802910a <bhy2_hif_get_sensor_info+0x1d0>
            {
                if (length != 28)
 8028f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8028f8e:	2b1c      	cmp	r3, #28
 8028f90:	d003      	beq.n	8028f9a <bhy2_hif_get_sensor_info+0x60>
                {
                    rslt = BHY2_E_INVALID_PARAM;
 8028f92:	23fe      	movs	r3, #254	; 0xfe
 8028f94:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8028f98:	e0b7      	b.n	802910a <bhy2_hif_get_sensor_info+0x1d0>
                }
                else
                {
                    info->sensor_type = bytes[0];
 8028f9a:	7d3a      	ldrb	r2, [r7, #20]
 8028f9c:	68bb      	ldr	r3, [r7, #8]
 8028f9e:	701a      	strb	r2, [r3, #0]
                    info->driver_id = bytes[1];
 8028fa0:	7d7a      	ldrb	r2, [r7, #21]
 8028fa2:	68bb      	ldr	r3, [r7, #8]
 8028fa4:	705a      	strb	r2, [r3, #1]
                    info->driver_version = bytes[2];
 8028fa6:	7dba      	ldrb	r2, [r7, #22]
 8028fa8:	68bb      	ldr	r3, [r7, #8]
 8028faa:	709a      	strb	r2, [r3, #2]
                    info->power = bytes[3];
 8028fac:	7dfa      	ldrb	r2, [r7, #23]
 8028fae:	68bb      	ldr	r3, [r7, #8]
 8028fb0:	70da      	strb	r2, [r3, #3]
                    info->max_range.bytes[0] = bytes[4];
 8028fb2:	7e3a      	ldrb	r2, [r7, #24]
 8028fb4:	68bb      	ldr	r3, [r7, #8]
 8028fb6:	711a      	strb	r2, [r3, #4]
                    info->max_range.bytes[1] = bytes[5];
 8028fb8:	7e7a      	ldrb	r2, [r7, #25]
 8028fba:	68bb      	ldr	r3, [r7, #8]
 8028fbc:	715a      	strb	r2, [r3, #5]
                    info->resolution.bytes[0] = bytes[6];
 8028fbe:	7eba      	ldrb	r2, [r7, #26]
 8028fc0:	68bb      	ldr	r3, [r7, #8]
 8028fc2:	719a      	strb	r2, [r3, #6]
                    info->resolution.bytes[1] = bytes[7];
 8028fc4:	7efa      	ldrb	r2, [r7, #27]
 8028fc6:	68bb      	ldr	r3, [r7, #8]
 8028fc8:	71da      	strb	r2, [r3, #7]
                    info->max_rate.bytes[0] = bytes[8];
 8028fca:	7f3a      	ldrb	r2, [r7, #28]
 8028fcc:	68bb      	ldr	r3, [r7, #8]
 8028fce:	721a      	strb	r2, [r3, #8]
                    info->max_rate.bytes[1] = bytes[9];
 8028fd0:	7f7a      	ldrb	r2, [r7, #29]
 8028fd2:	68bb      	ldr	r3, [r7, #8]
 8028fd4:	725a      	strb	r2, [r3, #9]
                    info->max_rate.bytes[2] = bytes[10];
 8028fd6:	7fba      	ldrb	r2, [r7, #30]
 8028fd8:	68bb      	ldr	r3, [r7, #8]
 8028fda:	729a      	strb	r2, [r3, #10]
                    info->max_rate.bytes[3] = bytes[11];
 8028fdc:	7ffa      	ldrb	r2, [r7, #31]
 8028fde:	68bb      	ldr	r3, [r7, #8]
 8028fe0:	72da      	strb	r2, [r3, #11]
                    info->fifo_reserved.bytes[0] = bytes[12];
 8028fe2:	f897 2020 	ldrb.w	r2, [r7, #32]
 8028fe6:	68bb      	ldr	r3, [r7, #8]
 8028fe8:	731a      	strb	r2, [r3, #12]
                    info->fifo_reserved.bytes[1] = bytes[13];
 8028fea:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8028fee:	68bb      	ldr	r3, [r7, #8]
 8028ff0:	735a      	strb	r2, [r3, #13]
                    info->fifo_reserved.bytes[2] = bytes[14];
 8028ff2:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8028ff6:	68bb      	ldr	r3, [r7, #8]
 8028ff8:	739a      	strb	r2, [r3, #14]
                    info->fifo_reserved.bytes[3] = bytes[15];
 8028ffa:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8028ffe:	68bb      	ldr	r3, [r7, #8]
 8029000:	73da      	strb	r2, [r3, #15]
                    info->fifo_max.bytes[0] = bytes[16];
 8029002:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8029006:	68bb      	ldr	r3, [r7, #8]
 8029008:	741a      	strb	r2, [r3, #16]
                    info->fifo_max.bytes[1] = bytes[17];
 802900a:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 802900e:	68bb      	ldr	r3, [r7, #8]
 8029010:	745a      	strb	r2, [r3, #17]
                    info->fifo_max.bytes[2] = bytes[18];
 8029012:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8029016:	68bb      	ldr	r3, [r7, #8]
 8029018:	749a      	strb	r2, [r3, #18]
                    info->fifo_max.bytes[3] = bytes[19];
 802901a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 802901e:	68bb      	ldr	r3, [r7, #8]
 8029020:	74da      	strb	r2, [r3, #19]
                    info->event_size = bytes[20];
 8029022:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8029026:	68bb      	ldr	r3, [r7, #8]
 8029028:	751a      	strb	r2, [r3, #20]
                    info->min_rate.bytes[0] = bytes[21];
 802902a:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 802902e:	68bb      	ldr	r3, [r7, #8]
 8029030:	761a      	strb	r2, [r3, #24]
                    info->min_rate.bytes[1] = bytes[22];
 8029032:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8029036:	68bb      	ldr	r3, [r7, #8]
 8029038:	765a      	strb	r2, [r3, #25]
                    info->min_rate.bytes[2] = bytes[23];
 802903a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 802903e:	68bb      	ldr	r3, [r7, #8]
 8029040:	769a      	strb	r2, [r3, #26]
                    info->min_rate.bytes[3] = bytes[24];
 8029042:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8029046:	68bb      	ldr	r3, [r7, #8]
 8029048:	76da      	strb	r2, [r3, #27]
                    info->max_range.u16_val = BHY2_LE2U16(info->max_range.bytes);
 802904a:	68bb      	ldr	r3, [r7, #8]
 802904c:	791b      	ldrb	r3, [r3, #4]
 802904e:	b21a      	sxth	r2, r3
 8029050:	68bb      	ldr	r3, [r7, #8]
 8029052:	795b      	ldrb	r3, [r3, #5]
 8029054:	021b      	lsls	r3, r3, #8
 8029056:	b21b      	sxth	r3, r3
 8029058:	4313      	orrs	r3, r2
 802905a:	b21b      	sxth	r3, r3
 802905c:	b29a      	uxth	r2, r3
 802905e:	68bb      	ldr	r3, [r7, #8]
 8029060:	809a      	strh	r2, [r3, #4]
                    info->resolution.u16_val = BHY2_LE2U16(info->resolution.bytes);
 8029062:	68bb      	ldr	r3, [r7, #8]
 8029064:	799b      	ldrb	r3, [r3, #6]
 8029066:	b21a      	sxth	r2, r3
 8029068:	68bb      	ldr	r3, [r7, #8]
 802906a:	79db      	ldrb	r3, [r3, #7]
 802906c:	021b      	lsls	r3, r3, #8
 802906e:	b21b      	sxth	r3, r3
 8029070:	4313      	orrs	r3, r2
 8029072:	b21b      	sxth	r3, r3
 8029074:	b29a      	uxth	r2, r3
 8029076:	68bb      	ldr	r3, [r7, #8]
 8029078:	80da      	strh	r2, [r3, #6]
                    info->max_rate.u32_val = BHY2_LE2U32(info->max_rate.bytes);
 802907a:	68bb      	ldr	r3, [r7, #8]
 802907c:	7a1b      	ldrb	r3, [r3, #8]
 802907e:	461a      	mov	r2, r3
 8029080:	68bb      	ldr	r3, [r7, #8]
 8029082:	7a5b      	ldrb	r3, [r3, #9]
 8029084:	021b      	lsls	r3, r3, #8
 8029086:	431a      	orrs	r2, r3
 8029088:	68bb      	ldr	r3, [r7, #8]
 802908a:	7a9b      	ldrb	r3, [r3, #10]
 802908c:	041b      	lsls	r3, r3, #16
 802908e:	431a      	orrs	r2, r3
 8029090:	68bb      	ldr	r3, [r7, #8]
 8029092:	7adb      	ldrb	r3, [r3, #11]
 8029094:	061b      	lsls	r3, r3, #24
 8029096:	431a      	orrs	r2, r3
 8029098:	68bb      	ldr	r3, [r7, #8]
 802909a:	609a      	str	r2, [r3, #8]
                    info->fifo_reserved.u32_val = BHY2_LE2U32(info->fifo_reserved.bytes);
 802909c:	68bb      	ldr	r3, [r7, #8]
 802909e:	7b1b      	ldrb	r3, [r3, #12]
 80290a0:	461a      	mov	r2, r3
 80290a2:	68bb      	ldr	r3, [r7, #8]
 80290a4:	7b5b      	ldrb	r3, [r3, #13]
 80290a6:	021b      	lsls	r3, r3, #8
 80290a8:	431a      	orrs	r2, r3
 80290aa:	68bb      	ldr	r3, [r7, #8]
 80290ac:	7b9b      	ldrb	r3, [r3, #14]
 80290ae:	041b      	lsls	r3, r3, #16
 80290b0:	431a      	orrs	r2, r3
 80290b2:	68bb      	ldr	r3, [r7, #8]
 80290b4:	7bdb      	ldrb	r3, [r3, #15]
 80290b6:	061b      	lsls	r3, r3, #24
 80290b8:	431a      	orrs	r2, r3
 80290ba:	68bb      	ldr	r3, [r7, #8]
 80290bc:	60da      	str	r2, [r3, #12]
                    info->fifo_max.u32_val = BHY2_LE2U32(info->fifo_max.bytes);
 80290be:	68bb      	ldr	r3, [r7, #8]
 80290c0:	7c1b      	ldrb	r3, [r3, #16]
 80290c2:	461a      	mov	r2, r3
 80290c4:	68bb      	ldr	r3, [r7, #8]
 80290c6:	7c5b      	ldrb	r3, [r3, #17]
 80290c8:	021b      	lsls	r3, r3, #8
 80290ca:	431a      	orrs	r2, r3
 80290cc:	68bb      	ldr	r3, [r7, #8]
 80290ce:	7c9b      	ldrb	r3, [r3, #18]
 80290d0:	041b      	lsls	r3, r3, #16
 80290d2:	431a      	orrs	r2, r3
 80290d4:	68bb      	ldr	r3, [r7, #8]
 80290d6:	7cdb      	ldrb	r3, [r3, #19]
 80290d8:	061b      	lsls	r3, r3, #24
 80290da:	431a      	orrs	r2, r3
 80290dc:	68bb      	ldr	r3, [r7, #8]
 80290de:	611a      	str	r2, [r3, #16]
                    info->min_rate.u32_val = BHY2_LE2U32(info->min_rate.bytes);
 80290e0:	68bb      	ldr	r3, [r7, #8]
 80290e2:	7e1b      	ldrb	r3, [r3, #24]
 80290e4:	461a      	mov	r2, r3
 80290e6:	68bb      	ldr	r3, [r7, #8]
 80290e8:	7e5b      	ldrb	r3, [r3, #25]
 80290ea:	021b      	lsls	r3, r3, #8
 80290ec:	431a      	orrs	r2, r3
 80290ee:	68bb      	ldr	r3, [r7, #8]
 80290f0:	7e9b      	ldrb	r3, [r3, #26]
 80290f2:	041b      	lsls	r3, r3, #16
 80290f4:	431a      	orrs	r2, r3
 80290f6:	68bb      	ldr	r3, [r7, #8]
 80290f8:	7edb      	ldrb	r3, [r3, #27]
 80290fa:	061b      	lsls	r3, r3, #24
 80290fc:	431a      	orrs	r2, r3
 80290fe:	68bb      	ldr	r3, [r7, #8]
 8029100:	619a      	str	r2, [r3, #24]
 8029102:	e002      	b.n	802910a <bhy2_hif_get_sensor_info+0x1d0>
            }
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8029104:	23ff      	movs	r3, #255	; 0xff
 8029106:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    }

    return rslt;
 802910a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 802910e:	4618      	mov	r0, r3
 8029110:	3738      	adds	r7, #56	; 0x38
 8029112:	46bd      	mov	sp, r7
 8029114:	bd80      	pop	{r7, pc}

08029116 <bhy2_parse_quaternion>:
{
    *altitude = (float)(data[0] | ((uint32_t)data[1] << 8) | ((uint32_t)data[2] << 16) | ((uint32_t)data[3] << 24));
}

void bhy2_parse_quaternion(const uint8_t *data, struct bhy2_data_quaternion *quaternion)
{
 8029116:	b480      	push	{r7}
 8029118:	b083      	sub	sp, #12
 802911a:	af00      	add	r7, sp, #0
 802911c:	6078      	str	r0, [r7, #4]
 802911e:	6039      	str	r1, [r7, #0]
    quaternion->x = BHY2_LE2S16(data);
 8029120:	687b      	ldr	r3, [r7, #4]
 8029122:	781b      	ldrb	r3, [r3, #0]
 8029124:	b21a      	sxth	r2, r3
 8029126:	687b      	ldr	r3, [r7, #4]
 8029128:	3301      	adds	r3, #1
 802912a:	781b      	ldrb	r3, [r3, #0]
 802912c:	021b      	lsls	r3, r3, #8
 802912e:	b21b      	sxth	r3, r3
 8029130:	4313      	orrs	r3, r2
 8029132:	b21a      	sxth	r2, r3
 8029134:	683b      	ldr	r3, [r7, #0]
 8029136:	801a      	strh	r2, [r3, #0]
    quaternion->y = BHY2_LE2S16(data + 2);
 8029138:	687b      	ldr	r3, [r7, #4]
 802913a:	3302      	adds	r3, #2
 802913c:	781b      	ldrb	r3, [r3, #0]
 802913e:	b21a      	sxth	r2, r3
 8029140:	687b      	ldr	r3, [r7, #4]
 8029142:	3303      	adds	r3, #3
 8029144:	781b      	ldrb	r3, [r3, #0]
 8029146:	021b      	lsls	r3, r3, #8
 8029148:	b21b      	sxth	r3, r3
 802914a:	4313      	orrs	r3, r2
 802914c:	b21a      	sxth	r2, r3
 802914e:	683b      	ldr	r3, [r7, #0]
 8029150:	805a      	strh	r2, [r3, #2]
    quaternion->z = BHY2_LE2S16(data + 4);
 8029152:	687b      	ldr	r3, [r7, #4]
 8029154:	3304      	adds	r3, #4
 8029156:	781b      	ldrb	r3, [r3, #0]
 8029158:	b21a      	sxth	r2, r3
 802915a:	687b      	ldr	r3, [r7, #4]
 802915c:	3305      	adds	r3, #5
 802915e:	781b      	ldrb	r3, [r3, #0]
 8029160:	021b      	lsls	r3, r3, #8
 8029162:	b21b      	sxth	r3, r3
 8029164:	4313      	orrs	r3, r2
 8029166:	b21a      	sxth	r2, r3
 8029168:	683b      	ldr	r3, [r7, #0]
 802916a:	809a      	strh	r2, [r3, #4]
    quaternion->w = BHY2_LE2S16(data + 6);
 802916c:	687b      	ldr	r3, [r7, #4]
 802916e:	3306      	adds	r3, #6
 8029170:	781b      	ldrb	r3, [r3, #0]
 8029172:	b21a      	sxth	r2, r3
 8029174:	687b      	ldr	r3, [r7, #4]
 8029176:	3307      	adds	r3, #7
 8029178:	781b      	ldrb	r3, [r3, #0]
 802917a:	021b      	lsls	r3, r3, #8
 802917c:	b21b      	sxth	r3, r3
 802917e:	4313      	orrs	r3, r2
 8029180:	b21a      	sxth	r2, r3
 8029182:	683b      	ldr	r3, [r7, #0]
 8029184:	80da      	strh	r2, [r3, #6]
    quaternion->accuracy = BHY2_LE2U16(data + 8);
 8029186:	687b      	ldr	r3, [r7, #4]
 8029188:	3308      	adds	r3, #8
 802918a:	781b      	ldrb	r3, [r3, #0]
 802918c:	b21a      	sxth	r2, r3
 802918e:	687b      	ldr	r3, [r7, #4]
 8029190:	3309      	adds	r3, #9
 8029192:	781b      	ldrb	r3, [r3, #0]
 8029194:	021b      	lsls	r3, r3, #8
 8029196:	b21b      	sxth	r3, r3
 8029198:	4313      	orrs	r3, r2
 802919a:	b21b      	sxth	r3, r3
 802919c:	b29a      	uxth	r2, r3
 802919e:	683b      	ldr	r3, [r7, #0]
 80291a0:	811a      	strh	r2, [r3, #8]
}
 80291a2:	bf00      	nop
 80291a4:	370c      	adds	r7, #12
 80291a6:	46bd      	mov	sp, r7
 80291a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80291ac:	4770      	bx	lr
	...

080291b0 <MX_COMP2_Init>:

COMP_HandleTypeDef hcomp2;

/* COMP2 init function */
void MX_COMP2_Init(void)
{
 80291b0:	b580      	push	{r7, lr}
 80291b2:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 80291b4:	4b12      	ldr	r3, [pc, #72]	; (8029200 <MX_COMP2_Init+0x50>)
 80291b6:	4a13      	ldr	r2, [pc, #76]	; (8029204 <MX_COMP2_Init+0x54>)
 80291b8:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INPUT_MINUS_DAC1_CH1;
 80291ba:	4b11      	ldr	r3, [pc, #68]	; (8029200 <MX_COMP2_Init+0x50>)
 80291bc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80291c0:	611a      	str	r2, [r3, #16]
  hcomp2.Init.NonInvertingInput = COMP_INPUT_PLUS_IO1;
 80291c2:	4b0f      	ldr	r3, [pc, #60]	; (8029200 <MX_COMP2_Init+0x50>)
 80291c4:	2200      	movs	r2, #0
 80291c6:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80291c8:	4b0d      	ldr	r3, [pc, #52]	; (8029200 <MX_COMP2_Init+0x50>)
 80291ca:	2200      	movs	r2, #0
 80291cc:	619a      	str	r2, [r3, #24]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80291ce:	4b0c      	ldr	r3, [pc, #48]	; (8029200 <MX_COMP2_Init+0x50>)
 80291d0:	2200      	movs	r2, #0
 80291d2:	615a      	str	r2, [r3, #20]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 80291d4:	4b0a      	ldr	r3, [pc, #40]	; (8029200 <MX_COMP2_Init+0x50>)
 80291d6:	2200      	movs	r2, #0
 80291d8:	61da      	str	r2, [r3, #28]
  hcomp2.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 80291da:	4b09      	ldr	r3, [pc, #36]	; (8029200 <MX_COMP2_Init+0x50>)
 80291dc:	2200      	movs	r2, #0
 80291de:	609a      	str	r2, [r3, #8]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 80291e0:	4b07      	ldr	r3, [pc, #28]	; (8029200 <MX_COMP2_Init+0x50>)
 80291e2:	2200      	movs	r2, #0
 80291e4:	605a      	str	r2, [r3, #4]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING_FALLING;
 80291e6:	4b06      	ldr	r3, [pc, #24]	; (8029200 <MX_COMP2_Init+0x50>)
 80291e8:	2231      	movs	r2, #49	; 0x31
 80291ea:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 80291ec:	4804      	ldr	r0, [pc, #16]	; (8029200 <MX_COMP2_Init+0x50>)
 80291ee:	f001 fd1f 	bl	802ac30 <HAL_COMP_Init>
 80291f2:	4603      	mov	r3, r0
 80291f4:	2b00      	cmp	r3, #0
 80291f6:	d001      	beq.n	80291fc <MX_COMP2_Init+0x4c>
  {
    Error_Handler();
 80291f8:	f000 fc28 	bl	8029a4c <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 80291fc:	bf00      	nop
 80291fe:	bd80      	pop	{r7, pc}
 8029200:	24024518 	.word	0x24024518
 8029204:	58003810 	.word	0x58003810

08029208 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 8029208:	b580      	push	{r7, lr}
 802920a:	b08a      	sub	sp, #40	; 0x28
 802920c:	af00      	add	r7, sp, #0
 802920e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8029210:	f107 0314 	add.w	r3, r7, #20
 8029214:	2200      	movs	r2, #0
 8029216:	601a      	str	r2, [r3, #0]
 8029218:	605a      	str	r2, [r3, #4]
 802921a:	609a      	str	r2, [r3, #8]
 802921c:	60da      	str	r2, [r3, #12]
 802921e:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP2)
 8029220:	687b      	ldr	r3, [r7, #4]
 8029222:	681b      	ldr	r3, [r3, #0]
 8029224:	4a1c      	ldr	r2, [pc, #112]	; (8029298 <HAL_COMP_MspInit+0x90>)
 8029226:	4293      	cmp	r3, r2
 8029228:	d132      	bne.n	8029290 <HAL_COMP_MspInit+0x88>
  {
  /* USER CODE BEGIN COMP2_MspInit 0 */

  /* USER CODE END COMP2_MspInit 0 */
    /* COMP2 clock enable */
    __HAL_RCC_COMP12_CLK_ENABLE();
 802922a:	4b1c      	ldr	r3, [pc, #112]	; (802929c <HAL_COMP_MspInit+0x94>)
 802922c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8029230:	4a1a      	ldr	r2, [pc, #104]	; (802929c <HAL_COMP_MspInit+0x94>)
 8029232:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8029236:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 802923a:	4b18      	ldr	r3, [pc, #96]	; (802929c <HAL_COMP_MspInit+0x94>)
 802923c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8029240:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8029244:	613b      	str	r3, [r7, #16]
 8029246:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8029248:	4b14      	ldr	r3, [pc, #80]	; (802929c <HAL_COMP_MspInit+0x94>)
 802924a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802924e:	4a13      	ldr	r2, [pc, #76]	; (802929c <HAL_COMP_MspInit+0x94>)
 8029250:	f043 0310 	orr.w	r3, r3, #16
 8029254:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8029258:	4b10      	ldr	r3, [pc, #64]	; (802929c <HAL_COMP_MspInit+0x94>)
 802925a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802925e:	f003 0310 	and.w	r3, r3, #16
 8029262:	60fb      	str	r3, [r7, #12]
 8029264:	68fb      	ldr	r3, [r7, #12]
    /**COMP2 GPIO Configuration
    PE9     ------> COMP2_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8029266:	f44f 7300 	mov.w	r3, #512	; 0x200
 802926a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 802926c:	2303      	movs	r3, #3
 802926e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8029270:	2300      	movs	r3, #0
 8029272:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8029274:	f107 0314 	add.w	r3, r7, #20
 8029278:	4619      	mov	r1, r3
 802927a:	4809      	ldr	r0, [pc, #36]	; (80292a0 <HAL_COMP_MspInit+0x98>)
 802927c:	f004 ffee 	bl	802e25c <HAL_GPIO_Init>

    /* COMP2 interrupt Init */
    HAL_NVIC_SetPriority(COMP_IRQn, 4, 0);
 8029280:	2200      	movs	r2, #0
 8029282:	2104      	movs	r1, #4
 8029284:	2089      	movs	r0, #137	; 0x89
 8029286:	f001 ff96 	bl	802b1b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP_IRQn);
 802928a:	2089      	movs	r0, #137	; 0x89
 802928c:	f001 ffad 	bl	802b1ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }
}
 8029290:	bf00      	nop
 8029292:	3728      	adds	r7, #40	; 0x28
 8029294:	46bd      	mov	sp, r7
 8029296:	bd80      	pop	{r7, pc}
 8029298:	58003810 	.word	0x58003810
 802929c:	58024400 	.word	0x58024400
 80292a0:	58021000 	.word	0x58021000

080292a4 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80292a4:	b580      	push	{r7, lr}
 80292a6:	b08a      	sub	sp, #40	; 0x28
 80292a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80292aa:	1d3b      	adds	r3, r7, #4
 80292ac:	2224      	movs	r2, #36	; 0x24
 80292ae:	2100      	movs	r1, #0
 80292b0:	4618      	mov	r0, r3
 80292b2:	f012 fd8d 	bl	803bdd0 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80292b6:	4b12      	ldr	r3, [pc, #72]	; (8029300 <MX_DAC1_Init+0x5c>)
 80292b8:	4a12      	ldr	r2, [pc, #72]	; (8029304 <MX_DAC1_Init+0x60>)
 80292ba:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80292bc:	4810      	ldr	r0, [pc, #64]	; (8029300 <MX_DAC1_Init+0x5c>)
 80292be:	f001 ffae 	bl	802b21e <HAL_DAC_Init>
 80292c2:	4603      	mov	r3, r0
 80292c4:	2b00      	cmp	r3, #0
 80292c6:	d001      	beq.n	80292cc <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80292c8:	f000 fbc0 	bl	8029a4c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80292cc:	2300      	movs	r3, #0
 80292ce:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80292d0:	2300      	movs	r3, #0
 80292d2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 80292d4:	2302      	movs	r3, #2
 80292d6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 80292d8:	2302      	movs	r3, #2
 80292da:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80292dc:	2300      	movs	r3, #0
 80292de:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80292e0:	1d3b      	adds	r3, r7, #4
 80292e2:	2200      	movs	r2, #0
 80292e4:	4619      	mov	r1, r3
 80292e6:	4806      	ldr	r0, [pc, #24]	; (8029300 <MX_DAC1_Init+0x5c>)
 80292e8:	f002 f832 	bl	802b350 <HAL_DAC_ConfigChannel>
 80292ec:	4603      	mov	r3, r0
 80292ee:	2b00      	cmp	r3, #0
 80292f0:	d001      	beq.n	80292f6 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80292f2:	f000 fbab 	bl	8029a4c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80292f6:	bf00      	nop
 80292f8:	3728      	adds	r7, #40	; 0x28
 80292fa:	46bd      	mov	sp, r7
 80292fc:	bd80      	pop	{r7, pc}
 80292fe:	bf00      	nop
 8029300:	24024544 	.word	0x24024544
 8029304:	40007400 	.word	0x40007400

08029308 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8029308:	b480      	push	{r7}
 802930a:	b085      	sub	sp, #20
 802930c:	af00      	add	r7, sp, #0
 802930e:	6078      	str	r0, [r7, #4]

  if(dacHandle->Instance==DAC1)
 8029310:	687b      	ldr	r3, [r7, #4]
 8029312:	681b      	ldr	r3, [r3, #0]
 8029314:	4a0b      	ldr	r2, [pc, #44]	; (8029344 <HAL_DAC_MspInit+0x3c>)
 8029316:	4293      	cmp	r3, r2
 8029318:	d10e      	bne.n	8029338 <HAL_DAC_MspInit+0x30>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 802931a:	4b0b      	ldr	r3, [pc, #44]	; (8029348 <HAL_DAC_MspInit+0x40>)
 802931c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8029320:	4a09      	ldr	r2, [pc, #36]	; (8029348 <HAL_DAC_MspInit+0x40>)
 8029322:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8029326:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 802932a:	4b07      	ldr	r3, [pc, #28]	; (8029348 <HAL_DAC_MspInit+0x40>)
 802932c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8029330:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8029334:	60fb      	str	r3, [r7, #12]
 8029336:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8029338:	bf00      	nop
 802933a:	3714      	adds	r7, #20
 802933c:	46bd      	mov	sp, r7
 802933e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029342:	4770      	bx	lr
 8029344:	40007400 	.word	0x40007400
 8029348:	58024400 	.word	0x58024400

0802934c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 802934c:	b580      	push	{r7, lr}
 802934e:	b082      	sub	sp, #8
 8029350:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8029352:	4b19      	ldr	r3, [pc, #100]	; (80293b8 <MX_DMA_Init+0x6c>)
 8029354:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8029358:	4a17      	ldr	r2, [pc, #92]	; (80293b8 <MX_DMA_Init+0x6c>)
 802935a:	f043 0301 	orr.w	r3, r3, #1
 802935e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8029362:	4b15      	ldr	r3, [pc, #84]	; (80293b8 <MX_DMA_Init+0x6c>)
 8029364:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8029368:	f003 0301 	and.w	r3, r3, #1
 802936c:	607b      	str	r3, [r7, #4]
 802936e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8029370:	2200      	movs	r2, #0
 8029372:	2100      	movs	r1, #0
 8029374:	200b      	movs	r0, #11
 8029376:	f001 ff1e 	bl	802b1b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 802937a:	200b      	movs	r0, #11
 802937c:	f001 ff35 	bl	802b1ea <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8029380:	2200      	movs	r2, #0
 8029382:	2100      	movs	r1, #0
 8029384:	200c      	movs	r0, #12
 8029386:	f001 ff16 	bl	802b1b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 802938a:	200c      	movs	r0, #12
 802938c:	f001 ff2d 	bl	802b1ea <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8029390:	2200      	movs	r2, #0
 8029392:	2100      	movs	r1, #0
 8029394:	200f      	movs	r0, #15
 8029396:	f001 ff0e 	bl	802b1b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 802939a:	200f      	movs	r0, #15
 802939c:	f001 ff25 	bl	802b1ea <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80293a0:	2200      	movs	r2, #0
 80293a2:	2100      	movs	r1, #0
 80293a4:	2010      	movs	r0, #16
 80293a6:	f001 ff06 	bl	802b1b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80293aa:	2010      	movs	r0, #16
 80293ac:	f001 ff1d 	bl	802b1ea <HAL_NVIC_EnableIRQ>

}
 80293b0:	bf00      	nop
 80293b2:	3708      	adds	r7, #8
 80293b4:	46bd      	mov	sp, r7
 80293b6:	bd80      	pop	{r7, pc}
 80293b8:	58024400 	.word	0x58024400

080293bc <MX_GPIO_Init>:
/** Configure pins
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 80293bc:	b580      	push	{r7, lr}
 80293be:	b08a      	sub	sp, #40	; 0x28
 80293c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80293c2:	f107 0314 	add.w	r3, r7, #20
 80293c6:	2200      	movs	r2, #0
 80293c8:	601a      	str	r2, [r3, #0]
 80293ca:	605a      	str	r2, [r3, #4]
 80293cc:	609a      	str	r2, [r3, #8]
 80293ce:	60da      	str	r2, [r3, #12]
 80293d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80293d2:	4b3b      	ldr	r3, [pc, #236]	; (80294c0 <MX_GPIO_Init+0x104>)
 80293d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80293d8:	4a39      	ldr	r2, [pc, #228]	; (80294c0 <MX_GPIO_Init+0x104>)
 80293da:	f043 0304 	orr.w	r3, r3, #4
 80293de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80293e2:	4b37      	ldr	r3, [pc, #220]	; (80294c0 <MX_GPIO_Init+0x104>)
 80293e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80293e8:	f003 0304 	and.w	r3, r3, #4
 80293ec:	613b      	str	r3, [r7, #16]
 80293ee:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80293f0:	4b33      	ldr	r3, [pc, #204]	; (80294c0 <MX_GPIO_Init+0x104>)
 80293f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80293f6:	4a32      	ldr	r2, [pc, #200]	; (80294c0 <MX_GPIO_Init+0x104>)
 80293f8:	f043 0301 	orr.w	r3, r3, #1
 80293fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8029400:	4b2f      	ldr	r3, [pc, #188]	; (80294c0 <MX_GPIO_Init+0x104>)
 8029402:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8029406:	f003 0301 	and.w	r3, r3, #1
 802940a:	60fb      	str	r3, [r7, #12]
 802940c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 802940e:	4b2c      	ldr	r3, [pc, #176]	; (80294c0 <MX_GPIO_Init+0x104>)
 8029410:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8029414:	4a2a      	ldr	r2, [pc, #168]	; (80294c0 <MX_GPIO_Init+0x104>)
 8029416:	f043 0310 	orr.w	r3, r3, #16
 802941a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802941e:	4b28      	ldr	r3, [pc, #160]	; (80294c0 <MX_GPIO_Init+0x104>)
 8029420:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8029424:	f003 0310 	and.w	r3, r3, #16
 8029428:	60bb      	str	r3, [r7, #8]
 802942a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 802942c:	4b24      	ldr	r3, [pc, #144]	; (80294c0 <MX_GPIO_Init+0x104>)
 802942e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8029432:	4a23      	ldr	r2, [pc, #140]	; (80294c0 <MX_GPIO_Init+0x104>)
 8029434:	f043 0302 	orr.w	r3, r3, #2
 8029438:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802943c:	4b20      	ldr	r3, [pc, #128]	; (80294c0 <MX_GPIO_Init+0x104>)
 802943e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8029442:	f003 0302 	and.w	r3, r3, #2
 8029446:	607b      	str	r3, [r7, #4]
 8029448:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 802944a:	4b1d      	ldr	r3, [pc, #116]	; (80294c0 <MX_GPIO_Init+0x104>)
 802944c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8029450:	4a1b      	ldr	r2, [pc, #108]	; (80294c0 <MX_GPIO_Init+0x104>)
 8029452:	f043 0308 	orr.w	r3, r3, #8
 8029456:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802945a:	4b19      	ldr	r3, [pc, #100]	; (80294c0 <MX_GPIO_Init+0x104>)
 802945c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8029460:	f003 0308 	and.w	r3, r3, #8
 8029464:	603b      	str	r3, [r7, #0]
 8029466:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAM_SYNC_GPIO_Port, CAM_SYNC_Pin, GPIO_PIN_RESET);
 8029468:	2200      	movs	r2, #0
 802946a:	2101      	movs	r1, #1
 802946c:	4815      	ldr	r0, [pc, #84]	; (80294c4 <MX_GPIO_Init+0x108>)
 802946e:	f005 f8a5 	bl	802e5bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_CS_GPIO_Port, IMU_CS_Pin, GPIO_PIN_RESET);
 8029472:	2200      	movs	r2, #0
 8029474:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8029478:	4813      	ldr	r0, [pc, #76]	; (80294c8 <MX_GPIO_Init+0x10c>)
 802947a:	f005 f89f 	bl	802e5bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAM_SYNC_Pin;
 802947e:	2301      	movs	r3, #1
 8029480:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8029482:	2301      	movs	r3, #1
 8029484:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8029486:	2302      	movs	r3, #2
 8029488:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 802948a:	2303      	movs	r3, #3
 802948c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CAM_SYNC_GPIO_Port, &GPIO_InitStruct);
 802948e:	f107 0314 	add.w	r3, r7, #20
 8029492:	4619      	mov	r1, r3
 8029494:	480b      	ldr	r0, [pc, #44]	; (80294c4 <MX_GPIO_Init+0x108>)
 8029496:	f004 fee1 	bl	802e25c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_CS_Pin;
 802949a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 802949e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80294a0:	2301      	movs	r3, #1
 80294a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80294a4:	2302      	movs	r3, #2
 80294a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80294a8:	2303      	movs	r3, #3
 80294aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IMU_CS_GPIO_Port, &GPIO_InitStruct);
 80294ac:	f107 0314 	add.w	r3, r7, #20
 80294b0:	4619      	mov	r1, r3
 80294b2:	4805      	ldr	r0, [pc, #20]	; (80294c8 <MX_GPIO_Init+0x10c>)
 80294b4:	f004 fed2 	bl	802e25c <HAL_GPIO_Init>

}
 80294b8:	bf00      	nop
 80294ba:	3728      	adds	r7, #40	; 0x28
 80294bc:	46bd      	mov	sp, r7
 80294be:	bd80      	pop	{r7, pc}
 80294c0:	58024400 	.word	0x58024400
 80294c4:	58020800 	.word	0x58020800
 80294c8:	58021000 	.word	0x58021000

080294cc <MX_I2C2_Init>:
DMA_HandleTypeDef hdma_i2c2_rx;
DMA_HandleTypeDef hdma_i2c2_tx;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80294cc:	b580      	push	{r7, lr}
 80294ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80294d0:	4b1b      	ldr	r3, [pc, #108]	; (8029540 <MX_I2C2_Init+0x74>)
 80294d2:	4a1c      	ldr	r2, [pc, #112]	; (8029544 <MX_I2C2_Init+0x78>)
 80294d4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00B03FDB;
 80294d6:	4b1a      	ldr	r3, [pc, #104]	; (8029540 <MX_I2C2_Init+0x74>)
 80294d8:	4a1b      	ldr	r2, [pc, #108]	; (8029548 <MX_I2C2_Init+0x7c>)
 80294da:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80294dc:	4b18      	ldr	r3, [pc, #96]	; (8029540 <MX_I2C2_Init+0x74>)
 80294de:	2200      	movs	r2, #0
 80294e0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80294e2:	4b17      	ldr	r3, [pc, #92]	; (8029540 <MX_I2C2_Init+0x74>)
 80294e4:	2201      	movs	r2, #1
 80294e6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80294e8:	4b15      	ldr	r3, [pc, #84]	; (8029540 <MX_I2C2_Init+0x74>)
 80294ea:	2200      	movs	r2, #0
 80294ec:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80294ee:	4b14      	ldr	r3, [pc, #80]	; (8029540 <MX_I2C2_Init+0x74>)
 80294f0:	2200      	movs	r2, #0
 80294f2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80294f4:	4b12      	ldr	r3, [pc, #72]	; (8029540 <MX_I2C2_Init+0x74>)
 80294f6:	2200      	movs	r2, #0
 80294f8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80294fa:	4b11      	ldr	r3, [pc, #68]	; (8029540 <MX_I2C2_Init+0x74>)
 80294fc:	2200      	movs	r2, #0
 80294fe:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8029500:	4b0f      	ldr	r3, [pc, #60]	; (8029540 <MX_I2C2_Init+0x74>)
 8029502:	2200      	movs	r2, #0
 8029504:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8029506:	480e      	ldr	r0, [pc, #56]	; (8029540 <MX_I2C2_Init+0x74>)
 8029508:	f005 f872 	bl	802e5f0 <HAL_I2C_Init>
 802950c:	4603      	mov	r3, r0
 802950e:	2b00      	cmp	r3, #0
 8029510:	d001      	beq.n	8029516 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8029512:	f000 fa9b 	bl	8029a4c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8029516:	2100      	movs	r1, #0
 8029518:	4809      	ldr	r0, [pc, #36]	; (8029540 <MX_I2C2_Init+0x74>)
 802951a:	f005 ff7e 	bl	802f41a <HAL_I2CEx_ConfigAnalogFilter>
 802951e:	4603      	mov	r3, r0
 8029520:	2b00      	cmp	r3, #0
 8029522:	d001      	beq.n	8029528 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8029524:	f000 fa92 	bl	8029a4c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8029528:	2100      	movs	r1, #0
 802952a:	4805      	ldr	r0, [pc, #20]	; (8029540 <MX_I2C2_Init+0x74>)
 802952c:	f005 ffc0 	bl	802f4b0 <HAL_I2CEx_ConfigDigitalFilter>
 8029530:	4603      	mov	r3, r0
 8029532:	2b00      	cmp	r3, #0
 8029534:	d001      	beq.n	802953a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8029536:	f000 fa89 	bl	8029a4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 802953a:	bf00      	nop
 802953c:	bd80      	pop	{r7, pc}
 802953e:	bf00      	nop
 8029540:	24024558 	.word	0x24024558
 8029544:	40005800 	.word	0x40005800
 8029548:	00b03fdb 	.word	0x00b03fdb

0802954c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 802954c:	b580      	push	{r7, lr}
 802954e:	b0b8      	sub	sp, #224	; 0xe0
 8029550:	af00      	add	r7, sp, #0
 8029552:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8029554:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8029558:	2200      	movs	r2, #0
 802955a:	601a      	str	r2, [r3, #0]
 802955c:	605a      	str	r2, [r3, #4]
 802955e:	609a      	str	r2, [r3, #8]
 8029560:	60da      	str	r2, [r3, #12]
 8029562:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8029564:	f107 0310 	add.w	r3, r7, #16
 8029568:	22bc      	movs	r2, #188	; 0xbc
 802956a:	2100      	movs	r1, #0
 802956c:	4618      	mov	r0, r3
 802956e:	f012 fc2f 	bl	803bdd0 <memset>
  if(i2cHandle->Instance==I2C2)
 8029572:	687b      	ldr	r3, [r7, #4]
 8029574:	681b      	ldr	r3, [r3, #0]
 8029576:	4a5a      	ldr	r2, [pc, #360]	; (80296e0 <HAL_I2C_MspInit+0x194>)
 8029578:	4293      	cmp	r3, r2
 802957a:	f040 80ad 	bne.w	80296d8 <HAL_I2C_MspInit+0x18c>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 802957e:	2308      	movs	r3, #8
 8029580:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8029582:	2300      	movs	r3, #0
 8029584:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8029588:	f107 0310 	add.w	r3, r7, #16
 802958c:	4618      	mov	r0, r3
 802958e:	f008 fab5 	bl	8031afc <HAL_RCCEx_PeriphCLKConfig>
 8029592:	4603      	mov	r3, r0
 8029594:	2b00      	cmp	r3, #0
 8029596:	d001      	beq.n	802959c <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8029598:	f000 fa58 	bl	8029a4c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 802959c:	4b51      	ldr	r3, [pc, #324]	; (80296e4 <HAL_I2C_MspInit+0x198>)
 802959e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80295a2:	4a50      	ldr	r2, [pc, #320]	; (80296e4 <HAL_I2C_MspInit+0x198>)
 80295a4:	f043 0302 	orr.w	r3, r3, #2
 80295a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80295ac:	4b4d      	ldr	r3, [pc, #308]	; (80296e4 <HAL_I2C_MspInit+0x198>)
 80295ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80295b2:	f003 0302 	and.w	r3, r3, #2
 80295b6:	60fb      	str	r3, [r7, #12]
 80295b8:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80295ba:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80295be:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80295c2:	2312      	movs	r3, #18
 80295c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80295c8:	2300      	movs	r3, #0
 80295ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80295ce:	2300      	movs	r3, #0
 80295d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80295d4:	2304      	movs	r3, #4
 80295d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80295da:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80295de:	4619      	mov	r1, r3
 80295e0:	4841      	ldr	r0, [pc, #260]	; (80296e8 <HAL_I2C_MspInit+0x19c>)
 80295e2:	f004 fe3b 	bl	802e25c <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80295e6:	4b3f      	ldr	r3, [pc, #252]	; (80296e4 <HAL_I2C_MspInit+0x198>)
 80295e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80295ec:	4a3d      	ldr	r2, [pc, #244]	; (80296e4 <HAL_I2C_MspInit+0x198>)
 80295ee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80295f2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80295f6:	4b3b      	ldr	r3, [pc, #236]	; (80296e4 <HAL_I2C_MspInit+0x198>)
 80295f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80295fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8029600:	60bb      	str	r3, [r7, #8]
 8029602:	68bb      	ldr	r3, [r7, #8]

    /* I2C2 DMA Init */
    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Stream0;
 8029604:	4b39      	ldr	r3, [pc, #228]	; (80296ec <HAL_I2C_MspInit+0x1a0>)
 8029606:	4a3a      	ldr	r2, [pc, #232]	; (80296f0 <HAL_I2C_MspInit+0x1a4>)
 8029608:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Request = DMA_REQUEST_I2C2_RX;
 802960a:	4b38      	ldr	r3, [pc, #224]	; (80296ec <HAL_I2C_MspInit+0x1a0>)
 802960c:	2223      	movs	r2, #35	; 0x23
 802960e:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8029610:	4b36      	ldr	r3, [pc, #216]	; (80296ec <HAL_I2C_MspInit+0x1a0>)
 8029612:	2200      	movs	r2, #0
 8029614:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8029616:	4b35      	ldr	r3, [pc, #212]	; (80296ec <HAL_I2C_MspInit+0x1a0>)
 8029618:	2200      	movs	r2, #0
 802961a:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 802961c:	4b33      	ldr	r3, [pc, #204]	; (80296ec <HAL_I2C_MspInit+0x1a0>)
 802961e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8029622:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8029624:	4b31      	ldr	r3, [pc, #196]	; (80296ec <HAL_I2C_MspInit+0x1a0>)
 8029626:	2200      	movs	r2, #0
 8029628:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 802962a:	4b30      	ldr	r3, [pc, #192]	; (80296ec <HAL_I2C_MspInit+0x1a0>)
 802962c:	2200      	movs	r2, #0
 802962e:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8029630:	4b2e      	ldr	r3, [pc, #184]	; (80296ec <HAL_I2C_MspInit+0x1a0>)
 8029632:	2200      	movs	r2, #0
 8029634:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8029636:	4b2d      	ldr	r3, [pc, #180]	; (80296ec <HAL_I2C_MspInit+0x1a0>)
 8029638:	2200      	movs	r2, #0
 802963a:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 802963c:	4b2b      	ldr	r3, [pc, #172]	; (80296ec <HAL_I2C_MspInit+0x1a0>)
 802963e:	2200      	movs	r2, #0
 8029640:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8029642:	482a      	ldr	r0, [pc, #168]	; (80296ec <HAL_I2C_MspInit+0x1a0>)
 8029644:	f001 ffb4 	bl	802b5b0 <HAL_DMA_Init>
 8029648:	4603      	mov	r3, r0
 802964a:	2b00      	cmp	r3, #0
 802964c:	d001      	beq.n	8029652 <HAL_I2C_MspInit+0x106>
    {
      Error_Handler();
 802964e:	f000 f9fd 	bl	8029a4c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 8029652:	687b      	ldr	r3, [r7, #4]
 8029654:	4a25      	ldr	r2, [pc, #148]	; (80296ec <HAL_I2C_MspInit+0x1a0>)
 8029656:	63da      	str	r2, [r3, #60]	; 0x3c
 8029658:	4a24      	ldr	r2, [pc, #144]	; (80296ec <HAL_I2C_MspInit+0x1a0>)
 802965a:	687b      	ldr	r3, [r7, #4]
 802965c:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Stream1;
 802965e:	4b25      	ldr	r3, [pc, #148]	; (80296f4 <HAL_I2C_MspInit+0x1a8>)
 8029660:	4a25      	ldr	r2, [pc, #148]	; (80296f8 <HAL_I2C_MspInit+0x1ac>)
 8029662:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Request = DMA_REQUEST_I2C2_TX;
 8029664:	4b23      	ldr	r3, [pc, #140]	; (80296f4 <HAL_I2C_MspInit+0x1a8>)
 8029666:	2224      	movs	r2, #36	; 0x24
 8029668:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 802966a:	4b22      	ldr	r3, [pc, #136]	; (80296f4 <HAL_I2C_MspInit+0x1a8>)
 802966c:	2240      	movs	r2, #64	; 0x40
 802966e:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8029670:	4b20      	ldr	r3, [pc, #128]	; (80296f4 <HAL_I2C_MspInit+0x1a8>)
 8029672:	2200      	movs	r2, #0
 8029674:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8029676:	4b1f      	ldr	r3, [pc, #124]	; (80296f4 <HAL_I2C_MspInit+0x1a8>)
 8029678:	f44f 6280 	mov.w	r2, #1024	; 0x400
 802967c:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 802967e:	4b1d      	ldr	r3, [pc, #116]	; (80296f4 <HAL_I2C_MspInit+0x1a8>)
 8029680:	2200      	movs	r2, #0
 8029682:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8029684:	4b1b      	ldr	r3, [pc, #108]	; (80296f4 <HAL_I2C_MspInit+0x1a8>)
 8029686:	2200      	movs	r2, #0
 8029688:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 802968a:	4b1a      	ldr	r3, [pc, #104]	; (80296f4 <HAL_I2C_MspInit+0x1a8>)
 802968c:	2200      	movs	r2, #0
 802968e:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8029690:	4b18      	ldr	r3, [pc, #96]	; (80296f4 <HAL_I2C_MspInit+0x1a8>)
 8029692:	2200      	movs	r2, #0
 8029694:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8029696:	4b17      	ldr	r3, [pc, #92]	; (80296f4 <HAL_I2C_MspInit+0x1a8>)
 8029698:	2200      	movs	r2, #0
 802969a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 802969c:	4815      	ldr	r0, [pc, #84]	; (80296f4 <HAL_I2C_MspInit+0x1a8>)
 802969e:	f001 ff87 	bl	802b5b0 <HAL_DMA_Init>
 80296a2:	4603      	mov	r3, r0
 80296a4:	2b00      	cmp	r3, #0
 80296a6:	d001      	beq.n	80296ac <HAL_I2C_MspInit+0x160>
    {
      Error_Handler();
 80296a8:	f000 f9d0 	bl	8029a4c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 80296ac:	687b      	ldr	r3, [r7, #4]
 80296ae:	4a11      	ldr	r2, [pc, #68]	; (80296f4 <HAL_I2C_MspInit+0x1a8>)
 80296b0:	639a      	str	r2, [r3, #56]	; 0x38
 80296b2:	4a10      	ldr	r2, [pc, #64]	; (80296f4 <HAL_I2C_MspInit+0x1a8>)
 80296b4:	687b      	ldr	r3, [r7, #4]
 80296b6:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80296b8:	2200      	movs	r2, #0
 80296ba:	2100      	movs	r1, #0
 80296bc:	2021      	movs	r0, #33	; 0x21
 80296be:	f001 fd7a 	bl	802b1b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80296c2:	2021      	movs	r0, #33	; 0x21
 80296c4:	f001 fd91 	bl	802b1ea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 80296c8:	2200      	movs	r2, #0
 80296ca:	2100      	movs	r1, #0
 80296cc:	2022      	movs	r0, #34	; 0x22
 80296ce:	f001 fd72 	bl	802b1b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 80296d2:	2022      	movs	r0, #34	; 0x22
 80296d4:	f001 fd89 	bl	802b1ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80296d8:	bf00      	nop
 80296da:	37e0      	adds	r7, #224	; 0xe0
 80296dc:	46bd      	mov	sp, r7
 80296de:	bd80      	pop	{r7, pc}
 80296e0:	40005800 	.word	0x40005800
 80296e4:	58024400 	.word	0x58024400
 80296e8:	58020400 	.word	0x58020400
 80296ec:	240245a4 	.word	0x240245a4
 80296f0:	40020010 	.word	0x40020010
 80296f4:	2402461c 	.word	0x2402461c
 80296f8:	40020028 	.word	0x40020028

080296fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80296fc:	b5b0      	push	{r4, r5, r7, lr}
 80296fe:	b090      	sub	sp, #64	; 0x40
 8029700:	af06      	add	r7, sp, #24
  /* USER CODE BEGIN 1 */
	SCB->VTOR = (FLASH_BASE | 0x20000);
 8029702:	4b33      	ldr	r3, [pc, #204]	; (80297d0 <main+0xd4>)
 8029704:	4a33      	ldr	r2, [pc, #204]	; (80297d4 <main+0xd8>)
 8029706:	609a      	str	r2, [r3, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8029708:	f001 f9d0 	bl	802aaac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 802970c:	f000 f874 	bl	80297f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8029710:	f7ff fe54 	bl	80293bc <MX_GPIO_Init>
  MX_DMA_Init();
 8029714:	f7ff fe1a 	bl	802934c <MX_DMA_Init>
  MX_I2C2_Init();
 8029718:	f7ff fed8 	bl	80294cc <MX_I2C2_Init>
  MX_SPI1_Init();
 802971c:	f000 f99c 	bl	8029a58 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8029720:	f011 fd78 	bl	803b214 <MX_USB_DEVICE_Init>
  MX_USART2_UART_Init();
 8029724:	f000 ff4a 	bl	802a5bc <MX_USART2_UART_Init>
  MX_UART4_Init();
 8029728:	f000 fe52 	bl	802a3d0 <MX_UART4_Init>
  MX_UART7_Init();
 802972c:	f000 fea2 	bl	802a474 <MX_UART7_Init>
  MX_USART3_UART_Init();
 8029730:	f000 ff90 	bl	802a654 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8029734:	f000 fd4c 	bl	802a1d0 <MX_TIM3_Init>
  MX_TIM2_Init();
 8029738:	f000 fcfc 	bl	802a134 <MX_TIM2_Init>
  MX_TIM4_Init();
 802973c:	f000 fd96 	bl	802a26c <MX_TIM4_Init>
  MX_COMP2_Init();
 8029740:	f7ff fd36 	bl	80291b0 <MX_COMP2_Init>
  MX_DAC1_Init();
 8029744:	f7ff fdae 	bl	80292a4 <MX_DAC1_Init>
  MX_UART8_Init();
 8029748:	f000 fee2 	bl	802a510 <MX_UART8_Init>
  /* USER CODE BEGIN 2 */
	HAL_DAC_Start(&hdac1, DAC1_CHANNEL_1);
 802974c:	2100      	movs	r1, #0
 802974e:	4822      	ldr	r0, [pc, #136]	; (80297d8 <main+0xdc>)
 8029750:	f001 fd87 	bl	802b262 <HAL_DAC_Start>
	HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, 4095 * (1 / 3.3));
 8029754:	f44f 639b 	mov.w	r3, #1240	; 0x4d8
 8029758:	2200      	movs	r2, #0
 802975a:	2100      	movs	r1, #0
 802975c:	481e      	ldr	r0, [pc, #120]	; (80297d8 <main+0xdc>)
 802975e:	f001 fdd2 	bl	802b306 <HAL_DAC_SetValue>
	HAL_TIM_Base_Start_IT(&htim3);
 8029762:	481e      	ldr	r0, [pc, #120]	; (80297dc <main+0xe0>)
 8029764:	f00a feb6 	bl	80344d4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 8029768:	481d      	ldr	r0, [pc, #116]	; (80297e0 <main+0xe4>)
 802976a:	f00a feb3 	bl	80344d4 <HAL_TIM_Base_Start_IT>
	HAL_COMP_Start(&hcomp2);
 802976e:	481d      	ldr	r0, [pc, #116]	; (80297e4 <main+0xe8>)
 8029770:	f001 fb88 	bl	802ae84 <HAL_COMP_Start>

	struct MotherboardConfig config;

	config.HeadServiceUart = &huart3;
 8029774:	4b1c      	ldr	r3, [pc, #112]	; (80297e8 <main+0xec>)
 8029776:	607b      	str	r3, [r7, #4]
	config.HeadStreamUart = &huart4;
 8029778:	4b1c      	ldr	r3, [pc, #112]	; (80297ec <main+0xf0>)
 802977a:	60bb      	str	r3, [r7, #8]

	config.HeadTimeout = 10;
 802977c:	230a      	movs	r3, #10
 802977e:	60fb      	str	r3, [r7, #12]

	config.BodyUart = &huart8;
 8029780:	4b1b      	ldr	r3, [pc, #108]	; (80297f0 <main+0xf4>)
 8029782:	613b      	str	r3, [r7, #16]
	config.BodyTimeout = 10;
 8029784:	230a      	movs	r3, #10
 8029786:	617b      	str	r3, [r7, #20]
	config.BodyPeriod = 20;
 8029788:	2314      	movs	r3, #20
 802978a:	763b      	strb	r3, [r7, #24]

	config.IMUSpi = &hspi1;
 802978c:	4b19      	ldr	r3, [pc, #100]	; (80297f4 <main+0xf8>)
 802978e:	61fb      	str	r3, [r7, #28]

	config.VersionMajor = 0;
 8029790:	2300      	movs	r3, #0
 8029792:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	config.VersionMinor = 2;
 8029796:	2302      	movs	r3, #2
 8029798:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	config.StrobeOffset = 0;
 802979c:	2300      	movs	r3, #0
 802979e:	623b      	str	r3, [r7, #32]

	if (MotherboardInit(config))
 80297a0:	466d      	mov	r5, sp
 80297a2:	f107 0414 	add.w	r4, r7, #20
 80297a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80297a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80297aa:	6823      	ldr	r3, [r4, #0]
 80297ac:	602b      	str	r3, [r5, #0]
 80297ae:	1d3b      	adds	r3, r7, #4
 80297b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80297b2:	f7f9 fcc7 	bl	8023144 <MotherboardInit>
 80297b6:	4603      	mov	r3, r0
 80297b8:	2b00      	cmp	r3, #0
 80297ba:	d001      	beq.n	80297c0 <main+0xc4>
		return 1;
 80297bc:	2301      	movs	r3, #1
 80297be:	e002      	b.n	80297c6 <main+0xca>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		MotherboardTick();
 80297c0:	f7f9 fd18 	bl	80231f4 <MotherboardTick>
 80297c4:	e7fc      	b.n	80297c0 <main+0xc4>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	}
  /* USER CODE END 3 */
}
 80297c6:	4618      	mov	r0, r3
 80297c8:	3728      	adds	r7, #40	; 0x28
 80297ca:	46bd      	mov	sp, r7
 80297cc:	bdb0      	pop	{r4, r5, r7, pc}
 80297ce:	bf00      	nop
 80297d0:	e000ed00 	.word	0xe000ed00
 80297d4:	08020000 	.word	0x08020000
 80297d8:	24024544 	.word	0x24024544
 80297dc:	2402485c 	.word	0x2402485c
 80297e0:	24024810 	.word	0x24024810
 80297e4:	24024518 	.word	0x24024518
 80297e8:	24024b34 	.word	0x24024b34
 80297ec:	240248f4 	.word	0x240248f4
 80297f0:	24024a14 	.word	0x24024a14
 80297f4:	24024694 	.word	0x24024694

080297f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80297f8:	b580      	push	{r7, lr}
 80297fa:	b09e      	sub	sp, #120	; 0x78
 80297fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80297fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8029802:	224c      	movs	r2, #76	; 0x4c
 8029804:	2100      	movs	r1, #0
 8029806:	4618      	mov	r0, r3
 8029808:	f012 fae2 	bl	803bdd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 802980c:	f107 030c 	add.w	r3, r7, #12
 8029810:	2220      	movs	r2, #32
 8029812:	2100      	movs	r1, #0
 8029814:	4618      	mov	r0, r3
 8029816:	f012 fadb 	bl	803bdd0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 802981a:	2002      	movs	r0, #2
 802981c:	f007 f96a 	bl	8030af4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8029820:	2300      	movs	r3, #0
 8029822:	60bb      	str	r3, [r7, #8]
 8029824:	4b4d      	ldr	r3, [pc, #308]	; (802995c <SystemClock_Config+0x164>)
 8029826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8029828:	4a4c      	ldr	r2, [pc, #304]	; (802995c <SystemClock_Config+0x164>)
 802982a:	f023 0301 	bic.w	r3, r3, #1
 802982e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8029830:	4b4a      	ldr	r3, [pc, #296]	; (802995c <SystemClock_Config+0x164>)
 8029832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8029834:	f003 0301 	and.w	r3, r3, #1
 8029838:	60bb      	str	r3, [r7, #8]
 802983a:	4b49      	ldr	r3, [pc, #292]	; (8029960 <SystemClock_Config+0x168>)
 802983c:	699b      	ldr	r3, [r3, #24]
 802983e:	4a48      	ldr	r2, [pc, #288]	; (8029960 <SystemClock_Config+0x168>)
 8029840:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8029844:	6193      	str	r3, [r2, #24]
 8029846:	4b46      	ldr	r3, [pc, #280]	; (8029960 <SystemClock_Config+0x168>)
 8029848:	699b      	ldr	r3, [r3, #24]
 802984a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 802984e:	60bb      	str	r3, [r7, #8]
 8029850:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8029852:	bf00      	nop
 8029854:	4b42      	ldr	r3, [pc, #264]	; (8029960 <SystemClock_Config+0x168>)
 8029856:	699b      	ldr	r3, [r3, #24]
 8029858:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 802985c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8029860:	d1f8      	bne.n	8029854 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8029862:	4b40      	ldr	r3, [pc, #256]	; (8029964 <SystemClock_Config+0x16c>)
 8029864:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8029868:	4a3e      	ldr	r2, [pc, #248]	; (8029964 <SystemClock_Config+0x16c>)
 802986a:	f043 0302 	orr.w	r3, r3, #2
 802986e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8029872:	4b3c      	ldr	r3, [pc, #240]	; (8029964 <SystemClock_Config+0x16c>)
 8029874:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8029878:	f003 0302 	and.w	r3, r3, #2
 802987c:	607b      	str	r3, [r7, #4]
 802987e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8029880:	2300      	movs	r3, #0
 8029882:	603b      	str	r3, [r7, #0]
 8029884:	4b36      	ldr	r3, [pc, #216]	; (8029960 <SystemClock_Config+0x168>)
 8029886:	699b      	ldr	r3, [r3, #24]
 8029888:	4a35      	ldr	r2, [pc, #212]	; (8029960 <SystemClock_Config+0x168>)
 802988a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 802988e:	6193      	str	r3, [r2, #24]
 8029890:	4b33      	ldr	r3, [pc, #204]	; (8029960 <SystemClock_Config+0x168>)
 8029892:	699b      	ldr	r3, [r3, #24]
 8029894:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8029898:	603b      	str	r3, [r7, #0]
 802989a:	4b30      	ldr	r3, [pc, #192]	; (802995c <SystemClock_Config+0x164>)
 802989c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802989e:	4a2f      	ldr	r2, [pc, #188]	; (802995c <SystemClock_Config+0x164>)
 80298a0:	f043 0301 	orr.w	r3, r3, #1
 80298a4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80298a6:	4b2d      	ldr	r3, [pc, #180]	; (802995c <SystemClock_Config+0x164>)
 80298a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80298aa:	f003 0301 	and.w	r3, r3, #1
 80298ae:	603b      	str	r3, [r7, #0]
 80298b0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80298b2:	bf00      	nop
 80298b4:	4b2a      	ldr	r3, [pc, #168]	; (8029960 <SystemClock_Config+0x168>)
 80298b6:	699b      	ldr	r3, [r3, #24]
 80298b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80298bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80298c0:	d1f8      	bne.n	80298b4 <SystemClock_Config+0xbc>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 80298c2:	4b28      	ldr	r3, [pc, #160]	; (8029964 <SystemClock_Config+0x16c>)
 80298c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80298c6:	4a27      	ldr	r2, [pc, #156]	; (8029964 <SystemClock_Config+0x16c>)
 80298c8:	f023 0303 	bic.w	r3, r3, #3
 80298cc:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 80298ce:	2322      	movs	r3, #34	; 0x22
 80298d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80298d2:	2301      	movs	r3, #1
 80298d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80298d6:	2340      	movs	r3, #64	; 0x40
 80298d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80298da:	2301      	movs	r3, #1
 80298dc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80298de:	2302      	movs	r3, #2
 80298e0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80298e2:	2300      	movs	r3, #0
 80298e4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 80298e6:	2304      	movs	r3, #4
 80298e8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 60;
 80298ea:	233c      	movs	r3, #60	; 0x3c
 80298ec:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 80298ee:	2302      	movs	r3, #2
 80298f0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80298f2:	2305      	movs	r3, #5
 80298f4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 80298f6:	2302      	movs	r3, #2
 80298f8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80298fa:	230c      	movs	r3, #12
 80298fc:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80298fe:	2300      	movs	r3, #0
 8029900:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8029902:	2300      	movs	r3, #0
 8029904:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8029906:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 802990a:	4618      	mov	r0, r3
 802990c:	f007 f93c 	bl	8030b88 <HAL_RCC_OscConfig>
 8029910:	4603      	mov	r3, r0
 8029912:	2b00      	cmp	r3, #0
 8029914:	d001      	beq.n	802991a <SystemClock_Config+0x122>
  {
    Error_Handler();
 8029916:	f000 f899 	bl	8029a4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 802991a:	233f      	movs	r3, #63	; 0x3f
 802991c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 802991e:	2303      	movs	r3, #3
 8029920:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8029922:	2300      	movs	r3, #0
 8029924:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8029926:	2308      	movs	r3, #8
 8029928:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 802992a:	2340      	movs	r3, #64	; 0x40
 802992c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 802992e:	2340      	movs	r3, #64	; 0x40
 8029930:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8029932:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8029936:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8029938:	2340      	movs	r3, #64	; 0x40
 802993a:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 802993c:	f107 030c 	add.w	r3, r7, #12
 8029940:	2104      	movs	r1, #4
 8029942:	4618      	mov	r0, r3
 8029944:	f007 fd4e 	bl	80313e4 <HAL_RCC_ClockConfig>
 8029948:	4603      	mov	r3, r0
 802994a:	2b00      	cmp	r3, #0
 802994c:	d001      	beq.n	8029952 <SystemClock_Config+0x15a>
  {
    Error_Handler();
 802994e:	f000 f87d 	bl	8029a4c <Error_Handler>
  }
}
 8029952:	bf00      	nop
 8029954:	3778      	adds	r7, #120	; 0x78
 8029956:	46bd      	mov	sp, r7
 8029958:	bd80      	pop	{r7, pc}
 802995a:	bf00      	nop
 802995c:	58000400 	.word	0x58000400
 8029960:	58024800 	.word	0x58024800
 8029964:	58024400 	.word	0x58024400

08029968 <HAL_COMP_TriggerCallback>:

/* USER CODE BEGIN 4 */

void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp) {
 8029968:	b580      	push	{r7, lr}
 802996a:	b082      	sub	sp, #8
 802996c:	af00      	add	r7, sp, #0
 802996e:	6078      	str	r0, [r7, #4]
	if (hcomp->Instance == COMP2) {
 8029970:	687b      	ldr	r3, [r7, #4]
 8029972:	681b      	ldr	r3, [r3, #0]
 8029974:	4a04      	ldr	r2, [pc, #16]	; (8029988 <HAL_COMP_TriggerCallback+0x20>)
 8029976:	4293      	cmp	r3, r2
 8029978:	d101      	bne.n	802997e <HAL_COMP_TriggerCallback+0x16>
		MotherboardOnStrobe();
 802997a:	f7f9 fd11 	bl	80233a0 <MotherboardOnStrobe>
	}
}
 802997e:	bf00      	nop
 8029980:	3708      	adds	r7, #8
 8029982:	46bd      	mov	sp, r7
 8029984:	bd80      	pop	{r7, pc}
 8029986:	bf00      	nop
 8029988:	58003810 	.word	0x58003810

0802998c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 802998c:	b580      	push	{r7, lr}
 802998e:	b082      	sub	sp, #8
 8029990:	af00      	add	r7, sp, #0
 8029992:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {
 8029994:	687b      	ldr	r3, [r7, #4]
 8029996:	681b      	ldr	r3, [r3, #0]
 8029998:	4a0b      	ldr	r2, [pc, #44]	; (80299c8 <HAL_UART_RxCpltCallback+0x3c>)
 802999a:	4293      	cmp	r3, r2
 802999c:	d101      	bne.n	80299a2 <HAL_UART_RxCpltCallback+0x16>
		MotherboardOnHeadServiceRecieveComplete();
 802999e:	f7f9 fd1f 	bl	80233e0 <MotherboardOnHeadServiceRecieveComplete>
	}
	if (huart->Instance == UART4) {
 80299a2:	687b      	ldr	r3, [r7, #4]
 80299a4:	681b      	ldr	r3, [r3, #0]
 80299a6:	4a09      	ldr	r2, [pc, #36]	; (80299cc <HAL_UART_RxCpltCallback+0x40>)
 80299a8:	4293      	cmp	r3, r2
 80299aa:	d101      	bne.n	80299b0 <HAL_UART_RxCpltCallback+0x24>
		MotherboardOnHeadStreamRecieveComplete();
 80299ac:	f7f9 fd22 	bl	80233f4 <MotherboardOnHeadStreamRecieveComplete>
	}
	if (huart->Instance == UART8) {
 80299b0:	687b      	ldr	r3, [r7, #4]
 80299b2:	681b      	ldr	r3, [r3, #0]
 80299b4:	4a06      	ldr	r2, [pc, #24]	; (80299d0 <HAL_UART_RxCpltCallback+0x44>)
 80299b6:	4293      	cmp	r3, r2
 80299b8:	d101      	bne.n	80299be <HAL_UART_RxCpltCallback+0x32>
		MotherboardOnBodyRecieveComplete();
 80299ba:	f7f9 fd07 	bl	80233cc <MotherboardOnBodyRecieveComplete>
	}
}
 80299be:	bf00      	nop
 80299c0:	3708      	adds	r7, #8
 80299c2:	46bd      	mov	sp, r7
 80299c4:	bd80      	pop	{r7, pc}
 80299c6:	bf00      	nop
 80299c8:	40004800 	.word	0x40004800
 80299cc:	40004c00 	.word	0x40004c00
 80299d0:	40007c00 	.word	0x40007c00

080299d4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80299d4:	b580      	push	{r7, lr}
 80299d6:	b082      	sub	sp, #8
 80299d8:	af00      	add	r7, sp, #0
 80299da:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {
 80299dc:	687b      	ldr	r3, [r7, #4]
 80299de:	681b      	ldr	r3, [r3, #0]
 80299e0:	4a0b      	ldr	r2, [pc, #44]	; (8029a10 <HAL_UART_TxCpltCallback+0x3c>)
 80299e2:	4293      	cmp	r3, r2
 80299e4:	d101      	bne.n	80299ea <HAL_UART_TxCpltCallback+0x16>
		MotherboardOnHeadServiceTransmitComplete();
 80299e6:	f7f9 fd0f 	bl	8023408 <MotherboardOnHeadServiceTransmitComplete>
	}
	if (huart->Instance == UART4) {
 80299ea:	687b      	ldr	r3, [r7, #4]
 80299ec:	681b      	ldr	r3, [r3, #0]
 80299ee:	4a09      	ldr	r2, [pc, #36]	; (8029a14 <HAL_UART_TxCpltCallback+0x40>)
 80299f0:	4293      	cmp	r3, r2
 80299f2:	d101      	bne.n	80299f8 <HAL_UART_TxCpltCallback+0x24>
		MotherboardOnHeadStreamTransmitComplete();
 80299f4:	f7f9 fd12 	bl	802341c <MotherboardOnHeadStreamTransmitComplete>
	}
	if (huart->Instance == UART8) {
 80299f8:	687b      	ldr	r3, [r7, #4]
 80299fa:	681b      	ldr	r3, [r3, #0]
 80299fc:	4a06      	ldr	r2, [pc, #24]	; (8029a18 <HAL_UART_TxCpltCallback+0x44>)
 80299fe:	4293      	cmp	r3, r2
 8029a00:	d101      	bne.n	8029a06 <HAL_UART_TxCpltCallback+0x32>
		MotherboardOnBodyTransmitComplete();
 8029a02:	f7f9 fd15 	bl	8023430 <MotherboardOnBodyTransmitComplete>
	}
}
 8029a06:	bf00      	nop
 8029a08:	3708      	adds	r7, #8
 8029a0a:	46bd      	mov	sp, r7
 8029a0c:	bd80      	pop	{r7, pc}
 8029a0e:	bf00      	nop
 8029a10:	40004800 	.word	0x40004800
 8029a14:	40004c00 	.word	0x40004c00
 8029a18:	40007c00 	.word	0x40007c00

08029a1c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8029a1c:	b580      	push	{r7, lr}
 8029a1e:	b082      	sub	sp, #8
 8029a20:	af00      	add	r7, sp, #0
 8029a22:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3)
 8029a24:	687b      	ldr	r3, [r7, #4]
 8029a26:	681b      	ldr	r3, [r3, #0]
 8029a28:	4a07      	ldr	r2, [pc, #28]	; (8029a48 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8029a2a:	4293      	cmp	r3, r2
 8029a2c:	d101      	bne.n	8029a32 <HAL_TIM_PeriodElapsedCallback+0x16>
		MotherboardOnBodyTimerTick();
 8029a2e:	f7f9 fd09 	bl	8023444 <MotherboardOnBodyTimerTick>

	if (htim->Instance == TIM2)
 8029a32:	687b      	ldr	r3, [r7, #4]
 8029a34:	681b      	ldr	r3, [r3, #0]
 8029a36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8029a3a:	d101      	bne.n	8029a40 <HAL_TIM_PeriodElapsedCallback+0x24>
		MotherboardOnImuTimerTick();
 8029a3c:	f7f9 fd0c 	bl	8023458 <MotherboardOnImuTimerTick>
}
 8029a40:	bf00      	nop
 8029a42:	3708      	adds	r7, #8
 8029a44:	46bd      	mov	sp, r7
 8029a46:	bd80      	pop	{r7, pc}
 8029a48:	40000400 	.word	0x40000400

08029a4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8029a4c:	b480      	push	{r7}
 8029a4e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8029a50:	b672      	cpsid	i
}
 8029a52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8029a54:	e7fe      	b.n	8029a54 <Error_Handler+0x8>
	...

08029a58 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_tx;
DMA_HandleTypeDef hdma_spi1_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8029a58:	b580      	push	{r7, lr}
 8029a5a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8029a5c:	4b28      	ldr	r3, [pc, #160]	; (8029b00 <MX_SPI1_Init+0xa8>)
 8029a5e:	4a29      	ldr	r2, [pc, #164]	; (8029b04 <MX_SPI1_Init+0xac>)
 8029a60:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8029a62:	4b27      	ldr	r3, [pc, #156]	; (8029b00 <MX_SPI1_Init+0xa8>)
 8029a64:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8029a68:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8029a6a:	4b25      	ldr	r3, [pc, #148]	; (8029b00 <MX_SPI1_Init+0xa8>)
 8029a6c:	2200      	movs	r2, #0
 8029a6e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8029a70:	4b23      	ldr	r3, [pc, #140]	; (8029b00 <MX_SPI1_Init+0xa8>)
 8029a72:	2207      	movs	r2, #7
 8029a74:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8029a76:	4b22      	ldr	r3, [pc, #136]	; (8029b00 <MX_SPI1_Init+0xa8>)
 8029a78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8029a7c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8029a7e:	4b20      	ldr	r3, [pc, #128]	; (8029b00 <MX_SPI1_Init+0xa8>)
 8029a80:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8029a84:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8029a86:	4b1e      	ldr	r3, [pc, #120]	; (8029b00 <MX_SPI1_Init+0xa8>)
 8029a88:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8029a8c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8029a8e:	4b1c      	ldr	r3, [pc, #112]	; (8029b00 <MX_SPI1_Init+0xa8>)
 8029a90:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8029a94:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8029a96:	4b1a      	ldr	r3, [pc, #104]	; (8029b00 <MX_SPI1_Init+0xa8>)
 8029a98:	2200      	movs	r2, #0
 8029a9a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8029a9c:	4b18      	ldr	r3, [pc, #96]	; (8029b00 <MX_SPI1_Init+0xa8>)
 8029a9e:	2200      	movs	r2, #0
 8029aa0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8029aa2:	4b17      	ldr	r3, [pc, #92]	; (8029b00 <MX_SPI1_Init+0xa8>)
 8029aa4:	2200      	movs	r2, #0
 8029aa6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8029aa8:	4b15      	ldr	r3, [pc, #84]	; (8029b00 <MX_SPI1_Init+0xa8>)
 8029aaa:	2200      	movs	r2, #0
 8029aac:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8029aae:	4b14      	ldr	r3, [pc, #80]	; (8029b00 <MX_SPI1_Init+0xa8>)
 8029ab0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8029ab4:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8029ab6:	4b12      	ldr	r3, [pc, #72]	; (8029b00 <MX_SPI1_Init+0xa8>)
 8029ab8:	2200      	movs	r2, #0
 8029aba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8029abc:	4b10      	ldr	r3, [pc, #64]	; (8029b00 <MX_SPI1_Init+0xa8>)
 8029abe:	2200      	movs	r2, #0
 8029ac0:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8029ac2:	4b0f      	ldr	r3, [pc, #60]	; (8029b00 <MX_SPI1_Init+0xa8>)
 8029ac4:	2200      	movs	r2, #0
 8029ac6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8029ac8:	4b0d      	ldr	r3, [pc, #52]	; (8029b00 <MX_SPI1_Init+0xa8>)
 8029aca:	2200      	movs	r2, #0
 8029acc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8029ace:	4b0c      	ldr	r3, [pc, #48]	; (8029b00 <MX_SPI1_Init+0xa8>)
 8029ad0:	2200      	movs	r2, #0
 8029ad2:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8029ad4:	4b0a      	ldr	r3, [pc, #40]	; (8029b00 <MX_SPI1_Init+0xa8>)
 8029ad6:	2200      	movs	r2, #0
 8029ad8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8029ada:	4b09      	ldr	r3, [pc, #36]	; (8029b00 <MX_SPI1_Init+0xa8>)
 8029adc:	2200      	movs	r2, #0
 8029ade:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8029ae0:	4b07      	ldr	r3, [pc, #28]	; (8029b00 <MX_SPI1_Init+0xa8>)
 8029ae2:	2200      	movs	r2, #0
 8029ae4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8029ae6:	4b06      	ldr	r3, [pc, #24]	; (8029b00 <MX_SPI1_Init+0xa8>)
 8029ae8:	2200      	movs	r2, #0
 8029aea:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8029aec:	4804      	ldr	r0, [pc, #16]	; (8029b00 <MX_SPI1_Init+0xa8>)
 8029aee:	f009 fb6d 	bl	80331cc <HAL_SPI_Init>
 8029af2:	4603      	mov	r3, r0
 8029af4:	2b00      	cmp	r3, #0
 8029af6:	d001      	beq.n	8029afc <MX_SPI1_Init+0xa4>
  {
    Error_Handler();
 8029af8:	f7ff ffa8 	bl	8029a4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8029afc:	bf00      	nop
 8029afe:	bd80      	pop	{r7, pc}
 8029b00:	24024694 	.word	0x24024694
 8029b04:	40013000 	.word	0x40013000

08029b08 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8029b08:	b580      	push	{r7, lr}
 8029b0a:	b0b8      	sub	sp, #224	; 0xe0
 8029b0c:	af00      	add	r7, sp, #0
 8029b0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8029b10:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8029b14:	2200      	movs	r2, #0
 8029b16:	601a      	str	r2, [r3, #0]
 8029b18:	605a      	str	r2, [r3, #4]
 8029b1a:	609a      	str	r2, [r3, #8]
 8029b1c:	60da      	str	r2, [r3, #12]
 8029b1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8029b20:	f107 0310 	add.w	r3, r7, #16
 8029b24:	22bc      	movs	r2, #188	; 0xbc
 8029b26:	2100      	movs	r1, #0
 8029b28:	4618      	mov	r0, r3
 8029b2a:	f012 f951 	bl	803bdd0 <memset>
  if(spiHandle->Instance==SPI1)
 8029b2e:	687b      	ldr	r3, [r7, #4]
 8029b30:	681b      	ldr	r3, [r3, #0]
 8029b32:	4a60      	ldr	r2, [pc, #384]	; (8029cb4 <HAL_SPI_MspInit+0x1ac>)
 8029b34:	4293      	cmp	r3, r2
 8029b36:	f040 80b8 	bne.w	8029caa <HAL_SPI_MspInit+0x1a2>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8029b3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8029b3e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 32;
 8029b40:	2320      	movs	r3, #32
 8029b42:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 129;
 8029b44:	2381      	movs	r3, #129	; 0x81
 8029b46:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8029b48:	2302      	movs	r3, #2
 8029b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8029b4c:	2302      	movs	r3, #2
 8029b4e:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8029b50:	2302      	movs	r3, #2
 8029b52:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_1;
 8029b54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8029b58:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8029b5a:	2300      	movs	r3, #0
 8029b5c:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8029b5e:	2300      	movs	r3, #0
 8029b60:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 8029b62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8029b66:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8029b68:	f107 0310 	add.w	r3, r7, #16
 8029b6c:	4618      	mov	r0, r3
 8029b6e:	f007 ffc5 	bl	8031afc <HAL_RCCEx_PeriphCLKConfig>
 8029b72:	4603      	mov	r3, r0
 8029b74:	2b00      	cmp	r3, #0
 8029b76:	d001      	beq.n	8029b7c <HAL_SPI_MspInit+0x74>
    {
      Error_Handler();
 8029b78:	f7ff ff68 	bl	8029a4c <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8029b7c:	4b4e      	ldr	r3, [pc, #312]	; (8029cb8 <HAL_SPI_MspInit+0x1b0>)
 8029b7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8029b82:	4a4d      	ldr	r2, [pc, #308]	; (8029cb8 <HAL_SPI_MspInit+0x1b0>)
 8029b84:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8029b88:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8029b8c:	4b4a      	ldr	r3, [pc, #296]	; (8029cb8 <HAL_SPI_MspInit+0x1b0>)
 8029b8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8029b92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8029b96:	60fb      	str	r3, [r7, #12]
 8029b98:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8029b9a:	4b47      	ldr	r3, [pc, #284]	; (8029cb8 <HAL_SPI_MspInit+0x1b0>)
 8029b9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8029ba0:	4a45      	ldr	r2, [pc, #276]	; (8029cb8 <HAL_SPI_MspInit+0x1b0>)
 8029ba2:	f043 0301 	orr.w	r3, r3, #1
 8029ba6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8029baa:	4b43      	ldr	r3, [pc, #268]	; (8029cb8 <HAL_SPI_MspInit+0x1b0>)
 8029bac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8029bb0:	f003 0301 	and.w	r3, r3, #1
 8029bb4:	60bb      	str	r3, [r7, #8]
 8029bb6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8029bb8:	23e0      	movs	r3, #224	; 0xe0
 8029bba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8029bbe:	2302      	movs	r3, #2
 8029bc0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8029bc4:	2300      	movs	r3, #0
 8029bc6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8029bca:	2300      	movs	r3, #0
 8029bcc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8029bd0:	2305      	movs	r3, #5
 8029bd2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8029bd6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8029bda:	4619      	mov	r1, r3
 8029bdc:	4837      	ldr	r0, [pc, #220]	; (8029cbc <HAL_SPI_MspInit+0x1b4>)
 8029bde:	f004 fb3d 	bl	802e25c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream4;
 8029be2:	4b37      	ldr	r3, [pc, #220]	; (8029cc0 <HAL_SPI_MspInit+0x1b8>)
 8029be4:	4a37      	ldr	r2, [pc, #220]	; (8029cc4 <HAL_SPI_MspInit+0x1bc>)
 8029be6:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8029be8:	4b35      	ldr	r3, [pc, #212]	; (8029cc0 <HAL_SPI_MspInit+0x1b8>)
 8029bea:	2226      	movs	r2, #38	; 0x26
 8029bec:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8029bee:	4b34      	ldr	r3, [pc, #208]	; (8029cc0 <HAL_SPI_MspInit+0x1b8>)
 8029bf0:	2240      	movs	r2, #64	; 0x40
 8029bf2:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8029bf4:	4b32      	ldr	r3, [pc, #200]	; (8029cc0 <HAL_SPI_MspInit+0x1b8>)
 8029bf6:	2200      	movs	r2, #0
 8029bf8:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8029bfa:	4b31      	ldr	r3, [pc, #196]	; (8029cc0 <HAL_SPI_MspInit+0x1b8>)
 8029bfc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8029c00:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8029c02:	4b2f      	ldr	r3, [pc, #188]	; (8029cc0 <HAL_SPI_MspInit+0x1b8>)
 8029c04:	2200      	movs	r2, #0
 8029c06:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8029c08:	4b2d      	ldr	r3, [pc, #180]	; (8029cc0 <HAL_SPI_MspInit+0x1b8>)
 8029c0a:	2200      	movs	r2, #0
 8029c0c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8029c0e:	4b2c      	ldr	r3, [pc, #176]	; (8029cc0 <HAL_SPI_MspInit+0x1b8>)
 8029c10:	2200      	movs	r2, #0
 8029c12:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8029c14:	4b2a      	ldr	r3, [pc, #168]	; (8029cc0 <HAL_SPI_MspInit+0x1b8>)
 8029c16:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8029c1a:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8029c1c:	4b28      	ldr	r3, [pc, #160]	; (8029cc0 <HAL_SPI_MspInit+0x1b8>)
 8029c1e:	2200      	movs	r2, #0
 8029c20:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8029c22:	4827      	ldr	r0, [pc, #156]	; (8029cc0 <HAL_SPI_MspInit+0x1b8>)
 8029c24:	f001 fcc4 	bl	802b5b0 <HAL_DMA_Init>
 8029c28:	4603      	mov	r3, r0
 8029c2a:	2b00      	cmp	r3, #0
 8029c2c:	d001      	beq.n	8029c32 <HAL_SPI_MspInit+0x12a>
    {
      Error_Handler();
 8029c2e:	f7ff ff0d 	bl	8029a4c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8029c32:	687b      	ldr	r3, [r7, #4]
 8029c34:	4a22      	ldr	r2, [pc, #136]	; (8029cc0 <HAL_SPI_MspInit+0x1b8>)
 8029c36:	679a      	str	r2, [r3, #120]	; 0x78
 8029c38:	4a21      	ldr	r2, [pc, #132]	; (8029cc0 <HAL_SPI_MspInit+0x1b8>)
 8029c3a:	687b      	ldr	r3, [r7, #4]
 8029c3c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream5;
 8029c3e:	4b22      	ldr	r3, [pc, #136]	; (8029cc8 <HAL_SPI_MspInit+0x1c0>)
 8029c40:	4a22      	ldr	r2, [pc, #136]	; (8029ccc <HAL_SPI_MspInit+0x1c4>)
 8029c42:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8029c44:	4b20      	ldr	r3, [pc, #128]	; (8029cc8 <HAL_SPI_MspInit+0x1c0>)
 8029c46:	2225      	movs	r2, #37	; 0x25
 8029c48:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8029c4a:	4b1f      	ldr	r3, [pc, #124]	; (8029cc8 <HAL_SPI_MspInit+0x1c0>)
 8029c4c:	2200      	movs	r2, #0
 8029c4e:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8029c50:	4b1d      	ldr	r3, [pc, #116]	; (8029cc8 <HAL_SPI_MspInit+0x1c0>)
 8029c52:	2200      	movs	r2, #0
 8029c54:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8029c56:	4b1c      	ldr	r3, [pc, #112]	; (8029cc8 <HAL_SPI_MspInit+0x1c0>)
 8029c58:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8029c5c:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8029c5e:	4b1a      	ldr	r3, [pc, #104]	; (8029cc8 <HAL_SPI_MspInit+0x1c0>)
 8029c60:	2200      	movs	r2, #0
 8029c62:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8029c64:	4b18      	ldr	r3, [pc, #96]	; (8029cc8 <HAL_SPI_MspInit+0x1c0>)
 8029c66:	2200      	movs	r2, #0
 8029c68:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8029c6a:	4b17      	ldr	r3, [pc, #92]	; (8029cc8 <HAL_SPI_MspInit+0x1c0>)
 8029c6c:	2200      	movs	r2, #0
 8029c6e:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8029c70:	4b15      	ldr	r3, [pc, #84]	; (8029cc8 <HAL_SPI_MspInit+0x1c0>)
 8029c72:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8029c76:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8029c78:	4b13      	ldr	r3, [pc, #76]	; (8029cc8 <HAL_SPI_MspInit+0x1c0>)
 8029c7a:	2200      	movs	r2, #0
 8029c7c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8029c7e:	4812      	ldr	r0, [pc, #72]	; (8029cc8 <HAL_SPI_MspInit+0x1c0>)
 8029c80:	f001 fc96 	bl	802b5b0 <HAL_DMA_Init>
 8029c84:	4603      	mov	r3, r0
 8029c86:	2b00      	cmp	r3, #0
 8029c88:	d001      	beq.n	8029c8e <HAL_SPI_MspInit+0x186>
    {
      Error_Handler();
 8029c8a:	f7ff fedf 	bl	8029a4c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8029c8e:	687b      	ldr	r3, [r7, #4]
 8029c90:	4a0d      	ldr	r2, [pc, #52]	; (8029cc8 <HAL_SPI_MspInit+0x1c0>)
 8029c92:	67da      	str	r2, [r3, #124]	; 0x7c
 8029c94:	4a0c      	ldr	r2, [pc, #48]	; (8029cc8 <HAL_SPI_MspInit+0x1c0>)
 8029c96:	687b      	ldr	r3, [r7, #4]
 8029c98:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 2, 0);
 8029c9a:	2200      	movs	r2, #0
 8029c9c:	2102      	movs	r1, #2
 8029c9e:	2023      	movs	r0, #35	; 0x23
 8029ca0:	f001 fa89 	bl	802b1b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8029ca4:	2023      	movs	r0, #35	; 0x23
 8029ca6:	f001 faa0 	bl	802b1ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8029caa:	bf00      	nop
 8029cac:	37e0      	adds	r7, #224	; 0xe0
 8029cae:	46bd      	mov	sp, r7
 8029cb0:	bd80      	pop	{r7, pc}
 8029cb2:	bf00      	nop
 8029cb4:	40013000 	.word	0x40013000
 8029cb8:	58024400 	.word	0x58024400
 8029cbc:	58020000 	.word	0x58020000
 8029cc0:	2402471c 	.word	0x2402471c
 8029cc4:	40020070 	.word	0x40020070
 8029cc8:	24024794 	.word	0x24024794
 8029ccc:	40020088 	.word	0x40020088

08029cd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8029cd0:	b480      	push	{r7}
 8029cd2:	b083      	sub	sp, #12
 8029cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8029cd6:	4b0a      	ldr	r3, [pc, #40]	; (8029d00 <HAL_MspInit+0x30>)
 8029cd8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8029cdc:	4a08      	ldr	r2, [pc, #32]	; (8029d00 <HAL_MspInit+0x30>)
 8029cde:	f043 0302 	orr.w	r3, r3, #2
 8029ce2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8029ce6:	4b06      	ldr	r3, [pc, #24]	; (8029d00 <HAL_MspInit+0x30>)
 8029ce8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8029cec:	f003 0302 	and.w	r3, r3, #2
 8029cf0:	607b      	str	r3, [r7, #4]
 8029cf2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8029cf4:	bf00      	nop
 8029cf6:	370c      	adds	r7, #12
 8029cf8:	46bd      	mov	sp, r7
 8029cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029cfe:	4770      	bx	lr
 8029d00:	58024400 	.word	0x58024400

08029d04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8029d04:	b480      	push	{r7}
 8029d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8029d08:	e7fe      	b.n	8029d08 <NMI_Handler+0x4>

08029d0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8029d0a:	b480      	push	{r7}
 8029d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8029d0e:	e7fe      	b.n	8029d0e <HardFault_Handler+0x4>

08029d10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8029d10:	b480      	push	{r7}
 8029d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8029d14:	e7fe      	b.n	8029d14 <MemManage_Handler+0x4>

08029d16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8029d16:	b480      	push	{r7}
 8029d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8029d1a:	e7fe      	b.n	8029d1a <BusFault_Handler+0x4>

08029d1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8029d1c:	b480      	push	{r7}
 8029d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8029d20:	e7fe      	b.n	8029d20 <UsageFault_Handler+0x4>

08029d22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8029d22:	b480      	push	{r7}
 8029d24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8029d26:	bf00      	nop
 8029d28:	46bd      	mov	sp, r7
 8029d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029d2e:	4770      	bx	lr

08029d30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8029d30:	b480      	push	{r7}
 8029d32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8029d34:	bf00      	nop
 8029d36:	46bd      	mov	sp, r7
 8029d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029d3c:	4770      	bx	lr

08029d3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8029d3e:	b480      	push	{r7}
 8029d40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8029d42:	bf00      	nop
 8029d44:	46bd      	mov	sp, r7
 8029d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029d4a:	4770      	bx	lr

08029d4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8029d4c:	b580      	push	{r7, lr}
 8029d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8029d50:	f000 ff1e 	bl	802ab90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8029d54:	bf00      	nop
 8029d56:	bd80      	pop	{r7, pc}

08029d58 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8029d58:	b580      	push	{r7, lr}
 8029d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8029d5c:	4802      	ldr	r0, [pc, #8]	; (8029d68 <DMA1_Stream0_IRQHandler+0x10>)
 8029d5e:	f002 ff51 	bl	802cc04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8029d62:	bf00      	nop
 8029d64:	bd80      	pop	{r7, pc}
 8029d66:	bf00      	nop
 8029d68:	240245a4 	.word	0x240245a4

08029d6c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8029d6c:	b580      	push	{r7, lr}
 8029d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8029d70:	4802      	ldr	r0, [pc, #8]	; (8029d7c <DMA1_Stream1_IRQHandler+0x10>)
 8029d72:	f002 ff47 	bl	802cc04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8029d76:	bf00      	nop
 8029d78:	bd80      	pop	{r7, pc}
 8029d7a:	bf00      	nop
 8029d7c:	2402461c 	.word	0x2402461c

08029d80 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8029d80:	b580      	push	{r7, lr}
 8029d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8029d84:	4802      	ldr	r0, [pc, #8]	; (8029d90 <DMA1_Stream4_IRQHandler+0x10>)
 8029d86:	f002 ff3d 	bl	802cc04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8029d8a:	bf00      	nop
 8029d8c:	bd80      	pop	{r7, pc}
 8029d8e:	bf00      	nop
 8029d90:	2402471c 	.word	0x2402471c

08029d94 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8029d94:	b580      	push	{r7, lr}
 8029d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8029d98:	4802      	ldr	r0, [pc, #8]	; (8029da4 <DMA1_Stream5_IRQHandler+0x10>)
 8029d9a:	f002 ff33 	bl	802cc04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8029d9e:	bf00      	nop
 8029da0:	bd80      	pop	{r7, pc}
 8029da2:	bf00      	nop
 8029da4:	24024794 	.word	0x24024794

08029da8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8029da8:	b580      	push	{r7, lr}
 8029daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8029dac:	4802      	ldr	r0, [pc, #8]	; (8029db8 <TIM2_IRQHandler+0x10>)
 8029dae:	f00a fc09 	bl	80345c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8029db2:	bf00      	nop
 8029db4:	bd80      	pop	{r7, pc}
 8029db6:	bf00      	nop
 8029db8:	24024810 	.word	0x24024810

08029dbc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8029dbc:	b580      	push	{r7, lr}
 8029dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8029dc0:	4802      	ldr	r0, [pc, #8]	; (8029dcc <TIM3_IRQHandler+0x10>)
 8029dc2:	f00a fbff 	bl	80345c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8029dc6:	bf00      	nop
 8029dc8:	bd80      	pop	{r7, pc}
 8029dca:	bf00      	nop
 8029dcc:	2402485c 	.word	0x2402485c

08029dd0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8029dd0:	b580      	push	{r7, lr}
 8029dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8029dd4:	4802      	ldr	r0, [pc, #8]	; (8029de0 <TIM4_IRQHandler+0x10>)
 8029dd6:	f00a fbf5 	bl	80345c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8029dda:	bf00      	nop
 8029ddc:	bd80      	pop	{r7, pc}
 8029dde:	bf00      	nop
 8029de0:	240248a8 	.word	0x240248a8

08029de4 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8029de4:	b580      	push	{r7, lr}
 8029de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8029de8:	4802      	ldr	r0, [pc, #8]	; (8029df4 <I2C2_EV_IRQHandler+0x10>)
 8029dea:	f004 fc91 	bl	802e710 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8029dee:	bf00      	nop
 8029df0:	bd80      	pop	{r7, pc}
 8029df2:	bf00      	nop
 8029df4:	24024558 	.word	0x24024558

08029df8 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8029df8:	b580      	push	{r7, lr}
 8029dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8029dfc:	4802      	ldr	r0, [pc, #8]	; (8029e08 <I2C2_ER_IRQHandler+0x10>)
 8029dfe:	f004 fca1 	bl	802e744 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8029e02:	bf00      	nop
 8029e04:	bd80      	pop	{r7, pc}
 8029e06:	bf00      	nop
 8029e08:	24024558 	.word	0x24024558

08029e0c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8029e0c:	b580      	push	{r7, lr}
 8029e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8029e10:	4802      	ldr	r0, [pc, #8]	; (8029e1c <SPI1_IRQHandler+0x10>)
 8029e12:	f009 ff5d 	bl	8033cd0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8029e16:	bf00      	nop
 8029e18:	bd80      	pop	{r7, pc}
 8029e1a:	bf00      	nop
 8029e1c:	24024694 	.word	0x24024694

08029e20 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8029e20:	b580      	push	{r7, lr}
 8029e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8029e24:	4802      	ldr	r0, [pc, #8]	; (8029e30 <USART3_IRQHandler+0x10>)
 8029e26:	f00b fa13 	bl	8035250 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8029e2a:	bf00      	nop
 8029e2c:	bd80      	pop	{r7, pc}
 8029e2e:	bf00      	nop
 8029e30:	24024b34 	.word	0x24024b34

08029e34 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8029e34:	b580      	push	{r7, lr}
 8029e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8029e38:	4802      	ldr	r0, [pc, #8]	; (8029e44 <UART4_IRQHandler+0x10>)
 8029e3a:	f00b fa09 	bl	8035250 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8029e3e:	bf00      	nop
 8029e40:	bd80      	pop	{r7, pc}
 8029e42:	bf00      	nop
 8029e44:	240248f4 	.word	0x240248f4

08029e48 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8029e48:	b580      	push	{r7, lr}
 8029e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8029e4c:	4802      	ldr	r0, [pc, #8]	; (8029e58 <UART8_IRQHandler+0x10>)
 8029e4e:	f00b f9ff 	bl	8035250 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8029e52:	bf00      	nop
 8029e54:	bd80      	pop	{r7, pc}
 8029e56:	bf00      	nop
 8029e58:	24024a14 	.word	0x24024a14

08029e5c <OTG_FS_EP1_OUT_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS End Point 1 Out global interrupt.
  */
void OTG_FS_EP1_OUT_IRQHandler(void)
{
 8029e5c:	b580      	push	{r7, lr}
 8029e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_EP1_OUT_IRQn 0 */

  /* USER CODE END OTG_FS_EP1_OUT_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8029e60:	4802      	ldr	r0, [pc, #8]	; (8029e6c <OTG_FS_EP1_OUT_IRQHandler+0x10>)
 8029e62:	f005 fcc8 	bl	802f7f6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_EP1_OUT_IRQn 1 */

  /* USER CODE END OTG_FS_EP1_OUT_IRQn 1 */
}
 8029e66:	bf00      	nop
 8029e68:	bd80      	pop	{r7, pc}
 8029e6a:	bf00      	nop
 8029e6c:	240260a8 	.word	0x240260a8

08029e70 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8029e70:	b580      	push	{r7, lr}
 8029e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8029e74:	4802      	ldr	r0, [pc, #8]	; (8029e80 <OTG_FS_IRQHandler+0x10>)
 8029e76:	f005 fcbe 	bl	802f7f6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8029e7a:	bf00      	nop
 8029e7c:	bd80      	pop	{r7, pc}
 8029e7e:	bf00      	nop
 8029e80:	240260a8 	.word	0x240260a8

08029e84 <COMP1_IRQHandler>:

/**
  * @brief This function handles COMP1 and COMP2 interrupts through EXTI lines 20 and 21.
  */
void COMP_IRQHandler(void)
{
 8029e84:	b580      	push	{r7, lr}
 8029e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP_IRQn 0 */

  /* USER CODE END COMP_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp2);
 8029e88:	4802      	ldr	r0, [pc, #8]	; (8029e94 <COMP1_IRQHandler+0x10>)
 8029e8a:	f001 f845 	bl	802af18 <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP_IRQn 1 */

  /* USER CODE END COMP_IRQn 1 */
}
 8029e8e:	bf00      	nop
 8029e90:	bd80      	pop	{r7, pc}
 8029e92:	bf00      	nop
 8029e94:	24024518 	.word	0x24024518

08029e98 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8029e98:	b480      	push	{r7}
 8029e9a:	af00      	add	r7, sp, #0
	return 1;
 8029e9c:	2301      	movs	r3, #1
}
 8029e9e:	4618      	mov	r0, r3
 8029ea0:	46bd      	mov	sp, r7
 8029ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029ea6:	4770      	bx	lr

08029ea8 <_kill>:

int _kill(int pid, int sig)
{
 8029ea8:	b580      	push	{r7, lr}
 8029eaa:	b082      	sub	sp, #8
 8029eac:	af00      	add	r7, sp, #0
 8029eae:	6078      	str	r0, [r7, #4]
 8029eb0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8029eb2:	f011 ff19 	bl	803bce8 <__errno>
 8029eb6:	4603      	mov	r3, r0
 8029eb8:	2216      	movs	r2, #22
 8029eba:	601a      	str	r2, [r3, #0]
	return -1;
 8029ebc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8029ec0:	4618      	mov	r0, r3
 8029ec2:	3708      	adds	r7, #8
 8029ec4:	46bd      	mov	sp, r7
 8029ec6:	bd80      	pop	{r7, pc}

08029ec8 <_exit>:

void _exit (int status)
{
 8029ec8:	b580      	push	{r7, lr}
 8029eca:	b082      	sub	sp, #8
 8029ecc:	af00      	add	r7, sp, #0
 8029ece:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8029ed0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8029ed4:	6878      	ldr	r0, [r7, #4]
 8029ed6:	f7ff ffe7 	bl	8029ea8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8029eda:	e7fe      	b.n	8029eda <_exit+0x12>

08029edc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8029edc:	b580      	push	{r7, lr}
 8029ede:	b086      	sub	sp, #24
 8029ee0:	af00      	add	r7, sp, #0
 8029ee2:	60f8      	str	r0, [r7, #12]
 8029ee4:	60b9      	str	r1, [r7, #8]
 8029ee6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8029ee8:	2300      	movs	r3, #0
 8029eea:	617b      	str	r3, [r7, #20]
 8029eec:	e00a      	b.n	8029f04 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8029eee:	f3af 8000 	nop.w
 8029ef2:	4601      	mov	r1, r0
 8029ef4:	68bb      	ldr	r3, [r7, #8]
 8029ef6:	1c5a      	adds	r2, r3, #1
 8029ef8:	60ba      	str	r2, [r7, #8]
 8029efa:	b2ca      	uxtb	r2, r1
 8029efc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8029efe:	697b      	ldr	r3, [r7, #20]
 8029f00:	3301      	adds	r3, #1
 8029f02:	617b      	str	r3, [r7, #20]
 8029f04:	697a      	ldr	r2, [r7, #20]
 8029f06:	687b      	ldr	r3, [r7, #4]
 8029f08:	429a      	cmp	r2, r3
 8029f0a:	dbf0      	blt.n	8029eee <_read+0x12>
	}

return len;
 8029f0c:	687b      	ldr	r3, [r7, #4]
}
 8029f0e:	4618      	mov	r0, r3
 8029f10:	3718      	adds	r7, #24
 8029f12:	46bd      	mov	sp, r7
 8029f14:	bd80      	pop	{r7, pc}

08029f16 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8029f16:	b580      	push	{r7, lr}
 8029f18:	b086      	sub	sp, #24
 8029f1a:	af00      	add	r7, sp, #0
 8029f1c:	60f8      	str	r0, [r7, #12]
 8029f1e:	60b9      	str	r1, [r7, #8]
 8029f20:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8029f22:	2300      	movs	r3, #0
 8029f24:	617b      	str	r3, [r7, #20]
 8029f26:	e009      	b.n	8029f3c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8029f28:	68bb      	ldr	r3, [r7, #8]
 8029f2a:	1c5a      	adds	r2, r3, #1
 8029f2c:	60ba      	str	r2, [r7, #8]
 8029f2e:	781b      	ldrb	r3, [r3, #0]
 8029f30:	4618      	mov	r0, r3
 8029f32:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8029f36:	697b      	ldr	r3, [r7, #20]
 8029f38:	3301      	adds	r3, #1
 8029f3a:	617b      	str	r3, [r7, #20]
 8029f3c:	697a      	ldr	r2, [r7, #20]
 8029f3e:	687b      	ldr	r3, [r7, #4]
 8029f40:	429a      	cmp	r2, r3
 8029f42:	dbf1      	blt.n	8029f28 <_write+0x12>
	}
	return len;
 8029f44:	687b      	ldr	r3, [r7, #4]
}
 8029f46:	4618      	mov	r0, r3
 8029f48:	3718      	adds	r7, #24
 8029f4a:	46bd      	mov	sp, r7
 8029f4c:	bd80      	pop	{r7, pc}

08029f4e <_close>:

int _close(int file)
{
 8029f4e:	b480      	push	{r7}
 8029f50:	b083      	sub	sp, #12
 8029f52:	af00      	add	r7, sp, #0
 8029f54:	6078      	str	r0, [r7, #4]
	return -1;
 8029f56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8029f5a:	4618      	mov	r0, r3
 8029f5c:	370c      	adds	r7, #12
 8029f5e:	46bd      	mov	sp, r7
 8029f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029f64:	4770      	bx	lr

08029f66 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8029f66:	b480      	push	{r7}
 8029f68:	b083      	sub	sp, #12
 8029f6a:	af00      	add	r7, sp, #0
 8029f6c:	6078      	str	r0, [r7, #4]
 8029f6e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8029f70:	683b      	ldr	r3, [r7, #0]
 8029f72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8029f76:	605a      	str	r2, [r3, #4]
	return 0;
 8029f78:	2300      	movs	r3, #0
}
 8029f7a:	4618      	mov	r0, r3
 8029f7c:	370c      	adds	r7, #12
 8029f7e:	46bd      	mov	sp, r7
 8029f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029f84:	4770      	bx	lr

08029f86 <_isatty>:

int _isatty(int file)
{
 8029f86:	b480      	push	{r7}
 8029f88:	b083      	sub	sp, #12
 8029f8a:	af00      	add	r7, sp, #0
 8029f8c:	6078      	str	r0, [r7, #4]
	return 1;
 8029f8e:	2301      	movs	r3, #1
}
 8029f90:	4618      	mov	r0, r3
 8029f92:	370c      	adds	r7, #12
 8029f94:	46bd      	mov	sp, r7
 8029f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029f9a:	4770      	bx	lr

08029f9c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8029f9c:	b480      	push	{r7}
 8029f9e:	b085      	sub	sp, #20
 8029fa0:	af00      	add	r7, sp, #0
 8029fa2:	60f8      	str	r0, [r7, #12]
 8029fa4:	60b9      	str	r1, [r7, #8]
 8029fa6:	607a      	str	r2, [r7, #4]
	return 0;
 8029fa8:	2300      	movs	r3, #0
}
 8029faa:	4618      	mov	r0, r3
 8029fac:	3714      	adds	r7, #20
 8029fae:	46bd      	mov	sp, r7
 8029fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029fb4:	4770      	bx	lr
	...

08029fb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8029fb8:	b580      	push	{r7, lr}
 8029fba:	b086      	sub	sp, #24
 8029fbc:	af00      	add	r7, sp, #0
 8029fbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8029fc0:	4a14      	ldr	r2, [pc, #80]	; (802a014 <_sbrk+0x5c>)
 8029fc2:	4b15      	ldr	r3, [pc, #84]	; (802a018 <_sbrk+0x60>)
 8029fc4:	1ad3      	subs	r3, r2, r3
 8029fc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8029fc8:	697b      	ldr	r3, [r7, #20]
 8029fca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8029fcc:	4b13      	ldr	r3, [pc, #76]	; (802a01c <_sbrk+0x64>)
 8029fce:	681b      	ldr	r3, [r3, #0]
 8029fd0:	2b00      	cmp	r3, #0
 8029fd2:	d102      	bne.n	8029fda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8029fd4:	4b11      	ldr	r3, [pc, #68]	; (802a01c <_sbrk+0x64>)
 8029fd6:	4a12      	ldr	r2, [pc, #72]	; (802a020 <_sbrk+0x68>)
 8029fd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8029fda:	4b10      	ldr	r3, [pc, #64]	; (802a01c <_sbrk+0x64>)
 8029fdc:	681a      	ldr	r2, [r3, #0]
 8029fde:	687b      	ldr	r3, [r7, #4]
 8029fe0:	4413      	add	r3, r2
 8029fe2:	693a      	ldr	r2, [r7, #16]
 8029fe4:	429a      	cmp	r2, r3
 8029fe6:	d207      	bcs.n	8029ff8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8029fe8:	f011 fe7e 	bl	803bce8 <__errno>
 8029fec:	4603      	mov	r3, r0
 8029fee:	220c      	movs	r2, #12
 8029ff0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8029ff2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8029ff6:	e009      	b.n	802a00c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8029ff8:	4b08      	ldr	r3, [pc, #32]	; (802a01c <_sbrk+0x64>)
 8029ffa:	681b      	ldr	r3, [r3, #0]
 8029ffc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8029ffe:	4b07      	ldr	r3, [pc, #28]	; (802a01c <_sbrk+0x64>)
 802a000:	681a      	ldr	r2, [r3, #0]
 802a002:	687b      	ldr	r3, [r7, #4]
 802a004:	4413      	add	r3, r2
 802a006:	4a05      	ldr	r2, [pc, #20]	; (802a01c <_sbrk+0x64>)
 802a008:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 802a00a:	68fb      	ldr	r3, [r7, #12]
}
 802a00c:	4618      	mov	r0, r3
 802a00e:	3718      	adds	r7, #24
 802a010:	46bd      	mov	sp, r7
 802a012:	bd80      	pop	{r7, pc}
 802a014:	24080000 	.word	0x24080000
 802a018:	00000400 	.word	0x00000400
 802a01c:	2402480c 	.word	0x2402480c
 802a020:	240267e8 	.word	0x240267e8

0802a024 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 802a024:	b480      	push	{r7}
 802a026:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 802a028:	4b37      	ldr	r3, [pc, #220]	; (802a108 <SystemInit+0xe4>)
 802a02a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 802a02e:	4a36      	ldr	r2, [pc, #216]	; (802a108 <SystemInit+0xe4>)
 802a030:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 802a034:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 802a038:	4b34      	ldr	r3, [pc, #208]	; (802a10c <SystemInit+0xe8>)
 802a03a:	681b      	ldr	r3, [r3, #0]
 802a03c:	f003 030f 	and.w	r3, r3, #15
 802a040:	2b06      	cmp	r3, #6
 802a042:	d807      	bhi.n	802a054 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 802a044:	4b31      	ldr	r3, [pc, #196]	; (802a10c <SystemInit+0xe8>)
 802a046:	681b      	ldr	r3, [r3, #0]
 802a048:	f023 030f 	bic.w	r3, r3, #15
 802a04c:	4a2f      	ldr	r2, [pc, #188]	; (802a10c <SystemInit+0xe8>)
 802a04e:	f043 0307 	orr.w	r3, r3, #7
 802a052:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 802a054:	4b2e      	ldr	r3, [pc, #184]	; (802a110 <SystemInit+0xec>)
 802a056:	681b      	ldr	r3, [r3, #0]
 802a058:	4a2d      	ldr	r2, [pc, #180]	; (802a110 <SystemInit+0xec>)
 802a05a:	f043 0301 	orr.w	r3, r3, #1
 802a05e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 802a060:	4b2b      	ldr	r3, [pc, #172]	; (802a110 <SystemInit+0xec>)
 802a062:	2200      	movs	r2, #0
 802a064:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 802a066:	4b2a      	ldr	r3, [pc, #168]	; (802a110 <SystemInit+0xec>)
 802a068:	681a      	ldr	r2, [r3, #0]
 802a06a:	4929      	ldr	r1, [pc, #164]	; (802a110 <SystemInit+0xec>)
 802a06c:	4b29      	ldr	r3, [pc, #164]	; (802a114 <SystemInit+0xf0>)
 802a06e:	4013      	ands	r3, r2
 802a070:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 802a072:	4b26      	ldr	r3, [pc, #152]	; (802a10c <SystemInit+0xe8>)
 802a074:	681b      	ldr	r3, [r3, #0]
 802a076:	f003 0308 	and.w	r3, r3, #8
 802a07a:	2b00      	cmp	r3, #0
 802a07c:	d007      	beq.n	802a08e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 802a07e:	4b23      	ldr	r3, [pc, #140]	; (802a10c <SystemInit+0xe8>)
 802a080:	681b      	ldr	r3, [r3, #0]
 802a082:	f023 030f 	bic.w	r3, r3, #15
 802a086:	4a21      	ldr	r2, [pc, #132]	; (802a10c <SystemInit+0xe8>)
 802a088:	f043 0307 	orr.w	r3, r3, #7
 802a08c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 802a08e:	4b20      	ldr	r3, [pc, #128]	; (802a110 <SystemInit+0xec>)
 802a090:	2200      	movs	r2, #0
 802a092:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 802a094:	4b1e      	ldr	r3, [pc, #120]	; (802a110 <SystemInit+0xec>)
 802a096:	2200      	movs	r2, #0
 802a098:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 802a09a:	4b1d      	ldr	r3, [pc, #116]	; (802a110 <SystemInit+0xec>)
 802a09c:	2200      	movs	r2, #0
 802a09e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 802a0a0:	4b1b      	ldr	r3, [pc, #108]	; (802a110 <SystemInit+0xec>)
 802a0a2:	4a1d      	ldr	r2, [pc, #116]	; (802a118 <SystemInit+0xf4>)
 802a0a4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 802a0a6:	4b1a      	ldr	r3, [pc, #104]	; (802a110 <SystemInit+0xec>)
 802a0a8:	4a1c      	ldr	r2, [pc, #112]	; (802a11c <SystemInit+0xf8>)
 802a0aa:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 802a0ac:	4b18      	ldr	r3, [pc, #96]	; (802a110 <SystemInit+0xec>)
 802a0ae:	4a1c      	ldr	r2, [pc, #112]	; (802a120 <SystemInit+0xfc>)
 802a0b0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 802a0b2:	4b17      	ldr	r3, [pc, #92]	; (802a110 <SystemInit+0xec>)
 802a0b4:	2200      	movs	r2, #0
 802a0b6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 802a0b8:	4b15      	ldr	r3, [pc, #84]	; (802a110 <SystemInit+0xec>)
 802a0ba:	4a19      	ldr	r2, [pc, #100]	; (802a120 <SystemInit+0xfc>)
 802a0bc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 802a0be:	4b14      	ldr	r3, [pc, #80]	; (802a110 <SystemInit+0xec>)
 802a0c0:	2200      	movs	r2, #0
 802a0c2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 802a0c4:	4b12      	ldr	r3, [pc, #72]	; (802a110 <SystemInit+0xec>)
 802a0c6:	4a16      	ldr	r2, [pc, #88]	; (802a120 <SystemInit+0xfc>)
 802a0c8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 802a0ca:	4b11      	ldr	r3, [pc, #68]	; (802a110 <SystemInit+0xec>)
 802a0cc:	2200      	movs	r2, #0
 802a0ce:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 802a0d0:	4b0f      	ldr	r3, [pc, #60]	; (802a110 <SystemInit+0xec>)
 802a0d2:	681b      	ldr	r3, [r3, #0]
 802a0d4:	4a0e      	ldr	r2, [pc, #56]	; (802a110 <SystemInit+0xec>)
 802a0d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 802a0da:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 802a0dc:	4b0c      	ldr	r3, [pc, #48]	; (802a110 <SystemInit+0xec>)
 802a0de:	2200      	movs	r2, #0
 802a0e0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 802a0e2:	4b10      	ldr	r3, [pc, #64]	; (802a124 <SystemInit+0x100>)
 802a0e4:	681a      	ldr	r2, [r3, #0]
 802a0e6:	4b10      	ldr	r3, [pc, #64]	; (802a128 <SystemInit+0x104>)
 802a0e8:	4013      	ands	r3, r2
 802a0ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 802a0ee:	d202      	bcs.n	802a0f6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 802a0f0:	4b0e      	ldr	r3, [pc, #56]	; (802a12c <SystemInit+0x108>)
 802a0f2:	2201      	movs	r2, #1
 802a0f4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 802a0f6:	4b0e      	ldr	r3, [pc, #56]	; (802a130 <SystemInit+0x10c>)
 802a0f8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 802a0fc:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 802a0fe:	bf00      	nop
 802a100:	46bd      	mov	sp, r7
 802a102:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a106:	4770      	bx	lr
 802a108:	e000ed00 	.word	0xe000ed00
 802a10c:	52002000 	.word	0x52002000
 802a110:	58024400 	.word	0x58024400
 802a114:	eaf6ed7f 	.word	0xeaf6ed7f
 802a118:	02020200 	.word	0x02020200
 802a11c:	01ff0000 	.word	0x01ff0000
 802a120:	01010280 	.word	0x01010280
 802a124:	5c001000 	.word	0x5c001000
 802a128:	ffff0000 	.word	0xffff0000
 802a12c:	51008108 	.word	0x51008108
 802a130:	52004000 	.word	0x52004000

0802a134 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 802a134:	b580      	push	{r7, lr}
 802a136:	b088      	sub	sp, #32
 802a138:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 802a13a:	f107 0310 	add.w	r3, r7, #16
 802a13e:	2200      	movs	r2, #0
 802a140:	601a      	str	r2, [r3, #0]
 802a142:	605a      	str	r2, [r3, #4]
 802a144:	609a      	str	r2, [r3, #8]
 802a146:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 802a148:	1d3b      	adds	r3, r7, #4
 802a14a:	2200      	movs	r2, #0
 802a14c:	601a      	str	r2, [r3, #0]
 802a14e:	605a      	str	r2, [r3, #4]
 802a150:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 802a152:	4b1e      	ldr	r3, [pc, #120]	; (802a1cc <MX_TIM2_Init+0x98>)
 802a154:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 802a158:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 24000;
 802a15a:	4b1c      	ldr	r3, [pc, #112]	; (802a1cc <MX_TIM2_Init+0x98>)
 802a15c:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 802a160:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 802a162:	4b1a      	ldr	r3, [pc, #104]	; (802a1cc <MX_TIM2_Init+0x98>)
 802a164:	2200      	movs	r2, #0
 802a166:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 802a168:	4b18      	ldr	r3, [pc, #96]	; (802a1cc <MX_TIM2_Init+0x98>)
 802a16a:	2264      	movs	r2, #100	; 0x64
 802a16c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 802a16e:	4b17      	ldr	r3, [pc, #92]	; (802a1cc <MX_TIM2_Init+0x98>)
 802a170:	2200      	movs	r2, #0
 802a172:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 802a174:	4b15      	ldr	r3, [pc, #84]	; (802a1cc <MX_TIM2_Init+0x98>)
 802a176:	2200      	movs	r2, #0
 802a178:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 802a17a:	4814      	ldr	r0, [pc, #80]	; (802a1cc <MX_TIM2_Init+0x98>)
 802a17c:	f00a f953 	bl	8034426 <HAL_TIM_Base_Init>
 802a180:	4603      	mov	r3, r0
 802a182:	2b00      	cmp	r3, #0
 802a184:	d001      	beq.n	802a18a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 802a186:	f7ff fc61 	bl	8029a4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 802a18a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 802a18e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 802a190:	f107 0310 	add.w	r3, r7, #16
 802a194:	4619      	mov	r1, r3
 802a196:	480d      	ldr	r0, [pc, #52]	; (802a1cc <MX_TIM2_Init+0x98>)
 802a198:	f00a fb34 	bl	8034804 <HAL_TIM_ConfigClockSource>
 802a19c:	4603      	mov	r3, r0
 802a19e:	2b00      	cmp	r3, #0
 802a1a0:	d001      	beq.n	802a1a6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 802a1a2:	f7ff fc53 	bl	8029a4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 802a1a6:	2300      	movs	r3, #0
 802a1a8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 802a1aa:	2300      	movs	r3, #0
 802a1ac:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 802a1ae:	1d3b      	adds	r3, r7, #4
 802a1b0:	4619      	mov	r1, r3
 802a1b2:	4806      	ldr	r0, [pc, #24]	; (802a1cc <MX_TIM2_Init+0x98>)
 802a1b4:	f00a fd7e 	bl	8034cb4 <HAL_TIMEx_MasterConfigSynchronization>
 802a1b8:	4603      	mov	r3, r0
 802a1ba:	2b00      	cmp	r3, #0
 802a1bc:	d001      	beq.n	802a1c2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 802a1be:	f7ff fc45 	bl	8029a4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 802a1c2:	bf00      	nop
 802a1c4:	3720      	adds	r7, #32
 802a1c6:	46bd      	mov	sp, r7
 802a1c8:	bd80      	pop	{r7, pc}
 802a1ca:	bf00      	nop
 802a1cc:	24024810 	.word	0x24024810

0802a1d0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 802a1d0:	b580      	push	{r7, lr}
 802a1d2:	b088      	sub	sp, #32
 802a1d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 802a1d6:	f107 0310 	add.w	r3, r7, #16
 802a1da:	2200      	movs	r2, #0
 802a1dc:	601a      	str	r2, [r3, #0]
 802a1de:	605a      	str	r2, [r3, #4]
 802a1e0:	609a      	str	r2, [r3, #8]
 802a1e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 802a1e4:	1d3b      	adds	r3, r7, #4
 802a1e6:	2200      	movs	r2, #0
 802a1e8:	601a      	str	r2, [r3, #0]
 802a1ea:	605a      	str	r2, [r3, #4]
 802a1ec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 802a1ee:	4b1d      	ldr	r3, [pc, #116]	; (802a264 <MX_TIM3_Init+0x94>)
 802a1f0:	4a1d      	ldr	r2, [pc, #116]	; (802a268 <MX_TIM3_Init+0x98>)
 802a1f2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 24000;
 802a1f4:	4b1b      	ldr	r3, [pc, #108]	; (802a264 <MX_TIM3_Init+0x94>)
 802a1f6:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 802a1fa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 802a1fc:	4b19      	ldr	r3, [pc, #100]	; (802a264 <MX_TIM3_Init+0x94>)
 802a1fe:	2200      	movs	r2, #0
 802a200:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10;
 802a202:	4b18      	ldr	r3, [pc, #96]	; (802a264 <MX_TIM3_Init+0x94>)
 802a204:	220a      	movs	r2, #10
 802a206:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 802a208:	4b16      	ldr	r3, [pc, #88]	; (802a264 <MX_TIM3_Init+0x94>)
 802a20a:	2200      	movs	r2, #0
 802a20c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 802a20e:	4b15      	ldr	r3, [pc, #84]	; (802a264 <MX_TIM3_Init+0x94>)
 802a210:	2200      	movs	r2, #0
 802a212:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 802a214:	4813      	ldr	r0, [pc, #76]	; (802a264 <MX_TIM3_Init+0x94>)
 802a216:	f00a f906 	bl	8034426 <HAL_TIM_Base_Init>
 802a21a:	4603      	mov	r3, r0
 802a21c:	2b00      	cmp	r3, #0
 802a21e:	d001      	beq.n	802a224 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 802a220:	f7ff fc14 	bl	8029a4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 802a224:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 802a228:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 802a22a:	f107 0310 	add.w	r3, r7, #16
 802a22e:	4619      	mov	r1, r3
 802a230:	480c      	ldr	r0, [pc, #48]	; (802a264 <MX_TIM3_Init+0x94>)
 802a232:	f00a fae7 	bl	8034804 <HAL_TIM_ConfigClockSource>
 802a236:	4603      	mov	r3, r0
 802a238:	2b00      	cmp	r3, #0
 802a23a:	d001      	beq.n	802a240 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 802a23c:	f7ff fc06 	bl	8029a4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 802a240:	2300      	movs	r3, #0
 802a242:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 802a244:	2300      	movs	r3, #0
 802a246:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 802a248:	1d3b      	adds	r3, r7, #4
 802a24a:	4619      	mov	r1, r3
 802a24c:	4805      	ldr	r0, [pc, #20]	; (802a264 <MX_TIM3_Init+0x94>)
 802a24e:	f00a fd31 	bl	8034cb4 <HAL_TIMEx_MasterConfigSynchronization>
 802a252:	4603      	mov	r3, r0
 802a254:	2b00      	cmp	r3, #0
 802a256:	d001      	beq.n	802a25c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 802a258:	f7ff fbf8 	bl	8029a4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 802a25c:	bf00      	nop
 802a25e:	3720      	adds	r7, #32
 802a260:	46bd      	mov	sp, r7
 802a262:	bd80      	pop	{r7, pc}
 802a264:	2402485c 	.word	0x2402485c
 802a268:	40000400 	.word	0x40000400

0802a26c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 802a26c:	b580      	push	{r7, lr}
 802a26e:	b088      	sub	sp, #32
 802a270:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 802a272:	f107 0310 	add.w	r3, r7, #16
 802a276:	2200      	movs	r2, #0
 802a278:	601a      	str	r2, [r3, #0]
 802a27a:	605a      	str	r2, [r3, #4]
 802a27c:	609a      	str	r2, [r3, #8]
 802a27e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 802a280:	1d3b      	adds	r3, r7, #4
 802a282:	2200      	movs	r2, #0
 802a284:	601a      	str	r2, [r3, #0]
 802a286:	605a      	str	r2, [r3, #4]
 802a288:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 802a28a:	4b1d      	ldr	r3, [pc, #116]	; (802a300 <MX_TIM4_Init+0x94>)
 802a28c:	4a1d      	ldr	r2, [pc, #116]	; (802a304 <MX_TIM4_Init+0x98>)
 802a28e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 24000;
 802a290:	4b1b      	ldr	r3, [pc, #108]	; (802a300 <MX_TIM4_Init+0x94>)
 802a292:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 802a296:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 802a298:	4b19      	ldr	r3, [pc, #100]	; (802a300 <MX_TIM4_Init+0x94>)
 802a29a:	2200      	movs	r2, #0
 802a29c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 802a29e:	4b18      	ldr	r3, [pc, #96]	; (802a300 <MX_TIM4_Init+0x94>)
 802a2a0:	2264      	movs	r2, #100	; 0x64
 802a2a2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 802a2a4:	4b16      	ldr	r3, [pc, #88]	; (802a300 <MX_TIM4_Init+0x94>)
 802a2a6:	2200      	movs	r2, #0
 802a2a8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 802a2aa:	4b15      	ldr	r3, [pc, #84]	; (802a300 <MX_TIM4_Init+0x94>)
 802a2ac:	2200      	movs	r2, #0
 802a2ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 802a2b0:	4813      	ldr	r0, [pc, #76]	; (802a300 <MX_TIM4_Init+0x94>)
 802a2b2:	f00a f8b8 	bl	8034426 <HAL_TIM_Base_Init>
 802a2b6:	4603      	mov	r3, r0
 802a2b8:	2b00      	cmp	r3, #0
 802a2ba:	d001      	beq.n	802a2c0 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 802a2bc:	f7ff fbc6 	bl	8029a4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 802a2c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 802a2c4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 802a2c6:	f107 0310 	add.w	r3, r7, #16
 802a2ca:	4619      	mov	r1, r3
 802a2cc:	480c      	ldr	r0, [pc, #48]	; (802a300 <MX_TIM4_Init+0x94>)
 802a2ce:	f00a fa99 	bl	8034804 <HAL_TIM_ConfigClockSource>
 802a2d2:	4603      	mov	r3, r0
 802a2d4:	2b00      	cmp	r3, #0
 802a2d6:	d001      	beq.n	802a2dc <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 802a2d8:	f7ff fbb8 	bl	8029a4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 802a2dc:	2300      	movs	r3, #0
 802a2de:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 802a2e0:	2300      	movs	r3, #0
 802a2e2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 802a2e4:	1d3b      	adds	r3, r7, #4
 802a2e6:	4619      	mov	r1, r3
 802a2e8:	4805      	ldr	r0, [pc, #20]	; (802a300 <MX_TIM4_Init+0x94>)
 802a2ea:	f00a fce3 	bl	8034cb4 <HAL_TIMEx_MasterConfigSynchronization>
 802a2ee:	4603      	mov	r3, r0
 802a2f0:	2b00      	cmp	r3, #0
 802a2f2:	d001      	beq.n	802a2f8 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 802a2f4:	f7ff fbaa 	bl	8029a4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 802a2f8:	bf00      	nop
 802a2fa:	3720      	adds	r7, #32
 802a2fc:	46bd      	mov	sp, r7
 802a2fe:	bd80      	pop	{r7, pc}
 802a300:	240248a8 	.word	0x240248a8
 802a304:	40000800 	.word	0x40000800

0802a308 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 802a308:	b580      	push	{r7, lr}
 802a30a:	b086      	sub	sp, #24
 802a30c:	af00      	add	r7, sp, #0
 802a30e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 802a310:	687b      	ldr	r3, [r7, #4]
 802a312:	681b      	ldr	r3, [r3, #0]
 802a314:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802a318:	d117      	bne.n	802a34a <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 802a31a:	4b2a      	ldr	r3, [pc, #168]	; (802a3c4 <HAL_TIM_Base_MspInit+0xbc>)
 802a31c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802a320:	4a28      	ldr	r2, [pc, #160]	; (802a3c4 <HAL_TIM_Base_MspInit+0xbc>)
 802a322:	f043 0301 	orr.w	r3, r3, #1
 802a326:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 802a32a:	4b26      	ldr	r3, [pc, #152]	; (802a3c4 <HAL_TIM_Base_MspInit+0xbc>)
 802a32c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802a330:	f003 0301 	and.w	r3, r3, #1
 802a334:	617b      	str	r3, [r7, #20]
 802a336:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 802a338:	2200      	movs	r2, #0
 802a33a:	2101      	movs	r1, #1
 802a33c:	201c      	movs	r0, #28
 802a33e:	f000 ff3a 	bl	802b1b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 802a342:	201c      	movs	r0, #28
 802a344:	f000 ff51 	bl	802b1ea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 802a348:	e038      	b.n	802a3bc <HAL_TIM_Base_MspInit+0xb4>
  else if(tim_baseHandle->Instance==TIM3)
 802a34a:	687b      	ldr	r3, [r7, #4]
 802a34c:	681b      	ldr	r3, [r3, #0]
 802a34e:	4a1e      	ldr	r2, [pc, #120]	; (802a3c8 <HAL_TIM_Base_MspInit+0xc0>)
 802a350:	4293      	cmp	r3, r2
 802a352:	d117      	bne.n	802a384 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 802a354:	4b1b      	ldr	r3, [pc, #108]	; (802a3c4 <HAL_TIM_Base_MspInit+0xbc>)
 802a356:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802a35a:	4a1a      	ldr	r2, [pc, #104]	; (802a3c4 <HAL_TIM_Base_MspInit+0xbc>)
 802a35c:	f043 0302 	orr.w	r3, r3, #2
 802a360:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 802a364:	4b17      	ldr	r3, [pc, #92]	; (802a3c4 <HAL_TIM_Base_MspInit+0xbc>)
 802a366:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802a36a:	f003 0302 	and.w	r3, r3, #2
 802a36e:	613b      	str	r3, [r7, #16]
 802a370:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 802a372:	2200      	movs	r2, #0
 802a374:	2101      	movs	r1, #1
 802a376:	201d      	movs	r0, #29
 802a378:	f000 ff1d 	bl	802b1b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 802a37c:	201d      	movs	r0, #29
 802a37e:	f000 ff34 	bl	802b1ea <HAL_NVIC_EnableIRQ>
}
 802a382:	e01b      	b.n	802a3bc <HAL_TIM_Base_MspInit+0xb4>
  else if(tim_baseHandle->Instance==TIM4)
 802a384:	687b      	ldr	r3, [r7, #4]
 802a386:	681b      	ldr	r3, [r3, #0]
 802a388:	4a10      	ldr	r2, [pc, #64]	; (802a3cc <HAL_TIM_Base_MspInit+0xc4>)
 802a38a:	4293      	cmp	r3, r2
 802a38c:	d116      	bne.n	802a3bc <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 802a38e:	4b0d      	ldr	r3, [pc, #52]	; (802a3c4 <HAL_TIM_Base_MspInit+0xbc>)
 802a390:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802a394:	4a0b      	ldr	r2, [pc, #44]	; (802a3c4 <HAL_TIM_Base_MspInit+0xbc>)
 802a396:	f043 0304 	orr.w	r3, r3, #4
 802a39a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 802a39e:	4b09      	ldr	r3, [pc, #36]	; (802a3c4 <HAL_TIM_Base_MspInit+0xbc>)
 802a3a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802a3a4:	f003 0304 	and.w	r3, r3, #4
 802a3a8:	60fb      	str	r3, [r7, #12]
 802a3aa:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 802a3ac:	2200      	movs	r2, #0
 802a3ae:	2100      	movs	r1, #0
 802a3b0:	201e      	movs	r0, #30
 802a3b2:	f000 ff00 	bl	802b1b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 802a3b6:	201e      	movs	r0, #30
 802a3b8:	f000 ff17 	bl	802b1ea <HAL_NVIC_EnableIRQ>
}
 802a3bc:	bf00      	nop
 802a3be:	3718      	adds	r7, #24
 802a3c0:	46bd      	mov	sp, r7
 802a3c2:	bd80      	pop	{r7, pc}
 802a3c4:	58024400 	.word	0x58024400
 802a3c8:	40000400 	.word	0x40000400
 802a3cc:	40000800 	.word	0x40000800

0802a3d0 <MX_UART4_Init>:
UART_HandleTypeDef huart2;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 802a3d0:	b580      	push	{r7, lr}
 802a3d2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 802a3d4:	4b25      	ldr	r3, [pc, #148]	; (802a46c <MX_UART4_Init+0x9c>)
 802a3d6:	4a26      	ldr	r2, [pc, #152]	; (802a470 <MX_UART4_Init+0xa0>)
 802a3d8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 802a3da:	4b24      	ldr	r3, [pc, #144]	; (802a46c <MX_UART4_Init+0x9c>)
 802a3dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 802a3e0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_9B;
 802a3e2:	4b22      	ldr	r3, [pc, #136]	; (802a46c <MX_UART4_Init+0x9c>)
 802a3e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 802a3e8:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 802a3ea:	4b20      	ldr	r3, [pc, #128]	; (802a46c <MX_UART4_Init+0x9c>)
 802a3ec:	2200      	movs	r2, #0
 802a3ee:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_EVEN;
 802a3f0:	4b1e      	ldr	r3, [pc, #120]	; (802a46c <MX_UART4_Init+0x9c>)
 802a3f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 802a3f6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 802a3f8:	4b1c      	ldr	r3, [pc, #112]	; (802a46c <MX_UART4_Init+0x9c>)
 802a3fa:	220c      	movs	r2, #12
 802a3fc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 802a3fe:	4b1b      	ldr	r3, [pc, #108]	; (802a46c <MX_UART4_Init+0x9c>)
 802a400:	2200      	movs	r2, #0
 802a402:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 802a404:	4b19      	ldr	r3, [pc, #100]	; (802a46c <MX_UART4_Init+0x9c>)
 802a406:	2200      	movs	r2, #0
 802a408:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 802a40a:	4b18      	ldr	r3, [pc, #96]	; (802a46c <MX_UART4_Init+0x9c>)
 802a40c:	2200      	movs	r2, #0
 802a40e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 802a410:	4b16      	ldr	r3, [pc, #88]	; (802a46c <MX_UART4_Init+0x9c>)
 802a412:	2200      	movs	r2, #0
 802a414:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 802a416:	4b15      	ldr	r3, [pc, #84]	; (802a46c <MX_UART4_Init+0x9c>)
 802a418:	2220      	movs	r2, #32
 802a41a:	629a      	str	r2, [r3, #40]	; 0x28
  huart4.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 802a41c:	4b13      	ldr	r3, [pc, #76]	; (802a46c <MX_UART4_Init+0x9c>)
 802a41e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 802a422:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_UART_Init(&huart4) != HAL_OK)
 802a424:	4811      	ldr	r0, [pc, #68]	; (802a46c <MX_UART4_Init+0x9c>)
 802a426:	f00a fcf1 	bl	8034e0c <HAL_UART_Init>
 802a42a:	4603      	mov	r3, r0
 802a42c:	2b00      	cmp	r3, #0
 802a42e:	d001      	beq.n	802a434 <MX_UART4_Init+0x64>
  {
    Error_Handler();
 802a430:	f7ff fb0c 	bl	8029a4c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 802a434:	2100      	movs	r1, #0
 802a436:	480d      	ldr	r0, [pc, #52]	; (802a46c <MX_UART4_Init+0x9c>)
 802a438:	f00d fa3e 	bl	80378b8 <HAL_UARTEx_SetTxFifoThreshold>
 802a43c:	4603      	mov	r3, r0
 802a43e:	2b00      	cmp	r3, #0
 802a440:	d001      	beq.n	802a446 <MX_UART4_Init+0x76>
  {
    Error_Handler();
 802a442:	f7ff fb03 	bl	8029a4c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 802a446:	2100      	movs	r1, #0
 802a448:	4808      	ldr	r0, [pc, #32]	; (802a46c <MX_UART4_Init+0x9c>)
 802a44a:	f00d fa73 	bl	8037934 <HAL_UARTEx_SetRxFifoThreshold>
 802a44e:	4603      	mov	r3, r0
 802a450:	2b00      	cmp	r3, #0
 802a452:	d001      	beq.n	802a458 <MX_UART4_Init+0x88>
  {
    Error_Handler();
 802a454:	f7ff fafa 	bl	8029a4c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 802a458:	4804      	ldr	r0, [pc, #16]	; (802a46c <MX_UART4_Init+0x9c>)
 802a45a:	f00d f9f4 	bl	8037846 <HAL_UARTEx_DisableFifoMode>
 802a45e:	4603      	mov	r3, r0
 802a460:	2b00      	cmp	r3, #0
 802a462:	d001      	beq.n	802a468 <MX_UART4_Init+0x98>
  {
    Error_Handler();
 802a464:	f7ff faf2 	bl	8029a4c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 802a468:	bf00      	nop
 802a46a:	bd80      	pop	{r7, pc}
 802a46c:	240248f4 	.word	0x240248f4
 802a470:	40004c00 	.word	0x40004c00

0802a474 <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 802a474:	b580      	push	{r7, lr}
 802a476:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 802a478:	4b22      	ldr	r3, [pc, #136]	; (802a504 <MX_UART7_Init+0x90>)
 802a47a:	4a23      	ldr	r2, [pc, #140]	; (802a508 <MX_UART7_Init+0x94>)
 802a47c:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 1250000;
 802a47e:	4b21      	ldr	r3, [pc, #132]	; (802a504 <MX_UART7_Init+0x90>)
 802a480:	4a22      	ldr	r2, [pc, #136]	; (802a50c <MX_UART7_Init+0x98>)
 802a482:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 802a484:	4b1f      	ldr	r3, [pc, #124]	; (802a504 <MX_UART7_Init+0x90>)
 802a486:	2200      	movs	r2, #0
 802a488:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 802a48a:	4b1e      	ldr	r3, [pc, #120]	; (802a504 <MX_UART7_Init+0x90>)
 802a48c:	2200      	movs	r2, #0
 802a48e:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 802a490:	4b1c      	ldr	r3, [pc, #112]	; (802a504 <MX_UART7_Init+0x90>)
 802a492:	2200      	movs	r2, #0
 802a494:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 802a496:	4b1b      	ldr	r3, [pc, #108]	; (802a504 <MX_UART7_Init+0x90>)
 802a498:	220c      	movs	r2, #12
 802a49a:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 802a49c:	4b19      	ldr	r3, [pc, #100]	; (802a504 <MX_UART7_Init+0x90>)
 802a49e:	2200      	movs	r2, #0
 802a4a0:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 802a4a2:	4b18      	ldr	r3, [pc, #96]	; (802a504 <MX_UART7_Init+0x90>)
 802a4a4:	2200      	movs	r2, #0
 802a4a6:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 802a4a8:	4b16      	ldr	r3, [pc, #88]	; (802a504 <MX_UART7_Init+0x90>)
 802a4aa:	2200      	movs	r2, #0
 802a4ac:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 802a4ae:	4b15      	ldr	r3, [pc, #84]	; (802a504 <MX_UART7_Init+0x90>)
 802a4b0:	2200      	movs	r2, #0
 802a4b2:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 802a4b4:	4b13      	ldr	r3, [pc, #76]	; (802a504 <MX_UART7_Init+0x90>)
 802a4b6:	2200      	movs	r2, #0
 802a4b8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 802a4ba:	4812      	ldr	r0, [pc, #72]	; (802a504 <MX_UART7_Init+0x90>)
 802a4bc:	f00a fca6 	bl	8034e0c <HAL_UART_Init>
 802a4c0:	4603      	mov	r3, r0
 802a4c2:	2b00      	cmp	r3, #0
 802a4c4:	d001      	beq.n	802a4ca <MX_UART7_Init+0x56>
  {
    Error_Handler();
 802a4c6:	f7ff fac1 	bl	8029a4c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 802a4ca:	2100      	movs	r1, #0
 802a4cc:	480d      	ldr	r0, [pc, #52]	; (802a504 <MX_UART7_Init+0x90>)
 802a4ce:	f00d f9f3 	bl	80378b8 <HAL_UARTEx_SetTxFifoThreshold>
 802a4d2:	4603      	mov	r3, r0
 802a4d4:	2b00      	cmp	r3, #0
 802a4d6:	d001      	beq.n	802a4dc <MX_UART7_Init+0x68>
  {
    Error_Handler();
 802a4d8:	f7ff fab8 	bl	8029a4c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 802a4dc:	2100      	movs	r1, #0
 802a4de:	4809      	ldr	r0, [pc, #36]	; (802a504 <MX_UART7_Init+0x90>)
 802a4e0:	f00d fa28 	bl	8037934 <HAL_UARTEx_SetRxFifoThreshold>
 802a4e4:	4603      	mov	r3, r0
 802a4e6:	2b00      	cmp	r3, #0
 802a4e8:	d001      	beq.n	802a4ee <MX_UART7_Init+0x7a>
  {
    Error_Handler();
 802a4ea:	f7ff faaf 	bl	8029a4c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 802a4ee:	4805      	ldr	r0, [pc, #20]	; (802a504 <MX_UART7_Init+0x90>)
 802a4f0:	f00d f9a9 	bl	8037846 <HAL_UARTEx_DisableFifoMode>
 802a4f4:	4603      	mov	r3, r0
 802a4f6:	2b00      	cmp	r3, #0
 802a4f8:	d001      	beq.n	802a4fe <MX_UART7_Init+0x8a>
  {
    Error_Handler();
 802a4fa:	f7ff faa7 	bl	8029a4c <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 802a4fe:	bf00      	nop
 802a500:	bd80      	pop	{r7, pc}
 802a502:	bf00      	nop
 802a504:	24024984 	.word	0x24024984
 802a508:	40007800 	.word	0x40007800
 802a50c:	001312d0 	.word	0x001312d0

0802a510 <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{
 802a510:	b580      	push	{r7, lr}
 802a512:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 802a514:	4b26      	ldr	r3, [pc, #152]	; (802a5b0 <MX_UART8_Init+0xa0>)
 802a516:	4a27      	ldr	r2, [pc, #156]	; (802a5b4 <MX_UART8_Init+0xa4>)
 802a518:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 1250000;
 802a51a:	4b25      	ldr	r3, [pc, #148]	; (802a5b0 <MX_UART8_Init+0xa0>)
 802a51c:	4a26      	ldr	r2, [pc, #152]	; (802a5b8 <MX_UART8_Init+0xa8>)
 802a51e:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_9B;
 802a520:	4b23      	ldr	r3, [pc, #140]	; (802a5b0 <MX_UART8_Init+0xa0>)
 802a522:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 802a526:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 802a528:	4b21      	ldr	r3, [pc, #132]	; (802a5b0 <MX_UART8_Init+0xa0>)
 802a52a:	2200      	movs	r2, #0
 802a52c:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_EVEN;
 802a52e:	4b20      	ldr	r3, [pc, #128]	; (802a5b0 <MX_UART8_Init+0xa0>)
 802a530:	f44f 6280 	mov.w	r2, #1024	; 0x400
 802a534:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 802a536:	4b1e      	ldr	r3, [pc, #120]	; (802a5b0 <MX_UART8_Init+0xa0>)
 802a538:	220c      	movs	r2, #12
 802a53a:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 802a53c:	4b1c      	ldr	r3, [pc, #112]	; (802a5b0 <MX_UART8_Init+0xa0>)
 802a53e:	2200      	movs	r2, #0
 802a540:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 802a542:	4b1b      	ldr	r3, [pc, #108]	; (802a5b0 <MX_UART8_Init+0xa0>)
 802a544:	2200      	movs	r2, #0
 802a546:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 802a548:	4b19      	ldr	r3, [pc, #100]	; (802a5b0 <MX_UART8_Init+0xa0>)
 802a54a:	2200      	movs	r2, #0
 802a54c:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 802a54e:	4b18      	ldr	r3, [pc, #96]	; (802a5b0 <MX_UART8_Init+0xa0>)
 802a550:	2200      	movs	r2, #0
 802a552:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 802a554:	4b16      	ldr	r3, [pc, #88]	; (802a5b0 <MX_UART8_Init+0xa0>)
 802a556:	2220      	movs	r2, #32
 802a558:	629a      	str	r2, [r3, #40]	; 0x28
  huart8.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 802a55a:	4b15      	ldr	r3, [pc, #84]	; (802a5b0 <MX_UART8_Init+0xa0>)
 802a55c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 802a560:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_UART_Init(&huart8) != HAL_OK)
 802a562:	4813      	ldr	r0, [pc, #76]	; (802a5b0 <MX_UART8_Init+0xa0>)
 802a564:	f00a fc52 	bl	8034e0c <HAL_UART_Init>
 802a568:	4603      	mov	r3, r0
 802a56a:	2b00      	cmp	r3, #0
 802a56c:	d001      	beq.n	802a572 <MX_UART8_Init+0x62>
  {
    Error_Handler();
 802a56e:	f7ff fa6d 	bl	8029a4c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 802a572:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 802a576:	480e      	ldr	r0, [pc, #56]	; (802a5b0 <MX_UART8_Init+0xa0>)
 802a578:	f00d f99e 	bl	80378b8 <HAL_UARTEx_SetTxFifoThreshold>
 802a57c:	4603      	mov	r3, r0
 802a57e:	2b00      	cmp	r3, #0
 802a580:	d001      	beq.n	802a586 <MX_UART8_Init+0x76>
  {
    Error_Handler();
 802a582:	f7ff fa63 	bl	8029a4c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 802a586:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 802a58a:	4809      	ldr	r0, [pc, #36]	; (802a5b0 <MX_UART8_Init+0xa0>)
 802a58c:	f00d f9d2 	bl	8037934 <HAL_UARTEx_SetRxFifoThreshold>
 802a590:	4603      	mov	r3, r0
 802a592:	2b00      	cmp	r3, #0
 802a594:	d001      	beq.n	802a59a <MX_UART8_Init+0x8a>
  {
    Error_Handler();
 802a596:	f7ff fa59 	bl	8029a4c <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart8) != HAL_OK)
 802a59a:	4805      	ldr	r0, [pc, #20]	; (802a5b0 <MX_UART8_Init+0xa0>)
 802a59c:	f00d f918 	bl	80377d0 <HAL_UARTEx_EnableFifoMode>
 802a5a0:	4603      	mov	r3, r0
 802a5a2:	2b00      	cmp	r3, #0
 802a5a4:	d001      	beq.n	802a5aa <MX_UART8_Init+0x9a>
  {
    Error_Handler();
 802a5a6:	f7ff fa51 	bl	8029a4c <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 802a5aa:	bf00      	nop
 802a5ac:	bd80      	pop	{r7, pc}
 802a5ae:	bf00      	nop
 802a5b0:	24024a14 	.word	0x24024a14
 802a5b4:	40007c00 	.word	0x40007c00
 802a5b8:	001312d0 	.word	0x001312d0

0802a5bc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 802a5bc:	b580      	push	{r7, lr}
 802a5be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 802a5c0:	4b22      	ldr	r3, [pc, #136]	; (802a64c <MX_USART2_UART_Init+0x90>)
 802a5c2:	4a23      	ldr	r2, [pc, #140]	; (802a650 <MX_USART2_UART_Init+0x94>)
 802a5c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 802a5c6:	4b21      	ldr	r3, [pc, #132]	; (802a64c <MX_USART2_UART_Init+0x90>)
 802a5c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 802a5cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 802a5ce:	4b1f      	ldr	r3, [pc, #124]	; (802a64c <MX_USART2_UART_Init+0x90>)
 802a5d0:	2200      	movs	r2, #0
 802a5d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 802a5d4:	4b1d      	ldr	r3, [pc, #116]	; (802a64c <MX_USART2_UART_Init+0x90>)
 802a5d6:	2200      	movs	r2, #0
 802a5d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 802a5da:	4b1c      	ldr	r3, [pc, #112]	; (802a64c <MX_USART2_UART_Init+0x90>)
 802a5dc:	2200      	movs	r2, #0
 802a5de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 802a5e0:	4b1a      	ldr	r3, [pc, #104]	; (802a64c <MX_USART2_UART_Init+0x90>)
 802a5e2:	220c      	movs	r2, #12
 802a5e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 802a5e6:	4b19      	ldr	r3, [pc, #100]	; (802a64c <MX_USART2_UART_Init+0x90>)
 802a5e8:	2200      	movs	r2, #0
 802a5ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 802a5ec:	4b17      	ldr	r3, [pc, #92]	; (802a64c <MX_USART2_UART_Init+0x90>)
 802a5ee:	2200      	movs	r2, #0
 802a5f0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 802a5f2:	4b16      	ldr	r3, [pc, #88]	; (802a64c <MX_USART2_UART_Init+0x90>)
 802a5f4:	2200      	movs	r2, #0
 802a5f6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 802a5f8:	4b14      	ldr	r3, [pc, #80]	; (802a64c <MX_USART2_UART_Init+0x90>)
 802a5fa:	2200      	movs	r2, #0
 802a5fc:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 802a5fe:	4b13      	ldr	r3, [pc, #76]	; (802a64c <MX_USART2_UART_Init+0x90>)
 802a600:	2200      	movs	r2, #0
 802a602:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 802a604:	4811      	ldr	r0, [pc, #68]	; (802a64c <MX_USART2_UART_Init+0x90>)
 802a606:	f00a fc01 	bl	8034e0c <HAL_UART_Init>
 802a60a:	4603      	mov	r3, r0
 802a60c:	2b00      	cmp	r3, #0
 802a60e:	d001      	beq.n	802a614 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 802a610:	f7ff fa1c 	bl	8029a4c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 802a614:	2100      	movs	r1, #0
 802a616:	480d      	ldr	r0, [pc, #52]	; (802a64c <MX_USART2_UART_Init+0x90>)
 802a618:	f00d f94e 	bl	80378b8 <HAL_UARTEx_SetTxFifoThreshold>
 802a61c:	4603      	mov	r3, r0
 802a61e:	2b00      	cmp	r3, #0
 802a620:	d001      	beq.n	802a626 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 802a622:	f7ff fa13 	bl	8029a4c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 802a626:	2100      	movs	r1, #0
 802a628:	4808      	ldr	r0, [pc, #32]	; (802a64c <MX_USART2_UART_Init+0x90>)
 802a62a:	f00d f983 	bl	8037934 <HAL_UARTEx_SetRxFifoThreshold>
 802a62e:	4603      	mov	r3, r0
 802a630:	2b00      	cmp	r3, #0
 802a632:	d001      	beq.n	802a638 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 802a634:	f7ff fa0a 	bl	8029a4c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 802a638:	4804      	ldr	r0, [pc, #16]	; (802a64c <MX_USART2_UART_Init+0x90>)
 802a63a:	f00d f904 	bl	8037846 <HAL_UARTEx_DisableFifoMode>
 802a63e:	4603      	mov	r3, r0
 802a640:	2b00      	cmp	r3, #0
 802a642:	d001      	beq.n	802a648 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 802a644:	f7ff fa02 	bl	8029a4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 802a648:	bf00      	nop
 802a64a:	bd80      	pop	{r7, pc}
 802a64c:	24024aa4 	.word	0x24024aa4
 802a650:	40004400 	.word	0x40004400

0802a654 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 802a654:	b580      	push	{r7, lr}
 802a656:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 802a658:	4b26      	ldr	r3, [pc, #152]	; (802a6f4 <MX_USART3_UART_Init+0xa0>)
 802a65a:	4a27      	ldr	r2, [pc, #156]	; (802a6f8 <MX_USART3_UART_Init+0xa4>)
 802a65c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 1250000;
 802a65e:	4b25      	ldr	r3, [pc, #148]	; (802a6f4 <MX_USART3_UART_Init+0xa0>)
 802a660:	4a26      	ldr	r2, [pc, #152]	; (802a6fc <MX_USART3_UART_Init+0xa8>)
 802a662:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_9B;
 802a664:	4b23      	ldr	r3, [pc, #140]	; (802a6f4 <MX_USART3_UART_Init+0xa0>)
 802a666:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 802a66a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 802a66c:	4b21      	ldr	r3, [pc, #132]	; (802a6f4 <MX_USART3_UART_Init+0xa0>)
 802a66e:	2200      	movs	r2, #0
 802a670:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_EVEN;
 802a672:	4b20      	ldr	r3, [pc, #128]	; (802a6f4 <MX_USART3_UART_Init+0xa0>)
 802a674:	f44f 6280 	mov.w	r2, #1024	; 0x400
 802a678:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 802a67a:	4b1e      	ldr	r3, [pc, #120]	; (802a6f4 <MX_USART3_UART_Init+0xa0>)
 802a67c:	220c      	movs	r2, #12
 802a67e:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 802a680:	4b1c      	ldr	r3, [pc, #112]	; (802a6f4 <MX_USART3_UART_Init+0xa0>)
 802a682:	2200      	movs	r2, #0
 802a684:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 802a686:	4b1b      	ldr	r3, [pc, #108]	; (802a6f4 <MX_USART3_UART_Init+0xa0>)
 802a688:	2200      	movs	r2, #0
 802a68a:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 802a68c:	4b19      	ldr	r3, [pc, #100]	; (802a6f4 <MX_USART3_UART_Init+0xa0>)
 802a68e:	2200      	movs	r2, #0
 802a690:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 802a692:	4b18      	ldr	r3, [pc, #96]	; (802a6f4 <MX_USART3_UART_Init+0xa0>)
 802a694:	2200      	movs	r2, #0
 802a696:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 802a698:	4b16      	ldr	r3, [pc, #88]	; (802a6f4 <MX_USART3_UART_Init+0xa0>)
 802a69a:	2220      	movs	r2, #32
 802a69c:	629a      	str	r2, [r3, #40]	; 0x28
  huart3.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 802a69e:	4b15      	ldr	r3, [pc, #84]	; (802a6f4 <MX_USART3_UART_Init+0xa0>)
 802a6a0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 802a6a4:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_UART_Init(&huart3) != HAL_OK)
 802a6a6:	4813      	ldr	r0, [pc, #76]	; (802a6f4 <MX_USART3_UART_Init+0xa0>)
 802a6a8:	f00a fbb0 	bl	8034e0c <HAL_UART_Init>
 802a6ac:	4603      	mov	r3, r0
 802a6ae:	2b00      	cmp	r3, #0
 802a6b0:	d001      	beq.n	802a6b6 <MX_USART3_UART_Init+0x62>
  {
    Error_Handler();
 802a6b2:	f7ff f9cb 	bl	8029a4c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 802a6b6:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 802a6ba:	480e      	ldr	r0, [pc, #56]	; (802a6f4 <MX_USART3_UART_Init+0xa0>)
 802a6bc:	f00d f8fc 	bl	80378b8 <HAL_UARTEx_SetTxFifoThreshold>
 802a6c0:	4603      	mov	r3, r0
 802a6c2:	2b00      	cmp	r3, #0
 802a6c4:	d001      	beq.n	802a6ca <MX_USART3_UART_Init+0x76>
  {
    Error_Handler();
 802a6c6:	f7ff f9c1 	bl	8029a4c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 802a6ca:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 802a6ce:	4809      	ldr	r0, [pc, #36]	; (802a6f4 <MX_USART3_UART_Init+0xa0>)
 802a6d0:	f00d f930 	bl	8037934 <HAL_UARTEx_SetRxFifoThreshold>
 802a6d4:	4603      	mov	r3, r0
 802a6d6:	2b00      	cmp	r3, #0
 802a6d8:	d001      	beq.n	802a6de <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 802a6da:	f7ff f9b7 	bl	8029a4c <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart3) != HAL_OK)
 802a6de:	4805      	ldr	r0, [pc, #20]	; (802a6f4 <MX_USART3_UART_Init+0xa0>)
 802a6e0:	f00d f876 	bl	80377d0 <HAL_UARTEx_EnableFifoMode>
 802a6e4:	4603      	mov	r3, r0
 802a6e6:	2b00      	cmp	r3, #0
 802a6e8:	d001      	beq.n	802a6ee <MX_USART3_UART_Init+0x9a>
  {
    Error_Handler();
 802a6ea:	f7ff f9af 	bl	8029a4c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 802a6ee:	bf00      	nop
 802a6f0:	bd80      	pop	{r7, pc}
 802a6f2:	bf00      	nop
 802a6f4:	24024b34 	.word	0x24024b34
 802a6f8:	40004800 	.word	0x40004800
 802a6fc:	001312d0 	.word	0x001312d0

0802a700 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 802a700:	b580      	push	{r7, lr}
 802a702:	b0c0      	sub	sp, #256	; 0x100
 802a704:	af00      	add	r7, sp, #0
 802a706:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802a708:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 802a70c:	2200      	movs	r2, #0
 802a70e:	601a      	str	r2, [r3, #0]
 802a710:	605a      	str	r2, [r3, #4]
 802a712:	609a      	str	r2, [r3, #8]
 802a714:	60da      	str	r2, [r3, #12]
 802a716:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 802a718:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802a71c:	22bc      	movs	r2, #188	; 0xbc
 802a71e:	2100      	movs	r1, #0
 802a720:	4618      	mov	r0, r3
 802a722:	f011 fb55 	bl	803bdd0 <memset>
  if(uartHandle->Instance==UART4)
 802a726:	687b      	ldr	r3, [r7, #4]
 802a728:	681b      	ldr	r3, [r3, #0]
 802a72a:	4ac2      	ldr	r2, [pc, #776]	; (802aa34 <HAL_UART_MspInit+0x334>)
 802a72c:	4293      	cmp	r3, r2
 802a72e:	d14a      	bne.n	802a7c6 <HAL_UART_MspInit+0xc6>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 802a730:	2302      	movs	r3, #2
 802a732:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 802a734:	2300      	movs	r3, #0
 802a736:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 802a73a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802a73e:	4618      	mov	r0, r3
 802a740:	f007 f9dc 	bl	8031afc <HAL_RCCEx_PeriphCLKConfig>
 802a744:	4603      	mov	r3, r0
 802a746:	2b00      	cmp	r3, #0
 802a748:	d001      	beq.n	802a74e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 802a74a:	f7ff f97f 	bl	8029a4c <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 802a74e:	4bba      	ldr	r3, [pc, #744]	; (802aa38 <HAL_UART_MspInit+0x338>)
 802a750:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802a754:	4ab8      	ldr	r2, [pc, #736]	; (802aa38 <HAL_UART_MspInit+0x338>)
 802a756:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 802a75a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 802a75e:	4bb6      	ldr	r3, [pc, #728]	; (802aa38 <HAL_UART_MspInit+0x338>)
 802a760:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802a764:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 802a768:	62fb      	str	r3, [r7, #44]	; 0x2c
 802a76a:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    __HAL_RCC_GPIOA_CLK_ENABLE();
 802a76c:	4bb2      	ldr	r3, [pc, #712]	; (802aa38 <HAL_UART_MspInit+0x338>)
 802a76e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802a772:	4ab1      	ldr	r2, [pc, #708]	; (802aa38 <HAL_UART_MspInit+0x338>)
 802a774:	f043 0301 	orr.w	r3, r3, #1
 802a778:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802a77c:	4bae      	ldr	r3, [pc, #696]	; (802aa38 <HAL_UART_MspInit+0x338>)
 802a77e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802a782:	f003 0301 	and.w	r3, r3, #1
 802a786:	62bb      	str	r3, [r7, #40]	; 0x28
 802a788:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 802a78a:	2303      	movs	r3, #3
 802a78c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802a790:	2302      	movs	r3, #2
 802a792:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802a796:	2300      	movs	r3, #0
 802a798:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802a79c:	2300      	movs	r3, #0
 802a79e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 802a7a2:	2308      	movs	r3, #8
 802a7a4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802a7a8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 802a7ac:	4619      	mov	r1, r3
 802a7ae:	48a3      	ldr	r0, [pc, #652]	; (802aa3c <HAL_UART_MspInit+0x33c>)
 802a7b0:	f003 fd54 	bl	802e25c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 802a7b4:	2200      	movs	r2, #0
 802a7b6:	2100      	movs	r1, #0
 802a7b8:	2034      	movs	r0, #52	; 0x34
 802a7ba:	f000 fcfc 	bl	802b1b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 802a7be:	2034      	movs	r0, #52	; 0x34
 802a7c0:	f000 fd13 	bl	802b1ea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 802a7c4:	e130      	b.n	802aa28 <HAL_UART_MspInit+0x328>
  else if(uartHandle->Instance==UART7)
 802a7c6:	687b      	ldr	r3, [r7, #4]
 802a7c8:	681b      	ldr	r3, [r3, #0]
 802a7ca:	4a9d      	ldr	r2, [pc, #628]	; (802aa40 <HAL_UART_MspInit+0x340>)
 802a7cc:	4293      	cmp	r3, r2
 802a7ce:	d143      	bne.n	802a858 <HAL_UART_MspInit+0x158>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 802a7d0:	2302      	movs	r3, #2
 802a7d2:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 802a7d4:	2300      	movs	r3, #0
 802a7d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 802a7da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802a7de:	4618      	mov	r0, r3
 802a7e0:	f007 f98c 	bl	8031afc <HAL_RCCEx_PeriphCLKConfig>
 802a7e4:	4603      	mov	r3, r0
 802a7e6:	2b00      	cmp	r3, #0
 802a7e8:	d001      	beq.n	802a7ee <HAL_UART_MspInit+0xee>
      Error_Handler();
 802a7ea:	f7ff f92f 	bl	8029a4c <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 802a7ee:	4b92      	ldr	r3, [pc, #584]	; (802aa38 <HAL_UART_MspInit+0x338>)
 802a7f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802a7f4:	4a90      	ldr	r2, [pc, #576]	; (802aa38 <HAL_UART_MspInit+0x338>)
 802a7f6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802a7fa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 802a7fe:	4b8e      	ldr	r3, [pc, #568]	; (802aa38 <HAL_UART_MspInit+0x338>)
 802a800:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802a804:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 802a808:	627b      	str	r3, [r7, #36]	; 0x24
 802a80a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 802a80c:	4b8a      	ldr	r3, [pc, #552]	; (802aa38 <HAL_UART_MspInit+0x338>)
 802a80e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802a812:	4a89      	ldr	r2, [pc, #548]	; (802aa38 <HAL_UART_MspInit+0x338>)
 802a814:	f043 0310 	orr.w	r3, r3, #16
 802a818:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802a81c:	4b86      	ldr	r3, [pc, #536]	; (802aa38 <HAL_UART_MspInit+0x338>)
 802a81e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802a822:	f003 0310 	and.w	r3, r3, #16
 802a826:	623b      	str	r3, [r7, #32]
 802a828:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 802a82a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 802a82e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802a832:	2302      	movs	r3, #2
 802a834:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802a838:	2300      	movs	r3, #0
 802a83a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802a83e:	2300      	movs	r3, #0
 802a840:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 802a844:	2307      	movs	r3, #7
 802a846:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 802a84a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 802a84e:	4619      	mov	r1, r3
 802a850:	487c      	ldr	r0, [pc, #496]	; (802aa44 <HAL_UART_MspInit+0x344>)
 802a852:	f003 fd03 	bl	802e25c <HAL_GPIO_Init>
}
 802a856:	e0e7      	b.n	802aa28 <HAL_UART_MspInit+0x328>
  else if(uartHandle->Instance==UART8)
 802a858:	687b      	ldr	r3, [r7, #4]
 802a85a:	681b      	ldr	r3, [r3, #0]
 802a85c:	4a7a      	ldr	r2, [pc, #488]	; (802aa48 <HAL_UART_MspInit+0x348>)
 802a85e:	4293      	cmp	r3, r2
 802a860:	d14a      	bne.n	802a8f8 <HAL_UART_MspInit+0x1f8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 802a862:	2302      	movs	r3, #2
 802a864:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 802a866:	2300      	movs	r3, #0
 802a868:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 802a86c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802a870:	4618      	mov	r0, r3
 802a872:	f007 f943 	bl	8031afc <HAL_RCCEx_PeriphCLKConfig>
 802a876:	4603      	mov	r3, r0
 802a878:	2b00      	cmp	r3, #0
 802a87a:	d001      	beq.n	802a880 <HAL_UART_MspInit+0x180>
      Error_Handler();
 802a87c:	f7ff f8e6 	bl	8029a4c <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 802a880:	4b6d      	ldr	r3, [pc, #436]	; (802aa38 <HAL_UART_MspInit+0x338>)
 802a882:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802a886:	4a6c      	ldr	r2, [pc, #432]	; (802aa38 <HAL_UART_MspInit+0x338>)
 802a888:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802a88c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 802a890:	4b69      	ldr	r3, [pc, #420]	; (802aa38 <HAL_UART_MspInit+0x338>)
 802a892:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802a896:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802a89a:	61fb      	str	r3, [r7, #28]
 802a89c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 802a89e:	4b66      	ldr	r3, [pc, #408]	; (802aa38 <HAL_UART_MspInit+0x338>)
 802a8a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802a8a4:	4a64      	ldr	r2, [pc, #400]	; (802aa38 <HAL_UART_MspInit+0x338>)
 802a8a6:	f043 0310 	orr.w	r3, r3, #16
 802a8aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802a8ae:	4b62      	ldr	r3, [pc, #392]	; (802aa38 <HAL_UART_MspInit+0x338>)
 802a8b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802a8b4:	f003 0310 	and.w	r3, r3, #16
 802a8b8:	61bb      	str	r3, [r7, #24]
 802a8ba:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 802a8bc:	2303      	movs	r3, #3
 802a8be:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802a8c2:	2302      	movs	r3, #2
 802a8c4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802a8c8:	2300      	movs	r3, #0
 802a8ca:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802a8ce:	2300      	movs	r3, #0
 802a8d0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 802a8d4:	2308      	movs	r3, #8
 802a8d6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 802a8da:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 802a8de:	4619      	mov	r1, r3
 802a8e0:	4858      	ldr	r0, [pc, #352]	; (802aa44 <HAL_UART_MspInit+0x344>)
 802a8e2:	f003 fcbb 	bl	802e25c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART8_IRQn, 2, 0);
 802a8e6:	2200      	movs	r2, #0
 802a8e8:	2102      	movs	r1, #2
 802a8ea:	2053      	movs	r0, #83	; 0x53
 802a8ec:	f000 fc63 	bl	802b1b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 802a8f0:	2053      	movs	r0, #83	; 0x53
 802a8f2:	f000 fc7a 	bl	802b1ea <HAL_NVIC_EnableIRQ>
}
 802a8f6:	e097      	b.n	802aa28 <HAL_UART_MspInit+0x328>
  else if(uartHandle->Instance==USART2)
 802a8f8:	687b      	ldr	r3, [r7, #4]
 802a8fa:	681b      	ldr	r3, [r3, #0]
 802a8fc:	4a53      	ldr	r2, [pc, #332]	; (802aa4c <HAL_UART_MspInit+0x34c>)
 802a8fe:	4293      	cmp	r3, r2
 802a900:	d142      	bne.n	802a988 <HAL_UART_MspInit+0x288>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 802a902:	2302      	movs	r3, #2
 802a904:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 802a906:	2300      	movs	r3, #0
 802a908:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 802a90c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802a910:	4618      	mov	r0, r3
 802a912:	f007 f8f3 	bl	8031afc <HAL_RCCEx_PeriphCLKConfig>
 802a916:	4603      	mov	r3, r0
 802a918:	2b00      	cmp	r3, #0
 802a91a:	d001      	beq.n	802a920 <HAL_UART_MspInit+0x220>
      Error_Handler();
 802a91c:	f7ff f896 	bl	8029a4c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 802a920:	4b45      	ldr	r3, [pc, #276]	; (802aa38 <HAL_UART_MspInit+0x338>)
 802a922:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802a926:	4a44      	ldr	r2, [pc, #272]	; (802aa38 <HAL_UART_MspInit+0x338>)
 802a928:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 802a92c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 802a930:	4b41      	ldr	r3, [pc, #260]	; (802aa38 <HAL_UART_MspInit+0x338>)
 802a932:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802a936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802a93a:	617b      	str	r3, [r7, #20]
 802a93c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 802a93e:	4b3e      	ldr	r3, [pc, #248]	; (802aa38 <HAL_UART_MspInit+0x338>)
 802a940:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802a944:	4a3c      	ldr	r2, [pc, #240]	; (802aa38 <HAL_UART_MspInit+0x338>)
 802a946:	f043 0301 	orr.w	r3, r3, #1
 802a94a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802a94e:	4b3a      	ldr	r3, [pc, #232]	; (802aa38 <HAL_UART_MspInit+0x338>)
 802a950:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802a954:	f003 0301 	and.w	r3, r3, #1
 802a958:	613b      	str	r3, [r7, #16]
 802a95a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 802a95c:	230c      	movs	r3, #12
 802a95e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802a962:	2302      	movs	r3, #2
 802a964:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802a968:	2300      	movs	r3, #0
 802a96a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802a96e:	2300      	movs	r3, #0
 802a970:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 802a974:	2307      	movs	r3, #7
 802a976:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802a97a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 802a97e:	4619      	mov	r1, r3
 802a980:	482e      	ldr	r0, [pc, #184]	; (802aa3c <HAL_UART_MspInit+0x33c>)
 802a982:	f003 fc6b 	bl	802e25c <HAL_GPIO_Init>
}
 802a986:	e04f      	b.n	802aa28 <HAL_UART_MspInit+0x328>
  else if(uartHandle->Instance==USART3)
 802a988:	687b      	ldr	r3, [r7, #4]
 802a98a:	681b      	ldr	r3, [r3, #0]
 802a98c:	4a30      	ldr	r2, [pc, #192]	; (802aa50 <HAL_UART_MspInit+0x350>)
 802a98e:	4293      	cmp	r3, r2
 802a990:	d14a      	bne.n	802aa28 <HAL_UART_MspInit+0x328>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 802a992:	2302      	movs	r3, #2
 802a994:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 802a996:	2300      	movs	r3, #0
 802a998:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 802a99c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802a9a0:	4618      	mov	r0, r3
 802a9a2:	f007 f8ab 	bl	8031afc <HAL_RCCEx_PeriphCLKConfig>
 802a9a6:	4603      	mov	r3, r0
 802a9a8:	2b00      	cmp	r3, #0
 802a9aa:	d001      	beq.n	802a9b0 <HAL_UART_MspInit+0x2b0>
      Error_Handler();
 802a9ac:	f7ff f84e 	bl	8029a4c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 802a9b0:	4b21      	ldr	r3, [pc, #132]	; (802aa38 <HAL_UART_MspInit+0x338>)
 802a9b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802a9b6:	4a20      	ldr	r2, [pc, #128]	; (802aa38 <HAL_UART_MspInit+0x338>)
 802a9b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 802a9bc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 802a9c0:	4b1d      	ldr	r3, [pc, #116]	; (802aa38 <HAL_UART_MspInit+0x338>)
 802a9c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802a9c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 802a9ca:	60fb      	str	r3, [r7, #12]
 802a9cc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 802a9ce:	4b1a      	ldr	r3, [pc, #104]	; (802aa38 <HAL_UART_MspInit+0x338>)
 802a9d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802a9d4:	4a18      	ldr	r2, [pc, #96]	; (802aa38 <HAL_UART_MspInit+0x338>)
 802a9d6:	f043 0308 	orr.w	r3, r3, #8
 802a9da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802a9de:	4b16      	ldr	r3, [pc, #88]	; (802aa38 <HAL_UART_MspInit+0x338>)
 802a9e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802a9e4:	f003 0308 	and.w	r3, r3, #8
 802a9e8:	60bb      	str	r3, [r7, #8]
 802a9ea:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 802a9ec:	f44f 7340 	mov.w	r3, #768	; 0x300
 802a9f0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802a9f4:	2302      	movs	r3, #2
 802a9f6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802a9fa:	2300      	movs	r3, #0
 802a9fc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802aa00:	2300      	movs	r3, #0
 802aa02:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 802aa06:	2307      	movs	r3, #7
 802aa08:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 802aa0c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 802aa10:	4619      	mov	r1, r3
 802aa12:	4810      	ldr	r0, [pc, #64]	; (802aa54 <HAL_UART_MspInit+0x354>)
 802aa14:	f003 fc22 	bl	802e25c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 802aa18:	2200      	movs	r2, #0
 802aa1a:	2100      	movs	r1, #0
 802aa1c:	2027      	movs	r0, #39	; 0x27
 802aa1e:	f000 fbca 	bl	802b1b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 802aa22:	2027      	movs	r0, #39	; 0x27
 802aa24:	f000 fbe1 	bl	802b1ea <HAL_NVIC_EnableIRQ>
}
 802aa28:	bf00      	nop
 802aa2a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 802aa2e:	46bd      	mov	sp, r7
 802aa30:	bd80      	pop	{r7, pc}
 802aa32:	bf00      	nop
 802aa34:	40004c00 	.word	0x40004c00
 802aa38:	58024400 	.word	0x58024400
 802aa3c:	58020000 	.word	0x58020000
 802aa40:	40007800 	.word	0x40007800
 802aa44:	58021000 	.word	0x58021000
 802aa48:	40007c00 	.word	0x40007c00
 802aa4c:	40004400 	.word	0x40004400
 802aa50:	40004800 	.word	0x40004800
 802aa54:	58020c00 	.word	0x58020c00

0802aa58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 802aa58:	f8df d034 	ldr.w	sp, [pc, #52]	; 802aa90 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 802aa5c:	f7ff fae2 	bl	802a024 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 802aa60:	480c      	ldr	r0, [pc, #48]	; (802aa94 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 802aa62:	490d      	ldr	r1, [pc, #52]	; (802aa98 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 802aa64:	4a0d      	ldr	r2, [pc, #52]	; (802aa9c <LoopFillZerobss+0x1a>)
  movs r3, #0
 802aa66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 802aa68:	e002      	b.n	802aa70 <LoopCopyDataInit>

0802aa6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 802aa6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 802aa6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 802aa6e:	3304      	adds	r3, #4

0802aa70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 802aa70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 802aa72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 802aa74:	d3f9      	bcc.n	802aa6a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 802aa76:	4a0a      	ldr	r2, [pc, #40]	; (802aaa0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 802aa78:	4c0a      	ldr	r4, [pc, #40]	; (802aaa4 <LoopFillZerobss+0x22>)
  movs r3, #0
 802aa7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 802aa7c:	e001      	b.n	802aa82 <LoopFillZerobss>

0802aa7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 802aa7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 802aa80:	3204      	adds	r2, #4

0802aa82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 802aa82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 802aa84:	d3fb      	bcc.n	802aa7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 802aa86:	f011 f947 	bl	803bd18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 802aa8a:	f7fe fe37 	bl	80296fc <main>
  bx  lr
 802aa8e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 802aa90:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 802aa94:	24000000 	.word	0x24000000
  ldr r1, =_edata
 802aa98:	24000168 	.word	0x24000168
  ldr r2, =_sidata
 802aa9c:	08058574 	.word	0x08058574
  ldr r2, =_sbss
 802aaa0:	24000168 	.word	0x24000168
  ldr r4, =_ebss
 802aaa4:	240267e8 	.word	0x240267e8

0802aaa8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 802aaa8:	e7fe      	b.n	802aaa8 <ADC3_IRQHandler>
	...

0802aaac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 802aaac:	b580      	push	{r7, lr}
 802aaae:	b082      	sub	sp, #8
 802aab0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 802aab2:	2003      	movs	r0, #3
 802aab4:	f000 fb74 	bl	802b1a0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 802aab8:	f006 fe4a 	bl	8031750 <HAL_RCC_GetSysClockFreq>
 802aabc:	4602      	mov	r2, r0
 802aabe:	4b15      	ldr	r3, [pc, #84]	; (802ab14 <HAL_Init+0x68>)
 802aac0:	699b      	ldr	r3, [r3, #24]
 802aac2:	0a1b      	lsrs	r3, r3, #8
 802aac4:	f003 030f 	and.w	r3, r3, #15
 802aac8:	4913      	ldr	r1, [pc, #76]	; (802ab18 <HAL_Init+0x6c>)
 802aaca:	5ccb      	ldrb	r3, [r1, r3]
 802aacc:	f003 031f 	and.w	r3, r3, #31
 802aad0:	fa22 f303 	lsr.w	r3, r2, r3
 802aad4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 802aad6:	4b0f      	ldr	r3, [pc, #60]	; (802ab14 <HAL_Init+0x68>)
 802aad8:	699b      	ldr	r3, [r3, #24]
 802aada:	f003 030f 	and.w	r3, r3, #15
 802aade:	4a0e      	ldr	r2, [pc, #56]	; (802ab18 <HAL_Init+0x6c>)
 802aae0:	5cd3      	ldrb	r3, [r2, r3]
 802aae2:	f003 031f 	and.w	r3, r3, #31
 802aae6:	687a      	ldr	r2, [r7, #4]
 802aae8:	fa22 f303 	lsr.w	r3, r2, r3
 802aaec:	4a0b      	ldr	r2, [pc, #44]	; (802ab1c <HAL_Init+0x70>)
 802aaee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 802aaf0:	4a0b      	ldr	r2, [pc, #44]	; (802ab20 <HAL_Init+0x74>)
 802aaf2:	687b      	ldr	r3, [r7, #4]
 802aaf4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 802aaf6:	200f      	movs	r0, #15
 802aaf8:	f000 f814 	bl	802ab24 <HAL_InitTick>
 802aafc:	4603      	mov	r3, r0
 802aafe:	2b00      	cmp	r3, #0
 802ab00:	d001      	beq.n	802ab06 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 802ab02:	2301      	movs	r3, #1
 802ab04:	e002      	b.n	802ab0c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 802ab06:	f7ff f8e3 	bl	8029cd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 802ab0a:	2300      	movs	r3, #0
}
 802ab0c:	4618      	mov	r0, r3
 802ab0e:	3708      	adds	r7, #8
 802ab10:	46bd      	mov	sp, r7
 802ab12:	bd80      	pop	{r7, pc}
 802ab14:	58024400 	.word	0x58024400
 802ab18:	08058448 	.word	0x08058448
 802ab1c:	24000008 	.word	0x24000008
 802ab20:	24000004 	.word	0x24000004

0802ab24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 802ab24:	b580      	push	{r7, lr}
 802ab26:	b082      	sub	sp, #8
 802ab28:	af00      	add	r7, sp, #0
 802ab2a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 802ab2c:	4b15      	ldr	r3, [pc, #84]	; (802ab84 <HAL_InitTick+0x60>)
 802ab2e:	781b      	ldrb	r3, [r3, #0]
 802ab30:	2b00      	cmp	r3, #0
 802ab32:	d101      	bne.n	802ab38 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 802ab34:	2301      	movs	r3, #1
 802ab36:	e021      	b.n	802ab7c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 802ab38:	4b13      	ldr	r3, [pc, #76]	; (802ab88 <HAL_InitTick+0x64>)
 802ab3a:	681a      	ldr	r2, [r3, #0]
 802ab3c:	4b11      	ldr	r3, [pc, #68]	; (802ab84 <HAL_InitTick+0x60>)
 802ab3e:	781b      	ldrb	r3, [r3, #0]
 802ab40:	4619      	mov	r1, r3
 802ab42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 802ab46:	fbb3 f3f1 	udiv	r3, r3, r1
 802ab4a:	fbb2 f3f3 	udiv	r3, r2, r3
 802ab4e:	4618      	mov	r0, r3
 802ab50:	f000 fb59 	bl	802b206 <HAL_SYSTICK_Config>
 802ab54:	4603      	mov	r3, r0
 802ab56:	2b00      	cmp	r3, #0
 802ab58:	d001      	beq.n	802ab5e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 802ab5a:	2301      	movs	r3, #1
 802ab5c:	e00e      	b.n	802ab7c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 802ab5e:	687b      	ldr	r3, [r7, #4]
 802ab60:	2b0f      	cmp	r3, #15
 802ab62:	d80a      	bhi.n	802ab7a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 802ab64:	2200      	movs	r2, #0
 802ab66:	6879      	ldr	r1, [r7, #4]
 802ab68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802ab6c:	f000 fb23 	bl	802b1b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 802ab70:	4a06      	ldr	r2, [pc, #24]	; (802ab8c <HAL_InitTick+0x68>)
 802ab72:	687b      	ldr	r3, [r7, #4]
 802ab74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 802ab76:	2300      	movs	r3, #0
 802ab78:	e000      	b.n	802ab7c <HAL_InitTick+0x58>
    return HAL_ERROR;
 802ab7a:	2301      	movs	r3, #1
}
 802ab7c:	4618      	mov	r0, r3
 802ab7e:	3708      	adds	r7, #8
 802ab80:	46bd      	mov	sp, r7
 802ab82:	bd80      	pop	{r7, pc}
 802ab84:	24000010 	.word	0x24000010
 802ab88:	24000004 	.word	0x24000004
 802ab8c:	2400000c 	.word	0x2400000c

0802ab90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 802ab90:	b480      	push	{r7}
 802ab92:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 802ab94:	4b06      	ldr	r3, [pc, #24]	; (802abb0 <HAL_IncTick+0x20>)
 802ab96:	781b      	ldrb	r3, [r3, #0]
 802ab98:	461a      	mov	r2, r3
 802ab9a:	4b06      	ldr	r3, [pc, #24]	; (802abb4 <HAL_IncTick+0x24>)
 802ab9c:	681b      	ldr	r3, [r3, #0]
 802ab9e:	4413      	add	r3, r2
 802aba0:	4a04      	ldr	r2, [pc, #16]	; (802abb4 <HAL_IncTick+0x24>)
 802aba2:	6013      	str	r3, [r2, #0]
}
 802aba4:	bf00      	nop
 802aba6:	46bd      	mov	sp, r7
 802aba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802abac:	4770      	bx	lr
 802abae:	bf00      	nop
 802abb0:	24000010 	.word	0x24000010
 802abb4:	24024bc4 	.word	0x24024bc4

0802abb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 802abb8:	b480      	push	{r7}
 802abba:	af00      	add	r7, sp, #0
  return uwTick;
 802abbc:	4b03      	ldr	r3, [pc, #12]	; (802abcc <HAL_GetTick+0x14>)
 802abbe:	681b      	ldr	r3, [r3, #0]
}
 802abc0:	4618      	mov	r0, r3
 802abc2:	46bd      	mov	sp, r7
 802abc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802abc8:	4770      	bx	lr
 802abca:	bf00      	nop
 802abcc:	24024bc4 	.word	0x24024bc4

0802abd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 802abd0:	b580      	push	{r7, lr}
 802abd2:	b084      	sub	sp, #16
 802abd4:	af00      	add	r7, sp, #0
 802abd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 802abd8:	f7ff ffee 	bl	802abb8 <HAL_GetTick>
 802abdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 802abde:	687b      	ldr	r3, [r7, #4]
 802abe0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 802abe2:	68fb      	ldr	r3, [r7, #12]
 802abe4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 802abe8:	d005      	beq.n	802abf6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 802abea:	4b0a      	ldr	r3, [pc, #40]	; (802ac14 <HAL_Delay+0x44>)
 802abec:	781b      	ldrb	r3, [r3, #0]
 802abee:	461a      	mov	r2, r3
 802abf0:	68fb      	ldr	r3, [r7, #12]
 802abf2:	4413      	add	r3, r2
 802abf4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 802abf6:	bf00      	nop
 802abf8:	f7ff ffde 	bl	802abb8 <HAL_GetTick>
 802abfc:	4602      	mov	r2, r0
 802abfe:	68bb      	ldr	r3, [r7, #8]
 802ac00:	1ad3      	subs	r3, r2, r3
 802ac02:	68fa      	ldr	r2, [r7, #12]
 802ac04:	429a      	cmp	r2, r3
 802ac06:	d8f7      	bhi.n	802abf8 <HAL_Delay+0x28>
  {
  }
}
 802ac08:	bf00      	nop
 802ac0a:	bf00      	nop
 802ac0c:	3710      	adds	r7, #16
 802ac0e:	46bd      	mov	sp, r7
 802ac10:	bd80      	pop	{r7, pc}
 802ac12:	bf00      	nop
 802ac14:	24000010 	.word	0x24000010

0802ac18 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 802ac18:	b480      	push	{r7}
 802ac1a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 802ac1c:	4b03      	ldr	r3, [pc, #12]	; (802ac2c <HAL_GetREVID+0x14>)
 802ac1e:	681b      	ldr	r3, [r3, #0]
 802ac20:	0c1b      	lsrs	r3, r3, #16
}
 802ac22:	4618      	mov	r0, r3
 802ac24:	46bd      	mov	sp, r7
 802ac26:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ac2a:	4770      	bx	lr
 802ac2c:	5c001000 	.word	0x5c001000

0802ac30 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 802ac30:	b580      	push	{r7, lr}
 802ac32:	b088      	sub	sp, #32
 802ac34:	af00      	add	r7, sp, #0
 802ac36:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr ;
  uint32_t exti_line ;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" is comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 802ac38:	2300      	movs	r3, #0
 802ac3a:	60fb      	str	r3, [r7, #12]

  HAL_StatusTypeDef status = HAL_OK;
 802ac3c:	2300      	movs	r3, #0
 802ac3e:	77fb      	strb	r3, [r7, #31]
  
  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 802ac40:	687b      	ldr	r3, [r7, #4]
 802ac42:	2b00      	cmp	r3, #0
 802ac44:	d102      	bne.n	802ac4c <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 802ac46:	2301      	movs	r3, #1
 802ac48:	77fb      	strb	r3, [r7, #31]
 802ac4a:	e10e      	b.n	802ae6a <HAL_COMP_Init+0x23a>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 802ac4c:	687b      	ldr	r3, [r7, #4]
 802ac4e:	681b      	ldr	r3, [r3, #0]
 802ac50:	681b      	ldr	r3, [r3, #0]
 802ac52:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802ac56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802ac5a:	d102      	bne.n	802ac62 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 802ac5c:	2301      	movs	r3, #1
 802ac5e:	77fb      	strb	r3, [r7, #31]
 802ac60:	e103      	b.n	802ae6a <HAL_COMP_Init+0x23a>
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRCE(hcomp->Init.BlankingSrce)); 
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 802ac62:	687b      	ldr	r3, [r7, #4]
 802ac64:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 802ac68:	b2db      	uxtb	r3, r3
 802ac6a:	2b00      	cmp	r3, #0
 802ac6c:	d109      	bne.n	802ac82 <HAL_COMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 802ac6e:	687b      	ldr	r3, [r7, #4]
 802ac70:	2200      	movs	r2, #0
 802ac72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	  
	  /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 802ac76:	687b      	ldr	r3, [r7, #4]
 802ac78:	2200      	movs	r2, #0
 802ac7a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
	 /* Init the low level hardware */
      HAL_COMP_MspInit(hcomp);
 802ac7c:	6878      	ldr	r0, [r7, #4]
 802ac7e:	f7fe fac3 	bl	8029208 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }
    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN);
 802ac82:	687b      	ldr	r3, [r7, #4]
 802ac84:	681b      	ldr	r3, [r3, #0]
 802ac86:	681b      	ldr	r3, [r3, #0]
 802ac88:	f003 0304 	and.w	r3, r3, #4
 802ac8c:	61bb      	str	r3, [r7, #24]
    /*     Set BLANKING bits according to hcomp->Init.BlankingSrce value       */
    /*     Set HYST bits according to hcomp->Init.Hysteresis value             */
    /*     Set POLARITY bit according to hcomp->Init.OutputPol value           */
    /*     Set POWERMODE bits according to hcomp->Init.Mode value              */
   
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 802ac8e:	687b      	ldr	r3, [r7, #4]
 802ac90:	691a      	ldr	r2, [r3, #16]
              hcomp->Init.NonInvertingInput  |  \
 802ac92:	687b      	ldr	r3, [r7, #4]
 802ac94:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 802ac96:	431a      	orrs	r2, r3
              hcomp->Init.BlankingSrce       |  \
 802ac98:	687b      	ldr	r3, [r7, #4]
 802ac9a:	69db      	ldr	r3, [r3, #28]
              hcomp->Init.NonInvertingInput  |  \
 802ac9c:	431a      	orrs	r2, r3
              hcomp->Init.Hysteresis         |  \
 802ac9e:	687b      	ldr	r3, [r7, #4]
 802aca0:	695b      	ldr	r3, [r3, #20]
              hcomp->Init.BlankingSrce       |  \
 802aca2:	431a      	orrs	r2, r3
              hcomp->Init.OutputPol          |  \
 802aca4:	687b      	ldr	r3, [r7, #4]
 802aca6:	699b      	ldr	r3, [r3, #24]
              hcomp->Init.Hysteresis         |  \
 802aca8:	431a      	orrs	r2, r3
              hcomp->Init.Mode                );
 802acaa:	687b      	ldr	r3, [r7, #4]
 802acac:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 802acae:	4313      	orrs	r3, r2
 802acb0:	617b      	str	r3, [r7, #20]
               COMP_CFGRx_INP2SEL  | COMP_CFGRx_WINMODE  | COMP_CFGRx_POLARITY | COMP_CFGRx_HYST    |
               COMP_CFGRx_BLANKING | COMP_CFGRx_BRGEN    | COMP_CFGRx_SCALEN,
               tmp_csr
              );
#else
    MODIFY_REG(hcomp->Instance->CFGR,
 802acb2:	687b      	ldr	r3, [r7, #4]
 802acb4:	681b      	ldr	r3, [r3, #0]
 802acb6:	681a      	ldr	r2, [r3, #0]
 802acb8:	4b6e      	ldr	r3, [pc, #440]	; (802ae74 <HAL_COMP_Init+0x244>)
 802acba:	4013      	ands	r3, r2
 802acbc:	687a      	ldr	r2, [r7, #4]
 802acbe:	6812      	ldr	r2, [r2, #0]
 802acc0:	6979      	ldr	r1, [r7, #20]
 802acc2:	430b      	orrs	r3, r1
 802acc4:	6013      	str	r3, [r2, #0]
#endif
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 802acc6:	687b      	ldr	r3, [r7, #4]
 802acc8:	685b      	ldr	r3, [r3, #4]
 802acca:	2b10      	cmp	r3, #16
 802accc:	d108      	bne.n	802ace0 <HAL_COMP_Init+0xb0>
    {
      SET_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 802acce:	687b      	ldr	r3, [r7, #4]
 802acd0:	681b      	ldr	r3, [r3, #0]
 802acd2:	681a      	ldr	r2, [r3, #0]
 802acd4:	687b      	ldr	r3, [r7, #4]
 802acd6:	681b      	ldr	r3, [r3, #0]
 802acd8:	f042 0210 	orr.w	r2, r2, #16
 802acdc:	601a      	str	r2, [r3, #0]
 802acde:	e007      	b.n	802acf0 <HAL_COMP_Init+0xc0>
    }
    else
    {
      CLEAR_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 802ace0:	687b      	ldr	r3, [r7, #4]
 802ace2:	681b      	ldr	r3, [r3, #0]
 802ace4:	681a      	ldr	r2, [r3, #0]
 802ace6:	687b      	ldr	r3, [r7, #4]
 802ace8:	681b      	ldr	r3, [r3, #0]
 802acea:	f022 0210 	bic.w	r2, r2, #16
 802acee:	601a      	str	r2, [r3, #0]
    }
    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is enabled for the first time */
    if ((READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN) != 0UL) &&
 802acf0:	687b      	ldr	r3, [r7, #4]
 802acf2:	681b      	ldr	r3, [r3, #0]
 802acf4:	681b      	ldr	r3, [r3, #0]
 802acf6:	f003 0304 	and.w	r3, r3, #4
 802acfa:	2b00      	cmp	r3, #0
 802acfc:	d016      	beq.n	802ad2c <HAL_COMP_Init+0xfc>
 802acfe:	69bb      	ldr	r3, [r7, #24]
 802ad00:	2b00      	cmp	r3, #0
 802ad02:	d013      	beq.n	802ad2c <HAL_COMP_Init+0xfc>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially                  */
      /*       CPU processing cycles.*/

     wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 802ad04:	4b5c      	ldr	r3, [pc, #368]	; (802ae78 <HAL_COMP_Init+0x248>)
 802ad06:	681b      	ldr	r3, [r3, #0]
 802ad08:	099b      	lsrs	r3, r3, #6
 802ad0a:	4a5c      	ldr	r2, [pc, #368]	; (802ae7c <HAL_COMP_Init+0x24c>)
 802ad0c:	fba2 2303 	umull	r2, r3, r2, r3
 802ad10:	099b      	lsrs	r3, r3, #6
 802ad12:	1c5a      	adds	r2, r3, #1
 802ad14:	4613      	mov	r3, r2
 802ad16:	009b      	lsls	r3, r3, #2
 802ad18:	4413      	add	r3, r2
 802ad1a:	009b      	lsls	r3, r3, #2
 802ad1c:	60fb      	str	r3, [r7, #12]

     while(wait_loop_index != 0UL)
 802ad1e:	e002      	b.n	802ad26 <HAL_COMP_Init+0xf6>
     {
       wait_loop_index --;
 802ad20:	68fb      	ldr	r3, [r7, #12]
 802ad22:	3b01      	subs	r3, #1
 802ad24:	60fb      	str	r3, [r7, #12]
     while(wait_loop_index != 0UL)
 802ad26:	68fb      	ldr	r3, [r7, #12]
 802ad28:	2b00      	cmp	r3, #0
 802ad2a:	d1f9      	bne.n	802ad20 <HAL_COMP_Init+0xf0>
     }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 802ad2c:	687b      	ldr	r3, [r7, #4]
 802ad2e:	681b      	ldr	r3, [r3, #0]
 802ad30:	4a53      	ldr	r2, [pc, #332]	; (802ae80 <HAL_COMP_Init+0x250>)
 802ad32:	4293      	cmp	r3, r2
 802ad34:	d102      	bne.n	802ad3c <HAL_COMP_Init+0x10c>
 802ad36:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 802ad3a:	e001      	b.n	802ad40 <HAL_COMP_Init+0x110>
 802ad3c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 802ad40:	613b      	str	r3, [r7, #16]
    
    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL) 
 802ad42:	687b      	ldr	r3, [r7, #4]
 802ad44:	6a1b      	ldr	r3, [r3, #32]
 802ad46:	f003 0303 	and.w	r3, r3, #3
 802ad4a:	2b00      	cmp	r3, #0
 802ad4c:	d06d      	beq.n	802ae2a <HAL_COMP_Init+0x1fa>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 802ad4e:	687b      	ldr	r3, [r7, #4]
 802ad50:	6a1b      	ldr	r3, [r3, #32]
 802ad52:	f003 0310 	and.w	r3, r3, #16
 802ad56:	2b00      	cmp	r3, #0
 802ad58:	d008      	beq.n	802ad6c <HAL_COMP_Init+0x13c>
      {
        SET_BIT(EXTI->RTSR1, exti_line);
 802ad5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802ad5e:	681a      	ldr	r2, [r3, #0]
 802ad60:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802ad64:	693b      	ldr	r3, [r7, #16]
 802ad66:	4313      	orrs	r3, r2
 802ad68:	600b      	str	r3, [r1, #0]
 802ad6a:	e008      	b.n	802ad7e <HAL_COMP_Init+0x14e>
      }
      else
      {
        CLEAR_BIT(EXTI->RTSR1, exti_line);
 802ad6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802ad70:	681a      	ldr	r2, [r3, #0]
 802ad72:	693b      	ldr	r3, [r7, #16]
 802ad74:	43db      	mvns	r3, r3
 802ad76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802ad7a:	4013      	ands	r3, r2
 802ad7c:	600b      	str	r3, [r1, #0]
      }
      
      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 802ad7e:	687b      	ldr	r3, [r7, #4]
 802ad80:	6a1b      	ldr	r3, [r3, #32]
 802ad82:	f003 0320 	and.w	r3, r3, #32
 802ad86:	2b00      	cmp	r3, #0
 802ad88:	d008      	beq.n	802ad9c <HAL_COMP_Init+0x16c>
      {
        SET_BIT(EXTI->FTSR1, exti_line);
 802ad8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802ad8e:	685a      	ldr	r2, [r3, #4]
 802ad90:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802ad94:	693b      	ldr	r3, [r7, #16]
 802ad96:	4313      	orrs	r3, r2
 802ad98:	604b      	str	r3, [r1, #4]
 802ad9a:	e008      	b.n	802adae <HAL_COMP_Init+0x17e>
      }
      else
      {
        CLEAR_BIT(EXTI->FTSR1, exti_line);
 802ad9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802ada0:	685a      	ldr	r2, [r3, #4]
 802ada2:	693b      	ldr	r3, [r7, #16]
 802ada4:	43db      	mvns	r3, r3
 802ada6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802adaa:	4013      	ands	r3, r2
 802adac:	604b      	str	r3, [r1, #4]
      }
     
#if !defined (CORE_CM4)
      /* Clear COMP EXTI pending bit (if any) */
      WRITE_REG(EXTI->PR1, exti_line);
 802adae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 802adb2:	693b      	ldr	r3, [r7, #16]
 802adb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 802adb8:	687b      	ldr	r3, [r7, #4]
 802adba:	6a1b      	ldr	r3, [r3, #32]
 802adbc:	f003 0302 	and.w	r3, r3, #2
 802adc0:	2b00      	cmp	r3, #0
 802adc2:	d00a      	beq.n	802adda <HAL_COMP_Init+0x1aa>
      {
        SET_BIT(EXTI->EMR1, exti_line);
 802adc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802adc8:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 802adcc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802add0:	693b      	ldr	r3, [r7, #16]
 802add2:	4313      	orrs	r3, r2
 802add4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
 802add8:	e00a      	b.n	802adf0 <HAL_COMP_Init+0x1c0>
      }
      else
      {
        CLEAR_BIT(EXTI->EMR1, exti_line);
 802adda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802adde:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 802ade2:	693b      	ldr	r3, [r7, #16]
 802ade4:	43db      	mvns	r3, r3
 802ade6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802adea:	4013      	ands	r3, r2
 802adec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      }
      
       /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 802adf0:	687b      	ldr	r3, [r7, #4]
 802adf2:	6a1b      	ldr	r3, [r3, #32]
 802adf4:	f003 0301 	and.w	r3, r3, #1
 802adf8:	2b00      	cmp	r3, #0
 802adfa:	d00a      	beq.n	802ae12 <HAL_COMP_Init+0x1e2>
      {
        SET_BIT(EXTI->IMR1, exti_line);
 802adfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802ae00:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 802ae04:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802ae08:	693b      	ldr	r3, [r7, #16]
 802ae0a:	4313      	orrs	r3, r2
 802ae0c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
 802ae10:	e021      	b.n	802ae56 <HAL_COMP_Init+0x226>
      }
      else
      {
        CLEAR_BIT(EXTI->IMR1, exti_line);
 802ae12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802ae16:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 802ae1a:	693b      	ldr	r3, [r7, #16]
 802ae1c:	43db      	mvns	r3, r3
 802ae1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802ae22:	4013      	ands	r3, r2
 802ae24:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
 802ae28:	e015      	b.n	802ae56 <HAL_COMP_Init+0x226>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      CLEAR_BIT(EXTI->EMR1, exti_line);
 802ae2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802ae2e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 802ae32:	693b      	ldr	r3, [r7, #16]
 802ae34:	43db      	mvns	r3, r3
 802ae36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802ae3a:	4013      	ands	r3, r2
 802ae3c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      
      /* Disable EXTI interrupt mode */
      CLEAR_BIT(EXTI->IMR1, exti_line);
 802ae40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802ae44:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 802ae48:	693b      	ldr	r3, [r7, #16]
 802ae4a:	43db      	mvns	r3, r3
 802ae4c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802ae50:	4013      	ands	r3, r2
 802ae52:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
    }
#endif
    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 802ae56:	687b      	ldr	r3, [r7, #4]
 802ae58:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 802ae5c:	b2db      	uxtb	r3, r3
 802ae5e:	2b00      	cmp	r3, #0
 802ae60:	d103      	bne.n	802ae6a <HAL_COMP_Init+0x23a>
    {
     
      hcomp->State = HAL_COMP_STATE_READY;
 802ae62:	687b      	ldr	r3, [r7, #4]
 802ae64:	2201      	movs	r2, #1
 802ae66:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
   
  }
  
  return status;
 802ae6a:	7ffb      	ldrb	r3, [r7, #31]
}
 802ae6c:	4618      	mov	r0, r3
 802ae6e:	3720      	adds	r7, #32
 802ae70:	46bd      	mov	sp, r7
 802ae72:	bd80      	pop	{r7, pc}
 802ae74:	f0e8cce1 	.word	0xf0e8cce1
 802ae78:	24000004 	.word	0x24000004
 802ae7c:	053e2d63 	.word	0x053e2d63
 802ae80:	5800380c 	.word	0x5800380c

0802ae84 <HAL_COMP_Start>:
  * @brief  Start the comparator. 
  * @param  hcomp COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{ 
 802ae84:	b480      	push	{r7}
 802ae86:	b085      	sub	sp, #20
 802ae88:	af00      	add	r7, sp, #0
 802ae8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 802ae8c:	2300      	movs	r3, #0
 802ae8e:	60bb      	str	r3, [r7, #8]

  HAL_StatusTypeDef status = HAL_OK;
 802ae90:	2300      	movs	r3, #0
 802ae92:	73fb      	strb	r3, [r7, #15]
  
  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 802ae94:	687b      	ldr	r3, [r7, #4]
 802ae96:	2b00      	cmp	r3, #0
 802ae98:	d102      	bne.n	802aea0 <HAL_COMP_Start+0x1c>
  {
    status = HAL_ERROR;
 802ae9a:	2301      	movs	r3, #1
 802ae9c:	73fb      	strb	r3, [r7, #15]
 802ae9e:	e030      	b.n	802af02 <HAL_COMP_Start+0x7e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 802aea0:	687b      	ldr	r3, [r7, #4]
 802aea2:	681b      	ldr	r3, [r3, #0]
 802aea4:	681b      	ldr	r3, [r3, #0]
 802aea6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802aeaa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802aeae:	d102      	bne.n	802aeb6 <HAL_COMP_Start+0x32>
  {
    status = HAL_ERROR;
 802aeb0:	2301      	movs	r3, #1
 802aeb2:	73fb      	strb	r3, [r7, #15]
 802aeb4:	e025      	b.n	802af02 <HAL_COMP_Start+0x7e>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_READY)
 802aeb6:	687b      	ldr	r3, [r7, #4]
 802aeb8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 802aebc:	b2db      	uxtb	r3, r3
 802aebe:	2b01      	cmp	r3, #1
 802aec0:	d11d      	bne.n	802aefe <HAL_COMP_Start+0x7a>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CFGR, COMP_CFGRx_EN);
 802aec2:	687b      	ldr	r3, [r7, #4]
 802aec4:	681b      	ldr	r3, [r3, #0]
 802aec6:	681a      	ldr	r2, [r3, #0]
 802aec8:	687b      	ldr	r3, [r7, #4]
 802aeca:	681b      	ldr	r3, [r3, #0]
 802aecc:	f042 0201 	orr.w	r2, r2, #1
 802aed0:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 802aed2:	687b      	ldr	r3, [r7, #4]
 802aed4:	2202      	movs	r2, #2
 802aed6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
     /* Delay for COMP startup time */
     /* Wait loop initialization and execution */
     /* Note: Variable divided by 2 to compensate partially    */
     /*       CPU processing cycles.                           */
    
     wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 802aeda:	4b0d      	ldr	r3, [pc, #52]	; (802af10 <HAL_COMP_Start+0x8c>)
 802aedc:	681b      	ldr	r3, [r3, #0]
 802aede:	099b      	lsrs	r3, r3, #6
 802aee0:	4a0c      	ldr	r2, [pc, #48]	; (802af14 <HAL_COMP_Start+0x90>)
 802aee2:	fba2 2303 	umull	r2, r3, r2, r3
 802aee6:	099b      	lsrs	r3, r3, #6
 802aee8:	3301      	adds	r3, #1
 802aeea:	00db      	lsls	r3, r3, #3
 802aeec:	60bb      	str	r3, [r7, #8]
     while(wait_loop_index != 0UL)
 802aeee:	e002      	b.n	802aef6 <HAL_COMP_Start+0x72>
     {
       wait_loop_index--;
 802aef0:	68bb      	ldr	r3, [r7, #8]
 802aef2:	3b01      	subs	r3, #1
 802aef4:	60bb      	str	r3, [r7, #8]
     while(wait_loop_index != 0UL)
 802aef6:	68bb      	ldr	r3, [r7, #8]
 802aef8:	2b00      	cmp	r3, #0
 802aefa:	d1f9      	bne.n	802aef0 <HAL_COMP_Start+0x6c>
 802aefc:	e001      	b.n	802af02 <HAL_COMP_Start+0x7e>
     }      
    }
    else
    {
      status = HAL_ERROR;
 802aefe:	2301      	movs	r3, #1
 802af00:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 802af02:	7bfb      	ldrb	r3, [r7, #15]
}
 802af04:	4618      	mov	r0, r3
 802af06:	3714      	adds	r7, #20
 802af08:	46bd      	mov	sp, r7
 802af0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802af0e:	4770      	bx	lr
 802af10:	24000004 	.word	0x24000004
 802af14:	053e2d63 	.word	0x053e2d63

0802af18 <HAL_COMP_IRQHandler>:
  * @brief  Comparator IRQ Handler. 
  * @param  hcomp COMP handle
  * @retval HAL status
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
 802af18:	b580      	push	{r7, lr}
 802af1a:	b084      	sub	sp, #16
 802af1c:	af00      	add	r7, sp, #0
 802af1e:	6078      	str	r0, [r7, #4]
  /* Get the EXTI line corresponding to the selected COMP instance */
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 802af20:	687b      	ldr	r3, [r7, #4]
 802af22:	681b      	ldr	r3, [r3, #0]
 802af24:	4a33      	ldr	r2, [pc, #204]	; (802aff4 <HAL_COMP_IRQHandler+0xdc>)
 802af26:	4293      	cmp	r3, r2
 802af28:	d102      	bne.n	802af30 <HAL_COMP_IRQHandler+0x18>
 802af2a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 802af2e:	e001      	b.n	802af34 <HAL_COMP_IRQHandler+0x1c>
 802af30:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 802af34:	60fb      	str	r3, [r7, #12]

 
 } 
#else
    /* Check COMP EXTI flag */
    if(READ_BIT(EXTI->PR1, exti_line) != 0UL)
 802af36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802af3a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 802af3e:	68fb      	ldr	r3, [r7, #12]
 802af40:	4013      	ands	r3, r2
 802af42:	2b00      	cmp	r3, #0
 802af44:	d014      	beq.n	802af70 <HAL_COMP_IRQHandler+0x58>
    {    
       /* Check whether comparator is in independent or window mode */
        if(READ_BIT(COMP12_COMMON->CFGR, COMP_CFGRx_WINMODE) != 0UL)
 802af46:	4b2c      	ldr	r3, [pc, #176]	; (802aff8 <HAL_COMP_IRQHandler+0xe0>)
 802af48:	681b      	ldr	r3, [r3, #0]
 802af4a:	f003 0310 	and.w	r3, r3, #16
 802af4e:	2b00      	cmp	r3, #0
 802af50:	d006      	beq.n	802af60 <HAL_COMP_IRQHandler+0x48>
          /* Note: Pair of comparators in window mode can both trig IRQ when      */
          /*       input voltage is changing from "out of window" area            */
          /*       (low or high ) to the other "out of window" area (high or low).*/
          /*       Both flags must be cleared to call comparator trigger          */
          /*       callback is called once.                                       */
          WRITE_REG(EXTI->PR1, (COMP_EXTI_LINE_COMP1 | COMP_EXTI_LINE_COMP2));
 802af52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802af56:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 802af5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 802af5e:	e004      	b.n	802af6a <HAL_COMP_IRQHandler+0x52>
        }
        else
        {
          /* Clear COMP EXTI line pending bit */
          WRITE_REG(EXTI->PR1, exti_line);
 802af60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 802af64:	68fb      	ldr	r3, [r7, #12]
 802af66:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 802af6a:	6878      	ldr	r0, [r7, #4]
 802af6c:	f7fe fcfc 	bl	8029968 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }
#endif /*DUAL_CORE*/

   /* Get COMP interrupt source */
  if (__HAL_COMP_GET_IT_SOURCE(hcomp, COMP_IT_EN) != RESET)
 802af70:	687b      	ldr	r3, [r7, #4]
 802af72:	681b      	ldr	r3, [r3, #0]
 802af74:	681b      	ldr	r3, [r3, #0]
 802af76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802af7a:	2b40      	cmp	r3, #64	; 0x40
 802af7c:	d136      	bne.n	802afec <HAL_COMP_IRQHandler+0xd4>
  {

    if((__HAL_COMP_GET_FLAG( COMP_FLAG_C1I)) != 0UL)
 802af7e:	4b1f      	ldr	r3, [pc, #124]	; (802affc <HAL_COMP_IRQHandler+0xe4>)
 802af80:	681b      	ldr	r3, [r3, #0]
 802af82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 802af86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802af8a:	d101      	bne.n	802af90 <HAL_COMP_IRQHandler+0x78>
 802af8c:	2301      	movs	r3, #1
 802af8e:	e000      	b.n	802af92 <HAL_COMP_IRQHandler+0x7a>
 802af90:	2300      	movs	r3, #0
 802af92:	2b00      	cmp	r3, #0
 802af94:	d00b      	beq.n	802afae <HAL_COMP_IRQHandler+0x96>
    {
      /* Clear the COMP channel 1 interrupt flag */
         __HAL_COMP_CLEAR_C1IFLAG();
 802af96:	4b19      	ldr	r3, [pc, #100]	; (802affc <HAL_COMP_IRQHandler+0xe4>)
 802af98:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 802af9c:	605a      	str	r2, [r3, #4]
   
      /* Disable COMP interrupt */
       __HAL_COMP_DISABLE_IT(hcomp,COMP_IT_EN);
 802af9e:	687b      	ldr	r3, [r7, #4]
 802afa0:	681b      	ldr	r3, [r3, #0]
 802afa2:	681a      	ldr	r2, [r3, #0]
 802afa4:	687b      	ldr	r3, [r7, #4]
 802afa6:	681b      	ldr	r3, [r3, #0]
 802afa8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802afac:	601a      	str	r2, [r3, #0]
   
    }
    if((__HAL_COMP_GET_FLAG( COMP_FLAG_C2I)) != 0UL)
 802afae:	4b13      	ldr	r3, [pc, #76]	; (802affc <HAL_COMP_IRQHandler+0xe4>)
 802afb0:	681b      	ldr	r3, [r3, #0]
 802afb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802afb6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 802afba:	d101      	bne.n	802afc0 <HAL_COMP_IRQHandler+0xa8>
 802afbc:	2301      	movs	r3, #1
 802afbe:	e000      	b.n	802afc2 <HAL_COMP_IRQHandler+0xaa>
 802afc0:	2300      	movs	r3, #0
 802afc2:	2b00      	cmp	r3, #0
 802afc4:	d00b      	beq.n	802afde <HAL_COMP_IRQHandler+0xc6>
    {
     /* Clear the COMP channel 2 interrupt flag */
       __HAL_COMP_CLEAR_C2IFLAG();
 802afc6:	4b0d      	ldr	r3, [pc, #52]	; (802affc <HAL_COMP_IRQHandler+0xe4>)
 802afc8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 802afcc:	605a      	str	r2, [r3, #4]
   
     /* Disable COMP interrupt */
     __HAL_COMP_DISABLE_IT(hcomp,COMP_IT_EN);
 802afce:	687b      	ldr	r3, [r7, #4]
 802afd0:	681b      	ldr	r3, [r3, #0]
 802afd2:	681a      	ldr	r2, [r3, #0]
 802afd4:	687b      	ldr	r3, [r7, #4]
 802afd6:	681b      	ldr	r3, [r3, #0]
 802afd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802afdc:	601a      	str	r2, [r3, #0]
       
    }

    /* Change COMP state */
    hcomp->State = HAL_COMP_STATE_READY;
 802afde:	687b      	ldr	r3, [r7, #4]
 802afe0:	2201      	movs	r2, #1
 802afe2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 802afe6:	6878      	ldr	r0, [r7, #4]
 802afe8:	f7fe fcbe 	bl	8029968 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
  }    
 

}
 802afec:	bf00      	nop
 802afee:	3710      	adds	r7, #16
 802aff0:	46bd      	mov	sp, r7
 802aff2:	bd80      	pop	{r7, pc}
 802aff4:	5800380c 	.word	0x5800380c
 802aff8:	58003810 	.word	0x58003810
 802affc:	58003800 	.word	0x58003800

0802b000 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 802b000:	b480      	push	{r7}
 802b002:	b085      	sub	sp, #20
 802b004:	af00      	add	r7, sp, #0
 802b006:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 802b008:	687b      	ldr	r3, [r7, #4]
 802b00a:	f003 0307 	and.w	r3, r3, #7
 802b00e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 802b010:	4b0b      	ldr	r3, [pc, #44]	; (802b040 <__NVIC_SetPriorityGrouping+0x40>)
 802b012:	68db      	ldr	r3, [r3, #12]
 802b014:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 802b016:	68ba      	ldr	r2, [r7, #8]
 802b018:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 802b01c:	4013      	ands	r3, r2
 802b01e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 802b020:	68fb      	ldr	r3, [r7, #12]
 802b022:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 802b024:	68bb      	ldr	r3, [r7, #8]
 802b026:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 802b028:	4b06      	ldr	r3, [pc, #24]	; (802b044 <__NVIC_SetPriorityGrouping+0x44>)
 802b02a:	4313      	orrs	r3, r2
 802b02c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 802b02e:	4a04      	ldr	r2, [pc, #16]	; (802b040 <__NVIC_SetPriorityGrouping+0x40>)
 802b030:	68bb      	ldr	r3, [r7, #8]
 802b032:	60d3      	str	r3, [r2, #12]
}
 802b034:	bf00      	nop
 802b036:	3714      	adds	r7, #20
 802b038:	46bd      	mov	sp, r7
 802b03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b03e:	4770      	bx	lr
 802b040:	e000ed00 	.word	0xe000ed00
 802b044:	05fa0000 	.word	0x05fa0000

0802b048 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 802b048:	b480      	push	{r7}
 802b04a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 802b04c:	4b04      	ldr	r3, [pc, #16]	; (802b060 <__NVIC_GetPriorityGrouping+0x18>)
 802b04e:	68db      	ldr	r3, [r3, #12]
 802b050:	0a1b      	lsrs	r3, r3, #8
 802b052:	f003 0307 	and.w	r3, r3, #7
}
 802b056:	4618      	mov	r0, r3
 802b058:	46bd      	mov	sp, r7
 802b05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b05e:	4770      	bx	lr
 802b060:	e000ed00 	.word	0xe000ed00

0802b064 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 802b064:	b480      	push	{r7}
 802b066:	b083      	sub	sp, #12
 802b068:	af00      	add	r7, sp, #0
 802b06a:	4603      	mov	r3, r0
 802b06c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 802b06e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 802b072:	2b00      	cmp	r3, #0
 802b074:	db0b      	blt.n	802b08e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 802b076:	88fb      	ldrh	r3, [r7, #6]
 802b078:	f003 021f 	and.w	r2, r3, #31
 802b07c:	4907      	ldr	r1, [pc, #28]	; (802b09c <__NVIC_EnableIRQ+0x38>)
 802b07e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 802b082:	095b      	lsrs	r3, r3, #5
 802b084:	2001      	movs	r0, #1
 802b086:	fa00 f202 	lsl.w	r2, r0, r2
 802b08a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 802b08e:	bf00      	nop
 802b090:	370c      	adds	r7, #12
 802b092:	46bd      	mov	sp, r7
 802b094:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b098:	4770      	bx	lr
 802b09a:	bf00      	nop
 802b09c:	e000e100 	.word	0xe000e100

0802b0a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 802b0a0:	b480      	push	{r7}
 802b0a2:	b083      	sub	sp, #12
 802b0a4:	af00      	add	r7, sp, #0
 802b0a6:	4603      	mov	r3, r0
 802b0a8:	6039      	str	r1, [r7, #0]
 802b0aa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 802b0ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 802b0b0:	2b00      	cmp	r3, #0
 802b0b2:	db0a      	blt.n	802b0ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 802b0b4:	683b      	ldr	r3, [r7, #0]
 802b0b6:	b2da      	uxtb	r2, r3
 802b0b8:	490c      	ldr	r1, [pc, #48]	; (802b0ec <__NVIC_SetPriority+0x4c>)
 802b0ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 802b0be:	0112      	lsls	r2, r2, #4
 802b0c0:	b2d2      	uxtb	r2, r2
 802b0c2:	440b      	add	r3, r1
 802b0c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 802b0c8:	e00a      	b.n	802b0e0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 802b0ca:	683b      	ldr	r3, [r7, #0]
 802b0cc:	b2da      	uxtb	r2, r3
 802b0ce:	4908      	ldr	r1, [pc, #32]	; (802b0f0 <__NVIC_SetPriority+0x50>)
 802b0d0:	88fb      	ldrh	r3, [r7, #6]
 802b0d2:	f003 030f 	and.w	r3, r3, #15
 802b0d6:	3b04      	subs	r3, #4
 802b0d8:	0112      	lsls	r2, r2, #4
 802b0da:	b2d2      	uxtb	r2, r2
 802b0dc:	440b      	add	r3, r1
 802b0de:	761a      	strb	r2, [r3, #24]
}
 802b0e0:	bf00      	nop
 802b0e2:	370c      	adds	r7, #12
 802b0e4:	46bd      	mov	sp, r7
 802b0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b0ea:	4770      	bx	lr
 802b0ec:	e000e100 	.word	0xe000e100
 802b0f0:	e000ed00 	.word	0xe000ed00

0802b0f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 802b0f4:	b480      	push	{r7}
 802b0f6:	b089      	sub	sp, #36	; 0x24
 802b0f8:	af00      	add	r7, sp, #0
 802b0fa:	60f8      	str	r0, [r7, #12]
 802b0fc:	60b9      	str	r1, [r7, #8]
 802b0fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 802b100:	68fb      	ldr	r3, [r7, #12]
 802b102:	f003 0307 	and.w	r3, r3, #7
 802b106:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 802b108:	69fb      	ldr	r3, [r7, #28]
 802b10a:	f1c3 0307 	rsb	r3, r3, #7
 802b10e:	2b04      	cmp	r3, #4
 802b110:	bf28      	it	cs
 802b112:	2304      	movcs	r3, #4
 802b114:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 802b116:	69fb      	ldr	r3, [r7, #28]
 802b118:	3304      	adds	r3, #4
 802b11a:	2b06      	cmp	r3, #6
 802b11c:	d902      	bls.n	802b124 <NVIC_EncodePriority+0x30>
 802b11e:	69fb      	ldr	r3, [r7, #28]
 802b120:	3b03      	subs	r3, #3
 802b122:	e000      	b.n	802b126 <NVIC_EncodePriority+0x32>
 802b124:	2300      	movs	r3, #0
 802b126:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 802b128:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802b12c:	69bb      	ldr	r3, [r7, #24]
 802b12e:	fa02 f303 	lsl.w	r3, r2, r3
 802b132:	43da      	mvns	r2, r3
 802b134:	68bb      	ldr	r3, [r7, #8]
 802b136:	401a      	ands	r2, r3
 802b138:	697b      	ldr	r3, [r7, #20]
 802b13a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 802b13c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 802b140:	697b      	ldr	r3, [r7, #20]
 802b142:	fa01 f303 	lsl.w	r3, r1, r3
 802b146:	43d9      	mvns	r1, r3
 802b148:	687b      	ldr	r3, [r7, #4]
 802b14a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 802b14c:	4313      	orrs	r3, r2
         );
}
 802b14e:	4618      	mov	r0, r3
 802b150:	3724      	adds	r7, #36	; 0x24
 802b152:	46bd      	mov	sp, r7
 802b154:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b158:	4770      	bx	lr
	...

0802b15c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 802b15c:	b580      	push	{r7, lr}
 802b15e:	b082      	sub	sp, #8
 802b160:	af00      	add	r7, sp, #0
 802b162:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 802b164:	687b      	ldr	r3, [r7, #4]
 802b166:	3b01      	subs	r3, #1
 802b168:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 802b16c:	d301      	bcc.n	802b172 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 802b16e:	2301      	movs	r3, #1
 802b170:	e00f      	b.n	802b192 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 802b172:	4a0a      	ldr	r2, [pc, #40]	; (802b19c <SysTick_Config+0x40>)
 802b174:	687b      	ldr	r3, [r7, #4]
 802b176:	3b01      	subs	r3, #1
 802b178:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 802b17a:	210f      	movs	r1, #15
 802b17c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802b180:	f7ff ff8e 	bl	802b0a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 802b184:	4b05      	ldr	r3, [pc, #20]	; (802b19c <SysTick_Config+0x40>)
 802b186:	2200      	movs	r2, #0
 802b188:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 802b18a:	4b04      	ldr	r3, [pc, #16]	; (802b19c <SysTick_Config+0x40>)
 802b18c:	2207      	movs	r2, #7
 802b18e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 802b190:	2300      	movs	r3, #0
}
 802b192:	4618      	mov	r0, r3
 802b194:	3708      	adds	r7, #8
 802b196:	46bd      	mov	sp, r7
 802b198:	bd80      	pop	{r7, pc}
 802b19a:	bf00      	nop
 802b19c:	e000e010 	.word	0xe000e010

0802b1a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 802b1a0:	b580      	push	{r7, lr}
 802b1a2:	b082      	sub	sp, #8
 802b1a4:	af00      	add	r7, sp, #0
 802b1a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 802b1a8:	6878      	ldr	r0, [r7, #4]
 802b1aa:	f7ff ff29 	bl	802b000 <__NVIC_SetPriorityGrouping>
}
 802b1ae:	bf00      	nop
 802b1b0:	3708      	adds	r7, #8
 802b1b2:	46bd      	mov	sp, r7
 802b1b4:	bd80      	pop	{r7, pc}

0802b1b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 802b1b6:	b580      	push	{r7, lr}
 802b1b8:	b086      	sub	sp, #24
 802b1ba:	af00      	add	r7, sp, #0
 802b1bc:	4603      	mov	r3, r0
 802b1be:	60b9      	str	r1, [r7, #8]
 802b1c0:	607a      	str	r2, [r7, #4]
 802b1c2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 802b1c4:	f7ff ff40 	bl	802b048 <__NVIC_GetPriorityGrouping>
 802b1c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 802b1ca:	687a      	ldr	r2, [r7, #4]
 802b1cc:	68b9      	ldr	r1, [r7, #8]
 802b1ce:	6978      	ldr	r0, [r7, #20]
 802b1d0:	f7ff ff90 	bl	802b0f4 <NVIC_EncodePriority>
 802b1d4:	4602      	mov	r2, r0
 802b1d6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 802b1da:	4611      	mov	r1, r2
 802b1dc:	4618      	mov	r0, r3
 802b1de:	f7ff ff5f 	bl	802b0a0 <__NVIC_SetPriority>
}
 802b1e2:	bf00      	nop
 802b1e4:	3718      	adds	r7, #24
 802b1e6:	46bd      	mov	sp, r7
 802b1e8:	bd80      	pop	{r7, pc}

0802b1ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 802b1ea:	b580      	push	{r7, lr}
 802b1ec:	b082      	sub	sp, #8
 802b1ee:	af00      	add	r7, sp, #0
 802b1f0:	4603      	mov	r3, r0
 802b1f2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 802b1f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 802b1f8:	4618      	mov	r0, r3
 802b1fa:	f7ff ff33 	bl	802b064 <__NVIC_EnableIRQ>
}
 802b1fe:	bf00      	nop
 802b200:	3708      	adds	r7, #8
 802b202:	46bd      	mov	sp, r7
 802b204:	bd80      	pop	{r7, pc}

0802b206 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 802b206:	b580      	push	{r7, lr}
 802b208:	b082      	sub	sp, #8
 802b20a:	af00      	add	r7, sp, #0
 802b20c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 802b20e:	6878      	ldr	r0, [r7, #4]
 802b210:	f7ff ffa4 	bl	802b15c <SysTick_Config>
 802b214:	4603      	mov	r3, r0
}
 802b216:	4618      	mov	r0, r3
 802b218:	3708      	adds	r7, #8
 802b21a:	46bd      	mov	sp, r7
 802b21c:	bd80      	pop	{r7, pc}

0802b21e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 802b21e:	b580      	push	{r7, lr}
 802b220:	b082      	sub	sp, #8
 802b222:	af00      	add	r7, sp, #0
 802b224:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 802b226:	687b      	ldr	r3, [r7, #4]
 802b228:	2b00      	cmp	r3, #0
 802b22a:	d101      	bne.n	802b230 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 802b22c:	2301      	movs	r3, #1
 802b22e:	e014      	b.n	802b25a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 802b230:	687b      	ldr	r3, [r7, #4]
 802b232:	791b      	ldrb	r3, [r3, #4]
 802b234:	b2db      	uxtb	r3, r3
 802b236:	2b00      	cmp	r3, #0
 802b238:	d105      	bne.n	802b246 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 802b23a:	687b      	ldr	r3, [r7, #4]
 802b23c:	2200      	movs	r2, #0
 802b23e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 802b240:	6878      	ldr	r0, [r7, #4]
 802b242:	f7fe f861 	bl	8029308 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 802b246:	687b      	ldr	r3, [r7, #4]
 802b248:	2202      	movs	r2, #2
 802b24a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 802b24c:	687b      	ldr	r3, [r7, #4]
 802b24e:	2200      	movs	r2, #0
 802b250:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 802b252:	687b      	ldr	r3, [r7, #4]
 802b254:	2201      	movs	r2, #1
 802b256:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 802b258:	2300      	movs	r3, #0
}
 802b25a:	4618      	mov	r0, r3
 802b25c:	3708      	adds	r7, #8
 802b25e:	46bd      	mov	sp, r7
 802b260:	bd80      	pop	{r7, pc}

0802b262 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 802b262:	b480      	push	{r7}
 802b264:	b083      	sub	sp, #12
 802b266:	af00      	add	r7, sp, #0
 802b268:	6078      	str	r0, [r7, #4]
 802b26a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 802b26c:	687b      	ldr	r3, [r7, #4]
 802b26e:	795b      	ldrb	r3, [r3, #5]
 802b270:	2b01      	cmp	r3, #1
 802b272:	d101      	bne.n	802b278 <HAL_DAC_Start+0x16>
 802b274:	2302      	movs	r3, #2
 802b276:	e040      	b.n	802b2fa <HAL_DAC_Start+0x98>
 802b278:	687b      	ldr	r3, [r7, #4]
 802b27a:	2201      	movs	r2, #1
 802b27c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 802b27e:	687b      	ldr	r3, [r7, #4]
 802b280:	2202      	movs	r2, #2
 802b282:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 802b284:	687b      	ldr	r3, [r7, #4]
 802b286:	681b      	ldr	r3, [r3, #0]
 802b288:	6819      	ldr	r1, [r3, #0]
 802b28a:	683b      	ldr	r3, [r7, #0]
 802b28c:	f003 0310 	and.w	r3, r3, #16
 802b290:	2201      	movs	r2, #1
 802b292:	409a      	lsls	r2, r3
 802b294:	687b      	ldr	r3, [r7, #4]
 802b296:	681b      	ldr	r3, [r3, #0]
 802b298:	430a      	orrs	r2, r1
 802b29a:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 802b29c:	683b      	ldr	r3, [r7, #0]
 802b29e:	2b00      	cmp	r3, #0
 802b2a0:	d10f      	bne.n	802b2c2 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 802b2a2:	687b      	ldr	r3, [r7, #4]
 802b2a4:	681b      	ldr	r3, [r3, #0]
 802b2a6:	681b      	ldr	r3, [r3, #0]
 802b2a8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 802b2ac:	2b02      	cmp	r3, #2
 802b2ae:	d11d      	bne.n	802b2ec <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 802b2b0:	687b      	ldr	r3, [r7, #4]
 802b2b2:	681b      	ldr	r3, [r3, #0]
 802b2b4:	685a      	ldr	r2, [r3, #4]
 802b2b6:	687b      	ldr	r3, [r7, #4]
 802b2b8:	681b      	ldr	r3, [r3, #0]
 802b2ba:	f042 0201 	orr.w	r2, r2, #1
 802b2be:	605a      	str	r2, [r3, #4]
 802b2c0:	e014      	b.n	802b2ec <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 802b2c2:	687b      	ldr	r3, [r7, #4]
 802b2c4:	681b      	ldr	r3, [r3, #0]
 802b2c6:	681b      	ldr	r3, [r3, #0]
 802b2c8:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 802b2cc:	683b      	ldr	r3, [r7, #0]
 802b2ce:	f003 0310 	and.w	r3, r3, #16
 802b2d2:	2102      	movs	r1, #2
 802b2d4:	fa01 f303 	lsl.w	r3, r1, r3
 802b2d8:	429a      	cmp	r2, r3
 802b2da:	d107      	bne.n	802b2ec <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 802b2dc:	687b      	ldr	r3, [r7, #4]
 802b2de:	681b      	ldr	r3, [r3, #0]
 802b2e0:	685a      	ldr	r2, [r3, #4]
 802b2e2:	687b      	ldr	r3, [r7, #4]
 802b2e4:	681b      	ldr	r3, [r3, #0]
 802b2e6:	f042 0202 	orr.w	r2, r2, #2
 802b2ea:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 802b2ec:	687b      	ldr	r3, [r7, #4]
 802b2ee:	2201      	movs	r2, #1
 802b2f0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 802b2f2:	687b      	ldr	r3, [r7, #4]
 802b2f4:	2200      	movs	r2, #0
 802b2f6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 802b2f8:	2300      	movs	r3, #0
}
 802b2fa:	4618      	mov	r0, r3
 802b2fc:	370c      	adds	r7, #12
 802b2fe:	46bd      	mov	sp, r7
 802b300:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b304:	4770      	bx	lr

0802b306 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 802b306:	b480      	push	{r7}
 802b308:	b087      	sub	sp, #28
 802b30a:	af00      	add	r7, sp, #0
 802b30c:	60f8      	str	r0, [r7, #12]
 802b30e:	60b9      	str	r1, [r7, #8]
 802b310:	607a      	str	r2, [r7, #4]
 802b312:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 802b314:	2300      	movs	r3, #0
 802b316:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 802b318:	68fb      	ldr	r3, [r7, #12]
 802b31a:	681b      	ldr	r3, [r3, #0]
 802b31c:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 802b31e:	68bb      	ldr	r3, [r7, #8]
 802b320:	2b00      	cmp	r3, #0
 802b322:	d105      	bne.n	802b330 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 802b324:	697a      	ldr	r2, [r7, #20]
 802b326:	687b      	ldr	r3, [r7, #4]
 802b328:	4413      	add	r3, r2
 802b32a:	3308      	adds	r3, #8
 802b32c:	617b      	str	r3, [r7, #20]
 802b32e:	e004      	b.n	802b33a <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 802b330:	697a      	ldr	r2, [r7, #20]
 802b332:	687b      	ldr	r3, [r7, #4]
 802b334:	4413      	add	r3, r2
 802b336:	3314      	adds	r3, #20
 802b338:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 802b33a:	697b      	ldr	r3, [r7, #20]
 802b33c:	461a      	mov	r2, r3
 802b33e:	683b      	ldr	r3, [r7, #0]
 802b340:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 802b342:	2300      	movs	r3, #0
}
 802b344:	4618      	mov	r0, r3
 802b346:	371c      	adds	r7, #28
 802b348:	46bd      	mov	sp, r7
 802b34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b34e:	4770      	bx	lr

0802b350 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 802b350:	b580      	push	{r7, lr}
 802b352:	b088      	sub	sp, #32
 802b354:	af00      	add	r7, sp, #0
 802b356:	60f8      	str	r0, [r7, #12]
 802b358:	60b9      	str	r1, [r7, #8]
 802b35a:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 802b35c:	68fb      	ldr	r3, [r7, #12]
 802b35e:	795b      	ldrb	r3, [r3, #5]
 802b360:	2b01      	cmp	r3, #1
 802b362:	d101      	bne.n	802b368 <HAL_DAC_ConfigChannel+0x18>
 802b364:	2302      	movs	r3, #2
 802b366:	e11d      	b.n	802b5a4 <HAL_DAC_ConfigChannel+0x254>
 802b368:	68fb      	ldr	r3, [r7, #12]
 802b36a:	2201      	movs	r2, #1
 802b36c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 802b36e:	68fb      	ldr	r3, [r7, #12]
 802b370:	2202      	movs	r2, #2
 802b372:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 802b374:	68bb      	ldr	r3, [r7, #8]
 802b376:	681b      	ldr	r3, [r3, #0]
 802b378:	2b04      	cmp	r3, #4
 802b37a:	d174      	bne.n	802b466 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 802b37c:	f7ff fc1c 	bl	802abb8 <HAL_GetTick>
 802b380:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 802b382:	687b      	ldr	r3, [r7, #4]
 802b384:	2b00      	cmp	r3, #0
 802b386:	d134      	bne.n	802b3f2 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 802b388:	e011      	b.n	802b3ae <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 802b38a:	f7ff fc15 	bl	802abb8 <HAL_GetTick>
 802b38e:	4602      	mov	r2, r0
 802b390:	69bb      	ldr	r3, [r7, #24]
 802b392:	1ad3      	subs	r3, r2, r3
 802b394:	2b01      	cmp	r3, #1
 802b396:	d90a      	bls.n	802b3ae <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 802b398:	68fb      	ldr	r3, [r7, #12]
 802b39a:	691b      	ldr	r3, [r3, #16]
 802b39c:	f043 0208 	orr.w	r2, r3, #8
 802b3a0:	68fb      	ldr	r3, [r7, #12]
 802b3a2:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 802b3a4:	68fb      	ldr	r3, [r7, #12]
 802b3a6:	2203      	movs	r2, #3
 802b3a8:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 802b3aa:	2303      	movs	r3, #3
 802b3ac:	e0fa      	b.n	802b5a4 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 802b3ae:	68fb      	ldr	r3, [r7, #12]
 802b3b0:	681b      	ldr	r3, [r3, #0]
 802b3b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 802b3b4:	4b7d      	ldr	r3, [pc, #500]	; (802b5ac <HAL_DAC_ConfigChannel+0x25c>)
 802b3b6:	4013      	ands	r3, r2
 802b3b8:	2b00      	cmp	r3, #0
 802b3ba:	d1e6      	bne.n	802b38a <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 802b3bc:	2001      	movs	r0, #1
 802b3be:	f7ff fc07 	bl	802abd0 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 802b3c2:	68fb      	ldr	r3, [r7, #12]
 802b3c4:	681b      	ldr	r3, [r3, #0]
 802b3c6:	68ba      	ldr	r2, [r7, #8]
 802b3c8:	6992      	ldr	r2, [r2, #24]
 802b3ca:	641a      	str	r2, [r3, #64]	; 0x40
 802b3cc:	e01e      	b.n	802b40c <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 802b3ce:	f7ff fbf3 	bl	802abb8 <HAL_GetTick>
 802b3d2:	4602      	mov	r2, r0
 802b3d4:	69bb      	ldr	r3, [r7, #24]
 802b3d6:	1ad3      	subs	r3, r2, r3
 802b3d8:	2b01      	cmp	r3, #1
 802b3da:	d90a      	bls.n	802b3f2 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 802b3dc:	68fb      	ldr	r3, [r7, #12]
 802b3de:	691b      	ldr	r3, [r3, #16]
 802b3e0:	f043 0208 	orr.w	r2, r3, #8
 802b3e4:	68fb      	ldr	r3, [r7, #12]
 802b3e6:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 802b3e8:	68fb      	ldr	r3, [r7, #12]
 802b3ea:	2203      	movs	r2, #3
 802b3ec:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 802b3ee:	2303      	movs	r3, #3
 802b3f0:	e0d8      	b.n	802b5a4 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 802b3f2:	68fb      	ldr	r3, [r7, #12]
 802b3f4:	681b      	ldr	r3, [r3, #0]
 802b3f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802b3f8:	2b00      	cmp	r3, #0
 802b3fa:	dbe8      	blt.n	802b3ce <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 802b3fc:	2001      	movs	r0, #1
 802b3fe:	f7ff fbe7 	bl	802abd0 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 802b402:	68fb      	ldr	r3, [r7, #12]
 802b404:	681b      	ldr	r3, [r3, #0]
 802b406:	68ba      	ldr	r2, [r7, #8]
 802b408:	6992      	ldr	r2, [r2, #24]
 802b40a:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 802b40c:	68fb      	ldr	r3, [r7, #12]
 802b40e:	681b      	ldr	r3, [r3, #0]
 802b410:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 802b412:	687b      	ldr	r3, [r7, #4]
 802b414:	f003 0310 	and.w	r3, r3, #16
 802b418:	f240 31ff 	movw	r1, #1023	; 0x3ff
 802b41c:	fa01 f303 	lsl.w	r3, r1, r3
 802b420:	43db      	mvns	r3, r3
 802b422:	ea02 0103 	and.w	r1, r2, r3
 802b426:	68bb      	ldr	r3, [r7, #8]
 802b428:	69da      	ldr	r2, [r3, #28]
 802b42a:	687b      	ldr	r3, [r7, #4]
 802b42c:	f003 0310 	and.w	r3, r3, #16
 802b430:	409a      	lsls	r2, r3
 802b432:	68fb      	ldr	r3, [r7, #12]
 802b434:	681b      	ldr	r3, [r3, #0]
 802b436:	430a      	orrs	r2, r1
 802b438:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 802b43a:	68fb      	ldr	r3, [r7, #12]
 802b43c:	681b      	ldr	r3, [r3, #0]
 802b43e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 802b440:	687b      	ldr	r3, [r7, #4]
 802b442:	f003 0310 	and.w	r3, r3, #16
 802b446:	21ff      	movs	r1, #255	; 0xff
 802b448:	fa01 f303 	lsl.w	r3, r1, r3
 802b44c:	43db      	mvns	r3, r3
 802b44e:	ea02 0103 	and.w	r1, r2, r3
 802b452:	68bb      	ldr	r3, [r7, #8]
 802b454:	6a1a      	ldr	r2, [r3, #32]
 802b456:	687b      	ldr	r3, [r7, #4]
 802b458:	f003 0310 	and.w	r3, r3, #16
 802b45c:	409a      	lsls	r2, r3
 802b45e:	68fb      	ldr	r3, [r7, #12]
 802b460:	681b      	ldr	r3, [r3, #0]
 802b462:	430a      	orrs	r2, r1
 802b464:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 802b466:	68bb      	ldr	r3, [r7, #8]
 802b468:	691b      	ldr	r3, [r3, #16]
 802b46a:	2b01      	cmp	r3, #1
 802b46c:	d11d      	bne.n	802b4aa <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 802b46e:	68fb      	ldr	r3, [r7, #12]
 802b470:	681b      	ldr	r3, [r3, #0]
 802b472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802b474:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 802b476:	687b      	ldr	r3, [r7, #4]
 802b478:	f003 0310 	and.w	r3, r3, #16
 802b47c:	221f      	movs	r2, #31
 802b47e:	fa02 f303 	lsl.w	r3, r2, r3
 802b482:	43db      	mvns	r3, r3
 802b484:	697a      	ldr	r2, [r7, #20]
 802b486:	4013      	ands	r3, r2
 802b488:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 802b48a:	68bb      	ldr	r3, [r7, #8]
 802b48c:	695b      	ldr	r3, [r3, #20]
 802b48e:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 802b490:	687b      	ldr	r3, [r7, #4]
 802b492:	f003 0310 	and.w	r3, r3, #16
 802b496:	693a      	ldr	r2, [r7, #16]
 802b498:	fa02 f303 	lsl.w	r3, r2, r3
 802b49c:	697a      	ldr	r2, [r7, #20]
 802b49e:	4313      	orrs	r3, r2
 802b4a0:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 802b4a2:	68fb      	ldr	r3, [r7, #12]
 802b4a4:	681b      	ldr	r3, [r3, #0]
 802b4a6:	697a      	ldr	r2, [r7, #20]
 802b4a8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 802b4aa:	68fb      	ldr	r3, [r7, #12]
 802b4ac:	681b      	ldr	r3, [r3, #0]
 802b4ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802b4b0:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 802b4b2:	687b      	ldr	r3, [r7, #4]
 802b4b4:	f003 0310 	and.w	r3, r3, #16
 802b4b8:	2207      	movs	r2, #7
 802b4ba:	fa02 f303 	lsl.w	r3, r2, r3
 802b4be:	43db      	mvns	r3, r3
 802b4c0:	697a      	ldr	r2, [r7, #20]
 802b4c2:	4013      	ands	r3, r2
 802b4c4:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 802b4c6:	68bb      	ldr	r3, [r7, #8]
 802b4c8:	68db      	ldr	r3, [r3, #12]
 802b4ca:	2b01      	cmp	r3, #1
 802b4cc:	d102      	bne.n	802b4d4 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 802b4ce:	2300      	movs	r3, #0
 802b4d0:	61fb      	str	r3, [r7, #28]
 802b4d2:	e00f      	b.n	802b4f4 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 802b4d4:	68bb      	ldr	r3, [r7, #8]
 802b4d6:	68db      	ldr	r3, [r3, #12]
 802b4d8:	2b02      	cmp	r3, #2
 802b4da:	d102      	bne.n	802b4e2 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 802b4dc:	2301      	movs	r3, #1
 802b4de:	61fb      	str	r3, [r7, #28]
 802b4e0:	e008      	b.n	802b4f4 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 802b4e2:	68bb      	ldr	r3, [r7, #8]
 802b4e4:	689b      	ldr	r3, [r3, #8]
 802b4e6:	2b00      	cmp	r3, #0
 802b4e8:	d102      	bne.n	802b4f0 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 802b4ea:	2301      	movs	r3, #1
 802b4ec:	61fb      	str	r3, [r7, #28]
 802b4ee:	e001      	b.n	802b4f4 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 802b4f0:	2300      	movs	r3, #0
 802b4f2:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 802b4f4:	68bb      	ldr	r3, [r7, #8]
 802b4f6:	681a      	ldr	r2, [r3, #0]
 802b4f8:	68bb      	ldr	r3, [r7, #8]
 802b4fa:	689b      	ldr	r3, [r3, #8]
 802b4fc:	4313      	orrs	r3, r2
 802b4fe:	69fa      	ldr	r2, [r7, #28]
 802b500:	4313      	orrs	r3, r2
 802b502:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 802b504:	687b      	ldr	r3, [r7, #4]
 802b506:	f003 0310 	and.w	r3, r3, #16
 802b50a:	693a      	ldr	r2, [r7, #16]
 802b50c:	fa02 f303 	lsl.w	r3, r2, r3
 802b510:	697a      	ldr	r2, [r7, #20]
 802b512:	4313      	orrs	r3, r2
 802b514:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 802b516:	68fb      	ldr	r3, [r7, #12]
 802b518:	681b      	ldr	r3, [r3, #0]
 802b51a:	697a      	ldr	r2, [r7, #20]
 802b51c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 802b51e:	68fb      	ldr	r3, [r7, #12]
 802b520:	681b      	ldr	r3, [r3, #0]
 802b522:	6819      	ldr	r1, [r3, #0]
 802b524:	687b      	ldr	r3, [r7, #4]
 802b526:	f003 0310 	and.w	r3, r3, #16
 802b52a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 802b52e:	fa02 f303 	lsl.w	r3, r2, r3
 802b532:	43da      	mvns	r2, r3
 802b534:	68fb      	ldr	r3, [r7, #12]
 802b536:	681b      	ldr	r3, [r3, #0]
 802b538:	400a      	ands	r2, r1
 802b53a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 802b53c:	68fb      	ldr	r3, [r7, #12]
 802b53e:	681b      	ldr	r3, [r3, #0]
 802b540:	681b      	ldr	r3, [r3, #0]
 802b542:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 802b544:	687b      	ldr	r3, [r7, #4]
 802b546:	f003 0310 	and.w	r3, r3, #16
 802b54a:	f640 72fe 	movw	r2, #4094	; 0xffe
 802b54e:	fa02 f303 	lsl.w	r3, r2, r3
 802b552:	43db      	mvns	r3, r3
 802b554:	697a      	ldr	r2, [r7, #20]
 802b556:	4013      	ands	r3, r2
 802b558:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 802b55a:	68bb      	ldr	r3, [r7, #8]
 802b55c:	685b      	ldr	r3, [r3, #4]
 802b55e:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 802b560:	687b      	ldr	r3, [r7, #4]
 802b562:	f003 0310 	and.w	r3, r3, #16
 802b566:	693a      	ldr	r2, [r7, #16]
 802b568:	fa02 f303 	lsl.w	r3, r2, r3
 802b56c:	697a      	ldr	r2, [r7, #20]
 802b56e:	4313      	orrs	r3, r2
 802b570:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 802b572:	68fb      	ldr	r3, [r7, #12]
 802b574:	681b      	ldr	r3, [r3, #0]
 802b576:	697a      	ldr	r2, [r7, #20]
 802b578:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 802b57a:	68fb      	ldr	r3, [r7, #12]
 802b57c:	681b      	ldr	r3, [r3, #0]
 802b57e:	6819      	ldr	r1, [r3, #0]
 802b580:	687b      	ldr	r3, [r7, #4]
 802b582:	f003 0310 	and.w	r3, r3, #16
 802b586:	22c0      	movs	r2, #192	; 0xc0
 802b588:	fa02 f303 	lsl.w	r3, r2, r3
 802b58c:	43da      	mvns	r2, r3
 802b58e:	68fb      	ldr	r3, [r7, #12]
 802b590:	681b      	ldr	r3, [r3, #0]
 802b592:	400a      	ands	r2, r1
 802b594:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 802b596:	68fb      	ldr	r3, [r7, #12]
 802b598:	2201      	movs	r2, #1
 802b59a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 802b59c:	68fb      	ldr	r3, [r7, #12]
 802b59e:	2200      	movs	r2, #0
 802b5a0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 802b5a2:	2300      	movs	r3, #0
}
 802b5a4:	4618      	mov	r0, r3
 802b5a6:	3720      	adds	r7, #32
 802b5a8:	46bd      	mov	sp, r7
 802b5aa:	bd80      	pop	{r7, pc}
 802b5ac:	20008000 	.word	0x20008000

0802b5b0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 802b5b0:	b580      	push	{r7, lr}
 802b5b2:	b086      	sub	sp, #24
 802b5b4:	af00      	add	r7, sp, #0
 802b5b6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 802b5b8:	f7ff fafe 	bl	802abb8 <HAL_GetTick>
 802b5bc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 802b5be:	687b      	ldr	r3, [r7, #4]
 802b5c0:	2b00      	cmp	r3, #0
 802b5c2:	d101      	bne.n	802b5c8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 802b5c4:	2301      	movs	r3, #1
 802b5c6:	e316      	b.n	802bbf6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 802b5c8:	687b      	ldr	r3, [r7, #4]
 802b5ca:	681b      	ldr	r3, [r3, #0]
 802b5cc:	4a66      	ldr	r2, [pc, #408]	; (802b768 <HAL_DMA_Init+0x1b8>)
 802b5ce:	4293      	cmp	r3, r2
 802b5d0:	d04a      	beq.n	802b668 <HAL_DMA_Init+0xb8>
 802b5d2:	687b      	ldr	r3, [r7, #4]
 802b5d4:	681b      	ldr	r3, [r3, #0]
 802b5d6:	4a65      	ldr	r2, [pc, #404]	; (802b76c <HAL_DMA_Init+0x1bc>)
 802b5d8:	4293      	cmp	r3, r2
 802b5da:	d045      	beq.n	802b668 <HAL_DMA_Init+0xb8>
 802b5dc:	687b      	ldr	r3, [r7, #4]
 802b5de:	681b      	ldr	r3, [r3, #0]
 802b5e0:	4a63      	ldr	r2, [pc, #396]	; (802b770 <HAL_DMA_Init+0x1c0>)
 802b5e2:	4293      	cmp	r3, r2
 802b5e4:	d040      	beq.n	802b668 <HAL_DMA_Init+0xb8>
 802b5e6:	687b      	ldr	r3, [r7, #4]
 802b5e8:	681b      	ldr	r3, [r3, #0]
 802b5ea:	4a62      	ldr	r2, [pc, #392]	; (802b774 <HAL_DMA_Init+0x1c4>)
 802b5ec:	4293      	cmp	r3, r2
 802b5ee:	d03b      	beq.n	802b668 <HAL_DMA_Init+0xb8>
 802b5f0:	687b      	ldr	r3, [r7, #4]
 802b5f2:	681b      	ldr	r3, [r3, #0]
 802b5f4:	4a60      	ldr	r2, [pc, #384]	; (802b778 <HAL_DMA_Init+0x1c8>)
 802b5f6:	4293      	cmp	r3, r2
 802b5f8:	d036      	beq.n	802b668 <HAL_DMA_Init+0xb8>
 802b5fa:	687b      	ldr	r3, [r7, #4]
 802b5fc:	681b      	ldr	r3, [r3, #0]
 802b5fe:	4a5f      	ldr	r2, [pc, #380]	; (802b77c <HAL_DMA_Init+0x1cc>)
 802b600:	4293      	cmp	r3, r2
 802b602:	d031      	beq.n	802b668 <HAL_DMA_Init+0xb8>
 802b604:	687b      	ldr	r3, [r7, #4]
 802b606:	681b      	ldr	r3, [r3, #0]
 802b608:	4a5d      	ldr	r2, [pc, #372]	; (802b780 <HAL_DMA_Init+0x1d0>)
 802b60a:	4293      	cmp	r3, r2
 802b60c:	d02c      	beq.n	802b668 <HAL_DMA_Init+0xb8>
 802b60e:	687b      	ldr	r3, [r7, #4]
 802b610:	681b      	ldr	r3, [r3, #0]
 802b612:	4a5c      	ldr	r2, [pc, #368]	; (802b784 <HAL_DMA_Init+0x1d4>)
 802b614:	4293      	cmp	r3, r2
 802b616:	d027      	beq.n	802b668 <HAL_DMA_Init+0xb8>
 802b618:	687b      	ldr	r3, [r7, #4]
 802b61a:	681b      	ldr	r3, [r3, #0]
 802b61c:	4a5a      	ldr	r2, [pc, #360]	; (802b788 <HAL_DMA_Init+0x1d8>)
 802b61e:	4293      	cmp	r3, r2
 802b620:	d022      	beq.n	802b668 <HAL_DMA_Init+0xb8>
 802b622:	687b      	ldr	r3, [r7, #4]
 802b624:	681b      	ldr	r3, [r3, #0]
 802b626:	4a59      	ldr	r2, [pc, #356]	; (802b78c <HAL_DMA_Init+0x1dc>)
 802b628:	4293      	cmp	r3, r2
 802b62a:	d01d      	beq.n	802b668 <HAL_DMA_Init+0xb8>
 802b62c:	687b      	ldr	r3, [r7, #4]
 802b62e:	681b      	ldr	r3, [r3, #0]
 802b630:	4a57      	ldr	r2, [pc, #348]	; (802b790 <HAL_DMA_Init+0x1e0>)
 802b632:	4293      	cmp	r3, r2
 802b634:	d018      	beq.n	802b668 <HAL_DMA_Init+0xb8>
 802b636:	687b      	ldr	r3, [r7, #4]
 802b638:	681b      	ldr	r3, [r3, #0]
 802b63a:	4a56      	ldr	r2, [pc, #344]	; (802b794 <HAL_DMA_Init+0x1e4>)
 802b63c:	4293      	cmp	r3, r2
 802b63e:	d013      	beq.n	802b668 <HAL_DMA_Init+0xb8>
 802b640:	687b      	ldr	r3, [r7, #4]
 802b642:	681b      	ldr	r3, [r3, #0]
 802b644:	4a54      	ldr	r2, [pc, #336]	; (802b798 <HAL_DMA_Init+0x1e8>)
 802b646:	4293      	cmp	r3, r2
 802b648:	d00e      	beq.n	802b668 <HAL_DMA_Init+0xb8>
 802b64a:	687b      	ldr	r3, [r7, #4]
 802b64c:	681b      	ldr	r3, [r3, #0]
 802b64e:	4a53      	ldr	r2, [pc, #332]	; (802b79c <HAL_DMA_Init+0x1ec>)
 802b650:	4293      	cmp	r3, r2
 802b652:	d009      	beq.n	802b668 <HAL_DMA_Init+0xb8>
 802b654:	687b      	ldr	r3, [r7, #4]
 802b656:	681b      	ldr	r3, [r3, #0]
 802b658:	4a51      	ldr	r2, [pc, #324]	; (802b7a0 <HAL_DMA_Init+0x1f0>)
 802b65a:	4293      	cmp	r3, r2
 802b65c:	d004      	beq.n	802b668 <HAL_DMA_Init+0xb8>
 802b65e:	687b      	ldr	r3, [r7, #4]
 802b660:	681b      	ldr	r3, [r3, #0]
 802b662:	4a50      	ldr	r2, [pc, #320]	; (802b7a4 <HAL_DMA_Init+0x1f4>)
 802b664:	4293      	cmp	r3, r2
 802b666:	d101      	bne.n	802b66c <HAL_DMA_Init+0xbc>
 802b668:	2301      	movs	r3, #1
 802b66a:	e000      	b.n	802b66e <HAL_DMA_Init+0xbe>
 802b66c:	2300      	movs	r3, #0
 802b66e:	2b00      	cmp	r3, #0
 802b670:	f000 813b 	beq.w	802b8ea <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 802b674:	687b      	ldr	r3, [r7, #4]
 802b676:	2202      	movs	r2, #2
 802b678:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 802b67c:	687b      	ldr	r3, [r7, #4]
 802b67e:	2200      	movs	r2, #0
 802b680:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 802b684:	687b      	ldr	r3, [r7, #4]
 802b686:	681b      	ldr	r3, [r3, #0]
 802b688:	4a37      	ldr	r2, [pc, #220]	; (802b768 <HAL_DMA_Init+0x1b8>)
 802b68a:	4293      	cmp	r3, r2
 802b68c:	d04a      	beq.n	802b724 <HAL_DMA_Init+0x174>
 802b68e:	687b      	ldr	r3, [r7, #4]
 802b690:	681b      	ldr	r3, [r3, #0]
 802b692:	4a36      	ldr	r2, [pc, #216]	; (802b76c <HAL_DMA_Init+0x1bc>)
 802b694:	4293      	cmp	r3, r2
 802b696:	d045      	beq.n	802b724 <HAL_DMA_Init+0x174>
 802b698:	687b      	ldr	r3, [r7, #4]
 802b69a:	681b      	ldr	r3, [r3, #0]
 802b69c:	4a34      	ldr	r2, [pc, #208]	; (802b770 <HAL_DMA_Init+0x1c0>)
 802b69e:	4293      	cmp	r3, r2
 802b6a0:	d040      	beq.n	802b724 <HAL_DMA_Init+0x174>
 802b6a2:	687b      	ldr	r3, [r7, #4]
 802b6a4:	681b      	ldr	r3, [r3, #0]
 802b6a6:	4a33      	ldr	r2, [pc, #204]	; (802b774 <HAL_DMA_Init+0x1c4>)
 802b6a8:	4293      	cmp	r3, r2
 802b6aa:	d03b      	beq.n	802b724 <HAL_DMA_Init+0x174>
 802b6ac:	687b      	ldr	r3, [r7, #4]
 802b6ae:	681b      	ldr	r3, [r3, #0]
 802b6b0:	4a31      	ldr	r2, [pc, #196]	; (802b778 <HAL_DMA_Init+0x1c8>)
 802b6b2:	4293      	cmp	r3, r2
 802b6b4:	d036      	beq.n	802b724 <HAL_DMA_Init+0x174>
 802b6b6:	687b      	ldr	r3, [r7, #4]
 802b6b8:	681b      	ldr	r3, [r3, #0]
 802b6ba:	4a30      	ldr	r2, [pc, #192]	; (802b77c <HAL_DMA_Init+0x1cc>)
 802b6bc:	4293      	cmp	r3, r2
 802b6be:	d031      	beq.n	802b724 <HAL_DMA_Init+0x174>
 802b6c0:	687b      	ldr	r3, [r7, #4]
 802b6c2:	681b      	ldr	r3, [r3, #0]
 802b6c4:	4a2e      	ldr	r2, [pc, #184]	; (802b780 <HAL_DMA_Init+0x1d0>)
 802b6c6:	4293      	cmp	r3, r2
 802b6c8:	d02c      	beq.n	802b724 <HAL_DMA_Init+0x174>
 802b6ca:	687b      	ldr	r3, [r7, #4]
 802b6cc:	681b      	ldr	r3, [r3, #0]
 802b6ce:	4a2d      	ldr	r2, [pc, #180]	; (802b784 <HAL_DMA_Init+0x1d4>)
 802b6d0:	4293      	cmp	r3, r2
 802b6d2:	d027      	beq.n	802b724 <HAL_DMA_Init+0x174>
 802b6d4:	687b      	ldr	r3, [r7, #4]
 802b6d6:	681b      	ldr	r3, [r3, #0]
 802b6d8:	4a2b      	ldr	r2, [pc, #172]	; (802b788 <HAL_DMA_Init+0x1d8>)
 802b6da:	4293      	cmp	r3, r2
 802b6dc:	d022      	beq.n	802b724 <HAL_DMA_Init+0x174>
 802b6de:	687b      	ldr	r3, [r7, #4]
 802b6e0:	681b      	ldr	r3, [r3, #0]
 802b6e2:	4a2a      	ldr	r2, [pc, #168]	; (802b78c <HAL_DMA_Init+0x1dc>)
 802b6e4:	4293      	cmp	r3, r2
 802b6e6:	d01d      	beq.n	802b724 <HAL_DMA_Init+0x174>
 802b6e8:	687b      	ldr	r3, [r7, #4]
 802b6ea:	681b      	ldr	r3, [r3, #0]
 802b6ec:	4a28      	ldr	r2, [pc, #160]	; (802b790 <HAL_DMA_Init+0x1e0>)
 802b6ee:	4293      	cmp	r3, r2
 802b6f0:	d018      	beq.n	802b724 <HAL_DMA_Init+0x174>
 802b6f2:	687b      	ldr	r3, [r7, #4]
 802b6f4:	681b      	ldr	r3, [r3, #0]
 802b6f6:	4a27      	ldr	r2, [pc, #156]	; (802b794 <HAL_DMA_Init+0x1e4>)
 802b6f8:	4293      	cmp	r3, r2
 802b6fa:	d013      	beq.n	802b724 <HAL_DMA_Init+0x174>
 802b6fc:	687b      	ldr	r3, [r7, #4]
 802b6fe:	681b      	ldr	r3, [r3, #0]
 802b700:	4a25      	ldr	r2, [pc, #148]	; (802b798 <HAL_DMA_Init+0x1e8>)
 802b702:	4293      	cmp	r3, r2
 802b704:	d00e      	beq.n	802b724 <HAL_DMA_Init+0x174>
 802b706:	687b      	ldr	r3, [r7, #4]
 802b708:	681b      	ldr	r3, [r3, #0]
 802b70a:	4a24      	ldr	r2, [pc, #144]	; (802b79c <HAL_DMA_Init+0x1ec>)
 802b70c:	4293      	cmp	r3, r2
 802b70e:	d009      	beq.n	802b724 <HAL_DMA_Init+0x174>
 802b710:	687b      	ldr	r3, [r7, #4]
 802b712:	681b      	ldr	r3, [r3, #0]
 802b714:	4a22      	ldr	r2, [pc, #136]	; (802b7a0 <HAL_DMA_Init+0x1f0>)
 802b716:	4293      	cmp	r3, r2
 802b718:	d004      	beq.n	802b724 <HAL_DMA_Init+0x174>
 802b71a:	687b      	ldr	r3, [r7, #4]
 802b71c:	681b      	ldr	r3, [r3, #0]
 802b71e:	4a21      	ldr	r2, [pc, #132]	; (802b7a4 <HAL_DMA_Init+0x1f4>)
 802b720:	4293      	cmp	r3, r2
 802b722:	d108      	bne.n	802b736 <HAL_DMA_Init+0x186>
 802b724:	687b      	ldr	r3, [r7, #4]
 802b726:	681b      	ldr	r3, [r3, #0]
 802b728:	681a      	ldr	r2, [r3, #0]
 802b72a:	687b      	ldr	r3, [r7, #4]
 802b72c:	681b      	ldr	r3, [r3, #0]
 802b72e:	f022 0201 	bic.w	r2, r2, #1
 802b732:	601a      	str	r2, [r3, #0]
 802b734:	e007      	b.n	802b746 <HAL_DMA_Init+0x196>
 802b736:	687b      	ldr	r3, [r7, #4]
 802b738:	681b      	ldr	r3, [r3, #0]
 802b73a:	681a      	ldr	r2, [r3, #0]
 802b73c:	687b      	ldr	r3, [r7, #4]
 802b73e:	681b      	ldr	r3, [r3, #0]
 802b740:	f022 0201 	bic.w	r2, r2, #1
 802b744:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 802b746:	e02f      	b.n	802b7a8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 802b748:	f7ff fa36 	bl	802abb8 <HAL_GetTick>
 802b74c:	4602      	mov	r2, r0
 802b74e:	693b      	ldr	r3, [r7, #16]
 802b750:	1ad3      	subs	r3, r2, r3
 802b752:	2b05      	cmp	r3, #5
 802b754:	d928      	bls.n	802b7a8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 802b756:	687b      	ldr	r3, [r7, #4]
 802b758:	2220      	movs	r2, #32
 802b75a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 802b75c:	687b      	ldr	r3, [r7, #4]
 802b75e:	2203      	movs	r2, #3
 802b760:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 802b764:	2301      	movs	r3, #1
 802b766:	e246      	b.n	802bbf6 <HAL_DMA_Init+0x646>
 802b768:	40020010 	.word	0x40020010
 802b76c:	40020028 	.word	0x40020028
 802b770:	40020040 	.word	0x40020040
 802b774:	40020058 	.word	0x40020058
 802b778:	40020070 	.word	0x40020070
 802b77c:	40020088 	.word	0x40020088
 802b780:	400200a0 	.word	0x400200a0
 802b784:	400200b8 	.word	0x400200b8
 802b788:	40020410 	.word	0x40020410
 802b78c:	40020428 	.word	0x40020428
 802b790:	40020440 	.word	0x40020440
 802b794:	40020458 	.word	0x40020458
 802b798:	40020470 	.word	0x40020470
 802b79c:	40020488 	.word	0x40020488
 802b7a0:	400204a0 	.word	0x400204a0
 802b7a4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 802b7a8:	687b      	ldr	r3, [r7, #4]
 802b7aa:	681b      	ldr	r3, [r3, #0]
 802b7ac:	681b      	ldr	r3, [r3, #0]
 802b7ae:	f003 0301 	and.w	r3, r3, #1
 802b7b2:	2b00      	cmp	r3, #0
 802b7b4:	d1c8      	bne.n	802b748 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 802b7b6:	687b      	ldr	r3, [r7, #4]
 802b7b8:	681b      	ldr	r3, [r3, #0]
 802b7ba:	681b      	ldr	r3, [r3, #0]
 802b7bc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 802b7be:	697a      	ldr	r2, [r7, #20]
 802b7c0:	4b83      	ldr	r3, [pc, #524]	; (802b9d0 <HAL_DMA_Init+0x420>)
 802b7c2:	4013      	ands	r3, r2
 802b7c4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 802b7c6:	687b      	ldr	r3, [r7, #4]
 802b7c8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 802b7ca:	687b      	ldr	r3, [r7, #4]
 802b7cc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 802b7ce:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 802b7d0:	687b      	ldr	r3, [r7, #4]
 802b7d2:	691b      	ldr	r3, [r3, #16]
 802b7d4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 802b7d6:	687b      	ldr	r3, [r7, #4]
 802b7d8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 802b7da:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 802b7dc:	687b      	ldr	r3, [r7, #4]
 802b7de:	699b      	ldr	r3, [r3, #24]
 802b7e0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 802b7e2:	687b      	ldr	r3, [r7, #4]
 802b7e4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 802b7e6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 802b7e8:	687b      	ldr	r3, [r7, #4]
 802b7ea:	6a1b      	ldr	r3, [r3, #32]
 802b7ec:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 802b7ee:	697a      	ldr	r2, [r7, #20]
 802b7f0:	4313      	orrs	r3, r2
 802b7f2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 802b7f4:	687b      	ldr	r3, [r7, #4]
 802b7f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802b7f8:	2b04      	cmp	r3, #4
 802b7fa:	d107      	bne.n	802b80c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 802b7fc:	687b      	ldr	r3, [r7, #4]
 802b7fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802b800:	687b      	ldr	r3, [r7, #4]
 802b802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b804:	4313      	orrs	r3, r2
 802b806:	697a      	ldr	r2, [r7, #20]
 802b808:	4313      	orrs	r3, r2
 802b80a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 802b80c:	4b71      	ldr	r3, [pc, #452]	; (802b9d4 <HAL_DMA_Init+0x424>)
 802b80e:	681a      	ldr	r2, [r3, #0]
 802b810:	4b71      	ldr	r3, [pc, #452]	; (802b9d8 <HAL_DMA_Init+0x428>)
 802b812:	4013      	ands	r3, r2
 802b814:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 802b818:	d328      	bcc.n	802b86c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 802b81a:	687b      	ldr	r3, [r7, #4]
 802b81c:	685b      	ldr	r3, [r3, #4]
 802b81e:	2b28      	cmp	r3, #40	; 0x28
 802b820:	d903      	bls.n	802b82a <HAL_DMA_Init+0x27a>
 802b822:	687b      	ldr	r3, [r7, #4]
 802b824:	685b      	ldr	r3, [r3, #4]
 802b826:	2b2e      	cmp	r3, #46	; 0x2e
 802b828:	d917      	bls.n	802b85a <HAL_DMA_Init+0x2aa>
 802b82a:	687b      	ldr	r3, [r7, #4]
 802b82c:	685b      	ldr	r3, [r3, #4]
 802b82e:	2b3e      	cmp	r3, #62	; 0x3e
 802b830:	d903      	bls.n	802b83a <HAL_DMA_Init+0x28a>
 802b832:	687b      	ldr	r3, [r7, #4]
 802b834:	685b      	ldr	r3, [r3, #4]
 802b836:	2b42      	cmp	r3, #66	; 0x42
 802b838:	d90f      	bls.n	802b85a <HAL_DMA_Init+0x2aa>
 802b83a:	687b      	ldr	r3, [r7, #4]
 802b83c:	685b      	ldr	r3, [r3, #4]
 802b83e:	2b46      	cmp	r3, #70	; 0x46
 802b840:	d903      	bls.n	802b84a <HAL_DMA_Init+0x29a>
 802b842:	687b      	ldr	r3, [r7, #4]
 802b844:	685b      	ldr	r3, [r3, #4]
 802b846:	2b48      	cmp	r3, #72	; 0x48
 802b848:	d907      	bls.n	802b85a <HAL_DMA_Init+0x2aa>
 802b84a:	687b      	ldr	r3, [r7, #4]
 802b84c:	685b      	ldr	r3, [r3, #4]
 802b84e:	2b4e      	cmp	r3, #78	; 0x4e
 802b850:	d905      	bls.n	802b85e <HAL_DMA_Init+0x2ae>
 802b852:	687b      	ldr	r3, [r7, #4]
 802b854:	685b      	ldr	r3, [r3, #4]
 802b856:	2b52      	cmp	r3, #82	; 0x52
 802b858:	d801      	bhi.n	802b85e <HAL_DMA_Init+0x2ae>
 802b85a:	2301      	movs	r3, #1
 802b85c:	e000      	b.n	802b860 <HAL_DMA_Init+0x2b0>
 802b85e:	2300      	movs	r3, #0
 802b860:	2b00      	cmp	r3, #0
 802b862:	d003      	beq.n	802b86c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 802b864:	697b      	ldr	r3, [r7, #20]
 802b866:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802b86a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 802b86c:	687b      	ldr	r3, [r7, #4]
 802b86e:	681b      	ldr	r3, [r3, #0]
 802b870:	697a      	ldr	r2, [r7, #20]
 802b872:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 802b874:	687b      	ldr	r3, [r7, #4]
 802b876:	681b      	ldr	r3, [r3, #0]
 802b878:	695b      	ldr	r3, [r3, #20]
 802b87a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 802b87c:	697b      	ldr	r3, [r7, #20]
 802b87e:	f023 0307 	bic.w	r3, r3, #7
 802b882:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 802b884:	687b      	ldr	r3, [r7, #4]
 802b886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802b888:	697a      	ldr	r2, [r7, #20]
 802b88a:	4313      	orrs	r3, r2
 802b88c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 802b88e:	687b      	ldr	r3, [r7, #4]
 802b890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802b892:	2b04      	cmp	r3, #4
 802b894:	d117      	bne.n	802b8c6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 802b896:	687b      	ldr	r3, [r7, #4]
 802b898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802b89a:	697a      	ldr	r2, [r7, #20]
 802b89c:	4313      	orrs	r3, r2
 802b89e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 802b8a0:	687b      	ldr	r3, [r7, #4]
 802b8a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802b8a4:	2b00      	cmp	r3, #0
 802b8a6:	d00e      	beq.n	802b8c6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 802b8a8:	6878      	ldr	r0, [r7, #4]
 802b8aa:	f002 fb4d 	bl	802df48 <DMA_CheckFifoParam>
 802b8ae:	4603      	mov	r3, r0
 802b8b0:	2b00      	cmp	r3, #0
 802b8b2:	d008      	beq.n	802b8c6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 802b8b4:	687b      	ldr	r3, [r7, #4]
 802b8b6:	2240      	movs	r2, #64	; 0x40
 802b8b8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 802b8ba:	687b      	ldr	r3, [r7, #4]
 802b8bc:	2201      	movs	r2, #1
 802b8be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 802b8c2:	2301      	movs	r3, #1
 802b8c4:	e197      	b.n	802bbf6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 802b8c6:	687b      	ldr	r3, [r7, #4]
 802b8c8:	681b      	ldr	r3, [r3, #0]
 802b8ca:	697a      	ldr	r2, [r7, #20]
 802b8cc:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 802b8ce:	6878      	ldr	r0, [r7, #4]
 802b8d0:	f002 fa88 	bl	802dde4 <DMA_CalcBaseAndBitshift>
 802b8d4:	4603      	mov	r3, r0
 802b8d6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 802b8d8:	687b      	ldr	r3, [r7, #4]
 802b8da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802b8dc:	f003 031f 	and.w	r3, r3, #31
 802b8e0:	223f      	movs	r2, #63	; 0x3f
 802b8e2:	409a      	lsls	r2, r3
 802b8e4:	68bb      	ldr	r3, [r7, #8]
 802b8e6:	609a      	str	r2, [r3, #8]
 802b8e8:	e0cd      	b.n	802ba86 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 802b8ea:	687b      	ldr	r3, [r7, #4]
 802b8ec:	681b      	ldr	r3, [r3, #0]
 802b8ee:	4a3b      	ldr	r2, [pc, #236]	; (802b9dc <HAL_DMA_Init+0x42c>)
 802b8f0:	4293      	cmp	r3, r2
 802b8f2:	d022      	beq.n	802b93a <HAL_DMA_Init+0x38a>
 802b8f4:	687b      	ldr	r3, [r7, #4]
 802b8f6:	681b      	ldr	r3, [r3, #0]
 802b8f8:	4a39      	ldr	r2, [pc, #228]	; (802b9e0 <HAL_DMA_Init+0x430>)
 802b8fa:	4293      	cmp	r3, r2
 802b8fc:	d01d      	beq.n	802b93a <HAL_DMA_Init+0x38a>
 802b8fe:	687b      	ldr	r3, [r7, #4]
 802b900:	681b      	ldr	r3, [r3, #0]
 802b902:	4a38      	ldr	r2, [pc, #224]	; (802b9e4 <HAL_DMA_Init+0x434>)
 802b904:	4293      	cmp	r3, r2
 802b906:	d018      	beq.n	802b93a <HAL_DMA_Init+0x38a>
 802b908:	687b      	ldr	r3, [r7, #4]
 802b90a:	681b      	ldr	r3, [r3, #0]
 802b90c:	4a36      	ldr	r2, [pc, #216]	; (802b9e8 <HAL_DMA_Init+0x438>)
 802b90e:	4293      	cmp	r3, r2
 802b910:	d013      	beq.n	802b93a <HAL_DMA_Init+0x38a>
 802b912:	687b      	ldr	r3, [r7, #4]
 802b914:	681b      	ldr	r3, [r3, #0]
 802b916:	4a35      	ldr	r2, [pc, #212]	; (802b9ec <HAL_DMA_Init+0x43c>)
 802b918:	4293      	cmp	r3, r2
 802b91a:	d00e      	beq.n	802b93a <HAL_DMA_Init+0x38a>
 802b91c:	687b      	ldr	r3, [r7, #4]
 802b91e:	681b      	ldr	r3, [r3, #0]
 802b920:	4a33      	ldr	r2, [pc, #204]	; (802b9f0 <HAL_DMA_Init+0x440>)
 802b922:	4293      	cmp	r3, r2
 802b924:	d009      	beq.n	802b93a <HAL_DMA_Init+0x38a>
 802b926:	687b      	ldr	r3, [r7, #4]
 802b928:	681b      	ldr	r3, [r3, #0]
 802b92a:	4a32      	ldr	r2, [pc, #200]	; (802b9f4 <HAL_DMA_Init+0x444>)
 802b92c:	4293      	cmp	r3, r2
 802b92e:	d004      	beq.n	802b93a <HAL_DMA_Init+0x38a>
 802b930:	687b      	ldr	r3, [r7, #4]
 802b932:	681b      	ldr	r3, [r3, #0]
 802b934:	4a30      	ldr	r2, [pc, #192]	; (802b9f8 <HAL_DMA_Init+0x448>)
 802b936:	4293      	cmp	r3, r2
 802b938:	d101      	bne.n	802b93e <HAL_DMA_Init+0x38e>
 802b93a:	2301      	movs	r3, #1
 802b93c:	e000      	b.n	802b940 <HAL_DMA_Init+0x390>
 802b93e:	2300      	movs	r3, #0
 802b940:	2b00      	cmp	r3, #0
 802b942:	f000 8097 	beq.w	802ba74 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 802b946:	687b      	ldr	r3, [r7, #4]
 802b948:	681b      	ldr	r3, [r3, #0]
 802b94a:	4a24      	ldr	r2, [pc, #144]	; (802b9dc <HAL_DMA_Init+0x42c>)
 802b94c:	4293      	cmp	r3, r2
 802b94e:	d021      	beq.n	802b994 <HAL_DMA_Init+0x3e4>
 802b950:	687b      	ldr	r3, [r7, #4]
 802b952:	681b      	ldr	r3, [r3, #0]
 802b954:	4a22      	ldr	r2, [pc, #136]	; (802b9e0 <HAL_DMA_Init+0x430>)
 802b956:	4293      	cmp	r3, r2
 802b958:	d01c      	beq.n	802b994 <HAL_DMA_Init+0x3e4>
 802b95a:	687b      	ldr	r3, [r7, #4]
 802b95c:	681b      	ldr	r3, [r3, #0]
 802b95e:	4a21      	ldr	r2, [pc, #132]	; (802b9e4 <HAL_DMA_Init+0x434>)
 802b960:	4293      	cmp	r3, r2
 802b962:	d017      	beq.n	802b994 <HAL_DMA_Init+0x3e4>
 802b964:	687b      	ldr	r3, [r7, #4]
 802b966:	681b      	ldr	r3, [r3, #0]
 802b968:	4a1f      	ldr	r2, [pc, #124]	; (802b9e8 <HAL_DMA_Init+0x438>)
 802b96a:	4293      	cmp	r3, r2
 802b96c:	d012      	beq.n	802b994 <HAL_DMA_Init+0x3e4>
 802b96e:	687b      	ldr	r3, [r7, #4]
 802b970:	681b      	ldr	r3, [r3, #0]
 802b972:	4a1e      	ldr	r2, [pc, #120]	; (802b9ec <HAL_DMA_Init+0x43c>)
 802b974:	4293      	cmp	r3, r2
 802b976:	d00d      	beq.n	802b994 <HAL_DMA_Init+0x3e4>
 802b978:	687b      	ldr	r3, [r7, #4]
 802b97a:	681b      	ldr	r3, [r3, #0]
 802b97c:	4a1c      	ldr	r2, [pc, #112]	; (802b9f0 <HAL_DMA_Init+0x440>)
 802b97e:	4293      	cmp	r3, r2
 802b980:	d008      	beq.n	802b994 <HAL_DMA_Init+0x3e4>
 802b982:	687b      	ldr	r3, [r7, #4]
 802b984:	681b      	ldr	r3, [r3, #0]
 802b986:	4a1b      	ldr	r2, [pc, #108]	; (802b9f4 <HAL_DMA_Init+0x444>)
 802b988:	4293      	cmp	r3, r2
 802b98a:	d003      	beq.n	802b994 <HAL_DMA_Init+0x3e4>
 802b98c:	687b      	ldr	r3, [r7, #4]
 802b98e:	681b      	ldr	r3, [r3, #0]
 802b990:	4a19      	ldr	r2, [pc, #100]	; (802b9f8 <HAL_DMA_Init+0x448>)
 802b992:	4293      	cmp	r3, r2
 802b994:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 802b996:	687b      	ldr	r3, [r7, #4]
 802b998:	2202      	movs	r2, #2
 802b99a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 802b99e:	687b      	ldr	r3, [r7, #4]
 802b9a0:	2200      	movs	r2, #0
 802b9a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 802b9a6:	687b      	ldr	r3, [r7, #4]
 802b9a8:	681b      	ldr	r3, [r3, #0]
 802b9aa:	681b      	ldr	r3, [r3, #0]
 802b9ac:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 802b9ae:	697a      	ldr	r2, [r7, #20]
 802b9b0:	4b12      	ldr	r3, [pc, #72]	; (802b9fc <HAL_DMA_Init+0x44c>)
 802b9b2:	4013      	ands	r3, r2
 802b9b4:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 802b9b6:	687b      	ldr	r3, [r7, #4]
 802b9b8:	689b      	ldr	r3, [r3, #8]
 802b9ba:	2b40      	cmp	r3, #64	; 0x40
 802b9bc:	d020      	beq.n	802ba00 <HAL_DMA_Init+0x450>
 802b9be:	687b      	ldr	r3, [r7, #4]
 802b9c0:	689b      	ldr	r3, [r3, #8]
 802b9c2:	2b80      	cmp	r3, #128	; 0x80
 802b9c4:	d102      	bne.n	802b9cc <HAL_DMA_Init+0x41c>
 802b9c6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 802b9ca:	e01a      	b.n	802ba02 <HAL_DMA_Init+0x452>
 802b9cc:	2300      	movs	r3, #0
 802b9ce:	e018      	b.n	802ba02 <HAL_DMA_Init+0x452>
 802b9d0:	fe10803f 	.word	0xfe10803f
 802b9d4:	5c001000 	.word	0x5c001000
 802b9d8:	ffff0000 	.word	0xffff0000
 802b9dc:	58025408 	.word	0x58025408
 802b9e0:	5802541c 	.word	0x5802541c
 802b9e4:	58025430 	.word	0x58025430
 802b9e8:	58025444 	.word	0x58025444
 802b9ec:	58025458 	.word	0x58025458
 802b9f0:	5802546c 	.word	0x5802546c
 802b9f4:	58025480 	.word	0x58025480
 802b9f8:	58025494 	.word	0x58025494
 802b9fc:	fffe000f 	.word	0xfffe000f
 802ba00:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 802ba02:	687a      	ldr	r2, [r7, #4]
 802ba04:	68d2      	ldr	r2, [r2, #12]
 802ba06:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 802ba08:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 802ba0a:	687b      	ldr	r3, [r7, #4]
 802ba0c:	691b      	ldr	r3, [r3, #16]
 802ba0e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 802ba10:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 802ba12:	687b      	ldr	r3, [r7, #4]
 802ba14:	695b      	ldr	r3, [r3, #20]
 802ba16:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 802ba18:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 802ba1a:	687b      	ldr	r3, [r7, #4]
 802ba1c:	699b      	ldr	r3, [r3, #24]
 802ba1e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 802ba20:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 802ba22:	687b      	ldr	r3, [r7, #4]
 802ba24:	69db      	ldr	r3, [r3, #28]
 802ba26:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 802ba28:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 802ba2a:	687b      	ldr	r3, [r7, #4]
 802ba2c:	6a1b      	ldr	r3, [r3, #32]
 802ba2e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 802ba30:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 802ba32:	697a      	ldr	r2, [r7, #20]
 802ba34:	4313      	orrs	r3, r2
 802ba36:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 802ba38:	687b      	ldr	r3, [r7, #4]
 802ba3a:	681b      	ldr	r3, [r3, #0]
 802ba3c:	697a      	ldr	r2, [r7, #20]
 802ba3e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 802ba40:	687b      	ldr	r3, [r7, #4]
 802ba42:	681b      	ldr	r3, [r3, #0]
 802ba44:	461a      	mov	r2, r3
 802ba46:	4b6e      	ldr	r3, [pc, #440]	; (802bc00 <HAL_DMA_Init+0x650>)
 802ba48:	4413      	add	r3, r2
 802ba4a:	4a6e      	ldr	r2, [pc, #440]	; (802bc04 <HAL_DMA_Init+0x654>)
 802ba4c:	fba2 2303 	umull	r2, r3, r2, r3
 802ba50:	091b      	lsrs	r3, r3, #4
 802ba52:	009a      	lsls	r2, r3, #2
 802ba54:	687b      	ldr	r3, [r7, #4]
 802ba56:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 802ba58:	6878      	ldr	r0, [r7, #4]
 802ba5a:	f002 f9c3 	bl	802dde4 <DMA_CalcBaseAndBitshift>
 802ba5e:	4603      	mov	r3, r0
 802ba60:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 802ba62:	687b      	ldr	r3, [r7, #4]
 802ba64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802ba66:	f003 031f 	and.w	r3, r3, #31
 802ba6a:	2201      	movs	r2, #1
 802ba6c:	409a      	lsls	r2, r3
 802ba6e:	68fb      	ldr	r3, [r7, #12]
 802ba70:	605a      	str	r2, [r3, #4]
 802ba72:	e008      	b.n	802ba86 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 802ba74:	687b      	ldr	r3, [r7, #4]
 802ba76:	2240      	movs	r2, #64	; 0x40
 802ba78:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 802ba7a:	687b      	ldr	r3, [r7, #4]
 802ba7c:	2203      	movs	r2, #3
 802ba7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 802ba82:	2301      	movs	r3, #1
 802ba84:	e0b7      	b.n	802bbf6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 802ba86:	687b      	ldr	r3, [r7, #4]
 802ba88:	681b      	ldr	r3, [r3, #0]
 802ba8a:	4a5f      	ldr	r2, [pc, #380]	; (802bc08 <HAL_DMA_Init+0x658>)
 802ba8c:	4293      	cmp	r3, r2
 802ba8e:	d072      	beq.n	802bb76 <HAL_DMA_Init+0x5c6>
 802ba90:	687b      	ldr	r3, [r7, #4]
 802ba92:	681b      	ldr	r3, [r3, #0]
 802ba94:	4a5d      	ldr	r2, [pc, #372]	; (802bc0c <HAL_DMA_Init+0x65c>)
 802ba96:	4293      	cmp	r3, r2
 802ba98:	d06d      	beq.n	802bb76 <HAL_DMA_Init+0x5c6>
 802ba9a:	687b      	ldr	r3, [r7, #4]
 802ba9c:	681b      	ldr	r3, [r3, #0]
 802ba9e:	4a5c      	ldr	r2, [pc, #368]	; (802bc10 <HAL_DMA_Init+0x660>)
 802baa0:	4293      	cmp	r3, r2
 802baa2:	d068      	beq.n	802bb76 <HAL_DMA_Init+0x5c6>
 802baa4:	687b      	ldr	r3, [r7, #4]
 802baa6:	681b      	ldr	r3, [r3, #0]
 802baa8:	4a5a      	ldr	r2, [pc, #360]	; (802bc14 <HAL_DMA_Init+0x664>)
 802baaa:	4293      	cmp	r3, r2
 802baac:	d063      	beq.n	802bb76 <HAL_DMA_Init+0x5c6>
 802baae:	687b      	ldr	r3, [r7, #4]
 802bab0:	681b      	ldr	r3, [r3, #0]
 802bab2:	4a59      	ldr	r2, [pc, #356]	; (802bc18 <HAL_DMA_Init+0x668>)
 802bab4:	4293      	cmp	r3, r2
 802bab6:	d05e      	beq.n	802bb76 <HAL_DMA_Init+0x5c6>
 802bab8:	687b      	ldr	r3, [r7, #4]
 802baba:	681b      	ldr	r3, [r3, #0]
 802babc:	4a57      	ldr	r2, [pc, #348]	; (802bc1c <HAL_DMA_Init+0x66c>)
 802babe:	4293      	cmp	r3, r2
 802bac0:	d059      	beq.n	802bb76 <HAL_DMA_Init+0x5c6>
 802bac2:	687b      	ldr	r3, [r7, #4]
 802bac4:	681b      	ldr	r3, [r3, #0]
 802bac6:	4a56      	ldr	r2, [pc, #344]	; (802bc20 <HAL_DMA_Init+0x670>)
 802bac8:	4293      	cmp	r3, r2
 802baca:	d054      	beq.n	802bb76 <HAL_DMA_Init+0x5c6>
 802bacc:	687b      	ldr	r3, [r7, #4]
 802bace:	681b      	ldr	r3, [r3, #0]
 802bad0:	4a54      	ldr	r2, [pc, #336]	; (802bc24 <HAL_DMA_Init+0x674>)
 802bad2:	4293      	cmp	r3, r2
 802bad4:	d04f      	beq.n	802bb76 <HAL_DMA_Init+0x5c6>
 802bad6:	687b      	ldr	r3, [r7, #4]
 802bad8:	681b      	ldr	r3, [r3, #0]
 802bada:	4a53      	ldr	r2, [pc, #332]	; (802bc28 <HAL_DMA_Init+0x678>)
 802badc:	4293      	cmp	r3, r2
 802bade:	d04a      	beq.n	802bb76 <HAL_DMA_Init+0x5c6>
 802bae0:	687b      	ldr	r3, [r7, #4]
 802bae2:	681b      	ldr	r3, [r3, #0]
 802bae4:	4a51      	ldr	r2, [pc, #324]	; (802bc2c <HAL_DMA_Init+0x67c>)
 802bae6:	4293      	cmp	r3, r2
 802bae8:	d045      	beq.n	802bb76 <HAL_DMA_Init+0x5c6>
 802baea:	687b      	ldr	r3, [r7, #4]
 802baec:	681b      	ldr	r3, [r3, #0]
 802baee:	4a50      	ldr	r2, [pc, #320]	; (802bc30 <HAL_DMA_Init+0x680>)
 802baf0:	4293      	cmp	r3, r2
 802baf2:	d040      	beq.n	802bb76 <HAL_DMA_Init+0x5c6>
 802baf4:	687b      	ldr	r3, [r7, #4]
 802baf6:	681b      	ldr	r3, [r3, #0]
 802baf8:	4a4e      	ldr	r2, [pc, #312]	; (802bc34 <HAL_DMA_Init+0x684>)
 802bafa:	4293      	cmp	r3, r2
 802bafc:	d03b      	beq.n	802bb76 <HAL_DMA_Init+0x5c6>
 802bafe:	687b      	ldr	r3, [r7, #4]
 802bb00:	681b      	ldr	r3, [r3, #0]
 802bb02:	4a4d      	ldr	r2, [pc, #308]	; (802bc38 <HAL_DMA_Init+0x688>)
 802bb04:	4293      	cmp	r3, r2
 802bb06:	d036      	beq.n	802bb76 <HAL_DMA_Init+0x5c6>
 802bb08:	687b      	ldr	r3, [r7, #4]
 802bb0a:	681b      	ldr	r3, [r3, #0]
 802bb0c:	4a4b      	ldr	r2, [pc, #300]	; (802bc3c <HAL_DMA_Init+0x68c>)
 802bb0e:	4293      	cmp	r3, r2
 802bb10:	d031      	beq.n	802bb76 <HAL_DMA_Init+0x5c6>
 802bb12:	687b      	ldr	r3, [r7, #4]
 802bb14:	681b      	ldr	r3, [r3, #0]
 802bb16:	4a4a      	ldr	r2, [pc, #296]	; (802bc40 <HAL_DMA_Init+0x690>)
 802bb18:	4293      	cmp	r3, r2
 802bb1a:	d02c      	beq.n	802bb76 <HAL_DMA_Init+0x5c6>
 802bb1c:	687b      	ldr	r3, [r7, #4]
 802bb1e:	681b      	ldr	r3, [r3, #0]
 802bb20:	4a48      	ldr	r2, [pc, #288]	; (802bc44 <HAL_DMA_Init+0x694>)
 802bb22:	4293      	cmp	r3, r2
 802bb24:	d027      	beq.n	802bb76 <HAL_DMA_Init+0x5c6>
 802bb26:	687b      	ldr	r3, [r7, #4]
 802bb28:	681b      	ldr	r3, [r3, #0]
 802bb2a:	4a47      	ldr	r2, [pc, #284]	; (802bc48 <HAL_DMA_Init+0x698>)
 802bb2c:	4293      	cmp	r3, r2
 802bb2e:	d022      	beq.n	802bb76 <HAL_DMA_Init+0x5c6>
 802bb30:	687b      	ldr	r3, [r7, #4]
 802bb32:	681b      	ldr	r3, [r3, #0]
 802bb34:	4a45      	ldr	r2, [pc, #276]	; (802bc4c <HAL_DMA_Init+0x69c>)
 802bb36:	4293      	cmp	r3, r2
 802bb38:	d01d      	beq.n	802bb76 <HAL_DMA_Init+0x5c6>
 802bb3a:	687b      	ldr	r3, [r7, #4]
 802bb3c:	681b      	ldr	r3, [r3, #0]
 802bb3e:	4a44      	ldr	r2, [pc, #272]	; (802bc50 <HAL_DMA_Init+0x6a0>)
 802bb40:	4293      	cmp	r3, r2
 802bb42:	d018      	beq.n	802bb76 <HAL_DMA_Init+0x5c6>
 802bb44:	687b      	ldr	r3, [r7, #4]
 802bb46:	681b      	ldr	r3, [r3, #0]
 802bb48:	4a42      	ldr	r2, [pc, #264]	; (802bc54 <HAL_DMA_Init+0x6a4>)
 802bb4a:	4293      	cmp	r3, r2
 802bb4c:	d013      	beq.n	802bb76 <HAL_DMA_Init+0x5c6>
 802bb4e:	687b      	ldr	r3, [r7, #4]
 802bb50:	681b      	ldr	r3, [r3, #0]
 802bb52:	4a41      	ldr	r2, [pc, #260]	; (802bc58 <HAL_DMA_Init+0x6a8>)
 802bb54:	4293      	cmp	r3, r2
 802bb56:	d00e      	beq.n	802bb76 <HAL_DMA_Init+0x5c6>
 802bb58:	687b      	ldr	r3, [r7, #4]
 802bb5a:	681b      	ldr	r3, [r3, #0]
 802bb5c:	4a3f      	ldr	r2, [pc, #252]	; (802bc5c <HAL_DMA_Init+0x6ac>)
 802bb5e:	4293      	cmp	r3, r2
 802bb60:	d009      	beq.n	802bb76 <HAL_DMA_Init+0x5c6>
 802bb62:	687b      	ldr	r3, [r7, #4]
 802bb64:	681b      	ldr	r3, [r3, #0]
 802bb66:	4a3e      	ldr	r2, [pc, #248]	; (802bc60 <HAL_DMA_Init+0x6b0>)
 802bb68:	4293      	cmp	r3, r2
 802bb6a:	d004      	beq.n	802bb76 <HAL_DMA_Init+0x5c6>
 802bb6c:	687b      	ldr	r3, [r7, #4]
 802bb6e:	681b      	ldr	r3, [r3, #0]
 802bb70:	4a3c      	ldr	r2, [pc, #240]	; (802bc64 <HAL_DMA_Init+0x6b4>)
 802bb72:	4293      	cmp	r3, r2
 802bb74:	d101      	bne.n	802bb7a <HAL_DMA_Init+0x5ca>
 802bb76:	2301      	movs	r3, #1
 802bb78:	e000      	b.n	802bb7c <HAL_DMA_Init+0x5cc>
 802bb7a:	2300      	movs	r3, #0
 802bb7c:	2b00      	cmp	r3, #0
 802bb7e:	d032      	beq.n	802bbe6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 802bb80:	6878      	ldr	r0, [r7, #4]
 802bb82:	f002 fa5d 	bl	802e040 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 802bb86:	687b      	ldr	r3, [r7, #4]
 802bb88:	689b      	ldr	r3, [r3, #8]
 802bb8a:	2b80      	cmp	r3, #128	; 0x80
 802bb8c:	d102      	bne.n	802bb94 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 802bb8e:	687b      	ldr	r3, [r7, #4]
 802bb90:	2200      	movs	r2, #0
 802bb92:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 802bb94:	687b      	ldr	r3, [r7, #4]
 802bb96:	685a      	ldr	r2, [r3, #4]
 802bb98:	687b      	ldr	r3, [r7, #4]
 802bb9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802bb9c:	b2d2      	uxtb	r2, r2
 802bb9e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 802bba0:	687b      	ldr	r3, [r7, #4]
 802bba2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802bba4:	687a      	ldr	r2, [r7, #4]
 802bba6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 802bba8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 802bbaa:	687b      	ldr	r3, [r7, #4]
 802bbac:	685b      	ldr	r3, [r3, #4]
 802bbae:	2b00      	cmp	r3, #0
 802bbb0:	d010      	beq.n	802bbd4 <HAL_DMA_Init+0x624>
 802bbb2:	687b      	ldr	r3, [r7, #4]
 802bbb4:	685b      	ldr	r3, [r3, #4]
 802bbb6:	2b08      	cmp	r3, #8
 802bbb8:	d80c      	bhi.n	802bbd4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 802bbba:	6878      	ldr	r0, [r7, #4]
 802bbbc:	f002 fada 	bl	802e174 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 802bbc0:	687b      	ldr	r3, [r7, #4]
 802bbc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802bbc4:	2200      	movs	r2, #0
 802bbc6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 802bbc8:	687b      	ldr	r3, [r7, #4]
 802bbca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802bbcc:	687a      	ldr	r2, [r7, #4]
 802bbce:	6f52      	ldr	r2, [r2, #116]	; 0x74
 802bbd0:	605a      	str	r2, [r3, #4]
 802bbd2:	e008      	b.n	802bbe6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 802bbd4:	687b      	ldr	r3, [r7, #4]
 802bbd6:	2200      	movs	r2, #0
 802bbd8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 802bbda:	687b      	ldr	r3, [r7, #4]
 802bbdc:	2200      	movs	r2, #0
 802bbde:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 802bbe0:	687b      	ldr	r3, [r7, #4]
 802bbe2:	2200      	movs	r2, #0
 802bbe4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 802bbe6:	687b      	ldr	r3, [r7, #4]
 802bbe8:	2200      	movs	r2, #0
 802bbea:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 802bbec:	687b      	ldr	r3, [r7, #4]
 802bbee:	2201      	movs	r2, #1
 802bbf0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 802bbf4:	2300      	movs	r3, #0
}
 802bbf6:	4618      	mov	r0, r3
 802bbf8:	3718      	adds	r7, #24
 802bbfa:	46bd      	mov	sp, r7
 802bbfc:	bd80      	pop	{r7, pc}
 802bbfe:	bf00      	nop
 802bc00:	a7fdabf8 	.word	0xa7fdabf8
 802bc04:	cccccccd 	.word	0xcccccccd
 802bc08:	40020010 	.word	0x40020010
 802bc0c:	40020028 	.word	0x40020028
 802bc10:	40020040 	.word	0x40020040
 802bc14:	40020058 	.word	0x40020058
 802bc18:	40020070 	.word	0x40020070
 802bc1c:	40020088 	.word	0x40020088
 802bc20:	400200a0 	.word	0x400200a0
 802bc24:	400200b8 	.word	0x400200b8
 802bc28:	40020410 	.word	0x40020410
 802bc2c:	40020428 	.word	0x40020428
 802bc30:	40020440 	.word	0x40020440
 802bc34:	40020458 	.word	0x40020458
 802bc38:	40020470 	.word	0x40020470
 802bc3c:	40020488 	.word	0x40020488
 802bc40:	400204a0 	.word	0x400204a0
 802bc44:	400204b8 	.word	0x400204b8
 802bc48:	58025408 	.word	0x58025408
 802bc4c:	5802541c 	.word	0x5802541c
 802bc50:	58025430 	.word	0x58025430
 802bc54:	58025444 	.word	0x58025444
 802bc58:	58025458 	.word	0x58025458
 802bc5c:	5802546c 	.word	0x5802546c
 802bc60:	58025480 	.word	0x58025480
 802bc64:	58025494 	.word	0x58025494

0802bc68 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 802bc68:	b580      	push	{r7, lr}
 802bc6a:	b086      	sub	sp, #24
 802bc6c:	af00      	add	r7, sp, #0
 802bc6e:	60f8      	str	r0, [r7, #12]
 802bc70:	60b9      	str	r1, [r7, #8]
 802bc72:	607a      	str	r2, [r7, #4]
 802bc74:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 802bc76:	2300      	movs	r3, #0
 802bc78:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 802bc7a:	68fb      	ldr	r3, [r7, #12]
 802bc7c:	2b00      	cmp	r3, #0
 802bc7e:	d101      	bne.n	802bc84 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 802bc80:	2301      	movs	r3, #1
 802bc82:	e226      	b.n	802c0d2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 802bc84:	68fb      	ldr	r3, [r7, #12]
 802bc86:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 802bc8a:	2b01      	cmp	r3, #1
 802bc8c:	d101      	bne.n	802bc92 <HAL_DMA_Start_IT+0x2a>
 802bc8e:	2302      	movs	r3, #2
 802bc90:	e21f      	b.n	802c0d2 <HAL_DMA_Start_IT+0x46a>
 802bc92:	68fb      	ldr	r3, [r7, #12]
 802bc94:	2201      	movs	r2, #1
 802bc96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 802bc9a:	68fb      	ldr	r3, [r7, #12]
 802bc9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 802bca0:	b2db      	uxtb	r3, r3
 802bca2:	2b01      	cmp	r3, #1
 802bca4:	f040 820a 	bne.w	802c0bc <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 802bca8:	68fb      	ldr	r3, [r7, #12]
 802bcaa:	2202      	movs	r2, #2
 802bcac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 802bcb0:	68fb      	ldr	r3, [r7, #12]
 802bcb2:	2200      	movs	r2, #0
 802bcb4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 802bcb6:	68fb      	ldr	r3, [r7, #12]
 802bcb8:	681b      	ldr	r3, [r3, #0]
 802bcba:	4a68      	ldr	r2, [pc, #416]	; (802be5c <HAL_DMA_Start_IT+0x1f4>)
 802bcbc:	4293      	cmp	r3, r2
 802bcbe:	d04a      	beq.n	802bd56 <HAL_DMA_Start_IT+0xee>
 802bcc0:	68fb      	ldr	r3, [r7, #12]
 802bcc2:	681b      	ldr	r3, [r3, #0]
 802bcc4:	4a66      	ldr	r2, [pc, #408]	; (802be60 <HAL_DMA_Start_IT+0x1f8>)
 802bcc6:	4293      	cmp	r3, r2
 802bcc8:	d045      	beq.n	802bd56 <HAL_DMA_Start_IT+0xee>
 802bcca:	68fb      	ldr	r3, [r7, #12]
 802bccc:	681b      	ldr	r3, [r3, #0]
 802bcce:	4a65      	ldr	r2, [pc, #404]	; (802be64 <HAL_DMA_Start_IT+0x1fc>)
 802bcd0:	4293      	cmp	r3, r2
 802bcd2:	d040      	beq.n	802bd56 <HAL_DMA_Start_IT+0xee>
 802bcd4:	68fb      	ldr	r3, [r7, #12]
 802bcd6:	681b      	ldr	r3, [r3, #0]
 802bcd8:	4a63      	ldr	r2, [pc, #396]	; (802be68 <HAL_DMA_Start_IT+0x200>)
 802bcda:	4293      	cmp	r3, r2
 802bcdc:	d03b      	beq.n	802bd56 <HAL_DMA_Start_IT+0xee>
 802bcde:	68fb      	ldr	r3, [r7, #12]
 802bce0:	681b      	ldr	r3, [r3, #0]
 802bce2:	4a62      	ldr	r2, [pc, #392]	; (802be6c <HAL_DMA_Start_IT+0x204>)
 802bce4:	4293      	cmp	r3, r2
 802bce6:	d036      	beq.n	802bd56 <HAL_DMA_Start_IT+0xee>
 802bce8:	68fb      	ldr	r3, [r7, #12]
 802bcea:	681b      	ldr	r3, [r3, #0]
 802bcec:	4a60      	ldr	r2, [pc, #384]	; (802be70 <HAL_DMA_Start_IT+0x208>)
 802bcee:	4293      	cmp	r3, r2
 802bcf0:	d031      	beq.n	802bd56 <HAL_DMA_Start_IT+0xee>
 802bcf2:	68fb      	ldr	r3, [r7, #12]
 802bcf4:	681b      	ldr	r3, [r3, #0]
 802bcf6:	4a5f      	ldr	r2, [pc, #380]	; (802be74 <HAL_DMA_Start_IT+0x20c>)
 802bcf8:	4293      	cmp	r3, r2
 802bcfa:	d02c      	beq.n	802bd56 <HAL_DMA_Start_IT+0xee>
 802bcfc:	68fb      	ldr	r3, [r7, #12]
 802bcfe:	681b      	ldr	r3, [r3, #0]
 802bd00:	4a5d      	ldr	r2, [pc, #372]	; (802be78 <HAL_DMA_Start_IT+0x210>)
 802bd02:	4293      	cmp	r3, r2
 802bd04:	d027      	beq.n	802bd56 <HAL_DMA_Start_IT+0xee>
 802bd06:	68fb      	ldr	r3, [r7, #12]
 802bd08:	681b      	ldr	r3, [r3, #0]
 802bd0a:	4a5c      	ldr	r2, [pc, #368]	; (802be7c <HAL_DMA_Start_IT+0x214>)
 802bd0c:	4293      	cmp	r3, r2
 802bd0e:	d022      	beq.n	802bd56 <HAL_DMA_Start_IT+0xee>
 802bd10:	68fb      	ldr	r3, [r7, #12]
 802bd12:	681b      	ldr	r3, [r3, #0]
 802bd14:	4a5a      	ldr	r2, [pc, #360]	; (802be80 <HAL_DMA_Start_IT+0x218>)
 802bd16:	4293      	cmp	r3, r2
 802bd18:	d01d      	beq.n	802bd56 <HAL_DMA_Start_IT+0xee>
 802bd1a:	68fb      	ldr	r3, [r7, #12]
 802bd1c:	681b      	ldr	r3, [r3, #0]
 802bd1e:	4a59      	ldr	r2, [pc, #356]	; (802be84 <HAL_DMA_Start_IT+0x21c>)
 802bd20:	4293      	cmp	r3, r2
 802bd22:	d018      	beq.n	802bd56 <HAL_DMA_Start_IT+0xee>
 802bd24:	68fb      	ldr	r3, [r7, #12]
 802bd26:	681b      	ldr	r3, [r3, #0]
 802bd28:	4a57      	ldr	r2, [pc, #348]	; (802be88 <HAL_DMA_Start_IT+0x220>)
 802bd2a:	4293      	cmp	r3, r2
 802bd2c:	d013      	beq.n	802bd56 <HAL_DMA_Start_IT+0xee>
 802bd2e:	68fb      	ldr	r3, [r7, #12]
 802bd30:	681b      	ldr	r3, [r3, #0]
 802bd32:	4a56      	ldr	r2, [pc, #344]	; (802be8c <HAL_DMA_Start_IT+0x224>)
 802bd34:	4293      	cmp	r3, r2
 802bd36:	d00e      	beq.n	802bd56 <HAL_DMA_Start_IT+0xee>
 802bd38:	68fb      	ldr	r3, [r7, #12]
 802bd3a:	681b      	ldr	r3, [r3, #0]
 802bd3c:	4a54      	ldr	r2, [pc, #336]	; (802be90 <HAL_DMA_Start_IT+0x228>)
 802bd3e:	4293      	cmp	r3, r2
 802bd40:	d009      	beq.n	802bd56 <HAL_DMA_Start_IT+0xee>
 802bd42:	68fb      	ldr	r3, [r7, #12]
 802bd44:	681b      	ldr	r3, [r3, #0]
 802bd46:	4a53      	ldr	r2, [pc, #332]	; (802be94 <HAL_DMA_Start_IT+0x22c>)
 802bd48:	4293      	cmp	r3, r2
 802bd4a:	d004      	beq.n	802bd56 <HAL_DMA_Start_IT+0xee>
 802bd4c:	68fb      	ldr	r3, [r7, #12]
 802bd4e:	681b      	ldr	r3, [r3, #0]
 802bd50:	4a51      	ldr	r2, [pc, #324]	; (802be98 <HAL_DMA_Start_IT+0x230>)
 802bd52:	4293      	cmp	r3, r2
 802bd54:	d108      	bne.n	802bd68 <HAL_DMA_Start_IT+0x100>
 802bd56:	68fb      	ldr	r3, [r7, #12]
 802bd58:	681b      	ldr	r3, [r3, #0]
 802bd5a:	681a      	ldr	r2, [r3, #0]
 802bd5c:	68fb      	ldr	r3, [r7, #12]
 802bd5e:	681b      	ldr	r3, [r3, #0]
 802bd60:	f022 0201 	bic.w	r2, r2, #1
 802bd64:	601a      	str	r2, [r3, #0]
 802bd66:	e007      	b.n	802bd78 <HAL_DMA_Start_IT+0x110>
 802bd68:	68fb      	ldr	r3, [r7, #12]
 802bd6a:	681b      	ldr	r3, [r3, #0]
 802bd6c:	681a      	ldr	r2, [r3, #0]
 802bd6e:	68fb      	ldr	r3, [r7, #12]
 802bd70:	681b      	ldr	r3, [r3, #0]
 802bd72:	f022 0201 	bic.w	r2, r2, #1
 802bd76:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 802bd78:	683b      	ldr	r3, [r7, #0]
 802bd7a:	687a      	ldr	r2, [r7, #4]
 802bd7c:	68b9      	ldr	r1, [r7, #8]
 802bd7e:	68f8      	ldr	r0, [r7, #12]
 802bd80:	f001 fe84 	bl	802da8c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 802bd84:	68fb      	ldr	r3, [r7, #12]
 802bd86:	681b      	ldr	r3, [r3, #0]
 802bd88:	4a34      	ldr	r2, [pc, #208]	; (802be5c <HAL_DMA_Start_IT+0x1f4>)
 802bd8a:	4293      	cmp	r3, r2
 802bd8c:	d04a      	beq.n	802be24 <HAL_DMA_Start_IT+0x1bc>
 802bd8e:	68fb      	ldr	r3, [r7, #12]
 802bd90:	681b      	ldr	r3, [r3, #0]
 802bd92:	4a33      	ldr	r2, [pc, #204]	; (802be60 <HAL_DMA_Start_IT+0x1f8>)
 802bd94:	4293      	cmp	r3, r2
 802bd96:	d045      	beq.n	802be24 <HAL_DMA_Start_IT+0x1bc>
 802bd98:	68fb      	ldr	r3, [r7, #12]
 802bd9a:	681b      	ldr	r3, [r3, #0]
 802bd9c:	4a31      	ldr	r2, [pc, #196]	; (802be64 <HAL_DMA_Start_IT+0x1fc>)
 802bd9e:	4293      	cmp	r3, r2
 802bda0:	d040      	beq.n	802be24 <HAL_DMA_Start_IT+0x1bc>
 802bda2:	68fb      	ldr	r3, [r7, #12]
 802bda4:	681b      	ldr	r3, [r3, #0]
 802bda6:	4a30      	ldr	r2, [pc, #192]	; (802be68 <HAL_DMA_Start_IT+0x200>)
 802bda8:	4293      	cmp	r3, r2
 802bdaa:	d03b      	beq.n	802be24 <HAL_DMA_Start_IT+0x1bc>
 802bdac:	68fb      	ldr	r3, [r7, #12]
 802bdae:	681b      	ldr	r3, [r3, #0]
 802bdb0:	4a2e      	ldr	r2, [pc, #184]	; (802be6c <HAL_DMA_Start_IT+0x204>)
 802bdb2:	4293      	cmp	r3, r2
 802bdb4:	d036      	beq.n	802be24 <HAL_DMA_Start_IT+0x1bc>
 802bdb6:	68fb      	ldr	r3, [r7, #12]
 802bdb8:	681b      	ldr	r3, [r3, #0]
 802bdba:	4a2d      	ldr	r2, [pc, #180]	; (802be70 <HAL_DMA_Start_IT+0x208>)
 802bdbc:	4293      	cmp	r3, r2
 802bdbe:	d031      	beq.n	802be24 <HAL_DMA_Start_IT+0x1bc>
 802bdc0:	68fb      	ldr	r3, [r7, #12]
 802bdc2:	681b      	ldr	r3, [r3, #0]
 802bdc4:	4a2b      	ldr	r2, [pc, #172]	; (802be74 <HAL_DMA_Start_IT+0x20c>)
 802bdc6:	4293      	cmp	r3, r2
 802bdc8:	d02c      	beq.n	802be24 <HAL_DMA_Start_IT+0x1bc>
 802bdca:	68fb      	ldr	r3, [r7, #12]
 802bdcc:	681b      	ldr	r3, [r3, #0]
 802bdce:	4a2a      	ldr	r2, [pc, #168]	; (802be78 <HAL_DMA_Start_IT+0x210>)
 802bdd0:	4293      	cmp	r3, r2
 802bdd2:	d027      	beq.n	802be24 <HAL_DMA_Start_IT+0x1bc>
 802bdd4:	68fb      	ldr	r3, [r7, #12]
 802bdd6:	681b      	ldr	r3, [r3, #0]
 802bdd8:	4a28      	ldr	r2, [pc, #160]	; (802be7c <HAL_DMA_Start_IT+0x214>)
 802bdda:	4293      	cmp	r3, r2
 802bddc:	d022      	beq.n	802be24 <HAL_DMA_Start_IT+0x1bc>
 802bdde:	68fb      	ldr	r3, [r7, #12]
 802bde0:	681b      	ldr	r3, [r3, #0]
 802bde2:	4a27      	ldr	r2, [pc, #156]	; (802be80 <HAL_DMA_Start_IT+0x218>)
 802bde4:	4293      	cmp	r3, r2
 802bde6:	d01d      	beq.n	802be24 <HAL_DMA_Start_IT+0x1bc>
 802bde8:	68fb      	ldr	r3, [r7, #12]
 802bdea:	681b      	ldr	r3, [r3, #0]
 802bdec:	4a25      	ldr	r2, [pc, #148]	; (802be84 <HAL_DMA_Start_IT+0x21c>)
 802bdee:	4293      	cmp	r3, r2
 802bdf0:	d018      	beq.n	802be24 <HAL_DMA_Start_IT+0x1bc>
 802bdf2:	68fb      	ldr	r3, [r7, #12]
 802bdf4:	681b      	ldr	r3, [r3, #0]
 802bdf6:	4a24      	ldr	r2, [pc, #144]	; (802be88 <HAL_DMA_Start_IT+0x220>)
 802bdf8:	4293      	cmp	r3, r2
 802bdfa:	d013      	beq.n	802be24 <HAL_DMA_Start_IT+0x1bc>
 802bdfc:	68fb      	ldr	r3, [r7, #12]
 802bdfe:	681b      	ldr	r3, [r3, #0]
 802be00:	4a22      	ldr	r2, [pc, #136]	; (802be8c <HAL_DMA_Start_IT+0x224>)
 802be02:	4293      	cmp	r3, r2
 802be04:	d00e      	beq.n	802be24 <HAL_DMA_Start_IT+0x1bc>
 802be06:	68fb      	ldr	r3, [r7, #12]
 802be08:	681b      	ldr	r3, [r3, #0]
 802be0a:	4a21      	ldr	r2, [pc, #132]	; (802be90 <HAL_DMA_Start_IT+0x228>)
 802be0c:	4293      	cmp	r3, r2
 802be0e:	d009      	beq.n	802be24 <HAL_DMA_Start_IT+0x1bc>
 802be10:	68fb      	ldr	r3, [r7, #12]
 802be12:	681b      	ldr	r3, [r3, #0]
 802be14:	4a1f      	ldr	r2, [pc, #124]	; (802be94 <HAL_DMA_Start_IT+0x22c>)
 802be16:	4293      	cmp	r3, r2
 802be18:	d004      	beq.n	802be24 <HAL_DMA_Start_IT+0x1bc>
 802be1a:	68fb      	ldr	r3, [r7, #12]
 802be1c:	681b      	ldr	r3, [r3, #0]
 802be1e:	4a1e      	ldr	r2, [pc, #120]	; (802be98 <HAL_DMA_Start_IT+0x230>)
 802be20:	4293      	cmp	r3, r2
 802be22:	d101      	bne.n	802be28 <HAL_DMA_Start_IT+0x1c0>
 802be24:	2301      	movs	r3, #1
 802be26:	e000      	b.n	802be2a <HAL_DMA_Start_IT+0x1c2>
 802be28:	2300      	movs	r3, #0
 802be2a:	2b00      	cmp	r3, #0
 802be2c:	d036      	beq.n	802be9c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 802be2e:	68fb      	ldr	r3, [r7, #12]
 802be30:	681b      	ldr	r3, [r3, #0]
 802be32:	681b      	ldr	r3, [r3, #0]
 802be34:	f023 021e 	bic.w	r2, r3, #30
 802be38:	68fb      	ldr	r3, [r7, #12]
 802be3a:	681b      	ldr	r3, [r3, #0]
 802be3c:	f042 0216 	orr.w	r2, r2, #22
 802be40:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 802be42:	68fb      	ldr	r3, [r7, #12]
 802be44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802be46:	2b00      	cmp	r3, #0
 802be48:	d03e      	beq.n	802bec8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 802be4a:	68fb      	ldr	r3, [r7, #12]
 802be4c:	681b      	ldr	r3, [r3, #0]
 802be4e:	681a      	ldr	r2, [r3, #0]
 802be50:	68fb      	ldr	r3, [r7, #12]
 802be52:	681b      	ldr	r3, [r3, #0]
 802be54:	f042 0208 	orr.w	r2, r2, #8
 802be58:	601a      	str	r2, [r3, #0]
 802be5a:	e035      	b.n	802bec8 <HAL_DMA_Start_IT+0x260>
 802be5c:	40020010 	.word	0x40020010
 802be60:	40020028 	.word	0x40020028
 802be64:	40020040 	.word	0x40020040
 802be68:	40020058 	.word	0x40020058
 802be6c:	40020070 	.word	0x40020070
 802be70:	40020088 	.word	0x40020088
 802be74:	400200a0 	.word	0x400200a0
 802be78:	400200b8 	.word	0x400200b8
 802be7c:	40020410 	.word	0x40020410
 802be80:	40020428 	.word	0x40020428
 802be84:	40020440 	.word	0x40020440
 802be88:	40020458 	.word	0x40020458
 802be8c:	40020470 	.word	0x40020470
 802be90:	40020488 	.word	0x40020488
 802be94:	400204a0 	.word	0x400204a0
 802be98:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 802be9c:	68fb      	ldr	r3, [r7, #12]
 802be9e:	681b      	ldr	r3, [r3, #0]
 802bea0:	681b      	ldr	r3, [r3, #0]
 802bea2:	f023 020e 	bic.w	r2, r3, #14
 802bea6:	68fb      	ldr	r3, [r7, #12]
 802bea8:	681b      	ldr	r3, [r3, #0]
 802beaa:	f042 020a 	orr.w	r2, r2, #10
 802beae:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 802beb0:	68fb      	ldr	r3, [r7, #12]
 802beb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802beb4:	2b00      	cmp	r3, #0
 802beb6:	d007      	beq.n	802bec8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 802beb8:	68fb      	ldr	r3, [r7, #12]
 802beba:	681b      	ldr	r3, [r3, #0]
 802bebc:	681a      	ldr	r2, [r3, #0]
 802bebe:	68fb      	ldr	r3, [r7, #12]
 802bec0:	681b      	ldr	r3, [r3, #0]
 802bec2:	f042 0204 	orr.w	r2, r2, #4
 802bec6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 802bec8:	68fb      	ldr	r3, [r7, #12]
 802beca:	681b      	ldr	r3, [r3, #0]
 802becc:	4a83      	ldr	r2, [pc, #524]	; (802c0dc <HAL_DMA_Start_IT+0x474>)
 802bece:	4293      	cmp	r3, r2
 802bed0:	d072      	beq.n	802bfb8 <HAL_DMA_Start_IT+0x350>
 802bed2:	68fb      	ldr	r3, [r7, #12]
 802bed4:	681b      	ldr	r3, [r3, #0]
 802bed6:	4a82      	ldr	r2, [pc, #520]	; (802c0e0 <HAL_DMA_Start_IT+0x478>)
 802bed8:	4293      	cmp	r3, r2
 802beda:	d06d      	beq.n	802bfb8 <HAL_DMA_Start_IT+0x350>
 802bedc:	68fb      	ldr	r3, [r7, #12]
 802bede:	681b      	ldr	r3, [r3, #0]
 802bee0:	4a80      	ldr	r2, [pc, #512]	; (802c0e4 <HAL_DMA_Start_IT+0x47c>)
 802bee2:	4293      	cmp	r3, r2
 802bee4:	d068      	beq.n	802bfb8 <HAL_DMA_Start_IT+0x350>
 802bee6:	68fb      	ldr	r3, [r7, #12]
 802bee8:	681b      	ldr	r3, [r3, #0]
 802beea:	4a7f      	ldr	r2, [pc, #508]	; (802c0e8 <HAL_DMA_Start_IT+0x480>)
 802beec:	4293      	cmp	r3, r2
 802beee:	d063      	beq.n	802bfb8 <HAL_DMA_Start_IT+0x350>
 802bef0:	68fb      	ldr	r3, [r7, #12]
 802bef2:	681b      	ldr	r3, [r3, #0]
 802bef4:	4a7d      	ldr	r2, [pc, #500]	; (802c0ec <HAL_DMA_Start_IT+0x484>)
 802bef6:	4293      	cmp	r3, r2
 802bef8:	d05e      	beq.n	802bfb8 <HAL_DMA_Start_IT+0x350>
 802befa:	68fb      	ldr	r3, [r7, #12]
 802befc:	681b      	ldr	r3, [r3, #0]
 802befe:	4a7c      	ldr	r2, [pc, #496]	; (802c0f0 <HAL_DMA_Start_IT+0x488>)
 802bf00:	4293      	cmp	r3, r2
 802bf02:	d059      	beq.n	802bfb8 <HAL_DMA_Start_IT+0x350>
 802bf04:	68fb      	ldr	r3, [r7, #12]
 802bf06:	681b      	ldr	r3, [r3, #0]
 802bf08:	4a7a      	ldr	r2, [pc, #488]	; (802c0f4 <HAL_DMA_Start_IT+0x48c>)
 802bf0a:	4293      	cmp	r3, r2
 802bf0c:	d054      	beq.n	802bfb8 <HAL_DMA_Start_IT+0x350>
 802bf0e:	68fb      	ldr	r3, [r7, #12]
 802bf10:	681b      	ldr	r3, [r3, #0]
 802bf12:	4a79      	ldr	r2, [pc, #484]	; (802c0f8 <HAL_DMA_Start_IT+0x490>)
 802bf14:	4293      	cmp	r3, r2
 802bf16:	d04f      	beq.n	802bfb8 <HAL_DMA_Start_IT+0x350>
 802bf18:	68fb      	ldr	r3, [r7, #12]
 802bf1a:	681b      	ldr	r3, [r3, #0]
 802bf1c:	4a77      	ldr	r2, [pc, #476]	; (802c0fc <HAL_DMA_Start_IT+0x494>)
 802bf1e:	4293      	cmp	r3, r2
 802bf20:	d04a      	beq.n	802bfb8 <HAL_DMA_Start_IT+0x350>
 802bf22:	68fb      	ldr	r3, [r7, #12]
 802bf24:	681b      	ldr	r3, [r3, #0]
 802bf26:	4a76      	ldr	r2, [pc, #472]	; (802c100 <HAL_DMA_Start_IT+0x498>)
 802bf28:	4293      	cmp	r3, r2
 802bf2a:	d045      	beq.n	802bfb8 <HAL_DMA_Start_IT+0x350>
 802bf2c:	68fb      	ldr	r3, [r7, #12]
 802bf2e:	681b      	ldr	r3, [r3, #0]
 802bf30:	4a74      	ldr	r2, [pc, #464]	; (802c104 <HAL_DMA_Start_IT+0x49c>)
 802bf32:	4293      	cmp	r3, r2
 802bf34:	d040      	beq.n	802bfb8 <HAL_DMA_Start_IT+0x350>
 802bf36:	68fb      	ldr	r3, [r7, #12]
 802bf38:	681b      	ldr	r3, [r3, #0]
 802bf3a:	4a73      	ldr	r2, [pc, #460]	; (802c108 <HAL_DMA_Start_IT+0x4a0>)
 802bf3c:	4293      	cmp	r3, r2
 802bf3e:	d03b      	beq.n	802bfb8 <HAL_DMA_Start_IT+0x350>
 802bf40:	68fb      	ldr	r3, [r7, #12]
 802bf42:	681b      	ldr	r3, [r3, #0]
 802bf44:	4a71      	ldr	r2, [pc, #452]	; (802c10c <HAL_DMA_Start_IT+0x4a4>)
 802bf46:	4293      	cmp	r3, r2
 802bf48:	d036      	beq.n	802bfb8 <HAL_DMA_Start_IT+0x350>
 802bf4a:	68fb      	ldr	r3, [r7, #12]
 802bf4c:	681b      	ldr	r3, [r3, #0]
 802bf4e:	4a70      	ldr	r2, [pc, #448]	; (802c110 <HAL_DMA_Start_IT+0x4a8>)
 802bf50:	4293      	cmp	r3, r2
 802bf52:	d031      	beq.n	802bfb8 <HAL_DMA_Start_IT+0x350>
 802bf54:	68fb      	ldr	r3, [r7, #12]
 802bf56:	681b      	ldr	r3, [r3, #0]
 802bf58:	4a6e      	ldr	r2, [pc, #440]	; (802c114 <HAL_DMA_Start_IT+0x4ac>)
 802bf5a:	4293      	cmp	r3, r2
 802bf5c:	d02c      	beq.n	802bfb8 <HAL_DMA_Start_IT+0x350>
 802bf5e:	68fb      	ldr	r3, [r7, #12]
 802bf60:	681b      	ldr	r3, [r3, #0]
 802bf62:	4a6d      	ldr	r2, [pc, #436]	; (802c118 <HAL_DMA_Start_IT+0x4b0>)
 802bf64:	4293      	cmp	r3, r2
 802bf66:	d027      	beq.n	802bfb8 <HAL_DMA_Start_IT+0x350>
 802bf68:	68fb      	ldr	r3, [r7, #12]
 802bf6a:	681b      	ldr	r3, [r3, #0]
 802bf6c:	4a6b      	ldr	r2, [pc, #428]	; (802c11c <HAL_DMA_Start_IT+0x4b4>)
 802bf6e:	4293      	cmp	r3, r2
 802bf70:	d022      	beq.n	802bfb8 <HAL_DMA_Start_IT+0x350>
 802bf72:	68fb      	ldr	r3, [r7, #12]
 802bf74:	681b      	ldr	r3, [r3, #0]
 802bf76:	4a6a      	ldr	r2, [pc, #424]	; (802c120 <HAL_DMA_Start_IT+0x4b8>)
 802bf78:	4293      	cmp	r3, r2
 802bf7a:	d01d      	beq.n	802bfb8 <HAL_DMA_Start_IT+0x350>
 802bf7c:	68fb      	ldr	r3, [r7, #12]
 802bf7e:	681b      	ldr	r3, [r3, #0]
 802bf80:	4a68      	ldr	r2, [pc, #416]	; (802c124 <HAL_DMA_Start_IT+0x4bc>)
 802bf82:	4293      	cmp	r3, r2
 802bf84:	d018      	beq.n	802bfb8 <HAL_DMA_Start_IT+0x350>
 802bf86:	68fb      	ldr	r3, [r7, #12]
 802bf88:	681b      	ldr	r3, [r3, #0]
 802bf8a:	4a67      	ldr	r2, [pc, #412]	; (802c128 <HAL_DMA_Start_IT+0x4c0>)
 802bf8c:	4293      	cmp	r3, r2
 802bf8e:	d013      	beq.n	802bfb8 <HAL_DMA_Start_IT+0x350>
 802bf90:	68fb      	ldr	r3, [r7, #12]
 802bf92:	681b      	ldr	r3, [r3, #0]
 802bf94:	4a65      	ldr	r2, [pc, #404]	; (802c12c <HAL_DMA_Start_IT+0x4c4>)
 802bf96:	4293      	cmp	r3, r2
 802bf98:	d00e      	beq.n	802bfb8 <HAL_DMA_Start_IT+0x350>
 802bf9a:	68fb      	ldr	r3, [r7, #12]
 802bf9c:	681b      	ldr	r3, [r3, #0]
 802bf9e:	4a64      	ldr	r2, [pc, #400]	; (802c130 <HAL_DMA_Start_IT+0x4c8>)
 802bfa0:	4293      	cmp	r3, r2
 802bfa2:	d009      	beq.n	802bfb8 <HAL_DMA_Start_IT+0x350>
 802bfa4:	68fb      	ldr	r3, [r7, #12]
 802bfa6:	681b      	ldr	r3, [r3, #0]
 802bfa8:	4a62      	ldr	r2, [pc, #392]	; (802c134 <HAL_DMA_Start_IT+0x4cc>)
 802bfaa:	4293      	cmp	r3, r2
 802bfac:	d004      	beq.n	802bfb8 <HAL_DMA_Start_IT+0x350>
 802bfae:	68fb      	ldr	r3, [r7, #12]
 802bfb0:	681b      	ldr	r3, [r3, #0]
 802bfb2:	4a61      	ldr	r2, [pc, #388]	; (802c138 <HAL_DMA_Start_IT+0x4d0>)
 802bfb4:	4293      	cmp	r3, r2
 802bfb6:	d101      	bne.n	802bfbc <HAL_DMA_Start_IT+0x354>
 802bfb8:	2301      	movs	r3, #1
 802bfba:	e000      	b.n	802bfbe <HAL_DMA_Start_IT+0x356>
 802bfbc:	2300      	movs	r3, #0
 802bfbe:	2b00      	cmp	r3, #0
 802bfc0:	d01a      	beq.n	802bff8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 802bfc2:	68fb      	ldr	r3, [r7, #12]
 802bfc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802bfc6:	681b      	ldr	r3, [r3, #0]
 802bfc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 802bfcc:	2b00      	cmp	r3, #0
 802bfce:	d007      	beq.n	802bfe0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 802bfd0:	68fb      	ldr	r3, [r7, #12]
 802bfd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802bfd4:	681a      	ldr	r2, [r3, #0]
 802bfd6:	68fb      	ldr	r3, [r7, #12]
 802bfd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802bfda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 802bfde:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 802bfe0:	68fb      	ldr	r3, [r7, #12]
 802bfe2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802bfe4:	2b00      	cmp	r3, #0
 802bfe6:	d007      	beq.n	802bff8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 802bfe8:	68fb      	ldr	r3, [r7, #12]
 802bfea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802bfec:	681a      	ldr	r2, [r3, #0]
 802bfee:	68fb      	ldr	r3, [r7, #12]
 802bff0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802bff2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 802bff6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 802bff8:	68fb      	ldr	r3, [r7, #12]
 802bffa:	681b      	ldr	r3, [r3, #0]
 802bffc:	4a37      	ldr	r2, [pc, #220]	; (802c0dc <HAL_DMA_Start_IT+0x474>)
 802bffe:	4293      	cmp	r3, r2
 802c000:	d04a      	beq.n	802c098 <HAL_DMA_Start_IT+0x430>
 802c002:	68fb      	ldr	r3, [r7, #12]
 802c004:	681b      	ldr	r3, [r3, #0]
 802c006:	4a36      	ldr	r2, [pc, #216]	; (802c0e0 <HAL_DMA_Start_IT+0x478>)
 802c008:	4293      	cmp	r3, r2
 802c00a:	d045      	beq.n	802c098 <HAL_DMA_Start_IT+0x430>
 802c00c:	68fb      	ldr	r3, [r7, #12]
 802c00e:	681b      	ldr	r3, [r3, #0]
 802c010:	4a34      	ldr	r2, [pc, #208]	; (802c0e4 <HAL_DMA_Start_IT+0x47c>)
 802c012:	4293      	cmp	r3, r2
 802c014:	d040      	beq.n	802c098 <HAL_DMA_Start_IT+0x430>
 802c016:	68fb      	ldr	r3, [r7, #12]
 802c018:	681b      	ldr	r3, [r3, #0]
 802c01a:	4a33      	ldr	r2, [pc, #204]	; (802c0e8 <HAL_DMA_Start_IT+0x480>)
 802c01c:	4293      	cmp	r3, r2
 802c01e:	d03b      	beq.n	802c098 <HAL_DMA_Start_IT+0x430>
 802c020:	68fb      	ldr	r3, [r7, #12]
 802c022:	681b      	ldr	r3, [r3, #0]
 802c024:	4a31      	ldr	r2, [pc, #196]	; (802c0ec <HAL_DMA_Start_IT+0x484>)
 802c026:	4293      	cmp	r3, r2
 802c028:	d036      	beq.n	802c098 <HAL_DMA_Start_IT+0x430>
 802c02a:	68fb      	ldr	r3, [r7, #12]
 802c02c:	681b      	ldr	r3, [r3, #0]
 802c02e:	4a30      	ldr	r2, [pc, #192]	; (802c0f0 <HAL_DMA_Start_IT+0x488>)
 802c030:	4293      	cmp	r3, r2
 802c032:	d031      	beq.n	802c098 <HAL_DMA_Start_IT+0x430>
 802c034:	68fb      	ldr	r3, [r7, #12]
 802c036:	681b      	ldr	r3, [r3, #0]
 802c038:	4a2e      	ldr	r2, [pc, #184]	; (802c0f4 <HAL_DMA_Start_IT+0x48c>)
 802c03a:	4293      	cmp	r3, r2
 802c03c:	d02c      	beq.n	802c098 <HAL_DMA_Start_IT+0x430>
 802c03e:	68fb      	ldr	r3, [r7, #12]
 802c040:	681b      	ldr	r3, [r3, #0]
 802c042:	4a2d      	ldr	r2, [pc, #180]	; (802c0f8 <HAL_DMA_Start_IT+0x490>)
 802c044:	4293      	cmp	r3, r2
 802c046:	d027      	beq.n	802c098 <HAL_DMA_Start_IT+0x430>
 802c048:	68fb      	ldr	r3, [r7, #12]
 802c04a:	681b      	ldr	r3, [r3, #0]
 802c04c:	4a2b      	ldr	r2, [pc, #172]	; (802c0fc <HAL_DMA_Start_IT+0x494>)
 802c04e:	4293      	cmp	r3, r2
 802c050:	d022      	beq.n	802c098 <HAL_DMA_Start_IT+0x430>
 802c052:	68fb      	ldr	r3, [r7, #12]
 802c054:	681b      	ldr	r3, [r3, #0]
 802c056:	4a2a      	ldr	r2, [pc, #168]	; (802c100 <HAL_DMA_Start_IT+0x498>)
 802c058:	4293      	cmp	r3, r2
 802c05a:	d01d      	beq.n	802c098 <HAL_DMA_Start_IT+0x430>
 802c05c:	68fb      	ldr	r3, [r7, #12]
 802c05e:	681b      	ldr	r3, [r3, #0]
 802c060:	4a28      	ldr	r2, [pc, #160]	; (802c104 <HAL_DMA_Start_IT+0x49c>)
 802c062:	4293      	cmp	r3, r2
 802c064:	d018      	beq.n	802c098 <HAL_DMA_Start_IT+0x430>
 802c066:	68fb      	ldr	r3, [r7, #12]
 802c068:	681b      	ldr	r3, [r3, #0]
 802c06a:	4a27      	ldr	r2, [pc, #156]	; (802c108 <HAL_DMA_Start_IT+0x4a0>)
 802c06c:	4293      	cmp	r3, r2
 802c06e:	d013      	beq.n	802c098 <HAL_DMA_Start_IT+0x430>
 802c070:	68fb      	ldr	r3, [r7, #12]
 802c072:	681b      	ldr	r3, [r3, #0]
 802c074:	4a25      	ldr	r2, [pc, #148]	; (802c10c <HAL_DMA_Start_IT+0x4a4>)
 802c076:	4293      	cmp	r3, r2
 802c078:	d00e      	beq.n	802c098 <HAL_DMA_Start_IT+0x430>
 802c07a:	68fb      	ldr	r3, [r7, #12]
 802c07c:	681b      	ldr	r3, [r3, #0]
 802c07e:	4a24      	ldr	r2, [pc, #144]	; (802c110 <HAL_DMA_Start_IT+0x4a8>)
 802c080:	4293      	cmp	r3, r2
 802c082:	d009      	beq.n	802c098 <HAL_DMA_Start_IT+0x430>
 802c084:	68fb      	ldr	r3, [r7, #12]
 802c086:	681b      	ldr	r3, [r3, #0]
 802c088:	4a22      	ldr	r2, [pc, #136]	; (802c114 <HAL_DMA_Start_IT+0x4ac>)
 802c08a:	4293      	cmp	r3, r2
 802c08c:	d004      	beq.n	802c098 <HAL_DMA_Start_IT+0x430>
 802c08e:	68fb      	ldr	r3, [r7, #12]
 802c090:	681b      	ldr	r3, [r3, #0]
 802c092:	4a21      	ldr	r2, [pc, #132]	; (802c118 <HAL_DMA_Start_IT+0x4b0>)
 802c094:	4293      	cmp	r3, r2
 802c096:	d108      	bne.n	802c0aa <HAL_DMA_Start_IT+0x442>
 802c098:	68fb      	ldr	r3, [r7, #12]
 802c09a:	681b      	ldr	r3, [r3, #0]
 802c09c:	681a      	ldr	r2, [r3, #0]
 802c09e:	68fb      	ldr	r3, [r7, #12]
 802c0a0:	681b      	ldr	r3, [r3, #0]
 802c0a2:	f042 0201 	orr.w	r2, r2, #1
 802c0a6:	601a      	str	r2, [r3, #0]
 802c0a8:	e012      	b.n	802c0d0 <HAL_DMA_Start_IT+0x468>
 802c0aa:	68fb      	ldr	r3, [r7, #12]
 802c0ac:	681b      	ldr	r3, [r3, #0]
 802c0ae:	681a      	ldr	r2, [r3, #0]
 802c0b0:	68fb      	ldr	r3, [r7, #12]
 802c0b2:	681b      	ldr	r3, [r3, #0]
 802c0b4:	f042 0201 	orr.w	r2, r2, #1
 802c0b8:	601a      	str	r2, [r3, #0]
 802c0ba:	e009      	b.n	802c0d0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 802c0bc:	68fb      	ldr	r3, [r7, #12]
 802c0be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 802c0c2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 802c0c4:	68fb      	ldr	r3, [r7, #12]
 802c0c6:	2200      	movs	r2, #0
 802c0c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 802c0cc:	2301      	movs	r3, #1
 802c0ce:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 802c0d0:	7dfb      	ldrb	r3, [r7, #23]
}
 802c0d2:	4618      	mov	r0, r3
 802c0d4:	3718      	adds	r7, #24
 802c0d6:	46bd      	mov	sp, r7
 802c0d8:	bd80      	pop	{r7, pc}
 802c0da:	bf00      	nop
 802c0dc:	40020010 	.word	0x40020010
 802c0e0:	40020028 	.word	0x40020028
 802c0e4:	40020040 	.word	0x40020040
 802c0e8:	40020058 	.word	0x40020058
 802c0ec:	40020070 	.word	0x40020070
 802c0f0:	40020088 	.word	0x40020088
 802c0f4:	400200a0 	.word	0x400200a0
 802c0f8:	400200b8 	.word	0x400200b8
 802c0fc:	40020410 	.word	0x40020410
 802c100:	40020428 	.word	0x40020428
 802c104:	40020440 	.word	0x40020440
 802c108:	40020458 	.word	0x40020458
 802c10c:	40020470 	.word	0x40020470
 802c110:	40020488 	.word	0x40020488
 802c114:	400204a0 	.word	0x400204a0
 802c118:	400204b8 	.word	0x400204b8
 802c11c:	58025408 	.word	0x58025408
 802c120:	5802541c 	.word	0x5802541c
 802c124:	58025430 	.word	0x58025430
 802c128:	58025444 	.word	0x58025444
 802c12c:	58025458 	.word	0x58025458
 802c130:	5802546c 	.word	0x5802546c
 802c134:	58025480 	.word	0x58025480
 802c138:	58025494 	.word	0x58025494

0802c13c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 802c13c:	b580      	push	{r7, lr}
 802c13e:	b086      	sub	sp, #24
 802c140:	af00      	add	r7, sp, #0
 802c142:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 802c144:	f7fe fd38 	bl	802abb8 <HAL_GetTick>
 802c148:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 802c14a:	687b      	ldr	r3, [r7, #4]
 802c14c:	2b00      	cmp	r3, #0
 802c14e:	d101      	bne.n	802c154 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 802c150:	2301      	movs	r3, #1
 802c152:	e2dc      	b.n	802c70e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 802c154:	687b      	ldr	r3, [r7, #4]
 802c156:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 802c15a:	b2db      	uxtb	r3, r3
 802c15c:	2b02      	cmp	r3, #2
 802c15e:	d008      	beq.n	802c172 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 802c160:	687b      	ldr	r3, [r7, #4]
 802c162:	2280      	movs	r2, #128	; 0x80
 802c164:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 802c166:	687b      	ldr	r3, [r7, #4]
 802c168:	2200      	movs	r2, #0
 802c16a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 802c16e:	2301      	movs	r3, #1
 802c170:	e2cd      	b.n	802c70e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 802c172:	687b      	ldr	r3, [r7, #4]
 802c174:	681b      	ldr	r3, [r3, #0]
 802c176:	4a76      	ldr	r2, [pc, #472]	; (802c350 <HAL_DMA_Abort+0x214>)
 802c178:	4293      	cmp	r3, r2
 802c17a:	d04a      	beq.n	802c212 <HAL_DMA_Abort+0xd6>
 802c17c:	687b      	ldr	r3, [r7, #4]
 802c17e:	681b      	ldr	r3, [r3, #0]
 802c180:	4a74      	ldr	r2, [pc, #464]	; (802c354 <HAL_DMA_Abort+0x218>)
 802c182:	4293      	cmp	r3, r2
 802c184:	d045      	beq.n	802c212 <HAL_DMA_Abort+0xd6>
 802c186:	687b      	ldr	r3, [r7, #4]
 802c188:	681b      	ldr	r3, [r3, #0]
 802c18a:	4a73      	ldr	r2, [pc, #460]	; (802c358 <HAL_DMA_Abort+0x21c>)
 802c18c:	4293      	cmp	r3, r2
 802c18e:	d040      	beq.n	802c212 <HAL_DMA_Abort+0xd6>
 802c190:	687b      	ldr	r3, [r7, #4]
 802c192:	681b      	ldr	r3, [r3, #0]
 802c194:	4a71      	ldr	r2, [pc, #452]	; (802c35c <HAL_DMA_Abort+0x220>)
 802c196:	4293      	cmp	r3, r2
 802c198:	d03b      	beq.n	802c212 <HAL_DMA_Abort+0xd6>
 802c19a:	687b      	ldr	r3, [r7, #4]
 802c19c:	681b      	ldr	r3, [r3, #0]
 802c19e:	4a70      	ldr	r2, [pc, #448]	; (802c360 <HAL_DMA_Abort+0x224>)
 802c1a0:	4293      	cmp	r3, r2
 802c1a2:	d036      	beq.n	802c212 <HAL_DMA_Abort+0xd6>
 802c1a4:	687b      	ldr	r3, [r7, #4]
 802c1a6:	681b      	ldr	r3, [r3, #0]
 802c1a8:	4a6e      	ldr	r2, [pc, #440]	; (802c364 <HAL_DMA_Abort+0x228>)
 802c1aa:	4293      	cmp	r3, r2
 802c1ac:	d031      	beq.n	802c212 <HAL_DMA_Abort+0xd6>
 802c1ae:	687b      	ldr	r3, [r7, #4]
 802c1b0:	681b      	ldr	r3, [r3, #0]
 802c1b2:	4a6d      	ldr	r2, [pc, #436]	; (802c368 <HAL_DMA_Abort+0x22c>)
 802c1b4:	4293      	cmp	r3, r2
 802c1b6:	d02c      	beq.n	802c212 <HAL_DMA_Abort+0xd6>
 802c1b8:	687b      	ldr	r3, [r7, #4]
 802c1ba:	681b      	ldr	r3, [r3, #0]
 802c1bc:	4a6b      	ldr	r2, [pc, #428]	; (802c36c <HAL_DMA_Abort+0x230>)
 802c1be:	4293      	cmp	r3, r2
 802c1c0:	d027      	beq.n	802c212 <HAL_DMA_Abort+0xd6>
 802c1c2:	687b      	ldr	r3, [r7, #4]
 802c1c4:	681b      	ldr	r3, [r3, #0]
 802c1c6:	4a6a      	ldr	r2, [pc, #424]	; (802c370 <HAL_DMA_Abort+0x234>)
 802c1c8:	4293      	cmp	r3, r2
 802c1ca:	d022      	beq.n	802c212 <HAL_DMA_Abort+0xd6>
 802c1cc:	687b      	ldr	r3, [r7, #4]
 802c1ce:	681b      	ldr	r3, [r3, #0]
 802c1d0:	4a68      	ldr	r2, [pc, #416]	; (802c374 <HAL_DMA_Abort+0x238>)
 802c1d2:	4293      	cmp	r3, r2
 802c1d4:	d01d      	beq.n	802c212 <HAL_DMA_Abort+0xd6>
 802c1d6:	687b      	ldr	r3, [r7, #4]
 802c1d8:	681b      	ldr	r3, [r3, #0]
 802c1da:	4a67      	ldr	r2, [pc, #412]	; (802c378 <HAL_DMA_Abort+0x23c>)
 802c1dc:	4293      	cmp	r3, r2
 802c1de:	d018      	beq.n	802c212 <HAL_DMA_Abort+0xd6>
 802c1e0:	687b      	ldr	r3, [r7, #4]
 802c1e2:	681b      	ldr	r3, [r3, #0]
 802c1e4:	4a65      	ldr	r2, [pc, #404]	; (802c37c <HAL_DMA_Abort+0x240>)
 802c1e6:	4293      	cmp	r3, r2
 802c1e8:	d013      	beq.n	802c212 <HAL_DMA_Abort+0xd6>
 802c1ea:	687b      	ldr	r3, [r7, #4]
 802c1ec:	681b      	ldr	r3, [r3, #0]
 802c1ee:	4a64      	ldr	r2, [pc, #400]	; (802c380 <HAL_DMA_Abort+0x244>)
 802c1f0:	4293      	cmp	r3, r2
 802c1f2:	d00e      	beq.n	802c212 <HAL_DMA_Abort+0xd6>
 802c1f4:	687b      	ldr	r3, [r7, #4]
 802c1f6:	681b      	ldr	r3, [r3, #0]
 802c1f8:	4a62      	ldr	r2, [pc, #392]	; (802c384 <HAL_DMA_Abort+0x248>)
 802c1fa:	4293      	cmp	r3, r2
 802c1fc:	d009      	beq.n	802c212 <HAL_DMA_Abort+0xd6>
 802c1fe:	687b      	ldr	r3, [r7, #4]
 802c200:	681b      	ldr	r3, [r3, #0]
 802c202:	4a61      	ldr	r2, [pc, #388]	; (802c388 <HAL_DMA_Abort+0x24c>)
 802c204:	4293      	cmp	r3, r2
 802c206:	d004      	beq.n	802c212 <HAL_DMA_Abort+0xd6>
 802c208:	687b      	ldr	r3, [r7, #4]
 802c20a:	681b      	ldr	r3, [r3, #0]
 802c20c:	4a5f      	ldr	r2, [pc, #380]	; (802c38c <HAL_DMA_Abort+0x250>)
 802c20e:	4293      	cmp	r3, r2
 802c210:	d101      	bne.n	802c216 <HAL_DMA_Abort+0xda>
 802c212:	2301      	movs	r3, #1
 802c214:	e000      	b.n	802c218 <HAL_DMA_Abort+0xdc>
 802c216:	2300      	movs	r3, #0
 802c218:	2b00      	cmp	r3, #0
 802c21a:	d013      	beq.n	802c244 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 802c21c:	687b      	ldr	r3, [r7, #4]
 802c21e:	681b      	ldr	r3, [r3, #0]
 802c220:	681a      	ldr	r2, [r3, #0]
 802c222:	687b      	ldr	r3, [r7, #4]
 802c224:	681b      	ldr	r3, [r3, #0]
 802c226:	f022 021e 	bic.w	r2, r2, #30
 802c22a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 802c22c:	687b      	ldr	r3, [r7, #4]
 802c22e:	681b      	ldr	r3, [r3, #0]
 802c230:	695a      	ldr	r2, [r3, #20]
 802c232:	687b      	ldr	r3, [r7, #4]
 802c234:	681b      	ldr	r3, [r3, #0]
 802c236:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 802c23a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 802c23c:	687b      	ldr	r3, [r7, #4]
 802c23e:	681b      	ldr	r3, [r3, #0]
 802c240:	617b      	str	r3, [r7, #20]
 802c242:	e00a      	b.n	802c25a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 802c244:	687b      	ldr	r3, [r7, #4]
 802c246:	681b      	ldr	r3, [r3, #0]
 802c248:	681a      	ldr	r2, [r3, #0]
 802c24a:	687b      	ldr	r3, [r7, #4]
 802c24c:	681b      	ldr	r3, [r3, #0]
 802c24e:	f022 020e 	bic.w	r2, r2, #14
 802c252:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 802c254:	687b      	ldr	r3, [r7, #4]
 802c256:	681b      	ldr	r3, [r3, #0]
 802c258:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 802c25a:	687b      	ldr	r3, [r7, #4]
 802c25c:	681b      	ldr	r3, [r3, #0]
 802c25e:	4a3c      	ldr	r2, [pc, #240]	; (802c350 <HAL_DMA_Abort+0x214>)
 802c260:	4293      	cmp	r3, r2
 802c262:	d072      	beq.n	802c34a <HAL_DMA_Abort+0x20e>
 802c264:	687b      	ldr	r3, [r7, #4]
 802c266:	681b      	ldr	r3, [r3, #0]
 802c268:	4a3a      	ldr	r2, [pc, #232]	; (802c354 <HAL_DMA_Abort+0x218>)
 802c26a:	4293      	cmp	r3, r2
 802c26c:	d06d      	beq.n	802c34a <HAL_DMA_Abort+0x20e>
 802c26e:	687b      	ldr	r3, [r7, #4]
 802c270:	681b      	ldr	r3, [r3, #0]
 802c272:	4a39      	ldr	r2, [pc, #228]	; (802c358 <HAL_DMA_Abort+0x21c>)
 802c274:	4293      	cmp	r3, r2
 802c276:	d068      	beq.n	802c34a <HAL_DMA_Abort+0x20e>
 802c278:	687b      	ldr	r3, [r7, #4]
 802c27a:	681b      	ldr	r3, [r3, #0]
 802c27c:	4a37      	ldr	r2, [pc, #220]	; (802c35c <HAL_DMA_Abort+0x220>)
 802c27e:	4293      	cmp	r3, r2
 802c280:	d063      	beq.n	802c34a <HAL_DMA_Abort+0x20e>
 802c282:	687b      	ldr	r3, [r7, #4]
 802c284:	681b      	ldr	r3, [r3, #0]
 802c286:	4a36      	ldr	r2, [pc, #216]	; (802c360 <HAL_DMA_Abort+0x224>)
 802c288:	4293      	cmp	r3, r2
 802c28a:	d05e      	beq.n	802c34a <HAL_DMA_Abort+0x20e>
 802c28c:	687b      	ldr	r3, [r7, #4]
 802c28e:	681b      	ldr	r3, [r3, #0]
 802c290:	4a34      	ldr	r2, [pc, #208]	; (802c364 <HAL_DMA_Abort+0x228>)
 802c292:	4293      	cmp	r3, r2
 802c294:	d059      	beq.n	802c34a <HAL_DMA_Abort+0x20e>
 802c296:	687b      	ldr	r3, [r7, #4]
 802c298:	681b      	ldr	r3, [r3, #0]
 802c29a:	4a33      	ldr	r2, [pc, #204]	; (802c368 <HAL_DMA_Abort+0x22c>)
 802c29c:	4293      	cmp	r3, r2
 802c29e:	d054      	beq.n	802c34a <HAL_DMA_Abort+0x20e>
 802c2a0:	687b      	ldr	r3, [r7, #4]
 802c2a2:	681b      	ldr	r3, [r3, #0]
 802c2a4:	4a31      	ldr	r2, [pc, #196]	; (802c36c <HAL_DMA_Abort+0x230>)
 802c2a6:	4293      	cmp	r3, r2
 802c2a8:	d04f      	beq.n	802c34a <HAL_DMA_Abort+0x20e>
 802c2aa:	687b      	ldr	r3, [r7, #4]
 802c2ac:	681b      	ldr	r3, [r3, #0]
 802c2ae:	4a30      	ldr	r2, [pc, #192]	; (802c370 <HAL_DMA_Abort+0x234>)
 802c2b0:	4293      	cmp	r3, r2
 802c2b2:	d04a      	beq.n	802c34a <HAL_DMA_Abort+0x20e>
 802c2b4:	687b      	ldr	r3, [r7, #4]
 802c2b6:	681b      	ldr	r3, [r3, #0]
 802c2b8:	4a2e      	ldr	r2, [pc, #184]	; (802c374 <HAL_DMA_Abort+0x238>)
 802c2ba:	4293      	cmp	r3, r2
 802c2bc:	d045      	beq.n	802c34a <HAL_DMA_Abort+0x20e>
 802c2be:	687b      	ldr	r3, [r7, #4]
 802c2c0:	681b      	ldr	r3, [r3, #0]
 802c2c2:	4a2d      	ldr	r2, [pc, #180]	; (802c378 <HAL_DMA_Abort+0x23c>)
 802c2c4:	4293      	cmp	r3, r2
 802c2c6:	d040      	beq.n	802c34a <HAL_DMA_Abort+0x20e>
 802c2c8:	687b      	ldr	r3, [r7, #4]
 802c2ca:	681b      	ldr	r3, [r3, #0]
 802c2cc:	4a2b      	ldr	r2, [pc, #172]	; (802c37c <HAL_DMA_Abort+0x240>)
 802c2ce:	4293      	cmp	r3, r2
 802c2d0:	d03b      	beq.n	802c34a <HAL_DMA_Abort+0x20e>
 802c2d2:	687b      	ldr	r3, [r7, #4]
 802c2d4:	681b      	ldr	r3, [r3, #0]
 802c2d6:	4a2a      	ldr	r2, [pc, #168]	; (802c380 <HAL_DMA_Abort+0x244>)
 802c2d8:	4293      	cmp	r3, r2
 802c2da:	d036      	beq.n	802c34a <HAL_DMA_Abort+0x20e>
 802c2dc:	687b      	ldr	r3, [r7, #4]
 802c2de:	681b      	ldr	r3, [r3, #0]
 802c2e0:	4a28      	ldr	r2, [pc, #160]	; (802c384 <HAL_DMA_Abort+0x248>)
 802c2e2:	4293      	cmp	r3, r2
 802c2e4:	d031      	beq.n	802c34a <HAL_DMA_Abort+0x20e>
 802c2e6:	687b      	ldr	r3, [r7, #4]
 802c2e8:	681b      	ldr	r3, [r3, #0]
 802c2ea:	4a27      	ldr	r2, [pc, #156]	; (802c388 <HAL_DMA_Abort+0x24c>)
 802c2ec:	4293      	cmp	r3, r2
 802c2ee:	d02c      	beq.n	802c34a <HAL_DMA_Abort+0x20e>
 802c2f0:	687b      	ldr	r3, [r7, #4]
 802c2f2:	681b      	ldr	r3, [r3, #0]
 802c2f4:	4a25      	ldr	r2, [pc, #148]	; (802c38c <HAL_DMA_Abort+0x250>)
 802c2f6:	4293      	cmp	r3, r2
 802c2f8:	d027      	beq.n	802c34a <HAL_DMA_Abort+0x20e>
 802c2fa:	687b      	ldr	r3, [r7, #4]
 802c2fc:	681b      	ldr	r3, [r3, #0]
 802c2fe:	4a24      	ldr	r2, [pc, #144]	; (802c390 <HAL_DMA_Abort+0x254>)
 802c300:	4293      	cmp	r3, r2
 802c302:	d022      	beq.n	802c34a <HAL_DMA_Abort+0x20e>
 802c304:	687b      	ldr	r3, [r7, #4]
 802c306:	681b      	ldr	r3, [r3, #0]
 802c308:	4a22      	ldr	r2, [pc, #136]	; (802c394 <HAL_DMA_Abort+0x258>)
 802c30a:	4293      	cmp	r3, r2
 802c30c:	d01d      	beq.n	802c34a <HAL_DMA_Abort+0x20e>
 802c30e:	687b      	ldr	r3, [r7, #4]
 802c310:	681b      	ldr	r3, [r3, #0]
 802c312:	4a21      	ldr	r2, [pc, #132]	; (802c398 <HAL_DMA_Abort+0x25c>)
 802c314:	4293      	cmp	r3, r2
 802c316:	d018      	beq.n	802c34a <HAL_DMA_Abort+0x20e>
 802c318:	687b      	ldr	r3, [r7, #4]
 802c31a:	681b      	ldr	r3, [r3, #0]
 802c31c:	4a1f      	ldr	r2, [pc, #124]	; (802c39c <HAL_DMA_Abort+0x260>)
 802c31e:	4293      	cmp	r3, r2
 802c320:	d013      	beq.n	802c34a <HAL_DMA_Abort+0x20e>
 802c322:	687b      	ldr	r3, [r7, #4]
 802c324:	681b      	ldr	r3, [r3, #0]
 802c326:	4a1e      	ldr	r2, [pc, #120]	; (802c3a0 <HAL_DMA_Abort+0x264>)
 802c328:	4293      	cmp	r3, r2
 802c32a:	d00e      	beq.n	802c34a <HAL_DMA_Abort+0x20e>
 802c32c:	687b      	ldr	r3, [r7, #4]
 802c32e:	681b      	ldr	r3, [r3, #0]
 802c330:	4a1c      	ldr	r2, [pc, #112]	; (802c3a4 <HAL_DMA_Abort+0x268>)
 802c332:	4293      	cmp	r3, r2
 802c334:	d009      	beq.n	802c34a <HAL_DMA_Abort+0x20e>
 802c336:	687b      	ldr	r3, [r7, #4]
 802c338:	681b      	ldr	r3, [r3, #0]
 802c33a:	4a1b      	ldr	r2, [pc, #108]	; (802c3a8 <HAL_DMA_Abort+0x26c>)
 802c33c:	4293      	cmp	r3, r2
 802c33e:	d004      	beq.n	802c34a <HAL_DMA_Abort+0x20e>
 802c340:	687b      	ldr	r3, [r7, #4]
 802c342:	681b      	ldr	r3, [r3, #0]
 802c344:	4a19      	ldr	r2, [pc, #100]	; (802c3ac <HAL_DMA_Abort+0x270>)
 802c346:	4293      	cmp	r3, r2
 802c348:	d132      	bne.n	802c3b0 <HAL_DMA_Abort+0x274>
 802c34a:	2301      	movs	r3, #1
 802c34c:	e031      	b.n	802c3b2 <HAL_DMA_Abort+0x276>
 802c34e:	bf00      	nop
 802c350:	40020010 	.word	0x40020010
 802c354:	40020028 	.word	0x40020028
 802c358:	40020040 	.word	0x40020040
 802c35c:	40020058 	.word	0x40020058
 802c360:	40020070 	.word	0x40020070
 802c364:	40020088 	.word	0x40020088
 802c368:	400200a0 	.word	0x400200a0
 802c36c:	400200b8 	.word	0x400200b8
 802c370:	40020410 	.word	0x40020410
 802c374:	40020428 	.word	0x40020428
 802c378:	40020440 	.word	0x40020440
 802c37c:	40020458 	.word	0x40020458
 802c380:	40020470 	.word	0x40020470
 802c384:	40020488 	.word	0x40020488
 802c388:	400204a0 	.word	0x400204a0
 802c38c:	400204b8 	.word	0x400204b8
 802c390:	58025408 	.word	0x58025408
 802c394:	5802541c 	.word	0x5802541c
 802c398:	58025430 	.word	0x58025430
 802c39c:	58025444 	.word	0x58025444
 802c3a0:	58025458 	.word	0x58025458
 802c3a4:	5802546c 	.word	0x5802546c
 802c3a8:	58025480 	.word	0x58025480
 802c3ac:	58025494 	.word	0x58025494
 802c3b0:	2300      	movs	r3, #0
 802c3b2:	2b00      	cmp	r3, #0
 802c3b4:	d007      	beq.n	802c3c6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 802c3b6:	687b      	ldr	r3, [r7, #4]
 802c3b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802c3ba:	681a      	ldr	r2, [r3, #0]
 802c3bc:	687b      	ldr	r3, [r7, #4]
 802c3be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802c3c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 802c3c4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 802c3c6:	687b      	ldr	r3, [r7, #4]
 802c3c8:	681b      	ldr	r3, [r3, #0]
 802c3ca:	4a6d      	ldr	r2, [pc, #436]	; (802c580 <HAL_DMA_Abort+0x444>)
 802c3cc:	4293      	cmp	r3, r2
 802c3ce:	d04a      	beq.n	802c466 <HAL_DMA_Abort+0x32a>
 802c3d0:	687b      	ldr	r3, [r7, #4]
 802c3d2:	681b      	ldr	r3, [r3, #0]
 802c3d4:	4a6b      	ldr	r2, [pc, #428]	; (802c584 <HAL_DMA_Abort+0x448>)
 802c3d6:	4293      	cmp	r3, r2
 802c3d8:	d045      	beq.n	802c466 <HAL_DMA_Abort+0x32a>
 802c3da:	687b      	ldr	r3, [r7, #4]
 802c3dc:	681b      	ldr	r3, [r3, #0]
 802c3de:	4a6a      	ldr	r2, [pc, #424]	; (802c588 <HAL_DMA_Abort+0x44c>)
 802c3e0:	4293      	cmp	r3, r2
 802c3e2:	d040      	beq.n	802c466 <HAL_DMA_Abort+0x32a>
 802c3e4:	687b      	ldr	r3, [r7, #4]
 802c3e6:	681b      	ldr	r3, [r3, #0]
 802c3e8:	4a68      	ldr	r2, [pc, #416]	; (802c58c <HAL_DMA_Abort+0x450>)
 802c3ea:	4293      	cmp	r3, r2
 802c3ec:	d03b      	beq.n	802c466 <HAL_DMA_Abort+0x32a>
 802c3ee:	687b      	ldr	r3, [r7, #4]
 802c3f0:	681b      	ldr	r3, [r3, #0]
 802c3f2:	4a67      	ldr	r2, [pc, #412]	; (802c590 <HAL_DMA_Abort+0x454>)
 802c3f4:	4293      	cmp	r3, r2
 802c3f6:	d036      	beq.n	802c466 <HAL_DMA_Abort+0x32a>
 802c3f8:	687b      	ldr	r3, [r7, #4]
 802c3fa:	681b      	ldr	r3, [r3, #0]
 802c3fc:	4a65      	ldr	r2, [pc, #404]	; (802c594 <HAL_DMA_Abort+0x458>)
 802c3fe:	4293      	cmp	r3, r2
 802c400:	d031      	beq.n	802c466 <HAL_DMA_Abort+0x32a>
 802c402:	687b      	ldr	r3, [r7, #4]
 802c404:	681b      	ldr	r3, [r3, #0]
 802c406:	4a64      	ldr	r2, [pc, #400]	; (802c598 <HAL_DMA_Abort+0x45c>)
 802c408:	4293      	cmp	r3, r2
 802c40a:	d02c      	beq.n	802c466 <HAL_DMA_Abort+0x32a>
 802c40c:	687b      	ldr	r3, [r7, #4]
 802c40e:	681b      	ldr	r3, [r3, #0]
 802c410:	4a62      	ldr	r2, [pc, #392]	; (802c59c <HAL_DMA_Abort+0x460>)
 802c412:	4293      	cmp	r3, r2
 802c414:	d027      	beq.n	802c466 <HAL_DMA_Abort+0x32a>
 802c416:	687b      	ldr	r3, [r7, #4]
 802c418:	681b      	ldr	r3, [r3, #0]
 802c41a:	4a61      	ldr	r2, [pc, #388]	; (802c5a0 <HAL_DMA_Abort+0x464>)
 802c41c:	4293      	cmp	r3, r2
 802c41e:	d022      	beq.n	802c466 <HAL_DMA_Abort+0x32a>
 802c420:	687b      	ldr	r3, [r7, #4]
 802c422:	681b      	ldr	r3, [r3, #0]
 802c424:	4a5f      	ldr	r2, [pc, #380]	; (802c5a4 <HAL_DMA_Abort+0x468>)
 802c426:	4293      	cmp	r3, r2
 802c428:	d01d      	beq.n	802c466 <HAL_DMA_Abort+0x32a>
 802c42a:	687b      	ldr	r3, [r7, #4]
 802c42c:	681b      	ldr	r3, [r3, #0]
 802c42e:	4a5e      	ldr	r2, [pc, #376]	; (802c5a8 <HAL_DMA_Abort+0x46c>)
 802c430:	4293      	cmp	r3, r2
 802c432:	d018      	beq.n	802c466 <HAL_DMA_Abort+0x32a>
 802c434:	687b      	ldr	r3, [r7, #4]
 802c436:	681b      	ldr	r3, [r3, #0]
 802c438:	4a5c      	ldr	r2, [pc, #368]	; (802c5ac <HAL_DMA_Abort+0x470>)
 802c43a:	4293      	cmp	r3, r2
 802c43c:	d013      	beq.n	802c466 <HAL_DMA_Abort+0x32a>
 802c43e:	687b      	ldr	r3, [r7, #4]
 802c440:	681b      	ldr	r3, [r3, #0]
 802c442:	4a5b      	ldr	r2, [pc, #364]	; (802c5b0 <HAL_DMA_Abort+0x474>)
 802c444:	4293      	cmp	r3, r2
 802c446:	d00e      	beq.n	802c466 <HAL_DMA_Abort+0x32a>
 802c448:	687b      	ldr	r3, [r7, #4]
 802c44a:	681b      	ldr	r3, [r3, #0]
 802c44c:	4a59      	ldr	r2, [pc, #356]	; (802c5b4 <HAL_DMA_Abort+0x478>)
 802c44e:	4293      	cmp	r3, r2
 802c450:	d009      	beq.n	802c466 <HAL_DMA_Abort+0x32a>
 802c452:	687b      	ldr	r3, [r7, #4]
 802c454:	681b      	ldr	r3, [r3, #0]
 802c456:	4a58      	ldr	r2, [pc, #352]	; (802c5b8 <HAL_DMA_Abort+0x47c>)
 802c458:	4293      	cmp	r3, r2
 802c45a:	d004      	beq.n	802c466 <HAL_DMA_Abort+0x32a>
 802c45c:	687b      	ldr	r3, [r7, #4]
 802c45e:	681b      	ldr	r3, [r3, #0]
 802c460:	4a56      	ldr	r2, [pc, #344]	; (802c5bc <HAL_DMA_Abort+0x480>)
 802c462:	4293      	cmp	r3, r2
 802c464:	d108      	bne.n	802c478 <HAL_DMA_Abort+0x33c>
 802c466:	687b      	ldr	r3, [r7, #4]
 802c468:	681b      	ldr	r3, [r3, #0]
 802c46a:	681a      	ldr	r2, [r3, #0]
 802c46c:	687b      	ldr	r3, [r7, #4]
 802c46e:	681b      	ldr	r3, [r3, #0]
 802c470:	f022 0201 	bic.w	r2, r2, #1
 802c474:	601a      	str	r2, [r3, #0]
 802c476:	e007      	b.n	802c488 <HAL_DMA_Abort+0x34c>
 802c478:	687b      	ldr	r3, [r7, #4]
 802c47a:	681b      	ldr	r3, [r3, #0]
 802c47c:	681a      	ldr	r2, [r3, #0]
 802c47e:	687b      	ldr	r3, [r7, #4]
 802c480:	681b      	ldr	r3, [r3, #0]
 802c482:	f022 0201 	bic.w	r2, r2, #1
 802c486:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 802c488:	e013      	b.n	802c4b2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 802c48a:	f7fe fb95 	bl	802abb8 <HAL_GetTick>
 802c48e:	4602      	mov	r2, r0
 802c490:	693b      	ldr	r3, [r7, #16]
 802c492:	1ad3      	subs	r3, r2, r3
 802c494:	2b05      	cmp	r3, #5
 802c496:	d90c      	bls.n	802c4b2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 802c498:	687b      	ldr	r3, [r7, #4]
 802c49a:	2220      	movs	r2, #32
 802c49c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 802c49e:	687b      	ldr	r3, [r7, #4]
 802c4a0:	2203      	movs	r2, #3
 802c4a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 802c4a6:	687b      	ldr	r3, [r7, #4]
 802c4a8:	2200      	movs	r2, #0
 802c4aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 802c4ae:	2301      	movs	r3, #1
 802c4b0:	e12d      	b.n	802c70e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 802c4b2:	697b      	ldr	r3, [r7, #20]
 802c4b4:	681b      	ldr	r3, [r3, #0]
 802c4b6:	f003 0301 	and.w	r3, r3, #1
 802c4ba:	2b00      	cmp	r3, #0
 802c4bc:	d1e5      	bne.n	802c48a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 802c4be:	687b      	ldr	r3, [r7, #4]
 802c4c0:	681b      	ldr	r3, [r3, #0]
 802c4c2:	4a2f      	ldr	r2, [pc, #188]	; (802c580 <HAL_DMA_Abort+0x444>)
 802c4c4:	4293      	cmp	r3, r2
 802c4c6:	d04a      	beq.n	802c55e <HAL_DMA_Abort+0x422>
 802c4c8:	687b      	ldr	r3, [r7, #4]
 802c4ca:	681b      	ldr	r3, [r3, #0]
 802c4cc:	4a2d      	ldr	r2, [pc, #180]	; (802c584 <HAL_DMA_Abort+0x448>)
 802c4ce:	4293      	cmp	r3, r2
 802c4d0:	d045      	beq.n	802c55e <HAL_DMA_Abort+0x422>
 802c4d2:	687b      	ldr	r3, [r7, #4]
 802c4d4:	681b      	ldr	r3, [r3, #0]
 802c4d6:	4a2c      	ldr	r2, [pc, #176]	; (802c588 <HAL_DMA_Abort+0x44c>)
 802c4d8:	4293      	cmp	r3, r2
 802c4da:	d040      	beq.n	802c55e <HAL_DMA_Abort+0x422>
 802c4dc:	687b      	ldr	r3, [r7, #4]
 802c4de:	681b      	ldr	r3, [r3, #0]
 802c4e0:	4a2a      	ldr	r2, [pc, #168]	; (802c58c <HAL_DMA_Abort+0x450>)
 802c4e2:	4293      	cmp	r3, r2
 802c4e4:	d03b      	beq.n	802c55e <HAL_DMA_Abort+0x422>
 802c4e6:	687b      	ldr	r3, [r7, #4]
 802c4e8:	681b      	ldr	r3, [r3, #0]
 802c4ea:	4a29      	ldr	r2, [pc, #164]	; (802c590 <HAL_DMA_Abort+0x454>)
 802c4ec:	4293      	cmp	r3, r2
 802c4ee:	d036      	beq.n	802c55e <HAL_DMA_Abort+0x422>
 802c4f0:	687b      	ldr	r3, [r7, #4]
 802c4f2:	681b      	ldr	r3, [r3, #0]
 802c4f4:	4a27      	ldr	r2, [pc, #156]	; (802c594 <HAL_DMA_Abort+0x458>)
 802c4f6:	4293      	cmp	r3, r2
 802c4f8:	d031      	beq.n	802c55e <HAL_DMA_Abort+0x422>
 802c4fa:	687b      	ldr	r3, [r7, #4]
 802c4fc:	681b      	ldr	r3, [r3, #0]
 802c4fe:	4a26      	ldr	r2, [pc, #152]	; (802c598 <HAL_DMA_Abort+0x45c>)
 802c500:	4293      	cmp	r3, r2
 802c502:	d02c      	beq.n	802c55e <HAL_DMA_Abort+0x422>
 802c504:	687b      	ldr	r3, [r7, #4]
 802c506:	681b      	ldr	r3, [r3, #0]
 802c508:	4a24      	ldr	r2, [pc, #144]	; (802c59c <HAL_DMA_Abort+0x460>)
 802c50a:	4293      	cmp	r3, r2
 802c50c:	d027      	beq.n	802c55e <HAL_DMA_Abort+0x422>
 802c50e:	687b      	ldr	r3, [r7, #4]
 802c510:	681b      	ldr	r3, [r3, #0]
 802c512:	4a23      	ldr	r2, [pc, #140]	; (802c5a0 <HAL_DMA_Abort+0x464>)
 802c514:	4293      	cmp	r3, r2
 802c516:	d022      	beq.n	802c55e <HAL_DMA_Abort+0x422>
 802c518:	687b      	ldr	r3, [r7, #4]
 802c51a:	681b      	ldr	r3, [r3, #0]
 802c51c:	4a21      	ldr	r2, [pc, #132]	; (802c5a4 <HAL_DMA_Abort+0x468>)
 802c51e:	4293      	cmp	r3, r2
 802c520:	d01d      	beq.n	802c55e <HAL_DMA_Abort+0x422>
 802c522:	687b      	ldr	r3, [r7, #4]
 802c524:	681b      	ldr	r3, [r3, #0]
 802c526:	4a20      	ldr	r2, [pc, #128]	; (802c5a8 <HAL_DMA_Abort+0x46c>)
 802c528:	4293      	cmp	r3, r2
 802c52a:	d018      	beq.n	802c55e <HAL_DMA_Abort+0x422>
 802c52c:	687b      	ldr	r3, [r7, #4]
 802c52e:	681b      	ldr	r3, [r3, #0]
 802c530:	4a1e      	ldr	r2, [pc, #120]	; (802c5ac <HAL_DMA_Abort+0x470>)
 802c532:	4293      	cmp	r3, r2
 802c534:	d013      	beq.n	802c55e <HAL_DMA_Abort+0x422>
 802c536:	687b      	ldr	r3, [r7, #4]
 802c538:	681b      	ldr	r3, [r3, #0]
 802c53a:	4a1d      	ldr	r2, [pc, #116]	; (802c5b0 <HAL_DMA_Abort+0x474>)
 802c53c:	4293      	cmp	r3, r2
 802c53e:	d00e      	beq.n	802c55e <HAL_DMA_Abort+0x422>
 802c540:	687b      	ldr	r3, [r7, #4]
 802c542:	681b      	ldr	r3, [r3, #0]
 802c544:	4a1b      	ldr	r2, [pc, #108]	; (802c5b4 <HAL_DMA_Abort+0x478>)
 802c546:	4293      	cmp	r3, r2
 802c548:	d009      	beq.n	802c55e <HAL_DMA_Abort+0x422>
 802c54a:	687b      	ldr	r3, [r7, #4]
 802c54c:	681b      	ldr	r3, [r3, #0]
 802c54e:	4a1a      	ldr	r2, [pc, #104]	; (802c5b8 <HAL_DMA_Abort+0x47c>)
 802c550:	4293      	cmp	r3, r2
 802c552:	d004      	beq.n	802c55e <HAL_DMA_Abort+0x422>
 802c554:	687b      	ldr	r3, [r7, #4]
 802c556:	681b      	ldr	r3, [r3, #0]
 802c558:	4a18      	ldr	r2, [pc, #96]	; (802c5bc <HAL_DMA_Abort+0x480>)
 802c55a:	4293      	cmp	r3, r2
 802c55c:	d101      	bne.n	802c562 <HAL_DMA_Abort+0x426>
 802c55e:	2301      	movs	r3, #1
 802c560:	e000      	b.n	802c564 <HAL_DMA_Abort+0x428>
 802c562:	2300      	movs	r3, #0
 802c564:	2b00      	cmp	r3, #0
 802c566:	d02b      	beq.n	802c5c0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 802c568:	687b      	ldr	r3, [r7, #4]
 802c56a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802c56c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 802c56e:	687b      	ldr	r3, [r7, #4]
 802c570:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802c572:	f003 031f 	and.w	r3, r3, #31
 802c576:	223f      	movs	r2, #63	; 0x3f
 802c578:	409a      	lsls	r2, r3
 802c57a:	68bb      	ldr	r3, [r7, #8]
 802c57c:	609a      	str	r2, [r3, #8]
 802c57e:	e02a      	b.n	802c5d6 <HAL_DMA_Abort+0x49a>
 802c580:	40020010 	.word	0x40020010
 802c584:	40020028 	.word	0x40020028
 802c588:	40020040 	.word	0x40020040
 802c58c:	40020058 	.word	0x40020058
 802c590:	40020070 	.word	0x40020070
 802c594:	40020088 	.word	0x40020088
 802c598:	400200a0 	.word	0x400200a0
 802c59c:	400200b8 	.word	0x400200b8
 802c5a0:	40020410 	.word	0x40020410
 802c5a4:	40020428 	.word	0x40020428
 802c5a8:	40020440 	.word	0x40020440
 802c5ac:	40020458 	.word	0x40020458
 802c5b0:	40020470 	.word	0x40020470
 802c5b4:	40020488 	.word	0x40020488
 802c5b8:	400204a0 	.word	0x400204a0
 802c5bc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 802c5c0:	687b      	ldr	r3, [r7, #4]
 802c5c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802c5c4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 802c5c6:	687b      	ldr	r3, [r7, #4]
 802c5c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802c5ca:	f003 031f 	and.w	r3, r3, #31
 802c5ce:	2201      	movs	r2, #1
 802c5d0:	409a      	lsls	r2, r3
 802c5d2:	68fb      	ldr	r3, [r7, #12]
 802c5d4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 802c5d6:	687b      	ldr	r3, [r7, #4]
 802c5d8:	681b      	ldr	r3, [r3, #0]
 802c5da:	4a4f      	ldr	r2, [pc, #316]	; (802c718 <HAL_DMA_Abort+0x5dc>)
 802c5dc:	4293      	cmp	r3, r2
 802c5de:	d072      	beq.n	802c6c6 <HAL_DMA_Abort+0x58a>
 802c5e0:	687b      	ldr	r3, [r7, #4]
 802c5e2:	681b      	ldr	r3, [r3, #0]
 802c5e4:	4a4d      	ldr	r2, [pc, #308]	; (802c71c <HAL_DMA_Abort+0x5e0>)
 802c5e6:	4293      	cmp	r3, r2
 802c5e8:	d06d      	beq.n	802c6c6 <HAL_DMA_Abort+0x58a>
 802c5ea:	687b      	ldr	r3, [r7, #4]
 802c5ec:	681b      	ldr	r3, [r3, #0]
 802c5ee:	4a4c      	ldr	r2, [pc, #304]	; (802c720 <HAL_DMA_Abort+0x5e4>)
 802c5f0:	4293      	cmp	r3, r2
 802c5f2:	d068      	beq.n	802c6c6 <HAL_DMA_Abort+0x58a>
 802c5f4:	687b      	ldr	r3, [r7, #4]
 802c5f6:	681b      	ldr	r3, [r3, #0]
 802c5f8:	4a4a      	ldr	r2, [pc, #296]	; (802c724 <HAL_DMA_Abort+0x5e8>)
 802c5fa:	4293      	cmp	r3, r2
 802c5fc:	d063      	beq.n	802c6c6 <HAL_DMA_Abort+0x58a>
 802c5fe:	687b      	ldr	r3, [r7, #4]
 802c600:	681b      	ldr	r3, [r3, #0]
 802c602:	4a49      	ldr	r2, [pc, #292]	; (802c728 <HAL_DMA_Abort+0x5ec>)
 802c604:	4293      	cmp	r3, r2
 802c606:	d05e      	beq.n	802c6c6 <HAL_DMA_Abort+0x58a>
 802c608:	687b      	ldr	r3, [r7, #4]
 802c60a:	681b      	ldr	r3, [r3, #0]
 802c60c:	4a47      	ldr	r2, [pc, #284]	; (802c72c <HAL_DMA_Abort+0x5f0>)
 802c60e:	4293      	cmp	r3, r2
 802c610:	d059      	beq.n	802c6c6 <HAL_DMA_Abort+0x58a>
 802c612:	687b      	ldr	r3, [r7, #4]
 802c614:	681b      	ldr	r3, [r3, #0]
 802c616:	4a46      	ldr	r2, [pc, #280]	; (802c730 <HAL_DMA_Abort+0x5f4>)
 802c618:	4293      	cmp	r3, r2
 802c61a:	d054      	beq.n	802c6c6 <HAL_DMA_Abort+0x58a>
 802c61c:	687b      	ldr	r3, [r7, #4]
 802c61e:	681b      	ldr	r3, [r3, #0]
 802c620:	4a44      	ldr	r2, [pc, #272]	; (802c734 <HAL_DMA_Abort+0x5f8>)
 802c622:	4293      	cmp	r3, r2
 802c624:	d04f      	beq.n	802c6c6 <HAL_DMA_Abort+0x58a>
 802c626:	687b      	ldr	r3, [r7, #4]
 802c628:	681b      	ldr	r3, [r3, #0]
 802c62a:	4a43      	ldr	r2, [pc, #268]	; (802c738 <HAL_DMA_Abort+0x5fc>)
 802c62c:	4293      	cmp	r3, r2
 802c62e:	d04a      	beq.n	802c6c6 <HAL_DMA_Abort+0x58a>
 802c630:	687b      	ldr	r3, [r7, #4]
 802c632:	681b      	ldr	r3, [r3, #0]
 802c634:	4a41      	ldr	r2, [pc, #260]	; (802c73c <HAL_DMA_Abort+0x600>)
 802c636:	4293      	cmp	r3, r2
 802c638:	d045      	beq.n	802c6c6 <HAL_DMA_Abort+0x58a>
 802c63a:	687b      	ldr	r3, [r7, #4]
 802c63c:	681b      	ldr	r3, [r3, #0]
 802c63e:	4a40      	ldr	r2, [pc, #256]	; (802c740 <HAL_DMA_Abort+0x604>)
 802c640:	4293      	cmp	r3, r2
 802c642:	d040      	beq.n	802c6c6 <HAL_DMA_Abort+0x58a>
 802c644:	687b      	ldr	r3, [r7, #4]
 802c646:	681b      	ldr	r3, [r3, #0]
 802c648:	4a3e      	ldr	r2, [pc, #248]	; (802c744 <HAL_DMA_Abort+0x608>)
 802c64a:	4293      	cmp	r3, r2
 802c64c:	d03b      	beq.n	802c6c6 <HAL_DMA_Abort+0x58a>
 802c64e:	687b      	ldr	r3, [r7, #4]
 802c650:	681b      	ldr	r3, [r3, #0]
 802c652:	4a3d      	ldr	r2, [pc, #244]	; (802c748 <HAL_DMA_Abort+0x60c>)
 802c654:	4293      	cmp	r3, r2
 802c656:	d036      	beq.n	802c6c6 <HAL_DMA_Abort+0x58a>
 802c658:	687b      	ldr	r3, [r7, #4]
 802c65a:	681b      	ldr	r3, [r3, #0]
 802c65c:	4a3b      	ldr	r2, [pc, #236]	; (802c74c <HAL_DMA_Abort+0x610>)
 802c65e:	4293      	cmp	r3, r2
 802c660:	d031      	beq.n	802c6c6 <HAL_DMA_Abort+0x58a>
 802c662:	687b      	ldr	r3, [r7, #4]
 802c664:	681b      	ldr	r3, [r3, #0]
 802c666:	4a3a      	ldr	r2, [pc, #232]	; (802c750 <HAL_DMA_Abort+0x614>)
 802c668:	4293      	cmp	r3, r2
 802c66a:	d02c      	beq.n	802c6c6 <HAL_DMA_Abort+0x58a>
 802c66c:	687b      	ldr	r3, [r7, #4]
 802c66e:	681b      	ldr	r3, [r3, #0]
 802c670:	4a38      	ldr	r2, [pc, #224]	; (802c754 <HAL_DMA_Abort+0x618>)
 802c672:	4293      	cmp	r3, r2
 802c674:	d027      	beq.n	802c6c6 <HAL_DMA_Abort+0x58a>
 802c676:	687b      	ldr	r3, [r7, #4]
 802c678:	681b      	ldr	r3, [r3, #0]
 802c67a:	4a37      	ldr	r2, [pc, #220]	; (802c758 <HAL_DMA_Abort+0x61c>)
 802c67c:	4293      	cmp	r3, r2
 802c67e:	d022      	beq.n	802c6c6 <HAL_DMA_Abort+0x58a>
 802c680:	687b      	ldr	r3, [r7, #4]
 802c682:	681b      	ldr	r3, [r3, #0]
 802c684:	4a35      	ldr	r2, [pc, #212]	; (802c75c <HAL_DMA_Abort+0x620>)
 802c686:	4293      	cmp	r3, r2
 802c688:	d01d      	beq.n	802c6c6 <HAL_DMA_Abort+0x58a>
 802c68a:	687b      	ldr	r3, [r7, #4]
 802c68c:	681b      	ldr	r3, [r3, #0]
 802c68e:	4a34      	ldr	r2, [pc, #208]	; (802c760 <HAL_DMA_Abort+0x624>)
 802c690:	4293      	cmp	r3, r2
 802c692:	d018      	beq.n	802c6c6 <HAL_DMA_Abort+0x58a>
 802c694:	687b      	ldr	r3, [r7, #4]
 802c696:	681b      	ldr	r3, [r3, #0]
 802c698:	4a32      	ldr	r2, [pc, #200]	; (802c764 <HAL_DMA_Abort+0x628>)
 802c69a:	4293      	cmp	r3, r2
 802c69c:	d013      	beq.n	802c6c6 <HAL_DMA_Abort+0x58a>
 802c69e:	687b      	ldr	r3, [r7, #4]
 802c6a0:	681b      	ldr	r3, [r3, #0]
 802c6a2:	4a31      	ldr	r2, [pc, #196]	; (802c768 <HAL_DMA_Abort+0x62c>)
 802c6a4:	4293      	cmp	r3, r2
 802c6a6:	d00e      	beq.n	802c6c6 <HAL_DMA_Abort+0x58a>
 802c6a8:	687b      	ldr	r3, [r7, #4]
 802c6aa:	681b      	ldr	r3, [r3, #0]
 802c6ac:	4a2f      	ldr	r2, [pc, #188]	; (802c76c <HAL_DMA_Abort+0x630>)
 802c6ae:	4293      	cmp	r3, r2
 802c6b0:	d009      	beq.n	802c6c6 <HAL_DMA_Abort+0x58a>
 802c6b2:	687b      	ldr	r3, [r7, #4]
 802c6b4:	681b      	ldr	r3, [r3, #0]
 802c6b6:	4a2e      	ldr	r2, [pc, #184]	; (802c770 <HAL_DMA_Abort+0x634>)
 802c6b8:	4293      	cmp	r3, r2
 802c6ba:	d004      	beq.n	802c6c6 <HAL_DMA_Abort+0x58a>
 802c6bc:	687b      	ldr	r3, [r7, #4]
 802c6be:	681b      	ldr	r3, [r3, #0]
 802c6c0:	4a2c      	ldr	r2, [pc, #176]	; (802c774 <HAL_DMA_Abort+0x638>)
 802c6c2:	4293      	cmp	r3, r2
 802c6c4:	d101      	bne.n	802c6ca <HAL_DMA_Abort+0x58e>
 802c6c6:	2301      	movs	r3, #1
 802c6c8:	e000      	b.n	802c6cc <HAL_DMA_Abort+0x590>
 802c6ca:	2300      	movs	r3, #0
 802c6cc:	2b00      	cmp	r3, #0
 802c6ce:	d015      	beq.n	802c6fc <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 802c6d0:	687b      	ldr	r3, [r7, #4]
 802c6d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802c6d4:	687a      	ldr	r2, [r7, #4]
 802c6d6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 802c6d8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 802c6da:	687b      	ldr	r3, [r7, #4]
 802c6dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802c6de:	2b00      	cmp	r3, #0
 802c6e0:	d00c      	beq.n	802c6fc <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 802c6e2:	687b      	ldr	r3, [r7, #4]
 802c6e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802c6e6:	681a      	ldr	r2, [r3, #0]
 802c6e8:	687b      	ldr	r3, [r7, #4]
 802c6ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802c6ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 802c6f0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 802c6f2:	687b      	ldr	r3, [r7, #4]
 802c6f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802c6f6:	687a      	ldr	r2, [r7, #4]
 802c6f8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 802c6fa:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 802c6fc:	687b      	ldr	r3, [r7, #4]
 802c6fe:	2201      	movs	r2, #1
 802c700:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 802c704:	687b      	ldr	r3, [r7, #4]
 802c706:	2200      	movs	r2, #0
 802c708:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 802c70c:	2300      	movs	r3, #0
}
 802c70e:	4618      	mov	r0, r3
 802c710:	3718      	adds	r7, #24
 802c712:	46bd      	mov	sp, r7
 802c714:	bd80      	pop	{r7, pc}
 802c716:	bf00      	nop
 802c718:	40020010 	.word	0x40020010
 802c71c:	40020028 	.word	0x40020028
 802c720:	40020040 	.word	0x40020040
 802c724:	40020058 	.word	0x40020058
 802c728:	40020070 	.word	0x40020070
 802c72c:	40020088 	.word	0x40020088
 802c730:	400200a0 	.word	0x400200a0
 802c734:	400200b8 	.word	0x400200b8
 802c738:	40020410 	.word	0x40020410
 802c73c:	40020428 	.word	0x40020428
 802c740:	40020440 	.word	0x40020440
 802c744:	40020458 	.word	0x40020458
 802c748:	40020470 	.word	0x40020470
 802c74c:	40020488 	.word	0x40020488
 802c750:	400204a0 	.word	0x400204a0
 802c754:	400204b8 	.word	0x400204b8
 802c758:	58025408 	.word	0x58025408
 802c75c:	5802541c 	.word	0x5802541c
 802c760:	58025430 	.word	0x58025430
 802c764:	58025444 	.word	0x58025444
 802c768:	58025458 	.word	0x58025458
 802c76c:	5802546c 	.word	0x5802546c
 802c770:	58025480 	.word	0x58025480
 802c774:	58025494 	.word	0x58025494

0802c778 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 802c778:	b580      	push	{r7, lr}
 802c77a:	b084      	sub	sp, #16
 802c77c:	af00      	add	r7, sp, #0
 802c77e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 802c780:	687b      	ldr	r3, [r7, #4]
 802c782:	2b00      	cmp	r3, #0
 802c784:	d101      	bne.n	802c78a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 802c786:	2301      	movs	r3, #1
 802c788:	e237      	b.n	802cbfa <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 802c78a:	687b      	ldr	r3, [r7, #4]
 802c78c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 802c790:	b2db      	uxtb	r3, r3
 802c792:	2b02      	cmp	r3, #2
 802c794:	d004      	beq.n	802c7a0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 802c796:	687b      	ldr	r3, [r7, #4]
 802c798:	2280      	movs	r2, #128	; 0x80
 802c79a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 802c79c:	2301      	movs	r3, #1
 802c79e:	e22c      	b.n	802cbfa <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 802c7a0:	687b      	ldr	r3, [r7, #4]
 802c7a2:	681b      	ldr	r3, [r3, #0]
 802c7a4:	4a5c      	ldr	r2, [pc, #368]	; (802c918 <HAL_DMA_Abort_IT+0x1a0>)
 802c7a6:	4293      	cmp	r3, r2
 802c7a8:	d04a      	beq.n	802c840 <HAL_DMA_Abort_IT+0xc8>
 802c7aa:	687b      	ldr	r3, [r7, #4]
 802c7ac:	681b      	ldr	r3, [r3, #0]
 802c7ae:	4a5b      	ldr	r2, [pc, #364]	; (802c91c <HAL_DMA_Abort_IT+0x1a4>)
 802c7b0:	4293      	cmp	r3, r2
 802c7b2:	d045      	beq.n	802c840 <HAL_DMA_Abort_IT+0xc8>
 802c7b4:	687b      	ldr	r3, [r7, #4]
 802c7b6:	681b      	ldr	r3, [r3, #0]
 802c7b8:	4a59      	ldr	r2, [pc, #356]	; (802c920 <HAL_DMA_Abort_IT+0x1a8>)
 802c7ba:	4293      	cmp	r3, r2
 802c7bc:	d040      	beq.n	802c840 <HAL_DMA_Abort_IT+0xc8>
 802c7be:	687b      	ldr	r3, [r7, #4]
 802c7c0:	681b      	ldr	r3, [r3, #0]
 802c7c2:	4a58      	ldr	r2, [pc, #352]	; (802c924 <HAL_DMA_Abort_IT+0x1ac>)
 802c7c4:	4293      	cmp	r3, r2
 802c7c6:	d03b      	beq.n	802c840 <HAL_DMA_Abort_IT+0xc8>
 802c7c8:	687b      	ldr	r3, [r7, #4]
 802c7ca:	681b      	ldr	r3, [r3, #0]
 802c7cc:	4a56      	ldr	r2, [pc, #344]	; (802c928 <HAL_DMA_Abort_IT+0x1b0>)
 802c7ce:	4293      	cmp	r3, r2
 802c7d0:	d036      	beq.n	802c840 <HAL_DMA_Abort_IT+0xc8>
 802c7d2:	687b      	ldr	r3, [r7, #4]
 802c7d4:	681b      	ldr	r3, [r3, #0]
 802c7d6:	4a55      	ldr	r2, [pc, #340]	; (802c92c <HAL_DMA_Abort_IT+0x1b4>)
 802c7d8:	4293      	cmp	r3, r2
 802c7da:	d031      	beq.n	802c840 <HAL_DMA_Abort_IT+0xc8>
 802c7dc:	687b      	ldr	r3, [r7, #4]
 802c7de:	681b      	ldr	r3, [r3, #0]
 802c7e0:	4a53      	ldr	r2, [pc, #332]	; (802c930 <HAL_DMA_Abort_IT+0x1b8>)
 802c7e2:	4293      	cmp	r3, r2
 802c7e4:	d02c      	beq.n	802c840 <HAL_DMA_Abort_IT+0xc8>
 802c7e6:	687b      	ldr	r3, [r7, #4]
 802c7e8:	681b      	ldr	r3, [r3, #0]
 802c7ea:	4a52      	ldr	r2, [pc, #328]	; (802c934 <HAL_DMA_Abort_IT+0x1bc>)
 802c7ec:	4293      	cmp	r3, r2
 802c7ee:	d027      	beq.n	802c840 <HAL_DMA_Abort_IT+0xc8>
 802c7f0:	687b      	ldr	r3, [r7, #4]
 802c7f2:	681b      	ldr	r3, [r3, #0]
 802c7f4:	4a50      	ldr	r2, [pc, #320]	; (802c938 <HAL_DMA_Abort_IT+0x1c0>)
 802c7f6:	4293      	cmp	r3, r2
 802c7f8:	d022      	beq.n	802c840 <HAL_DMA_Abort_IT+0xc8>
 802c7fa:	687b      	ldr	r3, [r7, #4]
 802c7fc:	681b      	ldr	r3, [r3, #0]
 802c7fe:	4a4f      	ldr	r2, [pc, #316]	; (802c93c <HAL_DMA_Abort_IT+0x1c4>)
 802c800:	4293      	cmp	r3, r2
 802c802:	d01d      	beq.n	802c840 <HAL_DMA_Abort_IT+0xc8>
 802c804:	687b      	ldr	r3, [r7, #4]
 802c806:	681b      	ldr	r3, [r3, #0]
 802c808:	4a4d      	ldr	r2, [pc, #308]	; (802c940 <HAL_DMA_Abort_IT+0x1c8>)
 802c80a:	4293      	cmp	r3, r2
 802c80c:	d018      	beq.n	802c840 <HAL_DMA_Abort_IT+0xc8>
 802c80e:	687b      	ldr	r3, [r7, #4]
 802c810:	681b      	ldr	r3, [r3, #0]
 802c812:	4a4c      	ldr	r2, [pc, #304]	; (802c944 <HAL_DMA_Abort_IT+0x1cc>)
 802c814:	4293      	cmp	r3, r2
 802c816:	d013      	beq.n	802c840 <HAL_DMA_Abort_IT+0xc8>
 802c818:	687b      	ldr	r3, [r7, #4]
 802c81a:	681b      	ldr	r3, [r3, #0]
 802c81c:	4a4a      	ldr	r2, [pc, #296]	; (802c948 <HAL_DMA_Abort_IT+0x1d0>)
 802c81e:	4293      	cmp	r3, r2
 802c820:	d00e      	beq.n	802c840 <HAL_DMA_Abort_IT+0xc8>
 802c822:	687b      	ldr	r3, [r7, #4]
 802c824:	681b      	ldr	r3, [r3, #0]
 802c826:	4a49      	ldr	r2, [pc, #292]	; (802c94c <HAL_DMA_Abort_IT+0x1d4>)
 802c828:	4293      	cmp	r3, r2
 802c82a:	d009      	beq.n	802c840 <HAL_DMA_Abort_IT+0xc8>
 802c82c:	687b      	ldr	r3, [r7, #4]
 802c82e:	681b      	ldr	r3, [r3, #0]
 802c830:	4a47      	ldr	r2, [pc, #284]	; (802c950 <HAL_DMA_Abort_IT+0x1d8>)
 802c832:	4293      	cmp	r3, r2
 802c834:	d004      	beq.n	802c840 <HAL_DMA_Abort_IT+0xc8>
 802c836:	687b      	ldr	r3, [r7, #4]
 802c838:	681b      	ldr	r3, [r3, #0]
 802c83a:	4a46      	ldr	r2, [pc, #280]	; (802c954 <HAL_DMA_Abort_IT+0x1dc>)
 802c83c:	4293      	cmp	r3, r2
 802c83e:	d101      	bne.n	802c844 <HAL_DMA_Abort_IT+0xcc>
 802c840:	2301      	movs	r3, #1
 802c842:	e000      	b.n	802c846 <HAL_DMA_Abort_IT+0xce>
 802c844:	2300      	movs	r3, #0
 802c846:	2b00      	cmp	r3, #0
 802c848:	f000 8086 	beq.w	802c958 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 802c84c:	687b      	ldr	r3, [r7, #4]
 802c84e:	2204      	movs	r2, #4
 802c850:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 802c854:	687b      	ldr	r3, [r7, #4]
 802c856:	681b      	ldr	r3, [r3, #0]
 802c858:	4a2f      	ldr	r2, [pc, #188]	; (802c918 <HAL_DMA_Abort_IT+0x1a0>)
 802c85a:	4293      	cmp	r3, r2
 802c85c:	d04a      	beq.n	802c8f4 <HAL_DMA_Abort_IT+0x17c>
 802c85e:	687b      	ldr	r3, [r7, #4]
 802c860:	681b      	ldr	r3, [r3, #0]
 802c862:	4a2e      	ldr	r2, [pc, #184]	; (802c91c <HAL_DMA_Abort_IT+0x1a4>)
 802c864:	4293      	cmp	r3, r2
 802c866:	d045      	beq.n	802c8f4 <HAL_DMA_Abort_IT+0x17c>
 802c868:	687b      	ldr	r3, [r7, #4]
 802c86a:	681b      	ldr	r3, [r3, #0]
 802c86c:	4a2c      	ldr	r2, [pc, #176]	; (802c920 <HAL_DMA_Abort_IT+0x1a8>)
 802c86e:	4293      	cmp	r3, r2
 802c870:	d040      	beq.n	802c8f4 <HAL_DMA_Abort_IT+0x17c>
 802c872:	687b      	ldr	r3, [r7, #4]
 802c874:	681b      	ldr	r3, [r3, #0]
 802c876:	4a2b      	ldr	r2, [pc, #172]	; (802c924 <HAL_DMA_Abort_IT+0x1ac>)
 802c878:	4293      	cmp	r3, r2
 802c87a:	d03b      	beq.n	802c8f4 <HAL_DMA_Abort_IT+0x17c>
 802c87c:	687b      	ldr	r3, [r7, #4]
 802c87e:	681b      	ldr	r3, [r3, #0]
 802c880:	4a29      	ldr	r2, [pc, #164]	; (802c928 <HAL_DMA_Abort_IT+0x1b0>)
 802c882:	4293      	cmp	r3, r2
 802c884:	d036      	beq.n	802c8f4 <HAL_DMA_Abort_IT+0x17c>
 802c886:	687b      	ldr	r3, [r7, #4]
 802c888:	681b      	ldr	r3, [r3, #0]
 802c88a:	4a28      	ldr	r2, [pc, #160]	; (802c92c <HAL_DMA_Abort_IT+0x1b4>)
 802c88c:	4293      	cmp	r3, r2
 802c88e:	d031      	beq.n	802c8f4 <HAL_DMA_Abort_IT+0x17c>
 802c890:	687b      	ldr	r3, [r7, #4]
 802c892:	681b      	ldr	r3, [r3, #0]
 802c894:	4a26      	ldr	r2, [pc, #152]	; (802c930 <HAL_DMA_Abort_IT+0x1b8>)
 802c896:	4293      	cmp	r3, r2
 802c898:	d02c      	beq.n	802c8f4 <HAL_DMA_Abort_IT+0x17c>
 802c89a:	687b      	ldr	r3, [r7, #4]
 802c89c:	681b      	ldr	r3, [r3, #0]
 802c89e:	4a25      	ldr	r2, [pc, #148]	; (802c934 <HAL_DMA_Abort_IT+0x1bc>)
 802c8a0:	4293      	cmp	r3, r2
 802c8a2:	d027      	beq.n	802c8f4 <HAL_DMA_Abort_IT+0x17c>
 802c8a4:	687b      	ldr	r3, [r7, #4]
 802c8a6:	681b      	ldr	r3, [r3, #0]
 802c8a8:	4a23      	ldr	r2, [pc, #140]	; (802c938 <HAL_DMA_Abort_IT+0x1c0>)
 802c8aa:	4293      	cmp	r3, r2
 802c8ac:	d022      	beq.n	802c8f4 <HAL_DMA_Abort_IT+0x17c>
 802c8ae:	687b      	ldr	r3, [r7, #4]
 802c8b0:	681b      	ldr	r3, [r3, #0]
 802c8b2:	4a22      	ldr	r2, [pc, #136]	; (802c93c <HAL_DMA_Abort_IT+0x1c4>)
 802c8b4:	4293      	cmp	r3, r2
 802c8b6:	d01d      	beq.n	802c8f4 <HAL_DMA_Abort_IT+0x17c>
 802c8b8:	687b      	ldr	r3, [r7, #4]
 802c8ba:	681b      	ldr	r3, [r3, #0]
 802c8bc:	4a20      	ldr	r2, [pc, #128]	; (802c940 <HAL_DMA_Abort_IT+0x1c8>)
 802c8be:	4293      	cmp	r3, r2
 802c8c0:	d018      	beq.n	802c8f4 <HAL_DMA_Abort_IT+0x17c>
 802c8c2:	687b      	ldr	r3, [r7, #4]
 802c8c4:	681b      	ldr	r3, [r3, #0]
 802c8c6:	4a1f      	ldr	r2, [pc, #124]	; (802c944 <HAL_DMA_Abort_IT+0x1cc>)
 802c8c8:	4293      	cmp	r3, r2
 802c8ca:	d013      	beq.n	802c8f4 <HAL_DMA_Abort_IT+0x17c>
 802c8cc:	687b      	ldr	r3, [r7, #4]
 802c8ce:	681b      	ldr	r3, [r3, #0]
 802c8d0:	4a1d      	ldr	r2, [pc, #116]	; (802c948 <HAL_DMA_Abort_IT+0x1d0>)
 802c8d2:	4293      	cmp	r3, r2
 802c8d4:	d00e      	beq.n	802c8f4 <HAL_DMA_Abort_IT+0x17c>
 802c8d6:	687b      	ldr	r3, [r7, #4]
 802c8d8:	681b      	ldr	r3, [r3, #0]
 802c8da:	4a1c      	ldr	r2, [pc, #112]	; (802c94c <HAL_DMA_Abort_IT+0x1d4>)
 802c8dc:	4293      	cmp	r3, r2
 802c8de:	d009      	beq.n	802c8f4 <HAL_DMA_Abort_IT+0x17c>
 802c8e0:	687b      	ldr	r3, [r7, #4]
 802c8e2:	681b      	ldr	r3, [r3, #0]
 802c8e4:	4a1a      	ldr	r2, [pc, #104]	; (802c950 <HAL_DMA_Abort_IT+0x1d8>)
 802c8e6:	4293      	cmp	r3, r2
 802c8e8:	d004      	beq.n	802c8f4 <HAL_DMA_Abort_IT+0x17c>
 802c8ea:	687b      	ldr	r3, [r7, #4]
 802c8ec:	681b      	ldr	r3, [r3, #0]
 802c8ee:	4a19      	ldr	r2, [pc, #100]	; (802c954 <HAL_DMA_Abort_IT+0x1dc>)
 802c8f0:	4293      	cmp	r3, r2
 802c8f2:	d108      	bne.n	802c906 <HAL_DMA_Abort_IT+0x18e>
 802c8f4:	687b      	ldr	r3, [r7, #4]
 802c8f6:	681b      	ldr	r3, [r3, #0]
 802c8f8:	681a      	ldr	r2, [r3, #0]
 802c8fa:	687b      	ldr	r3, [r7, #4]
 802c8fc:	681b      	ldr	r3, [r3, #0]
 802c8fe:	f022 0201 	bic.w	r2, r2, #1
 802c902:	601a      	str	r2, [r3, #0]
 802c904:	e178      	b.n	802cbf8 <HAL_DMA_Abort_IT+0x480>
 802c906:	687b      	ldr	r3, [r7, #4]
 802c908:	681b      	ldr	r3, [r3, #0]
 802c90a:	681a      	ldr	r2, [r3, #0]
 802c90c:	687b      	ldr	r3, [r7, #4]
 802c90e:	681b      	ldr	r3, [r3, #0]
 802c910:	f022 0201 	bic.w	r2, r2, #1
 802c914:	601a      	str	r2, [r3, #0]
 802c916:	e16f      	b.n	802cbf8 <HAL_DMA_Abort_IT+0x480>
 802c918:	40020010 	.word	0x40020010
 802c91c:	40020028 	.word	0x40020028
 802c920:	40020040 	.word	0x40020040
 802c924:	40020058 	.word	0x40020058
 802c928:	40020070 	.word	0x40020070
 802c92c:	40020088 	.word	0x40020088
 802c930:	400200a0 	.word	0x400200a0
 802c934:	400200b8 	.word	0x400200b8
 802c938:	40020410 	.word	0x40020410
 802c93c:	40020428 	.word	0x40020428
 802c940:	40020440 	.word	0x40020440
 802c944:	40020458 	.word	0x40020458
 802c948:	40020470 	.word	0x40020470
 802c94c:	40020488 	.word	0x40020488
 802c950:	400204a0 	.word	0x400204a0
 802c954:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 802c958:	687b      	ldr	r3, [r7, #4]
 802c95a:	681b      	ldr	r3, [r3, #0]
 802c95c:	681a      	ldr	r2, [r3, #0]
 802c95e:	687b      	ldr	r3, [r7, #4]
 802c960:	681b      	ldr	r3, [r3, #0]
 802c962:	f022 020e 	bic.w	r2, r2, #14
 802c966:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 802c968:	687b      	ldr	r3, [r7, #4]
 802c96a:	681b      	ldr	r3, [r3, #0]
 802c96c:	4a6c      	ldr	r2, [pc, #432]	; (802cb20 <HAL_DMA_Abort_IT+0x3a8>)
 802c96e:	4293      	cmp	r3, r2
 802c970:	d04a      	beq.n	802ca08 <HAL_DMA_Abort_IT+0x290>
 802c972:	687b      	ldr	r3, [r7, #4]
 802c974:	681b      	ldr	r3, [r3, #0]
 802c976:	4a6b      	ldr	r2, [pc, #428]	; (802cb24 <HAL_DMA_Abort_IT+0x3ac>)
 802c978:	4293      	cmp	r3, r2
 802c97a:	d045      	beq.n	802ca08 <HAL_DMA_Abort_IT+0x290>
 802c97c:	687b      	ldr	r3, [r7, #4]
 802c97e:	681b      	ldr	r3, [r3, #0]
 802c980:	4a69      	ldr	r2, [pc, #420]	; (802cb28 <HAL_DMA_Abort_IT+0x3b0>)
 802c982:	4293      	cmp	r3, r2
 802c984:	d040      	beq.n	802ca08 <HAL_DMA_Abort_IT+0x290>
 802c986:	687b      	ldr	r3, [r7, #4]
 802c988:	681b      	ldr	r3, [r3, #0]
 802c98a:	4a68      	ldr	r2, [pc, #416]	; (802cb2c <HAL_DMA_Abort_IT+0x3b4>)
 802c98c:	4293      	cmp	r3, r2
 802c98e:	d03b      	beq.n	802ca08 <HAL_DMA_Abort_IT+0x290>
 802c990:	687b      	ldr	r3, [r7, #4]
 802c992:	681b      	ldr	r3, [r3, #0]
 802c994:	4a66      	ldr	r2, [pc, #408]	; (802cb30 <HAL_DMA_Abort_IT+0x3b8>)
 802c996:	4293      	cmp	r3, r2
 802c998:	d036      	beq.n	802ca08 <HAL_DMA_Abort_IT+0x290>
 802c99a:	687b      	ldr	r3, [r7, #4]
 802c99c:	681b      	ldr	r3, [r3, #0]
 802c99e:	4a65      	ldr	r2, [pc, #404]	; (802cb34 <HAL_DMA_Abort_IT+0x3bc>)
 802c9a0:	4293      	cmp	r3, r2
 802c9a2:	d031      	beq.n	802ca08 <HAL_DMA_Abort_IT+0x290>
 802c9a4:	687b      	ldr	r3, [r7, #4]
 802c9a6:	681b      	ldr	r3, [r3, #0]
 802c9a8:	4a63      	ldr	r2, [pc, #396]	; (802cb38 <HAL_DMA_Abort_IT+0x3c0>)
 802c9aa:	4293      	cmp	r3, r2
 802c9ac:	d02c      	beq.n	802ca08 <HAL_DMA_Abort_IT+0x290>
 802c9ae:	687b      	ldr	r3, [r7, #4]
 802c9b0:	681b      	ldr	r3, [r3, #0]
 802c9b2:	4a62      	ldr	r2, [pc, #392]	; (802cb3c <HAL_DMA_Abort_IT+0x3c4>)
 802c9b4:	4293      	cmp	r3, r2
 802c9b6:	d027      	beq.n	802ca08 <HAL_DMA_Abort_IT+0x290>
 802c9b8:	687b      	ldr	r3, [r7, #4]
 802c9ba:	681b      	ldr	r3, [r3, #0]
 802c9bc:	4a60      	ldr	r2, [pc, #384]	; (802cb40 <HAL_DMA_Abort_IT+0x3c8>)
 802c9be:	4293      	cmp	r3, r2
 802c9c0:	d022      	beq.n	802ca08 <HAL_DMA_Abort_IT+0x290>
 802c9c2:	687b      	ldr	r3, [r7, #4]
 802c9c4:	681b      	ldr	r3, [r3, #0]
 802c9c6:	4a5f      	ldr	r2, [pc, #380]	; (802cb44 <HAL_DMA_Abort_IT+0x3cc>)
 802c9c8:	4293      	cmp	r3, r2
 802c9ca:	d01d      	beq.n	802ca08 <HAL_DMA_Abort_IT+0x290>
 802c9cc:	687b      	ldr	r3, [r7, #4]
 802c9ce:	681b      	ldr	r3, [r3, #0]
 802c9d0:	4a5d      	ldr	r2, [pc, #372]	; (802cb48 <HAL_DMA_Abort_IT+0x3d0>)
 802c9d2:	4293      	cmp	r3, r2
 802c9d4:	d018      	beq.n	802ca08 <HAL_DMA_Abort_IT+0x290>
 802c9d6:	687b      	ldr	r3, [r7, #4]
 802c9d8:	681b      	ldr	r3, [r3, #0]
 802c9da:	4a5c      	ldr	r2, [pc, #368]	; (802cb4c <HAL_DMA_Abort_IT+0x3d4>)
 802c9dc:	4293      	cmp	r3, r2
 802c9de:	d013      	beq.n	802ca08 <HAL_DMA_Abort_IT+0x290>
 802c9e0:	687b      	ldr	r3, [r7, #4]
 802c9e2:	681b      	ldr	r3, [r3, #0]
 802c9e4:	4a5a      	ldr	r2, [pc, #360]	; (802cb50 <HAL_DMA_Abort_IT+0x3d8>)
 802c9e6:	4293      	cmp	r3, r2
 802c9e8:	d00e      	beq.n	802ca08 <HAL_DMA_Abort_IT+0x290>
 802c9ea:	687b      	ldr	r3, [r7, #4]
 802c9ec:	681b      	ldr	r3, [r3, #0]
 802c9ee:	4a59      	ldr	r2, [pc, #356]	; (802cb54 <HAL_DMA_Abort_IT+0x3dc>)
 802c9f0:	4293      	cmp	r3, r2
 802c9f2:	d009      	beq.n	802ca08 <HAL_DMA_Abort_IT+0x290>
 802c9f4:	687b      	ldr	r3, [r7, #4]
 802c9f6:	681b      	ldr	r3, [r3, #0]
 802c9f8:	4a57      	ldr	r2, [pc, #348]	; (802cb58 <HAL_DMA_Abort_IT+0x3e0>)
 802c9fa:	4293      	cmp	r3, r2
 802c9fc:	d004      	beq.n	802ca08 <HAL_DMA_Abort_IT+0x290>
 802c9fe:	687b      	ldr	r3, [r7, #4]
 802ca00:	681b      	ldr	r3, [r3, #0]
 802ca02:	4a56      	ldr	r2, [pc, #344]	; (802cb5c <HAL_DMA_Abort_IT+0x3e4>)
 802ca04:	4293      	cmp	r3, r2
 802ca06:	d108      	bne.n	802ca1a <HAL_DMA_Abort_IT+0x2a2>
 802ca08:	687b      	ldr	r3, [r7, #4]
 802ca0a:	681b      	ldr	r3, [r3, #0]
 802ca0c:	681a      	ldr	r2, [r3, #0]
 802ca0e:	687b      	ldr	r3, [r7, #4]
 802ca10:	681b      	ldr	r3, [r3, #0]
 802ca12:	f022 0201 	bic.w	r2, r2, #1
 802ca16:	601a      	str	r2, [r3, #0]
 802ca18:	e007      	b.n	802ca2a <HAL_DMA_Abort_IT+0x2b2>
 802ca1a:	687b      	ldr	r3, [r7, #4]
 802ca1c:	681b      	ldr	r3, [r3, #0]
 802ca1e:	681a      	ldr	r2, [r3, #0]
 802ca20:	687b      	ldr	r3, [r7, #4]
 802ca22:	681b      	ldr	r3, [r3, #0]
 802ca24:	f022 0201 	bic.w	r2, r2, #1
 802ca28:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 802ca2a:	687b      	ldr	r3, [r7, #4]
 802ca2c:	681b      	ldr	r3, [r3, #0]
 802ca2e:	4a3c      	ldr	r2, [pc, #240]	; (802cb20 <HAL_DMA_Abort_IT+0x3a8>)
 802ca30:	4293      	cmp	r3, r2
 802ca32:	d072      	beq.n	802cb1a <HAL_DMA_Abort_IT+0x3a2>
 802ca34:	687b      	ldr	r3, [r7, #4]
 802ca36:	681b      	ldr	r3, [r3, #0]
 802ca38:	4a3a      	ldr	r2, [pc, #232]	; (802cb24 <HAL_DMA_Abort_IT+0x3ac>)
 802ca3a:	4293      	cmp	r3, r2
 802ca3c:	d06d      	beq.n	802cb1a <HAL_DMA_Abort_IT+0x3a2>
 802ca3e:	687b      	ldr	r3, [r7, #4]
 802ca40:	681b      	ldr	r3, [r3, #0]
 802ca42:	4a39      	ldr	r2, [pc, #228]	; (802cb28 <HAL_DMA_Abort_IT+0x3b0>)
 802ca44:	4293      	cmp	r3, r2
 802ca46:	d068      	beq.n	802cb1a <HAL_DMA_Abort_IT+0x3a2>
 802ca48:	687b      	ldr	r3, [r7, #4]
 802ca4a:	681b      	ldr	r3, [r3, #0]
 802ca4c:	4a37      	ldr	r2, [pc, #220]	; (802cb2c <HAL_DMA_Abort_IT+0x3b4>)
 802ca4e:	4293      	cmp	r3, r2
 802ca50:	d063      	beq.n	802cb1a <HAL_DMA_Abort_IT+0x3a2>
 802ca52:	687b      	ldr	r3, [r7, #4]
 802ca54:	681b      	ldr	r3, [r3, #0]
 802ca56:	4a36      	ldr	r2, [pc, #216]	; (802cb30 <HAL_DMA_Abort_IT+0x3b8>)
 802ca58:	4293      	cmp	r3, r2
 802ca5a:	d05e      	beq.n	802cb1a <HAL_DMA_Abort_IT+0x3a2>
 802ca5c:	687b      	ldr	r3, [r7, #4]
 802ca5e:	681b      	ldr	r3, [r3, #0]
 802ca60:	4a34      	ldr	r2, [pc, #208]	; (802cb34 <HAL_DMA_Abort_IT+0x3bc>)
 802ca62:	4293      	cmp	r3, r2
 802ca64:	d059      	beq.n	802cb1a <HAL_DMA_Abort_IT+0x3a2>
 802ca66:	687b      	ldr	r3, [r7, #4]
 802ca68:	681b      	ldr	r3, [r3, #0]
 802ca6a:	4a33      	ldr	r2, [pc, #204]	; (802cb38 <HAL_DMA_Abort_IT+0x3c0>)
 802ca6c:	4293      	cmp	r3, r2
 802ca6e:	d054      	beq.n	802cb1a <HAL_DMA_Abort_IT+0x3a2>
 802ca70:	687b      	ldr	r3, [r7, #4]
 802ca72:	681b      	ldr	r3, [r3, #0]
 802ca74:	4a31      	ldr	r2, [pc, #196]	; (802cb3c <HAL_DMA_Abort_IT+0x3c4>)
 802ca76:	4293      	cmp	r3, r2
 802ca78:	d04f      	beq.n	802cb1a <HAL_DMA_Abort_IT+0x3a2>
 802ca7a:	687b      	ldr	r3, [r7, #4]
 802ca7c:	681b      	ldr	r3, [r3, #0]
 802ca7e:	4a30      	ldr	r2, [pc, #192]	; (802cb40 <HAL_DMA_Abort_IT+0x3c8>)
 802ca80:	4293      	cmp	r3, r2
 802ca82:	d04a      	beq.n	802cb1a <HAL_DMA_Abort_IT+0x3a2>
 802ca84:	687b      	ldr	r3, [r7, #4]
 802ca86:	681b      	ldr	r3, [r3, #0]
 802ca88:	4a2e      	ldr	r2, [pc, #184]	; (802cb44 <HAL_DMA_Abort_IT+0x3cc>)
 802ca8a:	4293      	cmp	r3, r2
 802ca8c:	d045      	beq.n	802cb1a <HAL_DMA_Abort_IT+0x3a2>
 802ca8e:	687b      	ldr	r3, [r7, #4]
 802ca90:	681b      	ldr	r3, [r3, #0]
 802ca92:	4a2d      	ldr	r2, [pc, #180]	; (802cb48 <HAL_DMA_Abort_IT+0x3d0>)
 802ca94:	4293      	cmp	r3, r2
 802ca96:	d040      	beq.n	802cb1a <HAL_DMA_Abort_IT+0x3a2>
 802ca98:	687b      	ldr	r3, [r7, #4]
 802ca9a:	681b      	ldr	r3, [r3, #0]
 802ca9c:	4a2b      	ldr	r2, [pc, #172]	; (802cb4c <HAL_DMA_Abort_IT+0x3d4>)
 802ca9e:	4293      	cmp	r3, r2
 802caa0:	d03b      	beq.n	802cb1a <HAL_DMA_Abort_IT+0x3a2>
 802caa2:	687b      	ldr	r3, [r7, #4]
 802caa4:	681b      	ldr	r3, [r3, #0]
 802caa6:	4a2a      	ldr	r2, [pc, #168]	; (802cb50 <HAL_DMA_Abort_IT+0x3d8>)
 802caa8:	4293      	cmp	r3, r2
 802caaa:	d036      	beq.n	802cb1a <HAL_DMA_Abort_IT+0x3a2>
 802caac:	687b      	ldr	r3, [r7, #4]
 802caae:	681b      	ldr	r3, [r3, #0]
 802cab0:	4a28      	ldr	r2, [pc, #160]	; (802cb54 <HAL_DMA_Abort_IT+0x3dc>)
 802cab2:	4293      	cmp	r3, r2
 802cab4:	d031      	beq.n	802cb1a <HAL_DMA_Abort_IT+0x3a2>
 802cab6:	687b      	ldr	r3, [r7, #4]
 802cab8:	681b      	ldr	r3, [r3, #0]
 802caba:	4a27      	ldr	r2, [pc, #156]	; (802cb58 <HAL_DMA_Abort_IT+0x3e0>)
 802cabc:	4293      	cmp	r3, r2
 802cabe:	d02c      	beq.n	802cb1a <HAL_DMA_Abort_IT+0x3a2>
 802cac0:	687b      	ldr	r3, [r7, #4]
 802cac2:	681b      	ldr	r3, [r3, #0]
 802cac4:	4a25      	ldr	r2, [pc, #148]	; (802cb5c <HAL_DMA_Abort_IT+0x3e4>)
 802cac6:	4293      	cmp	r3, r2
 802cac8:	d027      	beq.n	802cb1a <HAL_DMA_Abort_IT+0x3a2>
 802caca:	687b      	ldr	r3, [r7, #4]
 802cacc:	681b      	ldr	r3, [r3, #0]
 802cace:	4a24      	ldr	r2, [pc, #144]	; (802cb60 <HAL_DMA_Abort_IT+0x3e8>)
 802cad0:	4293      	cmp	r3, r2
 802cad2:	d022      	beq.n	802cb1a <HAL_DMA_Abort_IT+0x3a2>
 802cad4:	687b      	ldr	r3, [r7, #4]
 802cad6:	681b      	ldr	r3, [r3, #0]
 802cad8:	4a22      	ldr	r2, [pc, #136]	; (802cb64 <HAL_DMA_Abort_IT+0x3ec>)
 802cada:	4293      	cmp	r3, r2
 802cadc:	d01d      	beq.n	802cb1a <HAL_DMA_Abort_IT+0x3a2>
 802cade:	687b      	ldr	r3, [r7, #4]
 802cae0:	681b      	ldr	r3, [r3, #0]
 802cae2:	4a21      	ldr	r2, [pc, #132]	; (802cb68 <HAL_DMA_Abort_IT+0x3f0>)
 802cae4:	4293      	cmp	r3, r2
 802cae6:	d018      	beq.n	802cb1a <HAL_DMA_Abort_IT+0x3a2>
 802cae8:	687b      	ldr	r3, [r7, #4]
 802caea:	681b      	ldr	r3, [r3, #0]
 802caec:	4a1f      	ldr	r2, [pc, #124]	; (802cb6c <HAL_DMA_Abort_IT+0x3f4>)
 802caee:	4293      	cmp	r3, r2
 802caf0:	d013      	beq.n	802cb1a <HAL_DMA_Abort_IT+0x3a2>
 802caf2:	687b      	ldr	r3, [r7, #4]
 802caf4:	681b      	ldr	r3, [r3, #0]
 802caf6:	4a1e      	ldr	r2, [pc, #120]	; (802cb70 <HAL_DMA_Abort_IT+0x3f8>)
 802caf8:	4293      	cmp	r3, r2
 802cafa:	d00e      	beq.n	802cb1a <HAL_DMA_Abort_IT+0x3a2>
 802cafc:	687b      	ldr	r3, [r7, #4]
 802cafe:	681b      	ldr	r3, [r3, #0]
 802cb00:	4a1c      	ldr	r2, [pc, #112]	; (802cb74 <HAL_DMA_Abort_IT+0x3fc>)
 802cb02:	4293      	cmp	r3, r2
 802cb04:	d009      	beq.n	802cb1a <HAL_DMA_Abort_IT+0x3a2>
 802cb06:	687b      	ldr	r3, [r7, #4]
 802cb08:	681b      	ldr	r3, [r3, #0]
 802cb0a:	4a1b      	ldr	r2, [pc, #108]	; (802cb78 <HAL_DMA_Abort_IT+0x400>)
 802cb0c:	4293      	cmp	r3, r2
 802cb0e:	d004      	beq.n	802cb1a <HAL_DMA_Abort_IT+0x3a2>
 802cb10:	687b      	ldr	r3, [r7, #4]
 802cb12:	681b      	ldr	r3, [r3, #0]
 802cb14:	4a19      	ldr	r2, [pc, #100]	; (802cb7c <HAL_DMA_Abort_IT+0x404>)
 802cb16:	4293      	cmp	r3, r2
 802cb18:	d132      	bne.n	802cb80 <HAL_DMA_Abort_IT+0x408>
 802cb1a:	2301      	movs	r3, #1
 802cb1c:	e031      	b.n	802cb82 <HAL_DMA_Abort_IT+0x40a>
 802cb1e:	bf00      	nop
 802cb20:	40020010 	.word	0x40020010
 802cb24:	40020028 	.word	0x40020028
 802cb28:	40020040 	.word	0x40020040
 802cb2c:	40020058 	.word	0x40020058
 802cb30:	40020070 	.word	0x40020070
 802cb34:	40020088 	.word	0x40020088
 802cb38:	400200a0 	.word	0x400200a0
 802cb3c:	400200b8 	.word	0x400200b8
 802cb40:	40020410 	.word	0x40020410
 802cb44:	40020428 	.word	0x40020428
 802cb48:	40020440 	.word	0x40020440
 802cb4c:	40020458 	.word	0x40020458
 802cb50:	40020470 	.word	0x40020470
 802cb54:	40020488 	.word	0x40020488
 802cb58:	400204a0 	.word	0x400204a0
 802cb5c:	400204b8 	.word	0x400204b8
 802cb60:	58025408 	.word	0x58025408
 802cb64:	5802541c 	.word	0x5802541c
 802cb68:	58025430 	.word	0x58025430
 802cb6c:	58025444 	.word	0x58025444
 802cb70:	58025458 	.word	0x58025458
 802cb74:	5802546c 	.word	0x5802546c
 802cb78:	58025480 	.word	0x58025480
 802cb7c:	58025494 	.word	0x58025494
 802cb80:	2300      	movs	r3, #0
 802cb82:	2b00      	cmp	r3, #0
 802cb84:	d028      	beq.n	802cbd8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 802cb86:	687b      	ldr	r3, [r7, #4]
 802cb88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802cb8a:	681a      	ldr	r2, [r3, #0]
 802cb8c:	687b      	ldr	r3, [r7, #4]
 802cb8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802cb90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 802cb94:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 802cb96:	687b      	ldr	r3, [r7, #4]
 802cb98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802cb9a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 802cb9c:	687b      	ldr	r3, [r7, #4]
 802cb9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802cba0:	f003 031f 	and.w	r3, r3, #31
 802cba4:	2201      	movs	r2, #1
 802cba6:	409a      	lsls	r2, r3
 802cba8:	68fb      	ldr	r3, [r7, #12]
 802cbaa:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 802cbac:	687b      	ldr	r3, [r7, #4]
 802cbae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802cbb0:	687a      	ldr	r2, [r7, #4]
 802cbb2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 802cbb4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 802cbb6:	687b      	ldr	r3, [r7, #4]
 802cbb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802cbba:	2b00      	cmp	r3, #0
 802cbbc:	d00c      	beq.n	802cbd8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 802cbbe:	687b      	ldr	r3, [r7, #4]
 802cbc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802cbc2:	681a      	ldr	r2, [r3, #0]
 802cbc4:	687b      	ldr	r3, [r7, #4]
 802cbc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802cbc8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 802cbcc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 802cbce:	687b      	ldr	r3, [r7, #4]
 802cbd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802cbd2:	687a      	ldr	r2, [r7, #4]
 802cbd4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 802cbd6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 802cbd8:	687b      	ldr	r3, [r7, #4]
 802cbda:	2201      	movs	r2, #1
 802cbdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 802cbe0:	687b      	ldr	r3, [r7, #4]
 802cbe2:	2200      	movs	r2, #0
 802cbe4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 802cbe8:	687b      	ldr	r3, [r7, #4]
 802cbea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802cbec:	2b00      	cmp	r3, #0
 802cbee:	d003      	beq.n	802cbf8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 802cbf0:	687b      	ldr	r3, [r7, #4]
 802cbf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802cbf4:	6878      	ldr	r0, [r7, #4]
 802cbf6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 802cbf8:	2300      	movs	r3, #0
}
 802cbfa:	4618      	mov	r0, r3
 802cbfc:	3710      	adds	r7, #16
 802cbfe:	46bd      	mov	sp, r7
 802cc00:	bd80      	pop	{r7, pc}
 802cc02:	bf00      	nop

0802cc04 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 802cc04:	b580      	push	{r7, lr}
 802cc06:	b08a      	sub	sp, #40	; 0x28
 802cc08:	af00      	add	r7, sp, #0
 802cc0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 802cc0c:	2300      	movs	r3, #0
 802cc0e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 802cc10:	4b67      	ldr	r3, [pc, #412]	; (802cdb0 <HAL_DMA_IRQHandler+0x1ac>)
 802cc12:	681b      	ldr	r3, [r3, #0]
 802cc14:	4a67      	ldr	r2, [pc, #412]	; (802cdb4 <HAL_DMA_IRQHandler+0x1b0>)
 802cc16:	fba2 2303 	umull	r2, r3, r2, r3
 802cc1a:	0a9b      	lsrs	r3, r3, #10
 802cc1c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 802cc1e:	687b      	ldr	r3, [r7, #4]
 802cc20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802cc22:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 802cc24:	687b      	ldr	r3, [r7, #4]
 802cc26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802cc28:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 802cc2a:	6a3b      	ldr	r3, [r7, #32]
 802cc2c:	681b      	ldr	r3, [r3, #0]
 802cc2e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 802cc30:	69fb      	ldr	r3, [r7, #28]
 802cc32:	681b      	ldr	r3, [r3, #0]
 802cc34:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 802cc36:	687b      	ldr	r3, [r7, #4]
 802cc38:	681b      	ldr	r3, [r3, #0]
 802cc3a:	4a5f      	ldr	r2, [pc, #380]	; (802cdb8 <HAL_DMA_IRQHandler+0x1b4>)
 802cc3c:	4293      	cmp	r3, r2
 802cc3e:	d04a      	beq.n	802ccd6 <HAL_DMA_IRQHandler+0xd2>
 802cc40:	687b      	ldr	r3, [r7, #4]
 802cc42:	681b      	ldr	r3, [r3, #0]
 802cc44:	4a5d      	ldr	r2, [pc, #372]	; (802cdbc <HAL_DMA_IRQHandler+0x1b8>)
 802cc46:	4293      	cmp	r3, r2
 802cc48:	d045      	beq.n	802ccd6 <HAL_DMA_IRQHandler+0xd2>
 802cc4a:	687b      	ldr	r3, [r7, #4]
 802cc4c:	681b      	ldr	r3, [r3, #0]
 802cc4e:	4a5c      	ldr	r2, [pc, #368]	; (802cdc0 <HAL_DMA_IRQHandler+0x1bc>)
 802cc50:	4293      	cmp	r3, r2
 802cc52:	d040      	beq.n	802ccd6 <HAL_DMA_IRQHandler+0xd2>
 802cc54:	687b      	ldr	r3, [r7, #4]
 802cc56:	681b      	ldr	r3, [r3, #0]
 802cc58:	4a5a      	ldr	r2, [pc, #360]	; (802cdc4 <HAL_DMA_IRQHandler+0x1c0>)
 802cc5a:	4293      	cmp	r3, r2
 802cc5c:	d03b      	beq.n	802ccd6 <HAL_DMA_IRQHandler+0xd2>
 802cc5e:	687b      	ldr	r3, [r7, #4]
 802cc60:	681b      	ldr	r3, [r3, #0]
 802cc62:	4a59      	ldr	r2, [pc, #356]	; (802cdc8 <HAL_DMA_IRQHandler+0x1c4>)
 802cc64:	4293      	cmp	r3, r2
 802cc66:	d036      	beq.n	802ccd6 <HAL_DMA_IRQHandler+0xd2>
 802cc68:	687b      	ldr	r3, [r7, #4]
 802cc6a:	681b      	ldr	r3, [r3, #0]
 802cc6c:	4a57      	ldr	r2, [pc, #348]	; (802cdcc <HAL_DMA_IRQHandler+0x1c8>)
 802cc6e:	4293      	cmp	r3, r2
 802cc70:	d031      	beq.n	802ccd6 <HAL_DMA_IRQHandler+0xd2>
 802cc72:	687b      	ldr	r3, [r7, #4]
 802cc74:	681b      	ldr	r3, [r3, #0]
 802cc76:	4a56      	ldr	r2, [pc, #344]	; (802cdd0 <HAL_DMA_IRQHandler+0x1cc>)
 802cc78:	4293      	cmp	r3, r2
 802cc7a:	d02c      	beq.n	802ccd6 <HAL_DMA_IRQHandler+0xd2>
 802cc7c:	687b      	ldr	r3, [r7, #4]
 802cc7e:	681b      	ldr	r3, [r3, #0]
 802cc80:	4a54      	ldr	r2, [pc, #336]	; (802cdd4 <HAL_DMA_IRQHandler+0x1d0>)
 802cc82:	4293      	cmp	r3, r2
 802cc84:	d027      	beq.n	802ccd6 <HAL_DMA_IRQHandler+0xd2>
 802cc86:	687b      	ldr	r3, [r7, #4]
 802cc88:	681b      	ldr	r3, [r3, #0]
 802cc8a:	4a53      	ldr	r2, [pc, #332]	; (802cdd8 <HAL_DMA_IRQHandler+0x1d4>)
 802cc8c:	4293      	cmp	r3, r2
 802cc8e:	d022      	beq.n	802ccd6 <HAL_DMA_IRQHandler+0xd2>
 802cc90:	687b      	ldr	r3, [r7, #4]
 802cc92:	681b      	ldr	r3, [r3, #0]
 802cc94:	4a51      	ldr	r2, [pc, #324]	; (802cddc <HAL_DMA_IRQHandler+0x1d8>)
 802cc96:	4293      	cmp	r3, r2
 802cc98:	d01d      	beq.n	802ccd6 <HAL_DMA_IRQHandler+0xd2>
 802cc9a:	687b      	ldr	r3, [r7, #4]
 802cc9c:	681b      	ldr	r3, [r3, #0]
 802cc9e:	4a50      	ldr	r2, [pc, #320]	; (802cde0 <HAL_DMA_IRQHandler+0x1dc>)
 802cca0:	4293      	cmp	r3, r2
 802cca2:	d018      	beq.n	802ccd6 <HAL_DMA_IRQHandler+0xd2>
 802cca4:	687b      	ldr	r3, [r7, #4]
 802cca6:	681b      	ldr	r3, [r3, #0]
 802cca8:	4a4e      	ldr	r2, [pc, #312]	; (802cde4 <HAL_DMA_IRQHandler+0x1e0>)
 802ccaa:	4293      	cmp	r3, r2
 802ccac:	d013      	beq.n	802ccd6 <HAL_DMA_IRQHandler+0xd2>
 802ccae:	687b      	ldr	r3, [r7, #4]
 802ccb0:	681b      	ldr	r3, [r3, #0]
 802ccb2:	4a4d      	ldr	r2, [pc, #308]	; (802cde8 <HAL_DMA_IRQHandler+0x1e4>)
 802ccb4:	4293      	cmp	r3, r2
 802ccb6:	d00e      	beq.n	802ccd6 <HAL_DMA_IRQHandler+0xd2>
 802ccb8:	687b      	ldr	r3, [r7, #4]
 802ccba:	681b      	ldr	r3, [r3, #0]
 802ccbc:	4a4b      	ldr	r2, [pc, #300]	; (802cdec <HAL_DMA_IRQHandler+0x1e8>)
 802ccbe:	4293      	cmp	r3, r2
 802ccc0:	d009      	beq.n	802ccd6 <HAL_DMA_IRQHandler+0xd2>
 802ccc2:	687b      	ldr	r3, [r7, #4]
 802ccc4:	681b      	ldr	r3, [r3, #0]
 802ccc6:	4a4a      	ldr	r2, [pc, #296]	; (802cdf0 <HAL_DMA_IRQHandler+0x1ec>)
 802ccc8:	4293      	cmp	r3, r2
 802ccca:	d004      	beq.n	802ccd6 <HAL_DMA_IRQHandler+0xd2>
 802cccc:	687b      	ldr	r3, [r7, #4]
 802ccce:	681b      	ldr	r3, [r3, #0]
 802ccd0:	4a48      	ldr	r2, [pc, #288]	; (802cdf4 <HAL_DMA_IRQHandler+0x1f0>)
 802ccd2:	4293      	cmp	r3, r2
 802ccd4:	d101      	bne.n	802ccda <HAL_DMA_IRQHandler+0xd6>
 802ccd6:	2301      	movs	r3, #1
 802ccd8:	e000      	b.n	802ccdc <HAL_DMA_IRQHandler+0xd8>
 802ccda:	2300      	movs	r3, #0
 802ccdc:	2b00      	cmp	r3, #0
 802ccde:	f000 842b 	beq.w	802d538 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 802cce2:	687b      	ldr	r3, [r7, #4]
 802cce4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802cce6:	f003 031f 	and.w	r3, r3, #31
 802ccea:	2208      	movs	r2, #8
 802ccec:	409a      	lsls	r2, r3
 802ccee:	69bb      	ldr	r3, [r7, #24]
 802ccf0:	4013      	ands	r3, r2
 802ccf2:	2b00      	cmp	r3, #0
 802ccf4:	f000 80a2 	beq.w	802ce3c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 802ccf8:	687b      	ldr	r3, [r7, #4]
 802ccfa:	681b      	ldr	r3, [r3, #0]
 802ccfc:	4a2e      	ldr	r2, [pc, #184]	; (802cdb8 <HAL_DMA_IRQHandler+0x1b4>)
 802ccfe:	4293      	cmp	r3, r2
 802cd00:	d04a      	beq.n	802cd98 <HAL_DMA_IRQHandler+0x194>
 802cd02:	687b      	ldr	r3, [r7, #4]
 802cd04:	681b      	ldr	r3, [r3, #0]
 802cd06:	4a2d      	ldr	r2, [pc, #180]	; (802cdbc <HAL_DMA_IRQHandler+0x1b8>)
 802cd08:	4293      	cmp	r3, r2
 802cd0a:	d045      	beq.n	802cd98 <HAL_DMA_IRQHandler+0x194>
 802cd0c:	687b      	ldr	r3, [r7, #4]
 802cd0e:	681b      	ldr	r3, [r3, #0]
 802cd10:	4a2b      	ldr	r2, [pc, #172]	; (802cdc0 <HAL_DMA_IRQHandler+0x1bc>)
 802cd12:	4293      	cmp	r3, r2
 802cd14:	d040      	beq.n	802cd98 <HAL_DMA_IRQHandler+0x194>
 802cd16:	687b      	ldr	r3, [r7, #4]
 802cd18:	681b      	ldr	r3, [r3, #0]
 802cd1a:	4a2a      	ldr	r2, [pc, #168]	; (802cdc4 <HAL_DMA_IRQHandler+0x1c0>)
 802cd1c:	4293      	cmp	r3, r2
 802cd1e:	d03b      	beq.n	802cd98 <HAL_DMA_IRQHandler+0x194>
 802cd20:	687b      	ldr	r3, [r7, #4]
 802cd22:	681b      	ldr	r3, [r3, #0]
 802cd24:	4a28      	ldr	r2, [pc, #160]	; (802cdc8 <HAL_DMA_IRQHandler+0x1c4>)
 802cd26:	4293      	cmp	r3, r2
 802cd28:	d036      	beq.n	802cd98 <HAL_DMA_IRQHandler+0x194>
 802cd2a:	687b      	ldr	r3, [r7, #4]
 802cd2c:	681b      	ldr	r3, [r3, #0]
 802cd2e:	4a27      	ldr	r2, [pc, #156]	; (802cdcc <HAL_DMA_IRQHandler+0x1c8>)
 802cd30:	4293      	cmp	r3, r2
 802cd32:	d031      	beq.n	802cd98 <HAL_DMA_IRQHandler+0x194>
 802cd34:	687b      	ldr	r3, [r7, #4]
 802cd36:	681b      	ldr	r3, [r3, #0]
 802cd38:	4a25      	ldr	r2, [pc, #148]	; (802cdd0 <HAL_DMA_IRQHandler+0x1cc>)
 802cd3a:	4293      	cmp	r3, r2
 802cd3c:	d02c      	beq.n	802cd98 <HAL_DMA_IRQHandler+0x194>
 802cd3e:	687b      	ldr	r3, [r7, #4]
 802cd40:	681b      	ldr	r3, [r3, #0]
 802cd42:	4a24      	ldr	r2, [pc, #144]	; (802cdd4 <HAL_DMA_IRQHandler+0x1d0>)
 802cd44:	4293      	cmp	r3, r2
 802cd46:	d027      	beq.n	802cd98 <HAL_DMA_IRQHandler+0x194>
 802cd48:	687b      	ldr	r3, [r7, #4]
 802cd4a:	681b      	ldr	r3, [r3, #0]
 802cd4c:	4a22      	ldr	r2, [pc, #136]	; (802cdd8 <HAL_DMA_IRQHandler+0x1d4>)
 802cd4e:	4293      	cmp	r3, r2
 802cd50:	d022      	beq.n	802cd98 <HAL_DMA_IRQHandler+0x194>
 802cd52:	687b      	ldr	r3, [r7, #4]
 802cd54:	681b      	ldr	r3, [r3, #0]
 802cd56:	4a21      	ldr	r2, [pc, #132]	; (802cddc <HAL_DMA_IRQHandler+0x1d8>)
 802cd58:	4293      	cmp	r3, r2
 802cd5a:	d01d      	beq.n	802cd98 <HAL_DMA_IRQHandler+0x194>
 802cd5c:	687b      	ldr	r3, [r7, #4]
 802cd5e:	681b      	ldr	r3, [r3, #0]
 802cd60:	4a1f      	ldr	r2, [pc, #124]	; (802cde0 <HAL_DMA_IRQHandler+0x1dc>)
 802cd62:	4293      	cmp	r3, r2
 802cd64:	d018      	beq.n	802cd98 <HAL_DMA_IRQHandler+0x194>
 802cd66:	687b      	ldr	r3, [r7, #4]
 802cd68:	681b      	ldr	r3, [r3, #0]
 802cd6a:	4a1e      	ldr	r2, [pc, #120]	; (802cde4 <HAL_DMA_IRQHandler+0x1e0>)
 802cd6c:	4293      	cmp	r3, r2
 802cd6e:	d013      	beq.n	802cd98 <HAL_DMA_IRQHandler+0x194>
 802cd70:	687b      	ldr	r3, [r7, #4]
 802cd72:	681b      	ldr	r3, [r3, #0]
 802cd74:	4a1c      	ldr	r2, [pc, #112]	; (802cde8 <HAL_DMA_IRQHandler+0x1e4>)
 802cd76:	4293      	cmp	r3, r2
 802cd78:	d00e      	beq.n	802cd98 <HAL_DMA_IRQHandler+0x194>
 802cd7a:	687b      	ldr	r3, [r7, #4]
 802cd7c:	681b      	ldr	r3, [r3, #0]
 802cd7e:	4a1b      	ldr	r2, [pc, #108]	; (802cdec <HAL_DMA_IRQHandler+0x1e8>)
 802cd80:	4293      	cmp	r3, r2
 802cd82:	d009      	beq.n	802cd98 <HAL_DMA_IRQHandler+0x194>
 802cd84:	687b      	ldr	r3, [r7, #4]
 802cd86:	681b      	ldr	r3, [r3, #0]
 802cd88:	4a19      	ldr	r2, [pc, #100]	; (802cdf0 <HAL_DMA_IRQHandler+0x1ec>)
 802cd8a:	4293      	cmp	r3, r2
 802cd8c:	d004      	beq.n	802cd98 <HAL_DMA_IRQHandler+0x194>
 802cd8e:	687b      	ldr	r3, [r7, #4]
 802cd90:	681b      	ldr	r3, [r3, #0]
 802cd92:	4a18      	ldr	r2, [pc, #96]	; (802cdf4 <HAL_DMA_IRQHandler+0x1f0>)
 802cd94:	4293      	cmp	r3, r2
 802cd96:	d12f      	bne.n	802cdf8 <HAL_DMA_IRQHandler+0x1f4>
 802cd98:	687b      	ldr	r3, [r7, #4]
 802cd9a:	681b      	ldr	r3, [r3, #0]
 802cd9c:	681b      	ldr	r3, [r3, #0]
 802cd9e:	f003 0304 	and.w	r3, r3, #4
 802cda2:	2b00      	cmp	r3, #0
 802cda4:	bf14      	ite	ne
 802cda6:	2301      	movne	r3, #1
 802cda8:	2300      	moveq	r3, #0
 802cdaa:	b2db      	uxtb	r3, r3
 802cdac:	e02e      	b.n	802ce0c <HAL_DMA_IRQHandler+0x208>
 802cdae:	bf00      	nop
 802cdb0:	24000004 	.word	0x24000004
 802cdb4:	1b4e81b5 	.word	0x1b4e81b5
 802cdb8:	40020010 	.word	0x40020010
 802cdbc:	40020028 	.word	0x40020028
 802cdc0:	40020040 	.word	0x40020040
 802cdc4:	40020058 	.word	0x40020058
 802cdc8:	40020070 	.word	0x40020070
 802cdcc:	40020088 	.word	0x40020088
 802cdd0:	400200a0 	.word	0x400200a0
 802cdd4:	400200b8 	.word	0x400200b8
 802cdd8:	40020410 	.word	0x40020410
 802cddc:	40020428 	.word	0x40020428
 802cde0:	40020440 	.word	0x40020440
 802cde4:	40020458 	.word	0x40020458
 802cde8:	40020470 	.word	0x40020470
 802cdec:	40020488 	.word	0x40020488
 802cdf0:	400204a0 	.word	0x400204a0
 802cdf4:	400204b8 	.word	0x400204b8
 802cdf8:	687b      	ldr	r3, [r7, #4]
 802cdfa:	681b      	ldr	r3, [r3, #0]
 802cdfc:	681b      	ldr	r3, [r3, #0]
 802cdfe:	f003 0308 	and.w	r3, r3, #8
 802ce02:	2b00      	cmp	r3, #0
 802ce04:	bf14      	ite	ne
 802ce06:	2301      	movne	r3, #1
 802ce08:	2300      	moveq	r3, #0
 802ce0a:	b2db      	uxtb	r3, r3
 802ce0c:	2b00      	cmp	r3, #0
 802ce0e:	d015      	beq.n	802ce3c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 802ce10:	687b      	ldr	r3, [r7, #4]
 802ce12:	681b      	ldr	r3, [r3, #0]
 802ce14:	681a      	ldr	r2, [r3, #0]
 802ce16:	687b      	ldr	r3, [r7, #4]
 802ce18:	681b      	ldr	r3, [r3, #0]
 802ce1a:	f022 0204 	bic.w	r2, r2, #4
 802ce1e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 802ce20:	687b      	ldr	r3, [r7, #4]
 802ce22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802ce24:	f003 031f 	and.w	r3, r3, #31
 802ce28:	2208      	movs	r2, #8
 802ce2a:	409a      	lsls	r2, r3
 802ce2c:	6a3b      	ldr	r3, [r7, #32]
 802ce2e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 802ce30:	687b      	ldr	r3, [r7, #4]
 802ce32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802ce34:	f043 0201 	orr.w	r2, r3, #1
 802ce38:	687b      	ldr	r3, [r7, #4]
 802ce3a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 802ce3c:	687b      	ldr	r3, [r7, #4]
 802ce3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802ce40:	f003 031f 	and.w	r3, r3, #31
 802ce44:	69ba      	ldr	r2, [r7, #24]
 802ce46:	fa22 f303 	lsr.w	r3, r2, r3
 802ce4a:	f003 0301 	and.w	r3, r3, #1
 802ce4e:	2b00      	cmp	r3, #0
 802ce50:	d06e      	beq.n	802cf30 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 802ce52:	687b      	ldr	r3, [r7, #4]
 802ce54:	681b      	ldr	r3, [r3, #0]
 802ce56:	4a69      	ldr	r2, [pc, #420]	; (802cffc <HAL_DMA_IRQHandler+0x3f8>)
 802ce58:	4293      	cmp	r3, r2
 802ce5a:	d04a      	beq.n	802cef2 <HAL_DMA_IRQHandler+0x2ee>
 802ce5c:	687b      	ldr	r3, [r7, #4]
 802ce5e:	681b      	ldr	r3, [r3, #0]
 802ce60:	4a67      	ldr	r2, [pc, #412]	; (802d000 <HAL_DMA_IRQHandler+0x3fc>)
 802ce62:	4293      	cmp	r3, r2
 802ce64:	d045      	beq.n	802cef2 <HAL_DMA_IRQHandler+0x2ee>
 802ce66:	687b      	ldr	r3, [r7, #4]
 802ce68:	681b      	ldr	r3, [r3, #0]
 802ce6a:	4a66      	ldr	r2, [pc, #408]	; (802d004 <HAL_DMA_IRQHandler+0x400>)
 802ce6c:	4293      	cmp	r3, r2
 802ce6e:	d040      	beq.n	802cef2 <HAL_DMA_IRQHandler+0x2ee>
 802ce70:	687b      	ldr	r3, [r7, #4]
 802ce72:	681b      	ldr	r3, [r3, #0]
 802ce74:	4a64      	ldr	r2, [pc, #400]	; (802d008 <HAL_DMA_IRQHandler+0x404>)
 802ce76:	4293      	cmp	r3, r2
 802ce78:	d03b      	beq.n	802cef2 <HAL_DMA_IRQHandler+0x2ee>
 802ce7a:	687b      	ldr	r3, [r7, #4]
 802ce7c:	681b      	ldr	r3, [r3, #0]
 802ce7e:	4a63      	ldr	r2, [pc, #396]	; (802d00c <HAL_DMA_IRQHandler+0x408>)
 802ce80:	4293      	cmp	r3, r2
 802ce82:	d036      	beq.n	802cef2 <HAL_DMA_IRQHandler+0x2ee>
 802ce84:	687b      	ldr	r3, [r7, #4]
 802ce86:	681b      	ldr	r3, [r3, #0]
 802ce88:	4a61      	ldr	r2, [pc, #388]	; (802d010 <HAL_DMA_IRQHandler+0x40c>)
 802ce8a:	4293      	cmp	r3, r2
 802ce8c:	d031      	beq.n	802cef2 <HAL_DMA_IRQHandler+0x2ee>
 802ce8e:	687b      	ldr	r3, [r7, #4]
 802ce90:	681b      	ldr	r3, [r3, #0]
 802ce92:	4a60      	ldr	r2, [pc, #384]	; (802d014 <HAL_DMA_IRQHandler+0x410>)
 802ce94:	4293      	cmp	r3, r2
 802ce96:	d02c      	beq.n	802cef2 <HAL_DMA_IRQHandler+0x2ee>
 802ce98:	687b      	ldr	r3, [r7, #4]
 802ce9a:	681b      	ldr	r3, [r3, #0]
 802ce9c:	4a5e      	ldr	r2, [pc, #376]	; (802d018 <HAL_DMA_IRQHandler+0x414>)
 802ce9e:	4293      	cmp	r3, r2
 802cea0:	d027      	beq.n	802cef2 <HAL_DMA_IRQHandler+0x2ee>
 802cea2:	687b      	ldr	r3, [r7, #4]
 802cea4:	681b      	ldr	r3, [r3, #0]
 802cea6:	4a5d      	ldr	r2, [pc, #372]	; (802d01c <HAL_DMA_IRQHandler+0x418>)
 802cea8:	4293      	cmp	r3, r2
 802ceaa:	d022      	beq.n	802cef2 <HAL_DMA_IRQHandler+0x2ee>
 802ceac:	687b      	ldr	r3, [r7, #4]
 802ceae:	681b      	ldr	r3, [r3, #0]
 802ceb0:	4a5b      	ldr	r2, [pc, #364]	; (802d020 <HAL_DMA_IRQHandler+0x41c>)
 802ceb2:	4293      	cmp	r3, r2
 802ceb4:	d01d      	beq.n	802cef2 <HAL_DMA_IRQHandler+0x2ee>
 802ceb6:	687b      	ldr	r3, [r7, #4]
 802ceb8:	681b      	ldr	r3, [r3, #0]
 802ceba:	4a5a      	ldr	r2, [pc, #360]	; (802d024 <HAL_DMA_IRQHandler+0x420>)
 802cebc:	4293      	cmp	r3, r2
 802cebe:	d018      	beq.n	802cef2 <HAL_DMA_IRQHandler+0x2ee>
 802cec0:	687b      	ldr	r3, [r7, #4]
 802cec2:	681b      	ldr	r3, [r3, #0]
 802cec4:	4a58      	ldr	r2, [pc, #352]	; (802d028 <HAL_DMA_IRQHandler+0x424>)
 802cec6:	4293      	cmp	r3, r2
 802cec8:	d013      	beq.n	802cef2 <HAL_DMA_IRQHandler+0x2ee>
 802ceca:	687b      	ldr	r3, [r7, #4]
 802cecc:	681b      	ldr	r3, [r3, #0]
 802cece:	4a57      	ldr	r2, [pc, #348]	; (802d02c <HAL_DMA_IRQHandler+0x428>)
 802ced0:	4293      	cmp	r3, r2
 802ced2:	d00e      	beq.n	802cef2 <HAL_DMA_IRQHandler+0x2ee>
 802ced4:	687b      	ldr	r3, [r7, #4]
 802ced6:	681b      	ldr	r3, [r3, #0]
 802ced8:	4a55      	ldr	r2, [pc, #340]	; (802d030 <HAL_DMA_IRQHandler+0x42c>)
 802ceda:	4293      	cmp	r3, r2
 802cedc:	d009      	beq.n	802cef2 <HAL_DMA_IRQHandler+0x2ee>
 802cede:	687b      	ldr	r3, [r7, #4]
 802cee0:	681b      	ldr	r3, [r3, #0]
 802cee2:	4a54      	ldr	r2, [pc, #336]	; (802d034 <HAL_DMA_IRQHandler+0x430>)
 802cee4:	4293      	cmp	r3, r2
 802cee6:	d004      	beq.n	802cef2 <HAL_DMA_IRQHandler+0x2ee>
 802cee8:	687b      	ldr	r3, [r7, #4]
 802ceea:	681b      	ldr	r3, [r3, #0]
 802ceec:	4a52      	ldr	r2, [pc, #328]	; (802d038 <HAL_DMA_IRQHandler+0x434>)
 802ceee:	4293      	cmp	r3, r2
 802cef0:	d10a      	bne.n	802cf08 <HAL_DMA_IRQHandler+0x304>
 802cef2:	687b      	ldr	r3, [r7, #4]
 802cef4:	681b      	ldr	r3, [r3, #0]
 802cef6:	695b      	ldr	r3, [r3, #20]
 802cef8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802cefc:	2b00      	cmp	r3, #0
 802cefe:	bf14      	ite	ne
 802cf00:	2301      	movne	r3, #1
 802cf02:	2300      	moveq	r3, #0
 802cf04:	b2db      	uxtb	r3, r3
 802cf06:	e003      	b.n	802cf10 <HAL_DMA_IRQHandler+0x30c>
 802cf08:	687b      	ldr	r3, [r7, #4]
 802cf0a:	681b      	ldr	r3, [r3, #0]
 802cf0c:	681b      	ldr	r3, [r3, #0]
 802cf0e:	2300      	movs	r3, #0
 802cf10:	2b00      	cmp	r3, #0
 802cf12:	d00d      	beq.n	802cf30 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 802cf14:	687b      	ldr	r3, [r7, #4]
 802cf16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802cf18:	f003 031f 	and.w	r3, r3, #31
 802cf1c:	2201      	movs	r2, #1
 802cf1e:	409a      	lsls	r2, r3
 802cf20:	6a3b      	ldr	r3, [r7, #32]
 802cf22:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 802cf24:	687b      	ldr	r3, [r7, #4]
 802cf26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802cf28:	f043 0202 	orr.w	r2, r3, #2
 802cf2c:	687b      	ldr	r3, [r7, #4]
 802cf2e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 802cf30:	687b      	ldr	r3, [r7, #4]
 802cf32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802cf34:	f003 031f 	and.w	r3, r3, #31
 802cf38:	2204      	movs	r2, #4
 802cf3a:	409a      	lsls	r2, r3
 802cf3c:	69bb      	ldr	r3, [r7, #24]
 802cf3e:	4013      	ands	r3, r2
 802cf40:	2b00      	cmp	r3, #0
 802cf42:	f000 808f 	beq.w	802d064 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 802cf46:	687b      	ldr	r3, [r7, #4]
 802cf48:	681b      	ldr	r3, [r3, #0]
 802cf4a:	4a2c      	ldr	r2, [pc, #176]	; (802cffc <HAL_DMA_IRQHandler+0x3f8>)
 802cf4c:	4293      	cmp	r3, r2
 802cf4e:	d04a      	beq.n	802cfe6 <HAL_DMA_IRQHandler+0x3e2>
 802cf50:	687b      	ldr	r3, [r7, #4]
 802cf52:	681b      	ldr	r3, [r3, #0]
 802cf54:	4a2a      	ldr	r2, [pc, #168]	; (802d000 <HAL_DMA_IRQHandler+0x3fc>)
 802cf56:	4293      	cmp	r3, r2
 802cf58:	d045      	beq.n	802cfe6 <HAL_DMA_IRQHandler+0x3e2>
 802cf5a:	687b      	ldr	r3, [r7, #4]
 802cf5c:	681b      	ldr	r3, [r3, #0]
 802cf5e:	4a29      	ldr	r2, [pc, #164]	; (802d004 <HAL_DMA_IRQHandler+0x400>)
 802cf60:	4293      	cmp	r3, r2
 802cf62:	d040      	beq.n	802cfe6 <HAL_DMA_IRQHandler+0x3e2>
 802cf64:	687b      	ldr	r3, [r7, #4]
 802cf66:	681b      	ldr	r3, [r3, #0]
 802cf68:	4a27      	ldr	r2, [pc, #156]	; (802d008 <HAL_DMA_IRQHandler+0x404>)
 802cf6a:	4293      	cmp	r3, r2
 802cf6c:	d03b      	beq.n	802cfe6 <HAL_DMA_IRQHandler+0x3e2>
 802cf6e:	687b      	ldr	r3, [r7, #4]
 802cf70:	681b      	ldr	r3, [r3, #0]
 802cf72:	4a26      	ldr	r2, [pc, #152]	; (802d00c <HAL_DMA_IRQHandler+0x408>)
 802cf74:	4293      	cmp	r3, r2
 802cf76:	d036      	beq.n	802cfe6 <HAL_DMA_IRQHandler+0x3e2>
 802cf78:	687b      	ldr	r3, [r7, #4]
 802cf7a:	681b      	ldr	r3, [r3, #0]
 802cf7c:	4a24      	ldr	r2, [pc, #144]	; (802d010 <HAL_DMA_IRQHandler+0x40c>)
 802cf7e:	4293      	cmp	r3, r2
 802cf80:	d031      	beq.n	802cfe6 <HAL_DMA_IRQHandler+0x3e2>
 802cf82:	687b      	ldr	r3, [r7, #4]
 802cf84:	681b      	ldr	r3, [r3, #0]
 802cf86:	4a23      	ldr	r2, [pc, #140]	; (802d014 <HAL_DMA_IRQHandler+0x410>)
 802cf88:	4293      	cmp	r3, r2
 802cf8a:	d02c      	beq.n	802cfe6 <HAL_DMA_IRQHandler+0x3e2>
 802cf8c:	687b      	ldr	r3, [r7, #4]
 802cf8e:	681b      	ldr	r3, [r3, #0]
 802cf90:	4a21      	ldr	r2, [pc, #132]	; (802d018 <HAL_DMA_IRQHandler+0x414>)
 802cf92:	4293      	cmp	r3, r2
 802cf94:	d027      	beq.n	802cfe6 <HAL_DMA_IRQHandler+0x3e2>
 802cf96:	687b      	ldr	r3, [r7, #4]
 802cf98:	681b      	ldr	r3, [r3, #0]
 802cf9a:	4a20      	ldr	r2, [pc, #128]	; (802d01c <HAL_DMA_IRQHandler+0x418>)
 802cf9c:	4293      	cmp	r3, r2
 802cf9e:	d022      	beq.n	802cfe6 <HAL_DMA_IRQHandler+0x3e2>
 802cfa0:	687b      	ldr	r3, [r7, #4]
 802cfa2:	681b      	ldr	r3, [r3, #0]
 802cfa4:	4a1e      	ldr	r2, [pc, #120]	; (802d020 <HAL_DMA_IRQHandler+0x41c>)
 802cfa6:	4293      	cmp	r3, r2
 802cfa8:	d01d      	beq.n	802cfe6 <HAL_DMA_IRQHandler+0x3e2>
 802cfaa:	687b      	ldr	r3, [r7, #4]
 802cfac:	681b      	ldr	r3, [r3, #0]
 802cfae:	4a1d      	ldr	r2, [pc, #116]	; (802d024 <HAL_DMA_IRQHandler+0x420>)
 802cfb0:	4293      	cmp	r3, r2
 802cfb2:	d018      	beq.n	802cfe6 <HAL_DMA_IRQHandler+0x3e2>
 802cfb4:	687b      	ldr	r3, [r7, #4]
 802cfb6:	681b      	ldr	r3, [r3, #0]
 802cfb8:	4a1b      	ldr	r2, [pc, #108]	; (802d028 <HAL_DMA_IRQHandler+0x424>)
 802cfba:	4293      	cmp	r3, r2
 802cfbc:	d013      	beq.n	802cfe6 <HAL_DMA_IRQHandler+0x3e2>
 802cfbe:	687b      	ldr	r3, [r7, #4]
 802cfc0:	681b      	ldr	r3, [r3, #0]
 802cfc2:	4a1a      	ldr	r2, [pc, #104]	; (802d02c <HAL_DMA_IRQHandler+0x428>)
 802cfc4:	4293      	cmp	r3, r2
 802cfc6:	d00e      	beq.n	802cfe6 <HAL_DMA_IRQHandler+0x3e2>
 802cfc8:	687b      	ldr	r3, [r7, #4]
 802cfca:	681b      	ldr	r3, [r3, #0]
 802cfcc:	4a18      	ldr	r2, [pc, #96]	; (802d030 <HAL_DMA_IRQHandler+0x42c>)
 802cfce:	4293      	cmp	r3, r2
 802cfd0:	d009      	beq.n	802cfe6 <HAL_DMA_IRQHandler+0x3e2>
 802cfd2:	687b      	ldr	r3, [r7, #4]
 802cfd4:	681b      	ldr	r3, [r3, #0]
 802cfd6:	4a17      	ldr	r2, [pc, #92]	; (802d034 <HAL_DMA_IRQHandler+0x430>)
 802cfd8:	4293      	cmp	r3, r2
 802cfda:	d004      	beq.n	802cfe6 <HAL_DMA_IRQHandler+0x3e2>
 802cfdc:	687b      	ldr	r3, [r7, #4]
 802cfde:	681b      	ldr	r3, [r3, #0]
 802cfe0:	4a15      	ldr	r2, [pc, #84]	; (802d038 <HAL_DMA_IRQHandler+0x434>)
 802cfe2:	4293      	cmp	r3, r2
 802cfe4:	d12a      	bne.n	802d03c <HAL_DMA_IRQHandler+0x438>
 802cfe6:	687b      	ldr	r3, [r7, #4]
 802cfe8:	681b      	ldr	r3, [r3, #0]
 802cfea:	681b      	ldr	r3, [r3, #0]
 802cfec:	f003 0302 	and.w	r3, r3, #2
 802cff0:	2b00      	cmp	r3, #0
 802cff2:	bf14      	ite	ne
 802cff4:	2301      	movne	r3, #1
 802cff6:	2300      	moveq	r3, #0
 802cff8:	b2db      	uxtb	r3, r3
 802cffa:	e023      	b.n	802d044 <HAL_DMA_IRQHandler+0x440>
 802cffc:	40020010 	.word	0x40020010
 802d000:	40020028 	.word	0x40020028
 802d004:	40020040 	.word	0x40020040
 802d008:	40020058 	.word	0x40020058
 802d00c:	40020070 	.word	0x40020070
 802d010:	40020088 	.word	0x40020088
 802d014:	400200a0 	.word	0x400200a0
 802d018:	400200b8 	.word	0x400200b8
 802d01c:	40020410 	.word	0x40020410
 802d020:	40020428 	.word	0x40020428
 802d024:	40020440 	.word	0x40020440
 802d028:	40020458 	.word	0x40020458
 802d02c:	40020470 	.word	0x40020470
 802d030:	40020488 	.word	0x40020488
 802d034:	400204a0 	.word	0x400204a0
 802d038:	400204b8 	.word	0x400204b8
 802d03c:	687b      	ldr	r3, [r7, #4]
 802d03e:	681b      	ldr	r3, [r3, #0]
 802d040:	681b      	ldr	r3, [r3, #0]
 802d042:	2300      	movs	r3, #0
 802d044:	2b00      	cmp	r3, #0
 802d046:	d00d      	beq.n	802d064 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 802d048:	687b      	ldr	r3, [r7, #4]
 802d04a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802d04c:	f003 031f 	and.w	r3, r3, #31
 802d050:	2204      	movs	r2, #4
 802d052:	409a      	lsls	r2, r3
 802d054:	6a3b      	ldr	r3, [r7, #32]
 802d056:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 802d058:	687b      	ldr	r3, [r7, #4]
 802d05a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802d05c:	f043 0204 	orr.w	r2, r3, #4
 802d060:	687b      	ldr	r3, [r7, #4]
 802d062:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 802d064:	687b      	ldr	r3, [r7, #4]
 802d066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802d068:	f003 031f 	and.w	r3, r3, #31
 802d06c:	2210      	movs	r2, #16
 802d06e:	409a      	lsls	r2, r3
 802d070:	69bb      	ldr	r3, [r7, #24]
 802d072:	4013      	ands	r3, r2
 802d074:	2b00      	cmp	r3, #0
 802d076:	f000 80a6 	beq.w	802d1c6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 802d07a:	687b      	ldr	r3, [r7, #4]
 802d07c:	681b      	ldr	r3, [r3, #0]
 802d07e:	4a85      	ldr	r2, [pc, #532]	; (802d294 <HAL_DMA_IRQHandler+0x690>)
 802d080:	4293      	cmp	r3, r2
 802d082:	d04a      	beq.n	802d11a <HAL_DMA_IRQHandler+0x516>
 802d084:	687b      	ldr	r3, [r7, #4]
 802d086:	681b      	ldr	r3, [r3, #0]
 802d088:	4a83      	ldr	r2, [pc, #524]	; (802d298 <HAL_DMA_IRQHandler+0x694>)
 802d08a:	4293      	cmp	r3, r2
 802d08c:	d045      	beq.n	802d11a <HAL_DMA_IRQHandler+0x516>
 802d08e:	687b      	ldr	r3, [r7, #4]
 802d090:	681b      	ldr	r3, [r3, #0]
 802d092:	4a82      	ldr	r2, [pc, #520]	; (802d29c <HAL_DMA_IRQHandler+0x698>)
 802d094:	4293      	cmp	r3, r2
 802d096:	d040      	beq.n	802d11a <HAL_DMA_IRQHandler+0x516>
 802d098:	687b      	ldr	r3, [r7, #4]
 802d09a:	681b      	ldr	r3, [r3, #0]
 802d09c:	4a80      	ldr	r2, [pc, #512]	; (802d2a0 <HAL_DMA_IRQHandler+0x69c>)
 802d09e:	4293      	cmp	r3, r2
 802d0a0:	d03b      	beq.n	802d11a <HAL_DMA_IRQHandler+0x516>
 802d0a2:	687b      	ldr	r3, [r7, #4]
 802d0a4:	681b      	ldr	r3, [r3, #0]
 802d0a6:	4a7f      	ldr	r2, [pc, #508]	; (802d2a4 <HAL_DMA_IRQHandler+0x6a0>)
 802d0a8:	4293      	cmp	r3, r2
 802d0aa:	d036      	beq.n	802d11a <HAL_DMA_IRQHandler+0x516>
 802d0ac:	687b      	ldr	r3, [r7, #4]
 802d0ae:	681b      	ldr	r3, [r3, #0]
 802d0b0:	4a7d      	ldr	r2, [pc, #500]	; (802d2a8 <HAL_DMA_IRQHandler+0x6a4>)
 802d0b2:	4293      	cmp	r3, r2
 802d0b4:	d031      	beq.n	802d11a <HAL_DMA_IRQHandler+0x516>
 802d0b6:	687b      	ldr	r3, [r7, #4]
 802d0b8:	681b      	ldr	r3, [r3, #0]
 802d0ba:	4a7c      	ldr	r2, [pc, #496]	; (802d2ac <HAL_DMA_IRQHandler+0x6a8>)
 802d0bc:	4293      	cmp	r3, r2
 802d0be:	d02c      	beq.n	802d11a <HAL_DMA_IRQHandler+0x516>
 802d0c0:	687b      	ldr	r3, [r7, #4]
 802d0c2:	681b      	ldr	r3, [r3, #0]
 802d0c4:	4a7a      	ldr	r2, [pc, #488]	; (802d2b0 <HAL_DMA_IRQHandler+0x6ac>)
 802d0c6:	4293      	cmp	r3, r2
 802d0c8:	d027      	beq.n	802d11a <HAL_DMA_IRQHandler+0x516>
 802d0ca:	687b      	ldr	r3, [r7, #4]
 802d0cc:	681b      	ldr	r3, [r3, #0]
 802d0ce:	4a79      	ldr	r2, [pc, #484]	; (802d2b4 <HAL_DMA_IRQHandler+0x6b0>)
 802d0d0:	4293      	cmp	r3, r2
 802d0d2:	d022      	beq.n	802d11a <HAL_DMA_IRQHandler+0x516>
 802d0d4:	687b      	ldr	r3, [r7, #4]
 802d0d6:	681b      	ldr	r3, [r3, #0]
 802d0d8:	4a77      	ldr	r2, [pc, #476]	; (802d2b8 <HAL_DMA_IRQHandler+0x6b4>)
 802d0da:	4293      	cmp	r3, r2
 802d0dc:	d01d      	beq.n	802d11a <HAL_DMA_IRQHandler+0x516>
 802d0de:	687b      	ldr	r3, [r7, #4]
 802d0e0:	681b      	ldr	r3, [r3, #0]
 802d0e2:	4a76      	ldr	r2, [pc, #472]	; (802d2bc <HAL_DMA_IRQHandler+0x6b8>)
 802d0e4:	4293      	cmp	r3, r2
 802d0e6:	d018      	beq.n	802d11a <HAL_DMA_IRQHandler+0x516>
 802d0e8:	687b      	ldr	r3, [r7, #4]
 802d0ea:	681b      	ldr	r3, [r3, #0]
 802d0ec:	4a74      	ldr	r2, [pc, #464]	; (802d2c0 <HAL_DMA_IRQHandler+0x6bc>)
 802d0ee:	4293      	cmp	r3, r2
 802d0f0:	d013      	beq.n	802d11a <HAL_DMA_IRQHandler+0x516>
 802d0f2:	687b      	ldr	r3, [r7, #4]
 802d0f4:	681b      	ldr	r3, [r3, #0]
 802d0f6:	4a73      	ldr	r2, [pc, #460]	; (802d2c4 <HAL_DMA_IRQHandler+0x6c0>)
 802d0f8:	4293      	cmp	r3, r2
 802d0fa:	d00e      	beq.n	802d11a <HAL_DMA_IRQHandler+0x516>
 802d0fc:	687b      	ldr	r3, [r7, #4]
 802d0fe:	681b      	ldr	r3, [r3, #0]
 802d100:	4a71      	ldr	r2, [pc, #452]	; (802d2c8 <HAL_DMA_IRQHandler+0x6c4>)
 802d102:	4293      	cmp	r3, r2
 802d104:	d009      	beq.n	802d11a <HAL_DMA_IRQHandler+0x516>
 802d106:	687b      	ldr	r3, [r7, #4]
 802d108:	681b      	ldr	r3, [r3, #0]
 802d10a:	4a70      	ldr	r2, [pc, #448]	; (802d2cc <HAL_DMA_IRQHandler+0x6c8>)
 802d10c:	4293      	cmp	r3, r2
 802d10e:	d004      	beq.n	802d11a <HAL_DMA_IRQHandler+0x516>
 802d110:	687b      	ldr	r3, [r7, #4]
 802d112:	681b      	ldr	r3, [r3, #0]
 802d114:	4a6e      	ldr	r2, [pc, #440]	; (802d2d0 <HAL_DMA_IRQHandler+0x6cc>)
 802d116:	4293      	cmp	r3, r2
 802d118:	d10a      	bne.n	802d130 <HAL_DMA_IRQHandler+0x52c>
 802d11a:	687b      	ldr	r3, [r7, #4]
 802d11c:	681b      	ldr	r3, [r3, #0]
 802d11e:	681b      	ldr	r3, [r3, #0]
 802d120:	f003 0308 	and.w	r3, r3, #8
 802d124:	2b00      	cmp	r3, #0
 802d126:	bf14      	ite	ne
 802d128:	2301      	movne	r3, #1
 802d12a:	2300      	moveq	r3, #0
 802d12c:	b2db      	uxtb	r3, r3
 802d12e:	e009      	b.n	802d144 <HAL_DMA_IRQHandler+0x540>
 802d130:	687b      	ldr	r3, [r7, #4]
 802d132:	681b      	ldr	r3, [r3, #0]
 802d134:	681b      	ldr	r3, [r3, #0]
 802d136:	f003 0304 	and.w	r3, r3, #4
 802d13a:	2b00      	cmp	r3, #0
 802d13c:	bf14      	ite	ne
 802d13e:	2301      	movne	r3, #1
 802d140:	2300      	moveq	r3, #0
 802d142:	b2db      	uxtb	r3, r3
 802d144:	2b00      	cmp	r3, #0
 802d146:	d03e      	beq.n	802d1c6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 802d148:	687b      	ldr	r3, [r7, #4]
 802d14a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802d14c:	f003 031f 	and.w	r3, r3, #31
 802d150:	2210      	movs	r2, #16
 802d152:	409a      	lsls	r2, r3
 802d154:	6a3b      	ldr	r3, [r7, #32]
 802d156:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 802d158:	687b      	ldr	r3, [r7, #4]
 802d15a:	681b      	ldr	r3, [r3, #0]
 802d15c:	681b      	ldr	r3, [r3, #0]
 802d15e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 802d162:	2b00      	cmp	r3, #0
 802d164:	d018      	beq.n	802d198 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 802d166:	687b      	ldr	r3, [r7, #4]
 802d168:	681b      	ldr	r3, [r3, #0]
 802d16a:	681b      	ldr	r3, [r3, #0]
 802d16c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 802d170:	2b00      	cmp	r3, #0
 802d172:	d108      	bne.n	802d186 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 802d174:	687b      	ldr	r3, [r7, #4]
 802d176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802d178:	2b00      	cmp	r3, #0
 802d17a:	d024      	beq.n	802d1c6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 802d17c:	687b      	ldr	r3, [r7, #4]
 802d17e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802d180:	6878      	ldr	r0, [r7, #4]
 802d182:	4798      	blx	r3
 802d184:	e01f      	b.n	802d1c6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 802d186:	687b      	ldr	r3, [r7, #4]
 802d188:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802d18a:	2b00      	cmp	r3, #0
 802d18c:	d01b      	beq.n	802d1c6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 802d18e:	687b      	ldr	r3, [r7, #4]
 802d190:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802d192:	6878      	ldr	r0, [r7, #4]
 802d194:	4798      	blx	r3
 802d196:	e016      	b.n	802d1c6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 802d198:	687b      	ldr	r3, [r7, #4]
 802d19a:	681b      	ldr	r3, [r3, #0]
 802d19c:	681b      	ldr	r3, [r3, #0]
 802d19e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802d1a2:	2b00      	cmp	r3, #0
 802d1a4:	d107      	bne.n	802d1b6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 802d1a6:	687b      	ldr	r3, [r7, #4]
 802d1a8:	681b      	ldr	r3, [r3, #0]
 802d1aa:	681a      	ldr	r2, [r3, #0]
 802d1ac:	687b      	ldr	r3, [r7, #4]
 802d1ae:	681b      	ldr	r3, [r3, #0]
 802d1b0:	f022 0208 	bic.w	r2, r2, #8
 802d1b4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 802d1b6:	687b      	ldr	r3, [r7, #4]
 802d1b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802d1ba:	2b00      	cmp	r3, #0
 802d1bc:	d003      	beq.n	802d1c6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 802d1be:	687b      	ldr	r3, [r7, #4]
 802d1c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802d1c2:	6878      	ldr	r0, [r7, #4]
 802d1c4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 802d1c6:	687b      	ldr	r3, [r7, #4]
 802d1c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802d1ca:	f003 031f 	and.w	r3, r3, #31
 802d1ce:	2220      	movs	r2, #32
 802d1d0:	409a      	lsls	r2, r3
 802d1d2:	69bb      	ldr	r3, [r7, #24]
 802d1d4:	4013      	ands	r3, r2
 802d1d6:	2b00      	cmp	r3, #0
 802d1d8:	f000 8110 	beq.w	802d3fc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 802d1dc:	687b      	ldr	r3, [r7, #4]
 802d1de:	681b      	ldr	r3, [r3, #0]
 802d1e0:	4a2c      	ldr	r2, [pc, #176]	; (802d294 <HAL_DMA_IRQHandler+0x690>)
 802d1e2:	4293      	cmp	r3, r2
 802d1e4:	d04a      	beq.n	802d27c <HAL_DMA_IRQHandler+0x678>
 802d1e6:	687b      	ldr	r3, [r7, #4]
 802d1e8:	681b      	ldr	r3, [r3, #0]
 802d1ea:	4a2b      	ldr	r2, [pc, #172]	; (802d298 <HAL_DMA_IRQHandler+0x694>)
 802d1ec:	4293      	cmp	r3, r2
 802d1ee:	d045      	beq.n	802d27c <HAL_DMA_IRQHandler+0x678>
 802d1f0:	687b      	ldr	r3, [r7, #4]
 802d1f2:	681b      	ldr	r3, [r3, #0]
 802d1f4:	4a29      	ldr	r2, [pc, #164]	; (802d29c <HAL_DMA_IRQHandler+0x698>)
 802d1f6:	4293      	cmp	r3, r2
 802d1f8:	d040      	beq.n	802d27c <HAL_DMA_IRQHandler+0x678>
 802d1fa:	687b      	ldr	r3, [r7, #4]
 802d1fc:	681b      	ldr	r3, [r3, #0]
 802d1fe:	4a28      	ldr	r2, [pc, #160]	; (802d2a0 <HAL_DMA_IRQHandler+0x69c>)
 802d200:	4293      	cmp	r3, r2
 802d202:	d03b      	beq.n	802d27c <HAL_DMA_IRQHandler+0x678>
 802d204:	687b      	ldr	r3, [r7, #4]
 802d206:	681b      	ldr	r3, [r3, #0]
 802d208:	4a26      	ldr	r2, [pc, #152]	; (802d2a4 <HAL_DMA_IRQHandler+0x6a0>)
 802d20a:	4293      	cmp	r3, r2
 802d20c:	d036      	beq.n	802d27c <HAL_DMA_IRQHandler+0x678>
 802d20e:	687b      	ldr	r3, [r7, #4]
 802d210:	681b      	ldr	r3, [r3, #0]
 802d212:	4a25      	ldr	r2, [pc, #148]	; (802d2a8 <HAL_DMA_IRQHandler+0x6a4>)
 802d214:	4293      	cmp	r3, r2
 802d216:	d031      	beq.n	802d27c <HAL_DMA_IRQHandler+0x678>
 802d218:	687b      	ldr	r3, [r7, #4]
 802d21a:	681b      	ldr	r3, [r3, #0]
 802d21c:	4a23      	ldr	r2, [pc, #140]	; (802d2ac <HAL_DMA_IRQHandler+0x6a8>)
 802d21e:	4293      	cmp	r3, r2
 802d220:	d02c      	beq.n	802d27c <HAL_DMA_IRQHandler+0x678>
 802d222:	687b      	ldr	r3, [r7, #4]
 802d224:	681b      	ldr	r3, [r3, #0]
 802d226:	4a22      	ldr	r2, [pc, #136]	; (802d2b0 <HAL_DMA_IRQHandler+0x6ac>)
 802d228:	4293      	cmp	r3, r2
 802d22a:	d027      	beq.n	802d27c <HAL_DMA_IRQHandler+0x678>
 802d22c:	687b      	ldr	r3, [r7, #4]
 802d22e:	681b      	ldr	r3, [r3, #0]
 802d230:	4a20      	ldr	r2, [pc, #128]	; (802d2b4 <HAL_DMA_IRQHandler+0x6b0>)
 802d232:	4293      	cmp	r3, r2
 802d234:	d022      	beq.n	802d27c <HAL_DMA_IRQHandler+0x678>
 802d236:	687b      	ldr	r3, [r7, #4]
 802d238:	681b      	ldr	r3, [r3, #0]
 802d23a:	4a1f      	ldr	r2, [pc, #124]	; (802d2b8 <HAL_DMA_IRQHandler+0x6b4>)
 802d23c:	4293      	cmp	r3, r2
 802d23e:	d01d      	beq.n	802d27c <HAL_DMA_IRQHandler+0x678>
 802d240:	687b      	ldr	r3, [r7, #4]
 802d242:	681b      	ldr	r3, [r3, #0]
 802d244:	4a1d      	ldr	r2, [pc, #116]	; (802d2bc <HAL_DMA_IRQHandler+0x6b8>)
 802d246:	4293      	cmp	r3, r2
 802d248:	d018      	beq.n	802d27c <HAL_DMA_IRQHandler+0x678>
 802d24a:	687b      	ldr	r3, [r7, #4]
 802d24c:	681b      	ldr	r3, [r3, #0]
 802d24e:	4a1c      	ldr	r2, [pc, #112]	; (802d2c0 <HAL_DMA_IRQHandler+0x6bc>)
 802d250:	4293      	cmp	r3, r2
 802d252:	d013      	beq.n	802d27c <HAL_DMA_IRQHandler+0x678>
 802d254:	687b      	ldr	r3, [r7, #4]
 802d256:	681b      	ldr	r3, [r3, #0]
 802d258:	4a1a      	ldr	r2, [pc, #104]	; (802d2c4 <HAL_DMA_IRQHandler+0x6c0>)
 802d25a:	4293      	cmp	r3, r2
 802d25c:	d00e      	beq.n	802d27c <HAL_DMA_IRQHandler+0x678>
 802d25e:	687b      	ldr	r3, [r7, #4]
 802d260:	681b      	ldr	r3, [r3, #0]
 802d262:	4a19      	ldr	r2, [pc, #100]	; (802d2c8 <HAL_DMA_IRQHandler+0x6c4>)
 802d264:	4293      	cmp	r3, r2
 802d266:	d009      	beq.n	802d27c <HAL_DMA_IRQHandler+0x678>
 802d268:	687b      	ldr	r3, [r7, #4]
 802d26a:	681b      	ldr	r3, [r3, #0]
 802d26c:	4a17      	ldr	r2, [pc, #92]	; (802d2cc <HAL_DMA_IRQHandler+0x6c8>)
 802d26e:	4293      	cmp	r3, r2
 802d270:	d004      	beq.n	802d27c <HAL_DMA_IRQHandler+0x678>
 802d272:	687b      	ldr	r3, [r7, #4]
 802d274:	681b      	ldr	r3, [r3, #0]
 802d276:	4a16      	ldr	r2, [pc, #88]	; (802d2d0 <HAL_DMA_IRQHandler+0x6cc>)
 802d278:	4293      	cmp	r3, r2
 802d27a:	d12b      	bne.n	802d2d4 <HAL_DMA_IRQHandler+0x6d0>
 802d27c:	687b      	ldr	r3, [r7, #4]
 802d27e:	681b      	ldr	r3, [r3, #0]
 802d280:	681b      	ldr	r3, [r3, #0]
 802d282:	f003 0310 	and.w	r3, r3, #16
 802d286:	2b00      	cmp	r3, #0
 802d288:	bf14      	ite	ne
 802d28a:	2301      	movne	r3, #1
 802d28c:	2300      	moveq	r3, #0
 802d28e:	b2db      	uxtb	r3, r3
 802d290:	e02a      	b.n	802d2e8 <HAL_DMA_IRQHandler+0x6e4>
 802d292:	bf00      	nop
 802d294:	40020010 	.word	0x40020010
 802d298:	40020028 	.word	0x40020028
 802d29c:	40020040 	.word	0x40020040
 802d2a0:	40020058 	.word	0x40020058
 802d2a4:	40020070 	.word	0x40020070
 802d2a8:	40020088 	.word	0x40020088
 802d2ac:	400200a0 	.word	0x400200a0
 802d2b0:	400200b8 	.word	0x400200b8
 802d2b4:	40020410 	.word	0x40020410
 802d2b8:	40020428 	.word	0x40020428
 802d2bc:	40020440 	.word	0x40020440
 802d2c0:	40020458 	.word	0x40020458
 802d2c4:	40020470 	.word	0x40020470
 802d2c8:	40020488 	.word	0x40020488
 802d2cc:	400204a0 	.word	0x400204a0
 802d2d0:	400204b8 	.word	0x400204b8
 802d2d4:	687b      	ldr	r3, [r7, #4]
 802d2d6:	681b      	ldr	r3, [r3, #0]
 802d2d8:	681b      	ldr	r3, [r3, #0]
 802d2da:	f003 0302 	and.w	r3, r3, #2
 802d2de:	2b00      	cmp	r3, #0
 802d2e0:	bf14      	ite	ne
 802d2e2:	2301      	movne	r3, #1
 802d2e4:	2300      	moveq	r3, #0
 802d2e6:	b2db      	uxtb	r3, r3
 802d2e8:	2b00      	cmp	r3, #0
 802d2ea:	f000 8087 	beq.w	802d3fc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 802d2ee:	687b      	ldr	r3, [r7, #4]
 802d2f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802d2f2:	f003 031f 	and.w	r3, r3, #31
 802d2f6:	2220      	movs	r2, #32
 802d2f8:	409a      	lsls	r2, r3
 802d2fa:	6a3b      	ldr	r3, [r7, #32]
 802d2fc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 802d2fe:	687b      	ldr	r3, [r7, #4]
 802d300:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 802d304:	b2db      	uxtb	r3, r3
 802d306:	2b04      	cmp	r3, #4
 802d308:	d139      	bne.n	802d37e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 802d30a:	687b      	ldr	r3, [r7, #4]
 802d30c:	681b      	ldr	r3, [r3, #0]
 802d30e:	681a      	ldr	r2, [r3, #0]
 802d310:	687b      	ldr	r3, [r7, #4]
 802d312:	681b      	ldr	r3, [r3, #0]
 802d314:	f022 0216 	bic.w	r2, r2, #22
 802d318:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 802d31a:	687b      	ldr	r3, [r7, #4]
 802d31c:	681b      	ldr	r3, [r3, #0]
 802d31e:	695a      	ldr	r2, [r3, #20]
 802d320:	687b      	ldr	r3, [r7, #4]
 802d322:	681b      	ldr	r3, [r3, #0]
 802d324:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 802d328:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 802d32a:	687b      	ldr	r3, [r7, #4]
 802d32c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802d32e:	2b00      	cmp	r3, #0
 802d330:	d103      	bne.n	802d33a <HAL_DMA_IRQHandler+0x736>
 802d332:	687b      	ldr	r3, [r7, #4]
 802d334:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802d336:	2b00      	cmp	r3, #0
 802d338:	d007      	beq.n	802d34a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 802d33a:	687b      	ldr	r3, [r7, #4]
 802d33c:	681b      	ldr	r3, [r3, #0]
 802d33e:	681a      	ldr	r2, [r3, #0]
 802d340:	687b      	ldr	r3, [r7, #4]
 802d342:	681b      	ldr	r3, [r3, #0]
 802d344:	f022 0208 	bic.w	r2, r2, #8
 802d348:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 802d34a:	687b      	ldr	r3, [r7, #4]
 802d34c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802d34e:	f003 031f 	and.w	r3, r3, #31
 802d352:	223f      	movs	r2, #63	; 0x3f
 802d354:	409a      	lsls	r2, r3
 802d356:	6a3b      	ldr	r3, [r7, #32]
 802d358:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 802d35a:	687b      	ldr	r3, [r7, #4]
 802d35c:	2201      	movs	r2, #1
 802d35e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 802d362:	687b      	ldr	r3, [r7, #4]
 802d364:	2200      	movs	r2, #0
 802d366:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 802d36a:	687b      	ldr	r3, [r7, #4]
 802d36c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802d36e:	2b00      	cmp	r3, #0
 802d370:	f000 834a 	beq.w	802da08 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 802d374:	687b      	ldr	r3, [r7, #4]
 802d376:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802d378:	6878      	ldr	r0, [r7, #4]
 802d37a:	4798      	blx	r3
          }
          return;
 802d37c:	e344      	b.n	802da08 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 802d37e:	687b      	ldr	r3, [r7, #4]
 802d380:	681b      	ldr	r3, [r3, #0]
 802d382:	681b      	ldr	r3, [r3, #0]
 802d384:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 802d388:	2b00      	cmp	r3, #0
 802d38a:	d018      	beq.n	802d3be <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 802d38c:	687b      	ldr	r3, [r7, #4]
 802d38e:	681b      	ldr	r3, [r3, #0]
 802d390:	681b      	ldr	r3, [r3, #0]
 802d392:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 802d396:	2b00      	cmp	r3, #0
 802d398:	d108      	bne.n	802d3ac <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 802d39a:	687b      	ldr	r3, [r7, #4]
 802d39c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802d39e:	2b00      	cmp	r3, #0
 802d3a0:	d02c      	beq.n	802d3fc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 802d3a2:	687b      	ldr	r3, [r7, #4]
 802d3a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802d3a6:	6878      	ldr	r0, [r7, #4]
 802d3a8:	4798      	blx	r3
 802d3aa:	e027      	b.n	802d3fc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 802d3ac:	687b      	ldr	r3, [r7, #4]
 802d3ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802d3b0:	2b00      	cmp	r3, #0
 802d3b2:	d023      	beq.n	802d3fc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 802d3b4:	687b      	ldr	r3, [r7, #4]
 802d3b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802d3b8:	6878      	ldr	r0, [r7, #4]
 802d3ba:	4798      	blx	r3
 802d3bc:	e01e      	b.n	802d3fc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 802d3be:	687b      	ldr	r3, [r7, #4]
 802d3c0:	681b      	ldr	r3, [r3, #0]
 802d3c2:	681b      	ldr	r3, [r3, #0]
 802d3c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802d3c8:	2b00      	cmp	r3, #0
 802d3ca:	d10f      	bne.n	802d3ec <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 802d3cc:	687b      	ldr	r3, [r7, #4]
 802d3ce:	681b      	ldr	r3, [r3, #0]
 802d3d0:	681a      	ldr	r2, [r3, #0]
 802d3d2:	687b      	ldr	r3, [r7, #4]
 802d3d4:	681b      	ldr	r3, [r3, #0]
 802d3d6:	f022 0210 	bic.w	r2, r2, #16
 802d3da:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 802d3dc:	687b      	ldr	r3, [r7, #4]
 802d3de:	2201      	movs	r2, #1
 802d3e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 802d3e4:	687b      	ldr	r3, [r7, #4]
 802d3e6:	2200      	movs	r2, #0
 802d3e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 802d3ec:	687b      	ldr	r3, [r7, #4]
 802d3ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802d3f0:	2b00      	cmp	r3, #0
 802d3f2:	d003      	beq.n	802d3fc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 802d3f4:	687b      	ldr	r3, [r7, #4]
 802d3f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802d3f8:	6878      	ldr	r0, [r7, #4]
 802d3fa:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 802d3fc:	687b      	ldr	r3, [r7, #4]
 802d3fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802d400:	2b00      	cmp	r3, #0
 802d402:	f000 8306 	beq.w	802da12 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 802d406:	687b      	ldr	r3, [r7, #4]
 802d408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802d40a:	f003 0301 	and.w	r3, r3, #1
 802d40e:	2b00      	cmp	r3, #0
 802d410:	f000 8088 	beq.w	802d524 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 802d414:	687b      	ldr	r3, [r7, #4]
 802d416:	2204      	movs	r2, #4
 802d418:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 802d41c:	687b      	ldr	r3, [r7, #4]
 802d41e:	681b      	ldr	r3, [r3, #0]
 802d420:	4a7a      	ldr	r2, [pc, #488]	; (802d60c <HAL_DMA_IRQHandler+0xa08>)
 802d422:	4293      	cmp	r3, r2
 802d424:	d04a      	beq.n	802d4bc <HAL_DMA_IRQHandler+0x8b8>
 802d426:	687b      	ldr	r3, [r7, #4]
 802d428:	681b      	ldr	r3, [r3, #0]
 802d42a:	4a79      	ldr	r2, [pc, #484]	; (802d610 <HAL_DMA_IRQHandler+0xa0c>)
 802d42c:	4293      	cmp	r3, r2
 802d42e:	d045      	beq.n	802d4bc <HAL_DMA_IRQHandler+0x8b8>
 802d430:	687b      	ldr	r3, [r7, #4]
 802d432:	681b      	ldr	r3, [r3, #0]
 802d434:	4a77      	ldr	r2, [pc, #476]	; (802d614 <HAL_DMA_IRQHandler+0xa10>)
 802d436:	4293      	cmp	r3, r2
 802d438:	d040      	beq.n	802d4bc <HAL_DMA_IRQHandler+0x8b8>
 802d43a:	687b      	ldr	r3, [r7, #4]
 802d43c:	681b      	ldr	r3, [r3, #0]
 802d43e:	4a76      	ldr	r2, [pc, #472]	; (802d618 <HAL_DMA_IRQHandler+0xa14>)
 802d440:	4293      	cmp	r3, r2
 802d442:	d03b      	beq.n	802d4bc <HAL_DMA_IRQHandler+0x8b8>
 802d444:	687b      	ldr	r3, [r7, #4]
 802d446:	681b      	ldr	r3, [r3, #0]
 802d448:	4a74      	ldr	r2, [pc, #464]	; (802d61c <HAL_DMA_IRQHandler+0xa18>)
 802d44a:	4293      	cmp	r3, r2
 802d44c:	d036      	beq.n	802d4bc <HAL_DMA_IRQHandler+0x8b8>
 802d44e:	687b      	ldr	r3, [r7, #4]
 802d450:	681b      	ldr	r3, [r3, #0]
 802d452:	4a73      	ldr	r2, [pc, #460]	; (802d620 <HAL_DMA_IRQHandler+0xa1c>)
 802d454:	4293      	cmp	r3, r2
 802d456:	d031      	beq.n	802d4bc <HAL_DMA_IRQHandler+0x8b8>
 802d458:	687b      	ldr	r3, [r7, #4]
 802d45a:	681b      	ldr	r3, [r3, #0]
 802d45c:	4a71      	ldr	r2, [pc, #452]	; (802d624 <HAL_DMA_IRQHandler+0xa20>)
 802d45e:	4293      	cmp	r3, r2
 802d460:	d02c      	beq.n	802d4bc <HAL_DMA_IRQHandler+0x8b8>
 802d462:	687b      	ldr	r3, [r7, #4]
 802d464:	681b      	ldr	r3, [r3, #0]
 802d466:	4a70      	ldr	r2, [pc, #448]	; (802d628 <HAL_DMA_IRQHandler+0xa24>)
 802d468:	4293      	cmp	r3, r2
 802d46a:	d027      	beq.n	802d4bc <HAL_DMA_IRQHandler+0x8b8>
 802d46c:	687b      	ldr	r3, [r7, #4]
 802d46e:	681b      	ldr	r3, [r3, #0]
 802d470:	4a6e      	ldr	r2, [pc, #440]	; (802d62c <HAL_DMA_IRQHandler+0xa28>)
 802d472:	4293      	cmp	r3, r2
 802d474:	d022      	beq.n	802d4bc <HAL_DMA_IRQHandler+0x8b8>
 802d476:	687b      	ldr	r3, [r7, #4]
 802d478:	681b      	ldr	r3, [r3, #0]
 802d47a:	4a6d      	ldr	r2, [pc, #436]	; (802d630 <HAL_DMA_IRQHandler+0xa2c>)
 802d47c:	4293      	cmp	r3, r2
 802d47e:	d01d      	beq.n	802d4bc <HAL_DMA_IRQHandler+0x8b8>
 802d480:	687b      	ldr	r3, [r7, #4]
 802d482:	681b      	ldr	r3, [r3, #0]
 802d484:	4a6b      	ldr	r2, [pc, #428]	; (802d634 <HAL_DMA_IRQHandler+0xa30>)
 802d486:	4293      	cmp	r3, r2
 802d488:	d018      	beq.n	802d4bc <HAL_DMA_IRQHandler+0x8b8>
 802d48a:	687b      	ldr	r3, [r7, #4]
 802d48c:	681b      	ldr	r3, [r3, #0]
 802d48e:	4a6a      	ldr	r2, [pc, #424]	; (802d638 <HAL_DMA_IRQHandler+0xa34>)
 802d490:	4293      	cmp	r3, r2
 802d492:	d013      	beq.n	802d4bc <HAL_DMA_IRQHandler+0x8b8>
 802d494:	687b      	ldr	r3, [r7, #4]
 802d496:	681b      	ldr	r3, [r3, #0]
 802d498:	4a68      	ldr	r2, [pc, #416]	; (802d63c <HAL_DMA_IRQHandler+0xa38>)
 802d49a:	4293      	cmp	r3, r2
 802d49c:	d00e      	beq.n	802d4bc <HAL_DMA_IRQHandler+0x8b8>
 802d49e:	687b      	ldr	r3, [r7, #4]
 802d4a0:	681b      	ldr	r3, [r3, #0]
 802d4a2:	4a67      	ldr	r2, [pc, #412]	; (802d640 <HAL_DMA_IRQHandler+0xa3c>)
 802d4a4:	4293      	cmp	r3, r2
 802d4a6:	d009      	beq.n	802d4bc <HAL_DMA_IRQHandler+0x8b8>
 802d4a8:	687b      	ldr	r3, [r7, #4]
 802d4aa:	681b      	ldr	r3, [r3, #0]
 802d4ac:	4a65      	ldr	r2, [pc, #404]	; (802d644 <HAL_DMA_IRQHandler+0xa40>)
 802d4ae:	4293      	cmp	r3, r2
 802d4b0:	d004      	beq.n	802d4bc <HAL_DMA_IRQHandler+0x8b8>
 802d4b2:	687b      	ldr	r3, [r7, #4]
 802d4b4:	681b      	ldr	r3, [r3, #0]
 802d4b6:	4a64      	ldr	r2, [pc, #400]	; (802d648 <HAL_DMA_IRQHandler+0xa44>)
 802d4b8:	4293      	cmp	r3, r2
 802d4ba:	d108      	bne.n	802d4ce <HAL_DMA_IRQHandler+0x8ca>
 802d4bc:	687b      	ldr	r3, [r7, #4]
 802d4be:	681b      	ldr	r3, [r3, #0]
 802d4c0:	681a      	ldr	r2, [r3, #0]
 802d4c2:	687b      	ldr	r3, [r7, #4]
 802d4c4:	681b      	ldr	r3, [r3, #0]
 802d4c6:	f022 0201 	bic.w	r2, r2, #1
 802d4ca:	601a      	str	r2, [r3, #0]
 802d4cc:	e007      	b.n	802d4de <HAL_DMA_IRQHandler+0x8da>
 802d4ce:	687b      	ldr	r3, [r7, #4]
 802d4d0:	681b      	ldr	r3, [r3, #0]
 802d4d2:	681a      	ldr	r2, [r3, #0]
 802d4d4:	687b      	ldr	r3, [r7, #4]
 802d4d6:	681b      	ldr	r3, [r3, #0]
 802d4d8:	f022 0201 	bic.w	r2, r2, #1
 802d4dc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 802d4de:	68fb      	ldr	r3, [r7, #12]
 802d4e0:	3301      	adds	r3, #1
 802d4e2:	60fb      	str	r3, [r7, #12]
 802d4e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802d4e6:	429a      	cmp	r2, r3
 802d4e8:	d307      	bcc.n	802d4fa <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 802d4ea:	687b      	ldr	r3, [r7, #4]
 802d4ec:	681b      	ldr	r3, [r3, #0]
 802d4ee:	681b      	ldr	r3, [r3, #0]
 802d4f0:	f003 0301 	and.w	r3, r3, #1
 802d4f4:	2b00      	cmp	r3, #0
 802d4f6:	d1f2      	bne.n	802d4de <HAL_DMA_IRQHandler+0x8da>
 802d4f8:	e000      	b.n	802d4fc <HAL_DMA_IRQHandler+0x8f8>
            break;
 802d4fa:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 802d4fc:	687b      	ldr	r3, [r7, #4]
 802d4fe:	681b      	ldr	r3, [r3, #0]
 802d500:	681b      	ldr	r3, [r3, #0]
 802d502:	f003 0301 	and.w	r3, r3, #1
 802d506:	2b00      	cmp	r3, #0
 802d508:	d004      	beq.n	802d514 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 802d50a:	687b      	ldr	r3, [r7, #4]
 802d50c:	2203      	movs	r2, #3
 802d50e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 802d512:	e003      	b.n	802d51c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 802d514:	687b      	ldr	r3, [r7, #4]
 802d516:	2201      	movs	r2, #1
 802d518:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 802d51c:	687b      	ldr	r3, [r7, #4]
 802d51e:	2200      	movs	r2, #0
 802d520:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 802d524:	687b      	ldr	r3, [r7, #4]
 802d526:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802d528:	2b00      	cmp	r3, #0
 802d52a:	f000 8272 	beq.w	802da12 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 802d52e:	687b      	ldr	r3, [r7, #4]
 802d530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802d532:	6878      	ldr	r0, [r7, #4]
 802d534:	4798      	blx	r3
 802d536:	e26c      	b.n	802da12 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 802d538:	687b      	ldr	r3, [r7, #4]
 802d53a:	681b      	ldr	r3, [r3, #0]
 802d53c:	4a43      	ldr	r2, [pc, #268]	; (802d64c <HAL_DMA_IRQHandler+0xa48>)
 802d53e:	4293      	cmp	r3, r2
 802d540:	d022      	beq.n	802d588 <HAL_DMA_IRQHandler+0x984>
 802d542:	687b      	ldr	r3, [r7, #4]
 802d544:	681b      	ldr	r3, [r3, #0]
 802d546:	4a42      	ldr	r2, [pc, #264]	; (802d650 <HAL_DMA_IRQHandler+0xa4c>)
 802d548:	4293      	cmp	r3, r2
 802d54a:	d01d      	beq.n	802d588 <HAL_DMA_IRQHandler+0x984>
 802d54c:	687b      	ldr	r3, [r7, #4]
 802d54e:	681b      	ldr	r3, [r3, #0]
 802d550:	4a40      	ldr	r2, [pc, #256]	; (802d654 <HAL_DMA_IRQHandler+0xa50>)
 802d552:	4293      	cmp	r3, r2
 802d554:	d018      	beq.n	802d588 <HAL_DMA_IRQHandler+0x984>
 802d556:	687b      	ldr	r3, [r7, #4]
 802d558:	681b      	ldr	r3, [r3, #0]
 802d55a:	4a3f      	ldr	r2, [pc, #252]	; (802d658 <HAL_DMA_IRQHandler+0xa54>)
 802d55c:	4293      	cmp	r3, r2
 802d55e:	d013      	beq.n	802d588 <HAL_DMA_IRQHandler+0x984>
 802d560:	687b      	ldr	r3, [r7, #4]
 802d562:	681b      	ldr	r3, [r3, #0]
 802d564:	4a3d      	ldr	r2, [pc, #244]	; (802d65c <HAL_DMA_IRQHandler+0xa58>)
 802d566:	4293      	cmp	r3, r2
 802d568:	d00e      	beq.n	802d588 <HAL_DMA_IRQHandler+0x984>
 802d56a:	687b      	ldr	r3, [r7, #4]
 802d56c:	681b      	ldr	r3, [r3, #0]
 802d56e:	4a3c      	ldr	r2, [pc, #240]	; (802d660 <HAL_DMA_IRQHandler+0xa5c>)
 802d570:	4293      	cmp	r3, r2
 802d572:	d009      	beq.n	802d588 <HAL_DMA_IRQHandler+0x984>
 802d574:	687b      	ldr	r3, [r7, #4]
 802d576:	681b      	ldr	r3, [r3, #0]
 802d578:	4a3a      	ldr	r2, [pc, #232]	; (802d664 <HAL_DMA_IRQHandler+0xa60>)
 802d57a:	4293      	cmp	r3, r2
 802d57c:	d004      	beq.n	802d588 <HAL_DMA_IRQHandler+0x984>
 802d57e:	687b      	ldr	r3, [r7, #4]
 802d580:	681b      	ldr	r3, [r3, #0]
 802d582:	4a39      	ldr	r2, [pc, #228]	; (802d668 <HAL_DMA_IRQHandler+0xa64>)
 802d584:	4293      	cmp	r3, r2
 802d586:	d101      	bne.n	802d58c <HAL_DMA_IRQHandler+0x988>
 802d588:	2301      	movs	r3, #1
 802d58a:	e000      	b.n	802d58e <HAL_DMA_IRQHandler+0x98a>
 802d58c:	2300      	movs	r3, #0
 802d58e:	2b00      	cmp	r3, #0
 802d590:	f000 823f 	beq.w	802da12 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 802d594:	687b      	ldr	r3, [r7, #4]
 802d596:	681b      	ldr	r3, [r3, #0]
 802d598:	681b      	ldr	r3, [r3, #0]
 802d59a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 802d59c:	687b      	ldr	r3, [r7, #4]
 802d59e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802d5a0:	f003 031f 	and.w	r3, r3, #31
 802d5a4:	2204      	movs	r2, #4
 802d5a6:	409a      	lsls	r2, r3
 802d5a8:	697b      	ldr	r3, [r7, #20]
 802d5aa:	4013      	ands	r3, r2
 802d5ac:	2b00      	cmp	r3, #0
 802d5ae:	f000 80cd 	beq.w	802d74c <HAL_DMA_IRQHandler+0xb48>
 802d5b2:	693b      	ldr	r3, [r7, #16]
 802d5b4:	f003 0304 	and.w	r3, r3, #4
 802d5b8:	2b00      	cmp	r3, #0
 802d5ba:	f000 80c7 	beq.w	802d74c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 802d5be:	687b      	ldr	r3, [r7, #4]
 802d5c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802d5c2:	f003 031f 	and.w	r3, r3, #31
 802d5c6:	2204      	movs	r2, #4
 802d5c8:	409a      	lsls	r2, r3
 802d5ca:	69fb      	ldr	r3, [r7, #28]
 802d5cc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 802d5ce:	693b      	ldr	r3, [r7, #16]
 802d5d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 802d5d4:	2b00      	cmp	r3, #0
 802d5d6:	d049      	beq.n	802d66c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 802d5d8:	693b      	ldr	r3, [r7, #16]
 802d5da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 802d5de:	2b00      	cmp	r3, #0
 802d5e0:	d109      	bne.n	802d5f6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 802d5e2:	687b      	ldr	r3, [r7, #4]
 802d5e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802d5e6:	2b00      	cmp	r3, #0
 802d5e8:	f000 8210 	beq.w	802da0c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 802d5ec:	687b      	ldr	r3, [r7, #4]
 802d5ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802d5f0:	6878      	ldr	r0, [r7, #4]
 802d5f2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 802d5f4:	e20a      	b.n	802da0c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 802d5f6:	687b      	ldr	r3, [r7, #4]
 802d5f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802d5fa:	2b00      	cmp	r3, #0
 802d5fc:	f000 8206 	beq.w	802da0c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 802d600:	687b      	ldr	r3, [r7, #4]
 802d602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802d604:	6878      	ldr	r0, [r7, #4]
 802d606:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 802d608:	e200      	b.n	802da0c <HAL_DMA_IRQHandler+0xe08>
 802d60a:	bf00      	nop
 802d60c:	40020010 	.word	0x40020010
 802d610:	40020028 	.word	0x40020028
 802d614:	40020040 	.word	0x40020040
 802d618:	40020058 	.word	0x40020058
 802d61c:	40020070 	.word	0x40020070
 802d620:	40020088 	.word	0x40020088
 802d624:	400200a0 	.word	0x400200a0
 802d628:	400200b8 	.word	0x400200b8
 802d62c:	40020410 	.word	0x40020410
 802d630:	40020428 	.word	0x40020428
 802d634:	40020440 	.word	0x40020440
 802d638:	40020458 	.word	0x40020458
 802d63c:	40020470 	.word	0x40020470
 802d640:	40020488 	.word	0x40020488
 802d644:	400204a0 	.word	0x400204a0
 802d648:	400204b8 	.word	0x400204b8
 802d64c:	58025408 	.word	0x58025408
 802d650:	5802541c 	.word	0x5802541c
 802d654:	58025430 	.word	0x58025430
 802d658:	58025444 	.word	0x58025444
 802d65c:	58025458 	.word	0x58025458
 802d660:	5802546c 	.word	0x5802546c
 802d664:	58025480 	.word	0x58025480
 802d668:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 802d66c:	693b      	ldr	r3, [r7, #16]
 802d66e:	f003 0320 	and.w	r3, r3, #32
 802d672:	2b00      	cmp	r3, #0
 802d674:	d160      	bne.n	802d738 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 802d676:	687b      	ldr	r3, [r7, #4]
 802d678:	681b      	ldr	r3, [r3, #0]
 802d67a:	4a7f      	ldr	r2, [pc, #508]	; (802d878 <HAL_DMA_IRQHandler+0xc74>)
 802d67c:	4293      	cmp	r3, r2
 802d67e:	d04a      	beq.n	802d716 <HAL_DMA_IRQHandler+0xb12>
 802d680:	687b      	ldr	r3, [r7, #4]
 802d682:	681b      	ldr	r3, [r3, #0]
 802d684:	4a7d      	ldr	r2, [pc, #500]	; (802d87c <HAL_DMA_IRQHandler+0xc78>)
 802d686:	4293      	cmp	r3, r2
 802d688:	d045      	beq.n	802d716 <HAL_DMA_IRQHandler+0xb12>
 802d68a:	687b      	ldr	r3, [r7, #4]
 802d68c:	681b      	ldr	r3, [r3, #0]
 802d68e:	4a7c      	ldr	r2, [pc, #496]	; (802d880 <HAL_DMA_IRQHandler+0xc7c>)
 802d690:	4293      	cmp	r3, r2
 802d692:	d040      	beq.n	802d716 <HAL_DMA_IRQHandler+0xb12>
 802d694:	687b      	ldr	r3, [r7, #4]
 802d696:	681b      	ldr	r3, [r3, #0]
 802d698:	4a7a      	ldr	r2, [pc, #488]	; (802d884 <HAL_DMA_IRQHandler+0xc80>)
 802d69a:	4293      	cmp	r3, r2
 802d69c:	d03b      	beq.n	802d716 <HAL_DMA_IRQHandler+0xb12>
 802d69e:	687b      	ldr	r3, [r7, #4]
 802d6a0:	681b      	ldr	r3, [r3, #0]
 802d6a2:	4a79      	ldr	r2, [pc, #484]	; (802d888 <HAL_DMA_IRQHandler+0xc84>)
 802d6a4:	4293      	cmp	r3, r2
 802d6a6:	d036      	beq.n	802d716 <HAL_DMA_IRQHandler+0xb12>
 802d6a8:	687b      	ldr	r3, [r7, #4]
 802d6aa:	681b      	ldr	r3, [r3, #0]
 802d6ac:	4a77      	ldr	r2, [pc, #476]	; (802d88c <HAL_DMA_IRQHandler+0xc88>)
 802d6ae:	4293      	cmp	r3, r2
 802d6b0:	d031      	beq.n	802d716 <HAL_DMA_IRQHandler+0xb12>
 802d6b2:	687b      	ldr	r3, [r7, #4]
 802d6b4:	681b      	ldr	r3, [r3, #0]
 802d6b6:	4a76      	ldr	r2, [pc, #472]	; (802d890 <HAL_DMA_IRQHandler+0xc8c>)
 802d6b8:	4293      	cmp	r3, r2
 802d6ba:	d02c      	beq.n	802d716 <HAL_DMA_IRQHandler+0xb12>
 802d6bc:	687b      	ldr	r3, [r7, #4]
 802d6be:	681b      	ldr	r3, [r3, #0]
 802d6c0:	4a74      	ldr	r2, [pc, #464]	; (802d894 <HAL_DMA_IRQHandler+0xc90>)
 802d6c2:	4293      	cmp	r3, r2
 802d6c4:	d027      	beq.n	802d716 <HAL_DMA_IRQHandler+0xb12>
 802d6c6:	687b      	ldr	r3, [r7, #4]
 802d6c8:	681b      	ldr	r3, [r3, #0]
 802d6ca:	4a73      	ldr	r2, [pc, #460]	; (802d898 <HAL_DMA_IRQHandler+0xc94>)
 802d6cc:	4293      	cmp	r3, r2
 802d6ce:	d022      	beq.n	802d716 <HAL_DMA_IRQHandler+0xb12>
 802d6d0:	687b      	ldr	r3, [r7, #4]
 802d6d2:	681b      	ldr	r3, [r3, #0]
 802d6d4:	4a71      	ldr	r2, [pc, #452]	; (802d89c <HAL_DMA_IRQHandler+0xc98>)
 802d6d6:	4293      	cmp	r3, r2
 802d6d8:	d01d      	beq.n	802d716 <HAL_DMA_IRQHandler+0xb12>
 802d6da:	687b      	ldr	r3, [r7, #4]
 802d6dc:	681b      	ldr	r3, [r3, #0]
 802d6de:	4a70      	ldr	r2, [pc, #448]	; (802d8a0 <HAL_DMA_IRQHandler+0xc9c>)
 802d6e0:	4293      	cmp	r3, r2
 802d6e2:	d018      	beq.n	802d716 <HAL_DMA_IRQHandler+0xb12>
 802d6e4:	687b      	ldr	r3, [r7, #4]
 802d6e6:	681b      	ldr	r3, [r3, #0]
 802d6e8:	4a6e      	ldr	r2, [pc, #440]	; (802d8a4 <HAL_DMA_IRQHandler+0xca0>)
 802d6ea:	4293      	cmp	r3, r2
 802d6ec:	d013      	beq.n	802d716 <HAL_DMA_IRQHandler+0xb12>
 802d6ee:	687b      	ldr	r3, [r7, #4]
 802d6f0:	681b      	ldr	r3, [r3, #0]
 802d6f2:	4a6d      	ldr	r2, [pc, #436]	; (802d8a8 <HAL_DMA_IRQHandler+0xca4>)
 802d6f4:	4293      	cmp	r3, r2
 802d6f6:	d00e      	beq.n	802d716 <HAL_DMA_IRQHandler+0xb12>
 802d6f8:	687b      	ldr	r3, [r7, #4]
 802d6fa:	681b      	ldr	r3, [r3, #0]
 802d6fc:	4a6b      	ldr	r2, [pc, #428]	; (802d8ac <HAL_DMA_IRQHandler+0xca8>)
 802d6fe:	4293      	cmp	r3, r2
 802d700:	d009      	beq.n	802d716 <HAL_DMA_IRQHandler+0xb12>
 802d702:	687b      	ldr	r3, [r7, #4]
 802d704:	681b      	ldr	r3, [r3, #0]
 802d706:	4a6a      	ldr	r2, [pc, #424]	; (802d8b0 <HAL_DMA_IRQHandler+0xcac>)
 802d708:	4293      	cmp	r3, r2
 802d70a:	d004      	beq.n	802d716 <HAL_DMA_IRQHandler+0xb12>
 802d70c:	687b      	ldr	r3, [r7, #4]
 802d70e:	681b      	ldr	r3, [r3, #0]
 802d710:	4a68      	ldr	r2, [pc, #416]	; (802d8b4 <HAL_DMA_IRQHandler+0xcb0>)
 802d712:	4293      	cmp	r3, r2
 802d714:	d108      	bne.n	802d728 <HAL_DMA_IRQHandler+0xb24>
 802d716:	687b      	ldr	r3, [r7, #4]
 802d718:	681b      	ldr	r3, [r3, #0]
 802d71a:	681a      	ldr	r2, [r3, #0]
 802d71c:	687b      	ldr	r3, [r7, #4]
 802d71e:	681b      	ldr	r3, [r3, #0]
 802d720:	f022 0208 	bic.w	r2, r2, #8
 802d724:	601a      	str	r2, [r3, #0]
 802d726:	e007      	b.n	802d738 <HAL_DMA_IRQHandler+0xb34>
 802d728:	687b      	ldr	r3, [r7, #4]
 802d72a:	681b      	ldr	r3, [r3, #0]
 802d72c:	681a      	ldr	r2, [r3, #0]
 802d72e:	687b      	ldr	r3, [r7, #4]
 802d730:	681b      	ldr	r3, [r3, #0]
 802d732:	f022 0204 	bic.w	r2, r2, #4
 802d736:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 802d738:	687b      	ldr	r3, [r7, #4]
 802d73a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802d73c:	2b00      	cmp	r3, #0
 802d73e:	f000 8165 	beq.w	802da0c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 802d742:	687b      	ldr	r3, [r7, #4]
 802d744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802d746:	6878      	ldr	r0, [r7, #4]
 802d748:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 802d74a:	e15f      	b.n	802da0c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 802d74c:	687b      	ldr	r3, [r7, #4]
 802d74e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802d750:	f003 031f 	and.w	r3, r3, #31
 802d754:	2202      	movs	r2, #2
 802d756:	409a      	lsls	r2, r3
 802d758:	697b      	ldr	r3, [r7, #20]
 802d75a:	4013      	ands	r3, r2
 802d75c:	2b00      	cmp	r3, #0
 802d75e:	f000 80c5 	beq.w	802d8ec <HAL_DMA_IRQHandler+0xce8>
 802d762:	693b      	ldr	r3, [r7, #16]
 802d764:	f003 0302 	and.w	r3, r3, #2
 802d768:	2b00      	cmp	r3, #0
 802d76a:	f000 80bf 	beq.w	802d8ec <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 802d76e:	687b      	ldr	r3, [r7, #4]
 802d770:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802d772:	f003 031f 	and.w	r3, r3, #31
 802d776:	2202      	movs	r2, #2
 802d778:	409a      	lsls	r2, r3
 802d77a:	69fb      	ldr	r3, [r7, #28]
 802d77c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 802d77e:	693b      	ldr	r3, [r7, #16]
 802d780:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 802d784:	2b00      	cmp	r3, #0
 802d786:	d018      	beq.n	802d7ba <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 802d788:	693b      	ldr	r3, [r7, #16]
 802d78a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 802d78e:	2b00      	cmp	r3, #0
 802d790:	d109      	bne.n	802d7a6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 802d792:	687b      	ldr	r3, [r7, #4]
 802d794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802d796:	2b00      	cmp	r3, #0
 802d798:	f000 813a 	beq.w	802da10 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 802d79c:	687b      	ldr	r3, [r7, #4]
 802d79e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802d7a0:	6878      	ldr	r0, [r7, #4]
 802d7a2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 802d7a4:	e134      	b.n	802da10 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 802d7a6:	687b      	ldr	r3, [r7, #4]
 802d7a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802d7aa:	2b00      	cmp	r3, #0
 802d7ac:	f000 8130 	beq.w	802da10 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 802d7b0:	687b      	ldr	r3, [r7, #4]
 802d7b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802d7b4:	6878      	ldr	r0, [r7, #4]
 802d7b6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 802d7b8:	e12a      	b.n	802da10 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 802d7ba:	693b      	ldr	r3, [r7, #16]
 802d7bc:	f003 0320 	and.w	r3, r3, #32
 802d7c0:	2b00      	cmp	r3, #0
 802d7c2:	f040 8089 	bne.w	802d8d8 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 802d7c6:	687b      	ldr	r3, [r7, #4]
 802d7c8:	681b      	ldr	r3, [r3, #0]
 802d7ca:	4a2b      	ldr	r2, [pc, #172]	; (802d878 <HAL_DMA_IRQHandler+0xc74>)
 802d7cc:	4293      	cmp	r3, r2
 802d7ce:	d04a      	beq.n	802d866 <HAL_DMA_IRQHandler+0xc62>
 802d7d0:	687b      	ldr	r3, [r7, #4]
 802d7d2:	681b      	ldr	r3, [r3, #0]
 802d7d4:	4a29      	ldr	r2, [pc, #164]	; (802d87c <HAL_DMA_IRQHandler+0xc78>)
 802d7d6:	4293      	cmp	r3, r2
 802d7d8:	d045      	beq.n	802d866 <HAL_DMA_IRQHandler+0xc62>
 802d7da:	687b      	ldr	r3, [r7, #4]
 802d7dc:	681b      	ldr	r3, [r3, #0]
 802d7de:	4a28      	ldr	r2, [pc, #160]	; (802d880 <HAL_DMA_IRQHandler+0xc7c>)
 802d7e0:	4293      	cmp	r3, r2
 802d7e2:	d040      	beq.n	802d866 <HAL_DMA_IRQHandler+0xc62>
 802d7e4:	687b      	ldr	r3, [r7, #4]
 802d7e6:	681b      	ldr	r3, [r3, #0]
 802d7e8:	4a26      	ldr	r2, [pc, #152]	; (802d884 <HAL_DMA_IRQHandler+0xc80>)
 802d7ea:	4293      	cmp	r3, r2
 802d7ec:	d03b      	beq.n	802d866 <HAL_DMA_IRQHandler+0xc62>
 802d7ee:	687b      	ldr	r3, [r7, #4]
 802d7f0:	681b      	ldr	r3, [r3, #0]
 802d7f2:	4a25      	ldr	r2, [pc, #148]	; (802d888 <HAL_DMA_IRQHandler+0xc84>)
 802d7f4:	4293      	cmp	r3, r2
 802d7f6:	d036      	beq.n	802d866 <HAL_DMA_IRQHandler+0xc62>
 802d7f8:	687b      	ldr	r3, [r7, #4]
 802d7fa:	681b      	ldr	r3, [r3, #0]
 802d7fc:	4a23      	ldr	r2, [pc, #140]	; (802d88c <HAL_DMA_IRQHandler+0xc88>)
 802d7fe:	4293      	cmp	r3, r2
 802d800:	d031      	beq.n	802d866 <HAL_DMA_IRQHandler+0xc62>
 802d802:	687b      	ldr	r3, [r7, #4]
 802d804:	681b      	ldr	r3, [r3, #0]
 802d806:	4a22      	ldr	r2, [pc, #136]	; (802d890 <HAL_DMA_IRQHandler+0xc8c>)
 802d808:	4293      	cmp	r3, r2
 802d80a:	d02c      	beq.n	802d866 <HAL_DMA_IRQHandler+0xc62>
 802d80c:	687b      	ldr	r3, [r7, #4]
 802d80e:	681b      	ldr	r3, [r3, #0]
 802d810:	4a20      	ldr	r2, [pc, #128]	; (802d894 <HAL_DMA_IRQHandler+0xc90>)
 802d812:	4293      	cmp	r3, r2
 802d814:	d027      	beq.n	802d866 <HAL_DMA_IRQHandler+0xc62>
 802d816:	687b      	ldr	r3, [r7, #4]
 802d818:	681b      	ldr	r3, [r3, #0]
 802d81a:	4a1f      	ldr	r2, [pc, #124]	; (802d898 <HAL_DMA_IRQHandler+0xc94>)
 802d81c:	4293      	cmp	r3, r2
 802d81e:	d022      	beq.n	802d866 <HAL_DMA_IRQHandler+0xc62>
 802d820:	687b      	ldr	r3, [r7, #4]
 802d822:	681b      	ldr	r3, [r3, #0]
 802d824:	4a1d      	ldr	r2, [pc, #116]	; (802d89c <HAL_DMA_IRQHandler+0xc98>)
 802d826:	4293      	cmp	r3, r2
 802d828:	d01d      	beq.n	802d866 <HAL_DMA_IRQHandler+0xc62>
 802d82a:	687b      	ldr	r3, [r7, #4]
 802d82c:	681b      	ldr	r3, [r3, #0]
 802d82e:	4a1c      	ldr	r2, [pc, #112]	; (802d8a0 <HAL_DMA_IRQHandler+0xc9c>)
 802d830:	4293      	cmp	r3, r2
 802d832:	d018      	beq.n	802d866 <HAL_DMA_IRQHandler+0xc62>
 802d834:	687b      	ldr	r3, [r7, #4]
 802d836:	681b      	ldr	r3, [r3, #0]
 802d838:	4a1a      	ldr	r2, [pc, #104]	; (802d8a4 <HAL_DMA_IRQHandler+0xca0>)
 802d83a:	4293      	cmp	r3, r2
 802d83c:	d013      	beq.n	802d866 <HAL_DMA_IRQHandler+0xc62>
 802d83e:	687b      	ldr	r3, [r7, #4]
 802d840:	681b      	ldr	r3, [r3, #0]
 802d842:	4a19      	ldr	r2, [pc, #100]	; (802d8a8 <HAL_DMA_IRQHandler+0xca4>)
 802d844:	4293      	cmp	r3, r2
 802d846:	d00e      	beq.n	802d866 <HAL_DMA_IRQHandler+0xc62>
 802d848:	687b      	ldr	r3, [r7, #4]
 802d84a:	681b      	ldr	r3, [r3, #0]
 802d84c:	4a17      	ldr	r2, [pc, #92]	; (802d8ac <HAL_DMA_IRQHandler+0xca8>)
 802d84e:	4293      	cmp	r3, r2
 802d850:	d009      	beq.n	802d866 <HAL_DMA_IRQHandler+0xc62>
 802d852:	687b      	ldr	r3, [r7, #4]
 802d854:	681b      	ldr	r3, [r3, #0]
 802d856:	4a16      	ldr	r2, [pc, #88]	; (802d8b0 <HAL_DMA_IRQHandler+0xcac>)
 802d858:	4293      	cmp	r3, r2
 802d85a:	d004      	beq.n	802d866 <HAL_DMA_IRQHandler+0xc62>
 802d85c:	687b      	ldr	r3, [r7, #4]
 802d85e:	681b      	ldr	r3, [r3, #0]
 802d860:	4a14      	ldr	r2, [pc, #80]	; (802d8b4 <HAL_DMA_IRQHandler+0xcb0>)
 802d862:	4293      	cmp	r3, r2
 802d864:	d128      	bne.n	802d8b8 <HAL_DMA_IRQHandler+0xcb4>
 802d866:	687b      	ldr	r3, [r7, #4]
 802d868:	681b      	ldr	r3, [r3, #0]
 802d86a:	681a      	ldr	r2, [r3, #0]
 802d86c:	687b      	ldr	r3, [r7, #4]
 802d86e:	681b      	ldr	r3, [r3, #0]
 802d870:	f022 0214 	bic.w	r2, r2, #20
 802d874:	601a      	str	r2, [r3, #0]
 802d876:	e027      	b.n	802d8c8 <HAL_DMA_IRQHandler+0xcc4>
 802d878:	40020010 	.word	0x40020010
 802d87c:	40020028 	.word	0x40020028
 802d880:	40020040 	.word	0x40020040
 802d884:	40020058 	.word	0x40020058
 802d888:	40020070 	.word	0x40020070
 802d88c:	40020088 	.word	0x40020088
 802d890:	400200a0 	.word	0x400200a0
 802d894:	400200b8 	.word	0x400200b8
 802d898:	40020410 	.word	0x40020410
 802d89c:	40020428 	.word	0x40020428
 802d8a0:	40020440 	.word	0x40020440
 802d8a4:	40020458 	.word	0x40020458
 802d8a8:	40020470 	.word	0x40020470
 802d8ac:	40020488 	.word	0x40020488
 802d8b0:	400204a0 	.word	0x400204a0
 802d8b4:	400204b8 	.word	0x400204b8
 802d8b8:	687b      	ldr	r3, [r7, #4]
 802d8ba:	681b      	ldr	r3, [r3, #0]
 802d8bc:	681a      	ldr	r2, [r3, #0]
 802d8be:	687b      	ldr	r3, [r7, #4]
 802d8c0:	681b      	ldr	r3, [r3, #0]
 802d8c2:	f022 020a 	bic.w	r2, r2, #10
 802d8c6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 802d8c8:	687b      	ldr	r3, [r7, #4]
 802d8ca:	2201      	movs	r2, #1
 802d8cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 802d8d0:	687b      	ldr	r3, [r7, #4]
 802d8d2:	2200      	movs	r2, #0
 802d8d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 802d8d8:	687b      	ldr	r3, [r7, #4]
 802d8da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802d8dc:	2b00      	cmp	r3, #0
 802d8de:	f000 8097 	beq.w	802da10 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 802d8e2:	687b      	ldr	r3, [r7, #4]
 802d8e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802d8e6:	6878      	ldr	r0, [r7, #4]
 802d8e8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 802d8ea:	e091      	b.n	802da10 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 802d8ec:	687b      	ldr	r3, [r7, #4]
 802d8ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802d8f0:	f003 031f 	and.w	r3, r3, #31
 802d8f4:	2208      	movs	r2, #8
 802d8f6:	409a      	lsls	r2, r3
 802d8f8:	697b      	ldr	r3, [r7, #20]
 802d8fa:	4013      	ands	r3, r2
 802d8fc:	2b00      	cmp	r3, #0
 802d8fe:	f000 8088 	beq.w	802da12 <HAL_DMA_IRQHandler+0xe0e>
 802d902:	693b      	ldr	r3, [r7, #16]
 802d904:	f003 0308 	and.w	r3, r3, #8
 802d908:	2b00      	cmp	r3, #0
 802d90a:	f000 8082 	beq.w	802da12 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 802d90e:	687b      	ldr	r3, [r7, #4]
 802d910:	681b      	ldr	r3, [r3, #0]
 802d912:	4a41      	ldr	r2, [pc, #260]	; (802da18 <HAL_DMA_IRQHandler+0xe14>)
 802d914:	4293      	cmp	r3, r2
 802d916:	d04a      	beq.n	802d9ae <HAL_DMA_IRQHandler+0xdaa>
 802d918:	687b      	ldr	r3, [r7, #4]
 802d91a:	681b      	ldr	r3, [r3, #0]
 802d91c:	4a3f      	ldr	r2, [pc, #252]	; (802da1c <HAL_DMA_IRQHandler+0xe18>)
 802d91e:	4293      	cmp	r3, r2
 802d920:	d045      	beq.n	802d9ae <HAL_DMA_IRQHandler+0xdaa>
 802d922:	687b      	ldr	r3, [r7, #4]
 802d924:	681b      	ldr	r3, [r3, #0]
 802d926:	4a3e      	ldr	r2, [pc, #248]	; (802da20 <HAL_DMA_IRQHandler+0xe1c>)
 802d928:	4293      	cmp	r3, r2
 802d92a:	d040      	beq.n	802d9ae <HAL_DMA_IRQHandler+0xdaa>
 802d92c:	687b      	ldr	r3, [r7, #4]
 802d92e:	681b      	ldr	r3, [r3, #0]
 802d930:	4a3c      	ldr	r2, [pc, #240]	; (802da24 <HAL_DMA_IRQHandler+0xe20>)
 802d932:	4293      	cmp	r3, r2
 802d934:	d03b      	beq.n	802d9ae <HAL_DMA_IRQHandler+0xdaa>
 802d936:	687b      	ldr	r3, [r7, #4]
 802d938:	681b      	ldr	r3, [r3, #0]
 802d93a:	4a3b      	ldr	r2, [pc, #236]	; (802da28 <HAL_DMA_IRQHandler+0xe24>)
 802d93c:	4293      	cmp	r3, r2
 802d93e:	d036      	beq.n	802d9ae <HAL_DMA_IRQHandler+0xdaa>
 802d940:	687b      	ldr	r3, [r7, #4]
 802d942:	681b      	ldr	r3, [r3, #0]
 802d944:	4a39      	ldr	r2, [pc, #228]	; (802da2c <HAL_DMA_IRQHandler+0xe28>)
 802d946:	4293      	cmp	r3, r2
 802d948:	d031      	beq.n	802d9ae <HAL_DMA_IRQHandler+0xdaa>
 802d94a:	687b      	ldr	r3, [r7, #4]
 802d94c:	681b      	ldr	r3, [r3, #0]
 802d94e:	4a38      	ldr	r2, [pc, #224]	; (802da30 <HAL_DMA_IRQHandler+0xe2c>)
 802d950:	4293      	cmp	r3, r2
 802d952:	d02c      	beq.n	802d9ae <HAL_DMA_IRQHandler+0xdaa>
 802d954:	687b      	ldr	r3, [r7, #4]
 802d956:	681b      	ldr	r3, [r3, #0]
 802d958:	4a36      	ldr	r2, [pc, #216]	; (802da34 <HAL_DMA_IRQHandler+0xe30>)
 802d95a:	4293      	cmp	r3, r2
 802d95c:	d027      	beq.n	802d9ae <HAL_DMA_IRQHandler+0xdaa>
 802d95e:	687b      	ldr	r3, [r7, #4]
 802d960:	681b      	ldr	r3, [r3, #0]
 802d962:	4a35      	ldr	r2, [pc, #212]	; (802da38 <HAL_DMA_IRQHandler+0xe34>)
 802d964:	4293      	cmp	r3, r2
 802d966:	d022      	beq.n	802d9ae <HAL_DMA_IRQHandler+0xdaa>
 802d968:	687b      	ldr	r3, [r7, #4]
 802d96a:	681b      	ldr	r3, [r3, #0]
 802d96c:	4a33      	ldr	r2, [pc, #204]	; (802da3c <HAL_DMA_IRQHandler+0xe38>)
 802d96e:	4293      	cmp	r3, r2
 802d970:	d01d      	beq.n	802d9ae <HAL_DMA_IRQHandler+0xdaa>
 802d972:	687b      	ldr	r3, [r7, #4]
 802d974:	681b      	ldr	r3, [r3, #0]
 802d976:	4a32      	ldr	r2, [pc, #200]	; (802da40 <HAL_DMA_IRQHandler+0xe3c>)
 802d978:	4293      	cmp	r3, r2
 802d97a:	d018      	beq.n	802d9ae <HAL_DMA_IRQHandler+0xdaa>
 802d97c:	687b      	ldr	r3, [r7, #4]
 802d97e:	681b      	ldr	r3, [r3, #0]
 802d980:	4a30      	ldr	r2, [pc, #192]	; (802da44 <HAL_DMA_IRQHandler+0xe40>)
 802d982:	4293      	cmp	r3, r2
 802d984:	d013      	beq.n	802d9ae <HAL_DMA_IRQHandler+0xdaa>
 802d986:	687b      	ldr	r3, [r7, #4]
 802d988:	681b      	ldr	r3, [r3, #0]
 802d98a:	4a2f      	ldr	r2, [pc, #188]	; (802da48 <HAL_DMA_IRQHandler+0xe44>)
 802d98c:	4293      	cmp	r3, r2
 802d98e:	d00e      	beq.n	802d9ae <HAL_DMA_IRQHandler+0xdaa>
 802d990:	687b      	ldr	r3, [r7, #4]
 802d992:	681b      	ldr	r3, [r3, #0]
 802d994:	4a2d      	ldr	r2, [pc, #180]	; (802da4c <HAL_DMA_IRQHandler+0xe48>)
 802d996:	4293      	cmp	r3, r2
 802d998:	d009      	beq.n	802d9ae <HAL_DMA_IRQHandler+0xdaa>
 802d99a:	687b      	ldr	r3, [r7, #4]
 802d99c:	681b      	ldr	r3, [r3, #0]
 802d99e:	4a2c      	ldr	r2, [pc, #176]	; (802da50 <HAL_DMA_IRQHandler+0xe4c>)
 802d9a0:	4293      	cmp	r3, r2
 802d9a2:	d004      	beq.n	802d9ae <HAL_DMA_IRQHandler+0xdaa>
 802d9a4:	687b      	ldr	r3, [r7, #4]
 802d9a6:	681b      	ldr	r3, [r3, #0]
 802d9a8:	4a2a      	ldr	r2, [pc, #168]	; (802da54 <HAL_DMA_IRQHandler+0xe50>)
 802d9aa:	4293      	cmp	r3, r2
 802d9ac:	d108      	bne.n	802d9c0 <HAL_DMA_IRQHandler+0xdbc>
 802d9ae:	687b      	ldr	r3, [r7, #4]
 802d9b0:	681b      	ldr	r3, [r3, #0]
 802d9b2:	681a      	ldr	r2, [r3, #0]
 802d9b4:	687b      	ldr	r3, [r7, #4]
 802d9b6:	681b      	ldr	r3, [r3, #0]
 802d9b8:	f022 021c 	bic.w	r2, r2, #28
 802d9bc:	601a      	str	r2, [r3, #0]
 802d9be:	e007      	b.n	802d9d0 <HAL_DMA_IRQHandler+0xdcc>
 802d9c0:	687b      	ldr	r3, [r7, #4]
 802d9c2:	681b      	ldr	r3, [r3, #0]
 802d9c4:	681a      	ldr	r2, [r3, #0]
 802d9c6:	687b      	ldr	r3, [r7, #4]
 802d9c8:	681b      	ldr	r3, [r3, #0]
 802d9ca:	f022 020e 	bic.w	r2, r2, #14
 802d9ce:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 802d9d0:	687b      	ldr	r3, [r7, #4]
 802d9d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802d9d4:	f003 031f 	and.w	r3, r3, #31
 802d9d8:	2201      	movs	r2, #1
 802d9da:	409a      	lsls	r2, r3
 802d9dc:	69fb      	ldr	r3, [r7, #28]
 802d9de:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 802d9e0:	687b      	ldr	r3, [r7, #4]
 802d9e2:	2201      	movs	r2, #1
 802d9e4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 802d9e6:	687b      	ldr	r3, [r7, #4]
 802d9e8:	2201      	movs	r2, #1
 802d9ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 802d9ee:	687b      	ldr	r3, [r7, #4]
 802d9f0:	2200      	movs	r2, #0
 802d9f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 802d9f6:	687b      	ldr	r3, [r7, #4]
 802d9f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802d9fa:	2b00      	cmp	r3, #0
 802d9fc:	d009      	beq.n	802da12 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 802d9fe:	687b      	ldr	r3, [r7, #4]
 802da00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802da02:	6878      	ldr	r0, [r7, #4]
 802da04:	4798      	blx	r3
 802da06:	e004      	b.n	802da12 <HAL_DMA_IRQHandler+0xe0e>
          return;
 802da08:	bf00      	nop
 802da0a:	e002      	b.n	802da12 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 802da0c:	bf00      	nop
 802da0e:	e000      	b.n	802da12 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 802da10:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 802da12:	3728      	adds	r7, #40	; 0x28
 802da14:	46bd      	mov	sp, r7
 802da16:	bd80      	pop	{r7, pc}
 802da18:	40020010 	.word	0x40020010
 802da1c:	40020028 	.word	0x40020028
 802da20:	40020040 	.word	0x40020040
 802da24:	40020058 	.word	0x40020058
 802da28:	40020070 	.word	0x40020070
 802da2c:	40020088 	.word	0x40020088
 802da30:	400200a0 	.word	0x400200a0
 802da34:	400200b8 	.word	0x400200b8
 802da38:	40020410 	.word	0x40020410
 802da3c:	40020428 	.word	0x40020428
 802da40:	40020440 	.word	0x40020440
 802da44:	40020458 	.word	0x40020458
 802da48:	40020470 	.word	0x40020470
 802da4c:	40020488 	.word	0x40020488
 802da50:	400204a0 	.word	0x400204a0
 802da54:	400204b8 	.word	0x400204b8

0802da58 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 802da58:	b480      	push	{r7}
 802da5a:	b083      	sub	sp, #12
 802da5c:	af00      	add	r7, sp, #0
 802da5e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 802da60:	687b      	ldr	r3, [r7, #4]
 802da62:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 802da66:	b2db      	uxtb	r3, r3
}
 802da68:	4618      	mov	r0, r3
 802da6a:	370c      	adds	r7, #12
 802da6c:	46bd      	mov	sp, r7
 802da6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802da72:	4770      	bx	lr

0802da74 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 802da74:	b480      	push	{r7}
 802da76:	b083      	sub	sp, #12
 802da78:	af00      	add	r7, sp, #0
 802da7a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 802da7c:	687b      	ldr	r3, [r7, #4]
 802da7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 802da80:	4618      	mov	r0, r3
 802da82:	370c      	adds	r7, #12
 802da84:	46bd      	mov	sp, r7
 802da86:	f85d 7b04 	ldr.w	r7, [sp], #4
 802da8a:	4770      	bx	lr

0802da8c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 802da8c:	b480      	push	{r7}
 802da8e:	b087      	sub	sp, #28
 802da90:	af00      	add	r7, sp, #0
 802da92:	60f8      	str	r0, [r7, #12]
 802da94:	60b9      	str	r1, [r7, #8]
 802da96:	607a      	str	r2, [r7, #4]
 802da98:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 802da9a:	68fb      	ldr	r3, [r7, #12]
 802da9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802da9e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 802daa0:	68fb      	ldr	r3, [r7, #12]
 802daa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802daa4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 802daa6:	68fb      	ldr	r3, [r7, #12]
 802daa8:	681b      	ldr	r3, [r3, #0]
 802daaa:	4a7f      	ldr	r2, [pc, #508]	; (802dca8 <DMA_SetConfig+0x21c>)
 802daac:	4293      	cmp	r3, r2
 802daae:	d072      	beq.n	802db96 <DMA_SetConfig+0x10a>
 802dab0:	68fb      	ldr	r3, [r7, #12]
 802dab2:	681b      	ldr	r3, [r3, #0]
 802dab4:	4a7d      	ldr	r2, [pc, #500]	; (802dcac <DMA_SetConfig+0x220>)
 802dab6:	4293      	cmp	r3, r2
 802dab8:	d06d      	beq.n	802db96 <DMA_SetConfig+0x10a>
 802daba:	68fb      	ldr	r3, [r7, #12]
 802dabc:	681b      	ldr	r3, [r3, #0]
 802dabe:	4a7c      	ldr	r2, [pc, #496]	; (802dcb0 <DMA_SetConfig+0x224>)
 802dac0:	4293      	cmp	r3, r2
 802dac2:	d068      	beq.n	802db96 <DMA_SetConfig+0x10a>
 802dac4:	68fb      	ldr	r3, [r7, #12]
 802dac6:	681b      	ldr	r3, [r3, #0]
 802dac8:	4a7a      	ldr	r2, [pc, #488]	; (802dcb4 <DMA_SetConfig+0x228>)
 802daca:	4293      	cmp	r3, r2
 802dacc:	d063      	beq.n	802db96 <DMA_SetConfig+0x10a>
 802dace:	68fb      	ldr	r3, [r7, #12]
 802dad0:	681b      	ldr	r3, [r3, #0]
 802dad2:	4a79      	ldr	r2, [pc, #484]	; (802dcb8 <DMA_SetConfig+0x22c>)
 802dad4:	4293      	cmp	r3, r2
 802dad6:	d05e      	beq.n	802db96 <DMA_SetConfig+0x10a>
 802dad8:	68fb      	ldr	r3, [r7, #12]
 802dada:	681b      	ldr	r3, [r3, #0]
 802dadc:	4a77      	ldr	r2, [pc, #476]	; (802dcbc <DMA_SetConfig+0x230>)
 802dade:	4293      	cmp	r3, r2
 802dae0:	d059      	beq.n	802db96 <DMA_SetConfig+0x10a>
 802dae2:	68fb      	ldr	r3, [r7, #12]
 802dae4:	681b      	ldr	r3, [r3, #0]
 802dae6:	4a76      	ldr	r2, [pc, #472]	; (802dcc0 <DMA_SetConfig+0x234>)
 802dae8:	4293      	cmp	r3, r2
 802daea:	d054      	beq.n	802db96 <DMA_SetConfig+0x10a>
 802daec:	68fb      	ldr	r3, [r7, #12]
 802daee:	681b      	ldr	r3, [r3, #0]
 802daf0:	4a74      	ldr	r2, [pc, #464]	; (802dcc4 <DMA_SetConfig+0x238>)
 802daf2:	4293      	cmp	r3, r2
 802daf4:	d04f      	beq.n	802db96 <DMA_SetConfig+0x10a>
 802daf6:	68fb      	ldr	r3, [r7, #12]
 802daf8:	681b      	ldr	r3, [r3, #0]
 802dafa:	4a73      	ldr	r2, [pc, #460]	; (802dcc8 <DMA_SetConfig+0x23c>)
 802dafc:	4293      	cmp	r3, r2
 802dafe:	d04a      	beq.n	802db96 <DMA_SetConfig+0x10a>
 802db00:	68fb      	ldr	r3, [r7, #12]
 802db02:	681b      	ldr	r3, [r3, #0]
 802db04:	4a71      	ldr	r2, [pc, #452]	; (802dccc <DMA_SetConfig+0x240>)
 802db06:	4293      	cmp	r3, r2
 802db08:	d045      	beq.n	802db96 <DMA_SetConfig+0x10a>
 802db0a:	68fb      	ldr	r3, [r7, #12]
 802db0c:	681b      	ldr	r3, [r3, #0]
 802db0e:	4a70      	ldr	r2, [pc, #448]	; (802dcd0 <DMA_SetConfig+0x244>)
 802db10:	4293      	cmp	r3, r2
 802db12:	d040      	beq.n	802db96 <DMA_SetConfig+0x10a>
 802db14:	68fb      	ldr	r3, [r7, #12]
 802db16:	681b      	ldr	r3, [r3, #0]
 802db18:	4a6e      	ldr	r2, [pc, #440]	; (802dcd4 <DMA_SetConfig+0x248>)
 802db1a:	4293      	cmp	r3, r2
 802db1c:	d03b      	beq.n	802db96 <DMA_SetConfig+0x10a>
 802db1e:	68fb      	ldr	r3, [r7, #12]
 802db20:	681b      	ldr	r3, [r3, #0]
 802db22:	4a6d      	ldr	r2, [pc, #436]	; (802dcd8 <DMA_SetConfig+0x24c>)
 802db24:	4293      	cmp	r3, r2
 802db26:	d036      	beq.n	802db96 <DMA_SetConfig+0x10a>
 802db28:	68fb      	ldr	r3, [r7, #12]
 802db2a:	681b      	ldr	r3, [r3, #0]
 802db2c:	4a6b      	ldr	r2, [pc, #428]	; (802dcdc <DMA_SetConfig+0x250>)
 802db2e:	4293      	cmp	r3, r2
 802db30:	d031      	beq.n	802db96 <DMA_SetConfig+0x10a>
 802db32:	68fb      	ldr	r3, [r7, #12]
 802db34:	681b      	ldr	r3, [r3, #0]
 802db36:	4a6a      	ldr	r2, [pc, #424]	; (802dce0 <DMA_SetConfig+0x254>)
 802db38:	4293      	cmp	r3, r2
 802db3a:	d02c      	beq.n	802db96 <DMA_SetConfig+0x10a>
 802db3c:	68fb      	ldr	r3, [r7, #12]
 802db3e:	681b      	ldr	r3, [r3, #0]
 802db40:	4a68      	ldr	r2, [pc, #416]	; (802dce4 <DMA_SetConfig+0x258>)
 802db42:	4293      	cmp	r3, r2
 802db44:	d027      	beq.n	802db96 <DMA_SetConfig+0x10a>
 802db46:	68fb      	ldr	r3, [r7, #12]
 802db48:	681b      	ldr	r3, [r3, #0]
 802db4a:	4a67      	ldr	r2, [pc, #412]	; (802dce8 <DMA_SetConfig+0x25c>)
 802db4c:	4293      	cmp	r3, r2
 802db4e:	d022      	beq.n	802db96 <DMA_SetConfig+0x10a>
 802db50:	68fb      	ldr	r3, [r7, #12]
 802db52:	681b      	ldr	r3, [r3, #0]
 802db54:	4a65      	ldr	r2, [pc, #404]	; (802dcec <DMA_SetConfig+0x260>)
 802db56:	4293      	cmp	r3, r2
 802db58:	d01d      	beq.n	802db96 <DMA_SetConfig+0x10a>
 802db5a:	68fb      	ldr	r3, [r7, #12]
 802db5c:	681b      	ldr	r3, [r3, #0]
 802db5e:	4a64      	ldr	r2, [pc, #400]	; (802dcf0 <DMA_SetConfig+0x264>)
 802db60:	4293      	cmp	r3, r2
 802db62:	d018      	beq.n	802db96 <DMA_SetConfig+0x10a>
 802db64:	68fb      	ldr	r3, [r7, #12]
 802db66:	681b      	ldr	r3, [r3, #0]
 802db68:	4a62      	ldr	r2, [pc, #392]	; (802dcf4 <DMA_SetConfig+0x268>)
 802db6a:	4293      	cmp	r3, r2
 802db6c:	d013      	beq.n	802db96 <DMA_SetConfig+0x10a>
 802db6e:	68fb      	ldr	r3, [r7, #12]
 802db70:	681b      	ldr	r3, [r3, #0]
 802db72:	4a61      	ldr	r2, [pc, #388]	; (802dcf8 <DMA_SetConfig+0x26c>)
 802db74:	4293      	cmp	r3, r2
 802db76:	d00e      	beq.n	802db96 <DMA_SetConfig+0x10a>
 802db78:	68fb      	ldr	r3, [r7, #12]
 802db7a:	681b      	ldr	r3, [r3, #0]
 802db7c:	4a5f      	ldr	r2, [pc, #380]	; (802dcfc <DMA_SetConfig+0x270>)
 802db7e:	4293      	cmp	r3, r2
 802db80:	d009      	beq.n	802db96 <DMA_SetConfig+0x10a>
 802db82:	68fb      	ldr	r3, [r7, #12]
 802db84:	681b      	ldr	r3, [r3, #0]
 802db86:	4a5e      	ldr	r2, [pc, #376]	; (802dd00 <DMA_SetConfig+0x274>)
 802db88:	4293      	cmp	r3, r2
 802db8a:	d004      	beq.n	802db96 <DMA_SetConfig+0x10a>
 802db8c:	68fb      	ldr	r3, [r7, #12]
 802db8e:	681b      	ldr	r3, [r3, #0]
 802db90:	4a5c      	ldr	r2, [pc, #368]	; (802dd04 <DMA_SetConfig+0x278>)
 802db92:	4293      	cmp	r3, r2
 802db94:	d101      	bne.n	802db9a <DMA_SetConfig+0x10e>
 802db96:	2301      	movs	r3, #1
 802db98:	e000      	b.n	802db9c <DMA_SetConfig+0x110>
 802db9a:	2300      	movs	r3, #0
 802db9c:	2b00      	cmp	r3, #0
 802db9e:	d00d      	beq.n	802dbbc <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 802dba0:	68fb      	ldr	r3, [r7, #12]
 802dba2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802dba4:	68fa      	ldr	r2, [r7, #12]
 802dba6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 802dba8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 802dbaa:	68fb      	ldr	r3, [r7, #12]
 802dbac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802dbae:	2b00      	cmp	r3, #0
 802dbb0:	d004      	beq.n	802dbbc <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 802dbb2:	68fb      	ldr	r3, [r7, #12]
 802dbb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802dbb6:	68fa      	ldr	r2, [r7, #12]
 802dbb8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 802dbba:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 802dbbc:	68fb      	ldr	r3, [r7, #12]
 802dbbe:	681b      	ldr	r3, [r3, #0]
 802dbc0:	4a39      	ldr	r2, [pc, #228]	; (802dca8 <DMA_SetConfig+0x21c>)
 802dbc2:	4293      	cmp	r3, r2
 802dbc4:	d04a      	beq.n	802dc5c <DMA_SetConfig+0x1d0>
 802dbc6:	68fb      	ldr	r3, [r7, #12]
 802dbc8:	681b      	ldr	r3, [r3, #0]
 802dbca:	4a38      	ldr	r2, [pc, #224]	; (802dcac <DMA_SetConfig+0x220>)
 802dbcc:	4293      	cmp	r3, r2
 802dbce:	d045      	beq.n	802dc5c <DMA_SetConfig+0x1d0>
 802dbd0:	68fb      	ldr	r3, [r7, #12]
 802dbd2:	681b      	ldr	r3, [r3, #0]
 802dbd4:	4a36      	ldr	r2, [pc, #216]	; (802dcb0 <DMA_SetConfig+0x224>)
 802dbd6:	4293      	cmp	r3, r2
 802dbd8:	d040      	beq.n	802dc5c <DMA_SetConfig+0x1d0>
 802dbda:	68fb      	ldr	r3, [r7, #12]
 802dbdc:	681b      	ldr	r3, [r3, #0]
 802dbde:	4a35      	ldr	r2, [pc, #212]	; (802dcb4 <DMA_SetConfig+0x228>)
 802dbe0:	4293      	cmp	r3, r2
 802dbe2:	d03b      	beq.n	802dc5c <DMA_SetConfig+0x1d0>
 802dbe4:	68fb      	ldr	r3, [r7, #12]
 802dbe6:	681b      	ldr	r3, [r3, #0]
 802dbe8:	4a33      	ldr	r2, [pc, #204]	; (802dcb8 <DMA_SetConfig+0x22c>)
 802dbea:	4293      	cmp	r3, r2
 802dbec:	d036      	beq.n	802dc5c <DMA_SetConfig+0x1d0>
 802dbee:	68fb      	ldr	r3, [r7, #12]
 802dbf0:	681b      	ldr	r3, [r3, #0]
 802dbf2:	4a32      	ldr	r2, [pc, #200]	; (802dcbc <DMA_SetConfig+0x230>)
 802dbf4:	4293      	cmp	r3, r2
 802dbf6:	d031      	beq.n	802dc5c <DMA_SetConfig+0x1d0>
 802dbf8:	68fb      	ldr	r3, [r7, #12]
 802dbfa:	681b      	ldr	r3, [r3, #0]
 802dbfc:	4a30      	ldr	r2, [pc, #192]	; (802dcc0 <DMA_SetConfig+0x234>)
 802dbfe:	4293      	cmp	r3, r2
 802dc00:	d02c      	beq.n	802dc5c <DMA_SetConfig+0x1d0>
 802dc02:	68fb      	ldr	r3, [r7, #12]
 802dc04:	681b      	ldr	r3, [r3, #0]
 802dc06:	4a2f      	ldr	r2, [pc, #188]	; (802dcc4 <DMA_SetConfig+0x238>)
 802dc08:	4293      	cmp	r3, r2
 802dc0a:	d027      	beq.n	802dc5c <DMA_SetConfig+0x1d0>
 802dc0c:	68fb      	ldr	r3, [r7, #12]
 802dc0e:	681b      	ldr	r3, [r3, #0]
 802dc10:	4a2d      	ldr	r2, [pc, #180]	; (802dcc8 <DMA_SetConfig+0x23c>)
 802dc12:	4293      	cmp	r3, r2
 802dc14:	d022      	beq.n	802dc5c <DMA_SetConfig+0x1d0>
 802dc16:	68fb      	ldr	r3, [r7, #12]
 802dc18:	681b      	ldr	r3, [r3, #0]
 802dc1a:	4a2c      	ldr	r2, [pc, #176]	; (802dccc <DMA_SetConfig+0x240>)
 802dc1c:	4293      	cmp	r3, r2
 802dc1e:	d01d      	beq.n	802dc5c <DMA_SetConfig+0x1d0>
 802dc20:	68fb      	ldr	r3, [r7, #12]
 802dc22:	681b      	ldr	r3, [r3, #0]
 802dc24:	4a2a      	ldr	r2, [pc, #168]	; (802dcd0 <DMA_SetConfig+0x244>)
 802dc26:	4293      	cmp	r3, r2
 802dc28:	d018      	beq.n	802dc5c <DMA_SetConfig+0x1d0>
 802dc2a:	68fb      	ldr	r3, [r7, #12]
 802dc2c:	681b      	ldr	r3, [r3, #0]
 802dc2e:	4a29      	ldr	r2, [pc, #164]	; (802dcd4 <DMA_SetConfig+0x248>)
 802dc30:	4293      	cmp	r3, r2
 802dc32:	d013      	beq.n	802dc5c <DMA_SetConfig+0x1d0>
 802dc34:	68fb      	ldr	r3, [r7, #12]
 802dc36:	681b      	ldr	r3, [r3, #0]
 802dc38:	4a27      	ldr	r2, [pc, #156]	; (802dcd8 <DMA_SetConfig+0x24c>)
 802dc3a:	4293      	cmp	r3, r2
 802dc3c:	d00e      	beq.n	802dc5c <DMA_SetConfig+0x1d0>
 802dc3e:	68fb      	ldr	r3, [r7, #12]
 802dc40:	681b      	ldr	r3, [r3, #0]
 802dc42:	4a26      	ldr	r2, [pc, #152]	; (802dcdc <DMA_SetConfig+0x250>)
 802dc44:	4293      	cmp	r3, r2
 802dc46:	d009      	beq.n	802dc5c <DMA_SetConfig+0x1d0>
 802dc48:	68fb      	ldr	r3, [r7, #12]
 802dc4a:	681b      	ldr	r3, [r3, #0]
 802dc4c:	4a24      	ldr	r2, [pc, #144]	; (802dce0 <DMA_SetConfig+0x254>)
 802dc4e:	4293      	cmp	r3, r2
 802dc50:	d004      	beq.n	802dc5c <DMA_SetConfig+0x1d0>
 802dc52:	68fb      	ldr	r3, [r7, #12]
 802dc54:	681b      	ldr	r3, [r3, #0]
 802dc56:	4a23      	ldr	r2, [pc, #140]	; (802dce4 <DMA_SetConfig+0x258>)
 802dc58:	4293      	cmp	r3, r2
 802dc5a:	d101      	bne.n	802dc60 <DMA_SetConfig+0x1d4>
 802dc5c:	2301      	movs	r3, #1
 802dc5e:	e000      	b.n	802dc62 <DMA_SetConfig+0x1d6>
 802dc60:	2300      	movs	r3, #0
 802dc62:	2b00      	cmp	r3, #0
 802dc64:	d059      	beq.n	802dd1a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 802dc66:	68fb      	ldr	r3, [r7, #12]
 802dc68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802dc6a:	f003 031f 	and.w	r3, r3, #31
 802dc6e:	223f      	movs	r2, #63	; 0x3f
 802dc70:	409a      	lsls	r2, r3
 802dc72:	697b      	ldr	r3, [r7, #20]
 802dc74:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 802dc76:	68fb      	ldr	r3, [r7, #12]
 802dc78:	681b      	ldr	r3, [r3, #0]
 802dc7a:	681a      	ldr	r2, [r3, #0]
 802dc7c:	68fb      	ldr	r3, [r7, #12]
 802dc7e:	681b      	ldr	r3, [r3, #0]
 802dc80:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 802dc84:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 802dc86:	68fb      	ldr	r3, [r7, #12]
 802dc88:	681b      	ldr	r3, [r3, #0]
 802dc8a:	683a      	ldr	r2, [r7, #0]
 802dc8c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 802dc8e:	68fb      	ldr	r3, [r7, #12]
 802dc90:	689b      	ldr	r3, [r3, #8]
 802dc92:	2b40      	cmp	r3, #64	; 0x40
 802dc94:	d138      	bne.n	802dd08 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 802dc96:	68fb      	ldr	r3, [r7, #12]
 802dc98:	681b      	ldr	r3, [r3, #0]
 802dc9a:	687a      	ldr	r2, [r7, #4]
 802dc9c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 802dc9e:	68fb      	ldr	r3, [r7, #12]
 802dca0:	681b      	ldr	r3, [r3, #0]
 802dca2:	68ba      	ldr	r2, [r7, #8]
 802dca4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 802dca6:	e086      	b.n	802ddb6 <DMA_SetConfig+0x32a>
 802dca8:	40020010 	.word	0x40020010
 802dcac:	40020028 	.word	0x40020028
 802dcb0:	40020040 	.word	0x40020040
 802dcb4:	40020058 	.word	0x40020058
 802dcb8:	40020070 	.word	0x40020070
 802dcbc:	40020088 	.word	0x40020088
 802dcc0:	400200a0 	.word	0x400200a0
 802dcc4:	400200b8 	.word	0x400200b8
 802dcc8:	40020410 	.word	0x40020410
 802dccc:	40020428 	.word	0x40020428
 802dcd0:	40020440 	.word	0x40020440
 802dcd4:	40020458 	.word	0x40020458
 802dcd8:	40020470 	.word	0x40020470
 802dcdc:	40020488 	.word	0x40020488
 802dce0:	400204a0 	.word	0x400204a0
 802dce4:	400204b8 	.word	0x400204b8
 802dce8:	58025408 	.word	0x58025408
 802dcec:	5802541c 	.word	0x5802541c
 802dcf0:	58025430 	.word	0x58025430
 802dcf4:	58025444 	.word	0x58025444
 802dcf8:	58025458 	.word	0x58025458
 802dcfc:	5802546c 	.word	0x5802546c
 802dd00:	58025480 	.word	0x58025480
 802dd04:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 802dd08:	68fb      	ldr	r3, [r7, #12]
 802dd0a:	681b      	ldr	r3, [r3, #0]
 802dd0c:	68ba      	ldr	r2, [r7, #8]
 802dd0e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 802dd10:	68fb      	ldr	r3, [r7, #12]
 802dd12:	681b      	ldr	r3, [r3, #0]
 802dd14:	687a      	ldr	r2, [r7, #4]
 802dd16:	60da      	str	r2, [r3, #12]
}
 802dd18:	e04d      	b.n	802ddb6 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 802dd1a:	68fb      	ldr	r3, [r7, #12]
 802dd1c:	681b      	ldr	r3, [r3, #0]
 802dd1e:	4a29      	ldr	r2, [pc, #164]	; (802ddc4 <DMA_SetConfig+0x338>)
 802dd20:	4293      	cmp	r3, r2
 802dd22:	d022      	beq.n	802dd6a <DMA_SetConfig+0x2de>
 802dd24:	68fb      	ldr	r3, [r7, #12]
 802dd26:	681b      	ldr	r3, [r3, #0]
 802dd28:	4a27      	ldr	r2, [pc, #156]	; (802ddc8 <DMA_SetConfig+0x33c>)
 802dd2a:	4293      	cmp	r3, r2
 802dd2c:	d01d      	beq.n	802dd6a <DMA_SetConfig+0x2de>
 802dd2e:	68fb      	ldr	r3, [r7, #12]
 802dd30:	681b      	ldr	r3, [r3, #0]
 802dd32:	4a26      	ldr	r2, [pc, #152]	; (802ddcc <DMA_SetConfig+0x340>)
 802dd34:	4293      	cmp	r3, r2
 802dd36:	d018      	beq.n	802dd6a <DMA_SetConfig+0x2de>
 802dd38:	68fb      	ldr	r3, [r7, #12]
 802dd3a:	681b      	ldr	r3, [r3, #0]
 802dd3c:	4a24      	ldr	r2, [pc, #144]	; (802ddd0 <DMA_SetConfig+0x344>)
 802dd3e:	4293      	cmp	r3, r2
 802dd40:	d013      	beq.n	802dd6a <DMA_SetConfig+0x2de>
 802dd42:	68fb      	ldr	r3, [r7, #12]
 802dd44:	681b      	ldr	r3, [r3, #0]
 802dd46:	4a23      	ldr	r2, [pc, #140]	; (802ddd4 <DMA_SetConfig+0x348>)
 802dd48:	4293      	cmp	r3, r2
 802dd4a:	d00e      	beq.n	802dd6a <DMA_SetConfig+0x2de>
 802dd4c:	68fb      	ldr	r3, [r7, #12]
 802dd4e:	681b      	ldr	r3, [r3, #0]
 802dd50:	4a21      	ldr	r2, [pc, #132]	; (802ddd8 <DMA_SetConfig+0x34c>)
 802dd52:	4293      	cmp	r3, r2
 802dd54:	d009      	beq.n	802dd6a <DMA_SetConfig+0x2de>
 802dd56:	68fb      	ldr	r3, [r7, #12]
 802dd58:	681b      	ldr	r3, [r3, #0]
 802dd5a:	4a20      	ldr	r2, [pc, #128]	; (802dddc <DMA_SetConfig+0x350>)
 802dd5c:	4293      	cmp	r3, r2
 802dd5e:	d004      	beq.n	802dd6a <DMA_SetConfig+0x2de>
 802dd60:	68fb      	ldr	r3, [r7, #12]
 802dd62:	681b      	ldr	r3, [r3, #0]
 802dd64:	4a1e      	ldr	r2, [pc, #120]	; (802dde0 <DMA_SetConfig+0x354>)
 802dd66:	4293      	cmp	r3, r2
 802dd68:	d101      	bne.n	802dd6e <DMA_SetConfig+0x2e2>
 802dd6a:	2301      	movs	r3, #1
 802dd6c:	e000      	b.n	802dd70 <DMA_SetConfig+0x2e4>
 802dd6e:	2300      	movs	r3, #0
 802dd70:	2b00      	cmp	r3, #0
 802dd72:	d020      	beq.n	802ddb6 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 802dd74:	68fb      	ldr	r3, [r7, #12]
 802dd76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802dd78:	f003 031f 	and.w	r3, r3, #31
 802dd7c:	2201      	movs	r2, #1
 802dd7e:	409a      	lsls	r2, r3
 802dd80:	693b      	ldr	r3, [r7, #16]
 802dd82:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 802dd84:	68fb      	ldr	r3, [r7, #12]
 802dd86:	681b      	ldr	r3, [r3, #0]
 802dd88:	683a      	ldr	r2, [r7, #0]
 802dd8a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 802dd8c:	68fb      	ldr	r3, [r7, #12]
 802dd8e:	689b      	ldr	r3, [r3, #8]
 802dd90:	2b40      	cmp	r3, #64	; 0x40
 802dd92:	d108      	bne.n	802dda6 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 802dd94:	68fb      	ldr	r3, [r7, #12]
 802dd96:	681b      	ldr	r3, [r3, #0]
 802dd98:	687a      	ldr	r2, [r7, #4]
 802dd9a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 802dd9c:	68fb      	ldr	r3, [r7, #12]
 802dd9e:	681b      	ldr	r3, [r3, #0]
 802dda0:	68ba      	ldr	r2, [r7, #8]
 802dda2:	60da      	str	r2, [r3, #12]
}
 802dda4:	e007      	b.n	802ddb6 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 802dda6:	68fb      	ldr	r3, [r7, #12]
 802dda8:	681b      	ldr	r3, [r3, #0]
 802ddaa:	68ba      	ldr	r2, [r7, #8]
 802ddac:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 802ddae:	68fb      	ldr	r3, [r7, #12]
 802ddb0:	681b      	ldr	r3, [r3, #0]
 802ddb2:	687a      	ldr	r2, [r7, #4]
 802ddb4:	60da      	str	r2, [r3, #12]
}
 802ddb6:	bf00      	nop
 802ddb8:	371c      	adds	r7, #28
 802ddba:	46bd      	mov	sp, r7
 802ddbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ddc0:	4770      	bx	lr
 802ddc2:	bf00      	nop
 802ddc4:	58025408 	.word	0x58025408
 802ddc8:	5802541c 	.word	0x5802541c
 802ddcc:	58025430 	.word	0x58025430
 802ddd0:	58025444 	.word	0x58025444
 802ddd4:	58025458 	.word	0x58025458
 802ddd8:	5802546c 	.word	0x5802546c
 802dddc:	58025480 	.word	0x58025480
 802dde0:	58025494 	.word	0x58025494

0802dde4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 802dde4:	b480      	push	{r7}
 802dde6:	b085      	sub	sp, #20
 802dde8:	af00      	add	r7, sp, #0
 802ddea:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 802ddec:	687b      	ldr	r3, [r7, #4]
 802ddee:	681b      	ldr	r3, [r3, #0]
 802ddf0:	4a42      	ldr	r2, [pc, #264]	; (802defc <DMA_CalcBaseAndBitshift+0x118>)
 802ddf2:	4293      	cmp	r3, r2
 802ddf4:	d04a      	beq.n	802de8c <DMA_CalcBaseAndBitshift+0xa8>
 802ddf6:	687b      	ldr	r3, [r7, #4]
 802ddf8:	681b      	ldr	r3, [r3, #0]
 802ddfa:	4a41      	ldr	r2, [pc, #260]	; (802df00 <DMA_CalcBaseAndBitshift+0x11c>)
 802ddfc:	4293      	cmp	r3, r2
 802ddfe:	d045      	beq.n	802de8c <DMA_CalcBaseAndBitshift+0xa8>
 802de00:	687b      	ldr	r3, [r7, #4]
 802de02:	681b      	ldr	r3, [r3, #0]
 802de04:	4a3f      	ldr	r2, [pc, #252]	; (802df04 <DMA_CalcBaseAndBitshift+0x120>)
 802de06:	4293      	cmp	r3, r2
 802de08:	d040      	beq.n	802de8c <DMA_CalcBaseAndBitshift+0xa8>
 802de0a:	687b      	ldr	r3, [r7, #4]
 802de0c:	681b      	ldr	r3, [r3, #0]
 802de0e:	4a3e      	ldr	r2, [pc, #248]	; (802df08 <DMA_CalcBaseAndBitshift+0x124>)
 802de10:	4293      	cmp	r3, r2
 802de12:	d03b      	beq.n	802de8c <DMA_CalcBaseAndBitshift+0xa8>
 802de14:	687b      	ldr	r3, [r7, #4]
 802de16:	681b      	ldr	r3, [r3, #0]
 802de18:	4a3c      	ldr	r2, [pc, #240]	; (802df0c <DMA_CalcBaseAndBitshift+0x128>)
 802de1a:	4293      	cmp	r3, r2
 802de1c:	d036      	beq.n	802de8c <DMA_CalcBaseAndBitshift+0xa8>
 802de1e:	687b      	ldr	r3, [r7, #4]
 802de20:	681b      	ldr	r3, [r3, #0]
 802de22:	4a3b      	ldr	r2, [pc, #236]	; (802df10 <DMA_CalcBaseAndBitshift+0x12c>)
 802de24:	4293      	cmp	r3, r2
 802de26:	d031      	beq.n	802de8c <DMA_CalcBaseAndBitshift+0xa8>
 802de28:	687b      	ldr	r3, [r7, #4]
 802de2a:	681b      	ldr	r3, [r3, #0]
 802de2c:	4a39      	ldr	r2, [pc, #228]	; (802df14 <DMA_CalcBaseAndBitshift+0x130>)
 802de2e:	4293      	cmp	r3, r2
 802de30:	d02c      	beq.n	802de8c <DMA_CalcBaseAndBitshift+0xa8>
 802de32:	687b      	ldr	r3, [r7, #4]
 802de34:	681b      	ldr	r3, [r3, #0]
 802de36:	4a38      	ldr	r2, [pc, #224]	; (802df18 <DMA_CalcBaseAndBitshift+0x134>)
 802de38:	4293      	cmp	r3, r2
 802de3a:	d027      	beq.n	802de8c <DMA_CalcBaseAndBitshift+0xa8>
 802de3c:	687b      	ldr	r3, [r7, #4]
 802de3e:	681b      	ldr	r3, [r3, #0]
 802de40:	4a36      	ldr	r2, [pc, #216]	; (802df1c <DMA_CalcBaseAndBitshift+0x138>)
 802de42:	4293      	cmp	r3, r2
 802de44:	d022      	beq.n	802de8c <DMA_CalcBaseAndBitshift+0xa8>
 802de46:	687b      	ldr	r3, [r7, #4]
 802de48:	681b      	ldr	r3, [r3, #0]
 802de4a:	4a35      	ldr	r2, [pc, #212]	; (802df20 <DMA_CalcBaseAndBitshift+0x13c>)
 802de4c:	4293      	cmp	r3, r2
 802de4e:	d01d      	beq.n	802de8c <DMA_CalcBaseAndBitshift+0xa8>
 802de50:	687b      	ldr	r3, [r7, #4]
 802de52:	681b      	ldr	r3, [r3, #0]
 802de54:	4a33      	ldr	r2, [pc, #204]	; (802df24 <DMA_CalcBaseAndBitshift+0x140>)
 802de56:	4293      	cmp	r3, r2
 802de58:	d018      	beq.n	802de8c <DMA_CalcBaseAndBitshift+0xa8>
 802de5a:	687b      	ldr	r3, [r7, #4]
 802de5c:	681b      	ldr	r3, [r3, #0]
 802de5e:	4a32      	ldr	r2, [pc, #200]	; (802df28 <DMA_CalcBaseAndBitshift+0x144>)
 802de60:	4293      	cmp	r3, r2
 802de62:	d013      	beq.n	802de8c <DMA_CalcBaseAndBitshift+0xa8>
 802de64:	687b      	ldr	r3, [r7, #4]
 802de66:	681b      	ldr	r3, [r3, #0]
 802de68:	4a30      	ldr	r2, [pc, #192]	; (802df2c <DMA_CalcBaseAndBitshift+0x148>)
 802de6a:	4293      	cmp	r3, r2
 802de6c:	d00e      	beq.n	802de8c <DMA_CalcBaseAndBitshift+0xa8>
 802de6e:	687b      	ldr	r3, [r7, #4]
 802de70:	681b      	ldr	r3, [r3, #0]
 802de72:	4a2f      	ldr	r2, [pc, #188]	; (802df30 <DMA_CalcBaseAndBitshift+0x14c>)
 802de74:	4293      	cmp	r3, r2
 802de76:	d009      	beq.n	802de8c <DMA_CalcBaseAndBitshift+0xa8>
 802de78:	687b      	ldr	r3, [r7, #4]
 802de7a:	681b      	ldr	r3, [r3, #0]
 802de7c:	4a2d      	ldr	r2, [pc, #180]	; (802df34 <DMA_CalcBaseAndBitshift+0x150>)
 802de7e:	4293      	cmp	r3, r2
 802de80:	d004      	beq.n	802de8c <DMA_CalcBaseAndBitshift+0xa8>
 802de82:	687b      	ldr	r3, [r7, #4]
 802de84:	681b      	ldr	r3, [r3, #0]
 802de86:	4a2c      	ldr	r2, [pc, #176]	; (802df38 <DMA_CalcBaseAndBitshift+0x154>)
 802de88:	4293      	cmp	r3, r2
 802de8a:	d101      	bne.n	802de90 <DMA_CalcBaseAndBitshift+0xac>
 802de8c:	2301      	movs	r3, #1
 802de8e:	e000      	b.n	802de92 <DMA_CalcBaseAndBitshift+0xae>
 802de90:	2300      	movs	r3, #0
 802de92:	2b00      	cmp	r3, #0
 802de94:	d024      	beq.n	802dee0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 802de96:	687b      	ldr	r3, [r7, #4]
 802de98:	681b      	ldr	r3, [r3, #0]
 802de9a:	b2db      	uxtb	r3, r3
 802de9c:	3b10      	subs	r3, #16
 802de9e:	4a27      	ldr	r2, [pc, #156]	; (802df3c <DMA_CalcBaseAndBitshift+0x158>)
 802dea0:	fba2 2303 	umull	r2, r3, r2, r3
 802dea4:	091b      	lsrs	r3, r3, #4
 802dea6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 802dea8:	68fb      	ldr	r3, [r7, #12]
 802deaa:	f003 0307 	and.w	r3, r3, #7
 802deae:	4a24      	ldr	r2, [pc, #144]	; (802df40 <DMA_CalcBaseAndBitshift+0x15c>)
 802deb0:	5cd3      	ldrb	r3, [r2, r3]
 802deb2:	461a      	mov	r2, r3
 802deb4:	687b      	ldr	r3, [r7, #4]
 802deb6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 802deb8:	68fb      	ldr	r3, [r7, #12]
 802deba:	2b03      	cmp	r3, #3
 802debc:	d908      	bls.n	802ded0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 802debe:	687b      	ldr	r3, [r7, #4]
 802dec0:	681b      	ldr	r3, [r3, #0]
 802dec2:	461a      	mov	r2, r3
 802dec4:	4b1f      	ldr	r3, [pc, #124]	; (802df44 <DMA_CalcBaseAndBitshift+0x160>)
 802dec6:	4013      	ands	r3, r2
 802dec8:	1d1a      	adds	r2, r3, #4
 802deca:	687b      	ldr	r3, [r7, #4]
 802decc:	659a      	str	r2, [r3, #88]	; 0x58
 802dece:	e00d      	b.n	802deec <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 802ded0:	687b      	ldr	r3, [r7, #4]
 802ded2:	681b      	ldr	r3, [r3, #0]
 802ded4:	461a      	mov	r2, r3
 802ded6:	4b1b      	ldr	r3, [pc, #108]	; (802df44 <DMA_CalcBaseAndBitshift+0x160>)
 802ded8:	4013      	ands	r3, r2
 802deda:	687a      	ldr	r2, [r7, #4]
 802dedc:	6593      	str	r3, [r2, #88]	; 0x58
 802dede:	e005      	b.n	802deec <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 802dee0:	687b      	ldr	r3, [r7, #4]
 802dee2:	681b      	ldr	r3, [r3, #0]
 802dee4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 802dee8:	687b      	ldr	r3, [r7, #4]
 802deea:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 802deec:	687b      	ldr	r3, [r7, #4]
 802deee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 802def0:	4618      	mov	r0, r3
 802def2:	3714      	adds	r7, #20
 802def4:	46bd      	mov	sp, r7
 802def6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802defa:	4770      	bx	lr
 802defc:	40020010 	.word	0x40020010
 802df00:	40020028 	.word	0x40020028
 802df04:	40020040 	.word	0x40020040
 802df08:	40020058 	.word	0x40020058
 802df0c:	40020070 	.word	0x40020070
 802df10:	40020088 	.word	0x40020088
 802df14:	400200a0 	.word	0x400200a0
 802df18:	400200b8 	.word	0x400200b8
 802df1c:	40020410 	.word	0x40020410
 802df20:	40020428 	.word	0x40020428
 802df24:	40020440 	.word	0x40020440
 802df28:	40020458 	.word	0x40020458
 802df2c:	40020470 	.word	0x40020470
 802df30:	40020488 	.word	0x40020488
 802df34:	400204a0 	.word	0x400204a0
 802df38:	400204b8 	.word	0x400204b8
 802df3c:	aaaaaaab 	.word	0xaaaaaaab
 802df40:	08058458 	.word	0x08058458
 802df44:	fffffc00 	.word	0xfffffc00

0802df48 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 802df48:	b480      	push	{r7}
 802df4a:	b085      	sub	sp, #20
 802df4c:	af00      	add	r7, sp, #0
 802df4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 802df50:	2300      	movs	r3, #0
 802df52:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 802df54:	687b      	ldr	r3, [r7, #4]
 802df56:	699b      	ldr	r3, [r3, #24]
 802df58:	2b00      	cmp	r3, #0
 802df5a:	d120      	bne.n	802df9e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 802df5c:	687b      	ldr	r3, [r7, #4]
 802df5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802df60:	2b03      	cmp	r3, #3
 802df62:	d858      	bhi.n	802e016 <DMA_CheckFifoParam+0xce>
 802df64:	a201      	add	r2, pc, #4	; (adr r2, 802df6c <DMA_CheckFifoParam+0x24>)
 802df66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802df6a:	bf00      	nop
 802df6c:	0802df7d 	.word	0x0802df7d
 802df70:	0802df8f 	.word	0x0802df8f
 802df74:	0802df7d 	.word	0x0802df7d
 802df78:	0802e017 	.word	0x0802e017
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 802df7c:	687b      	ldr	r3, [r7, #4]
 802df7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802df80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 802df84:	2b00      	cmp	r3, #0
 802df86:	d048      	beq.n	802e01a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 802df88:	2301      	movs	r3, #1
 802df8a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 802df8c:	e045      	b.n	802e01a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 802df8e:	687b      	ldr	r3, [r7, #4]
 802df90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802df92:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 802df96:	d142      	bne.n	802e01e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 802df98:	2301      	movs	r3, #1
 802df9a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 802df9c:	e03f      	b.n	802e01e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 802df9e:	687b      	ldr	r3, [r7, #4]
 802dfa0:	699b      	ldr	r3, [r3, #24]
 802dfa2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802dfa6:	d123      	bne.n	802dff0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 802dfa8:	687b      	ldr	r3, [r7, #4]
 802dfaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802dfac:	2b03      	cmp	r3, #3
 802dfae:	d838      	bhi.n	802e022 <DMA_CheckFifoParam+0xda>
 802dfb0:	a201      	add	r2, pc, #4	; (adr r2, 802dfb8 <DMA_CheckFifoParam+0x70>)
 802dfb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802dfb6:	bf00      	nop
 802dfb8:	0802dfc9 	.word	0x0802dfc9
 802dfbc:	0802dfcf 	.word	0x0802dfcf
 802dfc0:	0802dfc9 	.word	0x0802dfc9
 802dfc4:	0802dfe1 	.word	0x0802dfe1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 802dfc8:	2301      	movs	r3, #1
 802dfca:	73fb      	strb	r3, [r7, #15]
        break;
 802dfcc:	e030      	b.n	802e030 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 802dfce:	687b      	ldr	r3, [r7, #4]
 802dfd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802dfd2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 802dfd6:	2b00      	cmp	r3, #0
 802dfd8:	d025      	beq.n	802e026 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 802dfda:	2301      	movs	r3, #1
 802dfdc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 802dfde:	e022      	b.n	802e026 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 802dfe0:	687b      	ldr	r3, [r7, #4]
 802dfe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802dfe4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 802dfe8:	d11f      	bne.n	802e02a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 802dfea:	2301      	movs	r3, #1
 802dfec:	73fb      	strb	r3, [r7, #15]
        }
        break;
 802dfee:	e01c      	b.n	802e02a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 802dff0:	687b      	ldr	r3, [r7, #4]
 802dff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802dff4:	2b02      	cmp	r3, #2
 802dff6:	d902      	bls.n	802dffe <DMA_CheckFifoParam+0xb6>
 802dff8:	2b03      	cmp	r3, #3
 802dffa:	d003      	beq.n	802e004 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 802dffc:	e018      	b.n	802e030 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 802dffe:	2301      	movs	r3, #1
 802e000:	73fb      	strb	r3, [r7, #15]
        break;
 802e002:	e015      	b.n	802e030 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 802e004:	687b      	ldr	r3, [r7, #4]
 802e006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802e008:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 802e00c:	2b00      	cmp	r3, #0
 802e00e:	d00e      	beq.n	802e02e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 802e010:	2301      	movs	r3, #1
 802e012:	73fb      	strb	r3, [r7, #15]
    break;
 802e014:	e00b      	b.n	802e02e <DMA_CheckFifoParam+0xe6>
        break;
 802e016:	bf00      	nop
 802e018:	e00a      	b.n	802e030 <DMA_CheckFifoParam+0xe8>
        break;
 802e01a:	bf00      	nop
 802e01c:	e008      	b.n	802e030 <DMA_CheckFifoParam+0xe8>
        break;
 802e01e:	bf00      	nop
 802e020:	e006      	b.n	802e030 <DMA_CheckFifoParam+0xe8>
        break;
 802e022:	bf00      	nop
 802e024:	e004      	b.n	802e030 <DMA_CheckFifoParam+0xe8>
        break;
 802e026:	bf00      	nop
 802e028:	e002      	b.n	802e030 <DMA_CheckFifoParam+0xe8>
        break;
 802e02a:	bf00      	nop
 802e02c:	e000      	b.n	802e030 <DMA_CheckFifoParam+0xe8>
    break;
 802e02e:	bf00      	nop
    }
  }

  return status;
 802e030:	7bfb      	ldrb	r3, [r7, #15]
}
 802e032:	4618      	mov	r0, r3
 802e034:	3714      	adds	r7, #20
 802e036:	46bd      	mov	sp, r7
 802e038:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e03c:	4770      	bx	lr
 802e03e:	bf00      	nop

0802e040 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 802e040:	b480      	push	{r7}
 802e042:	b085      	sub	sp, #20
 802e044:	af00      	add	r7, sp, #0
 802e046:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 802e048:	687b      	ldr	r3, [r7, #4]
 802e04a:	681b      	ldr	r3, [r3, #0]
 802e04c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 802e04e:	687b      	ldr	r3, [r7, #4]
 802e050:	681b      	ldr	r3, [r3, #0]
 802e052:	4a38      	ldr	r2, [pc, #224]	; (802e134 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 802e054:	4293      	cmp	r3, r2
 802e056:	d022      	beq.n	802e09e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 802e058:	687b      	ldr	r3, [r7, #4]
 802e05a:	681b      	ldr	r3, [r3, #0]
 802e05c:	4a36      	ldr	r2, [pc, #216]	; (802e138 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 802e05e:	4293      	cmp	r3, r2
 802e060:	d01d      	beq.n	802e09e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 802e062:	687b      	ldr	r3, [r7, #4]
 802e064:	681b      	ldr	r3, [r3, #0]
 802e066:	4a35      	ldr	r2, [pc, #212]	; (802e13c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 802e068:	4293      	cmp	r3, r2
 802e06a:	d018      	beq.n	802e09e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 802e06c:	687b      	ldr	r3, [r7, #4]
 802e06e:	681b      	ldr	r3, [r3, #0]
 802e070:	4a33      	ldr	r2, [pc, #204]	; (802e140 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 802e072:	4293      	cmp	r3, r2
 802e074:	d013      	beq.n	802e09e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 802e076:	687b      	ldr	r3, [r7, #4]
 802e078:	681b      	ldr	r3, [r3, #0]
 802e07a:	4a32      	ldr	r2, [pc, #200]	; (802e144 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 802e07c:	4293      	cmp	r3, r2
 802e07e:	d00e      	beq.n	802e09e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 802e080:	687b      	ldr	r3, [r7, #4]
 802e082:	681b      	ldr	r3, [r3, #0]
 802e084:	4a30      	ldr	r2, [pc, #192]	; (802e148 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 802e086:	4293      	cmp	r3, r2
 802e088:	d009      	beq.n	802e09e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 802e08a:	687b      	ldr	r3, [r7, #4]
 802e08c:	681b      	ldr	r3, [r3, #0]
 802e08e:	4a2f      	ldr	r2, [pc, #188]	; (802e14c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 802e090:	4293      	cmp	r3, r2
 802e092:	d004      	beq.n	802e09e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 802e094:	687b      	ldr	r3, [r7, #4]
 802e096:	681b      	ldr	r3, [r3, #0]
 802e098:	4a2d      	ldr	r2, [pc, #180]	; (802e150 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 802e09a:	4293      	cmp	r3, r2
 802e09c:	d101      	bne.n	802e0a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 802e09e:	2301      	movs	r3, #1
 802e0a0:	e000      	b.n	802e0a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 802e0a2:	2300      	movs	r3, #0
 802e0a4:	2b00      	cmp	r3, #0
 802e0a6:	d01a      	beq.n	802e0de <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 802e0a8:	687b      	ldr	r3, [r7, #4]
 802e0aa:	681b      	ldr	r3, [r3, #0]
 802e0ac:	b2db      	uxtb	r3, r3
 802e0ae:	3b08      	subs	r3, #8
 802e0b0:	4a28      	ldr	r2, [pc, #160]	; (802e154 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 802e0b2:	fba2 2303 	umull	r2, r3, r2, r3
 802e0b6:	091b      	lsrs	r3, r3, #4
 802e0b8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 802e0ba:	68fa      	ldr	r2, [r7, #12]
 802e0bc:	4b26      	ldr	r3, [pc, #152]	; (802e158 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 802e0be:	4413      	add	r3, r2
 802e0c0:	009b      	lsls	r3, r3, #2
 802e0c2:	461a      	mov	r2, r3
 802e0c4:	687b      	ldr	r3, [r7, #4]
 802e0c6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 802e0c8:	687b      	ldr	r3, [r7, #4]
 802e0ca:	4a24      	ldr	r2, [pc, #144]	; (802e15c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 802e0cc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 802e0ce:	68fb      	ldr	r3, [r7, #12]
 802e0d0:	f003 031f 	and.w	r3, r3, #31
 802e0d4:	2201      	movs	r2, #1
 802e0d6:	409a      	lsls	r2, r3
 802e0d8:	687b      	ldr	r3, [r7, #4]
 802e0da:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 802e0dc:	e024      	b.n	802e128 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 802e0de:	687b      	ldr	r3, [r7, #4]
 802e0e0:	681b      	ldr	r3, [r3, #0]
 802e0e2:	b2db      	uxtb	r3, r3
 802e0e4:	3b10      	subs	r3, #16
 802e0e6:	4a1e      	ldr	r2, [pc, #120]	; (802e160 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 802e0e8:	fba2 2303 	umull	r2, r3, r2, r3
 802e0ec:	091b      	lsrs	r3, r3, #4
 802e0ee:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 802e0f0:	68bb      	ldr	r3, [r7, #8]
 802e0f2:	4a1c      	ldr	r2, [pc, #112]	; (802e164 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 802e0f4:	4293      	cmp	r3, r2
 802e0f6:	d806      	bhi.n	802e106 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 802e0f8:	68bb      	ldr	r3, [r7, #8]
 802e0fa:	4a1b      	ldr	r2, [pc, #108]	; (802e168 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 802e0fc:	4293      	cmp	r3, r2
 802e0fe:	d902      	bls.n	802e106 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 802e100:	68fb      	ldr	r3, [r7, #12]
 802e102:	3308      	adds	r3, #8
 802e104:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 802e106:	68fa      	ldr	r2, [r7, #12]
 802e108:	4b18      	ldr	r3, [pc, #96]	; (802e16c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 802e10a:	4413      	add	r3, r2
 802e10c:	009b      	lsls	r3, r3, #2
 802e10e:	461a      	mov	r2, r3
 802e110:	687b      	ldr	r3, [r7, #4]
 802e112:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 802e114:	687b      	ldr	r3, [r7, #4]
 802e116:	4a16      	ldr	r2, [pc, #88]	; (802e170 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 802e118:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 802e11a:	68fb      	ldr	r3, [r7, #12]
 802e11c:	f003 031f 	and.w	r3, r3, #31
 802e120:	2201      	movs	r2, #1
 802e122:	409a      	lsls	r2, r3
 802e124:	687b      	ldr	r3, [r7, #4]
 802e126:	669a      	str	r2, [r3, #104]	; 0x68
}
 802e128:	bf00      	nop
 802e12a:	3714      	adds	r7, #20
 802e12c:	46bd      	mov	sp, r7
 802e12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e132:	4770      	bx	lr
 802e134:	58025408 	.word	0x58025408
 802e138:	5802541c 	.word	0x5802541c
 802e13c:	58025430 	.word	0x58025430
 802e140:	58025444 	.word	0x58025444
 802e144:	58025458 	.word	0x58025458
 802e148:	5802546c 	.word	0x5802546c
 802e14c:	58025480 	.word	0x58025480
 802e150:	58025494 	.word	0x58025494
 802e154:	cccccccd 	.word	0xcccccccd
 802e158:	16009600 	.word	0x16009600
 802e15c:	58025880 	.word	0x58025880
 802e160:	aaaaaaab 	.word	0xaaaaaaab
 802e164:	400204b8 	.word	0x400204b8
 802e168:	4002040f 	.word	0x4002040f
 802e16c:	10008200 	.word	0x10008200
 802e170:	40020880 	.word	0x40020880

0802e174 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 802e174:	b480      	push	{r7}
 802e176:	b085      	sub	sp, #20
 802e178:	af00      	add	r7, sp, #0
 802e17a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 802e17c:	687b      	ldr	r3, [r7, #4]
 802e17e:	685b      	ldr	r3, [r3, #4]
 802e180:	b2db      	uxtb	r3, r3
 802e182:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 802e184:	68fb      	ldr	r3, [r7, #12]
 802e186:	2b00      	cmp	r3, #0
 802e188:	d04a      	beq.n	802e220 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 802e18a:	68fb      	ldr	r3, [r7, #12]
 802e18c:	2b08      	cmp	r3, #8
 802e18e:	d847      	bhi.n	802e220 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 802e190:	687b      	ldr	r3, [r7, #4]
 802e192:	681b      	ldr	r3, [r3, #0]
 802e194:	4a25      	ldr	r2, [pc, #148]	; (802e22c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 802e196:	4293      	cmp	r3, r2
 802e198:	d022      	beq.n	802e1e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 802e19a:	687b      	ldr	r3, [r7, #4]
 802e19c:	681b      	ldr	r3, [r3, #0]
 802e19e:	4a24      	ldr	r2, [pc, #144]	; (802e230 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 802e1a0:	4293      	cmp	r3, r2
 802e1a2:	d01d      	beq.n	802e1e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 802e1a4:	687b      	ldr	r3, [r7, #4]
 802e1a6:	681b      	ldr	r3, [r3, #0]
 802e1a8:	4a22      	ldr	r2, [pc, #136]	; (802e234 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 802e1aa:	4293      	cmp	r3, r2
 802e1ac:	d018      	beq.n	802e1e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 802e1ae:	687b      	ldr	r3, [r7, #4]
 802e1b0:	681b      	ldr	r3, [r3, #0]
 802e1b2:	4a21      	ldr	r2, [pc, #132]	; (802e238 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 802e1b4:	4293      	cmp	r3, r2
 802e1b6:	d013      	beq.n	802e1e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 802e1b8:	687b      	ldr	r3, [r7, #4]
 802e1ba:	681b      	ldr	r3, [r3, #0]
 802e1bc:	4a1f      	ldr	r2, [pc, #124]	; (802e23c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 802e1be:	4293      	cmp	r3, r2
 802e1c0:	d00e      	beq.n	802e1e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 802e1c2:	687b      	ldr	r3, [r7, #4]
 802e1c4:	681b      	ldr	r3, [r3, #0]
 802e1c6:	4a1e      	ldr	r2, [pc, #120]	; (802e240 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 802e1c8:	4293      	cmp	r3, r2
 802e1ca:	d009      	beq.n	802e1e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 802e1cc:	687b      	ldr	r3, [r7, #4]
 802e1ce:	681b      	ldr	r3, [r3, #0]
 802e1d0:	4a1c      	ldr	r2, [pc, #112]	; (802e244 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 802e1d2:	4293      	cmp	r3, r2
 802e1d4:	d004      	beq.n	802e1e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 802e1d6:	687b      	ldr	r3, [r7, #4]
 802e1d8:	681b      	ldr	r3, [r3, #0]
 802e1da:	4a1b      	ldr	r2, [pc, #108]	; (802e248 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 802e1dc:	4293      	cmp	r3, r2
 802e1de:	d101      	bne.n	802e1e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 802e1e0:	2301      	movs	r3, #1
 802e1e2:	e000      	b.n	802e1e6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 802e1e4:	2300      	movs	r3, #0
 802e1e6:	2b00      	cmp	r3, #0
 802e1e8:	d00a      	beq.n	802e200 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 802e1ea:	68fa      	ldr	r2, [r7, #12]
 802e1ec:	4b17      	ldr	r3, [pc, #92]	; (802e24c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 802e1ee:	4413      	add	r3, r2
 802e1f0:	009b      	lsls	r3, r3, #2
 802e1f2:	461a      	mov	r2, r3
 802e1f4:	687b      	ldr	r3, [r7, #4]
 802e1f6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 802e1f8:	687b      	ldr	r3, [r7, #4]
 802e1fa:	4a15      	ldr	r2, [pc, #84]	; (802e250 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 802e1fc:	671a      	str	r2, [r3, #112]	; 0x70
 802e1fe:	e009      	b.n	802e214 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 802e200:	68fa      	ldr	r2, [r7, #12]
 802e202:	4b14      	ldr	r3, [pc, #80]	; (802e254 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 802e204:	4413      	add	r3, r2
 802e206:	009b      	lsls	r3, r3, #2
 802e208:	461a      	mov	r2, r3
 802e20a:	687b      	ldr	r3, [r7, #4]
 802e20c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 802e20e:	687b      	ldr	r3, [r7, #4]
 802e210:	4a11      	ldr	r2, [pc, #68]	; (802e258 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 802e212:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 802e214:	68fb      	ldr	r3, [r7, #12]
 802e216:	3b01      	subs	r3, #1
 802e218:	2201      	movs	r2, #1
 802e21a:	409a      	lsls	r2, r3
 802e21c:	687b      	ldr	r3, [r7, #4]
 802e21e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 802e220:	bf00      	nop
 802e222:	3714      	adds	r7, #20
 802e224:	46bd      	mov	sp, r7
 802e226:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e22a:	4770      	bx	lr
 802e22c:	58025408 	.word	0x58025408
 802e230:	5802541c 	.word	0x5802541c
 802e234:	58025430 	.word	0x58025430
 802e238:	58025444 	.word	0x58025444
 802e23c:	58025458 	.word	0x58025458
 802e240:	5802546c 	.word	0x5802546c
 802e244:	58025480 	.word	0x58025480
 802e248:	58025494 	.word	0x58025494
 802e24c:	1600963f 	.word	0x1600963f
 802e250:	58025940 	.word	0x58025940
 802e254:	1000823f 	.word	0x1000823f
 802e258:	40020940 	.word	0x40020940

0802e25c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 802e25c:	b480      	push	{r7}
 802e25e:	b089      	sub	sp, #36	; 0x24
 802e260:	af00      	add	r7, sp, #0
 802e262:	6078      	str	r0, [r7, #4]
 802e264:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 802e266:	2300      	movs	r3, #0
 802e268:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 802e26a:	4b89      	ldr	r3, [pc, #548]	; (802e490 <HAL_GPIO_Init+0x234>)
 802e26c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 802e26e:	e194      	b.n	802e59a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 802e270:	683b      	ldr	r3, [r7, #0]
 802e272:	681a      	ldr	r2, [r3, #0]
 802e274:	2101      	movs	r1, #1
 802e276:	69fb      	ldr	r3, [r7, #28]
 802e278:	fa01 f303 	lsl.w	r3, r1, r3
 802e27c:	4013      	ands	r3, r2
 802e27e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 802e280:	693b      	ldr	r3, [r7, #16]
 802e282:	2b00      	cmp	r3, #0
 802e284:	f000 8186 	beq.w	802e594 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 802e288:	683b      	ldr	r3, [r7, #0]
 802e28a:	685b      	ldr	r3, [r3, #4]
 802e28c:	f003 0303 	and.w	r3, r3, #3
 802e290:	2b01      	cmp	r3, #1
 802e292:	d005      	beq.n	802e2a0 <HAL_GPIO_Init+0x44>
 802e294:	683b      	ldr	r3, [r7, #0]
 802e296:	685b      	ldr	r3, [r3, #4]
 802e298:	f003 0303 	and.w	r3, r3, #3
 802e29c:	2b02      	cmp	r3, #2
 802e29e:	d130      	bne.n	802e302 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 802e2a0:	687b      	ldr	r3, [r7, #4]
 802e2a2:	689b      	ldr	r3, [r3, #8]
 802e2a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 802e2a6:	69fb      	ldr	r3, [r7, #28]
 802e2a8:	005b      	lsls	r3, r3, #1
 802e2aa:	2203      	movs	r2, #3
 802e2ac:	fa02 f303 	lsl.w	r3, r2, r3
 802e2b0:	43db      	mvns	r3, r3
 802e2b2:	69ba      	ldr	r2, [r7, #24]
 802e2b4:	4013      	ands	r3, r2
 802e2b6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 802e2b8:	683b      	ldr	r3, [r7, #0]
 802e2ba:	68da      	ldr	r2, [r3, #12]
 802e2bc:	69fb      	ldr	r3, [r7, #28]
 802e2be:	005b      	lsls	r3, r3, #1
 802e2c0:	fa02 f303 	lsl.w	r3, r2, r3
 802e2c4:	69ba      	ldr	r2, [r7, #24]
 802e2c6:	4313      	orrs	r3, r2
 802e2c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 802e2ca:	687b      	ldr	r3, [r7, #4]
 802e2cc:	69ba      	ldr	r2, [r7, #24]
 802e2ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 802e2d0:	687b      	ldr	r3, [r7, #4]
 802e2d2:	685b      	ldr	r3, [r3, #4]
 802e2d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 802e2d6:	2201      	movs	r2, #1
 802e2d8:	69fb      	ldr	r3, [r7, #28]
 802e2da:	fa02 f303 	lsl.w	r3, r2, r3
 802e2de:	43db      	mvns	r3, r3
 802e2e0:	69ba      	ldr	r2, [r7, #24]
 802e2e2:	4013      	ands	r3, r2
 802e2e4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 802e2e6:	683b      	ldr	r3, [r7, #0]
 802e2e8:	685b      	ldr	r3, [r3, #4]
 802e2ea:	091b      	lsrs	r3, r3, #4
 802e2ec:	f003 0201 	and.w	r2, r3, #1
 802e2f0:	69fb      	ldr	r3, [r7, #28]
 802e2f2:	fa02 f303 	lsl.w	r3, r2, r3
 802e2f6:	69ba      	ldr	r2, [r7, #24]
 802e2f8:	4313      	orrs	r3, r2
 802e2fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 802e2fc:	687b      	ldr	r3, [r7, #4]
 802e2fe:	69ba      	ldr	r2, [r7, #24]
 802e300:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 802e302:	683b      	ldr	r3, [r7, #0]
 802e304:	685b      	ldr	r3, [r3, #4]
 802e306:	f003 0303 	and.w	r3, r3, #3
 802e30a:	2b03      	cmp	r3, #3
 802e30c:	d017      	beq.n	802e33e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 802e30e:	687b      	ldr	r3, [r7, #4]
 802e310:	68db      	ldr	r3, [r3, #12]
 802e312:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 802e314:	69fb      	ldr	r3, [r7, #28]
 802e316:	005b      	lsls	r3, r3, #1
 802e318:	2203      	movs	r2, #3
 802e31a:	fa02 f303 	lsl.w	r3, r2, r3
 802e31e:	43db      	mvns	r3, r3
 802e320:	69ba      	ldr	r2, [r7, #24]
 802e322:	4013      	ands	r3, r2
 802e324:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 802e326:	683b      	ldr	r3, [r7, #0]
 802e328:	689a      	ldr	r2, [r3, #8]
 802e32a:	69fb      	ldr	r3, [r7, #28]
 802e32c:	005b      	lsls	r3, r3, #1
 802e32e:	fa02 f303 	lsl.w	r3, r2, r3
 802e332:	69ba      	ldr	r2, [r7, #24]
 802e334:	4313      	orrs	r3, r2
 802e336:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 802e338:	687b      	ldr	r3, [r7, #4]
 802e33a:	69ba      	ldr	r2, [r7, #24]
 802e33c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 802e33e:	683b      	ldr	r3, [r7, #0]
 802e340:	685b      	ldr	r3, [r3, #4]
 802e342:	f003 0303 	and.w	r3, r3, #3
 802e346:	2b02      	cmp	r3, #2
 802e348:	d123      	bne.n	802e392 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 802e34a:	69fb      	ldr	r3, [r7, #28]
 802e34c:	08da      	lsrs	r2, r3, #3
 802e34e:	687b      	ldr	r3, [r7, #4]
 802e350:	3208      	adds	r2, #8
 802e352:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802e356:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 802e358:	69fb      	ldr	r3, [r7, #28]
 802e35a:	f003 0307 	and.w	r3, r3, #7
 802e35e:	009b      	lsls	r3, r3, #2
 802e360:	220f      	movs	r2, #15
 802e362:	fa02 f303 	lsl.w	r3, r2, r3
 802e366:	43db      	mvns	r3, r3
 802e368:	69ba      	ldr	r2, [r7, #24]
 802e36a:	4013      	ands	r3, r2
 802e36c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 802e36e:	683b      	ldr	r3, [r7, #0]
 802e370:	691a      	ldr	r2, [r3, #16]
 802e372:	69fb      	ldr	r3, [r7, #28]
 802e374:	f003 0307 	and.w	r3, r3, #7
 802e378:	009b      	lsls	r3, r3, #2
 802e37a:	fa02 f303 	lsl.w	r3, r2, r3
 802e37e:	69ba      	ldr	r2, [r7, #24]
 802e380:	4313      	orrs	r3, r2
 802e382:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 802e384:	69fb      	ldr	r3, [r7, #28]
 802e386:	08da      	lsrs	r2, r3, #3
 802e388:	687b      	ldr	r3, [r7, #4]
 802e38a:	3208      	adds	r2, #8
 802e38c:	69b9      	ldr	r1, [r7, #24]
 802e38e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 802e392:	687b      	ldr	r3, [r7, #4]
 802e394:	681b      	ldr	r3, [r3, #0]
 802e396:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 802e398:	69fb      	ldr	r3, [r7, #28]
 802e39a:	005b      	lsls	r3, r3, #1
 802e39c:	2203      	movs	r2, #3
 802e39e:	fa02 f303 	lsl.w	r3, r2, r3
 802e3a2:	43db      	mvns	r3, r3
 802e3a4:	69ba      	ldr	r2, [r7, #24]
 802e3a6:	4013      	ands	r3, r2
 802e3a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 802e3aa:	683b      	ldr	r3, [r7, #0]
 802e3ac:	685b      	ldr	r3, [r3, #4]
 802e3ae:	f003 0203 	and.w	r2, r3, #3
 802e3b2:	69fb      	ldr	r3, [r7, #28]
 802e3b4:	005b      	lsls	r3, r3, #1
 802e3b6:	fa02 f303 	lsl.w	r3, r2, r3
 802e3ba:	69ba      	ldr	r2, [r7, #24]
 802e3bc:	4313      	orrs	r3, r2
 802e3be:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 802e3c0:	687b      	ldr	r3, [r7, #4]
 802e3c2:	69ba      	ldr	r2, [r7, #24]
 802e3c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 802e3c6:	683b      	ldr	r3, [r7, #0]
 802e3c8:	685b      	ldr	r3, [r3, #4]
 802e3ca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 802e3ce:	2b00      	cmp	r3, #0
 802e3d0:	f000 80e0 	beq.w	802e594 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 802e3d4:	4b2f      	ldr	r3, [pc, #188]	; (802e494 <HAL_GPIO_Init+0x238>)
 802e3d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 802e3da:	4a2e      	ldr	r2, [pc, #184]	; (802e494 <HAL_GPIO_Init+0x238>)
 802e3dc:	f043 0302 	orr.w	r3, r3, #2
 802e3e0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 802e3e4:	4b2b      	ldr	r3, [pc, #172]	; (802e494 <HAL_GPIO_Init+0x238>)
 802e3e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 802e3ea:	f003 0302 	and.w	r3, r3, #2
 802e3ee:	60fb      	str	r3, [r7, #12]
 802e3f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 802e3f2:	4a29      	ldr	r2, [pc, #164]	; (802e498 <HAL_GPIO_Init+0x23c>)
 802e3f4:	69fb      	ldr	r3, [r7, #28]
 802e3f6:	089b      	lsrs	r3, r3, #2
 802e3f8:	3302      	adds	r3, #2
 802e3fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802e3fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 802e400:	69fb      	ldr	r3, [r7, #28]
 802e402:	f003 0303 	and.w	r3, r3, #3
 802e406:	009b      	lsls	r3, r3, #2
 802e408:	220f      	movs	r2, #15
 802e40a:	fa02 f303 	lsl.w	r3, r2, r3
 802e40e:	43db      	mvns	r3, r3
 802e410:	69ba      	ldr	r2, [r7, #24]
 802e412:	4013      	ands	r3, r2
 802e414:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 802e416:	687b      	ldr	r3, [r7, #4]
 802e418:	4a20      	ldr	r2, [pc, #128]	; (802e49c <HAL_GPIO_Init+0x240>)
 802e41a:	4293      	cmp	r3, r2
 802e41c:	d052      	beq.n	802e4c4 <HAL_GPIO_Init+0x268>
 802e41e:	687b      	ldr	r3, [r7, #4]
 802e420:	4a1f      	ldr	r2, [pc, #124]	; (802e4a0 <HAL_GPIO_Init+0x244>)
 802e422:	4293      	cmp	r3, r2
 802e424:	d031      	beq.n	802e48a <HAL_GPIO_Init+0x22e>
 802e426:	687b      	ldr	r3, [r7, #4]
 802e428:	4a1e      	ldr	r2, [pc, #120]	; (802e4a4 <HAL_GPIO_Init+0x248>)
 802e42a:	4293      	cmp	r3, r2
 802e42c:	d02b      	beq.n	802e486 <HAL_GPIO_Init+0x22a>
 802e42e:	687b      	ldr	r3, [r7, #4]
 802e430:	4a1d      	ldr	r2, [pc, #116]	; (802e4a8 <HAL_GPIO_Init+0x24c>)
 802e432:	4293      	cmp	r3, r2
 802e434:	d025      	beq.n	802e482 <HAL_GPIO_Init+0x226>
 802e436:	687b      	ldr	r3, [r7, #4]
 802e438:	4a1c      	ldr	r2, [pc, #112]	; (802e4ac <HAL_GPIO_Init+0x250>)
 802e43a:	4293      	cmp	r3, r2
 802e43c:	d01f      	beq.n	802e47e <HAL_GPIO_Init+0x222>
 802e43e:	687b      	ldr	r3, [r7, #4]
 802e440:	4a1b      	ldr	r2, [pc, #108]	; (802e4b0 <HAL_GPIO_Init+0x254>)
 802e442:	4293      	cmp	r3, r2
 802e444:	d019      	beq.n	802e47a <HAL_GPIO_Init+0x21e>
 802e446:	687b      	ldr	r3, [r7, #4]
 802e448:	4a1a      	ldr	r2, [pc, #104]	; (802e4b4 <HAL_GPIO_Init+0x258>)
 802e44a:	4293      	cmp	r3, r2
 802e44c:	d013      	beq.n	802e476 <HAL_GPIO_Init+0x21a>
 802e44e:	687b      	ldr	r3, [r7, #4]
 802e450:	4a19      	ldr	r2, [pc, #100]	; (802e4b8 <HAL_GPIO_Init+0x25c>)
 802e452:	4293      	cmp	r3, r2
 802e454:	d00d      	beq.n	802e472 <HAL_GPIO_Init+0x216>
 802e456:	687b      	ldr	r3, [r7, #4]
 802e458:	4a18      	ldr	r2, [pc, #96]	; (802e4bc <HAL_GPIO_Init+0x260>)
 802e45a:	4293      	cmp	r3, r2
 802e45c:	d007      	beq.n	802e46e <HAL_GPIO_Init+0x212>
 802e45e:	687b      	ldr	r3, [r7, #4]
 802e460:	4a17      	ldr	r2, [pc, #92]	; (802e4c0 <HAL_GPIO_Init+0x264>)
 802e462:	4293      	cmp	r3, r2
 802e464:	d101      	bne.n	802e46a <HAL_GPIO_Init+0x20e>
 802e466:	2309      	movs	r3, #9
 802e468:	e02d      	b.n	802e4c6 <HAL_GPIO_Init+0x26a>
 802e46a:	230a      	movs	r3, #10
 802e46c:	e02b      	b.n	802e4c6 <HAL_GPIO_Init+0x26a>
 802e46e:	2308      	movs	r3, #8
 802e470:	e029      	b.n	802e4c6 <HAL_GPIO_Init+0x26a>
 802e472:	2307      	movs	r3, #7
 802e474:	e027      	b.n	802e4c6 <HAL_GPIO_Init+0x26a>
 802e476:	2306      	movs	r3, #6
 802e478:	e025      	b.n	802e4c6 <HAL_GPIO_Init+0x26a>
 802e47a:	2305      	movs	r3, #5
 802e47c:	e023      	b.n	802e4c6 <HAL_GPIO_Init+0x26a>
 802e47e:	2304      	movs	r3, #4
 802e480:	e021      	b.n	802e4c6 <HAL_GPIO_Init+0x26a>
 802e482:	2303      	movs	r3, #3
 802e484:	e01f      	b.n	802e4c6 <HAL_GPIO_Init+0x26a>
 802e486:	2302      	movs	r3, #2
 802e488:	e01d      	b.n	802e4c6 <HAL_GPIO_Init+0x26a>
 802e48a:	2301      	movs	r3, #1
 802e48c:	e01b      	b.n	802e4c6 <HAL_GPIO_Init+0x26a>
 802e48e:	bf00      	nop
 802e490:	58000080 	.word	0x58000080
 802e494:	58024400 	.word	0x58024400
 802e498:	58000400 	.word	0x58000400
 802e49c:	58020000 	.word	0x58020000
 802e4a0:	58020400 	.word	0x58020400
 802e4a4:	58020800 	.word	0x58020800
 802e4a8:	58020c00 	.word	0x58020c00
 802e4ac:	58021000 	.word	0x58021000
 802e4b0:	58021400 	.word	0x58021400
 802e4b4:	58021800 	.word	0x58021800
 802e4b8:	58021c00 	.word	0x58021c00
 802e4bc:	58022000 	.word	0x58022000
 802e4c0:	58022400 	.word	0x58022400
 802e4c4:	2300      	movs	r3, #0
 802e4c6:	69fa      	ldr	r2, [r7, #28]
 802e4c8:	f002 0203 	and.w	r2, r2, #3
 802e4cc:	0092      	lsls	r2, r2, #2
 802e4ce:	4093      	lsls	r3, r2
 802e4d0:	69ba      	ldr	r2, [r7, #24]
 802e4d2:	4313      	orrs	r3, r2
 802e4d4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 802e4d6:	4938      	ldr	r1, [pc, #224]	; (802e5b8 <HAL_GPIO_Init+0x35c>)
 802e4d8:	69fb      	ldr	r3, [r7, #28]
 802e4da:	089b      	lsrs	r3, r3, #2
 802e4dc:	3302      	adds	r3, #2
 802e4de:	69ba      	ldr	r2, [r7, #24]
 802e4e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 802e4e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802e4e8:	681b      	ldr	r3, [r3, #0]
 802e4ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 802e4ec:	693b      	ldr	r3, [r7, #16]
 802e4ee:	43db      	mvns	r3, r3
 802e4f0:	69ba      	ldr	r2, [r7, #24]
 802e4f2:	4013      	ands	r3, r2
 802e4f4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 802e4f6:	683b      	ldr	r3, [r7, #0]
 802e4f8:	685b      	ldr	r3, [r3, #4]
 802e4fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 802e4fe:	2b00      	cmp	r3, #0
 802e500:	d003      	beq.n	802e50a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 802e502:	69ba      	ldr	r2, [r7, #24]
 802e504:	693b      	ldr	r3, [r7, #16]
 802e506:	4313      	orrs	r3, r2
 802e508:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 802e50a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 802e50e:	69bb      	ldr	r3, [r7, #24]
 802e510:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 802e512:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802e516:	685b      	ldr	r3, [r3, #4]
 802e518:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 802e51a:	693b      	ldr	r3, [r7, #16]
 802e51c:	43db      	mvns	r3, r3
 802e51e:	69ba      	ldr	r2, [r7, #24]
 802e520:	4013      	ands	r3, r2
 802e522:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 802e524:	683b      	ldr	r3, [r7, #0]
 802e526:	685b      	ldr	r3, [r3, #4]
 802e528:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 802e52c:	2b00      	cmp	r3, #0
 802e52e:	d003      	beq.n	802e538 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 802e530:	69ba      	ldr	r2, [r7, #24]
 802e532:	693b      	ldr	r3, [r7, #16]
 802e534:	4313      	orrs	r3, r2
 802e536:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 802e538:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 802e53c:	69bb      	ldr	r3, [r7, #24]
 802e53e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 802e540:	697b      	ldr	r3, [r7, #20]
 802e542:	685b      	ldr	r3, [r3, #4]
 802e544:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 802e546:	693b      	ldr	r3, [r7, #16]
 802e548:	43db      	mvns	r3, r3
 802e54a:	69ba      	ldr	r2, [r7, #24]
 802e54c:	4013      	ands	r3, r2
 802e54e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 802e550:	683b      	ldr	r3, [r7, #0]
 802e552:	685b      	ldr	r3, [r3, #4]
 802e554:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802e558:	2b00      	cmp	r3, #0
 802e55a:	d003      	beq.n	802e564 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 802e55c:	69ba      	ldr	r2, [r7, #24]
 802e55e:	693b      	ldr	r3, [r7, #16]
 802e560:	4313      	orrs	r3, r2
 802e562:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 802e564:	697b      	ldr	r3, [r7, #20]
 802e566:	69ba      	ldr	r2, [r7, #24]
 802e568:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 802e56a:	697b      	ldr	r3, [r7, #20]
 802e56c:	681b      	ldr	r3, [r3, #0]
 802e56e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 802e570:	693b      	ldr	r3, [r7, #16]
 802e572:	43db      	mvns	r3, r3
 802e574:	69ba      	ldr	r2, [r7, #24]
 802e576:	4013      	ands	r3, r2
 802e578:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 802e57a:	683b      	ldr	r3, [r7, #0]
 802e57c:	685b      	ldr	r3, [r3, #4]
 802e57e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 802e582:	2b00      	cmp	r3, #0
 802e584:	d003      	beq.n	802e58e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 802e586:	69ba      	ldr	r2, [r7, #24]
 802e588:	693b      	ldr	r3, [r7, #16]
 802e58a:	4313      	orrs	r3, r2
 802e58c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 802e58e:	697b      	ldr	r3, [r7, #20]
 802e590:	69ba      	ldr	r2, [r7, #24]
 802e592:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 802e594:	69fb      	ldr	r3, [r7, #28]
 802e596:	3301      	adds	r3, #1
 802e598:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 802e59a:	683b      	ldr	r3, [r7, #0]
 802e59c:	681a      	ldr	r2, [r3, #0]
 802e59e:	69fb      	ldr	r3, [r7, #28]
 802e5a0:	fa22 f303 	lsr.w	r3, r2, r3
 802e5a4:	2b00      	cmp	r3, #0
 802e5a6:	f47f ae63 	bne.w	802e270 <HAL_GPIO_Init+0x14>
  }
}
 802e5aa:	bf00      	nop
 802e5ac:	bf00      	nop
 802e5ae:	3724      	adds	r7, #36	; 0x24
 802e5b0:	46bd      	mov	sp, r7
 802e5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e5b6:	4770      	bx	lr
 802e5b8:	58000400 	.word	0x58000400

0802e5bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 802e5bc:	b480      	push	{r7}
 802e5be:	b083      	sub	sp, #12
 802e5c0:	af00      	add	r7, sp, #0
 802e5c2:	6078      	str	r0, [r7, #4]
 802e5c4:	460b      	mov	r3, r1
 802e5c6:	807b      	strh	r3, [r7, #2]
 802e5c8:	4613      	mov	r3, r2
 802e5ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 802e5cc:	787b      	ldrb	r3, [r7, #1]
 802e5ce:	2b00      	cmp	r3, #0
 802e5d0:	d003      	beq.n	802e5da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 802e5d2:	887a      	ldrh	r2, [r7, #2]
 802e5d4:	687b      	ldr	r3, [r7, #4]
 802e5d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 802e5d8:	e003      	b.n	802e5e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 802e5da:	887b      	ldrh	r3, [r7, #2]
 802e5dc:	041a      	lsls	r2, r3, #16
 802e5de:	687b      	ldr	r3, [r7, #4]
 802e5e0:	619a      	str	r2, [r3, #24]
}
 802e5e2:	bf00      	nop
 802e5e4:	370c      	adds	r7, #12
 802e5e6:	46bd      	mov	sp, r7
 802e5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e5ec:	4770      	bx	lr
	...

0802e5f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 802e5f0:	b580      	push	{r7, lr}
 802e5f2:	b082      	sub	sp, #8
 802e5f4:	af00      	add	r7, sp, #0
 802e5f6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 802e5f8:	687b      	ldr	r3, [r7, #4]
 802e5fa:	2b00      	cmp	r3, #0
 802e5fc:	d101      	bne.n	802e602 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 802e5fe:	2301      	movs	r3, #1
 802e600:	e07f      	b.n	802e702 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 802e602:	687b      	ldr	r3, [r7, #4]
 802e604:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802e608:	b2db      	uxtb	r3, r3
 802e60a:	2b00      	cmp	r3, #0
 802e60c:	d106      	bne.n	802e61c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 802e60e:	687b      	ldr	r3, [r7, #4]
 802e610:	2200      	movs	r2, #0
 802e612:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 802e616:	6878      	ldr	r0, [r7, #4]
 802e618:	f7fa ff98 	bl	802954c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 802e61c:	687b      	ldr	r3, [r7, #4]
 802e61e:	2224      	movs	r2, #36	; 0x24
 802e620:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 802e624:	687b      	ldr	r3, [r7, #4]
 802e626:	681b      	ldr	r3, [r3, #0]
 802e628:	681a      	ldr	r2, [r3, #0]
 802e62a:	687b      	ldr	r3, [r7, #4]
 802e62c:	681b      	ldr	r3, [r3, #0]
 802e62e:	f022 0201 	bic.w	r2, r2, #1
 802e632:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 802e634:	687b      	ldr	r3, [r7, #4]
 802e636:	685a      	ldr	r2, [r3, #4]
 802e638:	687b      	ldr	r3, [r7, #4]
 802e63a:	681b      	ldr	r3, [r3, #0]
 802e63c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 802e640:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 802e642:	687b      	ldr	r3, [r7, #4]
 802e644:	681b      	ldr	r3, [r3, #0]
 802e646:	689a      	ldr	r2, [r3, #8]
 802e648:	687b      	ldr	r3, [r7, #4]
 802e64a:	681b      	ldr	r3, [r3, #0]
 802e64c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 802e650:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 802e652:	687b      	ldr	r3, [r7, #4]
 802e654:	68db      	ldr	r3, [r3, #12]
 802e656:	2b01      	cmp	r3, #1
 802e658:	d107      	bne.n	802e66a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 802e65a:	687b      	ldr	r3, [r7, #4]
 802e65c:	689a      	ldr	r2, [r3, #8]
 802e65e:	687b      	ldr	r3, [r7, #4]
 802e660:	681b      	ldr	r3, [r3, #0]
 802e662:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 802e666:	609a      	str	r2, [r3, #8]
 802e668:	e006      	b.n	802e678 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 802e66a:	687b      	ldr	r3, [r7, #4]
 802e66c:	689a      	ldr	r2, [r3, #8]
 802e66e:	687b      	ldr	r3, [r7, #4]
 802e670:	681b      	ldr	r3, [r3, #0]
 802e672:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 802e676:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 802e678:	687b      	ldr	r3, [r7, #4]
 802e67a:	68db      	ldr	r3, [r3, #12]
 802e67c:	2b02      	cmp	r3, #2
 802e67e:	d104      	bne.n	802e68a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 802e680:	687b      	ldr	r3, [r7, #4]
 802e682:	681b      	ldr	r3, [r3, #0]
 802e684:	f44f 6200 	mov.w	r2, #2048	; 0x800
 802e688:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 802e68a:	687b      	ldr	r3, [r7, #4]
 802e68c:	681b      	ldr	r3, [r3, #0]
 802e68e:	6859      	ldr	r1, [r3, #4]
 802e690:	687b      	ldr	r3, [r7, #4]
 802e692:	681a      	ldr	r2, [r3, #0]
 802e694:	4b1d      	ldr	r3, [pc, #116]	; (802e70c <HAL_I2C_Init+0x11c>)
 802e696:	430b      	orrs	r3, r1
 802e698:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 802e69a:	687b      	ldr	r3, [r7, #4]
 802e69c:	681b      	ldr	r3, [r3, #0]
 802e69e:	68da      	ldr	r2, [r3, #12]
 802e6a0:	687b      	ldr	r3, [r7, #4]
 802e6a2:	681b      	ldr	r3, [r3, #0]
 802e6a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 802e6a8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 802e6aa:	687b      	ldr	r3, [r7, #4]
 802e6ac:	691a      	ldr	r2, [r3, #16]
 802e6ae:	687b      	ldr	r3, [r7, #4]
 802e6b0:	695b      	ldr	r3, [r3, #20]
 802e6b2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 802e6b6:	687b      	ldr	r3, [r7, #4]
 802e6b8:	699b      	ldr	r3, [r3, #24]
 802e6ba:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 802e6bc:	687b      	ldr	r3, [r7, #4]
 802e6be:	681b      	ldr	r3, [r3, #0]
 802e6c0:	430a      	orrs	r2, r1
 802e6c2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 802e6c4:	687b      	ldr	r3, [r7, #4]
 802e6c6:	69d9      	ldr	r1, [r3, #28]
 802e6c8:	687b      	ldr	r3, [r7, #4]
 802e6ca:	6a1a      	ldr	r2, [r3, #32]
 802e6cc:	687b      	ldr	r3, [r7, #4]
 802e6ce:	681b      	ldr	r3, [r3, #0]
 802e6d0:	430a      	orrs	r2, r1
 802e6d2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 802e6d4:	687b      	ldr	r3, [r7, #4]
 802e6d6:	681b      	ldr	r3, [r3, #0]
 802e6d8:	681a      	ldr	r2, [r3, #0]
 802e6da:	687b      	ldr	r3, [r7, #4]
 802e6dc:	681b      	ldr	r3, [r3, #0]
 802e6de:	f042 0201 	orr.w	r2, r2, #1
 802e6e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 802e6e4:	687b      	ldr	r3, [r7, #4]
 802e6e6:	2200      	movs	r2, #0
 802e6e8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 802e6ea:	687b      	ldr	r3, [r7, #4]
 802e6ec:	2220      	movs	r2, #32
 802e6ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 802e6f2:	687b      	ldr	r3, [r7, #4]
 802e6f4:	2200      	movs	r2, #0
 802e6f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 802e6f8:	687b      	ldr	r3, [r7, #4]
 802e6fa:	2200      	movs	r2, #0
 802e6fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 802e700:	2300      	movs	r3, #0
}
 802e702:	4618      	mov	r0, r3
 802e704:	3708      	adds	r7, #8
 802e706:	46bd      	mov	sp, r7
 802e708:	bd80      	pop	{r7, pc}
 802e70a:	bf00      	nop
 802e70c:	02008000 	.word	0x02008000

0802e710 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 802e710:	b580      	push	{r7, lr}
 802e712:	b084      	sub	sp, #16
 802e714:	af00      	add	r7, sp, #0
 802e716:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 802e718:	687b      	ldr	r3, [r7, #4]
 802e71a:	681b      	ldr	r3, [r3, #0]
 802e71c:	699b      	ldr	r3, [r3, #24]
 802e71e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 802e720:	687b      	ldr	r3, [r7, #4]
 802e722:	681b      	ldr	r3, [r3, #0]
 802e724:	681b      	ldr	r3, [r3, #0]
 802e726:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 802e728:	687b      	ldr	r3, [r7, #4]
 802e72a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802e72c:	2b00      	cmp	r3, #0
 802e72e:	d005      	beq.n	802e73c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 802e730:	687b      	ldr	r3, [r7, #4]
 802e732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802e734:	68ba      	ldr	r2, [r7, #8]
 802e736:	68f9      	ldr	r1, [r7, #12]
 802e738:	6878      	ldr	r0, [r7, #4]
 802e73a:	4798      	blx	r3
  }
}
 802e73c:	bf00      	nop
 802e73e:	3710      	adds	r7, #16
 802e740:	46bd      	mov	sp, r7
 802e742:	bd80      	pop	{r7, pc}

0802e744 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 802e744:	b580      	push	{r7, lr}
 802e746:	b086      	sub	sp, #24
 802e748:	af00      	add	r7, sp, #0
 802e74a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 802e74c:	687b      	ldr	r3, [r7, #4]
 802e74e:	681b      	ldr	r3, [r3, #0]
 802e750:	699b      	ldr	r3, [r3, #24]
 802e752:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 802e754:	687b      	ldr	r3, [r7, #4]
 802e756:	681b      	ldr	r3, [r3, #0]
 802e758:	681b      	ldr	r3, [r3, #0]
 802e75a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 802e75c:	697b      	ldr	r3, [r7, #20]
 802e75e:	0a1b      	lsrs	r3, r3, #8
 802e760:	f003 0301 	and.w	r3, r3, #1
 802e764:	2b00      	cmp	r3, #0
 802e766:	d010      	beq.n	802e78a <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 802e768:	693b      	ldr	r3, [r7, #16]
 802e76a:	09db      	lsrs	r3, r3, #7
 802e76c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 802e770:	2b00      	cmp	r3, #0
 802e772:	d00a      	beq.n	802e78a <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 802e774:	687b      	ldr	r3, [r7, #4]
 802e776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802e778:	f043 0201 	orr.w	r2, r3, #1
 802e77c:	687b      	ldr	r3, [r7, #4]
 802e77e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 802e780:	687b      	ldr	r3, [r7, #4]
 802e782:	681b      	ldr	r3, [r3, #0]
 802e784:	f44f 7280 	mov.w	r2, #256	; 0x100
 802e788:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 802e78a:	697b      	ldr	r3, [r7, #20]
 802e78c:	0a9b      	lsrs	r3, r3, #10
 802e78e:	f003 0301 	and.w	r3, r3, #1
 802e792:	2b00      	cmp	r3, #0
 802e794:	d010      	beq.n	802e7b8 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 802e796:	693b      	ldr	r3, [r7, #16]
 802e798:	09db      	lsrs	r3, r3, #7
 802e79a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 802e79e:	2b00      	cmp	r3, #0
 802e7a0:	d00a      	beq.n	802e7b8 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 802e7a2:	687b      	ldr	r3, [r7, #4]
 802e7a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802e7a6:	f043 0208 	orr.w	r2, r3, #8
 802e7aa:	687b      	ldr	r3, [r7, #4]
 802e7ac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 802e7ae:	687b      	ldr	r3, [r7, #4]
 802e7b0:	681b      	ldr	r3, [r3, #0]
 802e7b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 802e7b6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 802e7b8:	697b      	ldr	r3, [r7, #20]
 802e7ba:	0a5b      	lsrs	r3, r3, #9
 802e7bc:	f003 0301 	and.w	r3, r3, #1
 802e7c0:	2b00      	cmp	r3, #0
 802e7c2:	d010      	beq.n	802e7e6 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 802e7c4:	693b      	ldr	r3, [r7, #16]
 802e7c6:	09db      	lsrs	r3, r3, #7
 802e7c8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 802e7cc:	2b00      	cmp	r3, #0
 802e7ce:	d00a      	beq.n	802e7e6 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 802e7d0:	687b      	ldr	r3, [r7, #4]
 802e7d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802e7d4:	f043 0202 	orr.w	r2, r3, #2
 802e7d8:	687b      	ldr	r3, [r7, #4]
 802e7da:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 802e7dc:	687b      	ldr	r3, [r7, #4]
 802e7de:	681b      	ldr	r3, [r3, #0]
 802e7e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 802e7e4:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 802e7e6:	687b      	ldr	r3, [r7, #4]
 802e7e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802e7ea:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 802e7ec:	68fb      	ldr	r3, [r7, #12]
 802e7ee:	f003 030b 	and.w	r3, r3, #11
 802e7f2:	2b00      	cmp	r3, #0
 802e7f4:	d003      	beq.n	802e7fe <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 802e7f6:	68f9      	ldr	r1, [r7, #12]
 802e7f8:	6878      	ldr	r0, [r7, #4]
 802e7fa:	f000 fc77 	bl	802f0ec <I2C_ITError>
  }
}
 802e7fe:	bf00      	nop
 802e800:	3718      	adds	r7, #24
 802e802:	46bd      	mov	sp, r7
 802e804:	bd80      	pop	{r7, pc}

0802e806 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 802e806:	b480      	push	{r7}
 802e808:	b083      	sub	sp, #12
 802e80a:	af00      	add	r7, sp, #0
 802e80c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 802e80e:	bf00      	nop
 802e810:	370c      	adds	r7, #12
 802e812:	46bd      	mov	sp, r7
 802e814:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e818:	4770      	bx	lr

0802e81a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 802e81a:	b480      	push	{r7}
 802e81c:	b083      	sub	sp, #12
 802e81e:	af00      	add	r7, sp, #0
 802e820:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 802e822:	bf00      	nop
 802e824:	370c      	adds	r7, #12
 802e826:	46bd      	mov	sp, r7
 802e828:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e82c:	4770      	bx	lr

0802e82e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 802e82e:	b480      	push	{r7}
 802e830:	b083      	sub	sp, #12
 802e832:	af00      	add	r7, sp, #0
 802e834:	6078      	str	r0, [r7, #4]
 802e836:	460b      	mov	r3, r1
 802e838:	70fb      	strb	r3, [r7, #3]
 802e83a:	4613      	mov	r3, r2
 802e83c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 802e83e:	bf00      	nop
 802e840:	370c      	adds	r7, #12
 802e842:	46bd      	mov	sp, r7
 802e844:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e848:	4770      	bx	lr

0802e84a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 802e84a:	b480      	push	{r7}
 802e84c:	b083      	sub	sp, #12
 802e84e:	af00      	add	r7, sp, #0
 802e850:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 802e852:	bf00      	nop
 802e854:	370c      	adds	r7, #12
 802e856:	46bd      	mov	sp, r7
 802e858:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e85c:	4770      	bx	lr

0802e85e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 802e85e:	b480      	push	{r7}
 802e860:	b083      	sub	sp, #12
 802e862:	af00      	add	r7, sp, #0
 802e864:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 802e866:	bf00      	nop
 802e868:	370c      	adds	r7, #12
 802e86a:	46bd      	mov	sp, r7
 802e86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e870:	4770      	bx	lr

0802e872 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 802e872:	b480      	push	{r7}
 802e874:	b083      	sub	sp, #12
 802e876:	af00      	add	r7, sp, #0
 802e878:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 802e87a:	bf00      	nop
 802e87c:	370c      	adds	r7, #12
 802e87e:	46bd      	mov	sp, r7
 802e880:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e884:	4770      	bx	lr

0802e886 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 802e886:	b580      	push	{r7, lr}
 802e888:	b086      	sub	sp, #24
 802e88a:	af00      	add	r7, sp, #0
 802e88c:	60f8      	str	r0, [r7, #12]
 802e88e:	60b9      	str	r1, [r7, #8]
 802e890:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 802e892:	68fb      	ldr	r3, [r7, #12]
 802e894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802e896:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 802e898:	68bb      	ldr	r3, [r7, #8]
 802e89a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 802e89c:	68fb      	ldr	r3, [r7, #12]
 802e89e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 802e8a2:	2b01      	cmp	r3, #1
 802e8a4:	d101      	bne.n	802e8aa <I2C_Slave_ISR_IT+0x24>
 802e8a6:	2302      	movs	r3, #2
 802e8a8:	e0ec      	b.n	802ea84 <I2C_Slave_ISR_IT+0x1fe>
 802e8aa:	68fb      	ldr	r3, [r7, #12]
 802e8ac:	2201      	movs	r2, #1
 802e8ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 802e8b2:	693b      	ldr	r3, [r7, #16]
 802e8b4:	095b      	lsrs	r3, r3, #5
 802e8b6:	f003 0301 	and.w	r3, r3, #1
 802e8ba:	2b00      	cmp	r3, #0
 802e8bc:	d009      	beq.n	802e8d2 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 802e8be:	687b      	ldr	r3, [r7, #4]
 802e8c0:	095b      	lsrs	r3, r3, #5
 802e8c2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 802e8c6:	2b00      	cmp	r3, #0
 802e8c8:	d003      	beq.n	802e8d2 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 802e8ca:	6939      	ldr	r1, [r7, #16]
 802e8cc:	68f8      	ldr	r0, [r7, #12]
 802e8ce:	f000 f9bf 	bl	802ec50 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 802e8d2:	693b      	ldr	r3, [r7, #16]
 802e8d4:	091b      	lsrs	r3, r3, #4
 802e8d6:	f003 0301 	and.w	r3, r3, #1
 802e8da:	2b00      	cmp	r3, #0
 802e8dc:	d04d      	beq.n	802e97a <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 802e8de:	687b      	ldr	r3, [r7, #4]
 802e8e0:	091b      	lsrs	r3, r3, #4
 802e8e2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 802e8e6:	2b00      	cmp	r3, #0
 802e8e8:	d047      	beq.n	802e97a <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 802e8ea:	68fb      	ldr	r3, [r7, #12]
 802e8ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802e8ee:	b29b      	uxth	r3, r3
 802e8f0:	2b00      	cmp	r3, #0
 802e8f2:	d128      	bne.n	802e946 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 802e8f4:	68fb      	ldr	r3, [r7, #12]
 802e8f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802e8fa:	b2db      	uxtb	r3, r3
 802e8fc:	2b28      	cmp	r3, #40	; 0x28
 802e8fe:	d108      	bne.n	802e912 <I2C_Slave_ISR_IT+0x8c>
 802e900:	697b      	ldr	r3, [r7, #20]
 802e902:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 802e906:	d104      	bne.n	802e912 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 802e908:	6939      	ldr	r1, [r7, #16]
 802e90a:	68f8      	ldr	r0, [r7, #12]
 802e90c:	f000 fb98 	bl	802f040 <I2C_ITListenCplt>
 802e910:	e032      	b.n	802e978 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 802e912:	68fb      	ldr	r3, [r7, #12]
 802e914:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802e918:	b2db      	uxtb	r3, r3
 802e91a:	2b29      	cmp	r3, #41	; 0x29
 802e91c:	d10e      	bne.n	802e93c <I2C_Slave_ISR_IT+0xb6>
 802e91e:	697b      	ldr	r3, [r7, #20]
 802e920:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 802e924:	d00a      	beq.n	802e93c <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 802e926:	68fb      	ldr	r3, [r7, #12]
 802e928:	681b      	ldr	r3, [r3, #0]
 802e92a:	2210      	movs	r2, #16
 802e92c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 802e92e:	68f8      	ldr	r0, [r7, #12]
 802e930:	f000 fcd3 	bl	802f2da <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 802e934:	68f8      	ldr	r0, [r7, #12]
 802e936:	f000 f92d 	bl	802eb94 <I2C_ITSlaveSeqCplt>
 802e93a:	e01d      	b.n	802e978 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 802e93c:	68fb      	ldr	r3, [r7, #12]
 802e93e:	681b      	ldr	r3, [r3, #0]
 802e940:	2210      	movs	r2, #16
 802e942:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 802e944:	e096      	b.n	802ea74 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 802e946:	68fb      	ldr	r3, [r7, #12]
 802e948:	681b      	ldr	r3, [r3, #0]
 802e94a:	2210      	movs	r2, #16
 802e94c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 802e94e:	68fb      	ldr	r3, [r7, #12]
 802e950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802e952:	f043 0204 	orr.w	r2, r3, #4
 802e956:	68fb      	ldr	r3, [r7, #12]
 802e958:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 802e95a:	697b      	ldr	r3, [r7, #20]
 802e95c:	2b00      	cmp	r3, #0
 802e95e:	d004      	beq.n	802e96a <I2C_Slave_ISR_IT+0xe4>
 802e960:	697b      	ldr	r3, [r7, #20]
 802e962:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 802e966:	f040 8085 	bne.w	802ea74 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 802e96a:	68fb      	ldr	r3, [r7, #12]
 802e96c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802e96e:	4619      	mov	r1, r3
 802e970:	68f8      	ldr	r0, [r7, #12]
 802e972:	f000 fbbb 	bl	802f0ec <I2C_ITError>
    if (hi2c->XferCount == 0U)
 802e976:	e07d      	b.n	802ea74 <I2C_Slave_ISR_IT+0x1ee>
 802e978:	e07c      	b.n	802ea74 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 802e97a:	693b      	ldr	r3, [r7, #16]
 802e97c:	089b      	lsrs	r3, r3, #2
 802e97e:	f003 0301 	and.w	r3, r3, #1
 802e982:	2b00      	cmp	r3, #0
 802e984:	d030      	beq.n	802e9e8 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 802e986:	687b      	ldr	r3, [r7, #4]
 802e988:	089b      	lsrs	r3, r3, #2
 802e98a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 802e98e:	2b00      	cmp	r3, #0
 802e990:	d02a      	beq.n	802e9e8 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 802e992:	68fb      	ldr	r3, [r7, #12]
 802e994:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802e996:	b29b      	uxth	r3, r3
 802e998:	2b00      	cmp	r3, #0
 802e99a:	d018      	beq.n	802e9ce <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 802e99c:	68fb      	ldr	r3, [r7, #12]
 802e99e:	681b      	ldr	r3, [r3, #0]
 802e9a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 802e9a2:	68fb      	ldr	r3, [r7, #12]
 802e9a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802e9a6:	b2d2      	uxtb	r2, r2
 802e9a8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 802e9aa:	68fb      	ldr	r3, [r7, #12]
 802e9ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802e9ae:	1c5a      	adds	r2, r3, #1
 802e9b0:	68fb      	ldr	r3, [r7, #12]
 802e9b2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 802e9b4:	68fb      	ldr	r3, [r7, #12]
 802e9b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802e9b8:	3b01      	subs	r3, #1
 802e9ba:	b29a      	uxth	r2, r3
 802e9bc:	68fb      	ldr	r3, [r7, #12]
 802e9be:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 802e9c0:	68fb      	ldr	r3, [r7, #12]
 802e9c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802e9c4:	b29b      	uxth	r3, r3
 802e9c6:	3b01      	subs	r3, #1
 802e9c8:	b29a      	uxth	r2, r3
 802e9ca:	68fb      	ldr	r3, [r7, #12]
 802e9cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 802e9ce:	68fb      	ldr	r3, [r7, #12]
 802e9d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802e9d2:	b29b      	uxth	r3, r3
 802e9d4:	2b00      	cmp	r3, #0
 802e9d6:	d14f      	bne.n	802ea78 <I2C_Slave_ISR_IT+0x1f2>
 802e9d8:	697b      	ldr	r3, [r7, #20]
 802e9da:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 802e9de:	d04b      	beq.n	802ea78 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 802e9e0:	68f8      	ldr	r0, [r7, #12]
 802e9e2:	f000 f8d7 	bl	802eb94 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 802e9e6:	e047      	b.n	802ea78 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 802e9e8:	693b      	ldr	r3, [r7, #16]
 802e9ea:	08db      	lsrs	r3, r3, #3
 802e9ec:	f003 0301 	and.w	r3, r3, #1
 802e9f0:	2b00      	cmp	r3, #0
 802e9f2:	d00a      	beq.n	802ea0a <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 802e9f4:	687b      	ldr	r3, [r7, #4]
 802e9f6:	08db      	lsrs	r3, r3, #3
 802e9f8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 802e9fc:	2b00      	cmp	r3, #0
 802e9fe:	d004      	beq.n	802ea0a <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 802ea00:	6939      	ldr	r1, [r7, #16]
 802ea02:	68f8      	ldr	r0, [r7, #12]
 802ea04:	f000 f842 	bl	802ea8c <I2C_ITAddrCplt>
 802ea08:	e037      	b.n	802ea7a <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 802ea0a:	693b      	ldr	r3, [r7, #16]
 802ea0c:	085b      	lsrs	r3, r3, #1
 802ea0e:	f003 0301 	and.w	r3, r3, #1
 802ea12:	2b00      	cmp	r3, #0
 802ea14:	d031      	beq.n	802ea7a <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 802ea16:	687b      	ldr	r3, [r7, #4]
 802ea18:	085b      	lsrs	r3, r3, #1
 802ea1a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 802ea1e:	2b00      	cmp	r3, #0
 802ea20:	d02b      	beq.n	802ea7a <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 802ea22:	68fb      	ldr	r3, [r7, #12]
 802ea24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802ea26:	b29b      	uxth	r3, r3
 802ea28:	2b00      	cmp	r3, #0
 802ea2a:	d018      	beq.n	802ea5e <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 802ea2c:	68fb      	ldr	r3, [r7, #12]
 802ea2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802ea30:	781a      	ldrb	r2, [r3, #0]
 802ea32:	68fb      	ldr	r3, [r7, #12]
 802ea34:	681b      	ldr	r3, [r3, #0]
 802ea36:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 802ea38:	68fb      	ldr	r3, [r7, #12]
 802ea3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802ea3c:	1c5a      	adds	r2, r3, #1
 802ea3e:	68fb      	ldr	r3, [r7, #12]
 802ea40:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 802ea42:	68fb      	ldr	r3, [r7, #12]
 802ea44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802ea46:	b29b      	uxth	r3, r3
 802ea48:	3b01      	subs	r3, #1
 802ea4a:	b29a      	uxth	r2, r3
 802ea4c:	68fb      	ldr	r3, [r7, #12]
 802ea4e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 802ea50:	68fb      	ldr	r3, [r7, #12]
 802ea52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802ea54:	3b01      	subs	r3, #1
 802ea56:	b29a      	uxth	r2, r3
 802ea58:	68fb      	ldr	r3, [r7, #12]
 802ea5a:	851a      	strh	r2, [r3, #40]	; 0x28
 802ea5c:	e00d      	b.n	802ea7a <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 802ea5e:	697b      	ldr	r3, [r7, #20]
 802ea60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 802ea64:	d002      	beq.n	802ea6c <I2C_Slave_ISR_IT+0x1e6>
 802ea66:	697b      	ldr	r3, [r7, #20]
 802ea68:	2b00      	cmp	r3, #0
 802ea6a:	d106      	bne.n	802ea7a <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 802ea6c:	68f8      	ldr	r0, [r7, #12]
 802ea6e:	f000 f891 	bl	802eb94 <I2C_ITSlaveSeqCplt>
 802ea72:	e002      	b.n	802ea7a <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 802ea74:	bf00      	nop
 802ea76:	e000      	b.n	802ea7a <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 802ea78:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 802ea7a:	68fb      	ldr	r3, [r7, #12]
 802ea7c:	2200      	movs	r2, #0
 802ea7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 802ea82:	2300      	movs	r3, #0
}
 802ea84:	4618      	mov	r0, r3
 802ea86:	3718      	adds	r7, #24
 802ea88:	46bd      	mov	sp, r7
 802ea8a:	bd80      	pop	{r7, pc}

0802ea8c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 802ea8c:	b580      	push	{r7, lr}
 802ea8e:	b084      	sub	sp, #16
 802ea90:	af00      	add	r7, sp, #0
 802ea92:	6078      	str	r0, [r7, #4]
 802ea94:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 802ea96:	687b      	ldr	r3, [r7, #4]
 802ea98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802ea9c:	b2db      	uxtb	r3, r3
 802ea9e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 802eaa2:	2b28      	cmp	r3, #40	; 0x28
 802eaa4:	d16a      	bne.n	802eb7c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 802eaa6:	687b      	ldr	r3, [r7, #4]
 802eaa8:	681b      	ldr	r3, [r3, #0]
 802eaaa:	699b      	ldr	r3, [r3, #24]
 802eaac:	0c1b      	lsrs	r3, r3, #16
 802eaae:	b2db      	uxtb	r3, r3
 802eab0:	f003 0301 	and.w	r3, r3, #1
 802eab4:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 802eab6:	687b      	ldr	r3, [r7, #4]
 802eab8:	681b      	ldr	r3, [r3, #0]
 802eaba:	699b      	ldr	r3, [r3, #24]
 802eabc:	0c1b      	lsrs	r3, r3, #16
 802eabe:	b29b      	uxth	r3, r3
 802eac0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 802eac4:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 802eac6:	687b      	ldr	r3, [r7, #4]
 802eac8:	681b      	ldr	r3, [r3, #0]
 802eaca:	689b      	ldr	r3, [r3, #8]
 802eacc:	b29b      	uxth	r3, r3
 802eace:	f3c3 0309 	ubfx	r3, r3, #0, #10
 802ead2:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 802ead4:	687b      	ldr	r3, [r7, #4]
 802ead6:	681b      	ldr	r3, [r3, #0]
 802ead8:	68db      	ldr	r3, [r3, #12]
 802eada:	b29b      	uxth	r3, r3
 802eadc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 802eae0:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 802eae2:	687b      	ldr	r3, [r7, #4]
 802eae4:	68db      	ldr	r3, [r3, #12]
 802eae6:	2b02      	cmp	r3, #2
 802eae8:	d138      	bne.n	802eb5c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 802eaea:	897b      	ldrh	r3, [r7, #10]
 802eaec:	09db      	lsrs	r3, r3, #7
 802eaee:	b29a      	uxth	r2, r3
 802eaf0:	89bb      	ldrh	r3, [r7, #12]
 802eaf2:	4053      	eors	r3, r2
 802eaf4:	b29b      	uxth	r3, r3
 802eaf6:	f003 0306 	and.w	r3, r3, #6
 802eafa:	2b00      	cmp	r3, #0
 802eafc:	d11c      	bne.n	802eb38 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 802eafe:	897b      	ldrh	r3, [r7, #10]
 802eb00:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 802eb02:	687b      	ldr	r3, [r7, #4]
 802eb04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802eb06:	1c5a      	adds	r2, r3, #1
 802eb08:	687b      	ldr	r3, [r7, #4]
 802eb0a:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 802eb0c:	687b      	ldr	r3, [r7, #4]
 802eb0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802eb10:	2b02      	cmp	r3, #2
 802eb12:	d13b      	bne.n	802eb8c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 802eb14:	687b      	ldr	r3, [r7, #4]
 802eb16:	2200      	movs	r2, #0
 802eb18:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 802eb1a:	687b      	ldr	r3, [r7, #4]
 802eb1c:	681b      	ldr	r3, [r3, #0]
 802eb1e:	2208      	movs	r2, #8
 802eb20:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 802eb22:	687b      	ldr	r3, [r7, #4]
 802eb24:	2200      	movs	r2, #0
 802eb26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 802eb2a:	89ba      	ldrh	r2, [r7, #12]
 802eb2c:	7bfb      	ldrb	r3, [r7, #15]
 802eb2e:	4619      	mov	r1, r3
 802eb30:	6878      	ldr	r0, [r7, #4]
 802eb32:	f7ff fe7c 	bl	802e82e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 802eb36:	e029      	b.n	802eb8c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 802eb38:	893b      	ldrh	r3, [r7, #8]
 802eb3a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 802eb3c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 802eb40:	6878      	ldr	r0, [r7, #4]
 802eb42:	f000 fc0c 	bl	802f35e <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 802eb46:	687b      	ldr	r3, [r7, #4]
 802eb48:	2200      	movs	r2, #0
 802eb4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 802eb4e:	89ba      	ldrh	r2, [r7, #12]
 802eb50:	7bfb      	ldrb	r3, [r7, #15]
 802eb52:	4619      	mov	r1, r3
 802eb54:	6878      	ldr	r0, [r7, #4]
 802eb56:	f7ff fe6a 	bl	802e82e <HAL_I2C_AddrCallback>
}
 802eb5a:	e017      	b.n	802eb8c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 802eb5c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 802eb60:	6878      	ldr	r0, [r7, #4]
 802eb62:	f000 fbfc 	bl	802f35e <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 802eb66:	687b      	ldr	r3, [r7, #4]
 802eb68:	2200      	movs	r2, #0
 802eb6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 802eb6e:	89ba      	ldrh	r2, [r7, #12]
 802eb70:	7bfb      	ldrb	r3, [r7, #15]
 802eb72:	4619      	mov	r1, r3
 802eb74:	6878      	ldr	r0, [r7, #4]
 802eb76:	f7ff fe5a 	bl	802e82e <HAL_I2C_AddrCallback>
}
 802eb7a:	e007      	b.n	802eb8c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 802eb7c:	687b      	ldr	r3, [r7, #4]
 802eb7e:	681b      	ldr	r3, [r3, #0]
 802eb80:	2208      	movs	r2, #8
 802eb82:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 802eb84:	687b      	ldr	r3, [r7, #4]
 802eb86:	2200      	movs	r2, #0
 802eb88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 802eb8c:	bf00      	nop
 802eb8e:	3710      	adds	r7, #16
 802eb90:	46bd      	mov	sp, r7
 802eb92:	bd80      	pop	{r7, pc}

0802eb94 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 802eb94:	b580      	push	{r7, lr}
 802eb96:	b084      	sub	sp, #16
 802eb98:	af00      	add	r7, sp, #0
 802eb9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 802eb9c:	687b      	ldr	r3, [r7, #4]
 802eb9e:	681b      	ldr	r3, [r3, #0]
 802eba0:	681b      	ldr	r3, [r3, #0]
 802eba2:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 802eba4:	687b      	ldr	r3, [r7, #4]
 802eba6:	2200      	movs	r2, #0
 802eba8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 802ebac:	68fb      	ldr	r3, [r7, #12]
 802ebae:	0b9b      	lsrs	r3, r3, #14
 802ebb0:	f003 0301 	and.w	r3, r3, #1
 802ebb4:	2b00      	cmp	r3, #0
 802ebb6:	d008      	beq.n	802ebca <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 802ebb8:	687b      	ldr	r3, [r7, #4]
 802ebba:	681b      	ldr	r3, [r3, #0]
 802ebbc:	681a      	ldr	r2, [r3, #0]
 802ebbe:	687b      	ldr	r3, [r7, #4]
 802ebc0:	681b      	ldr	r3, [r3, #0]
 802ebc2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 802ebc6:	601a      	str	r2, [r3, #0]
 802ebc8:	e00d      	b.n	802ebe6 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 802ebca:	68fb      	ldr	r3, [r7, #12]
 802ebcc:	0bdb      	lsrs	r3, r3, #15
 802ebce:	f003 0301 	and.w	r3, r3, #1
 802ebd2:	2b00      	cmp	r3, #0
 802ebd4:	d007      	beq.n	802ebe6 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 802ebd6:	687b      	ldr	r3, [r7, #4]
 802ebd8:	681b      	ldr	r3, [r3, #0]
 802ebda:	681a      	ldr	r2, [r3, #0]
 802ebdc:	687b      	ldr	r3, [r7, #4]
 802ebde:	681b      	ldr	r3, [r3, #0]
 802ebe0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 802ebe4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 802ebe6:	687b      	ldr	r3, [r7, #4]
 802ebe8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802ebec:	b2db      	uxtb	r3, r3
 802ebee:	2b29      	cmp	r3, #41	; 0x29
 802ebf0:	d112      	bne.n	802ec18 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 802ebf2:	687b      	ldr	r3, [r7, #4]
 802ebf4:	2228      	movs	r2, #40	; 0x28
 802ebf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 802ebfa:	687b      	ldr	r3, [r7, #4]
 802ebfc:	2221      	movs	r2, #33	; 0x21
 802ebfe:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 802ec00:	2101      	movs	r1, #1
 802ec02:	6878      	ldr	r0, [r7, #4]
 802ec04:	f000 fbab 	bl	802f35e <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 802ec08:	687b      	ldr	r3, [r7, #4]
 802ec0a:	2200      	movs	r2, #0
 802ec0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 802ec10:	6878      	ldr	r0, [r7, #4]
 802ec12:	f7ff fdf8 	bl	802e806 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 802ec16:	e017      	b.n	802ec48 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 802ec18:	687b      	ldr	r3, [r7, #4]
 802ec1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802ec1e:	b2db      	uxtb	r3, r3
 802ec20:	2b2a      	cmp	r3, #42	; 0x2a
 802ec22:	d111      	bne.n	802ec48 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 802ec24:	687b      	ldr	r3, [r7, #4]
 802ec26:	2228      	movs	r2, #40	; 0x28
 802ec28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 802ec2c:	687b      	ldr	r3, [r7, #4]
 802ec2e:	2222      	movs	r2, #34	; 0x22
 802ec30:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 802ec32:	2102      	movs	r1, #2
 802ec34:	6878      	ldr	r0, [r7, #4]
 802ec36:	f000 fb92 	bl	802f35e <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 802ec3a:	687b      	ldr	r3, [r7, #4]
 802ec3c:	2200      	movs	r2, #0
 802ec3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 802ec42:	6878      	ldr	r0, [r7, #4]
 802ec44:	f7ff fde9 	bl	802e81a <HAL_I2C_SlaveRxCpltCallback>
}
 802ec48:	bf00      	nop
 802ec4a:	3710      	adds	r7, #16
 802ec4c:	46bd      	mov	sp, r7
 802ec4e:	bd80      	pop	{r7, pc}

0802ec50 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 802ec50:	b580      	push	{r7, lr}
 802ec52:	b086      	sub	sp, #24
 802ec54:	af00      	add	r7, sp, #0
 802ec56:	6078      	str	r0, [r7, #4]
 802ec58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 802ec5a:	687b      	ldr	r3, [r7, #4]
 802ec5c:	681b      	ldr	r3, [r3, #0]
 802ec5e:	681b      	ldr	r3, [r3, #0]
 802ec60:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 802ec62:	683b      	ldr	r3, [r7, #0]
 802ec64:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 802ec66:	687b      	ldr	r3, [r7, #4]
 802ec68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802ec6c:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 802ec6e:	687b      	ldr	r3, [r7, #4]
 802ec70:	681b      	ldr	r3, [r3, #0]
 802ec72:	2220      	movs	r2, #32
 802ec74:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 802ec76:	7bfb      	ldrb	r3, [r7, #15]
 802ec78:	2b21      	cmp	r3, #33	; 0x21
 802ec7a:	d002      	beq.n	802ec82 <I2C_ITSlaveCplt+0x32>
 802ec7c:	7bfb      	ldrb	r3, [r7, #15]
 802ec7e:	2b29      	cmp	r3, #41	; 0x29
 802ec80:	d108      	bne.n	802ec94 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 802ec82:	f248 0101 	movw	r1, #32769	; 0x8001
 802ec86:	6878      	ldr	r0, [r7, #4]
 802ec88:	f000 fb69 	bl	802f35e <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 802ec8c:	687b      	ldr	r3, [r7, #4]
 802ec8e:	2221      	movs	r2, #33	; 0x21
 802ec90:	631a      	str	r2, [r3, #48]	; 0x30
 802ec92:	e00d      	b.n	802ecb0 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 802ec94:	7bfb      	ldrb	r3, [r7, #15]
 802ec96:	2b22      	cmp	r3, #34	; 0x22
 802ec98:	d002      	beq.n	802eca0 <I2C_ITSlaveCplt+0x50>
 802ec9a:	7bfb      	ldrb	r3, [r7, #15]
 802ec9c:	2b2a      	cmp	r3, #42	; 0x2a
 802ec9e:	d107      	bne.n	802ecb0 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 802eca0:	f248 0102 	movw	r1, #32770	; 0x8002
 802eca4:	6878      	ldr	r0, [r7, #4]
 802eca6:	f000 fb5a 	bl	802f35e <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 802ecaa:	687b      	ldr	r3, [r7, #4]
 802ecac:	2222      	movs	r2, #34	; 0x22
 802ecae:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 802ecb0:	687b      	ldr	r3, [r7, #4]
 802ecb2:	681b      	ldr	r3, [r3, #0]
 802ecb4:	685a      	ldr	r2, [r3, #4]
 802ecb6:	687b      	ldr	r3, [r7, #4]
 802ecb8:	681b      	ldr	r3, [r3, #0]
 802ecba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 802ecbe:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 802ecc0:	687b      	ldr	r3, [r7, #4]
 802ecc2:	681b      	ldr	r3, [r3, #0]
 802ecc4:	6859      	ldr	r1, [r3, #4]
 802ecc6:	687b      	ldr	r3, [r7, #4]
 802ecc8:	681a      	ldr	r2, [r3, #0]
 802ecca:	4b80      	ldr	r3, [pc, #512]	; (802eecc <I2C_ITSlaveCplt+0x27c>)
 802eccc:	400b      	ands	r3, r1
 802ecce:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 802ecd0:	6878      	ldr	r0, [r7, #4]
 802ecd2:	f000 fb02 	bl	802f2da <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 802ecd6:	693b      	ldr	r3, [r7, #16]
 802ecd8:	0b9b      	lsrs	r3, r3, #14
 802ecda:	f003 0301 	and.w	r3, r3, #1
 802ecde:	2b00      	cmp	r3, #0
 802ece0:	d07a      	beq.n	802edd8 <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 802ece2:	687b      	ldr	r3, [r7, #4]
 802ece4:	681b      	ldr	r3, [r3, #0]
 802ece6:	681a      	ldr	r2, [r3, #0]
 802ece8:	687b      	ldr	r3, [r7, #4]
 802ecea:	681b      	ldr	r3, [r3, #0]
 802ecec:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 802ecf0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 802ecf2:	687b      	ldr	r3, [r7, #4]
 802ecf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ecf6:	2b00      	cmp	r3, #0
 802ecf8:	f000 8111 	beq.w	802ef1e <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 802ecfc:	687b      	ldr	r3, [r7, #4]
 802ecfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ed00:	681b      	ldr	r3, [r3, #0]
 802ed02:	4a73      	ldr	r2, [pc, #460]	; (802eed0 <I2C_ITSlaveCplt+0x280>)
 802ed04:	4293      	cmp	r3, r2
 802ed06:	d059      	beq.n	802edbc <I2C_ITSlaveCplt+0x16c>
 802ed08:	687b      	ldr	r3, [r7, #4]
 802ed0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ed0c:	681b      	ldr	r3, [r3, #0]
 802ed0e:	4a71      	ldr	r2, [pc, #452]	; (802eed4 <I2C_ITSlaveCplt+0x284>)
 802ed10:	4293      	cmp	r3, r2
 802ed12:	d053      	beq.n	802edbc <I2C_ITSlaveCplt+0x16c>
 802ed14:	687b      	ldr	r3, [r7, #4]
 802ed16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ed18:	681b      	ldr	r3, [r3, #0]
 802ed1a:	4a6f      	ldr	r2, [pc, #444]	; (802eed8 <I2C_ITSlaveCplt+0x288>)
 802ed1c:	4293      	cmp	r3, r2
 802ed1e:	d04d      	beq.n	802edbc <I2C_ITSlaveCplt+0x16c>
 802ed20:	687b      	ldr	r3, [r7, #4]
 802ed22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ed24:	681b      	ldr	r3, [r3, #0]
 802ed26:	4a6d      	ldr	r2, [pc, #436]	; (802eedc <I2C_ITSlaveCplt+0x28c>)
 802ed28:	4293      	cmp	r3, r2
 802ed2a:	d047      	beq.n	802edbc <I2C_ITSlaveCplt+0x16c>
 802ed2c:	687b      	ldr	r3, [r7, #4]
 802ed2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ed30:	681b      	ldr	r3, [r3, #0]
 802ed32:	4a6b      	ldr	r2, [pc, #428]	; (802eee0 <I2C_ITSlaveCplt+0x290>)
 802ed34:	4293      	cmp	r3, r2
 802ed36:	d041      	beq.n	802edbc <I2C_ITSlaveCplt+0x16c>
 802ed38:	687b      	ldr	r3, [r7, #4]
 802ed3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ed3c:	681b      	ldr	r3, [r3, #0]
 802ed3e:	4a69      	ldr	r2, [pc, #420]	; (802eee4 <I2C_ITSlaveCplt+0x294>)
 802ed40:	4293      	cmp	r3, r2
 802ed42:	d03b      	beq.n	802edbc <I2C_ITSlaveCplt+0x16c>
 802ed44:	687b      	ldr	r3, [r7, #4]
 802ed46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ed48:	681b      	ldr	r3, [r3, #0]
 802ed4a:	4a67      	ldr	r2, [pc, #412]	; (802eee8 <I2C_ITSlaveCplt+0x298>)
 802ed4c:	4293      	cmp	r3, r2
 802ed4e:	d035      	beq.n	802edbc <I2C_ITSlaveCplt+0x16c>
 802ed50:	687b      	ldr	r3, [r7, #4]
 802ed52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ed54:	681b      	ldr	r3, [r3, #0]
 802ed56:	4a65      	ldr	r2, [pc, #404]	; (802eeec <I2C_ITSlaveCplt+0x29c>)
 802ed58:	4293      	cmp	r3, r2
 802ed5a:	d02f      	beq.n	802edbc <I2C_ITSlaveCplt+0x16c>
 802ed5c:	687b      	ldr	r3, [r7, #4]
 802ed5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ed60:	681b      	ldr	r3, [r3, #0]
 802ed62:	4a63      	ldr	r2, [pc, #396]	; (802eef0 <I2C_ITSlaveCplt+0x2a0>)
 802ed64:	4293      	cmp	r3, r2
 802ed66:	d029      	beq.n	802edbc <I2C_ITSlaveCplt+0x16c>
 802ed68:	687b      	ldr	r3, [r7, #4]
 802ed6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ed6c:	681b      	ldr	r3, [r3, #0]
 802ed6e:	4a61      	ldr	r2, [pc, #388]	; (802eef4 <I2C_ITSlaveCplt+0x2a4>)
 802ed70:	4293      	cmp	r3, r2
 802ed72:	d023      	beq.n	802edbc <I2C_ITSlaveCplt+0x16c>
 802ed74:	687b      	ldr	r3, [r7, #4]
 802ed76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ed78:	681b      	ldr	r3, [r3, #0]
 802ed7a:	4a5f      	ldr	r2, [pc, #380]	; (802eef8 <I2C_ITSlaveCplt+0x2a8>)
 802ed7c:	4293      	cmp	r3, r2
 802ed7e:	d01d      	beq.n	802edbc <I2C_ITSlaveCplt+0x16c>
 802ed80:	687b      	ldr	r3, [r7, #4]
 802ed82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ed84:	681b      	ldr	r3, [r3, #0]
 802ed86:	4a5d      	ldr	r2, [pc, #372]	; (802eefc <I2C_ITSlaveCplt+0x2ac>)
 802ed88:	4293      	cmp	r3, r2
 802ed8a:	d017      	beq.n	802edbc <I2C_ITSlaveCplt+0x16c>
 802ed8c:	687b      	ldr	r3, [r7, #4]
 802ed8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ed90:	681b      	ldr	r3, [r3, #0]
 802ed92:	4a5b      	ldr	r2, [pc, #364]	; (802ef00 <I2C_ITSlaveCplt+0x2b0>)
 802ed94:	4293      	cmp	r3, r2
 802ed96:	d011      	beq.n	802edbc <I2C_ITSlaveCplt+0x16c>
 802ed98:	687b      	ldr	r3, [r7, #4]
 802ed9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ed9c:	681b      	ldr	r3, [r3, #0]
 802ed9e:	4a59      	ldr	r2, [pc, #356]	; (802ef04 <I2C_ITSlaveCplt+0x2b4>)
 802eda0:	4293      	cmp	r3, r2
 802eda2:	d00b      	beq.n	802edbc <I2C_ITSlaveCplt+0x16c>
 802eda4:	687b      	ldr	r3, [r7, #4]
 802eda6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802eda8:	681b      	ldr	r3, [r3, #0]
 802edaa:	4a57      	ldr	r2, [pc, #348]	; (802ef08 <I2C_ITSlaveCplt+0x2b8>)
 802edac:	4293      	cmp	r3, r2
 802edae:	d005      	beq.n	802edbc <I2C_ITSlaveCplt+0x16c>
 802edb0:	687b      	ldr	r3, [r7, #4]
 802edb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802edb4:	681b      	ldr	r3, [r3, #0]
 802edb6:	4a55      	ldr	r2, [pc, #340]	; (802ef0c <I2C_ITSlaveCplt+0x2bc>)
 802edb8:	4293      	cmp	r3, r2
 802edba:	d105      	bne.n	802edc8 <I2C_ITSlaveCplt+0x178>
 802edbc:	687b      	ldr	r3, [r7, #4]
 802edbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802edc0:	681b      	ldr	r3, [r3, #0]
 802edc2:	685b      	ldr	r3, [r3, #4]
 802edc4:	b29b      	uxth	r3, r3
 802edc6:	e004      	b.n	802edd2 <I2C_ITSlaveCplt+0x182>
 802edc8:	687b      	ldr	r3, [r7, #4]
 802edca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802edcc:	681b      	ldr	r3, [r3, #0]
 802edce:	685b      	ldr	r3, [r3, #4]
 802edd0:	b29b      	uxth	r3, r3
 802edd2:	687a      	ldr	r2, [r7, #4]
 802edd4:	8553      	strh	r3, [r2, #42]	; 0x2a
 802edd6:	e0a2      	b.n	802ef1e <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 802edd8:	693b      	ldr	r3, [r7, #16]
 802edda:	0bdb      	lsrs	r3, r3, #15
 802eddc:	f003 0301 	and.w	r3, r3, #1
 802ede0:	2b00      	cmp	r3, #0
 802ede2:	f000 809c 	beq.w	802ef1e <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 802ede6:	687b      	ldr	r3, [r7, #4]
 802ede8:	681b      	ldr	r3, [r3, #0]
 802edea:	681a      	ldr	r2, [r3, #0]
 802edec:	687b      	ldr	r3, [r7, #4]
 802edee:	681b      	ldr	r3, [r3, #0]
 802edf0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 802edf4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 802edf6:	687b      	ldr	r3, [r7, #4]
 802edf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802edfa:	2b00      	cmp	r3, #0
 802edfc:	f000 808f 	beq.w	802ef1e <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 802ee00:	687b      	ldr	r3, [r7, #4]
 802ee02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802ee04:	681b      	ldr	r3, [r3, #0]
 802ee06:	4a32      	ldr	r2, [pc, #200]	; (802eed0 <I2C_ITSlaveCplt+0x280>)
 802ee08:	4293      	cmp	r3, r2
 802ee0a:	d059      	beq.n	802eec0 <I2C_ITSlaveCplt+0x270>
 802ee0c:	687b      	ldr	r3, [r7, #4]
 802ee0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802ee10:	681b      	ldr	r3, [r3, #0]
 802ee12:	4a30      	ldr	r2, [pc, #192]	; (802eed4 <I2C_ITSlaveCplt+0x284>)
 802ee14:	4293      	cmp	r3, r2
 802ee16:	d053      	beq.n	802eec0 <I2C_ITSlaveCplt+0x270>
 802ee18:	687b      	ldr	r3, [r7, #4]
 802ee1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802ee1c:	681b      	ldr	r3, [r3, #0]
 802ee1e:	4a2e      	ldr	r2, [pc, #184]	; (802eed8 <I2C_ITSlaveCplt+0x288>)
 802ee20:	4293      	cmp	r3, r2
 802ee22:	d04d      	beq.n	802eec0 <I2C_ITSlaveCplt+0x270>
 802ee24:	687b      	ldr	r3, [r7, #4]
 802ee26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802ee28:	681b      	ldr	r3, [r3, #0]
 802ee2a:	4a2c      	ldr	r2, [pc, #176]	; (802eedc <I2C_ITSlaveCplt+0x28c>)
 802ee2c:	4293      	cmp	r3, r2
 802ee2e:	d047      	beq.n	802eec0 <I2C_ITSlaveCplt+0x270>
 802ee30:	687b      	ldr	r3, [r7, #4]
 802ee32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802ee34:	681b      	ldr	r3, [r3, #0]
 802ee36:	4a2a      	ldr	r2, [pc, #168]	; (802eee0 <I2C_ITSlaveCplt+0x290>)
 802ee38:	4293      	cmp	r3, r2
 802ee3a:	d041      	beq.n	802eec0 <I2C_ITSlaveCplt+0x270>
 802ee3c:	687b      	ldr	r3, [r7, #4]
 802ee3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802ee40:	681b      	ldr	r3, [r3, #0]
 802ee42:	4a28      	ldr	r2, [pc, #160]	; (802eee4 <I2C_ITSlaveCplt+0x294>)
 802ee44:	4293      	cmp	r3, r2
 802ee46:	d03b      	beq.n	802eec0 <I2C_ITSlaveCplt+0x270>
 802ee48:	687b      	ldr	r3, [r7, #4]
 802ee4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802ee4c:	681b      	ldr	r3, [r3, #0]
 802ee4e:	4a26      	ldr	r2, [pc, #152]	; (802eee8 <I2C_ITSlaveCplt+0x298>)
 802ee50:	4293      	cmp	r3, r2
 802ee52:	d035      	beq.n	802eec0 <I2C_ITSlaveCplt+0x270>
 802ee54:	687b      	ldr	r3, [r7, #4]
 802ee56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802ee58:	681b      	ldr	r3, [r3, #0]
 802ee5a:	4a24      	ldr	r2, [pc, #144]	; (802eeec <I2C_ITSlaveCplt+0x29c>)
 802ee5c:	4293      	cmp	r3, r2
 802ee5e:	d02f      	beq.n	802eec0 <I2C_ITSlaveCplt+0x270>
 802ee60:	687b      	ldr	r3, [r7, #4]
 802ee62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802ee64:	681b      	ldr	r3, [r3, #0]
 802ee66:	4a22      	ldr	r2, [pc, #136]	; (802eef0 <I2C_ITSlaveCplt+0x2a0>)
 802ee68:	4293      	cmp	r3, r2
 802ee6a:	d029      	beq.n	802eec0 <I2C_ITSlaveCplt+0x270>
 802ee6c:	687b      	ldr	r3, [r7, #4]
 802ee6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802ee70:	681b      	ldr	r3, [r3, #0]
 802ee72:	4a20      	ldr	r2, [pc, #128]	; (802eef4 <I2C_ITSlaveCplt+0x2a4>)
 802ee74:	4293      	cmp	r3, r2
 802ee76:	d023      	beq.n	802eec0 <I2C_ITSlaveCplt+0x270>
 802ee78:	687b      	ldr	r3, [r7, #4]
 802ee7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802ee7c:	681b      	ldr	r3, [r3, #0]
 802ee7e:	4a1e      	ldr	r2, [pc, #120]	; (802eef8 <I2C_ITSlaveCplt+0x2a8>)
 802ee80:	4293      	cmp	r3, r2
 802ee82:	d01d      	beq.n	802eec0 <I2C_ITSlaveCplt+0x270>
 802ee84:	687b      	ldr	r3, [r7, #4]
 802ee86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802ee88:	681b      	ldr	r3, [r3, #0]
 802ee8a:	4a1c      	ldr	r2, [pc, #112]	; (802eefc <I2C_ITSlaveCplt+0x2ac>)
 802ee8c:	4293      	cmp	r3, r2
 802ee8e:	d017      	beq.n	802eec0 <I2C_ITSlaveCplt+0x270>
 802ee90:	687b      	ldr	r3, [r7, #4]
 802ee92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802ee94:	681b      	ldr	r3, [r3, #0]
 802ee96:	4a1a      	ldr	r2, [pc, #104]	; (802ef00 <I2C_ITSlaveCplt+0x2b0>)
 802ee98:	4293      	cmp	r3, r2
 802ee9a:	d011      	beq.n	802eec0 <I2C_ITSlaveCplt+0x270>
 802ee9c:	687b      	ldr	r3, [r7, #4]
 802ee9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802eea0:	681b      	ldr	r3, [r3, #0]
 802eea2:	4a18      	ldr	r2, [pc, #96]	; (802ef04 <I2C_ITSlaveCplt+0x2b4>)
 802eea4:	4293      	cmp	r3, r2
 802eea6:	d00b      	beq.n	802eec0 <I2C_ITSlaveCplt+0x270>
 802eea8:	687b      	ldr	r3, [r7, #4]
 802eeaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802eeac:	681b      	ldr	r3, [r3, #0]
 802eeae:	4a16      	ldr	r2, [pc, #88]	; (802ef08 <I2C_ITSlaveCplt+0x2b8>)
 802eeb0:	4293      	cmp	r3, r2
 802eeb2:	d005      	beq.n	802eec0 <I2C_ITSlaveCplt+0x270>
 802eeb4:	687b      	ldr	r3, [r7, #4]
 802eeb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802eeb8:	681b      	ldr	r3, [r3, #0]
 802eeba:	4a14      	ldr	r2, [pc, #80]	; (802ef0c <I2C_ITSlaveCplt+0x2bc>)
 802eebc:	4293      	cmp	r3, r2
 802eebe:	d127      	bne.n	802ef10 <I2C_ITSlaveCplt+0x2c0>
 802eec0:	687b      	ldr	r3, [r7, #4]
 802eec2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802eec4:	681b      	ldr	r3, [r3, #0]
 802eec6:	685b      	ldr	r3, [r3, #4]
 802eec8:	b29b      	uxth	r3, r3
 802eeca:	e026      	b.n	802ef1a <I2C_ITSlaveCplt+0x2ca>
 802eecc:	fe00e800 	.word	0xfe00e800
 802eed0:	40020010 	.word	0x40020010
 802eed4:	40020028 	.word	0x40020028
 802eed8:	40020040 	.word	0x40020040
 802eedc:	40020058 	.word	0x40020058
 802eee0:	40020070 	.word	0x40020070
 802eee4:	40020088 	.word	0x40020088
 802eee8:	400200a0 	.word	0x400200a0
 802eeec:	400200b8 	.word	0x400200b8
 802eef0:	40020410 	.word	0x40020410
 802eef4:	40020428 	.word	0x40020428
 802eef8:	40020440 	.word	0x40020440
 802eefc:	40020458 	.word	0x40020458
 802ef00:	40020470 	.word	0x40020470
 802ef04:	40020488 	.word	0x40020488
 802ef08:	400204a0 	.word	0x400204a0
 802ef0c:	400204b8 	.word	0x400204b8
 802ef10:	687b      	ldr	r3, [r7, #4]
 802ef12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802ef14:	681b      	ldr	r3, [r3, #0]
 802ef16:	685b      	ldr	r3, [r3, #4]
 802ef18:	b29b      	uxth	r3, r3
 802ef1a:	687a      	ldr	r2, [r7, #4]
 802ef1c:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 802ef1e:	697b      	ldr	r3, [r7, #20]
 802ef20:	089b      	lsrs	r3, r3, #2
 802ef22:	f003 0301 	and.w	r3, r3, #1
 802ef26:	2b00      	cmp	r3, #0
 802ef28:	d020      	beq.n	802ef6c <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 802ef2a:	697b      	ldr	r3, [r7, #20]
 802ef2c:	f023 0304 	bic.w	r3, r3, #4
 802ef30:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 802ef32:	687b      	ldr	r3, [r7, #4]
 802ef34:	681b      	ldr	r3, [r3, #0]
 802ef36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 802ef38:	687b      	ldr	r3, [r7, #4]
 802ef3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802ef3c:	b2d2      	uxtb	r2, r2
 802ef3e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 802ef40:	687b      	ldr	r3, [r7, #4]
 802ef42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802ef44:	1c5a      	adds	r2, r3, #1
 802ef46:	687b      	ldr	r3, [r7, #4]
 802ef48:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 802ef4a:	687b      	ldr	r3, [r7, #4]
 802ef4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802ef4e:	2b00      	cmp	r3, #0
 802ef50:	d00c      	beq.n	802ef6c <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 802ef52:	687b      	ldr	r3, [r7, #4]
 802ef54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802ef56:	3b01      	subs	r3, #1
 802ef58:	b29a      	uxth	r2, r3
 802ef5a:	687b      	ldr	r3, [r7, #4]
 802ef5c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 802ef5e:	687b      	ldr	r3, [r7, #4]
 802ef60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802ef62:	b29b      	uxth	r3, r3
 802ef64:	3b01      	subs	r3, #1
 802ef66:	b29a      	uxth	r2, r3
 802ef68:	687b      	ldr	r3, [r7, #4]
 802ef6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 802ef6c:	687b      	ldr	r3, [r7, #4]
 802ef6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802ef70:	b29b      	uxth	r3, r3
 802ef72:	2b00      	cmp	r3, #0
 802ef74:	d005      	beq.n	802ef82 <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 802ef76:	687b      	ldr	r3, [r7, #4]
 802ef78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802ef7a:	f043 0204 	orr.w	r2, r3, #4
 802ef7e:	687b      	ldr	r3, [r7, #4]
 802ef80:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 802ef82:	687b      	ldr	r3, [r7, #4]
 802ef84:	2200      	movs	r2, #0
 802ef86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 802ef8a:	687b      	ldr	r3, [r7, #4]
 802ef8c:	2200      	movs	r2, #0
 802ef8e:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 802ef90:	687b      	ldr	r3, [r7, #4]
 802ef92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802ef94:	2b00      	cmp	r3, #0
 802ef96:	d010      	beq.n	802efba <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 802ef98:	687b      	ldr	r3, [r7, #4]
 802ef9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802ef9c:	4619      	mov	r1, r3
 802ef9e:	6878      	ldr	r0, [r7, #4]
 802efa0:	f000 f8a4 	bl	802f0ec <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 802efa4:	687b      	ldr	r3, [r7, #4]
 802efa6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802efaa:	b2db      	uxtb	r3, r3
 802efac:	2b28      	cmp	r3, #40	; 0x28
 802efae:	d141      	bne.n	802f034 <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 802efb0:	6979      	ldr	r1, [r7, #20]
 802efb2:	6878      	ldr	r0, [r7, #4]
 802efb4:	f000 f844 	bl	802f040 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 802efb8:	e03c      	b.n	802f034 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 802efba:	687b      	ldr	r3, [r7, #4]
 802efbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802efbe:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 802efc2:	d014      	beq.n	802efee <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 802efc4:	6878      	ldr	r0, [r7, #4]
 802efc6:	f7ff fde5 	bl	802eb94 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 802efca:	687b      	ldr	r3, [r7, #4]
 802efcc:	4a1b      	ldr	r2, [pc, #108]	; (802f03c <I2C_ITSlaveCplt+0x3ec>)
 802efce:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 802efd0:	687b      	ldr	r3, [r7, #4]
 802efd2:	2220      	movs	r2, #32
 802efd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 802efd8:	687b      	ldr	r3, [r7, #4]
 802efda:	2200      	movs	r2, #0
 802efdc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 802efde:	687b      	ldr	r3, [r7, #4]
 802efe0:	2200      	movs	r2, #0
 802efe2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 802efe6:	6878      	ldr	r0, [r7, #4]
 802efe8:	f7ff fc2f 	bl	802e84a <HAL_I2C_ListenCpltCallback>
}
 802efec:	e022      	b.n	802f034 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 802efee:	687b      	ldr	r3, [r7, #4]
 802eff0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802eff4:	b2db      	uxtb	r3, r3
 802eff6:	2b22      	cmp	r3, #34	; 0x22
 802eff8:	d10e      	bne.n	802f018 <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 802effa:	687b      	ldr	r3, [r7, #4]
 802effc:	2220      	movs	r2, #32
 802effe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 802f002:	687b      	ldr	r3, [r7, #4]
 802f004:	2200      	movs	r2, #0
 802f006:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 802f008:	687b      	ldr	r3, [r7, #4]
 802f00a:	2200      	movs	r2, #0
 802f00c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 802f010:	6878      	ldr	r0, [r7, #4]
 802f012:	f7ff fc02 	bl	802e81a <HAL_I2C_SlaveRxCpltCallback>
}
 802f016:	e00d      	b.n	802f034 <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 802f018:	687b      	ldr	r3, [r7, #4]
 802f01a:	2220      	movs	r2, #32
 802f01c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 802f020:	687b      	ldr	r3, [r7, #4]
 802f022:	2200      	movs	r2, #0
 802f024:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 802f026:	687b      	ldr	r3, [r7, #4]
 802f028:	2200      	movs	r2, #0
 802f02a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 802f02e:	6878      	ldr	r0, [r7, #4]
 802f030:	f7ff fbe9 	bl	802e806 <HAL_I2C_SlaveTxCpltCallback>
}
 802f034:	bf00      	nop
 802f036:	3718      	adds	r7, #24
 802f038:	46bd      	mov	sp, r7
 802f03a:	bd80      	pop	{r7, pc}
 802f03c:	ffff0000 	.word	0xffff0000

0802f040 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 802f040:	b580      	push	{r7, lr}
 802f042:	b082      	sub	sp, #8
 802f044:	af00      	add	r7, sp, #0
 802f046:	6078      	str	r0, [r7, #4]
 802f048:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 802f04a:	687b      	ldr	r3, [r7, #4]
 802f04c:	4a26      	ldr	r2, [pc, #152]	; (802f0e8 <I2C_ITListenCplt+0xa8>)
 802f04e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 802f050:	687b      	ldr	r3, [r7, #4]
 802f052:	2200      	movs	r2, #0
 802f054:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 802f056:	687b      	ldr	r3, [r7, #4]
 802f058:	2220      	movs	r2, #32
 802f05a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 802f05e:	687b      	ldr	r3, [r7, #4]
 802f060:	2200      	movs	r2, #0
 802f062:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 802f066:	687b      	ldr	r3, [r7, #4]
 802f068:	2200      	movs	r2, #0
 802f06a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 802f06c:	683b      	ldr	r3, [r7, #0]
 802f06e:	089b      	lsrs	r3, r3, #2
 802f070:	f003 0301 	and.w	r3, r3, #1
 802f074:	2b00      	cmp	r3, #0
 802f076:	d022      	beq.n	802f0be <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 802f078:	687b      	ldr	r3, [r7, #4]
 802f07a:	681b      	ldr	r3, [r3, #0]
 802f07c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 802f07e:	687b      	ldr	r3, [r7, #4]
 802f080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802f082:	b2d2      	uxtb	r2, r2
 802f084:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 802f086:	687b      	ldr	r3, [r7, #4]
 802f088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802f08a:	1c5a      	adds	r2, r3, #1
 802f08c:	687b      	ldr	r3, [r7, #4]
 802f08e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 802f090:	687b      	ldr	r3, [r7, #4]
 802f092:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802f094:	2b00      	cmp	r3, #0
 802f096:	d012      	beq.n	802f0be <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 802f098:	687b      	ldr	r3, [r7, #4]
 802f09a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802f09c:	3b01      	subs	r3, #1
 802f09e:	b29a      	uxth	r2, r3
 802f0a0:	687b      	ldr	r3, [r7, #4]
 802f0a2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 802f0a4:	687b      	ldr	r3, [r7, #4]
 802f0a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802f0a8:	b29b      	uxth	r3, r3
 802f0aa:	3b01      	subs	r3, #1
 802f0ac:	b29a      	uxth	r2, r3
 802f0ae:	687b      	ldr	r3, [r7, #4]
 802f0b0:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 802f0b2:	687b      	ldr	r3, [r7, #4]
 802f0b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802f0b6:	f043 0204 	orr.w	r2, r3, #4
 802f0ba:	687b      	ldr	r3, [r7, #4]
 802f0bc:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 802f0be:	f248 0103 	movw	r1, #32771	; 0x8003
 802f0c2:	6878      	ldr	r0, [r7, #4]
 802f0c4:	f000 f94b 	bl	802f35e <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 802f0c8:	687b      	ldr	r3, [r7, #4]
 802f0ca:	681b      	ldr	r3, [r3, #0]
 802f0cc:	2210      	movs	r2, #16
 802f0ce:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 802f0d0:	687b      	ldr	r3, [r7, #4]
 802f0d2:	2200      	movs	r2, #0
 802f0d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 802f0d8:	6878      	ldr	r0, [r7, #4]
 802f0da:	f7ff fbb6 	bl	802e84a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 802f0de:	bf00      	nop
 802f0e0:	3708      	adds	r7, #8
 802f0e2:	46bd      	mov	sp, r7
 802f0e4:	bd80      	pop	{r7, pc}
 802f0e6:	bf00      	nop
 802f0e8:	ffff0000 	.word	0xffff0000

0802f0ec <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 802f0ec:	b580      	push	{r7, lr}
 802f0ee:	b084      	sub	sp, #16
 802f0f0:	af00      	add	r7, sp, #0
 802f0f2:	6078      	str	r0, [r7, #4]
 802f0f4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 802f0f6:	687b      	ldr	r3, [r7, #4]
 802f0f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802f0fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 802f0fe:	687b      	ldr	r3, [r7, #4]
 802f100:	2200      	movs	r2, #0
 802f102:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 802f106:	687b      	ldr	r3, [r7, #4]
 802f108:	4a5d      	ldr	r2, [pc, #372]	; (802f280 <I2C_ITError+0x194>)
 802f10a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 802f10c:	687b      	ldr	r3, [r7, #4]
 802f10e:	2200      	movs	r2, #0
 802f110:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 802f112:	687b      	ldr	r3, [r7, #4]
 802f114:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 802f116:	683b      	ldr	r3, [r7, #0]
 802f118:	431a      	orrs	r2, r3
 802f11a:	687b      	ldr	r3, [r7, #4]
 802f11c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 802f11e:	7bfb      	ldrb	r3, [r7, #15]
 802f120:	2b28      	cmp	r3, #40	; 0x28
 802f122:	d005      	beq.n	802f130 <I2C_ITError+0x44>
 802f124:	7bfb      	ldrb	r3, [r7, #15]
 802f126:	2b29      	cmp	r3, #41	; 0x29
 802f128:	d002      	beq.n	802f130 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 802f12a:	7bfb      	ldrb	r3, [r7, #15]
 802f12c:	2b2a      	cmp	r3, #42	; 0x2a
 802f12e:	d10b      	bne.n	802f148 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 802f130:	2103      	movs	r1, #3
 802f132:	6878      	ldr	r0, [r7, #4]
 802f134:	f000 f913 	bl	802f35e <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 802f138:	687b      	ldr	r3, [r7, #4]
 802f13a:	2228      	movs	r2, #40	; 0x28
 802f13c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 802f140:	687b      	ldr	r3, [r7, #4]
 802f142:	4a50      	ldr	r2, [pc, #320]	; (802f284 <I2C_ITError+0x198>)
 802f144:	635a      	str	r2, [r3, #52]	; 0x34
 802f146:	e011      	b.n	802f16c <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 802f148:	f248 0103 	movw	r1, #32771	; 0x8003
 802f14c:	6878      	ldr	r0, [r7, #4]
 802f14e:	f000 f906 	bl	802f35e <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 802f152:	687b      	ldr	r3, [r7, #4]
 802f154:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802f158:	b2db      	uxtb	r3, r3
 802f15a:	2b60      	cmp	r3, #96	; 0x60
 802f15c:	d003      	beq.n	802f166 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 802f15e:	687b      	ldr	r3, [r7, #4]
 802f160:	2220      	movs	r2, #32
 802f162:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 802f166:	687b      	ldr	r3, [r7, #4]
 802f168:	2200      	movs	r2, #0
 802f16a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 802f16c:	687b      	ldr	r3, [r7, #4]
 802f16e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802f170:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 802f172:	687b      	ldr	r3, [r7, #4]
 802f174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802f176:	2b00      	cmp	r3, #0
 802f178:	d039      	beq.n	802f1ee <I2C_ITError+0x102>
 802f17a:	68bb      	ldr	r3, [r7, #8]
 802f17c:	2b11      	cmp	r3, #17
 802f17e:	d002      	beq.n	802f186 <I2C_ITError+0x9a>
 802f180:	68bb      	ldr	r3, [r7, #8]
 802f182:	2b21      	cmp	r3, #33	; 0x21
 802f184:	d133      	bne.n	802f1ee <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 802f186:	687b      	ldr	r3, [r7, #4]
 802f188:	681b      	ldr	r3, [r3, #0]
 802f18a:	681b      	ldr	r3, [r3, #0]
 802f18c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 802f190:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 802f194:	d107      	bne.n	802f1a6 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 802f196:	687b      	ldr	r3, [r7, #4]
 802f198:	681b      	ldr	r3, [r3, #0]
 802f19a:	681a      	ldr	r2, [r3, #0]
 802f19c:	687b      	ldr	r3, [r7, #4]
 802f19e:	681b      	ldr	r3, [r3, #0]
 802f1a0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 802f1a4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 802f1a6:	687b      	ldr	r3, [r7, #4]
 802f1a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802f1aa:	4618      	mov	r0, r3
 802f1ac:	f7fe fc54 	bl	802da58 <HAL_DMA_GetState>
 802f1b0:	4603      	mov	r3, r0
 802f1b2:	2b01      	cmp	r3, #1
 802f1b4:	d017      	beq.n	802f1e6 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 802f1b6:	687b      	ldr	r3, [r7, #4]
 802f1b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802f1ba:	4a33      	ldr	r2, [pc, #204]	; (802f288 <I2C_ITError+0x19c>)
 802f1bc:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 802f1be:	687b      	ldr	r3, [r7, #4]
 802f1c0:	2200      	movs	r2, #0
 802f1c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 802f1c6:	687b      	ldr	r3, [r7, #4]
 802f1c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802f1ca:	4618      	mov	r0, r3
 802f1cc:	f7fd fad4 	bl	802c778 <HAL_DMA_Abort_IT>
 802f1d0:	4603      	mov	r3, r0
 802f1d2:	2b00      	cmp	r3, #0
 802f1d4:	d04d      	beq.n	802f272 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 802f1d6:	687b      	ldr	r3, [r7, #4]
 802f1d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802f1da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802f1dc:	687a      	ldr	r2, [r7, #4]
 802f1de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 802f1e0:	4610      	mov	r0, r2
 802f1e2:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 802f1e4:	e045      	b.n	802f272 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 802f1e6:	6878      	ldr	r0, [r7, #4]
 802f1e8:	f000 f850 	bl	802f28c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 802f1ec:	e041      	b.n	802f272 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 802f1ee:	687b      	ldr	r3, [r7, #4]
 802f1f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802f1f2:	2b00      	cmp	r3, #0
 802f1f4:	d039      	beq.n	802f26a <I2C_ITError+0x17e>
 802f1f6:	68bb      	ldr	r3, [r7, #8]
 802f1f8:	2b12      	cmp	r3, #18
 802f1fa:	d002      	beq.n	802f202 <I2C_ITError+0x116>
 802f1fc:	68bb      	ldr	r3, [r7, #8]
 802f1fe:	2b22      	cmp	r3, #34	; 0x22
 802f200:	d133      	bne.n	802f26a <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 802f202:	687b      	ldr	r3, [r7, #4]
 802f204:	681b      	ldr	r3, [r3, #0]
 802f206:	681b      	ldr	r3, [r3, #0]
 802f208:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 802f20c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 802f210:	d107      	bne.n	802f222 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 802f212:	687b      	ldr	r3, [r7, #4]
 802f214:	681b      	ldr	r3, [r3, #0]
 802f216:	681a      	ldr	r2, [r3, #0]
 802f218:	687b      	ldr	r3, [r7, #4]
 802f21a:	681b      	ldr	r3, [r3, #0]
 802f21c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 802f220:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 802f222:	687b      	ldr	r3, [r7, #4]
 802f224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802f226:	4618      	mov	r0, r3
 802f228:	f7fe fc16 	bl	802da58 <HAL_DMA_GetState>
 802f22c:	4603      	mov	r3, r0
 802f22e:	2b01      	cmp	r3, #1
 802f230:	d017      	beq.n	802f262 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 802f232:	687b      	ldr	r3, [r7, #4]
 802f234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802f236:	4a14      	ldr	r2, [pc, #80]	; (802f288 <I2C_ITError+0x19c>)
 802f238:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 802f23a:	687b      	ldr	r3, [r7, #4]
 802f23c:	2200      	movs	r2, #0
 802f23e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 802f242:	687b      	ldr	r3, [r7, #4]
 802f244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802f246:	4618      	mov	r0, r3
 802f248:	f7fd fa96 	bl	802c778 <HAL_DMA_Abort_IT>
 802f24c:	4603      	mov	r3, r0
 802f24e:	2b00      	cmp	r3, #0
 802f250:	d011      	beq.n	802f276 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 802f252:	687b      	ldr	r3, [r7, #4]
 802f254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802f256:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802f258:	687a      	ldr	r2, [r7, #4]
 802f25a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 802f25c:	4610      	mov	r0, r2
 802f25e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 802f260:	e009      	b.n	802f276 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 802f262:	6878      	ldr	r0, [r7, #4]
 802f264:	f000 f812 	bl	802f28c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 802f268:	e005      	b.n	802f276 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 802f26a:	6878      	ldr	r0, [r7, #4]
 802f26c:	f000 f80e 	bl	802f28c <I2C_TreatErrorCallback>
  }
}
 802f270:	e002      	b.n	802f278 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 802f272:	bf00      	nop
 802f274:	e000      	b.n	802f278 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 802f276:	bf00      	nop
}
 802f278:	bf00      	nop
 802f27a:	3710      	adds	r7, #16
 802f27c:	46bd      	mov	sp, r7
 802f27e:	bd80      	pop	{r7, pc}
 802f280:	ffff0000 	.word	0xffff0000
 802f284:	0802e887 	.word	0x0802e887
 802f288:	0802f323 	.word	0x0802f323

0802f28c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 802f28c:	b580      	push	{r7, lr}
 802f28e:	b082      	sub	sp, #8
 802f290:	af00      	add	r7, sp, #0
 802f292:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 802f294:	687b      	ldr	r3, [r7, #4]
 802f296:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802f29a:	b2db      	uxtb	r3, r3
 802f29c:	2b60      	cmp	r3, #96	; 0x60
 802f29e:	d10e      	bne.n	802f2be <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 802f2a0:	687b      	ldr	r3, [r7, #4]
 802f2a2:	2220      	movs	r2, #32
 802f2a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 802f2a8:	687b      	ldr	r3, [r7, #4]
 802f2aa:	2200      	movs	r2, #0
 802f2ac:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 802f2ae:	687b      	ldr	r3, [r7, #4]
 802f2b0:	2200      	movs	r2, #0
 802f2b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 802f2b6:	6878      	ldr	r0, [r7, #4]
 802f2b8:	f7ff fadb 	bl	802e872 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 802f2bc:	e009      	b.n	802f2d2 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 802f2be:	687b      	ldr	r3, [r7, #4]
 802f2c0:	2200      	movs	r2, #0
 802f2c2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 802f2c4:	687b      	ldr	r3, [r7, #4]
 802f2c6:	2200      	movs	r2, #0
 802f2c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 802f2cc:	6878      	ldr	r0, [r7, #4]
 802f2ce:	f7ff fac6 	bl	802e85e <HAL_I2C_ErrorCallback>
}
 802f2d2:	bf00      	nop
 802f2d4:	3708      	adds	r7, #8
 802f2d6:	46bd      	mov	sp, r7
 802f2d8:	bd80      	pop	{r7, pc}

0802f2da <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 802f2da:	b480      	push	{r7}
 802f2dc:	b083      	sub	sp, #12
 802f2de:	af00      	add	r7, sp, #0
 802f2e0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 802f2e2:	687b      	ldr	r3, [r7, #4]
 802f2e4:	681b      	ldr	r3, [r3, #0]
 802f2e6:	699b      	ldr	r3, [r3, #24]
 802f2e8:	f003 0302 	and.w	r3, r3, #2
 802f2ec:	2b02      	cmp	r3, #2
 802f2ee:	d103      	bne.n	802f2f8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 802f2f0:	687b      	ldr	r3, [r7, #4]
 802f2f2:	681b      	ldr	r3, [r3, #0]
 802f2f4:	2200      	movs	r2, #0
 802f2f6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 802f2f8:	687b      	ldr	r3, [r7, #4]
 802f2fa:	681b      	ldr	r3, [r3, #0]
 802f2fc:	699b      	ldr	r3, [r3, #24]
 802f2fe:	f003 0301 	and.w	r3, r3, #1
 802f302:	2b01      	cmp	r3, #1
 802f304:	d007      	beq.n	802f316 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 802f306:	687b      	ldr	r3, [r7, #4]
 802f308:	681b      	ldr	r3, [r3, #0]
 802f30a:	699a      	ldr	r2, [r3, #24]
 802f30c:	687b      	ldr	r3, [r7, #4]
 802f30e:	681b      	ldr	r3, [r3, #0]
 802f310:	f042 0201 	orr.w	r2, r2, #1
 802f314:	619a      	str	r2, [r3, #24]
  }
}
 802f316:	bf00      	nop
 802f318:	370c      	adds	r7, #12
 802f31a:	46bd      	mov	sp, r7
 802f31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f320:	4770      	bx	lr

0802f322 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 802f322:	b580      	push	{r7, lr}
 802f324:	b084      	sub	sp, #16
 802f326:	af00      	add	r7, sp, #0
 802f328:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 802f32a:	687b      	ldr	r3, [r7, #4]
 802f32c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802f32e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 802f330:	68fb      	ldr	r3, [r7, #12]
 802f332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802f334:	2b00      	cmp	r3, #0
 802f336:	d003      	beq.n	802f340 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 802f338:	68fb      	ldr	r3, [r7, #12]
 802f33a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802f33c:	2200      	movs	r2, #0
 802f33e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 802f340:	68fb      	ldr	r3, [r7, #12]
 802f342:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802f344:	2b00      	cmp	r3, #0
 802f346:	d003      	beq.n	802f350 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 802f348:	68fb      	ldr	r3, [r7, #12]
 802f34a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802f34c:	2200      	movs	r2, #0
 802f34e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 802f350:	68f8      	ldr	r0, [r7, #12]
 802f352:	f7ff ff9b 	bl	802f28c <I2C_TreatErrorCallback>
}
 802f356:	bf00      	nop
 802f358:	3710      	adds	r7, #16
 802f35a:	46bd      	mov	sp, r7
 802f35c:	bd80      	pop	{r7, pc}

0802f35e <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 802f35e:	b480      	push	{r7}
 802f360:	b085      	sub	sp, #20
 802f362:	af00      	add	r7, sp, #0
 802f364:	6078      	str	r0, [r7, #4]
 802f366:	460b      	mov	r3, r1
 802f368:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 802f36a:	2300      	movs	r3, #0
 802f36c:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 802f36e:	887b      	ldrh	r3, [r7, #2]
 802f370:	f003 0301 	and.w	r3, r3, #1
 802f374:	2b00      	cmp	r3, #0
 802f376:	d00f      	beq.n	802f398 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 802f378:	68fb      	ldr	r3, [r7, #12]
 802f37a:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 802f37e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 802f380:	687b      	ldr	r3, [r7, #4]
 802f382:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802f386:	b2db      	uxtb	r3, r3
 802f388:	f003 0328 	and.w	r3, r3, #40	; 0x28
 802f38c:	2b28      	cmp	r3, #40	; 0x28
 802f38e:	d003      	beq.n	802f398 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 802f390:	68fb      	ldr	r3, [r7, #12]
 802f392:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 802f396:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 802f398:	887b      	ldrh	r3, [r7, #2]
 802f39a:	f003 0302 	and.w	r3, r3, #2
 802f39e:	2b00      	cmp	r3, #0
 802f3a0:	d00f      	beq.n	802f3c2 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 802f3a2:	68fb      	ldr	r3, [r7, #12]
 802f3a4:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 802f3a8:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 802f3aa:	687b      	ldr	r3, [r7, #4]
 802f3ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802f3b0:	b2db      	uxtb	r3, r3
 802f3b2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 802f3b6:	2b28      	cmp	r3, #40	; 0x28
 802f3b8:	d003      	beq.n	802f3c2 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 802f3ba:	68fb      	ldr	r3, [r7, #12]
 802f3bc:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 802f3c0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 802f3c2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 802f3c6:	2b00      	cmp	r3, #0
 802f3c8:	da03      	bge.n	802f3d2 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 802f3ca:	68fb      	ldr	r3, [r7, #12]
 802f3cc:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 802f3d0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 802f3d2:	887b      	ldrh	r3, [r7, #2]
 802f3d4:	2b10      	cmp	r3, #16
 802f3d6:	d103      	bne.n	802f3e0 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 802f3d8:	68fb      	ldr	r3, [r7, #12]
 802f3da:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 802f3de:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 802f3e0:	887b      	ldrh	r3, [r7, #2]
 802f3e2:	2b20      	cmp	r3, #32
 802f3e4:	d103      	bne.n	802f3ee <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 802f3e6:	68fb      	ldr	r3, [r7, #12]
 802f3e8:	f043 0320 	orr.w	r3, r3, #32
 802f3ec:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 802f3ee:	887b      	ldrh	r3, [r7, #2]
 802f3f0:	2b40      	cmp	r3, #64	; 0x40
 802f3f2:	d103      	bne.n	802f3fc <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 802f3f4:	68fb      	ldr	r3, [r7, #12]
 802f3f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802f3fa:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 802f3fc:	687b      	ldr	r3, [r7, #4]
 802f3fe:	681b      	ldr	r3, [r3, #0]
 802f400:	6819      	ldr	r1, [r3, #0]
 802f402:	68fb      	ldr	r3, [r7, #12]
 802f404:	43da      	mvns	r2, r3
 802f406:	687b      	ldr	r3, [r7, #4]
 802f408:	681b      	ldr	r3, [r3, #0]
 802f40a:	400a      	ands	r2, r1
 802f40c:	601a      	str	r2, [r3, #0]
}
 802f40e:	bf00      	nop
 802f410:	3714      	adds	r7, #20
 802f412:	46bd      	mov	sp, r7
 802f414:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f418:	4770      	bx	lr

0802f41a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 802f41a:	b480      	push	{r7}
 802f41c:	b083      	sub	sp, #12
 802f41e:	af00      	add	r7, sp, #0
 802f420:	6078      	str	r0, [r7, #4]
 802f422:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 802f424:	687b      	ldr	r3, [r7, #4]
 802f426:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802f42a:	b2db      	uxtb	r3, r3
 802f42c:	2b20      	cmp	r3, #32
 802f42e:	d138      	bne.n	802f4a2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 802f430:	687b      	ldr	r3, [r7, #4]
 802f432:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 802f436:	2b01      	cmp	r3, #1
 802f438:	d101      	bne.n	802f43e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 802f43a:	2302      	movs	r3, #2
 802f43c:	e032      	b.n	802f4a4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 802f43e:	687b      	ldr	r3, [r7, #4]
 802f440:	2201      	movs	r2, #1
 802f442:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 802f446:	687b      	ldr	r3, [r7, #4]
 802f448:	2224      	movs	r2, #36	; 0x24
 802f44a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 802f44e:	687b      	ldr	r3, [r7, #4]
 802f450:	681b      	ldr	r3, [r3, #0]
 802f452:	681a      	ldr	r2, [r3, #0]
 802f454:	687b      	ldr	r3, [r7, #4]
 802f456:	681b      	ldr	r3, [r3, #0]
 802f458:	f022 0201 	bic.w	r2, r2, #1
 802f45c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 802f45e:	687b      	ldr	r3, [r7, #4]
 802f460:	681b      	ldr	r3, [r3, #0]
 802f462:	681a      	ldr	r2, [r3, #0]
 802f464:	687b      	ldr	r3, [r7, #4]
 802f466:	681b      	ldr	r3, [r3, #0]
 802f468:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 802f46c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 802f46e:	687b      	ldr	r3, [r7, #4]
 802f470:	681b      	ldr	r3, [r3, #0]
 802f472:	6819      	ldr	r1, [r3, #0]
 802f474:	687b      	ldr	r3, [r7, #4]
 802f476:	681b      	ldr	r3, [r3, #0]
 802f478:	683a      	ldr	r2, [r7, #0]
 802f47a:	430a      	orrs	r2, r1
 802f47c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 802f47e:	687b      	ldr	r3, [r7, #4]
 802f480:	681b      	ldr	r3, [r3, #0]
 802f482:	681a      	ldr	r2, [r3, #0]
 802f484:	687b      	ldr	r3, [r7, #4]
 802f486:	681b      	ldr	r3, [r3, #0]
 802f488:	f042 0201 	orr.w	r2, r2, #1
 802f48c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 802f48e:	687b      	ldr	r3, [r7, #4]
 802f490:	2220      	movs	r2, #32
 802f492:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 802f496:	687b      	ldr	r3, [r7, #4]
 802f498:	2200      	movs	r2, #0
 802f49a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 802f49e:	2300      	movs	r3, #0
 802f4a0:	e000      	b.n	802f4a4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 802f4a2:	2302      	movs	r3, #2
  }
}
 802f4a4:	4618      	mov	r0, r3
 802f4a6:	370c      	adds	r7, #12
 802f4a8:	46bd      	mov	sp, r7
 802f4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f4ae:	4770      	bx	lr

0802f4b0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 802f4b0:	b480      	push	{r7}
 802f4b2:	b085      	sub	sp, #20
 802f4b4:	af00      	add	r7, sp, #0
 802f4b6:	6078      	str	r0, [r7, #4]
 802f4b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 802f4ba:	687b      	ldr	r3, [r7, #4]
 802f4bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802f4c0:	b2db      	uxtb	r3, r3
 802f4c2:	2b20      	cmp	r3, #32
 802f4c4:	d139      	bne.n	802f53a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 802f4c6:	687b      	ldr	r3, [r7, #4]
 802f4c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 802f4cc:	2b01      	cmp	r3, #1
 802f4ce:	d101      	bne.n	802f4d4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 802f4d0:	2302      	movs	r3, #2
 802f4d2:	e033      	b.n	802f53c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 802f4d4:	687b      	ldr	r3, [r7, #4]
 802f4d6:	2201      	movs	r2, #1
 802f4d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 802f4dc:	687b      	ldr	r3, [r7, #4]
 802f4de:	2224      	movs	r2, #36	; 0x24
 802f4e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 802f4e4:	687b      	ldr	r3, [r7, #4]
 802f4e6:	681b      	ldr	r3, [r3, #0]
 802f4e8:	681a      	ldr	r2, [r3, #0]
 802f4ea:	687b      	ldr	r3, [r7, #4]
 802f4ec:	681b      	ldr	r3, [r3, #0]
 802f4ee:	f022 0201 	bic.w	r2, r2, #1
 802f4f2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 802f4f4:	687b      	ldr	r3, [r7, #4]
 802f4f6:	681b      	ldr	r3, [r3, #0]
 802f4f8:	681b      	ldr	r3, [r3, #0]
 802f4fa:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 802f4fc:	68fb      	ldr	r3, [r7, #12]
 802f4fe:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 802f502:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 802f504:	683b      	ldr	r3, [r7, #0]
 802f506:	021b      	lsls	r3, r3, #8
 802f508:	68fa      	ldr	r2, [r7, #12]
 802f50a:	4313      	orrs	r3, r2
 802f50c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 802f50e:	687b      	ldr	r3, [r7, #4]
 802f510:	681b      	ldr	r3, [r3, #0]
 802f512:	68fa      	ldr	r2, [r7, #12]
 802f514:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 802f516:	687b      	ldr	r3, [r7, #4]
 802f518:	681b      	ldr	r3, [r3, #0]
 802f51a:	681a      	ldr	r2, [r3, #0]
 802f51c:	687b      	ldr	r3, [r7, #4]
 802f51e:	681b      	ldr	r3, [r3, #0]
 802f520:	f042 0201 	orr.w	r2, r2, #1
 802f524:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 802f526:	687b      	ldr	r3, [r7, #4]
 802f528:	2220      	movs	r2, #32
 802f52a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 802f52e:	687b      	ldr	r3, [r7, #4]
 802f530:	2200      	movs	r2, #0
 802f532:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 802f536:	2300      	movs	r3, #0
 802f538:	e000      	b.n	802f53c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 802f53a:	2302      	movs	r3, #2
  }
}
 802f53c:	4618      	mov	r0, r3
 802f53e:	3714      	adds	r7, #20
 802f540:	46bd      	mov	sp, r7
 802f542:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f546:	4770      	bx	lr

0802f548 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 802f548:	b5f0      	push	{r4, r5, r6, r7, lr}
 802f54a:	b08f      	sub	sp, #60	; 0x3c
 802f54c:	af0a      	add	r7, sp, #40	; 0x28
 802f54e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 802f550:	687b      	ldr	r3, [r7, #4]
 802f552:	2b00      	cmp	r3, #0
 802f554:	d101      	bne.n	802f55a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 802f556:	2301      	movs	r3, #1
 802f558:	e116      	b.n	802f788 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 802f55a:	687b      	ldr	r3, [r7, #4]
 802f55c:	681b      	ldr	r3, [r3, #0]
 802f55e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 802f560:	687b      	ldr	r3, [r7, #4]
 802f562:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 802f566:	b2db      	uxtb	r3, r3
 802f568:	2b00      	cmp	r3, #0
 802f56a:	d106      	bne.n	802f57a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 802f56c:	687b      	ldr	r3, [r7, #4]
 802f56e:	2200      	movs	r2, #0
 802f570:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 802f574:	6878      	ldr	r0, [r7, #4]
 802f576:	f00c f82f 	bl	803b5d8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 802f57a:	687b      	ldr	r3, [r7, #4]
 802f57c:	2203      	movs	r2, #3
 802f57e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 802f582:	68bb      	ldr	r3, [r7, #8]
 802f584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802f586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802f58a:	2b00      	cmp	r3, #0
 802f58c:	d102      	bne.n	802f594 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 802f58e:	687b      	ldr	r3, [r7, #4]
 802f590:	2200      	movs	r2, #0
 802f592:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 802f594:	687b      	ldr	r3, [r7, #4]
 802f596:	681b      	ldr	r3, [r3, #0]
 802f598:	4618      	mov	r0, r3
 802f59a:	f008 fb78 	bl	8037c8e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 802f59e:	687b      	ldr	r3, [r7, #4]
 802f5a0:	681b      	ldr	r3, [r3, #0]
 802f5a2:	603b      	str	r3, [r7, #0]
 802f5a4:	687e      	ldr	r6, [r7, #4]
 802f5a6:	466d      	mov	r5, sp
 802f5a8:	f106 0410 	add.w	r4, r6, #16
 802f5ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 802f5ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 802f5b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 802f5b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 802f5b4:	e894 0003 	ldmia.w	r4, {r0, r1}
 802f5b8:	e885 0003 	stmia.w	r5, {r0, r1}
 802f5bc:	1d33      	adds	r3, r6, #4
 802f5be:	cb0e      	ldmia	r3, {r1, r2, r3}
 802f5c0:	6838      	ldr	r0, [r7, #0]
 802f5c2:	f008 fa43 	bl	8037a4c <USB_CoreInit>
 802f5c6:	4603      	mov	r3, r0
 802f5c8:	2b00      	cmp	r3, #0
 802f5ca:	d005      	beq.n	802f5d8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 802f5cc:	687b      	ldr	r3, [r7, #4]
 802f5ce:	2202      	movs	r2, #2
 802f5d0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 802f5d4:	2301      	movs	r3, #1
 802f5d6:	e0d7      	b.n	802f788 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 802f5d8:	687b      	ldr	r3, [r7, #4]
 802f5da:	681b      	ldr	r3, [r3, #0]
 802f5dc:	2100      	movs	r1, #0
 802f5de:	4618      	mov	r0, r3
 802f5e0:	f008 fb66 	bl	8037cb0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 802f5e4:	2300      	movs	r3, #0
 802f5e6:	73fb      	strb	r3, [r7, #15]
 802f5e8:	e04a      	b.n	802f680 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 802f5ea:	7bfa      	ldrb	r2, [r7, #15]
 802f5ec:	6879      	ldr	r1, [r7, #4]
 802f5ee:	4613      	mov	r3, r2
 802f5f0:	00db      	lsls	r3, r3, #3
 802f5f2:	4413      	add	r3, r2
 802f5f4:	009b      	lsls	r3, r3, #2
 802f5f6:	440b      	add	r3, r1
 802f5f8:	333d      	adds	r3, #61	; 0x3d
 802f5fa:	2201      	movs	r2, #1
 802f5fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 802f5fe:	7bfa      	ldrb	r2, [r7, #15]
 802f600:	6879      	ldr	r1, [r7, #4]
 802f602:	4613      	mov	r3, r2
 802f604:	00db      	lsls	r3, r3, #3
 802f606:	4413      	add	r3, r2
 802f608:	009b      	lsls	r3, r3, #2
 802f60a:	440b      	add	r3, r1
 802f60c:	333c      	adds	r3, #60	; 0x3c
 802f60e:	7bfa      	ldrb	r2, [r7, #15]
 802f610:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 802f612:	7bfa      	ldrb	r2, [r7, #15]
 802f614:	7bfb      	ldrb	r3, [r7, #15]
 802f616:	b298      	uxth	r0, r3
 802f618:	6879      	ldr	r1, [r7, #4]
 802f61a:	4613      	mov	r3, r2
 802f61c:	00db      	lsls	r3, r3, #3
 802f61e:	4413      	add	r3, r2
 802f620:	009b      	lsls	r3, r3, #2
 802f622:	440b      	add	r3, r1
 802f624:	3344      	adds	r3, #68	; 0x44
 802f626:	4602      	mov	r2, r0
 802f628:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 802f62a:	7bfa      	ldrb	r2, [r7, #15]
 802f62c:	6879      	ldr	r1, [r7, #4]
 802f62e:	4613      	mov	r3, r2
 802f630:	00db      	lsls	r3, r3, #3
 802f632:	4413      	add	r3, r2
 802f634:	009b      	lsls	r3, r3, #2
 802f636:	440b      	add	r3, r1
 802f638:	3340      	adds	r3, #64	; 0x40
 802f63a:	2200      	movs	r2, #0
 802f63c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 802f63e:	7bfa      	ldrb	r2, [r7, #15]
 802f640:	6879      	ldr	r1, [r7, #4]
 802f642:	4613      	mov	r3, r2
 802f644:	00db      	lsls	r3, r3, #3
 802f646:	4413      	add	r3, r2
 802f648:	009b      	lsls	r3, r3, #2
 802f64a:	440b      	add	r3, r1
 802f64c:	3348      	adds	r3, #72	; 0x48
 802f64e:	2200      	movs	r2, #0
 802f650:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 802f652:	7bfa      	ldrb	r2, [r7, #15]
 802f654:	6879      	ldr	r1, [r7, #4]
 802f656:	4613      	mov	r3, r2
 802f658:	00db      	lsls	r3, r3, #3
 802f65a:	4413      	add	r3, r2
 802f65c:	009b      	lsls	r3, r3, #2
 802f65e:	440b      	add	r3, r1
 802f660:	334c      	adds	r3, #76	; 0x4c
 802f662:	2200      	movs	r2, #0
 802f664:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 802f666:	7bfa      	ldrb	r2, [r7, #15]
 802f668:	6879      	ldr	r1, [r7, #4]
 802f66a:	4613      	mov	r3, r2
 802f66c:	00db      	lsls	r3, r3, #3
 802f66e:	4413      	add	r3, r2
 802f670:	009b      	lsls	r3, r3, #2
 802f672:	440b      	add	r3, r1
 802f674:	3354      	adds	r3, #84	; 0x54
 802f676:	2200      	movs	r2, #0
 802f678:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 802f67a:	7bfb      	ldrb	r3, [r7, #15]
 802f67c:	3301      	adds	r3, #1
 802f67e:	73fb      	strb	r3, [r7, #15]
 802f680:	7bfa      	ldrb	r2, [r7, #15]
 802f682:	687b      	ldr	r3, [r7, #4]
 802f684:	685b      	ldr	r3, [r3, #4]
 802f686:	429a      	cmp	r2, r3
 802f688:	d3af      	bcc.n	802f5ea <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 802f68a:	2300      	movs	r3, #0
 802f68c:	73fb      	strb	r3, [r7, #15]
 802f68e:	e044      	b.n	802f71a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 802f690:	7bfa      	ldrb	r2, [r7, #15]
 802f692:	6879      	ldr	r1, [r7, #4]
 802f694:	4613      	mov	r3, r2
 802f696:	00db      	lsls	r3, r3, #3
 802f698:	4413      	add	r3, r2
 802f69a:	009b      	lsls	r3, r3, #2
 802f69c:	440b      	add	r3, r1
 802f69e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 802f6a2:	2200      	movs	r2, #0
 802f6a4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 802f6a6:	7bfa      	ldrb	r2, [r7, #15]
 802f6a8:	6879      	ldr	r1, [r7, #4]
 802f6aa:	4613      	mov	r3, r2
 802f6ac:	00db      	lsls	r3, r3, #3
 802f6ae:	4413      	add	r3, r2
 802f6b0:	009b      	lsls	r3, r3, #2
 802f6b2:	440b      	add	r3, r1
 802f6b4:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 802f6b8:	7bfa      	ldrb	r2, [r7, #15]
 802f6ba:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 802f6bc:	7bfa      	ldrb	r2, [r7, #15]
 802f6be:	6879      	ldr	r1, [r7, #4]
 802f6c0:	4613      	mov	r3, r2
 802f6c2:	00db      	lsls	r3, r3, #3
 802f6c4:	4413      	add	r3, r2
 802f6c6:	009b      	lsls	r3, r3, #2
 802f6c8:	440b      	add	r3, r1
 802f6ca:	f503 7320 	add.w	r3, r3, #640	; 0x280
 802f6ce:	2200      	movs	r2, #0
 802f6d0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 802f6d2:	7bfa      	ldrb	r2, [r7, #15]
 802f6d4:	6879      	ldr	r1, [r7, #4]
 802f6d6:	4613      	mov	r3, r2
 802f6d8:	00db      	lsls	r3, r3, #3
 802f6da:	4413      	add	r3, r2
 802f6dc:	009b      	lsls	r3, r3, #2
 802f6de:	440b      	add	r3, r1
 802f6e0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 802f6e4:	2200      	movs	r2, #0
 802f6e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 802f6e8:	7bfa      	ldrb	r2, [r7, #15]
 802f6ea:	6879      	ldr	r1, [r7, #4]
 802f6ec:	4613      	mov	r3, r2
 802f6ee:	00db      	lsls	r3, r3, #3
 802f6f0:	4413      	add	r3, r2
 802f6f2:	009b      	lsls	r3, r3, #2
 802f6f4:	440b      	add	r3, r1
 802f6f6:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 802f6fa:	2200      	movs	r2, #0
 802f6fc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 802f6fe:	7bfa      	ldrb	r2, [r7, #15]
 802f700:	6879      	ldr	r1, [r7, #4]
 802f702:	4613      	mov	r3, r2
 802f704:	00db      	lsls	r3, r3, #3
 802f706:	4413      	add	r3, r2
 802f708:	009b      	lsls	r3, r3, #2
 802f70a:	440b      	add	r3, r1
 802f70c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 802f710:	2200      	movs	r2, #0
 802f712:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 802f714:	7bfb      	ldrb	r3, [r7, #15]
 802f716:	3301      	adds	r3, #1
 802f718:	73fb      	strb	r3, [r7, #15]
 802f71a:	7bfa      	ldrb	r2, [r7, #15]
 802f71c:	687b      	ldr	r3, [r7, #4]
 802f71e:	685b      	ldr	r3, [r3, #4]
 802f720:	429a      	cmp	r2, r3
 802f722:	d3b5      	bcc.n	802f690 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 802f724:	687b      	ldr	r3, [r7, #4]
 802f726:	681b      	ldr	r3, [r3, #0]
 802f728:	603b      	str	r3, [r7, #0]
 802f72a:	687e      	ldr	r6, [r7, #4]
 802f72c:	466d      	mov	r5, sp
 802f72e:	f106 0410 	add.w	r4, r6, #16
 802f732:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 802f734:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 802f736:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 802f738:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 802f73a:	e894 0003 	ldmia.w	r4, {r0, r1}
 802f73e:	e885 0003 	stmia.w	r5, {r0, r1}
 802f742:	1d33      	adds	r3, r6, #4
 802f744:	cb0e      	ldmia	r3, {r1, r2, r3}
 802f746:	6838      	ldr	r0, [r7, #0]
 802f748:	f008 fafe 	bl	8037d48 <USB_DevInit>
 802f74c:	4603      	mov	r3, r0
 802f74e:	2b00      	cmp	r3, #0
 802f750:	d005      	beq.n	802f75e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 802f752:	687b      	ldr	r3, [r7, #4]
 802f754:	2202      	movs	r2, #2
 802f756:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 802f75a:	2301      	movs	r3, #1
 802f75c:	e014      	b.n	802f788 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 802f75e:	687b      	ldr	r3, [r7, #4]
 802f760:	2200      	movs	r2, #0
 802f762:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 802f766:	687b      	ldr	r3, [r7, #4]
 802f768:	2201      	movs	r2, #1
 802f76a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 802f76e:	687b      	ldr	r3, [r7, #4]
 802f770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802f772:	2b01      	cmp	r3, #1
 802f774:	d102      	bne.n	802f77c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 802f776:	6878      	ldr	r0, [r7, #4]
 802f778:	f001 f98c 	bl	8030a94 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 802f77c:	687b      	ldr	r3, [r7, #4]
 802f77e:	681b      	ldr	r3, [r3, #0]
 802f780:	4618      	mov	r0, r3
 802f782:	f009 fc4c 	bl	803901e <USB_DevDisconnect>

  return HAL_OK;
 802f786:	2300      	movs	r3, #0
}
 802f788:	4618      	mov	r0, r3
 802f78a:	3714      	adds	r7, #20
 802f78c:	46bd      	mov	sp, r7
 802f78e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0802f790 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 802f790:	b580      	push	{r7, lr}
 802f792:	b084      	sub	sp, #16
 802f794:	af00      	add	r7, sp, #0
 802f796:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 802f798:	687b      	ldr	r3, [r7, #4]
 802f79a:	681b      	ldr	r3, [r3, #0]
 802f79c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 802f79e:	687b      	ldr	r3, [r7, #4]
 802f7a0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 802f7a4:	2b01      	cmp	r3, #1
 802f7a6:	d101      	bne.n	802f7ac <HAL_PCD_Start+0x1c>
 802f7a8:	2302      	movs	r3, #2
 802f7aa:	e020      	b.n	802f7ee <HAL_PCD_Start+0x5e>
 802f7ac:	687b      	ldr	r3, [r7, #4]
 802f7ae:	2201      	movs	r2, #1
 802f7b0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 802f7b4:	687b      	ldr	r3, [r7, #4]
 802f7b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802f7b8:	2b01      	cmp	r3, #1
 802f7ba:	d109      	bne.n	802f7d0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 802f7bc:	687b      	ldr	r3, [r7, #4]
 802f7be:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 802f7c0:	2b01      	cmp	r3, #1
 802f7c2:	d005      	beq.n	802f7d0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 802f7c4:	68fb      	ldr	r3, [r7, #12]
 802f7c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802f7c8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 802f7cc:	68fb      	ldr	r3, [r7, #12]
 802f7ce:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 802f7d0:	687b      	ldr	r3, [r7, #4]
 802f7d2:	681b      	ldr	r3, [r3, #0]
 802f7d4:	4618      	mov	r0, r3
 802f7d6:	f008 fa49 	bl	8037c6c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 802f7da:	687b      	ldr	r3, [r7, #4]
 802f7dc:	681b      	ldr	r3, [r3, #0]
 802f7de:	4618      	mov	r0, r3
 802f7e0:	f009 fbfc 	bl	8038fdc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 802f7e4:	687b      	ldr	r3, [r7, #4]
 802f7e6:	2200      	movs	r2, #0
 802f7e8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 802f7ec:	2300      	movs	r3, #0
}
 802f7ee:	4618      	mov	r0, r3
 802f7f0:	3710      	adds	r7, #16
 802f7f2:	46bd      	mov	sp, r7
 802f7f4:	bd80      	pop	{r7, pc}

0802f7f6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 802f7f6:	b590      	push	{r4, r7, lr}
 802f7f8:	b08d      	sub	sp, #52	; 0x34
 802f7fa:	af00      	add	r7, sp, #0
 802f7fc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 802f7fe:	687b      	ldr	r3, [r7, #4]
 802f800:	681b      	ldr	r3, [r3, #0]
 802f802:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802f804:	6a3b      	ldr	r3, [r7, #32]
 802f806:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 802f808:	687b      	ldr	r3, [r7, #4]
 802f80a:	681b      	ldr	r3, [r3, #0]
 802f80c:	4618      	mov	r0, r3
 802f80e:	f009 fcba 	bl	8039186 <USB_GetMode>
 802f812:	4603      	mov	r3, r0
 802f814:	2b00      	cmp	r3, #0
 802f816:	f040 84b7 	bne.w	8030188 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 802f81a:	687b      	ldr	r3, [r7, #4]
 802f81c:	681b      	ldr	r3, [r3, #0]
 802f81e:	4618      	mov	r0, r3
 802f820:	f009 fc1e 	bl	8039060 <USB_ReadInterrupts>
 802f824:	4603      	mov	r3, r0
 802f826:	2b00      	cmp	r3, #0
 802f828:	f000 84ad 	beq.w	8030186 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 802f82c:	69fb      	ldr	r3, [r7, #28]
 802f82e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802f832:	689b      	ldr	r3, [r3, #8]
 802f834:	0a1b      	lsrs	r3, r3, #8
 802f836:	f3c3 020d 	ubfx	r2, r3, #0, #14
 802f83a:	687b      	ldr	r3, [r7, #4]
 802f83c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 802f840:	687b      	ldr	r3, [r7, #4]
 802f842:	681b      	ldr	r3, [r3, #0]
 802f844:	4618      	mov	r0, r3
 802f846:	f009 fc0b 	bl	8039060 <USB_ReadInterrupts>
 802f84a:	4603      	mov	r3, r0
 802f84c:	f003 0302 	and.w	r3, r3, #2
 802f850:	2b02      	cmp	r3, #2
 802f852:	d107      	bne.n	802f864 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 802f854:	687b      	ldr	r3, [r7, #4]
 802f856:	681b      	ldr	r3, [r3, #0]
 802f858:	695a      	ldr	r2, [r3, #20]
 802f85a:	687b      	ldr	r3, [r7, #4]
 802f85c:	681b      	ldr	r3, [r3, #0]
 802f85e:	f002 0202 	and.w	r2, r2, #2
 802f862:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 802f864:	687b      	ldr	r3, [r7, #4]
 802f866:	681b      	ldr	r3, [r3, #0]
 802f868:	4618      	mov	r0, r3
 802f86a:	f009 fbf9 	bl	8039060 <USB_ReadInterrupts>
 802f86e:	4603      	mov	r3, r0
 802f870:	f003 0310 	and.w	r3, r3, #16
 802f874:	2b10      	cmp	r3, #16
 802f876:	d161      	bne.n	802f93c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 802f878:	687b      	ldr	r3, [r7, #4]
 802f87a:	681b      	ldr	r3, [r3, #0]
 802f87c:	699a      	ldr	r2, [r3, #24]
 802f87e:	687b      	ldr	r3, [r7, #4]
 802f880:	681b      	ldr	r3, [r3, #0]
 802f882:	f022 0210 	bic.w	r2, r2, #16
 802f886:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 802f888:	6a3b      	ldr	r3, [r7, #32]
 802f88a:	6a1b      	ldr	r3, [r3, #32]
 802f88c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 802f88e:	69bb      	ldr	r3, [r7, #24]
 802f890:	f003 020f 	and.w	r2, r3, #15
 802f894:	4613      	mov	r3, r2
 802f896:	00db      	lsls	r3, r3, #3
 802f898:	4413      	add	r3, r2
 802f89a:	009b      	lsls	r3, r3, #2
 802f89c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 802f8a0:	687a      	ldr	r2, [r7, #4]
 802f8a2:	4413      	add	r3, r2
 802f8a4:	3304      	adds	r3, #4
 802f8a6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 802f8a8:	69bb      	ldr	r3, [r7, #24]
 802f8aa:	0c5b      	lsrs	r3, r3, #17
 802f8ac:	f003 030f 	and.w	r3, r3, #15
 802f8b0:	2b02      	cmp	r3, #2
 802f8b2:	d124      	bne.n	802f8fe <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 802f8b4:	69ba      	ldr	r2, [r7, #24]
 802f8b6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 802f8ba:	4013      	ands	r3, r2
 802f8bc:	2b00      	cmp	r3, #0
 802f8be:	d035      	beq.n	802f92c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 802f8c0:	697b      	ldr	r3, [r7, #20]
 802f8c2:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 802f8c4:	69bb      	ldr	r3, [r7, #24]
 802f8c6:	091b      	lsrs	r3, r3, #4
 802f8c8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 802f8ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 802f8ce:	b29b      	uxth	r3, r3
 802f8d0:	461a      	mov	r2, r3
 802f8d2:	6a38      	ldr	r0, [r7, #32]
 802f8d4:	f009 fa30 	bl	8038d38 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 802f8d8:	697b      	ldr	r3, [r7, #20]
 802f8da:	691a      	ldr	r2, [r3, #16]
 802f8dc:	69bb      	ldr	r3, [r7, #24]
 802f8de:	091b      	lsrs	r3, r3, #4
 802f8e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 802f8e4:	441a      	add	r2, r3
 802f8e6:	697b      	ldr	r3, [r7, #20]
 802f8e8:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 802f8ea:	697b      	ldr	r3, [r7, #20]
 802f8ec:	6a1a      	ldr	r2, [r3, #32]
 802f8ee:	69bb      	ldr	r3, [r7, #24]
 802f8f0:	091b      	lsrs	r3, r3, #4
 802f8f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 802f8f6:	441a      	add	r2, r3
 802f8f8:	697b      	ldr	r3, [r7, #20]
 802f8fa:	621a      	str	r2, [r3, #32]
 802f8fc:	e016      	b.n	802f92c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 802f8fe:	69bb      	ldr	r3, [r7, #24]
 802f900:	0c5b      	lsrs	r3, r3, #17
 802f902:	f003 030f 	and.w	r3, r3, #15
 802f906:	2b06      	cmp	r3, #6
 802f908:	d110      	bne.n	802f92c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 802f90a:	687b      	ldr	r3, [r7, #4]
 802f90c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 802f910:	2208      	movs	r2, #8
 802f912:	4619      	mov	r1, r3
 802f914:	6a38      	ldr	r0, [r7, #32]
 802f916:	f009 fa0f 	bl	8038d38 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 802f91a:	697b      	ldr	r3, [r7, #20]
 802f91c:	6a1a      	ldr	r2, [r3, #32]
 802f91e:	69bb      	ldr	r3, [r7, #24]
 802f920:	091b      	lsrs	r3, r3, #4
 802f922:	f3c3 030a 	ubfx	r3, r3, #0, #11
 802f926:	441a      	add	r2, r3
 802f928:	697b      	ldr	r3, [r7, #20]
 802f92a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 802f92c:	687b      	ldr	r3, [r7, #4]
 802f92e:	681b      	ldr	r3, [r3, #0]
 802f930:	699a      	ldr	r2, [r3, #24]
 802f932:	687b      	ldr	r3, [r7, #4]
 802f934:	681b      	ldr	r3, [r3, #0]
 802f936:	f042 0210 	orr.w	r2, r2, #16
 802f93a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 802f93c:	687b      	ldr	r3, [r7, #4]
 802f93e:	681b      	ldr	r3, [r3, #0]
 802f940:	4618      	mov	r0, r3
 802f942:	f009 fb8d 	bl	8039060 <USB_ReadInterrupts>
 802f946:	4603      	mov	r3, r0
 802f948:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 802f94c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 802f950:	f040 80a7 	bne.w	802faa2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 802f954:	2300      	movs	r3, #0
 802f956:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 802f958:	687b      	ldr	r3, [r7, #4]
 802f95a:	681b      	ldr	r3, [r3, #0]
 802f95c:	4618      	mov	r0, r3
 802f95e:	f009 fb92 	bl	8039086 <USB_ReadDevAllOutEpInterrupt>
 802f962:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 802f964:	e099      	b.n	802fa9a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 802f966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802f968:	f003 0301 	and.w	r3, r3, #1
 802f96c:	2b00      	cmp	r3, #0
 802f96e:	f000 808e 	beq.w	802fa8e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 802f972:	687b      	ldr	r3, [r7, #4]
 802f974:	681b      	ldr	r3, [r3, #0]
 802f976:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802f978:	b2d2      	uxtb	r2, r2
 802f97a:	4611      	mov	r1, r2
 802f97c:	4618      	mov	r0, r3
 802f97e:	f009 fbb6 	bl	80390ee <USB_ReadDevOutEPInterrupt>
 802f982:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 802f984:	693b      	ldr	r3, [r7, #16]
 802f986:	f003 0301 	and.w	r3, r3, #1
 802f98a:	2b00      	cmp	r3, #0
 802f98c:	d00c      	beq.n	802f9a8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 802f98e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802f990:	015a      	lsls	r2, r3, #5
 802f992:	69fb      	ldr	r3, [r7, #28]
 802f994:	4413      	add	r3, r2
 802f996:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802f99a:	461a      	mov	r2, r3
 802f99c:	2301      	movs	r3, #1
 802f99e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 802f9a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 802f9a2:	6878      	ldr	r0, [r7, #4]
 802f9a4:	f000 fef0 	bl	8030788 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 802f9a8:	693b      	ldr	r3, [r7, #16]
 802f9aa:	f003 0308 	and.w	r3, r3, #8
 802f9ae:	2b00      	cmp	r3, #0
 802f9b0:	d00c      	beq.n	802f9cc <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 802f9b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802f9b4:	015a      	lsls	r2, r3, #5
 802f9b6:	69fb      	ldr	r3, [r7, #28]
 802f9b8:	4413      	add	r3, r2
 802f9ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802f9be:	461a      	mov	r2, r3
 802f9c0:	2308      	movs	r3, #8
 802f9c2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 802f9c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 802f9c6:	6878      	ldr	r0, [r7, #4]
 802f9c8:	f000 ffc6 	bl	8030958 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 802f9cc:	693b      	ldr	r3, [r7, #16]
 802f9ce:	f003 0310 	and.w	r3, r3, #16
 802f9d2:	2b00      	cmp	r3, #0
 802f9d4:	d008      	beq.n	802f9e8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 802f9d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802f9d8:	015a      	lsls	r2, r3, #5
 802f9da:	69fb      	ldr	r3, [r7, #28]
 802f9dc:	4413      	add	r3, r2
 802f9de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802f9e2:	461a      	mov	r2, r3
 802f9e4:	2310      	movs	r3, #16
 802f9e6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 802f9e8:	693b      	ldr	r3, [r7, #16]
 802f9ea:	f003 0302 	and.w	r3, r3, #2
 802f9ee:	2b00      	cmp	r3, #0
 802f9f0:	d030      	beq.n	802fa54 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 802f9f2:	6a3b      	ldr	r3, [r7, #32]
 802f9f4:	695b      	ldr	r3, [r3, #20]
 802f9f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802f9fa:	2b80      	cmp	r3, #128	; 0x80
 802f9fc:	d109      	bne.n	802fa12 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 802f9fe:	69fb      	ldr	r3, [r7, #28]
 802fa00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802fa04:	685b      	ldr	r3, [r3, #4]
 802fa06:	69fa      	ldr	r2, [r7, #28]
 802fa08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802fa0c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 802fa10:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 802fa12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802fa14:	4613      	mov	r3, r2
 802fa16:	00db      	lsls	r3, r3, #3
 802fa18:	4413      	add	r3, r2
 802fa1a:	009b      	lsls	r3, r3, #2
 802fa1c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 802fa20:	687a      	ldr	r2, [r7, #4]
 802fa22:	4413      	add	r3, r2
 802fa24:	3304      	adds	r3, #4
 802fa26:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 802fa28:	697b      	ldr	r3, [r7, #20]
 802fa2a:	78db      	ldrb	r3, [r3, #3]
 802fa2c:	2b01      	cmp	r3, #1
 802fa2e:	d108      	bne.n	802fa42 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 802fa30:	697b      	ldr	r3, [r7, #20]
 802fa32:	2200      	movs	r2, #0
 802fa34:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 802fa36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802fa38:	b2db      	uxtb	r3, r3
 802fa3a:	4619      	mov	r1, r3
 802fa3c:	6878      	ldr	r0, [r7, #4]
 802fa3e:	f00b fef7 	bl	803b830 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 802fa42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802fa44:	015a      	lsls	r2, r3, #5
 802fa46:	69fb      	ldr	r3, [r7, #28]
 802fa48:	4413      	add	r3, r2
 802fa4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802fa4e:	461a      	mov	r2, r3
 802fa50:	2302      	movs	r3, #2
 802fa52:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 802fa54:	693b      	ldr	r3, [r7, #16]
 802fa56:	f003 0320 	and.w	r3, r3, #32
 802fa5a:	2b00      	cmp	r3, #0
 802fa5c:	d008      	beq.n	802fa70 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 802fa5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802fa60:	015a      	lsls	r2, r3, #5
 802fa62:	69fb      	ldr	r3, [r7, #28]
 802fa64:	4413      	add	r3, r2
 802fa66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802fa6a:	461a      	mov	r2, r3
 802fa6c:	2320      	movs	r3, #32
 802fa6e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 802fa70:	693b      	ldr	r3, [r7, #16]
 802fa72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 802fa76:	2b00      	cmp	r3, #0
 802fa78:	d009      	beq.n	802fa8e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 802fa7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802fa7c:	015a      	lsls	r2, r3, #5
 802fa7e:	69fb      	ldr	r3, [r7, #28]
 802fa80:	4413      	add	r3, r2
 802fa82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802fa86:	461a      	mov	r2, r3
 802fa88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 802fa8c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 802fa8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802fa90:	3301      	adds	r3, #1
 802fa92:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 802fa94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802fa96:	085b      	lsrs	r3, r3, #1
 802fa98:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 802fa9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802fa9c:	2b00      	cmp	r3, #0
 802fa9e:	f47f af62 	bne.w	802f966 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 802faa2:	687b      	ldr	r3, [r7, #4]
 802faa4:	681b      	ldr	r3, [r3, #0]
 802faa6:	4618      	mov	r0, r3
 802faa8:	f009 fada 	bl	8039060 <USB_ReadInterrupts>
 802faac:	4603      	mov	r3, r0
 802faae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 802fab2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 802fab6:	f040 80db 	bne.w	802fc70 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 802faba:	687b      	ldr	r3, [r7, #4]
 802fabc:	681b      	ldr	r3, [r3, #0]
 802fabe:	4618      	mov	r0, r3
 802fac0:	f009 fafb 	bl	80390ba <USB_ReadDevAllInEpInterrupt>
 802fac4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 802fac6:	2300      	movs	r3, #0
 802fac8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 802faca:	e0cd      	b.n	802fc68 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 802facc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802face:	f003 0301 	and.w	r3, r3, #1
 802fad2:	2b00      	cmp	r3, #0
 802fad4:	f000 80c2 	beq.w	802fc5c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 802fad8:	687b      	ldr	r3, [r7, #4]
 802fada:	681b      	ldr	r3, [r3, #0]
 802fadc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802fade:	b2d2      	uxtb	r2, r2
 802fae0:	4611      	mov	r1, r2
 802fae2:	4618      	mov	r0, r3
 802fae4:	f009 fb21 	bl	803912a <USB_ReadDevInEPInterrupt>
 802fae8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 802faea:	693b      	ldr	r3, [r7, #16]
 802faec:	f003 0301 	and.w	r3, r3, #1
 802faf0:	2b00      	cmp	r3, #0
 802faf2:	d057      	beq.n	802fba4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 802faf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802faf6:	f003 030f 	and.w	r3, r3, #15
 802fafa:	2201      	movs	r2, #1
 802fafc:	fa02 f303 	lsl.w	r3, r2, r3
 802fb00:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 802fb02:	69fb      	ldr	r3, [r7, #28]
 802fb04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802fb08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 802fb0a:	68fb      	ldr	r3, [r7, #12]
 802fb0c:	43db      	mvns	r3, r3
 802fb0e:	69f9      	ldr	r1, [r7, #28]
 802fb10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 802fb14:	4013      	ands	r3, r2
 802fb16:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 802fb18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802fb1a:	015a      	lsls	r2, r3, #5
 802fb1c:	69fb      	ldr	r3, [r7, #28]
 802fb1e:	4413      	add	r3, r2
 802fb20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802fb24:	461a      	mov	r2, r3
 802fb26:	2301      	movs	r3, #1
 802fb28:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 802fb2a:	687b      	ldr	r3, [r7, #4]
 802fb2c:	691b      	ldr	r3, [r3, #16]
 802fb2e:	2b01      	cmp	r3, #1
 802fb30:	d132      	bne.n	802fb98 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 802fb32:	6879      	ldr	r1, [r7, #4]
 802fb34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802fb36:	4613      	mov	r3, r2
 802fb38:	00db      	lsls	r3, r3, #3
 802fb3a:	4413      	add	r3, r2
 802fb3c:	009b      	lsls	r3, r3, #2
 802fb3e:	440b      	add	r3, r1
 802fb40:	334c      	adds	r3, #76	; 0x4c
 802fb42:	6819      	ldr	r1, [r3, #0]
 802fb44:	6878      	ldr	r0, [r7, #4]
 802fb46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802fb48:	4613      	mov	r3, r2
 802fb4a:	00db      	lsls	r3, r3, #3
 802fb4c:	4413      	add	r3, r2
 802fb4e:	009b      	lsls	r3, r3, #2
 802fb50:	4403      	add	r3, r0
 802fb52:	3348      	adds	r3, #72	; 0x48
 802fb54:	681b      	ldr	r3, [r3, #0]
 802fb56:	4419      	add	r1, r3
 802fb58:	6878      	ldr	r0, [r7, #4]
 802fb5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802fb5c:	4613      	mov	r3, r2
 802fb5e:	00db      	lsls	r3, r3, #3
 802fb60:	4413      	add	r3, r2
 802fb62:	009b      	lsls	r3, r3, #2
 802fb64:	4403      	add	r3, r0
 802fb66:	334c      	adds	r3, #76	; 0x4c
 802fb68:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 802fb6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802fb6c:	2b00      	cmp	r3, #0
 802fb6e:	d113      	bne.n	802fb98 <HAL_PCD_IRQHandler+0x3a2>
 802fb70:	6879      	ldr	r1, [r7, #4]
 802fb72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802fb74:	4613      	mov	r3, r2
 802fb76:	00db      	lsls	r3, r3, #3
 802fb78:	4413      	add	r3, r2
 802fb7a:	009b      	lsls	r3, r3, #2
 802fb7c:	440b      	add	r3, r1
 802fb7e:	3354      	adds	r3, #84	; 0x54
 802fb80:	681b      	ldr	r3, [r3, #0]
 802fb82:	2b00      	cmp	r3, #0
 802fb84:	d108      	bne.n	802fb98 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 802fb86:	687b      	ldr	r3, [r7, #4]
 802fb88:	6818      	ldr	r0, [r3, #0]
 802fb8a:	687b      	ldr	r3, [r7, #4]
 802fb8c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 802fb90:	461a      	mov	r2, r3
 802fb92:	2101      	movs	r1, #1
 802fb94:	f009 fb2a 	bl	80391ec <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 802fb98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802fb9a:	b2db      	uxtb	r3, r3
 802fb9c:	4619      	mov	r1, r3
 802fb9e:	6878      	ldr	r0, [r7, #4]
 802fba0:	f00b fdc1 	bl	803b726 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 802fba4:	693b      	ldr	r3, [r7, #16]
 802fba6:	f003 0308 	and.w	r3, r3, #8
 802fbaa:	2b00      	cmp	r3, #0
 802fbac:	d008      	beq.n	802fbc0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 802fbae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802fbb0:	015a      	lsls	r2, r3, #5
 802fbb2:	69fb      	ldr	r3, [r7, #28]
 802fbb4:	4413      	add	r3, r2
 802fbb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802fbba:	461a      	mov	r2, r3
 802fbbc:	2308      	movs	r3, #8
 802fbbe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 802fbc0:	693b      	ldr	r3, [r7, #16]
 802fbc2:	f003 0310 	and.w	r3, r3, #16
 802fbc6:	2b00      	cmp	r3, #0
 802fbc8:	d008      	beq.n	802fbdc <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 802fbca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802fbcc:	015a      	lsls	r2, r3, #5
 802fbce:	69fb      	ldr	r3, [r7, #28]
 802fbd0:	4413      	add	r3, r2
 802fbd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802fbd6:	461a      	mov	r2, r3
 802fbd8:	2310      	movs	r3, #16
 802fbda:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 802fbdc:	693b      	ldr	r3, [r7, #16]
 802fbde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802fbe2:	2b00      	cmp	r3, #0
 802fbe4:	d008      	beq.n	802fbf8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 802fbe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802fbe8:	015a      	lsls	r2, r3, #5
 802fbea:	69fb      	ldr	r3, [r7, #28]
 802fbec:	4413      	add	r3, r2
 802fbee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802fbf2:	461a      	mov	r2, r3
 802fbf4:	2340      	movs	r3, #64	; 0x40
 802fbf6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 802fbf8:	693b      	ldr	r3, [r7, #16]
 802fbfa:	f003 0302 	and.w	r3, r3, #2
 802fbfe:	2b00      	cmp	r3, #0
 802fc00:	d023      	beq.n	802fc4a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 802fc02:	6a79      	ldr	r1, [r7, #36]	; 0x24
 802fc04:	6a38      	ldr	r0, [r7, #32]
 802fc06:	f008 f9fd 	bl	8038004 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 802fc0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802fc0c:	4613      	mov	r3, r2
 802fc0e:	00db      	lsls	r3, r3, #3
 802fc10:	4413      	add	r3, r2
 802fc12:	009b      	lsls	r3, r3, #2
 802fc14:	3338      	adds	r3, #56	; 0x38
 802fc16:	687a      	ldr	r2, [r7, #4]
 802fc18:	4413      	add	r3, r2
 802fc1a:	3304      	adds	r3, #4
 802fc1c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 802fc1e:	697b      	ldr	r3, [r7, #20]
 802fc20:	78db      	ldrb	r3, [r3, #3]
 802fc22:	2b01      	cmp	r3, #1
 802fc24:	d108      	bne.n	802fc38 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 802fc26:	697b      	ldr	r3, [r7, #20]
 802fc28:	2200      	movs	r2, #0
 802fc2a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 802fc2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802fc2e:	b2db      	uxtb	r3, r3
 802fc30:	4619      	mov	r1, r3
 802fc32:	6878      	ldr	r0, [r7, #4]
 802fc34:	f00b fe0e 	bl	803b854 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 802fc38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802fc3a:	015a      	lsls	r2, r3, #5
 802fc3c:	69fb      	ldr	r3, [r7, #28]
 802fc3e:	4413      	add	r3, r2
 802fc40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802fc44:	461a      	mov	r2, r3
 802fc46:	2302      	movs	r3, #2
 802fc48:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 802fc4a:	693b      	ldr	r3, [r7, #16]
 802fc4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802fc50:	2b00      	cmp	r3, #0
 802fc52:	d003      	beq.n	802fc5c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 802fc54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 802fc56:	6878      	ldr	r0, [r7, #4]
 802fc58:	f000 fd08 	bl	803066c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 802fc5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802fc5e:	3301      	adds	r3, #1
 802fc60:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 802fc62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802fc64:	085b      	lsrs	r3, r3, #1
 802fc66:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 802fc68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802fc6a:	2b00      	cmp	r3, #0
 802fc6c:	f47f af2e 	bne.w	802facc <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 802fc70:	687b      	ldr	r3, [r7, #4]
 802fc72:	681b      	ldr	r3, [r3, #0]
 802fc74:	4618      	mov	r0, r3
 802fc76:	f009 f9f3 	bl	8039060 <USB_ReadInterrupts>
 802fc7a:	4603      	mov	r3, r0
 802fc7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802fc80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802fc84:	d122      	bne.n	802fccc <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 802fc86:	69fb      	ldr	r3, [r7, #28]
 802fc88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802fc8c:	685b      	ldr	r3, [r3, #4]
 802fc8e:	69fa      	ldr	r2, [r7, #28]
 802fc90:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802fc94:	f023 0301 	bic.w	r3, r3, #1
 802fc98:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 802fc9a:	687b      	ldr	r3, [r7, #4]
 802fc9c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 802fca0:	2b01      	cmp	r3, #1
 802fca2:	d108      	bne.n	802fcb6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 802fca4:	687b      	ldr	r3, [r7, #4]
 802fca6:	2200      	movs	r2, #0
 802fca8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 802fcac:	2100      	movs	r1, #0
 802fcae:	6878      	ldr	r0, [r7, #4]
 802fcb0:	f000 ff14 	bl	8030adc <HAL_PCDEx_LPM_Callback>
 802fcb4:	e002      	b.n	802fcbc <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 802fcb6:	6878      	ldr	r0, [r7, #4]
 802fcb8:	f00b fdac 	bl	803b814 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 802fcbc:	687b      	ldr	r3, [r7, #4]
 802fcbe:	681b      	ldr	r3, [r3, #0]
 802fcc0:	695a      	ldr	r2, [r3, #20]
 802fcc2:	687b      	ldr	r3, [r7, #4]
 802fcc4:	681b      	ldr	r3, [r3, #0]
 802fcc6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 802fcca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 802fccc:	687b      	ldr	r3, [r7, #4]
 802fcce:	681b      	ldr	r3, [r3, #0]
 802fcd0:	4618      	mov	r0, r3
 802fcd2:	f009 f9c5 	bl	8039060 <USB_ReadInterrupts>
 802fcd6:	4603      	mov	r3, r0
 802fcd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 802fcdc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 802fce0:	d112      	bne.n	802fd08 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 802fce2:	69fb      	ldr	r3, [r7, #28]
 802fce4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802fce8:	689b      	ldr	r3, [r3, #8]
 802fcea:	f003 0301 	and.w	r3, r3, #1
 802fcee:	2b01      	cmp	r3, #1
 802fcf0:	d102      	bne.n	802fcf8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 802fcf2:	6878      	ldr	r0, [r7, #4]
 802fcf4:	f00b fd68 	bl	803b7c8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 802fcf8:	687b      	ldr	r3, [r7, #4]
 802fcfa:	681b      	ldr	r3, [r3, #0]
 802fcfc:	695a      	ldr	r2, [r3, #20]
 802fcfe:	687b      	ldr	r3, [r7, #4]
 802fd00:	681b      	ldr	r3, [r3, #0]
 802fd02:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 802fd06:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 802fd08:	687b      	ldr	r3, [r7, #4]
 802fd0a:	681b      	ldr	r3, [r3, #0]
 802fd0c:	4618      	mov	r0, r3
 802fd0e:	f009 f9a7 	bl	8039060 <USB_ReadInterrupts>
 802fd12:	4603      	mov	r3, r0
 802fd14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 802fd18:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 802fd1c:	d121      	bne.n	802fd62 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 802fd1e:	687b      	ldr	r3, [r7, #4]
 802fd20:	681b      	ldr	r3, [r3, #0]
 802fd22:	695a      	ldr	r2, [r3, #20]
 802fd24:	687b      	ldr	r3, [r7, #4]
 802fd26:	681b      	ldr	r3, [r3, #0]
 802fd28:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 802fd2c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 802fd2e:	687b      	ldr	r3, [r7, #4]
 802fd30:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 802fd34:	2b00      	cmp	r3, #0
 802fd36:	d111      	bne.n	802fd5c <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 802fd38:	687b      	ldr	r3, [r7, #4]
 802fd3a:	2201      	movs	r2, #1
 802fd3c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 802fd40:	687b      	ldr	r3, [r7, #4]
 802fd42:	681b      	ldr	r3, [r3, #0]
 802fd44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802fd46:	089b      	lsrs	r3, r3, #2
 802fd48:	f003 020f 	and.w	r2, r3, #15
 802fd4c:	687b      	ldr	r3, [r7, #4]
 802fd4e:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 802fd52:	2101      	movs	r1, #1
 802fd54:	6878      	ldr	r0, [r7, #4]
 802fd56:	f000 fec1 	bl	8030adc <HAL_PCDEx_LPM_Callback>
 802fd5a:	e002      	b.n	802fd62 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 802fd5c:	6878      	ldr	r0, [r7, #4]
 802fd5e:	f00b fd33 	bl	803b7c8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 802fd62:	687b      	ldr	r3, [r7, #4]
 802fd64:	681b      	ldr	r3, [r3, #0]
 802fd66:	4618      	mov	r0, r3
 802fd68:	f009 f97a 	bl	8039060 <USB_ReadInterrupts>
 802fd6c:	4603      	mov	r3, r0
 802fd6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 802fd72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802fd76:	f040 80b7 	bne.w	802fee8 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 802fd7a:	69fb      	ldr	r3, [r7, #28]
 802fd7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802fd80:	685b      	ldr	r3, [r3, #4]
 802fd82:	69fa      	ldr	r2, [r7, #28]
 802fd84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802fd88:	f023 0301 	bic.w	r3, r3, #1
 802fd8c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 802fd8e:	687b      	ldr	r3, [r7, #4]
 802fd90:	681b      	ldr	r3, [r3, #0]
 802fd92:	2110      	movs	r1, #16
 802fd94:	4618      	mov	r0, r3
 802fd96:	f008 f935 	bl	8038004 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 802fd9a:	2300      	movs	r3, #0
 802fd9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 802fd9e:	e046      	b.n	802fe2e <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 802fda0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802fda2:	015a      	lsls	r2, r3, #5
 802fda4:	69fb      	ldr	r3, [r7, #28]
 802fda6:	4413      	add	r3, r2
 802fda8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802fdac:	461a      	mov	r2, r3
 802fdae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 802fdb2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 802fdb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802fdb6:	015a      	lsls	r2, r3, #5
 802fdb8:	69fb      	ldr	r3, [r7, #28]
 802fdba:	4413      	add	r3, r2
 802fdbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802fdc0:	681b      	ldr	r3, [r3, #0]
 802fdc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802fdc4:	0151      	lsls	r1, r2, #5
 802fdc6:	69fa      	ldr	r2, [r7, #28]
 802fdc8:	440a      	add	r2, r1
 802fdca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802fdce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 802fdd2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 802fdd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802fdd6:	015a      	lsls	r2, r3, #5
 802fdd8:	69fb      	ldr	r3, [r7, #28]
 802fdda:	4413      	add	r3, r2
 802fddc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802fde0:	461a      	mov	r2, r3
 802fde2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 802fde6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 802fde8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802fdea:	015a      	lsls	r2, r3, #5
 802fdec:	69fb      	ldr	r3, [r7, #28]
 802fdee:	4413      	add	r3, r2
 802fdf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802fdf4:	681b      	ldr	r3, [r3, #0]
 802fdf6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802fdf8:	0151      	lsls	r1, r2, #5
 802fdfa:	69fa      	ldr	r2, [r7, #28]
 802fdfc:	440a      	add	r2, r1
 802fdfe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802fe02:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 802fe06:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 802fe08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802fe0a:	015a      	lsls	r2, r3, #5
 802fe0c:	69fb      	ldr	r3, [r7, #28]
 802fe0e:	4413      	add	r3, r2
 802fe10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802fe14:	681b      	ldr	r3, [r3, #0]
 802fe16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802fe18:	0151      	lsls	r1, r2, #5
 802fe1a:	69fa      	ldr	r2, [r7, #28]
 802fe1c:	440a      	add	r2, r1
 802fe1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802fe22:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 802fe26:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 802fe28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802fe2a:	3301      	adds	r3, #1
 802fe2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 802fe2e:	687b      	ldr	r3, [r7, #4]
 802fe30:	685b      	ldr	r3, [r3, #4]
 802fe32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802fe34:	429a      	cmp	r2, r3
 802fe36:	d3b3      	bcc.n	802fda0 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 802fe38:	69fb      	ldr	r3, [r7, #28]
 802fe3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802fe3e:	69db      	ldr	r3, [r3, #28]
 802fe40:	69fa      	ldr	r2, [r7, #28]
 802fe42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802fe46:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 802fe4a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 802fe4c:	687b      	ldr	r3, [r7, #4]
 802fe4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802fe50:	2b00      	cmp	r3, #0
 802fe52:	d016      	beq.n	802fe82 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 802fe54:	69fb      	ldr	r3, [r7, #28]
 802fe56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802fe5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802fe5e:	69fa      	ldr	r2, [r7, #28]
 802fe60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802fe64:	f043 030b 	orr.w	r3, r3, #11
 802fe68:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 802fe6c:	69fb      	ldr	r3, [r7, #28]
 802fe6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802fe72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802fe74:	69fa      	ldr	r2, [r7, #28]
 802fe76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802fe7a:	f043 030b 	orr.w	r3, r3, #11
 802fe7e:	6453      	str	r3, [r2, #68]	; 0x44
 802fe80:	e015      	b.n	802feae <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 802fe82:	69fb      	ldr	r3, [r7, #28]
 802fe84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802fe88:	695a      	ldr	r2, [r3, #20]
 802fe8a:	69fb      	ldr	r3, [r7, #28]
 802fe8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802fe90:	4619      	mov	r1, r3
 802fe92:	f242 032b 	movw	r3, #8235	; 0x202b
 802fe96:	4313      	orrs	r3, r2
 802fe98:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 802fe9a:	69fb      	ldr	r3, [r7, #28]
 802fe9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802fea0:	691b      	ldr	r3, [r3, #16]
 802fea2:	69fa      	ldr	r2, [r7, #28]
 802fea4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802fea8:	f043 030b 	orr.w	r3, r3, #11
 802feac:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 802feae:	69fb      	ldr	r3, [r7, #28]
 802feb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802feb4:	681b      	ldr	r3, [r3, #0]
 802feb6:	69fa      	ldr	r2, [r7, #28]
 802feb8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802febc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 802fec0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 802fec2:	687b      	ldr	r3, [r7, #4]
 802fec4:	6818      	ldr	r0, [r3, #0]
 802fec6:	687b      	ldr	r3, [r7, #4]
 802fec8:	691b      	ldr	r3, [r3, #16]
 802feca:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 802fecc:	687b      	ldr	r3, [r7, #4]
 802fece:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 802fed2:	461a      	mov	r2, r3
 802fed4:	f009 f98a 	bl	80391ec <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 802fed8:	687b      	ldr	r3, [r7, #4]
 802feda:	681b      	ldr	r3, [r3, #0]
 802fedc:	695a      	ldr	r2, [r3, #20]
 802fede:	687b      	ldr	r3, [r7, #4]
 802fee0:	681b      	ldr	r3, [r3, #0]
 802fee2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 802fee6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 802fee8:	687b      	ldr	r3, [r7, #4]
 802feea:	681b      	ldr	r3, [r3, #0]
 802feec:	4618      	mov	r0, r3
 802feee:	f009 f8b7 	bl	8039060 <USB_ReadInterrupts>
 802fef2:	4603      	mov	r3, r0
 802fef4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 802fef8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802fefc:	d124      	bne.n	802ff48 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 802fefe:	687b      	ldr	r3, [r7, #4]
 802ff00:	681b      	ldr	r3, [r3, #0]
 802ff02:	4618      	mov	r0, r3
 802ff04:	f009 f94e 	bl	80391a4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 802ff08:	687b      	ldr	r3, [r7, #4]
 802ff0a:	681b      	ldr	r3, [r3, #0]
 802ff0c:	4618      	mov	r0, r3
 802ff0e:	f008 f8f6 	bl	80380fe <USB_GetDevSpeed>
 802ff12:	4603      	mov	r3, r0
 802ff14:	461a      	mov	r2, r3
 802ff16:	687b      	ldr	r3, [r7, #4]
 802ff18:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 802ff1a:	687b      	ldr	r3, [r7, #4]
 802ff1c:	681c      	ldr	r4, [r3, #0]
 802ff1e:	f001 fd91 	bl	8031a44 <HAL_RCC_GetHCLKFreq>
 802ff22:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 802ff24:	687b      	ldr	r3, [r7, #4]
 802ff26:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 802ff28:	b2db      	uxtb	r3, r3
 802ff2a:	461a      	mov	r2, r3
 802ff2c:	4620      	mov	r0, r4
 802ff2e:	f007 fdfb 	bl	8037b28 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 802ff32:	6878      	ldr	r0, [r7, #4]
 802ff34:	f00b fc1f 	bl	803b776 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 802ff38:	687b      	ldr	r3, [r7, #4]
 802ff3a:	681b      	ldr	r3, [r3, #0]
 802ff3c:	695a      	ldr	r2, [r3, #20]
 802ff3e:	687b      	ldr	r3, [r7, #4]
 802ff40:	681b      	ldr	r3, [r3, #0]
 802ff42:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 802ff46:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 802ff48:	687b      	ldr	r3, [r7, #4]
 802ff4a:	681b      	ldr	r3, [r3, #0]
 802ff4c:	4618      	mov	r0, r3
 802ff4e:	f009 f887 	bl	8039060 <USB_ReadInterrupts>
 802ff52:	4603      	mov	r3, r0
 802ff54:	f003 0308 	and.w	r3, r3, #8
 802ff58:	2b08      	cmp	r3, #8
 802ff5a:	d10a      	bne.n	802ff72 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 802ff5c:	6878      	ldr	r0, [r7, #4]
 802ff5e:	f00b fbfc 	bl	803b75a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 802ff62:	687b      	ldr	r3, [r7, #4]
 802ff64:	681b      	ldr	r3, [r3, #0]
 802ff66:	695a      	ldr	r2, [r3, #20]
 802ff68:	687b      	ldr	r3, [r7, #4]
 802ff6a:	681b      	ldr	r3, [r3, #0]
 802ff6c:	f002 0208 	and.w	r2, r2, #8
 802ff70:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 802ff72:	687b      	ldr	r3, [r7, #4]
 802ff74:	681b      	ldr	r3, [r3, #0]
 802ff76:	4618      	mov	r0, r3
 802ff78:	f009 f872 	bl	8039060 <USB_ReadInterrupts>
 802ff7c:	4603      	mov	r3, r0
 802ff7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802ff82:	2b80      	cmp	r3, #128	; 0x80
 802ff84:	d122      	bne.n	802ffcc <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 802ff86:	6a3b      	ldr	r3, [r7, #32]
 802ff88:	699b      	ldr	r3, [r3, #24]
 802ff8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 802ff8e:	6a3b      	ldr	r3, [r7, #32]
 802ff90:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 802ff92:	2301      	movs	r3, #1
 802ff94:	627b      	str	r3, [r7, #36]	; 0x24
 802ff96:	e014      	b.n	802ffc2 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 802ff98:	6879      	ldr	r1, [r7, #4]
 802ff9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802ff9c:	4613      	mov	r3, r2
 802ff9e:	00db      	lsls	r3, r3, #3
 802ffa0:	4413      	add	r3, r2
 802ffa2:	009b      	lsls	r3, r3, #2
 802ffa4:	440b      	add	r3, r1
 802ffa6:	f203 237f 	addw	r3, r3, #639	; 0x27f
 802ffaa:	781b      	ldrb	r3, [r3, #0]
 802ffac:	2b01      	cmp	r3, #1
 802ffae:	d105      	bne.n	802ffbc <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 802ffb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802ffb2:	b2db      	uxtb	r3, r3
 802ffb4:	4619      	mov	r1, r3
 802ffb6:	6878      	ldr	r0, [r7, #4]
 802ffb8:	f000 fb27 	bl	803060a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 802ffbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802ffbe:	3301      	adds	r3, #1
 802ffc0:	627b      	str	r3, [r7, #36]	; 0x24
 802ffc2:	687b      	ldr	r3, [r7, #4]
 802ffc4:	685b      	ldr	r3, [r3, #4]
 802ffc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802ffc8:	429a      	cmp	r2, r3
 802ffca:	d3e5      	bcc.n	802ff98 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 802ffcc:	687b      	ldr	r3, [r7, #4]
 802ffce:	681b      	ldr	r3, [r3, #0]
 802ffd0:	4618      	mov	r0, r3
 802ffd2:	f009 f845 	bl	8039060 <USB_ReadInterrupts>
 802ffd6:	4603      	mov	r3, r0
 802ffd8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 802ffdc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 802ffe0:	d13b      	bne.n	803005a <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 802ffe2:	2301      	movs	r3, #1
 802ffe4:	627b      	str	r3, [r7, #36]	; 0x24
 802ffe6:	e02b      	b.n	8030040 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 802ffe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802ffea:	015a      	lsls	r2, r3, #5
 802ffec:	69fb      	ldr	r3, [r7, #28]
 802ffee:	4413      	add	r3, r2
 802fff0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802fff4:	681b      	ldr	r3, [r3, #0]
 802fff6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 802fff8:	6879      	ldr	r1, [r7, #4]
 802fffa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802fffc:	4613      	mov	r3, r2
 802fffe:	00db      	lsls	r3, r3, #3
 8030000:	4413      	add	r3, r2
 8030002:	009b      	lsls	r3, r3, #2
 8030004:	440b      	add	r3, r1
 8030006:	3340      	adds	r3, #64	; 0x40
 8030008:	781b      	ldrb	r3, [r3, #0]
 803000a:	2b01      	cmp	r3, #1
 803000c:	d115      	bne.n	803003a <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 803000e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8030010:	2b00      	cmp	r3, #0
 8030012:	da12      	bge.n	803003a <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8030014:	6879      	ldr	r1, [r7, #4]
 8030016:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8030018:	4613      	mov	r3, r2
 803001a:	00db      	lsls	r3, r3, #3
 803001c:	4413      	add	r3, r2
 803001e:	009b      	lsls	r3, r3, #2
 8030020:	440b      	add	r3, r1
 8030022:	333f      	adds	r3, #63	; 0x3f
 8030024:	2201      	movs	r2, #1
 8030026:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8030028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803002a:	b2db      	uxtb	r3, r3
 803002c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8030030:	b2db      	uxtb	r3, r3
 8030032:	4619      	mov	r1, r3
 8030034:	6878      	ldr	r0, [r7, #4]
 8030036:	f000 fae8 	bl	803060a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 803003a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803003c:	3301      	adds	r3, #1
 803003e:	627b      	str	r3, [r7, #36]	; 0x24
 8030040:	687b      	ldr	r3, [r7, #4]
 8030042:	685b      	ldr	r3, [r3, #4]
 8030044:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8030046:	429a      	cmp	r2, r3
 8030048:	d3ce      	bcc.n	802ffe8 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 803004a:	687b      	ldr	r3, [r7, #4]
 803004c:	681b      	ldr	r3, [r3, #0]
 803004e:	695a      	ldr	r2, [r3, #20]
 8030050:	687b      	ldr	r3, [r7, #4]
 8030052:	681b      	ldr	r3, [r3, #0]
 8030054:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8030058:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 803005a:	687b      	ldr	r3, [r7, #4]
 803005c:	681b      	ldr	r3, [r3, #0]
 803005e:	4618      	mov	r0, r3
 8030060:	f008 fffe 	bl	8039060 <USB_ReadInterrupts>
 8030064:	4603      	mov	r3, r0
 8030066:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 803006a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 803006e:	d155      	bne.n	803011c <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8030070:	2301      	movs	r3, #1
 8030072:	627b      	str	r3, [r7, #36]	; 0x24
 8030074:	e045      	b.n	8030102 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8030076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8030078:	015a      	lsls	r2, r3, #5
 803007a:	69fb      	ldr	r3, [r7, #28]
 803007c:	4413      	add	r3, r2
 803007e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8030082:	681b      	ldr	r3, [r3, #0]
 8030084:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8030086:	6879      	ldr	r1, [r7, #4]
 8030088:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 803008a:	4613      	mov	r3, r2
 803008c:	00db      	lsls	r3, r3, #3
 803008e:	4413      	add	r3, r2
 8030090:	009b      	lsls	r3, r3, #2
 8030092:	440b      	add	r3, r1
 8030094:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8030098:	781b      	ldrb	r3, [r3, #0]
 803009a:	2b01      	cmp	r3, #1
 803009c:	d12e      	bne.n	80300fc <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 803009e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80300a0:	2b00      	cmp	r3, #0
 80300a2:	da2b      	bge.n	80300fc <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80300a4:	69bb      	ldr	r3, [r7, #24]
 80300a6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80300aa:	687b      	ldr	r3, [r7, #4]
 80300ac:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80300b0:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80300b4:	429a      	cmp	r2, r3
 80300b6:	d121      	bne.n	80300fc <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80300b8:	6879      	ldr	r1, [r7, #4]
 80300ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80300bc:	4613      	mov	r3, r2
 80300be:	00db      	lsls	r3, r3, #3
 80300c0:	4413      	add	r3, r2
 80300c2:	009b      	lsls	r3, r3, #2
 80300c4:	440b      	add	r3, r1
 80300c6:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80300ca:	2201      	movs	r2, #1
 80300cc:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80300ce:	6a3b      	ldr	r3, [r7, #32]
 80300d0:	699b      	ldr	r3, [r3, #24]
 80300d2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80300d6:	6a3b      	ldr	r3, [r7, #32]
 80300d8:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80300da:	6a3b      	ldr	r3, [r7, #32]
 80300dc:	695b      	ldr	r3, [r3, #20]
 80300de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80300e2:	2b00      	cmp	r3, #0
 80300e4:	d10a      	bne.n	80300fc <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80300e6:	69fb      	ldr	r3, [r7, #28]
 80300e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80300ec:	685b      	ldr	r3, [r3, #4]
 80300ee:	69fa      	ldr	r2, [r7, #28]
 80300f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80300f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80300f8:	6053      	str	r3, [r2, #4]
            break;
 80300fa:	e007      	b.n	803010c <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80300fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80300fe:	3301      	adds	r3, #1
 8030100:	627b      	str	r3, [r7, #36]	; 0x24
 8030102:	687b      	ldr	r3, [r7, #4]
 8030104:	685b      	ldr	r3, [r3, #4]
 8030106:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8030108:	429a      	cmp	r2, r3
 803010a:	d3b4      	bcc.n	8030076 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 803010c:	687b      	ldr	r3, [r7, #4]
 803010e:	681b      	ldr	r3, [r3, #0]
 8030110:	695a      	ldr	r2, [r3, #20]
 8030112:	687b      	ldr	r3, [r7, #4]
 8030114:	681b      	ldr	r3, [r3, #0]
 8030116:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 803011a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 803011c:	687b      	ldr	r3, [r7, #4]
 803011e:	681b      	ldr	r3, [r3, #0]
 8030120:	4618      	mov	r0, r3
 8030122:	f008 ff9d 	bl	8039060 <USB_ReadInterrupts>
 8030126:	4603      	mov	r3, r0
 8030128:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 803012c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8030130:	d10a      	bne.n	8030148 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8030132:	6878      	ldr	r0, [r7, #4]
 8030134:	f00b fba0 	bl	803b878 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8030138:	687b      	ldr	r3, [r7, #4]
 803013a:	681b      	ldr	r3, [r3, #0]
 803013c:	695a      	ldr	r2, [r3, #20]
 803013e:	687b      	ldr	r3, [r7, #4]
 8030140:	681b      	ldr	r3, [r3, #0]
 8030142:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8030146:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8030148:	687b      	ldr	r3, [r7, #4]
 803014a:	681b      	ldr	r3, [r3, #0]
 803014c:	4618      	mov	r0, r3
 803014e:	f008 ff87 	bl	8039060 <USB_ReadInterrupts>
 8030152:	4603      	mov	r3, r0
 8030154:	f003 0304 	and.w	r3, r3, #4
 8030158:	2b04      	cmp	r3, #4
 803015a:	d115      	bne.n	8030188 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 803015c:	687b      	ldr	r3, [r7, #4]
 803015e:	681b      	ldr	r3, [r3, #0]
 8030160:	685b      	ldr	r3, [r3, #4]
 8030162:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8030164:	69bb      	ldr	r3, [r7, #24]
 8030166:	f003 0304 	and.w	r3, r3, #4
 803016a:	2b00      	cmp	r3, #0
 803016c:	d002      	beq.n	8030174 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 803016e:	6878      	ldr	r0, [r7, #4]
 8030170:	f00b fb90 	bl	803b894 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8030174:	687b      	ldr	r3, [r7, #4]
 8030176:	681b      	ldr	r3, [r3, #0]
 8030178:	6859      	ldr	r1, [r3, #4]
 803017a:	687b      	ldr	r3, [r7, #4]
 803017c:	681b      	ldr	r3, [r3, #0]
 803017e:	69ba      	ldr	r2, [r7, #24]
 8030180:	430a      	orrs	r2, r1
 8030182:	605a      	str	r2, [r3, #4]
 8030184:	e000      	b.n	8030188 <HAL_PCD_IRQHandler+0x992>
      return;
 8030186:	bf00      	nop
    }
  }
}
 8030188:	3734      	adds	r7, #52	; 0x34
 803018a:	46bd      	mov	sp, r7
 803018c:	bd90      	pop	{r4, r7, pc}

0803018e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 803018e:	b580      	push	{r7, lr}
 8030190:	b082      	sub	sp, #8
 8030192:	af00      	add	r7, sp, #0
 8030194:	6078      	str	r0, [r7, #4]
 8030196:	460b      	mov	r3, r1
 8030198:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 803019a:	687b      	ldr	r3, [r7, #4]
 803019c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80301a0:	2b01      	cmp	r3, #1
 80301a2:	d101      	bne.n	80301a8 <HAL_PCD_SetAddress+0x1a>
 80301a4:	2302      	movs	r3, #2
 80301a6:	e013      	b.n	80301d0 <HAL_PCD_SetAddress+0x42>
 80301a8:	687b      	ldr	r3, [r7, #4]
 80301aa:	2201      	movs	r2, #1
 80301ac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80301b0:	687b      	ldr	r3, [r7, #4]
 80301b2:	78fa      	ldrb	r2, [r7, #3]
 80301b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80301b8:	687b      	ldr	r3, [r7, #4]
 80301ba:	681b      	ldr	r3, [r3, #0]
 80301bc:	78fa      	ldrb	r2, [r7, #3]
 80301be:	4611      	mov	r1, r2
 80301c0:	4618      	mov	r0, r3
 80301c2:	f008 fee5 	bl	8038f90 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80301c6:	687b      	ldr	r3, [r7, #4]
 80301c8:	2200      	movs	r2, #0
 80301ca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80301ce:	2300      	movs	r3, #0
}
 80301d0:	4618      	mov	r0, r3
 80301d2:	3708      	adds	r7, #8
 80301d4:	46bd      	mov	sp, r7
 80301d6:	bd80      	pop	{r7, pc}

080301d8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80301d8:	b580      	push	{r7, lr}
 80301da:	b084      	sub	sp, #16
 80301dc:	af00      	add	r7, sp, #0
 80301de:	6078      	str	r0, [r7, #4]
 80301e0:	4608      	mov	r0, r1
 80301e2:	4611      	mov	r1, r2
 80301e4:	461a      	mov	r2, r3
 80301e6:	4603      	mov	r3, r0
 80301e8:	70fb      	strb	r3, [r7, #3]
 80301ea:	460b      	mov	r3, r1
 80301ec:	803b      	strh	r3, [r7, #0]
 80301ee:	4613      	mov	r3, r2
 80301f0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80301f2:	2300      	movs	r3, #0
 80301f4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80301f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80301fa:	2b00      	cmp	r3, #0
 80301fc:	da0f      	bge.n	803021e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80301fe:	78fb      	ldrb	r3, [r7, #3]
 8030200:	f003 020f 	and.w	r2, r3, #15
 8030204:	4613      	mov	r3, r2
 8030206:	00db      	lsls	r3, r3, #3
 8030208:	4413      	add	r3, r2
 803020a:	009b      	lsls	r3, r3, #2
 803020c:	3338      	adds	r3, #56	; 0x38
 803020e:	687a      	ldr	r2, [r7, #4]
 8030210:	4413      	add	r3, r2
 8030212:	3304      	adds	r3, #4
 8030214:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8030216:	68fb      	ldr	r3, [r7, #12]
 8030218:	2201      	movs	r2, #1
 803021a:	705a      	strb	r2, [r3, #1]
 803021c:	e00f      	b.n	803023e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 803021e:	78fb      	ldrb	r3, [r7, #3]
 8030220:	f003 020f 	and.w	r2, r3, #15
 8030224:	4613      	mov	r3, r2
 8030226:	00db      	lsls	r3, r3, #3
 8030228:	4413      	add	r3, r2
 803022a:	009b      	lsls	r3, r3, #2
 803022c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8030230:	687a      	ldr	r2, [r7, #4]
 8030232:	4413      	add	r3, r2
 8030234:	3304      	adds	r3, #4
 8030236:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8030238:	68fb      	ldr	r3, [r7, #12]
 803023a:	2200      	movs	r2, #0
 803023c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 803023e:	78fb      	ldrb	r3, [r7, #3]
 8030240:	f003 030f 	and.w	r3, r3, #15
 8030244:	b2da      	uxtb	r2, r3
 8030246:	68fb      	ldr	r3, [r7, #12]
 8030248:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 803024a:	883a      	ldrh	r2, [r7, #0]
 803024c:	68fb      	ldr	r3, [r7, #12]
 803024e:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8030250:	68fb      	ldr	r3, [r7, #12]
 8030252:	78ba      	ldrb	r2, [r7, #2]
 8030254:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8030256:	68fb      	ldr	r3, [r7, #12]
 8030258:	785b      	ldrb	r3, [r3, #1]
 803025a:	2b00      	cmp	r3, #0
 803025c:	d004      	beq.n	8030268 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 803025e:	68fb      	ldr	r3, [r7, #12]
 8030260:	781b      	ldrb	r3, [r3, #0]
 8030262:	b29a      	uxth	r2, r3
 8030264:	68fb      	ldr	r3, [r7, #12]
 8030266:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8030268:	78bb      	ldrb	r3, [r7, #2]
 803026a:	2b02      	cmp	r3, #2
 803026c:	d102      	bne.n	8030274 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 803026e:	68fb      	ldr	r3, [r7, #12]
 8030270:	2200      	movs	r2, #0
 8030272:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8030274:	687b      	ldr	r3, [r7, #4]
 8030276:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 803027a:	2b01      	cmp	r3, #1
 803027c:	d101      	bne.n	8030282 <HAL_PCD_EP_Open+0xaa>
 803027e:	2302      	movs	r3, #2
 8030280:	e00e      	b.n	80302a0 <HAL_PCD_EP_Open+0xc8>
 8030282:	687b      	ldr	r3, [r7, #4]
 8030284:	2201      	movs	r2, #1
 8030286:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 803028a:	687b      	ldr	r3, [r7, #4]
 803028c:	681b      	ldr	r3, [r3, #0]
 803028e:	68f9      	ldr	r1, [r7, #12]
 8030290:	4618      	mov	r0, r3
 8030292:	f007 ff59 	bl	8038148 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8030296:	687b      	ldr	r3, [r7, #4]
 8030298:	2200      	movs	r2, #0
 803029a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 803029e:	7afb      	ldrb	r3, [r7, #11]
}
 80302a0:	4618      	mov	r0, r3
 80302a2:	3710      	adds	r7, #16
 80302a4:	46bd      	mov	sp, r7
 80302a6:	bd80      	pop	{r7, pc}

080302a8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80302a8:	b580      	push	{r7, lr}
 80302aa:	b084      	sub	sp, #16
 80302ac:	af00      	add	r7, sp, #0
 80302ae:	6078      	str	r0, [r7, #4]
 80302b0:	460b      	mov	r3, r1
 80302b2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80302b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80302b8:	2b00      	cmp	r3, #0
 80302ba:	da0f      	bge.n	80302dc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80302bc:	78fb      	ldrb	r3, [r7, #3]
 80302be:	f003 020f 	and.w	r2, r3, #15
 80302c2:	4613      	mov	r3, r2
 80302c4:	00db      	lsls	r3, r3, #3
 80302c6:	4413      	add	r3, r2
 80302c8:	009b      	lsls	r3, r3, #2
 80302ca:	3338      	adds	r3, #56	; 0x38
 80302cc:	687a      	ldr	r2, [r7, #4]
 80302ce:	4413      	add	r3, r2
 80302d0:	3304      	adds	r3, #4
 80302d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80302d4:	68fb      	ldr	r3, [r7, #12]
 80302d6:	2201      	movs	r2, #1
 80302d8:	705a      	strb	r2, [r3, #1]
 80302da:	e00f      	b.n	80302fc <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80302dc:	78fb      	ldrb	r3, [r7, #3]
 80302de:	f003 020f 	and.w	r2, r3, #15
 80302e2:	4613      	mov	r3, r2
 80302e4:	00db      	lsls	r3, r3, #3
 80302e6:	4413      	add	r3, r2
 80302e8:	009b      	lsls	r3, r3, #2
 80302ea:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80302ee:	687a      	ldr	r2, [r7, #4]
 80302f0:	4413      	add	r3, r2
 80302f2:	3304      	adds	r3, #4
 80302f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80302f6:	68fb      	ldr	r3, [r7, #12]
 80302f8:	2200      	movs	r2, #0
 80302fa:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80302fc:	78fb      	ldrb	r3, [r7, #3]
 80302fe:	f003 030f 	and.w	r3, r3, #15
 8030302:	b2da      	uxtb	r2, r3
 8030304:	68fb      	ldr	r3, [r7, #12]
 8030306:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8030308:	687b      	ldr	r3, [r7, #4]
 803030a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 803030e:	2b01      	cmp	r3, #1
 8030310:	d101      	bne.n	8030316 <HAL_PCD_EP_Close+0x6e>
 8030312:	2302      	movs	r3, #2
 8030314:	e00e      	b.n	8030334 <HAL_PCD_EP_Close+0x8c>
 8030316:	687b      	ldr	r3, [r7, #4]
 8030318:	2201      	movs	r2, #1
 803031a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 803031e:	687b      	ldr	r3, [r7, #4]
 8030320:	681b      	ldr	r3, [r3, #0]
 8030322:	68f9      	ldr	r1, [r7, #12]
 8030324:	4618      	mov	r0, r3
 8030326:	f007 ff97 	bl	8038258 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 803032a:	687b      	ldr	r3, [r7, #4]
 803032c:	2200      	movs	r2, #0
 803032e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8030332:	2300      	movs	r3, #0
}
 8030334:	4618      	mov	r0, r3
 8030336:	3710      	adds	r7, #16
 8030338:	46bd      	mov	sp, r7
 803033a:	bd80      	pop	{r7, pc}

0803033c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 803033c:	b580      	push	{r7, lr}
 803033e:	b086      	sub	sp, #24
 8030340:	af00      	add	r7, sp, #0
 8030342:	60f8      	str	r0, [r7, #12]
 8030344:	607a      	str	r2, [r7, #4]
 8030346:	603b      	str	r3, [r7, #0]
 8030348:	460b      	mov	r3, r1
 803034a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 803034c:	7afb      	ldrb	r3, [r7, #11]
 803034e:	f003 020f 	and.w	r2, r3, #15
 8030352:	4613      	mov	r3, r2
 8030354:	00db      	lsls	r3, r3, #3
 8030356:	4413      	add	r3, r2
 8030358:	009b      	lsls	r3, r3, #2
 803035a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 803035e:	68fa      	ldr	r2, [r7, #12]
 8030360:	4413      	add	r3, r2
 8030362:	3304      	adds	r3, #4
 8030364:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8030366:	697b      	ldr	r3, [r7, #20]
 8030368:	687a      	ldr	r2, [r7, #4]
 803036a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 803036c:	697b      	ldr	r3, [r7, #20]
 803036e:	683a      	ldr	r2, [r7, #0]
 8030370:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8030372:	697b      	ldr	r3, [r7, #20]
 8030374:	2200      	movs	r2, #0
 8030376:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8030378:	697b      	ldr	r3, [r7, #20]
 803037a:	2200      	movs	r2, #0
 803037c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 803037e:	7afb      	ldrb	r3, [r7, #11]
 8030380:	f003 030f 	and.w	r3, r3, #15
 8030384:	b2da      	uxtb	r2, r3
 8030386:	697b      	ldr	r3, [r7, #20]
 8030388:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 803038a:	68fb      	ldr	r3, [r7, #12]
 803038c:	691b      	ldr	r3, [r3, #16]
 803038e:	2b01      	cmp	r3, #1
 8030390:	d102      	bne.n	8030398 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8030392:	687a      	ldr	r2, [r7, #4]
 8030394:	697b      	ldr	r3, [r7, #20]
 8030396:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8030398:	7afb      	ldrb	r3, [r7, #11]
 803039a:	f003 030f 	and.w	r3, r3, #15
 803039e:	2b00      	cmp	r3, #0
 80303a0:	d109      	bne.n	80303b6 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80303a2:	68fb      	ldr	r3, [r7, #12]
 80303a4:	6818      	ldr	r0, [r3, #0]
 80303a6:	68fb      	ldr	r3, [r7, #12]
 80303a8:	691b      	ldr	r3, [r3, #16]
 80303aa:	b2db      	uxtb	r3, r3
 80303ac:	461a      	mov	r2, r3
 80303ae:	6979      	ldr	r1, [r7, #20]
 80303b0:	f008 fa7e 	bl	80388b0 <USB_EP0StartXfer>
 80303b4:	e008      	b.n	80303c8 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80303b6:	68fb      	ldr	r3, [r7, #12]
 80303b8:	6818      	ldr	r0, [r3, #0]
 80303ba:	68fb      	ldr	r3, [r7, #12]
 80303bc:	691b      	ldr	r3, [r3, #16]
 80303be:	b2db      	uxtb	r3, r3
 80303c0:	461a      	mov	r2, r3
 80303c2:	6979      	ldr	r1, [r7, #20]
 80303c4:	f008 f824 	bl	8038410 <USB_EPStartXfer>
  }

  return HAL_OK;
 80303c8:	2300      	movs	r3, #0
}
 80303ca:	4618      	mov	r0, r3
 80303cc:	3718      	adds	r7, #24
 80303ce:	46bd      	mov	sp, r7
 80303d0:	bd80      	pop	{r7, pc}

080303d2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80303d2:	b480      	push	{r7}
 80303d4:	b083      	sub	sp, #12
 80303d6:	af00      	add	r7, sp, #0
 80303d8:	6078      	str	r0, [r7, #4]
 80303da:	460b      	mov	r3, r1
 80303dc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80303de:	78fb      	ldrb	r3, [r7, #3]
 80303e0:	f003 020f 	and.w	r2, r3, #15
 80303e4:	6879      	ldr	r1, [r7, #4]
 80303e6:	4613      	mov	r3, r2
 80303e8:	00db      	lsls	r3, r3, #3
 80303ea:	4413      	add	r3, r2
 80303ec:	009b      	lsls	r3, r3, #2
 80303ee:	440b      	add	r3, r1
 80303f0:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80303f4:	681b      	ldr	r3, [r3, #0]
}
 80303f6:	4618      	mov	r0, r3
 80303f8:	370c      	adds	r7, #12
 80303fa:	46bd      	mov	sp, r7
 80303fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030400:	4770      	bx	lr

08030402 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8030402:	b580      	push	{r7, lr}
 8030404:	b086      	sub	sp, #24
 8030406:	af00      	add	r7, sp, #0
 8030408:	60f8      	str	r0, [r7, #12]
 803040a:	607a      	str	r2, [r7, #4]
 803040c:	603b      	str	r3, [r7, #0]
 803040e:	460b      	mov	r3, r1
 8030410:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8030412:	7afb      	ldrb	r3, [r7, #11]
 8030414:	f003 020f 	and.w	r2, r3, #15
 8030418:	4613      	mov	r3, r2
 803041a:	00db      	lsls	r3, r3, #3
 803041c:	4413      	add	r3, r2
 803041e:	009b      	lsls	r3, r3, #2
 8030420:	3338      	adds	r3, #56	; 0x38
 8030422:	68fa      	ldr	r2, [r7, #12]
 8030424:	4413      	add	r3, r2
 8030426:	3304      	adds	r3, #4
 8030428:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 803042a:	697b      	ldr	r3, [r7, #20]
 803042c:	687a      	ldr	r2, [r7, #4]
 803042e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8030430:	697b      	ldr	r3, [r7, #20]
 8030432:	683a      	ldr	r2, [r7, #0]
 8030434:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8030436:	697b      	ldr	r3, [r7, #20]
 8030438:	2200      	movs	r2, #0
 803043a:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 803043c:	697b      	ldr	r3, [r7, #20]
 803043e:	2201      	movs	r2, #1
 8030440:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8030442:	7afb      	ldrb	r3, [r7, #11]
 8030444:	f003 030f 	and.w	r3, r3, #15
 8030448:	b2da      	uxtb	r2, r3
 803044a:	697b      	ldr	r3, [r7, #20]
 803044c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 803044e:	68fb      	ldr	r3, [r7, #12]
 8030450:	691b      	ldr	r3, [r3, #16]
 8030452:	2b01      	cmp	r3, #1
 8030454:	d102      	bne.n	803045c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8030456:	687a      	ldr	r2, [r7, #4]
 8030458:	697b      	ldr	r3, [r7, #20]
 803045a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 803045c:	7afb      	ldrb	r3, [r7, #11]
 803045e:	f003 030f 	and.w	r3, r3, #15
 8030462:	2b00      	cmp	r3, #0
 8030464:	d109      	bne.n	803047a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8030466:	68fb      	ldr	r3, [r7, #12]
 8030468:	6818      	ldr	r0, [r3, #0]
 803046a:	68fb      	ldr	r3, [r7, #12]
 803046c:	691b      	ldr	r3, [r3, #16]
 803046e:	b2db      	uxtb	r3, r3
 8030470:	461a      	mov	r2, r3
 8030472:	6979      	ldr	r1, [r7, #20]
 8030474:	f008 fa1c 	bl	80388b0 <USB_EP0StartXfer>
 8030478:	e008      	b.n	803048c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 803047a:	68fb      	ldr	r3, [r7, #12]
 803047c:	6818      	ldr	r0, [r3, #0]
 803047e:	68fb      	ldr	r3, [r7, #12]
 8030480:	691b      	ldr	r3, [r3, #16]
 8030482:	b2db      	uxtb	r3, r3
 8030484:	461a      	mov	r2, r3
 8030486:	6979      	ldr	r1, [r7, #20]
 8030488:	f007 ffc2 	bl	8038410 <USB_EPStartXfer>
  }

  return HAL_OK;
 803048c:	2300      	movs	r3, #0
}
 803048e:	4618      	mov	r0, r3
 8030490:	3718      	adds	r7, #24
 8030492:	46bd      	mov	sp, r7
 8030494:	bd80      	pop	{r7, pc}

08030496 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8030496:	b580      	push	{r7, lr}
 8030498:	b084      	sub	sp, #16
 803049a:	af00      	add	r7, sp, #0
 803049c:	6078      	str	r0, [r7, #4]
 803049e:	460b      	mov	r3, r1
 80304a0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80304a2:	78fb      	ldrb	r3, [r7, #3]
 80304a4:	f003 020f 	and.w	r2, r3, #15
 80304a8:	687b      	ldr	r3, [r7, #4]
 80304aa:	685b      	ldr	r3, [r3, #4]
 80304ac:	429a      	cmp	r2, r3
 80304ae:	d901      	bls.n	80304b4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80304b0:	2301      	movs	r3, #1
 80304b2:	e050      	b.n	8030556 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80304b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80304b8:	2b00      	cmp	r3, #0
 80304ba:	da0f      	bge.n	80304dc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80304bc:	78fb      	ldrb	r3, [r7, #3]
 80304be:	f003 020f 	and.w	r2, r3, #15
 80304c2:	4613      	mov	r3, r2
 80304c4:	00db      	lsls	r3, r3, #3
 80304c6:	4413      	add	r3, r2
 80304c8:	009b      	lsls	r3, r3, #2
 80304ca:	3338      	adds	r3, #56	; 0x38
 80304cc:	687a      	ldr	r2, [r7, #4]
 80304ce:	4413      	add	r3, r2
 80304d0:	3304      	adds	r3, #4
 80304d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80304d4:	68fb      	ldr	r3, [r7, #12]
 80304d6:	2201      	movs	r2, #1
 80304d8:	705a      	strb	r2, [r3, #1]
 80304da:	e00d      	b.n	80304f8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80304dc:	78fa      	ldrb	r2, [r7, #3]
 80304de:	4613      	mov	r3, r2
 80304e0:	00db      	lsls	r3, r3, #3
 80304e2:	4413      	add	r3, r2
 80304e4:	009b      	lsls	r3, r3, #2
 80304e6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80304ea:	687a      	ldr	r2, [r7, #4]
 80304ec:	4413      	add	r3, r2
 80304ee:	3304      	adds	r3, #4
 80304f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80304f2:	68fb      	ldr	r3, [r7, #12]
 80304f4:	2200      	movs	r2, #0
 80304f6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80304f8:	68fb      	ldr	r3, [r7, #12]
 80304fa:	2201      	movs	r2, #1
 80304fc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80304fe:	78fb      	ldrb	r3, [r7, #3]
 8030500:	f003 030f 	and.w	r3, r3, #15
 8030504:	b2da      	uxtb	r2, r3
 8030506:	68fb      	ldr	r3, [r7, #12]
 8030508:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 803050a:	687b      	ldr	r3, [r7, #4]
 803050c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8030510:	2b01      	cmp	r3, #1
 8030512:	d101      	bne.n	8030518 <HAL_PCD_EP_SetStall+0x82>
 8030514:	2302      	movs	r3, #2
 8030516:	e01e      	b.n	8030556 <HAL_PCD_EP_SetStall+0xc0>
 8030518:	687b      	ldr	r3, [r7, #4]
 803051a:	2201      	movs	r2, #1
 803051c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8030520:	687b      	ldr	r3, [r7, #4]
 8030522:	681b      	ldr	r3, [r3, #0]
 8030524:	68f9      	ldr	r1, [r7, #12]
 8030526:	4618      	mov	r0, r3
 8030528:	f008 fc5e 	bl	8038de8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 803052c:	78fb      	ldrb	r3, [r7, #3]
 803052e:	f003 030f 	and.w	r3, r3, #15
 8030532:	2b00      	cmp	r3, #0
 8030534:	d10a      	bne.n	803054c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8030536:	687b      	ldr	r3, [r7, #4]
 8030538:	6818      	ldr	r0, [r3, #0]
 803053a:	687b      	ldr	r3, [r7, #4]
 803053c:	691b      	ldr	r3, [r3, #16]
 803053e:	b2d9      	uxtb	r1, r3
 8030540:	687b      	ldr	r3, [r7, #4]
 8030542:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8030546:	461a      	mov	r2, r3
 8030548:	f008 fe50 	bl	80391ec <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 803054c:	687b      	ldr	r3, [r7, #4]
 803054e:	2200      	movs	r2, #0
 8030550:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8030554:	2300      	movs	r3, #0
}
 8030556:	4618      	mov	r0, r3
 8030558:	3710      	adds	r7, #16
 803055a:	46bd      	mov	sp, r7
 803055c:	bd80      	pop	{r7, pc}

0803055e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 803055e:	b580      	push	{r7, lr}
 8030560:	b084      	sub	sp, #16
 8030562:	af00      	add	r7, sp, #0
 8030564:	6078      	str	r0, [r7, #4]
 8030566:	460b      	mov	r3, r1
 8030568:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 803056a:	78fb      	ldrb	r3, [r7, #3]
 803056c:	f003 020f 	and.w	r2, r3, #15
 8030570:	687b      	ldr	r3, [r7, #4]
 8030572:	685b      	ldr	r3, [r3, #4]
 8030574:	429a      	cmp	r2, r3
 8030576:	d901      	bls.n	803057c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8030578:	2301      	movs	r3, #1
 803057a:	e042      	b.n	8030602 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 803057c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8030580:	2b00      	cmp	r3, #0
 8030582:	da0f      	bge.n	80305a4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8030584:	78fb      	ldrb	r3, [r7, #3]
 8030586:	f003 020f 	and.w	r2, r3, #15
 803058a:	4613      	mov	r3, r2
 803058c:	00db      	lsls	r3, r3, #3
 803058e:	4413      	add	r3, r2
 8030590:	009b      	lsls	r3, r3, #2
 8030592:	3338      	adds	r3, #56	; 0x38
 8030594:	687a      	ldr	r2, [r7, #4]
 8030596:	4413      	add	r3, r2
 8030598:	3304      	adds	r3, #4
 803059a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 803059c:	68fb      	ldr	r3, [r7, #12]
 803059e:	2201      	movs	r2, #1
 80305a0:	705a      	strb	r2, [r3, #1]
 80305a2:	e00f      	b.n	80305c4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80305a4:	78fb      	ldrb	r3, [r7, #3]
 80305a6:	f003 020f 	and.w	r2, r3, #15
 80305aa:	4613      	mov	r3, r2
 80305ac:	00db      	lsls	r3, r3, #3
 80305ae:	4413      	add	r3, r2
 80305b0:	009b      	lsls	r3, r3, #2
 80305b2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80305b6:	687a      	ldr	r2, [r7, #4]
 80305b8:	4413      	add	r3, r2
 80305ba:	3304      	adds	r3, #4
 80305bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80305be:	68fb      	ldr	r3, [r7, #12]
 80305c0:	2200      	movs	r2, #0
 80305c2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80305c4:	68fb      	ldr	r3, [r7, #12]
 80305c6:	2200      	movs	r2, #0
 80305c8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80305ca:	78fb      	ldrb	r3, [r7, #3]
 80305cc:	f003 030f 	and.w	r3, r3, #15
 80305d0:	b2da      	uxtb	r2, r3
 80305d2:	68fb      	ldr	r3, [r7, #12]
 80305d4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80305d6:	687b      	ldr	r3, [r7, #4]
 80305d8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80305dc:	2b01      	cmp	r3, #1
 80305de:	d101      	bne.n	80305e4 <HAL_PCD_EP_ClrStall+0x86>
 80305e0:	2302      	movs	r3, #2
 80305e2:	e00e      	b.n	8030602 <HAL_PCD_EP_ClrStall+0xa4>
 80305e4:	687b      	ldr	r3, [r7, #4]
 80305e6:	2201      	movs	r2, #1
 80305e8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80305ec:	687b      	ldr	r3, [r7, #4]
 80305ee:	681b      	ldr	r3, [r3, #0]
 80305f0:	68f9      	ldr	r1, [r7, #12]
 80305f2:	4618      	mov	r0, r3
 80305f4:	f008 fc66 	bl	8038ec4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80305f8:	687b      	ldr	r3, [r7, #4]
 80305fa:	2200      	movs	r2, #0
 80305fc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8030600:	2300      	movs	r3, #0
}
 8030602:	4618      	mov	r0, r3
 8030604:	3710      	adds	r7, #16
 8030606:	46bd      	mov	sp, r7
 8030608:	bd80      	pop	{r7, pc}

0803060a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 803060a:	b580      	push	{r7, lr}
 803060c:	b084      	sub	sp, #16
 803060e:	af00      	add	r7, sp, #0
 8030610:	6078      	str	r0, [r7, #4]
 8030612:	460b      	mov	r3, r1
 8030614:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8030616:	f997 3003 	ldrsb.w	r3, [r7, #3]
 803061a:	2b00      	cmp	r3, #0
 803061c:	da0c      	bge.n	8030638 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 803061e:	78fb      	ldrb	r3, [r7, #3]
 8030620:	f003 020f 	and.w	r2, r3, #15
 8030624:	4613      	mov	r3, r2
 8030626:	00db      	lsls	r3, r3, #3
 8030628:	4413      	add	r3, r2
 803062a:	009b      	lsls	r3, r3, #2
 803062c:	3338      	adds	r3, #56	; 0x38
 803062e:	687a      	ldr	r2, [r7, #4]
 8030630:	4413      	add	r3, r2
 8030632:	3304      	adds	r3, #4
 8030634:	60fb      	str	r3, [r7, #12]
 8030636:	e00c      	b.n	8030652 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8030638:	78fb      	ldrb	r3, [r7, #3]
 803063a:	f003 020f 	and.w	r2, r3, #15
 803063e:	4613      	mov	r3, r2
 8030640:	00db      	lsls	r3, r3, #3
 8030642:	4413      	add	r3, r2
 8030644:	009b      	lsls	r3, r3, #2
 8030646:	f503 731e 	add.w	r3, r3, #632	; 0x278
 803064a:	687a      	ldr	r2, [r7, #4]
 803064c:	4413      	add	r3, r2
 803064e:	3304      	adds	r3, #4
 8030650:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8030652:	687b      	ldr	r3, [r7, #4]
 8030654:	681b      	ldr	r3, [r3, #0]
 8030656:	68f9      	ldr	r1, [r7, #12]
 8030658:	4618      	mov	r0, r3
 803065a:	f008 fa85 	bl	8038b68 <USB_EPStopXfer>
 803065e:	4603      	mov	r3, r0
 8030660:	72fb      	strb	r3, [r7, #11]

  return ret;
 8030662:	7afb      	ldrb	r3, [r7, #11]
}
 8030664:	4618      	mov	r0, r3
 8030666:	3710      	adds	r7, #16
 8030668:	46bd      	mov	sp, r7
 803066a:	bd80      	pop	{r7, pc}

0803066c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 803066c:	b580      	push	{r7, lr}
 803066e:	b08a      	sub	sp, #40	; 0x28
 8030670:	af02      	add	r7, sp, #8
 8030672:	6078      	str	r0, [r7, #4]
 8030674:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8030676:	687b      	ldr	r3, [r7, #4]
 8030678:	681b      	ldr	r3, [r3, #0]
 803067a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803067c:	697b      	ldr	r3, [r7, #20]
 803067e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8030680:	683a      	ldr	r2, [r7, #0]
 8030682:	4613      	mov	r3, r2
 8030684:	00db      	lsls	r3, r3, #3
 8030686:	4413      	add	r3, r2
 8030688:	009b      	lsls	r3, r3, #2
 803068a:	3338      	adds	r3, #56	; 0x38
 803068c:	687a      	ldr	r2, [r7, #4]
 803068e:	4413      	add	r3, r2
 8030690:	3304      	adds	r3, #4
 8030692:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8030694:	68fb      	ldr	r3, [r7, #12]
 8030696:	6a1a      	ldr	r2, [r3, #32]
 8030698:	68fb      	ldr	r3, [r7, #12]
 803069a:	699b      	ldr	r3, [r3, #24]
 803069c:	429a      	cmp	r2, r3
 803069e:	d901      	bls.n	80306a4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80306a0:	2301      	movs	r3, #1
 80306a2:	e06c      	b.n	803077e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80306a4:	68fb      	ldr	r3, [r7, #12]
 80306a6:	699a      	ldr	r2, [r3, #24]
 80306a8:	68fb      	ldr	r3, [r7, #12]
 80306aa:	6a1b      	ldr	r3, [r3, #32]
 80306ac:	1ad3      	subs	r3, r2, r3
 80306ae:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80306b0:	68fb      	ldr	r3, [r7, #12]
 80306b2:	68db      	ldr	r3, [r3, #12]
 80306b4:	69fa      	ldr	r2, [r7, #28]
 80306b6:	429a      	cmp	r2, r3
 80306b8:	d902      	bls.n	80306c0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80306ba:	68fb      	ldr	r3, [r7, #12]
 80306bc:	68db      	ldr	r3, [r3, #12]
 80306be:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80306c0:	69fb      	ldr	r3, [r7, #28]
 80306c2:	3303      	adds	r3, #3
 80306c4:	089b      	lsrs	r3, r3, #2
 80306c6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80306c8:	e02b      	b.n	8030722 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80306ca:	68fb      	ldr	r3, [r7, #12]
 80306cc:	699a      	ldr	r2, [r3, #24]
 80306ce:	68fb      	ldr	r3, [r7, #12]
 80306d0:	6a1b      	ldr	r3, [r3, #32]
 80306d2:	1ad3      	subs	r3, r2, r3
 80306d4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80306d6:	68fb      	ldr	r3, [r7, #12]
 80306d8:	68db      	ldr	r3, [r3, #12]
 80306da:	69fa      	ldr	r2, [r7, #28]
 80306dc:	429a      	cmp	r2, r3
 80306de:	d902      	bls.n	80306e6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80306e0:	68fb      	ldr	r3, [r7, #12]
 80306e2:	68db      	ldr	r3, [r3, #12]
 80306e4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80306e6:	69fb      	ldr	r3, [r7, #28]
 80306e8:	3303      	adds	r3, #3
 80306ea:	089b      	lsrs	r3, r3, #2
 80306ec:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80306ee:	68fb      	ldr	r3, [r7, #12]
 80306f0:	6919      	ldr	r1, [r3, #16]
 80306f2:	683b      	ldr	r3, [r7, #0]
 80306f4:	b2da      	uxtb	r2, r3
 80306f6:	69fb      	ldr	r3, [r7, #28]
 80306f8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80306fa:	687b      	ldr	r3, [r7, #4]
 80306fc:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80306fe:	b2db      	uxtb	r3, r3
 8030700:	9300      	str	r3, [sp, #0]
 8030702:	4603      	mov	r3, r0
 8030704:	6978      	ldr	r0, [r7, #20]
 8030706:	f008 fad9 	bl	8038cbc <USB_WritePacket>

    ep->xfer_buff  += len;
 803070a:	68fb      	ldr	r3, [r7, #12]
 803070c:	691a      	ldr	r2, [r3, #16]
 803070e:	69fb      	ldr	r3, [r7, #28]
 8030710:	441a      	add	r2, r3
 8030712:	68fb      	ldr	r3, [r7, #12]
 8030714:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8030716:	68fb      	ldr	r3, [r7, #12]
 8030718:	6a1a      	ldr	r2, [r3, #32]
 803071a:	69fb      	ldr	r3, [r7, #28]
 803071c:	441a      	add	r2, r3
 803071e:	68fb      	ldr	r3, [r7, #12]
 8030720:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8030722:	683b      	ldr	r3, [r7, #0]
 8030724:	015a      	lsls	r2, r3, #5
 8030726:	693b      	ldr	r3, [r7, #16]
 8030728:	4413      	add	r3, r2
 803072a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803072e:	699b      	ldr	r3, [r3, #24]
 8030730:	b29b      	uxth	r3, r3
 8030732:	69ba      	ldr	r2, [r7, #24]
 8030734:	429a      	cmp	r2, r3
 8030736:	d809      	bhi.n	803074c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8030738:	68fb      	ldr	r3, [r7, #12]
 803073a:	6a1a      	ldr	r2, [r3, #32]
 803073c:	68fb      	ldr	r3, [r7, #12]
 803073e:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8030740:	429a      	cmp	r2, r3
 8030742:	d203      	bcs.n	803074c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8030744:	68fb      	ldr	r3, [r7, #12]
 8030746:	699b      	ldr	r3, [r3, #24]
 8030748:	2b00      	cmp	r3, #0
 803074a:	d1be      	bne.n	80306ca <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 803074c:	68fb      	ldr	r3, [r7, #12]
 803074e:	699a      	ldr	r2, [r3, #24]
 8030750:	68fb      	ldr	r3, [r7, #12]
 8030752:	6a1b      	ldr	r3, [r3, #32]
 8030754:	429a      	cmp	r2, r3
 8030756:	d811      	bhi.n	803077c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8030758:	683b      	ldr	r3, [r7, #0]
 803075a:	f003 030f 	and.w	r3, r3, #15
 803075e:	2201      	movs	r2, #1
 8030760:	fa02 f303 	lsl.w	r3, r2, r3
 8030764:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8030766:	693b      	ldr	r3, [r7, #16]
 8030768:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803076c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 803076e:	68bb      	ldr	r3, [r7, #8]
 8030770:	43db      	mvns	r3, r3
 8030772:	6939      	ldr	r1, [r7, #16]
 8030774:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8030778:	4013      	ands	r3, r2
 803077a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 803077c:	2300      	movs	r3, #0
}
 803077e:	4618      	mov	r0, r3
 8030780:	3720      	adds	r7, #32
 8030782:	46bd      	mov	sp, r7
 8030784:	bd80      	pop	{r7, pc}
	...

08030788 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8030788:	b580      	push	{r7, lr}
 803078a:	b088      	sub	sp, #32
 803078c:	af00      	add	r7, sp, #0
 803078e:	6078      	str	r0, [r7, #4]
 8030790:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8030792:	687b      	ldr	r3, [r7, #4]
 8030794:	681b      	ldr	r3, [r3, #0]
 8030796:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8030798:	69fb      	ldr	r3, [r7, #28]
 803079a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 803079c:	69fb      	ldr	r3, [r7, #28]
 803079e:	333c      	adds	r3, #60	; 0x3c
 80307a0:	3304      	adds	r3, #4
 80307a2:	681b      	ldr	r3, [r3, #0]
 80307a4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80307a6:	683b      	ldr	r3, [r7, #0]
 80307a8:	015a      	lsls	r2, r3, #5
 80307aa:	69bb      	ldr	r3, [r7, #24]
 80307ac:	4413      	add	r3, r2
 80307ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80307b2:	689b      	ldr	r3, [r3, #8]
 80307b4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80307b6:	687b      	ldr	r3, [r7, #4]
 80307b8:	691b      	ldr	r3, [r3, #16]
 80307ba:	2b01      	cmp	r3, #1
 80307bc:	d17b      	bne.n	80308b6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80307be:	693b      	ldr	r3, [r7, #16]
 80307c0:	f003 0308 	and.w	r3, r3, #8
 80307c4:	2b00      	cmp	r3, #0
 80307c6:	d015      	beq.n	80307f4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80307c8:	697b      	ldr	r3, [r7, #20]
 80307ca:	4a61      	ldr	r2, [pc, #388]	; (8030950 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80307cc:	4293      	cmp	r3, r2
 80307ce:	f240 80b9 	bls.w	8030944 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80307d2:	693b      	ldr	r3, [r7, #16]
 80307d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80307d8:	2b00      	cmp	r3, #0
 80307da:	f000 80b3 	beq.w	8030944 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80307de:	683b      	ldr	r3, [r7, #0]
 80307e0:	015a      	lsls	r2, r3, #5
 80307e2:	69bb      	ldr	r3, [r7, #24]
 80307e4:	4413      	add	r3, r2
 80307e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80307ea:	461a      	mov	r2, r3
 80307ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80307f0:	6093      	str	r3, [r2, #8]
 80307f2:	e0a7      	b.n	8030944 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80307f4:	693b      	ldr	r3, [r7, #16]
 80307f6:	f003 0320 	and.w	r3, r3, #32
 80307fa:	2b00      	cmp	r3, #0
 80307fc:	d009      	beq.n	8030812 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80307fe:	683b      	ldr	r3, [r7, #0]
 8030800:	015a      	lsls	r2, r3, #5
 8030802:	69bb      	ldr	r3, [r7, #24]
 8030804:	4413      	add	r3, r2
 8030806:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803080a:	461a      	mov	r2, r3
 803080c:	2320      	movs	r3, #32
 803080e:	6093      	str	r3, [r2, #8]
 8030810:	e098      	b.n	8030944 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8030812:	693b      	ldr	r3, [r7, #16]
 8030814:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8030818:	2b00      	cmp	r3, #0
 803081a:	f040 8093 	bne.w	8030944 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 803081e:	697b      	ldr	r3, [r7, #20]
 8030820:	4a4b      	ldr	r2, [pc, #300]	; (8030950 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8030822:	4293      	cmp	r3, r2
 8030824:	d90f      	bls.n	8030846 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8030826:	693b      	ldr	r3, [r7, #16]
 8030828:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 803082c:	2b00      	cmp	r3, #0
 803082e:	d00a      	beq.n	8030846 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8030830:	683b      	ldr	r3, [r7, #0]
 8030832:	015a      	lsls	r2, r3, #5
 8030834:	69bb      	ldr	r3, [r7, #24]
 8030836:	4413      	add	r3, r2
 8030838:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803083c:	461a      	mov	r2, r3
 803083e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8030842:	6093      	str	r3, [r2, #8]
 8030844:	e07e      	b.n	8030944 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8030846:	683a      	ldr	r2, [r7, #0]
 8030848:	4613      	mov	r3, r2
 803084a:	00db      	lsls	r3, r3, #3
 803084c:	4413      	add	r3, r2
 803084e:	009b      	lsls	r3, r3, #2
 8030850:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8030854:	687a      	ldr	r2, [r7, #4]
 8030856:	4413      	add	r3, r2
 8030858:	3304      	adds	r3, #4
 803085a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 803085c:	68fb      	ldr	r3, [r7, #12]
 803085e:	69da      	ldr	r2, [r3, #28]
 8030860:	683b      	ldr	r3, [r7, #0]
 8030862:	0159      	lsls	r1, r3, #5
 8030864:	69bb      	ldr	r3, [r7, #24]
 8030866:	440b      	add	r3, r1
 8030868:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803086c:	691b      	ldr	r3, [r3, #16]
 803086e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8030872:	1ad2      	subs	r2, r2, r3
 8030874:	68fb      	ldr	r3, [r7, #12]
 8030876:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8030878:	683b      	ldr	r3, [r7, #0]
 803087a:	2b00      	cmp	r3, #0
 803087c:	d114      	bne.n	80308a8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 803087e:	68fb      	ldr	r3, [r7, #12]
 8030880:	699b      	ldr	r3, [r3, #24]
 8030882:	2b00      	cmp	r3, #0
 8030884:	d109      	bne.n	803089a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8030886:	687b      	ldr	r3, [r7, #4]
 8030888:	6818      	ldr	r0, [r3, #0]
 803088a:	687b      	ldr	r3, [r7, #4]
 803088c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8030890:	461a      	mov	r2, r3
 8030892:	2101      	movs	r1, #1
 8030894:	f008 fcaa 	bl	80391ec <USB_EP0_OutStart>
 8030898:	e006      	b.n	80308a8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 803089a:	68fb      	ldr	r3, [r7, #12]
 803089c:	691a      	ldr	r2, [r3, #16]
 803089e:	68fb      	ldr	r3, [r7, #12]
 80308a0:	6a1b      	ldr	r3, [r3, #32]
 80308a2:	441a      	add	r2, r3
 80308a4:	68fb      	ldr	r3, [r7, #12]
 80308a6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80308a8:	683b      	ldr	r3, [r7, #0]
 80308aa:	b2db      	uxtb	r3, r3
 80308ac:	4619      	mov	r1, r3
 80308ae:	6878      	ldr	r0, [r7, #4]
 80308b0:	f00a ff1e 	bl	803b6f0 <HAL_PCD_DataOutStageCallback>
 80308b4:	e046      	b.n	8030944 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80308b6:	697b      	ldr	r3, [r7, #20]
 80308b8:	4a26      	ldr	r2, [pc, #152]	; (8030954 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80308ba:	4293      	cmp	r3, r2
 80308bc:	d124      	bne.n	8030908 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80308be:	693b      	ldr	r3, [r7, #16]
 80308c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80308c4:	2b00      	cmp	r3, #0
 80308c6:	d00a      	beq.n	80308de <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80308c8:	683b      	ldr	r3, [r7, #0]
 80308ca:	015a      	lsls	r2, r3, #5
 80308cc:	69bb      	ldr	r3, [r7, #24]
 80308ce:	4413      	add	r3, r2
 80308d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80308d4:	461a      	mov	r2, r3
 80308d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80308da:	6093      	str	r3, [r2, #8]
 80308dc:	e032      	b.n	8030944 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80308de:	693b      	ldr	r3, [r7, #16]
 80308e0:	f003 0320 	and.w	r3, r3, #32
 80308e4:	2b00      	cmp	r3, #0
 80308e6:	d008      	beq.n	80308fa <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80308e8:	683b      	ldr	r3, [r7, #0]
 80308ea:	015a      	lsls	r2, r3, #5
 80308ec:	69bb      	ldr	r3, [r7, #24]
 80308ee:	4413      	add	r3, r2
 80308f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80308f4:	461a      	mov	r2, r3
 80308f6:	2320      	movs	r3, #32
 80308f8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80308fa:	683b      	ldr	r3, [r7, #0]
 80308fc:	b2db      	uxtb	r3, r3
 80308fe:	4619      	mov	r1, r3
 8030900:	6878      	ldr	r0, [r7, #4]
 8030902:	f00a fef5 	bl	803b6f0 <HAL_PCD_DataOutStageCallback>
 8030906:	e01d      	b.n	8030944 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8030908:	683b      	ldr	r3, [r7, #0]
 803090a:	2b00      	cmp	r3, #0
 803090c:	d114      	bne.n	8030938 <PCD_EP_OutXfrComplete_int+0x1b0>
 803090e:	6879      	ldr	r1, [r7, #4]
 8030910:	683a      	ldr	r2, [r7, #0]
 8030912:	4613      	mov	r3, r2
 8030914:	00db      	lsls	r3, r3, #3
 8030916:	4413      	add	r3, r2
 8030918:	009b      	lsls	r3, r3, #2
 803091a:	440b      	add	r3, r1
 803091c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8030920:	681b      	ldr	r3, [r3, #0]
 8030922:	2b00      	cmp	r3, #0
 8030924:	d108      	bne.n	8030938 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8030926:	687b      	ldr	r3, [r7, #4]
 8030928:	6818      	ldr	r0, [r3, #0]
 803092a:	687b      	ldr	r3, [r7, #4]
 803092c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8030930:	461a      	mov	r2, r3
 8030932:	2100      	movs	r1, #0
 8030934:	f008 fc5a 	bl	80391ec <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8030938:	683b      	ldr	r3, [r7, #0]
 803093a:	b2db      	uxtb	r3, r3
 803093c:	4619      	mov	r1, r3
 803093e:	6878      	ldr	r0, [r7, #4]
 8030940:	f00a fed6 	bl	803b6f0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8030944:	2300      	movs	r3, #0
}
 8030946:	4618      	mov	r0, r3
 8030948:	3720      	adds	r7, #32
 803094a:	46bd      	mov	sp, r7
 803094c:	bd80      	pop	{r7, pc}
 803094e:	bf00      	nop
 8030950:	4f54300a 	.word	0x4f54300a
 8030954:	4f54310a 	.word	0x4f54310a

08030958 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8030958:	b580      	push	{r7, lr}
 803095a:	b086      	sub	sp, #24
 803095c:	af00      	add	r7, sp, #0
 803095e:	6078      	str	r0, [r7, #4]
 8030960:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8030962:	687b      	ldr	r3, [r7, #4]
 8030964:	681b      	ldr	r3, [r3, #0]
 8030966:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8030968:	697b      	ldr	r3, [r7, #20]
 803096a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 803096c:	697b      	ldr	r3, [r7, #20]
 803096e:	333c      	adds	r3, #60	; 0x3c
 8030970:	3304      	adds	r3, #4
 8030972:	681b      	ldr	r3, [r3, #0]
 8030974:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8030976:	683b      	ldr	r3, [r7, #0]
 8030978:	015a      	lsls	r2, r3, #5
 803097a:	693b      	ldr	r3, [r7, #16]
 803097c:	4413      	add	r3, r2
 803097e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8030982:	689b      	ldr	r3, [r3, #8]
 8030984:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8030986:	68fb      	ldr	r3, [r7, #12]
 8030988:	4a15      	ldr	r2, [pc, #84]	; (80309e0 <PCD_EP_OutSetupPacket_int+0x88>)
 803098a:	4293      	cmp	r3, r2
 803098c:	d90e      	bls.n	80309ac <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 803098e:	68bb      	ldr	r3, [r7, #8]
 8030990:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8030994:	2b00      	cmp	r3, #0
 8030996:	d009      	beq.n	80309ac <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8030998:	683b      	ldr	r3, [r7, #0]
 803099a:	015a      	lsls	r2, r3, #5
 803099c:	693b      	ldr	r3, [r7, #16]
 803099e:	4413      	add	r3, r2
 80309a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80309a4:	461a      	mov	r2, r3
 80309a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80309aa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80309ac:	6878      	ldr	r0, [r7, #4]
 80309ae:	f00a fe8d 	bl	803b6cc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80309b2:	68fb      	ldr	r3, [r7, #12]
 80309b4:	4a0a      	ldr	r2, [pc, #40]	; (80309e0 <PCD_EP_OutSetupPacket_int+0x88>)
 80309b6:	4293      	cmp	r3, r2
 80309b8:	d90c      	bls.n	80309d4 <PCD_EP_OutSetupPacket_int+0x7c>
 80309ba:	687b      	ldr	r3, [r7, #4]
 80309bc:	691b      	ldr	r3, [r3, #16]
 80309be:	2b01      	cmp	r3, #1
 80309c0:	d108      	bne.n	80309d4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80309c2:	687b      	ldr	r3, [r7, #4]
 80309c4:	6818      	ldr	r0, [r3, #0]
 80309c6:	687b      	ldr	r3, [r7, #4]
 80309c8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80309cc:	461a      	mov	r2, r3
 80309ce:	2101      	movs	r1, #1
 80309d0:	f008 fc0c 	bl	80391ec <USB_EP0_OutStart>
  }

  return HAL_OK;
 80309d4:	2300      	movs	r3, #0
}
 80309d6:	4618      	mov	r0, r3
 80309d8:	3718      	adds	r7, #24
 80309da:	46bd      	mov	sp, r7
 80309dc:	bd80      	pop	{r7, pc}
 80309de:	bf00      	nop
 80309e0:	4f54300a 	.word	0x4f54300a

080309e4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80309e4:	b480      	push	{r7}
 80309e6:	b085      	sub	sp, #20
 80309e8:	af00      	add	r7, sp, #0
 80309ea:	6078      	str	r0, [r7, #4]
 80309ec:	460b      	mov	r3, r1
 80309ee:	70fb      	strb	r3, [r7, #3]
 80309f0:	4613      	mov	r3, r2
 80309f2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80309f4:	687b      	ldr	r3, [r7, #4]
 80309f6:	681b      	ldr	r3, [r3, #0]
 80309f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80309fa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80309fc:	78fb      	ldrb	r3, [r7, #3]
 80309fe:	2b00      	cmp	r3, #0
 8030a00:	d107      	bne.n	8030a12 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8030a02:	883b      	ldrh	r3, [r7, #0]
 8030a04:	0419      	lsls	r1, r3, #16
 8030a06:	687b      	ldr	r3, [r7, #4]
 8030a08:	681b      	ldr	r3, [r3, #0]
 8030a0a:	68ba      	ldr	r2, [r7, #8]
 8030a0c:	430a      	orrs	r2, r1
 8030a0e:	629a      	str	r2, [r3, #40]	; 0x28
 8030a10:	e028      	b.n	8030a64 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8030a12:	687b      	ldr	r3, [r7, #4]
 8030a14:	681b      	ldr	r3, [r3, #0]
 8030a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8030a18:	0c1b      	lsrs	r3, r3, #16
 8030a1a:	68ba      	ldr	r2, [r7, #8]
 8030a1c:	4413      	add	r3, r2
 8030a1e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8030a20:	2300      	movs	r3, #0
 8030a22:	73fb      	strb	r3, [r7, #15]
 8030a24:	e00d      	b.n	8030a42 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8030a26:	687b      	ldr	r3, [r7, #4]
 8030a28:	681a      	ldr	r2, [r3, #0]
 8030a2a:	7bfb      	ldrb	r3, [r7, #15]
 8030a2c:	3340      	adds	r3, #64	; 0x40
 8030a2e:	009b      	lsls	r3, r3, #2
 8030a30:	4413      	add	r3, r2
 8030a32:	685b      	ldr	r3, [r3, #4]
 8030a34:	0c1b      	lsrs	r3, r3, #16
 8030a36:	68ba      	ldr	r2, [r7, #8]
 8030a38:	4413      	add	r3, r2
 8030a3a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8030a3c:	7bfb      	ldrb	r3, [r7, #15]
 8030a3e:	3301      	adds	r3, #1
 8030a40:	73fb      	strb	r3, [r7, #15]
 8030a42:	7bfa      	ldrb	r2, [r7, #15]
 8030a44:	78fb      	ldrb	r3, [r7, #3]
 8030a46:	3b01      	subs	r3, #1
 8030a48:	429a      	cmp	r2, r3
 8030a4a:	d3ec      	bcc.n	8030a26 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8030a4c:	883b      	ldrh	r3, [r7, #0]
 8030a4e:	0418      	lsls	r0, r3, #16
 8030a50:	687b      	ldr	r3, [r7, #4]
 8030a52:	6819      	ldr	r1, [r3, #0]
 8030a54:	78fb      	ldrb	r3, [r7, #3]
 8030a56:	3b01      	subs	r3, #1
 8030a58:	68ba      	ldr	r2, [r7, #8]
 8030a5a:	4302      	orrs	r2, r0
 8030a5c:	3340      	adds	r3, #64	; 0x40
 8030a5e:	009b      	lsls	r3, r3, #2
 8030a60:	440b      	add	r3, r1
 8030a62:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8030a64:	2300      	movs	r3, #0
}
 8030a66:	4618      	mov	r0, r3
 8030a68:	3714      	adds	r7, #20
 8030a6a:	46bd      	mov	sp, r7
 8030a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030a70:	4770      	bx	lr

08030a72 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8030a72:	b480      	push	{r7}
 8030a74:	b083      	sub	sp, #12
 8030a76:	af00      	add	r7, sp, #0
 8030a78:	6078      	str	r0, [r7, #4]
 8030a7a:	460b      	mov	r3, r1
 8030a7c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8030a7e:	687b      	ldr	r3, [r7, #4]
 8030a80:	681b      	ldr	r3, [r3, #0]
 8030a82:	887a      	ldrh	r2, [r7, #2]
 8030a84:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8030a86:	2300      	movs	r3, #0
}
 8030a88:	4618      	mov	r0, r3
 8030a8a:	370c      	adds	r7, #12
 8030a8c:	46bd      	mov	sp, r7
 8030a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030a92:	4770      	bx	lr

08030a94 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8030a94:	b480      	push	{r7}
 8030a96:	b085      	sub	sp, #20
 8030a98:	af00      	add	r7, sp, #0
 8030a9a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8030a9c:	687b      	ldr	r3, [r7, #4]
 8030a9e:	681b      	ldr	r3, [r3, #0]
 8030aa0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8030aa2:	687b      	ldr	r3, [r7, #4]
 8030aa4:	2201      	movs	r2, #1
 8030aa6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8030aaa:	687b      	ldr	r3, [r7, #4]
 8030aac:	2200      	movs	r2, #0
 8030aae:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8030ab2:	68fb      	ldr	r3, [r7, #12]
 8030ab4:	699b      	ldr	r3, [r3, #24]
 8030ab6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8030aba:	68fb      	ldr	r3, [r7, #12]
 8030abc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8030abe:	68fb      	ldr	r3, [r7, #12]
 8030ac0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8030ac2:	4b05      	ldr	r3, [pc, #20]	; (8030ad8 <HAL_PCDEx_ActivateLPM+0x44>)
 8030ac4:	4313      	orrs	r3, r2
 8030ac6:	68fa      	ldr	r2, [r7, #12]
 8030ac8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8030aca:	2300      	movs	r3, #0
}
 8030acc:	4618      	mov	r0, r3
 8030ace:	3714      	adds	r7, #20
 8030ad0:	46bd      	mov	sp, r7
 8030ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030ad6:	4770      	bx	lr
 8030ad8:	10000003 	.word	0x10000003

08030adc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8030adc:	b480      	push	{r7}
 8030ade:	b083      	sub	sp, #12
 8030ae0:	af00      	add	r7, sp, #0
 8030ae2:	6078      	str	r0, [r7, #4]
 8030ae4:	460b      	mov	r3, r1
 8030ae6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8030ae8:	bf00      	nop
 8030aea:	370c      	adds	r7, #12
 8030aec:	46bd      	mov	sp, r7
 8030aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030af2:	4770      	bx	lr

08030af4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8030af4:	b580      	push	{r7, lr}
 8030af6:	b084      	sub	sp, #16
 8030af8:	af00      	add	r7, sp, #0
 8030afa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8030afc:	4b19      	ldr	r3, [pc, #100]	; (8030b64 <HAL_PWREx_ConfigSupply+0x70>)
 8030afe:	68db      	ldr	r3, [r3, #12]
 8030b00:	f003 0304 	and.w	r3, r3, #4
 8030b04:	2b04      	cmp	r3, #4
 8030b06:	d00a      	beq.n	8030b1e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8030b08:	4b16      	ldr	r3, [pc, #88]	; (8030b64 <HAL_PWREx_ConfigSupply+0x70>)
 8030b0a:	68db      	ldr	r3, [r3, #12]
 8030b0c:	f003 0307 	and.w	r3, r3, #7
 8030b10:	687a      	ldr	r2, [r7, #4]
 8030b12:	429a      	cmp	r2, r3
 8030b14:	d001      	beq.n	8030b1a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8030b16:	2301      	movs	r3, #1
 8030b18:	e01f      	b.n	8030b5a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8030b1a:	2300      	movs	r3, #0
 8030b1c:	e01d      	b.n	8030b5a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8030b1e:	4b11      	ldr	r3, [pc, #68]	; (8030b64 <HAL_PWREx_ConfigSupply+0x70>)
 8030b20:	68db      	ldr	r3, [r3, #12]
 8030b22:	f023 0207 	bic.w	r2, r3, #7
 8030b26:	490f      	ldr	r1, [pc, #60]	; (8030b64 <HAL_PWREx_ConfigSupply+0x70>)
 8030b28:	687b      	ldr	r3, [r7, #4]
 8030b2a:	4313      	orrs	r3, r2
 8030b2c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8030b2e:	f7fa f843 	bl	802abb8 <HAL_GetTick>
 8030b32:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8030b34:	e009      	b.n	8030b4a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8030b36:	f7fa f83f 	bl	802abb8 <HAL_GetTick>
 8030b3a:	4602      	mov	r2, r0
 8030b3c:	68fb      	ldr	r3, [r7, #12]
 8030b3e:	1ad3      	subs	r3, r2, r3
 8030b40:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8030b44:	d901      	bls.n	8030b4a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8030b46:	2301      	movs	r3, #1
 8030b48:	e007      	b.n	8030b5a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8030b4a:	4b06      	ldr	r3, [pc, #24]	; (8030b64 <HAL_PWREx_ConfigSupply+0x70>)
 8030b4c:	685b      	ldr	r3, [r3, #4]
 8030b4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8030b52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8030b56:	d1ee      	bne.n	8030b36 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8030b58:	2300      	movs	r3, #0
}
 8030b5a:	4618      	mov	r0, r3
 8030b5c:	3710      	adds	r7, #16
 8030b5e:	46bd      	mov	sp, r7
 8030b60:	bd80      	pop	{r7, pc}
 8030b62:	bf00      	nop
 8030b64:	58024800 	.word	0x58024800

08030b68 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8030b68:	b480      	push	{r7}
 8030b6a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8030b6c:	4b05      	ldr	r3, [pc, #20]	; (8030b84 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8030b6e:	68db      	ldr	r3, [r3, #12]
 8030b70:	4a04      	ldr	r2, [pc, #16]	; (8030b84 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8030b72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8030b76:	60d3      	str	r3, [r2, #12]
}
 8030b78:	bf00      	nop
 8030b7a:	46bd      	mov	sp, r7
 8030b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030b80:	4770      	bx	lr
 8030b82:	bf00      	nop
 8030b84:	58024800 	.word	0x58024800

08030b88 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8030b88:	b580      	push	{r7, lr}
 8030b8a:	b08c      	sub	sp, #48	; 0x30
 8030b8c:	af00      	add	r7, sp, #0
 8030b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8030b90:	687b      	ldr	r3, [r7, #4]
 8030b92:	2b00      	cmp	r3, #0
 8030b94:	d102      	bne.n	8030b9c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8030b96:	2301      	movs	r3, #1
 8030b98:	f000 bc1d 	b.w	80313d6 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8030b9c:	687b      	ldr	r3, [r7, #4]
 8030b9e:	681b      	ldr	r3, [r3, #0]
 8030ba0:	f003 0301 	and.w	r3, r3, #1
 8030ba4:	2b00      	cmp	r3, #0
 8030ba6:	f000 8087 	beq.w	8030cb8 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8030baa:	4b99      	ldr	r3, [pc, #612]	; (8030e10 <HAL_RCC_OscConfig+0x288>)
 8030bac:	691b      	ldr	r3, [r3, #16]
 8030bae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8030bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8030bb4:	4b96      	ldr	r3, [pc, #600]	; (8030e10 <HAL_RCC_OscConfig+0x288>)
 8030bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8030bb8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8030bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8030bbc:	2b10      	cmp	r3, #16
 8030bbe:	d007      	beq.n	8030bd0 <HAL_RCC_OscConfig+0x48>
 8030bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8030bc2:	2b18      	cmp	r3, #24
 8030bc4:	d110      	bne.n	8030be8 <HAL_RCC_OscConfig+0x60>
 8030bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8030bc8:	f003 0303 	and.w	r3, r3, #3
 8030bcc:	2b02      	cmp	r3, #2
 8030bce:	d10b      	bne.n	8030be8 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8030bd0:	4b8f      	ldr	r3, [pc, #572]	; (8030e10 <HAL_RCC_OscConfig+0x288>)
 8030bd2:	681b      	ldr	r3, [r3, #0]
 8030bd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8030bd8:	2b00      	cmp	r3, #0
 8030bda:	d06c      	beq.n	8030cb6 <HAL_RCC_OscConfig+0x12e>
 8030bdc:	687b      	ldr	r3, [r7, #4]
 8030bde:	685b      	ldr	r3, [r3, #4]
 8030be0:	2b00      	cmp	r3, #0
 8030be2:	d168      	bne.n	8030cb6 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8030be4:	2301      	movs	r3, #1
 8030be6:	e3f6      	b.n	80313d6 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8030be8:	687b      	ldr	r3, [r7, #4]
 8030bea:	685b      	ldr	r3, [r3, #4]
 8030bec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8030bf0:	d106      	bne.n	8030c00 <HAL_RCC_OscConfig+0x78>
 8030bf2:	4b87      	ldr	r3, [pc, #540]	; (8030e10 <HAL_RCC_OscConfig+0x288>)
 8030bf4:	681b      	ldr	r3, [r3, #0]
 8030bf6:	4a86      	ldr	r2, [pc, #536]	; (8030e10 <HAL_RCC_OscConfig+0x288>)
 8030bf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8030bfc:	6013      	str	r3, [r2, #0]
 8030bfe:	e02e      	b.n	8030c5e <HAL_RCC_OscConfig+0xd6>
 8030c00:	687b      	ldr	r3, [r7, #4]
 8030c02:	685b      	ldr	r3, [r3, #4]
 8030c04:	2b00      	cmp	r3, #0
 8030c06:	d10c      	bne.n	8030c22 <HAL_RCC_OscConfig+0x9a>
 8030c08:	4b81      	ldr	r3, [pc, #516]	; (8030e10 <HAL_RCC_OscConfig+0x288>)
 8030c0a:	681b      	ldr	r3, [r3, #0]
 8030c0c:	4a80      	ldr	r2, [pc, #512]	; (8030e10 <HAL_RCC_OscConfig+0x288>)
 8030c0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8030c12:	6013      	str	r3, [r2, #0]
 8030c14:	4b7e      	ldr	r3, [pc, #504]	; (8030e10 <HAL_RCC_OscConfig+0x288>)
 8030c16:	681b      	ldr	r3, [r3, #0]
 8030c18:	4a7d      	ldr	r2, [pc, #500]	; (8030e10 <HAL_RCC_OscConfig+0x288>)
 8030c1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8030c1e:	6013      	str	r3, [r2, #0]
 8030c20:	e01d      	b.n	8030c5e <HAL_RCC_OscConfig+0xd6>
 8030c22:	687b      	ldr	r3, [r7, #4]
 8030c24:	685b      	ldr	r3, [r3, #4]
 8030c26:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8030c2a:	d10c      	bne.n	8030c46 <HAL_RCC_OscConfig+0xbe>
 8030c2c:	4b78      	ldr	r3, [pc, #480]	; (8030e10 <HAL_RCC_OscConfig+0x288>)
 8030c2e:	681b      	ldr	r3, [r3, #0]
 8030c30:	4a77      	ldr	r2, [pc, #476]	; (8030e10 <HAL_RCC_OscConfig+0x288>)
 8030c32:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8030c36:	6013      	str	r3, [r2, #0]
 8030c38:	4b75      	ldr	r3, [pc, #468]	; (8030e10 <HAL_RCC_OscConfig+0x288>)
 8030c3a:	681b      	ldr	r3, [r3, #0]
 8030c3c:	4a74      	ldr	r2, [pc, #464]	; (8030e10 <HAL_RCC_OscConfig+0x288>)
 8030c3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8030c42:	6013      	str	r3, [r2, #0]
 8030c44:	e00b      	b.n	8030c5e <HAL_RCC_OscConfig+0xd6>
 8030c46:	4b72      	ldr	r3, [pc, #456]	; (8030e10 <HAL_RCC_OscConfig+0x288>)
 8030c48:	681b      	ldr	r3, [r3, #0]
 8030c4a:	4a71      	ldr	r2, [pc, #452]	; (8030e10 <HAL_RCC_OscConfig+0x288>)
 8030c4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8030c50:	6013      	str	r3, [r2, #0]
 8030c52:	4b6f      	ldr	r3, [pc, #444]	; (8030e10 <HAL_RCC_OscConfig+0x288>)
 8030c54:	681b      	ldr	r3, [r3, #0]
 8030c56:	4a6e      	ldr	r2, [pc, #440]	; (8030e10 <HAL_RCC_OscConfig+0x288>)
 8030c58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8030c5c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8030c5e:	687b      	ldr	r3, [r7, #4]
 8030c60:	685b      	ldr	r3, [r3, #4]
 8030c62:	2b00      	cmp	r3, #0
 8030c64:	d013      	beq.n	8030c8e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8030c66:	f7f9 ffa7 	bl	802abb8 <HAL_GetTick>
 8030c6a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8030c6c:	e008      	b.n	8030c80 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8030c6e:	f7f9 ffa3 	bl	802abb8 <HAL_GetTick>
 8030c72:	4602      	mov	r2, r0
 8030c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8030c76:	1ad3      	subs	r3, r2, r3
 8030c78:	2b64      	cmp	r3, #100	; 0x64
 8030c7a:	d901      	bls.n	8030c80 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8030c7c:	2303      	movs	r3, #3
 8030c7e:	e3aa      	b.n	80313d6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8030c80:	4b63      	ldr	r3, [pc, #396]	; (8030e10 <HAL_RCC_OscConfig+0x288>)
 8030c82:	681b      	ldr	r3, [r3, #0]
 8030c84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8030c88:	2b00      	cmp	r3, #0
 8030c8a:	d0f0      	beq.n	8030c6e <HAL_RCC_OscConfig+0xe6>
 8030c8c:	e014      	b.n	8030cb8 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8030c8e:	f7f9 ff93 	bl	802abb8 <HAL_GetTick>
 8030c92:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8030c94:	e008      	b.n	8030ca8 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8030c96:	f7f9 ff8f 	bl	802abb8 <HAL_GetTick>
 8030c9a:	4602      	mov	r2, r0
 8030c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8030c9e:	1ad3      	subs	r3, r2, r3
 8030ca0:	2b64      	cmp	r3, #100	; 0x64
 8030ca2:	d901      	bls.n	8030ca8 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8030ca4:	2303      	movs	r3, #3
 8030ca6:	e396      	b.n	80313d6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8030ca8:	4b59      	ldr	r3, [pc, #356]	; (8030e10 <HAL_RCC_OscConfig+0x288>)
 8030caa:	681b      	ldr	r3, [r3, #0]
 8030cac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8030cb0:	2b00      	cmp	r3, #0
 8030cb2:	d1f0      	bne.n	8030c96 <HAL_RCC_OscConfig+0x10e>
 8030cb4:	e000      	b.n	8030cb8 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8030cb6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8030cb8:	687b      	ldr	r3, [r7, #4]
 8030cba:	681b      	ldr	r3, [r3, #0]
 8030cbc:	f003 0302 	and.w	r3, r3, #2
 8030cc0:	2b00      	cmp	r3, #0
 8030cc2:	f000 80cb 	beq.w	8030e5c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8030cc6:	4b52      	ldr	r3, [pc, #328]	; (8030e10 <HAL_RCC_OscConfig+0x288>)
 8030cc8:	691b      	ldr	r3, [r3, #16]
 8030cca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8030cce:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8030cd0:	4b4f      	ldr	r3, [pc, #316]	; (8030e10 <HAL_RCC_OscConfig+0x288>)
 8030cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8030cd4:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8030cd6:	6a3b      	ldr	r3, [r7, #32]
 8030cd8:	2b00      	cmp	r3, #0
 8030cda:	d007      	beq.n	8030cec <HAL_RCC_OscConfig+0x164>
 8030cdc:	6a3b      	ldr	r3, [r7, #32]
 8030cde:	2b18      	cmp	r3, #24
 8030ce0:	d156      	bne.n	8030d90 <HAL_RCC_OscConfig+0x208>
 8030ce2:	69fb      	ldr	r3, [r7, #28]
 8030ce4:	f003 0303 	and.w	r3, r3, #3
 8030ce8:	2b00      	cmp	r3, #0
 8030cea:	d151      	bne.n	8030d90 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8030cec:	4b48      	ldr	r3, [pc, #288]	; (8030e10 <HAL_RCC_OscConfig+0x288>)
 8030cee:	681b      	ldr	r3, [r3, #0]
 8030cf0:	f003 0304 	and.w	r3, r3, #4
 8030cf4:	2b00      	cmp	r3, #0
 8030cf6:	d005      	beq.n	8030d04 <HAL_RCC_OscConfig+0x17c>
 8030cf8:	687b      	ldr	r3, [r7, #4]
 8030cfa:	68db      	ldr	r3, [r3, #12]
 8030cfc:	2b00      	cmp	r3, #0
 8030cfe:	d101      	bne.n	8030d04 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8030d00:	2301      	movs	r3, #1
 8030d02:	e368      	b.n	80313d6 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8030d04:	4b42      	ldr	r3, [pc, #264]	; (8030e10 <HAL_RCC_OscConfig+0x288>)
 8030d06:	681b      	ldr	r3, [r3, #0]
 8030d08:	f023 0219 	bic.w	r2, r3, #25
 8030d0c:	687b      	ldr	r3, [r7, #4]
 8030d0e:	68db      	ldr	r3, [r3, #12]
 8030d10:	493f      	ldr	r1, [pc, #252]	; (8030e10 <HAL_RCC_OscConfig+0x288>)
 8030d12:	4313      	orrs	r3, r2
 8030d14:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8030d16:	f7f9 ff4f 	bl	802abb8 <HAL_GetTick>
 8030d1a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8030d1c:	e008      	b.n	8030d30 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8030d1e:	f7f9 ff4b 	bl	802abb8 <HAL_GetTick>
 8030d22:	4602      	mov	r2, r0
 8030d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8030d26:	1ad3      	subs	r3, r2, r3
 8030d28:	2b02      	cmp	r3, #2
 8030d2a:	d901      	bls.n	8030d30 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8030d2c:	2303      	movs	r3, #3
 8030d2e:	e352      	b.n	80313d6 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8030d30:	4b37      	ldr	r3, [pc, #220]	; (8030e10 <HAL_RCC_OscConfig+0x288>)
 8030d32:	681b      	ldr	r3, [r3, #0]
 8030d34:	f003 0304 	and.w	r3, r3, #4
 8030d38:	2b00      	cmp	r3, #0
 8030d3a:	d0f0      	beq.n	8030d1e <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8030d3c:	f7f9 ff6c 	bl	802ac18 <HAL_GetREVID>
 8030d40:	4603      	mov	r3, r0
 8030d42:	f241 0203 	movw	r2, #4099	; 0x1003
 8030d46:	4293      	cmp	r3, r2
 8030d48:	d817      	bhi.n	8030d7a <HAL_RCC_OscConfig+0x1f2>
 8030d4a:	687b      	ldr	r3, [r7, #4]
 8030d4c:	691b      	ldr	r3, [r3, #16]
 8030d4e:	2b40      	cmp	r3, #64	; 0x40
 8030d50:	d108      	bne.n	8030d64 <HAL_RCC_OscConfig+0x1dc>
 8030d52:	4b2f      	ldr	r3, [pc, #188]	; (8030e10 <HAL_RCC_OscConfig+0x288>)
 8030d54:	685b      	ldr	r3, [r3, #4]
 8030d56:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8030d5a:	4a2d      	ldr	r2, [pc, #180]	; (8030e10 <HAL_RCC_OscConfig+0x288>)
 8030d5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8030d60:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8030d62:	e07b      	b.n	8030e5c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8030d64:	4b2a      	ldr	r3, [pc, #168]	; (8030e10 <HAL_RCC_OscConfig+0x288>)
 8030d66:	685b      	ldr	r3, [r3, #4]
 8030d68:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8030d6c:	687b      	ldr	r3, [r7, #4]
 8030d6e:	691b      	ldr	r3, [r3, #16]
 8030d70:	031b      	lsls	r3, r3, #12
 8030d72:	4927      	ldr	r1, [pc, #156]	; (8030e10 <HAL_RCC_OscConfig+0x288>)
 8030d74:	4313      	orrs	r3, r2
 8030d76:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8030d78:	e070      	b.n	8030e5c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8030d7a:	4b25      	ldr	r3, [pc, #148]	; (8030e10 <HAL_RCC_OscConfig+0x288>)
 8030d7c:	685b      	ldr	r3, [r3, #4]
 8030d7e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8030d82:	687b      	ldr	r3, [r7, #4]
 8030d84:	691b      	ldr	r3, [r3, #16]
 8030d86:	061b      	lsls	r3, r3, #24
 8030d88:	4921      	ldr	r1, [pc, #132]	; (8030e10 <HAL_RCC_OscConfig+0x288>)
 8030d8a:	4313      	orrs	r3, r2
 8030d8c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8030d8e:	e065      	b.n	8030e5c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8030d90:	687b      	ldr	r3, [r7, #4]
 8030d92:	68db      	ldr	r3, [r3, #12]
 8030d94:	2b00      	cmp	r3, #0
 8030d96:	d048      	beq.n	8030e2a <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8030d98:	4b1d      	ldr	r3, [pc, #116]	; (8030e10 <HAL_RCC_OscConfig+0x288>)
 8030d9a:	681b      	ldr	r3, [r3, #0]
 8030d9c:	f023 0219 	bic.w	r2, r3, #25
 8030da0:	687b      	ldr	r3, [r7, #4]
 8030da2:	68db      	ldr	r3, [r3, #12]
 8030da4:	491a      	ldr	r1, [pc, #104]	; (8030e10 <HAL_RCC_OscConfig+0x288>)
 8030da6:	4313      	orrs	r3, r2
 8030da8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8030daa:	f7f9 ff05 	bl	802abb8 <HAL_GetTick>
 8030dae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8030db0:	e008      	b.n	8030dc4 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8030db2:	f7f9 ff01 	bl	802abb8 <HAL_GetTick>
 8030db6:	4602      	mov	r2, r0
 8030db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8030dba:	1ad3      	subs	r3, r2, r3
 8030dbc:	2b02      	cmp	r3, #2
 8030dbe:	d901      	bls.n	8030dc4 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8030dc0:	2303      	movs	r3, #3
 8030dc2:	e308      	b.n	80313d6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8030dc4:	4b12      	ldr	r3, [pc, #72]	; (8030e10 <HAL_RCC_OscConfig+0x288>)
 8030dc6:	681b      	ldr	r3, [r3, #0]
 8030dc8:	f003 0304 	and.w	r3, r3, #4
 8030dcc:	2b00      	cmp	r3, #0
 8030dce:	d0f0      	beq.n	8030db2 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8030dd0:	f7f9 ff22 	bl	802ac18 <HAL_GetREVID>
 8030dd4:	4603      	mov	r3, r0
 8030dd6:	f241 0203 	movw	r2, #4099	; 0x1003
 8030dda:	4293      	cmp	r3, r2
 8030ddc:	d81a      	bhi.n	8030e14 <HAL_RCC_OscConfig+0x28c>
 8030dde:	687b      	ldr	r3, [r7, #4]
 8030de0:	691b      	ldr	r3, [r3, #16]
 8030de2:	2b40      	cmp	r3, #64	; 0x40
 8030de4:	d108      	bne.n	8030df8 <HAL_RCC_OscConfig+0x270>
 8030de6:	4b0a      	ldr	r3, [pc, #40]	; (8030e10 <HAL_RCC_OscConfig+0x288>)
 8030de8:	685b      	ldr	r3, [r3, #4]
 8030dea:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8030dee:	4a08      	ldr	r2, [pc, #32]	; (8030e10 <HAL_RCC_OscConfig+0x288>)
 8030df0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8030df4:	6053      	str	r3, [r2, #4]
 8030df6:	e031      	b.n	8030e5c <HAL_RCC_OscConfig+0x2d4>
 8030df8:	4b05      	ldr	r3, [pc, #20]	; (8030e10 <HAL_RCC_OscConfig+0x288>)
 8030dfa:	685b      	ldr	r3, [r3, #4]
 8030dfc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8030e00:	687b      	ldr	r3, [r7, #4]
 8030e02:	691b      	ldr	r3, [r3, #16]
 8030e04:	031b      	lsls	r3, r3, #12
 8030e06:	4902      	ldr	r1, [pc, #8]	; (8030e10 <HAL_RCC_OscConfig+0x288>)
 8030e08:	4313      	orrs	r3, r2
 8030e0a:	604b      	str	r3, [r1, #4]
 8030e0c:	e026      	b.n	8030e5c <HAL_RCC_OscConfig+0x2d4>
 8030e0e:	bf00      	nop
 8030e10:	58024400 	.word	0x58024400
 8030e14:	4b9a      	ldr	r3, [pc, #616]	; (8031080 <HAL_RCC_OscConfig+0x4f8>)
 8030e16:	685b      	ldr	r3, [r3, #4]
 8030e18:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8030e1c:	687b      	ldr	r3, [r7, #4]
 8030e1e:	691b      	ldr	r3, [r3, #16]
 8030e20:	061b      	lsls	r3, r3, #24
 8030e22:	4997      	ldr	r1, [pc, #604]	; (8031080 <HAL_RCC_OscConfig+0x4f8>)
 8030e24:	4313      	orrs	r3, r2
 8030e26:	604b      	str	r3, [r1, #4]
 8030e28:	e018      	b.n	8030e5c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8030e2a:	4b95      	ldr	r3, [pc, #596]	; (8031080 <HAL_RCC_OscConfig+0x4f8>)
 8030e2c:	681b      	ldr	r3, [r3, #0]
 8030e2e:	4a94      	ldr	r2, [pc, #592]	; (8031080 <HAL_RCC_OscConfig+0x4f8>)
 8030e30:	f023 0301 	bic.w	r3, r3, #1
 8030e34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8030e36:	f7f9 febf 	bl	802abb8 <HAL_GetTick>
 8030e3a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8030e3c:	e008      	b.n	8030e50 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8030e3e:	f7f9 febb 	bl	802abb8 <HAL_GetTick>
 8030e42:	4602      	mov	r2, r0
 8030e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8030e46:	1ad3      	subs	r3, r2, r3
 8030e48:	2b02      	cmp	r3, #2
 8030e4a:	d901      	bls.n	8030e50 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8030e4c:	2303      	movs	r3, #3
 8030e4e:	e2c2      	b.n	80313d6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8030e50:	4b8b      	ldr	r3, [pc, #556]	; (8031080 <HAL_RCC_OscConfig+0x4f8>)
 8030e52:	681b      	ldr	r3, [r3, #0]
 8030e54:	f003 0304 	and.w	r3, r3, #4
 8030e58:	2b00      	cmp	r3, #0
 8030e5a:	d1f0      	bne.n	8030e3e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8030e5c:	687b      	ldr	r3, [r7, #4]
 8030e5e:	681b      	ldr	r3, [r3, #0]
 8030e60:	f003 0310 	and.w	r3, r3, #16
 8030e64:	2b00      	cmp	r3, #0
 8030e66:	f000 80a9 	beq.w	8030fbc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8030e6a:	4b85      	ldr	r3, [pc, #532]	; (8031080 <HAL_RCC_OscConfig+0x4f8>)
 8030e6c:	691b      	ldr	r3, [r3, #16]
 8030e6e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8030e72:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8030e74:	4b82      	ldr	r3, [pc, #520]	; (8031080 <HAL_RCC_OscConfig+0x4f8>)
 8030e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8030e78:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8030e7a:	69bb      	ldr	r3, [r7, #24]
 8030e7c:	2b08      	cmp	r3, #8
 8030e7e:	d007      	beq.n	8030e90 <HAL_RCC_OscConfig+0x308>
 8030e80:	69bb      	ldr	r3, [r7, #24]
 8030e82:	2b18      	cmp	r3, #24
 8030e84:	d13a      	bne.n	8030efc <HAL_RCC_OscConfig+0x374>
 8030e86:	697b      	ldr	r3, [r7, #20]
 8030e88:	f003 0303 	and.w	r3, r3, #3
 8030e8c:	2b01      	cmp	r3, #1
 8030e8e:	d135      	bne.n	8030efc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8030e90:	4b7b      	ldr	r3, [pc, #492]	; (8031080 <HAL_RCC_OscConfig+0x4f8>)
 8030e92:	681b      	ldr	r3, [r3, #0]
 8030e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8030e98:	2b00      	cmp	r3, #0
 8030e9a:	d005      	beq.n	8030ea8 <HAL_RCC_OscConfig+0x320>
 8030e9c:	687b      	ldr	r3, [r7, #4]
 8030e9e:	69db      	ldr	r3, [r3, #28]
 8030ea0:	2b80      	cmp	r3, #128	; 0x80
 8030ea2:	d001      	beq.n	8030ea8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8030ea4:	2301      	movs	r3, #1
 8030ea6:	e296      	b.n	80313d6 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8030ea8:	f7f9 feb6 	bl	802ac18 <HAL_GetREVID>
 8030eac:	4603      	mov	r3, r0
 8030eae:	f241 0203 	movw	r2, #4099	; 0x1003
 8030eb2:	4293      	cmp	r3, r2
 8030eb4:	d817      	bhi.n	8030ee6 <HAL_RCC_OscConfig+0x35e>
 8030eb6:	687b      	ldr	r3, [r7, #4]
 8030eb8:	6a1b      	ldr	r3, [r3, #32]
 8030eba:	2b20      	cmp	r3, #32
 8030ebc:	d108      	bne.n	8030ed0 <HAL_RCC_OscConfig+0x348>
 8030ebe:	4b70      	ldr	r3, [pc, #448]	; (8031080 <HAL_RCC_OscConfig+0x4f8>)
 8030ec0:	685b      	ldr	r3, [r3, #4]
 8030ec2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8030ec6:	4a6e      	ldr	r2, [pc, #440]	; (8031080 <HAL_RCC_OscConfig+0x4f8>)
 8030ec8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8030ecc:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8030ece:	e075      	b.n	8030fbc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8030ed0:	4b6b      	ldr	r3, [pc, #428]	; (8031080 <HAL_RCC_OscConfig+0x4f8>)
 8030ed2:	685b      	ldr	r3, [r3, #4]
 8030ed4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8030ed8:	687b      	ldr	r3, [r7, #4]
 8030eda:	6a1b      	ldr	r3, [r3, #32]
 8030edc:	069b      	lsls	r3, r3, #26
 8030ede:	4968      	ldr	r1, [pc, #416]	; (8031080 <HAL_RCC_OscConfig+0x4f8>)
 8030ee0:	4313      	orrs	r3, r2
 8030ee2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8030ee4:	e06a      	b.n	8030fbc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8030ee6:	4b66      	ldr	r3, [pc, #408]	; (8031080 <HAL_RCC_OscConfig+0x4f8>)
 8030ee8:	68db      	ldr	r3, [r3, #12]
 8030eea:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8030eee:	687b      	ldr	r3, [r7, #4]
 8030ef0:	6a1b      	ldr	r3, [r3, #32]
 8030ef2:	061b      	lsls	r3, r3, #24
 8030ef4:	4962      	ldr	r1, [pc, #392]	; (8031080 <HAL_RCC_OscConfig+0x4f8>)
 8030ef6:	4313      	orrs	r3, r2
 8030ef8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8030efa:	e05f      	b.n	8030fbc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8030efc:	687b      	ldr	r3, [r7, #4]
 8030efe:	69db      	ldr	r3, [r3, #28]
 8030f00:	2b00      	cmp	r3, #0
 8030f02:	d042      	beq.n	8030f8a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8030f04:	4b5e      	ldr	r3, [pc, #376]	; (8031080 <HAL_RCC_OscConfig+0x4f8>)
 8030f06:	681b      	ldr	r3, [r3, #0]
 8030f08:	4a5d      	ldr	r2, [pc, #372]	; (8031080 <HAL_RCC_OscConfig+0x4f8>)
 8030f0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8030f0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8030f10:	f7f9 fe52 	bl	802abb8 <HAL_GetTick>
 8030f14:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8030f16:	e008      	b.n	8030f2a <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8030f18:	f7f9 fe4e 	bl	802abb8 <HAL_GetTick>
 8030f1c:	4602      	mov	r2, r0
 8030f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8030f20:	1ad3      	subs	r3, r2, r3
 8030f22:	2b02      	cmp	r3, #2
 8030f24:	d901      	bls.n	8030f2a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8030f26:	2303      	movs	r3, #3
 8030f28:	e255      	b.n	80313d6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8030f2a:	4b55      	ldr	r3, [pc, #340]	; (8031080 <HAL_RCC_OscConfig+0x4f8>)
 8030f2c:	681b      	ldr	r3, [r3, #0]
 8030f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8030f32:	2b00      	cmp	r3, #0
 8030f34:	d0f0      	beq.n	8030f18 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8030f36:	f7f9 fe6f 	bl	802ac18 <HAL_GetREVID>
 8030f3a:	4603      	mov	r3, r0
 8030f3c:	f241 0203 	movw	r2, #4099	; 0x1003
 8030f40:	4293      	cmp	r3, r2
 8030f42:	d817      	bhi.n	8030f74 <HAL_RCC_OscConfig+0x3ec>
 8030f44:	687b      	ldr	r3, [r7, #4]
 8030f46:	6a1b      	ldr	r3, [r3, #32]
 8030f48:	2b20      	cmp	r3, #32
 8030f4a:	d108      	bne.n	8030f5e <HAL_RCC_OscConfig+0x3d6>
 8030f4c:	4b4c      	ldr	r3, [pc, #304]	; (8031080 <HAL_RCC_OscConfig+0x4f8>)
 8030f4e:	685b      	ldr	r3, [r3, #4]
 8030f50:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8030f54:	4a4a      	ldr	r2, [pc, #296]	; (8031080 <HAL_RCC_OscConfig+0x4f8>)
 8030f56:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8030f5a:	6053      	str	r3, [r2, #4]
 8030f5c:	e02e      	b.n	8030fbc <HAL_RCC_OscConfig+0x434>
 8030f5e:	4b48      	ldr	r3, [pc, #288]	; (8031080 <HAL_RCC_OscConfig+0x4f8>)
 8030f60:	685b      	ldr	r3, [r3, #4]
 8030f62:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8030f66:	687b      	ldr	r3, [r7, #4]
 8030f68:	6a1b      	ldr	r3, [r3, #32]
 8030f6a:	069b      	lsls	r3, r3, #26
 8030f6c:	4944      	ldr	r1, [pc, #272]	; (8031080 <HAL_RCC_OscConfig+0x4f8>)
 8030f6e:	4313      	orrs	r3, r2
 8030f70:	604b      	str	r3, [r1, #4]
 8030f72:	e023      	b.n	8030fbc <HAL_RCC_OscConfig+0x434>
 8030f74:	4b42      	ldr	r3, [pc, #264]	; (8031080 <HAL_RCC_OscConfig+0x4f8>)
 8030f76:	68db      	ldr	r3, [r3, #12]
 8030f78:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8030f7c:	687b      	ldr	r3, [r7, #4]
 8030f7e:	6a1b      	ldr	r3, [r3, #32]
 8030f80:	061b      	lsls	r3, r3, #24
 8030f82:	493f      	ldr	r1, [pc, #252]	; (8031080 <HAL_RCC_OscConfig+0x4f8>)
 8030f84:	4313      	orrs	r3, r2
 8030f86:	60cb      	str	r3, [r1, #12]
 8030f88:	e018      	b.n	8030fbc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8030f8a:	4b3d      	ldr	r3, [pc, #244]	; (8031080 <HAL_RCC_OscConfig+0x4f8>)
 8030f8c:	681b      	ldr	r3, [r3, #0]
 8030f8e:	4a3c      	ldr	r2, [pc, #240]	; (8031080 <HAL_RCC_OscConfig+0x4f8>)
 8030f90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8030f94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8030f96:	f7f9 fe0f 	bl	802abb8 <HAL_GetTick>
 8030f9a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8030f9c:	e008      	b.n	8030fb0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8030f9e:	f7f9 fe0b 	bl	802abb8 <HAL_GetTick>
 8030fa2:	4602      	mov	r2, r0
 8030fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8030fa6:	1ad3      	subs	r3, r2, r3
 8030fa8:	2b02      	cmp	r3, #2
 8030faa:	d901      	bls.n	8030fb0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8030fac:	2303      	movs	r3, #3
 8030fae:	e212      	b.n	80313d6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8030fb0:	4b33      	ldr	r3, [pc, #204]	; (8031080 <HAL_RCC_OscConfig+0x4f8>)
 8030fb2:	681b      	ldr	r3, [r3, #0]
 8030fb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8030fb8:	2b00      	cmp	r3, #0
 8030fba:	d1f0      	bne.n	8030f9e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8030fbc:	687b      	ldr	r3, [r7, #4]
 8030fbe:	681b      	ldr	r3, [r3, #0]
 8030fc0:	f003 0308 	and.w	r3, r3, #8
 8030fc4:	2b00      	cmp	r3, #0
 8030fc6:	d036      	beq.n	8031036 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8030fc8:	687b      	ldr	r3, [r7, #4]
 8030fca:	695b      	ldr	r3, [r3, #20]
 8030fcc:	2b00      	cmp	r3, #0
 8030fce:	d019      	beq.n	8031004 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8030fd0:	4b2b      	ldr	r3, [pc, #172]	; (8031080 <HAL_RCC_OscConfig+0x4f8>)
 8030fd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8030fd4:	4a2a      	ldr	r2, [pc, #168]	; (8031080 <HAL_RCC_OscConfig+0x4f8>)
 8030fd6:	f043 0301 	orr.w	r3, r3, #1
 8030fda:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8030fdc:	f7f9 fdec 	bl	802abb8 <HAL_GetTick>
 8030fe0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8030fe2:	e008      	b.n	8030ff6 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8030fe4:	f7f9 fde8 	bl	802abb8 <HAL_GetTick>
 8030fe8:	4602      	mov	r2, r0
 8030fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8030fec:	1ad3      	subs	r3, r2, r3
 8030fee:	2b02      	cmp	r3, #2
 8030ff0:	d901      	bls.n	8030ff6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8030ff2:	2303      	movs	r3, #3
 8030ff4:	e1ef      	b.n	80313d6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8030ff6:	4b22      	ldr	r3, [pc, #136]	; (8031080 <HAL_RCC_OscConfig+0x4f8>)
 8030ff8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8030ffa:	f003 0302 	and.w	r3, r3, #2
 8030ffe:	2b00      	cmp	r3, #0
 8031000:	d0f0      	beq.n	8030fe4 <HAL_RCC_OscConfig+0x45c>
 8031002:	e018      	b.n	8031036 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8031004:	4b1e      	ldr	r3, [pc, #120]	; (8031080 <HAL_RCC_OscConfig+0x4f8>)
 8031006:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8031008:	4a1d      	ldr	r2, [pc, #116]	; (8031080 <HAL_RCC_OscConfig+0x4f8>)
 803100a:	f023 0301 	bic.w	r3, r3, #1
 803100e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8031010:	f7f9 fdd2 	bl	802abb8 <HAL_GetTick>
 8031014:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8031016:	e008      	b.n	803102a <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8031018:	f7f9 fdce 	bl	802abb8 <HAL_GetTick>
 803101c:	4602      	mov	r2, r0
 803101e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8031020:	1ad3      	subs	r3, r2, r3
 8031022:	2b02      	cmp	r3, #2
 8031024:	d901      	bls.n	803102a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8031026:	2303      	movs	r3, #3
 8031028:	e1d5      	b.n	80313d6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 803102a:	4b15      	ldr	r3, [pc, #84]	; (8031080 <HAL_RCC_OscConfig+0x4f8>)
 803102c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 803102e:	f003 0302 	and.w	r3, r3, #2
 8031032:	2b00      	cmp	r3, #0
 8031034:	d1f0      	bne.n	8031018 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8031036:	687b      	ldr	r3, [r7, #4]
 8031038:	681b      	ldr	r3, [r3, #0]
 803103a:	f003 0320 	and.w	r3, r3, #32
 803103e:	2b00      	cmp	r3, #0
 8031040:	d039      	beq.n	80310b6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8031042:	687b      	ldr	r3, [r7, #4]
 8031044:	699b      	ldr	r3, [r3, #24]
 8031046:	2b00      	cmp	r3, #0
 8031048:	d01c      	beq.n	8031084 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 803104a:	4b0d      	ldr	r3, [pc, #52]	; (8031080 <HAL_RCC_OscConfig+0x4f8>)
 803104c:	681b      	ldr	r3, [r3, #0]
 803104e:	4a0c      	ldr	r2, [pc, #48]	; (8031080 <HAL_RCC_OscConfig+0x4f8>)
 8031050:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8031054:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8031056:	f7f9 fdaf 	bl	802abb8 <HAL_GetTick>
 803105a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 803105c:	e008      	b.n	8031070 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 803105e:	f7f9 fdab 	bl	802abb8 <HAL_GetTick>
 8031062:	4602      	mov	r2, r0
 8031064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8031066:	1ad3      	subs	r3, r2, r3
 8031068:	2b02      	cmp	r3, #2
 803106a:	d901      	bls.n	8031070 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 803106c:	2303      	movs	r3, #3
 803106e:	e1b2      	b.n	80313d6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8031070:	4b03      	ldr	r3, [pc, #12]	; (8031080 <HAL_RCC_OscConfig+0x4f8>)
 8031072:	681b      	ldr	r3, [r3, #0]
 8031074:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8031078:	2b00      	cmp	r3, #0
 803107a:	d0f0      	beq.n	803105e <HAL_RCC_OscConfig+0x4d6>
 803107c:	e01b      	b.n	80310b6 <HAL_RCC_OscConfig+0x52e>
 803107e:	bf00      	nop
 8031080:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8031084:	4b9b      	ldr	r3, [pc, #620]	; (80312f4 <HAL_RCC_OscConfig+0x76c>)
 8031086:	681b      	ldr	r3, [r3, #0]
 8031088:	4a9a      	ldr	r2, [pc, #616]	; (80312f4 <HAL_RCC_OscConfig+0x76c>)
 803108a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 803108e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8031090:	f7f9 fd92 	bl	802abb8 <HAL_GetTick>
 8031094:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8031096:	e008      	b.n	80310aa <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8031098:	f7f9 fd8e 	bl	802abb8 <HAL_GetTick>
 803109c:	4602      	mov	r2, r0
 803109e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80310a0:	1ad3      	subs	r3, r2, r3
 80310a2:	2b02      	cmp	r3, #2
 80310a4:	d901      	bls.n	80310aa <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80310a6:	2303      	movs	r3, #3
 80310a8:	e195      	b.n	80313d6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80310aa:	4b92      	ldr	r3, [pc, #584]	; (80312f4 <HAL_RCC_OscConfig+0x76c>)
 80310ac:	681b      	ldr	r3, [r3, #0]
 80310ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80310b2:	2b00      	cmp	r3, #0
 80310b4:	d1f0      	bne.n	8031098 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80310b6:	687b      	ldr	r3, [r7, #4]
 80310b8:	681b      	ldr	r3, [r3, #0]
 80310ba:	f003 0304 	and.w	r3, r3, #4
 80310be:	2b00      	cmp	r3, #0
 80310c0:	f000 8081 	beq.w	80311c6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80310c4:	4b8c      	ldr	r3, [pc, #560]	; (80312f8 <HAL_RCC_OscConfig+0x770>)
 80310c6:	681b      	ldr	r3, [r3, #0]
 80310c8:	4a8b      	ldr	r2, [pc, #556]	; (80312f8 <HAL_RCC_OscConfig+0x770>)
 80310ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80310ce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80310d0:	f7f9 fd72 	bl	802abb8 <HAL_GetTick>
 80310d4:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80310d6:	e008      	b.n	80310ea <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80310d8:	f7f9 fd6e 	bl	802abb8 <HAL_GetTick>
 80310dc:	4602      	mov	r2, r0
 80310de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80310e0:	1ad3      	subs	r3, r2, r3
 80310e2:	2b64      	cmp	r3, #100	; 0x64
 80310e4:	d901      	bls.n	80310ea <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80310e6:	2303      	movs	r3, #3
 80310e8:	e175      	b.n	80313d6 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80310ea:	4b83      	ldr	r3, [pc, #524]	; (80312f8 <HAL_RCC_OscConfig+0x770>)
 80310ec:	681b      	ldr	r3, [r3, #0]
 80310ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80310f2:	2b00      	cmp	r3, #0
 80310f4:	d0f0      	beq.n	80310d8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80310f6:	687b      	ldr	r3, [r7, #4]
 80310f8:	689b      	ldr	r3, [r3, #8]
 80310fa:	2b01      	cmp	r3, #1
 80310fc:	d106      	bne.n	803110c <HAL_RCC_OscConfig+0x584>
 80310fe:	4b7d      	ldr	r3, [pc, #500]	; (80312f4 <HAL_RCC_OscConfig+0x76c>)
 8031100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8031102:	4a7c      	ldr	r2, [pc, #496]	; (80312f4 <HAL_RCC_OscConfig+0x76c>)
 8031104:	f043 0301 	orr.w	r3, r3, #1
 8031108:	6713      	str	r3, [r2, #112]	; 0x70
 803110a:	e02d      	b.n	8031168 <HAL_RCC_OscConfig+0x5e0>
 803110c:	687b      	ldr	r3, [r7, #4]
 803110e:	689b      	ldr	r3, [r3, #8]
 8031110:	2b00      	cmp	r3, #0
 8031112:	d10c      	bne.n	803112e <HAL_RCC_OscConfig+0x5a6>
 8031114:	4b77      	ldr	r3, [pc, #476]	; (80312f4 <HAL_RCC_OscConfig+0x76c>)
 8031116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8031118:	4a76      	ldr	r2, [pc, #472]	; (80312f4 <HAL_RCC_OscConfig+0x76c>)
 803111a:	f023 0301 	bic.w	r3, r3, #1
 803111e:	6713      	str	r3, [r2, #112]	; 0x70
 8031120:	4b74      	ldr	r3, [pc, #464]	; (80312f4 <HAL_RCC_OscConfig+0x76c>)
 8031122:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8031124:	4a73      	ldr	r2, [pc, #460]	; (80312f4 <HAL_RCC_OscConfig+0x76c>)
 8031126:	f023 0304 	bic.w	r3, r3, #4
 803112a:	6713      	str	r3, [r2, #112]	; 0x70
 803112c:	e01c      	b.n	8031168 <HAL_RCC_OscConfig+0x5e0>
 803112e:	687b      	ldr	r3, [r7, #4]
 8031130:	689b      	ldr	r3, [r3, #8]
 8031132:	2b05      	cmp	r3, #5
 8031134:	d10c      	bne.n	8031150 <HAL_RCC_OscConfig+0x5c8>
 8031136:	4b6f      	ldr	r3, [pc, #444]	; (80312f4 <HAL_RCC_OscConfig+0x76c>)
 8031138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 803113a:	4a6e      	ldr	r2, [pc, #440]	; (80312f4 <HAL_RCC_OscConfig+0x76c>)
 803113c:	f043 0304 	orr.w	r3, r3, #4
 8031140:	6713      	str	r3, [r2, #112]	; 0x70
 8031142:	4b6c      	ldr	r3, [pc, #432]	; (80312f4 <HAL_RCC_OscConfig+0x76c>)
 8031144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8031146:	4a6b      	ldr	r2, [pc, #428]	; (80312f4 <HAL_RCC_OscConfig+0x76c>)
 8031148:	f043 0301 	orr.w	r3, r3, #1
 803114c:	6713      	str	r3, [r2, #112]	; 0x70
 803114e:	e00b      	b.n	8031168 <HAL_RCC_OscConfig+0x5e0>
 8031150:	4b68      	ldr	r3, [pc, #416]	; (80312f4 <HAL_RCC_OscConfig+0x76c>)
 8031152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8031154:	4a67      	ldr	r2, [pc, #412]	; (80312f4 <HAL_RCC_OscConfig+0x76c>)
 8031156:	f023 0301 	bic.w	r3, r3, #1
 803115a:	6713      	str	r3, [r2, #112]	; 0x70
 803115c:	4b65      	ldr	r3, [pc, #404]	; (80312f4 <HAL_RCC_OscConfig+0x76c>)
 803115e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8031160:	4a64      	ldr	r2, [pc, #400]	; (80312f4 <HAL_RCC_OscConfig+0x76c>)
 8031162:	f023 0304 	bic.w	r3, r3, #4
 8031166:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8031168:	687b      	ldr	r3, [r7, #4]
 803116a:	689b      	ldr	r3, [r3, #8]
 803116c:	2b00      	cmp	r3, #0
 803116e:	d015      	beq.n	803119c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8031170:	f7f9 fd22 	bl	802abb8 <HAL_GetTick>
 8031174:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8031176:	e00a      	b.n	803118e <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8031178:	f7f9 fd1e 	bl	802abb8 <HAL_GetTick>
 803117c:	4602      	mov	r2, r0
 803117e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8031180:	1ad3      	subs	r3, r2, r3
 8031182:	f241 3288 	movw	r2, #5000	; 0x1388
 8031186:	4293      	cmp	r3, r2
 8031188:	d901      	bls.n	803118e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 803118a:	2303      	movs	r3, #3
 803118c:	e123      	b.n	80313d6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 803118e:	4b59      	ldr	r3, [pc, #356]	; (80312f4 <HAL_RCC_OscConfig+0x76c>)
 8031190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8031192:	f003 0302 	and.w	r3, r3, #2
 8031196:	2b00      	cmp	r3, #0
 8031198:	d0ee      	beq.n	8031178 <HAL_RCC_OscConfig+0x5f0>
 803119a:	e014      	b.n	80311c6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 803119c:	f7f9 fd0c 	bl	802abb8 <HAL_GetTick>
 80311a0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80311a2:	e00a      	b.n	80311ba <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80311a4:	f7f9 fd08 	bl	802abb8 <HAL_GetTick>
 80311a8:	4602      	mov	r2, r0
 80311aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80311ac:	1ad3      	subs	r3, r2, r3
 80311ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80311b2:	4293      	cmp	r3, r2
 80311b4:	d901      	bls.n	80311ba <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80311b6:	2303      	movs	r3, #3
 80311b8:	e10d      	b.n	80313d6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80311ba:	4b4e      	ldr	r3, [pc, #312]	; (80312f4 <HAL_RCC_OscConfig+0x76c>)
 80311bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80311be:	f003 0302 	and.w	r3, r3, #2
 80311c2:	2b00      	cmp	r3, #0
 80311c4:	d1ee      	bne.n	80311a4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80311c6:	687b      	ldr	r3, [r7, #4]
 80311c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80311ca:	2b00      	cmp	r3, #0
 80311cc:	f000 8102 	beq.w	80313d4 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80311d0:	4b48      	ldr	r3, [pc, #288]	; (80312f4 <HAL_RCC_OscConfig+0x76c>)
 80311d2:	691b      	ldr	r3, [r3, #16]
 80311d4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80311d8:	2b18      	cmp	r3, #24
 80311da:	f000 80bd 	beq.w	8031358 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80311de:	687b      	ldr	r3, [r7, #4]
 80311e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80311e2:	2b02      	cmp	r3, #2
 80311e4:	f040 809e 	bne.w	8031324 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80311e8:	4b42      	ldr	r3, [pc, #264]	; (80312f4 <HAL_RCC_OscConfig+0x76c>)
 80311ea:	681b      	ldr	r3, [r3, #0]
 80311ec:	4a41      	ldr	r2, [pc, #260]	; (80312f4 <HAL_RCC_OscConfig+0x76c>)
 80311ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80311f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80311f4:	f7f9 fce0 	bl	802abb8 <HAL_GetTick>
 80311f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80311fa:	e008      	b.n	803120e <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80311fc:	f7f9 fcdc 	bl	802abb8 <HAL_GetTick>
 8031200:	4602      	mov	r2, r0
 8031202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8031204:	1ad3      	subs	r3, r2, r3
 8031206:	2b02      	cmp	r3, #2
 8031208:	d901      	bls.n	803120e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 803120a:	2303      	movs	r3, #3
 803120c:	e0e3      	b.n	80313d6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 803120e:	4b39      	ldr	r3, [pc, #228]	; (80312f4 <HAL_RCC_OscConfig+0x76c>)
 8031210:	681b      	ldr	r3, [r3, #0]
 8031212:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8031216:	2b00      	cmp	r3, #0
 8031218:	d1f0      	bne.n	80311fc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 803121a:	4b36      	ldr	r3, [pc, #216]	; (80312f4 <HAL_RCC_OscConfig+0x76c>)
 803121c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 803121e:	4b37      	ldr	r3, [pc, #220]	; (80312fc <HAL_RCC_OscConfig+0x774>)
 8031220:	4013      	ands	r3, r2
 8031222:	687a      	ldr	r2, [r7, #4]
 8031224:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8031226:	687a      	ldr	r2, [r7, #4]
 8031228:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 803122a:	0112      	lsls	r2, r2, #4
 803122c:	430a      	orrs	r2, r1
 803122e:	4931      	ldr	r1, [pc, #196]	; (80312f4 <HAL_RCC_OscConfig+0x76c>)
 8031230:	4313      	orrs	r3, r2
 8031232:	628b      	str	r3, [r1, #40]	; 0x28
 8031234:	687b      	ldr	r3, [r7, #4]
 8031236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8031238:	3b01      	subs	r3, #1
 803123a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 803123e:	687b      	ldr	r3, [r7, #4]
 8031240:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8031242:	3b01      	subs	r3, #1
 8031244:	025b      	lsls	r3, r3, #9
 8031246:	b29b      	uxth	r3, r3
 8031248:	431a      	orrs	r2, r3
 803124a:	687b      	ldr	r3, [r7, #4]
 803124c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 803124e:	3b01      	subs	r3, #1
 8031250:	041b      	lsls	r3, r3, #16
 8031252:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8031256:	431a      	orrs	r2, r3
 8031258:	687b      	ldr	r3, [r7, #4]
 803125a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 803125c:	3b01      	subs	r3, #1
 803125e:	061b      	lsls	r3, r3, #24
 8031260:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8031264:	4923      	ldr	r1, [pc, #140]	; (80312f4 <HAL_RCC_OscConfig+0x76c>)
 8031266:	4313      	orrs	r3, r2
 8031268:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 803126a:	4b22      	ldr	r3, [pc, #136]	; (80312f4 <HAL_RCC_OscConfig+0x76c>)
 803126c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803126e:	4a21      	ldr	r2, [pc, #132]	; (80312f4 <HAL_RCC_OscConfig+0x76c>)
 8031270:	f023 0301 	bic.w	r3, r3, #1
 8031274:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8031276:	4b1f      	ldr	r3, [pc, #124]	; (80312f4 <HAL_RCC_OscConfig+0x76c>)
 8031278:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 803127a:	4b21      	ldr	r3, [pc, #132]	; (8031300 <HAL_RCC_OscConfig+0x778>)
 803127c:	4013      	ands	r3, r2
 803127e:	687a      	ldr	r2, [r7, #4]
 8031280:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8031282:	00d2      	lsls	r2, r2, #3
 8031284:	491b      	ldr	r1, [pc, #108]	; (80312f4 <HAL_RCC_OscConfig+0x76c>)
 8031286:	4313      	orrs	r3, r2
 8031288:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 803128a:	4b1a      	ldr	r3, [pc, #104]	; (80312f4 <HAL_RCC_OscConfig+0x76c>)
 803128c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803128e:	f023 020c 	bic.w	r2, r3, #12
 8031292:	687b      	ldr	r3, [r7, #4]
 8031294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8031296:	4917      	ldr	r1, [pc, #92]	; (80312f4 <HAL_RCC_OscConfig+0x76c>)
 8031298:	4313      	orrs	r3, r2
 803129a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 803129c:	4b15      	ldr	r3, [pc, #84]	; (80312f4 <HAL_RCC_OscConfig+0x76c>)
 803129e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80312a0:	f023 0202 	bic.w	r2, r3, #2
 80312a4:	687b      	ldr	r3, [r7, #4]
 80312a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80312a8:	4912      	ldr	r1, [pc, #72]	; (80312f4 <HAL_RCC_OscConfig+0x76c>)
 80312aa:	4313      	orrs	r3, r2
 80312ac:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80312ae:	4b11      	ldr	r3, [pc, #68]	; (80312f4 <HAL_RCC_OscConfig+0x76c>)
 80312b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80312b2:	4a10      	ldr	r2, [pc, #64]	; (80312f4 <HAL_RCC_OscConfig+0x76c>)
 80312b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80312b8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80312ba:	4b0e      	ldr	r3, [pc, #56]	; (80312f4 <HAL_RCC_OscConfig+0x76c>)
 80312bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80312be:	4a0d      	ldr	r2, [pc, #52]	; (80312f4 <HAL_RCC_OscConfig+0x76c>)
 80312c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80312c4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80312c6:	4b0b      	ldr	r3, [pc, #44]	; (80312f4 <HAL_RCC_OscConfig+0x76c>)
 80312c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80312ca:	4a0a      	ldr	r2, [pc, #40]	; (80312f4 <HAL_RCC_OscConfig+0x76c>)
 80312cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80312d0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80312d2:	4b08      	ldr	r3, [pc, #32]	; (80312f4 <HAL_RCC_OscConfig+0x76c>)
 80312d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80312d6:	4a07      	ldr	r2, [pc, #28]	; (80312f4 <HAL_RCC_OscConfig+0x76c>)
 80312d8:	f043 0301 	orr.w	r3, r3, #1
 80312dc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80312de:	4b05      	ldr	r3, [pc, #20]	; (80312f4 <HAL_RCC_OscConfig+0x76c>)
 80312e0:	681b      	ldr	r3, [r3, #0]
 80312e2:	4a04      	ldr	r2, [pc, #16]	; (80312f4 <HAL_RCC_OscConfig+0x76c>)
 80312e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80312e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80312ea:	f7f9 fc65 	bl	802abb8 <HAL_GetTick>
 80312ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80312f0:	e011      	b.n	8031316 <HAL_RCC_OscConfig+0x78e>
 80312f2:	bf00      	nop
 80312f4:	58024400 	.word	0x58024400
 80312f8:	58024800 	.word	0x58024800
 80312fc:	fffffc0c 	.word	0xfffffc0c
 8031300:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8031304:	f7f9 fc58 	bl	802abb8 <HAL_GetTick>
 8031308:	4602      	mov	r2, r0
 803130a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803130c:	1ad3      	subs	r3, r2, r3
 803130e:	2b02      	cmp	r3, #2
 8031310:	d901      	bls.n	8031316 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8031312:	2303      	movs	r3, #3
 8031314:	e05f      	b.n	80313d6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8031316:	4b32      	ldr	r3, [pc, #200]	; (80313e0 <HAL_RCC_OscConfig+0x858>)
 8031318:	681b      	ldr	r3, [r3, #0]
 803131a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 803131e:	2b00      	cmp	r3, #0
 8031320:	d0f0      	beq.n	8031304 <HAL_RCC_OscConfig+0x77c>
 8031322:	e057      	b.n	80313d4 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8031324:	4b2e      	ldr	r3, [pc, #184]	; (80313e0 <HAL_RCC_OscConfig+0x858>)
 8031326:	681b      	ldr	r3, [r3, #0]
 8031328:	4a2d      	ldr	r2, [pc, #180]	; (80313e0 <HAL_RCC_OscConfig+0x858>)
 803132a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 803132e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8031330:	f7f9 fc42 	bl	802abb8 <HAL_GetTick>
 8031334:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8031336:	e008      	b.n	803134a <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8031338:	f7f9 fc3e 	bl	802abb8 <HAL_GetTick>
 803133c:	4602      	mov	r2, r0
 803133e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8031340:	1ad3      	subs	r3, r2, r3
 8031342:	2b02      	cmp	r3, #2
 8031344:	d901      	bls.n	803134a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8031346:	2303      	movs	r3, #3
 8031348:	e045      	b.n	80313d6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 803134a:	4b25      	ldr	r3, [pc, #148]	; (80313e0 <HAL_RCC_OscConfig+0x858>)
 803134c:	681b      	ldr	r3, [r3, #0]
 803134e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8031352:	2b00      	cmp	r3, #0
 8031354:	d1f0      	bne.n	8031338 <HAL_RCC_OscConfig+0x7b0>
 8031356:	e03d      	b.n	80313d4 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8031358:	4b21      	ldr	r3, [pc, #132]	; (80313e0 <HAL_RCC_OscConfig+0x858>)
 803135a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 803135c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 803135e:	4b20      	ldr	r3, [pc, #128]	; (80313e0 <HAL_RCC_OscConfig+0x858>)
 8031360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8031362:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8031364:	687b      	ldr	r3, [r7, #4]
 8031366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8031368:	2b01      	cmp	r3, #1
 803136a:	d031      	beq.n	80313d0 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 803136c:	693b      	ldr	r3, [r7, #16]
 803136e:	f003 0203 	and.w	r2, r3, #3
 8031372:	687b      	ldr	r3, [r7, #4]
 8031374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8031376:	429a      	cmp	r2, r3
 8031378:	d12a      	bne.n	80313d0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 803137a:	693b      	ldr	r3, [r7, #16]
 803137c:	091b      	lsrs	r3, r3, #4
 803137e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8031382:	687b      	ldr	r3, [r7, #4]
 8031384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8031386:	429a      	cmp	r2, r3
 8031388:	d122      	bne.n	80313d0 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 803138a:	68fb      	ldr	r3, [r7, #12]
 803138c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8031390:	687b      	ldr	r3, [r7, #4]
 8031392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8031394:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8031396:	429a      	cmp	r2, r3
 8031398:	d11a      	bne.n	80313d0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 803139a:	68fb      	ldr	r3, [r7, #12]
 803139c:	0a5b      	lsrs	r3, r3, #9
 803139e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80313a2:	687b      	ldr	r3, [r7, #4]
 80313a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80313a6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80313a8:	429a      	cmp	r2, r3
 80313aa:	d111      	bne.n	80313d0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80313ac:	68fb      	ldr	r3, [r7, #12]
 80313ae:	0c1b      	lsrs	r3, r3, #16
 80313b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80313b4:	687b      	ldr	r3, [r7, #4]
 80313b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80313b8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80313ba:	429a      	cmp	r2, r3
 80313bc:	d108      	bne.n	80313d0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80313be:	68fb      	ldr	r3, [r7, #12]
 80313c0:	0e1b      	lsrs	r3, r3, #24
 80313c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80313c6:	687b      	ldr	r3, [r7, #4]
 80313c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80313ca:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80313cc:	429a      	cmp	r2, r3
 80313ce:	d001      	beq.n	80313d4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80313d0:	2301      	movs	r3, #1
 80313d2:	e000      	b.n	80313d6 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 80313d4:	2300      	movs	r3, #0
}
 80313d6:	4618      	mov	r0, r3
 80313d8:	3730      	adds	r7, #48	; 0x30
 80313da:	46bd      	mov	sp, r7
 80313dc:	bd80      	pop	{r7, pc}
 80313de:	bf00      	nop
 80313e0:	58024400 	.word	0x58024400

080313e4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80313e4:	b580      	push	{r7, lr}
 80313e6:	b086      	sub	sp, #24
 80313e8:	af00      	add	r7, sp, #0
 80313ea:	6078      	str	r0, [r7, #4]
 80313ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80313ee:	687b      	ldr	r3, [r7, #4]
 80313f0:	2b00      	cmp	r3, #0
 80313f2:	d101      	bne.n	80313f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80313f4:	2301      	movs	r3, #1
 80313f6:	e19c      	b.n	8031732 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80313f8:	4b8a      	ldr	r3, [pc, #552]	; (8031624 <HAL_RCC_ClockConfig+0x240>)
 80313fa:	681b      	ldr	r3, [r3, #0]
 80313fc:	f003 030f 	and.w	r3, r3, #15
 8031400:	683a      	ldr	r2, [r7, #0]
 8031402:	429a      	cmp	r2, r3
 8031404:	d910      	bls.n	8031428 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8031406:	4b87      	ldr	r3, [pc, #540]	; (8031624 <HAL_RCC_ClockConfig+0x240>)
 8031408:	681b      	ldr	r3, [r3, #0]
 803140a:	f023 020f 	bic.w	r2, r3, #15
 803140e:	4985      	ldr	r1, [pc, #532]	; (8031624 <HAL_RCC_ClockConfig+0x240>)
 8031410:	683b      	ldr	r3, [r7, #0]
 8031412:	4313      	orrs	r3, r2
 8031414:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8031416:	4b83      	ldr	r3, [pc, #524]	; (8031624 <HAL_RCC_ClockConfig+0x240>)
 8031418:	681b      	ldr	r3, [r3, #0]
 803141a:	f003 030f 	and.w	r3, r3, #15
 803141e:	683a      	ldr	r2, [r7, #0]
 8031420:	429a      	cmp	r2, r3
 8031422:	d001      	beq.n	8031428 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8031424:	2301      	movs	r3, #1
 8031426:	e184      	b.n	8031732 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8031428:	687b      	ldr	r3, [r7, #4]
 803142a:	681b      	ldr	r3, [r3, #0]
 803142c:	f003 0304 	and.w	r3, r3, #4
 8031430:	2b00      	cmp	r3, #0
 8031432:	d010      	beq.n	8031456 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8031434:	687b      	ldr	r3, [r7, #4]
 8031436:	691a      	ldr	r2, [r3, #16]
 8031438:	4b7b      	ldr	r3, [pc, #492]	; (8031628 <HAL_RCC_ClockConfig+0x244>)
 803143a:	699b      	ldr	r3, [r3, #24]
 803143c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8031440:	429a      	cmp	r2, r3
 8031442:	d908      	bls.n	8031456 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8031444:	4b78      	ldr	r3, [pc, #480]	; (8031628 <HAL_RCC_ClockConfig+0x244>)
 8031446:	699b      	ldr	r3, [r3, #24]
 8031448:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 803144c:	687b      	ldr	r3, [r7, #4]
 803144e:	691b      	ldr	r3, [r3, #16]
 8031450:	4975      	ldr	r1, [pc, #468]	; (8031628 <HAL_RCC_ClockConfig+0x244>)
 8031452:	4313      	orrs	r3, r2
 8031454:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8031456:	687b      	ldr	r3, [r7, #4]
 8031458:	681b      	ldr	r3, [r3, #0]
 803145a:	f003 0308 	and.w	r3, r3, #8
 803145e:	2b00      	cmp	r3, #0
 8031460:	d010      	beq.n	8031484 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8031462:	687b      	ldr	r3, [r7, #4]
 8031464:	695a      	ldr	r2, [r3, #20]
 8031466:	4b70      	ldr	r3, [pc, #448]	; (8031628 <HAL_RCC_ClockConfig+0x244>)
 8031468:	69db      	ldr	r3, [r3, #28]
 803146a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 803146e:	429a      	cmp	r2, r3
 8031470:	d908      	bls.n	8031484 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8031472:	4b6d      	ldr	r3, [pc, #436]	; (8031628 <HAL_RCC_ClockConfig+0x244>)
 8031474:	69db      	ldr	r3, [r3, #28]
 8031476:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 803147a:	687b      	ldr	r3, [r7, #4]
 803147c:	695b      	ldr	r3, [r3, #20]
 803147e:	496a      	ldr	r1, [pc, #424]	; (8031628 <HAL_RCC_ClockConfig+0x244>)
 8031480:	4313      	orrs	r3, r2
 8031482:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8031484:	687b      	ldr	r3, [r7, #4]
 8031486:	681b      	ldr	r3, [r3, #0]
 8031488:	f003 0310 	and.w	r3, r3, #16
 803148c:	2b00      	cmp	r3, #0
 803148e:	d010      	beq.n	80314b2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8031490:	687b      	ldr	r3, [r7, #4]
 8031492:	699a      	ldr	r2, [r3, #24]
 8031494:	4b64      	ldr	r3, [pc, #400]	; (8031628 <HAL_RCC_ClockConfig+0x244>)
 8031496:	69db      	ldr	r3, [r3, #28]
 8031498:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 803149c:	429a      	cmp	r2, r3
 803149e:	d908      	bls.n	80314b2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80314a0:	4b61      	ldr	r3, [pc, #388]	; (8031628 <HAL_RCC_ClockConfig+0x244>)
 80314a2:	69db      	ldr	r3, [r3, #28]
 80314a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80314a8:	687b      	ldr	r3, [r7, #4]
 80314aa:	699b      	ldr	r3, [r3, #24]
 80314ac:	495e      	ldr	r1, [pc, #376]	; (8031628 <HAL_RCC_ClockConfig+0x244>)
 80314ae:	4313      	orrs	r3, r2
 80314b0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80314b2:	687b      	ldr	r3, [r7, #4]
 80314b4:	681b      	ldr	r3, [r3, #0]
 80314b6:	f003 0320 	and.w	r3, r3, #32
 80314ba:	2b00      	cmp	r3, #0
 80314bc:	d010      	beq.n	80314e0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80314be:	687b      	ldr	r3, [r7, #4]
 80314c0:	69da      	ldr	r2, [r3, #28]
 80314c2:	4b59      	ldr	r3, [pc, #356]	; (8031628 <HAL_RCC_ClockConfig+0x244>)
 80314c4:	6a1b      	ldr	r3, [r3, #32]
 80314c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80314ca:	429a      	cmp	r2, r3
 80314cc:	d908      	bls.n	80314e0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80314ce:	4b56      	ldr	r3, [pc, #344]	; (8031628 <HAL_RCC_ClockConfig+0x244>)
 80314d0:	6a1b      	ldr	r3, [r3, #32]
 80314d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80314d6:	687b      	ldr	r3, [r7, #4]
 80314d8:	69db      	ldr	r3, [r3, #28]
 80314da:	4953      	ldr	r1, [pc, #332]	; (8031628 <HAL_RCC_ClockConfig+0x244>)
 80314dc:	4313      	orrs	r3, r2
 80314de:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80314e0:	687b      	ldr	r3, [r7, #4]
 80314e2:	681b      	ldr	r3, [r3, #0]
 80314e4:	f003 0302 	and.w	r3, r3, #2
 80314e8:	2b00      	cmp	r3, #0
 80314ea:	d010      	beq.n	803150e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80314ec:	687b      	ldr	r3, [r7, #4]
 80314ee:	68da      	ldr	r2, [r3, #12]
 80314f0:	4b4d      	ldr	r3, [pc, #308]	; (8031628 <HAL_RCC_ClockConfig+0x244>)
 80314f2:	699b      	ldr	r3, [r3, #24]
 80314f4:	f003 030f 	and.w	r3, r3, #15
 80314f8:	429a      	cmp	r2, r3
 80314fa:	d908      	bls.n	803150e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80314fc:	4b4a      	ldr	r3, [pc, #296]	; (8031628 <HAL_RCC_ClockConfig+0x244>)
 80314fe:	699b      	ldr	r3, [r3, #24]
 8031500:	f023 020f 	bic.w	r2, r3, #15
 8031504:	687b      	ldr	r3, [r7, #4]
 8031506:	68db      	ldr	r3, [r3, #12]
 8031508:	4947      	ldr	r1, [pc, #284]	; (8031628 <HAL_RCC_ClockConfig+0x244>)
 803150a:	4313      	orrs	r3, r2
 803150c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 803150e:	687b      	ldr	r3, [r7, #4]
 8031510:	681b      	ldr	r3, [r3, #0]
 8031512:	f003 0301 	and.w	r3, r3, #1
 8031516:	2b00      	cmp	r3, #0
 8031518:	d055      	beq.n	80315c6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 803151a:	4b43      	ldr	r3, [pc, #268]	; (8031628 <HAL_RCC_ClockConfig+0x244>)
 803151c:	699b      	ldr	r3, [r3, #24]
 803151e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8031522:	687b      	ldr	r3, [r7, #4]
 8031524:	689b      	ldr	r3, [r3, #8]
 8031526:	4940      	ldr	r1, [pc, #256]	; (8031628 <HAL_RCC_ClockConfig+0x244>)
 8031528:	4313      	orrs	r3, r2
 803152a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 803152c:	687b      	ldr	r3, [r7, #4]
 803152e:	685b      	ldr	r3, [r3, #4]
 8031530:	2b02      	cmp	r3, #2
 8031532:	d107      	bne.n	8031544 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8031534:	4b3c      	ldr	r3, [pc, #240]	; (8031628 <HAL_RCC_ClockConfig+0x244>)
 8031536:	681b      	ldr	r3, [r3, #0]
 8031538:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 803153c:	2b00      	cmp	r3, #0
 803153e:	d121      	bne.n	8031584 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8031540:	2301      	movs	r3, #1
 8031542:	e0f6      	b.n	8031732 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8031544:	687b      	ldr	r3, [r7, #4]
 8031546:	685b      	ldr	r3, [r3, #4]
 8031548:	2b03      	cmp	r3, #3
 803154a:	d107      	bne.n	803155c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 803154c:	4b36      	ldr	r3, [pc, #216]	; (8031628 <HAL_RCC_ClockConfig+0x244>)
 803154e:	681b      	ldr	r3, [r3, #0]
 8031550:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8031554:	2b00      	cmp	r3, #0
 8031556:	d115      	bne.n	8031584 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8031558:	2301      	movs	r3, #1
 803155a:	e0ea      	b.n	8031732 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 803155c:	687b      	ldr	r3, [r7, #4]
 803155e:	685b      	ldr	r3, [r3, #4]
 8031560:	2b01      	cmp	r3, #1
 8031562:	d107      	bne.n	8031574 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8031564:	4b30      	ldr	r3, [pc, #192]	; (8031628 <HAL_RCC_ClockConfig+0x244>)
 8031566:	681b      	ldr	r3, [r3, #0]
 8031568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 803156c:	2b00      	cmp	r3, #0
 803156e:	d109      	bne.n	8031584 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8031570:	2301      	movs	r3, #1
 8031572:	e0de      	b.n	8031732 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8031574:	4b2c      	ldr	r3, [pc, #176]	; (8031628 <HAL_RCC_ClockConfig+0x244>)
 8031576:	681b      	ldr	r3, [r3, #0]
 8031578:	f003 0304 	and.w	r3, r3, #4
 803157c:	2b00      	cmp	r3, #0
 803157e:	d101      	bne.n	8031584 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8031580:	2301      	movs	r3, #1
 8031582:	e0d6      	b.n	8031732 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8031584:	4b28      	ldr	r3, [pc, #160]	; (8031628 <HAL_RCC_ClockConfig+0x244>)
 8031586:	691b      	ldr	r3, [r3, #16]
 8031588:	f023 0207 	bic.w	r2, r3, #7
 803158c:	687b      	ldr	r3, [r7, #4]
 803158e:	685b      	ldr	r3, [r3, #4]
 8031590:	4925      	ldr	r1, [pc, #148]	; (8031628 <HAL_RCC_ClockConfig+0x244>)
 8031592:	4313      	orrs	r3, r2
 8031594:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8031596:	f7f9 fb0f 	bl	802abb8 <HAL_GetTick>
 803159a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 803159c:	e00a      	b.n	80315b4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 803159e:	f7f9 fb0b 	bl	802abb8 <HAL_GetTick>
 80315a2:	4602      	mov	r2, r0
 80315a4:	697b      	ldr	r3, [r7, #20]
 80315a6:	1ad3      	subs	r3, r2, r3
 80315a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80315ac:	4293      	cmp	r3, r2
 80315ae:	d901      	bls.n	80315b4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80315b0:	2303      	movs	r3, #3
 80315b2:	e0be      	b.n	8031732 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80315b4:	4b1c      	ldr	r3, [pc, #112]	; (8031628 <HAL_RCC_ClockConfig+0x244>)
 80315b6:	691b      	ldr	r3, [r3, #16]
 80315b8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80315bc:	687b      	ldr	r3, [r7, #4]
 80315be:	685b      	ldr	r3, [r3, #4]
 80315c0:	00db      	lsls	r3, r3, #3
 80315c2:	429a      	cmp	r2, r3
 80315c4:	d1eb      	bne.n	803159e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80315c6:	687b      	ldr	r3, [r7, #4]
 80315c8:	681b      	ldr	r3, [r3, #0]
 80315ca:	f003 0302 	and.w	r3, r3, #2
 80315ce:	2b00      	cmp	r3, #0
 80315d0:	d010      	beq.n	80315f4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80315d2:	687b      	ldr	r3, [r7, #4]
 80315d4:	68da      	ldr	r2, [r3, #12]
 80315d6:	4b14      	ldr	r3, [pc, #80]	; (8031628 <HAL_RCC_ClockConfig+0x244>)
 80315d8:	699b      	ldr	r3, [r3, #24]
 80315da:	f003 030f 	and.w	r3, r3, #15
 80315de:	429a      	cmp	r2, r3
 80315e0:	d208      	bcs.n	80315f4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80315e2:	4b11      	ldr	r3, [pc, #68]	; (8031628 <HAL_RCC_ClockConfig+0x244>)
 80315e4:	699b      	ldr	r3, [r3, #24]
 80315e6:	f023 020f 	bic.w	r2, r3, #15
 80315ea:	687b      	ldr	r3, [r7, #4]
 80315ec:	68db      	ldr	r3, [r3, #12]
 80315ee:	490e      	ldr	r1, [pc, #56]	; (8031628 <HAL_RCC_ClockConfig+0x244>)
 80315f0:	4313      	orrs	r3, r2
 80315f2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80315f4:	4b0b      	ldr	r3, [pc, #44]	; (8031624 <HAL_RCC_ClockConfig+0x240>)
 80315f6:	681b      	ldr	r3, [r3, #0]
 80315f8:	f003 030f 	and.w	r3, r3, #15
 80315fc:	683a      	ldr	r2, [r7, #0]
 80315fe:	429a      	cmp	r2, r3
 8031600:	d214      	bcs.n	803162c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8031602:	4b08      	ldr	r3, [pc, #32]	; (8031624 <HAL_RCC_ClockConfig+0x240>)
 8031604:	681b      	ldr	r3, [r3, #0]
 8031606:	f023 020f 	bic.w	r2, r3, #15
 803160a:	4906      	ldr	r1, [pc, #24]	; (8031624 <HAL_RCC_ClockConfig+0x240>)
 803160c:	683b      	ldr	r3, [r7, #0]
 803160e:	4313      	orrs	r3, r2
 8031610:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8031612:	4b04      	ldr	r3, [pc, #16]	; (8031624 <HAL_RCC_ClockConfig+0x240>)
 8031614:	681b      	ldr	r3, [r3, #0]
 8031616:	f003 030f 	and.w	r3, r3, #15
 803161a:	683a      	ldr	r2, [r7, #0]
 803161c:	429a      	cmp	r2, r3
 803161e:	d005      	beq.n	803162c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8031620:	2301      	movs	r3, #1
 8031622:	e086      	b.n	8031732 <HAL_RCC_ClockConfig+0x34e>
 8031624:	52002000 	.word	0x52002000
 8031628:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 803162c:	687b      	ldr	r3, [r7, #4]
 803162e:	681b      	ldr	r3, [r3, #0]
 8031630:	f003 0304 	and.w	r3, r3, #4
 8031634:	2b00      	cmp	r3, #0
 8031636:	d010      	beq.n	803165a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8031638:	687b      	ldr	r3, [r7, #4]
 803163a:	691a      	ldr	r2, [r3, #16]
 803163c:	4b3f      	ldr	r3, [pc, #252]	; (803173c <HAL_RCC_ClockConfig+0x358>)
 803163e:	699b      	ldr	r3, [r3, #24]
 8031640:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8031644:	429a      	cmp	r2, r3
 8031646:	d208      	bcs.n	803165a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8031648:	4b3c      	ldr	r3, [pc, #240]	; (803173c <HAL_RCC_ClockConfig+0x358>)
 803164a:	699b      	ldr	r3, [r3, #24]
 803164c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8031650:	687b      	ldr	r3, [r7, #4]
 8031652:	691b      	ldr	r3, [r3, #16]
 8031654:	4939      	ldr	r1, [pc, #228]	; (803173c <HAL_RCC_ClockConfig+0x358>)
 8031656:	4313      	orrs	r3, r2
 8031658:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 803165a:	687b      	ldr	r3, [r7, #4]
 803165c:	681b      	ldr	r3, [r3, #0]
 803165e:	f003 0308 	and.w	r3, r3, #8
 8031662:	2b00      	cmp	r3, #0
 8031664:	d010      	beq.n	8031688 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8031666:	687b      	ldr	r3, [r7, #4]
 8031668:	695a      	ldr	r2, [r3, #20]
 803166a:	4b34      	ldr	r3, [pc, #208]	; (803173c <HAL_RCC_ClockConfig+0x358>)
 803166c:	69db      	ldr	r3, [r3, #28]
 803166e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8031672:	429a      	cmp	r2, r3
 8031674:	d208      	bcs.n	8031688 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8031676:	4b31      	ldr	r3, [pc, #196]	; (803173c <HAL_RCC_ClockConfig+0x358>)
 8031678:	69db      	ldr	r3, [r3, #28]
 803167a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 803167e:	687b      	ldr	r3, [r7, #4]
 8031680:	695b      	ldr	r3, [r3, #20]
 8031682:	492e      	ldr	r1, [pc, #184]	; (803173c <HAL_RCC_ClockConfig+0x358>)
 8031684:	4313      	orrs	r3, r2
 8031686:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8031688:	687b      	ldr	r3, [r7, #4]
 803168a:	681b      	ldr	r3, [r3, #0]
 803168c:	f003 0310 	and.w	r3, r3, #16
 8031690:	2b00      	cmp	r3, #0
 8031692:	d010      	beq.n	80316b6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8031694:	687b      	ldr	r3, [r7, #4]
 8031696:	699a      	ldr	r2, [r3, #24]
 8031698:	4b28      	ldr	r3, [pc, #160]	; (803173c <HAL_RCC_ClockConfig+0x358>)
 803169a:	69db      	ldr	r3, [r3, #28]
 803169c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80316a0:	429a      	cmp	r2, r3
 80316a2:	d208      	bcs.n	80316b6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80316a4:	4b25      	ldr	r3, [pc, #148]	; (803173c <HAL_RCC_ClockConfig+0x358>)
 80316a6:	69db      	ldr	r3, [r3, #28]
 80316a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80316ac:	687b      	ldr	r3, [r7, #4]
 80316ae:	699b      	ldr	r3, [r3, #24]
 80316b0:	4922      	ldr	r1, [pc, #136]	; (803173c <HAL_RCC_ClockConfig+0x358>)
 80316b2:	4313      	orrs	r3, r2
 80316b4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80316b6:	687b      	ldr	r3, [r7, #4]
 80316b8:	681b      	ldr	r3, [r3, #0]
 80316ba:	f003 0320 	and.w	r3, r3, #32
 80316be:	2b00      	cmp	r3, #0
 80316c0:	d010      	beq.n	80316e4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80316c2:	687b      	ldr	r3, [r7, #4]
 80316c4:	69da      	ldr	r2, [r3, #28]
 80316c6:	4b1d      	ldr	r3, [pc, #116]	; (803173c <HAL_RCC_ClockConfig+0x358>)
 80316c8:	6a1b      	ldr	r3, [r3, #32]
 80316ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80316ce:	429a      	cmp	r2, r3
 80316d0:	d208      	bcs.n	80316e4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80316d2:	4b1a      	ldr	r3, [pc, #104]	; (803173c <HAL_RCC_ClockConfig+0x358>)
 80316d4:	6a1b      	ldr	r3, [r3, #32]
 80316d6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80316da:	687b      	ldr	r3, [r7, #4]
 80316dc:	69db      	ldr	r3, [r3, #28]
 80316de:	4917      	ldr	r1, [pc, #92]	; (803173c <HAL_RCC_ClockConfig+0x358>)
 80316e0:	4313      	orrs	r3, r2
 80316e2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80316e4:	f000 f834 	bl	8031750 <HAL_RCC_GetSysClockFreq>
 80316e8:	4602      	mov	r2, r0
 80316ea:	4b14      	ldr	r3, [pc, #80]	; (803173c <HAL_RCC_ClockConfig+0x358>)
 80316ec:	699b      	ldr	r3, [r3, #24]
 80316ee:	0a1b      	lsrs	r3, r3, #8
 80316f0:	f003 030f 	and.w	r3, r3, #15
 80316f4:	4912      	ldr	r1, [pc, #72]	; (8031740 <HAL_RCC_ClockConfig+0x35c>)
 80316f6:	5ccb      	ldrb	r3, [r1, r3]
 80316f8:	f003 031f 	and.w	r3, r3, #31
 80316fc:	fa22 f303 	lsr.w	r3, r2, r3
 8031700:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8031702:	4b0e      	ldr	r3, [pc, #56]	; (803173c <HAL_RCC_ClockConfig+0x358>)
 8031704:	699b      	ldr	r3, [r3, #24]
 8031706:	f003 030f 	and.w	r3, r3, #15
 803170a:	4a0d      	ldr	r2, [pc, #52]	; (8031740 <HAL_RCC_ClockConfig+0x35c>)
 803170c:	5cd3      	ldrb	r3, [r2, r3]
 803170e:	f003 031f 	and.w	r3, r3, #31
 8031712:	693a      	ldr	r2, [r7, #16]
 8031714:	fa22 f303 	lsr.w	r3, r2, r3
 8031718:	4a0a      	ldr	r2, [pc, #40]	; (8031744 <HAL_RCC_ClockConfig+0x360>)
 803171a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 803171c:	4a0a      	ldr	r2, [pc, #40]	; (8031748 <HAL_RCC_ClockConfig+0x364>)
 803171e:	693b      	ldr	r3, [r7, #16]
 8031720:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8031722:	4b0a      	ldr	r3, [pc, #40]	; (803174c <HAL_RCC_ClockConfig+0x368>)
 8031724:	681b      	ldr	r3, [r3, #0]
 8031726:	4618      	mov	r0, r3
 8031728:	f7f9 f9fc 	bl	802ab24 <HAL_InitTick>
 803172c:	4603      	mov	r3, r0
 803172e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8031730:	7bfb      	ldrb	r3, [r7, #15]
}
 8031732:	4618      	mov	r0, r3
 8031734:	3718      	adds	r7, #24
 8031736:	46bd      	mov	sp, r7
 8031738:	bd80      	pop	{r7, pc}
 803173a:	bf00      	nop
 803173c:	58024400 	.word	0x58024400
 8031740:	08058448 	.word	0x08058448
 8031744:	24000008 	.word	0x24000008
 8031748:	24000004 	.word	0x24000004
 803174c:	2400000c 	.word	0x2400000c

08031750 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8031750:	b480      	push	{r7}
 8031752:	b089      	sub	sp, #36	; 0x24
 8031754:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8031756:	4bb3      	ldr	r3, [pc, #716]	; (8031a24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8031758:	691b      	ldr	r3, [r3, #16]
 803175a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 803175e:	2b18      	cmp	r3, #24
 8031760:	f200 8155 	bhi.w	8031a0e <HAL_RCC_GetSysClockFreq+0x2be>
 8031764:	a201      	add	r2, pc, #4	; (adr r2, 803176c <HAL_RCC_GetSysClockFreq+0x1c>)
 8031766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803176a:	bf00      	nop
 803176c:	080317d1 	.word	0x080317d1
 8031770:	08031a0f 	.word	0x08031a0f
 8031774:	08031a0f 	.word	0x08031a0f
 8031778:	08031a0f 	.word	0x08031a0f
 803177c:	08031a0f 	.word	0x08031a0f
 8031780:	08031a0f 	.word	0x08031a0f
 8031784:	08031a0f 	.word	0x08031a0f
 8031788:	08031a0f 	.word	0x08031a0f
 803178c:	080317f7 	.word	0x080317f7
 8031790:	08031a0f 	.word	0x08031a0f
 8031794:	08031a0f 	.word	0x08031a0f
 8031798:	08031a0f 	.word	0x08031a0f
 803179c:	08031a0f 	.word	0x08031a0f
 80317a0:	08031a0f 	.word	0x08031a0f
 80317a4:	08031a0f 	.word	0x08031a0f
 80317a8:	08031a0f 	.word	0x08031a0f
 80317ac:	080317fd 	.word	0x080317fd
 80317b0:	08031a0f 	.word	0x08031a0f
 80317b4:	08031a0f 	.word	0x08031a0f
 80317b8:	08031a0f 	.word	0x08031a0f
 80317bc:	08031a0f 	.word	0x08031a0f
 80317c0:	08031a0f 	.word	0x08031a0f
 80317c4:	08031a0f 	.word	0x08031a0f
 80317c8:	08031a0f 	.word	0x08031a0f
 80317cc:	08031803 	.word	0x08031803
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80317d0:	4b94      	ldr	r3, [pc, #592]	; (8031a24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80317d2:	681b      	ldr	r3, [r3, #0]
 80317d4:	f003 0320 	and.w	r3, r3, #32
 80317d8:	2b00      	cmp	r3, #0
 80317da:	d009      	beq.n	80317f0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80317dc:	4b91      	ldr	r3, [pc, #580]	; (8031a24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80317de:	681b      	ldr	r3, [r3, #0]
 80317e0:	08db      	lsrs	r3, r3, #3
 80317e2:	f003 0303 	and.w	r3, r3, #3
 80317e6:	4a90      	ldr	r2, [pc, #576]	; (8031a28 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80317e8:	fa22 f303 	lsr.w	r3, r2, r3
 80317ec:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80317ee:	e111      	b.n	8031a14 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80317f0:	4b8d      	ldr	r3, [pc, #564]	; (8031a28 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80317f2:	61bb      	str	r3, [r7, #24]
    break;
 80317f4:	e10e      	b.n	8031a14 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80317f6:	4b8d      	ldr	r3, [pc, #564]	; (8031a2c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80317f8:	61bb      	str	r3, [r7, #24]
    break;
 80317fa:	e10b      	b.n	8031a14 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80317fc:	4b8c      	ldr	r3, [pc, #560]	; (8031a30 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80317fe:	61bb      	str	r3, [r7, #24]
    break;
 8031800:	e108      	b.n	8031a14 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8031802:	4b88      	ldr	r3, [pc, #544]	; (8031a24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8031804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8031806:	f003 0303 	and.w	r3, r3, #3
 803180a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 803180c:	4b85      	ldr	r3, [pc, #532]	; (8031a24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 803180e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8031810:	091b      	lsrs	r3, r3, #4
 8031812:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8031816:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8031818:	4b82      	ldr	r3, [pc, #520]	; (8031a24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 803181a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803181c:	f003 0301 	and.w	r3, r3, #1
 8031820:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8031822:	4b80      	ldr	r3, [pc, #512]	; (8031a24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8031824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8031826:	08db      	lsrs	r3, r3, #3
 8031828:	f3c3 030c 	ubfx	r3, r3, #0, #13
 803182c:	68fa      	ldr	r2, [r7, #12]
 803182e:	fb02 f303 	mul.w	r3, r2, r3
 8031832:	ee07 3a90 	vmov	s15, r3
 8031836:	eef8 7a67 	vcvt.f32.u32	s15, s15
 803183a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 803183e:	693b      	ldr	r3, [r7, #16]
 8031840:	2b00      	cmp	r3, #0
 8031842:	f000 80e1 	beq.w	8031a08 <HAL_RCC_GetSysClockFreq+0x2b8>
 8031846:	697b      	ldr	r3, [r7, #20]
 8031848:	2b02      	cmp	r3, #2
 803184a:	f000 8083 	beq.w	8031954 <HAL_RCC_GetSysClockFreq+0x204>
 803184e:	697b      	ldr	r3, [r7, #20]
 8031850:	2b02      	cmp	r3, #2
 8031852:	f200 80a1 	bhi.w	8031998 <HAL_RCC_GetSysClockFreq+0x248>
 8031856:	697b      	ldr	r3, [r7, #20]
 8031858:	2b00      	cmp	r3, #0
 803185a:	d003      	beq.n	8031864 <HAL_RCC_GetSysClockFreq+0x114>
 803185c:	697b      	ldr	r3, [r7, #20]
 803185e:	2b01      	cmp	r3, #1
 8031860:	d056      	beq.n	8031910 <HAL_RCC_GetSysClockFreq+0x1c0>
 8031862:	e099      	b.n	8031998 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8031864:	4b6f      	ldr	r3, [pc, #444]	; (8031a24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8031866:	681b      	ldr	r3, [r3, #0]
 8031868:	f003 0320 	and.w	r3, r3, #32
 803186c:	2b00      	cmp	r3, #0
 803186e:	d02d      	beq.n	80318cc <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8031870:	4b6c      	ldr	r3, [pc, #432]	; (8031a24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8031872:	681b      	ldr	r3, [r3, #0]
 8031874:	08db      	lsrs	r3, r3, #3
 8031876:	f003 0303 	and.w	r3, r3, #3
 803187a:	4a6b      	ldr	r2, [pc, #428]	; (8031a28 <HAL_RCC_GetSysClockFreq+0x2d8>)
 803187c:	fa22 f303 	lsr.w	r3, r2, r3
 8031880:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8031882:	687b      	ldr	r3, [r7, #4]
 8031884:	ee07 3a90 	vmov	s15, r3
 8031888:	eef8 6a67 	vcvt.f32.u32	s13, s15
 803188c:	693b      	ldr	r3, [r7, #16]
 803188e:	ee07 3a90 	vmov	s15, r3
 8031892:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8031896:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 803189a:	4b62      	ldr	r3, [pc, #392]	; (8031a24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 803189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 803189e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80318a2:	ee07 3a90 	vmov	s15, r3
 80318a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80318aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80318ae:	eddf 5a61 	vldr	s11, [pc, #388]	; 8031a34 <HAL_RCC_GetSysClockFreq+0x2e4>
 80318b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80318b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80318ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80318be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80318c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80318c6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80318ca:	e087      	b.n	80319dc <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80318cc:	693b      	ldr	r3, [r7, #16]
 80318ce:	ee07 3a90 	vmov	s15, r3
 80318d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80318d6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8031a38 <HAL_RCC_GetSysClockFreq+0x2e8>
 80318da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80318de:	4b51      	ldr	r3, [pc, #324]	; (8031a24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80318e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80318e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80318e6:	ee07 3a90 	vmov	s15, r3
 80318ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80318ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80318f2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8031a34 <HAL_RCC_GetSysClockFreq+0x2e4>
 80318f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80318fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80318fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8031902:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8031906:	ee67 7a27 	vmul.f32	s15, s14, s15
 803190a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 803190e:	e065      	b.n	80319dc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8031910:	693b      	ldr	r3, [r7, #16]
 8031912:	ee07 3a90 	vmov	s15, r3
 8031916:	eef8 7a67 	vcvt.f32.u32	s15, s15
 803191a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8031a3c <HAL_RCC_GetSysClockFreq+0x2ec>
 803191e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8031922:	4b40      	ldr	r3, [pc, #256]	; (8031a24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8031924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8031926:	f3c3 0308 	ubfx	r3, r3, #0, #9
 803192a:	ee07 3a90 	vmov	s15, r3
 803192e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8031932:	ed97 6a02 	vldr	s12, [r7, #8]
 8031936:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8031a34 <HAL_RCC_GetSysClockFreq+0x2e4>
 803193a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 803193e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8031942:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8031946:	ee77 7aa6 	vadd.f32	s15, s15, s13
 803194a:	ee67 7a27 	vmul.f32	s15, s14, s15
 803194e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8031952:	e043      	b.n	80319dc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8031954:	693b      	ldr	r3, [r7, #16]
 8031956:	ee07 3a90 	vmov	s15, r3
 803195a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 803195e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8031a40 <HAL_RCC_GetSysClockFreq+0x2f0>
 8031962:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8031966:	4b2f      	ldr	r3, [pc, #188]	; (8031a24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8031968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 803196a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 803196e:	ee07 3a90 	vmov	s15, r3
 8031972:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8031976:	ed97 6a02 	vldr	s12, [r7, #8]
 803197a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8031a34 <HAL_RCC_GetSysClockFreq+0x2e4>
 803197e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8031982:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8031986:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 803198a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 803198e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8031992:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8031996:	e021      	b.n	80319dc <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8031998:	693b      	ldr	r3, [r7, #16]
 803199a:	ee07 3a90 	vmov	s15, r3
 803199e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80319a2:	eddf 6a26 	vldr	s13, [pc, #152]	; 8031a3c <HAL_RCC_GetSysClockFreq+0x2ec>
 80319a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80319aa:	4b1e      	ldr	r3, [pc, #120]	; (8031a24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80319ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80319ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80319b2:	ee07 3a90 	vmov	s15, r3
 80319b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80319ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80319be:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8031a34 <HAL_RCC_GetSysClockFreq+0x2e4>
 80319c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80319c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80319ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80319ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80319d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80319d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80319da:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80319dc:	4b11      	ldr	r3, [pc, #68]	; (8031a24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80319de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80319e0:	0a5b      	lsrs	r3, r3, #9
 80319e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80319e6:	3301      	adds	r3, #1
 80319e8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80319ea:	683b      	ldr	r3, [r7, #0]
 80319ec:	ee07 3a90 	vmov	s15, r3
 80319f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80319f4:	edd7 6a07 	vldr	s13, [r7, #28]
 80319f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80319fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8031a00:	ee17 3a90 	vmov	r3, s15
 8031a04:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8031a06:	e005      	b.n	8031a14 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8031a08:	2300      	movs	r3, #0
 8031a0a:	61bb      	str	r3, [r7, #24]
    break;
 8031a0c:	e002      	b.n	8031a14 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8031a0e:	4b07      	ldr	r3, [pc, #28]	; (8031a2c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8031a10:	61bb      	str	r3, [r7, #24]
    break;
 8031a12:	bf00      	nop
  }

  return sysclockfreq;
 8031a14:	69bb      	ldr	r3, [r7, #24]
}
 8031a16:	4618      	mov	r0, r3
 8031a18:	3724      	adds	r7, #36	; 0x24
 8031a1a:	46bd      	mov	sp, r7
 8031a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031a20:	4770      	bx	lr
 8031a22:	bf00      	nop
 8031a24:	58024400 	.word	0x58024400
 8031a28:	03d09000 	.word	0x03d09000
 8031a2c:	003d0900 	.word	0x003d0900
 8031a30:	017d7840 	.word	0x017d7840
 8031a34:	46000000 	.word	0x46000000
 8031a38:	4c742400 	.word	0x4c742400
 8031a3c:	4a742400 	.word	0x4a742400
 8031a40:	4bbebc20 	.word	0x4bbebc20

08031a44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8031a44:	b580      	push	{r7, lr}
 8031a46:	b082      	sub	sp, #8
 8031a48:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8031a4a:	f7ff fe81 	bl	8031750 <HAL_RCC_GetSysClockFreq>
 8031a4e:	4602      	mov	r2, r0
 8031a50:	4b10      	ldr	r3, [pc, #64]	; (8031a94 <HAL_RCC_GetHCLKFreq+0x50>)
 8031a52:	699b      	ldr	r3, [r3, #24]
 8031a54:	0a1b      	lsrs	r3, r3, #8
 8031a56:	f003 030f 	and.w	r3, r3, #15
 8031a5a:	490f      	ldr	r1, [pc, #60]	; (8031a98 <HAL_RCC_GetHCLKFreq+0x54>)
 8031a5c:	5ccb      	ldrb	r3, [r1, r3]
 8031a5e:	f003 031f 	and.w	r3, r3, #31
 8031a62:	fa22 f303 	lsr.w	r3, r2, r3
 8031a66:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8031a68:	4b0a      	ldr	r3, [pc, #40]	; (8031a94 <HAL_RCC_GetHCLKFreq+0x50>)
 8031a6a:	699b      	ldr	r3, [r3, #24]
 8031a6c:	f003 030f 	and.w	r3, r3, #15
 8031a70:	4a09      	ldr	r2, [pc, #36]	; (8031a98 <HAL_RCC_GetHCLKFreq+0x54>)
 8031a72:	5cd3      	ldrb	r3, [r2, r3]
 8031a74:	f003 031f 	and.w	r3, r3, #31
 8031a78:	687a      	ldr	r2, [r7, #4]
 8031a7a:	fa22 f303 	lsr.w	r3, r2, r3
 8031a7e:	4a07      	ldr	r2, [pc, #28]	; (8031a9c <HAL_RCC_GetHCLKFreq+0x58>)
 8031a80:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8031a82:	4a07      	ldr	r2, [pc, #28]	; (8031aa0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8031a84:	687b      	ldr	r3, [r7, #4]
 8031a86:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8031a88:	4b04      	ldr	r3, [pc, #16]	; (8031a9c <HAL_RCC_GetHCLKFreq+0x58>)
 8031a8a:	681b      	ldr	r3, [r3, #0]
}
 8031a8c:	4618      	mov	r0, r3
 8031a8e:	3708      	adds	r7, #8
 8031a90:	46bd      	mov	sp, r7
 8031a92:	bd80      	pop	{r7, pc}
 8031a94:	58024400 	.word	0x58024400
 8031a98:	08058448 	.word	0x08058448
 8031a9c:	24000008 	.word	0x24000008
 8031aa0:	24000004 	.word	0x24000004

08031aa4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8031aa4:	b580      	push	{r7, lr}
 8031aa6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8031aa8:	f7ff ffcc 	bl	8031a44 <HAL_RCC_GetHCLKFreq>
 8031aac:	4602      	mov	r2, r0
 8031aae:	4b06      	ldr	r3, [pc, #24]	; (8031ac8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8031ab0:	69db      	ldr	r3, [r3, #28]
 8031ab2:	091b      	lsrs	r3, r3, #4
 8031ab4:	f003 0307 	and.w	r3, r3, #7
 8031ab8:	4904      	ldr	r1, [pc, #16]	; (8031acc <HAL_RCC_GetPCLK1Freq+0x28>)
 8031aba:	5ccb      	ldrb	r3, [r1, r3]
 8031abc:	f003 031f 	and.w	r3, r3, #31
 8031ac0:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8031ac4:	4618      	mov	r0, r3
 8031ac6:	bd80      	pop	{r7, pc}
 8031ac8:	58024400 	.word	0x58024400
 8031acc:	08058448 	.word	0x08058448

08031ad0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8031ad0:	b580      	push	{r7, lr}
 8031ad2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8031ad4:	f7ff ffb6 	bl	8031a44 <HAL_RCC_GetHCLKFreq>
 8031ad8:	4602      	mov	r2, r0
 8031ada:	4b06      	ldr	r3, [pc, #24]	; (8031af4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8031adc:	69db      	ldr	r3, [r3, #28]
 8031ade:	0a1b      	lsrs	r3, r3, #8
 8031ae0:	f003 0307 	and.w	r3, r3, #7
 8031ae4:	4904      	ldr	r1, [pc, #16]	; (8031af8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8031ae6:	5ccb      	ldrb	r3, [r1, r3]
 8031ae8:	f003 031f 	and.w	r3, r3, #31
 8031aec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8031af0:	4618      	mov	r0, r3
 8031af2:	bd80      	pop	{r7, pc}
 8031af4:	58024400 	.word	0x58024400
 8031af8:	08058448 	.word	0x08058448

08031afc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8031afc:	b580      	push	{r7, lr}
 8031afe:	b086      	sub	sp, #24
 8031b00:	af00      	add	r7, sp, #0
 8031b02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8031b04:	2300      	movs	r3, #0
 8031b06:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8031b08:	2300      	movs	r3, #0
 8031b0a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8031b0c:	687b      	ldr	r3, [r7, #4]
 8031b0e:	681b      	ldr	r3, [r3, #0]
 8031b10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8031b14:	2b00      	cmp	r3, #0
 8031b16:	d03f      	beq.n	8031b98 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8031b18:	687b      	ldr	r3, [r7, #4]
 8031b1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8031b1c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8031b20:	d02a      	beq.n	8031b78 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8031b22:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8031b26:	d824      	bhi.n	8031b72 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8031b28:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8031b2c:	d018      	beq.n	8031b60 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8031b2e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8031b32:	d81e      	bhi.n	8031b72 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8031b34:	2b00      	cmp	r3, #0
 8031b36:	d003      	beq.n	8031b40 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8031b38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8031b3c:	d007      	beq.n	8031b4e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8031b3e:	e018      	b.n	8031b72 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8031b40:	4ba3      	ldr	r3, [pc, #652]	; (8031dd0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8031b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8031b44:	4aa2      	ldr	r2, [pc, #648]	; (8031dd0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8031b46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8031b4a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8031b4c:	e015      	b.n	8031b7a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8031b4e:	687b      	ldr	r3, [r7, #4]
 8031b50:	3304      	adds	r3, #4
 8031b52:	2102      	movs	r1, #2
 8031b54:	4618      	mov	r0, r3
 8031b56:	f001 f9d5 	bl	8032f04 <RCCEx_PLL2_Config>
 8031b5a:	4603      	mov	r3, r0
 8031b5c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8031b5e:	e00c      	b.n	8031b7a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8031b60:	687b      	ldr	r3, [r7, #4]
 8031b62:	3324      	adds	r3, #36	; 0x24
 8031b64:	2102      	movs	r1, #2
 8031b66:	4618      	mov	r0, r3
 8031b68:	f001 fa7e 	bl	8033068 <RCCEx_PLL3_Config>
 8031b6c:	4603      	mov	r3, r0
 8031b6e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8031b70:	e003      	b.n	8031b7a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8031b72:	2301      	movs	r3, #1
 8031b74:	75fb      	strb	r3, [r7, #23]
      break;
 8031b76:	e000      	b.n	8031b7a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8031b78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8031b7a:	7dfb      	ldrb	r3, [r7, #23]
 8031b7c:	2b00      	cmp	r3, #0
 8031b7e:	d109      	bne.n	8031b94 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8031b80:	4b93      	ldr	r3, [pc, #588]	; (8031dd0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8031b82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8031b84:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8031b88:	687b      	ldr	r3, [r7, #4]
 8031b8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8031b8c:	4990      	ldr	r1, [pc, #576]	; (8031dd0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8031b8e:	4313      	orrs	r3, r2
 8031b90:	650b      	str	r3, [r1, #80]	; 0x50
 8031b92:	e001      	b.n	8031b98 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8031b94:	7dfb      	ldrb	r3, [r7, #23]
 8031b96:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8031b98:	687b      	ldr	r3, [r7, #4]
 8031b9a:	681b      	ldr	r3, [r3, #0]
 8031b9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8031ba0:	2b00      	cmp	r3, #0
 8031ba2:	d03d      	beq.n	8031c20 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8031ba4:	687b      	ldr	r3, [r7, #4]
 8031ba6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8031ba8:	2b04      	cmp	r3, #4
 8031baa:	d826      	bhi.n	8031bfa <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8031bac:	a201      	add	r2, pc, #4	; (adr r2, 8031bb4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8031bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8031bb2:	bf00      	nop
 8031bb4:	08031bc9 	.word	0x08031bc9
 8031bb8:	08031bd7 	.word	0x08031bd7
 8031bbc:	08031be9 	.word	0x08031be9
 8031bc0:	08031c01 	.word	0x08031c01
 8031bc4:	08031c01 	.word	0x08031c01
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8031bc8:	4b81      	ldr	r3, [pc, #516]	; (8031dd0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8031bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8031bcc:	4a80      	ldr	r2, [pc, #512]	; (8031dd0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8031bce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8031bd2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8031bd4:	e015      	b.n	8031c02 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8031bd6:	687b      	ldr	r3, [r7, #4]
 8031bd8:	3304      	adds	r3, #4
 8031bda:	2100      	movs	r1, #0
 8031bdc:	4618      	mov	r0, r3
 8031bde:	f001 f991 	bl	8032f04 <RCCEx_PLL2_Config>
 8031be2:	4603      	mov	r3, r0
 8031be4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8031be6:	e00c      	b.n	8031c02 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8031be8:	687b      	ldr	r3, [r7, #4]
 8031bea:	3324      	adds	r3, #36	; 0x24
 8031bec:	2100      	movs	r1, #0
 8031bee:	4618      	mov	r0, r3
 8031bf0:	f001 fa3a 	bl	8033068 <RCCEx_PLL3_Config>
 8031bf4:	4603      	mov	r3, r0
 8031bf6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8031bf8:	e003      	b.n	8031c02 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8031bfa:	2301      	movs	r3, #1
 8031bfc:	75fb      	strb	r3, [r7, #23]
      break;
 8031bfe:	e000      	b.n	8031c02 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8031c00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8031c02:	7dfb      	ldrb	r3, [r7, #23]
 8031c04:	2b00      	cmp	r3, #0
 8031c06:	d109      	bne.n	8031c1c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8031c08:	4b71      	ldr	r3, [pc, #452]	; (8031dd0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8031c0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8031c0c:	f023 0207 	bic.w	r2, r3, #7
 8031c10:	687b      	ldr	r3, [r7, #4]
 8031c12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8031c14:	496e      	ldr	r1, [pc, #440]	; (8031dd0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8031c16:	4313      	orrs	r3, r2
 8031c18:	650b      	str	r3, [r1, #80]	; 0x50
 8031c1a:	e001      	b.n	8031c20 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8031c1c:	7dfb      	ldrb	r3, [r7, #23]
 8031c1e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8031c20:	687b      	ldr	r3, [r7, #4]
 8031c22:	681b      	ldr	r3, [r3, #0]
 8031c24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8031c28:	2b00      	cmp	r3, #0
 8031c2a:	d042      	beq.n	8031cb2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8031c2c:	687b      	ldr	r3, [r7, #4]
 8031c2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8031c30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8031c34:	d02b      	beq.n	8031c8e <HAL_RCCEx_PeriphCLKConfig+0x192>
 8031c36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8031c3a:	d825      	bhi.n	8031c88 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8031c3c:	2bc0      	cmp	r3, #192	; 0xc0
 8031c3e:	d028      	beq.n	8031c92 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8031c40:	2bc0      	cmp	r3, #192	; 0xc0
 8031c42:	d821      	bhi.n	8031c88 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8031c44:	2b80      	cmp	r3, #128	; 0x80
 8031c46:	d016      	beq.n	8031c76 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8031c48:	2b80      	cmp	r3, #128	; 0x80
 8031c4a:	d81d      	bhi.n	8031c88 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8031c4c:	2b00      	cmp	r3, #0
 8031c4e:	d002      	beq.n	8031c56 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8031c50:	2b40      	cmp	r3, #64	; 0x40
 8031c52:	d007      	beq.n	8031c64 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8031c54:	e018      	b.n	8031c88 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8031c56:	4b5e      	ldr	r3, [pc, #376]	; (8031dd0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8031c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8031c5a:	4a5d      	ldr	r2, [pc, #372]	; (8031dd0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8031c5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8031c60:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8031c62:	e017      	b.n	8031c94 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8031c64:	687b      	ldr	r3, [r7, #4]
 8031c66:	3304      	adds	r3, #4
 8031c68:	2100      	movs	r1, #0
 8031c6a:	4618      	mov	r0, r3
 8031c6c:	f001 f94a 	bl	8032f04 <RCCEx_PLL2_Config>
 8031c70:	4603      	mov	r3, r0
 8031c72:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8031c74:	e00e      	b.n	8031c94 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8031c76:	687b      	ldr	r3, [r7, #4]
 8031c78:	3324      	adds	r3, #36	; 0x24
 8031c7a:	2100      	movs	r1, #0
 8031c7c:	4618      	mov	r0, r3
 8031c7e:	f001 f9f3 	bl	8033068 <RCCEx_PLL3_Config>
 8031c82:	4603      	mov	r3, r0
 8031c84:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8031c86:	e005      	b.n	8031c94 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8031c88:	2301      	movs	r3, #1
 8031c8a:	75fb      	strb	r3, [r7, #23]
      break;
 8031c8c:	e002      	b.n	8031c94 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8031c8e:	bf00      	nop
 8031c90:	e000      	b.n	8031c94 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8031c92:	bf00      	nop
    }

    if(ret == HAL_OK)
 8031c94:	7dfb      	ldrb	r3, [r7, #23]
 8031c96:	2b00      	cmp	r3, #0
 8031c98:	d109      	bne.n	8031cae <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8031c9a:	4b4d      	ldr	r3, [pc, #308]	; (8031dd0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8031c9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8031c9e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8031ca2:	687b      	ldr	r3, [r7, #4]
 8031ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8031ca6:	494a      	ldr	r1, [pc, #296]	; (8031dd0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8031ca8:	4313      	orrs	r3, r2
 8031caa:	650b      	str	r3, [r1, #80]	; 0x50
 8031cac:	e001      	b.n	8031cb2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8031cae:	7dfb      	ldrb	r3, [r7, #23]
 8031cb0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8031cb2:	687b      	ldr	r3, [r7, #4]
 8031cb4:	681b      	ldr	r3, [r3, #0]
 8031cb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8031cba:	2b00      	cmp	r3, #0
 8031cbc:	d049      	beq.n	8031d52 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8031cbe:	687b      	ldr	r3, [r7, #4]
 8031cc0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8031cc4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8031cc8:	d030      	beq.n	8031d2c <HAL_RCCEx_PeriphCLKConfig+0x230>
 8031cca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8031cce:	d82a      	bhi.n	8031d26 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8031cd0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8031cd4:	d02c      	beq.n	8031d30 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8031cd6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8031cda:	d824      	bhi.n	8031d26 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8031cdc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8031ce0:	d018      	beq.n	8031d14 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8031ce2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8031ce6:	d81e      	bhi.n	8031d26 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8031ce8:	2b00      	cmp	r3, #0
 8031cea:	d003      	beq.n	8031cf4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8031cec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8031cf0:	d007      	beq.n	8031d02 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8031cf2:	e018      	b.n	8031d26 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8031cf4:	4b36      	ldr	r3, [pc, #216]	; (8031dd0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8031cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8031cf8:	4a35      	ldr	r2, [pc, #212]	; (8031dd0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8031cfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8031cfe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8031d00:	e017      	b.n	8031d32 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8031d02:	687b      	ldr	r3, [r7, #4]
 8031d04:	3304      	adds	r3, #4
 8031d06:	2100      	movs	r1, #0
 8031d08:	4618      	mov	r0, r3
 8031d0a:	f001 f8fb 	bl	8032f04 <RCCEx_PLL2_Config>
 8031d0e:	4603      	mov	r3, r0
 8031d10:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8031d12:	e00e      	b.n	8031d32 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8031d14:	687b      	ldr	r3, [r7, #4]
 8031d16:	3324      	adds	r3, #36	; 0x24
 8031d18:	2100      	movs	r1, #0
 8031d1a:	4618      	mov	r0, r3
 8031d1c:	f001 f9a4 	bl	8033068 <RCCEx_PLL3_Config>
 8031d20:	4603      	mov	r3, r0
 8031d22:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8031d24:	e005      	b.n	8031d32 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8031d26:	2301      	movs	r3, #1
 8031d28:	75fb      	strb	r3, [r7, #23]
      break;
 8031d2a:	e002      	b.n	8031d32 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8031d2c:	bf00      	nop
 8031d2e:	e000      	b.n	8031d32 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8031d30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8031d32:	7dfb      	ldrb	r3, [r7, #23]
 8031d34:	2b00      	cmp	r3, #0
 8031d36:	d10a      	bne.n	8031d4e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8031d38:	4b25      	ldr	r3, [pc, #148]	; (8031dd0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8031d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8031d3c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8031d40:	687b      	ldr	r3, [r7, #4]
 8031d42:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8031d46:	4922      	ldr	r1, [pc, #136]	; (8031dd0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8031d48:	4313      	orrs	r3, r2
 8031d4a:	658b      	str	r3, [r1, #88]	; 0x58
 8031d4c:	e001      	b.n	8031d52 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8031d4e:	7dfb      	ldrb	r3, [r7, #23]
 8031d50:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8031d52:	687b      	ldr	r3, [r7, #4]
 8031d54:	681b      	ldr	r3, [r3, #0]
 8031d56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8031d5a:	2b00      	cmp	r3, #0
 8031d5c:	d04b      	beq.n	8031df6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8031d5e:	687b      	ldr	r3, [r7, #4]
 8031d60:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8031d64:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8031d68:	d030      	beq.n	8031dcc <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8031d6a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8031d6e:	d82a      	bhi.n	8031dc6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8031d70:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8031d74:	d02e      	beq.n	8031dd4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8031d76:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8031d7a:	d824      	bhi.n	8031dc6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8031d7c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8031d80:	d018      	beq.n	8031db4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8031d82:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8031d86:	d81e      	bhi.n	8031dc6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8031d88:	2b00      	cmp	r3, #0
 8031d8a:	d003      	beq.n	8031d94 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8031d8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8031d90:	d007      	beq.n	8031da2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8031d92:	e018      	b.n	8031dc6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8031d94:	4b0e      	ldr	r3, [pc, #56]	; (8031dd0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8031d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8031d98:	4a0d      	ldr	r2, [pc, #52]	; (8031dd0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8031d9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8031d9e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8031da0:	e019      	b.n	8031dd6 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8031da2:	687b      	ldr	r3, [r7, #4]
 8031da4:	3304      	adds	r3, #4
 8031da6:	2100      	movs	r1, #0
 8031da8:	4618      	mov	r0, r3
 8031daa:	f001 f8ab 	bl	8032f04 <RCCEx_PLL2_Config>
 8031dae:	4603      	mov	r3, r0
 8031db0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8031db2:	e010      	b.n	8031dd6 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8031db4:	687b      	ldr	r3, [r7, #4]
 8031db6:	3324      	adds	r3, #36	; 0x24
 8031db8:	2100      	movs	r1, #0
 8031dba:	4618      	mov	r0, r3
 8031dbc:	f001 f954 	bl	8033068 <RCCEx_PLL3_Config>
 8031dc0:	4603      	mov	r3, r0
 8031dc2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8031dc4:	e007      	b.n	8031dd6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8031dc6:	2301      	movs	r3, #1
 8031dc8:	75fb      	strb	r3, [r7, #23]
      break;
 8031dca:	e004      	b.n	8031dd6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8031dcc:	bf00      	nop
 8031dce:	e002      	b.n	8031dd6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8031dd0:	58024400 	.word	0x58024400
      break;
 8031dd4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8031dd6:	7dfb      	ldrb	r3, [r7, #23]
 8031dd8:	2b00      	cmp	r3, #0
 8031dda:	d10a      	bne.n	8031df2 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8031ddc:	4b99      	ldr	r3, [pc, #612]	; (8032044 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8031dde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8031de0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8031de4:	687b      	ldr	r3, [r7, #4]
 8031de6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8031dea:	4996      	ldr	r1, [pc, #600]	; (8032044 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8031dec:	4313      	orrs	r3, r2
 8031dee:	658b      	str	r3, [r1, #88]	; 0x58
 8031df0:	e001      	b.n	8031df6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8031df2:	7dfb      	ldrb	r3, [r7, #23]
 8031df4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8031df6:	687b      	ldr	r3, [r7, #4]
 8031df8:	681b      	ldr	r3, [r3, #0]
 8031dfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8031dfe:	2b00      	cmp	r3, #0
 8031e00:	d032      	beq.n	8031e68 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8031e02:	687b      	ldr	r3, [r7, #4]
 8031e04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8031e06:	2b30      	cmp	r3, #48	; 0x30
 8031e08:	d01c      	beq.n	8031e44 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8031e0a:	2b30      	cmp	r3, #48	; 0x30
 8031e0c:	d817      	bhi.n	8031e3e <HAL_RCCEx_PeriphCLKConfig+0x342>
 8031e0e:	2b20      	cmp	r3, #32
 8031e10:	d00c      	beq.n	8031e2c <HAL_RCCEx_PeriphCLKConfig+0x330>
 8031e12:	2b20      	cmp	r3, #32
 8031e14:	d813      	bhi.n	8031e3e <HAL_RCCEx_PeriphCLKConfig+0x342>
 8031e16:	2b00      	cmp	r3, #0
 8031e18:	d016      	beq.n	8031e48 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8031e1a:	2b10      	cmp	r3, #16
 8031e1c:	d10f      	bne.n	8031e3e <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8031e1e:	4b89      	ldr	r3, [pc, #548]	; (8032044 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8031e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8031e22:	4a88      	ldr	r2, [pc, #544]	; (8032044 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8031e24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8031e28:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8031e2a:	e00e      	b.n	8031e4a <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8031e2c:	687b      	ldr	r3, [r7, #4]
 8031e2e:	3304      	adds	r3, #4
 8031e30:	2102      	movs	r1, #2
 8031e32:	4618      	mov	r0, r3
 8031e34:	f001 f866 	bl	8032f04 <RCCEx_PLL2_Config>
 8031e38:	4603      	mov	r3, r0
 8031e3a:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8031e3c:	e005      	b.n	8031e4a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8031e3e:	2301      	movs	r3, #1
 8031e40:	75fb      	strb	r3, [r7, #23]
      break;
 8031e42:	e002      	b.n	8031e4a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8031e44:	bf00      	nop
 8031e46:	e000      	b.n	8031e4a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8031e48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8031e4a:	7dfb      	ldrb	r3, [r7, #23]
 8031e4c:	2b00      	cmp	r3, #0
 8031e4e:	d109      	bne.n	8031e64 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8031e50:	4b7c      	ldr	r3, [pc, #496]	; (8032044 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8031e52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8031e54:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8031e58:	687b      	ldr	r3, [r7, #4]
 8031e5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8031e5c:	4979      	ldr	r1, [pc, #484]	; (8032044 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8031e5e:	4313      	orrs	r3, r2
 8031e60:	64cb      	str	r3, [r1, #76]	; 0x4c
 8031e62:	e001      	b.n	8031e68 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8031e64:	7dfb      	ldrb	r3, [r7, #23]
 8031e66:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8031e68:	687b      	ldr	r3, [r7, #4]
 8031e6a:	681b      	ldr	r3, [r3, #0]
 8031e6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8031e70:	2b00      	cmp	r3, #0
 8031e72:	d047      	beq.n	8031f04 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8031e74:	687b      	ldr	r3, [r7, #4]
 8031e76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8031e78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8031e7c:	d030      	beq.n	8031ee0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8031e7e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8031e82:	d82a      	bhi.n	8031eda <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8031e84:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8031e88:	d02c      	beq.n	8031ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8031e8a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8031e8e:	d824      	bhi.n	8031eda <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8031e90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8031e94:	d018      	beq.n	8031ec8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8031e96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8031e9a:	d81e      	bhi.n	8031eda <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8031e9c:	2b00      	cmp	r3, #0
 8031e9e:	d003      	beq.n	8031ea8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8031ea0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8031ea4:	d007      	beq.n	8031eb6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8031ea6:	e018      	b.n	8031eda <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8031ea8:	4b66      	ldr	r3, [pc, #408]	; (8032044 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8031eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8031eac:	4a65      	ldr	r2, [pc, #404]	; (8032044 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8031eae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8031eb2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8031eb4:	e017      	b.n	8031ee6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8031eb6:	687b      	ldr	r3, [r7, #4]
 8031eb8:	3304      	adds	r3, #4
 8031eba:	2100      	movs	r1, #0
 8031ebc:	4618      	mov	r0, r3
 8031ebe:	f001 f821 	bl	8032f04 <RCCEx_PLL2_Config>
 8031ec2:	4603      	mov	r3, r0
 8031ec4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8031ec6:	e00e      	b.n	8031ee6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8031ec8:	687b      	ldr	r3, [r7, #4]
 8031eca:	3324      	adds	r3, #36	; 0x24
 8031ecc:	2100      	movs	r1, #0
 8031ece:	4618      	mov	r0, r3
 8031ed0:	f001 f8ca 	bl	8033068 <RCCEx_PLL3_Config>
 8031ed4:	4603      	mov	r3, r0
 8031ed6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8031ed8:	e005      	b.n	8031ee6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8031eda:	2301      	movs	r3, #1
 8031edc:	75fb      	strb	r3, [r7, #23]
      break;
 8031ede:	e002      	b.n	8031ee6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8031ee0:	bf00      	nop
 8031ee2:	e000      	b.n	8031ee6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8031ee4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8031ee6:	7dfb      	ldrb	r3, [r7, #23]
 8031ee8:	2b00      	cmp	r3, #0
 8031eea:	d109      	bne.n	8031f00 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8031eec:	4b55      	ldr	r3, [pc, #340]	; (8032044 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8031eee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8031ef0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8031ef4:	687b      	ldr	r3, [r7, #4]
 8031ef6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8031ef8:	4952      	ldr	r1, [pc, #328]	; (8032044 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8031efa:	4313      	orrs	r3, r2
 8031efc:	650b      	str	r3, [r1, #80]	; 0x50
 8031efe:	e001      	b.n	8031f04 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8031f00:	7dfb      	ldrb	r3, [r7, #23]
 8031f02:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8031f04:	687b      	ldr	r3, [r7, #4]
 8031f06:	681b      	ldr	r3, [r3, #0]
 8031f08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8031f0c:	2b00      	cmp	r3, #0
 8031f0e:	d049      	beq.n	8031fa4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8031f10:	687b      	ldr	r3, [r7, #4]
 8031f12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8031f14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8031f18:	d02e      	beq.n	8031f78 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8031f1a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8031f1e:	d828      	bhi.n	8031f72 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8031f20:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8031f24:	d02a      	beq.n	8031f7c <HAL_RCCEx_PeriphCLKConfig+0x480>
 8031f26:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8031f2a:	d822      	bhi.n	8031f72 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8031f2c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8031f30:	d026      	beq.n	8031f80 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8031f32:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8031f36:	d81c      	bhi.n	8031f72 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8031f38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8031f3c:	d010      	beq.n	8031f60 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8031f3e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8031f42:	d816      	bhi.n	8031f72 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8031f44:	2b00      	cmp	r3, #0
 8031f46:	d01d      	beq.n	8031f84 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8031f48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8031f4c:	d111      	bne.n	8031f72 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8031f4e:	687b      	ldr	r3, [r7, #4]
 8031f50:	3304      	adds	r3, #4
 8031f52:	2101      	movs	r1, #1
 8031f54:	4618      	mov	r0, r3
 8031f56:	f000 ffd5 	bl	8032f04 <RCCEx_PLL2_Config>
 8031f5a:	4603      	mov	r3, r0
 8031f5c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8031f5e:	e012      	b.n	8031f86 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8031f60:	687b      	ldr	r3, [r7, #4]
 8031f62:	3324      	adds	r3, #36	; 0x24
 8031f64:	2101      	movs	r1, #1
 8031f66:	4618      	mov	r0, r3
 8031f68:	f001 f87e 	bl	8033068 <RCCEx_PLL3_Config>
 8031f6c:	4603      	mov	r3, r0
 8031f6e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8031f70:	e009      	b.n	8031f86 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8031f72:	2301      	movs	r3, #1
 8031f74:	75fb      	strb	r3, [r7, #23]
      break;
 8031f76:	e006      	b.n	8031f86 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8031f78:	bf00      	nop
 8031f7a:	e004      	b.n	8031f86 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8031f7c:	bf00      	nop
 8031f7e:	e002      	b.n	8031f86 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8031f80:	bf00      	nop
 8031f82:	e000      	b.n	8031f86 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8031f84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8031f86:	7dfb      	ldrb	r3, [r7, #23]
 8031f88:	2b00      	cmp	r3, #0
 8031f8a:	d109      	bne.n	8031fa0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8031f8c:	4b2d      	ldr	r3, [pc, #180]	; (8032044 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8031f8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8031f90:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8031f94:	687b      	ldr	r3, [r7, #4]
 8031f96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8031f98:	492a      	ldr	r1, [pc, #168]	; (8032044 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8031f9a:	4313      	orrs	r3, r2
 8031f9c:	650b      	str	r3, [r1, #80]	; 0x50
 8031f9e:	e001      	b.n	8031fa4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8031fa0:	7dfb      	ldrb	r3, [r7, #23]
 8031fa2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8031fa4:	687b      	ldr	r3, [r7, #4]
 8031fa6:	681b      	ldr	r3, [r3, #0]
 8031fa8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8031fac:	2b00      	cmp	r3, #0
 8031fae:	d04d      	beq.n	803204c <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8031fb0:	687b      	ldr	r3, [r7, #4]
 8031fb2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8031fb6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8031fba:	d02e      	beq.n	803201a <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8031fbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8031fc0:	d828      	bhi.n	8032014 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8031fc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8031fc6:	d02a      	beq.n	803201e <HAL_RCCEx_PeriphCLKConfig+0x522>
 8031fc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8031fcc:	d822      	bhi.n	8032014 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8031fce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8031fd2:	d026      	beq.n	8032022 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8031fd4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8031fd8:	d81c      	bhi.n	8032014 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8031fda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8031fde:	d010      	beq.n	8032002 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8031fe0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8031fe4:	d816      	bhi.n	8032014 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8031fe6:	2b00      	cmp	r3, #0
 8031fe8:	d01d      	beq.n	8032026 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8031fea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8031fee:	d111      	bne.n	8032014 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8031ff0:	687b      	ldr	r3, [r7, #4]
 8031ff2:	3304      	adds	r3, #4
 8031ff4:	2101      	movs	r1, #1
 8031ff6:	4618      	mov	r0, r3
 8031ff8:	f000 ff84 	bl	8032f04 <RCCEx_PLL2_Config>
 8031ffc:	4603      	mov	r3, r0
 8031ffe:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8032000:	e012      	b.n	8032028 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8032002:	687b      	ldr	r3, [r7, #4]
 8032004:	3324      	adds	r3, #36	; 0x24
 8032006:	2101      	movs	r1, #1
 8032008:	4618      	mov	r0, r3
 803200a:	f001 f82d 	bl	8033068 <RCCEx_PLL3_Config>
 803200e:	4603      	mov	r3, r0
 8032010:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8032012:	e009      	b.n	8032028 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8032014:	2301      	movs	r3, #1
 8032016:	75fb      	strb	r3, [r7, #23]
      break;
 8032018:	e006      	b.n	8032028 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 803201a:	bf00      	nop
 803201c:	e004      	b.n	8032028 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 803201e:	bf00      	nop
 8032020:	e002      	b.n	8032028 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8032022:	bf00      	nop
 8032024:	e000      	b.n	8032028 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8032026:	bf00      	nop
    }

    if(ret == HAL_OK)
 8032028:	7dfb      	ldrb	r3, [r7, #23]
 803202a:	2b00      	cmp	r3, #0
 803202c:	d10c      	bne.n	8032048 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 803202e:	4b05      	ldr	r3, [pc, #20]	; (8032044 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8032030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8032032:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8032036:	687b      	ldr	r3, [r7, #4]
 8032038:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 803203c:	4901      	ldr	r1, [pc, #4]	; (8032044 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 803203e:	4313      	orrs	r3, r2
 8032040:	658b      	str	r3, [r1, #88]	; 0x58
 8032042:	e003      	b.n	803204c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8032044:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8032048:	7dfb      	ldrb	r3, [r7, #23]
 803204a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 803204c:	687b      	ldr	r3, [r7, #4]
 803204e:	681b      	ldr	r3, [r3, #0]
 8032050:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8032054:	2b00      	cmp	r3, #0
 8032056:	d02f      	beq.n	80320b8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8032058:	687b      	ldr	r3, [r7, #4]
 803205a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 803205c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8032060:	d00e      	beq.n	8032080 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8032062:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8032066:	d814      	bhi.n	8032092 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8032068:	2b00      	cmp	r3, #0
 803206a:	d015      	beq.n	8032098 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 803206c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8032070:	d10f      	bne.n	8032092 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8032072:	4baf      	ldr	r3, [pc, #700]	; (8032330 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8032074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8032076:	4aae      	ldr	r2, [pc, #696]	; (8032330 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8032078:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 803207c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 803207e:	e00c      	b.n	803209a <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8032080:	687b      	ldr	r3, [r7, #4]
 8032082:	3304      	adds	r3, #4
 8032084:	2101      	movs	r1, #1
 8032086:	4618      	mov	r0, r3
 8032088:	f000 ff3c 	bl	8032f04 <RCCEx_PLL2_Config>
 803208c:	4603      	mov	r3, r0
 803208e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8032090:	e003      	b.n	803209a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8032092:	2301      	movs	r3, #1
 8032094:	75fb      	strb	r3, [r7, #23]
      break;
 8032096:	e000      	b.n	803209a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8032098:	bf00      	nop
    }

    if(ret == HAL_OK)
 803209a:	7dfb      	ldrb	r3, [r7, #23]
 803209c:	2b00      	cmp	r3, #0
 803209e:	d109      	bne.n	80320b4 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80320a0:	4ba3      	ldr	r3, [pc, #652]	; (8032330 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80320a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80320a4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80320a8:	687b      	ldr	r3, [r7, #4]
 80320aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80320ac:	49a0      	ldr	r1, [pc, #640]	; (8032330 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80320ae:	4313      	orrs	r3, r2
 80320b0:	650b      	str	r3, [r1, #80]	; 0x50
 80320b2:	e001      	b.n	80320b8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80320b4:	7dfb      	ldrb	r3, [r7, #23]
 80320b6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80320b8:	687b      	ldr	r3, [r7, #4]
 80320ba:	681b      	ldr	r3, [r3, #0]
 80320bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80320c0:	2b00      	cmp	r3, #0
 80320c2:	d032      	beq.n	803212a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80320c4:	687b      	ldr	r3, [r7, #4]
 80320c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80320c8:	2b03      	cmp	r3, #3
 80320ca:	d81b      	bhi.n	8032104 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80320cc:	a201      	add	r2, pc, #4	; (adr r2, 80320d4 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 80320ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80320d2:	bf00      	nop
 80320d4:	0803210b 	.word	0x0803210b
 80320d8:	080320e5 	.word	0x080320e5
 80320dc:	080320f3 	.word	0x080320f3
 80320e0:	0803210b 	.word	0x0803210b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80320e4:	4b92      	ldr	r3, [pc, #584]	; (8032330 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80320e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80320e8:	4a91      	ldr	r2, [pc, #580]	; (8032330 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80320ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80320ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80320f0:	e00c      	b.n	803210c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80320f2:	687b      	ldr	r3, [r7, #4]
 80320f4:	3304      	adds	r3, #4
 80320f6:	2102      	movs	r1, #2
 80320f8:	4618      	mov	r0, r3
 80320fa:	f000 ff03 	bl	8032f04 <RCCEx_PLL2_Config>
 80320fe:	4603      	mov	r3, r0
 8032100:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8032102:	e003      	b.n	803210c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8032104:	2301      	movs	r3, #1
 8032106:	75fb      	strb	r3, [r7, #23]
      break;
 8032108:	e000      	b.n	803210c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 803210a:	bf00      	nop
    }

    if(ret == HAL_OK)
 803210c:	7dfb      	ldrb	r3, [r7, #23]
 803210e:	2b00      	cmp	r3, #0
 8032110:	d109      	bne.n	8032126 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8032112:	4b87      	ldr	r3, [pc, #540]	; (8032330 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8032114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8032116:	f023 0203 	bic.w	r2, r3, #3
 803211a:	687b      	ldr	r3, [r7, #4]
 803211c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 803211e:	4984      	ldr	r1, [pc, #528]	; (8032330 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8032120:	4313      	orrs	r3, r2
 8032122:	64cb      	str	r3, [r1, #76]	; 0x4c
 8032124:	e001      	b.n	803212a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8032126:	7dfb      	ldrb	r3, [r7, #23]
 8032128:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 803212a:	687b      	ldr	r3, [r7, #4]
 803212c:	681b      	ldr	r3, [r3, #0]
 803212e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8032132:	2b00      	cmp	r3, #0
 8032134:	f000 8086 	beq.w	8032244 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8032138:	4b7e      	ldr	r3, [pc, #504]	; (8032334 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 803213a:	681b      	ldr	r3, [r3, #0]
 803213c:	4a7d      	ldr	r2, [pc, #500]	; (8032334 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 803213e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8032142:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8032144:	f7f8 fd38 	bl	802abb8 <HAL_GetTick>
 8032148:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 803214a:	e009      	b.n	8032160 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 803214c:	f7f8 fd34 	bl	802abb8 <HAL_GetTick>
 8032150:	4602      	mov	r2, r0
 8032152:	693b      	ldr	r3, [r7, #16]
 8032154:	1ad3      	subs	r3, r2, r3
 8032156:	2b64      	cmp	r3, #100	; 0x64
 8032158:	d902      	bls.n	8032160 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 803215a:	2303      	movs	r3, #3
 803215c:	75fb      	strb	r3, [r7, #23]
        break;
 803215e:	e005      	b.n	803216c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8032160:	4b74      	ldr	r3, [pc, #464]	; (8032334 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8032162:	681b      	ldr	r3, [r3, #0]
 8032164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8032168:	2b00      	cmp	r3, #0
 803216a:	d0ef      	beq.n	803214c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 803216c:	7dfb      	ldrb	r3, [r7, #23]
 803216e:	2b00      	cmp	r3, #0
 8032170:	d166      	bne.n	8032240 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8032172:	4b6f      	ldr	r3, [pc, #444]	; (8032330 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8032174:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8032176:	687b      	ldr	r3, [r7, #4]
 8032178:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 803217c:	4053      	eors	r3, r2
 803217e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8032182:	2b00      	cmp	r3, #0
 8032184:	d013      	beq.n	80321ae <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8032186:	4b6a      	ldr	r3, [pc, #424]	; (8032330 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8032188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 803218a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 803218e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8032190:	4b67      	ldr	r3, [pc, #412]	; (8032330 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8032192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8032194:	4a66      	ldr	r2, [pc, #408]	; (8032330 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8032196:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 803219a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 803219c:	4b64      	ldr	r3, [pc, #400]	; (8032330 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 803219e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80321a0:	4a63      	ldr	r2, [pc, #396]	; (8032330 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80321a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80321a6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80321a8:	4a61      	ldr	r2, [pc, #388]	; (8032330 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80321aa:	68fb      	ldr	r3, [r7, #12]
 80321ac:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80321ae:	687b      	ldr	r3, [r7, #4]
 80321b0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80321b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80321b8:	d115      	bne.n	80321e6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80321ba:	f7f8 fcfd 	bl	802abb8 <HAL_GetTick>
 80321be:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80321c0:	e00b      	b.n	80321da <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80321c2:	f7f8 fcf9 	bl	802abb8 <HAL_GetTick>
 80321c6:	4602      	mov	r2, r0
 80321c8:	693b      	ldr	r3, [r7, #16]
 80321ca:	1ad3      	subs	r3, r2, r3
 80321cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80321d0:	4293      	cmp	r3, r2
 80321d2:	d902      	bls.n	80321da <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80321d4:	2303      	movs	r3, #3
 80321d6:	75fb      	strb	r3, [r7, #23]
            break;
 80321d8:	e005      	b.n	80321e6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80321da:	4b55      	ldr	r3, [pc, #340]	; (8032330 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80321dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80321de:	f003 0302 	and.w	r3, r3, #2
 80321e2:	2b00      	cmp	r3, #0
 80321e4:	d0ed      	beq.n	80321c2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80321e6:	7dfb      	ldrb	r3, [r7, #23]
 80321e8:	2b00      	cmp	r3, #0
 80321ea:	d126      	bne.n	803223a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80321ec:	687b      	ldr	r3, [r7, #4]
 80321ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80321f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80321f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80321fa:	d10d      	bne.n	8032218 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80321fc:	4b4c      	ldr	r3, [pc, #304]	; (8032330 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80321fe:	691b      	ldr	r3, [r3, #16]
 8032200:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8032204:	687b      	ldr	r3, [r7, #4]
 8032206:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 803220a:	0919      	lsrs	r1, r3, #4
 803220c:	4b4a      	ldr	r3, [pc, #296]	; (8032338 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 803220e:	400b      	ands	r3, r1
 8032210:	4947      	ldr	r1, [pc, #284]	; (8032330 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8032212:	4313      	orrs	r3, r2
 8032214:	610b      	str	r3, [r1, #16]
 8032216:	e005      	b.n	8032224 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8032218:	4b45      	ldr	r3, [pc, #276]	; (8032330 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 803221a:	691b      	ldr	r3, [r3, #16]
 803221c:	4a44      	ldr	r2, [pc, #272]	; (8032330 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 803221e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8032222:	6113      	str	r3, [r2, #16]
 8032224:	4b42      	ldr	r3, [pc, #264]	; (8032330 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8032226:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8032228:	687b      	ldr	r3, [r7, #4]
 803222a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 803222e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8032232:	493f      	ldr	r1, [pc, #252]	; (8032330 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8032234:	4313      	orrs	r3, r2
 8032236:	670b      	str	r3, [r1, #112]	; 0x70
 8032238:	e004      	b.n	8032244 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 803223a:	7dfb      	ldrb	r3, [r7, #23]
 803223c:	75bb      	strb	r3, [r7, #22]
 803223e:	e001      	b.n	8032244 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8032240:	7dfb      	ldrb	r3, [r7, #23]
 8032242:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8032244:	687b      	ldr	r3, [r7, #4]
 8032246:	681b      	ldr	r3, [r3, #0]
 8032248:	f003 0301 	and.w	r3, r3, #1
 803224c:	2b00      	cmp	r3, #0
 803224e:	f000 8085 	beq.w	803235c <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8032252:	687b      	ldr	r3, [r7, #4]
 8032254:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8032256:	2b28      	cmp	r3, #40	; 0x28
 8032258:	d866      	bhi.n	8032328 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 803225a:	a201      	add	r2, pc, #4	; (adr r2, 8032260 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 803225c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8032260:	0803233d 	.word	0x0803233d
 8032264:	08032329 	.word	0x08032329
 8032268:	08032329 	.word	0x08032329
 803226c:	08032329 	.word	0x08032329
 8032270:	08032329 	.word	0x08032329
 8032274:	08032329 	.word	0x08032329
 8032278:	08032329 	.word	0x08032329
 803227c:	08032329 	.word	0x08032329
 8032280:	08032305 	.word	0x08032305
 8032284:	08032329 	.word	0x08032329
 8032288:	08032329 	.word	0x08032329
 803228c:	08032329 	.word	0x08032329
 8032290:	08032329 	.word	0x08032329
 8032294:	08032329 	.word	0x08032329
 8032298:	08032329 	.word	0x08032329
 803229c:	08032329 	.word	0x08032329
 80322a0:	08032317 	.word	0x08032317
 80322a4:	08032329 	.word	0x08032329
 80322a8:	08032329 	.word	0x08032329
 80322ac:	08032329 	.word	0x08032329
 80322b0:	08032329 	.word	0x08032329
 80322b4:	08032329 	.word	0x08032329
 80322b8:	08032329 	.word	0x08032329
 80322bc:	08032329 	.word	0x08032329
 80322c0:	0803233d 	.word	0x0803233d
 80322c4:	08032329 	.word	0x08032329
 80322c8:	08032329 	.word	0x08032329
 80322cc:	08032329 	.word	0x08032329
 80322d0:	08032329 	.word	0x08032329
 80322d4:	08032329 	.word	0x08032329
 80322d8:	08032329 	.word	0x08032329
 80322dc:	08032329 	.word	0x08032329
 80322e0:	0803233d 	.word	0x0803233d
 80322e4:	08032329 	.word	0x08032329
 80322e8:	08032329 	.word	0x08032329
 80322ec:	08032329 	.word	0x08032329
 80322f0:	08032329 	.word	0x08032329
 80322f4:	08032329 	.word	0x08032329
 80322f8:	08032329 	.word	0x08032329
 80322fc:	08032329 	.word	0x08032329
 8032300:	0803233d 	.word	0x0803233d
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8032304:	687b      	ldr	r3, [r7, #4]
 8032306:	3304      	adds	r3, #4
 8032308:	2101      	movs	r1, #1
 803230a:	4618      	mov	r0, r3
 803230c:	f000 fdfa 	bl	8032f04 <RCCEx_PLL2_Config>
 8032310:	4603      	mov	r3, r0
 8032312:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8032314:	e013      	b.n	803233e <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8032316:	687b      	ldr	r3, [r7, #4]
 8032318:	3324      	adds	r3, #36	; 0x24
 803231a:	2101      	movs	r1, #1
 803231c:	4618      	mov	r0, r3
 803231e:	f000 fea3 	bl	8033068 <RCCEx_PLL3_Config>
 8032322:	4603      	mov	r3, r0
 8032324:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8032326:	e00a      	b.n	803233e <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8032328:	2301      	movs	r3, #1
 803232a:	75fb      	strb	r3, [r7, #23]
      break;
 803232c:	e007      	b.n	803233e <HAL_RCCEx_PeriphCLKConfig+0x842>
 803232e:	bf00      	nop
 8032330:	58024400 	.word	0x58024400
 8032334:	58024800 	.word	0x58024800
 8032338:	00ffffcf 	.word	0x00ffffcf
      break;
 803233c:	bf00      	nop
    }

    if(ret == HAL_OK)
 803233e:	7dfb      	ldrb	r3, [r7, #23]
 8032340:	2b00      	cmp	r3, #0
 8032342:	d109      	bne.n	8032358 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8032344:	4b96      	ldr	r3, [pc, #600]	; (80325a0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8032346:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8032348:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 803234c:	687b      	ldr	r3, [r7, #4]
 803234e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8032350:	4993      	ldr	r1, [pc, #588]	; (80325a0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8032352:	4313      	orrs	r3, r2
 8032354:	654b      	str	r3, [r1, #84]	; 0x54
 8032356:	e001      	b.n	803235c <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8032358:	7dfb      	ldrb	r3, [r7, #23]
 803235a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 803235c:	687b      	ldr	r3, [r7, #4]
 803235e:	681b      	ldr	r3, [r3, #0]
 8032360:	f003 0302 	and.w	r3, r3, #2
 8032364:	2b00      	cmp	r3, #0
 8032366:	d038      	beq.n	80323da <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8032368:	687b      	ldr	r3, [r7, #4]
 803236a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 803236c:	2b05      	cmp	r3, #5
 803236e:	d821      	bhi.n	80323b4 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8032370:	a201      	add	r2, pc, #4	; (adr r2, 8032378 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8032372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8032376:	bf00      	nop
 8032378:	080323bb 	.word	0x080323bb
 803237c:	08032391 	.word	0x08032391
 8032380:	080323a3 	.word	0x080323a3
 8032384:	080323bb 	.word	0x080323bb
 8032388:	080323bb 	.word	0x080323bb
 803238c:	080323bb 	.word	0x080323bb
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8032390:	687b      	ldr	r3, [r7, #4]
 8032392:	3304      	adds	r3, #4
 8032394:	2101      	movs	r1, #1
 8032396:	4618      	mov	r0, r3
 8032398:	f000 fdb4 	bl	8032f04 <RCCEx_PLL2_Config>
 803239c:	4603      	mov	r3, r0
 803239e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80323a0:	e00c      	b.n	80323bc <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80323a2:	687b      	ldr	r3, [r7, #4]
 80323a4:	3324      	adds	r3, #36	; 0x24
 80323a6:	2101      	movs	r1, #1
 80323a8:	4618      	mov	r0, r3
 80323aa:	f000 fe5d 	bl	8033068 <RCCEx_PLL3_Config>
 80323ae:	4603      	mov	r3, r0
 80323b0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80323b2:	e003      	b.n	80323bc <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80323b4:	2301      	movs	r3, #1
 80323b6:	75fb      	strb	r3, [r7, #23]
      break;
 80323b8:	e000      	b.n	80323bc <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 80323ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80323bc:	7dfb      	ldrb	r3, [r7, #23]
 80323be:	2b00      	cmp	r3, #0
 80323c0:	d109      	bne.n	80323d6 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80323c2:	4b77      	ldr	r3, [pc, #476]	; (80325a0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80323c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80323c6:	f023 0207 	bic.w	r2, r3, #7
 80323ca:	687b      	ldr	r3, [r7, #4]
 80323cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80323ce:	4974      	ldr	r1, [pc, #464]	; (80325a0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80323d0:	4313      	orrs	r3, r2
 80323d2:	654b      	str	r3, [r1, #84]	; 0x54
 80323d4:	e001      	b.n	80323da <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80323d6:	7dfb      	ldrb	r3, [r7, #23]
 80323d8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80323da:	687b      	ldr	r3, [r7, #4]
 80323dc:	681b      	ldr	r3, [r3, #0]
 80323de:	f003 0304 	and.w	r3, r3, #4
 80323e2:	2b00      	cmp	r3, #0
 80323e4:	d03a      	beq.n	803245c <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80323e6:	687b      	ldr	r3, [r7, #4]
 80323e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80323ec:	2b05      	cmp	r3, #5
 80323ee:	d821      	bhi.n	8032434 <HAL_RCCEx_PeriphCLKConfig+0x938>
 80323f0:	a201      	add	r2, pc, #4	; (adr r2, 80323f8 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 80323f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80323f6:	bf00      	nop
 80323f8:	0803243b 	.word	0x0803243b
 80323fc:	08032411 	.word	0x08032411
 8032400:	08032423 	.word	0x08032423
 8032404:	0803243b 	.word	0x0803243b
 8032408:	0803243b 	.word	0x0803243b
 803240c:	0803243b 	.word	0x0803243b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8032410:	687b      	ldr	r3, [r7, #4]
 8032412:	3304      	adds	r3, #4
 8032414:	2101      	movs	r1, #1
 8032416:	4618      	mov	r0, r3
 8032418:	f000 fd74 	bl	8032f04 <RCCEx_PLL2_Config>
 803241c:	4603      	mov	r3, r0
 803241e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8032420:	e00c      	b.n	803243c <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8032422:	687b      	ldr	r3, [r7, #4]
 8032424:	3324      	adds	r3, #36	; 0x24
 8032426:	2101      	movs	r1, #1
 8032428:	4618      	mov	r0, r3
 803242a:	f000 fe1d 	bl	8033068 <RCCEx_PLL3_Config>
 803242e:	4603      	mov	r3, r0
 8032430:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8032432:	e003      	b.n	803243c <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8032434:	2301      	movs	r3, #1
 8032436:	75fb      	strb	r3, [r7, #23]
      break;
 8032438:	e000      	b.n	803243c <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 803243a:	bf00      	nop
    }

    if(ret == HAL_OK)
 803243c:	7dfb      	ldrb	r3, [r7, #23]
 803243e:	2b00      	cmp	r3, #0
 8032440:	d10a      	bne.n	8032458 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8032442:	4b57      	ldr	r3, [pc, #348]	; (80325a0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8032444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8032446:	f023 0207 	bic.w	r2, r3, #7
 803244a:	687b      	ldr	r3, [r7, #4]
 803244c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8032450:	4953      	ldr	r1, [pc, #332]	; (80325a0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8032452:	4313      	orrs	r3, r2
 8032454:	658b      	str	r3, [r1, #88]	; 0x58
 8032456:	e001      	b.n	803245c <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8032458:	7dfb      	ldrb	r3, [r7, #23]
 803245a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 803245c:	687b      	ldr	r3, [r7, #4]
 803245e:	681b      	ldr	r3, [r3, #0]
 8032460:	f003 0320 	and.w	r3, r3, #32
 8032464:	2b00      	cmp	r3, #0
 8032466:	d04b      	beq.n	8032500 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8032468:	687b      	ldr	r3, [r7, #4]
 803246a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 803246e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8032472:	d02e      	beq.n	80324d2 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8032474:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8032478:	d828      	bhi.n	80324cc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 803247a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 803247e:	d02a      	beq.n	80324d6 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8032480:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8032484:	d822      	bhi.n	80324cc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8032486:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 803248a:	d026      	beq.n	80324da <HAL_RCCEx_PeriphCLKConfig+0x9de>
 803248c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8032490:	d81c      	bhi.n	80324cc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8032492:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8032496:	d010      	beq.n	80324ba <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8032498:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 803249c:	d816      	bhi.n	80324cc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 803249e:	2b00      	cmp	r3, #0
 80324a0:	d01d      	beq.n	80324de <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 80324a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80324a6:	d111      	bne.n	80324cc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80324a8:	687b      	ldr	r3, [r7, #4]
 80324aa:	3304      	adds	r3, #4
 80324ac:	2100      	movs	r1, #0
 80324ae:	4618      	mov	r0, r3
 80324b0:	f000 fd28 	bl	8032f04 <RCCEx_PLL2_Config>
 80324b4:	4603      	mov	r3, r0
 80324b6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80324b8:	e012      	b.n	80324e0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80324ba:	687b      	ldr	r3, [r7, #4]
 80324bc:	3324      	adds	r3, #36	; 0x24
 80324be:	2102      	movs	r1, #2
 80324c0:	4618      	mov	r0, r3
 80324c2:	f000 fdd1 	bl	8033068 <RCCEx_PLL3_Config>
 80324c6:	4603      	mov	r3, r0
 80324c8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80324ca:	e009      	b.n	80324e0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80324cc:	2301      	movs	r3, #1
 80324ce:	75fb      	strb	r3, [r7, #23]
      break;
 80324d0:	e006      	b.n	80324e0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80324d2:	bf00      	nop
 80324d4:	e004      	b.n	80324e0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80324d6:	bf00      	nop
 80324d8:	e002      	b.n	80324e0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80324da:	bf00      	nop
 80324dc:	e000      	b.n	80324e0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80324de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80324e0:	7dfb      	ldrb	r3, [r7, #23]
 80324e2:	2b00      	cmp	r3, #0
 80324e4:	d10a      	bne.n	80324fc <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80324e6:	4b2e      	ldr	r3, [pc, #184]	; (80325a0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80324e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80324ea:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80324ee:	687b      	ldr	r3, [r7, #4]
 80324f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80324f4:	492a      	ldr	r1, [pc, #168]	; (80325a0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80324f6:	4313      	orrs	r3, r2
 80324f8:	654b      	str	r3, [r1, #84]	; 0x54
 80324fa:	e001      	b.n	8032500 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80324fc:	7dfb      	ldrb	r3, [r7, #23]
 80324fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8032500:	687b      	ldr	r3, [r7, #4]
 8032502:	681b      	ldr	r3, [r3, #0]
 8032504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8032508:	2b00      	cmp	r3, #0
 803250a:	d04d      	beq.n	80325a8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 803250c:	687b      	ldr	r3, [r7, #4]
 803250e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8032512:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8032516:	d02e      	beq.n	8032576 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8032518:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 803251c:	d828      	bhi.n	8032570 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 803251e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8032522:	d02a      	beq.n	803257a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8032524:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8032528:	d822      	bhi.n	8032570 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 803252a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 803252e:	d026      	beq.n	803257e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8032530:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8032534:	d81c      	bhi.n	8032570 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8032536:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 803253a:	d010      	beq.n	803255e <HAL_RCCEx_PeriphCLKConfig+0xa62>
 803253c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8032540:	d816      	bhi.n	8032570 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8032542:	2b00      	cmp	r3, #0
 8032544:	d01d      	beq.n	8032582 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8032546:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 803254a:	d111      	bne.n	8032570 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 803254c:	687b      	ldr	r3, [r7, #4]
 803254e:	3304      	adds	r3, #4
 8032550:	2100      	movs	r1, #0
 8032552:	4618      	mov	r0, r3
 8032554:	f000 fcd6 	bl	8032f04 <RCCEx_PLL2_Config>
 8032558:	4603      	mov	r3, r0
 803255a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 803255c:	e012      	b.n	8032584 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 803255e:	687b      	ldr	r3, [r7, #4]
 8032560:	3324      	adds	r3, #36	; 0x24
 8032562:	2102      	movs	r1, #2
 8032564:	4618      	mov	r0, r3
 8032566:	f000 fd7f 	bl	8033068 <RCCEx_PLL3_Config>
 803256a:	4603      	mov	r3, r0
 803256c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 803256e:	e009      	b.n	8032584 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8032570:	2301      	movs	r3, #1
 8032572:	75fb      	strb	r3, [r7, #23]
      break;
 8032574:	e006      	b.n	8032584 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8032576:	bf00      	nop
 8032578:	e004      	b.n	8032584 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 803257a:	bf00      	nop
 803257c:	e002      	b.n	8032584 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 803257e:	bf00      	nop
 8032580:	e000      	b.n	8032584 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8032582:	bf00      	nop
    }

    if(ret == HAL_OK)
 8032584:	7dfb      	ldrb	r3, [r7, #23]
 8032586:	2b00      	cmp	r3, #0
 8032588:	d10c      	bne.n	80325a4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 803258a:	4b05      	ldr	r3, [pc, #20]	; (80325a0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 803258c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 803258e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8032592:	687b      	ldr	r3, [r7, #4]
 8032594:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8032598:	4901      	ldr	r1, [pc, #4]	; (80325a0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 803259a:	4313      	orrs	r3, r2
 803259c:	658b      	str	r3, [r1, #88]	; 0x58
 803259e:	e003      	b.n	80325a8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80325a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80325a4:	7dfb      	ldrb	r3, [r7, #23]
 80325a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80325a8:	687b      	ldr	r3, [r7, #4]
 80325aa:	681b      	ldr	r3, [r3, #0]
 80325ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80325b0:	2b00      	cmp	r3, #0
 80325b2:	d04b      	beq.n	803264c <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80325b4:	687b      	ldr	r3, [r7, #4]
 80325b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80325ba:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80325be:	d02e      	beq.n	803261e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80325c0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80325c4:	d828      	bhi.n	8032618 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80325c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80325ca:	d02a      	beq.n	8032622 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80325cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80325d0:	d822      	bhi.n	8032618 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80325d2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80325d6:	d026      	beq.n	8032626 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80325d8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80325dc:	d81c      	bhi.n	8032618 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80325de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80325e2:	d010      	beq.n	8032606 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80325e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80325e8:	d816      	bhi.n	8032618 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80325ea:	2b00      	cmp	r3, #0
 80325ec:	d01d      	beq.n	803262a <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 80325ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80325f2:	d111      	bne.n	8032618 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80325f4:	687b      	ldr	r3, [r7, #4]
 80325f6:	3304      	adds	r3, #4
 80325f8:	2100      	movs	r1, #0
 80325fa:	4618      	mov	r0, r3
 80325fc:	f000 fc82 	bl	8032f04 <RCCEx_PLL2_Config>
 8032600:	4603      	mov	r3, r0
 8032602:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8032604:	e012      	b.n	803262c <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8032606:	687b      	ldr	r3, [r7, #4]
 8032608:	3324      	adds	r3, #36	; 0x24
 803260a:	2102      	movs	r1, #2
 803260c:	4618      	mov	r0, r3
 803260e:	f000 fd2b 	bl	8033068 <RCCEx_PLL3_Config>
 8032612:	4603      	mov	r3, r0
 8032614:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8032616:	e009      	b.n	803262c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8032618:	2301      	movs	r3, #1
 803261a:	75fb      	strb	r3, [r7, #23]
      break;
 803261c:	e006      	b.n	803262c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 803261e:	bf00      	nop
 8032620:	e004      	b.n	803262c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8032622:	bf00      	nop
 8032624:	e002      	b.n	803262c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8032626:	bf00      	nop
 8032628:	e000      	b.n	803262c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 803262a:	bf00      	nop
    }

    if(ret == HAL_OK)
 803262c:	7dfb      	ldrb	r3, [r7, #23]
 803262e:	2b00      	cmp	r3, #0
 8032630:	d10a      	bne.n	8032648 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8032632:	4b9d      	ldr	r3, [pc, #628]	; (80328a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8032634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8032636:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 803263a:	687b      	ldr	r3, [r7, #4]
 803263c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8032640:	4999      	ldr	r1, [pc, #612]	; (80328a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8032642:	4313      	orrs	r3, r2
 8032644:	658b      	str	r3, [r1, #88]	; 0x58
 8032646:	e001      	b.n	803264c <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8032648:	7dfb      	ldrb	r3, [r7, #23]
 803264a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 803264c:	687b      	ldr	r3, [r7, #4]
 803264e:	681b      	ldr	r3, [r3, #0]
 8032650:	f003 0308 	and.w	r3, r3, #8
 8032654:	2b00      	cmp	r3, #0
 8032656:	d01a      	beq.n	803268e <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8032658:	687b      	ldr	r3, [r7, #4]
 803265a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 803265e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8032662:	d10a      	bne.n	803267a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8032664:	687b      	ldr	r3, [r7, #4]
 8032666:	3324      	adds	r3, #36	; 0x24
 8032668:	2102      	movs	r1, #2
 803266a:	4618      	mov	r0, r3
 803266c:	f000 fcfc 	bl	8033068 <RCCEx_PLL3_Config>
 8032670:	4603      	mov	r3, r0
 8032672:	2b00      	cmp	r3, #0
 8032674:	d001      	beq.n	803267a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8032676:	2301      	movs	r3, #1
 8032678:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 803267a:	4b8b      	ldr	r3, [pc, #556]	; (80328a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 803267c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 803267e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8032682:	687b      	ldr	r3, [r7, #4]
 8032684:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8032688:	4987      	ldr	r1, [pc, #540]	; (80328a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 803268a:	4313      	orrs	r3, r2
 803268c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 803268e:	687b      	ldr	r3, [r7, #4]
 8032690:	681b      	ldr	r3, [r3, #0]
 8032692:	f003 0310 	and.w	r3, r3, #16
 8032696:	2b00      	cmp	r3, #0
 8032698:	d01a      	beq.n	80326d0 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 803269a:	687b      	ldr	r3, [r7, #4]
 803269c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80326a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80326a4:	d10a      	bne.n	80326bc <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80326a6:	687b      	ldr	r3, [r7, #4]
 80326a8:	3324      	adds	r3, #36	; 0x24
 80326aa:	2102      	movs	r1, #2
 80326ac:	4618      	mov	r0, r3
 80326ae:	f000 fcdb 	bl	8033068 <RCCEx_PLL3_Config>
 80326b2:	4603      	mov	r3, r0
 80326b4:	2b00      	cmp	r3, #0
 80326b6:	d001      	beq.n	80326bc <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80326b8:	2301      	movs	r3, #1
 80326ba:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80326bc:	4b7a      	ldr	r3, [pc, #488]	; (80328a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80326be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80326c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80326c4:	687b      	ldr	r3, [r7, #4]
 80326c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80326ca:	4977      	ldr	r1, [pc, #476]	; (80328a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80326cc:	4313      	orrs	r3, r2
 80326ce:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80326d0:	687b      	ldr	r3, [r7, #4]
 80326d2:	681b      	ldr	r3, [r3, #0]
 80326d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80326d8:	2b00      	cmp	r3, #0
 80326da:	d034      	beq.n	8032746 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80326dc:	687b      	ldr	r3, [r7, #4]
 80326de:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80326e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80326e6:	d01d      	beq.n	8032724 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80326e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80326ec:	d817      	bhi.n	803271e <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80326ee:	2b00      	cmp	r3, #0
 80326f0:	d003      	beq.n	80326fa <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80326f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80326f6:	d009      	beq.n	803270c <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80326f8:	e011      	b.n	803271e <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80326fa:	687b      	ldr	r3, [r7, #4]
 80326fc:	3304      	adds	r3, #4
 80326fe:	2100      	movs	r1, #0
 8032700:	4618      	mov	r0, r3
 8032702:	f000 fbff 	bl	8032f04 <RCCEx_PLL2_Config>
 8032706:	4603      	mov	r3, r0
 8032708:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 803270a:	e00c      	b.n	8032726 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 803270c:	687b      	ldr	r3, [r7, #4]
 803270e:	3324      	adds	r3, #36	; 0x24
 8032710:	2102      	movs	r1, #2
 8032712:	4618      	mov	r0, r3
 8032714:	f000 fca8 	bl	8033068 <RCCEx_PLL3_Config>
 8032718:	4603      	mov	r3, r0
 803271a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 803271c:	e003      	b.n	8032726 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 803271e:	2301      	movs	r3, #1
 8032720:	75fb      	strb	r3, [r7, #23]
      break;
 8032722:	e000      	b.n	8032726 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8032724:	bf00      	nop
    }

    if(ret == HAL_OK)
 8032726:	7dfb      	ldrb	r3, [r7, #23]
 8032728:	2b00      	cmp	r3, #0
 803272a:	d10a      	bne.n	8032742 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 803272c:	4b5e      	ldr	r3, [pc, #376]	; (80328a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 803272e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8032730:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8032734:	687b      	ldr	r3, [r7, #4]
 8032736:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 803273a:	495b      	ldr	r1, [pc, #364]	; (80328a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 803273c:	4313      	orrs	r3, r2
 803273e:	658b      	str	r3, [r1, #88]	; 0x58
 8032740:	e001      	b.n	8032746 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8032742:	7dfb      	ldrb	r3, [r7, #23]
 8032744:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8032746:	687b      	ldr	r3, [r7, #4]
 8032748:	681b      	ldr	r3, [r3, #0]
 803274a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 803274e:	2b00      	cmp	r3, #0
 8032750:	d033      	beq.n	80327ba <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8032752:	687b      	ldr	r3, [r7, #4]
 8032754:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8032758:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 803275c:	d01c      	beq.n	8032798 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 803275e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8032762:	d816      	bhi.n	8032792 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8032764:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8032768:	d003      	beq.n	8032772 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 803276a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 803276e:	d007      	beq.n	8032780 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8032770:	e00f      	b.n	8032792 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8032772:	4b4d      	ldr	r3, [pc, #308]	; (80328a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8032774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8032776:	4a4c      	ldr	r2, [pc, #304]	; (80328a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8032778:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 803277c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 803277e:	e00c      	b.n	803279a <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8032780:	687b      	ldr	r3, [r7, #4]
 8032782:	3324      	adds	r3, #36	; 0x24
 8032784:	2101      	movs	r1, #1
 8032786:	4618      	mov	r0, r3
 8032788:	f000 fc6e 	bl	8033068 <RCCEx_PLL3_Config>
 803278c:	4603      	mov	r3, r0
 803278e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8032790:	e003      	b.n	803279a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8032792:	2301      	movs	r3, #1
 8032794:	75fb      	strb	r3, [r7, #23]
      break;
 8032796:	e000      	b.n	803279a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8032798:	bf00      	nop
    }

    if(ret == HAL_OK)
 803279a:	7dfb      	ldrb	r3, [r7, #23]
 803279c:	2b00      	cmp	r3, #0
 803279e:	d10a      	bne.n	80327b6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80327a0:	4b41      	ldr	r3, [pc, #260]	; (80328a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80327a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80327a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80327a8:	687b      	ldr	r3, [r7, #4]
 80327aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80327ae:	493e      	ldr	r1, [pc, #248]	; (80328a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80327b0:	4313      	orrs	r3, r2
 80327b2:	654b      	str	r3, [r1, #84]	; 0x54
 80327b4:	e001      	b.n	80327ba <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80327b6:	7dfb      	ldrb	r3, [r7, #23]
 80327b8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80327ba:	687b      	ldr	r3, [r7, #4]
 80327bc:	681b      	ldr	r3, [r3, #0]
 80327be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80327c2:	2b00      	cmp	r3, #0
 80327c4:	d029      	beq.n	803281a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80327c6:	687b      	ldr	r3, [r7, #4]
 80327c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80327ca:	2b00      	cmp	r3, #0
 80327cc:	d003      	beq.n	80327d6 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 80327ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80327d2:	d007      	beq.n	80327e4 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80327d4:	e00f      	b.n	80327f6 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80327d6:	4b34      	ldr	r3, [pc, #208]	; (80328a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80327d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80327da:	4a33      	ldr	r2, [pc, #204]	; (80328a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80327dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80327e0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80327e2:	e00b      	b.n	80327fc <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80327e4:	687b      	ldr	r3, [r7, #4]
 80327e6:	3304      	adds	r3, #4
 80327e8:	2102      	movs	r1, #2
 80327ea:	4618      	mov	r0, r3
 80327ec:	f000 fb8a 	bl	8032f04 <RCCEx_PLL2_Config>
 80327f0:	4603      	mov	r3, r0
 80327f2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80327f4:	e002      	b.n	80327fc <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 80327f6:	2301      	movs	r3, #1
 80327f8:	75fb      	strb	r3, [r7, #23]
      break;
 80327fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80327fc:	7dfb      	ldrb	r3, [r7, #23]
 80327fe:	2b00      	cmp	r3, #0
 8032800:	d109      	bne.n	8032816 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8032802:	4b29      	ldr	r3, [pc, #164]	; (80328a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8032804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8032806:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 803280a:	687b      	ldr	r3, [r7, #4]
 803280c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 803280e:	4926      	ldr	r1, [pc, #152]	; (80328a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8032810:	4313      	orrs	r3, r2
 8032812:	64cb      	str	r3, [r1, #76]	; 0x4c
 8032814:	e001      	b.n	803281a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8032816:	7dfb      	ldrb	r3, [r7, #23]
 8032818:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 803281a:	687b      	ldr	r3, [r7, #4]
 803281c:	681b      	ldr	r3, [r3, #0]
 803281e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8032822:	2b00      	cmp	r3, #0
 8032824:	d00a      	beq.n	803283c <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8032826:	687b      	ldr	r3, [r7, #4]
 8032828:	3324      	adds	r3, #36	; 0x24
 803282a:	2102      	movs	r1, #2
 803282c:	4618      	mov	r0, r3
 803282e:	f000 fc1b 	bl	8033068 <RCCEx_PLL3_Config>
 8032832:	4603      	mov	r3, r0
 8032834:	2b00      	cmp	r3, #0
 8032836:	d001      	beq.n	803283c <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8032838:	2301      	movs	r3, #1
 803283a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 803283c:	687b      	ldr	r3, [r7, #4]
 803283e:	681b      	ldr	r3, [r3, #0]
 8032840:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8032844:	2b00      	cmp	r3, #0
 8032846:	d033      	beq.n	80328b0 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8032848:	687b      	ldr	r3, [r7, #4]
 803284a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 803284c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8032850:	d017      	beq.n	8032882 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8032852:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8032856:	d811      	bhi.n	803287c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8032858:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 803285c:	d013      	beq.n	8032886 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 803285e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8032862:	d80b      	bhi.n	803287c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8032864:	2b00      	cmp	r3, #0
 8032866:	d010      	beq.n	803288a <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8032868:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 803286c:	d106      	bne.n	803287c <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 803286e:	4b0e      	ldr	r3, [pc, #56]	; (80328a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8032870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8032872:	4a0d      	ldr	r2, [pc, #52]	; (80328a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8032874:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8032878:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 803287a:	e007      	b.n	803288c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 803287c:	2301      	movs	r3, #1
 803287e:	75fb      	strb	r3, [r7, #23]
      break;
 8032880:	e004      	b.n	803288c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8032882:	bf00      	nop
 8032884:	e002      	b.n	803288c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8032886:	bf00      	nop
 8032888:	e000      	b.n	803288c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 803288a:	bf00      	nop
    }

    if(ret == HAL_OK)
 803288c:	7dfb      	ldrb	r3, [r7, #23]
 803288e:	2b00      	cmp	r3, #0
 8032890:	d10c      	bne.n	80328ac <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8032892:	4b05      	ldr	r3, [pc, #20]	; (80328a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8032894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8032896:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 803289a:	687b      	ldr	r3, [r7, #4]
 803289c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 803289e:	4902      	ldr	r1, [pc, #8]	; (80328a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80328a0:	4313      	orrs	r3, r2
 80328a2:	654b      	str	r3, [r1, #84]	; 0x54
 80328a4:	e004      	b.n	80328b0 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80328a6:	bf00      	nop
 80328a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80328ac:	7dfb      	ldrb	r3, [r7, #23]
 80328ae:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80328b0:	687b      	ldr	r3, [r7, #4]
 80328b2:	681b      	ldr	r3, [r3, #0]
 80328b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80328b8:	2b00      	cmp	r3, #0
 80328ba:	d008      	beq.n	80328ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80328bc:	4b31      	ldr	r3, [pc, #196]	; (8032984 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80328be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80328c0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80328c4:	687b      	ldr	r3, [r7, #4]
 80328c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80328c8:	492e      	ldr	r1, [pc, #184]	; (8032984 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80328ca:	4313      	orrs	r3, r2
 80328cc:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80328ce:	687b      	ldr	r3, [r7, #4]
 80328d0:	681b      	ldr	r3, [r3, #0]
 80328d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80328d6:	2b00      	cmp	r3, #0
 80328d8:	d009      	beq.n	80328ee <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80328da:	4b2a      	ldr	r3, [pc, #168]	; (8032984 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80328dc:	691b      	ldr	r3, [r3, #16]
 80328de:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80328e2:	687b      	ldr	r3, [r7, #4]
 80328e4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80328e8:	4926      	ldr	r1, [pc, #152]	; (8032984 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80328ea:	4313      	orrs	r3, r2
 80328ec:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80328ee:	687b      	ldr	r3, [r7, #4]
 80328f0:	681b      	ldr	r3, [r3, #0]
 80328f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80328f6:	2b00      	cmp	r3, #0
 80328f8:	d008      	beq.n	803290c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80328fa:	4b22      	ldr	r3, [pc, #136]	; (8032984 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80328fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80328fe:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8032902:	687b      	ldr	r3, [r7, #4]
 8032904:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8032906:	491f      	ldr	r1, [pc, #124]	; (8032984 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8032908:	4313      	orrs	r3, r2
 803290a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 803290c:	687b      	ldr	r3, [r7, #4]
 803290e:	681b      	ldr	r3, [r3, #0]
 8032910:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8032914:	2b00      	cmp	r3, #0
 8032916:	d00d      	beq.n	8032934 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8032918:	4b1a      	ldr	r3, [pc, #104]	; (8032984 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 803291a:	691b      	ldr	r3, [r3, #16]
 803291c:	4a19      	ldr	r2, [pc, #100]	; (8032984 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 803291e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8032922:	6113      	str	r3, [r2, #16]
 8032924:	4b17      	ldr	r3, [pc, #92]	; (8032984 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8032926:	691a      	ldr	r2, [r3, #16]
 8032928:	687b      	ldr	r3, [r7, #4]
 803292a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 803292e:	4915      	ldr	r1, [pc, #84]	; (8032984 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8032930:	4313      	orrs	r3, r2
 8032932:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8032934:	687b      	ldr	r3, [r7, #4]
 8032936:	681b      	ldr	r3, [r3, #0]
 8032938:	2b00      	cmp	r3, #0
 803293a:	da08      	bge.n	803294e <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 803293c:	4b11      	ldr	r3, [pc, #68]	; (8032984 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 803293e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8032940:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8032944:	687b      	ldr	r3, [r7, #4]
 8032946:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8032948:	490e      	ldr	r1, [pc, #56]	; (8032984 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 803294a:	4313      	orrs	r3, r2
 803294c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 803294e:	687b      	ldr	r3, [r7, #4]
 8032950:	681b      	ldr	r3, [r3, #0]
 8032952:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8032956:	2b00      	cmp	r3, #0
 8032958:	d009      	beq.n	803296e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 803295a:	4b0a      	ldr	r3, [pc, #40]	; (8032984 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 803295c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 803295e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8032962:	687b      	ldr	r3, [r7, #4]
 8032964:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8032968:	4906      	ldr	r1, [pc, #24]	; (8032984 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 803296a:	4313      	orrs	r3, r2
 803296c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 803296e:	7dbb      	ldrb	r3, [r7, #22]
 8032970:	2b00      	cmp	r3, #0
 8032972:	d101      	bne.n	8032978 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8032974:	2300      	movs	r3, #0
 8032976:	e000      	b.n	803297a <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8032978:	2301      	movs	r3, #1
}
 803297a:	4618      	mov	r0, r3
 803297c:	3718      	adds	r7, #24
 803297e:	46bd      	mov	sp, r7
 8032980:	bd80      	pop	{r7, pc}
 8032982:	bf00      	nop
 8032984:	58024400 	.word	0x58024400

08032988 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8032988:	b580      	push	{r7, lr}
 803298a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 803298c:	f7ff f85a 	bl	8031a44 <HAL_RCC_GetHCLKFreq>
 8032990:	4602      	mov	r2, r0
 8032992:	4b06      	ldr	r3, [pc, #24]	; (80329ac <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8032994:	6a1b      	ldr	r3, [r3, #32]
 8032996:	091b      	lsrs	r3, r3, #4
 8032998:	f003 0307 	and.w	r3, r3, #7
 803299c:	4904      	ldr	r1, [pc, #16]	; (80329b0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 803299e:	5ccb      	ldrb	r3, [r1, r3]
 80329a0:	f003 031f 	and.w	r3, r3, #31
 80329a4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80329a8:	4618      	mov	r0, r3
 80329aa:	bd80      	pop	{r7, pc}
 80329ac:	58024400 	.word	0x58024400
 80329b0:	08058448 	.word	0x08058448

080329b4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80329b4:	b480      	push	{r7}
 80329b6:	b089      	sub	sp, #36	; 0x24
 80329b8:	af00      	add	r7, sp, #0
 80329ba:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80329bc:	4ba1      	ldr	r3, [pc, #644]	; (8032c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80329be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80329c0:	f003 0303 	and.w	r3, r3, #3
 80329c4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80329c6:	4b9f      	ldr	r3, [pc, #636]	; (8032c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80329c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80329ca:	0b1b      	lsrs	r3, r3, #12
 80329cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80329d0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80329d2:	4b9c      	ldr	r3, [pc, #624]	; (8032c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80329d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80329d6:	091b      	lsrs	r3, r3, #4
 80329d8:	f003 0301 	and.w	r3, r3, #1
 80329dc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80329de:	4b99      	ldr	r3, [pc, #612]	; (8032c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80329e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80329e2:	08db      	lsrs	r3, r3, #3
 80329e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80329e8:	693a      	ldr	r2, [r7, #16]
 80329ea:	fb02 f303 	mul.w	r3, r2, r3
 80329ee:	ee07 3a90 	vmov	s15, r3
 80329f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80329f6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80329fa:	697b      	ldr	r3, [r7, #20]
 80329fc:	2b00      	cmp	r3, #0
 80329fe:	f000 8111 	beq.w	8032c24 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8032a02:	69bb      	ldr	r3, [r7, #24]
 8032a04:	2b02      	cmp	r3, #2
 8032a06:	f000 8083 	beq.w	8032b10 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8032a0a:	69bb      	ldr	r3, [r7, #24]
 8032a0c:	2b02      	cmp	r3, #2
 8032a0e:	f200 80a1 	bhi.w	8032b54 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8032a12:	69bb      	ldr	r3, [r7, #24]
 8032a14:	2b00      	cmp	r3, #0
 8032a16:	d003      	beq.n	8032a20 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8032a18:	69bb      	ldr	r3, [r7, #24]
 8032a1a:	2b01      	cmp	r3, #1
 8032a1c:	d056      	beq.n	8032acc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8032a1e:	e099      	b.n	8032b54 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8032a20:	4b88      	ldr	r3, [pc, #544]	; (8032c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8032a22:	681b      	ldr	r3, [r3, #0]
 8032a24:	f003 0320 	and.w	r3, r3, #32
 8032a28:	2b00      	cmp	r3, #0
 8032a2a:	d02d      	beq.n	8032a88 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8032a2c:	4b85      	ldr	r3, [pc, #532]	; (8032c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8032a2e:	681b      	ldr	r3, [r3, #0]
 8032a30:	08db      	lsrs	r3, r3, #3
 8032a32:	f003 0303 	and.w	r3, r3, #3
 8032a36:	4a84      	ldr	r2, [pc, #528]	; (8032c48 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8032a38:	fa22 f303 	lsr.w	r3, r2, r3
 8032a3c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8032a3e:	68bb      	ldr	r3, [r7, #8]
 8032a40:	ee07 3a90 	vmov	s15, r3
 8032a44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8032a48:	697b      	ldr	r3, [r7, #20]
 8032a4a:	ee07 3a90 	vmov	s15, r3
 8032a4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8032a52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8032a56:	4b7b      	ldr	r3, [pc, #492]	; (8032c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8032a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8032a5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8032a5e:	ee07 3a90 	vmov	s15, r3
 8032a62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8032a66:	ed97 6a03 	vldr	s12, [r7, #12]
 8032a6a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8032c4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8032a6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8032a72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8032a76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8032a7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8032a7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8032a82:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8032a86:	e087      	b.n	8032b98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8032a88:	697b      	ldr	r3, [r7, #20]
 8032a8a:	ee07 3a90 	vmov	s15, r3
 8032a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8032a92:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8032c50 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8032a96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8032a9a:	4b6a      	ldr	r3, [pc, #424]	; (8032c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8032a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8032a9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8032aa2:	ee07 3a90 	vmov	s15, r3
 8032aa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8032aaa:	ed97 6a03 	vldr	s12, [r7, #12]
 8032aae:	eddf 5a67 	vldr	s11, [pc, #412]	; 8032c4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8032ab2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8032ab6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8032aba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8032abe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8032ac2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8032ac6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8032aca:	e065      	b.n	8032b98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8032acc:	697b      	ldr	r3, [r7, #20]
 8032ace:	ee07 3a90 	vmov	s15, r3
 8032ad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8032ad6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8032c54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8032ada:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8032ade:	4b59      	ldr	r3, [pc, #356]	; (8032c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8032ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8032ae2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8032ae6:	ee07 3a90 	vmov	s15, r3
 8032aea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8032aee:	ed97 6a03 	vldr	s12, [r7, #12]
 8032af2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8032c4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8032af6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8032afa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8032afe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8032b02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8032b06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8032b0a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8032b0e:	e043      	b.n	8032b98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8032b10:	697b      	ldr	r3, [r7, #20]
 8032b12:	ee07 3a90 	vmov	s15, r3
 8032b16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8032b1a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8032c58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8032b1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8032b22:	4b48      	ldr	r3, [pc, #288]	; (8032c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8032b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8032b26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8032b2a:	ee07 3a90 	vmov	s15, r3
 8032b2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8032b32:	ed97 6a03 	vldr	s12, [r7, #12]
 8032b36:	eddf 5a45 	vldr	s11, [pc, #276]	; 8032c4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8032b3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8032b3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8032b42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8032b46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8032b4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8032b4e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8032b52:	e021      	b.n	8032b98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8032b54:	697b      	ldr	r3, [r7, #20]
 8032b56:	ee07 3a90 	vmov	s15, r3
 8032b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8032b5e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8032c54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8032b62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8032b66:	4b37      	ldr	r3, [pc, #220]	; (8032c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8032b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8032b6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8032b6e:	ee07 3a90 	vmov	s15, r3
 8032b72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8032b76:	ed97 6a03 	vldr	s12, [r7, #12]
 8032b7a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8032c4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8032b7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8032b82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8032b86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8032b8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8032b8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8032b92:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8032b96:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8032b98:	4b2a      	ldr	r3, [pc, #168]	; (8032c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8032b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8032b9c:	0a5b      	lsrs	r3, r3, #9
 8032b9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8032ba2:	ee07 3a90 	vmov	s15, r3
 8032ba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8032baa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8032bae:	ee37 7a87 	vadd.f32	s14, s15, s14
 8032bb2:	edd7 6a07 	vldr	s13, [r7, #28]
 8032bb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8032bba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8032bbe:	ee17 2a90 	vmov	r2, s15
 8032bc2:	687b      	ldr	r3, [r7, #4]
 8032bc4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8032bc6:	4b1f      	ldr	r3, [pc, #124]	; (8032c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8032bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8032bca:	0c1b      	lsrs	r3, r3, #16
 8032bcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8032bd0:	ee07 3a90 	vmov	s15, r3
 8032bd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8032bd8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8032bdc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8032be0:	edd7 6a07 	vldr	s13, [r7, #28]
 8032be4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8032be8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8032bec:	ee17 2a90 	vmov	r2, s15
 8032bf0:	687b      	ldr	r3, [r7, #4]
 8032bf2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8032bf4:	4b13      	ldr	r3, [pc, #76]	; (8032c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8032bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8032bf8:	0e1b      	lsrs	r3, r3, #24
 8032bfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8032bfe:	ee07 3a90 	vmov	s15, r3
 8032c02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8032c06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8032c0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8032c0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8032c12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8032c16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8032c1a:	ee17 2a90 	vmov	r2, s15
 8032c1e:	687b      	ldr	r3, [r7, #4]
 8032c20:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8032c22:	e008      	b.n	8032c36 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8032c24:	687b      	ldr	r3, [r7, #4]
 8032c26:	2200      	movs	r2, #0
 8032c28:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8032c2a:	687b      	ldr	r3, [r7, #4]
 8032c2c:	2200      	movs	r2, #0
 8032c2e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8032c30:	687b      	ldr	r3, [r7, #4]
 8032c32:	2200      	movs	r2, #0
 8032c34:	609a      	str	r2, [r3, #8]
}
 8032c36:	bf00      	nop
 8032c38:	3724      	adds	r7, #36	; 0x24
 8032c3a:	46bd      	mov	sp, r7
 8032c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032c40:	4770      	bx	lr
 8032c42:	bf00      	nop
 8032c44:	58024400 	.word	0x58024400
 8032c48:	03d09000 	.word	0x03d09000
 8032c4c:	46000000 	.word	0x46000000
 8032c50:	4c742400 	.word	0x4c742400
 8032c54:	4a742400 	.word	0x4a742400
 8032c58:	4bbebc20 	.word	0x4bbebc20

08032c5c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8032c5c:	b480      	push	{r7}
 8032c5e:	b089      	sub	sp, #36	; 0x24
 8032c60:	af00      	add	r7, sp, #0
 8032c62:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8032c64:	4ba1      	ldr	r3, [pc, #644]	; (8032eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8032c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8032c68:	f003 0303 	and.w	r3, r3, #3
 8032c6c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8032c6e:	4b9f      	ldr	r3, [pc, #636]	; (8032eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8032c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8032c72:	0d1b      	lsrs	r3, r3, #20
 8032c74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8032c78:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8032c7a:	4b9c      	ldr	r3, [pc, #624]	; (8032eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8032c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8032c7e:	0a1b      	lsrs	r3, r3, #8
 8032c80:	f003 0301 	and.w	r3, r3, #1
 8032c84:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8032c86:	4b99      	ldr	r3, [pc, #612]	; (8032eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8032c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8032c8a:	08db      	lsrs	r3, r3, #3
 8032c8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8032c90:	693a      	ldr	r2, [r7, #16]
 8032c92:	fb02 f303 	mul.w	r3, r2, r3
 8032c96:	ee07 3a90 	vmov	s15, r3
 8032c9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8032c9e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8032ca2:	697b      	ldr	r3, [r7, #20]
 8032ca4:	2b00      	cmp	r3, #0
 8032ca6:	f000 8111 	beq.w	8032ecc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8032caa:	69bb      	ldr	r3, [r7, #24]
 8032cac:	2b02      	cmp	r3, #2
 8032cae:	f000 8083 	beq.w	8032db8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8032cb2:	69bb      	ldr	r3, [r7, #24]
 8032cb4:	2b02      	cmp	r3, #2
 8032cb6:	f200 80a1 	bhi.w	8032dfc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8032cba:	69bb      	ldr	r3, [r7, #24]
 8032cbc:	2b00      	cmp	r3, #0
 8032cbe:	d003      	beq.n	8032cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8032cc0:	69bb      	ldr	r3, [r7, #24]
 8032cc2:	2b01      	cmp	r3, #1
 8032cc4:	d056      	beq.n	8032d74 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8032cc6:	e099      	b.n	8032dfc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8032cc8:	4b88      	ldr	r3, [pc, #544]	; (8032eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8032cca:	681b      	ldr	r3, [r3, #0]
 8032ccc:	f003 0320 	and.w	r3, r3, #32
 8032cd0:	2b00      	cmp	r3, #0
 8032cd2:	d02d      	beq.n	8032d30 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8032cd4:	4b85      	ldr	r3, [pc, #532]	; (8032eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8032cd6:	681b      	ldr	r3, [r3, #0]
 8032cd8:	08db      	lsrs	r3, r3, #3
 8032cda:	f003 0303 	and.w	r3, r3, #3
 8032cde:	4a84      	ldr	r2, [pc, #528]	; (8032ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8032ce0:	fa22 f303 	lsr.w	r3, r2, r3
 8032ce4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8032ce6:	68bb      	ldr	r3, [r7, #8]
 8032ce8:	ee07 3a90 	vmov	s15, r3
 8032cec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8032cf0:	697b      	ldr	r3, [r7, #20]
 8032cf2:	ee07 3a90 	vmov	s15, r3
 8032cf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8032cfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8032cfe:	4b7b      	ldr	r3, [pc, #492]	; (8032eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8032d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8032d02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8032d06:	ee07 3a90 	vmov	s15, r3
 8032d0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8032d0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8032d12:	eddf 5a78 	vldr	s11, [pc, #480]	; 8032ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8032d16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8032d1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8032d1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8032d22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8032d26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8032d2a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8032d2e:	e087      	b.n	8032e40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8032d30:	697b      	ldr	r3, [r7, #20]
 8032d32:	ee07 3a90 	vmov	s15, r3
 8032d36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8032d3a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8032ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8032d3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8032d42:	4b6a      	ldr	r3, [pc, #424]	; (8032eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8032d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8032d46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8032d4a:	ee07 3a90 	vmov	s15, r3
 8032d4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8032d52:	ed97 6a03 	vldr	s12, [r7, #12]
 8032d56:	eddf 5a67 	vldr	s11, [pc, #412]	; 8032ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8032d5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8032d5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8032d62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8032d66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8032d6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8032d6e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8032d72:	e065      	b.n	8032e40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8032d74:	697b      	ldr	r3, [r7, #20]
 8032d76:	ee07 3a90 	vmov	s15, r3
 8032d7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8032d7e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8032efc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8032d82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8032d86:	4b59      	ldr	r3, [pc, #356]	; (8032eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8032d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8032d8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8032d8e:	ee07 3a90 	vmov	s15, r3
 8032d92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8032d96:	ed97 6a03 	vldr	s12, [r7, #12]
 8032d9a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8032ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8032d9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8032da2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8032da6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8032daa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8032dae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8032db2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8032db6:	e043      	b.n	8032e40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8032db8:	697b      	ldr	r3, [r7, #20]
 8032dba:	ee07 3a90 	vmov	s15, r3
 8032dbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8032dc2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8032f00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8032dc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8032dca:	4b48      	ldr	r3, [pc, #288]	; (8032eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8032dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8032dce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8032dd2:	ee07 3a90 	vmov	s15, r3
 8032dd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8032dda:	ed97 6a03 	vldr	s12, [r7, #12]
 8032dde:	eddf 5a45 	vldr	s11, [pc, #276]	; 8032ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8032de2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8032de6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8032dea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8032dee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8032df2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8032df6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8032dfa:	e021      	b.n	8032e40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8032dfc:	697b      	ldr	r3, [r7, #20]
 8032dfe:	ee07 3a90 	vmov	s15, r3
 8032e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8032e06:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8032efc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8032e0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8032e0e:	4b37      	ldr	r3, [pc, #220]	; (8032eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8032e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8032e12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8032e16:	ee07 3a90 	vmov	s15, r3
 8032e1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8032e1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8032e22:	eddf 5a34 	vldr	s11, [pc, #208]	; 8032ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8032e26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8032e2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8032e2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8032e32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8032e36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8032e3a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8032e3e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8032e40:	4b2a      	ldr	r3, [pc, #168]	; (8032eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8032e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8032e44:	0a5b      	lsrs	r3, r3, #9
 8032e46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8032e4a:	ee07 3a90 	vmov	s15, r3
 8032e4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8032e52:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8032e56:	ee37 7a87 	vadd.f32	s14, s15, s14
 8032e5a:	edd7 6a07 	vldr	s13, [r7, #28]
 8032e5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8032e62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8032e66:	ee17 2a90 	vmov	r2, s15
 8032e6a:	687b      	ldr	r3, [r7, #4]
 8032e6c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8032e6e:	4b1f      	ldr	r3, [pc, #124]	; (8032eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8032e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8032e72:	0c1b      	lsrs	r3, r3, #16
 8032e74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8032e78:	ee07 3a90 	vmov	s15, r3
 8032e7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8032e80:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8032e84:	ee37 7a87 	vadd.f32	s14, s15, s14
 8032e88:	edd7 6a07 	vldr	s13, [r7, #28]
 8032e8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8032e90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8032e94:	ee17 2a90 	vmov	r2, s15
 8032e98:	687b      	ldr	r3, [r7, #4]
 8032e9a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8032e9c:	4b13      	ldr	r3, [pc, #76]	; (8032eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8032e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8032ea0:	0e1b      	lsrs	r3, r3, #24
 8032ea2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8032ea6:	ee07 3a90 	vmov	s15, r3
 8032eaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8032eae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8032eb2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8032eb6:	edd7 6a07 	vldr	s13, [r7, #28]
 8032eba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8032ebe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8032ec2:	ee17 2a90 	vmov	r2, s15
 8032ec6:	687b      	ldr	r3, [r7, #4]
 8032ec8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8032eca:	e008      	b.n	8032ede <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8032ecc:	687b      	ldr	r3, [r7, #4]
 8032ece:	2200      	movs	r2, #0
 8032ed0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8032ed2:	687b      	ldr	r3, [r7, #4]
 8032ed4:	2200      	movs	r2, #0
 8032ed6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8032ed8:	687b      	ldr	r3, [r7, #4]
 8032eda:	2200      	movs	r2, #0
 8032edc:	609a      	str	r2, [r3, #8]
}
 8032ede:	bf00      	nop
 8032ee0:	3724      	adds	r7, #36	; 0x24
 8032ee2:	46bd      	mov	sp, r7
 8032ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032ee8:	4770      	bx	lr
 8032eea:	bf00      	nop
 8032eec:	58024400 	.word	0x58024400
 8032ef0:	03d09000 	.word	0x03d09000
 8032ef4:	46000000 	.word	0x46000000
 8032ef8:	4c742400 	.word	0x4c742400
 8032efc:	4a742400 	.word	0x4a742400
 8032f00:	4bbebc20 	.word	0x4bbebc20

08032f04 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8032f04:	b580      	push	{r7, lr}
 8032f06:	b084      	sub	sp, #16
 8032f08:	af00      	add	r7, sp, #0
 8032f0a:	6078      	str	r0, [r7, #4]
 8032f0c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8032f0e:	2300      	movs	r3, #0
 8032f10:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8032f12:	4b53      	ldr	r3, [pc, #332]	; (8033060 <RCCEx_PLL2_Config+0x15c>)
 8032f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8032f16:	f003 0303 	and.w	r3, r3, #3
 8032f1a:	2b03      	cmp	r3, #3
 8032f1c:	d101      	bne.n	8032f22 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8032f1e:	2301      	movs	r3, #1
 8032f20:	e099      	b.n	8033056 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8032f22:	4b4f      	ldr	r3, [pc, #316]	; (8033060 <RCCEx_PLL2_Config+0x15c>)
 8032f24:	681b      	ldr	r3, [r3, #0]
 8032f26:	4a4e      	ldr	r2, [pc, #312]	; (8033060 <RCCEx_PLL2_Config+0x15c>)
 8032f28:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8032f2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8032f2e:	f7f7 fe43 	bl	802abb8 <HAL_GetTick>
 8032f32:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8032f34:	e008      	b.n	8032f48 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8032f36:	f7f7 fe3f 	bl	802abb8 <HAL_GetTick>
 8032f3a:	4602      	mov	r2, r0
 8032f3c:	68bb      	ldr	r3, [r7, #8]
 8032f3e:	1ad3      	subs	r3, r2, r3
 8032f40:	2b02      	cmp	r3, #2
 8032f42:	d901      	bls.n	8032f48 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8032f44:	2303      	movs	r3, #3
 8032f46:	e086      	b.n	8033056 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8032f48:	4b45      	ldr	r3, [pc, #276]	; (8033060 <RCCEx_PLL2_Config+0x15c>)
 8032f4a:	681b      	ldr	r3, [r3, #0]
 8032f4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8032f50:	2b00      	cmp	r3, #0
 8032f52:	d1f0      	bne.n	8032f36 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8032f54:	4b42      	ldr	r3, [pc, #264]	; (8033060 <RCCEx_PLL2_Config+0x15c>)
 8032f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8032f58:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8032f5c:	687b      	ldr	r3, [r7, #4]
 8032f5e:	681b      	ldr	r3, [r3, #0]
 8032f60:	031b      	lsls	r3, r3, #12
 8032f62:	493f      	ldr	r1, [pc, #252]	; (8033060 <RCCEx_PLL2_Config+0x15c>)
 8032f64:	4313      	orrs	r3, r2
 8032f66:	628b      	str	r3, [r1, #40]	; 0x28
 8032f68:	687b      	ldr	r3, [r7, #4]
 8032f6a:	685b      	ldr	r3, [r3, #4]
 8032f6c:	3b01      	subs	r3, #1
 8032f6e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8032f72:	687b      	ldr	r3, [r7, #4]
 8032f74:	689b      	ldr	r3, [r3, #8]
 8032f76:	3b01      	subs	r3, #1
 8032f78:	025b      	lsls	r3, r3, #9
 8032f7a:	b29b      	uxth	r3, r3
 8032f7c:	431a      	orrs	r2, r3
 8032f7e:	687b      	ldr	r3, [r7, #4]
 8032f80:	68db      	ldr	r3, [r3, #12]
 8032f82:	3b01      	subs	r3, #1
 8032f84:	041b      	lsls	r3, r3, #16
 8032f86:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8032f8a:	431a      	orrs	r2, r3
 8032f8c:	687b      	ldr	r3, [r7, #4]
 8032f8e:	691b      	ldr	r3, [r3, #16]
 8032f90:	3b01      	subs	r3, #1
 8032f92:	061b      	lsls	r3, r3, #24
 8032f94:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8032f98:	4931      	ldr	r1, [pc, #196]	; (8033060 <RCCEx_PLL2_Config+0x15c>)
 8032f9a:	4313      	orrs	r3, r2
 8032f9c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8032f9e:	4b30      	ldr	r3, [pc, #192]	; (8033060 <RCCEx_PLL2_Config+0x15c>)
 8032fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8032fa2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8032fa6:	687b      	ldr	r3, [r7, #4]
 8032fa8:	695b      	ldr	r3, [r3, #20]
 8032faa:	492d      	ldr	r1, [pc, #180]	; (8033060 <RCCEx_PLL2_Config+0x15c>)
 8032fac:	4313      	orrs	r3, r2
 8032fae:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8032fb0:	4b2b      	ldr	r3, [pc, #172]	; (8033060 <RCCEx_PLL2_Config+0x15c>)
 8032fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8032fb4:	f023 0220 	bic.w	r2, r3, #32
 8032fb8:	687b      	ldr	r3, [r7, #4]
 8032fba:	699b      	ldr	r3, [r3, #24]
 8032fbc:	4928      	ldr	r1, [pc, #160]	; (8033060 <RCCEx_PLL2_Config+0x15c>)
 8032fbe:	4313      	orrs	r3, r2
 8032fc0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8032fc2:	4b27      	ldr	r3, [pc, #156]	; (8033060 <RCCEx_PLL2_Config+0x15c>)
 8032fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8032fc6:	4a26      	ldr	r2, [pc, #152]	; (8033060 <RCCEx_PLL2_Config+0x15c>)
 8032fc8:	f023 0310 	bic.w	r3, r3, #16
 8032fcc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8032fce:	4b24      	ldr	r3, [pc, #144]	; (8033060 <RCCEx_PLL2_Config+0x15c>)
 8032fd0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8032fd2:	4b24      	ldr	r3, [pc, #144]	; (8033064 <RCCEx_PLL2_Config+0x160>)
 8032fd4:	4013      	ands	r3, r2
 8032fd6:	687a      	ldr	r2, [r7, #4]
 8032fd8:	69d2      	ldr	r2, [r2, #28]
 8032fda:	00d2      	lsls	r2, r2, #3
 8032fdc:	4920      	ldr	r1, [pc, #128]	; (8033060 <RCCEx_PLL2_Config+0x15c>)
 8032fde:	4313      	orrs	r3, r2
 8032fe0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8032fe2:	4b1f      	ldr	r3, [pc, #124]	; (8033060 <RCCEx_PLL2_Config+0x15c>)
 8032fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8032fe6:	4a1e      	ldr	r2, [pc, #120]	; (8033060 <RCCEx_PLL2_Config+0x15c>)
 8032fe8:	f043 0310 	orr.w	r3, r3, #16
 8032fec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8032fee:	683b      	ldr	r3, [r7, #0]
 8032ff0:	2b00      	cmp	r3, #0
 8032ff2:	d106      	bne.n	8033002 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8032ff4:	4b1a      	ldr	r3, [pc, #104]	; (8033060 <RCCEx_PLL2_Config+0x15c>)
 8032ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8032ff8:	4a19      	ldr	r2, [pc, #100]	; (8033060 <RCCEx_PLL2_Config+0x15c>)
 8032ffa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8032ffe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8033000:	e00f      	b.n	8033022 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8033002:	683b      	ldr	r3, [r7, #0]
 8033004:	2b01      	cmp	r3, #1
 8033006:	d106      	bne.n	8033016 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8033008:	4b15      	ldr	r3, [pc, #84]	; (8033060 <RCCEx_PLL2_Config+0x15c>)
 803300a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803300c:	4a14      	ldr	r2, [pc, #80]	; (8033060 <RCCEx_PLL2_Config+0x15c>)
 803300e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8033012:	62d3      	str	r3, [r2, #44]	; 0x2c
 8033014:	e005      	b.n	8033022 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8033016:	4b12      	ldr	r3, [pc, #72]	; (8033060 <RCCEx_PLL2_Config+0x15c>)
 8033018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803301a:	4a11      	ldr	r2, [pc, #68]	; (8033060 <RCCEx_PLL2_Config+0x15c>)
 803301c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8033020:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8033022:	4b0f      	ldr	r3, [pc, #60]	; (8033060 <RCCEx_PLL2_Config+0x15c>)
 8033024:	681b      	ldr	r3, [r3, #0]
 8033026:	4a0e      	ldr	r2, [pc, #56]	; (8033060 <RCCEx_PLL2_Config+0x15c>)
 8033028:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 803302c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 803302e:	f7f7 fdc3 	bl	802abb8 <HAL_GetTick>
 8033032:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8033034:	e008      	b.n	8033048 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8033036:	f7f7 fdbf 	bl	802abb8 <HAL_GetTick>
 803303a:	4602      	mov	r2, r0
 803303c:	68bb      	ldr	r3, [r7, #8]
 803303e:	1ad3      	subs	r3, r2, r3
 8033040:	2b02      	cmp	r3, #2
 8033042:	d901      	bls.n	8033048 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8033044:	2303      	movs	r3, #3
 8033046:	e006      	b.n	8033056 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8033048:	4b05      	ldr	r3, [pc, #20]	; (8033060 <RCCEx_PLL2_Config+0x15c>)
 803304a:	681b      	ldr	r3, [r3, #0]
 803304c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8033050:	2b00      	cmp	r3, #0
 8033052:	d0f0      	beq.n	8033036 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8033054:	7bfb      	ldrb	r3, [r7, #15]
}
 8033056:	4618      	mov	r0, r3
 8033058:	3710      	adds	r7, #16
 803305a:	46bd      	mov	sp, r7
 803305c:	bd80      	pop	{r7, pc}
 803305e:	bf00      	nop
 8033060:	58024400 	.word	0x58024400
 8033064:	ffff0007 	.word	0xffff0007

08033068 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8033068:	b580      	push	{r7, lr}
 803306a:	b084      	sub	sp, #16
 803306c:	af00      	add	r7, sp, #0
 803306e:	6078      	str	r0, [r7, #4]
 8033070:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8033072:	2300      	movs	r3, #0
 8033074:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8033076:	4b53      	ldr	r3, [pc, #332]	; (80331c4 <RCCEx_PLL3_Config+0x15c>)
 8033078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 803307a:	f003 0303 	and.w	r3, r3, #3
 803307e:	2b03      	cmp	r3, #3
 8033080:	d101      	bne.n	8033086 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8033082:	2301      	movs	r3, #1
 8033084:	e099      	b.n	80331ba <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8033086:	4b4f      	ldr	r3, [pc, #316]	; (80331c4 <RCCEx_PLL3_Config+0x15c>)
 8033088:	681b      	ldr	r3, [r3, #0]
 803308a:	4a4e      	ldr	r2, [pc, #312]	; (80331c4 <RCCEx_PLL3_Config+0x15c>)
 803308c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8033090:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8033092:	f7f7 fd91 	bl	802abb8 <HAL_GetTick>
 8033096:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8033098:	e008      	b.n	80330ac <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 803309a:	f7f7 fd8d 	bl	802abb8 <HAL_GetTick>
 803309e:	4602      	mov	r2, r0
 80330a0:	68bb      	ldr	r3, [r7, #8]
 80330a2:	1ad3      	subs	r3, r2, r3
 80330a4:	2b02      	cmp	r3, #2
 80330a6:	d901      	bls.n	80330ac <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80330a8:	2303      	movs	r3, #3
 80330aa:	e086      	b.n	80331ba <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80330ac:	4b45      	ldr	r3, [pc, #276]	; (80331c4 <RCCEx_PLL3_Config+0x15c>)
 80330ae:	681b      	ldr	r3, [r3, #0]
 80330b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80330b4:	2b00      	cmp	r3, #0
 80330b6:	d1f0      	bne.n	803309a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80330b8:	4b42      	ldr	r3, [pc, #264]	; (80331c4 <RCCEx_PLL3_Config+0x15c>)
 80330ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80330bc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80330c0:	687b      	ldr	r3, [r7, #4]
 80330c2:	681b      	ldr	r3, [r3, #0]
 80330c4:	051b      	lsls	r3, r3, #20
 80330c6:	493f      	ldr	r1, [pc, #252]	; (80331c4 <RCCEx_PLL3_Config+0x15c>)
 80330c8:	4313      	orrs	r3, r2
 80330ca:	628b      	str	r3, [r1, #40]	; 0x28
 80330cc:	687b      	ldr	r3, [r7, #4]
 80330ce:	685b      	ldr	r3, [r3, #4]
 80330d0:	3b01      	subs	r3, #1
 80330d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80330d6:	687b      	ldr	r3, [r7, #4]
 80330d8:	689b      	ldr	r3, [r3, #8]
 80330da:	3b01      	subs	r3, #1
 80330dc:	025b      	lsls	r3, r3, #9
 80330de:	b29b      	uxth	r3, r3
 80330e0:	431a      	orrs	r2, r3
 80330e2:	687b      	ldr	r3, [r7, #4]
 80330e4:	68db      	ldr	r3, [r3, #12]
 80330e6:	3b01      	subs	r3, #1
 80330e8:	041b      	lsls	r3, r3, #16
 80330ea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80330ee:	431a      	orrs	r2, r3
 80330f0:	687b      	ldr	r3, [r7, #4]
 80330f2:	691b      	ldr	r3, [r3, #16]
 80330f4:	3b01      	subs	r3, #1
 80330f6:	061b      	lsls	r3, r3, #24
 80330f8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80330fc:	4931      	ldr	r1, [pc, #196]	; (80331c4 <RCCEx_PLL3_Config+0x15c>)
 80330fe:	4313      	orrs	r3, r2
 8033100:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8033102:	4b30      	ldr	r3, [pc, #192]	; (80331c4 <RCCEx_PLL3_Config+0x15c>)
 8033104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8033106:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 803310a:	687b      	ldr	r3, [r7, #4]
 803310c:	695b      	ldr	r3, [r3, #20]
 803310e:	492d      	ldr	r1, [pc, #180]	; (80331c4 <RCCEx_PLL3_Config+0x15c>)
 8033110:	4313      	orrs	r3, r2
 8033112:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8033114:	4b2b      	ldr	r3, [pc, #172]	; (80331c4 <RCCEx_PLL3_Config+0x15c>)
 8033116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8033118:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 803311c:	687b      	ldr	r3, [r7, #4]
 803311e:	699b      	ldr	r3, [r3, #24]
 8033120:	4928      	ldr	r1, [pc, #160]	; (80331c4 <RCCEx_PLL3_Config+0x15c>)
 8033122:	4313      	orrs	r3, r2
 8033124:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8033126:	4b27      	ldr	r3, [pc, #156]	; (80331c4 <RCCEx_PLL3_Config+0x15c>)
 8033128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803312a:	4a26      	ldr	r2, [pc, #152]	; (80331c4 <RCCEx_PLL3_Config+0x15c>)
 803312c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8033130:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8033132:	4b24      	ldr	r3, [pc, #144]	; (80331c4 <RCCEx_PLL3_Config+0x15c>)
 8033134:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8033136:	4b24      	ldr	r3, [pc, #144]	; (80331c8 <RCCEx_PLL3_Config+0x160>)
 8033138:	4013      	ands	r3, r2
 803313a:	687a      	ldr	r2, [r7, #4]
 803313c:	69d2      	ldr	r2, [r2, #28]
 803313e:	00d2      	lsls	r2, r2, #3
 8033140:	4920      	ldr	r1, [pc, #128]	; (80331c4 <RCCEx_PLL3_Config+0x15c>)
 8033142:	4313      	orrs	r3, r2
 8033144:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8033146:	4b1f      	ldr	r3, [pc, #124]	; (80331c4 <RCCEx_PLL3_Config+0x15c>)
 8033148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803314a:	4a1e      	ldr	r2, [pc, #120]	; (80331c4 <RCCEx_PLL3_Config+0x15c>)
 803314c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8033150:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8033152:	683b      	ldr	r3, [r7, #0]
 8033154:	2b00      	cmp	r3, #0
 8033156:	d106      	bne.n	8033166 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8033158:	4b1a      	ldr	r3, [pc, #104]	; (80331c4 <RCCEx_PLL3_Config+0x15c>)
 803315a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803315c:	4a19      	ldr	r2, [pc, #100]	; (80331c4 <RCCEx_PLL3_Config+0x15c>)
 803315e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8033162:	62d3      	str	r3, [r2, #44]	; 0x2c
 8033164:	e00f      	b.n	8033186 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8033166:	683b      	ldr	r3, [r7, #0]
 8033168:	2b01      	cmp	r3, #1
 803316a:	d106      	bne.n	803317a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 803316c:	4b15      	ldr	r3, [pc, #84]	; (80331c4 <RCCEx_PLL3_Config+0x15c>)
 803316e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8033170:	4a14      	ldr	r2, [pc, #80]	; (80331c4 <RCCEx_PLL3_Config+0x15c>)
 8033172:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8033176:	62d3      	str	r3, [r2, #44]	; 0x2c
 8033178:	e005      	b.n	8033186 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 803317a:	4b12      	ldr	r3, [pc, #72]	; (80331c4 <RCCEx_PLL3_Config+0x15c>)
 803317c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803317e:	4a11      	ldr	r2, [pc, #68]	; (80331c4 <RCCEx_PLL3_Config+0x15c>)
 8033180:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8033184:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8033186:	4b0f      	ldr	r3, [pc, #60]	; (80331c4 <RCCEx_PLL3_Config+0x15c>)
 8033188:	681b      	ldr	r3, [r3, #0]
 803318a:	4a0e      	ldr	r2, [pc, #56]	; (80331c4 <RCCEx_PLL3_Config+0x15c>)
 803318c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8033190:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8033192:	f7f7 fd11 	bl	802abb8 <HAL_GetTick>
 8033196:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8033198:	e008      	b.n	80331ac <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 803319a:	f7f7 fd0d 	bl	802abb8 <HAL_GetTick>
 803319e:	4602      	mov	r2, r0
 80331a0:	68bb      	ldr	r3, [r7, #8]
 80331a2:	1ad3      	subs	r3, r2, r3
 80331a4:	2b02      	cmp	r3, #2
 80331a6:	d901      	bls.n	80331ac <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80331a8:	2303      	movs	r3, #3
 80331aa:	e006      	b.n	80331ba <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80331ac:	4b05      	ldr	r3, [pc, #20]	; (80331c4 <RCCEx_PLL3_Config+0x15c>)
 80331ae:	681b      	ldr	r3, [r3, #0]
 80331b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80331b4:	2b00      	cmp	r3, #0
 80331b6:	d0f0      	beq.n	803319a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80331b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80331ba:	4618      	mov	r0, r3
 80331bc:	3710      	adds	r7, #16
 80331be:	46bd      	mov	sp, r7
 80331c0:	bd80      	pop	{r7, pc}
 80331c2:	bf00      	nop
 80331c4:	58024400 	.word	0x58024400
 80331c8:	ffff0007 	.word	0xffff0007

080331cc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80331cc:	b580      	push	{r7, lr}
 80331ce:	b084      	sub	sp, #16
 80331d0:	af00      	add	r7, sp, #0
 80331d2:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80331d4:	687b      	ldr	r3, [r7, #4]
 80331d6:	2b00      	cmp	r3, #0
 80331d8:	d101      	bne.n	80331de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80331da:	2301      	movs	r3, #1
 80331dc:	e0f1      	b.n	80333c2 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80331de:	687b      	ldr	r3, [r7, #4]
 80331e0:	2200      	movs	r2, #0
 80331e2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80331e4:	687b      	ldr	r3, [r7, #4]
 80331e6:	681b      	ldr	r3, [r3, #0]
 80331e8:	4a78      	ldr	r2, [pc, #480]	; (80333cc <HAL_SPI_Init+0x200>)
 80331ea:	4293      	cmp	r3, r2
 80331ec:	d00f      	beq.n	803320e <HAL_SPI_Init+0x42>
 80331ee:	687b      	ldr	r3, [r7, #4]
 80331f0:	681b      	ldr	r3, [r3, #0]
 80331f2:	4a77      	ldr	r2, [pc, #476]	; (80333d0 <HAL_SPI_Init+0x204>)
 80331f4:	4293      	cmp	r3, r2
 80331f6:	d00a      	beq.n	803320e <HAL_SPI_Init+0x42>
 80331f8:	687b      	ldr	r3, [r7, #4]
 80331fa:	681b      	ldr	r3, [r3, #0]
 80331fc:	4a75      	ldr	r2, [pc, #468]	; (80333d4 <HAL_SPI_Init+0x208>)
 80331fe:	4293      	cmp	r3, r2
 8033200:	d005      	beq.n	803320e <HAL_SPI_Init+0x42>
 8033202:	687b      	ldr	r3, [r7, #4]
 8033204:	68db      	ldr	r3, [r3, #12]
 8033206:	2b0f      	cmp	r3, #15
 8033208:	d901      	bls.n	803320e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 803320a:	2301      	movs	r3, #1
 803320c:	e0d9      	b.n	80333c2 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 803320e:	6878      	ldr	r0, [r7, #4]
 8033210:	f001 f8ee 	bl	80343f0 <SPI_GetPacketSize>
 8033214:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8033216:	687b      	ldr	r3, [r7, #4]
 8033218:	681b      	ldr	r3, [r3, #0]
 803321a:	4a6c      	ldr	r2, [pc, #432]	; (80333cc <HAL_SPI_Init+0x200>)
 803321c:	4293      	cmp	r3, r2
 803321e:	d00c      	beq.n	803323a <HAL_SPI_Init+0x6e>
 8033220:	687b      	ldr	r3, [r7, #4]
 8033222:	681b      	ldr	r3, [r3, #0]
 8033224:	4a6a      	ldr	r2, [pc, #424]	; (80333d0 <HAL_SPI_Init+0x204>)
 8033226:	4293      	cmp	r3, r2
 8033228:	d007      	beq.n	803323a <HAL_SPI_Init+0x6e>
 803322a:	687b      	ldr	r3, [r7, #4]
 803322c:	681b      	ldr	r3, [r3, #0]
 803322e:	4a69      	ldr	r2, [pc, #420]	; (80333d4 <HAL_SPI_Init+0x208>)
 8033230:	4293      	cmp	r3, r2
 8033232:	d002      	beq.n	803323a <HAL_SPI_Init+0x6e>
 8033234:	68fb      	ldr	r3, [r7, #12]
 8033236:	2b08      	cmp	r3, #8
 8033238:	d811      	bhi.n	803325e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 803323a:	687b      	ldr	r3, [r7, #4]
 803323c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 803323e:	4a63      	ldr	r2, [pc, #396]	; (80333cc <HAL_SPI_Init+0x200>)
 8033240:	4293      	cmp	r3, r2
 8033242:	d009      	beq.n	8033258 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8033244:	687b      	ldr	r3, [r7, #4]
 8033246:	681b      	ldr	r3, [r3, #0]
 8033248:	4a61      	ldr	r2, [pc, #388]	; (80333d0 <HAL_SPI_Init+0x204>)
 803324a:	4293      	cmp	r3, r2
 803324c:	d004      	beq.n	8033258 <HAL_SPI_Init+0x8c>
 803324e:	687b      	ldr	r3, [r7, #4]
 8033250:	681b      	ldr	r3, [r3, #0]
 8033252:	4a60      	ldr	r2, [pc, #384]	; (80333d4 <HAL_SPI_Init+0x208>)
 8033254:	4293      	cmp	r3, r2
 8033256:	d104      	bne.n	8033262 <HAL_SPI_Init+0x96>
 8033258:	68fb      	ldr	r3, [r7, #12]
 803325a:	2b10      	cmp	r3, #16
 803325c:	d901      	bls.n	8033262 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 803325e:	2301      	movs	r3, #1
 8033260:	e0af      	b.n	80333c2 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8033262:	687b      	ldr	r3, [r7, #4]
 8033264:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8033268:	b2db      	uxtb	r3, r3
 803326a:	2b00      	cmp	r3, #0
 803326c:	d106      	bne.n	803327c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 803326e:	687b      	ldr	r3, [r7, #4]
 8033270:	2200      	movs	r2, #0
 8033272:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8033276:	6878      	ldr	r0, [r7, #4]
 8033278:	f7f6 fc46 	bl	8029b08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 803327c:	687b      	ldr	r3, [r7, #4]
 803327e:	2202      	movs	r2, #2
 8033280:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8033284:	687b      	ldr	r3, [r7, #4]
 8033286:	681b      	ldr	r3, [r3, #0]
 8033288:	681a      	ldr	r2, [r3, #0]
 803328a:	687b      	ldr	r3, [r7, #4]
 803328c:	681b      	ldr	r3, [r3, #0]
 803328e:	f022 0201 	bic.w	r2, r2, #1
 8033292:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8033294:	687b      	ldr	r3, [r7, #4]
 8033296:	681b      	ldr	r3, [r3, #0]
 8033298:	689b      	ldr	r3, [r3, #8]
 803329a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 803329e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80332a0:	687b      	ldr	r3, [r7, #4]
 80332a2:	699b      	ldr	r3, [r3, #24]
 80332a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80332a8:	d119      	bne.n	80332de <HAL_SPI_Init+0x112>
 80332aa:	687b      	ldr	r3, [r7, #4]
 80332ac:	685b      	ldr	r3, [r3, #4]
 80332ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80332b2:	d103      	bne.n	80332bc <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80332b4:	687b      	ldr	r3, [r7, #4]
 80332b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80332b8:	2b00      	cmp	r3, #0
 80332ba:	d008      	beq.n	80332ce <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80332bc:	687b      	ldr	r3, [r7, #4]
 80332be:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80332c0:	2b00      	cmp	r3, #0
 80332c2:	d10c      	bne.n	80332de <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80332c4:	687b      	ldr	r3, [r7, #4]
 80332c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80332c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80332cc:	d107      	bne.n	80332de <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80332ce:	687b      	ldr	r3, [r7, #4]
 80332d0:	681b      	ldr	r3, [r3, #0]
 80332d2:	681a      	ldr	r2, [r3, #0]
 80332d4:	687b      	ldr	r3, [r7, #4]
 80332d6:	681b      	ldr	r3, [r3, #0]
 80332d8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80332dc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80332de:	687b      	ldr	r3, [r7, #4]
 80332e0:	69da      	ldr	r2, [r3, #28]
 80332e2:	687b      	ldr	r3, [r7, #4]
 80332e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80332e6:	431a      	orrs	r2, r3
 80332e8:	68bb      	ldr	r3, [r7, #8]
 80332ea:	431a      	orrs	r2, r3
 80332ec:	687b      	ldr	r3, [r7, #4]
 80332ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80332f0:	ea42 0103 	orr.w	r1, r2, r3
 80332f4:	687b      	ldr	r3, [r7, #4]
 80332f6:	68da      	ldr	r2, [r3, #12]
 80332f8:	687b      	ldr	r3, [r7, #4]
 80332fa:	681b      	ldr	r3, [r3, #0]
 80332fc:	430a      	orrs	r2, r1
 80332fe:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8033300:	687b      	ldr	r3, [r7, #4]
 8033302:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8033304:	687b      	ldr	r3, [r7, #4]
 8033306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8033308:	431a      	orrs	r2, r3
 803330a:	687b      	ldr	r3, [r7, #4]
 803330c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 803330e:	431a      	orrs	r2, r3
 8033310:	687b      	ldr	r3, [r7, #4]
 8033312:	699b      	ldr	r3, [r3, #24]
 8033314:	431a      	orrs	r2, r3
 8033316:	687b      	ldr	r3, [r7, #4]
 8033318:	691b      	ldr	r3, [r3, #16]
 803331a:	431a      	orrs	r2, r3
 803331c:	687b      	ldr	r3, [r7, #4]
 803331e:	695b      	ldr	r3, [r3, #20]
 8033320:	431a      	orrs	r2, r3
 8033322:	687b      	ldr	r3, [r7, #4]
 8033324:	6a1b      	ldr	r3, [r3, #32]
 8033326:	431a      	orrs	r2, r3
 8033328:	687b      	ldr	r3, [r7, #4]
 803332a:	685b      	ldr	r3, [r3, #4]
 803332c:	431a      	orrs	r2, r3
 803332e:	687b      	ldr	r3, [r7, #4]
 8033330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8033332:	431a      	orrs	r2, r3
 8033334:	687b      	ldr	r3, [r7, #4]
 8033336:	689b      	ldr	r3, [r3, #8]
 8033338:	431a      	orrs	r2, r3
 803333a:	687b      	ldr	r3, [r7, #4]
 803333c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 803333e:	ea42 0103 	orr.w	r1, r2, r3
 8033342:	687b      	ldr	r3, [r7, #4]
 8033344:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8033346:	687b      	ldr	r3, [r7, #4]
 8033348:	681b      	ldr	r3, [r3, #0]
 803334a:	430a      	orrs	r2, r1
 803334c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 803334e:	687b      	ldr	r3, [r7, #4]
 8033350:	685b      	ldr	r3, [r3, #4]
 8033352:	2b00      	cmp	r3, #0
 8033354:	d113      	bne.n	803337e <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8033356:	687b      	ldr	r3, [r7, #4]
 8033358:	681b      	ldr	r3, [r3, #0]
 803335a:	689b      	ldr	r3, [r3, #8]
 803335c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8033360:	687b      	ldr	r3, [r7, #4]
 8033362:	681b      	ldr	r3, [r3, #0]
 8033364:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8033368:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 803336a:	687b      	ldr	r3, [r7, #4]
 803336c:	681b      	ldr	r3, [r3, #0]
 803336e:	689b      	ldr	r3, [r3, #8]
 8033370:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8033374:	687b      	ldr	r3, [r7, #4]
 8033376:	681b      	ldr	r3, [r3, #0]
 8033378:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 803337c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 803337e:	687b      	ldr	r3, [r7, #4]
 8033380:	681b      	ldr	r3, [r3, #0]
 8033382:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8033384:	687b      	ldr	r3, [r7, #4]
 8033386:	681b      	ldr	r3, [r3, #0]
 8033388:	f022 0201 	bic.w	r2, r2, #1
 803338c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 803338e:	687b      	ldr	r3, [r7, #4]
 8033390:	685b      	ldr	r3, [r3, #4]
 8033392:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8033396:	2b00      	cmp	r3, #0
 8033398:	d00a      	beq.n	80333b0 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 803339a:	687b      	ldr	r3, [r7, #4]
 803339c:	681b      	ldr	r3, [r3, #0]
 803339e:	68db      	ldr	r3, [r3, #12]
 80333a0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80333a4:	687b      	ldr	r3, [r7, #4]
 80333a6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80333a8:	687b      	ldr	r3, [r7, #4]
 80333aa:	681b      	ldr	r3, [r3, #0]
 80333ac:	430a      	orrs	r2, r1
 80333ae:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80333b0:	687b      	ldr	r3, [r7, #4]
 80333b2:	2200      	movs	r2, #0
 80333b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80333b8:	687b      	ldr	r3, [r7, #4]
 80333ba:	2201      	movs	r2, #1
 80333bc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80333c0:	2300      	movs	r3, #0
}
 80333c2:	4618      	mov	r0, r3
 80333c4:	3710      	adds	r7, #16
 80333c6:	46bd      	mov	sp, r7
 80333c8:	bd80      	pop	{r7, pc}
 80333ca:	bf00      	nop
 80333cc:	40013000 	.word	0x40013000
 80333d0:	40003800 	.word	0x40003800
 80333d4:	40003c00 	.word	0x40003c00

080333d8 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80333d8:	b580      	push	{r7, lr}
 80333da:	b086      	sub	sp, #24
 80333dc:	af00      	add	r7, sp, #0
 80333de:	60f8      	str	r0, [r7, #12]
 80333e0:	60b9      	str	r1, [r7, #8]
 80333e2:	4613      	mov	r3, r2
 80333e4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80333e6:	2300      	movs	r3, #0
 80333e8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 80333ea:	68fb      	ldr	r3, [r7, #12]
 80333ec:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80333f0:	2b01      	cmp	r3, #1
 80333f2:	d101      	bne.n	80333f8 <HAL_SPI_Transmit_DMA+0x20>
 80333f4:	2302      	movs	r3, #2
 80333f6:	e12c      	b.n	8033652 <HAL_SPI_Transmit_DMA+0x27a>
 80333f8:	68fb      	ldr	r3, [r7, #12]
 80333fa:	2201      	movs	r2, #1
 80333fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->State != HAL_SPI_STATE_READY)
 8033400:	68fb      	ldr	r3, [r7, #12]
 8033402:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8033406:	b2db      	uxtb	r3, r3
 8033408:	2b01      	cmp	r3, #1
 803340a:	d007      	beq.n	803341c <HAL_SPI_Transmit_DMA+0x44>
  {
    errorcode = HAL_BUSY;
 803340c:	2302      	movs	r3, #2
 803340e:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8033410:	68fb      	ldr	r3, [r7, #12]
 8033412:	2200      	movs	r2, #0
 8033414:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8033418:	7dfb      	ldrb	r3, [r7, #23]
 803341a:	e11a      	b.n	8033652 <HAL_SPI_Transmit_DMA+0x27a>
  }

  if ((pData == NULL) || (Size == 0UL))
 803341c:	68bb      	ldr	r3, [r7, #8]
 803341e:	2b00      	cmp	r3, #0
 8033420:	d002      	beq.n	8033428 <HAL_SPI_Transmit_DMA+0x50>
 8033422:	88fb      	ldrh	r3, [r7, #6]
 8033424:	2b00      	cmp	r3, #0
 8033426:	d107      	bne.n	8033438 <HAL_SPI_Transmit_DMA+0x60>
  {
    errorcode = HAL_ERROR;
 8033428:	2301      	movs	r3, #1
 803342a:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 803342c:	68fb      	ldr	r3, [r7, #12]
 803342e:	2200      	movs	r2, #0
 8033430:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8033434:	7dfb      	ldrb	r3, [r7, #23]
 8033436:	e10c      	b.n	8033652 <HAL_SPI_Transmit_DMA+0x27a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8033438:	68fb      	ldr	r3, [r7, #12]
 803343a:	2203      	movs	r2, #3
 803343c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8033440:	68fb      	ldr	r3, [r7, #12]
 8033442:	2200      	movs	r2, #0
 8033444:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8033448:	68fb      	ldr	r3, [r7, #12]
 803344a:	68ba      	ldr	r2, [r7, #8]
 803344c:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 803344e:	68fb      	ldr	r3, [r7, #12]
 8033450:	88fa      	ldrh	r2, [r7, #6]
 8033452:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8033456:	68fb      	ldr	r3, [r7, #12]
 8033458:	88fa      	ldrh	r2, [r7, #6]
 803345a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 803345e:	68fb      	ldr	r3, [r7, #12]
 8033460:	2200      	movs	r2, #0
 8033462:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxISR       = NULL;
 8033464:	68fb      	ldr	r3, [r7, #12]
 8033466:	2200      	movs	r2, #0
 8033468:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 803346a:	68fb      	ldr	r3, [r7, #12]
 803346c:	2200      	movs	r2, #0
 803346e:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 8033470:	68fb      	ldr	r3, [r7, #12]
 8033472:	2200      	movs	r2, #0
 8033474:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 8033478:	68fb      	ldr	r3, [r7, #12]
 803347a:	2200      	movs	r2, #0
 803347c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8033480:	68fb      	ldr	r3, [r7, #12]
 8033482:	689b      	ldr	r3, [r3, #8]
 8033484:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8033488:	d107      	bne.n	803349a <HAL_SPI_Transmit_DMA+0xc2>
  {
    SPI_1LINE_TX(hspi);
 803348a:	68fb      	ldr	r3, [r7, #12]
 803348c:	681b      	ldr	r3, [r3, #0]
 803348e:	681a      	ldr	r2, [r3, #0]
 8033490:	68fb      	ldr	r3, [r7, #12]
 8033492:	681b      	ldr	r3, [r3, #0]
 8033494:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8033498:	601a      	str	r2, [r3, #0]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 803349a:	68fb      	ldr	r3, [r7, #12]
 803349c:	68db      	ldr	r3, [r3, #12]
 803349e:	2b0f      	cmp	r3, #15
 80334a0:	d905      	bls.n	80334ae <HAL_SPI_Transmit_DMA+0xd6>
 80334a2:	68fb      	ldr	r3, [r7, #12]
 80334a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80334a6:	699b      	ldr	r3, [r3, #24]
 80334a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80334ac:	d10f      	bne.n	80334ce <HAL_SPI_Transmit_DMA+0xf6>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80334ae:	68fb      	ldr	r3, [r7, #12]
 80334b0:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 80334b2:	2b07      	cmp	r3, #7
 80334b4:	d913      	bls.n	80334de <HAL_SPI_Transmit_DMA+0x106>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80334b6:	68fb      	ldr	r3, [r7, #12]
 80334b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80334ba:	699b      	ldr	r3, [r3, #24]
 80334bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80334c0:	d00d      	beq.n	80334de <HAL_SPI_Transmit_DMA+0x106>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 80334c2:	68fb      	ldr	r3, [r7, #12]
 80334c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80334c6:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80334c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80334cc:	d007      	beq.n	80334de <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 80334ce:	2301      	movs	r3, #1
 80334d0:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 80334d2:	68fb      	ldr	r3, [r7, #12]
 80334d4:	2200      	movs	r2, #0
 80334d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80334da:	7dfb      	ldrb	r3, [r7, #23]
 80334dc:	e0b9      	b.n	8033652 <HAL_SPI_Transmit_DMA+0x27a>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80334de:	68fb      	ldr	r3, [r7, #12]
 80334e0:	68db      	ldr	r3, [r3, #12]
 80334e2:	2b07      	cmp	r3, #7
 80334e4:	d820      	bhi.n	8033528 <HAL_SPI_Transmit_DMA+0x150>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80334e6:	68fb      	ldr	r3, [r7, #12]
 80334e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80334ea:	699b      	ldr	r3, [r3, #24]
 80334ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80334f0:	d109      	bne.n	8033506 <HAL_SPI_Transmit_DMA+0x12e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 80334f2:	68fb      	ldr	r3, [r7, #12]
 80334f4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80334f8:	b29b      	uxth	r3, r3
 80334fa:	3301      	adds	r3, #1
 80334fc:	105b      	asrs	r3, r3, #1
 80334fe:	b29a      	uxth	r2, r3
 8033500:	68fb      	ldr	r3, [r7, #12]
 8033502:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8033506:	68fb      	ldr	r3, [r7, #12]
 8033508:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 803350a:	699b      	ldr	r3, [r3, #24]
 803350c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8033510:	d11e      	bne.n	8033550 <HAL_SPI_Transmit_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8033512:	68fb      	ldr	r3, [r7, #12]
 8033514:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8033518:	b29b      	uxth	r3, r3
 803351a:	3303      	adds	r3, #3
 803351c:	109b      	asrs	r3, r3, #2
 803351e:	b29a      	uxth	r2, r3
 8033520:	68fb      	ldr	r3, [r7, #12]
 8033522:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8033526:	e013      	b.n	8033550 <HAL_SPI_Transmit_DMA+0x178>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8033528:	68fb      	ldr	r3, [r7, #12]
 803352a:	68db      	ldr	r3, [r3, #12]
 803352c:	2b0f      	cmp	r3, #15
 803352e:	d80f      	bhi.n	8033550 <HAL_SPI_Transmit_DMA+0x178>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8033530:	68fb      	ldr	r3, [r7, #12]
 8033532:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8033534:	699b      	ldr	r3, [r3, #24]
 8033536:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 803353a:	d109      	bne.n	8033550 <HAL_SPI_Transmit_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 803353c:	68fb      	ldr	r3, [r7, #12]
 803353e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8033542:	b29b      	uxth	r3, r3
 8033544:	3301      	adds	r3, #1
 8033546:	105b      	asrs	r3, r3, #1
 8033548:	b29a      	uxth	r2, r3
 803354a:	68fb      	ldr	r3, [r7, #12]
 803354c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8033550:	68fb      	ldr	r3, [r7, #12]
 8033552:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8033554:	4a41      	ldr	r2, [pc, #260]	; (803365c <HAL_SPI_Transmit_DMA+0x284>)
 8033556:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8033558:	68fb      	ldr	r3, [r7, #12]
 803355a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 803355c:	4a40      	ldr	r2, [pc, #256]	; (8033660 <HAL_SPI_Transmit_DMA+0x288>)
 803355e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8033560:	68fb      	ldr	r3, [r7, #12]
 8033562:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8033564:	4a3f      	ldr	r2, [pc, #252]	; (8033664 <HAL_SPI_Transmit_DMA+0x28c>)
 8033566:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8033568:	68fb      	ldr	r3, [r7, #12]
 803356a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 803356c:	2200      	movs	r2, #0
 803356e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8033570:	68fb      	ldr	r3, [r7, #12]
 8033572:	681b      	ldr	r3, [r3, #0]
 8033574:	689a      	ldr	r2, [r3, #8]
 8033576:	68fb      	ldr	r3, [r7, #12]
 8033578:	681b      	ldr	r3, [r3, #0]
 803357a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 803357e:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8033580:	68fb      	ldr	r3, [r7, #12]
 8033582:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8033584:	68fb      	ldr	r3, [r7, #12]
 8033586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8033588:	4619      	mov	r1, r3
 803358a:	68fb      	ldr	r3, [r7, #12]
 803358c:	681b      	ldr	r3, [r3, #0]
 803358e:	3320      	adds	r3, #32
 8033590:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8033592:	68fb      	ldr	r3, [r7, #12]
 8033594:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8033598:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 803359a:	f7f8 fb65 	bl	802bc68 <HAL_DMA_Start_IT>
 803359e:	4603      	mov	r3, r0
 80335a0:	2b00      	cmp	r3, #0
 80335a2:	d013      	beq.n	80335cc <HAL_SPI_Transmit_DMA+0x1f4>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80335a4:	68fb      	ldr	r3, [r7, #12]
 80335a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80335aa:	f043 0210 	orr.w	r2, r3, #16
 80335ae:	68fb      	ldr	r3, [r7, #12]
 80335b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 80335b4:	68fb      	ldr	r3, [r7, #12]
 80335b6:	2200      	movs	r2, #0
 80335b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 80335bc:	68fb      	ldr	r3, [r7, #12]
 80335be:	2201      	movs	r2, #1
 80335c0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 80335c4:	2301      	movs	r3, #1
 80335c6:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 80335c8:	7dfb      	ldrb	r3, [r7, #23]
 80335ca:	e042      	b.n	8033652 <HAL_SPI_Transmit_DMA+0x27a>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 80335cc:	68fb      	ldr	r3, [r7, #12]
 80335ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80335d0:	69db      	ldr	r3, [r3, #28]
 80335d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80335d6:	d108      	bne.n	80335ea <HAL_SPI_Transmit_DMA+0x212>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 80335d8:	68fb      	ldr	r3, [r7, #12]
 80335da:	681b      	ldr	r3, [r3, #0]
 80335dc:	6859      	ldr	r1, [r3, #4]
 80335de:	68fb      	ldr	r3, [r7, #12]
 80335e0:	681a      	ldr	r2, [r3, #0]
 80335e2:	4b21      	ldr	r3, [pc, #132]	; (8033668 <HAL_SPI_Transmit_DMA+0x290>)
 80335e4:	400b      	ands	r3, r1
 80335e6:	6053      	str	r3, [r2, #4]
 80335e8:	e009      	b.n	80335fe <HAL_SPI_Transmit_DMA+0x226>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80335ea:	68fb      	ldr	r3, [r7, #12]
 80335ec:	681b      	ldr	r3, [r3, #0]
 80335ee:	685a      	ldr	r2, [r3, #4]
 80335f0:	4b1d      	ldr	r3, [pc, #116]	; (8033668 <HAL_SPI_Transmit_DMA+0x290>)
 80335f2:	4013      	ands	r3, r2
 80335f4:	88f9      	ldrh	r1, [r7, #6]
 80335f6:	68fa      	ldr	r2, [r7, #12]
 80335f8:	6812      	ldr	r2, [r2, #0]
 80335fa:	430b      	orrs	r3, r1
 80335fc:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 80335fe:	68fb      	ldr	r3, [r7, #12]
 8033600:	681b      	ldr	r3, [r3, #0]
 8033602:	689a      	ldr	r2, [r3, #8]
 8033604:	68fb      	ldr	r3, [r7, #12]
 8033606:	681b      	ldr	r3, [r3, #0]
 8033608:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 803360c:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 803360e:	68fb      	ldr	r3, [r7, #12]
 8033610:	681b      	ldr	r3, [r3, #0]
 8033612:	691a      	ldr	r2, [r3, #16]
 8033614:	68fb      	ldr	r3, [r7, #12]
 8033616:	681b      	ldr	r3, [r3, #0]
 8033618:	f442 7248 	orr.w	r2, r2, #800	; 0x320
 803361c:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 803361e:	68fb      	ldr	r3, [r7, #12]
 8033620:	681b      	ldr	r3, [r3, #0]
 8033622:	681a      	ldr	r2, [r3, #0]
 8033624:	68fb      	ldr	r3, [r7, #12]
 8033626:	681b      	ldr	r3, [r3, #0]
 8033628:	f042 0201 	orr.w	r2, r2, #1
 803362c:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 803362e:	68fb      	ldr	r3, [r7, #12]
 8033630:	685b      	ldr	r3, [r3, #4]
 8033632:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8033636:	d107      	bne.n	8033648 <HAL_SPI_Transmit_DMA+0x270>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8033638:	68fb      	ldr	r3, [r7, #12]
 803363a:	681b      	ldr	r3, [r3, #0]
 803363c:	681a      	ldr	r2, [r3, #0]
 803363e:	68fb      	ldr	r3, [r7, #12]
 8033640:	681b      	ldr	r3, [r3, #0]
 8033642:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8033646:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8033648:	68fb      	ldr	r3, [r7, #12]
 803364a:	2200      	movs	r2, #0
 803364c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 8033650:	7dfb      	ldrb	r3, [r7, #23]
}
 8033652:	4618      	mov	r0, r3
 8033654:	3718      	adds	r7, #24
 8033656:	46bd      	mov	sp, r7
 8033658:	bd80      	pop	{r7, pc}
 803365a:	bf00      	nop
 803365c:	080341e3 	.word	0x080341e3
 8033660:	08034111 	.word	0x08034111
 8033664:	08034237 	.word	0x08034237
 8033668:	ffff0000 	.word	0xffff0000

0803366c <HAL_SPI_Receive_DMA>:
  * @param  Size : amount of data to be sent
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 803366c:	b580      	push	{r7, lr}
 803366e:	b086      	sub	sp, #24
 8033670:	af00      	add	r7, sp, #0
 8033672:	60f8      	str	r0, [r7, #12]
 8033674:	60b9      	str	r1, [r7, #8]
 8033676:	4613      	mov	r3, r2
 8033678:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 803367a:	2300      	movs	r3, #0
 803367c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 803367e:	68fb      	ldr	r3, [r7, #12]
 8033680:	689b      	ldr	r3, [r3, #8]
 8033682:	2b00      	cmp	r3, #0
 8033684:	d110      	bne.n	80336a8 <HAL_SPI_Receive_DMA+0x3c>
 8033686:	68fb      	ldr	r3, [r7, #12]
 8033688:	685b      	ldr	r3, [r3, #4]
 803368a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 803368e:	d10b      	bne.n	80336a8 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8033690:	68fb      	ldr	r3, [r7, #12]
 8033692:	2204      	movs	r2, #4
 8033694:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8033698:	88fb      	ldrh	r3, [r7, #6]
 803369a:	68ba      	ldr	r2, [r7, #8]
 803369c:	68b9      	ldr	r1, [r7, #8]
 803369e:	68f8      	ldr	r0, [r7, #12]
 80336a0:	f000 f940 	bl	8033924 <HAL_SPI_TransmitReceive_DMA>
 80336a4:	4603      	mov	r3, r0
 80336a6:	e130      	b.n	803390a <HAL_SPI_Receive_DMA+0x29e>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80336a8:	68fb      	ldr	r3, [r7, #12]
 80336aa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80336ae:	2b01      	cmp	r3, #1
 80336b0:	d101      	bne.n	80336b6 <HAL_SPI_Receive_DMA+0x4a>
 80336b2:	2302      	movs	r3, #2
 80336b4:	e129      	b.n	803390a <HAL_SPI_Receive_DMA+0x29e>
 80336b6:	68fb      	ldr	r3, [r7, #12]
 80336b8:	2201      	movs	r2, #1
 80336ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->State != HAL_SPI_STATE_READY)
 80336be:	68fb      	ldr	r3, [r7, #12]
 80336c0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80336c4:	b2db      	uxtb	r3, r3
 80336c6:	2b01      	cmp	r3, #1
 80336c8:	d007      	beq.n	80336da <HAL_SPI_Receive_DMA+0x6e>
  {
    errorcode = HAL_BUSY;
 80336ca:	2302      	movs	r3, #2
 80336cc:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 80336ce:	68fb      	ldr	r3, [r7, #12]
 80336d0:	2200      	movs	r2, #0
 80336d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80336d6:	7dfb      	ldrb	r3, [r7, #23]
 80336d8:	e117      	b.n	803390a <HAL_SPI_Receive_DMA+0x29e>
  }

  if ((pData == NULL) || (Size == 0UL))
 80336da:	68bb      	ldr	r3, [r7, #8]
 80336dc:	2b00      	cmp	r3, #0
 80336de:	d002      	beq.n	80336e6 <HAL_SPI_Receive_DMA+0x7a>
 80336e0:	88fb      	ldrh	r3, [r7, #6]
 80336e2:	2b00      	cmp	r3, #0
 80336e4:	d107      	bne.n	80336f6 <HAL_SPI_Receive_DMA+0x8a>
  {
    errorcode = HAL_ERROR;
 80336e6:	2301      	movs	r3, #1
 80336e8:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 80336ea:	68fb      	ldr	r3, [r7, #12]
 80336ec:	2200      	movs	r2, #0
 80336ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80336f2:	7dfb      	ldrb	r3, [r7, #23]
 80336f4:	e109      	b.n	803390a <HAL_SPI_Receive_DMA+0x29e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80336f6:	68fb      	ldr	r3, [r7, #12]
 80336f8:	2204      	movs	r2, #4
 80336fa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80336fe:	68fb      	ldr	r3, [r7, #12]
 8033700:	2200      	movs	r2, #0
 8033702:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8033706:	68fb      	ldr	r3, [r7, #12]
 8033708:	68ba      	ldr	r2, [r7, #8]
 803370a:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 803370c:	68fb      	ldr	r3, [r7, #12]
 803370e:	88fa      	ldrh	r2, [r7, #6]
 8033710:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8033714:	68fb      	ldr	r3, [r7, #12]
 8033716:	88fa      	ldrh	r2, [r7, #6]
 8033718:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 803371c:	68fb      	ldr	r3, [r7, #12]
 803371e:	2200      	movs	r2, #0
 8033720:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8033722:	68fb      	ldr	r3, [r7, #12]
 8033724:	2200      	movs	r2, #0
 8033726:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->TxXferSize  = (uint16_t) 0UL;
 8033728:	68fb      	ldr	r3, [r7, #12]
 803372a:	2200      	movs	r2, #0
 803372c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8033730:	68fb      	ldr	r3, [r7, #12]
 8033732:	2200      	movs	r2, #0
 8033734:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8033738:	68fb      	ldr	r3, [r7, #12]
 803373a:	689b      	ldr	r3, [r3, #8]
 803373c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8033740:	d107      	bne.n	8033752 <HAL_SPI_Receive_DMA+0xe6>
  {
    SPI_1LINE_RX(hspi);
 8033742:	68fb      	ldr	r3, [r7, #12]
 8033744:	681b      	ldr	r3, [r3, #0]
 8033746:	681a      	ldr	r2, [r3, #0]
 8033748:	68fb      	ldr	r3, [r7, #12]
 803374a:	681b      	ldr	r3, [r3, #0]
 803374c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8033750:	601a      	str	r2, [r3, #0]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8033752:	68fb      	ldr	r3, [r7, #12]
 8033754:	68db      	ldr	r3, [r3, #12]
 8033756:	2b0f      	cmp	r3, #15
 8033758:	d905      	bls.n	8033766 <HAL_SPI_Receive_DMA+0xfa>
 803375a:	68fb      	ldr	r3, [r7, #12]
 803375c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 803375e:	699b      	ldr	r3, [r3, #24]
 8033760:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8033764:	d10f      	bne.n	8033786 <HAL_SPI_Receive_DMA+0x11a>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8033766:	68fb      	ldr	r3, [r7, #12]
 8033768:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 803376a:	2b07      	cmp	r3, #7
 803376c:	d913      	bls.n	8033796 <HAL_SPI_Receive_DMA+0x12a>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 803376e:	68fb      	ldr	r3, [r7, #12]
 8033770:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8033772:	699b      	ldr	r3, [r3, #24]
 8033774:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8033778:	d00d      	beq.n	8033796 <HAL_SPI_Receive_DMA+0x12a>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 803377a:	68fb      	ldr	r3, [r7, #12]
 803377c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 803377e:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8033780:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8033784:	d007      	beq.n	8033796 <HAL_SPI_Receive_DMA+0x12a>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 8033786:	2301      	movs	r3, #1
 8033788:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 803378a:	68fb      	ldr	r3, [r7, #12]
 803378c:	2200      	movs	r2, #0
 803378e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8033792:	7dfb      	ldrb	r3, [r7, #23]
 8033794:	e0b9      	b.n	803390a <HAL_SPI_Receive_DMA+0x29e>
  }

  /* Clear RXDMAEN bit */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8033796:	68fb      	ldr	r3, [r7, #12]
 8033798:	681b      	ldr	r3, [r3, #0]
 803379a:	689a      	ldr	r2, [r3, #8]
 803379c:	68fb      	ldr	r3, [r7, #12]
 803379e:	681b      	ldr	r3, [r3, #0]
 80337a0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80337a4:	609a      	str	r2, [r3, #8]

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80337a6:	68fb      	ldr	r3, [r7, #12]
 80337a8:	68db      	ldr	r3, [r3, #12]
 80337aa:	2b07      	cmp	r3, #7
 80337ac:	d820      	bhi.n	80337f0 <HAL_SPI_Receive_DMA+0x184>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80337ae:	68fb      	ldr	r3, [r7, #12]
 80337b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80337b2:	699b      	ldr	r3, [r3, #24]
 80337b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80337b8:	d109      	bne.n	80337ce <HAL_SPI_Receive_DMA+0x162>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 80337ba:	68fb      	ldr	r3, [r7, #12]
 80337bc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80337c0:	b29b      	uxth	r3, r3
 80337c2:	3301      	adds	r3, #1
 80337c4:	105b      	asrs	r3, r3, #1
 80337c6:	b29a      	uxth	r2, r3
 80337c8:	68fb      	ldr	r3, [r7, #12]
 80337ca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80337ce:	68fb      	ldr	r3, [r7, #12]
 80337d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80337d2:	699b      	ldr	r3, [r3, #24]
 80337d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80337d8:	d11e      	bne.n	8033818 <HAL_SPI_Receive_DMA+0x1ac>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 80337da:	68fb      	ldr	r3, [r7, #12]
 80337dc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80337e0:	b29b      	uxth	r3, r3
 80337e2:	3303      	adds	r3, #3
 80337e4:	109b      	asrs	r3, r3, #2
 80337e6:	b29a      	uxth	r2, r3
 80337e8:	68fb      	ldr	r3, [r7, #12]
 80337ea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80337ee:	e013      	b.n	8033818 <HAL_SPI_Receive_DMA+0x1ac>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 80337f0:	68fb      	ldr	r3, [r7, #12]
 80337f2:	68db      	ldr	r3, [r3, #12]
 80337f4:	2b0f      	cmp	r3, #15
 80337f6:	d80f      	bhi.n	8033818 <HAL_SPI_Receive_DMA+0x1ac>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80337f8:	68fb      	ldr	r3, [r7, #12]
 80337fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80337fc:	699b      	ldr	r3, [r3, #24]
 80337fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8033802:	d109      	bne.n	8033818 <HAL_SPI_Receive_DMA+0x1ac>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8033804:	68fb      	ldr	r3, [r7, #12]
 8033806:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 803380a:	b29b      	uxth	r3, r3
 803380c:	3301      	adds	r3, #1
 803380e:	105b      	asrs	r3, r3, #1
 8033810:	b29a      	uxth	r2, r3
 8033812:	68fb      	ldr	r3, [r7, #12]
 8033814:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8033818:	68fb      	ldr	r3, [r7, #12]
 803381a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 803381c:	4a3d      	ldr	r2, [pc, #244]	; (8033914 <HAL_SPI_Receive_DMA+0x2a8>)
 803381e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8033820:	68fb      	ldr	r3, [r7, #12]
 8033822:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8033824:	4a3c      	ldr	r2, [pc, #240]	; (8033918 <HAL_SPI_Receive_DMA+0x2ac>)
 8033826:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8033828:	68fb      	ldr	r3, [r7, #12]
 803382a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 803382c:	4a3b      	ldr	r2, [pc, #236]	; (803391c <HAL_SPI_Receive_DMA+0x2b0>)
 803382e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8033830:	68fb      	ldr	r3, [r7, #12]
 8033832:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8033834:	2200      	movs	r2, #0
 8033836:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8033838:	68fb      	ldr	r3, [r7, #12]
 803383a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 803383c:	68fb      	ldr	r3, [r7, #12]
 803383e:	681b      	ldr	r3, [r3, #0]
 8033840:	3330      	adds	r3, #48	; 0x30
 8033842:	4619      	mov	r1, r3
 8033844:	68fb      	ldr	r3, [r7, #12]
 8033846:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8033848:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 803384a:	68fb      	ldr	r3, [r7, #12]
 803384c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8033850:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8033852:	f7f8 fa09 	bl	802bc68 <HAL_DMA_Start_IT>
 8033856:	4603      	mov	r3, r0
 8033858:	2b00      	cmp	r3, #0
 803385a:	d013      	beq.n	8033884 <HAL_SPI_Receive_DMA+0x218>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 803385c:	68fb      	ldr	r3, [r7, #12]
 803385e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8033862:	f043 0210 	orr.w	r2, r3, #16
 8033866:	68fb      	ldr	r3, [r7, #12]
 8033868:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 803386c:	68fb      	ldr	r3, [r7, #12]
 803386e:	2200      	movs	r2, #0
 8033870:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 8033874:	68fb      	ldr	r3, [r7, #12]
 8033876:	2201      	movs	r2, #1
 8033878:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 803387c:	2301      	movs	r3, #1
 803387e:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 8033880:	7dfb      	ldrb	r3, [r7, #23]
 8033882:	e042      	b.n	803390a <HAL_SPI_Receive_DMA+0x29e>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 8033884:	68fb      	ldr	r3, [r7, #12]
 8033886:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8033888:	69db      	ldr	r3, [r3, #28]
 803388a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 803388e:	d108      	bne.n	80338a2 <HAL_SPI_Receive_DMA+0x236>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8033890:	68fb      	ldr	r3, [r7, #12]
 8033892:	681b      	ldr	r3, [r3, #0]
 8033894:	6859      	ldr	r1, [r3, #4]
 8033896:	68fb      	ldr	r3, [r7, #12]
 8033898:	681a      	ldr	r2, [r3, #0]
 803389a:	4b21      	ldr	r3, [pc, #132]	; (8033920 <HAL_SPI_Receive_DMA+0x2b4>)
 803389c:	400b      	ands	r3, r1
 803389e:	6053      	str	r3, [r2, #4]
 80338a0:	e009      	b.n	80338b6 <HAL_SPI_Receive_DMA+0x24a>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80338a2:	68fb      	ldr	r3, [r7, #12]
 80338a4:	681b      	ldr	r3, [r3, #0]
 80338a6:	685a      	ldr	r2, [r3, #4]
 80338a8:	4b1d      	ldr	r3, [pc, #116]	; (8033920 <HAL_SPI_Receive_DMA+0x2b4>)
 80338aa:	4013      	ands	r3, r2
 80338ac:	88f9      	ldrh	r1, [r7, #6]
 80338ae:	68fa      	ldr	r2, [r7, #12]
 80338b0:	6812      	ldr	r2, [r2, #0]
 80338b2:	430b      	orrs	r3, r1
 80338b4:	6053      	str	r3, [r2, #4]
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 80338b6:	68fb      	ldr	r3, [r7, #12]
 80338b8:	681b      	ldr	r3, [r3, #0]
 80338ba:	689a      	ldr	r2, [r3, #8]
 80338bc:	68fb      	ldr	r3, [r7, #12]
 80338be:	681b      	ldr	r3, [r3, #0]
 80338c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80338c4:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 80338c6:	68fb      	ldr	r3, [r7, #12]
 80338c8:	681b      	ldr	r3, [r3, #0]
 80338ca:	691a      	ldr	r2, [r3, #16]
 80338cc:	68fb      	ldr	r3, [r7, #12]
 80338ce:	681b      	ldr	r3, [r3, #0]
 80338d0:	f442 7250 	orr.w	r2, r2, #832	; 0x340
 80338d4:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80338d6:	68fb      	ldr	r3, [r7, #12]
 80338d8:	681b      	ldr	r3, [r3, #0]
 80338da:	681a      	ldr	r2, [r3, #0]
 80338dc:	68fb      	ldr	r3, [r7, #12]
 80338de:	681b      	ldr	r3, [r3, #0]
 80338e0:	f042 0201 	orr.w	r2, r2, #1
 80338e4:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80338e6:	68fb      	ldr	r3, [r7, #12]
 80338e8:	685b      	ldr	r3, [r3, #4]
 80338ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80338ee:	d107      	bne.n	8033900 <HAL_SPI_Receive_DMA+0x294>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80338f0:	68fb      	ldr	r3, [r7, #12]
 80338f2:	681b      	ldr	r3, [r3, #0]
 80338f4:	681a      	ldr	r2, [r3, #0]
 80338f6:	68fb      	ldr	r3, [r7, #12]
 80338f8:	681b      	ldr	r3, [r3, #0]
 80338fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80338fe:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8033900:	68fb      	ldr	r3, [r7, #12]
 8033902:	2200      	movs	r2, #0
 8033904:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 8033908:	7dfb      	ldrb	r3, [r7, #23]
}
 803390a:	4618      	mov	r0, r3
 803390c:	3718      	adds	r7, #24
 803390e:	46bd      	mov	sp, r7
 8033910:	bd80      	pop	{r7, pc}
 8033912:	bf00      	nop
 8033914:	080341ff 	.word	0x080341ff
 8033918:	08034157 	.word	0x08034157
 803391c:	08034237 	.word	0x08034237
 8033920:	ffff0000 	.word	0xffff0000

08033924 <HAL_SPI_TransmitReceive_DMA>:
  * @note   When the CRC feature is enabled the pRxData Length must be Size + 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8033924:	b580      	push	{r7, lr}
 8033926:	b086      	sub	sp, #24
 8033928:	af00      	add	r7, sp, #0
 803392a:	60f8      	str	r0, [r7, #12]
 803392c:	60b9      	str	r1, [r7, #8]
 803392e:	607a      	str	r2, [r7, #4]
 8033930:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8033932:	2300      	movs	r3, #0
 8033934:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8033936:	68fb      	ldr	r3, [r7, #12]
 8033938:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 803393c:	2b01      	cmp	r3, #1
 803393e:	d101      	bne.n	8033944 <HAL_SPI_TransmitReceive_DMA+0x20>
 8033940:	2302      	movs	r3, #2
 8033942:	e1b4      	b.n	8033cae <HAL_SPI_TransmitReceive_DMA+0x38a>
 8033944:	68fb      	ldr	r3, [r7, #12]
 8033946:	2201      	movs	r2, #1
 8033948:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init temporary variables */
  tmp_state   = hspi->State;
 803394c:	68fb      	ldr	r3, [r7, #12]
 803394e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8033952:	75bb      	strb	r3, [r7, #22]
  tmp_mode    = hspi->Init.Mode;
 8033954:	68fb      	ldr	r3, [r7, #12]
 8033956:	685b      	ldr	r3, [r3, #4]
 8033958:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 803395a:	7dbb      	ldrb	r3, [r7, #22]
 803395c:	2b01      	cmp	r3, #1
 803395e:	d012      	beq.n	8033986 <HAL_SPI_TransmitReceive_DMA+0x62>
 8033960:	693b      	ldr	r3, [r7, #16]
 8033962:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8033966:	d106      	bne.n	8033976 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8033968:	68fb      	ldr	r3, [r7, #12]
 803396a:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 803396c:	2b00      	cmp	r3, #0
 803396e:	d102      	bne.n	8033976 <HAL_SPI_TransmitReceive_DMA+0x52>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8033970:	7dbb      	ldrb	r3, [r7, #22]
 8033972:	2b04      	cmp	r3, #4
 8033974:	d007      	beq.n	8033986 <HAL_SPI_TransmitReceive_DMA+0x62>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 8033976:	2302      	movs	r3, #2
 8033978:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 803397a:	68fb      	ldr	r3, [r7, #12]
 803397c:	2200      	movs	r2, #0
 803397e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8033982:	7dfb      	ldrb	r3, [r7, #23]
 8033984:	e193      	b.n	8033cae <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8033986:	68bb      	ldr	r3, [r7, #8]
 8033988:	2b00      	cmp	r3, #0
 803398a:	d005      	beq.n	8033998 <HAL_SPI_TransmitReceive_DMA+0x74>
 803398c:	687b      	ldr	r3, [r7, #4]
 803398e:	2b00      	cmp	r3, #0
 8033990:	d002      	beq.n	8033998 <HAL_SPI_TransmitReceive_DMA+0x74>
 8033992:	887b      	ldrh	r3, [r7, #2]
 8033994:	2b00      	cmp	r3, #0
 8033996:	d107      	bne.n	80339a8 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    errorcode = HAL_ERROR;
 8033998:	2301      	movs	r3, #1
 803399a:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 803399c:	68fb      	ldr	r3, [r7, #12]
 803399e:	2200      	movs	r2, #0
 80339a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80339a4:	7dfb      	ldrb	r3, [r7, #23]
 80339a6:	e182      	b.n	8033cae <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80339a8:	68fb      	ldr	r3, [r7, #12]
 80339aa:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80339ae:	b2db      	uxtb	r3, r3
 80339b0:	2b04      	cmp	r3, #4
 80339b2:	d003      	beq.n	80339bc <HAL_SPI_TransmitReceive_DMA+0x98>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80339b4:	68fb      	ldr	r3, [r7, #12]
 80339b6:	2205      	movs	r2, #5
 80339b8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80339bc:	68fb      	ldr	r3, [r7, #12]
 80339be:	2200      	movs	r2, #0
 80339c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80339c4:	68fb      	ldr	r3, [r7, #12]
 80339c6:	68ba      	ldr	r2, [r7, #8]
 80339c8:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 80339ca:	68fb      	ldr	r3, [r7, #12]
 80339cc:	887a      	ldrh	r2, [r7, #2]
 80339ce:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 80339d2:	68fb      	ldr	r3, [r7, #12]
 80339d4:	887a      	ldrh	r2, [r7, #2]
 80339d6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80339da:	68fb      	ldr	r3, [r7, #12]
 80339dc:	687a      	ldr	r2, [r7, #4]
 80339de:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 80339e0:	68fb      	ldr	r3, [r7, #12]
 80339e2:	887a      	ldrh	r2, [r7, #2]
 80339e4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 80339e8:	68fb      	ldr	r3, [r7, #12]
 80339ea:	887a      	ldrh	r2, [r7, #2]
 80339ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80339f0:	68fb      	ldr	r3, [r7, #12]
 80339f2:	2200      	movs	r2, #0
 80339f4:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 80339f6:	68fb      	ldr	r3, [r7, #12]
 80339f8:	2200      	movs	r2, #0
 80339fa:	675a      	str	r2, [r3, #116]	; 0x74

  /* Reset the Tx/Rx DMA bits */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80339fc:	68fb      	ldr	r3, [r7, #12]
 80339fe:	681b      	ldr	r3, [r3, #0]
 8033a00:	689a      	ldr	r2, [r3, #8]
 8033a02:	68fb      	ldr	r3, [r7, #12]
 8033a04:	681b      	ldr	r3, [r3, #0]
 8033a06:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8033a0a:	609a      	str	r2, [r3, #8]

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8033a0c:	68fb      	ldr	r3, [r7, #12]
 8033a0e:	68db      	ldr	r3, [r3, #12]
 8033a10:	2b0f      	cmp	r3, #15
 8033a12:	d905      	bls.n	8033a20 <HAL_SPI_TransmitReceive_DMA+0xfc>
 8033a14:	68fb      	ldr	r3, [r7, #12]
 8033a16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8033a18:	699b      	ldr	r3, [r3, #24]
 8033a1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8033a1e:	d10f      	bne.n	8033a40 <HAL_SPI_TransmitReceive_DMA+0x11c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8033a20:	68fb      	ldr	r3, [r7, #12]
 8033a22:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8033a24:	2b07      	cmp	r3, #7
 8033a26:	d913      	bls.n	8033a50 <HAL_SPI_TransmitReceive_DMA+0x12c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8033a28:	68fb      	ldr	r3, [r7, #12]
 8033a2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8033a2c:	699b      	ldr	r3, [r3, #24]
 8033a2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8033a32:	d00d      	beq.n	8033a50 <HAL_SPI_TransmitReceive_DMA+0x12c>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8033a34:	68fb      	ldr	r3, [r7, #12]
 8033a36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8033a38:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8033a3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8033a3e:	d007      	beq.n	8033a50 <HAL_SPI_TransmitReceive_DMA+0x12c>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 8033a40:	2301      	movs	r3, #1
 8033a42:	75fb      	strb	r3, [r7, #23]
    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8033a44:	68fb      	ldr	r3, [r7, #12]
 8033a46:	2200      	movs	r2, #0
 8033a48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8033a4c:	7dfb      	ldrb	r3, [r7, #23]
 8033a4e:	e12e      	b.n	8033cae <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8033a50:	68fb      	ldr	r3, [r7, #12]
 8033a52:	68db      	ldr	r3, [r3, #12]
 8033a54:	2b07      	cmp	r3, #7
 8033a56:	d840      	bhi.n	8033ada <HAL_SPI_TransmitReceive_DMA+0x1b6>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8033a58:	68fb      	ldr	r3, [r7, #12]
 8033a5a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8033a5c:	699b      	ldr	r3, [r3, #24]
 8033a5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8033a62:	d109      	bne.n	8033a78 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8033a64:	68fb      	ldr	r3, [r7, #12]
 8033a66:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8033a6a:	b29b      	uxth	r3, r3
 8033a6c:	3301      	adds	r3, #1
 8033a6e:	105b      	asrs	r3, r3, #1
 8033a70:	b29a      	uxth	r2, r3
 8033a72:	68fb      	ldr	r3, [r7, #12]
 8033a74:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8033a78:	68fb      	ldr	r3, [r7, #12]
 8033a7a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8033a7c:	699b      	ldr	r3, [r3, #24]
 8033a7e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8033a82:	d109      	bne.n	8033a98 <HAL_SPI_TransmitReceive_DMA+0x174>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8033a84:	68fb      	ldr	r3, [r7, #12]
 8033a86:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8033a8a:	b29b      	uxth	r3, r3
 8033a8c:	3303      	adds	r3, #3
 8033a8e:	109b      	asrs	r3, r3, #2
 8033a90:	b29a      	uxth	r2, r3
 8033a92:	68fb      	ldr	r3, [r7, #12]
 8033a94:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8033a98:	68fb      	ldr	r3, [r7, #12]
 8033a9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8033a9c:	699b      	ldr	r3, [r3, #24]
 8033a9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8033aa2:	d109      	bne.n	8033ab8 <HAL_SPI_TransmitReceive_DMA+0x194>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8033aa4:	68fb      	ldr	r3, [r7, #12]
 8033aa6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8033aaa:	b29b      	uxth	r3, r3
 8033aac:	3301      	adds	r3, #1
 8033aae:	105b      	asrs	r3, r3, #1
 8033ab0:	b29a      	uxth	r2, r3
 8033ab2:	68fb      	ldr	r3, [r7, #12]
 8033ab4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8033ab8:	68fb      	ldr	r3, [r7, #12]
 8033aba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8033abc:	699b      	ldr	r3, [r3, #24]
 8033abe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8033ac2:	d12e      	bne.n	8033b22 <HAL_SPI_TransmitReceive_DMA+0x1fe>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 8033ac4:	68fb      	ldr	r3, [r7, #12]
 8033ac6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8033aca:	b29b      	uxth	r3, r3
 8033acc:	3303      	adds	r3, #3
 8033ace:	109b      	asrs	r3, r3, #2
 8033ad0:	b29a      	uxth	r2, r3
 8033ad2:	68fb      	ldr	r3, [r7, #12]
 8033ad4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8033ad8:	e023      	b.n	8033b22 <HAL_SPI_TransmitReceive_DMA+0x1fe>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8033ada:	68fb      	ldr	r3, [r7, #12]
 8033adc:	68db      	ldr	r3, [r3, #12]
 8033ade:	2b0f      	cmp	r3, #15
 8033ae0:	d81f      	bhi.n	8033b22 <HAL_SPI_TransmitReceive_DMA+0x1fe>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8033ae2:	68fb      	ldr	r3, [r7, #12]
 8033ae4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8033ae6:	699b      	ldr	r3, [r3, #24]
 8033ae8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8033aec:	d109      	bne.n	8033b02 <HAL_SPI_TransmitReceive_DMA+0x1de>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8033aee:	68fb      	ldr	r3, [r7, #12]
 8033af0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8033af4:	b29b      	uxth	r3, r3
 8033af6:	3301      	adds	r3, #1
 8033af8:	105b      	asrs	r3, r3, #1
 8033afa:	b29a      	uxth	r2, r3
 8033afc:	68fb      	ldr	r3, [r7, #12]
 8033afe:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8033b02:	68fb      	ldr	r3, [r7, #12]
 8033b04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8033b06:	699b      	ldr	r3, [r3, #24]
 8033b08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8033b0c:	d109      	bne.n	8033b22 <HAL_SPI_TransmitReceive_DMA+0x1fe>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8033b0e:	68fb      	ldr	r3, [r7, #12]
 8033b10:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8033b14:	b29b      	uxth	r3, r3
 8033b16:	3301      	adds	r3, #1
 8033b18:	105b      	asrs	r3, r3, #1
 8033b1a:	b29a      	uxth	r2, r3
 8033b1c:	68fb      	ldr	r3, [r7, #12]
 8033b1e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8033b22:	68fb      	ldr	r3, [r7, #12]
 8033b24:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8033b28:	b2db      	uxtb	r3, r3
 8033b2a:	2b04      	cmp	r3, #4
 8033b2c:	d108      	bne.n	8033b40 <HAL_SPI_TransmitReceive_DMA+0x21c>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8033b2e:	68fb      	ldr	r3, [r7, #12]
 8033b30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8033b32:	4a61      	ldr	r2, [pc, #388]	; (8033cb8 <HAL_SPI_TransmitReceive_DMA+0x394>)
 8033b34:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8033b36:	68fb      	ldr	r3, [r7, #12]
 8033b38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8033b3a:	4a60      	ldr	r2, [pc, #384]	; (8033cbc <HAL_SPI_TransmitReceive_DMA+0x398>)
 8033b3c:	63da      	str	r2, [r3, #60]	; 0x3c
 8033b3e:	e007      	b.n	8033b50 <HAL_SPI_TransmitReceive_DMA+0x22c>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8033b40:	68fb      	ldr	r3, [r7, #12]
 8033b42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8033b44:	4a5e      	ldr	r2, [pc, #376]	; (8033cc0 <HAL_SPI_TransmitReceive_DMA+0x39c>)
 8033b46:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8033b48:	68fb      	ldr	r3, [r7, #12]
 8033b4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8033b4c:	4a5d      	ldr	r2, [pc, #372]	; (8033cc4 <HAL_SPI_TransmitReceive_DMA+0x3a0>)
 8033b4e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8033b50:	68fb      	ldr	r3, [r7, #12]
 8033b52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8033b54:	4a5c      	ldr	r2, [pc, #368]	; (8033cc8 <HAL_SPI_TransmitReceive_DMA+0x3a4>)
 8033b56:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8033b58:	68fb      	ldr	r3, [r7, #12]
 8033b5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8033b5c:	2200      	movs	r2, #0
 8033b5e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8033b60:	68fb      	ldr	r3, [r7, #12]
 8033b62:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8033b64:	68fb      	ldr	r3, [r7, #12]
 8033b66:	681b      	ldr	r3, [r3, #0]
 8033b68:	3330      	adds	r3, #48	; 0x30
 8033b6a:	4619      	mov	r1, r3
 8033b6c:	68fb      	ldr	r3, [r7, #12]
 8033b6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8033b70:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8033b72:	68fb      	ldr	r3, [r7, #12]
 8033b74:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8033b78:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8033b7a:	f7f8 f875 	bl	802bc68 <HAL_DMA_Start_IT>
 8033b7e:	4603      	mov	r3, r0
 8033b80:	2b00      	cmp	r3, #0
 8033b82:	d013      	beq.n	8033bac <HAL_SPI_TransmitReceive_DMA+0x288>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8033b84:	68fb      	ldr	r3, [r7, #12]
 8033b86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8033b8a:	f043 0210 	orr.w	r2, r3, #16
 8033b8e:	68fb      	ldr	r3, [r7, #12]
 8033b90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8033b94:	68fb      	ldr	r3, [r7, #12]
 8033b96:	2200      	movs	r2, #0
 8033b98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 8033b9c:	68fb      	ldr	r3, [r7, #12]
 8033b9e:	2201      	movs	r2, #1
 8033ba0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 8033ba4:	2301      	movs	r3, #1
 8033ba6:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 8033ba8:	7dfb      	ldrb	r3, [r7, #23]
 8033baa:	e080      	b.n	8033cae <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8033bac:	68fb      	ldr	r3, [r7, #12]
 8033bae:	681b      	ldr	r3, [r3, #0]
 8033bb0:	689a      	ldr	r2, [r3, #8]
 8033bb2:	68fb      	ldr	r3, [r7, #12]
 8033bb4:	681b      	ldr	r3, [r3, #0]
 8033bb6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8033bba:	609a      	str	r2, [r3, #8]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8033bbc:	68fb      	ldr	r3, [r7, #12]
 8033bbe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8033bc0:	2200      	movs	r2, #0
 8033bc2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8033bc4:	68fb      	ldr	r3, [r7, #12]
 8033bc6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8033bc8:	2200      	movs	r2, #0
 8033bca:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8033bcc:	68fb      	ldr	r3, [r7, #12]
 8033bce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8033bd0:	2200      	movs	r2, #0
 8033bd2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8033bd4:	68fb      	ldr	r3, [r7, #12]
 8033bd6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8033bd8:	2200      	movs	r2, #0
 8033bda:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8033bdc:	68fb      	ldr	r3, [r7, #12]
 8033bde:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8033be0:	68fb      	ldr	r3, [r7, #12]
 8033be2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8033be4:	4619      	mov	r1, r3
 8033be6:	68fb      	ldr	r3, [r7, #12]
 8033be8:	681b      	ldr	r3, [r3, #0]
 8033bea:	3320      	adds	r3, #32
 8033bec:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8033bee:	68fb      	ldr	r3, [r7, #12]
 8033bf0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8033bf4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8033bf6:	f7f8 f837 	bl	802bc68 <HAL_DMA_Start_IT>
 8033bfa:	4603      	mov	r3, r0
 8033bfc:	2b00      	cmp	r3, #0
 8033bfe:	d013      	beq.n	8033c28 <HAL_SPI_TransmitReceive_DMA+0x304>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8033c00:	68fb      	ldr	r3, [r7, #12]
 8033c02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8033c06:	f043 0210 	orr.w	r2, r3, #16
 8033c0a:	68fb      	ldr	r3, [r7, #12]
 8033c0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8033c10:	68fb      	ldr	r3, [r7, #12]
 8033c12:	2200      	movs	r2, #0
 8033c14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 8033c18:	68fb      	ldr	r3, [r7, #12]
 8033c1a:	2201      	movs	r2, #1
 8033c1c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 8033c20:	2301      	movs	r3, #1
 8033c22:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 8033c24:	7dfb      	ldrb	r3, [r7, #23]
 8033c26:	e042      	b.n	8033cae <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8033c28:	68fb      	ldr	r3, [r7, #12]
 8033c2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8033c2c:	69db      	ldr	r3, [r3, #28]
 8033c2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8033c32:	d108      	bne.n	8033c46 <HAL_SPI_TransmitReceive_DMA+0x322>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8033c34:	68fb      	ldr	r3, [r7, #12]
 8033c36:	681b      	ldr	r3, [r3, #0]
 8033c38:	6859      	ldr	r1, [r3, #4]
 8033c3a:	68fb      	ldr	r3, [r7, #12]
 8033c3c:	681a      	ldr	r2, [r3, #0]
 8033c3e:	4b23      	ldr	r3, [pc, #140]	; (8033ccc <HAL_SPI_TransmitReceive_DMA+0x3a8>)
 8033c40:	400b      	ands	r3, r1
 8033c42:	6053      	str	r3, [r2, #4]
 8033c44:	e009      	b.n	8033c5a <HAL_SPI_TransmitReceive_DMA+0x336>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8033c46:	68fb      	ldr	r3, [r7, #12]
 8033c48:	681b      	ldr	r3, [r3, #0]
 8033c4a:	685a      	ldr	r2, [r3, #4]
 8033c4c:	4b1f      	ldr	r3, [pc, #124]	; (8033ccc <HAL_SPI_TransmitReceive_DMA+0x3a8>)
 8033c4e:	4013      	ands	r3, r2
 8033c50:	8879      	ldrh	r1, [r7, #2]
 8033c52:	68fa      	ldr	r2, [r7, #12]
 8033c54:	6812      	ldr	r2, [r2, #0]
 8033c56:	430b      	orrs	r3, r1
 8033c58:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8033c5a:	68fb      	ldr	r3, [r7, #12]
 8033c5c:	681b      	ldr	r3, [r3, #0]
 8033c5e:	689a      	ldr	r2, [r3, #8]
 8033c60:	68fb      	ldr	r3, [r7, #12]
 8033c62:	681b      	ldr	r3, [r3, #0]
 8033c64:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8033c68:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8033c6a:	68fb      	ldr	r3, [r7, #12]
 8033c6c:	681b      	ldr	r3, [r3, #0]
 8033c6e:	691a      	ldr	r2, [r3, #16]
 8033c70:	68fb      	ldr	r3, [r7, #12]
 8033c72:	681b      	ldr	r3, [r3, #0]
 8033c74:	f442 7258 	orr.w	r2, r2, #864	; 0x360
 8033c78:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8033c7a:	68fb      	ldr	r3, [r7, #12]
 8033c7c:	681b      	ldr	r3, [r3, #0]
 8033c7e:	681a      	ldr	r2, [r3, #0]
 8033c80:	68fb      	ldr	r3, [r7, #12]
 8033c82:	681b      	ldr	r3, [r3, #0]
 8033c84:	f042 0201 	orr.w	r2, r2, #1
 8033c88:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8033c8a:	68fb      	ldr	r3, [r7, #12]
 8033c8c:	685b      	ldr	r3, [r3, #4]
 8033c8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8033c92:	d107      	bne.n	8033ca4 <HAL_SPI_TransmitReceive_DMA+0x380>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8033c94:	68fb      	ldr	r3, [r7, #12]
 8033c96:	681b      	ldr	r3, [r3, #0]
 8033c98:	681a      	ldr	r2, [r3, #0]
 8033c9a:	68fb      	ldr	r3, [r7, #12]
 8033c9c:	681b      	ldr	r3, [r3, #0]
 8033c9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8033ca2:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8033ca4:	68fb      	ldr	r3, [r7, #12]
 8033ca6:	2200      	movs	r2, #0
 8033ca8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 8033cac:	7dfb      	ldrb	r3, [r7, #23]
}
 8033cae:	4618      	mov	r0, r3
 8033cb0:	3718      	adds	r7, #24
 8033cb2:	46bd      	mov	sp, r7
 8033cb4:	bd80      	pop	{r7, pc}
 8033cb6:	bf00      	nop
 8033cb8:	080341ff 	.word	0x080341ff
 8033cbc:	08034157 	.word	0x08034157
 8033cc0:	0803421b 	.word	0x0803421b
 8033cc4:	0803419d 	.word	0x0803419d
 8033cc8:	08034237 	.word	0x08034237
 8033ccc:	ffff0000 	.word	0xffff0000

08033cd0 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8033cd0:	b580      	push	{r7, lr}
 8033cd2:	b08a      	sub	sp, #40	; 0x28
 8033cd4:	af00      	add	r7, sp, #0
 8033cd6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8033cd8:	687b      	ldr	r3, [r7, #4]
 8033cda:	681b      	ldr	r3, [r3, #0]
 8033cdc:	691b      	ldr	r3, [r3, #16]
 8033cde:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8033ce0:	687b      	ldr	r3, [r7, #4]
 8033ce2:	681b      	ldr	r3, [r3, #0]
 8033ce4:	695b      	ldr	r3, [r3, #20]
 8033ce6:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8033ce8:	6a3a      	ldr	r2, [r7, #32]
 8033cea:	69fb      	ldr	r3, [r7, #28]
 8033cec:	4013      	ands	r3, r2
 8033cee:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8033cf0:	687b      	ldr	r3, [r7, #4]
 8033cf2:	681b      	ldr	r3, [r3, #0]
 8033cf4:	689b      	ldr	r3, [r3, #8]
 8033cf6:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8033cf8:	2300      	movs	r3, #0
 8033cfa:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8033cfc:	687b      	ldr	r3, [r7, #4]
 8033cfe:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8033d02:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8033d04:	687b      	ldr	r3, [r7, #4]
 8033d06:	681b      	ldr	r3, [r3, #0]
 8033d08:	3330      	adds	r3, #48	; 0x30
 8033d0a:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8033d0c:	69bb      	ldr	r3, [r7, #24]
 8033d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8033d12:	2b00      	cmp	r3, #0
 8033d14:	d113      	bne.n	8033d3e <HAL_SPI_IRQHandler+0x6e>
 8033d16:	69bb      	ldr	r3, [r7, #24]
 8033d18:	f003 0320 	and.w	r3, r3, #32
 8033d1c:	2b00      	cmp	r3, #0
 8033d1e:	d10e      	bne.n	8033d3e <HAL_SPI_IRQHandler+0x6e>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8033d20:	69bb      	ldr	r3, [r7, #24]
 8033d22:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8033d26:	2b00      	cmp	r3, #0
 8033d28:	d009      	beq.n	8033d3e <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 8033d2a:	687b      	ldr	r3, [r7, #4]
 8033d2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8033d2e:	6878      	ldr	r0, [r7, #4]
 8033d30:	4798      	blx	r3
    hspi->RxISR(hspi);
 8033d32:	687b      	ldr	r3, [r7, #4]
 8033d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8033d36:	6878      	ldr	r0, [r7, #4]
 8033d38:	4798      	blx	r3
    handled = 1UL;
 8033d3a:	2301      	movs	r3, #1
 8033d3c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8033d3e:	69bb      	ldr	r3, [r7, #24]
 8033d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8033d44:	2b00      	cmp	r3, #0
 8033d46:	d10f      	bne.n	8033d68 <HAL_SPI_IRQHandler+0x98>
 8033d48:	69bb      	ldr	r3, [r7, #24]
 8033d4a:	f003 0301 	and.w	r3, r3, #1
 8033d4e:	2b00      	cmp	r3, #0
 8033d50:	d00a      	beq.n	8033d68 <HAL_SPI_IRQHandler+0x98>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8033d52:	69bb      	ldr	r3, [r7, #24]
 8033d54:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8033d58:	2b00      	cmp	r3, #0
 8033d5a:	d105      	bne.n	8033d68 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 8033d5c:	687b      	ldr	r3, [r7, #4]
 8033d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8033d60:	6878      	ldr	r0, [r7, #4]
 8033d62:	4798      	blx	r3
    handled = 1UL;
 8033d64:	2301      	movs	r3, #1
 8033d66:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8033d68:	69bb      	ldr	r3, [r7, #24]
 8033d6a:	f003 0320 	and.w	r3, r3, #32
 8033d6e:	2b00      	cmp	r3, #0
 8033d70:	d10f      	bne.n	8033d92 <HAL_SPI_IRQHandler+0xc2>
 8033d72:	69bb      	ldr	r3, [r7, #24]
 8033d74:	f003 0302 	and.w	r3, r3, #2
 8033d78:	2b00      	cmp	r3, #0
 8033d7a:	d00a      	beq.n	8033d92 <HAL_SPI_IRQHandler+0xc2>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8033d7c:	69bb      	ldr	r3, [r7, #24]
 8033d7e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8033d82:	2b00      	cmp	r3, #0
 8033d84:	d105      	bne.n	8033d92 <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 8033d86:	687b      	ldr	r3, [r7, #4]
 8033d88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8033d8a:	6878      	ldr	r0, [r7, #4]
 8033d8c:	4798      	blx	r3
    handled = 1UL;
 8033d8e:	2301      	movs	r3, #1
 8033d90:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8033d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8033d94:	2b00      	cmp	r3, #0
 8033d96:	f040 815a 	bne.w	803404e <HAL_SPI_IRQHandler+0x37e>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8033d9a:	69bb      	ldr	r3, [r7, #24]
 8033d9c:	f003 0308 	and.w	r3, r3, #8
 8033da0:	2b00      	cmp	r3, #0
 8033da2:	f000 808b 	beq.w	8033ebc <HAL_SPI_IRQHandler+0x1ec>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8033da6:	687b      	ldr	r3, [r7, #4]
 8033da8:	681b      	ldr	r3, [r3, #0]
 8033daa:	699a      	ldr	r2, [r3, #24]
 8033dac:	687b      	ldr	r3, [r7, #4]
 8033dae:	681b      	ldr	r3, [r3, #0]
 8033db0:	f042 0208 	orr.w	r2, r2, #8
 8033db4:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8033db6:	687b      	ldr	r3, [r7, #4]
 8033db8:	681b      	ldr	r3, [r3, #0]
 8033dba:	699a      	ldr	r2, [r3, #24]
 8033dbc:	687b      	ldr	r3, [r7, #4]
 8033dbe:	681b      	ldr	r3, [r3, #0]
 8033dc0:	f042 0210 	orr.w	r2, r2, #16
 8033dc4:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8033dc6:	687b      	ldr	r3, [r7, #4]
 8033dc8:	681b      	ldr	r3, [r3, #0]
 8033dca:	699a      	ldr	r2, [r3, #24]
 8033dcc:	687b      	ldr	r3, [r7, #4]
 8033dce:	681b      	ldr	r3, [r3, #0]
 8033dd0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8033dd4:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8033dd6:	687b      	ldr	r3, [r7, #4]
 8033dd8:	681b      	ldr	r3, [r3, #0]
 8033dda:	691a      	ldr	r2, [r3, #16]
 8033ddc:	687b      	ldr	r3, [r7, #4]
 8033dde:	681b      	ldr	r3, [r3, #0]
 8033de0:	f022 0208 	bic.w	r2, r2, #8
 8033de4:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8033de6:	687b      	ldr	r3, [r7, #4]
 8033de8:	681b      	ldr	r3, [r3, #0]
 8033dea:	689b      	ldr	r3, [r3, #8]
 8033dec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8033df0:	2b00      	cmp	r3, #0
 8033df2:	d13d      	bne.n	8033e70 <HAL_SPI_IRQHandler+0x1a0>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8033df4:	e036      	b.n	8033e64 <HAL_SPI_IRQHandler+0x194>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8033df6:	687b      	ldr	r3, [r7, #4]
 8033df8:	68db      	ldr	r3, [r3, #12]
 8033dfa:	2b0f      	cmp	r3, #15
 8033dfc:	d90b      	bls.n	8033e16 <HAL_SPI_IRQHandler+0x146>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8033dfe:	687b      	ldr	r3, [r7, #4]
 8033e00:	681a      	ldr	r2, [r3, #0]
 8033e02:	687b      	ldr	r3, [r7, #4]
 8033e04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8033e06:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8033e08:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8033e0a:	687b      	ldr	r3, [r7, #4]
 8033e0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8033e0e:	1d1a      	adds	r2, r3, #4
 8033e10:	687b      	ldr	r3, [r7, #4]
 8033e12:	665a      	str	r2, [r3, #100]	; 0x64
 8033e14:	e01d      	b.n	8033e52 <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8033e16:	687b      	ldr	r3, [r7, #4]
 8033e18:	68db      	ldr	r3, [r3, #12]
 8033e1a:	2b07      	cmp	r3, #7
 8033e1c:	d90b      	bls.n	8033e36 <HAL_SPI_IRQHandler+0x166>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8033e1e:	687b      	ldr	r3, [r7, #4]
 8033e20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8033e22:	68fa      	ldr	r2, [r7, #12]
 8033e24:	8812      	ldrh	r2, [r2, #0]
 8033e26:	b292      	uxth	r2, r2
 8033e28:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8033e2a:	687b      	ldr	r3, [r7, #4]
 8033e2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8033e2e:	1c9a      	adds	r2, r3, #2
 8033e30:	687b      	ldr	r3, [r7, #4]
 8033e32:	665a      	str	r2, [r3, #100]	; 0x64
 8033e34:	e00d      	b.n	8033e52 <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8033e36:	687b      	ldr	r3, [r7, #4]
 8033e38:	681b      	ldr	r3, [r3, #0]
 8033e3a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8033e3e:	687b      	ldr	r3, [r7, #4]
 8033e40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8033e42:	7812      	ldrb	r2, [r2, #0]
 8033e44:	b2d2      	uxtb	r2, r2
 8033e46:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8033e48:	687b      	ldr	r3, [r7, #4]
 8033e4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8033e4c:	1c5a      	adds	r2, r3, #1
 8033e4e:	687b      	ldr	r3, [r7, #4]
 8033e50:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 8033e52:	687b      	ldr	r3, [r7, #4]
 8033e54:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8033e58:	b29b      	uxth	r3, r3
 8033e5a:	3b01      	subs	r3, #1
 8033e5c:	b29a      	uxth	r2, r3
 8033e5e:	687b      	ldr	r3, [r7, #4]
 8033e60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 8033e64:	687b      	ldr	r3, [r7, #4]
 8033e66:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8033e6a:	b29b      	uxth	r3, r3
 8033e6c:	2b00      	cmp	r3, #0
 8033e6e:	d1c2      	bne.n	8033df6 <HAL_SPI_IRQHandler+0x126>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8033e70:	6878      	ldr	r0, [r7, #4]
 8033e72:	f000 fa1d 	bl	80342b0 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8033e76:	687b      	ldr	r3, [r7, #4]
 8033e78:	2201      	movs	r2, #1
 8033e7a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8033e7e:	687b      	ldr	r3, [r7, #4]
 8033e80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8033e84:	2b00      	cmp	r3, #0
 8033e86:	d003      	beq.n	8033e90 <HAL_SPI_IRQHandler+0x1c0>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8033e88:	6878      	ldr	r0, [r7, #4]
 8033e8a:	f000 f929 	bl	80340e0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8033e8e:	e0e3      	b.n	8034058 <HAL_SPI_IRQHandler+0x388>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8033e90:	7cfb      	ldrb	r3, [r7, #19]
 8033e92:	2b05      	cmp	r3, #5
 8033e94:	d103      	bne.n	8033e9e <HAL_SPI_IRQHandler+0x1ce>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8033e96:	6878      	ldr	r0, [r7, #4]
 8033e98:	f000 f8fa 	bl	8034090 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8033e9c:	e0d9      	b.n	8034052 <HAL_SPI_IRQHandler+0x382>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8033e9e:	7cfb      	ldrb	r3, [r7, #19]
 8033ea0:	2b04      	cmp	r3, #4
 8033ea2:	d103      	bne.n	8033eac <HAL_SPI_IRQHandler+0x1dc>
      HAL_SPI_RxCpltCallback(hspi);
 8033ea4:	6878      	ldr	r0, [r7, #4]
 8033ea6:	f000 f8e9 	bl	803407c <HAL_SPI_RxCpltCallback>
    return;
 8033eaa:	e0d2      	b.n	8034052 <HAL_SPI_IRQHandler+0x382>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8033eac:	7cfb      	ldrb	r3, [r7, #19]
 8033eae:	2b03      	cmp	r3, #3
 8033eb0:	f040 80cf 	bne.w	8034052 <HAL_SPI_IRQHandler+0x382>
      HAL_SPI_TxCpltCallback(hspi);
 8033eb4:	6878      	ldr	r0, [r7, #4]
 8033eb6:	f000 f8d7 	bl	8034068 <HAL_SPI_TxCpltCallback>
    return;
 8033eba:	e0ca      	b.n	8034052 <HAL_SPI_IRQHandler+0x382>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8033ebc:	69fb      	ldr	r3, [r7, #28]
 8033ebe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8033ec2:	2b00      	cmp	r3, #0
 8033ec4:	d00d      	beq.n	8033ee2 <HAL_SPI_IRQHandler+0x212>
 8033ec6:	6a3b      	ldr	r3, [r7, #32]
 8033ec8:	f003 0308 	and.w	r3, r3, #8
 8033ecc:	2b00      	cmp	r3, #0
 8033ece:	d008      	beq.n	8033ee2 <HAL_SPI_IRQHandler+0x212>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8033ed0:	687b      	ldr	r3, [r7, #4]
 8033ed2:	681b      	ldr	r3, [r3, #0]
 8033ed4:	699a      	ldr	r2, [r3, #24]
 8033ed6:	687b      	ldr	r3, [r7, #4]
 8033ed8:	681b      	ldr	r3, [r3, #0]
 8033eda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8033ede:	619a      	str	r2, [r3, #24]

    return;
 8033ee0:	e0ba      	b.n	8034058 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8033ee2:	69bb      	ldr	r3, [r7, #24]
 8033ee4:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8033ee8:	2b00      	cmp	r3, #0
 8033eea:	f000 80b5 	beq.w	8034058 <HAL_SPI_IRQHandler+0x388>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8033eee:	69bb      	ldr	r3, [r7, #24]
 8033ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8033ef4:	2b00      	cmp	r3, #0
 8033ef6:	d00f      	beq.n	8033f18 <HAL_SPI_IRQHandler+0x248>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8033ef8:	687b      	ldr	r3, [r7, #4]
 8033efa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8033efe:	f043 0204 	orr.w	r2, r3, #4
 8033f02:	687b      	ldr	r3, [r7, #4]
 8033f04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8033f08:	687b      	ldr	r3, [r7, #4]
 8033f0a:	681b      	ldr	r3, [r3, #0]
 8033f0c:	699a      	ldr	r2, [r3, #24]
 8033f0e:	687b      	ldr	r3, [r7, #4]
 8033f10:	681b      	ldr	r3, [r3, #0]
 8033f12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8033f16:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8033f18:	69bb      	ldr	r3, [r7, #24]
 8033f1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8033f1e:	2b00      	cmp	r3, #0
 8033f20:	d00f      	beq.n	8033f42 <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8033f22:	687b      	ldr	r3, [r7, #4]
 8033f24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8033f28:	f043 0201 	orr.w	r2, r3, #1
 8033f2c:	687b      	ldr	r3, [r7, #4]
 8033f2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8033f32:	687b      	ldr	r3, [r7, #4]
 8033f34:	681b      	ldr	r3, [r3, #0]
 8033f36:	699a      	ldr	r2, [r3, #24]
 8033f38:	687b      	ldr	r3, [r7, #4]
 8033f3a:	681b      	ldr	r3, [r3, #0]
 8033f3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8033f40:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8033f42:	69bb      	ldr	r3, [r7, #24]
 8033f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8033f48:	2b00      	cmp	r3, #0
 8033f4a:	d00f      	beq.n	8033f6c <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8033f4c:	687b      	ldr	r3, [r7, #4]
 8033f4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8033f52:	f043 0208 	orr.w	r2, r3, #8
 8033f56:	687b      	ldr	r3, [r7, #4]
 8033f58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8033f5c:	687b      	ldr	r3, [r7, #4]
 8033f5e:	681b      	ldr	r3, [r3, #0]
 8033f60:	699a      	ldr	r2, [r3, #24]
 8033f62:	687b      	ldr	r3, [r7, #4]
 8033f64:	681b      	ldr	r3, [r3, #0]
 8033f66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8033f6a:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8033f6c:	69bb      	ldr	r3, [r7, #24]
 8033f6e:	f003 0320 	and.w	r3, r3, #32
 8033f72:	2b00      	cmp	r3, #0
 8033f74:	d00f      	beq.n	8033f96 <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8033f76:	687b      	ldr	r3, [r7, #4]
 8033f78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8033f7c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8033f80:	687b      	ldr	r3, [r7, #4]
 8033f82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8033f86:	687b      	ldr	r3, [r7, #4]
 8033f88:	681b      	ldr	r3, [r3, #0]
 8033f8a:	699a      	ldr	r2, [r3, #24]
 8033f8c:	687b      	ldr	r3, [r7, #4]
 8033f8e:	681b      	ldr	r3, [r3, #0]
 8033f90:	f042 0220 	orr.w	r2, r2, #32
 8033f94:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8033f96:	687b      	ldr	r3, [r7, #4]
 8033f98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8033f9c:	2b00      	cmp	r3, #0
 8033f9e:	d05a      	beq.n	8034056 <HAL_SPI_IRQHandler+0x386>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8033fa0:	687b      	ldr	r3, [r7, #4]
 8033fa2:	681b      	ldr	r3, [r3, #0]
 8033fa4:	681a      	ldr	r2, [r3, #0]
 8033fa6:	687b      	ldr	r3, [r7, #4]
 8033fa8:	681b      	ldr	r3, [r3, #0]
 8033faa:	f022 0201 	bic.w	r2, r2, #1
 8033fae:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8033fb0:	687b      	ldr	r3, [r7, #4]
 8033fb2:	681b      	ldr	r3, [r3, #0]
 8033fb4:	6919      	ldr	r1, [r3, #16]
 8033fb6:	687b      	ldr	r3, [r7, #4]
 8033fb8:	681a      	ldr	r2, [r3, #0]
 8033fba:	4b29      	ldr	r3, [pc, #164]	; (8034060 <HAL_SPI_IRQHandler+0x390>)
 8033fbc:	400b      	ands	r3, r1
 8033fbe:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8033fc0:	697b      	ldr	r3, [r7, #20]
 8033fc2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8033fc6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8033fca:	d138      	bne.n	803403e <HAL_SPI_IRQHandler+0x36e>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8033fcc:	687b      	ldr	r3, [r7, #4]
 8033fce:	681b      	ldr	r3, [r3, #0]
 8033fd0:	689a      	ldr	r2, [r3, #8]
 8033fd2:	687b      	ldr	r3, [r7, #4]
 8033fd4:	681b      	ldr	r3, [r3, #0]
 8033fd6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8033fda:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8033fdc:	687b      	ldr	r3, [r7, #4]
 8033fde:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8033fe0:	2b00      	cmp	r3, #0
 8033fe2:	d013      	beq.n	803400c <HAL_SPI_IRQHandler+0x33c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8033fe4:	687b      	ldr	r3, [r7, #4]
 8033fe6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8033fe8:	4a1e      	ldr	r2, [pc, #120]	; (8034064 <HAL_SPI_IRQHandler+0x394>)
 8033fea:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8033fec:	687b      	ldr	r3, [r7, #4]
 8033fee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8033ff0:	4618      	mov	r0, r3
 8033ff2:	f7f8 fbc1 	bl	802c778 <HAL_DMA_Abort_IT>
 8033ff6:	4603      	mov	r3, r0
 8033ff8:	2b00      	cmp	r3, #0
 8033ffa:	d007      	beq.n	803400c <HAL_SPI_IRQHandler+0x33c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8033ffc:	687b      	ldr	r3, [r7, #4]
 8033ffe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8034002:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8034006:	687b      	ldr	r3, [r7, #4]
 8034008:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 803400c:	687b      	ldr	r3, [r7, #4]
 803400e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8034010:	2b00      	cmp	r3, #0
 8034012:	d020      	beq.n	8034056 <HAL_SPI_IRQHandler+0x386>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8034014:	687b      	ldr	r3, [r7, #4]
 8034016:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8034018:	4a12      	ldr	r2, [pc, #72]	; (8034064 <HAL_SPI_IRQHandler+0x394>)
 803401a:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 803401c:	687b      	ldr	r3, [r7, #4]
 803401e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8034020:	4618      	mov	r0, r3
 8034022:	f7f8 fba9 	bl	802c778 <HAL_DMA_Abort_IT>
 8034026:	4603      	mov	r3, r0
 8034028:	2b00      	cmp	r3, #0
 803402a:	d014      	beq.n	8034056 <HAL_SPI_IRQHandler+0x386>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 803402c:	687b      	ldr	r3, [r7, #4]
 803402e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8034032:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8034036:	687b      	ldr	r3, [r7, #4]
 8034038:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 803403c:	e00b      	b.n	8034056 <HAL_SPI_IRQHandler+0x386>
        hspi->State = HAL_SPI_STATE_READY;
 803403e:	687b      	ldr	r3, [r7, #4]
 8034040:	2201      	movs	r2, #1
 8034042:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8034046:	6878      	ldr	r0, [r7, #4]
 8034048:	f000 f84a 	bl	80340e0 <HAL_SPI_ErrorCallback>
    return;
 803404c:	e003      	b.n	8034056 <HAL_SPI_IRQHandler+0x386>
    return;
 803404e:	bf00      	nop
 8034050:	e002      	b.n	8034058 <HAL_SPI_IRQHandler+0x388>
    return;
 8034052:	bf00      	nop
 8034054:	e000      	b.n	8034058 <HAL_SPI_IRQHandler+0x388>
    return;
 8034056:	bf00      	nop
  }
}
 8034058:	3728      	adds	r7, #40	; 0x28
 803405a:	46bd      	mov	sp, r7
 803405c:	bd80      	pop	{r7, pc}
 803405e:	bf00      	nop
 8034060:	fffffc94 	.word	0xfffffc94
 8034064:	0803427d 	.word	0x0803427d

08034068 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8034068:	b480      	push	{r7}
 803406a:	b083      	sub	sp, #12
 803406c:	af00      	add	r7, sp, #0
 803406e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8034070:	bf00      	nop
 8034072:	370c      	adds	r7, #12
 8034074:	46bd      	mov	sp, r7
 8034076:	f85d 7b04 	ldr.w	r7, [sp], #4
 803407a:	4770      	bx	lr

0803407c <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 803407c:	b480      	push	{r7}
 803407e:	b083      	sub	sp, #12
 8034080:	af00      	add	r7, sp, #0
 8034082:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8034084:	bf00      	nop
 8034086:	370c      	adds	r7, #12
 8034088:	46bd      	mov	sp, r7
 803408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803408e:	4770      	bx	lr

08034090 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8034090:	b480      	push	{r7}
 8034092:	b083      	sub	sp, #12
 8034094:	af00      	add	r7, sp, #0
 8034096:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8034098:	bf00      	nop
 803409a:	370c      	adds	r7, #12
 803409c:	46bd      	mov	sp, r7
 803409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80340a2:	4770      	bx	lr

080340a4 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80340a4:	b480      	push	{r7}
 80340a6:	b083      	sub	sp, #12
 80340a8:	af00      	add	r7, sp, #0
 80340aa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80340ac:	bf00      	nop
 80340ae:	370c      	adds	r7, #12
 80340b0:	46bd      	mov	sp, r7
 80340b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80340b6:	4770      	bx	lr

080340b8 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80340b8:	b480      	push	{r7}
 80340ba:	b083      	sub	sp, #12
 80340bc:	af00      	add	r7, sp, #0
 80340be:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80340c0:	bf00      	nop
 80340c2:	370c      	adds	r7, #12
 80340c4:	46bd      	mov	sp, r7
 80340c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80340ca:	4770      	bx	lr

080340cc <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80340cc:	b480      	push	{r7}
 80340ce:	b083      	sub	sp, #12
 80340d0:	af00      	add	r7, sp, #0
 80340d2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80340d4:	bf00      	nop
 80340d6:	370c      	adds	r7, #12
 80340d8:	46bd      	mov	sp, r7
 80340da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80340de:	4770      	bx	lr

080340e0 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80340e0:	b480      	push	{r7}
 80340e2:	b083      	sub	sp, #12
 80340e4:	af00      	add	r7, sp, #0
 80340e6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80340e8:	bf00      	nop
 80340ea:	370c      	adds	r7, #12
 80340ec:	46bd      	mov	sp, r7
 80340ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80340f2:	4770      	bx	lr

080340f4 <HAL_SPI_GetState>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80340f4:	b480      	push	{r7}
 80340f6:	b083      	sub	sp, #12
 80340f8:	af00      	add	r7, sp, #0
 80340fa:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80340fc:	687b      	ldr	r3, [r7, #4]
 80340fe:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8034102:	b2db      	uxtb	r3, r3
}
 8034104:	4618      	mov	r0, r3
 8034106:	370c      	adds	r7, #12
 8034108:	46bd      	mov	sp, r7
 803410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803410e:	4770      	bx	lr

08034110 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8034110:	b580      	push	{r7, lr}
 8034112:	b084      	sub	sp, #16
 8034114:	af00      	add	r7, sp, #0
 8034116:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8034118:	687b      	ldr	r3, [r7, #4]
 803411a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 803411c:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 803411e:	68fb      	ldr	r3, [r7, #12]
 8034120:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8034124:	b2db      	uxtb	r3, r3
 8034126:	2b07      	cmp	r3, #7
 8034128:	d011      	beq.n	803414e <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 803412a:	68fb      	ldr	r3, [r7, #12]
 803412c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 803412e:	69db      	ldr	r3, [r3, #28]
 8034130:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8034134:	d103      	bne.n	803413e <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 8034136:	68f8      	ldr	r0, [r7, #12]
 8034138:	f7ff ff96 	bl	8034068 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 803413c:	e007      	b.n	803414e <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 803413e:	68fb      	ldr	r3, [r7, #12]
 8034140:	681b      	ldr	r3, [r3, #0]
 8034142:	691a      	ldr	r2, [r3, #16]
 8034144:	68fb      	ldr	r3, [r7, #12]
 8034146:	681b      	ldr	r3, [r3, #0]
 8034148:	f042 0208 	orr.w	r2, r2, #8
 803414c:	611a      	str	r2, [r3, #16]
}
 803414e:	bf00      	nop
 8034150:	3710      	adds	r7, #16
 8034152:	46bd      	mov	sp, r7
 8034154:	bd80      	pop	{r7, pc}

08034156 <SPI_DMAReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8034156:	b580      	push	{r7, lr}
 8034158:	b084      	sub	sp, #16
 803415a:	af00      	add	r7, sp, #0
 803415c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 803415e:	687b      	ldr	r3, [r7, #4]
 8034160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8034162:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8034164:	68fb      	ldr	r3, [r7, #12]
 8034166:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 803416a:	b2db      	uxtb	r3, r3
 803416c:	2b07      	cmp	r3, #7
 803416e:	d011      	beq.n	8034194 <SPI_DMAReceiveCplt+0x3e>
  {
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 8034170:	68fb      	ldr	r3, [r7, #12]
 8034172:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8034174:	69db      	ldr	r3, [r3, #28]
 8034176:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 803417a:	d103      	bne.n	8034184 <SPI_DMAReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 803417c:	68f8      	ldr	r0, [r7, #12]
 803417e:	f7ff ff7d 	bl	803407c <HAL_SPI_RxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8034182:	e007      	b.n	8034194 <SPI_DMAReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8034184:	68fb      	ldr	r3, [r7, #12]
 8034186:	681b      	ldr	r3, [r3, #0]
 8034188:	691a      	ldr	r2, [r3, #16]
 803418a:	68fb      	ldr	r3, [r7, #12]
 803418c:	681b      	ldr	r3, [r3, #0]
 803418e:	f042 0208 	orr.w	r2, r2, #8
 8034192:	611a      	str	r2, [r3, #16]
}
 8034194:	bf00      	nop
 8034196:	3710      	adds	r7, #16
 8034198:	46bd      	mov	sp, r7
 803419a:	bd80      	pop	{r7, pc}

0803419c <SPI_DMATransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 803419c:	b580      	push	{r7, lr}
 803419e:	b084      	sub	sp, #16
 80341a0:	af00      	add	r7, sp, #0
 80341a2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80341a4:	687b      	ldr	r3, [r7, #4]
 80341a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80341a8:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 80341aa:	68fb      	ldr	r3, [r7, #12]
 80341ac:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80341b0:	b2db      	uxtb	r3, r3
 80341b2:	2b07      	cmp	r3, #7
 80341b4:	d011      	beq.n	80341da <SPI_DMATransmitReceiveCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 80341b6:	68fb      	ldr	r3, [r7, #12]
 80341b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80341ba:	69db      	ldr	r3, [r3, #28]
 80341bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80341c0:	d103      	bne.n	80341ca <SPI_DMATransmitReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxRxCpltCallback(hspi);
#else
      HAL_SPI_TxRxCpltCallback(hspi);
 80341c2:	68f8      	ldr	r0, [r7, #12]
 80341c4:	f7ff ff64 	bl	8034090 <HAL_SPI_TxRxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 80341c8:	e007      	b.n	80341da <SPI_DMATransmitReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 80341ca:	68fb      	ldr	r3, [r7, #12]
 80341cc:	681b      	ldr	r3, [r3, #0]
 80341ce:	691a      	ldr	r2, [r3, #16]
 80341d0:	68fb      	ldr	r3, [r7, #12]
 80341d2:	681b      	ldr	r3, [r3, #0]
 80341d4:	f042 0208 	orr.w	r2, r2, #8
 80341d8:	611a      	str	r2, [r3, #16]
}
 80341da:	bf00      	nop
 80341dc:	3710      	adds	r7, #16
 80341de:	46bd      	mov	sp, r7
 80341e0:	bd80      	pop	{r7, pc}

080341e2 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80341e2:	b580      	push	{r7, lr}
 80341e4:	b084      	sub	sp, #16
 80341e6:	af00      	add	r7, sp, #0
 80341e8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80341ea:	687b      	ldr	r3, [r7, #4]
 80341ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80341ee:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80341f0:	68f8      	ldr	r0, [r7, #12]
 80341f2:	f7ff ff57 	bl	80340a4 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80341f6:	bf00      	nop
 80341f8:	3710      	adds	r7, #16
 80341fa:	46bd      	mov	sp, r7
 80341fc:	bd80      	pop	{r7, pc}

080341fe <SPI_DMAHalfReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80341fe:	b580      	push	{r7, lr}
 8034200:	b084      	sub	sp, #16
 8034202:	af00      	add	r7, sp, #0
 8034204:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8034206:	687b      	ldr	r3, [r7, #4]
 8034208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 803420a:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 803420c:	68f8      	ldr	r0, [r7, #12]
 803420e:	f7ff ff53 	bl	80340b8 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8034212:	bf00      	nop
 8034214:	3710      	adds	r7, #16
 8034216:	46bd      	mov	sp, r7
 8034218:	bd80      	pop	{r7, pc}

0803421a <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 803421a:	b580      	push	{r7, lr}
 803421c:	b084      	sub	sp, #16
 803421e:	af00      	add	r7, sp, #0
 8034220:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8034222:	687b      	ldr	r3, [r7, #4]
 8034224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8034226:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8034228:	68f8      	ldr	r0, [r7, #12]
 803422a:	f7ff ff4f 	bl	80340cc <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 803422e:	bf00      	nop
 8034230:	3710      	adds	r7, #16
 8034232:	46bd      	mov	sp, r7
 8034234:	bd80      	pop	{r7, pc}

08034236 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8034236:	b580      	push	{r7, lr}
 8034238:	b084      	sub	sp, #16
 803423a:	af00      	add	r7, sp, #0
 803423c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 803423e:	687b      	ldr	r3, [r7, #4]
 8034240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8034242:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8034244:	6878      	ldr	r0, [r7, #4]
 8034246:	f7f9 fc15 	bl	802da74 <HAL_DMA_GetError>
 803424a:	4603      	mov	r3, r0
 803424c:	2b02      	cmp	r3, #2
 803424e:	d011      	beq.n	8034274 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 8034250:	68f8      	ldr	r0, [r7, #12]
 8034252:	f000 f82d 	bl	80342b0 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8034256:	68fb      	ldr	r3, [r7, #12]
 8034258:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 803425c:	f043 0210 	orr.w	r2, r3, #16
 8034260:	68fb      	ldr	r3, [r7, #12]
 8034262:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8034266:	68fb      	ldr	r3, [r7, #12]
 8034268:	2201      	movs	r2, #1
 803426a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 803426e:	68f8      	ldr	r0, [r7, #12]
 8034270:	f7ff ff36 	bl	80340e0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8034274:	bf00      	nop
 8034276:	3710      	adds	r7, #16
 8034278:	46bd      	mov	sp, r7
 803427a:	bd80      	pop	{r7, pc}

0803427c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 803427c:	b580      	push	{r7, lr}
 803427e:	b084      	sub	sp, #16
 8034280:	af00      	add	r7, sp, #0
 8034282:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8034284:	687b      	ldr	r3, [r7, #4]
 8034286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8034288:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 803428a:	68fb      	ldr	r3, [r7, #12]
 803428c:	2200      	movs	r2, #0
 803428e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8034292:	68fb      	ldr	r3, [r7, #12]
 8034294:	2200      	movs	r2, #0
 8034296:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 803429a:	68fb      	ldr	r3, [r7, #12]
 803429c:	2201      	movs	r2, #1
 803429e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80342a2:	68f8      	ldr	r0, [r7, #12]
 80342a4:	f7ff ff1c 	bl	80340e0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80342a8:	bf00      	nop
 80342aa:	3710      	adds	r7, #16
 80342ac:	46bd      	mov	sp, r7
 80342ae:	bd80      	pop	{r7, pc}

080342b0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80342b0:	b480      	push	{r7}
 80342b2:	b085      	sub	sp, #20
 80342b4:	af00      	add	r7, sp, #0
 80342b6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80342b8:	687b      	ldr	r3, [r7, #4]
 80342ba:	681b      	ldr	r3, [r3, #0]
 80342bc:	695b      	ldr	r3, [r3, #20]
 80342be:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80342c0:	687b      	ldr	r3, [r7, #4]
 80342c2:	681b      	ldr	r3, [r3, #0]
 80342c4:	699a      	ldr	r2, [r3, #24]
 80342c6:	687b      	ldr	r3, [r7, #4]
 80342c8:	681b      	ldr	r3, [r3, #0]
 80342ca:	f042 0208 	orr.w	r2, r2, #8
 80342ce:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80342d0:	687b      	ldr	r3, [r7, #4]
 80342d2:	681b      	ldr	r3, [r3, #0]
 80342d4:	699a      	ldr	r2, [r3, #24]
 80342d6:	687b      	ldr	r3, [r7, #4]
 80342d8:	681b      	ldr	r3, [r3, #0]
 80342da:	f042 0210 	orr.w	r2, r2, #16
 80342de:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80342e0:	687b      	ldr	r3, [r7, #4]
 80342e2:	681b      	ldr	r3, [r3, #0]
 80342e4:	681a      	ldr	r2, [r3, #0]
 80342e6:	687b      	ldr	r3, [r7, #4]
 80342e8:	681b      	ldr	r3, [r3, #0]
 80342ea:	f022 0201 	bic.w	r2, r2, #1
 80342ee:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80342f0:	687b      	ldr	r3, [r7, #4]
 80342f2:	681b      	ldr	r3, [r3, #0]
 80342f4:	6919      	ldr	r1, [r3, #16]
 80342f6:	687b      	ldr	r3, [r7, #4]
 80342f8:	681a      	ldr	r2, [r3, #0]
 80342fa:	4b3c      	ldr	r3, [pc, #240]	; (80343ec <SPI_CloseTransfer+0x13c>)
 80342fc:	400b      	ands	r3, r1
 80342fe:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8034300:	687b      	ldr	r3, [r7, #4]
 8034302:	681b      	ldr	r3, [r3, #0]
 8034304:	689a      	ldr	r2, [r3, #8]
 8034306:	687b      	ldr	r3, [r7, #4]
 8034308:	681b      	ldr	r3, [r3, #0]
 803430a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 803430e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8034310:	687b      	ldr	r3, [r7, #4]
 8034312:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8034316:	b2db      	uxtb	r3, r3
 8034318:	2b04      	cmp	r3, #4
 803431a:	d014      	beq.n	8034346 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 803431c:	68fb      	ldr	r3, [r7, #12]
 803431e:	f003 0320 	and.w	r3, r3, #32
 8034322:	2b00      	cmp	r3, #0
 8034324:	d00f      	beq.n	8034346 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8034326:	687b      	ldr	r3, [r7, #4]
 8034328:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 803432c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8034330:	687b      	ldr	r3, [r7, #4]
 8034332:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8034336:	687b      	ldr	r3, [r7, #4]
 8034338:	681b      	ldr	r3, [r3, #0]
 803433a:	699a      	ldr	r2, [r3, #24]
 803433c:	687b      	ldr	r3, [r7, #4]
 803433e:	681b      	ldr	r3, [r3, #0]
 8034340:	f042 0220 	orr.w	r2, r2, #32
 8034344:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8034346:	687b      	ldr	r3, [r7, #4]
 8034348:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 803434c:	b2db      	uxtb	r3, r3
 803434e:	2b03      	cmp	r3, #3
 8034350:	d014      	beq.n	803437c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8034352:	68fb      	ldr	r3, [r7, #12]
 8034354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8034358:	2b00      	cmp	r3, #0
 803435a:	d00f      	beq.n	803437c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 803435c:	687b      	ldr	r3, [r7, #4]
 803435e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8034362:	f043 0204 	orr.w	r2, r3, #4
 8034366:	687b      	ldr	r3, [r7, #4]
 8034368:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 803436c:	687b      	ldr	r3, [r7, #4]
 803436e:	681b      	ldr	r3, [r3, #0]
 8034370:	699a      	ldr	r2, [r3, #24]
 8034372:	687b      	ldr	r3, [r7, #4]
 8034374:	681b      	ldr	r3, [r3, #0]
 8034376:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 803437a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 803437c:	68fb      	ldr	r3, [r7, #12]
 803437e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8034382:	2b00      	cmp	r3, #0
 8034384:	d00f      	beq.n	80343a6 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8034386:	687b      	ldr	r3, [r7, #4]
 8034388:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 803438c:	f043 0201 	orr.w	r2, r3, #1
 8034390:	687b      	ldr	r3, [r7, #4]
 8034392:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8034396:	687b      	ldr	r3, [r7, #4]
 8034398:	681b      	ldr	r3, [r3, #0]
 803439a:	699a      	ldr	r2, [r3, #24]
 803439c:	687b      	ldr	r3, [r7, #4]
 803439e:	681b      	ldr	r3, [r3, #0]
 80343a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80343a4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80343a6:	68fb      	ldr	r3, [r7, #12]
 80343a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80343ac:	2b00      	cmp	r3, #0
 80343ae:	d00f      	beq.n	80343d0 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80343b0:	687b      	ldr	r3, [r7, #4]
 80343b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80343b6:	f043 0208 	orr.w	r2, r3, #8
 80343ba:	687b      	ldr	r3, [r7, #4]
 80343bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80343c0:	687b      	ldr	r3, [r7, #4]
 80343c2:	681b      	ldr	r3, [r3, #0]
 80343c4:	699a      	ldr	r2, [r3, #24]
 80343c6:	687b      	ldr	r3, [r7, #4]
 80343c8:	681b      	ldr	r3, [r3, #0]
 80343ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80343ce:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80343d0:	687b      	ldr	r3, [r7, #4]
 80343d2:	2200      	movs	r2, #0
 80343d4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80343d8:	687b      	ldr	r3, [r7, #4]
 80343da:	2200      	movs	r2, #0
 80343dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 80343e0:	bf00      	nop
 80343e2:	3714      	adds	r7, #20
 80343e4:	46bd      	mov	sp, r7
 80343e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80343ea:	4770      	bx	lr
 80343ec:	fffffc90 	.word	0xfffffc90

080343f0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80343f0:	b480      	push	{r7}
 80343f2:	b085      	sub	sp, #20
 80343f4:	af00      	add	r7, sp, #0
 80343f6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80343f8:	687b      	ldr	r3, [r7, #4]
 80343fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80343fc:	095b      	lsrs	r3, r3, #5
 80343fe:	3301      	adds	r3, #1
 8034400:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8034402:	687b      	ldr	r3, [r7, #4]
 8034404:	68db      	ldr	r3, [r3, #12]
 8034406:	3301      	adds	r3, #1
 8034408:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 803440a:	68bb      	ldr	r3, [r7, #8]
 803440c:	3307      	adds	r3, #7
 803440e:	08db      	lsrs	r3, r3, #3
 8034410:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8034412:	68bb      	ldr	r3, [r7, #8]
 8034414:	68fa      	ldr	r2, [r7, #12]
 8034416:	fb02 f303 	mul.w	r3, r2, r3
}
 803441a:	4618      	mov	r0, r3
 803441c:	3714      	adds	r7, #20
 803441e:	46bd      	mov	sp, r7
 8034420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034424:	4770      	bx	lr

08034426 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8034426:	b580      	push	{r7, lr}
 8034428:	b082      	sub	sp, #8
 803442a:	af00      	add	r7, sp, #0
 803442c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 803442e:	687b      	ldr	r3, [r7, #4]
 8034430:	2b00      	cmp	r3, #0
 8034432:	d101      	bne.n	8034438 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8034434:	2301      	movs	r3, #1
 8034436:	e049      	b.n	80344cc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8034438:	687b      	ldr	r3, [r7, #4]
 803443a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 803443e:	b2db      	uxtb	r3, r3
 8034440:	2b00      	cmp	r3, #0
 8034442:	d106      	bne.n	8034452 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8034444:	687b      	ldr	r3, [r7, #4]
 8034446:	2200      	movs	r2, #0
 8034448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 803444c:	6878      	ldr	r0, [r7, #4]
 803444e:	f7f5 ff5b 	bl	802a308 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8034452:	687b      	ldr	r3, [r7, #4]
 8034454:	2202      	movs	r2, #2
 8034456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 803445a:	687b      	ldr	r3, [r7, #4]
 803445c:	681a      	ldr	r2, [r3, #0]
 803445e:	687b      	ldr	r3, [r7, #4]
 8034460:	3304      	adds	r3, #4
 8034462:	4619      	mov	r1, r3
 8034464:	4610      	mov	r0, r2
 8034466:	f000 faed 	bl	8034a44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 803446a:	687b      	ldr	r3, [r7, #4]
 803446c:	2201      	movs	r2, #1
 803446e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8034472:	687b      	ldr	r3, [r7, #4]
 8034474:	2201      	movs	r2, #1
 8034476:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 803447a:	687b      	ldr	r3, [r7, #4]
 803447c:	2201      	movs	r2, #1
 803447e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8034482:	687b      	ldr	r3, [r7, #4]
 8034484:	2201      	movs	r2, #1
 8034486:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 803448a:	687b      	ldr	r3, [r7, #4]
 803448c:	2201      	movs	r2, #1
 803448e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8034492:	687b      	ldr	r3, [r7, #4]
 8034494:	2201      	movs	r2, #1
 8034496:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 803449a:	687b      	ldr	r3, [r7, #4]
 803449c:	2201      	movs	r2, #1
 803449e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80344a2:	687b      	ldr	r3, [r7, #4]
 80344a4:	2201      	movs	r2, #1
 80344a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80344aa:	687b      	ldr	r3, [r7, #4]
 80344ac:	2201      	movs	r2, #1
 80344ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80344b2:	687b      	ldr	r3, [r7, #4]
 80344b4:	2201      	movs	r2, #1
 80344b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80344ba:	687b      	ldr	r3, [r7, #4]
 80344bc:	2201      	movs	r2, #1
 80344be:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80344c2:	687b      	ldr	r3, [r7, #4]
 80344c4:	2201      	movs	r2, #1
 80344c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80344ca:	2300      	movs	r3, #0
}
 80344cc:	4618      	mov	r0, r3
 80344ce:	3708      	adds	r7, #8
 80344d0:	46bd      	mov	sp, r7
 80344d2:	bd80      	pop	{r7, pc}

080344d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80344d4:	b480      	push	{r7}
 80344d6:	b085      	sub	sp, #20
 80344d8:	af00      	add	r7, sp, #0
 80344da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80344dc:	687b      	ldr	r3, [r7, #4]
 80344de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80344e2:	b2db      	uxtb	r3, r3
 80344e4:	2b01      	cmp	r3, #1
 80344e6:	d001      	beq.n	80344ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80344e8:	2301      	movs	r3, #1
 80344ea:	e054      	b.n	8034596 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80344ec:	687b      	ldr	r3, [r7, #4]
 80344ee:	2202      	movs	r2, #2
 80344f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80344f4:	687b      	ldr	r3, [r7, #4]
 80344f6:	681b      	ldr	r3, [r3, #0]
 80344f8:	68da      	ldr	r2, [r3, #12]
 80344fa:	687b      	ldr	r3, [r7, #4]
 80344fc:	681b      	ldr	r3, [r3, #0]
 80344fe:	f042 0201 	orr.w	r2, r2, #1
 8034502:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8034504:	687b      	ldr	r3, [r7, #4]
 8034506:	681b      	ldr	r3, [r3, #0]
 8034508:	4a26      	ldr	r2, [pc, #152]	; (80345a4 <HAL_TIM_Base_Start_IT+0xd0>)
 803450a:	4293      	cmp	r3, r2
 803450c:	d022      	beq.n	8034554 <HAL_TIM_Base_Start_IT+0x80>
 803450e:	687b      	ldr	r3, [r7, #4]
 8034510:	681b      	ldr	r3, [r3, #0]
 8034512:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8034516:	d01d      	beq.n	8034554 <HAL_TIM_Base_Start_IT+0x80>
 8034518:	687b      	ldr	r3, [r7, #4]
 803451a:	681b      	ldr	r3, [r3, #0]
 803451c:	4a22      	ldr	r2, [pc, #136]	; (80345a8 <HAL_TIM_Base_Start_IT+0xd4>)
 803451e:	4293      	cmp	r3, r2
 8034520:	d018      	beq.n	8034554 <HAL_TIM_Base_Start_IT+0x80>
 8034522:	687b      	ldr	r3, [r7, #4]
 8034524:	681b      	ldr	r3, [r3, #0]
 8034526:	4a21      	ldr	r2, [pc, #132]	; (80345ac <HAL_TIM_Base_Start_IT+0xd8>)
 8034528:	4293      	cmp	r3, r2
 803452a:	d013      	beq.n	8034554 <HAL_TIM_Base_Start_IT+0x80>
 803452c:	687b      	ldr	r3, [r7, #4]
 803452e:	681b      	ldr	r3, [r3, #0]
 8034530:	4a1f      	ldr	r2, [pc, #124]	; (80345b0 <HAL_TIM_Base_Start_IT+0xdc>)
 8034532:	4293      	cmp	r3, r2
 8034534:	d00e      	beq.n	8034554 <HAL_TIM_Base_Start_IT+0x80>
 8034536:	687b      	ldr	r3, [r7, #4]
 8034538:	681b      	ldr	r3, [r3, #0]
 803453a:	4a1e      	ldr	r2, [pc, #120]	; (80345b4 <HAL_TIM_Base_Start_IT+0xe0>)
 803453c:	4293      	cmp	r3, r2
 803453e:	d009      	beq.n	8034554 <HAL_TIM_Base_Start_IT+0x80>
 8034540:	687b      	ldr	r3, [r7, #4]
 8034542:	681b      	ldr	r3, [r3, #0]
 8034544:	4a1c      	ldr	r2, [pc, #112]	; (80345b8 <HAL_TIM_Base_Start_IT+0xe4>)
 8034546:	4293      	cmp	r3, r2
 8034548:	d004      	beq.n	8034554 <HAL_TIM_Base_Start_IT+0x80>
 803454a:	687b      	ldr	r3, [r7, #4]
 803454c:	681b      	ldr	r3, [r3, #0]
 803454e:	4a1b      	ldr	r2, [pc, #108]	; (80345bc <HAL_TIM_Base_Start_IT+0xe8>)
 8034550:	4293      	cmp	r3, r2
 8034552:	d115      	bne.n	8034580 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8034554:	687b      	ldr	r3, [r7, #4]
 8034556:	681b      	ldr	r3, [r3, #0]
 8034558:	689a      	ldr	r2, [r3, #8]
 803455a:	4b19      	ldr	r3, [pc, #100]	; (80345c0 <HAL_TIM_Base_Start_IT+0xec>)
 803455c:	4013      	ands	r3, r2
 803455e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8034560:	68fb      	ldr	r3, [r7, #12]
 8034562:	2b06      	cmp	r3, #6
 8034564:	d015      	beq.n	8034592 <HAL_TIM_Base_Start_IT+0xbe>
 8034566:	68fb      	ldr	r3, [r7, #12]
 8034568:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 803456c:	d011      	beq.n	8034592 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 803456e:	687b      	ldr	r3, [r7, #4]
 8034570:	681b      	ldr	r3, [r3, #0]
 8034572:	681a      	ldr	r2, [r3, #0]
 8034574:	687b      	ldr	r3, [r7, #4]
 8034576:	681b      	ldr	r3, [r3, #0]
 8034578:	f042 0201 	orr.w	r2, r2, #1
 803457c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 803457e:	e008      	b.n	8034592 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8034580:	687b      	ldr	r3, [r7, #4]
 8034582:	681b      	ldr	r3, [r3, #0]
 8034584:	681a      	ldr	r2, [r3, #0]
 8034586:	687b      	ldr	r3, [r7, #4]
 8034588:	681b      	ldr	r3, [r3, #0]
 803458a:	f042 0201 	orr.w	r2, r2, #1
 803458e:	601a      	str	r2, [r3, #0]
 8034590:	e000      	b.n	8034594 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8034592:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8034594:	2300      	movs	r3, #0
}
 8034596:	4618      	mov	r0, r3
 8034598:	3714      	adds	r7, #20
 803459a:	46bd      	mov	sp, r7
 803459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80345a0:	4770      	bx	lr
 80345a2:	bf00      	nop
 80345a4:	40010000 	.word	0x40010000
 80345a8:	40000400 	.word	0x40000400
 80345ac:	40000800 	.word	0x40000800
 80345b0:	40000c00 	.word	0x40000c00
 80345b4:	40010400 	.word	0x40010400
 80345b8:	40001800 	.word	0x40001800
 80345bc:	40014000 	.word	0x40014000
 80345c0:	00010007 	.word	0x00010007

080345c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80345c4:	b580      	push	{r7, lr}
 80345c6:	b082      	sub	sp, #8
 80345c8:	af00      	add	r7, sp, #0
 80345ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80345cc:	687b      	ldr	r3, [r7, #4]
 80345ce:	681b      	ldr	r3, [r3, #0]
 80345d0:	691b      	ldr	r3, [r3, #16]
 80345d2:	f003 0302 	and.w	r3, r3, #2
 80345d6:	2b02      	cmp	r3, #2
 80345d8:	d122      	bne.n	8034620 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80345da:	687b      	ldr	r3, [r7, #4]
 80345dc:	681b      	ldr	r3, [r3, #0]
 80345de:	68db      	ldr	r3, [r3, #12]
 80345e0:	f003 0302 	and.w	r3, r3, #2
 80345e4:	2b02      	cmp	r3, #2
 80345e6:	d11b      	bne.n	8034620 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80345e8:	687b      	ldr	r3, [r7, #4]
 80345ea:	681b      	ldr	r3, [r3, #0]
 80345ec:	f06f 0202 	mvn.w	r2, #2
 80345f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80345f2:	687b      	ldr	r3, [r7, #4]
 80345f4:	2201      	movs	r2, #1
 80345f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80345f8:	687b      	ldr	r3, [r7, #4]
 80345fa:	681b      	ldr	r3, [r3, #0]
 80345fc:	699b      	ldr	r3, [r3, #24]
 80345fe:	f003 0303 	and.w	r3, r3, #3
 8034602:	2b00      	cmp	r3, #0
 8034604:	d003      	beq.n	803460e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8034606:	6878      	ldr	r0, [r7, #4]
 8034608:	f000 f9fe 	bl	8034a08 <HAL_TIM_IC_CaptureCallback>
 803460c:	e005      	b.n	803461a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 803460e:	6878      	ldr	r0, [r7, #4]
 8034610:	f000 f9f0 	bl	80349f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8034614:	6878      	ldr	r0, [r7, #4]
 8034616:	f000 fa01 	bl	8034a1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 803461a:	687b      	ldr	r3, [r7, #4]
 803461c:	2200      	movs	r2, #0
 803461e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8034620:	687b      	ldr	r3, [r7, #4]
 8034622:	681b      	ldr	r3, [r3, #0]
 8034624:	691b      	ldr	r3, [r3, #16]
 8034626:	f003 0304 	and.w	r3, r3, #4
 803462a:	2b04      	cmp	r3, #4
 803462c:	d122      	bne.n	8034674 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 803462e:	687b      	ldr	r3, [r7, #4]
 8034630:	681b      	ldr	r3, [r3, #0]
 8034632:	68db      	ldr	r3, [r3, #12]
 8034634:	f003 0304 	and.w	r3, r3, #4
 8034638:	2b04      	cmp	r3, #4
 803463a:	d11b      	bne.n	8034674 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 803463c:	687b      	ldr	r3, [r7, #4]
 803463e:	681b      	ldr	r3, [r3, #0]
 8034640:	f06f 0204 	mvn.w	r2, #4
 8034644:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8034646:	687b      	ldr	r3, [r7, #4]
 8034648:	2202      	movs	r2, #2
 803464a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 803464c:	687b      	ldr	r3, [r7, #4]
 803464e:	681b      	ldr	r3, [r3, #0]
 8034650:	699b      	ldr	r3, [r3, #24]
 8034652:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8034656:	2b00      	cmp	r3, #0
 8034658:	d003      	beq.n	8034662 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 803465a:	6878      	ldr	r0, [r7, #4]
 803465c:	f000 f9d4 	bl	8034a08 <HAL_TIM_IC_CaptureCallback>
 8034660:	e005      	b.n	803466e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8034662:	6878      	ldr	r0, [r7, #4]
 8034664:	f000 f9c6 	bl	80349f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8034668:	6878      	ldr	r0, [r7, #4]
 803466a:	f000 f9d7 	bl	8034a1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 803466e:	687b      	ldr	r3, [r7, #4]
 8034670:	2200      	movs	r2, #0
 8034672:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8034674:	687b      	ldr	r3, [r7, #4]
 8034676:	681b      	ldr	r3, [r3, #0]
 8034678:	691b      	ldr	r3, [r3, #16]
 803467a:	f003 0308 	and.w	r3, r3, #8
 803467e:	2b08      	cmp	r3, #8
 8034680:	d122      	bne.n	80346c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8034682:	687b      	ldr	r3, [r7, #4]
 8034684:	681b      	ldr	r3, [r3, #0]
 8034686:	68db      	ldr	r3, [r3, #12]
 8034688:	f003 0308 	and.w	r3, r3, #8
 803468c:	2b08      	cmp	r3, #8
 803468e:	d11b      	bne.n	80346c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8034690:	687b      	ldr	r3, [r7, #4]
 8034692:	681b      	ldr	r3, [r3, #0]
 8034694:	f06f 0208 	mvn.w	r2, #8
 8034698:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 803469a:	687b      	ldr	r3, [r7, #4]
 803469c:	2204      	movs	r2, #4
 803469e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80346a0:	687b      	ldr	r3, [r7, #4]
 80346a2:	681b      	ldr	r3, [r3, #0]
 80346a4:	69db      	ldr	r3, [r3, #28]
 80346a6:	f003 0303 	and.w	r3, r3, #3
 80346aa:	2b00      	cmp	r3, #0
 80346ac:	d003      	beq.n	80346b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80346ae:	6878      	ldr	r0, [r7, #4]
 80346b0:	f000 f9aa 	bl	8034a08 <HAL_TIM_IC_CaptureCallback>
 80346b4:	e005      	b.n	80346c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80346b6:	6878      	ldr	r0, [r7, #4]
 80346b8:	f000 f99c 	bl	80349f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80346bc:	6878      	ldr	r0, [r7, #4]
 80346be:	f000 f9ad 	bl	8034a1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80346c2:	687b      	ldr	r3, [r7, #4]
 80346c4:	2200      	movs	r2, #0
 80346c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80346c8:	687b      	ldr	r3, [r7, #4]
 80346ca:	681b      	ldr	r3, [r3, #0]
 80346cc:	691b      	ldr	r3, [r3, #16]
 80346ce:	f003 0310 	and.w	r3, r3, #16
 80346d2:	2b10      	cmp	r3, #16
 80346d4:	d122      	bne.n	803471c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80346d6:	687b      	ldr	r3, [r7, #4]
 80346d8:	681b      	ldr	r3, [r3, #0]
 80346da:	68db      	ldr	r3, [r3, #12]
 80346dc:	f003 0310 	and.w	r3, r3, #16
 80346e0:	2b10      	cmp	r3, #16
 80346e2:	d11b      	bne.n	803471c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80346e4:	687b      	ldr	r3, [r7, #4]
 80346e6:	681b      	ldr	r3, [r3, #0]
 80346e8:	f06f 0210 	mvn.w	r2, #16
 80346ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80346ee:	687b      	ldr	r3, [r7, #4]
 80346f0:	2208      	movs	r2, #8
 80346f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80346f4:	687b      	ldr	r3, [r7, #4]
 80346f6:	681b      	ldr	r3, [r3, #0]
 80346f8:	69db      	ldr	r3, [r3, #28]
 80346fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80346fe:	2b00      	cmp	r3, #0
 8034700:	d003      	beq.n	803470a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8034702:	6878      	ldr	r0, [r7, #4]
 8034704:	f000 f980 	bl	8034a08 <HAL_TIM_IC_CaptureCallback>
 8034708:	e005      	b.n	8034716 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 803470a:	6878      	ldr	r0, [r7, #4]
 803470c:	f000 f972 	bl	80349f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8034710:	6878      	ldr	r0, [r7, #4]
 8034712:	f000 f983 	bl	8034a1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8034716:	687b      	ldr	r3, [r7, #4]
 8034718:	2200      	movs	r2, #0
 803471a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 803471c:	687b      	ldr	r3, [r7, #4]
 803471e:	681b      	ldr	r3, [r3, #0]
 8034720:	691b      	ldr	r3, [r3, #16]
 8034722:	f003 0301 	and.w	r3, r3, #1
 8034726:	2b01      	cmp	r3, #1
 8034728:	d10e      	bne.n	8034748 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 803472a:	687b      	ldr	r3, [r7, #4]
 803472c:	681b      	ldr	r3, [r3, #0]
 803472e:	68db      	ldr	r3, [r3, #12]
 8034730:	f003 0301 	and.w	r3, r3, #1
 8034734:	2b01      	cmp	r3, #1
 8034736:	d107      	bne.n	8034748 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8034738:	687b      	ldr	r3, [r7, #4]
 803473a:	681b      	ldr	r3, [r3, #0]
 803473c:	f06f 0201 	mvn.w	r2, #1
 8034740:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8034742:	6878      	ldr	r0, [r7, #4]
 8034744:	f7f5 f96a 	bl	8029a1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8034748:	687b      	ldr	r3, [r7, #4]
 803474a:	681b      	ldr	r3, [r3, #0]
 803474c:	691b      	ldr	r3, [r3, #16]
 803474e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8034752:	2b80      	cmp	r3, #128	; 0x80
 8034754:	d10e      	bne.n	8034774 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8034756:	687b      	ldr	r3, [r7, #4]
 8034758:	681b      	ldr	r3, [r3, #0]
 803475a:	68db      	ldr	r3, [r3, #12]
 803475c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8034760:	2b80      	cmp	r3, #128	; 0x80
 8034762:	d107      	bne.n	8034774 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8034764:	687b      	ldr	r3, [r7, #4]
 8034766:	681b      	ldr	r3, [r3, #0]
 8034768:	f06f 0280 	mvn.w	r2, #128	; 0x80
 803476c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 803476e:	6878      	ldr	r0, [r7, #4]
 8034770:	f000 fb38 	bl	8034de4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8034774:	687b      	ldr	r3, [r7, #4]
 8034776:	681b      	ldr	r3, [r3, #0]
 8034778:	691b      	ldr	r3, [r3, #16]
 803477a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 803477e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8034782:	d10e      	bne.n	80347a2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8034784:	687b      	ldr	r3, [r7, #4]
 8034786:	681b      	ldr	r3, [r3, #0]
 8034788:	68db      	ldr	r3, [r3, #12]
 803478a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 803478e:	2b80      	cmp	r3, #128	; 0x80
 8034790:	d107      	bne.n	80347a2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8034792:	687b      	ldr	r3, [r7, #4]
 8034794:	681b      	ldr	r3, [r3, #0]
 8034796:	f46f 7280 	mvn.w	r2, #256	; 0x100
 803479a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 803479c:	6878      	ldr	r0, [r7, #4]
 803479e:	f000 fb2b 	bl	8034df8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80347a2:	687b      	ldr	r3, [r7, #4]
 80347a4:	681b      	ldr	r3, [r3, #0]
 80347a6:	691b      	ldr	r3, [r3, #16]
 80347a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80347ac:	2b40      	cmp	r3, #64	; 0x40
 80347ae:	d10e      	bne.n	80347ce <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80347b0:	687b      	ldr	r3, [r7, #4]
 80347b2:	681b      	ldr	r3, [r3, #0]
 80347b4:	68db      	ldr	r3, [r3, #12]
 80347b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80347ba:	2b40      	cmp	r3, #64	; 0x40
 80347bc:	d107      	bne.n	80347ce <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80347be:	687b      	ldr	r3, [r7, #4]
 80347c0:	681b      	ldr	r3, [r3, #0]
 80347c2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80347c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80347c8:	6878      	ldr	r0, [r7, #4]
 80347ca:	f000 f931 	bl	8034a30 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80347ce:	687b      	ldr	r3, [r7, #4]
 80347d0:	681b      	ldr	r3, [r3, #0]
 80347d2:	691b      	ldr	r3, [r3, #16]
 80347d4:	f003 0320 	and.w	r3, r3, #32
 80347d8:	2b20      	cmp	r3, #32
 80347da:	d10e      	bne.n	80347fa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80347dc:	687b      	ldr	r3, [r7, #4]
 80347de:	681b      	ldr	r3, [r3, #0]
 80347e0:	68db      	ldr	r3, [r3, #12]
 80347e2:	f003 0320 	and.w	r3, r3, #32
 80347e6:	2b20      	cmp	r3, #32
 80347e8:	d107      	bne.n	80347fa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80347ea:	687b      	ldr	r3, [r7, #4]
 80347ec:	681b      	ldr	r3, [r3, #0]
 80347ee:	f06f 0220 	mvn.w	r2, #32
 80347f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80347f4:	6878      	ldr	r0, [r7, #4]
 80347f6:	f000 faeb 	bl	8034dd0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80347fa:	bf00      	nop
 80347fc:	3708      	adds	r7, #8
 80347fe:	46bd      	mov	sp, r7
 8034800:	bd80      	pop	{r7, pc}
	...

08034804 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8034804:	b580      	push	{r7, lr}
 8034806:	b084      	sub	sp, #16
 8034808:	af00      	add	r7, sp, #0
 803480a:	6078      	str	r0, [r7, #4]
 803480c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 803480e:	2300      	movs	r3, #0
 8034810:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8034812:	687b      	ldr	r3, [r7, #4]
 8034814:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8034818:	2b01      	cmp	r3, #1
 803481a:	d101      	bne.n	8034820 <HAL_TIM_ConfigClockSource+0x1c>
 803481c:	2302      	movs	r3, #2
 803481e:	e0dc      	b.n	80349da <HAL_TIM_ConfigClockSource+0x1d6>
 8034820:	687b      	ldr	r3, [r7, #4]
 8034822:	2201      	movs	r2, #1
 8034824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8034828:	687b      	ldr	r3, [r7, #4]
 803482a:	2202      	movs	r2, #2
 803482c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8034830:	687b      	ldr	r3, [r7, #4]
 8034832:	681b      	ldr	r3, [r3, #0]
 8034834:	689b      	ldr	r3, [r3, #8]
 8034836:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8034838:	68ba      	ldr	r2, [r7, #8]
 803483a:	4b6a      	ldr	r3, [pc, #424]	; (80349e4 <HAL_TIM_ConfigClockSource+0x1e0>)
 803483c:	4013      	ands	r3, r2
 803483e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8034840:	68bb      	ldr	r3, [r7, #8]
 8034842:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8034846:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8034848:	687b      	ldr	r3, [r7, #4]
 803484a:	681b      	ldr	r3, [r3, #0]
 803484c:	68ba      	ldr	r2, [r7, #8]
 803484e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8034850:	683b      	ldr	r3, [r7, #0]
 8034852:	681b      	ldr	r3, [r3, #0]
 8034854:	4a64      	ldr	r2, [pc, #400]	; (80349e8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8034856:	4293      	cmp	r3, r2
 8034858:	f000 80a9 	beq.w	80349ae <HAL_TIM_ConfigClockSource+0x1aa>
 803485c:	4a62      	ldr	r2, [pc, #392]	; (80349e8 <HAL_TIM_ConfigClockSource+0x1e4>)
 803485e:	4293      	cmp	r3, r2
 8034860:	f200 80ae 	bhi.w	80349c0 <HAL_TIM_ConfigClockSource+0x1bc>
 8034864:	4a61      	ldr	r2, [pc, #388]	; (80349ec <HAL_TIM_ConfigClockSource+0x1e8>)
 8034866:	4293      	cmp	r3, r2
 8034868:	f000 80a1 	beq.w	80349ae <HAL_TIM_ConfigClockSource+0x1aa>
 803486c:	4a5f      	ldr	r2, [pc, #380]	; (80349ec <HAL_TIM_ConfigClockSource+0x1e8>)
 803486e:	4293      	cmp	r3, r2
 8034870:	f200 80a6 	bhi.w	80349c0 <HAL_TIM_ConfigClockSource+0x1bc>
 8034874:	4a5e      	ldr	r2, [pc, #376]	; (80349f0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8034876:	4293      	cmp	r3, r2
 8034878:	f000 8099 	beq.w	80349ae <HAL_TIM_ConfigClockSource+0x1aa>
 803487c:	4a5c      	ldr	r2, [pc, #368]	; (80349f0 <HAL_TIM_ConfigClockSource+0x1ec>)
 803487e:	4293      	cmp	r3, r2
 8034880:	f200 809e 	bhi.w	80349c0 <HAL_TIM_ConfigClockSource+0x1bc>
 8034884:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8034888:	f000 8091 	beq.w	80349ae <HAL_TIM_ConfigClockSource+0x1aa>
 803488c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8034890:	f200 8096 	bhi.w	80349c0 <HAL_TIM_ConfigClockSource+0x1bc>
 8034894:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8034898:	f000 8089 	beq.w	80349ae <HAL_TIM_ConfigClockSource+0x1aa>
 803489c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80348a0:	f200 808e 	bhi.w	80349c0 <HAL_TIM_ConfigClockSource+0x1bc>
 80348a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80348a8:	d03e      	beq.n	8034928 <HAL_TIM_ConfigClockSource+0x124>
 80348aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80348ae:	f200 8087 	bhi.w	80349c0 <HAL_TIM_ConfigClockSource+0x1bc>
 80348b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80348b6:	f000 8086 	beq.w	80349c6 <HAL_TIM_ConfigClockSource+0x1c2>
 80348ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80348be:	d87f      	bhi.n	80349c0 <HAL_TIM_ConfigClockSource+0x1bc>
 80348c0:	2b70      	cmp	r3, #112	; 0x70
 80348c2:	d01a      	beq.n	80348fa <HAL_TIM_ConfigClockSource+0xf6>
 80348c4:	2b70      	cmp	r3, #112	; 0x70
 80348c6:	d87b      	bhi.n	80349c0 <HAL_TIM_ConfigClockSource+0x1bc>
 80348c8:	2b60      	cmp	r3, #96	; 0x60
 80348ca:	d050      	beq.n	803496e <HAL_TIM_ConfigClockSource+0x16a>
 80348cc:	2b60      	cmp	r3, #96	; 0x60
 80348ce:	d877      	bhi.n	80349c0 <HAL_TIM_ConfigClockSource+0x1bc>
 80348d0:	2b50      	cmp	r3, #80	; 0x50
 80348d2:	d03c      	beq.n	803494e <HAL_TIM_ConfigClockSource+0x14a>
 80348d4:	2b50      	cmp	r3, #80	; 0x50
 80348d6:	d873      	bhi.n	80349c0 <HAL_TIM_ConfigClockSource+0x1bc>
 80348d8:	2b40      	cmp	r3, #64	; 0x40
 80348da:	d058      	beq.n	803498e <HAL_TIM_ConfigClockSource+0x18a>
 80348dc:	2b40      	cmp	r3, #64	; 0x40
 80348de:	d86f      	bhi.n	80349c0 <HAL_TIM_ConfigClockSource+0x1bc>
 80348e0:	2b30      	cmp	r3, #48	; 0x30
 80348e2:	d064      	beq.n	80349ae <HAL_TIM_ConfigClockSource+0x1aa>
 80348e4:	2b30      	cmp	r3, #48	; 0x30
 80348e6:	d86b      	bhi.n	80349c0 <HAL_TIM_ConfigClockSource+0x1bc>
 80348e8:	2b20      	cmp	r3, #32
 80348ea:	d060      	beq.n	80349ae <HAL_TIM_ConfigClockSource+0x1aa>
 80348ec:	2b20      	cmp	r3, #32
 80348ee:	d867      	bhi.n	80349c0 <HAL_TIM_ConfigClockSource+0x1bc>
 80348f0:	2b00      	cmp	r3, #0
 80348f2:	d05c      	beq.n	80349ae <HAL_TIM_ConfigClockSource+0x1aa>
 80348f4:	2b10      	cmp	r3, #16
 80348f6:	d05a      	beq.n	80349ae <HAL_TIM_ConfigClockSource+0x1aa>
 80348f8:	e062      	b.n	80349c0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80348fa:	687b      	ldr	r3, [r7, #4]
 80348fc:	6818      	ldr	r0, [r3, #0]
 80348fe:	683b      	ldr	r3, [r7, #0]
 8034900:	6899      	ldr	r1, [r3, #8]
 8034902:	683b      	ldr	r3, [r7, #0]
 8034904:	685a      	ldr	r2, [r3, #4]
 8034906:	683b      	ldr	r3, [r7, #0]
 8034908:	68db      	ldr	r3, [r3, #12]
 803490a:	f000 f9b3 	bl	8034c74 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 803490e:	687b      	ldr	r3, [r7, #4]
 8034910:	681b      	ldr	r3, [r3, #0]
 8034912:	689b      	ldr	r3, [r3, #8]
 8034914:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8034916:	68bb      	ldr	r3, [r7, #8]
 8034918:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 803491c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 803491e:	687b      	ldr	r3, [r7, #4]
 8034920:	681b      	ldr	r3, [r3, #0]
 8034922:	68ba      	ldr	r2, [r7, #8]
 8034924:	609a      	str	r2, [r3, #8]
      break;
 8034926:	e04f      	b.n	80349c8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8034928:	687b      	ldr	r3, [r7, #4]
 803492a:	6818      	ldr	r0, [r3, #0]
 803492c:	683b      	ldr	r3, [r7, #0]
 803492e:	6899      	ldr	r1, [r3, #8]
 8034930:	683b      	ldr	r3, [r7, #0]
 8034932:	685a      	ldr	r2, [r3, #4]
 8034934:	683b      	ldr	r3, [r7, #0]
 8034936:	68db      	ldr	r3, [r3, #12]
 8034938:	f000 f99c 	bl	8034c74 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 803493c:	687b      	ldr	r3, [r7, #4]
 803493e:	681b      	ldr	r3, [r3, #0]
 8034940:	689a      	ldr	r2, [r3, #8]
 8034942:	687b      	ldr	r3, [r7, #4]
 8034944:	681b      	ldr	r3, [r3, #0]
 8034946:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 803494a:	609a      	str	r2, [r3, #8]
      break;
 803494c:	e03c      	b.n	80349c8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 803494e:	687b      	ldr	r3, [r7, #4]
 8034950:	6818      	ldr	r0, [r3, #0]
 8034952:	683b      	ldr	r3, [r7, #0]
 8034954:	6859      	ldr	r1, [r3, #4]
 8034956:	683b      	ldr	r3, [r7, #0]
 8034958:	68db      	ldr	r3, [r3, #12]
 803495a:	461a      	mov	r2, r3
 803495c:	f000 f90c 	bl	8034b78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8034960:	687b      	ldr	r3, [r7, #4]
 8034962:	681b      	ldr	r3, [r3, #0]
 8034964:	2150      	movs	r1, #80	; 0x50
 8034966:	4618      	mov	r0, r3
 8034968:	f000 f966 	bl	8034c38 <TIM_ITRx_SetConfig>
      break;
 803496c:	e02c      	b.n	80349c8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 803496e:	687b      	ldr	r3, [r7, #4]
 8034970:	6818      	ldr	r0, [r3, #0]
 8034972:	683b      	ldr	r3, [r7, #0]
 8034974:	6859      	ldr	r1, [r3, #4]
 8034976:	683b      	ldr	r3, [r7, #0]
 8034978:	68db      	ldr	r3, [r3, #12]
 803497a:	461a      	mov	r2, r3
 803497c:	f000 f92b 	bl	8034bd6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8034980:	687b      	ldr	r3, [r7, #4]
 8034982:	681b      	ldr	r3, [r3, #0]
 8034984:	2160      	movs	r1, #96	; 0x60
 8034986:	4618      	mov	r0, r3
 8034988:	f000 f956 	bl	8034c38 <TIM_ITRx_SetConfig>
      break;
 803498c:	e01c      	b.n	80349c8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 803498e:	687b      	ldr	r3, [r7, #4]
 8034990:	6818      	ldr	r0, [r3, #0]
 8034992:	683b      	ldr	r3, [r7, #0]
 8034994:	6859      	ldr	r1, [r3, #4]
 8034996:	683b      	ldr	r3, [r7, #0]
 8034998:	68db      	ldr	r3, [r3, #12]
 803499a:	461a      	mov	r2, r3
 803499c:	f000 f8ec 	bl	8034b78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80349a0:	687b      	ldr	r3, [r7, #4]
 80349a2:	681b      	ldr	r3, [r3, #0]
 80349a4:	2140      	movs	r1, #64	; 0x40
 80349a6:	4618      	mov	r0, r3
 80349a8:	f000 f946 	bl	8034c38 <TIM_ITRx_SetConfig>
      break;
 80349ac:	e00c      	b.n	80349c8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80349ae:	687b      	ldr	r3, [r7, #4]
 80349b0:	681a      	ldr	r2, [r3, #0]
 80349b2:	683b      	ldr	r3, [r7, #0]
 80349b4:	681b      	ldr	r3, [r3, #0]
 80349b6:	4619      	mov	r1, r3
 80349b8:	4610      	mov	r0, r2
 80349ba:	f000 f93d 	bl	8034c38 <TIM_ITRx_SetConfig>
      break;
 80349be:	e003      	b.n	80349c8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80349c0:	2301      	movs	r3, #1
 80349c2:	73fb      	strb	r3, [r7, #15]
      break;
 80349c4:	e000      	b.n	80349c8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80349c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80349c8:	687b      	ldr	r3, [r7, #4]
 80349ca:	2201      	movs	r2, #1
 80349cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80349d0:	687b      	ldr	r3, [r7, #4]
 80349d2:	2200      	movs	r2, #0
 80349d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80349d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80349da:	4618      	mov	r0, r3
 80349dc:	3710      	adds	r7, #16
 80349de:	46bd      	mov	sp, r7
 80349e0:	bd80      	pop	{r7, pc}
 80349e2:	bf00      	nop
 80349e4:	ffceff88 	.word	0xffceff88
 80349e8:	00100040 	.word	0x00100040
 80349ec:	00100030 	.word	0x00100030
 80349f0:	00100020 	.word	0x00100020

080349f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80349f4:	b480      	push	{r7}
 80349f6:	b083      	sub	sp, #12
 80349f8:	af00      	add	r7, sp, #0
 80349fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80349fc:	bf00      	nop
 80349fe:	370c      	adds	r7, #12
 8034a00:	46bd      	mov	sp, r7
 8034a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034a06:	4770      	bx	lr

08034a08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8034a08:	b480      	push	{r7}
 8034a0a:	b083      	sub	sp, #12
 8034a0c:	af00      	add	r7, sp, #0
 8034a0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8034a10:	bf00      	nop
 8034a12:	370c      	adds	r7, #12
 8034a14:	46bd      	mov	sp, r7
 8034a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034a1a:	4770      	bx	lr

08034a1c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8034a1c:	b480      	push	{r7}
 8034a1e:	b083      	sub	sp, #12
 8034a20:	af00      	add	r7, sp, #0
 8034a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8034a24:	bf00      	nop
 8034a26:	370c      	adds	r7, #12
 8034a28:	46bd      	mov	sp, r7
 8034a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034a2e:	4770      	bx	lr

08034a30 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8034a30:	b480      	push	{r7}
 8034a32:	b083      	sub	sp, #12
 8034a34:	af00      	add	r7, sp, #0
 8034a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8034a38:	bf00      	nop
 8034a3a:	370c      	adds	r7, #12
 8034a3c:	46bd      	mov	sp, r7
 8034a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034a42:	4770      	bx	lr

08034a44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8034a44:	b480      	push	{r7}
 8034a46:	b085      	sub	sp, #20
 8034a48:	af00      	add	r7, sp, #0
 8034a4a:	6078      	str	r0, [r7, #4]
 8034a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8034a4e:	687b      	ldr	r3, [r7, #4]
 8034a50:	681b      	ldr	r3, [r3, #0]
 8034a52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8034a54:	687b      	ldr	r3, [r7, #4]
 8034a56:	4a40      	ldr	r2, [pc, #256]	; (8034b58 <TIM_Base_SetConfig+0x114>)
 8034a58:	4293      	cmp	r3, r2
 8034a5a:	d013      	beq.n	8034a84 <TIM_Base_SetConfig+0x40>
 8034a5c:	687b      	ldr	r3, [r7, #4]
 8034a5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8034a62:	d00f      	beq.n	8034a84 <TIM_Base_SetConfig+0x40>
 8034a64:	687b      	ldr	r3, [r7, #4]
 8034a66:	4a3d      	ldr	r2, [pc, #244]	; (8034b5c <TIM_Base_SetConfig+0x118>)
 8034a68:	4293      	cmp	r3, r2
 8034a6a:	d00b      	beq.n	8034a84 <TIM_Base_SetConfig+0x40>
 8034a6c:	687b      	ldr	r3, [r7, #4]
 8034a6e:	4a3c      	ldr	r2, [pc, #240]	; (8034b60 <TIM_Base_SetConfig+0x11c>)
 8034a70:	4293      	cmp	r3, r2
 8034a72:	d007      	beq.n	8034a84 <TIM_Base_SetConfig+0x40>
 8034a74:	687b      	ldr	r3, [r7, #4]
 8034a76:	4a3b      	ldr	r2, [pc, #236]	; (8034b64 <TIM_Base_SetConfig+0x120>)
 8034a78:	4293      	cmp	r3, r2
 8034a7a:	d003      	beq.n	8034a84 <TIM_Base_SetConfig+0x40>
 8034a7c:	687b      	ldr	r3, [r7, #4]
 8034a7e:	4a3a      	ldr	r2, [pc, #232]	; (8034b68 <TIM_Base_SetConfig+0x124>)
 8034a80:	4293      	cmp	r3, r2
 8034a82:	d108      	bne.n	8034a96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8034a84:	68fb      	ldr	r3, [r7, #12]
 8034a86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8034a8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8034a8c:	683b      	ldr	r3, [r7, #0]
 8034a8e:	685b      	ldr	r3, [r3, #4]
 8034a90:	68fa      	ldr	r2, [r7, #12]
 8034a92:	4313      	orrs	r3, r2
 8034a94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8034a96:	687b      	ldr	r3, [r7, #4]
 8034a98:	4a2f      	ldr	r2, [pc, #188]	; (8034b58 <TIM_Base_SetConfig+0x114>)
 8034a9a:	4293      	cmp	r3, r2
 8034a9c:	d01f      	beq.n	8034ade <TIM_Base_SetConfig+0x9a>
 8034a9e:	687b      	ldr	r3, [r7, #4]
 8034aa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8034aa4:	d01b      	beq.n	8034ade <TIM_Base_SetConfig+0x9a>
 8034aa6:	687b      	ldr	r3, [r7, #4]
 8034aa8:	4a2c      	ldr	r2, [pc, #176]	; (8034b5c <TIM_Base_SetConfig+0x118>)
 8034aaa:	4293      	cmp	r3, r2
 8034aac:	d017      	beq.n	8034ade <TIM_Base_SetConfig+0x9a>
 8034aae:	687b      	ldr	r3, [r7, #4]
 8034ab0:	4a2b      	ldr	r2, [pc, #172]	; (8034b60 <TIM_Base_SetConfig+0x11c>)
 8034ab2:	4293      	cmp	r3, r2
 8034ab4:	d013      	beq.n	8034ade <TIM_Base_SetConfig+0x9a>
 8034ab6:	687b      	ldr	r3, [r7, #4]
 8034ab8:	4a2a      	ldr	r2, [pc, #168]	; (8034b64 <TIM_Base_SetConfig+0x120>)
 8034aba:	4293      	cmp	r3, r2
 8034abc:	d00f      	beq.n	8034ade <TIM_Base_SetConfig+0x9a>
 8034abe:	687b      	ldr	r3, [r7, #4]
 8034ac0:	4a29      	ldr	r2, [pc, #164]	; (8034b68 <TIM_Base_SetConfig+0x124>)
 8034ac2:	4293      	cmp	r3, r2
 8034ac4:	d00b      	beq.n	8034ade <TIM_Base_SetConfig+0x9a>
 8034ac6:	687b      	ldr	r3, [r7, #4]
 8034ac8:	4a28      	ldr	r2, [pc, #160]	; (8034b6c <TIM_Base_SetConfig+0x128>)
 8034aca:	4293      	cmp	r3, r2
 8034acc:	d007      	beq.n	8034ade <TIM_Base_SetConfig+0x9a>
 8034ace:	687b      	ldr	r3, [r7, #4]
 8034ad0:	4a27      	ldr	r2, [pc, #156]	; (8034b70 <TIM_Base_SetConfig+0x12c>)
 8034ad2:	4293      	cmp	r3, r2
 8034ad4:	d003      	beq.n	8034ade <TIM_Base_SetConfig+0x9a>
 8034ad6:	687b      	ldr	r3, [r7, #4]
 8034ad8:	4a26      	ldr	r2, [pc, #152]	; (8034b74 <TIM_Base_SetConfig+0x130>)
 8034ada:	4293      	cmp	r3, r2
 8034adc:	d108      	bne.n	8034af0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8034ade:	68fb      	ldr	r3, [r7, #12]
 8034ae0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8034ae4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8034ae6:	683b      	ldr	r3, [r7, #0]
 8034ae8:	68db      	ldr	r3, [r3, #12]
 8034aea:	68fa      	ldr	r2, [r7, #12]
 8034aec:	4313      	orrs	r3, r2
 8034aee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8034af0:	68fb      	ldr	r3, [r7, #12]
 8034af2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8034af6:	683b      	ldr	r3, [r7, #0]
 8034af8:	695b      	ldr	r3, [r3, #20]
 8034afa:	4313      	orrs	r3, r2
 8034afc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8034afe:	687b      	ldr	r3, [r7, #4]
 8034b00:	68fa      	ldr	r2, [r7, #12]
 8034b02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8034b04:	683b      	ldr	r3, [r7, #0]
 8034b06:	689a      	ldr	r2, [r3, #8]
 8034b08:	687b      	ldr	r3, [r7, #4]
 8034b0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8034b0c:	683b      	ldr	r3, [r7, #0]
 8034b0e:	681a      	ldr	r2, [r3, #0]
 8034b10:	687b      	ldr	r3, [r7, #4]
 8034b12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8034b14:	687b      	ldr	r3, [r7, #4]
 8034b16:	4a10      	ldr	r2, [pc, #64]	; (8034b58 <TIM_Base_SetConfig+0x114>)
 8034b18:	4293      	cmp	r3, r2
 8034b1a:	d00f      	beq.n	8034b3c <TIM_Base_SetConfig+0xf8>
 8034b1c:	687b      	ldr	r3, [r7, #4]
 8034b1e:	4a12      	ldr	r2, [pc, #72]	; (8034b68 <TIM_Base_SetConfig+0x124>)
 8034b20:	4293      	cmp	r3, r2
 8034b22:	d00b      	beq.n	8034b3c <TIM_Base_SetConfig+0xf8>
 8034b24:	687b      	ldr	r3, [r7, #4]
 8034b26:	4a11      	ldr	r2, [pc, #68]	; (8034b6c <TIM_Base_SetConfig+0x128>)
 8034b28:	4293      	cmp	r3, r2
 8034b2a:	d007      	beq.n	8034b3c <TIM_Base_SetConfig+0xf8>
 8034b2c:	687b      	ldr	r3, [r7, #4]
 8034b2e:	4a10      	ldr	r2, [pc, #64]	; (8034b70 <TIM_Base_SetConfig+0x12c>)
 8034b30:	4293      	cmp	r3, r2
 8034b32:	d003      	beq.n	8034b3c <TIM_Base_SetConfig+0xf8>
 8034b34:	687b      	ldr	r3, [r7, #4]
 8034b36:	4a0f      	ldr	r2, [pc, #60]	; (8034b74 <TIM_Base_SetConfig+0x130>)
 8034b38:	4293      	cmp	r3, r2
 8034b3a:	d103      	bne.n	8034b44 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8034b3c:	683b      	ldr	r3, [r7, #0]
 8034b3e:	691a      	ldr	r2, [r3, #16]
 8034b40:	687b      	ldr	r3, [r7, #4]
 8034b42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8034b44:	687b      	ldr	r3, [r7, #4]
 8034b46:	2201      	movs	r2, #1
 8034b48:	615a      	str	r2, [r3, #20]
}
 8034b4a:	bf00      	nop
 8034b4c:	3714      	adds	r7, #20
 8034b4e:	46bd      	mov	sp, r7
 8034b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034b54:	4770      	bx	lr
 8034b56:	bf00      	nop
 8034b58:	40010000 	.word	0x40010000
 8034b5c:	40000400 	.word	0x40000400
 8034b60:	40000800 	.word	0x40000800
 8034b64:	40000c00 	.word	0x40000c00
 8034b68:	40010400 	.word	0x40010400
 8034b6c:	40014000 	.word	0x40014000
 8034b70:	40014400 	.word	0x40014400
 8034b74:	40014800 	.word	0x40014800

08034b78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8034b78:	b480      	push	{r7}
 8034b7a:	b087      	sub	sp, #28
 8034b7c:	af00      	add	r7, sp, #0
 8034b7e:	60f8      	str	r0, [r7, #12]
 8034b80:	60b9      	str	r1, [r7, #8]
 8034b82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8034b84:	68fb      	ldr	r3, [r7, #12]
 8034b86:	6a1b      	ldr	r3, [r3, #32]
 8034b88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8034b8a:	68fb      	ldr	r3, [r7, #12]
 8034b8c:	6a1b      	ldr	r3, [r3, #32]
 8034b8e:	f023 0201 	bic.w	r2, r3, #1
 8034b92:	68fb      	ldr	r3, [r7, #12]
 8034b94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8034b96:	68fb      	ldr	r3, [r7, #12]
 8034b98:	699b      	ldr	r3, [r3, #24]
 8034b9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8034b9c:	693b      	ldr	r3, [r7, #16]
 8034b9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8034ba2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8034ba4:	687b      	ldr	r3, [r7, #4]
 8034ba6:	011b      	lsls	r3, r3, #4
 8034ba8:	693a      	ldr	r2, [r7, #16]
 8034baa:	4313      	orrs	r3, r2
 8034bac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8034bae:	697b      	ldr	r3, [r7, #20]
 8034bb0:	f023 030a 	bic.w	r3, r3, #10
 8034bb4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8034bb6:	697a      	ldr	r2, [r7, #20]
 8034bb8:	68bb      	ldr	r3, [r7, #8]
 8034bba:	4313      	orrs	r3, r2
 8034bbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8034bbe:	68fb      	ldr	r3, [r7, #12]
 8034bc0:	693a      	ldr	r2, [r7, #16]
 8034bc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8034bc4:	68fb      	ldr	r3, [r7, #12]
 8034bc6:	697a      	ldr	r2, [r7, #20]
 8034bc8:	621a      	str	r2, [r3, #32]
}
 8034bca:	bf00      	nop
 8034bcc:	371c      	adds	r7, #28
 8034bce:	46bd      	mov	sp, r7
 8034bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034bd4:	4770      	bx	lr

08034bd6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8034bd6:	b480      	push	{r7}
 8034bd8:	b087      	sub	sp, #28
 8034bda:	af00      	add	r7, sp, #0
 8034bdc:	60f8      	str	r0, [r7, #12]
 8034bde:	60b9      	str	r1, [r7, #8]
 8034be0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8034be2:	68fb      	ldr	r3, [r7, #12]
 8034be4:	6a1b      	ldr	r3, [r3, #32]
 8034be6:	f023 0210 	bic.w	r2, r3, #16
 8034bea:	68fb      	ldr	r3, [r7, #12]
 8034bec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8034bee:	68fb      	ldr	r3, [r7, #12]
 8034bf0:	699b      	ldr	r3, [r3, #24]
 8034bf2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8034bf4:	68fb      	ldr	r3, [r7, #12]
 8034bf6:	6a1b      	ldr	r3, [r3, #32]
 8034bf8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8034bfa:	697b      	ldr	r3, [r7, #20]
 8034bfc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8034c00:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8034c02:	687b      	ldr	r3, [r7, #4]
 8034c04:	031b      	lsls	r3, r3, #12
 8034c06:	697a      	ldr	r2, [r7, #20]
 8034c08:	4313      	orrs	r3, r2
 8034c0a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8034c0c:	693b      	ldr	r3, [r7, #16]
 8034c0e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8034c12:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8034c14:	68bb      	ldr	r3, [r7, #8]
 8034c16:	011b      	lsls	r3, r3, #4
 8034c18:	693a      	ldr	r2, [r7, #16]
 8034c1a:	4313      	orrs	r3, r2
 8034c1c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8034c1e:	68fb      	ldr	r3, [r7, #12]
 8034c20:	697a      	ldr	r2, [r7, #20]
 8034c22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8034c24:	68fb      	ldr	r3, [r7, #12]
 8034c26:	693a      	ldr	r2, [r7, #16]
 8034c28:	621a      	str	r2, [r3, #32]
}
 8034c2a:	bf00      	nop
 8034c2c:	371c      	adds	r7, #28
 8034c2e:	46bd      	mov	sp, r7
 8034c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034c34:	4770      	bx	lr
	...

08034c38 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8034c38:	b480      	push	{r7}
 8034c3a:	b085      	sub	sp, #20
 8034c3c:	af00      	add	r7, sp, #0
 8034c3e:	6078      	str	r0, [r7, #4]
 8034c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8034c42:	687b      	ldr	r3, [r7, #4]
 8034c44:	689b      	ldr	r3, [r3, #8]
 8034c46:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8034c48:	68fa      	ldr	r2, [r7, #12]
 8034c4a:	4b09      	ldr	r3, [pc, #36]	; (8034c70 <TIM_ITRx_SetConfig+0x38>)
 8034c4c:	4013      	ands	r3, r2
 8034c4e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8034c50:	683a      	ldr	r2, [r7, #0]
 8034c52:	68fb      	ldr	r3, [r7, #12]
 8034c54:	4313      	orrs	r3, r2
 8034c56:	f043 0307 	orr.w	r3, r3, #7
 8034c5a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8034c5c:	687b      	ldr	r3, [r7, #4]
 8034c5e:	68fa      	ldr	r2, [r7, #12]
 8034c60:	609a      	str	r2, [r3, #8]
}
 8034c62:	bf00      	nop
 8034c64:	3714      	adds	r7, #20
 8034c66:	46bd      	mov	sp, r7
 8034c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034c6c:	4770      	bx	lr
 8034c6e:	bf00      	nop
 8034c70:	ffcfff8f 	.word	0xffcfff8f

08034c74 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8034c74:	b480      	push	{r7}
 8034c76:	b087      	sub	sp, #28
 8034c78:	af00      	add	r7, sp, #0
 8034c7a:	60f8      	str	r0, [r7, #12]
 8034c7c:	60b9      	str	r1, [r7, #8]
 8034c7e:	607a      	str	r2, [r7, #4]
 8034c80:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8034c82:	68fb      	ldr	r3, [r7, #12]
 8034c84:	689b      	ldr	r3, [r3, #8]
 8034c86:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8034c88:	697b      	ldr	r3, [r7, #20]
 8034c8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8034c8e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8034c90:	683b      	ldr	r3, [r7, #0]
 8034c92:	021a      	lsls	r2, r3, #8
 8034c94:	687b      	ldr	r3, [r7, #4]
 8034c96:	431a      	orrs	r2, r3
 8034c98:	68bb      	ldr	r3, [r7, #8]
 8034c9a:	4313      	orrs	r3, r2
 8034c9c:	697a      	ldr	r2, [r7, #20]
 8034c9e:	4313      	orrs	r3, r2
 8034ca0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8034ca2:	68fb      	ldr	r3, [r7, #12]
 8034ca4:	697a      	ldr	r2, [r7, #20]
 8034ca6:	609a      	str	r2, [r3, #8]
}
 8034ca8:	bf00      	nop
 8034caa:	371c      	adds	r7, #28
 8034cac:	46bd      	mov	sp, r7
 8034cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034cb2:	4770      	bx	lr

08034cb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8034cb4:	b480      	push	{r7}
 8034cb6:	b085      	sub	sp, #20
 8034cb8:	af00      	add	r7, sp, #0
 8034cba:	6078      	str	r0, [r7, #4]
 8034cbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8034cbe:	687b      	ldr	r3, [r7, #4]
 8034cc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8034cc4:	2b01      	cmp	r3, #1
 8034cc6:	d101      	bne.n	8034ccc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8034cc8:	2302      	movs	r3, #2
 8034cca:	e06d      	b.n	8034da8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8034ccc:	687b      	ldr	r3, [r7, #4]
 8034cce:	2201      	movs	r2, #1
 8034cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8034cd4:	687b      	ldr	r3, [r7, #4]
 8034cd6:	2202      	movs	r2, #2
 8034cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8034cdc:	687b      	ldr	r3, [r7, #4]
 8034cde:	681b      	ldr	r3, [r3, #0]
 8034ce0:	685b      	ldr	r3, [r3, #4]
 8034ce2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8034ce4:	687b      	ldr	r3, [r7, #4]
 8034ce6:	681b      	ldr	r3, [r3, #0]
 8034ce8:	689b      	ldr	r3, [r3, #8]
 8034cea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8034cec:	687b      	ldr	r3, [r7, #4]
 8034cee:	681b      	ldr	r3, [r3, #0]
 8034cf0:	4a30      	ldr	r2, [pc, #192]	; (8034db4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8034cf2:	4293      	cmp	r3, r2
 8034cf4:	d004      	beq.n	8034d00 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8034cf6:	687b      	ldr	r3, [r7, #4]
 8034cf8:	681b      	ldr	r3, [r3, #0]
 8034cfa:	4a2f      	ldr	r2, [pc, #188]	; (8034db8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8034cfc:	4293      	cmp	r3, r2
 8034cfe:	d108      	bne.n	8034d12 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8034d00:	68fb      	ldr	r3, [r7, #12]
 8034d02:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8034d06:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8034d08:	683b      	ldr	r3, [r7, #0]
 8034d0a:	685b      	ldr	r3, [r3, #4]
 8034d0c:	68fa      	ldr	r2, [r7, #12]
 8034d0e:	4313      	orrs	r3, r2
 8034d10:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8034d12:	68fb      	ldr	r3, [r7, #12]
 8034d14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8034d18:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8034d1a:	683b      	ldr	r3, [r7, #0]
 8034d1c:	681b      	ldr	r3, [r3, #0]
 8034d1e:	68fa      	ldr	r2, [r7, #12]
 8034d20:	4313      	orrs	r3, r2
 8034d22:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8034d24:	687b      	ldr	r3, [r7, #4]
 8034d26:	681b      	ldr	r3, [r3, #0]
 8034d28:	68fa      	ldr	r2, [r7, #12]
 8034d2a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8034d2c:	687b      	ldr	r3, [r7, #4]
 8034d2e:	681b      	ldr	r3, [r3, #0]
 8034d30:	4a20      	ldr	r2, [pc, #128]	; (8034db4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8034d32:	4293      	cmp	r3, r2
 8034d34:	d022      	beq.n	8034d7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8034d36:	687b      	ldr	r3, [r7, #4]
 8034d38:	681b      	ldr	r3, [r3, #0]
 8034d3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8034d3e:	d01d      	beq.n	8034d7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8034d40:	687b      	ldr	r3, [r7, #4]
 8034d42:	681b      	ldr	r3, [r3, #0]
 8034d44:	4a1d      	ldr	r2, [pc, #116]	; (8034dbc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8034d46:	4293      	cmp	r3, r2
 8034d48:	d018      	beq.n	8034d7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8034d4a:	687b      	ldr	r3, [r7, #4]
 8034d4c:	681b      	ldr	r3, [r3, #0]
 8034d4e:	4a1c      	ldr	r2, [pc, #112]	; (8034dc0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8034d50:	4293      	cmp	r3, r2
 8034d52:	d013      	beq.n	8034d7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8034d54:	687b      	ldr	r3, [r7, #4]
 8034d56:	681b      	ldr	r3, [r3, #0]
 8034d58:	4a1a      	ldr	r2, [pc, #104]	; (8034dc4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8034d5a:	4293      	cmp	r3, r2
 8034d5c:	d00e      	beq.n	8034d7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8034d5e:	687b      	ldr	r3, [r7, #4]
 8034d60:	681b      	ldr	r3, [r3, #0]
 8034d62:	4a15      	ldr	r2, [pc, #84]	; (8034db8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8034d64:	4293      	cmp	r3, r2
 8034d66:	d009      	beq.n	8034d7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8034d68:	687b      	ldr	r3, [r7, #4]
 8034d6a:	681b      	ldr	r3, [r3, #0]
 8034d6c:	4a16      	ldr	r2, [pc, #88]	; (8034dc8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8034d6e:	4293      	cmp	r3, r2
 8034d70:	d004      	beq.n	8034d7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8034d72:	687b      	ldr	r3, [r7, #4]
 8034d74:	681b      	ldr	r3, [r3, #0]
 8034d76:	4a15      	ldr	r2, [pc, #84]	; (8034dcc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8034d78:	4293      	cmp	r3, r2
 8034d7a:	d10c      	bne.n	8034d96 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8034d7c:	68bb      	ldr	r3, [r7, #8]
 8034d7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8034d82:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8034d84:	683b      	ldr	r3, [r7, #0]
 8034d86:	689b      	ldr	r3, [r3, #8]
 8034d88:	68ba      	ldr	r2, [r7, #8]
 8034d8a:	4313      	orrs	r3, r2
 8034d8c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8034d8e:	687b      	ldr	r3, [r7, #4]
 8034d90:	681b      	ldr	r3, [r3, #0]
 8034d92:	68ba      	ldr	r2, [r7, #8]
 8034d94:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8034d96:	687b      	ldr	r3, [r7, #4]
 8034d98:	2201      	movs	r2, #1
 8034d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8034d9e:	687b      	ldr	r3, [r7, #4]
 8034da0:	2200      	movs	r2, #0
 8034da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8034da6:	2300      	movs	r3, #0
}
 8034da8:	4618      	mov	r0, r3
 8034daa:	3714      	adds	r7, #20
 8034dac:	46bd      	mov	sp, r7
 8034dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034db2:	4770      	bx	lr
 8034db4:	40010000 	.word	0x40010000
 8034db8:	40010400 	.word	0x40010400
 8034dbc:	40000400 	.word	0x40000400
 8034dc0:	40000800 	.word	0x40000800
 8034dc4:	40000c00 	.word	0x40000c00
 8034dc8:	40001800 	.word	0x40001800
 8034dcc:	40014000 	.word	0x40014000

08034dd0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8034dd0:	b480      	push	{r7}
 8034dd2:	b083      	sub	sp, #12
 8034dd4:	af00      	add	r7, sp, #0
 8034dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8034dd8:	bf00      	nop
 8034dda:	370c      	adds	r7, #12
 8034ddc:	46bd      	mov	sp, r7
 8034dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034de2:	4770      	bx	lr

08034de4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8034de4:	b480      	push	{r7}
 8034de6:	b083      	sub	sp, #12
 8034de8:	af00      	add	r7, sp, #0
 8034dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8034dec:	bf00      	nop
 8034dee:	370c      	adds	r7, #12
 8034df0:	46bd      	mov	sp, r7
 8034df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034df6:	4770      	bx	lr

08034df8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8034df8:	b480      	push	{r7}
 8034dfa:	b083      	sub	sp, #12
 8034dfc:	af00      	add	r7, sp, #0
 8034dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8034e00:	bf00      	nop
 8034e02:	370c      	adds	r7, #12
 8034e04:	46bd      	mov	sp, r7
 8034e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034e0a:	4770      	bx	lr

08034e0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8034e0c:	b580      	push	{r7, lr}
 8034e0e:	b082      	sub	sp, #8
 8034e10:	af00      	add	r7, sp, #0
 8034e12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8034e14:	687b      	ldr	r3, [r7, #4]
 8034e16:	2b00      	cmp	r3, #0
 8034e18:	d101      	bne.n	8034e1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8034e1a:	2301      	movs	r3, #1
 8034e1c:	e042      	b.n	8034ea4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8034e1e:	687b      	ldr	r3, [r7, #4]
 8034e20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8034e24:	2b00      	cmp	r3, #0
 8034e26:	d106      	bne.n	8034e36 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8034e28:	687b      	ldr	r3, [r7, #4]
 8034e2a:	2200      	movs	r2, #0
 8034e2c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8034e30:	6878      	ldr	r0, [r7, #4]
 8034e32:	f7f5 fc65 	bl	802a700 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8034e36:	687b      	ldr	r3, [r7, #4]
 8034e38:	2224      	movs	r2, #36	; 0x24
 8034e3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8034e3e:	687b      	ldr	r3, [r7, #4]
 8034e40:	681b      	ldr	r3, [r3, #0]
 8034e42:	681a      	ldr	r2, [r3, #0]
 8034e44:	687b      	ldr	r3, [r7, #4]
 8034e46:	681b      	ldr	r3, [r3, #0]
 8034e48:	f022 0201 	bic.w	r2, r2, #1
 8034e4c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8034e4e:	6878      	ldr	r0, [r7, #4]
 8034e50:	f000 fdb2 	bl	80359b8 <UART_SetConfig>
 8034e54:	4603      	mov	r3, r0
 8034e56:	2b01      	cmp	r3, #1
 8034e58:	d101      	bne.n	8034e5e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8034e5a:	2301      	movs	r3, #1
 8034e5c:	e022      	b.n	8034ea4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8034e5e:	687b      	ldr	r3, [r7, #4]
 8034e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8034e62:	2b00      	cmp	r3, #0
 8034e64:	d002      	beq.n	8034e6c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8034e66:	6878      	ldr	r0, [r7, #4]
 8034e68:	f001 fb0e 	bl	8036488 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8034e6c:	687b      	ldr	r3, [r7, #4]
 8034e6e:	681b      	ldr	r3, [r3, #0]
 8034e70:	685a      	ldr	r2, [r3, #4]
 8034e72:	687b      	ldr	r3, [r7, #4]
 8034e74:	681b      	ldr	r3, [r3, #0]
 8034e76:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8034e7a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8034e7c:	687b      	ldr	r3, [r7, #4]
 8034e7e:	681b      	ldr	r3, [r3, #0]
 8034e80:	689a      	ldr	r2, [r3, #8]
 8034e82:	687b      	ldr	r3, [r7, #4]
 8034e84:	681b      	ldr	r3, [r3, #0]
 8034e86:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8034e8a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8034e8c:	687b      	ldr	r3, [r7, #4]
 8034e8e:	681b      	ldr	r3, [r3, #0]
 8034e90:	681a      	ldr	r2, [r3, #0]
 8034e92:	687b      	ldr	r3, [r7, #4]
 8034e94:	681b      	ldr	r3, [r3, #0]
 8034e96:	f042 0201 	orr.w	r2, r2, #1
 8034e9a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8034e9c:	6878      	ldr	r0, [r7, #4]
 8034e9e:	f001 fb95 	bl	80365cc <UART_CheckIdleState>
 8034ea2:	4603      	mov	r3, r0
}
 8034ea4:	4618      	mov	r0, r3
 8034ea6:	3708      	adds	r7, #8
 8034ea8:	46bd      	mov	sp, r7
 8034eaa:	bd80      	pop	{r7, pc}

08034eac <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8034eac:	b580      	push	{r7, lr}
 8034eae:	b08a      	sub	sp, #40	; 0x28
 8034eb0:	af02      	add	r7, sp, #8
 8034eb2:	60f8      	str	r0, [r7, #12]
 8034eb4:	60b9      	str	r1, [r7, #8]
 8034eb6:	603b      	str	r3, [r7, #0]
 8034eb8:	4613      	mov	r3, r2
 8034eba:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8034ebc:	68fb      	ldr	r3, [r7, #12]
 8034ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8034ec2:	2b20      	cmp	r3, #32
 8034ec4:	f040 80c0 	bne.w	8035048 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 8034ec8:	68bb      	ldr	r3, [r7, #8]
 8034eca:	2b00      	cmp	r3, #0
 8034ecc:	d002      	beq.n	8034ed4 <HAL_UART_Receive+0x28>
 8034ece:	88fb      	ldrh	r3, [r7, #6]
 8034ed0:	2b00      	cmp	r3, #0
 8034ed2:	d101      	bne.n	8034ed8 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8034ed4:	2301      	movs	r3, #1
 8034ed6:	e0b8      	b.n	803504a <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 8034ed8:	68fb      	ldr	r3, [r7, #12]
 8034eda:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8034ede:	2b01      	cmp	r3, #1
 8034ee0:	d101      	bne.n	8034ee6 <HAL_UART_Receive+0x3a>
 8034ee2:	2302      	movs	r3, #2
 8034ee4:	e0b1      	b.n	803504a <HAL_UART_Receive+0x19e>
 8034ee6:	68fb      	ldr	r3, [r7, #12]
 8034ee8:	2201      	movs	r2, #1
 8034eea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8034eee:	68fb      	ldr	r3, [r7, #12]
 8034ef0:	2200      	movs	r2, #0
 8034ef2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8034ef6:	68fb      	ldr	r3, [r7, #12]
 8034ef8:	2222      	movs	r2, #34	; 0x22
 8034efa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8034efe:	68fb      	ldr	r3, [r7, #12]
 8034f00:	2200      	movs	r2, #0
 8034f02:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8034f04:	f7f5 fe58 	bl	802abb8 <HAL_GetTick>
 8034f08:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8034f0a:	68fb      	ldr	r3, [r7, #12]
 8034f0c:	88fa      	ldrh	r2, [r7, #6]
 8034f0e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8034f12:	68fb      	ldr	r3, [r7, #12]
 8034f14:	88fa      	ldrh	r2, [r7, #6]
 8034f16:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8034f1a:	68fb      	ldr	r3, [r7, #12]
 8034f1c:	689b      	ldr	r3, [r3, #8]
 8034f1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8034f22:	d10e      	bne.n	8034f42 <HAL_UART_Receive+0x96>
 8034f24:	68fb      	ldr	r3, [r7, #12]
 8034f26:	691b      	ldr	r3, [r3, #16]
 8034f28:	2b00      	cmp	r3, #0
 8034f2a:	d105      	bne.n	8034f38 <HAL_UART_Receive+0x8c>
 8034f2c:	68fb      	ldr	r3, [r7, #12]
 8034f2e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8034f32:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8034f36:	e02d      	b.n	8034f94 <HAL_UART_Receive+0xe8>
 8034f38:	68fb      	ldr	r3, [r7, #12]
 8034f3a:	22ff      	movs	r2, #255	; 0xff
 8034f3c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8034f40:	e028      	b.n	8034f94 <HAL_UART_Receive+0xe8>
 8034f42:	68fb      	ldr	r3, [r7, #12]
 8034f44:	689b      	ldr	r3, [r3, #8]
 8034f46:	2b00      	cmp	r3, #0
 8034f48:	d10d      	bne.n	8034f66 <HAL_UART_Receive+0xba>
 8034f4a:	68fb      	ldr	r3, [r7, #12]
 8034f4c:	691b      	ldr	r3, [r3, #16]
 8034f4e:	2b00      	cmp	r3, #0
 8034f50:	d104      	bne.n	8034f5c <HAL_UART_Receive+0xb0>
 8034f52:	68fb      	ldr	r3, [r7, #12]
 8034f54:	22ff      	movs	r2, #255	; 0xff
 8034f56:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8034f5a:	e01b      	b.n	8034f94 <HAL_UART_Receive+0xe8>
 8034f5c:	68fb      	ldr	r3, [r7, #12]
 8034f5e:	227f      	movs	r2, #127	; 0x7f
 8034f60:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8034f64:	e016      	b.n	8034f94 <HAL_UART_Receive+0xe8>
 8034f66:	68fb      	ldr	r3, [r7, #12]
 8034f68:	689b      	ldr	r3, [r3, #8]
 8034f6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8034f6e:	d10d      	bne.n	8034f8c <HAL_UART_Receive+0xe0>
 8034f70:	68fb      	ldr	r3, [r7, #12]
 8034f72:	691b      	ldr	r3, [r3, #16]
 8034f74:	2b00      	cmp	r3, #0
 8034f76:	d104      	bne.n	8034f82 <HAL_UART_Receive+0xd6>
 8034f78:	68fb      	ldr	r3, [r7, #12]
 8034f7a:	227f      	movs	r2, #127	; 0x7f
 8034f7c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8034f80:	e008      	b.n	8034f94 <HAL_UART_Receive+0xe8>
 8034f82:	68fb      	ldr	r3, [r7, #12]
 8034f84:	223f      	movs	r2, #63	; 0x3f
 8034f86:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8034f8a:	e003      	b.n	8034f94 <HAL_UART_Receive+0xe8>
 8034f8c:	68fb      	ldr	r3, [r7, #12]
 8034f8e:	2200      	movs	r2, #0
 8034f90:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8034f94:	68fb      	ldr	r3, [r7, #12]
 8034f96:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8034f9a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8034f9c:	68fb      	ldr	r3, [r7, #12]
 8034f9e:	689b      	ldr	r3, [r3, #8]
 8034fa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8034fa4:	d108      	bne.n	8034fb8 <HAL_UART_Receive+0x10c>
 8034fa6:	68fb      	ldr	r3, [r7, #12]
 8034fa8:	691b      	ldr	r3, [r3, #16]
 8034faa:	2b00      	cmp	r3, #0
 8034fac:	d104      	bne.n	8034fb8 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 8034fae:	2300      	movs	r3, #0
 8034fb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8034fb2:	68bb      	ldr	r3, [r7, #8]
 8034fb4:	61bb      	str	r3, [r7, #24]
 8034fb6:	e003      	b.n	8034fc0 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 8034fb8:	68bb      	ldr	r3, [r7, #8]
 8034fba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8034fbc:	2300      	movs	r3, #0
 8034fbe:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8034fc0:	68fb      	ldr	r3, [r7, #12]
 8034fc2:	2200      	movs	r2, #0
 8034fc4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8034fc8:	e032      	b.n	8035030 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8034fca:	683b      	ldr	r3, [r7, #0]
 8034fcc:	9300      	str	r3, [sp, #0]
 8034fce:	697b      	ldr	r3, [r7, #20]
 8034fd0:	2200      	movs	r2, #0
 8034fd2:	2120      	movs	r1, #32
 8034fd4:	68f8      	ldr	r0, [r7, #12]
 8034fd6:	f001 fb44 	bl	8036662 <UART_WaitOnFlagUntilTimeout>
 8034fda:	4603      	mov	r3, r0
 8034fdc:	2b00      	cmp	r3, #0
 8034fde:	d001      	beq.n	8034fe4 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 8034fe0:	2303      	movs	r3, #3
 8034fe2:	e032      	b.n	803504a <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 8034fe4:	69fb      	ldr	r3, [r7, #28]
 8034fe6:	2b00      	cmp	r3, #0
 8034fe8:	d10c      	bne.n	8035004 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8034fea:	68fb      	ldr	r3, [r7, #12]
 8034fec:	681b      	ldr	r3, [r3, #0]
 8034fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8034ff0:	b29a      	uxth	r2, r3
 8034ff2:	8a7b      	ldrh	r3, [r7, #18]
 8034ff4:	4013      	ands	r3, r2
 8034ff6:	b29a      	uxth	r2, r3
 8034ff8:	69bb      	ldr	r3, [r7, #24]
 8034ffa:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8034ffc:	69bb      	ldr	r3, [r7, #24]
 8034ffe:	3302      	adds	r3, #2
 8035000:	61bb      	str	r3, [r7, #24]
 8035002:	e00c      	b.n	803501e <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8035004:	68fb      	ldr	r3, [r7, #12]
 8035006:	681b      	ldr	r3, [r3, #0]
 8035008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803500a:	b2da      	uxtb	r2, r3
 803500c:	8a7b      	ldrh	r3, [r7, #18]
 803500e:	b2db      	uxtb	r3, r3
 8035010:	4013      	ands	r3, r2
 8035012:	b2da      	uxtb	r2, r3
 8035014:	69fb      	ldr	r3, [r7, #28]
 8035016:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8035018:	69fb      	ldr	r3, [r7, #28]
 803501a:	3301      	adds	r3, #1
 803501c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 803501e:	68fb      	ldr	r3, [r7, #12]
 8035020:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8035024:	b29b      	uxth	r3, r3
 8035026:	3b01      	subs	r3, #1
 8035028:	b29a      	uxth	r2, r3
 803502a:	68fb      	ldr	r3, [r7, #12]
 803502c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8035030:	68fb      	ldr	r3, [r7, #12]
 8035032:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8035036:	b29b      	uxth	r3, r3
 8035038:	2b00      	cmp	r3, #0
 803503a:	d1c6      	bne.n	8034fca <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 803503c:	68fb      	ldr	r3, [r7, #12]
 803503e:	2220      	movs	r2, #32
 8035040:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8035044:	2300      	movs	r3, #0
 8035046:	e000      	b.n	803504a <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 8035048:	2302      	movs	r3, #2
  }
}
 803504a:	4618      	mov	r0, r3
 803504c:	3720      	adds	r7, #32
 803504e:	46bd      	mov	sp, r7
 8035050:	bd80      	pop	{r7, pc}
	...

08035054 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8035054:	b480      	push	{r7}
 8035056:	b091      	sub	sp, #68	; 0x44
 8035058:	af00      	add	r7, sp, #0
 803505a:	60f8      	str	r0, [r7, #12]
 803505c:	60b9      	str	r1, [r7, #8]
 803505e:	4613      	mov	r3, r2
 8035060:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8035062:	68fb      	ldr	r3, [r7, #12]
 8035064:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8035068:	2b20      	cmp	r3, #32
 803506a:	f040 808c 	bne.w	8035186 <HAL_UART_Transmit_IT+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 803506e:	68bb      	ldr	r3, [r7, #8]
 8035070:	2b00      	cmp	r3, #0
 8035072:	d002      	beq.n	803507a <HAL_UART_Transmit_IT+0x26>
 8035074:	88fb      	ldrh	r3, [r7, #6]
 8035076:	2b00      	cmp	r3, #0
 8035078:	d101      	bne.n	803507e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 803507a:	2301      	movs	r3, #1
 803507c:	e084      	b.n	8035188 <HAL_UART_Transmit_IT+0x134>
    }

    __HAL_LOCK(huart);
 803507e:	68fb      	ldr	r3, [r7, #12]
 8035080:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8035084:	2b01      	cmp	r3, #1
 8035086:	d101      	bne.n	803508c <HAL_UART_Transmit_IT+0x38>
 8035088:	2302      	movs	r3, #2
 803508a:	e07d      	b.n	8035188 <HAL_UART_Transmit_IT+0x134>
 803508c:	68fb      	ldr	r3, [r7, #12]
 803508e:	2201      	movs	r2, #1
 8035090:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8035094:	68fb      	ldr	r3, [r7, #12]
 8035096:	68ba      	ldr	r2, [r7, #8]
 8035098:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 803509a:	68fb      	ldr	r3, [r7, #12]
 803509c:	88fa      	ldrh	r2, [r7, #6]
 803509e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80350a2:	68fb      	ldr	r3, [r7, #12]
 80350a4:	88fa      	ldrh	r2, [r7, #6]
 80350a6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 80350aa:	68fb      	ldr	r3, [r7, #12]
 80350ac:	2200      	movs	r2, #0
 80350ae:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80350b0:	68fb      	ldr	r3, [r7, #12]
 80350b2:	2200      	movs	r2, #0
 80350b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80350b8:	68fb      	ldr	r3, [r7, #12]
 80350ba:	2221      	movs	r2, #33	; 0x21
 80350bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80350c0:	68fb      	ldr	r3, [r7, #12]
 80350c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80350c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80350c8:	d12e      	bne.n	8035128 <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80350ca:	68fb      	ldr	r3, [r7, #12]
 80350cc:	689b      	ldr	r3, [r3, #8]
 80350ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80350d2:	d107      	bne.n	80350e4 <HAL_UART_Transmit_IT+0x90>
 80350d4:	68fb      	ldr	r3, [r7, #12]
 80350d6:	691b      	ldr	r3, [r3, #16]
 80350d8:	2b00      	cmp	r3, #0
 80350da:	d103      	bne.n	80350e4 <HAL_UART_Transmit_IT+0x90>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80350dc:	68fb      	ldr	r3, [r7, #12]
 80350de:	4a2d      	ldr	r2, [pc, #180]	; (8035194 <HAL_UART_Transmit_IT+0x140>)
 80350e0:	675a      	str	r2, [r3, #116]	; 0x74
 80350e2:	e002      	b.n	80350ea <HAL_UART_Transmit_IT+0x96>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80350e4:	68fb      	ldr	r3, [r7, #12]
 80350e6:	4a2c      	ldr	r2, [pc, #176]	; (8035198 <HAL_UART_Transmit_IT+0x144>)
 80350e8:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 80350ea:	68fb      	ldr	r3, [r7, #12]
 80350ec:	2200      	movs	r2, #0
 80350ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80350f2:	68fb      	ldr	r3, [r7, #12]
 80350f4:	681b      	ldr	r3, [r3, #0]
 80350f6:	3308      	adds	r3, #8
 80350f8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80350fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80350fc:	e853 3f00 	ldrex	r3, [r3]
 8035100:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8035102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8035104:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8035108:	63bb      	str	r3, [r7, #56]	; 0x38
 803510a:	68fb      	ldr	r3, [r7, #12]
 803510c:	681b      	ldr	r3, [r3, #0]
 803510e:	3308      	adds	r3, #8
 8035110:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8035112:	637a      	str	r2, [r7, #52]	; 0x34
 8035114:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8035116:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8035118:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 803511a:	e841 2300 	strex	r3, r2, [r1]
 803511e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8035120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8035122:	2b00      	cmp	r3, #0
 8035124:	d1e5      	bne.n	80350f2 <HAL_UART_Transmit_IT+0x9e>
 8035126:	e02c      	b.n	8035182 <HAL_UART_Transmit_IT+0x12e>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8035128:	68fb      	ldr	r3, [r7, #12]
 803512a:	689b      	ldr	r3, [r3, #8]
 803512c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8035130:	d107      	bne.n	8035142 <HAL_UART_Transmit_IT+0xee>
 8035132:	68fb      	ldr	r3, [r7, #12]
 8035134:	691b      	ldr	r3, [r3, #16]
 8035136:	2b00      	cmp	r3, #0
 8035138:	d103      	bne.n	8035142 <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 803513a:	68fb      	ldr	r3, [r7, #12]
 803513c:	4a17      	ldr	r2, [pc, #92]	; (803519c <HAL_UART_Transmit_IT+0x148>)
 803513e:	675a      	str	r2, [r3, #116]	; 0x74
 8035140:	e002      	b.n	8035148 <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8035142:	68fb      	ldr	r3, [r7, #12]
 8035144:	4a16      	ldr	r2, [pc, #88]	; (80351a0 <HAL_UART_Transmit_IT+0x14c>)
 8035146:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8035148:	68fb      	ldr	r3, [r7, #12]
 803514a:	2200      	movs	r2, #0
 803514c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8035150:	68fb      	ldr	r3, [r7, #12]
 8035152:	681b      	ldr	r3, [r3, #0]
 8035154:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8035156:	697b      	ldr	r3, [r7, #20]
 8035158:	e853 3f00 	ldrex	r3, [r3]
 803515c:	613b      	str	r3, [r7, #16]
   return(result);
 803515e:	693b      	ldr	r3, [r7, #16]
 8035160:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8035164:	63fb      	str	r3, [r7, #60]	; 0x3c
 8035166:	68fb      	ldr	r3, [r7, #12]
 8035168:	681b      	ldr	r3, [r3, #0]
 803516a:	461a      	mov	r2, r3
 803516c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 803516e:	623b      	str	r3, [r7, #32]
 8035170:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8035172:	69f9      	ldr	r1, [r7, #28]
 8035174:	6a3a      	ldr	r2, [r7, #32]
 8035176:	e841 2300 	strex	r3, r2, [r1]
 803517a:	61bb      	str	r3, [r7, #24]
   return(result);
 803517c:	69bb      	ldr	r3, [r7, #24]
 803517e:	2b00      	cmp	r3, #0
 8035180:	d1e6      	bne.n	8035150 <HAL_UART_Transmit_IT+0xfc>
    }

    return HAL_OK;
 8035182:	2300      	movs	r3, #0
 8035184:	e000      	b.n	8035188 <HAL_UART_Transmit_IT+0x134>
  }
  else
  {
    return HAL_BUSY;
 8035186:	2302      	movs	r3, #2
  }
}
 8035188:	4618      	mov	r0, r3
 803518a:	3744      	adds	r7, #68	; 0x44
 803518c:	46bd      	mov	sp, r7
 803518e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8035192:	4770      	bx	lr
 8035194:	08036d9b 	.word	0x08036d9b
 8035198:	08036cbb 	.word	0x08036cbb
 803519c:	08036bf9 	.word	0x08036bf9
 80351a0:	08036b41 	.word	0x08036b41

080351a4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80351a4:	b580      	push	{r7, lr}
 80351a6:	b08a      	sub	sp, #40	; 0x28
 80351a8:	af00      	add	r7, sp, #0
 80351aa:	60f8      	str	r0, [r7, #12]
 80351ac:	60b9      	str	r1, [r7, #8]
 80351ae:	4613      	mov	r3, r2
 80351b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80351b2:	68fb      	ldr	r3, [r7, #12]
 80351b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80351b8:	2b20      	cmp	r3, #32
 80351ba:	d142      	bne.n	8035242 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80351bc:	68bb      	ldr	r3, [r7, #8]
 80351be:	2b00      	cmp	r3, #0
 80351c0:	d002      	beq.n	80351c8 <HAL_UART_Receive_IT+0x24>
 80351c2:	88fb      	ldrh	r3, [r7, #6]
 80351c4:	2b00      	cmp	r3, #0
 80351c6:	d101      	bne.n	80351cc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80351c8:	2301      	movs	r3, #1
 80351ca:	e03b      	b.n	8035244 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 80351cc:	68fb      	ldr	r3, [r7, #12]
 80351ce:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80351d2:	2b01      	cmp	r3, #1
 80351d4:	d101      	bne.n	80351da <HAL_UART_Receive_IT+0x36>
 80351d6:	2302      	movs	r3, #2
 80351d8:	e034      	b.n	8035244 <HAL_UART_Receive_IT+0xa0>
 80351da:	68fb      	ldr	r3, [r7, #12]
 80351dc:	2201      	movs	r2, #1
 80351de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80351e2:	68fb      	ldr	r3, [r7, #12]
 80351e4:	2200      	movs	r2, #0
 80351e6:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80351e8:	68fb      	ldr	r3, [r7, #12]
 80351ea:	681b      	ldr	r3, [r3, #0]
 80351ec:	4a17      	ldr	r2, [pc, #92]	; (803524c <HAL_UART_Receive_IT+0xa8>)
 80351ee:	4293      	cmp	r3, r2
 80351f0:	d01f      	beq.n	8035232 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80351f2:	68fb      	ldr	r3, [r7, #12]
 80351f4:	681b      	ldr	r3, [r3, #0]
 80351f6:	685b      	ldr	r3, [r3, #4]
 80351f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80351fc:	2b00      	cmp	r3, #0
 80351fe:	d018      	beq.n	8035232 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8035200:	68fb      	ldr	r3, [r7, #12]
 8035202:	681b      	ldr	r3, [r3, #0]
 8035204:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8035206:	697b      	ldr	r3, [r7, #20]
 8035208:	e853 3f00 	ldrex	r3, [r3]
 803520c:	613b      	str	r3, [r7, #16]
   return(result);
 803520e:	693b      	ldr	r3, [r7, #16]
 8035210:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8035214:	627b      	str	r3, [r7, #36]	; 0x24
 8035216:	68fb      	ldr	r3, [r7, #12]
 8035218:	681b      	ldr	r3, [r3, #0]
 803521a:	461a      	mov	r2, r3
 803521c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803521e:	623b      	str	r3, [r7, #32]
 8035220:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8035222:	69f9      	ldr	r1, [r7, #28]
 8035224:	6a3a      	ldr	r2, [r7, #32]
 8035226:	e841 2300 	strex	r3, r2, [r1]
 803522a:	61bb      	str	r3, [r7, #24]
   return(result);
 803522c:	69bb      	ldr	r3, [r7, #24]
 803522e:	2b00      	cmp	r3, #0
 8035230:	d1e6      	bne.n	8035200 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8035232:	88fb      	ldrh	r3, [r7, #6]
 8035234:	461a      	mov	r2, r3
 8035236:	68b9      	ldr	r1, [r7, #8]
 8035238:	68f8      	ldr	r0, [r7, #12]
 803523a:	f001 fadb 	bl	80367f4 <UART_Start_Receive_IT>
 803523e:	4603      	mov	r3, r0
 8035240:	e000      	b.n	8035244 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8035242:	2302      	movs	r3, #2
  }
}
 8035244:	4618      	mov	r0, r3
 8035246:	3728      	adds	r7, #40	; 0x28
 8035248:	46bd      	mov	sp, r7
 803524a:	bd80      	pop	{r7, pc}
 803524c:	58000c00 	.word	0x58000c00

08035250 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8035250:	b580      	push	{r7, lr}
 8035252:	b0ba      	sub	sp, #232	; 0xe8
 8035254:	af00      	add	r7, sp, #0
 8035256:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8035258:	687b      	ldr	r3, [r7, #4]
 803525a:	681b      	ldr	r3, [r3, #0]
 803525c:	69db      	ldr	r3, [r3, #28]
 803525e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8035262:	687b      	ldr	r3, [r7, #4]
 8035264:	681b      	ldr	r3, [r3, #0]
 8035266:	681b      	ldr	r3, [r3, #0]
 8035268:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 803526c:	687b      	ldr	r3, [r7, #4]
 803526e:	681b      	ldr	r3, [r3, #0]
 8035270:	689b      	ldr	r3, [r3, #8]
 8035272:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8035276:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 803527a:	f640 030f 	movw	r3, #2063	; 0x80f
 803527e:	4013      	ands	r3, r2
 8035280:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8035284:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8035288:	2b00      	cmp	r3, #0
 803528a:	d11b      	bne.n	80352c4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 803528c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8035290:	f003 0320 	and.w	r3, r3, #32
 8035294:	2b00      	cmp	r3, #0
 8035296:	d015      	beq.n	80352c4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8035298:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 803529c:	f003 0320 	and.w	r3, r3, #32
 80352a0:	2b00      	cmp	r3, #0
 80352a2:	d105      	bne.n	80352b0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80352a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80352a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80352ac:	2b00      	cmp	r3, #0
 80352ae:	d009      	beq.n	80352c4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80352b0:	687b      	ldr	r3, [r7, #4]
 80352b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80352b4:	2b00      	cmp	r3, #0
 80352b6:	f000 835a 	beq.w	803596e <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 80352ba:	687b      	ldr	r3, [r7, #4]
 80352bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80352be:	6878      	ldr	r0, [r7, #4]
 80352c0:	4798      	blx	r3
      }
      return;
 80352c2:	e354      	b.n	803596e <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80352c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80352c8:	2b00      	cmp	r3, #0
 80352ca:	f000 811f 	beq.w	803550c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80352ce:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80352d2:	4b8b      	ldr	r3, [pc, #556]	; (8035500 <HAL_UART_IRQHandler+0x2b0>)
 80352d4:	4013      	ands	r3, r2
 80352d6:	2b00      	cmp	r3, #0
 80352d8:	d106      	bne.n	80352e8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80352da:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80352de:	4b89      	ldr	r3, [pc, #548]	; (8035504 <HAL_UART_IRQHandler+0x2b4>)
 80352e0:	4013      	ands	r3, r2
 80352e2:	2b00      	cmp	r3, #0
 80352e4:	f000 8112 	beq.w	803550c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80352e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80352ec:	f003 0301 	and.w	r3, r3, #1
 80352f0:	2b00      	cmp	r3, #0
 80352f2:	d011      	beq.n	8035318 <HAL_UART_IRQHandler+0xc8>
 80352f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80352f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80352fc:	2b00      	cmp	r3, #0
 80352fe:	d00b      	beq.n	8035318 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8035300:	687b      	ldr	r3, [r7, #4]
 8035302:	681b      	ldr	r3, [r3, #0]
 8035304:	2201      	movs	r2, #1
 8035306:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8035308:	687b      	ldr	r3, [r7, #4]
 803530a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 803530e:	f043 0201 	orr.w	r2, r3, #1
 8035312:	687b      	ldr	r3, [r7, #4]
 8035314:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8035318:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 803531c:	f003 0302 	and.w	r3, r3, #2
 8035320:	2b00      	cmp	r3, #0
 8035322:	d011      	beq.n	8035348 <HAL_UART_IRQHandler+0xf8>
 8035324:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8035328:	f003 0301 	and.w	r3, r3, #1
 803532c:	2b00      	cmp	r3, #0
 803532e:	d00b      	beq.n	8035348 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8035330:	687b      	ldr	r3, [r7, #4]
 8035332:	681b      	ldr	r3, [r3, #0]
 8035334:	2202      	movs	r2, #2
 8035336:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8035338:	687b      	ldr	r3, [r7, #4]
 803533a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 803533e:	f043 0204 	orr.w	r2, r3, #4
 8035342:	687b      	ldr	r3, [r7, #4]
 8035344:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8035348:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 803534c:	f003 0304 	and.w	r3, r3, #4
 8035350:	2b00      	cmp	r3, #0
 8035352:	d011      	beq.n	8035378 <HAL_UART_IRQHandler+0x128>
 8035354:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8035358:	f003 0301 	and.w	r3, r3, #1
 803535c:	2b00      	cmp	r3, #0
 803535e:	d00b      	beq.n	8035378 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8035360:	687b      	ldr	r3, [r7, #4]
 8035362:	681b      	ldr	r3, [r3, #0]
 8035364:	2204      	movs	r2, #4
 8035366:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8035368:	687b      	ldr	r3, [r7, #4]
 803536a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 803536e:	f043 0202 	orr.w	r2, r3, #2
 8035372:	687b      	ldr	r3, [r7, #4]
 8035374:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8035378:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 803537c:	f003 0308 	and.w	r3, r3, #8
 8035380:	2b00      	cmp	r3, #0
 8035382:	d017      	beq.n	80353b4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8035384:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8035388:	f003 0320 	and.w	r3, r3, #32
 803538c:	2b00      	cmp	r3, #0
 803538e:	d105      	bne.n	803539c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8035390:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8035394:	4b5a      	ldr	r3, [pc, #360]	; (8035500 <HAL_UART_IRQHandler+0x2b0>)
 8035396:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8035398:	2b00      	cmp	r3, #0
 803539a:	d00b      	beq.n	80353b4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 803539c:	687b      	ldr	r3, [r7, #4]
 803539e:	681b      	ldr	r3, [r3, #0]
 80353a0:	2208      	movs	r2, #8
 80353a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80353a4:	687b      	ldr	r3, [r7, #4]
 80353a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80353aa:	f043 0208 	orr.w	r2, r3, #8
 80353ae:	687b      	ldr	r3, [r7, #4]
 80353b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80353b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80353b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80353bc:	2b00      	cmp	r3, #0
 80353be:	d012      	beq.n	80353e6 <HAL_UART_IRQHandler+0x196>
 80353c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80353c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80353c8:	2b00      	cmp	r3, #0
 80353ca:	d00c      	beq.n	80353e6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80353cc:	687b      	ldr	r3, [r7, #4]
 80353ce:	681b      	ldr	r3, [r3, #0]
 80353d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80353d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80353d6:	687b      	ldr	r3, [r7, #4]
 80353d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80353dc:	f043 0220 	orr.w	r2, r3, #32
 80353e0:	687b      	ldr	r3, [r7, #4]
 80353e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80353e6:	687b      	ldr	r3, [r7, #4]
 80353e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80353ec:	2b00      	cmp	r3, #0
 80353ee:	f000 82c0 	beq.w	8035972 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80353f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80353f6:	f003 0320 	and.w	r3, r3, #32
 80353fa:	2b00      	cmp	r3, #0
 80353fc:	d013      	beq.n	8035426 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80353fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8035402:	f003 0320 	and.w	r3, r3, #32
 8035406:	2b00      	cmp	r3, #0
 8035408:	d105      	bne.n	8035416 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 803540a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 803540e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8035412:	2b00      	cmp	r3, #0
 8035414:	d007      	beq.n	8035426 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8035416:	687b      	ldr	r3, [r7, #4]
 8035418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 803541a:	2b00      	cmp	r3, #0
 803541c:	d003      	beq.n	8035426 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 803541e:	687b      	ldr	r3, [r7, #4]
 8035420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8035422:	6878      	ldr	r0, [r7, #4]
 8035424:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8035426:	687b      	ldr	r3, [r7, #4]
 8035428:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 803542c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8035430:	687b      	ldr	r3, [r7, #4]
 8035432:	681b      	ldr	r3, [r3, #0]
 8035434:	689b      	ldr	r3, [r3, #8]
 8035436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 803543a:	2b40      	cmp	r3, #64	; 0x40
 803543c:	d005      	beq.n	803544a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 803543e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8035442:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8035446:	2b00      	cmp	r3, #0
 8035448:	d04f      	beq.n	80354ea <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 803544a:	6878      	ldr	r0, [r7, #4]
 803544c:	f001 fafc 	bl	8036a48 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8035450:	687b      	ldr	r3, [r7, #4]
 8035452:	681b      	ldr	r3, [r3, #0]
 8035454:	689b      	ldr	r3, [r3, #8]
 8035456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 803545a:	2b40      	cmp	r3, #64	; 0x40
 803545c:	d141      	bne.n	80354e2 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 803545e:	687b      	ldr	r3, [r7, #4]
 8035460:	681b      	ldr	r3, [r3, #0]
 8035462:	3308      	adds	r3, #8
 8035464:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8035468:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 803546c:	e853 3f00 	ldrex	r3, [r3]
 8035470:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8035474:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8035478:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 803547c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8035480:	687b      	ldr	r3, [r7, #4]
 8035482:	681b      	ldr	r3, [r3, #0]
 8035484:	3308      	adds	r3, #8
 8035486:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 803548a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 803548e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8035492:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8035496:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 803549a:	e841 2300 	strex	r3, r2, [r1]
 803549e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80354a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80354a6:	2b00      	cmp	r3, #0
 80354a8:	d1d9      	bne.n	803545e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80354aa:	687b      	ldr	r3, [r7, #4]
 80354ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80354ae:	2b00      	cmp	r3, #0
 80354b0:	d013      	beq.n	80354da <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80354b2:	687b      	ldr	r3, [r7, #4]
 80354b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80354b6:	4a14      	ldr	r2, [pc, #80]	; (8035508 <HAL_UART_IRQHandler+0x2b8>)
 80354b8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80354ba:	687b      	ldr	r3, [r7, #4]
 80354bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80354be:	4618      	mov	r0, r3
 80354c0:	f7f7 f95a 	bl	802c778 <HAL_DMA_Abort_IT>
 80354c4:	4603      	mov	r3, r0
 80354c6:	2b00      	cmp	r3, #0
 80354c8:	d017      	beq.n	80354fa <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80354ca:	687b      	ldr	r3, [r7, #4]
 80354cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80354ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80354d0:	687a      	ldr	r2, [r7, #4]
 80354d2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80354d4:	4610      	mov	r0, r2
 80354d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80354d8:	e00f      	b.n	80354fa <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80354da:	6878      	ldr	r0, [r7, #4]
 80354dc:	f000 fa56 	bl	803598c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80354e0:	e00b      	b.n	80354fa <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80354e2:	6878      	ldr	r0, [r7, #4]
 80354e4:	f000 fa52 	bl	803598c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80354e8:	e007      	b.n	80354fa <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80354ea:	6878      	ldr	r0, [r7, #4]
 80354ec:	f000 fa4e 	bl	803598c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80354f0:	687b      	ldr	r3, [r7, #4]
 80354f2:	2200      	movs	r2, #0
 80354f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80354f8:	e23b      	b.n	8035972 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80354fa:	bf00      	nop
    return;
 80354fc:	e239      	b.n	8035972 <HAL_UART_IRQHandler+0x722>
 80354fe:	bf00      	nop
 8035500:	10000001 	.word	0x10000001
 8035504:	04000120 	.word	0x04000120
 8035508:	08036b15 	.word	0x08036b15

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 803550c:	687b      	ldr	r3, [r7, #4]
 803550e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8035510:	2b01      	cmp	r3, #1
 8035512:	f040 81ce 	bne.w	80358b2 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8035516:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 803551a:	f003 0310 	and.w	r3, r3, #16
 803551e:	2b00      	cmp	r3, #0
 8035520:	f000 81c7 	beq.w	80358b2 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8035524:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8035528:	f003 0310 	and.w	r3, r3, #16
 803552c:	2b00      	cmp	r3, #0
 803552e:	f000 81c0 	beq.w	80358b2 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8035532:	687b      	ldr	r3, [r7, #4]
 8035534:	681b      	ldr	r3, [r3, #0]
 8035536:	2210      	movs	r2, #16
 8035538:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 803553a:	687b      	ldr	r3, [r7, #4]
 803553c:	681b      	ldr	r3, [r3, #0]
 803553e:	689b      	ldr	r3, [r3, #8]
 8035540:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8035544:	2b40      	cmp	r3, #64	; 0x40
 8035546:	f040 813b 	bne.w	80357c0 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 803554a:	687b      	ldr	r3, [r7, #4]
 803554c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 803554e:	681b      	ldr	r3, [r3, #0]
 8035550:	4a8b      	ldr	r2, [pc, #556]	; (8035780 <HAL_UART_IRQHandler+0x530>)
 8035552:	4293      	cmp	r3, r2
 8035554:	d059      	beq.n	803560a <HAL_UART_IRQHandler+0x3ba>
 8035556:	687b      	ldr	r3, [r7, #4]
 8035558:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 803555a:	681b      	ldr	r3, [r3, #0]
 803555c:	4a89      	ldr	r2, [pc, #548]	; (8035784 <HAL_UART_IRQHandler+0x534>)
 803555e:	4293      	cmp	r3, r2
 8035560:	d053      	beq.n	803560a <HAL_UART_IRQHandler+0x3ba>
 8035562:	687b      	ldr	r3, [r7, #4]
 8035564:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8035566:	681b      	ldr	r3, [r3, #0]
 8035568:	4a87      	ldr	r2, [pc, #540]	; (8035788 <HAL_UART_IRQHandler+0x538>)
 803556a:	4293      	cmp	r3, r2
 803556c:	d04d      	beq.n	803560a <HAL_UART_IRQHandler+0x3ba>
 803556e:	687b      	ldr	r3, [r7, #4]
 8035570:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8035572:	681b      	ldr	r3, [r3, #0]
 8035574:	4a85      	ldr	r2, [pc, #532]	; (803578c <HAL_UART_IRQHandler+0x53c>)
 8035576:	4293      	cmp	r3, r2
 8035578:	d047      	beq.n	803560a <HAL_UART_IRQHandler+0x3ba>
 803557a:	687b      	ldr	r3, [r7, #4]
 803557c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 803557e:	681b      	ldr	r3, [r3, #0]
 8035580:	4a83      	ldr	r2, [pc, #524]	; (8035790 <HAL_UART_IRQHandler+0x540>)
 8035582:	4293      	cmp	r3, r2
 8035584:	d041      	beq.n	803560a <HAL_UART_IRQHandler+0x3ba>
 8035586:	687b      	ldr	r3, [r7, #4]
 8035588:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 803558a:	681b      	ldr	r3, [r3, #0]
 803558c:	4a81      	ldr	r2, [pc, #516]	; (8035794 <HAL_UART_IRQHandler+0x544>)
 803558e:	4293      	cmp	r3, r2
 8035590:	d03b      	beq.n	803560a <HAL_UART_IRQHandler+0x3ba>
 8035592:	687b      	ldr	r3, [r7, #4]
 8035594:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8035596:	681b      	ldr	r3, [r3, #0]
 8035598:	4a7f      	ldr	r2, [pc, #508]	; (8035798 <HAL_UART_IRQHandler+0x548>)
 803559a:	4293      	cmp	r3, r2
 803559c:	d035      	beq.n	803560a <HAL_UART_IRQHandler+0x3ba>
 803559e:	687b      	ldr	r3, [r7, #4]
 80355a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80355a2:	681b      	ldr	r3, [r3, #0]
 80355a4:	4a7d      	ldr	r2, [pc, #500]	; (803579c <HAL_UART_IRQHandler+0x54c>)
 80355a6:	4293      	cmp	r3, r2
 80355a8:	d02f      	beq.n	803560a <HAL_UART_IRQHandler+0x3ba>
 80355aa:	687b      	ldr	r3, [r7, #4]
 80355ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80355ae:	681b      	ldr	r3, [r3, #0]
 80355b0:	4a7b      	ldr	r2, [pc, #492]	; (80357a0 <HAL_UART_IRQHandler+0x550>)
 80355b2:	4293      	cmp	r3, r2
 80355b4:	d029      	beq.n	803560a <HAL_UART_IRQHandler+0x3ba>
 80355b6:	687b      	ldr	r3, [r7, #4]
 80355b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80355ba:	681b      	ldr	r3, [r3, #0]
 80355bc:	4a79      	ldr	r2, [pc, #484]	; (80357a4 <HAL_UART_IRQHandler+0x554>)
 80355be:	4293      	cmp	r3, r2
 80355c0:	d023      	beq.n	803560a <HAL_UART_IRQHandler+0x3ba>
 80355c2:	687b      	ldr	r3, [r7, #4]
 80355c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80355c6:	681b      	ldr	r3, [r3, #0]
 80355c8:	4a77      	ldr	r2, [pc, #476]	; (80357a8 <HAL_UART_IRQHandler+0x558>)
 80355ca:	4293      	cmp	r3, r2
 80355cc:	d01d      	beq.n	803560a <HAL_UART_IRQHandler+0x3ba>
 80355ce:	687b      	ldr	r3, [r7, #4]
 80355d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80355d2:	681b      	ldr	r3, [r3, #0]
 80355d4:	4a75      	ldr	r2, [pc, #468]	; (80357ac <HAL_UART_IRQHandler+0x55c>)
 80355d6:	4293      	cmp	r3, r2
 80355d8:	d017      	beq.n	803560a <HAL_UART_IRQHandler+0x3ba>
 80355da:	687b      	ldr	r3, [r7, #4]
 80355dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80355de:	681b      	ldr	r3, [r3, #0]
 80355e0:	4a73      	ldr	r2, [pc, #460]	; (80357b0 <HAL_UART_IRQHandler+0x560>)
 80355e2:	4293      	cmp	r3, r2
 80355e4:	d011      	beq.n	803560a <HAL_UART_IRQHandler+0x3ba>
 80355e6:	687b      	ldr	r3, [r7, #4]
 80355e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80355ea:	681b      	ldr	r3, [r3, #0]
 80355ec:	4a71      	ldr	r2, [pc, #452]	; (80357b4 <HAL_UART_IRQHandler+0x564>)
 80355ee:	4293      	cmp	r3, r2
 80355f0:	d00b      	beq.n	803560a <HAL_UART_IRQHandler+0x3ba>
 80355f2:	687b      	ldr	r3, [r7, #4]
 80355f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80355f6:	681b      	ldr	r3, [r3, #0]
 80355f8:	4a6f      	ldr	r2, [pc, #444]	; (80357b8 <HAL_UART_IRQHandler+0x568>)
 80355fa:	4293      	cmp	r3, r2
 80355fc:	d005      	beq.n	803560a <HAL_UART_IRQHandler+0x3ba>
 80355fe:	687b      	ldr	r3, [r7, #4]
 8035600:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8035602:	681b      	ldr	r3, [r3, #0]
 8035604:	4a6d      	ldr	r2, [pc, #436]	; (80357bc <HAL_UART_IRQHandler+0x56c>)
 8035606:	4293      	cmp	r3, r2
 8035608:	d105      	bne.n	8035616 <HAL_UART_IRQHandler+0x3c6>
 803560a:	687b      	ldr	r3, [r7, #4]
 803560c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 803560e:	681b      	ldr	r3, [r3, #0]
 8035610:	685b      	ldr	r3, [r3, #4]
 8035612:	b29b      	uxth	r3, r3
 8035614:	e004      	b.n	8035620 <HAL_UART_IRQHandler+0x3d0>
 8035616:	687b      	ldr	r3, [r7, #4]
 8035618:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 803561a:	681b      	ldr	r3, [r3, #0]
 803561c:	685b      	ldr	r3, [r3, #4]
 803561e:	b29b      	uxth	r3, r3
 8035620:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8035624:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8035628:	2b00      	cmp	r3, #0
 803562a:	f000 81a4 	beq.w	8035976 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 803562e:	687b      	ldr	r3, [r7, #4]
 8035630:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8035634:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8035638:	429a      	cmp	r2, r3
 803563a:	f080 819c 	bcs.w	8035976 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 803563e:	687b      	ldr	r3, [r7, #4]
 8035640:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8035644:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8035648:	687b      	ldr	r3, [r7, #4]
 803564a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 803564c:	69db      	ldr	r3, [r3, #28]
 803564e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8035652:	f000 8086 	beq.w	8035762 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8035656:	687b      	ldr	r3, [r7, #4]
 8035658:	681b      	ldr	r3, [r3, #0]
 803565a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803565e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8035662:	e853 3f00 	ldrex	r3, [r3]
 8035666:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 803566a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 803566e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8035672:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8035676:	687b      	ldr	r3, [r7, #4]
 8035678:	681b      	ldr	r3, [r3, #0]
 803567a:	461a      	mov	r2, r3
 803567c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8035680:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8035684:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8035688:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 803568c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8035690:	e841 2300 	strex	r3, r2, [r1]
 8035694:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8035698:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 803569c:	2b00      	cmp	r3, #0
 803569e:	d1da      	bne.n	8035656 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80356a0:	687b      	ldr	r3, [r7, #4]
 80356a2:	681b      	ldr	r3, [r3, #0]
 80356a4:	3308      	adds	r3, #8
 80356a6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80356a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80356aa:	e853 3f00 	ldrex	r3, [r3]
 80356ae:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80356b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80356b2:	f023 0301 	bic.w	r3, r3, #1
 80356b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80356ba:	687b      	ldr	r3, [r7, #4]
 80356bc:	681b      	ldr	r3, [r3, #0]
 80356be:	3308      	adds	r3, #8
 80356c0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80356c4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80356c8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80356ca:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80356cc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80356d0:	e841 2300 	strex	r3, r2, [r1]
 80356d4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80356d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80356d8:	2b00      	cmp	r3, #0
 80356da:	d1e1      	bne.n	80356a0 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80356dc:	687b      	ldr	r3, [r7, #4]
 80356de:	681b      	ldr	r3, [r3, #0]
 80356e0:	3308      	adds	r3, #8
 80356e2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80356e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80356e6:	e853 3f00 	ldrex	r3, [r3]
 80356ea:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80356ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80356ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80356f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80356f6:	687b      	ldr	r3, [r7, #4]
 80356f8:	681b      	ldr	r3, [r3, #0]
 80356fa:	3308      	adds	r3, #8
 80356fc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8035700:	66fa      	str	r2, [r7, #108]	; 0x6c
 8035702:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8035704:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8035706:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8035708:	e841 2300 	strex	r3, r2, [r1]
 803570c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 803570e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8035710:	2b00      	cmp	r3, #0
 8035712:	d1e3      	bne.n	80356dc <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8035714:	687b      	ldr	r3, [r7, #4]
 8035716:	2220      	movs	r2, #32
 8035718:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 803571c:	687b      	ldr	r3, [r7, #4]
 803571e:	2200      	movs	r2, #0
 8035720:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8035722:	687b      	ldr	r3, [r7, #4]
 8035724:	681b      	ldr	r3, [r3, #0]
 8035726:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8035728:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 803572a:	e853 3f00 	ldrex	r3, [r3]
 803572e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8035730:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8035732:	f023 0310 	bic.w	r3, r3, #16
 8035736:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 803573a:	687b      	ldr	r3, [r7, #4]
 803573c:	681b      	ldr	r3, [r3, #0]
 803573e:	461a      	mov	r2, r3
 8035740:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8035744:	65bb      	str	r3, [r7, #88]	; 0x58
 8035746:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8035748:	6d79      	ldr	r1, [r7, #84]	; 0x54
 803574a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 803574c:	e841 2300 	strex	r3, r2, [r1]
 8035750:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8035752:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8035754:	2b00      	cmp	r3, #0
 8035756:	d1e4      	bne.n	8035722 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8035758:	687b      	ldr	r3, [r7, #4]
 803575a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 803575c:	4618      	mov	r0, r3
 803575e:	f7f6 fced 	bl	802c13c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8035762:	687b      	ldr	r3, [r7, #4]
 8035764:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8035768:	687b      	ldr	r3, [r7, #4]
 803576a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 803576e:	b29b      	uxth	r3, r3
 8035770:	1ad3      	subs	r3, r2, r3
 8035772:	b29b      	uxth	r3, r3
 8035774:	4619      	mov	r1, r3
 8035776:	6878      	ldr	r0, [r7, #4]
 8035778:	f000 f912 	bl	80359a0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 803577c:	e0fb      	b.n	8035976 <HAL_UART_IRQHandler+0x726>
 803577e:	bf00      	nop
 8035780:	40020010 	.word	0x40020010
 8035784:	40020028 	.word	0x40020028
 8035788:	40020040 	.word	0x40020040
 803578c:	40020058 	.word	0x40020058
 8035790:	40020070 	.word	0x40020070
 8035794:	40020088 	.word	0x40020088
 8035798:	400200a0 	.word	0x400200a0
 803579c:	400200b8 	.word	0x400200b8
 80357a0:	40020410 	.word	0x40020410
 80357a4:	40020428 	.word	0x40020428
 80357a8:	40020440 	.word	0x40020440
 80357ac:	40020458 	.word	0x40020458
 80357b0:	40020470 	.word	0x40020470
 80357b4:	40020488 	.word	0x40020488
 80357b8:	400204a0 	.word	0x400204a0
 80357bc:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80357c0:	687b      	ldr	r3, [r7, #4]
 80357c2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80357c6:	687b      	ldr	r3, [r7, #4]
 80357c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80357cc:	b29b      	uxth	r3, r3
 80357ce:	1ad3      	subs	r3, r2, r3
 80357d0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80357d4:	687b      	ldr	r3, [r7, #4]
 80357d6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80357da:	b29b      	uxth	r3, r3
 80357dc:	2b00      	cmp	r3, #0
 80357de:	f000 80cc 	beq.w	803597a <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 80357e2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80357e6:	2b00      	cmp	r3, #0
 80357e8:	f000 80c7 	beq.w	803597a <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80357ec:	687b      	ldr	r3, [r7, #4]
 80357ee:	681b      	ldr	r3, [r3, #0]
 80357f0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80357f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80357f4:	e853 3f00 	ldrex	r3, [r3]
 80357f8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80357fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80357fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8035800:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8035804:	687b      	ldr	r3, [r7, #4]
 8035806:	681b      	ldr	r3, [r3, #0]
 8035808:	461a      	mov	r2, r3
 803580a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 803580e:	647b      	str	r3, [r7, #68]	; 0x44
 8035810:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8035812:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8035814:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8035816:	e841 2300 	strex	r3, r2, [r1]
 803581a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 803581c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 803581e:	2b00      	cmp	r3, #0
 8035820:	d1e4      	bne.n	80357ec <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8035822:	687b      	ldr	r3, [r7, #4]
 8035824:	681b      	ldr	r3, [r3, #0]
 8035826:	3308      	adds	r3, #8
 8035828:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803582a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803582c:	e853 3f00 	ldrex	r3, [r3]
 8035830:	623b      	str	r3, [r7, #32]
   return(result);
 8035832:	6a3a      	ldr	r2, [r7, #32]
 8035834:	4b54      	ldr	r3, [pc, #336]	; (8035988 <HAL_UART_IRQHandler+0x738>)
 8035836:	4013      	ands	r3, r2
 8035838:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 803583c:	687b      	ldr	r3, [r7, #4]
 803583e:	681b      	ldr	r3, [r3, #0]
 8035840:	3308      	adds	r3, #8
 8035842:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8035846:	633a      	str	r2, [r7, #48]	; 0x30
 8035848:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803584a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 803584c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 803584e:	e841 2300 	strex	r3, r2, [r1]
 8035852:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8035854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8035856:	2b00      	cmp	r3, #0
 8035858:	d1e3      	bne.n	8035822 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 803585a:	687b      	ldr	r3, [r7, #4]
 803585c:	2220      	movs	r2, #32
 803585e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8035862:	687b      	ldr	r3, [r7, #4]
 8035864:	2200      	movs	r2, #0
 8035866:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8035868:	687b      	ldr	r3, [r7, #4]
 803586a:	2200      	movs	r2, #0
 803586c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 803586e:	687b      	ldr	r3, [r7, #4]
 8035870:	681b      	ldr	r3, [r3, #0]
 8035872:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8035874:	693b      	ldr	r3, [r7, #16]
 8035876:	e853 3f00 	ldrex	r3, [r3]
 803587a:	60fb      	str	r3, [r7, #12]
   return(result);
 803587c:	68fb      	ldr	r3, [r7, #12]
 803587e:	f023 0310 	bic.w	r3, r3, #16
 8035882:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8035886:	687b      	ldr	r3, [r7, #4]
 8035888:	681b      	ldr	r3, [r3, #0]
 803588a:	461a      	mov	r2, r3
 803588c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8035890:	61fb      	str	r3, [r7, #28]
 8035892:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8035894:	69b9      	ldr	r1, [r7, #24]
 8035896:	69fa      	ldr	r2, [r7, #28]
 8035898:	e841 2300 	strex	r3, r2, [r1]
 803589c:	617b      	str	r3, [r7, #20]
   return(result);
 803589e:	697b      	ldr	r3, [r7, #20]
 80358a0:	2b00      	cmp	r3, #0
 80358a2:	d1e4      	bne.n	803586e <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80358a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80358a8:	4619      	mov	r1, r3
 80358aa:	6878      	ldr	r0, [r7, #4]
 80358ac:	f000 f878 	bl	80359a0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80358b0:	e063      	b.n	803597a <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80358b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80358b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80358ba:	2b00      	cmp	r3, #0
 80358bc:	d00e      	beq.n	80358dc <HAL_UART_IRQHandler+0x68c>
 80358be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80358c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80358c6:	2b00      	cmp	r3, #0
 80358c8:	d008      	beq.n	80358dc <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80358ca:	687b      	ldr	r3, [r7, #4]
 80358cc:	681b      	ldr	r3, [r3, #0]
 80358ce:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80358d2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80358d4:	6878      	ldr	r0, [r7, #4]
 80358d6:	f001 ff5d 	bl	8037794 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80358da:	e051      	b.n	8035980 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80358dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80358e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80358e4:	2b00      	cmp	r3, #0
 80358e6:	d014      	beq.n	8035912 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80358e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80358ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80358f0:	2b00      	cmp	r3, #0
 80358f2:	d105      	bne.n	8035900 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80358f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80358f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80358fc:	2b00      	cmp	r3, #0
 80358fe:	d008      	beq.n	8035912 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 8035900:	687b      	ldr	r3, [r7, #4]
 8035902:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8035904:	2b00      	cmp	r3, #0
 8035906:	d03a      	beq.n	803597e <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 8035908:	687b      	ldr	r3, [r7, #4]
 803590a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 803590c:	6878      	ldr	r0, [r7, #4]
 803590e:	4798      	blx	r3
    }
    return;
 8035910:	e035      	b.n	803597e <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8035912:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8035916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 803591a:	2b00      	cmp	r3, #0
 803591c:	d009      	beq.n	8035932 <HAL_UART_IRQHandler+0x6e2>
 803591e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8035922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8035926:	2b00      	cmp	r3, #0
 8035928:	d003      	beq.n	8035932 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 803592a:	6878      	ldr	r0, [r7, #4]
 803592c:	f001 faaa 	bl	8036e84 <UART_EndTransmit_IT>
    return;
 8035930:	e026      	b.n	8035980 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8035932:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8035936:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 803593a:	2b00      	cmp	r3, #0
 803593c:	d009      	beq.n	8035952 <HAL_UART_IRQHandler+0x702>
 803593e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8035942:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8035946:	2b00      	cmp	r3, #0
 8035948:	d003      	beq.n	8035952 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 803594a:	6878      	ldr	r0, [r7, #4]
 803594c:	f001 ff36 	bl	80377bc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8035950:	e016      	b.n	8035980 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8035952:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8035956:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 803595a:	2b00      	cmp	r3, #0
 803595c:	d010      	beq.n	8035980 <HAL_UART_IRQHandler+0x730>
 803595e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8035962:	2b00      	cmp	r3, #0
 8035964:	da0c      	bge.n	8035980 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8035966:	6878      	ldr	r0, [r7, #4]
 8035968:	f001 ff1e 	bl	80377a8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 803596c:	e008      	b.n	8035980 <HAL_UART_IRQHandler+0x730>
      return;
 803596e:	bf00      	nop
 8035970:	e006      	b.n	8035980 <HAL_UART_IRQHandler+0x730>
    return;
 8035972:	bf00      	nop
 8035974:	e004      	b.n	8035980 <HAL_UART_IRQHandler+0x730>
      return;
 8035976:	bf00      	nop
 8035978:	e002      	b.n	8035980 <HAL_UART_IRQHandler+0x730>
      return;
 803597a:	bf00      	nop
 803597c:	e000      	b.n	8035980 <HAL_UART_IRQHandler+0x730>
    return;
 803597e:	bf00      	nop
  }
}
 8035980:	37e8      	adds	r7, #232	; 0xe8
 8035982:	46bd      	mov	sp, r7
 8035984:	bd80      	pop	{r7, pc}
 8035986:	bf00      	nop
 8035988:	effffffe 	.word	0xeffffffe

0803598c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 803598c:	b480      	push	{r7}
 803598e:	b083      	sub	sp, #12
 8035990:	af00      	add	r7, sp, #0
 8035992:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8035994:	bf00      	nop
 8035996:	370c      	adds	r7, #12
 8035998:	46bd      	mov	sp, r7
 803599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803599e:	4770      	bx	lr

080359a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80359a0:	b480      	push	{r7}
 80359a2:	b083      	sub	sp, #12
 80359a4:	af00      	add	r7, sp, #0
 80359a6:	6078      	str	r0, [r7, #4]
 80359a8:	460b      	mov	r3, r1
 80359aa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80359ac:	bf00      	nop
 80359ae:	370c      	adds	r7, #12
 80359b0:	46bd      	mov	sp, r7
 80359b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80359b6:	4770      	bx	lr

080359b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80359b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80359bc:	b092      	sub	sp, #72	; 0x48
 80359be:	af00      	add	r7, sp, #0
 80359c0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80359c2:	2300      	movs	r3, #0
 80359c4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80359c8:	697b      	ldr	r3, [r7, #20]
 80359ca:	689a      	ldr	r2, [r3, #8]
 80359cc:	697b      	ldr	r3, [r7, #20]
 80359ce:	691b      	ldr	r3, [r3, #16]
 80359d0:	431a      	orrs	r2, r3
 80359d2:	697b      	ldr	r3, [r7, #20]
 80359d4:	695b      	ldr	r3, [r3, #20]
 80359d6:	431a      	orrs	r2, r3
 80359d8:	697b      	ldr	r3, [r7, #20]
 80359da:	69db      	ldr	r3, [r3, #28]
 80359dc:	4313      	orrs	r3, r2
 80359de:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80359e0:	697b      	ldr	r3, [r7, #20]
 80359e2:	681b      	ldr	r3, [r3, #0]
 80359e4:	681a      	ldr	r2, [r3, #0]
 80359e6:	4bbe      	ldr	r3, [pc, #760]	; (8035ce0 <UART_SetConfig+0x328>)
 80359e8:	4013      	ands	r3, r2
 80359ea:	697a      	ldr	r2, [r7, #20]
 80359ec:	6812      	ldr	r2, [r2, #0]
 80359ee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80359f0:	430b      	orrs	r3, r1
 80359f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80359f4:	697b      	ldr	r3, [r7, #20]
 80359f6:	681b      	ldr	r3, [r3, #0]
 80359f8:	685b      	ldr	r3, [r3, #4]
 80359fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80359fe:	697b      	ldr	r3, [r7, #20]
 8035a00:	68da      	ldr	r2, [r3, #12]
 8035a02:	697b      	ldr	r3, [r7, #20]
 8035a04:	681b      	ldr	r3, [r3, #0]
 8035a06:	430a      	orrs	r2, r1
 8035a08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8035a0a:	697b      	ldr	r3, [r7, #20]
 8035a0c:	699b      	ldr	r3, [r3, #24]
 8035a0e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8035a10:	697b      	ldr	r3, [r7, #20]
 8035a12:	681b      	ldr	r3, [r3, #0]
 8035a14:	4ab3      	ldr	r2, [pc, #716]	; (8035ce4 <UART_SetConfig+0x32c>)
 8035a16:	4293      	cmp	r3, r2
 8035a18:	d004      	beq.n	8035a24 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8035a1a:	697b      	ldr	r3, [r7, #20]
 8035a1c:	6a1b      	ldr	r3, [r3, #32]
 8035a1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8035a20:	4313      	orrs	r3, r2
 8035a22:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8035a24:	697b      	ldr	r3, [r7, #20]
 8035a26:	681b      	ldr	r3, [r3, #0]
 8035a28:	689a      	ldr	r2, [r3, #8]
 8035a2a:	4baf      	ldr	r3, [pc, #700]	; (8035ce8 <UART_SetConfig+0x330>)
 8035a2c:	4013      	ands	r3, r2
 8035a2e:	697a      	ldr	r2, [r7, #20]
 8035a30:	6812      	ldr	r2, [r2, #0]
 8035a32:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8035a34:	430b      	orrs	r3, r1
 8035a36:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8035a38:	697b      	ldr	r3, [r7, #20]
 8035a3a:	681b      	ldr	r3, [r3, #0]
 8035a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8035a3e:	f023 010f 	bic.w	r1, r3, #15
 8035a42:	697b      	ldr	r3, [r7, #20]
 8035a44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8035a46:	697b      	ldr	r3, [r7, #20]
 8035a48:	681b      	ldr	r3, [r3, #0]
 8035a4a:	430a      	orrs	r2, r1
 8035a4c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8035a4e:	697b      	ldr	r3, [r7, #20]
 8035a50:	681b      	ldr	r3, [r3, #0]
 8035a52:	4aa6      	ldr	r2, [pc, #664]	; (8035cec <UART_SetConfig+0x334>)
 8035a54:	4293      	cmp	r3, r2
 8035a56:	d177      	bne.n	8035b48 <UART_SetConfig+0x190>
 8035a58:	4ba5      	ldr	r3, [pc, #660]	; (8035cf0 <UART_SetConfig+0x338>)
 8035a5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8035a5c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8035a60:	2b28      	cmp	r3, #40	; 0x28
 8035a62:	d86d      	bhi.n	8035b40 <UART_SetConfig+0x188>
 8035a64:	a201      	add	r2, pc, #4	; (adr r2, 8035a6c <UART_SetConfig+0xb4>)
 8035a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8035a6a:	bf00      	nop
 8035a6c:	08035b11 	.word	0x08035b11
 8035a70:	08035b41 	.word	0x08035b41
 8035a74:	08035b41 	.word	0x08035b41
 8035a78:	08035b41 	.word	0x08035b41
 8035a7c:	08035b41 	.word	0x08035b41
 8035a80:	08035b41 	.word	0x08035b41
 8035a84:	08035b41 	.word	0x08035b41
 8035a88:	08035b41 	.word	0x08035b41
 8035a8c:	08035b19 	.word	0x08035b19
 8035a90:	08035b41 	.word	0x08035b41
 8035a94:	08035b41 	.word	0x08035b41
 8035a98:	08035b41 	.word	0x08035b41
 8035a9c:	08035b41 	.word	0x08035b41
 8035aa0:	08035b41 	.word	0x08035b41
 8035aa4:	08035b41 	.word	0x08035b41
 8035aa8:	08035b41 	.word	0x08035b41
 8035aac:	08035b21 	.word	0x08035b21
 8035ab0:	08035b41 	.word	0x08035b41
 8035ab4:	08035b41 	.word	0x08035b41
 8035ab8:	08035b41 	.word	0x08035b41
 8035abc:	08035b41 	.word	0x08035b41
 8035ac0:	08035b41 	.word	0x08035b41
 8035ac4:	08035b41 	.word	0x08035b41
 8035ac8:	08035b41 	.word	0x08035b41
 8035acc:	08035b29 	.word	0x08035b29
 8035ad0:	08035b41 	.word	0x08035b41
 8035ad4:	08035b41 	.word	0x08035b41
 8035ad8:	08035b41 	.word	0x08035b41
 8035adc:	08035b41 	.word	0x08035b41
 8035ae0:	08035b41 	.word	0x08035b41
 8035ae4:	08035b41 	.word	0x08035b41
 8035ae8:	08035b41 	.word	0x08035b41
 8035aec:	08035b31 	.word	0x08035b31
 8035af0:	08035b41 	.word	0x08035b41
 8035af4:	08035b41 	.word	0x08035b41
 8035af8:	08035b41 	.word	0x08035b41
 8035afc:	08035b41 	.word	0x08035b41
 8035b00:	08035b41 	.word	0x08035b41
 8035b04:	08035b41 	.word	0x08035b41
 8035b08:	08035b41 	.word	0x08035b41
 8035b0c:	08035b39 	.word	0x08035b39
 8035b10:	2301      	movs	r3, #1
 8035b12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035b16:	e222      	b.n	8035f5e <UART_SetConfig+0x5a6>
 8035b18:	2304      	movs	r3, #4
 8035b1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035b1e:	e21e      	b.n	8035f5e <UART_SetConfig+0x5a6>
 8035b20:	2308      	movs	r3, #8
 8035b22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035b26:	e21a      	b.n	8035f5e <UART_SetConfig+0x5a6>
 8035b28:	2310      	movs	r3, #16
 8035b2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035b2e:	e216      	b.n	8035f5e <UART_SetConfig+0x5a6>
 8035b30:	2320      	movs	r3, #32
 8035b32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035b36:	e212      	b.n	8035f5e <UART_SetConfig+0x5a6>
 8035b38:	2340      	movs	r3, #64	; 0x40
 8035b3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035b3e:	e20e      	b.n	8035f5e <UART_SetConfig+0x5a6>
 8035b40:	2380      	movs	r3, #128	; 0x80
 8035b42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035b46:	e20a      	b.n	8035f5e <UART_SetConfig+0x5a6>
 8035b48:	697b      	ldr	r3, [r7, #20]
 8035b4a:	681b      	ldr	r3, [r3, #0]
 8035b4c:	4a69      	ldr	r2, [pc, #420]	; (8035cf4 <UART_SetConfig+0x33c>)
 8035b4e:	4293      	cmp	r3, r2
 8035b50:	d130      	bne.n	8035bb4 <UART_SetConfig+0x1fc>
 8035b52:	4b67      	ldr	r3, [pc, #412]	; (8035cf0 <UART_SetConfig+0x338>)
 8035b54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8035b56:	f003 0307 	and.w	r3, r3, #7
 8035b5a:	2b05      	cmp	r3, #5
 8035b5c:	d826      	bhi.n	8035bac <UART_SetConfig+0x1f4>
 8035b5e:	a201      	add	r2, pc, #4	; (adr r2, 8035b64 <UART_SetConfig+0x1ac>)
 8035b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8035b64:	08035b7d 	.word	0x08035b7d
 8035b68:	08035b85 	.word	0x08035b85
 8035b6c:	08035b8d 	.word	0x08035b8d
 8035b70:	08035b95 	.word	0x08035b95
 8035b74:	08035b9d 	.word	0x08035b9d
 8035b78:	08035ba5 	.word	0x08035ba5
 8035b7c:	2300      	movs	r3, #0
 8035b7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035b82:	e1ec      	b.n	8035f5e <UART_SetConfig+0x5a6>
 8035b84:	2304      	movs	r3, #4
 8035b86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035b8a:	e1e8      	b.n	8035f5e <UART_SetConfig+0x5a6>
 8035b8c:	2308      	movs	r3, #8
 8035b8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035b92:	e1e4      	b.n	8035f5e <UART_SetConfig+0x5a6>
 8035b94:	2310      	movs	r3, #16
 8035b96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035b9a:	e1e0      	b.n	8035f5e <UART_SetConfig+0x5a6>
 8035b9c:	2320      	movs	r3, #32
 8035b9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035ba2:	e1dc      	b.n	8035f5e <UART_SetConfig+0x5a6>
 8035ba4:	2340      	movs	r3, #64	; 0x40
 8035ba6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035baa:	e1d8      	b.n	8035f5e <UART_SetConfig+0x5a6>
 8035bac:	2380      	movs	r3, #128	; 0x80
 8035bae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035bb2:	e1d4      	b.n	8035f5e <UART_SetConfig+0x5a6>
 8035bb4:	697b      	ldr	r3, [r7, #20]
 8035bb6:	681b      	ldr	r3, [r3, #0]
 8035bb8:	4a4f      	ldr	r2, [pc, #316]	; (8035cf8 <UART_SetConfig+0x340>)
 8035bba:	4293      	cmp	r3, r2
 8035bbc:	d130      	bne.n	8035c20 <UART_SetConfig+0x268>
 8035bbe:	4b4c      	ldr	r3, [pc, #304]	; (8035cf0 <UART_SetConfig+0x338>)
 8035bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8035bc2:	f003 0307 	and.w	r3, r3, #7
 8035bc6:	2b05      	cmp	r3, #5
 8035bc8:	d826      	bhi.n	8035c18 <UART_SetConfig+0x260>
 8035bca:	a201      	add	r2, pc, #4	; (adr r2, 8035bd0 <UART_SetConfig+0x218>)
 8035bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8035bd0:	08035be9 	.word	0x08035be9
 8035bd4:	08035bf1 	.word	0x08035bf1
 8035bd8:	08035bf9 	.word	0x08035bf9
 8035bdc:	08035c01 	.word	0x08035c01
 8035be0:	08035c09 	.word	0x08035c09
 8035be4:	08035c11 	.word	0x08035c11
 8035be8:	2300      	movs	r3, #0
 8035bea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035bee:	e1b6      	b.n	8035f5e <UART_SetConfig+0x5a6>
 8035bf0:	2304      	movs	r3, #4
 8035bf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035bf6:	e1b2      	b.n	8035f5e <UART_SetConfig+0x5a6>
 8035bf8:	2308      	movs	r3, #8
 8035bfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035bfe:	e1ae      	b.n	8035f5e <UART_SetConfig+0x5a6>
 8035c00:	2310      	movs	r3, #16
 8035c02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035c06:	e1aa      	b.n	8035f5e <UART_SetConfig+0x5a6>
 8035c08:	2320      	movs	r3, #32
 8035c0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035c0e:	e1a6      	b.n	8035f5e <UART_SetConfig+0x5a6>
 8035c10:	2340      	movs	r3, #64	; 0x40
 8035c12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035c16:	e1a2      	b.n	8035f5e <UART_SetConfig+0x5a6>
 8035c18:	2380      	movs	r3, #128	; 0x80
 8035c1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035c1e:	e19e      	b.n	8035f5e <UART_SetConfig+0x5a6>
 8035c20:	697b      	ldr	r3, [r7, #20]
 8035c22:	681b      	ldr	r3, [r3, #0]
 8035c24:	4a35      	ldr	r2, [pc, #212]	; (8035cfc <UART_SetConfig+0x344>)
 8035c26:	4293      	cmp	r3, r2
 8035c28:	d130      	bne.n	8035c8c <UART_SetConfig+0x2d4>
 8035c2a:	4b31      	ldr	r3, [pc, #196]	; (8035cf0 <UART_SetConfig+0x338>)
 8035c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8035c2e:	f003 0307 	and.w	r3, r3, #7
 8035c32:	2b05      	cmp	r3, #5
 8035c34:	d826      	bhi.n	8035c84 <UART_SetConfig+0x2cc>
 8035c36:	a201      	add	r2, pc, #4	; (adr r2, 8035c3c <UART_SetConfig+0x284>)
 8035c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8035c3c:	08035c55 	.word	0x08035c55
 8035c40:	08035c5d 	.word	0x08035c5d
 8035c44:	08035c65 	.word	0x08035c65
 8035c48:	08035c6d 	.word	0x08035c6d
 8035c4c:	08035c75 	.word	0x08035c75
 8035c50:	08035c7d 	.word	0x08035c7d
 8035c54:	2300      	movs	r3, #0
 8035c56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035c5a:	e180      	b.n	8035f5e <UART_SetConfig+0x5a6>
 8035c5c:	2304      	movs	r3, #4
 8035c5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035c62:	e17c      	b.n	8035f5e <UART_SetConfig+0x5a6>
 8035c64:	2308      	movs	r3, #8
 8035c66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035c6a:	e178      	b.n	8035f5e <UART_SetConfig+0x5a6>
 8035c6c:	2310      	movs	r3, #16
 8035c6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035c72:	e174      	b.n	8035f5e <UART_SetConfig+0x5a6>
 8035c74:	2320      	movs	r3, #32
 8035c76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035c7a:	e170      	b.n	8035f5e <UART_SetConfig+0x5a6>
 8035c7c:	2340      	movs	r3, #64	; 0x40
 8035c7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035c82:	e16c      	b.n	8035f5e <UART_SetConfig+0x5a6>
 8035c84:	2380      	movs	r3, #128	; 0x80
 8035c86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035c8a:	e168      	b.n	8035f5e <UART_SetConfig+0x5a6>
 8035c8c:	697b      	ldr	r3, [r7, #20]
 8035c8e:	681b      	ldr	r3, [r3, #0]
 8035c90:	4a1b      	ldr	r2, [pc, #108]	; (8035d00 <UART_SetConfig+0x348>)
 8035c92:	4293      	cmp	r3, r2
 8035c94:	d142      	bne.n	8035d1c <UART_SetConfig+0x364>
 8035c96:	4b16      	ldr	r3, [pc, #88]	; (8035cf0 <UART_SetConfig+0x338>)
 8035c98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8035c9a:	f003 0307 	and.w	r3, r3, #7
 8035c9e:	2b05      	cmp	r3, #5
 8035ca0:	d838      	bhi.n	8035d14 <UART_SetConfig+0x35c>
 8035ca2:	a201      	add	r2, pc, #4	; (adr r2, 8035ca8 <UART_SetConfig+0x2f0>)
 8035ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8035ca8:	08035cc1 	.word	0x08035cc1
 8035cac:	08035cc9 	.word	0x08035cc9
 8035cb0:	08035cd1 	.word	0x08035cd1
 8035cb4:	08035cd9 	.word	0x08035cd9
 8035cb8:	08035d05 	.word	0x08035d05
 8035cbc:	08035d0d 	.word	0x08035d0d
 8035cc0:	2300      	movs	r3, #0
 8035cc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035cc6:	e14a      	b.n	8035f5e <UART_SetConfig+0x5a6>
 8035cc8:	2304      	movs	r3, #4
 8035cca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035cce:	e146      	b.n	8035f5e <UART_SetConfig+0x5a6>
 8035cd0:	2308      	movs	r3, #8
 8035cd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035cd6:	e142      	b.n	8035f5e <UART_SetConfig+0x5a6>
 8035cd8:	2310      	movs	r3, #16
 8035cda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035cde:	e13e      	b.n	8035f5e <UART_SetConfig+0x5a6>
 8035ce0:	cfff69f3 	.word	0xcfff69f3
 8035ce4:	58000c00 	.word	0x58000c00
 8035ce8:	11fff4ff 	.word	0x11fff4ff
 8035cec:	40011000 	.word	0x40011000
 8035cf0:	58024400 	.word	0x58024400
 8035cf4:	40004400 	.word	0x40004400
 8035cf8:	40004800 	.word	0x40004800
 8035cfc:	40004c00 	.word	0x40004c00
 8035d00:	40005000 	.word	0x40005000
 8035d04:	2320      	movs	r3, #32
 8035d06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035d0a:	e128      	b.n	8035f5e <UART_SetConfig+0x5a6>
 8035d0c:	2340      	movs	r3, #64	; 0x40
 8035d0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035d12:	e124      	b.n	8035f5e <UART_SetConfig+0x5a6>
 8035d14:	2380      	movs	r3, #128	; 0x80
 8035d16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035d1a:	e120      	b.n	8035f5e <UART_SetConfig+0x5a6>
 8035d1c:	697b      	ldr	r3, [r7, #20]
 8035d1e:	681b      	ldr	r3, [r3, #0]
 8035d20:	4acb      	ldr	r2, [pc, #812]	; (8036050 <UART_SetConfig+0x698>)
 8035d22:	4293      	cmp	r3, r2
 8035d24:	d176      	bne.n	8035e14 <UART_SetConfig+0x45c>
 8035d26:	4bcb      	ldr	r3, [pc, #812]	; (8036054 <UART_SetConfig+0x69c>)
 8035d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8035d2a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8035d2e:	2b28      	cmp	r3, #40	; 0x28
 8035d30:	d86c      	bhi.n	8035e0c <UART_SetConfig+0x454>
 8035d32:	a201      	add	r2, pc, #4	; (adr r2, 8035d38 <UART_SetConfig+0x380>)
 8035d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8035d38:	08035ddd 	.word	0x08035ddd
 8035d3c:	08035e0d 	.word	0x08035e0d
 8035d40:	08035e0d 	.word	0x08035e0d
 8035d44:	08035e0d 	.word	0x08035e0d
 8035d48:	08035e0d 	.word	0x08035e0d
 8035d4c:	08035e0d 	.word	0x08035e0d
 8035d50:	08035e0d 	.word	0x08035e0d
 8035d54:	08035e0d 	.word	0x08035e0d
 8035d58:	08035de5 	.word	0x08035de5
 8035d5c:	08035e0d 	.word	0x08035e0d
 8035d60:	08035e0d 	.word	0x08035e0d
 8035d64:	08035e0d 	.word	0x08035e0d
 8035d68:	08035e0d 	.word	0x08035e0d
 8035d6c:	08035e0d 	.word	0x08035e0d
 8035d70:	08035e0d 	.word	0x08035e0d
 8035d74:	08035e0d 	.word	0x08035e0d
 8035d78:	08035ded 	.word	0x08035ded
 8035d7c:	08035e0d 	.word	0x08035e0d
 8035d80:	08035e0d 	.word	0x08035e0d
 8035d84:	08035e0d 	.word	0x08035e0d
 8035d88:	08035e0d 	.word	0x08035e0d
 8035d8c:	08035e0d 	.word	0x08035e0d
 8035d90:	08035e0d 	.word	0x08035e0d
 8035d94:	08035e0d 	.word	0x08035e0d
 8035d98:	08035df5 	.word	0x08035df5
 8035d9c:	08035e0d 	.word	0x08035e0d
 8035da0:	08035e0d 	.word	0x08035e0d
 8035da4:	08035e0d 	.word	0x08035e0d
 8035da8:	08035e0d 	.word	0x08035e0d
 8035dac:	08035e0d 	.word	0x08035e0d
 8035db0:	08035e0d 	.word	0x08035e0d
 8035db4:	08035e0d 	.word	0x08035e0d
 8035db8:	08035dfd 	.word	0x08035dfd
 8035dbc:	08035e0d 	.word	0x08035e0d
 8035dc0:	08035e0d 	.word	0x08035e0d
 8035dc4:	08035e0d 	.word	0x08035e0d
 8035dc8:	08035e0d 	.word	0x08035e0d
 8035dcc:	08035e0d 	.word	0x08035e0d
 8035dd0:	08035e0d 	.word	0x08035e0d
 8035dd4:	08035e0d 	.word	0x08035e0d
 8035dd8:	08035e05 	.word	0x08035e05
 8035ddc:	2301      	movs	r3, #1
 8035dde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035de2:	e0bc      	b.n	8035f5e <UART_SetConfig+0x5a6>
 8035de4:	2304      	movs	r3, #4
 8035de6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035dea:	e0b8      	b.n	8035f5e <UART_SetConfig+0x5a6>
 8035dec:	2308      	movs	r3, #8
 8035dee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035df2:	e0b4      	b.n	8035f5e <UART_SetConfig+0x5a6>
 8035df4:	2310      	movs	r3, #16
 8035df6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035dfa:	e0b0      	b.n	8035f5e <UART_SetConfig+0x5a6>
 8035dfc:	2320      	movs	r3, #32
 8035dfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035e02:	e0ac      	b.n	8035f5e <UART_SetConfig+0x5a6>
 8035e04:	2340      	movs	r3, #64	; 0x40
 8035e06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035e0a:	e0a8      	b.n	8035f5e <UART_SetConfig+0x5a6>
 8035e0c:	2380      	movs	r3, #128	; 0x80
 8035e0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035e12:	e0a4      	b.n	8035f5e <UART_SetConfig+0x5a6>
 8035e14:	697b      	ldr	r3, [r7, #20]
 8035e16:	681b      	ldr	r3, [r3, #0]
 8035e18:	4a8f      	ldr	r2, [pc, #572]	; (8036058 <UART_SetConfig+0x6a0>)
 8035e1a:	4293      	cmp	r3, r2
 8035e1c:	d130      	bne.n	8035e80 <UART_SetConfig+0x4c8>
 8035e1e:	4b8d      	ldr	r3, [pc, #564]	; (8036054 <UART_SetConfig+0x69c>)
 8035e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8035e22:	f003 0307 	and.w	r3, r3, #7
 8035e26:	2b05      	cmp	r3, #5
 8035e28:	d826      	bhi.n	8035e78 <UART_SetConfig+0x4c0>
 8035e2a:	a201      	add	r2, pc, #4	; (adr r2, 8035e30 <UART_SetConfig+0x478>)
 8035e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8035e30:	08035e49 	.word	0x08035e49
 8035e34:	08035e51 	.word	0x08035e51
 8035e38:	08035e59 	.word	0x08035e59
 8035e3c:	08035e61 	.word	0x08035e61
 8035e40:	08035e69 	.word	0x08035e69
 8035e44:	08035e71 	.word	0x08035e71
 8035e48:	2300      	movs	r3, #0
 8035e4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035e4e:	e086      	b.n	8035f5e <UART_SetConfig+0x5a6>
 8035e50:	2304      	movs	r3, #4
 8035e52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035e56:	e082      	b.n	8035f5e <UART_SetConfig+0x5a6>
 8035e58:	2308      	movs	r3, #8
 8035e5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035e5e:	e07e      	b.n	8035f5e <UART_SetConfig+0x5a6>
 8035e60:	2310      	movs	r3, #16
 8035e62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035e66:	e07a      	b.n	8035f5e <UART_SetConfig+0x5a6>
 8035e68:	2320      	movs	r3, #32
 8035e6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035e6e:	e076      	b.n	8035f5e <UART_SetConfig+0x5a6>
 8035e70:	2340      	movs	r3, #64	; 0x40
 8035e72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035e76:	e072      	b.n	8035f5e <UART_SetConfig+0x5a6>
 8035e78:	2380      	movs	r3, #128	; 0x80
 8035e7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035e7e:	e06e      	b.n	8035f5e <UART_SetConfig+0x5a6>
 8035e80:	697b      	ldr	r3, [r7, #20]
 8035e82:	681b      	ldr	r3, [r3, #0]
 8035e84:	4a75      	ldr	r2, [pc, #468]	; (803605c <UART_SetConfig+0x6a4>)
 8035e86:	4293      	cmp	r3, r2
 8035e88:	d130      	bne.n	8035eec <UART_SetConfig+0x534>
 8035e8a:	4b72      	ldr	r3, [pc, #456]	; (8036054 <UART_SetConfig+0x69c>)
 8035e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8035e8e:	f003 0307 	and.w	r3, r3, #7
 8035e92:	2b05      	cmp	r3, #5
 8035e94:	d826      	bhi.n	8035ee4 <UART_SetConfig+0x52c>
 8035e96:	a201      	add	r2, pc, #4	; (adr r2, 8035e9c <UART_SetConfig+0x4e4>)
 8035e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8035e9c:	08035eb5 	.word	0x08035eb5
 8035ea0:	08035ebd 	.word	0x08035ebd
 8035ea4:	08035ec5 	.word	0x08035ec5
 8035ea8:	08035ecd 	.word	0x08035ecd
 8035eac:	08035ed5 	.word	0x08035ed5
 8035eb0:	08035edd 	.word	0x08035edd
 8035eb4:	2300      	movs	r3, #0
 8035eb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035eba:	e050      	b.n	8035f5e <UART_SetConfig+0x5a6>
 8035ebc:	2304      	movs	r3, #4
 8035ebe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035ec2:	e04c      	b.n	8035f5e <UART_SetConfig+0x5a6>
 8035ec4:	2308      	movs	r3, #8
 8035ec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035eca:	e048      	b.n	8035f5e <UART_SetConfig+0x5a6>
 8035ecc:	2310      	movs	r3, #16
 8035ece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035ed2:	e044      	b.n	8035f5e <UART_SetConfig+0x5a6>
 8035ed4:	2320      	movs	r3, #32
 8035ed6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035eda:	e040      	b.n	8035f5e <UART_SetConfig+0x5a6>
 8035edc:	2340      	movs	r3, #64	; 0x40
 8035ede:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035ee2:	e03c      	b.n	8035f5e <UART_SetConfig+0x5a6>
 8035ee4:	2380      	movs	r3, #128	; 0x80
 8035ee6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035eea:	e038      	b.n	8035f5e <UART_SetConfig+0x5a6>
 8035eec:	697b      	ldr	r3, [r7, #20]
 8035eee:	681b      	ldr	r3, [r3, #0]
 8035ef0:	4a5b      	ldr	r2, [pc, #364]	; (8036060 <UART_SetConfig+0x6a8>)
 8035ef2:	4293      	cmp	r3, r2
 8035ef4:	d130      	bne.n	8035f58 <UART_SetConfig+0x5a0>
 8035ef6:	4b57      	ldr	r3, [pc, #348]	; (8036054 <UART_SetConfig+0x69c>)
 8035ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8035efa:	f003 0307 	and.w	r3, r3, #7
 8035efe:	2b05      	cmp	r3, #5
 8035f00:	d826      	bhi.n	8035f50 <UART_SetConfig+0x598>
 8035f02:	a201      	add	r2, pc, #4	; (adr r2, 8035f08 <UART_SetConfig+0x550>)
 8035f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8035f08:	08035f21 	.word	0x08035f21
 8035f0c:	08035f29 	.word	0x08035f29
 8035f10:	08035f31 	.word	0x08035f31
 8035f14:	08035f39 	.word	0x08035f39
 8035f18:	08035f41 	.word	0x08035f41
 8035f1c:	08035f49 	.word	0x08035f49
 8035f20:	2302      	movs	r3, #2
 8035f22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035f26:	e01a      	b.n	8035f5e <UART_SetConfig+0x5a6>
 8035f28:	2304      	movs	r3, #4
 8035f2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035f2e:	e016      	b.n	8035f5e <UART_SetConfig+0x5a6>
 8035f30:	2308      	movs	r3, #8
 8035f32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035f36:	e012      	b.n	8035f5e <UART_SetConfig+0x5a6>
 8035f38:	2310      	movs	r3, #16
 8035f3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035f3e:	e00e      	b.n	8035f5e <UART_SetConfig+0x5a6>
 8035f40:	2320      	movs	r3, #32
 8035f42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035f46:	e00a      	b.n	8035f5e <UART_SetConfig+0x5a6>
 8035f48:	2340      	movs	r3, #64	; 0x40
 8035f4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035f4e:	e006      	b.n	8035f5e <UART_SetConfig+0x5a6>
 8035f50:	2380      	movs	r3, #128	; 0x80
 8035f52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035f56:	e002      	b.n	8035f5e <UART_SetConfig+0x5a6>
 8035f58:	2380      	movs	r3, #128	; 0x80
 8035f5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8035f5e:	697b      	ldr	r3, [r7, #20]
 8035f60:	681b      	ldr	r3, [r3, #0]
 8035f62:	4a3f      	ldr	r2, [pc, #252]	; (8036060 <UART_SetConfig+0x6a8>)
 8035f64:	4293      	cmp	r3, r2
 8035f66:	f040 80f8 	bne.w	803615a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8035f6a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8035f6e:	2b20      	cmp	r3, #32
 8035f70:	dc46      	bgt.n	8036000 <UART_SetConfig+0x648>
 8035f72:	2b02      	cmp	r3, #2
 8035f74:	f2c0 8082 	blt.w	803607c <UART_SetConfig+0x6c4>
 8035f78:	3b02      	subs	r3, #2
 8035f7a:	2b1e      	cmp	r3, #30
 8035f7c:	d87e      	bhi.n	803607c <UART_SetConfig+0x6c4>
 8035f7e:	a201      	add	r2, pc, #4	; (adr r2, 8035f84 <UART_SetConfig+0x5cc>)
 8035f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8035f84:	08036007 	.word	0x08036007
 8035f88:	0803607d 	.word	0x0803607d
 8035f8c:	0803600f 	.word	0x0803600f
 8035f90:	0803607d 	.word	0x0803607d
 8035f94:	0803607d 	.word	0x0803607d
 8035f98:	0803607d 	.word	0x0803607d
 8035f9c:	0803601f 	.word	0x0803601f
 8035fa0:	0803607d 	.word	0x0803607d
 8035fa4:	0803607d 	.word	0x0803607d
 8035fa8:	0803607d 	.word	0x0803607d
 8035fac:	0803607d 	.word	0x0803607d
 8035fb0:	0803607d 	.word	0x0803607d
 8035fb4:	0803607d 	.word	0x0803607d
 8035fb8:	0803607d 	.word	0x0803607d
 8035fbc:	0803602f 	.word	0x0803602f
 8035fc0:	0803607d 	.word	0x0803607d
 8035fc4:	0803607d 	.word	0x0803607d
 8035fc8:	0803607d 	.word	0x0803607d
 8035fcc:	0803607d 	.word	0x0803607d
 8035fd0:	0803607d 	.word	0x0803607d
 8035fd4:	0803607d 	.word	0x0803607d
 8035fd8:	0803607d 	.word	0x0803607d
 8035fdc:	0803607d 	.word	0x0803607d
 8035fe0:	0803607d 	.word	0x0803607d
 8035fe4:	0803607d 	.word	0x0803607d
 8035fe8:	0803607d 	.word	0x0803607d
 8035fec:	0803607d 	.word	0x0803607d
 8035ff0:	0803607d 	.word	0x0803607d
 8035ff4:	0803607d 	.word	0x0803607d
 8035ff8:	0803607d 	.word	0x0803607d
 8035ffc:	0803606f 	.word	0x0803606f
 8036000:	2b40      	cmp	r3, #64	; 0x40
 8036002:	d037      	beq.n	8036074 <UART_SetConfig+0x6bc>
 8036004:	e03a      	b.n	803607c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8036006:	f7fc fcbf 	bl	8032988 <HAL_RCCEx_GetD3PCLK1Freq>
 803600a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 803600c:	e03c      	b.n	8036088 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 803600e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8036012:	4618      	mov	r0, r3
 8036014:	f7fc fcce 	bl	80329b4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8036018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803601a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 803601c:	e034      	b.n	8036088 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 803601e:	f107 0318 	add.w	r3, r7, #24
 8036022:	4618      	mov	r0, r3
 8036024:	f7fc fe1a 	bl	8032c5c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8036028:	69fb      	ldr	r3, [r7, #28]
 803602a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 803602c:	e02c      	b.n	8036088 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 803602e:	4b09      	ldr	r3, [pc, #36]	; (8036054 <UART_SetConfig+0x69c>)
 8036030:	681b      	ldr	r3, [r3, #0]
 8036032:	f003 0320 	and.w	r3, r3, #32
 8036036:	2b00      	cmp	r3, #0
 8036038:	d016      	beq.n	8036068 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 803603a:	4b06      	ldr	r3, [pc, #24]	; (8036054 <UART_SetConfig+0x69c>)
 803603c:	681b      	ldr	r3, [r3, #0]
 803603e:	08db      	lsrs	r3, r3, #3
 8036040:	f003 0303 	and.w	r3, r3, #3
 8036044:	4a07      	ldr	r2, [pc, #28]	; (8036064 <UART_SetConfig+0x6ac>)
 8036046:	fa22 f303 	lsr.w	r3, r2, r3
 803604a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 803604c:	e01c      	b.n	8036088 <UART_SetConfig+0x6d0>
 803604e:	bf00      	nop
 8036050:	40011400 	.word	0x40011400
 8036054:	58024400 	.word	0x58024400
 8036058:	40007800 	.word	0x40007800
 803605c:	40007c00 	.word	0x40007c00
 8036060:	58000c00 	.word	0x58000c00
 8036064:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8036068:	4b9d      	ldr	r3, [pc, #628]	; (80362e0 <UART_SetConfig+0x928>)
 803606a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 803606c:	e00c      	b.n	8036088 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 803606e:	4b9d      	ldr	r3, [pc, #628]	; (80362e4 <UART_SetConfig+0x92c>)
 8036070:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8036072:	e009      	b.n	8036088 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8036074:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8036078:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 803607a:	e005      	b.n	8036088 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 803607c:	2300      	movs	r3, #0
 803607e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8036080:	2301      	movs	r3, #1
 8036082:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8036086:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8036088:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 803608a:	2b00      	cmp	r3, #0
 803608c:	f000 81de 	beq.w	803644c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8036090:	697b      	ldr	r3, [r7, #20]
 8036092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8036094:	4a94      	ldr	r2, [pc, #592]	; (80362e8 <UART_SetConfig+0x930>)
 8036096:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 803609a:	461a      	mov	r2, r3
 803609c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 803609e:	fbb3 f3f2 	udiv	r3, r3, r2
 80360a2:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80360a4:	697b      	ldr	r3, [r7, #20]
 80360a6:	685a      	ldr	r2, [r3, #4]
 80360a8:	4613      	mov	r3, r2
 80360aa:	005b      	lsls	r3, r3, #1
 80360ac:	4413      	add	r3, r2
 80360ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80360b0:	429a      	cmp	r2, r3
 80360b2:	d305      	bcc.n	80360c0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80360b4:	697b      	ldr	r3, [r7, #20]
 80360b6:	685b      	ldr	r3, [r3, #4]
 80360b8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80360ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80360bc:	429a      	cmp	r2, r3
 80360be:	d903      	bls.n	80360c8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80360c0:	2301      	movs	r3, #1
 80360c2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80360c6:	e1c1      	b.n	803644c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80360c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80360ca:	2200      	movs	r2, #0
 80360cc:	60bb      	str	r3, [r7, #8]
 80360ce:	60fa      	str	r2, [r7, #12]
 80360d0:	697b      	ldr	r3, [r7, #20]
 80360d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80360d4:	4a84      	ldr	r2, [pc, #528]	; (80362e8 <UART_SetConfig+0x930>)
 80360d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80360da:	b29b      	uxth	r3, r3
 80360dc:	2200      	movs	r2, #0
 80360de:	603b      	str	r3, [r7, #0]
 80360e0:	607a      	str	r2, [r7, #4]
 80360e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80360e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80360ea:	f7ea f949 	bl	8020380 <__aeabi_uldivmod>
 80360ee:	4602      	mov	r2, r0
 80360f0:	460b      	mov	r3, r1
 80360f2:	4610      	mov	r0, r2
 80360f4:	4619      	mov	r1, r3
 80360f6:	f04f 0200 	mov.w	r2, #0
 80360fa:	f04f 0300 	mov.w	r3, #0
 80360fe:	020b      	lsls	r3, r1, #8
 8036100:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8036104:	0202      	lsls	r2, r0, #8
 8036106:	6979      	ldr	r1, [r7, #20]
 8036108:	6849      	ldr	r1, [r1, #4]
 803610a:	0849      	lsrs	r1, r1, #1
 803610c:	2000      	movs	r0, #0
 803610e:	460c      	mov	r4, r1
 8036110:	4605      	mov	r5, r0
 8036112:	eb12 0804 	adds.w	r8, r2, r4
 8036116:	eb43 0905 	adc.w	r9, r3, r5
 803611a:	697b      	ldr	r3, [r7, #20]
 803611c:	685b      	ldr	r3, [r3, #4]
 803611e:	2200      	movs	r2, #0
 8036120:	469a      	mov	sl, r3
 8036122:	4693      	mov	fp, r2
 8036124:	4652      	mov	r2, sl
 8036126:	465b      	mov	r3, fp
 8036128:	4640      	mov	r0, r8
 803612a:	4649      	mov	r1, r9
 803612c:	f7ea f928 	bl	8020380 <__aeabi_uldivmod>
 8036130:	4602      	mov	r2, r0
 8036132:	460b      	mov	r3, r1
 8036134:	4613      	mov	r3, r2
 8036136:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8036138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803613a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 803613e:	d308      	bcc.n	8036152 <UART_SetConfig+0x79a>
 8036140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8036142:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8036146:	d204      	bcs.n	8036152 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8036148:	697b      	ldr	r3, [r7, #20]
 803614a:	681b      	ldr	r3, [r3, #0]
 803614c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 803614e:	60da      	str	r2, [r3, #12]
 8036150:	e17c      	b.n	803644c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8036152:	2301      	movs	r3, #1
 8036154:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8036158:	e178      	b.n	803644c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 803615a:	697b      	ldr	r3, [r7, #20]
 803615c:	69db      	ldr	r3, [r3, #28]
 803615e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8036162:	f040 80c5 	bne.w	80362f0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8036166:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 803616a:	2b20      	cmp	r3, #32
 803616c:	dc48      	bgt.n	8036200 <UART_SetConfig+0x848>
 803616e:	2b00      	cmp	r3, #0
 8036170:	db7b      	blt.n	803626a <UART_SetConfig+0x8b2>
 8036172:	2b20      	cmp	r3, #32
 8036174:	d879      	bhi.n	803626a <UART_SetConfig+0x8b2>
 8036176:	a201      	add	r2, pc, #4	; (adr r2, 803617c <UART_SetConfig+0x7c4>)
 8036178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803617c:	08036207 	.word	0x08036207
 8036180:	0803620f 	.word	0x0803620f
 8036184:	0803626b 	.word	0x0803626b
 8036188:	0803626b 	.word	0x0803626b
 803618c:	08036217 	.word	0x08036217
 8036190:	0803626b 	.word	0x0803626b
 8036194:	0803626b 	.word	0x0803626b
 8036198:	0803626b 	.word	0x0803626b
 803619c:	08036227 	.word	0x08036227
 80361a0:	0803626b 	.word	0x0803626b
 80361a4:	0803626b 	.word	0x0803626b
 80361a8:	0803626b 	.word	0x0803626b
 80361ac:	0803626b 	.word	0x0803626b
 80361b0:	0803626b 	.word	0x0803626b
 80361b4:	0803626b 	.word	0x0803626b
 80361b8:	0803626b 	.word	0x0803626b
 80361bc:	08036237 	.word	0x08036237
 80361c0:	0803626b 	.word	0x0803626b
 80361c4:	0803626b 	.word	0x0803626b
 80361c8:	0803626b 	.word	0x0803626b
 80361cc:	0803626b 	.word	0x0803626b
 80361d0:	0803626b 	.word	0x0803626b
 80361d4:	0803626b 	.word	0x0803626b
 80361d8:	0803626b 	.word	0x0803626b
 80361dc:	0803626b 	.word	0x0803626b
 80361e0:	0803626b 	.word	0x0803626b
 80361e4:	0803626b 	.word	0x0803626b
 80361e8:	0803626b 	.word	0x0803626b
 80361ec:	0803626b 	.word	0x0803626b
 80361f0:	0803626b 	.word	0x0803626b
 80361f4:	0803626b 	.word	0x0803626b
 80361f8:	0803626b 	.word	0x0803626b
 80361fc:	0803625d 	.word	0x0803625d
 8036200:	2b40      	cmp	r3, #64	; 0x40
 8036202:	d02e      	beq.n	8036262 <UART_SetConfig+0x8aa>
 8036204:	e031      	b.n	803626a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8036206:	f7fb fc4d 	bl	8031aa4 <HAL_RCC_GetPCLK1Freq>
 803620a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 803620c:	e033      	b.n	8036276 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 803620e:	f7fb fc5f 	bl	8031ad0 <HAL_RCC_GetPCLK2Freq>
 8036212:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8036214:	e02f      	b.n	8036276 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8036216:	f107 0324 	add.w	r3, r7, #36	; 0x24
 803621a:	4618      	mov	r0, r3
 803621c:	f7fc fbca 	bl	80329b4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8036220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8036222:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8036224:	e027      	b.n	8036276 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8036226:	f107 0318 	add.w	r3, r7, #24
 803622a:	4618      	mov	r0, r3
 803622c:	f7fc fd16 	bl	8032c5c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8036230:	69fb      	ldr	r3, [r7, #28]
 8036232:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8036234:	e01f      	b.n	8036276 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8036236:	4b2d      	ldr	r3, [pc, #180]	; (80362ec <UART_SetConfig+0x934>)
 8036238:	681b      	ldr	r3, [r3, #0]
 803623a:	f003 0320 	and.w	r3, r3, #32
 803623e:	2b00      	cmp	r3, #0
 8036240:	d009      	beq.n	8036256 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8036242:	4b2a      	ldr	r3, [pc, #168]	; (80362ec <UART_SetConfig+0x934>)
 8036244:	681b      	ldr	r3, [r3, #0]
 8036246:	08db      	lsrs	r3, r3, #3
 8036248:	f003 0303 	and.w	r3, r3, #3
 803624c:	4a24      	ldr	r2, [pc, #144]	; (80362e0 <UART_SetConfig+0x928>)
 803624e:	fa22 f303 	lsr.w	r3, r2, r3
 8036252:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8036254:	e00f      	b.n	8036276 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8036256:	4b22      	ldr	r3, [pc, #136]	; (80362e0 <UART_SetConfig+0x928>)
 8036258:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 803625a:	e00c      	b.n	8036276 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 803625c:	4b21      	ldr	r3, [pc, #132]	; (80362e4 <UART_SetConfig+0x92c>)
 803625e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8036260:	e009      	b.n	8036276 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8036262:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8036266:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8036268:	e005      	b.n	8036276 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 803626a:	2300      	movs	r3, #0
 803626c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 803626e:	2301      	movs	r3, #1
 8036270:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8036274:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8036276:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8036278:	2b00      	cmp	r3, #0
 803627a:	f000 80e7 	beq.w	803644c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 803627e:	697b      	ldr	r3, [r7, #20]
 8036280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8036282:	4a19      	ldr	r2, [pc, #100]	; (80362e8 <UART_SetConfig+0x930>)
 8036284:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8036288:	461a      	mov	r2, r3
 803628a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 803628c:	fbb3 f3f2 	udiv	r3, r3, r2
 8036290:	005a      	lsls	r2, r3, #1
 8036292:	697b      	ldr	r3, [r7, #20]
 8036294:	685b      	ldr	r3, [r3, #4]
 8036296:	085b      	lsrs	r3, r3, #1
 8036298:	441a      	add	r2, r3
 803629a:	697b      	ldr	r3, [r7, #20]
 803629c:	685b      	ldr	r3, [r3, #4]
 803629e:	fbb2 f3f3 	udiv	r3, r2, r3
 80362a2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80362a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80362a6:	2b0f      	cmp	r3, #15
 80362a8:	d916      	bls.n	80362d8 <UART_SetConfig+0x920>
 80362aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80362ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80362b0:	d212      	bcs.n	80362d8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80362b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80362b4:	b29b      	uxth	r3, r3
 80362b6:	f023 030f 	bic.w	r3, r3, #15
 80362ba:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80362bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80362be:	085b      	lsrs	r3, r3, #1
 80362c0:	b29b      	uxth	r3, r3
 80362c2:	f003 0307 	and.w	r3, r3, #7
 80362c6:	b29a      	uxth	r2, r3
 80362c8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80362ca:	4313      	orrs	r3, r2
 80362cc:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80362ce:	697b      	ldr	r3, [r7, #20]
 80362d0:	681b      	ldr	r3, [r3, #0]
 80362d2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80362d4:	60da      	str	r2, [r3, #12]
 80362d6:	e0b9      	b.n	803644c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80362d8:	2301      	movs	r3, #1
 80362da:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80362de:	e0b5      	b.n	803644c <UART_SetConfig+0xa94>
 80362e0:	03d09000 	.word	0x03d09000
 80362e4:	003d0900 	.word	0x003d0900
 80362e8:	08058460 	.word	0x08058460
 80362ec:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80362f0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80362f4:	2b20      	cmp	r3, #32
 80362f6:	dc49      	bgt.n	803638c <UART_SetConfig+0x9d4>
 80362f8:	2b00      	cmp	r3, #0
 80362fa:	db7c      	blt.n	80363f6 <UART_SetConfig+0xa3e>
 80362fc:	2b20      	cmp	r3, #32
 80362fe:	d87a      	bhi.n	80363f6 <UART_SetConfig+0xa3e>
 8036300:	a201      	add	r2, pc, #4	; (adr r2, 8036308 <UART_SetConfig+0x950>)
 8036302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8036306:	bf00      	nop
 8036308:	08036393 	.word	0x08036393
 803630c:	0803639b 	.word	0x0803639b
 8036310:	080363f7 	.word	0x080363f7
 8036314:	080363f7 	.word	0x080363f7
 8036318:	080363a3 	.word	0x080363a3
 803631c:	080363f7 	.word	0x080363f7
 8036320:	080363f7 	.word	0x080363f7
 8036324:	080363f7 	.word	0x080363f7
 8036328:	080363b3 	.word	0x080363b3
 803632c:	080363f7 	.word	0x080363f7
 8036330:	080363f7 	.word	0x080363f7
 8036334:	080363f7 	.word	0x080363f7
 8036338:	080363f7 	.word	0x080363f7
 803633c:	080363f7 	.word	0x080363f7
 8036340:	080363f7 	.word	0x080363f7
 8036344:	080363f7 	.word	0x080363f7
 8036348:	080363c3 	.word	0x080363c3
 803634c:	080363f7 	.word	0x080363f7
 8036350:	080363f7 	.word	0x080363f7
 8036354:	080363f7 	.word	0x080363f7
 8036358:	080363f7 	.word	0x080363f7
 803635c:	080363f7 	.word	0x080363f7
 8036360:	080363f7 	.word	0x080363f7
 8036364:	080363f7 	.word	0x080363f7
 8036368:	080363f7 	.word	0x080363f7
 803636c:	080363f7 	.word	0x080363f7
 8036370:	080363f7 	.word	0x080363f7
 8036374:	080363f7 	.word	0x080363f7
 8036378:	080363f7 	.word	0x080363f7
 803637c:	080363f7 	.word	0x080363f7
 8036380:	080363f7 	.word	0x080363f7
 8036384:	080363f7 	.word	0x080363f7
 8036388:	080363e9 	.word	0x080363e9
 803638c:	2b40      	cmp	r3, #64	; 0x40
 803638e:	d02e      	beq.n	80363ee <UART_SetConfig+0xa36>
 8036390:	e031      	b.n	80363f6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8036392:	f7fb fb87 	bl	8031aa4 <HAL_RCC_GetPCLK1Freq>
 8036396:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8036398:	e033      	b.n	8036402 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 803639a:	f7fb fb99 	bl	8031ad0 <HAL_RCC_GetPCLK2Freq>
 803639e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80363a0:	e02f      	b.n	8036402 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80363a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80363a6:	4618      	mov	r0, r3
 80363a8:	f7fc fb04 	bl	80329b4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80363ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80363ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80363b0:	e027      	b.n	8036402 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80363b2:	f107 0318 	add.w	r3, r7, #24
 80363b6:	4618      	mov	r0, r3
 80363b8:	f7fc fc50 	bl	8032c5c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80363bc:	69fb      	ldr	r3, [r7, #28]
 80363be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80363c0:	e01f      	b.n	8036402 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80363c2:	4b2d      	ldr	r3, [pc, #180]	; (8036478 <UART_SetConfig+0xac0>)
 80363c4:	681b      	ldr	r3, [r3, #0]
 80363c6:	f003 0320 	and.w	r3, r3, #32
 80363ca:	2b00      	cmp	r3, #0
 80363cc:	d009      	beq.n	80363e2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80363ce:	4b2a      	ldr	r3, [pc, #168]	; (8036478 <UART_SetConfig+0xac0>)
 80363d0:	681b      	ldr	r3, [r3, #0]
 80363d2:	08db      	lsrs	r3, r3, #3
 80363d4:	f003 0303 	and.w	r3, r3, #3
 80363d8:	4a28      	ldr	r2, [pc, #160]	; (803647c <UART_SetConfig+0xac4>)
 80363da:	fa22 f303 	lsr.w	r3, r2, r3
 80363de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80363e0:	e00f      	b.n	8036402 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80363e2:	4b26      	ldr	r3, [pc, #152]	; (803647c <UART_SetConfig+0xac4>)
 80363e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80363e6:	e00c      	b.n	8036402 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80363e8:	4b25      	ldr	r3, [pc, #148]	; (8036480 <UART_SetConfig+0xac8>)
 80363ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80363ec:	e009      	b.n	8036402 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80363ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80363f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80363f4:	e005      	b.n	8036402 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80363f6:	2300      	movs	r3, #0
 80363f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80363fa:	2301      	movs	r3, #1
 80363fc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8036400:	bf00      	nop
    }

    if (pclk != 0U)
 8036402:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8036404:	2b00      	cmp	r3, #0
 8036406:	d021      	beq.n	803644c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8036408:	697b      	ldr	r3, [r7, #20]
 803640a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803640c:	4a1d      	ldr	r2, [pc, #116]	; (8036484 <UART_SetConfig+0xacc>)
 803640e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8036412:	461a      	mov	r2, r3
 8036414:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8036416:	fbb3 f2f2 	udiv	r2, r3, r2
 803641a:	697b      	ldr	r3, [r7, #20]
 803641c:	685b      	ldr	r3, [r3, #4]
 803641e:	085b      	lsrs	r3, r3, #1
 8036420:	441a      	add	r2, r3
 8036422:	697b      	ldr	r3, [r7, #20]
 8036424:	685b      	ldr	r3, [r3, #4]
 8036426:	fbb2 f3f3 	udiv	r3, r2, r3
 803642a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 803642c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803642e:	2b0f      	cmp	r3, #15
 8036430:	d909      	bls.n	8036446 <UART_SetConfig+0xa8e>
 8036432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8036434:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8036438:	d205      	bcs.n	8036446 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 803643a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803643c:	b29a      	uxth	r2, r3
 803643e:	697b      	ldr	r3, [r7, #20]
 8036440:	681b      	ldr	r3, [r3, #0]
 8036442:	60da      	str	r2, [r3, #12]
 8036444:	e002      	b.n	803644c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8036446:	2301      	movs	r3, #1
 8036448:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 803644c:	697b      	ldr	r3, [r7, #20]
 803644e:	2201      	movs	r2, #1
 8036450:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8036454:	697b      	ldr	r3, [r7, #20]
 8036456:	2201      	movs	r2, #1
 8036458:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 803645c:	697b      	ldr	r3, [r7, #20]
 803645e:	2200      	movs	r2, #0
 8036460:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8036462:	697b      	ldr	r3, [r7, #20]
 8036464:	2200      	movs	r2, #0
 8036466:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8036468:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 803646c:	4618      	mov	r0, r3
 803646e:	3748      	adds	r7, #72	; 0x48
 8036470:	46bd      	mov	sp, r7
 8036472:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8036476:	bf00      	nop
 8036478:	58024400 	.word	0x58024400
 803647c:	03d09000 	.word	0x03d09000
 8036480:	003d0900 	.word	0x003d0900
 8036484:	08058460 	.word	0x08058460

08036488 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8036488:	b480      	push	{r7}
 803648a:	b083      	sub	sp, #12
 803648c:	af00      	add	r7, sp, #0
 803648e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8036490:	687b      	ldr	r3, [r7, #4]
 8036492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8036494:	f003 0301 	and.w	r3, r3, #1
 8036498:	2b00      	cmp	r3, #0
 803649a:	d00a      	beq.n	80364b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 803649c:	687b      	ldr	r3, [r7, #4]
 803649e:	681b      	ldr	r3, [r3, #0]
 80364a0:	685b      	ldr	r3, [r3, #4]
 80364a2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80364a6:	687b      	ldr	r3, [r7, #4]
 80364a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80364aa:	687b      	ldr	r3, [r7, #4]
 80364ac:	681b      	ldr	r3, [r3, #0]
 80364ae:	430a      	orrs	r2, r1
 80364b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80364b2:	687b      	ldr	r3, [r7, #4]
 80364b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80364b6:	f003 0302 	and.w	r3, r3, #2
 80364ba:	2b00      	cmp	r3, #0
 80364bc:	d00a      	beq.n	80364d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80364be:	687b      	ldr	r3, [r7, #4]
 80364c0:	681b      	ldr	r3, [r3, #0]
 80364c2:	685b      	ldr	r3, [r3, #4]
 80364c4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80364c8:	687b      	ldr	r3, [r7, #4]
 80364ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80364cc:	687b      	ldr	r3, [r7, #4]
 80364ce:	681b      	ldr	r3, [r3, #0]
 80364d0:	430a      	orrs	r2, r1
 80364d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80364d4:	687b      	ldr	r3, [r7, #4]
 80364d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80364d8:	f003 0304 	and.w	r3, r3, #4
 80364dc:	2b00      	cmp	r3, #0
 80364de:	d00a      	beq.n	80364f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80364e0:	687b      	ldr	r3, [r7, #4]
 80364e2:	681b      	ldr	r3, [r3, #0]
 80364e4:	685b      	ldr	r3, [r3, #4]
 80364e6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80364ea:	687b      	ldr	r3, [r7, #4]
 80364ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80364ee:	687b      	ldr	r3, [r7, #4]
 80364f0:	681b      	ldr	r3, [r3, #0]
 80364f2:	430a      	orrs	r2, r1
 80364f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80364f6:	687b      	ldr	r3, [r7, #4]
 80364f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80364fa:	f003 0308 	and.w	r3, r3, #8
 80364fe:	2b00      	cmp	r3, #0
 8036500:	d00a      	beq.n	8036518 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8036502:	687b      	ldr	r3, [r7, #4]
 8036504:	681b      	ldr	r3, [r3, #0]
 8036506:	685b      	ldr	r3, [r3, #4]
 8036508:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 803650c:	687b      	ldr	r3, [r7, #4]
 803650e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8036510:	687b      	ldr	r3, [r7, #4]
 8036512:	681b      	ldr	r3, [r3, #0]
 8036514:	430a      	orrs	r2, r1
 8036516:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8036518:	687b      	ldr	r3, [r7, #4]
 803651a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 803651c:	f003 0310 	and.w	r3, r3, #16
 8036520:	2b00      	cmp	r3, #0
 8036522:	d00a      	beq.n	803653a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8036524:	687b      	ldr	r3, [r7, #4]
 8036526:	681b      	ldr	r3, [r3, #0]
 8036528:	689b      	ldr	r3, [r3, #8]
 803652a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 803652e:	687b      	ldr	r3, [r7, #4]
 8036530:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8036532:	687b      	ldr	r3, [r7, #4]
 8036534:	681b      	ldr	r3, [r3, #0]
 8036536:	430a      	orrs	r2, r1
 8036538:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 803653a:	687b      	ldr	r3, [r7, #4]
 803653c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 803653e:	f003 0320 	and.w	r3, r3, #32
 8036542:	2b00      	cmp	r3, #0
 8036544:	d00a      	beq.n	803655c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8036546:	687b      	ldr	r3, [r7, #4]
 8036548:	681b      	ldr	r3, [r3, #0]
 803654a:	689b      	ldr	r3, [r3, #8]
 803654c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8036550:	687b      	ldr	r3, [r7, #4]
 8036552:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8036554:	687b      	ldr	r3, [r7, #4]
 8036556:	681b      	ldr	r3, [r3, #0]
 8036558:	430a      	orrs	r2, r1
 803655a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 803655c:	687b      	ldr	r3, [r7, #4]
 803655e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8036560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8036564:	2b00      	cmp	r3, #0
 8036566:	d01a      	beq.n	803659e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8036568:	687b      	ldr	r3, [r7, #4]
 803656a:	681b      	ldr	r3, [r3, #0]
 803656c:	685b      	ldr	r3, [r3, #4]
 803656e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8036572:	687b      	ldr	r3, [r7, #4]
 8036574:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8036576:	687b      	ldr	r3, [r7, #4]
 8036578:	681b      	ldr	r3, [r3, #0]
 803657a:	430a      	orrs	r2, r1
 803657c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 803657e:	687b      	ldr	r3, [r7, #4]
 8036580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8036582:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8036586:	d10a      	bne.n	803659e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8036588:	687b      	ldr	r3, [r7, #4]
 803658a:	681b      	ldr	r3, [r3, #0]
 803658c:	685b      	ldr	r3, [r3, #4]
 803658e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8036592:	687b      	ldr	r3, [r7, #4]
 8036594:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8036596:	687b      	ldr	r3, [r7, #4]
 8036598:	681b      	ldr	r3, [r3, #0]
 803659a:	430a      	orrs	r2, r1
 803659c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 803659e:	687b      	ldr	r3, [r7, #4]
 80365a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80365a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80365a6:	2b00      	cmp	r3, #0
 80365a8:	d00a      	beq.n	80365c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80365aa:	687b      	ldr	r3, [r7, #4]
 80365ac:	681b      	ldr	r3, [r3, #0]
 80365ae:	685b      	ldr	r3, [r3, #4]
 80365b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80365b4:	687b      	ldr	r3, [r7, #4]
 80365b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80365b8:	687b      	ldr	r3, [r7, #4]
 80365ba:	681b      	ldr	r3, [r3, #0]
 80365bc:	430a      	orrs	r2, r1
 80365be:	605a      	str	r2, [r3, #4]
  }
}
 80365c0:	bf00      	nop
 80365c2:	370c      	adds	r7, #12
 80365c4:	46bd      	mov	sp, r7
 80365c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80365ca:	4770      	bx	lr

080365cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80365cc:	b580      	push	{r7, lr}
 80365ce:	b086      	sub	sp, #24
 80365d0:	af02      	add	r7, sp, #8
 80365d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80365d4:	687b      	ldr	r3, [r7, #4]
 80365d6:	2200      	movs	r2, #0
 80365d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80365dc:	f7f4 faec 	bl	802abb8 <HAL_GetTick>
 80365e0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80365e2:	687b      	ldr	r3, [r7, #4]
 80365e4:	681b      	ldr	r3, [r3, #0]
 80365e6:	681b      	ldr	r3, [r3, #0]
 80365e8:	f003 0308 	and.w	r3, r3, #8
 80365ec:	2b08      	cmp	r3, #8
 80365ee:	d10e      	bne.n	803660e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80365f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80365f4:	9300      	str	r3, [sp, #0]
 80365f6:	68fb      	ldr	r3, [r7, #12]
 80365f8:	2200      	movs	r2, #0
 80365fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80365fe:	6878      	ldr	r0, [r7, #4]
 8036600:	f000 f82f 	bl	8036662 <UART_WaitOnFlagUntilTimeout>
 8036604:	4603      	mov	r3, r0
 8036606:	2b00      	cmp	r3, #0
 8036608:	d001      	beq.n	803660e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 803660a:	2303      	movs	r3, #3
 803660c:	e025      	b.n	803665a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 803660e:	687b      	ldr	r3, [r7, #4]
 8036610:	681b      	ldr	r3, [r3, #0]
 8036612:	681b      	ldr	r3, [r3, #0]
 8036614:	f003 0304 	and.w	r3, r3, #4
 8036618:	2b04      	cmp	r3, #4
 803661a:	d10e      	bne.n	803663a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 803661c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8036620:	9300      	str	r3, [sp, #0]
 8036622:	68fb      	ldr	r3, [r7, #12]
 8036624:	2200      	movs	r2, #0
 8036626:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 803662a:	6878      	ldr	r0, [r7, #4]
 803662c:	f000 f819 	bl	8036662 <UART_WaitOnFlagUntilTimeout>
 8036630:	4603      	mov	r3, r0
 8036632:	2b00      	cmp	r3, #0
 8036634:	d001      	beq.n	803663a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8036636:	2303      	movs	r3, #3
 8036638:	e00f      	b.n	803665a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 803663a:	687b      	ldr	r3, [r7, #4]
 803663c:	2220      	movs	r2, #32
 803663e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8036642:	687b      	ldr	r3, [r7, #4]
 8036644:	2220      	movs	r2, #32
 8036646:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 803664a:	687b      	ldr	r3, [r7, #4]
 803664c:	2200      	movs	r2, #0
 803664e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8036650:	687b      	ldr	r3, [r7, #4]
 8036652:	2200      	movs	r2, #0
 8036654:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8036658:	2300      	movs	r3, #0
}
 803665a:	4618      	mov	r0, r3
 803665c:	3710      	adds	r7, #16
 803665e:	46bd      	mov	sp, r7
 8036660:	bd80      	pop	{r7, pc}

08036662 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8036662:	b580      	push	{r7, lr}
 8036664:	b09c      	sub	sp, #112	; 0x70
 8036666:	af00      	add	r7, sp, #0
 8036668:	60f8      	str	r0, [r7, #12]
 803666a:	60b9      	str	r1, [r7, #8]
 803666c:	603b      	str	r3, [r7, #0]
 803666e:	4613      	mov	r3, r2
 8036670:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8036672:	e0a9      	b.n	80367c8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8036674:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8036676:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 803667a:	f000 80a5 	beq.w	80367c8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 803667e:	f7f4 fa9b 	bl	802abb8 <HAL_GetTick>
 8036682:	4602      	mov	r2, r0
 8036684:	683b      	ldr	r3, [r7, #0]
 8036686:	1ad3      	subs	r3, r2, r3
 8036688:	6fba      	ldr	r2, [r7, #120]	; 0x78
 803668a:	429a      	cmp	r2, r3
 803668c:	d302      	bcc.n	8036694 <UART_WaitOnFlagUntilTimeout+0x32>
 803668e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8036690:	2b00      	cmp	r3, #0
 8036692:	d140      	bne.n	8036716 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8036694:	68fb      	ldr	r3, [r7, #12]
 8036696:	681b      	ldr	r3, [r3, #0]
 8036698:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803669a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 803669c:	e853 3f00 	ldrex	r3, [r3]
 80366a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80366a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80366a4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80366a8:	667b      	str	r3, [r7, #100]	; 0x64
 80366aa:	68fb      	ldr	r3, [r7, #12]
 80366ac:	681b      	ldr	r3, [r3, #0]
 80366ae:	461a      	mov	r2, r3
 80366b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80366b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80366b4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80366b6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80366b8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80366ba:	e841 2300 	strex	r3, r2, [r1]
 80366be:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80366c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80366c2:	2b00      	cmp	r3, #0
 80366c4:	d1e6      	bne.n	8036694 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80366c6:	68fb      	ldr	r3, [r7, #12]
 80366c8:	681b      	ldr	r3, [r3, #0]
 80366ca:	3308      	adds	r3, #8
 80366cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80366ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80366d0:	e853 3f00 	ldrex	r3, [r3]
 80366d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80366d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80366d8:	f023 0301 	bic.w	r3, r3, #1
 80366dc:	663b      	str	r3, [r7, #96]	; 0x60
 80366de:	68fb      	ldr	r3, [r7, #12]
 80366e0:	681b      	ldr	r3, [r3, #0]
 80366e2:	3308      	adds	r3, #8
 80366e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80366e6:	64ba      	str	r2, [r7, #72]	; 0x48
 80366e8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80366ea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80366ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80366ee:	e841 2300 	strex	r3, r2, [r1]
 80366f2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80366f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80366f6:	2b00      	cmp	r3, #0
 80366f8:	d1e5      	bne.n	80366c6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80366fa:	68fb      	ldr	r3, [r7, #12]
 80366fc:	2220      	movs	r2, #32
 80366fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8036702:	68fb      	ldr	r3, [r7, #12]
 8036704:	2220      	movs	r2, #32
 8036706:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 803670a:	68fb      	ldr	r3, [r7, #12]
 803670c:	2200      	movs	r2, #0
 803670e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8036712:	2303      	movs	r3, #3
 8036714:	e069      	b.n	80367ea <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8036716:	68fb      	ldr	r3, [r7, #12]
 8036718:	681b      	ldr	r3, [r3, #0]
 803671a:	681b      	ldr	r3, [r3, #0]
 803671c:	f003 0304 	and.w	r3, r3, #4
 8036720:	2b00      	cmp	r3, #0
 8036722:	d051      	beq.n	80367c8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8036724:	68fb      	ldr	r3, [r7, #12]
 8036726:	681b      	ldr	r3, [r3, #0]
 8036728:	69db      	ldr	r3, [r3, #28]
 803672a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 803672e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8036732:	d149      	bne.n	80367c8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8036734:	68fb      	ldr	r3, [r7, #12]
 8036736:	681b      	ldr	r3, [r3, #0]
 8036738:	f44f 6200 	mov.w	r2, #2048	; 0x800
 803673c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 803673e:	68fb      	ldr	r3, [r7, #12]
 8036740:	681b      	ldr	r3, [r3, #0]
 8036742:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8036746:	e853 3f00 	ldrex	r3, [r3]
 803674a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 803674c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803674e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8036752:	66fb      	str	r3, [r7, #108]	; 0x6c
 8036754:	68fb      	ldr	r3, [r7, #12]
 8036756:	681b      	ldr	r3, [r3, #0]
 8036758:	461a      	mov	r2, r3
 803675a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 803675c:	637b      	str	r3, [r7, #52]	; 0x34
 803675e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036760:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8036762:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8036764:	e841 2300 	strex	r3, r2, [r1]
 8036768:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 803676a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 803676c:	2b00      	cmp	r3, #0
 803676e:	d1e6      	bne.n	803673e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8036770:	68fb      	ldr	r3, [r7, #12]
 8036772:	681b      	ldr	r3, [r3, #0]
 8036774:	3308      	adds	r3, #8
 8036776:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036778:	697b      	ldr	r3, [r7, #20]
 803677a:	e853 3f00 	ldrex	r3, [r3]
 803677e:	613b      	str	r3, [r7, #16]
   return(result);
 8036780:	693b      	ldr	r3, [r7, #16]
 8036782:	f023 0301 	bic.w	r3, r3, #1
 8036786:	66bb      	str	r3, [r7, #104]	; 0x68
 8036788:	68fb      	ldr	r3, [r7, #12]
 803678a:	681b      	ldr	r3, [r3, #0]
 803678c:	3308      	adds	r3, #8
 803678e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8036790:	623a      	str	r2, [r7, #32]
 8036792:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036794:	69f9      	ldr	r1, [r7, #28]
 8036796:	6a3a      	ldr	r2, [r7, #32]
 8036798:	e841 2300 	strex	r3, r2, [r1]
 803679c:	61bb      	str	r3, [r7, #24]
   return(result);
 803679e:	69bb      	ldr	r3, [r7, #24]
 80367a0:	2b00      	cmp	r3, #0
 80367a2:	d1e5      	bne.n	8036770 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80367a4:	68fb      	ldr	r3, [r7, #12]
 80367a6:	2220      	movs	r2, #32
 80367a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80367ac:	68fb      	ldr	r3, [r7, #12]
 80367ae:	2220      	movs	r2, #32
 80367b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80367b4:	68fb      	ldr	r3, [r7, #12]
 80367b6:	2220      	movs	r2, #32
 80367b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80367bc:	68fb      	ldr	r3, [r7, #12]
 80367be:	2200      	movs	r2, #0
 80367c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80367c4:	2303      	movs	r3, #3
 80367c6:	e010      	b.n	80367ea <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80367c8:	68fb      	ldr	r3, [r7, #12]
 80367ca:	681b      	ldr	r3, [r3, #0]
 80367cc:	69da      	ldr	r2, [r3, #28]
 80367ce:	68bb      	ldr	r3, [r7, #8]
 80367d0:	4013      	ands	r3, r2
 80367d2:	68ba      	ldr	r2, [r7, #8]
 80367d4:	429a      	cmp	r2, r3
 80367d6:	bf0c      	ite	eq
 80367d8:	2301      	moveq	r3, #1
 80367da:	2300      	movne	r3, #0
 80367dc:	b2db      	uxtb	r3, r3
 80367de:	461a      	mov	r2, r3
 80367e0:	79fb      	ldrb	r3, [r7, #7]
 80367e2:	429a      	cmp	r2, r3
 80367e4:	f43f af46 	beq.w	8036674 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80367e8:	2300      	movs	r3, #0
}
 80367ea:	4618      	mov	r0, r3
 80367ec:	3770      	adds	r7, #112	; 0x70
 80367ee:	46bd      	mov	sp, r7
 80367f0:	bd80      	pop	{r7, pc}
	...

080367f4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80367f4:	b480      	push	{r7}
 80367f6:	b0a3      	sub	sp, #140	; 0x8c
 80367f8:	af00      	add	r7, sp, #0
 80367fa:	60f8      	str	r0, [r7, #12]
 80367fc:	60b9      	str	r1, [r7, #8]
 80367fe:	4613      	mov	r3, r2
 8036800:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8036802:	68fb      	ldr	r3, [r7, #12]
 8036804:	68ba      	ldr	r2, [r7, #8]
 8036806:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8036808:	68fb      	ldr	r3, [r7, #12]
 803680a:	88fa      	ldrh	r2, [r7, #6]
 803680c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8036810:	68fb      	ldr	r3, [r7, #12]
 8036812:	88fa      	ldrh	r2, [r7, #6]
 8036814:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8036818:	68fb      	ldr	r3, [r7, #12]
 803681a:	2200      	movs	r2, #0
 803681c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 803681e:	68fb      	ldr	r3, [r7, #12]
 8036820:	689b      	ldr	r3, [r3, #8]
 8036822:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8036826:	d10e      	bne.n	8036846 <UART_Start_Receive_IT+0x52>
 8036828:	68fb      	ldr	r3, [r7, #12]
 803682a:	691b      	ldr	r3, [r3, #16]
 803682c:	2b00      	cmp	r3, #0
 803682e:	d105      	bne.n	803683c <UART_Start_Receive_IT+0x48>
 8036830:	68fb      	ldr	r3, [r7, #12]
 8036832:	f240 12ff 	movw	r2, #511	; 0x1ff
 8036836:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 803683a:	e02d      	b.n	8036898 <UART_Start_Receive_IT+0xa4>
 803683c:	68fb      	ldr	r3, [r7, #12]
 803683e:	22ff      	movs	r2, #255	; 0xff
 8036840:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8036844:	e028      	b.n	8036898 <UART_Start_Receive_IT+0xa4>
 8036846:	68fb      	ldr	r3, [r7, #12]
 8036848:	689b      	ldr	r3, [r3, #8]
 803684a:	2b00      	cmp	r3, #0
 803684c:	d10d      	bne.n	803686a <UART_Start_Receive_IT+0x76>
 803684e:	68fb      	ldr	r3, [r7, #12]
 8036850:	691b      	ldr	r3, [r3, #16]
 8036852:	2b00      	cmp	r3, #0
 8036854:	d104      	bne.n	8036860 <UART_Start_Receive_IT+0x6c>
 8036856:	68fb      	ldr	r3, [r7, #12]
 8036858:	22ff      	movs	r2, #255	; 0xff
 803685a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 803685e:	e01b      	b.n	8036898 <UART_Start_Receive_IT+0xa4>
 8036860:	68fb      	ldr	r3, [r7, #12]
 8036862:	227f      	movs	r2, #127	; 0x7f
 8036864:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8036868:	e016      	b.n	8036898 <UART_Start_Receive_IT+0xa4>
 803686a:	68fb      	ldr	r3, [r7, #12]
 803686c:	689b      	ldr	r3, [r3, #8]
 803686e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8036872:	d10d      	bne.n	8036890 <UART_Start_Receive_IT+0x9c>
 8036874:	68fb      	ldr	r3, [r7, #12]
 8036876:	691b      	ldr	r3, [r3, #16]
 8036878:	2b00      	cmp	r3, #0
 803687a:	d104      	bne.n	8036886 <UART_Start_Receive_IT+0x92>
 803687c:	68fb      	ldr	r3, [r7, #12]
 803687e:	227f      	movs	r2, #127	; 0x7f
 8036880:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8036884:	e008      	b.n	8036898 <UART_Start_Receive_IT+0xa4>
 8036886:	68fb      	ldr	r3, [r7, #12]
 8036888:	223f      	movs	r2, #63	; 0x3f
 803688a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 803688e:	e003      	b.n	8036898 <UART_Start_Receive_IT+0xa4>
 8036890:	68fb      	ldr	r3, [r7, #12]
 8036892:	2200      	movs	r2, #0
 8036894:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8036898:	68fb      	ldr	r3, [r7, #12]
 803689a:	2200      	movs	r2, #0
 803689c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80368a0:	68fb      	ldr	r3, [r7, #12]
 80368a2:	2222      	movs	r2, #34	; 0x22
 80368a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80368a8:	68fb      	ldr	r3, [r7, #12]
 80368aa:	681b      	ldr	r3, [r3, #0]
 80368ac:	3308      	adds	r3, #8
 80368ae:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80368b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80368b2:	e853 3f00 	ldrex	r3, [r3]
 80368b6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80368b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80368ba:	f043 0301 	orr.w	r3, r3, #1
 80368be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80368c2:	68fb      	ldr	r3, [r7, #12]
 80368c4:	681b      	ldr	r3, [r3, #0]
 80368c6:	3308      	adds	r3, #8
 80368c8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80368cc:	673a      	str	r2, [r7, #112]	; 0x70
 80368ce:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80368d0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80368d2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80368d4:	e841 2300 	strex	r3, r2, [r1]
 80368d8:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80368da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80368dc:	2b00      	cmp	r3, #0
 80368de:	d1e3      	bne.n	80368a8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80368e0:	68fb      	ldr	r3, [r7, #12]
 80368e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80368e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80368e8:	d153      	bne.n	8036992 <UART_Start_Receive_IT+0x19e>
 80368ea:	68fb      	ldr	r3, [r7, #12]
 80368ec:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80368f0:	88fa      	ldrh	r2, [r7, #6]
 80368f2:	429a      	cmp	r2, r3
 80368f4:	d34d      	bcc.n	8036992 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80368f6:	68fb      	ldr	r3, [r7, #12]
 80368f8:	689b      	ldr	r3, [r3, #8]
 80368fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80368fe:	d107      	bne.n	8036910 <UART_Start_Receive_IT+0x11c>
 8036900:	68fb      	ldr	r3, [r7, #12]
 8036902:	691b      	ldr	r3, [r3, #16]
 8036904:	2b00      	cmp	r3, #0
 8036906:	d103      	bne.n	8036910 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8036908:	68fb      	ldr	r3, [r7, #12]
 803690a:	4a4b      	ldr	r2, [pc, #300]	; (8036a38 <UART_Start_Receive_IT+0x244>)
 803690c:	671a      	str	r2, [r3, #112]	; 0x70
 803690e:	e002      	b.n	8036916 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8036910:	68fb      	ldr	r3, [r7, #12]
 8036912:	4a4a      	ldr	r2, [pc, #296]	; (8036a3c <UART_Start_Receive_IT+0x248>)
 8036914:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8036916:	68fb      	ldr	r3, [r7, #12]
 8036918:	2200      	movs	r2, #0
 803691a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 803691e:	68fb      	ldr	r3, [r7, #12]
 8036920:	691b      	ldr	r3, [r3, #16]
 8036922:	2b00      	cmp	r3, #0
 8036924:	d01a      	beq.n	803695c <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8036926:	68fb      	ldr	r3, [r7, #12]
 8036928:	681b      	ldr	r3, [r3, #0]
 803692a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803692c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 803692e:	e853 3f00 	ldrex	r3, [r3]
 8036932:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8036934:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8036936:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 803693a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 803693e:	68fb      	ldr	r3, [r7, #12]
 8036940:	681b      	ldr	r3, [r3, #0]
 8036942:	461a      	mov	r2, r3
 8036944:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8036948:	65fb      	str	r3, [r7, #92]	; 0x5c
 803694a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803694c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 803694e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8036950:	e841 2300 	strex	r3, r2, [r1]
 8036954:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8036956:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8036958:	2b00      	cmp	r3, #0
 803695a:	d1e4      	bne.n	8036926 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 803695c:	68fb      	ldr	r3, [r7, #12]
 803695e:	681b      	ldr	r3, [r3, #0]
 8036960:	3308      	adds	r3, #8
 8036962:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8036966:	e853 3f00 	ldrex	r3, [r3]
 803696a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 803696c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803696e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8036972:	67fb      	str	r3, [r7, #124]	; 0x7c
 8036974:	68fb      	ldr	r3, [r7, #12]
 8036976:	681b      	ldr	r3, [r3, #0]
 8036978:	3308      	adds	r3, #8
 803697a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 803697c:	64ba      	str	r2, [r7, #72]	; 0x48
 803697e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036980:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8036982:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8036984:	e841 2300 	strex	r3, r2, [r1]
 8036988:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 803698a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 803698c:	2b00      	cmp	r3, #0
 803698e:	d1e5      	bne.n	803695c <UART_Start_Receive_IT+0x168>
 8036990:	e04a      	b.n	8036a28 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8036992:	68fb      	ldr	r3, [r7, #12]
 8036994:	689b      	ldr	r3, [r3, #8]
 8036996:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 803699a:	d107      	bne.n	80369ac <UART_Start_Receive_IT+0x1b8>
 803699c:	68fb      	ldr	r3, [r7, #12]
 803699e:	691b      	ldr	r3, [r3, #16]
 80369a0:	2b00      	cmp	r3, #0
 80369a2:	d103      	bne.n	80369ac <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80369a4:	68fb      	ldr	r3, [r7, #12]
 80369a6:	4a26      	ldr	r2, [pc, #152]	; (8036a40 <UART_Start_Receive_IT+0x24c>)
 80369a8:	671a      	str	r2, [r3, #112]	; 0x70
 80369aa:	e002      	b.n	80369b2 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80369ac:	68fb      	ldr	r3, [r7, #12]
 80369ae:	4a25      	ldr	r2, [pc, #148]	; (8036a44 <UART_Start_Receive_IT+0x250>)
 80369b0:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80369b2:	68fb      	ldr	r3, [r7, #12]
 80369b4:	2200      	movs	r2, #0
 80369b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80369ba:	68fb      	ldr	r3, [r7, #12]
 80369bc:	691b      	ldr	r3, [r3, #16]
 80369be:	2b00      	cmp	r3, #0
 80369c0:	d019      	beq.n	80369f6 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80369c2:	68fb      	ldr	r3, [r7, #12]
 80369c4:	681b      	ldr	r3, [r3, #0]
 80369c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80369c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80369ca:	e853 3f00 	ldrex	r3, [r3]
 80369ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80369d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80369d2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80369d6:	677b      	str	r3, [r7, #116]	; 0x74
 80369d8:	68fb      	ldr	r3, [r7, #12]
 80369da:	681b      	ldr	r3, [r3, #0]
 80369dc:	461a      	mov	r2, r3
 80369de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80369e0:	637b      	str	r3, [r7, #52]	; 0x34
 80369e2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80369e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80369e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80369e8:	e841 2300 	strex	r3, r2, [r1]
 80369ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80369ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80369f0:	2b00      	cmp	r3, #0
 80369f2:	d1e6      	bne.n	80369c2 <UART_Start_Receive_IT+0x1ce>
 80369f4:	e018      	b.n	8036a28 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80369f6:	68fb      	ldr	r3, [r7, #12]
 80369f8:	681b      	ldr	r3, [r3, #0]
 80369fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80369fc:	697b      	ldr	r3, [r7, #20]
 80369fe:	e853 3f00 	ldrex	r3, [r3]
 8036a02:	613b      	str	r3, [r7, #16]
   return(result);
 8036a04:	693b      	ldr	r3, [r7, #16]
 8036a06:	f043 0320 	orr.w	r3, r3, #32
 8036a0a:	67bb      	str	r3, [r7, #120]	; 0x78
 8036a0c:	68fb      	ldr	r3, [r7, #12]
 8036a0e:	681b      	ldr	r3, [r3, #0]
 8036a10:	461a      	mov	r2, r3
 8036a12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8036a14:	623b      	str	r3, [r7, #32]
 8036a16:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036a18:	69f9      	ldr	r1, [r7, #28]
 8036a1a:	6a3a      	ldr	r2, [r7, #32]
 8036a1c:	e841 2300 	strex	r3, r2, [r1]
 8036a20:	61bb      	str	r3, [r7, #24]
   return(result);
 8036a22:	69bb      	ldr	r3, [r7, #24]
 8036a24:	2b00      	cmp	r3, #0
 8036a26:	d1e6      	bne.n	80369f6 <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 8036a28:	2300      	movs	r3, #0
}
 8036a2a:	4618      	mov	r0, r3
 8036a2c:	378c      	adds	r7, #140	; 0x8c
 8036a2e:	46bd      	mov	sp, r7
 8036a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8036a34:	4770      	bx	lr
 8036a36:	bf00      	nop
 8036a38:	08037495 	.word	0x08037495
 8036a3c:	0803719d 	.word	0x0803719d
 8036a40:	0803703b 	.word	0x0803703b
 8036a44:	08036edb 	.word	0x08036edb

08036a48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8036a48:	b480      	push	{r7}
 8036a4a:	b095      	sub	sp, #84	; 0x54
 8036a4c:	af00      	add	r7, sp, #0
 8036a4e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8036a50:	687b      	ldr	r3, [r7, #4]
 8036a52:	681b      	ldr	r3, [r3, #0]
 8036a54:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8036a58:	e853 3f00 	ldrex	r3, [r3]
 8036a5c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8036a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8036a60:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8036a64:	64fb      	str	r3, [r7, #76]	; 0x4c
 8036a66:	687b      	ldr	r3, [r7, #4]
 8036a68:	681b      	ldr	r3, [r3, #0]
 8036a6a:	461a      	mov	r2, r3
 8036a6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8036a6e:	643b      	str	r3, [r7, #64]	; 0x40
 8036a70:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036a72:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8036a74:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8036a76:	e841 2300 	strex	r3, r2, [r1]
 8036a7a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8036a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8036a7e:	2b00      	cmp	r3, #0
 8036a80:	d1e6      	bne.n	8036a50 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8036a82:	687b      	ldr	r3, [r7, #4]
 8036a84:	681b      	ldr	r3, [r3, #0]
 8036a86:	3308      	adds	r3, #8
 8036a88:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036a8a:	6a3b      	ldr	r3, [r7, #32]
 8036a8c:	e853 3f00 	ldrex	r3, [r3]
 8036a90:	61fb      	str	r3, [r7, #28]
   return(result);
 8036a92:	69fa      	ldr	r2, [r7, #28]
 8036a94:	4b1e      	ldr	r3, [pc, #120]	; (8036b10 <UART_EndRxTransfer+0xc8>)
 8036a96:	4013      	ands	r3, r2
 8036a98:	64bb      	str	r3, [r7, #72]	; 0x48
 8036a9a:	687b      	ldr	r3, [r7, #4]
 8036a9c:	681b      	ldr	r3, [r3, #0]
 8036a9e:	3308      	adds	r3, #8
 8036aa0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8036aa2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8036aa4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036aa6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8036aa8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8036aaa:	e841 2300 	strex	r3, r2, [r1]
 8036aae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8036ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8036ab2:	2b00      	cmp	r3, #0
 8036ab4:	d1e5      	bne.n	8036a82 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8036ab6:	687b      	ldr	r3, [r7, #4]
 8036ab8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8036aba:	2b01      	cmp	r3, #1
 8036abc:	d118      	bne.n	8036af0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8036abe:	687b      	ldr	r3, [r7, #4]
 8036ac0:	681b      	ldr	r3, [r3, #0]
 8036ac2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036ac4:	68fb      	ldr	r3, [r7, #12]
 8036ac6:	e853 3f00 	ldrex	r3, [r3]
 8036aca:	60bb      	str	r3, [r7, #8]
   return(result);
 8036acc:	68bb      	ldr	r3, [r7, #8]
 8036ace:	f023 0310 	bic.w	r3, r3, #16
 8036ad2:	647b      	str	r3, [r7, #68]	; 0x44
 8036ad4:	687b      	ldr	r3, [r7, #4]
 8036ad6:	681b      	ldr	r3, [r3, #0]
 8036ad8:	461a      	mov	r2, r3
 8036ada:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8036adc:	61bb      	str	r3, [r7, #24]
 8036ade:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036ae0:	6979      	ldr	r1, [r7, #20]
 8036ae2:	69ba      	ldr	r2, [r7, #24]
 8036ae4:	e841 2300 	strex	r3, r2, [r1]
 8036ae8:	613b      	str	r3, [r7, #16]
   return(result);
 8036aea:	693b      	ldr	r3, [r7, #16]
 8036aec:	2b00      	cmp	r3, #0
 8036aee:	d1e6      	bne.n	8036abe <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8036af0:	687b      	ldr	r3, [r7, #4]
 8036af2:	2220      	movs	r2, #32
 8036af4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8036af8:	687b      	ldr	r3, [r7, #4]
 8036afa:	2200      	movs	r2, #0
 8036afc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8036afe:	687b      	ldr	r3, [r7, #4]
 8036b00:	2200      	movs	r2, #0
 8036b02:	671a      	str	r2, [r3, #112]	; 0x70
}
 8036b04:	bf00      	nop
 8036b06:	3754      	adds	r7, #84	; 0x54
 8036b08:	46bd      	mov	sp, r7
 8036b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8036b0e:	4770      	bx	lr
 8036b10:	effffffe 	.word	0xeffffffe

08036b14 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8036b14:	b580      	push	{r7, lr}
 8036b16:	b084      	sub	sp, #16
 8036b18:	af00      	add	r7, sp, #0
 8036b1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8036b1c:	687b      	ldr	r3, [r7, #4]
 8036b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8036b20:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8036b22:	68fb      	ldr	r3, [r7, #12]
 8036b24:	2200      	movs	r2, #0
 8036b26:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8036b2a:	68fb      	ldr	r3, [r7, #12]
 8036b2c:	2200      	movs	r2, #0
 8036b2e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8036b32:	68f8      	ldr	r0, [r7, #12]
 8036b34:	f7fe ff2a 	bl	803598c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8036b38:	bf00      	nop
 8036b3a:	3710      	adds	r7, #16
 8036b3c:	46bd      	mov	sp, r7
 8036b3e:	bd80      	pop	{r7, pc}

08036b40 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8036b40:	b480      	push	{r7}
 8036b42:	b08f      	sub	sp, #60	; 0x3c
 8036b44:	af00      	add	r7, sp, #0
 8036b46:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8036b48:	687b      	ldr	r3, [r7, #4]
 8036b4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8036b4e:	2b21      	cmp	r3, #33	; 0x21
 8036b50:	d14c      	bne.n	8036bec <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8036b52:	687b      	ldr	r3, [r7, #4]
 8036b54:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8036b58:	b29b      	uxth	r3, r3
 8036b5a:	2b00      	cmp	r3, #0
 8036b5c:	d132      	bne.n	8036bc4 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8036b5e:	687b      	ldr	r3, [r7, #4]
 8036b60:	681b      	ldr	r3, [r3, #0]
 8036b62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036b64:	6a3b      	ldr	r3, [r7, #32]
 8036b66:	e853 3f00 	ldrex	r3, [r3]
 8036b6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8036b6c:	69fb      	ldr	r3, [r7, #28]
 8036b6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8036b72:	637b      	str	r3, [r7, #52]	; 0x34
 8036b74:	687b      	ldr	r3, [r7, #4]
 8036b76:	681b      	ldr	r3, [r3, #0]
 8036b78:	461a      	mov	r2, r3
 8036b7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8036b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8036b7e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036b80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8036b82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8036b84:	e841 2300 	strex	r3, r2, [r1]
 8036b88:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8036b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8036b8c:	2b00      	cmp	r3, #0
 8036b8e:	d1e6      	bne.n	8036b5e <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8036b90:	687b      	ldr	r3, [r7, #4]
 8036b92:	681b      	ldr	r3, [r3, #0]
 8036b94:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036b96:	68fb      	ldr	r3, [r7, #12]
 8036b98:	e853 3f00 	ldrex	r3, [r3]
 8036b9c:	60bb      	str	r3, [r7, #8]
   return(result);
 8036b9e:	68bb      	ldr	r3, [r7, #8]
 8036ba0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8036ba4:	633b      	str	r3, [r7, #48]	; 0x30
 8036ba6:	687b      	ldr	r3, [r7, #4]
 8036ba8:	681b      	ldr	r3, [r3, #0]
 8036baa:	461a      	mov	r2, r3
 8036bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8036bae:	61bb      	str	r3, [r7, #24]
 8036bb0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036bb2:	6979      	ldr	r1, [r7, #20]
 8036bb4:	69ba      	ldr	r2, [r7, #24]
 8036bb6:	e841 2300 	strex	r3, r2, [r1]
 8036bba:	613b      	str	r3, [r7, #16]
   return(result);
 8036bbc:	693b      	ldr	r3, [r7, #16]
 8036bbe:	2b00      	cmp	r3, #0
 8036bc0:	d1e6      	bne.n	8036b90 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8036bc2:	e013      	b.n	8036bec <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8036bc4:	687b      	ldr	r3, [r7, #4]
 8036bc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8036bc8:	781a      	ldrb	r2, [r3, #0]
 8036bca:	687b      	ldr	r3, [r7, #4]
 8036bcc:	681b      	ldr	r3, [r3, #0]
 8036bce:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8036bd0:	687b      	ldr	r3, [r7, #4]
 8036bd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8036bd4:	1c5a      	adds	r2, r3, #1
 8036bd6:	687b      	ldr	r3, [r7, #4]
 8036bd8:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8036bda:	687b      	ldr	r3, [r7, #4]
 8036bdc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8036be0:	b29b      	uxth	r3, r3
 8036be2:	3b01      	subs	r3, #1
 8036be4:	b29a      	uxth	r2, r3
 8036be6:	687b      	ldr	r3, [r7, #4]
 8036be8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8036bec:	bf00      	nop
 8036bee:	373c      	adds	r7, #60	; 0x3c
 8036bf0:	46bd      	mov	sp, r7
 8036bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8036bf6:	4770      	bx	lr

08036bf8 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8036bf8:	b480      	push	{r7}
 8036bfa:	b091      	sub	sp, #68	; 0x44
 8036bfc:	af00      	add	r7, sp, #0
 8036bfe:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8036c00:	687b      	ldr	r3, [r7, #4]
 8036c02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8036c06:	2b21      	cmp	r3, #33	; 0x21
 8036c08:	d151      	bne.n	8036cae <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8036c0a:	687b      	ldr	r3, [r7, #4]
 8036c0c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8036c10:	b29b      	uxth	r3, r3
 8036c12:	2b00      	cmp	r3, #0
 8036c14:	d132      	bne.n	8036c7c <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8036c16:	687b      	ldr	r3, [r7, #4]
 8036c18:	681b      	ldr	r3, [r3, #0]
 8036c1a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8036c1e:	e853 3f00 	ldrex	r3, [r3]
 8036c22:	623b      	str	r3, [r7, #32]
   return(result);
 8036c24:	6a3b      	ldr	r3, [r7, #32]
 8036c26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8036c2a:	63bb      	str	r3, [r7, #56]	; 0x38
 8036c2c:	687b      	ldr	r3, [r7, #4]
 8036c2e:	681b      	ldr	r3, [r3, #0]
 8036c30:	461a      	mov	r2, r3
 8036c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8036c34:	633b      	str	r3, [r7, #48]	; 0x30
 8036c36:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036c38:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8036c3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8036c3c:	e841 2300 	strex	r3, r2, [r1]
 8036c40:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8036c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8036c44:	2b00      	cmp	r3, #0
 8036c46:	d1e6      	bne.n	8036c16 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8036c48:	687b      	ldr	r3, [r7, #4]
 8036c4a:	681b      	ldr	r3, [r3, #0]
 8036c4c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036c4e:	693b      	ldr	r3, [r7, #16]
 8036c50:	e853 3f00 	ldrex	r3, [r3]
 8036c54:	60fb      	str	r3, [r7, #12]
   return(result);
 8036c56:	68fb      	ldr	r3, [r7, #12]
 8036c58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8036c5c:	637b      	str	r3, [r7, #52]	; 0x34
 8036c5e:	687b      	ldr	r3, [r7, #4]
 8036c60:	681b      	ldr	r3, [r3, #0]
 8036c62:	461a      	mov	r2, r3
 8036c64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8036c66:	61fb      	str	r3, [r7, #28]
 8036c68:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036c6a:	69b9      	ldr	r1, [r7, #24]
 8036c6c:	69fa      	ldr	r2, [r7, #28]
 8036c6e:	e841 2300 	strex	r3, r2, [r1]
 8036c72:	617b      	str	r3, [r7, #20]
   return(result);
 8036c74:	697b      	ldr	r3, [r7, #20]
 8036c76:	2b00      	cmp	r3, #0
 8036c78:	d1e6      	bne.n	8036c48 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8036c7a:	e018      	b.n	8036cae <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8036c7c:	687b      	ldr	r3, [r7, #4]
 8036c7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8036c80:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8036c82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8036c84:	881b      	ldrh	r3, [r3, #0]
 8036c86:	461a      	mov	r2, r3
 8036c88:	687b      	ldr	r3, [r7, #4]
 8036c8a:	681b      	ldr	r3, [r3, #0]
 8036c8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8036c90:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8036c92:	687b      	ldr	r3, [r7, #4]
 8036c94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8036c96:	1c9a      	adds	r2, r3, #2
 8036c98:	687b      	ldr	r3, [r7, #4]
 8036c9a:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8036c9c:	687b      	ldr	r3, [r7, #4]
 8036c9e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8036ca2:	b29b      	uxth	r3, r3
 8036ca4:	3b01      	subs	r3, #1
 8036ca6:	b29a      	uxth	r2, r3
 8036ca8:	687b      	ldr	r3, [r7, #4]
 8036caa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8036cae:	bf00      	nop
 8036cb0:	3744      	adds	r7, #68	; 0x44
 8036cb2:	46bd      	mov	sp, r7
 8036cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8036cb8:	4770      	bx	lr

08036cba <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8036cba:	b480      	push	{r7}
 8036cbc:	b091      	sub	sp, #68	; 0x44
 8036cbe:	af00      	add	r7, sp, #0
 8036cc0:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8036cc2:	687b      	ldr	r3, [r7, #4]
 8036cc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8036cc8:	2b21      	cmp	r3, #33	; 0x21
 8036cca:	d160      	bne.n	8036d8e <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8036ccc:	687b      	ldr	r3, [r7, #4]
 8036cce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8036cd2:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8036cd4:	e057      	b.n	8036d86 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8036cd6:	687b      	ldr	r3, [r7, #4]
 8036cd8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8036cdc:	b29b      	uxth	r3, r3
 8036cde:	2b00      	cmp	r3, #0
 8036ce0:	d133      	bne.n	8036d4a <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8036ce2:	687b      	ldr	r3, [r7, #4]
 8036ce4:	681b      	ldr	r3, [r3, #0]
 8036ce6:	3308      	adds	r3, #8
 8036ce8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8036cec:	e853 3f00 	ldrex	r3, [r3]
 8036cf0:	623b      	str	r3, [r7, #32]
   return(result);
 8036cf2:	6a3b      	ldr	r3, [r7, #32]
 8036cf4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8036cf8:	63bb      	str	r3, [r7, #56]	; 0x38
 8036cfa:	687b      	ldr	r3, [r7, #4]
 8036cfc:	681b      	ldr	r3, [r3, #0]
 8036cfe:	3308      	adds	r3, #8
 8036d00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8036d02:	633a      	str	r2, [r7, #48]	; 0x30
 8036d04:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036d06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8036d08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8036d0a:	e841 2300 	strex	r3, r2, [r1]
 8036d0e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8036d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8036d12:	2b00      	cmp	r3, #0
 8036d14:	d1e5      	bne.n	8036ce2 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8036d16:	687b      	ldr	r3, [r7, #4]
 8036d18:	681b      	ldr	r3, [r3, #0]
 8036d1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036d1c:	693b      	ldr	r3, [r7, #16]
 8036d1e:	e853 3f00 	ldrex	r3, [r3]
 8036d22:	60fb      	str	r3, [r7, #12]
   return(result);
 8036d24:	68fb      	ldr	r3, [r7, #12]
 8036d26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8036d2a:	637b      	str	r3, [r7, #52]	; 0x34
 8036d2c:	687b      	ldr	r3, [r7, #4]
 8036d2e:	681b      	ldr	r3, [r3, #0]
 8036d30:	461a      	mov	r2, r3
 8036d32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8036d34:	61fb      	str	r3, [r7, #28]
 8036d36:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036d38:	69b9      	ldr	r1, [r7, #24]
 8036d3a:	69fa      	ldr	r2, [r7, #28]
 8036d3c:	e841 2300 	strex	r3, r2, [r1]
 8036d40:	617b      	str	r3, [r7, #20]
   return(result);
 8036d42:	697b      	ldr	r3, [r7, #20]
 8036d44:	2b00      	cmp	r3, #0
 8036d46:	d1e6      	bne.n	8036d16 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8036d48:	e021      	b.n	8036d8e <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8036d4a:	687b      	ldr	r3, [r7, #4]
 8036d4c:	681b      	ldr	r3, [r3, #0]
 8036d4e:	69db      	ldr	r3, [r3, #28]
 8036d50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8036d54:	2b00      	cmp	r3, #0
 8036d56:	d013      	beq.n	8036d80 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8036d58:	687b      	ldr	r3, [r7, #4]
 8036d5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8036d5c:	781a      	ldrb	r2, [r3, #0]
 8036d5e:	687b      	ldr	r3, [r7, #4]
 8036d60:	681b      	ldr	r3, [r3, #0]
 8036d62:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8036d64:	687b      	ldr	r3, [r7, #4]
 8036d66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8036d68:	1c5a      	adds	r2, r3, #1
 8036d6a:	687b      	ldr	r3, [r7, #4]
 8036d6c:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8036d6e:	687b      	ldr	r3, [r7, #4]
 8036d70:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8036d74:	b29b      	uxth	r3, r3
 8036d76:	3b01      	subs	r3, #1
 8036d78:	b29a      	uxth	r2, r3
 8036d7a:	687b      	ldr	r3, [r7, #4]
 8036d7c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8036d80:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8036d82:	3b01      	subs	r3, #1
 8036d84:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8036d86:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8036d88:	2b00      	cmp	r3, #0
 8036d8a:	d1a4      	bne.n	8036cd6 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8036d8c:	e7ff      	b.n	8036d8e <UART_TxISR_8BIT_FIFOEN+0xd4>
 8036d8e:	bf00      	nop
 8036d90:	3744      	adds	r7, #68	; 0x44
 8036d92:	46bd      	mov	sp, r7
 8036d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8036d98:	4770      	bx	lr

08036d9a <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8036d9a:	b480      	push	{r7}
 8036d9c:	b091      	sub	sp, #68	; 0x44
 8036d9e:	af00      	add	r7, sp, #0
 8036da0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8036da2:	687b      	ldr	r3, [r7, #4]
 8036da4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8036da8:	2b21      	cmp	r3, #33	; 0x21
 8036daa:	d165      	bne.n	8036e78 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8036dac:	687b      	ldr	r3, [r7, #4]
 8036dae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8036db2:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8036db4:	e05c      	b.n	8036e70 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8036db6:	687b      	ldr	r3, [r7, #4]
 8036db8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8036dbc:	b29b      	uxth	r3, r3
 8036dbe:	2b00      	cmp	r3, #0
 8036dc0:	d133      	bne.n	8036e2a <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8036dc2:	687b      	ldr	r3, [r7, #4]
 8036dc4:	681b      	ldr	r3, [r3, #0]
 8036dc6:	3308      	adds	r3, #8
 8036dc8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036dca:	6a3b      	ldr	r3, [r7, #32]
 8036dcc:	e853 3f00 	ldrex	r3, [r3]
 8036dd0:	61fb      	str	r3, [r7, #28]
   return(result);
 8036dd2:	69fb      	ldr	r3, [r7, #28]
 8036dd4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8036dd8:	637b      	str	r3, [r7, #52]	; 0x34
 8036dda:	687b      	ldr	r3, [r7, #4]
 8036ddc:	681b      	ldr	r3, [r3, #0]
 8036dde:	3308      	adds	r3, #8
 8036de0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8036de2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8036de4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036de6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8036de8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8036dea:	e841 2300 	strex	r3, r2, [r1]
 8036dee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8036df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8036df2:	2b00      	cmp	r3, #0
 8036df4:	d1e5      	bne.n	8036dc2 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8036df6:	687b      	ldr	r3, [r7, #4]
 8036df8:	681b      	ldr	r3, [r3, #0]
 8036dfa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036dfc:	68fb      	ldr	r3, [r7, #12]
 8036dfe:	e853 3f00 	ldrex	r3, [r3]
 8036e02:	60bb      	str	r3, [r7, #8]
   return(result);
 8036e04:	68bb      	ldr	r3, [r7, #8]
 8036e06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8036e0a:	633b      	str	r3, [r7, #48]	; 0x30
 8036e0c:	687b      	ldr	r3, [r7, #4]
 8036e0e:	681b      	ldr	r3, [r3, #0]
 8036e10:	461a      	mov	r2, r3
 8036e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8036e14:	61bb      	str	r3, [r7, #24]
 8036e16:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036e18:	6979      	ldr	r1, [r7, #20]
 8036e1a:	69ba      	ldr	r2, [r7, #24]
 8036e1c:	e841 2300 	strex	r3, r2, [r1]
 8036e20:	613b      	str	r3, [r7, #16]
   return(result);
 8036e22:	693b      	ldr	r3, [r7, #16]
 8036e24:	2b00      	cmp	r3, #0
 8036e26:	d1e6      	bne.n	8036df6 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8036e28:	e026      	b.n	8036e78 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8036e2a:	687b      	ldr	r3, [r7, #4]
 8036e2c:	681b      	ldr	r3, [r3, #0]
 8036e2e:	69db      	ldr	r3, [r3, #28]
 8036e30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8036e34:	2b00      	cmp	r3, #0
 8036e36:	d018      	beq.n	8036e6a <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8036e38:	687b      	ldr	r3, [r7, #4]
 8036e3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8036e3c:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8036e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8036e40:	881b      	ldrh	r3, [r3, #0]
 8036e42:	461a      	mov	r2, r3
 8036e44:	687b      	ldr	r3, [r7, #4]
 8036e46:	681b      	ldr	r3, [r3, #0]
 8036e48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8036e4c:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8036e4e:	687b      	ldr	r3, [r7, #4]
 8036e50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8036e52:	1c9a      	adds	r2, r3, #2
 8036e54:	687b      	ldr	r3, [r7, #4]
 8036e56:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8036e58:	687b      	ldr	r3, [r7, #4]
 8036e5a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8036e5e:	b29b      	uxth	r3, r3
 8036e60:	3b01      	subs	r3, #1
 8036e62:	b29a      	uxth	r2, r3
 8036e64:	687b      	ldr	r3, [r7, #4]
 8036e66:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8036e6a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8036e6c:	3b01      	subs	r3, #1
 8036e6e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8036e70:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8036e72:	2b00      	cmp	r3, #0
 8036e74:	d19f      	bne.n	8036db6 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8036e76:	e7ff      	b.n	8036e78 <UART_TxISR_16BIT_FIFOEN+0xde>
 8036e78:	bf00      	nop
 8036e7a:	3744      	adds	r7, #68	; 0x44
 8036e7c:	46bd      	mov	sp, r7
 8036e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8036e82:	4770      	bx	lr

08036e84 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8036e84:	b580      	push	{r7, lr}
 8036e86:	b088      	sub	sp, #32
 8036e88:	af00      	add	r7, sp, #0
 8036e8a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8036e8c:	687b      	ldr	r3, [r7, #4]
 8036e8e:	681b      	ldr	r3, [r3, #0]
 8036e90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036e92:	68fb      	ldr	r3, [r7, #12]
 8036e94:	e853 3f00 	ldrex	r3, [r3]
 8036e98:	60bb      	str	r3, [r7, #8]
   return(result);
 8036e9a:	68bb      	ldr	r3, [r7, #8]
 8036e9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8036ea0:	61fb      	str	r3, [r7, #28]
 8036ea2:	687b      	ldr	r3, [r7, #4]
 8036ea4:	681b      	ldr	r3, [r3, #0]
 8036ea6:	461a      	mov	r2, r3
 8036ea8:	69fb      	ldr	r3, [r7, #28]
 8036eaa:	61bb      	str	r3, [r7, #24]
 8036eac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036eae:	6979      	ldr	r1, [r7, #20]
 8036eb0:	69ba      	ldr	r2, [r7, #24]
 8036eb2:	e841 2300 	strex	r3, r2, [r1]
 8036eb6:	613b      	str	r3, [r7, #16]
   return(result);
 8036eb8:	693b      	ldr	r3, [r7, #16]
 8036eba:	2b00      	cmp	r3, #0
 8036ebc:	d1e6      	bne.n	8036e8c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8036ebe:	687b      	ldr	r3, [r7, #4]
 8036ec0:	2220      	movs	r2, #32
 8036ec2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8036ec6:	687b      	ldr	r3, [r7, #4]
 8036ec8:	2200      	movs	r2, #0
 8036eca:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8036ecc:	6878      	ldr	r0, [r7, #4]
 8036ece:	f7f2 fd81 	bl	80299d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8036ed2:	bf00      	nop
 8036ed4:	3720      	adds	r7, #32
 8036ed6:	46bd      	mov	sp, r7
 8036ed8:	bd80      	pop	{r7, pc}

08036eda <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8036eda:	b580      	push	{r7, lr}
 8036edc:	b096      	sub	sp, #88	; 0x58
 8036ede:	af00      	add	r7, sp, #0
 8036ee0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8036ee2:	687b      	ldr	r3, [r7, #4]
 8036ee4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8036ee8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8036eec:	687b      	ldr	r3, [r7, #4]
 8036eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8036ef2:	2b22      	cmp	r3, #34	; 0x22
 8036ef4:	f040 8095 	bne.w	8037022 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8036ef8:	687b      	ldr	r3, [r7, #4]
 8036efa:	681b      	ldr	r3, [r3, #0]
 8036efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8036efe:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8036f02:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8036f06:	b2d9      	uxtb	r1, r3
 8036f08:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8036f0c:	b2da      	uxtb	r2, r3
 8036f0e:	687b      	ldr	r3, [r7, #4]
 8036f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8036f12:	400a      	ands	r2, r1
 8036f14:	b2d2      	uxtb	r2, r2
 8036f16:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8036f18:	687b      	ldr	r3, [r7, #4]
 8036f1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8036f1c:	1c5a      	adds	r2, r3, #1
 8036f1e:	687b      	ldr	r3, [r7, #4]
 8036f20:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8036f22:	687b      	ldr	r3, [r7, #4]
 8036f24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8036f28:	b29b      	uxth	r3, r3
 8036f2a:	3b01      	subs	r3, #1
 8036f2c:	b29a      	uxth	r2, r3
 8036f2e:	687b      	ldr	r3, [r7, #4]
 8036f30:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8036f34:	687b      	ldr	r3, [r7, #4]
 8036f36:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8036f3a:	b29b      	uxth	r3, r3
 8036f3c:	2b00      	cmp	r3, #0
 8036f3e:	d178      	bne.n	8037032 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8036f40:	687b      	ldr	r3, [r7, #4]
 8036f42:	681b      	ldr	r3, [r3, #0]
 8036f44:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8036f48:	e853 3f00 	ldrex	r3, [r3]
 8036f4c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8036f4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8036f50:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8036f54:	653b      	str	r3, [r7, #80]	; 0x50
 8036f56:	687b      	ldr	r3, [r7, #4]
 8036f58:	681b      	ldr	r3, [r3, #0]
 8036f5a:	461a      	mov	r2, r3
 8036f5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8036f5e:	647b      	str	r3, [r7, #68]	; 0x44
 8036f60:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036f62:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8036f64:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8036f66:	e841 2300 	strex	r3, r2, [r1]
 8036f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8036f6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8036f6e:	2b00      	cmp	r3, #0
 8036f70:	d1e6      	bne.n	8036f40 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8036f72:	687b      	ldr	r3, [r7, #4]
 8036f74:	681b      	ldr	r3, [r3, #0]
 8036f76:	3308      	adds	r3, #8
 8036f78:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8036f7c:	e853 3f00 	ldrex	r3, [r3]
 8036f80:	623b      	str	r3, [r7, #32]
   return(result);
 8036f82:	6a3b      	ldr	r3, [r7, #32]
 8036f84:	f023 0301 	bic.w	r3, r3, #1
 8036f88:	64fb      	str	r3, [r7, #76]	; 0x4c
 8036f8a:	687b      	ldr	r3, [r7, #4]
 8036f8c:	681b      	ldr	r3, [r3, #0]
 8036f8e:	3308      	adds	r3, #8
 8036f90:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8036f92:	633a      	str	r2, [r7, #48]	; 0x30
 8036f94:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036f96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8036f98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8036f9a:	e841 2300 	strex	r3, r2, [r1]
 8036f9e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8036fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8036fa2:	2b00      	cmp	r3, #0
 8036fa4:	d1e5      	bne.n	8036f72 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8036fa6:	687b      	ldr	r3, [r7, #4]
 8036fa8:	2220      	movs	r2, #32
 8036faa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8036fae:	687b      	ldr	r3, [r7, #4]
 8036fb0:	2200      	movs	r2, #0
 8036fb2:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8036fb4:	687b      	ldr	r3, [r7, #4]
 8036fb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8036fb8:	2b01      	cmp	r3, #1
 8036fba:	d12e      	bne.n	803701a <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8036fbc:	687b      	ldr	r3, [r7, #4]
 8036fbe:	2200      	movs	r2, #0
 8036fc0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8036fc2:	687b      	ldr	r3, [r7, #4]
 8036fc4:	681b      	ldr	r3, [r3, #0]
 8036fc6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036fc8:	693b      	ldr	r3, [r7, #16]
 8036fca:	e853 3f00 	ldrex	r3, [r3]
 8036fce:	60fb      	str	r3, [r7, #12]
   return(result);
 8036fd0:	68fb      	ldr	r3, [r7, #12]
 8036fd2:	f023 0310 	bic.w	r3, r3, #16
 8036fd6:	64bb      	str	r3, [r7, #72]	; 0x48
 8036fd8:	687b      	ldr	r3, [r7, #4]
 8036fda:	681b      	ldr	r3, [r3, #0]
 8036fdc:	461a      	mov	r2, r3
 8036fde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8036fe0:	61fb      	str	r3, [r7, #28]
 8036fe2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036fe4:	69b9      	ldr	r1, [r7, #24]
 8036fe6:	69fa      	ldr	r2, [r7, #28]
 8036fe8:	e841 2300 	strex	r3, r2, [r1]
 8036fec:	617b      	str	r3, [r7, #20]
   return(result);
 8036fee:	697b      	ldr	r3, [r7, #20]
 8036ff0:	2b00      	cmp	r3, #0
 8036ff2:	d1e6      	bne.n	8036fc2 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8036ff4:	687b      	ldr	r3, [r7, #4]
 8036ff6:	681b      	ldr	r3, [r3, #0]
 8036ff8:	69db      	ldr	r3, [r3, #28]
 8036ffa:	f003 0310 	and.w	r3, r3, #16
 8036ffe:	2b10      	cmp	r3, #16
 8037000:	d103      	bne.n	803700a <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8037002:	687b      	ldr	r3, [r7, #4]
 8037004:	681b      	ldr	r3, [r3, #0]
 8037006:	2210      	movs	r2, #16
 8037008:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 803700a:	687b      	ldr	r3, [r7, #4]
 803700c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8037010:	4619      	mov	r1, r3
 8037012:	6878      	ldr	r0, [r7, #4]
 8037014:	f7fe fcc4 	bl	80359a0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8037018:	e00b      	b.n	8037032 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 803701a:	6878      	ldr	r0, [r7, #4]
 803701c:	f7f2 fcb6 	bl	802998c <HAL_UART_RxCpltCallback>
}
 8037020:	e007      	b.n	8037032 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8037022:	687b      	ldr	r3, [r7, #4]
 8037024:	681b      	ldr	r3, [r3, #0]
 8037026:	699a      	ldr	r2, [r3, #24]
 8037028:	687b      	ldr	r3, [r7, #4]
 803702a:	681b      	ldr	r3, [r3, #0]
 803702c:	f042 0208 	orr.w	r2, r2, #8
 8037030:	619a      	str	r2, [r3, #24]
}
 8037032:	bf00      	nop
 8037034:	3758      	adds	r7, #88	; 0x58
 8037036:	46bd      	mov	sp, r7
 8037038:	bd80      	pop	{r7, pc}

0803703a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 803703a:	b580      	push	{r7, lr}
 803703c:	b096      	sub	sp, #88	; 0x58
 803703e:	af00      	add	r7, sp, #0
 8037040:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8037042:	687b      	ldr	r3, [r7, #4]
 8037044:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8037048:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 803704c:	687b      	ldr	r3, [r7, #4]
 803704e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8037052:	2b22      	cmp	r3, #34	; 0x22
 8037054:	f040 8095 	bne.w	8037182 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8037058:	687b      	ldr	r3, [r7, #4]
 803705a:	681b      	ldr	r3, [r3, #0]
 803705c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803705e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8037062:	687b      	ldr	r3, [r7, #4]
 8037064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8037066:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8037068:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 803706c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8037070:	4013      	ands	r3, r2
 8037072:	b29a      	uxth	r2, r3
 8037074:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8037076:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8037078:	687b      	ldr	r3, [r7, #4]
 803707a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 803707c:	1c9a      	adds	r2, r3, #2
 803707e:	687b      	ldr	r3, [r7, #4]
 8037080:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8037082:	687b      	ldr	r3, [r7, #4]
 8037084:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8037088:	b29b      	uxth	r3, r3
 803708a:	3b01      	subs	r3, #1
 803708c:	b29a      	uxth	r2, r3
 803708e:	687b      	ldr	r3, [r7, #4]
 8037090:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8037094:	687b      	ldr	r3, [r7, #4]
 8037096:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 803709a:	b29b      	uxth	r3, r3
 803709c:	2b00      	cmp	r3, #0
 803709e:	d178      	bne.n	8037192 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80370a0:	687b      	ldr	r3, [r7, #4]
 80370a2:	681b      	ldr	r3, [r3, #0]
 80370a4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80370a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80370a8:	e853 3f00 	ldrex	r3, [r3]
 80370ac:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80370ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80370b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80370b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80370b6:	687b      	ldr	r3, [r7, #4]
 80370b8:	681b      	ldr	r3, [r3, #0]
 80370ba:	461a      	mov	r2, r3
 80370bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80370be:	643b      	str	r3, [r7, #64]	; 0x40
 80370c0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80370c2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80370c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80370c6:	e841 2300 	strex	r3, r2, [r1]
 80370ca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80370cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80370ce:	2b00      	cmp	r3, #0
 80370d0:	d1e6      	bne.n	80370a0 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80370d2:	687b      	ldr	r3, [r7, #4]
 80370d4:	681b      	ldr	r3, [r3, #0]
 80370d6:	3308      	adds	r3, #8
 80370d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80370da:	6a3b      	ldr	r3, [r7, #32]
 80370dc:	e853 3f00 	ldrex	r3, [r3]
 80370e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80370e2:	69fb      	ldr	r3, [r7, #28]
 80370e4:	f023 0301 	bic.w	r3, r3, #1
 80370e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80370ea:	687b      	ldr	r3, [r7, #4]
 80370ec:	681b      	ldr	r3, [r3, #0]
 80370ee:	3308      	adds	r3, #8
 80370f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80370f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80370f4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80370f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80370f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80370fa:	e841 2300 	strex	r3, r2, [r1]
 80370fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8037100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8037102:	2b00      	cmp	r3, #0
 8037104:	d1e5      	bne.n	80370d2 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8037106:	687b      	ldr	r3, [r7, #4]
 8037108:	2220      	movs	r2, #32
 803710a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 803710e:	687b      	ldr	r3, [r7, #4]
 8037110:	2200      	movs	r2, #0
 8037112:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8037114:	687b      	ldr	r3, [r7, #4]
 8037116:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8037118:	2b01      	cmp	r3, #1
 803711a:	d12e      	bne.n	803717a <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 803711c:	687b      	ldr	r3, [r7, #4]
 803711e:	2200      	movs	r2, #0
 8037120:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8037122:	687b      	ldr	r3, [r7, #4]
 8037124:	681b      	ldr	r3, [r3, #0]
 8037126:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8037128:	68fb      	ldr	r3, [r7, #12]
 803712a:	e853 3f00 	ldrex	r3, [r3]
 803712e:	60bb      	str	r3, [r7, #8]
   return(result);
 8037130:	68bb      	ldr	r3, [r7, #8]
 8037132:	f023 0310 	bic.w	r3, r3, #16
 8037136:	647b      	str	r3, [r7, #68]	; 0x44
 8037138:	687b      	ldr	r3, [r7, #4]
 803713a:	681b      	ldr	r3, [r3, #0]
 803713c:	461a      	mov	r2, r3
 803713e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8037140:	61bb      	str	r3, [r7, #24]
 8037142:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8037144:	6979      	ldr	r1, [r7, #20]
 8037146:	69ba      	ldr	r2, [r7, #24]
 8037148:	e841 2300 	strex	r3, r2, [r1]
 803714c:	613b      	str	r3, [r7, #16]
   return(result);
 803714e:	693b      	ldr	r3, [r7, #16]
 8037150:	2b00      	cmp	r3, #0
 8037152:	d1e6      	bne.n	8037122 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8037154:	687b      	ldr	r3, [r7, #4]
 8037156:	681b      	ldr	r3, [r3, #0]
 8037158:	69db      	ldr	r3, [r3, #28]
 803715a:	f003 0310 	and.w	r3, r3, #16
 803715e:	2b10      	cmp	r3, #16
 8037160:	d103      	bne.n	803716a <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8037162:	687b      	ldr	r3, [r7, #4]
 8037164:	681b      	ldr	r3, [r3, #0]
 8037166:	2210      	movs	r2, #16
 8037168:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 803716a:	687b      	ldr	r3, [r7, #4]
 803716c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8037170:	4619      	mov	r1, r3
 8037172:	6878      	ldr	r0, [r7, #4]
 8037174:	f7fe fc14 	bl	80359a0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8037178:	e00b      	b.n	8037192 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 803717a:	6878      	ldr	r0, [r7, #4]
 803717c:	f7f2 fc06 	bl	802998c <HAL_UART_RxCpltCallback>
}
 8037180:	e007      	b.n	8037192 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8037182:	687b      	ldr	r3, [r7, #4]
 8037184:	681b      	ldr	r3, [r3, #0]
 8037186:	699a      	ldr	r2, [r3, #24]
 8037188:	687b      	ldr	r3, [r7, #4]
 803718a:	681b      	ldr	r3, [r3, #0]
 803718c:	f042 0208 	orr.w	r2, r2, #8
 8037190:	619a      	str	r2, [r3, #24]
}
 8037192:	bf00      	nop
 8037194:	3758      	adds	r7, #88	; 0x58
 8037196:	46bd      	mov	sp, r7
 8037198:	bd80      	pop	{r7, pc}
	...

0803719c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 803719c:	b580      	push	{r7, lr}
 803719e:	b0a6      	sub	sp, #152	; 0x98
 80371a0:	af00      	add	r7, sp, #0
 80371a2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80371a4:	687b      	ldr	r3, [r7, #4]
 80371a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80371aa:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80371ae:	687b      	ldr	r3, [r7, #4]
 80371b0:	681b      	ldr	r3, [r3, #0]
 80371b2:	69db      	ldr	r3, [r3, #28]
 80371b4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80371b8:	687b      	ldr	r3, [r7, #4]
 80371ba:	681b      	ldr	r3, [r3, #0]
 80371bc:	681b      	ldr	r3, [r3, #0]
 80371be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80371c2:	687b      	ldr	r3, [r7, #4]
 80371c4:	681b      	ldr	r3, [r3, #0]
 80371c6:	689b      	ldr	r3, [r3, #8]
 80371c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80371cc:	687b      	ldr	r3, [r7, #4]
 80371ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80371d2:	2b22      	cmp	r3, #34	; 0x22
 80371d4:	f040 814d 	bne.w	8037472 <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80371d8:	687b      	ldr	r3, [r7, #4]
 80371da:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80371de:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80371e2:	e0f4      	b.n	80373ce <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80371e4:	687b      	ldr	r3, [r7, #4]
 80371e6:	681b      	ldr	r3, [r3, #0]
 80371e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80371ea:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80371ee:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80371f2:	b2d9      	uxtb	r1, r3
 80371f4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80371f8:	b2da      	uxtb	r2, r3
 80371fa:	687b      	ldr	r3, [r7, #4]
 80371fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80371fe:	400a      	ands	r2, r1
 8037200:	b2d2      	uxtb	r2, r2
 8037202:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8037204:	687b      	ldr	r3, [r7, #4]
 8037206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8037208:	1c5a      	adds	r2, r3, #1
 803720a:	687b      	ldr	r3, [r7, #4]
 803720c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 803720e:	687b      	ldr	r3, [r7, #4]
 8037210:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8037214:	b29b      	uxth	r3, r3
 8037216:	3b01      	subs	r3, #1
 8037218:	b29a      	uxth	r2, r3
 803721a:	687b      	ldr	r3, [r7, #4]
 803721c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8037220:	687b      	ldr	r3, [r7, #4]
 8037222:	681b      	ldr	r3, [r3, #0]
 8037224:	69db      	ldr	r3, [r3, #28]
 8037226:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 803722a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 803722e:	f003 0307 	and.w	r3, r3, #7
 8037232:	2b00      	cmp	r3, #0
 8037234:	d053      	beq.n	80372de <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8037236:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 803723a:	f003 0301 	and.w	r3, r3, #1
 803723e:	2b00      	cmp	r3, #0
 8037240:	d011      	beq.n	8037266 <UART_RxISR_8BIT_FIFOEN+0xca>
 8037242:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8037246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 803724a:	2b00      	cmp	r3, #0
 803724c:	d00b      	beq.n	8037266 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 803724e:	687b      	ldr	r3, [r7, #4]
 8037250:	681b      	ldr	r3, [r3, #0]
 8037252:	2201      	movs	r2, #1
 8037254:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8037256:	687b      	ldr	r3, [r7, #4]
 8037258:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 803725c:	f043 0201 	orr.w	r2, r3, #1
 8037260:	687b      	ldr	r3, [r7, #4]
 8037262:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8037266:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 803726a:	f003 0302 	and.w	r3, r3, #2
 803726e:	2b00      	cmp	r3, #0
 8037270:	d011      	beq.n	8037296 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8037272:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8037276:	f003 0301 	and.w	r3, r3, #1
 803727a:	2b00      	cmp	r3, #0
 803727c:	d00b      	beq.n	8037296 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 803727e:	687b      	ldr	r3, [r7, #4]
 8037280:	681b      	ldr	r3, [r3, #0]
 8037282:	2202      	movs	r2, #2
 8037284:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8037286:	687b      	ldr	r3, [r7, #4]
 8037288:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 803728c:	f043 0204 	orr.w	r2, r3, #4
 8037290:	687b      	ldr	r3, [r7, #4]
 8037292:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8037296:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 803729a:	f003 0304 	and.w	r3, r3, #4
 803729e:	2b00      	cmp	r3, #0
 80372a0:	d011      	beq.n	80372c6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80372a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80372a6:	f003 0301 	and.w	r3, r3, #1
 80372aa:	2b00      	cmp	r3, #0
 80372ac:	d00b      	beq.n	80372c6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80372ae:	687b      	ldr	r3, [r7, #4]
 80372b0:	681b      	ldr	r3, [r3, #0]
 80372b2:	2204      	movs	r2, #4
 80372b4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80372b6:	687b      	ldr	r3, [r7, #4]
 80372b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80372bc:	f043 0202 	orr.w	r2, r3, #2
 80372c0:	687b      	ldr	r3, [r7, #4]
 80372c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80372c6:	687b      	ldr	r3, [r7, #4]
 80372c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80372cc:	2b00      	cmp	r3, #0
 80372ce:	d006      	beq.n	80372de <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80372d0:	6878      	ldr	r0, [r7, #4]
 80372d2:	f7fe fb5b 	bl	803598c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80372d6:	687b      	ldr	r3, [r7, #4]
 80372d8:	2200      	movs	r2, #0
 80372da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80372de:	687b      	ldr	r3, [r7, #4]
 80372e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80372e4:	b29b      	uxth	r3, r3
 80372e6:	2b00      	cmp	r3, #0
 80372e8:	d171      	bne.n	80373ce <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80372ea:	687b      	ldr	r3, [r7, #4]
 80372ec:	681b      	ldr	r3, [r3, #0]
 80372ee:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80372f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80372f2:	e853 3f00 	ldrex	r3, [r3]
 80372f6:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80372f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80372fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80372fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8037302:	687b      	ldr	r3, [r7, #4]
 8037304:	681b      	ldr	r3, [r3, #0]
 8037306:	461a      	mov	r2, r3
 8037308:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 803730c:	66bb      	str	r3, [r7, #104]	; 0x68
 803730e:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8037310:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8037312:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8037314:	e841 2300 	strex	r3, r2, [r1]
 8037318:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 803731a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 803731c:	2b00      	cmp	r3, #0
 803731e:	d1e4      	bne.n	80372ea <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8037320:	687b      	ldr	r3, [r7, #4]
 8037322:	681b      	ldr	r3, [r3, #0]
 8037324:	3308      	adds	r3, #8
 8037326:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8037328:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 803732a:	e853 3f00 	ldrex	r3, [r3]
 803732e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8037330:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8037332:	4b56      	ldr	r3, [pc, #344]	; (803748c <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 8037334:	4013      	ands	r3, r2
 8037336:	67fb      	str	r3, [r7, #124]	; 0x7c
 8037338:	687b      	ldr	r3, [r7, #4]
 803733a:	681b      	ldr	r3, [r3, #0]
 803733c:	3308      	adds	r3, #8
 803733e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8037340:	657a      	str	r2, [r7, #84]	; 0x54
 8037342:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8037344:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8037346:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8037348:	e841 2300 	strex	r3, r2, [r1]
 803734c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 803734e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8037350:	2b00      	cmp	r3, #0
 8037352:	d1e5      	bne.n	8037320 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8037354:	687b      	ldr	r3, [r7, #4]
 8037356:	2220      	movs	r2, #32
 8037358:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 803735c:	687b      	ldr	r3, [r7, #4]
 803735e:	2200      	movs	r2, #0
 8037360:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8037362:	687b      	ldr	r3, [r7, #4]
 8037364:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8037366:	2b01      	cmp	r3, #1
 8037368:	d12e      	bne.n	80373c8 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 803736a:	687b      	ldr	r3, [r7, #4]
 803736c:	2200      	movs	r2, #0
 803736e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8037370:	687b      	ldr	r3, [r7, #4]
 8037372:	681b      	ldr	r3, [r3, #0]
 8037374:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8037376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8037378:	e853 3f00 	ldrex	r3, [r3]
 803737c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 803737e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8037380:	f023 0310 	bic.w	r3, r3, #16
 8037384:	67bb      	str	r3, [r7, #120]	; 0x78
 8037386:	687b      	ldr	r3, [r7, #4]
 8037388:	681b      	ldr	r3, [r3, #0]
 803738a:	461a      	mov	r2, r3
 803738c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 803738e:	643b      	str	r3, [r7, #64]	; 0x40
 8037390:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8037392:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8037394:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8037396:	e841 2300 	strex	r3, r2, [r1]
 803739a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 803739c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803739e:	2b00      	cmp	r3, #0
 80373a0:	d1e6      	bne.n	8037370 <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80373a2:	687b      	ldr	r3, [r7, #4]
 80373a4:	681b      	ldr	r3, [r3, #0]
 80373a6:	69db      	ldr	r3, [r3, #28]
 80373a8:	f003 0310 	and.w	r3, r3, #16
 80373ac:	2b10      	cmp	r3, #16
 80373ae:	d103      	bne.n	80373b8 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80373b0:	687b      	ldr	r3, [r7, #4]
 80373b2:	681b      	ldr	r3, [r3, #0]
 80373b4:	2210      	movs	r2, #16
 80373b6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80373b8:	687b      	ldr	r3, [r7, #4]
 80373ba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80373be:	4619      	mov	r1, r3
 80373c0:	6878      	ldr	r0, [r7, #4]
 80373c2:	f7fe faed 	bl	80359a0 <HAL_UARTEx_RxEventCallback>
 80373c6:	e002      	b.n	80373ce <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80373c8:	6878      	ldr	r0, [r7, #4]
 80373ca:	f7f2 fadf 	bl	802998c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80373ce:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80373d2:	2b00      	cmp	r3, #0
 80373d4:	d006      	beq.n	80373e4 <UART_RxISR_8BIT_FIFOEN+0x248>
 80373d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80373da:	f003 0320 	and.w	r3, r3, #32
 80373de:	2b00      	cmp	r3, #0
 80373e0:	f47f af00 	bne.w	80371e4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80373e4:	687b      	ldr	r3, [r7, #4]
 80373e6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80373ea:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80373ee:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80373f2:	2b00      	cmp	r3, #0
 80373f4:	d045      	beq.n	8037482 <UART_RxISR_8BIT_FIFOEN+0x2e6>
 80373f6:	687b      	ldr	r3, [r7, #4]
 80373f8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80373fc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8037400:	429a      	cmp	r2, r3
 8037402:	d23e      	bcs.n	8037482 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8037404:	687b      	ldr	r3, [r7, #4]
 8037406:	681b      	ldr	r3, [r3, #0]
 8037408:	3308      	adds	r3, #8
 803740a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803740c:	6a3b      	ldr	r3, [r7, #32]
 803740e:	e853 3f00 	ldrex	r3, [r3]
 8037412:	61fb      	str	r3, [r7, #28]
   return(result);
 8037414:	69fb      	ldr	r3, [r7, #28]
 8037416:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 803741a:	673b      	str	r3, [r7, #112]	; 0x70
 803741c:	687b      	ldr	r3, [r7, #4]
 803741e:	681b      	ldr	r3, [r3, #0]
 8037420:	3308      	adds	r3, #8
 8037422:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8037424:	62fa      	str	r2, [r7, #44]	; 0x2c
 8037426:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8037428:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 803742a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 803742c:	e841 2300 	strex	r3, r2, [r1]
 8037430:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8037432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8037434:	2b00      	cmp	r3, #0
 8037436:	d1e5      	bne.n	8037404 <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8037438:	687b      	ldr	r3, [r7, #4]
 803743a:	4a15      	ldr	r2, [pc, #84]	; (8037490 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 803743c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 803743e:	687b      	ldr	r3, [r7, #4]
 8037440:	681b      	ldr	r3, [r3, #0]
 8037442:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8037444:	68fb      	ldr	r3, [r7, #12]
 8037446:	e853 3f00 	ldrex	r3, [r3]
 803744a:	60bb      	str	r3, [r7, #8]
   return(result);
 803744c:	68bb      	ldr	r3, [r7, #8]
 803744e:	f043 0320 	orr.w	r3, r3, #32
 8037452:	66fb      	str	r3, [r7, #108]	; 0x6c
 8037454:	687b      	ldr	r3, [r7, #4]
 8037456:	681b      	ldr	r3, [r3, #0]
 8037458:	461a      	mov	r2, r3
 803745a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 803745c:	61bb      	str	r3, [r7, #24]
 803745e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8037460:	6979      	ldr	r1, [r7, #20]
 8037462:	69ba      	ldr	r2, [r7, #24]
 8037464:	e841 2300 	strex	r3, r2, [r1]
 8037468:	613b      	str	r3, [r7, #16]
   return(result);
 803746a:	693b      	ldr	r3, [r7, #16]
 803746c:	2b00      	cmp	r3, #0
 803746e:	d1e6      	bne.n	803743e <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8037470:	e007      	b.n	8037482 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8037472:	687b      	ldr	r3, [r7, #4]
 8037474:	681b      	ldr	r3, [r3, #0]
 8037476:	699a      	ldr	r2, [r3, #24]
 8037478:	687b      	ldr	r3, [r7, #4]
 803747a:	681b      	ldr	r3, [r3, #0]
 803747c:	f042 0208 	orr.w	r2, r2, #8
 8037480:	619a      	str	r2, [r3, #24]
}
 8037482:	bf00      	nop
 8037484:	3798      	adds	r7, #152	; 0x98
 8037486:	46bd      	mov	sp, r7
 8037488:	bd80      	pop	{r7, pc}
 803748a:	bf00      	nop
 803748c:	effffffe 	.word	0xeffffffe
 8037490:	08036edb 	.word	0x08036edb

08037494 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8037494:	b580      	push	{r7, lr}
 8037496:	b0a8      	sub	sp, #160	; 0xa0
 8037498:	af00      	add	r7, sp, #0
 803749a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 803749c:	687b      	ldr	r3, [r7, #4]
 803749e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80374a2:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80374a6:	687b      	ldr	r3, [r7, #4]
 80374a8:	681b      	ldr	r3, [r3, #0]
 80374aa:	69db      	ldr	r3, [r3, #28]
 80374ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80374b0:	687b      	ldr	r3, [r7, #4]
 80374b2:	681b      	ldr	r3, [r3, #0]
 80374b4:	681b      	ldr	r3, [r3, #0]
 80374b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80374ba:	687b      	ldr	r3, [r7, #4]
 80374bc:	681b      	ldr	r3, [r3, #0]
 80374be:	689b      	ldr	r3, [r3, #8]
 80374c0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80374c4:	687b      	ldr	r3, [r7, #4]
 80374c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80374ca:	2b22      	cmp	r3, #34	; 0x22
 80374cc:	f040 8151 	bne.w	8037772 <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80374d0:	687b      	ldr	r3, [r7, #4]
 80374d2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80374d6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80374da:	e0f8      	b.n	80376ce <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80374dc:	687b      	ldr	r3, [r7, #4]
 80374de:	681b      	ldr	r3, [r3, #0]
 80374e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80374e2:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80374e6:	687b      	ldr	r3, [r7, #4]
 80374e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80374ea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 80374ee:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 80374f2:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80374f6:	4013      	ands	r3, r2
 80374f8:	b29a      	uxth	r2, r3
 80374fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80374fe:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8037500:	687b      	ldr	r3, [r7, #4]
 8037502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8037504:	1c9a      	adds	r2, r3, #2
 8037506:	687b      	ldr	r3, [r7, #4]
 8037508:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 803750a:	687b      	ldr	r3, [r7, #4]
 803750c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8037510:	b29b      	uxth	r3, r3
 8037512:	3b01      	subs	r3, #1
 8037514:	b29a      	uxth	r2, r3
 8037516:	687b      	ldr	r3, [r7, #4]
 8037518:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 803751c:	687b      	ldr	r3, [r7, #4]
 803751e:	681b      	ldr	r3, [r3, #0]
 8037520:	69db      	ldr	r3, [r3, #28]
 8037522:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8037526:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 803752a:	f003 0307 	and.w	r3, r3, #7
 803752e:	2b00      	cmp	r3, #0
 8037530:	d053      	beq.n	80375da <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8037532:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8037536:	f003 0301 	and.w	r3, r3, #1
 803753a:	2b00      	cmp	r3, #0
 803753c:	d011      	beq.n	8037562 <UART_RxISR_16BIT_FIFOEN+0xce>
 803753e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8037542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8037546:	2b00      	cmp	r3, #0
 8037548:	d00b      	beq.n	8037562 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 803754a:	687b      	ldr	r3, [r7, #4]
 803754c:	681b      	ldr	r3, [r3, #0]
 803754e:	2201      	movs	r2, #1
 8037550:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8037552:	687b      	ldr	r3, [r7, #4]
 8037554:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8037558:	f043 0201 	orr.w	r2, r3, #1
 803755c:	687b      	ldr	r3, [r7, #4]
 803755e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8037562:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8037566:	f003 0302 	and.w	r3, r3, #2
 803756a:	2b00      	cmp	r3, #0
 803756c:	d011      	beq.n	8037592 <UART_RxISR_16BIT_FIFOEN+0xfe>
 803756e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8037572:	f003 0301 	and.w	r3, r3, #1
 8037576:	2b00      	cmp	r3, #0
 8037578:	d00b      	beq.n	8037592 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 803757a:	687b      	ldr	r3, [r7, #4]
 803757c:	681b      	ldr	r3, [r3, #0]
 803757e:	2202      	movs	r2, #2
 8037580:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8037582:	687b      	ldr	r3, [r7, #4]
 8037584:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8037588:	f043 0204 	orr.w	r2, r3, #4
 803758c:	687b      	ldr	r3, [r7, #4]
 803758e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8037592:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8037596:	f003 0304 	and.w	r3, r3, #4
 803759a:	2b00      	cmp	r3, #0
 803759c:	d011      	beq.n	80375c2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 803759e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80375a2:	f003 0301 	and.w	r3, r3, #1
 80375a6:	2b00      	cmp	r3, #0
 80375a8:	d00b      	beq.n	80375c2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80375aa:	687b      	ldr	r3, [r7, #4]
 80375ac:	681b      	ldr	r3, [r3, #0]
 80375ae:	2204      	movs	r2, #4
 80375b0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80375b2:	687b      	ldr	r3, [r7, #4]
 80375b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80375b8:	f043 0202 	orr.w	r2, r3, #2
 80375bc:	687b      	ldr	r3, [r7, #4]
 80375be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80375c2:	687b      	ldr	r3, [r7, #4]
 80375c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80375c8:	2b00      	cmp	r3, #0
 80375ca:	d006      	beq.n	80375da <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80375cc:	6878      	ldr	r0, [r7, #4]
 80375ce:	f7fe f9dd 	bl	803598c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80375d2:	687b      	ldr	r3, [r7, #4]
 80375d4:	2200      	movs	r2, #0
 80375d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80375da:	687b      	ldr	r3, [r7, #4]
 80375dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80375e0:	b29b      	uxth	r3, r3
 80375e2:	2b00      	cmp	r3, #0
 80375e4:	d173      	bne.n	80376ce <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80375e6:	687b      	ldr	r3, [r7, #4]
 80375e8:	681b      	ldr	r3, [r3, #0]
 80375ea:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80375ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80375ee:	e853 3f00 	ldrex	r3, [r3]
 80375f2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80375f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80375f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80375fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80375fe:	687b      	ldr	r3, [r7, #4]
 8037600:	681b      	ldr	r3, [r3, #0]
 8037602:	461a      	mov	r2, r3
 8037604:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8037608:	66fb      	str	r3, [r7, #108]	; 0x6c
 803760a:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803760c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 803760e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8037610:	e841 2300 	strex	r3, r2, [r1]
 8037614:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8037616:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8037618:	2b00      	cmp	r3, #0
 803761a:	d1e4      	bne.n	80375e6 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 803761c:	687b      	ldr	r3, [r7, #4]
 803761e:	681b      	ldr	r3, [r3, #0]
 8037620:	3308      	adds	r3, #8
 8037622:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8037624:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8037626:	e853 3f00 	ldrex	r3, [r3]
 803762a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 803762c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 803762e:	4b57      	ldr	r3, [pc, #348]	; (803778c <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 8037630:	4013      	ands	r3, r2
 8037632:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8037636:	687b      	ldr	r3, [r7, #4]
 8037638:	681b      	ldr	r3, [r3, #0]
 803763a:	3308      	adds	r3, #8
 803763c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8037640:	65ba      	str	r2, [r7, #88]	; 0x58
 8037642:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8037644:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8037646:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8037648:	e841 2300 	strex	r3, r2, [r1]
 803764c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 803764e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8037650:	2b00      	cmp	r3, #0
 8037652:	d1e3      	bne.n	803761c <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8037654:	687b      	ldr	r3, [r7, #4]
 8037656:	2220      	movs	r2, #32
 8037658:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 803765c:	687b      	ldr	r3, [r7, #4]
 803765e:	2200      	movs	r2, #0
 8037660:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8037662:	687b      	ldr	r3, [r7, #4]
 8037664:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8037666:	2b01      	cmp	r3, #1
 8037668:	d12e      	bne.n	80376c8 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 803766a:	687b      	ldr	r3, [r7, #4]
 803766c:	2200      	movs	r2, #0
 803766e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8037670:	687b      	ldr	r3, [r7, #4]
 8037672:	681b      	ldr	r3, [r3, #0]
 8037674:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8037676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8037678:	e853 3f00 	ldrex	r3, [r3]
 803767c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 803767e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8037680:	f023 0310 	bic.w	r3, r3, #16
 8037684:	67fb      	str	r3, [r7, #124]	; 0x7c
 8037686:	687b      	ldr	r3, [r7, #4]
 8037688:	681b      	ldr	r3, [r3, #0]
 803768a:	461a      	mov	r2, r3
 803768c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 803768e:	647b      	str	r3, [r7, #68]	; 0x44
 8037690:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8037692:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8037694:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8037696:	e841 2300 	strex	r3, r2, [r1]
 803769a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 803769c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 803769e:	2b00      	cmp	r3, #0
 80376a0:	d1e6      	bne.n	8037670 <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80376a2:	687b      	ldr	r3, [r7, #4]
 80376a4:	681b      	ldr	r3, [r3, #0]
 80376a6:	69db      	ldr	r3, [r3, #28]
 80376a8:	f003 0310 	and.w	r3, r3, #16
 80376ac:	2b10      	cmp	r3, #16
 80376ae:	d103      	bne.n	80376b8 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80376b0:	687b      	ldr	r3, [r7, #4]
 80376b2:	681b      	ldr	r3, [r3, #0]
 80376b4:	2210      	movs	r2, #16
 80376b6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80376b8:	687b      	ldr	r3, [r7, #4]
 80376ba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80376be:	4619      	mov	r1, r3
 80376c0:	6878      	ldr	r0, [r7, #4]
 80376c2:	f7fe f96d 	bl	80359a0 <HAL_UARTEx_RxEventCallback>
 80376c6:	e002      	b.n	80376ce <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80376c8:	6878      	ldr	r0, [r7, #4]
 80376ca:	f7f2 f95f 	bl	802998c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80376ce:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80376d2:	2b00      	cmp	r3, #0
 80376d4:	d006      	beq.n	80376e4 <UART_RxISR_16BIT_FIFOEN+0x250>
 80376d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80376da:	f003 0320 	and.w	r3, r3, #32
 80376de:	2b00      	cmp	r3, #0
 80376e0:	f47f aefc 	bne.w	80374dc <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80376e4:	687b      	ldr	r3, [r7, #4]
 80376e6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80376ea:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80376ee:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80376f2:	2b00      	cmp	r3, #0
 80376f4:	d045      	beq.n	8037782 <UART_RxISR_16BIT_FIFOEN+0x2ee>
 80376f6:	687b      	ldr	r3, [r7, #4]
 80376f8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80376fc:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8037700:	429a      	cmp	r2, r3
 8037702:	d23e      	bcs.n	8037782 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8037704:	687b      	ldr	r3, [r7, #4]
 8037706:	681b      	ldr	r3, [r3, #0]
 8037708:	3308      	adds	r3, #8
 803770a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803770c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803770e:	e853 3f00 	ldrex	r3, [r3]
 8037712:	623b      	str	r3, [r7, #32]
   return(result);
 8037714:	6a3b      	ldr	r3, [r7, #32]
 8037716:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 803771a:	677b      	str	r3, [r7, #116]	; 0x74
 803771c:	687b      	ldr	r3, [r7, #4]
 803771e:	681b      	ldr	r3, [r3, #0]
 8037720:	3308      	adds	r3, #8
 8037722:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8037724:	633a      	str	r2, [r7, #48]	; 0x30
 8037726:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8037728:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 803772a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 803772c:	e841 2300 	strex	r3, r2, [r1]
 8037730:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8037732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8037734:	2b00      	cmp	r3, #0
 8037736:	d1e5      	bne.n	8037704 <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8037738:	687b      	ldr	r3, [r7, #4]
 803773a:	4a15      	ldr	r2, [pc, #84]	; (8037790 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 803773c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 803773e:	687b      	ldr	r3, [r7, #4]
 8037740:	681b      	ldr	r3, [r3, #0]
 8037742:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8037744:	693b      	ldr	r3, [r7, #16]
 8037746:	e853 3f00 	ldrex	r3, [r3]
 803774a:	60fb      	str	r3, [r7, #12]
   return(result);
 803774c:	68fb      	ldr	r3, [r7, #12]
 803774e:	f043 0320 	orr.w	r3, r3, #32
 8037752:	673b      	str	r3, [r7, #112]	; 0x70
 8037754:	687b      	ldr	r3, [r7, #4]
 8037756:	681b      	ldr	r3, [r3, #0]
 8037758:	461a      	mov	r2, r3
 803775a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 803775c:	61fb      	str	r3, [r7, #28]
 803775e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8037760:	69b9      	ldr	r1, [r7, #24]
 8037762:	69fa      	ldr	r2, [r7, #28]
 8037764:	e841 2300 	strex	r3, r2, [r1]
 8037768:	617b      	str	r3, [r7, #20]
   return(result);
 803776a:	697b      	ldr	r3, [r7, #20]
 803776c:	2b00      	cmp	r3, #0
 803776e:	d1e6      	bne.n	803773e <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8037770:	e007      	b.n	8037782 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8037772:	687b      	ldr	r3, [r7, #4]
 8037774:	681b      	ldr	r3, [r3, #0]
 8037776:	699a      	ldr	r2, [r3, #24]
 8037778:	687b      	ldr	r3, [r7, #4]
 803777a:	681b      	ldr	r3, [r3, #0]
 803777c:	f042 0208 	orr.w	r2, r2, #8
 8037780:	619a      	str	r2, [r3, #24]
}
 8037782:	bf00      	nop
 8037784:	37a0      	adds	r7, #160	; 0xa0
 8037786:	46bd      	mov	sp, r7
 8037788:	bd80      	pop	{r7, pc}
 803778a:	bf00      	nop
 803778c:	effffffe 	.word	0xeffffffe
 8037790:	0803703b 	.word	0x0803703b

08037794 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8037794:	b480      	push	{r7}
 8037796:	b083      	sub	sp, #12
 8037798:	af00      	add	r7, sp, #0
 803779a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 803779c:	bf00      	nop
 803779e:	370c      	adds	r7, #12
 80377a0:	46bd      	mov	sp, r7
 80377a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80377a6:	4770      	bx	lr

080377a8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80377a8:	b480      	push	{r7}
 80377aa:	b083      	sub	sp, #12
 80377ac:	af00      	add	r7, sp, #0
 80377ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80377b0:	bf00      	nop
 80377b2:	370c      	adds	r7, #12
 80377b4:	46bd      	mov	sp, r7
 80377b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80377ba:	4770      	bx	lr

080377bc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80377bc:	b480      	push	{r7}
 80377be:	b083      	sub	sp, #12
 80377c0:	af00      	add	r7, sp, #0
 80377c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80377c4:	bf00      	nop
 80377c6:	370c      	adds	r7, #12
 80377c8:	46bd      	mov	sp, r7
 80377ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80377ce:	4770      	bx	lr

080377d0 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 80377d0:	b580      	push	{r7, lr}
 80377d2:	b084      	sub	sp, #16
 80377d4:	af00      	add	r7, sp, #0
 80377d6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80377d8:	687b      	ldr	r3, [r7, #4]
 80377da:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80377de:	2b01      	cmp	r3, #1
 80377e0:	d101      	bne.n	80377e6 <HAL_UARTEx_EnableFifoMode+0x16>
 80377e2:	2302      	movs	r3, #2
 80377e4:	e02b      	b.n	803783e <HAL_UARTEx_EnableFifoMode+0x6e>
 80377e6:	687b      	ldr	r3, [r7, #4]
 80377e8:	2201      	movs	r2, #1
 80377ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80377ee:	687b      	ldr	r3, [r7, #4]
 80377f0:	2224      	movs	r2, #36	; 0x24
 80377f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80377f6:	687b      	ldr	r3, [r7, #4]
 80377f8:	681b      	ldr	r3, [r3, #0]
 80377fa:	681b      	ldr	r3, [r3, #0]
 80377fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80377fe:	687b      	ldr	r3, [r7, #4]
 8037800:	681b      	ldr	r3, [r3, #0]
 8037802:	681a      	ldr	r2, [r3, #0]
 8037804:	687b      	ldr	r3, [r7, #4]
 8037806:	681b      	ldr	r3, [r3, #0]
 8037808:	f022 0201 	bic.w	r2, r2, #1
 803780c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 803780e:	68fb      	ldr	r3, [r7, #12]
 8037810:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8037814:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8037816:	687b      	ldr	r3, [r7, #4]
 8037818:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 803781c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 803781e:	687b      	ldr	r3, [r7, #4]
 8037820:	681b      	ldr	r3, [r3, #0]
 8037822:	68fa      	ldr	r2, [r7, #12]
 8037824:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8037826:	6878      	ldr	r0, [r7, #4]
 8037828:	f000 f8c2 	bl	80379b0 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 803782c:	687b      	ldr	r3, [r7, #4]
 803782e:	2220      	movs	r2, #32
 8037830:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8037834:	687b      	ldr	r3, [r7, #4]
 8037836:	2200      	movs	r2, #0
 8037838:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 803783c:	2300      	movs	r3, #0
}
 803783e:	4618      	mov	r0, r3
 8037840:	3710      	adds	r7, #16
 8037842:	46bd      	mov	sp, r7
 8037844:	bd80      	pop	{r7, pc}

08037846 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8037846:	b480      	push	{r7}
 8037848:	b085      	sub	sp, #20
 803784a:	af00      	add	r7, sp, #0
 803784c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 803784e:	687b      	ldr	r3, [r7, #4]
 8037850:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8037854:	2b01      	cmp	r3, #1
 8037856:	d101      	bne.n	803785c <HAL_UARTEx_DisableFifoMode+0x16>
 8037858:	2302      	movs	r3, #2
 803785a:	e027      	b.n	80378ac <HAL_UARTEx_DisableFifoMode+0x66>
 803785c:	687b      	ldr	r3, [r7, #4]
 803785e:	2201      	movs	r2, #1
 8037860:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8037864:	687b      	ldr	r3, [r7, #4]
 8037866:	2224      	movs	r2, #36	; 0x24
 8037868:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 803786c:	687b      	ldr	r3, [r7, #4]
 803786e:	681b      	ldr	r3, [r3, #0]
 8037870:	681b      	ldr	r3, [r3, #0]
 8037872:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8037874:	687b      	ldr	r3, [r7, #4]
 8037876:	681b      	ldr	r3, [r3, #0]
 8037878:	681a      	ldr	r2, [r3, #0]
 803787a:	687b      	ldr	r3, [r7, #4]
 803787c:	681b      	ldr	r3, [r3, #0]
 803787e:	f022 0201 	bic.w	r2, r2, #1
 8037882:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8037884:	68fb      	ldr	r3, [r7, #12]
 8037886:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 803788a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 803788c:	687b      	ldr	r3, [r7, #4]
 803788e:	2200      	movs	r2, #0
 8037890:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8037892:	687b      	ldr	r3, [r7, #4]
 8037894:	681b      	ldr	r3, [r3, #0]
 8037896:	68fa      	ldr	r2, [r7, #12]
 8037898:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 803789a:	687b      	ldr	r3, [r7, #4]
 803789c:	2220      	movs	r2, #32
 803789e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80378a2:	687b      	ldr	r3, [r7, #4]
 80378a4:	2200      	movs	r2, #0
 80378a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80378aa:	2300      	movs	r3, #0
}
 80378ac:	4618      	mov	r0, r3
 80378ae:	3714      	adds	r7, #20
 80378b0:	46bd      	mov	sp, r7
 80378b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80378b6:	4770      	bx	lr

080378b8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80378b8:	b580      	push	{r7, lr}
 80378ba:	b084      	sub	sp, #16
 80378bc:	af00      	add	r7, sp, #0
 80378be:	6078      	str	r0, [r7, #4]
 80378c0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80378c2:	687b      	ldr	r3, [r7, #4]
 80378c4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80378c8:	2b01      	cmp	r3, #1
 80378ca:	d101      	bne.n	80378d0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80378cc:	2302      	movs	r3, #2
 80378ce:	e02d      	b.n	803792c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80378d0:	687b      	ldr	r3, [r7, #4]
 80378d2:	2201      	movs	r2, #1
 80378d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80378d8:	687b      	ldr	r3, [r7, #4]
 80378da:	2224      	movs	r2, #36	; 0x24
 80378dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80378e0:	687b      	ldr	r3, [r7, #4]
 80378e2:	681b      	ldr	r3, [r3, #0]
 80378e4:	681b      	ldr	r3, [r3, #0]
 80378e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80378e8:	687b      	ldr	r3, [r7, #4]
 80378ea:	681b      	ldr	r3, [r3, #0]
 80378ec:	681a      	ldr	r2, [r3, #0]
 80378ee:	687b      	ldr	r3, [r7, #4]
 80378f0:	681b      	ldr	r3, [r3, #0]
 80378f2:	f022 0201 	bic.w	r2, r2, #1
 80378f6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80378f8:	687b      	ldr	r3, [r7, #4]
 80378fa:	681b      	ldr	r3, [r3, #0]
 80378fc:	689b      	ldr	r3, [r3, #8]
 80378fe:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8037902:	687b      	ldr	r3, [r7, #4]
 8037904:	681b      	ldr	r3, [r3, #0]
 8037906:	683a      	ldr	r2, [r7, #0]
 8037908:	430a      	orrs	r2, r1
 803790a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 803790c:	6878      	ldr	r0, [r7, #4]
 803790e:	f000 f84f 	bl	80379b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8037912:	687b      	ldr	r3, [r7, #4]
 8037914:	681b      	ldr	r3, [r3, #0]
 8037916:	68fa      	ldr	r2, [r7, #12]
 8037918:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 803791a:	687b      	ldr	r3, [r7, #4]
 803791c:	2220      	movs	r2, #32
 803791e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8037922:	687b      	ldr	r3, [r7, #4]
 8037924:	2200      	movs	r2, #0
 8037926:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 803792a:	2300      	movs	r3, #0
}
 803792c:	4618      	mov	r0, r3
 803792e:	3710      	adds	r7, #16
 8037930:	46bd      	mov	sp, r7
 8037932:	bd80      	pop	{r7, pc}

08037934 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8037934:	b580      	push	{r7, lr}
 8037936:	b084      	sub	sp, #16
 8037938:	af00      	add	r7, sp, #0
 803793a:	6078      	str	r0, [r7, #4]
 803793c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 803793e:	687b      	ldr	r3, [r7, #4]
 8037940:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8037944:	2b01      	cmp	r3, #1
 8037946:	d101      	bne.n	803794c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8037948:	2302      	movs	r3, #2
 803794a:	e02d      	b.n	80379a8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 803794c:	687b      	ldr	r3, [r7, #4]
 803794e:	2201      	movs	r2, #1
 8037950:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8037954:	687b      	ldr	r3, [r7, #4]
 8037956:	2224      	movs	r2, #36	; 0x24
 8037958:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 803795c:	687b      	ldr	r3, [r7, #4]
 803795e:	681b      	ldr	r3, [r3, #0]
 8037960:	681b      	ldr	r3, [r3, #0]
 8037962:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8037964:	687b      	ldr	r3, [r7, #4]
 8037966:	681b      	ldr	r3, [r3, #0]
 8037968:	681a      	ldr	r2, [r3, #0]
 803796a:	687b      	ldr	r3, [r7, #4]
 803796c:	681b      	ldr	r3, [r3, #0]
 803796e:	f022 0201 	bic.w	r2, r2, #1
 8037972:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8037974:	687b      	ldr	r3, [r7, #4]
 8037976:	681b      	ldr	r3, [r3, #0]
 8037978:	689b      	ldr	r3, [r3, #8]
 803797a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 803797e:	687b      	ldr	r3, [r7, #4]
 8037980:	681b      	ldr	r3, [r3, #0]
 8037982:	683a      	ldr	r2, [r7, #0]
 8037984:	430a      	orrs	r2, r1
 8037986:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8037988:	6878      	ldr	r0, [r7, #4]
 803798a:	f000 f811 	bl	80379b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 803798e:	687b      	ldr	r3, [r7, #4]
 8037990:	681b      	ldr	r3, [r3, #0]
 8037992:	68fa      	ldr	r2, [r7, #12]
 8037994:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8037996:	687b      	ldr	r3, [r7, #4]
 8037998:	2220      	movs	r2, #32
 803799a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 803799e:	687b      	ldr	r3, [r7, #4]
 80379a0:	2200      	movs	r2, #0
 80379a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80379a6:	2300      	movs	r3, #0
}
 80379a8:	4618      	mov	r0, r3
 80379aa:	3710      	adds	r7, #16
 80379ac:	46bd      	mov	sp, r7
 80379ae:	bd80      	pop	{r7, pc}

080379b0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80379b0:	b480      	push	{r7}
 80379b2:	b085      	sub	sp, #20
 80379b4:	af00      	add	r7, sp, #0
 80379b6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80379b8:	687b      	ldr	r3, [r7, #4]
 80379ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80379bc:	2b00      	cmp	r3, #0
 80379be:	d108      	bne.n	80379d2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80379c0:	687b      	ldr	r3, [r7, #4]
 80379c2:	2201      	movs	r2, #1
 80379c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80379c8:	687b      	ldr	r3, [r7, #4]
 80379ca:	2201      	movs	r2, #1
 80379cc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80379d0:	e031      	b.n	8037a36 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80379d2:	2310      	movs	r3, #16
 80379d4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80379d6:	2310      	movs	r3, #16
 80379d8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80379da:	687b      	ldr	r3, [r7, #4]
 80379dc:	681b      	ldr	r3, [r3, #0]
 80379de:	689b      	ldr	r3, [r3, #8]
 80379e0:	0e5b      	lsrs	r3, r3, #25
 80379e2:	b2db      	uxtb	r3, r3
 80379e4:	f003 0307 	and.w	r3, r3, #7
 80379e8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80379ea:	687b      	ldr	r3, [r7, #4]
 80379ec:	681b      	ldr	r3, [r3, #0]
 80379ee:	689b      	ldr	r3, [r3, #8]
 80379f0:	0f5b      	lsrs	r3, r3, #29
 80379f2:	b2db      	uxtb	r3, r3
 80379f4:	f003 0307 	and.w	r3, r3, #7
 80379f8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80379fa:	7bbb      	ldrb	r3, [r7, #14]
 80379fc:	7b3a      	ldrb	r2, [r7, #12]
 80379fe:	4911      	ldr	r1, [pc, #68]	; (8037a44 <UARTEx_SetNbDataToProcess+0x94>)
 8037a00:	5c8a      	ldrb	r2, [r1, r2]
 8037a02:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8037a06:	7b3a      	ldrb	r2, [r7, #12]
 8037a08:	490f      	ldr	r1, [pc, #60]	; (8037a48 <UARTEx_SetNbDataToProcess+0x98>)
 8037a0a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8037a0c:	fb93 f3f2 	sdiv	r3, r3, r2
 8037a10:	b29a      	uxth	r2, r3
 8037a12:	687b      	ldr	r3, [r7, #4]
 8037a14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8037a18:	7bfb      	ldrb	r3, [r7, #15]
 8037a1a:	7b7a      	ldrb	r2, [r7, #13]
 8037a1c:	4909      	ldr	r1, [pc, #36]	; (8037a44 <UARTEx_SetNbDataToProcess+0x94>)
 8037a1e:	5c8a      	ldrb	r2, [r1, r2]
 8037a20:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8037a24:	7b7a      	ldrb	r2, [r7, #13]
 8037a26:	4908      	ldr	r1, [pc, #32]	; (8037a48 <UARTEx_SetNbDataToProcess+0x98>)
 8037a28:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8037a2a:	fb93 f3f2 	sdiv	r3, r3, r2
 8037a2e:	b29a      	uxth	r2, r3
 8037a30:	687b      	ldr	r3, [r7, #4]
 8037a32:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8037a36:	bf00      	nop
 8037a38:	3714      	adds	r7, #20
 8037a3a:	46bd      	mov	sp, r7
 8037a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8037a40:	4770      	bx	lr
 8037a42:	bf00      	nop
 8037a44:	08058478 	.word	0x08058478
 8037a48:	08058480 	.word	0x08058480

08037a4c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8037a4c:	b084      	sub	sp, #16
 8037a4e:	b580      	push	{r7, lr}
 8037a50:	b084      	sub	sp, #16
 8037a52:	af00      	add	r7, sp, #0
 8037a54:	6078      	str	r0, [r7, #4]
 8037a56:	f107 001c 	add.w	r0, r7, #28
 8037a5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8037a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8037a60:	2b01      	cmp	r3, #1
 8037a62:	d120      	bne.n	8037aa6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8037a64:	687b      	ldr	r3, [r7, #4]
 8037a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8037a68:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8037a6c:	687b      	ldr	r3, [r7, #4]
 8037a6e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8037a70:	687b      	ldr	r3, [r7, #4]
 8037a72:	68da      	ldr	r2, [r3, #12]
 8037a74:	4b2a      	ldr	r3, [pc, #168]	; (8037b20 <USB_CoreInit+0xd4>)
 8037a76:	4013      	ands	r3, r2
 8037a78:	687a      	ldr	r2, [r7, #4]
 8037a7a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8037a7c:	687b      	ldr	r3, [r7, #4]
 8037a7e:	68db      	ldr	r3, [r3, #12]
 8037a80:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8037a84:	687b      	ldr	r3, [r7, #4]
 8037a86:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8037a88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8037a8a:	2b01      	cmp	r3, #1
 8037a8c:	d105      	bne.n	8037a9a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8037a8e:	687b      	ldr	r3, [r7, #4]
 8037a90:	68db      	ldr	r3, [r3, #12]
 8037a92:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8037a96:	687b      	ldr	r3, [r7, #4]
 8037a98:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8037a9a:	6878      	ldr	r0, [r7, #4]
 8037a9c:	f001 fc04 	bl	80392a8 <USB_CoreReset>
 8037aa0:	4603      	mov	r3, r0
 8037aa2:	73fb      	strb	r3, [r7, #15]
 8037aa4:	e01a      	b.n	8037adc <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8037aa6:	687b      	ldr	r3, [r7, #4]
 8037aa8:	68db      	ldr	r3, [r3, #12]
 8037aaa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8037aae:	687b      	ldr	r3, [r7, #4]
 8037ab0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8037ab2:	6878      	ldr	r0, [r7, #4]
 8037ab4:	f001 fbf8 	bl	80392a8 <USB_CoreReset>
 8037ab8:	4603      	mov	r3, r0
 8037aba:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8037abc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8037abe:	2b00      	cmp	r3, #0
 8037ac0:	d106      	bne.n	8037ad0 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8037ac2:	687b      	ldr	r3, [r7, #4]
 8037ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8037ac6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8037aca:	687b      	ldr	r3, [r7, #4]
 8037acc:	639a      	str	r2, [r3, #56]	; 0x38
 8037ace:	e005      	b.n	8037adc <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8037ad0:	687b      	ldr	r3, [r7, #4]
 8037ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8037ad4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8037ad8:	687b      	ldr	r3, [r7, #4]
 8037ada:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8037adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8037ade:	2b01      	cmp	r3, #1
 8037ae0:	d116      	bne.n	8037b10 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8037ae2:	687b      	ldr	r3, [r7, #4]
 8037ae4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8037ae6:	b29a      	uxth	r2, r3
 8037ae8:	687b      	ldr	r3, [r7, #4]
 8037aea:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8037aec:	687b      	ldr	r3, [r7, #4]
 8037aee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8037af0:	4b0c      	ldr	r3, [pc, #48]	; (8037b24 <USB_CoreInit+0xd8>)
 8037af2:	4313      	orrs	r3, r2
 8037af4:	687a      	ldr	r2, [r7, #4]
 8037af6:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8037af8:	687b      	ldr	r3, [r7, #4]
 8037afa:	689b      	ldr	r3, [r3, #8]
 8037afc:	f043 0206 	orr.w	r2, r3, #6
 8037b00:	687b      	ldr	r3, [r7, #4]
 8037b02:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8037b04:	687b      	ldr	r3, [r7, #4]
 8037b06:	689b      	ldr	r3, [r3, #8]
 8037b08:	f043 0220 	orr.w	r2, r3, #32
 8037b0c:	687b      	ldr	r3, [r7, #4]
 8037b0e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8037b10:	7bfb      	ldrb	r3, [r7, #15]
}
 8037b12:	4618      	mov	r0, r3
 8037b14:	3710      	adds	r7, #16
 8037b16:	46bd      	mov	sp, r7
 8037b18:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8037b1c:	b004      	add	sp, #16
 8037b1e:	4770      	bx	lr
 8037b20:	ffbdffbf 	.word	0xffbdffbf
 8037b24:	03ee0000 	.word	0x03ee0000

08037b28 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8037b28:	b480      	push	{r7}
 8037b2a:	b087      	sub	sp, #28
 8037b2c:	af00      	add	r7, sp, #0
 8037b2e:	60f8      	str	r0, [r7, #12]
 8037b30:	60b9      	str	r1, [r7, #8]
 8037b32:	4613      	mov	r3, r2
 8037b34:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8037b36:	79fb      	ldrb	r3, [r7, #7]
 8037b38:	2b02      	cmp	r3, #2
 8037b3a:	d165      	bne.n	8037c08 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8037b3c:	68bb      	ldr	r3, [r7, #8]
 8037b3e:	4a41      	ldr	r2, [pc, #260]	; (8037c44 <USB_SetTurnaroundTime+0x11c>)
 8037b40:	4293      	cmp	r3, r2
 8037b42:	d906      	bls.n	8037b52 <USB_SetTurnaroundTime+0x2a>
 8037b44:	68bb      	ldr	r3, [r7, #8]
 8037b46:	4a40      	ldr	r2, [pc, #256]	; (8037c48 <USB_SetTurnaroundTime+0x120>)
 8037b48:	4293      	cmp	r3, r2
 8037b4a:	d202      	bcs.n	8037b52 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8037b4c:	230f      	movs	r3, #15
 8037b4e:	617b      	str	r3, [r7, #20]
 8037b50:	e062      	b.n	8037c18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8037b52:	68bb      	ldr	r3, [r7, #8]
 8037b54:	4a3c      	ldr	r2, [pc, #240]	; (8037c48 <USB_SetTurnaroundTime+0x120>)
 8037b56:	4293      	cmp	r3, r2
 8037b58:	d306      	bcc.n	8037b68 <USB_SetTurnaroundTime+0x40>
 8037b5a:	68bb      	ldr	r3, [r7, #8]
 8037b5c:	4a3b      	ldr	r2, [pc, #236]	; (8037c4c <USB_SetTurnaroundTime+0x124>)
 8037b5e:	4293      	cmp	r3, r2
 8037b60:	d202      	bcs.n	8037b68 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8037b62:	230e      	movs	r3, #14
 8037b64:	617b      	str	r3, [r7, #20]
 8037b66:	e057      	b.n	8037c18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8037b68:	68bb      	ldr	r3, [r7, #8]
 8037b6a:	4a38      	ldr	r2, [pc, #224]	; (8037c4c <USB_SetTurnaroundTime+0x124>)
 8037b6c:	4293      	cmp	r3, r2
 8037b6e:	d306      	bcc.n	8037b7e <USB_SetTurnaroundTime+0x56>
 8037b70:	68bb      	ldr	r3, [r7, #8]
 8037b72:	4a37      	ldr	r2, [pc, #220]	; (8037c50 <USB_SetTurnaroundTime+0x128>)
 8037b74:	4293      	cmp	r3, r2
 8037b76:	d202      	bcs.n	8037b7e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8037b78:	230d      	movs	r3, #13
 8037b7a:	617b      	str	r3, [r7, #20]
 8037b7c:	e04c      	b.n	8037c18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8037b7e:	68bb      	ldr	r3, [r7, #8]
 8037b80:	4a33      	ldr	r2, [pc, #204]	; (8037c50 <USB_SetTurnaroundTime+0x128>)
 8037b82:	4293      	cmp	r3, r2
 8037b84:	d306      	bcc.n	8037b94 <USB_SetTurnaroundTime+0x6c>
 8037b86:	68bb      	ldr	r3, [r7, #8]
 8037b88:	4a32      	ldr	r2, [pc, #200]	; (8037c54 <USB_SetTurnaroundTime+0x12c>)
 8037b8a:	4293      	cmp	r3, r2
 8037b8c:	d802      	bhi.n	8037b94 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8037b8e:	230c      	movs	r3, #12
 8037b90:	617b      	str	r3, [r7, #20]
 8037b92:	e041      	b.n	8037c18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8037b94:	68bb      	ldr	r3, [r7, #8]
 8037b96:	4a2f      	ldr	r2, [pc, #188]	; (8037c54 <USB_SetTurnaroundTime+0x12c>)
 8037b98:	4293      	cmp	r3, r2
 8037b9a:	d906      	bls.n	8037baa <USB_SetTurnaroundTime+0x82>
 8037b9c:	68bb      	ldr	r3, [r7, #8]
 8037b9e:	4a2e      	ldr	r2, [pc, #184]	; (8037c58 <USB_SetTurnaroundTime+0x130>)
 8037ba0:	4293      	cmp	r3, r2
 8037ba2:	d802      	bhi.n	8037baa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8037ba4:	230b      	movs	r3, #11
 8037ba6:	617b      	str	r3, [r7, #20]
 8037ba8:	e036      	b.n	8037c18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8037baa:	68bb      	ldr	r3, [r7, #8]
 8037bac:	4a2a      	ldr	r2, [pc, #168]	; (8037c58 <USB_SetTurnaroundTime+0x130>)
 8037bae:	4293      	cmp	r3, r2
 8037bb0:	d906      	bls.n	8037bc0 <USB_SetTurnaroundTime+0x98>
 8037bb2:	68bb      	ldr	r3, [r7, #8]
 8037bb4:	4a29      	ldr	r2, [pc, #164]	; (8037c5c <USB_SetTurnaroundTime+0x134>)
 8037bb6:	4293      	cmp	r3, r2
 8037bb8:	d802      	bhi.n	8037bc0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8037bba:	230a      	movs	r3, #10
 8037bbc:	617b      	str	r3, [r7, #20]
 8037bbe:	e02b      	b.n	8037c18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8037bc0:	68bb      	ldr	r3, [r7, #8]
 8037bc2:	4a26      	ldr	r2, [pc, #152]	; (8037c5c <USB_SetTurnaroundTime+0x134>)
 8037bc4:	4293      	cmp	r3, r2
 8037bc6:	d906      	bls.n	8037bd6 <USB_SetTurnaroundTime+0xae>
 8037bc8:	68bb      	ldr	r3, [r7, #8]
 8037bca:	4a25      	ldr	r2, [pc, #148]	; (8037c60 <USB_SetTurnaroundTime+0x138>)
 8037bcc:	4293      	cmp	r3, r2
 8037bce:	d202      	bcs.n	8037bd6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8037bd0:	2309      	movs	r3, #9
 8037bd2:	617b      	str	r3, [r7, #20]
 8037bd4:	e020      	b.n	8037c18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8037bd6:	68bb      	ldr	r3, [r7, #8]
 8037bd8:	4a21      	ldr	r2, [pc, #132]	; (8037c60 <USB_SetTurnaroundTime+0x138>)
 8037bda:	4293      	cmp	r3, r2
 8037bdc:	d306      	bcc.n	8037bec <USB_SetTurnaroundTime+0xc4>
 8037bde:	68bb      	ldr	r3, [r7, #8]
 8037be0:	4a20      	ldr	r2, [pc, #128]	; (8037c64 <USB_SetTurnaroundTime+0x13c>)
 8037be2:	4293      	cmp	r3, r2
 8037be4:	d802      	bhi.n	8037bec <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8037be6:	2308      	movs	r3, #8
 8037be8:	617b      	str	r3, [r7, #20]
 8037bea:	e015      	b.n	8037c18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8037bec:	68bb      	ldr	r3, [r7, #8]
 8037bee:	4a1d      	ldr	r2, [pc, #116]	; (8037c64 <USB_SetTurnaroundTime+0x13c>)
 8037bf0:	4293      	cmp	r3, r2
 8037bf2:	d906      	bls.n	8037c02 <USB_SetTurnaroundTime+0xda>
 8037bf4:	68bb      	ldr	r3, [r7, #8]
 8037bf6:	4a1c      	ldr	r2, [pc, #112]	; (8037c68 <USB_SetTurnaroundTime+0x140>)
 8037bf8:	4293      	cmp	r3, r2
 8037bfa:	d202      	bcs.n	8037c02 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8037bfc:	2307      	movs	r3, #7
 8037bfe:	617b      	str	r3, [r7, #20]
 8037c00:	e00a      	b.n	8037c18 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8037c02:	2306      	movs	r3, #6
 8037c04:	617b      	str	r3, [r7, #20]
 8037c06:	e007      	b.n	8037c18 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8037c08:	79fb      	ldrb	r3, [r7, #7]
 8037c0a:	2b00      	cmp	r3, #0
 8037c0c:	d102      	bne.n	8037c14 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8037c0e:	2309      	movs	r3, #9
 8037c10:	617b      	str	r3, [r7, #20]
 8037c12:	e001      	b.n	8037c18 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8037c14:	2309      	movs	r3, #9
 8037c16:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8037c18:	68fb      	ldr	r3, [r7, #12]
 8037c1a:	68db      	ldr	r3, [r3, #12]
 8037c1c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8037c20:	68fb      	ldr	r3, [r7, #12]
 8037c22:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8037c24:	68fb      	ldr	r3, [r7, #12]
 8037c26:	68da      	ldr	r2, [r3, #12]
 8037c28:	697b      	ldr	r3, [r7, #20]
 8037c2a:	029b      	lsls	r3, r3, #10
 8037c2c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8037c30:	431a      	orrs	r2, r3
 8037c32:	68fb      	ldr	r3, [r7, #12]
 8037c34:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8037c36:	2300      	movs	r3, #0
}
 8037c38:	4618      	mov	r0, r3
 8037c3a:	371c      	adds	r7, #28
 8037c3c:	46bd      	mov	sp, r7
 8037c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8037c42:	4770      	bx	lr
 8037c44:	00d8acbf 	.word	0x00d8acbf
 8037c48:	00e4e1c0 	.word	0x00e4e1c0
 8037c4c:	00f42400 	.word	0x00f42400
 8037c50:	01067380 	.word	0x01067380
 8037c54:	011a499f 	.word	0x011a499f
 8037c58:	01312cff 	.word	0x01312cff
 8037c5c:	014ca43f 	.word	0x014ca43f
 8037c60:	016e3600 	.word	0x016e3600
 8037c64:	01a6ab1f 	.word	0x01a6ab1f
 8037c68:	01e84800 	.word	0x01e84800

08037c6c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8037c6c:	b480      	push	{r7}
 8037c6e:	b083      	sub	sp, #12
 8037c70:	af00      	add	r7, sp, #0
 8037c72:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8037c74:	687b      	ldr	r3, [r7, #4]
 8037c76:	689b      	ldr	r3, [r3, #8]
 8037c78:	f043 0201 	orr.w	r2, r3, #1
 8037c7c:	687b      	ldr	r3, [r7, #4]
 8037c7e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8037c80:	2300      	movs	r3, #0
}
 8037c82:	4618      	mov	r0, r3
 8037c84:	370c      	adds	r7, #12
 8037c86:	46bd      	mov	sp, r7
 8037c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8037c8c:	4770      	bx	lr

08037c8e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8037c8e:	b480      	push	{r7}
 8037c90:	b083      	sub	sp, #12
 8037c92:	af00      	add	r7, sp, #0
 8037c94:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8037c96:	687b      	ldr	r3, [r7, #4]
 8037c98:	689b      	ldr	r3, [r3, #8]
 8037c9a:	f023 0201 	bic.w	r2, r3, #1
 8037c9e:	687b      	ldr	r3, [r7, #4]
 8037ca0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8037ca2:	2300      	movs	r3, #0
}
 8037ca4:	4618      	mov	r0, r3
 8037ca6:	370c      	adds	r7, #12
 8037ca8:	46bd      	mov	sp, r7
 8037caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8037cae:	4770      	bx	lr

08037cb0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8037cb0:	b580      	push	{r7, lr}
 8037cb2:	b084      	sub	sp, #16
 8037cb4:	af00      	add	r7, sp, #0
 8037cb6:	6078      	str	r0, [r7, #4]
 8037cb8:	460b      	mov	r3, r1
 8037cba:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8037cbc:	2300      	movs	r3, #0
 8037cbe:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8037cc0:	687b      	ldr	r3, [r7, #4]
 8037cc2:	68db      	ldr	r3, [r3, #12]
 8037cc4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8037cc8:	687b      	ldr	r3, [r7, #4]
 8037cca:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8037ccc:	78fb      	ldrb	r3, [r7, #3]
 8037cce:	2b01      	cmp	r3, #1
 8037cd0:	d115      	bne.n	8037cfe <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8037cd2:	687b      	ldr	r3, [r7, #4]
 8037cd4:	68db      	ldr	r3, [r3, #12]
 8037cd6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8037cda:	687b      	ldr	r3, [r7, #4]
 8037cdc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8037cde:	2001      	movs	r0, #1
 8037ce0:	f7f2 ff76 	bl	802abd0 <HAL_Delay>
      ms++;
 8037ce4:	68fb      	ldr	r3, [r7, #12]
 8037ce6:	3301      	adds	r3, #1
 8037ce8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8037cea:	6878      	ldr	r0, [r7, #4]
 8037cec:	f001 fa4b 	bl	8039186 <USB_GetMode>
 8037cf0:	4603      	mov	r3, r0
 8037cf2:	2b01      	cmp	r3, #1
 8037cf4:	d01e      	beq.n	8037d34 <USB_SetCurrentMode+0x84>
 8037cf6:	68fb      	ldr	r3, [r7, #12]
 8037cf8:	2b31      	cmp	r3, #49	; 0x31
 8037cfa:	d9f0      	bls.n	8037cde <USB_SetCurrentMode+0x2e>
 8037cfc:	e01a      	b.n	8037d34 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8037cfe:	78fb      	ldrb	r3, [r7, #3]
 8037d00:	2b00      	cmp	r3, #0
 8037d02:	d115      	bne.n	8037d30 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8037d04:	687b      	ldr	r3, [r7, #4]
 8037d06:	68db      	ldr	r3, [r3, #12]
 8037d08:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8037d0c:	687b      	ldr	r3, [r7, #4]
 8037d0e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8037d10:	2001      	movs	r0, #1
 8037d12:	f7f2 ff5d 	bl	802abd0 <HAL_Delay>
      ms++;
 8037d16:	68fb      	ldr	r3, [r7, #12]
 8037d18:	3301      	adds	r3, #1
 8037d1a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8037d1c:	6878      	ldr	r0, [r7, #4]
 8037d1e:	f001 fa32 	bl	8039186 <USB_GetMode>
 8037d22:	4603      	mov	r3, r0
 8037d24:	2b00      	cmp	r3, #0
 8037d26:	d005      	beq.n	8037d34 <USB_SetCurrentMode+0x84>
 8037d28:	68fb      	ldr	r3, [r7, #12]
 8037d2a:	2b31      	cmp	r3, #49	; 0x31
 8037d2c:	d9f0      	bls.n	8037d10 <USB_SetCurrentMode+0x60>
 8037d2e:	e001      	b.n	8037d34 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8037d30:	2301      	movs	r3, #1
 8037d32:	e005      	b.n	8037d40 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8037d34:	68fb      	ldr	r3, [r7, #12]
 8037d36:	2b32      	cmp	r3, #50	; 0x32
 8037d38:	d101      	bne.n	8037d3e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8037d3a:	2301      	movs	r3, #1
 8037d3c:	e000      	b.n	8037d40 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8037d3e:	2300      	movs	r3, #0
}
 8037d40:	4618      	mov	r0, r3
 8037d42:	3710      	adds	r7, #16
 8037d44:	46bd      	mov	sp, r7
 8037d46:	bd80      	pop	{r7, pc}

08037d48 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8037d48:	b084      	sub	sp, #16
 8037d4a:	b580      	push	{r7, lr}
 8037d4c:	b086      	sub	sp, #24
 8037d4e:	af00      	add	r7, sp, #0
 8037d50:	6078      	str	r0, [r7, #4]
 8037d52:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8037d56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8037d5a:	2300      	movs	r3, #0
 8037d5c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8037d5e:	687b      	ldr	r3, [r7, #4]
 8037d60:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8037d62:	2300      	movs	r3, #0
 8037d64:	613b      	str	r3, [r7, #16]
 8037d66:	e009      	b.n	8037d7c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8037d68:	687a      	ldr	r2, [r7, #4]
 8037d6a:	693b      	ldr	r3, [r7, #16]
 8037d6c:	3340      	adds	r3, #64	; 0x40
 8037d6e:	009b      	lsls	r3, r3, #2
 8037d70:	4413      	add	r3, r2
 8037d72:	2200      	movs	r2, #0
 8037d74:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8037d76:	693b      	ldr	r3, [r7, #16]
 8037d78:	3301      	adds	r3, #1
 8037d7a:	613b      	str	r3, [r7, #16]
 8037d7c:	693b      	ldr	r3, [r7, #16]
 8037d7e:	2b0e      	cmp	r3, #14
 8037d80:	d9f2      	bls.n	8037d68 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8037d82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8037d84:	2b00      	cmp	r3, #0
 8037d86:	d11c      	bne.n	8037dc2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8037d88:	68fb      	ldr	r3, [r7, #12]
 8037d8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8037d8e:	685b      	ldr	r3, [r3, #4]
 8037d90:	68fa      	ldr	r2, [r7, #12]
 8037d92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8037d96:	f043 0302 	orr.w	r3, r3, #2
 8037d9a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8037d9c:	687b      	ldr	r3, [r7, #4]
 8037d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8037da0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8037da4:	687b      	ldr	r3, [r7, #4]
 8037da6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8037da8:	687b      	ldr	r3, [r7, #4]
 8037daa:	681b      	ldr	r3, [r3, #0]
 8037dac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8037db0:	687b      	ldr	r3, [r7, #4]
 8037db2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8037db4:	687b      	ldr	r3, [r7, #4]
 8037db6:	681b      	ldr	r3, [r3, #0]
 8037db8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8037dbc:	687b      	ldr	r3, [r7, #4]
 8037dbe:	601a      	str	r2, [r3, #0]
 8037dc0:	e005      	b.n	8037dce <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8037dc2:	687b      	ldr	r3, [r7, #4]
 8037dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8037dc6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8037dca:	687b      	ldr	r3, [r7, #4]
 8037dcc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8037dce:	68fb      	ldr	r3, [r7, #12]
 8037dd0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8037dd4:	461a      	mov	r2, r3
 8037dd6:	2300      	movs	r3, #0
 8037dd8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8037dda:	68fb      	ldr	r3, [r7, #12]
 8037ddc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8037de0:	4619      	mov	r1, r3
 8037de2:	68fb      	ldr	r3, [r7, #12]
 8037de4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8037de8:	461a      	mov	r2, r3
 8037dea:	680b      	ldr	r3, [r1, #0]
 8037dec:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8037dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8037df0:	2b01      	cmp	r3, #1
 8037df2:	d10c      	bne.n	8037e0e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8037df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8037df6:	2b00      	cmp	r3, #0
 8037df8:	d104      	bne.n	8037e04 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8037dfa:	2100      	movs	r1, #0
 8037dfc:	6878      	ldr	r0, [r7, #4]
 8037dfe:	f000 f965 	bl	80380cc <USB_SetDevSpeed>
 8037e02:	e008      	b.n	8037e16 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8037e04:	2101      	movs	r1, #1
 8037e06:	6878      	ldr	r0, [r7, #4]
 8037e08:	f000 f960 	bl	80380cc <USB_SetDevSpeed>
 8037e0c:	e003      	b.n	8037e16 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8037e0e:	2103      	movs	r1, #3
 8037e10:	6878      	ldr	r0, [r7, #4]
 8037e12:	f000 f95b 	bl	80380cc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8037e16:	2110      	movs	r1, #16
 8037e18:	6878      	ldr	r0, [r7, #4]
 8037e1a:	f000 f8f3 	bl	8038004 <USB_FlushTxFifo>
 8037e1e:	4603      	mov	r3, r0
 8037e20:	2b00      	cmp	r3, #0
 8037e22:	d001      	beq.n	8037e28 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8037e24:	2301      	movs	r3, #1
 8037e26:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8037e28:	6878      	ldr	r0, [r7, #4]
 8037e2a:	f000 f91f 	bl	803806c <USB_FlushRxFifo>
 8037e2e:	4603      	mov	r3, r0
 8037e30:	2b00      	cmp	r3, #0
 8037e32:	d001      	beq.n	8037e38 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8037e34:	2301      	movs	r3, #1
 8037e36:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8037e38:	68fb      	ldr	r3, [r7, #12]
 8037e3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8037e3e:	461a      	mov	r2, r3
 8037e40:	2300      	movs	r3, #0
 8037e42:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8037e44:	68fb      	ldr	r3, [r7, #12]
 8037e46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8037e4a:	461a      	mov	r2, r3
 8037e4c:	2300      	movs	r3, #0
 8037e4e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8037e50:	68fb      	ldr	r3, [r7, #12]
 8037e52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8037e56:	461a      	mov	r2, r3
 8037e58:	2300      	movs	r3, #0
 8037e5a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8037e5c:	2300      	movs	r3, #0
 8037e5e:	613b      	str	r3, [r7, #16]
 8037e60:	e043      	b.n	8037eea <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8037e62:	693b      	ldr	r3, [r7, #16]
 8037e64:	015a      	lsls	r2, r3, #5
 8037e66:	68fb      	ldr	r3, [r7, #12]
 8037e68:	4413      	add	r3, r2
 8037e6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8037e6e:	681b      	ldr	r3, [r3, #0]
 8037e70:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8037e74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8037e78:	d118      	bne.n	8037eac <USB_DevInit+0x164>
    {
      if (i == 0U)
 8037e7a:	693b      	ldr	r3, [r7, #16]
 8037e7c:	2b00      	cmp	r3, #0
 8037e7e:	d10a      	bne.n	8037e96 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8037e80:	693b      	ldr	r3, [r7, #16]
 8037e82:	015a      	lsls	r2, r3, #5
 8037e84:	68fb      	ldr	r3, [r7, #12]
 8037e86:	4413      	add	r3, r2
 8037e88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8037e8c:	461a      	mov	r2, r3
 8037e8e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8037e92:	6013      	str	r3, [r2, #0]
 8037e94:	e013      	b.n	8037ebe <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8037e96:	693b      	ldr	r3, [r7, #16]
 8037e98:	015a      	lsls	r2, r3, #5
 8037e9a:	68fb      	ldr	r3, [r7, #12]
 8037e9c:	4413      	add	r3, r2
 8037e9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8037ea2:	461a      	mov	r2, r3
 8037ea4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8037ea8:	6013      	str	r3, [r2, #0]
 8037eaa:	e008      	b.n	8037ebe <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8037eac:	693b      	ldr	r3, [r7, #16]
 8037eae:	015a      	lsls	r2, r3, #5
 8037eb0:	68fb      	ldr	r3, [r7, #12]
 8037eb2:	4413      	add	r3, r2
 8037eb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8037eb8:	461a      	mov	r2, r3
 8037eba:	2300      	movs	r3, #0
 8037ebc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8037ebe:	693b      	ldr	r3, [r7, #16]
 8037ec0:	015a      	lsls	r2, r3, #5
 8037ec2:	68fb      	ldr	r3, [r7, #12]
 8037ec4:	4413      	add	r3, r2
 8037ec6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8037eca:	461a      	mov	r2, r3
 8037ecc:	2300      	movs	r3, #0
 8037ece:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8037ed0:	693b      	ldr	r3, [r7, #16]
 8037ed2:	015a      	lsls	r2, r3, #5
 8037ed4:	68fb      	ldr	r3, [r7, #12]
 8037ed6:	4413      	add	r3, r2
 8037ed8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8037edc:	461a      	mov	r2, r3
 8037ede:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8037ee2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8037ee4:	693b      	ldr	r3, [r7, #16]
 8037ee6:	3301      	adds	r3, #1
 8037ee8:	613b      	str	r3, [r7, #16]
 8037eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8037eec:	693a      	ldr	r2, [r7, #16]
 8037eee:	429a      	cmp	r2, r3
 8037ef0:	d3b7      	bcc.n	8037e62 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8037ef2:	2300      	movs	r3, #0
 8037ef4:	613b      	str	r3, [r7, #16]
 8037ef6:	e043      	b.n	8037f80 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8037ef8:	693b      	ldr	r3, [r7, #16]
 8037efa:	015a      	lsls	r2, r3, #5
 8037efc:	68fb      	ldr	r3, [r7, #12]
 8037efe:	4413      	add	r3, r2
 8037f00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8037f04:	681b      	ldr	r3, [r3, #0]
 8037f06:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8037f0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8037f0e:	d118      	bne.n	8037f42 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8037f10:	693b      	ldr	r3, [r7, #16]
 8037f12:	2b00      	cmp	r3, #0
 8037f14:	d10a      	bne.n	8037f2c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8037f16:	693b      	ldr	r3, [r7, #16]
 8037f18:	015a      	lsls	r2, r3, #5
 8037f1a:	68fb      	ldr	r3, [r7, #12]
 8037f1c:	4413      	add	r3, r2
 8037f1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8037f22:	461a      	mov	r2, r3
 8037f24:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8037f28:	6013      	str	r3, [r2, #0]
 8037f2a:	e013      	b.n	8037f54 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8037f2c:	693b      	ldr	r3, [r7, #16]
 8037f2e:	015a      	lsls	r2, r3, #5
 8037f30:	68fb      	ldr	r3, [r7, #12]
 8037f32:	4413      	add	r3, r2
 8037f34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8037f38:	461a      	mov	r2, r3
 8037f3a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8037f3e:	6013      	str	r3, [r2, #0]
 8037f40:	e008      	b.n	8037f54 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8037f42:	693b      	ldr	r3, [r7, #16]
 8037f44:	015a      	lsls	r2, r3, #5
 8037f46:	68fb      	ldr	r3, [r7, #12]
 8037f48:	4413      	add	r3, r2
 8037f4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8037f4e:	461a      	mov	r2, r3
 8037f50:	2300      	movs	r3, #0
 8037f52:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8037f54:	693b      	ldr	r3, [r7, #16]
 8037f56:	015a      	lsls	r2, r3, #5
 8037f58:	68fb      	ldr	r3, [r7, #12]
 8037f5a:	4413      	add	r3, r2
 8037f5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8037f60:	461a      	mov	r2, r3
 8037f62:	2300      	movs	r3, #0
 8037f64:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8037f66:	693b      	ldr	r3, [r7, #16]
 8037f68:	015a      	lsls	r2, r3, #5
 8037f6a:	68fb      	ldr	r3, [r7, #12]
 8037f6c:	4413      	add	r3, r2
 8037f6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8037f72:	461a      	mov	r2, r3
 8037f74:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8037f78:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8037f7a:	693b      	ldr	r3, [r7, #16]
 8037f7c:	3301      	adds	r3, #1
 8037f7e:	613b      	str	r3, [r7, #16]
 8037f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8037f82:	693a      	ldr	r2, [r7, #16]
 8037f84:	429a      	cmp	r2, r3
 8037f86:	d3b7      	bcc.n	8037ef8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8037f88:	68fb      	ldr	r3, [r7, #12]
 8037f8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8037f8e:	691b      	ldr	r3, [r3, #16]
 8037f90:	68fa      	ldr	r2, [r7, #12]
 8037f92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8037f96:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8037f9a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8037f9c:	687b      	ldr	r3, [r7, #4]
 8037f9e:	2200      	movs	r2, #0
 8037fa0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8037fa2:	687b      	ldr	r3, [r7, #4]
 8037fa4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8037fa8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8037faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8037fac:	2b00      	cmp	r3, #0
 8037fae:	d105      	bne.n	8037fbc <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8037fb0:	687b      	ldr	r3, [r7, #4]
 8037fb2:	699b      	ldr	r3, [r3, #24]
 8037fb4:	f043 0210 	orr.w	r2, r3, #16
 8037fb8:	687b      	ldr	r3, [r7, #4]
 8037fba:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8037fbc:	687b      	ldr	r3, [r7, #4]
 8037fbe:	699a      	ldr	r2, [r3, #24]
 8037fc0:	4b0e      	ldr	r3, [pc, #56]	; (8037ffc <USB_DevInit+0x2b4>)
 8037fc2:	4313      	orrs	r3, r2
 8037fc4:	687a      	ldr	r2, [r7, #4]
 8037fc6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8037fc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8037fca:	2b00      	cmp	r3, #0
 8037fcc:	d005      	beq.n	8037fda <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8037fce:	687b      	ldr	r3, [r7, #4]
 8037fd0:	699b      	ldr	r3, [r3, #24]
 8037fd2:	f043 0208 	orr.w	r2, r3, #8
 8037fd6:	687b      	ldr	r3, [r7, #4]
 8037fd8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8037fda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8037fdc:	2b01      	cmp	r3, #1
 8037fde:	d105      	bne.n	8037fec <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8037fe0:	687b      	ldr	r3, [r7, #4]
 8037fe2:	699a      	ldr	r2, [r3, #24]
 8037fe4:	4b06      	ldr	r3, [pc, #24]	; (8038000 <USB_DevInit+0x2b8>)
 8037fe6:	4313      	orrs	r3, r2
 8037fe8:	687a      	ldr	r2, [r7, #4]
 8037fea:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8037fec:	7dfb      	ldrb	r3, [r7, #23]
}
 8037fee:	4618      	mov	r0, r3
 8037ff0:	3718      	adds	r7, #24
 8037ff2:	46bd      	mov	sp, r7
 8037ff4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8037ff8:	b004      	add	sp, #16
 8037ffa:	4770      	bx	lr
 8037ffc:	803c3800 	.word	0x803c3800
 8038000:	40000004 	.word	0x40000004

08038004 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8038004:	b480      	push	{r7}
 8038006:	b085      	sub	sp, #20
 8038008:	af00      	add	r7, sp, #0
 803800a:	6078      	str	r0, [r7, #4]
 803800c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 803800e:	2300      	movs	r3, #0
 8038010:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8038012:	68fb      	ldr	r3, [r7, #12]
 8038014:	3301      	adds	r3, #1
 8038016:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8038018:	68fb      	ldr	r3, [r7, #12]
 803801a:	4a13      	ldr	r2, [pc, #76]	; (8038068 <USB_FlushTxFifo+0x64>)
 803801c:	4293      	cmp	r3, r2
 803801e:	d901      	bls.n	8038024 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8038020:	2303      	movs	r3, #3
 8038022:	e01b      	b.n	803805c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8038024:	687b      	ldr	r3, [r7, #4]
 8038026:	691b      	ldr	r3, [r3, #16]
 8038028:	2b00      	cmp	r3, #0
 803802a:	daf2      	bge.n	8038012 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 803802c:	2300      	movs	r3, #0
 803802e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8038030:	683b      	ldr	r3, [r7, #0]
 8038032:	019b      	lsls	r3, r3, #6
 8038034:	f043 0220 	orr.w	r2, r3, #32
 8038038:	687b      	ldr	r3, [r7, #4]
 803803a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 803803c:	68fb      	ldr	r3, [r7, #12]
 803803e:	3301      	adds	r3, #1
 8038040:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8038042:	68fb      	ldr	r3, [r7, #12]
 8038044:	4a08      	ldr	r2, [pc, #32]	; (8038068 <USB_FlushTxFifo+0x64>)
 8038046:	4293      	cmp	r3, r2
 8038048:	d901      	bls.n	803804e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 803804a:	2303      	movs	r3, #3
 803804c:	e006      	b.n	803805c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 803804e:	687b      	ldr	r3, [r7, #4]
 8038050:	691b      	ldr	r3, [r3, #16]
 8038052:	f003 0320 	and.w	r3, r3, #32
 8038056:	2b20      	cmp	r3, #32
 8038058:	d0f0      	beq.n	803803c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 803805a:	2300      	movs	r3, #0
}
 803805c:	4618      	mov	r0, r3
 803805e:	3714      	adds	r7, #20
 8038060:	46bd      	mov	sp, r7
 8038062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8038066:	4770      	bx	lr
 8038068:	00030d40 	.word	0x00030d40

0803806c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 803806c:	b480      	push	{r7}
 803806e:	b085      	sub	sp, #20
 8038070:	af00      	add	r7, sp, #0
 8038072:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8038074:	2300      	movs	r3, #0
 8038076:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8038078:	68fb      	ldr	r3, [r7, #12]
 803807a:	3301      	adds	r3, #1
 803807c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 803807e:	68fb      	ldr	r3, [r7, #12]
 8038080:	4a11      	ldr	r2, [pc, #68]	; (80380c8 <USB_FlushRxFifo+0x5c>)
 8038082:	4293      	cmp	r3, r2
 8038084:	d901      	bls.n	803808a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8038086:	2303      	movs	r3, #3
 8038088:	e018      	b.n	80380bc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 803808a:	687b      	ldr	r3, [r7, #4]
 803808c:	691b      	ldr	r3, [r3, #16]
 803808e:	2b00      	cmp	r3, #0
 8038090:	daf2      	bge.n	8038078 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8038092:	2300      	movs	r3, #0
 8038094:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8038096:	687b      	ldr	r3, [r7, #4]
 8038098:	2210      	movs	r2, #16
 803809a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 803809c:	68fb      	ldr	r3, [r7, #12]
 803809e:	3301      	adds	r3, #1
 80380a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80380a2:	68fb      	ldr	r3, [r7, #12]
 80380a4:	4a08      	ldr	r2, [pc, #32]	; (80380c8 <USB_FlushRxFifo+0x5c>)
 80380a6:	4293      	cmp	r3, r2
 80380a8:	d901      	bls.n	80380ae <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80380aa:	2303      	movs	r3, #3
 80380ac:	e006      	b.n	80380bc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80380ae:	687b      	ldr	r3, [r7, #4]
 80380b0:	691b      	ldr	r3, [r3, #16]
 80380b2:	f003 0310 	and.w	r3, r3, #16
 80380b6:	2b10      	cmp	r3, #16
 80380b8:	d0f0      	beq.n	803809c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80380ba:	2300      	movs	r3, #0
}
 80380bc:	4618      	mov	r0, r3
 80380be:	3714      	adds	r7, #20
 80380c0:	46bd      	mov	sp, r7
 80380c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80380c6:	4770      	bx	lr
 80380c8:	00030d40 	.word	0x00030d40

080380cc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80380cc:	b480      	push	{r7}
 80380ce:	b085      	sub	sp, #20
 80380d0:	af00      	add	r7, sp, #0
 80380d2:	6078      	str	r0, [r7, #4]
 80380d4:	460b      	mov	r3, r1
 80380d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80380d8:	687b      	ldr	r3, [r7, #4]
 80380da:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80380dc:	68fb      	ldr	r3, [r7, #12]
 80380de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80380e2:	681a      	ldr	r2, [r3, #0]
 80380e4:	78fb      	ldrb	r3, [r7, #3]
 80380e6:	68f9      	ldr	r1, [r7, #12]
 80380e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80380ec:	4313      	orrs	r3, r2
 80380ee:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80380f0:	2300      	movs	r3, #0
}
 80380f2:	4618      	mov	r0, r3
 80380f4:	3714      	adds	r7, #20
 80380f6:	46bd      	mov	sp, r7
 80380f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80380fc:	4770      	bx	lr

080380fe <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80380fe:	b480      	push	{r7}
 8038100:	b087      	sub	sp, #28
 8038102:	af00      	add	r7, sp, #0
 8038104:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8038106:	687b      	ldr	r3, [r7, #4]
 8038108:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 803810a:	693b      	ldr	r3, [r7, #16]
 803810c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8038110:	689b      	ldr	r3, [r3, #8]
 8038112:	f003 0306 	and.w	r3, r3, #6
 8038116:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8038118:	68fb      	ldr	r3, [r7, #12]
 803811a:	2b00      	cmp	r3, #0
 803811c:	d102      	bne.n	8038124 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 803811e:	2300      	movs	r3, #0
 8038120:	75fb      	strb	r3, [r7, #23]
 8038122:	e00a      	b.n	803813a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8038124:	68fb      	ldr	r3, [r7, #12]
 8038126:	2b02      	cmp	r3, #2
 8038128:	d002      	beq.n	8038130 <USB_GetDevSpeed+0x32>
 803812a:	68fb      	ldr	r3, [r7, #12]
 803812c:	2b06      	cmp	r3, #6
 803812e:	d102      	bne.n	8038136 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8038130:	2302      	movs	r3, #2
 8038132:	75fb      	strb	r3, [r7, #23]
 8038134:	e001      	b.n	803813a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8038136:	230f      	movs	r3, #15
 8038138:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 803813a:	7dfb      	ldrb	r3, [r7, #23]
}
 803813c:	4618      	mov	r0, r3
 803813e:	371c      	adds	r7, #28
 8038140:	46bd      	mov	sp, r7
 8038142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8038146:	4770      	bx	lr

08038148 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8038148:	b480      	push	{r7}
 803814a:	b085      	sub	sp, #20
 803814c:	af00      	add	r7, sp, #0
 803814e:	6078      	str	r0, [r7, #4]
 8038150:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8038152:	687b      	ldr	r3, [r7, #4]
 8038154:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8038156:	683b      	ldr	r3, [r7, #0]
 8038158:	781b      	ldrb	r3, [r3, #0]
 803815a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 803815c:	683b      	ldr	r3, [r7, #0]
 803815e:	785b      	ldrb	r3, [r3, #1]
 8038160:	2b01      	cmp	r3, #1
 8038162:	d139      	bne.n	80381d8 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8038164:	68fb      	ldr	r3, [r7, #12]
 8038166:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803816a:	69da      	ldr	r2, [r3, #28]
 803816c:	683b      	ldr	r3, [r7, #0]
 803816e:	781b      	ldrb	r3, [r3, #0]
 8038170:	f003 030f 	and.w	r3, r3, #15
 8038174:	2101      	movs	r1, #1
 8038176:	fa01 f303 	lsl.w	r3, r1, r3
 803817a:	b29b      	uxth	r3, r3
 803817c:	68f9      	ldr	r1, [r7, #12]
 803817e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8038182:	4313      	orrs	r3, r2
 8038184:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8038186:	68bb      	ldr	r3, [r7, #8]
 8038188:	015a      	lsls	r2, r3, #5
 803818a:	68fb      	ldr	r3, [r7, #12]
 803818c:	4413      	add	r3, r2
 803818e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038192:	681b      	ldr	r3, [r3, #0]
 8038194:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8038198:	2b00      	cmp	r3, #0
 803819a:	d153      	bne.n	8038244 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 803819c:	68bb      	ldr	r3, [r7, #8]
 803819e:	015a      	lsls	r2, r3, #5
 80381a0:	68fb      	ldr	r3, [r7, #12]
 80381a2:	4413      	add	r3, r2
 80381a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80381a8:	681a      	ldr	r2, [r3, #0]
 80381aa:	683b      	ldr	r3, [r7, #0]
 80381ac:	68db      	ldr	r3, [r3, #12]
 80381ae:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80381b2:	683b      	ldr	r3, [r7, #0]
 80381b4:	791b      	ldrb	r3, [r3, #4]
 80381b6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80381b8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80381ba:	68bb      	ldr	r3, [r7, #8]
 80381bc:	059b      	lsls	r3, r3, #22
 80381be:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80381c0:	431a      	orrs	r2, r3
 80381c2:	68bb      	ldr	r3, [r7, #8]
 80381c4:	0159      	lsls	r1, r3, #5
 80381c6:	68fb      	ldr	r3, [r7, #12]
 80381c8:	440b      	add	r3, r1
 80381ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80381ce:	4619      	mov	r1, r3
 80381d0:	4b20      	ldr	r3, [pc, #128]	; (8038254 <USB_ActivateEndpoint+0x10c>)
 80381d2:	4313      	orrs	r3, r2
 80381d4:	600b      	str	r3, [r1, #0]
 80381d6:	e035      	b.n	8038244 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80381d8:	68fb      	ldr	r3, [r7, #12]
 80381da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80381de:	69da      	ldr	r2, [r3, #28]
 80381e0:	683b      	ldr	r3, [r7, #0]
 80381e2:	781b      	ldrb	r3, [r3, #0]
 80381e4:	f003 030f 	and.w	r3, r3, #15
 80381e8:	2101      	movs	r1, #1
 80381ea:	fa01 f303 	lsl.w	r3, r1, r3
 80381ee:	041b      	lsls	r3, r3, #16
 80381f0:	68f9      	ldr	r1, [r7, #12]
 80381f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80381f6:	4313      	orrs	r3, r2
 80381f8:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80381fa:	68bb      	ldr	r3, [r7, #8]
 80381fc:	015a      	lsls	r2, r3, #5
 80381fe:	68fb      	ldr	r3, [r7, #12]
 8038200:	4413      	add	r3, r2
 8038202:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038206:	681b      	ldr	r3, [r3, #0]
 8038208:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 803820c:	2b00      	cmp	r3, #0
 803820e:	d119      	bne.n	8038244 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8038210:	68bb      	ldr	r3, [r7, #8]
 8038212:	015a      	lsls	r2, r3, #5
 8038214:	68fb      	ldr	r3, [r7, #12]
 8038216:	4413      	add	r3, r2
 8038218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803821c:	681a      	ldr	r2, [r3, #0]
 803821e:	683b      	ldr	r3, [r7, #0]
 8038220:	68db      	ldr	r3, [r3, #12]
 8038222:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8038226:	683b      	ldr	r3, [r7, #0]
 8038228:	791b      	ldrb	r3, [r3, #4]
 803822a:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 803822c:	430b      	orrs	r3, r1
 803822e:	431a      	orrs	r2, r3
 8038230:	68bb      	ldr	r3, [r7, #8]
 8038232:	0159      	lsls	r1, r3, #5
 8038234:	68fb      	ldr	r3, [r7, #12]
 8038236:	440b      	add	r3, r1
 8038238:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803823c:	4619      	mov	r1, r3
 803823e:	4b05      	ldr	r3, [pc, #20]	; (8038254 <USB_ActivateEndpoint+0x10c>)
 8038240:	4313      	orrs	r3, r2
 8038242:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8038244:	2300      	movs	r3, #0
}
 8038246:	4618      	mov	r0, r3
 8038248:	3714      	adds	r7, #20
 803824a:	46bd      	mov	sp, r7
 803824c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8038250:	4770      	bx	lr
 8038252:	bf00      	nop
 8038254:	10008000 	.word	0x10008000

08038258 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8038258:	b480      	push	{r7}
 803825a:	b085      	sub	sp, #20
 803825c:	af00      	add	r7, sp, #0
 803825e:	6078      	str	r0, [r7, #4]
 8038260:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8038262:	687b      	ldr	r3, [r7, #4]
 8038264:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8038266:	683b      	ldr	r3, [r7, #0]
 8038268:	781b      	ldrb	r3, [r3, #0]
 803826a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 803826c:	683b      	ldr	r3, [r7, #0]
 803826e:	785b      	ldrb	r3, [r3, #1]
 8038270:	2b01      	cmp	r3, #1
 8038272:	d161      	bne.n	8038338 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8038274:	68bb      	ldr	r3, [r7, #8]
 8038276:	015a      	lsls	r2, r3, #5
 8038278:	68fb      	ldr	r3, [r7, #12]
 803827a:	4413      	add	r3, r2
 803827c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038280:	681b      	ldr	r3, [r3, #0]
 8038282:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8038286:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 803828a:	d11f      	bne.n	80382cc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 803828c:	68bb      	ldr	r3, [r7, #8]
 803828e:	015a      	lsls	r2, r3, #5
 8038290:	68fb      	ldr	r3, [r7, #12]
 8038292:	4413      	add	r3, r2
 8038294:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038298:	681b      	ldr	r3, [r3, #0]
 803829a:	68ba      	ldr	r2, [r7, #8]
 803829c:	0151      	lsls	r1, r2, #5
 803829e:	68fa      	ldr	r2, [r7, #12]
 80382a0:	440a      	add	r2, r1
 80382a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80382a6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80382aa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80382ac:	68bb      	ldr	r3, [r7, #8]
 80382ae:	015a      	lsls	r2, r3, #5
 80382b0:	68fb      	ldr	r3, [r7, #12]
 80382b2:	4413      	add	r3, r2
 80382b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80382b8:	681b      	ldr	r3, [r3, #0]
 80382ba:	68ba      	ldr	r2, [r7, #8]
 80382bc:	0151      	lsls	r1, r2, #5
 80382be:	68fa      	ldr	r2, [r7, #12]
 80382c0:	440a      	add	r2, r1
 80382c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80382c6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80382ca:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80382cc:	68fb      	ldr	r3, [r7, #12]
 80382ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80382d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80382d4:	683b      	ldr	r3, [r7, #0]
 80382d6:	781b      	ldrb	r3, [r3, #0]
 80382d8:	f003 030f 	and.w	r3, r3, #15
 80382dc:	2101      	movs	r1, #1
 80382de:	fa01 f303 	lsl.w	r3, r1, r3
 80382e2:	b29b      	uxth	r3, r3
 80382e4:	43db      	mvns	r3, r3
 80382e6:	68f9      	ldr	r1, [r7, #12]
 80382e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80382ec:	4013      	ands	r3, r2
 80382ee:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80382f0:	68fb      	ldr	r3, [r7, #12]
 80382f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80382f6:	69da      	ldr	r2, [r3, #28]
 80382f8:	683b      	ldr	r3, [r7, #0]
 80382fa:	781b      	ldrb	r3, [r3, #0]
 80382fc:	f003 030f 	and.w	r3, r3, #15
 8038300:	2101      	movs	r1, #1
 8038302:	fa01 f303 	lsl.w	r3, r1, r3
 8038306:	b29b      	uxth	r3, r3
 8038308:	43db      	mvns	r3, r3
 803830a:	68f9      	ldr	r1, [r7, #12]
 803830c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8038310:	4013      	ands	r3, r2
 8038312:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8038314:	68bb      	ldr	r3, [r7, #8]
 8038316:	015a      	lsls	r2, r3, #5
 8038318:	68fb      	ldr	r3, [r7, #12]
 803831a:	4413      	add	r3, r2
 803831c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038320:	681a      	ldr	r2, [r3, #0]
 8038322:	68bb      	ldr	r3, [r7, #8]
 8038324:	0159      	lsls	r1, r3, #5
 8038326:	68fb      	ldr	r3, [r7, #12]
 8038328:	440b      	add	r3, r1
 803832a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803832e:	4619      	mov	r1, r3
 8038330:	4b35      	ldr	r3, [pc, #212]	; (8038408 <USB_DeactivateEndpoint+0x1b0>)
 8038332:	4013      	ands	r3, r2
 8038334:	600b      	str	r3, [r1, #0]
 8038336:	e060      	b.n	80383fa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8038338:	68bb      	ldr	r3, [r7, #8]
 803833a:	015a      	lsls	r2, r3, #5
 803833c:	68fb      	ldr	r3, [r7, #12]
 803833e:	4413      	add	r3, r2
 8038340:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038344:	681b      	ldr	r3, [r3, #0]
 8038346:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 803834a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 803834e:	d11f      	bne.n	8038390 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8038350:	68bb      	ldr	r3, [r7, #8]
 8038352:	015a      	lsls	r2, r3, #5
 8038354:	68fb      	ldr	r3, [r7, #12]
 8038356:	4413      	add	r3, r2
 8038358:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803835c:	681b      	ldr	r3, [r3, #0]
 803835e:	68ba      	ldr	r2, [r7, #8]
 8038360:	0151      	lsls	r1, r2, #5
 8038362:	68fa      	ldr	r2, [r7, #12]
 8038364:	440a      	add	r2, r1
 8038366:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803836a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 803836e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8038370:	68bb      	ldr	r3, [r7, #8]
 8038372:	015a      	lsls	r2, r3, #5
 8038374:	68fb      	ldr	r3, [r7, #12]
 8038376:	4413      	add	r3, r2
 8038378:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803837c:	681b      	ldr	r3, [r3, #0]
 803837e:	68ba      	ldr	r2, [r7, #8]
 8038380:	0151      	lsls	r1, r2, #5
 8038382:	68fa      	ldr	r2, [r7, #12]
 8038384:	440a      	add	r2, r1
 8038386:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803838a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 803838e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8038390:	68fb      	ldr	r3, [r7, #12]
 8038392:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8038396:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8038398:	683b      	ldr	r3, [r7, #0]
 803839a:	781b      	ldrb	r3, [r3, #0]
 803839c:	f003 030f 	and.w	r3, r3, #15
 80383a0:	2101      	movs	r1, #1
 80383a2:	fa01 f303 	lsl.w	r3, r1, r3
 80383a6:	041b      	lsls	r3, r3, #16
 80383a8:	43db      	mvns	r3, r3
 80383aa:	68f9      	ldr	r1, [r7, #12]
 80383ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80383b0:	4013      	ands	r3, r2
 80383b2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80383b4:	68fb      	ldr	r3, [r7, #12]
 80383b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80383ba:	69da      	ldr	r2, [r3, #28]
 80383bc:	683b      	ldr	r3, [r7, #0]
 80383be:	781b      	ldrb	r3, [r3, #0]
 80383c0:	f003 030f 	and.w	r3, r3, #15
 80383c4:	2101      	movs	r1, #1
 80383c6:	fa01 f303 	lsl.w	r3, r1, r3
 80383ca:	041b      	lsls	r3, r3, #16
 80383cc:	43db      	mvns	r3, r3
 80383ce:	68f9      	ldr	r1, [r7, #12]
 80383d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80383d4:	4013      	ands	r3, r2
 80383d6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80383d8:	68bb      	ldr	r3, [r7, #8]
 80383da:	015a      	lsls	r2, r3, #5
 80383dc:	68fb      	ldr	r3, [r7, #12]
 80383de:	4413      	add	r3, r2
 80383e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80383e4:	681a      	ldr	r2, [r3, #0]
 80383e6:	68bb      	ldr	r3, [r7, #8]
 80383e8:	0159      	lsls	r1, r3, #5
 80383ea:	68fb      	ldr	r3, [r7, #12]
 80383ec:	440b      	add	r3, r1
 80383ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80383f2:	4619      	mov	r1, r3
 80383f4:	4b05      	ldr	r3, [pc, #20]	; (803840c <USB_DeactivateEndpoint+0x1b4>)
 80383f6:	4013      	ands	r3, r2
 80383f8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80383fa:	2300      	movs	r3, #0
}
 80383fc:	4618      	mov	r0, r3
 80383fe:	3714      	adds	r7, #20
 8038400:	46bd      	mov	sp, r7
 8038402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8038406:	4770      	bx	lr
 8038408:	ec337800 	.word	0xec337800
 803840c:	eff37800 	.word	0xeff37800

08038410 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8038410:	b580      	push	{r7, lr}
 8038412:	b08a      	sub	sp, #40	; 0x28
 8038414:	af02      	add	r7, sp, #8
 8038416:	60f8      	str	r0, [r7, #12]
 8038418:	60b9      	str	r1, [r7, #8]
 803841a:	4613      	mov	r3, r2
 803841c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803841e:	68fb      	ldr	r3, [r7, #12]
 8038420:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8038422:	68bb      	ldr	r3, [r7, #8]
 8038424:	781b      	ldrb	r3, [r3, #0]
 8038426:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8038428:	68bb      	ldr	r3, [r7, #8]
 803842a:	785b      	ldrb	r3, [r3, #1]
 803842c:	2b01      	cmp	r3, #1
 803842e:	f040 8163 	bne.w	80386f8 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8038432:	68bb      	ldr	r3, [r7, #8]
 8038434:	699b      	ldr	r3, [r3, #24]
 8038436:	2b00      	cmp	r3, #0
 8038438:	d132      	bne.n	80384a0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 803843a:	69bb      	ldr	r3, [r7, #24]
 803843c:	015a      	lsls	r2, r3, #5
 803843e:	69fb      	ldr	r3, [r7, #28]
 8038440:	4413      	add	r3, r2
 8038442:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038446:	691a      	ldr	r2, [r3, #16]
 8038448:	69bb      	ldr	r3, [r7, #24]
 803844a:	0159      	lsls	r1, r3, #5
 803844c:	69fb      	ldr	r3, [r7, #28]
 803844e:	440b      	add	r3, r1
 8038450:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038454:	4619      	mov	r1, r3
 8038456:	4ba5      	ldr	r3, [pc, #660]	; (80386ec <USB_EPStartXfer+0x2dc>)
 8038458:	4013      	ands	r3, r2
 803845a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 803845c:	69bb      	ldr	r3, [r7, #24]
 803845e:	015a      	lsls	r2, r3, #5
 8038460:	69fb      	ldr	r3, [r7, #28]
 8038462:	4413      	add	r3, r2
 8038464:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038468:	691b      	ldr	r3, [r3, #16]
 803846a:	69ba      	ldr	r2, [r7, #24]
 803846c:	0151      	lsls	r1, r2, #5
 803846e:	69fa      	ldr	r2, [r7, #28]
 8038470:	440a      	add	r2, r1
 8038472:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8038476:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 803847a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 803847c:	69bb      	ldr	r3, [r7, #24]
 803847e:	015a      	lsls	r2, r3, #5
 8038480:	69fb      	ldr	r3, [r7, #28]
 8038482:	4413      	add	r3, r2
 8038484:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038488:	691a      	ldr	r2, [r3, #16]
 803848a:	69bb      	ldr	r3, [r7, #24]
 803848c:	0159      	lsls	r1, r3, #5
 803848e:	69fb      	ldr	r3, [r7, #28]
 8038490:	440b      	add	r3, r1
 8038492:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038496:	4619      	mov	r1, r3
 8038498:	4b95      	ldr	r3, [pc, #596]	; (80386f0 <USB_EPStartXfer+0x2e0>)
 803849a:	4013      	ands	r3, r2
 803849c:	610b      	str	r3, [r1, #16]
 803849e:	e074      	b.n	803858a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80384a0:	69bb      	ldr	r3, [r7, #24]
 80384a2:	015a      	lsls	r2, r3, #5
 80384a4:	69fb      	ldr	r3, [r7, #28]
 80384a6:	4413      	add	r3, r2
 80384a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80384ac:	691a      	ldr	r2, [r3, #16]
 80384ae:	69bb      	ldr	r3, [r7, #24]
 80384b0:	0159      	lsls	r1, r3, #5
 80384b2:	69fb      	ldr	r3, [r7, #28]
 80384b4:	440b      	add	r3, r1
 80384b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80384ba:	4619      	mov	r1, r3
 80384bc:	4b8c      	ldr	r3, [pc, #560]	; (80386f0 <USB_EPStartXfer+0x2e0>)
 80384be:	4013      	ands	r3, r2
 80384c0:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80384c2:	69bb      	ldr	r3, [r7, #24]
 80384c4:	015a      	lsls	r2, r3, #5
 80384c6:	69fb      	ldr	r3, [r7, #28]
 80384c8:	4413      	add	r3, r2
 80384ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80384ce:	691a      	ldr	r2, [r3, #16]
 80384d0:	69bb      	ldr	r3, [r7, #24]
 80384d2:	0159      	lsls	r1, r3, #5
 80384d4:	69fb      	ldr	r3, [r7, #28]
 80384d6:	440b      	add	r3, r1
 80384d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80384dc:	4619      	mov	r1, r3
 80384de:	4b83      	ldr	r3, [pc, #524]	; (80386ec <USB_EPStartXfer+0x2dc>)
 80384e0:	4013      	ands	r3, r2
 80384e2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80384e4:	69bb      	ldr	r3, [r7, #24]
 80384e6:	015a      	lsls	r2, r3, #5
 80384e8:	69fb      	ldr	r3, [r7, #28]
 80384ea:	4413      	add	r3, r2
 80384ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80384f0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80384f2:	68bb      	ldr	r3, [r7, #8]
 80384f4:	6999      	ldr	r1, [r3, #24]
 80384f6:	68bb      	ldr	r3, [r7, #8]
 80384f8:	68db      	ldr	r3, [r3, #12]
 80384fa:	440b      	add	r3, r1
 80384fc:	1e59      	subs	r1, r3, #1
 80384fe:	68bb      	ldr	r3, [r7, #8]
 8038500:	68db      	ldr	r3, [r3, #12]
 8038502:	fbb1 f3f3 	udiv	r3, r1, r3
 8038506:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8038508:	4b7a      	ldr	r3, [pc, #488]	; (80386f4 <USB_EPStartXfer+0x2e4>)
 803850a:	400b      	ands	r3, r1
 803850c:	69b9      	ldr	r1, [r7, #24]
 803850e:	0148      	lsls	r0, r1, #5
 8038510:	69f9      	ldr	r1, [r7, #28]
 8038512:	4401      	add	r1, r0
 8038514:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8038518:	4313      	orrs	r3, r2
 803851a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 803851c:	69bb      	ldr	r3, [r7, #24]
 803851e:	015a      	lsls	r2, r3, #5
 8038520:	69fb      	ldr	r3, [r7, #28]
 8038522:	4413      	add	r3, r2
 8038524:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038528:	691a      	ldr	r2, [r3, #16]
 803852a:	68bb      	ldr	r3, [r7, #8]
 803852c:	699b      	ldr	r3, [r3, #24]
 803852e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8038532:	69b9      	ldr	r1, [r7, #24]
 8038534:	0148      	lsls	r0, r1, #5
 8038536:	69f9      	ldr	r1, [r7, #28]
 8038538:	4401      	add	r1, r0
 803853a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 803853e:	4313      	orrs	r3, r2
 8038540:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8038542:	68bb      	ldr	r3, [r7, #8]
 8038544:	791b      	ldrb	r3, [r3, #4]
 8038546:	2b01      	cmp	r3, #1
 8038548:	d11f      	bne.n	803858a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 803854a:	69bb      	ldr	r3, [r7, #24]
 803854c:	015a      	lsls	r2, r3, #5
 803854e:	69fb      	ldr	r3, [r7, #28]
 8038550:	4413      	add	r3, r2
 8038552:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038556:	691b      	ldr	r3, [r3, #16]
 8038558:	69ba      	ldr	r2, [r7, #24]
 803855a:	0151      	lsls	r1, r2, #5
 803855c:	69fa      	ldr	r2, [r7, #28]
 803855e:	440a      	add	r2, r1
 8038560:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8038564:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8038568:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 803856a:	69bb      	ldr	r3, [r7, #24]
 803856c:	015a      	lsls	r2, r3, #5
 803856e:	69fb      	ldr	r3, [r7, #28]
 8038570:	4413      	add	r3, r2
 8038572:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038576:	691b      	ldr	r3, [r3, #16]
 8038578:	69ba      	ldr	r2, [r7, #24]
 803857a:	0151      	lsls	r1, r2, #5
 803857c:	69fa      	ldr	r2, [r7, #28]
 803857e:	440a      	add	r2, r1
 8038580:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8038584:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8038588:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 803858a:	79fb      	ldrb	r3, [r7, #7]
 803858c:	2b01      	cmp	r3, #1
 803858e:	d14b      	bne.n	8038628 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8038590:	68bb      	ldr	r3, [r7, #8]
 8038592:	695b      	ldr	r3, [r3, #20]
 8038594:	2b00      	cmp	r3, #0
 8038596:	d009      	beq.n	80385ac <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8038598:	69bb      	ldr	r3, [r7, #24]
 803859a:	015a      	lsls	r2, r3, #5
 803859c:	69fb      	ldr	r3, [r7, #28]
 803859e:	4413      	add	r3, r2
 80385a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80385a4:	461a      	mov	r2, r3
 80385a6:	68bb      	ldr	r3, [r7, #8]
 80385a8:	695b      	ldr	r3, [r3, #20]
 80385aa:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80385ac:	68bb      	ldr	r3, [r7, #8]
 80385ae:	791b      	ldrb	r3, [r3, #4]
 80385b0:	2b01      	cmp	r3, #1
 80385b2:	d128      	bne.n	8038606 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80385b4:	69fb      	ldr	r3, [r7, #28]
 80385b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80385ba:	689b      	ldr	r3, [r3, #8]
 80385bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80385c0:	2b00      	cmp	r3, #0
 80385c2:	d110      	bne.n	80385e6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80385c4:	69bb      	ldr	r3, [r7, #24]
 80385c6:	015a      	lsls	r2, r3, #5
 80385c8:	69fb      	ldr	r3, [r7, #28]
 80385ca:	4413      	add	r3, r2
 80385cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80385d0:	681b      	ldr	r3, [r3, #0]
 80385d2:	69ba      	ldr	r2, [r7, #24]
 80385d4:	0151      	lsls	r1, r2, #5
 80385d6:	69fa      	ldr	r2, [r7, #28]
 80385d8:	440a      	add	r2, r1
 80385da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80385de:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80385e2:	6013      	str	r3, [r2, #0]
 80385e4:	e00f      	b.n	8038606 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80385e6:	69bb      	ldr	r3, [r7, #24]
 80385e8:	015a      	lsls	r2, r3, #5
 80385ea:	69fb      	ldr	r3, [r7, #28]
 80385ec:	4413      	add	r3, r2
 80385ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80385f2:	681b      	ldr	r3, [r3, #0]
 80385f4:	69ba      	ldr	r2, [r7, #24]
 80385f6:	0151      	lsls	r1, r2, #5
 80385f8:	69fa      	ldr	r2, [r7, #28]
 80385fa:	440a      	add	r2, r1
 80385fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8038600:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8038604:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8038606:	69bb      	ldr	r3, [r7, #24]
 8038608:	015a      	lsls	r2, r3, #5
 803860a:	69fb      	ldr	r3, [r7, #28]
 803860c:	4413      	add	r3, r2
 803860e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038612:	681b      	ldr	r3, [r3, #0]
 8038614:	69ba      	ldr	r2, [r7, #24]
 8038616:	0151      	lsls	r1, r2, #5
 8038618:	69fa      	ldr	r2, [r7, #28]
 803861a:	440a      	add	r2, r1
 803861c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8038620:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8038624:	6013      	str	r3, [r2, #0]
 8038626:	e137      	b.n	8038898 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8038628:	69bb      	ldr	r3, [r7, #24]
 803862a:	015a      	lsls	r2, r3, #5
 803862c:	69fb      	ldr	r3, [r7, #28]
 803862e:	4413      	add	r3, r2
 8038630:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038634:	681b      	ldr	r3, [r3, #0]
 8038636:	69ba      	ldr	r2, [r7, #24]
 8038638:	0151      	lsls	r1, r2, #5
 803863a:	69fa      	ldr	r2, [r7, #28]
 803863c:	440a      	add	r2, r1
 803863e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8038642:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8038646:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8038648:	68bb      	ldr	r3, [r7, #8]
 803864a:	791b      	ldrb	r3, [r3, #4]
 803864c:	2b01      	cmp	r3, #1
 803864e:	d015      	beq.n	803867c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8038650:	68bb      	ldr	r3, [r7, #8]
 8038652:	699b      	ldr	r3, [r3, #24]
 8038654:	2b00      	cmp	r3, #0
 8038656:	f000 811f 	beq.w	8038898 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 803865a:	69fb      	ldr	r3, [r7, #28]
 803865c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8038660:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8038662:	68bb      	ldr	r3, [r7, #8]
 8038664:	781b      	ldrb	r3, [r3, #0]
 8038666:	f003 030f 	and.w	r3, r3, #15
 803866a:	2101      	movs	r1, #1
 803866c:	fa01 f303 	lsl.w	r3, r1, r3
 8038670:	69f9      	ldr	r1, [r7, #28]
 8038672:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8038676:	4313      	orrs	r3, r2
 8038678:	634b      	str	r3, [r1, #52]	; 0x34
 803867a:	e10d      	b.n	8038898 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 803867c:	69fb      	ldr	r3, [r7, #28]
 803867e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8038682:	689b      	ldr	r3, [r3, #8]
 8038684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8038688:	2b00      	cmp	r3, #0
 803868a:	d110      	bne.n	80386ae <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 803868c:	69bb      	ldr	r3, [r7, #24]
 803868e:	015a      	lsls	r2, r3, #5
 8038690:	69fb      	ldr	r3, [r7, #28]
 8038692:	4413      	add	r3, r2
 8038694:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038698:	681b      	ldr	r3, [r3, #0]
 803869a:	69ba      	ldr	r2, [r7, #24]
 803869c:	0151      	lsls	r1, r2, #5
 803869e:	69fa      	ldr	r2, [r7, #28]
 80386a0:	440a      	add	r2, r1
 80386a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80386a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80386aa:	6013      	str	r3, [r2, #0]
 80386ac:	e00f      	b.n	80386ce <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80386ae:	69bb      	ldr	r3, [r7, #24]
 80386b0:	015a      	lsls	r2, r3, #5
 80386b2:	69fb      	ldr	r3, [r7, #28]
 80386b4:	4413      	add	r3, r2
 80386b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80386ba:	681b      	ldr	r3, [r3, #0]
 80386bc:	69ba      	ldr	r2, [r7, #24]
 80386be:	0151      	lsls	r1, r2, #5
 80386c0:	69fa      	ldr	r2, [r7, #28]
 80386c2:	440a      	add	r2, r1
 80386c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80386c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80386cc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80386ce:	68bb      	ldr	r3, [r7, #8]
 80386d0:	6919      	ldr	r1, [r3, #16]
 80386d2:	68bb      	ldr	r3, [r7, #8]
 80386d4:	781a      	ldrb	r2, [r3, #0]
 80386d6:	68bb      	ldr	r3, [r7, #8]
 80386d8:	699b      	ldr	r3, [r3, #24]
 80386da:	b298      	uxth	r0, r3
 80386dc:	79fb      	ldrb	r3, [r7, #7]
 80386de:	9300      	str	r3, [sp, #0]
 80386e0:	4603      	mov	r3, r0
 80386e2:	68f8      	ldr	r0, [r7, #12]
 80386e4:	f000 faea 	bl	8038cbc <USB_WritePacket>
 80386e8:	e0d6      	b.n	8038898 <USB_EPStartXfer+0x488>
 80386ea:	bf00      	nop
 80386ec:	e007ffff 	.word	0xe007ffff
 80386f0:	fff80000 	.word	0xfff80000
 80386f4:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80386f8:	69bb      	ldr	r3, [r7, #24]
 80386fa:	015a      	lsls	r2, r3, #5
 80386fc:	69fb      	ldr	r3, [r7, #28]
 80386fe:	4413      	add	r3, r2
 8038700:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038704:	691a      	ldr	r2, [r3, #16]
 8038706:	69bb      	ldr	r3, [r7, #24]
 8038708:	0159      	lsls	r1, r3, #5
 803870a:	69fb      	ldr	r3, [r7, #28]
 803870c:	440b      	add	r3, r1
 803870e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038712:	4619      	mov	r1, r3
 8038714:	4b63      	ldr	r3, [pc, #396]	; (80388a4 <USB_EPStartXfer+0x494>)
 8038716:	4013      	ands	r3, r2
 8038718:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 803871a:	69bb      	ldr	r3, [r7, #24]
 803871c:	015a      	lsls	r2, r3, #5
 803871e:	69fb      	ldr	r3, [r7, #28]
 8038720:	4413      	add	r3, r2
 8038722:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038726:	691a      	ldr	r2, [r3, #16]
 8038728:	69bb      	ldr	r3, [r7, #24]
 803872a:	0159      	lsls	r1, r3, #5
 803872c:	69fb      	ldr	r3, [r7, #28]
 803872e:	440b      	add	r3, r1
 8038730:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038734:	4619      	mov	r1, r3
 8038736:	4b5c      	ldr	r3, [pc, #368]	; (80388a8 <USB_EPStartXfer+0x498>)
 8038738:	4013      	ands	r3, r2
 803873a:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 803873c:	68bb      	ldr	r3, [r7, #8]
 803873e:	699b      	ldr	r3, [r3, #24]
 8038740:	2b00      	cmp	r3, #0
 8038742:	d123      	bne.n	803878c <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8038744:	69bb      	ldr	r3, [r7, #24]
 8038746:	015a      	lsls	r2, r3, #5
 8038748:	69fb      	ldr	r3, [r7, #28]
 803874a:	4413      	add	r3, r2
 803874c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038750:	691a      	ldr	r2, [r3, #16]
 8038752:	68bb      	ldr	r3, [r7, #8]
 8038754:	68db      	ldr	r3, [r3, #12]
 8038756:	f3c3 0312 	ubfx	r3, r3, #0, #19
 803875a:	69b9      	ldr	r1, [r7, #24]
 803875c:	0148      	lsls	r0, r1, #5
 803875e:	69f9      	ldr	r1, [r7, #28]
 8038760:	4401      	add	r1, r0
 8038762:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8038766:	4313      	orrs	r3, r2
 8038768:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 803876a:	69bb      	ldr	r3, [r7, #24]
 803876c:	015a      	lsls	r2, r3, #5
 803876e:	69fb      	ldr	r3, [r7, #28]
 8038770:	4413      	add	r3, r2
 8038772:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038776:	691b      	ldr	r3, [r3, #16]
 8038778:	69ba      	ldr	r2, [r7, #24]
 803877a:	0151      	lsls	r1, r2, #5
 803877c:	69fa      	ldr	r2, [r7, #28]
 803877e:	440a      	add	r2, r1
 8038780:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8038784:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8038788:	6113      	str	r3, [r2, #16]
 803878a:	e037      	b.n	80387fc <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 803878c:	68bb      	ldr	r3, [r7, #8]
 803878e:	699a      	ldr	r2, [r3, #24]
 8038790:	68bb      	ldr	r3, [r7, #8]
 8038792:	68db      	ldr	r3, [r3, #12]
 8038794:	4413      	add	r3, r2
 8038796:	1e5a      	subs	r2, r3, #1
 8038798:	68bb      	ldr	r3, [r7, #8]
 803879a:	68db      	ldr	r3, [r3, #12]
 803879c:	fbb2 f3f3 	udiv	r3, r2, r3
 80387a0:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80387a2:	68bb      	ldr	r3, [r7, #8]
 80387a4:	68db      	ldr	r3, [r3, #12]
 80387a6:	8afa      	ldrh	r2, [r7, #22]
 80387a8:	fb03 f202 	mul.w	r2, r3, r2
 80387ac:	68bb      	ldr	r3, [r7, #8]
 80387ae:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80387b0:	69bb      	ldr	r3, [r7, #24]
 80387b2:	015a      	lsls	r2, r3, #5
 80387b4:	69fb      	ldr	r3, [r7, #28]
 80387b6:	4413      	add	r3, r2
 80387b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80387bc:	691a      	ldr	r2, [r3, #16]
 80387be:	8afb      	ldrh	r3, [r7, #22]
 80387c0:	04d9      	lsls	r1, r3, #19
 80387c2:	4b3a      	ldr	r3, [pc, #232]	; (80388ac <USB_EPStartXfer+0x49c>)
 80387c4:	400b      	ands	r3, r1
 80387c6:	69b9      	ldr	r1, [r7, #24]
 80387c8:	0148      	lsls	r0, r1, #5
 80387ca:	69f9      	ldr	r1, [r7, #28]
 80387cc:	4401      	add	r1, r0
 80387ce:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80387d2:	4313      	orrs	r3, r2
 80387d4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80387d6:	69bb      	ldr	r3, [r7, #24]
 80387d8:	015a      	lsls	r2, r3, #5
 80387da:	69fb      	ldr	r3, [r7, #28]
 80387dc:	4413      	add	r3, r2
 80387de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80387e2:	691a      	ldr	r2, [r3, #16]
 80387e4:	68bb      	ldr	r3, [r7, #8]
 80387e6:	69db      	ldr	r3, [r3, #28]
 80387e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80387ec:	69b9      	ldr	r1, [r7, #24]
 80387ee:	0148      	lsls	r0, r1, #5
 80387f0:	69f9      	ldr	r1, [r7, #28]
 80387f2:	4401      	add	r1, r0
 80387f4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80387f8:	4313      	orrs	r3, r2
 80387fa:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80387fc:	79fb      	ldrb	r3, [r7, #7]
 80387fe:	2b01      	cmp	r3, #1
 8038800:	d10d      	bne.n	803881e <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8038802:	68bb      	ldr	r3, [r7, #8]
 8038804:	691b      	ldr	r3, [r3, #16]
 8038806:	2b00      	cmp	r3, #0
 8038808:	d009      	beq.n	803881e <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 803880a:	68bb      	ldr	r3, [r7, #8]
 803880c:	6919      	ldr	r1, [r3, #16]
 803880e:	69bb      	ldr	r3, [r7, #24]
 8038810:	015a      	lsls	r2, r3, #5
 8038812:	69fb      	ldr	r3, [r7, #28]
 8038814:	4413      	add	r3, r2
 8038816:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803881a:	460a      	mov	r2, r1
 803881c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 803881e:	68bb      	ldr	r3, [r7, #8]
 8038820:	791b      	ldrb	r3, [r3, #4]
 8038822:	2b01      	cmp	r3, #1
 8038824:	d128      	bne.n	8038878 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8038826:	69fb      	ldr	r3, [r7, #28]
 8038828:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803882c:	689b      	ldr	r3, [r3, #8]
 803882e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8038832:	2b00      	cmp	r3, #0
 8038834:	d110      	bne.n	8038858 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8038836:	69bb      	ldr	r3, [r7, #24]
 8038838:	015a      	lsls	r2, r3, #5
 803883a:	69fb      	ldr	r3, [r7, #28]
 803883c:	4413      	add	r3, r2
 803883e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038842:	681b      	ldr	r3, [r3, #0]
 8038844:	69ba      	ldr	r2, [r7, #24]
 8038846:	0151      	lsls	r1, r2, #5
 8038848:	69fa      	ldr	r2, [r7, #28]
 803884a:	440a      	add	r2, r1
 803884c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8038850:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8038854:	6013      	str	r3, [r2, #0]
 8038856:	e00f      	b.n	8038878 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8038858:	69bb      	ldr	r3, [r7, #24]
 803885a:	015a      	lsls	r2, r3, #5
 803885c:	69fb      	ldr	r3, [r7, #28]
 803885e:	4413      	add	r3, r2
 8038860:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038864:	681b      	ldr	r3, [r3, #0]
 8038866:	69ba      	ldr	r2, [r7, #24]
 8038868:	0151      	lsls	r1, r2, #5
 803886a:	69fa      	ldr	r2, [r7, #28]
 803886c:	440a      	add	r2, r1
 803886e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8038872:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8038876:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8038878:	69bb      	ldr	r3, [r7, #24]
 803887a:	015a      	lsls	r2, r3, #5
 803887c:	69fb      	ldr	r3, [r7, #28]
 803887e:	4413      	add	r3, r2
 8038880:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038884:	681b      	ldr	r3, [r3, #0]
 8038886:	69ba      	ldr	r2, [r7, #24]
 8038888:	0151      	lsls	r1, r2, #5
 803888a:	69fa      	ldr	r2, [r7, #28]
 803888c:	440a      	add	r2, r1
 803888e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8038892:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8038896:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8038898:	2300      	movs	r3, #0
}
 803889a:	4618      	mov	r0, r3
 803889c:	3720      	adds	r7, #32
 803889e:	46bd      	mov	sp, r7
 80388a0:	bd80      	pop	{r7, pc}
 80388a2:	bf00      	nop
 80388a4:	fff80000 	.word	0xfff80000
 80388a8:	e007ffff 	.word	0xe007ffff
 80388ac:	1ff80000 	.word	0x1ff80000

080388b0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80388b0:	b480      	push	{r7}
 80388b2:	b087      	sub	sp, #28
 80388b4:	af00      	add	r7, sp, #0
 80388b6:	60f8      	str	r0, [r7, #12]
 80388b8:	60b9      	str	r1, [r7, #8]
 80388ba:	4613      	mov	r3, r2
 80388bc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80388be:	68fb      	ldr	r3, [r7, #12]
 80388c0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80388c2:	68bb      	ldr	r3, [r7, #8]
 80388c4:	781b      	ldrb	r3, [r3, #0]
 80388c6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80388c8:	68bb      	ldr	r3, [r7, #8]
 80388ca:	785b      	ldrb	r3, [r3, #1]
 80388cc:	2b01      	cmp	r3, #1
 80388ce:	f040 80ce 	bne.w	8038a6e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80388d2:	68bb      	ldr	r3, [r7, #8]
 80388d4:	699b      	ldr	r3, [r3, #24]
 80388d6:	2b00      	cmp	r3, #0
 80388d8:	d132      	bne.n	8038940 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80388da:	693b      	ldr	r3, [r7, #16]
 80388dc:	015a      	lsls	r2, r3, #5
 80388de:	697b      	ldr	r3, [r7, #20]
 80388e0:	4413      	add	r3, r2
 80388e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80388e6:	691a      	ldr	r2, [r3, #16]
 80388e8:	693b      	ldr	r3, [r7, #16]
 80388ea:	0159      	lsls	r1, r3, #5
 80388ec:	697b      	ldr	r3, [r7, #20]
 80388ee:	440b      	add	r3, r1
 80388f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80388f4:	4619      	mov	r1, r3
 80388f6:	4b9a      	ldr	r3, [pc, #616]	; (8038b60 <USB_EP0StartXfer+0x2b0>)
 80388f8:	4013      	ands	r3, r2
 80388fa:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80388fc:	693b      	ldr	r3, [r7, #16]
 80388fe:	015a      	lsls	r2, r3, #5
 8038900:	697b      	ldr	r3, [r7, #20]
 8038902:	4413      	add	r3, r2
 8038904:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038908:	691b      	ldr	r3, [r3, #16]
 803890a:	693a      	ldr	r2, [r7, #16]
 803890c:	0151      	lsls	r1, r2, #5
 803890e:	697a      	ldr	r2, [r7, #20]
 8038910:	440a      	add	r2, r1
 8038912:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8038916:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 803891a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 803891c:	693b      	ldr	r3, [r7, #16]
 803891e:	015a      	lsls	r2, r3, #5
 8038920:	697b      	ldr	r3, [r7, #20]
 8038922:	4413      	add	r3, r2
 8038924:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038928:	691a      	ldr	r2, [r3, #16]
 803892a:	693b      	ldr	r3, [r7, #16]
 803892c:	0159      	lsls	r1, r3, #5
 803892e:	697b      	ldr	r3, [r7, #20]
 8038930:	440b      	add	r3, r1
 8038932:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038936:	4619      	mov	r1, r3
 8038938:	4b8a      	ldr	r3, [pc, #552]	; (8038b64 <USB_EP0StartXfer+0x2b4>)
 803893a:	4013      	ands	r3, r2
 803893c:	610b      	str	r3, [r1, #16]
 803893e:	e04e      	b.n	80389de <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8038940:	693b      	ldr	r3, [r7, #16]
 8038942:	015a      	lsls	r2, r3, #5
 8038944:	697b      	ldr	r3, [r7, #20]
 8038946:	4413      	add	r3, r2
 8038948:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803894c:	691a      	ldr	r2, [r3, #16]
 803894e:	693b      	ldr	r3, [r7, #16]
 8038950:	0159      	lsls	r1, r3, #5
 8038952:	697b      	ldr	r3, [r7, #20]
 8038954:	440b      	add	r3, r1
 8038956:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803895a:	4619      	mov	r1, r3
 803895c:	4b81      	ldr	r3, [pc, #516]	; (8038b64 <USB_EP0StartXfer+0x2b4>)
 803895e:	4013      	ands	r3, r2
 8038960:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8038962:	693b      	ldr	r3, [r7, #16]
 8038964:	015a      	lsls	r2, r3, #5
 8038966:	697b      	ldr	r3, [r7, #20]
 8038968:	4413      	add	r3, r2
 803896a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803896e:	691a      	ldr	r2, [r3, #16]
 8038970:	693b      	ldr	r3, [r7, #16]
 8038972:	0159      	lsls	r1, r3, #5
 8038974:	697b      	ldr	r3, [r7, #20]
 8038976:	440b      	add	r3, r1
 8038978:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803897c:	4619      	mov	r1, r3
 803897e:	4b78      	ldr	r3, [pc, #480]	; (8038b60 <USB_EP0StartXfer+0x2b0>)
 8038980:	4013      	ands	r3, r2
 8038982:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8038984:	68bb      	ldr	r3, [r7, #8]
 8038986:	699a      	ldr	r2, [r3, #24]
 8038988:	68bb      	ldr	r3, [r7, #8]
 803898a:	68db      	ldr	r3, [r3, #12]
 803898c:	429a      	cmp	r2, r3
 803898e:	d903      	bls.n	8038998 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8038990:	68bb      	ldr	r3, [r7, #8]
 8038992:	68da      	ldr	r2, [r3, #12]
 8038994:	68bb      	ldr	r3, [r7, #8]
 8038996:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8038998:	693b      	ldr	r3, [r7, #16]
 803899a:	015a      	lsls	r2, r3, #5
 803899c:	697b      	ldr	r3, [r7, #20]
 803899e:	4413      	add	r3, r2
 80389a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80389a4:	691b      	ldr	r3, [r3, #16]
 80389a6:	693a      	ldr	r2, [r7, #16]
 80389a8:	0151      	lsls	r1, r2, #5
 80389aa:	697a      	ldr	r2, [r7, #20]
 80389ac:	440a      	add	r2, r1
 80389ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80389b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80389b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80389b8:	693b      	ldr	r3, [r7, #16]
 80389ba:	015a      	lsls	r2, r3, #5
 80389bc:	697b      	ldr	r3, [r7, #20]
 80389be:	4413      	add	r3, r2
 80389c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80389c4:	691a      	ldr	r2, [r3, #16]
 80389c6:	68bb      	ldr	r3, [r7, #8]
 80389c8:	699b      	ldr	r3, [r3, #24]
 80389ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80389ce:	6939      	ldr	r1, [r7, #16]
 80389d0:	0148      	lsls	r0, r1, #5
 80389d2:	6979      	ldr	r1, [r7, #20]
 80389d4:	4401      	add	r1, r0
 80389d6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80389da:	4313      	orrs	r3, r2
 80389dc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80389de:	79fb      	ldrb	r3, [r7, #7]
 80389e0:	2b01      	cmp	r3, #1
 80389e2:	d11e      	bne.n	8038a22 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80389e4:	68bb      	ldr	r3, [r7, #8]
 80389e6:	695b      	ldr	r3, [r3, #20]
 80389e8:	2b00      	cmp	r3, #0
 80389ea:	d009      	beq.n	8038a00 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80389ec:	693b      	ldr	r3, [r7, #16]
 80389ee:	015a      	lsls	r2, r3, #5
 80389f0:	697b      	ldr	r3, [r7, #20]
 80389f2:	4413      	add	r3, r2
 80389f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80389f8:	461a      	mov	r2, r3
 80389fa:	68bb      	ldr	r3, [r7, #8]
 80389fc:	695b      	ldr	r3, [r3, #20]
 80389fe:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8038a00:	693b      	ldr	r3, [r7, #16]
 8038a02:	015a      	lsls	r2, r3, #5
 8038a04:	697b      	ldr	r3, [r7, #20]
 8038a06:	4413      	add	r3, r2
 8038a08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038a0c:	681b      	ldr	r3, [r3, #0]
 8038a0e:	693a      	ldr	r2, [r7, #16]
 8038a10:	0151      	lsls	r1, r2, #5
 8038a12:	697a      	ldr	r2, [r7, #20]
 8038a14:	440a      	add	r2, r1
 8038a16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8038a1a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8038a1e:	6013      	str	r3, [r2, #0]
 8038a20:	e097      	b.n	8038b52 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8038a22:	693b      	ldr	r3, [r7, #16]
 8038a24:	015a      	lsls	r2, r3, #5
 8038a26:	697b      	ldr	r3, [r7, #20]
 8038a28:	4413      	add	r3, r2
 8038a2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038a2e:	681b      	ldr	r3, [r3, #0]
 8038a30:	693a      	ldr	r2, [r7, #16]
 8038a32:	0151      	lsls	r1, r2, #5
 8038a34:	697a      	ldr	r2, [r7, #20]
 8038a36:	440a      	add	r2, r1
 8038a38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8038a3c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8038a40:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8038a42:	68bb      	ldr	r3, [r7, #8]
 8038a44:	699b      	ldr	r3, [r3, #24]
 8038a46:	2b00      	cmp	r3, #0
 8038a48:	f000 8083 	beq.w	8038b52 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8038a4c:	697b      	ldr	r3, [r7, #20]
 8038a4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8038a52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8038a54:	68bb      	ldr	r3, [r7, #8]
 8038a56:	781b      	ldrb	r3, [r3, #0]
 8038a58:	f003 030f 	and.w	r3, r3, #15
 8038a5c:	2101      	movs	r1, #1
 8038a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8038a62:	6979      	ldr	r1, [r7, #20]
 8038a64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8038a68:	4313      	orrs	r3, r2
 8038a6a:	634b      	str	r3, [r1, #52]	; 0x34
 8038a6c:	e071      	b.n	8038b52 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8038a6e:	693b      	ldr	r3, [r7, #16]
 8038a70:	015a      	lsls	r2, r3, #5
 8038a72:	697b      	ldr	r3, [r7, #20]
 8038a74:	4413      	add	r3, r2
 8038a76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038a7a:	691a      	ldr	r2, [r3, #16]
 8038a7c:	693b      	ldr	r3, [r7, #16]
 8038a7e:	0159      	lsls	r1, r3, #5
 8038a80:	697b      	ldr	r3, [r7, #20]
 8038a82:	440b      	add	r3, r1
 8038a84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038a88:	4619      	mov	r1, r3
 8038a8a:	4b36      	ldr	r3, [pc, #216]	; (8038b64 <USB_EP0StartXfer+0x2b4>)
 8038a8c:	4013      	ands	r3, r2
 8038a8e:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8038a90:	693b      	ldr	r3, [r7, #16]
 8038a92:	015a      	lsls	r2, r3, #5
 8038a94:	697b      	ldr	r3, [r7, #20]
 8038a96:	4413      	add	r3, r2
 8038a98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038a9c:	691a      	ldr	r2, [r3, #16]
 8038a9e:	693b      	ldr	r3, [r7, #16]
 8038aa0:	0159      	lsls	r1, r3, #5
 8038aa2:	697b      	ldr	r3, [r7, #20]
 8038aa4:	440b      	add	r3, r1
 8038aa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038aaa:	4619      	mov	r1, r3
 8038aac:	4b2c      	ldr	r3, [pc, #176]	; (8038b60 <USB_EP0StartXfer+0x2b0>)
 8038aae:	4013      	ands	r3, r2
 8038ab0:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8038ab2:	68bb      	ldr	r3, [r7, #8]
 8038ab4:	699b      	ldr	r3, [r3, #24]
 8038ab6:	2b00      	cmp	r3, #0
 8038ab8:	d003      	beq.n	8038ac2 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8038aba:	68bb      	ldr	r3, [r7, #8]
 8038abc:	68da      	ldr	r2, [r3, #12]
 8038abe:	68bb      	ldr	r3, [r7, #8]
 8038ac0:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8038ac2:	68bb      	ldr	r3, [r7, #8]
 8038ac4:	68da      	ldr	r2, [r3, #12]
 8038ac6:	68bb      	ldr	r3, [r7, #8]
 8038ac8:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8038aca:	693b      	ldr	r3, [r7, #16]
 8038acc:	015a      	lsls	r2, r3, #5
 8038ace:	697b      	ldr	r3, [r7, #20]
 8038ad0:	4413      	add	r3, r2
 8038ad2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038ad6:	691b      	ldr	r3, [r3, #16]
 8038ad8:	693a      	ldr	r2, [r7, #16]
 8038ada:	0151      	lsls	r1, r2, #5
 8038adc:	697a      	ldr	r2, [r7, #20]
 8038ade:	440a      	add	r2, r1
 8038ae0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8038ae4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8038ae8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8038aea:	693b      	ldr	r3, [r7, #16]
 8038aec:	015a      	lsls	r2, r3, #5
 8038aee:	697b      	ldr	r3, [r7, #20]
 8038af0:	4413      	add	r3, r2
 8038af2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038af6:	691a      	ldr	r2, [r3, #16]
 8038af8:	68bb      	ldr	r3, [r7, #8]
 8038afa:	69db      	ldr	r3, [r3, #28]
 8038afc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8038b00:	6939      	ldr	r1, [r7, #16]
 8038b02:	0148      	lsls	r0, r1, #5
 8038b04:	6979      	ldr	r1, [r7, #20]
 8038b06:	4401      	add	r1, r0
 8038b08:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8038b0c:	4313      	orrs	r3, r2
 8038b0e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8038b10:	79fb      	ldrb	r3, [r7, #7]
 8038b12:	2b01      	cmp	r3, #1
 8038b14:	d10d      	bne.n	8038b32 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8038b16:	68bb      	ldr	r3, [r7, #8]
 8038b18:	691b      	ldr	r3, [r3, #16]
 8038b1a:	2b00      	cmp	r3, #0
 8038b1c:	d009      	beq.n	8038b32 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8038b1e:	68bb      	ldr	r3, [r7, #8]
 8038b20:	6919      	ldr	r1, [r3, #16]
 8038b22:	693b      	ldr	r3, [r7, #16]
 8038b24:	015a      	lsls	r2, r3, #5
 8038b26:	697b      	ldr	r3, [r7, #20]
 8038b28:	4413      	add	r3, r2
 8038b2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038b2e:	460a      	mov	r2, r1
 8038b30:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8038b32:	693b      	ldr	r3, [r7, #16]
 8038b34:	015a      	lsls	r2, r3, #5
 8038b36:	697b      	ldr	r3, [r7, #20]
 8038b38:	4413      	add	r3, r2
 8038b3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038b3e:	681b      	ldr	r3, [r3, #0]
 8038b40:	693a      	ldr	r2, [r7, #16]
 8038b42:	0151      	lsls	r1, r2, #5
 8038b44:	697a      	ldr	r2, [r7, #20]
 8038b46:	440a      	add	r2, r1
 8038b48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8038b4c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8038b50:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8038b52:	2300      	movs	r3, #0
}
 8038b54:	4618      	mov	r0, r3
 8038b56:	371c      	adds	r7, #28
 8038b58:	46bd      	mov	sp, r7
 8038b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8038b5e:	4770      	bx	lr
 8038b60:	e007ffff 	.word	0xe007ffff
 8038b64:	fff80000 	.word	0xfff80000

08038b68 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8038b68:	b480      	push	{r7}
 8038b6a:	b087      	sub	sp, #28
 8038b6c:	af00      	add	r7, sp, #0
 8038b6e:	6078      	str	r0, [r7, #4]
 8038b70:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8038b72:	2300      	movs	r3, #0
 8038b74:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8038b76:	2300      	movs	r3, #0
 8038b78:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8038b7a:	687b      	ldr	r3, [r7, #4]
 8038b7c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8038b7e:	683b      	ldr	r3, [r7, #0]
 8038b80:	785b      	ldrb	r3, [r3, #1]
 8038b82:	2b01      	cmp	r3, #1
 8038b84:	d14a      	bne.n	8038c1c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8038b86:	683b      	ldr	r3, [r7, #0]
 8038b88:	781b      	ldrb	r3, [r3, #0]
 8038b8a:	015a      	lsls	r2, r3, #5
 8038b8c:	693b      	ldr	r3, [r7, #16]
 8038b8e:	4413      	add	r3, r2
 8038b90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038b94:	681b      	ldr	r3, [r3, #0]
 8038b96:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8038b9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8038b9e:	f040 8086 	bne.w	8038cae <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8038ba2:	683b      	ldr	r3, [r7, #0]
 8038ba4:	781b      	ldrb	r3, [r3, #0]
 8038ba6:	015a      	lsls	r2, r3, #5
 8038ba8:	693b      	ldr	r3, [r7, #16]
 8038baa:	4413      	add	r3, r2
 8038bac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038bb0:	681b      	ldr	r3, [r3, #0]
 8038bb2:	683a      	ldr	r2, [r7, #0]
 8038bb4:	7812      	ldrb	r2, [r2, #0]
 8038bb6:	0151      	lsls	r1, r2, #5
 8038bb8:	693a      	ldr	r2, [r7, #16]
 8038bba:	440a      	add	r2, r1
 8038bbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8038bc0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8038bc4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8038bc6:	683b      	ldr	r3, [r7, #0]
 8038bc8:	781b      	ldrb	r3, [r3, #0]
 8038bca:	015a      	lsls	r2, r3, #5
 8038bcc:	693b      	ldr	r3, [r7, #16]
 8038bce:	4413      	add	r3, r2
 8038bd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038bd4:	681b      	ldr	r3, [r3, #0]
 8038bd6:	683a      	ldr	r2, [r7, #0]
 8038bd8:	7812      	ldrb	r2, [r2, #0]
 8038bda:	0151      	lsls	r1, r2, #5
 8038bdc:	693a      	ldr	r2, [r7, #16]
 8038bde:	440a      	add	r2, r1
 8038be0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8038be4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8038be8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8038bea:	68fb      	ldr	r3, [r7, #12]
 8038bec:	3301      	adds	r3, #1
 8038bee:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8038bf0:	68fb      	ldr	r3, [r7, #12]
 8038bf2:	f242 7210 	movw	r2, #10000	; 0x2710
 8038bf6:	4293      	cmp	r3, r2
 8038bf8:	d902      	bls.n	8038c00 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8038bfa:	2301      	movs	r3, #1
 8038bfc:	75fb      	strb	r3, [r7, #23]
          break;
 8038bfe:	e056      	b.n	8038cae <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8038c00:	683b      	ldr	r3, [r7, #0]
 8038c02:	781b      	ldrb	r3, [r3, #0]
 8038c04:	015a      	lsls	r2, r3, #5
 8038c06:	693b      	ldr	r3, [r7, #16]
 8038c08:	4413      	add	r3, r2
 8038c0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038c0e:	681b      	ldr	r3, [r3, #0]
 8038c10:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8038c14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8038c18:	d0e7      	beq.n	8038bea <USB_EPStopXfer+0x82>
 8038c1a:	e048      	b.n	8038cae <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8038c1c:	683b      	ldr	r3, [r7, #0]
 8038c1e:	781b      	ldrb	r3, [r3, #0]
 8038c20:	015a      	lsls	r2, r3, #5
 8038c22:	693b      	ldr	r3, [r7, #16]
 8038c24:	4413      	add	r3, r2
 8038c26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038c2a:	681b      	ldr	r3, [r3, #0]
 8038c2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8038c30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8038c34:	d13b      	bne.n	8038cae <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8038c36:	683b      	ldr	r3, [r7, #0]
 8038c38:	781b      	ldrb	r3, [r3, #0]
 8038c3a:	015a      	lsls	r2, r3, #5
 8038c3c:	693b      	ldr	r3, [r7, #16]
 8038c3e:	4413      	add	r3, r2
 8038c40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038c44:	681b      	ldr	r3, [r3, #0]
 8038c46:	683a      	ldr	r2, [r7, #0]
 8038c48:	7812      	ldrb	r2, [r2, #0]
 8038c4a:	0151      	lsls	r1, r2, #5
 8038c4c:	693a      	ldr	r2, [r7, #16]
 8038c4e:	440a      	add	r2, r1
 8038c50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8038c54:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8038c58:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8038c5a:	683b      	ldr	r3, [r7, #0]
 8038c5c:	781b      	ldrb	r3, [r3, #0]
 8038c5e:	015a      	lsls	r2, r3, #5
 8038c60:	693b      	ldr	r3, [r7, #16]
 8038c62:	4413      	add	r3, r2
 8038c64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038c68:	681b      	ldr	r3, [r3, #0]
 8038c6a:	683a      	ldr	r2, [r7, #0]
 8038c6c:	7812      	ldrb	r2, [r2, #0]
 8038c6e:	0151      	lsls	r1, r2, #5
 8038c70:	693a      	ldr	r2, [r7, #16]
 8038c72:	440a      	add	r2, r1
 8038c74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8038c78:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8038c7c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8038c7e:	68fb      	ldr	r3, [r7, #12]
 8038c80:	3301      	adds	r3, #1
 8038c82:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8038c84:	68fb      	ldr	r3, [r7, #12]
 8038c86:	f242 7210 	movw	r2, #10000	; 0x2710
 8038c8a:	4293      	cmp	r3, r2
 8038c8c:	d902      	bls.n	8038c94 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8038c8e:	2301      	movs	r3, #1
 8038c90:	75fb      	strb	r3, [r7, #23]
          break;
 8038c92:	e00c      	b.n	8038cae <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8038c94:	683b      	ldr	r3, [r7, #0]
 8038c96:	781b      	ldrb	r3, [r3, #0]
 8038c98:	015a      	lsls	r2, r3, #5
 8038c9a:	693b      	ldr	r3, [r7, #16]
 8038c9c:	4413      	add	r3, r2
 8038c9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038ca2:	681b      	ldr	r3, [r3, #0]
 8038ca4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8038ca8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8038cac:	d0e7      	beq.n	8038c7e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8038cae:	7dfb      	ldrb	r3, [r7, #23]
}
 8038cb0:	4618      	mov	r0, r3
 8038cb2:	371c      	adds	r7, #28
 8038cb4:	46bd      	mov	sp, r7
 8038cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8038cba:	4770      	bx	lr

08038cbc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8038cbc:	b480      	push	{r7}
 8038cbe:	b089      	sub	sp, #36	; 0x24
 8038cc0:	af00      	add	r7, sp, #0
 8038cc2:	60f8      	str	r0, [r7, #12]
 8038cc4:	60b9      	str	r1, [r7, #8]
 8038cc6:	4611      	mov	r1, r2
 8038cc8:	461a      	mov	r2, r3
 8038cca:	460b      	mov	r3, r1
 8038ccc:	71fb      	strb	r3, [r7, #7]
 8038cce:	4613      	mov	r3, r2
 8038cd0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8038cd2:	68fb      	ldr	r3, [r7, #12]
 8038cd4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8038cd6:	68bb      	ldr	r3, [r7, #8]
 8038cd8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8038cda:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8038cde:	2b00      	cmp	r3, #0
 8038ce0:	d123      	bne.n	8038d2a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8038ce2:	88bb      	ldrh	r3, [r7, #4]
 8038ce4:	3303      	adds	r3, #3
 8038ce6:	089b      	lsrs	r3, r3, #2
 8038ce8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8038cea:	2300      	movs	r3, #0
 8038cec:	61bb      	str	r3, [r7, #24]
 8038cee:	e018      	b.n	8038d22 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8038cf0:	79fb      	ldrb	r3, [r7, #7]
 8038cf2:	031a      	lsls	r2, r3, #12
 8038cf4:	697b      	ldr	r3, [r7, #20]
 8038cf6:	4413      	add	r3, r2
 8038cf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8038cfc:	461a      	mov	r2, r3
 8038cfe:	69fb      	ldr	r3, [r7, #28]
 8038d00:	681b      	ldr	r3, [r3, #0]
 8038d02:	6013      	str	r3, [r2, #0]
      pSrc++;
 8038d04:	69fb      	ldr	r3, [r7, #28]
 8038d06:	3301      	adds	r3, #1
 8038d08:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8038d0a:	69fb      	ldr	r3, [r7, #28]
 8038d0c:	3301      	adds	r3, #1
 8038d0e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8038d10:	69fb      	ldr	r3, [r7, #28]
 8038d12:	3301      	adds	r3, #1
 8038d14:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8038d16:	69fb      	ldr	r3, [r7, #28]
 8038d18:	3301      	adds	r3, #1
 8038d1a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8038d1c:	69bb      	ldr	r3, [r7, #24]
 8038d1e:	3301      	adds	r3, #1
 8038d20:	61bb      	str	r3, [r7, #24]
 8038d22:	69ba      	ldr	r2, [r7, #24]
 8038d24:	693b      	ldr	r3, [r7, #16]
 8038d26:	429a      	cmp	r2, r3
 8038d28:	d3e2      	bcc.n	8038cf0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8038d2a:	2300      	movs	r3, #0
}
 8038d2c:	4618      	mov	r0, r3
 8038d2e:	3724      	adds	r7, #36	; 0x24
 8038d30:	46bd      	mov	sp, r7
 8038d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8038d36:	4770      	bx	lr

08038d38 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8038d38:	b480      	push	{r7}
 8038d3a:	b08b      	sub	sp, #44	; 0x2c
 8038d3c:	af00      	add	r7, sp, #0
 8038d3e:	60f8      	str	r0, [r7, #12]
 8038d40:	60b9      	str	r1, [r7, #8]
 8038d42:	4613      	mov	r3, r2
 8038d44:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8038d46:	68fb      	ldr	r3, [r7, #12]
 8038d48:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8038d4a:	68bb      	ldr	r3, [r7, #8]
 8038d4c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8038d4e:	88fb      	ldrh	r3, [r7, #6]
 8038d50:	089b      	lsrs	r3, r3, #2
 8038d52:	b29b      	uxth	r3, r3
 8038d54:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8038d56:	88fb      	ldrh	r3, [r7, #6]
 8038d58:	f003 0303 	and.w	r3, r3, #3
 8038d5c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8038d5e:	2300      	movs	r3, #0
 8038d60:	623b      	str	r3, [r7, #32]
 8038d62:	e014      	b.n	8038d8e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8038d64:	69bb      	ldr	r3, [r7, #24]
 8038d66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8038d6a:	681a      	ldr	r2, [r3, #0]
 8038d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8038d6e:	601a      	str	r2, [r3, #0]
    pDest++;
 8038d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8038d72:	3301      	adds	r3, #1
 8038d74:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8038d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8038d78:	3301      	adds	r3, #1
 8038d7a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8038d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8038d7e:	3301      	adds	r3, #1
 8038d80:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8038d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8038d84:	3301      	adds	r3, #1
 8038d86:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8038d88:	6a3b      	ldr	r3, [r7, #32]
 8038d8a:	3301      	adds	r3, #1
 8038d8c:	623b      	str	r3, [r7, #32]
 8038d8e:	6a3a      	ldr	r2, [r7, #32]
 8038d90:	697b      	ldr	r3, [r7, #20]
 8038d92:	429a      	cmp	r2, r3
 8038d94:	d3e6      	bcc.n	8038d64 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8038d96:	8bfb      	ldrh	r3, [r7, #30]
 8038d98:	2b00      	cmp	r3, #0
 8038d9a:	d01e      	beq.n	8038dda <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8038d9c:	2300      	movs	r3, #0
 8038d9e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8038da0:	69bb      	ldr	r3, [r7, #24]
 8038da2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8038da6:	461a      	mov	r2, r3
 8038da8:	f107 0310 	add.w	r3, r7, #16
 8038dac:	6812      	ldr	r2, [r2, #0]
 8038dae:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8038db0:	693a      	ldr	r2, [r7, #16]
 8038db2:	6a3b      	ldr	r3, [r7, #32]
 8038db4:	b2db      	uxtb	r3, r3
 8038db6:	00db      	lsls	r3, r3, #3
 8038db8:	fa22 f303 	lsr.w	r3, r2, r3
 8038dbc:	b2da      	uxtb	r2, r3
 8038dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8038dc0:	701a      	strb	r2, [r3, #0]
      i++;
 8038dc2:	6a3b      	ldr	r3, [r7, #32]
 8038dc4:	3301      	adds	r3, #1
 8038dc6:	623b      	str	r3, [r7, #32]
      pDest++;
 8038dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8038dca:	3301      	adds	r3, #1
 8038dcc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8038dce:	8bfb      	ldrh	r3, [r7, #30]
 8038dd0:	3b01      	subs	r3, #1
 8038dd2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8038dd4:	8bfb      	ldrh	r3, [r7, #30]
 8038dd6:	2b00      	cmp	r3, #0
 8038dd8:	d1ea      	bne.n	8038db0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8038dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8038ddc:	4618      	mov	r0, r3
 8038dde:	372c      	adds	r7, #44	; 0x2c
 8038de0:	46bd      	mov	sp, r7
 8038de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8038de6:	4770      	bx	lr

08038de8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8038de8:	b480      	push	{r7}
 8038dea:	b085      	sub	sp, #20
 8038dec:	af00      	add	r7, sp, #0
 8038dee:	6078      	str	r0, [r7, #4]
 8038df0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8038df2:	687b      	ldr	r3, [r7, #4]
 8038df4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8038df6:	683b      	ldr	r3, [r7, #0]
 8038df8:	781b      	ldrb	r3, [r3, #0]
 8038dfa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8038dfc:	683b      	ldr	r3, [r7, #0]
 8038dfe:	785b      	ldrb	r3, [r3, #1]
 8038e00:	2b01      	cmp	r3, #1
 8038e02:	d12c      	bne.n	8038e5e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8038e04:	68bb      	ldr	r3, [r7, #8]
 8038e06:	015a      	lsls	r2, r3, #5
 8038e08:	68fb      	ldr	r3, [r7, #12]
 8038e0a:	4413      	add	r3, r2
 8038e0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038e10:	681b      	ldr	r3, [r3, #0]
 8038e12:	2b00      	cmp	r3, #0
 8038e14:	db12      	blt.n	8038e3c <USB_EPSetStall+0x54>
 8038e16:	68bb      	ldr	r3, [r7, #8]
 8038e18:	2b00      	cmp	r3, #0
 8038e1a:	d00f      	beq.n	8038e3c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8038e1c:	68bb      	ldr	r3, [r7, #8]
 8038e1e:	015a      	lsls	r2, r3, #5
 8038e20:	68fb      	ldr	r3, [r7, #12]
 8038e22:	4413      	add	r3, r2
 8038e24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038e28:	681b      	ldr	r3, [r3, #0]
 8038e2a:	68ba      	ldr	r2, [r7, #8]
 8038e2c:	0151      	lsls	r1, r2, #5
 8038e2e:	68fa      	ldr	r2, [r7, #12]
 8038e30:	440a      	add	r2, r1
 8038e32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8038e36:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8038e3a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8038e3c:	68bb      	ldr	r3, [r7, #8]
 8038e3e:	015a      	lsls	r2, r3, #5
 8038e40:	68fb      	ldr	r3, [r7, #12]
 8038e42:	4413      	add	r3, r2
 8038e44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038e48:	681b      	ldr	r3, [r3, #0]
 8038e4a:	68ba      	ldr	r2, [r7, #8]
 8038e4c:	0151      	lsls	r1, r2, #5
 8038e4e:	68fa      	ldr	r2, [r7, #12]
 8038e50:	440a      	add	r2, r1
 8038e52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8038e56:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8038e5a:	6013      	str	r3, [r2, #0]
 8038e5c:	e02b      	b.n	8038eb6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8038e5e:	68bb      	ldr	r3, [r7, #8]
 8038e60:	015a      	lsls	r2, r3, #5
 8038e62:	68fb      	ldr	r3, [r7, #12]
 8038e64:	4413      	add	r3, r2
 8038e66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038e6a:	681b      	ldr	r3, [r3, #0]
 8038e6c:	2b00      	cmp	r3, #0
 8038e6e:	db12      	blt.n	8038e96 <USB_EPSetStall+0xae>
 8038e70:	68bb      	ldr	r3, [r7, #8]
 8038e72:	2b00      	cmp	r3, #0
 8038e74:	d00f      	beq.n	8038e96 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8038e76:	68bb      	ldr	r3, [r7, #8]
 8038e78:	015a      	lsls	r2, r3, #5
 8038e7a:	68fb      	ldr	r3, [r7, #12]
 8038e7c:	4413      	add	r3, r2
 8038e7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038e82:	681b      	ldr	r3, [r3, #0]
 8038e84:	68ba      	ldr	r2, [r7, #8]
 8038e86:	0151      	lsls	r1, r2, #5
 8038e88:	68fa      	ldr	r2, [r7, #12]
 8038e8a:	440a      	add	r2, r1
 8038e8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8038e90:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8038e94:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8038e96:	68bb      	ldr	r3, [r7, #8]
 8038e98:	015a      	lsls	r2, r3, #5
 8038e9a:	68fb      	ldr	r3, [r7, #12]
 8038e9c:	4413      	add	r3, r2
 8038e9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038ea2:	681b      	ldr	r3, [r3, #0]
 8038ea4:	68ba      	ldr	r2, [r7, #8]
 8038ea6:	0151      	lsls	r1, r2, #5
 8038ea8:	68fa      	ldr	r2, [r7, #12]
 8038eaa:	440a      	add	r2, r1
 8038eac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8038eb0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8038eb4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8038eb6:	2300      	movs	r3, #0
}
 8038eb8:	4618      	mov	r0, r3
 8038eba:	3714      	adds	r7, #20
 8038ebc:	46bd      	mov	sp, r7
 8038ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8038ec2:	4770      	bx	lr

08038ec4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8038ec4:	b480      	push	{r7}
 8038ec6:	b085      	sub	sp, #20
 8038ec8:	af00      	add	r7, sp, #0
 8038eca:	6078      	str	r0, [r7, #4]
 8038ecc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8038ece:	687b      	ldr	r3, [r7, #4]
 8038ed0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8038ed2:	683b      	ldr	r3, [r7, #0]
 8038ed4:	781b      	ldrb	r3, [r3, #0]
 8038ed6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8038ed8:	683b      	ldr	r3, [r7, #0]
 8038eda:	785b      	ldrb	r3, [r3, #1]
 8038edc:	2b01      	cmp	r3, #1
 8038ede:	d128      	bne.n	8038f32 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8038ee0:	68bb      	ldr	r3, [r7, #8]
 8038ee2:	015a      	lsls	r2, r3, #5
 8038ee4:	68fb      	ldr	r3, [r7, #12]
 8038ee6:	4413      	add	r3, r2
 8038ee8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038eec:	681b      	ldr	r3, [r3, #0]
 8038eee:	68ba      	ldr	r2, [r7, #8]
 8038ef0:	0151      	lsls	r1, r2, #5
 8038ef2:	68fa      	ldr	r2, [r7, #12]
 8038ef4:	440a      	add	r2, r1
 8038ef6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8038efa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8038efe:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8038f00:	683b      	ldr	r3, [r7, #0]
 8038f02:	791b      	ldrb	r3, [r3, #4]
 8038f04:	2b03      	cmp	r3, #3
 8038f06:	d003      	beq.n	8038f10 <USB_EPClearStall+0x4c>
 8038f08:	683b      	ldr	r3, [r7, #0]
 8038f0a:	791b      	ldrb	r3, [r3, #4]
 8038f0c:	2b02      	cmp	r3, #2
 8038f0e:	d138      	bne.n	8038f82 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8038f10:	68bb      	ldr	r3, [r7, #8]
 8038f12:	015a      	lsls	r2, r3, #5
 8038f14:	68fb      	ldr	r3, [r7, #12]
 8038f16:	4413      	add	r3, r2
 8038f18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038f1c:	681b      	ldr	r3, [r3, #0]
 8038f1e:	68ba      	ldr	r2, [r7, #8]
 8038f20:	0151      	lsls	r1, r2, #5
 8038f22:	68fa      	ldr	r2, [r7, #12]
 8038f24:	440a      	add	r2, r1
 8038f26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8038f2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8038f2e:	6013      	str	r3, [r2, #0]
 8038f30:	e027      	b.n	8038f82 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8038f32:	68bb      	ldr	r3, [r7, #8]
 8038f34:	015a      	lsls	r2, r3, #5
 8038f36:	68fb      	ldr	r3, [r7, #12]
 8038f38:	4413      	add	r3, r2
 8038f3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038f3e:	681b      	ldr	r3, [r3, #0]
 8038f40:	68ba      	ldr	r2, [r7, #8]
 8038f42:	0151      	lsls	r1, r2, #5
 8038f44:	68fa      	ldr	r2, [r7, #12]
 8038f46:	440a      	add	r2, r1
 8038f48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8038f4c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8038f50:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8038f52:	683b      	ldr	r3, [r7, #0]
 8038f54:	791b      	ldrb	r3, [r3, #4]
 8038f56:	2b03      	cmp	r3, #3
 8038f58:	d003      	beq.n	8038f62 <USB_EPClearStall+0x9e>
 8038f5a:	683b      	ldr	r3, [r7, #0]
 8038f5c:	791b      	ldrb	r3, [r3, #4]
 8038f5e:	2b02      	cmp	r3, #2
 8038f60:	d10f      	bne.n	8038f82 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8038f62:	68bb      	ldr	r3, [r7, #8]
 8038f64:	015a      	lsls	r2, r3, #5
 8038f66:	68fb      	ldr	r3, [r7, #12]
 8038f68:	4413      	add	r3, r2
 8038f6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038f6e:	681b      	ldr	r3, [r3, #0]
 8038f70:	68ba      	ldr	r2, [r7, #8]
 8038f72:	0151      	lsls	r1, r2, #5
 8038f74:	68fa      	ldr	r2, [r7, #12]
 8038f76:	440a      	add	r2, r1
 8038f78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8038f7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8038f80:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8038f82:	2300      	movs	r3, #0
}
 8038f84:	4618      	mov	r0, r3
 8038f86:	3714      	adds	r7, #20
 8038f88:	46bd      	mov	sp, r7
 8038f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8038f8e:	4770      	bx	lr

08038f90 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8038f90:	b480      	push	{r7}
 8038f92:	b085      	sub	sp, #20
 8038f94:	af00      	add	r7, sp, #0
 8038f96:	6078      	str	r0, [r7, #4]
 8038f98:	460b      	mov	r3, r1
 8038f9a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8038f9c:	687b      	ldr	r3, [r7, #4]
 8038f9e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8038fa0:	68fb      	ldr	r3, [r7, #12]
 8038fa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8038fa6:	681b      	ldr	r3, [r3, #0]
 8038fa8:	68fa      	ldr	r2, [r7, #12]
 8038faa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8038fae:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8038fb2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8038fb4:	68fb      	ldr	r3, [r7, #12]
 8038fb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8038fba:	681a      	ldr	r2, [r3, #0]
 8038fbc:	78fb      	ldrb	r3, [r7, #3]
 8038fbe:	011b      	lsls	r3, r3, #4
 8038fc0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8038fc4:	68f9      	ldr	r1, [r7, #12]
 8038fc6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8038fca:	4313      	orrs	r3, r2
 8038fcc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8038fce:	2300      	movs	r3, #0
}
 8038fd0:	4618      	mov	r0, r3
 8038fd2:	3714      	adds	r7, #20
 8038fd4:	46bd      	mov	sp, r7
 8038fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8038fda:	4770      	bx	lr

08038fdc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8038fdc:	b480      	push	{r7}
 8038fde:	b085      	sub	sp, #20
 8038fe0:	af00      	add	r7, sp, #0
 8038fe2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8038fe4:	687b      	ldr	r3, [r7, #4]
 8038fe6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8038fe8:	68fb      	ldr	r3, [r7, #12]
 8038fea:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8038fee:	681b      	ldr	r3, [r3, #0]
 8038ff0:	68fa      	ldr	r2, [r7, #12]
 8038ff2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8038ff6:	f023 0303 	bic.w	r3, r3, #3
 8038ffa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8038ffc:	68fb      	ldr	r3, [r7, #12]
 8038ffe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8039002:	685b      	ldr	r3, [r3, #4]
 8039004:	68fa      	ldr	r2, [r7, #12]
 8039006:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 803900a:	f023 0302 	bic.w	r3, r3, #2
 803900e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8039010:	2300      	movs	r3, #0
}
 8039012:	4618      	mov	r0, r3
 8039014:	3714      	adds	r7, #20
 8039016:	46bd      	mov	sp, r7
 8039018:	f85d 7b04 	ldr.w	r7, [sp], #4
 803901c:	4770      	bx	lr

0803901e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 803901e:	b480      	push	{r7}
 8039020:	b085      	sub	sp, #20
 8039022:	af00      	add	r7, sp, #0
 8039024:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8039026:	687b      	ldr	r3, [r7, #4]
 8039028:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 803902a:	68fb      	ldr	r3, [r7, #12]
 803902c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8039030:	681b      	ldr	r3, [r3, #0]
 8039032:	68fa      	ldr	r2, [r7, #12]
 8039034:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8039038:	f023 0303 	bic.w	r3, r3, #3
 803903c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 803903e:	68fb      	ldr	r3, [r7, #12]
 8039040:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8039044:	685b      	ldr	r3, [r3, #4]
 8039046:	68fa      	ldr	r2, [r7, #12]
 8039048:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 803904c:	f043 0302 	orr.w	r3, r3, #2
 8039050:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8039052:	2300      	movs	r3, #0
}
 8039054:	4618      	mov	r0, r3
 8039056:	3714      	adds	r7, #20
 8039058:	46bd      	mov	sp, r7
 803905a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803905e:	4770      	bx	lr

08039060 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8039060:	b480      	push	{r7}
 8039062:	b085      	sub	sp, #20
 8039064:	af00      	add	r7, sp, #0
 8039066:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8039068:	687b      	ldr	r3, [r7, #4]
 803906a:	695b      	ldr	r3, [r3, #20]
 803906c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 803906e:	687b      	ldr	r3, [r7, #4]
 8039070:	699b      	ldr	r3, [r3, #24]
 8039072:	68fa      	ldr	r2, [r7, #12]
 8039074:	4013      	ands	r3, r2
 8039076:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8039078:	68fb      	ldr	r3, [r7, #12]
}
 803907a:	4618      	mov	r0, r3
 803907c:	3714      	adds	r7, #20
 803907e:	46bd      	mov	sp, r7
 8039080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039084:	4770      	bx	lr

08039086 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8039086:	b480      	push	{r7}
 8039088:	b085      	sub	sp, #20
 803908a:	af00      	add	r7, sp, #0
 803908c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803908e:	687b      	ldr	r3, [r7, #4]
 8039090:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8039092:	68fb      	ldr	r3, [r7, #12]
 8039094:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8039098:	699b      	ldr	r3, [r3, #24]
 803909a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 803909c:	68fb      	ldr	r3, [r7, #12]
 803909e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80390a2:	69db      	ldr	r3, [r3, #28]
 80390a4:	68ba      	ldr	r2, [r7, #8]
 80390a6:	4013      	ands	r3, r2
 80390a8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80390aa:	68bb      	ldr	r3, [r7, #8]
 80390ac:	0c1b      	lsrs	r3, r3, #16
}
 80390ae:	4618      	mov	r0, r3
 80390b0:	3714      	adds	r7, #20
 80390b2:	46bd      	mov	sp, r7
 80390b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80390b8:	4770      	bx	lr

080390ba <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80390ba:	b480      	push	{r7}
 80390bc:	b085      	sub	sp, #20
 80390be:	af00      	add	r7, sp, #0
 80390c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80390c2:	687b      	ldr	r3, [r7, #4]
 80390c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80390c6:	68fb      	ldr	r3, [r7, #12]
 80390c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80390cc:	699b      	ldr	r3, [r3, #24]
 80390ce:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80390d0:	68fb      	ldr	r3, [r7, #12]
 80390d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80390d6:	69db      	ldr	r3, [r3, #28]
 80390d8:	68ba      	ldr	r2, [r7, #8]
 80390da:	4013      	ands	r3, r2
 80390dc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80390de:	68bb      	ldr	r3, [r7, #8]
 80390e0:	b29b      	uxth	r3, r3
}
 80390e2:	4618      	mov	r0, r3
 80390e4:	3714      	adds	r7, #20
 80390e6:	46bd      	mov	sp, r7
 80390e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80390ec:	4770      	bx	lr

080390ee <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80390ee:	b480      	push	{r7}
 80390f0:	b085      	sub	sp, #20
 80390f2:	af00      	add	r7, sp, #0
 80390f4:	6078      	str	r0, [r7, #4]
 80390f6:	460b      	mov	r3, r1
 80390f8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80390fa:	687b      	ldr	r3, [r7, #4]
 80390fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80390fe:	78fb      	ldrb	r3, [r7, #3]
 8039100:	015a      	lsls	r2, r3, #5
 8039102:	68fb      	ldr	r3, [r7, #12]
 8039104:	4413      	add	r3, r2
 8039106:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803910a:	689b      	ldr	r3, [r3, #8]
 803910c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 803910e:	68fb      	ldr	r3, [r7, #12]
 8039110:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8039114:	695b      	ldr	r3, [r3, #20]
 8039116:	68ba      	ldr	r2, [r7, #8]
 8039118:	4013      	ands	r3, r2
 803911a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 803911c:	68bb      	ldr	r3, [r7, #8]
}
 803911e:	4618      	mov	r0, r3
 8039120:	3714      	adds	r7, #20
 8039122:	46bd      	mov	sp, r7
 8039124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039128:	4770      	bx	lr

0803912a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 803912a:	b480      	push	{r7}
 803912c:	b087      	sub	sp, #28
 803912e:	af00      	add	r7, sp, #0
 8039130:	6078      	str	r0, [r7, #4]
 8039132:	460b      	mov	r3, r1
 8039134:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8039136:	687b      	ldr	r3, [r7, #4]
 8039138:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 803913a:	697b      	ldr	r3, [r7, #20]
 803913c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8039140:	691b      	ldr	r3, [r3, #16]
 8039142:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8039144:	697b      	ldr	r3, [r7, #20]
 8039146:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803914a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 803914c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 803914e:	78fb      	ldrb	r3, [r7, #3]
 8039150:	f003 030f 	and.w	r3, r3, #15
 8039154:	68fa      	ldr	r2, [r7, #12]
 8039156:	fa22 f303 	lsr.w	r3, r2, r3
 803915a:	01db      	lsls	r3, r3, #7
 803915c:	b2db      	uxtb	r3, r3
 803915e:	693a      	ldr	r2, [r7, #16]
 8039160:	4313      	orrs	r3, r2
 8039162:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8039164:	78fb      	ldrb	r3, [r7, #3]
 8039166:	015a      	lsls	r2, r3, #5
 8039168:	697b      	ldr	r3, [r7, #20]
 803916a:	4413      	add	r3, r2
 803916c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8039170:	689b      	ldr	r3, [r3, #8]
 8039172:	693a      	ldr	r2, [r7, #16]
 8039174:	4013      	ands	r3, r2
 8039176:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8039178:	68bb      	ldr	r3, [r7, #8]
}
 803917a:	4618      	mov	r0, r3
 803917c:	371c      	adds	r7, #28
 803917e:	46bd      	mov	sp, r7
 8039180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039184:	4770      	bx	lr

08039186 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8039186:	b480      	push	{r7}
 8039188:	b083      	sub	sp, #12
 803918a:	af00      	add	r7, sp, #0
 803918c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 803918e:	687b      	ldr	r3, [r7, #4]
 8039190:	695b      	ldr	r3, [r3, #20]
 8039192:	f003 0301 	and.w	r3, r3, #1
}
 8039196:	4618      	mov	r0, r3
 8039198:	370c      	adds	r7, #12
 803919a:	46bd      	mov	sp, r7
 803919c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80391a0:	4770      	bx	lr
	...

080391a4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80391a4:	b480      	push	{r7}
 80391a6:	b085      	sub	sp, #20
 80391a8:	af00      	add	r7, sp, #0
 80391aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80391ac:	687b      	ldr	r3, [r7, #4]
 80391ae:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80391b0:	68fb      	ldr	r3, [r7, #12]
 80391b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80391b6:	681a      	ldr	r2, [r3, #0]
 80391b8:	68fb      	ldr	r3, [r7, #12]
 80391ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80391be:	4619      	mov	r1, r3
 80391c0:	4b09      	ldr	r3, [pc, #36]	; (80391e8 <USB_ActivateSetup+0x44>)
 80391c2:	4013      	ands	r3, r2
 80391c4:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80391c6:	68fb      	ldr	r3, [r7, #12]
 80391c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80391cc:	685b      	ldr	r3, [r3, #4]
 80391ce:	68fa      	ldr	r2, [r7, #12]
 80391d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80391d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80391d8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80391da:	2300      	movs	r3, #0
}
 80391dc:	4618      	mov	r0, r3
 80391de:	3714      	adds	r7, #20
 80391e0:	46bd      	mov	sp, r7
 80391e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80391e6:	4770      	bx	lr
 80391e8:	fffff800 	.word	0xfffff800

080391ec <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80391ec:	b480      	push	{r7}
 80391ee:	b087      	sub	sp, #28
 80391f0:	af00      	add	r7, sp, #0
 80391f2:	60f8      	str	r0, [r7, #12]
 80391f4:	460b      	mov	r3, r1
 80391f6:	607a      	str	r2, [r7, #4]
 80391f8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80391fa:	68fb      	ldr	r3, [r7, #12]
 80391fc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80391fe:	68fb      	ldr	r3, [r7, #12]
 8039200:	333c      	adds	r3, #60	; 0x3c
 8039202:	3304      	adds	r3, #4
 8039204:	681b      	ldr	r3, [r3, #0]
 8039206:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8039208:	693b      	ldr	r3, [r7, #16]
 803920a:	4a26      	ldr	r2, [pc, #152]	; (80392a4 <USB_EP0_OutStart+0xb8>)
 803920c:	4293      	cmp	r3, r2
 803920e:	d90a      	bls.n	8039226 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8039210:	697b      	ldr	r3, [r7, #20]
 8039212:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8039216:	681b      	ldr	r3, [r3, #0]
 8039218:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 803921c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8039220:	d101      	bne.n	8039226 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8039222:	2300      	movs	r3, #0
 8039224:	e037      	b.n	8039296 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8039226:	697b      	ldr	r3, [r7, #20]
 8039228:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803922c:	461a      	mov	r2, r3
 803922e:	2300      	movs	r3, #0
 8039230:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8039232:	697b      	ldr	r3, [r7, #20]
 8039234:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8039238:	691b      	ldr	r3, [r3, #16]
 803923a:	697a      	ldr	r2, [r7, #20]
 803923c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8039240:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8039244:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8039246:	697b      	ldr	r3, [r7, #20]
 8039248:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803924c:	691b      	ldr	r3, [r3, #16]
 803924e:	697a      	ldr	r2, [r7, #20]
 8039250:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8039254:	f043 0318 	orr.w	r3, r3, #24
 8039258:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 803925a:	697b      	ldr	r3, [r7, #20]
 803925c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8039260:	691b      	ldr	r3, [r3, #16]
 8039262:	697a      	ldr	r2, [r7, #20]
 8039264:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8039268:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 803926c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 803926e:	7afb      	ldrb	r3, [r7, #11]
 8039270:	2b01      	cmp	r3, #1
 8039272:	d10f      	bne.n	8039294 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8039274:	697b      	ldr	r3, [r7, #20]
 8039276:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803927a:	461a      	mov	r2, r3
 803927c:	687b      	ldr	r3, [r7, #4]
 803927e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8039280:	697b      	ldr	r3, [r7, #20]
 8039282:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8039286:	681b      	ldr	r3, [r3, #0]
 8039288:	697a      	ldr	r2, [r7, #20]
 803928a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803928e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8039292:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8039294:	2300      	movs	r3, #0
}
 8039296:	4618      	mov	r0, r3
 8039298:	371c      	adds	r7, #28
 803929a:	46bd      	mov	sp, r7
 803929c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80392a0:	4770      	bx	lr
 80392a2:	bf00      	nop
 80392a4:	4f54300a 	.word	0x4f54300a

080392a8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80392a8:	b480      	push	{r7}
 80392aa:	b085      	sub	sp, #20
 80392ac:	af00      	add	r7, sp, #0
 80392ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80392b0:	2300      	movs	r3, #0
 80392b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80392b4:	68fb      	ldr	r3, [r7, #12]
 80392b6:	3301      	adds	r3, #1
 80392b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80392ba:	68fb      	ldr	r3, [r7, #12]
 80392bc:	4a13      	ldr	r2, [pc, #76]	; (803930c <USB_CoreReset+0x64>)
 80392be:	4293      	cmp	r3, r2
 80392c0:	d901      	bls.n	80392c6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80392c2:	2303      	movs	r3, #3
 80392c4:	e01b      	b.n	80392fe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80392c6:	687b      	ldr	r3, [r7, #4]
 80392c8:	691b      	ldr	r3, [r3, #16]
 80392ca:	2b00      	cmp	r3, #0
 80392cc:	daf2      	bge.n	80392b4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80392ce:	2300      	movs	r3, #0
 80392d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80392d2:	687b      	ldr	r3, [r7, #4]
 80392d4:	691b      	ldr	r3, [r3, #16]
 80392d6:	f043 0201 	orr.w	r2, r3, #1
 80392da:	687b      	ldr	r3, [r7, #4]
 80392dc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80392de:	68fb      	ldr	r3, [r7, #12]
 80392e0:	3301      	adds	r3, #1
 80392e2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80392e4:	68fb      	ldr	r3, [r7, #12]
 80392e6:	4a09      	ldr	r2, [pc, #36]	; (803930c <USB_CoreReset+0x64>)
 80392e8:	4293      	cmp	r3, r2
 80392ea:	d901      	bls.n	80392f0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80392ec:	2303      	movs	r3, #3
 80392ee:	e006      	b.n	80392fe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80392f0:	687b      	ldr	r3, [r7, #4]
 80392f2:	691b      	ldr	r3, [r3, #16]
 80392f4:	f003 0301 	and.w	r3, r3, #1
 80392f8:	2b01      	cmp	r3, #1
 80392fa:	d0f0      	beq.n	80392de <USB_CoreReset+0x36>

  return HAL_OK;
 80392fc:	2300      	movs	r3, #0
}
 80392fe:	4618      	mov	r0, r3
 8039300:	3714      	adds	r7, #20
 8039302:	46bd      	mov	sp, r7
 8039304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039308:	4770      	bx	lr
 803930a:	bf00      	nop
 803930c:	00030d40 	.word	0x00030d40

08039310 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8039310:	b580      	push	{r7, lr}
 8039312:	b084      	sub	sp, #16
 8039314:	af00      	add	r7, sp, #0
 8039316:	6078      	str	r0, [r7, #4]
 8039318:	460b      	mov	r3, r1
 803931a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 803931c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8039320:	f002 fc54 	bl	803bbcc <USBD_static_malloc>
 8039324:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8039326:	68fb      	ldr	r3, [r7, #12]
 8039328:	2b00      	cmp	r3, #0
 803932a:	d109      	bne.n	8039340 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 803932c:	687b      	ldr	r3, [r7, #4]
 803932e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8039332:	687b      	ldr	r3, [r7, #4]
 8039334:	32b0      	adds	r2, #176	; 0xb0
 8039336:	2100      	movs	r1, #0
 8039338:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 803933c:	2302      	movs	r3, #2
 803933e:	e0d4      	b.n	80394ea <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8039340:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8039344:	2100      	movs	r1, #0
 8039346:	68f8      	ldr	r0, [r7, #12]
 8039348:	f002 fd42 	bl	803bdd0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 803934c:	687b      	ldr	r3, [r7, #4]
 803934e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8039352:	687b      	ldr	r3, [r7, #4]
 8039354:	32b0      	adds	r2, #176	; 0xb0
 8039356:	68f9      	ldr	r1, [r7, #12]
 8039358:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 803935c:	687b      	ldr	r3, [r7, #4]
 803935e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8039362:	687b      	ldr	r3, [r7, #4]
 8039364:	32b0      	adds	r2, #176	; 0xb0
 8039366:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 803936a:	687b      	ldr	r3, [r7, #4]
 803936c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8039370:	687b      	ldr	r3, [r7, #4]
 8039372:	7c1b      	ldrb	r3, [r3, #16]
 8039374:	2b00      	cmp	r3, #0
 8039376:	d138      	bne.n	80393ea <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8039378:	4b5e      	ldr	r3, [pc, #376]	; (80394f4 <USBD_CDC_Init+0x1e4>)
 803937a:	7819      	ldrb	r1, [r3, #0]
 803937c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8039380:	2202      	movs	r2, #2
 8039382:	6878      	ldr	r0, [r7, #4]
 8039384:	f002 faff 	bl	803b986 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8039388:	4b5a      	ldr	r3, [pc, #360]	; (80394f4 <USBD_CDC_Init+0x1e4>)
 803938a:	781b      	ldrb	r3, [r3, #0]
 803938c:	f003 020f 	and.w	r2, r3, #15
 8039390:	6879      	ldr	r1, [r7, #4]
 8039392:	4613      	mov	r3, r2
 8039394:	009b      	lsls	r3, r3, #2
 8039396:	4413      	add	r3, r2
 8039398:	009b      	lsls	r3, r3, #2
 803939a:	440b      	add	r3, r1
 803939c:	3324      	adds	r3, #36	; 0x24
 803939e:	2201      	movs	r2, #1
 80393a0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80393a2:	4b55      	ldr	r3, [pc, #340]	; (80394f8 <USBD_CDC_Init+0x1e8>)
 80393a4:	7819      	ldrb	r1, [r3, #0]
 80393a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80393aa:	2202      	movs	r2, #2
 80393ac:	6878      	ldr	r0, [r7, #4]
 80393ae:	f002 faea 	bl	803b986 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80393b2:	4b51      	ldr	r3, [pc, #324]	; (80394f8 <USBD_CDC_Init+0x1e8>)
 80393b4:	781b      	ldrb	r3, [r3, #0]
 80393b6:	f003 020f 	and.w	r2, r3, #15
 80393ba:	6879      	ldr	r1, [r7, #4]
 80393bc:	4613      	mov	r3, r2
 80393be:	009b      	lsls	r3, r3, #2
 80393c0:	4413      	add	r3, r2
 80393c2:	009b      	lsls	r3, r3, #2
 80393c4:	440b      	add	r3, r1
 80393c6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80393ca:	2201      	movs	r2, #1
 80393cc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80393ce:	4b4b      	ldr	r3, [pc, #300]	; (80394fc <USBD_CDC_Init+0x1ec>)
 80393d0:	781b      	ldrb	r3, [r3, #0]
 80393d2:	f003 020f 	and.w	r2, r3, #15
 80393d6:	6879      	ldr	r1, [r7, #4]
 80393d8:	4613      	mov	r3, r2
 80393da:	009b      	lsls	r3, r3, #2
 80393dc:	4413      	add	r3, r2
 80393de:	009b      	lsls	r3, r3, #2
 80393e0:	440b      	add	r3, r1
 80393e2:	3326      	adds	r3, #38	; 0x26
 80393e4:	2210      	movs	r2, #16
 80393e6:	801a      	strh	r2, [r3, #0]
 80393e8:	e035      	b.n	8039456 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80393ea:	4b42      	ldr	r3, [pc, #264]	; (80394f4 <USBD_CDC_Init+0x1e4>)
 80393ec:	7819      	ldrb	r1, [r3, #0]
 80393ee:	2340      	movs	r3, #64	; 0x40
 80393f0:	2202      	movs	r2, #2
 80393f2:	6878      	ldr	r0, [r7, #4]
 80393f4:	f002 fac7 	bl	803b986 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80393f8:	4b3e      	ldr	r3, [pc, #248]	; (80394f4 <USBD_CDC_Init+0x1e4>)
 80393fa:	781b      	ldrb	r3, [r3, #0]
 80393fc:	f003 020f 	and.w	r2, r3, #15
 8039400:	6879      	ldr	r1, [r7, #4]
 8039402:	4613      	mov	r3, r2
 8039404:	009b      	lsls	r3, r3, #2
 8039406:	4413      	add	r3, r2
 8039408:	009b      	lsls	r3, r3, #2
 803940a:	440b      	add	r3, r1
 803940c:	3324      	adds	r3, #36	; 0x24
 803940e:	2201      	movs	r2, #1
 8039410:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8039412:	4b39      	ldr	r3, [pc, #228]	; (80394f8 <USBD_CDC_Init+0x1e8>)
 8039414:	7819      	ldrb	r1, [r3, #0]
 8039416:	2340      	movs	r3, #64	; 0x40
 8039418:	2202      	movs	r2, #2
 803941a:	6878      	ldr	r0, [r7, #4]
 803941c:	f002 fab3 	bl	803b986 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8039420:	4b35      	ldr	r3, [pc, #212]	; (80394f8 <USBD_CDC_Init+0x1e8>)
 8039422:	781b      	ldrb	r3, [r3, #0]
 8039424:	f003 020f 	and.w	r2, r3, #15
 8039428:	6879      	ldr	r1, [r7, #4]
 803942a:	4613      	mov	r3, r2
 803942c:	009b      	lsls	r3, r3, #2
 803942e:	4413      	add	r3, r2
 8039430:	009b      	lsls	r3, r3, #2
 8039432:	440b      	add	r3, r1
 8039434:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8039438:	2201      	movs	r2, #1
 803943a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 803943c:	4b2f      	ldr	r3, [pc, #188]	; (80394fc <USBD_CDC_Init+0x1ec>)
 803943e:	781b      	ldrb	r3, [r3, #0]
 8039440:	f003 020f 	and.w	r2, r3, #15
 8039444:	6879      	ldr	r1, [r7, #4]
 8039446:	4613      	mov	r3, r2
 8039448:	009b      	lsls	r3, r3, #2
 803944a:	4413      	add	r3, r2
 803944c:	009b      	lsls	r3, r3, #2
 803944e:	440b      	add	r3, r1
 8039450:	3326      	adds	r3, #38	; 0x26
 8039452:	2210      	movs	r2, #16
 8039454:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8039456:	4b29      	ldr	r3, [pc, #164]	; (80394fc <USBD_CDC_Init+0x1ec>)
 8039458:	7819      	ldrb	r1, [r3, #0]
 803945a:	2308      	movs	r3, #8
 803945c:	2203      	movs	r2, #3
 803945e:	6878      	ldr	r0, [r7, #4]
 8039460:	f002 fa91 	bl	803b986 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8039464:	4b25      	ldr	r3, [pc, #148]	; (80394fc <USBD_CDC_Init+0x1ec>)
 8039466:	781b      	ldrb	r3, [r3, #0]
 8039468:	f003 020f 	and.w	r2, r3, #15
 803946c:	6879      	ldr	r1, [r7, #4]
 803946e:	4613      	mov	r3, r2
 8039470:	009b      	lsls	r3, r3, #2
 8039472:	4413      	add	r3, r2
 8039474:	009b      	lsls	r3, r3, #2
 8039476:	440b      	add	r3, r1
 8039478:	3324      	adds	r3, #36	; 0x24
 803947a:	2201      	movs	r2, #1
 803947c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 803947e:	68fb      	ldr	r3, [r7, #12]
 8039480:	2200      	movs	r2, #0
 8039482:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8039486:	687b      	ldr	r3, [r7, #4]
 8039488:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 803948c:	687a      	ldr	r2, [r7, #4]
 803948e:	33b0      	adds	r3, #176	; 0xb0
 8039490:	009b      	lsls	r3, r3, #2
 8039492:	4413      	add	r3, r2
 8039494:	685b      	ldr	r3, [r3, #4]
 8039496:	681b      	ldr	r3, [r3, #0]
 8039498:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 803949a:	68fb      	ldr	r3, [r7, #12]
 803949c:	2200      	movs	r2, #0
 803949e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80394a2:	68fb      	ldr	r3, [r7, #12]
 80394a4:	2200      	movs	r2, #0
 80394a6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80394aa:	68fb      	ldr	r3, [r7, #12]
 80394ac:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80394b0:	2b00      	cmp	r3, #0
 80394b2:	d101      	bne.n	80394b8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80394b4:	2302      	movs	r3, #2
 80394b6:	e018      	b.n	80394ea <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80394b8:	687b      	ldr	r3, [r7, #4]
 80394ba:	7c1b      	ldrb	r3, [r3, #16]
 80394bc:	2b00      	cmp	r3, #0
 80394be:	d10a      	bne.n	80394d6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80394c0:	4b0d      	ldr	r3, [pc, #52]	; (80394f8 <USBD_CDC_Init+0x1e8>)
 80394c2:	7819      	ldrb	r1, [r3, #0]
 80394c4:	68fb      	ldr	r3, [r7, #12]
 80394c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80394ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80394ce:	6878      	ldr	r0, [r7, #4]
 80394d0:	f002 fb48 	bl	803bb64 <USBD_LL_PrepareReceive>
 80394d4:	e008      	b.n	80394e8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80394d6:	4b08      	ldr	r3, [pc, #32]	; (80394f8 <USBD_CDC_Init+0x1e8>)
 80394d8:	7819      	ldrb	r1, [r3, #0]
 80394da:	68fb      	ldr	r3, [r7, #12]
 80394dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80394e0:	2340      	movs	r3, #64	; 0x40
 80394e2:	6878      	ldr	r0, [r7, #4]
 80394e4:	f002 fb3e 	bl	803bb64 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80394e8:	2300      	movs	r3, #0
}
 80394ea:	4618      	mov	r0, r3
 80394ec:	3710      	adds	r7, #16
 80394ee:	46bd      	mov	sp, r7
 80394f0:	bd80      	pop	{r7, pc}
 80394f2:	bf00      	nop
 80394f4:	2400009b 	.word	0x2400009b
 80394f8:	2400009c 	.word	0x2400009c
 80394fc:	2400009d 	.word	0x2400009d

08039500 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8039500:	b580      	push	{r7, lr}
 8039502:	b082      	sub	sp, #8
 8039504:	af00      	add	r7, sp, #0
 8039506:	6078      	str	r0, [r7, #4]
 8039508:	460b      	mov	r3, r1
 803950a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 803950c:	4b3a      	ldr	r3, [pc, #232]	; (80395f8 <USBD_CDC_DeInit+0xf8>)
 803950e:	781b      	ldrb	r3, [r3, #0]
 8039510:	4619      	mov	r1, r3
 8039512:	6878      	ldr	r0, [r7, #4]
 8039514:	f002 fa5d 	bl	803b9d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8039518:	4b37      	ldr	r3, [pc, #220]	; (80395f8 <USBD_CDC_DeInit+0xf8>)
 803951a:	781b      	ldrb	r3, [r3, #0]
 803951c:	f003 020f 	and.w	r2, r3, #15
 8039520:	6879      	ldr	r1, [r7, #4]
 8039522:	4613      	mov	r3, r2
 8039524:	009b      	lsls	r3, r3, #2
 8039526:	4413      	add	r3, r2
 8039528:	009b      	lsls	r3, r3, #2
 803952a:	440b      	add	r3, r1
 803952c:	3324      	adds	r3, #36	; 0x24
 803952e:	2200      	movs	r2, #0
 8039530:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8039532:	4b32      	ldr	r3, [pc, #200]	; (80395fc <USBD_CDC_DeInit+0xfc>)
 8039534:	781b      	ldrb	r3, [r3, #0]
 8039536:	4619      	mov	r1, r3
 8039538:	6878      	ldr	r0, [r7, #4]
 803953a:	f002 fa4a 	bl	803b9d2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 803953e:	4b2f      	ldr	r3, [pc, #188]	; (80395fc <USBD_CDC_DeInit+0xfc>)
 8039540:	781b      	ldrb	r3, [r3, #0]
 8039542:	f003 020f 	and.w	r2, r3, #15
 8039546:	6879      	ldr	r1, [r7, #4]
 8039548:	4613      	mov	r3, r2
 803954a:	009b      	lsls	r3, r3, #2
 803954c:	4413      	add	r3, r2
 803954e:	009b      	lsls	r3, r3, #2
 8039550:	440b      	add	r3, r1
 8039552:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8039556:	2200      	movs	r2, #0
 8039558:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 803955a:	4b29      	ldr	r3, [pc, #164]	; (8039600 <USBD_CDC_DeInit+0x100>)
 803955c:	781b      	ldrb	r3, [r3, #0]
 803955e:	4619      	mov	r1, r3
 8039560:	6878      	ldr	r0, [r7, #4]
 8039562:	f002 fa36 	bl	803b9d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8039566:	4b26      	ldr	r3, [pc, #152]	; (8039600 <USBD_CDC_DeInit+0x100>)
 8039568:	781b      	ldrb	r3, [r3, #0]
 803956a:	f003 020f 	and.w	r2, r3, #15
 803956e:	6879      	ldr	r1, [r7, #4]
 8039570:	4613      	mov	r3, r2
 8039572:	009b      	lsls	r3, r3, #2
 8039574:	4413      	add	r3, r2
 8039576:	009b      	lsls	r3, r3, #2
 8039578:	440b      	add	r3, r1
 803957a:	3324      	adds	r3, #36	; 0x24
 803957c:	2200      	movs	r2, #0
 803957e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8039580:	4b1f      	ldr	r3, [pc, #124]	; (8039600 <USBD_CDC_DeInit+0x100>)
 8039582:	781b      	ldrb	r3, [r3, #0]
 8039584:	f003 020f 	and.w	r2, r3, #15
 8039588:	6879      	ldr	r1, [r7, #4]
 803958a:	4613      	mov	r3, r2
 803958c:	009b      	lsls	r3, r3, #2
 803958e:	4413      	add	r3, r2
 8039590:	009b      	lsls	r3, r3, #2
 8039592:	440b      	add	r3, r1
 8039594:	3326      	adds	r3, #38	; 0x26
 8039596:	2200      	movs	r2, #0
 8039598:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 803959a:	687b      	ldr	r3, [r7, #4]
 803959c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80395a0:	687b      	ldr	r3, [r7, #4]
 80395a2:	32b0      	adds	r2, #176	; 0xb0
 80395a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80395a8:	2b00      	cmp	r3, #0
 80395aa:	d01f      	beq.n	80395ec <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80395ac:	687b      	ldr	r3, [r7, #4]
 80395ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80395b2:	687a      	ldr	r2, [r7, #4]
 80395b4:	33b0      	adds	r3, #176	; 0xb0
 80395b6:	009b      	lsls	r3, r3, #2
 80395b8:	4413      	add	r3, r2
 80395ba:	685b      	ldr	r3, [r3, #4]
 80395bc:	685b      	ldr	r3, [r3, #4]
 80395be:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80395c0:	687b      	ldr	r3, [r7, #4]
 80395c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80395c6:	687b      	ldr	r3, [r7, #4]
 80395c8:	32b0      	adds	r2, #176	; 0xb0
 80395ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80395ce:	4618      	mov	r0, r3
 80395d0:	f002 fb0a 	bl	803bbe8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80395d4:	687b      	ldr	r3, [r7, #4]
 80395d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80395da:	687b      	ldr	r3, [r7, #4]
 80395dc:	32b0      	adds	r2, #176	; 0xb0
 80395de:	2100      	movs	r1, #0
 80395e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80395e4:	687b      	ldr	r3, [r7, #4]
 80395e6:	2200      	movs	r2, #0
 80395e8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80395ec:	2300      	movs	r3, #0
}
 80395ee:	4618      	mov	r0, r3
 80395f0:	3708      	adds	r7, #8
 80395f2:	46bd      	mov	sp, r7
 80395f4:	bd80      	pop	{r7, pc}
 80395f6:	bf00      	nop
 80395f8:	2400009b 	.word	0x2400009b
 80395fc:	2400009c 	.word	0x2400009c
 8039600:	2400009d 	.word	0x2400009d

08039604 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8039604:	b580      	push	{r7, lr}
 8039606:	b086      	sub	sp, #24
 8039608:	af00      	add	r7, sp, #0
 803960a:	6078      	str	r0, [r7, #4]
 803960c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 803960e:	687b      	ldr	r3, [r7, #4]
 8039610:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8039614:	687b      	ldr	r3, [r7, #4]
 8039616:	32b0      	adds	r2, #176	; 0xb0
 8039618:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803961c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 803961e:	2300      	movs	r3, #0
 8039620:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8039622:	2300      	movs	r3, #0
 8039624:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8039626:	2300      	movs	r3, #0
 8039628:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 803962a:	693b      	ldr	r3, [r7, #16]
 803962c:	2b00      	cmp	r3, #0
 803962e:	d101      	bne.n	8039634 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8039630:	2303      	movs	r3, #3
 8039632:	e0bf      	b.n	80397b4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8039634:	683b      	ldr	r3, [r7, #0]
 8039636:	781b      	ldrb	r3, [r3, #0]
 8039638:	f003 0360 	and.w	r3, r3, #96	; 0x60
 803963c:	2b00      	cmp	r3, #0
 803963e:	d050      	beq.n	80396e2 <USBD_CDC_Setup+0xde>
 8039640:	2b20      	cmp	r3, #32
 8039642:	f040 80af 	bne.w	80397a4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8039646:	683b      	ldr	r3, [r7, #0]
 8039648:	88db      	ldrh	r3, [r3, #6]
 803964a:	2b00      	cmp	r3, #0
 803964c:	d03a      	beq.n	80396c4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 803964e:	683b      	ldr	r3, [r7, #0]
 8039650:	781b      	ldrb	r3, [r3, #0]
 8039652:	b25b      	sxtb	r3, r3
 8039654:	2b00      	cmp	r3, #0
 8039656:	da1b      	bge.n	8039690 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8039658:	687b      	ldr	r3, [r7, #4]
 803965a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 803965e:	687a      	ldr	r2, [r7, #4]
 8039660:	33b0      	adds	r3, #176	; 0xb0
 8039662:	009b      	lsls	r3, r3, #2
 8039664:	4413      	add	r3, r2
 8039666:	685b      	ldr	r3, [r3, #4]
 8039668:	689b      	ldr	r3, [r3, #8]
 803966a:	683a      	ldr	r2, [r7, #0]
 803966c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 803966e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8039670:	683a      	ldr	r2, [r7, #0]
 8039672:	88d2      	ldrh	r2, [r2, #6]
 8039674:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8039676:	683b      	ldr	r3, [r7, #0]
 8039678:	88db      	ldrh	r3, [r3, #6]
 803967a:	2b07      	cmp	r3, #7
 803967c:	bf28      	it	cs
 803967e:	2307      	movcs	r3, #7
 8039680:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8039682:	693b      	ldr	r3, [r7, #16]
 8039684:	89fa      	ldrh	r2, [r7, #14]
 8039686:	4619      	mov	r1, r3
 8039688:	6878      	ldr	r0, [r7, #4]
 803968a:	f001 fd43 	bl	803b114 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 803968e:	e090      	b.n	80397b2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8039690:	683b      	ldr	r3, [r7, #0]
 8039692:	785a      	ldrb	r2, [r3, #1]
 8039694:	693b      	ldr	r3, [r7, #16]
 8039696:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 803969a:	683b      	ldr	r3, [r7, #0]
 803969c:	88db      	ldrh	r3, [r3, #6]
 803969e:	2b3f      	cmp	r3, #63	; 0x3f
 80396a0:	d803      	bhi.n	80396aa <USBD_CDC_Setup+0xa6>
 80396a2:	683b      	ldr	r3, [r7, #0]
 80396a4:	88db      	ldrh	r3, [r3, #6]
 80396a6:	b2da      	uxtb	r2, r3
 80396a8:	e000      	b.n	80396ac <USBD_CDC_Setup+0xa8>
 80396aa:	2240      	movs	r2, #64	; 0x40
 80396ac:	693b      	ldr	r3, [r7, #16]
 80396ae:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80396b2:	6939      	ldr	r1, [r7, #16]
 80396b4:	693b      	ldr	r3, [r7, #16]
 80396b6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80396ba:	461a      	mov	r2, r3
 80396bc:	6878      	ldr	r0, [r7, #4]
 80396be:	f001 fd55 	bl	803b16c <USBD_CtlPrepareRx>
      break;
 80396c2:	e076      	b.n	80397b2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80396c4:	687b      	ldr	r3, [r7, #4]
 80396c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80396ca:	687a      	ldr	r2, [r7, #4]
 80396cc:	33b0      	adds	r3, #176	; 0xb0
 80396ce:	009b      	lsls	r3, r3, #2
 80396d0:	4413      	add	r3, r2
 80396d2:	685b      	ldr	r3, [r3, #4]
 80396d4:	689b      	ldr	r3, [r3, #8]
 80396d6:	683a      	ldr	r2, [r7, #0]
 80396d8:	7850      	ldrb	r0, [r2, #1]
 80396da:	2200      	movs	r2, #0
 80396dc:	6839      	ldr	r1, [r7, #0]
 80396de:	4798      	blx	r3
      break;
 80396e0:	e067      	b.n	80397b2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80396e2:	683b      	ldr	r3, [r7, #0]
 80396e4:	785b      	ldrb	r3, [r3, #1]
 80396e6:	2b0b      	cmp	r3, #11
 80396e8:	d851      	bhi.n	803978e <USBD_CDC_Setup+0x18a>
 80396ea:	a201      	add	r2, pc, #4	; (adr r2, 80396f0 <USBD_CDC_Setup+0xec>)
 80396ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80396f0:	08039721 	.word	0x08039721
 80396f4:	0803979d 	.word	0x0803979d
 80396f8:	0803978f 	.word	0x0803978f
 80396fc:	0803978f 	.word	0x0803978f
 8039700:	0803978f 	.word	0x0803978f
 8039704:	0803978f 	.word	0x0803978f
 8039708:	0803978f 	.word	0x0803978f
 803970c:	0803978f 	.word	0x0803978f
 8039710:	0803978f 	.word	0x0803978f
 8039714:	0803978f 	.word	0x0803978f
 8039718:	0803974b 	.word	0x0803974b
 803971c:	08039775 	.word	0x08039775
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8039720:	687b      	ldr	r3, [r7, #4]
 8039722:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8039726:	b2db      	uxtb	r3, r3
 8039728:	2b03      	cmp	r3, #3
 803972a:	d107      	bne.n	803973c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 803972c:	f107 030a 	add.w	r3, r7, #10
 8039730:	2202      	movs	r2, #2
 8039732:	4619      	mov	r1, r3
 8039734:	6878      	ldr	r0, [r7, #4]
 8039736:	f001 fced 	bl	803b114 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 803973a:	e032      	b.n	80397a2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 803973c:	6839      	ldr	r1, [r7, #0]
 803973e:	6878      	ldr	r0, [r7, #4]
 8039740:	f001 fc77 	bl	803b032 <USBD_CtlError>
            ret = USBD_FAIL;
 8039744:	2303      	movs	r3, #3
 8039746:	75fb      	strb	r3, [r7, #23]
          break;
 8039748:	e02b      	b.n	80397a2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803974a:	687b      	ldr	r3, [r7, #4]
 803974c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8039750:	b2db      	uxtb	r3, r3
 8039752:	2b03      	cmp	r3, #3
 8039754:	d107      	bne.n	8039766 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8039756:	f107 030d 	add.w	r3, r7, #13
 803975a:	2201      	movs	r2, #1
 803975c:	4619      	mov	r1, r3
 803975e:	6878      	ldr	r0, [r7, #4]
 8039760:	f001 fcd8 	bl	803b114 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8039764:	e01d      	b.n	80397a2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8039766:	6839      	ldr	r1, [r7, #0]
 8039768:	6878      	ldr	r0, [r7, #4]
 803976a:	f001 fc62 	bl	803b032 <USBD_CtlError>
            ret = USBD_FAIL;
 803976e:	2303      	movs	r3, #3
 8039770:	75fb      	strb	r3, [r7, #23]
          break;
 8039772:	e016      	b.n	80397a2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8039774:	687b      	ldr	r3, [r7, #4]
 8039776:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803977a:	b2db      	uxtb	r3, r3
 803977c:	2b03      	cmp	r3, #3
 803977e:	d00f      	beq.n	80397a0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8039780:	6839      	ldr	r1, [r7, #0]
 8039782:	6878      	ldr	r0, [r7, #4]
 8039784:	f001 fc55 	bl	803b032 <USBD_CtlError>
            ret = USBD_FAIL;
 8039788:	2303      	movs	r3, #3
 803978a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 803978c:	e008      	b.n	80397a0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 803978e:	6839      	ldr	r1, [r7, #0]
 8039790:	6878      	ldr	r0, [r7, #4]
 8039792:	f001 fc4e 	bl	803b032 <USBD_CtlError>
          ret = USBD_FAIL;
 8039796:	2303      	movs	r3, #3
 8039798:	75fb      	strb	r3, [r7, #23]
          break;
 803979a:	e002      	b.n	80397a2 <USBD_CDC_Setup+0x19e>
          break;
 803979c:	bf00      	nop
 803979e:	e008      	b.n	80397b2 <USBD_CDC_Setup+0x1ae>
          break;
 80397a0:	bf00      	nop
      }
      break;
 80397a2:	e006      	b.n	80397b2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80397a4:	6839      	ldr	r1, [r7, #0]
 80397a6:	6878      	ldr	r0, [r7, #4]
 80397a8:	f001 fc43 	bl	803b032 <USBD_CtlError>
      ret = USBD_FAIL;
 80397ac:	2303      	movs	r3, #3
 80397ae:	75fb      	strb	r3, [r7, #23]
      break;
 80397b0:	bf00      	nop
  }

  return (uint8_t)ret;
 80397b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80397b4:	4618      	mov	r0, r3
 80397b6:	3718      	adds	r7, #24
 80397b8:	46bd      	mov	sp, r7
 80397ba:	bd80      	pop	{r7, pc}

080397bc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80397bc:	b580      	push	{r7, lr}
 80397be:	b084      	sub	sp, #16
 80397c0:	af00      	add	r7, sp, #0
 80397c2:	6078      	str	r0, [r7, #4]
 80397c4:	460b      	mov	r3, r1
 80397c6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80397c8:	687b      	ldr	r3, [r7, #4]
 80397ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80397ce:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80397d0:	687b      	ldr	r3, [r7, #4]
 80397d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80397d6:	687b      	ldr	r3, [r7, #4]
 80397d8:	32b0      	adds	r2, #176	; 0xb0
 80397da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80397de:	2b00      	cmp	r3, #0
 80397e0:	d101      	bne.n	80397e6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80397e2:	2303      	movs	r3, #3
 80397e4:	e065      	b.n	80398b2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80397e6:	687b      	ldr	r3, [r7, #4]
 80397e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80397ec:	687b      	ldr	r3, [r7, #4]
 80397ee:	32b0      	adds	r2, #176	; 0xb0
 80397f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80397f4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80397f6:	78fb      	ldrb	r3, [r7, #3]
 80397f8:	f003 020f 	and.w	r2, r3, #15
 80397fc:	6879      	ldr	r1, [r7, #4]
 80397fe:	4613      	mov	r3, r2
 8039800:	009b      	lsls	r3, r3, #2
 8039802:	4413      	add	r3, r2
 8039804:	009b      	lsls	r3, r3, #2
 8039806:	440b      	add	r3, r1
 8039808:	3318      	adds	r3, #24
 803980a:	681b      	ldr	r3, [r3, #0]
 803980c:	2b00      	cmp	r3, #0
 803980e:	d02f      	beq.n	8039870 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8039810:	78fb      	ldrb	r3, [r7, #3]
 8039812:	f003 020f 	and.w	r2, r3, #15
 8039816:	6879      	ldr	r1, [r7, #4]
 8039818:	4613      	mov	r3, r2
 803981a:	009b      	lsls	r3, r3, #2
 803981c:	4413      	add	r3, r2
 803981e:	009b      	lsls	r3, r3, #2
 8039820:	440b      	add	r3, r1
 8039822:	3318      	adds	r3, #24
 8039824:	681a      	ldr	r2, [r3, #0]
 8039826:	78fb      	ldrb	r3, [r7, #3]
 8039828:	f003 010f 	and.w	r1, r3, #15
 803982c:	68f8      	ldr	r0, [r7, #12]
 803982e:	460b      	mov	r3, r1
 8039830:	00db      	lsls	r3, r3, #3
 8039832:	440b      	add	r3, r1
 8039834:	009b      	lsls	r3, r3, #2
 8039836:	4403      	add	r3, r0
 8039838:	3348      	adds	r3, #72	; 0x48
 803983a:	681b      	ldr	r3, [r3, #0]
 803983c:	fbb2 f1f3 	udiv	r1, r2, r3
 8039840:	fb01 f303 	mul.w	r3, r1, r3
 8039844:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8039846:	2b00      	cmp	r3, #0
 8039848:	d112      	bne.n	8039870 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 803984a:	78fb      	ldrb	r3, [r7, #3]
 803984c:	f003 020f 	and.w	r2, r3, #15
 8039850:	6879      	ldr	r1, [r7, #4]
 8039852:	4613      	mov	r3, r2
 8039854:	009b      	lsls	r3, r3, #2
 8039856:	4413      	add	r3, r2
 8039858:	009b      	lsls	r3, r3, #2
 803985a:	440b      	add	r3, r1
 803985c:	3318      	adds	r3, #24
 803985e:	2200      	movs	r2, #0
 8039860:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8039862:	78f9      	ldrb	r1, [r7, #3]
 8039864:	2300      	movs	r3, #0
 8039866:	2200      	movs	r2, #0
 8039868:	6878      	ldr	r0, [r7, #4]
 803986a:	f002 f95a 	bl	803bb22 <USBD_LL_Transmit>
 803986e:	e01f      	b.n	80398b0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8039870:	68bb      	ldr	r3, [r7, #8]
 8039872:	2200      	movs	r2, #0
 8039874:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8039878:	687b      	ldr	r3, [r7, #4]
 803987a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 803987e:	687a      	ldr	r2, [r7, #4]
 8039880:	33b0      	adds	r3, #176	; 0xb0
 8039882:	009b      	lsls	r3, r3, #2
 8039884:	4413      	add	r3, r2
 8039886:	685b      	ldr	r3, [r3, #4]
 8039888:	691b      	ldr	r3, [r3, #16]
 803988a:	2b00      	cmp	r3, #0
 803988c:	d010      	beq.n	80398b0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 803988e:	687b      	ldr	r3, [r7, #4]
 8039890:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8039894:	687a      	ldr	r2, [r7, #4]
 8039896:	33b0      	adds	r3, #176	; 0xb0
 8039898:	009b      	lsls	r3, r3, #2
 803989a:	4413      	add	r3, r2
 803989c:	685b      	ldr	r3, [r3, #4]
 803989e:	691b      	ldr	r3, [r3, #16]
 80398a0:	68ba      	ldr	r2, [r7, #8]
 80398a2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80398a6:	68ba      	ldr	r2, [r7, #8]
 80398a8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80398ac:	78fa      	ldrb	r2, [r7, #3]
 80398ae:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80398b0:	2300      	movs	r3, #0
}
 80398b2:	4618      	mov	r0, r3
 80398b4:	3710      	adds	r7, #16
 80398b6:	46bd      	mov	sp, r7
 80398b8:	bd80      	pop	{r7, pc}

080398ba <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80398ba:	b580      	push	{r7, lr}
 80398bc:	b084      	sub	sp, #16
 80398be:	af00      	add	r7, sp, #0
 80398c0:	6078      	str	r0, [r7, #4]
 80398c2:	460b      	mov	r3, r1
 80398c4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80398c6:	687b      	ldr	r3, [r7, #4]
 80398c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80398cc:	687b      	ldr	r3, [r7, #4]
 80398ce:	32b0      	adds	r2, #176	; 0xb0
 80398d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80398d4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80398d6:	687b      	ldr	r3, [r7, #4]
 80398d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80398dc:	687b      	ldr	r3, [r7, #4]
 80398de:	32b0      	adds	r2, #176	; 0xb0
 80398e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80398e4:	2b00      	cmp	r3, #0
 80398e6:	d101      	bne.n	80398ec <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80398e8:	2303      	movs	r3, #3
 80398ea:	e01a      	b.n	8039922 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80398ec:	78fb      	ldrb	r3, [r7, #3]
 80398ee:	4619      	mov	r1, r3
 80398f0:	6878      	ldr	r0, [r7, #4]
 80398f2:	f002 f958 	bl	803bba6 <USBD_LL_GetRxDataSize>
 80398f6:	4602      	mov	r2, r0
 80398f8:	68fb      	ldr	r3, [r7, #12]
 80398fa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80398fe:	687b      	ldr	r3, [r7, #4]
 8039900:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8039904:	687a      	ldr	r2, [r7, #4]
 8039906:	33b0      	adds	r3, #176	; 0xb0
 8039908:	009b      	lsls	r3, r3, #2
 803990a:	4413      	add	r3, r2
 803990c:	685b      	ldr	r3, [r3, #4]
 803990e:	68db      	ldr	r3, [r3, #12]
 8039910:	68fa      	ldr	r2, [r7, #12]
 8039912:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8039916:	68fa      	ldr	r2, [r7, #12]
 8039918:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 803991c:	4611      	mov	r1, r2
 803991e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8039920:	2300      	movs	r3, #0
}
 8039922:	4618      	mov	r0, r3
 8039924:	3710      	adds	r7, #16
 8039926:	46bd      	mov	sp, r7
 8039928:	bd80      	pop	{r7, pc}

0803992a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 803992a:	b580      	push	{r7, lr}
 803992c:	b084      	sub	sp, #16
 803992e:	af00      	add	r7, sp, #0
 8039930:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8039932:	687b      	ldr	r3, [r7, #4]
 8039934:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8039938:	687b      	ldr	r3, [r7, #4]
 803993a:	32b0      	adds	r2, #176	; 0xb0
 803993c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8039940:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8039942:	68fb      	ldr	r3, [r7, #12]
 8039944:	2b00      	cmp	r3, #0
 8039946:	d101      	bne.n	803994c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8039948:	2303      	movs	r3, #3
 803994a:	e025      	b.n	8039998 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 803994c:	687b      	ldr	r3, [r7, #4]
 803994e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8039952:	687a      	ldr	r2, [r7, #4]
 8039954:	33b0      	adds	r3, #176	; 0xb0
 8039956:	009b      	lsls	r3, r3, #2
 8039958:	4413      	add	r3, r2
 803995a:	685b      	ldr	r3, [r3, #4]
 803995c:	2b00      	cmp	r3, #0
 803995e:	d01a      	beq.n	8039996 <USBD_CDC_EP0_RxReady+0x6c>
 8039960:	68fb      	ldr	r3, [r7, #12]
 8039962:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8039966:	2bff      	cmp	r3, #255	; 0xff
 8039968:	d015      	beq.n	8039996 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 803996a:	687b      	ldr	r3, [r7, #4]
 803996c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8039970:	687a      	ldr	r2, [r7, #4]
 8039972:	33b0      	adds	r3, #176	; 0xb0
 8039974:	009b      	lsls	r3, r3, #2
 8039976:	4413      	add	r3, r2
 8039978:	685b      	ldr	r3, [r3, #4]
 803997a:	689b      	ldr	r3, [r3, #8]
 803997c:	68fa      	ldr	r2, [r7, #12]
 803997e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8039982:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8039984:	68fa      	ldr	r2, [r7, #12]
 8039986:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 803998a:	b292      	uxth	r2, r2
 803998c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 803998e:	68fb      	ldr	r3, [r7, #12]
 8039990:	22ff      	movs	r2, #255	; 0xff
 8039992:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8039996:	2300      	movs	r3, #0
}
 8039998:	4618      	mov	r0, r3
 803999a:	3710      	adds	r7, #16
 803999c:	46bd      	mov	sp, r7
 803999e:	bd80      	pop	{r7, pc}

080399a0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80399a0:	b580      	push	{r7, lr}
 80399a2:	b086      	sub	sp, #24
 80399a4:	af00      	add	r7, sp, #0
 80399a6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80399a8:	2182      	movs	r1, #130	; 0x82
 80399aa:	4818      	ldr	r0, [pc, #96]	; (8039a0c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80399ac:	f000 fd09 	bl	803a3c2 <USBD_GetEpDesc>
 80399b0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80399b2:	2101      	movs	r1, #1
 80399b4:	4815      	ldr	r0, [pc, #84]	; (8039a0c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80399b6:	f000 fd04 	bl	803a3c2 <USBD_GetEpDesc>
 80399ba:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80399bc:	2181      	movs	r1, #129	; 0x81
 80399be:	4813      	ldr	r0, [pc, #76]	; (8039a0c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80399c0:	f000 fcff 	bl	803a3c2 <USBD_GetEpDesc>
 80399c4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80399c6:	697b      	ldr	r3, [r7, #20]
 80399c8:	2b00      	cmp	r3, #0
 80399ca:	d002      	beq.n	80399d2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80399cc:	697b      	ldr	r3, [r7, #20]
 80399ce:	2210      	movs	r2, #16
 80399d0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80399d2:	693b      	ldr	r3, [r7, #16]
 80399d4:	2b00      	cmp	r3, #0
 80399d6:	d006      	beq.n	80399e6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80399d8:	693b      	ldr	r3, [r7, #16]
 80399da:	2200      	movs	r2, #0
 80399dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80399e0:	711a      	strb	r2, [r3, #4]
 80399e2:	2200      	movs	r2, #0
 80399e4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80399e6:	68fb      	ldr	r3, [r7, #12]
 80399e8:	2b00      	cmp	r3, #0
 80399ea:	d006      	beq.n	80399fa <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80399ec:	68fb      	ldr	r3, [r7, #12]
 80399ee:	2200      	movs	r2, #0
 80399f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80399f4:	711a      	strb	r2, [r3, #4]
 80399f6:	2200      	movs	r2, #0
 80399f8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80399fa:	687b      	ldr	r3, [r7, #4]
 80399fc:	2243      	movs	r2, #67	; 0x43
 80399fe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8039a00:	4b02      	ldr	r3, [pc, #8]	; (8039a0c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8039a02:	4618      	mov	r0, r3
 8039a04:	3718      	adds	r7, #24
 8039a06:	46bd      	mov	sp, r7
 8039a08:	bd80      	pop	{r7, pc}
 8039a0a:	bf00      	nop
 8039a0c:	24000058 	.word	0x24000058

08039a10 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8039a10:	b580      	push	{r7, lr}
 8039a12:	b086      	sub	sp, #24
 8039a14:	af00      	add	r7, sp, #0
 8039a16:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8039a18:	2182      	movs	r1, #130	; 0x82
 8039a1a:	4818      	ldr	r0, [pc, #96]	; (8039a7c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8039a1c:	f000 fcd1 	bl	803a3c2 <USBD_GetEpDesc>
 8039a20:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8039a22:	2101      	movs	r1, #1
 8039a24:	4815      	ldr	r0, [pc, #84]	; (8039a7c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8039a26:	f000 fccc 	bl	803a3c2 <USBD_GetEpDesc>
 8039a2a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8039a2c:	2181      	movs	r1, #129	; 0x81
 8039a2e:	4813      	ldr	r0, [pc, #76]	; (8039a7c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8039a30:	f000 fcc7 	bl	803a3c2 <USBD_GetEpDesc>
 8039a34:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8039a36:	697b      	ldr	r3, [r7, #20]
 8039a38:	2b00      	cmp	r3, #0
 8039a3a:	d002      	beq.n	8039a42 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8039a3c:	697b      	ldr	r3, [r7, #20]
 8039a3e:	2210      	movs	r2, #16
 8039a40:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8039a42:	693b      	ldr	r3, [r7, #16]
 8039a44:	2b00      	cmp	r3, #0
 8039a46:	d006      	beq.n	8039a56 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8039a48:	693b      	ldr	r3, [r7, #16]
 8039a4a:	2200      	movs	r2, #0
 8039a4c:	711a      	strb	r2, [r3, #4]
 8039a4e:	2200      	movs	r2, #0
 8039a50:	f042 0202 	orr.w	r2, r2, #2
 8039a54:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8039a56:	68fb      	ldr	r3, [r7, #12]
 8039a58:	2b00      	cmp	r3, #0
 8039a5a:	d006      	beq.n	8039a6a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8039a5c:	68fb      	ldr	r3, [r7, #12]
 8039a5e:	2200      	movs	r2, #0
 8039a60:	711a      	strb	r2, [r3, #4]
 8039a62:	2200      	movs	r2, #0
 8039a64:	f042 0202 	orr.w	r2, r2, #2
 8039a68:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8039a6a:	687b      	ldr	r3, [r7, #4]
 8039a6c:	2243      	movs	r2, #67	; 0x43
 8039a6e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8039a70:	4b02      	ldr	r3, [pc, #8]	; (8039a7c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8039a72:	4618      	mov	r0, r3
 8039a74:	3718      	adds	r7, #24
 8039a76:	46bd      	mov	sp, r7
 8039a78:	bd80      	pop	{r7, pc}
 8039a7a:	bf00      	nop
 8039a7c:	24000058 	.word	0x24000058

08039a80 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8039a80:	b580      	push	{r7, lr}
 8039a82:	b086      	sub	sp, #24
 8039a84:	af00      	add	r7, sp, #0
 8039a86:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8039a88:	2182      	movs	r1, #130	; 0x82
 8039a8a:	4818      	ldr	r0, [pc, #96]	; (8039aec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8039a8c:	f000 fc99 	bl	803a3c2 <USBD_GetEpDesc>
 8039a90:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8039a92:	2101      	movs	r1, #1
 8039a94:	4815      	ldr	r0, [pc, #84]	; (8039aec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8039a96:	f000 fc94 	bl	803a3c2 <USBD_GetEpDesc>
 8039a9a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8039a9c:	2181      	movs	r1, #129	; 0x81
 8039a9e:	4813      	ldr	r0, [pc, #76]	; (8039aec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8039aa0:	f000 fc8f 	bl	803a3c2 <USBD_GetEpDesc>
 8039aa4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8039aa6:	697b      	ldr	r3, [r7, #20]
 8039aa8:	2b00      	cmp	r3, #0
 8039aaa:	d002      	beq.n	8039ab2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8039aac:	697b      	ldr	r3, [r7, #20]
 8039aae:	2210      	movs	r2, #16
 8039ab0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8039ab2:	693b      	ldr	r3, [r7, #16]
 8039ab4:	2b00      	cmp	r3, #0
 8039ab6:	d006      	beq.n	8039ac6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8039ab8:	693b      	ldr	r3, [r7, #16]
 8039aba:	2200      	movs	r2, #0
 8039abc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8039ac0:	711a      	strb	r2, [r3, #4]
 8039ac2:	2200      	movs	r2, #0
 8039ac4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8039ac6:	68fb      	ldr	r3, [r7, #12]
 8039ac8:	2b00      	cmp	r3, #0
 8039aca:	d006      	beq.n	8039ada <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8039acc:	68fb      	ldr	r3, [r7, #12]
 8039ace:	2200      	movs	r2, #0
 8039ad0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8039ad4:	711a      	strb	r2, [r3, #4]
 8039ad6:	2200      	movs	r2, #0
 8039ad8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8039ada:	687b      	ldr	r3, [r7, #4]
 8039adc:	2243      	movs	r2, #67	; 0x43
 8039ade:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8039ae0:	4b02      	ldr	r3, [pc, #8]	; (8039aec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8039ae2:	4618      	mov	r0, r3
 8039ae4:	3718      	adds	r7, #24
 8039ae6:	46bd      	mov	sp, r7
 8039ae8:	bd80      	pop	{r7, pc}
 8039aea:	bf00      	nop
 8039aec:	24000058 	.word	0x24000058

08039af0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8039af0:	b480      	push	{r7}
 8039af2:	b083      	sub	sp, #12
 8039af4:	af00      	add	r7, sp, #0
 8039af6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8039af8:	687b      	ldr	r3, [r7, #4]
 8039afa:	220a      	movs	r2, #10
 8039afc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8039afe:	4b03      	ldr	r3, [pc, #12]	; (8039b0c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8039b00:	4618      	mov	r0, r3
 8039b02:	370c      	adds	r7, #12
 8039b04:	46bd      	mov	sp, r7
 8039b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039b0a:	4770      	bx	lr
 8039b0c:	24000014 	.word	0x24000014

08039b10 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8039b10:	b480      	push	{r7}
 8039b12:	b083      	sub	sp, #12
 8039b14:	af00      	add	r7, sp, #0
 8039b16:	6078      	str	r0, [r7, #4]
 8039b18:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8039b1a:	683b      	ldr	r3, [r7, #0]
 8039b1c:	2b00      	cmp	r3, #0
 8039b1e:	d101      	bne.n	8039b24 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8039b20:	2303      	movs	r3, #3
 8039b22:	e009      	b.n	8039b38 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8039b24:	687b      	ldr	r3, [r7, #4]
 8039b26:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8039b2a:	687a      	ldr	r2, [r7, #4]
 8039b2c:	33b0      	adds	r3, #176	; 0xb0
 8039b2e:	009b      	lsls	r3, r3, #2
 8039b30:	4413      	add	r3, r2
 8039b32:	683a      	ldr	r2, [r7, #0]
 8039b34:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8039b36:	2300      	movs	r3, #0
}
 8039b38:	4618      	mov	r0, r3
 8039b3a:	370c      	adds	r7, #12
 8039b3c:	46bd      	mov	sp, r7
 8039b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039b42:	4770      	bx	lr

08039b44 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8039b44:	b480      	push	{r7}
 8039b46:	b087      	sub	sp, #28
 8039b48:	af00      	add	r7, sp, #0
 8039b4a:	60f8      	str	r0, [r7, #12]
 8039b4c:	60b9      	str	r1, [r7, #8]
 8039b4e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8039b50:	68fb      	ldr	r3, [r7, #12]
 8039b52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8039b56:	68fb      	ldr	r3, [r7, #12]
 8039b58:	32b0      	adds	r2, #176	; 0xb0
 8039b5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8039b5e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8039b60:	697b      	ldr	r3, [r7, #20]
 8039b62:	2b00      	cmp	r3, #0
 8039b64:	d101      	bne.n	8039b6a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8039b66:	2303      	movs	r3, #3
 8039b68:	e008      	b.n	8039b7c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8039b6a:	697b      	ldr	r3, [r7, #20]
 8039b6c:	68ba      	ldr	r2, [r7, #8]
 8039b6e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8039b72:	697b      	ldr	r3, [r7, #20]
 8039b74:	687a      	ldr	r2, [r7, #4]
 8039b76:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8039b7a:	2300      	movs	r3, #0
}
 8039b7c:	4618      	mov	r0, r3
 8039b7e:	371c      	adds	r7, #28
 8039b80:	46bd      	mov	sp, r7
 8039b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039b86:	4770      	bx	lr

08039b88 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8039b88:	b480      	push	{r7}
 8039b8a:	b085      	sub	sp, #20
 8039b8c:	af00      	add	r7, sp, #0
 8039b8e:	6078      	str	r0, [r7, #4]
 8039b90:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8039b92:	687b      	ldr	r3, [r7, #4]
 8039b94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8039b98:	687b      	ldr	r3, [r7, #4]
 8039b9a:	32b0      	adds	r2, #176	; 0xb0
 8039b9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8039ba0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8039ba2:	68fb      	ldr	r3, [r7, #12]
 8039ba4:	2b00      	cmp	r3, #0
 8039ba6:	d101      	bne.n	8039bac <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8039ba8:	2303      	movs	r3, #3
 8039baa:	e004      	b.n	8039bb6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8039bac:	68fb      	ldr	r3, [r7, #12]
 8039bae:	683a      	ldr	r2, [r7, #0]
 8039bb0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8039bb4:	2300      	movs	r3, #0
}
 8039bb6:	4618      	mov	r0, r3
 8039bb8:	3714      	adds	r7, #20
 8039bba:	46bd      	mov	sp, r7
 8039bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039bc0:	4770      	bx	lr
	...

08039bc4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8039bc4:	b580      	push	{r7, lr}
 8039bc6:	b084      	sub	sp, #16
 8039bc8:	af00      	add	r7, sp, #0
 8039bca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8039bcc:	687b      	ldr	r3, [r7, #4]
 8039bce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8039bd2:	687b      	ldr	r3, [r7, #4]
 8039bd4:	32b0      	adds	r2, #176	; 0xb0
 8039bd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8039bda:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8039bdc:	687b      	ldr	r3, [r7, #4]
 8039bde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8039be2:	687b      	ldr	r3, [r7, #4]
 8039be4:	32b0      	adds	r2, #176	; 0xb0
 8039be6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8039bea:	2b00      	cmp	r3, #0
 8039bec:	d101      	bne.n	8039bf2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8039bee:	2303      	movs	r3, #3
 8039bf0:	e018      	b.n	8039c24 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8039bf2:	687b      	ldr	r3, [r7, #4]
 8039bf4:	7c1b      	ldrb	r3, [r3, #16]
 8039bf6:	2b00      	cmp	r3, #0
 8039bf8:	d10a      	bne.n	8039c10 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8039bfa:	4b0c      	ldr	r3, [pc, #48]	; (8039c2c <USBD_CDC_ReceivePacket+0x68>)
 8039bfc:	7819      	ldrb	r1, [r3, #0]
 8039bfe:	68fb      	ldr	r3, [r7, #12]
 8039c00:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8039c04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8039c08:	6878      	ldr	r0, [r7, #4]
 8039c0a:	f001 ffab 	bl	803bb64 <USBD_LL_PrepareReceive>
 8039c0e:	e008      	b.n	8039c22 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8039c10:	4b06      	ldr	r3, [pc, #24]	; (8039c2c <USBD_CDC_ReceivePacket+0x68>)
 8039c12:	7819      	ldrb	r1, [r3, #0]
 8039c14:	68fb      	ldr	r3, [r7, #12]
 8039c16:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8039c1a:	2340      	movs	r3, #64	; 0x40
 8039c1c:	6878      	ldr	r0, [r7, #4]
 8039c1e:	f001 ffa1 	bl	803bb64 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8039c22:	2300      	movs	r3, #0
}
 8039c24:	4618      	mov	r0, r3
 8039c26:	3710      	adds	r7, #16
 8039c28:	46bd      	mov	sp, r7
 8039c2a:	bd80      	pop	{r7, pc}
 8039c2c:	2400009c 	.word	0x2400009c

08039c30 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8039c30:	b580      	push	{r7, lr}
 8039c32:	b086      	sub	sp, #24
 8039c34:	af00      	add	r7, sp, #0
 8039c36:	60f8      	str	r0, [r7, #12]
 8039c38:	60b9      	str	r1, [r7, #8]
 8039c3a:	4613      	mov	r3, r2
 8039c3c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8039c3e:	68fb      	ldr	r3, [r7, #12]
 8039c40:	2b00      	cmp	r3, #0
 8039c42:	d101      	bne.n	8039c48 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8039c44:	2303      	movs	r3, #3
 8039c46:	e01f      	b.n	8039c88 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8039c48:	68fb      	ldr	r3, [r7, #12]
 8039c4a:	2200      	movs	r2, #0
 8039c4c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8039c50:	68fb      	ldr	r3, [r7, #12]
 8039c52:	2200      	movs	r2, #0
 8039c54:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8039c58:	68fb      	ldr	r3, [r7, #12]
 8039c5a:	2200      	movs	r2, #0
 8039c5c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8039c60:	68bb      	ldr	r3, [r7, #8]
 8039c62:	2b00      	cmp	r3, #0
 8039c64:	d003      	beq.n	8039c6e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8039c66:	68fb      	ldr	r3, [r7, #12]
 8039c68:	68ba      	ldr	r2, [r7, #8]
 8039c6a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8039c6e:	68fb      	ldr	r3, [r7, #12]
 8039c70:	2201      	movs	r2, #1
 8039c72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8039c76:	68fb      	ldr	r3, [r7, #12]
 8039c78:	79fa      	ldrb	r2, [r7, #7]
 8039c7a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8039c7c:	68f8      	ldr	r0, [r7, #12]
 8039c7e:	f001 fe17 	bl	803b8b0 <USBD_LL_Init>
 8039c82:	4603      	mov	r3, r0
 8039c84:	75fb      	strb	r3, [r7, #23]

  return ret;
 8039c86:	7dfb      	ldrb	r3, [r7, #23]
}
 8039c88:	4618      	mov	r0, r3
 8039c8a:	3718      	adds	r7, #24
 8039c8c:	46bd      	mov	sp, r7
 8039c8e:	bd80      	pop	{r7, pc}

08039c90 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8039c90:	b580      	push	{r7, lr}
 8039c92:	b084      	sub	sp, #16
 8039c94:	af00      	add	r7, sp, #0
 8039c96:	6078      	str	r0, [r7, #4]
 8039c98:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8039c9a:	2300      	movs	r3, #0
 8039c9c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8039c9e:	683b      	ldr	r3, [r7, #0]
 8039ca0:	2b00      	cmp	r3, #0
 8039ca2:	d101      	bne.n	8039ca8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8039ca4:	2303      	movs	r3, #3
 8039ca6:	e025      	b.n	8039cf4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8039ca8:	687b      	ldr	r3, [r7, #4]
 8039caa:	683a      	ldr	r2, [r7, #0]
 8039cac:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8039cb0:	687b      	ldr	r3, [r7, #4]
 8039cb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8039cb6:	687b      	ldr	r3, [r7, #4]
 8039cb8:	32ae      	adds	r2, #174	; 0xae
 8039cba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8039cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8039cc0:	2b00      	cmp	r3, #0
 8039cc2:	d00f      	beq.n	8039ce4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8039cc4:	687b      	ldr	r3, [r7, #4]
 8039cc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8039cca:	687b      	ldr	r3, [r7, #4]
 8039ccc:	32ae      	adds	r2, #174	; 0xae
 8039cce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8039cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8039cd4:	f107 020e 	add.w	r2, r7, #14
 8039cd8:	4610      	mov	r0, r2
 8039cda:	4798      	blx	r3
 8039cdc:	4602      	mov	r2, r0
 8039cde:	687b      	ldr	r3, [r7, #4]
 8039ce0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8039ce4:	687b      	ldr	r3, [r7, #4]
 8039ce6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8039cea:	1c5a      	adds	r2, r3, #1
 8039cec:	687b      	ldr	r3, [r7, #4]
 8039cee:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8039cf2:	2300      	movs	r3, #0
}
 8039cf4:	4618      	mov	r0, r3
 8039cf6:	3710      	adds	r7, #16
 8039cf8:	46bd      	mov	sp, r7
 8039cfa:	bd80      	pop	{r7, pc}

08039cfc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8039cfc:	b580      	push	{r7, lr}
 8039cfe:	b082      	sub	sp, #8
 8039d00:	af00      	add	r7, sp, #0
 8039d02:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8039d04:	6878      	ldr	r0, [r7, #4]
 8039d06:	f001 fe23 	bl	803b950 <USBD_LL_Start>
 8039d0a:	4603      	mov	r3, r0
}
 8039d0c:	4618      	mov	r0, r3
 8039d0e:	3708      	adds	r7, #8
 8039d10:	46bd      	mov	sp, r7
 8039d12:	bd80      	pop	{r7, pc}

08039d14 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8039d14:	b480      	push	{r7}
 8039d16:	b083      	sub	sp, #12
 8039d18:	af00      	add	r7, sp, #0
 8039d1a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8039d1c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8039d1e:	4618      	mov	r0, r3
 8039d20:	370c      	adds	r7, #12
 8039d22:	46bd      	mov	sp, r7
 8039d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039d28:	4770      	bx	lr

08039d2a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8039d2a:	b580      	push	{r7, lr}
 8039d2c:	b084      	sub	sp, #16
 8039d2e:	af00      	add	r7, sp, #0
 8039d30:	6078      	str	r0, [r7, #4]
 8039d32:	460b      	mov	r3, r1
 8039d34:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8039d36:	2300      	movs	r3, #0
 8039d38:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8039d3a:	687b      	ldr	r3, [r7, #4]
 8039d3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8039d40:	2b00      	cmp	r3, #0
 8039d42:	d009      	beq.n	8039d58 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8039d44:	687b      	ldr	r3, [r7, #4]
 8039d46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8039d4a:	681b      	ldr	r3, [r3, #0]
 8039d4c:	78fa      	ldrb	r2, [r7, #3]
 8039d4e:	4611      	mov	r1, r2
 8039d50:	6878      	ldr	r0, [r7, #4]
 8039d52:	4798      	blx	r3
 8039d54:	4603      	mov	r3, r0
 8039d56:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8039d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8039d5a:	4618      	mov	r0, r3
 8039d5c:	3710      	adds	r7, #16
 8039d5e:	46bd      	mov	sp, r7
 8039d60:	bd80      	pop	{r7, pc}

08039d62 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8039d62:	b580      	push	{r7, lr}
 8039d64:	b084      	sub	sp, #16
 8039d66:	af00      	add	r7, sp, #0
 8039d68:	6078      	str	r0, [r7, #4]
 8039d6a:	460b      	mov	r3, r1
 8039d6c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8039d6e:	2300      	movs	r3, #0
 8039d70:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8039d72:	687b      	ldr	r3, [r7, #4]
 8039d74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8039d78:	685b      	ldr	r3, [r3, #4]
 8039d7a:	78fa      	ldrb	r2, [r7, #3]
 8039d7c:	4611      	mov	r1, r2
 8039d7e:	6878      	ldr	r0, [r7, #4]
 8039d80:	4798      	blx	r3
 8039d82:	4603      	mov	r3, r0
 8039d84:	2b00      	cmp	r3, #0
 8039d86:	d001      	beq.n	8039d8c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8039d88:	2303      	movs	r3, #3
 8039d8a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8039d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8039d8e:	4618      	mov	r0, r3
 8039d90:	3710      	adds	r7, #16
 8039d92:	46bd      	mov	sp, r7
 8039d94:	bd80      	pop	{r7, pc}

08039d96 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8039d96:	b580      	push	{r7, lr}
 8039d98:	b084      	sub	sp, #16
 8039d9a:	af00      	add	r7, sp, #0
 8039d9c:	6078      	str	r0, [r7, #4]
 8039d9e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8039da0:	687b      	ldr	r3, [r7, #4]
 8039da2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8039da6:	6839      	ldr	r1, [r7, #0]
 8039da8:	4618      	mov	r0, r3
 8039daa:	f001 f908 	bl	803afbe <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8039dae:	687b      	ldr	r3, [r7, #4]
 8039db0:	2201      	movs	r2, #1
 8039db2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8039db6:	687b      	ldr	r3, [r7, #4]
 8039db8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8039dbc:	461a      	mov	r2, r3
 8039dbe:	687b      	ldr	r3, [r7, #4]
 8039dc0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8039dc4:	687b      	ldr	r3, [r7, #4]
 8039dc6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8039dca:	f003 031f 	and.w	r3, r3, #31
 8039dce:	2b02      	cmp	r3, #2
 8039dd0:	d01a      	beq.n	8039e08 <USBD_LL_SetupStage+0x72>
 8039dd2:	2b02      	cmp	r3, #2
 8039dd4:	d822      	bhi.n	8039e1c <USBD_LL_SetupStage+0x86>
 8039dd6:	2b00      	cmp	r3, #0
 8039dd8:	d002      	beq.n	8039de0 <USBD_LL_SetupStage+0x4a>
 8039dda:	2b01      	cmp	r3, #1
 8039ddc:	d00a      	beq.n	8039df4 <USBD_LL_SetupStage+0x5e>
 8039dde:	e01d      	b.n	8039e1c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8039de0:	687b      	ldr	r3, [r7, #4]
 8039de2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8039de6:	4619      	mov	r1, r3
 8039de8:	6878      	ldr	r0, [r7, #4]
 8039dea:	f000 fb5f 	bl	803a4ac <USBD_StdDevReq>
 8039dee:	4603      	mov	r3, r0
 8039df0:	73fb      	strb	r3, [r7, #15]
      break;
 8039df2:	e020      	b.n	8039e36 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8039df4:	687b      	ldr	r3, [r7, #4]
 8039df6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8039dfa:	4619      	mov	r1, r3
 8039dfc:	6878      	ldr	r0, [r7, #4]
 8039dfe:	f000 fbc7 	bl	803a590 <USBD_StdItfReq>
 8039e02:	4603      	mov	r3, r0
 8039e04:	73fb      	strb	r3, [r7, #15]
      break;
 8039e06:	e016      	b.n	8039e36 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8039e08:	687b      	ldr	r3, [r7, #4]
 8039e0a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8039e0e:	4619      	mov	r1, r3
 8039e10:	6878      	ldr	r0, [r7, #4]
 8039e12:	f000 fc29 	bl	803a668 <USBD_StdEPReq>
 8039e16:	4603      	mov	r3, r0
 8039e18:	73fb      	strb	r3, [r7, #15]
      break;
 8039e1a:	e00c      	b.n	8039e36 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8039e1c:	687b      	ldr	r3, [r7, #4]
 8039e1e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8039e22:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8039e26:	b2db      	uxtb	r3, r3
 8039e28:	4619      	mov	r1, r3
 8039e2a:	6878      	ldr	r0, [r7, #4]
 8039e2c:	f001 fdf0 	bl	803ba10 <USBD_LL_StallEP>
 8039e30:	4603      	mov	r3, r0
 8039e32:	73fb      	strb	r3, [r7, #15]
      break;
 8039e34:	bf00      	nop
  }

  return ret;
 8039e36:	7bfb      	ldrb	r3, [r7, #15]
}
 8039e38:	4618      	mov	r0, r3
 8039e3a:	3710      	adds	r7, #16
 8039e3c:	46bd      	mov	sp, r7
 8039e3e:	bd80      	pop	{r7, pc}

08039e40 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8039e40:	b580      	push	{r7, lr}
 8039e42:	b086      	sub	sp, #24
 8039e44:	af00      	add	r7, sp, #0
 8039e46:	60f8      	str	r0, [r7, #12]
 8039e48:	460b      	mov	r3, r1
 8039e4a:	607a      	str	r2, [r7, #4]
 8039e4c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8039e4e:	2300      	movs	r3, #0
 8039e50:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8039e52:	7afb      	ldrb	r3, [r7, #11]
 8039e54:	2b00      	cmp	r3, #0
 8039e56:	d16e      	bne.n	8039f36 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8039e58:	68fb      	ldr	r3, [r7, #12]
 8039e5a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8039e5e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8039e60:	68fb      	ldr	r3, [r7, #12]
 8039e62:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8039e66:	2b03      	cmp	r3, #3
 8039e68:	f040 8098 	bne.w	8039f9c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8039e6c:	693b      	ldr	r3, [r7, #16]
 8039e6e:	689a      	ldr	r2, [r3, #8]
 8039e70:	693b      	ldr	r3, [r7, #16]
 8039e72:	68db      	ldr	r3, [r3, #12]
 8039e74:	429a      	cmp	r2, r3
 8039e76:	d913      	bls.n	8039ea0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8039e78:	693b      	ldr	r3, [r7, #16]
 8039e7a:	689a      	ldr	r2, [r3, #8]
 8039e7c:	693b      	ldr	r3, [r7, #16]
 8039e7e:	68db      	ldr	r3, [r3, #12]
 8039e80:	1ad2      	subs	r2, r2, r3
 8039e82:	693b      	ldr	r3, [r7, #16]
 8039e84:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8039e86:	693b      	ldr	r3, [r7, #16]
 8039e88:	68da      	ldr	r2, [r3, #12]
 8039e8a:	693b      	ldr	r3, [r7, #16]
 8039e8c:	689b      	ldr	r3, [r3, #8]
 8039e8e:	4293      	cmp	r3, r2
 8039e90:	bf28      	it	cs
 8039e92:	4613      	movcs	r3, r2
 8039e94:	461a      	mov	r2, r3
 8039e96:	6879      	ldr	r1, [r7, #4]
 8039e98:	68f8      	ldr	r0, [r7, #12]
 8039e9a:	f001 f984 	bl	803b1a6 <USBD_CtlContinueRx>
 8039e9e:	e07d      	b.n	8039f9c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8039ea0:	68fb      	ldr	r3, [r7, #12]
 8039ea2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8039ea6:	f003 031f 	and.w	r3, r3, #31
 8039eaa:	2b02      	cmp	r3, #2
 8039eac:	d014      	beq.n	8039ed8 <USBD_LL_DataOutStage+0x98>
 8039eae:	2b02      	cmp	r3, #2
 8039eb0:	d81d      	bhi.n	8039eee <USBD_LL_DataOutStage+0xae>
 8039eb2:	2b00      	cmp	r3, #0
 8039eb4:	d002      	beq.n	8039ebc <USBD_LL_DataOutStage+0x7c>
 8039eb6:	2b01      	cmp	r3, #1
 8039eb8:	d003      	beq.n	8039ec2 <USBD_LL_DataOutStage+0x82>
 8039eba:	e018      	b.n	8039eee <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8039ebc:	2300      	movs	r3, #0
 8039ebe:	75bb      	strb	r3, [r7, #22]
            break;
 8039ec0:	e018      	b.n	8039ef4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8039ec2:	68fb      	ldr	r3, [r7, #12]
 8039ec4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8039ec8:	b2db      	uxtb	r3, r3
 8039eca:	4619      	mov	r1, r3
 8039ecc:	68f8      	ldr	r0, [r7, #12]
 8039ece:	f000 fa5e 	bl	803a38e <USBD_CoreFindIF>
 8039ed2:	4603      	mov	r3, r0
 8039ed4:	75bb      	strb	r3, [r7, #22]
            break;
 8039ed6:	e00d      	b.n	8039ef4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8039ed8:	68fb      	ldr	r3, [r7, #12]
 8039eda:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8039ede:	b2db      	uxtb	r3, r3
 8039ee0:	4619      	mov	r1, r3
 8039ee2:	68f8      	ldr	r0, [r7, #12]
 8039ee4:	f000 fa60 	bl	803a3a8 <USBD_CoreFindEP>
 8039ee8:	4603      	mov	r3, r0
 8039eea:	75bb      	strb	r3, [r7, #22]
            break;
 8039eec:	e002      	b.n	8039ef4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8039eee:	2300      	movs	r3, #0
 8039ef0:	75bb      	strb	r3, [r7, #22]
            break;
 8039ef2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8039ef4:	7dbb      	ldrb	r3, [r7, #22]
 8039ef6:	2b00      	cmp	r3, #0
 8039ef8:	d119      	bne.n	8039f2e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8039efa:	68fb      	ldr	r3, [r7, #12]
 8039efc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8039f00:	b2db      	uxtb	r3, r3
 8039f02:	2b03      	cmp	r3, #3
 8039f04:	d113      	bne.n	8039f2e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8039f06:	7dba      	ldrb	r2, [r7, #22]
 8039f08:	68fb      	ldr	r3, [r7, #12]
 8039f0a:	32ae      	adds	r2, #174	; 0xae
 8039f0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8039f10:	691b      	ldr	r3, [r3, #16]
 8039f12:	2b00      	cmp	r3, #0
 8039f14:	d00b      	beq.n	8039f2e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8039f16:	7dba      	ldrb	r2, [r7, #22]
 8039f18:	68fb      	ldr	r3, [r7, #12]
 8039f1a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8039f1e:	7dba      	ldrb	r2, [r7, #22]
 8039f20:	68fb      	ldr	r3, [r7, #12]
 8039f22:	32ae      	adds	r2, #174	; 0xae
 8039f24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8039f28:	691b      	ldr	r3, [r3, #16]
 8039f2a:	68f8      	ldr	r0, [r7, #12]
 8039f2c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8039f2e:	68f8      	ldr	r0, [r7, #12]
 8039f30:	f001 f94a 	bl	803b1c8 <USBD_CtlSendStatus>
 8039f34:	e032      	b.n	8039f9c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8039f36:	7afb      	ldrb	r3, [r7, #11]
 8039f38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8039f3c:	b2db      	uxtb	r3, r3
 8039f3e:	4619      	mov	r1, r3
 8039f40:	68f8      	ldr	r0, [r7, #12]
 8039f42:	f000 fa31 	bl	803a3a8 <USBD_CoreFindEP>
 8039f46:	4603      	mov	r3, r0
 8039f48:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8039f4a:	7dbb      	ldrb	r3, [r7, #22]
 8039f4c:	2bff      	cmp	r3, #255	; 0xff
 8039f4e:	d025      	beq.n	8039f9c <USBD_LL_DataOutStage+0x15c>
 8039f50:	7dbb      	ldrb	r3, [r7, #22]
 8039f52:	2b00      	cmp	r3, #0
 8039f54:	d122      	bne.n	8039f9c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8039f56:	68fb      	ldr	r3, [r7, #12]
 8039f58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8039f5c:	b2db      	uxtb	r3, r3
 8039f5e:	2b03      	cmp	r3, #3
 8039f60:	d117      	bne.n	8039f92 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8039f62:	7dba      	ldrb	r2, [r7, #22]
 8039f64:	68fb      	ldr	r3, [r7, #12]
 8039f66:	32ae      	adds	r2, #174	; 0xae
 8039f68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8039f6c:	699b      	ldr	r3, [r3, #24]
 8039f6e:	2b00      	cmp	r3, #0
 8039f70:	d00f      	beq.n	8039f92 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8039f72:	7dba      	ldrb	r2, [r7, #22]
 8039f74:	68fb      	ldr	r3, [r7, #12]
 8039f76:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8039f7a:	7dba      	ldrb	r2, [r7, #22]
 8039f7c:	68fb      	ldr	r3, [r7, #12]
 8039f7e:	32ae      	adds	r2, #174	; 0xae
 8039f80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8039f84:	699b      	ldr	r3, [r3, #24]
 8039f86:	7afa      	ldrb	r2, [r7, #11]
 8039f88:	4611      	mov	r1, r2
 8039f8a:	68f8      	ldr	r0, [r7, #12]
 8039f8c:	4798      	blx	r3
 8039f8e:	4603      	mov	r3, r0
 8039f90:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8039f92:	7dfb      	ldrb	r3, [r7, #23]
 8039f94:	2b00      	cmp	r3, #0
 8039f96:	d001      	beq.n	8039f9c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8039f98:	7dfb      	ldrb	r3, [r7, #23]
 8039f9a:	e000      	b.n	8039f9e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8039f9c:	2300      	movs	r3, #0
}
 8039f9e:	4618      	mov	r0, r3
 8039fa0:	3718      	adds	r7, #24
 8039fa2:	46bd      	mov	sp, r7
 8039fa4:	bd80      	pop	{r7, pc}

08039fa6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8039fa6:	b580      	push	{r7, lr}
 8039fa8:	b086      	sub	sp, #24
 8039faa:	af00      	add	r7, sp, #0
 8039fac:	60f8      	str	r0, [r7, #12]
 8039fae:	460b      	mov	r3, r1
 8039fb0:	607a      	str	r2, [r7, #4]
 8039fb2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8039fb4:	7afb      	ldrb	r3, [r7, #11]
 8039fb6:	2b00      	cmp	r3, #0
 8039fb8:	d16f      	bne.n	803a09a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8039fba:	68fb      	ldr	r3, [r7, #12]
 8039fbc:	3314      	adds	r3, #20
 8039fbe:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8039fc0:	68fb      	ldr	r3, [r7, #12]
 8039fc2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8039fc6:	2b02      	cmp	r3, #2
 8039fc8:	d15a      	bne.n	803a080 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8039fca:	693b      	ldr	r3, [r7, #16]
 8039fcc:	689a      	ldr	r2, [r3, #8]
 8039fce:	693b      	ldr	r3, [r7, #16]
 8039fd0:	68db      	ldr	r3, [r3, #12]
 8039fd2:	429a      	cmp	r2, r3
 8039fd4:	d914      	bls.n	803a000 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8039fd6:	693b      	ldr	r3, [r7, #16]
 8039fd8:	689a      	ldr	r2, [r3, #8]
 8039fda:	693b      	ldr	r3, [r7, #16]
 8039fdc:	68db      	ldr	r3, [r3, #12]
 8039fde:	1ad2      	subs	r2, r2, r3
 8039fe0:	693b      	ldr	r3, [r7, #16]
 8039fe2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8039fe4:	693b      	ldr	r3, [r7, #16]
 8039fe6:	689b      	ldr	r3, [r3, #8]
 8039fe8:	461a      	mov	r2, r3
 8039fea:	6879      	ldr	r1, [r7, #4]
 8039fec:	68f8      	ldr	r0, [r7, #12]
 8039fee:	f001 f8ac 	bl	803b14a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8039ff2:	2300      	movs	r3, #0
 8039ff4:	2200      	movs	r2, #0
 8039ff6:	2100      	movs	r1, #0
 8039ff8:	68f8      	ldr	r0, [r7, #12]
 8039ffa:	f001 fdb3 	bl	803bb64 <USBD_LL_PrepareReceive>
 8039ffe:	e03f      	b.n	803a080 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 803a000:	693b      	ldr	r3, [r7, #16]
 803a002:	68da      	ldr	r2, [r3, #12]
 803a004:	693b      	ldr	r3, [r7, #16]
 803a006:	689b      	ldr	r3, [r3, #8]
 803a008:	429a      	cmp	r2, r3
 803a00a:	d11c      	bne.n	803a046 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 803a00c:	693b      	ldr	r3, [r7, #16]
 803a00e:	685a      	ldr	r2, [r3, #4]
 803a010:	693b      	ldr	r3, [r7, #16]
 803a012:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 803a014:	429a      	cmp	r2, r3
 803a016:	d316      	bcc.n	803a046 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 803a018:	693b      	ldr	r3, [r7, #16]
 803a01a:	685a      	ldr	r2, [r3, #4]
 803a01c:	68fb      	ldr	r3, [r7, #12]
 803a01e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 803a022:	429a      	cmp	r2, r3
 803a024:	d20f      	bcs.n	803a046 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 803a026:	2200      	movs	r2, #0
 803a028:	2100      	movs	r1, #0
 803a02a:	68f8      	ldr	r0, [r7, #12]
 803a02c:	f001 f88d 	bl	803b14a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 803a030:	68fb      	ldr	r3, [r7, #12]
 803a032:	2200      	movs	r2, #0
 803a034:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 803a038:	2300      	movs	r3, #0
 803a03a:	2200      	movs	r2, #0
 803a03c:	2100      	movs	r1, #0
 803a03e:	68f8      	ldr	r0, [r7, #12]
 803a040:	f001 fd90 	bl	803bb64 <USBD_LL_PrepareReceive>
 803a044:	e01c      	b.n	803a080 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803a046:	68fb      	ldr	r3, [r7, #12]
 803a048:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803a04c:	b2db      	uxtb	r3, r3
 803a04e:	2b03      	cmp	r3, #3
 803a050:	d10f      	bne.n	803a072 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 803a052:	68fb      	ldr	r3, [r7, #12]
 803a054:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803a058:	68db      	ldr	r3, [r3, #12]
 803a05a:	2b00      	cmp	r3, #0
 803a05c:	d009      	beq.n	803a072 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 803a05e:	68fb      	ldr	r3, [r7, #12]
 803a060:	2200      	movs	r2, #0
 803a062:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 803a066:	68fb      	ldr	r3, [r7, #12]
 803a068:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803a06c:	68db      	ldr	r3, [r3, #12]
 803a06e:	68f8      	ldr	r0, [r7, #12]
 803a070:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 803a072:	2180      	movs	r1, #128	; 0x80
 803a074:	68f8      	ldr	r0, [r7, #12]
 803a076:	f001 fccb 	bl	803ba10 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 803a07a:	68f8      	ldr	r0, [r7, #12]
 803a07c:	f001 f8b7 	bl	803b1ee <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 803a080:	68fb      	ldr	r3, [r7, #12]
 803a082:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 803a086:	2b00      	cmp	r3, #0
 803a088:	d03a      	beq.n	803a100 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 803a08a:	68f8      	ldr	r0, [r7, #12]
 803a08c:	f7ff fe42 	bl	8039d14 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 803a090:	68fb      	ldr	r3, [r7, #12]
 803a092:	2200      	movs	r2, #0
 803a094:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 803a098:	e032      	b.n	803a100 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 803a09a:	7afb      	ldrb	r3, [r7, #11]
 803a09c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 803a0a0:	b2db      	uxtb	r3, r3
 803a0a2:	4619      	mov	r1, r3
 803a0a4:	68f8      	ldr	r0, [r7, #12]
 803a0a6:	f000 f97f 	bl	803a3a8 <USBD_CoreFindEP>
 803a0aa:	4603      	mov	r3, r0
 803a0ac:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 803a0ae:	7dfb      	ldrb	r3, [r7, #23]
 803a0b0:	2bff      	cmp	r3, #255	; 0xff
 803a0b2:	d025      	beq.n	803a100 <USBD_LL_DataInStage+0x15a>
 803a0b4:	7dfb      	ldrb	r3, [r7, #23]
 803a0b6:	2b00      	cmp	r3, #0
 803a0b8:	d122      	bne.n	803a100 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803a0ba:	68fb      	ldr	r3, [r7, #12]
 803a0bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803a0c0:	b2db      	uxtb	r3, r3
 803a0c2:	2b03      	cmp	r3, #3
 803a0c4:	d11c      	bne.n	803a100 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 803a0c6:	7dfa      	ldrb	r2, [r7, #23]
 803a0c8:	68fb      	ldr	r3, [r7, #12]
 803a0ca:	32ae      	adds	r2, #174	; 0xae
 803a0cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803a0d0:	695b      	ldr	r3, [r3, #20]
 803a0d2:	2b00      	cmp	r3, #0
 803a0d4:	d014      	beq.n	803a100 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 803a0d6:	7dfa      	ldrb	r2, [r7, #23]
 803a0d8:	68fb      	ldr	r3, [r7, #12]
 803a0da:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 803a0de:	7dfa      	ldrb	r2, [r7, #23]
 803a0e0:	68fb      	ldr	r3, [r7, #12]
 803a0e2:	32ae      	adds	r2, #174	; 0xae
 803a0e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803a0e8:	695b      	ldr	r3, [r3, #20]
 803a0ea:	7afa      	ldrb	r2, [r7, #11]
 803a0ec:	4611      	mov	r1, r2
 803a0ee:	68f8      	ldr	r0, [r7, #12]
 803a0f0:	4798      	blx	r3
 803a0f2:	4603      	mov	r3, r0
 803a0f4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 803a0f6:	7dbb      	ldrb	r3, [r7, #22]
 803a0f8:	2b00      	cmp	r3, #0
 803a0fa:	d001      	beq.n	803a100 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 803a0fc:	7dbb      	ldrb	r3, [r7, #22]
 803a0fe:	e000      	b.n	803a102 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 803a100:	2300      	movs	r3, #0
}
 803a102:	4618      	mov	r0, r3
 803a104:	3718      	adds	r7, #24
 803a106:	46bd      	mov	sp, r7
 803a108:	bd80      	pop	{r7, pc}

0803a10a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 803a10a:	b580      	push	{r7, lr}
 803a10c:	b084      	sub	sp, #16
 803a10e:	af00      	add	r7, sp, #0
 803a110:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 803a112:	2300      	movs	r3, #0
 803a114:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 803a116:	687b      	ldr	r3, [r7, #4]
 803a118:	2201      	movs	r2, #1
 803a11a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 803a11e:	687b      	ldr	r3, [r7, #4]
 803a120:	2200      	movs	r2, #0
 803a122:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 803a126:	687b      	ldr	r3, [r7, #4]
 803a128:	2200      	movs	r2, #0
 803a12a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 803a12c:	687b      	ldr	r3, [r7, #4]
 803a12e:	2200      	movs	r2, #0
 803a130:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 803a134:	687b      	ldr	r3, [r7, #4]
 803a136:	2200      	movs	r2, #0
 803a138:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 803a13c:	687b      	ldr	r3, [r7, #4]
 803a13e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803a142:	2b00      	cmp	r3, #0
 803a144:	d014      	beq.n	803a170 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 803a146:	687b      	ldr	r3, [r7, #4]
 803a148:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803a14c:	685b      	ldr	r3, [r3, #4]
 803a14e:	2b00      	cmp	r3, #0
 803a150:	d00e      	beq.n	803a170 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 803a152:	687b      	ldr	r3, [r7, #4]
 803a154:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803a158:	685b      	ldr	r3, [r3, #4]
 803a15a:	687a      	ldr	r2, [r7, #4]
 803a15c:	6852      	ldr	r2, [r2, #4]
 803a15e:	b2d2      	uxtb	r2, r2
 803a160:	4611      	mov	r1, r2
 803a162:	6878      	ldr	r0, [r7, #4]
 803a164:	4798      	blx	r3
 803a166:	4603      	mov	r3, r0
 803a168:	2b00      	cmp	r3, #0
 803a16a:	d001      	beq.n	803a170 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 803a16c:	2303      	movs	r3, #3
 803a16e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 803a170:	2340      	movs	r3, #64	; 0x40
 803a172:	2200      	movs	r2, #0
 803a174:	2100      	movs	r1, #0
 803a176:	6878      	ldr	r0, [r7, #4]
 803a178:	f001 fc05 	bl	803b986 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 803a17c:	687b      	ldr	r3, [r7, #4]
 803a17e:	2201      	movs	r2, #1
 803a180:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 803a184:	687b      	ldr	r3, [r7, #4]
 803a186:	2240      	movs	r2, #64	; 0x40
 803a188:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 803a18c:	2340      	movs	r3, #64	; 0x40
 803a18e:	2200      	movs	r2, #0
 803a190:	2180      	movs	r1, #128	; 0x80
 803a192:	6878      	ldr	r0, [r7, #4]
 803a194:	f001 fbf7 	bl	803b986 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 803a198:	687b      	ldr	r3, [r7, #4]
 803a19a:	2201      	movs	r2, #1
 803a19c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 803a19e:	687b      	ldr	r3, [r7, #4]
 803a1a0:	2240      	movs	r2, #64	; 0x40
 803a1a2:	621a      	str	r2, [r3, #32]

  return ret;
 803a1a4:	7bfb      	ldrb	r3, [r7, #15]
}
 803a1a6:	4618      	mov	r0, r3
 803a1a8:	3710      	adds	r7, #16
 803a1aa:	46bd      	mov	sp, r7
 803a1ac:	bd80      	pop	{r7, pc}

0803a1ae <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 803a1ae:	b480      	push	{r7}
 803a1b0:	b083      	sub	sp, #12
 803a1b2:	af00      	add	r7, sp, #0
 803a1b4:	6078      	str	r0, [r7, #4]
 803a1b6:	460b      	mov	r3, r1
 803a1b8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 803a1ba:	687b      	ldr	r3, [r7, #4]
 803a1bc:	78fa      	ldrb	r2, [r7, #3]
 803a1be:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 803a1c0:	2300      	movs	r3, #0
}
 803a1c2:	4618      	mov	r0, r3
 803a1c4:	370c      	adds	r7, #12
 803a1c6:	46bd      	mov	sp, r7
 803a1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a1cc:	4770      	bx	lr

0803a1ce <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 803a1ce:	b480      	push	{r7}
 803a1d0:	b083      	sub	sp, #12
 803a1d2:	af00      	add	r7, sp, #0
 803a1d4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 803a1d6:	687b      	ldr	r3, [r7, #4]
 803a1d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803a1dc:	b2da      	uxtb	r2, r3
 803a1de:	687b      	ldr	r3, [r7, #4]
 803a1e0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 803a1e4:	687b      	ldr	r3, [r7, #4]
 803a1e6:	2204      	movs	r2, #4
 803a1e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 803a1ec:	2300      	movs	r3, #0
}
 803a1ee:	4618      	mov	r0, r3
 803a1f0:	370c      	adds	r7, #12
 803a1f2:	46bd      	mov	sp, r7
 803a1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a1f8:	4770      	bx	lr

0803a1fa <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 803a1fa:	b480      	push	{r7}
 803a1fc:	b083      	sub	sp, #12
 803a1fe:	af00      	add	r7, sp, #0
 803a200:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 803a202:	687b      	ldr	r3, [r7, #4]
 803a204:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803a208:	b2db      	uxtb	r3, r3
 803a20a:	2b04      	cmp	r3, #4
 803a20c:	d106      	bne.n	803a21c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 803a20e:	687b      	ldr	r3, [r7, #4]
 803a210:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 803a214:	b2da      	uxtb	r2, r3
 803a216:	687b      	ldr	r3, [r7, #4]
 803a218:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 803a21c:	2300      	movs	r3, #0
}
 803a21e:	4618      	mov	r0, r3
 803a220:	370c      	adds	r7, #12
 803a222:	46bd      	mov	sp, r7
 803a224:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a228:	4770      	bx	lr

0803a22a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 803a22a:	b580      	push	{r7, lr}
 803a22c:	b082      	sub	sp, #8
 803a22e:	af00      	add	r7, sp, #0
 803a230:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803a232:	687b      	ldr	r3, [r7, #4]
 803a234:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803a238:	b2db      	uxtb	r3, r3
 803a23a:	2b03      	cmp	r3, #3
 803a23c:	d110      	bne.n	803a260 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 803a23e:	687b      	ldr	r3, [r7, #4]
 803a240:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803a244:	2b00      	cmp	r3, #0
 803a246:	d00b      	beq.n	803a260 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 803a248:	687b      	ldr	r3, [r7, #4]
 803a24a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803a24e:	69db      	ldr	r3, [r3, #28]
 803a250:	2b00      	cmp	r3, #0
 803a252:	d005      	beq.n	803a260 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 803a254:	687b      	ldr	r3, [r7, #4]
 803a256:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803a25a:	69db      	ldr	r3, [r3, #28]
 803a25c:	6878      	ldr	r0, [r7, #4]
 803a25e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 803a260:	2300      	movs	r3, #0
}
 803a262:	4618      	mov	r0, r3
 803a264:	3708      	adds	r7, #8
 803a266:	46bd      	mov	sp, r7
 803a268:	bd80      	pop	{r7, pc}

0803a26a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 803a26a:	b580      	push	{r7, lr}
 803a26c:	b082      	sub	sp, #8
 803a26e:	af00      	add	r7, sp, #0
 803a270:	6078      	str	r0, [r7, #4]
 803a272:	460b      	mov	r3, r1
 803a274:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 803a276:	687b      	ldr	r3, [r7, #4]
 803a278:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803a27c:	687b      	ldr	r3, [r7, #4]
 803a27e:	32ae      	adds	r2, #174	; 0xae
 803a280:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803a284:	2b00      	cmp	r3, #0
 803a286:	d101      	bne.n	803a28c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 803a288:	2303      	movs	r3, #3
 803a28a:	e01c      	b.n	803a2c6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803a28c:	687b      	ldr	r3, [r7, #4]
 803a28e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803a292:	b2db      	uxtb	r3, r3
 803a294:	2b03      	cmp	r3, #3
 803a296:	d115      	bne.n	803a2c4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 803a298:	687b      	ldr	r3, [r7, #4]
 803a29a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803a29e:	687b      	ldr	r3, [r7, #4]
 803a2a0:	32ae      	adds	r2, #174	; 0xae
 803a2a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803a2a6:	6a1b      	ldr	r3, [r3, #32]
 803a2a8:	2b00      	cmp	r3, #0
 803a2aa:	d00b      	beq.n	803a2c4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 803a2ac:	687b      	ldr	r3, [r7, #4]
 803a2ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803a2b2:	687b      	ldr	r3, [r7, #4]
 803a2b4:	32ae      	adds	r2, #174	; 0xae
 803a2b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803a2ba:	6a1b      	ldr	r3, [r3, #32]
 803a2bc:	78fa      	ldrb	r2, [r7, #3]
 803a2be:	4611      	mov	r1, r2
 803a2c0:	6878      	ldr	r0, [r7, #4]
 803a2c2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 803a2c4:	2300      	movs	r3, #0
}
 803a2c6:	4618      	mov	r0, r3
 803a2c8:	3708      	adds	r7, #8
 803a2ca:	46bd      	mov	sp, r7
 803a2cc:	bd80      	pop	{r7, pc}

0803a2ce <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 803a2ce:	b580      	push	{r7, lr}
 803a2d0:	b082      	sub	sp, #8
 803a2d2:	af00      	add	r7, sp, #0
 803a2d4:	6078      	str	r0, [r7, #4]
 803a2d6:	460b      	mov	r3, r1
 803a2d8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 803a2da:	687b      	ldr	r3, [r7, #4]
 803a2dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803a2e0:	687b      	ldr	r3, [r7, #4]
 803a2e2:	32ae      	adds	r2, #174	; 0xae
 803a2e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803a2e8:	2b00      	cmp	r3, #0
 803a2ea:	d101      	bne.n	803a2f0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 803a2ec:	2303      	movs	r3, #3
 803a2ee:	e01c      	b.n	803a32a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803a2f0:	687b      	ldr	r3, [r7, #4]
 803a2f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803a2f6:	b2db      	uxtb	r3, r3
 803a2f8:	2b03      	cmp	r3, #3
 803a2fa:	d115      	bne.n	803a328 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 803a2fc:	687b      	ldr	r3, [r7, #4]
 803a2fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803a302:	687b      	ldr	r3, [r7, #4]
 803a304:	32ae      	adds	r2, #174	; 0xae
 803a306:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803a30a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803a30c:	2b00      	cmp	r3, #0
 803a30e:	d00b      	beq.n	803a328 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 803a310:	687b      	ldr	r3, [r7, #4]
 803a312:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803a316:	687b      	ldr	r3, [r7, #4]
 803a318:	32ae      	adds	r2, #174	; 0xae
 803a31a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803a31e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803a320:	78fa      	ldrb	r2, [r7, #3]
 803a322:	4611      	mov	r1, r2
 803a324:	6878      	ldr	r0, [r7, #4]
 803a326:	4798      	blx	r3
    }
  }

  return USBD_OK;
 803a328:	2300      	movs	r3, #0
}
 803a32a:	4618      	mov	r0, r3
 803a32c:	3708      	adds	r7, #8
 803a32e:	46bd      	mov	sp, r7
 803a330:	bd80      	pop	{r7, pc}

0803a332 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 803a332:	b480      	push	{r7}
 803a334:	b083      	sub	sp, #12
 803a336:	af00      	add	r7, sp, #0
 803a338:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 803a33a:	2300      	movs	r3, #0
}
 803a33c:	4618      	mov	r0, r3
 803a33e:	370c      	adds	r7, #12
 803a340:	46bd      	mov	sp, r7
 803a342:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a346:	4770      	bx	lr

0803a348 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 803a348:	b580      	push	{r7, lr}
 803a34a:	b084      	sub	sp, #16
 803a34c:	af00      	add	r7, sp, #0
 803a34e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 803a350:	2300      	movs	r3, #0
 803a352:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 803a354:	687b      	ldr	r3, [r7, #4]
 803a356:	2201      	movs	r2, #1
 803a358:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 803a35c:	687b      	ldr	r3, [r7, #4]
 803a35e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803a362:	2b00      	cmp	r3, #0
 803a364:	d00e      	beq.n	803a384 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 803a366:	687b      	ldr	r3, [r7, #4]
 803a368:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803a36c:	685b      	ldr	r3, [r3, #4]
 803a36e:	687a      	ldr	r2, [r7, #4]
 803a370:	6852      	ldr	r2, [r2, #4]
 803a372:	b2d2      	uxtb	r2, r2
 803a374:	4611      	mov	r1, r2
 803a376:	6878      	ldr	r0, [r7, #4]
 803a378:	4798      	blx	r3
 803a37a:	4603      	mov	r3, r0
 803a37c:	2b00      	cmp	r3, #0
 803a37e:	d001      	beq.n	803a384 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 803a380:	2303      	movs	r3, #3
 803a382:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 803a384:	7bfb      	ldrb	r3, [r7, #15]
}
 803a386:	4618      	mov	r0, r3
 803a388:	3710      	adds	r7, #16
 803a38a:	46bd      	mov	sp, r7
 803a38c:	bd80      	pop	{r7, pc}

0803a38e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 803a38e:	b480      	push	{r7}
 803a390:	b083      	sub	sp, #12
 803a392:	af00      	add	r7, sp, #0
 803a394:	6078      	str	r0, [r7, #4]
 803a396:	460b      	mov	r3, r1
 803a398:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 803a39a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 803a39c:	4618      	mov	r0, r3
 803a39e:	370c      	adds	r7, #12
 803a3a0:	46bd      	mov	sp, r7
 803a3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a3a6:	4770      	bx	lr

0803a3a8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 803a3a8:	b480      	push	{r7}
 803a3aa:	b083      	sub	sp, #12
 803a3ac:	af00      	add	r7, sp, #0
 803a3ae:	6078      	str	r0, [r7, #4]
 803a3b0:	460b      	mov	r3, r1
 803a3b2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 803a3b4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 803a3b6:	4618      	mov	r0, r3
 803a3b8:	370c      	adds	r7, #12
 803a3ba:	46bd      	mov	sp, r7
 803a3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a3c0:	4770      	bx	lr

0803a3c2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 803a3c2:	b580      	push	{r7, lr}
 803a3c4:	b086      	sub	sp, #24
 803a3c6:	af00      	add	r7, sp, #0
 803a3c8:	6078      	str	r0, [r7, #4]
 803a3ca:	460b      	mov	r3, r1
 803a3cc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 803a3ce:	687b      	ldr	r3, [r7, #4]
 803a3d0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 803a3d2:	687b      	ldr	r3, [r7, #4]
 803a3d4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 803a3d6:	2300      	movs	r3, #0
 803a3d8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 803a3da:	68fb      	ldr	r3, [r7, #12]
 803a3dc:	885b      	ldrh	r3, [r3, #2]
 803a3de:	b29a      	uxth	r2, r3
 803a3e0:	68fb      	ldr	r3, [r7, #12]
 803a3e2:	781b      	ldrb	r3, [r3, #0]
 803a3e4:	b29b      	uxth	r3, r3
 803a3e6:	429a      	cmp	r2, r3
 803a3e8:	d920      	bls.n	803a42c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 803a3ea:	68fb      	ldr	r3, [r7, #12]
 803a3ec:	781b      	ldrb	r3, [r3, #0]
 803a3ee:	b29b      	uxth	r3, r3
 803a3f0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 803a3f2:	e013      	b.n	803a41c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 803a3f4:	f107 030a 	add.w	r3, r7, #10
 803a3f8:	4619      	mov	r1, r3
 803a3fa:	6978      	ldr	r0, [r7, #20]
 803a3fc:	f000 f81b 	bl	803a436 <USBD_GetNextDesc>
 803a400:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 803a402:	697b      	ldr	r3, [r7, #20]
 803a404:	785b      	ldrb	r3, [r3, #1]
 803a406:	2b05      	cmp	r3, #5
 803a408:	d108      	bne.n	803a41c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 803a40a:	697b      	ldr	r3, [r7, #20]
 803a40c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 803a40e:	693b      	ldr	r3, [r7, #16]
 803a410:	789b      	ldrb	r3, [r3, #2]
 803a412:	78fa      	ldrb	r2, [r7, #3]
 803a414:	429a      	cmp	r2, r3
 803a416:	d008      	beq.n	803a42a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 803a418:	2300      	movs	r3, #0
 803a41a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 803a41c:	68fb      	ldr	r3, [r7, #12]
 803a41e:	885b      	ldrh	r3, [r3, #2]
 803a420:	b29a      	uxth	r2, r3
 803a422:	897b      	ldrh	r3, [r7, #10]
 803a424:	429a      	cmp	r2, r3
 803a426:	d8e5      	bhi.n	803a3f4 <USBD_GetEpDesc+0x32>
 803a428:	e000      	b.n	803a42c <USBD_GetEpDesc+0x6a>
          break;
 803a42a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 803a42c:	693b      	ldr	r3, [r7, #16]
}
 803a42e:	4618      	mov	r0, r3
 803a430:	3718      	adds	r7, #24
 803a432:	46bd      	mov	sp, r7
 803a434:	bd80      	pop	{r7, pc}

0803a436 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 803a436:	b480      	push	{r7}
 803a438:	b085      	sub	sp, #20
 803a43a:	af00      	add	r7, sp, #0
 803a43c:	6078      	str	r0, [r7, #4]
 803a43e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 803a440:	687b      	ldr	r3, [r7, #4]
 803a442:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 803a444:	683b      	ldr	r3, [r7, #0]
 803a446:	881a      	ldrh	r2, [r3, #0]
 803a448:	68fb      	ldr	r3, [r7, #12]
 803a44a:	781b      	ldrb	r3, [r3, #0]
 803a44c:	b29b      	uxth	r3, r3
 803a44e:	4413      	add	r3, r2
 803a450:	b29a      	uxth	r2, r3
 803a452:	683b      	ldr	r3, [r7, #0]
 803a454:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 803a456:	68fb      	ldr	r3, [r7, #12]
 803a458:	781b      	ldrb	r3, [r3, #0]
 803a45a:	461a      	mov	r2, r3
 803a45c:	687b      	ldr	r3, [r7, #4]
 803a45e:	4413      	add	r3, r2
 803a460:	60fb      	str	r3, [r7, #12]

  return (pnext);
 803a462:	68fb      	ldr	r3, [r7, #12]
}
 803a464:	4618      	mov	r0, r3
 803a466:	3714      	adds	r7, #20
 803a468:	46bd      	mov	sp, r7
 803a46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a46e:	4770      	bx	lr

0803a470 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 803a470:	b480      	push	{r7}
 803a472:	b087      	sub	sp, #28
 803a474:	af00      	add	r7, sp, #0
 803a476:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 803a478:	687b      	ldr	r3, [r7, #4]
 803a47a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 803a47c:	697b      	ldr	r3, [r7, #20]
 803a47e:	781b      	ldrb	r3, [r3, #0]
 803a480:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 803a482:	697b      	ldr	r3, [r7, #20]
 803a484:	3301      	adds	r3, #1
 803a486:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 803a488:	697b      	ldr	r3, [r7, #20]
 803a48a:	781b      	ldrb	r3, [r3, #0]
 803a48c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 803a48e:	8a3b      	ldrh	r3, [r7, #16]
 803a490:	021b      	lsls	r3, r3, #8
 803a492:	b21a      	sxth	r2, r3
 803a494:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 803a498:	4313      	orrs	r3, r2
 803a49a:	b21b      	sxth	r3, r3
 803a49c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 803a49e:	89fb      	ldrh	r3, [r7, #14]
}
 803a4a0:	4618      	mov	r0, r3
 803a4a2:	371c      	adds	r7, #28
 803a4a4:	46bd      	mov	sp, r7
 803a4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a4aa:	4770      	bx	lr

0803a4ac <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803a4ac:	b580      	push	{r7, lr}
 803a4ae:	b084      	sub	sp, #16
 803a4b0:	af00      	add	r7, sp, #0
 803a4b2:	6078      	str	r0, [r7, #4]
 803a4b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 803a4b6:	2300      	movs	r3, #0
 803a4b8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 803a4ba:	683b      	ldr	r3, [r7, #0]
 803a4bc:	781b      	ldrb	r3, [r3, #0]
 803a4be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 803a4c2:	2b40      	cmp	r3, #64	; 0x40
 803a4c4:	d005      	beq.n	803a4d2 <USBD_StdDevReq+0x26>
 803a4c6:	2b40      	cmp	r3, #64	; 0x40
 803a4c8:	d857      	bhi.n	803a57a <USBD_StdDevReq+0xce>
 803a4ca:	2b00      	cmp	r3, #0
 803a4cc:	d00f      	beq.n	803a4ee <USBD_StdDevReq+0x42>
 803a4ce:	2b20      	cmp	r3, #32
 803a4d0:	d153      	bne.n	803a57a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 803a4d2:	687b      	ldr	r3, [r7, #4]
 803a4d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803a4d8:	687b      	ldr	r3, [r7, #4]
 803a4da:	32ae      	adds	r2, #174	; 0xae
 803a4dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803a4e0:	689b      	ldr	r3, [r3, #8]
 803a4e2:	6839      	ldr	r1, [r7, #0]
 803a4e4:	6878      	ldr	r0, [r7, #4]
 803a4e6:	4798      	blx	r3
 803a4e8:	4603      	mov	r3, r0
 803a4ea:	73fb      	strb	r3, [r7, #15]
      break;
 803a4ec:	e04a      	b.n	803a584 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 803a4ee:	683b      	ldr	r3, [r7, #0]
 803a4f0:	785b      	ldrb	r3, [r3, #1]
 803a4f2:	2b09      	cmp	r3, #9
 803a4f4:	d83b      	bhi.n	803a56e <USBD_StdDevReq+0xc2>
 803a4f6:	a201      	add	r2, pc, #4	; (adr r2, 803a4fc <USBD_StdDevReq+0x50>)
 803a4f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803a4fc:	0803a551 	.word	0x0803a551
 803a500:	0803a565 	.word	0x0803a565
 803a504:	0803a56f 	.word	0x0803a56f
 803a508:	0803a55b 	.word	0x0803a55b
 803a50c:	0803a56f 	.word	0x0803a56f
 803a510:	0803a52f 	.word	0x0803a52f
 803a514:	0803a525 	.word	0x0803a525
 803a518:	0803a56f 	.word	0x0803a56f
 803a51c:	0803a547 	.word	0x0803a547
 803a520:	0803a539 	.word	0x0803a539
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 803a524:	6839      	ldr	r1, [r7, #0]
 803a526:	6878      	ldr	r0, [r7, #4]
 803a528:	f000 fa3c 	bl	803a9a4 <USBD_GetDescriptor>
          break;
 803a52c:	e024      	b.n	803a578 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 803a52e:	6839      	ldr	r1, [r7, #0]
 803a530:	6878      	ldr	r0, [r7, #4]
 803a532:	f000 fba1 	bl	803ac78 <USBD_SetAddress>
          break;
 803a536:	e01f      	b.n	803a578 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 803a538:	6839      	ldr	r1, [r7, #0]
 803a53a:	6878      	ldr	r0, [r7, #4]
 803a53c:	f000 fbe0 	bl	803ad00 <USBD_SetConfig>
 803a540:	4603      	mov	r3, r0
 803a542:	73fb      	strb	r3, [r7, #15]
          break;
 803a544:	e018      	b.n	803a578 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 803a546:	6839      	ldr	r1, [r7, #0]
 803a548:	6878      	ldr	r0, [r7, #4]
 803a54a:	f000 fc83 	bl	803ae54 <USBD_GetConfig>
          break;
 803a54e:	e013      	b.n	803a578 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 803a550:	6839      	ldr	r1, [r7, #0]
 803a552:	6878      	ldr	r0, [r7, #4]
 803a554:	f000 fcb4 	bl	803aec0 <USBD_GetStatus>
          break;
 803a558:	e00e      	b.n	803a578 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 803a55a:	6839      	ldr	r1, [r7, #0]
 803a55c:	6878      	ldr	r0, [r7, #4]
 803a55e:	f000 fce3 	bl	803af28 <USBD_SetFeature>
          break;
 803a562:	e009      	b.n	803a578 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 803a564:	6839      	ldr	r1, [r7, #0]
 803a566:	6878      	ldr	r0, [r7, #4]
 803a568:	f000 fd07 	bl	803af7a <USBD_ClrFeature>
          break;
 803a56c:	e004      	b.n	803a578 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 803a56e:	6839      	ldr	r1, [r7, #0]
 803a570:	6878      	ldr	r0, [r7, #4]
 803a572:	f000 fd5e 	bl	803b032 <USBD_CtlError>
          break;
 803a576:	bf00      	nop
      }
      break;
 803a578:	e004      	b.n	803a584 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 803a57a:	6839      	ldr	r1, [r7, #0]
 803a57c:	6878      	ldr	r0, [r7, #4]
 803a57e:	f000 fd58 	bl	803b032 <USBD_CtlError>
      break;
 803a582:	bf00      	nop
  }

  return ret;
 803a584:	7bfb      	ldrb	r3, [r7, #15]
}
 803a586:	4618      	mov	r0, r3
 803a588:	3710      	adds	r7, #16
 803a58a:	46bd      	mov	sp, r7
 803a58c:	bd80      	pop	{r7, pc}
 803a58e:	bf00      	nop

0803a590 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803a590:	b580      	push	{r7, lr}
 803a592:	b084      	sub	sp, #16
 803a594:	af00      	add	r7, sp, #0
 803a596:	6078      	str	r0, [r7, #4]
 803a598:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 803a59a:	2300      	movs	r3, #0
 803a59c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 803a59e:	683b      	ldr	r3, [r7, #0]
 803a5a0:	781b      	ldrb	r3, [r3, #0]
 803a5a2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 803a5a6:	2b40      	cmp	r3, #64	; 0x40
 803a5a8:	d005      	beq.n	803a5b6 <USBD_StdItfReq+0x26>
 803a5aa:	2b40      	cmp	r3, #64	; 0x40
 803a5ac:	d852      	bhi.n	803a654 <USBD_StdItfReq+0xc4>
 803a5ae:	2b00      	cmp	r3, #0
 803a5b0:	d001      	beq.n	803a5b6 <USBD_StdItfReq+0x26>
 803a5b2:	2b20      	cmp	r3, #32
 803a5b4:	d14e      	bne.n	803a654 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 803a5b6:	687b      	ldr	r3, [r7, #4]
 803a5b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803a5bc:	b2db      	uxtb	r3, r3
 803a5be:	3b01      	subs	r3, #1
 803a5c0:	2b02      	cmp	r3, #2
 803a5c2:	d840      	bhi.n	803a646 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 803a5c4:	683b      	ldr	r3, [r7, #0]
 803a5c6:	889b      	ldrh	r3, [r3, #4]
 803a5c8:	b2db      	uxtb	r3, r3
 803a5ca:	2b01      	cmp	r3, #1
 803a5cc:	d836      	bhi.n	803a63c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 803a5ce:	683b      	ldr	r3, [r7, #0]
 803a5d0:	889b      	ldrh	r3, [r3, #4]
 803a5d2:	b2db      	uxtb	r3, r3
 803a5d4:	4619      	mov	r1, r3
 803a5d6:	6878      	ldr	r0, [r7, #4]
 803a5d8:	f7ff fed9 	bl	803a38e <USBD_CoreFindIF>
 803a5dc:	4603      	mov	r3, r0
 803a5de:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 803a5e0:	7bbb      	ldrb	r3, [r7, #14]
 803a5e2:	2bff      	cmp	r3, #255	; 0xff
 803a5e4:	d01d      	beq.n	803a622 <USBD_StdItfReq+0x92>
 803a5e6:	7bbb      	ldrb	r3, [r7, #14]
 803a5e8:	2b00      	cmp	r3, #0
 803a5ea:	d11a      	bne.n	803a622 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 803a5ec:	7bba      	ldrb	r2, [r7, #14]
 803a5ee:	687b      	ldr	r3, [r7, #4]
 803a5f0:	32ae      	adds	r2, #174	; 0xae
 803a5f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803a5f6:	689b      	ldr	r3, [r3, #8]
 803a5f8:	2b00      	cmp	r3, #0
 803a5fa:	d00f      	beq.n	803a61c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 803a5fc:	7bba      	ldrb	r2, [r7, #14]
 803a5fe:	687b      	ldr	r3, [r7, #4]
 803a600:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 803a604:	7bba      	ldrb	r2, [r7, #14]
 803a606:	687b      	ldr	r3, [r7, #4]
 803a608:	32ae      	adds	r2, #174	; 0xae
 803a60a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803a60e:	689b      	ldr	r3, [r3, #8]
 803a610:	6839      	ldr	r1, [r7, #0]
 803a612:	6878      	ldr	r0, [r7, #4]
 803a614:	4798      	blx	r3
 803a616:	4603      	mov	r3, r0
 803a618:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 803a61a:	e004      	b.n	803a626 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 803a61c:	2303      	movs	r3, #3
 803a61e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 803a620:	e001      	b.n	803a626 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 803a622:	2303      	movs	r3, #3
 803a624:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 803a626:	683b      	ldr	r3, [r7, #0]
 803a628:	88db      	ldrh	r3, [r3, #6]
 803a62a:	2b00      	cmp	r3, #0
 803a62c:	d110      	bne.n	803a650 <USBD_StdItfReq+0xc0>
 803a62e:	7bfb      	ldrb	r3, [r7, #15]
 803a630:	2b00      	cmp	r3, #0
 803a632:	d10d      	bne.n	803a650 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 803a634:	6878      	ldr	r0, [r7, #4]
 803a636:	f000 fdc7 	bl	803b1c8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 803a63a:	e009      	b.n	803a650 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 803a63c:	6839      	ldr	r1, [r7, #0]
 803a63e:	6878      	ldr	r0, [r7, #4]
 803a640:	f000 fcf7 	bl	803b032 <USBD_CtlError>
          break;
 803a644:	e004      	b.n	803a650 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 803a646:	6839      	ldr	r1, [r7, #0]
 803a648:	6878      	ldr	r0, [r7, #4]
 803a64a:	f000 fcf2 	bl	803b032 <USBD_CtlError>
          break;
 803a64e:	e000      	b.n	803a652 <USBD_StdItfReq+0xc2>
          break;
 803a650:	bf00      	nop
      }
      break;
 803a652:	e004      	b.n	803a65e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 803a654:	6839      	ldr	r1, [r7, #0]
 803a656:	6878      	ldr	r0, [r7, #4]
 803a658:	f000 fceb 	bl	803b032 <USBD_CtlError>
      break;
 803a65c:	bf00      	nop
  }

  return ret;
 803a65e:	7bfb      	ldrb	r3, [r7, #15]
}
 803a660:	4618      	mov	r0, r3
 803a662:	3710      	adds	r7, #16
 803a664:	46bd      	mov	sp, r7
 803a666:	bd80      	pop	{r7, pc}

0803a668 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803a668:	b580      	push	{r7, lr}
 803a66a:	b084      	sub	sp, #16
 803a66c:	af00      	add	r7, sp, #0
 803a66e:	6078      	str	r0, [r7, #4]
 803a670:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 803a672:	2300      	movs	r3, #0
 803a674:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 803a676:	683b      	ldr	r3, [r7, #0]
 803a678:	889b      	ldrh	r3, [r3, #4]
 803a67a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 803a67c:	683b      	ldr	r3, [r7, #0]
 803a67e:	781b      	ldrb	r3, [r3, #0]
 803a680:	f003 0360 	and.w	r3, r3, #96	; 0x60
 803a684:	2b40      	cmp	r3, #64	; 0x40
 803a686:	d007      	beq.n	803a698 <USBD_StdEPReq+0x30>
 803a688:	2b40      	cmp	r3, #64	; 0x40
 803a68a:	f200 817f 	bhi.w	803a98c <USBD_StdEPReq+0x324>
 803a68e:	2b00      	cmp	r3, #0
 803a690:	d02a      	beq.n	803a6e8 <USBD_StdEPReq+0x80>
 803a692:	2b20      	cmp	r3, #32
 803a694:	f040 817a 	bne.w	803a98c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 803a698:	7bbb      	ldrb	r3, [r7, #14]
 803a69a:	4619      	mov	r1, r3
 803a69c:	6878      	ldr	r0, [r7, #4]
 803a69e:	f7ff fe83 	bl	803a3a8 <USBD_CoreFindEP>
 803a6a2:	4603      	mov	r3, r0
 803a6a4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 803a6a6:	7b7b      	ldrb	r3, [r7, #13]
 803a6a8:	2bff      	cmp	r3, #255	; 0xff
 803a6aa:	f000 8174 	beq.w	803a996 <USBD_StdEPReq+0x32e>
 803a6ae:	7b7b      	ldrb	r3, [r7, #13]
 803a6b0:	2b00      	cmp	r3, #0
 803a6b2:	f040 8170 	bne.w	803a996 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 803a6b6:	7b7a      	ldrb	r2, [r7, #13]
 803a6b8:	687b      	ldr	r3, [r7, #4]
 803a6ba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 803a6be:	7b7a      	ldrb	r2, [r7, #13]
 803a6c0:	687b      	ldr	r3, [r7, #4]
 803a6c2:	32ae      	adds	r2, #174	; 0xae
 803a6c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803a6c8:	689b      	ldr	r3, [r3, #8]
 803a6ca:	2b00      	cmp	r3, #0
 803a6cc:	f000 8163 	beq.w	803a996 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 803a6d0:	7b7a      	ldrb	r2, [r7, #13]
 803a6d2:	687b      	ldr	r3, [r7, #4]
 803a6d4:	32ae      	adds	r2, #174	; 0xae
 803a6d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803a6da:	689b      	ldr	r3, [r3, #8]
 803a6dc:	6839      	ldr	r1, [r7, #0]
 803a6de:	6878      	ldr	r0, [r7, #4]
 803a6e0:	4798      	blx	r3
 803a6e2:	4603      	mov	r3, r0
 803a6e4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 803a6e6:	e156      	b.n	803a996 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 803a6e8:	683b      	ldr	r3, [r7, #0]
 803a6ea:	785b      	ldrb	r3, [r3, #1]
 803a6ec:	2b03      	cmp	r3, #3
 803a6ee:	d008      	beq.n	803a702 <USBD_StdEPReq+0x9a>
 803a6f0:	2b03      	cmp	r3, #3
 803a6f2:	f300 8145 	bgt.w	803a980 <USBD_StdEPReq+0x318>
 803a6f6:	2b00      	cmp	r3, #0
 803a6f8:	f000 809b 	beq.w	803a832 <USBD_StdEPReq+0x1ca>
 803a6fc:	2b01      	cmp	r3, #1
 803a6fe:	d03c      	beq.n	803a77a <USBD_StdEPReq+0x112>
 803a700:	e13e      	b.n	803a980 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 803a702:	687b      	ldr	r3, [r7, #4]
 803a704:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803a708:	b2db      	uxtb	r3, r3
 803a70a:	2b02      	cmp	r3, #2
 803a70c:	d002      	beq.n	803a714 <USBD_StdEPReq+0xac>
 803a70e:	2b03      	cmp	r3, #3
 803a710:	d016      	beq.n	803a740 <USBD_StdEPReq+0xd8>
 803a712:	e02c      	b.n	803a76e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 803a714:	7bbb      	ldrb	r3, [r7, #14]
 803a716:	2b00      	cmp	r3, #0
 803a718:	d00d      	beq.n	803a736 <USBD_StdEPReq+0xce>
 803a71a:	7bbb      	ldrb	r3, [r7, #14]
 803a71c:	2b80      	cmp	r3, #128	; 0x80
 803a71e:	d00a      	beq.n	803a736 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 803a720:	7bbb      	ldrb	r3, [r7, #14]
 803a722:	4619      	mov	r1, r3
 803a724:	6878      	ldr	r0, [r7, #4]
 803a726:	f001 f973 	bl	803ba10 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 803a72a:	2180      	movs	r1, #128	; 0x80
 803a72c:	6878      	ldr	r0, [r7, #4]
 803a72e:	f001 f96f 	bl	803ba10 <USBD_LL_StallEP>
 803a732:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 803a734:	e020      	b.n	803a778 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 803a736:	6839      	ldr	r1, [r7, #0]
 803a738:	6878      	ldr	r0, [r7, #4]
 803a73a:	f000 fc7a 	bl	803b032 <USBD_CtlError>
              break;
 803a73e:	e01b      	b.n	803a778 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 803a740:	683b      	ldr	r3, [r7, #0]
 803a742:	885b      	ldrh	r3, [r3, #2]
 803a744:	2b00      	cmp	r3, #0
 803a746:	d10e      	bne.n	803a766 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 803a748:	7bbb      	ldrb	r3, [r7, #14]
 803a74a:	2b00      	cmp	r3, #0
 803a74c:	d00b      	beq.n	803a766 <USBD_StdEPReq+0xfe>
 803a74e:	7bbb      	ldrb	r3, [r7, #14]
 803a750:	2b80      	cmp	r3, #128	; 0x80
 803a752:	d008      	beq.n	803a766 <USBD_StdEPReq+0xfe>
 803a754:	683b      	ldr	r3, [r7, #0]
 803a756:	88db      	ldrh	r3, [r3, #6]
 803a758:	2b00      	cmp	r3, #0
 803a75a:	d104      	bne.n	803a766 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 803a75c:	7bbb      	ldrb	r3, [r7, #14]
 803a75e:	4619      	mov	r1, r3
 803a760:	6878      	ldr	r0, [r7, #4]
 803a762:	f001 f955 	bl	803ba10 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 803a766:	6878      	ldr	r0, [r7, #4]
 803a768:	f000 fd2e 	bl	803b1c8 <USBD_CtlSendStatus>

              break;
 803a76c:	e004      	b.n	803a778 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 803a76e:	6839      	ldr	r1, [r7, #0]
 803a770:	6878      	ldr	r0, [r7, #4]
 803a772:	f000 fc5e 	bl	803b032 <USBD_CtlError>
              break;
 803a776:	bf00      	nop
          }
          break;
 803a778:	e107      	b.n	803a98a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 803a77a:	687b      	ldr	r3, [r7, #4]
 803a77c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803a780:	b2db      	uxtb	r3, r3
 803a782:	2b02      	cmp	r3, #2
 803a784:	d002      	beq.n	803a78c <USBD_StdEPReq+0x124>
 803a786:	2b03      	cmp	r3, #3
 803a788:	d016      	beq.n	803a7b8 <USBD_StdEPReq+0x150>
 803a78a:	e04b      	b.n	803a824 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 803a78c:	7bbb      	ldrb	r3, [r7, #14]
 803a78e:	2b00      	cmp	r3, #0
 803a790:	d00d      	beq.n	803a7ae <USBD_StdEPReq+0x146>
 803a792:	7bbb      	ldrb	r3, [r7, #14]
 803a794:	2b80      	cmp	r3, #128	; 0x80
 803a796:	d00a      	beq.n	803a7ae <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 803a798:	7bbb      	ldrb	r3, [r7, #14]
 803a79a:	4619      	mov	r1, r3
 803a79c:	6878      	ldr	r0, [r7, #4]
 803a79e:	f001 f937 	bl	803ba10 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 803a7a2:	2180      	movs	r1, #128	; 0x80
 803a7a4:	6878      	ldr	r0, [r7, #4]
 803a7a6:	f001 f933 	bl	803ba10 <USBD_LL_StallEP>
 803a7aa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 803a7ac:	e040      	b.n	803a830 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 803a7ae:	6839      	ldr	r1, [r7, #0]
 803a7b0:	6878      	ldr	r0, [r7, #4]
 803a7b2:	f000 fc3e 	bl	803b032 <USBD_CtlError>
              break;
 803a7b6:	e03b      	b.n	803a830 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 803a7b8:	683b      	ldr	r3, [r7, #0]
 803a7ba:	885b      	ldrh	r3, [r3, #2]
 803a7bc:	2b00      	cmp	r3, #0
 803a7be:	d136      	bne.n	803a82e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 803a7c0:	7bbb      	ldrb	r3, [r7, #14]
 803a7c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 803a7c6:	2b00      	cmp	r3, #0
 803a7c8:	d004      	beq.n	803a7d4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 803a7ca:	7bbb      	ldrb	r3, [r7, #14]
 803a7cc:	4619      	mov	r1, r3
 803a7ce:	6878      	ldr	r0, [r7, #4]
 803a7d0:	f001 f93d 	bl	803ba4e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 803a7d4:	6878      	ldr	r0, [r7, #4]
 803a7d6:	f000 fcf7 	bl	803b1c8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 803a7da:	7bbb      	ldrb	r3, [r7, #14]
 803a7dc:	4619      	mov	r1, r3
 803a7de:	6878      	ldr	r0, [r7, #4]
 803a7e0:	f7ff fde2 	bl	803a3a8 <USBD_CoreFindEP>
 803a7e4:	4603      	mov	r3, r0
 803a7e6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 803a7e8:	7b7b      	ldrb	r3, [r7, #13]
 803a7ea:	2bff      	cmp	r3, #255	; 0xff
 803a7ec:	d01f      	beq.n	803a82e <USBD_StdEPReq+0x1c6>
 803a7ee:	7b7b      	ldrb	r3, [r7, #13]
 803a7f0:	2b00      	cmp	r3, #0
 803a7f2:	d11c      	bne.n	803a82e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 803a7f4:	7b7a      	ldrb	r2, [r7, #13]
 803a7f6:	687b      	ldr	r3, [r7, #4]
 803a7f8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 803a7fc:	7b7a      	ldrb	r2, [r7, #13]
 803a7fe:	687b      	ldr	r3, [r7, #4]
 803a800:	32ae      	adds	r2, #174	; 0xae
 803a802:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803a806:	689b      	ldr	r3, [r3, #8]
 803a808:	2b00      	cmp	r3, #0
 803a80a:	d010      	beq.n	803a82e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 803a80c:	7b7a      	ldrb	r2, [r7, #13]
 803a80e:	687b      	ldr	r3, [r7, #4]
 803a810:	32ae      	adds	r2, #174	; 0xae
 803a812:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803a816:	689b      	ldr	r3, [r3, #8]
 803a818:	6839      	ldr	r1, [r7, #0]
 803a81a:	6878      	ldr	r0, [r7, #4]
 803a81c:	4798      	blx	r3
 803a81e:	4603      	mov	r3, r0
 803a820:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 803a822:	e004      	b.n	803a82e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 803a824:	6839      	ldr	r1, [r7, #0]
 803a826:	6878      	ldr	r0, [r7, #4]
 803a828:	f000 fc03 	bl	803b032 <USBD_CtlError>
              break;
 803a82c:	e000      	b.n	803a830 <USBD_StdEPReq+0x1c8>
              break;
 803a82e:	bf00      	nop
          }
          break;
 803a830:	e0ab      	b.n	803a98a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 803a832:	687b      	ldr	r3, [r7, #4]
 803a834:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803a838:	b2db      	uxtb	r3, r3
 803a83a:	2b02      	cmp	r3, #2
 803a83c:	d002      	beq.n	803a844 <USBD_StdEPReq+0x1dc>
 803a83e:	2b03      	cmp	r3, #3
 803a840:	d032      	beq.n	803a8a8 <USBD_StdEPReq+0x240>
 803a842:	e097      	b.n	803a974 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 803a844:	7bbb      	ldrb	r3, [r7, #14]
 803a846:	2b00      	cmp	r3, #0
 803a848:	d007      	beq.n	803a85a <USBD_StdEPReq+0x1f2>
 803a84a:	7bbb      	ldrb	r3, [r7, #14]
 803a84c:	2b80      	cmp	r3, #128	; 0x80
 803a84e:	d004      	beq.n	803a85a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 803a850:	6839      	ldr	r1, [r7, #0]
 803a852:	6878      	ldr	r0, [r7, #4]
 803a854:	f000 fbed 	bl	803b032 <USBD_CtlError>
                break;
 803a858:	e091      	b.n	803a97e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 803a85a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 803a85e:	2b00      	cmp	r3, #0
 803a860:	da0b      	bge.n	803a87a <USBD_StdEPReq+0x212>
 803a862:	7bbb      	ldrb	r3, [r7, #14]
 803a864:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 803a868:	4613      	mov	r3, r2
 803a86a:	009b      	lsls	r3, r3, #2
 803a86c:	4413      	add	r3, r2
 803a86e:	009b      	lsls	r3, r3, #2
 803a870:	3310      	adds	r3, #16
 803a872:	687a      	ldr	r2, [r7, #4]
 803a874:	4413      	add	r3, r2
 803a876:	3304      	adds	r3, #4
 803a878:	e00b      	b.n	803a892 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 803a87a:	7bbb      	ldrb	r3, [r7, #14]
 803a87c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 803a880:	4613      	mov	r3, r2
 803a882:	009b      	lsls	r3, r3, #2
 803a884:	4413      	add	r3, r2
 803a886:	009b      	lsls	r3, r3, #2
 803a888:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 803a88c:	687a      	ldr	r2, [r7, #4]
 803a88e:	4413      	add	r3, r2
 803a890:	3304      	adds	r3, #4
 803a892:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 803a894:	68bb      	ldr	r3, [r7, #8]
 803a896:	2200      	movs	r2, #0
 803a898:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 803a89a:	68bb      	ldr	r3, [r7, #8]
 803a89c:	2202      	movs	r2, #2
 803a89e:	4619      	mov	r1, r3
 803a8a0:	6878      	ldr	r0, [r7, #4]
 803a8a2:	f000 fc37 	bl	803b114 <USBD_CtlSendData>
              break;
 803a8a6:	e06a      	b.n	803a97e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 803a8a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 803a8ac:	2b00      	cmp	r3, #0
 803a8ae:	da11      	bge.n	803a8d4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 803a8b0:	7bbb      	ldrb	r3, [r7, #14]
 803a8b2:	f003 020f 	and.w	r2, r3, #15
 803a8b6:	6879      	ldr	r1, [r7, #4]
 803a8b8:	4613      	mov	r3, r2
 803a8ba:	009b      	lsls	r3, r3, #2
 803a8bc:	4413      	add	r3, r2
 803a8be:	009b      	lsls	r3, r3, #2
 803a8c0:	440b      	add	r3, r1
 803a8c2:	3324      	adds	r3, #36	; 0x24
 803a8c4:	881b      	ldrh	r3, [r3, #0]
 803a8c6:	2b00      	cmp	r3, #0
 803a8c8:	d117      	bne.n	803a8fa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 803a8ca:	6839      	ldr	r1, [r7, #0]
 803a8cc:	6878      	ldr	r0, [r7, #4]
 803a8ce:	f000 fbb0 	bl	803b032 <USBD_CtlError>
                  break;
 803a8d2:	e054      	b.n	803a97e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 803a8d4:	7bbb      	ldrb	r3, [r7, #14]
 803a8d6:	f003 020f 	and.w	r2, r3, #15
 803a8da:	6879      	ldr	r1, [r7, #4]
 803a8dc:	4613      	mov	r3, r2
 803a8de:	009b      	lsls	r3, r3, #2
 803a8e0:	4413      	add	r3, r2
 803a8e2:	009b      	lsls	r3, r3, #2
 803a8e4:	440b      	add	r3, r1
 803a8e6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 803a8ea:	881b      	ldrh	r3, [r3, #0]
 803a8ec:	2b00      	cmp	r3, #0
 803a8ee:	d104      	bne.n	803a8fa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 803a8f0:	6839      	ldr	r1, [r7, #0]
 803a8f2:	6878      	ldr	r0, [r7, #4]
 803a8f4:	f000 fb9d 	bl	803b032 <USBD_CtlError>
                  break;
 803a8f8:	e041      	b.n	803a97e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 803a8fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 803a8fe:	2b00      	cmp	r3, #0
 803a900:	da0b      	bge.n	803a91a <USBD_StdEPReq+0x2b2>
 803a902:	7bbb      	ldrb	r3, [r7, #14]
 803a904:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 803a908:	4613      	mov	r3, r2
 803a90a:	009b      	lsls	r3, r3, #2
 803a90c:	4413      	add	r3, r2
 803a90e:	009b      	lsls	r3, r3, #2
 803a910:	3310      	adds	r3, #16
 803a912:	687a      	ldr	r2, [r7, #4]
 803a914:	4413      	add	r3, r2
 803a916:	3304      	adds	r3, #4
 803a918:	e00b      	b.n	803a932 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 803a91a:	7bbb      	ldrb	r3, [r7, #14]
 803a91c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 803a920:	4613      	mov	r3, r2
 803a922:	009b      	lsls	r3, r3, #2
 803a924:	4413      	add	r3, r2
 803a926:	009b      	lsls	r3, r3, #2
 803a928:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 803a92c:	687a      	ldr	r2, [r7, #4]
 803a92e:	4413      	add	r3, r2
 803a930:	3304      	adds	r3, #4
 803a932:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 803a934:	7bbb      	ldrb	r3, [r7, #14]
 803a936:	2b00      	cmp	r3, #0
 803a938:	d002      	beq.n	803a940 <USBD_StdEPReq+0x2d8>
 803a93a:	7bbb      	ldrb	r3, [r7, #14]
 803a93c:	2b80      	cmp	r3, #128	; 0x80
 803a93e:	d103      	bne.n	803a948 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 803a940:	68bb      	ldr	r3, [r7, #8]
 803a942:	2200      	movs	r2, #0
 803a944:	601a      	str	r2, [r3, #0]
 803a946:	e00e      	b.n	803a966 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 803a948:	7bbb      	ldrb	r3, [r7, #14]
 803a94a:	4619      	mov	r1, r3
 803a94c:	6878      	ldr	r0, [r7, #4]
 803a94e:	f001 f89d 	bl	803ba8c <USBD_LL_IsStallEP>
 803a952:	4603      	mov	r3, r0
 803a954:	2b00      	cmp	r3, #0
 803a956:	d003      	beq.n	803a960 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 803a958:	68bb      	ldr	r3, [r7, #8]
 803a95a:	2201      	movs	r2, #1
 803a95c:	601a      	str	r2, [r3, #0]
 803a95e:	e002      	b.n	803a966 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 803a960:	68bb      	ldr	r3, [r7, #8]
 803a962:	2200      	movs	r2, #0
 803a964:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 803a966:	68bb      	ldr	r3, [r7, #8]
 803a968:	2202      	movs	r2, #2
 803a96a:	4619      	mov	r1, r3
 803a96c:	6878      	ldr	r0, [r7, #4]
 803a96e:	f000 fbd1 	bl	803b114 <USBD_CtlSendData>
              break;
 803a972:	e004      	b.n	803a97e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 803a974:	6839      	ldr	r1, [r7, #0]
 803a976:	6878      	ldr	r0, [r7, #4]
 803a978:	f000 fb5b 	bl	803b032 <USBD_CtlError>
              break;
 803a97c:	bf00      	nop
          }
          break;
 803a97e:	e004      	b.n	803a98a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 803a980:	6839      	ldr	r1, [r7, #0]
 803a982:	6878      	ldr	r0, [r7, #4]
 803a984:	f000 fb55 	bl	803b032 <USBD_CtlError>
          break;
 803a988:	bf00      	nop
      }
      break;
 803a98a:	e005      	b.n	803a998 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 803a98c:	6839      	ldr	r1, [r7, #0]
 803a98e:	6878      	ldr	r0, [r7, #4]
 803a990:	f000 fb4f 	bl	803b032 <USBD_CtlError>
      break;
 803a994:	e000      	b.n	803a998 <USBD_StdEPReq+0x330>
      break;
 803a996:	bf00      	nop
  }

  return ret;
 803a998:	7bfb      	ldrb	r3, [r7, #15]
}
 803a99a:	4618      	mov	r0, r3
 803a99c:	3710      	adds	r7, #16
 803a99e:	46bd      	mov	sp, r7
 803a9a0:	bd80      	pop	{r7, pc}
	...

0803a9a4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803a9a4:	b580      	push	{r7, lr}
 803a9a6:	b084      	sub	sp, #16
 803a9a8:	af00      	add	r7, sp, #0
 803a9aa:	6078      	str	r0, [r7, #4]
 803a9ac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 803a9ae:	2300      	movs	r3, #0
 803a9b0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 803a9b2:	2300      	movs	r3, #0
 803a9b4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 803a9b6:	2300      	movs	r3, #0
 803a9b8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 803a9ba:	683b      	ldr	r3, [r7, #0]
 803a9bc:	885b      	ldrh	r3, [r3, #2]
 803a9be:	0a1b      	lsrs	r3, r3, #8
 803a9c0:	b29b      	uxth	r3, r3
 803a9c2:	3b01      	subs	r3, #1
 803a9c4:	2b06      	cmp	r3, #6
 803a9c6:	f200 8128 	bhi.w	803ac1a <USBD_GetDescriptor+0x276>
 803a9ca:	a201      	add	r2, pc, #4	; (adr r2, 803a9d0 <USBD_GetDescriptor+0x2c>)
 803a9cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803a9d0:	0803a9ed 	.word	0x0803a9ed
 803a9d4:	0803aa05 	.word	0x0803aa05
 803a9d8:	0803aa45 	.word	0x0803aa45
 803a9dc:	0803ac1b 	.word	0x0803ac1b
 803a9e0:	0803ac1b 	.word	0x0803ac1b
 803a9e4:	0803abbb 	.word	0x0803abbb
 803a9e8:	0803abe7 	.word	0x0803abe7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 803a9ec:	687b      	ldr	r3, [r7, #4]
 803a9ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803a9f2:	681b      	ldr	r3, [r3, #0]
 803a9f4:	687a      	ldr	r2, [r7, #4]
 803a9f6:	7c12      	ldrb	r2, [r2, #16]
 803a9f8:	f107 0108 	add.w	r1, r7, #8
 803a9fc:	4610      	mov	r0, r2
 803a9fe:	4798      	blx	r3
 803aa00:	60f8      	str	r0, [r7, #12]
      break;
 803aa02:	e112      	b.n	803ac2a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 803aa04:	687b      	ldr	r3, [r7, #4]
 803aa06:	7c1b      	ldrb	r3, [r3, #16]
 803aa08:	2b00      	cmp	r3, #0
 803aa0a:	d10d      	bne.n	803aa28 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 803aa0c:	687b      	ldr	r3, [r7, #4]
 803aa0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803aa12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 803aa14:	f107 0208 	add.w	r2, r7, #8
 803aa18:	4610      	mov	r0, r2
 803aa1a:	4798      	blx	r3
 803aa1c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 803aa1e:	68fb      	ldr	r3, [r7, #12]
 803aa20:	3301      	adds	r3, #1
 803aa22:	2202      	movs	r2, #2
 803aa24:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 803aa26:	e100      	b.n	803ac2a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 803aa28:	687b      	ldr	r3, [r7, #4]
 803aa2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803aa2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803aa30:	f107 0208 	add.w	r2, r7, #8
 803aa34:	4610      	mov	r0, r2
 803aa36:	4798      	blx	r3
 803aa38:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 803aa3a:	68fb      	ldr	r3, [r7, #12]
 803aa3c:	3301      	adds	r3, #1
 803aa3e:	2202      	movs	r2, #2
 803aa40:	701a      	strb	r2, [r3, #0]
      break;
 803aa42:	e0f2      	b.n	803ac2a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 803aa44:	683b      	ldr	r3, [r7, #0]
 803aa46:	885b      	ldrh	r3, [r3, #2]
 803aa48:	b2db      	uxtb	r3, r3
 803aa4a:	2b05      	cmp	r3, #5
 803aa4c:	f200 80ac 	bhi.w	803aba8 <USBD_GetDescriptor+0x204>
 803aa50:	a201      	add	r2, pc, #4	; (adr r2, 803aa58 <USBD_GetDescriptor+0xb4>)
 803aa52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803aa56:	bf00      	nop
 803aa58:	0803aa71 	.word	0x0803aa71
 803aa5c:	0803aaa5 	.word	0x0803aaa5
 803aa60:	0803aad9 	.word	0x0803aad9
 803aa64:	0803ab0d 	.word	0x0803ab0d
 803aa68:	0803ab41 	.word	0x0803ab41
 803aa6c:	0803ab75 	.word	0x0803ab75
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 803aa70:	687b      	ldr	r3, [r7, #4]
 803aa72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803aa76:	685b      	ldr	r3, [r3, #4]
 803aa78:	2b00      	cmp	r3, #0
 803aa7a:	d00b      	beq.n	803aa94 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 803aa7c:	687b      	ldr	r3, [r7, #4]
 803aa7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803aa82:	685b      	ldr	r3, [r3, #4]
 803aa84:	687a      	ldr	r2, [r7, #4]
 803aa86:	7c12      	ldrb	r2, [r2, #16]
 803aa88:	f107 0108 	add.w	r1, r7, #8
 803aa8c:	4610      	mov	r0, r2
 803aa8e:	4798      	blx	r3
 803aa90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 803aa92:	e091      	b.n	803abb8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 803aa94:	6839      	ldr	r1, [r7, #0]
 803aa96:	6878      	ldr	r0, [r7, #4]
 803aa98:	f000 facb 	bl	803b032 <USBD_CtlError>
            err++;
 803aa9c:	7afb      	ldrb	r3, [r7, #11]
 803aa9e:	3301      	adds	r3, #1
 803aaa0:	72fb      	strb	r3, [r7, #11]
          break;
 803aaa2:	e089      	b.n	803abb8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 803aaa4:	687b      	ldr	r3, [r7, #4]
 803aaa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803aaaa:	689b      	ldr	r3, [r3, #8]
 803aaac:	2b00      	cmp	r3, #0
 803aaae:	d00b      	beq.n	803aac8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 803aab0:	687b      	ldr	r3, [r7, #4]
 803aab2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803aab6:	689b      	ldr	r3, [r3, #8]
 803aab8:	687a      	ldr	r2, [r7, #4]
 803aaba:	7c12      	ldrb	r2, [r2, #16]
 803aabc:	f107 0108 	add.w	r1, r7, #8
 803aac0:	4610      	mov	r0, r2
 803aac2:	4798      	blx	r3
 803aac4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 803aac6:	e077      	b.n	803abb8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 803aac8:	6839      	ldr	r1, [r7, #0]
 803aaca:	6878      	ldr	r0, [r7, #4]
 803aacc:	f000 fab1 	bl	803b032 <USBD_CtlError>
            err++;
 803aad0:	7afb      	ldrb	r3, [r7, #11]
 803aad2:	3301      	adds	r3, #1
 803aad4:	72fb      	strb	r3, [r7, #11]
          break;
 803aad6:	e06f      	b.n	803abb8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 803aad8:	687b      	ldr	r3, [r7, #4]
 803aada:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803aade:	68db      	ldr	r3, [r3, #12]
 803aae0:	2b00      	cmp	r3, #0
 803aae2:	d00b      	beq.n	803aafc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 803aae4:	687b      	ldr	r3, [r7, #4]
 803aae6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803aaea:	68db      	ldr	r3, [r3, #12]
 803aaec:	687a      	ldr	r2, [r7, #4]
 803aaee:	7c12      	ldrb	r2, [r2, #16]
 803aaf0:	f107 0108 	add.w	r1, r7, #8
 803aaf4:	4610      	mov	r0, r2
 803aaf6:	4798      	blx	r3
 803aaf8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 803aafa:	e05d      	b.n	803abb8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 803aafc:	6839      	ldr	r1, [r7, #0]
 803aafe:	6878      	ldr	r0, [r7, #4]
 803ab00:	f000 fa97 	bl	803b032 <USBD_CtlError>
            err++;
 803ab04:	7afb      	ldrb	r3, [r7, #11]
 803ab06:	3301      	adds	r3, #1
 803ab08:	72fb      	strb	r3, [r7, #11]
          break;
 803ab0a:	e055      	b.n	803abb8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 803ab0c:	687b      	ldr	r3, [r7, #4]
 803ab0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803ab12:	691b      	ldr	r3, [r3, #16]
 803ab14:	2b00      	cmp	r3, #0
 803ab16:	d00b      	beq.n	803ab30 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 803ab18:	687b      	ldr	r3, [r7, #4]
 803ab1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803ab1e:	691b      	ldr	r3, [r3, #16]
 803ab20:	687a      	ldr	r2, [r7, #4]
 803ab22:	7c12      	ldrb	r2, [r2, #16]
 803ab24:	f107 0108 	add.w	r1, r7, #8
 803ab28:	4610      	mov	r0, r2
 803ab2a:	4798      	blx	r3
 803ab2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 803ab2e:	e043      	b.n	803abb8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 803ab30:	6839      	ldr	r1, [r7, #0]
 803ab32:	6878      	ldr	r0, [r7, #4]
 803ab34:	f000 fa7d 	bl	803b032 <USBD_CtlError>
            err++;
 803ab38:	7afb      	ldrb	r3, [r7, #11]
 803ab3a:	3301      	adds	r3, #1
 803ab3c:	72fb      	strb	r3, [r7, #11]
          break;
 803ab3e:	e03b      	b.n	803abb8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 803ab40:	687b      	ldr	r3, [r7, #4]
 803ab42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803ab46:	695b      	ldr	r3, [r3, #20]
 803ab48:	2b00      	cmp	r3, #0
 803ab4a:	d00b      	beq.n	803ab64 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 803ab4c:	687b      	ldr	r3, [r7, #4]
 803ab4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803ab52:	695b      	ldr	r3, [r3, #20]
 803ab54:	687a      	ldr	r2, [r7, #4]
 803ab56:	7c12      	ldrb	r2, [r2, #16]
 803ab58:	f107 0108 	add.w	r1, r7, #8
 803ab5c:	4610      	mov	r0, r2
 803ab5e:	4798      	blx	r3
 803ab60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 803ab62:	e029      	b.n	803abb8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 803ab64:	6839      	ldr	r1, [r7, #0]
 803ab66:	6878      	ldr	r0, [r7, #4]
 803ab68:	f000 fa63 	bl	803b032 <USBD_CtlError>
            err++;
 803ab6c:	7afb      	ldrb	r3, [r7, #11]
 803ab6e:	3301      	adds	r3, #1
 803ab70:	72fb      	strb	r3, [r7, #11]
          break;
 803ab72:	e021      	b.n	803abb8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 803ab74:	687b      	ldr	r3, [r7, #4]
 803ab76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803ab7a:	699b      	ldr	r3, [r3, #24]
 803ab7c:	2b00      	cmp	r3, #0
 803ab7e:	d00b      	beq.n	803ab98 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 803ab80:	687b      	ldr	r3, [r7, #4]
 803ab82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803ab86:	699b      	ldr	r3, [r3, #24]
 803ab88:	687a      	ldr	r2, [r7, #4]
 803ab8a:	7c12      	ldrb	r2, [r2, #16]
 803ab8c:	f107 0108 	add.w	r1, r7, #8
 803ab90:	4610      	mov	r0, r2
 803ab92:	4798      	blx	r3
 803ab94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 803ab96:	e00f      	b.n	803abb8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 803ab98:	6839      	ldr	r1, [r7, #0]
 803ab9a:	6878      	ldr	r0, [r7, #4]
 803ab9c:	f000 fa49 	bl	803b032 <USBD_CtlError>
            err++;
 803aba0:	7afb      	ldrb	r3, [r7, #11]
 803aba2:	3301      	adds	r3, #1
 803aba4:	72fb      	strb	r3, [r7, #11]
          break;
 803aba6:	e007      	b.n	803abb8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 803aba8:	6839      	ldr	r1, [r7, #0]
 803abaa:	6878      	ldr	r0, [r7, #4]
 803abac:	f000 fa41 	bl	803b032 <USBD_CtlError>
          err++;
 803abb0:	7afb      	ldrb	r3, [r7, #11]
 803abb2:	3301      	adds	r3, #1
 803abb4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 803abb6:	bf00      	nop
      }
      break;
 803abb8:	e037      	b.n	803ac2a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 803abba:	687b      	ldr	r3, [r7, #4]
 803abbc:	7c1b      	ldrb	r3, [r3, #16]
 803abbe:	2b00      	cmp	r3, #0
 803abc0:	d109      	bne.n	803abd6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 803abc2:	687b      	ldr	r3, [r7, #4]
 803abc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803abc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 803abca:	f107 0208 	add.w	r2, r7, #8
 803abce:	4610      	mov	r0, r2
 803abd0:	4798      	blx	r3
 803abd2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 803abd4:	e029      	b.n	803ac2a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 803abd6:	6839      	ldr	r1, [r7, #0]
 803abd8:	6878      	ldr	r0, [r7, #4]
 803abda:	f000 fa2a 	bl	803b032 <USBD_CtlError>
        err++;
 803abde:	7afb      	ldrb	r3, [r7, #11]
 803abe0:	3301      	adds	r3, #1
 803abe2:	72fb      	strb	r3, [r7, #11]
      break;
 803abe4:	e021      	b.n	803ac2a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 803abe6:	687b      	ldr	r3, [r7, #4]
 803abe8:	7c1b      	ldrb	r3, [r3, #16]
 803abea:	2b00      	cmp	r3, #0
 803abec:	d10d      	bne.n	803ac0a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 803abee:	687b      	ldr	r3, [r7, #4]
 803abf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803abf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 803abf6:	f107 0208 	add.w	r2, r7, #8
 803abfa:	4610      	mov	r0, r2
 803abfc:	4798      	blx	r3
 803abfe:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 803ac00:	68fb      	ldr	r3, [r7, #12]
 803ac02:	3301      	adds	r3, #1
 803ac04:	2207      	movs	r2, #7
 803ac06:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 803ac08:	e00f      	b.n	803ac2a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 803ac0a:	6839      	ldr	r1, [r7, #0]
 803ac0c:	6878      	ldr	r0, [r7, #4]
 803ac0e:	f000 fa10 	bl	803b032 <USBD_CtlError>
        err++;
 803ac12:	7afb      	ldrb	r3, [r7, #11]
 803ac14:	3301      	adds	r3, #1
 803ac16:	72fb      	strb	r3, [r7, #11]
      break;
 803ac18:	e007      	b.n	803ac2a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 803ac1a:	6839      	ldr	r1, [r7, #0]
 803ac1c:	6878      	ldr	r0, [r7, #4]
 803ac1e:	f000 fa08 	bl	803b032 <USBD_CtlError>
      err++;
 803ac22:	7afb      	ldrb	r3, [r7, #11]
 803ac24:	3301      	adds	r3, #1
 803ac26:	72fb      	strb	r3, [r7, #11]
      break;
 803ac28:	bf00      	nop
  }

  if (err != 0U)
 803ac2a:	7afb      	ldrb	r3, [r7, #11]
 803ac2c:	2b00      	cmp	r3, #0
 803ac2e:	d11e      	bne.n	803ac6e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 803ac30:	683b      	ldr	r3, [r7, #0]
 803ac32:	88db      	ldrh	r3, [r3, #6]
 803ac34:	2b00      	cmp	r3, #0
 803ac36:	d016      	beq.n	803ac66 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 803ac38:	893b      	ldrh	r3, [r7, #8]
 803ac3a:	2b00      	cmp	r3, #0
 803ac3c:	d00e      	beq.n	803ac5c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 803ac3e:	683b      	ldr	r3, [r7, #0]
 803ac40:	88da      	ldrh	r2, [r3, #6]
 803ac42:	893b      	ldrh	r3, [r7, #8]
 803ac44:	4293      	cmp	r3, r2
 803ac46:	bf28      	it	cs
 803ac48:	4613      	movcs	r3, r2
 803ac4a:	b29b      	uxth	r3, r3
 803ac4c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 803ac4e:	893b      	ldrh	r3, [r7, #8]
 803ac50:	461a      	mov	r2, r3
 803ac52:	68f9      	ldr	r1, [r7, #12]
 803ac54:	6878      	ldr	r0, [r7, #4]
 803ac56:	f000 fa5d 	bl	803b114 <USBD_CtlSendData>
 803ac5a:	e009      	b.n	803ac70 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 803ac5c:	6839      	ldr	r1, [r7, #0]
 803ac5e:	6878      	ldr	r0, [r7, #4]
 803ac60:	f000 f9e7 	bl	803b032 <USBD_CtlError>
 803ac64:	e004      	b.n	803ac70 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 803ac66:	6878      	ldr	r0, [r7, #4]
 803ac68:	f000 faae 	bl	803b1c8 <USBD_CtlSendStatus>
 803ac6c:	e000      	b.n	803ac70 <USBD_GetDescriptor+0x2cc>
    return;
 803ac6e:	bf00      	nop
  }
}
 803ac70:	3710      	adds	r7, #16
 803ac72:	46bd      	mov	sp, r7
 803ac74:	bd80      	pop	{r7, pc}
 803ac76:	bf00      	nop

0803ac78 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803ac78:	b580      	push	{r7, lr}
 803ac7a:	b084      	sub	sp, #16
 803ac7c:	af00      	add	r7, sp, #0
 803ac7e:	6078      	str	r0, [r7, #4]
 803ac80:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 803ac82:	683b      	ldr	r3, [r7, #0]
 803ac84:	889b      	ldrh	r3, [r3, #4]
 803ac86:	2b00      	cmp	r3, #0
 803ac88:	d131      	bne.n	803acee <USBD_SetAddress+0x76>
 803ac8a:	683b      	ldr	r3, [r7, #0]
 803ac8c:	88db      	ldrh	r3, [r3, #6]
 803ac8e:	2b00      	cmp	r3, #0
 803ac90:	d12d      	bne.n	803acee <USBD_SetAddress+0x76>
 803ac92:	683b      	ldr	r3, [r7, #0]
 803ac94:	885b      	ldrh	r3, [r3, #2]
 803ac96:	2b7f      	cmp	r3, #127	; 0x7f
 803ac98:	d829      	bhi.n	803acee <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 803ac9a:	683b      	ldr	r3, [r7, #0]
 803ac9c:	885b      	ldrh	r3, [r3, #2]
 803ac9e:	b2db      	uxtb	r3, r3
 803aca0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 803aca4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803aca6:	687b      	ldr	r3, [r7, #4]
 803aca8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803acac:	b2db      	uxtb	r3, r3
 803acae:	2b03      	cmp	r3, #3
 803acb0:	d104      	bne.n	803acbc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 803acb2:	6839      	ldr	r1, [r7, #0]
 803acb4:	6878      	ldr	r0, [r7, #4]
 803acb6:	f000 f9bc 	bl	803b032 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803acba:	e01d      	b.n	803acf8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 803acbc:	687b      	ldr	r3, [r7, #4]
 803acbe:	7bfa      	ldrb	r2, [r7, #15]
 803acc0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 803acc4:	7bfb      	ldrb	r3, [r7, #15]
 803acc6:	4619      	mov	r1, r3
 803acc8:	6878      	ldr	r0, [r7, #4]
 803acca:	f000 ff0b 	bl	803bae4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 803acce:	6878      	ldr	r0, [r7, #4]
 803acd0:	f000 fa7a 	bl	803b1c8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 803acd4:	7bfb      	ldrb	r3, [r7, #15]
 803acd6:	2b00      	cmp	r3, #0
 803acd8:	d004      	beq.n	803ace4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 803acda:	687b      	ldr	r3, [r7, #4]
 803acdc:	2202      	movs	r2, #2
 803acde:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803ace2:	e009      	b.n	803acf8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 803ace4:	687b      	ldr	r3, [r7, #4]
 803ace6:	2201      	movs	r2, #1
 803ace8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803acec:	e004      	b.n	803acf8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 803acee:	6839      	ldr	r1, [r7, #0]
 803acf0:	6878      	ldr	r0, [r7, #4]
 803acf2:	f000 f99e 	bl	803b032 <USBD_CtlError>
  }
}
 803acf6:	bf00      	nop
 803acf8:	bf00      	nop
 803acfa:	3710      	adds	r7, #16
 803acfc:	46bd      	mov	sp, r7
 803acfe:	bd80      	pop	{r7, pc}

0803ad00 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803ad00:	b580      	push	{r7, lr}
 803ad02:	b084      	sub	sp, #16
 803ad04:	af00      	add	r7, sp, #0
 803ad06:	6078      	str	r0, [r7, #4]
 803ad08:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 803ad0a:	2300      	movs	r3, #0
 803ad0c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 803ad0e:	683b      	ldr	r3, [r7, #0]
 803ad10:	885b      	ldrh	r3, [r3, #2]
 803ad12:	b2da      	uxtb	r2, r3
 803ad14:	4b4e      	ldr	r3, [pc, #312]	; (803ae50 <USBD_SetConfig+0x150>)
 803ad16:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 803ad18:	4b4d      	ldr	r3, [pc, #308]	; (803ae50 <USBD_SetConfig+0x150>)
 803ad1a:	781b      	ldrb	r3, [r3, #0]
 803ad1c:	2b01      	cmp	r3, #1
 803ad1e:	d905      	bls.n	803ad2c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 803ad20:	6839      	ldr	r1, [r7, #0]
 803ad22:	6878      	ldr	r0, [r7, #4]
 803ad24:	f000 f985 	bl	803b032 <USBD_CtlError>
    return USBD_FAIL;
 803ad28:	2303      	movs	r3, #3
 803ad2a:	e08c      	b.n	803ae46 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 803ad2c:	687b      	ldr	r3, [r7, #4]
 803ad2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803ad32:	b2db      	uxtb	r3, r3
 803ad34:	2b02      	cmp	r3, #2
 803ad36:	d002      	beq.n	803ad3e <USBD_SetConfig+0x3e>
 803ad38:	2b03      	cmp	r3, #3
 803ad3a:	d029      	beq.n	803ad90 <USBD_SetConfig+0x90>
 803ad3c:	e075      	b.n	803ae2a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 803ad3e:	4b44      	ldr	r3, [pc, #272]	; (803ae50 <USBD_SetConfig+0x150>)
 803ad40:	781b      	ldrb	r3, [r3, #0]
 803ad42:	2b00      	cmp	r3, #0
 803ad44:	d020      	beq.n	803ad88 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 803ad46:	4b42      	ldr	r3, [pc, #264]	; (803ae50 <USBD_SetConfig+0x150>)
 803ad48:	781b      	ldrb	r3, [r3, #0]
 803ad4a:	461a      	mov	r2, r3
 803ad4c:	687b      	ldr	r3, [r7, #4]
 803ad4e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 803ad50:	4b3f      	ldr	r3, [pc, #252]	; (803ae50 <USBD_SetConfig+0x150>)
 803ad52:	781b      	ldrb	r3, [r3, #0]
 803ad54:	4619      	mov	r1, r3
 803ad56:	6878      	ldr	r0, [r7, #4]
 803ad58:	f7fe ffe7 	bl	8039d2a <USBD_SetClassConfig>
 803ad5c:	4603      	mov	r3, r0
 803ad5e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 803ad60:	7bfb      	ldrb	r3, [r7, #15]
 803ad62:	2b00      	cmp	r3, #0
 803ad64:	d008      	beq.n	803ad78 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 803ad66:	6839      	ldr	r1, [r7, #0]
 803ad68:	6878      	ldr	r0, [r7, #4]
 803ad6a:	f000 f962 	bl	803b032 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 803ad6e:	687b      	ldr	r3, [r7, #4]
 803ad70:	2202      	movs	r2, #2
 803ad72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 803ad76:	e065      	b.n	803ae44 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 803ad78:	6878      	ldr	r0, [r7, #4]
 803ad7a:	f000 fa25 	bl	803b1c8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 803ad7e:	687b      	ldr	r3, [r7, #4]
 803ad80:	2203      	movs	r2, #3
 803ad82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 803ad86:	e05d      	b.n	803ae44 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 803ad88:	6878      	ldr	r0, [r7, #4]
 803ad8a:	f000 fa1d 	bl	803b1c8 <USBD_CtlSendStatus>
      break;
 803ad8e:	e059      	b.n	803ae44 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 803ad90:	4b2f      	ldr	r3, [pc, #188]	; (803ae50 <USBD_SetConfig+0x150>)
 803ad92:	781b      	ldrb	r3, [r3, #0]
 803ad94:	2b00      	cmp	r3, #0
 803ad96:	d112      	bne.n	803adbe <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 803ad98:	687b      	ldr	r3, [r7, #4]
 803ad9a:	2202      	movs	r2, #2
 803ad9c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 803ada0:	4b2b      	ldr	r3, [pc, #172]	; (803ae50 <USBD_SetConfig+0x150>)
 803ada2:	781b      	ldrb	r3, [r3, #0]
 803ada4:	461a      	mov	r2, r3
 803ada6:	687b      	ldr	r3, [r7, #4]
 803ada8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 803adaa:	4b29      	ldr	r3, [pc, #164]	; (803ae50 <USBD_SetConfig+0x150>)
 803adac:	781b      	ldrb	r3, [r3, #0]
 803adae:	4619      	mov	r1, r3
 803adb0:	6878      	ldr	r0, [r7, #4]
 803adb2:	f7fe ffd6 	bl	8039d62 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 803adb6:	6878      	ldr	r0, [r7, #4]
 803adb8:	f000 fa06 	bl	803b1c8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 803adbc:	e042      	b.n	803ae44 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 803adbe:	4b24      	ldr	r3, [pc, #144]	; (803ae50 <USBD_SetConfig+0x150>)
 803adc0:	781b      	ldrb	r3, [r3, #0]
 803adc2:	461a      	mov	r2, r3
 803adc4:	687b      	ldr	r3, [r7, #4]
 803adc6:	685b      	ldr	r3, [r3, #4]
 803adc8:	429a      	cmp	r2, r3
 803adca:	d02a      	beq.n	803ae22 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 803adcc:	687b      	ldr	r3, [r7, #4]
 803adce:	685b      	ldr	r3, [r3, #4]
 803add0:	b2db      	uxtb	r3, r3
 803add2:	4619      	mov	r1, r3
 803add4:	6878      	ldr	r0, [r7, #4]
 803add6:	f7fe ffc4 	bl	8039d62 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 803adda:	4b1d      	ldr	r3, [pc, #116]	; (803ae50 <USBD_SetConfig+0x150>)
 803addc:	781b      	ldrb	r3, [r3, #0]
 803adde:	461a      	mov	r2, r3
 803ade0:	687b      	ldr	r3, [r7, #4]
 803ade2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 803ade4:	4b1a      	ldr	r3, [pc, #104]	; (803ae50 <USBD_SetConfig+0x150>)
 803ade6:	781b      	ldrb	r3, [r3, #0]
 803ade8:	4619      	mov	r1, r3
 803adea:	6878      	ldr	r0, [r7, #4]
 803adec:	f7fe ff9d 	bl	8039d2a <USBD_SetClassConfig>
 803adf0:	4603      	mov	r3, r0
 803adf2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 803adf4:	7bfb      	ldrb	r3, [r7, #15]
 803adf6:	2b00      	cmp	r3, #0
 803adf8:	d00f      	beq.n	803ae1a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 803adfa:	6839      	ldr	r1, [r7, #0]
 803adfc:	6878      	ldr	r0, [r7, #4]
 803adfe:	f000 f918 	bl	803b032 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 803ae02:	687b      	ldr	r3, [r7, #4]
 803ae04:	685b      	ldr	r3, [r3, #4]
 803ae06:	b2db      	uxtb	r3, r3
 803ae08:	4619      	mov	r1, r3
 803ae0a:	6878      	ldr	r0, [r7, #4]
 803ae0c:	f7fe ffa9 	bl	8039d62 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 803ae10:	687b      	ldr	r3, [r7, #4]
 803ae12:	2202      	movs	r2, #2
 803ae14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 803ae18:	e014      	b.n	803ae44 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 803ae1a:	6878      	ldr	r0, [r7, #4]
 803ae1c:	f000 f9d4 	bl	803b1c8 <USBD_CtlSendStatus>
      break;
 803ae20:	e010      	b.n	803ae44 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 803ae22:	6878      	ldr	r0, [r7, #4]
 803ae24:	f000 f9d0 	bl	803b1c8 <USBD_CtlSendStatus>
      break;
 803ae28:	e00c      	b.n	803ae44 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 803ae2a:	6839      	ldr	r1, [r7, #0]
 803ae2c:	6878      	ldr	r0, [r7, #4]
 803ae2e:	f000 f900 	bl	803b032 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 803ae32:	4b07      	ldr	r3, [pc, #28]	; (803ae50 <USBD_SetConfig+0x150>)
 803ae34:	781b      	ldrb	r3, [r3, #0]
 803ae36:	4619      	mov	r1, r3
 803ae38:	6878      	ldr	r0, [r7, #4]
 803ae3a:	f7fe ff92 	bl	8039d62 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 803ae3e:	2303      	movs	r3, #3
 803ae40:	73fb      	strb	r3, [r7, #15]
      break;
 803ae42:	bf00      	nop
  }

  return ret;
 803ae44:	7bfb      	ldrb	r3, [r7, #15]
}
 803ae46:	4618      	mov	r0, r3
 803ae48:	3710      	adds	r7, #16
 803ae4a:	46bd      	mov	sp, r7
 803ae4c:	bd80      	pop	{r7, pc}
 803ae4e:	bf00      	nop
 803ae50:	24024bc8 	.word	0x24024bc8

0803ae54 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803ae54:	b580      	push	{r7, lr}
 803ae56:	b082      	sub	sp, #8
 803ae58:	af00      	add	r7, sp, #0
 803ae5a:	6078      	str	r0, [r7, #4]
 803ae5c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 803ae5e:	683b      	ldr	r3, [r7, #0]
 803ae60:	88db      	ldrh	r3, [r3, #6]
 803ae62:	2b01      	cmp	r3, #1
 803ae64:	d004      	beq.n	803ae70 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 803ae66:	6839      	ldr	r1, [r7, #0]
 803ae68:	6878      	ldr	r0, [r7, #4]
 803ae6a:	f000 f8e2 	bl	803b032 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 803ae6e:	e023      	b.n	803aeb8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 803ae70:	687b      	ldr	r3, [r7, #4]
 803ae72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803ae76:	b2db      	uxtb	r3, r3
 803ae78:	2b02      	cmp	r3, #2
 803ae7a:	dc02      	bgt.n	803ae82 <USBD_GetConfig+0x2e>
 803ae7c:	2b00      	cmp	r3, #0
 803ae7e:	dc03      	bgt.n	803ae88 <USBD_GetConfig+0x34>
 803ae80:	e015      	b.n	803aeae <USBD_GetConfig+0x5a>
 803ae82:	2b03      	cmp	r3, #3
 803ae84:	d00b      	beq.n	803ae9e <USBD_GetConfig+0x4a>
 803ae86:	e012      	b.n	803aeae <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 803ae88:	687b      	ldr	r3, [r7, #4]
 803ae8a:	2200      	movs	r2, #0
 803ae8c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 803ae8e:	687b      	ldr	r3, [r7, #4]
 803ae90:	3308      	adds	r3, #8
 803ae92:	2201      	movs	r2, #1
 803ae94:	4619      	mov	r1, r3
 803ae96:	6878      	ldr	r0, [r7, #4]
 803ae98:	f000 f93c 	bl	803b114 <USBD_CtlSendData>
        break;
 803ae9c:	e00c      	b.n	803aeb8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 803ae9e:	687b      	ldr	r3, [r7, #4]
 803aea0:	3304      	adds	r3, #4
 803aea2:	2201      	movs	r2, #1
 803aea4:	4619      	mov	r1, r3
 803aea6:	6878      	ldr	r0, [r7, #4]
 803aea8:	f000 f934 	bl	803b114 <USBD_CtlSendData>
        break;
 803aeac:	e004      	b.n	803aeb8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 803aeae:	6839      	ldr	r1, [r7, #0]
 803aeb0:	6878      	ldr	r0, [r7, #4]
 803aeb2:	f000 f8be 	bl	803b032 <USBD_CtlError>
        break;
 803aeb6:	bf00      	nop
}
 803aeb8:	bf00      	nop
 803aeba:	3708      	adds	r7, #8
 803aebc:	46bd      	mov	sp, r7
 803aebe:	bd80      	pop	{r7, pc}

0803aec0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803aec0:	b580      	push	{r7, lr}
 803aec2:	b082      	sub	sp, #8
 803aec4:	af00      	add	r7, sp, #0
 803aec6:	6078      	str	r0, [r7, #4]
 803aec8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 803aeca:	687b      	ldr	r3, [r7, #4]
 803aecc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803aed0:	b2db      	uxtb	r3, r3
 803aed2:	3b01      	subs	r3, #1
 803aed4:	2b02      	cmp	r3, #2
 803aed6:	d81e      	bhi.n	803af16 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 803aed8:	683b      	ldr	r3, [r7, #0]
 803aeda:	88db      	ldrh	r3, [r3, #6]
 803aedc:	2b02      	cmp	r3, #2
 803aede:	d004      	beq.n	803aeea <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 803aee0:	6839      	ldr	r1, [r7, #0]
 803aee2:	6878      	ldr	r0, [r7, #4]
 803aee4:	f000 f8a5 	bl	803b032 <USBD_CtlError>
        break;
 803aee8:	e01a      	b.n	803af20 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 803aeea:	687b      	ldr	r3, [r7, #4]
 803aeec:	2201      	movs	r2, #1
 803aeee:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 803aef0:	687b      	ldr	r3, [r7, #4]
 803aef2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 803aef6:	2b00      	cmp	r3, #0
 803aef8:	d005      	beq.n	803af06 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 803aefa:	687b      	ldr	r3, [r7, #4]
 803aefc:	68db      	ldr	r3, [r3, #12]
 803aefe:	f043 0202 	orr.w	r2, r3, #2
 803af02:	687b      	ldr	r3, [r7, #4]
 803af04:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 803af06:	687b      	ldr	r3, [r7, #4]
 803af08:	330c      	adds	r3, #12
 803af0a:	2202      	movs	r2, #2
 803af0c:	4619      	mov	r1, r3
 803af0e:	6878      	ldr	r0, [r7, #4]
 803af10:	f000 f900 	bl	803b114 <USBD_CtlSendData>
      break;
 803af14:	e004      	b.n	803af20 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 803af16:	6839      	ldr	r1, [r7, #0]
 803af18:	6878      	ldr	r0, [r7, #4]
 803af1a:	f000 f88a 	bl	803b032 <USBD_CtlError>
      break;
 803af1e:	bf00      	nop
  }
}
 803af20:	bf00      	nop
 803af22:	3708      	adds	r7, #8
 803af24:	46bd      	mov	sp, r7
 803af26:	bd80      	pop	{r7, pc}

0803af28 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803af28:	b580      	push	{r7, lr}
 803af2a:	b082      	sub	sp, #8
 803af2c:	af00      	add	r7, sp, #0
 803af2e:	6078      	str	r0, [r7, #4]
 803af30:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 803af32:	683b      	ldr	r3, [r7, #0]
 803af34:	885b      	ldrh	r3, [r3, #2]
 803af36:	2b01      	cmp	r3, #1
 803af38:	d107      	bne.n	803af4a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 803af3a:	687b      	ldr	r3, [r7, #4]
 803af3c:	2201      	movs	r2, #1
 803af3e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 803af42:	6878      	ldr	r0, [r7, #4]
 803af44:	f000 f940 	bl	803b1c8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 803af48:	e013      	b.n	803af72 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 803af4a:	683b      	ldr	r3, [r7, #0]
 803af4c:	885b      	ldrh	r3, [r3, #2]
 803af4e:	2b02      	cmp	r3, #2
 803af50:	d10b      	bne.n	803af6a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 803af52:	683b      	ldr	r3, [r7, #0]
 803af54:	889b      	ldrh	r3, [r3, #4]
 803af56:	0a1b      	lsrs	r3, r3, #8
 803af58:	b29b      	uxth	r3, r3
 803af5a:	b2da      	uxtb	r2, r3
 803af5c:	687b      	ldr	r3, [r7, #4]
 803af5e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 803af62:	6878      	ldr	r0, [r7, #4]
 803af64:	f000 f930 	bl	803b1c8 <USBD_CtlSendStatus>
}
 803af68:	e003      	b.n	803af72 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 803af6a:	6839      	ldr	r1, [r7, #0]
 803af6c:	6878      	ldr	r0, [r7, #4]
 803af6e:	f000 f860 	bl	803b032 <USBD_CtlError>
}
 803af72:	bf00      	nop
 803af74:	3708      	adds	r7, #8
 803af76:	46bd      	mov	sp, r7
 803af78:	bd80      	pop	{r7, pc}

0803af7a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803af7a:	b580      	push	{r7, lr}
 803af7c:	b082      	sub	sp, #8
 803af7e:	af00      	add	r7, sp, #0
 803af80:	6078      	str	r0, [r7, #4]
 803af82:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 803af84:	687b      	ldr	r3, [r7, #4]
 803af86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803af8a:	b2db      	uxtb	r3, r3
 803af8c:	3b01      	subs	r3, #1
 803af8e:	2b02      	cmp	r3, #2
 803af90:	d80b      	bhi.n	803afaa <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 803af92:	683b      	ldr	r3, [r7, #0]
 803af94:	885b      	ldrh	r3, [r3, #2]
 803af96:	2b01      	cmp	r3, #1
 803af98:	d10c      	bne.n	803afb4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 803af9a:	687b      	ldr	r3, [r7, #4]
 803af9c:	2200      	movs	r2, #0
 803af9e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 803afa2:	6878      	ldr	r0, [r7, #4]
 803afa4:	f000 f910 	bl	803b1c8 <USBD_CtlSendStatus>
      }
      break;
 803afa8:	e004      	b.n	803afb4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 803afaa:	6839      	ldr	r1, [r7, #0]
 803afac:	6878      	ldr	r0, [r7, #4]
 803afae:	f000 f840 	bl	803b032 <USBD_CtlError>
      break;
 803afb2:	e000      	b.n	803afb6 <USBD_ClrFeature+0x3c>
      break;
 803afb4:	bf00      	nop
  }
}
 803afb6:	bf00      	nop
 803afb8:	3708      	adds	r7, #8
 803afba:	46bd      	mov	sp, r7
 803afbc:	bd80      	pop	{r7, pc}

0803afbe <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 803afbe:	b580      	push	{r7, lr}
 803afc0:	b084      	sub	sp, #16
 803afc2:	af00      	add	r7, sp, #0
 803afc4:	6078      	str	r0, [r7, #4]
 803afc6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 803afc8:	683b      	ldr	r3, [r7, #0]
 803afca:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 803afcc:	68fb      	ldr	r3, [r7, #12]
 803afce:	781a      	ldrb	r2, [r3, #0]
 803afd0:	687b      	ldr	r3, [r7, #4]
 803afd2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 803afd4:	68fb      	ldr	r3, [r7, #12]
 803afd6:	3301      	adds	r3, #1
 803afd8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 803afda:	68fb      	ldr	r3, [r7, #12]
 803afdc:	781a      	ldrb	r2, [r3, #0]
 803afde:	687b      	ldr	r3, [r7, #4]
 803afe0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 803afe2:	68fb      	ldr	r3, [r7, #12]
 803afe4:	3301      	adds	r3, #1
 803afe6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 803afe8:	68f8      	ldr	r0, [r7, #12]
 803afea:	f7ff fa41 	bl	803a470 <SWAPBYTE>
 803afee:	4603      	mov	r3, r0
 803aff0:	461a      	mov	r2, r3
 803aff2:	687b      	ldr	r3, [r7, #4]
 803aff4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 803aff6:	68fb      	ldr	r3, [r7, #12]
 803aff8:	3301      	adds	r3, #1
 803affa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 803affc:	68fb      	ldr	r3, [r7, #12]
 803affe:	3301      	adds	r3, #1
 803b000:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 803b002:	68f8      	ldr	r0, [r7, #12]
 803b004:	f7ff fa34 	bl	803a470 <SWAPBYTE>
 803b008:	4603      	mov	r3, r0
 803b00a:	461a      	mov	r2, r3
 803b00c:	687b      	ldr	r3, [r7, #4]
 803b00e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 803b010:	68fb      	ldr	r3, [r7, #12]
 803b012:	3301      	adds	r3, #1
 803b014:	60fb      	str	r3, [r7, #12]
  pbuff++;
 803b016:	68fb      	ldr	r3, [r7, #12]
 803b018:	3301      	adds	r3, #1
 803b01a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 803b01c:	68f8      	ldr	r0, [r7, #12]
 803b01e:	f7ff fa27 	bl	803a470 <SWAPBYTE>
 803b022:	4603      	mov	r3, r0
 803b024:	461a      	mov	r2, r3
 803b026:	687b      	ldr	r3, [r7, #4]
 803b028:	80da      	strh	r2, [r3, #6]
}
 803b02a:	bf00      	nop
 803b02c:	3710      	adds	r7, #16
 803b02e:	46bd      	mov	sp, r7
 803b030:	bd80      	pop	{r7, pc}

0803b032 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803b032:	b580      	push	{r7, lr}
 803b034:	b082      	sub	sp, #8
 803b036:	af00      	add	r7, sp, #0
 803b038:	6078      	str	r0, [r7, #4]
 803b03a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 803b03c:	2180      	movs	r1, #128	; 0x80
 803b03e:	6878      	ldr	r0, [r7, #4]
 803b040:	f000 fce6 	bl	803ba10 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 803b044:	2100      	movs	r1, #0
 803b046:	6878      	ldr	r0, [r7, #4]
 803b048:	f000 fce2 	bl	803ba10 <USBD_LL_StallEP>
}
 803b04c:	bf00      	nop
 803b04e:	3708      	adds	r7, #8
 803b050:	46bd      	mov	sp, r7
 803b052:	bd80      	pop	{r7, pc}

0803b054 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 803b054:	b580      	push	{r7, lr}
 803b056:	b086      	sub	sp, #24
 803b058:	af00      	add	r7, sp, #0
 803b05a:	60f8      	str	r0, [r7, #12]
 803b05c:	60b9      	str	r1, [r7, #8]
 803b05e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 803b060:	2300      	movs	r3, #0
 803b062:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 803b064:	68fb      	ldr	r3, [r7, #12]
 803b066:	2b00      	cmp	r3, #0
 803b068:	d036      	beq.n	803b0d8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 803b06a:	68fb      	ldr	r3, [r7, #12]
 803b06c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 803b06e:	6938      	ldr	r0, [r7, #16]
 803b070:	f000 f836 	bl	803b0e0 <USBD_GetLen>
 803b074:	4603      	mov	r3, r0
 803b076:	3301      	adds	r3, #1
 803b078:	b29b      	uxth	r3, r3
 803b07a:	005b      	lsls	r3, r3, #1
 803b07c:	b29a      	uxth	r2, r3
 803b07e:	687b      	ldr	r3, [r7, #4]
 803b080:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 803b082:	7dfb      	ldrb	r3, [r7, #23]
 803b084:	68ba      	ldr	r2, [r7, #8]
 803b086:	4413      	add	r3, r2
 803b088:	687a      	ldr	r2, [r7, #4]
 803b08a:	7812      	ldrb	r2, [r2, #0]
 803b08c:	701a      	strb	r2, [r3, #0]
  idx++;
 803b08e:	7dfb      	ldrb	r3, [r7, #23]
 803b090:	3301      	adds	r3, #1
 803b092:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 803b094:	7dfb      	ldrb	r3, [r7, #23]
 803b096:	68ba      	ldr	r2, [r7, #8]
 803b098:	4413      	add	r3, r2
 803b09a:	2203      	movs	r2, #3
 803b09c:	701a      	strb	r2, [r3, #0]
  idx++;
 803b09e:	7dfb      	ldrb	r3, [r7, #23]
 803b0a0:	3301      	adds	r3, #1
 803b0a2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 803b0a4:	e013      	b.n	803b0ce <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 803b0a6:	7dfb      	ldrb	r3, [r7, #23]
 803b0a8:	68ba      	ldr	r2, [r7, #8]
 803b0aa:	4413      	add	r3, r2
 803b0ac:	693a      	ldr	r2, [r7, #16]
 803b0ae:	7812      	ldrb	r2, [r2, #0]
 803b0b0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 803b0b2:	693b      	ldr	r3, [r7, #16]
 803b0b4:	3301      	adds	r3, #1
 803b0b6:	613b      	str	r3, [r7, #16]
    idx++;
 803b0b8:	7dfb      	ldrb	r3, [r7, #23]
 803b0ba:	3301      	adds	r3, #1
 803b0bc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 803b0be:	7dfb      	ldrb	r3, [r7, #23]
 803b0c0:	68ba      	ldr	r2, [r7, #8]
 803b0c2:	4413      	add	r3, r2
 803b0c4:	2200      	movs	r2, #0
 803b0c6:	701a      	strb	r2, [r3, #0]
    idx++;
 803b0c8:	7dfb      	ldrb	r3, [r7, #23]
 803b0ca:	3301      	adds	r3, #1
 803b0cc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 803b0ce:	693b      	ldr	r3, [r7, #16]
 803b0d0:	781b      	ldrb	r3, [r3, #0]
 803b0d2:	2b00      	cmp	r3, #0
 803b0d4:	d1e7      	bne.n	803b0a6 <USBD_GetString+0x52>
 803b0d6:	e000      	b.n	803b0da <USBD_GetString+0x86>
    return;
 803b0d8:	bf00      	nop
  }
}
 803b0da:	3718      	adds	r7, #24
 803b0dc:	46bd      	mov	sp, r7
 803b0de:	bd80      	pop	{r7, pc}

0803b0e0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 803b0e0:	b480      	push	{r7}
 803b0e2:	b085      	sub	sp, #20
 803b0e4:	af00      	add	r7, sp, #0
 803b0e6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 803b0e8:	2300      	movs	r3, #0
 803b0ea:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 803b0ec:	687b      	ldr	r3, [r7, #4]
 803b0ee:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 803b0f0:	e005      	b.n	803b0fe <USBD_GetLen+0x1e>
  {
    len++;
 803b0f2:	7bfb      	ldrb	r3, [r7, #15]
 803b0f4:	3301      	adds	r3, #1
 803b0f6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 803b0f8:	68bb      	ldr	r3, [r7, #8]
 803b0fa:	3301      	adds	r3, #1
 803b0fc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 803b0fe:	68bb      	ldr	r3, [r7, #8]
 803b100:	781b      	ldrb	r3, [r3, #0]
 803b102:	2b00      	cmp	r3, #0
 803b104:	d1f5      	bne.n	803b0f2 <USBD_GetLen+0x12>
  }

  return len;
 803b106:	7bfb      	ldrb	r3, [r7, #15]
}
 803b108:	4618      	mov	r0, r3
 803b10a:	3714      	adds	r7, #20
 803b10c:	46bd      	mov	sp, r7
 803b10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b112:	4770      	bx	lr

0803b114 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 803b114:	b580      	push	{r7, lr}
 803b116:	b084      	sub	sp, #16
 803b118:	af00      	add	r7, sp, #0
 803b11a:	60f8      	str	r0, [r7, #12]
 803b11c:	60b9      	str	r1, [r7, #8]
 803b11e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 803b120:	68fb      	ldr	r3, [r7, #12]
 803b122:	2202      	movs	r2, #2
 803b124:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 803b128:	68fb      	ldr	r3, [r7, #12]
 803b12a:	687a      	ldr	r2, [r7, #4]
 803b12c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 803b12e:	68fb      	ldr	r3, [r7, #12]
 803b130:	687a      	ldr	r2, [r7, #4]
 803b132:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 803b134:	687b      	ldr	r3, [r7, #4]
 803b136:	68ba      	ldr	r2, [r7, #8]
 803b138:	2100      	movs	r1, #0
 803b13a:	68f8      	ldr	r0, [r7, #12]
 803b13c:	f000 fcf1 	bl	803bb22 <USBD_LL_Transmit>

  return USBD_OK;
 803b140:	2300      	movs	r3, #0
}
 803b142:	4618      	mov	r0, r3
 803b144:	3710      	adds	r7, #16
 803b146:	46bd      	mov	sp, r7
 803b148:	bd80      	pop	{r7, pc}

0803b14a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 803b14a:	b580      	push	{r7, lr}
 803b14c:	b084      	sub	sp, #16
 803b14e:	af00      	add	r7, sp, #0
 803b150:	60f8      	str	r0, [r7, #12]
 803b152:	60b9      	str	r1, [r7, #8]
 803b154:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 803b156:	687b      	ldr	r3, [r7, #4]
 803b158:	68ba      	ldr	r2, [r7, #8]
 803b15a:	2100      	movs	r1, #0
 803b15c:	68f8      	ldr	r0, [r7, #12]
 803b15e:	f000 fce0 	bl	803bb22 <USBD_LL_Transmit>

  return USBD_OK;
 803b162:	2300      	movs	r3, #0
}
 803b164:	4618      	mov	r0, r3
 803b166:	3710      	adds	r7, #16
 803b168:	46bd      	mov	sp, r7
 803b16a:	bd80      	pop	{r7, pc}

0803b16c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 803b16c:	b580      	push	{r7, lr}
 803b16e:	b084      	sub	sp, #16
 803b170:	af00      	add	r7, sp, #0
 803b172:	60f8      	str	r0, [r7, #12]
 803b174:	60b9      	str	r1, [r7, #8]
 803b176:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 803b178:	68fb      	ldr	r3, [r7, #12]
 803b17a:	2203      	movs	r2, #3
 803b17c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 803b180:	68fb      	ldr	r3, [r7, #12]
 803b182:	687a      	ldr	r2, [r7, #4]
 803b184:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 803b188:	68fb      	ldr	r3, [r7, #12]
 803b18a:	687a      	ldr	r2, [r7, #4]
 803b18c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 803b190:	687b      	ldr	r3, [r7, #4]
 803b192:	68ba      	ldr	r2, [r7, #8]
 803b194:	2100      	movs	r1, #0
 803b196:	68f8      	ldr	r0, [r7, #12]
 803b198:	f000 fce4 	bl	803bb64 <USBD_LL_PrepareReceive>

  return USBD_OK;
 803b19c:	2300      	movs	r3, #0
}
 803b19e:	4618      	mov	r0, r3
 803b1a0:	3710      	adds	r7, #16
 803b1a2:	46bd      	mov	sp, r7
 803b1a4:	bd80      	pop	{r7, pc}

0803b1a6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 803b1a6:	b580      	push	{r7, lr}
 803b1a8:	b084      	sub	sp, #16
 803b1aa:	af00      	add	r7, sp, #0
 803b1ac:	60f8      	str	r0, [r7, #12]
 803b1ae:	60b9      	str	r1, [r7, #8]
 803b1b0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 803b1b2:	687b      	ldr	r3, [r7, #4]
 803b1b4:	68ba      	ldr	r2, [r7, #8]
 803b1b6:	2100      	movs	r1, #0
 803b1b8:	68f8      	ldr	r0, [r7, #12]
 803b1ba:	f000 fcd3 	bl	803bb64 <USBD_LL_PrepareReceive>

  return USBD_OK;
 803b1be:	2300      	movs	r3, #0
}
 803b1c0:	4618      	mov	r0, r3
 803b1c2:	3710      	adds	r7, #16
 803b1c4:	46bd      	mov	sp, r7
 803b1c6:	bd80      	pop	{r7, pc}

0803b1c8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 803b1c8:	b580      	push	{r7, lr}
 803b1ca:	b082      	sub	sp, #8
 803b1cc:	af00      	add	r7, sp, #0
 803b1ce:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 803b1d0:	687b      	ldr	r3, [r7, #4]
 803b1d2:	2204      	movs	r2, #4
 803b1d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 803b1d8:	2300      	movs	r3, #0
 803b1da:	2200      	movs	r2, #0
 803b1dc:	2100      	movs	r1, #0
 803b1de:	6878      	ldr	r0, [r7, #4]
 803b1e0:	f000 fc9f 	bl	803bb22 <USBD_LL_Transmit>

  return USBD_OK;
 803b1e4:	2300      	movs	r3, #0
}
 803b1e6:	4618      	mov	r0, r3
 803b1e8:	3708      	adds	r7, #8
 803b1ea:	46bd      	mov	sp, r7
 803b1ec:	bd80      	pop	{r7, pc}

0803b1ee <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 803b1ee:	b580      	push	{r7, lr}
 803b1f0:	b082      	sub	sp, #8
 803b1f2:	af00      	add	r7, sp, #0
 803b1f4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 803b1f6:	687b      	ldr	r3, [r7, #4]
 803b1f8:	2205      	movs	r2, #5
 803b1fa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 803b1fe:	2300      	movs	r3, #0
 803b200:	2200      	movs	r2, #0
 803b202:	2100      	movs	r1, #0
 803b204:	6878      	ldr	r0, [r7, #4]
 803b206:	f000 fcad 	bl	803bb64 <USBD_LL_PrepareReceive>

  return USBD_OK;
 803b20a:	2300      	movs	r3, #0
}
 803b20c:	4618      	mov	r0, r3
 803b20e:	3708      	adds	r7, #8
 803b210:	46bd      	mov	sp, r7
 803b212:	bd80      	pop	{r7, pc}

0803b214 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 803b214:	b580      	push	{r7, lr}
 803b216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 803b218:	2200      	movs	r2, #0
 803b21a:	4913      	ldr	r1, [pc, #76]	; (803b268 <MX_USB_DEVICE_Init+0x54>)
 803b21c:	4813      	ldr	r0, [pc, #76]	; (803b26c <MX_USB_DEVICE_Init+0x58>)
 803b21e:	f7fe fd07 	bl	8039c30 <USBD_Init>
 803b222:	4603      	mov	r3, r0
 803b224:	2b00      	cmp	r3, #0
 803b226:	d001      	beq.n	803b22c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 803b228:	f7ee fc10 	bl	8029a4c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 803b22c:	4910      	ldr	r1, [pc, #64]	; (803b270 <MX_USB_DEVICE_Init+0x5c>)
 803b22e:	480f      	ldr	r0, [pc, #60]	; (803b26c <MX_USB_DEVICE_Init+0x58>)
 803b230:	f7fe fd2e 	bl	8039c90 <USBD_RegisterClass>
 803b234:	4603      	mov	r3, r0
 803b236:	2b00      	cmp	r3, #0
 803b238:	d001      	beq.n	803b23e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 803b23a:	f7ee fc07 	bl	8029a4c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 803b23e:	490d      	ldr	r1, [pc, #52]	; (803b274 <MX_USB_DEVICE_Init+0x60>)
 803b240:	480a      	ldr	r0, [pc, #40]	; (803b26c <MX_USB_DEVICE_Init+0x58>)
 803b242:	f7fe fc65 	bl	8039b10 <USBD_CDC_RegisterInterface>
 803b246:	4603      	mov	r3, r0
 803b248:	2b00      	cmp	r3, #0
 803b24a:	d001      	beq.n	803b250 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 803b24c:	f7ee fbfe 	bl	8029a4c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 803b250:	4806      	ldr	r0, [pc, #24]	; (803b26c <MX_USB_DEVICE_Init+0x58>)
 803b252:	f7fe fd53 	bl	8039cfc <USBD_Start>
 803b256:	4603      	mov	r3, r0
 803b258:	2b00      	cmp	r3, #0
 803b25a:	d001      	beq.n	803b260 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 803b25c:	f7ee fbf6 	bl	8029a4c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 803b260:	f7f5 fc82 	bl	8030b68 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 803b264:	bf00      	nop
 803b266:	bd80      	pop	{r7, pc}
 803b268:	240000b4 	.word	0x240000b4
 803b26c:	24024bcc 	.word	0x24024bcc
 803b270:	24000020 	.word	0x24000020
 803b274:	240000a0 	.word	0x240000a0

0803b278 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 803b278:	b580      	push	{r7, lr}
 803b27a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 803b27c:	2200      	movs	r2, #0
 803b27e:	4905      	ldr	r1, [pc, #20]	; (803b294 <CDC_Init_FS+0x1c>)
 803b280:	4805      	ldr	r0, [pc, #20]	; (803b298 <CDC_Init_FS+0x20>)
 803b282:	f7fe fc5f 	bl	8039b44 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 803b286:	4905      	ldr	r1, [pc, #20]	; (803b29c <CDC_Init_FS+0x24>)
 803b288:	4803      	ldr	r0, [pc, #12]	; (803b298 <CDC_Init_FS+0x20>)
 803b28a:	f7fe fc7d 	bl	8039b88 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 803b28e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 803b290:	4618      	mov	r0, r3
 803b292:	bd80      	pop	{r7, pc}
 803b294:	240256a8 	.word	0x240256a8
 803b298:	24024bcc 	.word	0x24024bcc
 803b29c:	24024ea8 	.word	0x24024ea8

0803b2a0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 803b2a0:	b480      	push	{r7}
 803b2a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 803b2a4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 803b2a6:	4618      	mov	r0, r3
 803b2a8:	46bd      	mov	sp, r7
 803b2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b2ae:	4770      	bx	lr

0803b2b0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 803b2b0:	b480      	push	{r7}
 803b2b2:	b083      	sub	sp, #12
 803b2b4:	af00      	add	r7, sp, #0
 803b2b6:	4603      	mov	r3, r0
 803b2b8:	6039      	str	r1, [r7, #0]
 803b2ba:	71fb      	strb	r3, [r7, #7]
 803b2bc:	4613      	mov	r3, r2
 803b2be:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 803b2c0:	79fb      	ldrb	r3, [r7, #7]
 803b2c2:	2b23      	cmp	r3, #35	; 0x23
 803b2c4:	d84a      	bhi.n	803b35c <CDC_Control_FS+0xac>
 803b2c6:	a201      	add	r2, pc, #4	; (adr r2, 803b2cc <CDC_Control_FS+0x1c>)
 803b2c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803b2cc:	0803b35d 	.word	0x0803b35d
 803b2d0:	0803b35d 	.word	0x0803b35d
 803b2d4:	0803b35d 	.word	0x0803b35d
 803b2d8:	0803b35d 	.word	0x0803b35d
 803b2dc:	0803b35d 	.word	0x0803b35d
 803b2e0:	0803b35d 	.word	0x0803b35d
 803b2e4:	0803b35d 	.word	0x0803b35d
 803b2e8:	0803b35d 	.word	0x0803b35d
 803b2ec:	0803b35d 	.word	0x0803b35d
 803b2f0:	0803b35d 	.word	0x0803b35d
 803b2f4:	0803b35d 	.word	0x0803b35d
 803b2f8:	0803b35d 	.word	0x0803b35d
 803b2fc:	0803b35d 	.word	0x0803b35d
 803b300:	0803b35d 	.word	0x0803b35d
 803b304:	0803b35d 	.word	0x0803b35d
 803b308:	0803b35d 	.word	0x0803b35d
 803b30c:	0803b35d 	.word	0x0803b35d
 803b310:	0803b35d 	.word	0x0803b35d
 803b314:	0803b35d 	.word	0x0803b35d
 803b318:	0803b35d 	.word	0x0803b35d
 803b31c:	0803b35d 	.word	0x0803b35d
 803b320:	0803b35d 	.word	0x0803b35d
 803b324:	0803b35d 	.word	0x0803b35d
 803b328:	0803b35d 	.word	0x0803b35d
 803b32c:	0803b35d 	.word	0x0803b35d
 803b330:	0803b35d 	.word	0x0803b35d
 803b334:	0803b35d 	.word	0x0803b35d
 803b338:	0803b35d 	.word	0x0803b35d
 803b33c:	0803b35d 	.word	0x0803b35d
 803b340:	0803b35d 	.word	0x0803b35d
 803b344:	0803b35d 	.word	0x0803b35d
 803b348:	0803b35d 	.word	0x0803b35d
 803b34c:	0803b35d 	.word	0x0803b35d
 803b350:	0803b35d 	.word	0x0803b35d
 803b354:	0803b35d 	.word	0x0803b35d
 803b358:	0803b35d 	.word	0x0803b35d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 803b35c:	bf00      	nop
  }

  return (USBD_OK);
 803b35e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 803b360:	4618      	mov	r0, r3
 803b362:	370c      	adds	r7, #12
 803b364:	46bd      	mov	sp, r7
 803b366:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b36a:	4770      	bx	lr

0803b36c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 803b36c:	b580      	push	{r7, lr}
 803b36e:	b082      	sub	sp, #8
 803b370:	af00      	add	r7, sp, #0
 803b372:	6078      	str	r0, [r7, #4]
 803b374:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 803b376:	6879      	ldr	r1, [r7, #4]
 803b378:	4805      	ldr	r0, [pc, #20]	; (803b390 <CDC_Receive_FS+0x24>)
 803b37a:	f7fe fc05 	bl	8039b88 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 803b37e:	4804      	ldr	r0, [pc, #16]	; (803b390 <CDC_Receive_FS+0x24>)
 803b380:	f7fe fc20 	bl	8039bc4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 803b384:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 803b386:	4618      	mov	r0, r3
 803b388:	3708      	adds	r7, #8
 803b38a:	46bd      	mov	sp, r7
 803b38c:	bd80      	pop	{r7, pc}
 803b38e:	bf00      	nop
 803b390:	24024bcc 	.word	0x24024bcc

0803b394 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 803b394:	b480      	push	{r7}
 803b396:	b087      	sub	sp, #28
 803b398:	af00      	add	r7, sp, #0
 803b39a:	60f8      	str	r0, [r7, #12]
 803b39c:	60b9      	str	r1, [r7, #8]
 803b39e:	4613      	mov	r3, r2
 803b3a0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 803b3a2:	2300      	movs	r3, #0
 803b3a4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 803b3a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 803b3aa:	4618      	mov	r0, r3
 803b3ac:	371c      	adds	r7, #28
 803b3ae:	46bd      	mov	sp, r7
 803b3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b3b4:	4770      	bx	lr
	...

0803b3b8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 803b3b8:	b480      	push	{r7}
 803b3ba:	b083      	sub	sp, #12
 803b3bc:	af00      	add	r7, sp, #0
 803b3be:	4603      	mov	r3, r0
 803b3c0:	6039      	str	r1, [r7, #0]
 803b3c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 803b3c4:	683b      	ldr	r3, [r7, #0]
 803b3c6:	2212      	movs	r2, #18
 803b3c8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 803b3ca:	4b03      	ldr	r3, [pc, #12]	; (803b3d8 <USBD_FS_DeviceDescriptor+0x20>)
}
 803b3cc:	4618      	mov	r0, r3
 803b3ce:	370c      	adds	r7, #12
 803b3d0:	46bd      	mov	sp, r7
 803b3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b3d6:	4770      	bx	lr
 803b3d8:	240000d0 	.word	0x240000d0

0803b3dc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 803b3dc:	b480      	push	{r7}
 803b3de:	b083      	sub	sp, #12
 803b3e0:	af00      	add	r7, sp, #0
 803b3e2:	4603      	mov	r3, r0
 803b3e4:	6039      	str	r1, [r7, #0]
 803b3e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 803b3e8:	683b      	ldr	r3, [r7, #0]
 803b3ea:	2204      	movs	r2, #4
 803b3ec:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 803b3ee:	4b03      	ldr	r3, [pc, #12]	; (803b3fc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 803b3f0:	4618      	mov	r0, r3
 803b3f2:	370c      	adds	r7, #12
 803b3f4:	46bd      	mov	sp, r7
 803b3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b3fa:	4770      	bx	lr
 803b3fc:	240000e4 	.word	0x240000e4

0803b400 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 803b400:	b580      	push	{r7, lr}
 803b402:	b082      	sub	sp, #8
 803b404:	af00      	add	r7, sp, #0
 803b406:	4603      	mov	r3, r0
 803b408:	6039      	str	r1, [r7, #0]
 803b40a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 803b40c:	79fb      	ldrb	r3, [r7, #7]
 803b40e:	2b00      	cmp	r3, #0
 803b410:	d105      	bne.n	803b41e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 803b412:	683a      	ldr	r2, [r7, #0]
 803b414:	4907      	ldr	r1, [pc, #28]	; (803b434 <USBD_FS_ProductStrDescriptor+0x34>)
 803b416:	4808      	ldr	r0, [pc, #32]	; (803b438 <USBD_FS_ProductStrDescriptor+0x38>)
 803b418:	f7ff fe1c 	bl	803b054 <USBD_GetString>
 803b41c:	e004      	b.n	803b428 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 803b41e:	683a      	ldr	r2, [r7, #0]
 803b420:	4904      	ldr	r1, [pc, #16]	; (803b434 <USBD_FS_ProductStrDescriptor+0x34>)
 803b422:	4805      	ldr	r0, [pc, #20]	; (803b438 <USBD_FS_ProductStrDescriptor+0x38>)
 803b424:	f7ff fe16 	bl	803b054 <USBD_GetString>
  }
  return USBD_StrDesc;
 803b428:	4b02      	ldr	r3, [pc, #8]	; (803b434 <USBD_FS_ProductStrDescriptor+0x34>)
}
 803b42a:	4618      	mov	r0, r3
 803b42c:	3708      	adds	r7, #8
 803b42e:	46bd      	mov	sp, r7
 803b430:	bd80      	pop	{r7, pc}
 803b432:	bf00      	nop
 803b434:	24025ea8 	.word	0x24025ea8
 803b438:	0803dd88 	.word	0x0803dd88

0803b43c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 803b43c:	b580      	push	{r7, lr}
 803b43e:	b082      	sub	sp, #8
 803b440:	af00      	add	r7, sp, #0
 803b442:	4603      	mov	r3, r0
 803b444:	6039      	str	r1, [r7, #0]
 803b446:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 803b448:	683a      	ldr	r2, [r7, #0]
 803b44a:	4904      	ldr	r1, [pc, #16]	; (803b45c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 803b44c:	4804      	ldr	r0, [pc, #16]	; (803b460 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 803b44e:	f7ff fe01 	bl	803b054 <USBD_GetString>
  return USBD_StrDesc;
 803b452:	4b02      	ldr	r3, [pc, #8]	; (803b45c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 803b454:	4618      	mov	r0, r3
 803b456:	3708      	adds	r7, #8
 803b458:	46bd      	mov	sp, r7
 803b45a:	bd80      	pop	{r7, pc}
 803b45c:	24025ea8 	.word	0x24025ea8
 803b460:	0803dda0 	.word	0x0803dda0

0803b464 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 803b464:	b580      	push	{r7, lr}
 803b466:	b082      	sub	sp, #8
 803b468:	af00      	add	r7, sp, #0
 803b46a:	4603      	mov	r3, r0
 803b46c:	6039      	str	r1, [r7, #0]
 803b46e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 803b470:	683b      	ldr	r3, [r7, #0]
 803b472:	221a      	movs	r2, #26
 803b474:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 803b476:	f000 f843 	bl	803b500 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 803b47a:	4b02      	ldr	r3, [pc, #8]	; (803b484 <USBD_FS_SerialStrDescriptor+0x20>)
}
 803b47c:	4618      	mov	r0, r3
 803b47e:	3708      	adds	r7, #8
 803b480:	46bd      	mov	sp, r7
 803b482:	bd80      	pop	{r7, pc}
 803b484:	240000e8 	.word	0x240000e8

0803b488 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 803b488:	b580      	push	{r7, lr}
 803b48a:	b082      	sub	sp, #8
 803b48c:	af00      	add	r7, sp, #0
 803b48e:	4603      	mov	r3, r0
 803b490:	6039      	str	r1, [r7, #0]
 803b492:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 803b494:	79fb      	ldrb	r3, [r7, #7]
 803b496:	2b00      	cmp	r3, #0
 803b498:	d105      	bne.n	803b4a6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 803b49a:	683a      	ldr	r2, [r7, #0]
 803b49c:	4907      	ldr	r1, [pc, #28]	; (803b4bc <USBD_FS_ConfigStrDescriptor+0x34>)
 803b49e:	4808      	ldr	r0, [pc, #32]	; (803b4c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 803b4a0:	f7ff fdd8 	bl	803b054 <USBD_GetString>
 803b4a4:	e004      	b.n	803b4b0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 803b4a6:	683a      	ldr	r2, [r7, #0]
 803b4a8:	4904      	ldr	r1, [pc, #16]	; (803b4bc <USBD_FS_ConfigStrDescriptor+0x34>)
 803b4aa:	4805      	ldr	r0, [pc, #20]	; (803b4c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 803b4ac:	f7ff fdd2 	bl	803b054 <USBD_GetString>
  }
  return USBD_StrDesc;
 803b4b0:	4b02      	ldr	r3, [pc, #8]	; (803b4bc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 803b4b2:	4618      	mov	r0, r3
 803b4b4:	3708      	adds	r7, #8
 803b4b6:	46bd      	mov	sp, r7
 803b4b8:	bd80      	pop	{r7, pc}
 803b4ba:	bf00      	nop
 803b4bc:	24025ea8 	.word	0x24025ea8
 803b4c0:	0803ddb4 	.word	0x0803ddb4

0803b4c4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 803b4c4:	b580      	push	{r7, lr}
 803b4c6:	b082      	sub	sp, #8
 803b4c8:	af00      	add	r7, sp, #0
 803b4ca:	4603      	mov	r3, r0
 803b4cc:	6039      	str	r1, [r7, #0]
 803b4ce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 803b4d0:	79fb      	ldrb	r3, [r7, #7]
 803b4d2:	2b00      	cmp	r3, #0
 803b4d4:	d105      	bne.n	803b4e2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 803b4d6:	683a      	ldr	r2, [r7, #0]
 803b4d8:	4907      	ldr	r1, [pc, #28]	; (803b4f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 803b4da:	4808      	ldr	r0, [pc, #32]	; (803b4fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 803b4dc:	f7ff fdba 	bl	803b054 <USBD_GetString>
 803b4e0:	e004      	b.n	803b4ec <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 803b4e2:	683a      	ldr	r2, [r7, #0]
 803b4e4:	4904      	ldr	r1, [pc, #16]	; (803b4f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 803b4e6:	4805      	ldr	r0, [pc, #20]	; (803b4fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 803b4e8:	f7ff fdb4 	bl	803b054 <USBD_GetString>
  }
  return USBD_StrDesc;
 803b4ec:	4b02      	ldr	r3, [pc, #8]	; (803b4f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 803b4ee:	4618      	mov	r0, r3
 803b4f0:	3708      	adds	r7, #8
 803b4f2:	46bd      	mov	sp, r7
 803b4f4:	bd80      	pop	{r7, pc}
 803b4f6:	bf00      	nop
 803b4f8:	24025ea8 	.word	0x24025ea8
 803b4fc:	0803ddc0 	.word	0x0803ddc0

0803b500 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 803b500:	b580      	push	{r7, lr}
 803b502:	b084      	sub	sp, #16
 803b504:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 803b506:	4b0f      	ldr	r3, [pc, #60]	; (803b544 <Get_SerialNum+0x44>)
 803b508:	681b      	ldr	r3, [r3, #0]
 803b50a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 803b50c:	4b0e      	ldr	r3, [pc, #56]	; (803b548 <Get_SerialNum+0x48>)
 803b50e:	681b      	ldr	r3, [r3, #0]
 803b510:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 803b512:	4b0e      	ldr	r3, [pc, #56]	; (803b54c <Get_SerialNum+0x4c>)
 803b514:	681b      	ldr	r3, [r3, #0]
 803b516:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 803b518:	68fa      	ldr	r2, [r7, #12]
 803b51a:	687b      	ldr	r3, [r7, #4]
 803b51c:	4413      	add	r3, r2
 803b51e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 803b520:	68fb      	ldr	r3, [r7, #12]
 803b522:	2b00      	cmp	r3, #0
 803b524:	d009      	beq.n	803b53a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 803b526:	2208      	movs	r2, #8
 803b528:	4909      	ldr	r1, [pc, #36]	; (803b550 <Get_SerialNum+0x50>)
 803b52a:	68f8      	ldr	r0, [r7, #12]
 803b52c:	f000 f814 	bl	803b558 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 803b530:	2204      	movs	r2, #4
 803b532:	4908      	ldr	r1, [pc, #32]	; (803b554 <Get_SerialNum+0x54>)
 803b534:	68b8      	ldr	r0, [r7, #8]
 803b536:	f000 f80f 	bl	803b558 <IntToUnicode>
  }
}
 803b53a:	bf00      	nop
 803b53c:	3710      	adds	r7, #16
 803b53e:	46bd      	mov	sp, r7
 803b540:	bd80      	pop	{r7, pc}
 803b542:	bf00      	nop
 803b544:	1ff1e800 	.word	0x1ff1e800
 803b548:	1ff1e804 	.word	0x1ff1e804
 803b54c:	1ff1e808 	.word	0x1ff1e808
 803b550:	240000ea 	.word	0x240000ea
 803b554:	240000fa 	.word	0x240000fa

0803b558 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 803b558:	b480      	push	{r7}
 803b55a:	b087      	sub	sp, #28
 803b55c:	af00      	add	r7, sp, #0
 803b55e:	60f8      	str	r0, [r7, #12]
 803b560:	60b9      	str	r1, [r7, #8]
 803b562:	4613      	mov	r3, r2
 803b564:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 803b566:	2300      	movs	r3, #0
 803b568:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 803b56a:	2300      	movs	r3, #0
 803b56c:	75fb      	strb	r3, [r7, #23]
 803b56e:	e027      	b.n	803b5c0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 803b570:	68fb      	ldr	r3, [r7, #12]
 803b572:	0f1b      	lsrs	r3, r3, #28
 803b574:	2b09      	cmp	r3, #9
 803b576:	d80b      	bhi.n	803b590 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 803b578:	68fb      	ldr	r3, [r7, #12]
 803b57a:	0f1b      	lsrs	r3, r3, #28
 803b57c:	b2da      	uxtb	r2, r3
 803b57e:	7dfb      	ldrb	r3, [r7, #23]
 803b580:	005b      	lsls	r3, r3, #1
 803b582:	4619      	mov	r1, r3
 803b584:	68bb      	ldr	r3, [r7, #8]
 803b586:	440b      	add	r3, r1
 803b588:	3230      	adds	r2, #48	; 0x30
 803b58a:	b2d2      	uxtb	r2, r2
 803b58c:	701a      	strb	r2, [r3, #0]
 803b58e:	e00a      	b.n	803b5a6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 803b590:	68fb      	ldr	r3, [r7, #12]
 803b592:	0f1b      	lsrs	r3, r3, #28
 803b594:	b2da      	uxtb	r2, r3
 803b596:	7dfb      	ldrb	r3, [r7, #23]
 803b598:	005b      	lsls	r3, r3, #1
 803b59a:	4619      	mov	r1, r3
 803b59c:	68bb      	ldr	r3, [r7, #8]
 803b59e:	440b      	add	r3, r1
 803b5a0:	3237      	adds	r2, #55	; 0x37
 803b5a2:	b2d2      	uxtb	r2, r2
 803b5a4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 803b5a6:	68fb      	ldr	r3, [r7, #12]
 803b5a8:	011b      	lsls	r3, r3, #4
 803b5aa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 803b5ac:	7dfb      	ldrb	r3, [r7, #23]
 803b5ae:	005b      	lsls	r3, r3, #1
 803b5b0:	3301      	adds	r3, #1
 803b5b2:	68ba      	ldr	r2, [r7, #8]
 803b5b4:	4413      	add	r3, r2
 803b5b6:	2200      	movs	r2, #0
 803b5b8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 803b5ba:	7dfb      	ldrb	r3, [r7, #23]
 803b5bc:	3301      	adds	r3, #1
 803b5be:	75fb      	strb	r3, [r7, #23]
 803b5c0:	7dfa      	ldrb	r2, [r7, #23]
 803b5c2:	79fb      	ldrb	r3, [r7, #7]
 803b5c4:	429a      	cmp	r2, r3
 803b5c6:	d3d3      	bcc.n	803b570 <IntToUnicode+0x18>
  }
}
 803b5c8:	bf00      	nop
 803b5ca:	bf00      	nop
 803b5cc:	371c      	adds	r7, #28
 803b5ce:	46bd      	mov	sp, r7
 803b5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b5d4:	4770      	bx	lr
	...

0803b5d8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 803b5d8:	b580      	push	{r7, lr}
 803b5da:	b0b8      	sub	sp, #224	; 0xe0
 803b5dc:	af00      	add	r7, sp, #0
 803b5de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 803b5e0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 803b5e4:	2200      	movs	r2, #0
 803b5e6:	601a      	str	r2, [r3, #0]
 803b5e8:	605a      	str	r2, [r3, #4]
 803b5ea:	609a      	str	r2, [r3, #8]
 803b5ec:	60da      	str	r2, [r3, #12]
 803b5ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 803b5f0:	f107 0310 	add.w	r3, r7, #16
 803b5f4:	22bc      	movs	r2, #188	; 0xbc
 803b5f6:	2100      	movs	r1, #0
 803b5f8:	4618      	mov	r0, r3
 803b5fa:	f000 fbe9 	bl	803bdd0 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 803b5fe:	687b      	ldr	r3, [r7, #4]
 803b600:	681b      	ldr	r3, [r3, #0]
 803b602:	4a2f      	ldr	r2, [pc, #188]	; (803b6c0 <HAL_PCD_MspInit+0xe8>)
 803b604:	4293      	cmp	r3, r2
 803b606:	d156      	bne.n	803b6b6 <HAL_PCD_MspInit+0xde>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 803b608:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 803b60c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 803b60e:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 803b612:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 803b616:	f107 0310 	add.w	r3, r7, #16
 803b61a:	4618      	mov	r0, r3
 803b61c:	f7f6 fa6e 	bl	8031afc <HAL_RCCEx_PeriphCLKConfig>
 803b620:	4603      	mov	r3, r0
 803b622:	2b00      	cmp	r3, #0
 803b624:	d001      	beq.n	803b62a <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 803b626:	f7ee fa11 	bl	8029a4c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 803b62a:	f7f5 fa9d 	bl	8030b68 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 803b62e:	4b25      	ldr	r3, [pc, #148]	; (803b6c4 <HAL_PCD_MspInit+0xec>)
 803b630:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 803b634:	4a23      	ldr	r2, [pc, #140]	; (803b6c4 <HAL_PCD_MspInit+0xec>)
 803b636:	f043 0301 	orr.w	r3, r3, #1
 803b63a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 803b63e:	4b21      	ldr	r3, [pc, #132]	; (803b6c4 <HAL_PCD_MspInit+0xec>)
 803b640:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 803b644:	f003 0301 	and.w	r3, r3, #1
 803b648:	60fb      	str	r3, [r7, #12]
 803b64a:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 803b64c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 803b650:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 803b654:	2302      	movs	r3, #2
 803b656:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 803b65a:	2300      	movs	r3, #0
 803b65c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 803b660:	2300      	movs	r3, #0
 803b662:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 803b666:	230a      	movs	r3, #10
 803b668:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 803b66c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 803b670:	4619      	mov	r1, r3
 803b672:	4815      	ldr	r0, [pc, #84]	; (803b6c8 <HAL_PCD_MspInit+0xf0>)
 803b674:	f7f2 fdf2 	bl	802e25c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 803b678:	4b12      	ldr	r3, [pc, #72]	; (803b6c4 <HAL_PCD_MspInit+0xec>)
 803b67a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 803b67e:	4a11      	ldr	r2, [pc, #68]	; (803b6c4 <HAL_PCD_MspInit+0xec>)
 803b680:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 803b684:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 803b688:	4b0e      	ldr	r3, [pc, #56]	; (803b6c4 <HAL_PCD_MspInit+0xec>)
 803b68a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 803b68e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 803b692:	60bb      	str	r3, [r7, #8]
 803b694:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_EP1_OUT_IRQn, 0, 0);
 803b696:	2200      	movs	r2, #0
 803b698:	2100      	movs	r1, #0
 803b69a:	2062      	movs	r0, #98	; 0x62
 803b69c:	f7ef fd8b 	bl	802b1b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_EP1_OUT_IRQn);
 803b6a0:	2062      	movs	r0, #98	; 0x62
 803b6a2:	f7ef fda2 	bl	802b1ea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 803b6a6:	2200      	movs	r2, #0
 803b6a8:	2100      	movs	r1, #0
 803b6aa:	2065      	movs	r0, #101	; 0x65
 803b6ac:	f7ef fd83 	bl	802b1b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 803b6b0:	2065      	movs	r0, #101	; 0x65
 803b6b2:	f7ef fd9a 	bl	802b1ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 803b6b6:	bf00      	nop
 803b6b8:	37e0      	adds	r7, #224	; 0xe0
 803b6ba:	46bd      	mov	sp, r7
 803b6bc:	bd80      	pop	{r7, pc}
 803b6be:	bf00      	nop
 803b6c0:	40080000 	.word	0x40080000
 803b6c4:	58024400 	.word	0x58024400
 803b6c8:	58020000 	.word	0x58020000

0803b6cc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803b6cc:	b580      	push	{r7, lr}
 803b6ce:	b082      	sub	sp, #8
 803b6d0:	af00      	add	r7, sp, #0
 803b6d2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 803b6d4:	687b      	ldr	r3, [r7, #4]
 803b6d6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 803b6da:	687b      	ldr	r3, [r7, #4]
 803b6dc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 803b6e0:	4619      	mov	r1, r3
 803b6e2:	4610      	mov	r0, r2
 803b6e4:	f7fe fb57 	bl	8039d96 <USBD_LL_SetupStage>
}
 803b6e8:	bf00      	nop
 803b6ea:	3708      	adds	r7, #8
 803b6ec:	46bd      	mov	sp, r7
 803b6ee:	bd80      	pop	{r7, pc}

0803b6f0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803b6f0:	b580      	push	{r7, lr}
 803b6f2:	b082      	sub	sp, #8
 803b6f4:	af00      	add	r7, sp, #0
 803b6f6:	6078      	str	r0, [r7, #4]
 803b6f8:	460b      	mov	r3, r1
 803b6fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 803b6fc:	687b      	ldr	r3, [r7, #4]
 803b6fe:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 803b702:	78fa      	ldrb	r2, [r7, #3]
 803b704:	6879      	ldr	r1, [r7, #4]
 803b706:	4613      	mov	r3, r2
 803b708:	00db      	lsls	r3, r3, #3
 803b70a:	4413      	add	r3, r2
 803b70c:	009b      	lsls	r3, r3, #2
 803b70e:	440b      	add	r3, r1
 803b710:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 803b714:	681a      	ldr	r2, [r3, #0]
 803b716:	78fb      	ldrb	r3, [r7, #3]
 803b718:	4619      	mov	r1, r3
 803b71a:	f7fe fb91 	bl	8039e40 <USBD_LL_DataOutStage>
}
 803b71e:	bf00      	nop
 803b720:	3708      	adds	r7, #8
 803b722:	46bd      	mov	sp, r7
 803b724:	bd80      	pop	{r7, pc}

0803b726 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803b726:	b580      	push	{r7, lr}
 803b728:	b082      	sub	sp, #8
 803b72a:	af00      	add	r7, sp, #0
 803b72c:	6078      	str	r0, [r7, #4]
 803b72e:	460b      	mov	r3, r1
 803b730:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 803b732:	687b      	ldr	r3, [r7, #4]
 803b734:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 803b738:	78fa      	ldrb	r2, [r7, #3]
 803b73a:	6879      	ldr	r1, [r7, #4]
 803b73c:	4613      	mov	r3, r2
 803b73e:	00db      	lsls	r3, r3, #3
 803b740:	4413      	add	r3, r2
 803b742:	009b      	lsls	r3, r3, #2
 803b744:	440b      	add	r3, r1
 803b746:	334c      	adds	r3, #76	; 0x4c
 803b748:	681a      	ldr	r2, [r3, #0]
 803b74a:	78fb      	ldrb	r3, [r7, #3]
 803b74c:	4619      	mov	r1, r3
 803b74e:	f7fe fc2a 	bl	8039fa6 <USBD_LL_DataInStage>
}
 803b752:	bf00      	nop
 803b754:	3708      	adds	r7, #8
 803b756:	46bd      	mov	sp, r7
 803b758:	bd80      	pop	{r7, pc}

0803b75a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803b75a:	b580      	push	{r7, lr}
 803b75c:	b082      	sub	sp, #8
 803b75e:	af00      	add	r7, sp, #0
 803b760:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 803b762:	687b      	ldr	r3, [r7, #4]
 803b764:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 803b768:	4618      	mov	r0, r3
 803b76a:	f7fe fd5e 	bl	803a22a <USBD_LL_SOF>
}
 803b76e:	bf00      	nop
 803b770:	3708      	adds	r7, #8
 803b772:	46bd      	mov	sp, r7
 803b774:	bd80      	pop	{r7, pc}

0803b776 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803b776:	b580      	push	{r7, lr}
 803b778:	b084      	sub	sp, #16
 803b77a:	af00      	add	r7, sp, #0
 803b77c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 803b77e:	2301      	movs	r3, #1
 803b780:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 803b782:	687b      	ldr	r3, [r7, #4]
 803b784:	68db      	ldr	r3, [r3, #12]
 803b786:	2b00      	cmp	r3, #0
 803b788:	d102      	bne.n	803b790 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 803b78a:	2300      	movs	r3, #0
 803b78c:	73fb      	strb	r3, [r7, #15]
 803b78e:	e008      	b.n	803b7a2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 803b790:	687b      	ldr	r3, [r7, #4]
 803b792:	68db      	ldr	r3, [r3, #12]
 803b794:	2b02      	cmp	r3, #2
 803b796:	d102      	bne.n	803b79e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 803b798:	2301      	movs	r3, #1
 803b79a:	73fb      	strb	r3, [r7, #15]
 803b79c:	e001      	b.n	803b7a2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 803b79e:	f7ee f955 	bl	8029a4c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 803b7a2:	687b      	ldr	r3, [r7, #4]
 803b7a4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 803b7a8:	7bfa      	ldrb	r2, [r7, #15]
 803b7aa:	4611      	mov	r1, r2
 803b7ac:	4618      	mov	r0, r3
 803b7ae:	f7fe fcfe 	bl	803a1ae <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 803b7b2:	687b      	ldr	r3, [r7, #4]
 803b7b4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 803b7b8:	4618      	mov	r0, r3
 803b7ba:	f7fe fca6 	bl	803a10a <USBD_LL_Reset>
}
 803b7be:	bf00      	nop
 803b7c0:	3710      	adds	r7, #16
 803b7c2:	46bd      	mov	sp, r7
 803b7c4:	bd80      	pop	{r7, pc}
	...

0803b7c8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803b7c8:	b580      	push	{r7, lr}
 803b7ca:	b082      	sub	sp, #8
 803b7cc:	af00      	add	r7, sp, #0
 803b7ce:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 803b7d0:	687b      	ldr	r3, [r7, #4]
 803b7d2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 803b7d6:	4618      	mov	r0, r3
 803b7d8:	f7fe fcf9 	bl	803a1ce <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 803b7dc:	687b      	ldr	r3, [r7, #4]
 803b7de:	681b      	ldr	r3, [r3, #0]
 803b7e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 803b7e4:	681b      	ldr	r3, [r3, #0]
 803b7e6:	687a      	ldr	r2, [r7, #4]
 803b7e8:	6812      	ldr	r2, [r2, #0]
 803b7ea:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 803b7ee:	f043 0301 	orr.w	r3, r3, #1
 803b7f2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 803b7f4:	687b      	ldr	r3, [r7, #4]
 803b7f6:	6a1b      	ldr	r3, [r3, #32]
 803b7f8:	2b00      	cmp	r3, #0
 803b7fa:	d005      	beq.n	803b808 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 803b7fc:	4b04      	ldr	r3, [pc, #16]	; (803b810 <HAL_PCD_SuspendCallback+0x48>)
 803b7fe:	691b      	ldr	r3, [r3, #16]
 803b800:	4a03      	ldr	r2, [pc, #12]	; (803b810 <HAL_PCD_SuspendCallback+0x48>)
 803b802:	f043 0306 	orr.w	r3, r3, #6
 803b806:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 803b808:	bf00      	nop
 803b80a:	3708      	adds	r7, #8
 803b80c:	46bd      	mov	sp, r7
 803b80e:	bd80      	pop	{r7, pc}
 803b810:	e000ed00 	.word	0xe000ed00

0803b814 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803b814:	b580      	push	{r7, lr}
 803b816:	b082      	sub	sp, #8
 803b818:	af00      	add	r7, sp, #0
 803b81a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 803b81c:	687b      	ldr	r3, [r7, #4]
 803b81e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 803b822:	4618      	mov	r0, r3
 803b824:	f7fe fce9 	bl	803a1fa <USBD_LL_Resume>
}
 803b828:	bf00      	nop
 803b82a:	3708      	adds	r7, #8
 803b82c:	46bd      	mov	sp, r7
 803b82e:	bd80      	pop	{r7, pc}

0803b830 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803b830:	b580      	push	{r7, lr}
 803b832:	b082      	sub	sp, #8
 803b834:	af00      	add	r7, sp, #0
 803b836:	6078      	str	r0, [r7, #4]
 803b838:	460b      	mov	r3, r1
 803b83a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 803b83c:	687b      	ldr	r3, [r7, #4]
 803b83e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 803b842:	78fa      	ldrb	r2, [r7, #3]
 803b844:	4611      	mov	r1, r2
 803b846:	4618      	mov	r0, r3
 803b848:	f7fe fd41 	bl	803a2ce <USBD_LL_IsoOUTIncomplete>
}
 803b84c:	bf00      	nop
 803b84e:	3708      	adds	r7, #8
 803b850:	46bd      	mov	sp, r7
 803b852:	bd80      	pop	{r7, pc}

0803b854 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803b854:	b580      	push	{r7, lr}
 803b856:	b082      	sub	sp, #8
 803b858:	af00      	add	r7, sp, #0
 803b85a:	6078      	str	r0, [r7, #4]
 803b85c:	460b      	mov	r3, r1
 803b85e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 803b860:	687b      	ldr	r3, [r7, #4]
 803b862:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 803b866:	78fa      	ldrb	r2, [r7, #3]
 803b868:	4611      	mov	r1, r2
 803b86a:	4618      	mov	r0, r3
 803b86c:	f7fe fcfd 	bl	803a26a <USBD_LL_IsoINIncomplete>
}
 803b870:	bf00      	nop
 803b872:	3708      	adds	r7, #8
 803b874:	46bd      	mov	sp, r7
 803b876:	bd80      	pop	{r7, pc}

0803b878 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803b878:	b580      	push	{r7, lr}
 803b87a:	b082      	sub	sp, #8
 803b87c:	af00      	add	r7, sp, #0
 803b87e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 803b880:	687b      	ldr	r3, [r7, #4]
 803b882:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 803b886:	4618      	mov	r0, r3
 803b888:	f7fe fd53 	bl	803a332 <USBD_LL_DevConnected>
}
 803b88c:	bf00      	nop
 803b88e:	3708      	adds	r7, #8
 803b890:	46bd      	mov	sp, r7
 803b892:	bd80      	pop	{r7, pc}

0803b894 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803b894:	b580      	push	{r7, lr}
 803b896:	b082      	sub	sp, #8
 803b898:	af00      	add	r7, sp, #0
 803b89a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 803b89c:	687b      	ldr	r3, [r7, #4]
 803b89e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 803b8a2:	4618      	mov	r0, r3
 803b8a4:	f7fe fd50 	bl	803a348 <USBD_LL_DevDisconnected>
}
 803b8a8:	bf00      	nop
 803b8aa:	3708      	adds	r7, #8
 803b8ac:	46bd      	mov	sp, r7
 803b8ae:	bd80      	pop	{r7, pc}

0803b8b0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 803b8b0:	b580      	push	{r7, lr}
 803b8b2:	b082      	sub	sp, #8
 803b8b4:	af00      	add	r7, sp, #0
 803b8b6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 803b8b8:	687b      	ldr	r3, [r7, #4]
 803b8ba:	781b      	ldrb	r3, [r3, #0]
 803b8bc:	2b00      	cmp	r3, #0
 803b8be:	d13e      	bne.n	803b93e <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 803b8c0:	4a21      	ldr	r2, [pc, #132]	; (803b948 <USBD_LL_Init+0x98>)
 803b8c2:	687b      	ldr	r3, [r7, #4]
 803b8c4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 803b8c8:	687b      	ldr	r3, [r7, #4]
 803b8ca:	4a1f      	ldr	r2, [pc, #124]	; (803b948 <USBD_LL_Init+0x98>)
 803b8cc:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 803b8d0:	4b1d      	ldr	r3, [pc, #116]	; (803b948 <USBD_LL_Init+0x98>)
 803b8d2:	4a1e      	ldr	r2, [pc, #120]	; (803b94c <USBD_LL_Init+0x9c>)
 803b8d4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 803b8d6:	4b1c      	ldr	r3, [pc, #112]	; (803b948 <USBD_LL_Init+0x98>)
 803b8d8:	2209      	movs	r2, #9
 803b8da:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 803b8dc:	4b1a      	ldr	r3, [pc, #104]	; (803b948 <USBD_LL_Init+0x98>)
 803b8de:	2202      	movs	r2, #2
 803b8e0:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 803b8e2:	4b19      	ldr	r3, [pc, #100]	; (803b948 <USBD_LL_Init+0x98>)
 803b8e4:	2200      	movs	r2, #0
 803b8e6:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 803b8e8:	4b17      	ldr	r3, [pc, #92]	; (803b948 <USBD_LL_Init+0x98>)
 803b8ea:	2202      	movs	r2, #2
 803b8ec:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 803b8ee:	4b16      	ldr	r3, [pc, #88]	; (803b948 <USBD_LL_Init+0x98>)
 803b8f0:	2200      	movs	r2, #0
 803b8f2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 803b8f4:	4b14      	ldr	r3, [pc, #80]	; (803b948 <USBD_LL_Init+0x98>)
 803b8f6:	2200      	movs	r2, #0
 803b8f8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 803b8fa:	4b13      	ldr	r3, [pc, #76]	; (803b948 <USBD_LL_Init+0x98>)
 803b8fc:	2200      	movs	r2, #0
 803b8fe:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 803b900:	4b11      	ldr	r3, [pc, #68]	; (803b948 <USBD_LL_Init+0x98>)
 803b902:	2200      	movs	r2, #0
 803b904:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 803b906:	4b10      	ldr	r3, [pc, #64]	; (803b948 <USBD_LL_Init+0x98>)
 803b908:	2200      	movs	r2, #0
 803b90a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 803b90c:	4b0e      	ldr	r3, [pc, #56]	; (803b948 <USBD_LL_Init+0x98>)
 803b90e:	2200      	movs	r2, #0
 803b910:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 803b912:	480d      	ldr	r0, [pc, #52]	; (803b948 <USBD_LL_Init+0x98>)
 803b914:	f7f3 fe18 	bl	802f548 <HAL_PCD_Init>
 803b918:	4603      	mov	r3, r0
 803b91a:	2b00      	cmp	r3, #0
 803b91c:	d001      	beq.n	803b922 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 803b91e:	f7ee f895 	bl	8029a4c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 803b922:	2180      	movs	r1, #128	; 0x80
 803b924:	4808      	ldr	r0, [pc, #32]	; (803b948 <USBD_LL_Init+0x98>)
 803b926:	f7f5 f8a4 	bl	8030a72 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 803b92a:	2240      	movs	r2, #64	; 0x40
 803b92c:	2100      	movs	r1, #0
 803b92e:	4806      	ldr	r0, [pc, #24]	; (803b948 <USBD_LL_Init+0x98>)
 803b930:	f7f5 f858 	bl	80309e4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 803b934:	2280      	movs	r2, #128	; 0x80
 803b936:	2101      	movs	r1, #1
 803b938:	4803      	ldr	r0, [pc, #12]	; (803b948 <USBD_LL_Init+0x98>)
 803b93a:	f7f5 f853 	bl	80309e4 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 803b93e:	2300      	movs	r3, #0
}
 803b940:	4618      	mov	r0, r3
 803b942:	3708      	adds	r7, #8
 803b944:	46bd      	mov	sp, r7
 803b946:	bd80      	pop	{r7, pc}
 803b948:	240260a8 	.word	0x240260a8
 803b94c:	40080000 	.word	0x40080000

0803b950 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 803b950:	b580      	push	{r7, lr}
 803b952:	b084      	sub	sp, #16
 803b954:	af00      	add	r7, sp, #0
 803b956:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 803b958:	2300      	movs	r3, #0
 803b95a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 803b95c:	2300      	movs	r3, #0
 803b95e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 803b960:	687b      	ldr	r3, [r7, #4]
 803b962:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 803b966:	4618      	mov	r0, r3
 803b968:	f7f3 ff12 	bl	802f790 <HAL_PCD_Start>
 803b96c:	4603      	mov	r3, r0
 803b96e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 803b970:	7bfb      	ldrb	r3, [r7, #15]
 803b972:	4618      	mov	r0, r3
 803b974:	f000 f942 	bl	803bbfc <USBD_Get_USB_Status>
 803b978:	4603      	mov	r3, r0
 803b97a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 803b97c:	7bbb      	ldrb	r3, [r7, #14]
}
 803b97e:	4618      	mov	r0, r3
 803b980:	3710      	adds	r7, #16
 803b982:	46bd      	mov	sp, r7
 803b984:	bd80      	pop	{r7, pc}

0803b986 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 803b986:	b580      	push	{r7, lr}
 803b988:	b084      	sub	sp, #16
 803b98a:	af00      	add	r7, sp, #0
 803b98c:	6078      	str	r0, [r7, #4]
 803b98e:	4608      	mov	r0, r1
 803b990:	4611      	mov	r1, r2
 803b992:	461a      	mov	r2, r3
 803b994:	4603      	mov	r3, r0
 803b996:	70fb      	strb	r3, [r7, #3]
 803b998:	460b      	mov	r3, r1
 803b99a:	70bb      	strb	r3, [r7, #2]
 803b99c:	4613      	mov	r3, r2
 803b99e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 803b9a0:	2300      	movs	r3, #0
 803b9a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 803b9a4:	2300      	movs	r3, #0
 803b9a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 803b9a8:	687b      	ldr	r3, [r7, #4]
 803b9aa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 803b9ae:	78bb      	ldrb	r3, [r7, #2]
 803b9b0:	883a      	ldrh	r2, [r7, #0]
 803b9b2:	78f9      	ldrb	r1, [r7, #3]
 803b9b4:	f7f4 fc10 	bl	80301d8 <HAL_PCD_EP_Open>
 803b9b8:	4603      	mov	r3, r0
 803b9ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 803b9bc:	7bfb      	ldrb	r3, [r7, #15]
 803b9be:	4618      	mov	r0, r3
 803b9c0:	f000 f91c 	bl	803bbfc <USBD_Get_USB_Status>
 803b9c4:	4603      	mov	r3, r0
 803b9c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 803b9c8:	7bbb      	ldrb	r3, [r7, #14]
}
 803b9ca:	4618      	mov	r0, r3
 803b9cc:	3710      	adds	r7, #16
 803b9ce:	46bd      	mov	sp, r7
 803b9d0:	bd80      	pop	{r7, pc}

0803b9d2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 803b9d2:	b580      	push	{r7, lr}
 803b9d4:	b084      	sub	sp, #16
 803b9d6:	af00      	add	r7, sp, #0
 803b9d8:	6078      	str	r0, [r7, #4]
 803b9da:	460b      	mov	r3, r1
 803b9dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 803b9de:	2300      	movs	r3, #0
 803b9e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 803b9e2:	2300      	movs	r3, #0
 803b9e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 803b9e6:	687b      	ldr	r3, [r7, #4]
 803b9e8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 803b9ec:	78fa      	ldrb	r2, [r7, #3]
 803b9ee:	4611      	mov	r1, r2
 803b9f0:	4618      	mov	r0, r3
 803b9f2:	f7f4 fc59 	bl	80302a8 <HAL_PCD_EP_Close>
 803b9f6:	4603      	mov	r3, r0
 803b9f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 803b9fa:	7bfb      	ldrb	r3, [r7, #15]
 803b9fc:	4618      	mov	r0, r3
 803b9fe:	f000 f8fd 	bl	803bbfc <USBD_Get_USB_Status>
 803ba02:	4603      	mov	r3, r0
 803ba04:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 803ba06:	7bbb      	ldrb	r3, [r7, #14]
}
 803ba08:	4618      	mov	r0, r3
 803ba0a:	3710      	adds	r7, #16
 803ba0c:	46bd      	mov	sp, r7
 803ba0e:	bd80      	pop	{r7, pc}

0803ba10 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 803ba10:	b580      	push	{r7, lr}
 803ba12:	b084      	sub	sp, #16
 803ba14:	af00      	add	r7, sp, #0
 803ba16:	6078      	str	r0, [r7, #4]
 803ba18:	460b      	mov	r3, r1
 803ba1a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 803ba1c:	2300      	movs	r3, #0
 803ba1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 803ba20:	2300      	movs	r3, #0
 803ba22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 803ba24:	687b      	ldr	r3, [r7, #4]
 803ba26:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 803ba2a:	78fa      	ldrb	r2, [r7, #3]
 803ba2c:	4611      	mov	r1, r2
 803ba2e:	4618      	mov	r0, r3
 803ba30:	f7f4 fd31 	bl	8030496 <HAL_PCD_EP_SetStall>
 803ba34:	4603      	mov	r3, r0
 803ba36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 803ba38:	7bfb      	ldrb	r3, [r7, #15]
 803ba3a:	4618      	mov	r0, r3
 803ba3c:	f000 f8de 	bl	803bbfc <USBD_Get_USB_Status>
 803ba40:	4603      	mov	r3, r0
 803ba42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 803ba44:	7bbb      	ldrb	r3, [r7, #14]
}
 803ba46:	4618      	mov	r0, r3
 803ba48:	3710      	adds	r7, #16
 803ba4a:	46bd      	mov	sp, r7
 803ba4c:	bd80      	pop	{r7, pc}

0803ba4e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 803ba4e:	b580      	push	{r7, lr}
 803ba50:	b084      	sub	sp, #16
 803ba52:	af00      	add	r7, sp, #0
 803ba54:	6078      	str	r0, [r7, #4]
 803ba56:	460b      	mov	r3, r1
 803ba58:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 803ba5a:	2300      	movs	r3, #0
 803ba5c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 803ba5e:	2300      	movs	r3, #0
 803ba60:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 803ba62:	687b      	ldr	r3, [r7, #4]
 803ba64:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 803ba68:	78fa      	ldrb	r2, [r7, #3]
 803ba6a:	4611      	mov	r1, r2
 803ba6c:	4618      	mov	r0, r3
 803ba6e:	f7f4 fd76 	bl	803055e <HAL_PCD_EP_ClrStall>
 803ba72:	4603      	mov	r3, r0
 803ba74:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 803ba76:	7bfb      	ldrb	r3, [r7, #15]
 803ba78:	4618      	mov	r0, r3
 803ba7a:	f000 f8bf 	bl	803bbfc <USBD_Get_USB_Status>
 803ba7e:	4603      	mov	r3, r0
 803ba80:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 803ba82:	7bbb      	ldrb	r3, [r7, #14]
}
 803ba84:	4618      	mov	r0, r3
 803ba86:	3710      	adds	r7, #16
 803ba88:	46bd      	mov	sp, r7
 803ba8a:	bd80      	pop	{r7, pc}

0803ba8c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 803ba8c:	b480      	push	{r7}
 803ba8e:	b085      	sub	sp, #20
 803ba90:	af00      	add	r7, sp, #0
 803ba92:	6078      	str	r0, [r7, #4]
 803ba94:	460b      	mov	r3, r1
 803ba96:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 803ba98:	687b      	ldr	r3, [r7, #4]
 803ba9a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 803ba9e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 803baa0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 803baa4:	2b00      	cmp	r3, #0
 803baa6:	da0b      	bge.n	803bac0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 803baa8:	78fb      	ldrb	r3, [r7, #3]
 803baaa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 803baae:	68f9      	ldr	r1, [r7, #12]
 803bab0:	4613      	mov	r3, r2
 803bab2:	00db      	lsls	r3, r3, #3
 803bab4:	4413      	add	r3, r2
 803bab6:	009b      	lsls	r3, r3, #2
 803bab8:	440b      	add	r3, r1
 803baba:	333e      	adds	r3, #62	; 0x3e
 803babc:	781b      	ldrb	r3, [r3, #0]
 803babe:	e00b      	b.n	803bad8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 803bac0:	78fb      	ldrb	r3, [r7, #3]
 803bac2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 803bac6:	68f9      	ldr	r1, [r7, #12]
 803bac8:	4613      	mov	r3, r2
 803baca:	00db      	lsls	r3, r3, #3
 803bacc:	4413      	add	r3, r2
 803bace:	009b      	lsls	r3, r3, #2
 803bad0:	440b      	add	r3, r1
 803bad2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 803bad6:	781b      	ldrb	r3, [r3, #0]
  }
}
 803bad8:	4618      	mov	r0, r3
 803bada:	3714      	adds	r7, #20
 803badc:	46bd      	mov	sp, r7
 803bade:	f85d 7b04 	ldr.w	r7, [sp], #4
 803bae2:	4770      	bx	lr

0803bae4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 803bae4:	b580      	push	{r7, lr}
 803bae6:	b084      	sub	sp, #16
 803bae8:	af00      	add	r7, sp, #0
 803baea:	6078      	str	r0, [r7, #4]
 803baec:	460b      	mov	r3, r1
 803baee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 803baf0:	2300      	movs	r3, #0
 803baf2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 803baf4:	2300      	movs	r3, #0
 803baf6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 803baf8:	687b      	ldr	r3, [r7, #4]
 803bafa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 803bafe:	78fa      	ldrb	r2, [r7, #3]
 803bb00:	4611      	mov	r1, r2
 803bb02:	4618      	mov	r0, r3
 803bb04:	f7f4 fb43 	bl	803018e <HAL_PCD_SetAddress>
 803bb08:	4603      	mov	r3, r0
 803bb0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 803bb0c:	7bfb      	ldrb	r3, [r7, #15]
 803bb0e:	4618      	mov	r0, r3
 803bb10:	f000 f874 	bl	803bbfc <USBD_Get_USB_Status>
 803bb14:	4603      	mov	r3, r0
 803bb16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 803bb18:	7bbb      	ldrb	r3, [r7, #14]
}
 803bb1a:	4618      	mov	r0, r3
 803bb1c:	3710      	adds	r7, #16
 803bb1e:	46bd      	mov	sp, r7
 803bb20:	bd80      	pop	{r7, pc}

0803bb22 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 803bb22:	b580      	push	{r7, lr}
 803bb24:	b086      	sub	sp, #24
 803bb26:	af00      	add	r7, sp, #0
 803bb28:	60f8      	str	r0, [r7, #12]
 803bb2a:	607a      	str	r2, [r7, #4]
 803bb2c:	603b      	str	r3, [r7, #0]
 803bb2e:	460b      	mov	r3, r1
 803bb30:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 803bb32:	2300      	movs	r3, #0
 803bb34:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 803bb36:	2300      	movs	r3, #0
 803bb38:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 803bb3a:	68fb      	ldr	r3, [r7, #12]
 803bb3c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 803bb40:	7af9      	ldrb	r1, [r7, #11]
 803bb42:	683b      	ldr	r3, [r7, #0]
 803bb44:	687a      	ldr	r2, [r7, #4]
 803bb46:	f7f4 fc5c 	bl	8030402 <HAL_PCD_EP_Transmit>
 803bb4a:	4603      	mov	r3, r0
 803bb4c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 803bb4e:	7dfb      	ldrb	r3, [r7, #23]
 803bb50:	4618      	mov	r0, r3
 803bb52:	f000 f853 	bl	803bbfc <USBD_Get_USB_Status>
 803bb56:	4603      	mov	r3, r0
 803bb58:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 803bb5a:	7dbb      	ldrb	r3, [r7, #22]
}
 803bb5c:	4618      	mov	r0, r3
 803bb5e:	3718      	adds	r7, #24
 803bb60:	46bd      	mov	sp, r7
 803bb62:	bd80      	pop	{r7, pc}

0803bb64 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 803bb64:	b580      	push	{r7, lr}
 803bb66:	b086      	sub	sp, #24
 803bb68:	af00      	add	r7, sp, #0
 803bb6a:	60f8      	str	r0, [r7, #12]
 803bb6c:	607a      	str	r2, [r7, #4]
 803bb6e:	603b      	str	r3, [r7, #0]
 803bb70:	460b      	mov	r3, r1
 803bb72:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 803bb74:	2300      	movs	r3, #0
 803bb76:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 803bb78:	2300      	movs	r3, #0
 803bb7a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 803bb7c:	68fb      	ldr	r3, [r7, #12]
 803bb7e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 803bb82:	7af9      	ldrb	r1, [r7, #11]
 803bb84:	683b      	ldr	r3, [r7, #0]
 803bb86:	687a      	ldr	r2, [r7, #4]
 803bb88:	f7f4 fbd8 	bl	803033c <HAL_PCD_EP_Receive>
 803bb8c:	4603      	mov	r3, r0
 803bb8e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 803bb90:	7dfb      	ldrb	r3, [r7, #23]
 803bb92:	4618      	mov	r0, r3
 803bb94:	f000 f832 	bl	803bbfc <USBD_Get_USB_Status>
 803bb98:	4603      	mov	r3, r0
 803bb9a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 803bb9c:	7dbb      	ldrb	r3, [r7, #22]
}
 803bb9e:	4618      	mov	r0, r3
 803bba0:	3718      	adds	r7, #24
 803bba2:	46bd      	mov	sp, r7
 803bba4:	bd80      	pop	{r7, pc}

0803bba6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 803bba6:	b580      	push	{r7, lr}
 803bba8:	b082      	sub	sp, #8
 803bbaa:	af00      	add	r7, sp, #0
 803bbac:	6078      	str	r0, [r7, #4]
 803bbae:	460b      	mov	r3, r1
 803bbb0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 803bbb2:	687b      	ldr	r3, [r7, #4]
 803bbb4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 803bbb8:	78fa      	ldrb	r2, [r7, #3]
 803bbba:	4611      	mov	r1, r2
 803bbbc:	4618      	mov	r0, r3
 803bbbe:	f7f4 fc08 	bl	80303d2 <HAL_PCD_EP_GetRxCount>
 803bbc2:	4603      	mov	r3, r0
}
 803bbc4:	4618      	mov	r0, r3
 803bbc6:	3708      	adds	r7, #8
 803bbc8:	46bd      	mov	sp, r7
 803bbca:	bd80      	pop	{r7, pc}

0803bbcc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 803bbcc:	b480      	push	{r7}
 803bbce:	b083      	sub	sp, #12
 803bbd0:	af00      	add	r7, sp, #0
 803bbd2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 803bbd4:	4b03      	ldr	r3, [pc, #12]	; (803bbe4 <USBD_static_malloc+0x18>)
}
 803bbd6:	4618      	mov	r0, r3
 803bbd8:	370c      	adds	r7, #12
 803bbda:	46bd      	mov	sp, r7
 803bbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 803bbe0:	4770      	bx	lr
 803bbe2:	bf00      	nop
 803bbe4:	240265b4 	.word	0x240265b4

0803bbe8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 803bbe8:	b480      	push	{r7}
 803bbea:	b083      	sub	sp, #12
 803bbec:	af00      	add	r7, sp, #0
 803bbee:	6078      	str	r0, [r7, #4]

}
 803bbf0:	bf00      	nop
 803bbf2:	370c      	adds	r7, #12
 803bbf4:	46bd      	mov	sp, r7
 803bbf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 803bbfa:	4770      	bx	lr

0803bbfc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 803bbfc:	b480      	push	{r7}
 803bbfe:	b085      	sub	sp, #20
 803bc00:	af00      	add	r7, sp, #0
 803bc02:	4603      	mov	r3, r0
 803bc04:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 803bc06:	2300      	movs	r3, #0
 803bc08:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 803bc0a:	79fb      	ldrb	r3, [r7, #7]
 803bc0c:	2b03      	cmp	r3, #3
 803bc0e:	d817      	bhi.n	803bc40 <USBD_Get_USB_Status+0x44>
 803bc10:	a201      	add	r2, pc, #4	; (adr r2, 803bc18 <USBD_Get_USB_Status+0x1c>)
 803bc12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803bc16:	bf00      	nop
 803bc18:	0803bc29 	.word	0x0803bc29
 803bc1c:	0803bc2f 	.word	0x0803bc2f
 803bc20:	0803bc35 	.word	0x0803bc35
 803bc24:	0803bc3b 	.word	0x0803bc3b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 803bc28:	2300      	movs	r3, #0
 803bc2a:	73fb      	strb	r3, [r7, #15]
    break;
 803bc2c:	e00b      	b.n	803bc46 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 803bc2e:	2303      	movs	r3, #3
 803bc30:	73fb      	strb	r3, [r7, #15]
    break;
 803bc32:	e008      	b.n	803bc46 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 803bc34:	2301      	movs	r3, #1
 803bc36:	73fb      	strb	r3, [r7, #15]
    break;
 803bc38:	e005      	b.n	803bc46 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 803bc3a:	2303      	movs	r3, #3
 803bc3c:	73fb      	strb	r3, [r7, #15]
    break;
 803bc3e:	e002      	b.n	803bc46 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 803bc40:	2303      	movs	r3, #3
 803bc42:	73fb      	strb	r3, [r7, #15]
    break;
 803bc44:	bf00      	nop
  }
  return usb_status;
 803bc46:	7bfb      	ldrb	r3, [r7, #15]
}
 803bc48:	4618      	mov	r0, r3
 803bc4a:	3714      	adds	r7, #20
 803bc4c:	46bd      	mov	sp, r7
 803bc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 803bc52:	4770      	bx	lr

0803bc54 <_ZdlPvj>:
 803bc54:	f000 b817 	b.w	803bc86 <_ZdlPv>

0803bc58 <_Znwj>:
 803bc58:	2801      	cmp	r0, #1
 803bc5a:	bf38      	it	cc
 803bc5c:	2001      	movcc	r0, #1
 803bc5e:	b510      	push	{r4, lr}
 803bc60:	4604      	mov	r4, r0
 803bc62:	4620      	mov	r0, r4
 803bc64:	f000 f87c 	bl	803bd60 <malloc>
 803bc68:	b930      	cbnz	r0, 803bc78 <_Znwj+0x20>
 803bc6a:	f000 f80f 	bl	803bc8c <_ZSt15get_new_handlerv>
 803bc6e:	b908      	cbnz	r0, 803bc74 <_Znwj+0x1c>
 803bc70:	f000 f814 	bl	803bc9c <abort>
 803bc74:	4780      	blx	r0
 803bc76:	e7f4      	b.n	803bc62 <_Znwj+0xa>
 803bc78:	bd10      	pop	{r4, pc}

0803bc7a <_ZSt17__throw_bad_allocv>:
 803bc7a:	b508      	push	{r3, lr}
 803bc7c:	f000 f80e 	bl	803bc9c <abort>

0803bc80 <_ZSt20__throw_length_errorPKc>:
 803bc80:	b508      	push	{r3, lr}
 803bc82:	f000 f80b 	bl	803bc9c <abort>

0803bc86 <_ZdlPv>:
 803bc86:	f000 b873 	b.w	803bd70 <free>
	...

0803bc8c <_ZSt15get_new_handlerv>:
 803bc8c:	4b02      	ldr	r3, [pc, #8]	; (803bc98 <_ZSt15get_new_handlerv+0xc>)
 803bc8e:	6818      	ldr	r0, [r3, #0]
 803bc90:	f3bf 8f5b 	dmb	ish
 803bc94:	4770      	bx	lr
 803bc96:	bf00      	nop
 803bc98:	240267d4 	.word	0x240267d4

0803bc9c <abort>:
 803bc9c:	b508      	push	{r3, lr}
 803bc9e:	2006      	movs	r0, #6
 803bca0:	f000 fca4 	bl	803c5ec <raise>
 803bca4:	2001      	movs	r0, #1
 803bca6:	f7ee f90f 	bl	8029ec8 <_exit>
	...

0803bcac <__assert_func>:
 803bcac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 803bcae:	4614      	mov	r4, r2
 803bcb0:	461a      	mov	r2, r3
 803bcb2:	4b09      	ldr	r3, [pc, #36]	; (803bcd8 <__assert_func+0x2c>)
 803bcb4:	681b      	ldr	r3, [r3, #0]
 803bcb6:	4605      	mov	r5, r0
 803bcb8:	68d8      	ldr	r0, [r3, #12]
 803bcba:	b14c      	cbz	r4, 803bcd0 <__assert_func+0x24>
 803bcbc:	4b07      	ldr	r3, [pc, #28]	; (803bcdc <__assert_func+0x30>)
 803bcbe:	9100      	str	r1, [sp, #0]
 803bcc0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 803bcc4:	4906      	ldr	r1, [pc, #24]	; (803bce0 <__assert_func+0x34>)
 803bcc6:	462b      	mov	r3, r5
 803bcc8:	f000 f814 	bl	803bcf4 <fiprintf>
 803bccc:	f7ff ffe6 	bl	803bc9c <abort>
 803bcd0:	4b04      	ldr	r3, [pc, #16]	; (803bce4 <__assert_func+0x38>)
 803bcd2:	461c      	mov	r4, r3
 803bcd4:	e7f3      	b.n	803bcbe <__assert_func+0x12>
 803bcd6:	bf00      	nop
 803bcd8:	24000104 	.word	0x24000104
 803bcdc:	08058488 	.word	0x08058488
 803bce0:	08058495 	.word	0x08058495
 803bce4:	080584c3 	.word	0x080584c3

0803bce8 <__errno>:
 803bce8:	4b01      	ldr	r3, [pc, #4]	; (803bcf0 <__errno+0x8>)
 803bcea:	6818      	ldr	r0, [r3, #0]
 803bcec:	4770      	bx	lr
 803bcee:	bf00      	nop
 803bcf0:	24000104 	.word	0x24000104

0803bcf4 <fiprintf>:
 803bcf4:	b40e      	push	{r1, r2, r3}
 803bcf6:	b503      	push	{r0, r1, lr}
 803bcf8:	4601      	mov	r1, r0
 803bcfa:	ab03      	add	r3, sp, #12
 803bcfc:	4805      	ldr	r0, [pc, #20]	; (803bd14 <fiprintf+0x20>)
 803bcfe:	f853 2b04 	ldr.w	r2, [r3], #4
 803bd02:	6800      	ldr	r0, [r0, #0]
 803bd04:	9301      	str	r3, [sp, #4]
 803bd06:	f000 f975 	bl	803bff4 <_vfiprintf_r>
 803bd0a:	b002      	add	sp, #8
 803bd0c:	f85d eb04 	ldr.w	lr, [sp], #4
 803bd10:	b003      	add	sp, #12
 803bd12:	4770      	bx	lr
 803bd14:	24000104 	.word	0x24000104

0803bd18 <__libc_init_array>:
 803bd18:	b570      	push	{r4, r5, r6, lr}
 803bd1a:	4d0d      	ldr	r5, [pc, #52]	; (803bd50 <__libc_init_array+0x38>)
 803bd1c:	4c0d      	ldr	r4, [pc, #52]	; (803bd54 <__libc_init_array+0x3c>)
 803bd1e:	1b64      	subs	r4, r4, r5
 803bd20:	10a4      	asrs	r4, r4, #2
 803bd22:	2600      	movs	r6, #0
 803bd24:	42a6      	cmp	r6, r4
 803bd26:	d109      	bne.n	803bd3c <__libc_init_array+0x24>
 803bd28:	4d0b      	ldr	r5, [pc, #44]	; (803bd58 <__libc_init_array+0x40>)
 803bd2a:	4c0c      	ldr	r4, [pc, #48]	; (803bd5c <__libc_init_array+0x44>)
 803bd2c:	f001 f812 	bl	803cd54 <_init>
 803bd30:	1b64      	subs	r4, r4, r5
 803bd32:	10a4      	asrs	r4, r4, #2
 803bd34:	2600      	movs	r6, #0
 803bd36:	42a6      	cmp	r6, r4
 803bd38:	d105      	bne.n	803bd46 <__libc_init_array+0x2e>
 803bd3a:	bd70      	pop	{r4, r5, r6, pc}
 803bd3c:	f855 3b04 	ldr.w	r3, [r5], #4
 803bd40:	4798      	blx	r3
 803bd42:	3601      	adds	r6, #1
 803bd44:	e7ee      	b.n	803bd24 <__libc_init_array+0xc>
 803bd46:	f855 3b04 	ldr.w	r3, [r5], #4
 803bd4a:	4798      	blx	r3
 803bd4c:	3601      	adds	r6, #1
 803bd4e:	e7f2      	b.n	803bd36 <__libc_init_array+0x1e>
 803bd50:	08058564 	.word	0x08058564
 803bd54:	08058564 	.word	0x08058564
 803bd58:	08058564 	.word	0x08058564
 803bd5c:	0805856c 	.word	0x0805856c

0803bd60 <malloc>:
 803bd60:	4b02      	ldr	r3, [pc, #8]	; (803bd6c <malloc+0xc>)
 803bd62:	4601      	mov	r1, r0
 803bd64:	6818      	ldr	r0, [r3, #0]
 803bd66:	f000 b8a7 	b.w	803beb8 <_malloc_r>
 803bd6a:	bf00      	nop
 803bd6c:	24000104 	.word	0x24000104

0803bd70 <free>:
 803bd70:	4b02      	ldr	r3, [pc, #8]	; (803bd7c <free+0xc>)
 803bd72:	4601      	mov	r1, r0
 803bd74:	6818      	ldr	r0, [r3, #0]
 803bd76:	f000 b833 	b.w	803bde0 <_free_r>
 803bd7a:	bf00      	nop
 803bd7c:	24000104 	.word	0x24000104

0803bd80 <memcpy>:
 803bd80:	440a      	add	r2, r1
 803bd82:	4291      	cmp	r1, r2
 803bd84:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 803bd88:	d100      	bne.n	803bd8c <memcpy+0xc>
 803bd8a:	4770      	bx	lr
 803bd8c:	b510      	push	{r4, lr}
 803bd8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 803bd92:	f803 4f01 	strb.w	r4, [r3, #1]!
 803bd96:	4291      	cmp	r1, r2
 803bd98:	d1f9      	bne.n	803bd8e <memcpy+0xe>
 803bd9a:	bd10      	pop	{r4, pc}

0803bd9c <memmove>:
 803bd9c:	4288      	cmp	r0, r1
 803bd9e:	b510      	push	{r4, lr}
 803bda0:	eb01 0402 	add.w	r4, r1, r2
 803bda4:	d902      	bls.n	803bdac <memmove+0x10>
 803bda6:	4284      	cmp	r4, r0
 803bda8:	4623      	mov	r3, r4
 803bdaa:	d807      	bhi.n	803bdbc <memmove+0x20>
 803bdac:	1e43      	subs	r3, r0, #1
 803bdae:	42a1      	cmp	r1, r4
 803bdb0:	d008      	beq.n	803bdc4 <memmove+0x28>
 803bdb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 803bdb6:	f803 2f01 	strb.w	r2, [r3, #1]!
 803bdba:	e7f8      	b.n	803bdae <memmove+0x12>
 803bdbc:	4402      	add	r2, r0
 803bdbe:	4601      	mov	r1, r0
 803bdc0:	428a      	cmp	r2, r1
 803bdc2:	d100      	bne.n	803bdc6 <memmove+0x2a>
 803bdc4:	bd10      	pop	{r4, pc}
 803bdc6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 803bdca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 803bdce:	e7f7      	b.n	803bdc0 <memmove+0x24>

0803bdd0 <memset>:
 803bdd0:	4402      	add	r2, r0
 803bdd2:	4603      	mov	r3, r0
 803bdd4:	4293      	cmp	r3, r2
 803bdd6:	d100      	bne.n	803bdda <memset+0xa>
 803bdd8:	4770      	bx	lr
 803bdda:	f803 1b01 	strb.w	r1, [r3], #1
 803bdde:	e7f9      	b.n	803bdd4 <memset+0x4>

0803bde0 <_free_r>:
 803bde0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 803bde2:	2900      	cmp	r1, #0
 803bde4:	d044      	beq.n	803be70 <_free_r+0x90>
 803bde6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 803bdea:	9001      	str	r0, [sp, #4]
 803bdec:	2b00      	cmp	r3, #0
 803bdee:	f1a1 0404 	sub.w	r4, r1, #4
 803bdf2:	bfb8      	it	lt
 803bdf4:	18e4      	addlt	r4, r4, r3
 803bdf6:	f000 fef5 	bl	803cbe4 <__malloc_lock>
 803bdfa:	4a1e      	ldr	r2, [pc, #120]	; (803be74 <_free_r+0x94>)
 803bdfc:	9801      	ldr	r0, [sp, #4]
 803bdfe:	6813      	ldr	r3, [r2, #0]
 803be00:	b933      	cbnz	r3, 803be10 <_free_r+0x30>
 803be02:	6063      	str	r3, [r4, #4]
 803be04:	6014      	str	r4, [r2, #0]
 803be06:	b003      	add	sp, #12
 803be08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 803be0c:	f000 bef0 	b.w	803cbf0 <__malloc_unlock>
 803be10:	42a3      	cmp	r3, r4
 803be12:	d908      	bls.n	803be26 <_free_r+0x46>
 803be14:	6825      	ldr	r5, [r4, #0]
 803be16:	1961      	adds	r1, r4, r5
 803be18:	428b      	cmp	r3, r1
 803be1a:	bf01      	itttt	eq
 803be1c:	6819      	ldreq	r1, [r3, #0]
 803be1e:	685b      	ldreq	r3, [r3, #4]
 803be20:	1949      	addeq	r1, r1, r5
 803be22:	6021      	streq	r1, [r4, #0]
 803be24:	e7ed      	b.n	803be02 <_free_r+0x22>
 803be26:	461a      	mov	r2, r3
 803be28:	685b      	ldr	r3, [r3, #4]
 803be2a:	b10b      	cbz	r3, 803be30 <_free_r+0x50>
 803be2c:	42a3      	cmp	r3, r4
 803be2e:	d9fa      	bls.n	803be26 <_free_r+0x46>
 803be30:	6811      	ldr	r1, [r2, #0]
 803be32:	1855      	adds	r5, r2, r1
 803be34:	42a5      	cmp	r5, r4
 803be36:	d10b      	bne.n	803be50 <_free_r+0x70>
 803be38:	6824      	ldr	r4, [r4, #0]
 803be3a:	4421      	add	r1, r4
 803be3c:	1854      	adds	r4, r2, r1
 803be3e:	42a3      	cmp	r3, r4
 803be40:	6011      	str	r1, [r2, #0]
 803be42:	d1e0      	bne.n	803be06 <_free_r+0x26>
 803be44:	681c      	ldr	r4, [r3, #0]
 803be46:	685b      	ldr	r3, [r3, #4]
 803be48:	6053      	str	r3, [r2, #4]
 803be4a:	4421      	add	r1, r4
 803be4c:	6011      	str	r1, [r2, #0]
 803be4e:	e7da      	b.n	803be06 <_free_r+0x26>
 803be50:	d902      	bls.n	803be58 <_free_r+0x78>
 803be52:	230c      	movs	r3, #12
 803be54:	6003      	str	r3, [r0, #0]
 803be56:	e7d6      	b.n	803be06 <_free_r+0x26>
 803be58:	6825      	ldr	r5, [r4, #0]
 803be5a:	1961      	adds	r1, r4, r5
 803be5c:	428b      	cmp	r3, r1
 803be5e:	bf04      	itt	eq
 803be60:	6819      	ldreq	r1, [r3, #0]
 803be62:	685b      	ldreq	r3, [r3, #4]
 803be64:	6063      	str	r3, [r4, #4]
 803be66:	bf04      	itt	eq
 803be68:	1949      	addeq	r1, r1, r5
 803be6a:	6021      	streq	r1, [r4, #0]
 803be6c:	6054      	str	r4, [r2, #4]
 803be6e:	e7ca      	b.n	803be06 <_free_r+0x26>
 803be70:	b003      	add	sp, #12
 803be72:	bd30      	pop	{r4, r5, pc}
 803be74:	240267d8 	.word	0x240267d8

0803be78 <sbrk_aligned>:
 803be78:	b570      	push	{r4, r5, r6, lr}
 803be7a:	4e0e      	ldr	r6, [pc, #56]	; (803beb4 <sbrk_aligned+0x3c>)
 803be7c:	460c      	mov	r4, r1
 803be7e:	6831      	ldr	r1, [r6, #0]
 803be80:	4605      	mov	r5, r0
 803be82:	b911      	cbnz	r1, 803be8a <sbrk_aligned+0x12>
 803be84:	f000 fb7a 	bl	803c57c <_sbrk_r>
 803be88:	6030      	str	r0, [r6, #0]
 803be8a:	4621      	mov	r1, r4
 803be8c:	4628      	mov	r0, r5
 803be8e:	f000 fb75 	bl	803c57c <_sbrk_r>
 803be92:	1c43      	adds	r3, r0, #1
 803be94:	d00a      	beq.n	803beac <sbrk_aligned+0x34>
 803be96:	1cc4      	adds	r4, r0, #3
 803be98:	f024 0403 	bic.w	r4, r4, #3
 803be9c:	42a0      	cmp	r0, r4
 803be9e:	d007      	beq.n	803beb0 <sbrk_aligned+0x38>
 803bea0:	1a21      	subs	r1, r4, r0
 803bea2:	4628      	mov	r0, r5
 803bea4:	f000 fb6a 	bl	803c57c <_sbrk_r>
 803bea8:	3001      	adds	r0, #1
 803beaa:	d101      	bne.n	803beb0 <sbrk_aligned+0x38>
 803beac:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 803beb0:	4620      	mov	r0, r4
 803beb2:	bd70      	pop	{r4, r5, r6, pc}
 803beb4:	240267dc 	.word	0x240267dc

0803beb8 <_malloc_r>:
 803beb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 803bebc:	1ccd      	adds	r5, r1, #3
 803bebe:	f025 0503 	bic.w	r5, r5, #3
 803bec2:	3508      	adds	r5, #8
 803bec4:	2d0c      	cmp	r5, #12
 803bec6:	bf38      	it	cc
 803bec8:	250c      	movcc	r5, #12
 803beca:	2d00      	cmp	r5, #0
 803becc:	4607      	mov	r7, r0
 803bece:	db01      	blt.n	803bed4 <_malloc_r+0x1c>
 803bed0:	42a9      	cmp	r1, r5
 803bed2:	d905      	bls.n	803bee0 <_malloc_r+0x28>
 803bed4:	230c      	movs	r3, #12
 803bed6:	603b      	str	r3, [r7, #0]
 803bed8:	2600      	movs	r6, #0
 803beda:	4630      	mov	r0, r6
 803bedc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 803bee0:	4e2e      	ldr	r6, [pc, #184]	; (803bf9c <_malloc_r+0xe4>)
 803bee2:	f000 fe7f 	bl	803cbe4 <__malloc_lock>
 803bee6:	6833      	ldr	r3, [r6, #0]
 803bee8:	461c      	mov	r4, r3
 803beea:	bb34      	cbnz	r4, 803bf3a <_malloc_r+0x82>
 803beec:	4629      	mov	r1, r5
 803beee:	4638      	mov	r0, r7
 803bef0:	f7ff ffc2 	bl	803be78 <sbrk_aligned>
 803bef4:	1c43      	adds	r3, r0, #1
 803bef6:	4604      	mov	r4, r0
 803bef8:	d14d      	bne.n	803bf96 <_malloc_r+0xde>
 803befa:	6834      	ldr	r4, [r6, #0]
 803befc:	4626      	mov	r6, r4
 803befe:	2e00      	cmp	r6, #0
 803bf00:	d140      	bne.n	803bf84 <_malloc_r+0xcc>
 803bf02:	6823      	ldr	r3, [r4, #0]
 803bf04:	4631      	mov	r1, r6
 803bf06:	4638      	mov	r0, r7
 803bf08:	eb04 0803 	add.w	r8, r4, r3
 803bf0c:	f000 fb36 	bl	803c57c <_sbrk_r>
 803bf10:	4580      	cmp	r8, r0
 803bf12:	d13a      	bne.n	803bf8a <_malloc_r+0xd2>
 803bf14:	6821      	ldr	r1, [r4, #0]
 803bf16:	3503      	adds	r5, #3
 803bf18:	1a6d      	subs	r5, r5, r1
 803bf1a:	f025 0503 	bic.w	r5, r5, #3
 803bf1e:	3508      	adds	r5, #8
 803bf20:	2d0c      	cmp	r5, #12
 803bf22:	bf38      	it	cc
 803bf24:	250c      	movcc	r5, #12
 803bf26:	4629      	mov	r1, r5
 803bf28:	4638      	mov	r0, r7
 803bf2a:	f7ff ffa5 	bl	803be78 <sbrk_aligned>
 803bf2e:	3001      	adds	r0, #1
 803bf30:	d02b      	beq.n	803bf8a <_malloc_r+0xd2>
 803bf32:	6823      	ldr	r3, [r4, #0]
 803bf34:	442b      	add	r3, r5
 803bf36:	6023      	str	r3, [r4, #0]
 803bf38:	e00e      	b.n	803bf58 <_malloc_r+0xa0>
 803bf3a:	6822      	ldr	r2, [r4, #0]
 803bf3c:	1b52      	subs	r2, r2, r5
 803bf3e:	d41e      	bmi.n	803bf7e <_malloc_r+0xc6>
 803bf40:	2a0b      	cmp	r2, #11
 803bf42:	d916      	bls.n	803bf72 <_malloc_r+0xba>
 803bf44:	1961      	adds	r1, r4, r5
 803bf46:	42a3      	cmp	r3, r4
 803bf48:	6025      	str	r5, [r4, #0]
 803bf4a:	bf18      	it	ne
 803bf4c:	6059      	strne	r1, [r3, #4]
 803bf4e:	6863      	ldr	r3, [r4, #4]
 803bf50:	bf08      	it	eq
 803bf52:	6031      	streq	r1, [r6, #0]
 803bf54:	5162      	str	r2, [r4, r5]
 803bf56:	604b      	str	r3, [r1, #4]
 803bf58:	4638      	mov	r0, r7
 803bf5a:	f104 060b 	add.w	r6, r4, #11
 803bf5e:	f000 fe47 	bl	803cbf0 <__malloc_unlock>
 803bf62:	f026 0607 	bic.w	r6, r6, #7
 803bf66:	1d23      	adds	r3, r4, #4
 803bf68:	1af2      	subs	r2, r6, r3
 803bf6a:	d0b6      	beq.n	803beda <_malloc_r+0x22>
 803bf6c:	1b9b      	subs	r3, r3, r6
 803bf6e:	50a3      	str	r3, [r4, r2]
 803bf70:	e7b3      	b.n	803beda <_malloc_r+0x22>
 803bf72:	6862      	ldr	r2, [r4, #4]
 803bf74:	42a3      	cmp	r3, r4
 803bf76:	bf0c      	ite	eq
 803bf78:	6032      	streq	r2, [r6, #0]
 803bf7a:	605a      	strne	r2, [r3, #4]
 803bf7c:	e7ec      	b.n	803bf58 <_malloc_r+0xa0>
 803bf7e:	4623      	mov	r3, r4
 803bf80:	6864      	ldr	r4, [r4, #4]
 803bf82:	e7b2      	b.n	803beea <_malloc_r+0x32>
 803bf84:	4634      	mov	r4, r6
 803bf86:	6876      	ldr	r6, [r6, #4]
 803bf88:	e7b9      	b.n	803befe <_malloc_r+0x46>
 803bf8a:	230c      	movs	r3, #12
 803bf8c:	603b      	str	r3, [r7, #0]
 803bf8e:	4638      	mov	r0, r7
 803bf90:	f000 fe2e 	bl	803cbf0 <__malloc_unlock>
 803bf94:	e7a1      	b.n	803beda <_malloc_r+0x22>
 803bf96:	6025      	str	r5, [r4, #0]
 803bf98:	e7de      	b.n	803bf58 <_malloc_r+0xa0>
 803bf9a:	bf00      	nop
 803bf9c:	240267d8 	.word	0x240267d8

0803bfa0 <__sfputc_r>:
 803bfa0:	6893      	ldr	r3, [r2, #8]
 803bfa2:	3b01      	subs	r3, #1
 803bfa4:	2b00      	cmp	r3, #0
 803bfa6:	b410      	push	{r4}
 803bfa8:	6093      	str	r3, [r2, #8]
 803bfaa:	da08      	bge.n	803bfbe <__sfputc_r+0x1e>
 803bfac:	6994      	ldr	r4, [r2, #24]
 803bfae:	42a3      	cmp	r3, r4
 803bfb0:	db01      	blt.n	803bfb6 <__sfputc_r+0x16>
 803bfb2:	290a      	cmp	r1, #10
 803bfb4:	d103      	bne.n	803bfbe <__sfputc_r+0x1e>
 803bfb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 803bfba:	f000 bb33 	b.w	803c624 <__swbuf_r>
 803bfbe:	6813      	ldr	r3, [r2, #0]
 803bfc0:	1c58      	adds	r0, r3, #1
 803bfc2:	6010      	str	r0, [r2, #0]
 803bfc4:	7019      	strb	r1, [r3, #0]
 803bfc6:	4608      	mov	r0, r1
 803bfc8:	f85d 4b04 	ldr.w	r4, [sp], #4
 803bfcc:	4770      	bx	lr

0803bfce <__sfputs_r>:
 803bfce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803bfd0:	4606      	mov	r6, r0
 803bfd2:	460f      	mov	r7, r1
 803bfd4:	4614      	mov	r4, r2
 803bfd6:	18d5      	adds	r5, r2, r3
 803bfd8:	42ac      	cmp	r4, r5
 803bfda:	d101      	bne.n	803bfe0 <__sfputs_r+0x12>
 803bfdc:	2000      	movs	r0, #0
 803bfde:	e007      	b.n	803bff0 <__sfputs_r+0x22>
 803bfe0:	f814 1b01 	ldrb.w	r1, [r4], #1
 803bfe4:	463a      	mov	r2, r7
 803bfe6:	4630      	mov	r0, r6
 803bfe8:	f7ff ffda 	bl	803bfa0 <__sfputc_r>
 803bfec:	1c43      	adds	r3, r0, #1
 803bfee:	d1f3      	bne.n	803bfd8 <__sfputs_r+0xa>
 803bff0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0803bff4 <_vfiprintf_r>:
 803bff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803bff8:	460d      	mov	r5, r1
 803bffa:	b09d      	sub	sp, #116	; 0x74
 803bffc:	4614      	mov	r4, r2
 803bffe:	4698      	mov	r8, r3
 803c000:	4606      	mov	r6, r0
 803c002:	b118      	cbz	r0, 803c00c <_vfiprintf_r+0x18>
 803c004:	6983      	ldr	r3, [r0, #24]
 803c006:	b90b      	cbnz	r3, 803c00c <_vfiprintf_r+0x18>
 803c008:	f000 fce6 	bl	803c9d8 <__sinit>
 803c00c:	4b89      	ldr	r3, [pc, #548]	; (803c234 <_vfiprintf_r+0x240>)
 803c00e:	429d      	cmp	r5, r3
 803c010:	d11b      	bne.n	803c04a <_vfiprintf_r+0x56>
 803c012:	6875      	ldr	r5, [r6, #4]
 803c014:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 803c016:	07d9      	lsls	r1, r3, #31
 803c018:	d405      	bmi.n	803c026 <_vfiprintf_r+0x32>
 803c01a:	89ab      	ldrh	r3, [r5, #12]
 803c01c:	059a      	lsls	r2, r3, #22
 803c01e:	d402      	bmi.n	803c026 <_vfiprintf_r+0x32>
 803c020:	6da8      	ldr	r0, [r5, #88]	; 0x58
 803c022:	f000 fd77 	bl	803cb14 <__retarget_lock_acquire_recursive>
 803c026:	89ab      	ldrh	r3, [r5, #12]
 803c028:	071b      	lsls	r3, r3, #28
 803c02a:	d501      	bpl.n	803c030 <_vfiprintf_r+0x3c>
 803c02c:	692b      	ldr	r3, [r5, #16]
 803c02e:	b9eb      	cbnz	r3, 803c06c <_vfiprintf_r+0x78>
 803c030:	4629      	mov	r1, r5
 803c032:	4630      	mov	r0, r6
 803c034:	f000 fb48 	bl	803c6c8 <__swsetup_r>
 803c038:	b1c0      	cbz	r0, 803c06c <_vfiprintf_r+0x78>
 803c03a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 803c03c:	07dc      	lsls	r4, r3, #31
 803c03e:	d50e      	bpl.n	803c05e <_vfiprintf_r+0x6a>
 803c040:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 803c044:	b01d      	add	sp, #116	; 0x74
 803c046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803c04a:	4b7b      	ldr	r3, [pc, #492]	; (803c238 <_vfiprintf_r+0x244>)
 803c04c:	429d      	cmp	r5, r3
 803c04e:	d101      	bne.n	803c054 <_vfiprintf_r+0x60>
 803c050:	68b5      	ldr	r5, [r6, #8]
 803c052:	e7df      	b.n	803c014 <_vfiprintf_r+0x20>
 803c054:	4b79      	ldr	r3, [pc, #484]	; (803c23c <_vfiprintf_r+0x248>)
 803c056:	429d      	cmp	r5, r3
 803c058:	bf08      	it	eq
 803c05a:	68f5      	ldreq	r5, [r6, #12]
 803c05c:	e7da      	b.n	803c014 <_vfiprintf_r+0x20>
 803c05e:	89ab      	ldrh	r3, [r5, #12]
 803c060:	0598      	lsls	r0, r3, #22
 803c062:	d4ed      	bmi.n	803c040 <_vfiprintf_r+0x4c>
 803c064:	6da8      	ldr	r0, [r5, #88]	; 0x58
 803c066:	f000 fd56 	bl	803cb16 <__retarget_lock_release_recursive>
 803c06a:	e7e9      	b.n	803c040 <_vfiprintf_r+0x4c>
 803c06c:	2300      	movs	r3, #0
 803c06e:	9309      	str	r3, [sp, #36]	; 0x24
 803c070:	2320      	movs	r3, #32
 803c072:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 803c076:	f8cd 800c 	str.w	r8, [sp, #12]
 803c07a:	2330      	movs	r3, #48	; 0x30
 803c07c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 803c240 <_vfiprintf_r+0x24c>
 803c080:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 803c084:	f04f 0901 	mov.w	r9, #1
 803c088:	4623      	mov	r3, r4
 803c08a:	469a      	mov	sl, r3
 803c08c:	f813 2b01 	ldrb.w	r2, [r3], #1
 803c090:	b10a      	cbz	r2, 803c096 <_vfiprintf_r+0xa2>
 803c092:	2a25      	cmp	r2, #37	; 0x25
 803c094:	d1f9      	bne.n	803c08a <_vfiprintf_r+0x96>
 803c096:	ebba 0b04 	subs.w	fp, sl, r4
 803c09a:	d00b      	beq.n	803c0b4 <_vfiprintf_r+0xc0>
 803c09c:	465b      	mov	r3, fp
 803c09e:	4622      	mov	r2, r4
 803c0a0:	4629      	mov	r1, r5
 803c0a2:	4630      	mov	r0, r6
 803c0a4:	f7ff ff93 	bl	803bfce <__sfputs_r>
 803c0a8:	3001      	adds	r0, #1
 803c0aa:	f000 80aa 	beq.w	803c202 <_vfiprintf_r+0x20e>
 803c0ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 803c0b0:	445a      	add	r2, fp
 803c0b2:	9209      	str	r2, [sp, #36]	; 0x24
 803c0b4:	f89a 3000 	ldrb.w	r3, [sl]
 803c0b8:	2b00      	cmp	r3, #0
 803c0ba:	f000 80a2 	beq.w	803c202 <_vfiprintf_r+0x20e>
 803c0be:	2300      	movs	r3, #0
 803c0c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 803c0c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 803c0c8:	f10a 0a01 	add.w	sl, sl, #1
 803c0cc:	9304      	str	r3, [sp, #16]
 803c0ce:	9307      	str	r3, [sp, #28]
 803c0d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 803c0d4:	931a      	str	r3, [sp, #104]	; 0x68
 803c0d6:	4654      	mov	r4, sl
 803c0d8:	2205      	movs	r2, #5
 803c0da:	f814 1b01 	ldrb.w	r1, [r4], #1
 803c0de:	4858      	ldr	r0, [pc, #352]	; (803c240 <_vfiprintf_r+0x24c>)
 803c0e0:	f7e4 f8fe 	bl	80202e0 <memchr>
 803c0e4:	9a04      	ldr	r2, [sp, #16]
 803c0e6:	b9d8      	cbnz	r0, 803c120 <_vfiprintf_r+0x12c>
 803c0e8:	06d1      	lsls	r1, r2, #27
 803c0ea:	bf44      	itt	mi
 803c0ec:	2320      	movmi	r3, #32
 803c0ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 803c0f2:	0713      	lsls	r3, r2, #28
 803c0f4:	bf44      	itt	mi
 803c0f6:	232b      	movmi	r3, #43	; 0x2b
 803c0f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 803c0fc:	f89a 3000 	ldrb.w	r3, [sl]
 803c100:	2b2a      	cmp	r3, #42	; 0x2a
 803c102:	d015      	beq.n	803c130 <_vfiprintf_r+0x13c>
 803c104:	9a07      	ldr	r2, [sp, #28]
 803c106:	4654      	mov	r4, sl
 803c108:	2000      	movs	r0, #0
 803c10a:	f04f 0c0a 	mov.w	ip, #10
 803c10e:	4621      	mov	r1, r4
 803c110:	f811 3b01 	ldrb.w	r3, [r1], #1
 803c114:	3b30      	subs	r3, #48	; 0x30
 803c116:	2b09      	cmp	r3, #9
 803c118:	d94e      	bls.n	803c1b8 <_vfiprintf_r+0x1c4>
 803c11a:	b1b0      	cbz	r0, 803c14a <_vfiprintf_r+0x156>
 803c11c:	9207      	str	r2, [sp, #28]
 803c11e:	e014      	b.n	803c14a <_vfiprintf_r+0x156>
 803c120:	eba0 0308 	sub.w	r3, r0, r8
 803c124:	fa09 f303 	lsl.w	r3, r9, r3
 803c128:	4313      	orrs	r3, r2
 803c12a:	9304      	str	r3, [sp, #16]
 803c12c:	46a2      	mov	sl, r4
 803c12e:	e7d2      	b.n	803c0d6 <_vfiprintf_r+0xe2>
 803c130:	9b03      	ldr	r3, [sp, #12]
 803c132:	1d19      	adds	r1, r3, #4
 803c134:	681b      	ldr	r3, [r3, #0]
 803c136:	9103      	str	r1, [sp, #12]
 803c138:	2b00      	cmp	r3, #0
 803c13a:	bfbb      	ittet	lt
 803c13c:	425b      	neglt	r3, r3
 803c13e:	f042 0202 	orrlt.w	r2, r2, #2
 803c142:	9307      	strge	r3, [sp, #28]
 803c144:	9307      	strlt	r3, [sp, #28]
 803c146:	bfb8      	it	lt
 803c148:	9204      	strlt	r2, [sp, #16]
 803c14a:	7823      	ldrb	r3, [r4, #0]
 803c14c:	2b2e      	cmp	r3, #46	; 0x2e
 803c14e:	d10c      	bne.n	803c16a <_vfiprintf_r+0x176>
 803c150:	7863      	ldrb	r3, [r4, #1]
 803c152:	2b2a      	cmp	r3, #42	; 0x2a
 803c154:	d135      	bne.n	803c1c2 <_vfiprintf_r+0x1ce>
 803c156:	9b03      	ldr	r3, [sp, #12]
 803c158:	1d1a      	adds	r2, r3, #4
 803c15a:	681b      	ldr	r3, [r3, #0]
 803c15c:	9203      	str	r2, [sp, #12]
 803c15e:	2b00      	cmp	r3, #0
 803c160:	bfb8      	it	lt
 803c162:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 803c166:	3402      	adds	r4, #2
 803c168:	9305      	str	r3, [sp, #20]
 803c16a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 803c250 <_vfiprintf_r+0x25c>
 803c16e:	7821      	ldrb	r1, [r4, #0]
 803c170:	2203      	movs	r2, #3
 803c172:	4650      	mov	r0, sl
 803c174:	f7e4 f8b4 	bl	80202e0 <memchr>
 803c178:	b140      	cbz	r0, 803c18c <_vfiprintf_r+0x198>
 803c17a:	2340      	movs	r3, #64	; 0x40
 803c17c:	eba0 000a 	sub.w	r0, r0, sl
 803c180:	fa03 f000 	lsl.w	r0, r3, r0
 803c184:	9b04      	ldr	r3, [sp, #16]
 803c186:	4303      	orrs	r3, r0
 803c188:	3401      	adds	r4, #1
 803c18a:	9304      	str	r3, [sp, #16]
 803c18c:	f814 1b01 	ldrb.w	r1, [r4], #1
 803c190:	482c      	ldr	r0, [pc, #176]	; (803c244 <_vfiprintf_r+0x250>)
 803c192:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 803c196:	2206      	movs	r2, #6
 803c198:	f7e4 f8a2 	bl	80202e0 <memchr>
 803c19c:	2800      	cmp	r0, #0
 803c19e:	d03f      	beq.n	803c220 <_vfiprintf_r+0x22c>
 803c1a0:	4b29      	ldr	r3, [pc, #164]	; (803c248 <_vfiprintf_r+0x254>)
 803c1a2:	bb1b      	cbnz	r3, 803c1ec <_vfiprintf_r+0x1f8>
 803c1a4:	9b03      	ldr	r3, [sp, #12]
 803c1a6:	3307      	adds	r3, #7
 803c1a8:	f023 0307 	bic.w	r3, r3, #7
 803c1ac:	3308      	adds	r3, #8
 803c1ae:	9303      	str	r3, [sp, #12]
 803c1b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 803c1b2:	443b      	add	r3, r7
 803c1b4:	9309      	str	r3, [sp, #36]	; 0x24
 803c1b6:	e767      	b.n	803c088 <_vfiprintf_r+0x94>
 803c1b8:	fb0c 3202 	mla	r2, ip, r2, r3
 803c1bc:	460c      	mov	r4, r1
 803c1be:	2001      	movs	r0, #1
 803c1c0:	e7a5      	b.n	803c10e <_vfiprintf_r+0x11a>
 803c1c2:	2300      	movs	r3, #0
 803c1c4:	3401      	adds	r4, #1
 803c1c6:	9305      	str	r3, [sp, #20]
 803c1c8:	4619      	mov	r1, r3
 803c1ca:	f04f 0c0a 	mov.w	ip, #10
 803c1ce:	4620      	mov	r0, r4
 803c1d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 803c1d4:	3a30      	subs	r2, #48	; 0x30
 803c1d6:	2a09      	cmp	r2, #9
 803c1d8:	d903      	bls.n	803c1e2 <_vfiprintf_r+0x1ee>
 803c1da:	2b00      	cmp	r3, #0
 803c1dc:	d0c5      	beq.n	803c16a <_vfiprintf_r+0x176>
 803c1de:	9105      	str	r1, [sp, #20]
 803c1e0:	e7c3      	b.n	803c16a <_vfiprintf_r+0x176>
 803c1e2:	fb0c 2101 	mla	r1, ip, r1, r2
 803c1e6:	4604      	mov	r4, r0
 803c1e8:	2301      	movs	r3, #1
 803c1ea:	e7f0      	b.n	803c1ce <_vfiprintf_r+0x1da>
 803c1ec:	ab03      	add	r3, sp, #12
 803c1ee:	9300      	str	r3, [sp, #0]
 803c1f0:	462a      	mov	r2, r5
 803c1f2:	4b16      	ldr	r3, [pc, #88]	; (803c24c <_vfiprintf_r+0x258>)
 803c1f4:	a904      	add	r1, sp, #16
 803c1f6:	4630      	mov	r0, r6
 803c1f8:	f3af 8000 	nop.w
 803c1fc:	4607      	mov	r7, r0
 803c1fe:	1c78      	adds	r0, r7, #1
 803c200:	d1d6      	bne.n	803c1b0 <_vfiprintf_r+0x1bc>
 803c202:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 803c204:	07d9      	lsls	r1, r3, #31
 803c206:	d405      	bmi.n	803c214 <_vfiprintf_r+0x220>
 803c208:	89ab      	ldrh	r3, [r5, #12]
 803c20a:	059a      	lsls	r2, r3, #22
 803c20c:	d402      	bmi.n	803c214 <_vfiprintf_r+0x220>
 803c20e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 803c210:	f000 fc81 	bl	803cb16 <__retarget_lock_release_recursive>
 803c214:	89ab      	ldrh	r3, [r5, #12]
 803c216:	065b      	lsls	r3, r3, #25
 803c218:	f53f af12 	bmi.w	803c040 <_vfiprintf_r+0x4c>
 803c21c:	9809      	ldr	r0, [sp, #36]	; 0x24
 803c21e:	e711      	b.n	803c044 <_vfiprintf_r+0x50>
 803c220:	ab03      	add	r3, sp, #12
 803c222:	9300      	str	r3, [sp, #0]
 803c224:	462a      	mov	r2, r5
 803c226:	4b09      	ldr	r3, [pc, #36]	; (803c24c <_vfiprintf_r+0x258>)
 803c228:	a904      	add	r1, sp, #16
 803c22a:	4630      	mov	r0, r6
 803c22c:	f000 f880 	bl	803c330 <_printf_i>
 803c230:	e7e4      	b.n	803c1fc <_vfiprintf_r+0x208>
 803c232:	bf00      	nop
 803c234:	0805851c 	.word	0x0805851c
 803c238:	0805853c 	.word	0x0805853c
 803c23c:	080584fc 	.word	0x080584fc
 803c240:	080584c8 	.word	0x080584c8
 803c244:	080584d2 	.word	0x080584d2
 803c248:	00000000 	.word	0x00000000
 803c24c:	0803bfcf 	.word	0x0803bfcf
 803c250:	080584ce 	.word	0x080584ce

0803c254 <_printf_common>:
 803c254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 803c258:	4616      	mov	r6, r2
 803c25a:	4699      	mov	r9, r3
 803c25c:	688a      	ldr	r2, [r1, #8]
 803c25e:	690b      	ldr	r3, [r1, #16]
 803c260:	f8dd 8020 	ldr.w	r8, [sp, #32]
 803c264:	4293      	cmp	r3, r2
 803c266:	bfb8      	it	lt
 803c268:	4613      	movlt	r3, r2
 803c26a:	6033      	str	r3, [r6, #0]
 803c26c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 803c270:	4607      	mov	r7, r0
 803c272:	460c      	mov	r4, r1
 803c274:	b10a      	cbz	r2, 803c27a <_printf_common+0x26>
 803c276:	3301      	adds	r3, #1
 803c278:	6033      	str	r3, [r6, #0]
 803c27a:	6823      	ldr	r3, [r4, #0]
 803c27c:	0699      	lsls	r1, r3, #26
 803c27e:	bf42      	ittt	mi
 803c280:	6833      	ldrmi	r3, [r6, #0]
 803c282:	3302      	addmi	r3, #2
 803c284:	6033      	strmi	r3, [r6, #0]
 803c286:	6825      	ldr	r5, [r4, #0]
 803c288:	f015 0506 	ands.w	r5, r5, #6
 803c28c:	d106      	bne.n	803c29c <_printf_common+0x48>
 803c28e:	f104 0a19 	add.w	sl, r4, #25
 803c292:	68e3      	ldr	r3, [r4, #12]
 803c294:	6832      	ldr	r2, [r6, #0]
 803c296:	1a9b      	subs	r3, r3, r2
 803c298:	42ab      	cmp	r3, r5
 803c29a:	dc26      	bgt.n	803c2ea <_printf_common+0x96>
 803c29c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 803c2a0:	1e13      	subs	r3, r2, #0
 803c2a2:	6822      	ldr	r2, [r4, #0]
 803c2a4:	bf18      	it	ne
 803c2a6:	2301      	movne	r3, #1
 803c2a8:	0692      	lsls	r2, r2, #26
 803c2aa:	d42b      	bmi.n	803c304 <_printf_common+0xb0>
 803c2ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 803c2b0:	4649      	mov	r1, r9
 803c2b2:	4638      	mov	r0, r7
 803c2b4:	47c0      	blx	r8
 803c2b6:	3001      	adds	r0, #1
 803c2b8:	d01e      	beq.n	803c2f8 <_printf_common+0xa4>
 803c2ba:	6823      	ldr	r3, [r4, #0]
 803c2bc:	68e5      	ldr	r5, [r4, #12]
 803c2be:	6832      	ldr	r2, [r6, #0]
 803c2c0:	f003 0306 	and.w	r3, r3, #6
 803c2c4:	2b04      	cmp	r3, #4
 803c2c6:	bf08      	it	eq
 803c2c8:	1aad      	subeq	r5, r5, r2
 803c2ca:	68a3      	ldr	r3, [r4, #8]
 803c2cc:	6922      	ldr	r2, [r4, #16]
 803c2ce:	bf0c      	ite	eq
 803c2d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 803c2d4:	2500      	movne	r5, #0
 803c2d6:	4293      	cmp	r3, r2
 803c2d8:	bfc4      	itt	gt
 803c2da:	1a9b      	subgt	r3, r3, r2
 803c2dc:	18ed      	addgt	r5, r5, r3
 803c2de:	2600      	movs	r6, #0
 803c2e0:	341a      	adds	r4, #26
 803c2e2:	42b5      	cmp	r5, r6
 803c2e4:	d11a      	bne.n	803c31c <_printf_common+0xc8>
 803c2e6:	2000      	movs	r0, #0
 803c2e8:	e008      	b.n	803c2fc <_printf_common+0xa8>
 803c2ea:	2301      	movs	r3, #1
 803c2ec:	4652      	mov	r2, sl
 803c2ee:	4649      	mov	r1, r9
 803c2f0:	4638      	mov	r0, r7
 803c2f2:	47c0      	blx	r8
 803c2f4:	3001      	adds	r0, #1
 803c2f6:	d103      	bne.n	803c300 <_printf_common+0xac>
 803c2f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 803c2fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 803c300:	3501      	adds	r5, #1
 803c302:	e7c6      	b.n	803c292 <_printf_common+0x3e>
 803c304:	18e1      	adds	r1, r4, r3
 803c306:	1c5a      	adds	r2, r3, #1
 803c308:	2030      	movs	r0, #48	; 0x30
 803c30a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 803c30e:	4422      	add	r2, r4
 803c310:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 803c314:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 803c318:	3302      	adds	r3, #2
 803c31a:	e7c7      	b.n	803c2ac <_printf_common+0x58>
 803c31c:	2301      	movs	r3, #1
 803c31e:	4622      	mov	r2, r4
 803c320:	4649      	mov	r1, r9
 803c322:	4638      	mov	r0, r7
 803c324:	47c0      	blx	r8
 803c326:	3001      	adds	r0, #1
 803c328:	d0e6      	beq.n	803c2f8 <_printf_common+0xa4>
 803c32a:	3601      	adds	r6, #1
 803c32c:	e7d9      	b.n	803c2e2 <_printf_common+0x8e>
	...

0803c330 <_printf_i>:
 803c330:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 803c334:	7e0f      	ldrb	r7, [r1, #24]
 803c336:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 803c338:	2f78      	cmp	r7, #120	; 0x78
 803c33a:	4691      	mov	r9, r2
 803c33c:	4680      	mov	r8, r0
 803c33e:	460c      	mov	r4, r1
 803c340:	469a      	mov	sl, r3
 803c342:	f101 0243 	add.w	r2, r1, #67	; 0x43
 803c346:	d807      	bhi.n	803c358 <_printf_i+0x28>
 803c348:	2f62      	cmp	r7, #98	; 0x62
 803c34a:	d80a      	bhi.n	803c362 <_printf_i+0x32>
 803c34c:	2f00      	cmp	r7, #0
 803c34e:	f000 80d8 	beq.w	803c502 <_printf_i+0x1d2>
 803c352:	2f58      	cmp	r7, #88	; 0x58
 803c354:	f000 80a3 	beq.w	803c49e <_printf_i+0x16e>
 803c358:	f104 0542 	add.w	r5, r4, #66	; 0x42
 803c35c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 803c360:	e03a      	b.n	803c3d8 <_printf_i+0xa8>
 803c362:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 803c366:	2b15      	cmp	r3, #21
 803c368:	d8f6      	bhi.n	803c358 <_printf_i+0x28>
 803c36a:	a101      	add	r1, pc, #4	; (adr r1, 803c370 <_printf_i+0x40>)
 803c36c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 803c370:	0803c3c9 	.word	0x0803c3c9
 803c374:	0803c3dd 	.word	0x0803c3dd
 803c378:	0803c359 	.word	0x0803c359
 803c37c:	0803c359 	.word	0x0803c359
 803c380:	0803c359 	.word	0x0803c359
 803c384:	0803c359 	.word	0x0803c359
 803c388:	0803c3dd 	.word	0x0803c3dd
 803c38c:	0803c359 	.word	0x0803c359
 803c390:	0803c359 	.word	0x0803c359
 803c394:	0803c359 	.word	0x0803c359
 803c398:	0803c359 	.word	0x0803c359
 803c39c:	0803c4e9 	.word	0x0803c4e9
 803c3a0:	0803c40d 	.word	0x0803c40d
 803c3a4:	0803c4cb 	.word	0x0803c4cb
 803c3a8:	0803c359 	.word	0x0803c359
 803c3ac:	0803c359 	.word	0x0803c359
 803c3b0:	0803c50b 	.word	0x0803c50b
 803c3b4:	0803c359 	.word	0x0803c359
 803c3b8:	0803c40d 	.word	0x0803c40d
 803c3bc:	0803c359 	.word	0x0803c359
 803c3c0:	0803c359 	.word	0x0803c359
 803c3c4:	0803c4d3 	.word	0x0803c4d3
 803c3c8:	682b      	ldr	r3, [r5, #0]
 803c3ca:	1d1a      	adds	r2, r3, #4
 803c3cc:	681b      	ldr	r3, [r3, #0]
 803c3ce:	602a      	str	r2, [r5, #0]
 803c3d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 803c3d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 803c3d8:	2301      	movs	r3, #1
 803c3da:	e0a3      	b.n	803c524 <_printf_i+0x1f4>
 803c3dc:	6820      	ldr	r0, [r4, #0]
 803c3de:	6829      	ldr	r1, [r5, #0]
 803c3e0:	0606      	lsls	r6, r0, #24
 803c3e2:	f101 0304 	add.w	r3, r1, #4
 803c3e6:	d50a      	bpl.n	803c3fe <_printf_i+0xce>
 803c3e8:	680e      	ldr	r6, [r1, #0]
 803c3ea:	602b      	str	r3, [r5, #0]
 803c3ec:	2e00      	cmp	r6, #0
 803c3ee:	da03      	bge.n	803c3f8 <_printf_i+0xc8>
 803c3f0:	232d      	movs	r3, #45	; 0x2d
 803c3f2:	4276      	negs	r6, r6
 803c3f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 803c3f8:	485e      	ldr	r0, [pc, #376]	; (803c574 <_printf_i+0x244>)
 803c3fa:	230a      	movs	r3, #10
 803c3fc:	e019      	b.n	803c432 <_printf_i+0x102>
 803c3fe:	680e      	ldr	r6, [r1, #0]
 803c400:	602b      	str	r3, [r5, #0]
 803c402:	f010 0f40 	tst.w	r0, #64	; 0x40
 803c406:	bf18      	it	ne
 803c408:	b236      	sxthne	r6, r6
 803c40a:	e7ef      	b.n	803c3ec <_printf_i+0xbc>
 803c40c:	682b      	ldr	r3, [r5, #0]
 803c40e:	6820      	ldr	r0, [r4, #0]
 803c410:	1d19      	adds	r1, r3, #4
 803c412:	6029      	str	r1, [r5, #0]
 803c414:	0601      	lsls	r1, r0, #24
 803c416:	d501      	bpl.n	803c41c <_printf_i+0xec>
 803c418:	681e      	ldr	r6, [r3, #0]
 803c41a:	e002      	b.n	803c422 <_printf_i+0xf2>
 803c41c:	0646      	lsls	r6, r0, #25
 803c41e:	d5fb      	bpl.n	803c418 <_printf_i+0xe8>
 803c420:	881e      	ldrh	r6, [r3, #0]
 803c422:	4854      	ldr	r0, [pc, #336]	; (803c574 <_printf_i+0x244>)
 803c424:	2f6f      	cmp	r7, #111	; 0x6f
 803c426:	bf0c      	ite	eq
 803c428:	2308      	moveq	r3, #8
 803c42a:	230a      	movne	r3, #10
 803c42c:	2100      	movs	r1, #0
 803c42e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 803c432:	6865      	ldr	r5, [r4, #4]
 803c434:	60a5      	str	r5, [r4, #8]
 803c436:	2d00      	cmp	r5, #0
 803c438:	bfa2      	ittt	ge
 803c43a:	6821      	ldrge	r1, [r4, #0]
 803c43c:	f021 0104 	bicge.w	r1, r1, #4
 803c440:	6021      	strge	r1, [r4, #0]
 803c442:	b90e      	cbnz	r6, 803c448 <_printf_i+0x118>
 803c444:	2d00      	cmp	r5, #0
 803c446:	d04d      	beq.n	803c4e4 <_printf_i+0x1b4>
 803c448:	4615      	mov	r5, r2
 803c44a:	fbb6 f1f3 	udiv	r1, r6, r3
 803c44e:	fb03 6711 	mls	r7, r3, r1, r6
 803c452:	5dc7      	ldrb	r7, [r0, r7]
 803c454:	f805 7d01 	strb.w	r7, [r5, #-1]!
 803c458:	4637      	mov	r7, r6
 803c45a:	42bb      	cmp	r3, r7
 803c45c:	460e      	mov	r6, r1
 803c45e:	d9f4      	bls.n	803c44a <_printf_i+0x11a>
 803c460:	2b08      	cmp	r3, #8
 803c462:	d10b      	bne.n	803c47c <_printf_i+0x14c>
 803c464:	6823      	ldr	r3, [r4, #0]
 803c466:	07de      	lsls	r6, r3, #31
 803c468:	d508      	bpl.n	803c47c <_printf_i+0x14c>
 803c46a:	6923      	ldr	r3, [r4, #16]
 803c46c:	6861      	ldr	r1, [r4, #4]
 803c46e:	4299      	cmp	r1, r3
 803c470:	bfde      	ittt	le
 803c472:	2330      	movle	r3, #48	; 0x30
 803c474:	f805 3c01 	strble.w	r3, [r5, #-1]
 803c478:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 803c47c:	1b52      	subs	r2, r2, r5
 803c47e:	6122      	str	r2, [r4, #16]
 803c480:	f8cd a000 	str.w	sl, [sp]
 803c484:	464b      	mov	r3, r9
 803c486:	aa03      	add	r2, sp, #12
 803c488:	4621      	mov	r1, r4
 803c48a:	4640      	mov	r0, r8
 803c48c:	f7ff fee2 	bl	803c254 <_printf_common>
 803c490:	3001      	adds	r0, #1
 803c492:	d14c      	bne.n	803c52e <_printf_i+0x1fe>
 803c494:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 803c498:	b004      	add	sp, #16
 803c49a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 803c49e:	4835      	ldr	r0, [pc, #212]	; (803c574 <_printf_i+0x244>)
 803c4a0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 803c4a4:	6829      	ldr	r1, [r5, #0]
 803c4a6:	6823      	ldr	r3, [r4, #0]
 803c4a8:	f851 6b04 	ldr.w	r6, [r1], #4
 803c4ac:	6029      	str	r1, [r5, #0]
 803c4ae:	061d      	lsls	r5, r3, #24
 803c4b0:	d514      	bpl.n	803c4dc <_printf_i+0x1ac>
 803c4b2:	07df      	lsls	r7, r3, #31
 803c4b4:	bf44      	itt	mi
 803c4b6:	f043 0320 	orrmi.w	r3, r3, #32
 803c4ba:	6023      	strmi	r3, [r4, #0]
 803c4bc:	b91e      	cbnz	r6, 803c4c6 <_printf_i+0x196>
 803c4be:	6823      	ldr	r3, [r4, #0]
 803c4c0:	f023 0320 	bic.w	r3, r3, #32
 803c4c4:	6023      	str	r3, [r4, #0]
 803c4c6:	2310      	movs	r3, #16
 803c4c8:	e7b0      	b.n	803c42c <_printf_i+0xfc>
 803c4ca:	6823      	ldr	r3, [r4, #0]
 803c4cc:	f043 0320 	orr.w	r3, r3, #32
 803c4d0:	6023      	str	r3, [r4, #0]
 803c4d2:	2378      	movs	r3, #120	; 0x78
 803c4d4:	4828      	ldr	r0, [pc, #160]	; (803c578 <_printf_i+0x248>)
 803c4d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 803c4da:	e7e3      	b.n	803c4a4 <_printf_i+0x174>
 803c4dc:	0659      	lsls	r1, r3, #25
 803c4de:	bf48      	it	mi
 803c4e0:	b2b6      	uxthmi	r6, r6
 803c4e2:	e7e6      	b.n	803c4b2 <_printf_i+0x182>
 803c4e4:	4615      	mov	r5, r2
 803c4e6:	e7bb      	b.n	803c460 <_printf_i+0x130>
 803c4e8:	682b      	ldr	r3, [r5, #0]
 803c4ea:	6826      	ldr	r6, [r4, #0]
 803c4ec:	6961      	ldr	r1, [r4, #20]
 803c4ee:	1d18      	adds	r0, r3, #4
 803c4f0:	6028      	str	r0, [r5, #0]
 803c4f2:	0635      	lsls	r5, r6, #24
 803c4f4:	681b      	ldr	r3, [r3, #0]
 803c4f6:	d501      	bpl.n	803c4fc <_printf_i+0x1cc>
 803c4f8:	6019      	str	r1, [r3, #0]
 803c4fa:	e002      	b.n	803c502 <_printf_i+0x1d2>
 803c4fc:	0670      	lsls	r0, r6, #25
 803c4fe:	d5fb      	bpl.n	803c4f8 <_printf_i+0x1c8>
 803c500:	8019      	strh	r1, [r3, #0]
 803c502:	2300      	movs	r3, #0
 803c504:	6123      	str	r3, [r4, #16]
 803c506:	4615      	mov	r5, r2
 803c508:	e7ba      	b.n	803c480 <_printf_i+0x150>
 803c50a:	682b      	ldr	r3, [r5, #0]
 803c50c:	1d1a      	adds	r2, r3, #4
 803c50e:	602a      	str	r2, [r5, #0]
 803c510:	681d      	ldr	r5, [r3, #0]
 803c512:	6862      	ldr	r2, [r4, #4]
 803c514:	2100      	movs	r1, #0
 803c516:	4628      	mov	r0, r5
 803c518:	f7e3 fee2 	bl	80202e0 <memchr>
 803c51c:	b108      	cbz	r0, 803c522 <_printf_i+0x1f2>
 803c51e:	1b40      	subs	r0, r0, r5
 803c520:	6060      	str	r0, [r4, #4]
 803c522:	6863      	ldr	r3, [r4, #4]
 803c524:	6123      	str	r3, [r4, #16]
 803c526:	2300      	movs	r3, #0
 803c528:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 803c52c:	e7a8      	b.n	803c480 <_printf_i+0x150>
 803c52e:	6923      	ldr	r3, [r4, #16]
 803c530:	462a      	mov	r2, r5
 803c532:	4649      	mov	r1, r9
 803c534:	4640      	mov	r0, r8
 803c536:	47d0      	blx	sl
 803c538:	3001      	adds	r0, #1
 803c53a:	d0ab      	beq.n	803c494 <_printf_i+0x164>
 803c53c:	6823      	ldr	r3, [r4, #0]
 803c53e:	079b      	lsls	r3, r3, #30
 803c540:	d413      	bmi.n	803c56a <_printf_i+0x23a>
 803c542:	68e0      	ldr	r0, [r4, #12]
 803c544:	9b03      	ldr	r3, [sp, #12]
 803c546:	4298      	cmp	r0, r3
 803c548:	bfb8      	it	lt
 803c54a:	4618      	movlt	r0, r3
 803c54c:	e7a4      	b.n	803c498 <_printf_i+0x168>
 803c54e:	2301      	movs	r3, #1
 803c550:	4632      	mov	r2, r6
 803c552:	4649      	mov	r1, r9
 803c554:	4640      	mov	r0, r8
 803c556:	47d0      	blx	sl
 803c558:	3001      	adds	r0, #1
 803c55a:	d09b      	beq.n	803c494 <_printf_i+0x164>
 803c55c:	3501      	adds	r5, #1
 803c55e:	68e3      	ldr	r3, [r4, #12]
 803c560:	9903      	ldr	r1, [sp, #12]
 803c562:	1a5b      	subs	r3, r3, r1
 803c564:	42ab      	cmp	r3, r5
 803c566:	dcf2      	bgt.n	803c54e <_printf_i+0x21e>
 803c568:	e7eb      	b.n	803c542 <_printf_i+0x212>
 803c56a:	2500      	movs	r5, #0
 803c56c:	f104 0619 	add.w	r6, r4, #25
 803c570:	e7f5      	b.n	803c55e <_printf_i+0x22e>
 803c572:	bf00      	nop
 803c574:	080584d9 	.word	0x080584d9
 803c578:	080584ea 	.word	0x080584ea

0803c57c <_sbrk_r>:
 803c57c:	b538      	push	{r3, r4, r5, lr}
 803c57e:	4d06      	ldr	r5, [pc, #24]	; (803c598 <_sbrk_r+0x1c>)
 803c580:	2300      	movs	r3, #0
 803c582:	4604      	mov	r4, r0
 803c584:	4608      	mov	r0, r1
 803c586:	602b      	str	r3, [r5, #0]
 803c588:	f7ed fd16 	bl	8029fb8 <_sbrk>
 803c58c:	1c43      	adds	r3, r0, #1
 803c58e:	d102      	bne.n	803c596 <_sbrk_r+0x1a>
 803c590:	682b      	ldr	r3, [r5, #0]
 803c592:	b103      	cbz	r3, 803c596 <_sbrk_r+0x1a>
 803c594:	6023      	str	r3, [r4, #0]
 803c596:	bd38      	pop	{r3, r4, r5, pc}
 803c598:	240267e4 	.word	0x240267e4

0803c59c <_raise_r>:
 803c59c:	291f      	cmp	r1, #31
 803c59e:	b538      	push	{r3, r4, r5, lr}
 803c5a0:	4604      	mov	r4, r0
 803c5a2:	460d      	mov	r5, r1
 803c5a4:	d904      	bls.n	803c5b0 <_raise_r+0x14>
 803c5a6:	2316      	movs	r3, #22
 803c5a8:	6003      	str	r3, [r0, #0]
 803c5aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 803c5ae:	bd38      	pop	{r3, r4, r5, pc}
 803c5b0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 803c5b2:	b112      	cbz	r2, 803c5ba <_raise_r+0x1e>
 803c5b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 803c5b8:	b94b      	cbnz	r3, 803c5ce <_raise_r+0x32>
 803c5ba:	4620      	mov	r0, r4
 803c5bc:	f000 f830 	bl	803c620 <_getpid_r>
 803c5c0:	462a      	mov	r2, r5
 803c5c2:	4601      	mov	r1, r0
 803c5c4:	4620      	mov	r0, r4
 803c5c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 803c5ca:	f000 b817 	b.w	803c5fc <_kill_r>
 803c5ce:	2b01      	cmp	r3, #1
 803c5d0:	d00a      	beq.n	803c5e8 <_raise_r+0x4c>
 803c5d2:	1c59      	adds	r1, r3, #1
 803c5d4:	d103      	bne.n	803c5de <_raise_r+0x42>
 803c5d6:	2316      	movs	r3, #22
 803c5d8:	6003      	str	r3, [r0, #0]
 803c5da:	2001      	movs	r0, #1
 803c5dc:	e7e7      	b.n	803c5ae <_raise_r+0x12>
 803c5de:	2400      	movs	r4, #0
 803c5e0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 803c5e4:	4628      	mov	r0, r5
 803c5e6:	4798      	blx	r3
 803c5e8:	2000      	movs	r0, #0
 803c5ea:	e7e0      	b.n	803c5ae <_raise_r+0x12>

0803c5ec <raise>:
 803c5ec:	4b02      	ldr	r3, [pc, #8]	; (803c5f8 <raise+0xc>)
 803c5ee:	4601      	mov	r1, r0
 803c5f0:	6818      	ldr	r0, [r3, #0]
 803c5f2:	f7ff bfd3 	b.w	803c59c <_raise_r>
 803c5f6:	bf00      	nop
 803c5f8:	24000104 	.word	0x24000104

0803c5fc <_kill_r>:
 803c5fc:	b538      	push	{r3, r4, r5, lr}
 803c5fe:	4d07      	ldr	r5, [pc, #28]	; (803c61c <_kill_r+0x20>)
 803c600:	2300      	movs	r3, #0
 803c602:	4604      	mov	r4, r0
 803c604:	4608      	mov	r0, r1
 803c606:	4611      	mov	r1, r2
 803c608:	602b      	str	r3, [r5, #0]
 803c60a:	f7ed fc4d 	bl	8029ea8 <_kill>
 803c60e:	1c43      	adds	r3, r0, #1
 803c610:	d102      	bne.n	803c618 <_kill_r+0x1c>
 803c612:	682b      	ldr	r3, [r5, #0]
 803c614:	b103      	cbz	r3, 803c618 <_kill_r+0x1c>
 803c616:	6023      	str	r3, [r4, #0]
 803c618:	bd38      	pop	{r3, r4, r5, pc}
 803c61a:	bf00      	nop
 803c61c:	240267e4 	.word	0x240267e4

0803c620 <_getpid_r>:
 803c620:	f7ed bc3a 	b.w	8029e98 <_getpid>

0803c624 <__swbuf_r>:
 803c624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803c626:	460e      	mov	r6, r1
 803c628:	4614      	mov	r4, r2
 803c62a:	4605      	mov	r5, r0
 803c62c:	b118      	cbz	r0, 803c636 <__swbuf_r+0x12>
 803c62e:	6983      	ldr	r3, [r0, #24]
 803c630:	b90b      	cbnz	r3, 803c636 <__swbuf_r+0x12>
 803c632:	f000 f9d1 	bl	803c9d8 <__sinit>
 803c636:	4b21      	ldr	r3, [pc, #132]	; (803c6bc <__swbuf_r+0x98>)
 803c638:	429c      	cmp	r4, r3
 803c63a:	d12b      	bne.n	803c694 <__swbuf_r+0x70>
 803c63c:	686c      	ldr	r4, [r5, #4]
 803c63e:	69a3      	ldr	r3, [r4, #24]
 803c640:	60a3      	str	r3, [r4, #8]
 803c642:	89a3      	ldrh	r3, [r4, #12]
 803c644:	071a      	lsls	r2, r3, #28
 803c646:	d52f      	bpl.n	803c6a8 <__swbuf_r+0x84>
 803c648:	6923      	ldr	r3, [r4, #16]
 803c64a:	b36b      	cbz	r3, 803c6a8 <__swbuf_r+0x84>
 803c64c:	6923      	ldr	r3, [r4, #16]
 803c64e:	6820      	ldr	r0, [r4, #0]
 803c650:	1ac0      	subs	r0, r0, r3
 803c652:	6963      	ldr	r3, [r4, #20]
 803c654:	b2f6      	uxtb	r6, r6
 803c656:	4283      	cmp	r3, r0
 803c658:	4637      	mov	r7, r6
 803c65a:	dc04      	bgt.n	803c666 <__swbuf_r+0x42>
 803c65c:	4621      	mov	r1, r4
 803c65e:	4628      	mov	r0, r5
 803c660:	f000 f926 	bl	803c8b0 <_fflush_r>
 803c664:	bb30      	cbnz	r0, 803c6b4 <__swbuf_r+0x90>
 803c666:	68a3      	ldr	r3, [r4, #8]
 803c668:	3b01      	subs	r3, #1
 803c66a:	60a3      	str	r3, [r4, #8]
 803c66c:	6823      	ldr	r3, [r4, #0]
 803c66e:	1c5a      	adds	r2, r3, #1
 803c670:	6022      	str	r2, [r4, #0]
 803c672:	701e      	strb	r6, [r3, #0]
 803c674:	6963      	ldr	r3, [r4, #20]
 803c676:	3001      	adds	r0, #1
 803c678:	4283      	cmp	r3, r0
 803c67a:	d004      	beq.n	803c686 <__swbuf_r+0x62>
 803c67c:	89a3      	ldrh	r3, [r4, #12]
 803c67e:	07db      	lsls	r3, r3, #31
 803c680:	d506      	bpl.n	803c690 <__swbuf_r+0x6c>
 803c682:	2e0a      	cmp	r6, #10
 803c684:	d104      	bne.n	803c690 <__swbuf_r+0x6c>
 803c686:	4621      	mov	r1, r4
 803c688:	4628      	mov	r0, r5
 803c68a:	f000 f911 	bl	803c8b0 <_fflush_r>
 803c68e:	b988      	cbnz	r0, 803c6b4 <__swbuf_r+0x90>
 803c690:	4638      	mov	r0, r7
 803c692:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 803c694:	4b0a      	ldr	r3, [pc, #40]	; (803c6c0 <__swbuf_r+0x9c>)
 803c696:	429c      	cmp	r4, r3
 803c698:	d101      	bne.n	803c69e <__swbuf_r+0x7a>
 803c69a:	68ac      	ldr	r4, [r5, #8]
 803c69c:	e7cf      	b.n	803c63e <__swbuf_r+0x1a>
 803c69e:	4b09      	ldr	r3, [pc, #36]	; (803c6c4 <__swbuf_r+0xa0>)
 803c6a0:	429c      	cmp	r4, r3
 803c6a2:	bf08      	it	eq
 803c6a4:	68ec      	ldreq	r4, [r5, #12]
 803c6a6:	e7ca      	b.n	803c63e <__swbuf_r+0x1a>
 803c6a8:	4621      	mov	r1, r4
 803c6aa:	4628      	mov	r0, r5
 803c6ac:	f000 f80c 	bl	803c6c8 <__swsetup_r>
 803c6b0:	2800      	cmp	r0, #0
 803c6b2:	d0cb      	beq.n	803c64c <__swbuf_r+0x28>
 803c6b4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 803c6b8:	e7ea      	b.n	803c690 <__swbuf_r+0x6c>
 803c6ba:	bf00      	nop
 803c6bc:	0805851c 	.word	0x0805851c
 803c6c0:	0805853c 	.word	0x0805853c
 803c6c4:	080584fc 	.word	0x080584fc

0803c6c8 <__swsetup_r>:
 803c6c8:	4b32      	ldr	r3, [pc, #200]	; (803c794 <__swsetup_r+0xcc>)
 803c6ca:	b570      	push	{r4, r5, r6, lr}
 803c6cc:	681d      	ldr	r5, [r3, #0]
 803c6ce:	4606      	mov	r6, r0
 803c6d0:	460c      	mov	r4, r1
 803c6d2:	b125      	cbz	r5, 803c6de <__swsetup_r+0x16>
 803c6d4:	69ab      	ldr	r3, [r5, #24]
 803c6d6:	b913      	cbnz	r3, 803c6de <__swsetup_r+0x16>
 803c6d8:	4628      	mov	r0, r5
 803c6da:	f000 f97d 	bl	803c9d8 <__sinit>
 803c6de:	4b2e      	ldr	r3, [pc, #184]	; (803c798 <__swsetup_r+0xd0>)
 803c6e0:	429c      	cmp	r4, r3
 803c6e2:	d10f      	bne.n	803c704 <__swsetup_r+0x3c>
 803c6e4:	686c      	ldr	r4, [r5, #4]
 803c6e6:	89a3      	ldrh	r3, [r4, #12]
 803c6e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 803c6ec:	0719      	lsls	r1, r3, #28
 803c6ee:	d42c      	bmi.n	803c74a <__swsetup_r+0x82>
 803c6f0:	06dd      	lsls	r5, r3, #27
 803c6f2:	d411      	bmi.n	803c718 <__swsetup_r+0x50>
 803c6f4:	2309      	movs	r3, #9
 803c6f6:	6033      	str	r3, [r6, #0]
 803c6f8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 803c6fc:	81a3      	strh	r3, [r4, #12]
 803c6fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 803c702:	e03e      	b.n	803c782 <__swsetup_r+0xba>
 803c704:	4b25      	ldr	r3, [pc, #148]	; (803c79c <__swsetup_r+0xd4>)
 803c706:	429c      	cmp	r4, r3
 803c708:	d101      	bne.n	803c70e <__swsetup_r+0x46>
 803c70a:	68ac      	ldr	r4, [r5, #8]
 803c70c:	e7eb      	b.n	803c6e6 <__swsetup_r+0x1e>
 803c70e:	4b24      	ldr	r3, [pc, #144]	; (803c7a0 <__swsetup_r+0xd8>)
 803c710:	429c      	cmp	r4, r3
 803c712:	bf08      	it	eq
 803c714:	68ec      	ldreq	r4, [r5, #12]
 803c716:	e7e6      	b.n	803c6e6 <__swsetup_r+0x1e>
 803c718:	0758      	lsls	r0, r3, #29
 803c71a:	d512      	bpl.n	803c742 <__swsetup_r+0x7a>
 803c71c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 803c71e:	b141      	cbz	r1, 803c732 <__swsetup_r+0x6a>
 803c720:	f104 0344 	add.w	r3, r4, #68	; 0x44
 803c724:	4299      	cmp	r1, r3
 803c726:	d002      	beq.n	803c72e <__swsetup_r+0x66>
 803c728:	4630      	mov	r0, r6
 803c72a:	f7ff fb59 	bl	803bde0 <_free_r>
 803c72e:	2300      	movs	r3, #0
 803c730:	6363      	str	r3, [r4, #52]	; 0x34
 803c732:	89a3      	ldrh	r3, [r4, #12]
 803c734:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 803c738:	81a3      	strh	r3, [r4, #12]
 803c73a:	2300      	movs	r3, #0
 803c73c:	6063      	str	r3, [r4, #4]
 803c73e:	6923      	ldr	r3, [r4, #16]
 803c740:	6023      	str	r3, [r4, #0]
 803c742:	89a3      	ldrh	r3, [r4, #12]
 803c744:	f043 0308 	orr.w	r3, r3, #8
 803c748:	81a3      	strh	r3, [r4, #12]
 803c74a:	6923      	ldr	r3, [r4, #16]
 803c74c:	b94b      	cbnz	r3, 803c762 <__swsetup_r+0x9a>
 803c74e:	89a3      	ldrh	r3, [r4, #12]
 803c750:	f403 7320 	and.w	r3, r3, #640	; 0x280
 803c754:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 803c758:	d003      	beq.n	803c762 <__swsetup_r+0x9a>
 803c75a:	4621      	mov	r1, r4
 803c75c:	4630      	mov	r0, r6
 803c75e:	f000 fa01 	bl	803cb64 <__smakebuf_r>
 803c762:	89a0      	ldrh	r0, [r4, #12]
 803c764:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 803c768:	f010 0301 	ands.w	r3, r0, #1
 803c76c:	d00a      	beq.n	803c784 <__swsetup_r+0xbc>
 803c76e:	2300      	movs	r3, #0
 803c770:	60a3      	str	r3, [r4, #8]
 803c772:	6963      	ldr	r3, [r4, #20]
 803c774:	425b      	negs	r3, r3
 803c776:	61a3      	str	r3, [r4, #24]
 803c778:	6923      	ldr	r3, [r4, #16]
 803c77a:	b943      	cbnz	r3, 803c78e <__swsetup_r+0xc6>
 803c77c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 803c780:	d1ba      	bne.n	803c6f8 <__swsetup_r+0x30>
 803c782:	bd70      	pop	{r4, r5, r6, pc}
 803c784:	0781      	lsls	r1, r0, #30
 803c786:	bf58      	it	pl
 803c788:	6963      	ldrpl	r3, [r4, #20]
 803c78a:	60a3      	str	r3, [r4, #8]
 803c78c:	e7f4      	b.n	803c778 <__swsetup_r+0xb0>
 803c78e:	2000      	movs	r0, #0
 803c790:	e7f7      	b.n	803c782 <__swsetup_r+0xba>
 803c792:	bf00      	nop
 803c794:	24000104 	.word	0x24000104
 803c798:	0805851c 	.word	0x0805851c
 803c79c:	0805853c 	.word	0x0805853c
 803c7a0:	080584fc 	.word	0x080584fc

0803c7a4 <__sflush_r>:
 803c7a4:	898a      	ldrh	r2, [r1, #12]
 803c7a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 803c7aa:	4605      	mov	r5, r0
 803c7ac:	0710      	lsls	r0, r2, #28
 803c7ae:	460c      	mov	r4, r1
 803c7b0:	d458      	bmi.n	803c864 <__sflush_r+0xc0>
 803c7b2:	684b      	ldr	r3, [r1, #4]
 803c7b4:	2b00      	cmp	r3, #0
 803c7b6:	dc05      	bgt.n	803c7c4 <__sflush_r+0x20>
 803c7b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 803c7ba:	2b00      	cmp	r3, #0
 803c7bc:	dc02      	bgt.n	803c7c4 <__sflush_r+0x20>
 803c7be:	2000      	movs	r0, #0
 803c7c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 803c7c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 803c7c6:	2e00      	cmp	r6, #0
 803c7c8:	d0f9      	beq.n	803c7be <__sflush_r+0x1a>
 803c7ca:	2300      	movs	r3, #0
 803c7cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 803c7d0:	682f      	ldr	r7, [r5, #0]
 803c7d2:	602b      	str	r3, [r5, #0]
 803c7d4:	d032      	beq.n	803c83c <__sflush_r+0x98>
 803c7d6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 803c7d8:	89a3      	ldrh	r3, [r4, #12]
 803c7da:	075a      	lsls	r2, r3, #29
 803c7dc:	d505      	bpl.n	803c7ea <__sflush_r+0x46>
 803c7de:	6863      	ldr	r3, [r4, #4]
 803c7e0:	1ac0      	subs	r0, r0, r3
 803c7e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 803c7e4:	b10b      	cbz	r3, 803c7ea <__sflush_r+0x46>
 803c7e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 803c7e8:	1ac0      	subs	r0, r0, r3
 803c7ea:	2300      	movs	r3, #0
 803c7ec:	4602      	mov	r2, r0
 803c7ee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 803c7f0:	6a21      	ldr	r1, [r4, #32]
 803c7f2:	4628      	mov	r0, r5
 803c7f4:	47b0      	blx	r6
 803c7f6:	1c43      	adds	r3, r0, #1
 803c7f8:	89a3      	ldrh	r3, [r4, #12]
 803c7fa:	d106      	bne.n	803c80a <__sflush_r+0x66>
 803c7fc:	6829      	ldr	r1, [r5, #0]
 803c7fe:	291d      	cmp	r1, #29
 803c800:	d82c      	bhi.n	803c85c <__sflush_r+0xb8>
 803c802:	4a2a      	ldr	r2, [pc, #168]	; (803c8ac <__sflush_r+0x108>)
 803c804:	40ca      	lsrs	r2, r1
 803c806:	07d6      	lsls	r6, r2, #31
 803c808:	d528      	bpl.n	803c85c <__sflush_r+0xb8>
 803c80a:	2200      	movs	r2, #0
 803c80c:	6062      	str	r2, [r4, #4]
 803c80e:	04d9      	lsls	r1, r3, #19
 803c810:	6922      	ldr	r2, [r4, #16]
 803c812:	6022      	str	r2, [r4, #0]
 803c814:	d504      	bpl.n	803c820 <__sflush_r+0x7c>
 803c816:	1c42      	adds	r2, r0, #1
 803c818:	d101      	bne.n	803c81e <__sflush_r+0x7a>
 803c81a:	682b      	ldr	r3, [r5, #0]
 803c81c:	b903      	cbnz	r3, 803c820 <__sflush_r+0x7c>
 803c81e:	6560      	str	r0, [r4, #84]	; 0x54
 803c820:	6b61      	ldr	r1, [r4, #52]	; 0x34
 803c822:	602f      	str	r7, [r5, #0]
 803c824:	2900      	cmp	r1, #0
 803c826:	d0ca      	beq.n	803c7be <__sflush_r+0x1a>
 803c828:	f104 0344 	add.w	r3, r4, #68	; 0x44
 803c82c:	4299      	cmp	r1, r3
 803c82e:	d002      	beq.n	803c836 <__sflush_r+0x92>
 803c830:	4628      	mov	r0, r5
 803c832:	f7ff fad5 	bl	803bde0 <_free_r>
 803c836:	2000      	movs	r0, #0
 803c838:	6360      	str	r0, [r4, #52]	; 0x34
 803c83a:	e7c1      	b.n	803c7c0 <__sflush_r+0x1c>
 803c83c:	6a21      	ldr	r1, [r4, #32]
 803c83e:	2301      	movs	r3, #1
 803c840:	4628      	mov	r0, r5
 803c842:	47b0      	blx	r6
 803c844:	1c41      	adds	r1, r0, #1
 803c846:	d1c7      	bne.n	803c7d8 <__sflush_r+0x34>
 803c848:	682b      	ldr	r3, [r5, #0]
 803c84a:	2b00      	cmp	r3, #0
 803c84c:	d0c4      	beq.n	803c7d8 <__sflush_r+0x34>
 803c84e:	2b1d      	cmp	r3, #29
 803c850:	d001      	beq.n	803c856 <__sflush_r+0xb2>
 803c852:	2b16      	cmp	r3, #22
 803c854:	d101      	bne.n	803c85a <__sflush_r+0xb6>
 803c856:	602f      	str	r7, [r5, #0]
 803c858:	e7b1      	b.n	803c7be <__sflush_r+0x1a>
 803c85a:	89a3      	ldrh	r3, [r4, #12]
 803c85c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 803c860:	81a3      	strh	r3, [r4, #12]
 803c862:	e7ad      	b.n	803c7c0 <__sflush_r+0x1c>
 803c864:	690f      	ldr	r7, [r1, #16]
 803c866:	2f00      	cmp	r7, #0
 803c868:	d0a9      	beq.n	803c7be <__sflush_r+0x1a>
 803c86a:	0793      	lsls	r3, r2, #30
 803c86c:	680e      	ldr	r6, [r1, #0]
 803c86e:	bf08      	it	eq
 803c870:	694b      	ldreq	r3, [r1, #20]
 803c872:	600f      	str	r7, [r1, #0]
 803c874:	bf18      	it	ne
 803c876:	2300      	movne	r3, #0
 803c878:	eba6 0807 	sub.w	r8, r6, r7
 803c87c:	608b      	str	r3, [r1, #8]
 803c87e:	f1b8 0f00 	cmp.w	r8, #0
 803c882:	dd9c      	ble.n	803c7be <__sflush_r+0x1a>
 803c884:	6a21      	ldr	r1, [r4, #32]
 803c886:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 803c888:	4643      	mov	r3, r8
 803c88a:	463a      	mov	r2, r7
 803c88c:	4628      	mov	r0, r5
 803c88e:	47b0      	blx	r6
 803c890:	2800      	cmp	r0, #0
 803c892:	dc06      	bgt.n	803c8a2 <__sflush_r+0xfe>
 803c894:	89a3      	ldrh	r3, [r4, #12]
 803c896:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 803c89a:	81a3      	strh	r3, [r4, #12]
 803c89c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 803c8a0:	e78e      	b.n	803c7c0 <__sflush_r+0x1c>
 803c8a2:	4407      	add	r7, r0
 803c8a4:	eba8 0800 	sub.w	r8, r8, r0
 803c8a8:	e7e9      	b.n	803c87e <__sflush_r+0xda>
 803c8aa:	bf00      	nop
 803c8ac:	20400001 	.word	0x20400001

0803c8b0 <_fflush_r>:
 803c8b0:	b538      	push	{r3, r4, r5, lr}
 803c8b2:	690b      	ldr	r3, [r1, #16]
 803c8b4:	4605      	mov	r5, r0
 803c8b6:	460c      	mov	r4, r1
 803c8b8:	b913      	cbnz	r3, 803c8c0 <_fflush_r+0x10>
 803c8ba:	2500      	movs	r5, #0
 803c8bc:	4628      	mov	r0, r5
 803c8be:	bd38      	pop	{r3, r4, r5, pc}
 803c8c0:	b118      	cbz	r0, 803c8ca <_fflush_r+0x1a>
 803c8c2:	6983      	ldr	r3, [r0, #24]
 803c8c4:	b90b      	cbnz	r3, 803c8ca <_fflush_r+0x1a>
 803c8c6:	f000 f887 	bl	803c9d8 <__sinit>
 803c8ca:	4b14      	ldr	r3, [pc, #80]	; (803c91c <_fflush_r+0x6c>)
 803c8cc:	429c      	cmp	r4, r3
 803c8ce:	d11b      	bne.n	803c908 <_fflush_r+0x58>
 803c8d0:	686c      	ldr	r4, [r5, #4]
 803c8d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 803c8d6:	2b00      	cmp	r3, #0
 803c8d8:	d0ef      	beq.n	803c8ba <_fflush_r+0xa>
 803c8da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 803c8dc:	07d0      	lsls	r0, r2, #31
 803c8de:	d404      	bmi.n	803c8ea <_fflush_r+0x3a>
 803c8e0:	0599      	lsls	r1, r3, #22
 803c8e2:	d402      	bmi.n	803c8ea <_fflush_r+0x3a>
 803c8e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 803c8e6:	f000 f915 	bl	803cb14 <__retarget_lock_acquire_recursive>
 803c8ea:	4628      	mov	r0, r5
 803c8ec:	4621      	mov	r1, r4
 803c8ee:	f7ff ff59 	bl	803c7a4 <__sflush_r>
 803c8f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 803c8f4:	07da      	lsls	r2, r3, #31
 803c8f6:	4605      	mov	r5, r0
 803c8f8:	d4e0      	bmi.n	803c8bc <_fflush_r+0xc>
 803c8fa:	89a3      	ldrh	r3, [r4, #12]
 803c8fc:	059b      	lsls	r3, r3, #22
 803c8fe:	d4dd      	bmi.n	803c8bc <_fflush_r+0xc>
 803c900:	6da0      	ldr	r0, [r4, #88]	; 0x58
 803c902:	f000 f908 	bl	803cb16 <__retarget_lock_release_recursive>
 803c906:	e7d9      	b.n	803c8bc <_fflush_r+0xc>
 803c908:	4b05      	ldr	r3, [pc, #20]	; (803c920 <_fflush_r+0x70>)
 803c90a:	429c      	cmp	r4, r3
 803c90c:	d101      	bne.n	803c912 <_fflush_r+0x62>
 803c90e:	68ac      	ldr	r4, [r5, #8]
 803c910:	e7df      	b.n	803c8d2 <_fflush_r+0x22>
 803c912:	4b04      	ldr	r3, [pc, #16]	; (803c924 <_fflush_r+0x74>)
 803c914:	429c      	cmp	r4, r3
 803c916:	bf08      	it	eq
 803c918:	68ec      	ldreq	r4, [r5, #12]
 803c91a:	e7da      	b.n	803c8d2 <_fflush_r+0x22>
 803c91c:	0805851c 	.word	0x0805851c
 803c920:	0805853c 	.word	0x0805853c
 803c924:	080584fc 	.word	0x080584fc

0803c928 <std>:
 803c928:	2300      	movs	r3, #0
 803c92a:	b510      	push	{r4, lr}
 803c92c:	4604      	mov	r4, r0
 803c92e:	e9c0 3300 	strd	r3, r3, [r0]
 803c932:	e9c0 3304 	strd	r3, r3, [r0, #16]
 803c936:	6083      	str	r3, [r0, #8]
 803c938:	8181      	strh	r1, [r0, #12]
 803c93a:	6643      	str	r3, [r0, #100]	; 0x64
 803c93c:	81c2      	strh	r2, [r0, #14]
 803c93e:	6183      	str	r3, [r0, #24]
 803c940:	4619      	mov	r1, r3
 803c942:	2208      	movs	r2, #8
 803c944:	305c      	adds	r0, #92	; 0x5c
 803c946:	f7ff fa43 	bl	803bdd0 <memset>
 803c94a:	4b05      	ldr	r3, [pc, #20]	; (803c960 <std+0x38>)
 803c94c:	6263      	str	r3, [r4, #36]	; 0x24
 803c94e:	4b05      	ldr	r3, [pc, #20]	; (803c964 <std+0x3c>)
 803c950:	62a3      	str	r3, [r4, #40]	; 0x28
 803c952:	4b05      	ldr	r3, [pc, #20]	; (803c968 <std+0x40>)
 803c954:	62e3      	str	r3, [r4, #44]	; 0x2c
 803c956:	4b05      	ldr	r3, [pc, #20]	; (803c96c <std+0x44>)
 803c958:	6224      	str	r4, [r4, #32]
 803c95a:	6323      	str	r3, [r4, #48]	; 0x30
 803c95c:	bd10      	pop	{r4, pc}
 803c95e:	bf00      	nop
 803c960:	0803cbfd 	.word	0x0803cbfd
 803c964:	0803cc1f 	.word	0x0803cc1f
 803c968:	0803cc57 	.word	0x0803cc57
 803c96c:	0803cc7b 	.word	0x0803cc7b

0803c970 <_cleanup_r>:
 803c970:	4901      	ldr	r1, [pc, #4]	; (803c978 <_cleanup_r+0x8>)
 803c972:	f000 b8af 	b.w	803cad4 <_fwalk_reent>
 803c976:	bf00      	nop
 803c978:	0803c8b1 	.word	0x0803c8b1

0803c97c <__sfmoreglue>:
 803c97c:	b570      	push	{r4, r5, r6, lr}
 803c97e:	2268      	movs	r2, #104	; 0x68
 803c980:	1e4d      	subs	r5, r1, #1
 803c982:	4355      	muls	r5, r2
 803c984:	460e      	mov	r6, r1
 803c986:	f105 0174 	add.w	r1, r5, #116	; 0x74
 803c98a:	f7ff fa95 	bl	803beb8 <_malloc_r>
 803c98e:	4604      	mov	r4, r0
 803c990:	b140      	cbz	r0, 803c9a4 <__sfmoreglue+0x28>
 803c992:	2100      	movs	r1, #0
 803c994:	e9c0 1600 	strd	r1, r6, [r0]
 803c998:	300c      	adds	r0, #12
 803c99a:	60a0      	str	r0, [r4, #8]
 803c99c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 803c9a0:	f7ff fa16 	bl	803bdd0 <memset>
 803c9a4:	4620      	mov	r0, r4
 803c9a6:	bd70      	pop	{r4, r5, r6, pc}

0803c9a8 <__sfp_lock_acquire>:
 803c9a8:	4801      	ldr	r0, [pc, #4]	; (803c9b0 <__sfp_lock_acquire+0x8>)
 803c9aa:	f000 b8b3 	b.w	803cb14 <__retarget_lock_acquire_recursive>
 803c9ae:	bf00      	nop
 803c9b0:	240267e1 	.word	0x240267e1

0803c9b4 <__sfp_lock_release>:
 803c9b4:	4801      	ldr	r0, [pc, #4]	; (803c9bc <__sfp_lock_release+0x8>)
 803c9b6:	f000 b8ae 	b.w	803cb16 <__retarget_lock_release_recursive>
 803c9ba:	bf00      	nop
 803c9bc:	240267e1 	.word	0x240267e1

0803c9c0 <__sinit_lock_acquire>:
 803c9c0:	4801      	ldr	r0, [pc, #4]	; (803c9c8 <__sinit_lock_acquire+0x8>)
 803c9c2:	f000 b8a7 	b.w	803cb14 <__retarget_lock_acquire_recursive>
 803c9c6:	bf00      	nop
 803c9c8:	240267e2 	.word	0x240267e2

0803c9cc <__sinit_lock_release>:
 803c9cc:	4801      	ldr	r0, [pc, #4]	; (803c9d4 <__sinit_lock_release+0x8>)
 803c9ce:	f000 b8a2 	b.w	803cb16 <__retarget_lock_release_recursive>
 803c9d2:	bf00      	nop
 803c9d4:	240267e2 	.word	0x240267e2

0803c9d8 <__sinit>:
 803c9d8:	b510      	push	{r4, lr}
 803c9da:	4604      	mov	r4, r0
 803c9dc:	f7ff fff0 	bl	803c9c0 <__sinit_lock_acquire>
 803c9e0:	69a3      	ldr	r3, [r4, #24]
 803c9e2:	b11b      	cbz	r3, 803c9ec <__sinit+0x14>
 803c9e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 803c9e8:	f7ff bff0 	b.w	803c9cc <__sinit_lock_release>
 803c9ec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 803c9f0:	6523      	str	r3, [r4, #80]	; 0x50
 803c9f2:	4b13      	ldr	r3, [pc, #76]	; (803ca40 <__sinit+0x68>)
 803c9f4:	4a13      	ldr	r2, [pc, #76]	; (803ca44 <__sinit+0x6c>)
 803c9f6:	681b      	ldr	r3, [r3, #0]
 803c9f8:	62a2      	str	r2, [r4, #40]	; 0x28
 803c9fa:	42a3      	cmp	r3, r4
 803c9fc:	bf04      	itt	eq
 803c9fe:	2301      	moveq	r3, #1
 803ca00:	61a3      	streq	r3, [r4, #24]
 803ca02:	4620      	mov	r0, r4
 803ca04:	f000 f820 	bl	803ca48 <__sfp>
 803ca08:	6060      	str	r0, [r4, #4]
 803ca0a:	4620      	mov	r0, r4
 803ca0c:	f000 f81c 	bl	803ca48 <__sfp>
 803ca10:	60a0      	str	r0, [r4, #8]
 803ca12:	4620      	mov	r0, r4
 803ca14:	f000 f818 	bl	803ca48 <__sfp>
 803ca18:	2200      	movs	r2, #0
 803ca1a:	60e0      	str	r0, [r4, #12]
 803ca1c:	2104      	movs	r1, #4
 803ca1e:	6860      	ldr	r0, [r4, #4]
 803ca20:	f7ff ff82 	bl	803c928 <std>
 803ca24:	68a0      	ldr	r0, [r4, #8]
 803ca26:	2201      	movs	r2, #1
 803ca28:	2109      	movs	r1, #9
 803ca2a:	f7ff ff7d 	bl	803c928 <std>
 803ca2e:	68e0      	ldr	r0, [r4, #12]
 803ca30:	2202      	movs	r2, #2
 803ca32:	2112      	movs	r1, #18
 803ca34:	f7ff ff78 	bl	803c928 <std>
 803ca38:	2301      	movs	r3, #1
 803ca3a:	61a3      	str	r3, [r4, #24]
 803ca3c:	e7d2      	b.n	803c9e4 <__sinit+0xc>
 803ca3e:	bf00      	nop
 803ca40:	080584c4 	.word	0x080584c4
 803ca44:	0803c971 	.word	0x0803c971

0803ca48 <__sfp>:
 803ca48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803ca4a:	4607      	mov	r7, r0
 803ca4c:	f7ff ffac 	bl	803c9a8 <__sfp_lock_acquire>
 803ca50:	4b1e      	ldr	r3, [pc, #120]	; (803cacc <__sfp+0x84>)
 803ca52:	681e      	ldr	r6, [r3, #0]
 803ca54:	69b3      	ldr	r3, [r6, #24]
 803ca56:	b913      	cbnz	r3, 803ca5e <__sfp+0x16>
 803ca58:	4630      	mov	r0, r6
 803ca5a:	f7ff ffbd 	bl	803c9d8 <__sinit>
 803ca5e:	3648      	adds	r6, #72	; 0x48
 803ca60:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 803ca64:	3b01      	subs	r3, #1
 803ca66:	d503      	bpl.n	803ca70 <__sfp+0x28>
 803ca68:	6833      	ldr	r3, [r6, #0]
 803ca6a:	b30b      	cbz	r3, 803cab0 <__sfp+0x68>
 803ca6c:	6836      	ldr	r6, [r6, #0]
 803ca6e:	e7f7      	b.n	803ca60 <__sfp+0x18>
 803ca70:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 803ca74:	b9d5      	cbnz	r5, 803caac <__sfp+0x64>
 803ca76:	4b16      	ldr	r3, [pc, #88]	; (803cad0 <__sfp+0x88>)
 803ca78:	60e3      	str	r3, [r4, #12]
 803ca7a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 803ca7e:	6665      	str	r5, [r4, #100]	; 0x64
 803ca80:	f000 f847 	bl	803cb12 <__retarget_lock_init_recursive>
 803ca84:	f7ff ff96 	bl	803c9b4 <__sfp_lock_release>
 803ca88:	e9c4 5501 	strd	r5, r5, [r4, #4]
 803ca8c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 803ca90:	6025      	str	r5, [r4, #0]
 803ca92:	61a5      	str	r5, [r4, #24]
 803ca94:	2208      	movs	r2, #8
 803ca96:	4629      	mov	r1, r5
 803ca98:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 803ca9c:	f7ff f998 	bl	803bdd0 <memset>
 803caa0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 803caa4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 803caa8:	4620      	mov	r0, r4
 803caaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 803caac:	3468      	adds	r4, #104	; 0x68
 803caae:	e7d9      	b.n	803ca64 <__sfp+0x1c>
 803cab0:	2104      	movs	r1, #4
 803cab2:	4638      	mov	r0, r7
 803cab4:	f7ff ff62 	bl	803c97c <__sfmoreglue>
 803cab8:	4604      	mov	r4, r0
 803caba:	6030      	str	r0, [r6, #0]
 803cabc:	2800      	cmp	r0, #0
 803cabe:	d1d5      	bne.n	803ca6c <__sfp+0x24>
 803cac0:	f7ff ff78 	bl	803c9b4 <__sfp_lock_release>
 803cac4:	230c      	movs	r3, #12
 803cac6:	603b      	str	r3, [r7, #0]
 803cac8:	e7ee      	b.n	803caa8 <__sfp+0x60>
 803caca:	bf00      	nop
 803cacc:	080584c4 	.word	0x080584c4
 803cad0:	ffff0001 	.word	0xffff0001

0803cad4 <_fwalk_reent>:
 803cad4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 803cad8:	4606      	mov	r6, r0
 803cada:	4688      	mov	r8, r1
 803cadc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 803cae0:	2700      	movs	r7, #0
 803cae2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 803cae6:	f1b9 0901 	subs.w	r9, r9, #1
 803caea:	d505      	bpl.n	803caf8 <_fwalk_reent+0x24>
 803caec:	6824      	ldr	r4, [r4, #0]
 803caee:	2c00      	cmp	r4, #0
 803caf0:	d1f7      	bne.n	803cae2 <_fwalk_reent+0xe>
 803caf2:	4638      	mov	r0, r7
 803caf4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 803caf8:	89ab      	ldrh	r3, [r5, #12]
 803cafa:	2b01      	cmp	r3, #1
 803cafc:	d907      	bls.n	803cb0e <_fwalk_reent+0x3a>
 803cafe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 803cb02:	3301      	adds	r3, #1
 803cb04:	d003      	beq.n	803cb0e <_fwalk_reent+0x3a>
 803cb06:	4629      	mov	r1, r5
 803cb08:	4630      	mov	r0, r6
 803cb0a:	47c0      	blx	r8
 803cb0c:	4307      	orrs	r7, r0
 803cb0e:	3568      	adds	r5, #104	; 0x68
 803cb10:	e7e9      	b.n	803cae6 <_fwalk_reent+0x12>

0803cb12 <__retarget_lock_init_recursive>:
 803cb12:	4770      	bx	lr

0803cb14 <__retarget_lock_acquire_recursive>:
 803cb14:	4770      	bx	lr

0803cb16 <__retarget_lock_release_recursive>:
 803cb16:	4770      	bx	lr

0803cb18 <__swhatbuf_r>:
 803cb18:	b570      	push	{r4, r5, r6, lr}
 803cb1a:	460e      	mov	r6, r1
 803cb1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 803cb20:	2900      	cmp	r1, #0
 803cb22:	b096      	sub	sp, #88	; 0x58
 803cb24:	4614      	mov	r4, r2
 803cb26:	461d      	mov	r5, r3
 803cb28:	da08      	bge.n	803cb3c <__swhatbuf_r+0x24>
 803cb2a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 803cb2e:	2200      	movs	r2, #0
 803cb30:	602a      	str	r2, [r5, #0]
 803cb32:	061a      	lsls	r2, r3, #24
 803cb34:	d410      	bmi.n	803cb58 <__swhatbuf_r+0x40>
 803cb36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 803cb3a:	e00e      	b.n	803cb5a <__swhatbuf_r+0x42>
 803cb3c:	466a      	mov	r2, sp
 803cb3e:	f000 f8c3 	bl	803ccc8 <_fstat_r>
 803cb42:	2800      	cmp	r0, #0
 803cb44:	dbf1      	blt.n	803cb2a <__swhatbuf_r+0x12>
 803cb46:	9a01      	ldr	r2, [sp, #4]
 803cb48:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 803cb4c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 803cb50:	425a      	negs	r2, r3
 803cb52:	415a      	adcs	r2, r3
 803cb54:	602a      	str	r2, [r5, #0]
 803cb56:	e7ee      	b.n	803cb36 <__swhatbuf_r+0x1e>
 803cb58:	2340      	movs	r3, #64	; 0x40
 803cb5a:	2000      	movs	r0, #0
 803cb5c:	6023      	str	r3, [r4, #0]
 803cb5e:	b016      	add	sp, #88	; 0x58
 803cb60:	bd70      	pop	{r4, r5, r6, pc}
	...

0803cb64 <__smakebuf_r>:
 803cb64:	898b      	ldrh	r3, [r1, #12]
 803cb66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 803cb68:	079d      	lsls	r5, r3, #30
 803cb6a:	4606      	mov	r6, r0
 803cb6c:	460c      	mov	r4, r1
 803cb6e:	d507      	bpl.n	803cb80 <__smakebuf_r+0x1c>
 803cb70:	f104 0347 	add.w	r3, r4, #71	; 0x47
 803cb74:	6023      	str	r3, [r4, #0]
 803cb76:	6123      	str	r3, [r4, #16]
 803cb78:	2301      	movs	r3, #1
 803cb7a:	6163      	str	r3, [r4, #20]
 803cb7c:	b002      	add	sp, #8
 803cb7e:	bd70      	pop	{r4, r5, r6, pc}
 803cb80:	ab01      	add	r3, sp, #4
 803cb82:	466a      	mov	r2, sp
 803cb84:	f7ff ffc8 	bl	803cb18 <__swhatbuf_r>
 803cb88:	9900      	ldr	r1, [sp, #0]
 803cb8a:	4605      	mov	r5, r0
 803cb8c:	4630      	mov	r0, r6
 803cb8e:	f7ff f993 	bl	803beb8 <_malloc_r>
 803cb92:	b948      	cbnz	r0, 803cba8 <__smakebuf_r+0x44>
 803cb94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 803cb98:	059a      	lsls	r2, r3, #22
 803cb9a:	d4ef      	bmi.n	803cb7c <__smakebuf_r+0x18>
 803cb9c:	f023 0303 	bic.w	r3, r3, #3
 803cba0:	f043 0302 	orr.w	r3, r3, #2
 803cba4:	81a3      	strh	r3, [r4, #12]
 803cba6:	e7e3      	b.n	803cb70 <__smakebuf_r+0xc>
 803cba8:	4b0d      	ldr	r3, [pc, #52]	; (803cbe0 <__smakebuf_r+0x7c>)
 803cbaa:	62b3      	str	r3, [r6, #40]	; 0x28
 803cbac:	89a3      	ldrh	r3, [r4, #12]
 803cbae:	6020      	str	r0, [r4, #0]
 803cbb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 803cbb4:	81a3      	strh	r3, [r4, #12]
 803cbb6:	9b00      	ldr	r3, [sp, #0]
 803cbb8:	6163      	str	r3, [r4, #20]
 803cbba:	9b01      	ldr	r3, [sp, #4]
 803cbbc:	6120      	str	r0, [r4, #16]
 803cbbe:	b15b      	cbz	r3, 803cbd8 <__smakebuf_r+0x74>
 803cbc0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 803cbc4:	4630      	mov	r0, r6
 803cbc6:	f000 f891 	bl	803ccec <_isatty_r>
 803cbca:	b128      	cbz	r0, 803cbd8 <__smakebuf_r+0x74>
 803cbcc:	89a3      	ldrh	r3, [r4, #12]
 803cbce:	f023 0303 	bic.w	r3, r3, #3
 803cbd2:	f043 0301 	orr.w	r3, r3, #1
 803cbd6:	81a3      	strh	r3, [r4, #12]
 803cbd8:	89a0      	ldrh	r0, [r4, #12]
 803cbda:	4305      	orrs	r5, r0
 803cbdc:	81a5      	strh	r5, [r4, #12]
 803cbde:	e7cd      	b.n	803cb7c <__smakebuf_r+0x18>
 803cbe0:	0803c971 	.word	0x0803c971

0803cbe4 <__malloc_lock>:
 803cbe4:	4801      	ldr	r0, [pc, #4]	; (803cbec <__malloc_lock+0x8>)
 803cbe6:	f7ff bf95 	b.w	803cb14 <__retarget_lock_acquire_recursive>
 803cbea:	bf00      	nop
 803cbec:	240267e0 	.word	0x240267e0

0803cbf0 <__malloc_unlock>:
 803cbf0:	4801      	ldr	r0, [pc, #4]	; (803cbf8 <__malloc_unlock+0x8>)
 803cbf2:	f7ff bf90 	b.w	803cb16 <__retarget_lock_release_recursive>
 803cbf6:	bf00      	nop
 803cbf8:	240267e0 	.word	0x240267e0

0803cbfc <__sread>:
 803cbfc:	b510      	push	{r4, lr}
 803cbfe:	460c      	mov	r4, r1
 803cc00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 803cc04:	f000 f894 	bl	803cd30 <_read_r>
 803cc08:	2800      	cmp	r0, #0
 803cc0a:	bfab      	itete	ge
 803cc0c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 803cc0e:	89a3      	ldrhlt	r3, [r4, #12]
 803cc10:	181b      	addge	r3, r3, r0
 803cc12:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 803cc16:	bfac      	ite	ge
 803cc18:	6563      	strge	r3, [r4, #84]	; 0x54
 803cc1a:	81a3      	strhlt	r3, [r4, #12]
 803cc1c:	bd10      	pop	{r4, pc}

0803cc1e <__swrite>:
 803cc1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 803cc22:	461f      	mov	r7, r3
 803cc24:	898b      	ldrh	r3, [r1, #12]
 803cc26:	05db      	lsls	r3, r3, #23
 803cc28:	4605      	mov	r5, r0
 803cc2a:	460c      	mov	r4, r1
 803cc2c:	4616      	mov	r6, r2
 803cc2e:	d505      	bpl.n	803cc3c <__swrite+0x1e>
 803cc30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 803cc34:	2302      	movs	r3, #2
 803cc36:	2200      	movs	r2, #0
 803cc38:	f000 f868 	bl	803cd0c <_lseek_r>
 803cc3c:	89a3      	ldrh	r3, [r4, #12]
 803cc3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 803cc42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 803cc46:	81a3      	strh	r3, [r4, #12]
 803cc48:	4632      	mov	r2, r6
 803cc4a:	463b      	mov	r3, r7
 803cc4c:	4628      	mov	r0, r5
 803cc4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 803cc52:	f000 b817 	b.w	803cc84 <_write_r>

0803cc56 <__sseek>:
 803cc56:	b510      	push	{r4, lr}
 803cc58:	460c      	mov	r4, r1
 803cc5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 803cc5e:	f000 f855 	bl	803cd0c <_lseek_r>
 803cc62:	1c43      	adds	r3, r0, #1
 803cc64:	89a3      	ldrh	r3, [r4, #12]
 803cc66:	bf15      	itete	ne
 803cc68:	6560      	strne	r0, [r4, #84]	; 0x54
 803cc6a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 803cc6e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 803cc72:	81a3      	strheq	r3, [r4, #12]
 803cc74:	bf18      	it	ne
 803cc76:	81a3      	strhne	r3, [r4, #12]
 803cc78:	bd10      	pop	{r4, pc}

0803cc7a <__sclose>:
 803cc7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 803cc7e:	f000 b813 	b.w	803cca8 <_close_r>
	...

0803cc84 <_write_r>:
 803cc84:	b538      	push	{r3, r4, r5, lr}
 803cc86:	4d07      	ldr	r5, [pc, #28]	; (803cca4 <_write_r+0x20>)
 803cc88:	4604      	mov	r4, r0
 803cc8a:	4608      	mov	r0, r1
 803cc8c:	4611      	mov	r1, r2
 803cc8e:	2200      	movs	r2, #0
 803cc90:	602a      	str	r2, [r5, #0]
 803cc92:	461a      	mov	r2, r3
 803cc94:	f7ed f93f 	bl	8029f16 <_write>
 803cc98:	1c43      	adds	r3, r0, #1
 803cc9a:	d102      	bne.n	803cca2 <_write_r+0x1e>
 803cc9c:	682b      	ldr	r3, [r5, #0]
 803cc9e:	b103      	cbz	r3, 803cca2 <_write_r+0x1e>
 803cca0:	6023      	str	r3, [r4, #0]
 803cca2:	bd38      	pop	{r3, r4, r5, pc}
 803cca4:	240267e4 	.word	0x240267e4

0803cca8 <_close_r>:
 803cca8:	b538      	push	{r3, r4, r5, lr}
 803ccaa:	4d06      	ldr	r5, [pc, #24]	; (803ccc4 <_close_r+0x1c>)
 803ccac:	2300      	movs	r3, #0
 803ccae:	4604      	mov	r4, r0
 803ccb0:	4608      	mov	r0, r1
 803ccb2:	602b      	str	r3, [r5, #0]
 803ccb4:	f7ed f94b 	bl	8029f4e <_close>
 803ccb8:	1c43      	adds	r3, r0, #1
 803ccba:	d102      	bne.n	803ccc2 <_close_r+0x1a>
 803ccbc:	682b      	ldr	r3, [r5, #0]
 803ccbe:	b103      	cbz	r3, 803ccc2 <_close_r+0x1a>
 803ccc0:	6023      	str	r3, [r4, #0]
 803ccc2:	bd38      	pop	{r3, r4, r5, pc}
 803ccc4:	240267e4 	.word	0x240267e4

0803ccc8 <_fstat_r>:
 803ccc8:	b538      	push	{r3, r4, r5, lr}
 803ccca:	4d07      	ldr	r5, [pc, #28]	; (803cce8 <_fstat_r+0x20>)
 803cccc:	2300      	movs	r3, #0
 803ccce:	4604      	mov	r4, r0
 803ccd0:	4608      	mov	r0, r1
 803ccd2:	4611      	mov	r1, r2
 803ccd4:	602b      	str	r3, [r5, #0]
 803ccd6:	f7ed f946 	bl	8029f66 <_fstat>
 803ccda:	1c43      	adds	r3, r0, #1
 803ccdc:	d102      	bne.n	803cce4 <_fstat_r+0x1c>
 803ccde:	682b      	ldr	r3, [r5, #0]
 803cce0:	b103      	cbz	r3, 803cce4 <_fstat_r+0x1c>
 803cce2:	6023      	str	r3, [r4, #0]
 803cce4:	bd38      	pop	{r3, r4, r5, pc}
 803cce6:	bf00      	nop
 803cce8:	240267e4 	.word	0x240267e4

0803ccec <_isatty_r>:
 803ccec:	b538      	push	{r3, r4, r5, lr}
 803ccee:	4d06      	ldr	r5, [pc, #24]	; (803cd08 <_isatty_r+0x1c>)
 803ccf0:	2300      	movs	r3, #0
 803ccf2:	4604      	mov	r4, r0
 803ccf4:	4608      	mov	r0, r1
 803ccf6:	602b      	str	r3, [r5, #0]
 803ccf8:	f7ed f945 	bl	8029f86 <_isatty>
 803ccfc:	1c43      	adds	r3, r0, #1
 803ccfe:	d102      	bne.n	803cd06 <_isatty_r+0x1a>
 803cd00:	682b      	ldr	r3, [r5, #0]
 803cd02:	b103      	cbz	r3, 803cd06 <_isatty_r+0x1a>
 803cd04:	6023      	str	r3, [r4, #0]
 803cd06:	bd38      	pop	{r3, r4, r5, pc}
 803cd08:	240267e4 	.word	0x240267e4

0803cd0c <_lseek_r>:
 803cd0c:	b538      	push	{r3, r4, r5, lr}
 803cd0e:	4d07      	ldr	r5, [pc, #28]	; (803cd2c <_lseek_r+0x20>)
 803cd10:	4604      	mov	r4, r0
 803cd12:	4608      	mov	r0, r1
 803cd14:	4611      	mov	r1, r2
 803cd16:	2200      	movs	r2, #0
 803cd18:	602a      	str	r2, [r5, #0]
 803cd1a:	461a      	mov	r2, r3
 803cd1c:	f7ed f93e 	bl	8029f9c <_lseek>
 803cd20:	1c43      	adds	r3, r0, #1
 803cd22:	d102      	bne.n	803cd2a <_lseek_r+0x1e>
 803cd24:	682b      	ldr	r3, [r5, #0]
 803cd26:	b103      	cbz	r3, 803cd2a <_lseek_r+0x1e>
 803cd28:	6023      	str	r3, [r4, #0]
 803cd2a:	bd38      	pop	{r3, r4, r5, pc}
 803cd2c:	240267e4 	.word	0x240267e4

0803cd30 <_read_r>:
 803cd30:	b538      	push	{r3, r4, r5, lr}
 803cd32:	4d07      	ldr	r5, [pc, #28]	; (803cd50 <_read_r+0x20>)
 803cd34:	4604      	mov	r4, r0
 803cd36:	4608      	mov	r0, r1
 803cd38:	4611      	mov	r1, r2
 803cd3a:	2200      	movs	r2, #0
 803cd3c:	602a      	str	r2, [r5, #0]
 803cd3e:	461a      	mov	r2, r3
 803cd40:	f7ed f8cc 	bl	8029edc <_read>
 803cd44:	1c43      	adds	r3, r0, #1
 803cd46:	d102      	bne.n	803cd4e <_read_r+0x1e>
 803cd48:	682b      	ldr	r3, [r5, #0]
 803cd4a:	b103      	cbz	r3, 803cd4e <_read_r+0x1e>
 803cd4c:	6023      	str	r3, [r4, #0]
 803cd4e:	bd38      	pop	{r3, r4, r5, pc}
 803cd50:	240267e4 	.word	0x240267e4

0803cd54 <_init>:
 803cd54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803cd56:	bf00      	nop
 803cd58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 803cd5a:	bc08      	pop	{r3}
 803cd5c:	469e      	mov	lr, r3
 803cd5e:	4770      	bx	lr

0803cd60 <_fini>:
 803cd60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803cd62:	bf00      	nop
 803cd64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 803cd66:	bc08      	pop	{r3}
 803cd68:	469e      	mov	lr, r3
 803cd6a:	4770      	bx	lr
